// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46412 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46788 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := false ;
 808: LD_ADDR_EXP 9
 812: PUSH
 813: LD_INT 0
 815: ST_TO_ADDR
// mpMapSize := [ 140 , 160 ] ;
 816: LD_ADDR_EXP 27
 820: PUSH
 821: LD_INT 140
 823: PUSH
 824: LD_INT 160
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUp1 , buildUp2 , buildUp3 , buildUp4 , buildUp5 , buildUp6 , buildUp7 , buildUp8 ] ;
 845: LD_ADDR_EXP 17
 849: PUSH
 850: LD_INT 9
 852: PUSH
 853: LD_INT 10
 855: PUSH
 856: LD_INT 11
 858: PUSH
 859: LD_INT 12
 861: PUSH
 862: LD_INT 13
 864: PUSH
 865: LD_INT 14
 867: PUSH
 868: LD_INT 15
 870: PUSH
 871: LD_INT 16
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 16
 888: PUSH
 889: LD_INT 17
 891: PUSH
 892: LD_INT 18
 894: PUSH
 895: LD_INT 19
 897: PUSH
 898: LD_INT 20
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 22
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 17
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 4
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 22
 959: PUSH
 960: LD_EXP 4
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 23
 973: PUSH
 974: LD_EXP 4
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 13
 987: PUSH
 988: LD_EXP 4
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 25
1001: PUSH
1002: LD_EXP 4
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 4
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 4
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// if gameType = GameTypeKing then
1047: LD_VAR 0 1
1051: PUSH
1052: LD_INT 3
1054: EQUAL
1055: IFFALSE 1095
// begin mpKingArea := kingHillArea ;
1057: LD_ADDR_EXP 32
1061: PUSH
1062: LD_INT 64
1064: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1065: LD_ADDR_EXP 33
1069: PUSH
1070: LD_EXP 4
1074: PUSH
1075: LD_INT 8
1077: ARRAY
1078: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1079: LD_ADDR_EXP 35
1083: PUSH
1084: LD_EXP 4
1088: PUSH
1089: LD_INT 10
1091: ARRAY
1092: ST_TO_ADDR
// end else
1093: GO 1119
// begin mpKingArea := 0 ;
1095: LD_ADDR_EXP 32
1099: PUSH
1100: LD_INT 0
1102: ST_TO_ADDR
// mpPoints := 0 ;
1103: LD_ADDR_EXP 33
1107: PUSH
1108: LD_INT 0
1110: ST_TO_ADDR
// mpEmissions := 0 ;
1111: LD_ADDR_EXP 35
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1119: LD_EXP 4
1123: PUSH
1124: LD_INT 9
1126: ARRAY
1127: IFFALSE 1259
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1129: LD_ADDR_EXP 34
1133: PUSH
1134: LD_INT 1
1136: PUSH
1137: LD_INT 1
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 2
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 1
1160: PUSH
1161: LD_INT 3
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 12
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 1
1182: PUSH
1183: LD_INT 24
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: PUSH
1192: LD_INT 12
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: LD_INT 23
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: PUSH
1214: LD_INT 21
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 42
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 21
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 1
1240: PUSH
1241: LD_INT 42
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: LIST
1258: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1259: LD_ADDR_EXP 14
1263: PUSH
1264: LD_EXP 4
1268: PUSH
1269: LD_INT 11
1271: ARRAY
1272: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_EXP 4
1282: PUSH
1283: LD_INT 12
1285: ARRAY
1286: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1287: LD_ADDR_EXP 24
1291: PUSH
1292: LD_EXP 4
1296: PUSH
1297: LD_INT 13
1299: ARRAY
1300: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1301: LD_ADDR_EXP 31
1305: PUSH
1306: LD_EXP 4
1310: PUSH
1311: LD_INT 14
1313: ARRAY
1314: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1315: LD_ADDR_EXP 28
1319: PUSH
1320: LD_EXP 4
1324: PUSH
1325: LD_INT 15
1327: ARRAY
1328: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1329: LD_ADDR_EXP 26
1333: PUSH
1334: LD_EXP 4
1338: PUSH
1339: LD_INT 18
1341: ARRAY
1342: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1343: LD_ADDR_EXP 18
1347: PUSH
1348: LD_EXP 4
1352: PUSH
1353: LD_INT 21
1355: ARRAY
1356: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 , ApeArea7 , ApeArea8 ] ;
1357: LD_ADDR_EXP 29
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 2
1367: PUSH
1368: LD_INT 3
1370: PUSH
1371: LD_INT 4
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: LD_INT 6
1379: PUSH
1380: LD_INT 7
1382: PUSH
1383: LD_INT 8
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 5 ) , GetBuildingFromArea ( depotArea5 , 4 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 3 ) , GetBuildingFromArea ( depotArea8 , 2 ) ] ;
1396: LD_ADDR_VAR 0 8
1400: PUSH
1401: LD_INT 40
1403: PPUSH
1404: LD_INT 2
1406: PPUSH
1407: CALL 45777 0 2
1411: PUSH
1412: LD_INT 43
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: CALL 45777 0 2
1422: PUSH
1423: LD_INT 46
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL 45777 0 2
1433: PUSH
1434: LD_INT 49
1436: PPUSH
1437: LD_INT 5
1439: PPUSH
1440: CALL 45777 0 2
1444: PUSH
1445: LD_INT 52
1447: PPUSH
1448: LD_INT 4
1450: PPUSH
1451: CALL 45777 0 2
1455: PUSH
1456: LD_INT 55
1458: PPUSH
1459: LD_INT 4
1461: PPUSH
1462: CALL 45777 0 2
1466: PUSH
1467: LD_INT 58
1469: PPUSH
1470: LD_INT 3
1472: PPUSH
1473: CALL 45777 0 2
1477: PUSH
1478: LD_INT 61
1480: PPUSH
1481: LD_INT 2
1483: PPUSH
1484: CALL 45777 0 2
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1499: LD_ADDR_VAR 0 3
1503: PUSH
1504: DOUBLE
1505: LD_INT 1
1507: DEC
1508: ST_TO_ADDR
1509: LD_VAR 0 8
1513: PPUSH
1514: CALL 5126 0 1
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1624
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1522: LD_ADDR_EXP 19
1526: PUSH
1527: LD_EXP 19
1531: PPUSH
1532: LD_VAR 0 3
1536: PPUSH
1537: LD_VAR 0 8
1541: PUSH
1542: LD_VAR 0 3
1546: ARRAY
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 8
1556: PUSH
1557: LD_VAR 0 3
1561: ARRAY
1562: PUSH
1563: LD_INT 3
1565: ARRAY
1566: PPUSH
1567: LD_INT 10
1569: PPUSH
1570: CALL_OW 272
1574: PUSH
1575: LD_VAR 0 8
1579: PUSH
1580: LD_VAR 0 3
1584: ARRAY
1585: PUSH
1586: LD_INT 2
1588: ARRAY
1589: PPUSH
1590: LD_VAR 0 8
1594: PUSH
1595: LD_VAR 0 3
1599: ARRAY
1600: PUSH
1601: LD_INT 3
1603: ARRAY
1604: PPUSH
1605: LD_INT 10
1607: PPUSH
1608: CALL_OW 273
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PPUSH
1617: CALL_OW 1
1621: ST_TO_ADDR
1622: GO 1519
1624: POP
1625: POP
// if hasOil then
1626: LD_VAR 0 5
1630: IFFALSE 1769
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1632: LD_ADDR_VAR 0 4
1636: PUSH
1637: LD_EXP 4
1641: PUSH
1642: LD_INT 6
1644: ARRAY
1645: PUSH
1646: LD_INT 2
1648: EQUAL
1649: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1650: LD_ADDR_EXP 10
1654: PUSH
1655: LD_INT 24
1657: PPUSH
1658: LD_VAR 0 4
1662: PPUSH
1663: CALL 45610 0 2
1667: PUSH
1668: LD_INT 26
1670: PPUSH
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 45610 0 2
1680: PUSH
1681: LD_INT 28
1683: PPUSH
1684: LD_VAR 0 4
1688: PPUSH
1689: CALL 45610 0 2
1693: PUSH
1694: LD_INT 30
1696: PPUSH
1697: LD_VAR 0 4
1701: PPUSH
1702: CALL 45610 0 2
1706: PUSH
1707: LD_INT 32
1709: PPUSH
1710: LD_VAR 0 4
1714: PPUSH
1715: CALL 45610 0 2
1719: PUSH
1720: LD_INT 34
1722: PPUSH
1723: LD_VAR 0 4
1727: PPUSH
1728: CALL 45610 0 2
1732: PUSH
1733: LD_INT 36
1735: PPUSH
1736: LD_VAR 0 4
1740: PPUSH
1741: CALL 45610 0 2
1745: PUSH
1746: LD_INT 38
1748: PPUSH
1749: LD_VAR 0 4
1753: PPUSH
1754: CALL 45610 0 2
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: ST_TO_ADDR
// end ; if hasSib then
1769: LD_VAR 0 6
1773: IFFALSE 1912
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1775: LD_ADDR_VAR 0 4
1779: PUSH
1780: LD_EXP 4
1784: PUSH
1785: LD_INT 7
1787: ARRAY
1788: PUSH
1789: LD_INT 2
1791: EQUAL
1792: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1793: LD_ADDR_EXP 11
1797: PUSH
1798: LD_INT 25
1800: PPUSH
1801: LD_VAR 0 4
1805: PPUSH
1806: CALL 45610 0 2
1810: PUSH
1811: LD_INT 27
1813: PPUSH
1814: LD_VAR 0 4
1818: PPUSH
1819: CALL 45610 0 2
1823: PUSH
1824: LD_INT 29
1826: PPUSH
1827: LD_VAR 0 4
1831: PPUSH
1832: CALL 45610 0 2
1836: PUSH
1837: LD_INT 31
1839: PPUSH
1840: LD_VAR 0 4
1844: PPUSH
1845: CALL 45610 0 2
1849: PUSH
1850: LD_INT 33
1852: PPUSH
1853: LD_VAR 0 4
1857: PPUSH
1858: CALL 45610 0 2
1862: PUSH
1863: LD_INT 35
1865: PPUSH
1866: LD_VAR 0 4
1870: PPUSH
1871: CALL 45610 0 2
1875: PUSH
1876: LD_INT 37
1878: PPUSH
1879: LD_VAR 0 4
1883: PPUSH
1884: CALL 45610 0 2
1888: PUSH
1889: LD_INT 39
1891: PPUSH
1892: LD_VAR 0 4
1896: PPUSH
1897: CALL 45610 0 2
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1912: LD_VAR 0 7
1916: PUSH
1917: LD_INT 1
1919: GREATEREQUAL
1920: IFFALSE 1932
// mpDepots := startPos ;
1922: LD_ADDR_EXP 12
1926: PUSH
1927: LD_VAR 0 8
1931: ST_TO_ADDR
// if baseLevel >= 2 then
1932: LD_VAR 0 7
1936: PUSH
1937: LD_INT 2
1939: GREATEREQUAL
1940: IFFALSE 2357
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunkerArea11 , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea12 , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea21 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea22 , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea31 , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea32 , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea41 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea42 , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea51 , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea52 , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea61 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea62 , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea71 , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea72 , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunkerArea81 , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunkerArea82 , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 0 ) ] ] ;
1942: LD_ADDR_EXP 15
1946: PUSH
1947: LD_INT 31
1949: PUSH
1950: LD_INT 41
1952: PPUSH
1953: LD_INT 5
1955: PPUSH
1956: CALL 45777 0 2
1960: ADD
1961: PUSH
1962: LD_INT 31
1964: PUSH
1965: LD_INT 42
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL 45777 0 2
1975: ADD
1976: PUSH
1977: LD_INT 4
1979: PUSH
1980: LD_INT 65
1982: PPUSH
1983: LD_INT 5
1985: PPUSH
1986: CALL 45777 0 2
1990: ADD
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 31
1999: PUSH
2000: LD_INT 44
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: CALL 45777 0 2
2010: ADD
2011: PUSH
2012: LD_INT 31
2014: PUSH
2015: LD_INT 45
2017: PPUSH
2018: LD_INT 4
2020: PPUSH
2021: CALL 45777 0 2
2025: ADD
2026: PUSH
2027: LD_INT 4
2029: PUSH
2030: LD_INT 66
2032: PPUSH
2033: LD_INT 4
2035: PPUSH
2036: CALL 45777 0 2
2040: ADD
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 31
2049: PUSH
2050: LD_INT 47
2052: PPUSH
2053: LD_INT 3
2055: PPUSH
2056: CALL 45777 0 2
2060: ADD
2061: PUSH
2062: LD_INT 31
2064: PUSH
2065: LD_INT 48
2067: PPUSH
2068: LD_INT 4
2070: PPUSH
2071: CALL 45777 0 2
2075: ADD
2076: PUSH
2077: LD_INT 4
2079: PUSH
2080: LD_INT 67
2082: PPUSH
2083: LD_INT 3
2085: PPUSH
2086: CALL 45777 0 2
2090: ADD
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 31
2099: PUSH
2100: LD_INT 50
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL 45777 0 2
2110: ADD
2111: PUSH
2112: LD_INT 31
2114: PUSH
2115: LD_INT 51
2117: PPUSH
2118: LD_INT 2
2120: PPUSH
2121: CALL 45777 0 2
2125: ADD
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 68
2132: PPUSH
2133: LD_INT 4
2135: PPUSH
2136: CALL 45777 0 2
2140: ADD
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 31
2149: PUSH
2150: LD_INT 53
2152: PPUSH
2153: LD_INT 2
2155: PPUSH
2156: CALL 45777 0 2
2160: ADD
2161: PUSH
2162: LD_INT 31
2164: PUSH
2165: LD_INT 54
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: CALL 45777 0 2
2175: ADD
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: LD_INT 69
2182: PPUSH
2183: LD_INT 3
2185: PPUSH
2186: CALL 45777 0 2
2190: ADD
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: LD_INT 56
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL 45777 0 2
2210: ADD
2211: PUSH
2212: LD_INT 31
2214: PUSH
2215: LD_INT 57
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: CALL 45777 0 2
2225: ADD
2226: PUSH
2227: LD_INT 4
2229: PUSH
2230: LD_INT 70
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: CALL 45777 0 2
2240: ADD
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 31
2249: PUSH
2250: LD_INT 59
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: CALL 45777 0 2
2260: ADD
2261: PUSH
2262: LD_INT 31
2264: PUSH
2265: LD_INT 60
2267: PPUSH
2268: LD_INT 0
2270: PPUSH
2271: CALL 45777 0 2
2275: ADD
2276: PUSH
2277: LD_INT 4
2279: PUSH
2280: LD_INT 71
2282: PPUSH
2283: LD_INT 1
2285: PPUSH
2286: CALL 45777 0 2
2290: ADD
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: PUSH
2297: LD_INT 31
2299: PUSH
2300: LD_INT 62
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL 45777 0 2
2310: ADD
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: LD_INT 63
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL 45777 0 2
2325: ADD
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 72
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: CALL 45777 0 2
2340: ADD
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: LIST
2353: LIST
2354: LIST
2355: LIST
2356: ST_TO_ADDR
// end ; end ;
2357: LD_VAR 0 2
2361: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2362: GO 2364
2364: DISABLE
2365: LD_INT 0
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
2372: PPUSH
2373: PPUSH
2374: PPUSH
// begin if not mpShipments then
2375: LD_EXP 25
2379: NOT
2380: IFFALSE 2384
// exit ;
2382: GO 2839
// case mpShipments of 1 :
2384: LD_EXP 25
2388: PUSH
2389: LD_INT 1
2391: DOUBLE
2392: EQUAL
2393: IFTRUE 2397
2395: GO 2432
2397: POP
// begin time := 0 0$30 ;
2398: LD_ADDR_VAR 0 5
2402: PUSH
2403: LD_INT 1050
2405: ST_TO_ADDR
// normalTime := 0 0$30 ;
2406: LD_ADDR_VAR 0 6
2410: PUSH
2411: LD_INT 1050
2413: ST_TO_ADDR
// maxTime := 1 1$20 ;
2414: LD_ADDR_VAR 0 8
2418: PUSH
2419: LD_INT 2800
2421: ST_TO_ADDR
// delayTime := 0 0$5 ;
2422: LD_ADDR_VAR 0 7
2426: PUSH
2427: LD_INT 175
2429: ST_TO_ADDR
// end ; 2 :
2430: GO 2562
2432: LD_INT 2
2434: DOUBLE
2435: EQUAL
2436: IFTRUE 2440
2438: GO 2475
2440: POP
// begin time := 0 0$25 ;
2441: LD_ADDR_VAR 0 5
2445: PUSH
2446: LD_INT 875
2448: ST_TO_ADDR
// normalTime := 0 0$25 ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_INT 875
2456: ST_TO_ADDR
// maxTime := 1 1$10 ;
2457: LD_ADDR_VAR 0 8
2461: PUSH
2462: LD_INT 2450
2464: ST_TO_ADDR
// delayTime := 0 0$4 ;
2465: LD_ADDR_VAR 0 7
2469: PUSH
2470: LD_INT 140
2472: ST_TO_ADDR
// end ; 3 :
2473: GO 2562
2475: LD_INT 3
2477: DOUBLE
2478: EQUAL
2479: IFTRUE 2483
2481: GO 2518
2483: POP
// begin time := 0 0$20 ;
2484: LD_ADDR_VAR 0 5
2488: PUSH
2489: LD_INT 700
2491: ST_TO_ADDR
// normalTime := 0 0$20 ;
2492: LD_ADDR_VAR 0 6
2496: PUSH
2497: LD_INT 700
2499: ST_TO_ADDR
// maxTime := 1 1$00 ;
2500: LD_ADDR_VAR 0 8
2504: PUSH
2505: LD_INT 2100
2507: ST_TO_ADDR
// delayTime := 0 0$3 ;
2508: LD_ADDR_VAR 0 7
2512: PUSH
2513: LD_INT 105
2515: ST_TO_ADDR
// end ; 4 :
2516: GO 2562
2518: LD_INT 4
2520: DOUBLE
2521: EQUAL
2522: IFTRUE 2526
2524: GO 2561
2526: POP
// begin time := 0 0$15 ;
2527: LD_ADDR_VAR 0 5
2531: PUSH
2532: LD_INT 525
2534: ST_TO_ADDR
// normalTime := 0 0$15 ;
2535: LD_ADDR_VAR 0 6
2539: PUSH
2540: LD_INT 525
2542: ST_TO_ADDR
// maxTime := 0 0$55 ;
2543: LD_ADDR_VAR 0 8
2547: PUSH
2548: LD_INT 1925
2550: ST_TO_ADDR
// delayTime := 0 0$2 ;
2551: LD_ADDR_VAR 0 7
2555: PUSH
2556: LD_INT 70
2558: ST_TO_ADDR
// end ; end ;
2559: GO 2562
2561: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2562: LD_ADDR_VAR 0 4
2566: PUSH
2567: LD_INT 17
2569: PUSH
2570: LD_INT 18
2572: PUSH
2573: LD_INT 19
2575: PUSH
2576: LD_INT 20
2578: PUSH
2579: LD_INT 21
2581: PUSH
2582: LD_INT 22
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// tmp := [ buildUp1 , buildUp2 , buildUp3 , buildUp4 , buildUp5 , buildUp6 , buildUp7 , buildUp8 ] ;
2593: LD_ADDR_VAR 0 3
2597: PUSH
2598: LD_INT 9
2600: PUSH
2601: LD_INT 10
2603: PUSH
2604: LD_INT 11
2606: PUSH
2607: LD_INT 12
2609: PUSH
2610: LD_INT 13
2612: PUSH
2613: LD_INT 14
2615: PUSH
2616: LD_INT 15
2618: PUSH
2619: LD_INT 16
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: ST_TO_ADDR
// for i := 1 to 8 do
2632: LD_ADDR_VAR 0 1
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 8
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2693
// begin if not mpSidePositions [ i ] then
2648: LD_EXP 5
2652: PUSH
2653: LD_VAR 0 1
2657: ARRAY
2658: NOT
2659: IFFALSE 2663
// continue ;
2661: GO 2645
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2663: LD_ADDR_VAR 0 4
2667: PUSH
2668: LD_VAR 0 4
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_EXP 5
2682: PUSH
2683: LD_VAR 0 1
2687: ARRAY
2688: ARRAY
2689: ADD
2690: ST_TO_ADDR
// end ;
2691: GO 2645
2693: POP
2694: POP
// x := 1 ;
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// repeat wait ( time ) ;
2703: LD_VAR 0 5
2707: PPUSH
2708: CALL_OW 67
// x := Inc ( x ) ;
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: LD_VAR 0 2
2721: PPUSH
2722: CALL 42431 0 1
2726: ST_TO_ADDR
// if x > 5 then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 5
2734: GREATER
2735: IFFALSE 2745
// x := 1 ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// for i in areas do
2745: LD_ADDR_VAR 0 1
2749: PUSH
2750: LD_VAR 0 4
2754: PUSH
2755: FOR_IN
2756: IFFALSE 2795
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2758: LD_VAR 0 1
2762: PPUSH
2763: LD_INT 1
2765: PPUSH
2766: CALL_OW 287
2770: PUSH
2771: LD_INT 20
2773: LESS
2774: IFFALSE 2793
// begin CreateCratesArea ( x , i , true ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_VAR 0 1
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: CALL_OW 55
// end ; end ;
2793: GO 2755
2795: POP
2796: POP
// time := time + delayTime ;
2797: LD_ADDR_VAR 0 5
2801: PUSH
2802: LD_VAR 0 5
2806: PUSH
2807: LD_VAR 0 7
2811: PLUS
2812: ST_TO_ADDR
// if time > maxTime then
2813: LD_VAR 0 5
2817: PUSH
2818: LD_VAR 0 8
2822: GREATER
2823: IFFALSE 2835
// time := normalTime ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_VAR 0 6
2834: ST_TO_ADDR
// until false ;
2835: LD_INT 0
2837: IFFALSE 2703
// end ; end_of_file
2839: PPOPN 8
2841: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 55461 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2851: LD_VAR 0 1
2855: PPUSH
2856: CALL 51560 0 1
// end ;
2860: PPOPN 1
2862: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2863: LD_VAR 0 1
2867: PPUSH
2868: CALL 55478 0 1
// end ;
2872: PPOPN 1
2874: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2875: LD_VAR 0 1
2879: PPUSH
2880: CALL 52231 0 1
2884: PPOPN 1
2886: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2887: LD_VAR 0 1
2891: PPUSH
2892: LD_VAR 0 2
2896: PPUSH
2897: CALL 55519 0 2
2901: PPOPN 2
2903: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2904: LD_VAR 0 1
2908: PPUSH
2909: LD_VAR 0 2
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL 52284 0 3
2923: PPOPN 3
2925: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// if exist_mode then
2930: LD_VAR 0 2
2934: IFFALSE 2980
// begin unit := CreateCharacter ( prefix & ident ) ;
2936: LD_ADDR_VAR 0 5
2940: PUSH
2941: LD_VAR 0 3
2945: PUSH
2946: LD_VAR 0 1
2950: STR
2951: PPUSH
2952: CALL_OW 34
2956: ST_TO_ADDR
// if unit then
2957: LD_VAR 0 5
2961: IFFALSE 2978
// DeleteCharacters ( prefix & ident ) ;
2963: LD_VAR 0 3
2967: PUSH
2968: LD_VAR 0 1
2972: STR
2973: PPUSH
2974: CALL_OW 40
// end else
2978: GO 2995
// unit := NewCharacter ( ident ) ;
2980: LD_ADDR_VAR 0 5
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: CALL_OW 25
2994: ST_TO_ADDR
// result := unit ;
2995: LD_ADDR_VAR 0 4
2999: PUSH
3000: LD_VAR 0 5
3004: ST_TO_ADDR
// end ;
3005: LD_VAR 0 4
3009: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3010: LD_INT 0
3012: PPUSH
3013: PPUSH
// if exist_mode then
3014: LD_VAR 0 2
3018: IFFALSE 3043
// unit := CreateCharacter ( prefix & ident ) else
3020: LD_ADDR_VAR 0 5
3024: PUSH
3025: LD_VAR 0 3
3029: PUSH
3030: LD_VAR 0 1
3034: STR
3035: PPUSH
3036: CALL_OW 34
3040: ST_TO_ADDR
3041: GO 3058
// unit := NewCharacter ( ident ) ;
3043: LD_ADDR_VAR 0 5
3047: PUSH
3048: LD_VAR 0 1
3052: PPUSH
3053: CALL_OW 25
3057: ST_TO_ADDR
// result := unit ;
3058: LD_ADDR_VAR 0 4
3062: PUSH
3063: LD_VAR 0 5
3067: ST_TO_ADDR
// end ;
3068: LD_VAR 0 4
3072: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3073: LD_INT 0
3075: PPUSH
3076: PPUSH
// if not side or not nation then
3077: LD_VAR 0 1
3081: NOT
3082: IFTRUE 3091
3084: PUSH
3085: LD_VAR 0 2
3089: NOT
3090: OR
3091: IFFALSE 3095
// exit ;
3093: GO 3865
// case nation of nation_american :
3095: LD_VAR 0 2
3099: PUSH
3100: LD_INT 1
3102: DOUBLE
3103: EQUAL
3104: IFTRUE 3108
3106: GO 3322
3108: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3109: LD_ADDR_VAR 0 4
3113: PUSH
3114: LD_INT 35
3116: PUSH
3117: LD_INT 45
3119: PUSH
3120: LD_INT 46
3122: PUSH
3123: LD_INT 47
3125: PUSH
3126: LD_INT 82
3128: PUSH
3129: LD_INT 83
3131: PUSH
3132: LD_INT 84
3134: PUSH
3135: LD_INT 85
3137: PUSH
3138: LD_INT 86
3140: PUSH
3141: LD_INT 1
3143: PUSH
3144: LD_INT 2
3146: PUSH
3147: LD_INT 6
3149: PUSH
3150: LD_INT 15
3152: PUSH
3153: LD_INT 16
3155: PUSH
3156: LD_INT 7
3158: PUSH
3159: LD_INT 12
3161: PUSH
3162: LD_INT 13
3164: PUSH
3165: LD_INT 10
3167: PUSH
3168: LD_INT 14
3170: PUSH
3171: LD_INT 20
3173: PUSH
3174: LD_INT 21
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_INT 25
3182: PUSH
3183: LD_INT 32
3185: PUSH
3186: LD_INT 27
3188: PUSH
3189: LD_INT 36
3191: PUSH
3192: LD_INT 69
3194: PUSH
3195: LD_INT 39
3197: PUSH
3198: LD_INT 34
3200: PUSH
3201: LD_INT 40
3203: PUSH
3204: LD_INT 48
3206: PUSH
3207: LD_INT 49
3209: PUSH
3210: LD_INT 50
3212: PUSH
3213: LD_INT 51
3215: PUSH
3216: LD_INT 52
3218: PUSH
3219: LD_INT 53
3221: PUSH
3222: LD_INT 54
3224: PUSH
3225: LD_INT 55
3227: PUSH
3228: LD_INT 56
3230: PUSH
3231: LD_INT 57
3233: PUSH
3234: LD_INT 58
3236: PUSH
3237: LD_INT 59
3239: PUSH
3240: LD_INT 60
3242: PUSH
3243: LD_INT 61
3245: PUSH
3246: LD_INT 62
3248: PUSH
3249: LD_INT 80
3251: PUSH
3252: LD_INT 82
3254: PUSH
3255: LD_INT 83
3257: PUSH
3258: LD_INT 84
3260: PUSH
3261: LD_INT 85
3263: PUSH
3264: LD_INT 86
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: ST_TO_ADDR
3320: GO 3787
3322: LD_INT 2
3324: DOUBLE
3325: EQUAL
3326: IFTRUE 3330
3328: GO 3556
3330: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3331: LD_ADDR_VAR 0 4
3335: PUSH
3336: LD_INT 35
3338: PUSH
3339: LD_INT 45
3341: PUSH
3342: LD_INT 46
3344: PUSH
3345: LD_INT 47
3347: PUSH
3348: LD_INT 82
3350: PUSH
3351: LD_INT 83
3353: PUSH
3354: LD_INT 84
3356: PUSH
3357: LD_INT 85
3359: PUSH
3360: LD_INT 87
3362: PUSH
3363: LD_INT 70
3365: PUSH
3366: LD_INT 1
3368: PUSH
3369: LD_INT 11
3371: PUSH
3372: LD_INT 3
3374: PUSH
3375: LD_INT 4
3377: PUSH
3378: LD_INT 5
3380: PUSH
3381: LD_INT 6
3383: PUSH
3384: LD_INT 15
3386: PUSH
3387: LD_INT 18
3389: PUSH
3390: LD_INT 7
3392: PUSH
3393: LD_INT 17
3395: PUSH
3396: LD_INT 8
3398: PUSH
3399: LD_INT 20
3401: PUSH
3402: LD_INT 21
3404: PUSH
3405: LD_INT 22
3407: PUSH
3408: LD_INT 72
3410: PUSH
3411: LD_INT 26
3413: PUSH
3414: LD_INT 69
3416: PUSH
3417: LD_INT 39
3419: PUSH
3420: LD_INT 40
3422: PUSH
3423: LD_INT 41
3425: PUSH
3426: LD_INT 42
3428: PUSH
3429: LD_INT 43
3431: PUSH
3432: LD_INT 48
3434: PUSH
3435: LD_INT 49
3437: PUSH
3438: LD_INT 50
3440: PUSH
3441: LD_INT 51
3443: PUSH
3444: LD_INT 52
3446: PUSH
3447: LD_INT 53
3449: PUSH
3450: LD_INT 54
3452: PUSH
3453: LD_INT 55
3455: PUSH
3456: LD_INT 56
3458: PUSH
3459: LD_INT 60
3461: PUSH
3462: LD_INT 61
3464: PUSH
3465: LD_INT 62
3467: PUSH
3468: LD_INT 66
3470: PUSH
3471: LD_INT 67
3473: PUSH
3474: LD_INT 68
3476: PUSH
3477: LD_INT 81
3479: PUSH
3480: LD_INT 82
3482: PUSH
3483: LD_INT 83
3485: PUSH
3486: LD_INT 84
3488: PUSH
3489: LD_INT 85
3491: PUSH
3492: LD_INT 87
3494: PUSH
3495: LD_INT 88
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: ST_TO_ADDR
3554: GO 3787
3556: LD_INT 3
3558: DOUBLE
3559: EQUAL
3560: IFTRUE 3564
3562: GO 3786
3564: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: LD_INT 46
3572: PUSH
3573: LD_INT 47
3575: PUSH
3576: LD_INT 1
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: LD_INT 82
3584: PUSH
3585: LD_INT 83
3587: PUSH
3588: LD_INT 84
3590: PUSH
3591: LD_INT 85
3593: PUSH
3594: LD_INT 86
3596: PUSH
3597: LD_INT 11
3599: PUSH
3600: LD_INT 9
3602: PUSH
3603: LD_INT 20
3605: PUSH
3606: LD_INT 19
3608: PUSH
3609: LD_INT 21
3611: PUSH
3612: LD_INT 24
3614: PUSH
3615: LD_INT 22
3617: PUSH
3618: LD_INT 25
3620: PUSH
3621: LD_INT 28
3623: PUSH
3624: LD_INT 29
3626: PUSH
3627: LD_INT 30
3629: PUSH
3630: LD_INT 31
3632: PUSH
3633: LD_INT 37
3635: PUSH
3636: LD_INT 38
3638: PUSH
3639: LD_INT 32
3641: PUSH
3642: LD_INT 27
3644: PUSH
3645: LD_INT 33
3647: PUSH
3648: LD_INT 69
3650: PUSH
3651: LD_INT 39
3653: PUSH
3654: LD_INT 34
3656: PUSH
3657: LD_INT 40
3659: PUSH
3660: LD_INT 71
3662: PUSH
3663: LD_INT 23
3665: PUSH
3666: LD_INT 44
3668: PUSH
3669: LD_INT 48
3671: PUSH
3672: LD_INT 49
3674: PUSH
3675: LD_INT 50
3677: PUSH
3678: LD_INT 51
3680: PUSH
3681: LD_INT 52
3683: PUSH
3684: LD_INT 53
3686: PUSH
3687: LD_INT 54
3689: PUSH
3690: LD_INT 55
3692: PUSH
3693: LD_INT 56
3695: PUSH
3696: LD_INT 57
3698: PUSH
3699: LD_INT 58
3701: PUSH
3702: LD_INT 59
3704: PUSH
3705: LD_INT 63
3707: PUSH
3708: LD_INT 64
3710: PUSH
3711: LD_INT 65
3713: PUSH
3714: LD_INT 82
3716: PUSH
3717: LD_INT 83
3719: PUSH
3720: LD_INT 84
3722: PUSH
3723: LD_INT 85
3725: PUSH
3726: LD_INT 86
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: ST_TO_ADDR
3784: GO 3787
3786: POP
// if state > - 1 and state < 3 then
3787: LD_VAR 0 3
3791: PUSH
3792: LD_INT 1
3794: NEG
3795: GREATER
3796: IFFALSE 3808
3798: PUSH
3799: LD_VAR 0 3
3803: PUSH
3804: LD_INT 3
3806: LESS
3807: AND
3808: IFFALSE 3865
// for i in result do
3810: LD_ADDR_VAR 0 5
3814: PUSH
3815: LD_VAR 0 4
3819: PUSH
3820: FOR_IN
3821: IFFALSE 3863
// if GetTech ( i , side ) <> state then
3823: LD_VAR 0 5
3827: PPUSH
3828: LD_VAR 0 1
3832: PPUSH
3833: CALL_OW 321
3837: PUSH
3838: LD_VAR 0 3
3842: NONEQUAL
3843: IFFALSE 3861
// result := result diff i ;
3845: LD_ADDR_VAR 0 4
3849: PUSH
3850: LD_VAR 0 4
3854: PUSH
3855: LD_VAR 0 5
3859: DIFF
3860: ST_TO_ADDR
3861: GO 3820
3863: POP
3864: POP
// end ;
3865: LD_VAR 0 4
3869: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
// result := true ;
3875: LD_ADDR_VAR 0 3
3879: PUSH
3880: LD_INT 1
3882: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3883: LD_ADDR_VAR 0 5
3887: PUSH
3888: LD_VAR 0 2
3892: PPUSH
3893: CALL_OW 480
3897: ST_TO_ADDR
// if not tmp then
3898: LD_VAR 0 5
3902: NOT
3903: IFFALSE 3907
// exit ;
3905: GO 3956
// for i in tmp do
3907: LD_ADDR_VAR 0 4
3911: PUSH
3912: LD_VAR 0 5
3916: PUSH
3917: FOR_IN
3918: IFFALSE 3954
// if GetTech ( i , side ) <> state_researched then
3920: LD_VAR 0 4
3924: PPUSH
3925: LD_VAR 0 1
3929: PPUSH
3930: CALL_OW 321
3934: PUSH
3935: LD_INT 2
3937: NONEQUAL
3938: IFFALSE 3952
// begin result := false ;
3940: LD_ADDR_VAR 0 3
3944: PUSH
3945: LD_INT 0
3947: ST_TO_ADDR
// exit ;
3948: POP
3949: POP
3950: GO 3956
// end ;
3952: GO 3917
3954: POP
3955: POP
// end ;
3956: LD_VAR 0 3
3960: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
3967: PPUSH
3968: PPUSH
3969: PPUSH
3970: PPUSH
3971: PPUSH
3972: PPUSH
3973: PPUSH
3974: PPUSH
3975: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3976: LD_VAR 0 1
3980: NOT
3981: IFTRUE 3998
3983: PUSH
3984: LD_VAR 0 1
3988: PPUSH
3989: CALL_OW 257
3993: PUSH
3994: LD_INT 9
3996: NONEQUAL
3997: OR
3998: IFFALSE 4002
// exit ;
4000: GO 4581
// side := GetSide ( unit ) ;
4002: LD_ADDR_VAR 0 9
4006: PUSH
4007: LD_VAR 0 1
4011: PPUSH
4012: CALL_OW 255
4016: ST_TO_ADDR
// tech_space := tech_spacanom ;
4017: LD_ADDR_VAR 0 12
4021: PUSH
4022: LD_INT 29
4024: ST_TO_ADDR
// tech_time := tech_taurad ;
4025: LD_ADDR_VAR 0 13
4029: PUSH
4030: LD_INT 28
4032: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4033: LD_ADDR_VAR 0 11
4037: PUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 310
4047: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4048: LD_VAR 0 11
4052: PPUSH
4053: CALL_OW 247
4057: PUSH
4058: LD_INT 2
4060: EQUAL
4061: IFFALSE 4065
// exit ;
4063: GO 4581
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4065: LD_ADDR_VAR 0 8
4069: PUSH
4070: LD_INT 81
4072: PUSH
4073: LD_VAR 0 9
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: LD_INT 21
4087: PUSH
4088: LD_INT 3
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 69
4107: ST_TO_ADDR
// if not tmp then
4108: LD_VAR 0 8
4112: NOT
4113: IFFALSE 4117
// exit ;
4115: GO 4581
// if in_unit then
4117: LD_VAR 0 11
4121: IFFALSE 4145
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4123: LD_ADDR_VAR 0 10
4127: PUSH
4128: LD_VAR 0 8
4132: PPUSH
4133: LD_VAR 0 11
4137: PPUSH
4138: CALL_OW 74
4142: ST_TO_ADDR
4143: GO 4165
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4145: LD_ADDR_VAR 0 10
4149: PUSH
4150: LD_VAR 0 8
4154: PPUSH
4155: LD_VAR 0 1
4159: PPUSH
4160: CALL_OW 74
4164: ST_TO_ADDR
// if not enemy then
4165: LD_VAR 0 10
4169: NOT
4170: IFFALSE 4174
// exit ;
4172: GO 4581
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4174: LD_VAR 0 11
4178: IFFALSE 4200
4180: PUSH
4181: LD_VAR 0 11
4185: PPUSH
4186: LD_VAR 0 10
4190: PPUSH
4191: CALL_OW 296
4195: PUSH
4196: LD_INT 13
4198: GREATER
4199: AND
4200: IFTRUE 4222
4202: PUSH
4203: LD_VAR 0 1
4207: PPUSH
4208: LD_VAR 0 10
4212: PPUSH
4213: CALL_OW 296
4217: PUSH
4218: LD_INT 12
4220: GREATER
4221: OR
4222: IFFALSE 4226
// exit ;
4224: GO 4581
// missile := [ 1 ] ;
4226: LD_ADDR_VAR 0 14
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: EMPTY
4235: LIST
4236: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4237: LD_VAR 0 9
4241: PPUSH
4242: LD_VAR 0 12
4246: PPUSH
4247: CALL_OW 325
4251: IFFALSE 4280
// missile := Replace ( missile , missile + 1 , 2 ) ;
4253: LD_ADDR_VAR 0 14
4257: PUSH
4258: LD_VAR 0 14
4262: PPUSH
4263: LD_VAR 0 14
4267: PUSH
4268: LD_INT 1
4270: PLUS
4271: PPUSH
4272: LD_INT 2
4274: PPUSH
4275: CALL_OW 1
4279: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4280: LD_VAR 0 9
4284: PPUSH
4285: LD_VAR 0 13
4289: PPUSH
4290: CALL_OW 325
4294: IFFALSE 4318
4296: PUSH
4297: LD_VAR 0 10
4301: PPUSH
4302: CALL_OW 255
4306: PPUSH
4307: LD_VAR 0 13
4311: PPUSH
4312: CALL_OW 325
4316: NOT
4317: AND
4318: IFFALSE 4347
// missile := Replace ( missile , missile + 1 , 3 ) ;
4320: LD_ADDR_VAR 0 14
4324: PUSH
4325: LD_VAR 0 14
4329: PPUSH
4330: LD_VAR 0 14
4334: PUSH
4335: LD_INT 1
4337: PLUS
4338: PPUSH
4339: LD_INT 3
4341: PPUSH
4342: CALL_OW 1
4346: ST_TO_ADDR
// if missile < 2 then
4347: LD_VAR 0 14
4351: PUSH
4352: LD_INT 2
4354: LESS
4355: IFFALSE 4359
// exit ;
4357: GO 4581
// x := GetX ( enemy ) ;
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: LD_VAR 0 10
4368: PPUSH
4369: CALL_OW 250
4373: ST_TO_ADDR
// y := GetY ( enemy ) ;
4374: LD_ADDR_VAR 0 5
4378: PUSH
4379: LD_VAR 0 10
4383: PPUSH
4384: CALL_OW 251
4388: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4389: LD_ADDR_VAR 0 6
4393: PUSH
4394: LD_VAR 0 4
4398: PUSH
4399: LD_INT 1
4401: NEG
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: CALL_OW 12
4410: PLUS
4411: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4412: LD_ADDR_VAR 0 7
4416: PUSH
4417: LD_VAR 0 5
4421: PUSH
4422: LD_INT 1
4424: NEG
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: CALL_OW 12
4433: PLUS
4434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4435: LD_VAR 0 6
4439: PPUSH
4440: LD_VAR 0 7
4444: PPUSH
4445: CALL_OW 488
4449: NOT
4450: IFFALSE 4472
// begin _x := x ;
4452: LD_ADDR_VAR 0 6
4456: PUSH
4457: LD_VAR 0 4
4461: ST_TO_ADDR
// _y := y ;
4462: LD_ADDR_VAR 0 7
4466: PUSH
4467: LD_VAR 0 5
4471: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4472: LD_ADDR_VAR 0 3
4476: PUSH
4477: LD_INT 1
4479: PPUSH
4480: LD_VAR 0 14
4484: PPUSH
4485: CALL_OW 12
4489: ST_TO_ADDR
// case i of 1 :
4490: LD_VAR 0 3
4494: PUSH
4495: LD_INT 1
4497: DOUBLE
4498: EQUAL
4499: IFTRUE 4503
4501: GO 4520
4503: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4504: LD_VAR 0 1
4508: PPUSH
4509: LD_VAR 0 10
4513: PPUSH
4514: CALL_OW 115
4518: GO 4581
4520: LD_INT 2
4522: DOUBLE
4523: EQUAL
4524: IFTRUE 4528
4526: GO 4550
4528: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4529: LD_VAR 0 1
4533: PPUSH
4534: LD_VAR 0 6
4538: PPUSH
4539: LD_VAR 0 7
4543: PPUSH
4544: CALL_OW 153
4548: GO 4581
4550: LD_INT 3
4552: DOUBLE
4553: EQUAL
4554: IFTRUE 4558
4556: GO 4580
4558: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4559: LD_VAR 0 1
4563: PPUSH
4564: LD_VAR 0 6
4568: PPUSH
4569: LD_VAR 0 7
4573: PPUSH
4574: CALL_OW 154
4578: GO 4581
4580: POP
// end ;
4581: LD_VAR 0 2
4585: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4586: LD_INT 0
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
// if not unit or not building then
4594: LD_VAR 0 1
4598: NOT
4599: IFTRUE 4608
4601: PUSH
4602: LD_VAR 0 2
4606: NOT
4607: OR
4608: IFFALSE 4612
// exit ;
4610: GO 4770
// x := GetX ( building ) ;
4612: LD_ADDR_VAR 0 5
4616: PUSH
4617: LD_VAR 0 2
4621: PPUSH
4622: CALL_OW 250
4626: ST_TO_ADDR
// y := GetY ( building ) ;
4627: LD_ADDR_VAR 0 6
4631: PUSH
4632: LD_VAR 0 2
4636: PPUSH
4637: CALL_OW 251
4641: ST_TO_ADDR
// for i := 0 to 5 do
4642: LD_ADDR_VAR 0 4
4646: PUSH
4647: DOUBLE
4648: LD_INT 0
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 5
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4768
// begin _x := ShiftX ( x , i , 3 ) ;
4658: LD_ADDR_VAR 0 7
4662: PUSH
4663: LD_VAR 0 5
4667: PPUSH
4668: LD_VAR 0 4
4672: PPUSH
4673: LD_INT 3
4675: PPUSH
4676: CALL_OW 272
4680: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4681: LD_ADDR_VAR 0 8
4685: PUSH
4686: LD_VAR 0 6
4690: PPUSH
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_INT 3
4698: PPUSH
4699: CALL_OW 273
4703: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4704: LD_VAR 0 7
4708: PPUSH
4709: LD_VAR 0 8
4713: PPUSH
4714: CALL_OW 488
4718: NOT
4719: IFFALSE 4723
// continue ;
4721: GO 4655
// if HexInfo ( _x , _y ) = 0 then
4723: LD_VAR 0 7
4727: PPUSH
4728: LD_VAR 0 8
4732: PPUSH
4733: CALL_OW 428
4737: PUSH
4738: LD_INT 0
4740: EQUAL
4741: IFFALSE 4766
// begin ComMoveXY ( unit , _x , _y ) ;
4743: LD_VAR 0 1
4747: PPUSH
4748: LD_VAR 0 7
4752: PPUSH
4753: LD_VAR 0 8
4757: PPUSH
4758: CALL_OW 111
// exit ;
4762: POP
4763: POP
4764: GO 4770
// end ; end ;
4766: GO 4655
4768: POP
4769: POP
// end ;
4770: LD_VAR 0 3
4774: RET
// export function ScanBase ( side , base_area ) ; begin
4775: LD_INT 0
4777: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4778: LD_ADDR_VAR 0 3
4782: PUSH
4783: LD_VAR 0 2
4787: PPUSH
4788: LD_INT 81
4790: PUSH
4791: LD_VAR 0 1
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PPUSH
4800: CALL_OW 70
4804: ST_TO_ADDR
// end ;
4805: LD_VAR 0 3
4809: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4810: LD_INT 0
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
// result := false ;
4816: LD_ADDR_VAR 0 2
4820: PUSH
4821: LD_INT 0
4823: ST_TO_ADDR
// side := GetSide ( unit ) ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: LD_VAR 0 1
4833: PPUSH
4834: CALL_OW 255
4838: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4839: LD_ADDR_VAR 0 4
4843: PUSH
4844: LD_VAR 0 1
4848: PPUSH
4849: CALL_OW 248
4853: ST_TO_ADDR
// case nat of 1 :
4854: LD_VAR 0 4
4858: PUSH
4859: LD_INT 1
4861: DOUBLE
4862: EQUAL
4863: IFTRUE 4867
4865: GO 4878
4867: POP
// tech := tech_lassight ; 2 :
4868: LD_ADDR_VAR 0 5
4872: PUSH
4873: LD_INT 12
4875: ST_TO_ADDR
4876: GO 4917
4878: LD_INT 2
4880: DOUBLE
4881: EQUAL
4882: IFTRUE 4886
4884: GO 4897
4886: POP
// tech := tech_mortar ; 3 :
4887: LD_ADDR_VAR 0 5
4891: PUSH
4892: LD_INT 41
4894: ST_TO_ADDR
4895: GO 4917
4897: LD_INT 3
4899: DOUBLE
4900: EQUAL
4901: IFTRUE 4905
4903: GO 4916
4905: POP
// tech := tech_bazooka ; end ;
4906: LD_ADDR_VAR 0 5
4910: PUSH
4911: LD_INT 44
4913: ST_TO_ADDR
4914: GO 4917
4916: POP
// if Researched ( side , tech ) then
4917: LD_VAR 0 3
4921: PPUSH
4922: LD_VAR 0 5
4926: PPUSH
4927: CALL_OW 325
4931: IFFALSE 4958
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: LD_INT 5
4940: PUSH
4941: LD_INT 8
4943: PUSH
4944: LD_INT 9
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: LIST
4951: PUSH
4952: LD_VAR 0 4
4956: ARRAY
4957: ST_TO_ADDR
// end ;
4958: LD_VAR 0 2
4962: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4963: LD_INT 0
4965: PPUSH
4966: PPUSH
4967: PPUSH
// if not mines then
4968: LD_VAR 0 2
4972: NOT
4973: IFFALSE 4977
// exit ;
4975: GO 5121
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4977: LD_ADDR_VAR 0 5
4981: PUSH
4982: LD_INT 81
4984: PUSH
4985: LD_VAR 0 1
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 3
4996: PUSH
4997: LD_INT 21
4999: PUSH
5000: LD_INT 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: ST_TO_ADDR
// for i in mines do
5020: LD_ADDR_VAR 0 4
5024: PUSH
5025: LD_VAR 0 2
5029: PUSH
5030: FOR_IN
5031: IFFALSE 5119
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5033: LD_VAR 0 4
5037: PUSH
5038: LD_INT 1
5040: ARRAY
5041: PPUSH
5042: LD_VAR 0 4
5046: PUSH
5047: LD_INT 2
5049: ARRAY
5050: PPUSH
5051: CALL_OW 458
5055: NOT
5056: IFFALSE 5060
// continue ;
5058: GO 5030
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5060: LD_VAR 0 4
5064: PUSH
5065: LD_INT 1
5067: ARRAY
5068: PPUSH
5069: LD_VAR 0 4
5073: PUSH
5074: LD_INT 2
5076: ARRAY
5077: PPUSH
5078: CALL_OW 428
5082: PUSH
5083: LD_VAR 0 5
5087: IN
5088: IFFALSE 5117
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5090: LD_VAR 0 4
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: LD_VAR 0 4
5103: PUSH
5104: LD_INT 2
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 456
// end ;
5117: GO 5030
5119: POP
5120: POP
// end ;
5121: LD_VAR 0 3
5125: RET
// export function Count ( array ) ; begin
5126: LD_INT 0
5128: PPUSH
// result := array + 0 ;
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: LD_VAR 0 1
5138: PUSH
5139: LD_INT 0
5141: PLUS
5142: ST_TO_ADDR
// end ;
5143: LD_VAR 0 2
5147: RET
// export function IsEmpty ( building ) ; begin
5148: LD_INT 0
5150: PPUSH
// if not building then
5151: LD_VAR 0 1
5155: NOT
5156: IFFALSE 5160
// exit ;
5158: GO 5203
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5160: LD_ADDR_VAR 0 2
5164: PUSH
5165: LD_VAR 0 1
5169: PUSH
5170: LD_INT 22
5172: PUSH
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 255
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 58
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: IN
5202: ST_TO_ADDR
// end ;
5203: LD_VAR 0 2
5207: RET
// export function IsNotFull ( building ) ; var places ; begin
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
// if not building then
5212: LD_VAR 0 1
5216: NOT
5217: IFFALSE 5221
// exit ;
5219: GO 5249
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 1
5230: PPUSH
5231: LD_INT 3
5233: PUSH
5234: LD_INT 62
5236: PUSH
5237: EMPTY
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 72
5248: ST_TO_ADDR
// end ;
5249: LD_VAR 0 2
5253: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5254: LD_INT 0
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
// tmp := [ ] ;
5260: LD_ADDR_VAR 0 3
5264: PUSH
5265: EMPTY
5266: ST_TO_ADDR
// list := [ ] ;
5267: LD_ADDR_VAR 0 5
5271: PUSH
5272: EMPTY
5273: ST_TO_ADDR
// for i = 16 to 25 do
5274: LD_ADDR_VAR 0 4
5278: PUSH
5279: DOUBLE
5280: LD_INT 16
5282: DEC
5283: ST_TO_ADDR
5284: LD_INT 25
5286: PUSH
5287: FOR_TO
5288: IFFALSE 5361
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5290: LD_ADDR_VAR 0 3
5294: PUSH
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 22
5302: PUSH
5303: LD_VAR 0 1
5307: PPUSH
5308: CALL_OW 255
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 91
5319: PUSH
5320: LD_VAR 0 1
5324: PUSH
5325: LD_INT 6
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_INT 30
5335: PUSH
5336: LD_VAR 0 4
5340: PUSH
5341: EMPTY
5342: LIST
5343: LIST
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: PUSH
5350: EMPTY
5351: LIST
5352: PPUSH
5353: CALL_OW 69
5357: ADD
5358: ST_TO_ADDR
5359: GO 5287
5361: POP
5362: POP
// for i = 1 to tmp do
5363: LD_ADDR_VAR 0 4
5367: PUSH
5368: DOUBLE
5369: LD_INT 1
5371: DEC
5372: ST_TO_ADDR
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_TO
5379: IFFALSE 5467
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_VAR 0 5
5390: PUSH
5391: LD_VAR 0 3
5395: PUSH
5396: LD_VAR 0 4
5400: ARRAY
5401: PPUSH
5402: CALL_OW 266
5406: PUSH
5407: LD_VAR 0 3
5411: PUSH
5412: LD_VAR 0 4
5416: ARRAY
5417: PPUSH
5418: CALL_OW 250
5422: PUSH
5423: LD_VAR 0 3
5427: PUSH
5428: LD_VAR 0 4
5432: ARRAY
5433: PPUSH
5434: CALL_OW 251
5438: PUSH
5439: LD_VAR 0 3
5443: PUSH
5444: LD_VAR 0 4
5448: ARRAY
5449: PPUSH
5450: CALL_OW 254
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: ADD
5464: ST_TO_ADDR
5465: GO 5378
5467: POP
5468: POP
// result := list ;
5469: LD_ADDR_VAR 0 2
5473: PUSH
5474: LD_VAR 0 5
5478: ST_TO_ADDR
// end ;
5479: LD_VAR 0 2
5483: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5484: LD_INT 0
5486: PPUSH
5487: PPUSH
5488: PPUSH
5489: PPUSH
5490: PPUSH
5491: PPUSH
5492: PPUSH
// if not factory then
5493: LD_VAR 0 1
5497: NOT
5498: IFFALSE 5502
// exit ;
5500: GO 6105
// if control = control_apeman then
5502: LD_VAR 0 4
5506: PUSH
5507: LD_INT 5
5509: EQUAL
5510: IFFALSE 5619
// begin tmp := UnitsInside ( factory ) ;
5512: LD_ADDR_VAR 0 8
5516: PUSH
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 313
5526: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5527: LD_VAR 0 8
5531: PPUSH
5532: LD_INT 25
5534: PUSH
5535: LD_INT 12
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 72
5546: NOT
5547: IFFALSE 5557
// control := control_manual ;
5549: LD_ADDR_VAR 0 4
5553: PUSH
5554: LD_INT 1
5556: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5557: LD_ADDR_VAR 0 8
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL 5254 0 1
5571: ST_TO_ADDR
// if tmp then
5572: LD_VAR 0 8
5576: IFFALSE 5619
// begin for i in tmp do
5578: LD_ADDR_VAR 0 7
5582: PUSH
5583: LD_VAR 0 8
5587: PUSH
5588: FOR_IN
5589: IFFALSE 5617
// if i [ 1 ] = b_ext_radio then
5591: LD_VAR 0 7
5595: PUSH
5596: LD_INT 1
5598: ARRAY
5599: PUSH
5600: LD_INT 22
5602: EQUAL
5603: IFFALSE 5615
// begin control := control_remote ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 2
5612: ST_TO_ADDR
// break ;
5613: GO 5617
// end ;
5615: GO 5588
5617: POP
5618: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5619: LD_VAR 0 1
5623: PPUSH
5624: LD_VAR 0 2
5628: PPUSH
5629: LD_VAR 0 3
5633: PPUSH
5634: LD_VAR 0 4
5638: PPUSH
5639: LD_VAR 0 5
5643: PPUSH
5644: CALL_OW 448
5648: IFFALSE 5683
// begin result := [ chassis , engine , control , weapon ] ;
5650: LD_ADDR_VAR 0 6
5654: PUSH
5655: LD_VAR 0 2
5659: PUSH
5660: LD_VAR 0 3
5664: PUSH
5665: LD_VAR 0 4
5669: PUSH
5670: LD_VAR 0 5
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: ST_TO_ADDR
// exit ;
5681: GO 6105
// end ; _chassis := AvailableChassisList ( factory ) ;
5683: LD_ADDR_VAR 0 9
5687: PUSH
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 475
5697: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5698: LD_ADDR_VAR 0 11
5702: PUSH
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 476
5712: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5713: LD_ADDR_VAR 0 12
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 477
5727: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5728: LD_ADDR_VAR 0 10
5732: PUSH
5733: LD_VAR 0 1
5737: PPUSH
5738: CALL_OW 478
5742: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5743: LD_VAR 0 9
5747: NOT
5748: IFTRUE 5757
5750: PUSH
5751: LD_VAR 0 11
5755: NOT
5756: OR
5757: IFTRUE 5766
5759: PUSH
5760: LD_VAR 0 12
5764: NOT
5765: OR
5766: IFTRUE 5775
5768: PUSH
5769: LD_VAR 0 10
5773: NOT
5774: OR
5775: IFFALSE 5810
// begin result := [ chassis , engine , control , weapon ] ;
5777: LD_ADDR_VAR 0 6
5781: PUSH
5782: LD_VAR 0 2
5786: PUSH
5787: LD_VAR 0 3
5791: PUSH
5792: LD_VAR 0 4
5796: PUSH
5797: LD_VAR 0 5
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: ST_TO_ADDR
// exit ;
5808: GO 6105
// end ; if not chassis in _chassis then
5810: LD_VAR 0 2
5814: PUSH
5815: LD_VAR 0 9
5819: IN
5820: NOT
5821: IFFALSE 5847
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5823: LD_ADDR_VAR 0 2
5827: PUSH
5828: LD_VAR 0 9
5832: PUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_VAR 0 9
5840: PPUSH
5841: CALL_OW 12
5845: ARRAY
5846: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5847: LD_VAR 0 2
5851: PPUSH
5852: LD_VAR 0 3
5856: PPUSH
5857: CALL 6110 0 2
5861: NOT
5862: IFFALSE 5923
// repeat engine := _engine [ 1 ] ;
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_VAR 0 11
5873: PUSH
5874: LD_INT 1
5876: ARRAY
5877: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5878: LD_ADDR_VAR 0 11
5882: PUSH
5883: LD_VAR 0 11
5887: PPUSH
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 3
5895: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5896: LD_VAR 0 2
5900: PPUSH
5901: LD_VAR 0 3
5905: PPUSH
5906: CALL 6110 0 2
5910: IFTRUE 5921
5912: PUSH
5913: LD_VAR 0 11
5917: PUSH
5918: EMPTY
5919: EQUAL
5920: OR
5921: IFFALSE 5864
// if not control in _control then
5923: LD_VAR 0 4
5927: PUSH
5928: LD_VAR 0 12
5932: IN
5933: NOT
5934: IFFALSE 5960
// control := _control [ rand ( 1 , _control ) ] ;
5936: LD_ADDR_VAR 0 4
5940: PUSH
5941: LD_VAR 0 12
5945: PUSH
5946: LD_INT 1
5948: PPUSH
5949: LD_VAR 0 12
5953: PPUSH
5954: CALL_OW 12
5958: ARRAY
5959: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_VAR 0 5
5969: PPUSH
5970: CALL 6332 0 2
5974: NOT
5975: IFFALSE 6036
// repeat weapon := _weapon [ 1 ] ;
5977: LD_ADDR_VAR 0 5
5981: PUSH
5982: LD_VAR 0 10
5986: PUSH
5987: LD_INT 1
5989: ARRAY
5990: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5991: LD_ADDR_VAR 0 10
5995: PUSH
5996: LD_VAR 0 10
6000: PPUSH
6001: LD_INT 1
6003: PPUSH
6004: CALL_OW 3
6008: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_VAR 0 5
6018: PPUSH
6019: CALL 6332 0 2
6023: IFTRUE 6034
6025: PUSH
6026: LD_VAR 0 10
6030: PUSH
6031: EMPTY
6032: EQUAL
6033: OR
6034: IFFALSE 5977
// result := [ ] ;
6036: LD_ADDR_VAR 0 6
6040: PUSH
6041: EMPTY
6042: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6043: LD_VAR 0 1
6047: PPUSH
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_VAR 0 3
6057: PPUSH
6058: LD_VAR 0 4
6062: PPUSH
6063: LD_VAR 0 5
6067: PPUSH
6068: CALL_OW 448
6072: IFFALSE 6105
// result := [ chassis , engine , control , weapon ] ;
6074: LD_ADDR_VAR 0 6
6078: PUSH
6079: LD_VAR 0 2
6083: PUSH
6084: LD_VAR 0 3
6088: PUSH
6089: LD_VAR 0 4
6093: PUSH
6094: LD_VAR 0 5
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: ST_TO_ADDR
// end ;
6105: LD_VAR 0 6
6109: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6110: LD_INT 0
6112: PPUSH
// if not chassis or not engine then
6113: LD_VAR 0 1
6117: NOT
6118: IFTRUE 6127
6120: PUSH
6121: LD_VAR 0 2
6125: NOT
6126: OR
6127: IFFALSE 6131
// exit ;
6129: GO 6327
// case engine of engine_solar :
6131: LD_VAR 0 2
6135: PUSH
6136: LD_INT 2
6138: DOUBLE
6139: EQUAL
6140: IFTRUE 6144
6142: GO 6182
6144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6145: LD_ADDR_VAR 0 3
6149: PUSH
6150: LD_INT 11
6152: PUSH
6153: LD_INT 12
6155: PUSH
6156: LD_INT 13
6158: PUSH
6159: LD_INT 14
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: LD_INT 2
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: ST_TO_ADDR
6180: GO 6311
6182: LD_INT 1
6184: DOUBLE
6185: EQUAL
6186: IFTRUE 6190
6188: GO 6252
6190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6191: LD_ADDR_VAR 0 3
6195: PUSH
6196: LD_INT 11
6198: PUSH
6199: LD_INT 12
6201: PUSH
6202: LD_INT 13
6204: PUSH
6205: LD_INT 14
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: LD_INT 2
6213: PUSH
6214: LD_INT 3
6216: PUSH
6217: LD_INT 4
6219: PUSH
6220: LD_INT 5
6222: PUSH
6223: LD_INT 21
6225: PUSH
6226: LD_INT 23
6228: PUSH
6229: LD_INT 22
6231: PUSH
6232: LD_INT 24
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: ST_TO_ADDR
6250: GO 6311
6252: LD_INT 3
6254: DOUBLE
6255: EQUAL
6256: IFTRUE 6260
6258: GO 6310
6260: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6261: LD_ADDR_VAR 0 3
6265: PUSH
6266: LD_INT 13
6268: PUSH
6269: LD_INT 14
6271: PUSH
6272: LD_INT 2
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_INT 4
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: LD_INT 21
6286: PUSH
6287: LD_INT 22
6289: PUSH
6290: LD_INT 23
6292: PUSH
6293: LD_INT 24
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: ST_TO_ADDR
6308: GO 6311
6310: POP
// result := ( chassis in result ) ;
6311: LD_ADDR_VAR 0 3
6315: PUSH
6316: LD_VAR 0 1
6320: PUSH
6321: LD_VAR 0 3
6325: IN
6326: ST_TO_ADDR
// end ;
6327: LD_VAR 0 3
6331: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6332: LD_INT 0
6334: PPUSH
// if not chassis or not weapon then
6335: LD_VAR 0 1
6339: NOT
6340: IFTRUE 6349
6342: PUSH
6343: LD_VAR 0 2
6347: NOT
6348: OR
6349: IFFALSE 6353
// exit ;
6351: GO 7413
// case weapon of us_machine_gun :
6353: LD_VAR 0 2
6357: PUSH
6358: LD_INT 2
6360: DOUBLE
6361: EQUAL
6362: IFTRUE 6366
6364: GO 6396
6366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_INT 1
6374: PUSH
6375: LD_INT 2
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: LD_INT 4
6383: PUSH
6384: LD_INT 5
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: ST_TO_ADDR
6394: GO 7397
6396: LD_INT 3
6398: DOUBLE
6399: EQUAL
6400: IFTRUE 6404
6402: GO 6434
6404: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6405: LD_ADDR_VAR 0 3
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 4
6421: PUSH
6422: LD_INT 5
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 7397
6434: LD_INT 11
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6472
6442: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 1
6450: PUSH
6451: LD_INT 2
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: LD_INT 4
6459: PUSH
6460: LD_INT 5
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 7397
6472: LD_INT 4
6474: DOUBLE
6475: EQUAL
6476: IFTRUE 6480
6478: GO 6506
6480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6481: LD_ADDR_VAR 0 3
6485: PUSH
6486: LD_INT 2
6488: PUSH
6489: LD_INT 3
6491: PUSH
6492: LD_INT 4
6494: PUSH
6495: LD_INT 5
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: ST_TO_ADDR
6504: GO 7397
6506: LD_INT 5
6508: DOUBLE
6509: EQUAL
6510: IFTRUE 6514
6512: GO 6540
6514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6515: LD_ADDR_VAR 0 3
6519: PUSH
6520: LD_INT 2
6522: PUSH
6523: LD_INT 3
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: LD_INT 5
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: ST_TO_ADDR
6538: GO 7397
6540: LD_INT 9
6542: DOUBLE
6543: EQUAL
6544: IFTRUE 6548
6546: GO 6574
6548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6549: LD_ADDR_VAR 0 3
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: LD_INT 3
6559: PUSH
6560: LD_INT 4
6562: PUSH
6563: LD_INT 5
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: ST_TO_ADDR
6572: GO 7397
6574: LD_INT 7
6576: DOUBLE
6577: EQUAL
6578: IFTRUE 6582
6580: GO 6608
6582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6583: LD_ADDR_VAR 0 3
6587: PUSH
6588: LD_INT 2
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: LD_INT 4
6596: PUSH
6597: LD_INT 5
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: ST_TO_ADDR
6606: GO 7397
6608: LD_INT 12
6610: DOUBLE
6611: EQUAL
6612: IFTRUE 6616
6614: GO 6642
6616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6617: LD_ADDR_VAR 0 3
6621: PUSH
6622: LD_INT 2
6624: PUSH
6625: LD_INT 3
6627: PUSH
6628: LD_INT 4
6630: PUSH
6631: LD_INT 5
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: ST_TO_ADDR
6640: GO 7397
6642: LD_INT 13
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6676
6650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6651: LD_ADDR_VAR 0 3
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: ST_TO_ADDR
6674: GO 7397
6676: LD_INT 14
6678: DOUBLE
6679: EQUAL
6680: IFTRUE 6684
6682: GO 6702
6684: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_INT 4
6692: PUSH
6693: LD_INT 5
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: ST_TO_ADDR
6700: GO 7397
6702: LD_INT 6
6704: DOUBLE
6705: EQUAL
6706: IFTRUE 6710
6708: GO 6728
6710: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6711: LD_ADDR_VAR 0 3
6715: PUSH
6716: LD_INT 4
6718: PUSH
6719: LD_INT 5
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: ST_TO_ADDR
6726: GO 7397
6728: LD_INT 10
6730: DOUBLE
6731: EQUAL
6732: IFTRUE 6736
6734: GO 6754
6736: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6737: LD_ADDR_VAR 0 3
6741: PUSH
6742: LD_INT 4
6744: PUSH
6745: LD_INT 5
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: ST_TO_ADDR
6752: GO 7397
6754: LD_INT 22
6756: DOUBLE
6757: EQUAL
6758: IFTRUE 6762
6760: GO 6788
6762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6763: LD_ADDR_VAR 0 3
6767: PUSH
6768: LD_INT 11
6770: PUSH
6771: LD_INT 12
6773: PUSH
6774: LD_INT 13
6776: PUSH
6777: LD_INT 14
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: ST_TO_ADDR
6786: GO 7397
6788: LD_INT 23
6790: DOUBLE
6791: EQUAL
6792: IFTRUE 6796
6794: GO 6822
6796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: LD_INT 11
6804: PUSH
6805: LD_INT 12
6807: PUSH
6808: LD_INT 13
6810: PUSH
6811: LD_INT 14
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: ST_TO_ADDR
6820: GO 7397
6822: LD_INT 24
6824: DOUBLE
6825: EQUAL
6826: IFTRUE 6830
6828: GO 6856
6830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6831: LD_ADDR_VAR 0 3
6835: PUSH
6836: LD_INT 11
6838: PUSH
6839: LD_INT 12
6841: PUSH
6842: LD_INT 13
6844: PUSH
6845: LD_INT 14
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: ST_TO_ADDR
6854: GO 7397
6856: LD_INT 30
6858: DOUBLE
6859: EQUAL
6860: IFTRUE 6864
6862: GO 6890
6864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6865: LD_ADDR_VAR 0 3
6869: PUSH
6870: LD_INT 11
6872: PUSH
6873: LD_INT 12
6875: PUSH
6876: LD_INT 13
6878: PUSH
6879: LD_INT 14
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: ST_TO_ADDR
6888: GO 7397
6890: LD_INT 25
6892: DOUBLE
6893: EQUAL
6894: IFTRUE 6898
6896: GO 6916
6898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6899: LD_ADDR_VAR 0 3
6903: PUSH
6904: LD_INT 13
6906: PUSH
6907: LD_INT 14
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: ST_TO_ADDR
6914: GO 7397
6916: LD_INT 27
6918: DOUBLE
6919: EQUAL
6920: IFTRUE 6924
6922: GO 6942
6924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6925: LD_ADDR_VAR 0 3
6929: PUSH
6930: LD_INT 13
6932: PUSH
6933: LD_INT 14
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: ST_TO_ADDR
6940: GO 7397
6942: LD_INT 92
6944: DOUBLE
6945: EQUAL
6946: IFTRUE 6950
6948: GO 6976
6950: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6951: LD_ADDR_VAR 0 3
6955: PUSH
6956: LD_INT 11
6958: PUSH
6959: LD_INT 12
6961: PUSH
6962: LD_INT 13
6964: PUSH
6965: LD_INT 14
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: ST_TO_ADDR
6974: GO 7397
6976: LD_INT 28
6978: DOUBLE
6979: EQUAL
6980: IFTRUE 6984
6982: GO 7002
6984: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6985: LD_ADDR_VAR 0 3
6989: PUSH
6990: LD_INT 13
6992: PUSH
6993: LD_INT 14
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: ST_TO_ADDR
7000: GO 7397
7002: LD_INT 29
7004: DOUBLE
7005: EQUAL
7006: IFTRUE 7010
7008: GO 7028
7010: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7011: LD_ADDR_VAR 0 3
7015: PUSH
7016: LD_INT 13
7018: PUSH
7019: LD_INT 14
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: ST_TO_ADDR
7026: GO 7397
7028: LD_INT 31
7030: DOUBLE
7031: EQUAL
7032: IFTRUE 7036
7034: GO 7054
7036: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7037: LD_ADDR_VAR 0 3
7041: PUSH
7042: LD_INT 13
7044: PUSH
7045: LD_INT 14
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: ST_TO_ADDR
7052: GO 7397
7054: LD_INT 26
7056: DOUBLE
7057: EQUAL
7058: IFTRUE 7062
7060: GO 7080
7062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7063: LD_ADDR_VAR 0 3
7067: PUSH
7068: LD_INT 13
7070: PUSH
7071: LD_INT 14
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: ST_TO_ADDR
7078: GO 7397
7080: LD_INT 42
7082: DOUBLE
7083: EQUAL
7084: IFTRUE 7088
7086: GO 7114
7088: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: LD_INT 21
7096: PUSH
7097: LD_INT 22
7099: PUSH
7100: LD_INT 23
7102: PUSH
7103: LD_INT 24
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: ST_TO_ADDR
7112: GO 7397
7114: LD_INT 43
7116: DOUBLE
7117: EQUAL
7118: IFTRUE 7122
7120: GO 7148
7122: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7123: LD_ADDR_VAR 0 3
7127: PUSH
7128: LD_INT 21
7130: PUSH
7131: LD_INT 22
7133: PUSH
7134: LD_INT 23
7136: PUSH
7137: LD_INT 24
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: ST_TO_ADDR
7146: GO 7397
7148: LD_INT 44
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7156
7154: GO 7182
7156: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_INT 21
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_INT 23
7170: PUSH
7171: LD_INT 24
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: ST_TO_ADDR
7180: GO 7397
7182: LD_INT 45
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7216
7190: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7191: LD_ADDR_VAR 0 3
7195: PUSH
7196: LD_INT 21
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: LD_INT 23
7204: PUSH
7205: LD_INT 24
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: ST_TO_ADDR
7214: GO 7397
7216: LD_INT 49
7218: DOUBLE
7219: EQUAL
7220: IFTRUE 7224
7222: GO 7250
7224: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7225: LD_ADDR_VAR 0 3
7229: PUSH
7230: LD_INT 21
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_INT 23
7238: PUSH
7239: LD_INT 24
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: ST_TO_ADDR
7248: GO 7397
7250: LD_INT 51
7252: DOUBLE
7253: EQUAL
7254: IFTRUE 7258
7256: GO 7284
7258: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_INT 21
7266: PUSH
7267: LD_INT 22
7269: PUSH
7270: LD_INT 23
7272: PUSH
7273: LD_INT 24
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: ST_TO_ADDR
7282: GO 7397
7284: LD_INT 52
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7318
7292: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7293: LD_ADDR_VAR 0 3
7297: PUSH
7298: LD_INT 21
7300: PUSH
7301: LD_INT 22
7303: PUSH
7304: LD_INT 23
7306: PUSH
7307: LD_INT 24
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ST_TO_ADDR
7316: GO 7397
7318: LD_INT 53
7320: DOUBLE
7321: EQUAL
7322: IFTRUE 7326
7324: GO 7344
7326: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7327: LD_ADDR_VAR 0 3
7331: PUSH
7332: LD_INT 23
7334: PUSH
7335: LD_INT 24
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: ST_TO_ADDR
7342: GO 7397
7344: LD_INT 46
7346: DOUBLE
7347: EQUAL
7348: IFTRUE 7352
7350: GO 7370
7352: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: LD_INT 23
7360: PUSH
7361: LD_INT 24
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: ST_TO_ADDR
7368: GO 7397
7370: LD_INT 47
7372: DOUBLE
7373: EQUAL
7374: IFTRUE 7378
7376: GO 7396
7378: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7379: LD_ADDR_VAR 0 3
7383: PUSH
7384: LD_INT 23
7386: PUSH
7387: LD_INT 24
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: ST_TO_ADDR
7394: GO 7397
7396: POP
// result := ( chassis in result ) ;
7397: LD_ADDR_VAR 0 3
7401: PUSH
7402: LD_VAR 0 1
7406: PUSH
7407: LD_VAR 0 3
7411: IN
7412: ST_TO_ADDR
// end ;
7413: LD_VAR 0 3
7417: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7418: LD_INT 0
7420: PPUSH
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
// result := array ;
7427: LD_ADDR_VAR 0 5
7431: PUSH
7432: LD_VAR 0 1
7436: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7437: LD_VAR 0 1
7441: NOT
7442: IFTRUE 7451
7444: PUSH
7445: LD_VAR 0 2
7449: NOT
7450: OR
7451: IFTRUE 7460
7453: PUSH
7454: LD_VAR 0 3
7458: NOT
7459: OR
7460: IFTRUE 7474
7462: PUSH
7463: LD_VAR 0 2
7467: PUSH
7468: LD_VAR 0 1
7472: GREATER
7473: OR
7474: IFTRUE 7488
7476: PUSH
7477: LD_VAR 0 3
7481: PUSH
7482: LD_VAR 0 1
7486: GREATER
7487: OR
7488: IFFALSE 7492
// exit ;
7490: GO 7788
// if direction then
7492: LD_VAR 0 4
7496: IFFALSE 7560
// begin d := 1 ;
7498: LD_ADDR_VAR 0 9
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if i_from > i_to then
7506: LD_VAR 0 2
7510: PUSH
7511: LD_VAR 0 3
7515: GREATER
7516: IFFALSE 7542
// length := ( array - i_from ) + i_to else
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 1
7527: PUSH
7528: LD_VAR 0 2
7532: MINUS
7533: PUSH
7534: LD_VAR 0 3
7538: PLUS
7539: ST_TO_ADDR
7540: GO 7558
// length := i_to - i_from ;
7542: LD_ADDR_VAR 0 11
7546: PUSH
7547: LD_VAR 0 3
7551: PUSH
7552: LD_VAR 0 2
7556: MINUS
7557: ST_TO_ADDR
// end else
7558: GO 7621
// begin d := - 1 ;
7560: LD_ADDR_VAR 0 9
7564: PUSH
7565: LD_INT 1
7567: NEG
7568: ST_TO_ADDR
// if i_from > i_to then
7569: LD_VAR 0 2
7573: PUSH
7574: LD_VAR 0 3
7578: GREATER
7579: IFFALSE 7599
// length := i_from - i_to else
7581: LD_ADDR_VAR 0 11
7585: PUSH
7586: LD_VAR 0 2
7590: PUSH
7591: LD_VAR 0 3
7595: MINUS
7596: ST_TO_ADDR
7597: GO 7621
// length := ( array - i_to ) + i_from ;
7599: LD_ADDR_VAR 0 11
7603: PUSH
7604: LD_VAR 0 1
7608: PUSH
7609: LD_VAR 0 3
7613: MINUS
7614: PUSH
7615: LD_VAR 0 2
7619: PLUS
7620: ST_TO_ADDR
// end ; if not length then
7621: LD_VAR 0 11
7625: NOT
7626: IFFALSE 7630
// exit ;
7628: GO 7788
// tmp := array ;
7630: LD_ADDR_VAR 0 10
7634: PUSH
7635: LD_VAR 0 1
7639: ST_TO_ADDR
// for i = 1 to length do
7640: LD_ADDR_VAR 0 6
7644: PUSH
7645: DOUBLE
7646: LD_INT 1
7648: DEC
7649: ST_TO_ADDR
7650: LD_VAR 0 11
7654: PUSH
7655: FOR_TO
7656: IFFALSE 7776
// begin for j = 1 to array do
7658: LD_ADDR_VAR 0 7
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_VAR 0 1
7672: PUSH
7673: FOR_TO
7674: IFFALSE 7762
// begin k := j + d ;
7676: LD_ADDR_VAR 0 8
7680: PUSH
7681: LD_VAR 0 7
7685: PUSH
7686: LD_VAR 0 9
7690: PLUS
7691: ST_TO_ADDR
// if k > array then
7692: LD_VAR 0 8
7696: PUSH
7697: LD_VAR 0 1
7701: GREATER
7702: IFFALSE 7712
// k := 1 ;
7704: LD_ADDR_VAR 0 8
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if not k then
7712: LD_VAR 0 8
7716: NOT
7717: IFFALSE 7729
// k := array ;
7719: LD_ADDR_VAR 0 8
7723: PUSH
7724: LD_VAR 0 1
7728: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7729: LD_ADDR_VAR 0 10
7733: PUSH
7734: LD_VAR 0 10
7738: PPUSH
7739: LD_VAR 0 8
7743: PPUSH
7744: LD_VAR 0 1
7748: PUSH
7749: LD_VAR 0 7
7753: ARRAY
7754: PPUSH
7755: CALL_OW 1
7759: ST_TO_ADDR
// end ;
7760: GO 7673
7762: POP
7763: POP
// array := tmp ;
7764: LD_ADDR_VAR 0 1
7768: PUSH
7769: LD_VAR 0 10
7773: ST_TO_ADDR
// end ;
7774: GO 7655
7776: POP
7777: POP
// result := array ;
7778: LD_ADDR_VAR 0 5
7782: PUSH
7783: LD_VAR 0 1
7787: ST_TO_ADDR
// end ;
7788: LD_VAR 0 5
7792: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7793: LD_INT 0
7795: PPUSH
7796: PPUSH
// result := 0 ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 0
7804: ST_TO_ADDR
// if not array or not value in array then
7805: LD_VAR 0 1
7809: NOT
7810: IFTRUE 7825
7812: PUSH
7813: LD_VAR 0 2
7817: PUSH
7818: LD_VAR 0 1
7822: IN
7823: NOT
7824: OR
7825: IFFALSE 7829
// exit ;
7827: GO 7883
// for i = 1 to array do
7829: LD_ADDR_VAR 0 4
7833: PUSH
7834: DOUBLE
7835: LD_INT 1
7837: DEC
7838: ST_TO_ADDR
7839: LD_VAR 0 1
7843: PUSH
7844: FOR_TO
7845: IFFALSE 7881
// if value = array [ i ] then
7847: LD_VAR 0 2
7851: PUSH
7852: LD_VAR 0 1
7856: PUSH
7857: LD_VAR 0 4
7861: ARRAY
7862: EQUAL
7863: IFFALSE 7879
// begin result := i ;
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_VAR 0 4
7874: ST_TO_ADDR
// exit ;
7875: POP
7876: POP
7877: GO 7883
// end ;
7879: GO 7844
7881: POP
7882: POP
// end ;
7883: LD_VAR 0 3
7887: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7888: LD_INT 0
7890: PPUSH
// vc_chassis := chassis ;
7891: LD_ADDR_OWVAR 37
7895: PUSH
7896: LD_VAR 0 1
7900: ST_TO_ADDR
// vc_engine := engine ;
7901: LD_ADDR_OWVAR 39
7905: PUSH
7906: LD_VAR 0 2
7910: ST_TO_ADDR
// vc_control := control ;
7911: LD_ADDR_OWVAR 38
7915: PUSH
7916: LD_VAR 0 3
7920: ST_TO_ADDR
// vc_weapon := weapon ;
7921: LD_ADDR_OWVAR 40
7925: PUSH
7926: LD_VAR 0 4
7930: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7931: LD_ADDR_OWVAR 41
7935: PUSH
7936: LD_VAR 0 5
7940: ST_TO_ADDR
// end ;
7941: LD_VAR 0 6
7945: RET
// export function WantPlant ( unit ) ; var task ; begin
7946: LD_INT 0
7948: PPUSH
7949: PPUSH
// result := false ;
7950: LD_ADDR_VAR 0 2
7954: PUSH
7955: LD_INT 0
7957: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7958: LD_ADDR_VAR 0 3
7962: PUSH
7963: LD_VAR 0 1
7967: PPUSH
7968: CALL_OW 437
7972: ST_TO_ADDR
// if task then
7973: LD_VAR 0 3
7977: IFFALSE 8005
// if task [ 1 ] [ 1 ] = p then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PUSH
7992: LD_STRING p
7994: EQUAL
7995: IFFALSE 8005
// result := true ;
7997: LD_ADDR_VAR 0 2
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// end ;
8005: LD_VAR 0 2
8009: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
// if pos < 1 then
8016: LD_VAR 0 2
8020: PUSH
8021: LD_INT 1
8023: LESS
8024: IFFALSE 8028
// exit ;
8026: GO 8331
// if pos = 1 then
8028: LD_VAR 0 2
8032: PUSH
8033: LD_INT 1
8035: EQUAL
8036: IFFALSE 8069
// result := Replace ( arr , pos [ 1 ] , value ) else
8038: LD_ADDR_VAR 0 4
8042: PUSH
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PPUSH
8057: LD_VAR 0 3
8061: PPUSH
8062: CALL_OW 1
8066: ST_TO_ADDR
8067: GO 8331
// begin tmp := arr ;
8069: LD_ADDR_VAR 0 6
8073: PUSH
8074: LD_VAR 0 1
8078: ST_TO_ADDR
// s_arr := [ tmp ] ;
8079: LD_ADDR_VAR 0 7
8083: PUSH
8084: LD_VAR 0 6
8088: PUSH
8089: EMPTY
8090: LIST
8091: ST_TO_ADDR
// for i = 1 to pos - 1 do
8092: LD_ADDR_VAR 0 5
8096: PUSH
8097: DOUBLE
8098: LD_INT 1
8100: DEC
8101: ST_TO_ADDR
8102: LD_VAR 0 2
8106: PUSH
8107: LD_INT 1
8109: MINUS
8110: PUSH
8111: FOR_TO
8112: IFFALSE 8157
// begin tmp := tmp [ pos [ i ] ] ;
8114: LD_ADDR_VAR 0 6
8118: PUSH
8119: LD_VAR 0 6
8123: PUSH
8124: LD_VAR 0 2
8128: PUSH
8129: LD_VAR 0 5
8133: ARRAY
8134: ARRAY
8135: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8136: LD_ADDR_VAR 0 7
8140: PUSH
8141: LD_VAR 0 7
8145: PUSH
8146: LD_VAR 0 6
8150: PUSH
8151: EMPTY
8152: LIST
8153: ADD
8154: ST_TO_ADDR
// end ;
8155: GO 8111
8157: POP
8158: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8159: LD_ADDR_VAR 0 6
8163: PUSH
8164: LD_VAR 0 6
8168: PPUSH
8169: LD_VAR 0 2
8173: PUSH
8174: LD_VAR 0 2
8178: ARRAY
8179: PPUSH
8180: LD_VAR 0 3
8184: PPUSH
8185: CALL_OW 1
8189: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8190: LD_ADDR_VAR 0 7
8194: PUSH
8195: LD_VAR 0 7
8199: PPUSH
8200: LD_VAR 0 7
8204: PPUSH
8205: LD_VAR 0 6
8209: PPUSH
8210: CALL_OW 1
8214: ST_TO_ADDR
// for i = s_arr downto 2 do
8215: LD_ADDR_VAR 0 5
8219: PUSH
8220: DOUBLE
8221: LD_VAR 0 7
8225: INC
8226: ST_TO_ADDR
8227: LD_INT 2
8229: PUSH
8230: FOR_DOWNTO
8231: IFFALSE 8315
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8233: LD_ADDR_VAR 0 6
8237: PUSH
8238: LD_VAR 0 7
8242: PUSH
8243: LD_VAR 0 5
8247: PUSH
8248: LD_INT 1
8250: MINUS
8251: ARRAY
8252: PPUSH
8253: LD_VAR 0 2
8257: PUSH
8258: LD_VAR 0 5
8262: PUSH
8263: LD_INT 1
8265: MINUS
8266: ARRAY
8267: PPUSH
8268: LD_VAR 0 7
8272: PUSH
8273: LD_VAR 0 5
8277: ARRAY
8278: PPUSH
8279: CALL_OW 1
8283: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8284: LD_ADDR_VAR 0 7
8288: PUSH
8289: LD_VAR 0 7
8293: PPUSH
8294: LD_VAR 0 5
8298: PUSH
8299: LD_INT 1
8301: MINUS
8302: PPUSH
8303: LD_VAR 0 6
8307: PPUSH
8308: CALL_OW 1
8312: ST_TO_ADDR
// end ;
8313: GO 8230
8315: POP
8316: POP
// result := s_arr [ 1 ] ;
8317: LD_ADDR_VAR 0 4
8321: PUSH
8322: LD_VAR 0 7
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: ST_TO_ADDR
// end ; end ;
8331: LD_VAR 0 4
8335: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8336: LD_INT 0
8338: PPUSH
8339: PPUSH
// if not list then
8340: LD_VAR 0 1
8344: NOT
8345: IFFALSE 8349
// exit ;
8347: GO 8440
// i := list [ pos1 ] ;
8349: LD_ADDR_VAR 0 5
8353: PUSH
8354: LD_VAR 0 1
8358: PUSH
8359: LD_VAR 0 2
8363: ARRAY
8364: ST_TO_ADDR
// if not i then
8365: LD_VAR 0 5
8369: NOT
8370: IFFALSE 8374
// exit ;
8372: GO 8440
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8374: LD_ADDR_VAR 0 1
8378: PUSH
8379: LD_VAR 0 1
8383: PPUSH
8384: LD_VAR 0 2
8388: PPUSH
8389: LD_VAR 0 1
8393: PUSH
8394: LD_VAR 0 3
8398: ARRAY
8399: PPUSH
8400: CALL_OW 1
8404: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8405: LD_ADDR_VAR 0 1
8409: PUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: LD_VAR 0 3
8419: PPUSH
8420: LD_VAR 0 5
8424: PPUSH
8425: CALL_OW 1
8429: ST_TO_ADDR
// result := list ;
8430: LD_ADDR_VAR 0 4
8434: PUSH
8435: LD_VAR 0 1
8439: ST_TO_ADDR
// end ;
8440: LD_VAR 0 4
8444: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8445: LD_INT 0
8447: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8448: LD_ADDR_VAR 0 5
8452: PUSH
8453: LD_VAR 0 1
8457: PPUSH
8458: CALL_OW 250
8462: PPUSH
8463: LD_VAR 0 1
8467: PPUSH
8468: CALL_OW 251
8472: PPUSH
8473: LD_VAR 0 2
8477: PPUSH
8478: LD_VAR 0 3
8482: PPUSH
8483: LD_VAR 0 4
8487: PPUSH
8488: CALL 8870 0 5
8492: ST_TO_ADDR
// end ;
8493: LD_VAR 0 5
8497: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8498: LD_INT 0
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// if not list or not unit then
8504: LD_VAR 0 2
8508: NOT
8509: IFTRUE 8518
8511: PUSH
8512: LD_VAR 0 1
8516: NOT
8517: OR
8518: IFFALSE 8522
// exit ;
8520: GO 8865
// result := [ ] ;
8522: LD_ADDR_VAR 0 5
8526: PUSH
8527: EMPTY
8528: ST_TO_ADDR
// for i in list do
8529: LD_ADDR_VAR 0 6
8533: PUSH
8534: LD_VAR 0 2
8538: PUSH
8539: FOR_IN
8540: IFFALSE 8758
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8542: LD_ADDR_VAR 0 8
8546: PUSH
8547: LD_VAR 0 1
8551: PPUSH
8552: LD_VAR 0 6
8556: PUSH
8557: LD_INT 1
8559: ARRAY
8560: PPUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 2
8568: ARRAY
8569: PPUSH
8570: CALL_OW 297
8574: ST_TO_ADDR
// if not Count ( result ) then
8575: LD_VAR 0 5
8579: PPUSH
8580: CALL 5126 0 1
8584: NOT
8585: IFFALSE 8618
// begin result := Join ( result , [ i , tmp ] ) ;
8587: LD_ADDR_VAR 0 5
8591: PUSH
8592: LD_VAR 0 5
8596: PPUSH
8597: LD_VAR 0 6
8601: PUSH
8602: LD_VAR 0 8
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL 41058 0 2
8615: ST_TO_ADDR
// continue ;
8616: GO 8539
// end ; if result [ result ] [ 2 ] <= tmp then
8618: LD_VAR 0 5
8622: PUSH
8623: LD_VAR 0 5
8627: ARRAY
8628: PUSH
8629: LD_INT 2
8631: ARRAY
8632: PUSH
8633: LD_VAR 0 8
8637: LESSEQUAL
8638: IFFALSE 8671
// result := Join ( result , [ i , tmp ] ) else
8640: LD_ADDR_VAR 0 5
8644: PUSH
8645: LD_VAR 0 5
8649: PPUSH
8650: LD_VAR 0 6
8654: PUSH
8655: LD_VAR 0 8
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PPUSH
8664: CALL 41058 0 2
8668: ST_TO_ADDR
8669: GO 8756
// begin for j := 1 to Count ( result ) do
8671: LD_ADDR_VAR 0 7
8675: PUSH
8676: DOUBLE
8677: LD_INT 1
8679: DEC
8680: ST_TO_ADDR
8681: LD_VAR 0 5
8685: PPUSH
8686: CALL 5126 0 1
8690: PUSH
8691: FOR_TO
8692: IFFALSE 8754
// begin if tmp < result [ j ] [ 2 ] then
8694: LD_VAR 0 8
8698: PUSH
8699: LD_VAR 0 5
8703: PUSH
8704: LD_VAR 0 7
8708: ARRAY
8709: PUSH
8710: LD_INT 2
8712: ARRAY
8713: LESS
8714: IFFALSE 8752
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8716: LD_ADDR_VAR 0 5
8720: PUSH
8721: LD_VAR 0 5
8725: PPUSH
8726: LD_VAR 0 7
8730: PPUSH
8731: LD_VAR 0 6
8735: PUSH
8736: LD_VAR 0 8
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PPUSH
8745: CALL_OW 2
8749: ST_TO_ADDR
// break ;
8750: GO 8754
// end ; end ;
8752: GO 8691
8754: POP
8755: POP
// end ; end ;
8756: GO 8539
8758: POP
8759: POP
// if result and not asc then
8760: LD_VAR 0 5
8764: IFFALSE 8773
8766: PUSH
8767: LD_VAR 0 3
8771: NOT
8772: AND
8773: IFFALSE 8790
// result := ReverseArray ( result ) ;
8775: LD_ADDR_VAR 0 5
8779: PUSH
8780: LD_VAR 0 5
8784: PPUSH
8785: CALL 36148 0 1
8789: ST_TO_ADDR
// tmp := [ ] ;
8790: LD_ADDR_VAR 0 8
8794: PUSH
8795: EMPTY
8796: ST_TO_ADDR
// if mode then
8797: LD_VAR 0 4
8801: IFFALSE 8865
// begin for i := 1 to result do
8803: LD_ADDR_VAR 0 6
8807: PUSH
8808: DOUBLE
8809: LD_INT 1
8811: DEC
8812: ST_TO_ADDR
8813: LD_VAR 0 5
8817: PUSH
8818: FOR_TO
8819: IFFALSE 8853
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8821: LD_ADDR_VAR 0 8
8825: PUSH
8826: LD_VAR 0 8
8830: PPUSH
8831: LD_VAR 0 5
8835: PUSH
8836: LD_VAR 0 6
8840: ARRAY
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: CALL 41058 0 2
8850: ST_TO_ADDR
8851: GO 8818
8853: POP
8854: POP
// result := tmp ;
8855: LD_ADDR_VAR 0 5
8859: PUSH
8860: LD_VAR 0 8
8864: ST_TO_ADDR
// end ; end ;
8865: LD_VAR 0 5
8869: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8870: LD_INT 0
8872: PPUSH
8873: PPUSH
8874: PPUSH
8875: PPUSH
// if not list then
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 8885
// exit ;
8883: GO 9275
// result := [ ] ;
8885: LD_ADDR_VAR 0 6
8889: PUSH
8890: EMPTY
8891: ST_TO_ADDR
// for i in list do
8892: LD_ADDR_VAR 0 7
8896: PUSH
8897: LD_VAR 0 3
8901: PUSH
8902: FOR_IN
8903: IFFALSE 9105
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8905: LD_ADDR_VAR 0 9
8909: PUSH
8910: LD_VAR 0 7
8914: PPUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: LD_VAR 0 2
8924: PPUSH
8925: CALL_OW 297
8929: ST_TO_ADDR
// if not result then
8930: LD_VAR 0 6
8934: NOT
8935: IFFALSE 8961
// result := [ [ i , tmp ] ] else
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: LD_VAR 0 7
8946: PUSH
8947: LD_VAR 0 9
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: EMPTY
8957: LIST
8958: ST_TO_ADDR
8959: GO 9103
// begin if result [ result ] [ 2 ] <= tmp then
8961: LD_VAR 0 6
8965: PUSH
8966: LD_VAR 0 6
8970: ARRAY
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PUSH
8976: LD_VAR 0 9
8980: LESSEQUAL
8981: IFFALSE 9023
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8983: LD_ADDR_VAR 0 6
8987: PUSH
8988: LD_VAR 0 6
8992: PPUSH
8993: LD_VAR 0 6
8997: PUSH
8998: LD_INT 1
9000: PLUS
9001: PPUSH
9002: LD_VAR 0 7
9006: PUSH
9007: LD_VAR 0 9
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PPUSH
9016: CALL_OW 2
9020: ST_TO_ADDR
9021: GO 9103
// for j := 1 to result do
9023: LD_ADDR_VAR 0 8
9027: PUSH
9028: DOUBLE
9029: LD_INT 1
9031: DEC
9032: ST_TO_ADDR
9033: LD_VAR 0 6
9037: PUSH
9038: FOR_TO
9039: IFFALSE 9101
// begin if tmp < result [ j ] [ 2 ] then
9041: LD_VAR 0 9
9045: PUSH
9046: LD_VAR 0 6
9050: PUSH
9051: LD_VAR 0 8
9055: ARRAY
9056: PUSH
9057: LD_INT 2
9059: ARRAY
9060: LESS
9061: IFFALSE 9099
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9063: LD_ADDR_VAR 0 6
9067: PUSH
9068: LD_VAR 0 6
9072: PPUSH
9073: LD_VAR 0 8
9077: PPUSH
9078: LD_VAR 0 7
9082: PUSH
9083: LD_VAR 0 9
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 2
9096: ST_TO_ADDR
// break ;
9097: GO 9101
// end ; end ;
9099: GO 9038
9101: POP
9102: POP
// end ; end ;
9103: GO 8902
9105: POP
9106: POP
// if result and not asc then
9107: LD_VAR 0 6
9111: IFFALSE 9120
9113: PUSH
9114: LD_VAR 0 4
9118: NOT
9119: AND
9120: IFFALSE 9195
// begin tmp := result ;
9122: LD_ADDR_VAR 0 9
9126: PUSH
9127: LD_VAR 0 6
9131: ST_TO_ADDR
// for i = tmp downto 1 do
9132: LD_ADDR_VAR 0 7
9136: PUSH
9137: DOUBLE
9138: LD_VAR 0 9
9142: INC
9143: ST_TO_ADDR
9144: LD_INT 1
9146: PUSH
9147: FOR_DOWNTO
9148: IFFALSE 9193
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9150: LD_ADDR_VAR 0 6
9154: PUSH
9155: LD_VAR 0 6
9159: PPUSH
9160: LD_VAR 0 9
9164: PUSH
9165: LD_VAR 0 7
9169: MINUS
9170: PUSH
9171: LD_INT 1
9173: PLUS
9174: PPUSH
9175: LD_VAR 0 9
9179: PUSH
9180: LD_VAR 0 7
9184: ARRAY
9185: PPUSH
9186: CALL_OW 1
9190: ST_TO_ADDR
9191: GO 9147
9193: POP
9194: POP
// end ; tmp := [ ] ;
9195: LD_ADDR_VAR 0 9
9199: PUSH
9200: EMPTY
9201: ST_TO_ADDR
// if mode then
9202: LD_VAR 0 5
9206: IFFALSE 9275
// begin for i = 1 to result do
9208: LD_ADDR_VAR 0 7
9212: PUSH
9213: DOUBLE
9214: LD_INT 1
9216: DEC
9217: ST_TO_ADDR
9218: LD_VAR 0 6
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9263
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9226: LD_ADDR_VAR 0 9
9230: PUSH
9231: LD_VAR 0 9
9235: PPUSH
9236: LD_VAR 0 7
9240: PPUSH
9241: LD_VAR 0 6
9245: PUSH
9246: LD_VAR 0 7
9250: ARRAY
9251: PUSH
9252: LD_INT 1
9254: ARRAY
9255: PPUSH
9256: CALL_OW 1
9260: ST_TO_ADDR
9261: GO 9223
9263: POP
9264: POP
// result := tmp ;
9265: LD_ADDR_VAR 0 6
9269: PUSH
9270: LD_VAR 0 9
9274: ST_TO_ADDR
// end ; end ;
9275: LD_VAR 0 6
9279: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9280: LD_INT 0
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9288: LD_ADDR_VAR 0 5
9292: PUSH
9293: LD_INT 0
9295: PUSH
9296: LD_INT 0
9298: PUSH
9299: LD_INT 0
9301: PUSH
9302: EMPTY
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: ST_TO_ADDR
// if not x or not y then
9310: LD_VAR 0 2
9314: NOT
9315: IFTRUE 9324
9317: PUSH
9318: LD_VAR 0 3
9322: NOT
9323: OR
9324: IFFALSE 9328
// exit ;
9326: GO 10984
// if not range then
9328: LD_VAR 0 4
9332: NOT
9333: IFFALSE 9343
// range := 10 ;
9335: LD_ADDR_VAR 0 4
9339: PUSH
9340: LD_INT 10
9342: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9343: LD_ADDR_VAR 0 8
9347: PUSH
9348: LD_INT 81
9350: PUSH
9351: LD_VAR 0 1
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 92
9362: PUSH
9363: LD_VAR 0 2
9367: PUSH
9368: LD_VAR 0 3
9372: PUSH
9373: LD_VAR 0 4
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: LD_INT 21
9389: PUSH
9390: LD_INT 3
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: ST_TO_ADDR
// if not tmp then
9411: LD_VAR 0 8
9415: NOT
9416: IFFALSE 9420
// exit ;
9418: GO 10984
// for i in tmp do
9420: LD_ADDR_VAR 0 6
9424: PUSH
9425: LD_VAR 0 8
9429: PUSH
9430: FOR_IN
9431: IFFALSE 10959
// begin points := [ 0 , 0 , 0 ] ;
9433: LD_ADDR_VAR 0 9
9437: PUSH
9438: LD_INT 0
9440: PUSH
9441: LD_INT 0
9443: PUSH
9444: LD_INT 0
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: ST_TO_ADDR
// bpoints := 1 ;
9452: LD_ADDR_VAR 0 10
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9460: LD_VAR 0 6
9464: PPUSH
9465: CALL_OW 247
9469: PUSH
9470: LD_INT 1
9472: DOUBLE
9473: EQUAL
9474: IFTRUE 9478
9476: GO 10060
9478: POP
// begin if GetClass ( i ) = 1 then
9479: LD_VAR 0 6
9483: PPUSH
9484: CALL_OW 257
9488: PUSH
9489: LD_INT 1
9491: EQUAL
9492: IFFALSE 9513
// points := [ 10 , 5 , 3 ] ;
9494: LD_ADDR_VAR 0 9
9498: PUSH
9499: LD_INT 10
9501: PUSH
9502: LD_INT 5
9504: PUSH
9505: LD_INT 3
9507: PUSH
9508: EMPTY
9509: LIST
9510: LIST
9511: LIST
9512: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9513: LD_VAR 0 6
9517: PPUSH
9518: CALL_OW 257
9522: PUSH
9523: LD_INT 2
9525: PUSH
9526: LD_INT 3
9528: PUSH
9529: LD_INT 4
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: IN
9537: IFFALSE 9558
// points := [ 3 , 2 , 1 ] ;
9539: LD_ADDR_VAR 0 9
9543: PUSH
9544: LD_INT 3
9546: PUSH
9547: LD_INT 2
9549: PUSH
9550: LD_INT 1
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9558: LD_VAR 0 6
9562: PPUSH
9563: CALL_OW 257
9567: PUSH
9568: LD_INT 5
9570: EQUAL
9571: IFFALSE 9592
// points := [ 130 , 5 , 2 ] ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_INT 130
9580: PUSH
9581: LD_INT 5
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9592: LD_VAR 0 6
9596: PPUSH
9597: CALL_OW 257
9601: PUSH
9602: LD_INT 8
9604: EQUAL
9605: IFFALSE 9626
// points := [ 35 , 35 , 30 ] ;
9607: LD_ADDR_VAR 0 9
9611: PUSH
9612: LD_INT 35
9614: PUSH
9615: LD_INT 35
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9626: LD_VAR 0 6
9630: PPUSH
9631: CALL_OW 257
9635: PUSH
9636: LD_INT 9
9638: EQUAL
9639: IFFALSE 9660
// points := [ 20 , 55 , 40 ] ;
9641: LD_ADDR_VAR 0 9
9645: PUSH
9646: LD_INT 20
9648: PUSH
9649: LD_INT 55
9651: PUSH
9652: LD_INT 40
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: LIST
9659: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9660: LD_VAR 0 6
9664: PPUSH
9665: CALL_OW 257
9669: PUSH
9670: LD_INT 12
9672: PUSH
9673: LD_INT 16
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: IN
9680: IFFALSE 9701
// points := [ 5 , 3 , 2 ] ;
9682: LD_ADDR_VAR 0 9
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 3
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9701: LD_VAR 0 6
9705: PPUSH
9706: CALL_OW 257
9710: PUSH
9711: LD_INT 17
9713: EQUAL
9714: IFFALSE 9735
// points := [ 100 , 50 , 75 ] ;
9716: LD_ADDR_VAR 0 9
9720: PUSH
9721: LD_INT 100
9723: PUSH
9724: LD_INT 50
9726: PUSH
9727: LD_INT 75
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9735: LD_VAR 0 6
9739: PPUSH
9740: CALL_OW 257
9744: PUSH
9745: LD_INT 15
9747: EQUAL
9748: IFFALSE 9769
// points := [ 10 , 5 , 3 ] ;
9750: LD_ADDR_VAR 0 9
9754: PUSH
9755: LD_INT 10
9757: PUSH
9758: LD_INT 5
9760: PUSH
9761: LD_INT 3
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9769: LD_VAR 0 6
9773: PPUSH
9774: CALL_OW 257
9778: PUSH
9779: LD_INT 14
9781: EQUAL
9782: IFFALSE 9803
// points := [ 10 , 0 , 0 ] ;
9784: LD_ADDR_VAR 0 9
9788: PUSH
9789: LD_INT 10
9791: PUSH
9792: LD_INT 0
9794: PUSH
9795: LD_INT 0
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9803: LD_VAR 0 6
9807: PPUSH
9808: CALL_OW 257
9812: PUSH
9813: LD_INT 11
9815: EQUAL
9816: IFFALSE 9837
// points := [ 30 , 10 , 5 ] ;
9818: LD_ADDR_VAR 0 9
9822: PUSH
9823: LD_INT 30
9825: PUSH
9826: LD_INT 10
9828: PUSH
9829: LD_INT 5
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9837: LD_VAR 0 1
9841: PPUSH
9842: LD_INT 5
9844: PPUSH
9845: CALL_OW 321
9849: PUSH
9850: LD_INT 2
9852: EQUAL
9853: IFFALSE 9870
// bpoints := bpoints * 1.8 ;
9855: LD_ADDR_VAR 0 10
9859: PUSH
9860: LD_VAR 0 10
9864: PUSH
9865: LD_REAL  1.80000000000000E+0000
9868: MUL
9869: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9870: LD_VAR 0 6
9874: PPUSH
9875: CALL_OW 257
9879: PUSH
9880: LD_INT 1
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: LD_INT 4
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: IN
9898: IFFALSE 9918
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 51
9908: PPUSH
9909: CALL_OW 321
9913: PUSH
9914: LD_INT 2
9916: EQUAL
9917: AND
9918: IFFALSE 9935
// bpoints := bpoints * 1.2 ;
9920: LD_ADDR_VAR 0 10
9924: PUSH
9925: LD_VAR 0 10
9929: PUSH
9930: LD_REAL  1.20000000000000E+0000
9933: MUL
9934: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9935: LD_VAR 0 6
9939: PPUSH
9940: CALL_OW 257
9944: PUSH
9945: LD_INT 5
9947: PUSH
9948: LD_INT 7
9950: PUSH
9951: LD_INT 9
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: IN
9959: IFFALSE 9979
9961: PUSH
9962: LD_VAR 0 1
9966: PPUSH
9967: LD_INT 52
9969: PPUSH
9970: CALL_OW 321
9974: PUSH
9975: LD_INT 2
9977: EQUAL
9978: AND
9979: IFFALSE 9996
// bpoints := bpoints * 1.5 ;
9981: LD_ADDR_VAR 0 10
9985: PUSH
9986: LD_VAR 0 10
9990: PUSH
9991: LD_REAL  1.50000000000000E+0000
9994: MUL
9995: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9996: LD_VAR 0 1
10000: PPUSH
10001: LD_INT 66
10003: PPUSH
10004: CALL_OW 321
10008: PUSH
10009: LD_INT 2
10011: EQUAL
10012: IFFALSE 10029
// bpoints := bpoints * 1.1 ;
10014: LD_ADDR_VAR 0 10
10018: PUSH
10019: LD_VAR 0 10
10023: PUSH
10024: LD_REAL  1.10000000000000E+0000
10027: MUL
10028: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10029: LD_ADDR_VAR 0 10
10033: PUSH
10034: LD_VAR 0 10
10038: PUSH
10039: LD_VAR 0 6
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: CALL_OW 259
10051: PUSH
10052: LD_REAL  1.15000000000000E+0000
10055: MUL
10056: MUL
10057: ST_TO_ADDR
// end ; unit_vehicle :
10058: GO 10888
10060: LD_INT 2
10062: DOUBLE
10063: EQUAL
10064: IFTRUE 10068
10066: GO 10876
10068: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10069: LD_VAR 0 6
10073: PPUSH
10074: CALL_OW 264
10078: PUSH
10079: LD_INT 2
10081: PUSH
10082: LD_INT 42
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: IN
10093: IFFALSE 10114
// points := [ 25 , 5 , 3 ] ;
10095: LD_ADDR_VAR 0 9
10099: PUSH
10100: LD_INT 25
10102: PUSH
10103: LD_INT 5
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10114: LD_VAR 0 6
10118: PPUSH
10119: CALL_OW 264
10123: PUSH
10124: LD_INT 4
10126: PUSH
10127: LD_INT 43
10129: PUSH
10130: LD_INT 25
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: IN
10138: IFFALSE 10159
// points := [ 40 , 15 , 5 ] ;
10140: LD_ADDR_VAR 0 9
10144: PUSH
10145: LD_INT 40
10147: PUSH
10148: LD_INT 15
10150: PUSH
10151: LD_INT 5
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10159: LD_VAR 0 6
10163: PPUSH
10164: CALL_OW 264
10168: PUSH
10169: LD_INT 3
10171: PUSH
10172: LD_INT 23
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: IN
10179: IFFALSE 10200
// points := [ 7 , 25 , 8 ] ;
10181: LD_ADDR_VAR 0 9
10185: PUSH
10186: LD_INT 7
10188: PUSH
10189: LD_INT 25
10191: PUSH
10192: LD_INT 8
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: LIST
10199: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10200: LD_VAR 0 6
10204: PPUSH
10205: CALL_OW 264
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 27
10215: PUSH
10216: LD_INT 44
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: IN
10224: IFFALSE 10245
// points := [ 14 , 50 , 16 ] ;
10226: LD_ADDR_VAR 0 9
10230: PUSH
10231: LD_INT 14
10233: PUSH
10234: LD_INT 50
10236: PUSH
10237: LD_INT 16
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10245: LD_VAR 0 6
10249: PPUSH
10250: CALL_OW 264
10254: PUSH
10255: LD_INT 6
10257: PUSH
10258: LD_INT 46
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: IN
10265: IFFALSE 10286
// points := [ 32 , 120 , 70 ] ;
10267: LD_ADDR_VAR 0 9
10271: PUSH
10272: LD_INT 32
10274: PUSH
10275: LD_INT 120
10277: PUSH
10278: LD_INT 70
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10286: LD_VAR 0 6
10290: PPUSH
10291: CALL_OW 264
10295: PUSH
10296: LD_INT 7
10298: PUSH
10299: LD_INT 28
10301: PUSH
10302: LD_INT 45
10304: PUSH
10305: LD_INT 92
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: IN
10314: IFFALSE 10335
// points := [ 35 , 20 , 45 ] ;
10316: LD_ADDR_VAR 0 9
10320: PUSH
10321: LD_INT 35
10323: PUSH
10324: LD_INT 20
10326: PUSH
10327: LD_INT 45
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10335: LD_VAR 0 6
10339: PPUSH
10340: CALL_OW 264
10344: PUSH
10345: LD_INT 47
10347: PUSH
10348: EMPTY
10349: LIST
10350: IN
10351: IFFALSE 10372
// points := [ 67 , 45 , 75 ] ;
10353: LD_ADDR_VAR 0 9
10357: PUSH
10358: LD_INT 67
10360: PUSH
10361: LD_INT 45
10363: PUSH
10364: LD_INT 75
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10372: LD_VAR 0 6
10376: PPUSH
10377: CALL_OW 264
10381: PUSH
10382: LD_INT 26
10384: PUSH
10385: EMPTY
10386: LIST
10387: IN
10388: IFFALSE 10409
// points := [ 120 , 30 , 80 ] ;
10390: LD_ADDR_VAR 0 9
10394: PUSH
10395: LD_INT 120
10397: PUSH
10398: LD_INT 30
10400: PUSH
10401: LD_INT 80
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10409: LD_VAR 0 6
10413: PPUSH
10414: CALL_OW 264
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: EMPTY
10423: LIST
10424: IN
10425: IFFALSE 10446
// points := [ 40 , 1 , 1 ] ;
10427: LD_ADDR_VAR 0 9
10431: PUSH
10432: LD_INT 40
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: LD_INT 1
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10446: LD_VAR 0 6
10450: PPUSH
10451: CALL_OW 264
10455: PUSH
10456: LD_INT 29
10458: PUSH
10459: EMPTY
10460: LIST
10461: IN
10462: IFFALSE 10483
// points := [ 70 , 200 , 400 ] ;
10464: LD_ADDR_VAR 0 9
10468: PUSH
10469: LD_INT 70
10471: PUSH
10472: LD_INT 200
10474: PUSH
10475: LD_INT 400
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10483: LD_VAR 0 6
10487: PPUSH
10488: CALL_OW 264
10492: PUSH
10493: LD_INT 14
10495: PUSH
10496: LD_INT 53
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: IN
10503: IFFALSE 10524
// points := [ 40 , 10 , 20 ] ;
10505: LD_ADDR_VAR 0 9
10509: PUSH
10510: LD_INT 40
10512: PUSH
10513: LD_INT 10
10515: PUSH
10516: LD_INT 20
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10524: LD_VAR 0 6
10528: PPUSH
10529: CALL_OW 264
10533: PUSH
10534: LD_INT 9
10536: PUSH
10537: EMPTY
10538: LIST
10539: IN
10540: IFFALSE 10561
// points := [ 5 , 70 , 20 ] ;
10542: LD_ADDR_VAR 0 9
10546: PUSH
10547: LD_INT 5
10549: PUSH
10550: LD_INT 70
10552: PUSH
10553: LD_INT 20
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10561: LD_VAR 0 6
10565: PPUSH
10566: CALL_OW 264
10570: PUSH
10571: LD_INT 10
10573: PUSH
10574: EMPTY
10575: LIST
10576: IN
10577: IFFALSE 10598
// points := [ 35 , 110 , 70 ] ;
10579: LD_ADDR_VAR 0 9
10583: PUSH
10584: LD_INT 35
10586: PUSH
10587: LD_INT 110
10589: PUSH
10590: LD_INT 70
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10598: LD_VAR 0 6
10602: PPUSH
10603: CALL_OW 265
10607: PUSH
10608: LD_INT 25
10610: EQUAL
10611: IFFALSE 10632
// points := [ 80 , 65 , 100 ] ;
10613: LD_ADDR_VAR 0 9
10617: PUSH
10618: LD_INT 80
10620: PUSH
10621: LD_INT 65
10623: PUSH
10624: LD_INT 100
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10632: LD_VAR 0 6
10636: PPUSH
10637: CALL_OW 263
10641: PUSH
10642: LD_INT 1
10644: EQUAL
10645: IFFALSE 10680
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10647: LD_ADDR_VAR 0 10
10651: PUSH
10652: LD_VAR 0 10
10656: PUSH
10657: LD_VAR 0 6
10661: PPUSH
10662: CALL_OW 311
10666: PPUSH
10667: LD_INT 3
10669: PPUSH
10670: CALL_OW 259
10674: PUSH
10675: LD_INT 4
10677: MUL
10678: MUL
10679: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10680: LD_VAR 0 6
10684: PPUSH
10685: CALL_OW 263
10689: PUSH
10690: LD_INT 2
10692: EQUAL
10693: IFFALSE 10744
// begin j := IsControledBy ( i ) ;
10695: LD_ADDR_VAR 0 7
10699: PUSH
10700: LD_VAR 0 6
10704: PPUSH
10705: CALL_OW 312
10709: ST_TO_ADDR
// if j then
10710: LD_VAR 0 7
10714: IFFALSE 10744
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10716: LD_ADDR_VAR 0 10
10720: PUSH
10721: LD_VAR 0 10
10725: PUSH
10726: LD_VAR 0 7
10730: PPUSH
10731: LD_INT 3
10733: PPUSH
10734: CALL_OW 259
10738: PUSH
10739: LD_INT 3
10741: MUL
10742: MUL
10743: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10744: LD_VAR 0 6
10748: PPUSH
10749: CALL_OW 264
10753: PUSH
10754: LD_INT 5
10756: PUSH
10757: LD_INT 6
10759: PUSH
10760: LD_INT 46
10762: PUSH
10763: LD_INT 44
10765: PUSH
10766: LD_INT 47
10768: PUSH
10769: LD_INT 45
10771: PUSH
10772: LD_INT 28
10774: PUSH
10775: LD_INT 7
10777: PUSH
10778: LD_INT 27
10780: PUSH
10781: LD_INT 29
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: IN
10796: IFFALSE 10816
10798: PUSH
10799: LD_VAR 0 1
10803: PPUSH
10804: LD_INT 52
10806: PPUSH
10807: CALL_OW 321
10811: PUSH
10812: LD_INT 2
10814: EQUAL
10815: AND
10816: IFFALSE 10833
// bpoints := bpoints * 1.2 ;
10818: LD_ADDR_VAR 0 10
10822: PUSH
10823: LD_VAR 0 10
10827: PUSH
10828: LD_REAL  1.20000000000000E+0000
10831: MUL
10832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10833: LD_VAR 0 6
10837: PPUSH
10838: CALL_OW 264
10842: PUSH
10843: LD_INT 6
10845: PUSH
10846: LD_INT 46
10848: PUSH
10849: LD_INT 47
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: IN
10857: IFFALSE 10874
// bpoints := bpoints * 1.2 ;
10859: LD_ADDR_VAR 0 10
10863: PUSH
10864: LD_VAR 0 10
10868: PUSH
10869: LD_REAL  1.20000000000000E+0000
10872: MUL
10873: ST_TO_ADDR
// end ; unit_building :
10874: GO 10888
10876: LD_INT 3
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10887
10884: POP
// ; end ;
10885: GO 10888
10887: POP
// for j = 1 to 3 do
10888: LD_ADDR_VAR 0 7
10892: PUSH
10893: DOUBLE
10894: LD_INT 1
10896: DEC
10897: ST_TO_ADDR
10898: LD_INT 3
10900: PUSH
10901: FOR_TO
10902: IFFALSE 10955
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10904: LD_ADDR_VAR 0 5
10908: PUSH
10909: LD_VAR 0 5
10913: PPUSH
10914: LD_VAR 0 7
10918: PPUSH
10919: LD_VAR 0 5
10923: PUSH
10924: LD_VAR 0 7
10928: ARRAY
10929: PUSH
10930: LD_VAR 0 9
10934: PUSH
10935: LD_VAR 0 7
10939: ARRAY
10940: PUSH
10941: LD_VAR 0 10
10945: MUL
10946: PLUS
10947: PPUSH
10948: CALL_OW 1
10952: ST_TO_ADDR
10953: GO 10901
10955: POP
10956: POP
// end ;
10957: GO 9430
10959: POP
10960: POP
// result := Replace ( result , 4 , tmp ) ;
10961: LD_ADDR_VAR 0 5
10965: PUSH
10966: LD_VAR 0 5
10970: PPUSH
10971: LD_INT 4
10973: PPUSH
10974: LD_VAR 0 8
10978: PPUSH
10979: CALL_OW 1
10983: ST_TO_ADDR
// end ;
10984: LD_VAR 0 5
10988: RET
// export function DangerAtRange ( unit , range ) ; begin
10989: LD_INT 0
10991: PPUSH
// if not unit then
10992: LD_VAR 0 1
10996: NOT
10997: IFFALSE 11001
// exit ;
10999: GO 11046
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11001: LD_ADDR_VAR 0 3
11005: PUSH
11006: LD_VAR 0 1
11010: PPUSH
11011: CALL_OW 255
11015: PPUSH
11016: LD_VAR 0 1
11020: PPUSH
11021: CALL_OW 250
11025: PPUSH
11026: LD_VAR 0 1
11030: PPUSH
11031: CALL_OW 251
11035: PPUSH
11036: LD_VAR 0 2
11040: PPUSH
11041: CALL 9280 0 4
11045: ST_TO_ADDR
// end ;
11046: LD_VAR 0 3
11050: RET
// export function DangerInArea ( side , area ) ; begin
11051: LD_INT 0
11053: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11054: LD_ADDR_VAR 0 3
11058: PUSH
11059: LD_VAR 0 2
11063: PPUSH
11064: LD_INT 81
11066: PUSH
11067: LD_VAR 0 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PPUSH
11076: CALL_OW 70
11080: ST_TO_ADDR
// end ;
11081: LD_VAR 0 3
11085: RET
// export function IsExtension ( b ) ; begin
11086: LD_INT 0
11088: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: LD_VAR 0 1
11098: PUSH
11099: LD_INT 23
11101: PUSH
11102: LD_INT 20
11104: PUSH
11105: LD_INT 22
11107: PUSH
11108: LD_INT 17
11110: PUSH
11111: LD_INT 24
11113: PUSH
11114: LD_INT 21
11116: PUSH
11117: LD_INT 19
11119: PUSH
11120: LD_INT 16
11122: PUSH
11123: LD_INT 25
11125: PUSH
11126: LD_INT 18
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: IN
11141: ST_TO_ADDR
// end ;
11142: LD_VAR 0 2
11146: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11147: LD_INT 0
11149: PPUSH
11150: PPUSH
11151: PPUSH
// result := [ ] ;
11152: LD_ADDR_VAR 0 4
11156: PUSH
11157: EMPTY
11158: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11159: LD_ADDR_VAR 0 5
11163: PUSH
11164: LD_VAR 0 2
11168: PPUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 3
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PPUSH
11179: CALL_OW 70
11183: ST_TO_ADDR
// if not tmp then
11184: LD_VAR 0 5
11188: NOT
11189: IFFALSE 11193
// exit ;
11191: GO 11257
// if checkLink then
11193: LD_VAR 0 3
11197: IFFALSE 11247
// begin for i in tmp do
11199: LD_ADDR_VAR 0 6
11203: PUSH
11204: LD_VAR 0 5
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11245
// if GetBase ( i ) <> base then
11212: LD_VAR 0 6
11216: PPUSH
11217: CALL_OW 274
11221: PUSH
11222: LD_VAR 0 1
11226: NONEQUAL
11227: IFFALSE 11243
// ComLinkToBase ( base , i ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_VAR 0 6
11238: PPUSH
11239: CALL_OW 169
11243: GO 11209
11245: POP
11246: POP
// end ; result := tmp ;
11247: LD_ADDR_VAR 0 4
11251: PUSH
11252: LD_VAR 0 5
11256: ST_TO_ADDR
// end ;
11257: LD_VAR 0 4
11261: RET
// export function ComComplete ( units , b ) ; var i ; begin
11262: LD_INT 0
11264: PPUSH
11265: PPUSH
// if not units then
11266: LD_VAR 0 1
11270: NOT
11271: IFFALSE 11275
// exit ;
11273: GO 11365
// for i in units do
11275: LD_ADDR_VAR 0 4
11279: PUSH
11280: LD_VAR 0 1
11284: PUSH
11285: FOR_IN
11286: IFFALSE 11363
// if BuildingStatus ( b ) = bs_build then
11288: LD_VAR 0 2
11292: PPUSH
11293: CALL_OW 461
11297: PUSH
11298: LD_INT 1
11300: EQUAL
11301: IFFALSE 11361
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11303: LD_VAR 0 4
11307: PPUSH
11308: LD_STRING h
11310: PUSH
11311: LD_VAR 0 2
11315: PPUSH
11316: CALL_OW 250
11320: PUSH
11321: LD_VAR 0 2
11325: PPUSH
11326: CALL_OW 251
11330: PUSH
11331: LD_VAR 0 2
11335: PUSH
11336: LD_INT 0
11338: PUSH
11339: LD_INT 0
11341: PUSH
11342: LD_INT 0
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: PPUSH
11357: CALL_OW 446
11361: GO 11285
11363: POP
11364: POP
// end ;
11365: LD_VAR 0 3
11369: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11370: LD_INT 0
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
11377: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11378: LD_VAR 0 1
11382: NOT
11383: IFTRUE 11400
11385: PUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 263
11395: PUSH
11396: LD_INT 2
11398: NONEQUAL
11399: OR
11400: IFFALSE 11404
// exit ;
11402: GO 11720
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11404: LD_ADDR_VAR 0 6
11408: PUSH
11409: LD_INT 22
11411: PUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: CALL_OW 255
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: LD_INT 30
11431: PUSH
11432: LD_INT 36
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 34
11441: PUSH
11442: LD_INT 31
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 69
11462: ST_TO_ADDR
// if not tmp then
11463: LD_VAR 0 6
11467: NOT
11468: IFFALSE 11472
// exit ;
11470: GO 11720
// result := [ ] ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: EMPTY
11478: ST_TO_ADDR
// for i in tmp do
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_VAR 0 6
11488: PUSH
11489: FOR_IN
11490: IFFALSE 11561
// begin t := UnitsInside ( i ) ;
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_VAR 0 3
11501: PPUSH
11502: CALL_OW 313
11506: ST_TO_ADDR
// if t then
11507: LD_VAR 0 4
11511: IFFALSE 11559
// for j in t do
11513: LD_ADDR_VAR 0 7
11517: PUSH
11518: LD_VAR 0 4
11522: PUSH
11523: FOR_IN
11524: IFFALSE 11557
// result := Replace ( result , result + 1 , j ) ;
11526: LD_ADDR_VAR 0 2
11530: PUSH
11531: LD_VAR 0 2
11535: PPUSH
11536: LD_VAR 0 2
11540: PUSH
11541: LD_INT 1
11543: PLUS
11544: PPUSH
11545: LD_VAR 0 7
11549: PPUSH
11550: CALL_OW 1
11554: ST_TO_ADDR
11555: GO 11523
11557: POP
11558: POP
// end ;
11559: GO 11489
11561: POP
11562: POP
// if not result then
11563: LD_VAR 0 2
11567: NOT
11568: IFFALSE 11572
// exit ;
11570: GO 11720
// mech := result [ 1 ] ;
11572: LD_ADDR_VAR 0 5
11576: PUSH
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 1
11584: ARRAY
11585: ST_TO_ADDR
// if result > 1 then
11586: LD_VAR 0 2
11590: PUSH
11591: LD_INT 1
11593: GREATER
11594: IFFALSE 11706
// begin for i = 2 to result do
11596: LD_ADDR_VAR 0 3
11600: PUSH
11601: DOUBLE
11602: LD_INT 2
11604: DEC
11605: ST_TO_ADDR
11606: LD_VAR 0 2
11610: PUSH
11611: FOR_TO
11612: IFFALSE 11704
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11614: LD_ADDR_VAR 0 4
11618: PUSH
11619: LD_VAR 0 2
11623: PUSH
11624: LD_VAR 0 3
11628: ARRAY
11629: PPUSH
11630: LD_INT 3
11632: PPUSH
11633: CALL_OW 259
11637: PUSH
11638: LD_VAR 0 2
11642: PUSH
11643: LD_VAR 0 3
11647: ARRAY
11648: PPUSH
11649: CALL_OW 432
11653: MINUS
11654: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11655: LD_VAR 0 4
11659: PUSH
11660: LD_VAR 0 5
11664: PPUSH
11665: LD_INT 3
11667: PPUSH
11668: CALL_OW 259
11672: PUSH
11673: LD_VAR 0 5
11677: PPUSH
11678: CALL_OW 432
11682: MINUS
11683: GREATEREQUAL
11684: IFFALSE 11702
// mech := result [ i ] ;
11686: LD_ADDR_VAR 0 5
11690: PUSH
11691: LD_VAR 0 2
11695: PUSH
11696: LD_VAR 0 3
11700: ARRAY
11701: ST_TO_ADDR
// end ;
11702: GO 11611
11704: POP
11705: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11706: LD_VAR 0 1
11710: PPUSH
11711: LD_VAR 0 5
11715: PPUSH
11716: CALL_OW 135
// end ;
11720: LD_VAR 0 2
11724: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11725: LD_INT 0
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
// result := [ ] ;
11740: LD_ADDR_VAR 0 7
11744: PUSH
11745: EMPTY
11746: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL_OW 266
11756: PUSH
11757: LD_INT 0
11759: PUSH
11760: LD_INT 1
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: IN
11767: NOT
11768: IFFALSE 11772
// exit ;
11770: GO 13412
// if name then
11772: LD_VAR 0 3
11776: IFFALSE 11792
// SetBName ( base_dep , name ) ;
11778: LD_VAR 0 1
11782: PPUSH
11783: LD_VAR 0 3
11787: PPUSH
11788: CALL_OW 500
// base := GetBase ( base_dep ) ;
11792: LD_ADDR_VAR 0 15
11796: PUSH
11797: LD_VAR 0 1
11801: PPUSH
11802: CALL_OW 274
11806: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11807: LD_ADDR_VAR 0 16
11811: PUSH
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 255
11821: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11822: LD_ADDR_VAR 0 17
11826: PUSH
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 248
11836: ST_TO_ADDR
// if sources then
11837: LD_VAR 0 5
11841: IFFALSE 11888
// for i = 1 to 3 do
11843: LD_ADDR_VAR 0 8
11847: PUSH
11848: DOUBLE
11849: LD_INT 1
11851: DEC
11852: ST_TO_ADDR
11853: LD_INT 3
11855: PUSH
11856: FOR_TO
11857: IFFALSE 11886
// AddResourceType ( base , i , sources [ i ] ) ;
11859: LD_VAR 0 15
11863: PPUSH
11864: LD_VAR 0 8
11868: PPUSH
11869: LD_VAR 0 5
11873: PUSH
11874: LD_VAR 0 8
11878: ARRAY
11879: PPUSH
11880: CALL_OW 276
11884: GO 11856
11886: POP
11887: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11888: LD_ADDR_VAR 0 18
11892: PUSH
11893: LD_VAR 0 15
11897: PPUSH
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: CALL 11147 0 3
11910: ST_TO_ADDR
// InitHc ;
11911: CALL_OW 19
// InitUc ;
11915: CALL_OW 18
// uc_side := side ;
11919: LD_ADDR_OWVAR 20
11923: PUSH
11924: LD_VAR 0 16
11928: ST_TO_ADDR
// uc_nation := nation ;
11929: LD_ADDR_OWVAR 21
11933: PUSH
11934: LD_VAR 0 17
11938: ST_TO_ADDR
// if buildings then
11939: LD_VAR 0 18
11943: IFFALSE 13271
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11945: LD_ADDR_VAR 0 19
11949: PUSH
11950: LD_VAR 0 18
11954: PPUSH
11955: LD_INT 2
11957: PUSH
11958: LD_INT 30
11960: PUSH
11961: LD_INT 29
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 30
11970: PUSH
11971: LD_INT 30
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 72
11987: ST_TO_ADDR
// if tmp then
11988: LD_VAR 0 19
11992: IFFALSE 12040
// for i in tmp do
11994: LD_ADDR_VAR 0 8
11998: PUSH
11999: LD_VAR 0 19
12003: PUSH
12004: FOR_IN
12005: IFFALSE 12038
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12007: LD_VAR 0 8
12011: PPUSH
12012: CALL_OW 250
12016: PPUSH
12017: LD_VAR 0 8
12021: PPUSH
12022: CALL_OW 251
12026: PPUSH
12027: LD_VAR 0 16
12031: PPUSH
12032: CALL_OW 441
12036: GO 12004
12038: POP
12039: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12040: LD_VAR 0 18
12044: PPUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 30
12050: PUSH
12051: LD_INT 32
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 30
12060: PUSH
12061: LD_INT 33
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 72
12077: IFFALSE 12165
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12079: LD_ADDR_VAR 0 8
12083: PUSH
12084: LD_VAR 0 18
12088: PPUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 32
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 30
12104: PUSH
12105: LD_INT 33
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 72
12121: PUSH
12122: FOR_IN
12123: IFFALSE 12163
// begin if not GetBWeapon ( i ) then
12125: LD_VAR 0 8
12129: PPUSH
12130: CALL_OW 269
12134: NOT
12135: IFFALSE 12161
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12137: LD_VAR 0 8
12141: PPUSH
12142: LD_VAR 0 8
12146: PPUSH
12147: LD_VAR 0 2
12151: PPUSH
12152: CALL 13417 0 2
12156: PPUSH
12157: CALL_OW 431
// end ;
12161: GO 12122
12163: POP
12164: POP
// end ; for i = 1 to personel do
12165: LD_ADDR_VAR 0 8
12169: PUSH
12170: DOUBLE
12171: LD_INT 1
12173: DEC
12174: ST_TO_ADDR
12175: LD_VAR 0 6
12179: PUSH
12180: FOR_TO
12181: IFFALSE 13251
// begin if i > 4 then
12183: LD_VAR 0 8
12187: PUSH
12188: LD_INT 4
12190: GREATER
12191: IFFALSE 12195
// break ;
12193: GO 13251
// case i of 1 :
12195: LD_VAR 0 8
12199: PUSH
12200: LD_INT 1
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12288
12208: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12209: LD_ADDR_VAR 0 12
12213: PUSH
12214: LD_VAR 0 18
12218: PPUSH
12219: LD_INT 22
12221: PUSH
12222: LD_VAR 0 16
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 58
12233: PUSH
12234: EMPTY
12235: LIST
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: LD_INT 30
12242: PUSH
12243: LD_INT 32
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 30
12252: PUSH
12253: LD_INT 4
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 30
12262: PUSH
12263: LD_INT 5
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: LIST
12280: PPUSH
12281: CALL_OW 72
12285: ST_TO_ADDR
12286: GO 12510
12288: LD_INT 2
12290: DOUBLE
12291: EQUAL
12292: IFTRUE 12296
12294: GO 12358
12296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12297: LD_ADDR_VAR 0 12
12301: PUSH
12302: LD_VAR 0 18
12306: PPUSH
12307: LD_INT 22
12309: PUSH
12310: LD_VAR 0 16
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 30
12324: PUSH
12325: LD_INT 0
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 30
12334: PUSH
12335: LD_INT 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 72
12355: ST_TO_ADDR
12356: GO 12510
12358: LD_INT 3
12360: DOUBLE
12361: EQUAL
12362: IFTRUE 12366
12364: GO 12428
12366: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12367: LD_ADDR_VAR 0 12
12371: PUSH
12372: LD_VAR 0 18
12376: PPUSH
12377: LD_INT 22
12379: PUSH
12380: LD_VAR 0 16
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 2
12391: PUSH
12392: LD_INT 30
12394: PUSH
12395: LD_INT 2
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 72
12425: ST_TO_ADDR
12426: GO 12510
12428: LD_INT 4
12430: DOUBLE
12431: EQUAL
12432: IFTRUE 12436
12434: GO 12509
12436: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12437: LD_ADDR_VAR 0 12
12441: PUSH
12442: LD_VAR 0 18
12446: PPUSH
12447: LD_INT 22
12449: PUSH
12450: LD_VAR 0 16
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 2
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 6
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 30
12474: PUSH
12475: LD_INT 7
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 8
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PPUSH
12502: CALL_OW 72
12506: ST_TO_ADDR
12507: GO 12510
12509: POP
// if i = 1 then
12510: LD_VAR 0 8
12514: PUSH
12515: LD_INT 1
12517: EQUAL
12518: IFFALSE 12629
// begin tmp := [ ] ;
12520: LD_ADDR_VAR 0 19
12524: PUSH
12525: EMPTY
12526: ST_TO_ADDR
// for j in f do
12527: LD_ADDR_VAR 0 9
12531: PUSH
12532: LD_VAR 0 12
12536: PUSH
12537: FOR_IN
12538: IFFALSE 12611
// if GetBType ( j ) = b_bunker then
12540: LD_VAR 0 9
12544: PPUSH
12545: CALL_OW 266
12549: PUSH
12550: LD_INT 32
12552: EQUAL
12553: IFFALSE 12580
// tmp := Insert ( tmp , 1 , j ) else
12555: LD_ADDR_VAR 0 19
12559: PUSH
12560: LD_VAR 0 19
12564: PPUSH
12565: LD_INT 1
12567: PPUSH
12568: LD_VAR 0 9
12572: PPUSH
12573: CALL_OW 2
12577: ST_TO_ADDR
12578: GO 12609
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12580: LD_ADDR_VAR 0 19
12584: PUSH
12585: LD_VAR 0 19
12589: PPUSH
12590: LD_VAR 0 19
12594: PUSH
12595: LD_INT 1
12597: PLUS
12598: PPUSH
12599: LD_VAR 0 9
12603: PPUSH
12604: CALL_OW 2
12608: ST_TO_ADDR
12609: GO 12537
12611: POP
12612: POP
// if tmp then
12613: LD_VAR 0 19
12617: IFFALSE 12629
// f := tmp ;
12619: LD_ADDR_VAR 0 12
12623: PUSH
12624: LD_VAR 0 19
12628: ST_TO_ADDR
// end ; x := personel [ i ] ;
12629: LD_ADDR_VAR 0 13
12633: PUSH
12634: LD_VAR 0 6
12638: PUSH
12639: LD_VAR 0 8
12643: ARRAY
12644: ST_TO_ADDR
// if x = - 1 then
12645: LD_VAR 0 13
12649: PUSH
12650: LD_INT 1
12652: NEG
12653: EQUAL
12654: IFFALSE 12865
// begin for j in f do
12656: LD_ADDR_VAR 0 9
12660: PUSH
12661: LD_VAR 0 12
12665: PUSH
12666: FOR_IN
12667: IFFALSE 12861
// repeat InitHc ;
12669: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12673: LD_VAR 0 9
12677: PPUSH
12678: CALL_OW 266
12682: PUSH
12683: LD_INT 5
12685: EQUAL
12686: IFFALSE 12756
// begin if UnitsInside ( j ) < 3 then
12688: LD_VAR 0 9
12692: PPUSH
12693: CALL_OW 313
12697: PUSH
12698: LD_INT 3
12700: LESS
12701: IFFALSE 12737
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12703: LD_INT 0
12705: PPUSH
12706: LD_INT 5
12708: PUSH
12709: LD_INT 8
12711: PUSH
12712: LD_INT 9
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: PUSH
12720: LD_VAR 0 17
12724: ARRAY
12725: PPUSH
12726: LD_VAR 0 4
12730: PPUSH
12731: CALL_OW 380
12735: GO 12754
// PrepareHuman ( false , i , skill ) ;
12737: LD_INT 0
12739: PPUSH
12740: LD_VAR 0 8
12744: PPUSH
12745: LD_VAR 0 4
12749: PPUSH
12750: CALL_OW 380
// end else
12754: GO 12773
// PrepareHuman ( false , i , skill ) ;
12756: LD_INT 0
12758: PPUSH
12759: LD_VAR 0 8
12763: PPUSH
12764: LD_VAR 0 4
12768: PPUSH
12769: CALL_OW 380
// un := CreateHuman ;
12773: LD_ADDR_VAR 0 14
12777: PUSH
12778: CALL_OW 44
12782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12783: LD_ADDR_VAR 0 7
12787: PUSH
12788: LD_VAR 0 7
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: LD_VAR 0 14
12800: PPUSH
12801: CALL_OW 2
12805: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12806: LD_VAR 0 14
12810: PPUSH
12811: LD_VAR 0 9
12815: PPUSH
12816: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12820: LD_VAR 0 9
12824: PPUSH
12825: CALL_OW 313
12829: PUSH
12830: LD_INT 6
12832: EQUAL
12833: IFTRUE 12857
12835: PUSH
12836: LD_VAR 0 9
12840: PPUSH
12841: CALL_OW 266
12845: PUSH
12846: LD_INT 32
12848: PUSH
12849: LD_INT 31
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: IN
12856: OR
12857: IFFALSE 12669
12859: GO 12666
12861: POP
12862: POP
// end else
12863: GO 13249
// for j = 1 to x do
12865: LD_ADDR_VAR 0 9
12869: PUSH
12870: DOUBLE
12871: LD_INT 1
12873: DEC
12874: ST_TO_ADDR
12875: LD_VAR 0 13
12879: PUSH
12880: FOR_TO
12881: IFFALSE 13247
// begin InitHc ;
12883: CALL_OW 19
// if not f then
12887: LD_VAR 0 12
12891: NOT
12892: IFFALSE 12981
// begin PrepareHuman ( false , i , skill ) ;
12894: LD_INT 0
12896: PPUSH
12897: LD_VAR 0 8
12901: PPUSH
12902: LD_VAR 0 4
12906: PPUSH
12907: CALL_OW 380
// un := CreateHuman ;
12911: LD_ADDR_VAR 0 14
12915: PUSH
12916: CALL_OW 44
12920: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12921: LD_ADDR_VAR 0 7
12925: PUSH
12926: LD_VAR 0 7
12930: PPUSH
12931: LD_INT 1
12933: PPUSH
12934: LD_VAR 0 14
12938: PPUSH
12939: CALL_OW 2
12943: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12944: LD_VAR 0 14
12948: PPUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 250
12958: PPUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: CALL_OW 251
12968: PPUSH
12969: LD_INT 10
12971: PPUSH
12972: LD_INT 0
12974: PPUSH
12975: CALL_OW 50
// continue ;
12979: GO 12880
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12981: LD_VAR 0 12
12985: PUSH
12986: LD_INT 1
12988: ARRAY
12989: PPUSH
12990: CALL_OW 313
12994: IFFALSE 13022
12996: PUSH
12997: LD_VAR 0 12
13001: PUSH
13002: LD_INT 1
13004: ARRAY
13005: PPUSH
13006: CALL_OW 266
13010: PUSH
13011: LD_INT 32
13013: PUSH
13014: LD_INT 31
13016: PUSH
13017: EMPTY
13018: LIST
13019: LIST
13020: IN
13021: AND
13022: IFTRUE 13043
13024: PUSH
13025: LD_VAR 0 12
13029: PUSH
13030: LD_INT 1
13032: ARRAY
13033: PPUSH
13034: CALL_OW 313
13038: PUSH
13039: LD_INT 6
13041: EQUAL
13042: OR
13043: IFFALSE 13063
// f := Delete ( f , 1 ) ;
13045: LD_ADDR_VAR 0 12
13049: PUSH
13050: LD_VAR 0 12
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 3
13062: ST_TO_ADDR
// if not f then
13063: LD_VAR 0 12
13067: NOT
13068: IFFALSE 13086
// begin x := x + 2 ;
13070: LD_ADDR_VAR 0 13
13074: PUSH
13075: LD_VAR 0 13
13079: PUSH
13080: LD_INT 2
13082: PLUS
13083: ST_TO_ADDR
// continue ;
13084: GO 12880
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13086: LD_VAR 0 12
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: CALL_OW 266
13099: PUSH
13100: LD_INT 5
13102: EQUAL
13103: IFFALSE 13177
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13105: LD_VAR 0 12
13109: PUSH
13110: LD_INT 1
13112: ARRAY
13113: PPUSH
13114: CALL_OW 313
13118: PUSH
13119: LD_INT 3
13121: LESS
13122: IFFALSE 13158
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13124: LD_INT 0
13126: PPUSH
13127: LD_INT 5
13129: PUSH
13130: LD_INT 8
13132: PUSH
13133: LD_INT 9
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: PUSH
13141: LD_VAR 0 17
13145: ARRAY
13146: PPUSH
13147: LD_VAR 0 4
13151: PPUSH
13152: CALL_OW 380
13156: GO 13175
// PrepareHuman ( false , i , skill ) ;
13158: LD_INT 0
13160: PPUSH
13161: LD_VAR 0 8
13165: PPUSH
13166: LD_VAR 0 4
13170: PPUSH
13171: CALL_OW 380
// end else
13175: GO 13194
// PrepareHuman ( false , i , skill ) ;
13177: LD_INT 0
13179: PPUSH
13180: LD_VAR 0 8
13184: PPUSH
13185: LD_VAR 0 4
13189: PPUSH
13190: CALL_OW 380
// un := CreateHuman ;
13194: LD_ADDR_VAR 0 14
13198: PUSH
13199: CALL_OW 44
13203: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13204: LD_ADDR_VAR 0 7
13208: PUSH
13209: LD_VAR 0 7
13213: PPUSH
13214: LD_INT 1
13216: PPUSH
13217: LD_VAR 0 14
13221: PPUSH
13222: CALL_OW 2
13226: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13227: LD_VAR 0 14
13231: PPUSH
13232: LD_VAR 0 12
13236: PUSH
13237: LD_INT 1
13239: ARRAY
13240: PPUSH
13241: CALL_OW 52
// end ;
13245: GO 12880
13247: POP
13248: POP
// end ;
13249: GO 12180
13251: POP
13252: POP
// result := result ^ buildings ;
13253: LD_ADDR_VAR 0 7
13257: PUSH
13258: LD_VAR 0 7
13262: PUSH
13263: LD_VAR 0 18
13267: ADD
13268: ST_TO_ADDR
// end else
13269: GO 13412
// begin for i = 1 to personel do
13271: LD_ADDR_VAR 0 8
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_VAR 0 6
13285: PUSH
13286: FOR_TO
13287: IFFALSE 13410
// begin if i > 4 then
13289: LD_VAR 0 8
13293: PUSH
13294: LD_INT 4
13296: GREATER
13297: IFFALSE 13301
// break ;
13299: GO 13410
// x := personel [ i ] ;
13301: LD_ADDR_VAR 0 13
13305: PUSH
13306: LD_VAR 0 6
13310: PUSH
13311: LD_VAR 0 8
13315: ARRAY
13316: ST_TO_ADDR
// if x = - 1 then
13317: LD_VAR 0 13
13321: PUSH
13322: LD_INT 1
13324: NEG
13325: EQUAL
13326: IFFALSE 13330
// continue ;
13328: GO 13286
// PrepareHuman ( false , i , skill ) ;
13330: LD_INT 0
13332: PPUSH
13333: LD_VAR 0 8
13337: PPUSH
13338: LD_VAR 0 4
13342: PPUSH
13343: CALL_OW 380
// un := CreateHuman ;
13347: LD_ADDR_VAR 0 14
13351: PUSH
13352: CALL_OW 44
13356: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13357: LD_VAR 0 14
13361: PPUSH
13362: LD_VAR 0 1
13366: PPUSH
13367: CALL_OW 250
13371: PPUSH
13372: LD_VAR 0 1
13376: PPUSH
13377: CALL_OW 251
13381: PPUSH
13382: LD_INT 10
13384: PPUSH
13385: LD_INT 0
13387: PPUSH
13388: CALL_OW 50
// result := result ^ un ;
13392: LD_ADDR_VAR 0 7
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: LD_VAR 0 14
13406: ADD
13407: ST_TO_ADDR
// end ;
13408: GO 13286
13410: POP
13411: POP
// end ; end ;
13412: LD_VAR 0 7
13416: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13417: LD_INT 0
13419: PPUSH
13420: PPUSH
13421: PPUSH
13422: PPUSH
13423: PPUSH
13424: PPUSH
13425: PPUSH
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
13434: PPUSH
// result := false ;
13435: LD_ADDR_VAR 0 3
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13443: LD_VAR 0 1
13447: NOT
13448: IFTRUE 13473
13450: PUSH
13451: LD_VAR 0 1
13455: PPUSH
13456: CALL_OW 266
13460: PUSH
13461: LD_INT 32
13463: PUSH
13464: LD_INT 33
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: IN
13471: NOT
13472: OR
13473: IFFALSE 13477
// exit ;
13475: GO 14612
// nat := GetNation ( tower ) ;
13477: LD_ADDR_VAR 0 12
13481: PUSH
13482: LD_VAR 0 1
13486: PPUSH
13487: CALL_OW 248
13491: ST_TO_ADDR
// side := GetSide ( tower ) ;
13492: LD_ADDR_VAR 0 16
13496: PUSH
13497: LD_VAR 0 1
13501: PPUSH
13502: CALL_OW 255
13506: ST_TO_ADDR
// x := GetX ( tower ) ;
13507: LD_ADDR_VAR 0 10
13511: PUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 250
13521: ST_TO_ADDR
// y := GetY ( tower ) ;
13522: LD_ADDR_VAR 0 11
13526: PUSH
13527: LD_VAR 0 1
13531: PPUSH
13532: CALL_OW 251
13536: ST_TO_ADDR
// if not x or not y then
13537: LD_VAR 0 10
13541: NOT
13542: IFTRUE 13551
13544: PUSH
13545: LD_VAR 0 11
13549: NOT
13550: OR
13551: IFFALSE 13555
// exit ;
13553: GO 14612
// weapon := 0 ;
13555: LD_ADDR_VAR 0 18
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// fac_list := [ ] ;
13563: LD_ADDR_VAR 0 17
13567: PUSH
13568: EMPTY
13569: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13570: LD_ADDR_VAR 0 6
13574: PUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 274
13584: PPUSH
13585: LD_VAR 0 2
13589: PPUSH
13590: LD_INT 0
13592: PPUSH
13593: CALL 11147 0 3
13597: PPUSH
13598: LD_INT 30
13600: PUSH
13601: LD_INT 3
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PPUSH
13608: CALL_OW 72
13612: ST_TO_ADDR
// if not factories then
13613: LD_VAR 0 6
13617: NOT
13618: IFFALSE 13622
// exit ;
13620: GO 14612
// for i in factories do
13622: LD_ADDR_VAR 0 8
13626: PUSH
13627: LD_VAR 0 6
13631: PUSH
13632: FOR_IN
13633: IFFALSE 13658
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13635: LD_ADDR_VAR 0 17
13639: PUSH
13640: LD_VAR 0 17
13644: PUSH
13645: LD_VAR 0 8
13649: PPUSH
13650: CALL_OW 478
13654: UNION
13655: ST_TO_ADDR
13656: GO 13632
13658: POP
13659: POP
// if not fac_list then
13660: LD_VAR 0 17
13664: NOT
13665: IFFALSE 13669
// exit ;
13667: GO 14612
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13669: LD_ADDR_VAR 0 5
13673: PUSH
13674: LD_INT 4
13676: PUSH
13677: LD_INT 5
13679: PUSH
13680: LD_INT 9
13682: PUSH
13683: LD_INT 10
13685: PUSH
13686: LD_INT 6
13688: PUSH
13689: LD_INT 7
13691: PUSH
13692: LD_INT 11
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: PUSH
13704: LD_INT 27
13706: PUSH
13707: LD_INT 28
13709: PUSH
13710: LD_INT 26
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 43
13724: PUSH
13725: LD_INT 44
13727: PUSH
13728: LD_INT 46
13730: PUSH
13731: LD_INT 45
13733: PUSH
13734: LD_INT 47
13736: PUSH
13737: LD_INT 49
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: LIST
13752: PUSH
13753: LD_VAR 0 12
13757: ARRAY
13758: ST_TO_ADDR
// list := list isect fac_list ;
13759: LD_ADDR_VAR 0 5
13763: PUSH
13764: LD_VAR 0 5
13768: PUSH
13769: LD_VAR 0 17
13773: ISECT
13774: ST_TO_ADDR
// if not list then
13775: LD_VAR 0 5
13779: NOT
13780: IFFALSE 13784
// exit ;
13782: GO 14612
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13784: LD_VAR 0 12
13788: PUSH
13789: LD_INT 3
13791: EQUAL
13792: IFFALSE 13804
13794: PUSH
13795: LD_INT 49
13797: PUSH
13798: LD_VAR 0 5
13802: IN
13803: AND
13804: IFFALSE 13824
13806: PUSH
13807: LD_INT 31
13809: PPUSH
13810: LD_VAR 0 16
13814: PPUSH
13815: CALL_OW 321
13819: PUSH
13820: LD_INT 2
13822: EQUAL
13823: AND
13824: IFFALSE 13884
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13826: LD_INT 22
13828: PUSH
13829: LD_VAR 0 16
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 35
13840: PUSH
13841: LD_INT 49
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 91
13850: PUSH
13851: LD_VAR 0 1
13855: PUSH
13856: LD_INT 10
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 69
13873: NOT
13874: IFFALSE 13884
// weapon := ru_time_lapser ;
13876: LD_ADDR_VAR 0 18
13880: PUSH
13881: LD_INT 49
13883: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13884: LD_VAR 0 12
13888: PUSH
13889: LD_INT 1
13891: PUSH
13892: LD_INT 2
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: IN
13899: IFFALSE 13923
13901: PUSH
13902: LD_INT 11
13904: PUSH
13905: LD_VAR 0 5
13909: IN
13910: IFTRUE 13922
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_VAR 0 5
13920: IN
13921: OR
13922: AND
13923: IFFALSE 13943
13925: PUSH
13926: LD_INT 6
13928: PPUSH
13929: LD_VAR 0 16
13933: PPUSH
13934: CALL_OW 321
13938: PUSH
13939: LD_INT 2
13941: EQUAL
13942: AND
13943: IFFALSE 14110
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13945: LD_INT 22
13947: PUSH
13948: LD_VAR 0 16
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: LD_INT 35
13962: PUSH
13963: LD_INT 11
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: LD_INT 35
13972: PUSH
13973: LD_INT 30
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 91
13987: PUSH
13988: LD_VAR 0 1
13992: PUSH
13993: LD_INT 18
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 69
14010: NOT
14011: IFFALSE 14087
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_VAR 0 16
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 2
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 32
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 33
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: PUSH
14054: LD_INT 91
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: LD_INT 12
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: PUSH
14075: EMPTY
14076: LIST
14077: PPUSH
14078: CALL_OW 69
14082: PUSH
14083: LD_INT 2
14085: GREATER
14086: AND
14087: IFFALSE 14110
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14089: LD_ADDR_VAR 0 18
14093: PUSH
14094: LD_INT 11
14096: PUSH
14097: LD_INT 30
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: LD_VAR 0 12
14108: ARRAY
14109: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14110: LD_VAR 0 18
14114: NOT
14115: IFFALSE 14135
14117: PUSH
14118: LD_INT 40
14120: PPUSH
14121: LD_VAR 0 16
14125: PPUSH
14126: CALL_OW 321
14130: PUSH
14131: LD_INT 2
14133: EQUAL
14134: AND
14135: IFFALSE 14171
14137: PUSH
14138: LD_INT 7
14140: PUSH
14141: LD_VAR 0 5
14145: IN
14146: IFTRUE 14158
14148: PUSH
14149: LD_INT 28
14151: PUSH
14152: LD_VAR 0 5
14156: IN
14157: OR
14158: IFTRUE 14170
14160: PUSH
14161: LD_INT 45
14163: PUSH
14164: LD_VAR 0 5
14168: IN
14169: OR
14170: AND
14171: IFFALSE 14425
// begin hex := GetHexInfo ( x , y ) ;
14173: LD_ADDR_VAR 0 4
14177: PUSH
14178: LD_VAR 0 10
14182: PPUSH
14183: LD_VAR 0 11
14187: PPUSH
14188: CALL_OW 546
14192: ST_TO_ADDR
// if hex [ 1 ] then
14193: LD_VAR 0 4
14197: PUSH
14198: LD_INT 1
14200: ARRAY
14201: IFFALSE 14205
// exit ;
14203: GO 14612
// height := hex [ 2 ] ;
14205: LD_ADDR_VAR 0 15
14209: PUSH
14210: LD_VAR 0 4
14214: PUSH
14215: LD_INT 2
14217: ARRAY
14218: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14219: LD_ADDR_VAR 0 14
14223: PUSH
14224: LD_INT 0
14226: PUSH
14227: LD_INT 2
14229: PUSH
14230: LD_INT 3
14232: PUSH
14233: LD_INT 5
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: ST_TO_ADDR
// for i in tmp do
14242: LD_ADDR_VAR 0 8
14246: PUSH
14247: LD_VAR 0 14
14251: PUSH
14252: FOR_IN
14253: IFFALSE 14423
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14255: LD_ADDR_VAR 0 9
14259: PUSH
14260: LD_VAR 0 10
14264: PPUSH
14265: LD_VAR 0 8
14269: PPUSH
14270: LD_INT 5
14272: PPUSH
14273: CALL_OW 272
14277: PUSH
14278: LD_VAR 0 11
14282: PPUSH
14283: LD_VAR 0 8
14287: PPUSH
14288: LD_INT 5
14290: PPUSH
14291: CALL_OW 273
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14300: LD_VAR 0 9
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: PPUSH
14309: LD_VAR 0 9
14313: PUSH
14314: LD_INT 2
14316: ARRAY
14317: PPUSH
14318: CALL_OW 488
14322: IFFALSE 14421
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14324: LD_ADDR_VAR 0 4
14328: PUSH
14329: LD_VAR 0 9
14333: PUSH
14334: LD_INT 1
14336: ARRAY
14337: PPUSH
14338: LD_VAR 0 9
14342: PUSH
14343: LD_INT 2
14345: ARRAY
14346: PPUSH
14347: CALL_OW 546
14351: ST_TO_ADDR
// if hex [ 1 ] then
14352: LD_VAR 0 4
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: IFFALSE 14364
// continue ;
14362: GO 14252
// h := hex [ 2 ] ;
14364: LD_ADDR_VAR 0 13
14368: PUSH
14369: LD_VAR 0 4
14373: PUSH
14374: LD_INT 2
14376: ARRAY
14377: ST_TO_ADDR
// if h + 7 < height then
14378: LD_VAR 0 13
14382: PUSH
14383: LD_INT 7
14385: PLUS
14386: PUSH
14387: LD_VAR 0 15
14391: LESS
14392: IFFALSE 14421
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14394: LD_ADDR_VAR 0 18
14398: PUSH
14399: LD_INT 7
14401: PUSH
14402: LD_INT 28
14404: PUSH
14405: LD_INT 45
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_VAR 0 12
14417: ARRAY
14418: ST_TO_ADDR
// break ;
14419: GO 14423
// end ; end ; end ;
14421: GO 14252
14423: POP
14424: POP
// end ; if not weapon then
14425: LD_VAR 0 18
14429: NOT
14430: IFFALSE 14490
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14432: LD_ADDR_VAR 0 5
14436: PUSH
14437: LD_VAR 0 5
14441: PUSH
14442: LD_INT 11
14444: PUSH
14445: LD_INT 30
14447: PUSH
14448: LD_INT 49
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: LIST
14455: DIFF
14456: ST_TO_ADDR
// if not list then
14457: LD_VAR 0 5
14461: NOT
14462: IFFALSE 14466
// exit ;
14464: GO 14612
// weapon := list [ rand ( 1 , list ) ] ;
14466: LD_ADDR_VAR 0 18
14470: PUSH
14471: LD_VAR 0 5
14475: PUSH
14476: LD_INT 1
14478: PPUSH
14479: LD_VAR 0 5
14483: PPUSH
14484: CALL_OW 12
14488: ARRAY
14489: ST_TO_ADDR
// end ; if weapon then
14490: LD_VAR 0 18
14494: IFFALSE 14612
// begin tmp := CostOfWeapon ( weapon ) ;
14496: LD_ADDR_VAR 0 14
14500: PUSH
14501: LD_VAR 0 18
14505: PPUSH
14506: CALL_OW 451
14510: ST_TO_ADDR
// j := GetBase ( tower ) ;
14511: LD_ADDR_VAR 0 9
14515: PUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 274
14525: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14526: LD_VAR 0 9
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 275
14538: PUSH
14539: LD_VAR 0 14
14543: PUSH
14544: LD_INT 1
14546: ARRAY
14547: GREATEREQUAL
14548: IFFALSE 14574
14550: PUSH
14551: LD_VAR 0 9
14555: PPUSH
14556: LD_INT 2
14558: PPUSH
14559: CALL_OW 275
14563: PUSH
14564: LD_VAR 0 14
14568: PUSH
14569: LD_INT 2
14571: ARRAY
14572: GREATEREQUAL
14573: AND
14574: IFFALSE 14600
14576: PUSH
14577: LD_VAR 0 9
14581: PPUSH
14582: LD_INT 3
14584: PPUSH
14585: CALL_OW 275
14589: PUSH
14590: LD_VAR 0 14
14594: PUSH
14595: LD_INT 3
14597: ARRAY
14598: GREATEREQUAL
14599: AND
14600: IFFALSE 14612
// result := weapon ;
14602: LD_ADDR_VAR 0 3
14606: PUSH
14607: LD_VAR 0 18
14611: ST_TO_ADDR
// end ; end ;
14612: LD_VAR 0 3
14616: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14617: LD_INT 0
14619: PPUSH
14620: PPUSH
// result := true ;
14621: LD_ADDR_VAR 0 3
14625: PUSH
14626: LD_INT 1
14628: ST_TO_ADDR
// if array1 = array2 then
14629: LD_VAR 0 1
14633: PUSH
14634: LD_VAR 0 2
14638: EQUAL
14639: IFFALSE 14699
// begin for i = 1 to array1 do
14641: LD_ADDR_VAR 0 4
14645: PUSH
14646: DOUBLE
14647: LD_INT 1
14649: DEC
14650: ST_TO_ADDR
14651: LD_VAR 0 1
14655: PUSH
14656: FOR_TO
14657: IFFALSE 14695
// if array1 [ i ] <> array2 [ i ] then
14659: LD_VAR 0 1
14663: PUSH
14664: LD_VAR 0 4
14668: ARRAY
14669: PUSH
14670: LD_VAR 0 2
14674: PUSH
14675: LD_VAR 0 4
14679: ARRAY
14680: NONEQUAL
14681: IFFALSE 14693
// begin result := false ;
14683: LD_ADDR_VAR 0 3
14687: PUSH
14688: LD_INT 0
14690: ST_TO_ADDR
// break ;
14691: GO 14695
// end ;
14693: GO 14656
14695: POP
14696: POP
// end else
14697: GO 14707
// result := false ;
14699: LD_ADDR_VAR 0 3
14703: PUSH
14704: LD_INT 0
14706: ST_TO_ADDR
// end ;
14707: LD_VAR 0 3
14711: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14712: LD_INT 0
14714: PPUSH
14715: PPUSH
// if not array1 or not array2 then
14716: LD_VAR 0 1
14720: NOT
14721: IFTRUE 14730
14723: PUSH
14724: LD_VAR 0 2
14728: NOT
14729: OR
14730: IFFALSE 14734
// exit ;
14732: GO 14798
// result := true ;
14734: LD_ADDR_VAR 0 3
14738: PUSH
14739: LD_INT 1
14741: ST_TO_ADDR
// for i = 1 to array1 do
14742: LD_ADDR_VAR 0 4
14746: PUSH
14747: DOUBLE
14748: LD_INT 1
14750: DEC
14751: ST_TO_ADDR
14752: LD_VAR 0 1
14756: PUSH
14757: FOR_TO
14758: IFFALSE 14796
// if array1 [ i ] <> array2 [ i ] then
14760: LD_VAR 0 1
14764: PUSH
14765: LD_VAR 0 4
14769: ARRAY
14770: PUSH
14771: LD_VAR 0 2
14775: PUSH
14776: LD_VAR 0 4
14780: ARRAY
14781: NONEQUAL
14782: IFFALSE 14794
// begin result := false ;
14784: LD_ADDR_VAR 0 3
14788: PUSH
14789: LD_INT 0
14791: ST_TO_ADDR
// break ;
14792: GO 14796
// end ;
14794: GO 14757
14796: POP
14797: POP
// end ;
14798: LD_VAR 0 3
14802: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14803: LD_INT 0
14805: PPUSH
14806: PPUSH
14807: PPUSH
// pom := GetBase ( fac ) ;
14808: LD_ADDR_VAR 0 5
14812: PUSH
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 274
14822: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14823: LD_ADDR_VAR 0 4
14827: PUSH
14828: LD_VAR 0 2
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PPUSH
14837: LD_VAR 0 2
14841: PUSH
14842: LD_INT 2
14844: ARRAY
14845: PPUSH
14846: LD_VAR 0 2
14850: PUSH
14851: LD_INT 3
14853: ARRAY
14854: PPUSH
14855: LD_VAR 0 2
14859: PUSH
14860: LD_INT 4
14862: ARRAY
14863: PPUSH
14864: CALL_OW 449
14868: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14869: LD_ADDR_VAR 0 3
14873: PUSH
14874: LD_VAR 0 5
14878: PPUSH
14879: LD_INT 1
14881: PPUSH
14882: CALL_OW 275
14886: PUSH
14887: LD_VAR 0 4
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: GREATEREQUAL
14896: IFFALSE 14922
14898: PUSH
14899: LD_VAR 0 5
14903: PPUSH
14904: LD_INT 2
14906: PPUSH
14907: CALL_OW 275
14911: PUSH
14912: LD_VAR 0 4
14916: PUSH
14917: LD_INT 2
14919: ARRAY
14920: GREATEREQUAL
14921: AND
14922: IFFALSE 14948
14924: PUSH
14925: LD_VAR 0 5
14929: PPUSH
14930: LD_INT 3
14932: PPUSH
14933: CALL_OW 275
14937: PUSH
14938: LD_VAR 0 4
14942: PUSH
14943: LD_INT 3
14945: ARRAY
14946: GREATEREQUAL
14947: AND
14948: ST_TO_ADDR
// end ;
14949: LD_VAR 0 3
14953: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14954: LD_INT 0
14956: PPUSH
14957: PPUSH
14958: PPUSH
14959: PPUSH
// pom := GetBase ( building ) ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 274
14974: ST_TO_ADDR
// if not pom then
14975: LD_VAR 0 3
14979: NOT
14980: IFFALSE 14984
// exit ;
14982: GO 15158
// btype := GetBType ( building ) ;
14984: LD_ADDR_VAR 0 5
14988: PUSH
14989: LD_VAR 0 1
14993: PPUSH
14994: CALL_OW 266
14998: ST_TO_ADDR
// if btype = b_armoury then
14999: LD_VAR 0 5
15003: PUSH
15004: LD_INT 4
15006: EQUAL
15007: IFFALSE 15017
// btype := b_barracks ;
15009: LD_ADDR_VAR 0 5
15013: PUSH
15014: LD_INT 5
15016: ST_TO_ADDR
// if btype = b_depot then
15017: LD_VAR 0 5
15021: PUSH
15022: LD_INT 0
15024: EQUAL
15025: IFFALSE 15035
// btype := b_warehouse ;
15027: LD_ADDR_VAR 0 5
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
// if btype = b_workshop then
15035: LD_VAR 0 5
15039: PUSH
15040: LD_INT 2
15042: EQUAL
15043: IFFALSE 15053
// btype := b_factory ;
15045: LD_ADDR_VAR 0 5
15049: PUSH
15050: LD_INT 3
15052: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15053: LD_ADDR_VAR 0 4
15057: PUSH
15058: LD_VAR 0 5
15062: PPUSH
15063: LD_VAR 0 1
15067: PPUSH
15068: CALL_OW 248
15072: PPUSH
15073: CALL_OW 450
15077: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 3
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 275
15095: PUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 1
15103: ARRAY
15104: GREATEREQUAL
15105: IFFALSE 15131
15107: PUSH
15108: LD_VAR 0 3
15112: PPUSH
15113: LD_INT 2
15115: PPUSH
15116: CALL_OW 275
15120: PUSH
15121: LD_VAR 0 4
15125: PUSH
15126: LD_INT 2
15128: ARRAY
15129: GREATEREQUAL
15130: AND
15131: IFFALSE 15157
15133: PUSH
15134: LD_VAR 0 3
15138: PPUSH
15139: LD_INT 3
15141: PPUSH
15142: CALL_OW 275
15146: PUSH
15147: LD_VAR 0 4
15151: PUSH
15152: LD_INT 3
15154: ARRAY
15155: GREATEREQUAL
15156: AND
15157: ST_TO_ADDR
// end ;
15158: LD_VAR 0 2
15162: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15163: LD_INT 0
15165: PPUSH
15166: PPUSH
15167: PPUSH
// pom := GetBase ( building ) ;
15168: LD_ADDR_VAR 0 4
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 274
15182: ST_TO_ADDR
// if not pom then
15183: LD_VAR 0 4
15187: NOT
15188: IFFALSE 15192
// exit ;
15190: GO 15297
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15192: LD_ADDR_VAR 0 5
15196: PUSH
15197: LD_VAR 0 2
15201: PPUSH
15202: LD_VAR 0 1
15206: PPUSH
15207: CALL_OW 248
15211: PPUSH
15212: CALL_OW 450
15216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_VAR 0 4
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL_OW 275
15234: PUSH
15235: LD_VAR 0 5
15239: PUSH
15240: LD_INT 1
15242: ARRAY
15243: GREATEREQUAL
15244: IFFALSE 15270
15246: PUSH
15247: LD_VAR 0 4
15251: PPUSH
15252: LD_INT 2
15254: PPUSH
15255: CALL_OW 275
15259: PUSH
15260: LD_VAR 0 5
15264: PUSH
15265: LD_INT 2
15267: ARRAY
15268: GREATEREQUAL
15269: AND
15270: IFFALSE 15296
15272: PUSH
15273: LD_VAR 0 4
15277: PPUSH
15278: LD_INT 3
15280: PPUSH
15281: CALL_OW 275
15285: PUSH
15286: LD_VAR 0 5
15290: PUSH
15291: LD_INT 3
15293: ARRAY
15294: GREATEREQUAL
15295: AND
15296: ST_TO_ADDR
// end ;
15297: LD_VAR 0 3
15301: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15302: LD_INT 0
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
// result := false ;
15315: LD_ADDR_VAR 0 8
15319: PUSH
15320: LD_INT 0
15322: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15323: LD_VAR 0 5
15327: NOT
15328: IFTRUE 15337
15330: PUSH
15331: LD_VAR 0 1
15335: NOT
15336: OR
15337: IFTRUE 15346
15339: PUSH
15340: LD_VAR 0 2
15344: NOT
15345: OR
15346: IFTRUE 15355
15348: PUSH
15349: LD_VAR 0 3
15353: NOT
15354: OR
15355: IFFALSE 15359
// exit ;
15357: GO 16185
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15359: LD_ADDR_VAR 0 14
15363: PUSH
15364: LD_VAR 0 1
15368: PPUSH
15369: LD_VAR 0 2
15373: PPUSH
15374: LD_VAR 0 3
15378: PPUSH
15379: LD_VAR 0 4
15383: PPUSH
15384: LD_VAR 0 5
15388: PUSH
15389: LD_INT 1
15391: ARRAY
15392: PPUSH
15393: CALL_OW 248
15397: PPUSH
15398: LD_INT 0
15400: PPUSH
15401: CALL 17466 0 6
15405: ST_TO_ADDR
// if not hexes then
15406: LD_VAR 0 14
15410: NOT
15411: IFFALSE 15415
// exit ;
15413: GO 16185
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15415: LD_ADDR_VAR 0 17
15419: PUSH
15420: LD_VAR 0 5
15424: PPUSH
15425: LD_INT 22
15427: PUSH
15428: LD_VAR 0 13
15432: PPUSH
15433: CALL_OW 255
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 30
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 30
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PPUSH
15474: CALL_OW 72
15478: ST_TO_ADDR
// for i = 1 to hexes do
15479: LD_ADDR_VAR 0 9
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_VAR 0 14
15493: PUSH
15494: FOR_TO
15495: IFFALSE 16183
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15497: LD_ADDR_VAR 0 13
15501: PUSH
15502: LD_VAR 0 14
15506: PUSH
15507: LD_VAR 0 9
15511: ARRAY
15512: PUSH
15513: LD_INT 1
15515: ARRAY
15516: PPUSH
15517: LD_VAR 0 14
15521: PUSH
15522: LD_VAR 0 9
15526: ARRAY
15527: PUSH
15528: LD_INT 2
15530: ARRAY
15531: PPUSH
15532: CALL_OW 428
15536: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15537: LD_VAR 0 14
15541: PUSH
15542: LD_VAR 0 9
15546: ARRAY
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PPUSH
15552: LD_VAR 0 14
15556: PUSH
15557: LD_VAR 0 9
15561: ARRAY
15562: PUSH
15563: LD_INT 2
15565: ARRAY
15566: PPUSH
15567: CALL_OW 351
15571: IFTRUE 15610
15573: PUSH
15574: LD_VAR 0 14
15578: PUSH
15579: LD_VAR 0 9
15583: ARRAY
15584: PUSH
15585: LD_INT 1
15587: ARRAY
15588: PPUSH
15589: LD_VAR 0 14
15593: PUSH
15594: LD_VAR 0 9
15598: ARRAY
15599: PUSH
15600: LD_INT 2
15602: ARRAY
15603: PPUSH
15604: CALL_OW 488
15608: NOT
15609: OR
15610: IFTRUE 15627
15612: PUSH
15613: LD_VAR 0 13
15617: PPUSH
15618: CALL_OW 247
15622: PUSH
15623: LD_INT 3
15625: EQUAL
15626: OR
15627: IFFALSE 15633
// exit ;
15629: POP
15630: POP
15631: GO 16185
// if not tmp then
15633: LD_VAR 0 13
15637: NOT
15638: IFFALSE 15642
// continue ;
15640: GO 15494
// result := true ;
15642: LD_ADDR_VAR 0 8
15646: PUSH
15647: LD_INT 1
15649: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15650: LD_VAR 0 6
15654: IFFALSE 15671
15656: PUSH
15657: LD_VAR 0 13
15661: PPUSH
15662: CALL_OW 247
15666: PUSH
15667: LD_INT 2
15669: EQUAL
15670: AND
15671: IFFALSE 15688
15673: PUSH
15674: LD_VAR 0 13
15678: PPUSH
15679: CALL_OW 263
15683: PUSH
15684: LD_INT 1
15686: EQUAL
15687: AND
15688: IFFALSE 15852
// begin if IsDrivenBy ( tmp ) then
15690: LD_VAR 0 13
15694: PPUSH
15695: CALL_OW 311
15699: IFFALSE 15703
// continue ;
15701: GO 15494
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15703: LD_VAR 0 6
15707: PPUSH
15708: LD_INT 3
15710: PUSH
15711: LD_INT 60
15713: PUSH
15714: EMPTY
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 3
15723: PUSH
15724: LD_INT 55
15726: PUSH
15727: EMPTY
15728: LIST
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PPUSH
15738: CALL_OW 72
15742: IFFALSE 15850
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15744: LD_ADDR_VAR 0 18
15748: PUSH
15749: LD_VAR 0 6
15753: PPUSH
15754: LD_INT 3
15756: PUSH
15757: LD_INT 60
15759: PUSH
15760: EMPTY
15761: LIST
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 3
15769: PUSH
15770: LD_INT 55
15772: PUSH
15773: EMPTY
15774: LIST
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PPUSH
15784: CALL_OW 72
15788: PUSH
15789: LD_INT 1
15791: ARRAY
15792: ST_TO_ADDR
// if IsInUnit ( driver ) then
15793: LD_VAR 0 18
15797: PPUSH
15798: CALL_OW 310
15802: IFFALSE 15813
// ComExit ( driver ) ;
15804: LD_VAR 0 18
15808: PPUSH
15809: CALL 41456 0 1
// AddComEnterUnit ( driver , tmp ) ;
15813: LD_VAR 0 18
15817: PPUSH
15818: LD_VAR 0 13
15822: PPUSH
15823: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15827: LD_VAR 0 18
15831: PPUSH
15832: LD_VAR 0 7
15836: PPUSH
15837: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15841: LD_VAR 0 18
15845: PPUSH
15846: CALL_OW 181
// end ; continue ;
15850: GO 15494
// end ; if not cleaners or not tmp in cleaners then
15852: LD_VAR 0 6
15856: NOT
15857: IFTRUE 15872
15859: PUSH
15860: LD_VAR 0 13
15864: PUSH
15865: LD_VAR 0 6
15869: IN
15870: NOT
15871: OR
15872: IFFALSE 16181
// begin if dep then
15874: LD_VAR 0 17
15878: IFFALSE 16014
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15880: LD_ADDR_VAR 0 16
15884: PUSH
15885: LD_VAR 0 17
15889: PUSH
15890: LD_INT 1
15892: ARRAY
15893: PPUSH
15894: CALL_OW 250
15898: PPUSH
15899: LD_VAR 0 17
15903: PUSH
15904: LD_INT 1
15906: ARRAY
15907: PPUSH
15908: CALL_OW 254
15912: PPUSH
15913: LD_INT 5
15915: PPUSH
15916: CALL_OW 272
15920: PUSH
15921: LD_VAR 0 17
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: PPUSH
15930: CALL_OW 251
15934: PPUSH
15935: LD_VAR 0 17
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PPUSH
15944: CALL_OW 254
15948: PPUSH
15949: LD_INT 5
15951: PPUSH
15952: CALL_OW 273
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15961: LD_VAR 0 16
15965: PUSH
15966: LD_INT 1
15968: ARRAY
15969: PPUSH
15970: LD_VAR 0 16
15974: PUSH
15975: LD_INT 2
15977: ARRAY
15978: PPUSH
15979: CALL_OW 488
15983: IFFALSE 16014
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15985: LD_VAR 0 13
15989: PPUSH
15990: LD_VAR 0 16
15994: PUSH
15995: LD_INT 1
15997: ARRAY
15998: PPUSH
15999: LD_VAR 0 16
16003: PUSH
16004: LD_INT 2
16006: ARRAY
16007: PPUSH
16008: CALL_OW 111
// continue ;
16012: GO 15494
// end ; end ; r := GetDir ( tmp ) ;
16014: LD_ADDR_VAR 0 15
16018: PUSH
16019: LD_VAR 0 13
16023: PPUSH
16024: CALL_OW 254
16028: ST_TO_ADDR
// if r = 5 then
16029: LD_VAR 0 15
16033: PUSH
16034: LD_INT 5
16036: EQUAL
16037: IFFALSE 16047
// r := 0 ;
16039: LD_ADDR_VAR 0 15
16043: PUSH
16044: LD_INT 0
16046: ST_TO_ADDR
// for j = r to 5 do
16047: LD_ADDR_VAR 0 10
16051: PUSH
16052: DOUBLE
16053: LD_VAR 0 15
16057: DEC
16058: ST_TO_ADDR
16059: LD_INT 5
16061: PUSH
16062: FOR_TO
16063: IFFALSE 16179
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16065: LD_ADDR_VAR 0 11
16069: PUSH
16070: LD_VAR 0 13
16074: PPUSH
16075: CALL_OW 250
16079: PPUSH
16080: LD_VAR 0 10
16084: PPUSH
16085: LD_INT 2
16087: PPUSH
16088: CALL_OW 272
16092: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16093: LD_ADDR_VAR 0 12
16097: PUSH
16098: LD_VAR 0 13
16102: PPUSH
16103: CALL_OW 251
16107: PPUSH
16108: LD_VAR 0 10
16112: PPUSH
16113: LD_INT 2
16115: PPUSH
16116: CALL_OW 273
16120: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16121: LD_VAR 0 11
16125: PPUSH
16126: LD_VAR 0 12
16130: PPUSH
16131: CALL_OW 488
16135: IFFALSE 16154
16137: PUSH
16138: LD_VAR 0 11
16142: PPUSH
16143: LD_VAR 0 12
16147: PPUSH
16148: CALL_OW 428
16152: NOT
16153: AND
16154: IFFALSE 16177
// begin ComMoveXY ( tmp , _x , _y ) ;
16156: LD_VAR 0 13
16160: PPUSH
16161: LD_VAR 0 11
16165: PPUSH
16166: LD_VAR 0 12
16170: PPUSH
16171: CALL_OW 111
// break ;
16175: GO 16179
// end ; end ;
16177: GO 16062
16179: POP
16180: POP
// end ; end ;
16181: GO 15494
16183: POP
16184: POP
// end ;
16185: LD_VAR 0 8
16189: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16190: LD_INT 0
16192: PPUSH
// result := true ;
16193: LD_ADDR_VAR 0 3
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16201: LD_VAR 0 2
16205: PUSH
16206: LD_INT 24
16208: DOUBLE
16209: EQUAL
16210: IFTRUE 16220
16212: LD_INT 33
16214: DOUBLE
16215: EQUAL
16216: IFTRUE 16220
16218: GO 16245
16220: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16221: LD_ADDR_VAR 0 3
16225: PUSH
16226: LD_INT 32
16228: PPUSH
16229: LD_VAR 0 1
16233: PPUSH
16234: CALL_OW 321
16238: PUSH
16239: LD_INT 2
16241: EQUAL
16242: ST_TO_ADDR
16243: GO 16561
16245: LD_INT 20
16247: DOUBLE
16248: EQUAL
16249: IFTRUE 16253
16251: GO 16278
16253: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: LD_INT 6
16261: PPUSH
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 321
16271: PUSH
16272: LD_INT 2
16274: EQUAL
16275: ST_TO_ADDR
16276: GO 16561
16278: LD_INT 22
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16292
16284: LD_INT 36
16286: DOUBLE
16287: EQUAL
16288: IFTRUE 16292
16290: GO 16317
16292: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: LD_INT 15
16300: PPUSH
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 321
16310: PUSH
16311: LD_INT 2
16313: EQUAL
16314: ST_TO_ADDR
16315: GO 16561
16317: LD_INT 30
16319: DOUBLE
16320: EQUAL
16321: IFTRUE 16325
16323: GO 16350
16325: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16326: LD_ADDR_VAR 0 3
16330: PUSH
16331: LD_INT 20
16333: PPUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 321
16343: PUSH
16344: LD_INT 2
16346: EQUAL
16347: ST_TO_ADDR
16348: GO 16561
16350: LD_INT 28
16352: DOUBLE
16353: EQUAL
16354: IFTRUE 16364
16356: LD_INT 21
16358: DOUBLE
16359: EQUAL
16360: IFTRUE 16364
16362: GO 16389
16364: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16365: LD_ADDR_VAR 0 3
16369: PUSH
16370: LD_INT 21
16372: PPUSH
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 321
16382: PUSH
16383: LD_INT 2
16385: EQUAL
16386: ST_TO_ADDR
16387: GO 16561
16389: LD_INT 16
16391: DOUBLE
16392: EQUAL
16393: IFTRUE 16397
16395: GO 16422
16397: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 84
16405: PPUSH
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL_OW 321
16415: PUSH
16416: LD_INT 2
16418: EQUAL
16419: ST_TO_ADDR
16420: GO 16561
16422: LD_INT 19
16424: DOUBLE
16425: EQUAL
16426: IFTRUE 16436
16428: LD_INT 23
16430: DOUBLE
16431: EQUAL
16432: IFTRUE 16436
16434: GO 16461
16436: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_INT 83
16444: PPUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 321
16454: PUSH
16455: LD_INT 2
16457: EQUAL
16458: ST_TO_ADDR
16459: GO 16561
16461: LD_INT 17
16463: DOUBLE
16464: EQUAL
16465: IFTRUE 16469
16467: GO 16494
16469: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_INT 39
16477: PPUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: CALL_OW 321
16487: PUSH
16488: LD_INT 2
16490: EQUAL
16491: ST_TO_ADDR
16492: GO 16561
16494: LD_INT 18
16496: DOUBLE
16497: EQUAL
16498: IFTRUE 16502
16500: GO 16527
16502: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16503: LD_ADDR_VAR 0 3
16507: PUSH
16508: LD_INT 40
16510: PPUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 321
16520: PUSH
16521: LD_INT 2
16523: EQUAL
16524: ST_TO_ADDR
16525: GO 16561
16527: LD_INT 27
16529: DOUBLE
16530: EQUAL
16531: IFTRUE 16535
16533: GO 16560
16535: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16536: LD_ADDR_VAR 0 3
16540: PUSH
16541: LD_INT 35
16543: PPUSH
16544: LD_VAR 0 1
16548: PPUSH
16549: CALL_OW 321
16553: PUSH
16554: LD_INT 2
16556: EQUAL
16557: ST_TO_ADDR
16558: GO 16561
16560: POP
// end ;
16561: LD_VAR 0 3
16565: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16566: LD_INT 0
16568: PPUSH
16569: PPUSH
16570: PPUSH
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
16575: PPUSH
16576: PPUSH
16577: PPUSH
16578: PPUSH
// result := false ;
16579: LD_ADDR_VAR 0 6
16583: PUSH
16584: LD_INT 0
16586: ST_TO_ADDR
// if btype = b_depot then
16587: LD_VAR 0 2
16591: PUSH
16592: LD_INT 0
16594: EQUAL
16595: IFFALSE 16607
// begin result := true ;
16597: LD_ADDR_VAR 0 6
16601: PUSH
16602: LD_INT 1
16604: ST_TO_ADDR
// exit ;
16605: GO 17461
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16607: LD_VAR 0 1
16611: NOT
16612: IFTRUE 16637
16614: PUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: CALL_OW 266
16624: PUSH
16625: LD_INT 0
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: IN
16635: NOT
16636: OR
16637: IFTRUE 16646
16639: PUSH
16640: LD_VAR 0 2
16644: NOT
16645: OR
16646: IFTRUE 16682
16648: PUSH
16649: LD_VAR 0 5
16653: PUSH
16654: LD_INT 0
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: LD_INT 4
16668: PUSH
16669: LD_INT 5
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: IN
16680: NOT
16681: OR
16682: IFTRUE 16701
16684: PUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: LD_VAR 0 4
16694: PPUSH
16695: CALL_OW 488
16699: NOT
16700: OR
16701: IFFALSE 16705
// exit ;
16703: GO 17461
// side := GetSide ( depot ) ;
16705: LD_ADDR_VAR 0 9
16709: PUSH
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 255
16719: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16720: LD_VAR 0 9
16724: PPUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL 16190 0 2
16734: NOT
16735: IFFALSE 16739
// exit ;
16737: GO 17461
// pom := GetBase ( depot ) ;
16739: LD_ADDR_VAR 0 10
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 274
16753: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16754: LD_ADDR_VAR 0 11
16758: PUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: LD_VAR 0 1
16768: PPUSH
16769: CALL_OW 248
16773: PPUSH
16774: CALL_OW 450
16778: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16779: LD_VAR 0 10
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 275
16791: PUSH
16792: LD_VAR 0 11
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: GREATEREQUAL
16801: IFFALSE 16827
16803: PUSH
16804: LD_VAR 0 10
16808: PPUSH
16809: LD_INT 2
16811: PPUSH
16812: CALL_OW 275
16816: PUSH
16817: LD_VAR 0 11
16821: PUSH
16822: LD_INT 2
16824: ARRAY
16825: GREATEREQUAL
16826: AND
16827: IFFALSE 16853
16829: PUSH
16830: LD_VAR 0 10
16834: PPUSH
16835: LD_INT 3
16837: PPUSH
16838: CALL_OW 275
16842: PUSH
16843: LD_VAR 0 11
16847: PUSH
16848: LD_INT 3
16850: ARRAY
16851: GREATEREQUAL
16852: AND
16853: NOT
16854: IFFALSE 16858
// exit ;
16856: GO 17461
// if GetBType ( depot ) = b_depot then
16858: LD_VAR 0 1
16862: PPUSH
16863: CALL_OW 266
16867: PUSH
16868: LD_INT 0
16870: EQUAL
16871: IFFALSE 16883
// dist := 28 else
16873: LD_ADDR_VAR 0 14
16877: PUSH
16878: LD_INT 28
16880: ST_TO_ADDR
16881: GO 16891
// dist := 36 ;
16883: LD_ADDR_VAR 0 14
16887: PUSH
16888: LD_INT 36
16890: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_VAR 0 3
16900: PPUSH
16901: LD_VAR 0 4
16905: PPUSH
16906: CALL_OW 297
16910: PUSH
16911: LD_VAR 0 14
16915: GREATER
16916: IFFALSE 16920
// exit ;
16918: GO 17461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16920: LD_ADDR_VAR 0 12
16924: PUSH
16925: LD_VAR 0 2
16929: PPUSH
16930: LD_VAR 0 3
16934: PPUSH
16935: LD_VAR 0 4
16939: PPUSH
16940: LD_VAR 0 5
16944: PPUSH
16945: LD_VAR 0 1
16949: PPUSH
16950: CALL_OW 248
16954: PPUSH
16955: LD_INT 0
16957: PPUSH
16958: CALL 17466 0 6
16962: ST_TO_ADDR
// if not hexes then
16963: LD_VAR 0 12
16967: NOT
16968: IFFALSE 16972
// exit ;
16970: GO 17461
// hex := GetHexInfo ( x , y ) ;
16972: LD_ADDR_VAR 0 15
16976: PUSH
16977: LD_VAR 0 3
16981: PPUSH
16982: LD_VAR 0 4
16986: PPUSH
16987: CALL_OW 546
16991: ST_TO_ADDR
// if hex [ 1 ] then
16992: LD_VAR 0 15
16996: PUSH
16997: LD_INT 1
16999: ARRAY
17000: IFFALSE 17004
// exit ;
17002: GO 17461
// height := hex [ 2 ] ;
17004: LD_ADDR_VAR 0 13
17008: PUSH
17009: LD_VAR 0 15
17013: PUSH
17014: LD_INT 2
17016: ARRAY
17017: ST_TO_ADDR
// for i = 1 to hexes do
17018: LD_ADDR_VAR 0 7
17022: PUSH
17023: DOUBLE
17024: LD_INT 1
17026: DEC
17027: ST_TO_ADDR
17028: LD_VAR 0 12
17032: PUSH
17033: FOR_TO
17034: IFFALSE 17378
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17036: LD_VAR 0 12
17040: PUSH
17041: LD_VAR 0 7
17045: ARRAY
17046: PUSH
17047: LD_INT 1
17049: ARRAY
17050: PPUSH
17051: LD_VAR 0 12
17055: PUSH
17056: LD_VAR 0 7
17060: ARRAY
17061: PUSH
17062: LD_INT 2
17064: ARRAY
17065: PPUSH
17066: CALL_OW 488
17070: NOT
17071: IFTRUE 17113
17073: PUSH
17074: LD_VAR 0 12
17078: PUSH
17079: LD_VAR 0 7
17083: ARRAY
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: LD_VAR 0 12
17093: PUSH
17094: LD_VAR 0 7
17098: ARRAY
17099: PUSH
17100: LD_INT 2
17102: ARRAY
17103: PPUSH
17104: CALL_OW 428
17108: PUSH
17109: LD_INT 0
17111: GREATER
17112: OR
17113: IFTRUE 17151
17115: PUSH
17116: LD_VAR 0 12
17120: PUSH
17121: LD_VAR 0 7
17125: ARRAY
17126: PUSH
17127: LD_INT 1
17129: ARRAY
17130: PPUSH
17131: LD_VAR 0 12
17135: PUSH
17136: LD_VAR 0 7
17140: ARRAY
17141: PUSH
17142: LD_INT 2
17144: ARRAY
17145: PPUSH
17146: CALL_OW 351
17150: OR
17151: IFFALSE 17157
// exit ;
17153: POP
17154: POP
17155: GO 17461
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17157: LD_ADDR_VAR 0 8
17161: PUSH
17162: LD_VAR 0 12
17166: PUSH
17167: LD_VAR 0 7
17171: ARRAY
17172: PUSH
17173: LD_INT 1
17175: ARRAY
17176: PPUSH
17177: LD_VAR 0 12
17181: PUSH
17182: LD_VAR 0 7
17186: ARRAY
17187: PUSH
17188: LD_INT 2
17190: ARRAY
17191: PPUSH
17192: CALL_OW 546
17196: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17197: LD_VAR 0 8
17201: PUSH
17202: LD_INT 1
17204: ARRAY
17205: IFTRUE 17227
17207: PUSH
17208: LD_VAR 0 8
17212: PUSH
17213: LD_INT 2
17215: ARRAY
17216: PUSH
17217: LD_VAR 0 13
17221: PUSH
17222: LD_INT 2
17224: PLUS
17225: GREATER
17226: OR
17227: IFTRUE 17249
17229: PUSH
17230: LD_VAR 0 8
17234: PUSH
17235: LD_INT 2
17237: ARRAY
17238: PUSH
17239: LD_VAR 0 13
17243: PUSH
17244: LD_INT 2
17246: MINUS
17247: LESS
17248: OR
17249: IFTRUE 17317
17251: PUSH
17252: LD_VAR 0 8
17256: PUSH
17257: LD_INT 3
17259: ARRAY
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: LD_INT 8
17266: PUSH
17267: LD_INT 9
17269: PUSH
17270: LD_INT 10
17272: PUSH
17273: LD_INT 11
17275: PUSH
17276: LD_INT 12
17278: PUSH
17279: LD_INT 13
17281: PUSH
17282: LD_INT 16
17284: PUSH
17285: LD_INT 17
17287: PUSH
17288: LD_INT 18
17290: PUSH
17291: LD_INT 19
17293: PUSH
17294: LD_INT 20
17296: PUSH
17297: LD_INT 21
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: IN
17315: NOT
17316: OR
17317: IFTRUE 17330
17319: PUSH
17320: LD_VAR 0 8
17324: PUSH
17325: LD_INT 5
17327: ARRAY
17328: NOT
17329: OR
17330: IFTRUE 17370
17332: PUSH
17333: LD_VAR 0 8
17337: PUSH
17338: LD_INT 6
17340: ARRAY
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 7
17350: PUSH
17351: LD_INT 9
17353: PUSH
17354: LD_INT 10
17356: PUSH
17357: LD_INT 11
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: IN
17368: NOT
17369: OR
17370: IFFALSE 17376
// exit ;
17372: POP
17373: POP
17374: GO 17461
// end ;
17376: GO 17033
17378: POP
17379: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17380: LD_VAR 0 9
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_VAR 0 4
17394: PPUSH
17395: LD_INT 20
17397: PPUSH
17398: CALL 9280 0 4
17402: PUSH
17403: LD_INT 4
17405: ARRAY
17406: IFFALSE 17410
// exit ;
17408: GO 17461
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17410: LD_VAR 0 2
17414: PUSH
17415: LD_INT 29
17417: PUSH
17418: LD_INT 30
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: IN
17425: IFFALSE 17449
17427: PUSH
17428: LD_VAR 0 3
17432: PPUSH
17433: LD_VAR 0 4
17437: PPUSH
17438: LD_VAR 0 9
17442: PPUSH
17443: CALL_OW 440
17447: NOT
17448: AND
17449: IFFALSE 17453
// exit ;
17451: GO 17461
// result := true ;
17453: LD_ADDR_VAR 0 6
17457: PUSH
17458: LD_INT 1
17460: ST_TO_ADDR
// end ;
17461: LD_VAR 0 6
17465: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17466: LD_INT 0
17468: PPUSH
17469: PPUSH
17470: PPUSH
17471: PPUSH
17472: PPUSH
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
// result = [ ] ;
17526: LD_ADDR_VAR 0 7
17530: PUSH
17531: EMPTY
17532: ST_TO_ADDR
// temp_list = [ ] ;
17533: LD_ADDR_VAR 0 9
17537: PUSH
17538: EMPTY
17539: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17540: LD_VAR 0 4
17544: PUSH
17545: LD_INT 0
17547: PUSH
17548: LD_INT 1
17550: PUSH
17551: LD_INT 2
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 4
17559: PUSH
17560: LD_INT 5
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: IN
17571: NOT
17572: IFTRUE 17615
17574: PUSH
17575: LD_VAR 0 1
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: IN
17590: IFFALSE 17614
17592: PUSH
17593: LD_VAR 0 5
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: LD_INT 2
17603: PUSH
17604: LD_INT 3
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: IN
17612: NOT
17613: AND
17614: OR
17615: IFFALSE 17619
// exit ;
17617: GO 36018
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17619: LD_VAR 0 1
17623: PUSH
17624: LD_INT 6
17626: PUSH
17627: LD_INT 7
17629: PUSH
17630: LD_INT 8
17632: PUSH
17633: LD_INT 13
17635: PUSH
17636: LD_INT 12
17638: PUSH
17639: LD_INT 15
17641: PUSH
17642: LD_INT 11
17644: PUSH
17645: LD_INT 14
17647: PUSH
17648: LD_INT 10
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: IN
17662: IFFALSE 17672
// btype = b_lab ;
17664: LD_ADDR_VAR 0 1
17668: PUSH
17669: LD_INT 6
17671: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17672: LD_VAR 0 6
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: IN
17691: NOT
17692: IFTRUE 17760
17694: PUSH
17695: LD_VAR 0 1
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: LD_INT 2
17708: PUSH
17709: LD_INT 3
17711: PUSH
17712: LD_INT 6
17714: PUSH
17715: LD_INT 36
17717: PUSH
17718: LD_INT 4
17720: PUSH
17721: LD_INT 5
17723: PUSH
17724: LD_INT 31
17726: PUSH
17727: LD_INT 32
17729: PUSH
17730: LD_INT 33
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: IN
17746: NOT
17747: IFFALSE 17759
17749: PUSH
17750: LD_VAR 0 6
17754: PUSH
17755: LD_INT 1
17757: EQUAL
17758: AND
17759: OR
17760: IFTRUE 17792
17762: PUSH
17763: LD_VAR 0 1
17767: PUSH
17768: LD_INT 2
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: IN
17778: NOT
17779: IFFALSE 17791
17781: PUSH
17782: LD_VAR 0 6
17786: PUSH
17787: LD_INT 2
17789: EQUAL
17790: AND
17791: OR
17792: IFFALSE 17802
// mode = 0 ;
17794: LD_ADDR_VAR 0 6
17798: PUSH
17799: LD_INT 0
17801: ST_TO_ADDR
// case mode of 0 :
17802: LD_VAR 0 6
17806: PUSH
17807: LD_INT 0
17809: DOUBLE
17810: EQUAL
17811: IFTRUE 17815
17813: GO 29268
17815: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17816: LD_ADDR_VAR 0 11
17820: PUSH
17821: LD_INT 0
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: LD_INT 1
17836: NEG
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 1
17844: PUSH
17845: LD_INT 0
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: LD_INT 1
17854: PUSH
17855: LD_INT 1
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 1
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 0
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 1
17885: NEG
17886: PUSH
17887: LD_INT 1
17889: NEG
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 1
17897: NEG
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 2
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: LD_INT 1
17923: NEG
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 0
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 1
17951: NEG
17952: PUSH
17953: LD_INT 1
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: LD_INT 3
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 0
17972: PUSH
17973: LD_INT 3
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18009: LD_ADDR_VAR 0 12
18013: PUSH
18014: LD_INT 0
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: LD_INT 1
18029: NEG
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: LD_INT 0
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: LD_INT 1
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 0
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: LD_INT 0
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 1
18090: PUSH
18091: LD_INT 1
18093: NEG
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 2
18101: PUSH
18102: LD_INT 0
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 2
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: LD_INT 1
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 2
18132: NEG
18133: PUSH
18134: LD_INT 0
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 2
18143: NEG
18144: PUSH
18145: LD_INT 1
18147: NEG
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: LD_INT 2
18155: NEG
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 3
18166: NEG
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 3
18177: NEG
18178: PUSH
18179: LD_INT 1
18181: NEG
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18205: LD_ADDR_VAR 0 13
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 1
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 1
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 1
18263: NEG
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: LD_INT 1
18278: NEG
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: NEG
18287: PUSH
18288: LD_INT 2
18290: NEG
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 1
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 2
18328: NEG
18329: PUSH
18330: LD_INT 1
18332: NEG
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: NEG
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: LD_INT 3
18356: NEG
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 3
18364: NEG
18365: PUSH
18366: LD_INT 2
18368: NEG
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 3
18376: NEG
18377: PUSH
18378: LD_INT 3
18380: NEG
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18404: LD_ADDR_VAR 0 14
18408: PUSH
18409: LD_INT 0
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: LD_INT 1
18424: NEG
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 0
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 1
18462: NEG
18463: PUSH
18464: LD_INT 0
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: NEG
18486: PUSH
18487: LD_INT 2
18489: NEG
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 0
18497: PUSH
18498: LD_INT 2
18500: NEG
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 1
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: LD_INT 2
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: NEG
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: LD_INT 3
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: LD_INT 3
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 2
18576: NEG
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18600: LD_ADDR_VAR 0 15
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: LD_INT 0
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: LD_INT 1
18620: NEG
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: LD_INT 0
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 0
18648: PUSH
18649: LD_INT 1
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: NEG
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 1
18669: NEG
18670: PUSH
18671: LD_INT 1
18673: NEG
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 1
18684: NEG
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: LD_INT 1
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 2
18723: NEG
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PUSH
18732: LD_INT 2
18734: NEG
18735: PUSH
18736: LD_INT 1
18738: NEG
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 2
18746: PUSH
18747: LD_INT 1
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 3
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 3
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18793: LD_ADDR_VAR 0 16
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: LD_INT 1
18813: NEG
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: LD_INT 0
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: LD_INT 1
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: LD_INT 2
18878: NEG
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 2
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: PUSH
18897: LD_INT 2
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 2
18916: NEG
18917: PUSH
18918: LD_INT 1
18920: NEG
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: NEG
18929: PUSH
18930: LD_INT 2
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 3
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 3
18950: PUSH
18951: LD_INT 3
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 2
18960: PUSH
18961: LD_INT 3
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18986: LD_ADDR_VAR 0 17
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 0
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 0
19079: PUSH
19080: LD_INT 2
19082: NEG
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 1
19090: PUSH
19091: LD_INT 1
19093: NEG
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: LD_INT 2
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: LD_INT 2
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 2
19162: NEG
19163: PUSH
19164: LD_INT 0
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 2
19173: NEG
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 2
19185: NEG
19186: PUSH
19187: LD_INT 2
19189: NEG
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19216: LD_ADDR_VAR 0 18
19220: PUSH
19221: LD_INT 0
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: PUSH
19245: LD_INT 0
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: LD_INT 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 0
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 1
19274: NEG
19275: PUSH
19276: LD_INT 0
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: NEG
19286: PUSH
19287: LD_INT 1
19289: NEG
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: NEG
19298: PUSH
19299: LD_INT 2
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 2
19312: NEG
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 2
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 2
19351: PUSH
19352: LD_INT 2
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 1
19361: PUSH
19362: LD_INT 2
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 1
19381: NEG
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 2
19392: NEG
19393: PUSH
19394: LD_INT 0
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 2
19403: NEG
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 2
19415: NEG
19416: PUSH
19417: LD_INT 2
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19446: LD_ADDR_VAR 0 19
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 1
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: NEG
19528: PUSH
19529: LD_INT 2
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: LD_INT 2
19542: NEG
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 1
19550: PUSH
19551: LD_INT 1
19553: NEG
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 2
19561: PUSH
19562: LD_INT 0
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: LD_INT 2
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: LD_INT 2
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: LD_INT 2
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: LD_INT 1
19611: NEG
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: LD_INT 2
19622: NEG
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 2
19633: NEG
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: LD_INT 2
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19676: LD_ADDR_VAR 0 20
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 1
19696: NEG
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: NEG
19735: PUSH
19736: LD_INT 0
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: PUSH
19747: LD_INT 1
19749: NEG
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: NEG
19758: PUSH
19759: LD_INT 2
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 0
19769: PUSH
19770: LD_INT 2
19772: NEG
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 1
19780: PUSH
19781: LD_INT 1
19783: NEG
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: LD_INT 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 1
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: LD_INT 1
19841: NEG
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 2
19852: NEG
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 2
19863: NEG
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 2
19875: NEG
19876: PUSH
19877: LD_INT 2
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19906: LD_ADDR_VAR 0 21
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: LD_INT 1
19926: NEG
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: PUSH
19935: LD_INT 0
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: LD_INT 1
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: LD_INT 1
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: NEG
19965: PUSH
19966: LD_INT 0
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: NEG
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 1
19987: NEG
19988: PUSH
19989: LD_INT 2
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: LD_INT 2
20002: NEG
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 2
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 2
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 2
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: NEG
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 2
20093: NEG
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 2
20105: NEG
20106: PUSH
20107: LD_INT 2
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20136: LD_ADDR_VAR 0 22
20140: PUSH
20141: LD_INT 0
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: LD_INT 0
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: LD_INT 1
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: LD_INT 1
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: NEG
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: NEG
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 1
20217: NEG
20218: PUSH
20219: LD_INT 2
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 0
20229: PUSH
20230: LD_INT 2
20232: NEG
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 1
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: PUSH
20262: LD_INT 1
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 2
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 1
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: LD_INT 2
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 1
20301: NEG
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 2
20312: NEG
20313: PUSH
20314: LD_INT 0
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PUSH
20321: LD_INT 2
20323: NEG
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 2
20335: NEG
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20366: LD_ADDR_VAR 0 23
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: LD_INT 1
20386: NEG
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 1
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: LD_INT 1
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: NEG
20425: PUSH
20426: LD_INT 0
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 1
20435: NEG
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 1
20447: NEG
20448: PUSH
20449: LD_INT 2
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 0
20459: PUSH
20460: LD_INT 2
20462: NEG
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 1
20470: PUSH
20471: LD_INT 1
20473: NEG
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: LD_INT 2
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: PUSH
20492: LD_INT 1
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 1
20511: PUSH
20512: LD_INT 2
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 1
20531: NEG
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 2
20542: NEG
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: LD_INT 2
20553: NEG
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 2
20565: NEG
20566: PUSH
20567: LD_INT 2
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 2
20577: NEG
20578: PUSH
20579: LD_INT 3
20581: NEG
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 1
20589: NEG
20590: PUSH
20591: LD_INT 3
20593: NEG
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: LD_INT 2
20604: NEG
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 2
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20646: LD_ADDR_VAR 0 24
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 0
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: LD_INT 1
20666: NEG
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 0
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 1
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 2
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 0
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 0
20801: PUSH
20802: LD_INT 2
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: LD_INT 1
20811: NEG
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: NEG
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 2
20845: NEG
20846: PUSH
20847: LD_INT 2
20849: NEG
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 2
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 3
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20922: LD_ADDR_VAR 0 25
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: LD_INT 1
20942: NEG
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 1
20950: PUSH
20951: LD_INT 0
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 1
20980: NEG
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 1
20991: NEG
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 1
21003: NEG
21004: PUSH
21005: LD_INT 2
21007: NEG
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: LD_INT 2
21018: NEG
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: LD_INT 1
21029: NEG
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 2
21037: PUSH
21038: LD_INT 0
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 2
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 1
21067: PUSH
21068: LD_INT 2
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 1
21087: NEG
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 2
21098: NEG
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 2
21109: NEG
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: NEG
21122: PUSH
21123: LD_INT 2
21125: NEG
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 3
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 1
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21196: LD_ADDR_VAR 0 26
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 2
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 1
21303: NEG
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 2
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: LD_INT 2
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: LD_INT 2
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: LD_INT 1
21361: NEG
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 2
21372: NEG
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: LD_INT 1
21387: NEG
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 2
21395: NEG
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: LD_INT 3
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: LD_INT 1
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21472: LD_ADDR_VAR 0 27
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: LD_INT 0
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: LD_INT 1
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: LD_INT 1
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 0
21520: PUSH
21521: LD_INT 1
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: NEG
21531: PUSH
21532: LD_INT 0
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 2
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: LD_INT 1
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: LD_INT 1
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: PUSH
21618: LD_INT 2
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: NEG
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 2
21648: NEG
21649: PUSH
21650: LD_INT 0
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: LD_INT 2
21659: NEG
21660: PUSH
21661: LD_INT 1
21663: NEG
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 2
21671: NEG
21672: PUSH
21673: LD_INT 2
21675: NEG
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: LD_INT 2
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 2
21694: NEG
21695: PUSH
21696: LD_INT 1
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 3
21705: NEG
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 3
21717: NEG
21718: PUSH
21719: LD_INT 2
21721: NEG
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21752: LD_ADDR_VAR 0 28
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: LD_INT 1
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: LD_INT 1
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 1
21810: NEG
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: LD_INT 2
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 1
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 2
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 2
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 2
21887: PUSH
21888: LD_INT 2
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 1
21917: NEG
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 2
21928: NEG
21929: PUSH
21930: LD_INT 0
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 2
21939: NEG
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 2
21951: NEG
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 2
21963: NEG
21964: PUSH
21965: LD_INT 3
21967: NEG
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: LD_INT 3
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 3
21987: NEG
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 3
21999: NEG
22000: PUSH
22001: LD_INT 2
22003: NEG
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22034: LD_ADDR_VAR 0 29
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: LD_INT 0
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: LD_INT 1
22054: NEG
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 1
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: NEG
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: NEG
22104: PUSH
22105: LD_INT 1
22107: NEG
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 2
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 0
22127: PUSH
22128: LD_INT 2
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: PUSH
22139: LD_INT 1
22141: NEG
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 2
22149: PUSH
22150: LD_INT 0
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 2
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 0
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: NEG
22201: PUSH
22202: LD_INT 1
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 2
22212: NEG
22213: PUSH
22214: LD_INT 2
22216: NEG
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 2
22224: NEG
22225: PUSH
22226: LD_INT 3
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 3
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: NEG
22268: PUSH
22269: LD_INT 2
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 3
22278: NEG
22279: PUSH
22280: LD_INT 2
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22313: LD_ADDR_VAR 0 30
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 0
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: LD_INT 1
22333: NEG
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: LD_INT 0
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 2
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 1
22417: PUSH
22418: LD_INT 1
22420: NEG
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: LD_INT 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 1
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 1
22468: NEG
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 2
22479: NEG
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 2
22490: NEG
22491: PUSH
22492: LD_INT 1
22494: NEG
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: NEG
22503: PUSH
22504: LD_INT 3
22506: NEG
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 1
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 3
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 3
22556: NEG
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22591: LD_ADDR_VAR 0 31
22595: PUSH
22596: LD_INT 0
22598: PUSH
22599: LD_INT 0
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: LD_INT 1
22611: NEG
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 1
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 1
22649: NEG
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 1
22672: NEG
22673: PUSH
22674: LD_INT 2
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: LD_INT 0
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 2
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: LD_INT 2
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: LD_INT 2
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: LD_INT 1
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 2
22756: NEG
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: NEG
22769: PUSH
22770: LD_INT 2
22772: NEG
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 2
22780: NEG
22781: PUSH
22782: LD_INT 3
22784: NEG
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 2
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 3
22834: NEG
22835: PUSH
22836: LD_INT 2
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22869: LD_ADDR_VAR 0 32
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: NEG
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 2
22954: NEG
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: LD_INT 2
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: NEG
23036: PUSH
23037: LD_INT 0
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: LD_INT 3
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: LD_INT 2
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 2
23101: NEG
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 3
23112: NEG
23113: PUSH
23114: LD_INT 1
23116: NEG
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23147: LD_ADDR_VAR 0 33
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: LD_INT 1
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: LD_INT 1
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 1
23205: NEG
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 1
23216: NEG
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 2
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: NEG
23314: PUSH
23315: LD_INT 1
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: LD_INT 2
23329: NEG
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 3
23341: NEG
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 2
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 3
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 3
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 2
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 3
23391: NEG
23392: PUSH
23393: LD_INT 2
23395: NEG
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23426: LD_ADDR_VAR 0 34
23430: PUSH
23431: LD_INT 0
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: LD_INT 0
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 1
23484: NEG
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 1
23507: NEG
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 1
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: NEG
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 2
23582: NEG
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 2
23593: NEG
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 2
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: NEG
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 1
23617: NEG
23618: PUSH
23619: LD_INT 3
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 2
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 3
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: LD_INT 3
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 2
23660: NEG
23661: PUSH
23662: LD_INT 1
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 3
23671: NEG
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23706: LD_ADDR_VAR 0 35
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 0
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: LD_INT 1
23726: NEG
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 1
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 0
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 1
23764: NEG
23765: PUSH
23766: LD_INT 0
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: LD_INT 1
23779: NEG
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23818: LD_ADDR_VAR 0 36
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 0
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 1
23887: NEG
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 2
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23930: LD_ADDR_VAR 0 37
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 1
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: PUSH
24012: LD_INT 1
24014: NEG
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: NEG
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24042: LD_ADDR_VAR 0 38
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 0
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 1
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: LD_INT 0
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 2
24133: NEG
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24154: LD_ADDR_VAR 0 39
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 0
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 1
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24266: LD_ADDR_VAR 0 40
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 1
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 0
24314: PUSH
24315: LD_INT 1
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: LD_INT 0
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 1
24358: NEG
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24378: LD_ADDR_VAR 0 41
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 0
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 1
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 0
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: LD_INT 1
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: NEG
24448: PUSH
24449: LD_INT 1
24451: NEG
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 2
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 2
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: NEG
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 2
24568: NEG
24569: PUSH
24570: LD_INT 3
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 2
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 3
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 3
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 3
24621: PUSH
24622: LD_INT 3
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 3
24652: NEG
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 3
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 3
24675: NEG
24676: PUSH
24677: LD_INT 2
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 3
24687: NEG
24688: PUSH
24689: LD_INT 3
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24728: LD_ADDR_VAR 0 42
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 0
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: LD_INT 2
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 2
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 1
24835: NEG
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 2
24843: PUSH
24844: LD_INT 1
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: LD_INT 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 1
24883: NEG
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 2
24894: NEG
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 2
24906: NEG
24907: PUSH
24908: LD_INT 2
24910: NEG
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 2
24918: NEG
24919: PUSH
24920: LD_INT 3
24922: NEG
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: LD_INT 3
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 0
24942: PUSH
24943: LD_INT 3
24945: NEG
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: LD_INT 2
24956: NEG
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 3
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 3
24974: PUSH
24975: LD_INT 3
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 3
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 0
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: NEG
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 3
25025: NEG
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 3
25037: NEG
25038: PUSH
25039: LD_INT 3
25041: NEG
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25078: LD_ADDR_VAR 0 43
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 0
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: NEG
25137: PUSH
25138: LD_INT 0
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 1
25159: NEG
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: LD_INT 2
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 1
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: LD_INT 0
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: PUSH
25204: LD_INT 1
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: LD_INT 2
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 2
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: NEG
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: LD_INT 0
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 3
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: LD_INT 3
25282: NEG
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 2
25293: NEG
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 2
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 3
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 3
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: LD_INT 3
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 3
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 3
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25426: LD_ADDR_VAR 0 44
25430: PUSH
25431: LD_INT 0
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 0
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: LD_INT 2
25511: NEG
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: LD_INT 2
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 2
25592: NEG
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 2
25604: NEG
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: NEG
25617: PUSH
25618: LD_INT 3
25620: NEG
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 3
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 3
25659: PUSH
25660: LD_INT 2
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 3
25669: PUSH
25670: LD_INT 3
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 3
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 3
25700: NEG
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 3
25711: NEG
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: LD_INT 2
25727: NEG
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 3
25735: NEG
25736: PUSH
25737: LD_INT 3
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25776: LD_ADDR_VAR 0 45
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 0
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: LD_INT 2
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 2
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 2
25942: NEG
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 2
25966: NEG
25967: PUSH
25968: LD_INT 3
25970: NEG
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 1
25978: NEG
25979: PUSH
25980: LD_INT 3
25982: NEG
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 3
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 3
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 3
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 3
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 3
26073: NEG
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 3
26085: NEG
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26126: LD_ADDR_VAR 0 46
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: NEG
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: LD_INT 3
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: LD_INT 3
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 3
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 3
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: LD_INT 3
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 0
26390: PUSH
26391: LD_INT 3
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 3
26422: NEG
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 3
26433: NEG
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26474: LD_ADDR_VAR 0 47
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: LD_INT 2
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 2
26589: NEG
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: NEG
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26625: LD_ADDR_VAR 0 48
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 1
26694: NEG
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: LD_INT 2
26710: NEG
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 0
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 2
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26772: LD_ADDR_VAR 0 49
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: LD_INT 2
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: LD_INT 2
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26916: LD_ADDR_VAR 0 50
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 1
26985: NEG
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27060: LD_ADDR_VAR 0 51
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: LD_INT 0
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: LD_INT 1
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: NEG
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 2
27172: NEG
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27207: LD_ADDR_VAR 0 52
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: NEG
27266: PUSH
27267: LD_INT 0
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 1
27276: NEG
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 2
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: NEG
27335: PUSH
27336: LD_INT 2
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27358: LD_ADDR_VAR 0 53
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 2
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: LD_INT 1
27465: NEG
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: LD_INT 0
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 2
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 2
27534: NEG
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: NEG
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27588: LD_ADDR_VAR 0 54
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: LD_INT 0
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: LD_INT 1
27661: NEG
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 2
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 2
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 2
27723: PUSH
27724: LD_INT 2
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 1
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: NEG
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 2
27764: NEG
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: NEG
27788: PUSH
27789: LD_INT 2
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27818: LD_ADDR_VAR 0 55
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 2
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: LD_INT 2
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: NEG
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28048: LD_ADDR_VAR 0 56
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 1
28129: NEG
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: NEG
28236: PUSH
28237: LD_INT 1
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28278: LD_ADDR_VAR 0 57
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: PUSH
28324: LD_INT 0
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 1
28336: NEG
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: NEG
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 1
28359: NEG
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 1
28385: NEG
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: LD_INT 1
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: LD_INT 2
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: NEG
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 2
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28508: LD_ADDR_VAR 0 58
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 1
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 0
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: LD_INT 2
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: LD_INT 1
28615: NEG
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: LD_INT 0
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 2
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 2
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 2
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 2
28695: NEG
28696: PUSH
28697: LD_INT 1
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28738: LD_ADDR_VAR 0 59
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: LD_INT 1
28758: NEG
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: LD_INT 1
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 1
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28826: LD_ADDR_VAR 0 60
28830: PUSH
28831: LD_INT 0
28833: PUSH
28834: LD_INT 0
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: NEG
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28914: LD_ADDR_VAR 0 61
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29002: LD_ADDR_VAR 0 62
29006: PUSH
29007: LD_INT 0
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: LD_INT 0
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 1
29071: NEG
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29090: LD_ADDR_VAR 0 63
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 0
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: NEG
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 1
29159: NEG
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29178: LD_ADDR_VAR 0 64
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 1
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// end ; 1 :
29266: GO 35163
29268: LD_INT 1
29270: DOUBLE
29271: EQUAL
29272: IFTRUE 29276
29274: GO 31899
29276: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29277: LD_ADDR_VAR 0 11
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 3
29288: NEG
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: LD_INT 2
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29321: LD_ADDR_VAR 0 12
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 3
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29362: LD_ADDR_VAR 0 13
29366: PUSH
29367: LD_INT 3
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: PUSH
29380: LD_INT 3
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: LD_INT 3
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29402: LD_ADDR_VAR 0 14
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 3
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 3
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: LIST
29442: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29443: LD_ADDR_VAR 0 15
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 3
29461: NEG
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 3
29472: NEG
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: LIST
29486: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29487: LD_ADDR_VAR 0 16
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: LD_INT 3
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 3
29506: NEG
29507: PUSH
29508: LD_INT 2
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 3
29518: NEG
29519: PUSH
29520: LD_INT 3
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: LIST
29532: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29533: LD_ADDR_VAR 0 17
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: LD_INT 3
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 3
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: LD_INT 2
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29577: LD_ADDR_VAR 0 18
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: LIST
29617: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29618: LD_ADDR_VAR 0 19
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 2
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29658: LD_ADDR_VAR 0 20
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: LD_INT 3
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: LIST
29698: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29699: LD_ADDR_VAR 0 21
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: NEG
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 3
29728: NEG
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: LIST
29742: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29743: LD_ADDR_VAR 0 22
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: LD_INT 3
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 3
29774: NEG
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29789: LD_ADDR_VAR 0 23
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: LD_INT 3
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 4
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: LD_INT 3
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29833: LD_ADDR_VAR 0 24
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 3
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 4
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29874: LD_ADDR_VAR 0 25
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: LD_INT 3
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 4
29891: PUSH
29892: LD_INT 3
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: LD_INT 4
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29914: LD_ADDR_VAR 0 26
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: LD_INT 3
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29955: LD_ADDR_VAR 0 27
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 3
29973: NEG
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 4
29984: NEG
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: LIST
29998: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29999: LD_ADDR_VAR 0 28
30003: PUSH
30004: LD_INT 3
30006: NEG
30007: PUSH
30008: LD_INT 3
30010: NEG
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 3
30018: NEG
30019: PUSH
30020: LD_INT 4
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 4
30030: NEG
30031: PUSH
30032: LD_INT 3
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30045: LD_ADDR_VAR 0 29
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 3
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: LD_INT 3
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: LD_INT 4
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 0
30098: PUSH
30099: LD_INT 4
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: NEG
30121: PUSH
30122: LD_INT 5
30124: NEG
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 5
30135: NEG
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: LD_INT 4
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: LD_INT 6
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 6
30169: NEG
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: PUSH
30178: LD_INT 5
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30200: LD_ADDR_VAR 0 30
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 3
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 4
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 4
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 4
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 5
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 5
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 5
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 6
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 6
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30343: LD_ADDR_VAR 0 31
30347: PUSH
30348: LD_INT 3
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: LD_INT 3
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: LD_INT 3
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 4
30380: PUSH
30381: LD_INT 3
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 4
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 3
30400: PUSH
30401: LD_INT 4
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 5
30410: PUSH
30411: LD_INT 4
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 5
30420: PUSH
30421: LD_INT 5
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 4
30430: PUSH
30431: LD_INT 5
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 6
30440: PUSH
30441: LD_INT 5
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 6
30450: PUSH
30451: LD_INT 6
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 5
30460: PUSH
30461: LD_INT 6
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30482: LD_ADDR_VAR 0 32
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 3
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 3
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 4
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: LD_INT 4
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 5
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 5
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: NEG
30572: PUSH
30573: LD_INT 4
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: LD_INT 6
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 6
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 5
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30625: LD_ADDR_VAR 0 33
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 3
30643: NEG
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: NEG
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PUSH
30675: LD_INT 4
30677: NEG
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 4
30688: NEG
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 4
30700: NEG
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 5
30711: NEG
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 5
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 5
30734: NEG
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 6
30745: NEG
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 6
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30780: LD_ADDR_VAR 0 34
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: LD_INT 3
30791: NEG
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 3
30799: NEG
30800: PUSH
30801: LD_INT 2
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 3
30811: NEG
30812: PUSH
30813: LD_INT 3
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 3
30823: NEG
30824: PUSH
30825: LD_INT 4
30827: NEG
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 4
30835: NEG
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 4
30847: NEG
30848: PUSH
30849: LD_INT 4
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 4
30859: NEG
30860: PUSH
30861: LD_INT 5
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 5
30871: NEG
30872: PUSH
30873: LD_INT 4
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 5
30883: NEG
30884: PUSH
30885: LD_INT 5
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 5
30895: NEG
30896: PUSH
30897: LD_INT 6
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 6
30907: NEG
30908: PUSH
30909: LD_INT 5
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 6
30919: NEG
30920: PUSH
30921: LD_INT 6
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30943: LD_ADDR_VAR 0 41
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: LD_INT 3
30965: NEG
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30987: LD_ADDR_VAR 0 42
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: LD_INT 1
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31028: LD_ADDR_VAR 0 43
31032: PUSH
31033: LD_INT 2
31035: PUSH
31036: LD_INT 2
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31068: LD_ADDR_VAR 0 44
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 2
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 3
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: NEG
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31109: LD_ADDR_VAR 0 45
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 2
31127: NEG
31128: PUSH
31129: LD_INT 1
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 3
31138: NEG
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31153: LD_ADDR_VAR 0 46
31157: PUSH
31158: LD_INT 2
31160: NEG
31161: PUSH
31162: LD_INT 2
31164: NEG
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: NEG
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 3
31184: NEG
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31199: LD_ADDR_VAR 0 47
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 3
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31232: LD_ADDR_VAR 0 48
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31263: LD_ADDR_VAR 0 49
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31292: LD_ADDR_VAR 0 50
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 3
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31321: LD_ADDR_VAR 0 51
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31352: LD_ADDR_VAR 0 52
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 3
31371: NEG
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31385: LD_ADDR_VAR 0 53
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: LD_INT 3
31396: NEG
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31429: LD_ADDR_VAR 0 54
31433: PUSH
31434: LD_INT 2
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 3
31447: PUSH
31448: LD_INT 0
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31470: LD_ADDR_VAR 0 55
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: LD_INT 3
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31510: LD_ADDR_VAR 0 56
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 3
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: LD_INT 3
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31551: LD_ADDR_VAR 0 57
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 3
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 3
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31595: LD_ADDR_VAR 0 58
31599: PUSH
31600: LD_INT 2
31602: NEG
31603: PUSH
31604: LD_INT 3
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: LD_INT 3
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31641: LD_ADDR_VAR 0 59
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 2
31652: NEG
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31685: LD_ADDR_VAR 0 60
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 0
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31726: LD_ADDR_VAR 0 61
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31766: LD_ADDR_VAR 0 62
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: LIST
31806: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31807: LD_ADDR_VAR 0 63
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 2
31825: NEG
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 2
31836: NEG
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: LIST
31850: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31851: LD_ADDR_VAR 0 64
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: LD_INT 2
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 2
31882: NEG
31883: PUSH
31884: LD_INT 2
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// end ; 2 :
31897: GO 35163
31899: LD_INT 2
31901: DOUBLE
31902: EQUAL
31903: IFTRUE 31907
31905: GO 35162
31907: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31908: LD_ADDR_VAR 0 29
31912: PUSH
31913: LD_INT 4
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 4
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 5
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 5
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 4
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 3
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 3
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 5
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 3
32008: PUSH
32009: LD_INT 3
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: LD_INT 3
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 4
32038: PUSH
32039: LD_INT 4
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: LD_INT 4
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: LD_INT 4
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 3
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 1
32118: PUSH
32119: LD_INT 4
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: LD_INT 5
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 3
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: LD_INT 5
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 3
32191: NEG
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 3
32202: NEG
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 3
32236: NEG
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 4
32247: NEG
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 4
32258: NEG
32259: PUSH
32260: LD_INT 1
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 4
32270: NEG
32271: PUSH
32272: LD_INT 2
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 4
32293: NEG
32294: PUSH
32295: LD_INT 4
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 4
32305: NEG
32306: PUSH
32307: LD_INT 5
32309: NEG
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 3
32317: NEG
32318: PUSH
32319: LD_INT 4
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 3
32329: NEG
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 4
32341: NEG
32342: PUSH
32343: LD_INT 3
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 5
32353: NEG
32354: PUSH
32355: LD_INT 4
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 5
32365: NEG
32366: PUSH
32367: LD_INT 5
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 5
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 5
32389: NEG
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32446: LD_ADDR_VAR 0 30
32450: PUSH
32451: LD_INT 4
32453: PUSH
32454: LD_INT 4
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 4
32463: PUSH
32464: LD_INT 3
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 5
32473: PUSH
32474: LD_INT 4
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 5
32483: PUSH
32484: LD_INT 5
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 4
32493: PUSH
32494: LD_INT 5
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: LD_INT 4
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 3
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 5
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 3
32533: PUSH
32534: LD_INT 5
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 2
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: LD_INT 4
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: LD_INT 4
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 3
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: LD_INT 2
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 4
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 4
32636: NEG
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 4
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: NEG
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 3
32670: NEG
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 4
32681: NEG
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 5
32692: NEG
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 5
32703: NEG
32704: PUSH
32705: LD_INT 1
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 5
32715: NEG
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 3
32738: NEG
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 3
32750: NEG
32751: PUSH
32752: LD_INT 4
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: LD_INT 3
32766: NEG
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: LD_INT 2
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 4
32798: NEG
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 4
32810: NEG
32811: PUSH
32812: LD_INT 4
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: LD_INT 4
32826: NEG
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 4
32834: NEG
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: LD_INT 4
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: LD_INT 5
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 4
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 3
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 3
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: LD_INT 4
32905: NEG
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: NEG
32914: PUSH
32915: LD_INT 5
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: LD_INT 3
32928: NEG
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: LD_INT 5
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32993: LD_ADDR_VAR 0 31
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 4
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 3
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 4
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 5
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 5
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: LD_INT 4
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: LD_INT 3
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 5
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: NEG
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 3
33138: NEG
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 4
33149: NEG
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 4
33160: NEG
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 4
33172: NEG
33173: PUSH
33174: LD_INT 2
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 4
33195: NEG
33196: PUSH
33197: LD_INT 4
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 4
33207: NEG
33208: PUSH
33209: LD_INT 5
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 4
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 3
33231: NEG
33232: PUSH
33233: LD_INT 3
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 4
33243: NEG
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: LD_INT 4
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 5
33267: NEG
33268: PUSH
33269: LD_INT 5
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 5
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 5
33291: NEG
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 3
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 4
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 3
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 1
33336: PUSH
33337: LD_INT 2
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 0
33347: PUSH
33348: LD_INT 2
33350: NEG
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 3
33362: NEG
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 2
33393: NEG
33394: PUSH
33395: LD_INT 4
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 4
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 4
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 5
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 4
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 3
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: LD_INT 1
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 5
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33543: LD_ADDR_VAR 0 32
33547: PUSH
33548: LD_INT 4
33550: NEG
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 4
33561: NEG
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 3
33573: NEG
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 4
33595: NEG
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 5
33606: NEG
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 5
33617: NEG
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 5
33629: NEG
33630: PUSH
33631: LD_INT 2
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 3
33641: NEG
33642: PUSH
33643: LD_INT 2
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 3
33652: NEG
33653: PUSH
33654: LD_INT 3
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: NEG
33665: PUSH
33666: LD_INT 4
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: LD_INT 3
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 3
33700: NEG
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 4
33712: NEG
33713: PUSH
33714: LD_INT 3
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 4
33724: NEG
33725: PUSH
33726: LD_INT 4
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: LD_INT 4
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 4
33748: NEG
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 4
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: LD_INT 5
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 4
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: LD_INT 3
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 3
33807: NEG
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: LD_INT 4
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: LD_INT 5
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: LD_INT 3
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: NEG
33851: PUSH
33852: LD_INT 5
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 3
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 4
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 4
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 3
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 2
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 4
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 4
33955: PUSH
33956: LD_INT 4
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 4
33965: PUSH
33966: LD_INT 3
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 5
33975: PUSH
33976: LD_INT 4
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 5
33985: PUSH
33986: LD_INT 5
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 4
33995: PUSH
33996: LD_INT 5
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 3
34005: PUSH
34006: LD_INT 4
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 3
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 5
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 5
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34090: LD_ADDR_VAR 0 33
34094: PUSH
34095: LD_INT 4
34097: NEG
34098: PUSH
34099: LD_INT 4
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 4
34109: NEG
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 3
34133: NEG
34134: PUSH
34135: LD_INT 3
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 4
34145: NEG
34146: PUSH
34147: LD_INT 3
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 5
34157: NEG
34158: PUSH
34159: LD_INT 4
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 5
34169: NEG
34170: PUSH
34171: LD_INT 5
34173: NEG
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: LD_INT 5
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 5
34193: NEG
34194: PUSH
34195: LD_INT 3
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: LD_INT 3
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: LD_INT 4
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 3
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 3
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: LD_INT 4
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 2
34284: PUSH
34285: LD_INT 2
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: LD_INT 4
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 4
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 4
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 5
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 5
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 4
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 5
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 3
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 4
34420: PUSH
34421: LD_INT 3
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 4
34430: PUSH
34431: LD_INT 4
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 3
34440: PUSH
34441: LD_INT 4
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 3
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 4
34470: PUSH
34471: LD_INT 2
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 4
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 4
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 4
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 5
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 5
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 4
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 5
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: NEG
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34628: LD_ADDR_VAR 0 34
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 4
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 5
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: PUSH
34658: LD_INT 4
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 3
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 3
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 4
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 5
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 2
34714: PUSH
34715: LD_INT 3
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: LD_INT 5
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 3
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 3
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 4
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 4
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 2
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 4
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 4
34830: PUSH
34831: LD_INT 4
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 4
34840: PUSH
34841: LD_INT 3
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 5
34850: PUSH
34851: LD_INT 4
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 5
34860: PUSH
34861: LD_INT 5
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 4
34870: PUSH
34871: LD_INT 5
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 4
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 3
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 5
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: LD_INT 5
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: LD_INT 3
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 3
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 4
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: LD_INT 2
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 4
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 4
35013: NEG
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 4
35024: NEG
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 3
35036: NEG
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 4
35058: NEG
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 5
35069: NEG
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 5
35080: NEG
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 5
35092: NEG
35093: PUSH
35094: LD_INT 2
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 3
35104: NEG
35105: PUSH
35106: LD_INT 2
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// end ; end ;
35160: GO 35163
35162: POP
// case btype of b_depot , b_warehouse :
35163: LD_VAR 0 1
35167: PUSH
35168: LD_INT 0
35170: DOUBLE
35171: EQUAL
35172: IFTRUE 35182
35174: LD_INT 1
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35383
35182: POP
// case nation of nation_american :
35183: LD_VAR 0 5
35187: PUSH
35188: LD_INT 1
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35196
35194: GO 35252
35196: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35197: LD_ADDR_VAR 0 9
35201: PUSH
35202: LD_VAR 0 11
35206: PUSH
35207: LD_VAR 0 12
35211: PUSH
35212: LD_VAR 0 13
35216: PUSH
35217: LD_VAR 0 14
35221: PUSH
35222: LD_VAR 0 15
35226: PUSH
35227: LD_VAR 0 16
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: PUSH
35240: LD_VAR 0 4
35244: PUSH
35245: LD_INT 1
35247: PLUS
35248: ARRAY
35249: ST_TO_ADDR
35250: GO 35381
35252: LD_INT 2
35254: DOUBLE
35255: EQUAL
35256: IFTRUE 35260
35258: GO 35316
35260: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35261: LD_ADDR_VAR 0 9
35265: PUSH
35266: LD_VAR 0 17
35270: PUSH
35271: LD_VAR 0 18
35275: PUSH
35276: LD_VAR 0 19
35280: PUSH
35281: LD_VAR 0 20
35285: PUSH
35286: LD_VAR 0 21
35290: PUSH
35291: LD_VAR 0 22
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: PUSH
35304: LD_VAR 0 4
35308: PUSH
35309: LD_INT 1
35311: PLUS
35312: ARRAY
35313: ST_TO_ADDR
35314: GO 35381
35316: LD_INT 3
35318: DOUBLE
35319: EQUAL
35320: IFTRUE 35324
35322: GO 35380
35324: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_VAR 0 23
35334: PUSH
35335: LD_VAR 0 24
35339: PUSH
35340: LD_VAR 0 25
35344: PUSH
35345: LD_VAR 0 26
35349: PUSH
35350: LD_VAR 0 27
35354: PUSH
35355: LD_VAR 0 28
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: LD_VAR 0 4
35372: PUSH
35373: LD_INT 1
35375: PLUS
35376: ARRAY
35377: ST_TO_ADDR
35378: GO 35381
35380: POP
35381: GO 35936
35383: LD_INT 2
35385: DOUBLE
35386: EQUAL
35387: IFTRUE 35397
35389: LD_INT 3
35391: DOUBLE
35392: EQUAL
35393: IFTRUE 35397
35395: GO 35453
35397: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_VAR 0 29
35407: PUSH
35408: LD_VAR 0 30
35412: PUSH
35413: LD_VAR 0 31
35417: PUSH
35418: LD_VAR 0 32
35422: PUSH
35423: LD_VAR 0 33
35427: PUSH
35428: LD_VAR 0 34
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: PUSH
35441: LD_VAR 0 4
35445: PUSH
35446: LD_INT 1
35448: PLUS
35449: ARRAY
35450: ST_TO_ADDR
35451: GO 35936
35453: LD_INT 16
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35515
35459: LD_INT 17
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35515
35465: LD_INT 18
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35515
35471: LD_INT 19
35473: DOUBLE
35474: EQUAL
35475: IFTRUE 35515
35477: LD_INT 22
35479: DOUBLE
35480: EQUAL
35481: IFTRUE 35515
35483: LD_INT 20
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35515
35489: LD_INT 21
35491: DOUBLE
35492: EQUAL
35493: IFTRUE 35515
35495: LD_INT 23
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35515
35501: LD_INT 24
35503: DOUBLE
35504: EQUAL
35505: IFTRUE 35515
35507: LD_INT 25
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35515
35513: GO 35571
35515: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35516: LD_ADDR_VAR 0 9
35520: PUSH
35521: LD_VAR 0 35
35525: PUSH
35526: LD_VAR 0 36
35530: PUSH
35531: LD_VAR 0 37
35535: PUSH
35536: LD_VAR 0 38
35540: PUSH
35541: LD_VAR 0 39
35545: PUSH
35546: LD_VAR 0 40
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: PUSH
35559: LD_VAR 0 4
35563: PUSH
35564: LD_INT 1
35566: PLUS
35567: ARRAY
35568: ST_TO_ADDR
35569: GO 35936
35571: LD_INT 6
35573: DOUBLE
35574: EQUAL
35575: IFTRUE 35627
35577: LD_INT 7
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35627
35583: LD_INT 8
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35627
35589: LD_INT 13
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35627
35595: LD_INT 12
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35627
35601: LD_INT 15
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35627
35607: LD_INT 11
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35627
35613: LD_INT 14
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35627
35619: LD_INT 10
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35627
35625: GO 35683
35627: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35628: LD_ADDR_VAR 0 9
35632: PUSH
35633: LD_VAR 0 41
35637: PUSH
35638: LD_VAR 0 42
35642: PUSH
35643: LD_VAR 0 43
35647: PUSH
35648: LD_VAR 0 44
35652: PUSH
35653: LD_VAR 0 45
35657: PUSH
35658: LD_VAR 0 46
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: PUSH
35671: LD_VAR 0 4
35675: PUSH
35676: LD_INT 1
35678: PLUS
35679: ARRAY
35680: ST_TO_ADDR
35681: GO 35936
35683: LD_INT 36
35685: DOUBLE
35686: EQUAL
35687: IFTRUE 35691
35689: GO 35747
35691: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35692: LD_ADDR_VAR 0 9
35696: PUSH
35697: LD_VAR 0 47
35701: PUSH
35702: LD_VAR 0 48
35706: PUSH
35707: LD_VAR 0 49
35711: PUSH
35712: LD_VAR 0 50
35716: PUSH
35717: LD_VAR 0 51
35721: PUSH
35722: LD_VAR 0 52
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: PUSH
35735: LD_VAR 0 4
35739: PUSH
35740: LD_INT 1
35742: PLUS
35743: ARRAY
35744: ST_TO_ADDR
35745: GO 35936
35747: LD_INT 4
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35773
35753: LD_INT 5
35755: DOUBLE
35756: EQUAL
35757: IFTRUE 35773
35759: LD_INT 34
35761: DOUBLE
35762: EQUAL
35763: IFTRUE 35773
35765: LD_INT 37
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35773
35771: GO 35829
35773: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35774: LD_ADDR_VAR 0 9
35778: PUSH
35779: LD_VAR 0 53
35783: PUSH
35784: LD_VAR 0 54
35788: PUSH
35789: LD_VAR 0 55
35793: PUSH
35794: LD_VAR 0 56
35798: PUSH
35799: LD_VAR 0 57
35803: PUSH
35804: LD_VAR 0 58
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: PUSH
35817: LD_VAR 0 4
35821: PUSH
35822: LD_INT 1
35824: PLUS
35825: ARRAY
35826: ST_TO_ADDR
35827: GO 35936
35829: LD_INT 31
35831: DOUBLE
35832: EQUAL
35833: IFTRUE 35879
35835: LD_INT 32
35837: DOUBLE
35838: EQUAL
35839: IFTRUE 35879
35841: LD_INT 33
35843: DOUBLE
35844: EQUAL
35845: IFTRUE 35879
35847: LD_INT 27
35849: DOUBLE
35850: EQUAL
35851: IFTRUE 35879
35853: LD_INT 26
35855: DOUBLE
35856: EQUAL
35857: IFTRUE 35879
35859: LD_INT 28
35861: DOUBLE
35862: EQUAL
35863: IFTRUE 35879
35865: LD_INT 29
35867: DOUBLE
35868: EQUAL
35869: IFTRUE 35879
35871: LD_INT 30
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35935
35879: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35880: LD_ADDR_VAR 0 9
35884: PUSH
35885: LD_VAR 0 59
35889: PUSH
35890: LD_VAR 0 60
35894: PUSH
35895: LD_VAR 0 61
35899: PUSH
35900: LD_VAR 0 62
35904: PUSH
35905: LD_VAR 0 63
35909: PUSH
35910: LD_VAR 0 64
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_VAR 0 4
35927: PUSH
35928: LD_INT 1
35930: PLUS
35931: ARRAY
35932: ST_TO_ADDR
35933: GO 35936
35935: POP
// temp_list2 = [ ] ;
35936: LD_ADDR_VAR 0 10
35940: PUSH
35941: EMPTY
35942: ST_TO_ADDR
// for i in temp_list do
35943: LD_ADDR_VAR 0 8
35947: PUSH
35948: LD_VAR 0 9
35952: PUSH
35953: FOR_IN
35954: IFFALSE 36006
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35956: LD_ADDR_VAR 0 10
35960: PUSH
35961: LD_VAR 0 10
35965: PUSH
35966: LD_VAR 0 8
35970: PUSH
35971: LD_INT 1
35973: ARRAY
35974: PUSH
35975: LD_VAR 0 2
35979: PLUS
35980: PUSH
35981: LD_VAR 0 8
35985: PUSH
35986: LD_INT 2
35988: ARRAY
35989: PUSH
35990: LD_VAR 0 3
35994: PLUS
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: EMPTY
36001: LIST
36002: ADD
36003: ST_TO_ADDR
36004: GO 35953
36006: POP
36007: POP
// result = temp_list2 ;
36008: LD_ADDR_VAR 0 7
36012: PUSH
36013: LD_VAR 0 10
36017: ST_TO_ADDR
// end ;
36018: LD_VAR 0 7
36022: RET
// export function EnemyInRange ( unit , dist ) ; begin
36023: LD_INT 0
36025: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36026: LD_ADDR_VAR 0 3
36030: PUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 255
36040: PPUSH
36041: LD_VAR 0 1
36045: PPUSH
36046: CALL_OW 250
36050: PPUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: CALL_OW 251
36060: PPUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: CALL 9280 0 4
36070: PUSH
36071: LD_INT 4
36073: ARRAY
36074: ST_TO_ADDR
// end ;
36075: LD_VAR 0 3
36079: RET
// export function PlayerSeeMe ( unit ) ; begin
36080: LD_INT 0
36082: PPUSH
// result := See ( your_side , unit ) ;
36083: LD_ADDR_VAR 0 2
36087: PUSH
36088: LD_OWVAR 2
36092: PPUSH
36093: LD_VAR 0 1
36097: PPUSH
36098: CALL_OW 292
36102: ST_TO_ADDR
// end ;
36103: LD_VAR 0 2
36107: RET
// export function ReverseDir ( unit ) ; begin
36108: LD_INT 0
36110: PPUSH
// if not unit then
36111: LD_VAR 0 1
36115: NOT
36116: IFFALSE 36120
// exit ;
36118: GO 36143
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36120: LD_ADDR_VAR 0 2
36124: PUSH
36125: LD_VAR 0 1
36129: PPUSH
36130: CALL_OW 254
36134: PUSH
36135: LD_INT 3
36137: PLUS
36138: PUSH
36139: LD_INT 6
36141: MOD
36142: ST_TO_ADDR
// end ;
36143: LD_VAR 0 2
36147: RET
// export function ReverseArray ( array ) ; var i ; begin
36148: LD_INT 0
36150: PPUSH
36151: PPUSH
// if not array then
36152: LD_VAR 0 1
36156: NOT
36157: IFFALSE 36161
// exit ;
36159: GO 36216
// result := [ ] ;
36161: LD_ADDR_VAR 0 2
36165: PUSH
36166: EMPTY
36167: ST_TO_ADDR
// for i := array downto 1 do
36168: LD_ADDR_VAR 0 3
36172: PUSH
36173: DOUBLE
36174: LD_VAR 0 1
36178: INC
36179: ST_TO_ADDR
36180: LD_INT 1
36182: PUSH
36183: FOR_DOWNTO
36184: IFFALSE 36214
// result := Join ( result , array [ i ] ) ;
36186: LD_ADDR_VAR 0 2
36190: PUSH
36191: LD_VAR 0 2
36195: PPUSH
36196: LD_VAR 0 1
36200: PUSH
36201: LD_VAR 0 3
36205: ARRAY
36206: PPUSH
36207: CALL 41058 0 2
36211: ST_TO_ADDR
36212: GO 36183
36214: POP
36215: POP
// end ;
36216: LD_VAR 0 2
36220: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36221: LD_INT 0
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
36228: PPUSH
// if not unit or not hexes then
36229: LD_VAR 0 1
36233: NOT
36234: IFTRUE 36243
36236: PUSH
36237: LD_VAR 0 2
36241: NOT
36242: OR
36243: IFFALSE 36247
// exit ;
36245: GO 36370
// dist := 9999 ;
36247: LD_ADDR_VAR 0 5
36251: PUSH
36252: LD_INT 9999
36254: ST_TO_ADDR
// for i = 1 to hexes do
36255: LD_ADDR_VAR 0 4
36259: PUSH
36260: DOUBLE
36261: LD_INT 1
36263: DEC
36264: ST_TO_ADDR
36265: LD_VAR 0 2
36269: PUSH
36270: FOR_TO
36271: IFFALSE 36358
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36273: LD_ADDR_VAR 0 6
36277: PUSH
36278: LD_VAR 0 1
36282: PPUSH
36283: LD_VAR 0 2
36287: PUSH
36288: LD_VAR 0 4
36292: ARRAY
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: PPUSH
36298: LD_VAR 0 2
36302: PUSH
36303: LD_VAR 0 4
36307: ARRAY
36308: PUSH
36309: LD_INT 2
36311: ARRAY
36312: PPUSH
36313: CALL_OW 297
36317: ST_TO_ADDR
// if tdist < dist then
36318: LD_VAR 0 6
36322: PUSH
36323: LD_VAR 0 5
36327: LESS
36328: IFFALSE 36356
// begin hex := hexes [ i ] ;
36330: LD_ADDR_VAR 0 8
36334: PUSH
36335: LD_VAR 0 2
36339: PUSH
36340: LD_VAR 0 4
36344: ARRAY
36345: ST_TO_ADDR
// dist := tdist ;
36346: LD_ADDR_VAR 0 5
36350: PUSH
36351: LD_VAR 0 6
36355: ST_TO_ADDR
// end ; end ;
36356: GO 36270
36358: POP
36359: POP
// result := hex ;
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_VAR 0 8
36369: ST_TO_ADDR
// end ;
36370: LD_VAR 0 3
36374: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36379: LD_VAR 0 1
36383: NOT
36384: IFTRUE 36423
36386: PUSH
36387: LD_VAR 0 1
36391: PUSH
36392: LD_INT 21
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 23
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PPUSH
36416: CALL_OW 69
36420: IN
36421: NOT
36422: OR
36423: IFFALSE 36427
// exit ;
36425: GO 36474
// for i = 1 to 3 do
36427: LD_ADDR_VAR 0 3
36431: PUSH
36432: DOUBLE
36433: LD_INT 1
36435: DEC
36436: ST_TO_ADDR
36437: LD_INT 3
36439: PUSH
36440: FOR_TO
36441: IFFALSE 36472
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36443: LD_VAR 0 1
36447: PPUSH
36448: CALL_OW 250
36452: PPUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 251
36462: PPUSH
36463: LD_INT 1
36465: PPUSH
36466: CALL_OW 453
36470: GO 36440
36472: POP
36473: POP
// end ;
36474: LD_VAR 0 2
36478: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36479: LD_INT 0
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
36486: PPUSH
// if not unit or not enemy_unit then
36487: LD_VAR 0 1
36491: NOT
36492: IFTRUE 36501
36494: PUSH
36495: LD_VAR 0 2
36499: NOT
36500: OR
36501: IFFALSE 36505
// exit ;
36503: GO 36976
// if GetLives ( i ) < 250 then
36505: LD_VAR 0 4
36509: PPUSH
36510: CALL_OW 256
36514: PUSH
36515: LD_INT 250
36517: LESS
36518: IFFALSE 36531
// begin ComAutodestruct ( i ) ;
36520: LD_VAR 0 4
36524: PPUSH
36525: CALL 36375 0 1
// exit ;
36529: GO 36976
// end ; x := GetX ( enemy_unit ) ;
36531: LD_ADDR_VAR 0 7
36535: PUSH
36536: LD_VAR 0 2
36540: PPUSH
36541: CALL_OW 250
36545: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36546: LD_ADDR_VAR 0 8
36550: PUSH
36551: LD_VAR 0 2
36555: PPUSH
36556: CALL_OW 251
36560: ST_TO_ADDR
// if not x or not y then
36561: LD_VAR 0 7
36565: NOT
36566: IFTRUE 36575
36568: PUSH
36569: LD_VAR 0 8
36573: NOT
36574: OR
36575: IFFALSE 36579
// exit ;
36577: GO 36976
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36579: LD_ADDR_VAR 0 6
36583: PUSH
36584: LD_VAR 0 7
36588: PPUSH
36589: LD_INT 0
36591: PPUSH
36592: LD_INT 4
36594: PPUSH
36595: CALL_OW 272
36599: PUSH
36600: LD_VAR 0 8
36604: PPUSH
36605: LD_INT 0
36607: PPUSH
36608: LD_INT 4
36610: PPUSH
36611: CALL_OW 273
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_VAR 0 7
36624: PPUSH
36625: LD_INT 1
36627: PPUSH
36628: LD_INT 4
36630: PPUSH
36631: CALL_OW 272
36635: PUSH
36636: LD_VAR 0 8
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: LD_INT 4
36646: PPUSH
36647: CALL_OW 273
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_VAR 0 7
36660: PPUSH
36661: LD_INT 2
36663: PPUSH
36664: LD_INT 4
36666: PPUSH
36667: CALL_OW 272
36671: PUSH
36672: LD_VAR 0 8
36676: PPUSH
36677: LD_INT 2
36679: PPUSH
36680: LD_INT 4
36682: PPUSH
36683: CALL_OW 273
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_VAR 0 7
36696: PPUSH
36697: LD_INT 3
36699: PPUSH
36700: LD_INT 4
36702: PPUSH
36703: CALL_OW 272
36707: PUSH
36708: LD_VAR 0 8
36712: PPUSH
36713: LD_INT 3
36715: PPUSH
36716: LD_INT 4
36718: PPUSH
36719: CALL_OW 273
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_VAR 0 7
36732: PPUSH
36733: LD_INT 4
36735: PPUSH
36736: LD_INT 4
36738: PPUSH
36739: CALL_OW 272
36743: PUSH
36744: LD_VAR 0 8
36748: PPUSH
36749: LD_INT 4
36751: PPUSH
36752: LD_INT 4
36754: PPUSH
36755: CALL_OW 273
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_VAR 0 7
36768: PPUSH
36769: LD_INT 5
36771: PPUSH
36772: LD_INT 4
36774: PPUSH
36775: CALL_OW 272
36779: PUSH
36780: LD_VAR 0 8
36784: PPUSH
36785: LD_INT 5
36787: PPUSH
36788: LD_INT 4
36790: PPUSH
36791: CALL_OW 273
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: ST_TO_ADDR
// for i = tmp downto 1 do
36808: LD_ADDR_VAR 0 4
36812: PUSH
36813: DOUBLE
36814: LD_VAR 0 6
36818: INC
36819: ST_TO_ADDR
36820: LD_INT 1
36822: PUSH
36823: FOR_DOWNTO
36824: IFFALSE 36927
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36826: LD_VAR 0 6
36830: PUSH
36831: LD_VAR 0 4
36835: ARRAY
36836: PUSH
36837: LD_INT 1
36839: ARRAY
36840: PPUSH
36841: LD_VAR 0 6
36845: PUSH
36846: LD_VAR 0 4
36850: ARRAY
36851: PUSH
36852: LD_INT 2
36854: ARRAY
36855: PPUSH
36856: CALL_OW 488
36860: NOT
36861: IFTRUE 36903
36863: PUSH
36864: LD_VAR 0 6
36868: PUSH
36869: LD_VAR 0 4
36873: ARRAY
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: LD_VAR 0 6
36883: PUSH
36884: LD_VAR 0 4
36888: ARRAY
36889: PUSH
36890: LD_INT 2
36892: ARRAY
36893: PPUSH
36894: CALL_OW 428
36898: PUSH
36899: LD_INT 0
36901: NONEQUAL
36902: OR
36903: IFFALSE 36925
// tmp := Delete ( tmp , i ) ;
36905: LD_ADDR_VAR 0 6
36909: PUSH
36910: LD_VAR 0 6
36914: PPUSH
36915: LD_VAR 0 4
36919: PPUSH
36920: CALL_OW 3
36924: ST_TO_ADDR
36925: GO 36823
36927: POP
36928: POP
// j := GetClosestHex ( unit , tmp ) ;
36929: LD_ADDR_VAR 0 5
36933: PUSH
36934: LD_VAR 0 1
36938: PPUSH
36939: LD_VAR 0 6
36943: PPUSH
36944: CALL 36221 0 2
36948: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_VAR 0 5
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_VAR 0 5
36967: PUSH
36968: LD_INT 2
36970: ARRAY
36971: PPUSH
36972: CALL_OW 111
// end ;
36976: LD_VAR 0 3
36980: RET
// export function PrepareApemanSoldier ( ) ; begin
36981: LD_INT 0
36983: PPUSH
// uc_nation := 0 ;
36984: LD_ADDR_OWVAR 21
36988: PUSH
36989: LD_INT 0
36991: ST_TO_ADDR
// hc_sex := sex_male ;
36992: LD_ADDR_OWVAR 27
36996: PUSH
36997: LD_INT 1
36999: ST_TO_ADDR
// hc_name :=  ;
37000: LD_ADDR_OWVAR 26
37004: PUSH
37005: LD_STRING 
37007: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37008: LD_ADDR_OWVAR 28
37012: PUSH
37013: LD_INT 15
37015: ST_TO_ADDR
// hc_gallery :=  ;
37016: LD_ADDR_OWVAR 33
37020: PUSH
37021: LD_STRING 
37023: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37024: LD_ADDR_OWVAR 31
37028: PUSH
37029: LD_INT 0
37031: PPUSH
37032: LD_INT 3
37034: PPUSH
37035: CALL_OW 12
37039: PUSH
37040: LD_INT 0
37042: PPUSH
37043: LD_INT 3
37045: PPUSH
37046: CALL_OW 12
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37063: LD_ADDR_OWVAR 29
37067: PUSH
37068: LD_INT 12
37070: PUSH
37071: LD_INT 12
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: ST_TO_ADDR
// end ;
37078: LD_VAR 0 1
37082: RET
// export function PrepareApemanEngineer ( ) ; begin
37083: LD_INT 0
37085: PPUSH
// uc_nation := 0 ;
37086: LD_ADDR_OWVAR 21
37090: PUSH
37091: LD_INT 0
37093: ST_TO_ADDR
// hc_sex := sex_male ;
37094: LD_ADDR_OWVAR 27
37098: PUSH
37099: LD_INT 1
37101: ST_TO_ADDR
// hc_name :=  ;
37102: LD_ADDR_OWVAR 26
37106: PUSH
37107: LD_STRING 
37109: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37110: LD_ADDR_OWVAR 28
37114: PUSH
37115: LD_INT 16
37117: ST_TO_ADDR
// hc_gallery :=  ;
37118: LD_ADDR_OWVAR 33
37122: PUSH
37123: LD_STRING 
37125: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37126: LD_ADDR_OWVAR 31
37130: PUSH
37131: LD_INT 0
37133: PPUSH
37134: LD_INT 3
37136: PPUSH
37137: CALL_OW 12
37141: PUSH
37142: LD_INT 0
37144: PPUSH
37145: LD_INT 3
37147: PPUSH
37148: CALL_OW 12
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37165: LD_ADDR_OWVAR 29
37169: PUSH
37170: LD_INT 12
37172: PUSH
37173: LD_INT 12
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: ST_TO_ADDR
// end ;
37180: LD_VAR 0 1
37184: RET
// export function PrepareApeman ( agressivity ) ; begin
37185: LD_INT 0
37187: PPUSH
// uc_side := 0 ;
37188: LD_ADDR_OWVAR 20
37192: PUSH
37193: LD_INT 0
37195: ST_TO_ADDR
// uc_nation := 0 ;
37196: LD_ADDR_OWVAR 21
37200: PUSH
37201: LD_INT 0
37203: ST_TO_ADDR
// hc_sex := sex_male ;
37204: LD_ADDR_OWVAR 27
37208: PUSH
37209: LD_INT 1
37211: ST_TO_ADDR
// hc_class := class_apeman ;
37212: LD_ADDR_OWVAR 28
37216: PUSH
37217: LD_INT 12
37219: ST_TO_ADDR
// hc_gallery :=  ;
37220: LD_ADDR_OWVAR 33
37224: PUSH
37225: LD_STRING 
37227: ST_TO_ADDR
// hc_name :=  ;
37228: LD_ADDR_OWVAR 26
37232: PUSH
37233: LD_STRING 
37235: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37236: LD_ADDR_OWVAR 29
37240: PUSH
37241: LD_INT 12
37243: PUSH
37244: LD_INT 12
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: ST_TO_ADDR
// if agressivity = 0 then
37251: LD_VAR 0 1
37255: PUSH
37256: LD_INT 0
37258: EQUAL
37259: IFFALSE 37271
// hc_agressivity := 0 else
37261: LD_ADDR_OWVAR 35
37265: PUSH
37266: LD_INT 0
37268: ST_TO_ADDR
37269: GO 37292
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37271: LD_ADDR_OWVAR 35
37275: PUSH
37276: LD_VAR 0 1
37280: NEG
37281: PPUSH
37282: LD_VAR 0 1
37286: PPUSH
37287: CALL_OW 12
37291: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37292: LD_ADDR_OWVAR 31
37296: PUSH
37297: LD_INT 0
37299: PPUSH
37300: LD_INT 3
37302: PPUSH
37303: CALL_OW 12
37307: PUSH
37308: LD_INT 0
37310: PPUSH
37311: LD_INT 3
37313: PPUSH
37314: CALL_OW 12
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// end ;
37331: LD_VAR 0 2
37335: RET
// export function PrepareTiger ( agressivity ) ; begin
37336: LD_INT 0
37338: PPUSH
// uc_side := 0 ;
37339: LD_ADDR_OWVAR 20
37343: PUSH
37344: LD_INT 0
37346: ST_TO_ADDR
// uc_nation := 0 ;
37347: LD_ADDR_OWVAR 21
37351: PUSH
37352: LD_INT 0
37354: ST_TO_ADDR
// InitHc ;
37355: CALL_OW 19
// hc_class := class_tiger ;
37359: LD_ADDR_OWVAR 28
37363: PUSH
37364: LD_INT 14
37366: ST_TO_ADDR
// hc_gallery :=  ;
37367: LD_ADDR_OWVAR 33
37371: PUSH
37372: LD_STRING 
37374: ST_TO_ADDR
// hc_name :=  ;
37375: LD_ADDR_OWVAR 26
37379: PUSH
37380: LD_STRING 
37382: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37383: LD_ADDR_OWVAR 35
37387: PUSH
37388: LD_VAR 0 1
37392: NEG
37393: PPUSH
37394: LD_VAR 0 1
37398: PPUSH
37399: CALL_OW 12
37403: ST_TO_ADDR
// end ;
37404: LD_VAR 0 2
37408: RET
// export function PrepareEnchidna ( ) ; begin
37409: LD_INT 0
37411: PPUSH
// uc_side := 0 ;
37412: LD_ADDR_OWVAR 20
37416: PUSH
37417: LD_INT 0
37419: ST_TO_ADDR
// uc_nation := 0 ;
37420: LD_ADDR_OWVAR 21
37424: PUSH
37425: LD_INT 0
37427: ST_TO_ADDR
// InitHc ;
37428: CALL_OW 19
// hc_class := class_baggie ;
37432: LD_ADDR_OWVAR 28
37436: PUSH
37437: LD_INT 13
37439: ST_TO_ADDR
// hc_gallery :=  ;
37440: LD_ADDR_OWVAR 33
37444: PUSH
37445: LD_STRING 
37447: ST_TO_ADDR
// hc_name :=  ;
37448: LD_ADDR_OWVAR 26
37452: PUSH
37453: LD_STRING 
37455: ST_TO_ADDR
// end ;
37456: LD_VAR 0 1
37460: RET
// export function PrepareFrog ( ) ; begin
37461: LD_INT 0
37463: PPUSH
// uc_side := 0 ;
37464: LD_ADDR_OWVAR 20
37468: PUSH
37469: LD_INT 0
37471: ST_TO_ADDR
// uc_nation := 0 ;
37472: LD_ADDR_OWVAR 21
37476: PUSH
37477: LD_INT 0
37479: ST_TO_ADDR
// InitHc ;
37480: CALL_OW 19
// hc_class := class_frog ;
37484: LD_ADDR_OWVAR 28
37488: PUSH
37489: LD_INT 19
37491: ST_TO_ADDR
// hc_gallery :=  ;
37492: LD_ADDR_OWVAR 33
37496: PUSH
37497: LD_STRING 
37499: ST_TO_ADDR
// hc_name :=  ;
37500: LD_ADDR_OWVAR 26
37504: PUSH
37505: LD_STRING 
37507: ST_TO_ADDR
// end ;
37508: LD_VAR 0 1
37512: RET
// export function PrepareFish ( ) ; begin
37513: LD_INT 0
37515: PPUSH
// uc_side := 0 ;
37516: LD_ADDR_OWVAR 20
37520: PUSH
37521: LD_INT 0
37523: ST_TO_ADDR
// uc_nation := 0 ;
37524: LD_ADDR_OWVAR 21
37528: PUSH
37529: LD_INT 0
37531: ST_TO_ADDR
// InitHc ;
37532: CALL_OW 19
// hc_class := class_fish ;
37536: LD_ADDR_OWVAR 28
37540: PUSH
37541: LD_INT 20
37543: ST_TO_ADDR
// hc_gallery :=  ;
37544: LD_ADDR_OWVAR 33
37548: PUSH
37549: LD_STRING 
37551: ST_TO_ADDR
// hc_name :=  ;
37552: LD_ADDR_OWVAR 26
37556: PUSH
37557: LD_STRING 
37559: ST_TO_ADDR
// end ;
37560: LD_VAR 0 1
37564: RET
// export function PrepareBird ( ) ; begin
37565: LD_INT 0
37567: PPUSH
// uc_side := 0 ;
37568: LD_ADDR_OWVAR 20
37572: PUSH
37573: LD_INT 0
37575: ST_TO_ADDR
// uc_nation := 0 ;
37576: LD_ADDR_OWVAR 21
37580: PUSH
37581: LD_INT 0
37583: ST_TO_ADDR
// InitHc ;
37584: CALL_OW 19
// hc_class := class_phororhacos ;
37588: LD_ADDR_OWVAR 28
37592: PUSH
37593: LD_INT 18
37595: ST_TO_ADDR
// hc_gallery :=  ;
37596: LD_ADDR_OWVAR 33
37600: PUSH
37601: LD_STRING 
37603: ST_TO_ADDR
// hc_name :=  ;
37604: LD_ADDR_OWVAR 26
37608: PUSH
37609: LD_STRING 
37611: ST_TO_ADDR
// end ;
37612: LD_VAR 0 1
37616: RET
// export function PrepareHorse ( ) ; begin
37617: LD_INT 0
37619: PPUSH
// uc_side := 0 ;
37620: LD_ADDR_OWVAR 20
37624: PUSH
37625: LD_INT 0
37627: ST_TO_ADDR
// uc_nation := 0 ;
37628: LD_ADDR_OWVAR 21
37632: PUSH
37633: LD_INT 0
37635: ST_TO_ADDR
// InitHc ;
37636: CALL_OW 19
// hc_class := class_horse ;
37640: LD_ADDR_OWVAR 28
37644: PUSH
37645: LD_INT 21
37647: ST_TO_ADDR
// hc_gallery :=  ;
37648: LD_ADDR_OWVAR 33
37652: PUSH
37653: LD_STRING 
37655: ST_TO_ADDR
// hc_name :=  ;
37656: LD_ADDR_OWVAR 26
37660: PUSH
37661: LD_STRING 
37663: ST_TO_ADDR
// end ;
37664: LD_VAR 0 1
37668: RET
// export function PrepareMastodont ( ) ; begin
37669: LD_INT 0
37671: PPUSH
// uc_side := 0 ;
37672: LD_ADDR_OWVAR 20
37676: PUSH
37677: LD_INT 0
37679: ST_TO_ADDR
// uc_nation := 0 ;
37680: LD_ADDR_OWVAR 21
37684: PUSH
37685: LD_INT 0
37687: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37688: LD_ADDR_OWVAR 37
37692: PUSH
37693: LD_INT 31
37695: ST_TO_ADDR
// vc_control := control_rider ;
37696: LD_ADDR_OWVAR 38
37700: PUSH
37701: LD_INT 4
37703: ST_TO_ADDR
// end ;
37704: LD_VAR 0 1
37708: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37709: LD_INT 0
37711: PPUSH
37712: PPUSH
37713: PPUSH
// uc_side = 0 ;
37714: LD_ADDR_OWVAR 20
37718: PUSH
37719: LD_INT 0
37721: ST_TO_ADDR
// uc_nation = 0 ;
37722: LD_ADDR_OWVAR 21
37726: PUSH
37727: LD_INT 0
37729: ST_TO_ADDR
// InitHc_All ( ) ;
37730: CALL_OW 584
// InitVc ;
37734: CALL_OW 20
// if mastodonts then
37738: LD_VAR 0 6
37742: IFFALSE 37809
// for i = 1 to mastodonts do
37744: LD_ADDR_VAR 0 11
37748: PUSH
37749: DOUBLE
37750: LD_INT 1
37752: DEC
37753: ST_TO_ADDR
37754: LD_VAR 0 6
37758: PUSH
37759: FOR_TO
37760: IFFALSE 37807
// begin vc_chassis := 31 ;
37762: LD_ADDR_OWVAR 37
37766: PUSH
37767: LD_INT 31
37769: ST_TO_ADDR
// vc_control := control_rider ;
37770: LD_ADDR_OWVAR 38
37774: PUSH
37775: LD_INT 4
37777: ST_TO_ADDR
// animal := CreateVehicle ;
37778: LD_ADDR_VAR 0 12
37782: PUSH
37783: CALL_OW 45
37787: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37788: LD_VAR 0 12
37792: PPUSH
37793: LD_VAR 0 8
37797: PPUSH
37798: LD_INT 0
37800: PPUSH
37801: CALL 39951 0 3
// end ;
37805: GO 37759
37807: POP
37808: POP
// if horses then
37809: LD_VAR 0 5
37813: IFFALSE 37880
// for i = 1 to horses do
37815: LD_ADDR_VAR 0 11
37819: PUSH
37820: DOUBLE
37821: LD_INT 1
37823: DEC
37824: ST_TO_ADDR
37825: LD_VAR 0 5
37829: PUSH
37830: FOR_TO
37831: IFFALSE 37878
// begin hc_class := 21 ;
37833: LD_ADDR_OWVAR 28
37837: PUSH
37838: LD_INT 21
37840: ST_TO_ADDR
// hc_gallery :=  ;
37841: LD_ADDR_OWVAR 33
37845: PUSH
37846: LD_STRING 
37848: ST_TO_ADDR
// animal := CreateHuman ;
37849: LD_ADDR_VAR 0 12
37853: PUSH
37854: CALL_OW 44
37858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37859: LD_VAR 0 12
37863: PPUSH
37864: LD_VAR 0 8
37868: PPUSH
37869: LD_INT 0
37871: PPUSH
37872: CALL 39951 0 3
// end ;
37876: GO 37830
37878: POP
37879: POP
// if birds then
37880: LD_VAR 0 1
37884: IFFALSE 37951
// for i = 1 to birds do
37886: LD_ADDR_VAR 0 11
37890: PUSH
37891: DOUBLE
37892: LD_INT 1
37894: DEC
37895: ST_TO_ADDR
37896: LD_VAR 0 1
37900: PUSH
37901: FOR_TO
37902: IFFALSE 37949
// begin hc_class := 18 ;
37904: LD_ADDR_OWVAR 28
37908: PUSH
37909: LD_INT 18
37911: ST_TO_ADDR
// hc_gallery =  ;
37912: LD_ADDR_OWVAR 33
37916: PUSH
37917: LD_STRING 
37919: ST_TO_ADDR
// animal := CreateHuman ;
37920: LD_ADDR_VAR 0 12
37924: PUSH
37925: CALL_OW 44
37929: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37930: LD_VAR 0 12
37934: PPUSH
37935: LD_VAR 0 8
37939: PPUSH
37940: LD_INT 0
37942: PPUSH
37943: CALL 39951 0 3
// end ;
37947: GO 37901
37949: POP
37950: POP
// if tigers then
37951: LD_VAR 0 2
37955: IFFALSE 38039
// for i = 1 to tigers do
37957: LD_ADDR_VAR 0 11
37961: PUSH
37962: DOUBLE
37963: LD_INT 1
37965: DEC
37966: ST_TO_ADDR
37967: LD_VAR 0 2
37971: PUSH
37972: FOR_TO
37973: IFFALSE 38037
// begin hc_class = class_tiger ;
37975: LD_ADDR_OWVAR 28
37979: PUSH
37980: LD_INT 14
37982: ST_TO_ADDR
// hc_gallery =  ;
37983: LD_ADDR_OWVAR 33
37987: PUSH
37988: LD_STRING 
37990: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37991: LD_ADDR_OWVAR 35
37995: PUSH
37996: LD_INT 7
37998: NEG
37999: PPUSH
38000: LD_INT 7
38002: PPUSH
38003: CALL_OW 12
38007: ST_TO_ADDR
// animal := CreateHuman ;
38008: LD_ADDR_VAR 0 12
38012: PUSH
38013: CALL_OW 44
38017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38018: LD_VAR 0 12
38022: PPUSH
38023: LD_VAR 0 8
38027: PPUSH
38028: LD_INT 0
38030: PPUSH
38031: CALL 39951 0 3
// end ;
38035: GO 37972
38037: POP
38038: POP
// if apemans then
38039: LD_VAR 0 3
38043: IFFALSE 38166
// for i = 1 to apemans do
38045: LD_ADDR_VAR 0 11
38049: PUSH
38050: DOUBLE
38051: LD_INT 1
38053: DEC
38054: ST_TO_ADDR
38055: LD_VAR 0 3
38059: PUSH
38060: FOR_TO
38061: IFFALSE 38164
// begin hc_class = class_apeman ;
38063: LD_ADDR_OWVAR 28
38067: PUSH
38068: LD_INT 12
38070: ST_TO_ADDR
// hc_gallery =  ;
38071: LD_ADDR_OWVAR 33
38075: PUSH
38076: LD_STRING 
38078: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38079: LD_ADDR_OWVAR 35
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PPUSH
38088: LD_INT 2
38090: PPUSH
38091: CALL_OW 12
38095: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38096: LD_ADDR_OWVAR 31
38100: PUSH
38101: LD_INT 1
38103: PPUSH
38104: LD_INT 3
38106: PPUSH
38107: CALL_OW 12
38111: PUSH
38112: LD_INT 1
38114: PPUSH
38115: LD_INT 3
38117: PPUSH
38118: CALL_OW 12
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// animal := CreateHuman ;
38135: LD_ADDR_VAR 0 12
38139: PUSH
38140: CALL_OW 44
38144: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38145: LD_VAR 0 12
38149: PPUSH
38150: LD_VAR 0 8
38154: PPUSH
38155: LD_INT 0
38157: PPUSH
38158: CALL 39951 0 3
// end ;
38162: GO 38060
38164: POP
38165: POP
// if enchidnas then
38166: LD_VAR 0 4
38170: IFFALSE 38237
// for i = 1 to enchidnas do
38172: LD_ADDR_VAR 0 11
38176: PUSH
38177: DOUBLE
38178: LD_INT 1
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 4
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38235
// begin hc_class = 13 ;
38190: LD_ADDR_OWVAR 28
38194: PUSH
38195: LD_INT 13
38197: ST_TO_ADDR
// hc_gallery =  ;
38198: LD_ADDR_OWVAR 33
38202: PUSH
38203: LD_STRING 
38205: ST_TO_ADDR
// animal := CreateHuman ;
38206: LD_ADDR_VAR 0 12
38210: PUSH
38211: CALL_OW 44
38215: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38216: LD_VAR 0 12
38220: PPUSH
38221: LD_VAR 0 8
38225: PPUSH
38226: LD_INT 0
38228: PPUSH
38229: CALL 39951 0 3
// end ;
38233: GO 38187
38235: POP
38236: POP
// if fishes then
38237: LD_VAR 0 7
38241: IFFALSE 38308
// for i = 1 to fishes do
38243: LD_ADDR_VAR 0 11
38247: PUSH
38248: DOUBLE
38249: LD_INT 1
38251: DEC
38252: ST_TO_ADDR
38253: LD_VAR 0 7
38257: PUSH
38258: FOR_TO
38259: IFFALSE 38306
// begin hc_class = 20 ;
38261: LD_ADDR_OWVAR 28
38265: PUSH
38266: LD_INT 20
38268: ST_TO_ADDR
// hc_gallery =  ;
38269: LD_ADDR_OWVAR 33
38273: PUSH
38274: LD_STRING 
38276: ST_TO_ADDR
// animal := CreateHuman ;
38277: LD_ADDR_VAR 0 12
38281: PUSH
38282: CALL_OW 44
38286: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38287: LD_VAR 0 12
38291: PPUSH
38292: LD_VAR 0 9
38296: PPUSH
38297: LD_INT 0
38299: PPUSH
38300: CALL 39951 0 3
// end ;
38304: GO 38258
38306: POP
38307: POP
// end ;
38308: LD_VAR 0 10
38312: RET
// export function WantHeal ( sci , unit ) ; begin
38313: LD_INT 0
38315: PPUSH
// if GetTaskList ( sci ) > 0 then
38316: LD_VAR 0 1
38320: PPUSH
38321: CALL_OW 437
38325: PUSH
38326: LD_INT 0
38328: GREATER
38329: IFFALSE 38401
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38331: LD_VAR 0 1
38335: PPUSH
38336: CALL_OW 437
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: PUSH
38345: LD_INT 1
38347: ARRAY
38348: PUSH
38349: LD_STRING l
38351: EQUAL
38352: IFFALSE 38379
38354: PUSH
38355: LD_VAR 0 1
38359: PPUSH
38360: CALL_OW 437
38364: PUSH
38365: LD_INT 1
38367: ARRAY
38368: PUSH
38369: LD_INT 4
38371: ARRAY
38372: PUSH
38373: LD_VAR 0 2
38377: EQUAL
38378: AND
38379: IFFALSE 38391
// result := true else
38381: LD_ADDR_VAR 0 3
38385: PUSH
38386: LD_INT 1
38388: ST_TO_ADDR
38389: GO 38399
// result := false ;
38391: LD_ADDR_VAR 0 3
38395: PUSH
38396: LD_INT 0
38398: ST_TO_ADDR
// end else
38399: GO 38409
// result := false ;
38401: LD_ADDR_VAR 0 3
38405: PUSH
38406: LD_INT 0
38408: ST_TO_ADDR
// end ;
38409: LD_VAR 0 3
38413: RET
// export function HealTarget ( sci ) ; begin
38414: LD_INT 0
38416: PPUSH
// if not sci then
38417: LD_VAR 0 1
38421: NOT
38422: IFFALSE 38426
// exit ;
38424: GO 38491
// result := 0 ;
38426: LD_ADDR_VAR 0 2
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// if GetTaskList ( sci ) then
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 437
38443: IFFALSE 38491
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38445: LD_VAR 0 1
38449: PPUSH
38450: CALL_OW 437
38454: PUSH
38455: LD_INT 1
38457: ARRAY
38458: PUSH
38459: LD_INT 1
38461: ARRAY
38462: PUSH
38463: LD_STRING l
38465: EQUAL
38466: IFFALSE 38491
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38468: LD_ADDR_VAR 0 2
38472: PUSH
38473: LD_VAR 0 1
38477: PPUSH
38478: CALL_OW 437
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PUSH
38487: LD_INT 4
38489: ARRAY
38490: ST_TO_ADDR
// end ;
38491: LD_VAR 0 2
38495: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38496: LD_INT 0
38498: PPUSH
38499: PPUSH
38500: PPUSH
38501: PPUSH
// if not base_units then
38502: LD_VAR 0 1
38506: NOT
38507: IFFALSE 38511
// exit ;
38509: GO 38598
// result := false ;
38511: LD_ADDR_VAR 0 2
38515: PUSH
38516: LD_INT 0
38518: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38519: LD_ADDR_VAR 0 5
38523: PUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: LD_INT 21
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PPUSH
38539: CALL_OW 72
38543: ST_TO_ADDR
// if not tmp then
38544: LD_VAR 0 5
38548: NOT
38549: IFFALSE 38553
// exit ;
38551: GO 38598
// for i in tmp do
38553: LD_ADDR_VAR 0 3
38557: PUSH
38558: LD_VAR 0 5
38562: PUSH
38563: FOR_IN
38564: IFFALSE 38596
// begin result := EnemyInRange ( i , 22 ) ;
38566: LD_ADDR_VAR 0 2
38570: PUSH
38571: LD_VAR 0 3
38575: PPUSH
38576: LD_INT 22
38578: PPUSH
38579: CALL 36023 0 2
38583: ST_TO_ADDR
// if result then
38584: LD_VAR 0 2
38588: IFFALSE 38594
// exit ;
38590: POP
38591: POP
38592: GO 38598
// end ;
38594: GO 38563
38596: POP
38597: POP
// end ;
38598: LD_VAR 0 2
38602: RET
// export function FilterByTag ( units , tag ) ; begin
38603: LD_INT 0
38605: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38606: LD_ADDR_VAR 0 3
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: LD_INT 120
38618: PUSH
38619: LD_VAR 0 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 72
38632: ST_TO_ADDR
// end ;
38633: LD_VAR 0 3
38637: RET
// export function IsDriver ( un ) ; begin
38638: LD_INT 0
38640: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38641: LD_ADDR_VAR 0 2
38645: PUSH
38646: LD_VAR 0 1
38650: PUSH
38651: LD_INT 55
38653: PUSH
38654: EMPTY
38655: LIST
38656: PPUSH
38657: CALL_OW 69
38661: IN
38662: ST_TO_ADDR
// end ;
38663: LD_VAR 0 2
38667: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38668: LD_INT 0
38670: PPUSH
38671: PPUSH
// list := [ ] ;
38672: LD_ADDR_VAR 0 5
38676: PUSH
38677: EMPTY
38678: ST_TO_ADDR
// case d of 0 :
38679: LD_VAR 0 3
38683: PUSH
38684: LD_INT 0
38686: DOUBLE
38687: EQUAL
38688: IFTRUE 38692
38690: GO 38825
38692: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38693: LD_ADDR_VAR 0 5
38697: PUSH
38698: LD_VAR 0 1
38702: PUSH
38703: LD_INT 4
38705: MINUS
38706: PUSH
38707: LD_VAR 0 2
38711: PUSH
38712: LD_INT 4
38714: MINUS
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: PUSH
38724: LD_VAR 0 1
38728: PUSH
38729: LD_INT 3
38731: MINUS
38732: PUSH
38733: LD_VAR 0 2
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: LD_VAR 0 1
38750: PUSH
38751: LD_INT 4
38753: PLUS
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_INT 4
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: LD_INT 3
38775: PLUS
38776: PUSH
38777: LD_VAR 0 2
38781: PUSH
38782: LD_INT 3
38784: PLUS
38785: PUSH
38786: LD_INT 5
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: PUSH
38794: LD_VAR 0 1
38798: PUSH
38799: LD_VAR 0 2
38803: PUSH
38804: LD_INT 4
38806: PLUS
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: ST_TO_ADDR
// end ; 1 :
38823: GO 39523
38825: LD_INT 1
38827: DOUBLE
38828: EQUAL
38829: IFTRUE 38833
38831: GO 38966
38833: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38834: LD_ADDR_VAR 0 5
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_INT 4
38851: MINUS
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: LD_VAR 0 1
38865: PUSH
38866: LD_INT 3
38868: MINUS
38869: PUSH
38870: LD_VAR 0 2
38874: PUSH
38875: LD_INT 3
38877: MINUS
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 4
38894: MINUS
38895: PUSH
38896: LD_VAR 0 2
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PUSH
38909: LD_VAR 0 1
38913: PUSH
38914: LD_VAR 0 2
38918: PUSH
38919: LD_INT 3
38921: PLUS
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: LIST
38930: PUSH
38931: LD_VAR 0 1
38935: PUSH
38936: LD_INT 4
38938: PLUS
38939: PUSH
38940: LD_VAR 0 2
38944: PUSH
38945: LD_INT 4
38947: PLUS
38948: PUSH
38949: LD_INT 5
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// end ; 2 :
38964: GO 39523
38966: LD_INT 2
38968: DOUBLE
38969: EQUAL
38970: IFTRUE 38974
38972: GO 39103
38974: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38975: LD_ADDR_VAR 0 5
38979: PUSH
38980: LD_VAR 0 1
38984: PUSH
38985: LD_VAR 0 2
38989: PUSH
38990: LD_INT 3
38992: MINUS
38993: PUSH
38994: LD_INT 3
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: LD_VAR 0 1
39006: PUSH
39007: LD_INT 4
39009: PLUS
39010: PUSH
39011: LD_VAR 0 2
39015: PUSH
39016: LD_INT 4
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: LIST
39023: PUSH
39024: LD_VAR 0 1
39028: PUSH
39029: LD_VAR 0 2
39033: PUSH
39034: LD_INT 4
39036: PLUS
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: LIST
39045: PUSH
39046: LD_VAR 0 1
39050: PUSH
39051: LD_INT 3
39053: MINUS
39054: PUSH
39055: LD_VAR 0 2
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 4
39075: MINUS
39076: PUSH
39077: LD_VAR 0 2
39081: PUSH
39082: LD_INT 4
39084: MINUS
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: ST_TO_ADDR
// end ; 3 :
39101: GO 39523
39103: LD_INT 3
39105: DOUBLE
39106: EQUAL
39107: IFTRUE 39111
39109: GO 39244
39111: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39112: LD_ADDR_VAR 0 5
39116: PUSH
39117: LD_VAR 0 1
39121: PUSH
39122: LD_INT 3
39124: PLUS
39125: PUSH
39126: LD_VAR 0 2
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 4
39146: PLUS
39147: PUSH
39148: LD_VAR 0 2
39152: PUSH
39153: LD_INT 4
39155: PLUS
39156: PUSH
39157: LD_INT 5
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_INT 4
39172: MINUS
39173: PUSH
39174: LD_VAR 0 2
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 1
39191: PUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_INT 4
39199: MINUS
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: PUSH
39209: LD_VAR 0 1
39213: PUSH
39214: LD_INT 3
39216: MINUS
39217: PUSH
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 3
39225: MINUS
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// end ; 4 :
39242: GO 39523
39244: LD_INT 4
39246: DOUBLE
39247: EQUAL
39248: IFTRUE 39252
39250: GO 39385
39252: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: LD_VAR 0 1
39262: PUSH
39263: LD_VAR 0 2
39267: PUSH
39268: LD_INT 4
39270: PLUS
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: PUSH
39280: LD_VAR 0 1
39284: PUSH
39285: LD_INT 3
39287: PLUS
39288: PUSH
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 3
39296: PLUS
39297: PUSH
39298: LD_INT 5
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 1
39310: PUSH
39311: LD_INT 4
39313: PLUS
39314: PUSH
39315: LD_VAR 0 2
39319: PUSH
39320: LD_INT 4
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: PUSH
39328: LD_VAR 0 1
39332: PUSH
39333: LD_VAR 0 2
39337: PUSH
39338: LD_INT 3
39340: MINUS
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: PUSH
39350: LD_VAR 0 1
39354: PUSH
39355: LD_INT 4
39357: MINUS
39358: PUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 4
39366: MINUS
39367: PUSH
39368: LD_INT 2
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: ST_TO_ADDR
// end ; 5 :
39383: GO 39523
39385: LD_INT 5
39387: DOUBLE
39388: EQUAL
39389: IFTRUE 39393
39391: GO 39522
39393: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39394: LD_ADDR_VAR 0 5
39398: PUSH
39399: LD_VAR 0 1
39403: PUSH
39404: LD_INT 4
39406: MINUS
39407: PUSH
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: PUSH
39421: LD_VAR 0 1
39425: PUSH
39426: LD_VAR 0 2
39430: PUSH
39431: LD_INT 4
39433: MINUS
39434: PUSH
39435: LD_INT 3
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: PUSH
39443: LD_VAR 0 1
39447: PUSH
39448: LD_INT 4
39450: PLUS
39451: PUSH
39452: LD_VAR 0 2
39456: PUSH
39457: LD_INT 4
39459: PLUS
39460: PUSH
39461: LD_INT 5
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: PUSH
39469: LD_VAR 0 1
39473: PUSH
39474: LD_INT 3
39476: PLUS
39477: PUSH
39478: LD_VAR 0 2
39482: PUSH
39483: LD_INT 4
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: LD_VAR 0 1
39495: PUSH
39496: LD_VAR 0 2
39500: PUSH
39501: LD_INT 3
39503: PLUS
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: LIST
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: ST_TO_ADDR
// end ; end ;
39520: GO 39523
39522: POP
// result := list ;
39523: LD_ADDR_VAR 0 4
39527: PUSH
39528: LD_VAR 0 5
39532: ST_TO_ADDR
// end ;
39533: LD_VAR 0 4
39537: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39538: LD_INT 0
39540: PPUSH
39541: PPUSH
39542: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39543: LD_VAR 0 1
39547: NOT
39548: IFTRUE 39576
39550: PUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: LD_INT 4
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: IN
39574: NOT
39575: OR
39576: IFFALSE 39580
// exit ;
39578: GO 39663
// tmp := [ ] ;
39580: LD_ADDR_VAR 0 5
39584: PUSH
39585: EMPTY
39586: ST_TO_ADDR
// for i in units do
39587: LD_ADDR_VAR 0 4
39591: PUSH
39592: LD_VAR 0 1
39596: PUSH
39597: FOR_IN
39598: IFFALSE 39632
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39600: LD_ADDR_VAR 0 5
39604: PUSH
39605: LD_VAR 0 5
39609: PPUSH
39610: LD_VAR 0 4
39614: PPUSH
39615: LD_VAR 0 2
39619: PPUSH
39620: CALL_OW 259
39624: PPUSH
39625: CALL 41058 0 2
39629: ST_TO_ADDR
39630: GO 39597
39632: POP
39633: POP
// if not tmp then
39634: LD_VAR 0 5
39638: NOT
39639: IFFALSE 39643
// exit ;
39641: GO 39663
// result := SortListByListDesc ( units , tmp ) ;
39643: LD_ADDR_VAR 0 3
39647: PUSH
39648: LD_VAR 0 1
39652: PPUSH
39653: LD_VAR 0 5
39657: PPUSH
39658: CALL_OW 77
39662: ST_TO_ADDR
// end ;
39663: LD_VAR 0 3
39667: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39668: LD_INT 0
39670: PPUSH
39671: PPUSH
39672: PPUSH
// result := false ;
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_INT 0
39680: ST_TO_ADDR
// if not building then
39681: LD_VAR 0 2
39685: NOT
39686: IFFALSE 39690
// exit ;
39688: GO 39834
// x := GetX ( building ) ;
39690: LD_ADDR_VAR 0 4
39694: PUSH
39695: LD_VAR 0 2
39699: PPUSH
39700: CALL_OW 250
39704: ST_TO_ADDR
// y := GetY ( building ) ;
39705: LD_ADDR_VAR 0 5
39709: PUSH
39710: LD_VAR 0 2
39714: PPUSH
39715: CALL_OW 251
39719: ST_TO_ADDR
// if not x or not y then
39720: LD_VAR 0 4
39724: NOT
39725: IFTRUE 39734
39727: PUSH
39728: LD_VAR 0 5
39732: NOT
39733: OR
39734: IFFALSE 39738
// exit ;
39736: GO 39834
// if GetTaskList ( unit ) then
39738: LD_VAR 0 1
39742: PPUSH
39743: CALL_OW 437
39747: IFFALSE 39834
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39749: LD_STRING e
39751: PUSH
39752: LD_VAR 0 1
39756: PPUSH
39757: CALL_OW 437
39761: PUSH
39762: LD_INT 1
39764: ARRAY
39765: PUSH
39766: LD_INT 1
39768: ARRAY
39769: EQUAL
39770: IFFALSE 39797
39772: PUSH
39773: LD_VAR 0 4
39777: PUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: CALL_OW 437
39787: PUSH
39788: LD_INT 1
39790: ARRAY
39791: PUSH
39792: LD_INT 2
39794: ARRAY
39795: EQUAL
39796: AND
39797: IFFALSE 39824
39799: PUSH
39800: LD_VAR 0 5
39804: PUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 437
39814: PUSH
39815: LD_INT 1
39817: ARRAY
39818: PUSH
39819: LD_INT 3
39821: ARRAY
39822: EQUAL
39823: AND
39824: IFFALSE 39834
// result := true end ;
39826: LD_ADDR_VAR 0 3
39830: PUSH
39831: LD_INT 1
39833: ST_TO_ADDR
// end ;
39834: LD_VAR 0 3
39838: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39839: LD_INT 0
39841: PPUSH
// result := false ;
39842: LD_ADDR_VAR 0 4
39846: PUSH
39847: LD_INT 0
39849: ST_TO_ADDR
// if GetTaskList ( unit ) then
39850: LD_VAR 0 1
39854: PPUSH
39855: CALL_OW 437
39859: IFFALSE 39946
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39861: LD_STRING M
39863: PUSH
39864: LD_VAR 0 1
39868: PPUSH
39869: CALL_OW 437
39873: PUSH
39874: LD_INT 1
39876: ARRAY
39877: PUSH
39878: LD_INT 1
39880: ARRAY
39881: EQUAL
39882: IFFALSE 39909
39884: PUSH
39885: LD_VAR 0 2
39889: PUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 437
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: EQUAL
39908: AND
39909: IFFALSE 39936
39911: PUSH
39912: LD_VAR 0 3
39916: PUSH
39917: LD_VAR 0 1
39921: PPUSH
39922: CALL_OW 437
39926: PUSH
39927: LD_INT 1
39929: ARRAY
39930: PUSH
39931: LD_INT 3
39933: ARRAY
39934: EQUAL
39935: AND
39936: IFFALSE 39946
// result := true ;
39938: LD_ADDR_VAR 0 4
39942: PUSH
39943: LD_INT 1
39945: ST_TO_ADDR
// end ; end ;
39946: LD_VAR 0 4
39950: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39951: LD_INT 0
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
// if not unit or not area then
39957: LD_VAR 0 1
39961: NOT
39962: IFTRUE 39971
39964: PUSH
39965: LD_VAR 0 2
39969: NOT
39970: OR
39971: IFFALSE 39975
// exit ;
39973: GO 40151
// tmp := AreaToList ( area , i ) ;
39975: LD_ADDR_VAR 0 6
39979: PUSH
39980: LD_VAR 0 2
39984: PPUSH
39985: LD_VAR 0 5
39989: PPUSH
39990: CALL_OW 517
39994: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39995: LD_ADDR_VAR 0 5
39999: PUSH
40000: DOUBLE
40001: LD_INT 1
40003: DEC
40004: ST_TO_ADDR
40005: LD_VAR 0 6
40009: PUSH
40010: LD_INT 1
40012: ARRAY
40013: PUSH
40014: FOR_TO
40015: IFFALSE 40149
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40017: LD_ADDR_VAR 0 7
40021: PUSH
40022: LD_VAR 0 6
40026: PUSH
40027: LD_INT 1
40029: ARRAY
40030: PUSH
40031: LD_VAR 0 5
40035: ARRAY
40036: PUSH
40037: LD_VAR 0 6
40041: PUSH
40042: LD_INT 2
40044: ARRAY
40045: PUSH
40046: LD_VAR 0 5
40050: ARRAY
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40056: LD_INT 92
40058: PUSH
40059: LD_VAR 0 7
40063: PUSH
40064: LD_INT 1
40066: ARRAY
40067: PUSH
40068: LD_VAR 0 7
40072: PUSH
40073: LD_INT 2
40075: ARRAY
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: PPUSH
40086: CALL_OW 69
40090: PUSH
40091: LD_INT 0
40093: EQUAL
40094: IFFALSE 40147
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40096: LD_VAR 0 1
40100: PPUSH
40101: LD_VAR 0 7
40105: PUSH
40106: LD_INT 1
40108: ARRAY
40109: PPUSH
40110: LD_VAR 0 7
40114: PUSH
40115: LD_INT 2
40117: ARRAY
40118: PPUSH
40119: LD_VAR 0 3
40123: PPUSH
40124: CALL_OW 48
// result := IsPlaced ( unit ) ;
40128: LD_ADDR_VAR 0 4
40132: PUSH
40133: LD_VAR 0 1
40137: PPUSH
40138: CALL_OW 305
40142: ST_TO_ADDR
// exit ;
40143: POP
40144: POP
40145: GO 40151
// end ; end ;
40147: GO 40014
40149: POP
40150: POP
// end ;
40151: LD_VAR 0 4
40155: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40156: LD_INT 0
40158: PPUSH
40159: PPUSH
40160: PPUSH
// if not side or side > 8 then
40161: LD_VAR 0 1
40165: NOT
40166: IFTRUE 40178
40168: PUSH
40169: LD_VAR 0 1
40173: PUSH
40174: LD_INT 8
40176: GREATER
40177: OR
40178: IFFALSE 40182
// exit ;
40180: GO 40369
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40182: LD_ADDR_VAR 0 4
40186: PUSH
40187: LD_INT 22
40189: PUSH
40190: LD_VAR 0 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 21
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PPUSH
40213: CALL_OW 69
40217: ST_TO_ADDR
// if not tmp then
40218: LD_VAR 0 4
40222: NOT
40223: IFFALSE 40227
// exit ;
40225: GO 40369
// enable_addtolog := true ;
40227: LD_ADDR_OWVAR 81
40231: PUSH
40232: LD_INT 1
40234: ST_TO_ADDR
// AddToLog ( [ ) ;
40235: LD_STRING [
40237: PPUSH
40238: CALL_OW 561
// for i in tmp do
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: LD_VAR 0 4
40251: PUSH
40252: FOR_IN
40253: IFFALSE 40360
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40255: LD_STRING [
40257: PUSH
40258: LD_VAR 0 3
40262: PPUSH
40263: CALL_OW 266
40267: STR
40268: PUSH
40269: LD_STRING , 
40271: STR
40272: PUSH
40273: LD_VAR 0 3
40277: PPUSH
40278: CALL_OW 250
40282: STR
40283: PUSH
40284: LD_STRING , 
40286: STR
40287: PUSH
40288: LD_VAR 0 3
40292: PPUSH
40293: CALL_OW 251
40297: STR
40298: PUSH
40299: LD_STRING , 
40301: STR
40302: PUSH
40303: LD_VAR 0 3
40307: PPUSH
40308: CALL_OW 254
40312: STR
40313: PUSH
40314: LD_STRING , 
40316: STR
40317: PUSH
40318: LD_VAR 0 3
40322: PPUSH
40323: LD_INT 1
40325: PPUSH
40326: CALL_OW 268
40330: STR
40331: PUSH
40332: LD_STRING , 
40334: STR
40335: PUSH
40336: LD_VAR 0 3
40340: PPUSH
40341: LD_INT 2
40343: PPUSH
40344: CALL_OW 268
40348: STR
40349: PUSH
40350: LD_STRING ],
40352: STR
40353: PPUSH
40354: CALL_OW 561
// end ;
40358: GO 40252
40360: POP
40361: POP
// AddToLog ( ]; ) ;
40362: LD_STRING ];
40364: PPUSH
40365: CALL_OW 561
// end ;
40369: LD_VAR 0 2
40373: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40374: LD_INT 0
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
40380: PPUSH
// if not area or not rate or not max then
40381: LD_VAR 0 1
40385: NOT
40386: IFTRUE 40395
40388: PUSH
40389: LD_VAR 0 2
40393: NOT
40394: OR
40395: IFTRUE 40404
40397: PUSH
40398: LD_VAR 0 4
40402: NOT
40403: OR
40404: IFFALSE 40408
// exit ;
40406: GO 40597
// while 1 do
40408: LD_INT 1
40410: IFFALSE 40597
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40412: LD_ADDR_VAR 0 9
40416: PUSH
40417: LD_VAR 0 1
40421: PPUSH
40422: LD_INT 1
40424: PPUSH
40425: CALL_OW 287
40429: PUSH
40430: LD_INT 10
40432: MUL
40433: ST_TO_ADDR
// r := rate / 10 ;
40434: LD_ADDR_VAR 0 7
40438: PUSH
40439: LD_VAR 0 2
40443: PUSH
40444: LD_INT 10
40446: DIVREAL
40447: ST_TO_ADDR
// time := 1 1$00 ;
40448: LD_ADDR_VAR 0 8
40452: PUSH
40453: LD_INT 2100
40455: ST_TO_ADDR
// if amount < min then
40456: LD_VAR 0 9
40460: PUSH
40461: LD_VAR 0 3
40465: LESS
40466: IFFALSE 40484
// r := r * 2 else
40468: LD_ADDR_VAR 0 7
40472: PUSH
40473: LD_VAR 0 7
40477: PUSH
40478: LD_INT 2
40480: MUL
40481: ST_TO_ADDR
40482: GO 40510
// if amount > max then
40484: LD_VAR 0 9
40488: PUSH
40489: LD_VAR 0 4
40493: GREATER
40494: IFFALSE 40510
// r := r / 2 ;
40496: LD_ADDR_VAR 0 7
40500: PUSH
40501: LD_VAR 0 7
40505: PUSH
40506: LD_INT 2
40508: DIVREAL
40509: ST_TO_ADDR
// time := time / r ;
40510: LD_ADDR_VAR 0 8
40514: PUSH
40515: LD_VAR 0 8
40519: PUSH
40520: LD_VAR 0 7
40524: DIVREAL
40525: ST_TO_ADDR
// if time < 0 then
40526: LD_VAR 0 8
40530: PUSH
40531: LD_INT 0
40533: LESS
40534: IFFALSE 40551
// time := time * - 1 ;
40536: LD_ADDR_VAR 0 8
40540: PUSH
40541: LD_VAR 0 8
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: MUL
40550: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40551: LD_VAR 0 8
40555: PUSH
40556: LD_INT 35
40558: PPUSH
40559: LD_INT 875
40561: PPUSH
40562: CALL_OW 12
40566: PLUS
40567: PPUSH
40568: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40572: LD_INT 1
40574: PPUSH
40575: LD_INT 5
40577: PPUSH
40578: CALL_OW 12
40582: PPUSH
40583: LD_VAR 0 1
40587: PPUSH
40588: LD_INT 1
40590: PPUSH
40591: CALL_OW 55
// end ;
40595: GO 40408
// end ;
40597: LD_VAR 0 5
40601: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40602: LD_INT 0
40604: PPUSH
40605: PPUSH
40606: PPUSH
40607: PPUSH
40608: PPUSH
40609: PPUSH
40610: PPUSH
40611: PPUSH
// if not turrets or not factories then
40612: LD_VAR 0 1
40616: NOT
40617: IFTRUE 40626
40619: PUSH
40620: LD_VAR 0 2
40624: NOT
40625: OR
40626: IFFALSE 40630
// exit ;
40628: GO 40937
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40630: LD_ADDR_VAR 0 10
40634: PUSH
40635: LD_INT 5
40637: PUSH
40638: LD_INT 6
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 4
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 3
40657: PUSH
40658: LD_INT 5
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 24
40672: PUSH
40673: LD_INT 25
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 23
40682: PUSH
40683: LD_INT 27
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 42
40696: PUSH
40697: LD_INT 43
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 44
40706: PUSH
40707: LD_INT 46
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 45
40716: PUSH
40717: LD_INT 47
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: LIST
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: ST_TO_ADDR
// result := [ ] ;
40734: LD_ADDR_VAR 0 3
40738: PUSH
40739: EMPTY
40740: ST_TO_ADDR
// for i in turrets do
40741: LD_ADDR_VAR 0 4
40745: PUSH
40746: LD_VAR 0 1
40750: PUSH
40751: FOR_IN
40752: IFFALSE 40935
// begin nat := GetNation ( i ) ;
40754: LD_ADDR_VAR 0 7
40758: PUSH
40759: LD_VAR 0 4
40763: PPUSH
40764: CALL_OW 248
40768: ST_TO_ADDR
// weapon := 0 ;
40769: LD_ADDR_VAR 0 8
40773: PUSH
40774: LD_INT 0
40776: ST_TO_ADDR
// if not nat then
40777: LD_VAR 0 7
40781: NOT
40782: IFFALSE 40786
// continue ;
40784: GO 40751
// for j in list [ nat ] do
40786: LD_ADDR_VAR 0 5
40790: PUSH
40791: LD_VAR 0 10
40795: PUSH
40796: LD_VAR 0 7
40800: ARRAY
40801: PUSH
40802: FOR_IN
40803: IFFALSE 40844
// if GetBWeapon ( i ) = j [ 1 ] then
40805: LD_VAR 0 4
40809: PPUSH
40810: CALL_OW 269
40814: PUSH
40815: LD_VAR 0 5
40819: PUSH
40820: LD_INT 1
40822: ARRAY
40823: EQUAL
40824: IFFALSE 40842
// begin weapon := j [ 2 ] ;
40826: LD_ADDR_VAR 0 8
40830: PUSH
40831: LD_VAR 0 5
40835: PUSH
40836: LD_INT 2
40838: ARRAY
40839: ST_TO_ADDR
// break ;
40840: GO 40844
// end ;
40842: GO 40802
40844: POP
40845: POP
// if not weapon then
40846: LD_VAR 0 8
40850: NOT
40851: IFFALSE 40855
// continue ;
40853: GO 40751
// for k in factories do
40855: LD_ADDR_VAR 0 6
40859: PUSH
40860: LD_VAR 0 2
40864: PUSH
40865: FOR_IN
40866: IFFALSE 40931
// begin weapons := AvailableWeaponList ( k ) ;
40868: LD_ADDR_VAR 0 9
40872: PUSH
40873: LD_VAR 0 6
40877: PPUSH
40878: CALL_OW 478
40882: ST_TO_ADDR
// if not weapons then
40883: LD_VAR 0 9
40887: NOT
40888: IFFALSE 40892
// continue ;
40890: GO 40865
// if weapon in weapons then
40892: LD_VAR 0 8
40896: PUSH
40897: LD_VAR 0 9
40901: IN
40902: IFFALSE 40929
// begin result := [ i , weapon ] ;
40904: LD_ADDR_VAR 0 3
40908: PUSH
40909: LD_VAR 0 4
40913: PUSH
40914: LD_VAR 0 8
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// exit ;
40923: POP
40924: POP
40925: POP
40926: POP
40927: GO 40937
// end ; end ;
40929: GO 40865
40931: POP
40932: POP
// end ;
40933: GO 40751
40935: POP
40936: POP
// end ;
40937: LD_VAR 0 3
40941: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40942: LD_INT 0
40944: PPUSH
// if not side or side > 8 then
40945: LD_VAR 0 3
40949: NOT
40950: IFTRUE 40962
40952: PUSH
40953: LD_VAR 0 3
40957: PUSH
40958: LD_INT 8
40960: GREATER
40961: OR
40962: IFFALSE 40966
// exit ;
40964: GO 41025
// if not range then
40966: LD_VAR 0 4
40970: NOT
40971: IFFALSE 40982
// range := - 12 ;
40973: LD_ADDR_VAR 0 4
40977: PUSH
40978: LD_INT 12
40980: NEG
40981: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40982: LD_VAR 0 1
40986: PPUSH
40987: LD_VAR 0 2
40991: PPUSH
40992: LD_VAR 0 3
40996: PPUSH
40997: LD_VAR 0 4
41001: PPUSH
41002: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41006: LD_VAR 0 1
41010: PPUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: LD_VAR 0 3
41020: PPUSH
41021: CALL_OW 331
// end ;
41025: LD_VAR 0 5
41029: RET
// export function Video ( mode ) ; begin
41030: LD_INT 0
41032: PPUSH
// ingame_video = mode ;
41033: LD_ADDR_OWVAR 52
41037: PUSH
41038: LD_VAR 0 1
41042: ST_TO_ADDR
// interface_hidden = mode ;
41043: LD_ADDR_OWVAR 54
41047: PUSH
41048: LD_VAR 0 1
41052: ST_TO_ADDR
// end ;
41053: LD_VAR 0 2
41057: RET
// export function Join ( array , element ) ; begin
41058: LD_INT 0
41060: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_VAR 0 1
41070: PPUSH
41071: LD_VAR 0 1
41075: PUSH
41076: LD_INT 1
41078: PLUS
41079: PPUSH
41080: LD_VAR 0 2
41084: PPUSH
41085: CALL_OW 1
41089: ST_TO_ADDR
// end ;
41090: LD_VAR 0 3
41094: RET
// export function JoinUnion ( array , element ) ; begin
41095: LD_INT 0
41097: PPUSH
// result := array union element ;
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_VAR 0 1
41107: PUSH
41108: LD_VAR 0 2
41112: UNION
41113: ST_TO_ADDR
// end ;
41114: LD_VAR 0 3
41118: RET
// export function GetBehemoths ( side ) ; begin
41119: LD_INT 0
41121: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41122: LD_ADDR_VAR 0 2
41126: PUSH
41127: LD_INT 22
41129: PUSH
41130: LD_VAR 0 1
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 31
41141: PUSH
41142: LD_INT 25
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PPUSH
41153: CALL_OW 69
41157: ST_TO_ADDR
// end ;
41158: LD_VAR 0 2
41162: RET
// export function Shuffle ( array ) ; var i , index ; begin
41163: LD_INT 0
41165: PPUSH
41166: PPUSH
41167: PPUSH
// result := [ ] ;
41168: LD_ADDR_VAR 0 2
41172: PUSH
41173: EMPTY
41174: ST_TO_ADDR
// if not array then
41175: LD_VAR 0 1
41179: NOT
41180: IFFALSE 41184
// exit ;
41182: GO 41283
// Randomize ;
41184: CALL_OW 10
// for i = array downto 1 do
41188: LD_ADDR_VAR 0 3
41192: PUSH
41193: DOUBLE
41194: LD_VAR 0 1
41198: INC
41199: ST_TO_ADDR
41200: LD_INT 1
41202: PUSH
41203: FOR_DOWNTO
41204: IFFALSE 41281
// begin index := rand ( 1 , array ) ;
41206: LD_ADDR_VAR 0 4
41210: PUSH
41211: LD_INT 1
41213: PPUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 12
41223: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41224: LD_ADDR_VAR 0 2
41228: PUSH
41229: LD_VAR 0 2
41233: PPUSH
41234: LD_VAR 0 2
41238: PUSH
41239: LD_INT 1
41241: PLUS
41242: PPUSH
41243: LD_VAR 0 1
41247: PUSH
41248: LD_VAR 0 4
41252: ARRAY
41253: PPUSH
41254: CALL_OW 2
41258: ST_TO_ADDR
// array := Delete ( array , index ) ;
41259: LD_ADDR_VAR 0 1
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: LD_VAR 0 4
41273: PPUSH
41274: CALL_OW 3
41278: ST_TO_ADDR
// end ;
41279: GO 41203
41281: POP
41282: POP
// end ;
41283: LD_VAR 0 2
41287: RET
// export function GetBaseMaterials ( base ) ; begin
41288: LD_INT 0
41290: PPUSH
// result := [ 0 , 0 , 0 ] ;
41291: LD_ADDR_VAR 0 2
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: ST_TO_ADDR
// if not base then
41310: LD_VAR 0 1
41314: NOT
41315: IFFALSE 41319
// exit ;
41317: GO 41368
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41319: LD_ADDR_VAR 0 2
41323: PUSH
41324: LD_VAR 0 1
41328: PPUSH
41329: LD_INT 1
41331: PPUSH
41332: CALL_OW 275
41336: PUSH
41337: LD_VAR 0 1
41341: PPUSH
41342: LD_INT 2
41344: PPUSH
41345: CALL_OW 275
41349: PUSH
41350: LD_VAR 0 1
41354: PPUSH
41355: LD_INT 3
41357: PPUSH
41358: CALL_OW 275
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: ST_TO_ADDR
// end ;
41368: LD_VAR 0 2
41372: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41373: LD_INT 0
41375: PPUSH
41376: PPUSH
// result := array ;
41377: LD_ADDR_VAR 0 3
41381: PUSH
41382: LD_VAR 0 1
41386: ST_TO_ADDR
// if size >= result then
41387: LD_VAR 0 2
41391: PUSH
41392: LD_VAR 0 3
41396: GREATEREQUAL
41397: IFFALSE 41401
// exit ;
41399: GO 41451
// if size then
41401: LD_VAR 0 2
41405: IFFALSE 41451
// for i := array downto size do
41407: LD_ADDR_VAR 0 4
41411: PUSH
41412: DOUBLE
41413: LD_VAR 0 1
41417: INC
41418: ST_TO_ADDR
41419: LD_VAR 0 2
41423: PUSH
41424: FOR_DOWNTO
41425: IFFALSE 41449
// result := Delete ( result , result ) ;
41427: LD_ADDR_VAR 0 3
41431: PUSH
41432: LD_VAR 0 3
41436: PPUSH
41437: LD_VAR 0 3
41441: PPUSH
41442: CALL_OW 3
41446: ST_TO_ADDR
41447: GO 41424
41449: POP
41450: POP
// end ;
41451: LD_VAR 0 3
41455: RET
// export function ComExit ( unit ) ; var tmp ; begin
41456: LD_INT 0
41458: PPUSH
41459: PPUSH
// if not IsInUnit ( unit ) then
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 310
41469: NOT
41470: IFFALSE 41474
// exit ;
41472: GO 41534
// tmp := IsInUnit ( unit ) ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_VAR 0 1
41483: PPUSH
41484: CALL_OW 310
41488: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41489: LD_VAR 0 3
41493: PPUSH
41494: CALL_OW 247
41498: PUSH
41499: LD_INT 2
41501: EQUAL
41502: IFFALSE 41515
// ComExitVehicle ( unit ) else
41504: LD_VAR 0 1
41508: PPUSH
41509: CALL_OW 121
41513: GO 41524
// ComExitBuilding ( unit ) ;
41515: LD_VAR 0 1
41519: PPUSH
41520: CALL_OW 122
// result := tmp ;
41524: LD_ADDR_VAR 0 2
41528: PUSH
41529: LD_VAR 0 3
41533: ST_TO_ADDR
// end ;
41534: LD_VAR 0 2
41538: RET
// export function ComExitAll ( units ) ; var i ; begin
41539: LD_INT 0
41541: PPUSH
41542: PPUSH
// if not units then
41543: LD_VAR 0 1
41547: NOT
41548: IFFALSE 41552
// exit ;
41550: GO 41578
// for i in units do
41552: LD_ADDR_VAR 0 3
41556: PUSH
41557: LD_VAR 0 1
41561: PUSH
41562: FOR_IN
41563: IFFALSE 41576
// ComExit ( i ) ;
41565: LD_VAR 0 3
41569: PPUSH
41570: CALL 41456 0 1
41574: GO 41562
41576: POP
41577: POP
// end ;
41578: LD_VAR 0 2
41582: RET
// export function ResetHc ; begin
41583: LD_INT 0
41585: PPUSH
// InitHc ;
41586: CALL_OW 19
// hc_importance := 0 ;
41590: LD_ADDR_OWVAR 32
41594: PUSH
41595: LD_INT 0
41597: ST_TO_ADDR
// end ;
41598: LD_VAR 0 1
41602: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41603: LD_INT 0
41605: PPUSH
41606: PPUSH
41607: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41608: LD_ADDR_VAR 0 6
41612: PUSH
41613: LD_VAR 0 1
41617: PUSH
41618: LD_VAR 0 3
41622: PLUS
41623: PUSH
41624: LD_INT 2
41626: DIV
41627: ST_TO_ADDR
// if _x < 0 then
41628: LD_VAR 0 6
41632: PUSH
41633: LD_INT 0
41635: LESS
41636: IFFALSE 41653
// _x := _x * - 1 ;
41638: LD_ADDR_VAR 0 6
41642: PUSH
41643: LD_VAR 0 6
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: MUL
41652: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41653: LD_ADDR_VAR 0 7
41657: PUSH
41658: LD_VAR 0 2
41662: PUSH
41663: LD_VAR 0 4
41667: PLUS
41668: PUSH
41669: LD_INT 2
41671: DIV
41672: ST_TO_ADDR
// if _y < 0 then
41673: LD_VAR 0 7
41677: PUSH
41678: LD_INT 0
41680: LESS
41681: IFFALSE 41698
// _y := _y * - 1 ;
41683: LD_ADDR_VAR 0 7
41687: PUSH
41688: LD_VAR 0 7
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: MUL
41697: ST_TO_ADDR
// result := [ _x , _y ] ;
41698: LD_ADDR_VAR 0 5
41702: PUSH
41703: LD_VAR 0 6
41707: PUSH
41708: LD_VAR 0 7
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: ST_TO_ADDR
// end ;
41717: LD_VAR 0 5
41721: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41722: LD_INT 0
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
// task := GetTaskList ( unit ) ;
41728: LD_ADDR_VAR 0 7
41732: PUSH
41733: LD_VAR 0 1
41737: PPUSH
41738: CALL_OW 437
41742: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41743: LD_VAR 0 7
41747: NOT
41748: IFFALSE 41767
41750: PUSH
41751: LD_VAR 0 1
41755: PPUSH
41756: LD_VAR 0 2
41760: PPUSH
41761: CALL_OW 308
41765: NOT
41766: AND
41767: IFFALSE 41771
// exit ;
41769: GO 41889
// if IsInArea ( unit , area ) then
41771: LD_VAR 0 1
41775: PPUSH
41776: LD_VAR 0 2
41780: PPUSH
41781: CALL_OW 308
41785: IFFALSE 41803
// begin ComMoveToArea ( unit , goAway ) ;
41787: LD_VAR 0 1
41791: PPUSH
41792: LD_VAR 0 3
41796: PPUSH
41797: CALL_OW 113
// exit ;
41801: GO 41889
// end ; if task [ 1 ] [ 1 ] <> M then
41803: LD_VAR 0 7
41807: PUSH
41808: LD_INT 1
41810: ARRAY
41811: PUSH
41812: LD_INT 1
41814: ARRAY
41815: PUSH
41816: LD_STRING M
41818: NONEQUAL
41819: IFFALSE 41823
// exit ;
41821: GO 41889
// x := task [ 1 ] [ 2 ] ;
41823: LD_ADDR_VAR 0 5
41827: PUSH
41828: LD_VAR 0 7
41832: PUSH
41833: LD_INT 1
41835: ARRAY
41836: PUSH
41837: LD_INT 2
41839: ARRAY
41840: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_VAR 0 7
41850: PUSH
41851: LD_INT 1
41853: ARRAY
41854: PUSH
41855: LD_INT 3
41857: ARRAY
41858: ST_TO_ADDR
// if InArea ( x , y , area ) then
41859: LD_VAR 0 5
41863: PPUSH
41864: LD_VAR 0 6
41868: PPUSH
41869: LD_VAR 0 2
41873: PPUSH
41874: CALL_OW 309
41878: IFFALSE 41889
// ComStop ( unit ) ;
41880: LD_VAR 0 1
41884: PPUSH
41885: CALL_OW 141
// end ;
41889: LD_VAR 0 4
41893: RET
// export function Abs ( value ) ; begin
41894: LD_INT 0
41896: PPUSH
// result := value ;
41897: LD_ADDR_VAR 0 2
41901: PUSH
41902: LD_VAR 0 1
41906: ST_TO_ADDR
// if value < 0 then
41907: LD_VAR 0 1
41911: PUSH
41912: LD_INT 0
41914: LESS
41915: IFFALSE 41932
// result := value * - 1 ;
41917: LD_ADDR_VAR 0 2
41921: PUSH
41922: LD_VAR 0 1
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: MUL
41931: ST_TO_ADDR
// end ;
41932: LD_VAR 0 2
41936: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41937: LD_INT 0
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
// if not unit or not building then
41947: LD_VAR 0 1
41951: NOT
41952: IFTRUE 41961
41954: PUSH
41955: LD_VAR 0 2
41959: NOT
41960: OR
41961: IFFALSE 41965
// exit ;
41963: GO 42193
// x := GetX ( building ) ;
41965: LD_ADDR_VAR 0 4
41969: PUSH
41970: LD_VAR 0 2
41974: PPUSH
41975: CALL_OW 250
41979: ST_TO_ADDR
// y := GetY ( building ) ;
41980: LD_ADDR_VAR 0 6
41984: PUSH
41985: LD_VAR 0 2
41989: PPUSH
41990: CALL_OW 251
41994: ST_TO_ADDR
// d := GetDir ( building ) ;
41995: LD_ADDR_VAR 0 8
41999: PUSH
42000: LD_VAR 0 2
42004: PPUSH
42005: CALL_OW 254
42009: ST_TO_ADDR
// r := 4 ;
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: LD_INT 4
42017: ST_TO_ADDR
// for i := 1 to 5 do
42018: LD_ADDR_VAR 0 10
42022: PUSH
42023: DOUBLE
42024: LD_INT 1
42026: DEC
42027: ST_TO_ADDR
42028: LD_INT 5
42030: PUSH
42031: FOR_TO
42032: IFFALSE 42191
// begin _x := ShiftX ( x , d , r + i ) ;
42034: LD_ADDR_VAR 0 5
42038: PUSH
42039: LD_VAR 0 4
42043: PPUSH
42044: LD_VAR 0 8
42048: PPUSH
42049: LD_VAR 0 9
42053: PUSH
42054: LD_VAR 0 10
42058: PLUS
42059: PPUSH
42060: CALL_OW 272
42064: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42065: LD_ADDR_VAR 0 7
42069: PUSH
42070: LD_VAR 0 6
42074: PPUSH
42075: LD_VAR 0 8
42079: PPUSH
42080: LD_VAR 0 9
42084: PUSH
42085: LD_VAR 0 10
42089: PLUS
42090: PPUSH
42091: CALL_OW 273
42095: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42096: LD_VAR 0 5
42100: PPUSH
42101: LD_VAR 0 7
42105: PPUSH
42106: CALL_OW 488
42110: IFFALSE 42145
42112: PUSH
42113: LD_VAR 0 5
42117: PPUSH
42118: LD_VAR 0 7
42122: PPUSH
42123: CALL_OW 428
42127: PPUSH
42128: CALL_OW 247
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: LD_INT 2
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: IN
42143: NOT
42144: AND
42145: IFFALSE 42189
// begin ComMoveXY ( unit , _x , _y ) ;
42147: LD_VAR 0 1
42151: PPUSH
42152: LD_VAR 0 5
42156: PPUSH
42157: LD_VAR 0 7
42161: PPUSH
42162: CALL_OW 111
// result := [ _x , _y ] ;
42166: LD_ADDR_VAR 0 3
42170: PUSH
42171: LD_VAR 0 5
42175: PUSH
42176: LD_VAR 0 7
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: ST_TO_ADDR
// exit ;
42185: POP
42186: POP
42187: GO 42193
// end ; end ;
42189: GO 42031
42191: POP
42192: POP
// end ;
42193: LD_VAR 0 3
42197: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42198: LD_INT 0
42200: PPUSH
42201: PPUSH
42202: PPUSH
// result := 0 ;
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_INT 0
42210: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42211: LD_VAR 0 1
42215: PUSH
42216: LD_INT 0
42218: LESS
42219: IFTRUE 42231
42221: PUSH
42222: LD_VAR 0 1
42226: PUSH
42227: LD_INT 8
42229: GREATER
42230: OR
42231: IFTRUE 42243
42233: PUSH
42234: LD_VAR 0 2
42238: PUSH
42239: LD_INT 0
42241: LESS
42242: OR
42243: IFTRUE 42255
42245: PUSH
42246: LD_VAR 0 2
42250: PUSH
42251: LD_INT 8
42253: GREATER
42254: OR
42255: IFFALSE 42259
// exit ;
42257: GO 42334
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42259: LD_ADDR_VAR 0 4
42263: PUSH
42264: LD_INT 22
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PPUSH
42276: CALL_OW 69
42280: PUSH
42281: FOR_IN
42282: IFFALSE 42332
// begin un := UnitShoot ( i ) ;
42284: LD_ADDR_VAR 0 5
42288: PUSH
42289: LD_VAR 0 4
42293: PPUSH
42294: CALL_OW 504
42298: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42299: LD_VAR 0 5
42303: PPUSH
42304: CALL_OW 255
42308: PUSH
42309: LD_VAR 0 1
42313: EQUAL
42314: IFFALSE 42330
// begin result := un ;
42316: LD_ADDR_VAR 0 3
42320: PUSH
42321: LD_VAR 0 5
42325: ST_TO_ADDR
// exit ;
42326: POP
42327: POP
42328: GO 42334
// end ; end ;
42330: GO 42281
42332: POP
42333: POP
// end ;
42334: LD_VAR 0 3
42338: RET
// export function GetCargoBay ( units ) ; begin
42339: LD_INT 0
42341: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42342: LD_ADDR_VAR 0 2
42346: PUSH
42347: LD_VAR 0 1
42351: PPUSH
42352: LD_INT 2
42354: PUSH
42355: LD_INT 34
42357: PUSH
42358: LD_INT 12
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 34
42367: PUSH
42368: LD_INT 51
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 34
42377: PUSH
42378: LD_INT 32
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 34
42387: PUSH
42388: LD_INT 89
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: PPUSH
42402: CALL_OW 72
42406: ST_TO_ADDR
// end ;
42407: LD_VAR 0 2
42411: RET
// export function Negate ( value ) ; begin
42412: LD_INT 0
42414: PPUSH
// result := not value ;
42415: LD_ADDR_VAR 0 2
42419: PUSH
42420: LD_VAR 0 1
42424: NOT
42425: ST_TO_ADDR
// end ;
42426: LD_VAR 0 2
42430: RET
// export function Inc ( value ) ; begin
42431: LD_INT 0
42433: PPUSH
// result := value + 1 ;
42434: LD_ADDR_VAR 0 2
42438: PUSH
42439: LD_VAR 0 1
42443: PUSH
42444: LD_INT 1
42446: PLUS
42447: ST_TO_ADDR
// end ;
42448: LD_VAR 0 2
42452: RET
// export function Dec ( value ) ; begin
42453: LD_INT 0
42455: PPUSH
// result := value - 1 ;
42456: LD_ADDR_VAR 0 2
42460: PUSH
42461: LD_VAR 0 1
42465: PUSH
42466: LD_INT 1
42468: MINUS
42469: ST_TO_ADDR
// end ;
42470: LD_VAR 0 2
42474: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42475: LD_INT 0
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42485: LD_VAR 0 1
42489: PPUSH
42490: LD_VAR 0 2
42494: PPUSH
42495: CALL_OW 488
42499: NOT
42500: IFTRUE 42519
42502: PUSH
42503: LD_VAR 0 3
42507: PPUSH
42508: LD_VAR 0 4
42512: PPUSH
42513: CALL_OW 488
42517: NOT
42518: OR
42519: IFFALSE 42532
// begin result := - 1 ;
42521: LD_ADDR_VAR 0 5
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: ST_TO_ADDR
// exit ;
42530: GO 42767
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42532: LD_ADDR_VAR 0 12
42536: PUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: LD_VAR 0 2
42546: PPUSH
42547: LD_VAR 0 3
42551: PPUSH
42552: LD_VAR 0 4
42556: PPUSH
42557: CALL 41603 0 4
42561: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42562: LD_ADDR_VAR 0 11
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: LD_VAR 0 2
42576: PPUSH
42577: LD_VAR 0 12
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: PPUSH
42586: LD_VAR 0 12
42590: PUSH
42591: LD_INT 2
42593: ARRAY
42594: PPUSH
42595: CALL_OW 298
42599: ST_TO_ADDR
// distance := 9999 ;
42600: LD_ADDR_VAR 0 10
42604: PUSH
42605: LD_INT 9999
42607: ST_TO_ADDR
// for i := 0 to 5 do
42608: LD_ADDR_VAR 0 6
42612: PUSH
42613: DOUBLE
42614: LD_INT 0
42616: DEC
42617: ST_TO_ADDR
42618: LD_INT 5
42620: PUSH
42621: FOR_TO
42622: IFFALSE 42765
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42624: LD_ADDR_VAR 0 7
42628: PUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: LD_VAR 0 6
42638: PPUSH
42639: LD_VAR 0 11
42643: PPUSH
42644: CALL_OW 272
42648: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42649: LD_ADDR_VAR 0 8
42653: PUSH
42654: LD_VAR 0 2
42658: PPUSH
42659: LD_VAR 0 6
42663: PPUSH
42664: LD_VAR 0 11
42668: PPUSH
42669: CALL_OW 273
42673: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42674: LD_VAR 0 7
42678: PPUSH
42679: LD_VAR 0 8
42683: PPUSH
42684: CALL_OW 488
42688: NOT
42689: IFFALSE 42693
// continue ;
42691: GO 42621
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42693: LD_ADDR_VAR 0 9
42697: PUSH
42698: LD_VAR 0 12
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: PPUSH
42707: LD_VAR 0 12
42711: PUSH
42712: LD_INT 2
42714: ARRAY
42715: PPUSH
42716: LD_VAR 0 7
42720: PPUSH
42721: LD_VAR 0 8
42725: PPUSH
42726: CALL_OW 298
42730: ST_TO_ADDR
// if tmp < distance then
42731: LD_VAR 0 9
42735: PUSH
42736: LD_VAR 0 10
42740: LESS
42741: IFFALSE 42763
// begin result := i ;
42743: LD_ADDR_VAR 0 5
42747: PUSH
42748: LD_VAR 0 6
42752: ST_TO_ADDR
// distance := tmp ;
42753: LD_ADDR_VAR 0 10
42757: PUSH
42758: LD_VAR 0 9
42762: ST_TO_ADDR
// end ; end ;
42763: GO 42621
42765: POP
42766: POP
// end ;
42767: LD_VAR 0 5
42771: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42772: LD_INT 0
42774: PPUSH
42775: PPUSH
// if not driver or not IsInUnit ( driver ) then
42776: LD_VAR 0 1
42780: NOT
42781: IFTRUE 42795
42783: PUSH
42784: LD_VAR 0 1
42788: PPUSH
42789: CALL_OW 310
42793: NOT
42794: OR
42795: IFFALSE 42799
// exit ;
42797: GO 42889
// vehicle := IsInUnit ( driver ) ;
42799: LD_ADDR_VAR 0 3
42803: PUSH
42804: LD_VAR 0 1
42808: PPUSH
42809: CALL_OW 310
42813: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42814: LD_VAR 0 1
42818: PPUSH
42819: LD_STRING \
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: PUSH
42849: LD_STRING E
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_VAR 0 3
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PPUSH
42885: CALL_OW 446
// end ;
42889: LD_VAR 0 2
42893: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42894: LD_INT 0
42896: PPUSH
42897: PPUSH
// if not driver or not IsInUnit ( driver ) then
42898: LD_VAR 0 1
42902: NOT
42903: IFTRUE 42917
42905: PUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: CALL_OW 310
42915: NOT
42916: OR
42917: IFFALSE 42921
// exit ;
42919: GO 43011
// vehicle := IsInUnit ( driver ) ;
42921: LD_ADDR_VAR 0 3
42925: PUSH
42926: LD_VAR 0 1
42930: PPUSH
42931: CALL_OW 310
42935: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42936: LD_VAR 0 1
42940: PPUSH
42941: LD_STRING \
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: PUSH
42971: LD_STRING E
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_VAR 0 3
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PPUSH
43007: CALL_OW 447
// end ;
43011: LD_VAR 0 2
43015: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43016: LD_INT 0
43018: PPUSH
43019: PPUSH
43020: PPUSH
// tmp := [ ] ;
43021: LD_ADDR_VAR 0 5
43025: PUSH
43026: EMPTY
43027: ST_TO_ADDR
// for i in units do
43028: LD_ADDR_VAR 0 4
43032: PUSH
43033: LD_VAR 0 1
43037: PUSH
43038: FOR_IN
43039: IFFALSE 43077
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43041: LD_ADDR_VAR 0 5
43045: PUSH
43046: LD_VAR 0 5
43050: PPUSH
43051: LD_VAR 0 5
43055: PUSH
43056: LD_INT 1
43058: PLUS
43059: PPUSH
43060: LD_VAR 0 4
43064: PPUSH
43065: CALL_OW 256
43069: PPUSH
43070: CALL_OW 2
43074: ST_TO_ADDR
43075: GO 43038
43077: POP
43078: POP
// if not tmp then
43079: LD_VAR 0 5
43083: NOT
43084: IFFALSE 43088
// exit ;
43086: GO 43136
// if asc then
43088: LD_VAR 0 2
43092: IFFALSE 43116
// result := SortListByListAsc ( units , tmp ) else
43094: LD_ADDR_VAR 0 3
43098: PUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: LD_VAR 0 5
43108: PPUSH
43109: CALL_OW 76
43113: ST_TO_ADDR
43114: GO 43136
// result := SortListByListDesc ( units , tmp ) ;
43116: LD_ADDR_VAR 0 3
43120: PUSH
43121: LD_VAR 0 1
43125: PPUSH
43126: LD_VAR 0 5
43130: PPUSH
43131: CALL_OW 77
43135: ST_TO_ADDR
// end ;
43136: LD_VAR 0 3
43140: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43141: LD_INT 0
43143: PPUSH
43144: PPUSH
// task := GetTaskList ( mech ) ;
43145: LD_ADDR_VAR 0 4
43149: PUSH
43150: LD_VAR 0 1
43154: PPUSH
43155: CALL_OW 437
43159: ST_TO_ADDR
// if not task then
43160: LD_VAR 0 4
43164: NOT
43165: IFFALSE 43169
// exit ;
43167: GO 43213
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43169: LD_ADDR_VAR 0 3
43173: PUSH
43174: LD_VAR 0 4
43178: PUSH
43179: LD_INT 1
43181: ARRAY
43182: PUSH
43183: LD_INT 1
43185: ARRAY
43186: PUSH
43187: LD_STRING r
43189: EQUAL
43190: IFFALSE 43212
43192: PUSH
43193: LD_VAR 0 4
43197: PUSH
43198: LD_INT 1
43200: ARRAY
43201: PUSH
43202: LD_INT 4
43204: ARRAY
43205: PUSH
43206: LD_VAR 0 2
43210: EQUAL
43211: AND
43212: ST_TO_ADDR
// end ;
43213: LD_VAR 0 3
43217: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43218: LD_INT 0
43220: PPUSH
// SetDir ( unit , d ) ;
43221: LD_VAR 0 1
43225: PPUSH
43226: LD_VAR 0 4
43230: PPUSH
43231: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43235: LD_ADDR_VAR 0 6
43239: PUSH
43240: LD_VAR 0 1
43244: PPUSH
43245: LD_VAR 0 2
43249: PPUSH
43250: LD_VAR 0 3
43254: PPUSH
43255: LD_VAR 0 5
43259: PPUSH
43260: CALL_OW 48
43264: ST_TO_ADDR
// end ;
43265: LD_VAR 0 6
43269: RET
// export function ToNaturalNumber ( number ) ; begin
43270: LD_INT 0
43272: PPUSH
// result := number div 1 ;
43273: LD_ADDR_VAR 0 2
43277: PUSH
43278: LD_VAR 0 1
43282: PUSH
43283: LD_INT 1
43285: DIV
43286: ST_TO_ADDR
// if number < 0 then
43287: LD_VAR 0 1
43291: PUSH
43292: LD_INT 0
43294: LESS
43295: IFFALSE 43305
// result := 0 ;
43297: LD_ADDR_VAR 0 2
43301: PUSH
43302: LD_INT 0
43304: ST_TO_ADDR
// end ;
43305: LD_VAR 0 2
43309: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43310: LD_INT 0
43312: PPUSH
43313: PPUSH
43314: PPUSH
// if not buildings then
43315: LD_VAR 0 1
43319: NOT
43320: IFFALSE 43324
// exit ;
43322: GO 43439
// tmp := [ ] ;
43324: LD_ADDR_VAR 0 5
43328: PUSH
43329: EMPTY
43330: ST_TO_ADDR
// for b in buildings do
43331: LD_ADDR_VAR 0 4
43335: PUSH
43336: LD_VAR 0 1
43340: PUSH
43341: FOR_IN
43342: IFFALSE 43380
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43344: LD_ADDR_VAR 0 5
43348: PUSH
43349: LD_VAR 0 5
43353: PPUSH
43354: LD_VAR 0 5
43358: PUSH
43359: LD_INT 1
43361: PLUS
43362: PPUSH
43363: LD_VAR 0 4
43367: PPUSH
43368: CALL_OW 266
43372: PPUSH
43373: CALL_OW 1
43377: ST_TO_ADDR
43378: GO 43341
43380: POP
43381: POP
// if not tmp then
43382: LD_VAR 0 5
43386: NOT
43387: IFFALSE 43391
// exit ;
43389: GO 43439
// if asc then
43391: LD_VAR 0 2
43395: IFFALSE 43419
// result := SortListByListAsc ( buildings , tmp ) else
43397: LD_ADDR_VAR 0 3
43401: PUSH
43402: LD_VAR 0 1
43406: PPUSH
43407: LD_VAR 0 5
43411: PPUSH
43412: CALL_OW 76
43416: ST_TO_ADDR
43417: GO 43439
// result := SortListByListDesc ( buildings , tmp ) ;
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: LD_VAR 0 5
43433: PPUSH
43434: CALL_OW 77
43438: ST_TO_ADDR
// end ;
43439: LD_VAR 0 3
43443: RET
// export function SortByClass ( units , class ) ; var un ; begin
43444: LD_INT 0
43446: PPUSH
43447: PPUSH
// if not units or not class then
43448: LD_VAR 0 1
43452: NOT
43453: IFTRUE 43462
43455: PUSH
43456: LD_VAR 0 2
43460: NOT
43461: OR
43462: IFFALSE 43466
// exit ;
43464: GO 43561
// result := [ ] ;
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: EMPTY
43472: ST_TO_ADDR
// for un in units do
43473: LD_ADDR_VAR 0 4
43477: PUSH
43478: LD_VAR 0 1
43482: PUSH
43483: FOR_IN
43484: IFFALSE 43559
// if GetClass ( un ) = class then
43486: LD_VAR 0 4
43490: PPUSH
43491: CALL_OW 257
43495: PUSH
43496: LD_VAR 0 2
43500: EQUAL
43501: IFFALSE 43528
// result := Insert ( result , 1 , un ) else
43503: LD_ADDR_VAR 0 3
43507: PUSH
43508: LD_VAR 0 3
43512: PPUSH
43513: LD_INT 1
43515: PPUSH
43516: LD_VAR 0 4
43520: PPUSH
43521: CALL_OW 2
43525: ST_TO_ADDR
43526: GO 43557
// result := Replace ( result , result + 1 , un ) ;
43528: LD_ADDR_VAR 0 3
43532: PUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: LD_VAR 0 3
43542: PUSH
43543: LD_INT 1
43545: PLUS
43546: PPUSH
43547: LD_VAR 0 4
43551: PPUSH
43552: CALL_OW 1
43556: ST_TO_ADDR
43557: GO 43483
43559: POP
43560: POP
// end ;
43561: LD_VAR 0 3
43565: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43566: LD_INT 0
43568: PPUSH
43569: PPUSH
43570: PPUSH
43571: PPUSH
43572: PPUSH
43573: PPUSH
43574: PPUSH
// result := [ ] ;
43575: LD_ADDR_VAR 0 4
43579: PUSH
43580: EMPTY
43581: ST_TO_ADDR
// if x - r < 0 then
43582: LD_VAR 0 1
43586: PUSH
43587: LD_VAR 0 3
43591: MINUS
43592: PUSH
43593: LD_INT 0
43595: LESS
43596: IFFALSE 43608
// min_x := 0 else
43598: LD_ADDR_VAR 0 8
43602: PUSH
43603: LD_INT 0
43605: ST_TO_ADDR
43606: GO 43624
// min_x := x - r ;
43608: LD_ADDR_VAR 0 8
43612: PUSH
43613: LD_VAR 0 1
43617: PUSH
43618: LD_VAR 0 3
43622: MINUS
43623: ST_TO_ADDR
// if y - r < 0 then
43624: LD_VAR 0 2
43628: PUSH
43629: LD_VAR 0 3
43633: MINUS
43634: PUSH
43635: LD_INT 0
43637: LESS
43638: IFFALSE 43650
// min_y := 0 else
43640: LD_ADDR_VAR 0 7
43644: PUSH
43645: LD_INT 0
43647: ST_TO_ADDR
43648: GO 43666
// min_y := y - r ;
43650: LD_ADDR_VAR 0 7
43654: PUSH
43655: LD_VAR 0 2
43659: PUSH
43660: LD_VAR 0 3
43664: MINUS
43665: ST_TO_ADDR
// max_x := x + r ;
43666: LD_ADDR_VAR 0 9
43670: PUSH
43671: LD_VAR 0 1
43675: PUSH
43676: LD_VAR 0 3
43680: PLUS
43681: ST_TO_ADDR
// max_y := y + r ;
43682: LD_ADDR_VAR 0 10
43686: PUSH
43687: LD_VAR 0 2
43691: PUSH
43692: LD_VAR 0 3
43696: PLUS
43697: ST_TO_ADDR
// for _x = min_x to max_x do
43698: LD_ADDR_VAR 0 5
43702: PUSH
43703: DOUBLE
43704: LD_VAR 0 8
43708: DEC
43709: ST_TO_ADDR
43710: LD_VAR 0 9
43714: PUSH
43715: FOR_TO
43716: IFFALSE 43817
// for _y = min_y to max_y do
43718: LD_ADDR_VAR 0 6
43722: PUSH
43723: DOUBLE
43724: LD_VAR 0 7
43728: DEC
43729: ST_TO_ADDR
43730: LD_VAR 0 10
43734: PUSH
43735: FOR_TO
43736: IFFALSE 43813
// begin if not ValidHex ( _x , _y ) then
43738: LD_VAR 0 5
43742: PPUSH
43743: LD_VAR 0 6
43747: PPUSH
43748: CALL_OW 488
43752: NOT
43753: IFFALSE 43757
// continue ;
43755: GO 43735
// if GetResourceTypeXY ( _x , _y ) then
43757: LD_VAR 0 5
43761: PPUSH
43762: LD_VAR 0 6
43766: PPUSH
43767: CALL_OW 283
43771: IFFALSE 43811
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43773: LD_ADDR_VAR 0 4
43777: PUSH
43778: LD_VAR 0 4
43782: PPUSH
43783: LD_VAR 0 4
43787: PUSH
43788: LD_INT 1
43790: PLUS
43791: PPUSH
43792: LD_VAR 0 5
43796: PUSH
43797: LD_VAR 0 6
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PPUSH
43806: CALL_OW 1
43810: ST_TO_ADDR
// end ;
43811: GO 43735
43813: POP
43814: POP
43815: GO 43715
43817: POP
43818: POP
// end ;
43819: LD_VAR 0 4
43823: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43824: LD_INT 0
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
43833: PPUSH
// if not units then
43834: LD_VAR 0 1
43838: NOT
43839: IFFALSE 43843
// exit ;
43841: GO 44375
// result := UnitFilter ( units , [ f_ok ] ) ;
43843: LD_ADDR_VAR 0 3
43847: PUSH
43848: LD_VAR 0 1
43852: PPUSH
43853: LD_INT 50
43855: PUSH
43856: EMPTY
43857: LIST
43858: PPUSH
43859: CALL_OW 72
43863: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43864: LD_ADDR_VAR 0 8
43868: PUSH
43869: LD_VAR 0 1
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: PPUSH
43878: CALL_OW 255
43882: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43883: LD_ADDR_VAR 0 10
43887: PUSH
43888: LD_INT 29
43890: PUSH
43891: LD_INT 91
43893: PUSH
43894: LD_INT 49
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// if not result then
43902: LD_VAR 0 3
43906: NOT
43907: IFFALSE 43911
// exit ;
43909: GO 44375
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43911: LD_ADDR_VAR 0 5
43915: PUSH
43916: LD_INT 81
43918: PUSH
43919: LD_VAR 0 8
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PPUSH
43928: CALL_OW 69
43932: ST_TO_ADDR
// for i in result do
43933: LD_ADDR_VAR 0 4
43937: PUSH
43938: LD_VAR 0 3
43942: PUSH
43943: FOR_IN
43944: IFFALSE 44373
// begin tag := GetTag ( i ) + 1 ;
43946: LD_ADDR_VAR 0 9
43950: PUSH
43951: LD_VAR 0 4
43955: PPUSH
43956: CALL_OW 110
43960: PUSH
43961: LD_INT 1
43963: PLUS
43964: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43965: LD_ADDR_VAR 0 7
43969: PUSH
43970: LD_VAR 0 4
43974: PPUSH
43975: CALL_OW 250
43979: PPUSH
43980: LD_VAR 0 4
43984: PPUSH
43985: CALL_OW 251
43989: PPUSH
43990: LD_INT 4
43992: PPUSH
43993: CALL 43566 0 3
43997: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43998: LD_VAR 0 4
44002: PPUSH
44003: CALL_OW 247
44007: PUSH
44008: LD_INT 2
44010: EQUAL
44011: IFFALSE 44023
44013: PUSH
44014: LD_VAR 0 7
44018: PUSH
44019: LD_INT 2
44021: GREATER
44022: AND
44023: IFFALSE 44043
44025: PUSH
44026: LD_VAR 0 4
44030: PPUSH
44031: CALL_OW 264
44035: PUSH
44036: LD_VAR 0 10
44040: IN
44041: NOT
44042: AND
44043: IFFALSE 44082
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44045: LD_VAR 0 4
44049: PPUSH
44050: LD_VAR 0 7
44054: PUSH
44055: LD_INT 1
44057: ARRAY
44058: PUSH
44059: LD_INT 1
44061: ARRAY
44062: PPUSH
44063: LD_VAR 0 7
44067: PUSH
44068: LD_INT 1
44070: ARRAY
44071: PUSH
44072: LD_INT 2
44074: ARRAY
44075: PPUSH
44076: CALL_OW 116
44080: GO 44371
// if path > tag then
44082: LD_VAR 0 2
44086: PUSH
44087: LD_VAR 0 9
44091: GREATER
44092: IFFALSE 44300
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44094: LD_ADDR_VAR 0 6
44098: PUSH
44099: LD_VAR 0 5
44103: PPUSH
44104: LD_INT 91
44106: PUSH
44107: LD_VAR 0 4
44111: PUSH
44112: LD_INT 8
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: PPUSH
44120: CALL_OW 72
44124: ST_TO_ADDR
// if nearEnemy then
44125: LD_VAR 0 6
44129: IFFALSE 44198
// begin if GetWeapon ( i ) = ru_time_lapser then
44131: LD_VAR 0 4
44135: PPUSH
44136: CALL_OW 264
44140: PUSH
44141: LD_INT 49
44143: EQUAL
44144: IFFALSE 44172
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44146: LD_VAR 0 4
44150: PPUSH
44151: LD_VAR 0 6
44155: PPUSH
44156: LD_VAR 0 4
44160: PPUSH
44161: CALL_OW 74
44165: PPUSH
44166: CALL_OW 112
44170: GO 44196
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44172: LD_VAR 0 4
44176: PPUSH
44177: LD_VAR 0 6
44181: PPUSH
44182: LD_VAR 0 4
44186: PPUSH
44187: CALL_OW 74
44191: PPUSH
44192: CALL 45456 0 2
// end else
44196: GO 44298
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44198: LD_VAR 0 4
44202: PPUSH
44203: LD_VAR 0 2
44207: PUSH
44208: LD_VAR 0 9
44212: ARRAY
44213: PUSH
44214: LD_INT 1
44216: ARRAY
44217: PPUSH
44218: LD_VAR 0 2
44222: PUSH
44223: LD_VAR 0 9
44227: ARRAY
44228: PUSH
44229: LD_INT 2
44231: ARRAY
44232: PPUSH
44233: CALL_OW 297
44237: PUSH
44238: LD_INT 6
44240: GREATER
44241: IFFALSE 44284
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44243: LD_VAR 0 4
44247: PPUSH
44248: LD_VAR 0 2
44252: PUSH
44253: LD_VAR 0 9
44257: ARRAY
44258: PUSH
44259: LD_INT 1
44261: ARRAY
44262: PPUSH
44263: LD_VAR 0 2
44267: PUSH
44268: LD_VAR 0 9
44272: ARRAY
44273: PUSH
44274: LD_INT 2
44276: ARRAY
44277: PPUSH
44278: CALL_OW 114
44282: GO 44298
// SetTag ( i , tag ) ;
44284: LD_VAR 0 4
44288: PPUSH
44289: LD_VAR 0 9
44293: PPUSH
44294: CALL_OW 109
// end else
44298: GO 44371
// if enemy then
44300: LD_VAR 0 5
44304: IFFALSE 44371
// begin if GetWeapon ( i ) = ru_time_lapser then
44306: LD_VAR 0 4
44310: PPUSH
44311: CALL_OW 264
44315: PUSH
44316: LD_INT 49
44318: EQUAL
44319: IFFALSE 44347
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44321: LD_VAR 0 4
44325: PPUSH
44326: LD_VAR 0 5
44330: PPUSH
44331: LD_VAR 0 4
44335: PPUSH
44336: CALL_OW 74
44340: PPUSH
44341: CALL_OW 112
44345: GO 44371
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44347: LD_VAR 0 4
44351: PPUSH
44352: LD_VAR 0 5
44356: PPUSH
44357: LD_VAR 0 4
44361: PPUSH
44362: CALL_OW 74
44366: PPUSH
44367: CALL 45456 0 2
// end ; end ;
44371: GO 43943
44373: POP
44374: POP
// end ;
44375: LD_VAR 0 3
44379: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44380: LD_INT 0
44382: PPUSH
44383: PPUSH
44384: PPUSH
// if not unit or IsInUnit ( unit ) then
44385: LD_VAR 0 1
44389: NOT
44390: IFTRUE 44403
44392: PUSH
44393: LD_VAR 0 1
44397: PPUSH
44398: CALL_OW 310
44402: OR
44403: IFFALSE 44407
// exit ;
44405: GO 44498
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44407: LD_ADDR_VAR 0 4
44411: PUSH
44412: LD_VAR 0 1
44416: PPUSH
44417: CALL_OW 250
44421: PPUSH
44422: LD_VAR 0 2
44426: PPUSH
44427: LD_INT 1
44429: PPUSH
44430: CALL_OW 272
44434: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44435: LD_ADDR_VAR 0 5
44439: PUSH
44440: LD_VAR 0 1
44444: PPUSH
44445: CALL_OW 251
44449: PPUSH
44450: LD_VAR 0 2
44454: PPUSH
44455: LD_INT 1
44457: PPUSH
44458: CALL_OW 273
44462: ST_TO_ADDR
// if ValidHex ( x , y ) then
44463: LD_VAR 0 4
44467: PPUSH
44468: LD_VAR 0 5
44472: PPUSH
44473: CALL_OW 488
44477: IFFALSE 44498
// ComTurnXY ( unit , x , y ) ;
44479: LD_VAR 0 1
44483: PPUSH
44484: LD_VAR 0 4
44488: PPUSH
44489: LD_VAR 0 5
44493: PPUSH
44494: CALL_OW 118
// end ;
44498: LD_VAR 0 3
44502: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44503: LD_INT 0
44505: PPUSH
44506: PPUSH
// result := false ;
44507: LD_ADDR_VAR 0 3
44511: PUSH
44512: LD_INT 0
44514: ST_TO_ADDR
// if not units then
44515: LD_VAR 0 2
44519: NOT
44520: IFFALSE 44524
// exit ;
44522: GO 44569
// for i in units do
44524: LD_ADDR_VAR 0 4
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: FOR_IN
44535: IFFALSE 44567
// if See ( side , i ) then
44537: LD_VAR 0 1
44541: PPUSH
44542: LD_VAR 0 4
44546: PPUSH
44547: CALL_OW 292
44551: IFFALSE 44565
// begin result := true ;
44553: LD_ADDR_VAR 0 3
44557: PUSH
44558: LD_INT 1
44560: ST_TO_ADDR
// exit ;
44561: POP
44562: POP
44563: GO 44569
// end ;
44565: GO 44534
44567: POP
44568: POP
// end ;
44569: LD_VAR 0 3
44573: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44574: LD_INT 0
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
// if not unit or not points then
44580: LD_VAR 0 1
44584: NOT
44585: IFTRUE 44594
44587: PUSH
44588: LD_VAR 0 2
44592: NOT
44593: OR
44594: IFFALSE 44598
// exit ;
44596: GO 44688
// dist := 99999 ;
44598: LD_ADDR_VAR 0 5
44602: PUSH
44603: LD_INT 99999
44605: ST_TO_ADDR
// for i in points do
44606: LD_ADDR_VAR 0 4
44610: PUSH
44611: LD_VAR 0 2
44615: PUSH
44616: FOR_IN
44617: IFFALSE 44686
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44619: LD_ADDR_VAR 0 6
44623: PUSH
44624: LD_VAR 0 1
44628: PPUSH
44629: LD_VAR 0 4
44633: PUSH
44634: LD_INT 1
44636: ARRAY
44637: PPUSH
44638: LD_VAR 0 4
44642: PUSH
44643: LD_INT 2
44645: ARRAY
44646: PPUSH
44647: CALL_OW 297
44651: ST_TO_ADDR
// if tmpDist < dist then
44652: LD_VAR 0 6
44656: PUSH
44657: LD_VAR 0 5
44661: LESS
44662: IFFALSE 44684
// begin result := i ;
44664: LD_ADDR_VAR 0 3
44668: PUSH
44669: LD_VAR 0 4
44673: ST_TO_ADDR
// dist := tmpDist ;
44674: LD_ADDR_VAR 0 5
44678: PUSH
44679: LD_VAR 0 6
44683: ST_TO_ADDR
// end ; end ;
44684: GO 44616
44686: POP
44687: POP
// end ;
44688: LD_VAR 0 3
44692: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44693: LD_INT 0
44695: PPUSH
// uc_side := side ;
44696: LD_ADDR_OWVAR 20
44700: PUSH
44701: LD_VAR 0 1
44705: ST_TO_ADDR
// uc_nation := 3 ;
44706: LD_ADDR_OWVAR 21
44710: PUSH
44711: LD_INT 3
44713: ST_TO_ADDR
// vc_chassis := 25 ;
44714: LD_ADDR_OWVAR 37
44718: PUSH
44719: LD_INT 25
44721: ST_TO_ADDR
// vc_engine := engine_siberite ;
44722: LD_ADDR_OWVAR 39
44726: PUSH
44727: LD_INT 3
44729: ST_TO_ADDR
// vc_control := control_computer ;
44730: LD_ADDR_OWVAR 38
44734: PUSH
44735: LD_INT 3
44737: ST_TO_ADDR
// vc_weapon := 59 ;
44738: LD_ADDR_OWVAR 40
44742: PUSH
44743: LD_INT 59
44745: ST_TO_ADDR
// result := CreateVehicle ;
44746: LD_ADDR_VAR 0 5
44750: PUSH
44751: CALL_OW 45
44755: ST_TO_ADDR
// SetDir ( result , d ) ;
44756: LD_VAR 0 5
44760: PPUSH
44761: LD_VAR 0 4
44765: PPUSH
44766: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44770: LD_VAR 0 5
44774: PPUSH
44775: LD_VAR 0 2
44779: PPUSH
44780: LD_VAR 0 3
44784: PPUSH
44785: LD_INT 0
44787: PPUSH
44788: CALL_OW 48
// end ;
44792: LD_VAR 0 5
44796: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
44801: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44802: LD_ADDR_VAR 0 2
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44825: LD_VAR 0 1
44829: NOT
44830: IFTRUE 44863
44832: PUSH
44833: LD_VAR 0 1
44837: PPUSH
44838: CALL_OW 264
44842: PUSH
44843: LD_INT 12
44845: PUSH
44846: LD_INT 51
44848: PUSH
44849: LD_INT 32
44851: PUSH
44852: LD_INT 89
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: IN
44861: NOT
44862: OR
44863: IFFALSE 44867
// exit ;
44865: GO 44965
// for i := 1 to 3 do
44867: LD_ADDR_VAR 0 3
44871: PUSH
44872: DOUBLE
44873: LD_INT 1
44875: DEC
44876: ST_TO_ADDR
44877: LD_INT 3
44879: PUSH
44880: FOR_TO
44881: IFFALSE 44963
// begin tmp := GetCargo ( cargo , i ) ;
44883: LD_ADDR_VAR 0 4
44887: PUSH
44888: LD_VAR 0 1
44892: PPUSH
44893: LD_VAR 0 3
44897: PPUSH
44898: CALL_OW 289
44902: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44903: LD_ADDR_VAR 0 2
44907: PUSH
44908: LD_VAR 0 2
44912: PPUSH
44913: LD_VAR 0 3
44917: PPUSH
44918: LD_VAR 0 4
44922: PPUSH
44923: CALL_OW 1
44927: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44928: LD_ADDR_VAR 0 2
44932: PUSH
44933: LD_VAR 0 2
44937: PPUSH
44938: LD_INT 4
44940: PPUSH
44941: LD_VAR 0 2
44945: PUSH
44946: LD_INT 4
44948: ARRAY
44949: PUSH
44950: LD_VAR 0 4
44954: PLUS
44955: PPUSH
44956: CALL_OW 1
44960: ST_TO_ADDR
// end ;
44961: GO 44880
44963: POP
44964: POP
// end ;
44965: LD_VAR 0 2
44969: RET
// export function Length ( array ) ; begin
44970: LD_INT 0
44972: PPUSH
// result := array + 0 ;
44973: LD_ADDR_VAR 0 2
44977: PUSH
44978: LD_VAR 0 1
44982: PUSH
44983: LD_INT 0
44985: PLUS
44986: ST_TO_ADDR
// end ;
44987: LD_VAR 0 2
44991: RET
// export function PrepareArray ( array ) ; begin
44992: LD_INT 0
44994: PPUSH
// result := array diff 0 ;
44995: LD_ADDR_VAR 0 2
44999: PUSH
45000: LD_VAR 0 1
45004: PUSH
45005: LD_INT 0
45007: DIFF
45008: ST_TO_ADDR
// if not result [ 1 ] then
45009: LD_VAR 0 2
45013: PUSH
45014: LD_INT 1
45016: ARRAY
45017: NOT
45018: IFFALSE 45038
// result := Delete ( result , 1 ) ;
45020: LD_ADDR_VAR 0 2
45024: PUSH
45025: LD_VAR 0 2
45029: PPUSH
45030: LD_INT 1
45032: PPUSH
45033: CALL_OW 3
45037: ST_TO_ADDR
// end ;
45038: LD_VAR 0 2
45042: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45043: LD_INT 0
45045: PPUSH
45046: PPUSH
45047: PPUSH
45048: PPUSH
// sibRocketRange := 25 ;
45049: LD_ADDR_VAR 0 6
45053: PUSH
45054: LD_INT 25
45056: ST_TO_ADDR
// result := false ;
45057: LD_ADDR_VAR 0 4
45061: PUSH
45062: LD_INT 0
45064: ST_TO_ADDR
// for i := 0 to 5 do
45065: LD_ADDR_VAR 0 5
45069: PUSH
45070: DOUBLE
45071: LD_INT 0
45073: DEC
45074: ST_TO_ADDR
45075: LD_INT 5
45077: PUSH
45078: FOR_TO
45079: IFFALSE 45146
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45081: LD_VAR 0 1
45085: PPUSH
45086: LD_VAR 0 5
45090: PPUSH
45091: LD_VAR 0 6
45095: PPUSH
45096: CALL_OW 272
45100: PPUSH
45101: LD_VAR 0 2
45105: PPUSH
45106: LD_VAR 0 5
45110: PPUSH
45111: LD_VAR 0 6
45115: PPUSH
45116: CALL_OW 273
45120: PPUSH
45121: LD_VAR 0 3
45125: PPUSH
45126: CALL_OW 309
45130: IFFALSE 45144
// begin result := true ;
45132: LD_ADDR_VAR 0 4
45136: PUSH
45137: LD_INT 1
45139: ST_TO_ADDR
// exit ;
45140: POP
45141: POP
45142: GO 45148
// end ;
45144: GO 45078
45146: POP
45147: POP
// end ;
45148: LD_VAR 0 4
45152: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45153: LD_INT 0
45155: PPUSH
45156: PPUSH
45157: PPUSH
// if btype = b_depot then
45158: LD_VAR 0 2
45162: PUSH
45163: LD_INT 0
45165: EQUAL
45166: IFFALSE 45178
// begin result := true ;
45168: LD_ADDR_VAR 0 3
45172: PUSH
45173: LD_INT 1
45175: ST_TO_ADDR
// exit ;
45176: GO 45298
// end ; pom := GetBase ( depot ) ;
45178: LD_ADDR_VAR 0 4
45182: PUSH
45183: LD_VAR 0 1
45187: PPUSH
45188: CALL_OW 274
45192: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45193: LD_ADDR_VAR 0 5
45197: PUSH
45198: LD_VAR 0 2
45202: PPUSH
45203: LD_VAR 0 1
45207: PPUSH
45208: CALL_OW 248
45212: PPUSH
45213: CALL_OW 450
45217: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45218: LD_ADDR_VAR 0 3
45222: PUSH
45223: LD_VAR 0 4
45227: PPUSH
45228: LD_INT 1
45230: PPUSH
45231: CALL_OW 275
45235: PUSH
45236: LD_VAR 0 5
45240: PUSH
45241: LD_INT 1
45243: ARRAY
45244: GREATEREQUAL
45245: IFFALSE 45271
45247: PUSH
45248: LD_VAR 0 4
45252: PPUSH
45253: LD_INT 2
45255: PPUSH
45256: CALL_OW 275
45260: PUSH
45261: LD_VAR 0 5
45265: PUSH
45266: LD_INT 2
45268: ARRAY
45269: GREATEREQUAL
45270: AND
45271: IFFALSE 45297
45273: PUSH
45274: LD_VAR 0 4
45278: PPUSH
45279: LD_INT 3
45281: PPUSH
45282: CALL_OW 275
45286: PUSH
45287: LD_VAR 0 5
45291: PUSH
45292: LD_INT 3
45294: ARRAY
45295: GREATEREQUAL
45296: AND
45297: ST_TO_ADDR
// end ;
45298: LD_VAR 0 3
45302: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45303: LD_INT 0
45305: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45306: LD_VAR 0 1
45310: PPUSH
45311: LD_VAR 0 2
45315: PPUSH
45316: LD_INT 0
45318: PPUSH
45319: LD_INT 0
45321: PPUSH
45322: LD_INT 1
45324: PPUSH
45325: LD_INT 0
45327: PPUSH
45328: CALL_OW 587
// end ;
45332: LD_VAR 0 3
45336: RET
// export function CenterOnNow ( unit ) ; begin
45337: LD_INT 0
45339: PPUSH
// result := IsInUnit ( unit ) ;
45340: LD_ADDR_VAR 0 2
45344: PUSH
45345: LD_VAR 0 1
45349: PPUSH
45350: CALL_OW 310
45354: ST_TO_ADDR
// if not result then
45355: LD_VAR 0 2
45359: NOT
45360: IFFALSE 45372
// result := unit ;
45362: LD_ADDR_VAR 0 2
45366: PUSH
45367: LD_VAR 0 1
45371: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45372: LD_VAR 0 1
45376: PPUSH
45377: CALL_OW 87
// end ;
45381: LD_VAR 0 2
45385: RET
// export function ComMoveHex ( unit , hex ) ; begin
45386: LD_INT 0
45388: PPUSH
// if not hex then
45389: LD_VAR 0 2
45393: NOT
45394: IFFALSE 45398
// exit ;
45396: GO 45451
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45398: LD_VAR 0 2
45402: PUSH
45403: LD_INT 1
45405: ARRAY
45406: PPUSH
45407: LD_VAR 0 2
45411: PUSH
45412: LD_INT 2
45414: ARRAY
45415: PPUSH
45416: CALL_OW 428
45420: IFFALSE 45424
// exit ;
45422: GO 45451
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45424: LD_VAR 0 1
45428: PPUSH
45429: LD_VAR 0 2
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PPUSH
45438: LD_VAR 0 2
45442: PUSH
45443: LD_INT 2
45445: ARRAY
45446: PPUSH
45447: CALL_OW 111
// end ;
45451: LD_VAR 0 3
45455: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45456: LD_INT 0
45458: PPUSH
45459: PPUSH
45460: PPUSH
// if not unit or not enemy then
45461: LD_VAR 0 1
45465: NOT
45466: IFTRUE 45475
45468: PUSH
45469: LD_VAR 0 2
45473: NOT
45474: OR
45475: IFFALSE 45479
// exit ;
45477: GO 45605
// x := GetX ( enemy ) ;
45479: LD_ADDR_VAR 0 4
45483: PUSH
45484: LD_VAR 0 2
45488: PPUSH
45489: CALL_OW 250
45493: ST_TO_ADDR
// y := GetY ( enemy ) ;
45494: LD_ADDR_VAR 0 5
45498: PUSH
45499: LD_VAR 0 2
45503: PPUSH
45504: CALL_OW 251
45508: ST_TO_ADDR
// if ValidHex ( x , y ) then
45509: LD_VAR 0 4
45513: PPUSH
45514: LD_VAR 0 5
45518: PPUSH
45519: CALL_OW 488
45523: IFFALSE 45605
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45525: LD_VAR 0 2
45529: PPUSH
45530: CALL_OW 247
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: IN
45545: IFTRUE 45568
45547: PUSH
45548: LD_VAR 0 1
45552: PPUSH
45553: CALL_OW 255
45557: PPUSH
45558: LD_VAR 0 2
45562: PPUSH
45563: CALL_OW 292
45567: OR
45568: IFFALSE 45586
// ComAttackUnit ( unit , enemy ) else
45570: LD_VAR 0 1
45574: PPUSH
45575: LD_VAR 0 2
45579: PPUSH
45580: CALL_OW 115
45584: GO 45605
// ComAgressiveMove ( unit , x , y ) ;
45586: LD_VAR 0 1
45590: PPUSH
45591: LD_VAR 0 4
45595: PPUSH
45596: LD_VAR 0 5
45600: PPUSH
45601: CALL_OW 114
// end ;
45605: LD_VAR 0 3
45609: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45610: LD_INT 0
45612: PPUSH
45613: PPUSH
45614: PPUSH
// list := AreaToList ( area , 0 ) ;
45615: LD_ADDR_VAR 0 5
45619: PUSH
45620: LD_VAR 0 1
45624: PPUSH
45625: LD_INT 0
45627: PPUSH
45628: CALL_OW 517
45632: ST_TO_ADDR
// if not list then
45633: LD_VAR 0 5
45637: NOT
45638: IFFALSE 45642
// exit ;
45640: GO 45772
// if all then
45642: LD_VAR 0 2
45646: IFFALSE 45734
// begin for i := 1 to list [ 1 ] do
45648: LD_ADDR_VAR 0 4
45652: PUSH
45653: DOUBLE
45654: LD_INT 1
45656: DEC
45657: ST_TO_ADDR
45658: LD_VAR 0 5
45662: PUSH
45663: LD_INT 1
45665: ARRAY
45666: PUSH
45667: FOR_TO
45668: IFFALSE 45730
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45670: LD_ADDR_VAR 0 3
45674: PUSH
45675: LD_VAR 0 3
45679: PPUSH
45680: LD_VAR 0 3
45684: PUSH
45685: LD_INT 1
45687: PLUS
45688: PPUSH
45689: LD_VAR 0 5
45693: PUSH
45694: LD_INT 1
45696: ARRAY
45697: PUSH
45698: LD_VAR 0 4
45702: ARRAY
45703: PUSH
45704: LD_VAR 0 5
45708: PUSH
45709: LD_INT 2
45711: ARRAY
45712: PUSH
45713: LD_VAR 0 4
45717: ARRAY
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PPUSH
45723: CALL_OW 1
45727: ST_TO_ADDR
45728: GO 45667
45730: POP
45731: POP
// exit ;
45732: GO 45772
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45734: LD_ADDR_VAR 0 3
45738: PUSH
45739: LD_VAR 0 5
45743: PUSH
45744: LD_INT 1
45746: ARRAY
45747: PUSH
45748: LD_INT 1
45750: ARRAY
45751: PUSH
45752: LD_VAR 0 5
45756: PUSH
45757: LD_INT 2
45759: ARRAY
45760: PUSH
45761: LD_INT 1
45763: ARRAY
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: ST_TO_ADDR
// end ;
45772: LD_VAR 0 3
45776: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45777: LD_INT 0
45779: PPUSH
45780: PPUSH
// list := AreaToList ( area , 0 ) ;
45781: LD_ADDR_VAR 0 4
45785: PUSH
45786: LD_VAR 0 1
45790: PPUSH
45791: LD_INT 0
45793: PPUSH
45794: CALL_OW 517
45798: ST_TO_ADDR
// if not list then
45799: LD_VAR 0 4
45803: NOT
45804: IFFALSE 45808
// exit ;
45806: GO 45849
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45808: LD_ADDR_VAR 0 3
45812: PUSH
45813: LD_VAR 0 4
45817: PUSH
45818: LD_INT 1
45820: ARRAY
45821: PUSH
45822: LD_INT 1
45824: ARRAY
45825: PUSH
45826: LD_VAR 0 4
45830: PUSH
45831: LD_INT 2
45833: ARRAY
45834: PUSH
45835: LD_INT 1
45837: ARRAY
45838: PUSH
45839: LD_VAR 0 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
// end ;
45849: LD_VAR 0 3
45853: RET
// export function First ( array ) ; begin
45854: LD_INT 0
45856: PPUSH
// if not array then
45857: LD_VAR 0 1
45861: NOT
45862: IFFALSE 45866
// exit ;
45864: GO 45880
// result := array [ 1 ] ;
45866: LD_ADDR_VAR 0 2
45870: PUSH
45871: LD_VAR 0 1
45875: PUSH
45876: LD_INT 1
45878: ARRAY
45879: ST_TO_ADDR
// end ;
45880: LD_VAR 0 2
45884: RET
// export function Last ( array ) ; begin
45885: LD_INT 0
45887: PPUSH
// if not array then
45888: LD_VAR 0 1
45892: NOT
45893: IFFALSE 45897
// exit ;
45895: GO 45913
// result := array [ array ] ;
45897: LD_ADDR_VAR 0 2
45901: PUSH
45902: LD_VAR 0 1
45906: PUSH
45907: LD_VAR 0 1
45911: ARRAY
45912: ST_TO_ADDR
// end ;
45913: LD_VAR 0 2
45917: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45918: LD_INT 0
45920: PPUSH
45921: PPUSH
// result := [ ] ;
45922: LD_ADDR_VAR 0 5
45926: PUSH
45927: EMPTY
45928: ST_TO_ADDR
// if not array then
45929: LD_VAR 0 1
45933: NOT
45934: IFFALSE 45938
// exit ;
45936: GO 46050
// for i := 1 to array do
45938: LD_ADDR_VAR 0 6
45942: PUSH
45943: DOUBLE
45944: LD_INT 1
45946: DEC
45947: ST_TO_ADDR
45948: LD_VAR 0 1
45952: PUSH
45953: FOR_TO
45954: IFFALSE 46048
// if array [ i ] [ index ] = value then
45956: LD_VAR 0 1
45960: PUSH
45961: LD_VAR 0 6
45965: ARRAY
45966: PUSH
45967: LD_VAR 0 2
45971: ARRAY
45972: PUSH
45973: LD_VAR 0 3
45977: EQUAL
45978: IFFALSE 46046
// begin if indexColumn then
45980: LD_VAR 0 4
45984: IFFALSE 46020
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45986: LD_ADDR_VAR 0 5
45990: PUSH
45991: LD_VAR 0 5
45995: PPUSH
45996: LD_VAR 0 1
46000: PUSH
46001: LD_VAR 0 6
46005: ARRAY
46006: PUSH
46007: LD_VAR 0 4
46011: ARRAY
46012: PPUSH
46013: CALL 41058 0 2
46017: ST_TO_ADDR
46018: GO 46046
// result := Join ( result , array [ i ] ) ;
46020: LD_ADDR_VAR 0 5
46024: PUSH
46025: LD_VAR 0 5
46029: PPUSH
46030: LD_VAR 0 1
46034: PUSH
46035: LD_VAR 0 6
46039: ARRAY
46040: PPUSH
46041: CALL 41058 0 2
46045: ST_TO_ADDR
// end ;
46046: GO 45953
46048: POP
46049: POP
// end ;
46050: LD_VAR 0 5
46054: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46055: LD_INT 0
46057: PPUSH
// if not vehicles or not parkingPoint then
46058: LD_VAR 0 1
46062: NOT
46063: IFTRUE 46072
46065: PUSH
46066: LD_VAR 0 2
46070: NOT
46071: OR
46072: IFFALSE 46076
// exit ;
46074: GO 46174
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46076: LD_ADDR_VAR 0 1
46080: PUSH
46081: LD_VAR 0 1
46085: PPUSH
46086: LD_INT 50
46088: PUSH
46089: EMPTY
46090: LIST
46091: PUSH
46092: LD_INT 3
46094: PUSH
46095: LD_INT 92
46097: PUSH
46098: LD_VAR 0 2
46102: PUSH
46103: LD_INT 1
46105: ARRAY
46106: PUSH
46107: LD_VAR 0 2
46111: PUSH
46112: LD_INT 2
46114: ARRAY
46115: PUSH
46116: LD_INT 8
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PPUSH
46133: CALL_OW 72
46137: ST_TO_ADDR
// if not vehicles then
46138: LD_VAR 0 1
46142: NOT
46143: IFFALSE 46147
// exit ;
46145: GO 46174
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46147: LD_VAR 0 1
46151: PPUSH
46152: LD_VAR 0 2
46156: PUSH
46157: LD_INT 1
46159: ARRAY
46160: PPUSH
46161: LD_VAR 0 2
46165: PUSH
46166: LD_INT 2
46168: ARRAY
46169: PPUSH
46170: CALL_OW 111
// end ;
46174: LD_VAR 0 3
46178: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46179: LD_INT 0
46181: PPUSH
46182: PPUSH
46183: PPUSH
// if not side or not area then
46184: LD_VAR 0 1
46188: NOT
46189: IFTRUE 46198
46191: PUSH
46192: LD_VAR 0 2
46196: NOT
46197: OR
46198: IFFALSE 46202
// exit ;
46200: GO 46321
// tmp := AreaToList ( area , 0 ) ;
46202: LD_ADDR_VAR 0 5
46206: PUSH
46207: LD_VAR 0 2
46211: PPUSH
46212: LD_INT 0
46214: PPUSH
46215: CALL_OW 517
46219: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46220: LD_ADDR_VAR 0 4
46224: PUSH
46225: DOUBLE
46226: LD_INT 1
46228: DEC
46229: ST_TO_ADDR
46230: LD_VAR 0 5
46234: PUSH
46235: LD_INT 1
46237: ARRAY
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46319
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46242: LD_VAR 0 5
46246: PUSH
46247: LD_INT 1
46249: ARRAY
46250: PUSH
46251: LD_VAR 0 4
46255: ARRAY
46256: PPUSH
46257: LD_VAR 0 5
46261: PUSH
46262: LD_INT 2
46264: ARRAY
46265: PUSH
46266: LD_VAR 0 4
46270: ARRAY
46271: PPUSH
46272: CALL_OW 351
46276: IFFALSE 46317
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46278: LD_VAR 0 5
46282: PUSH
46283: LD_INT 1
46285: ARRAY
46286: PUSH
46287: LD_VAR 0 4
46291: ARRAY
46292: PPUSH
46293: LD_VAR 0 5
46297: PUSH
46298: LD_INT 2
46300: ARRAY
46301: PUSH
46302: LD_VAR 0 4
46306: ARRAY
46307: PPUSH
46308: LD_VAR 0 1
46312: PPUSH
46313: CALL_OW 244
// end ;
46317: GO 46239
46319: POP
46320: POP
// end ;
46321: LD_VAR 0 3
46325: RET
// export function UniqueArray ( array ) ; var i ; begin
46326: LD_INT 0
46328: PPUSH
46329: PPUSH
// result := [ ] ;
46330: LD_ADDR_VAR 0 2
46334: PUSH
46335: EMPTY
46336: ST_TO_ADDR
// if not array then
46337: LD_VAR 0 1
46341: NOT
46342: IFFALSE 46346
// exit ;
46344: GO 46407
// for i := 1 to array do
46346: LD_ADDR_VAR 0 3
46350: PUSH
46351: DOUBLE
46352: LD_INT 1
46354: DEC
46355: ST_TO_ADDR
46356: LD_VAR 0 1
46360: PUSH
46361: FOR_TO
46362: IFFALSE 46405
// if not array [ i ] in result then
46364: LD_VAR 0 1
46368: PUSH
46369: LD_VAR 0 3
46373: ARRAY
46374: PUSH
46375: LD_VAR 0 2
46379: IN
46380: NOT
46381: IFFALSE 46403
// result := Join ( result , i ) ;
46383: LD_ADDR_VAR 0 2
46387: PUSH
46388: LD_VAR 0 2
46392: PPUSH
46393: LD_VAR 0 3
46397: PPUSH
46398: CALL 41058 0 2
46402: ST_TO_ADDR
46403: GO 46361
46405: POP
46406: POP
// end ; end_of_file
46407: LD_VAR 0 2
46411: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46412: LD_INT 0
46414: PPUSH
46415: PPUSH
// disable ( mpActive ) ;
46416: LD_INT 100
46418: DISABLE_MARKED
// disable ( mpWin ) ;
46419: LD_INT 101
46421: DISABLE_MARKED
// disable ( mpLose ) ;
46422: LD_INT 102
46424: DISABLE_MARKED
// mpGameType := 0 ;
46425: LD_ADDR_EXP 1
46429: PUSH
46430: LD_INT 0
46432: ST_TO_ADDR
// mpGameSettings := [ ] ;
46433: LD_ADDR_EXP 4
46437: PUSH
46438: EMPTY
46439: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46440: LD_ADDR_EXP 2
46444: PUSH
46445: EMPTY
46446: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46447: LD_ADDR_EXP 3
46451: PUSH
46452: EMPTY
46453: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46454: LD_ADDR_EXP 27
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46469: LD_ADDR_EXP 10
46473: PUSH
46474: EMPTY
46475: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46476: LD_ADDR_EXP 11
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46483: LD_ADDR_EXP 39
46487: PUSH
46488: EMPTY
46489: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46490: LD_ADDR_EXP 40
46494: PUSH
46495: EMPTY
46496: ST_TO_ADDR
// mpDepots := [ ] ;
46497: LD_ADDR_EXP 12
46501: PUSH
46502: EMPTY
46503: ST_TO_ADDR
// mpBuildings := [ ] ;
46504: LD_ADDR_EXP 15
46508: PUSH
46509: EMPTY
46510: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46511: LD_ADDR_EXP 16
46515: PUSH
46516: EMPTY
46517: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46518: LD_ADDR_EXP 17
46522: PUSH
46523: EMPTY
46524: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46525: LD_ADDR_EXP 18
46529: PUSH
46530: EMPTY
46531: ST_TO_ADDR
// mpStartingResources := [ ] ;
46532: LD_ADDR_EXP 13
46536: PUSH
46537: EMPTY
46538: ST_TO_ADDR
// mpStartPos := [ ] ;
46539: LD_ADDR_EXP 19
46543: PUSH
46544: EMPTY
46545: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46546: LD_ADDR_EXP 20
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46555: LD_ADDR_EXP 21
46559: PUSH
46560: EMPTY
46561: ST_TO_ADDR
// mpApemans := [ ] ;
46562: LD_ADDR_EXP 28
46566: PUSH
46567: EMPTY
46568: ST_TO_ADDR
// mpApemansArea := [ ] ;
46569: LD_ADDR_EXP 29
46573: PUSH
46574: EMPTY
46575: ST_TO_ADDR
// mpRespawn := [ ] ;
46576: LD_ADDR_EXP 31
46580: PUSH
46581: EMPTY
46582: ST_TO_ADDR
// mpKingArea := 0 ;
46583: LD_ADDR_EXP 32
46587: PUSH
46588: LD_INT 0
46590: ST_TO_ADDR
// mpPoints := [ ] ;
46591: LD_ADDR_EXP 33
46595: PUSH
46596: EMPTY
46597: ST_TO_ADDR
// mpVehicles := 0 ;
46598: LD_ADDR_EXP 34
46602: PUSH
46603: LD_INT 0
46605: ST_TO_ADDR
// mpShipments := 0 ;
46606: LD_ADDR_EXP 25
46610: PUSH
46611: LD_INT 0
46613: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46614: LD_ADDR_EXP 38
46618: PUSH
46619: EMPTY
46620: PUSH
46621: EMPTY
46622: PUSH
46623: EMPTY
46624: PUSH
46625: EMPTY
46626: PUSH
46627: EMPTY
46628: PUSH
46629: EMPTY
46630: PUSH
46631: EMPTY
46632: PUSH
46633: EMPTY
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46645: LD_ADDR_EXP 30
46649: PUSH
46650: EMPTY
46651: PUSH
46652: EMPTY
46653: PUSH
46654: EMPTY
46655: PUSH
46656: EMPTY
46657: PUSH
46658: EMPTY
46659: PUSH
46660: EMPTY
46661: PUSH
46662: EMPTY
46663: PUSH
46664: EMPTY
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: ST_TO_ADDR
// mpEmissions := 0 ;
46676: LD_ADDR_EXP 35
46680: PUSH
46681: LD_INT 0
46683: ST_TO_ADDR
// mpTeleports := 0 ;
46684: LD_ADDR_EXP 41
46688: PUSH
46689: LD_INT 0
46691: ST_TO_ADDR
// mpArtifacts := 0 ;
46692: LD_ADDR_EXP 42
46696: PUSH
46697: LD_INT 0
46699: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46700: LD_ADDR_EXP 23
46704: PUSH
46705: LD_INT 3
46707: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46708: LD_ADDR_EXP 22
46712: PUSH
46713: LD_INT 15
46715: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46716: LD_ADDR_EXP 36
46720: PUSH
46721: LD_INT 0
46723: ST_TO_ADDR
// mpGameActive := false ;
46724: LD_ADDR_EXP 37
46728: PUSH
46729: LD_INT 0
46731: ST_TO_ADDR
// mpBlockRespThread := false ;
46732: LD_ADDR_EXP 43
46736: PUSH
46737: LD_INT 0
46739: ST_TO_ADDR
// for i := 1 to 32 do
46740: LD_ADDR_VAR 0 2
46744: PUSH
46745: DOUBLE
46746: LD_INT 1
46748: DEC
46749: ST_TO_ADDR
46750: LD_INT 32
46752: PUSH
46753: FOR_TO
46754: IFFALSE 46781
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46756: LD_ADDR_EXP 4
46760: PUSH
46761: LD_EXP 4
46765: PPUSH
46766: LD_VAR 0 2
46770: PPUSH
46771: LD_INT 0
46773: PPUSH
46774: CALL_OW 1
46778: ST_TO_ADDR
46779: GO 46753
46781: POP
46782: POP
// end ;
46783: LD_VAR 0 1
46787: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46788: LD_INT 0
46790: PPUSH
46791: PPUSH
46792: PPUSH
46793: PPUSH
46794: PPUSH
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46804: LD_ADDR_VAR 0 14
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: LD_INT 5
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// for i in gameTypes do
46827: LD_ADDR_VAR 0 2
46831: PUSH
46832: LD_VAR 0 14
46836: PUSH
46837: FOR_IN
46838: IFFALSE 46847
// disable ( i ) ;
46840: LD_VAR 0 2
46844: DISABLE_MARKED
46845: GO 46837
46847: POP
46848: POP
// if Multiplayer then
46849: LD_OWVAR 4
46853: IFFALSE 47037
// begin mpGameType := mp_game_type ;
46855: LD_ADDR_EXP 1
46859: PUSH
46860: LD_OWVAR 6
46864: ST_TO_ADDR
// your_side := mp_player_side ;
46865: LD_ADDR_OWVAR 2
46869: PUSH
46870: LD_OWVAR 7
46874: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46875: LD_ADDR_EXP 5
46879: PUSH
46880: LD_OWVAR 17
46884: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46885: LD_ADDR_EXP 6
46889: PUSH
46890: LD_OWVAR 15
46894: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46895: LD_ADDR_EXP 7
46899: PUSH
46900: LD_OWVAR 16
46904: ST_TO_ADDR
// mpTeams := mp_teams ;
46905: LD_ADDR_EXP 8
46909: PUSH
46910: LD_OWVAR 12
46914: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46915: LD_ADDR_VAR 0 2
46919: PUSH
46920: DOUBLE
46921: LD_INT 1
46923: DEC
46924: ST_TO_ADDR
46925: LD_EXP 2
46929: PPUSH
46930: CALL 5126 0 1
46934: PUSH
46935: FOR_TO
46936: IFFALSE 47012
// begin setting := mpGameSettingsKeys [ i ] ;
46938: LD_ADDR_VAR 0 12
46942: PUSH
46943: LD_EXP 2
46947: PUSH
46948: LD_VAR 0 2
46952: ARRAY
46953: ST_TO_ADDR
// if setting then
46954: LD_VAR 0 12
46958: IFFALSE 47010
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46960: LD_ADDR_EXP 4
46964: PUSH
46965: LD_EXP 4
46969: PPUSH
46970: LD_VAR 0 2
46974: PPUSH
46975: LD_EXP 3
46979: PUSH
46980: LD_VAR 0 2
46984: ARRAY
46985: PUSH
46986: LD_VAR 0 2
46990: PUSH
46991: LD_INT 1
46993: MINUS
46994: PPUSH
46995: CALL_OW 426
46999: PUSH
47000: LD_INT 1
47002: PLUS
47003: ARRAY
47004: PPUSH
47005: CALL_OW 1
47009: ST_TO_ADDR
// end ;
47010: GO 46935
47012: POP
47013: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47014: LD_ADDR_EXP 9
47018: PUSH
47019: LD_EXP 6
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: DIFF
47030: PUSH
47031: LD_INT 1
47033: GREATER
47034: ST_TO_ADDR
// end else
47035: GO 47037
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47037: LD_EXP 1
47041: PPUSH
47042: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
47046: LD_EXP 16
47050: PPUSH
47051: CALL 5126 0 1
47055: IFFALSE 47086
// begin for i in mpMarkedAreas do
47057: LD_ADDR_VAR 0 2
47061: PUSH
47062: LD_EXP 16
47066: PUSH
47067: FOR_IN
47068: IFFALSE 47084
// SetAreaMapShow ( i , 0 ) ;
47070: LD_VAR 0 2
47074: PPUSH
47075: LD_INT 0
47077: PPUSH
47078: CALL_OW 424
47082: GO 47067
47084: POP
47085: POP
// end ; for i := 1 to 8 do
47086: LD_ADDR_VAR 0 2
47090: PUSH
47091: DOUBLE
47092: LD_INT 1
47094: DEC
47095: ST_TO_ADDR
47096: LD_INT 8
47098: PUSH
47099: FOR_TO
47100: IFFALSE 48436
// begin if not mpSidePositions [ i ] then
47102: LD_EXP 5
47106: PUSH
47107: LD_VAR 0 2
47111: ARRAY
47112: NOT
47113: IFFALSE 47117
// continue ;
47115: GO 47099
// side := i ;
47117: LD_ADDR_VAR 0 7
47121: PUSH
47122: LD_VAR 0 2
47126: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47127: LD_ADDR_VAR 0 9
47131: PUSH
47132: LD_EXP 7
47136: PUSH
47137: LD_VAR 0 2
47141: ARRAY
47142: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47143: LD_ADDR_VAR 0 8
47147: PUSH
47148: LD_EXP 5
47152: PUSH
47153: LD_VAR 0 2
47157: ARRAY
47158: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47159: LD_EXP 10
47163: PPUSH
47164: CALL 5126 0 1
47168: IFFALSE 47245
// begin for j in mpOilDeposits [ pos ] do
47170: LD_ADDR_VAR 0 3
47174: PUSH
47175: LD_EXP 10
47179: PUSH
47180: LD_VAR 0 8
47184: ARRAY
47185: PUSH
47186: FOR_IN
47187: IFFALSE 47243
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47189: LD_VAR 0 3
47193: PUSH
47194: LD_INT 1
47196: ARRAY
47197: PPUSH
47198: LD_VAR 0 3
47202: PUSH
47203: LD_INT 2
47205: ARRAY
47206: PPUSH
47207: LD_INT 2
47209: PPUSH
47210: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47214: LD_VAR 0 3
47218: PUSH
47219: LD_INT 1
47221: ARRAY
47222: PPUSH
47223: LD_VAR 0 3
47227: PUSH
47228: LD_INT 2
47230: ARRAY
47231: PPUSH
47232: LD_VAR 0 7
47236: PPUSH
47237: CALL_OW 441
// end ;
47241: GO 47186
47243: POP
47244: POP
// end ; if Count ( mpSibDeposits ) then
47245: LD_EXP 11
47249: PPUSH
47250: CALL 5126 0 1
47254: IFFALSE 47331
// begin for j in mpSibDeposits [ pos ] do
47256: LD_ADDR_VAR 0 3
47260: PUSH
47261: LD_EXP 11
47265: PUSH
47266: LD_VAR 0 8
47270: ARRAY
47271: PUSH
47272: FOR_IN
47273: IFFALSE 47329
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47275: LD_VAR 0 3
47279: PUSH
47280: LD_INT 1
47282: ARRAY
47283: PPUSH
47284: LD_VAR 0 3
47288: PUSH
47289: LD_INT 2
47291: ARRAY
47292: PPUSH
47293: LD_INT 3
47295: PPUSH
47296: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47300: LD_VAR 0 3
47304: PUSH
47305: LD_INT 1
47307: ARRAY
47308: PPUSH
47309: LD_VAR 0 3
47313: PUSH
47314: LD_INT 2
47316: ARRAY
47317: PPUSH
47318: LD_VAR 0 7
47322: PPUSH
47323: CALL_OW 441
// end ;
47327: GO 47272
47329: POP
47330: POP
// end ; InitBc ;
47331: CALL_OW 21
// InitUc ;
47335: CALL_OW 18
// uc_side := side ;
47339: LD_ADDR_OWVAR 20
47343: PUSH
47344: LD_VAR 0 7
47348: ST_TO_ADDR
// uc_nation := nation ;
47349: LD_ADDR_OWVAR 21
47353: PUSH
47354: LD_VAR 0 9
47358: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47359: LD_EXP 20
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: GREATER
47368: IFFALSE 47527
// begin x := mpStartPos [ pos ] [ 1 ] ;
47370: LD_ADDR_VAR 0 5
47374: PUSH
47375: LD_EXP 19
47379: PUSH
47380: LD_VAR 0 8
47384: ARRAY
47385: PUSH
47386: LD_INT 1
47388: ARRAY
47389: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47390: LD_ADDR_VAR 0 6
47394: PUSH
47395: LD_EXP 19
47399: PUSH
47400: LD_VAR 0 8
47404: ARRAY
47405: PUSH
47406: LD_INT 2
47408: ARRAY
47409: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47410: LD_VAR 0 5
47414: PPUSH
47415: LD_VAR 0 6
47419: PPUSH
47420: LD_INT 12
47422: PPUSH
47423: LD_INT 2
47425: PPUSH
47426: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47430: LD_ADDR_EXP 21
47434: PUSH
47435: LD_EXP 21
47439: PPUSH
47440: LD_VAR 0 7
47444: PPUSH
47445: LD_VAR 0 7
47449: PPUSH
47450: LD_VAR 0 5
47454: PPUSH
47455: LD_VAR 0 6
47459: PPUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 100
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 70
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: PUSH
47483: LD_INT 40
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 10
47492: PUSH
47493: LD_INT 25
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 20
47502: PUSH
47503: LD_INT 100
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: PPUSH
47517: CALL_OW 418
47521: PPUSH
47522: CALL_OW 1
47526: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47527: LD_EXP 12
47531: PPUSH
47532: CALL 5126 0 1
47536: IFFALSE 47720
// begin if mpGameType = GameTypeSurvival then
47538: LD_EXP 1
47542: PUSH
47543: LD_INT 2
47545: EQUAL
47546: IFFALSE 47566
// begin bc_level := 10 ;
47548: LD_ADDR_OWVAR 43
47552: PUSH
47553: LD_INT 10
47555: ST_TO_ADDR
// bc_type := b_warehouse ;
47556: LD_ADDR_OWVAR 42
47560: PUSH
47561: LD_INT 1
47563: ST_TO_ADDR
// end else
47564: GO 47582
// begin bc_level := 0 ;
47566: LD_ADDR_OWVAR 43
47570: PUSH
47571: LD_INT 0
47573: ST_TO_ADDR
// bc_type := b_depot ;
47574: LD_ADDR_OWVAR 42
47578: PUSH
47579: LD_INT 0
47581: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47582: LD_ADDR_VAR 0 4
47586: PUSH
47587: LD_EXP 12
47591: PUSH
47592: LD_VAR 0 8
47596: ARRAY
47597: PUSH
47598: LD_INT 1
47600: ARRAY
47601: PPUSH
47602: LD_EXP 12
47606: PUSH
47607: LD_VAR 0 8
47611: ARRAY
47612: PUSH
47613: LD_INT 2
47615: ARRAY
47616: PPUSH
47617: LD_EXP 12
47621: PUSH
47622: LD_VAR 0 8
47626: ARRAY
47627: PUSH
47628: LD_INT 3
47630: ARRAY
47631: PPUSH
47632: CALL_OW 47
47636: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47637: LD_VAR 0 4
47641: PPUSH
47642: LD_STRING @
47644: PUSH
47645: LD_VAR 0 7
47649: STR
47650: PPUSH
47651: CALL_OW 500
// if Count ( mpStartingResources ) then
47655: LD_EXP 13
47659: PPUSH
47660: CALL 5126 0 1
47664: IFFALSE 47718
// begin for j := 1 to mpStartingResources do
47666: LD_ADDR_VAR 0 3
47670: PUSH
47671: DOUBLE
47672: LD_INT 1
47674: DEC
47675: ST_TO_ADDR
47676: LD_EXP 13
47680: PUSH
47681: FOR_TO
47682: IFFALSE 47716
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47684: LD_VAR 0 4
47688: PPUSH
47689: CALL_OW 274
47693: PPUSH
47694: LD_VAR 0 3
47698: PPUSH
47699: LD_EXP 13
47703: PUSH
47704: LD_VAR 0 3
47708: ARRAY
47709: PPUSH
47710: CALL_OW 277
47714: GO 47681
47716: POP
47717: POP
// end ; end else
47718: GO 47927
// if Count ( mpStartingResources ) then
47720: LD_EXP 13
47724: PPUSH
47725: CALL 5126 0 1
47729: IFFALSE 47927
// begin x := mpStartPos [ pos ] [ 1 ] ;
47731: LD_ADDR_VAR 0 5
47735: PUSH
47736: LD_EXP 19
47740: PUSH
47741: LD_VAR 0 8
47745: ARRAY
47746: PUSH
47747: LD_INT 1
47749: ARRAY
47750: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47751: LD_ADDR_VAR 0 6
47755: PUSH
47756: LD_EXP 19
47760: PUSH
47761: LD_VAR 0 8
47765: ARRAY
47766: PUSH
47767: LD_INT 2
47769: ARRAY
47770: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47771: LD_ADDR_VAR 0 3
47775: PUSH
47776: DOUBLE
47777: LD_INT 1
47779: DEC
47780: ST_TO_ADDR
47781: LD_EXP 13
47785: PUSH
47786: FOR_TO
47787: IFFALSE 47925
// begin resources := mpStartingResources [ j ] ;
47789: LD_ADDR_VAR 0 13
47793: PUSH
47794: LD_EXP 13
47798: PUSH
47799: LD_VAR 0 3
47803: ARRAY
47804: ST_TO_ADDR
// if resources = 0 then
47805: LD_VAR 0 13
47809: PUSH
47810: LD_INT 0
47812: EQUAL
47813: IFFALSE 47817
// continue ;
47815: GO 47786
// repeat if resources >= 50 then
47817: LD_VAR 0 13
47821: PUSH
47822: LD_INT 50
47824: GREATEREQUAL
47825: IFFALSE 47871
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47827: LD_VAR 0 3
47831: PPUSH
47832: LD_INT 5
47834: PPUSH
47835: LD_VAR 0 5
47839: PPUSH
47840: LD_VAR 0 6
47844: PPUSH
47845: LD_INT 6
47847: PPUSH
47848: LD_INT 0
47850: PPUSH
47851: CALL_OW 60
// resources := resources - 50 ;
47855: LD_ADDR_VAR 0 13
47859: PUSH
47860: LD_VAR 0 13
47864: PUSH
47865: LD_INT 50
47867: MINUS
47868: ST_TO_ADDR
// end else
47869: GO 47913
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47871: LD_VAR 0 3
47875: PPUSH
47876: LD_VAR 0 13
47880: PUSH
47881: LD_INT 10
47883: DIV
47884: PPUSH
47885: LD_VAR 0 5
47889: PPUSH
47890: LD_VAR 0 6
47894: PPUSH
47895: LD_INT 6
47897: PPUSH
47898: LD_INT 0
47900: PPUSH
47901: CALL_OW 60
// resources := 0 ;
47905: LD_ADDR_VAR 0 13
47909: PUSH
47910: LD_INT 0
47912: ST_TO_ADDR
// end ; until resources <= 0 ;
47913: LD_VAR 0 13
47917: PUSH
47918: LD_INT 0
47920: LESSEQUAL
47921: IFFALSE 47817
// end ;
47923: GO 47786
47925: POP
47926: POP
// end ; if Count ( mpBuildings ) then
47927: LD_EXP 15
47931: PPUSH
47932: CALL 5126 0 1
47936: IFFALSE 48014
// begin for j in mpBuildings [ pos ] do
47938: LD_ADDR_VAR 0 3
47942: PUSH
47943: LD_EXP 15
47947: PUSH
47948: LD_VAR 0 8
47952: ARRAY
47953: PUSH
47954: FOR_IN
47955: IFFALSE 48012
// begin bc_level := 0 ;
47957: LD_ADDR_OWVAR 43
47961: PUSH
47962: LD_INT 0
47964: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47965: LD_ADDR_OWVAR 42
47969: PUSH
47970: LD_VAR 0 3
47974: PUSH
47975: LD_INT 1
47977: ARRAY
47978: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47979: LD_VAR 0 3
47983: PUSH
47984: LD_INT 2
47986: ARRAY
47987: PPUSH
47988: LD_VAR 0 3
47992: PUSH
47993: LD_INT 3
47995: ARRAY
47996: PPUSH
47997: LD_VAR 0 3
48001: PUSH
48002: LD_INT 4
48004: ARRAY
48005: PPUSH
48006: CALL_OW 47
// end ;
48010: GO 47954
48012: POP
48013: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48014: LD_EXP 24
48018: IFFALSE 48038
48020: PUSH
48021: LD_INT 20
48023: PPUSH
48024: LD_VAR 0 7
48028: PPUSH
48029: CALL_OW 321
48033: PUSH
48034: LD_INT 1
48036: EQUAL
48037: AND
48038: IFFALSE 48055
// SetTech ( tech_SibDet , side , state_researched ) ;
48040: LD_INT 20
48042: PPUSH
48043: LD_VAR 0 7
48047: PPUSH
48048: LD_INT 2
48050: PPUSH
48051: CALL_OW 322
// if not mpArtifacts then
48055: LD_EXP 42
48059: NOT
48060: IFFALSE 48077
// SetTech ( tech_artifact , side , state_disabled ) ;
48062: LD_INT 24
48064: PPUSH
48065: LD_VAR 0 7
48069: PPUSH
48070: LD_INT 0
48072: PPUSH
48073: CALL_OW 322
// if mpSibBomb = 1 then
48077: LD_EXP 26
48081: PUSH
48082: LD_INT 1
48084: EQUAL
48085: IFFALSE 48104
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48087: LD_INT 25
48089: PPUSH
48090: LD_VAR 0 7
48094: PPUSH
48095: LD_INT 1
48097: PPUSH
48098: CALL_OW 322
// end else
48102: GO 48119
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48104: LD_INT 25
48106: PPUSH
48107: LD_VAR 0 7
48111: PPUSH
48112: LD_INT 0
48114: PPUSH
48115: CALL_OW 322
// end ; if mpVehicles then
48119: LD_EXP 34
48123: IFFALSE 48222
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48125: LD_ADDR_VAR 0 3
48129: PUSH
48130: LD_VAR 0 7
48134: PPUSH
48135: LD_VAR 0 9
48139: PPUSH
48140: LD_EXP 34
48144: PPUSH
48145: CALL 49346 0 3
48149: PUSH
48150: FOR_IN
48151: IFFALSE 48220
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48153: LD_VAR 0 3
48157: PPUSH
48158: LD_INT 0
48160: PPUSH
48161: LD_INT 5
48163: PPUSH
48164: CALL_OW 12
48168: PPUSH
48169: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48173: LD_VAR 0 3
48177: PPUSH
48178: LD_EXP 19
48182: PUSH
48183: LD_VAR 0 8
48187: ARRAY
48188: PUSH
48189: LD_INT 1
48191: ARRAY
48192: PPUSH
48193: LD_EXP 19
48197: PUSH
48198: LD_VAR 0 8
48202: ARRAY
48203: PUSH
48204: LD_INT 2
48206: ARRAY
48207: PPUSH
48208: LD_INT 12
48210: PPUSH
48211: LD_INT 0
48213: PPUSH
48214: CALL_OW 50
// end ;
48218: GO 48150
48220: POP
48221: POP
// end ; uc_nation := nation ;
48222: LD_ADDR_OWVAR 21
48226: PUSH
48227: LD_VAR 0 9
48231: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48232: LD_ADDR_VAR 0 11
48236: PUSH
48237: LD_VAR 0 7
48241: PPUSH
48242: LD_VAR 0 9
48246: PPUSH
48247: LD_EXP 22
48251: PPUSH
48252: LD_EXP 23
48256: PPUSH
48257: CALL 48848 0 4
48261: ST_TO_ADDR
// for j in team do
48262: LD_ADDR_VAR 0 3
48266: PUSH
48267: LD_VAR 0 11
48271: PUSH
48272: FOR_IN
48273: IFFALSE 48322
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48275: LD_VAR 0 3
48279: PPUSH
48280: LD_EXP 19
48284: PUSH
48285: LD_VAR 0 8
48289: ARRAY
48290: PUSH
48291: LD_INT 1
48293: ARRAY
48294: PPUSH
48295: LD_EXP 19
48299: PUSH
48300: LD_VAR 0 8
48304: ARRAY
48305: PUSH
48306: LD_INT 2
48308: ARRAY
48309: PPUSH
48310: LD_INT 12
48312: PPUSH
48313: LD_INT 0
48315: PPUSH
48316: CALL_OW 50
48320: GO 48272
48322: POP
48323: POP
// if mpApemans then
48324: LD_EXP 28
48328: IFFALSE 48434
// begin for j := 1 to mpApemans do
48330: LD_ADDR_VAR 0 3
48334: PUSH
48335: DOUBLE
48336: LD_INT 1
48338: DEC
48339: ST_TO_ADDR
48340: LD_EXP 28
48344: PUSH
48345: FOR_TO
48346: IFFALSE 48432
// begin PrepareApeman ( - 5 ) ;
48348: LD_INT 5
48350: NEG
48351: PPUSH
48352: CALL 37185 0 1
// ape := CreateHuman ;
48356: LD_ADDR_VAR 0 10
48360: PUSH
48361: CALL_OW 44
48365: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48366: LD_ADDR_EXP 30
48370: PUSH
48371: LD_EXP 30
48375: PPUSH
48376: LD_VAR 0 8
48380: PPUSH
48381: LD_EXP 30
48385: PUSH
48386: LD_VAR 0 8
48390: ARRAY
48391: PPUSH
48392: LD_VAR 0 10
48396: PPUSH
48397: CALL 41058 0 2
48401: PPUSH
48402: CALL_OW 1
48406: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48407: LD_VAR 0 10
48411: PPUSH
48412: LD_EXP 29
48416: PUSH
48417: LD_VAR 0 8
48421: ARRAY
48422: PPUSH
48423: LD_INT 0
48425: PPUSH
48426: CALL_OW 49
// end ;
48430: GO 48345
48432: POP
48433: POP
// end ; end ;
48434: GO 47099
48436: POP
48437: POP
// if not mpTeamGame then
48438: LD_EXP 9
48442: NOT
48443: IFFALSE 48541
// begin for i := 1 to 8 do
48445: LD_ADDR_VAR 0 2
48449: PUSH
48450: DOUBLE
48451: LD_INT 1
48453: DEC
48454: ST_TO_ADDR
48455: LD_INT 8
48457: PUSH
48458: FOR_TO
48459: IFFALSE 48537
// for j := 1 to 8 do
48461: LD_ADDR_VAR 0 3
48465: PUSH
48466: DOUBLE
48467: LD_INT 1
48469: DEC
48470: ST_TO_ADDR
48471: LD_INT 8
48473: PUSH
48474: FOR_TO
48475: IFFALSE 48533
// if i <> j then
48477: LD_VAR 0 2
48481: PUSH
48482: LD_VAR 0 3
48486: NONEQUAL
48487: IFFALSE 48511
// SetAttitude ( i , j , att_neutral , true ) else
48489: LD_VAR 0 2
48493: PPUSH
48494: LD_VAR 0 3
48498: PPUSH
48499: LD_INT 0
48501: PPUSH
48502: LD_INT 1
48504: PPUSH
48505: CALL_OW 80
48509: GO 48531
// SetAttitude ( i , j , att_friend , true ) ;
48511: LD_VAR 0 2
48515: PPUSH
48516: LD_VAR 0 3
48520: PPUSH
48521: LD_INT 1
48523: PPUSH
48524: LD_INT 1
48526: PPUSH
48527: CALL_OW 80
48531: GO 48474
48533: POP
48534: POP
48535: GO 48458
48537: POP
48538: POP
// end else
48539: GO 48716
// begin if mpSharedVision then
48541: LD_EXP 14
48545: IFFALSE 48610
// begin for i in mpTeams do
48547: LD_ADDR_VAR 0 2
48551: PUSH
48552: LD_EXP 8
48556: PUSH
48557: FOR_IN
48558: IFFALSE 48608
// for j := 2 to i do
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: DOUBLE
48566: LD_INT 2
48568: DEC
48569: ST_TO_ADDR
48570: LD_VAR 0 2
48574: PUSH
48575: FOR_TO
48576: IFFALSE 48604
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48578: LD_VAR 0 2
48582: PUSH
48583: LD_VAR 0 3
48587: ARRAY
48588: PPUSH
48589: LD_VAR 0 2
48593: PUSH
48594: LD_INT 1
48596: ARRAY
48597: PPUSH
48598: CALL_OW 343
48602: GO 48575
48604: POP
48605: POP
48606: GO 48557
48608: POP
48609: POP
// end ; for i := 1 to 8 do
48610: LD_ADDR_VAR 0 2
48614: PUSH
48615: DOUBLE
48616: LD_INT 1
48618: DEC
48619: ST_TO_ADDR
48620: LD_INT 8
48622: PUSH
48623: FOR_TO
48624: IFFALSE 48714
// for j := 1 to 8 do
48626: LD_ADDR_VAR 0 3
48630: PUSH
48631: DOUBLE
48632: LD_INT 1
48634: DEC
48635: ST_TO_ADDR
48636: LD_INT 8
48638: PUSH
48639: FOR_TO
48640: IFFALSE 48710
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48642: LD_EXP 6
48646: PUSH
48647: LD_VAR 0 2
48651: ARRAY
48652: PUSH
48653: LD_EXP 6
48657: PUSH
48658: LD_VAR 0 3
48662: ARRAY
48663: EQUAL
48664: IFFALSE 48688
// SetAttitude ( i , j , att_friend , true ) else
48666: LD_VAR 0 2
48670: PPUSH
48671: LD_VAR 0 3
48675: PPUSH
48676: LD_INT 1
48678: PPUSH
48679: LD_INT 1
48681: PPUSH
48682: CALL_OW 80
48686: GO 48708
// SetAttitude ( i , j , att_enemy , true ) ;
48688: LD_VAR 0 2
48692: PPUSH
48693: LD_VAR 0 3
48697: PPUSH
48698: LD_INT 2
48700: PPUSH
48701: LD_INT 1
48703: PPUSH
48704: CALL_OW 80
48708: GO 48639
48710: POP
48711: POP
48712: GO 48623
48714: POP
48715: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48716: LD_ADDR_OWVAR 71
48720: PUSH
48721: LD_EXP 7
48725: PUSH
48726: LD_OWVAR 2
48730: ARRAY
48731: ST_TO_ADDR
// if IAmSpec then
48732: CALL_OW 531
48736: IFFALSE 48777
// begin FogOff ( true ) ;
48738: LD_INT 1
48740: PPUSH
48741: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48745: LD_EXP 27
48749: PUSH
48750: LD_INT 1
48752: ARRAY
48753: PUSH
48754: LD_INT 2
48756: DIV
48757: PPUSH
48758: LD_EXP 27
48762: PUSH
48763: LD_INT 2
48765: ARRAY
48766: PUSH
48767: LD_INT 2
48769: DIV
48770: PPUSH
48771: CALL_OW 86
// end else
48775: GO 48823
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48777: LD_EXP 19
48781: PUSH
48782: LD_EXP 5
48786: PUSH
48787: LD_OWVAR 2
48791: ARRAY
48792: ARRAY
48793: PUSH
48794: LD_INT 1
48796: ARRAY
48797: PPUSH
48798: LD_EXP 19
48802: PUSH
48803: LD_EXP 5
48807: PUSH
48808: LD_OWVAR 2
48812: ARRAY
48813: ARRAY
48814: PUSH
48815: LD_INT 2
48817: ARRAY
48818: PPUSH
48819: CALL_OW 86
// end ; BeginBuildUp ;
48823: CALL 49879 0 0
// enable ( mpActive ) ;
48827: LD_INT 100
48829: ENABLE_MARKED
// enable ( mpGameType ) ;
48830: LD_EXP 1
48834: ENABLE_MARKED
// mpGameActive := true ;
48835: LD_ADDR_EXP 37
48839: PUSH
48840: LD_INT 1
48842: ST_TO_ADDR
// end ;
48843: LD_VAR 0 1
48847: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48848: LD_INT 0
48850: PPUSH
48851: PPUSH
48852: PPUSH
48853: PPUSH
// result := [ ] ;
48854: LD_ADDR_VAR 0 5
48858: PUSH
48859: EMPTY
48860: ST_TO_ADDR
// class := class_soldier ;
48861: LD_ADDR_VAR 0 8
48865: PUSH
48866: LD_INT 1
48868: ST_TO_ADDR
// uc_side := side ;
48869: LD_ADDR_OWVAR 20
48873: PUSH
48874: LD_VAR 0 1
48878: ST_TO_ADDR
// uc_nation := nation ;
48879: LD_ADDR_OWVAR 21
48883: PUSH
48884: LD_VAR 0 2
48888: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48889: LD_ADDR_OWVAR 26
48893: PUSH
48894: LD_OWVAR 19
48898: PUSH
48899: LD_VAR 0 1
48903: ARRAY
48904: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48905: LD_INT 1
48907: PPUSH
48908: LD_INT 2
48910: PPUSH
48911: CALL_OW 12
48915: PPUSH
48916: LD_VAR 0 8
48920: PPUSH
48921: LD_VAR 0 4
48925: PUSH
48926: LD_INT 2
48928: PLUS
48929: PPUSH
48930: CALL_OW 380
// hc_importance := 105 ;
48934: LD_ADDR_OWVAR 32
48938: PUSH
48939: LD_INT 105
48941: ST_TO_ADDR
// if Multiplayer then
48942: LD_OWVAR 4
48946: IFFALSE 48986
// begin hc_gallery := MULTIAVATARS ;
48948: LD_ADDR_OWVAR 33
48952: PUSH
48953: LD_STRING MULTIAVATARS
48955: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48956: LD_ADDR_OWVAR 34
48960: PUSH
48961: LD_VAR 0 1
48965: PPUSH
48966: CALL_OW 525
48970: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48971: LD_ADDR_OWVAR 27
48975: PUSH
48976: LD_VAR 0 1
48980: PPUSH
48981: CALL_OW 526
48985: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48986: LD_ADDR_VAR 0 5
48990: PUSH
48991: LD_VAR 0 5
48995: PPUSH
48996: CALL_OW 44
49000: PPUSH
49001: CALL 41058 0 2
49005: ST_TO_ADDR
// if mpTeamPreset then
49006: LD_LOC 1
49010: IFFALSE 49106
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49012: LD_LOC 1
49016: PUSH
49017: LD_INT 1
49019: ARRAY
49020: PPUSH
49021: LD_VAR 0 5
49025: PUSH
49026: LD_VAR 0 5
49030: ARRAY
49031: PPUSH
49032: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49036: LD_VAR 0 5
49040: PUSH
49041: LD_VAR 0 5
49045: ARRAY
49046: PPUSH
49047: LD_INT 1
49049: PPUSH
49050: LD_LOC 1
49054: PUSH
49055: LD_INT 1
49057: ARRAY
49058: PPUSH
49059: LD_INT 1
49061: PPUSH
49062: CALL_OW 260
49066: PPUSH
49067: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49071: LD_VAR 0 5
49075: PUSH
49076: LD_VAR 0 5
49080: ARRAY
49081: PPUSH
49082: LD_INT 2
49084: PPUSH
49085: LD_LOC 1
49089: PUSH
49090: LD_INT 1
49092: ARRAY
49093: PPUSH
49094: LD_INT 2
49096: PPUSH
49097: CALL_OW 260
49101: PPUSH
49102: CALL_OW 239
// end ; InitHc_All ( ) ;
49106: CALL_OW 584
// class := 2 ;
49110: LD_ADDR_VAR 0 8
49114: PUSH
49115: LD_INT 2
49117: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49118: LD_ADDR_VAR 0 6
49122: PUSH
49123: DOUBLE
49124: LD_INT 1
49126: DEC
49127: ST_TO_ADDR
49128: LD_VAR 0 3
49132: PUSH
49133: LD_INT 1
49135: MINUS
49136: PUSH
49137: FOR_TO
49138: IFFALSE 49322
// begin PrepareHuman ( false , class , skill ) ;
49140: LD_INT 0
49142: PPUSH
49143: LD_VAR 0 8
49147: PPUSH
49148: LD_VAR 0 4
49152: PPUSH
49153: CALL_OW 380
// un := CreateHuman ;
49157: LD_ADDR_VAR 0 7
49161: PUSH
49162: CALL_OW 44
49166: ST_TO_ADDR
// result := Join ( result , un ) ;
49167: LD_ADDR_VAR 0 5
49171: PUSH
49172: LD_VAR 0 5
49176: PPUSH
49177: LD_VAR 0 7
49181: PPUSH
49182: CALL 41058 0 2
49186: ST_TO_ADDR
// if mpTeamPreset then
49187: LD_LOC 1
49191: IFFALSE 49287
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49193: LD_LOC 1
49197: PUSH
49198: LD_VAR 0 6
49202: PUSH
49203: LD_INT 1
49205: PLUS
49206: ARRAY
49207: PPUSH
49208: LD_VAR 0 7
49212: PPUSH
49213: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49217: LD_VAR 0 7
49221: PPUSH
49222: LD_INT 1
49224: PPUSH
49225: LD_LOC 1
49229: PUSH
49230: LD_VAR 0 6
49234: PUSH
49235: LD_INT 1
49237: PLUS
49238: ARRAY
49239: PPUSH
49240: LD_INT 1
49242: PPUSH
49243: CALL_OW 260
49247: PPUSH
49248: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49252: LD_VAR 0 7
49256: PPUSH
49257: LD_INT 2
49259: PPUSH
49260: LD_LOC 1
49264: PUSH
49265: LD_VAR 0 6
49269: PUSH
49270: LD_INT 1
49272: PLUS
49273: ARRAY
49274: PPUSH
49275: LD_INT 2
49277: PPUSH
49278: CALL_OW 260
49282: PPUSH
49283: CALL_OW 239
// end ; class := Inc ( class ) ;
49287: LD_ADDR_VAR 0 8
49291: PUSH
49292: LD_VAR 0 8
49296: PPUSH
49297: CALL 42431 0 1
49301: ST_TO_ADDR
// if class = 5 then
49302: LD_VAR 0 8
49306: PUSH
49307: LD_INT 5
49309: EQUAL
49310: IFFALSE 49320
// class := 1 ;
49312: LD_ADDR_VAR 0 8
49316: PUSH
49317: LD_INT 1
49319: ST_TO_ADDR
// end ;
49320: GO 49137
49322: POP
49323: POP
// if not mpTeamPreset then
49324: LD_LOC 1
49328: NOT
49329: IFFALSE 49341
// mpTeamPreset := result ;
49331: LD_ADDR_LOC 1
49335: PUSH
49336: LD_VAR 0 5
49340: ST_TO_ADDR
// end ;
49341: LD_VAR 0 5
49345: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49346: LD_INT 0
49348: PPUSH
49349: PPUSH
// result := [ ] ;
49350: LD_ADDR_VAR 0 4
49354: PUSH
49355: EMPTY
49356: ST_TO_ADDR
// if not vehicles then
49357: LD_VAR 0 3
49361: NOT
49362: IFFALSE 49366
// exit ;
49364: GO 49580
// for i := 1 to vehicles [ nation ] do
49366: LD_ADDR_VAR 0 5
49370: PUSH
49371: DOUBLE
49372: LD_INT 1
49374: DEC
49375: ST_TO_ADDR
49376: LD_VAR 0 3
49380: PUSH
49381: LD_VAR 0 2
49385: ARRAY
49386: PUSH
49387: FOR_TO
49388: IFFALSE 49578
// begin uc_side := side ;
49390: LD_ADDR_OWVAR 20
49394: PUSH
49395: LD_VAR 0 1
49399: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49400: LD_VAR 0 3
49404: PUSH
49405: LD_VAR 0 2
49409: ARRAY
49410: PUSH
49411: LD_VAR 0 5
49415: ARRAY
49416: PPUSH
49417: CALL 5126 0 1
49421: PUSH
49422: LD_INT 4
49424: GREATER
49425: IFFALSE 49455
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49427: LD_ADDR_OWVAR 21
49431: PUSH
49432: LD_VAR 0 3
49436: PUSH
49437: LD_VAR 0 2
49441: ARRAY
49442: PUSH
49443: LD_VAR 0 5
49447: ARRAY
49448: PUSH
49449: LD_INT 5
49451: ARRAY
49452: ST_TO_ADDR
49453: GO 49465
// uc_nation := nation ;
49455: LD_ADDR_OWVAR 21
49459: PUSH
49460: LD_VAR 0 2
49464: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49465: LD_VAR 0 3
49469: PUSH
49470: LD_VAR 0 2
49474: ARRAY
49475: PUSH
49476: LD_VAR 0 5
49480: ARRAY
49481: PUSH
49482: LD_INT 1
49484: ARRAY
49485: PPUSH
49486: LD_VAR 0 3
49490: PUSH
49491: LD_VAR 0 2
49495: ARRAY
49496: PUSH
49497: LD_VAR 0 5
49501: ARRAY
49502: PUSH
49503: LD_INT 2
49505: ARRAY
49506: PPUSH
49507: LD_VAR 0 3
49511: PUSH
49512: LD_VAR 0 2
49516: ARRAY
49517: PUSH
49518: LD_VAR 0 5
49522: ARRAY
49523: PUSH
49524: LD_INT 3
49526: ARRAY
49527: PPUSH
49528: LD_VAR 0 3
49532: PUSH
49533: LD_VAR 0 2
49537: ARRAY
49538: PUSH
49539: LD_VAR 0 5
49543: ARRAY
49544: PUSH
49545: LD_INT 4
49547: ARRAY
49548: PPUSH
49549: LD_INT 80
49551: PPUSH
49552: CALL 7888 0 5
// result := Join ( result , CreateVehicle ) ;
49556: LD_ADDR_VAR 0 4
49560: PUSH
49561: LD_VAR 0 4
49565: PPUSH
49566: CALL_OW 45
49570: PPUSH
49571: CALL 41058 0 2
49575: ST_TO_ADDR
// end ;
49576: GO 49387
49578: POP
49579: POP
// end ;
49580: LD_VAR 0 4
49584: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49585: LD_INT 0
49587: PPUSH
49588: PPUSH
// for i in mpBattleFlags do
49589: LD_ADDR_VAR 0 3
49593: PUSH
49594: LD_EXP 21
49598: PUSH
49599: FOR_IN
49600: IFFALSE 49677
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49602: LD_VAR 0 3
49606: PPUSH
49607: LD_INT 1
49609: PUSH
49610: LD_VAR 0 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_VAR 0 1
49626: PUSH
49627: LD_REAL  7.00000000000000E-0001
49630: MUL
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 3
49638: PUSH
49639: LD_VAR 0 1
49643: PUSH
49644: LD_REAL  4.00000000000000E-0001
49647: MUL
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 20
49655: PUSH
49656: LD_VAR 0 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: PPUSH
49671: CALL_OW 423
49675: GO 49599
49677: POP
49678: POP
// end ;
49679: LD_VAR 0 2
49683: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49684: LD_INT 100
49686: IFFALSE 49781
49688: GO 49690
49690: DISABLE
49691: LD_INT 0
49693: PPUSH
49694: PPUSH
// begin if mpBattleFlag <= 0 then
49695: LD_EXP 20
49699: PUSH
49700: LD_INT 0
49702: LESSEQUAL
49703: IFFALSE 49707
// exit ;
49705: GO 49781
// strength := 100 ;
49707: LD_ADDR_VAR 0 2
49711: PUSH
49712: LD_INT 100
49714: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49715: LD_EXP 20
49719: PPUSH
49720: CALL_OW 67
// strength := Dec ( strength ) ;
49724: LD_ADDR_VAR 0 2
49728: PUSH
49729: LD_VAR 0 2
49733: PPUSH
49734: CALL 42453 0 1
49738: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49739: LD_VAR 0 2
49743: PPUSH
49744: CALL 49585 0 1
// until not strength ;
49748: LD_VAR 0 2
49752: NOT
49753: IFFALSE 49715
// for i in mpBattleFlags do
49755: LD_ADDR_VAR 0 1
49759: PUSH
49760: LD_EXP 21
49764: PUSH
49765: FOR_IN
49766: IFFALSE 49779
// KillBattleFlag ( i ) ;
49768: LD_VAR 0 1
49772: PPUSH
49773: CALL_OW 419
49777: GO 49765
49779: POP
49780: POP
// end ;
49781: PPOPN 2
49783: END
// every 0 0$1 marked mpActive do var side , tmp ;
49784: GO 49786
49786: DISABLE
49787: LD_INT 0
49789: PPUSH
49790: PPUSH
// begin if mpSibBomb <= 1 then
49791: LD_EXP 26
49795: PUSH
49796: LD_INT 1
49798: LESSEQUAL
49799: IFFALSE 49803
// exit ;
49801: GO 49876
// tmp := mpSibBomb ;
49803: LD_ADDR_VAR 0 2
49807: PUSH
49808: LD_EXP 26
49812: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49813: LD_INT 35
49815: PPUSH
49816: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49820: LD_ADDR_VAR 0 2
49824: PUSH
49825: LD_VAR 0 2
49829: PUSH
49830: LD_INT 35
49832: MINUS
49833: ST_TO_ADDR
// until not tmp ;
49834: LD_VAR 0 2
49838: NOT
49839: IFFALSE 49813
// for side := 1 to 8 do
49841: LD_ADDR_VAR 0 1
49845: PUSH
49846: DOUBLE
49847: LD_INT 1
49849: DEC
49850: ST_TO_ADDR
49851: LD_INT 8
49853: PUSH
49854: FOR_TO
49855: IFFALSE 49874
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49857: LD_INT 25
49859: PPUSH
49860: LD_VAR 0 1
49864: PPUSH
49865: LD_INT 1
49867: PPUSH
49868: CALL_OW 322
49872: GO 49854
49874: POP
49875: POP
// end ;
49876: PPOPN 2
49878: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49879: LD_INT 0
49881: PPUSH
49882: PPUSH
49883: PPUSH
// mpBuildUpTimeDelay := 0 ;
49884: LD_ADDR_EXP 44
49888: PUSH
49889: LD_INT 0
49891: ST_TO_ADDR
// if not mpBuildUpTime then
49892: LD_EXP 18
49896: NOT
49897: IFFALSE 49901
// exit ;
49899: GO 50090
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49901: LD_ADDR_EXP 44
49905: PUSH
49906: LD_INT 8400
49908: PUSH
49909: LD_INT 2100
49911: PUSH
49912: LD_EXP 18
49916: MUL
49917: PLUS
49918: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49919: LD_ADDR_EXP 45
49923: PUSH
49924: LD_INT 1
49926: ST_TO_ADDR
// for i := 1 to 8 do
49927: LD_ADDR_VAR 0 2
49931: PUSH
49932: DOUBLE
49933: LD_INT 1
49935: DEC
49936: ST_TO_ADDR
49937: LD_INT 8
49939: PUSH
49940: FOR_TO
49941: IFFALSE 50088
// if mpSidePositions [ i ] then
49943: LD_EXP 5
49947: PUSH
49948: LD_VAR 0 2
49952: ARRAY
49953: IFFALSE 50086
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49955: LD_EXP 17
49959: PUSH
49960: LD_EXP 5
49964: PUSH
49965: LD_VAR 0 2
49969: ARRAY
49970: ARRAY
49971: PPUSH
49972: LD_INT 5
49974: PPUSH
49975: CALL_OW 424
// for j := 1 to 8 do
49979: LD_ADDR_VAR 0 3
49983: PUSH
49984: DOUBLE
49985: LD_INT 1
49987: DEC
49988: ST_TO_ADDR
49989: LD_INT 8
49991: PUSH
49992: FOR_TO
49993: IFFALSE 50084
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
49995: LD_EXP 5
49999: PUSH
50000: LD_VAR 0 3
50004: ARRAY
50005: IFFALSE 50054
50007: PUSH
50008: LD_EXP 6
50012: PUSH
50013: LD_VAR 0 2
50017: ARRAY
50018: PUSH
50019: LD_EXP 6
50023: PUSH
50024: LD_VAR 0 3
50028: ARRAY
50029: NONEQUAL
50030: IFTRUE 50053
50032: PUSH
50033: LD_EXP 9
50037: NOT
50038: IFFALSE 50052
50040: PUSH
50041: LD_VAR 0 2
50045: PUSH
50046: LD_VAR 0 3
50050: NONEQUAL
50051: AND
50052: OR
50053: AND
50054: IFFALSE 50082
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50056: LD_VAR 0 3
50060: PPUSH
50061: LD_EXP 17
50065: PUSH
50066: LD_EXP 5
50070: PUSH
50071: LD_VAR 0 2
50075: ARRAY
50076: ARRAY
50077: PPUSH
50078: CALL_OW 333
50082: GO 49992
50084: POP
50085: POP
// end ;
50086: GO 49940
50088: POP
50089: POP
// end ;
50090: LD_VAR 0 1
50094: RET
// function EndBuildUp ; var i , j ; begin
50095: LD_INT 0
50097: PPUSH
50098: PPUSH
50099: PPUSH
// mpBuildUpTimeActive := false ;
50100: LD_ADDR_EXP 45
50104: PUSH
50105: LD_INT 0
50107: ST_TO_ADDR
// for i := 1 to 8 do
50108: LD_ADDR_VAR 0 2
50112: PUSH
50113: DOUBLE
50114: LD_INT 1
50116: DEC
50117: ST_TO_ADDR
50118: LD_INT 8
50120: PUSH
50121: FOR_TO
50122: IFFALSE 50269
// if mpSidePositions [ i ] then
50124: LD_EXP 5
50128: PUSH
50129: LD_VAR 0 2
50133: ARRAY
50134: IFFALSE 50267
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50136: LD_EXP 17
50140: PUSH
50141: LD_EXP 5
50145: PUSH
50146: LD_VAR 0 2
50150: ARRAY
50151: ARRAY
50152: PPUSH
50153: LD_INT 0
50155: PPUSH
50156: CALL_OW 424
// for j := 1 to 8 do
50160: LD_ADDR_VAR 0 3
50164: PUSH
50165: DOUBLE
50166: LD_INT 1
50168: DEC
50169: ST_TO_ADDR
50170: LD_INT 8
50172: PUSH
50173: FOR_TO
50174: IFFALSE 50265
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50176: LD_EXP 5
50180: PUSH
50181: LD_VAR 0 3
50185: ARRAY
50186: IFFALSE 50235
50188: PUSH
50189: LD_EXP 6
50193: PUSH
50194: LD_VAR 0 2
50198: ARRAY
50199: PUSH
50200: LD_EXP 6
50204: PUSH
50205: LD_VAR 0 3
50209: ARRAY
50210: NONEQUAL
50211: IFTRUE 50234
50213: PUSH
50214: LD_EXP 9
50218: NOT
50219: IFFALSE 50233
50221: PUSH
50222: LD_VAR 0 2
50226: PUSH
50227: LD_VAR 0 3
50231: NONEQUAL
50232: AND
50233: OR
50234: AND
50235: IFFALSE 50263
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50237: LD_VAR 0 3
50241: PPUSH
50242: LD_EXP 17
50246: PUSH
50247: LD_EXP 5
50251: PUSH
50252: LD_VAR 0 2
50256: ARRAY
50257: ARRAY
50258: PPUSH
50259: CALL_OW 334
50263: GO 50173
50265: POP
50266: POP
// end ;
50267: GO 50121
50269: POP
50270: POP
// end ;
50271: LD_VAR 0 1
50275: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50276: LD_EXP 45
50280: IFFALSE 50459
50282: GO 50284
50284: DISABLE
50285: LD_INT 0
50287: PPUSH
50288: PPUSH
// begin for i := 1 to 8 do
50289: LD_ADDR_VAR 0 1
50293: PUSH
50294: DOUBLE
50295: LD_INT 1
50297: DEC
50298: ST_TO_ADDR
50299: LD_INT 8
50301: PUSH
50302: FOR_TO
50303: IFFALSE 50456
// if mpSidePositions [ i ] then
50305: LD_EXP 5
50309: PUSH
50310: LD_VAR 0 1
50314: ARRAY
50315: IFFALSE 50454
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50317: LD_ADDR_VAR 0 2
50321: PUSH
50322: LD_EXP 17
50326: PUSH
50327: LD_EXP 5
50331: PUSH
50332: LD_VAR 0 1
50336: ARRAY
50337: ARRAY
50338: PPUSH
50339: LD_INT 2
50341: PUSH
50342: LD_INT 21
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 21
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 22
50369: PUSH
50370: LD_OWVAR 2
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PPUSH
50383: CALL_OW 70
50387: PUSH
50388: FOR_IN
50389: IFFALSE 50452
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50391: LD_EXP 6
50395: PUSH
50396: LD_VAR 0 1
50400: ARRAY
50401: PUSH
50402: LD_EXP 6
50406: PUSH
50407: LD_OWVAR 2
50411: ARRAY
50412: NONEQUAL
50413: IFTRUE 50436
50415: PUSH
50416: LD_EXP 9
50420: NOT
50421: IFFALSE 50435
50423: PUSH
50424: LD_VAR 0 1
50428: PUSH
50429: LD_OWVAR 2
50433: NONEQUAL
50434: AND
50435: OR
50436: IFFALSE 50450
// ComMoveToArea ( un , BuildUpEscape ) ;
50438: LD_VAR 0 2
50442: PPUSH
50443: LD_INT 23
50445: PPUSH
50446: CALL_OW 113
50450: GO 50388
50452: POP
50453: POP
50454: GO 50302
50456: POP
50457: POP
// enable ;
50458: ENABLE
// end ;
50459: PPOPN 2
50461: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50462: LD_EXP 18
50466: IFFALSE 50516
50468: GO 50470
50470: DISABLE
50471: LD_INT 0
50473: PPUSH
// begin tmp := mpBuildUpTime ;
50474: LD_ADDR_VAR 0 1
50478: PUSH
50479: LD_EXP 18
50483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50484: LD_INT 35
50486: PPUSH
50487: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50491: LD_ADDR_VAR 0 1
50495: PUSH
50496: LD_VAR 0 1
50500: PUSH
50501: LD_INT 35
50503: MINUS
50504: ST_TO_ADDR
// until not tmp ;
50505: LD_VAR 0 1
50509: NOT
50510: IFFALSE 50484
// EndBuildUp ;
50512: CALL 50095 0 0
// end ;
50516: PPOPN 1
50518: END
// every 0 0$1 trigger mpActive marked mpWin do
50519: LD_INT 100
50521: IFFALSE 50555
50523: GO 50525
50525: DISABLE
// begin if IAmServer then
50526: CALL_OW 518
50530: IFFALSE 50539
// wait ( 0 0$3 ) ;
50532: LD_INT 105
50534: PPUSH
50535: CALL_OW 67
// if Multiplayer then
50539: LD_OWVAR 4
50543: IFFALSE 50551
// YouWinInMultiplayer else
50545: CALL_OW 106
50549: GO 50555
// YouWin ;
50551: CALL_OW 103
// end ;
50555: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50556: LD_INT 0
50558: PPUSH
// result := false ;
50559: LD_ADDR_VAR 0 3
50563: PUSH
50564: LD_INT 0
50566: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50567: LD_VAR 0 1
50571: PUSH
50572: LD_INT 1
50574: DOUBLE
50575: EQUAL
50576: IFTRUE 50586
50578: LD_INT 5
50580: DOUBLE
50581: EQUAL
50582: IFTRUE 50586
50584: GO 50659
50586: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50587: LD_ADDR_VAR 0 3
50591: PUSH
50592: LD_INT 22
50594: PUSH
50595: LD_VAR 0 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 21
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 33
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 33
50629: PUSH
50630: LD_INT 5
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PPUSH
50647: CALL_OW 69
50651: PPUSH
50652: CALL 5126 0 1
50656: ST_TO_ADDR
// end ; GameTypeSurvival :
50657: GO 50898
50659: LD_INT 2
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50667
50665: GO 50797
50667: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50668: LD_ADDR_VAR 0 3
50672: PUSH
50673: LD_INT 22
50675: PUSH
50676: LD_VAR 0 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 30
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 30
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PPUSH
50717: CALL_OW 69
50721: PPUSH
50722: CALL 5126 0 1
50726: IFFALSE 50794
50728: PUSH
50729: LD_INT 22
50731: PUSH
50732: LD_VAR 0 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 21
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 33
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 33
50766: PUSH
50767: LD_INT 5
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PPUSH
50784: CALL_OW 69
50788: PPUSH
50789: CALL 5126 0 1
50793: AND
50794: ST_TO_ADDR
// end ; GameTypeKing :
50795: GO 50898
50797: LD_INT 3
50799: DOUBLE
50800: EQUAL
50801: IFTRUE 50805
50803: GO 50897
50805: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50806: LD_ADDR_VAR 0 3
50810: PUSH
50811: LD_INT 22
50813: PUSH
50814: LD_VAR 0 2
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 21
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 33
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 33
50848: PUSH
50849: LD_INT 5
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PPUSH
50866: CALL_OW 69
50870: PPUSH
50871: CALL 5126 0 1
50875: IFFALSE 50894
50877: PUSH
50878: LD_VAR 0 2
50882: PPUSH
50883: CALL 54715 0 1
50887: PUSH
50888: LD_EXP 33
50892: LESS
50893: AND
50894: ST_TO_ADDR
// end ; end ;
50895: GO 50898
50897: POP
// end ;
50898: LD_VAR 0 3
50902: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50903: LD_INT 100
50905: IFFALSE 51135
50907: GO 50909
50909: DISABLE
50910: LD_INT 0
50912: PPUSH
50913: PPUSH
// begin if Multiplayer then
50914: LD_OWVAR 4
50918: IFFALSE 50926
// SetPlayerSpectator ( ) else
50920: CALL_OW 572
50924: GO 50935
// FogOff ( your_side ) ;
50926: LD_OWVAR 2
50930: PPUSH
50931: CALL_OW 344
// repeat gameIsOn := false ;
50935: LD_ADDR_VAR 0 1
50939: PUSH
50940: LD_INT 0
50942: ST_TO_ADDR
// for i := 1 to 8 do
50943: LD_ADDR_VAR 0 2
50947: PUSH
50948: DOUBLE
50949: LD_INT 1
50951: DEC
50952: ST_TO_ADDR
50953: LD_INT 8
50955: PUSH
50956: FOR_TO
50957: IFFALSE 51087
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50959: LD_EXP 5
50963: PUSH
50964: LD_VAR 0 2
50968: ARRAY
50969: IFFALSE 50982
50971: PUSH
50972: LD_VAR 0 2
50976: PPUSH
50977: CALL_OW 108
50981: AND
50982: IFFALSE 50996
50984: PUSH
50985: LD_VAR 0 2
50989: PUSH
50990: LD_OWVAR 2
50994: NONEQUAL
50995: AND
50996: IFFALSE 51085
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
50998: LD_EXP 6
51002: PUSH
51003: LD_VAR 0 2
51007: ARRAY
51008: NOT
51009: IFTRUE 51057
51011: PUSH
51012: LD_EXP 6
51016: PUSH
51017: LD_VAR 0 2
51021: ARRAY
51022: PUSH
51023: LD_EXP 6
51027: PUSH
51028: LD_OWVAR 2
51032: ARRAY
51033: NONEQUAL
51034: IFFALSE 51056
51036: PUSH
51037: LD_OWVAR 2
51041: PPUSH
51042: LD_VAR 0 2
51046: PPUSH
51047: CALL_OW 81
51051: PUSH
51052: LD_INT 1
51054: NONEQUAL
51055: AND
51056: OR
51057: IFFALSE 51085
// if HasPowerByGameType ( mpGameType , i ) then
51059: LD_EXP 1
51063: PPUSH
51064: LD_VAR 0 2
51068: PPUSH
51069: CALL 50556 0 2
51073: IFFALSE 51085
// begin gameIsOn := true ;
51075: LD_ADDR_VAR 0 1
51079: PUSH
51080: LD_INT 1
51082: ST_TO_ADDR
// break ;
51083: GO 51087
// end ;
51085: GO 50956
51087: POP
51088: POP
// wait ( 100 ) ;
51089: LD_INT 100
51091: PPUSH
51092: CALL_OW 67
// until not gameIsOn ;
51096: LD_VAR 0 1
51100: NOT
51101: IFFALSE 50935
// if IAmServer then
51103: CALL_OW 518
51107: IFFALSE 51116
// wait ( 0 0$3 ) ;
51109: LD_INT 105
51111: PPUSH
51112: CALL_OW 67
// if Multiplayer then
51116: LD_OWVAR 4
51120: IFFALSE 51128
// YouLostInMultiplayer else
51122: CALL_OW 107
51126: GO 51135
// YouLost (  ) ;
51128: LD_STRING 
51130: PPUSH
51131: CALL_OW 104
// end ;
51135: PPOPN 2
51137: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51138: LD_EXP 31
51142: IFFALSE 51526
51144: GO 51146
51146: DISABLE
51147: LD_INT 0
51149: PPUSH
51150: PPUSH
51151: PPUSH
51152: PPUSH
51153: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51154: LD_ADDR_VAR 0 5
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 4
51170: PUSH
51171: LD_INT 5
51173: PUSH
51174: LD_INT 6
51176: PUSH
51177: LD_INT 7
51179: PUSH
51180: LD_INT 8
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51193: LD_INT 350
51195: PPUSH
51196: CALL_OW 67
// for i := 1 to 8 do
51200: LD_ADDR_VAR 0 1
51204: PUSH
51205: DOUBLE
51206: LD_INT 1
51208: DEC
51209: ST_TO_ADDR
51210: LD_INT 8
51212: PUSH
51213: FOR_TO
51214: IFFALSE 51496
// begin j := sides [ i ] ;
51216: LD_ADDR_VAR 0 2
51220: PUSH
51221: LD_VAR 0 5
51225: PUSH
51226: LD_VAR 0 1
51230: ARRAY
51231: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51232: LD_EXP 38
51236: PUSH
51237: LD_VAR 0 2
51241: ARRAY
51242: PPUSH
51243: CALL 5126 0 1
51247: IFFALSE 51260
51249: PUSH
51250: LD_VAR 0 2
51254: PPUSH
51255: CALL_OW 108
51259: AND
51260: IFFALSE 51278
51262: PUSH
51263: LD_EXP 1
51267: PPUSH
51268: LD_VAR 0 2
51272: PPUSH
51273: CALL 50556 0 2
51277: AND
51278: IFFALSE 51494
// begin wait ( mpRespawn div 3 ) ;
51280: LD_EXP 31
51284: PUSH
51285: LD_INT 3
51287: DIV
51288: PPUSH
51289: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51293: LD_ADDR_VAR 0 3
51297: PUSH
51298: LD_INT 22
51300: PUSH
51301: LD_VAR 0 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 50
51312: PUSH
51313: EMPTY
51314: LIST
51315: PUSH
51316: LD_INT 2
51318: PUSH
51319: LD_INT 30
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 30
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: PPUSH
51349: CALL_OW 69
51353: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51354: LD_VAR 0 3
51358: NOT
51359: IFTRUE 51373
51361: PUSH
51362: LD_VAR 0 2
51366: PPUSH
51367: CALL_OW 108
51371: NOT
51372: OR
51373: IFTRUE 51392
51375: PUSH
51376: LD_EXP 1
51380: PPUSH
51381: LD_VAR 0 2
51385: PPUSH
51386: CALL 50556 0 2
51390: NOT
51391: OR
51392: IFFALSE 51396
// continue ;
51394: GO 51213
// spawn := tmp [ 1 ] ;
51396: LD_ADDR_VAR 0 4
51400: PUSH
51401: LD_VAR 0 3
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51410: LD_EXP 38
51414: PUSH
51415: LD_VAR 0 2
51419: ARRAY
51420: PUSH
51421: LD_INT 1
51423: ARRAY
51424: PPUSH
51425: LD_VAR 0 4
51429: PPUSH
51430: CALL_OW 250
51434: PPUSH
51435: LD_VAR 0 4
51439: PPUSH
51440: CALL_OW 251
51444: PPUSH
51445: LD_INT 32
51447: PPUSH
51448: LD_INT 1
51450: PPUSH
51451: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51455: LD_ADDR_EXP 38
51459: PUSH
51460: LD_EXP 38
51464: PPUSH
51465: LD_VAR 0 2
51469: PPUSH
51470: LD_EXP 38
51474: PUSH
51475: LD_VAR 0 2
51479: ARRAY
51480: PPUSH
51481: LD_INT 1
51483: PPUSH
51484: CALL_OW 3
51488: PPUSH
51489: CALL_OW 1
51493: ST_TO_ADDR
// end ; end ;
51494: GO 51213
51496: POP
51497: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51498: LD_ADDR_VAR 0 5
51502: PUSH
51503: LD_VAR 0 5
51507: PPUSH
51508: LD_INT 1
51510: PPUSH
51511: LD_INT 8
51513: PPUSH
51514: LD_INT 1
51516: PPUSH
51517: CALL 7418 0 4
51521: ST_TO_ADDR
// until false ;
51522: LD_INT 0
51524: IFFALSE 51193
// end ;
51526: PPOPN 5
51528: END
// every 0 0$1 marked mpActive do
51529: GO 51531
51531: DISABLE
// begin enable ;
51532: ENABLE
// if not mpDisplayStrings then
51533: LD_EXP 36
51537: NOT
51538: IFFALSE 51549
// begin display_strings := [ ] ;
51540: LD_ADDR_OWVAR 47
51544: PUSH
51545: EMPTY
51546: ST_TO_ADDR
// exit ;
51547: GO 51559
// end ; display_strings := mpDisplayStrings ;
51549: LD_ADDR_OWVAR 47
51553: PUSH
51554: LD_EXP 36
51558: ST_TO_ADDR
// end ; end_of_file
51559: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51560: LD_INT 0
51562: PPUSH
51563: PPUSH
51564: PPUSH
51565: PPUSH
51566: PPUSH
51567: PPUSH
51568: PPUSH
51569: PPUSH
51570: PPUSH
// if GetType ( un ) = unit_vehicle then
51571: LD_VAR 0 1
51575: PPUSH
51576: CALL_OW 247
51580: PUSH
51581: LD_INT 2
51583: EQUAL
51584: IFFALSE 51588
// exit ;
51586: GO 52226
// side := GetSide ( un ) ;
51588: LD_ADDR_VAR 0 9
51592: PUSH
51593: LD_VAR 0 1
51597: PPUSH
51598: CALL_OW 255
51602: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51603: LD_EXP 1
51607: PUSH
51608: LD_INT 2
51610: EQUAL
51611: IFFALSE 51687
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51613: LD_VAR 0 1
51617: PPUSH
51618: CALL_OW 266
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: IN
51633: IFFALSE 51687
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
51635: LD_ADDR_VAR 0 3
51639: PUSH
51640: LD_INT 22
51642: PUSH
51643: LD_VAR 0 9
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 21
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PPUSH
51666: CALL_OW 69
51670: PUSH
51671: FOR_IN
51672: IFFALSE 51685
// KillUnit ( i ) ;
51674: LD_VAR 0 3
51678: PPUSH
51679: CALL_OW 66
51683: GO 51671
51685: POP
51686: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51687: LD_VAR 0 1
51691: PPUSH
51692: CALL_OW 257
51696: PUSH
51697: LD_INT 12
51699: PUSH
51700: LD_INT 17
51702: PUSH
51703: LD_INT 15
51705: PUSH
51706: LD_INT 16
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: IN
51715: IFTRUE 51732
51717: PUSH
51718: LD_VAR 0 1
51722: PPUSH
51723: CALL_OW 263
51727: PUSH
51728: LD_INT 5
51730: EQUAL
51731: OR
51732: IFFALSE 51951
// begin tag := 0 ;
51734: LD_ADDR_VAR 0 5
51738: PUSH
51739: LD_INT 0
51741: ST_TO_ADDR
// for i := 1 to 8 do
51742: LD_ADDR_VAR 0 3
51746: PUSH
51747: DOUBLE
51748: LD_INT 1
51750: DEC
51751: ST_TO_ADDR
51752: LD_INT 8
51754: PUSH
51755: FOR_TO
51756: IFFALSE 51790
// if un in mpApePosIndex [ i ] then
51758: LD_VAR 0 1
51762: PUSH
51763: LD_EXP 30
51767: PUSH
51768: LD_VAR 0 3
51772: ARRAY
51773: IN
51774: IFFALSE 51788
// begin tag := i ;
51776: LD_ADDR_VAR 0 5
51780: PUSH
51781: LD_VAR 0 3
51785: ST_TO_ADDR
// break ;
51786: GO 51790
// end ;
51788: GO 51755
51790: POP
51791: POP
// if not tag then
51792: LD_VAR 0 5
51796: NOT
51797: IFFALSE 51801
// exit ;
51799: GO 52226
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51801: LD_ADDR_VAR 0 7
51805: PUSH
51806: LD_EXP 29
51810: PUSH
51811: LD_EXP 5
51815: PUSH
51816: LD_VAR 0 5
51820: ARRAY
51821: ARRAY
51822: ST_TO_ADDR
// if not area then
51823: LD_VAR 0 7
51827: NOT
51828: IFFALSE 51832
// exit ;
51830: GO 52226
// wait ( 4 4$00 ) ;
51832: LD_INT 8400
51834: PPUSH
51835: CALL_OW 67
// repeat wait ( 10 ) ;
51839: LD_INT 10
51841: PPUSH
51842: CALL_OW 67
// until not mpBlockRespThread ;
51846: LD_EXP 43
51850: NOT
51851: IFFALSE 51839
// mpBlockRespThread := true ;
51853: LD_ADDR_EXP 43
51857: PUSH
51858: LD_INT 1
51860: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51861: LD_INT 0
51863: PPUSH
51864: CALL 37185 0 1
// ape := CreateHuman ;
51868: LD_ADDR_VAR 0 4
51872: PUSH
51873: CALL_OW 44
51877: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51878: LD_ADDR_EXP 30
51882: PUSH
51883: LD_EXP 30
51887: PPUSH
51888: LD_VAR 0 5
51892: PPUSH
51893: LD_EXP 30
51897: PUSH
51898: LD_VAR 0 5
51902: ARRAY
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: CALL 41058 0 2
51913: PPUSH
51914: CALL_OW 1
51918: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51919: LD_VAR 0 4
51923: PPUSH
51924: LD_VAR 0 7
51928: PPUSH
51929: LD_INT 0
51931: PPUSH
51932: CALL_OW 49
// wait ( 10 ) ;
51936: LD_INT 10
51938: PPUSH
51939: CALL_OW 67
// mpBlockRespThread := false ;
51943: LD_ADDR_EXP 43
51947: PUSH
51948: LD_INT 0
51950: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51951: LD_VAR 0 1
51955: PPUSH
51956: CALL_OW 247
51960: PUSH
51961: LD_INT 1
51963: EQUAL
51964: IFFALSE 51981
51966: PUSH
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 248
51976: PUSH
51977: LD_INT 0
51979: GREATER
51980: AND
51981: IFFALSE 52226
// begin if not mpRespawn then
51983: LD_EXP 31
51987: NOT
51988: IFFALSE 51992
// exit ;
51990: GO 52226
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
51992: LD_VAR 0 9
51996: PPUSH
51997: CALL_OW 108
52001: NOT
52002: IFFALSE 52021
52004: PUSH
52005: LD_EXP 1
52009: PPUSH
52010: LD_VAR 0 9
52014: PPUSH
52015: CALL 50556 0 2
52019: NOT
52020: AND
52021: IFFALSE 52025
// exit ;
52023: GO 52226
// side := GetSide ( un ) ;
52025: LD_ADDR_VAR 0 9
52029: PUSH
52030: LD_VAR 0 1
52034: PPUSH
52035: CALL_OW 255
52039: ST_TO_ADDR
// nation := GetNation ( un ) ;
52040: LD_ADDR_VAR 0 8
52044: PUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 248
52054: ST_TO_ADDR
// class := GetClass ( un ) ;
52055: LD_ADDR_VAR 0 6
52059: PUSH
52060: LD_VAR 0 1
52064: PPUSH
52065: CALL_OW 257
52069: ST_TO_ADDR
// if class > 4 then
52070: LD_VAR 0 6
52074: PUSH
52075: LD_INT 4
52077: GREATER
52078: IFFALSE 52088
// class := 1 ;
52080: LD_ADDR_VAR 0 6
52084: PUSH
52085: LD_INT 1
52087: ST_TO_ADDR
// repeat wait ( 10 ) ;
52088: LD_INT 10
52090: PPUSH
52091: CALL_OW 67
// until not mpBlockRespThread ;
52095: LD_EXP 43
52099: NOT
52100: IFFALSE 52088
// mpBlockRespThread := true ;
52102: LD_ADDR_EXP 43
52106: PUSH
52107: LD_INT 1
52109: ST_TO_ADDR
// uc_side := side ;
52110: LD_ADDR_OWVAR 20
52114: PUSH
52115: LD_VAR 0 9
52119: ST_TO_ADDR
// uc_nation := nation ;
52120: LD_ADDR_OWVAR 21
52124: PUSH
52125: LD_VAR 0 8
52129: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52130: LD_INT 0
52132: PPUSH
52133: LD_VAR 0 6
52137: PPUSH
52138: LD_INT 2
52140: PPUSH
52141: CALL_OW 380
// un := CreateHuman ;
52145: LD_ADDR_VAR 0 1
52149: PUSH
52150: CALL_OW 44
52154: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52155: LD_ADDR_EXP 38
52159: PUSH
52160: LD_EXP 38
52164: PPUSH
52165: LD_VAR 0 9
52169: PPUSH
52170: LD_EXP 38
52174: PUSH
52175: LD_VAR 0 9
52179: ARRAY
52180: PPUSH
52181: LD_EXP 38
52185: PUSH
52186: LD_VAR 0 9
52190: ARRAY
52191: PUSH
52192: LD_INT 1
52194: PLUS
52195: PPUSH
52196: LD_VAR 0 1
52200: PPUSH
52201: CALL_OW 1
52205: PPUSH
52206: CALL_OW 1
52210: ST_TO_ADDR
// wait ( 10 ) ;
52211: LD_INT 10
52213: PPUSH
52214: CALL_OW 67
// mpBlockRespThread := false ;
52218: LD_ADDR_EXP 43
52222: PUSH
52223: LD_INT 0
52225: ST_TO_ADDR
// end ; end ;
52226: LD_VAR 0 2
52230: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52231: LD_INT 0
52233: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52234: LD_VAR 0 1
52238: PPUSH
52239: CALL_OW 266
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: IN
52254: IFFALSE 52279
// SetBName ( building , @ & GetSide ( building ) ) ;
52256: LD_VAR 0 1
52260: PPUSH
52261: LD_STRING @
52263: PUSH
52264: LD_VAR 0 1
52268: PPUSH
52269: CALL_OW 255
52273: STR
52274: PPUSH
52275: CALL_OW 500
// end ;
52279: LD_VAR 0 2
52283: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52284: LD_INT 0
52286: PPUSH
52287: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52288: LD_EXP 1
52292: PUSH
52293: LD_INT 2
52295: EQUAL
52296: IFFALSE 52320
52298: PUSH
52299: LD_VAR 0 1
52303: PPUSH
52304: CALL_OW 266
52308: PUSH
52309: LD_INT 0
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: IN
52319: AND
52320: IFFALSE 52399
// begin SetSide ( building , oldSide ) ;
52322: LD_VAR 0 1
52326: PPUSH
52327: LD_VAR 0 2
52331: PPUSH
52332: CALL_OW 235
// KillUnit ( building ) ;
52336: LD_VAR 0 1
52340: PPUSH
52341: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52345: LD_ADDR_VAR 0 5
52349: PUSH
52350: LD_INT 22
52352: PUSH
52353: LD_VAR 0 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 21
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PPUSH
52376: CALL_OW 69
52380: PUSH
52381: FOR_IN
52382: IFFALSE 52395
// KillUnit ( i ) ;
52384: LD_VAR 0 5
52388: PPUSH
52389: CALL_OW 66
52393: GO 52381
52395: POP
52396: POP
// exit ;
52397: GO 52444
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52399: LD_VAR 0 1
52403: PPUSH
52404: CALL_OW 266
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: IN
52419: IFFALSE 52444
// SetBName ( building , @ & GetSide ( building ) ) ;
52421: LD_VAR 0 1
52425: PPUSH
52426: LD_STRING @
52428: PUSH
52429: LD_VAR 0 1
52433: PPUSH
52434: CALL_OW 255
52438: STR
52439: PPUSH
52440: CALL_OW 500
// end ;
52444: LD_VAR 0 4
52448: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52449: LD_INT 0
52451: PPUSH
52452: PPUSH
52453: PPUSH
// if mpGameType <> GameTypeFamine then
52454: LD_EXP 1
52458: PUSH
52459: LD_INT 5
52461: NONEQUAL
52462: IFFALSE 52466
// exit ;
52464: GO 52680
// for i := 1 to mpGlobalOilDeposits do
52466: LD_ADDR_VAR 0 6
52470: PUSH
52471: DOUBLE
52472: LD_INT 1
52474: DEC
52475: ST_TO_ADDR
52476: LD_EXP 39
52480: PUSH
52481: FOR_TO
52482: IFFALSE 52678
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52484: LD_EXP 39
52488: PUSH
52489: LD_VAR 0 6
52493: ARRAY
52494: PUSH
52495: LD_INT 1
52497: ARRAY
52498: PPUSH
52499: LD_EXP 39
52503: PUSH
52504: LD_VAR 0 6
52508: ARRAY
52509: PUSH
52510: LD_INT 2
52512: ARRAY
52513: PPUSH
52514: CALL_OW 428
52518: PUSH
52519: LD_VAR 0 1
52523: EQUAL
52524: IFFALSE 52676
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52526: LD_ADDR_VAR 0 7
52530: PUSH
52531: LD_EXP 39
52535: PUSH
52536: LD_VAR 0 6
52540: ARRAY
52541: PUSH
52542: LD_INT 3
52544: ARRAY
52545: ST_TO_ADDR
// value := Dec ( value ) ;
52546: LD_ADDR_VAR 0 7
52550: PUSH
52551: LD_VAR 0 7
52555: PPUSH
52556: CALL 42453 0 1
52560: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52561: LD_ADDR_EXP 39
52565: PUSH
52566: LD_EXP 39
52570: PPUSH
52571: LD_VAR 0 6
52575: PPUSH
52576: LD_EXP 39
52580: PUSH
52581: LD_VAR 0 6
52585: ARRAY
52586: PPUSH
52587: LD_INT 3
52589: PPUSH
52590: LD_VAR 0 7
52594: PPUSH
52595: CALL_OW 1
52599: PPUSH
52600: CALL_OW 1
52604: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52605: LD_VAR 0 1
52609: PPUSH
52610: LD_VAR 0 7
52614: PPUSH
52615: CALL_OW 505
// if value = 0 then
52619: LD_VAR 0 7
52623: PUSH
52624: LD_INT 0
52626: EQUAL
52627: IFFALSE 52676
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52629: LD_EXP 39
52633: PUSH
52634: LD_VAR 0 6
52638: ARRAY
52639: PUSH
52640: LD_INT 1
52642: ARRAY
52643: PPUSH
52644: LD_EXP 39
52648: PUSH
52649: LD_VAR 0 6
52653: ARRAY
52654: PUSH
52655: LD_INT 2
52657: ARRAY
52658: PPUSH
52659: CALL_OW 63
// KillUnit ( building ) ;
52663: LD_VAR 0 1
52667: PPUSH
52668: CALL_OW 66
// exit ;
52672: POP
52673: POP
52674: GO 52680
// end ; end ; end ;
52676: GO 52481
52678: POP
52679: POP
// end ;
52680: LD_VAR 0 5
52684: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52685: LD_INT 0
52687: PPUSH
52688: PPUSH
52689: PPUSH
// if mpGameType <> GameTypeFamine then
52690: LD_EXP 1
52694: PUSH
52695: LD_INT 5
52697: NONEQUAL
52698: IFFALSE 52702
// exit ;
52700: GO 52916
// for i := 1 to mpGlobalSibDeposits do
52702: LD_ADDR_VAR 0 6
52706: PUSH
52707: DOUBLE
52708: LD_INT 1
52710: DEC
52711: ST_TO_ADDR
52712: LD_EXP 40
52716: PUSH
52717: FOR_TO
52718: IFFALSE 52914
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52720: LD_EXP 40
52724: PUSH
52725: LD_VAR 0 6
52729: ARRAY
52730: PUSH
52731: LD_INT 1
52733: ARRAY
52734: PPUSH
52735: LD_EXP 40
52739: PUSH
52740: LD_VAR 0 6
52744: ARRAY
52745: PUSH
52746: LD_INT 2
52748: ARRAY
52749: PPUSH
52750: CALL_OW 428
52754: PUSH
52755: LD_VAR 0 1
52759: EQUAL
52760: IFFALSE 52912
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52762: LD_ADDR_VAR 0 7
52766: PUSH
52767: LD_EXP 40
52771: PUSH
52772: LD_VAR 0 6
52776: ARRAY
52777: PUSH
52778: LD_INT 3
52780: ARRAY
52781: ST_TO_ADDR
// value := Dec ( value ) ;
52782: LD_ADDR_VAR 0 7
52786: PUSH
52787: LD_VAR 0 7
52791: PPUSH
52792: CALL 42453 0 1
52796: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52797: LD_ADDR_EXP 40
52801: PUSH
52802: LD_EXP 40
52806: PPUSH
52807: LD_VAR 0 6
52811: PPUSH
52812: LD_EXP 40
52816: PUSH
52817: LD_VAR 0 6
52821: ARRAY
52822: PPUSH
52823: LD_INT 3
52825: PPUSH
52826: LD_VAR 0 7
52830: PPUSH
52831: CALL_OW 1
52835: PPUSH
52836: CALL_OW 1
52840: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52841: LD_VAR 0 1
52845: PPUSH
52846: LD_VAR 0 7
52850: PPUSH
52851: CALL_OW 505
// if value = 0 then
52855: LD_VAR 0 7
52859: PUSH
52860: LD_INT 0
52862: EQUAL
52863: IFFALSE 52912
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52865: LD_EXP 40
52869: PUSH
52870: LD_VAR 0 6
52874: ARRAY
52875: PUSH
52876: LD_INT 1
52878: ARRAY
52879: PPUSH
52880: LD_EXP 40
52884: PUSH
52885: LD_VAR 0 6
52889: ARRAY
52890: PUSH
52891: LD_INT 2
52893: ARRAY
52894: PPUSH
52895: CALL_OW 63
// KillUnit ( building ) ;
52899: LD_VAR 0 1
52903: PPUSH
52904: CALL_OW 66
// exit ;
52908: POP
52909: POP
52910: GO 52916
// end ; end ; end ;
52912: GO 52717
52914: POP
52915: POP
// end ; end_of_file
52916: LD_VAR 0 5
52920: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52921: LD_EXP 37
52925: IFFALSE 52933
52927: PUSH
52928: CALL 53143 0 0
52932: AND
52933: IFFALSE 52941
52935: PUSH
52936: LD_OWVAR 4
52940: AND
52941: IFFALSE 53140
52943: GO 52945
52945: DISABLE
52946: LD_INT 0
52948: PPUSH
52949: PPUSH
// begin canWin := false ;
52950: LD_ADDR_VAR 0 2
52954: PUSH
52955: LD_INT 0
52957: ST_TO_ADDR
// if not HasPower ( your_side ) then
52958: LD_OWVAR 2
52962: PPUSH
52963: CALL 53185 0 1
52967: NOT
52968: IFFALSE 52979
// begin Multiplayer_Loose_Message ;
52970: CALL_OW 521
// enable ( mpLose ) ;
52974: LD_INT 102
52976: ENABLE_MARKED
// end else
52977: GO 53140
// begin canWin := true ;
52979: LD_ADDR_VAR 0 2
52983: PUSH
52984: LD_INT 1
52986: ST_TO_ADDR
// for i := 1 to 8 do
52987: LD_ADDR_VAR 0 1
52991: PUSH
52992: DOUBLE
52993: LD_INT 1
52995: DEC
52996: ST_TO_ADDR
52997: LD_INT 8
52999: PUSH
53000: FOR_TO
53001: IFFALSE 53126
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53003: LD_EXP 5
53007: PUSH
53008: LD_VAR 0 1
53012: ARRAY
53013: IFFALSE 53026
53015: PUSH
53016: LD_VAR 0 1
53020: PPUSH
53021: CALL_OW 108
53025: AND
53026: IFFALSE 53040
53028: PUSH
53029: LD_VAR 0 1
53033: PUSH
53034: LD_OWVAR 2
53038: NONEQUAL
53039: AND
53040: IFFALSE 53124
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53042: LD_EXP 6
53046: PUSH
53047: LD_VAR 0 1
53051: ARRAY
53052: NOT
53053: IFTRUE 53101
53055: PUSH
53056: LD_EXP 6
53060: PUSH
53061: LD_VAR 0 1
53065: ARRAY
53066: PUSH
53067: LD_EXP 6
53071: PUSH
53072: LD_OWVAR 2
53076: ARRAY
53077: NONEQUAL
53078: IFFALSE 53100
53080: PUSH
53081: LD_OWVAR 2
53085: PPUSH
53086: LD_VAR 0 1
53090: PPUSH
53091: CALL_OW 81
53095: PUSH
53096: LD_INT 1
53098: NONEQUAL
53099: AND
53100: OR
53101: IFFALSE 53124
// if HasPower ( i ) then
53103: LD_VAR 0 1
53107: PPUSH
53108: CALL 53185 0 1
53112: IFFALSE 53124
// begin canWin := false ;
53114: LD_ADDR_VAR 0 2
53118: PUSH
53119: LD_INT 0
53121: ST_TO_ADDR
// break ;
53122: GO 53126
// end ;
53124: GO 53000
53126: POP
53127: POP
// if canWin then
53128: LD_VAR 0 2
53132: IFFALSE 53139
// enable ( mpWin ) else
53134: LD_INT 101
53136: ENABLE_MARKED
53137: GO 53140
// enable ;
53139: ENABLE
// end ; end ;
53140: PPOPN 2
53142: END
// function CanWinLoose ; begin
53143: LD_INT 0
53145: PPUSH
// result := true ;
53146: LD_ADDR_VAR 0 1
53150: PUSH
53151: LD_INT 1
53153: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53154: CALL_OW 531
53158: IFFALSE 53170
53160: PUSH
53161: CALL_OW 519
53165: PUSH
53166: LD_INT 1
53168: GREATER
53169: AND
53170: IFFALSE 53180
// result := false ;
53172: LD_ADDR_VAR 0 1
53176: PUSH
53177: LD_INT 0
53179: ST_TO_ADDR
// end ;
53180: LD_VAR 0 1
53184: RET
// function HasPower ( i ) ; begin
53185: LD_INT 0
53187: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53188: LD_ADDR_VAR 0 2
53192: PUSH
53193: LD_INT 22
53195: PUSH
53196: LD_VAR 0 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 21
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 33
53220: PUSH
53221: LD_INT 3
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 33
53230: PUSH
53231: LD_INT 5
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PPUSH
53248: CALL_OW 69
53252: ST_TO_ADDR
// end ; end_of_file
53253: LD_VAR 0 2
53257: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53258: LD_EXP 37
53262: IFFALSE 53305
53264: GO 53266
53266: DISABLE
53267: LD_INT 0
53269: PPUSH
// begin for i := 1 to 8 do
53270: LD_ADDR_VAR 0 1
53274: PUSH
53275: DOUBLE
53276: LD_INT 1
53278: DEC
53279: ST_TO_ADDR
53280: LD_INT 8
53282: PUSH
53283: FOR_TO
53284: IFFALSE 53303
// SetRestrict ( b_depot , i , state_disabled ) ;
53286: LD_INT 0
53288: PPUSH
53289: LD_VAR 0 1
53293: PPUSH
53294: LD_INT 0
53296: PPUSH
53297: CALL_OW 324
53301: GO 53283
53303: POP
53304: POP
// end ;
53305: PPOPN 1
53307: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53308: LD_EXP 37
53312: IFFALSE 53320
53314: PUSH
53315: CALL 53530 0 0
53319: AND
53320: IFFALSE 53328
53322: PUSH
53323: LD_OWVAR 4
53327: AND
53328: IFFALSE 53527
53330: GO 53332
53332: DISABLE
53333: LD_INT 0
53335: PPUSH
53336: PPUSH
// begin canWin := false ;
53337: LD_ADDR_VAR 0 2
53341: PUSH
53342: LD_INT 0
53344: ST_TO_ADDR
// if not HasPower ( your_side ) then
53345: LD_OWVAR 2
53349: PPUSH
53350: CALL 53572 0 1
53354: NOT
53355: IFFALSE 53366
// begin Multiplayer_Loose_Message ;
53357: CALL_OW 521
// enable ( mpLose ) ;
53361: LD_INT 102
53363: ENABLE_MARKED
// end else
53364: GO 53527
// begin canWin := true ;
53366: LD_ADDR_VAR 0 2
53370: PUSH
53371: LD_INT 1
53373: ST_TO_ADDR
// for i := 1 to 8 do
53374: LD_ADDR_VAR 0 1
53378: PUSH
53379: DOUBLE
53380: LD_INT 1
53382: DEC
53383: ST_TO_ADDR
53384: LD_INT 8
53386: PUSH
53387: FOR_TO
53388: IFFALSE 53513
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53390: LD_EXP 5
53394: PUSH
53395: LD_VAR 0 1
53399: ARRAY
53400: IFFALSE 53413
53402: PUSH
53403: LD_VAR 0 1
53407: PPUSH
53408: CALL_OW 108
53412: AND
53413: IFFALSE 53427
53415: PUSH
53416: LD_VAR 0 1
53420: PUSH
53421: LD_OWVAR 2
53425: NONEQUAL
53426: AND
53427: IFFALSE 53511
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53429: LD_EXP 6
53433: PUSH
53434: LD_VAR 0 1
53438: ARRAY
53439: NOT
53440: IFTRUE 53488
53442: PUSH
53443: LD_EXP 6
53447: PUSH
53448: LD_VAR 0 1
53452: ARRAY
53453: PUSH
53454: LD_EXP 6
53458: PUSH
53459: LD_OWVAR 2
53463: ARRAY
53464: NONEQUAL
53465: IFFALSE 53487
53467: PUSH
53468: LD_OWVAR 2
53472: PPUSH
53473: LD_VAR 0 1
53477: PPUSH
53478: CALL_OW 81
53482: PUSH
53483: LD_INT 1
53485: NONEQUAL
53486: AND
53487: OR
53488: IFFALSE 53511
// if HasPower ( i ) then
53490: LD_VAR 0 1
53494: PPUSH
53495: CALL 53572 0 1
53499: IFFALSE 53511
// begin canWin := false ;
53501: LD_ADDR_VAR 0 2
53505: PUSH
53506: LD_INT 0
53508: ST_TO_ADDR
// break ;
53509: GO 53513
// end ;
53511: GO 53387
53513: POP
53514: POP
// if canWin then
53515: LD_VAR 0 2
53519: IFFALSE 53526
// enable ( mpWin ) else
53521: LD_INT 101
53523: ENABLE_MARKED
53524: GO 53527
// enable ;
53526: ENABLE
// end ; end ;
53527: PPOPN 2
53529: END
// function CanWinLoose ; begin
53530: LD_INT 0
53532: PPUSH
// result := true ;
53533: LD_ADDR_VAR 0 1
53537: PUSH
53538: LD_INT 1
53540: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53541: CALL_OW 531
53545: IFFALSE 53557
53547: PUSH
53548: CALL_OW 519
53552: PUSH
53553: LD_INT 1
53555: GREATER
53556: AND
53557: IFFALSE 53567
// result := false ;
53559: LD_ADDR_VAR 0 1
53563: PUSH
53564: LD_INT 0
53566: ST_TO_ADDR
// end ;
53567: LD_VAR 0 1
53571: RET
// function HasPower ( i ) ; begin
53572: LD_INT 0
53574: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53575: LD_INT 22
53577: PUSH
53578: LD_VAR 0 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: LD_INT 30
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 30
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PPUSH
53619: CALL_OW 69
53623: NOT
53624: IFFALSE 53628
// exit ;
53626: GO 53693
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53628: LD_ADDR_VAR 0 2
53632: PUSH
53633: LD_INT 22
53635: PUSH
53636: LD_VAR 0 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: PUSH
53648: LD_INT 21
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 33
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 33
53670: PUSH
53671: LD_INT 5
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PPUSH
53688: CALL_OW 69
53692: ST_TO_ADDR
// end ; end_of_file
53693: LD_VAR 0 2
53697: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53698: LD_EXP 37
53702: IFFALSE 54041
53704: GO 53706
53706: DISABLE
53707: LD_INT 0
53709: PPUSH
53710: PPUSH
53711: PPUSH
// begin mpKingPoints := [ ] ;
53712: LD_ADDR_EXP 46
53716: PUSH
53717: EMPTY
53718: ST_TO_ADDR
// if mpTeamGame then
53719: LD_EXP 9
53723: IFFALSE 53777
// begin for i := 1 to Count ( mpTeams ) do
53725: LD_ADDR_VAR 0 1
53729: PUSH
53730: DOUBLE
53731: LD_INT 1
53733: DEC
53734: ST_TO_ADDR
53735: LD_EXP 8
53739: PPUSH
53740: CALL 5126 0 1
53744: PUSH
53745: FOR_TO
53746: IFFALSE 53773
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53748: LD_ADDR_EXP 46
53752: PUSH
53753: LD_EXP 46
53757: PPUSH
53758: LD_VAR 0 1
53762: PPUSH
53763: LD_INT 0
53765: PPUSH
53766: CALL_OW 1
53770: ST_TO_ADDR
53771: GO 53745
53773: POP
53774: POP
// end else
53775: GO 53820
// begin for i := 1 to 8 do
53777: LD_ADDR_VAR 0 1
53781: PUSH
53782: DOUBLE
53783: LD_INT 1
53785: DEC
53786: ST_TO_ADDR
53787: LD_INT 8
53789: PUSH
53790: FOR_TO
53791: IFFALSE 53818
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53793: LD_ADDR_EXP 46
53797: PUSH
53798: LD_EXP 46
53802: PPUSH
53803: LD_VAR 0 1
53807: PPUSH
53808: LD_INT 0
53810: PPUSH
53811: CALL_OW 1
53815: ST_TO_ADDR
53816: GO 53790
53818: POP
53819: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53820: LD_ADDR_VAR 0 3
53824: PUSH
53825: LD_INT 73
53827: PPUSH
53828: LD_INT 0
53830: PPUSH
53831: CALL_OW 517
53835: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53836: LD_ADDR_VAR 0 1
53840: PUSH
53841: DOUBLE
53842: LD_INT 1
53844: DEC
53845: ST_TO_ADDR
53846: LD_VAR 0 3
53850: PUSH
53851: LD_INT 1
53853: ARRAY
53854: PUSH
53855: FOR_TO
53856: IFFALSE 53923
// for j := 1 to 8 do
53858: LD_ADDR_VAR 0 2
53862: PUSH
53863: DOUBLE
53864: LD_INT 1
53866: DEC
53867: ST_TO_ADDR
53868: LD_INT 8
53870: PUSH
53871: FOR_TO
53872: IFFALSE 53919
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53874: LD_VAR 0 3
53878: PUSH
53879: LD_INT 1
53881: ARRAY
53882: PUSH
53883: LD_VAR 0 1
53887: ARRAY
53888: PPUSH
53889: LD_VAR 0 3
53893: PUSH
53894: LD_INT 2
53896: ARRAY
53897: PUSH
53898: LD_VAR 0 1
53902: ARRAY
53903: PPUSH
53904: LD_VAR 0 2
53908: PPUSH
53909: LD_INT 12
53911: NEG
53912: PPUSH
53913: CALL_OW 330
53917: GO 53871
53919: POP
53920: POP
53921: GO 53855
53923: POP
53924: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53925: LD_EXP 32
53929: PPUSH
53930: LD_INT 1
53932: PPUSH
53933: CALL_OW 424
// UpdateCounter ;
53937: CALL 54545 0 0
// repeat wait ( 0 0$1 ) ;
53941: LD_INT 35
53943: PPUSH
53944: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53948: LD_ADDR_VAR 0 3
53952: PUSH
53953: LD_EXP 32
53957: PPUSH
53958: LD_INT 3
53960: PUSH
53961: LD_INT 57
53963: PUSH
53964: EMPTY
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 50
53973: PUSH
53974: EMPTY
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 30
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 30
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: PPUSH
54010: CALL_OW 70
54014: ST_TO_ADDR
// if not tmp then
54015: LD_VAR 0 3
54019: NOT
54020: IFFALSE 54024
// continue ;
54022: GO 53941
// AddPoints ( tmp ) ;
54024: LD_VAR 0 3
54028: PPUSH
54029: CALL 54223 0 1
// UpdateCounter ;
54033: CALL 54545 0 0
// until false ;
54037: LD_INT 0
54039: IFFALSE 53941
// end ;
54041: PPOPN 3
54043: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54044: LD_EXP 37
54048: IFFALSE 54056
54050: PUSH
54051: LD_EXP 35
54055: AND
54056: IFFALSE 54220
54058: GO 54060
54060: DISABLE
54061: LD_INT 0
54063: PPUSH
54064: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54065: LD_ADDR_VAR 0 2
54069: PUSH
54070: LD_INT 73
54072: PPUSH
54073: LD_INT 0
54075: PPUSH
54076: CALL_OW 517
54080: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54081: LD_ADDR_VAR 0 1
54085: PUSH
54086: DOUBLE
54087: LD_INT 1
54089: DEC
54090: ST_TO_ADDR
54091: LD_VAR 0 2
54095: PUSH
54096: LD_INT 1
54098: ARRAY
54099: PUSH
54100: FOR_TO
54101: IFFALSE 54142
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54103: LD_VAR 0 2
54107: PUSH
54108: LD_INT 1
54110: ARRAY
54111: PUSH
54112: LD_VAR 0 1
54116: ARRAY
54117: PPUSH
54118: LD_VAR 0 2
54122: PUSH
54123: LD_INT 2
54125: ARRAY
54126: PUSH
54127: LD_VAR 0 1
54131: ARRAY
54132: PPUSH
54133: LD_INT 125
54135: PPUSH
54136: CALL_OW 495
54140: GO 54100
54142: POP
54143: POP
// repeat wait ( mpEmissions ) ;
54144: LD_EXP 35
54148: PPUSH
54149: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54153: LD_ADDR_VAR 0 1
54157: PUSH
54158: DOUBLE
54159: LD_INT 1
54161: DEC
54162: ST_TO_ADDR
54163: LD_VAR 0 2
54167: PUSH
54168: LD_INT 1
54170: ARRAY
54171: PUSH
54172: FOR_TO
54173: IFFALSE 54214
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54175: LD_VAR 0 2
54179: PUSH
54180: LD_INT 1
54182: ARRAY
54183: PUSH
54184: LD_VAR 0 1
54188: ARRAY
54189: PPUSH
54190: LD_VAR 0 2
54194: PUSH
54195: LD_INT 2
54197: ARRAY
54198: PUSH
54199: LD_VAR 0 1
54203: ARRAY
54204: PPUSH
54205: LD_INT 15
54207: PPUSH
54208: CALL_OW 495
54212: GO 54172
54214: POP
54215: POP
// until false ;
54216: LD_INT 0
54218: IFFALSE 54144
// end ;
54220: PPOPN 2
54222: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54223: LD_INT 0
54225: PPUSH
54226: PPUSH
54227: PPUSH
54228: PPUSH
54229: PPUSH
// if mpTeamGame then
54230: LD_EXP 9
54234: IFFALSE 54431
// begin first := depots [ 1 ] ;
54236: LD_ADDR_VAR 0 4
54240: PUSH
54241: LD_VAR 0 1
54245: PUSH
54246: LD_INT 1
54248: ARRAY
54249: ST_TO_ADDR
// side := GetSide ( first ) ;
54250: LD_ADDR_VAR 0 6
54254: PUSH
54255: LD_VAR 0 4
54259: PPUSH
54260: CALL_OW 255
54264: ST_TO_ADDR
// for i := 1 to mpTeams do
54265: LD_ADDR_VAR 0 3
54269: PUSH
54270: DOUBLE
54271: LD_INT 1
54273: DEC
54274: ST_TO_ADDR
54275: LD_EXP 8
54279: PUSH
54280: FOR_TO
54281: IFFALSE 54315
// if side in mpTeams [ i ] then
54283: LD_VAR 0 6
54287: PUSH
54288: LD_EXP 8
54292: PUSH
54293: LD_VAR 0 3
54297: ARRAY
54298: IN
54299: IFFALSE 54313
// begin team := i ;
54301: LD_ADDR_VAR 0 5
54305: PUSH
54306: LD_VAR 0 3
54310: ST_TO_ADDR
// break ;
54311: GO 54315
// end ;
54313: GO 54280
54315: POP
54316: POP
// if not team then
54317: LD_VAR 0 5
54321: NOT
54322: IFFALSE 54326
// exit ;
54324: GO 54540
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54326: LD_EXP 32
54330: PPUSH
54331: LD_INT 81
54333: PUSH
54334: LD_VAR 0 6
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PPUSH
54343: CALL_OW 70
54347: IFFALSE 54351
// exit ;
54349: GO 54540
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54351: LD_ADDR_EXP 46
54355: PUSH
54356: LD_EXP 46
54360: PPUSH
54361: LD_VAR 0 5
54365: PPUSH
54366: LD_EXP 46
54370: PUSH
54371: LD_VAR 0 5
54375: ARRAY
54376: PUSH
54377: LD_INT 1
54379: PLUS
54380: PPUSH
54381: CALL_OW 1
54385: ST_TO_ADDR
// for i in mpTeams [ team ] do
54386: LD_ADDR_VAR 0 3
54390: PUSH
54391: LD_EXP 8
54395: PUSH
54396: LD_VAR 0 5
54400: ARRAY
54401: PUSH
54402: FOR_IN
54403: IFFALSE 54427
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54405: LD_VAR 0 3
54409: PPUSH
54410: LD_EXP 46
54414: PUSH
54415: LD_VAR 0 5
54419: ARRAY
54420: PPUSH
54421: CALL_OW 506
54425: GO 54402
54427: POP
54428: POP
// end else
54429: GO 54540
// begin first := depots [ 1 ] ;
54431: LD_ADDR_VAR 0 4
54435: PUSH
54436: LD_VAR 0 1
54440: PUSH
54441: LD_INT 1
54443: ARRAY
54444: ST_TO_ADDR
// side := GetSide ( first ) ;
54445: LD_ADDR_VAR 0 6
54449: PUSH
54450: LD_VAR 0 4
54454: PPUSH
54455: CALL_OW 255
54459: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54460: LD_EXP 32
54464: PPUSH
54465: LD_INT 81
54467: PUSH
54468: LD_VAR 0 6
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PPUSH
54477: CALL_OW 70
54481: IFFALSE 54485
// exit ;
54483: GO 54540
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54485: LD_ADDR_EXP 46
54489: PUSH
54490: LD_EXP 46
54494: PPUSH
54495: LD_VAR 0 6
54499: PPUSH
54500: LD_EXP 46
54504: PUSH
54505: LD_VAR 0 6
54509: ARRAY
54510: PUSH
54511: LD_INT 1
54513: PLUS
54514: PPUSH
54515: CALL_OW 1
54519: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54520: LD_VAR 0 6
54524: PPUSH
54525: LD_EXP 46
54529: PUSH
54530: LD_VAR 0 6
54534: ARRAY
54535: PPUSH
54536: CALL_OW 506
// end ; end ;
54540: LD_VAR 0 2
54544: RET
// function UpdateCounter ; var i ; begin
54545: LD_INT 0
54547: PPUSH
54548: PPUSH
// result := [ ] ;
54549: LD_ADDR_VAR 0 1
54553: PUSH
54554: EMPTY
54555: ST_TO_ADDR
// if mpTeamGame then
54556: LD_EXP 9
54560: IFFALSE 54627
// begin for i := 1 to mpTeams do
54562: LD_ADDR_VAR 0 2
54566: PUSH
54567: DOUBLE
54568: LD_INT 1
54570: DEC
54571: ST_TO_ADDR
54572: LD_EXP 8
54576: PUSH
54577: FOR_TO
54578: IFFALSE 54623
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54580: LD_ADDR_VAR 0 1
54584: PUSH
54585: LD_VAR 0 1
54589: PUSH
54590: LD_STRING #KingoftheHill-Team
54592: PUSH
54593: LD_VAR 0 2
54597: PUSH
54598: LD_EXP 46
54602: PUSH
54603: LD_VAR 0 2
54607: ARRAY
54608: PUSH
54609: LD_EXP 33
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: ADD
54620: ST_TO_ADDR
54621: GO 54577
54623: POP
54624: POP
// end else
54625: GO 54700
// begin for i := 1 to 8 do
54627: LD_ADDR_VAR 0 2
54631: PUSH
54632: DOUBLE
54633: LD_INT 1
54635: DEC
54636: ST_TO_ADDR
54637: LD_INT 8
54639: PUSH
54640: FOR_TO
54641: IFFALSE 54698
// if mpSidePositions [ i ] then
54643: LD_EXP 5
54647: PUSH
54648: LD_VAR 0 2
54652: ARRAY
54653: IFFALSE 54696
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54655: LD_ADDR_VAR 0 1
54659: PUSH
54660: LD_VAR 0 1
54664: PUSH
54665: LD_STRING #KingoftheHill-Player
54667: PUSH
54668: LD_VAR 0 2
54672: PUSH
54673: LD_EXP 46
54677: PUSH
54678: LD_VAR 0 2
54682: ARRAY
54683: PUSH
54684: LD_EXP 33
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: ADD
54695: ST_TO_ADDR
54696: GO 54640
54698: POP
54699: POP
// end ; mpDisplayStrings := result ;
54700: LD_ADDR_EXP 36
54704: PUSH
54705: LD_VAR 0 1
54709: ST_TO_ADDR
// end ;
54710: LD_VAR 0 1
54714: RET
// export function HowMuchPointsKing ( side ) ; begin
54715: LD_INT 0
54717: PPUSH
// result := HowMuchPoints ( side ) ;
54718: LD_ADDR_VAR 0 2
54722: PUSH
54723: LD_VAR 0 1
54727: PPUSH
54728: CALL 54738 0 1
54732: ST_TO_ADDR
// end ;
54733: LD_VAR 0 2
54737: RET
// function HowMuchPoints ( side ) ; var i ; begin
54738: LD_INT 0
54740: PPUSH
54741: PPUSH
// if mpTeamGame then
54742: LD_EXP 9
54746: IFFALSE 54815
// begin for i := 1 to Count ( mpTeams ) do
54748: LD_ADDR_VAR 0 3
54752: PUSH
54753: DOUBLE
54754: LD_INT 1
54756: DEC
54757: ST_TO_ADDR
54758: LD_EXP 8
54762: PPUSH
54763: CALL 5126 0 1
54767: PUSH
54768: FOR_TO
54769: IFFALSE 54811
// begin if side in mpTeams [ i ] then
54771: LD_VAR 0 1
54775: PUSH
54776: LD_EXP 8
54780: PUSH
54781: LD_VAR 0 3
54785: ARRAY
54786: IN
54787: IFFALSE 54809
// begin result := mpKingPoints [ i ] ;
54789: LD_ADDR_VAR 0 2
54793: PUSH
54794: LD_EXP 46
54798: PUSH
54799: LD_VAR 0 3
54803: ARRAY
54804: ST_TO_ADDR
// exit ;
54805: POP
54806: POP
54807: GO 54831
// end ; end ;
54809: GO 54768
54811: POP
54812: POP
// end else
54813: GO 54831
// result := mpKingPoints [ side ] ;
54815: LD_ADDR_VAR 0 2
54819: PUSH
54820: LD_EXP 46
54824: PUSH
54825: LD_VAR 0 1
54829: ARRAY
54830: ST_TO_ADDR
// end ;
54831: LD_VAR 0 2
54835: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54836: LD_EXP 37
54840: IFFALSE 54848
54842: PUSH
54843: CALL 55183 0 0
54847: AND
54848: IFFALSE 54856
54850: PUSH
54851: LD_OWVAR 4
54855: AND
54856: IFFALSE 55106
54858: GO 54860
54860: DISABLE
54861: LD_INT 0
54863: PPUSH
54864: PPUSH
// begin canWin := false ;
54865: LD_ADDR_VAR 0 2
54869: PUSH
54870: LD_INT 0
54872: ST_TO_ADDR
// if not HasPower ( your_side ) then
54873: LD_OWVAR 2
54877: PPUSH
54878: CALL 55225 0 1
54882: NOT
54883: IFFALSE 54894
// begin Multiplayer_Loose_Message ;
54885: CALL_OW 521
// enable ( mpLose ) ;
54889: LD_INT 102
54891: ENABLE_MARKED
// end else
54892: GO 55106
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
54894: LD_ADDR_VAR 0 2
54898: PUSH
54899: LD_OWVAR 2
54903: PPUSH
54904: CALL 54738 0 1
54908: PUSH
54909: LD_EXP 33
54913: GREATEREQUAL
54914: IFFALSE 54927
54916: PUSH
54917: LD_OWVAR 2
54921: PPUSH
54922: CALL 55225 0 1
54926: AND
54927: IFTRUE 54936
54929: PUSH
54930: CALL 55109 0 0
54934: NOT
54935: OR
54936: ST_TO_ADDR
// for i := 1 to 8 do
54937: LD_ADDR_VAR 0 1
54941: PUSH
54942: DOUBLE
54943: LD_INT 1
54945: DEC
54946: ST_TO_ADDR
54947: LD_INT 8
54949: PUSH
54950: FOR_TO
54951: IFFALSE 55092
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54953: LD_EXP 5
54957: PUSH
54958: LD_VAR 0 1
54962: ARRAY
54963: IFFALSE 54976
54965: PUSH
54966: LD_VAR 0 1
54970: PPUSH
54971: CALL_OW 108
54975: AND
54976: IFFALSE 54990
54978: PUSH
54979: LD_VAR 0 1
54983: PUSH
54984: LD_OWVAR 2
54988: NONEQUAL
54989: AND
54990: IFFALSE 55090
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54992: LD_EXP 6
54996: PUSH
54997: LD_VAR 0 1
55001: ARRAY
55002: NOT
55003: IFTRUE 55051
55005: PUSH
55006: LD_EXP 6
55010: PUSH
55011: LD_VAR 0 1
55015: ARRAY
55016: PUSH
55017: LD_EXP 6
55021: PUSH
55022: LD_OWVAR 2
55026: ARRAY
55027: NONEQUAL
55028: IFFALSE 55050
55030: PUSH
55031: LD_OWVAR 2
55035: PPUSH
55036: LD_VAR 0 1
55040: PPUSH
55041: CALL_OW 81
55045: PUSH
55046: LD_INT 1
55048: NONEQUAL
55049: AND
55050: OR
55051: IFFALSE 55090
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55053: LD_VAR 0 1
55057: PPUSH
55058: CALL 54738 0 1
55062: PUSH
55063: LD_EXP 33
55067: GREATEREQUAL
55068: IFFALSE 55081
55070: PUSH
55071: LD_VAR 0 1
55075: PPUSH
55076: CALL 55225 0 1
55080: AND
55081: IFFALSE 55090
// begin enable ( mpLose ) ;
55083: LD_INT 102
55085: ENABLE_MARKED
// exit ;
55086: POP
55087: POP
55088: GO 55106
// end ;
55090: GO 54950
55092: POP
55093: POP
// if canWin then
55094: LD_VAR 0 2
55098: IFFALSE 55105
// enable ( mpWin ) else
55100: LD_INT 101
55102: ENABLE_MARKED
55103: GO 55106
// enable ;
55105: ENABLE
// end ; end ;
55106: PPOPN 2
55108: END
// function EnemiesInGame ; var i ; begin
55109: LD_INT 0
55111: PPUSH
55112: PPUSH
// result := false ;
55113: LD_ADDR_VAR 0 1
55117: PUSH
55118: LD_INT 0
55120: ST_TO_ADDR
// for i := 1 to 8 do
55121: LD_ADDR_VAR 0 2
55125: PUSH
55126: DOUBLE
55127: LD_INT 1
55129: DEC
55130: ST_TO_ADDR
55131: LD_INT 8
55133: PUSH
55134: FOR_TO
55135: IFFALSE 55176
// if i <> your_side and HasPower ( i ) then
55137: LD_VAR 0 2
55141: PUSH
55142: LD_OWVAR 2
55146: NONEQUAL
55147: IFFALSE 55160
55149: PUSH
55150: LD_VAR 0 2
55154: PPUSH
55155: CALL 55225 0 1
55159: AND
55160: IFFALSE 55174
// begin result := true ;
55162: LD_ADDR_VAR 0 1
55166: PUSH
55167: LD_INT 1
55169: ST_TO_ADDR
// exit ;
55170: POP
55171: POP
55172: GO 55178
// end ;
55174: GO 55134
55176: POP
55177: POP
// end ;
55178: LD_VAR 0 1
55182: RET
// function CanWinLoose ; begin
55183: LD_INT 0
55185: PPUSH
// result := true ;
55186: LD_ADDR_VAR 0 1
55190: PUSH
55191: LD_INT 1
55193: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55194: CALL_OW 531
55198: IFFALSE 55210
55200: PUSH
55201: CALL_OW 519
55205: PUSH
55206: LD_INT 1
55208: GREATER
55209: AND
55210: IFFALSE 55220
// result := false ;
55212: LD_ADDR_VAR 0 1
55216: PUSH
55217: LD_INT 0
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 1
55224: RET
// function HasPower ( i ) ; begin
55225: LD_INT 0
55227: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55228: LD_ADDR_VAR 0 2
55232: PUSH
55233: LD_INT 22
55235: PUSH
55236: LD_VAR 0 1
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: LD_INT 21
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 33
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 33
55270: PUSH
55271: LD_INT 5
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PPUSH
55288: CALL_OW 69
55292: ST_TO_ADDR
// end ; end_of_file end_of_file
55293: LD_VAR 0 2
55297: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55298: LD_VAR 0 1
55302: PUSH
55303: LD_INT 200
55305: DOUBLE
55306: GREATEREQUAL
55307: IFFALSE 55315
55309: LD_INT 299
55311: DOUBLE
55312: LESSEQUAL
55313: IFTRUE 55317
55315: GO 55349
55317: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55318: LD_VAR 0 1
55322: PPUSH
55323: LD_VAR 0 2
55327: PPUSH
55328: LD_VAR 0 3
55332: PPUSH
55333: LD_VAR 0 4
55337: PPUSH
55338: LD_VAR 0 5
55342: PPUSH
55343: CALL 56130 0 5
55347: GO 55426
55349: LD_INT 300
55351: DOUBLE
55352: GREATEREQUAL
55353: IFFALSE 55361
55355: LD_INT 399
55357: DOUBLE
55358: LESSEQUAL
55359: IFTRUE 55363
55361: GO 55425
55363: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55364: LD_VAR 0 1
55368: PPUSH
55369: LD_VAR 0 2
55373: PPUSH
55374: LD_VAR 0 3
55378: PPUSH
55379: LD_VAR 0 4
55383: PPUSH
55384: LD_VAR 0 5
55388: PPUSH
55389: LD_VAR 0 6
55393: PPUSH
55394: LD_VAR 0 7
55398: PPUSH
55399: LD_VAR 0 8
55403: PPUSH
55404: LD_VAR 0 9
55408: PPUSH
55409: LD_VAR 0 10
55413: PPUSH
55414: LD_VAR 0 11
55418: PPUSH
55419: CALL 61535 0 11
55423: GO 55426
55425: POP
// end ;
55426: PPOPN 11
55428: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55429: LD_VAR 0 1
55433: PPUSH
55434: LD_VAR 0 2
55438: PPUSH
55439: LD_VAR 0 3
55443: PPUSH
55444: LD_VAR 0 4
55448: PPUSH
55449: LD_VAR 0 5
55453: PPUSH
55454: CALL 55511 0 5
// end ; end_of_file
55458: PPOPN 5
55460: END
// export function SOS_UnitDestroyed ( un ) ; begin
55461: LD_INT 0
55463: PPUSH
// ComRadiation ( un ) ;
55464: LD_VAR 0 1
55468: PPUSH
55469: CALL 56550 0 1
// end ;
55473: LD_VAR 0 2
55477: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55478: LD_INT 0
55480: PPUSH
// ComRadiation ( un ) ;
55481: LD_VAR 0 1
55485: PPUSH
55486: CALL 56550 0 1
// end ;
55490: LD_VAR 0 2
55494: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55495: LD_INT 0
55497: PPUSH
// end ;
55498: LD_VAR 0 4
55502: RET
// export function SOS_Command ( cmd ) ; begin
55503: LD_INT 0
55505: PPUSH
// end ;
55506: LD_VAR 0 2
55510: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55511: LD_INT 0
55513: PPUSH
// end ;
55514: LD_VAR 0 6
55518: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55519: LD_INT 0
55521: PPUSH
55522: PPUSH
55523: PPUSH
55524: PPUSH
// if not vehicle or not factory then
55525: LD_VAR 0 1
55529: NOT
55530: IFTRUE 55539
55532: PUSH
55533: LD_VAR 0 2
55537: NOT
55538: OR
55539: IFFALSE 55543
// exit ;
55541: GO 56125
// if not factoryWaypoints then
55543: LD_EXP 57
55547: NOT
55548: IFFALSE 55552
// exit ;
55550: GO 56125
// for i := 1 to Count ( factoryWaypoints ) do
55552: LD_ADDR_VAR 0 4
55556: PUSH
55557: DOUBLE
55558: LD_INT 1
55560: DEC
55561: ST_TO_ADDR
55562: LD_EXP 57
55566: PPUSH
55567: CALL 5126 0 1
55571: PUSH
55572: FOR_TO
55573: IFFALSE 56123
// if factoryWaypoints [ i ] [ 2 ] = factory then
55575: LD_EXP 57
55579: PUSH
55580: LD_VAR 0 4
55584: ARRAY
55585: PUSH
55586: LD_INT 2
55588: ARRAY
55589: PUSH
55590: LD_VAR 0 2
55594: EQUAL
55595: IFFALSE 56121
// begin if GetControl ( vehicle ) = control_manual then
55597: LD_VAR 0 1
55601: PPUSH
55602: CALL_OW 263
55606: PUSH
55607: LD_INT 1
55609: EQUAL
55610: IFFALSE 55974
// begin driver := IsDrivenBy ( vehicle ) ;
55612: LD_ADDR_VAR 0 5
55616: PUSH
55617: LD_VAR 0 1
55621: PPUSH
55622: CALL_OW 311
55626: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55627: LD_VAR 0 5
55631: PUSH
55632: LD_EXP 58
55636: IN
55637: IFTRUE 55651
55639: PUSH
55640: LD_VAR 0 1
55644: PUSH
55645: LD_EXP 58
55649: IN
55650: OR
55651: IFFALSE 55657
// exit ;
55653: POP
55654: POP
55655: GO 56125
// if not HasTask ( driver ) then
55657: LD_VAR 0 5
55661: PPUSH
55662: CALL_OW 314
55666: NOT
55667: IFFALSE 55972
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55669: LD_ADDR_EXP 58
55673: PUSH
55674: LD_EXP 58
55678: PPUSH
55679: LD_VAR 0 5
55683: PPUSH
55684: CALL 41058 0 2
55688: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55689: LD_ADDR_EXP 58
55693: PUSH
55694: LD_EXP 58
55698: PPUSH
55699: LD_VAR 0 1
55703: PPUSH
55704: CALL 41058 0 2
55708: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55709: LD_ADDR_VAR 0 6
55713: PUSH
55714: LD_EXP 57
55718: PUSH
55719: LD_VAR 0 4
55723: ARRAY
55724: PUSH
55725: LD_INT 3
55727: ARRAY
55728: PPUSH
55729: LD_EXP 57
55733: PUSH
55734: LD_VAR 0 4
55738: ARRAY
55739: PUSH
55740: LD_INT 4
55742: ARRAY
55743: PPUSH
55744: CALL_OW 428
55748: ST_TO_ADDR
// if hex then
55749: LD_VAR 0 6
55753: IFFALSE 55771
// ComMoveUnit ( driver , hex ) else
55755: LD_VAR 0 5
55759: PPUSH
55760: LD_VAR 0 6
55764: PPUSH
55765: CALL_OW 112
55769: GO 55855
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55771: LD_VAR 0 1
55775: PPUSH
55776: LD_EXP 57
55780: PUSH
55781: LD_VAR 0 4
55785: ARRAY
55786: PUSH
55787: LD_INT 3
55789: ARRAY
55790: PPUSH
55791: LD_EXP 57
55795: PUSH
55796: LD_VAR 0 4
55800: ARRAY
55801: PUSH
55802: LD_INT 4
55804: ARRAY
55805: PPUSH
55806: CALL_OW 297
55810: PUSH
55811: LD_INT 0
55813: GREATER
55814: IFFALSE 55855
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55816: LD_VAR 0 5
55820: PPUSH
55821: LD_EXP 57
55825: PUSH
55826: LD_VAR 0 4
55830: ARRAY
55831: PUSH
55832: LD_INT 3
55834: ARRAY
55835: PPUSH
55836: LD_EXP 57
55840: PUSH
55841: LD_VAR 0 4
55845: ARRAY
55846: PUSH
55847: LD_INT 4
55849: ARRAY
55850: PPUSH
55851: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55855: LD_VAR 0 5
55859: PPUSH
55860: CALL_OW 181
// if Multiplayer then
55864: LD_OWVAR 4
55868: IFFALSE 55917
// begin repeat wait ( 10 ) ;
55870: LD_INT 10
55872: PPUSH
55873: CALL_OW 67
// until not IsInUnit ( driver ) ;
55877: LD_VAR 0 5
55881: PPUSH
55882: CALL_OW 310
55886: NOT
55887: IFFALSE 55870
// if not HasTask ( driver ) then
55889: LD_VAR 0 5
55893: PPUSH
55894: CALL_OW 314
55898: NOT
55899: IFFALSE 55915
// ComEnterUnit ( driver , factory ) ;
55901: LD_VAR 0 5
55905: PPUSH
55906: LD_VAR 0 2
55910: PPUSH
55911: CALL_OW 120
// end else
55915: GO 55931
// AddComEnterUnit ( driver , factory ) ;
55917: LD_VAR 0 5
55921: PPUSH
55922: LD_VAR 0 2
55926: PPUSH
55927: CALL_OW 180
// wait ( 0 0$1 ) ;
55931: LD_INT 35
55933: PPUSH
55934: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55938: LD_ADDR_EXP 58
55942: PUSH
55943: LD_EXP 58
55947: PUSH
55948: LD_VAR 0 5
55952: DIFF
55953: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55954: LD_ADDR_EXP 58
55958: PUSH
55959: LD_EXP 58
55963: PUSH
55964: LD_VAR 0 1
55968: DIFF
55969: ST_TO_ADDR
// break ;
55970: GO 56123
// end ; end else
55972: GO 56121
// if GetControl ( vehicle ) = control_remote then
55974: LD_VAR 0 1
55978: PPUSH
55979: CALL_OW 263
55983: PUSH
55984: LD_INT 2
55986: EQUAL
55987: IFFALSE 56073
// begin wait ( 0 0$2 ) ;
55989: LD_INT 70
55991: PPUSH
55992: CALL_OW 67
// repeat wait ( 10 ) ;
55996: LD_INT 10
55998: PPUSH
55999: CALL_OW 67
// Connect ( vehicle ) ;
56003: LD_VAR 0 1
56007: PPUSH
56008: CALL 11370 0 1
// until IsControledBy ( vehicle ) ;
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 312
56021: IFFALSE 55996
// wait ( 10 ) ;
56023: LD_INT 10
56025: PPUSH
56026: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56030: LD_VAR 0 1
56034: PPUSH
56035: LD_EXP 57
56039: PUSH
56040: LD_VAR 0 4
56044: ARRAY
56045: PUSH
56046: LD_INT 3
56048: ARRAY
56049: PPUSH
56050: LD_EXP 57
56054: PUSH
56055: LD_VAR 0 4
56059: ARRAY
56060: PUSH
56061: LD_INT 4
56063: ARRAY
56064: PPUSH
56065: CALL_OW 111
// break ;
56069: GO 56123
// end else
56071: GO 56121
// begin wait ( 0 0$3 ) ;
56073: LD_INT 105
56075: PPUSH
56076: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56080: LD_VAR 0 1
56084: PPUSH
56085: LD_EXP 57
56089: PUSH
56090: LD_VAR 0 4
56094: ARRAY
56095: PUSH
56096: LD_INT 3
56098: ARRAY
56099: PPUSH
56100: LD_EXP 57
56104: PUSH
56105: LD_VAR 0 4
56109: ARRAY
56110: PUSH
56111: LD_INT 4
56113: ARRAY
56114: PPUSH
56115: CALL_OW 111
// break ;
56119: GO 56123
// end ; end ;
56121: GO 55572
56123: POP
56124: POP
// end ;
56125: LD_VAR 0 3
56129: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56130: LD_INT 0
56132: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56133: LD_VAR 0 1
56137: PUSH
56138: LD_INT 250
56140: EQUAL
56141: IFFALSE 56158
56143: PUSH
56144: LD_VAR 0 2
56148: PPUSH
56149: CALL_OW 264
56153: PUSH
56154: LD_INT 81
56156: EQUAL
56157: AND
56158: IFFALSE 56179
// MinerPlaceMine ( unit , x , y ) ;
56160: LD_VAR 0 2
56164: PPUSH
56165: LD_VAR 0 4
56169: PPUSH
56170: LD_VAR 0 5
56174: PPUSH
56175: CALL 59311 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56179: LD_VAR 0 1
56183: PUSH
56184: LD_INT 251
56186: EQUAL
56187: IFFALSE 56204
56189: PUSH
56190: LD_VAR 0 2
56194: PPUSH
56195: CALL_OW 264
56199: PUSH
56200: LD_INT 81
56202: EQUAL
56203: AND
56204: IFFALSE 56225
// MinerDetonateMine ( unit , x , y ) ;
56206: LD_VAR 0 2
56210: PPUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: LD_VAR 0 5
56220: PPUSH
56221: CALL 59590 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56225: LD_VAR 0 1
56229: PUSH
56230: LD_INT 252
56232: EQUAL
56233: IFFALSE 56250
56235: PUSH
56236: LD_VAR 0 2
56240: PPUSH
56241: CALL_OW 264
56245: PUSH
56246: LD_INT 81
56248: EQUAL
56249: AND
56250: IFFALSE 56271
// MinerCreateMinefield ( unit , x , y ) ;
56252: LD_VAR 0 2
56256: PPUSH
56257: LD_VAR 0 4
56261: PPUSH
56262: LD_VAR 0 5
56266: PPUSH
56267: CALL 60009 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56271: LD_VAR 0 1
56275: PUSH
56276: LD_INT 253
56278: EQUAL
56279: IFFALSE 56296
56281: PUSH
56282: LD_VAR 0 2
56286: PPUSH
56287: CALL_OW 257
56291: PUSH
56292: LD_INT 5
56294: EQUAL
56295: AND
56296: IFFALSE 56317
// ComBinocular ( unit , x , y ) ;
56298: LD_VAR 0 2
56302: PPUSH
56303: LD_VAR 0 4
56307: PPUSH
56308: LD_VAR 0 5
56312: PPUSH
56313: CALL 60384 0 3
// if selectedUnit then
56317: LD_VAR 0 3
56321: IFFALSE 56381
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56323: LD_VAR 0 1
56327: PUSH
56328: LD_INT 254
56330: EQUAL
56331: IFFALSE 56348
56333: PUSH
56334: LD_VAR 0 2
56338: PPUSH
56339: CALL_OW 264
56343: PUSH
56344: LD_INT 99
56346: EQUAL
56347: AND
56348: IFFALSE 56365
56350: PUSH
56351: LD_VAR 0 3
56355: PPUSH
56356: CALL_OW 263
56360: PUSH
56361: LD_INT 3
56363: EQUAL
56364: AND
56365: IFFALSE 56381
// HackDestroyVehicle ( unit , selectedUnit ) ;
56367: LD_VAR 0 2
56371: PPUSH
56372: LD_VAR 0 3
56376: PPUSH
56377: CALL 58671 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56381: LD_VAR 0 1
56385: PUSH
56386: LD_INT 255
56388: EQUAL
56389: IFFALSE 56413
56391: PUSH
56392: LD_VAR 0 2
56396: PPUSH
56397: CALL_OW 264
56401: PUSH
56402: LD_INT 14
56404: PUSH
56405: LD_INT 53
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: IN
56412: AND
56413: IFFALSE 56431
56415: PUSH
56416: LD_VAR 0 4
56420: PPUSH
56421: LD_VAR 0 5
56425: PPUSH
56426: CALL_OW 488
56430: AND
56431: IFFALSE 56455
// CutTreeXYR ( unit , x , y , 12 ) ;
56433: LD_VAR 0 2
56437: PPUSH
56438: LD_VAR 0 4
56442: PPUSH
56443: LD_VAR 0 5
56447: PPUSH
56448: LD_INT 12
56450: PPUSH
56451: CALL 56646 0 4
// if cmd = 256 then
56455: LD_VAR 0 1
56459: PUSH
56460: LD_INT 256
56462: EQUAL
56463: IFFALSE 56484
// SetFactoryWaypoint ( unit , x , y ) ;
56465: LD_VAR 0 2
56469: PPUSH
56470: LD_VAR 0 4
56474: PPUSH
56475: LD_VAR 0 5
56479: PPUSH
56480: CALL 61543 0 3
// if cmd = 257 then
56484: LD_VAR 0 1
56488: PUSH
56489: LD_INT 257
56491: EQUAL
56492: IFFALSE 56513
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56494: LD_VAR 0 2
56498: PPUSH
56499: LD_VAR 0 4
56503: PPUSH
56504: LD_VAR 0 5
56508: PPUSH
56509: CALL 62039 0 3
// if cmd = 258 then
56513: LD_VAR 0 1
56517: PUSH
56518: LD_INT 258
56520: EQUAL
56521: IFFALSE 56545
// BurnTreeXYR ( unit , x , y , 8 ) ;
56523: LD_VAR 0 2
56527: PPUSH
56528: LD_VAR 0 4
56532: PPUSH
56533: LD_VAR 0 5
56537: PPUSH
56538: LD_INT 8
56540: PPUSH
56541: CALL 57046 0 4
// end ;
56545: LD_VAR 0 6
56549: RET
// export function ComRadiation ( un ) ; var eff ; begin
56550: LD_INT 0
56552: PPUSH
56553: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56554: LD_VAR 0 1
56558: PPUSH
56559: CALL_OW 264
56563: PUSH
56564: LD_INT 91
56566: NONEQUAL
56567: IFFALSE 56571
// exit ;
56569: GO 56641
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56571: LD_INT 68
56573: PPUSH
56574: LD_VAR 0 1
56578: PPUSH
56579: CALL_OW 255
56583: PPUSH
56584: CALL_OW 321
56588: PUSH
56589: LD_INT 2
56591: EQUAL
56592: IFFALSE 56604
// eff := 50 else
56594: LD_ADDR_VAR 0 3
56598: PUSH
56599: LD_INT 50
56601: ST_TO_ADDR
56602: GO 56612
// eff := 25 ;
56604: LD_ADDR_VAR 0 3
56608: PUSH
56609: LD_INT 25
56611: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56612: LD_VAR 0 1
56616: PPUSH
56617: CALL_OW 250
56621: PPUSH
56622: LD_VAR 0 1
56626: PPUSH
56627: CALL_OW 251
56631: PPUSH
56632: LD_VAR 0 3
56636: PPUSH
56637: CALL_OW 495
// end ;
56641: LD_VAR 0 2
56645: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56646: LD_INT 0
56648: PPUSH
56649: PPUSH
56650: PPUSH
56651: PPUSH
56652: PPUSH
56653: PPUSH
56654: PPUSH
56655: PPUSH
56656: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56657: LD_VAR 0 1
56661: PPUSH
56662: CALL_OW 302
56666: NOT
56667: IFTRUE 56686
56669: PUSH
56670: LD_VAR 0 2
56674: PPUSH
56675: LD_VAR 0 3
56679: PPUSH
56680: CALL_OW 488
56684: NOT
56685: OR
56686: IFTRUE 56695
56688: PUSH
56689: LD_VAR 0 4
56693: NOT
56694: OR
56695: IFFALSE 56699
// exit ;
56697: GO 57041
// list := [ ] ;
56699: LD_ADDR_VAR 0 13
56703: PUSH
56704: EMPTY
56705: ST_TO_ADDR
// if x - r < 0 then
56706: LD_VAR 0 2
56710: PUSH
56711: LD_VAR 0 4
56715: MINUS
56716: PUSH
56717: LD_INT 0
56719: LESS
56720: IFFALSE 56732
// min_x := 0 else
56722: LD_ADDR_VAR 0 7
56726: PUSH
56727: LD_INT 0
56729: ST_TO_ADDR
56730: GO 56748
// min_x := x - r ;
56732: LD_ADDR_VAR 0 7
56736: PUSH
56737: LD_VAR 0 2
56741: PUSH
56742: LD_VAR 0 4
56746: MINUS
56747: ST_TO_ADDR
// if y - r < 0 then
56748: LD_VAR 0 3
56752: PUSH
56753: LD_VAR 0 4
56757: MINUS
56758: PUSH
56759: LD_INT 0
56761: LESS
56762: IFFALSE 56774
// min_y := 0 else
56764: LD_ADDR_VAR 0 8
56768: PUSH
56769: LD_INT 0
56771: ST_TO_ADDR
56772: GO 56790
// min_y := y - r ;
56774: LD_ADDR_VAR 0 8
56778: PUSH
56779: LD_VAR 0 3
56783: PUSH
56784: LD_VAR 0 4
56788: MINUS
56789: ST_TO_ADDR
// max_x := x + r ;
56790: LD_ADDR_VAR 0 9
56794: PUSH
56795: LD_VAR 0 2
56799: PUSH
56800: LD_VAR 0 4
56804: PLUS
56805: ST_TO_ADDR
// max_y := y + r ;
56806: LD_ADDR_VAR 0 10
56810: PUSH
56811: LD_VAR 0 3
56815: PUSH
56816: LD_VAR 0 4
56820: PLUS
56821: ST_TO_ADDR
// for _x = min_x to max_x do
56822: LD_ADDR_VAR 0 11
56826: PUSH
56827: DOUBLE
56828: LD_VAR 0 7
56832: DEC
56833: ST_TO_ADDR
56834: LD_VAR 0 9
56838: PUSH
56839: FOR_TO
56840: IFFALSE 56959
// for _y = min_y to max_y do
56842: LD_ADDR_VAR 0 12
56846: PUSH
56847: DOUBLE
56848: LD_VAR 0 8
56852: DEC
56853: ST_TO_ADDR
56854: LD_VAR 0 10
56858: PUSH
56859: FOR_TO
56860: IFFALSE 56955
// begin if not ValidHex ( _x , _y ) then
56862: LD_VAR 0 11
56866: PPUSH
56867: LD_VAR 0 12
56871: PPUSH
56872: CALL_OW 488
56876: NOT
56877: IFFALSE 56881
// continue ;
56879: GO 56859
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56881: LD_VAR 0 11
56885: PPUSH
56886: LD_VAR 0 12
56890: PPUSH
56891: CALL_OW 351
56895: IFFALSE 56913
56897: PUSH
56898: LD_VAR 0 11
56902: PPUSH
56903: LD_VAR 0 12
56907: PPUSH
56908: CALL_OW 554
56912: AND
56913: IFFALSE 56953
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56915: LD_ADDR_VAR 0 13
56919: PUSH
56920: LD_VAR 0 13
56924: PPUSH
56925: LD_VAR 0 13
56929: PUSH
56930: LD_INT 1
56932: PLUS
56933: PPUSH
56934: LD_VAR 0 11
56938: PUSH
56939: LD_VAR 0 12
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PPUSH
56948: CALL_OW 2
56952: ST_TO_ADDR
// end ;
56953: GO 56859
56955: POP
56956: POP
56957: GO 56839
56959: POP
56960: POP
// if not list then
56961: LD_VAR 0 13
56965: NOT
56966: IFFALSE 56970
// exit ;
56968: GO 57041
// for i in list do
56970: LD_ADDR_VAR 0 6
56974: PUSH
56975: LD_VAR 0 13
56979: PUSH
56980: FOR_IN
56981: IFFALSE 57039
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56983: LD_VAR 0 1
56987: PPUSH
56988: LD_STRING M
56990: PUSH
56991: LD_VAR 0 6
56995: PUSH
56996: LD_INT 1
56998: ARRAY
56999: PUSH
57000: LD_VAR 0 6
57004: PUSH
57005: LD_INT 2
57007: ARRAY
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: PPUSH
57033: CALL_OW 447
57037: GO 56980
57039: POP
57040: POP
// end ;
57041: LD_VAR 0 5
57045: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57046: LD_INT 0
57048: PPUSH
57049: PPUSH
57050: PPUSH
57051: PPUSH
57052: PPUSH
57053: PPUSH
57054: PPUSH
57055: PPUSH
57056: PPUSH
57057: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57058: LD_VAR 0 1
57062: PPUSH
57063: CALL_OW 302
57067: NOT
57068: IFTRUE 57087
57070: PUSH
57071: LD_VAR 0 2
57075: PPUSH
57076: LD_VAR 0 3
57080: PPUSH
57081: CALL_OW 488
57085: NOT
57086: OR
57087: IFTRUE 57096
57089: PUSH
57090: LD_VAR 0 4
57094: NOT
57095: OR
57096: IFFALSE 57100
// exit ;
57098: GO 57617
// list := [ ] ;
57100: LD_ADDR_VAR 0 13
57104: PUSH
57105: EMPTY
57106: ST_TO_ADDR
// if x - r < 0 then
57107: LD_VAR 0 2
57111: PUSH
57112: LD_VAR 0 4
57116: MINUS
57117: PUSH
57118: LD_INT 0
57120: LESS
57121: IFFALSE 57133
// min_x := 0 else
57123: LD_ADDR_VAR 0 7
57127: PUSH
57128: LD_INT 0
57130: ST_TO_ADDR
57131: GO 57149
// min_x := x - r ;
57133: LD_ADDR_VAR 0 7
57137: PUSH
57138: LD_VAR 0 2
57142: PUSH
57143: LD_VAR 0 4
57147: MINUS
57148: ST_TO_ADDR
// if y - r < 0 then
57149: LD_VAR 0 3
57153: PUSH
57154: LD_VAR 0 4
57158: MINUS
57159: PUSH
57160: LD_INT 0
57162: LESS
57163: IFFALSE 57175
// min_y := 0 else
57165: LD_ADDR_VAR 0 8
57169: PUSH
57170: LD_INT 0
57172: ST_TO_ADDR
57173: GO 57191
// min_y := y - r ;
57175: LD_ADDR_VAR 0 8
57179: PUSH
57180: LD_VAR 0 3
57184: PUSH
57185: LD_VAR 0 4
57189: MINUS
57190: ST_TO_ADDR
// max_x := x + r ;
57191: LD_ADDR_VAR 0 9
57195: PUSH
57196: LD_VAR 0 2
57200: PUSH
57201: LD_VAR 0 4
57205: PLUS
57206: ST_TO_ADDR
// max_y := y + r ;
57207: LD_ADDR_VAR 0 10
57211: PUSH
57212: LD_VAR 0 3
57216: PUSH
57217: LD_VAR 0 4
57221: PLUS
57222: ST_TO_ADDR
// for _x = min_x to max_x do
57223: LD_ADDR_VAR 0 11
57227: PUSH
57228: DOUBLE
57229: LD_VAR 0 7
57233: DEC
57234: ST_TO_ADDR
57235: LD_VAR 0 9
57239: PUSH
57240: FOR_TO
57241: IFFALSE 57360
// for _y = min_y to max_y do
57243: LD_ADDR_VAR 0 12
57247: PUSH
57248: DOUBLE
57249: LD_VAR 0 8
57253: DEC
57254: ST_TO_ADDR
57255: LD_VAR 0 10
57259: PUSH
57260: FOR_TO
57261: IFFALSE 57356
// begin if not ValidHex ( _x , _y ) then
57263: LD_VAR 0 11
57267: PPUSH
57268: LD_VAR 0 12
57272: PPUSH
57273: CALL_OW 488
57277: NOT
57278: IFFALSE 57282
// continue ;
57280: GO 57260
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57282: LD_VAR 0 11
57286: PPUSH
57287: LD_VAR 0 12
57291: PPUSH
57292: CALL_OW 351
57296: IFFALSE 57314
57298: PUSH
57299: LD_VAR 0 11
57303: PPUSH
57304: LD_VAR 0 12
57308: PPUSH
57309: CALL_OW 554
57313: AND
57314: IFFALSE 57354
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57316: LD_ADDR_VAR 0 13
57320: PUSH
57321: LD_VAR 0 13
57325: PPUSH
57326: LD_VAR 0 13
57330: PUSH
57331: LD_INT 1
57333: PLUS
57334: PPUSH
57335: LD_VAR 0 11
57339: PUSH
57340: LD_VAR 0 12
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PPUSH
57349: CALL_OW 2
57353: ST_TO_ADDR
// end ;
57354: GO 57260
57356: POP
57357: POP
57358: GO 57240
57360: POP
57361: POP
// if not list then
57362: LD_VAR 0 13
57366: NOT
57367: IFFALSE 57371
// exit ;
57369: GO 57617
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57371: LD_ADDR_VAR 0 13
57375: PUSH
57376: LD_VAR 0 1
57380: PPUSH
57381: LD_VAR 0 13
57385: PPUSH
57386: LD_INT 1
57388: PPUSH
57389: LD_INT 1
57391: PPUSH
57392: CALL 8498 0 4
57396: ST_TO_ADDR
// ComStop ( flame ) ;
57397: LD_VAR 0 1
57401: PPUSH
57402: CALL_OW 141
// for i in list do
57406: LD_ADDR_VAR 0 6
57410: PUSH
57411: LD_VAR 0 13
57415: PUSH
57416: FOR_IN
57417: IFFALSE 57448
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57419: LD_VAR 0 1
57423: PPUSH
57424: LD_VAR 0 6
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: LD_VAR 0 6
57437: PUSH
57438: LD_INT 2
57440: ARRAY
57441: PPUSH
57442: CALL_OW 176
57446: GO 57416
57448: POP
57449: POP
// repeat wait ( 0 0$1 ) ;
57450: LD_INT 35
57452: PPUSH
57453: CALL_OW 67
// task := GetTaskList ( flame ) ;
57457: LD_ADDR_VAR 0 14
57461: PUSH
57462: LD_VAR 0 1
57466: PPUSH
57467: CALL_OW 437
57471: ST_TO_ADDR
// if not task then
57472: LD_VAR 0 14
57476: NOT
57477: IFFALSE 57481
// exit ;
57479: GO 57617
// if task [ 1 ] [ 1 ] <> | then
57481: LD_VAR 0 14
57485: PUSH
57486: LD_INT 1
57488: ARRAY
57489: PUSH
57490: LD_INT 1
57492: ARRAY
57493: PUSH
57494: LD_STRING |
57496: NONEQUAL
57497: IFFALSE 57501
// exit ;
57499: GO 57617
// _x := task [ 1 ] [ 2 ] ;
57501: LD_ADDR_VAR 0 11
57505: PUSH
57506: LD_VAR 0 14
57510: PUSH
57511: LD_INT 1
57513: ARRAY
57514: PUSH
57515: LD_INT 2
57517: ARRAY
57518: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57519: LD_ADDR_VAR 0 12
57523: PUSH
57524: LD_VAR 0 14
57528: PUSH
57529: LD_INT 1
57531: ARRAY
57532: PUSH
57533: LD_INT 3
57535: ARRAY
57536: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57537: LD_VAR 0 11
57541: PPUSH
57542: LD_VAR 0 12
57546: PPUSH
57547: CALL_OW 351
57551: NOT
57552: IFTRUE 57571
57554: PUSH
57555: LD_VAR 0 11
57559: PPUSH
57560: LD_VAR 0 12
57564: PPUSH
57565: CALL_OW 554
57569: NOT
57570: OR
57571: IFFALSE 57605
// begin task := Delete ( task , 1 ) ;
57573: LD_ADDR_VAR 0 14
57577: PUSH
57578: LD_VAR 0 14
57582: PPUSH
57583: LD_INT 1
57585: PPUSH
57586: CALL_OW 3
57590: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57591: LD_VAR 0 1
57595: PPUSH
57596: LD_VAR 0 14
57600: PPUSH
57601: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57605: LD_VAR 0 1
57609: PPUSH
57610: CALL_OW 314
57614: NOT
57615: IFFALSE 57450
// end ;
57617: LD_VAR 0 5
57621: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57622: LD_EXP 47
57626: NOT
57627: IFFALSE 57677
57629: GO 57631
57631: DISABLE
// begin initHack := true ;
57632: LD_ADDR_EXP 47
57636: PUSH
57637: LD_INT 1
57639: ST_TO_ADDR
// hackTanks := [ ] ;
57640: LD_ADDR_EXP 48
57644: PUSH
57645: EMPTY
57646: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57647: LD_ADDR_EXP 49
57651: PUSH
57652: EMPTY
57653: ST_TO_ADDR
// hackLimit := 3 ;
57654: LD_ADDR_EXP 50
57658: PUSH
57659: LD_INT 3
57661: ST_TO_ADDR
// hackDist := 12 ;
57662: LD_ADDR_EXP 51
57666: PUSH
57667: LD_INT 12
57669: ST_TO_ADDR
// hackCounter := [ ] ;
57670: LD_ADDR_EXP 52
57674: PUSH
57675: EMPTY
57676: ST_TO_ADDR
// end ;
57677: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57678: LD_EXP 47
57682: IFFALSE 57700
57684: PUSH
57685: LD_INT 34
57687: PUSH
57688: LD_INT 99
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PPUSH
57695: CALL_OW 69
57699: AND
57700: IFFALSE 57953
57702: GO 57704
57704: DISABLE
57705: LD_INT 0
57707: PPUSH
57708: PPUSH
// begin enable ;
57709: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57710: LD_ADDR_VAR 0 1
57714: PUSH
57715: LD_INT 34
57717: PUSH
57718: LD_INT 99
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PPUSH
57725: CALL_OW 69
57729: PUSH
57730: FOR_IN
57731: IFFALSE 57951
// begin if not i in hackTanks then
57733: LD_VAR 0 1
57737: PUSH
57738: LD_EXP 48
57742: IN
57743: NOT
57744: IFFALSE 57827
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57746: LD_ADDR_EXP 48
57750: PUSH
57751: LD_EXP 48
57755: PPUSH
57756: LD_EXP 48
57760: PUSH
57761: LD_INT 1
57763: PLUS
57764: PPUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: CALL_OW 1
57774: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57775: LD_ADDR_EXP 49
57779: PUSH
57780: LD_EXP 49
57784: PPUSH
57785: LD_EXP 49
57789: PUSH
57790: LD_INT 1
57792: PLUS
57793: PPUSH
57794: EMPTY
57795: PPUSH
57796: CALL_OW 1
57800: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57801: LD_ADDR_EXP 52
57805: PUSH
57806: LD_EXP 52
57810: PPUSH
57811: LD_EXP 52
57815: PUSH
57816: LD_INT 1
57818: PLUS
57819: PPUSH
57820: EMPTY
57821: PPUSH
57822: CALL_OW 1
57826: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57827: LD_VAR 0 1
57831: PPUSH
57832: CALL_OW 302
57836: NOT
57837: IFFALSE 57850
// begin HackUnlinkAll ( i ) ;
57839: LD_VAR 0 1
57843: PPUSH
57844: CALL 57956 0 1
// continue ;
57848: GO 57730
// end ; HackCheckCapturedStatus ( i ) ;
57850: LD_VAR 0 1
57854: PPUSH
57855: CALL 58401 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57859: LD_ADDR_VAR 0 2
57863: PUSH
57864: LD_INT 81
57866: PUSH
57867: LD_VAR 0 1
57871: PPUSH
57872: CALL_OW 255
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 33
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 91
57893: PUSH
57894: LD_VAR 0 1
57898: PUSH
57899: LD_EXP 51
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 50
57911: PUSH
57912: EMPTY
57913: LIST
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: PPUSH
57921: CALL_OW 69
57925: ST_TO_ADDR
// if not tmp then
57926: LD_VAR 0 2
57930: NOT
57931: IFFALSE 57935
// continue ;
57933: GO 57730
// HackLink ( i , tmp ) ;
57935: LD_VAR 0 1
57939: PPUSH
57940: LD_VAR 0 2
57944: PPUSH
57945: CALL 58092 0 2
// end ;
57949: GO 57730
57951: POP
57952: POP
// end ;
57953: PPOPN 2
57955: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57956: LD_INT 0
57958: PPUSH
57959: PPUSH
57960: PPUSH
// if not hack in hackTanks then
57961: LD_VAR 0 1
57965: PUSH
57966: LD_EXP 48
57970: IN
57971: NOT
57972: IFFALSE 57976
// exit ;
57974: GO 58087
// index := GetElementIndex ( hackTanks , hack ) ;
57976: LD_ADDR_VAR 0 4
57980: PUSH
57981: LD_EXP 48
57985: PPUSH
57986: LD_VAR 0 1
57990: PPUSH
57991: CALL 7793 0 2
57995: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57996: LD_EXP 49
58000: PUSH
58001: LD_VAR 0 4
58005: ARRAY
58006: IFFALSE 58087
// begin for i in hackTanksCaptured [ index ] do
58008: LD_ADDR_VAR 0 3
58012: PUSH
58013: LD_EXP 49
58017: PUSH
58018: LD_VAR 0 4
58022: ARRAY
58023: PUSH
58024: FOR_IN
58025: IFFALSE 58051
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58027: LD_VAR 0 3
58031: PUSH
58032: LD_INT 1
58034: ARRAY
58035: PPUSH
58036: LD_VAR 0 3
58040: PUSH
58041: LD_INT 2
58043: ARRAY
58044: PPUSH
58045: CALL_OW 235
58049: GO 58024
58051: POP
58052: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58053: LD_ADDR_EXP 49
58057: PUSH
58058: LD_EXP 49
58062: PPUSH
58063: LD_VAR 0 4
58067: PPUSH
58068: EMPTY
58069: PPUSH
58070: CALL_OW 1
58074: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58075: LD_VAR 0 1
58079: PPUSH
58080: LD_INT 0
58082: PPUSH
58083: CALL_OW 505
// end ; end ;
58087: LD_VAR 0 2
58091: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58092: LD_INT 0
58094: PPUSH
58095: PPUSH
58096: PPUSH
// if not hack in hackTanks or not vehicles then
58097: LD_VAR 0 1
58101: PUSH
58102: LD_EXP 48
58106: IN
58107: NOT
58108: IFTRUE 58117
58110: PUSH
58111: LD_VAR 0 2
58115: NOT
58116: OR
58117: IFFALSE 58121
// exit ;
58119: GO 58396
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58121: LD_ADDR_VAR 0 2
58125: PUSH
58126: LD_VAR 0 1
58130: PPUSH
58131: LD_VAR 0 2
58135: PPUSH
58136: LD_INT 1
58138: PPUSH
58139: LD_INT 1
58141: PPUSH
58142: CALL 8445 0 4
58146: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58147: LD_ADDR_VAR 0 5
58151: PUSH
58152: LD_EXP 48
58156: PPUSH
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL 7793 0 2
58166: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58167: LD_EXP 49
58171: PUSH
58172: LD_VAR 0 5
58176: ARRAY
58177: PUSH
58178: LD_EXP 50
58182: LESS
58183: IFFALSE 58372
// begin for i := 1 to vehicles do
58185: LD_ADDR_VAR 0 4
58189: PUSH
58190: DOUBLE
58191: LD_INT 1
58193: DEC
58194: ST_TO_ADDR
58195: LD_VAR 0 2
58199: PUSH
58200: FOR_TO
58201: IFFALSE 58370
// begin if hackTanksCaptured [ index ] = hackLimit then
58203: LD_EXP 49
58207: PUSH
58208: LD_VAR 0 5
58212: ARRAY
58213: PUSH
58214: LD_EXP 50
58218: EQUAL
58219: IFFALSE 58223
// break ;
58221: GO 58370
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58223: LD_ADDR_EXP 52
58227: PUSH
58228: LD_EXP 52
58232: PPUSH
58233: LD_VAR 0 5
58237: PPUSH
58238: LD_EXP 52
58242: PUSH
58243: LD_VAR 0 5
58247: ARRAY
58248: PUSH
58249: LD_INT 1
58251: PLUS
58252: PPUSH
58253: CALL_OW 1
58257: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58258: LD_ADDR_EXP 49
58262: PUSH
58263: LD_EXP 49
58267: PPUSH
58268: LD_VAR 0 5
58272: PUSH
58273: LD_EXP 49
58277: PUSH
58278: LD_VAR 0 5
58282: ARRAY
58283: PUSH
58284: LD_INT 1
58286: PLUS
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PPUSH
58292: LD_VAR 0 2
58296: PUSH
58297: LD_VAR 0 4
58301: ARRAY
58302: PUSH
58303: LD_VAR 0 2
58307: PUSH
58308: LD_VAR 0 4
58312: ARRAY
58313: PPUSH
58314: CALL_OW 255
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PPUSH
58323: CALL 8010 0 3
58327: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58328: LD_VAR 0 2
58332: PUSH
58333: LD_VAR 0 4
58337: ARRAY
58338: PPUSH
58339: LD_VAR 0 1
58343: PPUSH
58344: CALL_OW 255
58348: PPUSH
58349: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58353: LD_VAR 0 2
58357: PUSH
58358: LD_VAR 0 4
58362: ARRAY
58363: PPUSH
58364: CALL_OW 141
// end ;
58368: GO 58200
58370: POP
58371: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58372: LD_VAR 0 1
58376: PPUSH
58377: LD_EXP 49
58381: PUSH
58382: LD_VAR 0 5
58386: ARRAY
58387: PUSH
58388: LD_INT 0
58390: PLUS
58391: PPUSH
58392: CALL_OW 505
// end ;
58396: LD_VAR 0 3
58400: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58401: LD_INT 0
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
// if not hack in hackTanks then
58407: LD_VAR 0 1
58411: PUSH
58412: LD_EXP 48
58416: IN
58417: NOT
58418: IFFALSE 58422
// exit ;
58420: GO 58666
// index := GetElementIndex ( hackTanks , hack ) ;
58422: LD_ADDR_VAR 0 4
58426: PUSH
58427: LD_EXP 48
58431: PPUSH
58432: LD_VAR 0 1
58436: PPUSH
58437: CALL 7793 0 2
58441: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58442: LD_ADDR_VAR 0 3
58446: PUSH
58447: DOUBLE
58448: LD_EXP 49
58452: PUSH
58453: LD_VAR 0 4
58457: ARRAY
58458: INC
58459: ST_TO_ADDR
58460: LD_INT 1
58462: PUSH
58463: FOR_DOWNTO
58464: IFFALSE 58640
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58466: LD_ADDR_VAR 0 5
58470: PUSH
58471: LD_EXP 49
58475: PUSH
58476: LD_VAR 0 4
58480: ARRAY
58481: PUSH
58482: LD_VAR 0 3
58486: ARRAY
58487: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58488: LD_VAR 0 5
58492: PUSH
58493: LD_INT 1
58495: ARRAY
58496: PPUSH
58497: CALL_OW 302
58501: NOT
58502: IFTRUE 58530
58504: PUSH
58505: LD_VAR 0 5
58509: PUSH
58510: LD_INT 1
58512: ARRAY
58513: PPUSH
58514: CALL_OW 255
58518: PUSH
58519: LD_VAR 0 1
58523: PPUSH
58524: CALL_OW 255
58528: NONEQUAL
58529: OR
58530: IFFALSE 58638
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58532: LD_VAR 0 5
58536: PUSH
58537: LD_INT 1
58539: ARRAY
58540: PPUSH
58541: CALL_OW 305
58545: IFFALSE 58573
58547: PUSH
58548: LD_VAR 0 5
58552: PUSH
58553: LD_INT 1
58555: ARRAY
58556: PPUSH
58557: CALL_OW 255
58561: PUSH
58562: LD_VAR 0 1
58566: PPUSH
58567: CALL_OW 255
58571: EQUAL
58572: AND
58573: IFFALSE 58597
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58575: LD_VAR 0 5
58579: PUSH
58580: LD_INT 1
58582: ARRAY
58583: PPUSH
58584: LD_VAR 0 5
58588: PUSH
58589: LD_INT 2
58591: ARRAY
58592: PPUSH
58593: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58597: LD_ADDR_EXP 49
58601: PUSH
58602: LD_EXP 49
58606: PPUSH
58607: LD_VAR 0 4
58611: PPUSH
58612: LD_EXP 49
58616: PUSH
58617: LD_VAR 0 4
58621: ARRAY
58622: PPUSH
58623: LD_VAR 0 3
58627: PPUSH
58628: CALL_OW 3
58632: PPUSH
58633: CALL_OW 1
58637: ST_TO_ADDR
// end ; end ;
58638: GO 58463
58640: POP
58641: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58642: LD_VAR 0 1
58646: PPUSH
58647: LD_EXP 49
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PUSH
58658: LD_INT 0
58660: PLUS
58661: PPUSH
58662: CALL_OW 505
// end ;
58666: LD_VAR 0 2
58670: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58671: LD_INT 0
58673: PPUSH
58674: PPUSH
58675: PPUSH
58676: PPUSH
// if not hack in hackTanks then
58677: LD_VAR 0 1
58681: PUSH
58682: LD_EXP 48
58686: IN
58687: NOT
58688: IFFALSE 58692
// exit ;
58690: GO 58777
// index := GetElementIndex ( hackTanks , hack ) ;
58692: LD_ADDR_VAR 0 5
58696: PUSH
58697: LD_EXP 48
58701: PPUSH
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL 7793 0 2
58711: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58712: LD_ADDR_VAR 0 4
58716: PUSH
58717: DOUBLE
58718: LD_INT 1
58720: DEC
58721: ST_TO_ADDR
58722: LD_EXP 49
58726: PUSH
58727: LD_VAR 0 5
58731: ARRAY
58732: PUSH
58733: FOR_TO
58734: IFFALSE 58775
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58736: LD_EXP 49
58740: PUSH
58741: LD_VAR 0 5
58745: ARRAY
58746: PUSH
58747: LD_VAR 0 4
58751: ARRAY
58752: PUSH
58753: LD_INT 1
58755: ARRAY
58756: PUSH
58757: LD_VAR 0 2
58761: EQUAL
58762: IFFALSE 58773
// KillUnit ( vehicle ) ;
58764: LD_VAR 0 2
58768: PPUSH
58769: CALL_OW 66
58773: GO 58733
58775: POP
58776: POP
// end ;
58777: LD_VAR 0 3
58781: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58782: LD_EXP 53
58786: NOT
58787: IFFALSE 58822
58789: GO 58791
58791: DISABLE
// begin initMiner := true ;
58792: LD_ADDR_EXP 53
58796: PUSH
58797: LD_INT 1
58799: ST_TO_ADDR
// minersList := [ ] ;
58800: LD_ADDR_EXP 54
58804: PUSH
58805: EMPTY
58806: ST_TO_ADDR
// minerMinesList := [ ] ;
58807: LD_ADDR_EXP 55
58811: PUSH
58812: EMPTY
58813: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58814: LD_ADDR_EXP 56
58818: PUSH
58819: LD_INT 5
58821: ST_TO_ADDR
// end ;
58822: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58823: LD_EXP 53
58827: IFFALSE 58845
58829: PUSH
58830: LD_INT 34
58832: PUSH
58833: LD_INT 81
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PPUSH
58840: CALL_OW 69
58844: AND
58845: IFFALSE 59308
58847: GO 58849
58849: DISABLE
58850: LD_INT 0
58852: PPUSH
58853: PPUSH
58854: PPUSH
58855: PPUSH
// begin enable ;
58856: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58857: LD_ADDR_VAR 0 1
58861: PUSH
58862: LD_INT 34
58864: PUSH
58865: LD_INT 81
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PPUSH
58872: CALL_OW 69
58876: PUSH
58877: FOR_IN
58878: IFFALSE 58950
// begin if not i in minersList then
58880: LD_VAR 0 1
58884: PUSH
58885: LD_EXP 54
58889: IN
58890: NOT
58891: IFFALSE 58948
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58893: LD_ADDR_EXP 54
58897: PUSH
58898: LD_EXP 54
58902: PPUSH
58903: LD_EXP 54
58907: PUSH
58908: LD_INT 1
58910: PLUS
58911: PPUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: CALL_OW 1
58921: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58922: LD_ADDR_EXP 55
58926: PUSH
58927: LD_EXP 55
58931: PPUSH
58932: LD_EXP 55
58936: PUSH
58937: LD_INT 1
58939: PLUS
58940: PPUSH
58941: EMPTY
58942: PPUSH
58943: CALL_OW 1
58947: ST_TO_ADDR
// end end ;
58948: GO 58877
58950: POP
58951: POP
// for i := minerMinesList downto 1 do
58952: LD_ADDR_VAR 0 1
58956: PUSH
58957: DOUBLE
58958: LD_EXP 55
58962: INC
58963: ST_TO_ADDR
58964: LD_INT 1
58966: PUSH
58967: FOR_DOWNTO
58968: IFFALSE 59306
// begin if IsLive ( minersList [ i ] ) then
58970: LD_EXP 54
58974: PUSH
58975: LD_VAR 0 1
58979: ARRAY
58980: PPUSH
58981: CALL_OW 300
58985: IFFALSE 59013
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58987: LD_EXP 54
58991: PUSH
58992: LD_VAR 0 1
58996: ARRAY
58997: PPUSH
58998: LD_EXP 55
59002: PUSH
59003: LD_VAR 0 1
59007: ARRAY
59008: PPUSH
59009: CALL_OW 505
// if not minerMinesList [ i ] then
59013: LD_EXP 55
59017: PUSH
59018: LD_VAR 0 1
59022: ARRAY
59023: NOT
59024: IFFALSE 59028
// continue ;
59026: GO 58967
// for j := minerMinesList [ i ] downto 1 do
59028: LD_ADDR_VAR 0 2
59032: PUSH
59033: DOUBLE
59034: LD_EXP 55
59038: PUSH
59039: LD_VAR 0 1
59043: ARRAY
59044: INC
59045: ST_TO_ADDR
59046: LD_INT 1
59048: PUSH
59049: FOR_DOWNTO
59050: IFFALSE 59302
// begin side := GetSide ( minersList [ i ] ) ;
59052: LD_ADDR_VAR 0 3
59056: PUSH
59057: LD_EXP 54
59061: PUSH
59062: LD_VAR 0 1
59066: ARRAY
59067: PPUSH
59068: CALL_OW 255
59072: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59073: LD_ADDR_VAR 0 4
59077: PUSH
59078: LD_EXP 55
59082: PUSH
59083: LD_VAR 0 1
59087: ARRAY
59088: PUSH
59089: LD_VAR 0 2
59093: ARRAY
59094: PUSH
59095: LD_INT 1
59097: ARRAY
59098: PPUSH
59099: LD_EXP 55
59103: PUSH
59104: LD_VAR 0 1
59108: ARRAY
59109: PUSH
59110: LD_VAR 0 2
59114: ARRAY
59115: PUSH
59116: LD_INT 2
59118: ARRAY
59119: PPUSH
59120: CALL_OW 428
59124: ST_TO_ADDR
// if not tmp then
59125: LD_VAR 0 4
59129: NOT
59130: IFFALSE 59134
// continue ;
59132: GO 59049
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59134: LD_VAR 0 4
59138: PUSH
59139: LD_INT 81
59141: PUSH
59142: LD_VAR 0 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PPUSH
59151: CALL_OW 69
59155: IN
59156: IFFALSE 59206
59158: PUSH
59159: LD_EXP 55
59163: PUSH
59164: LD_VAR 0 1
59168: ARRAY
59169: PUSH
59170: LD_VAR 0 2
59174: ARRAY
59175: PUSH
59176: LD_INT 1
59178: ARRAY
59179: PPUSH
59180: LD_EXP 55
59184: PUSH
59185: LD_VAR 0 1
59189: ARRAY
59190: PUSH
59191: LD_VAR 0 2
59195: ARRAY
59196: PUSH
59197: LD_INT 2
59199: ARRAY
59200: PPUSH
59201: CALL_OW 458
59205: AND
59206: IFFALSE 59300
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59208: LD_EXP 55
59212: PUSH
59213: LD_VAR 0 1
59217: ARRAY
59218: PUSH
59219: LD_VAR 0 2
59223: ARRAY
59224: PUSH
59225: LD_INT 1
59227: ARRAY
59228: PPUSH
59229: LD_EXP 55
59233: PUSH
59234: LD_VAR 0 1
59238: ARRAY
59239: PUSH
59240: LD_VAR 0 2
59244: ARRAY
59245: PUSH
59246: LD_INT 2
59248: ARRAY
59249: PPUSH
59250: LD_VAR 0 3
59254: PPUSH
59255: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59259: LD_ADDR_EXP 55
59263: PUSH
59264: LD_EXP 55
59268: PPUSH
59269: LD_VAR 0 1
59273: PPUSH
59274: LD_EXP 55
59278: PUSH
59279: LD_VAR 0 1
59283: ARRAY
59284: PPUSH
59285: LD_VAR 0 2
59289: PPUSH
59290: CALL_OW 3
59294: PPUSH
59295: CALL_OW 1
59299: ST_TO_ADDR
// end ; end ;
59300: GO 59049
59302: POP
59303: POP
// end ;
59304: GO 58967
59306: POP
59307: POP
// end ;
59308: PPOPN 4
59310: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59311: LD_INT 0
59313: PPUSH
59314: PPUSH
// result := false ;
59315: LD_ADDR_VAR 0 4
59319: PUSH
59320: LD_INT 0
59322: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59323: LD_VAR 0 1
59327: PPUSH
59328: CALL_OW 264
59332: PUSH
59333: LD_INT 81
59335: EQUAL
59336: NOT
59337: IFFALSE 59341
// exit ;
59339: GO 59585
// index := GetElementIndex ( minersList , unit ) ;
59341: LD_ADDR_VAR 0 5
59345: PUSH
59346: LD_EXP 54
59350: PPUSH
59351: LD_VAR 0 1
59355: PPUSH
59356: CALL 7793 0 2
59360: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59361: LD_EXP 55
59365: PUSH
59366: LD_VAR 0 5
59370: ARRAY
59371: PUSH
59372: LD_EXP 56
59376: GREATEREQUAL
59377: IFFALSE 59381
// exit ;
59379: GO 59585
// ComMoveXY ( unit , x , y ) ;
59381: LD_VAR 0 1
59385: PPUSH
59386: LD_VAR 0 2
59390: PPUSH
59391: LD_VAR 0 3
59395: PPUSH
59396: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59400: LD_INT 35
59402: PPUSH
59403: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59407: LD_VAR 0 1
59411: PPUSH
59412: LD_VAR 0 2
59416: PPUSH
59417: LD_VAR 0 3
59421: PPUSH
59422: CALL 39839 0 3
59426: NOT
59427: IFFALSE 59440
59429: PUSH
59430: LD_VAR 0 1
59434: PPUSH
59435: CALL_OW 314
59439: AND
59440: IFFALSE 59444
// exit ;
59442: GO 59585
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59444: LD_VAR 0 2
59448: PPUSH
59449: LD_VAR 0 3
59453: PPUSH
59454: CALL_OW 428
59458: PUSH
59459: LD_VAR 0 1
59463: EQUAL
59464: IFFALSE 59478
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: CALL_OW 314
59476: NOT
59477: AND
59478: IFFALSE 59400
// PlaySoundXY ( x , y , PlantMine ) ;
59480: LD_VAR 0 2
59484: PPUSH
59485: LD_VAR 0 3
59489: PPUSH
59490: LD_STRING PlantMine
59492: PPUSH
59493: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59497: LD_VAR 0 2
59501: PPUSH
59502: LD_VAR 0 3
59506: PPUSH
59507: LD_VAR 0 1
59511: PPUSH
59512: CALL_OW 255
59516: PPUSH
59517: LD_INT 0
59519: PPUSH
59520: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59524: LD_ADDR_EXP 55
59528: PUSH
59529: LD_EXP 55
59533: PPUSH
59534: LD_VAR 0 5
59538: PUSH
59539: LD_EXP 55
59543: PUSH
59544: LD_VAR 0 5
59548: ARRAY
59549: PUSH
59550: LD_INT 1
59552: PLUS
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PPUSH
59558: LD_VAR 0 2
59562: PUSH
59563: LD_VAR 0 3
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PPUSH
59572: CALL 8010 0 3
59576: ST_TO_ADDR
// result := true ;
59577: LD_ADDR_VAR 0 4
59581: PUSH
59582: LD_INT 1
59584: ST_TO_ADDR
// end ;
59585: LD_VAR 0 4
59589: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59590: LD_INT 0
59592: PPUSH
59593: PPUSH
59594: PPUSH
// if not unit in minersList then
59595: LD_VAR 0 1
59599: PUSH
59600: LD_EXP 54
59604: IN
59605: NOT
59606: IFFALSE 59610
// exit ;
59608: GO 60004
// index := GetElementIndex ( minersList , unit ) ;
59610: LD_ADDR_VAR 0 6
59614: PUSH
59615: LD_EXP 54
59619: PPUSH
59620: LD_VAR 0 1
59624: PPUSH
59625: CALL 7793 0 2
59629: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59630: LD_ADDR_VAR 0 5
59634: PUSH
59635: DOUBLE
59636: LD_EXP 55
59640: PUSH
59641: LD_VAR 0 6
59645: ARRAY
59646: INC
59647: ST_TO_ADDR
59648: LD_INT 1
59650: PUSH
59651: FOR_DOWNTO
59652: IFFALSE 59815
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59654: LD_EXP 55
59658: PUSH
59659: LD_VAR 0 6
59663: ARRAY
59664: PUSH
59665: LD_VAR 0 5
59669: ARRAY
59670: PUSH
59671: LD_INT 1
59673: ARRAY
59674: PUSH
59675: LD_VAR 0 2
59679: EQUAL
59680: IFFALSE 59710
59682: PUSH
59683: LD_EXP 55
59687: PUSH
59688: LD_VAR 0 6
59692: ARRAY
59693: PUSH
59694: LD_VAR 0 5
59698: ARRAY
59699: PUSH
59700: LD_INT 2
59702: ARRAY
59703: PUSH
59704: LD_VAR 0 3
59708: EQUAL
59709: AND
59710: IFFALSE 59813
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59712: LD_EXP 55
59716: PUSH
59717: LD_VAR 0 6
59721: ARRAY
59722: PUSH
59723: LD_VAR 0 5
59727: ARRAY
59728: PUSH
59729: LD_INT 1
59731: ARRAY
59732: PPUSH
59733: LD_EXP 55
59737: PUSH
59738: LD_VAR 0 6
59742: ARRAY
59743: PUSH
59744: LD_VAR 0 5
59748: ARRAY
59749: PUSH
59750: LD_INT 2
59752: ARRAY
59753: PPUSH
59754: LD_VAR 0 1
59758: PPUSH
59759: CALL_OW 255
59763: PPUSH
59764: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59768: LD_ADDR_EXP 55
59772: PUSH
59773: LD_EXP 55
59777: PPUSH
59778: LD_VAR 0 6
59782: PPUSH
59783: LD_EXP 55
59787: PUSH
59788: LD_VAR 0 6
59792: ARRAY
59793: PPUSH
59794: LD_VAR 0 5
59798: PPUSH
59799: CALL_OW 3
59803: PPUSH
59804: CALL_OW 1
59808: ST_TO_ADDR
// exit ;
59809: POP
59810: POP
59811: GO 60004
// end ; end ;
59813: GO 59651
59815: POP
59816: POP
// for i := minerMinesList [ index ] downto 1 do
59817: LD_ADDR_VAR 0 5
59821: PUSH
59822: DOUBLE
59823: LD_EXP 55
59827: PUSH
59828: LD_VAR 0 6
59832: ARRAY
59833: INC
59834: ST_TO_ADDR
59835: LD_INT 1
59837: PUSH
59838: FOR_DOWNTO
59839: IFFALSE 60002
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59841: LD_EXP 55
59845: PUSH
59846: LD_VAR 0 6
59850: ARRAY
59851: PUSH
59852: LD_VAR 0 5
59856: ARRAY
59857: PUSH
59858: LD_INT 1
59860: ARRAY
59861: PPUSH
59862: LD_EXP 55
59866: PUSH
59867: LD_VAR 0 6
59871: ARRAY
59872: PUSH
59873: LD_VAR 0 5
59877: ARRAY
59878: PUSH
59879: LD_INT 2
59881: ARRAY
59882: PPUSH
59883: LD_VAR 0 2
59887: PPUSH
59888: LD_VAR 0 3
59892: PPUSH
59893: CALL_OW 298
59897: PUSH
59898: LD_INT 6
59900: LESS
59901: IFFALSE 60000
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59903: LD_EXP 55
59907: PUSH
59908: LD_VAR 0 6
59912: ARRAY
59913: PUSH
59914: LD_VAR 0 5
59918: ARRAY
59919: PUSH
59920: LD_INT 1
59922: ARRAY
59923: PPUSH
59924: LD_EXP 55
59928: PUSH
59929: LD_VAR 0 6
59933: ARRAY
59934: PUSH
59935: LD_VAR 0 5
59939: ARRAY
59940: PUSH
59941: LD_INT 2
59943: ARRAY
59944: PPUSH
59945: LD_VAR 0 1
59949: PPUSH
59950: CALL_OW 255
59954: PPUSH
59955: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59959: LD_ADDR_EXP 55
59963: PUSH
59964: LD_EXP 55
59968: PPUSH
59969: LD_VAR 0 6
59973: PPUSH
59974: LD_EXP 55
59978: PUSH
59979: LD_VAR 0 6
59983: ARRAY
59984: PPUSH
59985: LD_VAR 0 5
59989: PPUSH
59990: CALL_OW 3
59994: PPUSH
59995: CALL_OW 1
59999: ST_TO_ADDR
// end ; end ;
60000: GO 59838
60002: POP
60003: POP
// end ;
60004: LD_VAR 0 4
60008: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60009: LD_INT 0
60011: PPUSH
60012: PPUSH
60013: PPUSH
60014: PPUSH
60015: PPUSH
60016: PPUSH
60017: PPUSH
60018: PPUSH
60019: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60020: LD_VAR 0 1
60024: PPUSH
60025: CALL_OW 264
60029: PUSH
60030: LD_INT 81
60032: EQUAL
60033: NOT
60034: IFTRUE 60049
60036: PUSH
60037: LD_VAR 0 1
60041: PUSH
60042: LD_EXP 54
60046: IN
60047: NOT
60048: OR
60049: IFFALSE 60053
// exit ;
60051: GO 60379
// index := GetElementIndex ( minersList , unit ) ;
60053: LD_ADDR_VAR 0 6
60057: PUSH
60058: LD_EXP 54
60062: PPUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: CALL 7793 0 2
60072: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60073: LD_ADDR_VAR 0 8
60077: PUSH
60078: LD_EXP 56
60082: PUSH
60083: LD_EXP 55
60087: PUSH
60088: LD_VAR 0 6
60092: ARRAY
60093: MINUS
60094: ST_TO_ADDR
// if not minesFreeAmount then
60095: LD_VAR 0 8
60099: NOT
60100: IFFALSE 60104
// exit ;
60102: GO 60379
// tmp := [ ] ;
60104: LD_ADDR_VAR 0 7
60108: PUSH
60109: EMPTY
60110: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60111: LD_ADDR_VAR 0 5
60115: PUSH
60116: DOUBLE
60117: LD_INT 1
60119: DEC
60120: ST_TO_ADDR
60121: LD_VAR 0 8
60125: PUSH
60126: FOR_TO
60127: IFFALSE 60326
// begin _d := rand ( 0 , 5 ) ;
60129: LD_ADDR_VAR 0 11
60133: PUSH
60134: LD_INT 0
60136: PPUSH
60137: LD_INT 5
60139: PPUSH
60140: CALL_OW 12
60144: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60145: LD_ADDR_VAR 0 12
60149: PUSH
60150: LD_INT 2
60152: PPUSH
60153: LD_INT 6
60155: PPUSH
60156: CALL_OW 12
60160: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60161: LD_ADDR_VAR 0 9
60165: PUSH
60166: LD_VAR 0 2
60170: PPUSH
60171: LD_VAR 0 11
60175: PPUSH
60176: LD_VAR 0 12
60180: PPUSH
60181: CALL_OW 272
60185: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60186: LD_ADDR_VAR 0 10
60190: PUSH
60191: LD_VAR 0 3
60195: PPUSH
60196: LD_VAR 0 11
60200: PPUSH
60201: LD_VAR 0 12
60205: PPUSH
60206: CALL_OW 273
60210: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60211: LD_VAR 0 9
60215: PPUSH
60216: LD_VAR 0 10
60220: PPUSH
60221: CALL_OW 488
60225: IFFALSE 60249
60227: PUSH
60228: LD_VAR 0 9
60232: PUSH
60233: LD_VAR 0 10
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_VAR 0 7
60246: IN
60247: NOT
60248: AND
60249: IFFALSE 60268
60251: PUSH
60252: LD_VAR 0 9
60256: PPUSH
60257: LD_VAR 0 10
60261: PPUSH
60262: CALL_OW 458
60266: NOT
60267: AND
60268: IFFALSE 60310
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60270: LD_ADDR_VAR 0 7
60274: PUSH
60275: LD_VAR 0 7
60279: PPUSH
60280: LD_VAR 0 7
60284: PUSH
60285: LD_INT 1
60287: PLUS
60288: PPUSH
60289: LD_VAR 0 9
60293: PUSH
60294: LD_VAR 0 10
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PPUSH
60303: CALL_OW 1
60307: ST_TO_ADDR
60308: GO 60324
// i := i - 1 ;
60310: LD_ADDR_VAR 0 5
60314: PUSH
60315: LD_VAR 0 5
60319: PUSH
60320: LD_INT 1
60322: MINUS
60323: ST_TO_ADDR
// end ;
60324: GO 60126
60326: POP
60327: POP
// for i in tmp do
60328: LD_ADDR_VAR 0 5
60332: PUSH
60333: LD_VAR 0 7
60337: PUSH
60338: FOR_IN
60339: IFFALSE 60377
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60341: LD_VAR 0 1
60345: PPUSH
60346: LD_VAR 0 5
60350: PUSH
60351: LD_INT 1
60353: ARRAY
60354: PPUSH
60355: LD_VAR 0 5
60359: PUSH
60360: LD_INT 2
60362: ARRAY
60363: PPUSH
60364: CALL 59311 0 3
60368: NOT
60369: IFFALSE 60375
// exit ;
60371: POP
60372: POP
60373: GO 60379
60375: GO 60338
60377: POP
60378: POP
// end ;
60379: LD_VAR 0 4
60383: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60384: LD_INT 0
60386: PPUSH
60387: PPUSH
60388: PPUSH
60389: PPUSH
60390: PPUSH
60391: PPUSH
60392: PPUSH
60393: PPUSH
60394: PPUSH
// if GetClass ( unit ) <> class_sniper then
60395: LD_VAR 0 1
60399: PPUSH
60400: CALL_OW 257
60404: PUSH
60405: LD_INT 5
60407: NONEQUAL
60408: IFFALSE 60412
// exit ;
60410: GO 60882
// dist := 8 ;
60412: LD_ADDR_VAR 0 5
60416: PUSH
60417: LD_INT 8
60419: ST_TO_ADDR
// viewRange := 12 ;
60420: LD_ADDR_VAR 0 8
60424: PUSH
60425: LD_INT 12
60427: ST_TO_ADDR
// side := GetSide ( unit ) ;
60428: LD_ADDR_VAR 0 6
60432: PUSH
60433: LD_VAR 0 1
60437: PPUSH
60438: CALL_OW 255
60442: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60443: LD_INT 61
60445: PPUSH
60446: LD_VAR 0 6
60450: PPUSH
60451: CALL_OW 321
60455: PUSH
60456: LD_INT 2
60458: EQUAL
60459: IFFALSE 60469
// viewRange := 16 ;
60461: LD_ADDR_VAR 0 8
60465: PUSH
60466: LD_INT 16
60468: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60469: LD_VAR 0 1
60473: PPUSH
60474: LD_VAR 0 2
60478: PPUSH
60479: LD_VAR 0 3
60483: PPUSH
60484: CALL_OW 297
60488: PUSH
60489: LD_VAR 0 5
60493: GREATER
60494: IFFALSE 60573
// begin ComMoveXY ( unit , x , y ) ;
60496: LD_VAR 0 1
60500: PPUSH
60501: LD_VAR 0 2
60505: PPUSH
60506: LD_VAR 0 3
60510: PPUSH
60511: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60515: LD_INT 35
60517: PPUSH
60518: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60522: LD_VAR 0 1
60526: PPUSH
60527: LD_VAR 0 2
60531: PPUSH
60532: LD_VAR 0 3
60536: PPUSH
60537: CALL 39839 0 3
60541: NOT
60542: IFFALSE 60546
// exit ;
60544: GO 60882
// until GetDistUnitXY ( unit , x , y ) < dist ;
60546: LD_VAR 0 1
60550: PPUSH
60551: LD_VAR 0 2
60555: PPUSH
60556: LD_VAR 0 3
60560: PPUSH
60561: CALL_OW 297
60565: PUSH
60566: LD_VAR 0 5
60570: LESS
60571: IFFALSE 60515
// end ; ComTurnXY ( unit , x , y ) ;
60573: LD_VAR 0 1
60577: PPUSH
60578: LD_VAR 0 2
60582: PPUSH
60583: LD_VAR 0 3
60587: PPUSH
60588: CALL_OW 118
// repeat if Multiplayer then
60592: LD_OWVAR 4
60596: IFFALSE 60607
// wait ( 35 ) else
60598: LD_INT 35
60600: PPUSH
60601: CALL_OW 67
60605: GO 60614
// wait ( 5 ) ;
60607: LD_INT 5
60609: PPUSH
60610: CALL_OW 67
// _d := GetDir ( unit ) ;
60614: LD_ADDR_VAR 0 11
60618: PUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 254
60628: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60629: LD_ADDR_VAR 0 7
60633: PUSH
60634: LD_VAR 0 1
60638: PPUSH
60639: CALL_OW 250
60643: PPUSH
60644: LD_VAR 0 1
60648: PPUSH
60649: CALL_OW 251
60653: PPUSH
60654: LD_VAR 0 2
60658: PPUSH
60659: LD_VAR 0 3
60663: PPUSH
60664: CALL 42475 0 4
60668: ST_TO_ADDR
// until dir = _d ;
60669: LD_VAR 0 7
60673: PUSH
60674: LD_VAR 0 11
60678: EQUAL
60679: IFFALSE 60592
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60681: LD_ADDR_VAR 0 9
60685: PUSH
60686: LD_VAR 0 1
60690: PPUSH
60691: CALL_OW 250
60695: PPUSH
60696: LD_VAR 0 7
60700: PPUSH
60701: LD_VAR 0 5
60705: PPUSH
60706: CALL_OW 272
60710: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60711: LD_ADDR_VAR 0 10
60715: PUSH
60716: LD_VAR 0 1
60720: PPUSH
60721: CALL_OW 251
60725: PPUSH
60726: LD_VAR 0 7
60730: PPUSH
60731: LD_VAR 0 5
60735: PPUSH
60736: CALL_OW 273
60740: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60741: LD_VAR 0 9
60745: PPUSH
60746: LD_VAR 0 10
60750: PPUSH
60751: CALL_OW 488
60755: NOT
60756: IFFALSE 60760
// exit ;
60758: GO 60882
// ComAnimCustom ( unit , 1 ) ;
60760: LD_VAR 0 1
60764: PPUSH
60765: LD_INT 1
60767: PPUSH
60768: CALL_OW 592
// p := 0 ;
60772: LD_ADDR_VAR 0 12
60776: PUSH
60777: LD_INT 0
60779: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60780: LD_VAR 0 9
60784: PPUSH
60785: LD_VAR 0 10
60789: PPUSH
60790: LD_VAR 0 6
60794: PPUSH
60795: LD_VAR 0 8
60799: PPUSH
60800: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60804: LD_INT 35
60806: PPUSH
60807: CALL_OW 67
// p := Inc ( p ) ;
60811: LD_ADDR_VAR 0 12
60815: PUSH
60816: LD_VAR 0 12
60820: PPUSH
60821: CALL 42431 0 1
60825: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60826: LD_VAR 0 12
60830: PUSH
60831: LD_INT 3
60833: EQUAL
60834: IFTRUE 60848
60836: PUSH
60837: LD_VAR 0 1
60841: PPUSH
60842: CALL_OW 302
60846: NOT
60847: OR
60848: IFTRUE 60861
60850: PUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: CALL_OW 301
60860: OR
60861: IFFALSE 60804
// RemoveSeeing ( _x , _y , side ) ;
60863: LD_VAR 0 9
60867: PPUSH
60868: LD_VAR 0 10
60872: PPUSH
60873: LD_VAR 0 6
60877: PPUSH
60878: CALL_OW 331
// end ; end_of_file
60882: LD_VAR 0 4
60886: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60887: PPOPN 6
60889: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60890: LD_EXP 1
60894: PUSH
60895: LD_INT 4
60897: EQUAL
60898: IFFALSE 60934
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60900: LD_STRING setGameDifficulty(
60902: PUSH
60903: LD_OWVAR 67
60907: STR
60908: PUSH
60909: LD_STRING )
60911: STR
60912: PPUSH
60913: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60917: LD_STRING displayDifficulty(
60919: PUSH
60920: LD_OWVAR 67
60924: STR
60925: PUSH
60926: LD_STRING )
60928: STR
60929: PPUSH
60930: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60934: CALL 60963 0 0
// end ; end_of_file
60938: PPOPN 1
60940: END
// every 0 0$1 do
60941: GO 60943
60943: DISABLE
// begin enable ;
60944: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60945: LD_STRING updateTimer(
60947: PUSH
60948: LD_OWVAR 1
60952: STR
60953: PUSH
60954: LD_STRING );
60956: STR
60957: PPUSH
60958: CALL_OW 559
// end ;
60962: END
// export function SOS_MapStart ( ) ; begin
60963: LD_INT 0
60965: PPUSH
// UpdateFactoryWaypoints ( ) ;
60966: CALL 61897 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60970: CALL 62149 0 0
// ParseMultiDataToLua ( ) ;
60974: CALL 62296 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60978: LD_STRING setSpecLogoNumber(
60980: PUSH
60981: LD_INT 2
60983: STR
60984: PUSH
60985: LD_STRING ,
60987: STR
60988: PUSH
60989: LD_INT 1
60991: STR
60992: PUSH
60993: LD_STRING )
60995: STR
60996: PPUSH
60997: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61001: LD_STRING setSpecLogoNumber(
61003: PUSH
61004: LD_INT 3
61006: STR
61007: PUSH
61008: LD_STRING ,
61010: STR
61011: PUSH
61012: LD_INT 2
61014: STR
61015: PUSH
61016: LD_STRING )
61018: STR
61019: PPUSH
61020: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61024: LD_STRING setSpecLogoNumber(
61026: PUSH
61027: LD_INT 4
61029: STR
61030: PUSH
61031: LD_STRING ,
61033: STR
61034: PUSH
61035: LD_INT 3
61037: STR
61038: PUSH
61039: LD_STRING )
61041: STR
61042: PPUSH
61043: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61047: LD_STRING setSpecLogoNumber(
61049: PUSH
61050: LD_INT 5
61052: STR
61053: PUSH
61054: LD_STRING ,
61056: STR
61057: PUSH
61058: LD_INT 4
61060: STR
61061: PUSH
61062: LD_STRING )
61064: STR
61065: PPUSH
61066: CALL_OW 559
// end ;
61070: LD_VAR 0 1
61074: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61075: LD_INT 0
61077: PPUSH
61078: PPUSH
61079: PPUSH
61080: PPUSH
61081: PPUSH
61082: PPUSH
61083: PPUSH
61084: PPUSH
61085: PPUSH
// for i := 1 to 8 do
61086: LD_ADDR_VAR 0 2
61090: PUSH
61091: DOUBLE
61092: LD_INT 1
61094: DEC
61095: ST_TO_ADDR
61096: LD_INT 8
61098: PUSH
61099: FOR_TO
61100: IFFALSE 61485
// begin if mpSidePositions [ i ] then
61102: LD_EXP 5
61106: PUSH
61107: LD_VAR 0 2
61111: ARRAY
61112: IFFALSE 61483
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61114: LD_ADDR_VAR 0 7
61118: PUSH
61119: LD_INT 22
61121: PUSH
61122: LD_VAR 0 2
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 21
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PPUSH
61145: CALL_OW 69
61149: PPUSH
61150: CALL 5126 0 1
61154: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61155: LD_ADDR_VAR 0 9
61159: PUSH
61160: LD_INT 22
61162: PUSH
61163: LD_VAR 0 2
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 30
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 30
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: LIST
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PPUSH
61204: CALL_OW 69
61208: ST_TO_ADDR
// crates := 0 ;
61209: LD_ADDR_VAR 0 4
61213: PUSH
61214: LD_INT 0
61216: ST_TO_ADDR
// oil := 0 ;
61217: LD_ADDR_VAR 0 5
61221: PUSH
61222: LD_INT 0
61224: ST_TO_ADDR
// sib := 0 ;
61225: LD_ADDR_VAR 0 6
61229: PUSH
61230: LD_INT 0
61232: ST_TO_ADDR
// if bases then
61233: LD_VAR 0 9
61237: IFFALSE 61343
// begin for j in bases do
61239: LD_ADDR_VAR 0 3
61243: PUSH
61244: LD_VAR 0 9
61248: PUSH
61249: FOR_IN
61250: IFFALSE 61341
// begin base := GetBase ( j ) ;
61252: LD_ADDR_VAR 0 8
61256: PUSH
61257: LD_VAR 0 3
61261: PPUSH
61262: CALL_OW 274
61266: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61267: LD_ADDR_VAR 0 4
61271: PUSH
61272: LD_VAR 0 4
61276: PUSH
61277: LD_VAR 0 8
61281: PPUSH
61282: LD_INT 1
61284: PPUSH
61285: CALL_OW 275
61289: PLUS
61290: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61291: LD_ADDR_VAR 0 5
61295: PUSH
61296: LD_VAR 0 5
61300: PUSH
61301: LD_VAR 0 8
61305: PPUSH
61306: LD_INT 2
61308: PPUSH
61309: CALL_OW 275
61313: PLUS
61314: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61315: LD_ADDR_VAR 0 6
61319: PUSH
61320: LD_VAR 0 6
61324: PUSH
61325: LD_VAR 0 8
61329: PPUSH
61330: LD_INT 3
61332: PPUSH
61333: CALL_OW 275
61337: PLUS
61338: ST_TO_ADDR
// end ;
61339: GO 61249
61341: POP
61342: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61343: LD_STRING setSpecText(
61345: PUSH
61346: LD_VAR 0 2
61350: STR
61351: PUSH
61352: LD_STRING ,
61354: STR
61355: PUSH
61356: LD_INT 2
61358: STR
61359: PUSH
61360: LD_STRING ,
61362: STR
61363: PUSH
61364: LD_VAR 0 4
61368: STR
61369: PUSH
61370: LD_STRING )
61372: STR
61373: PPUSH
61374: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61378: LD_STRING setSpecText(
61380: PUSH
61381: LD_VAR 0 2
61385: STR
61386: PUSH
61387: LD_STRING ,
61389: STR
61390: PUSH
61391: LD_INT 3
61393: STR
61394: PUSH
61395: LD_STRING ,
61397: STR
61398: PUSH
61399: LD_VAR 0 5
61403: STR
61404: PUSH
61405: LD_STRING )
61407: STR
61408: PPUSH
61409: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61413: LD_STRING setSpecText(
61415: PUSH
61416: LD_VAR 0 2
61420: STR
61421: PUSH
61422: LD_STRING ,
61424: STR
61425: PUSH
61426: LD_INT 4
61428: STR
61429: PUSH
61430: LD_STRING ,
61432: STR
61433: PUSH
61434: LD_VAR 0 6
61438: STR
61439: PUSH
61440: LD_STRING )
61442: STR
61443: PPUSH
61444: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61448: LD_STRING setSpecText(
61450: PUSH
61451: LD_VAR 0 2
61455: STR
61456: PUSH
61457: LD_STRING ,
61459: STR
61460: PUSH
61461: LD_INT 5
61463: STR
61464: PUSH
61465: LD_STRING ,
61467: STR
61468: PUSH
61469: LD_VAR 0 7
61473: STR
61474: PUSH
61475: LD_STRING )
61477: STR
61478: PPUSH
61479: CALL_OW 559
// end ; end ;
61483: GO 61099
61485: POP
61486: POP
// end ;
61487: LD_VAR 0 1
61491: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61492: LD_INT 2
61494: PUSH
61495: LD_INT 30
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 30
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: PPUSH
61520: CALL_OW 69
61524: IFFALSE 61534
61526: GO 61528
61528: DISABLE
// begin enable ;
61529: ENABLE
// UpdateSpectatorBar ;
61530: CALL 61075 0 0
// end ;
61534: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61535: LD_INT 0
61537: PPUSH
// end ;
61538: LD_VAR 0 12
61542: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61543: LD_INT 0
61545: PPUSH
61546: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61547: LD_VAR 0 1
61551: NOT
61552: IFTRUE 61571
61554: PUSH
61555: LD_VAR 0 2
61559: PPUSH
61560: LD_VAR 0 3
61564: PPUSH
61565: CALL_OW 488
61569: NOT
61570: OR
61571: IFTRUE 61606
61573: PUSH
61574: LD_VAR 0 1
61578: PPUSH
61579: CALL_OW 266
61583: PUSH
61584: LD_INT 3
61586: NONEQUAL
61587: IFFALSE 61605
61589: PUSH
61590: LD_VAR 0 1
61594: PPUSH
61595: CALL_OW 247
61599: PUSH
61600: LD_INT 1
61602: EQUAL
61603: NOT
61604: AND
61605: OR
61606: IFFALSE 61610
// exit ;
61608: GO 61892
// if GetType ( factory ) = unit_human then
61610: LD_VAR 0 1
61614: PPUSH
61615: CALL_OW 247
61619: PUSH
61620: LD_INT 1
61622: EQUAL
61623: IFFALSE 61640
// factory := IsInUnit ( factory ) ;
61625: LD_ADDR_VAR 0 1
61629: PUSH
61630: LD_VAR 0 1
61634: PPUSH
61635: CALL_OW 310
61639: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61640: LD_VAR 0 1
61644: PPUSH
61645: CALL_OW 266
61649: PUSH
61650: LD_INT 3
61652: NONEQUAL
61653: IFFALSE 61657
// exit ;
61655: GO 61892
// for i := 1 to Count ( factoryWaypoints ) do
61657: LD_ADDR_VAR 0 5
61661: PUSH
61662: DOUBLE
61663: LD_INT 1
61665: DEC
61666: ST_TO_ADDR
61667: LD_EXP 57
61671: PPUSH
61672: CALL 5126 0 1
61676: PUSH
61677: FOR_TO
61678: IFFALSE 61840
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61680: LD_VAR 0 2
61684: PPUSH
61685: LD_VAR 0 3
61689: PPUSH
61690: CALL_OW 428
61694: PUSH
61695: LD_EXP 57
61699: PUSH
61700: LD_VAR 0 5
61704: ARRAY
61705: PUSH
61706: LD_INT 2
61708: ARRAY
61709: EQUAL
61710: IFFALSE 61742
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61712: LD_ADDR_EXP 57
61716: PUSH
61717: LD_EXP 57
61721: PPUSH
61722: LD_VAR 0 5
61726: PPUSH
61727: CALL_OW 3
61731: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61732: CALL 61897 0 0
// exit ;
61736: POP
61737: POP
61738: GO 61892
// end else
61740: GO 61838
// if factory = factoryWaypoints [ i ] [ 2 ] then
61742: LD_VAR 0 1
61746: PUSH
61747: LD_EXP 57
61751: PUSH
61752: LD_VAR 0 5
61756: ARRAY
61757: PUSH
61758: LD_INT 2
61760: ARRAY
61761: EQUAL
61762: IFFALSE 61838
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61764: LD_ADDR_EXP 57
61768: PUSH
61769: LD_EXP 57
61773: PPUSH
61774: LD_VAR 0 5
61778: PPUSH
61779: CALL_OW 3
61783: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61784: LD_ADDR_EXP 57
61788: PUSH
61789: LD_EXP 57
61793: PPUSH
61794: LD_VAR 0 1
61798: PPUSH
61799: CALL_OW 255
61803: PUSH
61804: LD_VAR 0 1
61808: PUSH
61809: LD_VAR 0 2
61813: PUSH
61814: LD_VAR 0 3
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: PPUSH
61825: CALL 41058 0 2
61829: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61830: CALL 61897 0 0
// exit ;
61834: POP
61835: POP
61836: GO 61892
// end ; end ;
61838: GO 61677
61840: POP
61841: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61842: LD_ADDR_EXP 57
61846: PUSH
61847: LD_EXP 57
61851: PPUSH
61852: LD_VAR 0 1
61856: PPUSH
61857: CALL_OW 255
61861: PUSH
61862: LD_VAR 0 1
61866: PUSH
61867: LD_VAR 0 2
61871: PUSH
61872: LD_VAR 0 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: PPUSH
61883: CALL 41058 0 2
61887: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61888: CALL 61897 0 0
// end ;
61892: LD_VAR 0 4
61896: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61897: LD_INT 0
61899: PPUSH
61900: PPUSH
61901: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61902: LD_STRING resetFactoryWaypoint();
61904: PPUSH
61905: CALL_OW 559
// if factoryWaypoints then
61909: LD_EXP 57
61913: IFFALSE 62034
// begin list := factoryWaypoints ;
61915: LD_ADDR_VAR 0 3
61919: PUSH
61920: LD_EXP 57
61924: ST_TO_ADDR
// for i := 1 to list do
61925: LD_ADDR_VAR 0 2
61929: PUSH
61930: DOUBLE
61931: LD_INT 1
61933: DEC
61934: ST_TO_ADDR
61935: LD_VAR 0 3
61939: PUSH
61940: FOR_TO
61941: IFFALSE 62032
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61943: LD_STRING setFactoryWaypointXY(
61945: PUSH
61946: LD_VAR 0 3
61950: PUSH
61951: LD_VAR 0 2
61955: ARRAY
61956: PUSH
61957: LD_INT 1
61959: ARRAY
61960: STR
61961: PUSH
61962: LD_STRING ,
61964: STR
61965: PUSH
61966: LD_VAR 0 3
61970: PUSH
61971: LD_VAR 0 2
61975: ARRAY
61976: PUSH
61977: LD_INT 2
61979: ARRAY
61980: STR
61981: PUSH
61982: LD_STRING ,
61984: STR
61985: PUSH
61986: LD_VAR 0 3
61990: PUSH
61991: LD_VAR 0 2
61995: ARRAY
61996: PUSH
61997: LD_INT 3
61999: ARRAY
62000: STR
62001: PUSH
62002: LD_STRING ,
62004: STR
62005: PUSH
62006: LD_VAR 0 3
62010: PUSH
62011: LD_VAR 0 2
62015: ARRAY
62016: PUSH
62017: LD_INT 4
62019: ARRAY
62020: STR
62021: PUSH
62022: LD_STRING )
62024: STR
62025: PPUSH
62026: CALL_OW 559
62030: GO 61940
62032: POP
62033: POP
// end ; end ;
62034: LD_VAR 0 1
62038: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62039: LD_INT 0
62041: PPUSH
// if HexInfo ( x , y ) = warehouse then
62042: LD_VAR 0 2
62046: PPUSH
62047: LD_VAR 0 3
62051: PPUSH
62052: CALL_OW 428
62056: PUSH
62057: LD_VAR 0 1
62061: EQUAL
62062: IFFALSE 62089
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62064: LD_ADDR_EXP 59
62068: PUSH
62069: LD_EXP 59
62073: PPUSH
62074: LD_VAR 0 1
62078: PPUSH
62079: LD_INT 0
62081: PPUSH
62082: CALL_OW 1
62086: ST_TO_ADDR
62087: GO 62140
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62089: LD_ADDR_EXP 59
62093: PUSH
62094: LD_EXP 59
62098: PPUSH
62099: LD_VAR 0 1
62103: PPUSH
62104: LD_VAR 0 1
62108: PPUSH
62109: CALL_OW 255
62113: PUSH
62114: LD_VAR 0 1
62118: PUSH
62119: LD_VAR 0 2
62123: PUSH
62124: LD_VAR 0 3
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: PPUSH
62135: CALL_OW 1
62139: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62140: CALL 62149 0 0
// end ;
62144: LD_VAR 0 4
62148: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62149: LD_INT 0
62151: PPUSH
62152: PPUSH
62153: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62154: LD_STRING resetWarehouseGatheringPoints();
62156: PPUSH
62157: CALL_OW 559
// if warehouseGatheringPoints then
62161: LD_EXP 59
62165: IFFALSE 62291
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62167: LD_ADDR_VAR 0 3
62171: PUSH
62172: LD_EXP 59
62176: PPUSH
62177: CALL 44992 0 1
62181: ST_TO_ADDR
// for i := 1 to list do
62182: LD_ADDR_VAR 0 2
62186: PUSH
62187: DOUBLE
62188: LD_INT 1
62190: DEC
62191: ST_TO_ADDR
62192: LD_VAR 0 3
62196: PUSH
62197: FOR_TO
62198: IFFALSE 62289
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62200: LD_STRING setWarehouseGatheringPointXY(
62202: PUSH
62203: LD_VAR 0 3
62207: PUSH
62208: LD_VAR 0 2
62212: ARRAY
62213: PUSH
62214: LD_INT 1
62216: ARRAY
62217: STR
62218: PUSH
62219: LD_STRING ,
62221: STR
62222: PUSH
62223: LD_VAR 0 3
62227: PUSH
62228: LD_VAR 0 2
62232: ARRAY
62233: PUSH
62234: LD_INT 2
62236: ARRAY
62237: STR
62238: PUSH
62239: LD_STRING ,
62241: STR
62242: PUSH
62243: LD_VAR 0 3
62247: PUSH
62248: LD_VAR 0 2
62252: ARRAY
62253: PUSH
62254: LD_INT 3
62256: ARRAY
62257: STR
62258: PUSH
62259: LD_STRING ,
62261: STR
62262: PUSH
62263: LD_VAR 0 3
62267: PUSH
62268: LD_VAR 0 2
62272: ARRAY
62273: PUSH
62274: LD_INT 4
62276: ARRAY
62277: STR
62278: PUSH
62279: LD_STRING )
62281: STR
62282: PPUSH
62283: CALL_OW 559
62287: GO 62197
62289: POP
62290: POP
// end ; end ;
62291: LD_VAR 0 1
62295: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62296: LD_INT 0
62298: PPUSH
62299: PPUSH
// if not mpSidePositions then
62300: LD_EXP 5
62304: NOT
62305: IFFALSE 62309
// exit ;
62307: GO 62380
// result :=  ;
62309: LD_ADDR_VAR 0 1
62313: PUSH
62314: LD_STRING 
62316: ST_TO_ADDR
// for i := 1 to 8 do
62317: LD_ADDR_VAR 0 2
62321: PUSH
62322: DOUBLE
62323: LD_INT 1
62325: DEC
62326: ST_TO_ADDR
62327: LD_INT 8
62329: PUSH
62330: FOR_TO
62331: IFFALSE 62361
// begin result := result & mpSidePositions [ i ] & ; ;
62333: LD_ADDR_VAR 0 1
62337: PUSH
62338: LD_VAR 0 1
62342: PUSH
62343: LD_EXP 5
62347: PUSH
62348: LD_VAR 0 2
62352: ARRAY
62353: STR
62354: PUSH
62355: LD_STRING ;
62357: STR
62358: ST_TO_ADDR
// end ;
62359: GO 62330
62361: POP
62362: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62363: LD_STRING setMultiplayerRealPosition("
62365: PUSH
62366: LD_VAR 0 1
62370: STR
62371: PUSH
62372: LD_STRING ");
62374: STR
62375: PPUSH
62376: CALL_OW 559
// end ;
62380: LD_VAR 0 1
62384: RET
