
On ArtifactLoaded(cargo, artifact) do
var i, j;
begin
if artifact_get then
   exit;

MultiplayerEvent_ArtifactCaptured(GetSide(cargo));
artifact_get := true;
End;

On UnitDestroyed_Extra(un, killerSide, killerUnit) do
begin
if GetSide(un) <> side_bot then
   exit;

if not un in [Saliba, Gensher, Shariff] then
   MultiplayerEvent_UnitKilled(un, killerSide, false)
else
   MultiplayerEvent_UnitKilled(un, killerSide, Multiplayer_GetCondition(5));
End;

On UnitDestroyed(un) do
var i, side, base, chassis, engine, control, weapon, tmp, factory, btype;
begin
SOS_UnitDestroyed(un);

side := GetSide(un);

if multi_sides[side] then
   if GetType(un) = unit_human then
      MultiplayerEvent_HumanLost(side);

if side = side_bot then
   begin
   if GetType(un) = unit_building then
      begin
      base := 0;

      for i := 1 to Count(arAreas) do
          if IsInArea(un, arAreas[i]) then
             begin
             base := i;
             break;
             end;

      if not base then
         exit;

      btype := GetBType(un);

      if btype = b_barracks then
         btype := b_armoury;

      if btype = b_factory then
         btype := b_workshop;

      if btype in [b_lab_full, b_lab_half] then
         btype := b_lab;

      arBuildings := Replace(arBuildings, arBuildings + 1, [base, [btype, GetX(un), GetY(un), GetDir(un)]]);
      end;

   if GetType(un) = unit_vehicle then
      begin
      // CheckByIndex(array, index, value, indexColumn);
      base := CheckByIndex(arVehicles, 2, un, 1);

      if not base then
         exit;

      factory := arFactories[base];

      if not factory then
         exit;

      chassis := GetChassis(un);
      engine := GetEngine(un);
      //control := GetControl(un);
      weapon := GetWeapon(un);

      control := control_remote;

      tmp := Produce(factory, chassis, engine, control, weapon);

      arConstructList := Replace(arConstructList, arConstructList + 1, [base, tmp]);
      end;
   end;

if multi_commanders and multi_custom_commanders and not multi_loosers[side] then
   if un in multi_commanders then
      begin
      if side = your_side then
         Multiplayer_Loose_Message;

      multi_loosers := Replace(multi_loosers, side, 1);
      multi_commanders := multi_commanders diff un;
      Multiplayer_Reside(side);
      end;
End;

On BuildingComplete(building) do
var i, j, side, base, btype;
begin
side := GetSide(building);

if multi_sides[side] then
   MultiplayerEvent_BuildingCompleted(side, GetBType(building));

if GetBType(building) = b_depot and not multi_sides[side] and base_names then
   begin
   SetBName(building, base_names[1]);
   base_names := Delete(base_names, 1);
   end;

if side = side_bot then
   begin
   base := 0;

   for i := 1 to Count(arAreas) do
       if IsInArea(building, arAreas[i]) then
          begin
          base := i;
          break;
          end;

   if not base then
      exit;

   for i := 1 to Count(arBuildings) do
       if arBuildings[i][1][1] = base then
          begin
          arBuildings := Delete(arBuildings, i);
          break;
          end;

   btype := GetBType(building);

   case btype of
        b_armoury: ComUpgrade(building);
        b_workshop: ComUpgrade(building);
        b_lab: begin
               AddComUpgradeLab(building, b_lab_weapon);
               AddComUpgradeLab(building, b_lab_opto);
               end;
        end;
   end;
End;


On VehicleConstructed(vehicle, factory) do
var i, side, tmp, base, amount;
begin
SOS_VehicleConstructed(vehicle, factory);

side := GetSide(vehicle);

if multi_sides[side] then
   MultiplayerEvent_Produced(side);

if side_bot = side then
   begin
   base := 0;

   for i := 1 to Count(arFactories) do
       if arFactories[i] = factory then
          begin
          base := i;
          break;
          end;

   if not base then
      exit;

   if arVehiclesCounter[base] > CheckByIndex(arVehicles, 1, base, 2) or GetBType(vehicle) in [ar_cargo_bay, ar_crane] then
      arVehicles := Join(arVehicles, [base, vehicle])
   else
      arVehiclesAtttackers := Join(arVehiclesAtttackers, [base, vehicle]);
   end;
End;

On EvacuateVehicle(driver, veh, p1, p2) do
begin
if GetTag(driver) = tMech then
   SetTag(driver, 0);
End;

On ResearchComplete(tech, lab) do
begin
if GetSide(lab) = side_bot then
   if tech in arTech then
      arTech := arTech diff tech;
End;

On UnitKamikazed(un) do
begin
SOS_UnitKamikazed(un);
End;
