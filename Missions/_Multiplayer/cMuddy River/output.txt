// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1697 0 1
  44: PPUSH
  45: CALL 5280 0 1
// Multiplayer_Start ;
  49: CALL 3602 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3718 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4216 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// mpGameType := GameTypeCoop ;
 330: LD_ADDR_EXP 30
 334: PUSH
 335: LD_INT 4
 337: ST_TO_ADDR
// multi_settings_counter := 6 ;
 338: LD_ADDR_EXP 18
 342: PUSH
 343: LD_INT 6
 345: ST_TO_ADDR
// if Multiplayer then
 346: LD_OWVAR 4
 350: IFFALSE 530
// begin your_side := mp_player_side ;
 352: LD_ADDR_OWVAR 2
 356: PUSH
 357: LD_OWVAR 7
 361: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 362: LD_ADDR_EXP 6
 366: PUSH
 367: LD_OWVAR 6
 371: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 372: LD_ADDR_EXP 7
 376: PUSH
 377: LD_OWVAR 17
 381: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_OWVAR 15
 391: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 392: LD_ADDR_EXP 9
 396: PUSH
 397: LD_OWVAR 16
 401: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 402: LD_ADDR_EXP 10
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: LIST
 411: ST_TO_ADDR
// for i in mp_teams do
 412: LD_ADDR_VAR 0 2
 416: PUSH
 417: LD_OWVAR 12
 421: PUSH
 422: FOR_IN
 423: IFFALSE 466
// if i then
 425: LD_VAR 0 2
 429: IFFALSE 464
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 431: LD_ADDR_EXP 10
 435: PUSH
 436: LD_EXP 10
 440: PPUSH
 441: LD_INT 1
 443: PPUSH
 444: LD_EXP 10
 448: PUSH
 449: LD_INT 1
 451: ARRAY
 452: PUSH
 453: LD_VAR 0 2
 457: UNION
 458: PPUSH
 459: CALL_OW 1
 463: ST_TO_ADDR
 464: GO 422
 466: POP
 467: POP
// for i := 1 to multi_settings_counter do
 468: LD_ADDR_VAR 0 2
 472: PUSH
 473: DOUBLE
 474: LD_INT 1
 476: DEC
 477: ST_TO_ADDR
 478: LD_EXP 18
 482: PUSH
 483: FOR_TO
 484: IFFALSE 526
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 486: LD_ADDR_EXP 17
 490: PUSH
 491: LD_EXP 17
 495: PPUSH
 496: LD_EXP 17
 500: PUSH
 501: LD_INT 1
 503: PLUS
 504: PPUSH
 505: LD_VAR 0 2
 509: PPUSH
 510: CALL_OW 426
 514: PUSH
 515: LD_INT 1
 517: PLUS
 518: PPUSH
 519: CALL_OW 1
 523: ST_TO_ADDR
 524: GO 483
 526: POP
 527: POP
// end else
 528: GO 712
// begin your_side := 1 ;
 530: LD_ADDR_OWVAR 2
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_gametype := 1 ;
 538: LD_ADDR_EXP 6
 542: PUSH
 543: LD_INT 1
 545: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 546: LD_ADDR_EXP 7
 550: PUSH
 551: LD_INT 2
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 585: LD_ADDR_EXP 8
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 624: LD_ADDR_EXP 9
 628: PUSH
 629: LD_INT 1
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 1
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: LD_INT 0
 643: PUSH
 644: LD_INT 0
 646: PUSH
 647: LD_INT 0
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 663: LD_ADDR_EXP 10
 667: PUSH
 668: LD_INT 1
 670: PUSH
 671: LD_INT 3
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: EMPTY
 679: LIST
 680: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 681: LD_ADDR_EXP 17
 685: PUSH
 686: LD_INT 2
 688: PUSH
 689: LD_INT 2
 691: PUSH
 692: LD_INT 1
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: LD_INT 3
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
 712: LD_ADDR_EXP 31
 716: PUSH
 717: LD_EXP 7
 721: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 722: LD_ADDR_EXP 11
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: LD_INT 0
 738: PUSH
 739: LD_INT 0
 741: PUSH
 742: LD_INT 0
 744: PUSH
 745: LD_INT 0
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 761: LD_ADDR_EXP 14
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 0
 780: PUSH
 781: LD_INT 0
 783: PUSH
 784: LD_INT 0
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 800: LD_ADDR_EXP 25
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: LD_INT 0
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 0
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: LD_INT 0
 825: PUSH
 826: LD_INT 0
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: LIST
 838: ST_TO_ADDR
// multi_teamgame := true ;
 839: LD_ADDR_EXP 15
 843: PUSH
 844: LD_INT 1
 846: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 847: LD_ADDR_EXP 13
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: ST_TO_ADDR
// multi_custom_commanders := true ;
 858: LD_ADDR_EXP 16
 862: PUSH
 863: LD_INT 1
 865: ST_TO_ADDR
// multi_commanders := [ ] ;
 866: LD_ADDR_EXP 24
 870: PUSH
 871: EMPTY
 872: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 873: LD_ADDR_EXP 27
 877: PUSH
 878: EMPTY
 879: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 880: LD_ADDR_EXP 28
 884: PUSH
 885: LD_INT 0
 887: ST_TO_ADDR
// multi_players_amount := 0 ;
 888: LD_ADDR_EXP 26
 892: PUSH
 893: LD_INT 0
 895: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 896: LD_ADDR_EXP 12
 900: PUSH
 901: LD_INT 9
 903: PUSH
 904: LD_INT 8
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 27
 913: PUSH
 914: LD_INT 26
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: LD_INT 29
 923: PUSH
 924: LD_INT 28
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// for i := 1 to 8 do
 936: LD_ADDR_VAR 0 2
 940: PUSH
 941: DOUBLE
 942: LD_INT 1
 944: DEC
 945: ST_TO_ADDR
 946: LD_INT 8
 948: PUSH
 949: FOR_TO
 950: IFFALSE 1279
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 952: LD_VAR 0 2
 956: PPUSH
 957: CALL_OW 530
 961: IFFALSE 1119
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 963: LD_ADDR_EXP 11
 967: PUSH
 968: LD_EXP 11
 972: PPUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 1
 980: PPUSH
 981: CALL_OW 1
 985: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 986: LD_ADDR_EXP 9
 990: PUSH
 991: LD_EXP 9
 995: PPUSH
 996: LD_VAR 0 2
1000: PPUSH
1001: LD_INT 0
1003: PPUSH
1004: CALL_OW 1
1008: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1009: LD_ADDR_EXP 7
1013: PUSH
1014: LD_EXP 7
1018: PPUSH
1019: LD_VAR 0 2
1023: PPUSH
1024: LD_INT 0
1026: PPUSH
1027: CALL_OW 1
1031: ST_TO_ADDR
// for j = 1 to multi_teams do
1032: LD_ADDR_VAR 0 3
1036: PUSH
1037: DOUBLE
1038: LD_INT 1
1040: DEC
1041: ST_TO_ADDR
1042: LD_EXP 10
1046: PUSH
1047: FOR_TO
1048: IFFALSE 1117
// begin if i in multi_teams [ j ] then
1050: LD_VAR 0 2
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: IN
1066: IFFALSE 1115
// begin tmp := multi_teams [ j ] diff i ;
1068: LD_ADDR_VAR 0 5
1072: PUSH
1073: LD_EXP 10
1077: PUSH
1078: LD_VAR 0 3
1082: ARRAY
1083: PUSH
1084: LD_VAR 0 2
1088: DIFF
1089: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1090: LD_ADDR_EXP 10
1094: PUSH
1095: LD_EXP 10
1099: PPUSH
1100: LD_VAR 0 3
1104: PPUSH
1105: LD_VAR 0 5
1109: PPUSH
1110: CALL_OW 1
1114: ST_TO_ADDR
// end ; end ;
1115: GO 1047
1117: POP
1118: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1119: LD_EXP 9
1123: PUSH
1124: LD_VAR 0 2
1128: ARRAY
1129: PUSH
1130: LD_EXP 9
1134: PUSH
1135: LD_VAR 0 2
1139: ARRAY
1140: PUSH
1141: LD_EXP 13
1145: IN
1146: NOT
1147: AND
1148: IFFALSE 1189
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1150: LD_ADDR_EXP 9
1154: PUSH
1155: LD_EXP 9
1159: PPUSH
1160: LD_VAR 0 2
1164: PPUSH
1165: LD_EXP 13
1169: PUSH
1170: LD_INT 1
1172: PPUSH
1173: LD_EXP 13
1177: PPUSH
1178: CALL_OW 12
1182: ARRAY
1183: PPUSH
1184: CALL_OW 1
1188: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1189: LD_EXP 9
1193: PUSH
1194: LD_VAR 0 2
1198: ARRAY
1199: NOT
1200: PUSH
1201: LD_EXP 7
1205: PUSH
1206: LD_VAR 0 2
1210: ARRAY
1211: NOT
1212: AND
1213: PUSH
1214: LD_EXP 11
1218: PUSH
1219: LD_VAR 0 2
1223: ARRAY
1224: NOT
1225: AND
1226: IFFALSE 1251
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1228: LD_ADDR_EXP 14
1232: PUSH
1233: LD_EXP 14
1237: PPUSH
1238: LD_VAR 0 2
1242: PPUSH
1243: LD_INT 1
1245: PPUSH
1246: CALL_OW 1
1250: ST_TO_ADDR
// if multi_sides [ i ] then
1251: LD_EXP 7
1255: PUSH
1256: LD_VAR 0 2
1260: ARRAY
1261: IFFALSE 1277
// multi_players_amount := multi_players_amount + 1 ;
1263: LD_ADDR_EXP 26
1267: PUSH
1268: LD_EXP 26
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: ST_TO_ADDR
// end ;
1277: GO 949
1279: POP
1280: POP
// for i in multi_teams do
1281: LD_ADDR_VAR 0 2
1285: PUSH
1286: LD_EXP 10
1290: PUSH
1291: FOR_IN
1292: IFFALSE 1400
// begin for j = 2 to i do
1294: LD_ADDR_VAR 0 3
1298: PUSH
1299: DOUBLE
1300: LD_INT 2
1302: DEC
1303: ST_TO_ADDR
1304: LD_VAR 0 2
1308: PUSH
1309: FOR_TO
1310: IFFALSE 1396
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1312: LD_VAR 0 2
1316: PUSH
1317: LD_VAR 0 3
1321: ARRAY
1322: PPUSH
1323: LD_VAR 0 2
1327: PUSH
1328: LD_INT 1
1330: ARRAY
1331: PPUSH
1332: CALL_OW 343
// for x = 1 to j - 1 do
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_VAR 0 3
1350: PUSH
1351: LD_INT 1
1353: MINUS
1354: PUSH
1355: FOR_TO
1356: IFFALSE 1392
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1358: LD_VAR 0 2
1362: PUSH
1363: LD_VAR 0 3
1367: ARRAY
1368: PPUSH
1369: LD_VAR 0 2
1373: PUSH
1374: LD_VAR 0 4
1378: ARRAY
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: CALL_OW 80
1390: GO 1355
1392: POP
1393: POP
// end ;
1394: GO 1309
1396: POP
1397: POP
// end ;
1398: GO 1291
1400: POP
1401: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1402: LD_ADDR_OWVAR 67
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: LD_INT 2
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 17
1425: PUSH
1426: LD_INT 1
1428: ARRAY
1429: ARRAY
1430: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1431: LD_ADDR_EXP 19
1435: PUSH
1436: LD_INT 9
1438: PUSH
1439: LD_INT 12
1441: PUSH
1442: LD_INT 15
1444: PUSH
1445: LD_INT 18
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: PUSH
1454: LD_EXP 17
1458: PUSH
1459: LD_INT 2
1461: ARRAY
1462: ARRAY
1463: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1464: LD_ADDR_EXP 20
1468: PUSH
1469: LD_INT 5
1471: PUSH
1472: LD_INT 6
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_INT 10
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_EXP 17
1491: PUSH
1492: LD_INT 3
1494: ARRAY
1495: ARRAY
1496: ST_TO_ADDR
// multi_crates_spawn := [ [ 12000 , 0 0$32 ] , [ 15000 , 0 0$22 ] , [ 20000 , 0 0$14 ] , [ 24000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1497: LD_ADDR_EXP 21
1501: PUSH
1502: LD_INT 12000
1504: PUSH
1505: LD_INT 1120
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 15000
1514: PUSH
1515: LD_INT 770
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 20000
1524: PUSH
1525: LD_INT 490
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 24000
1534: PUSH
1535: LD_INT 420
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_EXP 17
1552: PUSH
1553: LD_INT 4
1555: ARRAY
1556: ARRAY
1557: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1558: LD_ADDR_EXP 22
1562: PUSH
1563: LD_INT 6
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 10
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_EXP 17
1581: PUSH
1582: LD_INT 5
1584: ARRAY
1585: ARRAY
1586: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1587: LD_ADDR_EXP 23
1591: PUSH
1592: LD_INT 0
1594: PUSH
1595: LD_INT 1
1597: PUSH
1598: LD_INT 2
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: PUSH
1606: LD_EXP 17
1610: PUSH
1611: LD_INT 6
1613: ARRAY
1614: ARRAY
1615: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1616: LD_ADDR_EXP 29
1620: PUSH
1621: LD_INT 31500
1623: PUSH
1624: LD_INT 37800
1626: PUSH
1627: LD_INT 44100
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: ST_TO_ADDR
// if multi_ape_amount then
1641: LD_EXP 22
1645: IFFALSE 1692
// begin for i := 1 to multi_ape_amount do
1647: LD_ADDR_VAR 0 2
1651: PUSH
1652: DOUBLE
1653: LD_INT 1
1655: DEC
1656: ST_TO_ADDR
1657: LD_EXP 22
1661: PUSH
1662: FOR_TO
1663: IFFALSE 1690
// begin PrepareApeman ( - 5 ) ;
1665: LD_INT 5
1667: NEG
1668: PPUSH
1669: CALL 50992 0 1
// PlaceUnitArea ( CreateHuman , ape_area , false ) ;
1673: CALL_OW 44
1677: PPUSH
1678: LD_INT 50
1680: PPUSH
1681: LD_INT 0
1683: PPUSH
1684: CALL_OW 49
// end ;
1688: GO 1662
1690: POP
1691: POP
// end ; end ;
1692: LD_VAR 0 1
1696: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1697: LD_INT 0
1699: PPUSH
1700: PPUSH
// if not multi_sides [ 2 ] then
1701: LD_EXP 7
1705: PUSH
1706: LD_INT 2
1708: ARRAY
1709: NOT
1710: IFFALSE 1724
// begin result := preferSide ;
1712: LD_ADDR_VAR 0 2
1716: PUSH
1717: LD_VAR 0 1
1721: ST_TO_ADDR
// exit ;
1722: GO 1771
// end ; for i := 1 to 8 do
1724: LD_ADDR_VAR 0 3
1728: PUSH
1729: DOUBLE
1730: LD_INT 1
1732: DEC
1733: ST_TO_ADDR
1734: LD_INT 8
1736: PUSH
1737: FOR_TO
1738: IFFALSE 1769
// if not multi_sides [ i ] then
1740: LD_EXP 7
1744: PUSH
1745: LD_VAR 0 3
1749: ARRAY
1750: NOT
1751: IFFALSE 1767
// begin result := i ;
1753: LD_ADDR_VAR 0 2
1757: PUSH
1758: LD_VAR 0 3
1762: ST_TO_ADDR
// exit ;
1763: POP
1764: POP
1765: GO 1771
// end ;
1767: GO 1737
1769: POP
1770: POP
// end ;
1771: LD_VAR 0 2
1775: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1776: LD_INT 0
1778: PPUSH
// uc_side := side ;
1779: LD_ADDR_OWVAR 20
1783: PUSH
1784: LD_VAR 0 1
1788: ST_TO_ADDR
// uc_nation := 1 ;
1789: LD_ADDR_OWVAR 21
1793: PUSH
1794: LD_INT 1
1796: ST_TO_ADDR
// hc_importance := 100 ;
1797: LD_ADDR_OWVAR 32
1801: PUSH
1802: LD_INT 100
1804: ST_TO_ADDR
// hc_class := 1 ;
1805: LD_ADDR_OWVAR 28
1809: PUSH
1810: LD_INT 1
1812: ST_TO_ADDR
// if num = 1 then
1813: LD_VAR 0 2
1817: PUSH
1818: LD_INT 1
1820: EQUAL
1821: IFFALSE 1903
// begin hc_gallery := us ;
1823: LD_ADDR_OWVAR 33
1827: PUSH
1828: LD_STRING us
1830: ST_TO_ADDR
// hc_face_number := 5 ;
1831: LD_ADDR_OWVAR 34
1835: PUSH
1836: LD_INT 5
1838: ST_TO_ADDR
// hc_name := John Macmilan ;
1839: LD_ADDR_OWVAR 26
1843: PUSH
1844: LD_STRING John Macmilan
1846: ST_TO_ADDR
// hc_sex := sex_male ;
1847: LD_ADDR_OWVAR 27
1851: PUSH
1852: LD_INT 1
1854: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1855: LD_ADDR_OWVAR 31
1859: PUSH
1860: LD_INT 7
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: LD_INT 4
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1878: LD_ADDR_OWVAR 29
1882: PUSH
1883: LD_INT 11
1885: PUSH
1886: LD_INT 10
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: ST_TO_ADDR
// result := CreateHuman ;
1893: LD_ADDR_VAR 0 3
1897: PUSH
1898: CALL_OW 44
1902: ST_TO_ADDR
// end ; if num = 2 then
1903: LD_VAR 0 2
1907: PUSH
1908: LD_INT 2
1910: EQUAL
1911: IFFALSE 1993
// begin hc_gallery := us ;
1913: LD_ADDR_OWVAR 33
1917: PUSH
1918: LD_STRING us
1920: ST_TO_ADDR
// hc_face_number := 2 ;
1921: LD_ADDR_OWVAR 34
1925: PUSH
1926: LD_INT 2
1928: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1929: LD_ADDR_OWVAR 26
1933: PUSH
1934: LD_STRING Lucy Donaldson
1936: ST_TO_ADDR
// hc_sex := sex_female ;
1937: LD_ADDR_OWVAR 27
1941: PUSH
1942: LD_INT 2
1944: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1945: LD_ADDR_OWVAR 31
1949: PUSH
1950: LD_INT 6
1952: PUSH
1953: LD_INT 3
1955: PUSH
1956: LD_INT 4
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1968: LD_ADDR_OWVAR 29
1972: PUSH
1973: LD_INT 9
1975: PUSH
1976: LD_INT 12
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: ST_TO_ADDR
// result := CreateHuman ;
1983: LD_ADDR_VAR 0 3
1987: PUSH
1988: CALL_OW 44
1992: ST_TO_ADDR
// end ; if num = 3 then
1993: LD_VAR 0 2
1997: PUSH
1998: LD_INT 3
2000: EQUAL
2001: IFFALSE 2083
// begin hc_gallery := us ;
2003: LD_ADDR_OWVAR 33
2007: PUSH
2008: LD_STRING us
2010: ST_TO_ADDR
// hc_face_number := 3 ;
2011: LD_ADDR_OWVAR 34
2015: PUSH
2016: LD_INT 3
2018: ST_TO_ADDR
// hc_name := Lisa Lawson ;
2019: LD_ADDR_OWVAR 26
2023: PUSH
2024: LD_STRING Lisa Lawson
2026: ST_TO_ADDR
// hc_sex := sex_female ;
2027: LD_ADDR_OWVAR 27
2031: PUSH
2032: LD_INT 2
2034: ST_TO_ADDR
// hc_skills := [ 8 , 4 , 3 , 3 ] ;
2035: LD_ADDR_OWVAR 31
2039: PUSH
2040: LD_INT 8
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 3
2048: PUSH
2049: LD_INT 3
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2058: LD_ADDR_OWVAR 29
2062: PUSH
2063: LD_INT 10
2065: PUSH
2066: LD_INT 11
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: ST_TO_ADDR
// result := CreateHuman ;
2073: LD_ADDR_VAR 0 3
2077: PUSH
2078: CALL_OW 44
2082: ST_TO_ADDR
// end ; end ;
2083: LD_VAR 0 3
2087: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2088: LD_INT 0
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
2098: PPUSH
// for i := 1 to 8 do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: DOUBLE
2105: LD_INT 1
2107: DEC
2108: ST_TO_ADDR
2109: LD_INT 8
2111: PUSH
2112: FOR_TO
2113: IFFALSE 3003
// begin if not multi_sides [ i ] then
2115: LD_EXP 7
2119: PUSH
2120: LD_VAR 0 2
2124: ARRAY
2125: NOT
2126: IFFALSE 2130
// continue ;
2128: GO 2112
// if multi_custom_commanders then
2130: LD_EXP 16
2134: IFFALSE 2226
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2136: LD_ADDR_VAR 0 5
2140: PUSH
2141: LD_VAR 0 2
2145: PPUSH
2146: LD_EXP 7
2150: PUSH
2151: LD_VAR 0 2
2155: ARRAY
2156: PPUSH
2157: CALL 1776 0 2
2161: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2162: LD_ADDR_EXP 24
2166: PUSH
2167: LD_EXP 24
2171: PPUSH
2172: LD_EXP 24
2176: PUSH
2177: LD_INT 1
2179: PLUS
2180: PPUSH
2181: LD_VAR 0 5
2185: PPUSH
2186: CALL_OW 2
2190: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2191: LD_VAR 0 5
2195: PPUSH
2196: LD_EXP 12
2200: PUSH
2201: LD_EXP 7
2205: PUSH
2206: LD_VAR 0 2
2210: ARRAY
2211: ARRAY
2212: PUSH
2213: LD_INT 1
2215: ARRAY
2216: PPUSH
2217: LD_INT 0
2219: PPUSH
2220: CALL_OW 49
// end else
2224: GO 2437
// begin uc_side := i ;
2226: LD_ADDR_OWVAR 20
2230: PUSH
2231: LD_VAR 0 2
2235: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_EXP 9
2245: PUSH
2246: LD_VAR 0 2
2250: ARRAY
2251: ST_TO_ADDR
// hc_importance := 100 ;
2252: LD_ADDR_OWVAR 32
2256: PUSH
2257: LD_INT 100
2259: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2260: LD_INT 0
2262: PPUSH
2263: LD_INT 1
2265: PPUSH
2266: LD_EXP 20
2270: PPUSH
2271: CALL_OW 380
// if multiplayer then
2275: LD_OWVAR 4
2279: IFFALSE 2337
// begin hc_name := mp_sides_players_names [ i ] ;
2281: LD_ADDR_OWVAR 26
2285: PUSH
2286: LD_OWVAR 19
2290: PUSH
2291: LD_VAR 0 2
2295: ARRAY
2296: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2297: LD_ADDR_OWVAR 33
2301: PUSH
2302: LD_STRING MULTIAVATARS
2304: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2305: LD_ADDR_OWVAR 34
2309: PUSH
2310: LD_VAR 0 2
2314: PPUSH
2315: CALL_OW 525
2319: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2320: LD_ADDR_OWVAR 27
2324: PUSH
2325: LD_VAR 0 2
2329: PPUSH
2330: CALL_OW 526
2334: ST_TO_ADDR
// end else
2335: GO 2369
// begin hc_gallery :=  ;
2337: LD_ADDR_OWVAR 33
2341: PUSH
2342: LD_STRING 
2344: ST_TO_ADDR
// hc_name :=  ;
2345: LD_ADDR_OWVAR 26
2349: PUSH
2350: LD_STRING 
2352: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2353: LD_ADDR_OWVAR 27
2357: PUSH
2358: LD_INT 1
2360: PPUSH
2361: LD_INT 2
2363: PPUSH
2364: CALL_OW 12
2368: ST_TO_ADDR
// end ; un := CreateHuman ;
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: CALL_OW 44
2378: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2379: LD_VAR 0 5
2383: PPUSH
2384: LD_EXP 12
2388: PUSH
2389: LD_EXP 7
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: ARRAY
2400: PUSH
2401: LD_INT 1
2403: ARRAY
2404: PPUSH
2405: LD_INT 0
2407: PPUSH
2408: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2412: LD_ADDR_EXP 24
2416: PUSH
2417: LD_EXP 24
2421: PPUSH
2422: LD_VAR 0 2
2426: PPUSH
2427: LD_VAR 0 5
2431: PPUSH
2432: CALL_OW 1
2436: ST_TO_ADDR
// end ; InitHc ;
2437: CALL_OW 19
// InitUc ;
2441: CALL_OW 18
// uc_side := i ;
2445: LD_ADDR_OWVAR 20
2449: PUSH
2450: LD_VAR 0 2
2454: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2455: LD_ADDR_OWVAR 21
2459: PUSH
2460: LD_EXP 9
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ST_TO_ADDR
// hc_gallery :=  ;
2471: LD_ADDR_OWVAR 33
2475: PUSH
2476: LD_STRING 
2478: ST_TO_ADDR
// hc_name :=  ;
2479: LD_ADDR_OWVAR 26
2483: PUSH
2484: LD_STRING 
2486: ST_TO_ADDR
// hc_importance := 0 ;
2487: LD_ADDR_OWVAR 32
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// cl := 1 ;
2495: LD_ADDR_VAR 0 4
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: DOUBLE
2509: LD_INT 2
2511: DEC
2512: ST_TO_ADDR
2513: LD_EXP 19
2517: PUSH
2518: FOR_TO
2519: IFFALSE 2891
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 1
2528: MINUS
2529: PUSH
2530: LD_EXP 19
2534: PUSH
2535: LD_INT 1
2537: MINUS
2538: PUSH
2539: LD_INT 4
2541: DIVREAL
2542: MOD
2543: PUSH
2544: LD_INT 0
2546: EQUAL
2547: IFFALSE 2563
// cl := cl + 1 ;
2549: LD_ADDR_VAR 0 4
2553: PUSH
2554: LD_VAR 0 4
2558: PUSH
2559: LD_INT 1
2561: PLUS
2562: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2563: LD_INT 0
2565: PPUSH
2566: LD_VAR 0 4
2570: PPUSH
2571: LD_EXP 20
2575: PPUSH
2576: CALL_OW 380
// un := CreateHuman ;
2580: LD_ADDR_VAR 0 5
2584: PUSH
2585: CALL_OW 44
2589: ST_TO_ADDR
// if j > copy then
2590: LD_VAR 0 3
2594: PUSH
2595: LD_VAR 0 8
2599: GREATER
2600: IFFALSE 2629
// copy := Replace ( copy , j , un ) else
2602: LD_ADDR_VAR 0 8
2606: PUSH
2607: LD_VAR 0 8
2611: PPUSH
2612: LD_VAR 0 3
2616: PPUSH
2617: LD_VAR 0 5
2621: PPUSH
2622: CALL_OW 1
2626: ST_TO_ADDR
2627: GO 2711
// begin CopySkills ( copy [ j ] , un ) ;
2629: LD_VAR 0 8
2633: PUSH
2634: LD_VAR 0 3
2638: ARRAY
2639: PPUSH
2640: LD_VAR 0 5
2644: PPUSH
2645: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2649: LD_VAR 0 5
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_VAR 0 8
2661: PUSH
2662: LD_VAR 0 3
2666: ARRAY
2667: PPUSH
2668: LD_INT 2
2670: PPUSH
2671: CALL_OW 260
2675: PPUSH
2676: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2680: LD_VAR 0 5
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_VAR 0 8
2692: PUSH
2693: LD_VAR 0 3
2697: ARRAY
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: CALL_OW 260
2706: PPUSH
2707: CALL_OW 239
// end ; if multi_pos_area then
2711: LD_EXP 12
2715: IFFALSE 2889
// begin if GetClass ( un ) = 3 then
2717: LD_VAR 0 5
2721: PPUSH
2722: CALL_OW 257
2726: PUSH
2727: LD_INT 3
2729: EQUAL
2730: IFFALSE 2856
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2732: LD_INT 3
2734: PUSH
2735: LD_INT 2
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_VAR 0 3
2746: PUSH
2747: LD_INT 2
2749: MOD
2750: PUSH
2751: LD_INT 1
2753: PLUS
2754: ARRAY
2755: PPUSH
2756: LD_INT 2
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: LD_INT 5
2764: PUSH
2765: LD_INT 4
2767: PUSH
2768: LD_INT 3
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: LIST
2775: PUSH
2776: LD_VAR 0 3
2780: PUSH
2781: LD_INT 3
2783: MOD
2784: PUSH
2785: LD_INT 1
2787: PLUS
2788: ARRAY
2789: PPUSH
2790: LD_INT 100
2792: PPUSH
2793: CALL 21873 0 5
// veh := CreateVehicle ;
2797: LD_ADDR_VAR 0 6
2801: PUSH
2802: CALL_OW 45
2806: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2807: LD_VAR 0 6
2811: PPUSH
2812: LD_EXP 12
2816: PUSH
2817: LD_EXP 7
2821: PUSH
2822: LD_VAR 0 2
2826: ARRAY
2827: ARRAY
2828: PUSH
2829: LD_INT 2
2831: ARRAY
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2840: LD_VAR 0 5
2844: PPUSH
2845: LD_VAR 0 6
2849: PPUSH
2850: CALL_OW 52
// continue ;
2854: GO 2518
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2856: LD_VAR 0 5
2860: PPUSH
2861: LD_EXP 12
2865: PUSH
2866: LD_EXP 7
2870: PUSH
2871: LD_VAR 0 2
2875: ARRAY
2876: ARRAY
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 49
// end ; end ;
2889: GO 2518
2891: POP
2892: POP
// for j = 1 to 3 do
2893: LD_ADDR_VAR 0 3
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_INT 3
2905: PUSH
2906: FOR_TO
2907: IFFALSE 2999
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2909: LD_INT 2
2911: PUSH
2912: LD_INT 3
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: LD_INT 1
2921: PPUSH
2922: LD_INT 2
2924: PPUSH
2925: CALL_OW 12
2929: ARRAY
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: LD_INT 3
2936: PPUSH
2937: LD_INT 11
2939: PUSH
2940: LD_INT 7
2942: PUSH
2943: LD_INT 4
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_VAR 0 3
2955: ARRAY
2956: PPUSH
2957: LD_INT 100
2959: PPUSH
2960: CALL 21873 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2964: CALL_OW 45
2968: PPUSH
2969: LD_EXP 12
2973: PUSH
2974: LD_EXP 7
2978: PUSH
2979: LD_VAR 0 2
2983: ARRAY
2984: ARRAY
2985: PUSH
2986: LD_INT 1
2988: ARRAY
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 49
// end ;
2997: GO 2906
2999: POP
3000: POP
// end ;
3001: GO 2112
3003: POP
3004: POP
// end ;
3005: LD_VAR 0 1
3009: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3010: LD_INT 0
3012: PPUSH
3013: PPUSH
3014: PPUSH
3015: PPUSH
3016: PPUSH
// if not multi_support then
3017: LD_EXP 23
3021: NOT
3022: IFFALSE 3026
// exit ;
3024: GO 3597
// result := [ ] ;
3026: LD_ADDR_VAR 0 1
3030: PUSH
3031: EMPTY
3032: ST_TO_ADDR
// for i := 1 to 8 do
3033: LD_ADDR_VAR 0 2
3037: PUSH
3038: DOUBLE
3039: LD_INT 1
3041: DEC
3042: ST_TO_ADDR
3043: LD_INT 8
3045: PUSH
3046: FOR_TO
3047: IFFALSE 3595
// begin result := Replace ( result , i , [ ] ) ;
3049: LD_ADDR_VAR 0 1
3053: PUSH
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_VAR 0 2
3063: PPUSH
3064: EMPTY
3065: PPUSH
3066: CALL_OW 1
3070: ST_TO_ADDR
// if multi_sides [ i ] then
3071: LD_EXP 7
3075: PUSH
3076: LD_VAR 0 2
3080: ARRAY
3081: IFFALSE 3593
// begin tmp := [ ] ;
3083: LD_ADDR_VAR 0 5
3087: PUSH
3088: EMPTY
3089: ST_TO_ADDR
// if multi_support = 1 then
3090: LD_EXP 23
3094: PUSH
3095: LD_INT 1
3097: EQUAL
3098: IFFALSE 3266
// begin uc_side := i ;
3100: LD_ADDR_OWVAR 20
3104: PUSH
3105: LD_VAR 0 2
3109: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3110: LD_ADDR_OWVAR 21
3114: PUSH
3115: LD_EXP 9
3119: PUSH
3120: LD_VAR 0 2
3124: ARRAY
3125: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3126: LD_INT 3
3128: PPUSH
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 3
3134: PPUSH
3135: LD_INT 11
3137: PPUSH
3138: LD_INT 40
3140: PPUSH
3141: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3145: LD_ADDR_VAR 0 5
3149: PUSH
3150: LD_VAR 0 5
3154: PUSH
3155: CALL_OW 45
3159: ADD
3160: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3161: LD_INT 2
3163: PPUSH
3164: LD_INT 1
3166: PPUSH
3167: LD_INT 3
3169: PPUSH
3170: LD_INT 5
3172: PPUSH
3173: LD_INT 40
3175: PPUSH
3176: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3180: LD_ADDR_VAR 0 5
3184: PUSH
3185: LD_VAR 0 5
3189: PUSH
3190: CALL_OW 45
3194: ADD
3195: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3196: LD_INT 2
3198: PPUSH
3199: LD_INT 3
3201: PPUSH
3202: LD_INT 3
3204: PPUSH
3205: LD_INT 4
3207: PPUSH
3208: LD_INT 40
3210: PPUSH
3211: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3215: LD_ADDR_VAR 0 5
3219: PUSH
3220: LD_VAR 0 5
3224: PUSH
3225: CALL_OW 45
3229: ADD
3230: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 9
3242: PPUSH
3243: LD_INT 40
3245: PPUSH
3246: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3250: LD_ADDR_VAR 0 5
3254: PUSH
3255: LD_VAR 0 5
3259: PUSH
3260: CALL_OW 45
3264: ADD
3265: ST_TO_ADDR
// end ; if multi_support = 2 then
3266: LD_EXP 23
3270: PUSH
3271: LD_INT 2
3273: EQUAL
3274: IFFALSE 3568
// begin uc_side := i ;
3276: LD_ADDR_OWVAR 20
3280: PUSH
3281: LD_VAR 0 2
3285: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3286: LD_ADDR_OWVAR 21
3290: PUSH
3291: LD_EXP 9
3295: PUSH
3296: LD_VAR 0 2
3300: ARRAY
3301: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3302: LD_INT 3
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 3
3310: PPUSH
3311: LD_INT 11
3313: PPUSH
3314: LD_INT 40
3316: PPUSH
3317: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3321: LD_ADDR_VAR 0 5
3325: PUSH
3326: LD_VAR 0 5
3330: PUSH
3331: CALL_OW 45
3335: ADD
3336: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 3
3345: PPUSH
3346: LD_INT 12
3348: PPUSH
3349: LD_INT 40
3351: PPUSH
3352: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3356: LD_ADDR_VAR 0 5
3360: PUSH
3361: LD_VAR 0 5
3365: PUSH
3366: CALL_OW 45
3370: ADD
3371: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3372: LD_VAR 0 5
3376: PUSH
3377: LD_VAR 0 5
3381: ARRAY
3382: PPUSH
3383: LD_INT 1
3385: PPUSH
3386: LD_INT 100
3388: PPUSH
3389: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3393: LD_INT 2
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: LD_INT 3
3401: PPUSH
3402: LD_INT 5
3404: PPUSH
3405: LD_INT 40
3407: PPUSH
3408: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3412: LD_ADDR_VAR 0 5
3416: PUSH
3417: LD_VAR 0 5
3421: PUSH
3422: CALL_OW 45
3426: ADD
3427: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3428: LD_INT 4
3430: PPUSH
3431: LD_INT 1
3433: PPUSH
3434: LD_INT 3
3436: PPUSH
3437: LD_INT 6
3439: PPUSH
3440: LD_INT 40
3442: PPUSH
3443: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3447: LD_ADDR_VAR 0 5
3451: PUSH
3452: LD_VAR 0 5
3456: PUSH
3457: CALL_OW 45
3461: ADD
3462: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 3
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: LD_INT 9
3474: PPUSH
3475: LD_INT 40
3477: PPUSH
3478: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3482: LD_ADDR_VAR 0 5
3486: PUSH
3487: LD_VAR 0 5
3491: PUSH
3492: CALL_OW 45
3496: ADD
3497: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3498: LD_INT 2
3500: PPUSH
3501: LD_INT 3
3503: PPUSH
3504: LD_INT 3
3506: PPUSH
3507: LD_INT 9
3509: PPUSH
3510: LD_INT 40
3512: PPUSH
3513: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3517: LD_ADDR_VAR 0 5
3521: PUSH
3522: LD_VAR 0 5
3526: PUSH
3527: CALL_OW 45
3531: ADD
3532: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3533: LD_INT 4
3535: PPUSH
3536: LD_INT 1
3538: PPUSH
3539: LD_INT 3
3541: PPUSH
3542: LD_INT 6
3544: PPUSH
3545: LD_INT 40
3547: PPUSH
3548: CALL 21873 0 5
// tmp := tmp ^ CreateVehicle ;
3552: LD_ADDR_VAR 0 5
3556: PUSH
3557: LD_VAR 0 5
3561: PUSH
3562: CALL_OW 45
3566: ADD
3567: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3568: LD_ADDR_VAR 0 1
3572: PUSH
3573: LD_VAR 0 1
3577: PPUSH
3578: LD_VAR 0 2
3582: PPUSH
3583: LD_VAR 0 5
3587: PPUSH
3588: CALL_OW 1
3592: ST_TO_ADDR
// end ; end ;
3593: GO 3046
3595: POP
3596: POP
// end ;
3597: LD_VAR 0 1
3601: RET
// export function Multiplayer_Start ( ) ; begin
3602: LD_INT 0
3604: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3605: CALL 2088 0 0
// Multiplayer_InitPointSystem ( ) ;
3609: CALL 4305 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3613: LD_INT 20
3615: PPUSH
3616: CALL 4481 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3620: LD_INT 150
3622: PPUSH
3623: CALL 4481 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3627: LD_INT 5
3629: PPUSH
3630: CALL 4481 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3634: LD_INT 40
3636: NEG
3637: PPUSH
3638: CALL 4481 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3642: LD_INT 200
3644: PPUSH
3645: CALL 4481 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3649: LD_INT 2
3651: PPUSH
3652: CALL 4481 0 1
// Multiplayer_SpawnArtifact ;
3656: CALL 4921 0 0
// if multi_support then
3660: LD_EXP 23
3664: IFFALSE 3676
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3666: LD_ADDR_EXP 27
3670: PUSH
3671: CALL 3010 0 0
3675: ST_TO_ADDR
// if multi_sides [ your_side ] then
3676: LD_EXP 7
3680: PUSH
3681: LD_OWVAR 2
3685: ARRAY
3686: IFFALSE 3713
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3688: LD_INT 22
3690: PUSH
3691: LD_OWVAR 2
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: PPUSH
3700: CALL_OW 69
3704: PUSH
3705: LD_INT 1
3707: ARRAY
3708: PPUSH
3709: CALL_OW 87
// end ;
3713: LD_VAR 0 1
3717: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
// reinforcements_arrive := 0 ;
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: LD_INT 0
3732: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3740: LD_OWVAR 1
3744: PUSH
3745: LD_EXP 29
3749: GREATER
3750: PUSH
3751: LD_EXP 28
3755: NOT
3756: AND
3757: PUSH
3758: LD_EXP 23
3762: AND
3763: IFFALSE 3928
// begin multi_reinforcements_spawned := true ;
3765: LD_ADDR_EXP 28
3769: PUSH
3770: LD_INT 1
3772: ST_TO_ADDR
// for i := 1 to 8 do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 8
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3916
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3789: LD_EXP 7
3793: PUSH
3794: LD_VAR 0 2
3798: ARRAY
3799: PUSH
3800: LD_EXP 25
3804: PUSH
3805: LD_VAR 0 2
3809: ARRAY
3810: NOT
3811: AND
3812: PUSH
3813: LD_EXP 27
3817: PUSH
3818: LD_VAR 0 2
3822: ARRAY
3823: AND
3824: IFFALSE 3914
// begin tmp := multi_reinforcements [ i ] ;
3826: LD_ADDR_VAR 0 4
3830: PUSH
3831: LD_EXP 27
3835: PUSH
3836: LD_VAR 0 2
3840: ARRAY
3841: ST_TO_ADDR
// for j in tmp do
3842: LD_ADDR_VAR 0 3
3846: PUSH
3847: LD_VAR 0 4
3851: PUSH
3852: FOR_IN
3853: IFFALSE 3890
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3855: LD_VAR 0 3
3859: PPUSH
3860: LD_EXP 12
3864: PUSH
3865: LD_EXP 7
3869: PUSH
3870: LD_VAR 0 2
3874: ARRAY
3875: ARRAY
3876: PUSH
3877: LD_INT 2
3879: ARRAY
3880: PPUSH
3881: LD_INT 0
3883: PPUSH
3884: CALL_OW 49
3888: GO 3852
3890: POP
3891: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3892: LD_ADDR_EXP 27
3896: PUSH
3897: LD_EXP 27
3901: PPUSH
3902: LD_VAR 0 2
3906: PPUSH
3907: EMPTY
3908: PPUSH
3909: CALL_OW 1
3913: ST_TO_ADDR
// end ; end ;
3914: GO 3786
3916: POP
3917: POP
// reinforcements_arrive := tick ;
3918: LD_ADDR_VAR 0 5
3922: PUSH
3923: LD_OWVAR 1
3927: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3928: LD_EXP 16
3932: NOT
3933: IFFALSE 4046
// begin for i = 1 to 8 do
3935: LD_ADDR_VAR 0 2
3939: PUSH
3940: DOUBLE
3941: LD_INT 1
3943: DEC
3944: ST_TO_ADDR
3945: LD_INT 8
3947: PUSH
3948: FOR_TO
3949: IFFALSE 4020
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3951: LD_INT 22
3953: PUSH
3954: LD_VAR 0 2
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PPUSH
3963: CALL_OW 69
3967: PUSH
3968: LD_INT 0
3970: EQUAL
3971: PUSH
3972: LD_EXP 25
3976: PUSH
3977: LD_VAR 0 2
3981: ARRAY
3982: NOT
3983: AND
3984: IFFALSE 4018
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3986: LD_ADDR_EXP 25
3990: PUSH
3991: LD_EXP 25
3995: PPUSH
3996: LD_VAR 0 2
4000: PPUSH
4001: LD_INT 1
4003: PPUSH
4004: CALL_OW 1
4008: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4009: LD_VAR 0 2
4013: PPUSH
4014: CALL 4551 0 1
// end ; end ;
4018: GO 3948
4020: POP
4021: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4022: LD_EXP 25
4026: PPUSH
4027: CALL 19135 0 1
4031: PUSH
4032: LD_EXP 7
4036: PPUSH
4037: CALL 19135 0 1
4041: EQUAL
4042: IFFALSE 4046
// break ;
4044: GO 4102
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
4046: LD_INT 22
4048: PUSH
4049: LD_EXP 3
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PUSH
4058: LD_INT 21
4060: PUSH
4061: LD_INT 1
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_INT 50
4070: PUSH
4071: EMPTY
4072: LIST
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PUSH
4084: LD_INT 0
4086: EQUAL
4087: PUSH
4088: LD_EXP 2
4092: AND
4093: PUSH
4094: LD_EXP 24
4098: NOT
4099: OR
4100: IFFALSE 3733
// game := false ;
4102: LD_ADDR_EXP 2
4106: PUSH
4107: LD_INT 0
4109: ST_TO_ADDR
// for i := 1 to 8 do
4110: LD_ADDR_VAR 0 2
4114: PUSH
4115: DOUBLE
4116: LD_INT 1
4118: DEC
4119: ST_TO_ADDR
4120: LD_INT 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4160
// begin if multi_sides [ i ] then
4126: LD_EXP 7
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: IFFALSE 4158
// SetMultiScore ( i , multi_points [ i ] ) ;
4138: LD_VAR 0 2
4142: PPUSH
4143: LD_EXP 32
4147: PUSH
4148: LD_VAR 0 2
4152: ARRAY
4153: PPUSH
4154: CALL_OW 506
// end ;
4158: GO 4123
4160: POP
4161: POP
// if multi_loosers [ your_side ] then
4162: LD_EXP 25
4166: PUSH
4167: LD_OWVAR 2
4171: ARRAY
4172: IFFALSE 4195
// begin if Multiplayer then
4174: LD_OWVAR 4
4178: IFFALSE 4186
// YouLostInMultiplayer else
4180: CALL_OW 107
4184: GO 4193
// YouLost (  ) ;
4186: LD_STRING 
4188: PPUSH
4189: CALL_OW 104
// end else
4193: GO 4211
// begin if Multiplayer then
4195: LD_OWVAR 4
4199: IFFALSE 4207
// YouWinInMultiplayer else
4201: CALL_OW 106
4205: GO 4211
// YouWin ;
4207: CALL_OW 103
// end ; end ;
4211: LD_VAR 0 1
4215: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4216: LD_INT 0
4218: PPUSH
4219: PPUSH
// result := [ ] ;
4220: LD_ADDR_VAR 0 1
4224: PUSH
4225: EMPTY
4226: ST_TO_ADDR
// for i := 1 to 8 do
4227: LD_ADDR_VAR 0 2
4231: PUSH
4232: DOUBLE
4233: LD_INT 1
4235: DEC
4236: ST_TO_ADDR
4237: LD_INT 8
4239: PUSH
4240: FOR_TO
4241: IFFALSE 4298
// begin if multi_sides [ i ] then
4243: LD_EXP 7
4247: PUSH
4248: LD_VAR 0 2
4252: ARRAY
4253: IFFALSE 4296
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4255: LD_ADDR_VAR 0 1
4259: PUSH
4260: LD_VAR 0 1
4264: PUSH
4265: LD_STRING #coop-points
4267: PUSH
4268: LD_VAR 0 2
4272: PUSH
4273: LD_VAR 0 2
4277: PUSH
4278: LD_EXP 32
4282: PUSH
4283: LD_VAR 0 2
4287: ARRAY
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: ADD
4295: ST_TO_ADDR
// end ; end ;
4296: GO 4240
4298: POP
4299: POP
// end ;
4300: LD_VAR 0 1
4304: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4305: LD_INT 0
4307: PPUSH
4308: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4309: LD_ADDR_EXP 32
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: LD_INT 0
4322: PUSH
4323: LD_INT 0
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: LD_INT 0
4331: PUSH
4332: LD_INT 0
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4348: LD_ADDR_EXP 33
4352: PUSH
4353: EMPTY
4354: ST_TO_ADDR
// end ;
4355: LD_VAR 0 1
4359: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4360: LD_INT 0
4362: PPUSH
// if not multi_points or not side or side > 8 then
4363: LD_EXP 32
4367: NOT
4368: PUSH
4369: LD_VAR 0 1
4373: NOT
4374: OR
4375: PUSH
4376: LD_VAR 0 1
4380: PUSH
4381: LD_INT 8
4383: GREATER
4384: OR
4385: IFFALSE 4389
// exit ;
4387: GO 4426
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4389: LD_ADDR_EXP 32
4393: PUSH
4394: LD_EXP 32
4398: PPUSH
4399: LD_VAR 0 1
4403: PPUSH
4404: LD_EXP 32
4408: PUSH
4409: LD_VAR 0 1
4413: ARRAY
4414: PUSH
4415: LD_VAR 0 2
4419: PLUS
4420: PPUSH
4421: CALL_OW 1
4425: ST_TO_ADDR
// end ;
4426: LD_VAR 0 3
4430: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4431: LD_INT 0
4433: PPUSH
// if not multi_points or not side or side > 8 then
4434: LD_EXP 32
4438: NOT
4439: PUSH
4440: LD_VAR 0 1
4444: NOT
4445: OR
4446: PUSH
4447: LD_VAR 0 1
4451: PUSH
4452: LD_INT 8
4454: GREATER
4455: OR
4456: IFFALSE 4460
// exit ;
4458: GO 4476
// result := multi_points [ side ] ;
4460: LD_ADDR_VAR 0 2
4464: PUSH
4465: LD_EXP 32
4469: PUSH
4470: LD_VAR 0 1
4474: ARRAY
4475: ST_TO_ADDR
// end ;
4476: LD_VAR 0 2
4480: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4481: LD_INT 0
4483: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4484: LD_ADDR_EXP 33
4488: PUSH
4489: LD_EXP 33
4493: PPUSH
4494: LD_EXP 33
4498: PUSH
4499: LD_INT 1
4501: PLUS
4502: PPUSH
4503: LD_VAR 0 1
4507: PPUSH
4508: CALL_OW 1
4512: ST_TO_ADDR
// end ;
4513: LD_VAR 0 2
4517: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4518: LD_INT 0
4520: PPUSH
// if not id then
4521: LD_VAR 0 1
4525: NOT
4526: IFFALSE 4530
// exit ;
4528: GO 4546
// result := multi_points_conditions [ id ] ;
4530: LD_ADDR_VAR 0 2
4534: PUSH
4535: LD_EXP 33
4539: PUSH
4540: LD_VAR 0 1
4544: ARRAY
4545: ST_TO_ADDR
// end ;
4546: LD_VAR 0 2
4550: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
// players := [ ] ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: EMPTY
4564: ST_TO_ADDR
// for i = 1 to 8 do
4565: LD_ADDR_VAR 0 4
4569: PUSH
4570: DOUBLE
4571: LD_INT 1
4573: DEC
4574: ST_TO_ADDR
4575: LD_INT 8
4577: PUSH
4578: FOR_TO
4579: IFFALSE 4638
// begin if i = side then
4581: LD_VAR 0 4
4585: PUSH
4586: LD_VAR 0 1
4590: EQUAL
4591: IFFALSE 4595
// continue ;
4593: GO 4578
// if multi_sides [ i ] and not multi_loosers [ i ] then
4595: LD_EXP 7
4599: PUSH
4600: LD_VAR 0 4
4604: ARRAY
4605: PUSH
4606: LD_EXP 25
4610: PUSH
4611: LD_VAR 0 4
4615: ARRAY
4616: NOT
4617: AND
4618: IFFALSE 4636
// players := players ^ i ;
4620: LD_ADDR_VAR 0 3
4624: PUSH
4625: LD_VAR 0 3
4629: PUSH
4630: LD_VAR 0 4
4634: ADD
4635: ST_TO_ADDR
// end ;
4636: GO 4578
4638: POP
4639: POP
// if not players then
4640: LD_VAR 0 3
4644: NOT
4645: IFFALSE 4649
// exit ;
4647: GO 4916
// if players = 1 then
4649: LD_VAR 0 3
4653: PUSH
4654: LD_INT 1
4656: EQUAL
4657: IFFALSE 4718
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4659: LD_ADDR_VAR 0 4
4663: PUSH
4664: LD_INT 22
4666: PUSH
4667: LD_VAR 0 1
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 51
4678: PUSH
4679: EMPTY
4680: LIST
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PPUSH
4686: CALL_OW 69
4690: PUSH
4691: FOR_IN
4692: IFFALSE 4714
// SetSide ( i , players [ 1 ] ) ;
4694: LD_VAR 0 4
4698: PPUSH
4699: LD_VAR 0 3
4703: PUSH
4704: LD_INT 1
4706: ARRAY
4707: PPUSH
4708: CALL_OW 235
4712: GO 4691
4714: POP
4715: POP
// end else
4716: GO 4916
// begin j := 1 ;
4718: LD_ADDR_VAR 0 5
4722: PUSH
4723: LD_INT 1
4725: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4726: LD_ADDR_VAR 0 4
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_VAR 0 1
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PUSH
4743: LD_INT 2
4745: PUSH
4746: LD_INT 21
4748: PUSH
4749: LD_INT 1
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 51
4758: PUSH
4759: EMPTY
4760: LIST
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 21
4768: PUSH
4769: LD_INT 2
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: PUSH
4790: FOR_IN
4791: IFFALSE 4914
// begin SetSide ( i , players [ j ] ) ;
4793: LD_VAR 0 4
4797: PPUSH
4798: LD_VAR 0 3
4802: PUSH
4803: LD_VAR 0 5
4807: ARRAY
4808: PPUSH
4809: CALL_OW 235
// if IsDrivenBy ( i ) then
4813: LD_VAR 0 4
4817: PPUSH
4818: CALL_OW 311
4822: IFFALSE 4849
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4824: LD_VAR 0 4
4828: PPUSH
4829: CALL_OW 311
4833: PPUSH
4834: LD_VAR 0 3
4838: PUSH
4839: LD_VAR 0 5
4843: ARRAY
4844: PPUSH
4845: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4849: LD_VAR 0 4
4853: PPUSH
4854: CALL_OW 310
4858: PPUSH
4859: CALL_OW 247
4863: PUSH
4864: LD_INT 3
4866: EQUAL
4867: IFFALSE 4878
// ComExitBuilding ( i ) ;
4869: LD_VAR 0 4
4873: PPUSH
4874: CALL_OW 122
// j := j + 1 ;
4878: LD_ADDR_VAR 0 5
4882: PUSH
4883: LD_VAR 0 5
4887: PUSH
4888: LD_INT 1
4890: PLUS
4891: ST_TO_ADDR
// if j > players then
4892: LD_VAR 0 5
4896: PUSH
4897: LD_VAR 0 3
4901: GREATER
4902: IFFALSE 4912
// j := 1 ;
4904: LD_ADDR_VAR 0 5
4908: PUSH
4909: LD_INT 1
4911: ST_TO_ADDR
// end ;
4912: GO 4790
4914: POP
4915: POP
// end ; end ;
4916: LD_VAR 0 2
4920: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4921: LD_INT 0
4923: PPUSH
4924: PPUSH
4925: PPUSH
// i := 3 ;
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: LD_INT 3
4933: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4934: LD_ADDR_VAR 0 3
4938: PUSH
4939: LD_INT 5
4941: PUSH
4942: LD_INT 10
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 120
4951: PUSH
4952: LD_INT 2
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: LD_INT 101
4961: PUSH
4962: LD_INT 8
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 27
4971: PUSH
4972: LD_INT 4
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4985: LD_INT 4
4987: PPUSH
4988: LD_INT 5
4990: PPUSH
4991: LD_VAR 0 3
4995: PUSH
4996: LD_VAR 0 2
5000: ARRAY
5001: PUSH
5002: LD_INT 1
5004: ARRAY
5005: PPUSH
5006: LD_VAR 0 3
5010: PUSH
5011: LD_VAR 0 2
5015: ARRAY
5016: PUSH
5017: LD_INT 2
5019: ARRAY
5020: PPUSH
5021: LD_INT 0
5023: PPUSH
5024: CALL_OW 58
// end ;
5028: LD_VAR 0 1
5032: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5033: LD_INT 0
5035: PPUSH
// if not side or side > 8 then
5036: LD_VAR 0 1
5040: NOT
5041: PUSH
5042: LD_VAR 0 1
5046: PUSH
5047: LD_INT 8
5049: GREATER
5050: OR
5051: IFFALSE 5055
// exit ;
5053: GO 5072
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5055: LD_VAR 0 1
5059: PPUSH
5060: LD_INT 6
5062: PPUSH
5063: CALL 4518 0 1
5067: PPUSH
5068: CALL 4360 0 2
// end ;
5072: LD_VAR 0 2
5076: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5077: LD_INT 0
5079: PPUSH
// if not side or side > 8 then
5080: LD_VAR 0 1
5084: NOT
5085: PUSH
5086: LD_VAR 0 1
5090: PUSH
5091: LD_INT 8
5093: GREATER
5094: OR
5095: IFFALSE 5099
// exit ;
5097: GO 5116
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5099: LD_VAR 0 1
5103: PPUSH
5104: LD_INT 4
5106: PPUSH
5107: CALL 4518 0 1
5111: PPUSH
5112: CALL 4360 0 2
// end ;
5116: LD_VAR 0 2
5120: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5121: LD_INT 0
5123: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5124: LD_VAR 0 1
5128: NOT
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_INT 8
5137: GREATER
5138: OR
5139: PUSH
5140: LD_VAR 0 2
5144: PUSH
5145: LD_INT 2
5147: PUSH
5148: LD_INT 6
5150: PUSH
5151: LD_INT 36
5153: PUSH
5154: LD_INT 0
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: IN
5163: NOT
5164: OR
5165: IFFALSE 5169
// exit ;
5167: GO 5186
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5169: LD_VAR 0 1
5173: PPUSH
5174: LD_INT 3
5176: PPUSH
5177: CALL 4518 0 1
5181: PPUSH
5182: CALL 4360 0 2
// end ;
5186: LD_VAR 0 3
5190: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
// if not un then
5195: LD_VAR 0 1
5199: NOT
5200: IFFALSE 5204
// exit ;
5202: GO 5250
// if not points then
5204: LD_VAR 0 3
5208: NOT
5209: IFFALSE 5226
// gained_points := Multiplayer_GetCondition ( 1 ) else
5211: LD_ADDR_VAR 0 5
5215: PUSH
5216: LD_INT 1
5218: PPUSH
5219: CALL 4518 0 1
5223: ST_TO_ADDR
5224: GO 5236
// gained_points := points ;
5226: LD_ADDR_VAR 0 5
5230: PUSH
5231: LD_VAR 0 3
5235: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5236: LD_VAR 0 2
5240: PPUSH
5241: LD_VAR 0 5
5245: PPUSH
5246: CALL 4360 0 2
5250: LD_VAR 0 4
5254: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5255: LD_INT 0
5257: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5258: LD_VAR 0 1
5262: PPUSH
5263: LD_INT 2
5265: PPUSH
5266: CALL 4518 0 1
5270: PPUSH
5271: CALL 4360 0 2
// end ; end_of_file
5275: LD_VAR 0 2
5279: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
5288: PPUSH
5289: PPUSH
5290: PPUSH
5291: PPUSH
// side_bot := side ;
5292: LD_ADDR_EXP 3
5296: PUSH
5297: LD_VAR 0 1
5301: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5302: LD_ADDR_VAR 0 10
5306: PUSH
5307: LD_INT 11
5309: PUSH
5310: LD_INT 4
5312: PUSH
5313: LD_INT 3
5315: PUSH
5316: LD_INT 5
5318: PUSH
5319: LD_INT 66
5321: PUSH
5322: LD_INT 67
5324: PUSH
5325: LD_INT 53
5327: PUSH
5328: LD_INT 18
5330: PUSH
5331: LD_INT 40
5333: PUSH
5334: LD_INT 22
5336: PUSH
5337: LD_INT 72
5339: PUSH
5340: LD_INT 55
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: ST_TO_ADDR
// for i in techs do
5357: LD_ADDR_VAR 0 3
5361: PUSH
5362: LD_VAR 0 10
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5389
// SetTech ( i , side , state_researched ) ;
5370: LD_VAR 0 3
5374: PPUSH
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 2
5382: PPUSH
5383: CALL_OW 322
5387: GO 5367
5389: POP
5390: POP
// InitScriptBases ;
5391: CALL 7330 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5395: LD_ADDR_VAR 0 8
5399: PUSH
5400: LD_INT 5
5402: PUSH
5403: LD_INT 7
5405: PUSH
5406: LD_INT 10
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: LIST
5413: PUSH
5414: LD_OWVAR 67
5418: ARRAY
5419: ST_TO_ADDR
// uc_side := side ;
5420: LD_ADDR_OWVAR 20
5424: PUSH
5425: LD_VAR 0 1
5429: ST_TO_ADDR
// uc_nation := 2 ;
5430: LD_ADDR_OWVAR 21
5434: PUSH
5435: LD_INT 2
5437: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5438: LD_ADDR_EXP 36
5442: PUSH
5443: LD_INT 94
5445: PPUSH
5446: LD_INT 35
5448: PPUSH
5449: LD_STRING dammam
5451: PPUSH
5452: LD_VAR 0 8
5456: PPUSH
5457: LD_INT 10000
5459: PUSH
5460: LD_INT 1000
5462: PUSH
5463: LD_INT 900
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PPUSH
5471: LD_INT 12
5473: PUSH
5474: LD_INT 4
5476: PUSH
5477: LD_INT 1
5479: NEG
5480: PUSH
5481: LD_INT 4
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL 25694 0 6
5494: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5495: LD_ADDR_EXP 37
5499: PUSH
5500: LD_INT 122
5502: PPUSH
5503: LD_INT 38
5505: PPUSH
5506: LD_STRING 
5508: PPUSH
5509: LD_VAR 0 8
5513: PPUSH
5514: LD_INT 500
5516: PUSH
5517: LD_INT 130
5519: PUSH
5520: LD_INT 0
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: PPUSH
5528: LD_INT 16
5530: PUSH
5531: LD_INT 4
5533: PUSH
5534: LD_INT 3
5536: PUSH
5537: LD_INT 1
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL 25694 0 6
5550: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5551: LD_ADDR_EXP 34
5555: PUSH
5556: LD_INT 45
5558: PPUSH
5559: LD_INT 34
5561: PPUSH
5562: LD_STRING jeddah
5564: PPUSH
5565: LD_VAR 0 8
5569: PPUSH
5570: LD_INT 2100
5572: PUSH
5573: LD_INT 300
5575: PUSH
5576: LD_INT 10
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: LIST
5583: PPUSH
5584: LD_INT 12
5586: PUSH
5587: LD_INT 4
5589: PUSH
5590: LD_INT 3
5592: PUSH
5593: LD_INT 2
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL 25694 0 6
5606: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5607: LD_ADDR_EXP 35
5611: PUSH
5612: LD_INT 7
5614: PPUSH
5615: LD_INT 33
5617: PPUSH
5618: LD_STRING riyadh
5620: PPUSH
5621: LD_VAR 0 8
5625: PPUSH
5626: LD_INT 500
5628: PUSH
5629: LD_INT 60
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: PPUSH
5640: LD_INT 8
5642: PUSH
5643: LD_INT 2
5645: PUSH
5646: LD_INT 3
5648: PUSH
5649: LD_INT 1
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL 25694 0 6
5662: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5663: LD_ADDR_EXP 38
5667: PUSH
5668: LD_INT 69
5670: PPUSH
5671: LD_INT 36
5673: PPUSH
5674: LD_STRING 
5676: PPUSH
5677: LD_VAR 0 8
5681: PPUSH
5682: LD_INT 500
5684: PUSH
5685: LD_INT 50
5687: PUSH
5688: LD_INT 0
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: PPUSH
5696: LD_INT 11
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: LD_INT 4
5704: PUSH
5705: LD_INT 1
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL 25694 0 6
5718: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5719: LD_ADDR_OWVAR 37
5723: PUSH
5724: LD_INT 14
5726: ST_TO_ADDR
// vc_engine := engine_siberite ;
5727: LD_ADDR_OWVAR 39
5731: PUSH
5732: LD_INT 3
5734: ST_TO_ADDR
// vc_control := control_manual ;
5735: LD_ADDR_OWVAR 38
5739: PUSH
5740: LD_INT 1
5742: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5743: LD_ADDR_OWVAR 40
5747: PUSH
5748: LD_INT 31
5750: ST_TO_ADDR
// for i = 1 to 4 do
5751: LD_ADDR_VAR 0 3
5755: PUSH
5756: DOUBLE
5757: LD_INT 1
5759: DEC
5760: ST_TO_ADDR
5761: LD_INT 4
5763: PUSH
5764: FOR_TO
5765: IFFALSE 5914
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: LD_INT 156
5774: PUSH
5775: LD_INT 15
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: PUSH
5782: LD_INT 12
5784: PUSH
5785: LD_INT 7
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_VAR 0 3
5800: PUSH
5801: LD_INT 2
5803: MOD
5804: PUSH
5805: LD_INT 1
5807: PLUS
5808: ARRAY
5809: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5810: LD_INT 0
5812: PPUSH
5813: LD_INT 3
5815: PPUSH
5816: LD_VAR 0 8
5820: PPUSH
5821: CALL_OW 380
// un := CreateVehicle ;
5825: LD_ADDR_VAR 0 6
5829: PUSH
5830: CALL_OW 45
5834: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5835: LD_VAR 0 6
5839: PPUSH
5840: LD_INT 0
5842: PPUSH
5843: LD_INT 5
5845: PPUSH
5846: CALL_OW 12
5850: PPUSH
5851: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5855: LD_VAR 0 6
5859: PPUSH
5860: LD_VAR 0 5
5864: PUSH
5865: LD_INT 1
5867: ARRAY
5868: PPUSH
5869: LD_VAR 0 5
5873: PUSH
5874: LD_INT 2
5876: ARRAY
5877: PPUSH
5878: LD_INT 6
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 50
// un2 := CreateHuman ;
5888: LD_ADDR_VAR 0 7
5892: PUSH
5893: CALL_OW 44
5897: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5898: LD_VAR 0 7
5902: PPUSH
5903: LD_VAR 0 6
5907: PPUSH
5908: CALL_OW 52
// end ;
5912: GO 5764
5914: POP
5915: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5916: LD_ADDR_VAR 0 3
5920: PUSH
5921: LD_INT 22
5923: PUSH
5924: LD_EXP 3
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 30
5935: PUSH
5936: LD_INT 31
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 58
5945: PUSH
5946: EMPTY
5947: LIST
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 69
5958: PUSH
5959: FOR_IN
5960: IFFALSE 6072
// begin d := GetDir ( i ) ;
5962: LD_ADDR_VAR 0 4
5966: PUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: CALL_OW 254
5976: ST_TO_ADDR
// if d < 3 then
5977: LD_VAR 0 4
5981: PUSH
5982: LD_INT 3
5984: LESS
5985: IFFALSE 6003
// d := d + 3 else
5987: LD_ADDR_VAR 0 4
5991: PUSH
5992: LD_VAR 0 4
5996: PUSH
5997: LD_INT 3
5999: PLUS
6000: ST_TO_ADDR
6001: GO 6017
// d := d - 3 ;
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: LD_VAR 0 4
6012: PUSH
6013: LD_INT 3
6015: MINUS
6016: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
6017: LD_INT 0
6019: PPUSH
6020: LD_INT 8
6022: PPUSH
6023: LD_VAR 0 8
6027: PPUSH
6028: CALL_OW 380
// un := CreateHuman ;
6032: LD_ADDR_VAR 0 6
6036: PUSH
6037: CALL_OW 44
6041: ST_TO_ADDR
// SetDir ( un , d ) ;
6042: LD_VAR 0 6
6046: PPUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6056: LD_VAR 0 6
6060: PPUSH
6061: LD_VAR 0 3
6065: PPUSH
6066: CALL_OW 52
// end ;
6070: GO 5959
6072: POP
6073: POP
// ar_force_tmp := [ ] ;
6074: LD_ADDR_EXP 39
6078: PUSH
6079: EMPTY
6080: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 1
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6096: LD_ADDR_OWVAR 33
6100: PUSH
6101: LD_STRING SecondCharsGal
6103: ST_TO_ADDR
// hc_face_number := 4 ;
6104: LD_ADDR_OWVAR 34
6108: PUSH
6109: LD_INT 4
6111: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6112: LD_ADDR_EXP 39
6116: PUSH
6117: LD_EXP 39
6121: PPUSH
6122: LD_INT 1
6124: PPUSH
6125: CALL_OW 44
6129: PPUSH
6130: CALL_OW 1
6134: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6135: LD_INT 2
6137: PPUSH
6138: LD_INT 4
6140: PPUSH
6141: LD_VAR 0 8
6145: PPUSH
6146: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6150: LD_ADDR_OWVAR 33
6154: PUSH
6155: LD_STRING SecondCharsGal
6157: ST_TO_ADDR
// hc_face_number := 15 ;
6158: LD_ADDR_OWVAR 34
6162: PUSH
6163: LD_INT 15
6165: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6166: LD_ADDR_EXP 39
6170: PUSH
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 2
6178: PPUSH
6179: CALL_OW 44
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6189: LD_INT 2
6191: PPUSH
6192: LD_INT 4
6194: PPUSH
6195: LD_VAR 0 8
6199: PPUSH
6200: CALL_OW 380
// hc_gallery :=  ;
6204: LD_ADDR_OWVAR 33
6208: PUSH
6209: LD_STRING 
6211: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6212: LD_ADDR_EXP 39
6216: PUSH
6217: LD_EXP 39
6221: PPUSH
6222: LD_INT 3
6224: PPUSH
6225: CALL_OW 44
6229: PPUSH
6230: CALL_OW 1
6234: ST_TO_ADDR
// hc_sex := sex_male ;
6235: LD_ADDR_OWVAR 27
6239: PUSH
6240: LD_INT 1
6242: ST_TO_ADDR
// hc_class = 11 ;
6243: LD_ADDR_OWVAR 28
6247: PUSH
6248: LD_INT 11
6250: ST_TO_ADDR
// hc_gallery = sandar ;
6251: LD_ADDR_OWVAR 33
6255: PUSH
6256: LD_STRING sandar
6258: ST_TO_ADDR
// hc_face_number = 33 ;
6259: LD_ADDR_OWVAR 34
6263: PUSH
6264: LD_INT 33
6266: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6267: LD_ADDR_OWVAR 26
6271: PUSH
6272: LD_STRING Thabit Muhair Saliba
6274: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6275: LD_ADDR_OWVAR 31
6279: PUSH
6280: LD_INT 5
6282: PUSH
6283: LD_INT 5
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: ST_TO_ADDR
// Saliba := CreateHuman ;
6298: LD_ADDR_EXP 41
6302: PUSH
6303: CALL_OW 44
6307: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6308: LD_EXP 41
6312: PPUSH
6313: LD_INT 7
6315: PPUSH
6316: CALL_OW 52
// hc_name := Dietrich Gensher ;
6320: LD_ADDR_OWVAR 26
6324: PUSH
6325: LD_STRING Dietrich Gensher
6327: ST_TO_ADDR
// hc_class := 1 ;
6328: LD_ADDR_OWVAR 28
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// hc_gallery := sandar ;
6336: LD_ADDR_OWVAR 33
6340: PUSH
6341: LD_STRING sandar
6343: ST_TO_ADDR
// hc_face_number := 4 ;
6344: LD_ADDR_OWVAR 34
6348: PUSH
6349: LD_INT 4
6351: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6352: LD_ADDR_OWVAR 31
6356: PUSH
6357: LD_INT 10
6359: PUSH
6360: LD_INT 6
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: LD_INT 4
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: ST_TO_ADDR
// Gensher := CreateHuman ;
6375: LD_ADDR_EXP 42
6379: PUSH
6380: CALL_OW 44
6384: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6385: LD_EXP 42
6389: PPUSH
6390: LD_INT 45
6392: PPUSH
6393: CALL_OW 52
// hc_name := Abdul Shariff ;
6397: LD_ADDR_OWVAR 26
6401: PUSH
6402: LD_STRING Abdul Shariff
6404: ST_TO_ADDR
// hc_class := 11 ;
6405: LD_ADDR_OWVAR 28
6409: PUSH
6410: LD_INT 11
6412: ST_TO_ADDR
// hc_gallery := sandar ;
6413: LD_ADDR_OWVAR 33
6417: PUSH
6418: LD_STRING sandar
6420: ST_TO_ADDR
// hc_face_number := 5 ;
6421: LD_ADDR_OWVAR 34
6425: PUSH
6426: LD_INT 5
6428: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6429: LD_ADDR_OWVAR 31
6433: PUSH
6434: LD_INT 6
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: LD_INT 3
6442: PUSH
6443: LD_INT 3
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: ST_TO_ADDR
// Shariff := CreateHuman ;
6452: LD_ADDR_EXP 43
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6462: LD_EXP 43
6466: PPUSH
6467: LD_INT 94
6469: PPUSH
6470: CALL_OW 52
// InitHc ;
6474: CALL_OW 19
// for d := 1 to 5 do
6478: LD_ADDR_VAR 0 4
6482: PUSH
6483: DOUBLE
6484: LD_INT 1
6486: DEC
6487: ST_TO_ADDR
6488: LD_INT 5
6490: PUSH
6491: FOR_TO
6492: IFFALSE 6976
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6494: LD_ADDR_VAR 0 11
6498: PUSH
6499: LD_EXP 51
6503: PUSH
6504: LD_VAR 0 4
6508: ARRAY
6509: PPUSH
6510: LD_INT 30
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PPUSH
6520: CALL_OW 70
6524: ST_TO_ADDR
// if fac then
6525: LD_VAR 0 11
6529: IFFALSE 6562
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6531: LD_ADDR_EXP 50
6535: PUSH
6536: LD_EXP 50
6540: PPUSH
6541: LD_VAR 0 4
6545: PPUSH
6546: LD_VAR 0 11
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PPUSH
6555: CALL_OW 1
6559: ST_TO_ADDR
6560: GO 6585
// arFactories := Replace ( arFactories , d , 0 ) ;
6562: LD_ADDR_EXP 50
6566: PUSH
6567: LD_EXP 50
6571: PPUSH
6572: LD_VAR 0 4
6576: PPUSH
6577: LD_INT 0
6579: PPUSH
6580: CALL_OW 1
6584: ST_TO_ADDR
// for i := 1 to 2 do
6585: LD_ADDR_VAR 0 3
6589: PUSH
6590: DOUBLE
6591: LD_INT 1
6593: DEC
6594: ST_TO_ADDR
6595: LD_INT 2
6597: PUSH
6598: FOR_TO
6599: IFFALSE 6742
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6601: LD_INT 14
6603: PPUSH
6604: LD_INT 3
6606: PPUSH
6607: LD_INT 2
6609: PPUSH
6610: LD_INT 88
6612: PPUSH
6613: LD_INT 100
6615: PPUSH
6616: CALL 21873 0 5
// un := CreateVehicle ;
6620: LD_ADDR_VAR 0 6
6624: PUSH
6625: CALL_OW 45
6629: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6630: LD_ADDR_EXP 47
6634: PUSH
6635: LD_EXP 47
6639: PPUSH
6640: LD_EXP 47
6644: PUSH
6645: LD_INT 1
6647: PLUS
6648: PPUSH
6649: LD_VAR 0 4
6653: PUSH
6654: LD_VAR 0 6
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 1
6667: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6668: LD_VAR 0 6
6672: PPUSH
6673: LD_INT 0
6675: PPUSH
6676: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6680: LD_VAR 0 6
6684: PPUSH
6685: LD_INT 0
6687: PPUSH
6688: LD_INT 5
6690: PPUSH
6691: CALL_OW 12
6695: PPUSH
6696: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6700: LD_VAR 0 6
6704: PPUSH
6705: LD_INT 24
6707: PUSH
6708: LD_INT 20
6710: PUSH
6711: LD_INT 21
6713: PUSH
6714: LD_INT 22
6716: PUSH
6717: LD_INT 46
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_VAR 0 4
6731: ARRAY
6732: PPUSH
6733: LD_INT 0
6735: PPUSH
6736: CALL_OW 49
// end ;
6740: GO 6598
6742: POP
6743: POP
// for i := 1 to 4 do
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: DOUBLE
6750: LD_INT 1
6752: DEC
6753: ST_TO_ADDR
6754: LD_INT 4
6756: PUSH
6757: FOR_TO
6758: IFFALSE 6972
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6760: LD_INT 14
6762: PPUSH
6763: LD_INT 3
6765: PUSH
6766: LD_INT 3
6768: PUSH
6769: LD_INT 2
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 1
6779: PPUSH
6780: LD_INT 3
6782: PPUSH
6783: CALL_OW 12
6787: ARRAY
6788: PPUSH
6789: LD_INT 1
6791: PUSH
6792: LD_INT 5
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 1
6801: PPUSH
6802: LD_INT 2
6804: PPUSH
6805: CALL_OW 12
6809: ARRAY
6810: PPUSH
6811: LD_INT 25
6813: PUSH
6814: LD_INT 27
6816: PUSH
6817: LD_INT 26
6819: PUSH
6820: LD_INT 28
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: LD_VAR 0 3
6833: PUSH
6834: LD_INT 4
6836: MOD
6837: PUSH
6838: LD_INT 1
6840: PLUS
6841: ARRAY
6842: PPUSH
6843: LD_INT 100
6845: PPUSH
6846: CALL 21873 0 5
// un := CreateVehicle ;
6850: LD_ADDR_VAR 0 6
6854: PUSH
6855: CALL_OW 45
6859: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6860: LD_ADDR_EXP 47
6864: PUSH
6865: LD_EXP 47
6869: PPUSH
6870: LD_EXP 47
6874: PUSH
6875: LD_INT 1
6877: PLUS
6878: PPUSH
6879: LD_VAR 0 4
6883: PUSH
6884: LD_VAR 0 6
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: CALL_OW 1
6897: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6898: LD_VAR 0 6
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6910: LD_VAR 0 6
6914: PPUSH
6915: LD_INT 0
6917: PPUSH
6918: LD_INT 5
6920: PPUSH
6921: CALL_OW 12
6925: PPUSH
6926: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6930: LD_VAR 0 6
6934: PPUSH
6935: LD_INT 24
6937: PUSH
6938: LD_INT 20
6940: PUSH
6941: LD_INT 21
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_INT 46
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: LD_VAR 0 4
6961: ARRAY
6962: PPUSH
6963: LD_INT 0
6965: PPUSH
6966: CALL_OW 49
// end ;
6970: GO 6757
6972: POP
6973: POP
// end ;
6974: GO 6491
6976: POP
6977: POP
// InitHc ;
6978: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6982: LD_ADDR_VAR 0 9
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 2
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if tmp and side <> 2 then
7002: LD_VAR 0 9
7006: PUSH
7007: LD_VAR 0 1
7011: PUSH
7012: LD_INT 2
7014: NONEQUAL
7015: AND
7016: IFFALSE 7049
// begin for i in tmp do
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: LD_VAR 0 9
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7047
// SetSide ( i , side ) ;
7031: LD_VAR 0 3
7035: PPUSH
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 235
7045: GO 7028
7047: POP
7048: POP
// end ; end ;
7049: LD_VAR 0 2
7053: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
7054: LD_INT 0
7056: PPUSH
7057: PPUSH
7058: PPUSH
7059: PPUSH
// tmp := AreaToList ( area , 0 ) ;
7060: LD_ADDR_VAR 0 5
7064: PUSH
7065: LD_VAR 0 1
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: CALL_OW 517
7077: ST_TO_ADDR
// if not tmp then
7078: LD_VAR 0 5
7082: NOT
7083: IFFALSE 7087
// exit ;
7085: GO 7325
// for i := 1 to n do
7087: LD_ADDR_VAR 0 4
7091: PUSH
7092: DOUBLE
7093: LD_INT 1
7095: DEC
7096: ST_TO_ADDR
7097: LD_VAR 0 2
7101: PUSH
7102: FOR_TO
7103: IFFALSE 7323
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7105: LD_ADDR_VAR 0 6
7109: PUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_VAR 0 5
7117: PUSH
7118: LD_INT 1
7120: ARRAY
7121: PPUSH
7122: CALL_OW 12
7126: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7127: LD_VAR 0 5
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PUSH
7136: LD_VAR 0 6
7140: ARRAY
7141: PPUSH
7142: LD_VAR 0 5
7146: PUSH
7147: LD_INT 2
7149: ARRAY
7150: PUSH
7151: LD_VAR 0 6
7155: ARRAY
7156: PPUSH
7157: LD_EXP 3
7161: PPUSH
7162: LD_INT 0
7164: PPUSH
7165: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7169: LD_ADDR_EXP 53
7173: PUSH
7174: LD_EXP 53
7178: PPUSH
7179: LD_EXP 53
7183: PUSH
7184: LD_INT 1
7186: PLUS
7187: PPUSH
7188: LD_VAR 0 5
7192: PUSH
7193: LD_INT 1
7195: ARRAY
7196: PUSH
7197: LD_VAR 0 6
7201: ARRAY
7202: PPUSH
7203: CALL_OW 2
7207: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7208: LD_ADDR_EXP 53
7212: PUSH
7213: LD_EXP 53
7217: PPUSH
7218: LD_EXP 53
7222: PUSH
7223: LD_INT 1
7225: PLUS
7226: PPUSH
7227: LD_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: ARRAY
7235: PUSH
7236: LD_VAR 0 6
7240: ARRAY
7241: PPUSH
7242: CALL_OW 2
7246: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7247: LD_ADDR_VAR 0 5
7251: PUSH
7252: LD_VAR 0 5
7256: PPUSH
7257: LD_INT 1
7259: PPUSH
7260: LD_VAR 0 5
7264: PUSH
7265: LD_INT 1
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 6
7273: PPUSH
7274: CALL_OW 3
7278: PPUSH
7279: CALL_OW 1
7283: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7284: LD_ADDR_VAR 0 5
7288: PUSH
7289: LD_VAR 0 5
7293: PPUSH
7294: LD_INT 2
7296: PPUSH
7297: LD_VAR 0 5
7301: PUSH
7302: LD_INT 2
7304: ARRAY
7305: PPUSH
7306: LD_VAR 0 6
7310: PPUSH
7311: CALL_OW 3
7315: PPUSH
7316: CALL_OW 1
7320: ST_TO_ADDR
// end ;
7321: GO 7102
7323: POP
7324: POP
// end ;
7325: LD_VAR 0 3
7329: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7330: LD_INT 0
7332: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7333: LD_ADDR_EXP 44
7337: PUSH
7338: LD_EXP 3
7342: PPUSH
7343: LD_INT 2
7345: PPUSH
7346: LD_INT 1
7348: PPUSH
7349: CALL 17096 0 3
7353: ST_TO_ADDR
// arConstructList := [ ] ;
7354: LD_ADDR_EXP 45
7358: PUSH
7359: EMPTY
7360: ST_TO_ADDR
// arBuildings := [ ] ;
7361: LD_ADDR_EXP 46
7365: PUSH
7366: EMPTY
7367: ST_TO_ADDR
// arVehicles := [ ] ;
7368: LD_ADDR_EXP 47
7372: PUSH
7373: EMPTY
7374: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7375: LD_ADDR_EXP 48
7379: PUSH
7380: EMPTY
7381: ST_TO_ADDR
// arDrivers := [ ] ;
7382: LD_ADDR_EXP 49
7386: PUSH
7387: EMPTY
7388: ST_TO_ADDR
// arFactories := [ ] ;
7389: LD_ADDR_EXP 50
7393: PUSH
7394: EMPTY
7395: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7396: LD_ADDR_EXP 51
7400: PUSH
7401: LD_INT 33
7403: PUSH
7404: LD_INT 35
7406: PUSH
7407: LD_INT 34
7409: PUSH
7410: LD_INT 36
7412: PUSH
7413: LD_INT 38
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7423: LD_ADDR_EXP 52
7427: PUSH
7428: LD_INT 6
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: LD_INT 6
7436: PUSH
7437: LD_INT 6
7439: PUSH
7440: LD_INT 2
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: ST_TO_ADDR
// arMinesList := [ ] ;
7450: LD_ADDR_EXP 53
7454: PUSH
7455: EMPTY
7456: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7457: LD_INT 1
7459: PPUSH
7460: LD_INT 7
7462: PUSH
7463: LD_INT 9
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: LD_OWVAR 67
7478: ARRAY
7479: PPUSH
7480: CALL 7054 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7484: LD_INT 3
7486: PPUSH
7487: LD_INT 7
7489: PUSH
7490: LD_INT 9
7492: PUSH
7493: LD_INT 9
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: PUSH
7501: LD_OWVAR 67
7505: ARRAY
7506: PPUSH
7507: CALL 7054 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7511: LD_INT 2
7513: PPUSH
7514: LD_INT 6
7516: PUSH
7517: LD_INT 8
7519: PUSH
7520: LD_INT 12
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_OWVAR 67
7532: ARRAY
7533: PPUSH
7534: CALL 7054 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7538: LD_INT 39
7540: PPUSH
7541: LD_INT 5
7543: PUSH
7544: LD_INT 7
7546: PUSH
7547: LD_INT 9
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: LD_OWVAR 67
7559: ARRAY
7560: PPUSH
7561: CALL 7054 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7565: LD_INT 25
7567: PPUSH
7568: LD_INT 4
7570: PUSH
7571: LD_INT 6
7573: PUSH
7574: LD_INT 8
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_OWVAR 67
7586: ARRAY
7587: PPUSH
7588: CALL 7054 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7592: LD_INT 41
7594: PPUSH
7595: LD_INT 12
7597: PUSH
7598: LD_INT 14
7600: PUSH
7601: LD_INT 16
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: LD_OWVAR 67
7613: ARRAY
7614: PPUSH
7615: CALL 7054 0 2
// end ;
7619: LD_VAR 0 1
7623: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7624: LD_INT 0
7626: PPUSH
7627: PPUSH
7628: PPUSH
7629: PPUSH
7630: PPUSH
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
7635: PPUSH
7636: PPUSH
7637: PPUSH
7638: PPUSH
7639: PPUSH
7640: PPUSH
7641: PPUSH
7642: PPUSH
7643: PPUSH
7644: PPUSH
7645: PPUSH
7646: PPUSH
7647: PPUSH
7648: PPUSH
7649: PPUSH
7650: PPUSH
7651: PPUSH
7652: PPUSH
// enable ;
7653: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7654: LD_ADDR_VAR 0 10
7658: PUSH
7659: LD_INT 81
7661: PUSH
7662: LD_VAR 0 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PPUSH
7671: CALL_OW 69
7675: ST_TO_ADDR
// if tmp then
7676: LD_VAR 0 10
7680: IFFALSE 7701
// enemySide := GetSide ( tmp [ 1 ] ) ;
7682: LD_ADDR_VAR 0 34
7686: PUSH
7687: LD_VAR 0 10
7691: PUSH
7692: LD_INT 1
7694: ARRAY
7695: PPUSH
7696: CALL_OW 255
7700: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7701: LD_ADDR_VAR 0 22
7705: PUSH
7706: LD_VAR 0 3
7710: PPUSH
7711: LD_INT 81
7713: PUSH
7714: LD_VAR 0 1
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PPUSH
7723: CALL_OW 70
7727: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7728: LD_ADDR_VAR 0 23
7732: PUSH
7733: LD_VAR 0 4
7737: PPUSH
7738: LD_INT 81
7740: PUSH
7741: LD_VAR 0 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 70
7754: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7755: LD_ADDR_VAR 0 26
7759: PUSH
7760: LD_EXP 47
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: LD_INT 2
7775: PPUSH
7776: CALL 59430 0 4
7780: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7781: LD_ADDR_VAR 0 32
7785: PUSH
7786: LD_VAR 0 3
7790: PPUSH
7791: LD_INT 22
7793: PUSH
7794: LD_VAR 0 1
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: LD_INT 30
7808: PUSH
7809: LD_INT 0
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 30
7818: PUSH
7819: LD_INT 1
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PPUSH
7835: CALL_OW 70
7839: ST_TO_ADDR
// if depot then
7840: LD_VAR 0 32
7844: IFFALSE 7860
// depot := depot [ 1 ] ;
7846: LD_ADDR_VAR 0 32
7850: PUSH
7851: LD_VAR 0 32
7855: PUSH
7856: LD_INT 1
7858: ARRAY
7859: ST_TO_ADDR
// if arTech then
7860: LD_EXP 44
7864: IFFALSE 8023
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7866: LD_ADDR_VAR 0 12
7870: PUSH
7871: LD_VAR 0 3
7875: PPUSH
7876: LD_INT 22
7878: PUSH
7879: LD_VAR 0 1
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 50
7890: PUSH
7891: EMPTY
7892: LIST
7893: PUSH
7894: LD_INT 2
7896: PUSH
7897: LD_INT 30
7899: PUSH
7900: LD_INT 6
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 30
7909: PUSH
7910: LD_INT 7
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 30
7919: PUSH
7920: LD_INT 8
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: PPUSH
7938: CALL_OW 70
7942: ST_TO_ADDR
// if lab then
7943: LD_VAR 0 12
7947: IFFALSE 8023
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7949: LD_VAR 0 12
7953: PUSH
7954: LD_INT 1
7956: ARRAY
7957: PPUSH
7958: CALL_OW 461
7962: PUSH
7963: LD_INT 2
7965: EQUAL
7966: IFFALSE 8023
// begin for i in arTech do
7968: LD_ADDR_VAR 0 9
7972: PUSH
7973: LD_EXP 44
7977: PUSH
7978: FOR_IN
7979: IFFALSE 8021
// if CanBeResearched ( lab [ 1 ] , i ) then
7981: LD_VAR 0 12
7985: PUSH
7986: LD_INT 1
7988: ARRAY
7989: PPUSH
7990: LD_VAR 0 9
7994: PPUSH
7995: CALL_OW 430
7999: IFFALSE 8019
// begin AddComResearch ( lab [ 1 ] , i ) ;
8001: LD_VAR 0 12
8005: PUSH
8006: LD_INT 1
8008: ARRAY
8009: PPUSH
8010: LD_VAR 0 9
8014: PPUSH
8015: CALL_OW 184
// end ;
8019: GO 7978
8021: POP
8022: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
8023: LD_ADDR_VAR 0 29
8027: PUSH
8028: LD_VAR 0 3
8032: PPUSH
8033: LD_INT 22
8035: PUSH
8036: LD_VAR 0 1
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 30
8047: PUSH
8048: LD_INT 3
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 50
8057: PUSH
8058: EMPTY
8059: LIST
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: PPUSH
8066: CALL_OW 70
8070: ST_TO_ADDR
// if fac then
8071: LD_VAR 0 29
8075: IFFALSE 8464
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8077: LD_VAR 0 29
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PPUSH
8086: CALL_OW 461
8090: PUSH
8091: LD_INT 2
8093: EQUAL
8094: IFFALSE 8464
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8096: LD_ADDR_VAR 0 30
8100: PUSH
8101: LD_VAR 0 3
8105: PPUSH
8106: LD_INT 2
8108: PUSH
8109: LD_INT 30
8111: PUSH
8112: LD_INT 32
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_INT 30
8121: PUSH
8122: LD_INT 33
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: LD_INT 35
8136: PUSH
8137: LD_INT 0
8139: PUSH
8140: EMPTY
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 70
8152: ST_TO_ADDR
// if emptyTowers then
8153: LD_VAR 0 30
8157: IFFALSE 8207
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8159: LD_ADDR_VAR 0 31
8163: PUSH
8164: LD_VAR 0 30
8168: PUSH
8169: LD_INT 1
8171: ARRAY
8172: PPUSH
8173: LD_VAR 0 3
8177: PPUSH
8178: CALL 27380 0 2
8182: ST_TO_ADDR
// if weapon then
8183: LD_VAR 0 31
8187: IFFALSE 8207
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8189: LD_VAR 0 30
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_VAR 0 31
8202: PPUSH
8203: CALL_OW 148
// end ; if arConstructList then
8207: LD_EXP 45
8211: IFFALSE 8464
// for i := 1 to Count ( arConstructList ) do
8213: LD_ADDR_VAR 0 9
8217: PUSH
8218: DOUBLE
8219: LD_INT 1
8221: DEC
8222: ST_TO_ADDR
8223: LD_EXP 45
8227: PPUSH
8228: CALL 19135 0 1
8232: PUSH
8233: FOR_TO
8234: IFFALSE 8462
// begin if arConstructList [ i ] [ 1 ] = base then
8236: LD_EXP 45
8240: PUSH
8241: LD_VAR 0 9
8245: ARRAY
8246: PUSH
8247: LD_INT 1
8249: ARRAY
8250: PUSH
8251: LD_VAR 0 2
8255: EQUAL
8256: IFFALSE 8460
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8258: LD_VAR 0 29
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_EXP 45
8271: PUSH
8272: LD_VAR 0 9
8276: ARRAY
8277: PUSH
8278: LD_INT 2
8280: ARRAY
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PPUSH
8286: LD_EXP 45
8290: PUSH
8291: LD_VAR 0 9
8295: ARRAY
8296: PUSH
8297: LD_INT 2
8299: ARRAY
8300: PUSH
8301: LD_INT 2
8303: ARRAY
8304: PPUSH
8305: LD_EXP 45
8309: PUSH
8310: LD_VAR 0 9
8314: ARRAY
8315: PUSH
8316: LD_INT 2
8318: ARRAY
8319: PUSH
8320: LD_INT 3
8322: ARRAY
8323: PPUSH
8324: LD_EXP 45
8328: PUSH
8329: LD_VAR 0 9
8333: ARRAY
8334: PUSH
8335: LD_INT 2
8337: ARRAY
8338: PUSH
8339: LD_INT 4
8341: ARRAY
8342: PPUSH
8343: CALL_OW 448
8347: IFFALSE 8460
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8349: LD_VAR 0 29
8353: PUSH
8354: LD_INT 1
8356: ARRAY
8357: PPUSH
8358: LD_EXP 45
8362: PUSH
8363: LD_VAR 0 9
8367: ARRAY
8368: PUSH
8369: LD_INT 2
8371: ARRAY
8372: PUSH
8373: LD_INT 1
8375: ARRAY
8376: PPUSH
8377: LD_EXP 45
8381: PUSH
8382: LD_VAR 0 9
8386: ARRAY
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PUSH
8392: LD_INT 2
8394: ARRAY
8395: PPUSH
8396: LD_EXP 45
8400: PUSH
8401: LD_VAR 0 9
8405: ARRAY
8406: PUSH
8407: LD_INT 2
8409: ARRAY
8410: PUSH
8411: LD_INT 3
8413: ARRAY
8414: PPUSH
8415: LD_EXP 45
8419: PUSH
8420: LD_VAR 0 9
8424: ARRAY
8425: PUSH
8426: LD_INT 2
8428: ARRAY
8429: PUSH
8430: LD_INT 4
8432: ARRAY
8433: PPUSH
8434: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8438: LD_ADDR_EXP 45
8442: PUSH
8443: LD_EXP 45
8447: PPUSH
8448: LD_VAR 0 9
8452: PPUSH
8453: CALL_OW 3
8457: ST_TO_ADDR
// break ;
8458: GO 8462
// end ; end ;
8460: GO 8233
8462: POP
8463: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8464: LD_ADDR_VAR 0 10
8468: PUSH
8469: LD_VAR 0 3
8473: PPUSH
8474: LD_INT 21
8476: PUSH
8477: LD_INT 3
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 3
8486: PUSH
8487: LD_INT 57
8489: PUSH
8490: EMPTY
8491: LIST
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 3
8499: PUSH
8500: LD_INT 24
8502: PUSH
8503: LD_INT 1000
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL_OW 70
8523: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8524: LD_ADDR_VAR 0 17
8528: PUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: CALL_OW 435
8538: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8539: LD_ADDR_VAR 0 14
8543: PUSH
8544: LD_VAR 0 5
8548: PPUSH
8549: LD_INT 25
8551: PUSH
8552: LD_INT 3
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 50
8561: PUSH
8562: EMPTY
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PPUSH
8569: CALL_OW 72
8573: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8574: LD_VAR 0 14
8578: PPUSH
8579: LD_INT 3
8581: PUSH
8582: LD_INT 120
8584: PUSH
8585: LD_INT 7
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 3
8598: PUSH
8599: LD_INT 54
8601: PUSH
8602: EMPTY
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 72
8617: PUSH
8618: LD_EXP 50
8622: PUSH
8623: LD_VAR 0 2
8627: ARRAY
8628: PPUSH
8629: CALL_OW 302
8633: AND
8634: IFFALSE 8695
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8636: LD_VAR 0 14
8640: PPUSH
8641: LD_INT 3
8643: PUSH
8644: LD_INT 120
8646: PUSH
8647: LD_INT 7
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 3
8660: PUSH
8661: LD_INT 54
8663: PUSH
8664: EMPTY
8665: LIST
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PPUSH
8675: CALL_OW 72
8679: PPUSH
8680: LD_EXP 50
8684: PUSH
8685: LD_VAR 0 2
8689: ARRAY
8690: PPUSH
8691: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8695: LD_ADDR_VAR 0 18
8699: PUSH
8700: LD_VAR 0 5
8704: PPUSH
8705: LD_INT 25
8707: PUSH
8708: LD_INT 4
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 50
8717: PUSH
8718: EMPTY
8719: LIST
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PPUSH
8725: CALL_OW 72
8729: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8730: LD_ADDR_VAR 0 12
8734: PUSH
8735: LD_VAR 0 3
8739: PPUSH
8740: LD_INT 2
8742: PUSH
8743: LD_INT 30
8745: PUSH
8746: LD_INT 6
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 30
8755: PUSH
8756: LD_INT 7
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 30
8765: PUSH
8766: LD_INT 8
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 70
8783: ST_TO_ADDR
// if sci then
8784: LD_VAR 0 18
8788: IFFALSE 8949
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8790: LD_ADDR_VAR 0 20
8794: PUSH
8795: LD_VAR 0 5
8799: PPUSH
8800: LD_INT 95
8802: PUSH
8803: LD_VAR 0 3
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 120
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: PPUSH
8826: CALL_OW 72
8830: ST_TO_ADDR
// if hurtUnits then
8831: LD_VAR 0 20
8835: IFFALSE 8896
// begin for i in sci do
8837: LD_ADDR_VAR 0 9
8841: PUSH
8842: LD_VAR 0 18
8846: PUSH
8847: FOR_IN
8848: IFFALSE 8892
// if IsInUnit ( i ) then
8850: LD_VAR 0 9
8854: PPUSH
8855: CALL_OW 310
8859: IFFALSE 8872
// ComExitBuilding ( i ) else
8861: LD_VAR 0 9
8865: PPUSH
8866: CALL_OW 122
8870: GO 8890
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8872: LD_VAR 0 9
8876: PPUSH
8877: LD_VAR 0 20
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: CALL_OW 128
8890: GO 8847
8892: POP
8893: POP
// end else
8894: GO 8949
// if lab then
8896: LD_VAR 0 12
8900: IFFALSE 8949
// begin for i in sci do
8902: LD_ADDR_VAR 0 9
8906: PUSH
8907: LD_VAR 0 18
8911: PUSH
8912: FOR_IN
8913: IFFALSE 8947
// if not IsInUnit ( i ) then
8915: LD_VAR 0 9
8919: PPUSH
8920: CALL_OW 310
8924: NOT
8925: IFFALSE 8945
// ComEnterUnit ( i , lab [ 1 ] ) ;
8927: LD_VAR 0 9
8931: PPUSH
8932: LD_VAR 0 12
8936: PUSH
8937: LD_INT 1
8939: ARRAY
8940: PPUSH
8941: CALL_OW 120
8945: GO 8912
8947: POP
8948: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8949: LD_ADDR_VAR 0 13
8953: PUSH
8954: LD_VAR 0 5
8958: PPUSH
8959: LD_INT 25
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PPUSH
8969: CALL_OW 72
8973: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8974: LD_ADDR_VAR 0 33
8978: PUSH
8979: LD_EXP 46
8983: PPUSH
8984: LD_INT 1
8986: PPUSH
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_INT 2
8994: PPUSH
8995: CALL 59430 0 4
8999: ST_TO_ADDR
// if eng then
9000: LD_VAR 0 13
9004: IFFALSE 9838
// begin for i in eng do
9006: LD_ADDR_VAR 0 9
9010: PUSH
9011: LD_VAR 0 13
9015: PUSH
9016: FOR_IN
9017: IFFALSE 9836
// begin tag := GetTag ( i ) ;
9019: LD_ADDR_VAR 0 15
9023: PUSH
9024: LD_VAR 0 9
9028: PPUSH
9029: CALL_OW 110
9033: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
9034: LD_VAR 0 9
9038: PPUSH
9039: LD_VAR 0 4
9043: PPUSH
9044: CALL_OW 308
9048: IFFALSE 9079
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9050: LD_VAR 0 9
9054: PPUSH
9055: LD_VAR 0 7
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PPUSH
9064: LD_VAR 0 7
9068: PUSH
9069: LD_INT 2
9071: ARRAY
9072: PPUSH
9073: CALL_OW 111
// continue ;
9077: GO 9016
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9079: LD_VAR 0 9
9083: PPUSH
9084: CALL_OW 256
9088: PUSH
9089: LD_INT 800
9091: LESS
9092: PUSH
9093: LD_VAR 0 15
9097: PUSH
9098: LD_INT 1
9100: NONEQUAL
9101: AND
9102: IFFALSE 9152
// begin SetTag ( i , tHeal ) ;
9104: LD_VAR 0 9
9108: PPUSH
9109: LD_INT 1
9111: PPUSH
9112: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9116: LD_VAR 0 9
9120: PPUSH
9121: LD_VAR 0 6
9125: PUSH
9126: LD_INT 1
9128: ARRAY
9129: PPUSH
9130: LD_VAR 0 6
9134: PUSH
9135: LD_INT 2
9137: ARRAY
9138: PPUSH
9139: CALL_OW 111
// AddComHold ( i ) ;
9143: LD_VAR 0 9
9147: PPUSH
9148: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9152: LD_VAR 0 15
9156: PUSH
9157: LD_INT 1
9159: EQUAL
9160: PUSH
9161: LD_VAR 0 9
9165: PPUSH
9166: CALL_OW 256
9170: PUSH
9171: LD_INT 1000
9173: EQUAL
9174: AND
9175: IFFALSE 9189
// SetTag ( i , 0 ) ;
9177: LD_VAR 0 9
9181: PPUSH
9182: LD_INT 0
9184: PPUSH
9185: CALL_OW 109
// if not tag then
9189: LD_VAR 0 15
9193: NOT
9194: IFFALSE 9361
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9196: LD_ADDR_VAR 0 11
9200: PUSH
9201: LD_VAR 0 3
9205: PPUSH
9206: LD_INT 57
9208: PUSH
9209: EMPTY
9210: LIST
9211: PPUSH
9212: CALL_OW 70
9216: ST_TO_ADDR
// if undone then
9217: LD_VAR 0 11
9221: IFFALSE 9243
// begin ComComplete ( i , undone [ 1 ] ) ;
9223: LD_VAR 0 9
9227: PPUSH
9228: LD_VAR 0 11
9232: PUSH
9233: LD_INT 1
9235: ARRAY
9236: PPUSH
9237: CALL 25233 0 2
// continue ;
9241: GO 9016
// end ; if cr or tmp or buildingsToBuild then
9243: LD_VAR 0 17
9247: PUSH
9248: LD_VAR 0 10
9252: OR
9253: PUSH
9254: LD_VAR 0 33
9258: OR
9259: IFFALSE 9335
// begin if IsInUnit ( i ) then
9261: LD_VAR 0 9
9265: PPUSH
9266: CALL_OW 310
9270: IFFALSE 9281
// ComExitBuilding ( i ) ;
9272: LD_VAR 0 9
9276: PPUSH
9277: CALL_OW 122
// if tmp then
9281: LD_VAR 0 10
9285: IFFALSE 9301
// SetTag ( i , tRepair ) else
9287: LD_VAR 0 9
9291: PPUSH
9292: LD_INT 3
9294: PPUSH
9295: CALL_OW 109
9299: GO 9333
// if cr then
9301: LD_VAR 0 17
9305: IFFALSE 9321
// SetTag ( i , tCrates ) else
9307: LD_VAR 0 9
9311: PPUSH
9312: LD_INT 2
9314: PPUSH
9315: CALL_OW 109
9319: GO 9333
// SetTag ( i , tBuild ) ;
9321: LD_VAR 0 9
9325: PPUSH
9326: LD_INT 5
9328: PPUSH
9329: CALL_OW 109
// end else
9333: GO 9361
// if not IsInUnit ( i ) then
9335: LD_VAR 0 9
9339: PPUSH
9340: CALL_OW 310
9344: NOT
9345: IFFALSE 9361
// ComEnterUnit ( i , depot ) ;
9347: LD_VAR 0 9
9351: PPUSH
9352: LD_VAR 0 32
9356: PPUSH
9357: CALL_OW 120
// end ; if tag = tRepair then
9361: LD_VAR 0 15
9365: PUSH
9366: LD_INT 3
9368: EQUAL
9369: IFFALSE 9475
// begin if IsInUnit ( i ) then
9371: LD_VAR 0 9
9375: PPUSH
9376: CALL_OW 310
9380: IFFALSE 9393
// begin ComExitBuilding ( i ) ;
9382: LD_VAR 0 9
9386: PPUSH
9387: CALL_OW 122
// continue ;
9391: GO 9016
// end ; if not tmp then
9393: LD_VAR 0 10
9397: NOT
9398: IFFALSE 9414
// begin SetTag ( i , 0 ) ;
9400: LD_VAR 0 9
9404: PPUSH
9405: LD_INT 0
9407: PPUSH
9408: CALL_OW 109
// continue ;
9412: GO 9016
// end ; if not HasTask ( i ) then
9414: LD_VAR 0 9
9418: PPUSH
9419: CALL_OW 314
9423: NOT
9424: IFFALSE 9444
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9426: LD_VAR 0 9
9430: PPUSH
9431: LD_VAR 0 10
9435: PUSH
9436: LD_INT 1
9438: ARRAY
9439: PPUSH
9440: CALL_OW 130
// if not IsInArea ( i , area ) then
9444: LD_VAR 0 9
9448: PPUSH
9449: LD_VAR 0 3
9453: PPUSH
9454: CALL_OW 308
9458: NOT
9459: IFFALSE 9475
// ComMoveToArea ( i , area ) ;
9461: LD_VAR 0 9
9465: PPUSH
9466: LD_VAR 0 3
9470: PPUSH
9471: CALL_OW 113
// end ; if tag = tBuild then
9475: LD_VAR 0 15
9479: PUSH
9480: LD_INT 5
9482: EQUAL
9483: IFFALSE 9689
// begin if IsInUnit ( i ) then
9485: LD_VAR 0 9
9489: PPUSH
9490: CALL_OW 310
9494: IFFALSE 9507
// begin ComExitBuilding ( i ) ;
9496: LD_VAR 0 9
9500: PPUSH
9501: CALL_OW 122
// continue ;
9505: GO 9016
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9507: LD_VAR 0 33
9511: NOT
9512: PUSH
9513: LD_VAR 0 22
9517: OR
9518: PUSH
9519: LD_VAR 0 23
9523: OR
9524: IFFALSE 9542
// begin SetTag ( i , 0 ) ;
9526: LD_VAR 0 9
9530: PPUSH
9531: LD_INT 0
9533: PPUSH
9534: CALL_OW 109
// continue ;
9538: GO 9016
// end else
9540: GO 9581
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9542: LD_VAR 0 32
9546: PPUSH
9547: LD_VAR 0 33
9551: PUSH
9552: LD_INT 1
9554: ARRAY
9555: PUSH
9556: LD_INT 1
9558: ARRAY
9559: PPUSH
9560: CALL 58673 0 2
9564: NOT
9565: IFFALSE 9581
// begin SetTag ( i , 0 ) ;
9567: LD_VAR 0 9
9571: PPUSH
9572: LD_INT 0
9574: PPUSH
9575: CALL_OW 109
// continue ;
9579: GO 9016
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9581: LD_ADDR_VAR 0 11
9585: PUSH
9586: LD_VAR 0 3
9590: PPUSH
9591: LD_INT 57
9593: PUSH
9594: EMPTY
9595: LIST
9596: PPUSH
9597: CALL_OW 70
9601: ST_TO_ADDR
// if undone then
9602: LD_VAR 0 11
9606: IFFALSE 9628
// begin ComComplete ( i , undone [ 1 ] ) ;
9608: LD_VAR 0 9
9612: PPUSH
9613: LD_VAR 0 11
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: CALL 25233 0 2
// continue ;
9626: GO 9016
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9628: LD_VAR 0 9
9632: PPUSH
9633: LD_VAR 0 33
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PUSH
9642: LD_INT 1
9644: ARRAY
9645: PPUSH
9646: LD_VAR 0 33
9650: PUSH
9651: LD_INT 1
9653: ARRAY
9654: PUSH
9655: LD_INT 2
9657: ARRAY
9658: PPUSH
9659: LD_VAR 0 33
9663: PUSH
9664: LD_INT 1
9666: ARRAY
9667: PUSH
9668: LD_INT 3
9670: ARRAY
9671: PPUSH
9672: LD_VAR 0 33
9676: PUSH
9677: LD_INT 1
9679: ARRAY
9680: PUSH
9681: LD_INT 4
9683: ARRAY
9684: PPUSH
9685: CALL_OW 145
// end ; if tag = tCrates then
9689: LD_VAR 0 15
9693: PUSH
9694: LD_INT 2
9696: EQUAL
9697: IFFALSE 9834
// begin if IsInUnit ( i ) then
9699: LD_VAR 0 9
9703: PPUSH
9704: CALL_OW 310
9708: IFFALSE 9721
// begin ComExitBuilding ( i ) ;
9710: LD_VAR 0 9
9714: PPUSH
9715: CALL_OW 122
// continue ;
9719: GO 9016
// end ; if not cr then
9721: LD_VAR 0 17
9725: NOT
9726: IFFALSE 9742
// begin SetTag ( i , 0 ) ;
9728: LD_VAR 0 9
9732: PPUSH
9733: LD_INT 0
9735: PPUSH
9736: CALL_OW 109
// continue ;
9740: GO 9016
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9742: LD_VAR 0 9
9746: PPUSH
9747: CALL_OW 314
9751: NOT
9752: PUSH
9753: LD_INT 81
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: EMPTY
9762: LIST
9763: LIST
9764: PUSH
9765: LD_INT 92
9767: PUSH
9768: LD_VAR 0 17
9772: PUSH
9773: LD_INT 1
9775: ARRAY
9776: PUSH
9777: LD_VAR 0 17
9781: PUSH
9782: LD_INT 2
9784: ARRAY
9785: PUSH
9786: LD_INT 12
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 69
9803: NOT
9804: AND
9805: IFFALSE 9834
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9807: LD_VAR 0 9
9811: PPUSH
9812: LD_VAR 0 17
9816: PUSH
9817: LD_INT 1
9819: ARRAY
9820: PPUSH
9821: LD_VAR 0 17
9825: PUSH
9826: LD_INT 2
9828: ARRAY
9829: PPUSH
9830: CALL_OW 117
// end ; end ;
9834: GO 9016
9836: POP
9837: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9838: LD_ADDR_VAR 0 25
9842: PUSH
9843: LD_VAR 0 26
9847: PPUSH
9848: LD_INT 34
9850: PUSH
9851: LD_INT 88
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 50
9860: PUSH
9861: EMPTY
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PPUSH
9868: CALL_OW 72
9872: ST_TO_ADDR
// if cranes then
9873: LD_VAR 0 25
9877: IFFALSE 9942
// begin if tmp then
9879: LD_VAR 0 10
9883: IFFALSE 9928
// begin for i in cranes do
9885: LD_ADDR_VAR 0 9
9889: PUSH
9890: LD_VAR 0 25
9894: PUSH
9895: FOR_IN
9896: IFFALSE 9924
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9898: LD_VAR 0 9
9902: PPUSH
9903: LD_VAR 0 10
9907: PPUSH
9908: LD_VAR 0 9
9912: PPUSH
9913: CALL_OW 74
9917: PPUSH
9918: CALL_OW 130
9922: GO 9895
9924: POP
9925: POP
// end else
9926: GO 9942
// ComBackOnParking ( cranes , parkingPoint ) ;
9928: LD_VAR 0 25
9932: PPUSH
9933: LD_VAR 0 7
9937: PPUSH
9938: CALL 59567 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9942: LD_ADDR_VAR 0 27
9946: PUSH
9947: LD_EXP 48
9951: PPUSH
9952: LD_INT 1
9954: PPUSH
9955: LD_VAR 0 2
9959: PPUSH
9960: LD_INT 2
9962: PPUSH
9963: CALL 59430 0 4
9967: ST_TO_ADDR
// if vehicles2 then
9968: LD_VAR 0 27
9972: IFFALSE 10039
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9974: LD_ADDR_VAR 0 9
9978: PUSH
9979: LD_VAR 0 27
9983: PPUSH
9984: LD_INT 33
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 50
9996: PUSH
9997: EMPTY
9998: LIST
9999: PUSH
10000: LD_INT 3
10002: PUSH
10003: LD_INT 61
10005: PUSH
10006: EMPTY
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 72
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10037
// Connect ( i ) ;
10026: LD_VAR 0 9
10030: PPUSH
10031: CALL 25341 0 1
10035: GO 10023
10037: POP
10038: POP
// if vehicles then
10039: LD_VAR 0 26
10043: IFFALSE 10949
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10045: LD_ADDR_VAR 0 9
10049: PUSH
10050: LD_VAR 0 26
10054: PPUSH
10055: LD_INT 33
10057: PUSH
10058: LD_INT 2
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 50
10067: PUSH
10068: EMPTY
10069: LIST
10070: PUSH
10071: LD_INT 3
10073: PUSH
10074: LD_INT 61
10076: PUSH
10077: EMPTY
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: PPUSH
10089: CALL_OW 72
10093: PUSH
10094: FOR_IN
10095: IFFALSE 10108
// Connect ( i ) ;
10097: LD_VAR 0 9
10101: PPUSH
10102: CALL 25341 0 1
10106: GO 10094
10108: POP
10109: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10110: LD_ADDR_VAR 0 26
10114: PUSH
10115: LD_VAR 0 26
10119: PPUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 2
10125: PUSH
10126: LD_INT 34
10128: PUSH
10129: LD_INT 88
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 34
10138: PUSH
10139: LD_INT 32
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 50
10157: PUSH
10158: EMPTY
10159: LIST
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PPUSH
10165: CALL_OW 72
10169: ST_TO_ADDR
// if vehicles then
10170: LD_VAR 0 26
10174: IFFALSE 10949
// begin for i in vehicles do
10176: LD_ADDR_VAR 0 9
10180: PUSH
10181: LD_VAR 0 26
10185: PUSH
10186: FOR_IN
10187: IFFALSE 10947
// begin tag := GetTag ( i ) ;
10189: LD_ADDR_VAR 0 15
10193: PUSH
10194: LD_VAR 0 9
10198: PPUSH
10199: CALL_OW 110
10203: ST_TO_ADDR
// if not tag then
10204: LD_VAR 0 15
10208: NOT
10209: IFFALSE 10380
// begin if GetControl ( i ) = control_manual then
10211: LD_VAR 0 9
10215: PPUSH
10216: CALL_OW 263
10220: PUSH
10221: LD_INT 1
10223: EQUAL
10224: IFFALSE 10366
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10226: LD_ADDR_VAR 0 24
10230: PUSH
10231: LD_EXP 49
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: LD_VAR 0 9
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: CALL 59430 0 4
10251: ST_TO_ADDR
// if not drivers then
10252: LD_VAR 0 24
10256: NOT
10257: IFFALSE 10346
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10259: LD_ADDR_VAR 0 24
10263: PUSH
10264: LD_VAR 0 14
10268: PPUSH
10269: LD_INT 3
10271: PUSH
10272: LD_INT 120
10274: PUSH
10275: LD_INT 7
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 72
10290: ST_TO_ADDR
// if drivers then
10291: LD_VAR 0 24
10295: IFFALSE 10346
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10297: LD_VAR 0 24
10301: PUSH
10302: LD_INT 1
10304: ARRAY
10305: PPUSH
10306: LD_INT 7
10308: PPUSH
10309: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10313: LD_ADDR_EXP 49
10317: PUSH
10318: LD_EXP 49
10322: PPUSH
10323: LD_VAR 0 9
10327: PUSH
10328: LD_VAR 0 24
10332: PUSH
10333: LD_INT 1
10335: ARRAY
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PPUSH
10341: CALL 54744 0 2
10345: ST_TO_ADDR
// end ; end ; if drivers then
10346: LD_VAR 0 24
10350: IFFALSE 10364
// SetTag ( i , tBusy ) ;
10352: LD_VAR 0 9
10356: PPUSH
10357: LD_INT 8
10359: PPUSH
10360: CALL_OW 109
// continue ;
10364: GO 10186
// end ; SetTag ( i , tBusy ) ;
10366: LD_VAR 0 9
10370: PPUSH
10371: LD_INT 8
10373: PPUSH
10374: CALL_OW 109
// end else
10378: GO 10945
// if tag = tBusy then
10380: LD_VAR 0 15
10384: PUSH
10385: LD_INT 8
10387: EQUAL
10388: IFFALSE 10616
// begin if GetLives ( i ) = 1000 then
10390: LD_VAR 0 9
10394: PPUSH
10395: CALL_OW 256
10399: PUSH
10400: LD_INT 1000
10402: EQUAL
10403: IFFALSE 10614
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10405: LD_VAR 0 9
10409: PPUSH
10410: CALL_OW 263
10414: PUSH
10415: LD_INT 1
10417: EQUAL
10418: PUSH
10419: LD_VAR 0 9
10423: PPUSH
10424: CALL_OW 311
10428: NOT
10429: AND
10430: IFFALSE 10602
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10432: LD_ADDR_VAR 0 24
10436: PUSH
10437: LD_EXP 49
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: LD_VAR 0 9
10449: PPUSH
10450: LD_INT 2
10452: PPUSH
10453: CALL 59430 0 4
10457: ST_TO_ADDR
// if not drivers then
10458: LD_VAR 0 24
10462: NOT
10463: IFFALSE 10479
// begin SetTag ( i , 0 ) ;
10465: LD_VAR 0 9
10469: PPUSH
10470: LD_INT 0
10472: PPUSH
10473: CALL_OW 109
// continue ;
10477: GO 10186
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10479: LD_VAR 0 24
10483: PUSH
10484: LD_INT 1
10486: ARRAY
10487: PPUSH
10488: CALL_OW 310
10492: PUSH
10493: LD_VAR 0 24
10497: PUSH
10498: LD_INT 1
10500: ARRAY
10501: PPUSH
10502: CALL 52348 0 1
10506: NOT
10507: AND
10508: IFFALSE 10523
// ComExitBuilding ( drivers [ 1 ] ) ;
10510: LD_VAR 0 24
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PPUSH
10519: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10523: LD_VAR 0 26
10527: PPUSH
10528: LD_INT 120
10530: PUSH
10531: LD_INT 3
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PPUSH
10538: CALL_OW 72
10542: PUSH
10543: LD_VAR 0 24
10547: PUSH
10548: LD_INT 1
10550: ARRAY
10551: PPUSH
10552: CALL_OW 314
10556: NOT
10557: AND
10558: PUSH
10559: LD_VAR 0 26
10563: PPUSH
10564: LD_INT 120
10566: PUSH
10567: LD_INT 3
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PPUSH
10574: CALL_OW 72
10578: NOT
10579: OR
10580: IFFALSE 10600
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10582: LD_VAR 0 24
10586: PUSH
10587: LD_INT 1
10589: ARRAY
10590: PPUSH
10591: LD_VAR 0 9
10595: PPUSH
10596: CALL_OW 120
// continue ;
10600: GO 10186
// end ; SetTag ( i , tAttack ) ;
10602: LD_VAR 0 9
10606: PPUSH
10607: LD_INT 13
10609: PPUSH
10610: CALL_OW 109
// end ; end else
10614: GO 10945
// if tag = tAttack then
10616: LD_VAR 0 15
10620: PUSH
10621: LD_INT 13
10623: EQUAL
10624: IFFALSE 10804
// begin enemy := enemyInBase ;
10626: LD_ADDR_VAR 0 21
10630: PUSH
10631: LD_VAR 0 22
10635: ST_TO_ADDR
// if not enemy then
10636: LD_VAR 0 21
10640: NOT
10641: IFFALSE 10653
// enemy := enemyOuterBase ;
10643: LD_ADDR_VAR 0 21
10647: PUSH
10648: LD_VAR 0 23
10652: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10653: LD_VAR 0 21
10657: NOT
10658: PUSH
10659: LD_VAR 0 9
10663: PPUSH
10664: LD_VAR 0 7
10668: PUSH
10669: LD_INT 1
10671: ARRAY
10672: PPUSH
10673: LD_VAR 0 7
10677: PUSH
10678: LD_INT 2
10680: ARRAY
10681: PPUSH
10682: CALL_OW 297
10686: PUSH
10687: LD_INT 10
10689: GREATER
10690: AND
10691: IFFALSE 10722
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10693: LD_VAR 0 9
10697: PPUSH
10698: LD_VAR 0 7
10702: PUSH
10703: LD_INT 1
10705: ARRAY
10706: PPUSH
10707: LD_VAR 0 7
10711: PUSH
10712: LD_INT 2
10714: ARRAY
10715: PPUSH
10716: CALL_OW 111
// continue ;
10720: GO 10186
// end ; if GetLives ( i ) < 650 then
10722: LD_VAR 0 9
10726: PPUSH
10727: CALL_OW 256
10731: PUSH
10732: LD_INT 650
10734: LESS
10735: IFFALSE 10778
// begin SetTag ( i , tVehRepair ) ;
10737: LD_VAR 0 9
10741: PPUSH
10742: LD_INT 9
10744: PPUSH
10745: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10749: LD_VAR 0 9
10753: PPUSH
10754: LD_VAR 0 7
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: LD_VAR 0 7
10767: PUSH
10768: LD_INT 2
10770: ARRAY
10771: PPUSH
10772: CALL_OW 111
// continue ;
10776: GO 10186
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10778: LD_VAR 0 9
10782: PPUSH
10783: LD_VAR 0 21
10787: PPUSH
10788: LD_VAR 0 9
10792: PPUSH
10793: CALL_OW 74
10797: PPUSH
10798: CALL_OW 115
// end else
10802: GO 10945
// if tag = tVehRepair then
10804: LD_VAR 0 15
10808: PUSH
10809: LD_INT 9
10811: EQUAL
10812: IFFALSE 10945
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10814: LD_VAR 0 9
10818: PPUSH
10819: LD_VAR 0 7
10823: PUSH
10824: LD_INT 1
10826: ARRAY
10827: PPUSH
10828: LD_VAR 0 7
10832: PUSH
10833: LD_INT 2
10835: ARRAY
10836: PPUSH
10837: CALL_OW 297
10841: PUSH
10842: LD_INT 10
10844: GREATER
10845: IFFALSE 10876
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10847: LD_VAR 0 9
10851: PPUSH
10852: LD_VAR 0 7
10856: PUSH
10857: LD_INT 1
10859: ARRAY
10860: PPUSH
10861: LD_VAR 0 7
10865: PUSH
10866: LD_INT 2
10868: ARRAY
10869: PPUSH
10870: CALL_OW 111
// continue ;
10874: GO 10186
// end ; if GetLives ( i ) = 1000 then
10876: LD_VAR 0 9
10880: PPUSH
10881: CALL_OW 256
10885: PUSH
10886: LD_INT 1000
10888: EQUAL
10889: IFFALSE 10905
// begin SetTag ( i , tBusy ) ;
10891: LD_VAR 0 9
10895: PPUSH
10896: LD_INT 8
10898: PPUSH
10899: CALL_OW 109
// continue ;
10903: GO 10186
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10905: LD_VAR 0 9
10909: PPUSH
10910: CALL_OW 263
10914: PUSH
10915: LD_INT 1
10917: EQUAL
10918: PUSH
10919: LD_VAR 0 9
10923: PPUSH
10924: CALL_OW 311
10928: AND
10929: IFFALSE 10945
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10931: LD_VAR 0 9
10935: PPUSH
10936: CALL_OW 311
10940: PPUSH
10941: CALL 56444 0 1
// end ; end ;
10945: GO 10186
10947: POP
10948: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10949: LD_ADDR_VAR 0 19
10953: PUSH
10954: LD_VAR 0 5
10958: PPUSH
10959: LD_INT 2
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 1
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 25
10974: PUSH
10975: LD_INT 8
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 25
10984: PUSH
10985: LD_INT 5
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 25
10994: PUSH
10995: LD_INT 9
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 50
11011: PUSH
11012: EMPTY
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 72
11023: ST_TO_ADDR
// if sol then
11024: LD_VAR 0 19
11028: IFFALSE 11576
// begin if enemyInBase then
11030: LD_VAR 0 22
11034: IFFALSE 11213
// begin for i in sol do
11036: LD_ADDR_VAR 0 9
11040: PUSH
11041: LD_VAR 0 19
11045: PUSH
11046: FOR_IN
11047: IFFALSE 11209
// begin tw := IsInUnit ( i ) ;
11049: LD_ADDR_VAR 0 16
11053: PUSH
11054: LD_VAR 0 9
11058: PPUSH
11059: CALL_OW 310
11063: ST_TO_ADDR
// if tw then
11064: LD_VAR 0 16
11068: IFFALSE 11151
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11070: LD_VAR 0 16
11074: PUSH
11075: LD_INT 22
11077: PUSH
11078: LD_VAR 0 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 101
11089: PUSH
11090: LD_VAR 0 34
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: LD_INT 30
11104: PUSH
11105: LD_INT 32
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 30
11114: PUSH
11115: LD_INT 31
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: LIST
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: PPUSH
11132: CALL_OW 69
11136: IN
11137: NOT
11138: IFFALSE 11149
// ComExitBuilding ( i ) ;
11140: LD_VAR 0 9
11144: PPUSH
11145: CALL_OW 122
// end else
11149: GO 11207
// if IsInArea ( i , area ) then
11151: LD_VAR 0 9
11155: PPUSH
11156: LD_VAR 0 3
11160: PPUSH
11161: CALL_OW 308
11165: IFFALSE 11193
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11167: LD_VAR 0 9
11171: PPUSH
11172: LD_VAR 0 22
11176: PPUSH
11177: LD_VAR 0 9
11181: PPUSH
11182: CALL_OW 74
11186: PPUSH
11187: CALL_OW 115
11191: GO 11207
// ComMoveToArea ( i , area ) ;
11193: LD_VAR 0 9
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: CALL_OW 113
// end ;
11207: GO 11046
11209: POP
11210: POP
// end else
11211: GO 11576
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11213: LD_ADDR_VAR 0 28
11217: PUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 3
11225: PUSH
11226: LD_INT 62
11228: PUSH
11229: EMPTY
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: LD_INT 30
11241: PUSH
11242: LD_INT 32
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 4
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 30
11261: PUSH
11262: LD_INT 5
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 30
11271: PUSH
11272: LD_INT 31
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 70
11294: ST_TO_ADDR
// if empty then
11295: LD_VAR 0 28
11299: IFFALSE 11316
// empty := ReverseArray ( empty ) ;
11301: LD_ADDR_VAR 0 28
11305: PUSH
11306: LD_VAR 0 28
11310: PPUSH
11311: CALL 50011 0 1
11315: ST_TO_ADDR
// for i in sol do
11316: LD_ADDR_VAR 0 9
11320: PUSH
11321: LD_VAR 0 19
11325: PUSH
11326: FOR_IN
11327: IFFALSE 11574
// begin tag := GetTag ( i ) ;
11329: LD_ADDR_VAR 0 15
11333: PUSH
11334: LD_VAR 0 9
11338: PPUSH
11339: CALL_OW 110
11343: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11344: LD_VAR 0 9
11348: PPUSH
11349: CALL_OW 256
11353: PUSH
11354: LD_INT 1000
11356: LESS
11357: PUSH
11358: LD_VAR 0 15
11362: PUSH
11363: LD_INT 1
11365: NONEQUAL
11366: AND
11367: IFFALSE 11419
// begin SetTag ( i , tHeal ) ;
11369: LD_VAR 0 9
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11381: LD_VAR 0 9
11385: PPUSH
11386: LD_VAR 0 6
11390: PUSH
11391: LD_INT 1
11393: ARRAY
11394: PPUSH
11395: LD_VAR 0 6
11399: PUSH
11400: LD_INT 2
11402: ARRAY
11403: PPUSH
11404: CALL_OW 111
// AddComHold ( i ) ;
11408: LD_VAR 0 9
11412: PPUSH
11413: CALL_OW 200
// continue ;
11417: GO 11326
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11419: LD_VAR 0 9
11423: PPUSH
11424: CALL_OW 256
11428: PUSH
11429: LD_INT 1000
11431: EQUAL
11432: PUSH
11433: LD_VAR 0 15
11437: PUSH
11438: LD_INT 1
11440: EQUAL
11441: AND
11442: IFFALSE 11458
// begin SetTag ( i , 0 ) ;
11444: LD_VAR 0 9
11448: PPUSH
11449: LD_INT 0
11451: PPUSH
11452: CALL_OW 109
// continue ;
11456: GO 11326
// end ; if HasTask ( i ) then
11458: LD_VAR 0 9
11462: PPUSH
11463: CALL_OW 314
11467: IFFALSE 11471
// continue ;
11469: GO 11326
// if not IsInUnit ( i ) and not tag and empty then
11471: LD_VAR 0 9
11475: PPUSH
11476: CALL_OW 310
11480: NOT
11481: PUSH
11482: LD_VAR 0 15
11486: NOT
11487: AND
11488: PUSH
11489: LD_VAR 0 28
11493: AND
11494: IFFALSE 11572
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11496: LD_VAR 0 9
11500: PPUSH
11501: LD_VAR 0 28
11505: PUSH
11506: LD_INT 1
11508: ARRAY
11509: PPUSH
11510: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11514: LD_VAR 0 28
11518: PUSH
11519: LD_INT 1
11521: ARRAY
11522: PPUSH
11523: CALL_OW 266
11527: PUSH
11528: LD_INT 5
11530: EQUAL
11531: PUSH
11532: LD_INT 50
11534: PPUSH
11535: CALL_OW 13
11539: AND
11540: IFFALSE 11554
// AddComChangeProfession ( i , class_mortar ) ;
11542: LD_VAR 0 9
11546: PPUSH
11547: LD_INT 8
11549: PPUSH
11550: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11554: LD_ADDR_VAR 0 28
11558: PUSH
11559: LD_VAR 0 28
11563: PPUSH
11564: LD_INT 1
11566: PPUSH
11567: CALL_OW 3
11571: ST_TO_ADDR
// end ; end ;
11572: GO 11326
11574: POP
11575: POP
// end ; end ; end ;
11576: LD_VAR 0 8
11580: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11581: LD_EXP 35
11585: PPUSH
11586: LD_INT 50
11588: PUSH
11589: EMPTY
11590: LIST
11591: PPUSH
11592: CALL_OW 72
11596: IFFALSE 11645
11598: GO 11600
11600: DISABLE
// begin enable ;
11601: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11602: LD_EXP 3
11606: PPUSH
11607: LD_INT 1
11609: PPUSH
11610: LD_INT 33
11612: PPUSH
11613: LD_INT 40
11615: PPUSH
11616: LD_EXP 35
11620: PPUSH
11621: LD_INT 120
11623: PUSH
11624: LD_INT 129
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: LD_INT 126
11633: PUSH
11634: LD_INT 136
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL 7624 0 7
// end ;
11645: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11646: LD_EXP 36
11650: PPUSH
11651: LD_INT 50
11653: PUSH
11654: EMPTY
11655: LIST
11656: PPUSH
11657: CALL_OW 72
11661: IFFALSE 11710
11663: GO 11665
11665: DISABLE
// begin enable ;
11666: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11667: LD_EXP 3
11671: PPUSH
11672: LD_INT 2
11674: PPUSH
11675: LD_INT 35
11677: PPUSH
11678: LD_INT 43
11680: PPUSH
11681: LD_EXP 36
11685: PPUSH
11686: LD_INT 116
11688: PUSH
11689: LD_INT 9
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PPUSH
11696: LD_INT 123
11698: PUSH
11699: LD_INT 12
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL 7624 0 7
// end ;
11710: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11711: LD_EXP 34
11715: PPUSH
11716: LD_INT 50
11718: PUSH
11719: EMPTY
11720: LIST
11721: PPUSH
11722: CALL_OW 72
11726: IFFALSE 11775
11728: GO 11730
11730: DISABLE
// begin enable ;
11731: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11732: LD_EXP 3
11736: PPUSH
11737: LD_INT 3
11739: PPUSH
11740: LD_INT 34
11742: PPUSH
11743: LD_INT 42
11745: PPUSH
11746: LD_EXP 34
11750: PPUSH
11751: LD_INT 28
11753: PUSH
11754: LD_INT 10
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PPUSH
11761: LD_INT 26
11763: PUSH
11764: LD_INT 17
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PPUSH
11771: CALL 7624 0 7
// end ;
11775: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11776: LD_EXP 38
11780: PPUSH
11781: LD_INT 50
11783: PUSH
11784: EMPTY
11785: LIST
11786: PPUSH
11787: CALL_OW 72
11791: IFFALSE 11840
11793: GO 11795
11795: DISABLE
// begin enable ;
11796: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11797: LD_EXP 3
11801: PPUSH
11802: LD_INT 4
11804: PPUSH
11805: LD_INT 36
11807: PPUSH
11808: LD_INT 44
11810: PPUSH
11811: LD_EXP 38
11815: PPUSH
11816: LD_INT 173
11818: PUSH
11819: LD_INT 72
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: PPUSH
11826: LD_INT 167
11828: PUSH
11829: LD_INT 83
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL 7624 0 7
// end ;
11840: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11841: LD_EXP 37
11845: PPUSH
11846: LD_INT 50
11848: PUSH
11849: EMPTY
11850: LIST
11851: PPUSH
11852: CALL_OW 72
11856: IFFALSE 11905
11858: GO 11860
11860: DISABLE
// begin enable ;
11861: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11862: LD_EXP 3
11866: PPUSH
11867: LD_INT 5
11869: PPUSH
11870: LD_INT 38
11872: PPUSH
11873: LD_INT 45
11875: PPUSH
11876: LD_EXP 37
11880: PPUSH
11881: LD_INT 147
11883: PUSH
11884: LD_INT 50
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PPUSH
11891: LD_INT 159
11893: PUSH
11894: LD_INT 40
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL 7624 0 7
// end ;
11905: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11906: LD_EXP 53
11910: IFFALSE 12130
11912: GO 11914
11914: DISABLE
11915: LD_INT 0
11917: PPUSH
11918: PPUSH
11919: PPUSH
// begin enable ;
11920: ENABLE
// p := 1 ;
11921: LD_ADDR_VAR 0 2
11925: PUSH
11926: LD_INT 1
11928: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11929: LD_ADDR_VAR 0 1
11933: PUSH
11934: DOUBLE
11935: LD_INT 1
11937: DEC
11938: ST_TO_ADDR
11939: LD_EXP 53
11943: PPUSH
11944: CALL 19135 0 1
11948: PUSH
11949: LD_INT 2
11951: DIV
11952: PUSH
11953: FOR_TO
11954: IFFALSE 12128
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11956: LD_ADDR_VAR 0 3
11960: PUSH
11961: LD_EXP 53
11965: PUSH
11966: LD_VAR 0 2
11970: ARRAY
11971: PPUSH
11972: LD_EXP 53
11976: PUSH
11977: LD_VAR 0 2
11981: PUSH
11982: LD_INT 1
11984: PLUS
11985: ARRAY
11986: PPUSH
11987: CALL_OW 428
11991: ST_TO_ADDR
// if tmp then
11992: LD_VAR 0 3
11996: IFFALSE 12112
// if not GetSide ( tmp ) in [ 0 , side_bot ] then
11998: LD_VAR 0 3
12002: PPUSH
12003: CALL_OW 255
12007: PUSH
12008: LD_INT 0
12010: PUSH
12011: LD_EXP 3
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: IN
12020: NOT
12021: IFFALSE 12112
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
12023: LD_EXP 53
12027: PUSH
12028: LD_VAR 0 2
12032: ARRAY
12033: PPUSH
12034: LD_EXP 53
12038: PUSH
12039: LD_VAR 0 2
12043: PUSH
12044: LD_INT 1
12046: PLUS
12047: ARRAY
12048: PPUSH
12049: LD_EXP 3
12053: PPUSH
12054: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
12058: LD_ADDR_EXP 53
12062: PUSH
12063: LD_EXP 53
12067: PPUSH
12068: LD_VAR 0 2
12072: PPUSH
12073: CALL_OW 3
12077: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12078: LD_ADDR_EXP 53
12082: PUSH
12083: LD_EXP 53
12087: PPUSH
12088: LD_VAR 0 2
12092: PPUSH
12093: CALL_OW 3
12097: ST_TO_ADDR
// p := p - 2 ;
12098: LD_ADDR_VAR 0 2
12102: PUSH
12103: LD_VAR 0 2
12107: PUSH
12108: LD_INT 2
12110: MINUS
12111: ST_TO_ADDR
// end ; p := p + 2 ;
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_VAR 0 2
12121: PUSH
12122: LD_INT 2
12124: PLUS
12125: ST_TO_ADDR
// end ;
12126: GO 11953
12128: POP
12129: POP
// end ; end_of_file
12130: PPOPN 3
12132: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12133: LD_INT 0
12135: PPUSH
12136: PPUSH
// begin if artifact_get then
12137: LD_EXP 4
12141: IFFALSE 12145
// exit ;
12143: GO 12167
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 255
12154: PPUSH
12155: CALL 5255 0 1
// artifact_get := true ;
12159: LD_ADDR_EXP 4
12163: PUSH
12164: LD_INT 1
12166: ST_TO_ADDR
// end ;
12167: PPOPN 4
12169: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 255
12179: PUSH
12180: LD_EXP 3
12184: NONEQUAL
12185: IFFALSE 12189
// exit ;
12187: GO 12258
// if not un in [ Saliba , Gensher , Shariff ] then
12189: LD_VAR 0 1
12193: PUSH
12194: LD_EXP 41
12198: PUSH
12199: LD_EXP 42
12203: PUSH
12204: LD_EXP 43
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: IN
12214: NOT
12215: IFFALSE 12236
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12217: LD_VAR 0 1
12221: PPUSH
12222: LD_VAR 0 2
12226: PPUSH
12227: LD_INT 0
12229: PPUSH
12230: CALL 5191 0 3
12234: GO 12258
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12236: LD_VAR 0 1
12240: PPUSH
12241: LD_VAR 0 2
12245: PPUSH
12246: LD_INT 5
12248: PPUSH
12249: CALL 4518 0 1
12253: PPUSH
12254: CALL 5191 0 3
// end ;
12258: PPOPN 3
12260: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12261: LD_INT 0
12263: PPUSH
12264: PPUSH
12265: PPUSH
12266: PPUSH
12267: PPUSH
12268: PPUSH
12269: PPUSH
12270: PPUSH
12271: PPUSH
12272: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12273: LD_VAR 0 1
12277: PPUSH
12278: CALL 59834 0 1
// side := GetSide ( un ) ;
12282: LD_ADDR_VAR 0 3
12286: PUSH
12287: LD_VAR 0 1
12291: PPUSH
12292: CALL_OW 255
12296: ST_TO_ADDR
// if multi_sides [ side ] then
12297: LD_EXP 7
12301: PUSH
12302: LD_VAR 0 3
12306: ARRAY
12307: IFFALSE 12333
// if GetType ( un ) = unit_human then
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 247
12318: PUSH
12319: LD_INT 1
12321: EQUAL
12322: IFFALSE 12333
// MultiplayerEvent_HumanLost ( side ) ;
12324: LD_VAR 0 3
12328: PPUSH
12329: CALL 5077 0 1
// if side = side_bot then
12333: LD_VAR 0 3
12337: PUSH
12338: LD_EXP 3
12342: EQUAL
12343: IFFALSE 12789
// begin if GetType ( un ) = unit_building then
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL_OW 247
12354: PUSH
12355: LD_INT 3
12357: EQUAL
12358: IFFALSE 12588
// begin base := 0 ;
12360: LD_ADDR_VAR 0 4
12364: PUSH
12365: LD_INT 0
12367: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12368: LD_ADDR_VAR 0 2
12372: PUSH
12373: DOUBLE
12374: LD_INT 1
12376: DEC
12377: ST_TO_ADDR
12378: LD_EXP 51
12382: PPUSH
12383: CALL 19135 0 1
12387: PUSH
12388: FOR_TO
12389: IFFALSE 12427
// if IsInArea ( un , arAreas [ i ] ) then
12391: LD_VAR 0 1
12395: PPUSH
12396: LD_EXP 51
12400: PUSH
12401: LD_VAR 0 2
12405: ARRAY
12406: PPUSH
12407: CALL_OW 308
12411: IFFALSE 12425
// begin base := i ;
12413: LD_ADDR_VAR 0 4
12417: PUSH
12418: LD_VAR 0 2
12422: ST_TO_ADDR
// break ;
12423: GO 12427
// end ;
12425: GO 12388
12427: POP
12428: POP
// if not base then
12429: LD_VAR 0 4
12433: NOT
12434: IFFALSE 12438
// exit ;
12436: GO 12890
// btype := GetBType ( un ) ;
12438: LD_ADDR_VAR 0 11
12442: PUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 266
12452: ST_TO_ADDR
// if btype = b_barracks then
12453: LD_VAR 0 11
12457: PUSH
12458: LD_INT 5
12460: EQUAL
12461: IFFALSE 12471
// btype := b_armoury ;
12463: LD_ADDR_VAR 0 11
12467: PUSH
12468: LD_INT 4
12470: ST_TO_ADDR
// if btype = b_factory then
12471: LD_VAR 0 11
12475: PUSH
12476: LD_INT 3
12478: EQUAL
12479: IFFALSE 12489
// btype := b_workshop ;
12481: LD_ADDR_VAR 0 11
12485: PUSH
12486: LD_INT 2
12488: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12489: LD_VAR 0 11
12493: PUSH
12494: LD_INT 8
12496: PUSH
12497: LD_INT 7
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: IN
12504: IFFALSE 12514
// btype := b_lab ;
12506: LD_ADDR_VAR 0 11
12510: PUSH
12511: LD_INT 6
12513: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12514: LD_ADDR_EXP 46
12518: PUSH
12519: LD_EXP 46
12523: PPUSH
12524: LD_EXP 46
12528: PUSH
12529: LD_INT 1
12531: PLUS
12532: PPUSH
12533: LD_VAR 0 4
12537: PUSH
12538: LD_VAR 0 11
12542: PUSH
12543: LD_VAR 0 1
12547: PPUSH
12548: CALL_OW 250
12552: PUSH
12553: LD_VAR 0 1
12557: PPUSH
12558: CALL_OW 251
12562: PUSH
12563: LD_VAR 0 1
12567: PPUSH
12568: CALL_OW 254
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 1
12587: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12588: LD_VAR 0 1
12592: PPUSH
12593: CALL_OW 247
12597: PUSH
12598: LD_INT 2
12600: EQUAL
12601: IFFALSE 12789
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12603: LD_ADDR_VAR 0 4
12607: PUSH
12608: LD_EXP 47
12612: PPUSH
12613: LD_INT 2
12615: PPUSH
12616: LD_VAR 0 1
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL 59430 0 4
12628: ST_TO_ADDR
// if not base then
12629: LD_VAR 0 4
12633: NOT
12634: IFFALSE 12638
// exit ;
12636: GO 12890
// factory := arFactories [ base ] ;
12638: LD_ADDR_VAR 0 10
12642: PUSH
12643: LD_EXP 50
12647: PUSH
12648: LD_VAR 0 4
12652: ARRAY
12653: ST_TO_ADDR
// if not factory then
12654: LD_VAR 0 10
12658: NOT
12659: IFFALSE 12663
// exit ;
12661: GO 12890
// chassis := GetChassis ( un ) ;
12663: LD_ADDR_VAR 0 5
12667: PUSH
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 265
12677: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12678: LD_ADDR_VAR 0 6
12682: PUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: CALL_OW 262
12692: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12693: LD_ADDR_VAR 0 8
12697: PUSH
12698: LD_VAR 0 1
12702: PPUSH
12703: CALL_OW 264
12707: ST_TO_ADDR
// control := control_remote ;
12708: LD_ADDR_VAR 0 7
12712: PUSH
12713: LD_INT 2
12715: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12716: LD_ADDR_VAR 0 9
12720: PUSH
12721: LD_VAR 0 10
12725: PPUSH
12726: LD_VAR 0 5
12730: PPUSH
12731: LD_VAR 0 6
12735: PPUSH
12736: LD_VAR 0 7
12740: PPUSH
12741: LD_VAR 0 8
12745: PPUSH
12746: CALL 19493 0 5
12750: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12751: LD_ADDR_EXP 45
12755: PUSH
12756: LD_EXP 45
12760: PPUSH
12761: LD_EXP 45
12765: PUSH
12766: LD_INT 1
12768: PLUS
12769: PPUSH
12770: LD_VAR 0 4
12774: PUSH
12775: LD_VAR 0 9
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PPUSH
12784: CALL_OW 1
12788: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
12789: LD_EXP 24
12793: PUSH
12794: LD_EXP 16
12798: AND
12799: PUSH
12800: LD_EXP 25
12804: PUSH
12805: LD_VAR 0 3
12809: ARRAY
12810: NOT
12811: AND
12812: IFFALSE 12890
// if un in multi_commanders then
12814: LD_VAR 0 1
12818: PUSH
12819: LD_EXP 24
12823: IN
12824: IFFALSE 12890
// begin if side = your_side then
12826: LD_VAR 0 3
12830: PUSH
12831: LD_OWVAR 2
12835: EQUAL
12836: IFFALSE 12842
// Multiplayer_Loose_Message ;
12838: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12842: LD_ADDR_EXP 25
12846: PUSH
12847: LD_EXP 25
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 1
12864: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12865: LD_ADDR_EXP 24
12869: PUSH
12870: LD_EXP 24
12874: PUSH
12875: LD_VAR 0 1
12879: DIFF
12880: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12881: LD_VAR 0 3
12885: PPUSH
12886: CALL 4551 0 1
// end ; end ;
12890: PPOPN 11
12892: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12893: LD_INT 0
12895: PPUSH
12896: PPUSH
12897: PPUSH
12898: PPUSH
12899: PPUSH
// begin side := GetSide ( building ) ;
12900: LD_ADDR_VAR 0 4
12904: PUSH
12905: LD_VAR 0 1
12909: PPUSH
12910: CALL_OW 255
12914: ST_TO_ADDR
// if multi_sides [ side ] then
12915: LD_EXP 7
12919: PUSH
12920: LD_VAR 0 4
12924: ARRAY
12925: IFFALSE 12946
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12927: LD_VAR 0 4
12931: PPUSH
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 266
12941: PPUSH
12942: CALL 5121 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12946: LD_VAR 0 1
12950: PPUSH
12951: CALL_OW 266
12955: PUSH
12956: LD_INT 0
12958: EQUAL
12959: PUSH
12960: LD_EXP 7
12964: PUSH
12965: LD_VAR 0 4
12969: ARRAY
12970: NOT
12971: AND
12972: PUSH
12973: LD_EXP 5
12977: AND
12978: IFFALSE 13016
// begin SetBName ( building , base_names [ 1 ] ) ;
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_EXP 5
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12998: LD_ADDR_EXP 5
13002: PUSH
13003: LD_EXP 5
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 3
13015: ST_TO_ADDR
// end ; if side = side_bot then
13016: LD_VAR 0 4
13020: PUSH
13021: LD_EXP 3
13025: EQUAL
13026: IFFALSE 13277
// begin base := 0 ;
13028: LD_ADDR_VAR 0 5
13032: PUSH
13033: LD_INT 0
13035: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
13036: LD_ADDR_VAR 0 2
13040: PUSH
13041: DOUBLE
13042: LD_INT 1
13044: DEC
13045: ST_TO_ADDR
13046: LD_EXP 51
13050: PPUSH
13051: CALL 19135 0 1
13055: PUSH
13056: FOR_TO
13057: IFFALSE 13095
// if IsInArea ( building , arAreas [ i ] ) then
13059: LD_VAR 0 1
13063: PPUSH
13064: LD_EXP 51
13068: PUSH
13069: LD_VAR 0 2
13073: ARRAY
13074: PPUSH
13075: CALL_OW 308
13079: IFFALSE 13093
// begin base := i ;
13081: LD_ADDR_VAR 0 5
13085: PUSH
13086: LD_VAR 0 2
13090: ST_TO_ADDR
// break ;
13091: GO 13095
// end ;
13093: GO 13056
13095: POP
13096: POP
// if not base then
13097: LD_VAR 0 5
13101: NOT
13102: IFFALSE 13106
// exit ;
13104: GO 13277
// for i := 1 to Count ( arBuildings ) do
13106: LD_ADDR_VAR 0 2
13110: PUSH
13111: DOUBLE
13112: LD_INT 1
13114: DEC
13115: ST_TO_ADDR
13116: LD_EXP 46
13120: PPUSH
13121: CALL 19135 0 1
13125: PUSH
13126: FOR_TO
13127: IFFALSE 13179
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13129: LD_EXP 46
13133: PUSH
13134: LD_VAR 0 2
13138: ARRAY
13139: PUSH
13140: LD_INT 1
13142: ARRAY
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PUSH
13148: LD_VAR 0 5
13152: EQUAL
13153: IFFALSE 13177
// begin arBuildings := Delete ( arBuildings , i ) ;
13155: LD_ADDR_EXP 46
13159: PUSH
13160: LD_EXP 46
13164: PPUSH
13165: LD_VAR 0 2
13169: PPUSH
13170: CALL_OW 3
13174: ST_TO_ADDR
// break ;
13175: GO 13179
// end ;
13177: GO 13126
13179: POP
13180: POP
// btype := GetBType ( building ) ;
13181: LD_ADDR_VAR 0 6
13185: PUSH
13186: LD_VAR 0 1
13190: PPUSH
13191: CALL_OW 266
13195: ST_TO_ADDR
// case btype of b_armoury :
13196: LD_VAR 0 6
13200: PUSH
13201: LD_INT 4
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13221
13209: POP
// ComUpgrade ( building ) ; b_workshop :
13210: LD_VAR 0 1
13214: PPUSH
13215: CALL_OW 146
13219: GO 13277
13221: LD_INT 2
13223: DOUBLE
13224: EQUAL
13225: IFTRUE 13229
13227: GO 13241
13229: POP
// ComUpgrade ( building ) ; b_lab :
13230: LD_VAR 0 1
13234: PPUSH
13235: CALL_OW 146
13239: GO 13277
13241: LD_INT 6
13243: DOUBLE
13244: EQUAL
13245: IFTRUE 13249
13247: GO 13276
13249: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13250: LD_VAR 0 1
13254: PPUSH
13255: LD_INT 10
13257: PPUSH
13258: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13262: LD_VAR 0 1
13266: PPUSH
13267: LD_INT 15
13269: PPUSH
13270: CALL_OW 207
// end ; end ;
13274: GO 13277
13276: POP
// end ; end ;
13277: PPOPN 6
13279: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13280: LD_INT 0
13282: PPUSH
13283: PPUSH
13284: PPUSH
13285: PPUSH
13286: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_VAR 0 2
13296: PPUSH
13297: CALL 59892 0 2
// side := GetSide ( vehicle ) ;
13301: LD_ADDR_VAR 0 4
13305: PUSH
13306: LD_VAR 0 1
13310: PPUSH
13311: CALL_OW 255
13315: ST_TO_ADDR
// if multi_sides [ side ] then
13316: LD_EXP 7
13320: PUSH
13321: LD_VAR 0 4
13325: ARRAY
13326: IFFALSE 13337
// MultiplayerEvent_Produced ( side ) ;
13328: LD_VAR 0 4
13332: PPUSH
13333: CALL 5033 0 1
// if side_bot = side then
13337: LD_EXP 3
13341: PUSH
13342: LD_VAR 0 4
13346: EQUAL
13347: IFFALSE 13539
// begin base := 0 ;
13349: LD_ADDR_VAR 0 6
13353: PUSH
13354: LD_INT 0
13356: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13357: LD_ADDR_VAR 0 3
13361: PUSH
13362: DOUBLE
13363: LD_INT 1
13365: DEC
13366: ST_TO_ADDR
13367: LD_EXP 50
13371: PPUSH
13372: CALL 19135 0 1
13376: PUSH
13377: FOR_TO
13378: IFFALSE 13412
// if arFactories [ i ] = factory then
13380: LD_EXP 50
13384: PUSH
13385: LD_VAR 0 3
13389: ARRAY
13390: PUSH
13391: LD_VAR 0 2
13395: EQUAL
13396: IFFALSE 13410
// begin base := i ;
13398: LD_ADDR_VAR 0 6
13402: PUSH
13403: LD_VAR 0 3
13407: ST_TO_ADDR
// break ;
13408: GO 13412
// end ;
13410: GO 13377
13412: POP
13413: POP
// if not base then
13414: LD_VAR 0 6
13418: NOT
13419: IFFALSE 13423
// exit ;
13421: GO 13539
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13423: LD_EXP 52
13427: PUSH
13428: LD_VAR 0 6
13432: ARRAY
13433: PUSH
13434: LD_EXP 47
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: LD_VAR 0 6
13446: PPUSH
13447: LD_INT 2
13449: PPUSH
13450: CALL 59430 0 4
13454: GREATER
13455: PUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 266
13465: PUSH
13466: LD_INT 32
13468: PUSH
13469: LD_INT 88
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: IN
13476: OR
13477: IFFALSE 13510
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13479: LD_ADDR_EXP 47
13483: PUSH
13484: LD_EXP 47
13488: PPUSH
13489: LD_VAR 0 6
13493: PUSH
13494: LD_VAR 0 1
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL 54744 0 2
13507: ST_TO_ADDR
13508: GO 13539
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13510: LD_ADDR_EXP 48
13514: PUSH
13515: LD_EXP 48
13519: PPUSH
13520: LD_VAR 0 6
13524: PUSH
13525: LD_VAR 0 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL 54744 0 2
13538: ST_TO_ADDR
// end ; end ;
13539: PPOPN 7
13541: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13542: LD_VAR 0 1
13546: PPUSH
13547: CALL_OW 110
13551: PUSH
13552: LD_INT 7
13554: EQUAL
13555: IFFALSE 13569
// SetTag ( driver , 0 ) ;
13557: LD_VAR 0 1
13561: PPUSH
13562: LD_INT 0
13564: PPUSH
13565: CALL_OW 109
// end ;
13569: PPOPN 4
13571: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13572: LD_VAR 0 2
13576: PPUSH
13577: CALL_OW 255
13581: PUSH
13582: LD_EXP 3
13586: EQUAL
13587: IFFALSE 13617
// if tech in arTech then
13589: LD_VAR 0 1
13593: PUSH
13594: LD_EXP 44
13598: IN
13599: IFFALSE 13617
// arTech := arTech diff tech ;
13601: LD_ADDR_EXP 44
13605: PUSH
13606: LD_EXP 44
13610: PUSH
13611: LD_VAR 0 1
13615: DIFF
13616: ST_TO_ADDR
// end ;
13617: PPOPN 2
13619: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL 59851 0 1
// end ; end_of_file
13629: PPOPN 1
13631: END
// every 0 0$20 trigger game do
13632: LD_EXP 2
13636: IFFALSE 13681
13638: GO 13640
13640: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13641: LD_INT 7
13643: PUSH
13644: LD_INT 6
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: LD_INT 6
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PPUSH
13659: LD_EXP 21
13663: PUSH
13664: LD_INT 2
13666: ARRAY
13667: PPUSH
13668: LD_EXP 21
13672: PUSH
13673: LD_INT 1
13675: ARRAY
13676: PPUSH
13677: CALL 13682 0 3
13681: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13682: LD_INT 0
13684: PPUSH
13685: PPUSH
13686: PPUSH
13687: PPUSH
// if not areas then
13688: LD_VAR 0 1
13692: NOT
13693: IFFALSE 13697
// exit ;
13695: GO 14067
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13697: LD_ADDR_VAR 0 7
13701: PUSH
13702: LD_INT 31
13704: PUSH
13705: LD_INT 32
13707: PUSH
13708: LD_INT 30
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: ST_TO_ADDR
// x := 5 ;
13716: LD_ADDR_VAR 0 6
13720: PUSH
13721: LD_INT 5
13723: ST_TO_ADDR
// repeat wait ( time ) ;
13724: LD_VAR 0 2
13728: PPUSH
13729: CALL_OW 67
// if tick < [ 55 55$00 , 43 43$00 , 31 31$00 ] [ Difficulty ] then
13733: LD_OWVAR 1
13737: PUSH
13738: LD_INT 115500
13740: PUSH
13741: LD_INT 90300
13743: PUSH
13744: LD_INT 65100
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: LD_OWVAR 67
13756: ARRAY
13757: LESS
13758: IFFALSE 13897
// begin for i := 1 to multi_sides do
13760: LD_ADDR_VAR 0 5
13764: PUSH
13765: DOUBLE
13766: LD_INT 1
13768: DEC
13769: ST_TO_ADDR
13770: LD_EXP 7
13774: PUSH
13775: FOR_TO
13776: IFFALSE 13888
// if multi_sides [ i ] then
13778: LD_EXP 7
13782: PUSH
13783: LD_VAR 0 5
13787: ARRAY
13788: IFFALSE 13886
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13790: LD_VAR 0 7
13794: PUSH
13795: LD_EXP 7
13799: PUSH
13800: LD_VAR 0 5
13804: ARRAY
13805: ARRAY
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 287
13814: PUSH
13815: LD_INT 25
13817: PUSH
13818: LD_INT 22
13820: PUSH
13821: LD_INT 20
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: PUSH
13829: LD_OWVAR 67
13833: ARRAY
13834: LESS
13835: IFFALSE 13886
// begin amount := amount - ( x * 10 ) ;
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_VAR 0 3
13846: PUSH
13847: LD_VAR 0 6
13851: PUSH
13852: LD_INT 10
13854: MUL
13855: MINUS
13856: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13857: LD_VAR 0 6
13861: PPUSH
13862: LD_VAR 0 7
13866: PUSH
13867: LD_EXP 7
13871: PUSH
13872: LD_VAR 0 5
13876: ARRAY
13877: ARRAY
13878: PPUSH
13879: LD_INT 1
13881: PPUSH
13882: CALL_OW 55
// end ; end ;
13886: GO 13775
13888: POP
13889: POP
// wait ( 0 0$10 ) ;
13890: LD_INT 350
13892: PPUSH
13893: CALL_OW 67
// end ; for i in areas do
13897: LD_ADDR_VAR 0 5
13901: PUSH
13902: LD_VAR 0 1
13906: PUSH
13907: FOR_IN
13908: IFFALSE 13984
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13910: LD_VAR 0 5
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 287
13922: PUSH
13923: LD_INT 25
13925: PUSH
13926: LD_INT 22
13928: PUSH
13929: LD_INT 20
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: LD_OWVAR 67
13941: ARRAY
13942: LESS
13943: IFFALSE 13982
// begin amount := amount - ( x * 10 ) ;
13945: LD_ADDR_VAR 0 3
13949: PUSH
13950: LD_VAR 0 3
13954: PUSH
13955: LD_VAR 0 6
13959: PUSH
13960: LD_INT 10
13962: MUL
13963: MINUS
13964: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
13965: LD_VAR 0 6
13969: PPUSH
13970: LD_VAR 0 5
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 55
// end ; end ;
13982: GO 13907
13984: POP
13985: POP
// time := time + 0 0$2 ;
13986: LD_ADDR_VAR 0 2
13990: PUSH
13991: LD_VAR 0 2
13995: PUSH
13996: LD_INT 70
13998: PLUS
13999: ST_TO_ADDR
// x := x - 1 ;
14000: LD_ADDR_VAR 0 6
14004: PUSH
14005: LD_VAR 0 6
14009: PUSH
14010: LD_INT 1
14012: MINUS
14013: ST_TO_ADDR
// if x = 0 then
14014: LD_VAR 0 6
14018: PUSH
14019: LD_INT 0
14021: EQUAL
14022: IFFALSE 14032
// x := 5 ;
14024: LD_ADDR_VAR 0 6
14028: PUSH
14029: LD_INT 5
14031: ST_TO_ADDR
// if time > 0 0$50 then
14032: LD_VAR 0 2
14036: PUSH
14037: LD_INT 1750
14039: GREATER
14040: IFFALSE 14050
// time := 0 0$25 ;
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: LD_INT 875
14049: ST_TO_ADDR
// until not game or amount <= 0 ;
14050: LD_EXP 2
14054: NOT
14055: PUSH
14056: LD_VAR 0 3
14060: PUSH
14061: LD_INT 0
14063: LESSEQUAL
14064: OR
14065: IFFALSE 13724
// end ; end_of_file
14067: LD_VAR 0 4
14071: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
14072: GO 14074
14074: DISABLE
14075: LD_INT 0
14077: PPUSH
// begin NorthBase := 2 ;
14078: LD_ADDR_LOC 1
14082: PUSH
14083: LD_INT 2
14085: ST_TO_ADDR
// WestBase := 3 ;
14086: LD_ADDR_LOC 2
14090: PUSH
14091: LD_INT 3
14093: ST_TO_ADDR
// end ;
14094: PPOPN 1
14096: END
// every 10 10$00 do var i ;
14097: GO 14099
14099: DISABLE
14100: LD_INT 0
14102: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14103: LD_ADDR_VAR 0 1
14107: PUSH
14108: DOUBLE
14109: LD_INT 1
14111: DEC
14112: ST_TO_ADDR
14113: LD_INT 3
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: LD_INT 5
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_OWVAR 67
14131: ARRAY
14132: PUSH
14133: FOR_TO
14134: IFFALSE 14235
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14136: LD_ADDR_EXP 45
14140: PUSH
14141: LD_EXP 45
14145: PPUSH
14146: LD_EXP 45
14150: PUSH
14151: LD_INT 1
14153: PLUS
14154: PPUSH
14155: LD_LOC 1
14159: PUSH
14160: LD_INT 14
14162: PUSH
14163: LD_INT 3
14165: PUSH
14166: LD_INT 1
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 1
14175: PPUSH
14176: LD_INT 2
14178: PPUSH
14179: CALL_OW 12
14183: ARRAY
14184: PUSH
14185: LD_INT 2
14187: PUSH
14188: LD_INT 27
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: LD_INT 28
14196: PUSH
14197: LD_INT 29
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 1
14208: PPUSH
14209: LD_INT 4
14211: PPUSH
14212: CALL_OW 12
14216: ARRAY
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 1
14232: ST_TO_ADDR
// end ;
14233: GO 14133
14235: POP
14236: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14237: LD_ADDR_VAR 0 1
14241: PUSH
14242: DOUBLE
14243: LD_INT 1
14245: DEC
14246: ST_TO_ADDR
14247: LD_INT 3
14249: PUSH
14250: LD_INT 4
14252: PUSH
14253: LD_INT 5
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_OWVAR 67
14265: ARRAY
14266: PUSH
14267: FOR_TO
14268: IFFALSE 14350
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14270: LD_ADDR_EXP 45
14274: PUSH
14275: LD_EXP 45
14279: PPUSH
14280: LD_EXP 45
14284: PUSH
14285: LD_INT 1
14287: PLUS
14288: PPUSH
14289: LD_LOC 2
14293: PUSH
14294: LD_INT 14
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 27
14305: PUSH
14306: LD_INT 25
14308: PUSH
14309: LD_INT 28
14311: PUSH
14312: LD_INT 26
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 1
14323: PPUSH
14324: LD_INT 4
14326: PPUSH
14327: CALL_OW 12
14331: ARRAY
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 1
14347: ST_TO_ADDR
// end ;
14348: GO 14267
14350: POP
14351: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14352: LD_INT 16800
14354: PUSH
14355: LD_INT 2100
14357: PUSH
14358: LD_OWVAR 67
14362: MUL
14363: MINUS
14364: PPUSH
14365: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14369: LD_ADDR_VAR 0 1
14373: PUSH
14374: DOUBLE
14375: LD_INT 1
14377: DEC
14378: ST_TO_ADDR
14379: LD_INT 5
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: LD_INT 6
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PUSH
14399: FOR_TO
14400: IFFALSE 14501
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14402: LD_ADDR_EXP 45
14406: PUSH
14407: LD_EXP 45
14411: PPUSH
14412: LD_EXP 45
14416: PUSH
14417: LD_INT 1
14419: PLUS
14420: PPUSH
14421: LD_LOC 1
14425: PUSH
14426: LD_INT 14
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: LD_INT 1
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 1
14441: PPUSH
14442: LD_INT 2
14444: PPUSH
14445: CALL_OW 12
14449: ARRAY
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: LD_INT 27
14456: PUSH
14457: LD_INT 25
14459: PUSH
14460: LD_INT 28
14462: PUSH
14463: LD_INT 29
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 1
14474: PPUSH
14475: LD_INT 4
14477: PPUSH
14478: CALL_OW 12
14482: ARRAY
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PPUSH
14494: CALL_OW 1
14498: ST_TO_ADDR
// end ;
14499: GO 14399
14501: POP
14502: POP
// if tick > 30 30$0 then
14503: LD_OWVAR 1
14507: PUSH
14508: LD_INT 63000
14510: GREATER
14511: IFFALSE 14587
// begin for i := 1 to tick div 30 30$0 do
14513: LD_ADDR_VAR 0 1
14517: PUSH
14518: DOUBLE
14519: LD_INT 1
14521: DEC
14522: ST_TO_ADDR
14523: LD_OWVAR 1
14527: PUSH
14528: LD_INT 63000
14530: DIV
14531: PUSH
14532: FOR_TO
14533: IFFALSE 14585
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14535: LD_ADDR_EXP 45
14539: PUSH
14540: LD_EXP 45
14544: PPUSH
14545: LD_EXP 45
14549: PUSH
14550: LD_INT 1
14552: PLUS
14553: PPUSH
14554: LD_LOC 1
14558: PUSH
14559: LD_INT 14
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 29
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: PPUSH
14578: CALL_OW 1
14582: ST_TO_ADDR
14583: GO 14532
14585: POP
14586: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14587: LD_ADDR_VAR 0 1
14591: PUSH
14592: DOUBLE
14593: LD_INT 1
14595: DEC
14596: ST_TO_ADDR
14597: LD_INT 5
14599: PUSH
14600: LD_INT 6
14602: PUSH
14603: LD_INT 6
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: PUSH
14611: LD_OWVAR 67
14615: ARRAY
14616: PUSH
14617: FOR_TO
14618: IFFALSE 14700
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14620: LD_ADDR_EXP 45
14624: PUSH
14625: LD_EXP 45
14629: PPUSH
14630: LD_EXP 45
14634: PUSH
14635: LD_INT 1
14637: PLUS
14638: PPUSH
14639: LD_LOC 2
14643: PUSH
14644: LD_INT 14
14646: PUSH
14647: LD_INT 1
14649: PUSH
14650: LD_INT 2
14652: PUSH
14653: LD_INT 27
14655: PUSH
14656: LD_INT 25
14658: PUSH
14659: LD_INT 28
14661: PUSH
14662: LD_INT 26
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 1
14673: PPUSH
14674: LD_INT 4
14676: PPUSH
14677: CALL_OW 12
14681: ARRAY
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 1
14697: ST_TO_ADDR
// end ;
14698: GO 14617
14700: POP
14701: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14702: LD_INT 21000
14704: PUSH
14705: LD_INT 18900
14707: PUSH
14708: LD_INT 16800
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_OWVAR 67
14720: ARRAY
14721: PPUSH
14722: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14726: LD_ADDR_VAR 0 1
14730: PUSH
14731: DOUBLE
14732: LD_INT 1
14734: DEC
14735: ST_TO_ADDR
14736: LD_INT 5
14738: PUSH
14739: LD_INT 6
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: PUSH
14750: LD_OWVAR 67
14754: ARRAY
14755: PUSH
14756: FOR_TO
14757: IFFALSE 14858
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14759: LD_ADDR_EXP 45
14763: PUSH
14764: LD_EXP 45
14768: PPUSH
14769: LD_EXP 45
14773: PUSH
14774: LD_INT 1
14776: PLUS
14777: PPUSH
14778: LD_LOC 1
14782: PUSH
14783: LD_INT 14
14785: PUSH
14786: LD_INT 3
14788: PUSH
14789: LD_INT 1
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 2
14801: PPUSH
14802: CALL_OW 12
14806: ARRAY
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 27
14813: PUSH
14814: LD_INT 25
14816: PUSH
14817: LD_INT 28
14819: PUSH
14820: LD_INT 29
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 1
14831: PPUSH
14832: LD_INT 4
14834: PPUSH
14835: CALL_OW 12
14839: ARRAY
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: PPUSH
14851: CALL_OW 1
14855: ST_TO_ADDR
// end ;
14856: GO 14756
14858: POP
14859: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14860: LD_ADDR_VAR 0 1
14864: PUSH
14865: DOUBLE
14866: LD_INT 1
14868: DEC
14869: ST_TO_ADDR
14870: LD_INT 4
14872: PUSH
14873: LD_INT 5
14875: PUSH
14876: LD_INT 6
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: PUSH
14884: LD_OWVAR 67
14888: ARRAY
14889: PUSH
14890: FOR_TO
14891: IFFALSE 14973
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14893: LD_ADDR_EXP 45
14897: PUSH
14898: LD_EXP 45
14902: PPUSH
14903: LD_EXP 45
14907: PUSH
14908: LD_INT 1
14910: PLUS
14911: PPUSH
14912: LD_LOC 2
14916: PUSH
14917: LD_INT 14
14919: PUSH
14920: LD_INT 1
14922: PUSH
14923: LD_INT 2
14925: PUSH
14926: LD_INT 27
14928: PUSH
14929: LD_INT 25
14931: PUSH
14932: LD_INT 28
14934: PUSH
14935: LD_INT 26
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 1
14946: PPUSH
14947: LD_INT 4
14949: PPUSH
14950: CALL_OW 12
14954: ARRAY
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PPUSH
14966: CALL_OW 1
14970: ST_TO_ADDR
// end ;
14971: GO 14890
14973: POP
14974: POP
// until false ;
14975: LD_INT 0
14977: IFFALSE 14702
// end ;
14979: PPOPN 1
14981: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14982: LD_EXP 48
14986: PPUSH
14987: LD_INT 1
14989: PPUSH
14990: LD_LOC 1
14994: PPUSH
14995: LD_INT 2
14997: PPUSH
14998: CALL 59430 0 4
15002: IFFALSE 15171
15004: GO 15006
15006: DISABLE
15007: LD_INT 0
15009: PPUSH
15010: PPUSH
// begin enable ;
15011: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
15012: LD_ADDR_VAR 0 2
15016: PUSH
15017: LD_EXP 48
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: LD_LOC 1
15029: PPUSH
15030: LD_INT 2
15032: PPUSH
15033: CALL 59430 0 4
15037: ST_TO_ADDR
// if not tmp then
15038: LD_VAR 0 2
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15171
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: DOUBLE
15053: LD_EXP 48
15057: PPUSH
15058: CALL 19135 0 1
15062: INC
15063: ST_TO_ADDR
15064: LD_INT 1
15066: PUSH
15067: FOR_DOWNTO
15068: IFFALSE 15114
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15070: LD_EXP 48
15074: PUSH
15075: LD_VAR 0 1
15079: ARRAY
15080: PUSH
15081: LD_INT 2
15083: ARRAY
15084: PUSH
15085: LD_VAR 0 2
15089: IN
15090: IFFALSE 15112
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15092: LD_ADDR_EXP 48
15096: PUSH
15097: LD_EXP 48
15101: PPUSH
15102: LD_VAR 0 1
15106: PPUSH
15107: CALL_OW 3
15111: ST_TO_ADDR
15112: GO 15067
15114: POP
15115: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15116: LD_VAR 0 2
15120: PPUSH
15121: LD_INT 164
15123: PUSH
15124: LD_INT 40
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 174
15133: PUSH
15134: LD_INT 72
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: LD_INT 174
15143: PUSH
15144: LD_INT 93
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 196
15153: PUSH
15154: LD_INT 110
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL 15366 0 2
// end ;
15171: PPOPN 2
15173: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15174: LD_EXP 48
15178: PPUSH
15179: LD_INT 1
15181: PPUSH
15182: LD_LOC 2
15186: PPUSH
15187: LD_INT 2
15189: PPUSH
15190: CALL 59430 0 4
15194: IFFALSE 15363
15196: GO 15198
15198: DISABLE
15199: LD_INT 0
15201: PPUSH
15202: PPUSH
// begin enable ;
15203: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15204: LD_ADDR_VAR 0 2
15208: PUSH
15209: LD_EXP 48
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: LD_LOC 2
15221: PPUSH
15222: LD_INT 2
15224: PPUSH
15225: CALL 59430 0 4
15229: ST_TO_ADDR
// if not tmp then
15230: LD_VAR 0 2
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15363
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15239: LD_ADDR_VAR 0 1
15243: PUSH
15244: DOUBLE
15245: LD_EXP 48
15249: PPUSH
15250: CALL 19135 0 1
15254: INC
15255: ST_TO_ADDR
15256: LD_INT 1
15258: PUSH
15259: FOR_DOWNTO
15260: IFFALSE 15306
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15262: LD_EXP 48
15266: PUSH
15267: LD_VAR 0 1
15271: ARRAY
15272: PUSH
15273: LD_INT 2
15275: ARRAY
15276: PUSH
15277: LD_VAR 0 2
15281: IN
15282: IFFALSE 15304
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15284: LD_ADDR_EXP 48
15288: PUSH
15289: LD_EXP 48
15293: PPUSH
15294: LD_VAR 0 1
15298: PPUSH
15299: CALL_OW 3
15303: ST_TO_ADDR
15304: GO 15259
15306: POP
15307: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15308: LD_VAR 0 2
15312: PPUSH
15313: LD_INT 49
15315: PUSH
15316: LD_INT 37
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 54
15325: PUSH
15326: LD_INT 68
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 77
15335: PUSH
15336: LD_INT 91
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 95
15345: PUSH
15346: LD_INT 104
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL 15366 0 2
// end ;
15363: PPOPN 2
15365: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15366: LD_INT 0
15368: PPUSH
15369: PPUSH
// repeat wait ( 0 0$1 ) ;
15370: LD_INT 35
15372: PPUSH
15373: CALL_OW 67
// for i in attackers do
15377: LD_ADDR_VAR 0 4
15381: PUSH
15382: LD_VAR 0 1
15386: PUSH
15387: FOR_IN
15388: IFFALSE 15470
// begin if not IsOk ( i ) then
15390: LD_VAR 0 4
15394: PPUSH
15395: CALL_OW 302
15399: NOT
15400: IFFALSE 15431
// begin ComUnlink ( i ) ;
15402: LD_VAR 0 4
15406: PPUSH
15407: CALL_OW 136
// attackers := attackers diff i ;
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: LD_VAR 0 1
15420: PUSH
15421: LD_VAR 0 4
15425: DIFF
15426: ST_TO_ADDR
// continue ;
15427: GO 15387
// end else
15429: GO 15468
// if not IsControledBy ( i ) then
15431: LD_VAR 0 4
15435: PPUSH
15436: CALL_OW 312
15440: NOT
15441: IFFALSE 15454
// Connect ( i ) else
15443: LD_VAR 0 4
15447: PPUSH
15448: CALL 25341 0 1
15452: GO 15468
// AgressiveMove ( i , path ) ;
15454: LD_VAR 0 4
15458: PPUSH
15459: LD_VAR 0 2
15463: PPUSH
15464: CALL 57354 0 2
// end ;
15468: GO 15387
15470: POP
15471: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15472: LD_VAR 0 1
15476: PPUSH
15477: LD_INT 50
15479: PUSH
15480: EMPTY
15481: LIST
15482: PPUSH
15483: CALL_OW 72
15487: NOT
15488: IFFALSE 15370
// end ;
15490: LD_VAR 0 3
15494: RET
// every 0 0$10 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and FilterAllUnits ( [ [ f_side , side_bot ] , [ f_ok ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) do var i , un , tmp , enemy ;
15495: LD_INT 7
15497: PPUSH
15498: CALL_OW 302
15502: NOT
15503: PUSH
15504: LD_INT 7
15506: PPUSH
15507: CALL_OW 255
15511: PUSH
15512: LD_EXP 3
15516: NONEQUAL
15517: OR
15518: PUSH
15519: LD_INT 22
15521: PUSH
15522: LD_EXP 3
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 50
15533: PUSH
15534: EMPTY
15535: LIST
15536: PUSH
15537: LD_INT 3
15539: PUSH
15540: LD_INT 58
15542: PUSH
15543: EMPTY
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 34
15552: PUSH
15553: LD_INT 31
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: PPUSH
15566: CALL_OW 69
15570: AND
15571: IFFALSE 15965
15573: GO 15575
15575: DISABLE
15576: LD_INT 0
15578: PPUSH
15579: PPUSH
15580: PPUSH
15581: PPUSH
// begin for i := 1 to 3 do
15582: LD_ADDR_VAR 0 1
15586: PUSH
15587: DOUBLE
15588: LD_INT 1
15590: DEC
15591: ST_TO_ADDR
15592: LD_INT 3
15594: PUSH
15595: FOR_TO
15596: IFFALSE 15757
// begin uc_side := 2 ;
15598: LD_ADDR_OWVAR 20
15602: PUSH
15603: LD_INT 2
15605: ST_TO_ADDR
// uc_nation := nation_arabian ;
15606: LD_ADDR_OWVAR 21
15610: PUSH
15611: LD_INT 2
15613: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15614: LD_INT 11
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 2
15622: PPUSH
15623: LD_INT 24
15625: PUSH
15626: LD_INT 23
15628: PUSH
15629: LD_INT 92
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_INT 3
15642: PPUSH
15643: CALL_OW 12
15647: ARRAY
15648: PPUSH
15649: LD_INT 100
15651: PPUSH
15652: CALL 21873 0 5
// un := CreateVehicle ;
15656: LD_ADDR_VAR 0 2
15660: PUSH
15661: CALL_OW 45
15665: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15666: LD_VAR 0 2
15670: PPUSH
15671: LD_INT 2
15673: PPUSH
15674: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15678: LD_VAR 0 2
15682: PPUSH
15683: LD_INT 47
15685: PPUSH
15686: LD_INT 0
15688: PPUSH
15689: CALL_OW 49
// repeat Connect ( un ) ;
15693: LD_VAR 0 2
15697: PPUSH
15698: CALL 25341 0 1
// wait ( 0 0$0.3 ) ;
15702: LD_INT 10
15704: PPUSH
15705: CALL_OW 67
// until IsControledBy ( un ) ;
15709: LD_VAR 0 2
15713: PPUSH
15714: CALL_OW 312
15718: IFFALSE 15693
// ComMoveXY ( un , 73 , 17 ) ;
15720: LD_VAR 0 2
15724: PPUSH
15725: LD_INT 73
15727: PPUSH
15728: LD_INT 17
15730: PPUSH
15731: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15735: LD_ADDR_VAR 0 3
15739: PUSH
15740: LD_VAR 0 3
15744: PPUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL 54744 0 2
15754: ST_TO_ADDR
// end ;
15755: GO 15595
15757: POP
15758: POP
// repeat wait ( 0 0$1 ) ;
15759: LD_INT 35
15761: PPUSH
15762: CALL_OW 67
// for i in tmp do
15766: LD_ADDR_VAR 0 1
15770: PUSH
15771: LD_VAR 0 3
15775: PUSH
15776: FOR_IN
15777: IFFALSE 15938
// begin if not IsOk ( i ) then
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL_OW 302
15788: NOT
15789: IFFALSE 15818
// begin ComAutodestruct ( i ) ;
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL 50236 0 1
// tmp := tmp diff i ;
15800: LD_ADDR_VAR 0 3
15804: PUSH
15805: LD_VAR 0 3
15809: PUSH
15810: LD_VAR 0 1
15814: DIFF
15815: ST_TO_ADDR
// continue ;
15816: GO 15776
// end ; if GetLives ( i ) < 750 then
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 256
15827: PUSH
15828: LD_INT 750
15830: LESS
15831: IFFALSE 15892
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15833: LD_ADDR_VAR 0 4
15837: PUSH
15838: LD_INT 81
15840: PUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 255
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: PPUSH
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 74
15869: ST_TO_ADDR
// if enemy then
15870: LD_VAR 0 4
15874: IFFALSE 15890
// ComMoveUnit ( i , enemy ) ;
15876: LD_VAR 0 1
15880: PPUSH
15881: LD_VAR 0 4
15885: PPUSH
15886: CALL_OW 112
// end else
15890: GO 15936
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15892: LD_VAR 0 1
15896: PPUSH
15897: LD_INT 76
15899: PUSH
15900: LD_INT 31
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 93
15909: PUSH
15910: LD_INT 67
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 108
15919: PUSH
15920: LD_INT 97
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL 57354 0 2
// end ;
15936: GO 15776
15938: POP
15939: POP
// until not tmp ;
15940: LD_VAR 0 3
15944: NOT
15945: IFFALSE 15759
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
15947: LD_INT 16800
15949: PUSH
15950: LD_INT 2100
15952: PUSH
15953: LD_OWVAR 67
15957: MUL
15958: MINUS
15959: PPUSH
15960: CALL_OW 67
// enable ;
15964: ENABLE
// end ;
15965: PPOPN 4
15967: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15968: LD_INT 7
15970: PPUSH
15971: CALL_OW 302
15975: NOT
15976: PUSH
15977: LD_INT 7
15979: PPUSH
15980: CALL_OW 255
15984: PUSH
15985: LD_EXP 3
15989: NONEQUAL
15990: OR
15991: PUSH
15992: LD_INT 45
15994: PPUSH
15995: CALL_OW 302
15999: PUSH
16000: LD_INT 45
16002: PPUSH
16003: CALL_OW 255
16007: PUSH
16008: LD_EXP 3
16012: EQUAL
16013: AND
16014: AND
16015: IFFALSE 16372
16017: GO 16019
16019: DISABLE
16020: LD_INT 0
16022: PPUSH
16023: PPUSH
16024: PPUSH
16025: PPUSH
// begin enable ;
16026: ENABLE
// for i := 1 to 3 do
16027: LD_ADDR_VAR 0 1
16031: PUSH
16032: DOUBLE
16033: LD_INT 1
16035: DEC
16036: ST_TO_ADDR
16037: LD_INT 3
16039: PUSH
16040: FOR_TO
16041: IFFALSE 16182
// begin uc_side := 2 ;
16043: LD_ADDR_OWVAR 20
16047: PUSH
16048: LD_INT 2
16050: ST_TO_ADDR
// uc_nation := nation_arabian ;
16051: LD_ADDR_OWVAR 21
16055: PUSH
16056: LD_INT 2
16058: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
16059: LD_INT 11
16061: PPUSH
16062: LD_INT 1
16064: PPUSH
16065: LD_INT 5
16067: PPUSH
16068: LD_INT 24
16070: PUSH
16071: LD_INT 23
16073: PUSH
16074: LD_INT 92
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 1
16084: PPUSH
16085: LD_INT 3
16087: PPUSH
16088: CALL_OW 12
16092: ARRAY
16093: PPUSH
16094: LD_INT 100
16096: PPUSH
16097: CALL 21873 0 5
// un := CreateVehicle ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: CALL_OW 45
16110: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16111: LD_VAR 0 2
16115: PPUSH
16116: LD_INT 2
16118: PPUSH
16119: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: LD_INT 47
16130: PPUSH
16131: LD_INT 0
16133: PPUSH
16134: CALL_OW 49
// wait ( 0 0$0.3 ) ;
16138: LD_INT 10
16140: PPUSH
16141: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
16145: LD_VAR 0 2
16149: PPUSH
16150: LD_INT 73
16152: PPUSH
16153: LD_INT 17
16155: PPUSH
16156: CALL_OW 111
// tmp := Join ( tmp , un ) ;
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_VAR 0 3
16169: PPUSH
16170: LD_VAR 0 2
16174: PPUSH
16175: CALL 54744 0 2
16179: ST_TO_ADDR
// end ;
16180: GO 16040
16182: POP
16183: POP
// repeat wait ( 0 0$1 ) ;
16184: LD_INT 35
16186: PPUSH
16187: CALL_OW 67
// for i in tmp do
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: FOR_IN
16202: IFFALSE 16363
// begin if not IsOk ( i ) then
16204: LD_VAR 0 1
16208: PPUSH
16209: CALL_OW 302
16213: NOT
16214: IFFALSE 16243
// begin ComAutodestruct ( i ) ;
16216: LD_VAR 0 1
16220: PPUSH
16221: CALL 50236 0 1
// tmp := tmp diff i ;
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_VAR 0 3
16234: PUSH
16235: LD_VAR 0 1
16239: DIFF
16240: ST_TO_ADDR
// continue ;
16241: GO 16201
// end ; if GetLives ( i ) < 750 then
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 256
16252: PUSH
16253: LD_INT 750
16255: LESS
16256: IFFALSE 16317
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16258: LD_ADDR_VAR 0 4
16262: PUSH
16263: LD_INT 81
16265: PUSH
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 255
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PPUSH
16280: CALL_OW 69
16284: PPUSH
16285: LD_VAR 0 1
16289: PPUSH
16290: CALL_OW 74
16294: ST_TO_ADDR
// if enemy then
16295: LD_VAR 0 4
16299: IFFALSE 16315
// ComMoveUnit ( i , enemy ) ;
16301: LD_VAR 0 1
16305: PPUSH
16306: LD_VAR 0 4
16310: PPUSH
16311: CALL_OW 112
// end else
16315: GO 16361
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16317: LD_VAR 0 1
16321: PPUSH
16322: LD_INT 76
16324: PUSH
16325: LD_INT 31
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 93
16334: PUSH
16335: LD_INT 67
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: LD_INT 108
16344: PUSH
16345: LD_INT 97
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: PPUSH
16357: CALL 57354 0 2
// end ;
16361: GO 16201
16363: POP
16364: POP
// until not tmp ;
16365: LD_VAR 0 3
16369: NOT
16370: IFFALSE 16184
// end ;
16372: PPOPN 4
16374: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16375: LD_INT 69
16377: PPUSH
16378: CALL_OW 302
16382: NOT
16383: PUSH
16384: LD_INT 69
16386: PPUSH
16387: CALL_OW 255
16391: PUSH
16392: LD_EXP 3
16396: NONEQUAL
16397: OR
16398: IFFALSE 16659
16400: GO 16402
16402: DISABLE
16403: LD_INT 0
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16409: LD_ADDR_VAR 0 1
16413: PUSH
16414: DOUBLE
16415: LD_INT 1
16417: DEC
16418: ST_TO_ADDR
16419: LD_INT 2
16421: PUSH
16422: LD_INT 3
16424: PUSH
16425: LD_INT 4
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: PUSH
16433: LD_OWVAR 67
16437: ARRAY
16438: PUSH
16439: FOR_TO
16440: IFFALSE 16531
// begin uc_side := side_bot ;
16442: LD_ADDR_OWVAR 20
16446: PUSH
16447: LD_EXP 3
16451: ST_TO_ADDR
// uc_nation := nation_nature ;
16452: LD_ADDR_OWVAR 21
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16460: CALL 50834 0 0
// hc_class := class_apeman_kamikaze ;
16464: LD_ADDR_OWVAR 28
16468: PUSH
16469: LD_INT 17
16471: ST_TO_ADDR
// un := CreateHuman ;
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: CALL_OW 44
16481: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16482: LD_VAR 0 2
16486: PPUSH
16487: LD_INT 4
16489: PPUSH
16490: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16494: LD_VAR 0 2
16498: PPUSH
16499: LD_INT 48
16501: PPUSH
16502: LD_INT 0
16504: PPUSH
16505: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16509: LD_ADDR_VAR 0 3
16513: PUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_VAR 0 2
16523: PPUSH
16524: CALL 54744 0 2
16528: ST_TO_ADDR
// end ;
16529: GO 16439
16531: POP
16532: POP
// repeat wait ( 0 0$1 ) ;
16533: LD_INT 35
16535: PPUSH
16536: CALL_OW 67
// for i in tmp do
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_VAR 0 3
16549: PUSH
16550: FOR_IN
16551: IFFALSE 16642
// begin if not IsOk ( i ) then
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 302
16562: NOT
16563: IFFALSE 16583
// begin tmp := tmp diff i ;
16565: LD_ADDR_VAR 0 3
16569: PUSH
16570: LD_VAR 0 3
16574: PUSH
16575: LD_VAR 0 1
16579: DIFF
16580: ST_TO_ADDR
// continue ;
16581: GO 16550
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16583: LD_ADDR_VAR 0 4
16587: PUSH
16588: LD_INT 81
16590: PUSH
16591: LD_VAR 0 1
16595: PPUSH
16596: CALL_OW 255
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PPUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: CALL_OW 74
16619: ST_TO_ADDR
// if enemy then
16620: LD_VAR 0 4
16624: IFFALSE 16640
// ComAttackUnit ( i , enemy ) ;
16626: LD_VAR 0 1
16630: PPUSH
16631: LD_VAR 0 4
16635: PPUSH
16636: CALL_OW 115
// end ;
16640: GO 16550
16642: POP
16643: POP
// until not tmp ;
16644: LD_VAR 0 3
16648: NOT
16649: IFFALSE 16533
// wait ( 10 10$00 ) ;
16651: LD_INT 21000
16653: PPUSH
16654: CALL_OW 67
// enable ;
16658: ENABLE
// end ;
16659: PPOPN 4
16661: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16662: LD_INT 45
16664: PPUSH
16665: CALL_OW 302
16669: NOT
16670: PUSH
16671: LD_INT 45
16673: PPUSH
16674: CALL_OW 255
16678: PUSH
16679: LD_EXP 3
16683: NONEQUAL
16684: OR
16685: IFFALSE 16946
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
16693: PPUSH
16694: PPUSH
16695: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: DOUBLE
16702: LD_INT 1
16704: DEC
16705: ST_TO_ADDR
16706: LD_INT 2
16708: PUSH
16709: LD_INT 3
16711: PUSH
16712: LD_INT 3
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: PUSH
16720: LD_OWVAR 67
16724: ARRAY
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16818
// begin uc_side := side_bot ;
16729: LD_ADDR_OWVAR 20
16733: PUSH
16734: LD_EXP 3
16738: ST_TO_ADDR
// uc_nation := nation_nature ;
16739: LD_ADDR_OWVAR 21
16743: PUSH
16744: LD_INT 0
16746: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16747: CALL 50834 0 0
// hc_class := class_apeman_kamikaze ;
16751: LD_ADDR_OWVAR 28
16755: PUSH
16756: LD_INT 17
16758: ST_TO_ADDR
// un := CreateHuman ;
16759: LD_ADDR_VAR 0 2
16763: PUSH
16764: CALL_OW 44
16768: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16769: LD_VAR 0 2
16773: PPUSH
16774: LD_INT 2
16776: PPUSH
16777: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_INT 49
16788: PPUSH
16789: LD_INT 0
16791: PPUSH
16792: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_VAR 0 3
16805: PPUSH
16806: LD_VAR 0 2
16810: PPUSH
16811: CALL 54744 0 2
16815: ST_TO_ADDR
// end ;
16816: GO 16726
16818: POP
16819: POP
// repeat wait ( 0 0$1 ) ;
16820: LD_INT 35
16822: PPUSH
16823: CALL_OW 67
// for i in tmp do
16827: LD_ADDR_VAR 0 1
16831: PUSH
16832: LD_VAR 0 3
16836: PUSH
16837: FOR_IN
16838: IFFALSE 16929
// begin if not IsOk ( i ) then
16840: LD_VAR 0 1
16844: PPUSH
16845: CALL_OW 302
16849: NOT
16850: IFFALSE 16870
// begin tmp := tmp diff i ;
16852: LD_ADDR_VAR 0 3
16856: PUSH
16857: LD_VAR 0 3
16861: PUSH
16862: LD_VAR 0 1
16866: DIFF
16867: ST_TO_ADDR
// continue ;
16868: GO 16837
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16870: LD_ADDR_VAR 0 4
16874: PUSH
16875: LD_INT 81
16877: PUSH
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 255
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PPUSH
16892: CALL_OW 69
16896: PPUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 74
16906: ST_TO_ADDR
// if enemy then
16907: LD_VAR 0 4
16911: IFFALSE 16927
// ComAttackUnit ( i , enemy ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: LD_VAR 0 4
16922: PPUSH
16923: CALL_OW 115
// end ;
16927: GO 16837
16929: POP
16930: POP
// until not tmp ;
16931: LD_VAR 0 3
16935: NOT
16936: IFFALSE 16820
// wait ( 10 10$00 ) ;
16938: LD_INT 21000
16940: PPUSH
16941: CALL_OW 67
// enable ;
16945: ENABLE
// end ; end_of_file
16946: PPOPN 4
16948: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16949: LD_INT 0
16951: PPUSH
16952: PPUSH
// if exist_mode then
16953: LD_VAR 0 2
16957: IFFALSE 17003
// begin unit := CreateCharacter ( prefix & ident ) ;
16959: LD_ADDR_VAR 0 5
16963: PUSH
16964: LD_VAR 0 3
16968: PUSH
16969: LD_VAR 0 1
16973: STR
16974: PPUSH
16975: CALL_OW 34
16979: ST_TO_ADDR
// if unit then
16980: LD_VAR 0 5
16984: IFFALSE 17001
// DeleteCharacters ( prefix & ident ) ;
16986: LD_VAR 0 3
16990: PUSH
16991: LD_VAR 0 1
16995: STR
16996: PPUSH
16997: CALL_OW 40
// end else
17001: GO 17018
// unit := NewCharacter ( ident ) ;
17003: LD_ADDR_VAR 0 5
17007: PUSH
17008: LD_VAR 0 1
17012: PPUSH
17013: CALL_OW 25
17017: ST_TO_ADDR
// result := unit ;
17018: LD_ADDR_VAR 0 4
17022: PUSH
17023: LD_VAR 0 5
17027: ST_TO_ADDR
// end ;
17028: LD_VAR 0 4
17032: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17033: LD_INT 0
17035: PPUSH
17036: PPUSH
// if exist_mode then
17037: LD_VAR 0 2
17041: IFFALSE 17066
// unit := CreateCharacter ( prefix & ident ) else
17043: LD_ADDR_VAR 0 5
17047: PUSH
17048: LD_VAR 0 3
17052: PUSH
17053: LD_VAR 0 1
17057: STR
17058: PPUSH
17059: CALL_OW 34
17063: ST_TO_ADDR
17064: GO 17081
// unit := NewCharacter ( ident ) ;
17066: LD_ADDR_VAR 0 5
17070: PUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 25
17080: ST_TO_ADDR
// result := unit ;
17081: LD_ADDR_VAR 0 4
17085: PUSH
17086: LD_VAR 0 5
17090: ST_TO_ADDR
// end ;
17091: LD_VAR 0 4
17095: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
// if not side or not nation then
17100: LD_VAR 0 1
17104: NOT
17105: PUSH
17106: LD_VAR 0 2
17110: NOT
17111: OR
17112: IFFALSE 17116
// exit ;
17114: GO 17884
// case nation of nation_american :
17116: LD_VAR 0 2
17120: PUSH
17121: LD_INT 1
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17343
17129: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17130: LD_ADDR_VAR 0 4
17134: PUSH
17135: LD_INT 35
17137: PUSH
17138: LD_INT 45
17140: PUSH
17141: LD_INT 46
17143: PUSH
17144: LD_INT 47
17146: PUSH
17147: LD_INT 82
17149: PUSH
17150: LD_INT 83
17152: PUSH
17153: LD_INT 84
17155: PUSH
17156: LD_INT 85
17158: PUSH
17159: LD_INT 86
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: LD_INT 6
17170: PUSH
17171: LD_INT 15
17173: PUSH
17174: LD_INT 16
17176: PUSH
17177: LD_INT 7
17179: PUSH
17180: LD_INT 12
17182: PUSH
17183: LD_INT 13
17185: PUSH
17186: LD_INT 10
17188: PUSH
17189: LD_INT 14
17191: PUSH
17192: LD_INT 20
17194: PUSH
17195: LD_INT 21
17197: PUSH
17198: LD_INT 22
17200: PUSH
17201: LD_INT 25
17203: PUSH
17204: LD_INT 32
17206: PUSH
17207: LD_INT 27
17209: PUSH
17210: LD_INT 36
17212: PUSH
17213: LD_INT 69
17215: PUSH
17216: LD_INT 39
17218: PUSH
17219: LD_INT 34
17221: PUSH
17222: LD_INT 40
17224: PUSH
17225: LD_INT 48
17227: PUSH
17228: LD_INT 49
17230: PUSH
17231: LD_INT 50
17233: PUSH
17234: LD_INT 51
17236: PUSH
17237: LD_INT 52
17239: PUSH
17240: LD_INT 53
17242: PUSH
17243: LD_INT 54
17245: PUSH
17246: LD_INT 55
17248: PUSH
17249: LD_INT 56
17251: PUSH
17252: LD_INT 57
17254: PUSH
17255: LD_INT 58
17257: PUSH
17258: LD_INT 59
17260: PUSH
17261: LD_INT 60
17263: PUSH
17264: LD_INT 61
17266: PUSH
17267: LD_INT 62
17269: PUSH
17270: LD_INT 80
17272: PUSH
17273: LD_INT 82
17275: PUSH
17276: LD_INT 83
17278: PUSH
17279: LD_INT 84
17281: PUSH
17282: LD_INT 85
17284: PUSH
17285: LD_INT 86
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: ST_TO_ADDR
17341: GO 17808
17343: LD_INT 2
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17577
17351: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17352: LD_ADDR_VAR 0 4
17356: PUSH
17357: LD_INT 35
17359: PUSH
17360: LD_INT 45
17362: PUSH
17363: LD_INT 46
17365: PUSH
17366: LD_INT 47
17368: PUSH
17369: LD_INT 82
17371: PUSH
17372: LD_INT 83
17374: PUSH
17375: LD_INT 84
17377: PUSH
17378: LD_INT 85
17380: PUSH
17381: LD_INT 87
17383: PUSH
17384: LD_INT 70
17386: PUSH
17387: LD_INT 1
17389: PUSH
17390: LD_INT 11
17392: PUSH
17393: LD_INT 3
17395: PUSH
17396: LD_INT 4
17398: PUSH
17399: LD_INT 5
17401: PUSH
17402: LD_INT 6
17404: PUSH
17405: LD_INT 15
17407: PUSH
17408: LD_INT 18
17410: PUSH
17411: LD_INT 7
17413: PUSH
17414: LD_INT 17
17416: PUSH
17417: LD_INT 8
17419: PUSH
17420: LD_INT 20
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_INT 72
17431: PUSH
17432: LD_INT 26
17434: PUSH
17435: LD_INT 69
17437: PUSH
17438: LD_INT 39
17440: PUSH
17441: LD_INT 40
17443: PUSH
17444: LD_INT 41
17446: PUSH
17447: LD_INT 42
17449: PUSH
17450: LD_INT 43
17452: PUSH
17453: LD_INT 48
17455: PUSH
17456: LD_INT 49
17458: PUSH
17459: LD_INT 50
17461: PUSH
17462: LD_INT 51
17464: PUSH
17465: LD_INT 52
17467: PUSH
17468: LD_INT 53
17470: PUSH
17471: LD_INT 54
17473: PUSH
17474: LD_INT 55
17476: PUSH
17477: LD_INT 56
17479: PUSH
17480: LD_INT 60
17482: PUSH
17483: LD_INT 61
17485: PUSH
17486: LD_INT 62
17488: PUSH
17489: LD_INT 66
17491: PUSH
17492: LD_INT 67
17494: PUSH
17495: LD_INT 68
17497: PUSH
17498: LD_INT 81
17500: PUSH
17501: LD_INT 82
17503: PUSH
17504: LD_INT 83
17506: PUSH
17507: LD_INT 84
17509: PUSH
17510: LD_INT 85
17512: PUSH
17513: LD_INT 87
17515: PUSH
17516: LD_INT 88
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: ST_TO_ADDR
17575: GO 17808
17577: LD_INT 3
17579: DOUBLE
17580: EQUAL
17581: IFTRUE 17585
17583: GO 17807
17585: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17586: LD_ADDR_VAR 0 4
17590: PUSH
17591: LD_INT 46
17593: PUSH
17594: LD_INT 47
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: LD_INT 2
17602: PUSH
17603: LD_INT 82
17605: PUSH
17606: LD_INT 83
17608: PUSH
17609: LD_INT 84
17611: PUSH
17612: LD_INT 85
17614: PUSH
17615: LD_INT 86
17617: PUSH
17618: LD_INT 11
17620: PUSH
17621: LD_INT 9
17623: PUSH
17624: LD_INT 20
17626: PUSH
17627: LD_INT 19
17629: PUSH
17630: LD_INT 21
17632: PUSH
17633: LD_INT 24
17635: PUSH
17636: LD_INT 22
17638: PUSH
17639: LD_INT 25
17641: PUSH
17642: LD_INT 28
17644: PUSH
17645: LD_INT 29
17647: PUSH
17648: LD_INT 30
17650: PUSH
17651: LD_INT 31
17653: PUSH
17654: LD_INT 37
17656: PUSH
17657: LD_INT 38
17659: PUSH
17660: LD_INT 32
17662: PUSH
17663: LD_INT 27
17665: PUSH
17666: LD_INT 33
17668: PUSH
17669: LD_INT 69
17671: PUSH
17672: LD_INT 39
17674: PUSH
17675: LD_INT 34
17677: PUSH
17678: LD_INT 40
17680: PUSH
17681: LD_INT 71
17683: PUSH
17684: LD_INT 23
17686: PUSH
17687: LD_INT 44
17689: PUSH
17690: LD_INT 48
17692: PUSH
17693: LD_INT 49
17695: PUSH
17696: LD_INT 50
17698: PUSH
17699: LD_INT 51
17701: PUSH
17702: LD_INT 52
17704: PUSH
17705: LD_INT 53
17707: PUSH
17708: LD_INT 54
17710: PUSH
17711: LD_INT 55
17713: PUSH
17714: LD_INT 56
17716: PUSH
17717: LD_INT 57
17719: PUSH
17720: LD_INT 58
17722: PUSH
17723: LD_INT 59
17725: PUSH
17726: LD_INT 63
17728: PUSH
17729: LD_INT 64
17731: PUSH
17732: LD_INT 65
17734: PUSH
17735: LD_INT 82
17737: PUSH
17738: LD_INT 83
17740: PUSH
17741: LD_INT 84
17743: PUSH
17744: LD_INT 85
17746: PUSH
17747: LD_INT 86
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
17805: GO 17808
17807: POP
// if state > - 1 and state < 3 then
17808: LD_VAR 0 3
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: GREATER
17817: PUSH
17818: LD_VAR 0 3
17822: PUSH
17823: LD_INT 3
17825: LESS
17826: AND
17827: IFFALSE 17884
// for i in result do
17829: LD_ADDR_VAR 0 5
17833: PUSH
17834: LD_VAR 0 4
17838: PUSH
17839: FOR_IN
17840: IFFALSE 17882
// if GetTech ( i , side ) <> state then
17842: LD_VAR 0 5
17846: PPUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 321
17856: PUSH
17857: LD_VAR 0 3
17861: NONEQUAL
17862: IFFALSE 17880
// result := result diff i ;
17864: LD_ADDR_VAR 0 4
17868: PUSH
17869: LD_VAR 0 4
17873: PUSH
17874: LD_VAR 0 5
17878: DIFF
17879: ST_TO_ADDR
17880: GO 17839
17882: POP
17883: POP
// end ;
17884: LD_VAR 0 4
17888: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17889: LD_INT 0
17891: PPUSH
17892: PPUSH
17893: PPUSH
// result := true ;
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17902: LD_ADDR_VAR 0 5
17906: PUSH
17907: LD_VAR 0 2
17911: PPUSH
17912: CALL_OW 480
17916: ST_TO_ADDR
// if not tmp then
17917: LD_VAR 0 5
17921: NOT
17922: IFFALSE 17926
// exit ;
17924: GO 17975
// for i in tmp do
17926: LD_ADDR_VAR 0 4
17930: PUSH
17931: LD_VAR 0 5
17935: PUSH
17936: FOR_IN
17937: IFFALSE 17973
// if GetTech ( i , side ) <> state_researched then
17939: LD_VAR 0 4
17943: PPUSH
17944: LD_VAR 0 1
17948: PPUSH
17949: CALL_OW 321
17953: PUSH
17954: LD_INT 2
17956: NONEQUAL
17957: IFFALSE 17971
// begin result := false ;
17959: LD_ADDR_VAR 0 3
17963: PUSH
17964: LD_INT 0
17966: ST_TO_ADDR
// exit ;
17967: POP
17968: POP
17969: GO 17975
// end ;
17971: GO 17936
17973: POP
17974: POP
// end ;
17975: LD_VAR 0 3
17979: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17980: LD_INT 0
17982: PPUSH
17983: PPUSH
17984: PPUSH
17985: PPUSH
17986: PPUSH
17987: PPUSH
17988: PPUSH
17989: PPUSH
17990: PPUSH
17991: PPUSH
17992: PPUSH
17993: PPUSH
17994: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17995: LD_VAR 0 1
17999: NOT
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 257
18010: PUSH
18011: LD_INT 9
18013: NONEQUAL
18014: OR
18015: IFFALSE 18019
// exit ;
18017: GO 18592
// side := GetSide ( unit ) ;
18019: LD_ADDR_VAR 0 9
18023: PUSH
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 255
18033: ST_TO_ADDR
// tech_space := tech_spacanom ;
18034: LD_ADDR_VAR 0 12
18038: PUSH
18039: LD_INT 29
18041: ST_TO_ADDR
// tech_time := tech_taurad ;
18042: LD_ADDR_VAR 0 13
18046: PUSH
18047: LD_INT 28
18049: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18050: LD_ADDR_VAR 0 11
18054: PUSH
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 310
18064: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18065: LD_VAR 0 11
18069: PPUSH
18070: CALL_OW 247
18074: PUSH
18075: LD_INT 2
18077: EQUAL
18078: IFFALSE 18082
// exit ;
18080: GO 18592
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18082: LD_ADDR_VAR 0 8
18086: PUSH
18087: LD_INT 81
18089: PUSH
18090: LD_VAR 0 9
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: LD_INT 21
18104: PUSH
18105: LD_INT 3
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PPUSH
18120: CALL_OW 69
18124: ST_TO_ADDR
// if not tmp then
18125: LD_VAR 0 8
18129: NOT
18130: IFFALSE 18134
// exit ;
18132: GO 18592
// if in_unit then
18134: LD_VAR 0 11
18138: IFFALSE 18162
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18140: LD_ADDR_VAR 0 10
18144: PUSH
18145: LD_VAR 0 8
18149: PPUSH
18150: LD_VAR 0 11
18154: PPUSH
18155: CALL_OW 74
18159: ST_TO_ADDR
18160: GO 18182
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18162: LD_ADDR_VAR 0 10
18166: PUSH
18167: LD_VAR 0 8
18171: PPUSH
18172: LD_VAR 0 1
18176: PPUSH
18177: CALL_OW 74
18181: ST_TO_ADDR
// if not enemy then
18182: LD_VAR 0 10
18186: NOT
18187: IFFALSE 18191
// exit ;
18189: GO 18592
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18191: LD_VAR 0 11
18195: PUSH
18196: LD_VAR 0 11
18200: PPUSH
18201: LD_VAR 0 10
18205: PPUSH
18206: CALL_OW 296
18210: PUSH
18211: LD_INT 13
18213: GREATER
18214: AND
18215: PUSH
18216: LD_VAR 0 1
18220: PPUSH
18221: LD_VAR 0 10
18225: PPUSH
18226: CALL_OW 296
18230: PUSH
18231: LD_INT 12
18233: GREATER
18234: OR
18235: IFFALSE 18239
// exit ;
18237: GO 18592
// missile := [ 1 ] ;
18239: LD_ADDR_VAR 0 14
18243: PUSH
18244: LD_INT 1
18246: PUSH
18247: EMPTY
18248: LIST
18249: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18250: LD_VAR 0 9
18254: PPUSH
18255: LD_VAR 0 12
18259: PPUSH
18260: CALL_OW 325
18264: IFFALSE 18293
// missile := Replace ( missile , missile + 1 , 2 ) ;
18266: LD_ADDR_VAR 0 14
18270: PUSH
18271: LD_VAR 0 14
18275: PPUSH
18276: LD_VAR 0 14
18280: PUSH
18281: LD_INT 1
18283: PLUS
18284: PPUSH
18285: LD_INT 2
18287: PPUSH
18288: CALL_OW 1
18292: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18293: LD_VAR 0 9
18297: PPUSH
18298: LD_VAR 0 13
18302: PPUSH
18303: CALL_OW 325
18307: PUSH
18308: LD_VAR 0 10
18312: PPUSH
18313: CALL_OW 255
18317: PPUSH
18318: LD_VAR 0 13
18322: PPUSH
18323: CALL_OW 325
18327: NOT
18328: AND
18329: IFFALSE 18358
// missile := Replace ( missile , missile + 1 , 3 ) ;
18331: LD_ADDR_VAR 0 14
18335: PUSH
18336: LD_VAR 0 14
18340: PPUSH
18341: LD_VAR 0 14
18345: PUSH
18346: LD_INT 1
18348: PLUS
18349: PPUSH
18350: LD_INT 3
18352: PPUSH
18353: CALL_OW 1
18357: ST_TO_ADDR
// if missile < 2 then
18358: LD_VAR 0 14
18362: PUSH
18363: LD_INT 2
18365: LESS
18366: IFFALSE 18370
// exit ;
18368: GO 18592
// x := GetX ( enemy ) ;
18370: LD_ADDR_VAR 0 4
18374: PUSH
18375: LD_VAR 0 10
18379: PPUSH
18380: CALL_OW 250
18384: ST_TO_ADDR
// y := GetY ( enemy ) ;
18385: LD_ADDR_VAR 0 5
18389: PUSH
18390: LD_VAR 0 10
18394: PPUSH
18395: CALL_OW 251
18399: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18400: LD_ADDR_VAR 0 6
18404: PUSH
18405: LD_VAR 0 4
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PPUSH
18414: LD_INT 1
18416: PPUSH
18417: CALL_OW 12
18421: PLUS
18422: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18423: LD_ADDR_VAR 0 7
18427: PUSH
18428: LD_VAR 0 5
18432: PUSH
18433: LD_INT 1
18435: NEG
18436: PPUSH
18437: LD_INT 1
18439: PPUSH
18440: CALL_OW 12
18444: PLUS
18445: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18446: LD_VAR 0 6
18450: PPUSH
18451: LD_VAR 0 7
18455: PPUSH
18456: CALL_OW 488
18460: NOT
18461: IFFALSE 18483
// begin _x := x ;
18463: LD_ADDR_VAR 0 6
18467: PUSH
18468: LD_VAR 0 4
18472: ST_TO_ADDR
// _y := y ;
18473: LD_ADDR_VAR 0 7
18477: PUSH
18478: LD_VAR 0 5
18482: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18483: LD_ADDR_VAR 0 3
18487: PUSH
18488: LD_INT 1
18490: PPUSH
18491: LD_VAR 0 14
18495: PPUSH
18496: CALL_OW 12
18500: ST_TO_ADDR
// case i of 1 :
18501: LD_VAR 0 3
18505: PUSH
18506: LD_INT 1
18508: DOUBLE
18509: EQUAL
18510: IFTRUE 18514
18512: GO 18531
18514: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18515: LD_VAR 0 1
18519: PPUSH
18520: LD_VAR 0 10
18524: PPUSH
18525: CALL_OW 115
18529: GO 18592
18531: LD_INT 2
18533: DOUBLE
18534: EQUAL
18535: IFTRUE 18539
18537: GO 18561
18539: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_VAR 0 6
18549: PPUSH
18550: LD_VAR 0 7
18554: PPUSH
18555: CALL_OW 153
18559: GO 18592
18561: LD_INT 3
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 18591
18569: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18570: LD_VAR 0 1
18574: PPUSH
18575: LD_VAR 0 6
18579: PPUSH
18580: LD_VAR 0 7
18584: PPUSH
18585: CALL_OW 154
18589: GO 18592
18591: POP
// end ;
18592: LD_VAR 0 2
18596: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18597: LD_INT 0
18599: PPUSH
18600: PPUSH
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
// if not unit or not building then
18605: LD_VAR 0 1
18609: NOT
18610: PUSH
18611: LD_VAR 0 2
18615: NOT
18616: OR
18617: IFFALSE 18621
// exit ;
18619: GO 18779
// x := GetX ( building ) ;
18621: LD_ADDR_VAR 0 5
18625: PUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL_OW 250
18635: ST_TO_ADDR
// y := GetY ( building ) ;
18636: LD_ADDR_VAR 0 6
18640: PUSH
18641: LD_VAR 0 2
18645: PPUSH
18646: CALL_OW 251
18650: ST_TO_ADDR
// for i = 0 to 5 do
18651: LD_ADDR_VAR 0 4
18655: PUSH
18656: DOUBLE
18657: LD_INT 0
18659: DEC
18660: ST_TO_ADDR
18661: LD_INT 5
18663: PUSH
18664: FOR_TO
18665: IFFALSE 18777
// begin _x := ShiftX ( x , i , 3 ) ;
18667: LD_ADDR_VAR 0 7
18671: PUSH
18672: LD_VAR 0 5
18676: PPUSH
18677: LD_VAR 0 4
18681: PPUSH
18682: LD_INT 3
18684: PPUSH
18685: CALL_OW 272
18689: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18690: LD_ADDR_VAR 0 8
18694: PUSH
18695: LD_VAR 0 6
18699: PPUSH
18700: LD_VAR 0 4
18704: PPUSH
18705: LD_INT 3
18707: PPUSH
18708: CALL_OW 273
18712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18713: LD_VAR 0 7
18717: PPUSH
18718: LD_VAR 0 8
18722: PPUSH
18723: CALL_OW 488
18727: NOT
18728: IFFALSE 18732
// continue ;
18730: GO 18664
// if HexInfo ( _x , _y ) = 0 then
18732: LD_VAR 0 7
18736: PPUSH
18737: LD_VAR 0 8
18741: PPUSH
18742: CALL_OW 428
18746: PUSH
18747: LD_INT 0
18749: EQUAL
18750: IFFALSE 18775
// begin ComMoveXY ( unit , _x , _y ) ;
18752: LD_VAR 0 1
18756: PPUSH
18757: LD_VAR 0 7
18761: PPUSH
18762: LD_VAR 0 8
18766: PPUSH
18767: CALL_OW 111
// exit ;
18771: POP
18772: POP
18773: GO 18779
// end ; end ;
18775: GO 18664
18777: POP
18778: POP
// end ;
18779: LD_VAR 0 3
18783: RET
// export function ScanBase ( side , base_area ) ; begin
18784: LD_INT 0
18786: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18787: LD_ADDR_VAR 0 3
18791: PUSH
18792: LD_VAR 0 2
18796: PPUSH
18797: LD_INT 81
18799: PUSH
18800: LD_VAR 0 1
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 70
18813: ST_TO_ADDR
// end ;
18814: LD_VAR 0 3
18818: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
// result := false ;
18825: LD_ADDR_VAR 0 2
18829: PUSH
18830: LD_INT 0
18832: ST_TO_ADDR
// side := GetSide ( unit ) ;
18833: LD_ADDR_VAR 0 3
18837: PUSH
18838: LD_VAR 0 1
18842: PPUSH
18843: CALL_OW 255
18847: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18848: LD_ADDR_VAR 0 4
18852: PUSH
18853: LD_VAR 0 1
18857: PPUSH
18858: CALL_OW 248
18862: ST_TO_ADDR
// case nat of 1 :
18863: LD_VAR 0 4
18867: PUSH
18868: LD_INT 1
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// tech := tech_lassight ; 2 :
18877: LD_ADDR_VAR 0 5
18881: PUSH
18882: LD_INT 12
18884: ST_TO_ADDR
18885: GO 18926
18887: LD_INT 2
18889: DOUBLE
18890: EQUAL
18891: IFTRUE 18895
18893: GO 18906
18895: POP
// tech := tech_mortar ; 3 :
18896: LD_ADDR_VAR 0 5
18900: PUSH
18901: LD_INT 41
18903: ST_TO_ADDR
18904: GO 18926
18906: LD_INT 3
18908: DOUBLE
18909: EQUAL
18910: IFTRUE 18914
18912: GO 18925
18914: POP
// tech := tech_bazooka ; end ;
18915: LD_ADDR_VAR 0 5
18919: PUSH
18920: LD_INT 44
18922: ST_TO_ADDR
18923: GO 18926
18925: POP
// if Researched ( side , tech ) then
18926: LD_VAR 0 3
18930: PPUSH
18931: LD_VAR 0 5
18935: PPUSH
18936: CALL_OW 325
18940: IFFALSE 18967
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18942: LD_ADDR_VAR 0 2
18946: PUSH
18947: LD_INT 5
18949: PUSH
18950: LD_INT 8
18952: PUSH
18953: LD_INT 9
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: LIST
18960: PUSH
18961: LD_VAR 0 4
18965: ARRAY
18966: ST_TO_ADDR
// end ;
18967: LD_VAR 0 2
18971: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18972: LD_INT 0
18974: PPUSH
18975: PPUSH
18976: PPUSH
// if not mines then
18977: LD_VAR 0 2
18981: NOT
18982: IFFALSE 18986
// exit ;
18984: GO 19130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18986: LD_ADDR_VAR 0 5
18990: PUSH
18991: LD_INT 81
18993: PUSH
18994: LD_VAR 0 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 3
19005: PUSH
19006: LD_INT 21
19008: PUSH
19009: LD_INT 3
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PPUSH
19024: CALL_OW 69
19028: ST_TO_ADDR
// for i in mines do
19029: LD_ADDR_VAR 0 4
19033: PUSH
19034: LD_VAR 0 2
19038: PUSH
19039: FOR_IN
19040: IFFALSE 19128
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19042: LD_VAR 0 4
19046: PUSH
19047: LD_INT 1
19049: ARRAY
19050: PPUSH
19051: LD_VAR 0 4
19055: PUSH
19056: LD_INT 2
19058: ARRAY
19059: PPUSH
19060: CALL_OW 458
19064: NOT
19065: IFFALSE 19069
// continue ;
19067: GO 19039
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19069: LD_VAR 0 4
19073: PUSH
19074: LD_INT 1
19076: ARRAY
19077: PPUSH
19078: LD_VAR 0 4
19082: PUSH
19083: LD_INT 2
19085: ARRAY
19086: PPUSH
19087: CALL_OW 428
19091: PUSH
19092: LD_VAR 0 5
19096: IN
19097: IFFALSE 19126
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19099: LD_VAR 0 4
19103: PUSH
19104: LD_INT 1
19106: ARRAY
19107: PPUSH
19108: LD_VAR 0 4
19112: PUSH
19113: LD_INT 2
19115: ARRAY
19116: PPUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL_OW 456
// end ;
19126: GO 19039
19128: POP
19129: POP
// end ;
19130: LD_VAR 0 3
19134: RET
// export function Count ( array ) ; begin
19135: LD_INT 0
19137: PPUSH
// result := array + 0 ;
19138: LD_ADDR_VAR 0 2
19142: PUSH
19143: LD_VAR 0 1
19147: PUSH
19148: LD_INT 0
19150: PLUS
19151: ST_TO_ADDR
// end ;
19152: LD_VAR 0 2
19156: RET
// export function IsEmpty ( building ) ; begin
19157: LD_INT 0
19159: PPUSH
// if not building then
19160: LD_VAR 0 1
19164: NOT
19165: IFFALSE 19169
// exit ;
19167: GO 19212
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19169: LD_ADDR_VAR 0 2
19173: PUSH
19174: LD_VAR 0 1
19178: PUSH
19179: LD_INT 22
19181: PUSH
19182: LD_VAR 0 1
19186: PPUSH
19187: CALL_OW 255
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 58
19198: PUSH
19199: EMPTY
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 69
19210: IN
19211: ST_TO_ADDR
// end ;
19212: LD_VAR 0 2
19216: RET
// export function IsNotFull ( building ) ; var places ; begin
19217: LD_INT 0
19219: PPUSH
19220: PPUSH
// if not building then
19221: LD_VAR 0 1
19225: NOT
19226: IFFALSE 19230
// exit ;
19228: GO 19258
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19230: LD_ADDR_VAR 0 2
19234: PUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_INT 3
19242: PUSH
19243: LD_INT 62
19245: PUSH
19246: EMPTY
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL_OW 72
19257: ST_TO_ADDR
// end ;
19258: LD_VAR 0 2
19262: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19263: LD_INT 0
19265: PPUSH
19266: PPUSH
19267: PPUSH
19268: PPUSH
// tmp := [ ] ;
19269: LD_ADDR_VAR 0 3
19273: PUSH
19274: EMPTY
19275: ST_TO_ADDR
// list := [ ] ;
19276: LD_ADDR_VAR 0 5
19280: PUSH
19281: EMPTY
19282: ST_TO_ADDR
// for i = 16 to 25 do
19283: LD_ADDR_VAR 0 4
19287: PUSH
19288: DOUBLE
19289: LD_INT 16
19291: DEC
19292: ST_TO_ADDR
19293: LD_INT 25
19295: PUSH
19296: FOR_TO
19297: IFFALSE 19370
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: LD_VAR 0 3
19308: PUSH
19309: LD_INT 22
19311: PUSH
19312: LD_VAR 0 1
19316: PPUSH
19317: CALL_OW 255
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 91
19328: PUSH
19329: LD_VAR 0 1
19333: PUSH
19334: LD_INT 6
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 30
19344: PUSH
19345: LD_VAR 0 4
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: PPUSH
19362: CALL_OW 69
19366: ADD
19367: ST_TO_ADDR
19368: GO 19296
19370: POP
19371: POP
// for i = 1 to tmp do
19372: LD_ADDR_VAR 0 4
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_VAR 0 3
19386: PUSH
19387: FOR_TO
19388: IFFALSE 19476
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19390: LD_ADDR_VAR 0 5
19394: PUSH
19395: LD_VAR 0 5
19399: PUSH
19400: LD_VAR 0 3
19404: PUSH
19405: LD_VAR 0 4
19409: ARRAY
19410: PPUSH
19411: CALL_OW 266
19415: PUSH
19416: LD_VAR 0 3
19420: PUSH
19421: LD_VAR 0 4
19425: ARRAY
19426: PPUSH
19427: CALL_OW 250
19431: PUSH
19432: LD_VAR 0 3
19436: PUSH
19437: LD_VAR 0 4
19441: ARRAY
19442: PPUSH
19443: CALL_OW 251
19447: PUSH
19448: LD_VAR 0 3
19452: PUSH
19453: LD_VAR 0 4
19457: ARRAY
19458: PPUSH
19459: CALL_OW 254
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: ADD
19473: ST_TO_ADDR
19474: GO 19387
19476: POP
19477: POP
// result := list ;
19478: LD_ADDR_VAR 0 2
19482: PUSH
19483: LD_VAR 0 5
19487: ST_TO_ADDR
// end ;
19488: LD_VAR 0 2
19492: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19493: LD_INT 0
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
19499: PPUSH
19500: PPUSH
19501: PPUSH
// if not factory then
19502: LD_VAR 0 1
19506: NOT
19507: IFFALSE 19511
// exit ;
19509: GO 20104
// if control = control_apeman then
19511: LD_VAR 0 4
19515: PUSH
19516: LD_INT 5
19518: EQUAL
19519: IFFALSE 19628
// begin tmp := UnitsInside ( factory ) ;
19521: LD_ADDR_VAR 0 8
19525: PUSH
19526: LD_VAR 0 1
19530: PPUSH
19531: CALL_OW 313
19535: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19536: LD_VAR 0 8
19540: PPUSH
19541: LD_INT 25
19543: PUSH
19544: LD_INT 12
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PPUSH
19551: CALL_OW 72
19555: NOT
19556: IFFALSE 19566
// control := control_manual ;
19558: LD_ADDR_VAR 0 4
19562: PUSH
19563: LD_INT 1
19565: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19566: LD_ADDR_VAR 0 8
19570: PUSH
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL 19263 0 1
19580: ST_TO_ADDR
// if tmp then
19581: LD_VAR 0 8
19585: IFFALSE 19628
// begin for i in tmp do
19587: LD_ADDR_VAR 0 7
19591: PUSH
19592: LD_VAR 0 8
19596: PUSH
19597: FOR_IN
19598: IFFALSE 19626
// if i [ 1 ] = b_ext_radio then
19600: LD_VAR 0 7
19604: PUSH
19605: LD_INT 1
19607: ARRAY
19608: PUSH
19609: LD_INT 22
19611: EQUAL
19612: IFFALSE 19624
// begin control := control_remote ;
19614: LD_ADDR_VAR 0 4
19618: PUSH
19619: LD_INT 2
19621: ST_TO_ADDR
// break ;
19622: GO 19626
// end ;
19624: GO 19597
19626: POP
19627: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19628: LD_VAR 0 1
19632: PPUSH
19633: LD_VAR 0 2
19637: PPUSH
19638: LD_VAR 0 3
19642: PPUSH
19643: LD_VAR 0 4
19647: PPUSH
19648: LD_VAR 0 5
19652: PPUSH
19653: CALL_OW 448
19657: IFFALSE 19692
// begin result := [ chassis , engine , control , weapon ] ;
19659: LD_ADDR_VAR 0 6
19663: PUSH
19664: LD_VAR 0 2
19668: PUSH
19669: LD_VAR 0 3
19673: PUSH
19674: LD_VAR 0 4
19678: PUSH
19679: LD_VAR 0 5
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: ST_TO_ADDR
// exit ;
19690: GO 20104
// end ; _chassis := AvailableChassisList ( factory ) ;
19692: LD_ADDR_VAR 0 9
19696: PUSH
19697: LD_VAR 0 1
19701: PPUSH
19702: CALL_OW 475
19706: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19707: LD_ADDR_VAR 0 11
19711: PUSH
19712: LD_VAR 0 1
19716: PPUSH
19717: CALL_OW 476
19721: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19722: LD_ADDR_VAR 0 12
19726: PUSH
19727: LD_VAR 0 1
19731: PPUSH
19732: CALL_OW 477
19736: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19737: LD_ADDR_VAR 0 10
19741: PUSH
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 478
19751: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19752: LD_VAR 0 9
19756: NOT
19757: PUSH
19758: LD_VAR 0 11
19762: NOT
19763: OR
19764: PUSH
19765: LD_VAR 0 12
19769: NOT
19770: OR
19771: PUSH
19772: LD_VAR 0 10
19776: NOT
19777: OR
19778: IFFALSE 19813
// begin result := [ chassis , engine , control , weapon ] ;
19780: LD_ADDR_VAR 0 6
19784: PUSH
19785: LD_VAR 0 2
19789: PUSH
19790: LD_VAR 0 3
19794: PUSH
19795: LD_VAR 0 4
19799: PUSH
19800: LD_VAR 0 5
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: ST_TO_ADDR
// exit ;
19811: GO 20104
// end ; if not chassis in _chassis then
19813: LD_VAR 0 2
19817: PUSH
19818: LD_VAR 0 9
19822: IN
19823: NOT
19824: IFFALSE 19850
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19826: LD_ADDR_VAR 0 2
19830: PUSH
19831: LD_VAR 0 9
19835: PUSH
19836: LD_INT 1
19838: PPUSH
19839: LD_VAR 0 9
19843: PPUSH
19844: CALL_OW 12
19848: ARRAY
19849: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19850: LD_VAR 0 2
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL 20109 0 2
19864: NOT
19865: IFFALSE 19924
// repeat engine := _engine [ 1 ] ;
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: LD_VAR 0 11
19876: PUSH
19877: LD_INT 1
19879: ARRAY
19880: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19881: LD_ADDR_VAR 0 11
19885: PUSH
19886: LD_VAR 0 11
19890: PPUSH
19891: LD_INT 1
19893: PPUSH
19894: CALL_OW 3
19898: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19899: LD_VAR 0 2
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: CALL 20109 0 2
19913: PUSH
19914: LD_VAR 0 11
19918: PUSH
19919: EMPTY
19920: EQUAL
19921: OR
19922: IFFALSE 19867
// if not control in _control then
19924: LD_VAR 0 4
19928: PUSH
19929: LD_VAR 0 12
19933: IN
19934: NOT
19935: IFFALSE 19961
// control := _control [ rand ( 1 , _control ) ] ;
19937: LD_ADDR_VAR 0 4
19941: PUSH
19942: LD_VAR 0 12
19946: PUSH
19947: LD_INT 1
19949: PPUSH
19950: LD_VAR 0 12
19954: PPUSH
19955: CALL_OW 12
19959: ARRAY
19960: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19961: LD_VAR 0 2
19965: PPUSH
19966: LD_VAR 0 5
19970: PPUSH
19971: CALL 20329 0 2
19975: NOT
19976: IFFALSE 20035
// repeat weapon := _weapon [ 1 ] ;
19978: LD_ADDR_VAR 0 5
19982: PUSH
19983: LD_VAR 0 10
19987: PUSH
19988: LD_INT 1
19990: ARRAY
19991: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19992: LD_ADDR_VAR 0 10
19996: PUSH
19997: LD_VAR 0 10
20001: PPUSH
20002: LD_INT 1
20004: PPUSH
20005: CALL_OW 3
20009: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20010: LD_VAR 0 2
20014: PPUSH
20015: LD_VAR 0 5
20019: PPUSH
20020: CALL 20329 0 2
20024: PUSH
20025: LD_VAR 0 10
20029: PUSH
20030: EMPTY
20031: EQUAL
20032: OR
20033: IFFALSE 19978
// result := [ ] ;
20035: LD_ADDR_VAR 0 6
20039: PUSH
20040: EMPTY
20041: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_VAR 0 2
20051: PPUSH
20052: LD_VAR 0 3
20056: PPUSH
20057: LD_VAR 0 4
20061: PPUSH
20062: LD_VAR 0 5
20066: PPUSH
20067: CALL_OW 448
20071: IFFALSE 20104
// result := [ chassis , engine , control , weapon ] ;
20073: LD_ADDR_VAR 0 6
20077: PUSH
20078: LD_VAR 0 2
20082: PUSH
20083: LD_VAR 0 3
20087: PUSH
20088: LD_VAR 0 4
20092: PUSH
20093: LD_VAR 0 5
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: ST_TO_ADDR
// end ;
20104: LD_VAR 0 6
20108: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20109: LD_INT 0
20111: PPUSH
// if not chassis or not engine then
20112: LD_VAR 0 1
20116: NOT
20117: PUSH
20118: LD_VAR 0 2
20122: NOT
20123: OR
20124: IFFALSE 20128
// exit ;
20126: GO 20324
// case engine of engine_solar :
20128: LD_VAR 0 2
20132: PUSH
20133: LD_INT 2
20135: DOUBLE
20136: EQUAL
20137: IFTRUE 20141
20139: GO 20179
20141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20142: LD_ADDR_VAR 0 3
20146: PUSH
20147: LD_INT 11
20149: PUSH
20150: LD_INT 12
20152: PUSH
20153: LD_INT 13
20155: PUSH
20156: LD_INT 14
20158: PUSH
20159: LD_INT 1
20161: PUSH
20162: LD_INT 2
20164: PUSH
20165: LD_INT 3
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
20177: GO 20308
20179: LD_INT 1
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20249
20187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20188: LD_ADDR_VAR 0 3
20192: PUSH
20193: LD_INT 11
20195: PUSH
20196: LD_INT 12
20198: PUSH
20199: LD_INT 13
20201: PUSH
20202: LD_INT 14
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: LD_INT 3
20213: PUSH
20214: LD_INT 4
20216: PUSH
20217: LD_INT 5
20219: PUSH
20220: LD_INT 21
20222: PUSH
20223: LD_INT 23
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_INT 24
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: ST_TO_ADDR
20247: GO 20308
20249: LD_INT 3
20251: DOUBLE
20252: EQUAL
20253: IFTRUE 20257
20255: GO 20307
20257: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20258: LD_ADDR_VAR 0 3
20262: PUSH
20263: LD_INT 13
20265: PUSH
20266: LD_INT 14
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 3
20274: PUSH
20275: LD_INT 4
20277: PUSH
20278: LD_INT 5
20280: PUSH
20281: LD_INT 21
20283: PUSH
20284: LD_INT 22
20286: PUSH
20287: LD_INT 23
20289: PUSH
20290: LD_INT 24
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: ST_TO_ADDR
20305: GO 20308
20307: POP
// result := ( chassis in result ) ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_VAR 0 1
20317: PUSH
20318: LD_VAR 0 3
20322: IN
20323: ST_TO_ADDR
// end ;
20324: LD_VAR 0 3
20328: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20329: LD_INT 0
20331: PPUSH
// if not chassis or not weapon then
20332: LD_VAR 0 1
20336: NOT
20337: PUSH
20338: LD_VAR 0 2
20342: NOT
20343: OR
20344: IFFALSE 20348
// exit ;
20346: GO 21408
// case weapon of us_machine_gun :
20348: LD_VAR 0 2
20352: PUSH
20353: LD_INT 2
20355: DOUBLE
20356: EQUAL
20357: IFTRUE 20361
20359: GO 20391
20361: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20362: LD_ADDR_VAR 0 3
20366: PUSH
20367: LD_INT 1
20369: PUSH
20370: LD_INT 2
20372: PUSH
20373: LD_INT 3
20375: PUSH
20376: LD_INT 4
20378: PUSH
20379: LD_INT 5
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: ST_TO_ADDR
20389: GO 21392
20391: LD_INT 3
20393: DOUBLE
20394: EQUAL
20395: IFTRUE 20399
20397: GO 20429
20399: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20400: LD_ADDR_VAR 0 3
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 2
20410: PUSH
20411: LD_INT 3
20413: PUSH
20414: LD_INT 4
20416: PUSH
20417: LD_INT 5
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: ST_TO_ADDR
20427: GO 21392
20429: LD_INT 11
20431: DOUBLE
20432: EQUAL
20433: IFTRUE 20437
20435: GO 20467
20437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20438: LD_ADDR_VAR 0 3
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_INT 3
20451: PUSH
20452: LD_INT 4
20454: PUSH
20455: LD_INT 5
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: ST_TO_ADDR
20465: GO 21392
20467: LD_INT 4
20469: DOUBLE
20470: EQUAL
20471: IFTRUE 20475
20473: GO 20501
20475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: LD_INT 3
20486: PUSH
20487: LD_INT 4
20489: PUSH
20490: LD_INT 5
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 21392
20501: LD_INT 5
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20535
20509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 4
20523: PUSH
20524: LD_INT 5
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 21392
20535: LD_INT 9
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20569
20543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20544: LD_ADDR_VAR 0 3
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: LD_INT 4
20557: PUSH
20558: LD_INT 5
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: ST_TO_ADDR
20567: GO 21392
20569: LD_INT 7
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20603
20577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 2
20585: PUSH
20586: LD_INT 3
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: LD_INT 5
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
20601: GO 21392
20603: LD_INT 12
20605: DOUBLE
20606: EQUAL
20607: IFTRUE 20611
20609: GO 20637
20611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: LD_INT 3
20622: PUSH
20623: LD_INT 4
20625: PUSH
20626: LD_INT 5
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 21392
20637: LD_INT 13
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20671
20645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20646: LD_ADDR_VAR 0 3
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 3
20656: PUSH
20657: LD_INT 4
20659: PUSH
20660: LD_INT 5
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: ST_TO_ADDR
20669: GO 21392
20671: LD_INT 14
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20697
20679: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20680: LD_ADDR_VAR 0 3
20684: PUSH
20685: LD_INT 4
20687: PUSH
20688: LD_INT 5
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: ST_TO_ADDR
20695: GO 21392
20697: LD_INT 6
20699: DOUBLE
20700: EQUAL
20701: IFTRUE 20705
20703: GO 20723
20705: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20706: LD_ADDR_VAR 0 3
20710: PUSH
20711: LD_INT 4
20713: PUSH
20714: LD_INT 5
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: ST_TO_ADDR
20721: GO 21392
20723: LD_INT 10
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20749
20731: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20732: LD_ADDR_VAR 0 3
20736: PUSH
20737: LD_INT 4
20739: PUSH
20740: LD_INT 5
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: ST_TO_ADDR
20747: GO 21392
20749: LD_INT 22
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20783
20757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20758: LD_ADDR_VAR 0 3
20762: PUSH
20763: LD_INT 11
20765: PUSH
20766: LD_INT 12
20768: PUSH
20769: LD_INT 13
20771: PUSH
20772: LD_INT 14
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
20781: GO 21392
20783: LD_INT 23
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20817
20791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_INT 11
20799: PUSH
20800: LD_INT 12
20802: PUSH
20803: LD_INT 13
20805: PUSH
20806: LD_INT 14
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 21392
20817: LD_INT 24
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20851
20825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: LD_INT 11
20833: PUSH
20834: LD_INT 12
20836: PUSH
20837: LD_INT 13
20839: PUSH
20840: LD_INT 14
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
20849: GO 21392
20851: LD_INT 30
20853: DOUBLE
20854: EQUAL
20855: IFTRUE 20859
20857: GO 20885
20859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_INT 11
20867: PUSH
20868: LD_INT 12
20870: PUSH
20871: LD_INT 13
20873: PUSH
20874: LD_INT 14
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: ST_TO_ADDR
20883: GO 21392
20885: LD_INT 25
20887: DOUBLE
20888: EQUAL
20889: IFTRUE 20893
20891: GO 20911
20893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20894: LD_ADDR_VAR 0 3
20898: PUSH
20899: LD_INT 13
20901: PUSH
20902: LD_INT 14
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: ST_TO_ADDR
20909: GO 21392
20911: LD_INT 27
20913: DOUBLE
20914: EQUAL
20915: IFTRUE 20919
20917: GO 20937
20919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20920: LD_ADDR_VAR 0 3
20924: PUSH
20925: LD_INT 13
20927: PUSH
20928: LD_INT 14
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: ST_TO_ADDR
20935: GO 21392
20937: LD_INT 92
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20971
20945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 11
20953: PUSH
20954: LD_INT 12
20956: PUSH
20957: LD_INT 13
20959: PUSH
20960: LD_INT 14
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: ST_TO_ADDR
20969: GO 21392
20971: LD_INT 28
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 20997
20979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20980: LD_ADDR_VAR 0 3
20984: PUSH
20985: LD_INT 13
20987: PUSH
20988: LD_INT 14
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: ST_TO_ADDR
20995: GO 21392
20997: LD_INT 29
20999: DOUBLE
21000: EQUAL
21001: IFTRUE 21005
21003: GO 21023
21005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21006: LD_ADDR_VAR 0 3
21010: PUSH
21011: LD_INT 13
21013: PUSH
21014: LD_INT 14
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: ST_TO_ADDR
21021: GO 21392
21023: LD_INT 31
21025: DOUBLE
21026: EQUAL
21027: IFTRUE 21031
21029: GO 21049
21031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21032: LD_ADDR_VAR 0 3
21036: PUSH
21037: LD_INT 13
21039: PUSH
21040: LD_INT 14
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: ST_TO_ADDR
21047: GO 21392
21049: LD_INT 26
21051: DOUBLE
21052: EQUAL
21053: IFTRUE 21057
21055: GO 21075
21057: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21058: LD_ADDR_VAR 0 3
21062: PUSH
21063: LD_INT 13
21065: PUSH
21066: LD_INT 14
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: ST_TO_ADDR
21073: GO 21392
21075: LD_INT 42
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21109
21083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 21
21091: PUSH
21092: LD_INT 22
21094: PUSH
21095: LD_INT 23
21097: PUSH
21098: LD_INT 24
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 21392
21109: LD_INT 43
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21143
21117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21118: LD_ADDR_VAR 0 3
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: LD_INT 22
21128: PUSH
21129: LD_INT 23
21131: PUSH
21132: LD_INT 24
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: ST_TO_ADDR
21141: GO 21392
21143: LD_INT 44
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21177
21151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21152: LD_ADDR_VAR 0 3
21156: PUSH
21157: LD_INT 21
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 23
21165: PUSH
21166: LD_INT 24
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 21392
21177: LD_INT 45
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21211
21185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21186: LD_ADDR_VAR 0 3
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 22
21196: PUSH
21197: LD_INT 23
21199: PUSH
21200: LD_INT 24
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: ST_TO_ADDR
21209: GO 21392
21211: LD_INT 49
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21245
21219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 22
21230: PUSH
21231: LD_INT 23
21233: PUSH
21234: LD_INT 24
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: ST_TO_ADDR
21243: GO 21392
21245: LD_INT 51
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21279
21253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: LD_INT 21
21261: PUSH
21262: LD_INT 22
21264: PUSH
21265: LD_INT 23
21267: PUSH
21268: LD_INT 24
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21392
21279: LD_INT 52
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21313
21287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 21
21295: PUSH
21296: LD_INT 22
21298: PUSH
21299: LD_INT 23
21301: PUSH
21302: LD_INT 24
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: ST_TO_ADDR
21311: GO 21392
21313: LD_INT 53
21315: DOUBLE
21316: EQUAL
21317: IFTRUE 21321
21319: GO 21339
21321: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 23
21329: PUSH
21330: LD_INT 24
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: ST_TO_ADDR
21337: GO 21392
21339: LD_INT 46
21341: DOUBLE
21342: EQUAL
21343: IFTRUE 21347
21345: GO 21365
21347: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21348: LD_ADDR_VAR 0 3
21352: PUSH
21353: LD_INT 23
21355: PUSH
21356: LD_INT 24
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: ST_TO_ADDR
21363: GO 21392
21365: LD_INT 47
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21391
21373: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21374: LD_ADDR_VAR 0 3
21378: PUSH
21379: LD_INT 23
21381: PUSH
21382: LD_INT 24
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: ST_TO_ADDR
21389: GO 21392
21391: POP
// result := ( chassis in result ) ;
21392: LD_ADDR_VAR 0 3
21396: PUSH
21397: LD_VAR 0 1
21401: PUSH
21402: LD_VAR 0 3
21406: IN
21407: ST_TO_ADDR
// end ;
21408: LD_VAR 0 3
21412: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
21417: PPUSH
21418: PPUSH
21419: PPUSH
21420: PPUSH
21421: PPUSH
// result := array ;
21422: LD_ADDR_VAR 0 5
21426: PUSH
21427: LD_VAR 0 1
21431: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21432: LD_VAR 0 1
21436: NOT
21437: PUSH
21438: LD_VAR 0 2
21442: NOT
21443: OR
21444: PUSH
21445: LD_VAR 0 3
21449: NOT
21450: OR
21451: PUSH
21452: LD_VAR 0 2
21456: PUSH
21457: LD_VAR 0 1
21461: GREATER
21462: OR
21463: PUSH
21464: LD_VAR 0 3
21468: PUSH
21469: LD_VAR 0 1
21473: GREATER
21474: OR
21475: IFFALSE 21479
// exit ;
21477: GO 21775
// if direction then
21479: LD_VAR 0 4
21483: IFFALSE 21547
// begin d := 1 ;
21485: LD_ADDR_VAR 0 9
21489: PUSH
21490: LD_INT 1
21492: ST_TO_ADDR
// if i_from > i_to then
21493: LD_VAR 0 2
21497: PUSH
21498: LD_VAR 0 3
21502: GREATER
21503: IFFALSE 21529
// length := ( array - i_from ) + i_to else
21505: LD_ADDR_VAR 0 11
21509: PUSH
21510: LD_VAR 0 1
21514: PUSH
21515: LD_VAR 0 2
21519: MINUS
21520: PUSH
21521: LD_VAR 0 3
21525: PLUS
21526: ST_TO_ADDR
21527: GO 21545
// length := i_to - i_from ;
21529: LD_ADDR_VAR 0 11
21533: PUSH
21534: LD_VAR 0 3
21538: PUSH
21539: LD_VAR 0 2
21543: MINUS
21544: ST_TO_ADDR
// end else
21545: GO 21608
// begin d := - 1 ;
21547: LD_ADDR_VAR 0 9
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: ST_TO_ADDR
// if i_from > i_to then
21556: LD_VAR 0 2
21560: PUSH
21561: LD_VAR 0 3
21565: GREATER
21566: IFFALSE 21586
// length := i_from - i_to else
21568: LD_ADDR_VAR 0 11
21572: PUSH
21573: LD_VAR 0 2
21577: PUSH
21578: LD_VAR 0 3
21582: MINUS
21583: ST_TO_ADDR
21584: GO 21608
// length := ( array - i_to ) + i_from ;
21586: LD_ADDR_VAR 0 11
21590: PUSH
21591: LD_VAR 0 1
21595: PUSH
21596: LD_VAR 0 3
21600: MINUS
21601: PUSH
21602: LD_VAR 0 2
21606: PLUS
21607: ST_TO_ADDR
// end ; if not length then
21608: LD_VAR 0 11
21612: NOT
21613: IFFALSE 21617
// exit ;
21615: GO 21775
// tmp := array ;
21617: LD_ADDR_VAR 0 10
21621: PUSH
21622: LD_VAR 0 1
21626: ST_TO_ADDR
// for i = 1 to length do
21627: LD_ADDR_VAR 0 6
21631: PUSH
21632: DOUBLE
21633: LD_INT 1
21635: DEC
21636: ST_TO_ADDR
21637: LD_VAR 0 11
21641: PUSH
21642: FOR_TO
21643: IFFALSE 21763
// begin for j = 1 to array do
21645: LD_ADDR_VAR 0 7
21649: PUSH
21650: DOUBLE
21651: LD_INT 1
21653: DEC
21654: ST_TO_ADDR
21655: LD_VAR 0 1
21659: PUSH
21660: FOR_TO
21661: IFFALSE 21749
// begin k := j + d ;
21663: LD_ADDR_VAR 0 8
21667: PUSH
21668: LD_VAR 0 7
21672: PUSH
21673: LD_VAR 0 9
21677: PLUS
21678: ST_TO_ADDR
// if k > array then
21679: LD_VAR 0 8
21683: PUSH
21684: LD_VAR 0 1
21688: GREATER
21689: IFFALSE 21699
// k := 1 ;
21691: LD_ADDR_VAR 0 8
21695: PUSH
21696: LD_INT 1
21698: ST_TO_ADDR
// if not k then
21699: LD_VAR 0 8
21703: NOT
21704: IFFALSE 21716
// k := array ;
21706: LD_ADDR_VAR 0 8
21710: PUSH
21711: LD_VAR 0 1
21715: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21716: LD_ADDR_VAR 0 10
21720: PUSH
21721: LD_VAR 0 10
21725: PPUSH
21726: LD_VAR 0 8
21730: PPUSH
21731: LD_VAR 0 1
21735: PUSH
21736: LD_VAR 0 7
21740: ARRAY
21741: PPUSH
21742: CALL_OW 1
21746: ST_TO_ADDR
// end ;
21747: GO 21660
21749: POP
21750: POP
// array := tmp ;
21751: LD_ADDR_VAR 0 1
21755: PUSH
21756: LD_VAR 0 10
21760: ST_TO_ADDR
// end ;
21761: GO 21642
21763: POP
21764: POP
// result := array ;
21765: LD_ADDR_VAR 0 5
21769: PUSH
21770: LD_VAR 0 1
21774: ST_TO_ADDR
// end ;
21775: LD_VAR 0 5
21779: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21780: LD_INT 0
21782: PPUSH
21783: PPUSH
// result := 0 ;
21784: LD_ADDR_VAR 0 3
21788: PUSH
21789: LD_INT 0
21791: ST_TO_ADDR
// if not array or not value in array then
21792: LD_VAR 0 1
21796: NOT
21797: PUSH
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 1
21807: IN
21808: NOT
21809: OR
21810: IFFALSE 21814
// exit ;
21812: GO 21868
// for i = 1 to array do
21814: LD_ADDR_VAR 0 4
21818: PUSH
21819: DOUBLE
21820: LD_INT 1
21822: DEC
21823: ST_TO_ADDR
21824: LD_VAR 0 1
21828: PUSH
21829: FOR_TO
21830: IFFALSE 21866
// if value = array [ i ] then
21832: LD_VAR 0 2
21836: PUSH
21837: LD_VAR 0 1
21841: PUSH
21842: LD_VAR 0 4
21846: ARRAY
21847: EQUAL
21848: IFFALSE 21864
// begin result := i ;
21850: LD_ADDR_VAR 0 3
21854: PUSH
21855: LD_VAR 0 4
21859: ST_TO_ADDR
// exit ;
21860: POP
21861: POP
21862: GO 21868
// end ;
21864: GO 21829
21866: POP
21867: POP
// end ;
21868: LD_VAR 0 3
21872: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21873: LD_INT 0
21875: PPUSH
// vc_chassis := chassis ;
21876: LD_ADDR_OWVAR 37
21880: PUSH
21881: LD_VAR 0 1
21885: ST_TO_ADDR
// vc_engine := engine ;
21886: LD_ADDR_OWVAR 39
21890: PUSH
21891: LD_VAR 0 2
21895: ST_TO_ADDR
// vc_control := control ;
21896: LD_ADDR_OWVAR 38
21900: PUSH
21901: LD_VAR 0 3
21905: ST_TO_ADDR
// vc_weapon := weapon ;
21906: LD_ADDR_OWVAR 40
21910: PUSH
21911: LD_VAR 0 4
21915: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21916: LD_ADDR_OWVAR 41
21920: PUSH
21921: LD_VAR 0 5
21925: ST_TO_ADDR
// end ;
21926: LD_VAR 0 6
21930: RET
// export function WantPlant ( unit ) ; var task ; begin
21931: LD_INT 0
21933: PPUSH
21934: PPUSH
// result := false ;
21935: LD_ADDR_VAR 0 2
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21943: LD_ADDR_VAR 0 3
21947: PUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 437
21957: ST_TO_ADDR
// if task then
21958: LD_VAR 0 3
21962: IFFALSE 21990
// if task [ 1 ] [ 1 ] = p then
21964: LD_VAR 0 3
21968: PUSH
21969: LD_INT 1
21971: ARRAY
21972: PUSH
21973: LD_INT 1
21975: ARRAY
21976: PUSH
21977: LD_STRING p
21979: EQUAL
21980: IFFALSE 21990
// result := true ;
21982: LD_ADDR_VAR 0 2
21986: PUSH
21987: LD_INT 1
21989: ST_TO_ADDR
// end ;
21990: LD_VAR 0 2
21994: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21995: LD_INT 0
21997: PPUSH
21998: PPUSH
21999: PPUSH
22000: PPUSH
// if pos < 1 then
22001: LD_VAR 0 2
22005: PUSH
22006: LD_INT 1
22008: LESS
22009: IFFALSE 22013
// exit ;
22011: GO 22316
// if pos = 1 then
22013: LD_VAR 0 2
22017: PUSH
22018: LD_INT 1
22020: EQUAL
22021: IFFALSE 22054
// result := Replace ( arr , pos [ 1 ] , value ) else
22023: LD_ADDR_VAR 0 4
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: LD_VAR 0 2
22037: PUSH
22038: LD_INT 1
22040: ARRAY
22041: PPUSH
22042: LD_VAR 0 3
22046: PPUSH
22047: CALL_OW 1
22051: ST_TO_ADDR
22052: GO 22316
// begin tmp := arr ;
22054: LD_ADDR_VAR 0 6
22058: PUSH
22059: LD_VAR 0 1
22063: ST_TO_ADDR
// s_arr := [ tmp ] ;
22064: LD_ADDR_VAR 0 7
22068: PUSH
22069: LD_VAR 0 6
22073: PUSH
22074: EMPTY
22075: LIST
22076: ST_TO_ADDR
// for i = 1 to pos - 1 do
22077: LD_ADDR_VAR 0 5
22081: PUSH
22082: DOUBLE
22083: LD_INT 1
22085: DEC
22086: ST_TO_ADDR
22087: LD_VAR 0 2
22091: PUSH
22092: LD_INT 1
22094: MINUS
22095: PUSH
22096: FOR_TO
22097: IFFALSE 22142
// begin tmp := tmp [ pos [ i ] ] ;
22099: LD_ADDR_VAR 0 6
22103: PUSH
22104: LD_VAR 0 6
22108: PUSH
22109: LD_VAR 0 2
22113: PUSH
22114: LD_VAR 0 5
22118: ARRAY
22119: ARRAY
22120: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22121: LD_ADDR_VAR 0 7
22125: PUSH
22126: LD_VAR 0 7
22130: PUSH
22131: LD_VAR 0 6
22135: PUSH
22136: EMPTY
22137: LIST
22138: ADD
22139: ST_TO_ADDR
// end ;
22140: GO 22096
22142: POP
22143: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22144: LD_ADDR_VAR 0 6
22148: PUSH
22149: LD_VAR 0 6
22153: PPUSH
22154: LD_VAR 0 2
22158: PUSH
22159: LD_VAR 0 2
22163: ARRAY
22164: PPUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: CALL_OW 1
22174: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22175: LD_ADDR_VAR 0 7
22179: PUSH
22180: LD_VAR 0 7
22184: PPUSH
22185: LD_VAR 0 7
22189: PPUSH
22190: LD_VAR 0 6
22194: PPUSH
22195: CALL_OW 1
22199: ST_TO_ADDR
// for i = s_arr downto 2 do
22200: LD_ADDR_VAR 0 5
22204: PUSH
22205: DOUBLE
22206: LD_VAR 0 7
22210: INC
22211: ST_TO_ADDR
22212: LD_INT 2
22214: PUSH
22215: FOR_DOWNTO
22216: IFFALSE 22300
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22218: LD_ADDR_VAR 0 6
22222: PUSH
22223: LD_VAR 0 7
22227: PUSH
22228: LD_VAR 0 5
22232: PUSH
22233: LD_INT 1
22235: MINUS
22236: ARRAY
22237: PPUSH
22238: LD_VAR 0 2
22242: PUSH
22243: LD_VAR 0 5
22247: PUSH
22248: LD_INT 1
22250: MINUS
22251: ARRAY
22252: PPUSH
22253: LD_VAR 0 7
22257: PUSH
22258: LD_VAR 0 5
22262: ARRAY
22263: PPUSH
22264: CALL_OW 1
22268: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22269: LD_ADDR_VAR 0 7
22273: PUSH
22274: LD_VAR 0 7
22278: PPUSH
22279: LD_VAR 0 5
22283: PUSH
22284: LD_INT 1
22286: MINUS
22287: PPUSH
22288: LD_VAR 0 6
22292: PPUSH
22293: CALL_OW 1
22297: ST_TO_ADDR
// end ;
22298: GO 22215
22300: POP
22301: POP
// result := s_arr [ 1 ] ;
22302: LD_ADDR_VAR 0 4
22306: PUSH
22307: LD_VAR 0 7
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: ST_TO_ADDR
// end ; end ;
22316: LD_VAR 0 4
22320: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22321: LD_INT 0
22323: PPUSH
22324: PPUSH
// if not list then
22325: LD_VAR 0 1
22329: NOT
22330: IFFALSE 22334
// exit ;
22332: GO 22425
// i := list [ pos1 ] ;
22334: LD_ADDR_VAR 0 5
22338: PUSH
22339: LD_VAR 0 1
22343: PUSH
22344: LD_VAR 0 2
22348: ARRAY
22349: ST_TO_ADDR
// if not i then
22350: LD_VAR 0 5
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22425
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22359: LD_ADDR_VAR 0 1
22363: PUSH
22364: LD_VAR 0 1
22368: PPUSH
22369: LD_VAR 0 2
22373: PPUSH
22374: LD_VAR 0 1
22378: PUSH
22379: LD_VAR 0 3
22383: ARRAY
22384: PPUSH
22385: CALL_OW 1
22389: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22390: LD_ADDR_VAR 0 1
22394: PUSH
22395: LD_VAR 0 1
22399: PPUSH
22400: LD_VAR 0 3
22404: PPUSH
22405: LD_VAR 0 5
22409: PPUSH
22410: CALL_OW 1
22414: ST_TO_ADDR
// result := list ;
22415: LD_ADDR_VAR 0 4
22419: PUSH
22420: LD_VAR 0 1
22424: ST_TO_ADDR
// end ;
22425: LD_VAR 0 4
22429: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22430: LD_INT 0
22432: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22433: LD_ADDR_VAR 0 5
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 250
22447: PPUSH
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 251
22457: PPUSH
22458: LD_VAR 0 2
22462: PPUSH
22463: LD_VAR 0 3
22467: PPUSH
22468: LD_VAR 0 4
22472: PPUSH
22473: CALL 22851 0 5
22477: ST_TO_ADDR
// end ;
22478: LD_VAR 0 5
22482: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
// if not list or not unit then
22489: LD_VAR 0 2
22493: NOT
22494: PUSH
22495: LD_VAR 0 1
22499: NOT
22500: OR
22501: IFFALSE 22505
// exit ;
22503: GO 22846
// result := [ ] ;
22505: LD_ADDR_VAR 0 5
22509: PUSH
22510: EMPTY
22511: ST_TO_ADDR
// for i in list do
22512: LD_ADDR_VAR 0 6
22516: PUSH
22517: LD_VAR 0 2
22521: PUSH
22522: FOR_IN
22523: IFFALSE 22741
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22525: LD_ADDR_VAR 0 8
22529: PUSH
22530: LD_VAR 0 1
22534: PPUSH
22535: LD_VAR 0 6
22539: PUSH
22540: LD_INT 1
22542: ARRAY
22543: PPUSH
22544: LD_VAR 0 6
22548: PUSH
22549: LD_INT 2
22551: ARRAY
22552: PPUSH
22553: CALL_OW 297
22557: ST_TO_ADDR
// if not Count ( result ) then
22558: LD_VAR 0 5
22562: PPUSH
22563: CALL 19135 0 1
22567: NOT
22568: IFFALSE 22601
// begin result := Join ( result , [ i , tmp ] ) ;
22570: LD_ADDR_VAR 0 5
22574: PUSH
22575: LD_VAR 0 5
22579: PPUSH
22580: LD_VAR 0 6
22584: PUSH
22585: LD_VAR 0 8
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PPUSH
22594: CALL 54744 0 2
22598: ST_TO_ADDR
// continue ;
22599: GO 22522
// end ; if result [ result ] [ 2 ] <= tmp then
22601: LD_VAR 0 5
22605: PUSH
22606: LD_VAR 0 5
22610: ARRAY
22611: PUSH
22612: LD_INT 2
22614: ARRAY
22615: PUSH
22616: LD_VAR 0 8
22620: LESSEQUAL
22621: IFFALSE 22654
// result := Join ( result , [ i , tmp ] ) else
22623: LD_ADDR_VAR 0 5
22627: PUSH
22628: LD_VAR 0 5
22632: PPUSH
22633: LD_VAR 0 6
22637: PUSH
22638: LD_VAR 0 8
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL 54744 0 2
22651: ST_TO_ADDR
22652: GO 22739
// begin for j := 1 to Count ( result ) do
22654: LD_ADDR_VAR 0 7
22658: PUSH
22659: DOUBLE
22660: LD_INT 1
22662: DEC
22663: ST_TO_ADDR
22664: LD_VAR 0 5
22668: PPUSH
22669: CALL 19135 0 1
22673: PUSH
22674: FOR_TO
22675: IFFALSE 22737
// begin if tmp < result [ j ] [ 2 ] then
22677: LD_VAR 0 8
22681: PUSH
22682: LD_VAR 0 5
22686: PUSH
22687: LD_VAR 0 7
22691: ARRAY
22692: PUSH
22693: LD_INT 2
22695: ARRAY
22696: LESS
22697: IFFALSE 22735
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22699: LD_ADDR_VAR 0 5
22703: PUSH
22704: LD_VAR 0 5
22708: PPUSH
22709: LD_VAR 0 7
22713: PPUSH
22714: LD_VAR 0 6
22718: PUSH
22719: LD_VAR 0 8
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PPUSH
22728: CALL_OW 2
22732: ST_TO_ADDR
// break ;
22733: GO 22737
// end ; end ;
22735: GO 22674
22737: POP
22738: POP
// end ; end ;
22739: GO 22522
22741: POP
22742: POP
// if result and not asc then
22743: LD_VAR 0 5
22747: PUSH
22748: LD_VAR 0 3
22752: NOT
22753: AND
22754: IFFALSE 22771
// result := ReverseArray ( result ) ;
22756: LD_ADDR_VAR 0 5
22760: PUSH
22761: LD_VAR 0 5
22765: PPUSH
22766: CALL 50011 0 1
22770: ST_TO_ADDR
// tmp := [ ] ;
22771: LD_ADDR_VAR 0 8
22775: PUSH
22776: EMPTY
22777: ST_TO_ADDR
// if mode then
22778: LD_VAR 0 4
22782: IFFALSE 22846
// begin for i := 1 to result do
22784: LD_ADDR_VAR 0 6
22788: PUSH
22789: DOUBLE
22790: LD_INT 1
22792: DEC
22793: ST_TO_ADDR
22794: LD_VAR 0 5
22798: PUSH
22799: FOR_TO
22800: IFFALSE 22834
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22802: LD_ADDR_VAR 0 8
22806: PUSH
22807: LD_VAR 0 8
22811: PPUSH
22812: LD_VAR 0 5
22816: PUSH
22817: LD_VAR 0 6
22821: ARRAY
22822: PUSH
22823: LD_INT 1
22825: ARRAY
22826: PPUSH
22827: CALL 54744 0 2
22831: ST_TO_ADDR
22832: GO 22799
22834: POP
22835: POP
// result := tmp ;
22836: LD_ADDR_VAR 0 5
22840: PUSH
22841: LD_VAR 0 8
22845: ST_TO_ADDR
// end ; end ;
22846: LD_VAR 0 5
22850: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22851: LD_INT 0
22853: PPUSH
22854: PPUSH
22855: PPUSH
22856: PPUSH
// if not list then
22857: LD_VAR 0 3
22861: NOT
22862: IFFALSE 22866
// exit ;
22864: GO 23254
// result := [ ] ;
22866: LD_ADDR_VAR 0 6
22870: PUSH
22871: EMPTY
22872: ST_TO_ADDR
// for i in list do
22873: LD_ADDR_VAR 0 7
22877: PUSH
22878: LD_VAR 0 3
22882: PUSH
22883: FOR_IN
22884: IFFALSE 23086
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22886: LD_ADDR_VAR 0 9
22890: PUSH
22891: LD_VAR 0 7
22895: PPUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: LD_VAR 0 2
22905: PPUSH
22906: CALL_OW 297
22910: ST_TO_ADDR
// if not result then
22911: LD_VAR 0 6
22915: NOT
22916: IFFALSE 22942
// result := [ [ i , tmp ] ] else
22918: LD_ADDR_VAR 0 6
22922: PUSH
22923: LD_VAR 0 7
22927: PUSH
22928: LD_VAR 0 9
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: ST_TO_ADDR
22940: GO 23084
// begin if result [ result ] [ 2 ] <= tmp then
22942: LD_VAR 0 6
22946: PUSH
22947: LD_VAR 0 6
22951: ARRAY
22952: PUSH
22953: LD_INT 2
22955: ARRAY
22956: PUSH
22957: LD_VAR 0 9
22961: LESSEQUAL
22962: IFFALSE 23004
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22964: LD_ADDR_VAR 0 6
22968: PUSH
22969: LD_VAR 0 6
22973: PPUSH
22974: LD_VAR 0 6
22978: PUSH
22979: LD_INT 1
22981: PLUS
22982: PPUSH
22983: LD_VAR 0 7
22987: PUSH
22988: LD_VAR 0 9
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PPUSH
22997: CALL_OW 2
23001: ST_TO_ADDR
23002: GO 23084
// for j := 1 to result do
23004: LD_ADDR_VAR 0 8
23008: PUSH
23009: DOUBLE
23010: LD_INT 1
23012: DEC
23013: ST_TO_ADDR
23014: LD_VAR 0 6
23018: PUSH
23019: FOR_TO
23020: IFFALSE 23082
// begin if tmp < result [ j ] [ 2 ] then
23022: LD_VAR 0 9
23026: PUSH
23027: LD_VAR 0 6
23031: PUSH
23032: LD_VAR 0 8
23036: ARRAY
23037: PUSH
23038: LD_INT 2
23040: ARRAY
23041: LESS
23042: IFFALSE 23080
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23044: LD_ADDR_VAR 0 6
23048: PUSH
23049: LD_VAR 0 6
23053: PPUSH
23054: LD_VAR 0 8
23058: PPUSH
23059: LD_VAR 0 7
23063: PUSH
23064: LD_VAR 0 9
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PPUSH
23073: CALL_OW 2
23077: ST_TO_ADDR
// break ;
23078: GO 23082
// end ; end ;
23080: GO 23019
23082: POP
23083: POP
// end ; end ;
23084: GO 22883
23086: POP
23087: POP
// if result and not asc then
23088: LD_VAR 0 6
23092: PUSH
23093: LD_VAR 0 4
23097: NOT
23098: AND
23099: IFFALSE 23174
// begin tmp := result ;
23101: LD_ADDR_VAR 0 9
23105: PUSH
23106: LD_VAR 0 6
23110: ST_TO_ADDR
// for i = tmp downto 1 do
23111: LD_ADDR_VAR 0 7
23115: PUSH
23116: DOUBLE
23117: LD_VAR 0 9
23121: INC
23122: ST_TO_ADDR
23123: LD_INT 1
23125: PUSH
23126: FOR_DOWNTO
23127: IFFALSE 23172
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23129: LD_ADDR_VAR 0 6
23133: PUSH
23134: LD_VAR 0 6
23138: PPUSH
23139: LD_VAR 0 9
23143: PUSH
23144: LD_VAR 0 7
23148: MINUS
23149: PUSH
23150: LD_INT 1
23152: PLUS
23153: PPUSH
23154: LD_VAR 0 9
23158: PUSH
23159: LD_VAR 0 7
23163: ARRAY
23164: PPUSH
23165: CALL_OW 1
23169: ST_TO_ADDR
23170: GO 23126
23172: POP
23173: POP
// end ; tmp := [ ] ;
23174: LD_ADDR_VAR 0 9
23178: PUSH
23179: EMPTY
23180: ST_TO_ADDR
// if mode then
23181: LD_VAR 0 5
23185: IFFALSE 23254
// begin for i = 1 to result do
23187: LD_ADDR_VAR 0 7
23191: PUSH
23192: DOUBLE
23193: LD_INT 1
23195: DEC
23196: ST_TO_ADDR
23197: LD_VAR 0 6
23201: PUSH
23202: FOR_TO
23203: IFFALSE 23242
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23205: LD_ADDR_VAR 0 9
23209: PUSH
23210: LD_VAR 0 9
23214: PPUSH
23215: LD_VAR 0 7
23219: PPUSH
23220: LD_VAR 0 6
23224: PUSH
23225: LD_VAR 0 7
23229: ARRAY
23230: PUSH
23231: LD_INT 1
23233: ARRAY
23234: PPUSH
23235: CALL_OW 1
23239: ST_TO_ADDR
23240: GO 23202
23242: POP
23243: POP
// result := tmp ;
23244: LD_ADDR_VAR 0 6
23248: PUSH
23249: LD_VAR 0 9
23253: ST_TO_ADDR
// end ; end ;
23254: LD_VAR 0 6
23258: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23259: LD_INT 0
23261: PPUSH
23262: PPUSH
23263: PPUSH
23264: PPUSH
23265: PPUSH
23266: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23267: LD_ADDR_VAR 0 5
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 0
23280: PUSH
23281: EMPTY
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: ST_TO_ADDR
// if not x or not y then
23289: LD_VAR 0 2
23293: NOT
23294: PUSH
23295: LD_VAR 0 3
23299: NOT
23300: OR
23301: IFFALSE 23305
// exit ;
23303: GO 24955
// if not range then
23305: LD_VAR 0 4
23309: NOT
23310: IFFALSE 23320
// range := 10 ;
23312: LD_ADDR_VAR 0 4
23316: PUSH
23317: LD_INT 10
23319: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23320: LD_ADDR_VAR 0 8
23324: PUSH
23325: LD_INT 81
23327: PUSH
23328: LD_VAR 0 1
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 92
23339: PUSH
23340: LD_VAR 0 2
23344: PUSH
23345: LD_VAR 0 3
23349: PUSH
23350: LD_VAR 0 4
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 3
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: ST_TO_ADDR
// if not tmp then
23388: LD_VAR 0 8
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 24955
// for i in tmp do
23397: LD_ADDR_VAR 0 6
23401: PUSH
23402: LD_VAR 0 8
23406: PUSH
23407: FOR_IN
23408: IFFALSE 24930
// begin points := [ 0 , 0 , 0 ] ;
23410: LD_ADDR_VAR 0 9
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: LD_INT 0
23420: PUSH
23421: LD_INT 0
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: LIST
23428: ST_TO_ADDR
// bpoints := 1 ;
23429: LD_ADDR_VAR 0 10
23433: PUSH
23434: LD_INT 1
23436: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23437: LD_VAR 0 6
23441: PPUSH
23442: CALL_OW 247
23446: PUSH
23447: LD_INT 1
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 24033
23455: POP
// begin if GetClass ( i ) = 1 then
23456: LD_VAR 0 6
23460: PPUSH
23461: CALL_OW 257
23465: PUSH
23466: LD_INT 1
23468: EQUAL
23469: IFFALSE 23490
// points := [ 10 , 5 , 3 ] ;
23471: LD_ADDR_VAR 0 9
23475: PUSH
23476: LD_INT 10
23478: PUSH
23479: LD_INT 5
23481: PUSH
23482: LD_INT 3
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23490: LD_VAR 0 6
23494: PPUSH
23495: CALL_OW 257
23499: PUSH
23500: LD_INT 2
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: LD_INT 4
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: IN
23514: IFFALSE 23535
// points := [ 3 , 2 , 1 ] ;
23516: LD_ADDR_VAR 0 9
23520: PUSH
23521: LD_INT 3
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23535: LD_VAR 0 6
23539: PPUSH
23540: CALL_OW 257
23544: PUSH
23545: LD_INT 5
23547: EQUAL
23548: IFFALSE 23569
// points := [ 130 , 5 , 2 ] ;
23550: LD_ADDR_VAR 0 9
23554: PUSH
23555: LD_INT 130
23557: PUSH
23558: LD_INT 5
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23569: LD_VAR 0 6
23573: PPUSH
23574: CALL_OW 257
23578: PUSH
23579: LD_INT 8
23581: EQUAL
23582: IFFALSE 23603
// points := [ 35 , 35 , 30 ] ;
23584: LD_ADDR_VAR 0 9
23588: PUSH
23589: LD_INT 35
23591: PUSH
23592: LD_INT 35
23594: PUSH
23595: LD_INT 30
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23603: LD_VAR 0 6
23607: PPUSH
23608: CALL_OW 257
23612: PUSH
23613: LD_INT 9
23615: EQUAL
23616: IFFALSE 23637
// points := [ 20 , 55 , 40 ] ;
23618: LD_ADDR_VAR 0 9
23622: PUSH
23623: LD_INT 20
23625: PUSH
23626: LD_INT 55
23628: PUSH
23629: LD_INT 40
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23637: LD_VAR 0 6
23641: PPUSH
23642: CALL_OW 257
23646: PUSH
23647: LD_INT 12
23649: PUSH
23650: LD_INT 16
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: IN
23657: IFFALSE 23678
// points := [ 5 , 3 , 2 ] ;
23659: LD_ADDR_VAR 0 9
23663: PUSH
23664: LD_INT 5
23666: PUSH
23667: LD_INT 3
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23678: LD_VAR 0 6
23682: PPUSH
23683: CALL_OW 257
23687: PUSH
23688: LD_INT 17
23690: EQUAL
23691: IFFALSE 23712
// points := [ 100 , 50 , 75 ] ;
23693: LD_ADDR_VAR 0 9
23697: PUSH
23698: LD_INT 100
23700: PUSH
23701: LD_INT 50
23703: PUSH
23704: LD_INT 75
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23712: LD_VAR 0 6
23716: PPUSH
23717: CALL_OW 257
23721: PUSH
23722: LD_INT 15
23724: EQUAL
23725: IFFALSE 23746
// points := [ 10 , 5 , 3 ] ;
23727: LD_ADDR_VAR 0 9
23731: PUSH
23732: LD_INT 10
23734: PUSH
23735: LD_INT 5
23737: PUSH
23738: LD_INT 3
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23746: LD_VAR 0 6
23750: PPUSH
23751: CALL_OW 257
23755: PUSH
23756: LD_INT 14
23758: EQUAL
23759: IFFALSE 23780
// points := [ 10 , 0 , 0 ] ;
23761: LD_ADDR_VAR 0 9
23765: PUSH
23766: LD_INT 10
23768: PUSH
23769: LD_INT 0
23771: PUSH
23772: LD_INT 0
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23780: LD_VAR 0 6
23784: PPUSH
23785: CALL_OW 257
23789: PUSH
23790: LD_INT 11
23792: EQUAL
23793: IFFALSE 23814
// points := [ 30 , 10 , 5 ] ;
23795: LD_ADDR_VAR 0 9
23799: PUSH
23800: LD_INT 30
23802: PUSH
23803: LD_INT 10
23805: PUSH
23806: LD_INT 5
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23814: LD_VAR 0 1
23818: PPUSH
23819: LD_INT 5
23821: PPUSH
23822: CALL_OW 321
23826: PUSH
23827: LD_INT 2
23829: EQUAL
23830: IFFALSE 23847
// bpoints := bpoints * 1.8 ;
23832: LD_ADDR_VAR 0 10
23836: PUSH
23837: LD_VAR 0 10
23841: PUSH
23842: LD_REAL  1.80000000000000E+0000
23845: MUL
23846: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23847: LD_VAR 0 6
23851: PPUSH
23852: CALL_OW 257
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 3
23865: PUSH
23866: LD_INT 4
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: IN
23875: PUSH
23876: LD_VAR 0 1
23880: PPUSH
23881: LD_INT 51
23883: PPUSH
23884: CALL_OW 321
23888: PUSH
23889: LD_INT 2
23891: EQUAL
23892: AND
23893: IFFALSE 23910
// bpoints := bpoints * 1.2 ;
23895: LD_ADDR_VAR 0 10
23899: PUSH
23900: LD_VAR 0 10
23904: PUSH
23905: LD_REAL  1.20000000000000E+0000
23908: MUL
23909: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23910: LD_VAR 0 6
23914: PPUSH
23915: CALL_OW 257
23919: PUSH
23920: LD_INT 5
23922: PUSH
23923: LD_INT 7
23925: PUSH
23926: LD_INT 9
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: IN
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_INT 52
23942: PPUSH
23943: CALL_OW 321
23947: PUSH
23948: LD_INT 2
23950: EQUAL
23951: AND
23952: IFFALSE 23969
// bpoints := bpoints * 1.5 ;
23954: LD_ADDR_VAR 0 10
23958: PUSH
23959: LD_VAR 0 10
23963: PUSH
23964: LD_REAL  1.50000000000000E+0000
23967: MUL
23968: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23969: LD_VAR 0 1
23973: PPUSH
23974: LD_INT 66
23976: PPUSH
23977: CALL_OW 321
23981: PUSH
23982: LD_INT 2
23984: EQUAL
23985: IFFALSE 24002
// bpoints := bpoints * 1.1 ;
23987: LD_ADDR_VAR 0 10
23991: PUSH
23992: LD_VAR 0 10
23996: PUSH
23997: LD_REAL  1.10000000000000E+0000
24000: MUL
24001: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24002: LD_ADDR_VAR 0 10
24006: PUSH
24007: LD_VAR 0 10
24011: PUSH
24012: LD_VAR 0 6
24016: PPUSH
24017: LD_INT 1
24019: PPUSH
24020: CALL_OW 259
24024: PUSH
24025: LD_REAL  1.15000000000000E+0000
24028: MUL
24029: MUL
24030: ST_TO_ADDR
// end ; unit_vehicle :
24031: GO 24859
24033: LD_INT 2
24035: DOUBLE
24036: EQUAL
24037: IFTRUE 24041
24039: GO 24847
24041: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24042: LD_VAR 0 6
24046: PPUSH
24047: CALL_OW 264
24051: PUSH
24052: LD_INT 2
24054: PUSH
24055: LD_INT 42
24057: PUSH
24058: LD_INT 24
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: LIST
24065: IN
24066: IFFALSE 24087
// points := [ 25 , 5 , 3 ] ;
24068: LD_ADDR_VAR 0 9
24072: PUSH
24073: LD_INT 25
24075: PUSH
24076: LD_INT 5
24078: PUSH
24079: LD_INT 3
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24087: LD_VAR 0 6
24091: PPUSH
24092: CALL_OW 264
24096: PUSH
24097: LD_INT 4
24099: PUSH
24100: LD_INT 43
24102: PUSH
24103: LD_INT 25
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: LIST
24110: IN
24111: IFFALSE 24132
// points := [ 40 , 15 , 5 ] ;
24113: LD_ADDR_VAR 0 9
24117: PUSH
24118: LD_INT 40
24120: PUSH
24121: LD_INT 15
24123: PUSH
24124: LD_INT 5
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: LIST
24131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24132: LD_VAR 0 6
24136: PPUSH
24137: CALL_OW 264
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: LD_INT 23
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: IN
24152: IFFALSE 24173
// points := [ 7 , 25 , 8 ] ;
24154: LD_ADDR_VAR 0 9
24158: PUSH
24159: LD_INT 7
24161: PUSH
24162: LD_INT 25
24164: PUSH
24165: LD_INT 8
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: LIST
24172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24173: LD_VAR 0 6
24177: PPUSH
24178: CALL_OW 264
24182: PUSH
24183: LD_INT 5
24185: PUSH
24186: LD_INT 27
24188: PUSH
24189: LD_INT 44
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: IN
24197: IFFALSE 24218
// points := [ 14 , 50 , 16 ] ;
24199: LD_ADDR_VAR 0 9
24203: PUSH
24204: LD_INT 14
24206: PUSH
24207: LD_INT 50
24209: PUSH
24210: LD_INT 16
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24218: LD_VAR 0 6
24222: PPUSH
24223: CALL_OW 264
24227: PUSH
24228: LD_INT 6
24230: PUSH
24231: LD_INT 46
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: IN
24238: IFFALSE 24259
// points := [ 32 , 120 , 70 ] ;
24240: LD_ADDR_VAR 0 9
24244: PUSH
24245: LD_INT 32
24247: PUSH
24248: LD_INT 120
24250: PUSH
24251: LD_INT 70
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24259: LD_VAR 0 6
24263: PPUSH
24264: CALL_OW 264
24268: PUSH
24269: LD_INT 7
24271: PUSH
24272: LD_INT 28
24274: PUSH
24275: LD_INT 45
24277: PUSH
24278: LD_INT 92
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: IN
24287: IFFALSE 24308
// points := [ 35 , 20 , 45 ] ;
24289: LD_ADDR_VAR 0 9
24293: PUSH
24294: LD_INT 35
24296: PUSH
24297: LD_INT 20
24299: PUSH
24300: LD_INT 45
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24308: LD_VAR 0 6
24312: PPUSH
24313: CALL_OW 264
24317: PUSH
24318: LD_INT 47
24320: PUSH
24321: EMPTY
24322: LIST
24323: IN
24324: IFFALSE 24345
// points := [ 67 , 45 , 75 ] ;
24326: LD_ADDR_VAR 0 9
24330: PUSH
24331: LD_INT 67
24333: PUSH
24334: LD_INT 45
24336: PUSH
24337: LD_INT 75
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24345: LD_VAR 0 6
24349: PPUSH
24350: CALL_OW 264
24354: PUSH
24355: LD_INT 26
24357: PUSH
24358: EMPTY
24359: LIST
24360: IN
24361: IFFALSE 24382
// points := [ 120 , 30 , 80 ] ;
24363: LD_ADDR_VAR 0 9
24367: PUSH
24368: LD_INT 120
24370: PUSH
24371: LD_INT 30
24373: PUSH
24374: LD_INT 80
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: LIST
24381: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24382: LD_VAR 0 6
24386: PPUSH
24387: CALL_OW 264
24391: PUSH
24392: LD_INT 22
24394: PUSH
24395: EMPTY
24396: LIST
24397: IN
24398: IFFALSE 24419
// points := [ 40 , 1 , 1 ] ;
24400: LD_ADDR_VAR 0 9
24404: PUSH
24405: LD_INT 40
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24419: LD_VAR 0 6
24423: PPUSH
24424: CALL_OW 264
24428: PUSH
24429: LD_INT 29
24431: PUSH
24432: EMPTY
24433: LIST
24434: IN
24435: IFFALSE 24456
// points := [ 70 , 200 , 400 ] ;
24437: LD_ADDR_VAR 0 9
24441: PUSH
24442: LD_INT 70
24444: PUSH
24445: LD_INT 200
24447: PUSH
24448: LD_INT 400
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24456: LD_VAR 0 6
24460: PPUSH
24461: CALL_OW 264
24465: PUSH
24466: LD_INT 14
24468: PUSH
24469: LD_INT 53
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: IN
24476: IFFALSE 24497
// points := [ 40 , 10 , 20 ] ;
24478: LD_ADDR_VAR 0 9
24482: PUSH
24483: LD_INT 40
24485: PUSH
24486: LD_INT 10
24488: PUSH
24489: LD_INT 20
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24497: LD_VAR 0 6
24501: PPUSH
24502: CALL_OW 264
24506: PUSH
24507: LD_INT 9
24509: PUSH
24510: EMPTY
24511: LIST
24512: IN
24513: IFFALSE 24534
// points := [ 5 , 70 , 20 ] ;
24515: LD_ADDR_VAR 0 9
24519: PUSH
24520: LD_INT 5
24522: PUSH
24523: LD_INT 70
24525: PUSH
24526: LD_INT 20
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24534: LD_VAR 0 6
24538: PPUSH
24539: CALL_OW 264
24543: PUSH
24544: LD_INT 10
24546: PUSH
24547: EMPTY
24548: LIST
24549: IN
24550: IFFALSE 24571
// points := [ 35 , 110 , 70 ] ;
24552: LD_ADDR_VAR 0 9
24556: PUSH
24557: LD_INT 35
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 70
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24571: LD_VAR 0 6
24575: PPUSH
24576: CALL_OW 265
24580: PUSH
24581: LD_INT 25
24583: EQUAL
24584: IFFALSE 24605
// points := [ 80 , 65 , 100 ] ;
24586: LD_ADDR_VAR 0 9
24590: PUSH
24591: LD_INT 80
24593: PUSH
24594: LD_INT 65
24596: PUSH
24597: LD_INT 100
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24605: LD_VAR 0 6
24609: PPUSH
24610: CALL_OW 263
24614: PUSH
24615: LD_INT 1
24617: EQUAL
24618: IFFALSE 24653
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24620: LD_ADDR_VAR 0 10
24624: PUSH
24625: LD_VAR 0 10
24629: PUSH
24630: LD_VAR 0 6
24634: PPUSH
24635: CALL_OW 311
24639: PPUSH
24640: LD_INT 3
24642: PPUSH
24643: CALL_OW 259
24647: PUSH
24648: LD_INT 4
24650: MUL
24651: MUL
24652: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24653: LD_VAR 0 6
24657: PPUSH
24658: CALL_OW 263
24662: PUSH
24663: LD_INT 2
24665: EQUAL
24666: IFFALSE 24717
// begin j := IsControledBy ( i ) ;
24668: LD_ADDR_VAR 0 7
24672: PUSH
24673: LD_VAR 0 6
24677: PPUSH
24678: CALL_OW 312
24682: ST_TO_ADDR
// if j then
24683: LD_VAR 0 7
24687: IFFALSE 24717
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24689: LD_ADDR_VAR 0 10
24693: PUSH
24694: LD_VAR 0 10
24698: PUSH
24699: LD_VAR 0 7
24703: PPUSH
24704: LD_INT 3
24706: PPUSH
24707: CALL_OW 259
24711: PUSH
24712: LD_INT 3
24714: MUL
24715: MUL
24716: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24717: LD_VAR 0 6
24721: PPUSH
24722: CALL_OW 264
24726: PUSH
24727: LD_INT 5
24729: PUSH
24730: LD_INT 6
24732: PUSH
24733: LD_INT 46
24735: PUSH
24736: LD_INT 44
24738: PUSH
24739: LD_INT 47
24741: PUSH
24742: LD_INT 45
24744: PUSH
24745: LD_INT 28
24747: PUSH
24748: LD_INT 7
24750: PUSH
24751: LD_INT 27
24753: PUSH
24754: LD_INT 29
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: IN
24769: PUSH
24770: LD_VAR 0 1
24774: PPUSH
24775: LD_INT 52
24777: PPUSH
24778: CALL_OW 321
24782: PUSH
24783: LD_INT 2
24785: EQUAL
24786: AND
24787: IFFALSE 24804
// bpoints := bpoints * 1.2 ;
24789: LD_ADDR_VAR 0 10
24793: PUSH
24794: LD_VAR 0 10
24798: PUSH
24799: LD_REAL  1.20000000000000E+0000
24802: MUL
24803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24804: LD_VAR 0 6
24808: PPUSH
24809: CALL_OW 264
24813: PUSH
24814: LD_INT 6
24816: PUSH
24817: LD_INT 46
24819: PUSH
24820: LD_INT 47
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: IN
24828: IFFALSE 24845
// bpoints := bpoints * 1.2 ;
24830: LD_ADDR_VAR 0 10
24834: PUSH
24835: LD_VAR 0 10
24839: PUSH
24840: LD_REAL  1.20000000000000E+0000
24843: MUL
24844: ST_TO_ADDR
// end ; unit_building :
24845: GO 24859
24847: LD_INT 3
24849: DOUBLE
24850: EQUAL
24851: IFTRUE 24855
24853: GO 24858
24855: POP
// ; end ;
24856: GO 24859
24858: POP
// for j = 1 to 3 do
24859: LD_ADDR_VAR 0 7
24863: PUSH
24864: DOUBLE
24865: LD_INT 1
24867: DEC
24868: ST_TO_ADDR
24869: LD_INT 3
24871: PUSH
24872: FOR_TO
24873: IFFALSE 24926
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24875: LD_ADDR_VAR 0 5
24879: PUSH
24880: LD_VAR 0 5
24884: PPUSH
24885: LD_VAR 0 7
24889: PPUSH
24890: LD_VAR 0 5
24894: PUSH
24895: LD_VAR 0 7
24899: ARRAY
24900: PUSH
24901: LD_VAR 0 9
24905: PUSH
24906: LD_VAR 0 7
24910: ARRAY
24911: PUSH
24912: LD_VAR 0 10
24916: MUL
24917: PLUS
24918: PPUSH
24919: CALL_OW 1
24923: ST_TO_ADDR
24924: GO 24872
24926: POP
24927: POP
// end ;
24928: GO 23407
24930: POP
24931: POP
// result := Replace ( result , 4 , tmp ) ;
24932: LD_ADDR_VAR 0 5
24936: PUSH
24937: LD_VAR 0 5
24941: PPUSH
24942: LD_INT 4
24944: PPUSH
24945: LD_VAR 0 8
24949: PPUSH
24950: CALL_OW 1
24954: ST_TO_ADDR
// end ;
24955: LD_VAR 0 5
24959: RET
// export function DangerAtRange ( unit , range ) ; begin
24960: LD_INT 0
24962: PPUSH
// if not unit then
24963: LD_VAR 0 1
24967: NOT
24968: IFFALSE 24972
// exit ;
24970: GO 25017
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_VAR 0 1
24981: PPUSH
24982: CALL_OW 255
24986: PPUSH
24987: LD_VAR 0 1
24991: PPUSH
24992: CALL_OW 250
24996: PPUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 251
25006: PPUSH
25007: LD_VAR 0 2
25011: PPUSH
25012: CALL 23259 0 4
25016: ST_TO_ADDR
// end ;
25017: LD_VAR 0 3
25021: RET
// export function DangerInArea ( side , area ) ; begin
25022: LD_INT 0
25024: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_VAR 0 2
25034: PPUSH
25035: LD_INT 81
25037: PUSH
25038: LD_VAR 0 1
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PPUSH
25047: CALL_OW 70
25051: ST_TO_ADDR
// end ;
25052: LD_VAR 0 3
25056: RET
// export function IsExtension ( b ) ; begin
25057: LD_INT 0
25059: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25060: LD_ADDR_VAR 0 2
25064: PUSH
25065: LD_VAR 0 1
25069: PUSH
25070: LD_INT 23
25072: PUSH
25073: LD_INT 20
25075: PUSH
25076: LD_INT 22
25078: PUSH
25079: LD_INT 17
25081: PUSH
25082: LD_INT 24
25084: PUSH
25085: LD_INT 21
25087: PUSH
25088: LD_INT 19
25090: PUSH
25091: LD_INT 16
25093: PUSH
25094: LD_INT 25
25096: PUSH
25097: LD_INT 18
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: IN
25112: ST_TO_ADDR
// end ;
25113: LD_VAR 0 2
25117: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25118: LD_INT 0
25120: PPUSH
25121: PPUSH
25122: PPUSH
// result := [ ] ;
25123: LD_ADDR_VAR 0 4
25127: PUSH
25128: EMPTY
25129: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25130: LD_ADDR_VAR 0 5
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_INT 21
25142: PUSH
25143: LD_INT 3
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PPUSH
25150: CALL_OW 70
25154: ST_TO_ADDR
// if not tmp then
25155: LD_VAR 0 5
25159: NOT
25160: IFFALSE 25164
// exit ;
25162: GO 25228
// if checkLink then
25164: LD_VAR 0 3
25168: IFFALSE 25218
// begin for i in tmp do
25170: LD_ADDR_VAR 0 6
25174: PUSH
25175: LD_VAR 0 5
25179: PUSH
25180: FOR_IN
25181: IFFALSE 25216
// if GetBase ( i ) <> base then
25183: LD_VAR 0 6
25187: PPUSH
25188: CALL_OW 274
25192: PUSH
25193: LD_VAR 0 1
25197: NONEQUAL
25198: IFFALSE 25214
// ComLinkToBase ( base , i ) ;
25200: LD_VAR 0 1
25204: PPUSH
25205: LD_VAR 0 6
25209: PPUSH
25210: CALL_OW 169
25214: GO 25180
25216: POP
25217: POP
// end ; result := tmp ;
25218: LD_ADDR_VAR 0 4
25222: PUSH
25223: LD_VAR 0 5
25227: ST_TO_ADDR
// end ;
25228: LD_VAR 0 4
25232: RET
// export function ComComplete ( units , b ) ; var i ; begin
25233: LD_INT 0
25235: PPUSH
25236: PPUSH
// if not units then
25237: LD_VAR 0 1
25241: NOT
25242: IFFALSE 25246
// exit ;
25244: GO 25336
// for i in units do
25246: LD_ADDR_VAR 0 4
25250: PUSH
25251: LD_VAR 0 1
25255: PUSH
25256: FOR_IN
25257: IFFALSE 25334
// if BuildingStatus ( b ) = bs_build then
25259: LD_VAR 0 2
25263: PPUSH
25264: CALL_OW 461
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25332
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25274: LD_VAR 0 4
25278: PPUSH
25279: LD_STRING h
25281: PUSH
25282: LD_VAR 0 2
25286: PPUSH
25287: CALL_OW 250
25291: PUSH
25292: LD_VAR 0 2
25296: PPUSH
25297: CALL_OW 251
25301: PUSH
25302: LD_VAR 0 2
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 0
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: PUSH
25325: EMPTY
25326: LIST
25327: PPUSH
25328: CALL_OW 446
25332: GO 25256
25334: POP
25335: POP
// end ;
25336: LD_VAR 0 3
25340: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25341: LD_INT 0
25343: PPUSH
25344: PPUSH
25345: PPUSH
25346: PPUSH
25347: PPUSH
25348: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25349: LD_VAR 0 1
25353: NOT
25354: PUSH
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL_OW 263
25364: PUSH
25365: LD_INT 2
25367: NONEQUAL
25368: OR
25369: IFFALSE 25373
// exit ;
25371: GO 25689
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25373: LD_ADDR_VAR 0 6
25377: PUSH
25378: LD_INT 22
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: CALL_OW 255
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 30
25400: PUSH
25401: LD_INT 36
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 34
25410: PUSH
25411: LD_INT 31
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 6
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25689
// result := [ ] ;
25441: LD_ADDR_VAR 0 2
25445: PUSH
25446: EMPTY
25447: ST_TO_ADDR
// for i in tmp do
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_VAR 0 6
25457: PUSH
25458: FOR_IN
25459: IFFALSE 25530
// begin t := UnitsInside ( i ) ;
25461: LD_ADDR_VAR 0 4
25465: PUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: CALL_OW 313
25475: ST_TO_ADDR
// if t then
25476: LD_VAR 0 4
25480: IFFALSE 25528
// for j in t do
25482: LD_ADDR_VAR 0 7
25486: PUSH
25487: LD_VAR 0 4
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25526
// result := Replace ( result , result + 1 , j ) ;
25495: LD_ADDR_VAR 0 2
25499: PUSH
25500: LD_VAR 0 2
25504: PPUSH
25505: LD_VAR 0 2
25509: PUSH
25510: LD_INT 1
25512: PLUS
25513: PPUSH
25514: LD_VAR 0 7
25518: PPUSH
25519: CALL_OW 1
25523: ST_TO_ADDR
25524: GO 25492
25526: POP
25527: POP
// end ;
25528: GO 25458
25530: POP
25531: POP
// if not result then
25532: LD_VAR 0 2
25536: NOT
25537: IFFALSE 25541
// exit ;
25539: GO 25689
// mech := result [ 1 ] ;
25541: LD_ADDR_VAR 0 5
25545: PUSH
25546: LD_VAR 0 2
25550: PUSH
25551: LD_INT 1
25553: ARRAY
25554: ST_TO_ADDR
// if result > 1 then
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 1
25562: GREATER
25563: IFFALSE 25675
// begin for i = 2 to result do
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: DOUBLE
25571: LD_INT 2
25573: DEC
25574: ST_TO_ADDR
25575: LD_VAR 0 2
25579: PUSH
25580: FOR_TO
25581: IFFALSE 25673
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25583: LD_ADDR_VAR 0 4
25587: PUSH
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 3
25597: ARRAY
25598: PPUSH
25599: LD_INT 3
25601: PPUSH
25602: CALL_OW 259
25606: PUSH
25607: LD_VAR 0 2
25611: PUSH
25612: LD_VAR 0 3
25616: ARRAY
25617: PPUSH
25618: CALL_OW 432
25622: MINUS
25623: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25624: LD_VAR 0 4
25628: PUSH
25629: LD_VAR 0 5
25633: PPUSH
25634: LD_INT 3
25636: PPUSH
25637: CALL_OW 259
25641: PUSH
25642: LD_VAR 0 5
25646: PPUSH
25647: CALL_OW 432
25651: MINUS
25652: GREATEREQUAL
25653: IFFALSE 25671
// mech := result [ i ] ;
25655: LD_ADDR_VAR 0 5
25659: PUSH
25660: LD_VAR 0 2
25664: PUSH
25665: LD_VAR 0 3
25669: ARRAY
25670: ST_TO_ADDR
// end ;
25671: GO 25580
25673: POP
25674: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25675: LD_VAR 0 1
25679: PPUSH
25680: LD_VAR 0 5
25684: PPUSH
25685: CALL_OW 135
// end ;
25689: LD_VAR 0 2
25693: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25694: LD_INT 0
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
// result := [ ] ;
25709: LD_ADDR_VAR 0 7
25713: PUSH
25714: EMPTY
25715: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25716: LD_VAR 0 1
25720: PPUSH
25721: CALL_OW 266
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: IN
25736: NOT
25737: IFFALSE 25741
// exit ;
25739: GO 27375
// if name then
25741: LD_VAR 0 3
25745: IFFALSE 25761
// SetBName ( base_dep , name ) ;
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_VAR 0 3
25756: PPUSH
25757: CALL_OW 500
// base := GetBase ( base_dep ) ;
25761: LD_ADDR_VAR 0 15
25765: PUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 274
25775: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25776: LD_ADDR_VAR 0 16
25780: PUSH
25781: LD_VAR 0 1
25785: PPUSH
25786: CALL_OW 255
25790: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25791: LD_ADDR_VAR 0 17
25795: PUSH
25796: LD_VAR 0 1
25800: PPUSH
25801: CALL_OW 248
25805: ST_TO_ADDR
// if sources then
25806: LD_VAR 0 5
25810: IFFALSE 25857
// for i = 1 to 3 do
25812: LD_ADDR_VAR 0 8
25816: PUSH
25817: DOUBLE
25818: LD_INT 1
25820: DEC
25821: ST_TO_ADDR
25822: LD_INT 3
25824: PUSH
25825: FOR_TO
25826: IFFALSE 25855
// AddResourceType ( base , i , sources [ i ] ) ;
25828: LD_VAR 0 15
25832: PPUSH
25833: LD_VAR 0 8
25837: PPUSH
25838: LD_VAR 0 5
25842: PUSH
25843: LD_VAR 0 8
25847: ARRAY
25848: PPUSH
25849: CALL_OW 276
25853: GO 25825
25855: POP
25856: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25857: LD_ADDR_VAR 0 18
25861: PUSH
25862: LD_VAR 0 15
25866: PPUSH
25867: LD_VAR 0 2
25871: PPUSH
25872: LD_INT 1
25874: PPUSH
25875: CALL 25118 0 3
25879: ST_TO_ADDR
// InitHc ;
25880: CALL_OW 19
// InitUc ;
25884: CALL_OW 18
// uc_side := side ;
25888: LD_ADDR_OWVAR 20
25892: PUSH
25893: LD_VAR 0 16
25897: ST_TO_ADDR
// uc_nation := nation ;
25898: LD_ADDR_OWVAR 21
25902: PUSH
25903: LD_VAR 0 17
25907: ST_TO_ADDR
// if buildings then
25908: LD_VAR 0 18
25912: IFFALSE 27234
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25914: LD_ADDR_VAR 0 19
25918: PUSH
25919: LD_VAR 0 18
25923: PPUSH
25924: LD_INT 2
25926: PUSH
25927: LD_INT 30
25929: PUSH
25930: LD_INT 29
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 30
25939: PUSH
25940: LD_INT 30
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL_OW 72
25956: ST_TO_ADDR
// if tmp then
25957: LD_VAR 0 19
25961: IFFALSE 26009
// for i in tmp do
25963: LD_ADDR_VAR 0 8
25967: PUSH
25968: LD_VAR 0 19
25972: PUSH
25973: FOR_IN
25974: IFFALSE 26007
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25976: LD_VAR 0 8
25980: PPUSH
25981: CALL_OW 250
25985: PPUSH
25986: LD_VAR 0 8
25990: PPUSH
25991: CALL_OW 251
25995: PPUSH
25996: LD_VAR 0 16
26000: PPUSH
26001: CALL_OW 441
26005: GO 25973
26007: POP
26008: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26009: LD_VAR 0 18
26013: PPUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 30
26019: PUSH
26020: LD_INT 32
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 33
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: PPUSH
26042: CALL_OW 72
26046: IFFALSE 26134
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26048: LD_ADDR_VAR 0 8
26052: PUSH
26053: LD_VAR 0 18
26057: PPUSH
26058: LD_INT 2
26060: PUSH
26061: LD_INT 30
26063: PUSH
26064: LD_INT 32
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 30
26073: PUSH
26074: LD_INT 33
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 72
26090: PUSH
26091: FOR_IN
26092: IFFALSE 26132
// begin if not GetBWeapon ( i ) then
26094: LD_VAR 0 8
26098: PPUSH
26099: CALL_OW 269
26103: NOT
26104: IFFALSE 26130
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26106: LD_VAR 0 8
26110: PPUSH
26111: LD_VAR 0 8
26115: PPUSH
26116: LD_VAR 0 2
26120: PPUSH
26121: CALL 27380 0 2
26125: PPUSH
26126: CALL_OW 431
// end ;
26130: GO 26091
26132: POP
26133: POP
// end ; for i = 1 to personel do
26134: LD_ADDR_VAR 0 8
26138: PUSH
26139: DOUBLE
26140: LD_INT 1
26142: DEC
26143: ST_TO_ADDR
26144: LD_VAR 0 6
26148: PUSH
26149: FOR_TO
26150: IFFALSE 27214
// begin if i > 4 then
26152: LD_VAR 0 8
26156: PUSH
26157: LD_INT 4
26159: GREATER
26160: IFFALSE 26164
// break ;
26162: GO 27214
// case i of 1 :
26164: LD_VAR 0 8
26168: PUSH
26169: LD_INT 1
26171: DOUBLE
26172: EQUAL
26173: IFTRUE 26177
26175: GO 26257
26177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26178: LD_ADDR_VAR 0 12
26182: PUSH
26183: LD_VAR 0 18
26187: PPUSH
26188: LD_INT 22
26190: PUSH
26191: LD_VAR 0 16
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 58
26202: PUSH
26203: EMPTY
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 30
26211: PUSH
26212: LD_INT 32
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 30
26221: PUSH
26222: LD_INT 4
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 30
26231: PUSH
26232: LD_INT 5
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 72
26254: ST_TO_ADDR
26255: GO 26479
26257: LD_INT 2
26259: DOUBLE
26260: EQUAL
26261: IFTRUE 26265
26263: GO 26327
26265: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26266: LD_ADDR_VAR 0 12
26270: PUSH
26271: LD_VAR 0 18
26275: PPUSH
26276: LD_INT 22
26278: PUSH
26279: LD_VAR 0 16
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 30
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 30
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 72
26324: ST_TO_ADDR
26325: GO 26479
26327: LD_INT 3
26329: DOUBLE
26330: EQUAL
26331: IFTRUE 26335
26333: GO 26397
26335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26336: LD_ADDR_VAR 0 12
26340: PUSH
26341: LD_VAR 0 18
26345: PPUSH
26346: LD_INT 22
26348: PUSH
26349: LD_VAR 0 16
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 30
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 30
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 72
26394: ST_TO_ADDR
26395: GO 26479
26397: LD_INT 4
26399: DOUBLE
26400: EQUAL
26401: IFTRUE 26405
26403: GO 26478
26405: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26406: LD_ADDR_VAR 0 12
26410: PUSH
26411: LD_VAR 0 18
26415: PPUSH
26416: LD_INT 22
26418: PUSH
26419: LD_VAR 0 16
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 30
26433: PUSH
26434: LD_INT 6
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 30
26443: PUSH
26444: LD_INT 7
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 30
26453: PUSH
26454: LD_INT 8
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PPUSH
26471: CALL_OW 72
26475: ST_TO_ADDR
26476: GO 26479
26478: POP
// if i = 1 then
26479: LD_VAR 0 8
26483: PUSH
26484: LD_INT 1
26486: EQUAL
26487: IFFALSE 26598
// begin tmp := [ ] ;
26489: LD_ADDR_VAR 0 19
26493: PUSH
26494: EMPTY
26495: ST_TO_ADDR
// for j in f do
26496: LD_ADDR_VAR 0 9
26500: PUSH
26501: LD_VAR 0 12
26505: PUSH
26506: FOR_IN
26507: IFFALSE 26580
// if GetBType ( j ) = b_bunker then
26509: LD_VAR 0 9
26513: PPUSH
26514: CALL_OW 266
26518: PUSH
26519: LD_INT 32
26521: EQUAL
26522: IFFALSE 26549
// tmp := Insert ( tmp , 1 , j ) else
26524: LD_ADDR_VAR 0 19
26528: PUSH
26529: LD_VAR 0 19
26533: PPUSH
26534: LD_INT 1
26536: PPUSH
26537: LD_VAR 0 9
26541: PPUSH
26542: CALL_OW 2
26546: ST_TO_ADDR
26547: GO 26578
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26549: LD_ADDR_VAR 0 19
26553: PUSH
26554: LD_VAR 0 19
26558: PPUSH
26559: LD_VAR 0 19
26563: PUSH
26564: LD_INT 1
26566: PLUS
26567: PPUSH
26568: LD_VAR 0 9
26572: PPUSH
26573: CALL_OW 2
26577: ST_TO_ADDR
26578: GO 26506
26580: POP
26581: POP
// if tmp then
26582: LD_VAR 0 19
26586: IFFALSE 26598
// f := tmp ;
26588: LD_ADDR_VAR 0 12
26592: PUSH
26593: LD_VAR 0 19
26597: ST_TO_ADDR
// end ; x := personel [ i ] ;
26598: LD_ADDR_VAR 0 13
26602: PUSH
26603: LD_VAR 0 6
26607: PUSH
26608: LD_VAR 0 8
26612: ARRAY
26613: ST_TO_ADDR
// if x = - 1 then
26614: LD_VAR 0 13
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: EQUAL
26623: IFFALSE 26832
// begin for j in f do
26625: LD_ADDR_VAR 0 9
26629: PUSH
26630: LD_VAR 0 12
26634: PUSH
26635: FOR_IN
26636: IFFALSE 26828
// repeat InitHc ;
26638: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26642: LD_VAR 0 9
26646: PPUSH
26647: CALL_OW 266
26651: PUSH
26652: LD_INT 5
26654: EQUAL
26655: IFFALSE 26725
// begin if UnitsInside ( j ) < 3 then
26657: LD_VAR 0 9
26661: PPUSH
26662: CALL_OW 313
26666: PUSH
26667: LD_INT 3
26669: LESS
26670: IFFALSE 26706
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26672: LD_INT 0
26674: PPUSH
26675: LD_INT 5
26677: PUSH
26678: LD_INT 8
26680: PUSH
26681: LD_INT 9
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: PUSH
26689: LD_VAR 0 17
26693: ARRAY
26694: PPUSH
26695: LD_VAR 0 4
26699: PPUSH
26700: CALL_OW 380
26704: GO 26723
// PrepareHuman ( false , i , skill ) ;
26706: LD_INT 0
26708: PPUSH
26709: LD_VAR 0 8
26713: PPUSH
26714: LD_VAR 0 4
26718: PPUSH
26719: CALL_OW 380
// end else
26723: GO 26742
// PrepareHuman ( false , i , skill ) ;
26725: LD_INT 0
26727: PPUSH
26728: LD_VAR 0 8
26732: PPUSH
26733: LD_VAR 0 4
26737: PPUSH
26738: CALL_OW 380
// un := CreateHuman ;
26742: LD_ADDR_VAR 0 14
26746: PUSH
26747: CALL_OW 44
26751: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26752: LD_ADDR_VAR 0 7
26756: PUSH
26757: LD_VAR 0 7
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: LD_VAR 0 14
26769: PPUSH
26770: CALL_OW 2
26774: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26775: LD_VAR 0 14
26779: PPUSH
26780: LD_VAR 0 9
26784: PPUSH
26785: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26789: LD_VAR 0 9
26793: PPUSH
26794: CALL_OW 313
26798: PUSH
26799: LD_INT 6
26801: EQUAL
26802: PUSH
26803: LD_VAR 0 9
26807: PPUSH
26808: CALL_OW 266
26812: PUSH
26813: LD_INT 32
26815: PUSH
26816: LD_INT 31
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: IN
26823: OR
26824: IFFALSE 26638
26826: GO 26635
26828: POP
26829: POP
// end else
26830: GO 27212
// for j = 1 to x do
26832: LD_ADDR_VAR 0 9
26836: PUSH
26837: DOUBLE
26838: LD_INT 1
26840: DEC
26841: ST_TO_ADDR
26842: LD_VAR 0 13
26846: PUSH
26847: FOR_TO
26848: IFFALSE 27210
// begin InitHc ;
26850: CALL_OW 19
// if not f then
26854: LD_VAR 0 12
26858: NOT
26859: IFFALSE 26948
// begin PrepareHuman ( false , i , skill ) ;
26861: LD_INT 0
26863: PPUSH
26864: LD_VAR 0 8
26868: PPUSH
26869: LD_VAR 0 4
26873: PPUSH
26874: CALL_OW 380
// un := CreateHuman ;
26878: LD_ADDR_VAR 0 14
26882: PUSH
26883: CALL_OW 44
26887: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26888: LD_ADDR_VAR 0 7
26892: PUSH
26893: LD_VAR 0 7
26897: PPUSH
26898: LD_INT 1
26900: PPUSH
26901: LD_VAR 0 14
26905: PPUSH
26906: CALL_OW 2
26910: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26911: LD_VAR 0 14
26915: PPUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 250
26925: PPUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 251
26935: PPUSH
26936: LD_INT 10
26938: PPUSH
26939: LD_INT 0
26941: PPUSH
26942: CALL_OW 50
// continue ;
26946: GO 26847
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26948: LD_VAR 0 12
26952: PUSH
26953: LD_INT 1
26955: ARRAY
26956: PPUSH
26957: CALL_OW 313
26961: PUSH
26962: LD_VAR 0 12
26966: PUSH
26967: LD_INT 1
26969: ARRAY
26970: PPUSH
26971: CALL_OW 266
26975: PUSH
26976: LD_INT 32
26978: PUSH
26979: LD_INT 31
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: IN
26986: AND
26987: PUSH
26988: LD_VAR 0 12
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: PPUSH
26997: CALL_OW 313
27001: PUSH
27002: LD_INT 6
27004: EQUAL
27005: OR
27006: IFFALSE 27026
// f := Delete ( f , 1 ) ;
27008: LD_ADDR_VAR 0 12
27012: PUSH
27013: LD_VAR 0 12
27017: PPUSH
27018: LD_INT 1
27020: PPUSH
27021: CALL_OW 3
27025: ST_TO_ADDR
// if not f then
27026: LD_VAR 0 12
27030: NOT
27031: IFFALSE 27049
// begin x := x + 2 ;
27033: LD_ADDR_VAR 0 13
27037: PUSH
27038: LD_VAR 0 13
27042: PUSH
27043: LD_INT 2
27045: PLUS
27046: ST_TO_ADDR
// continue ;
27047: GO 26847
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27049: LD_VAR 0 12
27053: PUSH
27054: LD_INT 1
27056: ARRAY
27057: PPUSH
27058: CALL_OW 266
27062: PUSH
27063: LD_INT 5
27065: EQUAL
27066: IFFALSE 27140
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27068: LD_VAR 0 12
27072: PUSH
27073: LD_INT 1
27075: ARRAY
27076: PPUSH
27077: CALL_OW 313
27081: PUSH
27082: LD_INT 3
27084: LESS
27085: IFFALSE 27121
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27087: LD_INT 0
27089: PPUSH
27090: LD_INT 5
27092: PUSH
27093: LD_INT 8
27095: PUSH
27096: LD_INT 9
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: LIST
27103: PUSH
27104: LD_VAR 0 17
27108: ARRAY
27109: PPUSH
27110: LD_VAR 0 4
27114: PPUSH
27115: CALL_OW 380
27119: GO 27138
// PrepareHuman ( false , i , skill ) ;
27121: LD_INT 0
27123: PPUSH
27124: LD_VAR 0 8
27128: PPUSH
27129: LD_VAR 0 4
27133: PPUSH
27134: CALL_OW 380
// end else
27138: GO 27157
// PrepareHuman ( false , i , skill ) ;
27140: LD_INT 0
27142: PPUSH
27143: LD_VAR 0 8
27147: PPUSH
27148: LD_VAR 0 4
27152: PPUSH
27153: CALL_OW 380
// un := CreateHuman ;
27157: LD_ADDR_VAR 0 14
27161: PUSH
27162: CALL_OW 44
27166: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27167: LD_ADDR_VAR 0 7
27171: PUSH
27172: LD_VAR 0 7
27176: PPUSH
27177: LD_INT 1
27179: PPUSH
27180: LD_VAR 0 14
27184: PPUSH
27185: CALL_OW 2
27189: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27190: LD_VAR 0 14
27194: PPUSH
27195: LD_VAR 0 12
27199: PUSH
27200: LD_INT 1
27202: ARRAY
27203: PPUSH
27204: CALL_OW 52
// end ;
27208: GO 26847
27210: POP
27211: POP
// end ;
27212: GO 26149
27214: POP
27215: POP
// result := result ^ buildings ;
27216: LD_ADDR_VAR 0 7
27220: PUSH
27221: LD_VAR 0 7
27225: PUSH
27226: LD_VAR 0 18
27230: ADD
27231: ST_TO_ADDR
// end else
27232: GO 27375
// begin for i = 1 to personel do
27234: LD_ADDR_VAR 0 8
27238: PUSH
27239: DOUBLE
27240: LD_INT 1
27242: DEC
27243: ST_TO_ADDR
27244: LD_VAR 0 6
27248: PUSH
27249: FOR_TO
27250: IFFALSE 27373
// begin if i > 4 then
27252: LD_VAR 0 8
27256: PUSH
27257: LD_INT 4
27259: GREATER
27260: IFFALSE 27264
// break ;
27262: GO 27373
// x := personel [ i ] ;
27264: LD_ADDR_VAR 0 13
27268: PUSH
27269: LD_VAR 0 6
27273: PUSH
27274: LD_VAR 0 8
27278: ARRAY
27279: ST_TO_ADDR
// if x = - 1 then
27280: LD_VAR 0 13
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: EQUAL
27289: IFFALSE 27293
// continue ;
27291: GO 27249
// PrepareHuman ( false , i , skill ) ;
27293: LD_INT 0
27295: PPUSH
27296: LD_VAR 0 8
27300: PPUSH
27301: LD_VAR 0 4
27305: PPUSH
27306: CALL_OW 380
// un := CreateHuman ;
27310: LD_ADDR_VAR 0 14
27314: PUSH
27315: CALL_OW 44
27319: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27320: LD_VAR 0 14
27324: PPUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 250
27334: PPUSH
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 251
27344: PPUSH
27345: LD_INT 10
27347: PPUSH
27348: LD_INT 0
27350: PPUSH
27351: CALL_OW 50
// result := result ^ un ;
27355: LD_ADDR_VAR 0 7
27359: PUSH
27360: LD_VAR 0 7
27364: PUSH
27365: LD_VAR 0 14
27369: ADD
27370: ST_TO_ADDR
// end ;
27371: GO 27249
27373: POP
27374: POP
// end ; end ;
27375: LD_VAR 0 7
27379: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27380: LD_INT 0
27382: PPUSH
27383: PPUSH
27384: PPUSH
27385: PPUSH
27386: PPUSH
27387: PPUSH
27388: PPUSH
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
// result := false ;
27398: LD_ADDR_VAR 0 3
27402: PUSH
27403: LD_INT 0
27405: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27406: LD_VAR 0 1
27410: NOT
27411: PUSH
27412: LD_VAR 0 1
27416: PPUSH
27417: CALL_OW 266
27421: PUSH
27422: LD_INT 32
27424: PUSH
27425: LD_INT 33
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: IN
27432: NOT
27433: OR
27434: IFFALSE 27438
// exit ;
27436: GO 28547
// nat := GetNation ( tower ) ;
27438: LD_ADDR_VAR 0 12
27442: PUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 248
27452: ST_TO_ADDR
// side := GetSide ( tower ) ;
27453: LD_ADDR_VAR 0 16
27457: PUSH
27458: LD_VAR 0 1
27462: PPUSH
27463: CALL_OW 255
27467: ST_TO_ADDR
// x := GetX ( tower ) ;
27468: LD_ADDR_VAR 0 10
27472: PUSH
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 250
27482: ST_TO_ADDR
// y := GetY ( tower ) ;
27483: LD_ADDR_VAR 0 11
27487: PUSH
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 251
27497: ST_TO_ADDR
// if not x or not y then
27498: LD_VAR 0 10
27502: NOT
27503: PUSH
27504: LD_VAR 0 11
27508: NOT
27509: OR
27510: IFFALSE 27514
// exit ;
27512: GO 28547
// weapon := 0 ;
27514: LD_ADDR_VAR 0 18
27518: PUSH
27519: LD_INT 0
27521: ST_TO_ADDR
// fac_list := [ ] ;
27522: LD_ADDR_VAR 0 17
27526: PUSH
27527: EMPTY
27528: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27529: LD_ADDR_VAR 0 6
27533: PUSH
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 274
27543: PPUSH
27544: LD_VAR 0 2
27548: PPUSH
27549: LD_INT 0
27551: PPUSH
27552: CALL 25118 0 3
27556: PPUSH
27557: LD_INT 30
27559: PUSH
27560: LD_INT 3
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PPUSH
27567: CALL_OW 72
27571: ST_TO_ADDR
// if not factories then
27572: LD_VAR 0 6
27576: NOT
27577: IFFALSE 27581
// exit ;
27579: GO 28547
// for i in factories do
27581: LD_ADDR_VAR 0 8
27585: PUSH
27586: LD_VAR 0 6
27590: PUSH
27591: FOR_IN
27592: IFFALSE 27617
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27594: LD_ADDR_VAR 0 17
27598: PUSH
27599: LD_VAR 0 17
27603: PUSH
27604: LD_VAR 0 8
27608: PPUSH
27609: CALL_OW 478
27613: UNION
27614: ST_TO_ADDR
27615: GO 27591
27617: POP
27618: POP
// if not fac_list then
27619: LD_VAR 0 17
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 28547
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27628: LD_ADDR_VAR 0 5
27632: PUSH
27633: LD_INT 4
27635: PUSH
27636: LD_INT 5
27638: PUSH
27639: LD_INT 9
27641: PUSH
27642: LD_INT 10
27644: PUSH
27645: LD_INT 6
27647: PUSH
27648: LD_INT 7
27650: PUSH
27651: LD_INT 11
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 27
27665: PUSH
27666: LD_INT 28
27668: PUSH
27669: LD_INT 26
27671: PUSH
27672: LD_INT 30
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 43
27683: PUSH
27684: LD_INT 44
27686: PUSH
27687: LD_INT 46
27689: PUSH
27690: LD_INT 45
27692: PUSH
27693: LD_INT 47
27695: PUSH
27696: LD_INT 49
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: LIST
27711: PUSH
27712: LD_VAR 0 12
27716: ARRAY
27717: ST_TO_ADDR
// list := list isect fac_list ;
27718: LD_ADDR_VAR 0 5
27722: PUSH
27723: LD_VAR 0 5
27727: PUSH
27728: LD_VAR 0 17
27732: ISECT
27733: ST_TO_ADDR
// if not list then
27734: LD_VAR 0 5
27738: NOT
27739: IFFALSE 27743
// exit ;
27741: GO 28547
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27743: LD_VAR 0 12
27747: PUSH
27748: LD_INT 3
27750: EQUAL
27751: PUSH
27752: LD_INT 49
27754: PUSH
27755: LD_VAR 0 5
27759: IN
27760: AND
27761: PUSH
27762: LD_INT 31
27764: PPUSH
27765: LD_VAR 0 16
27769: PPUSH
27770: CALL_OW 321
27774: PUSH
27775: LD_INT 2
27777: EQUAL
27778: AND
27779: IFFALSE 27839
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27781: LD_INT 22
27783: PUSH
27784: LD_VAR 0 16
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 35
27795: PUSH
27796: LD_INT 49
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 91
27805: PUSH
27806: LD_VAR 0 1
27810: PUSH
27811: LD_INT 10
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: PPUSH
27824: CALL_OW 69
27828: NOT
27829: IFFALSE 27839
// weapon := ru_time_lapser ;
27831: LD_ADDR_VAR 0 18
27835: PUSH
27836: LD_INT 49
27838: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27839: LD_VAR 0 12
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: IN
27854: PUSH
27855: LD_INT 11
27857: PUSH
27858: LD_VAR 0 5
27862: IN
27863: PUSH
27864: LD_INT 30
27866: PUSH
27867: LD_VAR 0 5
27871: IN
27872: OR
27873: AND
27874: PUSH
27875: LD_INT 6
27877: PPUSH
27878: LD_VAR 0 16
27882: PPUSH
27883: CALL_OW 321
27887: PUSH
27888: LD_INT 2
27890: EQUAL
27891: AND
27892: IFFALSE 28057
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27894: LD_INT 22
27896: PUSH
27897: LD_VAR 0 16
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 35
27911: PUSH
27912: LD_INT 11
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 35
27921: PUSH
27922: LD_INT 30
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 91
27936: PUSH
27937: LD_VAR 0 1
27941: PUSH
27942: LD_INT 18
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: PPUSH
27955: CALL_OW 69
27959: NOT
27960: PUSH
27961: LD_INT 22
27963: PUSH
27964: LD_VAR 0 16
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: PUSH
27976: LD_INT 30
27978: PUSH
27979: LD_INT 32
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 30
27988: PUSH
27989: LD_INT 33
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 91
28003: PUSH
28004: LD_VAR 0 1
28008: PUSH
28009: LD_INT 12
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: PPUSH
28025: CALL_OW 69
28029: PUSH
28030: LD_INT 2
28032: GREATER
28033: AND
28034: IFFALSE 28057
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28036: LD_ADDR_VAR 0 18
28040: PUSH
28041: LD_INT 11
28043: PUSH
28044: LD_INT 30
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_VAR 0 12
28055: ARRAY
28056: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28057: LD_VAR 0 18
28061: NOT
28062: PUSH
28063: LD_INT 40
28065: PPUSH
28066: LD_VAR 0 16
28070: PPUSH
28071: CALL_OW 321
28075: PUSH
28076: LD_INT 2
28078: EQUAL
28079: AND
28080: PUSH
28081: LD_INT 7
28083: PUSH
28084: LD_VAR 0 5
28088: IN
28089: PUSH
28090: LD_INT 28
28092: PUSH
28093: LD_VAR 0 5
28097: IN
28098: OR
28099: PUSH
28100: LD_INT 45
28102: PUSH
28103: LD_VAR 0 5
28107: IN
28108: OR
28109: AND
28110: IFFALSE 28364
// begin hex := GetHexInfo ( x , y ) ;
28112: LD_ADDR_VAR 0 4
28116: PUSH
28117: LD_VAR 0 10
28121: PPUSH
28122: LD_VAR 0 11
28126: PPUSH
28127: CALL_OW 546
28131: ST_TO_ADDR
// if hex [ 1 ] then
28132: LD_VAR 0 4
28136: PUSH
28137: LD_INT 1
28139: ARRAY
28140: IFFALSE 28144
// exit ;
28142: GO 28547
// height := hex [ 2 ] ;
28144: LD_ADDR_VAR 0 15
28148: PUSH
28149: LD_VAR 0 4
28153: PUSH
28154: LD_INT 2
28156: ARRAY
28157: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28158: LD_ADDR_VAR 0 14
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 5
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: ST_TO_ADDR
// for i in tmp do
28181: LD_ADDR_VAR 0 8
28185: PUSH
28186: LD_VAR 0 14
28190: PUSH
28191: FOR_IN
28192: IFFALSE 28362
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28194: LD_ADDR_VAR 0 9
28198: PUSH
28199: LD_VAR 0 10
28203: PPUSH
28204: LD_VAR 0 8
28208: PPUSH
28209: LD_INT 5
28211: PPUSH
28212: CALL_OW 272
28216: PUSH
28217: LD_VAR 0 11
28221: PPUSH
28222: LD_VAR 0 8
28226: PPUSH
28227: LD_INT 5
28229: PPUSH
28230: CALL_OW 273
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28239: LD_VAR 0 9
28243: PUSH
28244: LD_INT 1
28246: ARRAY
28247: PPUSH
28248: LD_VAR 0 9
28252: PUSH
28253: LD_INT 2
28255: ARRAY
28256: PPUSH
28257: CALL_OW 488
28261: IFFALSE 28360
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28263: LD_ADDR_VAR 0 4
28267: PUSH
28268: LD_VAR 0 9
28272: PUSH
28273: LD_INT 1
28275: ARRAY
28276: PPUSH
28277: LD_VAR 0 9
28281: PUSH
28282: LD_INT 2
28284: ARRAY
28285: PPUSH
28286: CALL_OW 546
28290: ST_TO_ADDR
// if hex [ 1 ] then
28291: LD_VAR 0 4
28295: PUSH
28296: LD_INT 1
28298: ARRAY
28299: IFFALSE 28303
// continue ;
28301: GO 28191
// h := hex [ 2 ] ;
28303: LD_ADDR_VAR 0 13
28307: PUSH
28308: LD_VAR 0 4
28312: PUSH
28313: LD_INT 2
28315: ARRAY
28316: ST_TO_ADDR
// if h + 7 < height then
28317: LD_VAR 0 13
28321: PUSH
28322: LD_INT 7
28324: PLUS
28325: PUSH
28326: LD_VAR 0 15
28330: LESS
28331: IFFALSE 28360
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28333: LD_ADDR_VAR 0 18
28337: PUSH
28338: LD_INT 7
28340: PUSH
28341: LD_INT 28
28343: PUSH
28344: LD_INT 45
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: PUSH
28352: LD_VAR 0 12
28356: ARRAY
28357: ST_TO_ADDR
// break ;
28358: GO 28362
// end ; end ; end ;
28360: GO 28191
28362: POP
28363: POP
// end ; if not weapon then
28364: LD_VAR 0 18
28368: NOT
28369: IFFALSE 28429
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: LD_VAR 0 5
28380: PUSH
28381: LD_INT 11
28383: PUSH
28384: LD_INT 30
28386: PUSH
28387: LD_INT 49
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: DIFF
28395: ST_TO_ADDR
// if not list then
28396: LD_VAR 0 5
28400: NOT
28401: IFFALSE 28405
// exit ;
28403: GO 28547
// weapon := list [ rand ( 1 , list ) ] ;
28405: LD_ADDR_VAR 0 18
28409: PUSH
28410: LD_VAR 0 5
28414: PUSH
28415: LD_INT 1
28417: PPUSH
28418: LD_VAR 0 5
28422: PPUSH
28423: CALL_OW 12
28427: ARRAY
28428: ST_TO_ADDR
// end ; if weapon then
28429: LD_VAR 0 18
28433: IFFALSE 28547
// begin tmp := CostOfWeapon ( weapon ) ;
28435: LD_ADDR_VAR 0 14
28439: PUSH
28440: LD_VAR 0 18
28444: PPUSH
28445: CALL_OW 451
28449: ST_TO_ADDR
// j := GetBase ( tower ) ;
28450: LD_ADDR_VAR 0 9
28454: PUSH
28455: LD_VAR 0 1
28459: PPUSH
28460: CALL_OW 274
28464: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28465: LD_VAR 0 9
28469: PPUSH
28470: LD_INT 1
28472: PPUSH
28473: CALL_OW 275
28477: PUSH
28478: LD_VAR 0 14
28482: PUSH
28483: LD_INT 1
28485: ARRAY
28486: GREATEREQUAL
28487: PUSH
28488: LD_VAR 0 9
28492: PPUSH
28493: LD_INT 2
28495: PPUSH
28496: CALL_OW 275
28500: PUSH
28501: LD_VAR 0 14
28505: PUSH
28506: LD_INT 2
28508: ARRAY
28509: GREATEREQUAL
28510: AND
28511: PUSH
28512: LD_VAR 0 9
28516: PPUSH
28517: LD_INT 3
28519: PPUSH
28520: CALL_OW 275
28524: PUSH
28525: LD_VAR 0 14
28529: PUSH
28530: LD_INT 3
28532: ARRAY
28533: GREATEREQUAL
28534: AND
28535: IFFALSE 28547
// result := weapon ;
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_VAR 0 18
28546: ST_TO_ADDR
// end ; end ;
28547: LD_VAR 0 3
28551: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28552: LD_INT 0
28554: PPUSH
28555: PPUSH
// result := true ;
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_INT 1
28563: ST_TO_ADDR
// if array1 = array2 then
28564: LD_VAR 0 1
28568: PUSH
28569: LD_VAR 0 2
28573: EQUAL
28574: IFFALSE 28634
// begin for i = 1 to array1 do
28576: LD_ADDR_VAR 0 4
28580: PUSH
28581: DOUBLE
28582: LD_INT 1
28584: DEC
28585: ST_TO_ADDR
28586: LD_VAR 0 1
28590: PUSH
28591: FOR_TO
28592: IFFALSE 28630
// if array1 [ i ] <> array2 [ i ] then
28594: LD_VAR 0 1
28598: PUSH
28599: LD_VAR 0 4
28603: ARRAY
28604: PUSH
28605: LD_VAR 0 2
28609: PUSH
28610: LD_VAR 0 4
28614: ARRAY
28615: NONEQUAL
28616: IFFALSE 28628
// begin result := false ;
28618: LD_ADDR_VAR 0 3
28622: PUSH
28623: LD_INT 0
28625: ST_TO_ADDR
// break ;
28626: GO 28630
// end ;
28628: GO 28591
28630: POP
28631: POP
// end else
28632: GO 28642
// result := false ;
28634: LD_ADDR_VAR 0 3
28638: PUSH
28639: LD_INT 0
28641: ST_TO_ADDR
// end ;
28642: LD_VAR 0 3
28646: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28647: LD_INT 0
28649: PPUSH
28650: PPUSH
// if not array1 or not array2 then
28651: LD_VAR 0 1
28655: NOT
28656: PUSH
28657: LD_VAR 0 2
28661: NOT
28662: OR
28663: IFFALSE 28667
// exit ;
28665: GO 28731
// result := true ;
28667: LD_ADDR_VAR 0 3
28671: PUSH
28672: LD_INT 1
28674: ST_TO_ADDR
// for i = 1 to array1 do
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: DOUBLE
28681: LD_INT 1
28683: DEC
28684: ST_TO_ADDR
28685: LD_VAR 0 1
28689: PUSH
28690: FOR_TO
28691: IFFALSE 28729
// if array1 [ i ] <> array2 [ i ] then
28693: LD_VAR 0 1
28697: PUSH
28698: LD_VAR 0 4
28702: ARRAY
28703: PUSH
28704: LD_VAR 0 2
28708: PUSH
28709: LD_VAR 0 4
28713: ARRAY
28714: NONEQUAL
28715: IFFALSE 28727
// begin result := false ;
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 0
28724: ST_TO_ADDR
// break ;
28725: GO 28729
// end ;
28727: GO 28690
28729: POP
28730: POP
// end ;
28731: LD_VAR 0 3
28735: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
28740: PPUSH
// pom := GetBase ( fac ) ;
28741: LD_ADDR_VAR 0 5
28745: PUSH
28746: LD_VAR 0 1
28750: PPUSH
28751: CALL_OW 274
28755: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28756: LD_ADDR_VAR 0 4
28760: PUSH
28761: LD_VAR 0 2
28765: PUSH
28766: LD_INT 1
28768: ARRAY
28769: PPUSH
28770: LD_VAR 0 2
28774: PUSH
28775: LD_INT 2
28777: ARRAY
28778: PPUSH
28779: LD_VAR 0 2
28783: PUSH
28784: LD_INT 3
28786: ARRAY
28787: PPUSH
28788: LD_VAR 0 2
28792: PUSH
28793: LD_INT 4
28795: ARRAY
28796: PPUSH
28797: CALL_OW 449
28801: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28802: LD_ADDR_VAR 0 3
28806: PUSH
28807: LD_VAR 0 5
28811: PPUSH
28812: LD_INT 1
28814: PPUSH
28815: CALL_OW 275
28819: PUSH
28820: LD_VAR 0 4
28824: PUSH
28825: LD_INT 1
28827: ARRAY
28828: GREATEREQUAL
28829: PUSH
28830: LD_VAR 0 5
28834: PPUSH
28835: LD_INT 2
28837: PPUSH
28838: CALL_OW 275
28842: PUSH
28843: LD_VAR 0 4
28847: PUSH
28848: LD_INT 2
28850: ARRAY
28851: GREATEREQUAL
28852: AND
28853: PUSH
28854: LD_VAR 0 5
28858: PPUSH
28859: LD_INT 3
28861: PPUSH
28862: CALL_OW 275
28866: PUSH
28867: LD_VAR 0 4
28871: PUSH
28872: LD_INT 3
28874: ARRAY
28875: GREATEREQUAL
28876: AND
28877: ST_TO_ADDR
// end ;
28878: LD_VAR 0 3
28882: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28883: LD_INT 0
28885: PPUSH
28886: PPUSH
28887: PPUSH
28888: PPUSH
// pom := GetBase ( building ) ;
28889: LD_ADDR_VAR 0 3
28893: PUSH
28894: LD_VAR 0 1
28898: PPUSH
28899: CALL_OW 274
28903: ST_TO_ADDR
// if not pom then
28904: LD_VAR 0 3
28908: NOT
28909: IFFALSE 28913
// exit ;
28911: GO 29083
// btype := GetBType ( building ) ;
28913: LD_ADDR_VAR 0 5
28917: PUSH
28918: LD_VAR 0 1
28922: PPUSH
28923: CALL_OW 266
28927: ST_TO_ADDR
// if btype = b_armoury then
28928: LD_VAR 0 5
28932: PUSH
28933: LD_INT 4
28935: EQUAL
28936: IFFALSE 28946
// btype := b_barracks ;
28938: LD_ADDR_VAR 0 5
28942: PUSH
28943: LD_INT 5
28945: ST_TO_ADDR
// if btype = b_depot then
28946: LD_VAR 0 5
28950: PUSH
28951: LD_INT 0
28953: EQUAL
28954: IFFALSE 28964
// btype := b_warehouse ;
28956: LD_ADDR_VAR 0 5
28960: PUSH
28961: LD_INT 1
28963: ST_TO_ADDR
// if btype = b_workshop then
28964: LD_VAR 0 5
28968: PUSH
28969: LD_INT 2
28971: EQUAL
28972: IFFALSE 28982
// btype := b_factory ;
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: LD_INT 3
28981: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28982: LD_ADDR_VAR 0 4
28986: PUSH
28987: LD_VAR 0 5
28991: PPUSH
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL_OW 248
29001: PPUSH
29002: CALL_OW 450
29006: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29007: LD_ADDR_VAR 0 2
29011: PUSH
29012: LD_VAR 0 3
29016: PPUSH
29017: LD_INT 1
29019: PPUSH
29020: CALL_OW 275
29024: PUSH
29025: LD_VAR 0 4
29029: PUSH
29030: LD_INT 1
29032: ARRAY
29033: GREATEREQUAL
29034: PUSH
29035: LD_VAR 0 3
29039: PPUSH
29040: LD_INT 2
29042: PPUSH
29043: CALL_OW 275
29047: PUSH
29048: LD_VAR 0 4
29052: PUSH
29053: LD_INT 2
29055: ARRAY
29056: GREATEREQUAL
29057: AND
29058: PUSH
29059: LD_VAR 0 3
29063: PPUSH
29064: LD_INT 3
29066: PPUSH
29067: CALL_OW 275
29071: PUSH
29072: LD_VAR 0 4
29076: PUSH
29077: LD_INT 3
29079: ARRAY
29080: GREATEREQUAL
29081: AND
29082: ST_TO_ADDR
// end ;
29083: LD_VAR 0 2
29087: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
29092: PPUSH
// pom := GetBase ( building ) ;
29093: LD_ADDR_VAR 0 4
29097: PUSH
29098: LD_VAR 0 1
29102: PPUSH
29103: CALL_OW 274
29107: ST_TO_ADDR
// if not pom then
29108: LD_VAR 0 4
29112: NOT
29113: IFFALSE 29117
// exit ;
29115: GO 29218
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29117: LD_ADDR_VAR 0 5
29121: PUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL_OW 248
29136: PPUSH
29137: CALL_OW 450
29141: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29142: LD_ADDR_VAR 0 3
29146: PUSH
29147: LD_VAR 0 4
29151: PPUSH
29152: LD_INT 1
29154: PPUSH
29155: CALL_OW 275
29159: PUSH
29160: LD_VAR 0 5
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: GREATEREQUAL
29169: PUSH
29170: LD_VAR 0 4
29174: PPUSH
29175: LD_INT 2
29177: PPUSH
29178: CALL_OW 275
29182: PUSH
29183: LD_VAR 0 5
29187: PUSH
29188: LD_INT 2
29190: ARRAY
29191: GREATEREQUAL
29192: AND
29193: PUSH
29194: LD_VAR 0 4
29198: PPUSH
29199: LD_INT 3
29201: PPUSH
29202: CALL_OW 275
29206: PUSH
29207: LD_VAR 0 5
29211: PUSH
29212: LD_INT 3
29214: ARRAY
29215: GREATEREQUAL
29216: AND
29217: ST_TO_ADDR
// end ;
29218: LD_VAR 0 3
29222: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29223: LD_INT 0
29225: PPUSH
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
29235: PPUSH
// result := false ;
29236: LD_ADDR_VAR 0 8
29240: PUSH
29241: LD_INT 0
29243: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29244: LD_VAR 0 5
29248: NOT
29249: PUSH
29250: LD_VAR 0 1
29254: NOT
29255: OR
29256: PUSH
29257: LD_VAR 0 2
29261: NOT
29262: OR
29263: PUSH
29264: LD_VAR 0 3
29268: NOT
29269: OR
29270: IFFALSE 29274
// exit ;
29272: GO 30088
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29274: LD_ADDR_VAR 0 14
29278: PUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: LD_VAR 0 2
29288: PPUSH
29289: LD_VAR 0 3
29293: PPUSH
29294: LD_VAR 0 4
29298: PPUSH
29299: LD_VAR 0 5
29303: PUSH
29304: LD_INT 1
29306: ARRAY
29307: PPUSH
29308: CALL_OW 248
29312: PPUSH
29313: LD_INT 0
29315: PPUSH
29316: CALL 31341 0 6
29320: ST_TO_ADDR
// if not hexes then
29321: LD_VAR 0 14
29325: NOT
29326: IFFALSE 29330
// exit ;
29328: GO 30088
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29330: LD_ADDR_VAR 0 17
29334: PUSH
29335: LD_VAR 0 5
29339: PPUSH
29340: LD_INT 22
29342: PUSH
29343: LD_VAR 0 13
29347: PPUSH
29348: CALL_OW 255
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 30
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 30
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PPUSH
29389: CALL_OW 72
29393: ST_TO_ADDR
// for i = 1 to hexes do
29394: LD_ADDR_VAR 0 9
29398: PUSH
29399: DOUBLE
29400: LD_INT 1
29402: DEC
29403: ST_TO_ADDR
29404: LD_VAR 0 14
29408: PUSH
29409: FOR_TO
29410: IFFALSE 30086
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29412: LD_ADDR_VAR 0 13
29416: PUSH
29417: LD_VAR 0 14
29421: PUSH
29422: LD_VAR 0 9
29426: ARRAY
29427: PUSH
29428: LD_INT 1
29430: ARRAY
29431: PPUSH
29432: LD_VAR 0 14
29436: PUSH
29437: LD_VAR 0 9
29441: ARRAY
29442: PUSH
29443: LD_INT 2
29445: ARRAY
29446: PPUSH
29447: CALL_OW 428
29451: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29452: LD_VAR 0 14
29456: PUSH
29457: LD_VAR 0 9
29461: ARRAY
29462: PUSH
29463: LD_INT 1
29465: ARRAY
29466: PPUSH
29467: LD_VAR 0 14
29471: PUSH
29472: LD_VAR 0 9
29476: ARRAY
29477: PUSH
29478: LD_INT 2
29480: ARRAY
29481: PPUSH
29482: CALL_OW 351
29486: PUSH
29487: LD_VAR 0 14
29491: PUSH
29492: LD_VAR 0 9
29496: ARRAY
29497: PUSH
29498: LD_INT 1
29500: ARRAY
29501: PPUSH
29502: LD_VAR 0 14
29506: PUSH
29507: LD_VAR 0 9
29511: ARRAY
29512: PUSH
29513: LD_INT 2
29515: ARRAY
29516: PPUSH
29517: CALL_OW 488
29521: NOT
29522: OR
29523: PUSH
29524: LD_VAR 0 13
29528: PPUSH
29529: CALL_OW 247
29533: PUSH
29534: LD_INT 3
29536: EQUAL
29537: OR
29538: IFFALSE 29544
// exit ;
29540: POP
29541: POP
29542: GO 30088
// if not tmp then
29544: LD_VAR 0 13
29548: NOT
29549: IFFALSE 29553
// continue ;
29551: GO 29409
// result := true ;
29553: LD_ADDR_VAR 0 8
29557: PUSH
29558: LD_INT 1
29560: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29561: LD_VAR 0 6
29565: PUSH
29566: LD_VAR 0 13
29570: PPUSH
29571: CALL_OW 247
29575: PUSH
29576: LD_INT 2
29578: EQUAL
29579: AND
29580: PUSH
29581: LD_VAR 0 13
29585: PPUSH
29586: CALL_OW 263
29590: PUSH
29591: LD_INT 1
29593: EQUAL
29594: AND
29595: IFFALSE 29759
// begin if IsDrivenBy ( tmp ) then
29597: LD_VAR 0 13
29601: PPUSH
29602: CALL_OW 311
29606: IFFALSE 29610
// continue ;
29608: GO 29409
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29610: LD_VAR 0 6
29614: PPUSH
29615: LD_INT 3
29617: PUSH
29618: LD_INT 60
29620: PUSH
29621: EMPTY
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: PUSH
29631: LD_INT 55
29633: PUSH
29634: EMPTY
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PPUSH
29645: CALL_OW 72
29649: IFFALSE 29757
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29651: LD_ADDR_VAR 0 18
29655: PUSH
29656: LD_VAR 0 6
29660: PPUSH
29661: LD_INT 3
29663: PUSH
29664: LD_INT 60
29666: PUSH
29667: EMPTY
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 3
29676: PUSH
29677: LD_INT 55
29679: PUSH
29680: EMPTY
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PPUSH
29691: CALL_OW 72
29695: PUSH
29696: LD_INT 1
29698: ARRAY
29699: ST_TO_ADDR
// if IsInUnit ( driver ) then
29700: LD_VAR 0 18
29704: PPUSH
29705: CALL_OW 310
29709: IFFALSE 29720
// ComExit ( driver ) ;
29711: LD_VAR 0 18
29715: PPUSH
29716: CALL 55142 0 1
// AddComEnterUnit ( driver , tmp ) ;
29720: LD_VAR 0 18
29724: PPUSH
29725: LD_VAR 0 13
29729: PPUSH
29730: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29734: LD_VAR 0 18
29738: PPUSH
29739: LD_VAR 0 7
29743: PPUSH
29744: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29748: LD_VAR 0 18
29752: PPUSH
29753: CALL_OW 181
// end ; continue ;
29757: GO 29409
// end ; if not cleaners or not tmp in cleaners then
29759: LD_VAR 0 6
29763: NOT
29764: PUSH
29765: LD_VAR 0 13
29769: PUSH
29770: LD_VAR 0 6
29774: IN
29775: NOT
29776: OR
29777: IFFALSE 30084
// begin if dep then
29779: LD_VAR 0 17
29783: IFFALSE 29919
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29785: LD_ADDR_VAR 0 16
29789: PUSH
29790: LD_VAR 0 17
29794: PUSH
29795: LD_INT 1
29797: ARRAY
29798: PPUSH
29799: CALL_OW 250
29803: PPUSH
29804: LD_VAR 0 17
29808: PUSH
29809: LD_INT 1
29811: ARRAY
29812: PPUSH
29813: CALL_OW 254
29817: PPUSH
29818: LD_INT 5
29820: PPUSH
29821: CALL_OW 272
29825: PUSH
29826: LD_VAR 0 17
29830: PUSH
29831: LD_INT 1
29833: ARRAY
29834: PPUSH
29835: CALL_OW 251
29839: PPUSH
29840: LD_VAR 0 17
29844: PUSH
29845: LD_INT 1
29847: ARRAY
29848: PPUSH
29849: CALL_OW 254
29853: PPUSH
29854: LD_INT 5
29856: PPUSH
29857: CALL_OW 273
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29866: LD_VAR 0 16
29870: PUSH
29871: LD_INT 1
29873: ARRAY
29874: PPUSH
29875: LD_VAR 0 16
29879: PUSH
29880: LD_INT 2
29882: ARRAY
29883: PPUSH
29884: CALL_OW 488
29888: IFFALSE 29919
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29890: LD_VAR 0 13
29894: PPUSH
29895: LD_VAR 0 16
29899: PUSH
29900: LD_INT 1
29902: ARRAY
29903: PPUSH
29904: LD_VAR 0 16
29908: PUSH
29909: LD_INT 2
29911: ARRAY
29912: PPUSH
29913: CALL_OW 111
// continue ;
29917: GO 29409
// end ; end ; r := GetDir ( tmp ) ;
29919: LD_ADDR_VAR 0 15
29923: PUSH
29924: LD_VAR 0 13
29928: PPUSH
29929: CALL_OW 254
29933: ST_TO_ADDR
// if r = 5 then
29934: LD_VAR 0 15
29938: PUSH
29939: LD_INT 5
29941: EQUAL
29942: IFFALSE 29952
// r := 0 ;
29944: LD_ADDR_VAR 0 15
29948: PUSH
29949: LD_INT 0
29951: ST_TO_ADDR
// for j = r to 5 do
29952: LD_ADDR_VAR 0 10
29956: PUSH
29957: DOUBLE
29958: LD_VAR 0 15
29962: DEC
29963: ST_TO_ADDR
29964: LD_INT 5
29966: PUSH
29967: FOR_TO
29968: IFFALSE 30082
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29970: LD_ADDR_VAR 0 11
29974: PUSH
29975: LD_VAR 0 13
29979: PPUSH
29980: CALL_OW 250
29984: PPUSH
29985: LD_VAR 0 10
29989: PPUSH
29990: LD_INT 2
29992: PPUSH
29993: CALL_OW 272
29997: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29998: LD_ADDR_VAR 0 12
30002: PUSH
30003: LD_VAR 0 13
30007: PPUSH
30008: CALL_OW 251
30012: PPUSH
30013: LD_VAR 0 10
30017: PPUSH
30018: LD_INT 2
30020: PPUSH
30021: CALL_OW 273
30025: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30026: LD_VAR 0 11
30030: PPUSH
30031: LD_VAR 0 12
30035: PPUSH
30036: CALL_OW 488
30040: PUSH
30041: LD_VAR 0 11
30045: PPUSH
30046: LD_VAR 0 12
30050: PPUSH
30051: CALL_OW 428
30055: NOT
30056: AND
30057: IFFALSE 30080
// begin ComMoveXY ( tmp , _x , _y ) ;
30059: LD_VAR 0 13
30063: PPUSH
30064: LD_VAR 0 11
30068: PPUSH
30069: LD_VAR 0 12
30073: PPUSH
30074: CALL_OW 111
// break ;
30078: GO 30082
// end ; end ;
30080: GO 29967
30082: POP
30083: POP
// end ; end ;
30084: GO 29409
30086: POP
30087: POP
// end ;
30088: LD_VAR 0 8
30092: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30093: LD_INT 0
30095: PPUSH
// result := true ;
30096: LD_ADDR_VAR 0 3
30100: PUSH
30101: LD_INT 1
30103: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30104: LD_VAR 0 2
30108: PUSH
30109: LD_INT 24
30111: DOUBLE
30112: EQUAL
30113: IFTRUE 30123
30115: LD_INT 33
30117: DOUBLE
30118: EQUAL
30119: IFTRUE 30123
30121: GO 30148
30123: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30124: LD_ADDR_VAR 0 3
30128: PUSH
30129: LD_INT 32
30131: PPUSH
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 321
30141: PUSH
30142: LD_INT 2
30144: EQUAL
30145: ST_TO_ADDR
30146: GO 30464
30148: LD_INT 20
30150: DOUBLE
30151: EQUAL
30152: IFTRUE 30156
30154: GO 30181
30156: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 6
30164: PPUSH
30165: LD_VAR 0 1
30169: PPUSH
30170: CALL_OW 321
30174: PUSH
30175: LD_INT 2
30177: EQUAL
30178: ST_TO_ADDR
30179: GO 30464
30181: LD_INT 22
30183: DOUBLE
30184: EQUAL
30185: IFTRUE 30195
30187: LD_INT 36
30189: DOUBLE
30190: EQUAL
30191: IFTRUE 30195
30193: GO 30220
30195: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30196: LD_ADDR_VAR 0 3
30200: PUSH
30201: LD_INT 15
30203: PPUSH
30204: LD_VAR 0 1
30208: PPUSH
30209: CALL_OW 321
30213: PUSH
30214: LD_INT 2
30216: EQUAL
30217: ST_TO_ADDR
30218: GO 30464
30220: LD_INT 30
30222: DOUBLE
30223: EQUAL
30224: IFTRUE 30228
30226: GO 30253
30228: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_INT 20
30236: PPUSH
30237: LD_VAR 0 1
30241: PPUSH
30242: CALL_OW 321
30246: PUSH
30247: LD_INT 2
30249: EQUAL
30250: ST_TO_ADDR
30251: GO 30464
30253: LD_INT 28
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30267
30259: LD_INT 21
30261: DOUBLE
30262: EQUAL
30263: IFTRUE 30267
30265: GO 30292
30267: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30268: LD_ADDR_VAR 0 3
30272: PUSH
30273: LD_INT 21
30275: PPUSH
30276: LD_VAR 0 1
30280: PPUSH
30281: CALL_OW 321
30285: PUSH
30286: LD_INT 2
30288: EQUAL
30289: ST_TO_ADDR
30290: GO 30464
30292: LD_INT 16
30294: DOUBLE
30295: EQUAL
30296: IFTRUE 30300
30298: GO 30325
30300: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: LD_INT 84
30308: PPUSH
30309: LD_VAR 0 1
30313: PPUSH
30314: CALL_OW 321
30318: PUSH
30319: LD_INT 2
30321: EQUAL
30322: ST_TO_ADDR
30323: GO 30464
30325: LD_INT 19
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30339
30331: LD_INT 23
30333: DOUBLE
30334: EQUAL
30335: IFTRUE 30339
30337: GO 30364
30339: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30340: LD_ADDR_VAR 0 3
30344: PUSH
30345: LD_INT 83
30347: PPUSH
30348: LD_VAR 0 1
30352: PPUSH
30353: CALL_OW 321
30357: PUSH
30358: LD_INT 2
30360: EQUAL
30361: ST_TO_ADDR
30362: GO 30464
30364: LD_INT 17
30366: DOUBLE
30367: EQUAL
30368: IFTRUE 30372
30370: GO 30397
30372: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30373: LD_ADDR_VAR 0 3
30377: PUSH
30378: LD_INT 39
30380: PPUSH
30381: LD_VAR 0 1
30385: PPUSH
30386: CALL_OW 321
30390: PUSH
30391: LD_INT 2
30393: EQUAL
30394: ST_TO_ADDR
30395: GO 30464
30397: LD_INT 18
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30430
30405: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30406: LD_ADDR_VAR 0 3
30410: PUSH
30411: LD_INT 40
30413: PPUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 321
30423: PUSH
30424: LD_INT 2
30426: EQUAL
30427: ST_TO_ADDR
30428: GO 30464
30430: LD_INT 27
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30463
30438: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30439: LD_ADDR_VAR 0 3
30443: PUSH
30444: LD_INT 35
30446: PPUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 321
30456: PUSH
30457: LD_INT 2
30459: EQUAL
30460: ST_TO_ADDR
30461: GO 30464
30463: POP
// end ;
30464: LD_VAR 0 3
30468: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30469: LD_INT 0
30471: PPUSH
30472: PPUSH
30473: PPUSH
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
// result := false ;
30482: LD_ADDR_VAR 0 6
30486: PUSH
30487: LD_INT 0
30489: ST_TO_ADDR
// if btype = b_depot then
30490: LD_VAR 0 2
30494: PUSH
30495: LD_INT 0
30497: EQUAL
30498: IFFALSE 30510
// begin result := true ;
30500: LD_ADDR_VAR 0 6
30504: PUSH
30505: LD_INT 1
30507: ST_TO_ADDR
// exit ;
30508: GO 31336
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30510: LD_VAR 0 1
30514: NOT
30515: PUSH
30516: LD_VAR 0 1
30520: PPUSH
30521: CALL_OW 266
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: IN
30536: NOT
30537: OR
30538: PUSH
30539: LD_VAR 0 2
30543: NOT
30544: OR
30545: PUSH
30546: LD_VAR 0 5
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: LD_INT 4
30565: PUSH
30566: LD_INT 5
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: IN
30577: NOT
30578: OR
30579: PUSH
30580: LD_VAR 0 3
30584: PPUSH
30585: LD_VAR 0 4
30589: PPUSH
30590: CALL_OW 488
30594: NOT
30595: OR
30596: IFFALSE 30600
// exit ;
30598: GO 31336
// side := GetSide ( depot ) ;
30600: LD_ADDR_VAR 0 9
30604: PUSH
30605: LD_VAR 0 1
30609: PPUSH
30610: CALL_OW 255
30614: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30615: LD_VAR 0 9
30619: PPUSH
30620: LD_VAR 0 2
30624: PPUSH
30625: CALL 30093 0 2
30629: NOT
30630: IFFALSE 30634
// exit ;
30632: GO 31336
// pom := GetBase ( depot ) ;
30634: LD_ADDR_VAR 0 10
30638: PUSH
30639: LD_VAR 0 1
30643: PPUSH
30644: CALL_OW 274
30648: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30649: LD_ADDR_VAR 0 11
30653: PUSH
30654: LD_VAR 0 2
30658: PPUSH
30659: LD_VAR 0 1
30663: PPUSH
30664: CALL_OW 248
30668: PPUSH
30669: CALL_OW 450
30673: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30674: LD_VAR 0 10
30678: PPUSH
30679: LD_INT 1
30681: PPUSH
30682: CALL_OW 275
30686: PUSH
30687: LD_VAR 0 11
30691: PUSH
30692: LD_INT 1
30694: ARRAY
30695: GREATEREQUAL
30696: PUSH
30697: LD_VAR 0 10
30701: PPUSH
30702: LD_INT 2
30704: PPUSH
30705: CALL_OW 275
30709: PUSH
30710: LD_VAR 0 11
30714: PUSH
30715: LD_INT 2
30717: ARRAY
30718: GREATEREQUAL
30719: AND
30720: PUSH
30721: LD_VAR 0 10
30725: PPUSH
30726: LD_INT 3
30728: PPUSH
30729: CALL_OW 275
30733: PUSH
30734: LD_VAR 0 11
30738: PUSH
30739: LD_INT 3
30741: ARRAY
30742: GREATEREQUAL
30743: AND
30744: NOT
30745: IFFALSE 30749
// exit ;
30747: GO 31336
// if GetBType ( depot ) = b_depot then
30749: LD_VAR 0 1
30753: PPUSH
30754: CALL_OW 266
30758: PUSH
30759: LD_INT 0
30761: EQUAL
30762: IFFALSE 30774
// dist := 28 else
30764: LD_ADDR_VAR 0 14
30768: PUSH
30769: LD_INT 28
30771: ST_TO_ADDR
30772: GO 30782
// dist := 36 ;
30774: LD_ADDR_VAR 0 14
30778: PUSH
30779: LD_INT 36
30781: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30782: LD_VAR 0 1
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: LD_VAR 0 4
30796: PPUSH
30797: CALL_OW 297
30801: PUSH
30802: LD_VAR 0 14
30806: GREATER
30807: IFFALSE 30811
// exit ;
30809: GO 31336
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30811: LD_ADDR_VAR 0 12
30815: PUSH
30816: LD_VAR 0 2
30820: PPUSH
30821: LD_VAR 0 3
30825: PPUSH
30826: LD_VAR 0 4
30830: PPUSH
30831: LD_VAR 0 5
30835: PPUSH
30836: LD_VAR 0 1
30840: PPUSH
30841: CALL_OW 248
30845: PPUSH
30846: LD_INT 0
30848: PPUSH
30849: CALL 31341 0 6
30853: ST_TO_ADDR
// if not hexes then
30854: LD_VAR 0 12
30858: NOT
30859: IFFALSE 30863
// exit ;
30861: GO 31336
// hex := GetHexInfo ( x , y ) ;
30863: LD_ADDR_VAR 0 15
30867: PUSH
30868: LD_VAR 0 3
30872: PPUSH
30873: LD_VAR 0 4
30877: PPUSH
30878: CALL_OW 546
30882: ST_TO_ADDR
// if hex [ 1 ] then
30883: LD_VAR 0 15
30887: PUSH
30888: LD_INT 1
30890: ARRAY
30891: IFFALSE 30895
// exit ;
30893: GO 31336
// height := hex [ 2 ] ;
30895: LD_ADDR_VAR 0 13
30899: PUSH
30900: LD_VAR 0 15
30904: PUSH
30905: LD_INT 2
30907: ARRAY
30908: ST_TO_ADDR
// for i = 1 to hexes do
30909: LD_ADDR_VAR 0 7
30913: PUSH
30914: DOUBLE
30915: LD_INT 1
30917: DEC
30918: ST_TO_ADDR
30919: LD_VAR 0 12
30923: PUSH
30924: FOR_TO
30925: IFFALSE 31255
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30927: LD_VAR 0 12
30931: PUSH
30932: LD_VAR 0 7
30936: ARRAY
30937: PUSH
30938: LD_INT 1
30940: ARRAY
30941: PPUSH
30942: LD_VAR 0 12
30946: PUSH
30947: LD_VAR 0 7
30951: ARRAY
30952: PUSH
30953: LD_INT 2
30955: ARRAY
30956: PPUSH
30957: CALL_OW 488
30961: NOT
30962: PUSH
30963: LD_VAR 0 12
30967: PUSH
30968: LD_VAR 0 7
30972: ARRAY
30973: PUSH
30974: LD_INT 1
30976: ARRAY
30977: PPUSH
30978: LD_VAR 0 12
30982: PUSH
30983: LD_VAR 0 7
30987: ARRAY
30988: PUSH
30989: LD_INT 2
30991: ARRAY
30992: PPUSH
30993: CALL_OW 428
30997: PUSH
30998: LD_INT 0
31000: GREATER
31001: OR
31002: PUSH
31003: LD_VAR 0 12
31007: PUSH
31008: LD_VAR 0 7
31012: ARRAY
31013: PUSH
31014: LD_INT 1
31016: ARRAY
31017: PPUSH
31018: LD_VAR 0 12
31022: PUSH
31023: LD_VAR 0 7
31027: ARRAY
31028: PUSH
31029: LD_INT 2
31031: ARRAY
31032: PPUSH
31033: CALL_OW 351
31037: OR
31038: IFFALSE 31044
// exit ;
31040: POP
31041: POP
31042: GO 31336
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31044: LD_ADDR_VAR 0 8
31048: PUSH
31049: LD_VAR 0 12
31053: PUSH
31054: LD_VAR 0 7
31058: ARRAY
31059: PUSH
31060: LD_INT 1
31062: ARRAY
31063: PPUSH
31064: LD_VAR 0 12
31068: PUSH
31069: LD_VAR 0 7
31073: ARRAY
31074: PUSH
31075: LD_INT 2
31077: ARRAY
31078: PPUSH
31079: CALL_OW 546
31083: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31084: LD_VAR 0 8
31088: PUSH
31089: LD_INT 1
31091: ARRAY
31092: PUSH
31093: LD_VAR 0 8
31097: PUSH
31098: LD_INT 2
31100: ARRAY
31101: PUSH
31102: LD_VAR 0 13
31106: PUSH
31107: LD_INT 2
31109: PLUS
31110: GREATER
31111: OR
31112: PUSH
31113: LD_VAR 0 8
31117: PUSH
31118: LD_INT 2
31120: ARRAY
31121: PUSH
31122: LD_VAR 0 13
31126: PUSH
31127: LD_INT 2
31129: MINUS
31130: LESS
31131: OR
31132: PUSH
31133: LD_VAR 0 8
31137: PUSH
31138: LD_INT 3
31140: ARRAY
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 8
31147: PUSH
31148: LD_INT 9
31150: PUSH
31151: LD_INT 10
31153: PUSH
31154: LD_INT 11
31156: PUSH
31157: LD_INT 12
31159: PUSH
31160: LD_INT 13
31162: PUSH
31163: LD_INT 16
31165: PUSH
31166: LD_INT 17
31168: PUSH
31169: LD_INT 18
31171: PUSH
31172: LD_INT 19
31174: PUSH
31175: LD_INT 20
31177: PUSH
31178: LD_INT 21
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: IN
31196: NOT
31197: OR
31198: PUSH
31199: LD_VAR 0 8
31203: PUSH
31204: LD_INT 5
31206: ARRAY
31207: NOT
31208: OR
31209: PUSH
31210: LD_VAR 0 8
31214: PUSH
31215: LD_INT 6
31217: ARRAY
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: LD_INT 7
31227: PUSH
31228: LD_INT 9
31230: PUSH
31231: LD_INT 10
31233: PUSH
31234: LD_INT 11
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: IN
31245: NOT
31246: OR
31247: IFFALSE 31253
// exit ;
31249: POP
31250: POP
31251: GO 31336
// end ;
31253: GO 30924
31255: POP
31256: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31257: LD_VAR 0 9
31261: PPUSH
31262: LD_VAR 0 3
31266: PPUSH
31267: LD_VAR 0 4
31271: PPUSH
31272: LD_INT 20
31274: PPUSH
31275: CALL 23259 0 4
31279: PUSH
31280: LD_INT 4
31282: ARRAY
31283: IFFALSE 31287
// exit ;
31285: GO 31336
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31287: LD_VAR 0 2
31291: PUSH
31292: LD_INT 29
31294: PUSH
31295: LD_INT 30
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: IN
31302: PUSH
31303: LD_VAR 0 3
31307: PPUSH
31308: LD_VAR 0 4
31312: PPUSH
31313: LD_VAR 0 9
31317: PPUSH
31318: CALL_OW 440
31322: NOT
31323: AND
31324: IFFALSE 31328
// exit ;
31326: GO 31336
// result := true ;
31328: LD_ADDR_VAR 0 6
31332: PUSH
31333: LD_INT 1
31335: ST_TO_ADDR
// end ;
31336: LD_VAR 0 6
31340: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
31368: PPUSH
31369: PPUSH
31370: PPUSH
31371: PPUSH
31372: PPUSH
31373: PPUSH
31374: PPUSH
31375: PPUSH
31376: PPUSH
31377: PPUSH
31378: PPUSH
31379: PPUSH
31380: PPUSH
31381: PPUSH
31382: PPUSH
31383: PPUSH
31384: PPUSH
31385: PPUSH
31386: PPUSH
31387: PPUSH
31388: PPUSH
31389: PPUSH
31390: PPUSH
31391: PPUSH
31392: PPUSH
31393: PPUSH
31394: PPUSH
31395: PPUSH
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
// result = [ ] ;
31401: LD_ADDR_VAR 0 7
31405: PUSH
31406: EMPTY
31407: ST_TO_ADDR
// temp_list = [ ] ;
31408: LD_ADDR_VAR 0 9
31412: PUSH
31413: EMPTY
31414: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31415: LD_VAR 0 4
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 3
31431: PUSH
31432: LD_INT 4
31434: PUSH
31435: LD_INT 5
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: IN
31446: NOT
31447: PUSH
31448: LD_VAR 0 1
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: IN
31463: PUSH
31464: LD_VAR 0 5
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: IN
31483: NOT
31484: AND
31485: OR
31486: IFFALSE 31490
// exit ;
31488: GO 49881
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31490: LD_VAR 0 1
31494: PUSH
31495: LD_INT 6
31497: PUSH
31498: LD_INT 7
31500: PUSH
31501: LD_INT 8
31503: PUSH
31504: LD_INT 13
31506: PUSH
31507: LD_INT 12
31509: PUSH
31510: LD_INT 15
31512: PUSH
31513: LD_INT 11
31515: PUSH
31516: LD_INT 14
31518: PUSH
31519: LD_INT 10
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: IN
31533: IFFALSE 31543
// btype = b_lab ;
31535: LD_ADDR_VAR 0 1
31539: PUSH
31540: LD_INT 6
31542: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31543: LD_VAR 0 6
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: LD_INT 2
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: IN
31562: NOT
31563: PUSH
31564: LD_VAR 0 1
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 3
31580: PUSH
31581: LD_INT 6
31583: PUSH
31584: LD_INT 36
31586: PUSH
31587: LD_INT 4
31589: PUSH
31590: LD_INT 5
31592: PUSH
31593: LD_INT 31
31595: PUSH
31596: LD_INT 32
31598: PUSH
31599: LD_INT 33
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: IN
31615: NOT
31616: PUSH
31617: LD_VAR 0 6
31621: PUSH
31622: LD_INT 1
31624: EQUAL
31625: AND
31626: OR
31627: PUSH
31628: LD_VAR 0 1
31632: PUSH
31633: LD_INT 2
31635: PUSH
31636: LD_INT 3
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: IN
31643: NOT
31644: PUSH
31645: LD_VAR 0 6
31649: PUSH
31650: LD_INT 2
31652: EQUAL
31653: AND
31654: OR
31655: IFFALSE 31665
// mode = 0 ;
31657: LD_ADDR_VAR 0 6
31661: PUSH
31662: LD_INT 0
31664: ST_TO_ADDR
// case mode of 0 :
31665: LD_VAR 0 6
31669: PUSH
31670: LD_INT 0
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 43131
31678: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31679: LD_ADDR_VAR 0 11
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 0
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 2
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: LD_INT 3
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: LD_INT 3
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31872: LD_ADDR_VAR 0 12
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 2
31995: NEG
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: LD_INT 3
32029: NEG
32030: PUSH
32031: LD_INT 0
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 3
32040: NEG
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32068: LD_ADDR_VAR 0 13
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 1
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: LD_INT 2
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: NEG
32192: PUSH
32193: LD_INT 1
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: LD_INT 2
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 2
32215: NEG
32216: PUSH
32217: LD_INT 3
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 3
32227: NEG
32228: PUSH
32229: LD_INT 2
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 3
32239: NEG
32240: PUSH
32241: LD_INT 3
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32267: LD_ADDR_VAR 0 14
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: LD_INT 2
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: LD_INT 2
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: LD_INT 1
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: LD_INT 3
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 3
32428: NEG
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32463: LD_ADDR_VAR 0 15
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: NEG
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 3
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32656: LD_ADDR_VAR 0 16
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 1
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 3
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 3
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32849: LD_ADDR_VAR 0 17
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 2
32964: PUSH
32965: LD_INT 0
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: NEG
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 2
33048: NEG
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33079: LD_ADDR_VAR 0 18
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 0
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: LD_INT 2
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 1
33224: PUSH
33225: LD_INT 2
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: NEG
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 2
33266: NEG
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 2
33278: NEG
33279: PUSH
33280: LD_INT 2
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33309: LD_ADDR_VAR 0 19
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 2
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: LD_INT 2
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 2
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 2
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 1
33474: NEG
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33539: LD_ADDR_VAR 0 20
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: LD_INT 1
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 2
33654: PUSH
33655: LD_INT 0
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 2
33715: NEG
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 2
33738: NEG
33739: PUSH
33740: LD_INT 2
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33769: LD_ADDR_VAR 0 21
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 2
33865: NEG
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 1
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33999: LD_ADDR_VAR 0 22
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 2
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: LD_INT 1
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: LD_INT 2
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34229: LD_ADDR_VAR 0 23
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 2
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: LD_INT 3
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: LD_INT 3
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34509: LD_ADDR_VAR 0 24
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 1
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 3
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34785: LD_ADDR_VAR 0 25
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: NEG
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 2
34984: NEG
34985: PUSH
34986: LD_INT 2
34988: NEG
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 3
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: PUSH
35027: LD_INT 3
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35059: LD_ADDR_VAR 0 26
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 1
35140: NEG
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 2
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 2
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: NEG
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: LD_INT 2
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 3
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: LD_INT 2
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 2
35301: NEG
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35335: LD_ADDR_VAR 0 27
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: NEG
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 3
35568: NEG
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: NEG
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35615: LD_ADDR_VAR 0 28
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 1
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: NEG
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 2
35814: NEG
35815: PUSH
35816: LD_INT 2
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 2
35826: NEG
35827: PUSH
35828: LD_INT 3
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: NEG
35839: PUSH
35840: LD_INT 3
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 3
35850: NEG
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 3
35862: NEG
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35897: LD_ADDR_VAR 0 29
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 1
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 1
35955: NEG
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: LD_INT 2
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: PUSH
36050: LD_INT 1
36052: NEG
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: LD_INT 2
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: NEG
36088: PUSH
36089: LD_INT 3
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 1
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 3
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 3
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36176: LD_ADDR_VAR 0 30
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: LD_INT 0
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 2
36291: PUSH
36292: LD_INT 0
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 2
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: LD_INT 2
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: LD_INT 1
36357: NEG
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 3
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 3
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36454: LD_ADDR_VAR 0 31
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 0
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 2
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 1
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 2
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 2
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 2
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: LD_INT 3
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 3
36666: PUSH
36667: LD_INT 1
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 3
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 3
36697: NEG
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36732: LD_ADDR_VAR 0 32
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: LD_INT 0
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 1
36921: NEG
36922: PUSH
36923: LD_INT 3
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 2
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: LD_INT 3
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 3
36975: NEG
36976: PUSH
36977: LD_INT 1
36979: NEG
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37010: LD_ADDR_VAR 0 33
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 2
37188: NEG
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: LD_INT 3
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 3
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37289: LD_ADDR_VAR 0 34
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: LD_INT 3
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 3
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 3
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37569: LD_ADDR_VAR 0 35
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 2
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: NEG
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37681: LD_ADDR_VAR 0 36
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 1
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 1
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37793: LD_ADDR_VAR 0 37
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 1
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37905: LD_ADDR_VAR 0 38
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 0
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38017: LD_ADDR_VAR 0 39
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 1
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 1
38075: NEG
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38129: LD_ADDR_VAR 0 40
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38241: LD_ADDR_VAR 0 41
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: NEG
38432: PUSH
38433: LD_INT 3
38435: NEG
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: LD_INT 3
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 3
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 2
38504: NEG
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 3
38515: NEG
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 3
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 3
38538: NEG
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 3
38550: NEG
38551: PUSH
38552: LD_INT 3
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38591: LD_ADDR_VAR 0 42
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 2
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: LD_INT 2
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 0
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: NEG
38758: PUSH
38759: LD_INT 1
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 3
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 3
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: LD_INT 2
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: NEG
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 3
38888: NEG
38889: PUSH
38890: LD_INT 2
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: NEG
38901: PUSH
38902: LD_INT 3
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38941: LD_ADDR_VAR 0 43
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 2
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 3
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 3
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: NEG
39227: PUSH
39228: LD_INT 1
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 3
39237: NEG
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39289: LD_ADDR_VAR 0 44
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: LD_INT 3
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 3
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 3
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: LD_INT 3
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 3
39563: NEG
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 3
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: NEG
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39639: LD_ADDR_VAR 0 45
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 0
39656: PUSH
39657: LD_INT 1
39659: NEG
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 1
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: LD_INT 3
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 3
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: PUSH
39886: LD_INT 3
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 3
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 3
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 3
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 3
39936: NEG
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 3
39948: NEG
39949: PUSH
39950: LD_INT 3
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39989: LD_ADDR_VAR 0 46
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 0
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: NEG
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 1
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 1
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: LD_INT 0
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: NEG
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 3
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: LD_INT 3
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 3
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 3
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 3
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: NEG
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 3
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40337: LD_ADDR_VAR 0 47
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40488: LD_ADDR_VAR 0 48
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40635: LD_ADDR_VAR 0 49
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 2
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40779: LD_ADDR_VAR 0 50
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 2
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40923: LD_ADDR_VAR 0 51
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41070: LD_ADDR_VAR 0 52
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41221: LD_ADDR_VAR 0 53
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: LD_INT 2
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41451: LD_ADDR_VAR 0 54
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41681: LD_ADDR_VAR 0 55
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41911: LD_ADDR_VAR 0 56
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42141: LD_ADDR_VAR 0 57
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: LD_INT 2
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 2
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 2
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42371: LD_ADDR_VAR 0 58
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42601: LD_ADDR_VAR 0 59
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42689: LD_ADDR_VAR 0 60
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42777: LD_ADDR_VAR 0 61
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42865: LD_ADDR_VAR 0 62
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42953: LD_ADDR_VAR 0 63
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: NEG
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43041: LD_ADDR_VAR 0 64
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 0
43058: PUSH
43059: LD_INT 1
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 0
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 1
43114: NEG
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: ST_TO_ADDR
// end ; 1 :
43129: GO 49026
43131: LD_INT 1
43133: DOUBLE
43134: EQUAL
43135: IFTRUE 43139
43137: GO 45762
43139: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43140: LD_ADDR_VAR 0 11
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 3
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43184: LD_ADDR_VAR 0 12
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 3
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43225: LD_ADDR_VAR 0 13
43229: PUSH
43230: LD_INT 3
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43265: LD_ADDR_VAR 0 14
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: LIST
43305: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43306: LD_ADDR_VAR 0 15
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 3
43324: NEG
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43350: LD_ADDR_VAR 0 16
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 3
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: LD_INT 3
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43396: LD_ADDR_VAR 0 17
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 3
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 3
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43440: LD_ADDR_VAR 0 18
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 3
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43481: LD_ADDR_VAR 0 19
43485: PUSH
43486: LD_INT 3
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 3
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43521: LD_ADDR_VAR 0 20
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43562: LD_ADDR_VAR 0 21
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 3
43580: NEG
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43606: LD_ADDR_VAR 0 22
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: LD_INT 3
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: LD_INT 2
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: LD_INT 3
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43652: LD_ADDR_VAR 0 23
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 3
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 4
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 3
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43696: LD_ADDR_VAR 0 24
43700: PUSH
43701: LD_INT 3
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 4
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43737: LD_ADDR_VAR 0 25
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 4
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: LD_INT 4
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43777: LD_ADDR_VAR 0 26
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 3
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 4
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: NEG
43805: PUSH
43806: LD_INT 3
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43818: LD_ADDR_VAR 0 27
43822: PUSH
43823: LD_INT 3
43825: NEG
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 4
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43862: LD_ADDR_VAR 0 28
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: LD_INT 3
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: LD_INT 4
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 4
43893: NEG
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43908: LD_ADDR_VAR 0 29
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 3
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 4
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 4
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 5
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 5
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 4
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 6
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 6
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: PUSH
44041: LD_INT 5
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44063: LD_ADDR_VAR 0 30
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 4
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 4
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 4
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 5
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 5
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 5
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 6
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 6
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44206: LD_ADDR_VAR 0 31
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 3
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 4
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 4
44253: PUSH
44254: LD_INT 4
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: LD_INT 4
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 5
44273: PUSH
44274: LD_INT 4
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 5
44283: PUSH
44284: LD_INT 5
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 4
44293: PUSH
44294: LD_INT 5
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 6
44303: PUSH
44304: LD_INT 5
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 6
44313: PUSH
44314: LD_INT 6
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 5
44323: PUSH
44324: LD_INT 6
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44345: LD_ADDR_VAR 0 32
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 3
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 4
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 4
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 3
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: LD_INT 5
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 4
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 6
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 6
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 5
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44488: LD_ADDR_VAR 0 33
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 3
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 3
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 4
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 4
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 4
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 5
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 5
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 5
44597: NEG
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 6
44608: NEG
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 6
44619: NEG
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44643: LD_ADDR_VAR 0 34
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: NEG
44687: PUSH
44688: LD_INT 4
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 4
44698: NEG
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 4
44710: NEG
44711: PUSH
44712: LD_INT 4
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 4
44722: NEG
44723: PUSH
44724: LD_INT 5
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 5
44734: NEG
44735: PUSH
44736: LD_INT 4
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 5
44746: NEG
44747: PUSH
44748: LD_INT 5
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 5
44758: NEG
44759: PUSH
44760: LD_INT 6
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 6
44770: NEG
44771: PUSH
44772: LD_INT 5
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 6
44782: NEG
44783: PUSH
44784: LD_INT 6
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44806: LD_ADDR_VAR 0 41
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 3
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44850: LD_ADDR_VAR 0 42
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44891: LD_ADDR_VAR 0 43
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 3
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44931: LD_ADDR_VAR 0 44
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44972: LD_ADDR_VAR 0 45
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 3
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45016: LD_ADDR_VAR 0 46
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45062: LD_ADDR_VAR 0 47
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: LD_INT 3
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45095: LD_ADDR_VAR 0 48
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45126: LD_ADDR_VAR 0 49
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 3
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45155: LD_ADDR_VAR 0 50
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 3
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45184: LD_ADDR_VAR 0 51
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45215: LD_ADDR_VAR 0 52
45219: PUSH
45220: LD_INT 3
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45248: LD_ADDR_VAR 0 53
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 3
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: LD_INT 3
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45292: LD_ADDR_VAR 0 54
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45333: LD_ADDR_VAR 0 55
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45373: LD_ADDR_VAR 0 56
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 3
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45414: LD_ADDR_VAR 0 57
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45458: LD_ADDR_VAR 0 58
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 3
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 3
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 3
45489: NEG
45490: PUSH
45491: LD_INT 3
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: LIST
45503: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45504: LD_ADDR_VAR 0 59
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45548: LD_ADDR_VAR 0 60
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45589: LD_ADDR_VAR 0 61
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45629: LD_ADDR_VAR 0 62
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45670: LD_ADDR_VAR 0 63
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45714: LD_ADDR_VAR 0 64
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// end ; 2 :
45760: GO 49026
45762: LD_INT 2
45764: DOUBLE
45765: EQUAL
45766: IFTRUE 45770
45768: GO 49025
45770: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45771: LD_ADDR_VAR 0 29
45775: PUSH
45776: LD_INT 4
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 4
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 5
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 5
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 4
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 3
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 3
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 5
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: LD_INT 3
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 4
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 4
45901: PUSH
45902: LD_INT 4
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 3
45911: PUSH
45912: LD_INT 4
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 4
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: LD_INT 4
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 4
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 4
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 5
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 5
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 4
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 5
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: NEG
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 4
46110: NEG
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 4
46121: NEG
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 4
46133: NEG
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 4
46156: NEG
46157: PUSH
46158: LD_INT 4
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 4
46168: NEG
46169: PUSH
46170: LD_INT 5
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: LD_INT 4
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: LD_INT 3
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 5
46216: NEG
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 5
46228: NEG
46229: PUSH
46230: LD_INT 5
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: LD_INT 5
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 5
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46309: LD_ADDR_VAR 0 30
46313: PUSH
46314: LD_INT 4
46316: PUSH
46317: LD_INT 4
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 5
46336: PUSH
46337: LD_INT 4
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 5
46346: PUSH
46347: LD_INT 5
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 4
46356: PUSH
46357: LD_INT 5
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: LD_INT 4
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: LD_INT 5
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 4
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 4
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: LD_INT 3
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 4
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 4
46499: NEG
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 4
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 3
46522: NEG
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 3
46533: NEG
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 4
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 5
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 5
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 5
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: NEG
46591: PUSH
46592: LD_INT 2
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 3
46613: NEG
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 3
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 4
46661: NEG
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 4
46673: NEG
46674: PUSH
46675: LD_INT 4
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: LD_INT 4
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 4
46697: NEG
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 4
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 5
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 4
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: LD_INT 3
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 5
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 5
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46856: LD_ADDR_VAR 0 31
46860: PUSH
46861: LD_INT 0
46863: PUSH
46864: LD_INT 4
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: LD_INT 4
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 5
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 5
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 4
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: LD_INT 5
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 3
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 4
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 4
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 4
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 4
47058: NEG
47059: PUSH
47060: LD_INT 4
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 4
47070: NEG
47071: PUSH
47072: LD_INT 5
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: LD_INT 4
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 4
47106: NEG
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 5
47118: NEG
47119: PUSH
47120: LD_INT 4
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 5
47130: NEG
47131: PUSH
47132: LD_INT 5
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: LD_INT 5
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 5
47154: NEG
47155: PUSH
47156: LD_INT 3
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 3
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 4
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 4
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 2
47256: NEG
47257: PUSH
47258: LD_INT 4
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 4
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 5
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 5
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 4
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 5
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47406: LD_ADDR_VAR 0 32
47410: PUSH
47411: LD_INT 4
47413: NEG
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 4
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 5
47469: NEG
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 5
47480: NEG
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 5
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 4
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 3
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 3
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 4
47575: NEG
47576: PUSH
47577: LD_INT 3
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 4
47587: NEG
47588: PUSH
47589: LD_INT 4
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 4
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 4
47611: NEG
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 4
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 5
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 4
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: LD_INT 3
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 3
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 4
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: LD_INT 5
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 5
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 4
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 4
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 4
47818: PUSH
47819: LD_INT 4
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 4
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: LD_INT 4
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: LD_INT 5
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: LD_INT 4
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 5
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47953: LD_ADDR_VAR 0 33
47957: PUSH
47958: LD_INT 4
47960: NEG
47961: PUSH
47962: LD_INT 4
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 4
47972: NEG
47973: PUSH
47974: LD_INT 5
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 4
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 4
48008: NEG
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 5
48020: NEG
48021: PUSH
48022: LD_INT 4
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 5
48032: NEG
48033: PUSH
48034: LD_INT 5
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: LD_INT 5
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 5
48056: NEG
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 3
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 4
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 3
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 4
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: LD_INT 4
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 4
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 4
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 5
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 5
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 4
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 3
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 3
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 5
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 3
48263: PUSH
48264: LD_INT 3
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 3
48303: PUSH
48304: LD_INT 4
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 3
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 4
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 4
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 5
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 5
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 4
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 5
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48491: LD_ADDR_VAR 0 34
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 4
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 5
48512: NEG
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 4
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: PUSH
48532: LD_INT 3
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 4
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 5
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 3
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PUSH
48590: LD_INT 5
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 3
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: LD_INT 1
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 4
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 4
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 4
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 4
48693: PUSH
48694: LD_INT 4
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 4
48703: PUSH
48704: LD_INT 3
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 5
48713: PUSH
48714: LD_INT 4
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 5
48723: PUSH
48724: LD_INT 5
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 4
48733: PUSH
48734: LD_INT 5
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: LD_INT 4
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 5
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: LD_INT 5
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 3
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 3
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 4
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 4
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: LD_INT 3
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: LD_INT 4
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: NEG
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 4
48876: NEG
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 4
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 4
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 5
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 5
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 5
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 3
48967: NEG
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// end ; end ;
49023: GO 49026
49025: POP
// case btype of b_depot , b_warehouse :
49026: LD_VAR 0 1
49030: PUSH
49031: LD_INT 0
49033: DOUBLE
49034: EQUAL
49035: IFTRUE 49045
49037: LD_INT 1
49039: DOUBLE
49040: EQUAL
49041: IFTRUE 49045
49043: GO 49246
49045: POP
// case nation of nation_american :
49046: LD_VAR 0 5
49050: PUSH
49051: LD_INT 1
49053: DOUBLE
49054: EQUAL
49055: IFTRUE 49059
49057: GO 49115
49059: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49060: LD_ADDR_VAR 0 9
49064: PUSH
49065: LD_VAR 0 11
49069: PUSH
49070: LD_VAR 0 12
49074: PUSH
49075: LD_VAR 0 13
49079: PUSH
49080: LD_VAR 0 14
49084: PUSH
49085: LD_VAR 0 15
49089: PUSH
49090: LD_VAR 0 16
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: PUSH
49103: LD_VAR 0 4
49107: PUSH
49108: LD_INT 1
49110: PLUS
49111: ARRAY
49112: ST_TO_ADDR
49113: GO 49244
49115: LD_INT 2
49117: DOUBLE
49118: EQUAL
49119: IFTRUE 49123
49121: GO 49179
49123: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49124: LD_ADDR_VAR 0 9
49128: PUSH
49129: LD_VAR 0 17
49133: PUSH
49134: LD_VAR 0 18
49138: PUSH
49139: LD_VAR 0 19
49143: PUSH
49144: LD_VAR 0 20
49148: PUSH
49149: LD_VAR 0 21
49153: PUSH
49154: LD_VAR 0 22
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: PUSH
49167: LD_VAR 0 4
49171: PUSH
49172: LD_INT 1
49174: PLUS
49175: ARRAY
49176: ST_TO_ADDR
49177: GO 49244
49179: LD_INT 3
49181: DOUBLE
49182: EQUAL
49183: IFTRUE 49187
49185: GO 49243
49187: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49188: LD_ADDR_VAR 0 9
49192: PUSH
49193: LD_VAR 0 23
49197: PUSH
49198: LD_VAR 0 24
49202: PUSH
49203: LD_VAR 0 25
49207: PUSH
49208: LD_VAR 0 26
49212: PUSH
49213: LD_VAR 0 27
49217: PUSH
49218: LD_VAR 0 28
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: PUSH
49231: LD_VAR 0 4
49235: PUSH
49236: LD_INT 1
49238: PLUS
49239: ARRAY
49240: ST_TO_ADDR
49241: GO 49244
49243: POP
49244: GO 49799
49246: LD_INT 2
49248: DOUBLE
49249: EQUAL
49250: IFTRUE 49260
49252: LD_INT 3
49254: DOUBLE
49255: EQUAL
49256: IFTRUE 49260
49258: GO 49316
49260: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49261: LD_ADDR_VAR 0 9
49265: PUSH
49266: LD_VAR 0 29
49270: PUSH
49271: LD_VAR 0 30
49275: PUSH
49276: LD_VAR 0 31
49280: PUSH
49281: LD_VAR 0 32
49285: PUSH
49286: LD_VAR 0 33
49290: PUSH
49291: LD_VAR 0 34
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: PUSH
49304: LD_VAR 0 4
49308: PUSH
49309: LD_INT 1
49311: PLUS
49312: ARRAY
49313: ST_TO_ADDR
49314: GO 49799
49316: LD_INT 16
49318: DOUBLE
49319: EQUAL
49320: IFTRUE 49378
49322: LD_INT 17
49324: DOUBLE
49325: EQUAL
49326: IFTRUE 49378
49328: LD_INT 18
49330: DOUBLE
49331: EQUAL
49332: IFTRUE 49378
49334: LD_INT 19
49336: DOUBLE
49337: EQUAL
49338: IFTRUE 49378
49340: LD_INT 22
49342: DOUBLE
49343: EQUAL
49344: IFTRUE 49378
49346: LD_INT 20
49348: DOUBLE
49349: EQUAL
49350: IFTRUE 49378
49352: LD_INT 21
49354: DOUBLE
49355: EQUAL
49356: IFTRUE 49378
49358: LD_INT 23
49360: DOUBLE
49361: EQUAL
49362: IFTRUE 49378
49364: LD_INT 24
49366: DOUBLE
49367: EQUAL
49368: IFTRUE 49378
49370: LD_INT 25
49372: DOUBLE
49373: EQUAL
49374: IFTRUE 49378
49376: GO 49434
49378: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49379: LD_ADDR_VAR 0 9
49383: PUSH
49384: LD_VAR 0 35
49388: PUSH
49389: LD_VAR 0 36
49393: PUSH
49394: LD_VAR 0 37
49398: PUSH
49399: LD_VAR 0 38
49403: PUSH
49404: LD_VAR 0 39
49408: PUSH
49409: LD_VAR 0 40
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: PUSH
49422: LD_VAR 0 4
49426: PUSH
49427: LD_INT 1
49429: PLUS
49430: ARRAY
49431: ST_TO_ADDR
49432: GO 49799
49434: LD_INT 6
49436: DOUBLE
49437: EQUAL
49438: IFTRUE 49490
49440: LD_INT 7
49442: DOUBLE
49443: EQUAL
49444: IFTRUE 49490
49446: LD_INT 8
49448: DOUBLE
49449: EQUAL
49450: IFTRUE 49490
49452: LD_INT 13
49454: DOUBLE
49455: EQUAL
49456: IFTRUE 49490
49458: LD_INT 12
49460: DOUBLE
49461: EQUAL
49462: IFTRUE 49490
49464: LD_INT 15
49466: DOUBLE
49467: EQUAL
49468: IFTRUE 49490
49470: LD_INT 11
49472: DOUBLE
49473: EQUAL
49474: IFTRUE 49490
49476: LD_INT 14
49478: DOUBLE
49479: EQUAL
49480: IFTRUE 49490
49482: LD_INT 10
49484: DOUBLE
49485: EQUAL
49486: IFTRUE 49490
49488: GO 49546
49490: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49491: LD_ADDR_VAR 0 9
49495: PUSH
49496: LD_VAR 0 41
49500: PUSH
49501: LD_VAR 0 42
49505: PUSH
49506: LD_VAR 0 43
49510: PUSH
49511: LD_VAR 0 44
49515: PUSH
49516: LD_VAR 0 45
49520: PUSH
49521: LD_VAR 0 46
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: PUSH
49534: LD_VAR 0 4
49538: PUSH
49539: LD_INT 1
49541: PLUS
49542: ARRAY
49543: ST_TO_ADDR
49544: GO 49799
49546: LD_INT 36
49548: DOUBLE
49549: EQUAL
49550: IFTRUE 49554
49552: GO 49610
49554: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49555: LD_ADDR_VAR 0 9
49559: PUSH
49560: LD_VAR 0 47
49564: PUSH
49565: LD_VAR 0 48
49569: PUSH
49570: LD_VAR 0 49
49574: PUSH
49575: LD_VAR 0 50
49579: PUSH
49580: LD_VAR 0 51
49584: PUSH
49585: LD_VAR 0 52
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: PUSH
49598: LD_VAR 0 4
49602: PUSH
49603: LD_INT 1
49605: PLUS
49606: ARRAY
49607: ST_TO_ADDR
49608: GO 49799
49610: LD_INT 4
49612: DOUBLE
49613: EQUAL
49614: IFTRUE 49636
49616: LD_INT 5
49618: DOUBLE
49619: EQUAL
49620: IFTRUE 49636
49622: LD_INT 34
49624: DOUBLE
49625: EQUAL
49626: IFTRUE 49636
49628: LD_INT 37
49630: DOUBLE
49631: EQUAL
49632: IFTRUE 49636
49634: GO 49692
49636: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49637: LD_ADDR_VAR 0 9
49641: PUSH
49642: LD_VAR 0 53
49646: PUSH
49647: LD_VAR 0 54
49651: PUSH
49652: LD_VAR 0 55
49656: PUSH
49657: LD_VAR 0 56
49661: PUSH
49662: LD_VAR 0 57
49666: PUSH
49667: LD_VAR 0 58
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: LD_VAR 0 4
49684: PUSH
49685: LD_INT 1
49687: PLUS
49688: ARRAY
49689: ST_TO_ADDR
49690: GO 49799
49692: LD_INT 31
49694: DOUBLE
49695: EQUAL
49696: IFTRUE 49742
49698: LD_INT 32
49700: DOUBLE
49701: EQUAL
49702: IFTRUE 49742
49704: LD_INT 33
49706: DOUBLE
49707: EQUAL
49708: IFTRUE 49742
49710: LD_INT 27
49712: DOUBLE
49713: EQUAL
49714: IFTRUE 49742
49716: LD_INT 26
49718: DOUBLE
49719: EQUAL
49720: IFTRUE 49742
49722: LD_INT 28
49724: DOUBLE
49725: EQUAL
49726: IFTRUE 49742
49728: LD_INT 29
49730: DOUBLE
49731: EQUAL
49732: IFTRUE 49742
49734: LD_INT 30
49736: DOUBLE
49737: EQUAL
49738: IFTRUE 49742
49740: GO 49798
49742: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49743: LD_ADDR_VAR 0 9
49747: PUSH
49748: LD_VAR 0 59
49752: PUSH
49753: LD_VAR 0 60
49757: PUSH
49758: LD_VAR 0 61
49762: PUSH
49763: LD_VAR 0 62
49767: PUSH
49768: LD_VAR 0 63
49772: PUSH
49773: LD_VAR 0 64
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: PUSH
49786: LD_VAR 0 4
49790: PUSH
49791: LD_INT 1
49793: PLUS
49794: ARRAY
49795: ST_TO_ADDR
49796: GO 49799
49798: POP
// temp_list2 = [ ] ;
49799: LD_ADDR_VAR 0 10
49803: PUSH
49804: EMPTY
49805: ST_TO_ADDR
// for i in temp_list do
49806: LD_ADDR_VAR 0 8
49810: PUSH
49811: LD_VAR 0 9
49815: PUSH
49816: FOR_IN
49817: IFFALSE 49869
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49819: LD_ADDR_VAR 0 10
49823: PUSH
49824: LD_VAR 0 10
49828: PUSH
49829: LD_VAR 0 8
49833: PUSH
49834: LD_INT 1
49836: ARRAY
49837: PUSH
49838: LD_VAR 0 2
49842: PLUS
49843: PUSH
49844: LD_VAR 0 8
49848: PUSH
49849: LD_INT 2
49851: ARRAY
49852: PUSH
49853: LD_VAR 0 3
49857: PLUS
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: EMPTY
49864: LIST
49865: ADD
49866: ST_TO_ADDR
49867: GO 49816
49869: POP
49870: POP
// result = temp_list2 ;
49871: LD_ADDR_VAR 0 7
49875: PUSH
49876: LD_VAR 0 10
49880: ST_TO_ADDR
// end ;
49881: LD_VAR 0 7
49885: RET
// export function EnemyInRange ( unit , dist ) ; begin
49886: LD_INT 0
49888: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: CALL_OW 255
49903: PPUSH
49904: LD_VAR 0 1
49908: PPUSH
49909: CALL_OW 250
49913: PPUSH
49914: LD_VAR 0 1
49918: PPUSH
49919: CALL_OW 251
49923: PPUSH
49924: LD_VAR 0 2
49928: PPUSH
49929: CALL 23259 0 4
49933: PUSH
49934: LD_INT 4
49936: ARRAY
49937: ST_TO_ADDR
// end ;
49938: LD_VAR 0 3
49942: RET
// export function PlayerSeeMe ( unit ) ; begin
49943: LD_INT 0
49945: PPUSH
// result := See ( your_side , unit ) ;
49946: LD_ADDR_VAR 0 2
49950: PUSH
49951: LD_OWVAR 2
49955: PPUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 292
49965: ST_TO_ADDR
// end ;
49966: LD_VAR 0 2
49970: RET
// export function ReverseDir ( unit ) ; begin
49971: LD_INT 0
49973: PPUSH
// if not unit then
49974: LD_VAR 0 1
49978: NOT
49979: IFFALSE 49983
// exit ;
49981: GO 50006
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49983: LD_ADDR_VAR 0 2
49987: PUSH
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL_OW 254
49997: PUSH
49998: LD_INT 3
50000: PLUS
50001: PUSH
50002: LD_INT 6
50004: MOD
50005: ST_TO_ADDR
// end ;
50006: LD_VAR 0 2
50010: RET
// export function ReverseArray ( array ) ; var i ; begin
50011: LD_INT 0
50013: PPUSH
50014: PPUSH
// if not array then
50015: LD_VAR 0 1
50019: NOT
50020: IFFALSE 50024
// exit ;
50022: GO 50079
// result := [ ] ;
50024: LD_ADDR_VAR 0 2
50028: PUSH
50029: EMPTY
50030: ST_TO_ADDR
// for i := array downto 1 do
50031: LD_ADDR_VAR 0 3
50035: PUSH
50036: DOUBLE
50037: LD_VAR 0 1
50041: INC
50042: ST_TO_ADDR
50043: LD_INT 1
50045: PUSH
50046: FOR_DOWNTO
50047: IFFALSE 50077
// result := Join ( result , array [ i ] ) ;
50049: LD_ADDR_VAR 0 2
50053: PUSH
50054: LD_VAR 0 2
50058: PPUSH
50059: LD_VAR 0 1
50063: PUSH
50064: LD_VAR 0 3
50068: ARRAY
50069: PPUSH
50070: CALL 54744 0 2
50074: ST_TO_ADDR
50075: GO 50046
50077: POP
50078: POP
// end ;
50079: LD_VAR 0 2
50083: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50084: LD_INT 0
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
// if not unit or not hexes then
50092: LD_VAR 0 1
50096: NOT
50097: PUSH
50098: LD_VAR 0 2
50102: NOT
50103: OR
50104: IFFALSE 50108
// exit ;
50106: GO 50231
// dist := 9999 ;
50108: LD_ADDR_VAR 0 5
50112: PUSH
50113: LD_INT 9999
50115: ST_TO_ADDR
// for i = 1 to hexes do
50116: LD_ADDR_VAR 0 4
50120: PUSH
50121: DOUBLE
50122: LD_INT 1
50124: DEC
50125: ST_TO_ADDR
50126: LD_VAR 0 2
50130: PUSH
50131: FOR_TO
50132: IFFALSE 50219
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50134: LD_ADDR_VAR 0 6
50138: PUSH
50139: LD_VAR 0 1
50143: PPUSH
50144: LD_VAR 0 2
50148: PUSH
50149: LD_VAR 0 4
50153: ARRAY
50154: PUSH
50155: LD_INT 1
50157: ARRAY
50158: PPUSH
50159: LD_VAR 0 2
50163: PUSH
50164: LD_VAR 0 4
50168: ARRAY
50169: PUSH
50170: LD_INT 2
50172: ARRAY
50173: PPUSH
50174: CALL_OW 297
50178: ST_TO_ADDR
// if tdist < dist then
50179: LD_VAR 0 6
50183: PUSH
50184: LD_VAR 0 5
50188: LESS
50189: IFFALSE 50217
// begin hex := hexes [ i ] ;
50191: LD_ADDR_VAR 0 8
50195: PUSH
50196: LD_VAR 0 2
50200: PUSH
50201: LD_VAR 0 4
50205: ARRAY
50206: ST_TO_ADDR
// dist := tdist ;
50207: LD_ADDR_VAR 0 5
50211: PUSH
50212: LD_VAR 0 6
50216: ST_TO_ADDR
// end ; end ;
50217: GO 50131
50219: POP
50220: POP
// result := hex ;
50221: LD_ADDR_VAR 0 3
50225: PUSH
50226: LD_VAR 0 8
50230: ST_TO_ADDR
// end ;
50231: LD_VAR 0 3
50235: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50236: LD_INT 0
50238: PPUSH
50239: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50240: LD_VAR 0 1
50244: NOT
50245: PUSH
50246: LD_VAR 0 1
50250: PUSH
50251: LD_INT 21
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 23
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PPUSH
50275: CALL_OW 69
50279: IN
50280: NOT
50281: OR
50282: IFFALSE 50286
// exit ;
50284: GO 50333
// for i = 1 to 3 do
50286: LD_ADDR_VAR 0 3
50290: PUSH
50291: DOUBLE
50292: LD_INT 1
50294: DEC
50295: ST_TO_ADDR
50296: LD_INT 3
50298: PUSH
50299: FOR_TO
50300: IFFALSE 50331
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50302: LD_VAR 0 1
50306: PPUSH
50307: CALL_OW 250
50311: PPUSH
50312: LD_VAR 0 1
50316: PPUSH
50317: CALL_OW 251
50321: PPUSH
50322: LD_INT 1
50324: PPUSH
50325: CALL_OW 453
50329: GO 50299
50331: POP
50332: POP
// end ;
50333: LD_VAR 0 2
50337: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50338: LD_INT 0
50340: PPUSH
50341: PPUSH
50342: PPUSH
50343: PPUSH
50344: PPUSH
50345: PPUSH
// if not unit or not enemy_unit then
50346: LD_VAR 0 1
50350: NOT
50351: PUSH
50352: LD_VAR 0 2
50356: NOT
50357: OR
50358: IFFALSE 50362
// exit ;
50360: GO 50829
// if GetLives ( i ) < 250 then
50362: LD_VAR 0 4
50366: PPUSH
50367: CALL_OW 256
50371: PUSH
50372: LD_INT 250
50374: LESS
50375: IFFALSE 50388
// begin ComAutodestruct ( i ) ;
50377: LD_VAR 0 4
50381: PPUSH
50382: CALL 50236 0 1
// exit ;
50386: GO 50829
// end ; x := GetX ( enemy_unit ) ;
50388: LD_ADDR_VAR 0 7
50392: PUSH
50393: LD_VAR 0 2
50397: PPUSH
50398: CALL_OW 250
50402: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50403: LD_ADDR_VAR 0 8
50407: PUSH
50408: LD_VAR 0 2
50412: PPUSH
50413: CALL_OW 251
50417: ST_TO_ADDR
// if not x or not y then
50418: LD_VAR 0 7
50422: NOT
50423: PUSH
50424: LD_VAR 0 8
50428: NOT
50429: OR
50430: IFFALSE 50434
// exit ;
50432: GO 50829
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50434: LD_ADDR_VAR 0 6
50438: PUSH
50439: LD_VAR 0 7
50443: PPUSH
50444: LD_INT 0
50446: PPUSH
50447: LD_INT 4
50449: PPUSH
50450: CALL_OW 272
50454: PUSH
50455: LD_VAR 0 8
50459: PPUSH
50460: LD_INT 0
50462: PPUSH
50463: LD_INT 4
50465: PPUSH
50466: CALL_OW 273
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_VAR 0 7
50479: PPUSH
50480: LD_INT 1
50482: PPUSH
50483: LD_INT 4
50485: PPUSH
50486: CALL_OW 272
50490: PUSH
50491: LD_VAR 0 8
50495: PPUSH
50496: LD_INT 1
50498: PPUSH
50499: LD_INT 4
50501: PPUSH
50502: CALL_OW 273
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_VAR 0 7
50515: PPUSH
50516: LD_INT 2
50518: PPUSH
50519: LD_INT 4
50521: PPUSH
50522: CALL_OW 272
50526: PUSH
50527: LD_VAR 0 8
50531: PPUSH
50532: LD_INT 2
50534: PPUSH
50535: LD_INT 4
50537: PPUSH
50538: CALL_OW 273
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_VAR 0 7
50551: PPUSH
50552: LD_INT 3
50554: PPUSH
50555: LD_INT 4
50557: PPUSH
50558: CALL_OW 272
50562: PUSH
50563: LD_VAR 0 8
50567: PPUSH
50568: LD_INT 3
50570: PPUSH
50571: LD_INT 4
50573: PPUSH
50574: CALL_OW 273
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_VAR 0 7
50587: PPUSH
50588: LD_INT 4
50590: PPUSH
50591: LD_INT 4
50593: PPUSH
50594: CALL_OW 272
50598: PUSH
50599: LD_VAR 0 8
50603: PPUSH
50604: LD_INT 4
50606: PPUSH
50607: LD_INT 4
50609: PPUSH
50610: CALL_OW 273
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_VAR 0 7
50623: PPUSH
50624: LD_INT 5
50626: PPUSH
50627: LD_INT 4
50629: PPUSH
50630: CALL_OW 272
50634: PUSH
50635: LD_VAR 0 8
50639: PPUSH
50640: LD_INT 5
50642: PPUSH
50643: LD_INT 4
50645: PPUSH
50646: CALL_OW 273
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: ST_TO_ADDR
// for i = tmp downto 1 do
50663: LD_ADDR_VAR 0 4
50667: PUSH
50668: DOUBLE
50669: LD_VAR 0 6
50673: INC
50674: ST_TO_ADDR
50675: LD_INT 1
50677: PUSH
50678: FOR_DOWNTO
50679: IFFALSE 50780
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50681: LD_VAR 0 6
50685: PUSH
50686: LD_VAR 0 4
50690: ARRAY
50691: PUSH
50692: LD_INT 1
50694: ARRAY
50695: PPUSH
50696: LD_VAR 0 6
50700: PUSH
50701: LD_VAR 0 4
50705: ARRAY
50706: PUSH
50707: LD_INT 2
50709: ARRAY
50710: PPUSH
50711: CALL_OW 488
50715: NOT
50716: PUSH
50717: LD_VAR 0 6
50721: PUSH
50722: LD_VAR 0 4
50726: ARRAY
50727: PUSH
50728: LD_INT 1
50730: ARRAY
50731: PPUSH
50732: LD_VAR 0 6
50736: PUSH
50737: LD_VAR 0 4
50741: ARRAY
50742: PUSH
50743: LD_INT 2
50745: ARRAY
50746: PPUSH
50747: CALL_OW 428
50751: PUSH
50752: LD_INT 0
50754: NONEQUAL
50755: OR
50756: IFFALSE 50778
// tmp := Delete ( tmp , i ) ;
50758: LD_ADDR_VAR 0 6
50762: PUSH
50763: LD_VAR 0 6
50767: PPUSH
50768: LD_VAR 0 4
50772: PPUSH
50773: CALL_OW 3
50777: ST_TO_ADDR
50778: GO 50678
50780: POP
50781: POP
// j := GetClosestHex ( unit , tmp ) ;
50782: LD_ADDR_VAR 0 5
50786: PUSH
50787: LD_VAR 0 1
50791: PPUSH
50792: LD_VAR 0 6
50796: PPUSH
50797: CALL 50084 0 2
50801: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50802: LD_VAR 0 1
50806: PPUSH
50807: LD_VAR 0 5
50811: PUSH
50812: LD_INT 1
50814: ARRAY
50815: PPUSH
50816: LD_VAR 0 5
50820: PUSH
50821: LD_INT 2
50823: ARRAY
50824: PPUSH
50825: CALL_OW 111
// end ;
50829: LD_VAR 0 3
50833: RET
// export function PrepareApemanSoldier ( ) ; begin
50834: LD_INT 0
50836: PPUSH
// uc_nation := 0 ;
50837: LD_ADDR_OWVAR 21
50841: PUSH
50842: LD_INT 0
50844: ST_TO_ADDR
// hc_sex := sex_male ;
50845: LD_ADDR_OWVAR 27
50849: PUSH
50850: LD_INT 1
50852: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50853: LD_ADDR_OWVAR 28
50857: PUSH
50858: LD_INT 15
50860: ST_TO_ADDR
// hc_gallery :=  ;
50861: LD_ADDR_OWVAR 33
50865: PUSH
50866: LD_STRING 
50868: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50869: LD_ADDR_OWVAR 31
50873: PUSH
50874: LD_INT 0
50876: PPUSH
50877: LD_INT 3
50879: PPUSH
50880: CALL_OW 12
50884: PUSH
50885: LD_INT 0
50887: PPUSH
50888: LD_INT 3
50890: PPUSH
50891: CALL_OW 12
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// end ;
50908: LD_VAR 0 1
50912: RET
// export function PrepareApemanEngineer ( ) ; begin
50913: LD_INT 0
50915: PPUSH
// uc_nation := 0 ;
50916: LD_ADDR_OWVAR 21
50920: PUSH
50921: LD_INT 0
50923: ST_TO_ADDR
// hc_sex := sex_male ;
50924: LD_ADDR_OWVAR 27
50928: PUSH
50929: LD_INT 1
50931: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50932: LD_ADDR_OWVAR 28
50936: PUSH
50937: LD_INT 16
50939: ST_TO_ADDR
// hc_gallery :=  ;
50940: LD_ADDR_OWVAR 33
50944: PUSH
50945: LD_STRING 
50947: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50948: LD_ADDR_OWVAR 31
50952: PUSH
50953: LD_INT 0
50955: PPUSH
50956: LD_INT 3
50958: PPUSH
50959: CALL_OW 12
50963: PUSH
50964: LD_INT 0
50966: PPUSH
50967: LD_INT 3
50969: PPUSH
50970: CALL_OW 12
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: ST_TO_ADDR
// end ;
50987: LD_VAR 0 1
50991: RET
// export function PrepareApeman ( agressivity ) ; begin
50992: LD_INT 0
50994: PPUSH
// uc_side := 0 ;
50995: LD_ADDR_OWVAR 20
50999: PUSH
51000: LD_INT 0
51002: ST_TO_ADDR
// uc_nation := 0 ;
51003: LD_ADDR_OWVAR 21
51007: PUSH
51008: LD_INT 0
51010: ST_TO_ADDR
// hc_sex := sex_male ;
51011: LD_ADDR_OWVAR 27
51015: PUSH
51016: LD_INT 1
51018: ST_TO_ADDR
// hc_class := class_apeman ;
51019: LD_ADDR_OWVAR 28
51023: PUSH
51024: LD_INT 12
51026: ST_TO_ADDR
// hc_gallery :=  ;
51027: LD_ADDR_OWVAR 33
51031: PUSH
51032: LD_STRING 
51034: ST_TO_ADDR
// if agressivity = 0 then
51035: LD_VAR 0 1
51039: PUSH
51040: LD_INT 0
51042: EQUAL
51043: IFFALSE 51055
// hc_agressivity := 0 else
51045: LD_ADDR_OWVAR 35
51049: PUSH
51050: LD_INT 0
51052: ST_TO_ADDR
51053: GO 51076
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51055: LD_ADDR_OWVAR 35
51059: PUSH
51060: LD_VAR 0 1
51064: NEG
51065: PPUSH
51066: LD_VAR 0 1
51070: PPUSH
51071: CALL_OW 12
51075: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51076: LD_ADDR_OWVAR 31
51080: PUSH
51081: LD_INT 0
51083: PPUSH
51084: LD_INT 3
51086: PPUSH
51087: CALL_OW 12
51091: PUSH
51092: LD_INT 0
51094: PPUSH
51095: LD_INT 3
51097: PPUSH
51098: CALL_OW 12
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: ST_TO_ADDR
// end ;
51115: LD_VAR 0 2
51119: RET
// export function PrepareTiger ( agressivity ) ; begin
51120: LD_INT 0
51122: PPUSH
// uc_side := 0 ;
51123: LD_ADDR_OWVAR 20
51127: PUSH
51128: LD_INT 0
51130: ST_TO_ADDR
// uc_nation := 0 ;
51131: LD_ADDR_OWVAR 21
51135: PUSH
51136: LD_INT 0
51138: ST_TO_ADDR
// hc_class := class_tiger ;
51139: LD_ADDR_OWVAR 28
51143: PUSH
51144: LD_INT 14
51146: ST_TO_ADDR
// hc_gallery :=  ;
51147: LD_ADDR_OWVAR 33
51151: PUSH
51152: LD_STRING 
51154: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51155: LD_ADDR_OWVAR 35
51159: PUSH
51160: LD_VAR 0 1
51164: NEG
51165: PPUSH
51166: LD_VAR 0 1
51170: PPUSH
51171: CALL_OW 12
51175: ST_TO_ADDR
// end ;
51176: LD_VAR 0 2
51180: RET
// export function PrepareEnchidna ( ) ; begin
51181: LD_INT 0
51183: PPUSH
// uc_side := 0 ;
51184: LD_ADDR_OWVAR 20
51188: PUSH
51189: LD_INT 0
51191: ST_TO_ADDR
// uc_nation := 0 ;
51192: LD_ADDR_OWVAR 21
51196: PUSH
51197: LD_INT 0
51199: ST_TO_ADDR
// hc_class := class_baggie ;
51200: LD_ADDR_OWVAR 28
51204: PUSH
51205: LD_INT 13
51207: ST_TO_ADDR
// hc_gallery :=  ;
51208: LD_ADDR_OWVAR 33
51212: PUSH
51213: LD_STRING 
51215: ST_TO_ADDR
// end ;
51216: LD_VAR 0 1
51220: RET
// export function PrepareFrog ( ) ; begin
51221: LD_INT 0
51223: PPUSH
// uc_side := 0 ;
51224: LD_ADDR_OWVAR 20
51228: PUSH
51229: LD_INT 0
51231: ST_TO_ADDR
// uc_nation := 0 ;
51232: LD_ADDR_OWVAR 21
51236: PUSH
51237: LD_INT 0
51239: ST_TO_ADDR
// hc_class := class_frog ;
51240: LD_ADDR_OWVAR 28
51244: PUSH
51245: LD_INT 19
51247: ST_TO_ADDR
// hc_gallery :=  ;
51248: LD_ADDR_OWVAR 33
51252: PUSH
51253: LD_STRING 
51255: ST_TO_ADDR
// end ;
51256: LD_VAR 0 1
51260: RET
// export function PrepareFish ( ) ; begin
51261: LD_INT 0
51263: PPUSH
// uc_side := 0 ;
51264: LD_ADDR_OWVAR 20
51268: PUSH
51269: LD_INT 0
51271: ST_TO_ADDR
// uc_nation := 0 ;
51272: LD_ADDR_OWVAR 21
51276: PUSH
51277: LD_INT 0
51279: ST_TO_ADDR
// hc_class := class_fish ;
51280: LD_ADDR_OWVAR 28
51284: PUSH
51285: LD_INT 20
51287: ST_TO_ADDR
// hc_gallery :=  ;
51288: LD_ADDR_OWVAR 33
51292: PUSH
51293: LD_STRING 
51295: ST_TO_ADDR
// end ;
51296: LD_VAR 0 1
51300: RET
// export function PrepareBird ( ) ; begin
51301: LD_INT 0
51303: PPUSH
// uc_side := 0 ;
51304: LD_ADDR_OWVAR 20
51308: PUSH
51309: LD_INT 0
51311: ST_TO_ADDR
// uc_nation := 0 ;
51312: LD_ADDR_OWVAR 21
51316: PUSH
51317: LD_INT 0
51319: ST_TO_ADDR
// hc_class := class_phororhacos ;
51320: LD_ADDR_OWVAR 28
51324: PUSH
51325: LD_INT 18
51327: ST_TO_ADDR
// hc_gallery :=  ;
51328: LD_ADDR_OWVAR 33
51332: PUSH
51333: LD_STRING 
51335: ST_TO_ADDR
// end ;
51336: LD_VAR 0 1
51340: RET
// export function PrepareHorse ( ) ; begin
51341: LD_INT 0
51343: PPUSH
// uc_side := 0 ;
51344: LD_ADDR_OWVAR 20
51348: PUSH
51349: LD_INT 0
51351: ST_TO_ADDR
// uc_nation := 0 ;
51352: LD_ADDR_OWVAR 21
51356: PUSH
51357: LD_INT 0
51359: ST_TO_ADDR
// hc_class := class_horse ;
51360: LD_ADDR_OWVAR 28
51364: PUSH
51365: LD_INT 21
51367: ST_TO_ADDR
// hc_gallery :=  ;
51368: LD_ADDR_OWVAR 33
51372: PUSH
51373: LD_STRING 
51375: ST_TO_ADDR
// end ;
51376: LD_VAR 0 1
51380: RET
// export function PrepareMastodont ( ) ; begin
51381: LD_INT 0
51383: PPUSH
// uc_side := 0 ;
51384: LD_ADDR_OWVAR 20
51388: PUSH
51389: LD_INT 0
51391: ST_TO_ADDR
// uc_nation := 0 ;
51392: LD_ADDR_OWVAR 21
51396: PUSH
51397: LD_INT 0
51399: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51400: LD_ADDR_OWVAR 37
51404: PUSH
51405: LD_INT 31
51407: ST_TO_ADDR
// vc_control := control_rider ;
51408: LD_ADDR_OWVAR 38
51412: PUSH
51413: LD_INT 4
51415: ST_TO_ADDR
// end ;
51416: LD_VAR 0 1
51420: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51421: LD_INT 0
51423: PPUSH
51424: PPUSH
51425: PPUSH
// uc_side = 0 ;
51426: LD_ADDR_OWVAR 20
51430: PUSH
51431: LD_INT 0
51433: ST_TO_ADDR
// uc_nation = 0 ;
51434: LD_ADDR_OWVAR 21
51438: PUSH
51439: LD_INT 0
51441: ST_TO_ADDR
// InitHc_All ( ) ;
51442: CALL_OW 584
// InitVc ;
51446: CALL_OW 20
// if mastodonts then
51450: LD_VAR 0 6
51454: IFFALSE 51521
// for i = 1 to mastodonts do
51456: LD_ADDR_VAR 0 11
51460: PUSH
51461: DOUBLE
51462: LD_INT 1
51464: DEC
51465: ST_TO_ADDR
51466: LD_VAR 0 6
51470: PUSH
51471: FOR_TO
51472: IFFALSE 51519
// begin vc_chassis := 31 ;
51474: LD_ADDR_OWVAR 37
51478: PUSH
51479: LD_INT 31
51481: ST_TO_ADDR
// vc_control := control_rider ;
51482: LD_ADDR_OWVAR 38
51486: PUSH
51487: LD_INT 4
51489: ST_TO_ADDR
// animal := CreateVehicle ;
51490: LD_ADDR_VAR 0 12
51494: PUSH
51495: CALL_OW 45
51499: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51500: LD_VAR 0 12
51504: PPUSH
51505: LD_VAR 0 8
51509: PPUSH
51510: LD_INT 0
51512: PPUSH
51513: CALL 53649 0 3
// end ;
51517: GO 51471
51519: POP
51520: POP
// if horses then
51521: LD_VAR 0 5
51525: IFFALSE 51592
// for i = 1 to horses do
51527: LD_ADDR_VAR 0 11
51531: PUSH
51532: DOUBLE
51533: LD_INT 1
51535: DEC
51536: ST_TO_ADDR
51537: LD_VAR 0 5
51541: PUSH
51542: FOR_TO
51543: IFFALSE 51590
// begin hc_class := 21 ;
51545: LD_ADDR_OWVAR 28
51549: PUSH
51550: LD_INT 21
51552: ST_TO_ADDR
// hc_gallery :=  ;
51553: LD_ADDR_OWVAR 33
51557: PUSH
51558: LD_STRING 
51560: ST_TO_ADDR
// animal := CreateHuman ;
51561: LD_ADDR_VAR 0 12
51565: PUSH
51566: CALL_OW 44
51570: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51571: LD_VAR 0 12
51575: PPUSH
51576: LD_VAR 0 8
51580: PPUSH
51581: LD_INT 0
51583: PPUSH
51584: CALL 53649 0 3
// end ;
51588: GO 51542
51590: POP
51591: POP
// if birds then
51592: LD_VAR 0 1
51596: IFFALSE 51663
// for i = 1 to birds do
51598: LD_ADDR_VAR 0 11
51602: PUSH
51603: DOUBLE
51604: LD_INT 1
51606: DEC
51607: ST_TO_ADDR
51608: LD_VAR 0 1
51612: PUSH
51613: FOR_TO
51614: IFFALSE 51661
// begin hc_class := 18 ;
51616: LD_ADDR_OWVAR 28
51620: PUSH
51621: LD_INT 18
51623: ST_TO_ADDR
// hc_gallery =  ;
51624: LD_ADDR_OWVAR 33
51628: PUSH
51629: LD_STRING 
51631: ST_TO_ADDR
// animal := CreateHuman ;
51632: LD_ADDR_VAR 0 12
51636: PUSH
51637: CALL_OW 44
51641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51642: LD_VAR 0 12
51646: PPUSH
51647: LD_VAR 0 8
51651: PPUSH
51652: LD_INT 0
51654: PPUSH
51655: CALL 53649 0 3
// end ;
51659: GO 51613
51661: POP
51662: POP
// if tigers then
51663: LD_VAR 0 2
51667: IFFALSE 51751
// for i = 1 to tigers do
51669: LD_ADDR_VAR 0 11
51673: PUSH
51674: DOUBLE
51675: LD_INT 1
51677: DEC
51678: ST_TO_ADDR
51679: LD_VAR 0 2
51683: PUSH
51684: FOR_TO
51685: IFFALSE 51749
// begin hc_class = class_tiger ;
51687: LD_ADDR_OWVAR 28
51691: PUSH
51692: LD_INT 14
51694: ST_TO_ADDR
// hc_gallery =  ;
51695: LD_ADDR_OWVAR 33
51699: PUSH
51700: LD_STRING 
51702: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51703: LD_ADDR_OWVAR 35
51707: PUSH
51708: LD_INT 7
51710: NEG
51711: PPUSH
51712: LD_INT 7
51714: PPUSH
51715: CALL_OW 12
51719: ST_TO_ADDR
// animal := CreateHuman ;
51720: LD_ADDR_VAR 0 12
51724: PUSH
51725: CALL_OW 44
51729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51730: LD_VAR 0 12
51734: PPUSH
51735: LD_VAR 0 8
51739: PPUSH
51740: LD_INT 0
51742: PPUSH
51743: CALL 53649 0 3
// end ;
51747: GO 51684
51749: POP
51750: POP
// if apemans then
51751: LD_VAR 0 3
51755: IFFALSE 51878
// for i = 1 to apemans do
51757: LD_ADDR_VAR 0 11
51761: PUSH
51762: DOUBLE
51763: LD_INT 1
51765: DEC
51766: ST_TO_ADDR
51767: LD_VAR 0 3
51771: PUSH
51772: FOR_TO
51773: IFFALSE 51876
// begin hc_class = class_apeman ;
51775: LD_ADDR_OWVAR 28
51779: PUSH
51780: LD_INT 12
51782: ST_TO_ADDR
// hc_gallery =  ;
51783: LD_ADDR_OWVAR 33
51787: PUSH
51788: LD_STRING 
51790: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51791: LD_ADDR_OWVAR 35
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PPUSH
51800: LD_INT 2
51802: PPUSH
51803: CALL_OW 12
51807: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51808: LD_ADDR_OWVAR 31
51812: PUSH
51813: LD_INT 1
51815: PPUSH
51816: LD_INT 3
51818: PPUSH
51819: CALL_OW 12
51823: PUSH
51824: LD_INT 1
51826: PPUSH
51827: LD_INT 3
51829: PPUSH
51830: CALL_OW 12
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: ST_TO_ADDR
// animal := CreateHuman ;
51847: LD_ADDR_VAR 0 12
51851: PUSH
51852: CALL_OW 44
51856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51857: LD_VAR 0 12
51861: PPUSH
51862: LD_VAR 0 8
51866: PPUSH
51867: LD_INT 0
51869: PPUSH
51870: CALL 53649 0 3
// end ;
51874: GO 51772
51876: POP
51877: POP
// if enchidnas then
51878: LD_VAR 0 4
51882: IFFALSE 51949
// for i = 1 to enchidnas do
51884: LD_ADDR_VAR 0 11
51888: PUSH
51889: DOUBLE
51890: LD_INT 1
51892: DEC
51893: ST_TO_ADDR
51894: LD_VAR 0 4
51898: PUSH
51899: FOR_TO
51900: IFFALSE 51947
// begin hc_class = 13 ;
51902: LD_ADDR_OWVAR 28
51906: PUSH
51907: LD_INT 13
51909: ST_TO_ADDR
// hc_gallery =  ;
51910: LD_ADDR_OWVAR 33
51914: PUSH
51915: LD_STRING 
51917: ST_TO_ADDR
// animal := CreateHuman ;
51918: LD_ADDR_VAR 0 12
51922: PUSH
51923: CALL_OW 44
51927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51928: LD_VAR 0 12
51932: PPUSH
51933: LD_VAR 0 8
51937: PPUSH
51938: LD_INT 0
51940: PPUSH
51941: CALL 53649 0 3
// end ;
51945: GO 51899
51947: POP
51948: POP
// if fishes then
51949: LD_VAR 0 7
51953: IFFALSE 52020
// for i = 1 to fishes do
51955: LD_ADDR_VAR 0 11
51959: PUSH
51960: DOUBLE
51961: LD_INT 1
51963: DEC
51964: ST_TO_ADDR
51965: LD_VAR 0 7
51969: PUSH
51970: FOR_TO
51971: IFFALSE 52018
// begin hc_class = 20 ;
51973: LD_ADDR_OWVAR 28
51977: PUSH
51978: LD_INT 20
51980: ST_TO_ADDR
// hc_gallery =  ;
51981: LD_ADDR_OWVAR 33
51985: PUSH
51986: LD_STRING 
51988: ST_TO_ADDR
// animal := CreateHuman ;
51989: LD_ADDR_VAR 0 12
51993: PUSH
51994: CALL_OW 44
51998: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51999: LD_VAR 0 12
52003: PPUSH
52004: LD_VAR 0 9
52008: PPUSH
52009: LD_INT 0
52011: PPUSH
52012: CALL 53649 0 3
// end ;
52016: GO 51970
52018: POP
52019: POP
// end ;
52020: LD_VAR 0 10
52024: RET
// export function WantHeal ( sci , unit ) ; begin
52025: LD_INT 0
52027: PPUSH
// if GetTaskList ( sci ) > 0 then
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 437
52037: PUSH
52038: LD_INT 0
52040: GREATER
52041: IFFALSE 52111
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52043: LD_VAR 0 1
52047: PPUSH
52048: CALL_OW 437
52052: PUSH
52053: LD_INT 1
52055: ARRAY
52056: PUSH
52057: LD_INT 1
52059: ARRAY
52060: PUSH
52061: LD_STRING l
52063: EQUAL
52064: PUSH
52065: LD_VAR 0 1
52069: PPUSH
52070: CALL_OW 437
52074: PUSH
52075: LD_INT 1
52077: ARRAY
52078: PUSH
52079: LD_INT 4
52081: ARRAY
52082: PUSH
52083: LD_VAR 0 2
52087: EQUAL
52088: AND
52089: IFFALSE 52101
// result := true else
52091: LD_ADDR_VAR 0 3
52095: PUSH
52096: LD_INT 1
52098: ST_TO_ADDR
52099: GO 52109
// result := false ;
52101: LD_ADDR_VAR 0 3
52105: PUSH
52106: LD_INT 0
52108: ST_TO_ADDR
// end else
52109: GO 52119
// result := false ;
52111: LD_ADDR_VAR 0 3
52115: PUSH
52116: LD_INT 0
52118: ST_TO_ADDR
// end ;
52119: LD_VAR 0 3
52123: RET
// export function HealTarget ( sci ) ; begin
52124: LD_INT 0
52126: PPUSH
// if not sci then
52127: LD_VAR 0 1
52131: NOT
52132: IFFALSE 52136
// exit ;
52134: GO 52201
// result := 0 ;
52136: LD_ADDR_VAR 0 2
52140: PUSH
52141: LD_INT 0
52143: ST_TO_ADDR
// if GetTaskList ( sci ) then
52144: LD_VAR 0 1
52148: PPUSH
52149: CALL_OW 437
52153: IFFALSE 52201
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52155: LD_VAR 0 1
52159: PPUSH
52160: CALL_OW 437
52164: PUSH
52165: LD_INT 1
52167: ARRAY
52168: PUSH
52169: LD_INT 1
52171: ARRAY
52172: PUSH
52173: LD_STRING l
52175: EQUAL
52176: IFFALSE 52201
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52178: LD_ADDR_VAR 0 2
52182: PUSH
52183: LD_VAR 0 1
52187: PPUSH
52188: CALL_OW 437
52192: PUSH
52193: LD_INT 1
52195: ARRAY
52196: PUSH
52197: LD_INT 4
52199: ARRAY
52200: ST_TO_ADDR
// end ;
52201: LD_VAR 0 2
52205: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52206: LD_INT 0
52208: PPUSH
52209: PPUSH
52210: PPUSH
52211: PPUSH
// if not base_units then
52212: LD_VAR 0 1
52216: NOT
52217: IFFALSE 52221
// exit ;
52219: GO 52308
// result := false ;
52221: LD_ADDR_VAR 0 2
52225: PUSH
52226: LD_INT 0
52228: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52229: LD_ADDR_VAR 0 5
52233: PUSH
52234: LD_VAR 0 1
52238: PPUSH
52239: LD_INT 21
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PPUSH
52249: CALL_OW 72
52253: ST_TO_ADDR
// if not tmp then
52254: LD_VAR 0 5
52258: NOT
52259: IFFALSE 52263
// exit ;
52261: GO 52308
// for i in tmp do
52263: LD_ADDR_VAR 0 3
52267: PUSH
52268: LD_VAR 0 5
52272: PUSH
52273: FOR_IN
52274: IFFALSE 52306
// begin result := EnemyInRange ( i , 22 ) ;
52276: LD_ADDR_VAR 0 2
52280: PUSH
52281: LD_VAR 0 3
52285: PPUSH
52286: LD_INT 22
52288: PPUSH
52289: CALL 49886 0 2
52293: ST_TO_ADDR
// if result then
52294: LD_VAR 0 2
52298: IFFALSE 52304
// exit ;
52300: POP
52301: POP
52302: GO 52308
// end ;
52304: GO 52273
52306: POP
52307: POP
// end ;
52308: LD_VAR 0 2
52312: RET
// export function FilterByTag ( units , tag ) ; begin
52313: LD_INT 0
52315: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52316: LD_ADDR_VAR 0 3
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: LD_INT 120
52328: PUSH
52329: LD_VAR 0 2
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PPUSH
52338: CALL_OW 72
52342: ST_TO_ADDR
// end ;
52343: LD_VAR 0 3
52347: RET
// export function IsDriver ( un ) ; begin
52348: LD_INT 0
52350: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52351: LD_ADDR_VAR 0 2
52355: PUSH
52356: LD_VAR 0 1
52360: PUSH
52361: LD_INT 55
52363: PUSH
52364: EMPTY
52365: LIST
52366: PPUSH
52367: CALL_OW 69
52371: IN
52372: ST_TO_ADDR
// end ;
52373: LD_VAR 0 2
52377: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52378: LD_INT 0
52380: PPUSH
52381: PPUSH
// list := [ ] ;
52382: LD_ADDR_VAR 0 5
52386: PUSH
52387: EMPTY
52388: ST_TO_ADDR
// case d of 0 :
52389: LD_VAR 0 3
52393: PUSH
52394: LD_INT 0
52396: DOUBLE
52397: EQUAL
52398: IFTRUE 52402
52400: GO 52535
52402: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52403: LD_ADDR_VAR 0 5
52407: PUSH
52408: LD_VAR 0 1
52412: PUSH
52413: LD_INT 4
52415: MINUS
52416: PUSH
52417: LD_VAR 0 2
52421: PUSH
52422: LD_INT 4
52424: MINUS
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: LD_VAR 0 1
52438: PUSH
52439: LD_INT 3
52441: MINUS
52442: PUSH
52443: LD_VAR 0 2
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: PUSH
52456: LD_VAR 0 1
52460: PUSH
52461: LD_INT 4
52463: PLUS
52464: PUSH
52465: LD_VAR 0 2
52469: PUSH
52470: LD_INT 4
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: LIST
52477: PUSH
52478: LD_VAR 0 1
52482: PUSH
52483: LD_INT 3
52485: PLUS
52486: PUSH
52487: LD_VAR 0 2
52491: PUSH
52492: LD_INT 3
52494: PLUS
52495: PUSH
52496: LD_INT 5
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: PUSH
52504: LD_VAR 0 1
52508: PUSH
52509: LD_VAR 0 2
52513: PUSH
52514: LD_INT 4
52516: PLUS
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// end ; 1 :
52533: GO 53233
52535: LD_INT 1
52537: DOUBLE
52538: EQUAL
52539: IFTRUE 52543
52541: GO 52676
52543: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52544: LD_ADDR_VAR 0 5
52548: PUSH
52549: LD_VAR 0 1
52553: PUSH
52554: LD_VAR 0 2
52558: PUSH
52559: LD_INT 4
52561: MINUS
52562: PUSH
52563: LD_INT 3
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: LIST
52570: PUSH
52571: LD_VAR 0 1
52575: PUSH
52576: LD_INT 3
52578: MINUS
52579: PUSH
52580: LD_VAR 0 2
52584: PUSH
52585: LD_INT 3
52587: MINUS
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: PUSH
52597: LD_VAR 0 1
52601: PUSH
52602: LD_INT 4
52604: MINUS
52605: PUSH
52606: LD_VAR 0 2
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: PUSH
52619: LD_VAR 0 1
52623: PUSH
52624: LD_VAR 0 2
52628: PUSH
52629: LD_INT 3
52631: PLUS
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: LIST
52640: PUSH
52641: LD_VAR 0 1
52645: PUSH
52646: LD_INT 4
52648: PLUS
52649: PUSH
52650: LD_VAR 0 2
52654: PUSH
52655: LD_INT 4
52657: PLUS
52658: PUSH
52659: LD_INT 5
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// end ; 2 :
52674: GO 53233
52676: LD_INT 2
52678: DOUBLE
52679: EQUAL
52680: IFTRUE 52684
52682: GO 52813
52684: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52685: LD_ADDR_VAR 0 5
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_VAR 0 2
52699: PUSH
52700: LD_INT 3
52702: MINUS
52703: PUSH
52704: LD_INT 3
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: PUSH
52712: LD_VAR 0 1
52716: PUSH
52717: LD_INT 4
52719: PLUS
52720: PUSH
52721: LD_VAR 0 2
52725: PUSH
52726: LD_INT 4
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: PUSH
52734: LD_VAR 0 1
52738: PUSH
52739: LD_VAR 0 2
52743: PUSH
52744: LD_INT 4
52746: PLUS
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: PUSH
52756: LD_VAR 0 1
52760: PUSH
52761: LD_INT 3
52763: MINUS
52764: PUSH
52765: LD_VAR 0 2
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: PUSH
52778: LD_VAR 0 1
52782: PUSH
52783: LD_INT 4
52785: MINUS
52786: PUSH
52787: LD_VAR 0 2
52791: PUSH
52792: LD_INT 4
52794: MINUS
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: LIST
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: ST_TO_ADDR
// end ; 3 :
52811: GO 53233
52813: LD_INT 3
52815: DOUBLE
52816: EQUAL
52817: IFTRUE 52821
52819: GO 52954
52821: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52822: LD_ADDR_VAR 0 5
52826: PUSH
52827: LD_VAR 0 1
52831: PUSH
52832: LD_INT 3
52834: PLUS
52835: PUSH
52836: LD_VAR 0 2
52840: PUSH
52841: LD_INT 4
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: PUSH
52849: LD_VAR 0 1
52853: PUSH
52854: LD_INT 4
52856: PLUS
52857: PUSH
52858: LD_VAR 0 2
52862: PUSH
52863: LD_INT 4
52865: PLUS
52866: PUSH
52867: LD_INT 5
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: PUSH
52875: LD_VAR 0 1
52879: PUSH
52880: LD_INT 4
52882: MINUS
52883: PUSH
52884: LD_VAR 0 2
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: PUSH
52897: LD_VAR 0 1
52901: PUSH
52902: LD_VAR 0 2
52906: PUSH
52907: LD_INT 4
52909: MINUS
52910: PUSH
52911: LD_INT 3
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: PUSH
52919: LD_VAR 0 1
52923: PUSH
52924: LD_INT 3
52926: MINUS
52927: PUSH
52928: LD_VAR 0 2
52932: PUSH
52933: LD_INT 3
52935: MINUS
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// end ; 4 :
52952: GO 53233
52954: LD_INT 4
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52962
52960: GO 53095
52962: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52963: LD_ADDR_VAR 0 5
52967: PUSH
52968: LD_VAR 0 1
52972: PUSH
52973: LD_VAR 0 2
52977: PUSH
52978: LD_INT 4
52980: PLUS
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_VAR 0 1
52994: PUSH
52995: LD_INT 3
52997: PLUS
52998: PUSH
52999: LD_VAR 0 2
53003: PUSH
53004: LD_INT 3
53006: PLUS
53007: PUSH
53008: LD_INT 5
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: PUSH
53016: LD_VAR 0 1
53020: PUSH
53021: LD_INT 4
53023: PLUS
53024: PUSH
53025: LD_VAR 0 2
53029: PUSH
53030: LD_INT 4
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_VAR 0 2
53047: PUSH
53048: LD_INT 3
53050: MINUS
53051: PUSH
53052: LD_INT 3
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: PUSH
53060: LD_VAR 0 1
53064: PUSH
53065: LD_INT 4
53067: MINUS
53068: PUSH
53069: LD_VAR 0 2
53073: PUSH
53074: LD_INT 4
53076: MINUS
53077: PUSH
53078: LD_INT 2
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: ST_TO_ADDR
// end ; 5 :
53093: GO 53233
53095: LD_INT 5
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53103
53101: GO 53232
53103: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53104: LD_ADDR_VAR 0 5
53108: PUSH
53109: LD_VAR 0 1
53113: PUSH
53114: LD_INT 4
53116: MINUS
53117: PUSH
53118: LD_VAR 0 2
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: PUSH
53131: LD_VAR 0 1
53135: PUSH
53136: LD_VAR 0 2
53140: PUSH
53141: LD_INT 4
53143: MINUS
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: PUSH
53153: LD_VAR 0 1
53157: PUSH
53158: LD_INT 4
53160: PLUS
53161: PUSH
53162: LD_VAR 0 2
53166: PUSH
53167: LD_INT 4
53169: PLUS
53170: PUSH
53171: LD_INT 5
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: PUSH
53179: LD_VAR 0 1
53183: PUSH
53184: LD_INT 3
53186: PLUS
53187: PUSH
53188: LD_VAR 0 2
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: PUSH
53201: LD_VAR 0 1
53205: PUSH
53206: LD_VAR 0 2
53210: PUSH
53211: LD_INT 3
53213: PLUS
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: ST_TO_ADDR
// end ; end ;
53230: GO 53233
53232: POP
// result := list ;
53233: LD_ADDR_VAR 0 4
53237: PUSH
53238: LD_VAR 0 5
53242: ST_TO_ADDR
// end ;
53243: LD_VAR 0 4
53247: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53248: LD_INT 0
53250: PPUSH
53251: PPUSH
53252: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53253: LD_VAR 0 1
53257: NOT
53258: PUSH
53259: LD_VAR 0 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: IN
53282: NOT
53283: OR
53284: IFFALSE 53288
// exit ;
53286: GO 53371
// tmp := [ ] ;
53288: LD_ADDR_VAR 0 5
53292: PUSH
53293: EMPTY
53294: ST_TO_ADDR
// for i in units do
53295: LD_ADDR_VAR 0 4
53299: PUSH
53300: LD_VAR 0 1
53304: PUSH
53305: FOR_IN
53306: IFFALSE 53340
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: LD_VAR 0 5
53317: PPUSH
53318: LD_VAR 0 4
53322: PPUSH
53323: LD_VAR 0 2
53327: PPUSH
53328: CALL_OW 259
53332: PPUSH
53333: CALL 54744 0 2
53337: ST_TO_ADDR
53338: GO 53305
53340: POP
53341: POP
// if not tmp then
53342: LD_VAR 0 5
53346: NOT
53347: IFFALSE 53351
// exit ;
53349: GO 53371
// result := SortListByListDesc ( units , tmp ) ;
53351: LD_ADDR_VAR 0 3
53355: PUSH
53356: LD_VAR 0 1
53360: PPUSH
53361: LD_VAR 0 5
53365: PPUSH
53366: CALL_OW 77
53370: ST_TO_ADDR
// end ;
53371: LD_VAR 0 3
53375: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53376: LD_INT 0
53378: PPUSH
53379: PPUSH
53380: PPUSH
// result := false ;
53381: LD_ADDR_VAR 0 3
53385: PUSH
53386: LD_INT 0
53388: ST_TO_ADDR
// if not building then
53389: LD_VAR 0 2
53393: NOT
53394: IFFALSE 53398
// exit ;
53396: GO 53536
// x := GetX ( building ) ;
53398: LD_ADDR_VAR 0 4
53402: PUSH
53403: LD_VAR 0 2
53407: PPUSH
53408: CALL_OW 250
53412: ST_TO_ADDR
// y := GetY ( building ) ;
53413: LD_ADDR_VAR 0 5
53417: PUSH
53418: LD_VAR 0 2
53422: PPUSH
53423: CALL_OW 251
53427: ST_TO_ADDR
// if not x or not y then
53428: LD_VAR 0 4
53432: NOT
53433: PUSH
53434: LD_VAR 0 5
53438: NOT
53439: OR
53440: IFFALSE 53444
// exit ;
53442: GO 53536
// if GetTaskList ( unit ) then
53444: LD_VAR 0 1
53448: PPUSH
53449: CALL_OW 437
53453: IFFALSE 53536
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53455: LD_STRING e
53457: PUSH
53458: LD_VAR 0 1
53462: PPUSH
53463: CALL_OW 437
53467: PUSH
53468: LD_INT 1
53470: ARRAY
53471: PUSH
53472: LD_INT 1
53474: ARRAY
53475: EQUAL
53476: PUSH
53477: LD_VAR 0 4
53481: PUSH
53482: LD_VAR 0 1
53486: PPUSH
53487: CALL_OW 437
53491: PUSH
53492: LD_INT 1
53494: ARRAY
53495: PUSH
53496: LD_INT 2
53498: ARRAY
53499: EQUAL
53500: AND
53501: PUSH
53502: LD_VAR 0 5
53506: PUSH
53507: LD_VAR 0 1
53511: PPUSH
53512: CALL_OW 437
53516: PUSH
53517: LD_INT 1
53519: ARRAY
53520: PUSH
53521: LD_INT 3
53523: ARRAY
53524: EQUAL
53525: AND
53526: IFFALSE 53536
// result := true end ;
53528: LD_ADDR_VAR 0 3
53532: PUSH
53533: LD_INT 1
53535: ST_TO_ADDR
// end ;
53536: LD_VAR 0 3
53540: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53541: LD_INT 0
53543: PPUSH
// result := false ;
53544: LD_ADDR_VAR 0 4
53548: PUSH
53549: LD_INT 0
53551: ST_TO_ADDR
// if GetTaskList ( unit ) then
53552: LD_VAR 0 1
53556: PPUSH
53557: CALL_OW 437
53561: IFFALSE 53644
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53563: LD_STRING M
53565: PUSH
53566: LD_VAR 0 1
53570: PPUSH
53571: CALL_OW 437
53575: PUSH
53576: LD_INT 1
53578: ARRAY
53579: PUSH
53580: LD_INT 1
53582: ARRAY
53583: EQUAL
53584: PUSH
53585: LD_VAR 0 2
53589: PUSH
53590: LD_VAR 0 1
53594: PPUSH
53595: CALL_OW 437
53599: PUSH
53600: LD_INT 1
53602: ARRAY
53603: PUSH
53604: LD_INT 2
53606: ARRAY
53607: EQUAL
53608: AND
53609: PUSH
53610: LD_VAR 0 3
53614: PUSH
53615: LD_VAR 0 1
53619: PPUSH
53620: CALL_OW 437
53624: PUSH
53625: LD_INT 1
53627: ARRAY
53628: PUSH
53629: LD_INT 3
53631: ARRAY
53632: EQUAL
53633: AND
53634: IFFALSE 53644
// result := true ;
53636: LD_ADDR_VAR 0 4
53640: PUSH
53641: LD_INT 1
53643: ST_TO_ADDR
// end ; end ;
53644: LD_VAR 0 4
53648: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53649: LD_INT 0
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
// if not unit or not area then
53655: LD_VAR 0 1
53659: NOT
53660: PUSH
53661: LD_VAR 0 2
53665: NOT
53666: OR
53667: IFFALSE 53671
// exit ;
53669: GO 53847
// tmp := AreaToList ( area , i ) ;
53671: LD_ADDR_VAR 0 6
53675: PUSH
53676: LD_VAR 0 2
53680: PPUSH
53681: LD_VAR 0 5
53685: PPUSH
53686: CALL_OW 517
53690: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53691: LD_ADDR_VAR 0 5
53695: PUSH
53696: DOUBLE
53697: LD_INT 1
53699: DEC
53700: ST_TO_ADDR
53701: LD_VAR 0 6
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: PUSH
53710: FOR_TO
53711: IFFALSE 53845
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53713: LD_ADDR_VAR 0 7
53717: PUSH
53718: LD_VAR 0 6
53722: PUSH
53723: LD_INT 1
53725: ARRAY
53726: PUSH
53727: LD_VAR 0 5
53731: ARRAY
53732: PUSH
53733: LD_VAR 0 6
53737: PUSH
53738: LD_INT 2
53740: ARRAY
53741: PUSH
53742: LD_VAR 0 5
53746: ARRAY
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53752: LD_INT 92
53754: PUSH
53755: LD_VAR 0 7
53759: PUSH
53760: LD_INT 1
53762: ARRAY
53763: PUSH
53764: LD_VAR 0 7
53768: PUSH
53769: LD_INT 2
53771: ARRAY
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: PPUSH
53782: CALL_OW 69
53786: PUSH
53787: LD_INT 0
53789: EQUAL
53790: IFFALSE 53843
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53792: LD_VAR 0 1
53796: PPUSH
53797: LD_VAR 0 7
53801: PUSH
53802: LD_INT 1
53804: ARRAY
53805: PPUSH
53806: LD_VAR 0 7
53810: PUSH
53811: LD_INT 2
53813: ARRAY
53814: PPUSH
53815: LD_VAR 0 3
53819: PPUSH
53820: CALL_OW 48
// result := IsPlaced ( unit ) ;
53824: LD_ADDR_VAR 0 4
53828: PUSH
53829: LD_VAR 0 1
53833: PPUSH
53834: CALL_OW 305
53838: ST_TO_ADDR
// exit ;
53839: POP
53840: POP
53841: GO 53847
// end ; end ;
53843: GO 53710
53845: POP
53846: POP
// end ;
53847: LD_VAR 0 4
53851: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53852: LD_INT 0
53854: PPUSH
53855: PPUSH
53856: PPUSH
// if not side or side > 8 then
53857: LD_VAR 0 1
53861: NOT
53862: PUSH
53863: LD_VAR 0 1
53867: PUSH
53868: LD_INT 8
53870: GREATER
53871: OR
53872: IFFALSE 53876
// exit ;
53874: GO 54063
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53876: LD_ADDR_VAR 0 4
53880: PUSH
53881: LD_INT 22
53883: PUSH
53884: LD_VAR 0 1
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 21
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PPUSH
53907: CALL_OW 69
53911: ST_TO_ADDR
// if not tmp then
53912: LD_VAR 0 4
53916: NOT
53917: IFFALSE 53921
// exit ;
53919: GO 54063
// enable_addtolog := true ;
53921: LD_ADDR_OWVAR 81
53925: PUSH
53926: LD_INT 1
53928: ST_TO_ADDR
// AddToLog ( [ ) ;
53929: LD_STRING [
53931: PPUSH
53932: CALL_OW 561
// for i in tmp do
53936: LD_ADDR_VAR 0 3
53940: PUSH
53941: LD_VAR 0 4
53945: PUSH
53946: FOR_IN
53947: IFFALSE 54054
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53949: LD_STRING [
53951: PUSH
53952: LD_VAR 0 3
53956: PPUSH
53957: CALL_OW 266
53961: STR
53962: PUSH
53963: LD_STRING , 
53965: STR
53966: PUSH
53967: LD_VAR 0 3
53971: PPUSH
53972: CALL_OW 250
53976: STR
53977: PUSH
53978: LD_STRING , 
53980: STR
53981: PUSH
53982: LD_VAR 0 3
53986: PPUSH
53987: CALL_OW 251
53991: STR
53992: PUSH
53993: LD_STRING , 
53995: STR
53996: PUSH
53997: LD_VAR 0 3
54001: PPUSH
54002: CALL_OW 254
54006: STR
54007: PUSH
54008: LD_STRING , 
54010: STR
54011: PUSH
54012: LD_VAR 0 3
54016: PPUSH
54017: LD_INT 1
54019: PPUSH
54020: CALL_OW 268
54024: STR
54025: PUSH
54026: LD_STRING , 
54028: STR
54029: PUSH
54030: LD_VAR 0 3
54034: PPUSH
54035: LD_INT 2
54037: PPUSH
54038: CALL_OW 268
54042: STR
54043: PUSH
54044: LD_STRING ],
54046: STR
54047: PPUSH
54048: CALL_OW 561
// end ;
54052: GO 53946
54054: POP
54055: POP
// AddToLog ( ]; ) ;
54056: LD_STRING ];
54058: PPUSH
54059: CALL_OW 561
// end ;
54063: LD_VAR 0 2
54067: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54068: LD_INT 0
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
// if not area or not rate or not max then
54075: LD_VAR 0 1
54079: NOT
54080: PUSH
54081: LD_VAR 0 2
54085: NOT
54086: OR
54087: PUSH
54088: LD_VAR 0 4
54092: NOT
54093: OR
54094: IFFALSE 54098
// exit ;
54096: GO 54287
// while 1 do
54098: LD_INT 1
54100: IFFALSE 54287
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54102: LD_ADDR_VAR 0 9
54106: PUSH
54107: LD_VAR 0 1
54111: PPUSH
54112: LD_INT 1
54114: PPUSH
54115: CALL_OW 287
54119: PUSH
54120: LD_INT 10
54122: MUL
54123: ST_TO_ADDR
// r := rate / 10 ;
54124: LD_ADDR_VAR 0 7
54128: PUSH
54129: LD_VAR 0 2
54133: PUSH
54134: LD_INT 10
54136: DIVREAL
54137: ST_TO_ADDR
// time := 1 1$00 ;
54138: LD_ADDR_VAR 0 8
54142: PUSH
54143: LD_INT 2100
54145: ST_TO_ADDR
// if amount < min then
54146: LD_VAR 0 9
54150: PUSH
54151: LD_VAR 0 3
54155: LESS
54156: IFFALSE 54174
// r := r * 2 else
54158: LD_ADDR_VAR 0 7
54162: PUSH
54163: LD_VAR 0 7
54167: PUSH
54168: LD_INT 2
54170: MUL
54171: ST_TO_ADDR
54172: GO 54200
// if amount > max then
54174: LD_VAR 0 9
54178: PUSH
54179: LD_VAR 0 4
54183: GREATER
54184: IFFALSE 54200
// r := r / 2 ;
54186: LD_ADDR_VAR 0 7
54190: PUSH
54191: LD_VAR 0 7
54195: PUSH
54196: LD_INT 2
54198: DIVREAL
54199: ST_TO_ADDR
// time := time / r ;
54200: LD_ADDR_VAR 0 8
54204: PUSH
54205: LD_VAR 0 8
54209: PUSH
54210: LD_VAR 0 7
54214: DIVREAL
54215: ST_TO_ADDR
// if time < 0 then
54216: LD_VAR 0 8
54220: PUSH
54221: LD_INT 0
54223: LESS
54224: IFFALSE 54241
// time := time * - 1 ;
54226: LD_ADDR_VAR 0 8
54230: PUSH
54231: LD_VAR 0 8
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: MUL
54240: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54241: LD_VAR 0 8
54245: PUSH
54246: LD_INT 35
54248: PPUSH
54249: LD_INT 875
54251: PPUSH
54252: CALL_OW 12
54256: PLUS
54257: PPUSH
54258: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54262: LD_INT 1
54264: PPUSH
54265: LD_INT 5
54267: PPUSH
54268: CALL_OW 12
54272: PPUSH
54273: LD_VAR 0 1
54277: PPUSH
54278: LD_INT 1
54280: PPUSH
54281: CALL_OW 55
// end ;
54285: GO 54098
// end ;
54287: LD_VAR 0 5
54291: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54292: LD_INT 0
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
// if not turrets or not factories then
54302: LD_VAR 0 1
54306: NOT
54307: PUSH
54308: LD_VAR 0 2
54312: NOT
54313: OR
54314: IFFALSE 54318
// exit ;
54316: GO 54625
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54318: LD_ADDR_VAR 0 10
54322: PUSH
54323: LD_INT 5
54325: PUSH
54326: LD_INT 6
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 4
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 24
54360: PUSH
54361: LD_INT 25
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 23
54370: PUSH
54371: LD_INT 27
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 42
54384: PUSH
54385: LD_INT 43
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 44
54394: PUSH
54395: LD_INT 46
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 45
54404: PUSH
54405: LD_INT 47
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// result := [ ] ;
54422: LD_ADDR_VAR 0 3
54426: PUSH
54427: EMPTY
54428: ST_TO_ADDR
// for i in turrets do
54429: LD_ADDR_VAR 0 4
54433: PUSH
54434: LD_VAR 0 1
54438: PUSH
54439: FOR_IN
54440: IFFALSE 54623
// begin nat := GetNation ( i ) ;
54442: LD_ADDR_VAR 0 7
54446: PUSH
54447: LD_VAR 0 4
54451: PPUSH
54452: CALL_OW 248
54456: ST_TO_ADDR
// weapon := 0 ;
54457: LD_ADDR_VAR 0 8
54461: PUSH
54462: LD_INT 0
54464: ST_TO_ADDR
// if not nat then
54465: LD_VAR 0 7
54469: NOT
54470: IFFALSE 54474
// continue ;
54472: GO 54439
// for j in list [ nat ] do
54474: LD_ADDR_VAR 0 5
54478: PUSH
54479: LD_VAR 0 10
54483: PUSH
54484: LD_VAR 0 7
54488: ARRAY
54489: PUSH
54490: FOR_IN
54491: IFFALSE 54532
// if GetBWeapon ( i ) = j [ 1 ] then
54493: LD_VAR 0 4
54497: PPUSH
54498: CALL_OW 269
54502: PUSH
54503: LD_VAR 0 5
54507: PUSH
54508: LD_INT 1
54510: ARRAY
54511: EQUAL
54512: IFFALSE 54530
// begin weapon := j [ 2 ] ;
54514: LD_ADDR_VAR 0 8
54518: PUSH
54519: LD_VAR 0 5
54523: PUSH
54524: LD_INT 2
54526: ARRAY
54527: ST_TO_ADDR
// break ;
54528: GO 54532
// end ;
54530: GO 54490
54532: POP
54533: POP
// if not weapon then
54534: LD_VAR 0 8
54538: NOT
54539: IFFALSE 54543
// continue ;
54541: GO 54439
// for k in factories do
54543: LD_ADDR_VAR 0 6
54547: PUSH
54548: LD_VAR 0 2
54552: PUSH
54553: FOR_IN
54554: IFFALSE 54619
// begin weapons := AvailableWeaponList ( k ) ;
54556: LD_ADDR_VAR 0 9
54560: PUSH
54561: LD_VAR 0 6
54565: PPUSH
54566: CALL_OW 478
54570: ST_TO_ADDR
// if not weapons then
54571: LD_VAR 0 9
54575: NOT
54576: IFFALSE 54580
// continue ;
54578: GO 54553
// if weapon in weapons then
54580: LD_VAR 0 8
54584: PUSH
54585: LD_VAR 0 9
54589: IN
54590: IFFALSE 54617
// begin result := [ i , weapon ] ;
54592: LD_ADDR_VAR 0 3
54596: PUSH
54597: LD_VAR 0 4
54601: PUSH
54602: LD_VAR 0 8
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// exit ;
54611: POP
54612: POP
54613: POP
54614: POP
54615: GO 54625
// end ; end ;
54617: GO 54553
54619: POP
54620: POP
// end ;
54621: GO 54439
54623: POP
54624: POP
// end ;
54625: LD_VAR 0 3
54629: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54630: LD_INT 0
54632: PPUSH
// if not side or side > 8 then
54633: LD_VAR 0 3
54637: NOT
54638: PUSH
54639: LD_VAR 0 3
54643: PUSH
54644: LD_INT 8
54646: GREATER
54647: OR
54648: IFFALSE 54652
// exit ;
54650: GO 54711
// if not range then
54652: LD_VAR 0 4
54656: NOT
54657: IFFALSE 54668
// range := - 12 ;
54659: LD_ADDR_VAR 0 4
54663: PUSH
54664: LD_INT 12
54666: NEG
54667: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54668: LD_VAR 0 1
54672: PPUSH
54673: LD_VAR 0 2
54677: PPUSH
54678: LD_VAR 0 3
54682: PPUSH
54683: LD_VAR 0 4
54687: PPUSH
54688: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54692: LD_VAR 0 1
54696: PPUSH
54697: LD_VAR 0 2
54701: PPUSH
54702: LD_VAR 0 3
54706: PPUSH
54707: CALL_OW 331
// end ;
54711: LD_VAR 0 5
54715: RET
// export function Video ( mode ) ; begin
54716: LD_INT 0
54718: PPUSH
// ingame_video = mode ;
54719: LD_ADDR_OWVAR 52
54723: PUSH
54724: LD_VAR 0 1
54728: ST_TO_ADDR
// interface_hidden = mode ;
54729: LD_ADDR_OWVAR 54
54733: PUSH
54734: LD_VAR 0 1
54738: ST_TO_ADDR
// end ;
54739: LD_VAR 0 2
54743: RET
// export function Join ( array , element ) ; begin
54744: LD_INT 0
54746: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54747: LD_ADDR_VAR 0 3
54751: PUSH
54752: LD_VAR 0 1
54756: PPUSH
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 1
54764: PLUS
54765: PPUSH
54766: LD_VAR 0 2
54770: PPUSH
54771: CALL_OW 1
54775: ST_TO_ADDR
// end ;
54776: LD_VAR 0 3
54780: RET
// export function JoinUnion ( array , element ) ; begin
54781: LD_INT 0
54783: PPUSH
// result := array union element ;
54784: LD_ADDR_VAR 0 3
54788: PUSH
54789: LD_VAR 0 1
54793: PUSH
54794: LD_VAR 0 2
54798: UNION
54799: ST_TO_ADDR
// end ;
54800: LD_VAR 0 3
54804: RET
// export function GetBehemoths ( side ) ; begin
54805: LD_INT 0
54807: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54808: LD_ADDR_VAR 0 2
54812: PUSH
54813: LD_INT 22
54815: PUSH
54816: LD_VAR 0 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 31
54827: PUSH
54828: LD_INT 25
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PPUSH
54839: CALL_OW 69
54843: ST_TO_ADDR
// end ;
54844: LD_VAR 0 2
54848: RET
// export function Shuffle ( array ) ; var i , index ; begin
54849: LD_INT 0
54851: PPUSH
54852: PPUSH
54853: PPUSH
// result := [ ] ;
54854: LD_ADDR_VAR 0 2
54858: PUSH
54859: EMPTY
54860: ST_TO_ADDR
// if not array then
54861: LD_VAR 0 1
54865: NOT
54866: IFFALSE 54870
// exit ;
54868: GO 54969
// Randomize ;
54870: CALL_OW 10
// for i = array downto 1 do
54874: LD_ADDR_VAR 0 3
54878: PUSH
54879: DOUBLE
54880: LD_VAR 0 1
54884: INC
54885: ST_TO_ADDR
54886: LD_INT 1
54888: PUSH
54889: FOR_DOWNTO
54890: IFFALSE 54967
// begin index := rand ( 1 , array ) ;
54892: LD_ADDR_VAR 0 4
54896: PUSH
54897: LD_INT 1
54899: PPUSH
54900: LD_VAR 0 1
54904: PPUSH
54905: CALL_OW 12
54909: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54910: LD_ADDR_VAR 0 2
54914: PUSH
54915: LD_VAR 0 2
54919: PPUSH
54920: LD_VAR 0 2
54924: PUSH
54925: LD_INT 1
54927: PLUS
54928: PPUSH
54929: LD_VAR 0 1
54933: PUSH
54934: LD_VAR 0 4
54938: ARRAY
54939: PPUSH
54940: CALL_OW 2
54944: ST_TO_ADDR
// array := Delete ( array , index ) ;
54945: LD_ADDR_VAR 0 1
54949: PUSH
54950: LD_VAR 0 1
54954: PPUSH
54955: LD_VAR 0 4
54959: PPUSH
54960: CALL_OW 3
54964: ST_TO_ADDR
// end ;
54965: GO 54889
54967: POP
54968: POP
// end ;
54969: LD_VAR 0 2
54973: RET
// export function GetBaseMaterials ( base ) ; begin
54974: LD_INT 0
54976: PPUSH
// result := [ 0 , 0 , 0 ] ;
54977: LD_ADDR_VAR 0 2
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: LIST
54995: ST_TO_ADDR
// if not base then
54996: LD_VAR 0 1
55000: NOT
55001: IFFALSE 55005
// exit ;
55003: GO 55054
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55005: LD_ADDR_VAR 0 2
55009: PUSH
55010: LD_VAR 0 1
55014: PPUSH
55015: LD_INT 1
55017: PPUSH
55018: CALL_OW 275
55022: PUSH
55023: LD_VAR 0 1
55027: PPUSH
55028: LD_INT 2
55030: PPUSH
55031: CALL_OW 275
55035: PUSH
55036: LD_VAR 0 1
55040: PPUSH
55041: LD_INT 3
55043: PPUSH
55044: CALL_OW 275
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: LIST
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 2
55058: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55059: LD_INT 0
55061: PPUSH
55062: PPUSH
// result := array ;
55063: LD_ADDR_VAR 0 3
55067: PUSH
55068: LD_VAR 0 1
55072: ST_TO_ADDR
// if size >= result then
55073: LD_VAR 0 2
55077: PUSH
55078: LD_VAR 0 3
55082: GREATEREQUAL
55083: IFFALSE 55087
// exit ;
55085: GO 55137
// if size then
55087: LD_VAR 0 2
55091: IFFALSE 55137
// for i := array downto size do
55093: LD_ADDR_VAR 0 4
55097: PUSH
55098: DOUBLE
55099: LD_VAR 0 1
55103: INC
55104: ST_TO_ADDR
55105: LD_VAR 0 2
55109: PUSH
55110: FOR_DOWNTO
55111: IFFALSE 55135
// result := Delete ( result , result ) ;
55113: LD_ADDR_VAR 0 3
55117: PUSH
55118: LD_VAR 0 3
55122: PPUSH
55123: LD_VAR 0 3
55127: PPUSH
55128: CALL_OW 3
55132: ST_TO_ADDR
55133: GO 55110
55135: POP
55136: POP
// end ;
55137: LD_VAR 0 3
55141: RET
// export function ComExit ( unit ) ; var tmp ; begin
55142: LD_INT 0
55144: PPUSH
55145: PPUSH
// if not IsInUnit ( unit ) then
55146: LD_VAR 0 1
55150: PPUSH
55151: CALL_OW 310
55155: NOT
55156: IFFALSE 55160
// exit ;
55158: GO 55220
// tmp := IsInUnit ( unit ) ;
55160: LD_ADDR_VAR 0 3
55164: PUSH
55165: LD_VAR 0 1
55169: PPUSH
55170: CALL_OW 310
55174: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55175: LD_VAR 0 3
55179: PPUSH
55180: CALL_OW 247
55184: PUSH
55185: LD_INT 2
55187: EQUAL
55188: IFFALSE 55201
// ComExitVehicle ( unit ) else
55190: LD_VAR 0 1
55194: PPUSH
55195: CALL_OW 121
55199: GO 55210
// ComExitBuilding ( unit ) ;
55201: LD_VAR 0 1
55205: PPUSH
55206: CALL_OW 122
// result := tmp ;
55210: LD_ADDR_VAR 0 2
55214: PUSH
55215: LD_VAR 0 3
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 2
55224: RET
// export function ComExitAll ( units ) ; var i ; begin
55225: LD_INT 0
55227: PPUSH
55228: PPUSH
// if not units then
55229: LD_VAR 0 1
55233: NOT
55234: IFFALSE 55238
// exit ;
55236: GO 55264
// for i in units do
55238: LD_ADDR_VAR 0 3
55242: PUSH
55243: LD_VAR 0 1
55247: PUSH
55248: FOR_IN
55249: IFFALSE 55262
// ComExit ( i ) ;
55251: LD_VAR 0 3
55255: PPUSH
55256: CALL 55142 0 1
55260: GO 55248
55262: POP
55263: POP
// end ;
55264: LD_VAR 0 2
55268: RET
// export function ResetHc ; begin
55269: LD_INT 0
55271: PPUSH
// InitHc ;
55272: CALL_OW 19
// hc_importance := 0 ;
55276: LD_ADDR_OWVAR 32
55280: PUSH
55281: LD_INT 0
55283: ST_TO_ADDR
// end ;
55284: LD_VAR 0 1
55288: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55289: LD_INT 0
55291: PPUSH
55292: PPUSH
55293: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55294: LD_ADDR_VAR 0 6
55298: PUSH
55299: LD_VAR 0 1
55303: PUSH
55304: LD_VAR 0 3
55308: PLUS
55309: PUSH
55310: LD_INT 2
55312: DIV
55313: ST_TO_ADDR
// if _x < 0 then
55314: LD_VAR 0 6
55318: PUSH
55319: LD_INT 0
55321: LESS
55322: IFFALSE 55339
// _x := _x * - 1 ;
55324: LD_ADDR_VAR 0 6
55328: PUSH
55329: LD_VAR 0 6
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: MUL
55338: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55339: LD_ADDR_VAR 0 7
55343: PUSH
55344: LD_VAR 0 2
55348: PUSH
55349: LD_VAR 0 4
55353: PLUS
55354: PUSH
55355: LD_INT 2
55357: DIV
55358: ST_TO_ADDR
// if _y < 0 then
55359: LD_VAR 0 7
55363: PUSH
55364: LD_INT 0
55366: LESS
55367: IFFALSE 55384
// _y := _y * - 1 ;
55369: LD_ADDR_VAR 0 7
55373: PUSH
55374: LD_VAR 0 7
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: MUL
55383: ST_TO_ADDR
// result := [ _x , _y ] ;
55384: LD_ADDR_VAR 0 5
55388: PUSH
55389: LD_VAR 0 6
55393: PUSH
55394: LD_VAR 0 7
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// end ;
55403: LD_VAR 0 5
55407: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55408: LD_INT 0
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
// task := GetTaskList ( unit ) ;
55414: LD_ADDR_VAR 0 7
55418: PUSH
55419: LD_VAR 0 1
55423: PPUSH
55424: CALL_OW 437
55428: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55429: LD_VAR 0 7
55433: NOT
55434: PUSH
55435: LD_VAR 0 1
55439: PPUSH
55440: LD_VAR 0 2
55444: PPUSH
55445: CALL_OW 308
55449: NOT
55450: AND
55451: IFFALSE 55455
// exit ;
55453: GO 55573
// if IsInArea ( unit , area ) then
55455: LD_VAR 0 1
55459: PPUSH
55460: LD_VAR 0 2
55464: PPUSH
55465: CALL_OW 308
55469: IFFALSE 55487
// begin ComMoveToArea ( unit , goAway ) ;
55471: LD_VAR 0 1
55475: PPUSH
55476: LD_VAR 0 3
55480: PPUSH
55481: CALL_OW 113
// exit ;
55485: GO 55573
// end ; if task [ 1 ] [ 1 ] <> M then
55487: LD_VAR 0 7
55491: PUSH
55492: LD_INT 1
55494: ARRAY
55495: PUSH
55496: LD_INT 1
55498: ARRAY
55499: PUSH
55500: LD_STRING M
55502: NONEQUAL
55503: IFFALSE 55507
// exit ;
55505: GO 55573
// x := task [ 1 ] [ 2 ] ;
55507: LD_ADDR_VAR 0 5
55511: PUSH
55512: LD_VAR 0 7
55516: PUSH
55517: LD_INT 1
55519: ARRAY
55520: PUSH
55521: LD_INT 2
55523: ARRAY
55524: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55525: LD_ADDR_VAR 0 6
55529: PUSH
55530: LD_VAR 0 7
55534: PUSH
55535: LD_INT 1
55537: ARRAY
55538: PUSH
55539: LD_INT 3
55541: ARRAY
55542: ST_TO_ADDR
// if InArea ( x , y , area ) then
55543: LD_VAR 0 5
55547: PPUSH
55548: LD_VAR 0 6
55552: PPUSH
55553: LD_VAR 0 2
55557: PPUSH
55558: CALL_OW 309
55562: IFFALSE 55573
// ComStop ( unit ) ;
55564: LD_VAR 0 1
55568: PPUSH
55569: CALL_OW 141
// end ;
55573: LD_VAR 0 4
55577: RET
// export function Abs ( value ) ; begin
55578: LD_INT 0
55580: PPUSH
// result := value ;
55581: LD_ADDR_VAR 0 2
55585: PUSH
55586: LD_VAR 0 1
55590: ST_TO_ADDR
// if value < 0 then
55591: LD_VAR 0 1
55595: PUSH
55596: LD_INT 0
55598: LESS
55599: IFFALSE 55616
// result := value * - 1 ;
55601: LD_ADDR_VAR 0 2
55605: PUSH
55606: LD_VAR 0 1
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: MUL
55615: ST_TO_ADDR
// end ;
55616: LD_VAR 0 2
55620: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55621: LD_INT 0
55623: PPUSH
55624: PPUSH
55625: PPUSH
55626: PPUSH
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
// if not unit or not building then
55631: LD_VAR 0 1
55635: NOT
55636: PUSH
55637: LD_VAR 0 2
55641: NOT
55642: OR
55643: IFFALSE 55647
// exit ;
55645: GO 55873
// x := GetX ( building ) ;
55647: LD_ADDR_VAR 0 4
55651: PUSH
55652: LD_VAR 0 2
55656: PPUSH
55657: CALL_OW 250
55661: ST_TO_ADDR
// y := GetY ( building ) ;
55662: LD_ADDR_VAR 0 6
55666: PUSH
55667: LD_VAR 0 2
55671: PPUSH
55672: CALL_OW 251
55676: ST_TO_ADDR
// d := GetDir ( building ) ;
55677: LD_ADDR_VAR 0 8
55681: PUSH
55682: LD_VAR 0 2
55686: PPUSH
55687: CALL_OW 254
55691: ST_TO_ADDR
// r := 4 ;
55692: LD_ADDR_VAR 0 9
55696: PUSH
55697: LD_INT 4
55699: ST_TO_ADDR
// for i := 1 to 5 do
55700: LD_ADDR_VAR 0 10
55704: PUSH
55705: DOUBLE
55706: LD_INT 1
55708: DEC
55709: ST_TO_ADDR
55710: LD_INT 5
55712: PUSH
55713: FOR_TO
55714: IFFALSE 55871
// begin _x := ShiftX ( x , d , r + i ) ;
55716: LD_ADDR_VAR 0 5
55720: PUSH
55721: LD_VAR 0 4
55725: PPUSH
55726: LD_VAR 0 8
55730: PPUSH
55731: LD_VAR 0 9
55735: PUSH
55736: LD_VAR 0 10
55740: PLUS
55741: PPUSH
55742: CALL_OW 272
55746: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55747: LD_ADDR_VAR 0 7
55751: PUSH
55752: LD_VAR 0 6
55756: PPUSH
55757: LD_VAR 0 8
55761: PPUSH
55762: LD_VAR 0 9
55766: PUSH
55767: LD_VAR 0 10
55771: PLUS
55772: PPUSH
55773: CALL_OW 273
55777: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55778: LD_VAR 0 5
55782: PPUSH
55783: LD_VAR 0 7
55787: PPUSH
55788: CALL_OW 488
55792: PUSH
55793: LD_VAR 0 5
55797: PPUSH
55798: LD_VAR 0 7
55802: PPUSH
55803: CALL_OW 428
55807: PPUSH
55808: CALL_OW 247
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: IN
55823: NOT
55824: AND
55825: IFFALSE 55869
// begin ComMoveXY ( unit , _x , _y ) ;
55827: LD_VAR 0 1
55831: PPUSH
55832: LD_VAR 0 5
55836: PPUSH
55837: LD_VAR 0 7
55841: PPUSH
55842: CALL_OW 111
// result := [ _x , _y ] ;
55846: LD_ADDR_VAR 0 3
55850: PUSH
55851: LD_VAR 0 5
55855: PUSH
55856: LD_VAR 0 7
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// exit ;
55865: POP
55866: POP
55867: GO 55873
// end ; end ;
55869: GO 55713
55871: POP
55872: POP
// end ;
55873: LD_VAR 0 3
55877: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55878: LD_INT 0
55880: PPUSH
55881: PPUSH
55882: PPUSH
// result := 0 ;
55883: LD_ADDR_VAR 0 3
55887: PUSH
55888: LD_INT 0
55890: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55891: LD_VAR 0 1
55895: PUSH
55896: LD_INT 0
55898: LESS
55899: PUSH
55900: LD_VAR 0 1
55904: PUSH
55905: LD_INT 8
55907: GREATER
55908: OR
55909: PUSH
55910: LD_VAR 0 2
55914: PUSH
55915: LD_INT 0
55917: LESS
55918: OR
55919: PUSH
55920: LD_VAR 0 2
55924: PUSH
55925: LD_INT 8
55927: GREATER
55928: OR
55929: IFFALSE 55933
// exit ;
55931: GO 56008
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55933: LD_ADDR_VAR 0 4
55937: PUSH
55938: LD_INT 22
55940: PUSH
55941: LD_VAR 0 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PPUSH
55950: CALL_OW 69
55954: PUSH
55955: FOR_IN
55956: IFFALSE 56006
// begin un := UnitShoot ( i ) ;
55958: LD_ADDR_VAR 0 5
55962: PUSH
55963: LD_VAR 0 4
55967: PPUSH
55968: CALL_OW 504
55972: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55973: LD_VAR 0 5
55977: PPUSH
55978: CALL_OW 255
55982: PUSH
55983: LD_VAR 0 1
55987: EQUAL
55988: IFFALSE 56004
// begin result := un ;
55990: LD_ADDR_VAR 0 3
55994: PUSH
55995: LD_VAR 0 5
55999: ST_TO_ADDR
// exit ;
56000: POP
56001: POP
56002: GO 56008
// end ; end ;
56004: GO 55955
56006: POP
56007: POP
// end ;
56008: LD_VAR 0 3
56012: RET
// export function GetCargoBay ( units ) ; begin
56013: LD_INT 0
56015: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56016: LD_ADDR_VAR 0 2
56020: PUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: LD_INT 2
56028: PUSH
56029: LD_INT 34
56031: PUSH
56032: LD_INT 12
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 34
56041: PUSH
56042: LD_INT 51
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 34
56051: PUSH
56052: LD_INT 32
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 34
56061: PUSH
56062: LD_INT 89
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: PPUSH
56076: CALL_OW 72
56080: ST_TO_ADDR
// end ;
56081: LD_VAR 0 2
56085: RET
// export function Negate ( value ) ; begin
56086: LD_INT 0
56088: PPUSH
// result := not value ;
56089: LD_ADDR_VAR 0 2
56093: PUSH
56094: LD_VAR 0 1
56098: NOT
56099: ST_TO_ADDR
// end ;
56100: LD_VAR 0 2
56104: RET
// export function Inc ( value ) ; begin
56105: LD_INT 0
56107: PPUSH
// result := value + 1 ;
56108: LD_ADDR_VAR 0 2
56112: PUSH
56113: LD_VAR 0 1
56117: PUSH
56118: LD_INT 1
56120: PLUS
56121: ST_TO_ADDR
// end ;
56122: LD_VAR 0 2
56126: RET
// export function Dec ( value ) ; begin
56127: LD_INT 0
56129: PPUSH
// result := value - 1 ;
56130: LD_ADDR_VAR 0 2
56134: PUSH
56135: LD_VAR 0 1
56139: PUSH
56140: LD_INT 1
56142: MINUS
56143: ST_TO_ADDR
// end ;
56144: LD_VAR 0 2
56148: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56149: LD_INT 0
56151: PPUSH
56152: PPUSH
56153: PPUSH
56154: PPUSH
56155: PPUSH
56156: PPUSH
56157: PPUSH
56158: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56159: LD_VAR 0 1
56163: PPUSH
56164: LD_VAR 0 2
56168: PPUSH
56169: CALL_OW 488
56173: NOT
56174: PUSH
56175: LD_VAR 0 3
56179: PPUSH
56180: LD_VAR 0 4
56184: PPUSH
56185: CALL_OW 488
56189: NOT
56190: OR
56191: IFFALSE 56204
// begin result := - 1 ;
56193: LD_ADDR_VAR 0 5
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: ST_TO_ADDR
// exit ;
56202: GO 56439
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56204: LD_ADDR_VAR 0 12
56208: PUSH
56209: LD_VAR 0 1
56213: PPUSH
56214: LD_VAR 0 2
56218: PPUSH
56219: LD_VAR 0 3
56223: PPUSH
56224: LD_VAR 0 4
56228: PPUSH
56229: CALL 55289 0 4
56233: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56234: LD_ADDR_VAR 0 11
56238: PUSH
56239: LD_VAR 0 1
56243: PPUSH
56244: LD_VAR 0 2
56248: PPUSH
56249: LD_VAR 0 12
56253: PUSH
56254: LD_INT 1
56256: ARRAY
56257: PPUSH
56258: LD_VAR 0 12
56262: PUSH
56263: LD_INT 2
56265: ARRAY
56266: PPUSH
56267: CALL_OW 298
56271: ST_TO_ADDR
// distance := 9999 ;
56272: LD_ADDR_VAR 0 10
56276: PUSH
56277: LD_INT 9999
56279: ST_TO_ADDR
// for i := 0 to 5 do
56280: LD_ADDR_VAR 0 6
56284: PUSH
56285: DOUBLE
56286: LD_INT 0
56288: DEC
56289: ST_TO_ADDR
56290: LD_INT 5
56292: PUSH
56293: FOR_TO
56294: IFFALSE 56437
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56296: LD_ADDR_VAR 0 7
56300: PUSH
56301: LD_VAR 0 1
56305: PPUSH
56306: LD_VAR 0 6
56310: PPUSH
56311: LD_VAR 0 11
56315: PPUSH
56316: CALL_OW 272
56320: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56321: LD_ADDR_VAR 0 8
56325: PUSH
56326: LD_VAR 0 2
56330: PPUSH
56331: LD_VAR 0 6
56335: PPUSH
56336: LD_VAR 0 11
56340: PPUSH
56341: CALL_OW 273
56345: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56346: LD_VAR 0 7
56350: PPUSH
56351: LD_VAR 0 8
56355: PPUSH
56356: CALL_OW 488
56360: NOT
56361: IFFALSE 56365
// continue ;
56363: GO 56293
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56365: LD_ADDR_VAR 0 9
56369: PUSH
56370: LD_VAR 0 12
56374: PUSH
56375: LD_INT 1
56377: ARRAY
56378: PPUSH
56379: LD_VAR 0 12
56383: PUSH
56384: LD_INT 2
56386: ARRAY
56387: PPUSH
56388: LD_VAR 0 7
56392: PPUSH
56393: LD_VAR 0 8
56397: PPUSH
56398: CALL_OW 298
56402: ST_TO_ADDR
// if tmp < distance then
56403: LD_VAR 0 9
56407: PUSH
56408: LD_VAR 0 10
56412: LESS
56413: IFFALSE 56435
// begin result := i ;
56415: LD_ADDR_VAR 0 5
56419: PUSH
56420: LD_VAR 0 6
56424: ST_TO_ADDR
// distance := tmp ;
56425: LD_ADDR_VAR 0 10
56429: PUSH
56430: LD_VAR 0 9
56434: ST_TO_ADDR
// end ; end ;
56435: GO 56293
56437: POP
56438: POP
// end ;
56439: LD_VAR 0 5
56443: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56444: LD_INT 0
56446: PPUSH
56447: PPUSH
// if not driver or not IsInUnit ( driver ) then
56448: LD_VAR 0 1
56452: NOT
56453: PUSH
56454: LD_VAR 0 1
56458: PPUSH
56459: CALL_OW 310
56463: NOT
56464: OR
56465: IFFALSE 56469
// exit ;
56467: GO 56559
// vehicle := IsInUnit ( driver ) ;
56469: LD_ADDR_VAR 0 3
56473: PUSH
56474: LD_VAR 0 1
56478: PPUSH
56479: CALL_OW 310
56483: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56484: LD_VAR 0 1
56488: PPUSH
56489: LD_STRING \
56491: PUSH
56492: LD_INT 0
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: PUSH
56519: LD_STRING E
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_VAR 0 3
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PPUSH
56555: CALL_OW 446
// end ;
56559: LD_VAR 0 2
56563: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56564: LD_INT 0
56566: PPUSH
56567: PPUSH
// if not driver or not IsInUnit ( driver ) then
56568: LD_VAR 0 1
56572: NOT
56573: PUSH
56574: LD_VAR 0 1
56578: PPUSH
56579: CALL_OW 310
56583: NOT
56584: OR
56585: IFFALSE 56589
// exit ;
56587: GO 56679
// vehicle := IsInUnit ( driver ) ;
56589: LD_ADDR_VAR 0 3
56593: PUSH
56594: LD_VAR 0 1
56598: PPUSH
56599: CALL_OW 310
56603: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56604: LD_VAR 0 1
56608: PPUSH
56609: LD_STRING \
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: PUSH
56639: LD_STRING E
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_VAR 0 3
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PPUSH
56675: CALL_OW 447
// end ;
56679: LD_VAR 0 2
56683: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56684: LD_INT 0
56686: PPUSH
56687: PPUSH
56688: PPUSH
// tmp := [ ] ;
56689: LD_ADDR_VAR 0 5
56693: PUSH
56694: EMPTY
56695: ST_TO_ADDR
// for i in units do
56696: LD_ADDR_VAR 0 4
56700: PUSH
56701: LD_VAR 0 1
56705: PUSH
56706: FOR_IN
56707: IFFALSE 56745
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56709: LD_ADDR_VAR 0 5
56713: PUSH
56714: LD_VAR 0 5
56718: PPUSH
56719: LD_VAR 0 5
56723: PUSH
56724: LD_INT 1
56726: PLUS
56727: PPUSH
56728: LD_VAR 0 4
56732: PPUSH
56733: CALL_OW 256
56737: PPUSH
56738: CALL_OW 2
56742: ST_TO_ADDR
56743: GO 56706
56745: POP
56746: POP
// if not tmp then
56747: LD_VAR 0 5
56751: NOT
56752: IFFALSE 56756
// exit ;
56754: GO 56804
// if asc then
56756: LD_VAR 0 2
56760: IFFALSE 56784
// result := SortListByListAsc ( units , tmp ) else
56762: LD_ADDR_VAR 0 3
56766: PUSH
56767: LD_VAR 0 1
56771: PPUSH
56772: LD_VAR 0 5
56776: PPUSH
56777: CALL_OW 76
56781: ST_TO_ADDR
56782: GO 56804
// result := SortListByListDesc ( units , tmp ) ;
56784: LD_ADDR_VAR 0 3
56788: PUSH
56789: LD_VAR 0 1
56793: PPUSH
56794: LD_VAR 0 5
56798: PPUSH
56799: CALL_OW 77
56803: ST_TO_ADDR
// end ;
56804: LD_VAR 0 3
56808: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56809: LD_INT 0
56811: PPUSH
56812: PPUSH
// task := GetTaskList ( mech ) ;
56813: LD_ADDR_VAR 0 4
56817: PUSH
56818: LD_VAR 0 1
56822: PPUSH
56823: CALL_OW 437
56827: ST_TO_ADDR
// if not task then
56828: LD_VAR 0 4
56832: NOT
56833: IFFALSE 56837
// exit ;
56835: GO 56879
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56837: LD_ADDR_VAR 0 3
56841: PUSH
56842: LD_VAR 0 4
56846: PUSH
56847: LD_INT 1
56849: ARRAY
56850: PUSH
56851: LD_INT 1
56853: ARRAY
56854: PUSH
56855: LD_STRING r
56857: EQUAL
56858: PUSH
56859: LD_VAR 0 4
56863: PUSH
56864: LD_INT 1
56866: ARRAY
56867: PUSH
56868: LD_INT 4
56870: ARRAY
56871: PUSH
56872: LD_VAR 0 2
56876: EQUAL
56877: AND
56878: ST_TO_ADDR
// end ;
56879: LD_VAR 0 3
56883: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56884: LD_INT 0
56886: PPUSH
// SetDir ( unit , d ) ;
56887: LD_VAR 0 1
56891: PPUSH
56892: LD_VAR 0 4
56896: PPUSH
56897: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56901: LD_ADDR_VAR 0 6
56905: PUSH
56906: LD_VAR 0 1
56910: PPUSH
56911: LD_VAR 0 2
56915: PPUSH
56916: LD_VAR 0 3
56920: PPUSH
56921: LD_VAR 0 5
56925: PPUSH
56926: CALL_OW 48
56930: ST_TO_ADDR
// end ;
56931: LD_VAR 0 6
56935: RET
// export function ToNaturalNumber ( number ) ; begin
56936: LD_INT 0
56938: PPUSH
// result := number div 1 ;
56939: LD_ADDR_VAR 0 2
56943: PUSH
56944: LD_VAR 0 1
56948: PUSH
56949: LD_INT 1
56951: DIV
56952: ST_TO_ADDR
// if number < 0 then
56953: LD_VAR 0 1
56957: PUSH
56958: LD_INT 0
56960: LESS
56961: IFFALSE 56971
// result := 0 ;
56963: LD_ADDR_VAR 0 2
56967: PUSH
56968: LD_INT 0
56970: ST_TO_ADDR
// end ;
56971: LD_VAR 0 2
56975: RET
// export function SortByClass ( units , class ) ; var un ; begin
56976: LD_INT 0
56978: PPUSH
56979: PPUSH
// if not units or not class then
56980: LD_VAR 0 1
56984: NOT
56985: PUSH
56986: LD_VAR 0 2
56990: NOT
56991: OR
56992: IFFALSE 56996
// exit ;
56994: GO 57091
// result := [ ] ;
56996: LD_ADDR_VAR 0 3
57000: PUSH
57001: EMPTY
57002: ST_TO_ADDR
// for un in units do
57003: LD_ADDR_VAR 0 4
57007: PUSH
57008: LD_VAR 0 1
57012: PUSH
57013: FOR_IN
57014: IFFALSE 57089
// if GetClass ( un ) = class then
57016: LD_VAR 0 4
57020: PPUSH
57021: CALL_OW 257
57025: PUSH
57026: LD_VAR 0 2
57030: EQUAL
57031: IFFALSE 57058
// result := Insert ( result , 1 , un ) else
57033: LD_ADDR_VAR 0 3
57037: PUSH
57038: LD_VAR 0 3
57042: PPUSH
57043: LD_INT 1
57045: PPUSH
57046: LD_VAR 0 4
57050: PPUSH
57051: CALL_OW 2
57055: ST_TO_ADDR
57056: GO 57087
// result := Replace ( result , result + 1 , un ) ;
57058: LD_ADDR_VAR 0 3
57062: PUSH
57063: LD_VAR 0 3
57067: PPUSH
57068: LD_VAR 0 3
57072: PUSH
57073: LD_INT 1
57075: PLUS
57076: PPUSH
57077: LD_VAR 0 4
57081: PPUSH
57082: CALL_OW 1
57086: ST_TO_ADDR
57087: GO 57013
57089: POP
57090: POP
// end ;
57091: LD_VAR 0 3
57095: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57096: LD_INT 0
57098: PPUSH
57099: PPUSH
57100: PPUSH
57101: PPUSH
57102: PPUSH
57103: PPUSH
57104: PPUSH
// result := [ ] ;
57105: LD_ADDR_VAR 0 4
57109: PUSH
57110: EMPTY
57111: ST_TO_ADDR
// if x - r < 0 then
57112: LD_VAR 0 1
57116: PUSH
57117: LD_VAR 0 3
57121: MINUS
57122: PUSH
57123: LD_INT 0
57125: LESS
57126: IFFALSE 57138
// min_x := 0 else
57128: LD_ADDR_VAR 0 8
57132: PUSH
57133: LD_INT 0
57135: ST_TO_ADDR
57136: GO 57154
// min_x := x - r ;
57138: LD_ADDR_VAR 0 8
57142: PUSH
57143: LD_VAR 0 1
57147: PUSH
57148: LD_VAR 0 3
57152: MINUS
57153: ST_TO_ADDR
// if y - r < 0 then
57154: LD_VAR 0 2
57158: PUSH
57159: LD_VAR 0 3
57163: MINUS
57164: PUSH
57165: LD_INT 0
57167: LESS
57168: IFFALSE 57180
// min_y := 0 else
57170: LD_ADDR_VAR 0 7
57174: PUSH
57175: LD_INT 0
57177: ST_TO_ADDR
57178: GO 57196
// min_y := y - r ;
57180: LD_ADDR_VAR 0 7
57184: PUSH
57185: LD_VAR 0 2
57189: PUSH
57190: LD_VAR 0 3
57194: MINUS
57195: ST_TO_ADDR
// max_x := x + r ;
57196: LD_ADDR_VAR 0 9
57200: PUSH
57201: LD_VAR 0 1
57205: PUSH
57206: LD_VAR 0 3
57210: PLUS
57211: ST_TO_ADDR
// max_y := y + r ;
57212: LD_ADDR_VAR 0 10
57216: PUSH
57217: LD_VAR 0 2
57221: PUSH
57222: LD_VAR 0 3
57226: PLUS
57227: ST_TO_ADDR
// for _x = min_x to max_x do
57228: LD_ADDR_VAR 0 5
57232: PUSH
57233: DOUBLE
57234: LD_VAR 0 8
57238: DEC
57239: ST_TO_ADDR
57240: LD_VAR 0 9
57244: PUSH
57245: FOR_TO
57246: IFFALSE 57347
// for _y = min_y to max_y do
57248: LD_ADDR_VAR 0 6
57252: PUSH
57253: DOUBLE
57254: LD_VAR 0 7
57258: DEC
57259: ST_TO_ADDR
57260: LD_VAR 0 10
57264: PUSH
57265: FOR_TO
57266: IFFALSE 57343
// begin if not ValidHex ( _x , _y ) then
57268: LD_VAR 0 5
57272: PPUSH
57273: LD_VAR 0 6
57277: PPUSH
57278: CALL_OW 488
57282: NOT
57283: IFFALSE 57287
// continue ;
57285: GO 57265
// if GetResourceTypeXY ( _x , _y ) then
57287: LD_VAR 0 5
57291: PPUSH
57292: LD_VAR 0 6
57296: PPUSH
57297: CALL_OW 283
57301: IFFALSE 57341
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57303: LD_ADDR_VAR 0 4
57307: PUSH
57308: LD_VAR 0 4
57312: PPUSH
57313: LD_VAR 0 4
57317: PUSH
57318: LD_INT 1
57320: PLUS
57321: PPUSH
57322: LD_VAR 0 5
57326: PUSH
57327: LD_VAR 0 6
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PPUSH
57336: CALL_OW 1
57340: ST_TO_ADDR
// end ;
57341: GO 57265
57343: POP
57344: POP
57345: GO 57245
57347: POP
57348: POP
// end ;
57349: LD_VAR 0 4
57353: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57354: LD_INT 0
57356: PPUSH
57357: PPUSH
57358: PPUSH
57359: PPUSH
57360: PPUSH
57361: PPUSH
57362: PPUSH
57363: PPUSH
// if not units then
57364: LD_VAR 0 1
57368: NOT
57369: IFFALSE 57373
// exit ;
57371: GO 57901
// result := UnitFilter ( units , [ f_ok ] ) ;
57373: LD_ADDR_VAR 0 3
57377: PUSH
57378: LD_VAR 0 1
57382: PPUSH
57383: LD_INT 50
57385: PUSH
57386: EMPTY
57387: LIST
57388: PPUSH
57389: CALL_OW 72
57393: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57394: LD_ADDR_VAR 0 8
57398: PUSH
57399: LD_VAR 0 1
57403: PUSH
57404: LD_INT 1
57406: ARRAY
57407: PPUSH
57408: CALL_OW 255
57412: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57413: LD_ADDR_VAR 0 10
57417: PUSH
57418: LD_INT 29
57420: PUSH
57421: LD_INT 91
57423: PUSH
57424: LD_INT 49
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// if not result then
57432: LD_VAR 0 3
57436: NOT
57437: IFFALSE 57441
// exit ;
57439: GO 57901
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57441: LD_ADDR_VAR 0 5
57445: PUSH
57446: LD_INT 81
57448: PUSH
57449: LD_VAR 0 8
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PPUSH
57458: CALL_OW 69
57462: ST_TO_ADDR
// for i in result do
57463: LD_ADDR_VAR 0 4
57467: PUSH
57468: LD_VAR 0 3
57472: PUSH
57473: FOR_IN
57474: IFFALSE 57899
// begin tag := GetTag ( i ) + 1 ;
57476: LD_ADDR_VAR 0 9
57480: PUSH
57481: LD_VAR 0 4
57485: PPUSH
57486: CALL_OW 110
57490: PUSH
57491: LD_INT 1
57493: PLUS
57494: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57495: LD_ADDR_VAR 0 7
57499: PUSH
57500: LD_VAR 0 4
57504: PPUSH
57505: CALL_OW 250
57509: PPUSH
57510: LD_VAR 0 4
57514: PPUSH
57515: CALL_OW 251
57519: PPUSH
57520: LD_INT 4
57522: PPUSH
57523: CALL 57096 0 3
57527: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57528: LD_VAR 0 4
57532: PPUSH
57533: CALL_OW 247
57537: PUSH
57538: LD_INT 2
57540: EQUAL
57541: PUSH
57542: LD_VAR 0 7
57546: PUSH
57547: LD_INT 2
57549: GREATER
57550: AND
57551: PUSH
57552: LD_VAR 0 4
57556: PPUSH
57557: CALL_OW 264
57561: PUSH
57562: LD_VAR 0 10
57566: IN
57567: NOT
57568: AND
57569: IFFALSE 57608
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57571: LD_VAR 0 4
57575: PPUSH
57576: LD_VAR 0 7
57580: PUSH
57581: LD_INT 1
57583: ARRAY
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PPUSH
57589: LD_VAR 0 7
57593: PUSH
57594: LD_INT 1
57596: ARRAY
57597: PUSH
57598: LD_INT 2
57600: ARRAY
57601: PPUSH
57602: CALL_OW 116
57606: GO 57897
// if path > tag then
57608: LD_VAR 0 2
57612: PUSH
57613: LD_VAR 0 9
57617: GREATER
57618: IFFALSE 57826
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57620: LD_ADDR_VAR 0 6
57624: PUSH
57625: LD_VAR 0 5
57629: PPUSH
57630: LD_INT 91
57632: PUSH
57633: LD_VAR 0 4
57637: PUSH
57638: LD_INT 8
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: PPUSH
57646: CALL_OW 72
57650: ST_TO_ADDR
// if nearEnemy then
57651: LD_VAR 0 6
57655: IFFALSE 57724
// begin if GetWeapon ( i ) = ru_time_lapser then
57657: LD_VAR 0 4
57661: PPUSH
57662: CALL_OW 264
57666: PUSH
57667: LD_INT 49
57669: EQUAL
57670: IFFALSE 57698
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57672: LD_VAR 0 4
57676: PPUSH
57677: LD_VAR 0 6
57681: PPUSH
57682: LD_VAR 0 4
57686: PPUSH
57687: CALL_OW 74
57691: PPUSH
57692: CALL_OW 112
57696: GO 57722
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57698: LD_VAR 0 4
57702: PPUSH
57703: LD_VAR 0 6
57707: PPUSH
57708: LD_VAR 0 4
57712: PPUSH
57713: CALL_OW 74
57717: PPUSH
57718: CALL 58972 0 2
// end else
57722: GO 57824
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57724: LD_VAR 0 4
57728: PPUSH
57729: LD_VAR 0 2
57733: PUSH
57734: LD_VAR 0 9
57738: ARRAY
57739: PUSH
57740: LD_INT 1
57742: ARRAY
57743: PPUSH
57744: LD_VAR 0 2
57748: PUSH
57749: LD_VAR 0 9
57753: ARRAY
57754: PUSH
57755: LD_INT 2
57757: ARRAY
57758: PPUSH
57759: CALL_OW 297
57763: PUSH
57764: LD_INT 6
57766: GREATER
57767: IFFALSE 57810
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57769: LD_VAR 0 4
57773: PPUSH
57774: LD_VAR 0 2
57778: PUSH
57779: LD_VAR 0 9
57783: ARRAY
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PPUSH
57789: LD_VAR 0 2
57793: PUSH
57794: LD_VAR 0 9
57798: ARRAY
57799: PUSH
57800: LD_INT 2
57802: ARRAY
57803: PPUSH
57804: CALL_OW 114
57808: GO 57824
// SetTag ( i , tag ) ;
57810: LD_VAR 0 4
57814: PPUSH
57815: LD_VAR 0 9
57819: PPUSH
57820: CALL_OW 109
// end else
57824: GO 57897
// if enemy then
57826: LD_VAR 0 5
57830: IFFALSE 57897
// begin if GetWeapon ( i ) = ru_time_lapser then
57832: LD_VAR 0 4
57836: PPUSH
57837: CALL_OW 264
57841: PUSH
57842: LD_INT 49
57844: EQUAL
57845: IFFALSE 57873
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57847: LD_VAR 0 4
57851: PPUSH
57852: LD_VAR 0 5
57856: PPUSH
57857: LD_VAR 0 4
57861: PPUSH
57862: CALL_OW 74
57866: PPUSH
57867: CALL_OW 112
57871: GO 57897
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57873: LD_VAR 0 4
57877: PPUSH
57878: LD_VAR 0 5
57882: PPUSH
57883: LD_VAR 0 4
57887: PPUSH
57888: CALL_OW 74
57892: PPUSH
57893: CALL 58972 0 2
// end ; end ;
57897: GO 57473
57899: POP
57900: POP
// end ;
57901: LD_VAR 0 3
57905: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57906: LD_INT 0
57908: PPUSH
57909: PPUSH
57910: PPUSH
// if not unit or IsInUnit ( unit ) then
57911: LD_VAR 0 1
57915: NOT
57916: PUSH
57917: LD_VAR 0 1
57921: PPUSH
57922: CALL_OW 310
57926: OR
57927: IFFALSE 57931
// exit ;
57929: GO 58022
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57931: LD_ADDR_VAR 0 4
57935: PUSH
57936: LD_VAR 0 1
57940: PPUSH
57941: CALL_OW 250
57945: PPUSH
57946: LD_VAR 0 2
57950: PPUSH
57951: LD_INT 1
57953: PPUSH
57954: CALL_OW 272
57958: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57959: LD_ADDR_VAR 0 5
57963: PUSH
57964: LD_VAR 0 1
57968: PPUSH
57969: CALL_OW 251
57973: PPUSH
57974: LD_VAR 0 2
57978: PPUSH
57979: LD_INT 1
57981: PPUSH
57982: CALL_OW 273
57986: ST_TO_ADDR
// if ValidHex ( x , y ) then
57987: LD_VAR 0 4
57991: PPUSH
57992: LD_VAR 0 5
57996: PPUSH
57997: CALL_OW 488
58001: IFFALSE 58022
// ComTurnXY ( unit , x , y ) ;
58003: LD_VAR 0 1
58007: PPUSH
58008: LD_VAR 0 4
58012: PPUSH
58013: LD_VAR 0 5
58017: PPUSH
58018: CALL_OW 118
// end ;
58022: LD_VAR 0 3
58026: RET
// export function SeeUnits ( side , units ) ; var i ; begin
58027: LD_INT 0
58029: PPUSH
58030: PPUSH
// result := false ;
58031: LD_ADDR_VAR 0 3
58035: PUSH
58036: LD_INT 0
58038: ST_TO_ADDR
// if not units then
58039: LD_VAR 0 2
58043: NOT
58044: IFFALSE 58048
// exit ;
58046: GO 58093
// for i in units do
58048: LD_ADDR_VAR 0 4
58052: PUSH
58053: LD_VAR 0 2
58057: PUSH
58058: FOR_IN
58059: IFFALSE 58091
// if See ( side , i ) then
58061: LD_VAR 0 1
58065: PPUSH
58066: LD_VAR 0 4
58070: PPUSH
58071: CALL_OW 292
58075: IFFALSE 58089
// begin result := true ;
58077: LD_ADDR_VAR 0 3
58081: PUSH
58082: LD_INT 1
58084: ST_TO_ADDR
// exit ;
58085: POP
58086: POP
58087: GO 58093
// end ;
58089: GO 58058
58091: POP
58092: POP
// end ;
58093: LD_VAR 0 3
58097: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58098: LD_INT 0
58100: PPUSH
58101: PPUSH
58102: PPUSH
58103: PPUSH
// if not unit or not points then
58104: LD_VAR 0 1
58108: NOT
58109: PUSH
58110: LD_VAR 0 2
58114: NOT
58115: OR
58116: IFFALSE 58120
// exit ;
58118: GO 58210
// dist := 99999 ;
58120: LD_ADDR_VAR 0 5
58124: PUSH
58125: LD_INT 99999
58127: ST_TO_ADDR
// for i in points do
58128: LD_ADDR_VAR 0 4
58132: PUSH
58133: LD_VAR 0 2
58137: PUSH
58138: FOR_IN
58139: IFFALSE 58208
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58141: LD_ADDR_VAR 0 6
58145: PUSH
58146: LD_VAR 0 1
58150: PPUSH
58151: LD_VAR 0 4
58155: PUSH
58156: LD_INT 1
58158: ARRAY
58159: PPUSH
58160: LD_VAR 0 4
58164: PUSH
58165: LD_INT 2
58167: ARRAY
58168: PPUSH
58169: CALL_OW 297
58173: ST_TO_ADDR
// if tmpDist < dist then
58174: LD_VAR 0 6
58178: PUSH
58179: LD_VAR 0 5
58183: LESS
58184: IFFALSE 58206
// begin result := i ;
58186: LD_ADDR_VAR 0 3
58190: PUSH
58191: LD_VAR 0 4
58195: ST_TO_ADDR
// dist := tmpDist ;
58196: LD_ADDR_VAR 0 5
58200: PUSH
58201: LD_VAR 0 6
58205: ST_TO_ADDR
// end ; end ;
58206: GO 58138
58208: POP
58209: POP
// end ;
58210: LD_VAR 0 3
58214: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58215: LD_INT 0
58217: PPUSH
// uc_side := side ;
58218: LD_ADDR_OWVAR 20
58222: PUSH
58223: LD_VAR 0 1
58227: ST_TO_ADDR
// uc_nation := 3 ;
58228: LD_ADDR_OWVAR 21
58232: PUSH
58233: LD_INT 3
58235: ST_TO_ADDR
// vc_chassis := 25 ;
58236: LD_ADDR_OWVAR 37
58240: PUSH
58241: LD_INT 25
58243: ST_TO_ADDR
// vc_engine := engine_siberite ;
58244: LD_ADDR_OWVAR 39
58248: PUSH
58249: LD_INT 3
58251: ST_TO_ADDR
// vc_control := control_computer ;
58252: LD_ADDR_OWVAR 38
58256: PUSH
58257: LD_INT 3
58259: ST_TO_ADDR
// vc_weapon := 59 ;
58260: LD_ADDR_OWVAR 40
58264: PUSH
58265: LD_INT 59
58267: ST_TO_ADDR
// result := CreateVehicle ;
58268: LD_ADDR_VAR 0 5
58272: PUSH
58273: CALL_OW 45
58277: ST_TO_ADDR
// SetDir ( result , d ) ;
58278: LD_VAR 0 5
58282: PPUSH
58283: LD_VAR 0 4
58287: PPUSH
58288: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58292: LD_VAR 0 5
58296: PPUSH
58297: LD_VAR 0 2
58301: PPUSH
58302: LD_VAR 0 3
58306: PPUSH
58307: LD_INT 0
58309: PPUSH
58310: CALL_OW 48
// end ;
58314: LD_VAR 0 5
58318: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58319: LD_INT 0
58321: PPUSH
58322: PPUSH
58323: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58324: LD_ADDR_VAR 0 2
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58347: LD_VAR 0 1
58351: NOT
58352: PUSH
58353: LD_VAR 0 1
58357: PPUSH
58358: CALL_OW 264
58362: PUSH
58363: LD_INT 12
58365: PUSH
58366: LD_INT 51
58368: PUSH
58369: LD_INT 32
58371: PUSH
58372: LD_INT 89
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: IN
58381: NOT
58382: OR
58383: IFFALSE 58387
// exit ;
58385: GO 58485
// for i := 1 to 3 do
58387: LD_ADDR_VAR 0 3
58391: PUSH
58392: DOUBLE
58393: LD_INT 1
58395: DEC
58396: ST_TO_ADDR
58397: LD_INT 3
58399: PUSH
58400: FOR_TO
58401: IFFALSE 58483
// begin tmp := GetCargo ( cargo , i ) ;
58403: LD_ADDR_VAR 0 4
58407: PUSH
58408: LD_VAR 0 1
58412: PPUSH
58413: LD_VAR 0 3
58417: PPUSH
58418: CALL_OW 289
58422: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58423: LD_ADDR_VAR 0 2
58427: PUSH
58428: LD_VAR 0 2
58432: PPUSH
58433: LD_VAR 0 3
58437: PPUSH
58438: LD_VAR 0 4
58442: PPUSH
58443: CALL_OW 1
58447: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58448: LD_ADDR_VAR 0 2
58452: PUSH
58453: LD_VAR 0 2
58457: PPUSH
58458: LD_INT 4
58460: PPUSH
58461: LD_VAR 0 2
58465: PUSH
58466: LD_INT 4
58468: ARRAY
58469: PUSH
58470: LD_VAR 0 4
58474: PLUS
58475: PPUSH
58476: CALL_OW 1
58480: ST_TO_ADDR
// end ;
58481: GO 58400
58483: POP
58484: POP
// end ;
58485: LD_VAR 0 2
58489: RET
// export function Length ( array ) ; begin
58490: LD_INT 0
58492: PPUSH
// result := array + 0 ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_INT 0
58505: PLUS
58506: ST_TO_ADDR
// end ;
58507: LD_VAR 0 2
58511: RET
// export function PrepareArray ( array ) ; begin
58512: LD_INT 0
58514: PPUSH
// result := array diff 0 ;
58515: LD_ADDR_VAR 0 2
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_INT 0
58527: DIFF
58528: ST_TO_ADDR
// if not result [ 1 ] then
58529: LD_VAR 0 2
58533: PUSH
58534: LD_INT 1
58536: ARRAY
58537: NOT
58538: IFFALSE 58558
// result := Delete ( result , 1 ) ;
58540: LD_ADDR_VAR 0 2
58544: PUSH
58545: LD_VAR 0 2
58549: PPUSH
58550: LD_INT 1
58552: PPUSH
58553: CALL_OW 3
58557: ST_TO_ADDR
// end ;
58558: LD_VAR 0 2
58562: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58563: LD_INT 0
58565: PPUSH
58566: PPUSH
58567: PPUSH
58568: PPUSH
// sibRocketRange := 25 ;
58569: LD_ADDR_VAR 0 6
58573: PUSH
58574: LD_INT 25
58576: ST_TO_ADDR
// result := false ;
58577: LD_ADDR_VAR 0 4
58581: PUSH
58582: LD_INT 0
58584: ST_TO_ADDR
// for i := 0 to 5 do
58585: LD_ADDR_VAR 0 5
58589: PUSH
58590: DOUBLE
58591: LD_INT 0
58593: DEC
58594: ST_TO_ADDR
58595: LD_INT 5
58597: PUSH
58598: FOR_TO
58599: IFFALSE 58666
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_VAR 0 5
58610: PPUSH
58611: LD_VAR 0 6
58615: PPUSH
58616: CALL_OW 272
58620: PPUSH
58621: LD_VAR 0 2
58625: PPUSH
58626: LD_VAR 0 5
58630: PPUSH
58631: LD_VAR 0 6
58635: PPUSH
58636: CALL_OW 273
58640: PPUSH
58641: LD_VAR 0 3
58645: PPUSH
58646: CALL_OW 309
58650: IFFALSE 58664
// begin result := true ;
58652: LD_ADDR_VAR 0 4
58656: PUSH
58657: LD_INT 1
58659: ST_TO_ADDR
// exit ;
58660: POP
58661: POP
58662: GO 58668
// end ;
58664: GO 58598
58666: POP
58667: POP
// end ;
58668: LD_VAR 0 4
58672: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58673: LD_INT 0
58675: PPUSH
58676: PPUSH
58677: PPUSH
// if btype = b_depot then
58678: LD_VAR 0 2
58682: PUSH
58683: LD_INT 0
58685: EQUAL
58686: IFFALSE 58698
// begin result := true ;
58688: LD_ADDR_VAR 0 3
58692: PUSH
58693: LD_INT 1
58695: ST_TO_ADDR
// exit ;
58696: GO 58814
// end ; pom := GetBase ( depot ) ;
58698: LD_ADDR_VAR 0 4
58702: PUSH
58703: LD_VAR 0 1
58707: PPUSH
58708: CALL_OW 274
58712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58713: LD_ADDR_VAR 0 5
58717: PUSH
58718: LD_VAR 0 2
58722: PPUSH
58723: LD_VAR 0 1
58727: PPUSH
58728: CALL_OW 248
58732: PPUSH
58733: CALL_OW 450
58737: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58738: LD_ADDR_VAR 0 3
58742: PUSH
58743: LD_VAR 0 4
58747: PPUSH
58748: LD_INT 1
58750: PPUSH
58751: CALL_OW 275
58755: PUSH
58756: LD_VAR 0 5
58760: PUSH
58761: LD_INT 1
58763: ARRAY
58764: GREATEREQUAL
58765: PUSH
58766: LD_VAR 0 4
58770: PPUSH
58771: LD_INT 2
58773: PPUSH
58774: CALL_OW 275
58778: PUSH
58779: LD_VAR 0 5
58783: PUSH
58784: LD_INT 2
58786: ARRAY
58787: GREATEREQUAL
58788: AND
58789: PUSH
58790: LD_VAR 0 4
58794: PPUSH
58795: LD_INT 3
58797: PPUSH
58798: CALL_OW 275
58802: PUSH
58803: LD_VAR 0 5
58807: PUSH
58808: LD_INT 3
58810: ARRAY
58811: GREATEREQUAL
58812: AND
58813: ST_TO_ADDR
// end ;
58814: LD_VAR 0 3
58818: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58819: LD_INT 0
58821: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58822: LD_VAR 0 1
58826: PPUSH
58827: LD_VAR 0 2
58831: PPUSH
58832: LD_INT 0
58834: PPUSH
58835: LD_INT 0
58837: PPUSH
58838: LD_INT 1
58840: PPUSH
58841: LD_INT 0
58843: PPUSH
58844: CALL_OW 587
// end ;
58848: LD_VAR 0 3
58852: RET
// export function CenterOnNow ( unit ) ; begin
58853: LD_INT 0
58855: PPUSH
// result := IsInUnit ( unit ) ;
58856: LD_ADDR_VAR 0 2
58860: PUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: CALL_OW 310
58870: ST_TO_ADDR
// if not result then
58871: LD_VAR 0 2
58875: NOT
58876: IFFALSE 58888
// result := unit ;
58878: LD_ADDR_VAR 0 2
58882: PUSH
58883: LD_VAR 0 1
58887: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58888: LD_VAR 0 1
58892: PPUSH
58893: CALL_OW 87
// end ;
58897: LD_VAR 0 2
58901: RET
// export function ComMoveHex ( unit , hex ) ; begin
58902: LD_INT 0
58904: PPUSH
// if not hex then
58905: LD_VAR 0 2
58909: NOT
58910: IFFALSE 58914
// exit ;
58912: GO 58967
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58914: LD_VAR 0 2
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PPUSH
58923: LD_VAR 0 2
58927: PUSH
58928: LD_INT 2
58930: ARRAY
58931: PPUSH
58932: CALL_OW 428
58936: IFFALSE 58940
// exit ;
58938: GO 58967
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58940: LD_VAR 0 1
58944: PPUSH
58945: LD_VAR 0 2
58949: PUSH
58950: LD_INT 1
58952: ARRAY
58953: PPUSH
58954: LD_VAR 0 2
58958: PUSH
58959: LD_INT 2
58961: ARRAY
58962: PPUSH
58963: CALL_OW 111
// end ;
58967: LD_VAR 0 3
58971: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58972: LD_INT 0
58974: PPUSH
58975: PPUSH
58976: PPUSH
// if not unit or not enemy then
58977: LD_VAR 0 1
58981: NOT
58982: PUSH
58983: LD_VAR 0 2
58987: NOT
58988: OR
58989: IFFALSE 58993
// exit ;
58991: GO 59117
// x := GetX ( enemy ) ;
58993: LD_ADDR_VAR 0 4
58997: PUSH
58998: LD_VAR 0 2
59002: PPUSH
59003: CALL_OW 250
59007: ST_TO_ADDR
// y := GetY ( enemy ) ;
59008: LD_ADDR_VAR 0 5
59012: PUSH
59013: LD_VAR 0 2
59017: PPUSH
59018: CALL_OW 251
59022: ST_TO_ADDR
// if ValidHex ( x , y ) then
59023: LD_VAR 0 4
59027: PPUSH
59028: LD_VAR 0 5
59032: PPUSH
59033: CALL_OW 488
59037: IFFALSE 59117
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
59039: LD_VAR 0 2
59043: PPUSH
59044: CALL_OW 247
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: IN
59059: PUSH
59060: LD_VAR 0 1
59064: PPUSH
59065: CALL_OW 255
59069: PPUSH
59070: LD_VAR 0 2
59074: PPUSH
59075: CALL_OW 292
59079: OR
59080: IFFALSE 59098
// ComAttackUnit ( unit , enemy ) else
59082: LD_VAR 0 1
59086: PPUSH
59087: LD_VAR 0 2
59091: PPUSH
59092: CALL_OW 115
59096: GO 59117
// ComAgressiveMove ( unit , x , y ) ;
59098: LD_VAR 0 1
59102: PPUSH
59103: LD_VAR 0 4
59107: PPUSH
59108: LD_VAR 0 5
59112: PPUSH
59113: CALL_OW 114
// end ;
59117: LD_VAR 0 3
59121: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59122: LD_INT 0
59124: PPUSH
59125: PPUSH
59126: PPUSH
// list := AreaToList ( area , 0 ) ;
59127: LD_ADDR_VAR 0 5
59131: PUSH
59132: LD_VAR 0 1
59136: PPUSH
59137: LD_INT 0
59139: PPUSH
59140: CALL_OW 517
59144: ST_TO_ADDR
// if not list then
59145: LD_VAR 0 5
59149: NOT
59150: IFFALSE 59154
// exit ;
59152: GO 59284
// if all then
59154: LD_VAR 0 2
59158: IFFALSE 59246
// begin for i := 1 to list [ 1 ] do
59160: LD_ADDR_VAR 0 4
59164: PUSH
59165: DOUBLE
59166: LD_INT 1
59168: DEC
59169: ST_TO_ADDR
59170: LD_VAR 0 5
59174: PUSH
59175: LD_INT 1
59177: ARRAY
59178: PUSH
59179: FOR_TO
59180: IFFALSE 59242
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59182: LD_ADDR_VAR 0 3
59186: PUSH
59187: LD_VAR 0 3
59191: PPUSH
59192: LD_VAR 0 3
59196: PUSH
59197: LD_INT 1
59199: PLUS
59200: PPUSH
59201: LD_VAR 0 5
59205: PUSH
59206: LD_INT 1
59208: ARRAY
59209: PUSH
59210: LD_VAR 0 4
59214: ARRAY
59215: PUSH
59216: LD_VAR 0 5
59220: PUSH
59221: LD_INT 2
59223: ARRAY
59224: PUSH
59225: LD_VAR 0 4
59229: ARRAY
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PPUSH
59235: CALL_OW 1
59239: ST_TO_ADDR
59240: GO 59179
59242: POP
59243: POP
// exit ;
59244: GO 59284
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59246: LD_ADDR_VAR 0 3
59250: PUSH
59251: LD_VAR 0 5
59255: PUSH
59256: LD_INT 1
59258: ARRAY
59259: PUSH
59260: LD_INT 1
59262: ARRAY
59263: PUSH
59264: LD_VAR 0 5
59268: PUSH
59269: LD_INT 2
59271: ARRAY
59272: PUSH
59273: LD_INT 1
59275: ARRAY
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: EMPTY
59282: LIST
59283: ST_TO_ADDR
// end ;
59284: LD_VAR 0 3
59288: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59289: LD_INT 0
59291: PPUSH
59292: PPUSH
// list := AreaToList ( area , 0 ) ;
59293: LD_ADDR_VAR 0 4
59297: PUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: LD_INT 0
59305: PPUSH
59306: CALL_OW 517
59310: ST_TO_ADDR
// if not list then
59311: LD_VAR 0 4
59315: NOT
59316: IFFALSE 59320
// exit ;
59318: GO 59361
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59320: LD_ADDR_VAR 0 3
59324: PUSH
59325: LD_VAR 0 4
59329: PUSH
59330: LD_INT 1
59332: ARRAY
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: PUSH
59338: LD_VAR 0 4
59342: PUSH
59343: LD_INT 2
59345: ARRAY
59346: PUSH
59347: LD_INT 1
59349: ARRAY
59350: PUSH
59351: LD_VAR 0 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// end ;
59361: LD_VAR 0 3
59365: RET
// export function First ( array ) ; begin
59366: LD_INT 0
59368: PPUSH
// if not array then
59369: LD_VAR 0 1
59373: NOT
59374: IFFALSE 59378
// exit ;
59376: GO 59392
// result := array [ 1 ] ;
59378: LD_ADDR_VAR 0 2
59382: PUSH
59383: LD_VAR 0 1
59387: PUSH
59388: LD_INT 1
59390: ARRAY
59391: ST_TO_ADDR
// end ;
59392: LD_VAR 0 2
59396: RET
// export function Last ( array ) ; begin
59397: LD_INT 0
59399: PPUSH
// if not array then
59400: LD_VAR 0 1
59404: NOT
59405: IFFALSE 59409
// exit ;
59407: GO 59425
// result := array [ array ] ;
59409: LD_ADDR_VAR 0 2
59413: PUSH
59414: LD_VAR 0 1
59418: PUSH
59419: LD_VAR 0 1
59423: ARRAY
59424: ST_TO_ADDR
// end ;
59425: LD_VAR 0 2
59429: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59430: LD_INT 0
59432: PPUSH
59433: PPUSH
// result := [ ] ;
59434: LD_ADDR_VAR 0 5
59438: PUSH
59439: EMPTY
59440: ST_TO_ADDR
// if not array then
59441: LD_VAR 0 1
59445: NOT
59446: IFFALSE 59450
// exit ;
59448: GO 59562
// for i := 1 to array do
59450: LD_ADDR_VAR 0 6
59454: PUSH
59455: DOUBLE
59456: LD_INT 1
59458: DEC
59459: ST_TO_ADDR
59460: LD_VAR 0 1
59464: PUSH
59465: FOR_TO
59466: IFFALSE 59560
// if array [ i ] [ index ] = value then
59468: LD_VAR 0 1
59472: PUSH
59473: LD_VAR 0 6
59477: ARRAY
59478: PUSH
59479: LD_VAR 0 2
59483: ARRAY
59484: PUSH
59485: LD_VAR 0 3
59489: EQUAL
59490: IFFALSE 59558
// begin if indexColumn then
59492: LD_VAR 0 4
59496: IFFALSE 59532
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59498: LD_ADDR_VAR 0 5
59502: PUSH
59503: LD_VAR 0 5
59507: PPUSH
59508: LD_VAR 0 1
59512: PUSH
59513: LD_VAR 0 6
59517: ARRAY
59518: PUSH
59519: LD_VAR 0 4
59523: ARRAY
59524: PPUSH
59525: CALL 54744 0 2
59529: ST_TO_ADDR
59530: GO 59558
// result := Join ( result , array [ i ] ) ;
59532: LD_ADDR_VAR 0 5
59536: PUSH
59537: LD_VAR 0 5
59541: PPUSH
59542: LD_VAR 0 1
59546: PUSH
59547: LD_VAR 0 6
59551: ARRAY
59552: PPUSH
59553: CALL 54744 0 2
59557: ST_TO_ADDR
// end ;
59558: GO 59465
59560: POP
59561: POP
// end ;
59562: LD_VAR 0 5
59566: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59567: LD_INT 0
59569: PPUSH
// if not vehicles or not parkingPoint then
59570: LD_VAR 0 1
59574: NOT
59575: PUSH
59576: LD_VAR 0 2
59580: NOT
59581: OR
59582: IFFALSE 59586
// exit ;
59584: GO 59684
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59586: LD_ADDR_VAR 0 1
59590: PUSH
59591: LD_VAR 0 1
59595: PPUSH
59596: LD_INT 50
59598: PUSH
59599: EMPTY
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: LD_INT 92
59607: PUSH
59608: LD_VAR 0 2
59612: PUSH
59613: LD_INT 1
59615: ARRAY
59616: PUSH
59617: LD_VAR 0 2
59621: PUSH
59622: LD_INT 2
59624: ARRAY
59625: PUSH
59626: LD_INT 8
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PPUSH
59643: CALL_OW 72
59647: ST_TO_ADDR
// if not vehicles then
59648: LD_VAR 0 1
59652: NOT
59653: IFFALSE 59657
// exit ;
59655: GO 59684
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59657: LD_VAR 0 1
59661: PPUSH
59662: LD_VAR 0 2
59666: PUSH
59667: LD_INT 1
59669: ARRAY
59670: PPUSH
59671: LD_VAR 0 2
59675: PUSH
59676: LD_INT 2
59678: ARRAY
59679: PPUSH
59680: CALL_OW 111
// end ;
59684: LD_VAR 0 3
59688: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59689: LD_INT 0
59691: PPUSH
59692: PPUSH
59693: PPUSH
// if not side or not area then
59694: LD_VAR 0 1
59698: NOT
59699: PUSH
59700: LD_VAR 0 2
59704: NOT
59705: OR
59706: IFFALSE 59710
// exit ;
59708: GO 59829
// tmp := AreaToList ( area , 0 ) ;
59710: LD_ADDR_VAR 0 5
59714: PUSH
59715: LD_VAR 0 2
59719: PPUSH
59720: LD_INT 0
59722: PPUSH
59723: CALL_OW 517
59727: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59728: LD_ADDR_VAR 0 4
59732: PUSH
59733: DOUBLE
59734: LD_INT 1
59736: DEC
59737: ST_TO_ADDR
59738: LD_VAR 0 5
59742: PUSH
59743: LD_INT 1
59745: ARRAY
59746: PUSH
59747: FOR_TO
59748: IFFALSE 59827
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59750: LD_VAR 0 5
59754: PUSH
59755: LD_INT 1
59757: ARRAY
59758: PUSH
59759: LD_VAR 0 4
59763: ARRAY
59764: PPUSH
59765: LD_VAR 0 5
59769: PUSH
59770: LD_INT 2
59772: ARRAY
59773: PUSH
59774: LD_VAR 0 4
59778: ARRAY
59779: PPUSH
59780: CALL_OW 351
59784: IFFALSE 59825
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59786: LD_VAR 0 5
59790: PUSH
59791: LD_INT 1
59793: ARRAY
59794: PUSH
59795: LD_VAR 0 4
59799: ARRAY
59800: PPUSH
59801: LD_VAR 0 5
59805: PUSH
59806: LD_INT 2
59808: ARRAY
59809: PUSH
59810: LD_VAR 0 4
59814: ARRAY
59815: PPUSH
59816: LD_VAR 0 1
59820: PPUSH
59821: CALL_OW 244
// end ;
59825: GO 59747
59827: POP
59828: POP
// end ; end_of_file
59829: LD_VAR 0 3
59833: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59834: LD_INT 0
59836: PPUSH
// ComRadiation ( un ) ;
59837: LD_VAR 0 1
59841: PPUSH
59842: CALL 60873 0 1
// end ;
59846: LD_VAR 0 2
59850: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59851: LD_INT 0
59853: PPUSH
// ComRadiation ( un ) ;
59854: LD_VAR 0 1
59858: PPUSH
59859: CALL 60873 0 1
// end ;
59863: LD_VAR 0 2
59867: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59868: LD_INT 0
59870: PPUSH
// end ;
59871: LD_VAR 0 4
59875: RET
// export function SOS_Command ( cmd ) ; begin
59876: LD_INT 0
59878: PPUSH
// end ;
59879: LD_VAR 0 2
59883: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59884: LD_INT 0
59886: PPUSH
// end ;
59887: LD_VAR 0 6
59891: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
59892: LD_INT 0
59894: PPUSH
59895: PPUSH
59896: PPUSH
59897: PPUSH
// if not vehicle or not factory then
59898: LD_VAR 0 1
59902: NOT
59903: PUSH
59904: LD_VAR 0 2
59908: NOT
59909: OR
59910: IFFALSE 59914
// exit ;
59912: GO 60464
// if not factoryWaypoints then
59914: LD_EXP 64
59918: NOT
59919: IFFALSE 59923
// exit ;
59921: GO 60464
// for i := 1 to Count ( factoryWaypoints ) do
59923: LD_ADDR_VAR 0 4
59927: PUSH
59928: DOUBLE
59929: LD_INT 1
59931: DEC
59932: ST_TO_ADDR
59933: LD_EXP 64
59937: PPUSH
59938: CALL 19135 0 1
59942: PUSH
59943: FOR_TO
59944: IFFALSE 60462
// if factoryWaypoints [ i ] [ 2 ] = factory then
59946: LD_EXP 64
59950: PUSH
59951: LD_VAR 0 4
59955: ARRAY
59956: PUSH
59957: LD_INT 2
59959: ARRAY
59960: PUSH
59961: LD_VAR 0 2
59965: EQUAL
59966: IFFALSE 60460
// begin if GetControl ( vehicle ) = control_manual then
59968: LD_VAR 0 1
59972: PPUSH
59973: CALL_OW 263
59977: PUSH
59978: LD_INT 1
59980: EQUAL
59981: IFFALSE 60343
// begin driver := IsDrivenBy ( vehicle ) ;
59983: LD_ADDR_VAR 0 5
59987: PUSH
59988: LD_VAR 0 1
59992: PPUSH
59993: CALL_OW 311
59997: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59998: LD_VAR 0 5
60002: PUSH
60003: LD_EXP 65
60007: IN
60008: PUSH
60009: LD_VAR 0 1
60013: PUSH
60014: LD_EXP 65
60018: IN
60019: OR
60020: IFFALSE 60026
// exit ;
60022: POP
60023: POP
60024: GO 60464
// if not HasTask ( driver ) then
60026: LD_VAR 0 5
60030: PPUSH
60031: CALL_OW 314
60035: NOT
60036: IFFALSE 60341
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60038: LD_ADDR_EXP 65
60042: PUSH
60043: LD_EXP 65
60047: PPUSH
60048: LD_VAR 0 5
60052: PPUSH
60053: CALL 54744 0 2
60057: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60058: LD_ADDR_EXP 65
60062: PUSH
60063: LD_EXP 65
60067: PPUSH
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL 54744 0 2
60077: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60078: LD_ADDR_VAR 0 6
60082: PUSH
60083: LD_EXP 64
60087: PUSH
60088: LD_VAR 0 4
60092: ARRAY
60093: PUSH
60094: LD_INT 3
60096: ARRAY
60097: PPUSH
60098: LD_EXP 64
60102: PUSH
60103: LD_VAR 0 4
60107: ARRAY
60108: PUSH
60109: LD_INT 4
60111: ARRAY
60112: PPUSH
60113: CALL_OW 428
60117: ST_TO_ADDR
// if hex then
60118: LD_VAR 0 6
60122: IFFALSE 60140
// ComMoveUnit ( driver , hex ) else
60124: LD_VAR 0 5
60128: PPUSH
60129: LD_VAR 0 6
60133: PPUSH
60134: CALL_OW 112
60138: GO 60224
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60140: LD_VAR 0 1
60144: PPUSH
60145: LD_EXP 64
60149: PUSH
60150: LD_VAR 0 4
60154: ARRAY
60155: PUSH
60156: LD_INT 3
60158: ARRAY
60159: PPUSH
60160: LD_EXP 64
60164: PUSH
60165: LD_VAR 0 4
60169: ARRAY
60170: PUSH
60171: LD_INT 4
60173: ARRAY
60174: PPUSH
60175: CALL_OW 297
60179: PUSH
60180: LD_INT 0
60182: GREATER
60183: IFFALSE 60224
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60185: LD_VAR 0 5
60189: PPUSH
60190: LD_EXP 64
60194: PUSH
60195: LD_VAR 0 4
60199: ARRAY
60200: PUSH
60201: LD_INT 3
60203: ARRAY
60204: PPUSH
60205: LD_EXP 64
60209: PUSH
60210: LD_VAR 0 4
60214: ARRAY
60215: PUSH
60216: LD_INT 4
60218: ARRAY
60219: PPUSH
60220: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60224: LD_VAR 0 5
60228: PPUSH
60229: CALL_OW 181
// if Multiplayer then
60233: LD_OWVAR 4
60237: IFFALSE 60286
// begin repeat wait ( 10 ) ;
60239: LD_INT 10
60241: PPUSH
60242: CALL_OW 67
// until not IsInUnit ( driver ) ;
60246: LD_VAR 0 5
60250: PPUSH
60251: CALL_OW 310
60255: NOT
60256: IFFALSE 60239
// if not HasTask ( driver ) then
60258: LD_VAR 0 5
60262: PPUSH
60263: CALL_OW 314
60267: NOT
60268: IFFALSE 60284
// ComEnterUnit ( driver , factory ) ;
60270: LD_VAR 0 5
60274: PPUSH
60275: LD_VAR 0 2
60279: PPUSH
60280: CALL_OW 120
// end else
60284: GO 60300
// AddComEnterUnit ( driver , factory ) ;
60286: LD_VAR 0 5
60290: PPUSH
60291: LD_VAR 0 2
60295: PPUSH
60296: CALL_OW 180
// wait ( 0 0$1 ) ;
60300: LD_INT 35
60302: PPUSH
60303: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60307: LD_ADDR_EXP 65
60311: PUSH
60312: LD_EXP 65
60316: PUSH
60317: LD_VAR 0 5
60321: DIFF
60322: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60323: LD_ADDR_EXP 65
60327: PUSH
60328: LD_EXP 65
60332: PUSH
60333: LD_VAR 0 1
60337: DIFF
60338: ST_TO_ADDR
// break ;
60339: GO 60462
// end ; end else
60341: GO 60460
// if GetControl ( vehicle ) = control_remote then
60343: LD_VAR 0 1
60347: PPUSH
60348: CALL_OW 263
60352: PUSH
60353: LD_INT 2
60355: EQUAL
60356: IFFALSE 60419
// begin wait ( 0 0$2 ) ;
60358: LD_INT 70
60360: PPUSH
60361: CALL_OW 67
// if Connect ( vehicle ) then
60365: LD_VAR 0 1
60369: PPUSH
60370: CALL 25341 0 1
60374: IFFALSE 60415
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60376: LD_VAR 0 1
60380: PPUSH
60381: LD_EXP 64
60385: PUSH
60386: LD_VAR 0 4
60390: ARRAY
60391: PUSH
60392: LD_INT 3
60394: ARRAY
60395: PPUSH
60396: LD_EXP 64
60400: PUSH
60401: LD_VAR 0 4
60405: ARRAY
60406: PUSH
60407: LD_INT 4
60409: ARRAY
60410: PPUSH
60411: CALL_OW 111
// break ;
60415: GO 60462
// end else
60417: GO 60460
// begin ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60419: LD_VAR 0 1
60423: PPUSH
60424: LD_EXP 64
60428: PUSH
60429: LD_VAR 0 4
60433: ARRAY
60434: PUSH
60435: LD_INT 3
60437: ARRAY
60438: PPUSH
60439: LD_EXP 64
60443: PUSH
60444: LD_VAR 0 4
60448: ARRAY
60449: PUSH
60450: LD_INT 4
60452: ARRAY
60453: PPUSH
60454: CALL_OW 111
// break ;
60458: GO 60462
// end ; end ;
60460: GO 59943
60462: POP
60463: POP
// end ;
60464: LD_VAR 0 3
60468: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60469: LD_INT 0
60471: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60472: LD_VAR 0 1
60476: PUSH
60477: LD_INT 250
60479: EQUAL
60480: PUSH
60481: LD_VAR 0 2
60485: PPUSH
60486: CALL_OW 264
60490: PUSH
60491: LD_INT 81
60493: EQUAL
60494: AND
60495: IFFALSE 60516
// MinerPlaceMine ( unit , x , y ) ;
60497: LD_VAR 0 2
60501: PPUSH
60502: LD_VAR 0 4
60506: PPUSH
60507: LD_VAR 0 5
60511: PPUSH
60512: CALL 63608 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60516: LD_VAR 0 1
60520: PUSH
60521: LD_INT 251
60523: EQUAL
60524: PUSH
60525: LD_VAR 0 2
60529: PPUSH
60530: CALL_OW 264
60534: PUSH
60535: LD_INT 81
60537: EQUAL
60538: AND
60539: IFFALSE 60560
// MinerDetonateMine ( unit , x , y ) ;
60541: LD_VAR 0 2
60545: PPUSH
60546: LD_VAR 0 4
60550: PPUSH
60551: LD_VAR 0 5
60555: PPUSH
60556: CALL 63883 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60560: LD_VAR 0 1
60564: PUSH
60565: LD_INT 252
60567: EQUAL
60568: PUSH
60569: LD_VAR 0 2
60573: PPUSH
60574: CALL_OW 264
60578: PUSH
60579: LD_INT 81
60581: EQUAL
60582: AND
60583: IFFALSE 60604
// MinerCreateMinefield ( unit , x , y ) ;
60585: LD_VAR 0 2
60589: PPUSH
60590: LD_VAR 0 4
60594: PPUSH
60595: LD_VAR 0 5
60599: PPUSH
60600: CALL 64300 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60604: LD_VAR 0 1
60608: PUSH
60609: LD_INT 253
60611: EQUAL
60612: PUSH
60613: LD_VAR 0 2
60617: PPUSH
60618: CALL_OW 257
60622: PUSH
60623: LD_INT 5
60625: EQUAL
60626: AND
60627: IFFALSE 60648
// ComBinocular ( unit , x , y ) ;
60629: LD_VAR 0 2
60633: PPUSH
60634: LD_VAR 0 4
60638: PPUSH
60639: LD_VAR 0 5
60643: PPUSH
60644: CALL 64669 0 3
// if selectedUnit then
60648: LD_VAR 0 3
60652: IFFALSE 60708
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60654: LD_VAR 0 1
60658: PUSH
60659: LD_INT 254
60661: EQUAL
60662: PUSH
60663: LD_VAR 0 2
60667: PPUSH
60668: CALL_OW 264
60672: PUSH
60673: LD_INT 99
60675: EQUAL
60676: AND
60677: PUSH
60678: LD_VAR 0 3
60682: PPUSH
60683: CALL_OW 263
60687: PUSH
60688: LD_INT 3
60690: EQUAL
60691: AND
60692: IFFALSE 60708
// HackDestroyVehicle ( unit , selectedUnit ) ;
60694: LD_VAR 0 2
60698: PPUSH
60699: LD_VAR 0 3
60703: PPUSH
60704: CALL 62972 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60708: LD_VAR 0 1
60712: PUSH
60713: LD_INT 255
60715: EQUAL
60716: PUSH
60717: LD_VAR 0 2
60721: PPUSH
60722: CALL_OW 264
60726: PUSH
60727: LD_INT 14
60729: PUSH
60730: LD_INT 53
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: IN
60737: AND
60738: PUSH
60739: LD_VAR 0 4
60743: PPUSH
60744: LD_VAR 0 5
60748: PPUSH
60749: CALL_OW 488
60753: AND
60754: IFFALSE 60778
// CutTreeXYR ( unit , x , y , 12 ) ;
60756: LD_VAR 0 2
60760: PPUSH
60761: LD_VAR 0 4
60765: PPUSH
60766: LD_VAR 0 5
60770: PPUSH
60771: LD_INT 12
60773: PPUSH
60774: CALL 60969 0 4
// if cmd = 256 then
60778: LD_VAR 0 1
60782: PUSH
60783: LD_INT 256
60785: EQUAL
60786: IFFALSE 60807
// SetFactoryWaypoint ( unit , x , y ) ;
60788: LD_VAR 0 2
60792: PPUSH
60793: LD_VAR 0 4
60797: PPUSH
60798: LD_VAR 0 5
60802: PPUSH
60803: CALL 65435 0 3
// if cmd = 257 then
60807: LD_VAR 0 1
60811: PUSH
60812: LD_INT 257
60814: EQUAL
60815: IFFALSE 60836
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60817: LD_VAR 0 2
60821: PPUSH
60822: LD_VAR 0 4
60826: PPUSH
60827: LD_VAR 0 5
60831: PPUSH
60832: CALL 65925 0 3
// if cmd = 258 then
60836: LD_VAR 0 1
60840: PUSH
60841: LD_INT 258
60843: EQUAL
60844: IFFALSE 60868
// BurnTreeXYR ( unit , x , y , 8 ) ;
60846: LD_VAR 0 2
60850: PPUSH
60851: LD_VAR 0 4
60855: PPUSH
60856: LD_VAR 0 5
60860: PPUSH
60861: LD_INT 8
60863: PPUSH
60864: CALL 61363 0 4
// end ;
60868: LD_VAR 0 6
60872: RET
// export function ComRadiation ( un ) ; var eff ; begin
60873: LD_INT 0
60875: PPUSH
60876: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60877: LD_VAR 0 1
60881: PPUSH
60882: CALL_OW 264
60886: PUSH
60887: LD_INT 91
60889: NONEQUAL
60890: IFFALSE 60894
// exit ;
60892: GO 60964
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60894: LD_INT 68
60896: PPUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 255
60906: PPUSH
60907: CALL_OW 321
60911: PUSH
60912: LD_INT 2
60914: EQUAL
60915: IFFALSE 60927
// eff := 50 else
60917: LD_ADDR_VAR 0 3
60921: PUSH
60922: LD_INT 50
60924: ST_TO_ADDR
60925: GO 60935
// eff := 25 ;
60927: LD_ADDR_VAR 0 3
60931: PUSH
60932: LD_INT 25
60934: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60935: LD_VAR 0 1
60939: PPUSH
60940: CALL_OW 250
60944: PPUSH
60945: LD_VAR 0 1
60949: PPUSH
60950: CALL_OW 251
60954: PPUSH
60955: LD_VAR 0 3
60959: PPUSH
60960: CALL_OW 495
// end ;
60964: LD_VAR 0 2
60968: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60969: LD_INT 0
60971: PPUSH
60972: PPUSH
60973: PPUSH
60974: PPUSH
60975: PPUSH
60976: PPUSH
60977: PPUSH
60978: PPUSH
60979: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60980: LD_VAR 0 1
60984: PPUSH
60985: CALL_OW 302
60989: NOT
60990: PUSH
60991: LD_VAR 0 2
60995: PPUSH
60996: LD_VAR 0 3
61000: PPUSH
61001: CALL_OW 488
61005: NOT
61006: OR
61007: PUSH
61008: LD_VAR 0 4
61012: NOT
61013: OR
61014: IFFALSE 61018
// exit ;
61016: GO 61358
// list := [ ] ;
61018: LD_ADDR_VAR 0 13
61022: PUSH
61023: EMPTY
61024: ST_TO_ADDR
// if x - r < 0 then
61025: LD_VAR 0 2
61029: PUSH
61030: LD_VAR 0 4
61034: MINUS
61035: PUSH
61036: LD_INT 0
61038: LESS
61039: IFFALSE 61051
// min_x := 0 else
61041: LD_ADDR_VAR 0 7
61045: PUSH
61046: LD_INT 0
61048: ST_TO_ADDR
61049: GO 61067
// min_x := x - r ;
61051: LD_ADDR_VAR 0 7
61055: PUSH
61056: LD_VAR 0 2
61060: PUSH
61061: LD_VAR 0 4
61065: MINUS
61066: ST_TO_ADDR
// if y - r < 0 then
61067: LD_VAR 0 3
61071: PUSH
61072: LD_VAR 0 4
61076: MINUS
61077: PUSH
61078: LD_INT 0
61080: LESS
61081: IFFALSE 61093
// min_y := 0 else
61083: LD_ADDR_VAR 0 8
61087: PUSH
61088: LD_INT 0
61090: ST_TO_ADDR
61091: GO 61109
// min_y := y - r ;
61093: LD_ADDR_VAR 0 8
61097: PUSH
61098: LD_VAR 0 3
61102: PUSH
61103: LD_VAR 0 4
61107: MINUS
61108: ST_TO_ADDR
// max_x := x + r ;
61109: LD_ADDR_VAR 0 9
61113: PUSH
61114: LD_VAR 0 2
61118: PUSH
61119: LD_VAR 0 4
61123: PLUS
61124: ST_TO_ADDR
// max_y := y + r ;
61125: LD_ADDR_VAR 0 10
61129: PUSH
61130: LD_VAR 0 3
61134: PUSH
61135: LD_VAR 0 4
61139: PLUS
61140: ST_TO_ADDR
// for _x = min_x to max_x do
61141: LD_ADDR_VAR 0 11
61145: PUSH
61146: DOUBLE
61147: LD_VAR 0 7
61151: DEC
61152: ST_TO_ADDR
61153: LD_VAR 0 9
61157: PUSH
61158: FOR_TO
61159: IFFALSE 61276
// for _y = min_y to max_y do
61161: LD_ADDR_VAR 0 12
61165: PUSH
61166: DOUBLE
61167: LD_VAR 0 8
61171: DEC
61172: ST_TO_ADDR
61173: LD_VAR 0 10
61177: PUSH
61178: FOR_TO
61179: IFFALSE 61272
// begin if not ValidHex ( _x , _y ) then
61181: LD_VAR 0 11
61185: PPUSH
61186: LD_VAR 0 12
61190: PPUSH
61191: CALL_OW 488
61195: NOT
61196: IFFALSE 61200
// continue ;
61198: GO 61178
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61200: LD_VAR 0 11
61204: PPUSH
61205: LD_VAR 0 12
61209: PPUSH
61210: CALL_OW 351
61214: PUSH
61215: LD_VAR 0 11
61219: PPUSH
61220: LD_VAR 0 12
61224: PPUSH
61225: CALL_OW 554
61229: AND
61230: IFFALSE 61270
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61232: LD_ADDR_VAR 0 13
61236: PUSH
61237: LD_VAR 0 13
61241: PPUSH
61242: LD_VAR 0 13
61246: PUSH
61247: LD_INT 1
61249: PLUS
61250: PPUSH
61251: LD_VAR 0 11
61255: PUSH
61256: LD_VAR 0 12
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PPUSH
61265: CALL_OW 2
61269: ST_TO_ADDR
// end ;
61270: GO 61178
61272: POP
61273: POP
61274: GO 61158
61276: POP
61277: POP
// if not list then
61278: LD_VAR 0 13
61282: NOT
61283: IFFALSE 61287
// exit ;
61285: GO 61358
// for i in list do
61287: LD_ADDR_VAR 0 6
61291: PUSH
61292: LD_VAR 0 13
61296: PUSH
61297: FOR_IN
61298: IFFALSE 61356
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61300: LD_VAR 0 1
61304: PPUSH
61305: LD_STRING M
61307: PUSH
61308: LD_VAR 0 6
61312: PUSH
61313: LD_INT 1
61315: ARRAY
61316: PUSH
61317: LD_VAR 0 6
61321: PUSH
61322: LD_INT 2
61324: ARRAY
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: PPUSH
61350: CALL_OW 447
61354: GO 61297
61356: POP
61357: POP
// end ;
61358: LD_VAR 0 5
61362: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61363: LD_INT 0
61365: PPUSH
61366: PPUSH
61367: PPUSH
61368: PPUSH
61369: PPUSH
61370: PPUSH
61371: PPUSH
61372: PPUSH
61373: PPUSH
61374: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61375: LD_VAR 0 1
61379: PPUSH
61380: CALL_OW 302
61384: NOT
61385: PUSH
61386: LD_VAR 0 2
61390: PPUSH
61391: LD_VAR 0 3
61395: PPUSH
61396: CALL_OW 488
61400: NOT
61401: OR
61402: PUSH
61403: LD_VAR 0 4
61407: NOT
61408: OR
61409: IFFALSE 61413
// exit ;
61411: GO 61926
// list := [ ] ;
61413: LD_ADDR_VAR 0 13
61417: PUSH
61418: EMPTY
61419: ST_TO_ADDR
// if x - r < 0 then
61420: LD_VAR 0 2
61424: PUSH
61425: LD_VAR 0 4
61429: MINUS
61430: PUSH
61431: LD_INT 0
61433: LESS
61434: IFFALSE 61446
// min_x := 0 else
61436: LD_ADDR_VAR 0 7
61440: PUSH
61441: LD_INT 0
61443: ST_TO_ADDR
61444: GO 61462
// min_x := x - r ;
61446: LD_ADDR_VAR 0 7
61450: PUSH
61451: LD_VAR 0 2
61455: PUSH
61456: LD_VAR 0 4
61460: MINUS
61461: ST_TO_ADDR
// if y - r < 0 then
61462: LD_VAR 0 3
61466: PUSH
61467: LD_VAR 0 4
61471: MINUS
61472: PUSH
61473: LD_INT 0
61475: LESS
61476: IFFALSE 61488
// min_y := 0 else
61478: LD_ADDR_VAR 0 8
61482: PUSH
61483: LD_INT 0
61485: ST_TO_ADDR
61486: GO 61504
// min_y := y - r ;
61488: LD_ADDR_VAR 0 8
61492: PUSH
61493: LD_VAR 0 3
61497: PUSH
61498: LD_VAR 0 4
61502: MINUS
61503: ST_TO_ADDR
// max_x := x + r ;
61504: LD_ADDR_VAR 0 9
61508: PUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_VAR 0 4
61518: PLUS
61519: ST_TO_ADDR
// max_y := y + r ;
61520: LD_ADDR_VAR 0 10
61524: PUSH
61525: LD_VAR 0 3
61529: PUSH
61530: LD_VAR 0 4
61534: PLUS
61535: ST_TO_ADDR
// for _x = min_x to max_x do
61536: LD_ADDR_VAR 0 11
61540: PUSH
61541: DOUBLE
61542: LD_VAR 0 7
61546: DEC
61547: ST_TO_ADDR
61548: LD_VAR 0 9
61552: PUSH
61553: FOR_TO
61554: IFFALSE 61671
// for _y = min_y to max_y do
61556: LD_ADDR_VAR 0 12
61560: PUSH
61561: DOUBLE
61562: LD_VAR 0 8
61566: DEC
61567: ST_TO_ADDR
61568: LD_VAR 0 10
61572: PUSH
61573: FOR_TO
61574: IFFALSE 61667
// begin if not ValidHex ( _x , _y ) then
61576: LD_VAR 0 11
61580: PPUSH
61581: LD_VAR 0 12
61585: PPUSH
61586: CALL_OW 488
61590: NOT
61591: IFFALSE 61595
// continue ;
61593: GO 61573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61595: LD_VAR 0 11
61599: PPUSH
61600: LD_VAR 0 12
61604: PPUSH
61605: CALL_OW 351
61609: PUSH
61610: LD_VAR 0 11
61614: PPUSH
61615: LD_VAR 0 12
61619: PPUSH
61620: CALL_OW 554
61624: AND
61625: IFFALSE 61665
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61627: LD_ADDR_VAR 0 13
61631: PUSH
61632: LD_VAR 0 13
61636: PPUSH
61637: LD_VAR 0 13
61641: PUSH
61642: LD_INT 1
61644: PLUS
61645: PPUSH
61646: LD_VAR 0 11
61650: PUSH
61651: LD_VAR 0 12
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PPUSH
61660: CALL_OW 2
61664: ST_TO_ADDR
// end ;
61665: GO 61573
61667: POP
61668: POP
61669: GO 61553
61671: POP
61672: POP
// if not list then
61673: LD_VAR 0 13
61677: NOT
61678: IFFALSE 61682
// exit ;
61680: GO 61926
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61682: LD_ADDR_VAR 0 13
61686: PUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: LD_VAR 0 13
61696: PPUSH
61697: LD_INT 1
61699: PPUSH
61700: LD_INT 1
61702: PPUSH
61703: CALL 22483 0 4
61707: ST_TO_ADDR
// ComStop ( flame ) ;
61708: LD_VAR 0 1
61712: PPUSH
61713: CALL_OW 141
// for i in list do
61717: LD_ADDR_VAR 0 6
61721: PUSH
61722: LD_VAR 0 13
61726: PUSH
61727: FOR_IN
61728: IFFALSE 61759
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61730: LD_VAR 0 1
61734: PPUSH
61735: LD_VAR 0 6
61739: PUSH
61740: LD_INT 1
61742: ARRAY
61743: PPUSH
61744: LD_VAR 0 6
61748: PUSH
61749: LD_INT 2
61751: ARRAY
61752: PPUSH
61753: CALL_OW 176
61757: GO 61727
61759: POP
61760: POP
// repeat wait ( 0 0$1 ) ;
61761: LD_INT 35
61763: PPUSH
61764: CALL_OW 67
// task := GetTaskList ( flame ) ;
61768: LD_ADDR_VAR 0 14
61772: PUSH
61773: LD_VAR 0 1
61777: PPUSH
61778: CALL_OW 437
61782: ST_TO_ADDR
// if not task then
61783: LD_VAR 0 14
61787: NOT
61788: IFFALSE 61792
// exit ;
61790: GO 61926
// if task [ 1 ] [ 1 ] <> | then
61792: LD_VAR 0 14
61796: PUSH
61797: LD_INT 1
61799: ARRAY
61800: PUSH
61801: LD_INT 1
61803: ARRAY
61804: PUSH
61805: LD_STRING |
61807: NONEQUAL
61808: IFFALSE 61812
// exit ;
61810: GO 61926
// _x := task [ 1 ] [ 2 ] ;
61812: LD_ADDR_VAR 0 11
61816: PUSH
61817: LD_VAR 0 14
61821: PUSH
61822: LD_INT 1
61824: ARRAY
61825: PUSH
61826: LD_INT 2
61828: ARRAY
61829: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61830: LD_ADDR_VAR 0 12
61834: PUSH
61835: LD_VAR 0 14
61839: PUSH
61840: LD_INT 1
61842: ARRAY
61843: PUSH
61844: LD_INT 3
61846: ARRAY
61847: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61848: LD_VAR 0 11
61852: PPUSH
61853: LD_VAR 0 12
61857: PPUSH
61858: CALL_OW 351
61862: NOT
61863: PUSH
61864: LD_VAR 0 11
61868: PPUSH
61869: LD_VAR 0 12
61873: PPUSH
61874: CALL_OW 554
61878: NOT
61879: OR
61880: IFFALSE 61914
// begin task := Delete ( task , 1 ) ;
61882: LD_ADDR_VAR 0 14
61886: PUSH
61887: LD_VAR 0 14
61891: PPUSH
61892: LD_INT 1
61894: PPUSH
61895: CALL_OW 3
61899: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61900: LD_VAR 0 1
61904: PPUSH
61905: LD_VAR 0 14
61909: PPUSH
61910: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61914: LD_VAR 0 1
61918: PPUSH
61919: CALL_OW 314
61923: NOT
61924: IFFALSE 61761
// end ;
61926: LD_VAR 0 5
61930: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61931: LD_EXP 54
61935: NOT
61936: IFFALSE 61986
61938: GO 61940
61940: DISABLE
// begin initHack := true ;
61941: LD_ADDR_EXP 54
61945: PUSH
61946: LD_INT 1
61948: ST_TO_ADDR
// hackTanks := [ ] ;
61949: LD_ADDR_EXP 55
61953: PUSH
61954: EMPTY
61955: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61956: LD_ADDR_EXP 56
61960: PUSH
61961: EMPTY
61962: ST_TO_ADDR
// hackLimit := 3 ;
61963: LD_ADDR_EXP 57
61967: PUSH
61968: LD_INT 3
61970: ST_TO_ADDR
// hackDist := 12 ;
61971: LD_ADDR_EXP 58
61975: PUSH
61976: LD_INT 12
61978: ST_TO_ADDR
// hackCounter := [ ] ;
61979: LD_ADDR_EXP 59
61983: PUSH
61984: EMPTY
61985: ST_TO_ADDR
// end ;
61986: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61987: LD_EXP 54
61991: PUSH
61992: LD_INT 34
61994: PUSH
61995: LD_INT 99
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PPUSH
62002: CALL_OW 69
62006: AND
62007: IFFALSE 62260
62009: GO 62011
62011: DISABLE
62012: LD_INT 0
62014: PPUSH
62015: PPUSH
// begin enable ;
62016: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62017: LD_ADDR_VAR 0 1
62021: PUSH
62022: LD_INT 34
62024: PUSH
62025: LD_INT 99
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PPUSH
62032: CALL_OW 69
62036: PUSH
62037: FOR_IN
62038: IFFALSE 62258
// begin if not i in hackTanks then
62040: LD_VAR 0 1
62044: PUSH
62045: LD_EXP 55
62049: IN
62050: NOT
62051: IFFALSE 62134
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62053: LD_ADDR_EXP 55
62057: PUSH
62058: LD_EXP 55
62062: PPUSH
62063: LD_EXP 55
62067: PUSH
62068: LD_INT 1
62070: PLUS
62071: PPUSH
62072: LD_VAR 0 1
62076: PPUSH
62077: CALL_OW 1
62081: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62082: LD_ADDR_EXP 56
62086: PUSH
62087: LD_EXP 56
62091: PPUSH
62092: LD_EXP 56
62096: PUSH
62097: LD_INT 1
62099: PLUS
62100: PPUSH
62101: EMPTY
62102: PPUSH
62103: CALL_OW 1
62107: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62108: LD_ADDR_EXP 59
62112: PUSH
62113: LD_EXP 59
62117: PPUSH
62118: LD_EXP 59
62122: PUSH
62123: LD_INT 1
62125: PLUS
62126: PPUSH
62127: EMPTY
62128: PPUSH
62129: CALL_OW 1
62133: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62134: LD_VAR 0 1
62138: PPUSH
62139: CALL_OW 302
62143: NOT
62144: IFFALSE 62157
// begin HackUnlinkAll ( i ) ;
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL 62263 0 1
// continue ;
62155: GO 62037
// end ; HackCheckCapturedStatus ( i ) ;
62157: LD_VAR 0 1
62161: PPUSH
62162: CALL 62706 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62166: LD_ADDR_VAR 0 2
62170: PUSH
62171: LD_INT 81
62173: PUSH
62174: LD_VAR 0 1
62178: PPUSH
62179: CALL_OW 255
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 33
62190: PUSH
62191: LD_INT 3
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 91
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: LD_EXP 58
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 50
62218: PUSH
62219: EMPTY
62220: LIST
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: PPUSH
62228: CALL_OW 69
62232: ST_TO_ADDR
// if not tmp then
62233: LD_VAR 0 2
62237: NOT
62238: IFFALSE 62242
// continue ;
62240: GO 62037
// HackLink ( i , tmp ) ;
62242: LD_VAR 0 1
62246: PPUSH
62247: LD_VAR 0 2
62251: PPUSH
62252: CALL 62399 0 2
// end ;
62256: GO 62037
62258: POP
62259: POP
// end ;
62260: PPOPN 2
62262: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62263: LD_INT 0
62265: PPUSH
62266: PPUSH
62267: PPUSH
// if not hack in hackTanks then
62268: LD_VAR 0 1
62272: PUSH
62273: LD_EXP 55
62277: IN
62278: NOT
62279: IFFALSE 62283
// exit ;
62281: GO 62394
// index := GetElementIndex ( hackTanks , hack ) ;
62283: LD_ADDR_VAR 0 4
62287: PUSH
62288: LD_EXP 55
62292: PPUSH
62293: LD_VAR 0 1
62297: PPUSH
62298: CALL 21780 0 2
62302: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62303: LD_EXP 56
62307: PUSH
62308: LD_VAR 0 4
62312: ARRAY
62313: IFFALSE 62394
// begin for i in hackTanksCaptured [ index ] do
62315: LD_ADDR_VAR 0 3
62319: PUSH
62320: LD_EXP 56
62324: PUSH
62325: LD_VAR 0 4
62329: ARRAY
62330: PUSH
62331: FOR_IN
62332: IFFALSE 62358
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62334: LD_VAR 0 3
62338: PUSH
62339: LD_INT 1
62341: ARRAY
62342: PPUSH
62343: LD_VAR 0 3
62347: PUSH
62348: LD_INT 2
62350: ARRAY
62351: PPUSH
62352: CALL_OW 235
62356: GO 62331
62358: POP
62359: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62360: LD_ADDR_EXP 56
62364: PUSH
62365: LD_EXP 56
62369: PPUSH
62370: LD_VAR 0 4
62374: PPUSH
62375: EMPTY
62376: PPUSH
62377: CALL_OW 1
62381: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62382: LD_VAR 0 1
62386: PPUSH
62387: LD_INT 0
62389: PPUSH
62390: CALL_OW 505
// end ; end ;
62394: LD_VAR 0 2
62398: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62399: LD_INT 0
62401: PPUSH
62402: PPUSH
62403: PPUSH
// if not hack in hackTanks or not vehicles then
62404: LD_VAR 0 1
62408: PUSH
62409: LD_EXP 55
62413: IN
62414: NOT
62415: PUSH
62416: LD_VAR 0 2
62420: NOT
62421: OR
62422: IFFALSE 62426
// exit ;
62424: GO 62701
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62426: LD_ADDR_VAR 0 2
62430: PUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: LD_VAR 0 2
62440: PPUSH
62441: LD_INT 1
62443: PPUSH
62444: LD_INT 1
62446: PPUSH
62447: CALL 22430 0 4
62451: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62452: LD_ADDR_VAR 0 5
62456: PUSH
62457: LD_EXP 55
62461: PPUSH
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL 21780 0 2
62471: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62472: LD_EXP 56
62476: PUSH
62477: LD_VAR 0 5
62481: ARRAY
62482: PUSH
62483: LD_EXP 57
62487: LESS
62488: IFFALSE 62677
// begin for i := 1 to vehicles do
62490: LD_ADDR_VAR 0 4
62494: PUSH
62495: DOUBLE
62496: LD_INT 1
62498: DEC
62499: ST_TO_ADDR
62500: LD_VAR 0 2
62504: PUSH
62505: FOR_TO
62506: IFFALSE 62675
// begin if hackTanksCaptured [ index ] = hackLimit then
62508: LD_EXP 56
62512: PUSH
62513: LD_VAR 0 5
62517: ARRAY
62518: PUSH
62519: LD_EXP 57
62523: EQUAL
62524: IFFALSE 62528
// break ;
62526: GO 62675
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62528: LD_ADDR_EXP 59
62532: PUSH
62533: LD_EXP 59
62537: PPUSH
62538: LD_VAR 0 5
62542: PPUSH
62543: LD_EXP 59
62547: PUSH
62548: LD_VAR 0 5
62552: ARRAY
62553: PUSH
62554: LD_INT 1
62556: PLUS
62557: PPUSH
62558: CALL_OW 1
62562: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62563: LD_ADDR_EXP 56
62567: PUSH
62568: LD_EXP 56
62572: PPUSH
62573: LD_VAR 0 5
62577: PUSH
62578: LD_EXP 56
62582: PUSH
62583: LD_VAR 0 5
62587: ARRAY
62588: PUSH
62589: LD_INT 1
62591: PLUS
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PPUSH
62597: LD_VAR 0 2
62601: PUSH
62602: LD_VAR 0 4
62606: ARRAY
62607: PUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_VAR 0 4
62617: ARRAY
62618: PPUSH
62619: CALL_OW 255
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PPUSH
62628: CALL 21995 0 3
62632: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62633: LD_VAR 0 2
62637: PUSH
62638: LD_VAR 0 4
62642: ARRAY
62643: PPUSH
62644: LD_VAR 0 1
62648: PPUSH
62649: CALL_OW 255
62653: PPUSH
62654: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62658: LD_VAR 0 2
62662: PUSH
62663: LD_VAR 0 4
62667: ARRAY
62668: PPUSH
62669: CALL_OW 141
// end ;
62673: GO 62505
62675: POP
62676: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62677: LD_VAR 0 1
62681: PPUSH
62682: LD_EXP 56
62686: PUSH
62687: LD_VAR 0 5
62691: ARRAY
62692: PUSH
62693: LD_INT 0
62695: PLUS
62696: PPUSH
62697: CALL_OW 505
// end ;
62701: LD_VAR 0 3
62705: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62706: LD_INT 0
62708: PPUSH
62709: PPUSH
62710: PPUSH
62711: PPUSH
// if not hack in hackTanks then
62712: LD_VAR 0 1
62716: PUSH
62717: LD_EXP 55
62721: IN
62722: NOT
62723: IFFALSE 62727
// exit ;
62725: GO 62967
// index := GetElementIndex ( hackTanks , hack ) ;
62727: LD_ADDR_VAR 0 4
62731: PUSH
62732: LD_EXP 55
62736: PPUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: CALL 21780 0 2
62746: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62747: LD_ADDR_VAR 0 3
62751: PUSH
62752: DOUBLE
62753: LD_EXP 56
62757: PUSH
62758: LD_VAR 0 4
62762: ARRAY
62763: INC
62764: ST_TO_ADDR
62765: LD_INT 1
62767: PUSH
62768: FOR_DOWNTO
62769: IFFALSE 62941
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62771: LD_ADDR_VAR 0 5
62775: PUSH
62776: LD_EXP 56
62780: PUSH
62781: LD_VAR 0 4
62785: ARRAY
62786: PUSH
62787: LD_VAR 0 3
62791: ARRAY
62792: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62793: LD_VAR 0 5
62797: PUSH
62798: LD_INT 1
62800: ARRAY
62801: PPUSH
62802: CALL_OW 302
62806: NOT
62807: PUSH
62808: LD_VAR 0 5
62812: PUSH
62813: LD_INT 1
62815: ARRAY
62816: PPUSH
62817: CALL_OW 255
62821: PUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: CALL_OW 255
62831: NONEQUAL
62832: OR
62833: IFFALSE 62939
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62835: LD_VAR 0 5
62839: PUSH
62840: LD_INT 1
62842: ARRAY
62843: PPUSH
62844: CALL_OW 305
62848: PUSH
62849: LD_VAR 0 5
62853: PUSH
62854: LD_INT 1
62856: ARRAY
62857: PPUSH
62858: CALL_OW 255
62862: PUSH
62863: LD_VAR 0 1
62867: PPUSH
62868: CALL_OW 255
62872: EQUAL
62873: AND
62874: IFFALSE 62898
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62876: LD_VAR 0 5
62880: PUSH
62881: LD_INT 1
62883: ARRAY
62884: PPUSH
62885: LD_VAR 0 5
62889: PUSH
62890: LD_INT 2
62892: ARRAY
62893: PPUSH
62894: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62898: LD_ADDR_EXP 56
62902: PUSH
62903: LD_EXP 56
62907: PPUSH
62908: LD_VAR 0 4
62912: PPUSH
62913: LD_EXP 56
62917: PUSH
62918: LD_VAR 0 4
62922: ARRAY
62923: PPUSH
62924: LD_VAR 0 3
62928: PPUSH
62929: CALL_OW 3
62933: PPUSH
62934: CALL_OW 1
62938: ST_TO_ADDR
// end ; end ;
62939: GO 62768
62941: POP
62942: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_EXP 56
62952: PUSH
62953: LD_VAR 0 4
62957: ARRAY
62958: PUSH
62959: LD_INT 0
62961: PLUS
62962: PPUSH
62963: CALL_OW 505
// end ;
62967: LD_VAR 0 2
62971: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62972: LD_INT 0
62974: PPUSH
62975: PPUSH
62976: PPUSH
62977: PPUSH
// if not hack in hackTanks then
62978: LD_VAR 0 1
62982: PUSH
62983: LD_EXP 55
62987: IN
62988: NOT
62989: IFFALSE 62993
// exit ;
62991: GO 63078
// index := GetElementIndex ( hackTanks , hack ) ;
62993: LD_ADDR_VAR 0 5
62997: PUSH
62998: LD_EXP 55
63002: PPUSH
63003: LD_VAR 0 1
63007: PPUSH
63008: CALL 21780 0 2
63012: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63013: LD_ADDR_VAR 0 4
63017: PUSH
63018: DOUBLE
63019: LD_INT 1
63021: DEC
63022: ST_TO_ADDR
63023: LD_EXP 56
63027: PUSH
63028: LD_VAR 0 5
63032: ARRAY
63033: PUSH
63034: FOR_TO
63035: IFFALSE 63076
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63037: LD_EXP 56
63041: PUSH
63042: LD_VAR 0 5
63046: ARRAY
63047: PUSH
63048: LD_VAR 0 4
63052: ARRAY
63053: PUSH
63054: LD_INT 1
63056: ARRAY
63057: PUSH
63058: LD_VAR 0 2
63062: EQUAL
63063: IFFALSE 63074
// KillUnit ( vehicle ) ;
63065: LD_VAR 0 2
63069: PPUSH
63070: CALL_OW 66
63074: GO 63034
63076: POP
63077: POP
// end ;
63078: LD_VAR 0 3
63082: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
63083: LD_EXP 60
63087: NOT
63088: IFFALSE 63123
63090: GO 63092
63092: DISABLE
// begin initMiner := true ;
63093: LD_ADDR_EXP 60
63097: PUSH
63098: LD_INT 1
63100: ST_TO_ADDR
// minersList := [ ] ;
63101: LD_ADDR_EXP 61
63105: PUSH
63106: EMPTY
63107: ST_TO_ADDR
// minerMinesList := [ ] ;
63108: LD_ADDR_EXP 62
63112: PUSH
63113: EMPTY
63114: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
63115: LD_ADDR_EXP 63
63119: PUSH
63120: LD_INT 5
63122: ST_TO_ADDR
// end ;
63123: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
63124: LD_EXP 60
63128: PUSH
63129: LD_INT 34
63131: PUSH
63132: LD_INT 81
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PPUSH
63139: CALL_OW 69
63143: AND
63144: IFFALSE 63605
63146: GO 63148
63148: DISABLE
63149: LD_INT 0
63151: PPUSH
63152: PPUSH
63153: PPUSH
63154: PPUSH
// begin enable ;
63155: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63156: LD_ADDR_VAR 0 1
63160: PUSH
63161: LD_INT 34
63163: PUSH
63164: LD_INT 81
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PPUSH
63171: CALL_OW 69
63175: PUSH
63176: FOR_IN
63177: IFFALSE 63249
// begin if not i in minersList then
63179: LD_VAR 0 1
63183: PUSH
63184: LD_EXP 61
63188: IN
63189: NOT
63190: IFFALSE 63247
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63192: LD_ADDR_EXP 61
63196: PUSH
63197: LD_EXP 61
63201: PPUSH
63202: LD_EXP 61
63206: PUSH
63207: LD_INT 1
63209: PLUS
63210: PPUSH
63211: LD_VAR 0 1
63215: PPUSH
63216: CALL_OW 1
63220: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63221: LD_ADDR_EXP 62
63225: PUSH
63226: LD_EXP 62
63230: PPUSH
63231: LD_EXP 62
63235: PUSH
63236: LD_INT 1
63238: PLUS
63239: PPUSH
63240: EMPTY
63241: PPUSH
63242: CALL_OW 1
63246: ST_TO_ADDR
// end end ;
63247: GO 63176
63249: POP
63250: POP
// for i := minerMinesList downto 1 do
63251: LD_ADDR_VAR 0 1
63255: PUSH
63256: DOUBLE
63257: LD_EXP 62
63261: INC
63262: ST_TO_ADDR
63263: LD_INT 1
63265: PUSH
63266: FOR_DOWNTO
63267: IFFALSE 63603
// begin if IsLive ( minersList [ i ] ) then
63269: LD_EXP 61
63273: PUSH
63274: LD_VAR 0 1
63278: ARRAY
63279: PPUSH
63280: CALL_OW 300
63284: IFFALSE 63312
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63286: LD_EXP 61
63290: PUSH
63291: LD_VAR 0 1
63295: ARRAY
63296: PPUSH
63297: LD_EXP 62
63301: PUSH
63302: LD_VAR 0 1
63306: ARRAY
63307: PPUSH
63308: CALL_OW 505
// if not minerMinesList [ i ] then
63312: LD_EXP 62
63316: PUSH
63317: LD_VAR 0 1
63321: ARRAY
63322: NOT
63323: IFFALSE 63327
// continue ;
63325: GO 63266
// for j := minerMinesList [ i ] downto 1 do
63327: LD_ADDR_VAR 0 2
63331: PUSH
63332: DOUBLE
63333: LD_EXP 62
63337: PUSH
63338: LD_VAR 0 1
63342: ARRAY
63343: INC
63344: ST_TO_ADDR
63345: LD_INT 1
63347: PUSH
63348: FOR_DOWNTO
63349: IFFALSE 63599
// begin side := GetSide ( minersList [ i ] ) ;
63351: LD_ADDR_VAR 0 3
63355: PUSH
63356: LD_EXP 61
63360: PUSH
63361: LD_VAR 0 1
63365: ARRAY
63366: PPUSH
63367: CALL_OW 255
63371: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63372: LD_ADDR_VAR 0 4
63376: PUSH
63377: LD_EXP 62
63381: PUSH
63382: LD_VAR 0 1
63386: ARRAY
63387: PUSH
63388: LD_VAR 0 2
63392: ARRAY
63393: PUSH
63394: LD_INT 1
63396: ARRAY
63397: PPUSH
63398: LD_EXP 62
63402: PUSH
63403: LD_VAR 0 1
63407: ARRAY
63408: PUSH
63409: LD_VAR 0 2
63413: ARRAY
63414: PUSH
63415: LD_INT 2
63417: ARRAY
63418: PPUSH
63419: CALL_OW 428
63423: ST_TO_ADDR
// if not tmp then
63424: LD_VAR 0 4
63428: NOT
63429: IFFALSE 63433
// continue ;
63431: GO 63348
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63433: LD_VAR 0 4
63437: PUSH
63438: LD_INT 81
63440: PUSH
63441: LD_VAR 0 3
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PPUSH
63450: CALL_OW 69
63454: IN
63455: PUSH
63456: LD_EXP 62
63460: PUSH
63461: LD_VAR 0 1
63465: ARRAY
63466: PUSH
63467: LD_VAR 0 2
63471: ARRAY
63472: PUSH
63473: LD_INT 1
63475: ARRAY
63476: PPUSH
63477: LD_EXP 62
63481: PUSH
63482: LD_VAR 0 1
63486: ARRAY
63487: PUSH
63488: LD_VAR 0 2
63492: ARRAY
63493: PUSH
63494: LD_INT 2
63496: ARRAY
63497: PPUSH
63498: CALL_OW 458
63502: AND
63503: IFFALSE 63597
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63505: LD_EXP 62
63509: PUSH
63510: LD_VAR 0 1
63514: ARRAY
63515: PUSH
63516: LD_VAR 0 2
63520: ARRAY
63521: PUSH
63522: LD_INT 1
63524: ARRAY
63525: PPUSH
63526: LD_EXP 62
63530: PUSH
63531: LD_VAR 0 1
63535: ARRAY
63536: PUSH
63537: LD_VAR 0 2
63541: ARRAY
63542: PUSH
63543: LD_INT 2
63545: ARRAY
63546: PPUSH
63547: LD_VAR 0 3
63551: PPUSH
63552: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63556: LD_ADDR_EXP 62
63560: PUSH
63561: LD_EXP 62
63565: PPUSH
63566: LD_VAR 0 1
63570: PPUSH
63571: LD_EXP 62
63575: PUSH
63576: LD_VAR 0 1
63580: ARRAY
63581: PPUSH
63582: LD_VAR 0 2
63586: PPUSH
63587: CALL_OW 3
63591: PPUSH
63592: CALL_OW 1
63596: ST_TO_ADDR
// end ; end ;
63597: GO 63348
63599: POP
63600: POP
// end ;
63601: GO 63266
63603: POP
63604: POP
// end ;
63605: PPOPN 4
63607: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63608: LD_INT 0
63610: PPUSH
63611: PPUSH
// result := false ;
63612: LD_ADDR_VAR 0 4
63616: PUSH
63617: LD_INT 0
63619: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63620: LD_VAR 0 1
63624: PPUSH
63625: CALL_OW 264
63629: PUSH
63630: LD_INT 81
63632: EQUAL
63633: NOT
63634: IFFALSE 63638
// exit ;
63636: GO 63878
// index := GetElementIndex ( minersList , unit ) ;
63638: LD_ADDR_VAR 0 5
63642: PUSH
63643: LD_EXP 61
63647: PPUSH
63648: LD_VAR 0 1
63652: PPUSH
63653: CALL 21780 0 2
63657: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63658: LD_EXP 62
63662: PUSH
63663: LD_VAR 0 5
63667: ARRAY
63668: PUSH
63669: LD_EXP 63
63673: GREATEREQUAL
63674: IFFALSE 63678
// exit ;
63676: GO 63878
// ComMoveXY ( unit , x , y ) ;
63678: LD_VAR 0 1
63682: PPUSH
63683: LD_VAR 0 2
63687: PPUSH
63688: LD_VAR 0 3
63692: PPUSH
63693: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63697: LD_INT 35
63699: PPUSH
63700: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63704: LD_VAR 0 1
63708: PPUSH
63709: LD_VAR 0 2
63713: PPUSH
63714: LD_VAR 0 3
63718: PPUSH
63719: CALL 53541 0 3
63723: NOT
63724: PUSH
63725: LD_VAR 0 1
63729: PPUSH
63730: CALL_OW 314
63734: AND
63735: IFFALSE 63739
// exit ;
63737: GO 63878
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63739: LD_VAR 0 2
63743: PPUSH
63744: LD_VAR 0 3
63748: PPUSH
63749: CALL_OW 428
63753: PUSH
63754: LD_VAR 0 1
63758: EQUAL
63759: PUSH
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 314
63769: NOT
63770: AND
63771: IFFALSE 63697
// PlaySoundXY ( x , y , PlantMine ) ;
63773: LD_VAR 0 2
63777: PPUSH
63778: LD_VAR 0 3
63782: PPUSH
63783: LD_STRING PlantMine
63785: PPUSH
63786: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63790: LD_VAR 0 2
63794: PPUSH
63795: LD_VAR 0 3
63799: PPUSH
63800: LD_VAR 0 1
63804: PPUSH
63805: CALL_OW 255
63809: PPUSH
63810: LD_INT 0
63812: PPUSH
63813: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63817: LD_ADDR_EXP 62
63821: PUSH
63822: LD_EXP 62
63826: PPUSH
63827: LD_VAR 0 5
63831: PUSH
63832: LD_EXP 62
63836: PUSH
63837: LD_VAR 0 5
63841: ARRAY
63842: PUSH
63843: LD_INT 1
63845: PLUS
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PPUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_VAR 0 3
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PPUSH
63865: CALL 21995 0 3
63869: ST_TO_ADDR
// result := true ;
63870: LD_ADDR_VAR 0 4
63874: PUSH
63875: LD_INT 1
63877: ST_TO_ADDR
// end ;
63878: LD_VAR 0 4
63882: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63883: LD_INT 0
63885: PPUSH
63886: PPUSH
63887: PPUSH
// if not unit in minersList then
63888: LD_VAR 0 1
63892: PUSH
63893: LD_EXP 61
63897: IN
63898: NOT
63899: IFFALSE 63903
// exit ;
63901: GO 64295
// index := GetElementIndex ( minersList , unit ) ;
63903: LD_ADDR_VAR 0 6
63907: PUSH
63908: LD_EXP 61
63912: PPUSH
63913: LD_VAR 0 1
63917: PPUSH
63918: CALL 21780 0 2
63922: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63923: LD_ADDR_VAR 0 5
63927: PUSH
63928: DOUBLE
63929: LD_EXP 62
63933: PUSH
63934: LD_VAR 0 6
63938: ARRAY
63939: INC
63940: ST_TO_ADDR
63941: LD_INT 1
63943: PUSH
63944: FOR_DOWNTO
63945: IFFALSE 64106
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63947: LD_EXP 62
63951: PUSH
63952: LD_VAR 0 6
63956: ARRAY
63957: PUSH
63958: LD_VAR 0 5
63962: ARRAY
63963: PUSH
63964: LD_INT 1
63966: ARRAY
63967: PUSH
63968: LD_VAR 0 2
63972: EQUAL
63973: PUSH
63974: LD_EXP 62
63978: PUSH
63979: LD_VAR 0 6
63983: ARRAY
63984: PUSH
63985: LD_VAR 0 5
63989: ARRAY
63990: PUSH
63991: LD_INT 2
63993: ARRAY
63994: PUSH
63995: LD_VAR 0 3
63999: EQUAL
64000: AND
64001: IFFALSE 64104
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64003: LD_EXP 62
64007: PUSH
64008: LD_VAR 0 6
64012: ARRAY
64013: PUSH
64014: LD_VAR 0 5
64018: ARRAY
64019: PUSH
64020: LD_INT 1
64022: ARRAY
64023: PPUSH
64024: LD_EXP 62
64028: PUSH
64029: LD_VAR 0 6
64033: ARRAY
64034: PUSH
64035: LD_VAR 0 5
64039: ARRAY
64040: PUSH
64041: LD_INT 2
64043: ARRAY
64044: PPUSH
64045: LD_VAR 0 1
64049: PPUSH
64050: CALL_OW 255
64054: PPUSH
64055: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64059: LD_ADDR_EXP 62
64063: PUSH
64064: LD_EXP 62
64068: PPUSH
64069: LD_VAR 0 6
64073: PPUSH
64074: LD_EXP 62
64078: PUSH
64079: LD_VAR 0 6
64083: ARRAY
64084: PPUSH
64085: LD_VAR 0 5
64089: PPUSH
64090: CALL_OW 3
64094: PPUSH
64095: CALL_OW 1
64099: ST_TO_ADDR
// exit ;
64100: POP
64101: POP
64102: GO 64295
// end ; end ;
64104: GO 63944
64106: POP
64107: POP
// for i := minerMinesList [ index ] downto 1 do
64108: LD_ADDR_VAR 0 5
64112: PUSH
64113: DOUBLE
64114: LD_EXP 62
64118: PUSH
64119: LD_VAR 0 6
64123: ARRAY
64124: INC
64125: ST_TO_ADDR
64126: LD_INT 1
64128: PUSH
64129: FOR_DOWNTO
64130: IFFALSE 64293
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64132: LD_EXP 62
64136: PUSH
64137: LD_VAR 0 6
64141: ARRAY
64142: PUSH
64143: LD_VAR 0 5
64147: ARRAY
64148: PUSH
64149: LD_INT 1
64151: ARRAY
64152: PPUSH
64153: LD_EXP 62
64157: PUSH
64158: LD_VAR 0 6
64162: ARRAY
64163: PUSH
64164: LD_VAR 0 5
64168: ARRAY
64169: PUSH
64170: LD_INT 2
64172: ARRAY
64173: PPUSH
64174: LD_VAR 0 2
64178: PPUSH
64179: LD_VAR 0 3
64183: PPUSH
64184: CALL_OW 298
64188: PUSH
64189: LD_INT 6
64191: LESS
64192: IFFALSE 64291
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64194: LD_EXP 62
64198: PUSH
64199: LD_VAR 0 6
64203: ARRAY
64204: PUSH
64205: LD_VAR 0 5
64209: ARRAY
64210: PUSH
64211: LD_INT 1
64213: ARRAY
64214: PPUSH
64215: LD_EXP 62
64219: PUSH
64220: LD_VAR 0 6
64224: ARRAY
64225: PUSH
64226: LD_VAR 0 5
64230: ARRAY
64231: PUSH
64232: LD_INT 2
64234: ARRAY
64235: PPUSH
64236: LD_VAR 0 1
64240: PPUSH
64241: CALL_OW 255
64245: PPUSH
64246: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64250: LD_ADDR_EXP 62
64254: PUSH
64255: LD_EXP 62
64259: PPUSH
64260: LD_VAR 0 6
64264: PPUSH
64265: LD_EXP 62
64269: PUSH
64270: LD_VAR 0 6
64274: ARRAY
64275: PPUSH
64276: LD_VAR 0 5
64280: PPUSH
64281: CALL_OW 3
64285: PPUSH
64286: CALL_OW 1
64290: ST_TO_ADDR
// end ; end ;
64291: GO 64129
64293: POP
64294: POP
// end ;
64295: LD_VAR 0 4
64299: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64300: LD_INT 0
64302: PPUSH
64303: PPUSH
64304: PPUSH
64305: PPUSH
64306: PPUSH
64307: PPUSH
64308: PPUSH
64309: PPUSH
64310: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64311: LD_VAR 0 1
64315: PPUSH
64316: CALL_OW 264
64320: PUSH
64321: LD_INT 81
64323: EQUAL
64324: NOT
64325: PUSH
64326: LD_VAR 0 1
64330: PUSH
64331: LD_EXP 61
64335: IN
64336: NOT
64337: OR
64338: IFFALSE 64342
// exit ;
64340: GO 64664
// index := GetElementIndex ( minersList , unit ) ;
64342: LD_ADDR_VAR 0 6
64346: PUSH
64347: LD_EXP 61
64351: PPUSH
64352: LD_VAR 0 1
64356: PPUSH
64357: CALL 21780 0 2
64361: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64362: LD_ADDR_VAR 0 8
64366: PUSH
64367: LD_EXP 63
64371: PUSH
64372: LD_EXP 62
64376: PUSH
64377: LD_VAR 0 6
64381: ARRAY
64382: MINUS
64383: ST_TO_ADDR
// if not minesFreeAmount then
64384: LD_VAR 0 8
64388: NOT
64389: IFFALSE 64393
// exit ;
64391: GO 64664
// tmp := [ ] ;
64393: LD_ADDR_VAR 0 7
64397: PUSH
64398: EMPTY
64399: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64400: LD_ADDR_VAR 0 5
64404: PUSH
64405: DOUBLE
64406: LD_INT 1
64408: DEC
64409: ST_TO_ADDR
64410: LD_VAR 0 8
64414: PUSH
64415: FOR_TO
64416: IFFALSE 64611
// begin _d := rand ( 0 , 5 ) ;
64418: LD_ADDR_VAR 0 11
64422: PUSH
64423: LD_INT 0
64425: PPUSH
64426: LD_INT 5
64428: PPUSH
64429: CALL_OW 12
64433: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64434: LD_ADDR_VAR 0 12
64438: PUSH
64439: LD_INT 2
64441: PPUSH
64442: LD_INT 6
64444: PPUSH
64445: CALL_OW 12
64449: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64450: LD_ADDR_VAR 0 9
64454: PUSH
64455: LD_VAR 0 2
64459: PPUSH
64460: LD_VAR 0 11
64464: PPUSH
64465: LD_VAR 0 12
64469: PPUSH
64470: CALL_OW 272
64474: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64475: LD_ADDR_VAR 0 10
64479: PUSH
64480: LD_VAR 0 3
64484: PPUSH
64485: LD_VAR 0 11
64489: PPUSH
64490: LD_VAR 0 12
64494: PPUSH
64495: CALL_OW 273
64499: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64500: LD_VAR 0 9
64504: PPUSH
64505: LD_VAR 0 10
64509: PPUSH
64510: CALL_OW 488
64514: PUSH
64515: LD_VAR 0 9
64519: PUSH
64520: LD_VAR 0 10
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_VAR 0 7
64533: IN
64534: NOT
64535: AND
64536: PUSH
64537: LD_VAR 0 9
64541: PPUSH
64542: LD_VAR 0 10
64546: PPUSH
64547: CALL_OW 458
64551: NOT
64552: AND
64553: IFFALSE 64595
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64555: LD_ADDR_VAR 0 7
64559: PUSH
64560: LD_VAR 0 7
64564: PPUSH
64565: LD_VAR 0 7
64569: PUSH
64570: LD_INT 1
64572: PLUS
64573: PPUSH
64574: LD_VAR 0 9
64578: PUSH
64579: LD_VAR 0 10
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PPUSH
64588: CALL_OW 1
64592: ST_TO_ADDR
64593: GO 64609
// i := i - 1 ;
64595: LD_ADDR_VAR 0 5
64599: PUSH
64600: LD_VAR 0 5
64604: PUSH
64605: LD_INT 1
64607: MINUS
64608: ST_TO_ADDR
// end ;
64609: GO 64415
64611: POP
64612: POP
// for i in tmp do
64613: LD_ADDR_VAR 0 5
64617: PUSH
64618: LD_VAR 0 7
64622: PUSH
64623: FOR_IN
64624: IFFALSE 64662
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64626: LD_VAR 0 1
64630: PPUSH
64631: LD_VAR 0 5
64635: PUSH
64636: LD_INT 1
64638: ARRAY
64639: PPUSH
64640: LD_VAR 0 5
64644: PUSH
64645: LD_INT 2
64647: ARRAY
64648: PPUSH
64649: CALL 63608 0 3
64653: NOT
64654: IFFALSE 64660
// exit ;
64656: POP
64657: POP
64658: GO 64664
64660: GO 64623
64662: POP
64663: POP
// end ;
64664: LD_VAR 0 4
64668: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64669: LD_INT 0
64671: PPUSH
64672: PPUSH
64673: PPUSH
64674: PPUSH
64675: PPUSH
64676: PPUSH
64677: PPUSH
64678: PPUSH
64679: PPUSH
// if GetClass ( unit ) <> class_sniper then
64680: LD_VAR 0 1
64684: PPUSH
64685: CALL_OW 257
64689: PUSH
64690: LD_INT 5
64692: NONEQUAL
64693: IFFALSE 64697
// exit ;
64695: GO 65163
// dist := 8 ;
64697: LD_ADDR_VAR 0 5
64701: PUSH
64702: LD_INT 8
64704: ST_TO_ADDR
// viewRange := 12 ;
64705: LD_ADDR_VAR 0 8
64709: PUSH
64710: LD_INT 12
64712: ST_TO_ADDR
// side := GetSide ( unit ) ;
64713: LD_ADDR_VAR 0 6
64717: PUSH
64718: LD_VAR 0 1
64722: PPUSH
64723: CALL_OW 255
64727: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64728: LD_INT 61
64730: PPUSH
64731: LD_VAR 0 6
64735: PPUSH
64736: CALL_OW 321
64740: PUSH
64741: LD_INT 2
64743: EQUAL
64744: IFFALSE 64754
// viewRange := 16 ;
64746: LD_ADDR_VAR 0 8
64750: PUSH
64751: LD_INT 16
64753: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64754: LD_VAR 0 1
64758: PPUSH
64759: LD_VAR 0 2
64763: PPUSH
64764: LD_VAR 0 3
64768: PPUSH
64769: CALL_OW 297
64773: PUSH
64774: LD_VAR 0 5
64778: GREATER
64779: IFFALSE 64858
// begin ComMoveXY ( unit , x , y ) ;
64781: LD_VAR 0 1
64785: PPUSH
64786: LD_VAR 0 2
64790: PPUSH
64791: LD_VAR 0 3
64795: PPUSH
64796: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64800: LD_INT 35
64802: PPUSH
64803: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64807: LD_VAR 0 1
64811: PPUSH
64812: LD_VAR 0 2
64816: PPUSH
64817: LD_VAR 0 3
64821: PPUSH
64822: CALL 53541 0 3
64826: NOT
64827: IFFALSE 64831
// exit ;
64829: GO 65163
// until GetDistUnitXY ( unit , x , y ) < dist ;
64831: LD_VAR 0 1
64835: PPUSH
64836: LD_VAR 0 2
64840: PPUSH
64841: LD_VAR 0 3
64845: PPUSH
64846: CALL_OW 297
64850: PUSH
64851: LD_VAR 0 5
64855: LESS
64856: IFFALSE 64800
// end ; ComTurnXY ( unit , x , y ) ;
64858: LD_VAR 0 1
64862: PPUSH
64863: LD_VAR 0 2
64867: PPUSH
64868: LD_VAR 0 3
64872: PPUSH
64873: CALL_OW 118
// repeat if Multiplayer then
64877: LD_OWVAR 4
64881: IFFALSE 64892
// wait ( 35 ) else
64883: LD_INT 35
64885: PPUSH
64886: CALL_OW 67
64890: GO 64899
// wait ( 5 ) ;
64892: LD_INT 5
64894: PPUSH
64895: CALL_OW 67
// _d := GetDir ( unit ) ;
64899: LD_ADDR_VAR 0 11
64903: PUSH
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 254
64913: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64914: LD_ADDR_VAR 0 7
64918: PUSH
64919: LD_VAR 0 1
64923: PPUSH
64924: CALL_OW 250
64928: PPUSH
64929: LD_VAR 0 1
64933: PPUSH
64934: CALL_OW 251
64938: PPUSH
64939: LD_VAR 0 2
64943: PPUSH
64944: LD_VAR 0 3
64948: PPUSH
64949: CALL 56149 0 4
64953: ST_TO_ADDR
// until dir = _d ;
64954: LD_VAR 0 7
64958: PUSH
64959: LD_VAR 0 11
64963: EQUAL
64964: IFFALSE 64877
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64966: LD_ADDR_VAR 0 9
64970: PUSH
64971: LD_VAR 0 1
64975: PPUSH
64976: CALL_OW 250
64980: PPUSH
64981: LD_VAR 0 7
64985: PPUSH
64986: LD_VAR 0 5
64990: PPUSH
64991: CALL_OW 272
64995: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64996: LD_ADDR_VAR 0 10
65000: PUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 251
65010: PPUSH
65011: LD_VAR 0 7
65015: PPUSH
65016: LD_VAR 0 5
65020: PPUSH
65021: CALL_OW 273
65025: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65026: LD_VAR 0 9
65030: PPUSH
65031: LD_VAR 0 10
65035: PPUSH
65036: CALL_OW 488
65040: NOT
65041: IFFALSE 65045
// exit ;
65043: GO 65163
// ComAnimCustom ( unit , 1 ) ;
65045: LD_VAR 0 1
65049: PPUSH
65050: LD_INT 1
65052: PPUSH
65053: CALL_OW 592
// p := 0 ;
65057: LD_ADDR_VAR 0 12
65061: PUSH
65062: LD_INT 0
65064: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65065: LD_VAR 0 9
65069: PPUSH
65070: LD_VAR 0 10
65074: PPUSH
65075: LD_VAR 0 6
65079: PPUSH
65080: LD_VAR 0 8
65084: PPUSH
65085: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65089: LD_INT 35
65091: PPUSH
65092: CALL_OW 67
// p := Inc ( p ) ;
65096: LD_ADDR_VAR 0 12
65100: PUSH
65101: LD_VAR 0 12
65105: PPUSH
65106: CALL 56105 0 1
65110: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65111: LD_VAR 0 12
65115: PUSH
65116: LD_INT 3
65118: EQUAL
65119: PUSH
65120: LD_VAR 0 1
65124: PPUSH
65125: CALL_OW 302
65129: NOT
65130: OR
65131: PUSH
65132: LD_VAR 0 1
65136: PPUSH
65137: CALL_OW 301
65141: OR
65142: IFFALSE 65089
// RemoveSeeing ( _x , _y , side ) ;
65144: LD_VAR 0 9
65148: PPUSH
65149: LD_VAR 0 10
65153: PPUSH
65154: LD_VAR 0 6
65158: PPUSH
65159: CALL_OW 331
// end ; end_of_file
65163: LD_VAR 0 4
65167: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65168: LD_VAR 0 1
65172: PUSH
65173: LD_INT 200
65175: DOUBLE
65176: GREATEREQUAL
65177: IFFALSE 65185
65179: LD_INT 299
65181: DOUBLE
65182: LESSEQUAL
65183: IFTRUE 65187
65185: GO 65219
65187: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65188: LD_VAR 0 1
65192: PPUSH
65193: LD_VAR 0 2
65197: PPUSH
65198: LD_VAR 0 3
65202: PPUSH
65203: LD_VAR 0 4
65207: PPUSH
65208: LD_VAR 0 5
65212: PPUSH
65213: CALL 60469 0 5
65217: GO 65296
65219: LD_INT 300
65221: DOUBLE
65222: GREATEREQUAL
65223: IFFALSE 65231
65225: LD_INT 399
65227: DOUBLE
65228: LESSEQUAL
65229: IFTRUE 65233
65231: GO 65295
65233: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65234: LD_VAR 0 1
65238: PPUSH
65239: LD_VAR 0 2
65243: PPUSH
65244: LD_VAR 0 3
65248: PPUSH
65249: LD_VAR 0 4
65253: PPUSH
65254: LD_VAR 0 5
65258: PPUSH
65259: LD_VAR 0 6
65263: PPUSH
65264: LD_VAR 0 7
65268: PPUSH
65269: LD_VAR 0 8
65273: PPUSH
65274: LD_VAR 0 9
65278: PPUSH
65279: LD_VAR 0 10
65283: PPUSH
65284: LD_VAR 0 11
65288: PPUSH
65289: CALL 65427 0 11
65293: GO 65296
65295: POP
// end ;
65296: PPOPN 11
65298: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65299: LD_VAR 0 1
65303: PPUSH
65304: LD_VAR 0 2
65308: PPUSH
65309: LD_VAR 0 3
65313: PPUSH
65314: LD_VAR 0 4
65318: PPUSH
65319: LD_VAR 0 5
65323: PPUSH
65324: CALL 59884 0 5
// end ; end_of_file
65328: PPOPN 5
65330: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65331: PPOPN 6
65333: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65334: LD_EXP 30
65338: PUSH
65339: LD_INT 4
65341: EQUAL
65342: IFFALSE 65378
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65344: LD_STRING setGameDifficulty(
65346: PUSH
65347: LD_OWVAR 67
65351: STR
65352: PUSH
65353: LD_STRING )
65355: STR
65356: PPUSH
65357: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65361: LD_STRING displayDifficulty(
65363: PUSH
65364: LD_OWVAR 67
65368: STR
65369: PUSH
65370: LD_STRING )
65372: STR
65373: PPUSH
65374: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65378: CALL 65407 0 0
// end ; end_of_file
65382: PPOPN 1
65384: END
// every 0 0$1 do
65385: GO 65387
65387: DISABLE
// begin enable ;
65388: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65389: LD_STRING updateTimer(
65391: PUSH
65392: LD_OWVAR 1
65396: STR
65397: PUSH
65398: LD_STRING );
65400: STR
65401: PPUSH
65402: CALL_OW 559
// end ;
65406: END
// export function SOS_MapStart ( ) ; begin
65407: LD_INT 0
65409: PPUSH
// UpdateFactoryWaypoints ( ) ;
65410: CALL 65783 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65414: CALL 66035 0 0
// ParseMultiDataToLua ( ) ;
65418: CALL 66182 0 0
// end ;
65422: LD_VAR 0 1
65426: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65427: LD_INT 0
65429: PPUSH
// end ;
65430: LD_VAR 0 12
65434: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65435: LD_INT 0
65437: PPUSH
65438: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65439: LD_VAR 0 1
65443: NOT
65444: PUSH
65445: LD_VAR 0 2
65449: PPUSH
65450: LD_VAR 0 3
65454: PPUSH
65455: CALL_OW 488
65459: NOT
65460: OR
65461: PUSH
65462: LD_VAR 0 1
65466: PPUSH
65467: CALL_OW 266
65471: PUSH
65472: LD_INT 3
65474: NONEQUAL
65475: PUSH
65476: LD_VAR 0 1
65480: PPUSH
65481: CALL_OW 247
65485: PUSH
65486: LD_INT 1
65488: EQUAL
65489: NOT
65490: AND
65491: OR
65492: IFFALSE 65496
// exit ;
65494: GO 65778
// if GetType ( factory ) = unit_human then
65496: LD_VAR 0 1
65500: PPUSH
65501: CALL_OW 247
65505: PUSH
65506: LD_INT 1
65508: EQUAL
65509: IFFALSE 65526
// factory := IsInUnit ( factory ) ;
65511: LD_ADDR_VAR 0 1
65515: PUSH
65516: LD_VAR 0 1
65520: PPUSH
65521: CALL_OW 310
65525: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65526: LD_VAR 0 1
65530: PPUSH
65531: CALL_OW 266
65535: PUSH
65536: LD_INT 3
65538: NONEQUAL
65539: IFFALSE 65543
// exit ;
65541: GO 65778
// for i := 1 to Count ( factoryWaypoints ) do
65543: LD_ADDR_VAR 0 5
65547: PUSH
65548: DOUBLE
65549: LD_INT 1
65551: DEC
65552: ST_TO_ADDR
65553: LD_EXP 64
65557: PPUSH
65558: CALL 19135 0 1
65562: PUSH
65563: FOR_TO
65564: IFFALSE 65726
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65566: LD_VAR 0 2
65570: PPUSH
65571: LD_VAR 0 3
65575: PPUSH
65576: CALL_OW 428
65580: PUSH
65581: LD_EXP 64
65585: PUSH
65586: LD_VAR 0 5
65590: ARRAY
65591: PUSH
65592: LD_INT 2
65594: ARRAY
65595: EQUAL
65596: IFFALSE 65628
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65598: LD_ADDR_EXP 64
65602: PUSH
65603: LD_EXP 64
65607: PPUSH
65608: LD_VAR 0 5
65612: PPUSH
65613: CALL_OW 3
65617: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65618: CALL 65783 0 0
// exit ;
65622: POP
65623: POP
65624: GO 65778
// end else
65626: GO 65724
// if factory = factoryWaypoints [ i ] [ 2 ] then
65628: LD_VAR 0 1
65632: PUSH
65633: LD_EXP 64
65637: PUSH
65638: LD_VAR 0 5
65642: ARRAY
65643: PUSH
65644: LD_INT 2
65646: ARRAY
65647: EQUAL
65648: IFFALSE 65724
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65650: LD_ADDR_EXP 64
65654: PUSH
65655: LD_EXP 64
65659: PPUSH
65660: LD_VAR 0 5
65664: PPUSH
65665: CALL_OW 3
65669: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65670: LD_ADDR_EXP 64
65674: PUSH
65675: LD_EXP 64
65679: PPUSH
65680: LD_VAR 0 1
65684: PPUSH
65685: CALL_OW 255
65689: PUSH
65690: LD_VAR 0 1
65694: PUSH
65695: LD_VAR 0 2
65699: PUSH
65700: LD_VAR 0 3
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: PPUSH
65711: CALL 54744 0 2
65715: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65716: CALL 65783 0 0
// exit ;
65720: POP
65721: POP
65722: GO 65778
// end ; end ;
65724: GO 65563
65726: POP
65727: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65728: LD_ADDR_EXP 64
65732: PUSH
65733: LD_EXP 64
65737: PPUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: CALL_OW 255
65747: PUSH
65748: LD_VAR 0 1
65752: PUSH
65753: LD_VAR 0 2
65757: PUSH
65758: LD_VAR 0 3
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: PPUSH
65769: CALL 54744 0 2
65773: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65774: CALL 65783 0 0
// end ;
65778: LD_VAR 0 4
65782: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65783: LD_INT 0
65785: PPUSH
65786: PPUSH
65787: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65788: LD_STRING resetFactoryWaypoint();
65790: PPUSH
65791: CALL_OW 559
// if factoryWaypoints then
65795: LD_EXP 64
65799: IFFALSE 65920
// begin list := factoryWaypoints ;
65801: LD_ADDR_VAR 0 3
65805: PUSH
65806: LD_EXP 64
65810: ST_TO_ADDR
// for i := 1 to list do
65811: LD_ADDR_VAR 0 2
65815: PUSH
65816: DOUBLE
65817: LD_INT 1
65819: DEC
65820: ST_TO_ADDR
65821: LD_VAR 0 3
65825: PUSH
65826: FOR_TO
65827: IFFALSE 65918
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65829: LD_STRING setFactoryWaypointXY(
65831: PUSH
65832: LD_VAR 0 3
65836: PUSH
65837: LD_VAR 0 2
65841: ARRAY
65842: PUSH
65843: LD_INT 1
65845: ARRAY
65846: STR
65847: PUSH
65848: LD_STRING ,
65850: STR
65851: PUSH
65852: LD_VAR 0 3
65856: PUSH
65857: LD_VAR 0 2
65861: ARRAY
65862: PUSH
65863: LD_INT 2
65865: ARRAY
65866: STR
65867: PUSH
65868: LD_STRING ,
65870: STR
65871: PUSH
65872: LD_VAR 0 3
65876: PUSH
65877: LD_VAR 0 2
65881: ARRAY
65882: PUSH
65883: LD_INT 3
65885: ARRAY
65886: STR
65887: PUSH
65888: LD_STRING ,
65890: STR
65891: PUSH
65892: LD_VAR 0 3
65896: PUSH
65897: LD_VAR 0 2
65901: ARRAY
65902: PUSH
65903: LD_INT 4
65905: ARRAY
65906: STR
65907: PUSH
65908: LD_STRING )
65910: STR
65911: PPUSH
65912: CALL_OW 559
65916: GO 65826
65918: POP
65919: POP
// end ; end ;
65920: LD_VAR 0 1
65924: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65925: LD_INT 0
65927: PPUSH
// if HexInfo ( x , y ) = warehouse then
65928: LD_VAR 0 2
65932: PPUSH
65933: LD_VAR 0 3
65937: PPUSH
65938: CALL_OW 428
65942: PUSH
65943: LD_VAR 0 1
65947: EQUAL
65948: IFFALSE 65975
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65950: LD_ADDR_EXP 66
65954: PUSH
65955: LD_EXP 66
65959: PPUSH
65960: LD_VAR 0 1
65964: PPUSH
65965: LD_INT 0
65967: PPUSH
65968: CALL_OW 1
65972: ST_TO_ADDR
65973: GO 66026
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65975: LD_ADDR_EXP 66
65979: PUSH
65980: LD_EXP 66
65984: PPUSH
65985: LD_VAR 0 1
65989: PPUSH
65990: LD_VAR 0 1
65994: PPUSH
65995: CALL_OW 255
65999: PUSH
66000: LD_VAR 0 1
66004: PUSH
66005: LD_VAR 0 2
66009: PUSH
66010: LD_VAR 0 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: PPUSH
66021: CALL_OW 1
66025: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66026: CALL 66035 0 0
// end ;
66030: LD_VAR 0 4
66034: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66035: LD_INT 0
66037: PPUSH
66038: PPUSH
66039: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66040: LD_STRING resetWarehouseGatheringPoints();
66042: PPUSH
66043: CALL_OW 559
// if warehouseGatheringPoints then
66047: LD_EXP 66
66051: IFFALSE 66177
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66053: LD_ADDR_VAR 0 3
66057: PUSH
66058: LD_EXP 66
66062: PPUSH
66063: CALL 58512 0 1
66067: ST_TO_ADDR
// for i := 1 to list do
66068: LD_ADDR_VAR 0 2
66072: PUSH
66073: DOUBLE
66074: LD_INT 1
66076: DEC
66077: ST_TO_ADDR
66078: LD_VAR 0 3
66082: PUSH
66083: FOR_TO
66084: IFFALSE 66175
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66086: LD_STRING setWarehouseGatheringPointXY(
66088: PUSH
66089: LD_VAR 0 3
66093: PUSH
66094: LD_VAR 0 2
66098: ARRAY
66099: PUSH
66100: LD_INT 1
66102: ARRAY
66103: STR
66104: PUSH
66105: LD_STRING ,
66107: STR
66108: PUSH
66109: LD_VAR 0 3
66113: PUSH
66114: LD_VAR 0 2
66118: ARRAY
66119: PUSH
66120: LD_INT 2
66122: ARRAY
66123: STR
66124: PUSH
66125: LD_STRING ,
66127: STR
66128: PUSH
66129: LD_VAR 0 3
66133: PUSH
66134: LD_VAR 0 2
66138: ARRAY
66139: PUSH
66140: LD_INT 3
66142: ARRAY
66143: STR
66144: PUSH
66145: LD_STRING ,
66147: STR
66148: PUSH
66149: LD_VAR 0 3
66153: PUSH
66154: LD_VAR 0 2
66158: ARRAY
66159: PUSH
66160: LD_INT 4
66162: ARRAY
66163: STR
66164: PUSH
66165: LD_STRING )
66167: STR
66168: PPUSH
66169: CALL_OW 559
66173: GO 66083
66175: POP
66176: POP
// end ; end ;
66177: LD_VAR 0 1
66181: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
66182: LD_INT 0
66184: PPUSH
66185: PPUSH
// if not mpSidePositions then
66186: LD_EXP 31
66190: NOT
66191: IFFALSE 66195
// exit ;
66193: GO 66266
// result :=  ;
66195: LD_ADDR_VAR 0 1
66199: PUSH
66200: LD_STRING 
66202: ST_TO_ADDR
// for i := 1 to 8 do
66203: LD_ADDR_VAR 0 2
66207: PUSH
66208: DOUBLE
66209: LD_INT 1
66211: DEC
66212: ST_TO_ADDR
66213: LD_INT 8
66215: PUSH
66216: FOR_TO
66217: IFFALSE 66247
// begin result := result & mpSidePositions [ i ] & ; ;
66219: LD_ADDR_VAR 0 1
66223: PUSH
66224: LD_VAR 0 1
66228: PUSH
66229: LD_EXP 31
66233: PUSH
66234: LD_VAR 0 2
66238: ARRAY
66239: STR
66240: PUSH
66241: LD_STRING ;
66243: STR
66244: ST_TO_ADDR
// end ;
66245: GO 66216
66247: POP
66248: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
66249: LD_STRING setMultiplayerRealPosition("
66251: PUSH
66252: LD_VAR 0 1
66256: STR
66257: PUSH
66258: LD_STRING ");
66260: STR
66261: PPUSH
66262: CALL_OW 559
// end ;
66266: LD_VAR 0 1
66270: RET
