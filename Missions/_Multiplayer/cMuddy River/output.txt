// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1628 0 1
  44: PPUSH
  45: CALL 5211 0 1
// Multiplayer_Start ;
  49: CALL 3533 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3649 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4147 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// multi_settings_counter := 6 ;
 330: LD_ADDR_EXP 18
 334: PUSH
 335: LD_INT 6
 337: ST_TO_ADDR
// if Multiplayer then
 338: LD_OWVAR 4
 342: IFFALSE 522
// begin your_side := mp_player_side ;
 344: LD_ADDR_OWVAR 2
 348: PUSH
 349: LD_OWVAR 7
 353: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 354: LD_ADDR_EXP 6
 358: PUSH
 359: LD_OWVAR 6
 363: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 364: LD_ADDR_EXP 7
 368: PUSH
 369: LD_OWVAR 17
 373: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 374: LD_ADDR_EXP 8
 378: PUSH
 379: LD_OWVAR 15
 383: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 384: LD_ADDR_EXP 9
 388: PUSH
 389: LD_OWVAR 16
 393: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 394: LD_ADDR_EXP 10
 398: PUSH
 399: EMPTY
 400: PUSH
 401: EMPTY
 402: LIST
 403: ST_TO_ADDR
// for i in mp_teams do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: LD_OWVAR 12
 413: PUSH
 414: FOR_IN
 415: IFFALSE 458
// if i then
 417: LD_VAR 0 2
 421: IFFALSE 456
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 423: LD_ADDR_EXP 10
 427: PUSH
 428: LD_EXP 10
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_EXP 10
 440: PUSH
 441: LD_INT 1
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: UNION
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
 456: GO 414
 458: POP
 459: POP
// for i := 1 to multi_settings_counter do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_EXP 18
 474: PUSH
 475: FOR_TO
 476: IFFALSE 518
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 478: LD_ADDR_EXP 17
 482: PUSH
 483: LD_EXP 17
 487: PPUSH
 488: LD_EXP 17
 492: PUSH
 493: LD_INT 1
 495: PLUS
 496: PPUSH
 497: LD_VAR 0 2
 501: PPUSH
 502: CALL_OW 426
 506: PUSH
 507: LD_INT 1
 509: PLUS
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
 516: GO 475
 518: POP
 519: POP
// end else
 520: GO 704
// begin your_side := 1 ;
 522: LD_ADDR_OWVAR 2
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// multi_gametype := 1 ;
 530: LD_ADDR_EXP 6
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 538: LD_ADDR_EXP 7
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 655: LD_ADDR_EXP 10
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 673: LD_ADDR_EXP 17
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 14
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 782: LD_ADDR_EXP 25
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// multi_teamgame := true ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 829: LD_ADDR_EXP 13
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: ST_TO_ADDR
// multi_custom_commanders := true ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// multi_commanders := [ ] ;
 848: LD_ADDR_EXP 24
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 855: LD_ADDR_EXP 27
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 862: LD_ADDR_EXP 28
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// multi_players_amount := 0 ;
 870: LD_ADDR_EXP 26
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: LD_INT 8
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 27
 895: PUSH
 896: LD_INT 26
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 29
 905: PUSH
 906: LD_INT 28
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// for i := 1 to 8 do
 918: LD_ADDR_VAR 0 2
 922: PUSH
 923: DOUBLE
 924: LD_INT 1
 926: DEC
 927: ST_TO_ADDR
 928: LD_INT 8
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1261
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 530
 943: IFFALSE 1101
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 945: LD_ADDR_EXP 11
 949: PUSH
 950: LD_EXP 11
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 968: LD_ADDR_EXP 9
 972: PUSH
 973: LD_EXP 9
 977: PPUSH
 978: LD_VAR 0 2
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 1
 990: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 991: LD_ADDR_EXP 7
 995: PUSH
 996: LD_EXP 7
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// for j = 1 to multi_teams do
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: DOUBLE
1020: LD_INT 1
1022: DEC
1023: ST_TO_ADDR
1024: LD_EXP 10
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1099
// begin if i in multi_teams [ j ] then
1032: LD_VAR 0 2
1036: PUSH
1037: LD_EXP 10
1041: PUSH
1042: LD_VAR 0 3
1046: ARRAY
1047: IN
1048: IFFALSE 1097
// begin tmp := multi_teams [ j ] diff i ;
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PUSH
1066: LD_VAR 0 2
1070: DIFF
1071: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1072: LD_ADDR_EXP 10
1076: PUSH
1077: LD_EXP 10
1081: PPUSH
1082: LD_VAR 0 3
1086: PPUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// end ; end ;
1097: GO 1029
1099: POP
1100: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: PUSH
1112: LD_EXP 9
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: PUSH
1123: LD_EXP 13
1127: IN
1128: NOT
1129: AND
1130: IFFALSE 1171
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1132: LD_ADDR_EXP 9
1136: PUSH
1137: LD_EXP 9
1141: PPUSH
1142: LD_VAR 0 2
1146: PPUSH
1147: LD_EXP 13
1151: PUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_EXP 13
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: CALL_OW 1
1170: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1171: LD_EXP 9
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: NOT
1182: PUSH
1183: LD_EXP 7
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: NOT
1194: AND
1195: PUSH
1196: LD_EXP 11
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: NOT
1207: AND
1208: IFFALSE 1233
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1210: LD_ADDR_EXP 14
1214: PUSH
1215: LD_EXP 14
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 1
1232: ST_TO_ADDR
// if multi_sides [ i ] then
1233: LD_EXP 7
1237: PUSH
1238: LD_VAR 0 2
1242: ARRAY
1243: IFFALSE 1259
// multi_players_amount := multi_players_amount + 1 ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 26
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ST_TO_ADDR
// end ;
1259: GO 931
1261: POP
1262: POP
// for i in multi_teams do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: LD_EXP 10
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1382
// begin for j = 2 to i do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 2
1284: DEC
1285: ST_TO_ADDR
1286: LD_VAR 0 2
1290: PUSH
1291: FOR_TO
1292: IFFALSE 1378
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 3
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 343
// for x = 1 to j - 1 do
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_VAR 0 3
1332: PUSH
1333: LD_INT 1
1335: MINUS
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1374
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 80
1372: GO 1337
1374: POP
1375: POP
// end ;
1376: GO 1291
1378: POP
1379: POP
// end ;
1380: GO 1273
1382: POP
1383: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1384: LD_ADDR_OWVAR 67
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_EXP 17
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: ARRAY
1412: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1413: LD_ADDR_EXP 19
1417: PUSH
1418: LD_INT 9
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 18
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 17
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: ARRAY
1445: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_INT 5
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 8
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: LD_EXP 17
1473: PUSH
1474: LD_INT 3
1476: ARRAY
1477: ARRAY
1478: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$32 ] , [ 12000 , 0 0$22 ] , [ 14000 , 0 0$14 ] , [ 16000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1479: LD_ADDR_EXP 21
1483: PUSH
1484: LD_INT 9000
1486: PUSH
1487: LD_INT 1120
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 12000
1496: PUSH
1497: LD_INT 770
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14000
1506: PUSH
1507: LD_INT 490
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 16000
1516: PUSH
1517: LD_INT 420
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 17
1534: PUSH
1535: LD_INT 4
1537: ARRAY
1538: ARRAY
1539: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1540: LD_ADDR_EXP 22
1544: PUSH
1545: LD_INT 6
1547: PUSH
1548: LD_INT 8
1550: PUSH
1551: LD_INT 10
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 17
1563: PUSH
1564: LD_INT 5
1566: ARRAY
1567: ARRAY
1568: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1569: LD_ADDR_EXP 23
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_EXP 17
1592: PUSH
1593: LD_INT 6
1595: ARRAY
1596: ARRAY
1597: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1598: LD_ADDR_EXP 29
1602: PUSH
1603: LD_INT 31500
1605: PUSH
1606: LD_INT 37800
1608: PUSH
1609: LD_INT 44100
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_OWVAR 67
1621: ARRAY
1622: ST_TO_ADDR
// end ;
1623: LD_VAR 0 1
1627: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1628: LD_INT 0
1630: PPUSH
1631: PPUSH
// if not multi_sides [ 2 ] then
1632: LD_EXP 7
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: NOT
1641: IFFALSE 1655
// begin result := preferSide ;
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: LD_VAR 0 1
1652: ST_TO_ADDR
// exit ;
1653: GO 1702
// end ; for i := 1 to 8 do
1655: LD_ADDR_VAR 0 3
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_INT 8
1667: PUSH
1668: FOR_TO
1669: IFFALSE 1700
// if not multi_sides [ i ] then
1671: LD_EXP 7
1675: PUSH
1676: LD_VAR 0 3
1680: ARRAY
1681: NOT
1682: IFFALSE 1698
// begin result := i ;
1684: LD_ADDR_VAR 0 2
1688: PUSH
1689: LD_VAR 0 3
1693: ST_TO_ADDR
// exit ;
1694: POP
1695: POP
1696: GO 1702
// end ;
1698: GO 1668
1700: POP
1701: POP
// end ;
1702: LD_VAR 0 2
1706: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1707: LD_INT 0
1709: PPUSH
// uc_side := side ;
1710: LD_ADDR_OWVAR 20
1714: PUSH
1715: LD_VAR 0 1
1719: ST_TO_ADDR
// uc_nation := 1 ;
1720: LD_ADDR_OWVAR 21
1724: PUSH
1725: LD_INT 1
1727: ST_TO_ADDR
// hc_importance := 100 ;
1728: LD_ADDR_OWVAR 32
1732: PUSH
1733: LD_INT 100
1735: ST_TO_ADDR
// hc_class := 1 ;
1736: LD_ADDR_OWVAR 28
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if num = 1 then
1744: LD_VAR 0 2
1748: PUSH
1749: LD_INT 1
1751: EQUAL
1752: IFFALSE 1834
// begin hc_gallery := us ;
1754: LD_ADDR_OWVAR 33
1758: PUSH
1759: LD_STRING us
1761: ST_TO_ADDR
// hc_face_number := 5 ;
1762: LD_ADDR_OWVAR 34
1766: PUSH
1767: LD_INT 5
1769: ST_TO_ADDR
// hc_name := John Macmilan ;
1770: LD_ADDR_OWVAR 26
1774: PUSH
1775: LD_STRING John Macmilan
1777: ST_TO_ADDR
// hc_sex := sex_male ;
1778: LD_ADDR_OWVAR 27
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1786: LD_ADDR_OWVAR 31
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: LD_INT 4
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1809: LD_ADDR_OWVAR 29
1813: PUSH
1814: LD_INT 11
1816: PUSH
1817: LD_INT 10
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// result := CreateHuman ;
1824: LD_ADDR_VAR 0 3
1828: PUSH
1829: CALL_OW 44
1833: ST_TO_ADDR
// end ; if num = 2 then
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: EQUAL
1842: IFFALSE 1924
// begin hc_gallery := us ;
1844: LD_ADDR_OWVAR 33
1848: PUSH
1849: LD_STRING us
1851: ST_TO_ADDR
// hc_face_number := 2 ;
1852: LD_ADDR_OWVAR 34
1856: PUSH
1857: LD_INT 2
1859: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1860: LD_ADDR_OWVAR 26
1864: PUSH
1865: LD_STRING Lucy Donaldson
1867: ST_TO_ADDR
// hc_sex := sex_female ;
1868: LD_ADDR_OWVAR 27
1872: PUSH
1873: LD_INT 2
1875: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1876: LD_ADDR_OWVAR 31
1880: PUSH
1881: LD_INT 6
1883: PUSH
1884: LD_INT 3
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1899: LD_ADDR_OWVAR 29
1903: PUSH
1904: LD_INT 9
1906: PUSH
1907: LD_INT 12
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// result := CreateHuman ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: CALL_OW 44
1923: ST_TO_ADDR
// end ; if num = 3 then
1924: LD_VAR 0 2
1928: PUSH
1929: LD_INT 3
1931: EQUAL
1932: IFFALSE 2014
// begin hc_gallery := us ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING us
1941: ST_TO_ADDR
// hc_face_number := 7 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// hc_name := Arthur Powell ;
1950: LD_ADDR_OWVAR 26
1954: PUSH
1955: LD_STRING Arthur Powell
1957: ST_TO_ADDR
// hc_sex := sex_male ;
1958: LD_ADDR_OWVAR 27
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 5 , 2 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 2
1976: PUSH
1977: LD_INT 5
1979: PUSH
1980: LD_INT 2
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1989: LD_ADDR_OWVAR 29
1993: PUSH
1994: LD_INT 10
1996: PUSH
1997: LD_INT 11
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: ST_TO_ADDR
// result := CreateHuman ;
2004: LD_ADDR_VAR 0 3
2008: PUSH
2009: CALL_OW 44
2013: ST_TO_ADDR
// end ; end ;
2014: LD_VAR 0 3
2018: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2019: LD_INT 0
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
2027: PPUSH
2028: PPUSH
2029: PPUSH
// for i := 1 to 8 do
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: DOUBLE
2036: LD_INT 1
2038: DEC
2039: ST_TO_ADDR
2040: LD_INT 8
2042: PUSH
2043: FOR_TO
2044: IFFALSE 2934
// begin if not multi_sides [ i ] then
2046: LD_EXP 7
2050: PUSH
2051: LD_VAR 0 2
2055: ARRAY
2056: NOT
2057: IFFALSE 2061
// continue ;
2059: GO 2043
// if multi_custom_commanders then
2061: LD_EXP 16
2065: IFFALSE 2157
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2067: LD_ADDR_VAR 0 5
2071: PUSH
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_EXP 7
2081: PUSH
2082: LD_VAR 0 2
2086: ARRAY
2087: PPUSH
2088: CALL 1707 0 2
2092: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2093: LD_ADDR_EXP 24
2097: PUSH
2098: LD_EXP 24
2102: PPUSH
2103: LD_EXP 24
2107: PUSH
2108: LD_INT 1
2110: PLUS
2111: PPUSH
2112: LD_VAR 0 5
2116: PPUSH
2117: CALL_OW 2
2121: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2122: LD_VAR 0 5
2126: PPUSH
2127: LD_EXP 12
2131: PUSH
2132: LD_EXP 7
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: ARRAY
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end else
2155: GO 2368
// begin uc_side := i ;
2157: LD_ADDR_OWVAR 20
2161: PUSH
2162: LD_VAR 0 2
2166: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2167: LD_ADDR_OWVAR 21
2171: PUSH
2172: LD_EXP 9
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: ST_TO_ADDR
// hc_importance := 100 ;
2183: LD_ADDR_OWVAR 32
2187: PUSH
2188: LD_INT 100
2190: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2191: LD_INT 0
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_EXP 20
2201: PPUSH
2202: CALL_OW 380
// if multiplayer then
2206: LD_OWVAR 4
2210: IFFALSE 2268
// begin hc_name := mp_sides_players_names [ i ] ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_OWVAR 19
2221: PUSH
2222: LD_VAR 0 2
2226: ARRAY
2227: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2228: LD_ADDR_OWVAR 33
2232: PUSH
2233: LD_STRING MULTIAVATARS
2235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2236: LD_ADDR_OWVAR 34
2240: PUSH
2241: LD_VAR 0 2
2245: PPUSH
2246: CALL_OW 525
2250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2251: LD_ADDR_OWVAR 27
2255: PUSH
2256: LD_VAR 0 2
2260: PPUSH
2261: CALL_OW 526
2265: ST_TO_ADDR
// end else
2266: GO 2300
// begin hc_gallery :=  ;
2268: LD_ADDR_OWVAR 33
2272: PUSH
2273: LD_STRING 
2275: ST_TO_ADDR
// hc_name :=  ;
2276: LD_ADDR_OWVAR 26
2280: PUSH
2281: LD_STRING 
2283: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2284: LD_ADDR_OWVAR 27
2288: PUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: CALL_OW 12
2299: ST_TO_ADDR
// end ; un := CreateHuman ;
2300: LD_ADDR_VAR 0 5
2304: PUSH
2305: CALL_OW 44
2309: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2310: LD_VAR 0 5
2314: PPUSH
2315: LD_EXP 12
2319: PUSH
2320: LD_EXP 7
2324: PUSH
2325: LD_VAR 0 2
2329: ARRAY
2330: ARRAY
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2343: LD_ADDR_EXP 24
2347: PUSH
2348: LD_EXP 24
2352: PPUSH
2353: LD_VAR 0 2
2357: PPUSH
2358: LD_VAR 0 5
2362: PPUSH
2363: CALL_OW 1
2367: ST_TO_ADDR
// end ; InitHc ;
2368: CALL_OW 19
// InitUc ;
2372: CALL_OW 18
// uc_side := i ;
2376: LD_ADDR_OWVAR 20
2380: PUSH
2381: LD_VAR 0 2
2385: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2386: LD_ADDR_OWVAR 21
2390: PUSH
2391: LD_EXP 9
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: ST_TO_ADDR
// hc_gallery :=  ;
2402: LD_ADDR_OWVAR 33
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// hc_name :=  ;
2410: LD_ADDR_OWVAR 26
2414: PUSH
2415: LD_STRING 
2417: ST_TO_ADDR
// hc_importance := 0 ;
2418: LD_ADDR_OWVAR 32
2422: PUSH
2423: LD_INT 0
2425: ST_TO_ADDR
// cl := 1 ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 2
2442: DEC
2443: ST_TO_ADDR
2444: LD_EXP 19
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2822
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2452: LD_VAR 0 3
2456: PUSH
2457: LD_INT 1
2459: MINUS
2460: PUSH
2461: LD_EXP 19
2465: PUSH
2466: LD_INT 1
2468: MINUS
2469: PUSH
2470: LD_INT 4
2472: DIVREAL
2473: MOD
2474: PUSH
2475: LD_INT 0
2477: EQUAL
2478: IFFALSE 2494
// cl := cl + 1 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 4
2489: PUSH
2490: LD_INT 1
2492: PLUS
2493: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2494: LD_INT 0
2496: PPUSH
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_EXP 20
2506: PPUSH
2507: CALL_OW 380
// un := CreateHuman ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: CALL_OW 44
2520: ST_TO_ADDR
// if j > copy then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_VAR 0 8
2530: GREATER
2531: IFFALSE 2560
// copy := Replace ( copy , j , un ) else
2533: LD_ADDR_VAR 0 8
2537: PUSH
2538: LD_VAR 0 8
2542: PPUSH
2543: LD_VAR 0 3
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: CALL_OW 1
2557: ST_TO_ADDR
2558: GO 2642
// begin CopySkills ( copy [ j ] , un ) ;
2560: LD_VAR 0 8
2564: PUSH
2565: LD_VAR 0 3
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 5
2575: PPUSH
2576: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2580: LD_VAR 0 5
2584: PPUSH
2585: LD_INT 2
2587: PPUSH
2588: LD_VAR 0 8
2592: PUSH
2593: LD_VAR 0 3
2597: ARRAY
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 260
2606: PPUSH
2607: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2611: LD_VAR 0 5
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_VAR 0 8
2623: PUSH
2624: LD_VAR 0 3
2628: ARRAY
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: CALL_OW 260
2637: PPUSH
2638: CALL_OW 239
// end ; if multi_pos_area then
2642: LD_EXP 12
2646: IFFALSE 2820
// begin if GetClass ( un ) = 3 then
2648: LD_VAR 0 5
2652: PPUSH
2653: CALL_OW 257
2657: PUSH
2658: LD_INT 3
2660: EQUAL
2661: IFFALSE 2787
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2663: LD_INT 3
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 2
2680: MOD
2681: PUSH
2682: LD_INT 1
2684: PLUS
2685: ARRAY
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 3
2714: MOD
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ARRAY
2720: PPUSH
2721: LD_INT 100
2723: PPUSH
2724: CALL 21567 0 5
// veh := CreateVehicle ;
2728: LD_ADDR_VAR 0 6
2732: PUSH
2733: CALL_OW 45
2737: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2738: LD_VAR 0 6
2742: PPUSH
2743: LD_EXP 12
2747: PUSH
2748: LD_EXP 7
2752: PUSH
2753: LD_VAR 0 2
2757: ARRAY
2758: ARRAY
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_INT 0
2766: PPUSH
2767: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2771: LD_VAR 0 5
2775: PPUSH
2776: LD_VAR 0 6
2780: PPUSH
2781: CALL_OW 52
// continue ;
2785: GO 2449
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2787: LD_VAR 0 5
2791: PPUSH
2792: LD_EXP 12
2796: PUSH
2797: LD_EXP 7
2801: PUSH
2802: LD_VAR 0 2
2806: ARRAY
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 49
// end ; end ;
2820: GO 2449
2822: POP
2823: POP
// for j = 1 to 3 do
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2930
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2840: LD_INT 2
2842: PUSH
2843: LD_INT 3
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 12
2860: ARRAY
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: LD_INT 11
2870: PUSH
2871: LD_INT 7
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_VAR 0 3
2886: ARRAY
2887: PPUSH
2888: LD_INT 100
2890: PPUSH
2891: CALL 21567 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2895: CALL_OW 45
2899: PPUSH
2900: LD_EXP 12
2904: PUSH
2905: LD_EXP 7
2909: PUSH
2910: LD_VAR 0 2
2914: ARRAY
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 49
// end ;
2928: GO 2837
2930: POP
2931: POP
// end ;
2932: GO 2043
2934: POP
2935: POP
// end ;
2936: LD_VAR 0 1
2940: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2941: LD_INT 0
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
// if not multi_support then
2948: LD_EXP 23
2952: NOT
2953: IFFALSE 2957
// exit ;
2955: GO 3528
// result := [ ] ;
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// for i := 1 to 8 do
2964: LD_ADDR_VAR 0 2
2968: PUSH
2969: DOUBLE
2970: LD_INT 1
2972: DEC
2973: ST_TO_ADDR
2974: LD_INT 8
2976: PUSH
2977: FOR_TO
2978: IFFALSE 3526
// begin result := Replace ( result , i , [ ] ) ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: EMPTY
2996: PPUSH
2997: CALL_OW 1
3001: ST_TO_ADDR
// if multi_sides [ i ] then
3002: LD_EXP 7
3006: PUSH
3007: LD_VAR 0 2
3011: ARRAY
3012: IFFALSE 3524
// begin tmp := [ ] ;
3014: LD_ADDR_VAR 0 5
3018: PUSH
3019: EMPTY
3020: ST_TO_ADDR
// if multi_support = 1 then
3021: LD_EXP 23
3025: PUSH
3026: LD_INT 1
3028: EQUAL
3029: IFFALSE 3197
// begin uc_side := i ;
3031: LD_ADDR_OWVAR 20
3035: PUSH
3036: LD_VAR 0 2
3040: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3041: LD_ADDR_OWVAR 21
3045: PUSH
3046: LD_EXP 9
3050: PUSH
3051: LD_VAR 0 2
3055: ARRAY
3056: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3057: LD_INT 3
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 11
3068: PPUSH
3069: LD_INT 40
3071: PPUSH
3072: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3076: LD_ADDR_VAR 0 5
3080: PUSH
3081: LD_VAR 0 5
3085: PUSH
3086: CALL_OW 45
3090: ADD
3091: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3092: LD_INT 2
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_INT 40
3106: PPUSH
3107: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3111: LD_ADDR_VAR 0 5
3115: PUSH
3116: LD_VAR 0 5
3120: PUSH
3121: CALL_OW 45
3125: ADD
3126: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 40
3141: PPUSH
3142: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3146: LD_ADDR_VAR 0 5
3150: PUSH
3151: LD_VAR 0 5
3155: PUSH
3156: CALL_OW 45
3160: ADD
3161: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: LD_INT 3
3170: PPUSH
3171: LD_INT 9
3173: PPUSH
3174: LD_INT 40
3176: PPUSH
3177: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3181: LD_ADDR_VAR 0 5
3185: PUSH
3186: LD_VAR 0 5
3190: PUSH
3191: CALL_OW 45
3195: ADD
3196: ST_TO_ADDR
// end ; if multi_support = 2 then
3197: LD_EXP 23
3201: PUSH
3202: LD_INT 2
3204: EQUAL
3205: IFFALSE 3499
// begin uc_side := i ;
3207: LD_ADDR_OWVAR 20
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3217: LD_ADDR_OWVAR 21
3221: PUSH
3222: LD_EXP 9
3226: PUSH
3227: LD_VAR 0 2
3231: ARRAY
3232: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 11
3244: PPUSH
3245: LD_INT 40
3247: PPUSH
3248: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3252: LD_ADDR_VAR 0 5
3256: PUSH
3257: LD_VAR 0 5
3261: PUSH
3262: CALL_OW 45
3266: ADD
3267: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 3
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: LD_INT 12
3279: PPUSH
3280: LD_INT 40
3282: PPUSH
3283: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3287: LD_ADDR_VAR 0 5
3291: PUSH
3292: LD_VAR 0 5
3296: PUSH
3297: CALL_OW 45
3301: ADD
3302: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3303: LD_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: ARRAY
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3324: LD_INT 2
3326: PPUSH
3327: LD_INT 3
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: LD_INT 40
3338: PPUSH
3339: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 5
3352: PUSH
3353: CALL_OW 45
3357: ADD
3358: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3359: LD_INT 4
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: LD_INT 6
3370: PPUSH
3371: LD_INT 40
3373: PPUSH
3374: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_VAR 0 5
3387: PUSH
3388: CALL_OW 45
3392: ADD
3393: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3394: LD_INT 2
3396: PPUSH
3397: LD_INT 3
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: LD_INT 9
3405: PPUSH
3406: LD_INT 40
3408: PPUSH
3409: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3413: LD_ADDR_VAR 0 5
3417: PUSH
3418: LD_VAR 0 5
3422: PUSH
3423: CALL_OW 45
3427: ADD
3428: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 3
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 9
3440: PPUSH
3441: LD_INT 40
3443: PPUSH
3444: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3448: LD_ADDR_VAR 0 5
3452: PUSH
3453: LD_VAR 0 5
3457: PUSH
3458: CALL_OW 45
3462: ADD
3463: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3464: LD_INT 4
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 6
3475: PPUSH
3476: LD_INT 40
3478: PPUSH
3479: CALL 21567 0 5
// tmp := tmp ^ CreateVehicle ;
3483: LD_ADDR_VAR 0 5
3487: PUSH
3488: LD_VAR 0 5
3492: PUSH
3493: CALL_OW 45
3497: ADD
3498: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: LD_VAR 0 1
3508: PPUSH
3509: LD_VAR 0 2
3513: PPUSH
3514: LD_VAR 0 5
3518: PPUSH
3519: CALL_OW 1
3523: ST_TO_ADDR
// end ; end ;
3524: GO 2977
3526: POP
3527: POP
// end ;
3528: LD_VAR 0 1
3532: RET
// export function Multiplayer_Start ( ) ; begin
3533: LD_INT 0
3535: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3536: CALL 2019 0 0
// Multiplayer_InitPointSystem ( ) ;
3540: CALL 4236 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3544: LD_INT 20
3546: PPUSH
3547: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3551: LD_INT 150
3553: PPUSH
3554: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3558: LD_INT 5
3560: PPUSH
3561: CALL 4412 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3565: LD_INT 40
3567: NEG
3568: PPUSH
3569: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3573: LD_INT 200
3575: PPUSH
3576: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3580: LD_INT 2
3582: PPUSH
3583: CALL 4412 0 1
// Multiplayer_SpawnArtifact ;
3587: CALL 4852 0 0
// if multi_support then
3591: LD_EXP 23
3595: IFFALSE 3607
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3597: LD_ADDR_EXP 27
3601: PUSH
3602: CALL 2941 0 0
3606: ST_TO_ADDR
// if multi_sides [ your_side ] then
3607: LD_EXP 7
3611: PUSH
3612: LD_OWVAR 2
3616: ARRAY
3617: IFFALSE 3644
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3619: LD_INT 22
3621: PUSH
3622: LD_OWVAR 2
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PPUSH
3631: CALL_OW 69
3635: PUSH
3636: LD_INT 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 87
// end ;
3644: LD_VAR 0 1
3648: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
// reinforcements_arrive := 0 ;
3656: LD_ADDR_VAR 0 5
3660: PUSH
3661: LD_INT 0
3663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3671: LD_OWVAR 1
3675: PUSH
3676: LD_EXP 29
3680: GREATER
3681: PUSH
3682: LD_EXP 28
3686: NOT
3687: AND
3688: PUSH
3689: LD_EXP 23
3693: AND
3694: IFFALSE 3859
// begin multi_reinforcements_spawned := true ;
3696: LD_ADDR_EXP 28
3700: PUSH
3701: LD_INT 1
3703: ST_TO_ADDR
// for i := 1 to 8 do
3704: LD_ADDR_VAR 0 2
3708: PUSH
3709: DOUBLE
3710: LD_INT 1
3712: DEC
3713: ST_TO_ADDR
3714: LD_INT 8
3716: PUSH
3717: FOR_TO
3718: IFFALSE 3847
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3720: LD_EXP 7
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PUSH
3731: LD_EXP 25
3735: PUSH
3736: LD_VAR 0 2
3740: ARRAY
3741: NOT
3742: AND
3743: PUSH
3744: LD_EXP 27
3748: PUSH
3749: LD_VAR 0 2
3753: ARRAY
3754: AND
3755: IFFALSE 3845
// begin tmp := multi_reinforcements [ i ] ;
3757: LD_ADDR_VAR 0 4
3761: PUSH
3762: LD_EXP 27
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: ST_TO_ADDR
// for j in tmp do
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_VAR 0 4
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3821
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3786: LD_VAR 0 3
3790: PPUSH
3791: LD_EXP 12
3795: PUSH
3796: LD_EXP 7
3800: PUSH
3801: LD_VAR 0 2
3805: ARRAY
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PPUSH
3812: LD_INT 0
3814: PPUSH
3815: CALL_OW 49
3819: GO 3783
3821: POP
3822: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3823: LD_ADDR_EXP 27
3827: PUSH
3828: LD_EXP 27
3832: PPUSH
3833: LD_VAR 0 2
3837: PPUSH
3838: EMPTY
3839: PPUSH
3840: CALL_OW 1
3844: ST_TO_ADDR
// end ; end ;
3845: GO 3717
3847: POP
3848: POP
// reinforcements_arrive := tick ;
3849: LD_ADDR_VAR 0 5
3853: PUSH
3854: LD_OWVAR 1
3858: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3859: LD_EXP 16
3863: NOT
3864: IFFALSE 3977
// begin for i = 1 to 8 do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 8
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3951
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3882: LD_INT 22
3884: PUSH
3885: LD_VAR 0 2
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: PUSH
3899: LD_INT 0
3901: EQUAL
3902: PUSH
3903: LD_EXP 25
3907: PUSH
3908: LD_VAR 0 2
3912: ARRAY
3913: NOT
3914: AND
3915: IFFALSE 3949
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3917: LD_ADDR_EXP 25
3921: PUSH
3922: LD_EXP 25
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 1
3934: PPUSH
3935: CALL_OW 1
3939: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3940: LD_VAR 0 2
3944: PPUSH
3945: CALL 4482 0 1
// end ; end ;
3949: GO 3879
3951: POP
3952: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3953: LD_EXP 25
3957: PPUSH
3958: CALL 18829 0 1
3962: PUSH
3963: LD_EXP 7
3967: PPUSH
3968: CALL 18829 0 1
3972: EQUAL
3973: IFFALSE 3977
// break ;
3975: GO 4033
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
3977: LD_INT 22
3979: PUSH
3980: LD_EXP 3
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 21
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 50
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: PUSH
4015: LD_INT 0
4017: EQUAL
4018: PUSH
4019: LD_EXP 2
4023: AND
4024: PUSH
4025: LD_EXP 24
4029: NOT
4030: OR
4031: IFFALSE 3664
// game := false ;
4033: LD_ADDR_EXP 2
4037: PUSH
4038: LD_INT 0
4040: ST_TO_ADDR
// for i := 1 to 8 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 8
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4091
// begin if multi_sides [ i ] then
4057: LD_EXP 7
4061: PUSH
4062: LD_VAR 0 2
4066: ARRAY
4067: IFFALSE 4089
// SetMultiScore ( i , multi_points [ i ] ) ;
4069: LD_VAR 0 2
4073: PPUSH
4074: LD_EXP 30
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PPUSH
4085: CALL_OW 506
// end ;
4089: GO 4054
4091: POP
4092: POP
// if multi_loosers [ your_side ] then
4093: LD_EXP 25
4097: PUSH
4098: LD_OWVAR 2
4102: ARRAY
4103: IFFALSE 4126
// begin if Multiplayer then
4105: LD_OWVAR 4
4109: IFFALSE 4117
// YouLostInMultiplayer else
4111: CALL_OW 107
4115: GO 4124
// YouLost (  ) ;
4117: LD_STRING 
4119: PPUSH
4120: CALL_OW 104
// end else
4124: GO 4142
// begin if Multiplayer then
4126: LD_OWVAR 4
4130: IFFALSE 4138
// YouWinInMultiplayer else
4132: CALL_OW 106
4136: GO 4142
// YouWin ;
4138: CALL_OW 103
// end ; end ;
4142: LD_VAR 0 1
4146: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
// result := [ ] ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: EMPTY
4157: ST_TO_ADDR
// for i := 1 to 8 do
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: DOUBLE
4164: LD_INT 1
4166: DEC
4167: ST_TO_ADDR
4168: LD_INT 8
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4229
// begin if multi_sides [ i ] then
4174: LD_EXP 7
4178: PUSH
4179: LD_VAR 0 2
4183: ARRAY
4184: IFFALSE 4227
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4186: LD_ADDR_VAR 0 1
4190: PUSH
4191: LD_VAR 0 1
4195: PUSH
4196: LD_STRING #coop-points
4198: PUSH
4199: LD_VAR 0 2
4203: PUSH
4204: LD_VAR 0 2
4208: PUSH
4209: LD_EXP 30
4213: PUSH
4214: LD_VAR 0 2
4218: ARRAY
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ADD
4226: ST_TO_ADDR
// end ; end ;
4227: GO 4171
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 1
4235: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4240: LD_ADDR_EXP 30
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: LD_INT 0
4265: PUSH
4266: LD_INT 0
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4279: LD_ADDR_EXP 31
4283: PUSH
4284: EMPTY
4285: ST_TO_ADDR
// end ;
4286: LD_VAR 0 1
4290: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4291: LD_INT 0
4293: PPUSH
// if not multi_points or not side or side > 8 then
4294: LD_EXP 30
4298: NOT
4299: PUSH
4300: LD_VAR 0 1
4304: NOT
4305: OR
4306: PUSH
4307: LD_VAR 0 1
4311: PUSH
4312: LD_INT 8
4314: GREATER
4315: OR
4316: IFFALSE 4320
// exit ;
4318: GO 4357
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4320: LD_ADDR_EXP 30
4324: PUSH
4325: LD_EXP 30
4329: PPUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: LD_EXP 30
4339: PUSH
4340: LD_VAR 0 1
4344: ARRAY
4345: PUSH
4346: LD_VAR 0 2
4350: PLUS
4351: PPUSH
4352: CALL_OW 1
4356: ST_TO_ADDR
// end ;
4357: LD_VAR 0 3
4361: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4362: LD_INT 0
4364: PPUSH
// if not multi_points or not side or side > 8 then
4365: LD_EXP 30
4369: NOT
4370: PUSH
4371: LD_VAR 0 1
4375: NOT
4376: OR
4377: PUSH
4378: LD_VAR 0 1
4382: PUSH
4383: LD_INT 8
4385: GREATER
4386: OR
4387: IFFALSE 4391
// exit ;
4389: GO 4407
// result := multi_points [ side ] ;
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_EXP 30
4400: PUSH
4401: LD_VAR 0 1
4405: ARRAY
4406: ST_TO_ADDR
// end ;
4407: LD_VAR 0 2
4411: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4412: LD_INT 0
4414: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4415: LD_ADDR_EXP 31
4419: PUSH
4420: LD_EXP 31
4424: PPUSH
4425: LD_EXP 31
4429: PUSH
4430: LD_INT 1
4432: PLUS
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 1
4443: ST_TO_ADDR
// end ;
4444: LD_VAR 0 2
4448: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4449: LD_INT 0
4451: PPUSH
// if not id then
4452: LD_VAR 0 1
4456: NOT
4457: IFFALSE 4461
// exit ;
4459: GO 4477
// result := multi_points_conditions [ id ] ;
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_EXP 31
4470: PUSH
4471: LD_VAR 0 1
4475: ARRAY
4476: ST_TO_ADDR
// end ;
4477: LD_VAR 0 2
4481: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// players := [ ] ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: EMPTY
4495: ST_TO_ADDR
// for i = 1 to 8 do
4496: LD_ADDR_VAR 0 4
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_INT 8
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin if i = side then
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 1
4521: EQUAL
4522: IFFALSE 4526
// continue ;
4524: GO 4509
// if multi_sides [ i ] and not multi_loosers [ i ] then
4526: LD_EXP 7
4530: PUSH
4531: LD_VAR 0 4
4535: ARRAY
4536: PUSH
4537: LD_EXP 25
4541: PUSH
4542: LD_VAR 0 4
4546: ARRAY
4547: NOT
4548: AND
4549: IFFALSE 4567
// players := players ^ i ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: LD_VAR 0 3
4560: PUSH
4561: LD_VAR 0 4
4565: ADD
4566: ST_TO_ADDR
// end ;
4567: GO 4509
4569: POP
4570: POP
// if not players then
4571: LD_VAR 0 3
4575: NOT
4576: IFFALSE 4580
// exit ;
4578: GO 4847
// if players = 1 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 1
4587: EQUAL
4588: IFFALSE 4649
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4590: LD_ADDR_VAR 0 4
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_VAR 0 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 51
4609: PUSH
4610: EMPTY
4611: LIST
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 69
4621: PUSH
4622: FOR_IN
4623: IFFALSE 4645
// SetSide ( i , players [ 1 ] ) ;
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_VAR 0 3
4634: PUSH
4635: LD_INT 1
4637: ARRAY
4638: PPUSH
4639: CALL_OW 235
4643: GO 4622
4645: POP
4646: POP
// end else
4647: GO 4847
// begin j := 1 ;
4649: LD_ADDR_VAR 0 5
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 22
4664: PUSH
4665: LD_VAR 0 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 51
4689: PUSH
4690: EMPTY
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 2
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: PUSH
4721: FOR_IN
4722: IFFALSE 4845
// begin SetSide ( i , players [ j ] ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_VAR 0 3
4733: PUSH
4734: LD_VAR 0 5
4738: ARRAY
4739: PPUSH
4740: CALL_OW 235
// if IsDrivenBy ( i ) then
4744: LD_VAR 0 4
4748: PPUSH
4749: CALL_OW 311
4753: IFFALSE 4780
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: CALL_OW 311
4764: PPUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 5
4774: ARRAY
4775: PPUSH
4776: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4780: LD_VAR 0 4
4784: PPUSH
4785: CALL_OW 310
4789: PPUSH
4790: CALL_OW 247
4794: PUSH
4795: LD_INT 3
4797: EQUAL
4798: IFFALSE 4809
// ComExitBuilding ( i ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: CALL_OW 122
// j := j + 1 ;
4809: LD_ADDR_VAR 0 5
4813: PUSH
4814: LD_VAR 0 5
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: ST_TO_ADDR
// if j > players then
4823: LD_VAR 0 5
4827: PUSH
4828: LD_VAR 0 3
4832: GREATER
4833: IFFALSE 4843
// j := 1 ;
4835: LD_ADDR_VAR 0 5
4839: PUSH
4840: LD_INT 1
4842: ST_TO_ADDR
// end ;
4843: GO 4721
4845: POP
4846: POP
// end ; end ;
4847: LD_VAR 0 2
4851: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4852: LD_INT 0
4854: PPUSH
4855: PPUSH
4856: PPUSH
// i := 3 ;
4857: LD_ADDR_VAR 0 2
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 10
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 120
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 101
4892: PUSH
4893: LD_INT 8
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 27
4902: PUSH
4903: LD_INT 4
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4916: LD_INT 4
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_VAR 0 2
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 2
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: LD_INT 0
4954: PPUSH
4955: CALL_OW 58
// end ;
4959: LD_VAR 0 1
4963: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4964: LD_INT 0
4966: PPUSH
// if not side or side > 8 then
4967: LD_VAR 0 1
4971: NOT
4972: PUSH
4973: LD_VAR 0 1
4977: PUSH
4978: LD_INT 8
4980: GREATER
4981: OR
4982: IFFALSE 4986
// exit ;
4984: GO 5003
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4986: LD_VAR 0 1
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL 4449 0 1
4998: PPUSH
4999: CALL 4291 0 2
// end ;
5003: LD_VAR 0 2
5007: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5008: LD_INT 0
5010: PPUSH
// if not side or side > 8 then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 1
5021: PUSH
5022: LD_INT 8
5024: GREATER
5025: OR
5026: IFFALSE 5030
// exit ;
5028: GO 5047
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: CALL 4449 0 1
5042: PPUSH
5043: CALL 4291 0 2
// end ;
5047: LD_VAR 0 2
5051: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5052: LD_INT 0
5054: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5055: LD_VAR 0 1
5059: NOT
5060: PUSH
5061: LD_VAR 0 1
5065: PUSH
5066: LD_INT 8
5068: GREATER
5069: OR
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: LD_INT 6
5081: PUSH
5082: LD_INT 36
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: IN
5094: NOT
5095: OR
5096: IFFALSE 5100
// exit ;
5098: GO 5117
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL 4449 0 1
5112: PPUSH
5113: CALL 4291 0 2
// end ;
5117: LD_VAR 0 3
5121: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5122: LD_INT 0
5124: PPUSH
5125: PPUSH
// if not un then
5126: LD_VAR 0 1
5130: NOT
5131: IFFALSE 5135
// exit ;
5133: GO 5181
// if not points then
5135: LD_VAR 0 3
5139: NOT
5140: IFFALSE 5157
// gained_points := Multiplayer_GetCondition ( 1 ) else
5142: LD_ADDR_VAR 0 5
5146: PUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 4449 0 1
5154: ST_TO_ADDR
5155: GO 5167
// gained_points := points ;
5157: LD_ADDR_VAR 0 5
5161: PUSH
5162: LD_VAR 0 3
5166: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5167: LD_VAR 0 2
5171: PPUSH
5172: LD_VAR 0 5
5176: PPUSH
5177: CALL 4291 0 2
5181: LD_VAR 0 4
5185: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5186: LD_INT 0
5188: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_INT 2
5196: PPUSH
5197: CALL 4449 0 1
5201: PPUSH
5202: CALL 4291 0 2
// end ; end_of_file
5206: LD_VAR 0 2
5210: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5211: LD_INT 0
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
// side_bot := side ;
5223: LD_ADDR_EXP 3
5227: PUSH
5228: LD_VAR 0 1
5232: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5233: LD_ADDR_VAR 0 10
5237: PUSH
5238: LD_INT 11
5240: PUSH
5241: LD_INT 4
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 5
5249: PUSH
5250: LD_INT 66
5252: PUSH
5253: LD_INT 67
5255: PUSH
5256: LD_INT 53
5258: PUSH
5259: LD_INT 18
5261: PUSH
5262: LD_INT 40
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 72
5270: PUSH
5271: LD_INT 55
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// for i in techs do
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_VAR 0 10
5297: PUSH
5298: FOR_IN
5299: IFFALSE 5320
// SetTech ( i , side , state_researched ) ;
5301: LD_VAR 0 3
5305: PPUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_INT 2
5313: PPUSH
5314: CALL_OW 322
5318: GO 5298
5320: POP
5321: POP
// InitScriptBases ;
5322: CALL 7261 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5326: LD_ADDR_VAR 0 8
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 7
5336: PUSH
5337: LD_INT 10
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: LD_OWVAR 67
5349: ARRAY
5350: ST_TO_ADDR
// uc_side := side ;
5351: LD_ADDR_OWVAR 20
5355: PUSH
5356: LD_VAR 0 1
5360: ST_TO_ADDR
// uc_nation := 2 ;
5361: LD_ADDR_OWVAR 21
5365: PUSH
5366: LD_INT 2
5368: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5369: LD_ADDR_EXP 34
5373: PUSH
5374: LD_INT 94
5376: PPUSH
5377: LD_INT 35
5379: PPUSH
5380: LD_STRING dammam
5382: PPUSH
5383: LD_VAR 0 8
5387: PPUSH
5388: LD_INT 10000
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: LD_INT 900
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: PPUSH
5402: LD_INT 12
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: LD_INT 1
5410: NEG
5411: PUSH
5412: LD_INT 4
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL 25388 0 6
5425: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5426: LD_ADDR_EXP 35
5430: PUSH
5431: LD_INT 122
5433: PPUSH
5434: LD_INT 38
5436: PPUSH
5437: LD_STRING 
5439: PPUSH
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_INT 500
5447: PUSH
5448: LD_INT 130
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: LD_INT 16
5461: PUSH
5462: LD_INT 4
5464: PUSH
5465: LD_INT 3
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL 25388 0 6
5481: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5482: LD_ADDR_EXP 32
5486: PUSH
5487: LD_INT 45
5489: PPUSH
5490: LD_INT 34
5492: PPUSH
5493: LD_STRING jeddah
5495: PPUSH
5496: LD_VAR 0 8
5500: PPUSH
5501: LD_INT 2100
5503: PUSH
5504: LD_INT 300
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: LD_INT 12
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 3
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL 25388 0 6
5537: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5538: LD_ADDR_EXP 33
5542: PUSH
5543: LD_INT 7
5545: PPUSH
5546: LD_INT 33
5548: PPUSH
5549: LD_STRING riyadh
5551: PPUSH
5552: LD_VAR 0 8
5556: PPUSH
5557: LD_INT 500
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 8
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 1
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL 25388 0 6
5593: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5594: LD_ADDR_EXP 36
5598: PUSH
5599: LD_INT 69
5601: PPUSH
5602: LD_INT 36
5604: PPUSH
5605: LD_STRING 
5607: PPUSH
5608: LD_VAR 0 8
5612: PPUSH
5613: LD_INT 500
5615: PUSH
5616: LD_INT 50
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: PPUSH
5627: LD_INT 11
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 4
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL 25388 0 6
5649: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5650: LD_ADDR_OWVAR 37
5654: PUSH
5655: LD_INT 14
5657: ST_TO_ADDR
// vc_engine := engine_siberite ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 3
5665: ST_TO_ADDR
// vc_control := control_manual ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 31
5681: ST_TO_ADDR
// for i = 1 to 4 do
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: DOUBLE
5688: LD_INT 1
5690: DEC
5691: ST_TO_ADDR
5692: LD_INT 4
5694: PUSH
5695: FOR_TO
5696: IFFALSE 5845
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5698: LD_ADDR_VAR 0 5
5702: PUSH
5703: LD_INT 156
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 12
5715: PUSH
5716: LD_INT 7
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 2
5734: MOD
5735: PUSH
5736: LD_INT 1
5738: PLUS
5739: ARRAY
5740: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5741: LD_INT 0
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_VAR 0 8
5751: PPUSH
5752: CALL_OW 380
// un := CreateVehicle ;
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: CALL_OW 45
5765: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5766: LD_VAR 0 6
5770: PPUSH
5771: LD_INT 0
5773: PPUSH
5774: LD_INT 5
5776: PPUSH
5777: CALL_OW 12
5781: PPUSH
5782: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 5
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 5
5804: PUSH
5805: LD_INT 2
5807: ARRAY
5808: PPUSH
5809: LD_INT 6
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 50
// un2 := CreateHuman ;
5819: LD_ADDR_VAR 0 7
5823: PUSH
5824: CALL_OW 44
5828: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5829: LD_VAR 0 7
5833: PPUSH
5834: LD_VAR 0 6
5838: PPUSH
5839: CALL_OW 52
// end ;
5843: GO 5695
5845: POP
5846: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5847: LD_ADDR_VAR 0 3
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_EXP 3
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 58
5876: PUSH
5877: EMPTY
5878: LIST
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PUSH
5890: FOR_IN
5891: IFFALSE 6003
// begin d := GetDir ( i ) ;
5893: LD_ADDR_VAR 0 4
5897: PUSH
5898: LD_VAR 0 3
5902: PPUSH
5903: CALL_OW 254
5907: ST_TO_ADDR
// if d < 3 then
5908: LD_VAR 0 4
5912: PUSH
5913: LD_INT 3
5915: LESS
5916: IFFALSE 5934
// d := d + 3 else
5918: LD_ADDR_VAR 0 4
5922: PUSH
5923: LD_VAR 0 4
5927: PUSH
5928: LD_INT 3
5930: PLUS
5931: ST_TO_ADDR
5932: GO 5948
// d := d - 3 ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_VAR 0 4
5943: PUSH
5944: LD_INT 3
5946: MINUS
5947: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
5948: LD_INT 0
5950: PPUSH
5951: LD_INT 8
5953: PPUSH
5954: LD_VAR 0 8
5958: PPUSH
5959: CALL_OW 380
// un := CreateHuman ;
5963: LD_ADDR_VAR 0 6
5967: PUSH
5968: CALL_OW 44
5972: ST_TO_ADDR
// SetDir ( un , d ) ;
5973: LD_VAR 0 6
5977: PPUSH
5978: LD_VAR 0 4
5982: PPUSH
5983: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5987: LD_VAR 0 6
5991: PPUSH
5992: LD_VAR 0 3
5996: PPUSH
5997: CALL_OW 52
// end ;
6001: GO 5890
6003: POP
6004: POP
// ar_force_tmp := [ ] ;
6005: LD_ADDR_EXP 37
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_VAR 0 8
6022: PPUSH
6023: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6027: LD_ADDR_OWVAR 33
6031: PUSH
6032: LD_STRING SecondCharsGal
6034: ST_TO_ADDR
// hc_face_number := 4 ;
6035: LD_ADDR_OWVAR 34
6039: PUSH
6040: LD_INT 4
6042: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6043: LD_ADDR_EXP 37
6047: PUSH
6048: LD_EXP 37
6052: PPUSH
6053: LD_INT 1
6055: PPUSH
6056: CALL_OW 44
6060: PPUSH
6061: CALL_OW 1
6065: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6066: LD_INT 2
6068: PPUSH
6069: LD_INT 4
6071: PPUSH
6072: LD_VAR 0 8
6076: PPUSH
6077: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6081: LD_ADDR_OWVAR 33
6085: PUSH
6086: LD_STRING SecondCharsGal
6088: ST_TO_ADDR
// hc_face_number := 15 ;
6089: LD_ADDR_OWVAR 34
6093: PUSH
6094: LD_INT 15
6096: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6097: LD_ADDR_EXP 37
6101: PUSH
6102: LD_EXP 37
6106: PPUSH
6107: LD_INT 2
6109: PPUSH
6110: CALL_OW 44
6114: PPUSH
6115: CALL_OW 1
6119: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6120: LD_INT 2
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: LD_VAR 0 8
6130: PPUSH
6131: CALL_OW 380
// hc_gallery :=  ;
6135: LD_ADDR_OWVAR 33
6139: PUSH
6140: LD_STRING 
6142: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6143: LD_ADDR_EXP 37
6147: PUSH
6148: LD_EXP 37
6152: PPUSH
6153: LD_INT 3
6155: PPUSH
6156: CALL_OW 44
6160: PPUSH
6161: CALL_OW 1
6165: ST_TO_ADDR
// hc_sex := sex_male ;
6166: LD_ADDR_OWVAR 27
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// hc_class = 11 ;
6174: LD_ADDR_OWVAR 28
6178: PUSH
6179: LD_INT 11
6181: ST_TO_ADDR
// hc_gallery = sandar ;
6182: LD_ADDR_OWVAR 33
6186: PUSH
6187: LD_STRING sandar
6189: ST_TO_ADDR
// hc_face_number = 33 ;
6190: LD_ADDR_OWVAR 34
6194: PUSH
6195: LD_INT 33
6197: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6198: LD_ADDR_OWVAR 26
6202: PUSH
6203: LD_STRING Thabit Muhair Saliba
6205: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6206: LD_ADDR_OWVAR 31
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 5
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: ST_TO_ADDR
// Saliba := CreateHuman ;
6229: LD_ADDR_EXP 39
6233: PUSH
6234: CALL_OW 44
6238: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6239: LD_EXP 39
6243: PPUSH
6244: LD_INT 7
6246: PPUSH
6247: CALL_OW 52
// hc_name := Dietrich Gensher ;
6251: LD_ADDR_OWVAR 26
6255: PUSH
6256: LD_STRING Dietrich Gensher
6258: ST_TO_ADDR
// hc_class := 1 ;
6259: LD_ADDR_OWVAR 28
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// hc_gallery := sandar ;
6267: LD_ADDR_OWVAR 33
6271: PUSH
6272: LD_STRING sandar
6274: ST_TO_ADDR
// hc_face_number := 4 ;
6275: LD_ADDR_OWVAR 34
6279: PUSH
6280: LD_INT 4
6282: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6283: LD_ADDR_OWVAR 31
6287: PUSH
6288: LD_INT 10
6290: PUSH
6291: LD_INT 6
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// Gensher := CreateHuman ;
6306: LD_ADDR_EXP 40
6310: PUSH
6311: CALL_OW 44
6315: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6316: LD_EXP 40
6320: PPUSH
6321: LD_INT 45
6323: PPUSH
6324: CALL_OW 52
// hc_name := Abdul Shariff ;
6328: LD_ADDR_OWVAR 26
6332: PUSH
6333: LD_STRING Abdul Shariff
6335: ST_TO_ADDR
// hc_class := 11 ;
6336: LD_ADDR_OWVAR 28
6340: PUSH
6341: LD_INT 11
6343: ST_TO_ADDR
// hc_gallery := sandar ;
6344: LD_ADDR_OWVAR 33
6348: PUSH
6349: LD_STRING sandar
6351: ST_TO_ADDR
// hc_face_number := 5 ;
6352: LD_ADDR_OWVAR 34
6356: PUSH
6357: LD_INT 5
6359: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6360: LD_ADDR_OWVAR 31
6364: PUSH
6365: LD_INT 6
6367: PUSH
6368: LD_INT 5
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
// Shariff := CreateHuman ;
6383: LD_ADDR_EXP 41
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6393: LD_EXP 41
6397: PPUSH
6398: LD_INT 94
6400: PPUSH
6401: CALL_OW 52
// InitHc ;
6405: CALL_OW 19
// for d := 1 to 5 do
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_INT 5
6421: PUSH
6422: FOR_TO
6423: IFFALSE 6907
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6425: LD_ADDR_VAR 0 11
6429: PUSH
6430: LD_EXP 49
6434: PUSH
6435: LD_VAR 0 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 30
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 70
6455: ST_TO_ADDR
// if fac then
6456: LD_VAR 0 11
6460: IFFALSE 6493
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6462: LD_ADDR_EXP 48
6466: PUSH
6467: LD_EXP 48
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_VAR 0 11
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 1
6490: ST_TO_ADDR
6491: GO 6516
// arFactories := Replace ( arFactories , d , 0 ) ;
6493: LD_ADDR_EXP 48
6497: PUSH
6498: LD_EXP 48
6502: PPUSH
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 1
6515: ST_TO_ADDR
// for i := 1 to 2 do
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: DOUBLE
6522: LD_INT 1
6524: DEC
6525: ST_TO_ADDR
6526: LD_INT 2
6528: PUSH
6529: FOR_TO
6530: IFFALSE 6673
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6532: LD_INT 14
6534: PPUSH
6535: LD_INT 3
6537: PPUSH
6538: LD_INT 2
6540: PPUSH
6541: LD_INT 88
6543: PPUSH
6544: LD_INT 100
6546: PPUSH
6547: CALL 21567 0 5
// un := CreateVehicle ;
6551: LD_ADDR_VAR 0 6
6555: PUSH
6556: CALL_OW 45
6560: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_EXP 45
6570: PPUSH
6571: LD_EXP 45
6575: PUSH
6576: LD_INT 1
6578: PLUS
6579: PPUSH
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 6
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6599: LD_VAR 0 6
6603: PPUSH
6604: LD_INT 0
6606: PPUSH
6607: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6611: LD_VAR 0 6
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: LD_INT 5
6621: PPUSH
6622: CALL_OW 12
6626: PPUSH
6627: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6631: LD_VAR 0 6
6635: PPUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 20
6641: PUSH
6642: LD_INT 21
6644: PUSH
6645: LD_INT 22
6647: PUSH
6648: LD_INT 46
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_VAR 0 4
6662: ARRAY
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// end ;
6671: GO 6529
6673: POP
6674: POP
// for i := 1 to 4 do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 1
6683: DEC
6684: ST_TO_ADDR
6685: LD_INT 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6903
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6691: LD_INT 14
6693: PPUSH
6694: LD_INT 3
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 1
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 12
6718: ARRAY
6719: PPUSH
6720: LD_INT 1
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: PPUSH
6742: LD_INT 25
6744: PUSH
6745: LD_INT 27
6747: PUSH
6748: LD_INT 26
6750: PUSH
6751: LD_INT 28
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_VAR 0 3
6764: PUSH
6765: LD_INT 4
6767: MOD
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ARRAY
6773: PPUSH
6774: LD_INT 100
6776: PPUSH
6777: CALL 21567 0 5
// un := CreateVehicle ;
6781: LD_ADDR_VAR 0 6
6785: PUSH
6786: CALL_OW 45
6790: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6791: LD_ADDR_EXP 45
6795: PUSH
6796: LD_EXP 45
6800: PPUSH
6801: LD_EXP 45
6805: PUSH
6806: LD_INT 1
6808: PLUS
6809: PPUSH
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 6
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 1
6828: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6829: LD_VAR 0 6
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6841: LD_VAR 0 6
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: LD_INT 5
6851: PPUSH
6852: CALL_OW 12
6856: PPUSH
6857: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6861: LD_VAR 0 6
6865: PPUSH
6866: LD_INT 24
6868: PUSH
6869: LD_INT 20
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 46
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_VAR 0 4
6892: ARRAY
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ;
6901: GO 6688
6903: POP
6904: POP
// end ;
6905: GO 6422
6907: POP
6908: POP
// InitHc ;
6909: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6913: LD_ADDR_VAR 0 9
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 69
6932: ST_TO_ADDR
// if tmp and side <> 2 then
6933: LD_VAR 0 9
6937: PUSH
6938: LD_VAR 0 1
6942: PUSH
6943: LD_INT 2
6945: NONEQUAL
6946: AND
6947: IFFALSE 6980
// begin for i in tmp do
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_VAR 0 9
6958: PUSH
6959: FOR_IN
6960: IFFALSE 6978
// SetSide ( i , side ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_VAR 0 1
6971: PPUSH
6972: CALL_OW 235
6976: GO 6959
6978: POP
6979: POP
// end ; end ;
6980: LD_VAR 0 2
6984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: LD_INT 0
7003: PPUSH
7004: CALL_OW 517
7008: ST_TO_ADDR
// if not tmp then
7009: LD_VAR 0 5
7013: NOT
7014: IFFALSE 7018
// exit ;
7016: GO 7256
// for i := 1 to n do
7018: LD_ADDR_VAR 0 4
7022: PUSH
7023: DOUBLE
7024: LD_INT 1
7026: DEC
7027: ST_TO_ADDR
7028: LD_VAR 0 2
7032: PUSH
7033: FOR_TO
7034: IFFALSE 7254
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7036: LD_ADDR_VAR 0 6
7040: PUSH
7041: LD_INT 1
7043: PPUSH
7044: LD_VAR 0 5
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: CALL_OW 12
7057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7058: LD_VAR 0 5
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PUSH
7067: LD_VAR 0 6
7071: ARRAY
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_INT 2
7080: ARRAY
7081: PUSH
7082: LD_VAR 0 6
7086: ARRAY
7087: PPUSH
7088: LD_EXP 3
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7100: LD_ADDR_EXP 51
7104: PUSH
7105: LD_EXP 51
7109: PPUSH
7110: LD_EXP 51
7114: PUSH
7115: LD_INT 1
7117: PLUS
7118: PPUSH
7119: LD_VAR 0 5
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PUSH
7128: LD_VAR 0 6
7132: ARRAY
7133: PPUSH
7134: CALL_OW 2
7138: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7139: LD_ADDR_EXP 51
7143: PUSH
7144: LD_EXP 51
7148: PPUSH
7149: LD_EXP 51
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: PPUSH
7158: LD_VAR 0 5
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: PUSH
7167: LD_VAR 0 6
7171: ARRAY
7172: PPUSH
7173: CALL_OW 2
7177: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: LD_VAR 0 5
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: LD_VAR 0 5
7195: PUSH
7196: LD_INT 1
7198: ARRAY
7199: PPUSH
7200: LD_VAR 0 6
7204: PPUSH
7205: CALL_OW 3
7209: PPUSH
7210: CALL_OW 1
7214: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7215: LD_ADDR_VAR 0 5
7219: PUSH
7220: LD_VAR 0 5
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_VAR 0 5
7232: PUSH
7233: LD_INT 2
7235: ARRAY
7236: PPUSH
7237: LD_VAR 0 6
7241: PPUSH
7242: CALL_OW 3
7246: PPUSH
7247: CALL_OW 1
7251: ST_TO_ADDR
// end ;
7252: GO 7033
7254: POP
7255: POP
// end ;
7256: LD_VAR 0 3
7260: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7261: LD_INT 0
7263: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7264: LD_ADDR_EXP 42
7268: PUSH
7269: LD_EXP 3
7273: PPUSH
7274: LD_INT 2
7276: PPUSH
7277: LD_INT 1
7279: PPUSH
7280: CALL 16790 0 3
7284: ST_TO_ADDR
// arConstructList := [ ] ;
7285: LD_ADDR_EXP 43
7289: PUSH
7290: EMPTY
7291: ST_TO_ADDR
// arBuildings := [ ] ;
7292: LD_ADDR_EXP 44
7296: PUSH
7297: EMPTY
7298: ST_TO_ADDR
// arVehicles := [ ] ;
7299: LD_ADDR_EXP 45
7303: PUSH
7304: EMPTY
7305: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7306: LD_ADDR_EXP 46
7310: PUSH
7311: EMPTY
7312: ST_TO_ADDR
// arDrivers := [ ] ;
7313: LD_ADDR_EXP 47
7317: PUSH
7318: EMPTY
7319: ST_TO_ADDR
// arFactories := [ ] ;
7320: LD_ADDR_EXP 48
7324: PUSH
7325: EMPTY
7326: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7327: LD_ADDR_EXP 49
7331: PUSH
7332: LD_INT 33
7334: PUSH
7335: LD_INT 35
7337: PUSH
7338: LD_INT 34
7340: PUSH
7341: LD_INT 36
7343: PUSH
7344: LD_INT 38
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7354: LD_ADDR_EXP 50
7358: PUSH
7359: LD_INT 6
7361: PUSH
7362: LD_INT 6
7364: PUSH
7365: LD_INT 6
7367: PUSH
7368: LD_INT 6
7370: PUSH
7371: LD_INT 2
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
// arMinesList := [ ] ;
7381: LD_ADDR_EXP 51
7385: PUSH
7386: EMPTY
7387: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 7
7393: PUSH
7394: LD_INT 9
7396: PUSH
7397: LD_INT 11
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: CALL 6985 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7415: LD_INT 3
7417: PPUSH
7418: LD_INT 7
7420: PUSH
7421: LD_INT 9
7423: PUSH
7424: LD_INT 9
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: LD_OWVAR 67
7436: ARRAY
7437: PPUSH
7438: CALL 6985 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7442: LD_INT 2
7444: PPUSH
7445: LD_INT 6
7447: PUSH
7448: LD_INT 8
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: LD_OWVAR 67
7463: ARRAY
7464: PPUSH
7465: CALL 6985 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7469: LD_INT 39
7471: PPUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 7
7477: PUSH
7478: LD_INT 9
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_OWVAR 67
7490: ARRAY
7491: PPUSH
7492: CALL 6985 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7496: LD_INT 25
7498: PPUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 6
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_OWVAR 67
7517: ARRAY
7518: PPUSH
7519: CALL 6985 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7523: LD_INT 41
7525: PPUSH
7526: LD_INT 12
7528: PUSH
7529: LD_INT 14
7531: PUSH
7532: LD_INT 16
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_OWVAR 67
7544: ARRAY
7545: PPUSH
7546: CALL 6985 0 2
// end ;
7550: LD_VAR 0 1
7554: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7555: LD_INT 0
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
7583: PPUSH
// enable ;
7584: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7585: LD_ADDR_VAR 0 10
7589: PUSH
7590: LD_INT 81
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: ST_TO_ADDR
// if tmp then
7607: LD_VAR 0 10
7611: IFFALSE 7632
// enemySide := GetSide ( tmp [ 1 ] ) ;
7613: LD_ADDR_VAR 0 34
7617: PUSH
7618: LD_VAR 0 10
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: PPUSH
7627: CALL_OW 255
7631: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7632: LD_ADDR_VAR 0 22
7636: PUSH
7637: LD_VAR 0 3
7641: PPUSH
7642: LD_INT 81
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 70
7658: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7659: LD_ADDR_VAR 0 23
7663: PUSH
7664: LD_VAR 0 4
7668: PPUSH
7669: LD_INT 81
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 70
7685: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7686: LD_ADDR_VAR 0 26
7690: PUSH
7691: LD_EXP 45
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_VAR 0 2
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL 59118 0 4
7711: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7712: LD_ADDR_VAR 0 32
7716: PUSH
7717: LD_VAR 0 3
7721: PPUSH
7722: LD_INT 22
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 30
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 70
7770: ST_TO_ADDR
// if depot then
7771: LD_VAR 0 32
7775: IFFALSE 7791
// depot := depot [ 1 ] ;
7777: LD_ADDR_VAR 0 32
7781: PUSH
7782: LD_VAR 0 32
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: ST_TO_ADDR
// if arTech then
7791: LD_EXP 42
7795: IFFALSE 7954
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7797: LD_ADDR_VAR 0 12
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 70
7873: ST_TO_ADDR
// if lab then
7874: LD_VAR 0 12
7878: IFFALSE 7954
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7880: LD_VAR 0 12
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL_OW 461
7893: PUSH
7894: LD_INT 2
7896: EQUAL
7897: IFFALSE 7954
// begin for i in arTech do
7899: LD_ADDR_VAR 0 9
7903: PUSH
7904: LD_EXP 42
7908: PUSH
7909: FOR_IN
7910: IFFALSE 7952
// if CanBeResearched ( lab [ 1 ] , i ) then
7912: LD_VAR 0 12
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 9
7925: PPUSH
7926: CALL_OW 430
7930: IFFALSE 7950
// begin AddComResearch ( lab [ 1 ] , i ) ;
7932: LD_VAR 0 12
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 9
7945: PPUSH
7946: CALL_OW 184
// end ;
7950: GO 7909
7952: POP
7953: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7954: LD_ADDR_VAR 0 29
7958: PUSH
7959: LD_VAR 0 3
7963: PPUSH
7964: LD_INT 22
7966: PUSH
7967: LD_VAR 0 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 30
7978: PUSH
7979: LD_INT 3
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PUSH
7986: LD_INT 50
7988: PUSH
7989: EMPTY
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PPUSH
7997: CALL_OW 70
8001: ST_TO_ADDR
// if fac then
8002: LD_VAR 0 29
8006: IFFALSE 8395
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8008: LD_VAR 0 29
8012: PUSH
8013: LD_INT 1
8015: ARRAY
8016: PPUSH
8017: CALL_OW 461
8021: PUSH
8022: LD_INT 2
8024: EQUAL
8025: IFFALSE 8395
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8027: LD_ADDR_VAR 0 30
8031: PUSH
8032: LD_VAR 0 3
8036: PPUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 30
8042: PUSH
8043: LD_INT 32
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 30
8052: PUSH
8053: LD_INT 33
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 35
8067: PUSH
8068: LD_INT 0
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 70
8083: ST_TO_ADDR
// if emptyTowers then
8084: LD_VAR 0 30
8088: IFFALSE 8138
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8090: LD_ADDR_VAR 0 31
8094: PUSH
8095: LD_VAR 0 30
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: LD_VAR 0 3
8108: PPUSH
8109: CALL 27074 0 2
8113: ST_TO_ADDR
// if weapon then
8114: LD_VAR 0 31
8118: IFFALSE 8138
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8120: LD_VAR 0 30
8124: PUSH
8125: LD_INT 1
8127: ARRAY
8128: PPUSH
8129: LD_VAR 0 31
8133: PPUSH
8134: CALL_OW 148
// end ; if arConstructList then
8138: LD_EXP 43
8142: IFFALSE 8395
// for i := 1 to Count ( arConstructList ) do
8144: LD_ADDR_VAR 0 9
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_EXP 43
8158: PPUSH
8159: CALL 18829 0 1
8163: PUSH
8164: FOR_TO
8165: IFFALSE 8393
// begin if arConstructList [ i ] [ 1 ] = base then
8167: LD_EXP 43
8171: PUSH
8172: LD_VAR 0 9
8176: ARRAY
8177: PUSH
8178: LD_INT 1
8180: ARRAY
8181: PUSH
8182: LD_VAR 0 2
8186: EQUAL
8187: IFFALSE 8391
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8189: LD_VAR 0 29
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_EXP 43
8202: PUSH
8203: LD_VAR 0 9
8207: ARRAY
8208: PUSH
8209: LD_INT 2
8211: ARRAY
8212: PUSH
8213: LD_INT 1
8215: ARRAY
8216: PPUSH
8217: LD_EXP 43
8221: PUSH
8222: LD_VAR 0 9
8226: ARRAY
8227: PUSH
8228: LD_INT 2
8230: ARRAY
8231: PUSH
8232: LD_INT 2
8234: ARRAY
8235: PPUSH
8236: LD_EXP 43
8240: PUSH
8241: LD_VAR 0 9
8245: ARRAY
8246: PUSH
8247: LD_INT 2
8249: ARRAY
8250: PUSH
8251: LD_INT 3
8253: ARRAY
8254: PPUSH
8255: LD_EXP 43
8259: PUSH
8260: LD_VAR 0 9
8264: ARRAY
8265: PUSH
8266: LD_INT 2
8268: ARRAY
8269: PUSH
8270: LD_INT 4
8272: ARRAY
8273: PPUSH
8274: CALL_OW 448
8278: IFFALSE 8391
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8280: LD_VAR 0 29
8284: PUSH
8285: LD_INT 1
8287: ARRAY
8288: PPUSH
8289: LD_EXP 43
8293: PUSH
8294: LD_VAR 0 9
8298: ARRAY
8299: PUSH
8300: LD_INT 2
8302: ARRAY
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PPUSH
8308: LD_EXP 43
8312: PUSH
8313: LD_VAR 0 9
8317: ARRAY
8318: PUSH
8319: LD_INT 2
8321: ARRAY
8322: PUSH
8323: LD_INT 2
8325: ARRAY
8326: PPUSH
8327: LD_EXP 43
8331: PUSH
8332: LD_VAR 0 9
8336: ARRAY
8337: PUSH
8338: LD_INT 2
8340: ARRAY
8341: PUSH
8342: LD_INT 3
8344: ARRAY
8345: PPUSH
8346: LD_EXP 43
8350: PUSH
8351: LD_VAR 0 9
8355: ARRAY
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: PUSH
8361: LD_INT 4
8363: ARRAY
8364: PPUSH
8365: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8369: LD_ADDR_EXP 43
8373: PUSH
8374: LD_EXP 43
8378: PPUSH
8379: LD_VAR 0 9
8383: PPUSH
8384: CALL_OW 3
8388: ST_TO_ADDR
// break ;
8389: GO 8393
// end ; end ;
8391: GO 8164
8393: POP
8394: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8395: LD_ADDR_VAR 0 10
8399: PUSH
8400: LD_VAR 0 3
8404: PPUSH
8405: LD_INT 21
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: LD_INT 57
8420: PUSH
8421: EMPTY
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 3
8430: PUSH
8431: LD_INT 24
8433: PUSH
8434: LD_INT 1000
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 70
8454: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8455: LD_ADDR_VAR 0 17
8459: PUSH
8460: LD_VAR 0 3
8464: PPUSH
8465: CALL_OW 435
8469: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8470: LD_ADDR_VAR 0 14
8474: PUSH
8475: LD_VAR 0 5
8479: PPUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 50
8492: PUSH
8493: EMPTY
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PPUSH
8500: CALL_OW 72
8504: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8505: LD_VAR 0 14
8509: PPUSH
8510: LD_INT 3
8512: PUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 7
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: PUSH
8527: LD_INT 3
8529: PUSH
8530: LD_INT 54
8532: PUSH
8533: EMPTY
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 72
8548: PUSH
8549: LD_EXP 48
8553: PUSH
8554: LD_VAR 0 2
8558: ARRAY
8559: PPUSH
8560: CALL_OW 302
8564: AND
8565: IFFALSE 8626
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8567: LD_VAR 0 14
8571: PPUSH
8572: LD_INT 3
8574: PUSH
8575: LD_INT 120
8577: PUSH
8578: LD_INT 7
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 3
8591: PUSH
8592: LD_INT 54
8594: PUSH
8595: EMPTY
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PPUSH
8606: CALL_OW 72
8610: PPUSH
8611: LD_EXP 48
8615: PUSH
8616: LD_VAR 0 2
8620: ARRAY
8621: PPUSH
8622: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8626: LD_ADDR_VAR 0 18
8630: PUSH
8631: LD_VAR 0 5
8635: PPUSH
8636: LD_INT 25
8638: PUSH
8639: LD_INT 4
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 50
8648: PUSH
8649: EMPTY
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 72
8660: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8661: LD_ADDR_VAR 0 12
8665: PUSH
8666: LD_VAR 0 3
8670: PPUSH
8671: LD_INT 2
8673: PUSH
8674: LD_INT 30
8676: PUSH
8677: LD_INT 6
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 30
8686: PUSH
8687: LD_INT 7
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 30
8696: PUSH
8697: LD_INT 8
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: PPUSH
8710: CALL_OW 70
8714: ST_TO_ADDR
// if sci then
8715: LD_VAR 0 18
8719: IFFALSE 8880
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8721: LD_ADDR_VAR 0 20
8725: PUSH
8726: LD_VAR 0 5
8730: PPUSH
8731: LD_INT 95
8733: PUSH
8734: LD_VAR 0 3
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: PUSH
8743: LD_INT 120
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: PPUSH
8757: CALL_OW 72
8761: ST_TO_ADDR
// if hurtUnits then
8762: LD_VAR 0 20
8766: IFFALSE 8827
// begin for i in sci do
8768: LD_ADDR_VAR 0 9
8772: PUSH
8773: LD_VAR 0 18
8777: PUSH
8778: FOR_IN
8779: IFFALSE 8823
// if IsInUnit ( i ) then
8781: LD_VAR 0 9
8785: PPUSH
8786: CALL_OW 310
8790: IFFALSE 8803
// ComExitBuilding ( i ) else
8792: LD_VAR 0 9
8796: PPUSH
8797: CALL_OW 122
8801: GO 8821
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8803: LD_VAR 0 9
8807: PPUSH
8808: LD_VAR 0 20
8812: PUSH
8813: LD_INT 1
8815: ARRAY
8816: PPUSH
8817: CALL_OW 128
8821: GO 8778
8823: POP
8824: POP
// end else
8825: GO 8880
// if lab then
8827: LD_VAR 0 12
8831: IFFALSE 8880
// begin for i in sci do
8833: LD_ADDR_VAR 0 9
8837: PUSH
8838: LD_VAR 0 18
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8878
// if not IsInUnit ( i ) then
8846: LD_VAR 0 9
8850: PPUSH
8851: CALL_OW 310
8855: NOT
8856: IFFALSE 8876
// ComEnterUnit ( i , lab [ 1 ] ) ;
8858: LD_VAR 0 9
8862: PPUSH
8863: LD_VAR 0 12
8867: PUSH
8868: LD_INT 1
8870: ARRAY
8871: PPUSH
8872: CALL_OW 120
8876: GO 8843
8878: POP
8879: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8880: LD_ADDR_VAR 0 13
8884: PUSH
8885: LD_VAR 0 5
8889: PPUSH
8890: LD_INT 25
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: EMPTY
8897: LIST
8898: LIST
8899: PPUSH
8900: CALL_OW 72
8904: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8905: LD_ADDR_VAR 0 33
8909: PUSH
8910: LD_EXP 44
8914: PPUSH
8915: LD_INT 1
8917: PPUSH
8918: LD_VAR 0 2
8922: PPUSH
8923: LD_INT 2
8925: PPUSH
8926: CALL 59118 0 4
8930: ST_TO_ADDR
// if eng then
8931: LD_VAR 0 13
8935: IFFALSE 9769
// begin for i in eng do
8937: LD_ADDR_VAR 0 9
8941: PUSH
8942: LD_VAR 0 13
8946: PUSH
8947: FOR_IN
8948: IFFALSE 9767
// begin tag := GetTag ( i ) ;
8950: LD_ADDR_VAR 0 15
8954: PUSH
8955: LD_VAR 0 9
8959: PPUSH
8960: CALL_OW 110
8964: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
8965: LD_VAR 0 9
8969: PPUSH
8970: LD_VAR 0 4
8974: PPUSH
8975: CALL_OW 308
8979: IFFALSE 9010
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8981: LD_VAR 0 9
8985: PPUSH
8986: LD_VAR 0 7
8990: PUSH
8991: LD_INT 1
8993: ARRAY
8994: PPUSH
8995: LD_VAR 0 7
8999: PUSH
9000: LD_INT 2
9002: ARRAY
9003: PPUSH
9004: CALL_OW 111
// continue ;
9008: GO 8947
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9010: LD_VAR 0 9
9014: PPUSH
9015: CALL_OW 256
9019: PUSH
9020: LD_INT 800
9022: LESS
9023: PUSH
9024: LD_VAR 0 15
9028: PUSH
9029: LD_INT 1
9031: NONEQUAL
9032: AND
9033: IFFALSE 9083
// begin SetTag ( i , tHeal ) ;
9035: LD_VAR 0 9
9039: PPUSH
9040: LD_INT 1
9042: PPUSH
9043: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9047: LD_VAR 0 9
9051: PPUSH
9052: LD_VAR 0 6
9056: PUSH
9057: LD_INT 1
9059: ARRAY
9060: PPUSH
9061: LD_VAR 0 6
9065: PUSH
9066: LD_INT 2
9068: ARRAY
9069: PPUSH
9070: CALL_OW 111
// AddComHold ( i ) ;
9074: LD_VAR 0 9
9078: PPUSH
9079: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9083: LD_VAR 0 15
9087: PUSH
9088: LD_INT 1
9090: EQUAL
9091: PUSH
9092: LD_VAR 0 9
9096: PPUSH
9097: CALL_OW 256
9101: PUSH
9102: LD_INT 1000
9104: EQUAL
9105: AND
9106: IFFALSE 9120
// SetTag ( i , 0 ) ;
9108: LD_VAR 0 9
9112: PPUSH
9113: LD_INT 0
9115: PPUSH
9116: CALL_OW 109
// if not tag then
9120: LD_VAR 0 15
9124: NOT
9125: IFFALSE 9292
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9127: LD_ADDR_VAR 0 11
9131: PUSH
9132: LD_VAR 0 3
9136: PPUSH
9137: LD_INT 57
9139: PUSH
9140: EMPTY
9141: LIST
9142: PPUSH
9143: CALL_OW 70
9147: ST_TO_ADDR
// if undone then
9148: LD_VAR 0 11
9152: IFFALSE 9174
// begin ComComplete ( i , undone [ 1 ] ) ;
9154: LD_VAR 0 9
9158: PPUSH
9159: LD_VAR 0 11
9163: PUSH
9164: LD_INT 1
9166: ARRAY
9167: PPUSH
9168: CALL 24927 0 2
// continue ;
9172: GO 8947
// end ; if cr or tmp or buildingsToBuild then
9174: LD_VAR 0 17
9178: PUSH
9179: LD_VAR 0 10
9183: OR
9184: PUSH
9185: LD_VAR 0 33
9189: OR
9190: IFFALSE 9266
// begin if IsInUnit ( i ) then
9192: LD_VAR 0 9
9196: PPUSH
9197: CALL_OW 310
9201: IFFALSE 9212
// ComExitBuilding ( i ) ;
9203: LD_VAR 0 9
9207: PPUSH
9208: CALL_OW 122
// if tmp then
9212: LD_VAR 0 10
9216: IFFALSE 9232
// SetTag ( i , tRepair ) else
9218: LD_VAR 0 9
9222: PPUSH
9223: LD_INT 3
9225: PPUSH
9226: CALL_OW 109
9230: GO 9264
// if cr then
9232: LD_VAR 0 17
9236: IFFALSE 9252
// SetTag ( i , tCrates ) else
9238: LD_VAR 0 9
9242: PPUSH
9243: LD_INT 2
9245: PPUSH
9246: CALL_OW 109
9250: GO 9264
// SetTag ( i , tBuild ) ;
9252: LD_VAR 0 9
9256: PPUSH
9257: LD_INT 5
9259: PPUSH
9260: CALL_OW 109
// end else
9264: GO 9292
// if not IsInUnit ( i ) then
9266: LD_VAR 0 9
9270: PPUSH
9271: CALL_OW 310
9275: NOT
9276: IFFALSE 9292
// ComEnterUnit ( i , depot ) ;
9278: LD_VAR 0 9
9282: PPUSH
9283: LD_VAR 0 32
9287: PPUSH
9288: CALL_OW 120
// end ; if tag = tRepair then
9292: LD_VAR 0 15
9296: PUSH
9297: LD_INT 3
9299: EQUAL
9300: IFFALSE 9406
// begin if IsInUnit ( i ) then
9302: LD_VAR 0 9
9306: PPUSH
9307: CALL_OW 310
9311: IFFALSE 9324
// begin ComExitBuilding ( i ) ;
9313: LD_VAR 0 9
9317: PPUSH
9318: CALL_OW 122
// continue ;
9322: GO 8947
// end ; if not tmp then
9324: LD_VAR 0 10
9328: NOT
9329: IFFALSE 9345
// begin SetTag ( i , 0 ) ;
9331: LD_VAR 0 9
9335: PPUSH
9336: LD_INT 0
9338: PPUSH
9339: CALL_OW 109
// continue ;
9343: GO 8947
// end ; if not HasTask ( i ) then
9345: LD_VAR 0 9
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: IFFALSE 9375
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9357: LD_VAR 0 9
9361: PPUSH
9362: LD_VAR 0 10
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PPUSH
9371: CALL_OW 130
// if not IsInArea ( i , area ) then
9375: LD_VAR 0 9
9379: PPUSH
9380: LD_VAR 0 3
9384: PPUSH
9385: CALL_OW 308
9389: NOT
9390: IFFALSE 9406
// ComMoveToArea ( i , area ) ;
9392: LD_VAR 0 9
9396: PPUSH
9397: LD_VAR 0 3
9401: PPUSH
9402: CALL_OW 113
// end ; if tag = tBuild then
9406: LD_VAR 0 15
9410: PUSH
9411: LD_INT 5
9413: EQUAL
9414: IFFALSE 9620
// begin if IsInUnit ( i ) then
9416: LD_VAR 0 9
9420: PPUSH
9421: CALL_OW 310
9425: IFFALSE 9438
// begin ComExitBuilding ( i ) ;
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL_OW 122
// continue ;
9436: GO 8947
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9438: LD_VAR 0 33
9442: NOT
9443: PUSH
9444: LD_VAR 0 22
9448: OR
9449: PUSH
9450: LD_VAR 0 23
9454: OR
9455: IFFALSE 9473
// begin SetTag ( i , 0 ) ;
9457: LD_VAR 0 9
9461: PPUSH
9462: LD_INT 0
9464: PPUSH
9465: CALL_OW 109
// continue ;
9469: GO 8947
// end else
9471: GO 9512
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9473: LD_VAR 0 32
9477: PPUSH
9478: LD_VAR 0 33
9482: PUSH
9483: LD_INT 1
9485: ARRAY
9486: PUSH
9487: LD_INT 1
9489: ARRAY
9490: PPUSH
9491: CALL 58361 0 2
9495: NOT
9496: IFFALSE 9512
// begin SetTag ( i , 0 ) ;
9498: LD_VAR 0 9
9502: PPUSH
9503: LD_INT 0
9505: PPUSH
9506: CALL_OW 109
// continue ;
9510: GO 8947
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9512: LD_ADDR_VAR 0 11
9516: PUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 57
9524: PUSH
9525: EMPTY
9526: LIST
9527: PPUSH
9528: CALL_OW 70
9532: ST_TO_ADDR
// if undone then
9533: LD_VAR 0 11
9537: IFFALSE 9559
// begin ComComplete ( i , undone [ 1 ] ) ;
9539: LD_VAR 0 9
9543: PPUSH
9544: LD_VAR 0 11
9548: PUSH
9549: LD_INT 1
9551: ARRAY
9552: PPUSH
9553: CALL 24927 0 2
// continue ;
9557: GO 8947
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9559: LD_VAR 0 9
9563: PPUSH
9564: LD_VAR 0 33
9568: PUSH
9569: LD_INT 1
9571: ARRAY
9572: PUSH
9573: LD_INT 1
9575: ARRAY
9576: PPUSH
9577: LD_VAR 0 33
9581: PUSH
9582: LD_INT 1
9584: ARRAY
9585: PUSH
9586: LD_INT 2
9588: ARRAY
9589: PPUSH
9590: LD_VAR 0 33
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PUSH
9599: LD_INT 3
9601: ARRAY
9602: PPUSH
9603: LD_VAR 0 33
9607: PUSH
9608: LD_INT 1
9610: ARRAY
9611: PUSH
9612: LD_INT 4
9614: ARRAY
9615: PPUSH
9616: CALL_OW 145
// end ; if tag = tCrates then
9620: LD_VAR 0 15
9624: PUSH
9625: LD_INT 2
9627: EQUAL
9628: IFFALSE 9765
// begin if IsInUnit ( i ) then
9630: LD_VAR 0 9
9634: PPUSH
9635: CALL_OW 310
9639: IFFALSE 9652
// begin ComExitBuilding ( i ) ;
9641: LD_VAR 0 9
9645: PPUSH
9646: CALL_OW 122
// continue ;
9650: GO 8947
// end ; if not cr then
9652: LD_VAR 0 17
9656: NOT
9657: IFFALSE 9673
// begin SetTag ( i , 0 ) ;
9659: LD_VAR 0 9
9663: PPUSH
9664: LD_INT 0
9666: PPUSH
9667: CALL_OW 109
// continue ;
9671: GO 8947
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9673: LD_VAR 0 9
9677: PPUSH
9678: CALL_OW 314
9682: NOT
9683: PUSH
9684: LD_INT 81
9686: PUSH
9687: LD_VAR 0 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 92
9698: PUSH
9699: LD_VAR 0 17
9703: PUSH
9704: LD_INT 1
9706: ARRAY
9707: PUSH
9708: LD_VAR 0 17
9712: PUSH
9713: LD_INT 2
9715: ARRAY
9716: PUSH
9717: LD_INT 12
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PPUSH
9730: CALL_OW 69
9734: NOT
9735: AND
9736: IFFALSE 9765
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9738: LD_VAR 0 9
9742: PPUSH
9743: LD_VAR 0 17
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: PPUSH
9752: LD_VAR 0 17
9756: PUSH
9757: LD_INT 2
9759: ARRAY
9760: PPUSH
9761: CALL_OW 117
// end ; end ;
9765: GO 8947
9767: POP
9768: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9769: LD_ADDR_VAR 0 25
9773: PUSH
9774: LD_VAR 0 26
9778: PPUSH
9779: LD_INT 34
9781: PUSH
9782: LD_INT 88
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 50
9791: PUSH
9792: EMPTY
9793: LIST
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PPUSH
9799: CALL_OW 72
9803: ST_TO_ADDR
// if cranes then
9804: LD_VAR 0 25
9808: IFFALSE 9873
// begin if tmp then
9810: LD_VAR 0 10
9814: IFFALSE 9859
// begin for i in cranes do
9816: LD_ADDR_VAR 0 9
9820: PUSH
9821: LD_VAR 0 25
9825: PUSH
9826: FOR_IN
9827: IFFALSE 9855
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9829: LD_VAR 0 9
9833: PPUSH
9834: LD_VAR 0 10
9838: PPUSH
9839: LD_VAR 0 9
9843: PPUSH
9844: CALL_OW 74
9848: PPUSH
9849: CALL_OW 130
9853: GO 9826
9855: POP
9856: POP
// end else
9857: GO 9873
// ComBackOnParking ( cranes , parkingPoint ) ;
9859: LD_VAR 0 25
9863: PPUSH
9864: LD_VAR 0 7
9868: PPUSH
9869: CALL 59255 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9873: LD_ADDR_VAR 0 27
9877: PUSH
9878: LD_EXP 46
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: LD_VAR 0 2
9890: PPUSH
9891: LD_INT 2
9893: PPUSH
9894: CALL 59118 0 4
9898: ST_TO_ADDR
// if vehicles2 then
9899: LD_VAR 0 27
9903: IFFALSE 9970
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9905: LD_ADDR_VAR 0 9
9909: PUSH
9910: LD_VAR 0 27
9914: PPUSH
9915: LD_INT 33
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 50
9927: PUSH
9928: EMPTY
9929: LIST
9930: PUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 61
9936: PUSH
9937: EMPTY
9938: LIST
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: LIST
9948: PPUSH
9949: CALL_OW 72
9953: PUSH
9954: FOR_IN
9955: IFFALSE 9968
// Connect ( i ) ;
9957: LD_VAR 0 9
9961: PPUSH
9962: CALL 25035 0 1
9966: GO 9954
9968: POP
9969: POP
// if vehicles then
9970: LD_VAR 0 26
9974: IFFALSE 10880
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9976: LD_ADDR_VAR 0 9
9980: PUSH
9981: LD_VAR 0 26
9985: PPUSH
9986: LD_INT 33
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 50
9998: PUSH
9999: EMPTY
10000: LIST
10001: PUSH
10002: LD_INT 3
10004: PUSH
10005: LD_INT 61
10007: PUSH
10008: EMPTY
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 72
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10039
// Connect ( i ) ;
10028: LD_VAR 0 9
10032: PPUSH
10033: CALL 25035 0 1
10037: GO 10025
10039: POP
10040: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10041: LD_ADDR_VAR 0 26
10045: PUSH
10046: LD_VAR 0 26
10050: PPUSH
10051: LD_INT 3
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 34
10059: PUSH
10060: LD_INT 88
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 32
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: EMPTY
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 50
10088: PUSH
10089: EMPTY
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: ST_TO_ADDR
// if vehicles then
10101: LD_VAR 0 26
10105: IFFALSE 10880
// begin for i in vehicles do
10107: LD_ADDR_VAR 0 9
10111: PUSH
10112: LD_VAR 0 26
10116: PUSH
10117: FOR_IN
10118: IFFALSE 10878
// begin tag := GetTag ( i ) ;
10120: LD_ADDR_VAR 0 15
10124: PUSH
10125: LD_VAR 0 9
10129: PPUSH
10130: CALL_OW 110
10134: ST_TO_ADDR
// if not tag then
10135: LD_VAR 0 15
10139: NOT
10140: IFFALSE 10311
// begin if GetControl ( i ) = control_manual then
10142: LD_VAR 0 9
10146: PPUSH
10147: CALL_OW 263
10151: PUSH
10152: LD_INT 1
10154: EQUAL
10155: IFFALSE 10297
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10157: LD_ADDR_VAR 0 24
10161: PUSH
10162: LD_EXP 47
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: LD_VAR 0 9
10174: PPUSH
10175: LD_INT 2
10177: PPUSH
10178: CALL 59118 0 4
10182: ST_TO_ADDR
// if not drivers then
10183: LD_VAR 0 24
10187: NOT
10188: IFFALSE 10277
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10190: LD_ADDR_VAR 0 24
10194: PUSH
10195: LD_VAR 0 14
10199: PPUSH
10200: LD_INT 3
10202: PUSH
10203: LD_INT 120
10205: PUSH
10206: LD_INT 7
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 72
10221: ST_TO_ADDR
// if drivers then
10222: LD_VAR 0 24
10226: IFFALSE 10277
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10228: LD_VAR 0 24
10232: PUSH
10233: LD_INT 1
10235: ARRAY
10236: PPUSH
10237: LD_INT 7
10239: PPUSH
10240: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10244: LD_ADDR_EXP 47
10248: PUSH
10249: LD_EXP 47
10253: PPUSH
10254: LD_VAR 0 9
10258: PUSH
10259: LD_VAR 0 24
10263: PUSH
10264: LD_INT 1
10266: ARRAY
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PPUSH
10272: CALL 54438 0 2
10276: ST_TO_ADDR
// end ; end ; if drivers then
10277: LD_VAR 0 24
10281: IFFALSE 10295
// SetTag ( i , tBusy ) ;
10283: LD_VAR 0 9
10287: PPUSH
10288: LD_INT 8
10290: PPUSH
10291: CALL_OW 109
// continue ;
10295: GO 10117
// end ; SetTag ( i , tBusy ) ;
10297: LD_VAR 0 9
10301: PPUSH
10302: LD_INT 8
10304: PPUSH
10305: CALL_OW 109
// end else
10309: GO 10876
// if tag = tBusy then
10311: LD_VAR 0 15
10315: PUSH
10316: LD_INT 8
10318: EQUAL
10319: IFFALSE 10547
// begin if GetLives ( i ) = 1000 then
10321: LD_VAR 0 9
10325: PPUSH
10326: CALL_OW 256
10330: PUSH
10331: LD_INT 1000
10333: EQUAL
10334: IFFALSE 10545
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10336: LD_VAR 0 9
10340: PPUSH
10341: CALL_OW 263
10345: PUSH
10346: LD_INT 1
10348: EQUAL
10349: PUSH
10350: LD_VAR 0 9
10354: PPUSH
10355: CALL_OW 311
10359: NOT
10360: AND
10361: IFFALSE 10533
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10363: LD_ADDR_VAR 0 24
10367: PUSH
10368: LD_EXP 47
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: LD_VAR 0 9
10380: PPUSH
10381: LD_INT 2
10383: PPUSH
10384: CALL 59118 0 4
10388: ST_TO_ADDR
// if not drivers then
10389: LD_VAR 0 24
10393: NOT
10394: IFFALSE 10410
// begin SetTag ( i , 0 ) ;
10396: LD_VAR 0 9
10400: PPUSH
10401: LD_INT 0
10403: PPUSH
10404: CALL_OW 109
// continue ;
10408: GO 10117
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10410: LD_VAR 0 24
10414: PUSH
10415: LD_INT 1
10417: ARRAY
10418: PPUSH
10419: CALL_OW 310
10423: PUSH
10424: LD_VAR 0 24
10428: PUSH
10429: LD_INT 1
10431: ARRAY
10432: PPUSH
10433: CALL 52042 0 1
10437: NOT
10438: AND
10439: IFFALSE 10454
// ComExitBuilding ( drivers [ 1 ] ) ;
10441: LD_VAR 0 24
10445: PUSH
10446: LD_INT 1
10448: ARRAY
10449: PPUSH
10450: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10454: LD_VAR 0 26
10458: PPUSH
10459: LD_INT 120
10461: PUSH
10462: LD_INT 3
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PPUSH
10469: CALL_OW 72
10473: PUSH
10474: LD_VAR 0 24
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 314
10487: NOT
10488: AND
10489: PUSH
10490: LD_VAR 0 26
10494: PPUSH
10495: LD_INT 120
10497: PUSH
10498: LD_INT 3
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PPUSH
10505: CALL_OW 72
10509: NOT
10510: OR
10511: IFFALSE 10531
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10513: LD_VAR 0 24
10517: PUSH
10518: LD_INT 1
10520: ARRAY
10521: PPUSH
10522: LD_VAR 0 9
10526: PPUSH
10527: CALL_OW 120
// continue ;
10531: GO 10117
// end ; SetTag ( i , tAttack ) ;
10533: LD_VAR 0 9
10537: PPUSH
10538: LD_INT 13
10540: PPUSH
10541: CALL_OW 109
// end ; end else
10545: GO 10876
// if tag = tAttack then
10547: LD_VAR 0 15
10551: PUSH
10552: LD_INT 13
10554: EQUAL
10555: IFFALSE 10735
// begin enemy := enemyInBase ;
10557: LD_ADDR_VAR 0 21
10561: PUSH
10562: LD_VAR 0 22
10566: ST_TO_ADDR
// if not enemy then
10567: LD_VAR 0 21
10571: NOT
10572: IFFALSE 10584
// enemy := enemyOuterBase ;
10574: LD_ADDR_VAR 0 21
10578: PUSH
10579: LD_VAR 0 23
10583: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10584: LD_VAR 0 21
10588: NOT
10589: PUSH
10590: LD_VAR 0 9
10594: PPUSH
10595: LD_VAR 0 7
10599: PUSH
10600: LD_INT 1
10602: ARRAY
10603: PPUSH
10604: LD_VAR 0 7
10608: PUSH
10609: LD_INT 2
10611: ARRAY
10612: PPUSH
10613: CALL_OW 297
10617: PUSH
10618: LD_INT 10
10620: GREATER
10621: AND
10622: IFFALSE 10653
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10624: LD_VAR 0 9
10628: PPUSH
10629: LD_VAR 0 7
10633: PUSH
10634: LD_INT 1
10636: ARRAY
10637: PPUSH
10638: LD_VAR 0 7
10642: PUSH
10643: LD_INT 2
10645: ARRAY
10646: PPUSH
10647: CALL_OW 111
// continue ;
10651: GO 10117
// end ; if GetLives ( i ) < 650 then
10653: LD_VAR 0 9
10657: PPUSH
10658: CALL_OW 256
10662: PUSH
10663: LD_INT 650
10665: LESS
10666: IFFALSE 10709
// begin SetTag ( i , tVehRepair ) ;
10668: LD_VAR 0 9
10672: PPUSH
10673: LD_INT 9
10675: PPUSH
10676: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10680: LD_VAR 0 9
10684: PPUSH
10685: LD_VAR 0 7
10689: PUSH
10690: LD_INT 1
10692: ARRAY
10693: PPUSH
10694: LD_VAR 0 7
10698: PUSH
10699: LD_INT 2
10701: ARRAY
10702: PPUSH
10703: CALL_OW 111
// continue ;
10707: GO 10117
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10709: LD_VAR 0 9
10713: PPUSH
10714: LD_VAR 0 21
10718: PPUSH
10719: LD_VAR 0 9
10723: PPUSH
10724: CALL_OW 74
10728: PPUSH
10729: CALL_OW 115
// end else
10733: GO 10876
// if tag = tVehRepair then
10735: LD_VAR 0 15
10739: PUSH
10740: LD_INT 9
10742: EQUAL
10743: IFFALSE 10876
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10745: LD_VAR 0 9
10749: PPUSH
10750: LD_VAR 0 7
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PPUSH
10759: LD_VAR 0 7
10763: PUSH
10764: LD_INT 2
10766: ARRAY
10767: PPUSH
10768: CALL_OW 297
10772: PUSH
10773: LD_INT 10
10775: GREATER
10776: IFFALSE 10807
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10778: LD_VAR 0 9
10782: PPUSH
10783: LD_VAR 0 7
10787: PUSH
10788: LD_INT 1
10790: ARRAY
10791: PPUSH
10792: LD_VAR 0 7
10796: PUSH
10797: LD_INT 2
10799: ARRAY
10800: PPUSH
10801: CALL_OW 111
// continue ;
10805: GO 10117
// end ; if GetLives ( i ) = 1000 then
10807: LD_VAR 0 9
10811: PPUSH
10812: CALL_OW 256
10816: PUSH
10817: LD_INT 1000
10819: EQUAL
10820: IFFALSE 10836
// begin SetTag ( i , tBusy ) ;
10822: LD_VAR 0 9
10826: PPUSH
10827: LD_INT 8
10829: PPUSH
10830: CALL_OW 109
// continue ;
10834: GO 10117
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10836: LD_VAR 0 9
10840: PPUSH
10841: CALL_OW 263
10845: PUSH
10846: LD_INT 1
10848: EQUAL
10849: PUSH
10850: LD_VAR 0 9
10854: PPUSH
10855: CALL_OW 311
10859: AND
10860: IFFALSE 10876
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10862: LD_VAR 0 9
10866: PPUSH
10867: CALL_OW 311
10871: PPUSH
10872: CALL 56138 0 1
// end ; end ;
10876: GO 10117
10878: POP
10879: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10880: LD_ADDR_VAR 0 19
10884: PUSH
10885: LD_VAR 0 5
10889: PPUSH
10890: LD_INT 2
10892: PUSH
10893: LD_INT 25
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 25
10905: PUSH
10906: LD_INT 8
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 5
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 25
10925: PUSH
10926: LD_INT 9
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 50
10942: PUSH
10943: EMPTY
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PPUSH
10950: CALL_OW 72
10954: ST_TO_ADDR
// if sol then
10955: LD_VAR 0 19
10959: IFFALSE 11507
// begin if enemyInBase then
10961: LD_VAR 0 22
10965: IFFALSE 11144
// begin for i in sol do
10967: LD_ADDR_VAR 0 9
10971: PUSH
10972: LD_VAR 0 19
10976: PUSH
10977: FOR_IN
10978: IFFALSE 11140
// begin tw := IsInUnit ( i ) ;
10980: LD_ADDR_VAR 0 16
10984: PUSH
10985: LD_VAR 0 9
10989: PPUSH
10990: CALL_OW 310
10994: ST_TO_ADDR
// if tw then
10995: LD_VAR 0 16
10999: IFFALSE 11082
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11001: LD_VAR 0 16
11005: PUSH
11006: LD_INT 22
11008: PUSH
11009: LD_VAR 0 1
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 101
11020: PUSH
11021: LD_VAR 0 34
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 2
11032: PUSH
11033: LD_INT 30
11035: PUSH
11036: LD_INT 32
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 30
11045: PUSH
11046: LD_INT 31
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PPUSH
11063: CALL_OW 69
11067: IN
11068: NOT
11069: IFFALSE 11080
// ComExitBuilding ( i ) ;
11071: LD_VAR 0 9
11075: PPUSH
11076: CALL_OW 122
// end else
11080: GO 11138
// if IsInArea ( i , area ) then
11082: LD_VAR 0 9
11086: PPUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: CALL_OW 308
11096: IFFALSE 11124
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11098: LD_VAR 0 9
11102: PPUSH
11103: LD_VAR 0 22
11107: PPUSH
11108: LD_VAR 0 9
11112: PPUSH
11113: CALL_OW 74
11117: PPUSH
11118: CALL_OW 115
11122: GO 11138
// ComMoveToArea ( i , area ) ;
11124: LD_VAR 0 9
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: CALL_OW 113
// end ;
11138: GO 10977
11140: POP
11141: POP
// end else
11142: GO 11507
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11144: LD_ADDR_VAR 0 28
11148: PUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: LD_INT 3
11156: PUSH
11157: LD_INT 62
11159: PUSH
11160: EMPTY
11161: LIST
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 2
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 32
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 30
11182: PUSH
11183: LD_INT 4
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 30
11192: PUSH
11193: LD_INT 5
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 30
11202: PUSH
11203: LD_INT 31
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 70
11225: ST_TO_ADDR
// if empty then
11226: LD_VAR 0 28
11230: IFFALSE 11247
// empty := ReverseArray ( empty ) ;
11232: LD_ADDR_VAR 0 28
11236: PUSH
11237: LD_VAR 0 28
11241: PPUSH
11242: CALL 49705 0 1
11246: ST_TO_ADDR
// for i in sol do
11247: LD_ADDR_VAR 0 9
11251: PUSH
11252: LD_VAR 0 19
11256: PUSH
11257: FOR_IN
11258: IFFALSE 11505
// begin tag := GetTag ( i ) ;
11260: LD_ADDR_VAR 0 15
11264: PUSH
11265: LD_VAR 0 9
11269: PPUSH
11270: CALL_OW 110
11274: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11275: LD_VAR 0 9
11279: PPUSH
11280: CALL_OW 256
11284: PUSH
11285: LD_INT 1000
11287: LESS
11288: PUSH
11289: LD_VAR 0 15
11293: PUSH
11294: LD_INT 1
11296: NONEQUAL
11297: AND
11298: IFFALSE 11350
// begin SetTag ( i , tHeal ) ;
11300: LD_VAR 0 9
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11312: LD_VAR 0 9
11316: PPUSH
11317: LD_VAR 0 6
11321: PUSH
11322: LD_INT 1
11324: ARRAY
11325: PPUSH
11326: LD_VAR 0 6
11330: PUSH
11331: LD_INT 2
11333: ARRAY
11334: PPUSH
11335: CALL_OW 111
// AddComHold ( i ) ;
11339: LD_VAR 0 9
11343: PPUSH
11344: CALL_OW 200
// continue ;
11348: GO 11257
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11350: LD_VAR 0 9
11354: PPUSH
11355: CALL_OW 256
11359: PUSH
11360: LD_INT 1000
11362: EQUAL
11363: PUSH
11364: LD_VAR 0 15
11368: PUSH
11369: LD_INT 1
11371: EQUAL
11372: AND
11373: IFFALSE 11389
// begin SetTag ( i , 0 ) ;
11375: LD_VAR 0 9
11379: PPUSH
11380: LD_INT 0
11382: PPUSH
11383: CALL_OW 109
// continue ;
11387: GO 11257
// end ; if HasTask ( i ) then
11389: LD_VAR 0 9
11393: PPUSH
11394: CALL_OW 314
11398: IFFALSE 11402
// continue ;
11400: GO 11257
// if not IsInUnit ( i ) and not tag and empty then
11402: LD_VAR 0 9
11406: PPUSH
11407: CALL_OW 310
11411: NOT
11412: PUSH
11413: LD_VAR 0 15
11417: NOT
11418: AND
11419: PUSH
11420: LD_VAR 0 28
11424: AND
11425: IFFALSE 11503
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11427: LD_VAR 0 9
11431: PPUSH
11432: LD_VAR 0 28
11436: PUSH
11437: LD_INT 1
11439: ARRAY
11440: PPUSH
11441: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11445: LD_VAR 0 28
11449: PUSH
11450: LD_INT 1
11452: ARRAY
11453: PPUSH
11454: CALL_OW 266
11458: PUSH
11459: LD_INT 5
11461: EQUAL
11462: PUSH
11463: LD_INT 50
11465: PPUSH
11466: CALL_OW 13
11470: AND
11471: IFFALSE 11485
// AddComChangeProfession ( i , class_mortar ) ;
11473: LD_VAR 0 9
11477: PPUSH
11478: LD_INT 8
11480: PPUSH
11481: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11485: LD_ADDR_VAR 0 28
11489: PUSH
11490: LD_VAR 0 28
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 3
11502: ST_TO_ADDR
// end ; end ;
11503: GO 11257
11505: POP
11506: POP
// end ; end ; end ;
11507: LD_VAR 0 8
11511: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11512: LD_EXP 33
11516: PPUSH
11517: LD_INT 50
11519: PUSH
11520: EMPTY
11521: LIST
11522: PPUSH
11523: CALL_OW 72
11527: IFFALSE 11576
11529: GO 11531
11531: DISABLE
// begin enable ;
11532: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11533: LD_EXP 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: LD_INT 33
11543: PPUSH
11544: LD_INT 40
11546: PPUSH
11547: LD_EXP 33
11551: PPUSH
11552: LD_INT 120
11554: PUSH
11555: LD_INT 129
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PPUSH
11562: LD_INT 126
11564: PUSH
11565: LD_INT 136
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL 7555 0 7
// end ;
11576: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11577: LD_EXP 34
11581: PPUSH
11582: LD_INT 50
11584: PUSH
11585: EMPTY
11586: LIST
11587: PPUSH
11588: CALL_OW 72
11592: IFFALSE 11641
11594: GO 11596
11596: DISABLE
// begin enable ;
11597: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11598: LD_EXP 3
11602: PPUSH
11603: LD_INT 2
11605: PPUSH
11606: LD_INT 35
11608: PPUSH
11609: LD_INT 43
11611: PPUSH
11612: LD_EXP 34
11616: PPUSH
11617: LD_INT 116
11619: PUSH
11620: LD_INT 9
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PPUSH
11627: LD_INT 123
11629: PUSH
11630: LD_INT 12
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PPUSH
11637: CALL 7555 0 7
// end ;
11641: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11642: LD_EXP 32
11646: PPUSH
11647: LD_INT 50
11649: PUSH
11650: EMPTY
11651: LIST
11652: PPUSH
11653: CALL_OW 72
11657: IFFALSE 11706
11659: GO 11661
11661: DISABLE
// begin enable ;
11662: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11663: LD_EXP 3
11667: PPUSH
11668: LD_INT 3
11670: PPUSH
11671: LD_INT 34
11673: PPUSH
11674: LD_INT 42
11676: PPUSH
11677: LD_EXP 32
11681: PPUSH
11682: LD_INT 28
11684: PUSH
11685: LD_INT 10
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PPUSH
11692: LD_INT 26
11694: PUSH
11695: LD_INT 17
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PPUSH
11702: CALL 7555 0 7
// end ;
11706: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11707: LD_EXP 36
11711: PPUSH
11712: LD_INT 50
11714: PUSH
11715: EMPTY
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: IFFALSE 11771
11724: GO 11726
11726: DISABLE
// begin enable ;
11727: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11728: LD_EXP 3
11732: PPUSH
11733: LD_INT 4
11735: PPUSH
11736: LD_INT 36
11738: PPUSH
11739: LD_INT 44
11741: PPUSH
11742: LD_EXP 36
11746: PPUSH
11747: LD_INT 173
11749: PUSH
11750: LD_INT 72
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: LD_INT 167
11759: PUSH
11760: LD_INT 83
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PPUSH
11767: CALL 7555 0 7
// end ;
11771: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11772: LD_EXP 35
11776: PPUSH
11777: LD_INT 50
11779: PUSH
11780: EMPTY
11781: LIST
11782: PPUSH
11783: CALL_OW 72
11787: IFFALSE 11836
11789: GO 11791
11791: DISABLE
// begin enable ;
11792: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11793: LD_EXP 3
11797: PPUSH
11798: LD_INT 5
11800: PPUSH
11801: LD_INT 38
11803: PPUSH
11804: LD_INT 45
11806: PPUSH
11807: LD_EXP 35
11811: PPUSH
11812: LD_INT 147
11814: PUSH
11815: LD_INT 50
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PPUSH
11822: LD_INT 159
11824: PUSH
11825: LD_INT 40
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL 7555 0 7
// end ;
11836: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11837: LD_EXP 51
11841: IFFALSE 12053
11843: GO 11845
11845: DISABLE
11846: LD_INT 0
11848: PPUSH
11849: PPUSH
11850: PPUSH
// begin enable ;
11851: ENABLE
// p := 1 ;
11852: LD_ADDR_VAR 0 2
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: DOUBLE
11866: LD_INT 1
11868: DEC
11869: ST_TO_ADDR
11870: LD_EXP 51
11874: PPUSH
11875: CALL 18829 0 1
11879: PUSH
11880: LD_INT 2
11882: DIV
11883: PUSH
11884: FOR_TO
11885: IFFALSE 12051
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11887: LD_ADDR_VAR 0 3
11891: PUSH
11892: LD_EXP 51
11896: PUSH
11897: LD_VAR 0 2
11901: ARRAY
11902: PPUSH
11903: LD_EXP 51
11907: PUSH
11908: LD_VAR 0 2
11912: PUSH
11913: LD_INT 1
11915: PLUS
11916: ARRAY
11917: PPUSH
11918: CALL_OW 428
11922: ST_TO_ADDR
// if tmp then
11923: LD_VAR 0 3
11927: IFFALSE 12035
// if GetSide ( tmp ) <> side_bot then
11929: LD_VAR 0 3
11933: PPUSH
11934: CALL_OW 255
11938: PUSH
11939: LD_EXP 3
11943: NONEQUAL
11944: IFFALSE 12035
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
11946: LD_EXP 51
11950: PUSH
11951: LD_VAR 0 2
11955: ARRAY
11956: PPUSH
11957: LD_EXP 51
11961: PUSH
11962: LD_VAR 0 2
11966: PUSH
11967: LD_INT 1
11969: PLUS
11970: ARRAY
11971: PPUSH
11972: LD_EXP 3
11976: PPUSH
11977: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
11981: LD_ADDR_EXP 51
11985: PUSH
11986: LD_EXP 51
11990: PPUSH
11991: LD_VAR 0 2
11995: PPUSH
11996: CALL_OW 3
12000: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12001: LD_ADDR_EXP 51
12005: PUSH
12006: LD_EXP 51
12010: PPUSH
12011: LD_VAR 0 2
12015: PPUSH
12016: CALL_OW 3
12020: ST_TO_ADDR
// p := p - 2 ;
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_VAR 0 2
12030: PUSH
12031: LD_INT 2
12033: MINUS
12034: ST_TO_ADDR
// end ; p := p + 2 ;
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_VAR 0 2
12044: PUSH
12045: LD_INT 2
12047: PLUS
12048: ST_TO_ADDR
// end ;
12049: GO 11884
12051: POP
12052: POP
// end ; end_of_file
12053: PPOPN 3
12055: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12056: LD_INT 0
12058: PPUSH
12059: PPUSH
// begin if artifact_get then
12060: LD_EXP 4
12064: IFFALSE 12068
// exit ;
12066: GO 12090
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL_OW 255
12077: PPUSH
12078: CALL 5186 0 1
// artifact_get := true ;
12082: LD_ADDR_EXP 4
12086: PUSH
12087: LD_INT 1
12089: ST_TO_ADDR
// end ;
12090: PPOPN 4
12092: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 255
12102: PUSH
12103: LD_EXP 3
12107: NONEQUAL
12108: IFFALSE 12112
// exit ;
12110: GO 12181
// if not un in [ Saliba , Gensher , Shariff ] then
12112: LD_VAR 0 1
12116: PUSH
12117: LD_EXP 39
12121: PUSH
12122: LD_EXP 40
12126: PUSH
12127: LD_EXP 41
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: IN
12137: NOT
12138: IFFALSE 12159
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_VAR 0 2
12149: PPUSH
12150: LD_INT 0
12152: PPUSH
12153: CALL 5122 0 3
12157: GO 12181
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12159: LD_VAR 0 1
12163: PPUSH
12164: LD_VAR 0 2
12168: PPUSH
12169: LD_INT 5
12171: PPUSH
12172: CALL 4449 0 1
12176: PPUSH
12177: CALL 5122 0 3
// end ;
12181: PPOPN 3
12183: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12184: LD_INT 0
12186: PPUSH
12187: PPUSH
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
12195: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12196: LD_VAR 0 1
12200: PPUSH
12201: CALL 59522 0 1
// side := GetSide ( un ) ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 255
12219: ST_TO_ADDR
// if multi_sides [ side ] then
12220: LD_EXP 7
12224: PUSH
12225: LD_VAR 0 3
12229: ARRAY
12230: IFFALSE 12256
// if GetType ( un ) = unit_human then
12232: LD_VAR 0 1
12236: PPUSH
12237: CALL_OW 247
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: IFFALSE 12256
// MultiplayerEvent_HumanLost ( side ) ;
12247: LD_VAR 0 3
12251: PPUSH
12252: CALL 5008 0 1
// if side = side_bot then
12256: LD_VAR 0 3
12260: PUSH
12261: LD_EXP 3
12265: EQUAL
12266: IFFALSE 12712
// begin if GetType ( un ) = unit_building then
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 247
12277: PUSH
12278: LD_INT 3
12280: EQUAL
12281: IFFALSE 12511
// begin base := 0 ;
12283: LD_ADDR_VAR 0 4
12287: PUSH
12288: LD_INT 0
12290: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12291: LD_ADDR_VAR 0 2
12295: PUSH
12296: DOUBLE
12297: LD_INT 1
12299: DEC
12300: ST_TO_ADDR
12301: LD_EXP 49
12305: PPUSH
12306: CALL 18829 0 1
12310: PUSH
12311: FOR_TO
12312: IFFALSE 12350
// if IsInArea ( un , arAreas [ i ] ) then
12314: LD_VAR 0 1
12318: PPUSH
12319: LD_EXP 49
12323: PUSH
12324: LD_VAR 0 2
12328: ARRAY
12329: PPUSH
12330: CALL_OW 308
12334: IFFALSE 12348
// begin base := i ;
12336: LD_ADDR_VAR 0 4
12340: PUSH
12341: LD_VAR 0 2
12345: ST_TO_ADDR
// break ;
12346: GO 12350
// end ;
12348: GO 12311
12350: POP
12351: POP
// if not base then
12352: LD_VAR 0 4
12356: NOT
12357: IFFALSE 12361
// exit ;
12359: GO 12784
// btype := GetBType ( un ) ;
12361: LD_ADDR_VAR 0 11
12365: PUSH
12366: LD_VAR 0 1
12370: PPUSH
12371: CALL_OW 266
12375: ST_TO_ADDR
// if btype = b_barracks then
12376: LD_VAR 0 11
12380: PUSH
12381: LD_INT 5
12383: EQUAL
12384: IFFALSE 12394
// btype := b_armoury ;
12386: LD_ADDR_VAR 0 11
12390: PUSH
12391: LD_INT 4
12393: ST_TO_ADDR
// if btype = b_factory then
12394: LD_VAR 0 11
12398: PUSH
12399: LD_INT 3
12401: EQUAL
12402: IFFALSE 12412
// btype := b_workshop ;
12404: LD_ADDR_VAR 0 11
12408: PUSH
12409: LD_INT 2
12411: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12412: LD_VAR 0 11
12416: PUSH
12417: LD_INT 8
12419: PUSH
12420: LD_INT 7
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: IN
12427: IFFALSE 12437
// btype := b_lab ;
12429: LD_ADDR_VAR 0 11
12433: PUSH
12434: LD_INT 6
12436: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12437: LD_ADDR_EXP 44
12441: PUSH
12442: LD_EXP 44
12446: PPUSH
12447: LD_EXP 44
12451: PUSH
12452: LD_INT 1
12454: PLUS
12455: PPUSH
12456: LD_VAR 0 4
12460: PUSH
12461: LD_VAR 0 11
12465: PUSH
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 250
12475: PUSH
12476: LD_VAR 0 1
12480: PPUSH
12481: CALL_OW 251
12485: PUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: CALL_OW 254
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PPUSH
12506: CALL_OW 1
12510: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12511: LD_VAR 0 1
12515: PPUSH
12516: CALL_OW 247
12520: PUSH
12521: LD_INT 2
12523: EQUAL
12524: IFFALSE 12712
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12526: LD_ADDR_VAR 0 4
12530: PUSH
12531: LD_EXP 45
12535: PPUSH
12536: LD_INT 2
12538: PPUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL 59118 0 4
12551: ST_TO_ADDR
// if not base then
12552: LD_VAR 0 4
12556: NOT
12557: IFFALSE 12561
// exit ;
12559: GO 12784
// factory := arFactories [ base ] ;
12561: LD_ADDR_VAR 0 10
12565: PUSH
12566: LD_EXP 48
12570: PUSH
12571: LD_VAR 0 4
12575: ARRAY
12576: ST_TO_ADDR
// if not factory then
12577: LD_VAR 0 10
12581: NOT
12582: IFFALSE 12586
// exit ;
12584: GO 12784
// chassis := GetChassis ( un ) ;
12586: LD_ADDR_VAR 0 5
12590: PUSH
12591: LD_VAR 0 1
12595: PPUSH
12596: CALL_OW 265
12600: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12601: LD_ADDR_VAR 0 6
12605: PUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 262
12615: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12616: LD_ADDR_VAR 0 8
12620: PUSH
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 264
12630: ST_TO_ADDR
// control := control_remote ;
12631: LD_ADDR_VAR 0 7
12635: PUSH
12636: LD_INT 2
12638: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12639: LD_ADDR_VAR 0 9
12643: PUSH
12644: LD_VAR 0 10
12648: PPUSH
12649: LD_VAR 0 5
12653: PPUSH
12654: LD_VAR 0 6
12658: PPUSH
12659: LD_VAR 0 7
12663: PPUSH
12664: LD_VAR 0 8
12668: PPUSH
12669: CALL 19187 0 5
12673: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12674: LD_ADDR_EXP 43
12678: PUSH
12679: LD_EXP 43
12683: PPUSH
12684: LD_EXP 43
12688: PUSH
12689: LD_INT 1
12691: PLUS
12692: PPUSH
12693: LD_VAR 0 4
12697: PUSH
12698: LD_VAR 0 9
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 1
12711: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders then
12712: LD_EXP 24
12716: PUSH
12717: LD_EXP 16
12721: AND
12722: IFFALSE 12784
// if un in multi_commanders then
12724: LD_VAR 0 1
12728: PUSH
12729: LD_EXP 24
12733: IN
12734: IFFALSE 12784
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12736: LD_ADDR_EXP 25
12740: PUSH
12741: LD_EXP 25
12745: PPUSH
12746: LD_VAR 0 3
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 1
12758: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12759: LD_ADDR_EXP 24
12763: PUSH
12764: LD_EXP 24
12768: PUSH
12769: LD_VAR 0 1
12773: DIFF
12774: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12775: LD_VAR 0 3
12779: PPUSH
12780: CALL 4482 0 1
// end ; end ;
12784: PPOPN 11
12786: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12787: LD_INT 0
12789: PPUSH
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
// begin side := GetSide ( building ) ;
12794: LD_ADDR_VAR 0 4
12798: PUSH
12799: LD_VAR 0 1
12803: PPUSH
12804: CALL_OW 255
12808: ST_TO_ADDR
// if multi_sides [ side ] then
12809: LD_EXP 7
12813: PUSH
12814: LD_VAR 0 4
12818: ARRAY
12819: IFFALSE 12840
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12821: LD_VAR 0 4
12825: PPUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: CALL_OW 266
12835: PPUSH
12836: CALL 5052 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 266
12849: PUSH
12850: LD_INT 0
12852: EQUAL
12853: PUSH
12854: LD_EXP 7
12858: PUSH
12859: LD_VAR 0 4
12863: ARRAY
12864: NOT
12865: AND
12866: PUSH
12867: LD_EXP 5
12871: AND
12872: IFFALSE 12910
// begin SetBName ( building , base_names [ 1 ] ) ;
12874: LD_VAR 0 1
12878: PPUSH
12879: LD_EXP 5
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12892: LD_ADDR_EXP 5
12896: PUSH
12897: LD_EXP 5
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 3
12909: ST_TO_ADDR
// end ; if side = side_bot then
12910: LD_VAR 0 4
12914: PUSH
12915: LD_EXP 3
12919: EQUAL
12920: IFFALSE 13171
// begin base := 0 ;
12922: LD_ADDR_VAR 0 5
12926: PUSH
12927: LD_INT 0
12929: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12930: LD_ADDR_VAR 0 2
12934: PUSH
12935: DOUBLE
12936: LD_INT 1
12938: DEC
12939: ST_TO_ADDR
12940: LD_EXP 49
12944: PPUSH
12945: CALL 18829 0 1
12949: PUSH
12950: FOR_TO
12951: IFFALSE 12989
// if IsInArea ( building , arAreas [ i ] ) then
12953: LD_VAR 0 1
12957: PPUSH
12958: LD_EXP 49
12962: PUSH
12963: LD_VAR 0 2
12967: ARRAY
12968: PPUSH
12969: CALL_OW 308
12973: IFFALSE 12987
// begin base := i ;
12975: LD_ADDR_VAR 0 5
12979: PUSH
12980: LD_VAR 0 2
12984: ST_TO_ADDR
// break ;
12985: GO 12989
// end ;
12987: GO 12950
12989: POP
12990: POP
// if not base then
12991: LD_VAR 0 5
12995: NOT
12996: IFFALSE 13000
// exit ;
12998: GO 13171
// for i := 1 to Count ( arBuildings ) do
13000: LD_ADDR_VAR 0 2
13004: PUSH
13005: DOUBLE
13006: LD_INT 1
13008: DEC
13009: ST_TO_ADDR
13010: LD_EXP 44
13014: PPUSH
13015: CALL 18829 0 1
13019: PUSH
13020: FOR_TO
13021: IFFALSE 13073
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13023: LD_EXP 44
13027: PUSH
13028: LD_VAR 0 2
13032: ARRAY
13033: PUSH
13034: LD_INT 1
13036: ARRAY
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PUSH
13042: LD_VAR 0 5
13046: EQUAL
13047: IFFALSE 13071
// begin arBuildings := Delete ( arBuildings , i ) ;
13049: LD_ADDR_EXP 44
13053: PUSH
13054: LD_EXP 44
13058: PPUSH
13059: LD_VAR 0 2
13063: PPUSH
13064: CALL_OW 3
13068: ST_TO_ADDR
// break ;
13069: GO 13073
// end ;
13071: GO 13020
13073: POP
13074: POP
// btype := GetBType ( building ) ;
13075: LD_ADDR_VAR 0 6
13079: PUSH
13080: LD_VAR 0 1
13084: PPUSH
13085: CALL_OW 266
13089: ST_TO_ADDR
// case btype of b_armoury :
13090: LD_VAR 0 6
13094: PUSH
13095: LD_INT 4
13097: DOUBLE
13098: EQUAL
13099: IFTRUE 13103
13101: GO 13115
13103: POP
// ComUpgrade ( building ) ; b_workshop :
13104: LD_VAR 0 1
13108: PPUSH
13109: CALL_OW 146
13113: GO 13171
13115: LD_INT 2
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 13135
13123: POP
// ComUpgrade ( building ) ; b_lab :
13124: LD_VAR 0 1
13128: PPUSH
13129: CALL_OW 146
13133: GO 13171
13135: LD_INT 6
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13170
13143: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 10
13151: PPUSH
13152: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13156: LD_VAR 0 1
13160: PPUSH
13161: LD_INT 15
13163: PPUSH
13164: CALL_OW 207
// end ; end ;
13168: GO 13171
13170: POP
// end ; end ;
13171: PPOPN 6
13173: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13174: LD_INT 0
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
13180: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_VAR 0 2
13190: PPUSH
13191: CALL 59580 0 2
// side := GetSide ( vehicle ) ;
13195: LD_ADDR_VAR 0 4
13199: PUSH
13200: LD_VAR 0 1
13204: PPUSH
13205: CALL_OW 255
13209: ST_TO_ADDR
// if multi_sides [ side ] then
13210: LD_EXP 7
13214: PUSH
13215: LD_VAR 0 4
13219: ARRAY
13220: IFFALSE 13231
// MultiplayerEvent_Produced ( side ) ;
13222: LD_VAR 0 4
13226: PPUSH
13227: CALL 4964 0 1
// if side_bot = side then
13231: LD_EXP 3
13235: PUSH
13236: LD_VAR 0 4
13240: EQUAL
13241: IFFALSE 13433
// begin base := 0 ;
13243: LD_ADDR_VAR 0 6
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13251: LD_ADDR_VAR 0 3
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_EXP 48
13265: PPUSH
13266: CALL 18829 0 1
13270: PUSH
13271: FOR_TO
13272: IFFALSE 13306
// if arFactories [ i ] = factory then
13274: LD_EXP 48
13278: PUSH
13279: LD_VAR 0 3
13283: ARRAY
13284: PUSH
13285: LD_VAR 0 2
13289: EQUAL
13290: IFFALSE 13304
// begin base := i ;
13292: LD_ADDR_VAR 0 6
13296: PUSH
13297: LD_VAR 0 3
13301: ST_TO_ADDR
// break ;
13302: GO 13306
// end ;
13304: GO 13271
13306: POP
13307: POP
// if not base then
13308: LD_VAR 0 6
13312: NOT
13313: IFFALSE 13317
// exit ;
13315: GO 13433
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13317: LD_EXP 50
13321: PUSH
13322: LD_VAR 0 6
13326: ARRAY
13327: PUSH
13328: LD_EXP 45
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: LD_VAR 0 6
13340: PPUSH
13341: LD_INT 2
13343: PPUSH
13344: CALL 59118 0 4
13348: GREATER
13349: PUSH
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL_OW 266
13359: PUSH
13360: LD_INT 32
13362: PUSH
13363: LD_INT 88
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: IN
13370: OR
13371: IFFALSE 13404
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13373: LD_ADDR_EXP 45
13377: PUSH
13378: LD_EXP 45
13382: PPUSH
13383: LD_VAR 0 6
13387: PUSH
13388: LD_VAR 0 1
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PPUSH
13397: CALL 54438 0 2
13401: ST_TO_ADDR
13402: GO 13433
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13404: LD_ADDR_EXP 46
13408: PUSH
13409: LD_EXP 46
13413: PPUSH
13414: LD_VAR 0 6
13418: PUSH
13419: LD_VAR 0 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PPUSH
13428: CALL 54438 0 2
13432: ST_TO_ADDR
// end ; end ;
13433: PPOPN 7
13435: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13436: LD_VAR 0 1
13440: PPUSH
13441: CALL_OW 110
13445: PUSH
13446: LD_INT 7
13448: EQUAL
13449: IFFALSE 13463
// SetTag ( driver , 0 ) ;
13451: LD_VAR 0 1
13455: PPUSH
13456: LD_INT 0
13458: PPUSH
13459: CALL_OW 109
// end ;
13463: PPOPN 4
13465: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13466: LD_VAR 0 2
13470: PPUSH
13471: CALL_OW 255
13475: PUSH
13476: LD_EXP 3
13480: EQUAL
13481: IFFALSE 13511
// if tech in arTech then
13483: LD_VAR 0 1
13487: PUSH
13488: LD_EXP 42
13492: IN
13493: IFFALSE 13511
// arTech := arTech diff tech ;
13495: LD_ADDR_EXP 42
13499: PUSH
13500: LD_EXP 42
13504: PUSH
13505: LD_VAR 0 1
13509: DIFF
13510: ST_TO_ADDR
// end ;
13511: PPOPN 2
13513: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
13514: LD_VAR 0 1
13518: PPUSH
13519: CALL 59539 0 1
// end ; end_of_file
13523: PPOPN 1
13525: END
// every 0 0$20 trigger game do
13526: LD_EXP 2
13530: IFFALSE 13575
13532: GO 13534
13534: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13535: LD_INT 7
13537: PUSH
13538: LD_INT 6
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: LD_INT 6
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PPUSH
13553: LD_EXP 21
13557: PUSH
13558: LD_INT 2
13560: ARRAY
13561: PPUSH
13562: LD_EXP 21
13566: PUSH
13567: LD_INT 1
13569: ARRAY
13570: PPUSH
13571: CALL 13576 0 3
13575: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13576: LD_INT 0
13578: PPUSH
13579: PPUSH
13580: PPUSH
13581: PPUSH
// if not areas then
13582: LD_VAR 0 1
13586: NOT
13587: IFFALSE 13591
// exit ;
13589: GO 13968
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13591: LD_ADDR_VAR 0 7
13595: PUSH
13596: LD_INT 31
13598: PUSH
13599: LD_INT 32
13601: PUSH
13602: LD_INT 30
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: ST_TO_ADDR
// x := 5 ;
13610: LD_ADDR_VAR 0 6
13614: PUSH
13615: LD_INT 5
13617: ST_TO_ADDR
// repeat wait ( time ) ;
13618: LD_VAR 0 2
13622: PPUSH
13623: CALL_OW 67
// if tick < [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
13627: LD_OWVAR 1
13631: PUSH
13632: LD_INT 52500
13634: PUSH
13635: LD_INT 48300
13637: PUSH
13638: LD_INT 44100
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: LD_OWVAR 67
13650: ARRAY
13651: LESS
13652: IFFALSE 13791
// begin for i := 1 to multi_sides do
13654: LD_ADDR_VAR 0 5
13658: PUSH
13659: DOUBLE
13660: LD_INT 1
13662: DEC
13663: ST_TO_ADDR
13664: LD_EXP 7
13668: PUSH
13669: FOR_TO
13670: IFFALSE 13782
// if multi_sides [ i ] then
13672: LD_EXP 7
13676: PUSH
13677: LD_VAR 0 5
13681: ARRAY
13682: IFFALSE 13780
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13684: LD_VAR 0 7
13688: PUSH
13689: LD_EXP 7
13693: PUSH
13694: LD_VAR 0 5
13698: ARRAY
13699: ARRAY
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: CALL_OW 287
13708: PUSH
13709: LD_INT 25
13711: PUSH
13712: LD_INT 22
13714: PUSH
13715: LD_INT 20
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: LD_OWVAR 67
13727: ARRAY
13728: LESS
13729: IFFALSE 13780
// begin amount := amount - ( x * 10 ) ;
13731: LD_ADDR_VAR 0 3
13735: PUSH
13736: LD_VAR 0 3
13740: PUSH
13741: LD_VAR 0 6
13745: PUSH
13746: LD_INT 10
13748: MUL
13749: MINUS
13750: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13751: LD_VAR 0 6
13755: PPUSH
13756: LD_VAR 0 7
13760: PUSH
13761: LD_EXP 7
13765: PUSH
13766: LD_VAR 0 5
13770: ARRAY
13771: ARRAY
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 55
// end ; end ;
13780: GO 13669
13782: POP
13783: POP
// wait ( 0 0$2 ) ;
13784: LD_INT 70
13786: PPUSH
13787: CALL_OW 67
// end ; for i in areas do
13791: LD_ADDR_VAR 0 5
13795: PUSH
13796: LD_VAR 0 1
13800: PUSH
13801: FOR_IN
13802: IFFALSE 13885
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13804: LD_VAR 0 5
13808: PPUSH
13809: LD_INT 1
13811: PPUSH
13812: CALL_OW 287
13816: PUSH
13817: LD_INT 25
13819: PUSH
13820: LD_INT 22
13822: PUSH
13823: LD_INT 20
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: LD_OWVAR 67
13835: ARRAY
13836: LESS
13837: IFFALSE 13883
// begin wait ( 0 0$5 ) ;
13839: LD_INT 175
13841: PPUSH
13842: CALL_OW 67
// amount := amount - ( x * 10 ) ;
13846: LD_ADDR_VAR 0 3
13850: PUSH
13851: LD_VAR 0 3
13855: PUSH
13856: LD_VAR 0 6
13860: PUSH
13861: LD_INT 10
13863: MUL
13864: MINUS
13865: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
13866: LD_VAR 0 6
13870: PPUSH
13871: LD_VAR 0 5
13875: PPUSH
13876: LD_INT 1
13878: PPUSH
13879: CALL_OW 55
// end ; end ;
13883: GO 13801
13885: POP
13886: POP
// time := time + 0 0$2 ;
13887: LD_ADDR_VAR 0 2
13891: PUSH
13892: LD_VAR 0 2
13896: PUSH
13897: LD_INT 70
13899: PLUS
13900: ST_TO_ADDR
// x := x - 1 ;
13901: LD_ADDR_VAR 0 6
13905: PUSH
13906: LD_VAR 0 6
13910: PUSH
13911: LD_INT 1
13913: MINUS
13914: ST_TO_ADDR
// if x = 0 then
13915: LD_VAR 0 6
13919: PUSH
13920: LD_INT 0
13922: EQUAL
13923: IFFALSE 13933
// x := 5 ;
13925: LD_ADDR_VAR 0 6
13929: PUSH
13930: LD_INT 5
13932: ST_TO_ADDR
// if time > 1 1$10 then
13933: LD_VAR 0 2
13937: PUSH
13938: LD_INT 2450
13940: GREATER
13941: IFFALSE 13951
// time := 0 0$30 ;
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_INT 1050
13950: ST_TO_ADDR
// until not game or amount <= 0 ;
13951: LD_EXP 2
13955: NOT
13956: PUSH
13957: LD_VAR 0 3
13961: PUSH
13962: LD_INT 0
13964: LESSEQUAL
13965: OR
13966: IFFALSE 13618
// end ; end_of_file
13968: LD_VAR 0 4
13972: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
13973: GO 13975
13975: DISABLE
13976: LD_INT 0
13978: PPUSH
// begin NorthBase := 2 ;
13979: LD_ADDR_LOC 1
13983: PUSH
13984: LD_INT 2
13986: ST_TO_ADDR
// WestBase := 3 ;
13987: LD_ADDR_LOC 2
13991: PUSH
13992: LD_INT 3
13994: ST_TO_ADDR
// end ;
13995: PPOPN 1
13997: END
// every 10 10$00 do var i ;
13998: GO 14000
14000: DISABLE
14001: LD_INT 0
14003: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: DOUBLE
14010: LD_INT 1
14012: DEC
14013: ST_TO_ADDR
14014: LD_INT 3
14016: PUSH
14017: LD_INT 4
14019: PUSH
14020: LD_INT 5
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: LIST
14027: PUSH
14028: LD_OWVAR 67
14032: ARRAY
14033: PUSH
14034: FOR_TO
14035: IFFALSE 14136
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14037: LD_ADDR_EXP 43
14041: PUSH
14042: LD_EXP 43
14046: PPUSH
14047: LD_EXP 43
14051: PUSH
14052: LD_INT 1
14054: PLUS
14055: PPUSH
14056: LD_LOC 1
14060: PUSH
14061: LD_INT 14
14063: PUSH
14064: LD_INT 3
14066: PUSH
14067: LD_INT 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 1
14076: PPUSH
14077: LD_INT 2
14079: PPUSH
14080: CALL_OW 12
14084: ARRAY
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 27
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 28
14097: PUSH
14098: LD_INT 29
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 1
14109: PPUSH
14110: LD_INT 4
14112: PPUSH
14113: CALL_OW 12
14117: ARRAY
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 1
14133: ST_TO_ADDR
// end ;
14134: GO 14034
14136: POP
14137: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14138: LD_ADDR_VAR 0 1
14142: PUSH
14143: DOUBLE
14144: LD_INT 1
14146: DEC
14147: ST_TO_ADDR
14148: LD_INT 3
14150: PUSH
14151: LD_INT 4
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: PUSH
14162: LD_OWVAR 67
14166: ARRAY
14167: PUSH
14168: FOR_TO
14169: IFFALSE 14251
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14171: LD_ADDR_EXP 43
14175: PUSH
14176: LD_EXP 43
14180: PPUSH
14181: LD_EXP 43
14185: PUSH
14186: LD_INT 1
14188: PLUS
14189: PPUSH
14190: LD_LOC 2
14194: PUSH
14195: LD_INT 14
14197: PUSH
14198: LD_INT 1
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: LD_INT 27
14206: PUSH
14207: LD_INT 25
14209: PUSH
14210: LD_INT 28
14212: PUSH
14213: LD_INT 26
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 1
14224: PPUSH
14225: LD_INT 4
14227: PPUSH
14228: CALL_OW 12
14232: ARRAY
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 1
14248: ST_TO_ADDR
// end ;
14249: GO 14168
14251: POP
14252: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14253: LD_INT 16800
14255: PUSH
14256: LD_INT 2100
14258: PUSH
14259: LD_OWVAR 67
14263: MUL
14264: MINUS
14265: PPUSH
14266: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: DOUBLE
14276: LD_INT 1
14278: DEC
14279: ST_TO_ADDR
14280: LD_INT 5
14282: PUSH
14283: LD_INT 5
14285: PUSH
14286: LD_INT 6
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: LIST
14293: PUSH
14294: LD_OWVAR 67
14298: ARRAY
14299: PUSH
14300: FOR_TO
14301: IFFALSE 14402
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14303: LD_ADDR_EXP 43
14307: PUSH
14308: LD_EXP 43
14312: PPUSH
14313: LD_EXP 43
14317: PUSH
14318: LD_INT 1
14320: PLUS
14321: PPUSH
14322: LD_LOC 1
14326: PUSH
14327: LD_INT 14
14329: PUSH
14330: LD_INT 3
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 1
14342: PPUSH
14343: LD_INT 2
14345: PPUSH
14346: CALL_OW 12
14350: ARRAY
14351: PUSH
14352: LD_INT 2
14354: PUSH
14355: LD_INT 27
14357: PUSH
14358: LD_INT 25
14360: PUSH
14361: LD_INT 28
14363: PUSH
14364: LD_INT 29
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: PPUSH
14376: LD_INT 4
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 1
14399: ST_TO_ADDR
// end ;
14400: GO 14300
14402: POP
14403: POP
// if tick > 30 30$0 then
14404: LD_OWVAR 1
14408: PUSH
14409: LD_INT 63000
14411: GREATER
14412: IFFALSE 14488
// begin for i := 1 to tick div 30 30$0 do
14414: LD_ADDR_VAR 0 1
14418: PUSH
14419: DOUBLE
14420: LD_INT 1
14422: DEC
14423: ST_TO_ADDR
14424: LD_OWVAR 1
14428: PUSH
14429: LD_INT 63000
14431: DIV
14432: PUSH
14433: FOR_TO
14434: IFFALSE 14486
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14436: LD_ADDR_EXP 43
14440: PUSH
14441: LD_EXP 43
14445: PPUSH
14446: LD_EXP 43
14450: PUSH
14451: LD_INT 1
14453: PLUS
14454: PPUSH
14455: LD_LOC 1
14459: PUSH
14460: LD_INT 14
14462: PUSH
14463: LD_INT 3
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: LD_INT 29
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: PPUSH
14479: CALL_OW 1
14483: ST_TO_ADDR
14484: GO 14433
14486: POP
14487: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14488: LD_ADDR_VAR 0 1
14492: PUSH
14493: DOUBLE
14494: LD_INT 1
14496: DEC
14497: ST_TO_ADDR
14498: LD_INT 5
14500: PUSH
14501: LD_INT 6
14503: PUSH
14504: LD_INT 6
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: PUSH
14512: LD_OWVAR 67
14516: ARRAY
14517: PUSH
14518: FOR_TO
14519: IFFALSE 14601
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14521: LD_ADDR_EXP 43
14525: PUSH
14526: LD_EXP 43
14530: PPUSH
14531: LD_EXP 43
14535: PUSH
14536: LD_INT 1
14538: PLUS
14539: PPUSH
14540: LD_LOC 2
14544: PUSH
14545: LD_INT 14
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: LD_INT 27
14556: PUSH
14557: LD_INT 25
14559: PUSH
14560: LD_INT 28
14562: PUSH
14563: LD_INT 26
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 1
14574: PPUSH
14575: LD_INT 4
14577: PPUSH
14578: CALL_OW 12
14582: ARRAY
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PPUSH
14594: CALL_OW 1
14598: ST_TO_ADDR
// end ;
14599: GO 14518
14601: POP
14602: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14603: LD_INT 21000
14605: PUSH
14606: LD_INT 18900
14608: PUSH
14609: LD_INT 16800
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PUSH
14617: LD_OWVAR 67
14621: ARRAY
14622: PPUSH
14623: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14627: LD_ADDR_VAR 0 1
14631: PUSH
14632: DOUBLE
14633: LD_INT 1
14635: DEC
14636: ST_TO_ADDR
14637: LD_INT 5
14639: PUSH
14640: LD_INT 6
14642: PUSH
14643: LD_INT 7
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_OWVAR 67
14655: ARRAY
14656: PUSH
14657: FOR_TO
14658: IFFALSE 14759
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14660: LD_ADDR_EXP 43
14664: PUSH
14665: LD_EXP 43
14669: PPUSH
14670: LD_EXP 43
14674: PUSH
14675: LD_INT 1
14677: PLUS
14678: PPUSH
14679: LD_LOC 1
14683: PUSH
14684: LD_INT 14
14686: PUSH
14687: LD_INT 3
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 1
14699: PPUSH
14700: LD_INT 2
14702: PPUSH
14703: CALL_OW 12
14707: ARRAY
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: LD_INT 27
14714: PUSH
14715: LD_INT 25
14717: PUSH
14718: LD_INT 28
14720: PUSH
14721: LD_INT 29
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 1
14732: PPUSH
14733: LD_INT 4
14735: PPUSH
14736: CALL_OW 12
14740: ARRAY
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 1
14756: ST_TO_ADDR
// end ;
14757: GO 14657
14759: POP
14760: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14761: LD_ADDR_VAR 0 1
14765: PUSH
14766: DOUBLE
14767: LD_INT 1
14769: DEC
14770: ST_TO_ADDR
14771: LD_INT 4
14773: PUSH
14774: LD_INT 5
14776: PUSH
14777: LD_INT 6
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: PUSH
14785: LD_OWVAR 67
14789: ARRAY
14790: PUSH
14791: FOR_TO
14792: IFFALSE 14874
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14794: LD_ADDR_EXP 43
14798: PUSH
14799: LD_EXP 43
14803: PPUSH
14804: LD_EXP 43
14808: PUSH
14809: LD_INT 1
14811: PLUS
14812: PPUSH
14813: LD_LOC 2
14817: PUSH
14818: LD_INT 14
14820: PUSH
14821: LD_INT 1
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: LD_INT 27
14829: PUSH
14830: LD_INT 25
14832: PUSH
14833: LD_INT 28
14835: PUSH
14836: LD_INT 26
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 1
14847: PPUSH
14848: LD_INT 4
14850: PPUSH
14851: CALL_OW 12
14855: ARRAY
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PPUSH
14867: CALL_OW 1
14871: ST_TO_ADDR
// end ;
14872: GO 14791
14874: POP
14875: POP
// until false ;
14876: LD_INT 0
14878: IFFALSE 14603
// end ;
14880: PPOPN 1
14882: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14883: LD_EXP 46
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: LD_LOC 1
14895: PPUSH
14896: LD_INT 2
14898: PPUSH
14899: CALL 59118 0 4
14903: IFFALSE 15072
14905: GO 14907
14907: DISABLE
14908: LD_INT 0
14910: PPUSH
14911: PPUSH
// begin enable ;
14912: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
14913: LD_ADDR_VAR 0 2
14917: PUSH
14918: LD_EXP 46
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: LD_LOC 1
14930: PPUSH
14931: LD_INT 2
14933: PPUSH
14934: CALL 59118 0 4
14938: ST_TO_ADDR
// if not tmp then
14939: LD_VAR 0 2
14943: NOT
14944: IFFALSE 14948
// exit ;
14946: GO 15072
// for i := Count ( arVehiclesAtttackers ) downto 1 do
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: DOUBLE
14954: LD_EXP 46
14958: PPUSH
14959: CALL 18829 0 1
14963: INC
14964: ST_TO_ADDR
14965: LD_INT 1
14967: PUSH
14968: FOR_DOWNTO
14969: IFFALSE 15015
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
14971: LD_EXP 46
14975: PUSH
14976: LD_VAR 0 1
14980: ARRAY
14981: PUSH
14982: LD_INT 2
14984: ARRAY
14985: PUSH
14986: LD_VAR 0 2
14990: IN
14991: IFFALSE 15013
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
14993: LD_ADDR_EXP 46
14997: PUSH
14998: LD_EXP 46
15002: PPUSH
15003: LD_VAR 0 1
15007: PPUSH
15008: CALL_OW 3
15012: ST_TO_ADDR
15013: GO 14968
15015: POP
15016: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15017: LD_VAR 0 2
15021: PPUSH
15022: LD_INT 164
15024: PUSH
15025: LD_INT 40
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 174
15034: PUSH
15035: LD_INT 72
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 174
15044: PUSH
15045: LD_INT 93
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 196
15054: PUSH
15055: LD_INT 110
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: PPUSH
15068: CALL 15267 0 2
// end ;
15072: PPOPN 2
15074: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15075: LD_EXP 46
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: LD_LOC 2
15087: PPUSH
15088: LD_INT 2
15090: PPUSH
15091: CALL 59118 0 4
15095: IFFALSE 15264
15097: GO 15099
15099: DISABLE
15100: LD_INT 0
15102: PPUSH
15103: PPUSH
// begin enable ;
15104: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: LD_EXP 46
15114: PPUSH
15115: LD_INT 1
15117: PPUSH
15118: LD_LOC 2
15122: PPUSH
15123: LD_INT 2
15125: PPUSH
15126: CALL 59118 0 4
15130: ST_TO_ADDR
// if not tmp then
15131: LD_VAR 0 2
15135: NOT
15136: IFFALSE 15140
// exit ;
15138: GO 15264
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: DOUBLE
15146: LD_EXP 46
15150: PPUSH
15151: CALL 18829 0 1
15155: INC
15156: ST_TO_ADDR
15157: LD_INT 1
15159: PUSH
15160: FOR_DOWNTO
15161: IFFALSE 15207
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15163: LD_EXP 46
15167: PUSH
15168: LD_VAR 0 1
15172: ARRAY
15173: PUSH
15174: LD_INT 2
15176: ARRAY
15177: PUSH
15178: LD_VAR 0 2
15182: IN
15183: IFFALSE 15205
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15185: LD_ADDR_EXP 46
15189: PUSH
15190: LD_EXP 46
15194: PPUSH
15195: LD_VAR 0 1
15199: PPUSH
15200: CALL_OW 3
15204: ST_TO_ADDR
15205: GO 15160
15207: POP
15208: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15209: LD_VAR 0 2
15213: PPUSH
15214: LD_INT 49
15216: PUSH
15217: LD_INT 37
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 54
15226: PUSH
15227: LD_INT 68
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 77
15236: PUSH
15237: LD_INT 91
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 95
15246: PUSH
15247: LD_INT 104
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: PPUSH
15260: CALL 15267 0 2
// end ;
15264: PPOPN 2
15266: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
// repeat wait ( 0 0$1 ) ;
15271: LD_INT 35
15273: PPUSH
15274: CALL_OW 67
// for i in attackers do
15278: LD_ADDR_VAR 0 4
15282: PUSH
15283: LD_VAR 0 1
15287: PUSH
15288: FOR_IN
15289: IFFALSE 15346
// begin if not IsOk ( i ) then
15291: LD_VAR 0 4
15295: PPUSH
15296: CALL_OW 302
15300: NOT
15301: IFFALSE 15330
// begin ComUnlink ( i ) ;
15303: LD_VAR 0 4
15307: PPUSH
15308: CALL_OW 136
// attackers := attackers diff i ;
15312: LD_ADDR_VAR 0 1
15316: PUSH
15317: LD_VAR 0 1
15321: PUSH
15322: LD_VAR 0 4
15326: DIFF
15327: ST_TO_ADDR
// continue ;
15328: GO 15288
// end ; AgressiveMove ( i , path ) ;
15330: LD_VAR 0 4
15334: PPUSH
15335: LD_VAR 0 2
15339: PPUSH
15340: CALL 57042 0 2
// end ;
15344: GO 15288
15346: POP
15347: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: LD_INT 50
15355: PUSH
15356: EMPTY
15357: LIST
15358: PPUSH
15359: CALL_OW 72
15363: NOT
15364: IFFALSE 15271
// end ;
15366: LD_VAR 0 3
15370: RET
// every 0 0$10 trigger not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot do var i , un , tmp , enemy ;
15371: LD_INT 7
15373: PPUSH
15374: CALL_OW 302
15378: NOT
15379: PUSH
15380: LD_INT 7
15382: PPUSH
15383: CALL_OW 255
15387: PUSH
15388: LD_EXP 3
15392: NONEQUAL
15393: OR
15394: IFFALSE 15759
15396: GO 15398
15398: DISABLE
15399: LD_INT 0
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
// begin for i := 1 to 3 do
15405: LD_ADDR_VAR 0 1
15409: PUSH
15410: DOUBLE
15411: LD_INT 1
15413: DEC
15414: ST_TO_ADDR
15415: LD_INT 3
15417: PUSH
15418: FOR_TO
15419: IFFALSE 15569
// begin uc_side := 2 ;
15421: LD_ADDR_OWVAR 20
15425: PUSH
15426: LD_INT 2
15428: ST_TO_ADDR
// uc_nation := nation_arabian ;
15429: LD_ADDR_OWVAR 21
15433: PUSH
15434: LD_INT 2
15436: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15437: LD_INT 11
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_INT 2
15445: PPUSH
15446: LD_INT 24
15448: PUSH
15449: LD_INT 23
15451: PUSH
15452: LD_INT 92
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: LIST
15459: PUSH
15460: LD_INT 1
15462: PPUSH
15463: LD_INT 3
15465: PPUSH
15466: CALL_OW 12
15470: ARRAY
15471: PPUSH
15472: LD_INT 100
15474: PPUSH
15475: CALL 21567 0 5
// un := CreateVehicle ;
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: CALL_OW 45
15488: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15489: LD_VAR 0 2
15493: PPUSH
15494: LD_INT 2
15496: PPUSH
15497: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15501: LD_VAR 0 2
15505: PPUSH
15506: LD_INT 47
15508: PPUSH
15509: LD_INT 0
15511: PPUSH
15512: CALL_OW 49
// Connect ( un ) ;
15516: LD_VAR 0 2
15520: PPUSH
15521: CALL 25035 0 1
// wait ( 0 0$0.3 ) ;
15525: LD_INT 10
15527: PPUSH
15528: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15532: LD_VAR 0 2
15536: PPUSH
15537: LD_INT 73
15539: PPUSH
15540: LD_INT 17
15542: PPUSH
15543: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15547: LD_ADDR_VAR 0 3
15551: PUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_VAR 0 2
15561: PPUSH
15562: CALL 54438 0 2
15566: ST_TO_ADDR
// end ;
15567: GO 15418
15569: POP
15570: POP
// repeat wait ( 0 0$1 ) ;
15571: LD_INT 35
15573: PPUSH
15574: CALL_OW 67
// for i in tmp do
15578: LD_ADDR_VAR 0 1
15582: PUSH
15583: LD_VAR 0 3
15587: PUSH
15588: FOR_IN
15589: IFFALSE 15750
// begin if not IsOk ( i ) then
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 302
15600: NOT
15601: IFFALSE 15630
// begin ComAutodestruct ( i ) ;
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL 49930 0 1
// tmp := tmp diff i ;
15612: LD_ADDR_VAR 0 3
15616: PUSH
15617: LD_VAR 0 3
15621: PUSH
15622: LD_VAR 0 1
15626: DIFF
15627: ST_TO_ADDR
// continue ;
15628: GO 15588
// end ; if GetLives ( i ) < 750 then
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 256
15639: PUSH
15640: LD_INT 750
15642: LESS
15643: IFFALSE 15704
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15645: LD_ADDR_VAR 0 4
15649: PUSH
15650: LD_INT 81
15652: PUSH
15653: LD_VAR 0 1
15657: PPUSH
15658: CALL_OW 255
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PPUSH
15667: CALL_OW 69
15671: PPUSH
15672: LD_VAR 0 1
15676: PPUSH
15677: CALL_OW 74
15681: ST_TO_ADDR
// if enemy then
15682: LD_VAR 0 4
15686: IFFALSE 15702
// ComMoveUnit ( i , enemy ) ;
15688: LD_VAR 0 1
15692: PPUSH
15693: LD_VAR 0 4
15697: PPUSH
15698: CALL_OW 112
// end else
15702: GO 15748
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15704: LD_VAR 0 1
15708: PPUSH
15709: LD_INT 76
15711: PUSH
15712: LD_INT 31
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 93
15721: PUSH
15722: LD_INT 67
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 108
15731: PUSH
15732: LD_INT 97
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: PPUSH
15744: CALL 57042 0 2
// end ;
15748: GO 15588
15750: POP
15751: POP
// until not tmp ;
15752: LD_VAR 0 3
15756: NOT
15757: IFFALSE 15571
// end ;
15759: PPOPN 4
15761: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15762: LD_INT 7
15764: PPUSH
15765: CALL_OW 302
15769: NOT
15770: PUSH
15771: LD_INT 7
15773: PPUSH
15774: CALL_OW 255
15778: PUSH
15779: LD_EXP 3
15783: NONEQUAL
15784: OR
15785: PUSH
15786: LD_INT 45
15788: PPUSH
15789: CALL_OW 302
15793: PUSH
15794: LD_INT 45
15796: PPUSH
15797: CALL_OW 255
15801: PUSH
15802: LD_EXP 3
15806: EQUAL
15807: AND
15808: AND
15809: IFFALSE 16166
15811: GO 15813
15813: DISABLE
15814: LD_INT 0
15816: PPUSH
15817: PPUSH
15818: PPUSH
15819: PPUSH
// begin enable ;
15820: ENABLE
// for i := 1 to 3 do
15821: LD_ADDR_VAR 0 1
15825: PUSH
15826: DOUBLE
15827: LD_INT 1
15829: DEC
15830: ST_TO_ADDR
15831: LD_INT 3
15833: PUSH
15834: FOR_TO
15835: IFFALSE 15976
// begin uc_side := 2 ;
15837: LD_ADDR_OWVAR 20
15841: PUSH
15842: LD_INT 2
15844: ST_TO_ADDR
// uc_nation := nation_arabian ;
15845: LD_ADDR_OWVAR 21
15849: PUSH
15850: LD_INT 2
15852: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15853: LD_INT 11
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: LD_INT 5
15861: PPUSH
15862: LD_INT 24
15864: PUSH
15865: LD_INT 23
15867: PUSH
15868: LD_INT 92
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PUSH
15876: LD_INT 1
15878: PPUSH
15879: LD_INT 3
15881: PPUSH
15882: CALL_OW 12
15886: ARRAY
15887: PPUSH
15888: LD_INT 100
15890: PPUSH
15891: CALL 21567 0 5
// un := CreateVehicle ;
15895: LD_ADDR_VAR 0 2
15899: PUSH
15900: CALL_OW 45
15904: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15905: LD_VAR 0 2
15909: PPUSH
15910: LD_INT 2
15912: PPUSH
15913: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15917: LD_VAR 0 2
15921: PPUSH
15922: LD_INT 47
15924: PPUSH
15925: LD_INT 0
15927: PPUSH
15928: CALL_OW 49
// wait ( 0 0$0.3 ) ;
15932: LD_INT 10
15934: PPUSH
15935: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15939: LD_VAR 0 2
15943: PPUSH
15944: LD_INT 73
15946: PPUSH
15947: LD_INT 17
15949: PPUSH
15950: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15954: LD_ADDR_VAR 0 3
15958: PUSH
15959: LD_VAR 0 3
15963: PPUSH
15964: LD_VAR 0 2
15968: PPUSH
15969: CALL 54438 0 2
15973: ST_TO_ADDR
// end ;
15974: GO 15834
15976: POP
15977: POP
// repeat wait ( 0 0$1 ) ;
15978: LD_INT 35
15980: PPUSH
15981: CALL_OW 67
// for i in tmp do
15985: LD_ADDR_VAR 0 1
15989: PUSH
15990: LD_VAR 0 3
15994: PUSH
15995: FOR_IN
15996: IFFALSE 16157
// begin if not IsOk ( i ) then
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 302
16007: NOT
16008: IFFALSE 16037
// begin ComAutodestruct ( i ) ;
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL 49930 0 1
// tmp := tmp diff i ;
16019: LD_ADDR_VAR 0 3
16023: PUSH
16024: LD_VAR 0 3
16028: PUSH
16029: LD_VAR 0 1
16033: DIFF
16034: ST_TO_ADDR
// continue ;
16035: GO 15995
// end ; if GetLives ( i ) < 750 then
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 256
16046: PUSH
16047: LD_INT 750
16049: LESS
16050: IFFALSE 16111
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16052: LD_ADDR_VAR 0 4
16056: PUSH
16057: LD_INT 81
16059: PUSH
16060: LD_VAR 0 1
16064: PPUSH
16065: CALL_OW 255
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: PPUSH
16074: CALL_OW 69
16078: PPUSH
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 74
16088: ST_TO_ADDR
// if enemy then
16089: LD_VAR 0 4
16093: IFFALSE 16109
// ComMoveUnit ( i , enemy ) ;
16095: LD_VAR 0 1
16099: PPUSH
16100: LD_VAR 0 4
16104: PPUSH
16105: CALL_OW 112
// end else
16109: GO 16155
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16111: LD_VAR 0 1
16115: PPUSH
16116: LD_INT 76
16118: PUSH
16119: LD_INT 31
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 93
16128: PUSH
16129: LD_INT 67
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 108
16138: PUSH
16139: LD_INT 97
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: PPUSH
16151: CALL 57042 0 2
// end ;
16155: GO 15995
16157: POP
16158: POP
// until not tmp ;
16159: LD_VAR 0 3
16163: NOT
16164: IFFALSE 15978
// end ;
16166: PPOPN 4
16168: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16169: LD_INT 69
16171: PPUSH
16172: CALL_OW 302
16176: NOT
16177: PUSH
16178: LD_INT 69
16180: PPUSH
16181: CALL_OW 255
16185: PUSH
16186: LD_EXP 3
16190: NONEQUAL
16191: OR
16192: IFFALSE 16445
16194: GO 16196
16196: DISABLE
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
16202: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16203: LD_ADDR_VAR 0 1
16207: PUSH
16208: DOUBLE
16209: LD_INT 1
16211: DEC
16212: ST_TO_ADDR
16213: LD_INT 2
16215: PUSH
16216: LD_INT 3
16218: PUSH
16219: LD_INT 4
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: LIST
16226: PUSH
16227: LD_OWVAR 67
16231: ARRAY
16232: PUSH
16233: FOR_TO
16234: IFFALSE 16325
// begin uc_side := side_bot ;
16236: LD_ADDR_OWVAR 20
16240: PUSH
16241: LD_EXP 3
16245: ST_TO_ADDR
// uc_nation := nation_nature ;
16246: LD_ADDR_OWVAR 21
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16254: CALL 50528 0 0
// hc_class := class_apeman_kamikaze ;
16258: LD_ADDR_OWVAR 28
16262: PUSH
16263: LD_INT 17
16265: ST_TO_ADDR
// un := CreateHuman ;
16266: LD_ADDR_VAR 0 2
16270: PUSH
16271: CALL_OW 44
16275: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16276: LD_VAR 0 2
16280: PPUSH
16281: LD_INT 4
16283: PPUSH
16284: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16288: LD_VAR 0 2
16292: PPUSH
16293: LD_INT 48
16295: PPUSH
16296: LD_INT 0
16298: PPUSH
16299: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16303: LD_ADDR_VAR 0 3
16307: PUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_VAR 0 2
16317: PPUSH
16318: CALL 54438 0 2
16322: ST_TO_ADDR
// end ;
16323: GO 16233
16325: POP
16326: POP
// repeat wait ( 0 0$1 ) ;
16327: LD_INT 35
16329: PPUSH
16330: CALL_OW 67
// for i in tmp do
16334: LD_ADDR_VAR 0 1
16338: PUSH
16339: LD_VAR 0 3
16343: PUSH
16344: FOR_IN
16345: IFFALSE 16436
// begin if not IsOk ( i ) then
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 302
16356: NOT
16357: IFFALSE 16377
// begin tmp := tmp diff i ;
16359: LD_ADDR_VAR 0 3
16363: PUSH
16364: LD_VAR 0 3
16368: PUSH
16369: LD_VAR 0 1
16373: DIFF
16374: ST_TO_ADDR
// continue ;
16375: GO 16344
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16377: LD_ADDR_VAR 0 4
16381: PUSH
16382: LD_INT 81
16384: PUSH
16385: LD_VAR 0 1
16389: PPUSH
16390: CALL_OW 255
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 69
16403: PPUSH
16404: LD_VAR 0 1
16408: PPUSH
16409: CALL_OW 74
16413: ST_TO_ADDR
// if enemy then
16414: LD_VAR 0 4
16418: IFFALSE 16434
// ComAttackUnit ( i , enemy ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_VAR 0 4
16429: PPUSH
16430: CALL_OW 115
// end ;
16434: GO 16344
16436: POP
16437: POP
// until not tmp ;
16438: LD_VAR 0 3
16442: NOT
16443: IFFALSE 16327
// end ;
16445: PPOPN 4
16447: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16448: LD_INT 45
16450: PPUSH
16451: CALL_OW 302
16455: NOT
16456: PUSH
16457: LD_INT 45
16459: PPUSH
16460: CALL_OW 255
16464: PUSH
16465: LD_EXP 3
16469: NONEQUAL
16470: OR
16471: IFFALSE 16724
16473: GO 16475
16475: DISABLE
16476: LD_INT 0
16478: PPUSH
16479: PPUSH
16480: PPUSH
16481: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16482: LD_ADDR_VAR 0 1
16486: PUSH
16487: DOUBLE
16488: LD_INT 1
16490: DEC
16491: ST_TO_ADDR
16492: LD_INT 2
16494: PUSH
16495: LD_INT 3
16497: PUSH
16498: LD_INT 3
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: PUSH
16506: LD_OWVAR 67
16510: ARRAY
16511: PUSH
16512: FOR_TO
16513: IFFALSE 16604
// begin uc_side := side_bot ;
16515: LD_ADDR_OWVAR 20
16519: PUSH
16520: LD_EXP 3
16524: ST_TO_ADDR
// uc_nation := nation_nature ;
16525: LD_ADDR_OWVAR 21
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16533: CALL 50528 0 0
// hc_class := class_apeman_kamikaze ;
16537: LD_ADDR_OWVAR 28
16541: PUSH
16542: LD_INT 17
16544: ST_TO_ADDR
// un := CreateHuman ;
16545: LD_ADDR_VAR 0 2
16549: PUSH
16550: CALL_OW 44
16554: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16555: LD_VAR 0 2
16559: PPUSH
16560: LD_INT 2
16562: PPUSH
16563: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16567: LD_VAR 0 2
16571: PPUSH
16572: LD_INT 49
16574: PPUSH
16575: LD_INT 0
16577: PPUSH
16578: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_VAR 0 3
16591: PPUSH
16592: LD_VAR 0 2
16596: PPUSH
16597: CALL 54438 0 2
16601: ST_TO_ADDR
// end ;
16602: GO 16512
16604: POP
16605: POP
// repeat wait ( 0 0$1 ) ;
16606: LD_INT 35
16608: PPUSH
16609: CALL_OW 67
// for i in tmp do
16613: LD_ADDR_VAR 0 1
16617: PUSH
16618: LD_VAR 0 3
16622: PUSH
16623: FOR_IN
16624: IFFALSE 16715
// begin if not IsOk ( i ) then
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL_OW 302
16635: NOT
16636: IFFALSE 16656
// begin tmp := tmp diff i ;
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_VAR 0 3
16647: PUSH
16648: LD_VAR 0 1
16652: DIFF
16653: ST_TO_ADDR
// continue ;
16654: GO 16623
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16656: LD_ADDR_VAR 0 4
16660: PUSH
16661: LD_INT 81
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 255
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: PPUSH
16683: LD_VAR 0 1
16687: PPUSH
16688: CALL_OW 74
16692: ST_TO_ADDR
// if enemy then
16693: LD_VAR 0 4
16697: IFFALSE 16713
// ComAttackUnit ( i , enemy ) ;
16699: LD_VAR 0 1
16703: PPUSH
16704: LD_VAR 0 4
16708: PPUSH
16709: CALL_OW 115
// end ;
16713: GO 16623
16715: POP
16716: POP
// until not tmp ;
16717: LD_VAR 0 3
16721: NOT
16722: IFFALSE 16606
// end ; end_of_file
16724: PPOPN 4
16726: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16727: LD_INT 0
16729: PPUSH
16730: PPUSH
// if exist_mode then
16731: LD_VAR 0 2
16735: IFFALSE 16760
// unit := CreateCharacter ( prefix & ident ) else
16737: LD_ADDR_VAR 0 5
16741: PUSH
16742: LD_VAR 0 3
16746: PUSH
16747: LD_VAR 0 1
16751: STR
16752: PPUSH
16753: CALL_OW 34
16757: ST_TO_ADDR
16758: GO 16775
// unit := NewCharacter ( ident ) ;
16760: LD_ADDR_VAR 0 5
16764: PUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 25
16774: ST_TO_ADDR
// result := unit ;
16775: LD_ADDR_VAR 0 4
16779: PUSH
16780: LD_VAR 0 5
16784: ST_TO_ADDR
// end ;
16785: LD_VAR 0 4
16789: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16790: LD_INT 0
16792: PPUSH
16793: PPUSH
// if not side or not nation then
16794: LD_VAR 0 1
16798: NOT
16799: PUSH
16800: LD_VAR 0 2
16804: NOT
16805: OR
16806: IFFALSE 16810
// exit ;
16808: GO 17578
// case nation of nation_american :
16810: LD_VAR 0 2
16814: PUSH
16815: LD_INT 1
16817: DOUBLE
16818: EQUAL
16819: IFTRUE 16823
16821: GO 17037
16823: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 35
16831: PUSH
16832: LD_INT 45
16834: PUSH
16835: LD_INT 46
16837: PUSH
16838: LD_INT 47
16840: PUSH
16841: LD_INT 82
16843: PUSH
16844: LD_INT 83
16846: PUSH
16847: LD_INT 84
16849: PUSH
16850: LD_INT 85
16852: PUSH
16853: LD_INT 86
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 6
16864: PUSH
16865: LD_INT 15
16867: PUSH
16868: LD_INT 16
16870: PUSH
16871: LD_INT 7
16873: PUSH
16874: LD_INT 12
16876: PUSH
16877: LD_INT 13
16879: PUSH
16880: LD_INT 10
16882: PUSH
16883: LD_INT 14
16885: PUSH
16886: LD_INT 20
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 25
16897: PUSH
16898: LD_INT 32
16900: PUSH
16901: LD_INT 27
16903: PUSH
16904: LD_INT 36
16906: PUSH
16907: LD_INT 69
16909: PUSH
16910: LD_INT 39
16912: PUSH
16913: LD_INT 34
16915: PUSH
16916: LD_INT 40
16918: PUSH
16919: LD_INT 48
16921: PUSH
16922: LD_INT 49
16924: PUSH
16925: LD_INT 50
16927: PUSH
16928: LD_INT 51
16930: PUSH
16931: LD_INT 52
16933: PUSH
16934: LD_INT 53
16936: PUSH
16937: LD_INT 54
16939: PUSH
16940: LD_INT 55
16942: PUSH
16943: LD_INT 56
16945: PUSH
16946: LD_INT 57
16948: PUSH
16949: LD_INT 58
16951: PUSH
16952: LD_INT 59
16954: PUSH
16955: LD_INT 60
16957: PUSH
16958: LD_INT 61
16960: PUSH
16961: LD_INT 62
16963: PUSH
16964: LD_INT 80
16966: PUSH
16967: LD_INT 82
16969: PUSH
16970: LD_INT 83
16972: PUSH
16973: LD_INT 84
16975: PUSH
16976: LD_INT 85
16978: PUSH
16979: LD_INT 86
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: ST_TO_ADDR
17035: GO 17502
17037: LD_INT 2
17039: DOUBLE
17040: EQUAL
17041: IFTRUE 17045
17043: GO 17271
17045: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17046: LD_ADDR_VAR 0 4
17050: PUSH
17051: LD_INT 35
17053: PUSH
17054: LD_INT 45
17056: PUSH
17057: LD_INT 46
17059: PUSH
17060: LD_INT 47
17062: PUSH
17063: LD_INT 82
17065: PUSH
17066: LD_INT 83
17068: PUSH
17069: LD_INT 84
17071: PUSH
17072: LD_INT 85
17074: PUSH
17075: LD_INT 87
17077: PUSH
17078: LD_INT 70
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: LD_INT 11
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: LD_INT 4
17092: PUSH
17093: LD_INT 5
17095: PUSH
17096: LD_INT 6
17098: PUSH
17099: LD_INT 15
17101: PUSH
17102: LD_INT 18
17104: PUSH
17105: LD_INT 7
17107: PUSH
17108: LD_INT 17
17110: PUSH
17111: LD_INT 8
17113: PUSH
17114: LD_INT 20
17116: PUSH
17117: LD_INT 21
17119: PUSH
17120: LD_INT 22
17122: PUSH
17123: LD_INT 72
17125: PUSH
17126: LD_INT 26
17128: PUSH
17129: LD_INT 69
17131: PUSH
17132: LD_INT 39
17134: PUSH
17135: LD_INT 40
17137: PUSH
17138: LD_INT 41
17140: PUSH
17141: LD_INT 42
17143: PUSH
17144: LD_INT 43
17146: PUSH
17147: LD_INT 48
17149: PUSH
17150: LD_INT 49
17152: PUSH
17153: LD_INT 50
17155: PUSH
17156: LD_INT 51
17158: PUSH
17159: LD_INT 52
17161: PUSH
17162: LD_INT 53
17164: PUSH
17165: LD_INT 54
17167: PUSH
17168: LD_INT 55
17170: PUSH
17171: LD_INT 56
17173: PUSH
17174: LD_INT 60
17176: PUSH
17177: LD_INT 61
17179: PUSH
17180: LD_INT 62
17182: PUSH
17183: LD_INT 66
17185: PUSH
17186: LD_INT 67
17188: PUSH
17189: LD_INT 68
17191: PUSH
17192: LD_INT 81
17194: PUSH
17195: LD_INT 82
17197: PUSH
17198: LD_INT 83
17200: PUSH
17201: LD_INT 84
17203: PUSH
17204: LD_INT 85
17206: PUSH
17207: LD_INT 87
17209: PUSH
17210: LD_INT 88
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: ST_TO_ADDR
17269: GO 17502
17271: LD_INT 3
17273: DOUBLE
17274: EQUAL
17275: IFTRUE 17279
17277: GO 17501
17279: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17280: LD_ADDR_VAR 0 4
17284: PUSH
17285: LD_INT 46
17287: PUSH
17288: LD_INT 47
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: LD_INT 2
17296: PUSH
17297: LD_INT 82
17299: PUSH
17300: LD_INT 83
17302: PUSH
17303: LD_INT 84
17305: PUSH
17306: LD_INT 85
17308: PUSH
17309: LD_INT 86
17311: PUSH
17312: LD_INT 11
17314: PUSH
17315: LD_INT 9
17317: PUSH
17318: LD_INT 20
17320: PUSH
17321: LD_INT 19
17323: PUSH
17324: LD_INT 21
17326: PUSH
17327: LD_INT 24
17329: PUSH
17330: LD_INT 22
17332: PUSH
17333: LD_INT 25
17335: PUSH
17336: LD_INT 28
17338: PUSH
17339: LD_INT 29
17341: PUSH
17342: LD_INT 30
17344: PUSH
17345: LD_INT 31
17347: PUSH
17348: LD_INT 37
17350: PUSH
17351: LD_INT 38
17353: PUSH
17354: LD_INT 32
17356: PUSH
17357: LD_INT 27
17359: PUSH
17360: LD_INT 33
17362: PUSH
17363: LD_INT 69
17365: PUSH
17366: LD_INT 39
17368: PUSH
17369: LD_INT 34
17371: PUSH
17372: LD_INT 40
17374: PUSH
17375: LD_INT 71
17377: PUSH
17378: LD_INT 23
17380: PUSH
17381: LD_INT 44
17383: PUSH
17384: LD_INT 48
17386: PUSH
17387: LD_INT 49
17389: PUSH
17390: LD_INT 50
17392: PUSH
17393: LD_INT 51
17395: PUSH
17396: LD_INT 52
17398: PUSH
17399: LD_INT 53
17401: PUSH
17402: LD_INT 54
17404: PUSH
17405: LD_INT 55
17407: PUSH
17408: LD_INT 56
17410: PUSH
17411: LD_INT 57
17413: PUSH
17414: LD_INT 58
17416: PUSH
17417: LD_INT 59
17419: PUSH
17420: LD_INT 63
17422: PUSH
17423: LD_INT 64
17425: PUSH
17426: LD_INT 65
17428: PUSH
17429: LD_INT 82
17431: PUSH
17432: LD_INT 83
17434: PUSH
17435: LD_INT 84
17437: PUSH
17438: LD_INT 85
17440: PUSH
17441: LD_INT 86
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: ST_TO_ADDR
17499: GO 17502
17501: POP
// if state > - 1 and state < 3 then
17502: LD_VAR 0 3
17506: PUSH
17507: LD_INT 1
17509: NEG
17510: GREATER
17511: PUSH
17512: LD_VAR 0 3
17516: PUSH
17517: LD_INT 3
17519: LESS
17520: AND
17521: IFFALSE 17578
// for i in result do
17523: LD_ADDR_VAR 0 5
17527: PUSH
17528: LD_VAR 0 4
17532: PUSH
17533: FOR_IN
17534: IFFALSE 17576
// if GetTech ( i , side ) <> state then
17536: LD_VAR 0 5
17540: PPUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 321
17550: PUSH
17551: LD_VAR 0 3
17555: NONEQUAL
17556: IFFALSE 17574
// result := result diff i ;
17558: LD_ADDR_VAR 0 4
17562: PUSH
17563: LD_VAR 0 4
17567: PUSH
17568: LD_VAR 0 5
17572: DIFF
17573: ST_TO_ADDR
17574: GO 17533
17576: POP
17577: POP
// end ;
17578: LD_VAR 0 4
17582: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17583: LD_INT 0
17585: PPUSH
17586: PPUSH
17587: PPUSH
// result := true ;
17588: LD_ADDR_VAR 0 3
17592: PUSH
17593: LD_INT 1
17595: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17596: LD_ADDR_VAR 0 5
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: CALL_OW 480
17610: ST_TO_ADDR
// if not tmp then
17611: LD_VAR 0 5
17615: NOT
17616: IFFALSE 17620
// exit ;
17618: GO 17669
// for i in tmp do
17620: LD_ADDR_VAR 0 4
17624: PUSH
17625: LD_VAR 0 5
17629: PUSH
17630: FOR_IN
17631: IFFALSE 17667
// if GetTech ( i , side ) <> state_researched then
17633: LD_VAR 0 4
17637: PPUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 321
17647: PUSH
17648: LD_INT 2
17650: NONEQUAL
17651: IFFALSE 17665
// begin result := false ;
17653: LD_ADDR_VAR 0 3
17657: PUSH
17658: LD_INT 0
17660: ST_TO_ADDR
// exit ;
17661: POP
17662: POP
17663: GO 17669
// end ;
17665: GO 17630
17667: POP
17668: POP
// end ;
17669: LD_VAR 0 3
17673: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17674: LD_INT 0
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
17688: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17689: LD_VAR 0 1
17693: NOT
17694: PUSH
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 257
17704: PUSH
17705: LD_INT 9
17707: NONEQUAL
17708: OR
17709: IFFALSE 17713
// exit ;
17711: GO 18286
// side := GetSide ( unit ) ;
17713: LD_ADDR_VAR 0 9
17717: PUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: CALL_OW 255
17727: ST_TO_ADDR
// tech_space := tech_spacanom ;
17728: LD_ADDR_VAR 0 12
17732: PUSH
17733: LD_INT 29
17735: ST_TO_ADDR
// tech_time := tech_taurad ;
17736: LD_ADDR_VAR 0 13
17740: PUSH
17741: LD_INT 28
17743: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17744: LD_ADDR_VAR 0 11
17748: PUSH
17749: LD_VAR 0 1
17753: PPUSH
17754: CALL_OW 310
17758: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17759: LD_VAR 0 11
17763: PPUSH
17764: CALL_OW 247
17768: PUSH
17769: LD_INT 2
17771: EQUAL
17772: IFFALSE 17776
// exit ;
17774: GO 18286
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17776: LD_ADDR_VAR 0 8
17780: PUSH
17781: LD_INT 81
17783: PUSH
17784: LD_VAR 0 9
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 3
17795: PUSH
17796: LD_INT 21
17798: PUSH
17799: LD_INT 3
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: ST_TO_ADDR
// if not tmp then
17819: LD_VAR 0 8
17823: NOT
17824: IFFALSE 17828
// exit ;
17826: GO 18286
// if in_unit then
17828: LD_VAR 0 11
17832: IFFALSE 17856
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17834: LD_ADDR_VAR 0 10
17838: PUSH
17839: LD_VAR 0 8
17843: PPUSH
17844: LD_VAR 0 11
17848: PPUSH
17849: CALL_OW 74
17853: ST_TO_ADDR
17854: GO 17876
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17856: LD_ADDR_VAR 0 10
17860: PUSH
17861: LD_VAR 0 8
17865: PPUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 74
17875: ST_TO_ADDR
// if not enemy then
17876: LD_VAR 0 10
17880: NOT
17881: IFFALSE 17885
// exit ;
17883: GO 18286
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17885: LD_VAR 0 11
17889: PUSH
17890: LD_VAR 0 11
17894: PPUSH
17895: LD_VAR 0 10
17899: PPUSH
17900: CALL_OW 296
17904: PUSH
17905: LD_INT 13
17907: GREATER
17908: AND
17909: PUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: LD_VAR 0 10
17919: PPUSH
17920: CALL_OW 296
17924: PUSH
17925: LD_INT 12
17927: GREATER
17928: OR
17929: IFFALSE 17933
// exit ;
17931: GO 18286
// missile := [ 1 ] ;
17933: LD_ADDR_VAR 0 14
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: EMPTY
17942: LIST
17943: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17944: LD_VAR 0 9
17948: PPUSH
17949: LD_VAR 0 12
17953: PPUSH
17954: CALL_OW 325
17958: IFFALSE 17987
// missile := Replace ( missile , missile + 1 , 2 ) ;
17960: LD_ADDR_VAR 0 14
17964: PUSH
17965: LD_VAR 0 14
17969: PPUSH
17970: LD_VAR 0 14
17974: PUSH
17975: LD_INT 1
17977: PLUS
17978: PPUSH
17979: LD_INT 2
17981: PPUSH
17982: CALL_OW 1
17986: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17987: LD_VAR 0 9
17991: PPUSH
17992: LD_VAR 0 13
17996: PPUSH
17997: CALL_OW 325
18001: PUSH
18002: LD_VAR 0 10
18006: PPUSH
18007: CALL_OW 255
18011: PPUSH
18012: LD_VAR 0 13
18016: PPUSH
18017: CALL_OW 325
18021: NOT
18022: AND
18023: IFFALSE 18052
// missile := Replace ( missile , missile + 1 , 3 ) ;
18025: LD_ADDR_VAR 0 14
18029: PUSH
18030: LD_VAR 0 14
18034: PPUSH
18035: LD_VAR 0 14
18039: PUSH
18040: LD_INT 1
18042: PLUS
18043: PPUSH
18044: LD_INT 3
18046: PPUSH
18047: CALL_OW 1
18051: ST_TO_ADDR
// if missile < 2 then
18052: LD_VAR 0 14
18056: PUSH
18057: LD_INT 2
18059: LESS
18060: IFFALSE 18064
// exit ;
18062: GO 18286
// x := GetX ( enemy ) ;
18064: LD_ADDR_VAR 0 4
18068: PUSH
18069: LD_VAR 0 10
18073: PPUSH
18074: CALL_OW 250
18078: ST_TO_ADDR
// y := GetY ( enemy ) ;
18079: LD_ADDR_VAR 0 5
18083: PUSH
18084: LD_VAR 0 10
18088: PPUSH
18089: CALL_OW 251
18093: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18094: LD_ADDR_VAR 0 6
18098: PUSH
18099: LD_VAR 0 4
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PPUSH
18108: LD_INT 1
18110: PPUSH
18111: CALL_OW 12
18115: PLUS
18116: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18117: LD_ADDR_VAR 0 7
18121: PUSH
18122: LD_VAR 0 5
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PPUSH
18131: LD_INT 1
18133: PPUSH
18134: CALL_OW 12
18138: PLUS
18139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18140: LD_VAR 0 6
18144: PPUSH
18145: LD_VAR 0 7
18149: PPUSH
18150: CALL_OW 488
18154: NOT
18155: IFFALSE 18177
// begin _x := x ;
18157: LD_ADDR_VAR 0 6
18161: PUSH
18162: LD_VAR 0 4
18166: ST_TO_ADDR
// _y := y ;
18167: LD_ADDR_VAR 0 7
18171: PUSH
18172: LD_VAR 0 5
18176: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_INT 1
18184: PPUSH
18185: LD_VAR 0 14
18189: PPUSH
18190: CALL_OW 12
18194: ST_TO_ADDR
// case i of 1 :
18195: LD_VAR 0 3
18199: PUSH
18200: LD_INT 1
18202: DOUBLE
18203: EQUAL
18204: IFTRUE 18208
18206: GO 18225
18208: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18209: LD_VAR 0 1
18213: PPUSH
18214: LD_VAR 0 10
18218: PPUSH
18219: CALL_OW 115
18223: GO 18286
18225: LD_INT 2
18227: DOUBLE
18228: EQUAL
18229: IFTRUE 18233
18231: GO 18255
18233: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18234: LD_VAR 0 1
18238: PPUSH
18239: LD_VAR 0 6
18243: PPUSH
18244: LD_VAR 0 7
18248: PPUSH
18249: CALL_OW 153
18253: GO 18286
18255: LD_INT 3
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18285
18263: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18264: LD_VAR 0 1
18268: PPUSH
18269: LD_VAR 0 6
18273: PPUSH
18274: LD_VAR 0 7
18278: PPUSH
18279: CALL_OW 154
18283: GO 18286
18285: POP
// end ;
18286: LD_VAR 0 2
18290: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18291: LD_INT 0
18293: PPUSH
18294: PPUSH
18295: PPUSH
18296: PPUSH
18297: PPUSH
18298: PPUSH
// if not unit or not building then
18299: LD_VAR 0 1
18303: NOT
18304: PUSH
18305: LD_VAR 0 2
18309: NOT
18310: OR
18311: IFFALSE 18315
// exit ;
18313: GO 18473
// x := GetX ( building ) ;
18315: LD_ADDR_VAR 0 5
18319: PUSH
18320: LD_VAR 0 2
18324: PPUSH
18325: CALL_OW 250
18329: ST_TO_ADDR
// y := GetY ( building ) ;
18330: LD_ADDR_VAR 0 6
18334: PUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: CALL_OW 251
18344: ST_TO_ADDR
// for i = 0 to 5 do
18345: LD_ADDR_VAR 0 4
18349: PUSH
18350: DOUBLE
18351: LD_INT 0
18353: DEC
18354: ST_TO_ADDR
18355: LD_INT 5
18357: PUSH
18358: FOR_TO
18359: IFFALSE 18471
// begin _x := ShiftX ( x , i , 3 ) ;
18361: LD_ADDR_VAR 0 7
18365: PUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: LD_VAR 0 4
18375: PPUSH
18376: LD_INT 3
18378: PPUSH
18379: CALL_OW 272
18383: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18384: LD_ADDR_VAR 0 8
18388: PUSH
18389: LD_VAR 0 6
18393: PPUSH
18394: LD_VAR 0 4
18398: PPUSH
18399: LD_INT 3
18401: PPUSH
18402: CALL_OW 273
18406: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18407: LD_VAR 0 7
18411: PPUSH
18412: LD_VAR 0 8
18416: PPUSH
18417: CALL_OW 488
18421: NOT
18422: IFFALSE 18426
// continue ;
18424: GO 18358
// if HexInfo ( _x , _y ) = 0 then
18426: LD_VAR 0 7
18430: PPUSH
18431: LD_VAR 0 8
18435: PPUSH
18436: CALL_OW 428
18440: PUSH
18441: LD_INT 0
18443: EQUAL
18444: IFFALSE 18469
// begin ComMoveXY ( unit , _x , _y ) ;
18446: LD_VAR 0 1
18450: PPUSH
18451: LD_VAR 0 7
18455: PPUSH
18456: LD_VAR 0 8
18460: PPUSH
18461: CALL_OW 111
// exit ;
18465: POP
18466: POP
18467: GO 18473
// end ; end ;
18469: GO 18358
18471: POP
18472: POP
// end ;
18473: LD_VAR 0 3
18477: RET
// export function ScanBase ( side , base_area ) ; begin
18478: LD_INT 0
18480: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18481: LD_ADDR_VAR 0 3
18485: PUSH
18486: LD_VAR 0 2
18490: PPUSH
18491: LD_INT 81
18493: PUSH
18494: LD_VAR 0 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PPUSH
18503: CALL_OW 70
18507: ST_TO_ADDR
// end ;
18508: LD_VAR 0 3
18512: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18513: LD_INT 0
18515: PPUSH
18516: PPUSH
18517: PPUSH
18518: PPUSH
// result := false ;
18519: LD_ADDR_VAR 0 2
18523: PUSH
18524: LD_INT 0
18526: ST_TO_ADDR
// side := GetSide ( unit ) ;
18527: LD_ADDR_VAR 0 3
18531: PUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 255
18541: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18542: LD_ADDR_VAR 0 4
18546: PUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 248
18556: ST_TO_ADDR
// case nat of 1 :
18557: LD_VAR 0 4
18561: PUSH
18562: LD_INT 1
18564: DOUBLE
18565: EQUAL
18566: IFTRUE 18570
18568: GO 18581
18570: POP
// tech := tech_lassight ; 2 :
18571: LD_ADDR_VAR 0 5
18575: PUSH
18576: LD_INT 12
18578: ST_TO_ADDR
18579: GO 18620
18581: LD_INT 2
18583: DOUBLE
18584: EQUAL
18585: IFTRUE 18589
18587: GO 18600
18589: POP
// tech := tech_mortar ; 3 :
18590: LD_ADDR_VAR 0 5
18594: PUSH
18595: LD_INT 41
18597: ST_TO_ADDR
18598: GO 18620
18600: LD_INT 3
18602: DOUBLE
18603: EQUAL
18604: IFTRUE 18608
18606: GO 18619
18608: POP
// tech := tech_bazooka ; end ;
18609: LD_ADDR_VAR 0 5
18613: PUSH
18614: LD_INT 44
18616: ST_TO_ADDR
18617: GO 18620
18619: POP
// if Researched ( side , tech ) then
18620: LD_VAR 0 3
18624: PPUSH
18625: LD_VAR 0 5
18629: PPUSH
18630: CALL_OW 325
18634: IFFALSE 18661
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18636: LD_ADDR_VAR 0 2
18640: PUSH
18641: LD_INT 5
18643: PUSH
18644: LD_INT 8
18646: PUSH
18647: LD_INT 9
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: LD_VAR 0 4
18659: ARRAY
18660: ST_TO_ADDR
// end ;
18661: LD_VAR 0 2
18665: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18666: LD_INT 0
18668: PPUSH
18669: PPUSH
18670: PPUSH
// if not mines then
18671: LD_VAR 0 2
18675: NOT
18676: IFFALSE 18680
// exit ;
18678: GO 18824
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18680: LD_ADDR_VAR 0 5
18684: PUSH
18685: LD_INT 81
18687: PUSH
18688: LD_VAR 0 1
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 3
18699: PUSH
18700: LD_INT 21
18702: PUSH
18703: LD_INT 3
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PPUSH
18718: CALL_OW 69
18722: ST_TO_ADDR
// for i in mines do
18723: LD_ADDR_VAR 0 4
18727: PUSH
18728: LD_VAR 0 2
18732: PUSH
18733: FOR_IN
18734: IFFALSE 18822
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18736: LD_VAR 0 4
18740: PUSH
18741: LD_INT 1
18743: ARRAY
18744: PPUSH
18745: LD_VAR 0 4
18749: PUSH
18750: LD_INT 2
18752: ARRAY
18753: PPUSH
18754: CALL_OW 458
18758: NOT
18759: IFFALSE 18763
// continue ;
18761: GO 18733
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18763: LD_VAR 0 4
18767: PUSH
18768: LD_INT 1
18770: ARRAY
18771: PPUSH
18772: LD_VAR 0 4
18776: PUSH
18777: LD_INT 2
18779: ARRAY
18780: PPUSH
18781: CALL_OW 428
18785: PUSH
18786: LD_VAR 0 5
18790: IN
18791: IFFALSE 18820
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18793: LD_VAR 0 4
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: LD_VAR 0 4
18806: PUSH
18807: LD_INT 2
18809: ARRAY
18810: PPUSH
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL_OW 456
// end ;
18820: GO 18733
18822: POP
18823: POP
// end ;
18824: LD_VAR 0 3
18828: RET
// export function Count ( array ) ; begin
18829: LD_INT 0
18831: PPUSH
// result := array + 0 ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: LD_VAR 0 1
18841: PUSH
18842: LD_INT 0
18844: PLUS
18845: ST_TO_ADDR
// end ;
18846: LD_VAR 0 2
18850: RET
// export function IsEmpty ( building ) ; begin
18851: LD_INT 0
18853: PPUSH
// if not building then
18854: LD_VAR 0 1
18858: NOT
18859: IFFALSE 18863
// exit ;
18861: GO 18906
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18863: LD_ADDR_VAR 0 2
18867: PUSH
18868: LD_VAR 0 1
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_VAR 0 1
18880: PPUSH
18881: CALL_OW 255
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 58
18892: PUSH
18893: EMPTY
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL_OW 69
18904: IN
18905: ST_TO_ADDR
// end ;
18906: LD_VAR 0 2
18910: RET
// export function IsNotFull ( building ) ; var places ; begin
18911: LD_INT 0
18913: PPUSH
18914: PPUSH
// if not building then
18915: LD_VAR 0 1
18919: NOT
18920: IFFALSE 18924
// exit ;
18922: GO 18952
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18924: LD_ADDR_VAR 0 2
18928: PUSH
18929: LD_VAR 0 1
18933: PPUSH
18934: LD_INT 3
18936: PUSH
18937: LD_INT 62
18939: PUSH
18940: EMPTY
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 72
18951: ST_TO_ADDR
// end ;
18952: LD_VAR 0 2
18956: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18957: LD_INT 0
18959: PPUSH
18960: PPUSH
18961: PPUSH
18962: PPUSH
// tmp := [ ] ;
18963: LD_ADDR_VAR 0 3
18967: PUSH
18968: EMPTY
18969: ST_TO_ADDR
// list := [ ] ;
18970: LD_ADDR_VAR 0 5
18974: PUSH
18975: EMPTY
18976: ST_TO_ADDR
// for i = 16 to 25 do
18977: LD_ADDR_VAR 0 4
18981: PUSH
18982: DOUBLE
18983: LD_INT 16
18985: DEC
18986: ST_TO_ADDR
18987: LD_INT 25
18989: PUSH
18990: FOR_TO
18991: IFFALSE 19064
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18993: LD_ADDR_VAR 0 3
18997: PUSH
18998: LD_VAR 0 3
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_VAR 0 1
19010: PPUSH
19011: CALL_OW 255
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 91
19022: PUSH
19023: LD_VAR 0 1
19027: PUSH
19028: LD_INT 6
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 30
19038: PUSH
19039: LD_VAR 0 4
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: PPUSH
19056: CALL_OW 69
19060: ADD
19061: ST_TO_ADDR
19062: GO 18990
19064: POP
19065: POP
// for i = 1 to tmp do
19066: LD_ADDR_VAR 0 4
19070: PUSH
19071: DOUBLE
19072: LD_INT 1
19074: DEC
19075: ST_TO_ADDR
19076: LD_VAR 0 3
19080: PUSH
19081: FOR_TO
19082: IFFALSE 19170
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19084: LD_ADDR_VAR 0 5
19088: PUSH
19089: LD_VAR 0 5
19093: PUSH
19094: LD_VAR 0 3
19098: PUSH
19099: LD_VAR 0 4
19103: ARRAY
19104: PPUSH
19105: CALL_OW 266
19109: PUSH
19110: LD_VAR 0 3
19114: PUSH
19115: LD_VAR 0 4
19119: ARRAY
19120: PPUSH
19121: CALL_OW 250
19125: PUSH
19126: LD_VAR 0 3
19130: PUSH
19131: LD_VAR 0 4
19135: ARRAY
19136: PPUSH
19137: CALL_OW 251
19141: PUSH
19142: LD_VAR 0 3
19146: PUSH
19147: LD_VAR 0 4
19151: ARRAY
19152: PPUSH
19153: CALL_OW 254
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: ADD
19167: ST_TO_ADDR
19168: GO 19081
19170: POP
19171: POP
// result := list ;
19172: LD_ADDR_VAR 0 2
19176: PUSH
19177: LD_VAR 0 5
19181: ST_TO_ADDR
// end ;
19182: LD_VAR 0 2
19186: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19187: LD_INT 0
19189: PPUSH
19190: PPUSH
19191: PPUSH
19192: PPUSH
19193: PPUSH
19194: PPUSH
19195: PPUSH
// if not factory then
19196: LD_VAR 0 1
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 19798
// if control = control_apeman then
19205: LD_VAR 0 4
19209: PUSH
19210: LD_INT 5
19212: EQUAL
19213: IFFALSE 19322
// begin tmp := UnitsInside ( factory ) ;
19215: LD_ADDR_VAR 0 8
19219: PUSH
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 313
19229: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19230: LD_VAR 0 8
19234: PPUSH
19235: LD_INT 25
19237: PUSH
19238: LD_INT 12
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PPUSH
19245: CALL_OW 72
19249: NOT
19250: IFFALSE 19260
// control := control_manual ;
19252: LD_ADDR_VAR 0 4
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19260: LD_ADDR_VAR 0 8
19264: PUSH
19265: LD_VAR 0 1
19269: PPUSH
19270: CALL 18957 0 1
19274: ST_TO_ADDR
// if tmp then
19275: LD_VAR 0 8
19279: IFFALSE 19322
// begin for i in tmp do
19281: LD_ADDR_VAR 0 7
19285: PUSH
19286: LD_VAR 0 8
19290: PUSH
19291: FOR_IN
19292: IFFALSE 19320
// if i [ 1 ] = b_ext_radio then
19294: LD_VAR 0 7
19298: PUSH
19299: LD_INT 1
19301: ARRAY
19302: PUSH
19303: LD_INT 22
19305: EQUAL
19306: IFFALSE 19318
// begin control := control_remote ;
19308: LD_ADDR_VAR 0 4
19312: PUSH
19313: LD_INT 2
19315: ST_TO_ADDR
// break ;
19316: GO 19320
// end ;
19318: GO 19291
19320: POP
19321: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19322: LD_VAR 0 1
19326: PPUSH
19327: LD_VAR 0 2
19331: PPUSH
19332: LD_VAR 0 3
19336: PPUSH
19337: LD_VAR 0 4
19341: PPUSH
19342: LD_VAR 0 5
19346: PPUSH
19347: CALL_OW 448
19351: IFFALSE 19386
// begin result := [ chassis , engine , control , weapon ] ;
19353: LD_ADDR_VAR 0 6
19357: PUSH
19358: LD_VAR 0 2
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_VAR 0 4
19372: PUSH
19373: LD_VAR 0 5
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: ST_TO_ADDR
// exit ;
19384: GO 19798
// end ; _chassis := AvailableChassisList ( factory ) ;
19386: LD_ADDR_VAR 0 9
19390: PUSH
19391: LD_VAR 0 1
19395: PPUSH
19396: CALL_OW 475
19400: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19401: LD_ADDR_VAR 0 11
19405: PUSH
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 476
19415: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19416: LD_ADDR_VAR 0 12
19420: PUSH
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 477
19430: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19431: LD_ADDR_VAR 0 10
19435: PUSH
19436: LD_VAR 0 1
19440: PPUSH
19441: CALL_OW 478
19445: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19446: LD_VAR 0 9
19450: NOT
19451: PUSH
19452: LD_VAR 0 11
19456: NOT
19457: OR
19458: PUSH
19459: LD_VAR 0 12
19463: NOT
19464: OR
19465: PUSH
19466: LD_VAR 0 10
19470: NOT
19471: OR
19472: IFFALSE 19507
// begin result := [ chassis , engine , control , weapon ] ;
19474: LD_ADDR_VAR 0 6
19478: PUSH
19479: LD_VAR 0 2
19483: PUSH
19484: LD_VAR 0 3
19488: PUSH
19489: LD_VAR 0 4
19493: PUSH
19494: LD_VAR 0 5
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: ST_TO_ADDR
// exit ;
19505: GO 19798
// end ; if not chassis in _chassis then
19507: LD_VAR 0 2
19511: PUSH
19512: LD_VAR 0 9
19516: IN
19517: NOT
19518: IFFALSE 19544
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19520: LD_ADDR_VAR 0 2
19524: PUSH
19525: LD_VAR 0 9
19529: PUSH
19530: LD_INT 1
19532: PPUSH
19533: LD_VAR 0 9
19537: PPUSH
19538: CALL_OW 12
19542: ARRAY
19543: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19544: LD_VAR 0 2
19548: PPUSH
19549: LD_VAR 0 3
19553: PPUSH
19554: CALL 19803 0 2
19558: NOT
19559: IFFALSE 19618
// repeat engine := _engine [ 1 ] ;
19561: LD_ADDR_VAR 0 3
19565: PUSH
19566: LD_VAR 0 11
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19575: LD_ADDR_VAR 0 11
19579: PUSH
19580: LD_VAR 0 11
19584: PPUSH
19585: LD_INT 1
19587: PPUSH
19588: CALL_OW 3
19592: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19593: LD_VAR 0 2
19597: PPUSH
19598: LD_VAR 0 3
19602: PPUSH
19603: CALL 19803 0 2
19607: PUSH
19608: LD_VAR 0 11
19612: PUSH
19613: EMPTY
19614: EQUAL
19615: OR
19616: IFFALSE 19561
// if not control in _control then
19618: LD_VAR 0 4
19622: PUSH
19623: LD_VAR 0 12
19627: IN
19628: NOT
19629: IFFALSE 19655
// control := _control [ rand ( 1 , _control ) ] ;
19631: LD_ADDR_VAR 0 4
19635: PUSH
19636: LD_VAR 0 12
19640: PUSH
19641: LD_INT 1
19643: PPUSH
19644: LD_VAR 0 12
19648: PPUSH
19649: CALL_OW 12
19653: ARRAY
19654: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19655: LD_VAR 0 2
19659: PPUSH
19660: LD_VAR 0 5
19664: PPUSH
19665: CALL 20023 0 2
19669: NOT
19670: IFFALSE 19729
// repeat weapon := _weapon [ 1 ] ;
19672: LD_ADDR_VAR 0 5
19676: PUSH
19677: LD_VAR 0 10
19681: PUSH
19682: LD_INT 1
19684: ARRAY
19685: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19686: LD_ADDR_VAR 0 10
19690: PUSH
19691: LD_VAR 0 10
19695: PPUSH
19696: LD_INT 1
19698: PPUSH
19699: CALL_OW 3
19703: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19704: LD_VAR 0 2
19708: PPUSH
19709: LD_VAR 0 5
19713: PPUSH
19714: CALL 20023 0 2
19718: PUSH
19719: LD_VAR 0 10
19723: PUSH
19724: EMPTY
19725: EQUAL
19726: OR
19727: IFFALSE 19672
// result := [ ] ;
19729: LD_ADDR_VAR 0 6
19733: PUSH
19734: EMPTY
19735: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19736: LD_VAR 0 1
19740: PPUSH
19741: LD_VAR 0 2
19745: PPUSH
19746: LD_VAR 0 3
19750: PPUSH
19751: LD_VAR 0 4
19755: PPUSH
19756: LD_VAR 0 5
19760: PPUSH
19761: CALL_OW 448
19765: IFFALSE 19798
// result := [ chassis , engine , control , weapon ] ;
19767: LD_ADDR_VAR 0 6
19771: PUSH
19772: LD_VAR 0 2
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: LD_VAR 0 4
19786: PUSH
19787: LD_VAR 0 5
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: ST_TO_ADDR
// end ;
19798: LD_VAR 0 6
19802: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19803: LD_INT 0
19805: PPUSH
// if not chassis or not engine then
19806: LD_VAR 0 1
19810: NOT
19811: PUSH
19812: LD_VAR 0 2
19816: NOT
19817: OR
19818: IFFALSE 19822
// exit ;
19820: GO 20018
// case engine of engine_solar :
19822: LD_VAR 0 2
19826: PUSH
19827: LD_INT 2
19829: DOUBLE
19830: EQUAL
19831: IFTRUE 19835
19833: GO 19873
19835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19836: LD_ADDR_VAR 0 3
19840: PUSH
19841: LD_INT 11
19843: PUSH
19844: LD_INT 12
19846: PUSH
19847: LD_INT 13
19849: PUSH
19850: LD_INT 14
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 3
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: ST_TO_ADDR
19871: GO 20002
19873: LD_INT 1
19875: DOUBLE
19876: EQUAL
19877: IFTRUE 19881
19879: GO 19943
19881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19882: LD_ADDR_VAR 0 3
19886: PUSH
19887: LD_INT 11
19889: PUSH
19890: LD_INT 12
19892: PUSH
19893: LD_INT 13
19895: PUSH
19896: LD_INT 14
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: LD_INT 2
19904: PUSH
19905: LD_INT 3
19907: PUSH
19908: LD_INT 4
19910: PUSH
19911: LD_INT 5
19913: PUSH
19914: LD_INT 21
19916: PUSH
19917: LD_INT 23
19919: PUSH
19920: LD_INT 22
19922: PUSH
19923: LD_INT 24
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: ST_TO_ADDR
19941: GO 20002
19943: LD_INT 3
19945: DOUBLE
19946: EQUAL
19947: IFTRUE 19951
19949: GO 20001
19951: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19952: LD_ADDR_VAR 0 3
19956: PUSH
19957: LD_INT 13
19959: PUSH
19960: LD_INT 14
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: LD_INT 3
19968: PUSH
19969: LD_INT 4
19971: PUSH
19972: LD_INT 5
19974: PUSH
19975: LD_INT 21
19977: PUSH
19978: LD_INT 22
19980: PUSH
19981: LD_INT 23
19983: PUSH
19984: LD_INT 24
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: ST_TO_ADDR
19999: GO 20002
20001: POP
// result := ( chassis in result ) ;
20002: LD_ADDR_VAR 0 3
20006: PUSH
20007: LD_VAR 0 1
20011: PUSH
20012: LD_VAR 0 3
20016: IN
20017: ST_TO_ADDR
// end ;
20018: LD_VAR 0 3
20022: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20023: LD_INT 0
20025: PPUSH
// if not chassis or not weapon then
20026: LD_VAR 0 1
20030: NOT
20031: PUSH
20032: LD_VAR 0 2
20036: NOT
20037: OR
20038: IFFALSE 20042
// exit ;
20040: GO 21102
// case weapon of us_machine_gun :
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 2
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20085
20055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20056: LD_ADDR_VAR 0 3
20060: PUSH
20061: LD_INT 1
20063: PUSH
20064: LD_INT 2
20066: PUSH
20067: LD_INT 3
20069: PUSH
20070: LD_INT 4
20072: PUSH
20073: LD_INT 5
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: ST_TO_ADDR
20083: GO 21086
20085: LD_INT 3
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20123
20093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20094: LD_ADDR_VAR 0 3
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: LD_INT 2
20104: PUSH
20105: LD_INT 3
20107: PUSH
20108: LD_INT 4
20110: PUSH
20111: LD_INT 5
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: ST_TO_ADDR
20121: GO 21086
20123: LD_INT 11
20125: DOUBLE
20126: EQUAL
20127: IFTRUE 20131
20129: GO 20161
20131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20132: LD_ADDR_VAR 0 3
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 4
20148: PUSH
20149: LD_INT 5
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: ST_TO_ADDR
20159: GO 21086
20161: LD_INT 4
20163: DOUBLE
20164: EQUAL
20165: IFTRUE 20169
20167: GO 20195
20169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 3
20180: PUSH
20181: LD_INT 4
20183: PUSH
20184: LD_INT 5
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: ST_TO_ADDR
20193: GO 21086
20195: LD_INT 5
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20229
20203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20204: LD_ADDR_VAR 0 3
20208: PUSH
20209: LD_INT 2
20211: PUSH
20212: LD_INT 3
20214: PUSH
20215: LD_INT 4
20217: PUSH
20218: LD_INT 5
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: ST_TO_ADDR
20227: GO 21086
20229: LD_INT 9
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20263
20237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: LD_INT 3
20248: PUSH
20249: LD_INT 4
20251: PUSH
20252: LD_INT 5
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: ST_TO_ADDR
20261: GO 21086
20263: LD_INT 7
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20297
20271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20272: LD_ADDR_VAR 0 3
20276: PUSH
20277: LD_INT 2
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 4
20285: PUSH
20286: LD_INT 5
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: ST_TO_ADDR
20295: GO 21086
20297: LD_INT 12
20299: DOUBLE
20300: EQUAL
20301: IFTRUE 20305
20303: GO 20331
20305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20306: LD_ADDR_VAR 0 3
20310: PUSH
20311: LD_INT 2
20313: PUSH
20314: LD_INT 3
20316: PUSH
20317: LD_INT 4
20319: PUSH
20320: LD_INT 5
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: ST_TO_ADDR
20329: GO 21086
20331: LD_INT 13
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20365
20339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20340: LD_ADDR_VAR 0 3
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: LD_INT 5
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: ST_TO_ADDR
20363: GO 21086
20365: LD_INT 14
20367: DOUBLE
20368: EQUAL
20369: IFTRUE 20373
20371: GO 20391
20373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20374: LD_ADDR_VAR 0 3
20378: PUSH
20379: LD_INT 4
20381: PUSH
20382: LD_INT 5
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: ST_TO_ADDR
20389: GO 21086
20391: LD_INT 6
20393: DOUBLE
20394: EQUAL
20395: IFTRUE 20399
20397: GO 20417
20399: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20400: LD_ADDR_VAR 0 3
20404: PUSH
20405: LD_INT 4
20407: PUSH
20408: LD_INT 5
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: ST_TO_ADDR
20415: GO 21086
20417: LD_INT 10
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20443
20425: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_INT 4
20433: PUSH
20434: LD_INT 5
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: ST_TO_ADDR
20441: GO 21086
20443: LD_INT 22
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20477
20451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_INT 11
20459: PUSH
20460: LD_INT 12
20462: PUSH
20463: LD_INT 13
20465: PUSH
20466: LD_INT 14
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: ST_TO_ADDR
20475: GO 21086
20477: LD_INT 23
20479: DOUBLE
20480: EQUAL
20481: IFTRUE 20485
20483: GO 20511
20485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20486: LD_ADDR_VAR 0 3
20490: PUSH
20491: LD_INT 11
20493: PUSH
20494: LD_INT 12
20496: PUSH
20497: LD_INT 13
20499: PUSH
20500: LD_INT 14
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: ST_TO_ADDR
20509: GO 21086
20511: LD_INT 24
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20545
20519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20520: LD_ADDR_VAR 0 3
20524: PUSH
20525: LD_INT 11
20527: PUSH
20528: LD_INT 12
20530: PUSH
20531: LD_INT 13
20533: PUSH
20534: LD_INT 14
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: ST_TO_ADDR
20543: GO 21086
20545: LD_INT 30
20547: DOUBLE
20548: EQUAL
20549: IFTRUE 20553
20551: GO 20579
20553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: LD_INT 11
20561: PUSH
20562: LD_INT 12
20564: PUSH
20565: LD_INT 13
20567: PUSH
20568: LD_INT 14
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: ST_TO_ADDR
20577: GO 21086
20579: LD_INT 25
20581: DOUBLE
20582: EQUAL
20583: IFTRUE 20587
20585: GO 20605
20587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20588: LD_ADDR_VAR 0 3
20592: PUSH
20593: LD_INT 13
20595: PUSH
20596: LD_INT 14
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: ST_TO_ADDR
20603: GO 21086
20605: LD_INT 27
20607: DOUBLE
20608: EQUAL
20609: IFTRUE 20613
20611: GO 20631
20613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: LD_INT 13
20621: PUSH
20622: LD_INT 14
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: ST_TO_ADDR
20629: GO 21086
20631: LD_INT 92
20633: DOUBLE
20634: EQUAL
20635: IFTRUE 20639
20637: GO 20665
20639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20640: LD_ADDR_VAR 0 3
20644: PUSH
20645: LD_INT 11
20647: PUSH
20648: LD_INT 12
20650: PUSH
20651: LD_INT 13
20653: PUSH
20654: LD_INT 14
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: ST_TO_ADDR
20663: GO 21086
20665: LD_INT 28
20667: DOUBLE
20668: EQUAL
20669: IFTRUE 20673
20671: GO 20691
20673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20674: LD_ADDR_VAR 0 3
20678: PUSH
20679: LD_INT 13
20681: PUSH
20682: LD_INT 14
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: ST_TO_ADDR
20689: GO 21086
20691: LD_INT 29
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20717
20699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20700: LD_ADDR_VAR 0 3
20704: PUSH
20705: LD_INT 13
20707: PUSH
20708: LD_INT 14
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: ST_TO_ADDR
20715: GO 21086
20717: LD_INT 31
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20743
20725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_INT 13
20733: PUSH
20734: LD_INT 14
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: ST_TO_ADDR
20741: GO 21086
20743: LD_INT 26
20745: DOUBLE
20746: EQUAL
20747: IFTRUE 20751
20749: GO 20769
20751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20752: LD_ADDR_VAR 0 3
20756: PUSH
20757: LD_INT 13
20759: PUSH
20760: LD_INT 14
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: ST_TO_ADDR
20767: GO 21086
20769: LD_INT 42
20771: DOUBLE
20772: EQUAL
20773: IFTRUE 20777
20775: GO 20803
20777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20778: LD_ADDR_VAR 0 3
20782: PUSH
20783: LD_INT 21
20785: PUSH
20786: LD_INT 22
20788: PUSH
20789: LD_INT 23
20791: PUSH
20792: LD_INT 24
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: ST_TO_ADDR
20801: GO 21086
20803: LD_INT 43
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20837
20811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20812: LD_ADDR_VAR 0 3
20816: PUSH
20817: LD_INT 21
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_INT 23
20825: PUSH
20826: LD_INT 24
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: ST_TO_ADDR
20835: GO 21086
20837: LD_INT 44
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20871
20845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20846: LD_ADDR_VAR 0 3
20850: PUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 22
20856: PUSH
20857: LD_INT 23
20859: PUSH
20860: LD_INT 24
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: ST_TO_ADDR
20869: GO 21086
20871: LD_INT 45
20873: DOUBLE
20874: EQUAL
20875: IFTRUE 20879
20877: GO 20905
20879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20880: LD_ADDR_VAR 0 3
20884: PUSH
20885: LD_INT 21
20887: PUSH
20888: LD_INT 22
20890: PUSH
20891: LD_INT 23
20893: PUSH
20894: LD_INT 24
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: ST_TO_ADDR
20903: GO 21086
20905: LD_INT 49
20907: DOUBLE
20908: EQUAL
20909: IFTRUE 20913
20911: GO 20939
20913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20914: LD_ADDR_VAR 0 3
20918: PUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 22
20924: PUSH
20925: LD_INT 23
20927: PUSH
20928: LD_INT 24
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: ST_TO_ADDR
20937: GO 21086
20939: LD_INT 51
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20973
20947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20948: LD_ADDR_VAR 0 3
20952: PUSH
20953: LD_INT 21
20955: PUSH
20956: LD_INT 22
20958: PUSH
20959: LD_INT 23
20961: PUSH
20962: LD_INT 24
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: ST_TO_ADDR
20971: GO 21086
20973: LD_INT 52
20975: DOUBLE
20976: EQUAL
20977: IFTRUE 20981
20979: GO 21007
20981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20982: LD_ADDR_VAR 0 3
20986: PUSH
20987: LD_INT 21
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_INT 23
20995: PUSH
20996: LD_INT 24
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
21005: GO 21086
21007: LD_INT 53
21009: DOUBLE
21010: EQUAL
21011: IFTRUE 21015
21013: GO 21033
21015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21016: LD_ADDR_VAR 0 3
21020: PUSH
21021: LD_INT 23
21023: PUSH
21024: LD_INT 24
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: ST_TO_ADDR
21031: GO 21086
21033: LD_INT 46
21035: DOUBLE
21036: EQUAL
21037: IFTRUE 21041
21039: GO 21059
21041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21042: LD_ADDR_VAR 0 3
21046: PUSH
21047: LD_INT 23
21049: PUSH
21050: LD_INT 24
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: ST_TO_ADDR
21057: GO 21086
21059: LD_INT 47
21061: DOUBLE
21062: EQUAL
21063: IFTRUE 21067
21065: GO 21085
21067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21068: LD_ADDR_VAR 0 3
21072: PUSH
21073: LD_INT 23
21075: PUSH
21076: LD_INT 24
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: ST_TO_ADDR
21083: GO 21086
21085: POP
// result := ( chassis in result ) ;
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: LD_VAR 0 1
21095: PUSH
21096: LD_VAR 0 3
21100: IN
21101: ST_TO_ADDR
// end ;
21102: LD_VAR 0 3
21106: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
// result := array ;
21116: LD_ADDR_VAR 0 5
21120: PUSH
21121: LD_VAR 0 1
21125: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21126: LD_VAR 0 1
21130: NOT
21131: PUSH
21132: LD_VAR 0 2
21136: NOT
21137: OR
21138: PUSH
21139: LD_VAR 0 3
21143: NOT
21144: OR
21145: PUSH
21146: LD_VAR 0 2
21150: PUSH
21151: LD_VAR 0 1
21155: GREATER
21156: OR
21157: PUSH
21158: LD_VAR 0 3
21162: PUSH
21163: LD_VAR 0 1
21167: GREATER
21168: OR
21169: IFFALSE 21173
// exit ;
21171: GO 21469
// if direction then
21173: LD_VAR 0 4
21177: IFFALSE 21241
// begin d := 1 ;
21179: LD_ADDR_VAR 0 9
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// if i_from > i_to then
21187: LD_VAR 0 2
21191: PUSH
21192: LD_VAR 0 3
21196: GREATER
21197: IFFALSE 21223
// length := ( array - i_from ) + i_to else
21199: LD_ADDR_VAR 0 11
21203: PUSH
21204: LD_VAR 0 1
21208: PUSH
21209: LD_VAR 0 2
21213: MINUS
21214: PUSH
21215: LD_VAR 0 3
21219: PLUS
21220: ST_TO_ADDR
21221: GO 21239
// length := i_to - i_from ;
21223: LD_ADDR_VAR 0 11
21227: PUSH
21228: LD_VAR 0 3
21232: PUSH
21233: LD_VAR 0 2
21237: MINUS
21238: ST_TO_ADDR
// end else
21239: GO 21302
// begin d := - 1 ;
21241: LD_ADDR_VAR 0 9
21245: PUSH
21246: LD_INT 1
21248: NEG
21249: ST_TO_ADDR
// if i_from > i_to then
21250: LD_VAR 0 2
21254: PUSH
21255: LD_VAR 0 3
21259: GREATER
21260: IFFALSE 21280
// length := i_from - i_to else
21262: LD_ADDR_VAR 0 11
21266: PUSH
21267: LD_VAR 0 2
21271: PUSH
21272: LD_VAR 0 3
21276: MINUS
21277: ST_TO_ADDR
21278: GO 21302
// length := ( array - i_to ) + i_from ;
21280: LD_ADDR_VAR 0 11
21284: PUSH
21285: LD_VAR 0 1
21289: PUSH
21290: LD_VAR 0 3
21294: MINUS
21295: PUSH
21296: LD_VAR 0 2
21300: PLUS
21301: ST_TO_ADDR
// end ; if not length then
21302: LD_VAR 0 11
21306: NOT
21307: IFFALSE 21311
// exit ;
21309: GO 21469
// tmp := array ;
21311: LD_ADDR_VAR 0 10
21315: PUSH
21316: LD_VAR 0 1
21320: ST_TO_ADDR
// for i = 1 to length do
21321: LD_ADDR_VAR 0 6
21325: PUSH
21326: DOUBLE
21327: LD_INT 1
21329: DEC
21330: ST_TO_ADDR
21331: LD_VAR 0 11
21335: PUSH
21336: FOR_TO
21337: IFFALSE 21457
// begin for j = 1 to array do
21339: LD_ADDR_VAR 0 7
21343: PUSH
21344: DOUBLE
21345: LD_INT 1
21347: DEC
21348: ST_TO_ADDR
21349: LD_VAR 0 1
21353: PUSH
21354: FOR_TO
21355: IFFALSE 21443
// begin k := j + d ;
21357: LD_ADDR_VAR 0 8
21361: PUSH
21362: LD_VAR 0 7
21366: PUSH
21367: LD_VAR 0 9
21371: PLUS
21372: ST_TO_ADDR
// if k > array then
21373: LD_VAR 0 8
21377: PUSH
21378: LD_VAR 0 1
21382: GREATER
21383: IFFALSE 21393
// k := 1 ;
21385: LD_ADDR_VAR 0 8
21389: PUSH
21390: LD_INT 1
21392: ST_TO_ADDR
// if not k then
21393: LD_VAR 0 8
21397: NOT
21398: IFFALSE 21410
// k := array ;
21400: LD_ADDR_VAR 0 8
21404: PUSH
21405: LD_VAR 0 1
21409: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21410: LD_ADDR_VAR 0 10
21414: PUSH
21415: LD_VAR 0 10
21419: PPUSH
21420: LD_VAR 0 8
21424: PPUSH
21425: LD_VAR 0 1
21429: PUSH
21430: LD_VAR 0 7
21434: ARRAY
21435: PPUSH
21436: CALL_OW 1
21440: ST_TO_ADDR
// end ;
21441: GO 21354
21443: POP
21444: POP
// array := tmp ;
21445: LD_ADDR_VAR 0 1
21449: PUSH
21450: LD_VAR 0 10
21454: ST_TO_ADDR
// end ;
21455: GO 21336
21457: POP
21458: POP
// result := array ;
21459: LD_ADDR_VAR 0 5
21463: PUSH
21464: LD_VAR 0 1
21468: ST_TO_ADDR
// end ;
21469: LD_VAR 0 5
21473: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21474: LD_INT 0
21476: PPUSH
21477: PPUSH
// result := 0 ;
21478: LD_ADDR_VAR 0 3
21482: PUSH
21483: LD_INT 0
21485: ST_TO_ADDR
// if not array or not value in array then
21486: LD_VAR 0 1
21490: NOT
21491: PUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_VAR 0 1
21501: IN
21502: NOT
21503: OR
21504: IFFALSE 21508
// exit ;
21506: GO 21562
// for i = 1 to array do
21508: LD_ADDR_VAR 0 4
21512: PUSH
21513: DOUBLE
21514: LD_INT 1
21516: DEC
21517: ST_TO_ADDR
21518: LD_VAR 0 1
21522: PUSH
21523: FOR_TO
21524: IFFALSE 21560
// if value = array [ i ] then
21526: LD_VAR 0 2
21530: PUSH
21531: LD_VAR 0 1
21535: PUSH
21536: LD_VAR 0 4
21540: ARRAY
21541: EQUAL
21542: IFFALSE 21558
// begin result := i ;
21544: LD_ADDR_VAR 0 3
21548: PUSH
21549: LD_VAR 0 4
21553: ST_TO_ADDR
// exit ;
21554: POP
21555: POP
21556: GO 21562
// end ;
21558: GO 21523
21560: POP
21561: POP
// end ;
21562: LD_VAR 0 3
21566: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21567: LD_INT 0
21569: PPUSH
// vc_chassis := chassis ;
21570: LD_ADDR_OWVAR 37
21574: PUSH
21575: LD_VAR 0 1
21579: ST_TO_ADDR
// vc_engine := engine ;
21580: LD_ADDR_OWVAR 39
21584: PUSH
21585: LD_VAR 0 2
21589: ST_TO_ADDR
// vc_control := control ;
21590: LD_ADDR_OWVAR 38
21594: PUSH
21595: LD_VAR 0 3
21599: ST_TO_ADDR
// vc_weapon := weapon ;
21600: LD_ADDR_OWVAR 40
21604: PUSH
21605: LD_VAR 0 4
21609: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21610: LD_ADDR_OWVAR 41
21614: PUSH
21615: LD_VAR 0 5
21619: ST_TO_ADDR
// end ;
21620: LD_VAR 0 6
21624: RET
// export function WantPlant ( unit ) ; var task ; begin
21625: LD_INT 0
21627: PPUSH
21628: PPUSH
// result := false ;
21629: LD_ADDR_VAR 0 2
21633: PUSH
21634: LD_INT 0
21636: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21637: LD_ADDR_VAR 0 3
21641: PUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 437
21651: ST_TO_ADDR
// if task then
21652: LD_VAR 0 3
21656: IFFALSE 21684
// if task [ 1 ] [ 1 ] = p then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 1
21665: ARRAY
21666: PUSH
21667: LD_INT 1
21669: ARRAY
21670: PUSH
21671: LD_STRING p
21673: EQUAL
21674: IFFALSE 21684
// result := true ;
21676: LD_ADDR_VAR 0 2
21680: PUSH
21681: LD_INT 1
21683: ST_TO_ADDR
// end ;
21684: LD_VAR 0 2
21688: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21689: LD_INT 0
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
// if pos < 1 then
21695: LD_VAR 0 2
21699: PUSH
21700: LD_INT 1
21702: LESS
21703: IFFALSE 21707
// exit ;
21705: GO 22010
// if pos = 1 then
21707: LD_VAR 0 2
21711: PUSH
21712: LD_INT 1
21714: EQUAL
21715: IFFALSE 21748
// result := Replace ( arr , pos [ 1 ] , value ) else
21717: LD_ADDR_VAR 0 4
21721: PUSH
21722: LD_VAR 0 1
21726: PPUSH
21727: LD_VAR 0 2
21731: PUSH
21732: LD_INT 1
21734: ARRAY
21735: PPUSH
21736: LD_VAR 0 3
21740: PPUSH
21741: CALL_OW 1
21745: ST_TO_ADDR
21746: GO 22010
// begin tmp := arr ;
21748: LD_ADDR_VAR 0 6
21752: PUSH
21753: LD_VAR 0 1
21757: ST_TO_ADDR
// s_arr := [ tmp ] ;
21758: LD_ADDR_VAR 0 7
21762: PUSH
21763: LD_VAR 0 6
21767: PUSH
21768: EMPTY
21769: LIST
21770: ST_TO_ADDR
// for i = 1 to pos - 1 do
21771: LD_ADDR_VAR 0 5
21775: PUSH
21776: DOUBLE
21777: LD_INT 1
21779: DEC
21780: ST_TO_ADDR
21781: LD_VAR 0 2
21785: PUSH
21786: LD_INT 1
21788: MINUS
21789: PUSH
21790: FOR_TO
21791: IFFALSE 21836
// begin tmp := tmp [ pos [ i ] ] ;
21793: LD_ADDR_VAR 0 6
21797: PUSH
21798: LD_VAR 0 6
21802: PUSH
21803: LD_VAR 0 2
21807: PUSH
21808: LD_VAR 0 5
21812: ARRAY
21813: ARRAY
21814: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21815: LD_ADDR_VAR 0 7
21819: PUSH
21820: LD_VAR 0 7
21824: PUSH
21825: LD_VAR 0 6
21829: PUSH
21830: EMPTY
21831: LIST
21832: ADD
21833: ST_TO_ADDR
// end ;
21834: GO 21790
21836: POP
21837: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21838: LD_ADDR_VAR 0 6
21842: PUSH
21843: LD_VAR 0 6
21847: PPUSH
21848: LD_VAR 0 2
21852: PUSH
21853: LD_VAR 0 2
21857: ARRAY
21858: PPUSH
21859: LD_VAR 0 3
21863: PPUSH
21864: CALL_OW 1
21868: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21869: LD_ADDR_VAR 0 7
21873: PUSH
21874: LD_VAR 0 7
21878: PPUSH
21879: LD_VAR 0 7
21883: PPUSH
21884: LD_VAR 0 6
21888: PPUSH
21889: CALL_OW 1
21893: ST_TO_ADDR
// for i = s_arr downto 2 do
21894: LD_ADDR_VAR 0 5
21898: PUSH
21899: DOUBLE
21900: LD_VAR 0 7
21904: INC
21905: ST_TO_ADDR
21906: LD_INT 2
21908: PUSH
21909: FOR_DOWNTO
21910: IFFALSE 21994
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21912: LD_ADDR_VAR 0 6
21916: PUSH
21917: LD_VAR 0 7
21921: PUSH
21922: LD_VAR 0 5
21926: PUSH
21927: LD_INT 1
21929: MINUS
21930: ARRAY
21931: PPUSH
21932: LD_VAR 0 2
21936: PUSH
21937: LD_VAR 0 5
21941: PUSH
21942: LD_INT 1
21944: MINUS
21945: ARRAY
21946: PPUSH
21947: LD_VAR 0 7
21951: PUSH
21952: LD_VAR 0 5
21956: ARRAY
21957: PPUSH
21958: CALL_OW 1
21962: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21963: LD_ADDR_VAR 0 7
21967: PUSH
21968: LD_VAR 0 7
21972: PPUSH
21973: LD_VAR 0 5
21977: PUSH
21978: LD_INT 1
21980: MINUS
21981: PPUSH
21982: LD_VAR 0 6
21986: PPUSH
21987: CALL_OW 1
21991: ST_TO_ADDR
// end ;
21992: GO 21909
21994: POP
21995: POP
// result := s_arr [ 1 ] ;
21996: LD_ADDR_VAR 0 4
22000: PUSH
22001: LD_VAR 0 7
22005: PUSH
22006: LD_INT 1
22008: ARRAY
22009: ST_TO_ADDR
// end ; end ;
22010: LD_VAR 0 4
22014: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22015: LD_INT 0
22017: PPUSH
22018: PPUSH
// if not list then
22019: LD_VAR 0 1
22023: NOT
22024: IFFALSE 22028
// exit ;
22026: GO 22119
// i := list [ pos1 ] ;
22028: LD_ADDR_VAR 0 5
22032: PUSH
22033: LD_VAR 0 1
22037: PUSH
22038: LD_VAR 0 2
22042: ARRAY
22043: ST_TO_ADDR
// if not i then
22044: LD_VAR 0 5
22048: NOT
22049: IFFALSE 22053
// exit ;
22051: GO 22119
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22053: LD_ADDR_VAR 0 1
22057: PUSH
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_VAR 0 2
22067: PPUSH
22068: LD_VAR 0 1
22072: PUSH
22073: LD_VAR 0 3
22077: ARRAY
22078: PPUSH
22079: CALL_OW 1
22083: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22084: LD_ADDR_VAR 0 1
22088: PUSH
22089: LD_VAR 0 1
22093: PPUSH
22094: LD_VAR 0 3
22098: PPUSH
22099: LD_VAR 0 5
22103: PPUSH
22104: CALL_OW 1
22108: ST_TO_ADDR
// result := list ;
22109: LD_ADDR_VAR 0 4
22113: PUSH
22114: LD_VAR 0 1
22118: ST_TO_ADDR
// end ;
22119: LD_VAR 0 4
22123: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22124: LD_INT 0
22126: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22127: LD_ADDR_VAR 0 5
22131: PUSH
22132: LD_VAR 0 1
22136: PPUSH
22137: CALL_OW 250
22141: PPUSH
22142: LD_VAR 0 1
22146: PPUSH
22147: CALL_OW 251
22151: PPUSH
22152: LD_VAR 0 2
22156: PPUSH
22157: LD_VAR 0 3
22161: PPUSH
22162: LD_VAR 0 4
22166: PPUSH
22167: CALL 22545 0 5
22171: ST_TO_ADDR
// end ;
22172: LD_VAR 0 5
22176: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22177: LD_INT 0
22179: PPUSH
22180: PPUSH
22181: PPUSH
22182: PPUSH
// if not list or not unit then
22183: LD_VAR 0 2
22187: NOT
22188: PUSH
22189: LD_VAR 0 1
22193: NOT
22194: OR
22195: IFFALSE 22199
// exit ;
22197: GO 22540
// result := [ ] ;
22199: LD_ADDR_VAR 0 5
22203: PUSH
22204: EMPTY
22205: ST_TO_ADDR
// for i in list do
22206: LD_ADDR_VAR 0 6
22210: PUSH
22211: LD_VAR 0 2
22215: PUSH
22216: FOR_IN
22217: IFFALSE 22435
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22219: LD_ADDR_VAR 0 8
22223: PUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_VAR 0 6
22233: PUSH
22234: LD_INT 1
22236: ARRAY
22237: PPUSH
22238: LD_VAR 0 6
22242: PUSH
22243: LD_INT 2
22245: ARRAY
22246: PPUSH
22247: CALL_OW 297
22251: ST_TO_ADDR
// if not Count ( result ) then
22252: LD_VAR 0 5
22256: PPUSH
22257: CALL 18829 0 1
22261: NOT
22262: IFFALSE 22295
// begin result := Join ( result , [ i , tmp ] ) ;
22264: LD_ADDR_VAR 0 5
22268: PUSH
22269: LD_VAR 0 5
22273: PPUSH
22274: LD_VAR 0 6
22278: PUSH
22279: LD_VAR 0 8
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL 54438 0 2
22292: ST_TO_ADDR
// continue ;
22293: GO 22216
// end ; if result [ result ] [ 2 ] <= tmp then
22295: LD_VAR 0 5
22299: PUSH
22300: LD_VAR 0 5
22304: ARRAY
22305: PUSH
22306: LD_INT 2
22308: ARRAY
22309: PUSH
22310: LD_VAR 0 8
22314: LESSEQUAL
22315: IFFALSE 22348
// result := Join ( result , [ i , tmp ] ) else
22317: LD_ADDR_VAR 0 5
22321: PUSH
22322: LD_VAR 0 5
22326: PPUSH
22327: LD_VAR 0 6
22331: PUSH
22332: LD_VAR 0 8
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PPUSH
22341: CALL 54438 0 2
22345: ST_TO_ADDR
22346: GO 22433
// begin for j := 1 to Count ( result ) do
22348: LD_ADDR_VAR 0 7
22352: PUSH
22353: DOUBLE
22354: LD_INT 1
22356: DEC
22357: ST_TO_ADDR
22358: LD_VAR 0 5
22362: PPUSH
22363: CALL 18829 0 1
22367: PUSH
22368: FOR_TO
22369: IFFALSE 22431
// begin if tmp < result [ j ] [ 2 ] then
22371: LD_VAR 0 8
22375: PUSH
22376: LD_VAR 0 5
22380: PUSH
22381: LD_VAR 0 7
22385: ARRAY
22386: PUSH
22387: LD_INT 2
22389: ARRAY
22390: LESS
22391: IFFALSE 22429
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22393: LD_ADDR_VAR 0 5
22397: PUSH
22398: LD_VAR 0 5
22402: PPUSH
22403: LD_VAR 0 7
22407: PPUSH
22408: LD_VAR 0 6
22412: PUSH
22413: LD_VAR 0 8
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PPUSH
22422: CALL_OW 2
22426: ST_TO_ADDR
// break ;
22427: GO 22431
// end ; end ;
22429: GO 22368
22431: POP
22432: POP
// end ; end ;
22433: GO 22216
22435: POP
22436: POP
// if result and not asc then
22437: LD_VAR 0 5
22441: PUSH
22442: LD_VAR 0 3
22446: NOT
22447: AND
22448: IFFALSE 22465
// result := ReverseArray ( result ) ;
22450: LD_ADDR_VAR 0 5
22454: PUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL 49705 0 1
22464: ST_TO_ADDR
// tmp := [ ] ;
22465: LD_ADDR_VAR 0 8
22469: PUSH
22470: EMPTY
22471: ST_TO_ADDR
// if mode then
22472: LD_VAR 0 4
22476: IFFALSE 22540
// begin for i := 1 to result do
22478: LD_ADDR_VAR 0 6
22482: PUSH
22483: DOUBLE
22484: LD_INT 1
22486: DEC
22487: ST_TO_ADDR
22488: LD_VAR 0 5
22492: PUSH
22493: FOR_TO
22494: IFFALSE 22528
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22496: LD_ADDR_VAR 0 8
22500: PUSH
22501: LD_VAR 0 8
22505: PPUSH
22506: LD_VAR 0 5
22510: PUSH
22511: LD_VAR 0 6
22515: ARRAY
22516: PUSH
22517: LD_INT 1
22519: ARRAY
22520: PPUSH
22521: CALL 54438 0 2
22525: ST_TO_ADDR
22526: GO 22493
22528: POP
22529: POP
// result := tmp ;
22530: LD_ADDR_VAR 0 5
22534: PUSH
22535: LD_VAR 0 8
22539: ST_TO_ADDR
// end ; end ;
22540: LD_VAR 0 5
22544: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22545: LD_INT 0
22547: PPUSH
22548: PPUSH
22549: PPUSH
22550: PPUSH
// if not list then
22551: LD_VAR 0 3
22555: NOT
22556: IFFALSE 22560
// exit ;
22558: GO 22948
// result := [ ] ;
22560: LD_ADDR_VAR 0 6
22564: PUSH
22565: EMPTY
22566: ST_TO_ADDR
// for i in list do
22567: LD_ADDR_VAR 0 7
22571: PUSH
22572: LD_VAR 0 3
22576: PUSH
22577: FOR_IN
22578: IFFALSE 22780
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22580: LD_ADDR_VAR 0 9
22584: PUSH
22585: LD_VAR 0 7
22589: PPUSH
22590: LD_VAR 0 1
22594: PPUSH
22595: LD_VAR 0 2
22599: PPUSH
22600: CALL_OW 297
22604: ST_TO_ADDR
// if not result then
22605: LD_VAR 0 6
22609: NOT
22610: IFFALSE 22636
// result := [ [ i , tmp ] ] else
22612: LD_ADDR_VAR 0 6
22616: PUSH
22617: LD_VAR 0 7
22621: PUSH
22622: LD_VAR 0 9
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: ST_TO_ADDR
22634: GO 22778
// begin if result [ result ] [ 2 ] < tmp then
22636: LD_VAR 0 6
22640: PUSH
22641: LD_VAR 0 6
22645: ARRAY
22646: PUSH
22647: LD_INT 2
22649: ARRAY
22650: PUSH
22651: LD_VAR 0 9
22655: LESS
22656: IFFALSE 22698
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22658: LD_ADDR_VAR 0 6
22662: PUSH
22663: LD_VAR 0 6
22667: PPUSH
22668: LD_VAR 0 6
22672: PUSH
22673: LD_INT 1
22675: PLUS
22676: PPUSH
22677: LD_VAR 0 7
22681: PUSH
22682: LD_VAR 0 9
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 2
22695: ST_TO_ADDR
22696: GO 22778
// for j = 1 to result do
22698: LD_ADDR_VAR 0 8
22702: PUSH
22703: DOUBLE
22704: LD_INT 1
22706: DEC
22707: ST_TO_ADDR
22708: LD_VAR 0 6
22712: PUSH
22713: FOR_TO
22714: IFFALSE 22776
// begin if tmp < result [ j ] [ 2 ] then
22716: LD_VAR 0 9
22720: PUSH
22721: LD_VAR 0 6
22725: PUSH
22726: LD_VAR 0 8
22730: ARRAY
22731: PUSH
22732: LD_INT 2
22734: ARRAY
22735: LESS
22736: IFFALSE 22774
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22738: LD_ADDR_VAR 0 6
22742: PUSH
22743: LD_VAR 0 6
22747: PPUSH
22748: LD_VAR 0 8
22752: PPUSH
22753: LD_VAR 0 7
22757: PUSH
22758: LD_VAR 0 9
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: PPUSH
22767: CALL_OW 2
22771: ST_TO_ADDR
// break ;
22772: GO 22776
// end ; end ;
22774: GO 22713
22776: POP
22777: POP
// end ; end ;
22778: GO 22577
22780: POP
22781: POP
// if result and not asc then
22782: LD_VAR 0 6
22786: PUSH
22787: LD_VAR 0 4
22791: NOT
22792: AND
22793: IFFALSE 22868
// begin tmp := result ;
22795: LD_ADDR_VAR 0 9
22799: PUSH
22800: LD_VAR 0 6
22804: ST_TO_ADDR
// for i = tmp downto 1 do
22805: LD_ADDR_VAR 0 7
22809: PUSH
22810: DOUBLE
22811: LD_VAR 0 9
22815: INC
22816: ST_TO_ADDR
22817: LD_INT 1
22819: PUSH
22820: FOR_DOWNTO
22821: IFFALSE 22866
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22823: LD_ADDR_VAR 0 6
22827: PUSH
22828: LD_VAR 0 6
22832: PPUSH
22833: LD_VAR 0 9
22837: PUSH
22838: LD_VAR 0 7
22842: MINUS
22843: PUSH
22844: LD_INT 1
22846: PLUS
22847: PPUSH
22848: LD_VAR 0 9
22852: PUSH
22853: LD_VAR 0 7
22857: ARRAY
22858: PPUSH
22859: CALL_OW 1
22863: ST_TO_ADDR
22864: GO 22820
22866: POP
22867: POP
// end ; tmp := [ ] ;
22868: LD_ADDR_VAR 0 9
22872: PUSH
22873: EMPTY
22874: ST_TO_ADDR
// if mode then
22875: LD_VAR 0 5
22879: IFFALSE 22948
// begin for i = 1 to result do
22881: LD_ADDR_VAR 0 7
22885: PUSH
22886: DOUBLE
22887: LD_INT 1
22889: DEC
22890: ST_TO_ADDR
22891: LD_VAR 0 6
22895: PUSH
22896: FOR_TO
22897: IFFALSE 22936
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22899: LD_ADDR_VAR 0 9
22903: PUSH
22904: LD_VAR 0 9
22908: PPUSH
22909: LD_VAR 0 7
22913: PPUSH
22914: LD_VAR 0 6
22918: PUSH
22919: LD_VAR 0 7
22923: ARRAY
22924: PUSH
22925: LD_INT 1
22927: ARRAY
22928: PPUSH
22929: CALL_OW 1
22933: ST_TO_ADDR
22934: GO 22896
22936: POP
22937: POP
// result := tmp ;
22938: LD_ADDR_VAR 0 6
22942: PUSH
22943: LD_VAR 0 9
22947: ST_TO_ADDR
// end ; end ;
22948: LD_VAR 0 6
22952: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22953: LD_INT 0
22955: PPUSH
22956: PPUSH
22957: PPUSH
22958: PPUSH
22959: PPUSH
22960: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22961: LD_ADDR_VAR 0 5
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 0
22974: PUSH
22975: EMPTY
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// if not x or not y then
22983: LD_VAR 0 2
22987: NOT
22988: PUSH
22989: LD_VAR 0 3
22993: NOT
22994: OR
22995: IFFALSE 22999
// exit ;
22997: GO 24649
// if not range then
22999: LD_VAR 0 4
23003: NOT
23004: IFFALSE 23014
// range := 10 ;
23006: LD_ADDR_VAR 0 4
23010: PUSH
23011: LD_INT 10
23013: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23014: LD_ADDR_VAR 0 8
23018: PUSH
23019: LD_INT 81
23021: PUSH
23022: LD_VAR 0 1
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 92
23033: PUSH
23034: LD_VAR 0 2
23038: PUSH
23039: LD_VAR 0 3
23043: PUSH
23044: LD_VAR 0 4
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: ST_TO_ADDR
// if not tmp then
23082: LD_VAR 0 8
23086: NOT
23087: IFFALSE 23091
// exit ;
23089: GO 24649
// for i in tmp do
23091: LD_ADDR_VAR 0 6
23095: PUSH
23096: LD_VAR 0 8
23100: PUSH
23101: FOR_IN
23102: IFFALSE 24624
// begin points := [ 0 , 0 , 0 ] ;
23104: LD_ADDR_VAR 0 9
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 0
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: ST_TO_ADDR
// bpoints := 1 ;
23123: LD_ADDR_VAR 0 10
23127: PUSH
23128: LD_INT 1
23130: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23131: LD_VAR 0 6
23135: PPUSH
23136: CALL_OW 247
23140: PUSH
23141: LD_INT 1
23143: DOUBLE
23144: EQUAL
23145: IFTRUE 23149
23147: GO 23727
23149: POP
// begin if GetClass ( i ) = 1 then
23150: LD_VAR 0 6
23154: PPUSH
23155: CALL_OW 257
23159: PUSH
23160: LD_INT 1
23162: EQUAL
23163: IFFALSE 23184
// points := [ 10 , 5 , 3 ] ;
23165: LD_ADDR_VAR 0 9
23169: PUSH
23170: LD_INT 10
23172: PUSH
23173: LD_INT 5
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: LIST
23183: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23184: LD_VAR 0 6
23188: PPUSH
23189: CALL_OW 257
23193: PUSH
23194: LD_INT 2
23196: PUSH
23197: LD_INT 3
23199: PUSH
23200: LD_INT 4
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: IN
23208: IFFALSE 23229
// points := [ 3 , 2 , 1 ] ;
23210: LD_ADDR_VAR 0 9
23214: PUSH
23215: LD_INT 3
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: LIST
23228: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23229: LD_VAR 0 6
23233: PPUSH
23234: CALL_OW 257
23238: PUSH
23239: LD_INT 5
23241: EQUAL
23242: IFFALSE 23263
// points := [ 130 , 5 , 2 ] ;
23244: LD_ADDR_VAR 0 9
23248: PUSH
23249: LD_INT 130
23251: PUSH
23252: LD_INT 5
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23263: LD_VAR 0 6
23267: PPUSH
23268: CALL_OW 257
23272: PUSH
23273: LD_INT 8
23275: EQUAL
23276: IFFALSE 23297
// points := [ 35 , 35 , 30 ] ;
23278: LD_ADDR_VAR 0 9
23282: PUSH
23283: LD_INT 35
23285: PUSH
23286: LD_INT 35
23288: PUSH
23289: LD_INT 30
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: LIST
23296: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23297: LD_VAR 0 6
23301: PPUSH
23302: CALL_OW 257
23306: PUSH
23307: LD_INT 9
23309: EQUAL
23310: IFFALSE 23331
// points := [ 20 , 55 , 40 ] ;
23312: LD_ADDR_VAR 0 9
23316: PUSH
23317: LD_INT 20
23319: PUSH
23320: LD_INT 55
23322: PUSH
23323: LD_INT 40
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23331: LD_VAR 0 6
23335: PPUSH
23336: CALL_OW 257
23340: PUSH
23341: LD_INT 12
23343: PUSH
23344: LD_INT 16
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: IN
23351: IFFALSE 23372
// points := [ 5 , 3 , 2 ] ;
23353: LD_ADDR_VAR 0 9
23357: PUSH
23358: LD_INT 5
23360: PUSH
23361: LD_INT 3
23363: PUSH
23364: LD_INT 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23372: LD_VAR 0 6
23376: PPUSH
23377: CALL_OW 257
23381: PUSH
23382: LD_INT 17
23384: EQUAL
23385: IFFALSE 23406
// points := [ 100 , 50 , 75 ] ;
23387: LD_ADDR_VAR 0 9
23391: PUSH
23392: LD_INT 100
23394: PUSH
23395: LD_INT 50
23397: PUSH
23398: LD_INT 75
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: LIST
23405: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23406: LD_VAR 0 6
23410: PPUSH
23411: CALL_OW 257
23415: PUSH
23416: LD_INT 15
23418: EQUAL
23419: IFFALSE 23440
// points := [ 10 , 5 , 3 ] ;
23421: LD_ADDR_VAR 0 9
23425: PUSH
23426: LD_INT 10
23428: PUSH
23429: LD_INT 5
23431: PUSH
23432: LD_INT 3
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23440: LD_VAR 0 6
23444: PPUSH
23445: CALL_OW 257
23449: PUSH
23450: LD_INT 14
23452: EQUAL
23453: IFFALSE 23474
// points := [ 10 , 0 , 0 ] ;
23455: LD_ADDR_VAR 0 9
23459: PUSH
23460: LD_INT 10
23462: PUSH
23463: LD_INT 0
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23474: LD_VAR 0 6
23478: PPUSH
23479: CALL_OW 257
23483: PUSH
23484: LD_INT 11
23486: EQUAL
23487: IFFALSE 23508
// points := [ 30 , 10 , 5 ] ;
23489: LD_ADDR_VAR 0 9
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_INT 10
23499: PUSH
23500: LD_INT 5
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23508: LD_VAR 0 1
23512: PPUSH
23513: LD_INT 5
23515: PPUSH
23516: CALL_OW 321
23520: PUSH
23521: LD_INT 2
23523: EQUAL
23524: IFFALSE 23541
// bpoints := bpoints * 1.8 ;
23526: LD_ADDR_VAR 0 10
23530: PUSH
23531: LD_VAR 0 10
23535: PUSH
23536: LD_REAL  1.80000000000000E+0000
23539: MUL
23540: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23541: LD_VAR 0 6
23545: PPUSH
23546: CALL_OW 257
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: LD_INT 3
23559: PUSH
23560: LD_INT 4
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: IN
23569: PUSH
23570: LD_VAR 0 1
23574: PPUSH
23575: LD_INT 51
23577: PPUSH
23578: CALL_OW 321
23582: PUSH
23583: LD_INT 2
23585: EQUAL
23586: AND
23587: IFFALSE 23604
// bpoints := bpoints * 1.2 ;
23589: LD_ADDR_VAR 0 10
23593: PUSH
23594: LD_VAR 0 10
23598: PUSH
23599: LD_REAL  1.20000000000000E+0000
23602: MUL
23603: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23604: LD_VAR 0 6
23608: PPUSH
23609: CALL_OW 257
23613: PUSH
23614: LD_INT 5
23616: PUSH
23617: LD_INT 7
23619: PUSH
23620: LD_INT 9
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: IN
23628: PUSH
23629: LD_VAR 0 1
23633: PPUSH
23634: LD_INT 52
23636: PPUSH
23637: CALL_OW 321
23641: PUSH
23642: LD_INT 2
23644: EQUAL
23645: AND
23646: IFFALSE 23663
// bpoints := bpoints * 1.5 ;
23648: LD_ADDR_VAR 0 10
23652: PUSH
23653: LD_VAR 0 10
23657: PUSH
23658: LD_REAL  1.50000000000000E+0000
23661: MUL
23662: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23663: LD_VAR 0 1
23667: PPUSH
23668: LD_INT 66
23670: PPUSH
23671: CALL_OW 321
23675: PUSH
23676: LD_INT 2
23678: EQUAL
23679: IFFALSE 23696
// bpoints := bpoints * 1.1 ;
23681: LD_ADDR_VAR 0 10
23685: PUSH
23686: LD_VAR 0 10
23690: PUSH
23691: LD_REAL  1.10000000000000E+0000
23694: MUL
23695: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23696: LD_ADDR_VAR 0 10
23700: PUSH
23701: LD_VAR 0 10
23705: PUSH
23706: LD_VAR 0 6
23710: PPUSH
23711: LD_INT 1
23713: PPUSH
23714: CALL_OW 259
23718: PUSH
23719: LD_REAL  1.15000000000000E+0000
23722: MUL
23723: MUL
23724: ST_TO_ADDR
// end ; unit_vehicle :
23725: GO 24553
23727: LD_INT 2
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 24541
23735: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23736: LD_VAR 0 6
23740: PPUSH
23741: CALL_OW 264
23745: PUSH
23746: LD_INT 2
23748: PUSH
23749: LD_INT 42
23751: PUSH
23752: LD_INT 24
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: LIST
23759: IN
23760: IFFALSE 23781
// points := [ 25 , 5 , 3 ] ;
23762: LD_ADDR_VAR 0 9
23766: PUSH
23767: LD_INT 25
23769: PUSH
23770: LD_INT 5
23772: PUSH
23773: LD_INT 3
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: LIST
23780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23781: LD_VAR 0 6
23785: PPUSH
23786: CALL_OW 264
23790: PUSH
23791: LD_INT 4
23793: PUSH
23794: LD_INT 43
23796: PUSH
23797: LD_INT 25
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: IN
23805: IFFALSE 23826
// points := [ 40 , 15 , 5 ] ;
23807: LD_ADDR_VAR 0 9
23811: PUSH
23812: LD_INT 40
23814: PUSH
23815: LD_INT 15
23817: PUSH
23818: LD_INT 5
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: LIST
23825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23826: LD_VAR 0 6
23830: PPUSH
23831: CALL_OW 264
23835: PUSH
23836: LD_INT 3
23838: PUSH
23839: LD_INT 23
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: IN
23846: IFFALSE 23867
// points := [ 7 , 25 , 8 ] ;
23848: LD_ADDR_VAR 0 9
23852: PUSH
23853: LD_INT 7
23855: PUSH
23856: LD_INT 25
23858: PUSH
23859: LD_INT 8
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23867: LD_VAR 0 6
23871: PPUSH
23872: CALL_OW 264
23876: PUSH
23877: LD_INT 5
23879: PUSH
23880: LD_INT 27
23882: PUSH
23883: LD_INT 44
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: IN
23891: IFFALSE 23912
// points := [ 14 , 50 , 16 ] ;
23893: LD_ADDR_VAR 0 9
23897: PUSH
23898: LD_INT 14
23900: PUSH
23901: LD_INT 50
23903: PUSH
23904: LD_INT 16
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23912: LD_VAR 0 6
23916: PPUSH
23917: CALL_OW 264
23921: PUSH
23922: LD_INT 6
23924: PUSH
23925: LD_INT 46
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: IN
23932: IFFALSE 23953
// points := [ 32 , 120 , 70 ] ;
23934: LD_ADDR_VAR 0 9
23938: PUSH
23939: LD_INT 32
23941: PUSH
23942: LD_INT 120
23944: PUSH
23945: LD_INT 70
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23953: LD_VAR 0 6
23957: PPUSH
23958: CALL_OW 264
23962: PUSH
23963: LD_INT 7
23965: PUSH
23966: LD_INT 28
23968: PUSH
23969: LD_INT 45
23971: PUSH
23972: LD_INT 92
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: IN
23981: IFFALSE 24002
// points := [ 35 , 20 , 45 ] ;
23983: LD_ADDR_VAR 0 9
23987: PUSH
23988: LD_INT 35
23990: PUSH
23991: LD_INT 20
23993: PUSH
23994: LD_INT 45
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: LIST
24001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24002: LD_VAR 0 6
24006: PPUSH
24007: CALL_OW 264
24011: PUSH
24012: LD_INT 47
24014: PUSH
24015: EMPTY
24016: LIST
24017: IN
24018: IFFALSE 24039
// points := [ 67 , 45 , 75 ] ;
24020: LD_ADDR_VAR 0 9
24024: PUSH
24025: LD_INT 67
24027: PUSH
24028: LD_INT 45
24030: PUSH
24031: LD_INT 75
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24039: LD_VAR 0 6
24043: PPUSH
24044: CALL_OW 264
24048: PUSH
24049: LD_INT 26
24051: PUSH
24052: EMPTY
24053: LIST
24054: IN
24055: IFFALSE 24076
// points := [ 120 , 30 , 80 ] ;
24057: LD_ADDR_VAR 0 9
24061: PUSH
24062: LD_INT 120
24064: PUSH
24065: LD_INT 30
24067: PUSH
24068: LD_INT 80
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24076: LD_VAR 0 6
24080: PPUSH
24081: CALL_OW 264
24085: PUSH
24086: LD_INT 22
24088: PUSH
24089: EMPTY
24090: LIST
24091: IN
24092: IFFALSE 24113
// points := [ 40 , 1 , 1 ] ;
24094: LD_ADDR_VAR 0 9
24098: PUSH
24099: LD_INT 40
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24113: LD_VAR 0 6
24117: PPUSH
24118: CALL_OW 264
24122: PUSH
24123: LD_INT 29
24125: PUSH
24126: EMPTY
24127: LIST
24128: IN
24129: IFFALSE 24150
// points := [ 70 , 200 , 400 ] ;
24131: LD_ADDR_VAR 0 9
24135: PUSH
24136: LD_INT 70
24138: PUSH
24139: LD_INT 200
24141: PUSH
24142: LD_INT 400
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24150: LD_VAR 0 6
24154: PPUSH
24155: CALL_OW 264
24159: PUSH
24160: LD_INT 14
24162: PUSH
24163: LD_INT 53
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: IN
24170: IFFALSE 24191
// points := [ 40 , 10 , 20 ] ;
24172: LD_ADDR_VAR 0 9
24176: PUSH
24177: LD_INT 40
24179: PUSH
24180: LD_INT 10
24182: PUSH
24183: LD_INT 20
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24191: LD_VAR 0 6
24195: PPUSH
24196: CALL_OW 264
24200: PUSH
24201: LD_INT 9
24203: PUSH
24204: EMPTY
24205: LIST
24206: IN
24207: IFFALSE 24228
// points := [ 5 , 70 , 20 ] ;
24209: LD_ADDR_VAR 0 9
24213: PUSH
24214: LD_INT 5
24216: PUSH
24217: LD_INT 70
24219: PUSH
24220: LD_INT 20
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24228: LD_VAR 0 6
24232: PPUSH
24233: CALL_OW 264
24237: PUSH
24238: LD_INT 10
24240: PUSH
24241: EMPTY
24242: LIST
24243: IN
24244: IFFALSE 24265
// points := [ 35 , 110 , 70 ] ;
24246: LD_ADDR_VAR 0 9
24250: PUSH
24251: LD_INT 35
24253: PUSH
24254: LD_INT 110
24256: PUSH
24257: LD_INT 70
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24265: LD_VAR 0 6
24269: PPUSH
24270: CALL_OW 265
24274: PUSH
24275: LD_INT 25
24277: EQUAL
24278: IFFALSE 24299
// points := [ 80 , 65 , 100 ] ;
24280: LD_ADDR_VAR 0 9
24284: PUSH
24285: LD_INT 80
24287: PUSH
24288: LD_INT 65
24290: PUSH
24291: LD_INT 100
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24299: LD_VAR 0 6
24303: PPUSH
24304: CALL_OW 263
24308: PUSH
24309: LD_INT 1
24311: EQUAL
24312: IFFALSE 24347
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24314: LD_ADDR_VAR 0 10
24318: PUSH
24319: LD_VAR 0 10
24323: PUSH
24324: LD_VAR 0 6
24328: PPUSH
24329: CALL_OW 311
24333: PPUSH
24334: LD_INT 3
24336: PPUSH
24337: CALL_OW 259
24341: PUSH
24342: LD_INT 4
24344: MUL
24345: MUL
24346: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24347: LD_VAR 0 6
24351: PPUSH
24352: CALL_OW 263
24356: PUSH
24357: LD_INT 2
24359: EQUAL
24360: IFFALSE 24411
// begin j := IsControledBy ( i ) ;
24362: LD_ADDR_VAR 0 7
24366: PUSH
24367: LD_VAR 0 6
24371: PPUSH
24372: CALL_OW 312
24376: ST_TO_ADDR
// if j then
24377: LD_VAR 0 7
24381: IFFALSE 24411
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24383: LD_ADDR_VAR 0 10
24387: PUSH
24388: LD_VAR 0 10
24392: PUSH
24393: LD_VAR 0 7
24397: PPUSH
24398: LD_INT 3
24400: PPUSH
24401: CALL_OW 259
24405: PUSH
24406: LD_INT 3
24408: MUL
24409: MUL
24410: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24411: LD_VAR 0 6
24415: PPUSH
24416: CALL_OW 264
24420: PUSH
24421: LD_INT 5
24423: PUSH
24424: LD_INT 6
24426: PUSH
24427: LD_INT 46
24429: PUSH
24430: LD_INT 44
24432: PUSH
24433: LD_INT 47
24435: PUSH
24436: LD_INT 45
24438: PUSH
24439: LD_INT 28
24441: PUSH
24442: LD_INT 7
24444: PUSH
24445: LD_INT 27
24447: PUSH
24448: LD_INT 29
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: IN
24463: PUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: LD_INT 52
24471: PPUSH
24472: CALL_OW 321
24476: PUSH
24477: LD_INT 2
24479: EQUAL
24480: AND
24481: IFFALSE 24498
// bpoints := bpoints * 1.2 ;
24483: LD_ADDR_VAR 0 10
24487: PUSH
24488: LD_VAR 0 10
24492: PUSH
24493: LD_REAL  1.20000000000000E+0000
24496: MUL
24497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24498: LD_VAR 0 6
24502: PPUSH
24503: CALL_OW 264
24507: PUSH
24508: LD_INT 6
24510: PUSH
24511: LD_INT 46
24513: PUSH
24514: LD_INT 47
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: IN
24522: IFFALSE 24539
// bpoints := bpoints * 1.2 ;
24524: LD_ADDR_VAR 0 10
24528: PUSH
24529: LD_VAR 0 10
24533: PUSH
24534: LD_REAL  1.20000000000000E+0000
24537: MUL
24538: ST_TO_ADDR
// end ; unit_building :
24539: GO 24553
24541: LD_INT 3
24543: DOUBLE
24544: EQUAL
24545: IFTRUE 24549
24547: GO 24552
24549: POP
// ; end ;
24550: GO 24553
24552: POP
// for j = 1 to 3 do
24553: LD_ADDR_VAR 0 7
24557: PUSH
24558: DOUBLE
24559: LD_INT 1
24561: DEC
24562: ST_TO_ADDR
24563: LD_INT 3
24565: PUSH
24566: FOR_TO
24567: IFFALSE 24620
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24569: LD_ADDR_VAR 0 5
24573: PUSH
24574: LD_VAR 0 5
24578: PPUSH
24579: LD_VAR 0 7
24583: PPUSH
24584: LD_VAR 0 5
24588: PUSH
24589: LD_VAR 0 7
24593: ARRAY
24594: PUSH
24595: LD_VAR 0 9
24599: PUSH
24600: LD_VAR 0 7
24604: ARRAY
24605: PUSH
24606: LD_VAR 0 10
24610: MUL
24611: PLUS
24612: PPUSH
24613: CALL_OW 1
24617: ST_TO_ADDR
24618: GO 24566
24620: POP
24621: POP
// end ;
24622: GO 23101
24624: POP
24625: POP
// result := Replace ( result , 4 , tmp ) ;
24626: LD_ADDR_VAR 0 5
24630: PUSH
24631: LD_VAR 0 5
24635: PPUSH
24636: LD_INT 4
24638: PPUSH
24639: LD_VAR 0 8
24643: PPUSH
24644: CALL_OW 1
24648: ST_TO_ADDR
// end ;
24649: LD_VAR 0 5
24653: RET
// export function DangerAtRange ( unit , range ) ; begin
24654: LD_INT 0
24656: PPUSH
// if not unit then
24657: LD_VAR 0 1
24661: NOT
24662: IFFALSE 24666
// exit ;
24664: GO 24711
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: LD_VAR 0 1
24675: PPUSH
24676: CALL_OW 255
24680: PPUSH
24681: LD_VAR 0 1
24685: PPUSH
24686: CALL_OW 250
24690: PPUSH
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 251
24700: PPUSH
24701: LD_VAR 0 2
24705: PPUSH
24706: CALL 22953 0 4
24710: ST_TO_ADDR
// end ;
24711: LD_VAR 0 3
24715: RET
// export function DangerInArea ( side , area ) ; begin
24716: LD_INT 0
24718: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24719: LD_ADDR_VAR 0 3
24723: PUSH
24724: LD_VAR 0 2
24728: PPUSH
24729: LD_INT 81
24731: PUSH
24732: LD_VAR 0 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PPUSH
24741: CALL_OW 70
24745: ST_TO_ADDR
// end ;
24746: LD_VAR 0 3
24750: RET
// export function IsExtension ( b ) ; begin
24751: LD_INT 0
24753: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24754: LD_ADDR_VAR 0 2
24758: PUSH
24759: LD_VAR 0 1
24763: PUSH
24764: LD_INT 23
24766: PUSH
24767: LD_INT 20
24769: PUSH
24770: LD_INT 22
24772: PUSH
24773: LD_INT 17
24775: PUSH
24776: LD_INT 24
24778: PUSH
24779: LD_INT 21
24781: PUSH
24782: LD_INT 19
24784: PUSH
24785: LD_INT 16
24787: PUSH
24788: LD_INT 25
24790: PUSH
24791: LD_INT 18
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: IN
24806: ST_TO_ADDR
// end ;
24807: LD_VAR 0 2
24811: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24812: LD_INT 0
24814: PPUSH
24815: PPUSH
24816: PPUSH
// result := [ ] ;
24817: LD_ADDR_VAR 0 4
24821: PUSH
24822: EMPTY
24823: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24824: LD_ADDR_VAR 0 5
24828: PUSH
24829: LD_VAR 0 2
24833: PPUSH
24834: LD_INT 21
24836: PUSH
24837: LD_INT 3
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PPUSH
24844: CALL_OW 70
24848: ST_TO_ADDR
// if not tmp then
24849: LD_VAR 0 5
24853: NOT
24854: IFFALSE 24858
// exit ;
24856: GO 24922
// if checkLink then
24858: LD_VAR 0 3
24862: IFFALSE 24912
// begin for i in tmp do
24864: LD_ADDR_VAR 0 6
24868: PUSH
24869: LD_VAR 0 5
24873: PUSH
24874: FOR_IN
24875: IFFALSE 24910
// if GetBase ( i ) <> base then
24877: LD_VAR 0 6
24881: PPUSH
24882: CALL_OW 274
24886: PUSH
24887: LD_VAR 0 1
24891: NONEQUAL
24892: IFFALSE 24908
// ComLinkToBase ( base , i ) ;
24894: LD_VAR 0 1
24898: PPUSH
24899: LD_VAR 0 6
24903: PPUSH
24904: CALL_OW 169
24908: GO 24874
24910: POP
24911: POP
// end ; result := tmp ;
24912: LD_ADDR_VAR 0 4
24916: PUSH
24917: LD_VAR 0 5
24921: ST_TO_ADDR
// end ;
24922: LD_VAR 0 4
24926: RET
// export function ComComplete ( units , b ) ; var i ; begin
24927: LD_INT 0
24929: PPUSH
24930: PPUSH
// if not units then
24931: LD_VAR 0 1
24935: NOT
24936: IFFALSE 24940
// exit ;
24938: GO 25030
// for i in units do
24940: LD_ADDR_VAR 0 4
24944: PUSH
24945: LD_VAR 0 1
24949: PUSH
24950: FOR_IN
24951: IFFALSE 25028
// if BuildingStatus ( b ) = bs_build then
24953: LD_VAR 0 2
24957: PPUSH
24958: CALL_OW 461
24962: PUSH
24963: LD_INT 1
24965: EQUAL
24966: IFFALSE 25026
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24968: LD_VAR 0 4
24972: PPUSH
24973: LD_STRING h
24975: PUSH
24976: LD_VAR 0 2
24980: PPUSH
24981: CALL_OW 250
24985: PUSH
24986: LD_VAR 0 2
24990: PPUSH
24991: CALL_OW 251
24995: PUSH
24996: LD_VAR 0 2
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: PPUSH
25022: CALL_OW 446
25026: GO 24950
25028: POP
25029: POP
// end ;
25030: LD_VAR 0 3
25034: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25035: LD_INT 0
25037: PPUSH
25038: PPUSH
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25043: LD_VAR 0 1
25047: NOT
25048: PUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 263
25058: PUSH
25059: LD_INT 2
25061: NONEQUAL
25062: OR
25063: IFFALSE 25067
// exit ;
25065: GO 25383
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25067: LD_ADDR_VAR 0 6
25071: PUSH
25072: LD_INT 22
25074: PUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 255
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 30
25094: PUSH
25095: LD_INT 36
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 34
25104: PUSH
25105: LD_INT 31
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PPUSH
25121: CALL_OW 69
25125: ST_TO_ADDR
// if not tmp then
25126: LD_VAR 0 6
25130: NOT
25131: IFFALSE 25135
// exit ;
25133: GO 25383
// result := [ ] ;
25135: LD_ADDR_VAR 0 2
25139: PUSH
25140: EMPTY
25141: ST_TO_ADDR
// for i in tmp do
25142: LD_ADDR_VAR 0 3
25146: PUSH
25147: LD_VAR 0 6
25151: PUSH
25152: FOR_IN
25153: IFFALSE 25224
// begin t := UnitsInside ( i ) ;
25155: LD_ADDR_VAR 0 4
25159: PUSH
25160: LD_VAR 0 3
25164: PPUSH
25165: CALL_OW 313
25169: ST_TO_ADDR
// if t then
25170: LD_VAR 0 4
25174: IFFALSE 25222
// for j in t do
25176: LD_ADDR_VAR 0 7
25180: PUSH
25181: LD_VAR 0 4
25185: PUSH
25186: FOR_IN
25187: IFFALSE 25220
// result := Replace ( result , result + 1 , j ) ;
25189: LD_ADDR_VAR 0 2
25193: PUSH
25194: LD_VAR 0 2
25198: PPUSH
25199: LD_VAR 0 2
25203: PUSH
25204: LD_INT 1
25206: PLUS
25207: PPUSH
25208: LD_VAR 0 7
25212: PPUSH
25213: CALL_OW 1
25217: ST_TO_ADDR
25218: GO 25186
25220: POP
25221: POP
// end ;
25222: GO 25152
25224: POP
25225: POP
// if not result then
25226: LD_VAR 0 2
25230: NOT
25231: IFFALSE 25235
// exit ;
25233: GO 25383
// mech := result [ 1 ] ;
25235: LD_ADDR_VAR 0 5
25239: PUSH
25240: LD_VAR 0 2
25244: PUSH
25245: LD_INT 1
25247: ARRAY
25248: ST_TO_ADDR
// if result > 1 then
25249: LD_VAR 0 2
25253: PUSH
25254: LD_INT 1
25256: GREATER
25257: IFFALSE 25369
// begin for i = 2 to result do
25259: LD_ADDR_VAR 0 3
25263: PUSH
25264: DOUBLE
25265: LD_INT 2
25267: DEC
25268: ST_TO_ADDR
25269: LD_VAR 0 2
25273: PUSH
25274: FOR_TO
25275: IFFALSE 25367
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25277: LD_ADDR_VAR 0 4
25281: PUSH
25282: LD_VAR 0 2
25286: PUSH
25287: LD_VAR 0 3
25291: ARRAY
25292: PPUSH
25293: LD_INT 3
25295: PPUSH
25296: CALL_OW 259
25300: PUSH
25301: LD_VAR 0 2
25305: PUSH
25306: LD_VAR 0 3
25310: ARRAY
25311: PPUSH
25312: CALL_OW 432
25316: MINUS
25317: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25318: LD_VAR 0 4
25322: PUSH
25323: LD_VAR 0 5
25327: PPUSH
25328: LD_INT 3
25330: PPUSH
25331: CALL_OW 259
25335: PUSH
25336: LD_VAR 0 5
25340: PPUSH
25341: CALL_OW 432
25345: MINUS
25346: GREATEREQUAL
25347: IFFALSE 25365
// mech := result [ i ] ;
25349: LD_ADDR_VAR 0 5
25353: PUSH
25354: LD_VAR 0 2
25358: PUSH
25359: LD_VAR 0 3
25363: ARRAY
25364: ST_TO_ADDR
// end ;
25365: GO 25274
25367: POP
25368: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25369: LD_VAR 0 1
25373: PPUSH
25374: LD_VAR 0 5
25378: PPUSH
25379: CALL_OW 135
// end ;
25383: LD_VAR 0 2
25387: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25388: LD_INT 0
25390: PPUSH
25391: PPUSH
25392: PPUSH
25393: PPUSH
25394: PPUSH
25395: PPUSH
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
25401: PPUSH
25402: PPUSH
// result := [ ] ;
25403: LD_ADDR_VAR 0 7
25407: PUSH
25408: EMPTY
25409: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25410: LD_VAR 0 1
25414: PPUSH
25415: CALL_OW 266
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: IN
25430: NOT
25431: IFFALSE 25435
// exit ;
25433: GO 27069
// if name then
25435: LD_VAR 0 3
25439: IFFALSE 25455
// SetBName ( base_dep , name ) ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: CALL_OW 500
// base := GetBase ( base_dep ) ;
25455: LD_ADDR_VAR 0 15
25459: PUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: CALL_OW 274
25469: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25470: LD_ADDR_VAR 0 16
25474: PUSH
25475: LD_VAR 0 1
25479: PPUSH
25480: CALL_OW 255
25484: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25485: LD_ADDR_VAR 0 17
25489: PUSH
25490: LD_VAR 0 1
25494: PPUSH
25495: CALL_OW 248
25499: ST_TO_ADDR
// if sources then
25500: LD_VAR 0 5
25504: IFFALSE 25551
// for i = 1 to 3 do
25506: LD_ADDR_VAR 0 8
25510: PUSH
25511: DOUBLE
25512: LD_INT 1
25514: DEC
25515: ST_TO_ADDR
25516: LD_INT 3
25518: PUSH
25519: FOR_TO
25520: IFFALSE 25549
// AddResourceType ( base , i , sources [ i ] ) ;
25522: LD_VAR 0 15
25526: PPUSH
25527: LD_VAR 0 8
25531: PPUSH
25532: LD_VAR 0 5
25536: PUSH
25537: LD_VAR 0 8
25541: ARRAY
25542: PPUSH
25543: CALL_OW 276
25547: GO 25519
25549: POP
25550: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25551: LD_ADDR_VAR 0 18
25555: PUSH
25556: LD_VAR 0 15
25560: PPUSH
25561: LD_VAR 0 2
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: CALL 24812 0 3
25573: ST_TO_ADDR
// InitHc ;
25574: CALL_OW 19
// InitUc ;
25578: CALL_OW 18
// uc_side := side ;
25582: LD_ADDR_OWVAR 20
25586: PUSH
25587: LD_VAR 0 16
25591: ST_TO_ADDR
// uc_nation := nation ;
25592: LD_ADDR_OWVAR 21
25596: PUSH
25597: LD_VAR 0 17
25601: ST_TO_ADDR
// if buildings then
25602: LD_VAR 0 18
25606: IFFALSE 26928
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25608: LD_ADDR_VAR 0 19
25612: PUSH
25613: LD_VAR 0 18
25617: PPUSH
25618: LD_INT 2
25620: PUSH
25621: LD_INT 30
25623: PUSH
25624: LD_INT 29
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 30
25633: PUSH
25634: LD_INT 30
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: LIST
25645: PPUSH
25646: CALL_OW 72
25650: ST_TO_ADDR
// if tmp then
25651: LD_VAR 0 19
25655: IFFALSE 25703
// for i in tmp do
25657: LD_ADDR_VAR 0 8
25661: PUSH
25662: LD_VAR 0 19
25666: PUSH
25667: FOR_IN
25668: IFFALSE 25701
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25670: LD_VAR 0 8
25674: PPUSH
25675: CALL_OW 250
25679: PPUSH
25680: LD_VAR 0 8
25684: PPUSH
25685: CALL_OW 251
25689: PPUSH
25690: LD_VAR 0 16
25694: PPUSH
25695: CALL_OW 441
25699: GO 25667
25701: POP
25702: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25703: LD_VAR 0 18
25707: PPUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 30
25713: PUSH
25714: LD_INT 32
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 30
25723: PUSH
25724: LD_INT 33
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 72
25740: IFFALSE 25828
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25742: LD_ADDR_VAR 0 8
25746: PUSH
25747: LD_VAR 0 18
25751: PPUSH
25752: LD_INT 2
25754: PUSH
25755: LD_INT 30
25757: PUSH
25758: LD_INT 32
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 30
25767: PUSH
25768: LD_INT 33
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: LIST
25779: PPUSH
25780: CALL_OW 72
25784: PUSH
25785: FOR_IN
25786: IFFALSE 25826
// begin if not GetBWeapon ( i ) then
25788: LD_VAR 0 8
25792: PPUSH
25793: CALL_OW 269
25797: NOT
25798: IFFALSE 25824
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25800: LD_VAR 0 8
25804: PPUSH
25805: LD_VAR 0 8
25809: PPUSH
25810: LD_VAR 0 2
25814: PPUSH
25815: CALL 27074 0 2
25819: PPUSH
25820: CALL_OW 431
// end ;
25824: GO 25785
25826: POP
25827: POP
// end ; for i = 1 to personel do
25828: LD_ADDR_VAR 0 8
25832: PUSH
25833: DOUBLE
25834: LD_INT 1
25836: DEC
25837: ST_TO_ADDR
25838: LD_VAR 0 6
25842: PUSH
25843: FOR_TO
25844: IFFALSE 26908
// begin if i > 4 then
25846: LD_VAR 0 8
25850: PUSH
25851: LD_INT 4
25853: GREATER
25854: IFFALSE 25858
// break ;
25856: GO 26908
// case i of 1 :
25858: LD_VAR 0 8
25862: PUSH
25863: LD_INT 1
25865: DOUBLE
25866: EQUAL
25867: IFTRUE 25871
25869: GO 25951
25871: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25872: LD_ADDR_VAR 0 12
25876: PUSH
25877: LD_VAR 0 18
25881: PPUSH
25882: LD_INT 22
25884: PUSH
25885: LD_VAR 0 16
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 58
25896: PUSH
25897: EMPTY
25898: LIST
25899: PUSH
25900: LD_INT 2
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 32
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 30
25915: PUSH
25916: LD_INT 4
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 30
25925: PUSH
25926: LD_INT 5
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: LIST
25943: PPUSH
25944: CALL_OW 72
25948: ST_TO_ADDR
25949: GO 26173
25951: LD_INT 2
25953: DOUBLE
25954: EQUAL
25955: IFTRUE 25959
25957: GO 26021
25959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25960: LD_ADDR_VAR 0 12
25964: PUSH
25965: LD_VAR 0 18
25969: PPUSH
25970: LD_INT 22
25972: PUSH
25973: LD_VAR 0 16
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 30
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 30
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PPUSH
26014: CALL_OW 72
26018: ST_TO_ADDR
26019: GO 26173
26021: LD_INT 3
26023: DOUBLE
26024: EQUAL
26025: IFTRUE 26029
26027: GO 26091
26029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26030: LD_ADDR_VAR 0 12
26034: PUSH
26035: LD_VAR 0 18
26039: PPUSH
26040: LD_INT 22
26042: PUSH
26043: LD_VAR 0 16
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: LD_INT 30
26057: PUSH
26058: LD_INT 2
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 30
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 72
26088: ST_TO_ADDR
26089: GO 26173
26091: LD_INT 4
26093: DOUBLE
26094: EQUAL
26095: IFTRUE 26099
26097: GO 26172
26099: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26100: LD_ADDR_VAR 0 12
26104: PUSH
26105: LD_VAR 0 18
26109: PPUSH
26110: LD_INT 22
26112: PUSH
26113: LD_VAR 0 16
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: LD_INT 30
26127: PUSH
26128: LD_INT 6
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 30
26137: PUSH
26138: LD_INT 7
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 30
26147: PUSH
26148: LD_INT 8
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PPUSH
26165: CALL_OW 72
26169: ST_TO_ADDR
26170: GO 26173
26172: POP
// if i = 1 then
26173: LD_VAR 0 8
26177: PUSH
26178: LD_INT 1
26180: EQUAL
26181: IFFALSE 26292
// begin tmp := [ ] ;
26183: LD_ADDR_VAR 0 19
26187: PUSH
26188: EMPTY
26189: ST_TO_ADDR
// for j in f do
26190: LD_ADDR_VAR 0 9
26194: PUSH
26195: LD_VAR 0 12
26199: PUSH
26200: FOR_IN
26201: IFFALSE 26274
// if GetBType ( j ) = b_bunker then
26203: LD_VAR 0 9
26207: PPUSH
26208: CALL_OW 266
26212: PUSH
26213: LD_INT 32
26215: EQUAL
26216: IFFALSE 26243
// tmp := Insert ( tmp , 1 , j ) else
26218: LD_ADDR_VAR 0 19
26222: PUSH
26223: LD_VAR 0 19
26227: PPUSH
26228: LD_INT 1
26230: PPUSH
26231: LD_VAR 0 9
26235: PPUSH
26236: CALL_OW 2
26240: ST_TO_ADDR
26241: GO 26272
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26243: LD_ADDR_VAR 0 19
26247: PUSH
26248: LD_VAR 0 19
26252: PPUSH
26253: LD_VAR 0 19
26257: PUSH
26258: LD_INT 1
26260: PLUS
26261: PPUSH
26262: LD_VAR 0 9
26266: PPUSH
26267: CALL_OW 2
26271: ST_TO_ADDR
26272: GO 26200
26274: POP
26275: POP
// if tmp then
26276: LD_VAR 0 19
26280: IFFALSE 26292
// f := tmp ;
26282: LD_ADDR_VAR 0 12
26286: PUSH
26287: LD_VAR 0 19
26291: ST_TO_ADDR
// end ; x := personel [ i ] ;
26292: LD_ADDR_VAR 0 13
26296: PUSH
26297: LD_VAR 0 6
26301: PUSH
26302: LD_VAR 0 8
26306: ARRAY
26307: ST_TO_ADDR
// if x = - 1 then
26308: LD_VAR 0 13
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: EQUAL
26317: IFFALSE 26526
// begin for j in f do
26319: LD_ADDR_VAR 0 9
26323: PUSH
26324: LD_VAR 0 12
26328: PUSH
26329: FOR_IN
26330: IFFALSE 26522
// repeat InitHc ;
26332: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26336: LD_VAR 0 9
26340: PPUSH
26341: CALL_OW 266
26345: PUSH
26346: LD_INT 5
26348: EQUAL
26349: IFFALSE 26419
// begin if UnitsInside ( j ) < 3 then
26351: LD_VAR 0 9
26355: PPUSH
26356: CALL_OW 313
26360: PUSH
26361: LD_INT 3
26363: LESS
26364: IFFALSE 26400
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26366: LD_INT 0
26368: PPUSH
26369: LD_INT 5
26371: PUSH
26372: LD_INT 8
26374: PUSH
26375: LD_INT 9
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: PUSH
26383: LD_VAR 0 17
26387: ARRAY
26388: PPUSH
26389: LD_VAR 0 4
26393: PPUSH
26394: CALL_OW 380
26398: GO 26417
// PrepareHuman ( false , i , skill ) ;
26400: LD_INT 0
26402: PPUSH
26403: LD_VAR 0 8
26407: PPUSH
26408: LD_VAR 0 4
26412: PPUSH
26413: CALL_OW 380
// end else
26417: GO 26436
// PrepareHuman ( false , i , skill ) ;
26419: LD_INT 0
26421: PPUSH
26422: LD_VAR 0 8
26426: PPUSH
26427: LD_VAR 0 4
26431: PPUSH
26432: CALL_OW 380
// un := CreateHuman ;
26436: LD_ADDR_VAR 0 14
26440: PUSH
26441: CALL_OW 44
26445: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26446: LD_ADDR_VAR 0 7
26450: PUSH
26451: LD_VAR 0 7
26455: PPUSH
26456: LD_INT 1
26458: PPUSH
26459: LD_VAR 0 14
26463: PPUSH
26464: CALL_OW 2
26468: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26469: LD_VAR 0 14
26473: PPUSH
26474: LD_VAR 0 9
26478: PPUSH
26479: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26483: LD_VAR 0 9
26487: PPUSH
26488: CALL_OW 313
26492: PUSH
26493: LD_INT 6
26495: EQUAL
26496: PUSH
26497: LD_VAR 0 9
26501: PPUSH
26502: CALL_OW 266
26506: PUSH
26507: LD_INT 32
26509: PUSH
26510: LD_INT 31
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: IN
26517: OR
26518: IFFALSE 26332
26520: GO 26329
26522: POP
26523: POP
// end else
26524: GO 26906
// for j = 1 to x do
26526: LD_ADDR_VAR 0 9
26530: PUSH
26531: DOUBLE
26532: LD_INT 1
26534: DEC
26535: ST_TO_ADDR
26536: LD_VAR 0 13
26540: PUSH
26541: FOR_TO
26542: IFFALSE 26904
// begin InitHc ;
26544: CALL_OW 19
// if not f then
26548: LD_VAR 0 12
26552: NOT
26553: IFFALSE 26642
// begin PrepareHuman ( false , i , skill ) ;
26555: LD_INT 0
26557: PPUSH
26558: LD_VAR 0 8
26562: PPUSH
26563: LD_VAR 0 4
26567: PPUSH
26568: CALL_OW 380
// un := CreateHuman ;
26572: LD_ADDR_VAR 0 14
26576: PUSH
26577: CALL_OW 44
26581: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26582: LD_ADDR_VAR 0 7
26586: PUSH
26587: LD_VAR 0 7
26591: PPUSH
26592: LD_INT 1
26594: PPUSH
26595: LD_VAR 0 14
26599: PPUSH
26600: CALL_OW 2
26604: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26605: LD_VAR 0 14
26609: PPUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 250
26619: PPUSH
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL_OW 251
26629: PPUSH
26630: LD_INT 10
26632: PPUSH
26633: LD_INT 0
26635: PPUSH
26636: CALL_OW 50
// continue ;
26640: GO 26541
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26642: LD_VAR 0 12
26646: PUSH
26647: LD_INT 1
26649: ARRAY
26650: PPUSH
26651: CALL_OW 313
26655: PUSH
26656: LD_VAR 0 12
26660: PUSH
26661: LD_INT 1
26663: ARRAY
26664: PPUSH
26665: CALL_OW 266
26669: PUSH
26670: LD_INT 32
26672: PUSH
26673: LD_INT 31
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: IN
26680: AND
26681: PUSH
26682: LD_VAR 0 12
26686: PUSH
26687: LD_INT 1
26689: ARRAY
26690: PPUSH
26691: CALL_OW 313
26695: PUSH
26696: LD_INT 6
26698: EQUAL
26699: OR
26700: IFFALSE 26720
// f := Delete ( f , 1 ) ;
26702: LD_ADDR_VAR 0 12
26706: PUSH
26707: LD_VAR 0 12
26711: PPUSH
26712: LD_INT 1
26714: PPUSH
26715: CALL_OW 3
26719: ST_TO_ADDR
// if not f then
26720: LD_VAR 0 12
26724: NOT
26725: IFFALSE 26743
// begin x := x + 2 ;
26727: LD_ADDR_VAR 0 13
26731: PUSH
26732: LD_VAR 0 13
26736: PUSH
26737: LD_INT 2
26739: PLUS
26740: ST_TO_ADDR
// continue ;
26741: GO 26541
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26743: LD_VAR 0 12
26747: PUSH
26748: LD_INT 1
26750: ARRAY
26751: PPUSH
26752: CALL_OW 266
26756: PUSH
26757: LD_INT 5
26759: EQUAL
26760: IFFALSE 26834
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26762: LD_VAR 0 12
26766: PUSH
26767: LD_INT 1
26769: ARRAY
26770: PPUSH
26771: CALL_OW 313
26775: PUSH
26776: LD_INT 3
26778: LESS
26779: IFFALSE 26815
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26781: LD_INT 0
26783: PPUSH
26784: LD_INT 5
26786: PUSH
26787: LD_INT 8
26789: PUSH
26790: LD_INT 9
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: PUSH
26798: LD_VAR 0 17
26802: ARRAY
26803: PPUSH
26804: LD_VAR 0 4
26808: PPUSH
26809: CALL_OW 380
26813: GO 26832
// PrepareHuman ( false , i , skill ) ;
26815: LD_INT 0
26817: PPUSH
26818: LD_VAR 0 8
26822: PPUSH
26823: LD_VAR 0 4
26827: PPUSH
26828: CALL_OW 380
// end else
26832: GO 26851
// PrepareHuman ( false , i , skill ) ;
26834: LD_INT 0
26836: PPUSH
26837: LD_VAR 0 8
26841: PPUSH
26842: LD_VAR 0 4
26846: PPUSH
26847: CALL_OW 380
// un := CreateHuman ;
26851: LD_ADDR_VAR 0 14
26855: PUSH
26856: CALL_OW 44
26860: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26861: LD_ADDR_VAR 0 7
26865: PUSH
26866: LD_VAR 0 7
26870: PPUSH
26871: LD_INT 1
26873: PPUSH
26874: LD_VAR 0 14
26878: PPUSH
26879: CALL_OW 2
26883: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26884: LD_VAR 0 14
26888: PPUSH
26889: LD_VAR 0 12
26893: PUSH
26894: LD_INT 1
26896: ARRAY
26897: PPUSH
26898: CALL_OW 52
// end ;
26902: GO 26541
26904: POP
26905: POP
// end ;
26906: GO 25843
26908: POP
26909: POP
// result := result ^ buildings ;
26910: LD_ADDR_VAR 0 7
26914: PUSH
26915: LD_VAR 0 7
26919: PUSH
26920: LD_VAR 0 18
26924: ADD
26925: ST_TO_ADDR
// end else
26926: GO 27069
// begin for i = 1 to personel do
26928: LD_ADDR_VAR 0 8
26932: PUSH
26933: DOUBLE
26934: LD_INT 1
26936: DEC
26937: ST_TO_ADDR
26938: LD_VAR 0 6
26942: PUSH
26943: FOR_TO
26944: IFFALSE 27067
// begin if i > 4 then
26946: LD_VAR 0 8
26950: PUSH
26951: LD_INT 4
26953: GREATER
26954: IFFALSE 26958
// break ;
26956: GO 27067
// x := personel [ i ] ;
26958: LD_ADDR_VAR 0 13
26962: PUSH
26963: LD_VAR 0 6
26967: PUSH
26968: LD_VAR 0 8
26972: ARRAY
26973: ST_TO_ADDR
// if x = - 1 then
26974: LD_VAR 0 13
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: EQUAL
26983: IFFALSE 26987
// continue ;
26985: GO 26943
// PrepareHuman ( false , i , skill ) ;
26987: LD_INT 0
26989: PPUSH
26990: LD_VAR 0 8
26994: PPUSH
26995: LD_VAR 0 4
26999: PPUSH
27000: CALL_OW 380
// un := CreateHuman ;
27004: LD_ADDR_VAR 0 14
27008: PUSH
27009: CALL_OW 44
27013: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27014: LD_VAR 0 14
27018: PPUSH
27019: LD_VAR 0 1
27023: PPUSH
27024: CALL_OW 250
27028: PPUSH
27029: LD_VAR 0 1
27033: PPUSH
27034: CALL_OW 251
27038: PPUSH
27039: LD_INT 10
27041: PPUSH
27042: LD_INT 0
27044: PPUSH
27045: CALL_OW 50
// result := result ^ un ;
27049: LD_ADDR_VAR 0 7
27053: PUSH
27054: LD_VAR 0 7
27058: PUSH
27059: LD_VAR 0 14
27063: ADD
27064: ST_TO_ADDR
// end ;
27065: GO 26943
27067: POP
27068: POP
// end ; end ;
27069: LD_VAR 0 7
27073: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27074: LD_INT 0
27076: PPUSH
27077: PPUSH
27078: PPUSH
27079: PPUSH
27080: PPUSH
27081: PPUSH
27082: PPUSH
27083: PPUSH
27084: PPUSH
27085: PPUSH
27086: PPUSH
27087: PPUSH
27088: PPUSH
27089: PPUSH
27090: PPUSH
27091: PPUSH
// result := false ;
27092: LD_ADDR_VAR 0 3
27096: PUSH
27097: LD_INT 0
27099: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27100: LD_VAR 0 1
27104: NOT
27105: PUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 266
27115: PUSH
27116: LD_INT 32
27118: PUSH
27119: LD_INT 33
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: IN
27126: NOT
27127: OR
27128: IFFALSE 27132
// exit ;
27130: GO 28241
// nat := GetNation ( tower ) ;
27132: LD_ADDR_VAR 0 12
27136: PUSH
27137: LD_VAR 0 1
27141: PPUSH
27142: CALL_OW 248
27146: ST_TO_ADDR
// side := GetSide ( tower ) ;
27147: LD_ADDR_VAR 0 16
27151: PUSH
27152: LD_VAR 0 1
27156: PPUSH
27157: CALL_OW 255
27161: ST_TO_ADDR
// x := GetX ( tower ) ;
27162: LD_ADDR_VAR 0 10
27166: PUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: CALL_OW 250
27176: ST_TO_ADDR
// y := GetY ( tower ) ;
27177: LD_ADDR_VAR 0 11
27181: PUSH
27182: LD_VAR 0 1
27186: PPUSH
27187: CALL_OW 251
27191: ST_TO_ADDR
// if not x or not y then
27192: LD_VAR 0 10
27196: NOT
27197: PUSH
27198: LD_VAR 0 11
27202: NOT
27203: OR
27204: IFFALSE 27208
// exit ;
27206: GO 28241
// weapon := 0 ;
27208: LD_ADDR_VAR 0 18
27212: PUSH
27213: LD_INT 0
27215: ST_TO_ADDR
// fac_list := [ ] ;
27216: LD_ADDR_VAR 0 17
27220: PUSH
27221: EMPTY
27222: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27223: LD_ADDR_VAR 0 6
27227: PUSH
27228: LD_VAR 0 1
27232: PPUSH
27233: CALL_OW 274
27237: PPUSH
27238: LD_VAR 0 2
27242: PPUSH
27243: LD_INT 0
27245: PPUSH
27246: CALL 24812 0 3
27250: PPUSH
27251: LD_INT 30
27253: PUSH
27254: LD_INT 3
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PPUSH
27261: CALL_OW 72
27265: ST_TO_ADDR
// if not factories then
27266: LD_VAR 0 6
27270: NOT
27271: IFFALSE 27275
// exit ;
27273: GO 28241
// for i in factories do
27275: LD_ADDR_VAR 0 8
27279: PUSH
27280: LD_VAR 0 6
27284: PUSH
27285: FOR_IN
27286: IFFALSE 27311
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27288: LD_ADDR_VAR 0 17
27292: PUSH
27293: LD_VAR 0 17
27297: PUSH
27298: LD_VAR 0 8
27302: PPUSH
27303: CALL_OW 478
27307: UNION
27308: ST_TO_ADDR
27309: GO 27285
27311: POP
27312: POP
// if not fac_list then
27313: LD_VAR 0 17
27317: NOT
27318: IFFALSE 27322
// exit ;
27320: GO 28241
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27322: LD_ADDR_VAR 0 5
27326: PUSH
27327: LD_INT 4
27329: PUSH
27330: LD_INT 5
27332: PUSH
27333: LD_INT 9
27335: PUSH
27336: LD_INT 10
27338: PUSH
27339: LD_INT 6
27341: PUSH
27342: LD_INT 7
27344: PUSH
27345: LD_INT 11
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 27
27359: PUSH
27360: LD_INT 28
27362: PUSH
27363: LD_INT 26
27365: PUSH
27366: LD_INT 30
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 43
27377: PUSH
27378: LD_INT 44
27380: PUSH
27381: LD_INT 46
27383: PUSH
27384: LD_INT 45
27386: PUSH
27387: LD_INT 47
27389: PUSH
27390: LD_INT 49
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: PUSH
27406: LD_VAR 0 12
27410: ARRAY
27411: ST_TO_ADDR
// list := list isect fac_list ;
27412: LD_ADDR_VAR 0 5
27416: PUSH
27417: LD_VAR 0 5
27421: PUSH
27422: LD_VAR 0 17
27426: ISECT
27427: ST_TO_ADDR
// if not list then
27428: LD_VAR 0 5
27432: NOT
27433: IFFALSE 27437
// exit ;
27435: GO 28241
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27437: LD_VAR 0 12
27441: PUSH
27442: LD_INT 3
27444: EQUAL
27445: PUSH
27446: LD_INT 49
27448: PUSH
27449: LD_VAR 0 5
27453: IN
27454: AND
27455: PUSH
27456: LD_INT 31
27458: PPUSH
27459: LD_VAR 0 16
27463: PPUSH
27464: CALL_OW 321
27468: PUSH
27469: LD_INT 2
27471: EQUAL
27472: AND
27473: IFFALSE 27533
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27475: LD_INT 22
27477: PUSH
27478: LD_VAR 0 16
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 35
27489: PUSH
27490: LD_INT 49
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 91
27499: PUSH
27500: LD_VAR 0 1
27504: PUSH
27505: LD_INT 10
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: LIST
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: PPUSH
27518: CALL_OW 69
27522: NOT
27523: IFFALSE 27533
// weapon := ru_time_lapser ;
27525: LD_ADDR_VAR 0 18
27529: PUSH
27530: LD_INT 49
27532: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27533: LD_VAR 0 12
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: LD_INT 2
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: IN
27548: PUSH
27549: LD_INT 11
27551: PUSH
27552: LD_VAR 0 5
27556: IN
27557: PUSH
27558: LD_INT 30
27560: PUSH
27561: LD_VAR 0 5
27565: IN
27566: OR
27567: AND
27568: PUSH
27569: LD_INT 6
27571: PPUSH
27572: LD_VAR 0 16
27576: PPUSH
27577: CALL_OW 321
27581: PUSH
27582: LD_INT 2
27584: EQUAL
27585: AND
27586: IFFALSE 27751
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27588: LD_INT 22
27590: PUSH
27591: LD_VAR 0 16
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 35
27605: PUSH
27606: LD_INT 11
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 35
27615: PUSH
27616: LD_INT 30
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 91
27630: PUSH
27631: LD_VAR 0 1
27635: PUSH
27636: LD_INT 18
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: PPUSH
27649: CALL_OW 69
27653: NOT
27654: PUSH
27655: LD_INT 22
27657: PUSH
27658: LD_VAR 0 16
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: PUSH
27670: LD_INT 30
27672: PUSH
27673: LD_INT 32
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 30
27682: PUSH
27683: LD_INT 33
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 91
27697: PUSH
27698: LD_VAR 0 1
27702: PUSH
27703: LD_INT 12
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: PPUSH
27719: CALL_OW 69
27723: PUSH
27724: LD_INT 2
27726: GREATER
27727: AND
27728: IFFALSE 27751
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27730: LD_ADDR_VAR 0 18
27734: PUSH
27735: LD_INT 11
27737: PUSH
27738: LD_INT 30
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_VAR 0 12
27749: ARRAY
27750: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27751: LD_VAR 0 18
27755: NOT
27756: PUSH
27757: LD_INT 40
27759: PPUSH
27760: LD_VAR 0 16
27764: PPUSH
27765: CALL_OW 321
27769: PUSH
27770: LD_INT 2
27772: EQUAL
27773: AND
27774: PUSH
27775: LD_INT 7
27777: PUSH
27778: LD_VAR 0 5
27782: IN
27783: PUSH
27784: LD_INT 28
27786: PUSH
27787: LD_VAR 0 5
27791: IN
27792: OR
27793: PUSH
27794: LD_INT 45
27796: PUSH
27797: LD_VAR 0 5
27801: IN
27802: OR
27803: AND
27804: IFFALSE 28058
// begin hex := GetHexInfo ( x , y ) ;
27806: LD_ADDR_VAR 0 4
27810: PUSH
27811: LD_VAR 0 10
27815: PPUSH
27816: LD_VAR 0 11
27820: PPUSH
27821: CALL_OW 546
27825: ST_TO_ADDR
// if hex [ 1 ] then
27826: LD_VAR 0 4
27830: PUSH
27831: LD_INT 1
27833: ARRAY
27834: IFFALSE 27838
// exit ;
27836: GO 28241
// height := hex [ 2 ] ;
27838: LD_ADDR_VAR 0 15
27842: PUSH
27843: LD_VAR 0 4
27847: PUSH
27848: LD_INT 2
27850: ARRAY
27851: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27852: LD_ADDR_VAR 0 14
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: LD_INT 3
27865: PUSH
27866: LD_INT 5
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: ST_TO_ADDR
// for i in tmp do
27875: LD_ADDR_VAR 0 8
27879: PUSH
27880: LD_VAR 0 14
27884: PUSH
27885: FOR_IN
27886: IFFALSE 28056
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27888: LD_ADDR_VAR 0 9
27892: PUSH
27893: LD_VAR 0 10
27897: PPUSH
27898: LD_VAR 0 8
27902: PPUSH
27903: LD_INT 5
27905: PPUSH
27906: CALL_OW 272
27910: PUSH
27911: LD_VAR 0 11
27915: PPUSH
27916: LD_VAR 0 8
27920: PPUSH
27921: LD_INT 5
27923: PPUSH
27924: CALL_OW 273
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27933: LD_VAR 0 9
27937: PUSH
27938: LD_INT 1
27940: ARRAY
27941: PPUSH
27942: LD_VAR 0 9
27946: PUSH
27947: LD_INT 2
27949: ARRAY
27950: PPUSH
27951: CALL_OW 488
27955: IFFALSE 28054
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27957: LD_ADDR_VAR 0 4
27961: PUSH
27962: LD_VAR 0 9
27966: PUSH
27967: LD_INT 1
27969: ARRAY
27970: PPUSH
27971: LD_VAR 0 9
27975: PUSH
27976: LD_INT 2
27978: ARRAY
27979: PPUSH
27980: CALL_OW 546
27984: ST_TO_ADDR
// if hex [ 1 ] then
27985: LD_VAR 0 4
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: IFFALSE 27997
// continue ;
27995: GO 27885
// h := hex [ 2 ] ;
27997: LD_ADDR_VAR 0 13
28001: PUSH
28002: LD_VAR 0 4
28006: PUSH
28007: LD_INT 2
28009: ARRAY
28010: ST_TO_ADDR
// if h + 7 < height then
28011: LD_VAR 0 13
28015: PUSH
28016: LD_INT 7
28018: PLUS
28019: PUSH
28020: LD_VAR 0 15
28024: LESS
28025: IFFALSE 28054
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28027: LD_ADDR_VAR 0 18
28031: PUSH
28032: LD_INT 7
28034: PUSH
28035: LD_INT 28
28037: PUSH
28038: LD_INT 45
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: PUSH
28046: LD_VAR 0 12
28050: ARRAY
28051: ST_TO_ADDR
// break ;
28052: GO 28056
// end ; end ; end ;
28054: GO 27885
28056: POP
28057: POP
// end ; if not weapon then
28058: LD_VAR 0 18
28062: NOT
28063: IFFALSE 28123
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28065: LD_ADDR_VAR 0 5
28069: PUSH
28070: LD_VAR 0 5
28074: PUSH
28075: LD_INT 11
28077: PUSH
28078: LD_INT 30
28080: PUSH
28081: LD_INT 49
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: DIFF
28089: ST_TO_ADDR
// if not list then
28090: LD_VAR 0 5
28094: NOT
28095: IFFALSE 28099
// exit ;
28097: GO 28241
// weapon := list [ rand ( 1 , list ) ] ;
28099: LD_ADDR_VAR 0 18
28103: PUSH
28104: LD_VAR 0 5
28108: PUSH
28109: LD_INT 1
28111: PPUSH
28112: LD_VAR 0 5
28116: PPUSH
28117: CALL_OW 12
28121: ARRAY
28122: ST_TO_ADDR
// end ; if weapon then
28123: LD_VAR 0 18
28127: IFFALSE 28241
// begin tmp := CostOfWeapon ( weapon ) ;
28129: LD_ADDR_VAR 0 14
28133: PUSH
28134: LD_VAR 0 18
28138: PPUSH
28139: CALL_OW 451
28143: ST_TO_ADDR
// j := GetBase ( tower ) ;
28144: LD_ADDR_VAR 0 9
28148: PUSH
28149: LD_VAR 0 1
28153: PPUSH
28154: CALL_OW 274
28158: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28159: LD_VAR 0 9
28163: PPUSH
28164: LD_INT 1
28166: PPUSH
28167: CALL_OW 275
28171: PUSH
28172: LD_VAR 0 14
28176: PUSH
28177: LD_INT 1
28179: ARRAY
28180: GREATEREQUAL
28181: PUSH
28182: LD_VAR 0 9
28186: PPUSH
28187: LD_INT 2
28189: PPUSH
28190: CALL_OW 275
28194: PUSH
28195: LD_VAR 0 14
28199: PUSH
28200: LD_INT 2
28202: ARRAY
28203: GREATEREQUAL
28204: AND
28205: PUSH
28206: LD_VAR 0 9
28210: PPUSH
28211: LD_INT 3
28213: PPUSH
28214: CALL_OW 275
28218: PUSH
28219: LD_VAR 0 14
28223: PUSH
28224: LD_INT 3
28226: ARRAY
28227: GREATEREQUAL
28228: AND
28229: IFFALSE 28241
// result := weapon ;
28231: LD_ADDR_VAR 0 3
28235: PUSH
28236: LD_VAR 0 18
28240: ST_TO_ADDR
// end ; end ;
28241: LD_VAR 0 3
28245: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
// result := true ;
28250: LD_ADDR_VAR 0 3
28254: PUSH
28255: LD_INT 1
28257: ST_TO_ADDR
// if array1 = array2 then
28258: LD_VAR 0 1
28262: PUSH
28263: LD_VAR 0 2
28267: EQUAL
28268: IFFALSE 28328
// begin for i = 1 to array1 do
28270: LD_ADDR_VAR 0 4
28274: PUSH
28275: DOUBLE
28276: LD_INT 1
28278: DEC
28279: ST_TO_ADDR
28280: LD_VAR 0 1
28284: PUSH
28285: FOR_TO
28286: IFFALSE 28324
// if array1 [ i ] <> array2 [ i ] then
28288: LD_VAR 0 1
28292: PUSH
28293: LD_VAR 0 4
28297: ARRAY
28298: PUSH
28299: LD_VAR 0 2
28303: PUSH
28304: LD_VAR 0 4
28308: ARRAY
28309: NONEQUAL
28310: IFFALSE 28322
// begin result := false ;
28312: LD_ADDR_VAR 0 3
28316: PUSH
28317: LD_INT 0
28319: ST_TO_ADDR
// break ;
28320: GO 28324
// end ;
28322: GO 28285
28324: POP
28325: POP
// end else
28326: GO 28336
// result := false ;
28328: LD_ADDR_VAR 0 3
28332: PUSH
28333: LD_INT 0
28335: ST_TO_ADDR
// end ;
28336: LD_VAR 0 3
28340: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28341: LD_INT 0
28343: PPUSH
28344: PPUSH
// if not array1 or not array2 then
28345: LD_VAR 0 1
28349: NOT
28350: PUSH
28351: LD_VAR 0 2
28355: NOT
28356: OR
28357: IFFALSE 28361
// exit ;
28359: GO 28425
// result := true ;
28361: LD_ADDR_VAR 0 3
28365: PUSH
28366: LD_INT 1
28368: ST_TO_ADDR
// for i = 1 to array1 do
28369: LD_ADDR_VAR 0 4
28373: PUSH
28374: DOUBLE
28375: LD_INT 1
28377: DEC
28378: ST_TO_ADDR
28379: LD_VAR 0 1
28383: PUSH
28384: FOR_TO
28385: IFFALSE 28423
// if array1 [ i ] <> array2 [ i ] then
28387: LD_VAR 0 1
28391: PUSH
28392: LD_VAR 0 4
28396: ARRAY
28397: PUSH
28398: LD_VAR 0 2
28402: PUSH
28403: LD_VAR 0 4
28407: ARRAY
28408: NONEQUAL
28409: IFFALSE 28421
// begin result := false ;
28411: LD_ADDR_VAR 0 3
28415: PUSH
28416: LD_INT 0
28418: ST_TO_ADDR
// break ;
28419: GO 28423
// end ;
28421: GO 28384
28423: POP
28424: POP
// end ;
28425: LD_VAR 0 3
28429: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28430: LD_INT 0
28432: PPUSH
28433: PPUSH
28434: PPUSH
// pom := GetBase ( fac ) ;
28435: LD_ADDR_VAR 0 5
28439: PUSH
28440: LD_VAR 0 1
28444: PPUSH
28445: CALL_OW 274
28449: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28450: LD_ADDR_VAR 0 4
28454: PUSH
28455: LD_VAR 0 2
28459: PUSH
28460: LD_INT 1
28462: ARRAY
28463: PPUSH
28464: LD_VAR 0 2
28468: PUSH
28469: LD_INT 2
28471: ARRAY
28472: PPUSH
28473: LD_VAR 0 2
28477: PUSH
28478: LD_INT 3
28480: ARRAY
28481: PPUSH
28482: LD_VAR 0 2
28486: PUSH
28487: LD_INT 4
28489: ARRAY
28490: PPUSH
28491: CALL_OW 449
28495: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28496: LD_ADDR_VAR 0 3
28500: PUSH
28501: LD_VAR 0 5
28505: PPUSH
28506: LD_INT 1
28508: PPUSH
28509: CALL_OW 275
28513: PUSH
28514: LD_VAR 0 4
28518: PUSH
28519: LD_INT 1
28521: ARRAY
28522: GREATEREQUAL
28523: PUSH
28524: LD_VAR 0 5
28528: PPUSH
28529: LD_INT 2
28531: PPUSH
28532: CALL_OW 275
28536: PUSH
28537: LD_VAR 0 4
28541: PUSH
28542: LD_INT 2
28544: ARRAY
28545: GREATEREQUAL
28546: AND
28547: PUSH
28548: LD_VAR 0 5
28552: PPUSH
28553: LD_INT 3
28555: PPUSH
28556: CALL_OW 275
28560: PUSH
28561: LD_VAR 0 4
28565: PUSH
28566: LD_INT 3
28568: ARRAY
28569: GREATEREQUAL
28570: AND
28571: ST_TO_ADDR
// end ;
28572: LD_VAR 0 3
28576: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28577: LD_INT 0
28579: PPUSH
28580: PPUSH
28581: PPUSH
28582: PPUSH
// pom := GetBase ( building ) ;
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL_OW 274
28597: ST_TO_ADDR
// if not pom then
28598: LD_VAR 0 3
28602: NOT
28603: IFFALSE 28607
// exit ;
28605: GO 28777
// btype := GetBType ( building ) ;
28607: LD_ADDR_VAR 0 5
28611: PUSH
28612: LD_VAR 0 1
28616: PPUSH
28617: CALL_OW 266
28621: ST_TO_ADDR
// if btype = b_armoury then
28622: LD_VAR 0 5
28626: PUSH
28627: LD_INT 4
28629: EQUAL
28630: IFFALSE 28640
// btype := b_barracks ;
28632: LD_ADDR_VAR 0 5
28636: PUSH
28637: LD_INT 5
28639: ST_TO_ADDR
// if btype = b_depot then
28640: LD_VAR 0 5
28644: PUSH
28645: LD_INT 0
28647: EQUAL
28648: IFFALSE 28658
// btype := b_warehouse ;
28650: LD_ADDR_VAR 0 5
28654: PUSH
28655: LD_INT 1
28657: ST_TO_ADDR
// if btype = b_workshop then
28658: LD_VAR 0 5
28662: PUSH
28663: LD_INT 2
28665: EQUAL
28666: IFFALSE 28676
// btype := b_factory ;
28668: LD_ADDR_VAR 0 5
28672: PUSH
28673: LD_INT 3
28675: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28676: LD_ADDR_VAR 0 4
28680: PUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_VAR 0 1
28690: PPUSH
28691: CALL_OW 248
28695: PPUSH
28696: CALL_OW 450
28700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28701: LD_ADDR_VAR 0 2
28705: PUSH
28706: LD_VAR 0 3
28710: PPUSH
28711: LD_INT 1
28713: PPUSH
28714: CALL_OW 275
28718: PUSH
28719: LD_VAR 0 4
28723: PUSH
28724: LD_INT 1
28726: ARRAY
28727: GREATEREQUAL
28728: PUSH
28729: LD_VAR 0 3
28733: PPUSH
28734: LD_INT 2
28736: PPUSH
28737: CALL_OW 275
28741: PUSH
28742: LD_VAR 0 4
28746: PUSH
28747: LD_INT 2
28749: ARRAY
28750: GREATEREQUAL
28751: AND
28752: PUSH
28753: LD_VAR 0 3
28757: PPUSH
28758: LD_INT 3
28760: PPUSH
28761: CALL_OW 275
28765: PUSH
28766: LD_VAR 0 4
28770: PUSH
28771: LD_INT 3
28773: ARRAY
28774: GREATEREQUAL
28775: AND
28776: ST_TO_ADDR
// end ;
28777: LD_VAR 0 2
28781: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28782: LD_INT 0
28784: PPUSH
28785: PPUSH
28786: PPUSH
// pom := GetBase ( building ) ;
28787: LD_ADDR_VAR 0 4
28791: PUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 274
28801: ST_TO_ADDR
// if not pom then
28802: LD_VAR 0 4
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28912
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28811: LD_ADDR_VAR 0 5
28815: PUSH
28816: LD_VAR 0 2
28820: PPUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 248
28830: PPUSH
28831: CALL_OW 450
28835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28836: LD_ADDR_VAR 0 3
28840: PUSH
28841: LD_VAR 0 4
28845: PPUSH
28846: LD_INT 1
28848: PPUSH
28849: CALL_OW 275
28853: PUSH
28854: LD_VAR 0 5
28858: PUSH
28859: LD_INT 1
28861: ARRAY
28862: GREATEREQUAL
28863: PUSH
28864: LD_VAR 0 4
28868: PPUSH
28869: LD_INT 2
28871: PPUSH
28872: CALL_OW 275
28876: PUSH
28877: LD_VAR 0 5
28881: PUSH
28882: LD_INT 2
28884: ARRAY
28885: GREATEREQUAL
28886: AND
28887: PUSH
28888: LD_VAR 0 4
28892: PPUSH
28893: LD_INT 3
28895: PPUSH
28896: CALL_OW 275
28900: PUSH
28901: LD_VAR 0 5
28905: PUSH
28906: LD_INT 3
28908: ARRAY
28909: GREATEREQUAL
28910: AND
28911: ST_TO_ADDR
// end ;
28912: LD_VAR 0 3
28916: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28917: LD_INT 0
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// result := false ;
28930: LD_ADDR_VAR 0 8
28934: PUSH
28935: LD_INT 0
28937: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28938: LD_VAR 0 5
28942: NOT
28943: PUSH
28944: LD_VAR 0 1
28948: NOT
28949: OR
28950: PUSH
28951: LD_VAR 0 2
28955: NOT
28956: OR
28957: PUSH
28958: LD_VAR 0 3
28962: NOT
28963: OR
28964: IFFALSE 28968
// exit ;
28966: GO 29782
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28968: LD_ADDR_VAR 0 14
28972: PUSH
28973: LD_VAR 0 1
28977: PPUSH
28978: LD_VAR 0 2
28982: PPUSH
28983: LD_VAR 0 3
28987: PPUSH
28988: LD_VAR 0 4
28992: PPUSH
28993: LD_VAR 0 5
28997: PUSH
28998: LD_INT 1
29000: ARRAY
29001: PPUSH
29002: CALL_OW 248
29006: PPUSH
29007: LD_INT 0
29009: PPUSH
29010: CALL 31035 0 6
29014: ST_TO_ADDR
// if not hexes then
29015: LD_VAR 0 14
29019: NOT
29020: IFFALSE 29024
// exit ;
29022: GO 29782
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29024: LD_ADDR_VAR 0 17
29028: PUSH
29029: LD_VAR 0 5
29033: PPUSH
29034: LD_INT 22
29036: PUSH
29037: LD_VAR 0 13
29041: PPUSH
29042: CALL_OW 255
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 2
29053: PUSH
29054: LD_INT 30
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 30
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PPUSH
29083: CALL_OW 72
29087: ST_TO_ADDR
// for i = 1 to hexes do
29088: LD_ADDR_VAR 0 9
29092: PUSH
29093: DOUBLE
29094: LD_INT 1
29096: DEC
29097: ST_TO_ADDR
29098: LD_VAR 0 14
29102: PUSH
29103: FOR_TO
29104: IFFALSE 29780
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29106: LD_ADDR_VAR 0 13
29110: PUSH
29111: LD_VAR 0 14
29115: PUSH
29116: LD_VAR 0 9
29120: ARRAY
29121: PUSH
29122: LD_INT 1
29124: ARRAY
29125: PPUSH
29126: LD_VAR 0 14
29130: PUSH
29131: LD_VAR 0 9
29135: ARRAY
29136: PUSH
29137: LD_INT 2
29139: ARRAY
29140: PPUSH
29141: CALL_OW 428
29145: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29146: LD_VAR 0 14
29150: PUSH
29151: LD_VAR 0 9
29155: ARRAY
29156: PUSH
29157: LD_INT 1
29159: ARRAY
29160: PPUSH
29161: LD_VAR 0 14
29165: PUSH
29166: LD_VAR 0 9
29170: ARRAY
29171: PUSH
29172: LD_INT 2
29174: ARRAY
29175: PPUSH
29176: CALL_OW 351
29180: PUSH
29181: LD_VAR 0 14
29185: PUSH
29186: LD_VAR 0 9
29190: ARRAY
29191: PUSH
29192: LD_INT 1
29194: ARRAY
29195: PPUSH
29196: LD_VAR 0 14
29200: PUSH
29201: LD_VAR 0 9
29205: ARRAY
29206: PUSH
29207: LD_INT 2
29209: ARRAY
29210: PPUSH
29211: CALL_OW 488
29215: NOT
29216: OR
29217: PUSH
29218: LD_VAR 0 13
29222: PPUSH
29223: CALL_OW 247
29227: PUSH
29228: LD_INT 3
29230: EQUAL
29231: OR
29232: IFFALSE 29238
// exit ;
29234: POP
29235: POP
29236: GO 29782
// if not tmp then
29238: LD_VAR 0 13
29242: NOT
29243: IFFALSE 29247
// continue ;
29245: GO 29103
// result := true ;
29247: LD_ADDR_VAR 0 8
29251: PUSH
29252: LD_INT 1
29254: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29255: LD_VAR 0 6
29259: PUSH
29260: LD_VAR 0 13
29264: PPUSH
29265: CALL_OW 247
29269: PUSH
29270: LD_INT 2
29272: EQUAL
29273: AND
29274: PUSH
29275: LD_VAR 0 13
29279: PPUSH
29280: CALL_OW 263
29284: PUSH
29285: LD_INT 1
29287: EQUAL
29288: AND
29289: IFFALSE 29453
// begin if IsDrivenBy ( tmp ) then
29291: LD_VAR 0 13
29295: PPUSH
29296: CALL_OW 311
29300: IFFALSE 29304
// continue ;
29302: GO 29103
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29304: LD_VAR 0 6
29308: PPUSH
29309: LD_INT 3
29311: PUSH
29312: LD_INT 60
29314: PUSH
29315: EMPTY
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 3
29324: PUSH
29325: LD_INT 55
29327: PUSH
29328: EMPTY
29329: LIST
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PPUSH
29339: CALL_OW 72
29343: IFFALSE 29451
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29345: LD_ADDR_VAR 0 18
29349: PUSH
29350: LD_VAR 0 6
29354: PPUSH
29355: LD_INT 3
29357: PUSH
29358: LD_INT 60
29360: PUSH
29361: EMPTY
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: LD_INT 55
29373: PUSH
29374: EMPTY
29375: LIST
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PPUSH
29385: CALL_OW 72
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: ST_TO_ADDR
// if IsInUnit ( driver ) then
29394: LD_VAR 0 18
29398: PPUSH
29399: CALL_OW 310
29403: IFFALSE 29414
// ComExit ( driver ) ;
29405: LD_VAR 0 18
29409: PPUSH
29410: CALL 54836 0 1
// AddComEnterUnit ( driver , tmp ) ;
29414: LD_VAR 0 18
29418: PPUSH
29419: LD_VAR 0 13
29423: PPUSH
29424: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29428: LD_VAR 0 18
29432: PPUSH
29433: LD_VAR 0 7
29437: PPUSH
29438: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29442: LD_VAR 0 18
29446: PPUSH
29447: CALL_OW 181
// end ; continue ;
29451: GO 29103
// end ; if not cleaners or not tmp in cleaners then
29453: LD_VAR 0 6
29457: NOT
29458: PUSH
29459: LD_VAR 0 13
29463: PUSH
29464: LD_VAR 0 6
29468: IN
29469: NOT
29470: OR
29471: IFFALSE 29778
// begin if dep then
29473: LD_VAR 0 17
29477: IFFALSE 29613
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29479: LD_ADDR_VAR 0 16
29483: PUSH
29484: LD_VAR 0 17
29488: PUSH
29489: LD_INT 1
29491: ARRAY
29492: PPUSH
29493: CALL_OW 250
29497: PPUSH
29498: LD_VAR 0 17
29502: PUSH
29503: LD_INT 1
29505: ARRAY
29506: PPUSH
29507: CALL_OW 254
29511: PPUSH
29512: LD_INT 5
29514: PPUSH
29515: CALL_OW 272
29519: PUSH
29520: LD_VAR 0 17
29524: PUSH
29525: LD_INT 1
29527: ARRAY
29528: PPUSH
29529: CALL_OW 251
29533: PPUSH
29534: LD_VAR 0 17
29538: PUSH
29539: LD_INT 1
29541: ARRAY
29542: PPUSH
29543: CALL_OW 254
29547: PPUSH
29548: LD_INT 5
29550: PPUSH
29551: CALL_OW 273
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29560: LD_VAR 0 16
29564: PUSH
29565: LD_INT 1
29567: ARRAY
29568: PPUSH
29569: LD_VAR 0 16
29573: PUSH
29574: LD_INT 2
29576: ARRAY
29577: PPUSH
29578: CALL_OW 488
29582: IFFALSE 29613
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29584: LD_VAR 0 13
29588: PPUSH
29589: LD_VAR 0 16
29593: PUSH
29594: LD_INT 1
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 16
29602: PUSH
29603: LD_INT 2
29605: ARRAY
29606: PPUSH
29607: CALL_OW 111
// continue ;
29611: GO 29103
// end ; end ; r := GetDir ( tmp ) ;
29613: LD_ADDR_VAR 0 15
29617: PUSH
29618: LD_VAR 0 13
29622: PPUSH
29623: CALL_OW 254
29627: ST_TO_ADDR
// if r = 5 then
29628: LD_VAR 0 15
29632: PUSH
29633: LD_INT 5
29635: EQUAL
29636: IFFALSE 29646
// r := 0 ;
29638: LD_ADDR_VAR 0 15
29642: PUSH
29643: LD_INT 0
29645: ST_TO_ADDR
// for j = r to 5 do
29646: LD_ADDR_VAR 0 10
29650: PUSH
29651: DOUBLE
29652: LD_VAR 0 15
29656: DEC
29657: ST_TO_ADDR
29658: LD_INT 5
29660: PUSH
29661: FOR_TO
29662: IFFALSE 29776
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29664: LD_ADDR_VAR 0 11
29668: PUSH
29669: LD_VAR 0 13
29673: PPUSH
29674: CALL_OW 250
29678: PPUSH
29679: LD_VAR 0 10
29683: PPUSH
29684: LD_INT 2
29686: PPUSH
29687: CALL_OW 272
29691: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29692: LD_ADDR_VAR 0 12
29696: PUSH
29697: LD_VAR 0 13
29701: PPUSH
29702: CALL_OW 251
29706: PPUSH
29707: LD_VAR 0 10
29711: PPUSH
29712: LD_INT 2
29714: PPUSH
29715: CALL_OW 273
29719: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29720: LD_VAR 0 11
29724: PPUSH
29725: LD_VAR 0 12
29729: PPUSH
29730: CALL_OW 488
29734: PUSH
29735: LD_VAR 0 11
29739: PPUSH
29740: LD_VAR 0 12
29744: PPUSH
29745: CALL_OW 428
29749: NOT
29750: AND
29751: IFFALSE 29774
// begin ComMoveXY ( tmp , _x , _y ) ;
29753: LD_VAR 0 13
29757: PPUSH
29758: LD_VAR 0 11
29762: PPUSH
29763: LD_VAR 0 12
29767: PPUSH
29768: CALL_OW 111
// break ;
29772: GO 29776
// end ; end ;
29774: GO 29661
29776: POP
29777: POP
// end ; end ;
29778: GO 29103
29780: POP
29781: POP
// end ;
29782: LD_VAR 0 8
29786: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29787: LD_INT 0
29789: PPUSH
// result := true ;
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_INT 1
29797: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29798: LD_VAR 0 2
29802: PUSH
29803: LD_INT 24
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29817
29809: LD_INT 33
29811: DOUBLE
29812: EQUAL
29813: IFTRUE 29817
29815: GO 29842
29817: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29818: LD_ADDR_VAR 0 3
29822: PUSH
29823: LD_INT 32
29825: PPUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: CALL_OW 321
29835: PUSH
29836: LD_INT 2
29838: EQUAL
29839: ST_TO_ADDR
29840: GO 30158
29842: LD_INT 20
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29875
29850: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29851: LD_ADDR_VAR 0 3
29855: PUSH
29856: LD_INT 6
29858: PPUSH
29859: LD_VAR 0 1
29863: PPUSH
29864: CALL_OW 321
29868: PUSH
29869: LD_INT 2
29871: EQUAL
29872: ST_TO_ADDR
29873: GO 30158
29875: LD_INT 22
29877: DOUBLE
29878: EQUAL
29879: IFTRUE 29889
29881: LD_INT 36
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 29914
29889: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29890: LD_ADDR_VAR 0 3
29894: PUSH
29895: LD_INT 15
29897: PPUSH
29898: LD_VAR 0 1
29902: PPUSH
29903: CALL_OW 321
29907: PUSH
29908: LD_INT 2
29910: EQUAL
29911: ST_TO_ADDR
29912: GO 30158
29914: LD_INT 30
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 29947
29922: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29923: LD_ADDR_VAR 0 3
29927: PUSH
29928: LD_INT 20
29930: PPUSH
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 321
29940: PUSH
29941: LD_INT 2
29943: EQUAL
29944: ST_TO_ADDR
29945: GO 30158
29947: LD_INT 28
29949: DOUBLE
29950: EQUAL
29951: IFTRUE 29961
29953: LD_INT 21
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29986
29961: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29962: LD_ADDR_VAR 0 3
29966: PUSH
29967: LD_INT 21
29969: PPUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: CALL_OW 321
29979: PUSH
29980: LD_INT 2
29982: EQUAL
29983: ST_TO_ADDR
29984: GO 30158
29986: LD_INT 16
29988: DOUBLE
29989: EQUAL
29990: IFTRUE 29994
29992: GO 30019
29994: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_INT 84
30002: PPUSH
30003: LD_VAR 0 1
30007: PPUSH
30008: CALL_OW 321
30012: PUSH
30013: LD_INT 2
30015: EQUAL
30016: ST_TO_ADDR
30017: GO 30158
30019: LD_INT 19
30021: DOUBLE
30022: EQUAL
30023: IFTRUE 30033
30025: LD_INT 23
30027: DOUBLE
30028: EQUAL
30029: IFTRUE 30033
30031: GO 30058
30033: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30034: LD_ADDR_VAR 0 3
30038: PUSH
30039: LD_INT 83
30041: PPUSH
30042: LD_VAR 0 1
30046: PPUSH
30047: CALL_OW 321
30051: PUSH
30052: LD_INT 2
30054: EQUAL
30055: ST_TO_ADDR
30056: GO 30158
30058: LD_INT 17
30060: DOUBLE
30061: EQUAL
30062: IFTRUE 30066
30064: GO 30091
30066: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30067: LD_ADDR_VAR 0 3
30071: PUSH
30072: LD_INT 39
30074: PPUSH
30075: LD_VAR 0 1
30079: PPUSH
30080: CALL_OW 321
30084: PUSH
30085: LD_INT 2
30087: EQUAL
30088: ST_TO_ADDR
30089: GO 30158
30091: LD_INT 18
30093: DOUBLE
30094: EQUAL
30095: IFTRUE 30099
30097: GO 30124
30099: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30100: LD_ADDR_VAR 0 3
30104: PUSH
30105: LD_INT 40
30107: PPUSH
30108: LD_VAR 0 1
30112: PPUSH
30113: CALL_OW 321
30117: PUSH
30118: LD_INT 2
30120: EQUAL
30121: ST_TO_ADDR
30122: GO 30158
30124: LD_INT 27
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30157
30132: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30133: LD_ADDR_VAR 0 3
30137: PUSH
30138: LD_INT 35
30140: PPUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 321
30150: PUSH
30151: LD_INT 2
30153: EQUAL
30154: ST_TO_ADDR
30155: GO 30158
30157: POP
// end ;
30158: LD_VAR 0 3
30162: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30163: LD_INT 0
30165: PPUSH
30166: PPUSH
30167: PPUSH
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
// result := false ;
30176: LD_ADDR_VAR 0 6
30180: PUSH
30181: LD_INT 0
30183: ST_TO_ADDR
// if btype = b_depot then
30184: LD_VAR 0 2
30188: PUSH
30189: LD_INT 0
30191: EQUAL
30192: IFFALSE 30204
// begin result := true ;
30194: LD_ADDR_VAR 0 6
30198: PUSH
30199: LD_INT 1
30201: ST_TO_ADDR
// exit ;
30202: GO 31030
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30204: LD_VAR 0 1
30208: NOT
30209: PUSH
30210: LD_VAR 0 1
30214: PPUSH
30215: CALL_OW 266
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: IN
30230: NOT
30231: OR
30232: PUSH
30233: LD_VAR 0 2
30237: NOT
30238: OR
30239: PUSH
30240: LD_VAR 0 5
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: LD_INT 3
30256: PUSH
30257: LD_INT 4
30259: PUSH
30260: LD_INT 5
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: IN
30271: NOT
30272: OR
30273: PUSH
30274: LD_VAR 0 3
30278: PPUSH
30279: LD_VAR 0 4
30283: PPUSH
30284: CALL_OW 488
30288: NOT
30289: OR
30290: IFFALSE 30294
// exit ;
30292: GO 31030
// side := GetSide ( depot ) ;
30294: LD_ADDR_VAR 0 9
30298: PUSH
30299: LD_VAR 0 1
30303: PPUSH
30304: CALL_OW 255
30308: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30309: LD_VAR 0 9
30313: PPUSH
30314: LD_VAR 0 2
30318: PPUSH
30319: CALL 29787 0 2
30323: NOT
30324: IFFALSE 30328
// exit ;
30326: GO 31030
// pom := GetBase ( depot ) ;
30328: LD_ADDR_VAR 0 10
30332: PUSH
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 274
30342: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30343: LD_ADDR_VAR 0 11
30347: PUSH
30348: LD_VAR 0 2
30352: PPUSH
30353: LD_VAR 0 1
30357: PPUSH
30358: CALL_OW 248
30362: PPUSH
30363: CALL_OW 450
30367: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30368: LD_VAR 0 10
30372: PPUSH
30373: LD_INT 1
30375: PPUSH
30376: CALL_OW 275
30380: PUSH
30381: LD_VAR 0 11
30385: PUSH
30386: LD_INT 1
30388: ARRAY
30389: GREATEREQUAL
30390: PUSH
30391: LD_VAR 0 10
30395: PPUSH
30396: LD_INT 2
30398: PPUSH
30399: CALL_OW 275
30403: PUSH
30404: LD_VAR 0 11
30408: PUSH
30409: LD_INT 2
30411: ARRAY
30412: GREATEREQUAL
30413: AND
30414: PUSH
30415: LD_VAR 0 10
30419: PPUSH
30420: LD_INT 3
30422: PPUSH
30423: CALL_OW 275
30427: PUSH
30428: LD_VAR 0 11
30432: PUSH
30433: LD_INT 3
30435: ARRAY
30436: GREATEREQUAL
30437: AND
30438: NOT
30439: IFFALSE 30443
// exit ;
30441: GO 31030
// if GetBType ( depot ) = b_depot then
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 266
30452: PUSH
30453: LD_INT 0
30455: EQUAL
30456: IFFALSE 30468
// dist := 28 else
30458: LD_ADDR_VAR 0 14
30462: PUSH
30463: LD_INT 28
30465: ST_TO_ADDR
30466: GO 30476
// dist := 36 ;
30468: LD_ADDR_VAR 0 14
30472: PUSH
30473: LD_INT 36
30475: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30476: LD_VAR 0 1
30480: PPUSH
30481: LD_VAR 0 3
30485: PPUSH
30486: LD_VAR 0 4
30490: PPUSH
30491: CALL_OW 297
30495: PUSH
30496: LD_VAR 0 14
30500: GREATER
30501: IFFALSE 30505
// exit ;
30503: GO 31030
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30505: LD_ADDR_VAR 0 12
30509: PUSH
30510: LD_VAR 0 2
30514: PPUSH
30515: LD_VAR 0 3
30519: PPUSH
30520: LD_VAR 0 4
30524: PPUSH
30525: LD_VAR 0 5
30529: PPUSH
30530: LD_VAR 0 1
30534: PPUSH
30535: CALL_OW 248
30539: PPUSH
30540: LD_INT 0
30542: PPUSH
30543: CALL 31035 0 6
30547: ST_TO_ADDR
// if not hexes then
30548: LD_VAR 0 12
30552: NOT
30553: IFFALSE 30557
// exit ;
30555: GO 31030
// hex := GetHexInfo ( x , y ) ;
30557: LD_ADDR_VAR 0 15
30561: PUSH
30562: LD_VAR 0 3
30566: PPUSH
30567: LD_VAR 0 4
30571: PPUSH
30572: CALL_OW 546
30576: ST_TO_ADDR
// if hex [ 1 ] then
30577: LD_VAR 0 15
30581: PUSH
30582: LD_INT 1
30584: ARRAY
30585: IFFALSE 30589
// exit ;
30587: GO 31030
// height := hex [ 2 ] ;
30589: LD_ADDR_VAR 0 13
30593: PUSH
30594: LD_VAR 0 15
30598: PUSH
30599: LD_INT 2
30601: ARRAY
30602: ST_TO_ADDR
// for i = 1 to hexes do
30603: LD_ADDR_VAR 0 7
30607: PUSH
30608: DOUBLE
30609: LD_INT 1
30611: DEC
30612: ST_TO_ADDR
30613: LD_VAR 0 12
30617: PUSH
30618: FOR_TO
30619: IFFALSE 30949
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30621: LD_VAR 0 12
30625: PUSH
30626: LD_VAR 0 7
30630: ARRAY
30631: PUSH
30632: LD_INT 1
30634: ARRAY
30635: PPUSH
30636: LD_VAR 0 12
30640: PUSH
30641: LD_VAR 0 7
30645: ARRAY
30646: PUSH
30647: LD_INT 2
30649: ARRAY
30650: PPUSH
30651: CALL_OW 488
30655: NOT
30656: PUSH
30657: LD_VAR 0 12
30661: PUSH
30662: LD_VAR 0 7
30666: ARRAY
30667: PUSH
30668: LD_INT 1
30670: ARRAY
30671: PPUSH
30672: LD_VAR 0 12
30676: PUSH
30677: LD_VAR 0 7
30681: ARRAY
30682: PUSH
30683: LD_INT 2
30685: ARRAY
30686: PPUSH
30687: CALL_OW 428
30691: PUSH
30692: LD_INT 0
30694: GREATER
30695: OR
30696: PUSH
30697: LD_VAR 0 12
30701: PUSH
30702: LD_VAR 0 7
30706: ARRAY
30707: PUSH
30708: LD_INT 1
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 12
30716: PUSH
30717: LD_VAR 0 7
30721: ARRAY
30722: PUSH
30723: LD_INT 2
30725: ARRAY
30726: PPUSH
30727: CALL_OW 351
30731: OR
30732: IFFALSE 30738
// exit ;
30734: POP
30735: POP
30736: GO 31030
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30738: LD_ADDR_VAR 0 8
30742: PUSH
30743: LD_VAR 0 12
30747: PUSH
30748: LD_VAR 0 7
30752: ARRAY
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 12
30762: PUSH
30763: LD_VAR 0 7
30767: ARRAY
30768: PUSH
30769: LD_INT 2
30771: ARRAY
30772: PPUSH
30773: CALL_OW 546
30777: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30778: LD_VAR 0 8
30782: PUSH
30783: LD_INT 1
30785: ARRAY
30786: PUSH
30787: LD_VAR 0 8
30791: PUSH
30792: LD_INT 2
30794: ARRAY
30795: PUSH
30796: LD_VAR 0 13
30800: PUSH
30801: LD_INT 2
30803: PLUS
30804: GREATER
30805: OR
30806: PUSH
30807: LD_VAR 0 8
30811: PUSH
30812: LD_INT 2
30814: ARRAY
30815: PUSH
30816: LD_VAR 0 13
30820: PUSH
30821: LD_INT 2
30823: MINUS
30824: LESS
30825: OR
30826: PUSH
30827: LD_VAR 0 8
30831: PUSH
30832: LD_INT 3
30834: ARRAY
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 8
30841: PUSH
30842: LD_INT 9
30844: PUSH
30845: LD_INT 10
30847: PUSH
30848: LD_INT 11
30850: PUSH
30851: LD_INT 12
30853: PUSH
30854: LD_INT 13
30856: PUSH
30857: LD_INT 16
30859: PUSH
30860: LD_INT 17
30862: PUSH
30863: LD_INT 18
30865: PUSH
30866: LD_INT 19
30868: PUSH
30869: LD_INT 20
30871: PUSH
30872: LD_INT 21
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: IN
30890: NOT
30891: OR
30892: PUSH
30893: LD_VAR 0 8
30897: PUSH
30898: LD_INT 5
30900: ARRAY
30901: NOT
30902: OR
30903: PUSH
30904: LD_VAR 0 8
30908: PUSH
30909: LD_INT 6
30911: ARRAY
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 7
30921: PUSH
30922: LD_INT 9
30924: PUSH
30925: LD_INT 10
30927: PUSH
30928: LD_INT 11
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: IN
30939: NOT
30940: OR
30941: IFFALSE 30947
// exit ;
30943: POP
30944: POP
30945: GO 31030
// end ;
30947: GO 30618
30949: POP
30950: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30951: LD_VAR 0 9
30955: PPUSH
30956: LD_VAR 0 3
30960: PPUSH
30961: LD_VAR 0 4
30965: PPUSH
30966: LD_INT 20
30968: PPUSH
30969: CALL 22953 0 4
30973: PUSH
30974: LD_INT 4
30976: ARRAY
30977: IFFALSE 30981
// exit ;
30979: GO 31030
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30981: LD_VAR 0 2
30985: PUSH
30986: LD_INT 29
30988: PUSH
30989: LD_INT 30
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: IN
30996: PUSH
30997: LD_VAR 0 3
31001: PPUSH
31002: LD_VAR 0 4
31006: PPUSH
31007: LD_VAR 0 9
31011: PPUSH
31012: CALL_OW 440
31016: NOT
31017: AND
31018: IFFALSE 31022
// exit ;
31020: GO 31030
// result := true ;
31022: LD_ADDR_VAR 0 6
31026: PUSH
31027: LD_INT 1
31029: ST_TO_ADDR
// end ;
31030: LD_VAR 0 6
31034: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31035: LD_INT 0
31037: PPUSH
31038: PPUSH
31039: PPUSH
31040: PPUSH
31041: PPUSH
31042: PPUSH
31043: PPUSH
31044: PPUSH
31045: PPUSH
31046: PPUSH
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
31064: PPUSH
31065: PPUSH
31066: PPUSH
31067: PPUSH
31068: PPUSH
31069: PPUSH
31070: PPUSH
31071: PPUSH
31072: PPUSH
31073: PPUSH
31074: PPUSH
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
31090: PPUSH
31091: PPUSH
31092: PPUSH
31093: PPUSH
31094: PPUSH
// result = [ ] ;
31095: LD_ADDR_VAR 0 7
31099: PUSH
31100: EMPTY
31101: ST_TO_ADDR
// temp_list = [ ] ;
31102: LD_ADDR_VAR 0 9
31106: PUSH
31107: EMPTY
31108: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31109: LD_VAR 0 4
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 1
31119: PUSH
31120: LD_INT 2
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 4
31128: PUSH
31129: LD_INT 5
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: IN
31140: NOT
31141: PUSH
31142: LD_VAR 0 1
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: IN
31157: PUSH
31158: LD_VAR 0 5
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: LD_INT 3
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: LIST
31176: IN
31177: NOT
31178: AND
31179: OR
31180: IFFALSE 31184
// exit ;
31182: GO 49575
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31184: LD_VAR 0 1
31188: PUSH
31189: LD_INT 6
31191: PUSH
31192: LD_INT 7
31194: PUSH
31195: LD_INT 8
31197: PUSH
31198: LD_INT 13
31200: PUSH
31201: LD_INT 12
31203: PUSH
31204: LD_INT 15
31206: PUSH
31207: LD_INT 11
31209: PUSH
31210: LD_INT 14
31212: PUSH
31213: LD_INT 10
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: IN
31227: IFFALSE 31237
// btype = b_lab ;
31229: LD_ADDR_VAR 0 1
31233: PUSH
31234: LD_INT 6
31236: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31237: LD_VAR 0 6
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: IN
31256: NOT
31257: PUSH
31258: LD_VAR 0 1
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: LD_INT 6
31277: PUSH
31278: LD_INT 36
31280: PUSH
31281: LD_INT 4
31283: PUSH
31284: LD_INT 5
31286: PUSH
31287: LD_INT 31
31289: PUSH
31290: LD_INT 32
31292: PUSH
31293: LD_INT 33
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: IN
31309: NOT
31310: PUSH
31311: LD_VAR 0 6
31315: PUSH
31316: LD_INT 1
31318: EQUAL
31319: AND
31320: OR
31321: PUSH
31322: LD_VAR 0 1
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 3
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: IN
31337: NOT
31338: PUSH
31339: LD_VAR 0 6
31343: PUSH
31344: LD_INT 2
31346: EQUAL
31347: AND
31348: OR
31349: IFFALSE 31359
// mode = 0 ;
31351: LD_ADDR_VAR 0 6
31355: PUSH
31356: LD_INT 0
31358: ST_TO_ADDR
// case mode of 0 :
31359: LD_VAR 0 6
31363: PUSH
31364: LD_INT 0
31366: DOUBLE
31367: EQUAL
31368: IFTRUE 31372
31370: GO 42825
31372: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31373: LD_ADDR_VAR 0 11
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: NEG
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 0
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 3
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: NEG
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31566: LD_ADDR_VAR 0 12
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 0
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: LD_INT 1
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 1
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: NEG
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 0
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 3
31723: NEG
31724: PUSH
31725: LD_INT 0
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31762: LD_ADDR_VAR 0 13
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 1
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 2
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 2
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 2
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 2
31885: NEG
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: LD_INT 2
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: NEG
31910: PUSH
31911: LD_INT 3
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 3
31921: NEG
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31961: LD_ADDR_VAR 0 14
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: LD_INT 2
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: LD_INT 3
32111: NEG
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 3
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32157: LD_ADDR_VAR 0 15
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: LD_INT 1
32177: NEG
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 3
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32350: LD_ADDR_VAR 0 16
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 0
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 1
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 3
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32543: LD_ADDR_VAR 0 17
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: LD_INT 1
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 0
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 1
32708: NEG
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: LD_INT 2
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32773: LD_ADDR_VAR 0 18
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: NEG
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: LD_INT 2
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: NEG
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: NEG
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 2
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33003: LD_ADDR_VAR 0 19
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 1
33084: NEG
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: LD_INT 2
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 2
33179: NEG
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33233: LD_ADDR_VAR 0 20
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 2
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 2
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: NEG
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 2
33432: NEG
33433: PUSH
33434: LD_INT 2
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33463: LD_ADDR_VAR 0 21
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 1
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: LD_INT 2
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: LD_INT 1
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 2
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33693: LD_ADDR_VAR 0 22
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: NEG
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 2
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 2
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 2
33828: PUSH
33829: LD_INT 2
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: LD_INT 2
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: NEG
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 2
33880: NEG
33881: PUSH
33882: LD_INT 1
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: LD_INT 2
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33923: LD_ADDR_VAR 0 23
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 3
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: NEG
34147: PUSH
34148: LD_INT 3
34150: NEG
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34203: LD_ADDR_VAR 0 24
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: LD_INT 2
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 2
34379: NEG
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: NEG
34391: PUSH
34392: LD_INT 1
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 1
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34479: LD_ADDR_VAR 0 25
34483: PUSH
34484: LD_INT 0
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: LD_INT 1
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 0
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: NEG
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 1
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 2
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: LD_INT 1
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: LD_INT 2
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 3
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 3
34700: PUSH
34701: LD_INT 2
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 3
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34753: LD_ADDR_VAR 0 26
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: LD_INT 2
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 0
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 1
34918: NEG
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: NEG
34930: PUSH
34931: LD_INT 0
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: NEG
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: LD_INT 2
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: LD_INT 3
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35029: LD_ADDR_VAR 0 27
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 0
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: LD_INT 0
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 2
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 0
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 2
35205: NEG
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 2
35216: NEG
35217: PUSH
35218: LD_INT 1
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 3
35274: NEG
35275: PUSH
35276: LD_INT 2
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35309: LD_ADDR_VAR 0 28
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 0
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: LD_INT 0
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 1
35454: PUSH
35455: LD_INT 2
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 2
35496: NEG
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 3
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: LD_INT 3
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 3
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 3
35556: NEG
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35591: LD_ADDR_VAR 0 29
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 1
35664: NEG
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: LD_INT 1
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: LD_INT 2
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 3
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 3
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 3
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 3
35835: NEG
35836: PUSH
35837: LD_INT 2
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35870: LD_ADDR_VAR 0 30
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: NEG
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 1
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 2
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 2
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: LD_INT 3
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: NEG
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 3
36113: NEG
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36148: LD_ADDR_VAR 0 31
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: LD_INT 2
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 2
36325: NEG
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 3
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 3
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 3
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 3
36391: NEG
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36426: LD_ADDR_VAR 0 32
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 1
36581: NEG
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 3
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 3
36669: NEG
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36704: LD_ADDR_VAR 0 33
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 2
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 3
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 3
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 3
36948: NEG
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36983: LD_ADDR_VAR 0 34
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 2
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: LD_INT 2
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 1
37174: NEG
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 3
37197: PUSH
37198: LD_INT 2
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: LD_INT 3
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: NEG
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: NEG
37229: PUSH
37230: LD_INT 1
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37263: LD_ADDR_VAR 0 35
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37375: LD_ADDR_VAR 0 36
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37487: LD_ADDR_VAR 0 37
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 0
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 0
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37599: LD_ADDR_VAR 0 38
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37711: LD_ADDR_VAR 0 39
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37823: LD_ADDR_VAR 0 40
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 0
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37935: LD_ADDR_VAR 0 41
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 0
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: LD_INT 3
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: LD_INT 3
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 3
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 2
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 3
38244: NEG
38245: PUSH
38246: LD_INT 3
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38285: LD_ADDR_VAR 0 42
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 2
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 2
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 3
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 3
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 3
38582: NEG
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 3
38594: NEG
38595: PUSH
38596: LD_INT 3
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38635: LD_ADDR_VAR 0 43
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 3
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: NEG
38932: PUSH
38933: LD_INT 0
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 3
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38983: LD_ADDR_VAR 0 44
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: LD_INT 1
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 2
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: LD_INT 3
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: LD_INT 3
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 2
39246: NEG
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 3
39257: NEG
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 3
39268: NEG
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 3
39280: NEG
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 3
39292: NEG
39293: PUSH
39294: LD_INT 3
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39333: LD_ADDR_VAR 0 45
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 0
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: NEG
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 3
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 3
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: PUSH
39580: LD_INT 3
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 3
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 3
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: LD_INT 3
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39683: LD_ADDR_VAR 0 46
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 2
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 3
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 3
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 2
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 3
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 3
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 3
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 3
39979: NEG
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40031: LD_ADDR_VAR 0 47
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: LD_INT 2
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40182: LD_ADDR_VAR 0 48
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 2
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40329: LD_ADDR_VAR 0 49
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40473: LD_ADDR_VAR 0 50
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 2
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: LD_INT 1
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40617: LD_ADDR_VAR 0 51
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40764: LD_ADDR_VAR 0 52
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40915: LD_ADDR_VAR 0 53
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 0
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: LD_INT 2
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 0
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 2
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: NEG
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41145: LD_ADDR_VAR 0 54
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 2
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41375: LD_ADDR_VAR 0 55
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41605: LD_ADDR_VAR 0 56
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41835: LD_ADDR_VAR 0 57
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42065: LD_ADDR_VAR 0 58
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42295: LD_ADDR_VAR 0 59
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42383: LD_ADDR_VAR 0 60
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42471: LD_ADDR_VAR 0 61
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42559: LD_ADDR_VAR 0 62
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42647: LD_ADDR_VAR 0 63
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42735: LD_ADDR_VAR 0 64
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// end ; 1 :
42823: GO 48720
42825: LD_INT 1
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 45456
42833: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42834: LD_ADDR_VAR 0 11
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 3
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: LD_INT 2
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42878: LD_ADDR_VAR 0 12
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: PUSH
42897: LD_INT 0
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42919: LD_ADDR_VAR 0 13
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 2
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 3
42936: PUSH
42937: LD_INT 3
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: LIST
42958: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42959: LD_ADDR_VAR 0 14
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 0
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43000: LD_ADDR_VAR 0 15
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43044: LD_ADDR_VAR 0 16
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: LD_INT 3
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: LD_INT 3
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43090: LD_ADDR_VAR 0 17
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 3
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 3
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43134: LD_ADDR_VAR 0 18
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 1
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43175: LD_ADDR_VAR 0 19
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: LD_INT 3
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: LIST
43214: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43215: LD_ADDR_VAR 0 20
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43256: LD_ADDR_VAR 0 21
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 3
43274: NEG
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 3
43285: NEG
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43300: LD_ADDR_VAR 0 22
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: NEG
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 3
43331: NEG
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43346: LD_ADDR_VAR 0 23
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: LD_INT 4
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 3
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43390: LD_ADDR_VAR 0 24
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 4
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43431: LD_ADDR_VAR 0 25
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 4
43448: PUSH
43449: LD_INT 3
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 4
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43471: LD_ADDR_VAR 0 26
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 4
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 3
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43512: LD_ADDR_VAR 0 27
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 4
43541: NEG
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: LIST
43555: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43556: LD_ADDR_VAR 0 28
43560: PUSH
43561: LD_INT 3
43563: NEG
43564: PUSH
43565: LD_INT 3
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: LD_INT 4
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 4
43587: NEG
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43602: LD_ADDR_VAR 0 29
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 3
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 4
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 4
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 3
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 5
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 5
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 4
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 6
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 6
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 5
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43757: LD_ADDR_VAR 0 30
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 4
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 4
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 4
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 5
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 5
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 5
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 6
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 6
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43900: LD_ADDR_VAR 0 31
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 3
43917: PUSH
43918: LD_INT 3
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: LD_INT 3
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 4
43937: PUSH
43938: LD_INT 3
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: LD_INT 4
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: LD_INT 4
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 5
43967: PUSH
43968: LD_INT 4
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 5
43977: PUSH
43978: LD_INT 5
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 4
43987: PUSH
43988: LD_INT 5
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 6
43997: PUSH
43998: LD_INT 5
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 6
44007: PUSH
44008: LD_INT 6
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 5
44017: PUSH
44018: LD_INT 6
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44039: LD_ADDR_VAR 0 32
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 3
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 3
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 4
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 4
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 5
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 5
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 4
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 6
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 6
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 5
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44182: LD_ADDR_VAR 0 33
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 3
44200: NEG
44201: PUSH
44202: LD_INT 0
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 3
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 4
44234: NEG
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 4
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 5
44268: NEG
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 5
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 5
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 6
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 6
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44337: LD_ADDR_VAR 0 34
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: LD_INT 2
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: NEG
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 3
44380: NEG
44381: PUSH
44382: LD_INT 4
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 4
44392: NEG
44393: PUSH
44394: LD_INT 3
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 4
44404: NEG
44405: PUSH
44406: LD_INT 4
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 4
44416: NEG
44417: PUSH
44418: LD_INT 5
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 5
44428: NEG
44429: PUSH
44430: LD_INT 4
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 5
44440: NEG
44441: PUSH
44442: LD_INT 5
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 5
44452: NEG
44453: PUSH
44454: LD_INT 6
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 6
44464: NEG
44465: PUSH
44466: LD_INT 5
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 6
44476: NEG
44477: PUSH
44478: LD_INT 6
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44500: LD_ADDR_VAR 0 41
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 3
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44544: LD_ADDR_VAR 0 42
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 1
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 3
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44585: LD_ADDR_VAR 0 43
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: LD_INT 3
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44625: LD_ADDR_VAR 0 44
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44666: LD_ADDR_VAR 0 45
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 3
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44710: LD_ADDR_VAR 0 46
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 3
44741: NEG
44742: PUSH
44743: LD_INT 2
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44756: LD_ADDR_VAR 0 47
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 3
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 3
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44789: LD_ADDR_VAR 0 48
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44820: LD_ADDR_VAR 0 49
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44849: LD_ADDR_VAR 0 50
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44878: LD_ADDR_VAR 0 51
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 2
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44909: LD_ADDR_VAR 0 52
44913: PUSH
44914: LD_INT 3
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 3
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44942: LD_ADDR_VAR 0 53
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 3
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 3
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44986: LD_ADDR_VAR 0 54
44990: PUSH
44991: LD_INT 2
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 3
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45027: LD_ADDR_VAR 0 55
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45067: LD_ADDR_VAR 0 56
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 3
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45108: LD_ADDR_VAR 0 57
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45152: LD_ADDR_VAR 0 58
45156: PUSH
45157: LD_INT 2
45159: NEG
45160: PUSH
45161: LD_INT 3
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: LD_INT 3
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45198: LD_ADDR_VAR 0 59
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45242: LD_ADDR_VAR 0 60
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45283: LD_ADDR_VAR 0 61
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45323: LD_ADDR_VAR 0 62
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: LIST
45363: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45364: LD_ADDR_VAR 0 63
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45408: LD_ADDR_VAR 0 64
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// end ; 2 :
45454: GO 48720
45456: LD_INT 2
45458: DOUBLE
45459: EQUAL
45460: IFTRUE 45464
45462: GO 48719
45464: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45465: LD_ADDR_VAR 0 29
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 4
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 5
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 5
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 3
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 5
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 4
45585: PUSH
45586: LD_INT 3
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 4
45595: PUSH
45596: LD_INT 4
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 3
45605: PUSH
45606: LD_INT 4
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 3
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 4
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 4
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 4
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 3
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 4
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: LD_INT 5
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 5
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 4
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 3
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 5
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: NEG
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 4
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 4
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 4
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 4
45850: NEG
45851: PUSH
45852: LD_INT 4
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 4
45862: NEG
45863: PUSH
45864: LD_INT 5
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 4
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 4
45898: NEG
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 5
45910: NEG
45911: PUSH
45912: LD_INT 4
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 5
45922: NEG
45923: PUSH
45924: LD_INT 5
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: LD_INT 5
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: NEG
45947: PUSH
45948: LD_INT 3
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46003: LD_ADDR_VAR 0 30
46007: PUSH
46008: LD_INT 4
46010: PUSH
46011: LD_INT 4
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 4
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 5
46030: PUSH
46031: LD_INT 4
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 5
46040: PUSH
46041: LD_INT 5
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 4
46050: PUSH
46051: LD_INT 5
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: LD_INT 4
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 5
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: LD_INT 5
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 4
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 4
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: PUSH
46173: LD_INT 4
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 4
46193: NEG
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 4
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 5
46249: NEG
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 5
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 5
46272: NEG
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 3
46284: NEG
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: NEG
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: LD_INT 4
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: NEG
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 4
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 4
46367: NEG
46368: PUSH
46369: LD_INT 4
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 4
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 4
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 4
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 5
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: LD_INT 4
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 3
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 4
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 5
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: PUSH
46483: LD_INT 3
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 5
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46550: LD_ADDR_VAR 0 31
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 4
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 4
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 5
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 5
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 4
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 5
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 4
46706: NEG
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 4
46717: NEG
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 4
46729: NEG
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: NEG
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 4
46752: NEG
46753: PUSH
46754: LD_INT 4
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 4
46764: NEG
46765: PUSH
46766: LD_INT 5
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: LD_INT 4
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 4
46800: NEG
46801: PUSH
46802: LD_INT 3
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 5
46812: NEG
46813: PUSH
46814: LD_INT 4
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 5
46824: NEG
46825: PUSH
46826: LD_INT 5
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 3
46836: NEG
46837: PUSH
46838: LD_INT 5
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 5
46848: NEG
46849: PUSH
46850: LD_INT 3
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: LD_INT 4
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 3
46885: NEG
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 3
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: LD_INT 4
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 4
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 4
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 5
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 5
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 4
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 3
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 5
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47100: LD_ADDR_VAR 0 32
47104: PUSH
47105: LD_INT 4
47107: NEG
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 4
47118: NEG
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 4
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 5
47163: NEG
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 5
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 5
47186: NEG
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: NEG
47222: PUSH
47223: LD_INT 4
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 3
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 4
47269: NEG
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 4
47281: NEG
47282: PUSH
47283: LD_INT 4
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 4
47305: NEG
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 4
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 5
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 4
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 3
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 4
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 5
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 4
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 4
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 2
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 4
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: LD_INT 4
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 4
47522: PUSH
47523: LD_INT 3
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 5
47532: PUSH
47533: LD_INT 4
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 5
47542: PUSH
47543: LD_INT 5
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 4
47552: PUSH
47553: LD_INT 5
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: LD_INT 4
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 3
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 5
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: PUSH
47593: LD_INT 5
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47647: LD_ADDR_VAR 0 33
47651: PUSH
47652: LD_INT 4
47654: NEG
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 4
47666: NEG
47667: PUSH
47668: LD_INT 5
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 3
47678: NEG
47679: PUSH
47680: LD_INT 4
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 3
47690: NEG
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 4
47702: NEG
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 5
47714: NEG
47715: PUSH
47716: LD_INT 4
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 5
47726: NEG
47727: PUSH
47728: LD_INT 5
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 5
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 5
47750: NEG
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 4
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 3
47787: NEG
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 4
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 4
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 4
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 4
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 5
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 5
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 4
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 3
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 5
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 3
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: LD_INT 2
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: LD_INT 3
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 4
47987: PUSH
47988: LD_INT 4
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 3
47997: PUSH
47998: LD_INT 4
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 3
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 4
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 4
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 4
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 5
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 5
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 4
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 3
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: LD_INT 5
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48185: LD_ADDR_VAR 0 34
48189: PUSH
48190: LD_INT 0
48192: PUSH
48193: LD_INT 4
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 5
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 4
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 3
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 3
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 4
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 5
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 5
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 4
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 4
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: PUSH
48388: LD_INT 4
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 4
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 5
48407: PUSH
48408: LD_INT 4
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 5
48417: PUSH
48418: LD_INT 5
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 4
48427: PUSH
48428: LD_INT 5
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 3
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 5
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: LD_INT 5
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 3
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 4
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: LD_INT 4
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 3
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 4
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 4
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 3
48593: NEG
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 3
48604: NEG
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 4
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 5
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 5
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 5
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// end ; end ;
48717: GO 48720
48719: POP
// case btype of b_depot , b_warehouse :
48720: LD_VAR 0 1
48724: PUSH
48725: LD_INT 0
48727: DOUBLE
48728: EQUAL
48729: IFTRUE 48739
48731: LD_INT 1
48733: DOUBLE
48734: EQUAL
48735: IFTRUE 48739
48737: GO 48940
48739: POP
// case nation of nation_american :
48740: LD_VAR 0 5
48744: PUSH
48745: LD_INT 1
48747: DOUBLE
48748: EQUAL
48749: IFTRUE 48753
48751: GO 48809
48753: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48754: LD_ADDR_VAR 0 9
48758: PUSH
48759: LD_VAR 0 11
48763: PUSH
48764: LD_VAR 0 12
48768: PUSH
48769: LD_VAR 0 13
48773: PUSH
48774: LD_VAR 0 14
48778: PUSH
48779: LD_VAR 0 15
48783: PUSH
48784: LD_VAR 0 16
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: PUSH
48797: LD_VAR 0 4
48801: PUSH
48802: LD_INT 1
48804: PLUS
48805: ARRAY
48806: ST_TO_ADDR
48807: GO 48938
48809: LD_INT 2
48811: DOUBLE
48812: EQUAL
48813: IFTRUE 48817
48815: GO 48873
48817: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48818: LD_ADDR_VAR 0 9
48822: PUSH
48823: LD_VAR 0 17
48827: PUSH
48828: LD_VAR 0 18
48832: PUSH
48833: LD_VAR 0 19
48837: PUSH
48838: LD_VAR 0 20
48842: PUSH
48843: LD_VAR 0 21
48847: PUSH
48848: LD_VAR 0 22
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: PUSH
48861: LD_VAR 0 4
48865: PUSH
48866: LD_INT 1
48868: PLUS
48869: ARRAY
48870: ST_TO_ADDR
48871: GO 48938
48873: LD_INT 3
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48881
48879: GO 48937
48881: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48882: LD_ADDR_VAR 0 9
48886: PUSH
48887: LD_VAR 0 23
48891: PUSH
48892: LD_VAR 0 24
48896: PUSH
48897: LD_VAR 0 25
48901: PUSH
48902: LD_VAR 0 26
48906: PUSH
48907: LD_VAR 0 27
48911: PUSH
48912: LD_VAR 0 28
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: PUSH
48925: LD_VAR 0 4
48929: PUSH
48930: LD_INT 1
48932: PLUS
48933: ARRAY
48934: ST_TO_ADDR
48935: GO 48938
48937: POP
48938: GO 49493
48940: LD_INT 2
48942: DOUBLE
48943: EQUAL
48944: IFTRUE 48954
48946: LD_INT 3
48948: DOUBLE
48949: EQUAL
48950: IFTRUE 48954
48952: GO 49010
48954: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48955: LD_ADDR_VAR 0 9
48959: PUSH
48960: LD_VAR 0 29
48964: PUSH
48965: LD_VAR 0 30
48969: PUSH
48970: LD_VAR 0 31
48974: PUSH
48975: LD_VAR 0 32
48979: PUSH
48980: LD_VAR 0 33
48984: PUSH
48985: LD_VAR 0 34
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: PUSH
48998: LD_VAR 0 4
49002: PUSH
49003: LD_INT 1
49005: PLUS
49006: ARRAY
49007: ST_TO_ADDR
49008: GO 49493
49010: LD_INT 16
49012: DOUBLE
49013: EQUAL
49014: IFTRUE 49072
49016: LD_INT 17
49018: DOUBLE
49019: EQUAL
49020: IFTRUE 49072
49022: LD_INT 18
49024: DOUBLE
49025: EQUAL
49026: IFTRUE 49072
49028: LD_INT 19
49030: DOUBLE
49031: EQUAL
49032: IFTRUE 49072
49034: LD_INT 22
49036: DOUBLE
49037: EQUAL
49038: IFTRUE 49072
49040: LD_INT 20
49042: DOUBLE
49043: EQUAL
49044: IFTRUE 49072
49046: LD_INT 21
49048: DOUBLE
49049: EQUAL
49050: IFTRUE 49072
49052: LD_INT 23
49054: DOUBLE
49055: EQUAL
49056: IFTRUE 49072
49058: LD_INT 24
49060: DOUBLE
49061: EQUAL
49062: IFTRUE 49072
49064: LD_INT 25
49066: DOUBLE
49067: EQUAL
49068: IFTRUE 49072
49070: GO 49128
49072: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49073: LD_ADDR_VAR 0 9
49077: PUSH
49078: LD_VAR 0 35
49082: PUSH
49083: LD_VAR 0 36
49087: PUSH
49088: LD_VAR 0 37
49092: PUSH
49093: LD_VAR 0 38
49097: PUSH
49098: LD_VAR 0 39
49102: PUSH
49103: LD_VAR 0 40
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: PUSH
49116: LD_VAR 0 4
49120: PUSH
49121: LD_INT 1
49123: PLUS
49124: ARRAY
49125: ST_TO_ADDR
49126: GO 49493
49128: LD_INT 6
49130: DOUBLE
49131: EQUAL
49132: IFTRUE 49184
49134: LD_INT 7
49136: DOUBLE
49137: EQUAL
49138: IFTRUE 49184
49140: LD_INT 8
49142: DOUBLE
49143: EQUAL
49144: IFTRUE 49184
49146: LD_INT 13
49148: DOUBLE
49149: EQUAL
49150: IFTRUE 49184
49152: LD_INT 12
49154: DOUBLE
49155: EQUAL
49156: IFTRUE 49184
49158: LD_INT 15
49160: DOUBLE
49161: EQUAL
49162: IFTRUE 49184
49164: LD_INT 11
49166: DOUBLE
49167: EQUAL
49168: IFTRUE 49184
49170: LD_INT 14
49172: DOUBLE
49173: EQUAL
49174: IFTRUE 49184
49176: LD_INT 10
49178: DOUBLE
49179: EQUAL
49180: IFTRUE 49184
49182: GO 49240
49184: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49185: LD_ADDR_VAR 0 9
49189: PUSH
49190: LD_VAR 0 41
49194: PUSH
49195: LD_VAR 0 42
49199: PUSH
49200: LD_VAR 0 43
49204: PUSH
49205: LD_VAR 0 44
49209: PUSH
49210: LD_VAR 0 45
49214: PUSH
49215: LD_VAR 0 46
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: PUSH
49228: LD_VAR 0 4
49232: PUSH
49233: LD_INT 1
49235: PLUS
49236: ARRAY
49237: ST_TO_ADDR
49238: GO 49493
49240: LD_INT 36
49242: DOUBLE
49243: EQUAL
49244: IFTRUE 49248
49246: GO 49304
49248: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49249: LD_ADDR_VAR 0 9
49253: PUSH
49254: LD_VAR 0 47
49258: PUSH
49259: LD_VAR 0 48
49263: PUSH
49264: LD_VAR 0 49
49268: PUSH
49269: LD_VAR 0 50
49273: PUSH
49274: LD_VAR 0 51
49278: PUSH
49279: LD_VAR 0 52
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: PUSH
49292: LD_VAR 0 4
49296: PUSH
49297: LD_INT 1
49299: PLUS
49300: ARRAY
49301: ST_TO_ADDR
49302: GO 49493
49304: LD_INT 4
49306: DOUBLE
49307: EQUAL
49308: IFTRUE 49330
49310: LD_INT 5
49312: DOUBLE
49313: EQUAL
49314: IFTRUE 49330
49316: LD_INT 34
49318: DOUBLE
49319: EQUAL
49320: IFTRUE 49330
49322: LD_INT 37
49324: DOUBLE
49325: EQUAL
49326: IFTRUE 49330
49328: GO 49386
49330: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49331: LD_ADDR_VAR 0 9
49335: PUSH
49336: LD_VAR 0 53
49340: PUSH
49341: LD_VAR 0 54
49345: PUSH
49346: LD_VAR 0 55
49350: PUSH
49351: LD_VAR 0 56
49355: PUSH
49356: LD_VAR 0 57
49360: PUSH
49361: LD_VAR 0 58
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: PUSH
49374: LD_VAR 0 4
49378: PUSH
49379: LD_INT 1
49381: PLUS
49382: ARRAY
49383: ST_TO_ADDR
49384: GO 49493
49386: LD_INT 31
49388: DOUBLE
49389: EQUAL
49390: IFTRUE 49436
49392: LD_INT 32
49394: DOUBLE
49395: EQUAL
49396: IFTRUE 49436
49398: LD_INT 33
49400: DOUBLE
49401: EQUAL
49402: IFTRUE 49436
49404: LD_INT 27
49406: DOUBLE
49407: EQUAL
49408: IFTRUE 49436
49410: LD_INT 26
49412: DOUBLE
49413: EQUAL
49414: IFTRUE 49436
49416: LD_INT 28
49418: DOUBLE
49419: EQUAL
49420: IFTRUE 49436
49422: LD_INT 29
49424: DOUBLE
49425: EQUAL
49426: IFTRUE 49436
49428: LD_INT 30
49430: DOUBLE
49431: EQUAL
49432: IFTRUE 49436
49434: GO 49492
49436: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49437: LD_ADDR_VAR 0 9
49441: PUSH
49442: LD_VAR 0 59
49446: PUSH
49447: LD_VAR 0 60
49451: PUSH
49452: LD_VAR 0 61
49456: PUSH
49457: LD_VAR 0 62
49461: PUSH
49462: LD_VAR 0 63
49466: PUSH
49467: LD_VAR 0 64
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: PUSH
49480: LD_VAR 0 4
49484: PUSH
49485: LD_INT 1
49487: PLUS
49488: ARRAY
49489: ST_TO_ADDR
49490: GO 49493
49492: POP
// temp_list2 = [ ] ;
49493: LD_ADDR_VAR 0 10
49497: PUSH
49498: EMPTY
49499: ST_TO_ADDR
// for i in temp_list do
49500: LD_ADDR_VAR 0 8
49504: PUSH
49505: LD_VAR 0 9
49509: PUSH
49510: FOR_IN
49511: IFFALSE 49563
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49513: LD_ADDR_VAR 0 10
49517: PUSH
49518: LD_VAR 0 10
49522: PUSH
49523: LD_VAR 0 8
49527: PUSH
49528: LD_INT 1
49530: ARRAY
49531: PUSH
49532: LD_VAR 0 2
49536: PLUS
49537: PUSH
49538: LD_VAR 0 8
49542: PUSH
49543: LD_INT 2
49545: ARRAY
49546: PUSH
49547: LD_VAR 0 3
49551: PLUS
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: EMPTY
49558: LIST
49559: ADD
49560: ST_TO_ADDR
49561: GO 49510
49563: POP
49564: POP
// result = temp_list2 ;
49565: LD_ADDR_VAR 0 7
49569: PUSH
49570: LD_VAR 0 10
49574: ST_TO_ADDR
// end ;
49575: LD_VAR 0 7
49579: RET
// export function EnemyInRange ( unit , dist ) ; begin
49580: LD_INT 0
49582: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49583: LD_ADDR_VAR 0 3
49587: PUSH
49588: LD_VAR 0 1
49592: PPUSH
49593: CALL_OW 255
49597: PPUSH
49598: LD_VAR 0 1
49602: PPUSH
49603: CALL_OW 250
49607: PPUSH
49608: LD_VAR 0 1
49612: PPUSH
49613: CALL_OW 251
49617: PPUSH
49618: LD_VAR 0 2
49622: PPUSH
49623: CALL 22953 0 4
49627: PUSH
49628: LD_INT 4
49630: ARRAY
49631: ST_TO_ADDR
// end ;
49632: LD_VAR 0 3
49636: RET
// export function PlayerSeeMe ( unit ) ; begin
49637: LD_INT 0
49639: PPUSH
// result := See ( your_side , unit ) ;
49640: LD_ADDR_VAR 0 2
49644: PUSH
49645: LD_OWVAR 2
49649: PPUSH
49650: LD_VAR 0 1
49654: PPUSH
49655: CALL_OW 292
49659: ST_TO_ADDR
// end ;
49660: LD_VAR 0 2
49664: RET
// export function ReverseDir ( unit ) ; begin
49665: LD_INT 0
49667: PPUSH
// if not unit then
49668: LD_VAR 0 1
49672: NOT
49673: IFFALSE 49677
// exit ;
49675: GO 49700
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49677: LD_ADDR_VAR 0 2
49681: PUSH
49682: LD_VAR 0 1
49686: PPUSH
49687: CALL_OW 254
49691: PUSH
49692: LD_INT 3
49694: PLUS
49695: PUSH
49696: LD_INT 6
49698: MOD
49699: ST_TO_ADDR
// end ;
49700: LD_VAR 0 2
49704: RET
// export function ReverseArray ( array ) ; var i ; begin
49705: LD_INT 0
49707: PPUSH
49708: PPUSH
// if not array then
49709: LD_VAR 0 1
49713: NOT
49714: IFFALSE 49718
// exit ;
49716: GO 49773
// result := [ ] ;
49718: LD_ADDR_VAR 0 2
49722: PUSH
49723: EMPTY
49724: ST_TO_ADDR
// for i := array downto 1 do
49725: LD_ADDR_VAR 0 3
49729: PUSH
49730: DOUBLE
49731: LD_VAR 0 1
49735: INC
49736: ST_TO_ADDR
49737: LD_INT 1
49739: PUSH
49740: FOR_DOWNTO
49741: IFFALSE 49771
// result := Join ( result , array [ i ] ) ;
49743: LD_ADDR_VAR 0 2
49747: PUSH
49748: LD_VAR 0 2
49752: PPUSH
49753: LD_VAR 0 1
49757: PUSH
49758: LD_VAR 0 3
49762: ARRAY
49763: PPUSH
49764: CALL 54438 0 2
49768: ST_TO_ADDR
49769: GO 49740
49771: POP
49772: POP
// end ;
49773: LD_VAR 0 2
49777: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49778: LD_INT 0
49780: PPUSH
49781: PPUSH
49782: PPUSH
49783: PPUSH
49784: PPUSH
49785: PPUSH
// if not unit or not hexes then
49786: LD_VAR 0 1
49790: NOT
49791: PUSH
49792: LD_VAR 0 2
49796: NOT
49797: OR
49798: IFFALSE 49802
// exit ;
49800: GO 49925
// dist := 9999 ;
49802: LD_ADDR_VAR 0 5
49806: PUSH
49807: LD_INT 9999
49809: ST_TO_ADDR
// for i = 1 to hexes do
49810: LD_ADDR_VAR 0 4
49814: PUSH
49815: DOUBLE
49816: LD_INT 1
49818: DEC
49819: ST_TO_ADDR
49820: LD_VAR 0 2
49824: PUSH
49825: FOR_TO
49826: IFFALSE 49913
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49828: LD_ADDR_VAR 0 6
49832: PUSH
49833: LD_VAR 0 1
49837: PPUSH
49838: LD_VAR 0 2
49842: PUSH
49843: LD_VAR 0 4
49847: ARRAY
49848: PUSH
49849: LD_INT 1
49851: ARRAY
49852: PPUSH
49853: LD_VAR 0 2
49857: PUSH
49858: LD_VAR 0 4
49862: ARRAY
49863: PUSH
49864: LD_INT 2
49866: ARRAY
49867: PPUSH
49868: CALL_OW 297
49872: ST_TO_ADDR
// if tdist < dist then
49873: LD_VAR 0 6
49877: PUSH
49878: LD_VAR 0 5
49882: LESS
49883: IFFALSE 49911
// begin hex := hexes [ i ] ;
49885: LD_ADDR_VAR 0 8
49889: PUSH
49890: LD_VAR 0 2
49894: PUSH
49895: LD_VAR 0 4
49899: ARRAY
49900: ST_TO_ADDR
// dist := tdist ;
49901: LD_ADDR_VAR 0 5
49905: PUSH
49906: LD_VAR 0 6
49910: ST_TO_ADDR
// end ; end ;
49911: GO 49825
49913: POP
49914: POP
// result := hex ;
49915: LD_ADDR_VAR 0 3
49919: PUSH
49920: LD_VAR 0 8
49924: ST_TO_ADDR
// end ;
49925: LD_VAR 0 3
49929: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49934: LD_VAR 0 1
49938: NOT
49939: PUSH
49940: LD_VAR 0 1
49944: PUSH
49945: LD_INT 21
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 23
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PPUSH
49969: CALL_OW 69
49973: IN
49974: NOT
49975: OR
49976: IFFALSE 49980
// exit ;
49978: GO 50027
// for i = 1 to 3 do
49980: LD_ADDR_VAR 0 3
49984: PUSH
49985: DOUBLE
49986: LD_INT 1
49988: DEC
49989: ST_TO_ADDR
49990: LD_INT 3
49992: PUSH
49993: FOR_TO
49994: IFFALSE 50025
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 250
50005: PPUSH
50006: LD_VAR 0 1
50010: PPUSH
50011: CALL_OW 251
50015: PPUSH
50016: LD_INT 1
50018: PPUSH
50019: CALL_OW 453
50023: GO 49993
50025: POP
50026: POP
// end ;
50027: LD_VAR 0 2
50031: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50032: LD_INT 0
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
// if not unit or not enemy_unit then
50040: LD_VAR 0 1
50044: NOT
50045: PUSH
50046: LD_VAR 0 2
50050: NOT
50051: OR
50052: IFFALSE 50056
// exit ;
50054: GO 50523
// if GetLives ( i ) < 250 then
50056: LD_VAR 0 4
50060: PPUSH
50061: CALL_OW 256
50065: PUSH
50066: LD_INT 250
50068: LESS
50069: IFFALSE 50082
// begin ComAutodestruct ( i ) ;
50071: LD_VAR 0 4
50075: PPUSH
50076: CALL 49930 0 1
// exit ;
50080: GO 50523
// end ; x := GetX ( enemy_unit ) ;
50082: LD_ADDR_VAR 0 7
50086: PUSH
50087: LD_VAR 0 2
50091: PPUSH
50092: CALL_OW 250
50096: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50097: LD_ADDR_VAR 0 8
50101: PUSH
50102: LD_VAR 0 2
50106: PPUSH
50107: CALL_OW 251
50111: ST_TO_ADDR
// if not x or not y then
50112: LD_VAR 0 7
50116: NOT
50117: PUSH
50118: LD_VAR 0 8
50122: NOT
50123: OR
50124: IFFALSE 50128
// exit ;
50126: GO 50523
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50128: LD_ADDR_VAR 0 6
50132: PUSH
50133: LD_VAR 0 7
50137: PPUSH
50138: LD_INT 0
50140: PPUSH
50141: LD_INT 4
50143: PPUSH
50144: CALL_OW 272
50148: PUSH
50149: LD_VAR 0 8
50153: PPUSH
50154: LD_INT 0
50156: PPUSH
50157: LD_INT 4
50159: PPUSH
50160: CALL_OW 273
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_VAR 0 7
50173: PPUSH
50174: LD_INT 1
50176: PPUSH
50177: LD_INT 4
50179: PPUSH
50180: CALL_OW 272
50184: PUSH
50185: LD_VAR 0 8
50189: PPUSH
50190: LD_INT 1
50192: PPUSH
50193: LD_INT 4
50195: PPUSH
50196: CALL_OW 273
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_VAR 0 7
50209: PPUSH
50210: LD_INT 2
50212: PPUSH
50213: LD_INT 4
50215: PPUSH
50216: CALL_OW 272
50220: PUSH
50221: LD_VAR 0 8
50225: PPUSH
50226: LD_INT 2
50228: PPUSH
50229: LD_INT 4
50231: PPUSH
50232: CALL_OW 273
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_VAR 0 7
50245: PPUSH
50246: LD_INT 3
50248: PPUSH
50249: LD_INT 4
50251: PPUSH
50252: CALL_OW 272
50256: PUSH
50257: LD_VAR 0 8
50261: PPUSH
50262: LD_INT 3
50264: PPUSH
50265: LD_INT 4
50267: PPUSH
50268: CALL_OW 273
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_VAR 0 7
50281: PPUSH
50282: LD_INT 4
50284: PPUSH
50285: LD_INT 4
50287: PPUSH
50288: CALL_OW 272
50292: PUSH
50293: LD_VAR 0 8
50297: PPUSH
50298: LD_INT 4
50300: PPUSH
50301: LD_INT 4
50303: PPUSH
50304: CALL_OW 273
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_VAR 0 7
50317: PPUSH
50318: LD_INT 5
50320: PPUSH
50321: LD_INT 4
50323: PPUSH
50324: CALL_OW 272
50328: PUSH
50329: LD_VAR 0 8
50333: PPUSH
50334: LD_INT 5
50336: PPUSH
50337: LD_INT 4
50339: PPUSH
50340: CALL_OW 273
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: ST_TO_ADDR
// for i = tmp downto 1 do
50357: LD_ADDR_VAR 0 4
50361: PUSH
50362: DOUBLE
50363: LD_VAR 0 6
50367: INC
50368: ST_TO_ADDR
50369: LD_INT 1
50371: PUSH
50372: FOR_DOWNTO
50373: IFFALSE 50474
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50375: LD_VAR 0 6
50379: PUSH
50380: LD_VAR 0 4
50384: ARRAY
50385: PUSH
50386: LD_INT 1
50388: ARRAY
50389: PPUSH
50390: LD_VAR 0 6
50394: PUSH
50395: LD_VAR 0 4
50399: ARRAY
50400: PUSH
50401: LD_INT 2
50403: ARRAY
50404: PPUSH
50405: CALL_OW 488
50409: NOT
50410: PUSH
50411: LD_VAR 0 6
50415: PUSH
50416: LD_VAR 0 4
50420: ARRAY
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PPUSH
50426: LD_VAR 0 6
50430: PUSH
50431: LD_VAR 0 4
50435: ARRAY
50436: PUSH
50437: LD_INT 2
50439: ARRAY
50440: PPUSH
50441: CALL_OW 428
50445: PUSH
50446: LD_INT 0
50448: NONEQUAL
50449: OR
50450: IFFALSE 50472
// tmp := Delete ( tmp , i ) ;
50452: LD_ADDR_VAR 0 6
50456: PUSH
50457: LD_VAR 0 6
50461: PPUSH
50462: LD_VAR 0 4
50466: PPUSH
50467: CALL_OW 3
50471: ST_TO_ADDR
50472: GO 50372
50474: POP
50475: POP
// j := GetClosestHex ( unit , tmp ) ;
50476: LD_ADDR_VAR 0 5
50480: PUSH
50481: LD_VAR 0 1
50485: PPUSH
50486: LD_VAR 0 6
50490: PPUSH
50491: CALL 49778 0 2
50495: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50496: LD_VAR 0 1
50500: PPUSH
50501: LD_VAR 0 5
50505: PUSH
50506: LD_INT 1
50508: ARRAY
50509: PPUSH
50510: LD_VAR 0 5
50514: PUSH
50515: LD_INT 2
50517: ARRAY
50518: PPUSH
50519: CALL_OW 111
// end ;
50523: LD_VAR 0 3
50527: RET
// export function PrepareApemanSoldier ( ) ; begin
50528: LD_INT 0
50530: PPUSH
// uc_nation := 0 ;
50531: LD_ADDR_OWVAR 21
50535: PUSH
50536: LD_INT 0
50538: ST_TO_ADDR
// hc_sex := sex_male ;
50539: LD_ADDR_OWVAR 27
50543: PUSH
50544: LD_INT 1
50546: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50547: LD_ADDR_OWVAR 28
50551: PUSH
50552: LD_INT 15
50554: ST_TO_ADDR
// hc_gallery :=  ;
50555: LD_ADDR_OWVAR 33
50559: PUSH
50560: LD_STRING 
50562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50563: LD_ADDR_OWVAR 31
50567: PUSH
50568: LD_INT 0
50570: PPUSH
50571: LD_INT 3
50573: PPUSH
50574: CALL_OW 12
50578: PUSH
50579: LD_INT 0
50581: PPUSH
50582: LD_INT 3
50584: PPUSH
50585: CALL_OW 12
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: ST_TO_ADDR
// end ;
50602: LD_VAR 0 1
50606: RET
// export function PrepareApemanEngineer ( ) ; begin
50607: LD_INT 0
50609: PPUSH
// uc_nation := 0 ;
50610: LD_ADDR_OWVAR 21
50614: PUSH
50615: LD_INT 0
50617: ST_TO_ADDR
// hc_sex := sex_male ;
50618: LD_ADDR_OWVAR 27
50622: PUSH
50623: LD_INT 1
50625: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50626: LD_ADDR_OWVAR 28
50630: PUSH
50631: LD_INT 16
50633: ST_TO_ADDR
// hc_gallery :=  ;
50634: LD_ADDR_OWVAR 33
50638: PUSH
50639: LD_STRING 
50641: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50642: LD_ADDR_OWVAR 31
50646: PUSH
50647: LD_INT 0
50649: PPUSH
50650: LD_INT 3
50652: PPUSH
50653: CALL_OW 12
50657: PUSH
50658: LD_INT 0
50660: PPUSH
50661: LD_INT 3
50663: PPUSH
50664: CALL_OW 12
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// end ;
50681: LD_VAR 0 1
50685: RET
// export function PrepareApeman ( agressivity ) ; begin
50686: LD_INT 0
50688: PPUSH
// uc_side := 0 ;
50689: LD_ADDR_OWVAR 20
50693: PUSH
50694: LD_INT 0
50696: ST_TO_ADDR
// uc_nation := 0 ;
50697: LD_ADDR_OWVAR 21
50701: PUSH
50702: LD_INT 0
50704: ST_TO_ADDR
// hc_sex := sex_male ;
50705: LD_ADDR_OWVAR 27
50709: PUSH
50710: LD_INT 1
50712: ST_TO_ADDR
// hc_class := class_apeman ;
50713: LD_ADDR_OWVAR 28
50717: PUSH
50718: LD_INT 12
50720: ST_TO_ADDR
// hc_gallery :=  ;
50721: LD_ADDR_OWVAR 33
50725: PUSH
50726: LD_STRING 
50728: ST_TO_ADDR
// if agressivity = 0 then
50729: LD_VAR 0 1
50733: PUSH
50734: LD_INT 0
50736: EQUAL
50737: IFFALSE 50749
// hc_agressivity := 0 else
50739: LD_ADDR_OWVAR 35
50743: PUSH
50744: LD_INT 0
50746: ST_TO_ADDR
50747: GO 50770
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50749: LD_ADDR_OWVAR 35
50753: PUSH
50754: LD_VAR 0 1
50758: NEG
50759: PPUSH
50760: LD_VAR 0 1
50764: PPUSH
50765: CALL_OW 12
50769: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50770: LD_ADDR_OWVAR 31
50774: PUSH
50775: LD_INT 0
50777: PPUSH
50778: LD_INT 3
50780: PPUSH
50781: CALL_OW 12
50785: PUSH
50786: LD_INT 0
50788: PPUSH
50789: LD_INT 3
50791: PPUSH
50792: CALL_OW 12
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: ST_TO_ADDR
// end ;
50809: LD_VAR 0 2
50813: RET
// export function PrepareTiger ( agressivity ) ; begin
50814: LD_INT 0
50816: PPUSH
// uc_side := 0 ;
50817: LD_ADDR_OWVAR 20
50821: PUSH
50822: LD_INT 0
50824: ST_TO_ADDR
// uc_nation := 0 ;
50825: LD_ADDR_OWVAR 21
50829: PUSH
50830: LD_INT 0
50832: ST_TO_ADDR
// hc_class := class_tiger ;
50833: LD_ADDR_OWVAR 28
50837: PUSH
50838: LD_INT 14
50840: ST_TO_ADDR
// hc_gallery :=  ;
50841: LD_ADDR_OWVAR 33
50845: PUSH
50846: LD_STRING 
50848: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50849: LD_ADDR_OWVAR 35
50853: PUSH
50854: LD_VAR 0 1
50858: NEG
50859: PPUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: CALL_OW 12
50869: ST_TO_ADDR
// end ;
50870: LD_VAR 0 2
50874: RET
// export function PrepareEnchidna ( ) ; begin
50875: LD_INT 0
50877: PPUSH
// uc_side := 0 ;
50878: LD_ADDR_OWVAR 20
50882: PUSH
50883: LD_INT 0
50885: ST_TO_ADDR
// uc_nation := 0 ;
50886: LD_ADDR_OWVAR 21
50890: PUSH
50891: LD_INT 0
50893: ST_TO_ADDR
// hc_class := class_baggie ;
50894: LD_ADDR_OWVAR 28
50898: PUSH
50899: LD_INT 13
50901: ST_TO_ADDR
// hc_gallery :=  ;
50902: LD_ADDR_OWVAR 33
50906: PUSH
50907: LD_STRING 
50909: ST_TO_ADDR
// end ;
50910: LD_VAR 0 1
50914: RET
// export function PrepareFrog ( ) ; begin
50915: LD_INT 0
50917: PPUSH
// uc_side := 0 ;
50918: LD_ADDR_OWVAR 20
50922: PUSH
50923: LD_INT 0
50925: ST_TO_ADDR
// uc_nation := 0 ;
50926: LD_ADDR_OWVAR 21
50930: PUSH
50931: LD_INT 0
50933: ST_TO_ADDR
// hc_class := class_frog ;
50934: LD_ADDR_OWVAR 28
50938: PUSH
50939: LD_INT 19
50941: ST_TO_ADDR
// hc_gallery :=  ;
50942: LD_ADDR_OWVAR 33
50946: PUSH
50947: LD_STRING 
50949: ST_TO_ADDR
// end ;
50950: LD_VAR 0 1
50954: RET
// export function PrepareFish ( ) ; begin
50955: LD_INT 0
50957: PPUSH
// uc_side := 0 ;
50958: LD_ADDR_OWVAR 20
50962: PUSH
50963: LD_INT 0
50965: ST_TO_ADDR
// uc_nation := 0 ;
50966: LD_ADDR_OWVAR 21
50970: PUSH
50971: LD_INT 0
50973: ST_TO_ADDR
// hc_class := class_fish ;
50974: LD_ADDR_OWVAR 28
50978: PUSH
50979: LD_INT 20
50981: ST_TO_ADDR
// hc_gallery :=  ;
50982: LD_ADDR_OWVAR 33
50986: PUSH
50987: LD_STRING 
50989: ST_TO_ADDR
// end ;
50990: LD_VAR 0 1
50994: RET
// export function PrepareBird ( ) ; begin
50995: LD_INT 0
50997: PPUSH
// uc_side := 0 ;
50998: LD_ADDR_OWVAR 20
51002: PUSH
51003: LD_INT 0
51005: ST_TO_ADDR
// uc_nation := 0 ;
51006: LD_ADDR_OWVAR 21
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
// hc_class := class_phororhacos ;
51014: LD_ADDR_OWVAR 28
51018: PUSH
51019: LD_INT 18
51021: ST_TO_ADDR
// hc_gallery :=  ;
51022: LD_ADDR_OWVAR 33
51026: PUSH
51027: LD_STRING 
51029: ST_TO_ADDR
// end ;
51030: LD_VAR 0 1
51034: RET
// export function PrepareHorse ( ) ; begin
51035: LD_INT 0
51037: PPUSH
// uc_side := 0 ;
51038: LD_ADDR_OWVAR 20
51042: PUSH
51043: LD_INT 0
51045: ST_TO_ADDR
// uc_nation := 0 ;
51046: LD_ADDR_OWVAR 21
51050: PUSH
51051: LD_INT 0
51053: ST_TO_ADDR
// hc_class := class_horse ;
51054: LD_ADDR_OWVAR 28
51058: PUSH
51059: LD_INT 21
51061: ST_TO_ADDR
// hc_gallery :=  ;
51062: LD_ADDR_OWVAR 33
51066: PUSH
51067: LD_STRING 
51069: ST_TO_ADDR
// end ;
51070: LD_VAR 0 1
51074: RET
// export function PrepareMastodont ( ) ; begin
51075: LD_INT 0
51077: PPUSH
// uc_side := 0 ;
51078: LD_ADDR_OWVAR 20
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
// uc_nation := 0 ;
51086: LD_ADDR_OWVAR 21
51090: PUSH
51091: LD_INT 0
51093: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51094: LD_ADDR_OWVAR 37
51098: PUSH
51099: LD_INT 31
51101: ST_TO_ADDR
// vc_control := control_rider ;
51102: LD_ADDR_OWVAR 38
51106: PUSH
51107: LD_INT 4
51109: ST_TO_ADDR
// end ;
51110: LD_VAR 0 1
51114: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51115: LD_INT 0
51117: PPUSH
51118: PPUSH
51119: PPUSH
// uc_side = 0 ;
51120: LD_ADDR_OWVAR 20
51124: PUSH
51125: LD_INT 0
51127: ST_TO_ADDR
// uc_nation = 0 ;
51128: LD_ADDR_OWVAR 21
51132: PUSH
51133: LD_INT 0
51135: ST_TO_ADDR
// InitHc_All ( ) ;
51136: CALL_OW 584
// InitVc ;
51140: CALL_OW 20
// if mastodonts then
51144: LD_VAR 0 6
51148: IFFALSE 51215
// for i = 1 to mastodonts do
51150: LD_ADDR_VAR 0 11
51154: PUSH
51155: DOUBLE
51156: LD_INT 1
51158: DEC
51159: ST_TO_ADDR
51160: LD_VAR 0 6
51164: PUSH
51165: FOR_TO
51166: IFFALSE 51213
// begin vc_chassis := 31 ;
51168: LD_ADDR_OWVAR 37
51172: PUSH
51173: LD_INT 31
51175: ST_TO_ADDR
// vc_control := control_rider ;
51176: LD_ADDR_OWVAR 38
51180: PUSH
51181: LD_INT 4
51183: ST_TO_ADDR
// animal := CreateVehicle ;
51184: LD_ADDR_VAR 0 12
51188: PUSH
51189: CALL_OW 45
51193: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51194: LD_VAR 0 12
51198: PPUSH
51199: LD_VAR 0 8
51203: PPUSH
51204: LD_INT 0
51206: PPUSH
51207: CALL 53343 0 3
// end ;
51211: GO 51165
51213: POP
51214: POP
// if horses then
51215: LD_VAR 0 5
51219: IFFALSE 51286
// for i = 1 to horses do
51221: LD_ADDR_VAR 0 11
51225: PUSH
51226: DOUBLE
51227: LD_INT 1
51229: DEC
51230: ST_TO_ADDR
51231: LD_VAR 0 5
51235: PUSH
51236: FOR_TO
51237: IFFALSE 51284
// begin hc_class := 21 ;
51239: LD_ADDR_OWVAR 28
51243: PUSH
51244: LD_INT 21
51246: ST_TO_ADDR
// hc_gallery :=  ;
51247: LD_ADDR_OWVAR 33
51251: PUSH
51252: LD_STRING 
51254: ST_TO_ADDR
// animal := CreateHuman ;
51255: LD_ADDR_VAR 0 12
51259: PUSH
51260: CALL_OW 44
51264: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51265: LD_VAR 0 12
51269: PPUSH
51270: LD_VAR 0 8
51274: PPUSH
51275: LD_INT 0
51277: PPUSH
51278: CALL 53343 0 3
// end ;
51282: GO 51236
51284: POP
51285: POP
// if birds then
51286: LD_VAR 0 1
51290: IFFALSE 51357
// for i = 1 to birds do
51292: LD_ADDR_VAR 0 11
51296: PUSH
51297: DOUBLE
51298: LD_INT 1
51300: DEC
51301: ST_TO_ADDR
51302: LD_VAR 0 1
51306: PUSH
51307: FOR_TO
51308: IFFALSE 51355
// begin hc_class := 18 ;
51310: LD_ADDR_OWVAR 28
51314: PUSH
51315: LD_INT 18
51317: ST_TO_ADDR
// hc_gallery =  ;
51318: LD_ADDR_OWVAR 33
51322: PUSH
51323: LD_STRING 
51325: ST_TO_ADDR
// animal := CreateHuman ;
51326: LD_ADDR_VAR 0 12
51330: PUSH
51331: CALL_OW 44
51335: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51336: LD_VAR 0 12
51340: PPUSH
51341: LD_VAR 0 8
51345: PPUSH
51346: LD_INT 0
51348: PPUSH
51349: CALL 53343 0 3
// end ;
51353: GO 51307
51355: POP
51356: POP
// if tigers then
51357: LD_VAR 0 2
51361: IFFALSE 51445
// for i = 1 to tigers do
51363: LD_ADDR_VAR 0 11
51367: PUSH
51368: DOUBLE
51369: LD_INT 1
51371: DEC
51372: ST_TO_ADDR
51373: LD_VAR 0 2
51377: PUSH
51378: FOR_TO
51379: IFFALSE 51443
// begin hc_class = class_tiger ;
51381: LD_ADDR_OWVAR 28
51385: PUSH
51386: LD_INT 14
51388: ST_TO_ADDR
// hc_gallery =  ;
51389: LD_ADDR_OWVAR 33
51393: PUSH
51394: LD_STRING 
51396: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51397: LD_ADDR_OWVAR 35
51401: PUSH
51402: LD_INT 7
51404: NEG
51405: PPUSH
51406: LD_INT 7
51408: PPUSH
51409: CALL_OW 12
51413: ST_TO_ADDR
// animal := CreateHuman ;
51414: LD_ADDR_VAR 0 12
51418: PUSH
51419: CALL_OW 44
51423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51424: LD_VAR 0 12
51428: PPUSH
51429: LD_VAR 0 8
51433: PPUSH
51434: LD_INT 0
51436: PPUSH
51437: CALL 53343 0 3
// end ;
51441: GO 51378
51443: POP
51444: POP
// if apemans then
51445: LD_VAR 0 3
51449: IFFALSE 51572
// for i = 1 to apemans do
51451: LD_ADDR_VAR 0 11
51455: PUSH
51456: DOUBLE
51457: LD_INT 1
51459: DEC
51460: ST_TO_ADDR
51461: LD_VAR 0 3
51465: PUSH
51466: FOR_TO
51467: IFFALSE 51570
// begin hc_class = class_apeman ;
51469: LD_ADDR_OWVAR 28
51473: PUSH
51474: LD_INT 12
51476: ST_TO_ADDR
// hc_gallery =  ;
51477: LD_ADDR_OWVAR 33
51481: PUSH
51482: LD_STRING 
51484: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51485: LD_ADDR_OWVAR 35
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PPUSH
51494: LD_INT 2
51496: PPUSH
51497: CALL_OW 12
51501: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51502: LD_ADDR_OWVAR 31
51506: PUSH
51507: LD_INT 1
51509: PPUSH
51510: LD_INT 3
51512: PPUSH
51513: CALL_OW 12
51517: PUSH
51518: LD_INT 1
51520: PPUSH
51521: LD_INT 3
51523: PPUSH
51524: CALL_OW 12
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// animal := CreateHuman ;
51541: LD_ADDR_VAR 0 12
51545: PUSH
51546: CALL_OW 44
51550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51551: LD_VAR 0 12
51555: PPUSH
51556: LD_VAR 0 8
51560: PPUSH
51561: LD_INT 0
51563: PPUSH
51564: CALL 53343 0 3
// end ;
51568: GO 51466
51570: POP
51571: POP
// if enchidnas then
51572: LD_VAR 0 4
51576: IFFALSE 51643
// for i = 1 to enchidnas do
51578: LD_ADDR_VAR 0 11
51582: PUSH
51583: DOUBLE
51584: LD_INT 1
51586: DEC
51587: ST_TO_ADDR
51588: LD_VAR 0 4
51592: PUSH
51593: FOR_TO
51594: IFFALSE 51641
// begin hc_class = 13 ;
51596: LD_ADDR_OWVAR 28
51600: PUSH
51601: LD_INT 13
51603: ST_TO_ADDR
// hc_gallery =  ;
51604: LD_ADDR_OWVAR 33
51608: PUSH
51609: LD_STRING 
51611: ST_TO_ADDR
// animal := CreateHuman ;
51612: LD_ADDR_VAR 0 12
51616: PUSH
51617: CALL_OW 44
51621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51622: LD_VAR 0 12
51626: PPUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_INT 0
51634: PPUSH
51635: CALL 53343 0 3
// end ;
51639: GO 51593
51641: POP
51642: POP
// if fishes then
51643: LD_VAR 0 7
51647: IFFALSE 51714
// for i = 1 to fishes do
51649: LD_ADDR_VAR 0 11
51653: PUSH
51654: DOUBLE
51655: LD_INT 1
51657: DEC
51658: ST_TO_ADDR
51659: LD_VAR 0 7
51663: PUSH
51664: FOR_TO
51665: IFFALSE 51712
// begin hc_class = 20 ;
51667: LD_ADDR_OWVAR 28
51671: PUSH
51672: LD_INT 20
51674: ST_TO_ADDR
// hc_gallery =  ;
51675: LD_ADDR_OWVAR 33
51679: PUSH
51680: LD_STRING 
51682: ST_TO_ADDR
// animal := CreateHuman ;
51683: LD_ADDR_VAR 0 12
51687: PUSH
51688: CALL_OW 44
51692: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51693: LD_VAR 0 12
51697: PPUSH
51698: LD_VAR 0 9
51702: PPUSH
51703: LD_INT 0
51705: PPUSH
51706: CALL 53343 0 3
// end ;
51710: GO 51664
51712: POP
51713: POP
// end ;
51714: LD_VAR 0 10
51718: RET
// export function WantHeal ( sci , unit ) ; begin
51719: LD_INT 0
51721: PPUSH
// if GetTaskList ( sci ) > 0 then
51722: LD_VAR 0 1
51726: PPUSH
51727: CALL_OW 437
51731: PUSH
51732: LD_INT 0
51734: GREATER
51735: IFFALSE 51805
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51737: LD_VAR 0 1
51741: PPUSH
51742: CALL_OW 437
51746: PUSH
51747: LD_INT 1
51749: ARRAY
51750: PUSH
51751: LD_INT 1
51753: ARRAY
51754: PUSH
51755: LD_STRING l
51757: EQUAL
51758: PUSH
51759: LD_VAR 0 1
51763: PPUSH
51764: CALL_OW 437
51768: PUSH
51769: LD_INT 1
51771: ARRAY
51772: PUSH
51773: LD_INT 4
51775: ARRAY
51776: PUSH
51777: LD_VAR 0 2
51781: EQUAL
51782: AND
51783: IFFALSE 51795
// result := true else
51785: LD_ADDR_VAR 0 3
51789: PUSH
51790: LD_INT 1
51792: ST_TO_ADDR
51793: GO 51803
// result := false ;
51795: LD_ADDR_VAR 0 3
51799: PUSH
51800: LD_INT 0
51802: ST_TO_ADDR
// end else
51803: GO 51813
// result := false ;
51805: LD_ADDR_VAR 0 3
51809: PUSH
51810: LD_INT 0
51812: ST_TO_ADDR
// end ;
51813: LD_VAR 0 3
51817: RET
// export function HealTarget ( sci ) ; begin
51818: LD_INT 0
51820: PPUSH
// if not sci then
51821: LD_VAR 0 1
51825: NOT
51826: IFFALSE 51830
// exit ;
51828: GO 51895
// result := 0 ;
51830: LD_ADDR_VAR 0 2
51834: PUSH
51835: LD_INT 0
51837: ST_TO_ADDR
// if GetTaskList ( sci ) then
51838: LD_VAR 0 1
51842: PPUSH
51843: CALL_OW 437
51847: IFFALSE 51895
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51849: LD_VAR 0 1
51853: PPUSH
51854: CALL_OW 437
51858: PUSH
51859: LD_INT 1
51861: ARRAY
51862: PUSH
51863: LD_INT 1
51865: ARRAY
51866: PUSH
51867: LD_STRING l
51869: EQUAL
51870: IFFALSE 51895
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51872: LD_ADDR_VAR 0 2
51876: PUSH
51877: LD_VAR 0 1
51881: PPUSH
51882: CALL_OW 437
51886: PUSH
51887: LD_INT 1
51889: ARRAY
51890: PUSH
51891: LD_INT 4
51893: ARRAY
51894: ST_TO_ADDR
// end ;
51895: LD_VAR 0 2
51899: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51900: LD_INT 0
51902: PPUSH
51903: PPUSH
51904: PPUSH
51905: PPUSH
// if not base_units then
51906: LD_VAR 0 1
51910: NOT
51911: IFFALSE 51915
// exit ;
51913: GO 52002
// result := false ;
51915: LD_ADDR_VAR 0 2
51919: PUSH
51920: LD_INT 0
51922: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51923: LD_ADDR_VAR 0 5
51927: PUSH
51928: LD_VAR 0 1
51932: PPUSH
51933: LD_INT 21
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PPUSH
51943: CALL_OW 72
51947: ST_TO_ADDR
// if not tmp then
51948: LD_VAR 0 5
51952: NOT
51953: IFFALSE 51957
// exit ;
51955: GO 52002
// for i in tmp do
51957: LD_ADDR_VAR 0 3
51961: PUSH
51962: LD_VAR 0 5
51966: PUSH
51967: FOR_IN
51968: IFFALSE 52000
// begin result := EnemyInRange ( i , 22 ) ;
51970: LD_ADDR_VAR 0 2
51974: PUSH
51975: LD_VAR 0 3
51979: PPUSH
51980: LD_INT 22
51982: PPUSH
51983: CALL 49580 0 2
51987: ST_TO_ADDR
// if result then
51988: LD_VAR 0 2
51992: IFFALSE 51998
// exit ;
51994: POP
51995: POP
51996: GO 52002
// end ;
51998: GO 51967
52000: POP
52001: POP
// end ;
52002: LD_VAR 0 2
52006: RET
// export function FilterByTag ( units , tag ) ; begin
52007: LD_INT 0
52009: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52010: LD_ADDR_VAR 0 3
52014: PUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: LD_INT 120
52022: PUSH
52023: LD_VAR 0 2
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PPUSH
52032: CALL_OW 72
52036: ST_TO_ADDR
// end ;
52037: LD_VAR 0 3
52041: RET
// export function IsDriver ( un ) ; begin
52042: LD_INT 0
52044: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52045: LD_ADDR_VAR 0 2
52049: PUSH
52050: LD_VAR 0 1
52054: PUSH
52055: LD_INT 55
52057: PUSH
52058: EMPTY
52059: LIST
52060: PPUSH
52061: CALL_OW 69
52065: IN
52066: ST_TO_ADDR
// end ;
52067: LD_VAR 0 2
52071: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52072: LD_INT 0
52074: PPUSH
52075: PPUSH
// list := [ ] ;
52076: LD_ADDR_VAR 0 5
52080: PUSH
52081: EMPTY
52082: ST_TO_ADDR
// case d of 0 :
52083: LD_VAR 0 3
52087: PUSH
52088: LD_INT 0
52090: DOUBLE
52091: EQUAL
52092: IFTRUE 52096
52094: GO 52229
52096: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52097: LD_ADDR_VAR 0 5
52101: PUSH
52102: LD_VAR 0 1
52106: PUSH
52107: LD_INT 4
52109: MINUS
52110: PUSH
52111: LD_VAR 0 2
52115: PUSH
52116: LD_INT 4
52118: MINUS
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: PUSH
52128: LD_VAR 0 1
52132: PUSH
52133: LD_INT 3
52135: MINUS
52136: PUSH
52137: LD_VAR 0 2
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: PUSH
52150: LD_VAR 0 1
52154: PUSH
52155: LD_INT 4
52157: PLUS
52158: PUSH
52159: LD_VAR 0 2
52163: PUSH
52164: LD_INT 4
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: PUSH
52172: LD_VAR 0 1
52176: PUSH
52177: LD_INT 3
52179: PLUS
52180: PUSH
52181: LD_VAR 0 2
52185: PUSH
52186: LD_INT 3
52188: PLUS
52189: PUSH
52190: LD_INT 5
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: LD_VAR 0 1
52202: PUSH
52203: LD_VAR 0 2
52207: PUSH
52208: LD_INT 4
52210: PLUS
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// end ; 1 :
52227: GO 52927
52229: LD_INT 1
52231: DOUBLE
52232: EQUAL
52233: IFTRUE 52237
52235: GO 52370
52237: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52238: LD_ADDR_VAR 0 5
52242: PUSH
52243: LD_VAR 0 1
52247: PUSH
52248: LD_VAR 0 2
52252: PUSH
52253: LD_INT 4
52255: MINUS
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: PUSH
52265: LD_VAR 0 1
52269: PUSH
52270: LD_INT 3
52272: MINUS
52273: PUSH
52274: LD_VAR 0 2
52278: PUSH
52279: LD_INT 3
52281: MINUS
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: PUSH
52291: LD_VAR 0 1
52295: PUSH
52296: LD_INT 4
52298: MINUS
52299: PUSH
52300: LD_VAR 0 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: PUSH
52313: LD_VAR 0 1
52317: PUSH
52318: LD_VAR 0 2
52322: PUSH
52323: LD_INT 3
52325: PLUS
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: PUSH
52335: LD_VAR 0 1
52339: PUSH
52340: LD_INT 4
52342: PLUS
52343: PUSH
52344: LD_VAR 0 2
52348: PUSH
52349: LD_INT 4
52351: PLUS
52352: PUSH
52353: LD_INT 5
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// end ; 2 :
52368: GO 52927
52370: LD_INT 2
52372: DOUBLE
52373: EQUAL
52374: IFTRUE 52378
52376: GO 52507
52378: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52379: LD_ADDR_VAR 0 5
52383: PUSH
52384: LD_VAR 0 1
52388: PUSH
52389: LD_VAR 0 2
52393: PUSH
52394: LD_INT 3
52396: MINUS
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: PUSH
52406: LD_VAR 0 1
52410: PUSH
52411: LD_INT 4
52413: PLUS
52414: PUSH
52415: LD_VAR 0 2
52419: PUSH
52420: LD_INT 4
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: LIST
52427: PUSH
52428: LD_VAR 0 1
52432: PUSH
52433: LD_VAR 0 2
52437: PUSH
52438: LD_INT 4
52440: PLUS
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: PUSH
52450: LD_VAR 0 1
52454: PUSH
52455: LD_INT 3
52457: MINUS
52458: PUSH
52459: LD_VAR 0 2
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: PUSH
52472: LD_VAR 0 1
52476: PUSH
52477: LD_INT 4
52479: MINUS
52480: PUSH
52481: LD_VAR 0 2
52485: PUSH
52486: LD_INT 4
52488: MINUS
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: ST_TO_ADDR
// end ; 3 :
52505: GO 52927
52507: LD_INT 3
52509: DOUBLE
52510: EQUAL
52511: IFTRUE 52515
52513: GO 52648
52515: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52516: LD_ADDR_VAR 0 5
52520: PUSH
52521: LD_VAR 0 1
52525: PUSH
52526: LD_INT 3
52528: PLUS
52529: PUSH
52530: LD_VAR 0 2
52534: PUSH
52535: LD_INT 4
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: PUSH
52543: LD_VAR 0 1
52547: PUSH
52548: LD_INT 4
52550: PLUS
52551: PUSH
52552: LD_VAR 0 2
52556: PUSH
52557: LD_INT 4
52559: PLUS
52560: PUSH
52561: LD_INT 5
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: PUSH
52569: LD_VAR 0 1
52573: PUSH
52574: LD_INT 4
52576: MINUS
52577: PUSH
52578: LD_VAR 0 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: PUSH
52591: LD_VAR 0 1
52595: PUSH
52596: LD_VAR 0 2
52600: PUSH
52601: LD_INT 4
52603: MINUS
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: PUSH
52613: LD_VAR 0 1
52617: PUSH
52618: LD_INT 3
52620: MINUS
52621: PUSH
52622: LD_VAR 0 2
52626: PUSH
52627: LD_INT 3
52629: MINUS
52630: PUSH
52631: LD_INT 2
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// end ; 4 :
52646: GO 52927
52648: LD_INT 4
52650: DOUBLE
52651: EQUAL
52652: IFTRUE 52656
52654: GO 52789
52656: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52657: LD_ADDR_VAR 0 5
52661: PUSH
52662: LD_VAR 0 1
52666: PUSH
52667: LD_VAR 0 2
52671: PUSH
52672: LD_INT 4
52674: PLUS
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: PUSH
52684: LD_VAR 0 1
52688: PUSH
52689: LD_INT 3
52691: PLUS
52692: PUSH
52693: LD_VAR 0 2
52697: PUSH
52698: LD_INT 3
52700: PLUS
52701: PUSH
52702: LD_INT 5
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: LIST
52709: PUSH
52710: LD_VAR 0 1
52714: PUSH
52715: LD_INT 4
52717: PLUS
52718: PUSH
52719: LD_VAR 0 2
52723: PUSH
52724: LD_INT 4
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: LIST
52731: PUSH
52732: LD_VAR 0 1
52736: PUSH
52737: LD_VAR 0 2
52741: PUSH
52742: LD_INT 3
52744: MINUS
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: PUSH
52754: LD_VAR 0 1
52758: PUSH
52759: LD_INT 4
52761: MINUS
52762: PUSH
52763: LD_VAR 0 2
52767: PUSH
52768: LD_INT 4
52770: MINUS
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// end ; 5 :
52787: GO 52927
52789: LD_INT 5
52791: DOUBLE
52792: EQUAL
52793: IFTRUE 52797
52795: GO 52926
52797: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52798: LD_ADDR_VAR 0 5
52802: PUSH
52803: LD_VAR 0 1
52807: PUSH
52808: LD_INT 4
52810: MINUS
52811: PUSH
52812: LD_VAR 0 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: LIST
52824: PUSH
52825: LD_VAR 0 1
52829: PUSH
52830: LD_VAR 0 2
52834: PUSH
52835: LD_INT 4
52837: MINUS
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: LIST
52846: PUSH
52847: LD_VAR 0 1
52851: PUSH
52852: LD_INT 4
52854: PLUS
52855: PUSH
52856: LD_VAR 0 2
52860: PUSH
52861: LD_INT 4
52863: PLUS
52864: PUSH
52865: LD_INT 5
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: LIST
52872: PUSH
52873: LD_VAR 0 1
52877: PUSH
52878: LD_INT 3
52880: PLUS
52881: PUSH
52882: LD_VAR 0 2
52886: PUSH
52887: LD_INT 4
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: PUSH
52895: LD_VAR 0 1
52899: PUSH
52900: LD_VAR 0 2
52904: PUSH
52905: LD_INT 3
52907: PLUS
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// end ; end ;
52924: GO 52927
52926: POP
// result := list ;
52927: LD_ADDR_VAR 0 4
52931: PUSH
52932: LD_VAR 0 5
52936: ST_TO_ADDR
// end ;
52937: LD_VAR 0 4
52941: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52942: LD_INT 0
52944: PPUSH
52945: PPUSH
52946: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52947: LD_VAR 0 1
52951: NOT
52952: PUSH
52953: LD_VAR 0 2
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: LD_INT 4
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: IN
52976: NOT
52977: OR
52978: IFFALSE 52982
// exit ;
52980: GO 53065
// tmp := [ ] ;
52982: LD_ADDR_VAR 0 5
52986: PUSH
52987: EMPTY
52988: ST_TO_ADDR
// for i in units do
52989: LD_ADDR_VAR 0 4
52993: PUSH
52994: LD_VAR 0 1
52998: PUSH
52999: FOR_IN
53000: IFFALSE 53034
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53002: LD_ADDR_VAR 0 5
53006: PUSH
53007: LD_VAR 0 5
53011: PPUSH
53012: LD_VAR 0 4
53016: PPUSH
53017: LD_VAR 0 2
53021: PPUSH
53022: CALL_OW 259
53026: PPUSH
53027: CALL 54438 0 2
53031: ST_TO_ADDR
53032: GO 52999
53034: POP
53035: POP
// if not tmp then
53036: LD_VAR 0 5
53040: NOT
53041: IFFALSE 53045
// exit ;
53043: GO 53065
// result := SortListByListDesc ( units , tmp ) ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_VAR 0 1
53054: PPUSH
53055: LD_VAR 0 5
53059: PPUSH
53060: CALL_OW 77
53064: ST_TO_ADDR
// end ;
53065: LD_VAR 0 3
53069: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53070: LD_INT 0
53072: PPUSH
53073: PPUSH
53074: PPUSH
// result := false ;
53075: LD_ADDR_VAR 0 3
53079: PUSH
53080: LD_INT 0
53082: ST_TO_ADDR
// if not building then
53083: LD_VAR 0 2
53087: NOT
53088: IFFALSE 53092
// exit ;
53090: GO 53230
// x := GetX ( building ) ;
53092: LD_ADDR_VAR 0 4
53096: PUSH
53097: LD_VAR 0 2
53101: PPUSH
53102: CALL_OW 250
53106: ST_TO_ADDR
// y := GetY ( building ) ;
53107: LD_ADDR_VAR 0 5
53111: PUSH
53112: LD_VAR 0 2
53116: PPUSH
53117: CALL_OW 251
53121: ST_TO_ADDR
// if not x or not y then
53122: LD_VAR 0 4
53126: NOT
53127: PUSH
53128: LD_VAR 0 5
53132: NOT
53133: OR
53134: IFFALSE 53138
// exit ;
53136: GO 53230
// if GetTaskList ( unit ) then
53138: LD_VAR 0 1
53142: PPUSH
53143: CALL_OW 437
53147: IFFALSE 53230
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53149: LD_STRING e
53151: PUSH
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 437
53161: PUSH
53162: LD_INT 1
53164: ARRAY
53165: PUSH
53166: LD_INT 1
53168: ARRAY
53169: EQUAL
53170: PUSH
53171: LD_VAR 0 4
53175: PUSH
53176: LD_VAR 0 1
53180: PPUSH
53181: CALL_OW 437
53185: PUSH
53186: LD_INT 1
53188: ARRAY
53189: PUSH
53190: LD_INT 2
53192: ARRAY
53193: EQUAL
53194: AND
53195: PUSH
53196: LD_VAR 0 5
53200: PUSH
53201: LD_VAR 0 1
53205: PPUSH
53206: CALL_OW 437
53210: PUSH
53211: LD_INT 1
53213: ARRAY
53214: PUSH
53215: LD_INT 3
53217: ARRAY
53218: EQUAL
53219: AND
53220: IFFALSE 53230
// result := true end ;
53222: LD_ADDR_VAR 0 3
53226: PUSH
53227: LD_INT 1
53229: ST_TO_ADDR
// end ;
53230: LD_VAR 0 3
53234: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53235: LD_INT 0
53237: PPUSH
// result := false ;
53238: LD_ADDR_VAR 0 4
53242: PUSH
53243: LD_INT 0
53245: ST_TO_ADDR
// if GetTaskList ( unit ) then
53246: LD_VAR 0 1
53250: PPUSH
53251: CALL_OW 437
53255: IFFALSE 53338
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53257: LD_STRING M
53259: PUSH
53260: LD_VAR 0 1
53264: PPUSH
53265: CALL_OW 437
53269: PUSH
53270: LD_INT 1
53272: ARRAY
53273: PUSH
53274: LD_INT 1
53276: ARRAY
53277: EQUAL
53278: PUSH
53279: LD_VAR 0 2
53283: PUSH
53284: LD_VAR 0 1
53288: PPUSH
53289: CALL_OW 437
53293: PUSH
53294: LD_INT 1
53296: ARRAY
53297: PUSH
53298: LD_INT 2
53300: ARRAY
53301: EQUAL
53302: AND
53303: PUSH
53304: LD_VAR 0 3
53308: PUSH
53309: LD_VAR 0 1
53313: PPUSH
53314: CALL_OW 437
53318: PUSH
53319: LD_INT 1
53321: ARRAY
53322: PUSH
53323: LD_INT 3
53325: ARRAY
53326: EQUAL
53327: AND
53328: IFFALSE 53338
// result := true ;
53330: LD_ADDR_VAR 0 4
53334: PUSH
53335: LD_INT 1
53337: ST_TO_ADDR
// end ; end ;
53338: LD_VAR 0 4
53342: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53343: LD_INT 0
53345: PPUSH
53346: PPUSH
53347: PPUSH
53348: PPUSH
// if not unit or not area then
53349: LD_VAR 0 1
53353: NOT
53354: PUSH
53355: LD_VAR 0 2
53359: NOT
53360: OR
53361: IFFALSE 53365
// exit ;
53363: GO 53541
// tmp := AreaToList ( area , i ) ;
53365: LD_ADDR_VAR 0 6
53369: PUSH
53370: LD_VAR 0 2
53374: PPUSH
53375: LD_VAR 0 5
53379: PPUSH
53380: CALL_OW 517
53384: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53385: LD_ADDR_VAR 0 5
53389: PUSH
53390: DOUBLE
53391: LD_INT 1
53393: DEC
53394: ST_TO_ADDR
53395: LD_VAR 0 6
53399: PUSH
53400: LD_INT 1
53402: ARRAY
53403: PUSH
53404: FOR_TO
53405: IFFALSE 53539
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53407: LD_ADDR_VAR 0 7
53411: PUSH
53412: LD_VAR 0 6
53416: PUSH
53417: LD_INT 1
53419: ARRAY
53420: PUSH
53421: LD_VAR 0 5
53425: ARRAY
53426: PUSH
53427: LD_VAR 0 6
53431: PUSH
53432: LD_INT 2
53434: ARRAY
53435: PUSH
53436: LD_VAR 0 5
53440: ARRAY
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53446: LD_INT 92
53448: PUSH
53449: LD_VAR 0 7
53453: PUSH
53454: LD_INT 1
53456: ARRAY
53457: PUSH
53458: LD_VAR 0 7
53462: PUSH
53463: LD_INT 2
53465: ARRAY
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: PPUSH
53476: CALL_OW 69
53480: PUSH
53481: LD_INT 0
53483: EQUAL
53484: IFFALSE 53537
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53486: LD_VAR 0 1
53490: PPUSH
53491: LD_VAR 0 7
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: PPUSH
53500: LD_VAR 0 7
53504: PUSH
53505: LD_INT 2
53507: ARRAY
53508: PPUSH
53509: LD_VAR 0 3
53513: PPUSH
53514: CALL_OW 48
// result := IsPlaced ( unit ) ;
53518: LD_ADDR_VAR 0 4
53522: PUSH
53523: LD_VAR 0 1
53527: PPUSH
53528: CALL_OW 305
53532: ST_TO_ADDR
// exit ;
53533: POP
53534: POP
53535: GO 53541
// end ; end ;
53537: GO 53404
53539: POP
53540: POP
// end ;
53541: LD_VAR 0 4
53545: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53546: LD_INT 0
53548: PPUSH
53549: PPUSH
53550: PPUSH
// if not side or side > 8 then
53551: LD_VAR 0 1
53555: NOT
53556: PUSH
53557: LD_VAR 0 1
53561: PUSH
53562: LD_INT 8
53564: GREATER
53565: OR
53566: IFFALSE 53570
// exit ;
53568: GO 53757
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53570: LD_ADDR_VAR 0 4
53574: PUSH
53575: LD_INT 22
53577: PUSH
53578: LD_VAR 0 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 21
53589: PUSH
53590: LD_INT 3
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PPUSH
53601: CALL_OW 69
53605: ST_TO_ADDR
// if not tmp then
53606: LD_VAR 0 4
53610: NOT
53611: IFFALSE 53615
// exit ;
53613: GO 53757
// enable_addtolog := true ;
53615: LD_ADDR_OWVAR 81
53619: PUSH
53620: LD_INT 1
53622: ST_TO_ADDR
// AddToLog ( [ ) ;
53623: LD_STRING [
53625: PPUSH
53626: CALL_OW 561
// for i in tmp do
53630: LD_ADDR_VAR 0 3
53634: PUSH
53635: LD_VAR 0 4
53639: PUSH
53640: FOR_IN
53641: IFFALSE 53748
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53643: LD_STRING [
53645: PUSH
53646: LD_VAR 0 3
53650: PPUSH
53651: CALL_OW 266
53655: STR
53656: PUSH
53657: LD_STRING , 
53659: STR
53660: PUSH
53661: LD_VAR 0 3
53665: PPUSH
53666: CALL_OW 250
53670: STR
53671: PUSH
53672: LD_STRING , 
53674: STR
53675: PUSH
53676: LD_VAR 0 3
53680: PPUSH
53681: CALL_OW 251
53685: STR
53686: PUSH
53687: LD_STRING , 
53689: STR
53690: PUSH
53691: LD_VAR 0 3
53695: PPUSH
53696: CALL_OW 254
53700: STR
53701: PUSH
53702: LD_STRING , 
53704: STR
53705: PUSH
53706: LD_VAR 0 3
53710: PPUSH
53711: LD_INT 1
53713: PPUSH
53714: CALL_OW 268
53718: STR
53719: PUSH
53720: LD_STRING , 
53722: STR
53723: PUSH
53724: LD_VAR 0 3
53728: PPUSH
53729: LD_INT 2
53731: PPUSH
53732: CALL_OW 268
53736: STR
53737: PUSH
53738: LD_STRING ],
53740: STR
53741: PPUSH
53742: CALL_OW 561
// end ;
53746: GO 53640
53748: POP
53749: POP
// AddToLog ( ]; ) ;
53750: LD_STRING ];
53752: PPUSH
53753: CALL_OW 561
// end ;
53757: LD_VAR 0 2
53761: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53762: LD_INT 0
53764: PPUSH
53765: PPUSH
53766: PPUSH
53767: PPUSH
53768: PPUSH
// if not area or not rate or not max then
53769: LD_VAR 0 1
53773: NOT
53774: PUSH
53775: LD_VAR 0 2
53779: NOT
53780: OR
53781: PUSH
53782: LD_VAR 0 4
53786: NOT
53787: OR
53788: IFFALSE 53792
// exit ;
53790: GO 53981
// while 1 do
53792: LD_INT 1
53794: IFFALSE 53981
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53796: LD_ADDR_VAR 0 9
53800: PUSH
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_INT 1
53808: PPUSH
53809: CALL_OW 287
53813: PUSH
53814: LD_INT 10
53816: MUL
53817: ST_TO_ADDR
// r := rate / 10 ;
53818: LD_ADDR_VAR 0 7
53822: PUSH
53823: LD_VAR 0 2
53827: PUSH
53828: LD_INT 10
53830: DIVREAL
53831: ST_TO_ADDR
// time := 1 1$00 ;
53832: LD_ADDR_VAR 0 8
53836: PUSH
53837: LD_INT 2100
53839: ST_TO_ADDR
// if amount < min then
53840: LD_VAR 0 9
53844: PUSH
53845: LD_VAR 0 3
53849: LESS
53850: IFFALSE 53868
// r := r * 2 else
53852: LD_ADDR_VAR 0 7
53856: PUSH
53857: LD_VAR 0 7
53861: PUSH
53862: LD_INT 2
53864: MUL
53865: ST_TO_ADDR
53866: GO 53894
// if amount > max then
53868: LD_VAR 0 9
53872: PUSH
53873: LD_VAR 0 4
53877: GREATER
53878: IFFALSE 53894
// r := r / 2 ;
53880: LD_ADDR_VAR 0 7
53884: PUSH
53885: LD_VAR 0 7
53889: PUSH
53890: LD_INT 2
53892: DIVREAL
53893: ST_TO_ADDR
// time := time / r ;
53894: LD_ADDR_VAR 0 8
53898: PUSH
53899: LD_VAR 0 8
53903: PUSH
53904: LD_VAR 0 7
53908: DIVREAL
53909: ST_TO_ADDR
// if time < 0 then
53910: LD_VAR 0 8
53914: PUSH
53915: LD_INT 0
53917: LESS
53918: IFFALSE 53935
// time := time * - 1 ;
53920: LD_ADDR_VAR 0 8
53924: PUSH
53925: LD_VAR 0 8
53929: PUSH
53930: LD_INT 1
53932: NEG
53933: MUL
53934: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53935: LD_VAR 0 8
53939: PUSH
53940: LD_INT 35
53942: PPUSH
53943: LD_INT 875
53945: PPUSH
53946: CALL_OW 12
53950: PLUS
53951: PPUSH
53952: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53956: LD_INT 1
53958: PPUSH
53959: LD_INT 5
53961: PPUSH
53962: CALL_OW 12
53966: PPUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: LD_INT 1
53974: PPUSH
53975: CALL_OW 55
// end ;
53979: GO 53792
// end ;
53981: LD_VAR 0 5
53985: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53986: LD_INT 0
53988: PPUSH
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
53994: PPUSH
53995: PPUSH
// if not turrets or not factories then
53996: LD_VAR 0 1
54000: NOT
54001: PUSH
54002: LD_VAR 0 2
54006: NOT
54007: OR
54008: IFFALSE 54012
// exit ;
54010: GO 54319
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54012: LD_ADDR_VAR 0 10
54016: PUSH
54017: LD_INT 5
54019: PUSH
54020: LD_INT 6
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 4
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: PUSH
54040: LD_INT 5
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 24
54054: PUSH
54055: LD_INT 25
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 23
54064: PUSH
54065: LD_INT 27
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 42
54078: PUSH
54079: LD_INT 43
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 44
54088: PUSH
54089: LD_INT 46
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 45
54098: PUSH
54099: LD_INT 47
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// result := [ ] ;
54116: LD_ADDR_VAR 0 3
54120: PUSH
54121: EMPTY
54122: ST_TO_ADDR
// for i in turrets do
54123: LD_ADDR_VAR 0 4
54127: PUSH
54128: LD_VAR 0 1
54132: PUSH
54133: FOR_IN
54134: IFFALSE 54317
// begin nat := GetNation ( i ) ;
54136: LD_ADDR_VAR 0 7
54140: PUSH
54141: LD_VAR 0 4
54145: PPUSH
54146: CALL_OW 248
54150: ST_TO_ADDR
// weapon := 0 ;
54151: LD_ADDR_VAR 0 8
54155: PUSH
54156: LD_INT 0
54158: ST_TO_ADDR
// if not nat then
54159: LD_VAR 0 7
54163: NOT
54164: IFFALSE 54168
// continue ;
54166: GO 54133
// for j in list [ nat ] do
54168: LD_ADDR_VAR 0 5
54172: PUSH
54173: LD_VAR 0 10
54177: PUSH
54178: LD_VAR 0 7
54182: ARRAY
54183: PUSH
54184: FOR_IN
54185: IFFALSE 54226
// if GetBWeapon ( i ) = j [ 1 ] then
54187: LD_VAR 0 4
54191: PPUSH
54192: CALL_OW 269
54196: PUSH
54197: LD_VAR 0 5
54201: PUSH
54202: LD_INT 1
54204: ARRAY
54205: EQUAL
54206: IFFALSE 54224
// begin weapon := j [ 2 ] ;
54208: LD_ADDR_VAR 0 8
54212: PUSH
54213: LD_VAR 0 5
54217: PUSH
54218: LD_INT 2
54220: ARRAY
54221: ST_TO_ADDR
// break ;
54222: GO 54226
// end ;
54224: GO 54184
54226: POP
54227: POP
// if not weapon then
54228: LD_VAR 0 8
54232: NOT
54233: IFFALSE 54237
// continue ;
54235: GO 54133
// for k in factories do
54237: LD_ADDR_VAR 0 6
54241: PUSH
54242: LD_VAR 0 2
54246: PUSH
54247: FOR_IN
54248: IFFALSE 54313
// begin weapons := AvailableWeaponList ( k ) ;
54250: LD_ADDR_VAR 0 9
54254: PUSH
54255: LD_VAR 0 6
54259: PPUSH
54260: CALL_OW 478
54264: ST_TO_ADDR
// if not weapons then
54265: LD_VAR 0 9
54269: NOT
54270: IFFALSE 54274
// continue ;
54272: GO 54247
// if weapon in weapons then
54274: LD_VAR 0 8
54278: PUSH
54279: LD_VAR 0 9
54283: IN
54284: IFFALSE 54311
// begin result := [ i , weapon ] ;
54286: LD_ADDR_VAR 0 3
54290: PUSH
54291: LD_VAR 0 4
54295: PUSH
54296: LD_VAR 0 8
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// exit ;
54305: POP
54306: POP
54307: POP
54308: POP
54309: GO 54319
// end ; end ;
54311: GO 54247
54313: POP
54314: POP
// end ;
54315: GO 54133
54317: POP
54318: POP
// end ;
54319: LD_VAR 0 3
54323: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54324: LD_INT 0
54326: PPUSH
// if not side or side > 8 then
54327: LD_VAR 0 3
54331: NOT
54332: PUSH
54333: LD_VAR 0 3
54337: PUSH
54338: LD_INT 8
54340: GREATER
54341: OR
54342: IFFALSE 54346
// exit ;
54344: GO 54405
// if not range then
54346: LD_VAR 0 4
54350: NOT
54351: IFFALSE 54362
// range := - 12 ;
54353: LD_ADDR_VAR 0 4
54357: PUSH
54358: LD_INT 12
54360: NEG
54361: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54362: LD_VAR 0 1
54366: PPUSH
54367: LD_VAR 0 2
54371: PPUSH
54372: LD_VAR 0 3
54376: PPUSH
54377: LD_VAR 0 4
54381: PPUSH
54382: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54386: LD_VAR 0 1
54390: PPUSH
54391: LD_VAR 0 2
54395: PPUSH
54396: LD_VAR 0 3
54400: PPUSH
54401: CALL_OW 331
// end ;
54405: LD_VAR 0 5
54409: RET
// export function Video ( mode ) ; begin
54410: LD_INT 0
54412: PPUSH
// ingame_video = mode ;
54413: LD_ADDR_OWVAR 52
54417: PUSH
54418: LD_VAR 0 1
54422: ST_TO_ADDR
// interface_hidden = mode ;
54423: LD_ADDR_OWVAR 54
54427: PUSH
54428: LD_VAR 0 1
54432: ST_TO_ADDR
// end ;
54433: LD_VAR 0 2
54437: RET
// export function Join ( array , element ) ; begin
54438: LD_INT 0
54440: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54441: LD_ADDR_VAR 0 3
54445: PUSH
54446: LD_VAR 0 1
54450: PPUSH
54451: LD_VAR 0 1
54455: PUSH
54456: LD_INT 1
54458: PLUS
54459: PPUSH
54460: LD_VAR 0 2
54464: PPUSH
54465: CALL_OW 1
54469: ST_TO_ADDR
// end ;
54470: LD_VAR 0 3
54474: RET
// export function JoinUnion ( array , element ) ; begin
54475: LD_INT 0
54477: PPUSH
// result := array union element ;
54478: LD_ADDR_VAR 0 3
54482: PUSH
54483: LD_VAR 0 1
54487: PUSH
54488: LD_VAR 0 2
54492: UNION
54493: ST_TO_ADDR
// end ;
54494: LD_VAR 0 3
54498: RET
// export function GetBehemoths ( side ) ; begin
54499: LD_INT 0
54501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54502: LD_ADDR_VAR 0 2
54506: PUSH
54507: LD_INT 22
54509: PUSH
54510: LD_VAR 0 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 31
54521: PUSH
54522: LD_INT 25
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PPUSH
54533: CALL_OW 69
54537: ST_TO_ADDR
// end ;
54538: LD_VAR 0 2
54542: RET
// export function Shuffle ( array ) ; var i , index ; begin
54543: LD_INT 0
54545: PPUSH
54546: PPUSH
54547: PPUSH
// result := [ ] ;
54548: LD_ADDR_VAR 0 2
54552: PUSH
54553: EMPTY
54554: ST_TO_ADDR
// if not array then
54555: LD_VAR 0 1
54559: NOT
54560: IFFALSE 54564
// exit ;
54562: GO 54663
// Randomize ;
54564: CALL_OW 10
// for i = array downto 1 do
54568: LD_ADDR_VAR 0 3
54572: PUSH
54573: DOUBLE
54574: LD_VAR 0 1
54578: INC
54579: ST_TO_ADDR
54580: LD_INT 1
54582: PUSH
54583: FOR_DOWNTO
54584: IFFALSE 54661
// begin index := rand ( 1 , array ) ;
54586: LD_ADDR_VAR 0 4
54590: PUSH
54591: LD_INT 1
54593: PPUSH
54594: LD_VAR 0 1
54598: PPUSH
54599: CALL_OW 12
54603: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54604: LD_ADDR_VAR 0 2
54608: PUSH
54609: LD_VAR 0 2
54613: PPUSH
54614: LD_VAR 0 2
54618: PUSH
54619: LD_INT 1
54621: PLUS
54622: PPUSH
54623: LD_VAR 0 1
54627: PUSH
54628: LD_VAR 0 4
54632: ARRAY
54633: PPUSH
54634: CALL_OW 2
54638: ST_TO_ADDR
// array := Delete ( array , index ) ;
54639: LD_ADDR_VAR 0 1
54643: PUSH
54644: LD_VAR 0 1
54648: PPUSH
54649: LD_VAR 0 4
54653: PPUSH
54654: CALL_OW 3
54658: ST_TO_ADDR
// end ;
54659: GO 54583
54661: POP
54662: POP
// end ;
54663: LD_VAR 0 2
54667: RET
// export function GetBaseMaterials ( base ) ; begin
54668: LD_INT 0
54670: PPUSH
// result := [ 0 , 0 , 0 ] ;
54671: LD_ADDR_VAR 0 2
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: LIST
54689: ST_TO_ADDR
// if not base then
54690: LD_VAR 0 1
54694: NOT
54695: IFFALSE 54699
// exit ;
54697: GO 54748
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54699: LD_ADDR_VAR 0 2
54703: PUSH
54704: LD_VAR 0 1
54708: PPUSH
54709: LD_INT 1
54711: PPUSH
54712: CALL_OW 275
54716: PUSH
54717: LD_VAR 0 1
54721: PPUSH
54722: LD_INT 2
54724: PPUSH
54725: CALL_OW 275
54729: PUSH
54730: LD_VAR 0 1
54734: PPUSH
54735: LD_INT 3
54737: PPUSH
54738: CALL_OW 275
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: LIST
54747: ST_TO_ADDR
// end ;
54748: LD_VAR 0 2
54752: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54753: LD_INT 0
54755: PPUSH
54756: PPUSH
// result := array ;
54757: LD_ADDR_VAR 0 3
54761: PUSH
54762: LD_VAR 0 1
54766: ST_TO_ADDR
// if size >= result then
54767: LD_VAR 0 2
54771: PUSH
54772: LD_VAR 0 3
54776: GREATEREQUAL
54777: IFFALSE 54781
// exit ;
54779: GO 54831
// if size then
54781: LD_VAR 0 2
54785: IFFALSE 54831
// for i := array downto size do
54787: LD_ADDR_VAR 0 4
54791: PUSH
54792: DOUBLE
54793: LD_VAR 0 1
54797: INC
54798: ST_TO_ADDR
54799: LD_VAR 0 2
54803: PUSH
54804: FOR_DOWNTO
54805: IFFALSE 54829
// result := Delete ( result , result ) ;
54807: LD_ADDR_VAR 0 3
54811: PUSH
54812: LD_VAR 0 3
54816: PPUSH
54817: LD_VAR 0 3
54821: PPUSH
54822: CALL_OW 3
54826: ST_TO_ADDR
54827: GO 54804
54829: POP
54830: POP
// end ;
54831: LD_VAR 0 3
54835: RET
// export function ComExit ( unit ) ; var tmp ; begin
54836: LD_INT 0
54838: PPUSH
54839: PPUSH
// if not IsInUnit ( unit ) then
54840: LD_VAR 0 1
54844: PPUSH
54845: CALL_OW 310
54849: NOT
54850: IFFALSE 54854
// exit ;
54852: GO 54914
// tmp := IsInUnit ( unit ) ;
54854: LD_ADDR_VAR 0 3
54858: PUSH
54859: LD_VAR 0 1
54863: PPUSH
54864: CALL_OW 310
54868: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54869: LD_VAR 0 3
54873: PPUSH
54874: CALL_OW 247
54878: PUSH
54879: LD_INT 2
54881: EQUAL
54882: IFFALSE 54895
// ComExitVehicle ( unit ) else
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 121
54893: GO 54904
// ComExitBuilding ( unit ) ;
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 122
// result := tmp ;
54904: LD_ADDR_VAR 0 2
54908: PUSH
54909: LD_VAR 0 3
54913: ST_TO_ADDR
// end ;
54914: LD_VAR 0 2
54918: RET
// export function ComExitAll ( units ) ; var i ; begin
54919: LD_INT 0
54921: PPUSH
54922: PPUSH
// if not units then
54923: LD_VAR 0 1
54927: NOT
54928: IFFALSE 54932
// exit ;
54930: GO 54958
// for i in units do
54932: LD_ADDR_VAR 0 3
54936: PUSH
54937: LD_VAR 0 1
54941: PUSH
54942: FOR_IN
54943: IFFALSE 54956
// ComExit ( i ) ;
54945: LD_VAR 0 3
54949: PPUSH
54950: CALL 54836 0 1
54954: GO 54942
54956: POP
54957: POP
// end ;
54958: LD_VAR 0 2
54962: RET
// export function ResetHc ; begin
54963: LD_INT 0
54965: PPUSH
// InitHc ;
54966: CALL_OW 19
// hc_importance := 0 ;
54970: LD_ADDR_OWVAR 32
54974: PUSH
54975: LD_INT 0
54977: ST_TO_ADDR
// end ;
54978: LD_VAR 0 1
54982: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54983: LD_INT 0
54985: PPUSH
54986: PPUSH
54987: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54988: LD_ADDR_VAR 0 6
54992: PUSH
54993: LD_VAR 0 1
54997: PUSH
54998: LD_VAR 0 3
55002: PLUS
55003: PUSH
55004: LD_INT 2
55006: DIV
55007: ST_TO_ADDR
// if _x < 0 then
55008: LD_VAR 0 6
55012: PUSH
55013: LD_INT 0
55015: LESS
55016: IFFALSE 55033
// _x := _x * - 1 ;
55018: LD_ADDR_VAR 0 6
55022: PUSH
55023: LD_VAR 0 6
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: MUL
55032: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55033: LD_ADDR_VAR 0 7
55037: PUSH
55038: LD_VAR 0 2
55042: PUSH
55043: LD_VAR 0 4
55047: PLUS
55048: PUSH
55049: LD_INT 2
55051: DIV
55052: ST_TO_ADDR
// if _y < 0 then
55053: LD_VAR 0 7
55057: PUSH
55058: LD_INT 0
55060: LESS
55061: IFFALSE 55078
// _y := _y * - 1 ;
55063: LD_ADDR_VAR 0 7
55067: PUSH
55068: LD_VAR 0 7
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: MUL
55077: ST_TO_ADDR
// result := [ _x , _y ] ;
55078: LD_ADDR_VAR 0 5
55082: PUSH
55083: LD_VAR 0 6
55087: PUSH
55088: LD_VAR 0 7
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: ST_TO_ADDR
// end ;
55097: LD_VAR 0 5
55101: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55102: LD_INT 0
55104: PPUSH
55105: PPUSH
55106: PPUSH
55107: PPUSH
// task := GetTaskList ( unit ) ;
55108: LD_ADDR_VAR 0 7
55112: PUSH
55113: LD_VAR 0 1
55117: PPUSH
55118: CALL_OW 437
55122: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55123: LD_VAR 0 7
55127: NOT
55128: PUSH
55129: LD_VAR 0 1
55133: PPUSH
55134: LD_VAR 0 2
55138: PPUSH
55139: CALL_OW 308
55143: NOT
55144: AND
55145: IFFALSE 55149
// exit ;
55147: GO 55267
// if IsInArea ( unit , area ) then
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_VAR 0 2
55158: PPUSH
55159: CALL_OW 308
55163: IFFALSE 55181
// begin ComMoveToArea ( unit , goAway ) ;
55165: LD_VAR 0 1
55169: PPUSH
55170: LD_VAR 0 3
55174: PPUSH
55175: CALL_OW 113
// exit ;
55179: GO 55267
// end ; if task [ 1 ] [ 1 ] <> M then
55181: LD_VAR 0 7
55185: PUSH
55186: LD_INT 1
55188: ARRAY
55189: PUSH
55190: LD_INT 1
55192: ARRAY
55193: PUSH
55194: LD_STRING M
55196: NONEQUAL
55197: IFFALSE 55201
// exit ;
55199: GO 55267
// x := task [ 1 ] [ 2 ] ;
55201: LD_ADDR_VAR 0 5
55205: PUSH
55206: LD_VAR 0 7
55210: PUSH
55211: LD_INT 1
55213: ARRAY
55214: PUSH
55215: LD_INT 2
55217: ARRAY
55218: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55219: LD_ADDR_VAR 0 6
55223: PUSH
55224: LD_VAR 0 7
55228: PUSH
55229: LD_INT 1
55231: ARRAY
55232: PUSH
55233: LD_INT 3
55235: ARRAY
55236: ST_TO_ADDR
// if InArea ( x , y , area ) then
55237: LD_VAR 0 5
55241: PPUSH
55242: LD_VAR 0 6
55246: PPUSH
55247: LD_VAR 0 2
55251: PPUSH
55252: CALL_OW 309
55256: IFFALSE 55267
// ComStop ( unit ) ;
55258: LD_VAR 0 1
55262: PPUSH
55263: CALL_OW 141
// end ;
55267: LD_VAR 0 4
55271: RET
// export function Abs ( value ) ; begin
55272: LD_INT 0
55274: PPUSH
// result := value ;
55275: LD_ADDR_VAR 0 2
55279: PUSH
55280: LD_VAR 0 1
55284: ST_TO_ADDR
// if value < 0 then
55285: LD_VAR 0 1
55289: PUSH
55290: LD_INT 0
55292: LESS
55293: IFFALSE 55310
// result := value * - 1 ;
55295: LD_ADDR_VAR 0 2
55299: PUSH
55300: LD_VAR 0 1
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: MUL
55309: ST_TO_ADDR
// end ;
55310: LD_VAR 0 2
55314: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55315: LD_INT 0
55317: PPUSH
55318: PPUSH
55319: PPUSH
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
// if not unit or not building then
55325: LD_VAR 0 1
55329: NOT
55330: PUSH
55331: LD_VAR 0 2
55335: NOT
55336: OR
55337: IFFALSE 55341
// exit ;
55339: GO 55567
// x := GetX ( building ) ;
55341: LD_ADDR_VAR 0 4
55345: PUSH
55346: LD_VAR 0 2
55350: PPUSH
55351: CALL_OW 250
55355: ST_TO_ADDR
// y := GetY ( building ) ;
55356: LD_ADDR_VAR 0 6
55360: PUSH
55361: LD_VAR 0 2
55365: PPUSH
55366: CALL_OW 251
55370: ST_TO_ADDR
// d := GetDir ( building ) ;
55371: LD_ADDR_VAR 0 8
55375: PUSH
55376: LD_VAR 0 2
55380: PPUSH
55381: CALL_OW 254
55385: ST_TO_ADDR
// r := 4 ;
55386: LD_ADDR_VAR 0 9
55390: PUSH
55391: LD_INT 4
55393: ST_TO_ADDR
// for i := 1 to 5 do
55394: LD_ADDR_VAR 0 10
55398: PUSH
55399: DOUBLE
55400: LD_INT 1
55402: DEC
55403: ST_TO_ADDR
55404: LD_INT 5
55406: PUSH
55407: FOR_TO
55408: IFFALSE 55565
// begin _x := ShiftX ( x , d , r + i ) ;
55410: LD_ADDR_VAR 0 5
55414: PUSH
55415: LD_VAR 0 4
55419: PPUSH
55420: LD_VAR 0 8
55424: PPUSH
55425: LD_VAR 0 9
55429: PUSH
55430: LD_VAR 0 10
55434: PLUS
55435: PPUSH
55436: CALL_OW 272
55440: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55441: LD_ADDR_VAR 0 7
55445: PUSH
55446: LD_VAR 0 6
55450: PPUSH
55451: LD_VAR 0 8
55455: PPUSH
55456: LD_VAR 0 9
55460: PUSH
55461: LD_VAR 0 10
55465: PLUS
55466: PPUSH
55467: CALL_OW 273
55471: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55472: LD_VAR 0 5
55476: PPUSH
55477: LD_VAR 0 7
55481: PPUSH
55482: CALL_OW 488
55486: PUSH
55487: LD_VAR 0 5
55491: PPUSH
55492: LD_VAR 0 7
55496: PPUSH
55497: CALL_OW 428
55501: PPUSH
55502: CALL_OW 247
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: IN
55517: NOT
55518: AND
55519: IFFALSE 55563
// begin ComMoveXY ( unit , _x , _y ) ;
55521: LD_VAR 0 1
55525: PPUSH
55526: LD_VAR 0 5
55530: PPUSH
55531: LD_VAR 0 7
55535: PPUSH
55536: CALL_OW 111
// result := [ _x , _y ] ;
55540: LD_ADDR_VAR 0 3
55544: PUSH
55545: LD_VAR 0 5
55549: PUSH
55550: LD_VAR 0 7
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// exit ;
55559: POP
55560: POP
55561: GO 55567
// end ; end ;
55563: GO 55407
55565: POP
55566: POP
// end ;
55567: LD_VAR 0 3
55571: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55572: LD_INT 0
55574: PPUSH
55575: PPUSH
55576: PPUSH
// result := 0 ;
55577: LD_ADDR_VAR 0 3
55581: PUSH
55582: LD_INT 0
55584: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55585: LD_VAR 0 1
55589: PUSH
55590: LD_INT 0
55592: LESS
55593: PUSH
55594: LD_VAR 0 1
55598: PUSH
55599: LD_INT 8
55601: GREATER
55602: OR
55603: PUSH
55604: LD_VAR 0 2
55608: PUSH
55609: LD_INT 0
55611: LESS
55612: OR
55613: PUSH
55614: LD_VAR 0 2
55618: PUSH
55619: LD_INT 8
55621: GREATER
55622: OR
55623: IFFALSE 55627
// exit ;
55625: GO 55702
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55627: LD_ADDR_VAR 0 4
55631: PUSH
55632: LD_INT 22
55634: PUSH
55635: LD_VAR 0 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PPUSH
55644: CALL_OW 69
55648: PUSH
55649: FOR_IN
55650: IFFALSE 55700
// begin un := UnitShoot ( i ) ;
55652: LD_ADDR_VAR 0 5
55656: PUSH
55657: LD_VAR 0 4
55661: PPUSH
55662: CALL_OW 504
55666: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55667: LD_VAR 0 5
55671: PPUSH
55672: CALL_OW 255
55676: PUSH
55677: LD_VAR 0 1
55681: EQUAL
55682: IFFALSE 55698
// begin result := un ;
55684: LD_ADDR_VAR 0 3
55688: PUSH
55689: LD_VAR 0 5
55693: ST_TO_ADDR
// exit ;
55694: POP
55695: POP
55696: GO 55702
// end ; end ;
55698: GO 55649
55700: POP
55701: POP
// end ;
55702: LD_VAR 0 3
55706: RET
// export function GetCargoBay ( units ) ; begin
55707: LD_INT 0
55709: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55710: LD_ADDR_VAR 0 2
55714: PUSH
55715: LD_VAR 0 1
55719: PPUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 34
55725: PUSH
55726: LD_INT 12
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 34
55735: PUSH
55736: LD_INT 51
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 34
55745: PUSH
55746: LD_INT 32
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 34
55755: PUSH
55756: LD_INT 89
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: PPUSH
55770: CALL_OW 72
55774: ST_TO_ADDR
// end ;
55775: LD_VAR 0 2
55779: RET
// export function Negate ( value ) ; begin
55780: LD_INT 0
55782: PPUSH
// result := not value ;
55783: LD_ADDR_VAR 0 2
55787: PUSH
55788: LD_VAR 0 1
55792: NOT
55793: ST_TO_ADDR
// end ;
55794: LD_VAR 0 2
55798: RET
// export function Inc ( value ) ; begin
55799: LD_INT 0
55801: PPUSH
// result := value + 1 ;
55802: LD_ADDR_VAR 0 2
55806: PUSH
55807: LD_VAR 0 1
55811: PUSH
55812: LD_INT 1
55814: PLUS
55815: ST_TO_ADDR
// end ;
55816: LD_VAR 0 2
55820: RET
// export function Dec ( value ) ; begin
55821: LD_INT 0
55823: PPUSH
// result := value - 1 ;
55824: LD_ADDR_VAR 0 2
55828: PUSH
55829: LD_VAR 0 1
55833: PUSH
55834: LD_INT 1
55836: MINUS
55837: ST_TO_ADDR
// end ;
55838: LD_VAR 0 2
55842: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55843: LD_INT 0
55845: PPUSH
55846: PPUSH
55847: PPUSH
55848: PPUSH
55849: PPUSH
55850: PPUSH
55851: PPUSH
55852: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55853: LD_VAR 0 1
55857: PPUSH
55858: LD_VAR 0 2
55862: PPUSH
55863: CALL_OW 488
55867: NOT
55868: PUSH
55869: LD_VAR 0 3
55873: PPUSH
55874: LD_VAR 0 4
55878: PPUSH
55879: CALL_OW 488
55883: NOT
55884: OR
55885: IFFALSE 55898
// begin result := - 1 ;
55887: LD_ADDR_VAR 0 5
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: ST_TO_ADDR
// exit ;
55896: GO 56133
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55898: LD_ADDR_VAR 0 12
55902: PUSH
55903: LD_VAR 0 1
55907: PPUSH
55908: LD_VAR 0 2
55912: PPUSH
55913: LD_VAR 0 3
55917: PPUSH
55918: LD_VAR 0 4
55922: PPUSH
55923: CALL 54983 0 4
55927: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55928: LD_ADDR_VAR 0 11
55932: PUSH
55933: LD_VAR 0 1
55937: PPUSH
55938: LD_VAR 0 2
55942: PPUSH
55943: LD_VAR 0 12
55947: PUSH
55948: LD_INT 1
55950: ARRAY
55951: PPUSH
55952: LD_VAR 0 12
55956: PUSH
55957: LD_INT 2
55959: ARRAY
55960: PPUSH
55961: CALL_OW 298
55965: ST_TO_ADDR
// distance := 9999 ;
55966: LD_ADDR_VAR 0 10
55970: PUSH
55971: LD_INT 9999
55973: ST_TO_ADDR
// for i := 0 to 5 do
55974: LD_ADDR_VAR 0 6
55978: PUSH
55979: DOUBLE
55980: LD_INT 0
55982: DEC
55983: ST_TO_ADDR
55984: LD_INT 5
55986: PUSH
55987: FOR_TO
55988: IFFALSE 56131
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55990: LD_ADDR_VAR 0 7
55994: PUSH
55995: LD_VAR 0 1
55999: PPUSH
56000: LD_VAR 0 6
56004: PPUSH
56005: LD_VAR 0 11
56009: PPUSH
56010: CALL_OW 272
56014: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56015: LD_ADDR_VAR 0 8
56019: PUSH
56020: LD_VAR 0 2
56024: PPUSH
56025: LD_VAR 0 6
56029: PPUSH
56030: LD_VAR 0 11
56034: PPUSH
56035: CALL_OW 273
56039: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56040: LD_VAR 0 7
56044: PPUSH
56045: LD_VAR 0 8
56049: PPUSH
56050: CALL_OW 488
56054: NOT
56055: IFFALSE 56059
// continue ;
56057: GO 55987
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56059: LD_ADDR_VAR 0 9
56063: PUSH
56064: LD_VAR 0 12
56068: PUSH
56069: LD_INT 1
56071: ARRAY
56072: PPUSH
56073: LD_VAR 0 12
56077: PUSH
56078: LD_INT 2
56080: ARRAY
56081: PPUSH
56082: LD_VAR 0 7
56086: PPUSH
56087: LD_VAR 0 8
56091: PPUSH
56092: CALL_OW 298
56096: ST_TO_ADDR
// if tmp < distance then
56097: LD_VAR 0 9
56101: PUSH
56102: LD_VAR 0 10
56106: LESS
56107: IFFALSE 56129
// begin result := i ;
56109: LD_ADDR_VAR 0 5
56113: PUSH
56114: LD_VAR 0 6
56118: ST_TO_ADDR
// distance := tmp ;
56119: LD_ADDR_VAR 0 10
56123: PUSH
56124: LD_VAR 0 9
56128: ST_TO_ADDR
// end ; end ;
56129: GO 55987
56131: POP
56132: POP
// end ;
56133: LD_VAR 0 5
56137: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56138: LD_INT 0
56140: PPUSH
56141: PPUSH
// if not driver or not IsInUnit ( driver ) then
56142: LD_VAR 0 1
56146: NOT
56147: PUSH
56148: LD_VAR 0 1
56152: PPUSH
56153: CALL_OW 310
56157: NOT
56158: OR
56159: IFFALSE 56163
// exit ;
56161: GO 56253
// vehicle := IsInUnit ( driver ) ;
56163: LD_ADDR_VAR 0 3
56167: PUSH
56168: LD_VAR 0 1
56172: PPUSH
56173: CALL_OW 310
56177: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56178: LD_VAR 0 1
56182: PPUSH
56183: LD_STRING \
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: PUSH
56213: LD_STRING E
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_VAR 0 3
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PPUSH
56249: CALL_OW 446
// end ;
56253: LD_VAR 0 2
56257: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56258: LD_INT 0
56260: PPUSH
56261: PPUSH
// if not driver or not IsInUnit ( driver ) then
56262: LD_VAR 0 1
56266: NOT
56267: PUSH
56268: LD_VAR 0 1
56272: PPUSH
56273: CALL_OW 310
56277: NOT
56278: OR
56279: IFFALSE 56283
// exit ;
56281: GO 56373
// vehicle := IsInUnit ( driver ) ;
56283: LD_ADDR_VAR 0 3
56287: PUSH
56288: LD_VAR 0 1
56292: PPUSH
56293: CALL_OW 310
56297: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56298: LD_VAR 0 1
56302: PPUSH
56303: LD_STRING \
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: LD_INT 0
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: PUSH
56333: LD_STRING E
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_VAR 0 3
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PPUSH
56369: CALL_OW 447
// end ;
56373: LD_VAR 0 2
56377: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56378: LD_INT 0
56380: PPUSH
56381: PPUSH
56382: PPUSH
// tmp := [ ] ;
56383: LD_ADDR_VAR 0 5
56387: PUSH
56388: EMPTY
56389: ST_TO_ADDR
// for i in units do
56390: LD_ADDR_VAR 0 4
56394: PUSH
56395: LD_VAR 0 1
56399: PUSH
56400: FOR_IN
56401: IFFALSE 56439
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56403: LD_ADDR_VAR 0 5
56407: PUSH
56408: LD_VAR 0 5
56412: PPUSH
56413: LD_VAR 0 5
56417: PUSH
56418: LD_INT 1
56420: PLUS
56421: PPUSH
56422: LD_VAR 0 4
56426: PPUSH
56427: CALL_OW 256
56431: PPUSH
56432: CALL_OW 2
56436: ST_TO_ADDR
56437: GO 56400
56439: POP
56440: POP
// if not tmp then
56441: LD_VAR 0 5
56445: NOT
56446: IFFALSE 56450
// exit ;
56448: GO 56498
// if asc then
56450: LD_VAR 0 2
56454: IFFALSE 56478
// result := SortListByListAsc ( units , tmp ) else
56456: LD_ADDR_VAR 0 3
56460: PUSH
56461: LD_VAR 0 1
56465: PPUSH
56466: LD_VAR 0 5
56470: PPUSH
56471: CALL_OW 76
56475: ST_TO_ADDR
56476: GO 56498
// result := SortListByListDesc ( units , tmp ) ;
56478: LD_ADDR_VAR 0 3
56482: PUSH
56483: LD_VAR 0 1
56487: PPUSH
56488: LD_VAR 0 5
56492: PPUSH
56493: CALL_OW 77
56497: ST_TO_ADDR
// end ;
56498: LD_VAR 0 3
56502: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56503: LD_INT 0
56505: PPUSH
56506: PPUSH
// task := GetTaskList ( mech ) ;
56507: LD_ADDR_VAR 0 4
56511: PUSH
56512: LD_VAR 0 1
56516: PPUSH
56517: CALL_OW 437
56521: ST_TO_ADDR
// if not task then
56522: LD_VAR 0 4
56526: NOT
56527: IFFALSE 56531
// exit ;
56529: GO 56573
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56531: LD_ADDR_VAR 0 3
56535: PUSH
56536: LD_VAR 0 4
56540: PUSH
56541: LD_INT 1
56543: ARRAY
56544: PUSH
56545: LD_INT 1
56547: ARRAY
56548: PUSH
56549: LD_STRING r
56551: EQUAL
56552: PUSH
56553: LD_VAR 0 4
56557: PUSH
56558: LD_INT 1
56560: ARRAY
56561: PUSH
56562: LD_INT 4
56564: ARRAY
56565: PUSH
56566: LD_VAR 0 2
56570: EQUAL
56571: AND
56572: ST_TO_ADDR
// end ;
56573: LD_VAR 0 3
56577: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56578: LD_INT 0
56580: PPUSH
// SetDir ( unit , d ) ;
56581: LD_VAR 0 1
56585: PPUSH
56586: LD_VAR 0 4
56590: PPUSH
56591: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56595: LD_VAR 0 1
56599: PPUSH
56600: LD_VAR 0 2
56604: PPUSH
56605: LD_VAR 0 3
56609: PPUSH
56610: LD_VAR 0 5
56614: PPUSH
56615: CALL_OW 48
// end ;
56619: LD_VAR 0 6
56623: RET
// export function ToNaturalNumber ( number ) ; begin
56624: LD_INT 0
56626: PPUSH
// result := number div 1 ;
56627: LD_ADDR_VAR 0 2
56631: PUSH
56632: LD_VAR 0 1
56636: PUSH
56637: LD_INT 1
56639: DIV
56640: ST_TO_ADDR
// if number < 0 then
56641: LD_VAR 0 1
56645: PUSH
56646: LD_INT 0
56648: LESS
56649: IFFALSE 56659
// result := 0 ;
56651: LD_ADDR_VAR 0 2
56655: PUSH
56656: LD_INT 0
56658: ST_TO_ADDR
// end ;
56659: LD_VAR 0 2
56663: RET
// export function SortByClass ( units , class ) ; var un ; begin
56664: LD_INT 0
56666: PPUSH
56667: PPUSH
// if not units or not class then
56668: LD_VAR 0 1
56672: NOT
56673: PUSH
56674: LD_VAR 0 2
56678: NOT
56679: OR
56680: IFFALSE 56684
// exit ;
56682: GO 56779
// result := [ ] ;
56684: LD_ADDR_VAR 0 3
56688: PUSH
56689: EMPTY
56690: ST_TO_ADDR
// for un in units do
56691: LD_ADDR_VAR 0 4
56695: PUSH
56696: LD_VAR 0 1
56700: PUSH
56701: FOR_IN
56702: IFFALSE 56777
// if GetClass ( un ) = class then
56704: LD_VAR 0 4
56708: PPUSH
56709: CALL_OW 257
56713: PUSH
56714: LD_VAR 0 2
56718: EQUAL
56719: IFFALSE 56746
// result := Insert ( result , 1 , un ) else
56721: LD_ADDR_VAR 0 3
56725: PUSH
56726: LD_VAR 0 3
56730: PPUSH
56731: LD_INT 1
56733: PPUSH
56734: LD_VAR 0 4
56738: PPUSH
56739: CALL_OW 2
56743: ST_TO_ADDR
56744: GO 56775
// result := Replace ( result , result + 1 , un ) ;
56746: LD_ADDR_VAR 0 3
56750: PUSH
56751: LD_VAR 0 3
56755: PPUSH
56756: LD_VAR 0 3
56760: PUSH
56761: LD_INT 1
56763: PLUS
56764: PPUSH
56765: LD_VAR 0 4
56769: PPUSH
56770: CALL_OW 1
56774: ST_TO_ADDR
56775: GO 56701
56777: POP
56778: POP
// end ;
56779: LD_VAR 0 3
56783: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56784: LD_INT 0
56786: PPUSH
56787: PPUSH
56788: PPUSH
56789: PPUSH
56790: PPUSH
56791: PPUSH
56792: PPUSH
// result := [ ] ;
56793: LD_ADDR_VAR 0 4
56797: PUSH
56798: EMPTY
56799: ST_TO_ADDR
// if x - r < 0 then
56800: LD_VAR 0 1
56804: PUSH
56805: LD_VAR 0 3
56809: MINUS
56810: PUSH
56811: LD_INT 0
56813: LESS
56814: IFFALSE 56826
// min_x := 0 else
56816: LD_ADDR_VAR 0 8
56820: PUSH
56821: LD_INT 0
56823: ST_TO_ADDR
56824: GO 56842
// min_x := x - r ;
56826: LD_ADDR_VAR 0 8
56830: PUSH
56831: LD_VAR 0 1
56835: PUSH
56836: LD_VAR 0 3
56840: MINUS
56841: ST_TO_ADDR
// if y - r < 0 then
56842: LD_VAR 0 2
56846: PUSH
56847: LD_VAR 0 3
56851: MINUS
56852: PUSH
56853: LD_INT 0
56855: LESS
56856: IFFALSE 56868
// min_y := 0 else
56858: LD_ADDR_VAR 0 7
56862: PUSH
56863: LD_INT 0
56865: ST_TO_ADDR
56866: GO 56884
// min_y := y - r ;
56868: LD_ADDR_VAR 0 7
56872: PUSH
56873: LD_VAR 0 2
56877: PUSH
56878: LD_VAR 0 3
56882: MINUS
56883: ST_TO_ADDR
// max_x := x + r ;
56884: LD_ADDR_VAR 0 9
56888: PUSH
56889: LD_VAR 0 1
56893: PUSH
56894: LD_VAR 0 3
56898: PLUS
56899: ST_TO_ADDR
// max_y := y + r ;
56900: LD_ADDR_VAR 0 10
56904: PUSH
56905: LD_VAR 0 2
56909: PUSH
56910: LD_VAR 0 3
56914: PLUS
56915: ST_TO_ADDR
// for _x = min_x to max_x do
56916: LD_ADDR_VAR 0 5
56920: PUSH
56921: DOUBLE
56922: LD_VAR 0 8
56926: DEC
56927: ST_TO_ADDR
56928: LD_VAR 0 9
56932: PUSH
56933: FOR_TO
56934: IFFALSE 57035
// for _y = min_y to max_y do
56936: LD_ADDR_VAR 0 6
56940: PUSH
56941: DOUBLE
56942: LD_VAR 0 7
56946: DEC
56947: ST_TO_ADDR
56948: LD_VAR 0 10
56952: PUSH
56953: FOR_TO
56954: IFFALSE 57031
// begin if not ValidHex ( _x , _y ) then
56956: LD_VAR 0 5
56960: PPUSH
56961: LD_VAR 0 6
56965: PPUSH
56966: CALL_OW 488
56970: NOT
56971: IFFALSE 56975
// continue ;
56973: GO 56953
// if GetResourceTypeXY ( _x , _y ) then
56975: LD_VAR 0 5
56979: PPUSH
56980: LD_VAR 0 6
56984: PPUSH
56985: CALL_OW 283
56989: IFFALSE 57029
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56991: LD_ADDR_VAR 0 4
56995: PUSH
56996: LD_VAR 0 4
57000: PPUSH
57001: LD_VAR 0 4
57005: PUSH
57006: LD_INT 1
57008: PLUS
57009: PPUSH
57010: LD_VAR 0 5
57014: PUSH
57015: LD_VAR 0 6
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PPUSH
57024: CALL_OW 1
57028: ST_TO_ADDR
// end ;
57029: GO 56953
57031: POP
57032: POP
57033: GO 56933
57035: POP
57036: POP
// end ;
57037: LD_VAR 0 4
57041: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57042: LD_INT 0
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
57049: PPUSH
57050: PPUSH
57051: PPUSH
// if not units then
57052: LD_VAR 0 1
57056: NOT
57057: IFFALSE 57061
// exit ;
57059: GO 57589
// result := UnitFilter ( units , [ f_ok ] ) ;
57061: LD_ADDR_VAR 0 3
57065: PUSH
57066: LD_VAR 0 1
57070: PPUSH
57071: LD_INT 50
57073: PUSH
57074: EMPTY
57075: LIST
57076: PPUSH
57077: CALL_OW 72
57081: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57082: LD_ADDR_VAR 0 8
57086: PUSH
57087: LD_VAR 0 1
57091: PUSH
57092: LD_INT 1
57094: ARRAY
57095: PPUSH
57096: CALL_OW 255
57100: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57101: LD_ADDR_VAR 0 10
57105: PUSH
57106: LD_INT 29
57108: PUSH
57109: LD_INT 91
57111: PUSH
57112: LD_INT 49
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: LIST
57119: ST_TO_ADDR
// if not result then
57120: LD_VAR 0 3
57124: NOT
57125: IFFALSE 57129
// exit ;
57127: GO 57589
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57129: LD_ADDR_VAR 0 5
57133: PUSH
57134: LD_INT 81
57136: PUSH
57137: LD_VAR 0 8
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PPUSH
57146: CALL_OW 69
57150: ST_TO_ADDR
// for i in result do
57151: LD_ADDR_VAR 0 4
57155: PUSH
57156: LD_VAR 0 3
57160: PUSH
57161: FOR_IN
57162: IFFALSE 57587
// begin tag := GetTag ( i ) + 1 ;
57164: LD_ADDR_VAR 0 9
57168: PUSH
57169: LD_VAR 0 4
57173: PPUSH
57174: CALL_OW 110
57178: PUSH
57179: LD_INT 1
57181: PLUS
57182: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57183: LD_ADDR_VAR 0 7
57187: PUSH
57188: LD_VAR 0 4
57192: PPUSH
57193: CALL_OW 250
57197: PPUSH
57198: LD_VAR 0 4
57202: PPUSH
57203: CALL_OW 251
57207: PPUSH
57208: LD_INT 4
57210: PPUSH
57211: CALL 56784 0 3
57215: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57216: LD_VAR 0 4
57220: PPUSH
57221: CALL_OW 247
57225: PUSH
57226: LD_INT 2
57228: EQUAL
57229: PUSH
57230: LD_VAR 0 7
57234: PUSH
57235: LD_INT 2
57237: GREATER
57238: AND
57239: PUSH
57240: LD_VAR 0 4
57244: PPUSH
57245: CALL_OW 264
57249: PUSH
57250: LD_VAR 0 10
57254: IN
57255: NOT
57256: AND
57257: IFFALSE 57296
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57259: LD_VAR 0 4
57263: PPUSH
57264: LD_VAR 0 7
57268: PUSH
57269: LD_INT 1
57271: ARRAY
57272: PUSH
57273: LD_INT 1
57275: ARRAY
57276: PPUSH
57277: LD_VAR 0 7
57281: PUSH
57282: LD_INT 1
57284: ARRAY
57285: PUSH
57286: LD_INT 2
57288: ARRAY
57289: PPUSH
57290: CALL_OW 116
57294: GO 57585
// if path > tag then
57296: LD_VAR 0 2
57300: PUSH
57301: LD_VAR 0 9
57305: GREATER
57306: IFFALSE 57514
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57308: LD_ADDR_VAR 0 6
57312: PUSH
57313: LD_VAR 0 5
57317: PPUSH
57318: LD_INT 91
57320: PUSH
57321: LD_VAR 0 4
57325: PUSH
57326: LD_INT 8
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: PPUSH
57334: CALL_OW 72
57338: ST_TO_ADDR
// if nearEnemy then
57339: LD_VAR 0 6
57343: IFFALSE 57412
// begin if GetWeapon ( i ) = ru_time_lapser then
57345: LD_VAR 0 4
57349: PPUSH
57350: CALL_OW 264
57354: PUSH
57355: LD_INT 49
57357: EQUAL
57358: IFFALSE 57386
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57360: LD_VAR 0 4
57364: PPUSH
57365: LD_VAR 0 6
57369: PPUSH
57370: LD_VAR 0 4
57374: PPUSH
57375: CALL_OW 74
57379: PPUSH
57380: CALL_OW 112
57384: GO 57410
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57386: LD_VAR 0 4
57390: PPUSH
57391: LD_VAR 0 6
57395: PPUSH
57396: LD_VAR 0 4
57400: PPUSH
57401: CALL_OW 74
57405: PPUSH
57406: CALL 58660 0 2
// end else
57410: GO 57512
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57412: LD_VAR 0 4
57416: PPUSH
57417: LD_VAR 0 2
57421: PUSH
57422: LD_VAR 0 9
57426: ARRAY
57427: PUSH
57428: LD_INT 1
57430: ARRAY
57431: PPUSH
57432: LD_VAR 0 2
57436: PUSH
57437: LD_VAR 0 9
57441: ARRAY
57442: PUSH
57443: LD_INT 2
57445: ARRAY
57446: PPUSH
57447: CALL_OW 297
57451: PUSH
57452: LD_INT 6
57454: GREATER
57455: IFFALSE 57498
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57457: LD_VAR 0 4
57461: PPUSH
57462: LD_VAR 0 2
57466: PUSH
57467: LD_VAR 0 9
57471: ARRAY
57472: PUSH
57473: LD_INT 1
57475: ARRAY
57476: PPUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_VAR 0 9
57486: ARRAY
57487: PUSH
57488: LD_INT 2
57490: ARRAY
57491: PPUSH
57492: CALL_OW 114
57496: GO 57512
// SetTag ( i , tag ) ;
57498: LD_VAR 0 4
57502: PPUSH
57503: LD_VAR 0 9
57507: PPUSH
57508: CALL_OW 109
// end else
57512: GO 57585
// if enemy then
57514: LD_VAR 0 5
57518: IFFALSE 57585
// begin if GetWeapon ( i ) = ru_time_lapser then
57520: LD_VAR 0 4
57524: PPUSH
57525: CALL_OW 264
57529: PUSH
57530: LD_INT 49
57532: EQUAL
57533: IFFALSE 57561
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57535: LD_VAR 0 4
57539: PPUSH
57540: LD_VAR 0 5
57544: PPUSH
57545: LD_VAR 0 4
57549: PPUSH
57550: CALL_OW 74
57554: PPUSH
57555: CALL_OW 112
57559: GO 57585
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57561: LD_VAR 0 4
57565: PPUSH
57566: LD_VAR 0 5
57570: PPUSH
57571: LD_VAR 0 4
57575: PPUSH
57576: CALL_OW 74
57580: PPUSH
57581: CALL 58660 0 2
// end ; end ;
57585: GO 57161
57587: POP
57588: POP
// end ;
57589: LD_VAR 0 3
57593: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57594: LD_INT 0
57596: PPUSH
57597: PPUSH
57598: PPUSH
// if not unit or IsInUnit ( unit ) then
57599: LD_VAR 0 1
57603: NOT
57604: PUSH
57605: LD_VAR 0 1
57609: PPUSH
57610: CALL_OW 310
57614: OR
57615: IFFALSE 57619
// exit ;
57617: GO 57710
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57619: LD_ADDR_VAR 0 4
57623: PUSH
57624: LD_VAR 0 1
57628: PPUSH
57629: CALL_OW 250
57633: PPUSH
57634: LD_VAR 0 2
57638: PPUSH
57639: LD_INT 1
57641: PPUSH
57642: CALL_OW 272
57646: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57647: LD_ADDR_VAR 0 5
57651: PUSH
57652: LD_VAR 0 1
57656: PPUSH
57657: CALL_OW 251
57661: PPUSH
57662: LD_VAR 0 2
57666: PPUSH
57667: LD_INT 1
57669: PPUSH
57670: CALL_OW 273
57674: ST_TO_ADDR
// if ValidHex ( x , y ) then
57675: LD_VAR 0 4
57679: PPUSH
57680: LD_VAR 0 5
57684: PPUSH
57685: CALL_OW 488
57689: IFFALSE 57710
// ComTurnXY ( unit , x , y ) ;
57691: LD_VAR 0 1
57695: PPUSH
57696: LD_VAR 0 4
57700: PPUSH
57701: LD_VAR 0 5
57705: PPUSH
57706: CALL_OW 118
// end ;
57710: LD_VAR 0 3
57714: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57715: LD_INT 0
57717: PPUSH
57718: PPUSH
// result := false ;
57719: LD_ADDR_VAR 0 3
57723: PUSH
57724: LD_INT 0
57726: ST_TO_ADDR
// if not units then
57727: LD_VAR 0 2
57731: NOT
57732: IFFALSE 57736
// exit ;
57734: GO 57781
// for i in units do
57736: LD_ADDR_VAR 0 4
57740: PUSH
57741: LD_VAR 0 2
57745: PUSH
57746: FOR_IN
57747: IFFALSE 57779
// if See ( side , i ) then
57749: LD_VAR 0 1
57753: PPUSH
57754: LD_VAR 0 4
57758: PPUSH
57759: CALL_OW 292
57763: IFFALSE 57777
// begin result := true ;
57765: LD_ADDR_VAR 0 3
57769: PUSH
57770: LD_INT 1
57772: ST_TO_ADDR
// exit ;
57773: POP
57774: POP
57775: GO 57781
// end ;
57777: GO 57746
57779: POP
57780: POP
// end ;
57781: LD_VAR 0 3
57785: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57786: LD_INT 0
57788: PPUSH
57789: PPUSH
57790: PPUSH
57791: PPUSH
// if not unit or not points then
57792: LD_VAR 0 1
57796: NOT
57797: PUSH
57798: LD_VAR 0 2
57802: NOT
57803: OR
57804: IFFALSE 57808
// exit ;
57806: GO 57898
// dist := 99999 ;
57808: LD_ADDR_VAR 0 5
57812: PUSH
57813: LD_INT 99999
57815: ST_TO_ADDR
// for i in points do
57816: LD_ADDR_VAR 0 4
57820: PUSH
57821: LD_VAR 0 2
57825: PUSH
57826: FOR_IN
57827: IFFALSE 57896
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57829: LD_ADDR_VAR 0 6
57833: PUSH
57834: LD_VAR 0 1
57838: PPUSH
57839: LD_VAR 0 4
57843: PUSH
57844: LD_INT 1
57846: ARRAY
57847: PPUSH
57848: LD_VAR 0 4
57852: PUSH
57853: LD_INT 2
57855: ARRAY
57856: PPUSH
57857: CALL_OW 297
57861: ST_TO_ADDR
// if tmpDist < dist then
57862: LD_VAR 0 6
57866: PUSH
57867: LD_VAR 0 5
57871: LESS
57872: IFFALSE 57894
// begin result := i ;
57874: LD_ADDR_VAR 0 3
57878: PUSH
57879: LD_VAR 0 4
57883: ST_TO_ADDR
// dist := tmpDist ;
57884: LD_ADDR_VAR 0 5
57888: PUSH
57889: LD_VAR 0 6
57893: ST_TO_ADDR
// end ; end ;
57894: GO 57826
57896: POP
57897: POP
// end ;
57898: LD_VAR 0 3
57902: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57903: LD_INT 0
57905: PPUSH
// uc_side := side ;
57906: LD_ADDR_OWVAR 20
57910: PUSH
57911: LD_VAR 0 1
57915: ST_TO_ADDR
// uc_nation := 3 ;
57916: LD_ADDR_OWVAR 21
57920: PUSH
57921: LD_INT 3
57923: ST_TO_ADDR
// vc_chassis := 25 ;
57924: LD_ADDR_OWVAR 37
57928: PUSH
57929: LD_INT 25
57931: ST_TO_ADDR
// vc_engine := engine_siberite ;
57932: LD_ADDR_OWVAR 39
57936: PUSH
57937: LD_INT 3
57939: ST_TO_ADDR
// vc_control := control_computer ;
57940: LD_ADDR_OWVAR 38
57944: PUSH
57945: LD_INT 3
57947: ST_TO_ADDR
// vc_weapon := 59 ;
57948: LD_ADDR_OWVAR 40
57952: PUSH
57953: LD_INT 59
57955: ST_TO_ADDR
// result := CreateVehicle ;
57956: LD_ADDR_VAR 0 5
57960: PUSH
57961: CALL_OW 45
57965: ST_TO_ADDR
// SetDir ( result , d ) ;
57966: LD_VAR 0 5
57970: PPUSH
57971: LD_VAR 0 4
57975: PPUSH
57976: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57980: LD_VAR 0 5
57984: PPUSH
57985: LD_VAR 0 2
57989: PPUSH
57990: LD_VAR 0 3
57994: PPUSH
57995: LD_INT 0
57997: PPUSH
57998: CALL_OW 48
// end ;
58002: LD_VAR 0 5
58006: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58007: LD_INT 0
58009: PPUSH
58010: PPUSH
58011: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58012: LD_ADDR_VAR 0 2
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58035: LD_VAR 0 1
58039: NOT
58040: PUSH
58041: LD_VAR 0 1
58045: PPUSH
58046: CALL_OW 264
58050: PUSH
58051: LD_INT 12
58053: PUSH
58054: LD_INT 51
58056: PUSH
58057: LD_INT 32
58059: PUSH
58060: LD_INT 89
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: IN
58069: NOT
58070: OR
58071: IFFALSE 58075
// exit ;
58073: GO 58173
// for i := 1 to 3 do
58075: LD_ADDR_VAR 0 3
58079: PUSH
58080: DOUBLE
58081: LD_INT 1
58083: DEC
58084: ST_TO_ADDR
58085: LD_INT 3
58087: PUSH
58088: FOR_TO
58089: IFFALSE 58171
// begin tmp := GetCargo ( cargo , i ) ;
58091: LD_ADDR_VAR 0 4
58095: PUSH
58096: LD_VAR 0 1
58100: PPUSH
58101: LD_VAR 0 3
58105: PPUSH
58106: CALL_OW 289
58110: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58111: LD_ADDR_VAR 0 2
58115: PUSH
58116: LD_VAR 0 2
58120: PPUSH
58121: LD_VAR 0 3
58125: PPUSH
58126: LD_VAR 0 4
58130: PPUSH
58131: CALL_OW 1
58135: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58136: LD_ADDR_VAR 0 2
58140: PUSH
58141: LD_VAR 0 2
58145: PPUSH
58146: LD_INT 4
58148: PPUSH
58149: LD_VAR 0 2
58153: PUSH
58154: LD_INT 4
58156: ARRAY
58157: PUSH
58158: LD_VAR 0 4
58162: PLUS
58163: PPUSH
58164: CALL_OW 1
58168: ST_TO_ADDR
// end ;
58169: GO 58088
58171: POP
58172: POP
// end ;
58173: LD_VAR 0 2
58177: RET
// export function Length ( array ) ; begin
58178: LD_INT 0
58180: PPUSH
// result := array + 0 ;
58181: LD_ADDR_VAR 0 2
58185: PUSH
58186: LD_VAR 0 1
58190: PUSH
58191: LD_INT 0
58193: PLUS
58194: ST_TO_ADDR
// end ;
58195: LD_VAR 0 2
58199: RET
// export function PrepareArray ( array ) ; begin
58200: LD_INT 0
58202: PPUSH
// result := array diff 0 ;
58203: LD_ADDR_VAR 0 2
58207: PUSH
58208: LD_VAR 0 1
58212: PUSH
58213: LD_INT 0
58215: DIFF
58216: ST_TO_ADDR
// if not result [ 1 ] then
58217: LD_VAR 0 2
58221: PUSH
58222: LD_INT 1
58224: ARRAY
58225: NOT
58226: IFFALSE 58246
// result := Delete ( result , 1 ) ;
58228: LD_ADDR_VAR 0 2
58232: PUSH
58233: LD_VAR 0 2
58237: PPUSH
58238: LD_INT 1
58240: PPUSH
58241: CALL_OW 3
58245: ST_TO_ADDR
// end ;
58246: LD_VAR 0 2
58250: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58251: LD_INT 0
58253: PPUSH
58254: PPUSH
58255: PPUSH
58256: PPUSH
// sibRocketRange := 25 ;
58257: LD_ADDR_VAR 0 6
58261: PUSH
58262: LD_INT 25
58264: ST_TO_ADDR
// result := false ;
58265: LD_ADDR_VAR 0 4
58269: PUSH
58270: LD_INT 0
58272: ST_TO_ADDR
// for i := 0 to 5 do
58273: LD_ADDR_VAR 0 5
58277: PUSH
58278: DOUBLE
58279: LD_INT 0
58281: DEC
58282: ST_TO_ADDR
58283: LD_INT 5
58285: PUSH
58286: FOR_TO
58287: IFFALSE 58354
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58289: LD_VAR 0 1
58293: PPUSH
58294: LD_VAR 0 5
58298: PPUSH
58299: LD_VAR 0 6
58303: PPUSH
58304: CALL_OW 272
58308: PPUSH
58309: LD_VAR 0 2
58313: PPUSH
58314: LD_VAR 0 5
58318: PPUSH
58319: LD_VAR 0 6
58323: PPUSH
58324: CALL_OW 273
58328: PPUSH
58329: LD_VAR 0 3
58333: PPUSH
58334: CALL_OW 309
58338: IFFALSE 58352
// begin result := true ;
58340: LD_ADDR_VAR 0 4
58344: PUSH
58345: LD_INT 1
58347: ST_TO_ADDR
// exit ;
58348: POP
58349: POP
58350: GO 58356
// end ;
58352: GO 58286
58354: POP
58355: POP
// end ;
58356: LD_VAR 0 4
58360: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58361: LD_INT 0
58363: PPUSH
58364: PPUSH
58365: PPUSH
// if btype = b_depot then
58366: LD_VAR 0 2
58370: PUSH
58371: LD_INT 0
58373: EQUAL
58374: IFFALSE 58386
// begin result := true ;
58376: LD_ADDR_VAR 0 3
58380: PUSH
58381: LD_INT 1
58383: ST_TO_ADDR
// exit ;
58384: GO 58502
// end ; pom := GetBase ( depot ) ;
58386: LD_ADDR_VAR 0 4
58390: PUSH
58391: LD_VAR 0 1
58395: PPUSH
58396: CALL_OW 274
58400: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58401: LD_ADDR_VAR 0 5
58405: PUSH
58406: LD_VAR 0 2
58410: PPUSH
58411: LD_VAR 0 1
58415: PPUSH
58416: CALL_OW 248
58420: PPUSH
58421: CALL_OW 450
58425: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58426: LD_ADDR_VAR 0 3
58430: PUSH
58431: LD_VAR 0 4
58435: PPUSH
58436: LD_INT 1
58438: PPUSH
58439: CALL_OW 275
58443: PUSH
58444: LD_VAR 0 5
58448: PUSH
58449: LD_INT 1
58451: ARRAY
58452: GREATEREQUAL
58453: PUSH
58454: LD_VAR 0 4
58458: PPUSH
58459: LD_INT 2
58461: PPUSH
58462: CALL_OW 275
58466: PUSH
58467: LD_VAR 0 5
58471: PUSH
58472: LD_INT 2
58474: ARRAY
58475: GREATEREQUAL
58476: AND
58477: PUSH
58478: LD_VAR 0 4
58482: PPUSH
58483: LD_INT 3
58485: PPUSH
58486: CALL_OW 275
58490: PUSH
58491: LD_VAR 0 5
58495: PUSH
58496: LD_INT 3
58498: ARRAY
58499: GREATEREQUAL
58500: AND
58501: ST_TO_ADDR
// end ;
58502: LD_VAR 0 3
58506: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58507: LD_INT 0
58509: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58510: LD_VAR 0 1
58514: PPUSH
58515: LD_VAR 0 2
58519: PPUSH
58520: LD_INT 0
58522: PPUSH
58523: LD_INT 0
58525: PPUSH
58526: LD_INT 1
58528: PPUSH
58529: LD_INT 0
58531: PPUSH
58532: CALL_OW 587
// end ;
58536: LD_VAR 0 3
58540: RET
// export function CenterOnNow ( unit ) ; begin
58541: LD_INT 0
58543: PPUSH
// result := IsInUnit ( unit ) ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_VAR 0 1
58553: PPUSH
58554: CALL_OW 310
58558: ST_TO_ADDR
// if not result then
58559: LD_VAR 0 2
58563: NOT
58564: IFFALSE 58576
// result := unit ;
58566: LD_ADDR_VAR 0 2
58570: PUSH
58571: LD_VAR 0 1
58575: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58576: LD_VAR 0 1
58580: PPUSH
58581: CALL_OW 87
// end ;
58585: LD_VAR 0 2
58589: RET
// export function ComMoveHex ( unit , hex ) ; begin
58590: LD_INT 0
58592: PPUSH
// if not hex then
58593: LD_VAR 0 2
58597: NOT
58598: IFFALSE 58602
// exit ;
58600: GO 58655
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58602: LD_VAR 0 2
58606: PUSH
58607: LD_INT 1
58609: ARRAY
58610: PPUSH
58611: LD_VAR 0 2
58615: PUSH
58616: LD_INT 2
58618: ARRAY
58619: PPUSH
58620: CALL_OW 428
58624: IFFALSE 58628
// exit ;
58626: GO 58655
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58628: LD_VAR 0 1
58632: PPUSH
58633: LD_VAR 0 2
58637: PUSH
58638: LD_INT 1
58640: ARRAY
58641: PPUSH
58642: LD_VAR 0 2
58646: PUSH
58647: LD_INT 2
58649: ARRAY
58650: PPUSH
58651: CALL_OW 111
// end ;
58655: LD_VAR 0 3
58659: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58660: LD_INT 0
58662: PPUSH
58663: PPUSH
58664: PPUSH
// if not unit or not enemy then
58665: LD_VAR 0 1
58669: NOT
58670: PUSH
58671: LD_VAR 0 2
58675: NOT
58676: OR
58677: IFFALSE 58681
// exit ;
58679: GO 58805
// x := GetX ( enemy ) ;
58681: LD_ADDR_VAR 0 4
58685: PUSH
58686: LD_VAR 0 2
58690: PPUSH
58691: CALL_OW 250
58695: ST_TO_ADDR
// y := GetY ( enemy ) ;
58696: LD_ADDR_VAR 0 5
58700: PUSH
58701: LD_VAR 0 2
58705: PPUSH
58706: CALL_OW 251
58710: ST_TO_ADDR
// if ValidHex ( x , y ) then
58711: LD_VAR 0 4
58715: PPUSH
58716: LD_VAR 0 5
58720: PPUSH
58721: CALL_OW 488
58725: IFFALSE 58805
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58727: LD_VAR 0 2
58731: PPUSH
58732: CALL_OW 247
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: LD_INT 2
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: IN
58747: PUSH
58748: LD_VAR 0 1
58752: PPUSH
58753: CALL_OW 255
58757: PPUSH
58758: LD_VAR 0 2
58762: PPUSH
58763: CALL_OW 292
58767: OR
58768: IFFALSE 58786
// ComAttackUnit ( unit , enemy ) else
58770: LD_VAR 0 1
58774: PPUSH
58775: LD_VAR 0 2
58779: PPUSH
58780: CALL_OW 115
58784: GO 58805
// ComAgressiveMove ( unit , x , y ) ;
58786: LD_VAR 0 1
58790: PPUSH
58791: LD_VAR 0 4
58795: PPUSH
58796: LD_VAR 0 5
58800: PPUSH
58801: CALL_OW 114
// end ;
58805: LD_VAR 0 3
58809: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58810: LD_INT 0
58812: PPUSH
58813: PPUSH
58814: PPUSH
// list := AreaToList ( area , 0 ) ;
58815: LD_ADDR_VAR 0 5
58819: PUSH
58820: LD_VAR 0 1
58824: PPUSH
58825: LD_INT 0
58827: PPUSH
58828: CALL_OW 517
58832: ST_TO_ADDR
// if not list then
58833: LD_VAR 0 5
58837: NOT
58838: IFFALSE 58842
// exit ;
58840: GO 58972
// if all then
58842: LD_VAR 0 2
58846: IFFALSE 58934
// begin for i := 1 to list [ 1 ] do
58848: LD_ADDR_VAR 0 4
58852: PUSH
58853: DOUBLE
58854: LD_INT 1
58856: DEC
58857: ST_TO_ADDR
58858: LD_VAR 0 5
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PUSH
58867: FOR_TO
58868: IFFALSE 58930
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58870: LD_ADDR_VAR 0 3
58874: PUSH
58875: LD_VAR 0 3
58879: PPUSH
58880: LD_VAR 0 3
58884: PUSH
58885: LD_INT 1
58887: PLUS
58888: PPUSH
58889: LD_VAR 0 5
58893: PUSH
58894: LD_INT 1
58896: ARRAY
58897: PUSH
58898: LD_VAR 0 4
58902: ARRAY
58903: PUSH
58904: LD_VAR 0 5
58908: PUSH
58909: LD_INT 2
58911: ARRAY
58912: PUSH
58913: LD_VAR 0 4
58917: ARRAY
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PPUSH
58923: CALL_OW 1
58927: ST_TO_ADDR
58928: GO 58867
58930: POP
58931: POP
// exit ;
58932: GO 58972
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58934: LD_ADDR_VAR 0 3
58938: PUSH
58939: LD_VAR 0 5
58943: PUSH
58944: LD_INT 1
58946: ARRAY
58947: PUSH
58948: LD_INT 1
58950: ARRAY
58951: PUSH
58952: LD_VAR 0 5
58956: PUSH
58957: LD_INT 2
58959: ARRAY
58960: PUSH
58961: LD_INT 1
58963: ARRAY
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: ST_TO_ADDR
// end ;
58972: LD_VAR 0 3
58976: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58977: LD_INT 0
58979: PPUSH
58980: PPUSH
// list := AreaToList ( area , 0 ) ;
58981: LD_ADDR_VAR 0 4
58985: PUSH
58986: LD_VAR 0 1
58990: PPUSH
58991: LD_INT 0
58993: PPUSH
58994: CALL_OW 517
58998: ST_TO_ADDR
// if not list then
58999: LD_VAR 0 4
59003: NOT
59004: IFFALSE 59008
// exit ;
59006: GO 59049
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59008: LD_ADDR_VAR 0 3
59012: PUSH
59013: LD_VAR 0 4
59017: PUSH
59018: LD_INT 1
59020: ARRAY
59021: PUSH
59022: LD_INT 1
59024: ARRAY
59025: PUSH
59026: LD_VAR 0 4
59030: PUSH
59031: LD_INT 2
59033: ARRAY
59034: PUSH
59035: LD_INT 1
59037: ARRAY
59038: PUSH
59039: LD_VAR 0 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// end ;
59049: LD_VAR 0 3
59053: RET
// export function First ( array ) ; begin
59054: LD_INT 0
59056: PPUSH
// if not array then
59057: LD_VAR 0 1
59061: NOT
59062: IFFALSE 59066
// exit ;
59064: GO 59080
// result := array [ 1 ] ;
59066: LD_ADDR_VAR 0 2
59070: PUSH
59071: LD_VAR 0 1
59075: PUSH
59076: LD_INT 1
59078: ARRAY
59079: ST_TO_ADDR
// end ;
59080: LD_VAR 0 2
59084: RET
// export function Last ( array ) ; begin
59085: LD_INT 0
59087: PPUSH
// if not array then
59088: LD_VAR 0 1
59092: NOT
59093: IFFALSE 59097
// exit ;
59095: GO 59113
// result := array [ array ] ;
59097: LD_ADDR_VAR 0 2
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_VAR 0 1
59111: ARRAY
59112: ST_TO_ADDR
// end ;
59113: LD_VAR 0 2
59117: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59118: LD_INT 0
59120: PPUSH
59121: PPUSH
// result := [ ] ;
59122: LD_ADDR_VAR 0 5
59126: PUSH
59127: EMPTY
59128: ST_TO_ADDR
// if not array then
59129: LD_VAR 0 1
59133: NOT
59134: IFFALSE 59138
// exit ;
59136: GO 59250
// for i := 1 to array do
59138: LD_ADDR_VAR 0 6
59142: PUSH
59143: DOUBLE
59144: LD_INT 1
59146: DEC
59147: ST_TO_ADDR
59148: LD_VAR 0 1
59152: PUSH
59153: FOR_TO
59154: IFFALSE 59248
// if array [ i ] [ index ] = value then
59156: LD_VAR 0 1
59160: PUSH
59161: LD_VAR 0 6
59165: ARRAY
59166: PUSH
59167: LD_VAR 0 2
59171: ARRAY
59172: PUSH
59173: LD_VAR 0 3
59177: EQUAL
59178: IFFALSE 59246
// begin if indexColumn then
59180: LD_VAR 0 4
59184: IFFALSE 59220
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59186: LD_ADDR_VAR 0 5
59190: PUSH
59191: LD_VAR 0 5
59195: PPUSH
59196: LD_VAR 0 1
59200: PUSH
59201: LD_VAR 0 6
59205: ARRAY
59206: PUSH
59207: LD_VAR 0 4
59211: ARRAY
59212: PPUSH
59213: CALL 54438 0 2
59217: ST_TO_ADDR
59218: GO 59246
// result := Join ( result , array [ i ] ) ;
59220: LD_ADDR_VAR 0 5
59224: PUSH
59225: LD_VAR 0 5
59229: PPUSH
59230: LD_VAR 0 1
59234: PUSH
59235: LD_VAR 0 6
59239: ARRAY
59240: PPUSH
59241: CALL 54438 0 2
59245: ST_TO_ADDR
// end ;
59246: GO 59153
59248: POP
59249: POP
// end ;
59250: LD_VAR 0 5
59254: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59255: LD_INT 0
59257: PPUSH
// if not vehicles or not parkingPoint then
59258: LD_VAR 0 1
59262: NOT
59263: PUSH
59264: LD_VAR 0 2
59268: NOT
59269: OR
59270: IFFALSE 59274
// exit ;
59272: GO 59372
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59274: LD_ADDR_VAR 0 1
59278: PUSH
59279: LD_VAR 0 1
59283: PPUSH
59284: LD_INT 50
59286: PUSH
59287: EMPTY
59288: LIST
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: LD_INT 92
59295: PUSH
59296: LD_VAR 0 2
59300: PUSH
59301: LD_INT 1
59303: ARRAY
59304: PUSH
59305: LD_VAR 0 2
59309: PUSH
59310: LD_INT 2
59312: ARRAY
59313: PUSH
59314: LD_INT 8
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PPUSH
59331: CALL_OW 72
59335: ST_TO_ADDR
// if not vehicles then
59336: LD_VAR 0 1
59340: NOT
59341: IFFALSE 59345
// exit ;
59343: GO 59372
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59345: LD_VAR 0 1
59349: PPUSH
59350: LD_VAR 0 2
59354: PUSH
59355: LD_INT 1
59357: ARRAY
59358: PPUSH
59359: LD_VAR 0 2
59363: PUSH
59364: LD_INT 2
59366: ARRAY
59367: PPUSH
59368: CALL_OW 111
// end ;
59372: LD_VAR 0 3
59376: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59377: LD_INT 0
59379: PPUSH
59380: PPUSH
59381: PPUSH
// if not side or not area then
59382: LD_VAR 0 1
59386: NOT
59387: PUSH
59388: LD_VAR 0 2
59392: NOT
59393: OR
59394: IFFALSE 59398
// exit ;
59396: GO 59517
// tmp := AreaToList ( area , 0 ) ;
59398: LD_ADDR_VAR 0 5
59402: PUSH
59403: LD_VAR 0 2
59407: PPUSH
59408: LD_INT 0
59410: PPUSH
59411: CALL_OW 517
59415: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59416: LD_ADDR_VAR 0 4
59420: PUSH
59421: DOUBLE
59422: LD_INT 1
59424: DEC
59425: ST_TO_ADDR
59426: LD_VAR 0 5
59430: PUSH
59431: LD_INT 1
59433: ARRAY
59434: PUSH
59435: FOR_TO
59436: IFFALSE 59515
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59438: LD_VAR 0 5
59442: PUSH
59443: LD_INT 1
59445: ARRAY
59446: PUSH
59447: LD_VAR 0 4
59451: ARRAY
59452: PPUSH
59453: LD_VAR 0 5
59457: PUSH
59458: LD_INT 2
59460: ARRAY
59461: PUSH
59462: LD_VAR 0 4
59466: ARRAY
59467: PPUSH
59468: CALL_OW 351
59472: IFFALSE 59513
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59474: LD_VAR 0 5
59478: PUSH
59479: LD_INT 1
59481: ARRAY
59482: PUSH
59483: LD_VAR 0 4
59487: ARRAY
59488: PPUSH
59489: LD_VAR 0 5
59493: PUSH
59494: LD_INT 2
59496: ARRAY
59497: PUSH
59498: LD_VAR 0 4
59502: ARRAY
59503: PPUSH
59504: LD_VAR 0 1
59508: PPUSH
59509: CALL_OW 244
// end ;
59513: GO 59435
59515: POP
59516: POP
// end ; end_of_file
59517: LD_VAR 0 3
59521: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59522: LD_INT 0
59524: PPUSH
// ComRadiation ( un ) ;
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL 60511 0 1
// end ;
59534: LD_VAR 0 2
59538: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59539: LD_INT 0
59541: PPUSH
// ComRadiation ( un ) ;
59542: LD_VAR 0 1
59546: PPUSH
59547: CALL 60511 0 1
// end ;
59551: LD_VAR 0 2
59555: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59556: LD_INT 0
59558: PPUSH
// end ;
59559: LD_VAR 0 4
59563: RET
// export function SOS_Command ( cmd ) ; begin
59564: LD_INT 0
59566: PPUSH
// end ;
59567: LD_VAR 0 2
59571: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59572: LD_INT 0
59574: PPUSH
// end ;
59575: LD_VAR 0 6
59579: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
59580: LD_INT 0
59582: PPUSH
59583: PPUSH
59584: PPUSH
59585: PPUSH
59586: PPUSH
// if not vehicle or not factory then
59587: LD_VAR 0 1
59591: NOT
59592: PUSH
59593: LD_VAR 0 2
59597: NOT
59598: OR
59599: IFFALSE 59603
// exit ;
59601: GO 60102
// if not factoryWaypoints then
59603: LD_EXP 62
59607: NOT
59608: IFFALSE 59612
// exit ;
59610: GO 60102
// for i := 1 to Count ( factoryWaypoints ) do
59612: LD_ADDR_VAR 0 4
59616: PUSH
59617: DOUBLE
59618: LD_INT 1
59620: DEC
59621: ST_TO_ADDR
59622: LD_EXP 62
59626: PPUSH
59627: CALL 18829 0 1
59631: PUSH
59632: FOR_TO
59633: IFFALSE 60100
// if factoryWaypoints [ i ] [ 2 ] = factory then
59635: LD_EXP 62
59639: PUSH
59640: LD_VAR 0 4
59644: ARRAY
59645: PUSH
59646: LD_INT 2
59648: ARRAY
59649: PUSH
59650: LD_VAR 0 2
59654: EQUAL
59655: IFFALSE 60098
// begin if GetControl ( vehicle ) = control_manual then
59657: LD_VAR 0 1
59661: PPUSH
59662: CALL_OW 263
59666: PUSH
59667: LD_INT 1
59669: EQUAL
59670: IFFALSE 59981
// begin driver := IsDrivenBy ( vehicle ) ;
59672: LD_ADDR_VAR 0 6
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL_OW 311
59686: ST_TO_ADDR
// tag := GetTag ( driver ) ;
59687: LD_ADDR_VAR 0 5
59691: PUSH
59692: LD_VAR 0 6
59696: PPUSH
59697: CALL_OW 110
59701: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
59702: LD_VAR 0 5
59706: PUSH
59707: LD_INT 501
59709: EQUAL
59710: PUSH
59711: LD_VAR 0 1
59715: PPUSH
59716: CALL_OW 110
59720: PUSH
59721: LD_INT 501
59723: EQUAL
59724: OR
59725: IFFALSE 59731
// exit ;
59727: POP
59728: POP
59729: GO 60102
// if not HasTask ( driver ) then
59731: LD_VAR 0 6
59735: PPUSH
59736: CALL_OW 314
59740: NOT
59741: IFFALSE 59979
// begin SetTag ( driver , tDriver ) ;
59743: LD_VAR 0 6
59747: PPUSH
59748: LD_INT 501
59750: PPUSH
59751: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
59755: LD_VAR 0 1
59759: PPUSH
59760: LD_INT 501
59762: PPUSH
59763: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59767: LD_ADDR_VAR 0 7
59771: PUSH
59772: LD_EXP 62
59776: PUSH
59777: LD_VAR 0 4
59781: ARRAY
59782: PUSH
59783: LD_INT 3
59785: ARRAY
59786: PPUSH
59787: LD_EXP 62
59791: PUSH
59792: LD_VAR 0 4
59796: ARRAY
59797: PUSH
59798: LD_INT 4
59800: ARRAY
59801: PPUSH
59802: CALL_OW 428
59806: ST_TO_ADDR
// if hex then
59807: LD_VAR 0 7
59811: IFFALSE 59829
// ComMoveUnit ( driver , hex ) else
59813: LD_VAR 0 6
59817: PPUSH
59818: LD_VAR 0 7
59822: PPUSH
59823: CALL_OW 112
59827: GO 59868
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59829: LD_VAR 0 6
59833: PPUSH
59834: LD_EXP 62
59838: PUSH
59839: LD_VAR 0 4
59843: ARRAY
59844: PUSH
59845: LD_INT 3
59847: ARRAY
59848: PPUSH
59849: LD_EXP 62
59853: PUSH
59854: LD_VAR 0 4
59858: ARRAY
59859: PUSH
59860: LD_INT 4
59862: ARRAY
59863: PPUSH
59864: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59868: LD_VAR 0 6
59872: PPUSH
59873: CALL_OW 181
// if Multiplayer then
59877: LD_OWVAR 4
59881: IFFALSE 59930
// begin repeat wait ( 10 ) ;
59883: LD_INT 10
59885: PPUSH
59886: CALL_OW 67
// until not IsInUnit ( driver ) ;
59890: LD_VAR 0 6
59894: PPUSH
59895: CALL_OW 310
59899: NOT
59900: IFFALSE 59883
// if not HasTask ( driver ) then
59902: LD_VAR 0 6
59906: PPUSH
59907: CALL_OW 314
59911: NOT
59912: IFFALSE 59928
// ComEnterUnit ( driver , factory ) ;
59914: LD_VAR 0 6
59918: PPUSH
59919: LD_VAR 0 2
59923: PPUSH
59924: CALL_OW 120
// end else
59928: GO 59944
// AddComEnterUnit ( driver , factory ) ;
59930: LD_VAR 0 6
59934: PPUSH
59935: LD_VAR 0 2
59939: PPUSH
59940: CALL_OW 180
// wait ( 0 0$1 ) ;
59944: LD_INT 35
59946: PPUSH
59947: CALL_OW 67
// SetTag ( driver , tag ) ;
59951: LD_VAR 0 6
59955: PPUSH
59956: LD_VAR 0 5
59960: PPUSH
59961: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
59965: LD_VAR 0 1
59969: PPUSH
59970: LD_INT 0
59972: PPUSH
59973: CALL_OW 109
// break ;
59977: GO 60100
// end ; end else
59979: GO 60098
// if GetControl ( vehicle ) = control_remote then
59981: LD_VAR 0 1
59985: PPUSH
59986: CALL_OW 263
59990: PUSH
59991: LD_INT 2
59993: EQUAL
59994: IFFALSE 60057
// begin wait ( 0 0$2 ) ;
59996: LD_INT 70
59998: PPUSH
59999: CALL_OW 67
// if Connect ( vehicle ) then
60003: LD_VAR 0 1
60007: PPUSH
60008: CALL 25035 0 1
60012: IFFALSE 60053
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60014: LD_VAR 0 1
60018: PPUSH
60019: LD_EXP 62
60023: PUSH
60024: LD_VAR 0 4
60028: ARRAY
60029: PUSH
60030: LD_INT 3
60032: ARRAY
60033: PPUSH
60034: LD_EXP 62
60038: PUSH
60039: LD_VAR 0 4
60043: ARRAY
60044: PUSH
60045: LD_INT 4
60047: ARRAY
60048: PPUSH
60049: CALL_OW 171
// break ;
60053: GO 60100
// end else
60055: GO 60098
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60057: LD_VAR 0 1
60061: PPUSH
60062: LD_EXP 62
60066: PUSH
60067: LD_VAR 0 4
60071: ARRAY
60072: PUSH
60073: LD_INT 3
60075: ARRAY
60076: PPUSH
60077: LD_EXP 62
60081: PUSH
60082: LD_VAR 0 4
60086: ARRAY
60087: PUSH
60088: LD_INT 4
60090: ARRAY
60091: PPUSH
60092: CALL_OW 171
// break ;
60096: GO 60100
// end ; end ;
60098: GO 59632
60100: POP
60101: POP
// end ;
60102: LD_VAR 0 3
60106: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60107: LD_INT 0
60109: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60110: LD_VAR 0 1
60114: PUSH
60115: LD_INT 250
60117: EQUAL
60118: PUSH
60119: LD_VAR 0 2
60123: PPUSH
60124: CALL_OW 264
60128: PUSH
60129: LD_INT 81
60131: EQUAL
60132: AND
60133: IFFALSE 60154
// MinerPlaceMine ( unit , x , y ) ;
60135: LD_VAR 0 2
60139: PPUSH
60140: LD_VAR 0 4
60144: PPUSH
60145: LD_VAR 0 5
60149: PPUSH
60150: CALL 63246 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60154: LD_VAR 0 1
60158: PUSH
60159: LD_INT 251
60161: EQUAL
60162: PUSH
60163: LD_VAR 0 2
60167: PPUSH
60168: CALL_OW 264
60172: PUSH
60173: LD_INT 81
60175: EQUAL
60176: AND
60177: IFFALSE 60198
// MinerDetonateMine ( unit , x , y ) ;
60179: LD_VAR 0 2
60183: PPUSH
60184: LD_VAR 0 4
60188: PPUSH
60189: LD_VAR 0 5
60193: PPUSH
60194: CALL 63521 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60198: LD_VAR 0 1
60202: PUSH
60203: LD_INT 252
60205: EQUAL
60206: PUSH
60207: LD_VAR 0 2
60211: PPUSH
60212: CALL_OW 264
60216: PUSH
60217: LD_INT 81
60219: EQUAL
60220: AND
60221: IFFALSE 60242
// MinerCreateMinefield ( unit , x , y ) ;
60223: LD_VAR 0 2
60227: PPUSH
60228: LD_VAR 0 4
60232: PPUSH
60233: LD_VAR 0 5
60237: PPUSH
60238: CALL 63938 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60242: LD_VAR 0 1
60246: PUSH
60247: LD_INT 253
60249: EQUAL
60250: PUSH
60251: LD_VAR 0 2
60255: PPUSH
60256: CALL_OW 257
60260: PUSH
60261: LD_INT 5
60263: EQUAL
60264: AND
60265: IFFALSE 60286
// ComBinocular ( unit , x , y ) ;
60267: LD_VAR 0 2
60271: PPUSH
60272: LD_VAR 0 4
60276: PPUSH
60277: LD_VAR 0 5
60281: PPUSH
60282: CALL 64307 0 3
// if selectedUnit then
60286: LD_VAR 0 3
60290: IFFALSE 60346
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60292: LD_VAR 0 1
60296: PUSH
60297: LD_INT 254
60299: EQUAL
60300: PUSH
60301: LD_VAR 0 2
60305: PPUSH
60306: CALL_OW 264
60310: PUSH
60311: LD_INT 99
60313: EQUAL
60314: AND
60315: PUSH
60316: LD_VAR 0 3
60320: PPUSH
60321: CALL_OW 263
60325: PUSH
60326: LD_INT 3
60328: EQUAL
60329: AND
60330: IFFALSE 60346
// HackDestroyVehicle ( unit , selectedUnit ) ;
60332: LD_VAR 0 2
60336: PPUSH
60337: LD_VAR 0 3
60341: PPUSH
60342: CALL 62610 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60346: LD_VAR 0 1
60350: PUSH
60351: LD_INT 255
60353: EQUAL
60354: PUSH
60355: LD_VAR 0 2
60359: PPUSH
60360: CALL_OW 264
60364: PUSH
60365: LD_INT 14
60367: PUSH
60368: LD_INT 53
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: IN
60375: AND
60376: PUSH
60377: LD_VAR 0 4
60381: PPUSH
60382: LD_VAR 0 5
60386: PPUSH
60387: CALL_OW 488
60391: AND
60392: IFFALSE 60416
// CutTreeXYR ( unit , x , y , 12 ) ;
60394: LD_VAR 0 2
60398: PPUSH
60399: LD_VAR 0 4
60403: PPUSH
60404: LD_VAR 0 5
60408: PPUSH
60409: LD_INT 12
60411: PPUSH
60412: CALL 60607 0 4
// if cmd = 256 then
60416: LD_VAR 0 1
60420: PUSH
60421: LD_INT 256
60423: EQUAL
60424: IFFALSE 60445
// SetFactoryWaypoint ( unit , x , y ) ;
60426: LD_VAR 0 2
60430: PPUSH
60431: LD_VAR 0 4
60435: PPUSH
60436: LD_VAR 0 5
60440: PPUSH
60441: CALL 65025 0 3
// if cmd = 257 then
60445: LD_VAR 0 1
60449: PUSH
60450: LD_INT 257
60452: EQUAL
60453: IFFALSE 60474
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60455: LD_VAR 0 2
60459: PPUSH
60460: LD_VAR 0 4
60464: PPUSH
60465: LD_VAR 0 5
60469: PPUSH
60470: CALL 65515 0 3
// if cmd = 258 then
60474: LD_VAR 0 1
60478: PUSH
60479: LD_INT 258
60481: EQUAL
60482: IFFALSE 60506
// BurnTreeXYR ( unit , x , y , 8 ) ;
60484: LD_VAR 0 2
60488: PPUSH
60489: LD_VAR 0 4
60493: PPUSH
60494: LD_VAR 0 5
60498: PPUSH
60499: LD_INT 8
60501: PPUSH
60502: CALL 61001 0 4
// end ;
60506: LD_VAR 0 6
60510: RET
// export function ComRadiation ( un ) ; var eff ; begin
60511: LD_INT 0
60513: PPUSH
60514: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60515: LD_VAR 0 1
60519: PPUSH
60520: CALL_OW 264
60524: PUSH
60525: LD_INT 91
60527: NONEQUAL
60528: IFFALSE 60532
// exit ;
60530: GO 60602
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60532: LD_INT 68
60534: PPUSH
60535: LD_VAR 0 1
60539: PPUSH
60540: CALL_OW 255
60544: PPUSH
60545: CALL_OW 321
60549: PUSH
60550: LD_INT 2
60552: EQUAL
60553: IFFALSE 60565
// eff := 70 else
60555: LD_ADDR_VAR 0 3
60559: PUSH
60560: LD_INT 70
60562: ST_TO_ADDR
60563: GO 60573
// eff := 30 ;
60565: LD_ADDR_VAR 0 3
60569: PUSH
60570: LD_INT 30
60572: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60573: LD_VAR 0 1
60577: PPUSH
60578: CALL_OW 250
60582: PPUSH
60583: LD_VAR 0 1
60587: PPUSH
60588: CALL_OW 251
60592: PPUSH
60593: LD_VAR 0 3
60597: PPUSH
60598: CALL_OW 495
// end ;
60602: LD_VAR 0 2
60606: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60607: LD_INT 0
60609: PPUSH
60610: PPUSH
60611: PPUSH
60612: PPUSH
60613: PPUSH
60614: PPUSH
60615: PPUSH
60616: PPUSH
60617: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60618: LD_VAR 0 1
60622: PPUSH
60623: CALL_OW 302
60627: NOT
60628: PUSH
60629: LD_VAR 0 2
60633: PPUSH
60634: LD_VAR 0 3
60638: PPUSH
60639: CALL_OW 488
60643: NOT
60644: OR
60645: PUSH
60646: LD_VAR 0 4
60650: NOT
60651: OR
60652: IFFALSE 60656
// exit ;
60654: GO 60996
// list := [ ] ;
60656: LD_ADDR_VAR 0 13
60660: PUSH
60661: EMPTY
60662: ST_TO_ADDR
// if x - r < 0 then
60663: LD_VAR 0 2
60667: PUSH
60668: LD_VAR 0 4
60672: MINUS
60673: PUSH
60674: LD_INT 0
60676: LESS
60677: IFFALSE 60689
// min_x := 0 else
60679: LD_ADDR_VAR 0 7
60683: PUSH
60684: LD_INT 0
60686: ST_TO_ADDR
60687: GO 60705
// min_x := x - r ;
60689: LD_ADDR_VAR 0 7
60693: PUSH
60694: LD_VAR 0 2
60698: PUSH
60699: LD_VAR 0 4
60703: MINUS
60704: ST_TO_ADDR
// if y - r < 0 then
60705: LD_VAR 0 3
60709: PUSH
60710: LD_VAR 0 4
60714: MINUS
60715: PUSH
60716: LD_INT 0
60718: LESS
60719: IFFALSE 60731
// min_y := 0 else
60721: LD_ADDR_VAR 0 8
60725: PUSH
60726: LD_INT 0
60728: ST_TO_ADDR
60729: GO 60747
// min_y := y - r ;
60731: LD_ADDR_VAR 0 8
60735: PUSH
60736: LD_VAR 0 3
60740: PUSH
60741: LD_VAR 0 4
60745: MINUS
60746: ST_TO_ADDR
// max_x := x + r ;
60747: LD_ADDR_VAR 0 9
60751: PUSH
60752: LD_VAR 0 2
60756: PUSH
60757: LD_VAR 0 4
60761: PLUS
60762: ST_TO_ADDR
// max_y := y + r ;
60763: LD_ADDR_VAR 0 10
60767: PUSH
60768: LD_VAR 0 3
60772: PUSH
60773: LD_VAR 0 4
60777: PLUS
60778: ST_TO_ADDR
// for _x = min_x to max_x do
60779: LD_ADDR_VAR 0 11
60783: PUSH
60784: DOUBLE
60785: LD_VAR 0 7
60789: DEC
60790: ST_TO_ADDR
60791: LD_VAR 0 9
60795: PUSH
60796: FOR_TO
60797: IFFALSE 60914
// for _y = min_y to max_y do
60799: LD_ADDR_VAR 0 12
60803: PUSH
60804: DOUBLE
60805: LD_VAR 0 8
60809: DEC
60810: ST_TO_ADDR
60811: LD_VAR 0 10
60815: PUSH
60816: FOR_TO
60817: IFFALSE 60910
// begin if not ValidHex ( _x , _y ) then
60819: LD_VAR 0 11
60823: PPUSH
60824: LD_VAR 0 12
60828: PPUSH
60829: CALL_OW 488
60833: NOT
60834: IFFALSE 60838
// continue ;
60836: GO 60816
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60838: LD_VAR 0 11
60842: PPUSH
60843: LD_VAR 0 12
60847: PPUSH
60848: CALL_OW 351
60852: PUSH
60853: LD_VAR 0 11
60857: PPUSH
60858: LD_VAR 0 12
60862: PPUSH
60863: CALL_OW 554
60867: AND
60868: IFFALSE 60908
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60870: LD_ADDR_VAR 0 13
60874: PUSH
60875: LD_VAR 0 13
60879: PPUSH
60880: LD_VAR 0 13
60884: PUSH
60885: LD_INT 1
60887: PLUS
60888: PPUSH
60889: LD_VAR 0 11
60893: PUSH
60894: LD_VAR 0 12
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PPUSH
60903: CALL_OW 2
60907: ST_TO_ADDR
// end ;
60908: GO 60816
60910: POP
60911: POP
60912: GO 60796
60914: POP
60915: POP
// if not list then
60916: LD_VAR 0 13
60920: NOT
60921: IFFALSE 60925
// exit ;
60923: GO 60996
// for i in list do
60925: LD_ADDR_VAR 0 6
60929: PUSH
60930: LD_VAR 0 13
60934: PUSH
60935: FOR_IN
60936: IFFALSE 60994
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60938: LD_VAR 0 1
60942: PPUSH
60943: LD_STRING M
60945: PUSH
60946: LD_VAR 0 6
60950: PUSH
60951: LD_INT 1
60953: ARRAY
60954: PUSH
60955: LD_VAR 0 6
60959: PUSH
60960: LD_INT 2
60962: ARRAY
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: PUSH
60985: EMPTY
60986: LIST
60987: PPUSH
60988: CALL_OW 447
60992: GO 60935
60994: POP
60995: POP
// end ;
60996: LD_VAR 0 5
61000: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61001: LD_INT 0
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
61007: PPUSH
61008: PPUSH
61009: PPUSH
61010: PPUSH
61011: PPUSH
61012: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL_OW 302
61022: NOT
61023: PUSH
61024: LD_VAR 0 2
61028: PPUSH
61029: LD_VAR 0 3
61033: PPUSH
61034: CALL_OW 488
61038: NOT
61039: OR
61040: PUSH
61041: LD_VAR 0 4
61045: NOT
61046: OR
61047: IFFALSE 61051
// exit ;
61049: GO 61564
// list := [ ] ;
61051: LD_ADDR_VAR 0 13
61055: PUSH
61056: EMPTY
61057: ST_TO_ADDR
// if x - r < 0 then
61058: LD_VAR 0 2
61062: PUSH
61063: LD_VAR 0 4
61067: MINUS
61068: PUSH
61069: LD_INT 0
61071: LESS
61072: IFFALSE 61084
// min_x := 0 else
61074: LD_ADDR_VAR 0 7
61078: PUSH
61079: LD_INT 0
61081: ST_TO_ADDR
61082: GO 61100
// min_x := x - r ;
61084: LD_ADDR_VAR 0 7
61088: PUSH
61089: LD_VAR 0 2
61093: PUSH
61094: LD_VAR 0 4
61098: MINUS
61099: ST_TO_ADDR
// if y - r < 0 then
61100: LD_VAR 0 3
61104: PUSH
61105: LD_VAR 0 4
61109: MINUS
61110: PUSH
61111: LD_INT 0
61113: LESS
61114: IFFALSE 61126
// min_y := 0 else
61116: LD_ADDR_VAR 0 8
61120: PUSH
61121: LD_INT 0
61123: ST_TO_ADDR
61124: GO 61142
// min_y := y - r ;
61126: LD_ADDR_VAR 0 8
61130: PUSH
61131: LD_VAR 0 3
61135: PUSH
61136: LD_VAR 0 4
61140: MINUS
61141: ST_TO_ADDR
// max_x := x + r ;
61142: LD_ADDR_VAR 0 9
61146: PUSH
61147: LD_VAR 0 2
61151: PUSH
61152: LD_VAR 0 4
61156: PLUS
61157: ST_TO_ADDR
// max_y := y + r ;
61158: LD_ADDR_VAR 0 10
61162: PUSH
61163: LD_VAR 0 3
61167: PUSH
61168: LD_VAR 0 4
61172: PLUS
61173: ST_TO_ADDR
// for _x = min_x to max_x do
61174: LD_ADDR_VAR 0 11
61178: PUSH
61179: DOUBLE
61180: LD_VAR 0 7
61184: DEC
61185: ST_TO_ADDR
61186: LD_VAR 0 9
61190: PUSH
61191: FOR_TO
61192: IFFALSE 61309
// for _y = min_y to max_y do
61194: LD_ADDR_VAR 0 12
61198: PUSH
61199: DOUBLE
61200: LD_VAR 0 8
61204: DEC
61205: ST_TO_ADDR
61206: LD_VAR 0 10
61210: PUSH
61211: FOR_TO
61212: IFFALSE 61305
// begin if not ValidHex ( _x , _y ) then
61214: LD_VAR 0 11
61218: PPUSH
61219: LD_VAR 0 12
61223: PPUSH
61224: CALL_OW 488
61228: NOT
61229: IFFALSE 61233
// continue ;
61231: GO 61211
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61233: LD_VAR 0 11
61237: PPUSH
61238: LD_VAR 0 12
61242: PPUSH
61243: CALL_OW 351
61247: PUSH
61248: LD_VAR 0 11
61252: PPUSH
61253: LD_VAR 0 12
61257: PPUSH
61258: CALL_OW 554
61262: AND
61263: IFFALSE 61303
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61265: LD_ADDR_VAR 0 13
61269: PUSH
61270: LD_VAR 0 13
61274: PPUSH
61275: LD_VAR 0 13
61279: PUSH
61280: LD_INT 1
61282: PLUS
61283: PPUSH
61284: LD_VAR 0 11
61288: PUSH
61289: LD_VAR 0 12
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PPUSH
61298: CALL_OW 2
61302: ST_TO_ADDR
// end ;
61303: GO 61211
61305: POP
61306: POP
61307: GO 61191
61309: POP
61310: POP
// if not list then
61311: LD_VAR 0 13
61315: NOT
61316: IFFALSE 61320
// exit ;
61318: GO 61564
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61320: LD_ADDR_VAR 0 13
61324: PUSH
61325: LD_VAR 0 1
61329: PPUSH
61330: LD_VAR 0 13
61334: PPUSH
61335: LD_INT 1
61337: PPUSH
61338: LD_INT 1
61340: PPUSH
61341: CALL 22177 0 4
61345: ST_TO_ADDR
// ComStop ( flame ) ;
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 141
// for i in list do
61355: LD_ADDR_VAR 0 6
61359: PUSH
61360: LD_VAR 0 13
61364: PUSH
61365: FOR_IN
61366: IFFALSE 61397
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61368: LD_VAR 0 1
61372: PPUSH
61373: LD_VAR 0 6
61377: PUSH
61378: LD_INT 1
61380: ARRAY
61381: PPUSH
61382: LD_VAR 0 6
61386: PUSH
61387: LD_INT 2
61389: ARRAY
61390: PPUSH
61391: CALL_OW 176
61395: GO 61365
61397: POP
61398: POP
// repeat wait ( 0 0$1 ) ;
61399: LD_INT 35
61401: PPUSH
61402: CALL_OW 67
// task := GetTaskList ( flame ) ;
61406: LD_ADDR_VAR 0 14
61410: PUSH
61411: LD_VAR 0 1
61415: PPUSH
61416: CALL_OW 437
61420: ST_TO_ADDR
// if not task then
61421: LD_VAR 0 14
61425: NOT
61426: IFFALSE 61430
// exit ;
61428: GO 61564
// if task [ 1 ] [ 1 ] <> | then
61430: LD_VAR 0 14
61434: PUSH
61435: LD_INT 1
61437: ARRAY
61438: PUSH
61439: LD_INT 1
61441: ARRAY
61442: PUSH
61443: LD_STRING |
61445: NONEQUAL
61446: IFFALSE 61450
// exit ;
61448: GO 61564
// _x := task [ 1 ] [ 2 ] ;
61450: LD_ADDR_VAR 0 11
61454: PUSH
61455: LD_VAR 0 14
61459: PUSH
61460: LD_INT 1
61462: ARRAY
61463: PUSH
61464: LD_INT 2
61466: ARRAY
61467: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61468: LD_ADDR_VAR 0 12
61472: PUSH
61473: LD_VAR 0 14
61477: PUSH
61478: LD_INT 1
61480: ARRAY
61481: PUSH
61482: LD_INT 3
61484: ARRAY
61485: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61486: LD_VAR 0 11
61490: PPUSH
61491: LD_VAR 0 12
61495: PPUSH
61496: CALL_OW 351
61500: NOT
61501: PUSH
61502: LD_VAR 0 11
61506: PPUSH
61507: LD_VAR 0 12
61511: PPUSH
61512: CALL_OW 554
61516: NOT
61517: OR
61518: IFFALSE 61552
// begin task := Delete ( task , 1 ) ;
61520: LD_ADDR_VAR 0 14
61524: PUSH
61525: LD_VAR 0 14
61529: PPUSH
61530: LD_INT 1
61532: PPUSH
61533: CALL_OW 3
61537: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61538: LD_VAR 0 1
61542: PPUSH
61543: LD_VAR 0 14
61547: PPUSH
61548: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61552: LD_VAR 0 1
61556: PPUSH
61557: CALL_OW 314
61561: NOT
61562: IFFALSE 61399
// end ;
61564: LD_VAR 0 5
61568: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61569: LD_EXP 52
61573: NOT
61574: IFFALSE 61624
61576: GO 61578
61578: DISABLE
// begin initHack := true ;
61579: LD_ADDR_EXP 52
61583: PUSH
61584: LD_INT 1
61586: ST_TO_ADDR
// hackTanks := [ ] ;
61587: LD_ADDR_EXP 53
61591: PUSH
61592: EMPTY
61593: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61594: LD_ADDR_EXP 54
61598: PUSH
61599: EMPTY
61600: ST_TO_ADDR
// hackLimit := 3 ;
61601: LD_ADDR_EXP 55
61605: PUSH
61606: LD_INT 3
61608: ST_TO_ADDR
// hackDist := 12 ;
61609: LD_ADDR_EXP 56
61613: PUSH
61614: LD_INT 12
61616: ST_TO_ADDR
// hackCounter := [ ] ;
61617: LD_ADDR_EXP 57
61621: PUSH
61622: EMPTY
61623: ST_TO_ADDR
// end ;
61624: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61625: LD_EXP 52
61629: PUSH
61630: LD_INT 34
61632: PUSH
61633: LD_INT 99
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PPUSH
61640: CALL_OW 69
61644: AND
61645: IFFALSE 61898
61647: GO 61649
61649: DISABLE
61650: LD_INT 0
61652: PPUSH
61653: PPUSH
// begin enable ;
61654: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61655: LD_ADDR_VAR 0 1
61659: PUSH
61660: LD_INT 34
61662: PUSH
61663: LD_INT 99
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PPUSH
61670: CALL_OW 69
61674: PUSH
61675: FOR_IN
61676: IFFALSE 61896
// begin if not i in hackTanks then
61678: LD_VAR 0 1
61682: PUSH
61683: LD_EXP 53
61687: IN
61688: NOT
61689: IFFALSE 61772
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61691: LD_ADDR_EXP 53
61695: PUSH
61696: LD_EXP 53
61700: PPUSH
61701: LD_EXP 53
61705: PUSH
61706: LD_INT 1
61708: PLUS
61709: PPUSH
61710: LD_VAR 0 1
61714: PPUSH
61715: CALL_OW 1
61719: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61720: LD_ADDR_EXP 54
61724: PUSH
61725: LD_EXP 54
61729: PPUSH
61730: LD_EXP 54
61734: PUSH
61735: LD_INT 1
61737: PLUS
61738: PPUSH
61739: EMPTY
61740: PPUSH
61741: CALL_OW 1
61745: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61746: LD_ADDR_EXP 57
61750: PUSH
61751: LD_EXP 57
61755: PPUSH
61756: LD_EXP 57
61760: PUSH
61761: LD_INT 1
61763: PLUS
61764: PPUSH
61765: EMPTY
61766: PPUSH
61767: CALL_OW 1
61771: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61772: LD_VAR 0 1
61776: PPUSH
61777: CALL_OW 302
61781: NOT
61782: IFFALSE 61795
// begin HackUnlinkAll ( i ) ;
61784: LD_VAR 0 1
61788: PPUSH
61789: CALL 61901 0 1
// continue ;
61793: GO 61675
// end ; HackCheckCapturedStatus ( i ) ;
61795: LD_VAR 0 1
61799: PPUSH
61800: CALL 62344 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61804: LD_ADDR_VAR 0 2
61808: PUSH
61809: LD_INT 81
61811: PUSH
61812: LD_VAR 0 1
61816: PPUSH
61817: CALL_OW 255
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 33
61828: PUSH
61829: LD_INT 3
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 91
61838: PUSH
61839: LD_VAR 0 1
61843: PUSH
61844: LD_EXP 56
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 50
61856: PUSH
61857: EMPTY
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: PPUSH
61866: CALL_OW 69
61870: ST_TO_ADDR
// if not tmp then
61871: LD_VAR 0 2
61875: NOT
61876: IFFALSE 61880
// continue ;
61878: GO 61675
// HackLink ( i , tmp ) ;
61880: LD_VAR 0 1
61884: PPUSH
61885: LD_VAR 0 2
61889: PPUSH
61890: CALL 62037 0 2
// end ;
61894: GO 61675
61896: POP
61897: POP
// end ;
61898: PPOPN 2
61900: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61901: LD_INT 0
61903: PPUSH
61904: PPUSH
61905: PPUSH
// if not hack in hackTanks then
61906: LD_VAR 0 1
61910: PUSH
61911: LD_EXP 53
61915: IN
61916: NOT
61917: IFFALSE 61921
// exit ;
61919: GO 62032
// index := GetElementIndex ( hackTanks , hack ) ;
61921: LD_ADDR_VAR 0 4
61925: PUSH
61926: LD_EXP 53
61930: PPUSH
61931: LD_VAR 0 1
61935: PPUSH
61936: CALL 21474 0 2
61940: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61941: LD_EXP 54
61945: PUSH
61946: LD_VAR 0 4
61950: ARRAY
61951: IFFALSE 62032
// begin for i in hackTanksCaptured [ index ] do
61953: LD_ADDR_VAR 0 3
61957: PUSH
61958: LD_EXP 54
61962: PUSH
61963: LD_VAR 0 4
61967: ARRAY
61968: PUSH
61969: FOR_IN
61970: IFFALSE 61996
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61972: LD_VAR 0 3
61976: PUSH
61977: LD_INT 1
61979: ARRAY
61980: PPUSH
61981: LD_VAR 0 3
61985: PUSH
61986: LD_INT 2
61988: ARRAY
61989: PPUSH
61990: CALL_OW 235
61994: GO 61969
61996: POP
61997: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61998: LD_ADDR_EXP 54
62002: PUSH
62003: LD_EXP 54
62007: PPUSH
62008: LD_VAR 0 4
62012: PPUSH
62013: EMPTY
62014: PPUSH
62015: CALL_OW 1
62019: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62020: LD_VAR 0 1
62024: PPUSH
62025: LD_INT 0
62027: PPUSH
62028: CALL_OW 505
// end ; end ;
62032: LD_VAR 0 2
62036: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62037: LD_INT 0
62039: PPUSH
62040: PPUSH
62041: PPUSH
// if not hack in hackTanks or not vehicles then
62042: LD_VAR 0 1
62046: PUSH
62047: LD_EXP 53
62051: IN
62052: NOT
62053: PUSH
62054: LD_VAR 0 2
62058: NOT
62059: OR
62060: IFFALSE 62064
// exit ;
62062: GO 62339
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62064: LD_ADDR_VAR 0 2
62068: PUSH
62069: LD_VAR 0 1
62073: PPUSH
62074: LD_VAR 0 2
62078: PPUSH
62079: LD_INT 1
62081: PPUSH
62082: LD_INT 1
62084: PPUSH
62085: CALL 22124 0 4
62089: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62090: LD_ADDR_VAR 0 5
62094: PUSH
62095: LD_EXP 53
62099: PPUSH
62100: LD_VAR 0 1
62104: PPUSH
62105: CALL 21474 0 2
62109: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62110: LD_EXP 54
62114: PUSH
62115: LD_VAR 0 5
62119: ARRAY
62120: PUSH
62121: LD_EXP 55
62125: LESS
62126: IFFALSE 62315
// begin for i := 1 to vehicles do
62128: LD_ADDR_VAR 0 4
62132: PUSH
62133: DOUBLE
62134: LD_INT 1
62136: DEC
62137: ST_TO_ADDR
62138: LD_VAR 0 2
62142: PUSH
62143: FOR_TO
62144: IFFALSE 62313
// begin if hackTanksCaptured [ index ] = hackLimit then
62146: LD_EXP 54
62150: PUSH
62151: LD_VAR 0 5
62155: ARRAY
62156: PUSH
62157: LD_EXP 55
62161: EQUAL
62162: IFFALSE 62166
// break ;
62164: GO 62313
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62166: LD_ADDR_EXP 57
62170: PUSH
62171: LD_EXP 57
62175: PPUSH
62176: LD_VAR 0 5
62180: PPUSH
62181: LD_EXP 57
62185: PUSH
62186: LD_VAR 0 5
62190: ARRAY
62191: PUSH
62192: LD_INT 1
62194: PLUS
62195: PPUSH
62196: CALL_OW 1
62200: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62201: LD_ADDR_EXP 54
62205: PUSH
62206: LD_EXP 54
62210: PPUSH
62211: LD_VAR 0 5
62215: PUSH
62216: LD_EXP 54
62220: PUSH
62221: LD_VAR 0 5
62225: ARRAY
62226: PUSH
62227: LD_INT 1
62229: PLUS
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PPUSH
62235: LD_VAR 0 2
62239: PUSH
62240: LD_VAR 0 4
62244: ARRAY
62245: PUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_VAR 0 4
62255: ARRAY
62256: PPUSH
62257: CALL_OW 255
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PPUSH
62266: CALL 21689 0 3
62270: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62271: LD_VAR 0 2
62275: PUSH
62276: LD_VAR 0 4
62280: ARRAY
62281: PPUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: CALL_OW 255
62291: PPUSH
62292: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62296: LD_VAR 0 2
62300: PUSH
62301: LD_VAR 0 4
62305: ARRAY
62306: PPUSH
62307: CALL_OW 141
// end ;
62311: GO 62143
62313: POP
62314: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62315: LD_VAR 0 1
62319: PPUSH
62320: LD_EXP 54
62324: PUSH
62325: LD_VAR 0 5
62329: ARRAY
62330: PUSH
62331: LD_INT 0
62333: PLUS
62334: PPUSH
62335: CALL_OW 505
// end ;
62339: LD_VAR 0 3
62343: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62344: LD_INT 0
62346: PPUSH
62347: PPUSH
62348: PPUSH
62349: PPUSH
// if not hack in hackTanks then
62350: LD_VAR 0 1
62354: PUSH
62355: LD_EXP 53
62359: IN
62360: NOT
62361: IFFALSE 62365
// exit ;
62363: GO 62605
// index := GetElementIndex ( hackTanks , hack ) ;
62365: LD_ADDR_VAR 0 4
62369: PUSH
62370: LD_EXP 53
62374: PPUSH
62375: LD_VAR 0 1
62379: PPUSH
62380: CALL 21474 0 2
62384: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62385: LD_ADDR_VAR 0 3
62389: PUSH
62390: DOUBLE
62391: LD_EXP 54
62395: PUSH
62396: LD_VAR 0 4
62400: ARRAY
62401: INC
62402: ST_TO_ADDR
62403: LD_INT 1
62405: PUSH
62406: FOR_DOWNTO
62407: IFFALSE 62579
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62409: LD_ADDR_VAR 0 5
62413: PUSH
62414: LD_EXP 54
62418: PUSH
62419: LD_VAR 0 4
62423: ARRAY
62424: PUSH
62425: LD_VAR 0 3
62429: ARRAY
62430: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62431: LD_VAR 0 5
62435: PUSH
62436: LD_INT 1
62438: ARRAY
62439: PPUSH
62440: CALL_OW 302
62444: NOT
62445: PUSH
62446: LD_VAR 0 5
62450: PUSH
62451: LD_INT 1
62453: ARRAY
62454: PPUSH
62455: CALL_OW 255
62459: PUSH
62460: LD_VAR 0 1
62464: PPUSH
62465: CALL_OW 255
62469: NONEQUAL
62470: OR
62471: IFFALSE 62577
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62473: LD_VAR 0 5
62477: PUSH
62478: LD_INT 1
62480: ARRAY
62481: PPUSH
62482: CALL_OW 305
62486: PUSH
62487: LD_VAR 0 5
62491: PUSH
62492: LD_INT 1
62494: ARRAY
62495: PPUSH
62496: CALL_OW 255
62500: PUSH
62501: LD_VAR 0 1
62505: PPUSH
62506: CALL_OW 255
62510: EQUAL
62511: AND
62512: IFFALSE 62536
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62514: LD_VAR 0 5
62518: PUSH
62519: LD_INT 1
62521: ARRAY
62522: PPUSH
62523: LD_VAR 0 5
62527: PUSH
62528: LD_INT 2
62530: ARRAY
62531: PPUSH
62532: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62536: LD_ADDR_EXP 54
62540: PUSH
62541: LD_EXP 54
62545: PPUSH
62546: LD_VAR 0 4
62550: PPUSH
62551: LD_EXP 54
62555: PUSH
62556: LD_VAR 0 4
62560: ARRAY
62561: PPUSH
62562: LD_VAR 0 3
62566: PPUSH
62567: CALL_OW 3
62571: PPUSH
62572: CALL_OW 1
62576: ST_TO_ADDR
// end ; end ;
62577: GO 62406
62579: POP
62580: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62581: LD_VAR 0 1
62585: PPUSH
62586: LD_EXP 54
62590: PUSH
62591: LD_VAR 0 4
62595: ARRAY
62596: PUSH
62597: LD_INT 0
62599: PLUS
62600: PPUSH
62601: CALL_OW 505
// end ;
62605: LD_VAR 0 2
62609: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62610: LD_INT 0
62612: PPUSH
62613: PPUSH
62614: PPUSH
62615: PPUSH
// if not hack in hackTanks then
62616: LD_VAR 0 1
62620: PUSH
62621: LD_EXP 53
62625: IN
62626: NOT
62627: IFFALSE 62631
// exit ;
62629: GO 62716
// index := GetElementIndex ( hackTanks , hack ) ;
62631: LD_ADDR_VAR 0 5
62635: PUSH
62636: LD_EXP 53
62640: PPUSH
62641: LD_VAR 0 1
62645: PPUSH
62646: CALL 21474 0 2
62650: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62651: LD_ADDR_VAR 0 4
62655: PUSH
62656: DOUBLE
62657: LD_INT 1
62659: DEC
62660: ST_TO_ADDR
62661: LD_EXP 54
62665: PUSH
62666: LD_VAR 0 5
62670: ARRAY
62671: PUSH
62672: FOR_TO
62673: IFFALSE 62714
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62675: LD_EXP 54
62679: PUSH
62680: LD_VAR 0 5
62684: ARRAY
62685: PUSH
62686: LD_VAR 0 4
62690: ARRAY
62691: PUSH
62692: LD_INT 1
62694: ARRAY
62695: PUSH
62696: LD_VAR 0 2
62700: EQUAL
62701: IFFALSE 62712
// KillUnit ( vehicle ) ;
62703: LD_VAR 0 2
62707: PPUSH
62708: CALL_OW 66
62712: GO 62672
62714: POP
62715: POP
// end ;
62716: LD_VAR 0 3
62720: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62721: LD_EXP 58
62725: NOT
62726: IFFALSE 62761
62728: GO 62730
62730: DISABLE
// begin initMiner := true ;
62731: LD_ADDR_EXP 58
62735: PUSH
62736: LD_INT 1
62738: ST_TO_ADDR
// minersList := [ ] ;
62739: LD_ADDR_EXP 59
62743: PUSH
62744: EMPTY
62745: ST_TO_ADDR
// minerMinesList := [ ] ;
62746: LD_ADDR_EXP 60
62750: PUSH
62751: EMPTY
62752: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62753: LD_ADDR_EXP 61
62757: PUSH
62758: LD_INT 5
62760: ST_TO_ADDR
// end ;
62761: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62762: LD_EXP 58
62766: PUSH
62767: LD_INT 34
62769: PUSH
62770: LD_INT 81
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PPUSH
62777: CALL_OW 69
62781: AND
62782: IFFALSE 63243
62784: GO 62786
62786: DISABLE
62787: LD_INT 0
62789: PPUSH
62790: PPUSH
62791: PPUSH
62792: PPUSH
// begin enable ;
62793: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62794: LD_ADDR_VAR 0 1
62798: PUSH
62799: LD_INT 34
62801: PUSH
62802: LD_INT 81
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PPUSH
62809: CALL_OW 69
62813: PUSH
62814: FOR_IN
62815: IFFALSE 62887
// begin if not i in minersList then
62817: LD_VAR 0 1
62821: PUSH
62822: LD_EXP 59
62826: IN
62827: NOT
62828: IFFALSE 62885
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62830: LD_ADDR_EXP 59
62834: PUSH
62835: LD_EXP 59
62839: PPUSH
62840: LD_EXP 59
62844: PUSH
62845: LD_INT 1
62847: PLUS
62848: PPUSH
62849: LD_VAR 0 1
62853: PPUSH
62854: CALL_OW 1
62858: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62859: LD_ADDR_EXP 60
62863: PUSH
62864: LD_EXP 60
62868: PPUSH
62869: LD_EXP 60
62873: PUSH
62874: LD_INT 1
62876: PLUS
62877: PPUSH
62878: EMPTY
62879: PPUSH
62880: CALL_OW 1
62884: ST_TO_ADDR
// end end ;
62885: GO 62814
62887: POP
62888: POP
// for i := minerMinesList downto 1 do
62889: LD_ADDR_VAR 0 1
62893: PUSH
62894: DOUBLE
62895: LD_EXP 60
62899: INC
62900: ST_TO_ADDR
62901: LD_INT 1
62903: PUSH
62904: FOR_DOWNTO
62905: IFFALSE 63241
// begin if IsLive ( minersList [ i ] ) then
62907: LD_EXP 59
62911: PUSH
62912: LD_VAR 0 1
62916: ARRAY
62917: PPUSH
62918: CALL_OW 300
62922: IFFALSE 62950
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62924: LD_EXP 59
62928: PUSH
62929: LD_VAR 0 1
62933: ARRAY
62934: PPUSH
62935: LD_EXP 60
62939: PUSH
62940: LD_VAR 0 1
62944: ARRAY
62945: PPUSH
62946: CALL_OW 505
// if not minerMinesList [ i ] then
62950: LD_EXP 60
62954: PUSH
62955: LD_VAR 0 1
62959: ARRAY
62960: NOT
62961: IFFALSE 62965
// continue ;
62963: GO 62904
// for j := minerMinesList [ i ] downto 1 do
62965: LD_ADDR_VAR 0 2
62969: PUSH
62970: DOUBLE
62971: LD_EXP 60
62975: PUSH
62976: LD_VAR 0 1
62980: ARRAY
62981: INC
62982: ST_TO_ADDR
62983: LD_INT 1
62985: PUSH
62986: FOR_DOWNTO
62987: IFFALSE 63237
// begin side := GetSide ( minersList [ i ] ) ;
62989: LD_ADDR_VAR 0 3
62993: PUSH
62994: LD_EXP 59
62998: PUSH
62999: LD_VAR 0 1
63003: ARRAY
63004: PPUSH
63005: CALL_OW 255
63009: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63010: LD_ADDR_VAR 0 4
63014: PUSH
63015: LD_EXP 60
63019: PUSH
63020: LD_VAR 0 1
63024: ARRAY
63025: PUSH
63026: LD_VAR 0 2
63030: ARRAY
63031: PUSH
63032: LD_INT 1
63034: ARRAY
63035: PPUSH
63036: LD_EXP 60
63040: PUSH
63041: LD_VAR 0 1
63045: ARRAY
63046: PUSH
63047: LD_VAR 0 2
63051: ARRAY
63052: PUSH
63053: LD_INT 2
63055: ARRAY
63056: PPUSH
63057: CALL_OW 428
63061: ST_TO_ADDR
// if not tmp then
63062: LD_VAR 0 4
63066: NOT
63067: IFFALSE 63071
// continue ;
63069: GO 62986
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63071: LD_VAR 0 4
63075: PUSH
63076: LD_INT 81
63078: PUSH
63079: LD_VAR 0 3
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PPUSH
63088: CALL_OW 69
63092: IN
63093: PUSH
63094: LD_EXP 60
63098: PUSH
63099: LD_VAR 0 1
63103: ARRAY
63104: PUSH
63105: LD_VAR 0 2
63109: ARRAY
63110: PUSH
63111: LD_INT 1
63113: ARRAY
63114: PPUSH
63115: LD_EXP 60
63119: PUSH
63120: LD_VAR 0 1
63124: ARRAY
63125: PUSH
63126: LD_VAR 0 2
63130: ARRAY
63131: PUSH
63132: LD_INT 2
63134: ARRAY
63135: PPUSH
63136: CALL_OW 458
63140: AND
63141: IFFALSE 63235
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63143: LD_EXP 60
63147: PUSH
63148: LD_VAR 0 1
63152: ARRAY
63153: PUSH
63154: LD_VAR 0 2
63158: ARRAY
63159: PUSH
63160: LD_INT 1
63162: ARRAY
63163: PPUSH
63164: LD_EXP 60
63168: PUSH
63169: LD_VAR 0 1
63173: ARRAY
63174: PUSH
63175: LD_VAR 0 2
63179: ARRAY
63180: PUSH
63181: LD_INT 2
63183: ARRAY
63184: PPUSH
63185: LD_VAR 0 3
63189: PPUSH
63190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63194: LD_ADDR_EXP 60
63198: PUSH
63199: LD_EXP 60
63203: PPUSH
63204: LD_VAR 0 1
63208: PPUSH
63209: LD_EXP 60
63213: PUSH
63214: LD_VAR 0 1
63218: ARRAY
63219: PPUSH
63220: LD_VAR 0 2
63224: PPUSH
63225: CALL_OW 3
63229: PPUSH
63230: CALL_OW 1
63234: ST_TO_ADDR
// end ; end ;
63235: GO 62986
63237: POP
63238: POP
// end ;
63239: GO 62904
63241: POP
63242: POP
// end ;
63243: PPOPN 4
63245: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63246: LD_INT 0
63248: PPUSH
63249: PPUSH
// result := false ;
63250: LD_ADDR_VAR 0 4
63254: PUSH
63255: LD_INT 0
63257: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63258: LD_VAR 0 1
63262: PPUSH
63263: CALL_OW 264
63267: PUSH
63268: LD_INT 81
63270: EQUAL
63271: NOT
63272: IFFALSE 63276
// exit ;
63274: GO 63516
// index := GetElementIndex ( minersList , unit ) ;
63276: LD_ADDR_VAR 0 5
63280: PUSH
63281: LD_EXP 59
63285: PPUSH
63286: LD_VAR 0 1
63290: PPUSH
63291: CALL 21474 0 2
63295: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63296: LD_EXP 60
63300: PUSH
63301: LD_VAR 0 5
63305: ARRAY
63306: PUSH
63307: LD_EXP 61
63311: GREATEREQUAL
63312: IFFALSE 63316
// exit ;
63314: GO 63516
// ComMoveXY ( unit , x , y ) ;
63316: LD_VAR 0 1
63320: PPUSH
63321: LD_VAR 0 2
63325: PPUSH
63326: LD_VAR 0 3
63330: PPUSH
63331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63335: LD_INT 35
63337: PPUSH
63338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63342: LD_VAR 0 1
63346: PPUSH
63347: LD_VAR 0 2
63351: PPUSH
63352: LD_VAR 0 3
63356: PPUSH
63357: CALL 53235 0 3
63361: NOT
63362: PUSH
63363: LD_VAR 0 1
63367: PPUSH
63368: CALL_OW 314
63372: AND
63373: IFFALSE 63377
// exit ;
63375: GO 63516
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63377: LD_VAR 0 2
63381: PPUSH
63382: LD_VAR 0 3
63386: PPUSH
63387: CALL_OW 428
63391: PUSH
63392: LD_VAR 0 1
63396: EQUAL
63397: PUSH
63398: LD_VAR 0 1
63402: PPUSH
63403: CALL_OW 314
63407: NOT
63408: AND
63409: IFFALSE 63335
// PlaySoundXY ( x , y , PlantMine ) ;
63411: LD_VAR 0 2
63415: PPUSH
63416: LD_VAR 0 3
63420: PPUSH
63421: LD_STRING PlantMine
63423: PPUSH
63424: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63428: LD_VAR 0 2
63432: PPUSH
63433: LD_VAR 0 3
63437: PPUSH
63438: LD_VAR 0 1
63442: PPUSH
63443: CALL_OW 255
63447: PPUSH
63448: LD_INT 0
63450: PPUSH
63451: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63455: LD_ADDR_EXP 60
63459: PUSH
63460: LD_EXP 60
63464: PPUSH
63465: LD_VAR 0 5
63469: PUSH
63470: LD_EXP 60
63474: PUSH
63475: LD_VAR 0 5
63479: ARRAY
63480: PUSH
63481: LD_INT 1
63483: PLUS
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PPUSH
63489: LD_VAR 0 2
63493: PUSH
63494: LD_VAR 0 3
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PPUSH
63503: CALL 21689 0 3
63507: ST_TO_ADDR
// result := true ;
63508: LD_ADDR_VAR 0 4
63512: PUSH
63513: LD_INT 1
63515: ST_TO_ADDR
// end ;
63516: LD_VAR 0 4
63520: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63521: LD_INT 0
63523: PPUSH
63524: PPUSH
63525: PPUSH
// if not unit in minersList then
63526: LD_VAR 0 1
63530: PUSH
63531: LD_EXP 59
63535: IN
63536: NOT
63537: IFFALSE 63541
// exit ;
63539: GO 63933
// index := GetElementIndex ( minersList , unit ) ;
63541: LD_ADDR_VAR 0 6
63545: PUSH
63546: LD_EXP 59
63550: PPUSH
63551: LD_VAR 0 1
63555: PPUSH
63556: CALL 21474 0 2
63560: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63561: LD_ADDR_VAR 0 5
63565: PUSH
63566: DOUBLE
63567: LD_EXP 60
63571: PUSH
63572: LD_VAR 0 6
63576: ARRAY
63577: INC
63578: ST_TO_ADDR
63579: LD_INT 1
63581: PUSH
63582: FOR_DOWNTO
63583: IFFALSE 63744
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63585: LD_EXP 60
63589: PUSH
63590: LD_VAR 0 6
63594: ARRAY
63595: PUSH
63596: LD_VAR 0 5
63600: ARRAY
63601: PUSH
63602: LD_INT 1
63604: ARRAY
63605: PUSH
63606: LD_VAR 0 2
63610: EQUAL
63611: PUSH
63612: LD_EXP 60
63616: PUSH
63617: LD_VAR 0 6
63621: ARRAY
63622: PUSH
63623: LD_VAR 0 5
63627: ARRAY
63628: PUSH
63629: LD_INT 2
63631: ARRAY
63632: PUSH
63633: LD_VAR 0 3
63637: EQUAL
63638: AND
63639: IFFALSE 63742
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63641: LD_EXP 60
63645: PUSH
63646: LD_VAR 0 6
63650: ARRAY
63651: PUSH
63652: LD_VAR 0 5
63656: ARRAY
63657: PUSH
63658: LD_INT 1
63660: ARRAY
63661: PPUSH
63662: LD_EXP 60
63666: PUSH
63667: LD_VAR 0 6
63671: ARRAY
63672: PUSH
63673: LD_VAR 0 5
63677: ARRAY
63678: PUSH
63679: LD_INT 2
63681: ARRAY
63682: PPUSH
63683: LD_VAR 0 1
63687: PPUSH
63688: CALL_OW 255
63692: PPUSH
63693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63697: LD_ADDR_EXP 60
63701: PUSH
63702: LD_EXP 60
63706: PPUSH
63707: LD_VAR 0 6
63711: PPUSH
63712: LD_EXP 60
63716: PUSH
63717: LD_VAR 0 6
63721: ARRAY
63722: PPUSH
63723: LD_VAR 0 5
63727: PPUSH
63728: CALL_OW 3
63732: PPUSH
63733: CALL_OW 1
63737: ST_TO_ADDR
// exit ;
63738: POP
63739: POP
63740: GO 63933
// end ; end ;
63742: GO 63582
63744: POP
63745: POP
// for i := minerMinesList [ index ] downto 1 do
63746: LD_ADDR_VAR 0 5
63750: PUSH
63751: DOUBLE
63752: LD_EXP 60
63756: PUSH
63757: LD_VAR 0 6
63761: ARRAY
63762: INC
63763: ST_TO_ADDR
63764: LD_INT 1
63766: PUSH
63767: FOR_DOWNTO
63768: IFFALSE 63931
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63770: LD_EXP 60
63774: PUSH
63775: LD_VAR 0 6
63779: ARRAY
63780: PUSH
63781: LD_VAR 0 5
63785: ARRAY
63786: PUSH
63787: LD_INT 1
63789: ARRAY
63790: PPUSH
63791: LD_EXP 60
63795: PUSH
63796: LD_VAR 0 6
63800: ARRAY
63801: PUSH
63802: LD_VAR 0 5
63806: ARRAY
63807: PUSH
63808: LD_INT 2
63810: ARRAY
63811: PPUSH
63812: LD_VAR 0 2
63816: PPUSH
63817: LD_VAR 0 3
63821: PPUSH
63822: CALL_OW 298
63826: PUSH
63827: LD_INT 6
63829: LESS
63830: IFFALSE 63929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63832: LD_EXP 60
63836: PUSH
63837: LD_VAR 0 6
63841: ARRAY
63842: PUSH
63843: LD_VAR 0 5
63847: ARRAY
63848: PUSH
63849: LD_INT 1
63851: ARRAY
63852: PPUSH
63853: LD_EXP 60
63857: PUSH
63858: LD_VAR 0 6
63862: ARRAY
63863: PUSH
63864: LD_VAR 0 5
63868: ARRAY
63869: PUSH
63870: LD_INT 2
63872: ARRAY
63873: PPUSH
63874: LD_VAR 0 1
63878: PPUSH
63879: CALL_OW 255
63883: PPUSH
63884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63888: LD_ADDR_EXP 60
63892: PUSH
63893: LD_EXP 60
63897: PPUSH
63898: LD_VAR 0 6
63902: PPUSH
63903: LD_EXP 60
63907: PUSH
63908: LD_VAR 0 6
63912: ARRAY
63913: PPUSH
63914: LD_VAR 0 5
63918: PPUSH
63919: CALL_OW 3
63923: PPUSH
63924: CALL_OW 1
63928: ST_TO_ADDR
// end ; end ;
63929: GO 63767
63931: POP
63932: POP
// end ;
63933: LD_VAR 0 4
63937: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63938: LD_INT 0
63940: PPUSH
63941: PPUSH
63942: PPUSH
63943: PPUSH
63944: PPUSH
63945: PPUSH
63946: PPUSH
63947: PPUSH
63948: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63949: LD_VAR 0 1
63953: PPUSH
63954: CALL_OW 264
63958: PUSH
63959: LD_INT 81
63961: EQUAL
63962: NOT
63963: PUSH
63964: LD_VAR 0 1
63968: PUSH
63969: LD_EXP 59
63973: IN
63974: NOT
63975: OR
63976: IFFALSE 63980
// exit ;
63978: GO 64302
// index := GetElementIndex ( minersList , unit ) ;
63980: LD_ADDR_VAR 0 6
63984: PUSH
63985: LD_EXP 59
63989: PPUSH
63990: LD_VAR 0 1
63994: PPUSH
63995: CALL 21474 0 2
63999: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64000: LD_ADDR_VAR 0 8
64004: PUSH
64005: LD_EXP 61
64009: PUSH
64010: LD_EXP 60
64014: PUSH
64015: LD_VAR 0 6
64019: ARRAY
64020: MINUS
64021: ST_TO_ADDR
// if not minesFreeAmount then
64022: LD_VAR 0 8
64026: NOT
64027: IFFALSE 64031
// exit ;
64029: GO 64302
// tmp := [ ] ;
64031: LD_ADDR_VAR 0 7
64035: PUSH
64036: EMPTY
64037: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64038: LD_ADDR_VAR 0 5
64042: PUSH
64043: DOUBLE
64044: LD_INT 1
64046: DEC
64047: ST_TO_ADDR
64048: LD_VAR 0 8
64052: PUSH
64053: FOR_TO
64054: IFFALSE 64249
// begin _d := rand ( 0 , 5 ) ;
64056: LD_ADDR_VAR 0 11
64060: PUSH
64061: LD_INT 0
64063: PPUSH
64064: LD_INT 5
64066: PPUSH
64067: CALL_OW 12
64071: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64072: LD_ADDR_VAR 0 12
64076: PUSH
64077: LD_INT 2
64079: PPUSH
64080: LD_INT 6
64082: PPUSH
64083: CALL_OW 12
64087: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64088: LD_ADDR_VAR 0 9
64092: PUSH
64093: LD_VAR 0 2
64097: PPUSH
64098: LD_VAR 0 11
64102: PPUSH
64103: LD_VAR 0 12
64107: PPUSH
64108: CALL_OW 272
64112: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64113: LD_ADDR_VAR 0 10
64117: PUSH
64118: LD_VAR 0 3
64122: PPUSH
64123: LD_VAR 0 11
64127: PPUSH
64128: LD_VAR 0 12
64132: PPUSH
64133: CALL_OW 273
64137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64138: LD_VAR 0 9
64142: PPUSH
64143: LD_VAR 0 10
64147: PPUSH
64148: CALL_OW 488
64152: PUSH
64153: LD_VAR 0 9
64157: PUSH
64158: LD_VAR 0 10
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: PUSH
64167: LD_VAR 0 7
64171: IN
64172: NOT
64173: AND
64174: PUSH
64175: LD_VAR 0 9
64179: PPUSH
64180: LD_VAR 0 10
64184: PPUSH
64185: CALL_OW 458
64189: NOT
64190: AND
64191: IFFALSE 64233
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64193: LD_ADDR_VAR 0 7
64197: PUSH
64198: LD_VAR 0 7
64202: PPUSH
64203: LD_VAR 0 7
64207: PUSH
64208: LD_INT 1
64210: PLUS
64211: PPUSH
64212: LD_VAR 0 9
64216: PUSH
64217: LD_VAR 0 10
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PPUSH
64226: CALL_OW 1
64230: ST_TO_ADDR
64231: GO 64247
// i := i - 1 ;
64233: LD_ADDR_VAR 0 5
64237: PUSH
64238: LD_VAR 0 5
64242: PUSH
64243: LD_INT 1
64245: MINUS
64246: ST_TO_ADDR
// end ;
64247: GO 64053
64249: POP
64250: POP
// for i in tmp do
64251: LD_ADDR_VAR 0 5
64255: PUSH
64256: LD_VAR 0 7
64260: PUSH
64261: FOR_IN
64262: IFFALSE 64300
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64264: LD_VAR 0 1
64268: PPUSH
64269: LD_VAR 0 5
64273: PUSH
64274: LD_INT 1
64276: ARRAY
64277: PPUSH
64278: LD_VAR 0 5
64282: PUSH
64283: LD_INT 2
64285: ARRAY
64286: PPUSH
64287: CALL 63246 0 3
64291: NOT
64292: IFFALSE 64298
// exit ;
64294: POP
64295: POP
64296: GO 64302
64298: GO 64261
64300: POP
64301: POP
// end ;
64302: LD_VAR 0 4
64306: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64307: LD_INT 0
64309: PPUSH
64310: PPUSH
64311: PPUSH
64312: PPUSH
64313: PPUSH
64314: PPUSH
64315: PPUSH
64316: PPUSH
64317: PPUSH
// if GetClass ( unit ) <> class_sniper then
64318: LD_VAR 0 1
64322: PPUSH
64323: CALL_OW 257
64327: PUSH
64328: LD_INT 5
64330: NONEQUAL
64331: IFFALSE 64335
// exit ;
64333: GO 64801
// dist := 8 ;
64335: LD_ADDR_VAR 0 5
64339: PUSH
64340: LD_INT 8
64342: ST_TO_ADDR
// viewRange := 12 ;
64343: LD_ADDR_VAR 0 8
64347: PUSH
64348: LD_INT 12
64350: ST_TO_ADDR
// side := GetSide ( unit ) ;
64351: LD_ADDR_VAR 0 6
64355: PUSH
64356: LD_VAR 0 1
64360: PPUSH
64361: CALL_OW 255
64365: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64366: LD_INT 61
64368: PPUSH
64369: LD_VAR 0 6
64373: PPUSH
64374: CALL_OW 321
64378: PUSH
64379: LD_INT 2
64381: EQUAL
64382: IFFALSE 64392
// viewRange := 16 ;
64384: LD_ADDR_VAR 0 8
64388: PUSH
64389: LD_INT 16
64391: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64392: LD_VAR 0 1
64396: PPUSH
64397: LD_VAR 0 2
64401: PPUSH
64402: LD_VAR 0 3
64406: PPUSH
64407: CALL_OW 297
64411: PUSH
64412: LD_VAR 0 5
64416: GREATER
64417: IFFALSE 64496
// begin ComMoveXY ( unit , x , y ) ;
64419: LD_VAR 0 1
64423: PPUSH
64424: LD_VAR 0 2
64428: PPUSH
64429: LD_VAR 0 3
64433: PPUSH
64434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64438: LD_INT 35
64440: PPUSH
64441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64445: LD_VAR 0 1
64449: PPUSH
64450: LD_VAR 0 2
64454: PPUSH
64455: LD_VAR 0 3
64459: PPUSH
64460: CALL 53235 0 3
64464: NOT
64465: IFFALSE 64469
// exit ;
64467: GO 64801
// until GetDistUnitXY ( unit , x , y ) < dist ;
64469: LD_VAR 0 1
64473: PPUSH
64474: LD_VAR 0 2
64478: PPUSH
64479: LD_VAR 0 3
64483: PPUSH
64484: CALL_OW 297
64488: PUSH
64489: LD_VAR 0 5
64493: LESS
64494: IFFALSE 64438
// end ; ComTurnXY ( unit , x , y ) ;
64496: LD_VAR 0 1
64500: PPUSH
64501: LD_VAR 0 2
64505: PPUSH
64506: LD_VAR 0 3
64510: PPUSH
64511: CALL_OW 118
// repeat if Multiplayer then
64515: LD_OWVAR 4
64519: IFFALSE 64530
// wait ( 35 ) else
64521: LD_INT 35
64523: PPUSH
64524: CALL_OW 67
64528: GO 64537
// wait ( 5 ) ;
64530: LD_INT 5
64532: PPUSH
64533: CALL_OW 67
// _d := GetDir ( unit ) ;
64537: LD_ADDR_VAR 0 11
64541: PUSH
64542: LD_VAR 0 1
64546: PPUSH
64547: CALL_OW 254
64551: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64552: LD_ADDR_VAR 0 7
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: CALL_OW 250
64566: PPUSH
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 251
64576: PPUSH
64577: LD_VAR 0 2
64581: PPUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: CALL 55843 0 4
64591: ST_TO_ADDR
// until dir = _d ;
64592: LD_VAR 0 7
64596: PUSH
64597: LD_VAR 0 11
64601: EQUAL
64602: IFFALSE 64515
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64604: LD_ADDR_VAR 0 9
64608: PUSH
64609: LD_VAR 0 1
64613: PPUSH
64614: CALL_OW 250
64618: PPUSH
64619: LD_VAR 0 7
64623: PPUSH
64624: LD_VAR 0 5
64628: PPUSH
64629: CALL_OW 272
64633: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64634: LD_ADDR_VAR 0 10
64638: PUSH
64639: LD_VAR 0 1
64643: PPUSH
64644: CALL_OW 251
64648: PPUSH
64649: LD_VAR 0 7
64653: PPUSH
64654: LD_VAR 0 5
64658: PPUSH
64659: CALL_OW 273
64663: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64664: LD_VAR 0 9
64668: PPUSH
64669: LD_VAR 0 10
64673: PPUSH
64674: CALL_OW 488
64678: NOT
64679: IFFALSE 64683
// exit ;
64681: GO 64801
// ComAnimCustom ( unit , 1 ) ;
64683: LD_VAR 0 1
64687: PPUSH
64688: LD_INT 1
64690: PPUSH
64691: CALL_OW 592
// p := 0 ;
64695: LD_ADDR_VAR 0 12
64699: PUSH
64700: LD_INT 0
64702: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64703: LD_VAR 0 9
64707: PPUSH
64708: LD_VAR 0 10
64712: PPUSH
64713: LD_VAR 0 6
64717: PPUSH
64718: LD_VAR 0 8
64722: PPUSH
64723: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64727: LD_INT 35
64729: PPUSH
64730: CALL_OW 67
// p := Inc ( p ) ;
64734: LD_ADDR_VAR 0 12
64738: PUSH
64739: LD_VAR 0 12
64743: PPUSH
64744: CALL 55799 0 1
64748: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64749: LD_VAR 0 12
64753: PUSH
64754: LD_INT 3
64756: EQUAL
64757: PUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: CALL_OW 302
64767: NOT
64768: OR
64769: PUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 301
64779: OR
64780: IFFALSE 64727
// RemoveSeeing ( _x , _y , side ) ;
64782: LD_VAR 0 9
64786: PPUSH
64787: LD_VAR 0 10
64791: PPUSH
64792: LD_VAR 0 6
64796: PPUSH
64797: CALL_OW 331
// end ; end_of_file
64801: LD_VAR 0 4
64805: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64806: LD_VAR 0 1
64810: PUSH
64811: LD_INT 200
64813: DOUBLE
64814: GREATEREQUAL
64815: IFFALSE 64823
64817: LD_INT 299
64819: DOUBLE
64820: LESSEQUAL
64821: IFTRUE 64825
64823: GO 64857
64825: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64826: LD_VAR 0 1
64830: PPUSH
64831: LD_VAR 0 2
64835: PPUSH
64836: LD_VAR 0 3
64840: PPUSH
64841: LD_VAR 0 4
64845: PPUSH
64846: LD_VAR 0 5
64850: PPUSH
64851: CALL 60107 0 5
64855: GO 64934
64857: LD_INT 300
64859: DOUBLE
64860: GREATEREQUAL
64861: IFFALSE 64869
64863: LD_INT 399
64865: DOUBLE
64866: LESSEQUAL
64867: IFTRUE 64871
64869: GO 64933
64871: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64872: LD_VAR 0 1
64876: PPUSH
64877: LD_VAR 0 2
64881: PPUSH
64882: LD_VAR 0 3
64886: PPUSH
64887: LD_VAR 0 4
64891: PPUSH
64892: LD_VAR 0 5
64896: PPUSH
64897: LD_VAR 0 6
64901: PPUSH
64902: LD_VAR 0 7
64906: PPUSH
64907: LD_VAR 0 8
64911: PPUSH
64912: LD_VAR 0 9
64916: PPUSH
64917: LD_VAR 0 10
64921: PPUSH
64922: LD_VAR 0 11
64926: PPUSH
64927: CALL 65017 0 11
64931: GO 64934
64933: POP
// end ;
64934: PPOPN 11
64936: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64937: LD_VAR 0 1
64941: PPUSH
64942: LD_VAR 0 2
64946: PPUSH
64947: LD_VAR 0 3
64951: PPUSH
64952: LD_VAR 0 4
64956: PPUSH
64957: LD_VAR 0 5
64961: PPUSH
64962: CALL 59572 0 5
// end ; end_of_file
64966: PPOPN 5
64968: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64969: PPOPN 6
64971: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64972: CALL 65001 0 0
// end ; end_of_file
64976: PPOPN 1
64978: END
// every 0 0$1 do
64979: GO 64981
64981: DISABLE
// begin enable ;
64982: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64983: LD_STRING updateTimer(
64985: PUSH
64986: LD_OWVAR 1
64990: STR
64991: PUSH
64992: LD_STRING );
64994: STR
64995: PPUSH
64996: CALL_OW 559
// end ;
65000: END
// export function SOS_MapStart ( ) ; begin
65001: LD_INT 0
65003: PPUSH
// UpdateFactoryWaypoints ( ) ;
65004: CALL 65373 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65008: CALL 65625 0 0
// end ;
65012: LD_VAR 0 1
65016: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65017: LD_INT 0
65019: PPUSH
// end ;
65020: LD_VAR 0 12
65024: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65025: LD_INT 0
65027: PPUSH
65028: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65029: LD_VAR 0 1
65033: NOT
65034: PUSH
65035: LD_VAR 0 2
65039: PPUSH
65040: LD_VAR 0 3
65044: PPUSH
65045: CALL_OW 488
65049: NOT
65050: OR
65051: PUSH
65052: LD_VAR 0 1
65056: PPUSH
65057: CALL_OW 266
65061: PUSH
65062: LD_INT 3
65064: NONEQUAL
65065: PUSH
65066: LD_VAR 0 1
65070: PPUSH
65071: CALL_OW 247
65075: PUSH
65076: LD_INT 1
65078: EQUAL
65079: NOT
65080: AND
65081: OR
65082: IFFALSE 65086
// exit ;
65084: GO 65368
// if GetType ( factory ) = unit_human then
65086: LD_VAR 0 1
65090: PPUSH
65091: CALL_OW 247
65095: PUSH
65096: LD_INT 1
65098: EQUAL
65099: IFFALSE 65116
// factory := IsInUnit ( factory ) ;
65101: LD_ADDR_VAR 0 1
65105: PUSH
65106: LD_VAR 0 1
65110: PPUSH
65111: CALL_OW 310
65115: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL_OW 266
65125: PUSH
65126: LD_INT 3
65128: NONEQUAL
65129: IFFALSE 65133
// exit ;
65131: GO 65368
// for i := 1 to Count ( factoryWaypoints ) do
65133: LD_ADDR_VAR 0 5
65137: PUSH
65138: DOUBLE
65139: LD_INT 1
65141: DEC
65142: ST_TO_ADDR
65143: LD_EXP 62
65147: PPUSH
65148: CALL 18829 0 1
65152: PUSH
65153: FOR_TO
65154: IFFALSE 65316
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65156: LD_VAR 0 2
65160: PPUSH
65161: LD_VAR 0 3
65165: PPUSH
65166: CALL_OW 428
65170: PUSH
65171: LD_EXP 62
65175: PUSH
65176: LD_VAR 0 5
65180: ARRAY
65181: PUSH
65182: LD_INT 2
65184: ARRAY
65185: EQUAL
65186: IFFALSE 65218
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65188: LD_ADDR_EXP 62
65192: PUSH
65193: LD_EXP 62
65197: PPUSH
65198: LD_VAR 0 5
65202: PPUSH
65203: CALL_OW 3
65207: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65208: CALL 65373 0 0
// exit ;
65212: POP
65213: POP
65214: GO 65368
// end else
65216: GO 65314
// if factory = factoryWaypoints [ i ] [ 2 ] then
65218: LD_VAR 0 1
65222: PUSH
65223: LD_EXP 62
65227: PUSH
65228: LD_VAR 0 5
65232: ARRAY
65233: PUSH
65234: LD_INT 2
65236: ARRAY
65237: EQUAL
65238: IFFALSE 65314
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65240: LD_ADDR_EXP 62
65244: PUSH
65245: LD_EXP 62
65249: PPUSH
65250: LD_VAR 0 5
65254: PPUSH
65255: CALL_OW 3
65259: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65260: LD_ADDR_EXP 62
65264: PUSH
65265: LD_EXP 62
65269: PPUSH
65270: LD_VAR 0 1
65274: PPUSH
65275: CALL_OW 255
65279: PUSH
65280: LD_VAR 0 1
65284: PUSH
65285: LD_VAR 0 2
65289: PUSH
65290: LD_VAR 0 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: PPUSH
65301: CALL 54438 0 2
65305: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65306: CALL 65373 0 0
// exit ;
65310: POP
65311: POP
65312: GO 65368
// end ; end ;
65314: GO 65153
65316: POP
65317: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65318: LD_ADDR_EXP 62
65322: PUSH
65323: LD_EXP 62
65327: PPUSH
65328: LD_VAR 0 1
65332: PPUSH
65333: CALL_OW 255
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_VAR 0 2
65347: PUSH
65348: LD_VAR 0 3
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: PPUSH
65359: CALL 54438 0 2
65363: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65364: CALL 65373 0 0
// end ;
65368: LD_VAR 0 4
65372: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65373: LD_INT 0
65375: PPUSH
65376: PPUSH
65377: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65378: LD_STRING resetFactoryWaypoint();
65380: PPUSH
65381: CALL_OW 559
// if factoryWaypoints then
65385: LD_EXP 62
65389: IFFALSE 65510
// begin list := factoryWaypoints ;
65391: LD_ADDR_VAR 0 3
65395: PUSH
65396: LD_EXP 62
65400: ST_TO_ADDR
// for i := 1 to list do
65401: LD_ADDR_VAR 0 2
65405: PUSH
65406: DOUBLE
65407: LD_INT 1
65409: DEC
65410: ST_TO_ADDR
65411: LD_VAR 0 3
65415: PUSH
65416: FOR_TO
65417: IFFALSE 65508
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65419: LD_STRING setFactoryWaypointXY(
65421: PUSH
65422: LD_VAR 0 3
65426: PUSH
65427: LD_VAR 0 2
65431: ARRAY
65432: PUSH
65433: LD_INT 1
65435: ARRAY
65436: STR
65437: PUSH
65438: LD_STRING ,
65440: STR
65441: PUSH
65442: LD_VAR 0 3
65446: PUSH
65447: LD_VAR 0 2
65451: ARRAY
65452: PUSH
65453: LD_INT 2
65455: ARRAY
65456: STR
65457: PUSH
65458: LD_STRING ,
65460: STR
65461: PUSH
65462: LD_VAR 0 3
65466: PUSH
65467: LD_VAR 0 2
65471: ARRAY
65472: PUSH
65473: LD_INT 3
65475: ARRAY
65476: STR
65477: PUSH
65478: LD_STRING ,
65480: STR
65481: PUSH
65482: LD_VAR 0 3
65486: PUSH
65487: LD_VAR 0 2
65491: ARRAY
65492: PUSH
65493: LD_INT 4
65495: ARRAY
65496: STR
65497: PUSH
65498: LD_STRING )
65500: STR
65501: PPUSH
65502: CALL_OW 559
65506: GO 65416
65508: POP
65509: POP
// end ; end ;
65510: LD_VAR 0 1
65514: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65515: LD_INT 0
65517: PPUSH
// if HexInfo ( x , y ) = warehouse then
65518: LD_VAR 0 2
65522: PPUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: CALL_OW 428
65532: PUSH
65533: LD_VAR 0 1
65537: EQUAL
65538: IFFALSE 65565
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65540: LD_ADDR_EXP 63
65544: PUSH
65545: LD_EXP 63
65549: PPUSH
65550: LD_VAR 0 1
65554: PPUSH
65555: LD_INT 0
65557: PPUSH
65558: CALL_OW 1
65562: ST_TO_ADDR
65563: GO 65616
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65565: LD_ADDR_EXP 63
65569: PUSH
65570: LD_EXP 63
65574: PPUSH
65575: LD_VAR 0 1
65579: PPUSH
65580: LD_VAR 0 1
65584: PPUSH
65585: CALL_OW 255
65589: PUSH
65590: LD_VAR 0 1
65594: PUSH
65595: LD_VAR 0 2
65599: PUSH
65600: LD_VAR 0 3
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: PPUSH
65611: CALL_OW 1
65615: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65616: CALL 65625 0 0
// end ;
65620: LD_VAR 0 4
65624: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65625: LD_INT 0
65627: PPUSH
65628: PPUSH
65629: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65630: LD_STRING resetWarehouseGatheringPoints();
65632: PPUSH
65633: CALL_OW 559
// if warehouseGatheringPoints then
65637: LD_EXP 63
65641: IFFALSE 65767
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65643: LD_ADDR_VAR 0 3
65647: PUSH
65648: LD_EXP 63
65652: PPUSH
65653: CALL 58200 0 1
65657: ST_TO_ADDR
// for i := 1 to list do
65658: LD_ADDR_VAR 0 2
65662: PUSH
65663: DOUBLE
65664: LD_INT 1
65666: DEC
65667: ST_TO_ADDR
65668: LD_VAR 0 3
65672: PUSH
65673: FOR_TO
65674: IFFALSE 65765
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65676: LD_STRING setWarehouseGatheringPointXY(
65678: PUSH
65679: LD_VAR 0 3
65683: PUSH
65684: LD_VAR 0 2
65688: ARRAY
65689: PUSH
65690: LD_INT 1
65692: ARRAY
65693: STR
65694: PUSH
65695: LD_STRING ,
65697: STR
65698: PUSH
65699: LD_VAR 0 3
65703: PUSH
65704: LD_VAR 0 2
65708: ARRAY
65709: PUSH
65710: LD_INT 2
65712: ARRAY
65713: STR
65714: PUSH
65715: LD_STRING ,
65717: STR
65718: PUSH
65719: LD_VAR 0 3
65723: PUSH
65724: LD_VAR 0 2
65728: ARRAY
65729: PUSH
65730: LD_INT 3
65732: ARRAY
65733: STR
65734: PUSH
65735: LD_STRING ,
65737: STR
65738: PUSH
65739: LD_VAR 0 3
65743: PUSH
65744: LD_VAR 0 2
65748: ARRAY
65749: PUSH
65750: LD_INT 4
65752: ARRAY
65753: STR
65754: PUSH
65755: LD_STRING )
65757: STR
65758: PPUSH
65759: CALL_OW 559
65763: GO 65673
65765: POP
65766: POP
// end ; end ;
65767: LD_VAR 0 1
65771: RET
