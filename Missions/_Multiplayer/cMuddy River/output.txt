// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1679 0 1
  44: PPUSH
  45: CALL 5262 0 1
// Multiplayer_Start ;
  49: CALL 3584 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3700 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4198 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// multi_settings_counter := 6 ;
 330: LD_ADDR_EXP 18
 334: PUSH
 335: LD_INT 6
 337: ST_TO_ADDR
// if Multiplayer then
 338: LD_OWVAR 4
 342: IFFALSE 522
// begin your_side := mp_player_side ;
 344: LD_ADDR_OWVAR 2
 348: PUSH
 349: LD_OWVAR 7
 353: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 354: LD_ADDR_EXP 6
 358: PUSH
 359: LD_OWVAR 6
 363: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 364: LD_ADDR_EXP 7
 368: PUSH
 369: LD_OWVAR 17
 373: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 374: LD_ADDR_EXP 8
 378: PUSH
 379: LD_OWVAR 15
 383: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 384: LD_ADDR_EXP 9
 388: PUSH
 389: LD_OWVAR 16
 393: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 394: LD_ADDR_EXP 10
 398: PUSH
 399: EMPTY
 400: PUSH
 401: EMPTY
 402: LIST
 403: ST_TO_ADDR
// for i in mp_teams do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: LD_OWVAR 12
 413: PUSH
 414: FOR_IN
 415: IFFALSE 458
// if i then
 417: LD_VAR 0 2
 421: IFFALSE 456
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 423: LD_ADDR_EXP 10
 427: PUSH
 428: LD_EXP 10
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_EXP 10
 440: PUSH
 441: LD_INT 1
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: UNION
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
 456: GO 414
 458: POP
 459: POP
// for i := 1 to multi_settings_counter do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_EXP 18
 474: PUSH
 475: FOR_TO
 476: IFFALSE 518
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 478: LD_ADDR_EXP 17
 482: PUSH
 483: LD_EXP 17
 487: PPUSH
 488: LD_EXP 17
 492: PUSH
 493: LD_INT 1
 495: PLUS
 496: PPUSH
 497: LD_VAR 0 2
 501: PPUSH
 502: CALL_OW 426
 506: PUSH
 507: LD_INT 1
 509: PLUS
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
 516: GO 475
 518: POP
 519: POP
// end else
 520: GO 704
// begin your_side := 1 ;
 522: LD_ADDR_OWVAR 2
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// multi_gametype := 1 ;
 530: LD_ADDR_EXP 6
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 538: LD_ADDR_EXP 7
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 655: LD_ADDR_EXP 10
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 673: LD_ADDR_EXP 17
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 14
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 782: LD_ADDR_EXP 25
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// multi_teamgame := true ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 829: LD_ADDR_EXP 13
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: ST_TO_ADDR
// multi_custom_commanders := true ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// multi_commanders := [ ] ;
 848: LD_ADDR_EXP 24
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 855: LD_ADDR_EXP 27
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 862: LD_ADDR_EXP 28
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// multi_players_amount := 0 ;
 870: LD_ADDR_EXP 26
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: LD_INT 8
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 27
 895: PUSH
 896: LD_INT 26
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 29
 905: PUSH
 906: LD_INT 28
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// for i := 1 to 8 do
 918: LD_ADDR_VAR 0 2
 922: PUSH
 923: DOUBLE
 924: LD_INT 1
 926: DEC
 927: ST_TO_ADDR
 928: LD_INT 8
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1261
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 530
 943: IFFALSE 1101
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 945: LD_ADDR_EXP 11
 949: PUSH
 950: LD_EXP 11
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 968: LD_ADDR_EXP 9
 972: PUSH
 973: LD_EXP 9
 977: PPUSH
 978: LD_VAR 0 2
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 1
 990: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 991: LD_ADDR_EXP 7
 995: PUSH
 996: LD_EXP 7
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// for j = 1 to multi_teams do
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: DOUBLE
1020: LD_INT 1
1022: DEC
1023: ST_TO_ADDR
1024: LD_EXP 10
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1099
// begin if i in multi_teams [ j ] then
1032: LD_VAR 0 2
1036: PUSH
1037: LD_EXP 10
1041: PUSH
1042: LD_VAR 0 3
1046: ARRAY
1047: IN
1048: IFFALSE 1097
// begin tmp := multi_teams [ j ] diff i ;
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PUSH
1066: LD_VAR 0 2
1070: DIFF
1071: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1072: LD_ADDR_EXP 10
1076: PUSH
1077: LD_EXP 10
1081: PPUSH
1082: LD_VAR 0 3
1086: PPUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// end ; end ;
1097: GO 1029
1099: POP
1100: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: PUSH
1112: LD_EXP 9
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: PUSH
1123: LD_EXP 13
1127: IN
1128: NOT
1129: AND
1130: IFFALSE 1171
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1132: LD_ADDR_EXP 9
1136: PUSH
1137: LD_EXP 9
1141: PPUSH
1142: LD_VAR 0 2
1146: PPUSH
1147: LD_EXP 13
1151: PUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_EXP 13
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: CALL_OW 1
1170: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1171: LD_EXP 9
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: NOT
1182: PUSH
1183: LD_EXP 7
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: NOT
1194: AND
1195: PUSH
1196: LD_EXP 11
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: NOT
1207: AND
1208: IFFALSE 1233
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1210: LD_ADDR_EXP 14
1214: PUSH
1215: LD_EXP 14
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 1
1232: ST_TO_ADDR
// if multi_sides [ i ] then
1233: LD_EXP 7
1237: PUSH
1238: LD_VAR 0 2
1242: ARRAY
1243: IFFALSE 1259
// multi_players_amount := multi_players_amount + 1 ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 26
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ST_TO_ADDR
// end ;
1259: GO 931
1261: POP
1262: POP
// for i in multi_teams do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: LD_EXP 10
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1382
// begin for j = 2 to i do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 2
1284: DEC
1285: ST_TO_ADDR
1286: LD_VAR 0 2
1290: PUSH
1291: FOR_TO
1292: IFFALSE 1378
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 3
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 343
// for x = 1 to j - 1 do
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_VAR 0 3
1332: PUSH
1333: LD_INT 1
1335: MINUS
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1374
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 80
1372: GO 1337
1374: POP
1375: POP
// end ;
1376: GO 1291
1378: POP
1379: POP
// end ;
1380: GO 1273
1382: POP
1383: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1384: LD_ADDR_OWVAR 67
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_EXP 17
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: ARRAY
1412: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1413: LD_ADDR_EXP 19
1417: PUSH
1418: LD_INT 9
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 18
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 17
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: ARRAY
1445: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_INT 5
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 8
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: LD_EXP 17
1473: PUSH
1474: LD_INT 3
1476: ARRAY
1477: ARRAY
1478: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$32 ] , [ 12000 , 0 0$22 ] , [ 14000 , 0 0$14 ] , [ 16000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1479: LD_ADDR_EXP 21
1483: PUSH
1484: LD_INT 9000
1486: PUSH
1487: LD_INT 1120
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 12000
1496: PUSH
1497: LD_INT 770
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14000
1506: PUSH
1507: LD_INT 490
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 16000
1516: PUSH
1517: LD_INT 420
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 17
1534: PUSH
1535: LD_INT 4
1537: ARRAY
1538: ARRAY
1539: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1540: LD_ADDR_EXP 22
1544: PUSH
1545: LD_INT 6
1547: PUSH
1548: LD_INT 8
1550: PUSH
1551: LD_INT 10
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 17
1563: PUSH
1564: LD_INT 5
1566: ARRAY
1567: ARRAY
1568: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1569: LD_ADDR_EXP 23
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_EXP 17
1592: PUSH
1593: LD_INT 6
1595: ARRAY
1596: ARRAY
1597: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1598: LD_ADDR_EXP 29
1602: PUSH
1603: LD_INT 31500
1605: PUSH
1606: LD_INT 37800
1608: PUSH
1609: LD_INT 44100
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_OWVAR 67
1621: ARRAY
1622: ST_TO_ADDR
// if multi_ape_amount then
1623: LD_EXP 22
1627: IFFALSE 1674
// begin for i := 1 to multi_ape_amount do
1629: LD_ADDR_VAR 0 2
1633: PUSH
1634: DOUBLE
1635: LD_INT 1
1637: DEC
1638: ST_TO_ADDR
1639: LD_EXP 22
1643: PUSH
1644: FOR_TO
1645: IFFALSE 1672
// begin PrepareApeman ( - 5 ) ;
1647: LD_INT 5
1649: NEG
1650: PPUSH
1651: CALL 50911 0 1
// PlaceUnitArea ( CreateHuman , ape_area , false ) ;
1655: CALL_OW 44
1659: PPUSH
1660: LD_INT 50
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// end ;
1670: GO 1644
1672: POP
1673: POP
// end ; end ;
1674: LD_VAR 0 1
1678: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1679: LD_INT 0
1681: PPUSH
1682: PPUSH
// if not multi_sides [ 2 ] then
1683: LD_EXP 7
1687: PUSH
1688: LD_INT 2
1690: ARRAY
1691: NOT
1692: IFFALSE 1706
// begin result := preferSide ;
1694: LD_ADDR_VAR 0 2
1698: PUSH
1699: LD_VAR 0 1
1703: ST_TO_ADDR
// exit ;
1704: GO 1753
// end ; for i := 1 to 8 do
1706: LD_ADDR_VAR 0 3
1710: PUSH
1711: DOUBLE
1712: LD_INT 1
1714: DEC
1715: ST_TO_ADDR
1716: LD_INT 8
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1751
// if not multi_sides [ i ] then
1722: LD_EXP 7
1726: PUSH
1727: LD_VAR 0 3
1731: ARRAY
1732: NOT
1733: IFFALSE 1749
// begin result := i ;
1735: LD_ADDR_VAR 0 2
1739: PUSH
1740: LD_VAR 0 3
1744: ST_TO_ADDR
// exit ;
1745: POP
1746: POP
1747: GO 1753
// end ;
1749: GO 1719
1751: POP
1752: POP
// end ;
1753: LD_VAR 0 2
1757: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1758: LD_INT 0
1760: PPUSH
// uc_side := side ;
1761: LD_ADDR_OWVAR 20
1765: PUSH
1766: LD_VAR 0 1
1770: ST_TO_ADDR
// uc_nation := 1 ;
1771: LD_ADDR_OWVAR 21
1775: PUSH
1776: LD_INT 1
1778: ST_TO_ADDR
// hc_importance := 100 ;
1779: LD_ADDR_OWVAR 32
1783: PUSH
1784: LD_INT 100
1786: ST_TO_ADDR
// hc_class := 1 ;
1787: LD_ADDR_OWVAR 28
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// if num = 1 then
1795: LD_VAR 0 2
1799: PUSH
1800: LD_INT 1
1802: EQUAL
1803: IFFALSE 1885
// begin hc_gallery := us ;
1805: LD_ADDR_OWVAR 33
1809: PUSH
1810: LD_STRING us
1812: ST_TO_ADDR
// hc_face_number := 5 ;
1813: LD_ADDR_OWVAR 34
1817: PUSH
1818: LD_INT 5
1820: ST_TO_ADDR
// hc_name := John Macmilan ;
1821: LD_ADDR_OWVAR 26
1825: PUSH
1826: LD_STRING John Macmilan
1828: ST_TO_ADDR
// hc_sex := sex_male ;
1829: LD_ADDR_OWVAR 27
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1837: LD_ADDR_OWVAR 31
1841: PUSH
1842: LD_INT 7
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 4
1850: PUSH
1851: LD_INT 4
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1860: LD_ADDR_OWVAR 29
1864: PUSH
1865: LD_INT 11
1867: PUSH
1868: LD_INT 10
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: ST_TO_ADDR
// result := CreateHuman ;
1875: LD_ADDR_VAR 0 3
1879: PUSH
1880: CALL_OW 44
1884: ST_TO_ADDR
// end ; if num = 2 then
1885: LD_VAR 0 2
1889: PUSH
1890: LD_INT 2
1892: EQUAL
1893: IFFALSE 1975
// begin hc_gallery := us ;
1895: LD_ADDR_OWVAR 33
1899: PUSH
1900: LD_STRING us
1902: ST_TO_ADDR
// hc_face_number := 2 ;
1903: LD_ADDR_OWVAR 34
1907: PUSH
1908: LD_INT 2
1910: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1911: LD_ADDR_OWVAR 26
1915: PUSH
1916: LD_STRING Lucy Donaldson
1918: ST_TO_ADDR
// hc_sex := sex_female ;
1919: LD_ADDR_OWVAR 27
1923: PUSH
1924: LD_INT 2
1926: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1927: LD_ADDR_OWVAR 31
1931: PUSH
1932: LD_INT 6
1934: PUSH
1935: LD_INT 3
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1950: LD_ADDR_OWVAR 29
1954: PUSH
1955: LD_INT 9
1957: PUSH
1958: LD_INT 12
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: ST_TO_ADDR
// result := CreateHuman ;
1965: LD_ADDR_VAR 0 3
1969: PUSH
1970: CALL_OW 44
1974: ST_TO_ADDR
// end ; if num = 3 then
1975: LD_VAR 0 2
1979: PUSH
1980: LD_INT 3
1982: EQUAL
1983: IFFALSE 2065
// begin hc_gallery := us ;
1985: LD_ADDR_OWVAR 33
1989: PUSH
1990: LD_STRING us
1992: ST_TO_ADDR
// hc_face_number := 7 ;
1993: LD_ADDR_OWVAR 34
1997: PUSH
1998: LD_INT 7
2000: ST_TO_ADDR
// hc_name := Arthur Powell ;
2001: LD_ADDR_OWVAR 26
2005: PUSH
2006: LD_STRING Arthur Powell
2008: ST_TO_ADDR
// hc_sex := sex_male ;
2009: LD_ADDR_OWVAR 27
2013: PUSH
2014: LD_INT 1
2016: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 5 , 2 ] ;
2017: LD_ADDR_OWVAR 31
2021: PUSH
2022: LD_INT 8
2024: PUSH
2025: LD_INT 2
2027: PUSH
2028: LD_INT 5
2030: PUSH
2031: LD_INT 2
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2040: LD_ADDR_OWVAR 29
2044: PUSH
2045: LD_INT 10
2047: PUSH
2048: LD_INT 11
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: ST_TO_ADDR
// result := CreateHuman ;
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: CALL_OW 44
2064: ST_TO_ADDR
// end ; end ;
2065: LD_VAR 0 3
2069: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
2078: PPUSH
2079: PPUSH
2080: PPUSH
// for i := 1 to 8 do
2081: LD_ADDR_VAR 0 2
2085: PUSH
2086: DOUBLE
2087: LD_INT 1
2089: DEC
2090: ST_TO_ADDR
2091: LD_INT 8
2093: PUSH
2094: FOR_TO
2095: IFFALSE 2985
// begin if not multi_sides [ i ] then
2097: LD_EXP 7
2101: PUSH
2102: LD_VAR 0 2
2106: ARRAY
2107: NOT
2108: IFFALSE 2112
// continue ;
2110: GO 2094
// if multi_custom_commanders then
2112: LD_EXP 16
2116: IFFALSE 2208
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2118: LD_ADDR_VAR 0 5
2122: PUSH
2123: LD_VAR 0 2
2127: PPUSH
2128: LD_EXP 7
2132: PUSH
2133: LD_VAR 0 2
2137: ARRAY
2138: PPUSH
2139: CALL 1758 0 2
2143: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2144: LD_ADDR_EXP 24
2148: PUSH
2149: LD_EXP 24
2153: PPUSH
2154: LD_EXP 24
2158: PUSH
2159: LD_INT 1
2161: PLUS
2162: PPUSH
2163: LD_VAR 0 5
2167: PPUSH
2168: CALL_OW 2
2172: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2173: LD_VAR 0 5
2177: PPUSH
2178: LD_EXP 12
2182: PUSH
2183: LD_EXP 7
2187: PUSH
2188: LD_VAR 0 2
2192: ARRAY
2193: ARRAY
2194: PUSH
2195: LD_INT 1
2197: ARRAY
2198: PPUSH
2199: LD_INT 0
2201: PPUSH
2202: CALL_OW 49
// end else
2206: GO 2419
// begin uc_side := i ;
2208: LD_ADDR_OWVAR 20
2212: PUSH
2213: LD_VAR 0 2
2217: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2218: LD_ADDR_OWVAR 21
2222: PUSH
2223: LD_EXP 9
2227: PUSH
2228: LD_VAR 0 2
2232: ARRAY
2233: ST_TO_ADDR
// hc_importance := 100 ;
2234: LD_ADDR_OWVAR 32
2238: PUSH
2239: LD_INT 100
2241: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2242: LD_INT 0
2244: PPUSH
2245: LD_INT 1
2247: PPUSH
2248: LD_EXP 20
2252: PPUSH
2253: CALL_OW 380
// if multiplayer then
2257: LD_OWVAR 4
2261: IFFALSE 2319
// begin hc_name := mp_sides_players_names [ i ] ;
2263: LD_ADDR_OWVAR 26
2267: PUSH
2268: LD_OWVAR 19
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2279: LD_ADDR_OWVAR 33
2283: PUSH
2284: LD_STRING MULTIAVATARS
2286: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2287: LD_ADDR_OWVAR 34
2291: PUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: CALL_OW 525
2301: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2302: LD_ADDR_OWVAR 27
2306: PUSH
2307: LD_VAR 0 2
2311: PPUSH
2312: CALL_OW 526
2316: ST_TO_ADDR
// end else
2317: GO 2351
// begin hc_gallery :=  ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING 
2326: ST_TO_ADDR
// hc_name :=  ;
2327: LD_ADDR_OWVAR 26
2331: PUSH
2332: LD_STRING 
2334: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2335: LD_ADDR_OWVAR 27
2339: PUSH
2340: LD_INT 1
2342: PPUSH
2343: LD_INT 2
2345: PPUSH
2346: CALL_OW 12
2350: ST_TO_ADDR
// end ; un := CreateHuman ;
2351: LD_ADDR_VAR 0 5
2355: PUSH
2356: CALL_OW 44
2360: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2361: LD_VAR 0 5
2365: PPUSH
2366: LD_EXP 12
2370: PUSH
2371: LD_EXP 7
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: ARRAY
2382: PUSH
2383: LD_INT 1
2385: ARRAY
2386: PPUSH
2387: LD_INT 0
2389: PPUSH
2390: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2394: LD_ADDR_EXP 24
2398: PUSH
2399: LD_EXP 24
2403: PPUSH
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_VAR 0 5
2413: PPUSH
2414: CALL_OW 1
2418: ST_TO_ADDR
// end ; InitHc ;
2419: CALL_OW 19
// InitUc ;
2423: CALL_OW 18
// uc_side := i ;
2427: LD_ADDR_OWVAR 20
2431: PUSH
2432: LD_VAR 0 2
2436: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2437: LD_ADDR_OWVAR 21
2441: PUSH
2442: LD_EXP 9
2446: PUSH
2447: LD_VAR 0 2
2451: ARRAY
2452: ST_TO_ADDR
// hc_gallery :=  ;
2453: LD_ADDR_OWVAR 33
2457: PUSH
2458: LD_STRING 
2460: ST_TO_ADDR
// hc_name :=  ;
2461: LD_ADDR_OWVAR 26
2465: PUSH
2466: LD_STRING 
2468: ST_TO_ADDR
// hc_importance := 0 ;
2469: LD_ADDR_OWVAR 32
2473: PUSH
2474: LD_INT 0
2476: ST_TO_ADDR
// cl := 1 ;
2477: LD_ADDR_VAR 0 4
2481: PUSH
2482: LD_INT 1
2484: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2485: LD_ADDR_VAR 0 3
2489: PUSH
2490: DOUBLE
2491: LD_INT 2
2493: DEC
2494: ST_TO_ADDR
2495: LD_EXP 19
2499: PUSH
2500: FOR_TO
2501: IFFALSE 2873
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2503: LD_VAR 0 3
2507: PUSH
2508: LD_INT 1
2510: MINUS
2511: PUSH
2512: LD_EXP 19
2516: PUSH
2517: LD_INT 1
2519: MINUS
2520: PUSH
2521: LD_INT 4
2523: DIVREAL
2524: MOD
2525: PUSH
2526: LD_INT 0
2528: EQUAL
2529: IFFALSE 2545
// cl := cl + 1 ;
2531: LD_ADDR_VAR 0 4
2535: PUSH
2536: LD_VAR 0 4
2540: PUSH
2541: LD_INT 1
2543: PLUS
2544: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2545: LD_INT 0
2547: PPUSH
2548: LD_VAR 0 4
2552: PPUSH
2553: LD_EXP 20
2557: PPUSH
2558: CALL_OW 380
// un := CreateHuman ;
2562: LD_ADDR_VAR 0 5
2566: PUSH
2567: CALL_OW 44
2571: ST_TO_ADDR
// if j > copy then
2572: LD_VAR 0 3
2576: PUSH
2577: LD_VAR 0 8
2581: GREATER
2582: IFFALSE 2611
// copy := Replace ( copy , j , un ) else
2584: LD_ADDR_VAR 0 8
2588: PUSH
2589: LD_VAR 0 8
2593: PPUSH
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_VAR 0 5
2603: PPUSH
2604: CALL_OW 1
2608: ST_TO_ADDR
2609: GO 2693
// begin CopySkills ( copy [ j ] , un ) ;
2611: LD_VAR 0 8
2615: PUSH
2616: LD_VAR 0 3
2620: ARRAY
2621: PPUSH
2622: LD_VAR 0 5
2626: PPUSH
2627: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2631: LD_VAR 0 5
2635: PPUSH
2636: LD_INT 2
2638: PPUSH
2639: LD_VAR 0 8
2643: PUSH
2644: LD_VAR 0 3
2648: ARRAY
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: CALL_OW 260
2657: PPUSH
2658: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2662: LD_VAR 0 5
2666: PPUSH
2667: LD_INT 1
2669: PPUSH
2670: LD_VAR 0 8
2674: PUSH
2675: LD_VAR 0 3
2679: ARRAY
2680: PPUSH
2681: LD_INT 1
2683: PPUSH
2684: CALL_OW 260
2688: PPUSH
2689: CALL_OW 239
// end ; if multi_pos_area then
2693: LD_EXP 12
2697: IFFALSE 2871
// begin if GetClass ( un ) = 3 then
2699: LD_VAR 0 5
2703: PPUSH
2704: CALL_OW 257
2708: PUSH
2709: LD_INT 3
2711: EQUAL
2712: IFFALSE 2838
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2714: LD_INT 3
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_VAR 0 3
2728: PUSH
2729: LD_INT 2
2731: MOD
2732: PUSH
2733: LD_INT 1
2735: PLUS
2736: ARRAY
2737: PPUSH
2738: LD_INT 2
2740: PPUSH
2741: LD_INT 1
2743: PPUSH
2744: LD_INT 5
2746: PUSH
2747: LD_INT 4
2749: PUSH
2750: LD_INT 3
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: PUSH
2758: LD_VAR 0 3
2762: PUSH
2763: LD_INT 3
2765: MOD
2766: PUSH
2767: LD_INT 1
2769: PLUS
2770: ARRAY
2771: PPUSH
2772: LD_INT 100
2774: PPUSH
2775: CALL 21792 0 5
// veh := CreateVehicle ;
2779: LD_ADDR_VAR 0 6
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2789: LD_VAR 0 6
2793: PPUSH
2794: LD_EXP 12
2798: PUSH
2799: LD_EXP 7
2803: PUSH
2804: LD_VAR 0 2
2808: ARRAY
2809: ARRAY
2810: PUSH
2811: LD_INT 2
2813: ARRAY
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2822: LD_VAR 0 5
2826: PPUSH
2827: LD_VAR 0 6
2831: PPUSH
2832: CALL_OW 52
// continue ;
2836: GO 2500
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2838: LD_VAR 0 5
2842: PPUSH
2843: LD_EXP 12
2847: PUSH
2848: LD_EXP 7
2852: PUSH
2853: LD_VAR 0 2
2857: ARRAY
2858: ARRAY
2859: PUSH
2860: LD_INT 1
2862: ARRAY
2863: PPUSH
2864: LD_INT 0
2866: PPUSH
2867: CALL_OW 49
// end ; end ;
2871: GO 2500
2873: POP
2874: POP
// for j = 1 to 3 do
2875: LD_ADDR_VAR 0 3
2879: PUSH
2880: DOUBLE
2881: LD_INT 1
2883: DEC
2884: ST_TO_ADDR
2885: LD_INT 3
2887: PUSH
2888: FOR_TO
2889: IFFALSE 2981
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2891: LD_INT 2
2893: PUSH
2894: LD_INT 3
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: CALL_OW 12
2911: ARRAY
2912: PPUSH
2913: LD_INT 2
2915: PPUSH
2916: LD_INT 3
2918: PPUSH
2919: LD_INT 11
2921: PUSH
2922: LD_INT 7
2924: PUSH
2925: LD_INT 4
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: LIST
2932: PUSH
2933: LD_VAR 0 3
2937: ARRAY
2938: PPUSH
2939: LD_INT 100
2941: PPUSH
2942: CALL 21792 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2946: CALL_OW 45
2950: PPUSH
2951: LD_EXP 12
2955: PUSH
2956: LD_EXP 7
2960: PUSH
2961: LD_VAR 0 2
2965: ARRAY
2966: ARRAY
2967: PUSH
2968: LD_INT 1
2970: ARRAY
2971: PPUSH
2972: LD_INT 0
2974: PPUSH
2975: CALL_OW 49
// end ;
2979: GO 2888
2981: POP
2982: POP
// end ;
2983: GO 2094
2985: POP
2986: POP
// end ;
2987: LD_VAR 0 1
2991: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2992: LD_INT 0
2994: PPUSH
2995: PPUSH
2996: PPUSH
2997: PPUSH
2998: PPUSH
// if not multi_support then
2999: LD_EXP 23
3003: NOT
3004: IFFALSE 3008
// exit ;
3006: GO 3579
// result := [ ] ;
3008: LD_ADDR_VAR 0 1
3012: PUSH
3013: EMPTY
3014: ST_TO_ADDR
// for i := 1 to 8 do
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: DOUBLE
3021: LD_INT 1
3023: DEC
3024: ST_TO_ADDR
3025: LD_INT 8
3027: PUSH
3028: FOR_TO
3029: IFFALSE 3577
// begin result := Replace ( result , i , [ ] ) ;
3031: LD_ADDR_VAR 0 1
3035: PUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_VAR 0 2
3045: PPUSH
3046: EMPTY
3047: PPUSH
3048: CALL_OW 1
3052: ST_TO_ADDR
// if multi_sides [ i ] then
3053: LD_EXP 7
3057: PUSH
3058: LD_VAR 0 2
3062: ARRAY
3063: IFFALSE 3575
// begin tmp := [ ] ;
3065: LD_ADDR_VAR 0 5
3069: PUSH
3070: EMPTY
3071: ST_TO_ADDR
// if multi_support = 1 then
3072: LD_EXP 23
3076: PUSH
3077: LD_INT 1
3079: EQUAL
3080: IFFALSE 3248
// begin uc_side := i ;
3082: LD_ADDR_OWVAR 20
3086: PUSH
3087: LD_VAR 0 2
3091: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_EXP 9
3101: PUSH
3102: LD_VAR 0 2
3106: ARRAY
3107: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3108: LD_INT 3
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 11
3119: PPUSH
3120: LD_INT 40
3122: PPUSH
3123: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3127: LD_ADDR_VAR 0 5
3131: PUSH
3132: LD_VAR 0 5
3136: PUSH
3137: CALL_OW 45
3141: ADD
3142: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3143: LD_INT 2
3145: PPUSH
3146: LD_INT 1
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: LD_INT 5
3154: PPUSH
3155: LD_INT 40
3157: PPUSH
3158: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3162: LD_ADDR_VAR 0 5
3166: PUSH
3167: LD_VAR 0 5
3171: PUSH
3172: CALL_OW 45
3176: ADD
3177: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3178: LD_INT 2
3180: PPUSH
3181: LD_INT 3
3183: PPUSH
3184: LD_INT 3
3186: PPUSH
3187: LD_INT 4
3189: PPUSH
3190: LD_INT 40
3192: PPUSH
3193: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 5
3206: PUSH
3207: CALL_OW 45
3211: ADD
3212: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 2
3218: PPUSH
3219: LD_INT 3
3221: PPUSH
3222: LD_INT 9
3224: PPUSH
3225: LD_INT 40
3227: PPUSH
3228: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3232: LD_ADDR_VAR 0 5
3236: PUSH
3237: LD_VAR 0 5
3241: PUSH
3242: CALL_OW 45
3246: ADD
3247: ST_TO_ADDR
// end ; if multi_support = 2 then
3248: LD_EXP 23
3252: PUSH
3253: LD_INT 2
3255: EQUAL
3256: IFFALSE 3550
// begin uc_side := i ;
3258: LD_ADDR_OWVAR 20
3262: PUSH
3263: LD_VAR 0 2
3267: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3268: LD_ADDR_OWVAR 21
3272: PUSH
3273: LD_EXP 9
3277: PUSH
3278: LD_VAR 0 2
3282: ARRAY
3283: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 1
3289: PPUSH
3290: LD_INT 3
3292: PPUSH
3293: LD_INT 11
3295: PPUSH
3296: LD_INT 40
3298: PPUSH
3299: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3303: LD_ADDR_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: PUSH
3313: CALL_OW 45
3317: ADD
3318: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3319: LD_INT 3
3321: PPUSH
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 3
3327: PPUSH
3328: LD_INT 12
3330: PPUSH
3331: LD_INT 40
3333: PPUSH
3334: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3338: LD_ADDR_VAR 0 5
3342: PUSH
3343: LD_VAR 0 5
3347: PUSH
3348: CALL_OW 45
3352: ADD
3353: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3354: LD_VAR 0 5
3358: PUSH
3359: LD_VAR 0 5
3363: ARRAY
3364: PPUSH
3365: LD_INT 1
3367: PPUSH
3368: LD_INT 100
3370: PPUSH
3371: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3375: LD_INT 2
3377: PPUSH
3378: LD_INT 3
3380: PPUSH
3381: LD_INT 3
3383: PPUSH
3384: LD_INT 5
3386: PPUSH
3387: LD_INT 40
3389: PPUSH
3390: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_VAR 0 5
3403: PUSH
3404: CALL_OW 45
3408: ADD
3409: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3410: LD_INT 4
3412: PPUSH
3413: LD_INT 1
3415: PPUSH
3416: LD_INT 3
3418: PPUSH
3419: LD_INT 6
3421: PPUSH
3422: LD_INT 40
3424: PPUSH
3425: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3429: LD_ADDR_VAR 0 5
3433: PUSH
3434: LD_VAR 0 5
3438: PUSH
3439: CALL_OW 45
3443: ADD
3444: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3445: LD_INT 2
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 3
3453: PPUSH
3454: LD_INT 9
3456: PPUSH
3457: LD_INT 40
3459: PPUSH
3460: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3464: LD_ADDR_VAR 0 5
3468: PUSH
3469: LD_VAR 0 5
3473: PUSH
3474: CALL_OW 45
3478: ADD
3479: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3480: LD_INT 2
3482: PPUSH
3483: LD_INT 3
3485: PPUSH
3486: LD_INT 3
3488: PPUSH
3489: LD_INT 9
3491: PPUSH
3492: LD_INT 40
3494: PPUSH
3495: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3499: LD_ADDR_VAR 0 5
3503: PUSH
3504: LD_VAR 0 5
3508: PUSH
3509: CALL_OW 45
3513: ADD
3514: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3515: LD_INT 4
3517: PPUSH
3518: LD_INT 1
3520: PPUSH
3521: LD_INT 3
3523: PPUSH
3524: LD_INT 6
3526: PPUSH
3527: LD_INT 40
3529: PPUSH
3530: CALL 21792 0 5
// tmp := tmp ^ CreateVehicle ;
3534: LD_ADDR_VAR 0 5
3538: PUSH
3539: LD_VAR 0 5
3543: PUSH
3544: CALL_OW 45
3548: ADD
3549: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3550: LD_ADDR_VAR 0 1
3554: PUSH
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_VAR 0 2
3564: PPUSH
3565: LD_VAR 0 5
3569: PPUSH
3570: CALL_OW 1
3574: ST_TO_ADDR
// end ; end ;
3575: GO 3028
3577: POP
3578: POP
// end ;
3579: LD_VAR 0 1
3583: RET
// export function Multiplayer_Start ( ) ; begin
3584: LD_INT 0
3586: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3587: CALL 2070 0 0
// Multiplayer_InitPointSystem ( ) ;
3591: CALL 4287 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3595: LD_INT 20
3597: PPUSH
3598: CALL 4463 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3602: LD_INT 150
3604: PPUSH
3605: CALL 4463 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3609: LD_INT 5
3611: PPUSH
3612: CALL 4463 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3616: LD_INT 40
3618: NEG
3619: PPUSH
3620: CALL 4463 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3624: LD_INT 200
3626: PPUSH
3627: CALL 4463 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3631: LD_INT 2
3633: PPUSH
3634: CALL 4463 0 1
// Multiplayer_SpawnArtifact ;
3638: CALL 4903 0 0
// if multi_support then
3642: LD_EXP 23
3646: IFFALSE 3658
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3648: LD_ADDR_EXP 27
3652: PUSH
3653: CALL 2992 0 0
3657: ST_TO_ADDR
// if multi_sides [ your_side ] then
3658: LD_EXP 7
3662: PUSH
3663: LD_OWVAR 2
3667: ARRAY
3668: IFFALSE 3695
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3670: LD_INT 22
3672: PUSH
3673: LD_OWVAR 2
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 69
3686: PUSH
3687: LD_INT 1
3689: ARRAY
3690: PPUSH
3691: CALL_OW 87
// end ;
3695: LD_VAR 0 1
3699: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
// reinforcements_arrive := 0 ;
3707: LD_ADDR_VAR 0 5
3711: PUSH
3712: LD_INT 0
3714: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3715: LD_INT 35
3717: PPUSH
3718: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3722: LD_OWVAR 1
3726: PUSH
3727: LD_EXP 29
3731: GREATER
3732: PUSH
3733: LD_EXP 28
3737: NOT
3738: AND
3739: PUSH
3740: LD_EXP 23
3744: AND
3745: IFFALSE 3910
// begin multi_reinforcements_spawned := true ;
3747: LD_ADDR_EXP 28
3751: PUSH
3752: LD_INT 1
3754: ST_TO_ADDR
// for i := 1 to 8 do
3755: LD_ADDR_VAR 0 2
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_INT 8
3767: PUSH
3768: FOR_TO
3769: IFFALSE 3898
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3771: LD_EXP 7
3775: PUSH
3776: LD_VAR 0 2
3780: ARRAY
3781: PUSH
3782: LD_EXP 25
3786: PUSH
3787: LD_VAR 0 2
3791: ARRAY
3792: NOT
3793: AND
3794: PUSH
3795: LD_EXP 27
3799: PUSH
3800: LD_VAR 0 2
3804: ARRAY
3805: AND
3806: IFFALSE 3896
// begin tmp := multi_reinforcements [ i ] ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_EXP 27
3817: PUSH
3818: LD_VAR 0 2
3822: ARRAY
3823: ST_TO_ADDR
// for j in tmp do
3824: LD_ADDR_VAR 0 3
3828: PUSH
3829: LD_VAR 0 4
3833: PUSH
3834: FOR_IN
3835: IFFALSE 3872
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3837: LD_VAR 0 3
3841: PPUSH
3842: LD_EXP 12
3846: PUSH
3847: LD_EXP 7
3851: PUSH
3852: LD_VAR 0 2
3856: ARRAY
3857: ARRAY
3858: PUSH
3859: LD_INT 2
3861: ARRAY
3862: PPUSH
3863: LD_INT 0
3865: PPUSH
3866: CALL_OW 49
3870: GO 3834
3872: POP
3873: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3874: LD_ADDR_EXP 27
3878: PUSH
3879: LD_EXP 27
3883: PPUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: EMPTY
3890: PPUSH
3891: CALL_OW 1
3895: ST_TO_ADDR
// end ; end ;
3896: GO 3768
3898: POP
3899: POP
// reinforcements_arrive := tick ;
3900: LD_ADDR_VAR 0 5
3904: PUSH
3905: LD_OWVAR 1
3909: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3910: LD_EXP 16
3914: NOT
3915: IFFALSE 4028
// begin for i = 1 to 8 do
3917: LD_ADDR_VAR 0 2
3921: PUSH
3922: DOUBLE
3923: LD_INT 1
3925: DEC
3926: ST_TO_ADDR
3927: LD_INT 8
3929: PUSH
3930: FOR_TO
3931: IFFALSE 4002
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3933: LD_INT 22
3935: PUSH
3936: LD_VAR 0 2
3940: PUSH
3941: EMPTY
3942: LIST
3943: LIST
3944: PPUSH
3945: CALL_OW 69
3949: PUSH
3950: LD_INT 0
3952: EQUAL
3953: PUSH
3954: LD_EXP 25
3958: PUSH
3959: LD_VAR 0 2
3963: ARRAY
3964: NOT
3965: AND
3966: IFFALSE 4000
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3968: LD_ADDR_EXP 25
3972: PUSH
3973: LD_EXP 25
3977: PPUSH
3978: LD_VAR 0 2
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: CALL_OW 1
3990: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3991: LD_VAR 0 2
3995: PPUSH
3996: CALL 4533 0 1
// end ; end ;
4000: GO 3930
4002: POP
4003: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4004: LD_EXP 25
4008: PPUSH
4009: CALL 19054 0 1
4013: PUSH
4014: LD_EXP 7
4018: PPUSH
4019: CALL 19054 0 1
4023: EQUAL
4024: IFFALSE 4028
// break ;
4026: GO 4084
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
4028: LD_INT 22
4030: PUSH
4031: LD_EXP 3
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: PUSH
4040: LD_INT 21
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 50
4052: PUSH
4053: EMPTY
4054: LIST
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: PPUSH
4061: CALL_OW 69
4065: PUSH
4066: LD_INT 0
4068: EQUAL
4069: PUSH
4070: LD_EXP 2
4074: AND
4075: PUSH
4076: LD_EXP 24
4080: NOT
4081: OR
4082: IFFALSE 3715
// game := false ;
4084: LD_ADDR_EXP 2
4088: PUSH
4089: LD_INT 0
4091: ST_TO_ADDR
// for i := 1 to 8 do
4092: LD_ADDR_VAR 0 2
4096: PUSH
4097: DOUBLE
4098: LD_INT 1
4100: DEC
4101: ST_TO_ADDR
4102: LD_INT 8
4104: PUSH
4105: FOR_TO
4106: IFFALSE 4142
// begin if multi_sides [ i ] then
4108: LD_EXP 7
4112: PUSH
4113: LD_VAR 0 2
4117: ARRAY
4118: IFFALSE 4140
// SetMultiScore ( i , multi_points [ i ] ) ;
4120: LD_VAR 0 2
4124: PPUSH
4125: LD_EXP 30
4129: PUSH
4130: LD_VAR 0 2
4134: ARRAY
4135: PPUSH
4136: CALL_OW 506
// end ;
4140: GO 4105
4142: POP
4143: POP
// if multi_loosers [ your_side ] then
4144: LD_EXP 25
4148: PUSH
4149: LD_OWVAR 2
4153: ARRAY
4154: IFFALSE 4177
// begin if Multiplayer then
4156: LD_OWVAR 4
4160: IFFALSE 4168
// YouLostInMultiplayer else
4162: CALL_OW 107
4166: GO 4175
// YouLost (  ) ;
4168: LD_STRING 
4170: PPUSH
4171: CALL_OW 104
// end else
4175: GO 4193
// begin if Multiplayer then
4177: LD_OWVAR 4
4181: IFFALSE 4189
// YouWinInMultiplayer else
4183: CALL_OW 106
4187: GO 4193
// YouWin ;
4189: CALL_OW 103
// end ; end ;
4193: LD_VAR 0 1
4197: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4198: LD_INT 0
4200: PPUSH
4201: PPUSH
// result := [ ] ;
4202: LD_ADDR_VAR 0 1
4206: PUSH
4207: EMPTY
4208: ST_TO_ADDR
// for i := 1 to 8 do
4209: LD_ADDR_VAR 0 2
4213: PUSH
4214: DOUBLE
4215: LD_INT 1
4217: DEC
4218: ST_TO_ADDR
4219: LD_INT 8
4221: PUSH
4222: FOR_TO
4223: IFFALSE 4280
// begin if multi_sides [ i ] then
4225: LD_EXP 7
4229: PUSH
4230: LD_VAR 0 2
4234: ARRAY
4235: IFFALSE 4278
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4237: LD_ADDR_VAR 0 1
4241: PUSH
4242: LD_VAR 0 1
4246: PUSH
4247: LD_STRING #coop-points
4249: PUSH
4250: LD_VAR 0 2
4254: PUSH
4255: LD_VAR 0 2
4259: PUSH
4260: LD_EXP 30
4264: PUSH
4265: LD_VAR 0 2
4269: ARRAY
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: ADD
4277: ST_TO_ADDR
// end ; end ;
4278: GO 4222
4280: POP
4281: POP
// end ;
4282: LD_VAR 0 1
4286: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4291: LD_ADDR_EXP 30
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: LD_INT 0
4301: PUSH
4302: LD_INT 0
4304: PUSH
4305: LD_INT 0
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: LD_INT 0
4316: PUSH
4317: LD_INT 0
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4330: LD_ADDR_EXP 31
4334: PUSH
4335: EMPTY
4336: ST_TO_ADDR
// end ;
4337: LD_VAR 0 1
4341: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4342: LD_INT 0
4344: PPUSH
// if not multi_points or not side or side > 8 then
4345: LD_EXP 30
4349: NOT
4350: PUSH
4351: LD_VAR 0 1
4355: NOT
4356: OR
4357: PUSH
4358: LD_VAR 0 1
4362: PUSH
4363: LD_INT 8
4365: GREATER
4366: OR
4367: IFFALSE 4371
// exit ;
4369: GO 4408
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4371: LD_ADDR_EXP 30
4375: PUSH
4376: LD_EXP 30
4380: PPUSH
4381: LD_VAR 0 1
4385: PPUSH
4386: LD_EXP 30
4390: PUSH
4391: LD_VAR 0 1
4395: ARRAY
4396: PUSH
4397: LD_VAR 0 2
4401: PLUS
4402: PPUSH
4403: CALL_OW 1
4407: ST_TO_ADDR
// end ;
4408: LD_VAR 0 3
4412: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4413: LD_INT 0
4415: PPUSH
// if not multi_points or not side or side > 8 then
4416: LD_EXP 30
4420: NOT
4421: PUSH
4422: LD_VAR 0 1
4426: NOT
4427: OR
4428: PUSH
4429: LD_VAR 0 1
4433: PUSH
4434: LD_INT 8
4436: GREATER
4437: OR
4438: IFFALSE 4442
// exit ;
4440: GO 4458
// result := multi_points [ side ] ;
4442: LD_ADDR_VAR 0 2
4446: PUSH
4447: LD_EXP 30
4451: PUSH
4452: LD_VAR 0 1
4456: ARRAY
4457: ST_TO_ADDR
// end ;
4458: LD_VAR 0 2
4462: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4463: LD_INT 0
4465: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4466: LD_ADDR_EXP 31
4470: PUSH
4471: LD_EXP 31
4475: PPUSH
4476: LD_EXP 31
4480: PUSH
4481: LD_INT 1
4483: PLUS
4484: PPUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: CALL_OW 1
4494: ST_TO_ADDR
// end ;
4495: LD_VAR 0 2
4499: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4500: LD_INT 0
4502: PPUSH
// if not id then
4503: LD_VAR 0 1
4507: NOT
4508: IFFALSE 4512
// exit ;
4510: GO 4528
// result := multi_points_conditions [ id ] ;
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: LD_EXP 31
4521: PUSH
4522: LD_VAR 0 1
4526: ARRAY
4527: ST_TO_ADDR
// end ;
4528: LD_VAR 0 2
4532: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
4537: PPUSH
4538: PPUSH
4539: PPUSH
// players := [ ] ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: EMPTY
4546: ST_TO_ADDR
// for i = 1 to 8 do
4547: LD_ADDR_VAR 0 4
4551: PUSH
4552: DOUBLE
4553: LD_INT 1
4555: DEC
4556: ST_TO_ADDR
4557: LD_INT 8
4559: PUSH
4560: FOR_TO
4561: IFFALSE 4620
// begin if i = side then
4563: LD_VAR 0 4
4567: PUSH
4568: LD_VAR 0 1
4572: EQUAL
4573: IFFALSE 4577
// continue ;
4575: GO 4560
// if multi_sides [ i ] and not multi_loosers [ i ] then
4577: LD_EXP 7
4581: PUSH
4582: LD_VAR 0 4
4586: ARRAY
4587: PUSH
4588: LD_EXP 25
4592: PUSH
4593: LD_VAR 0 4
4597: ARRAY
4598: NOT
4599: AND
4600: IFFALSE 4618
// players := players ^ i ;
4602: LD_ADDR_VAR 0 3
4606: PUSH
4607: LD_VAR 0 3
4611: PUSH
4612: LD_VAR 0 4
4616: ADD
4617: ST_TO_ADDR
// end ;
4618: GO 4560
4620: POP
4621: POP
// if not players then
4622: LD_VAR 0 3
4626: NOT
4627: IFFALSE 4631
// exit ;
4629: GO 4898
// if players = 1 then
4631: LD_VAR 0 3
4635: PUSH
4636: LD_INT 1
4638: EQUAL
4639: IFFALSE 4700
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4641: LD_ADDR_VAR 0 4
4645: PUSH
4646: LD_INT 22
4648: PUSH
4649: LD_VAR 0 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: LD_INT 51
4660: PUSH
4661: EMPTY
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 69
4672: PUSH
4673: FOR_IN
4674: IFFALSE 4696
// SetSide ( i , players [ 1 ] ) ;
4676: LD_VAR 0 4
4680: PPUSH
4681: LD_VAR 0 3
4685: PUSH
4686: LD_INT 1
4688: ARRAY
4689: PPUSH
4690: CALL_OW 235
4694: GO 4673
4696: POP
4697: POP
// end else
4698: GO 4898
// begin j := 1 ;
4700: LD_ADDR_VAR 0 5
4704: PUSH
4705: LD_INT 1
4707: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_VAR 0 1
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 2
4727: PUSH
4728: LD_INT 21
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 51
4740: PUSH
4741: EMPTY
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 2
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PPUSH
4767: CALL_OW 69
4771: PUSH
4772: FOR_IN
4773: IFFALSE 4896
// begin SetSide ( i , players [ j ] ) ;
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_VAR 0 3
4784: PUSH
4785: LD_VAR 0 5
4789: ARRAY
4790: PPUSH
4791: CALL_OW 235
// if IsDrivenBy ( i ) then
4795: LD_VAR 0 4
4799: PPUSH
4800: CALL_OW 311
4804: IFFALSE 4831
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: CALL_OW 311
4815: PPUSH
4816: LD_VAR 0 3
4820: PUSH
4821: LD_VAR 0 5
4825: ARRAY
4826: PPUSH
4827: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4831: LD_VAR 0 4
4835: PPUSH
4836: CALL_OW 310
4840: PPUSH
4841: CALL_OW 247
4845: PUSH
4846: LD_INT 3
4848: EQUAL
4849: IFFALSE 4860
// ComExitBuilding ( i ) ;
4851: LD_VAR 0 4
4855: PPUSH
4856: CALL_OW 122
// j := j + 1 ;
4860: LD_ADDR_VAR 0 5
4864: PUSH
4865: LD_VAR 0 5
4869: PUSH
4870: LD_INT 1
4872: PLUS
4873: ST_TO_ADDR
// if j > players then
4874: LD_VAR 0 5
4878: PUSH
4879: LD_VAR 0 3
4883: GREATER
4884: IFFALSE 4894
// j := 1 ;
4886: LD_ADDR_VAR 0 5
4890: PUSH
4891: LD_INT 1
4893: ST_TO_ADDR
// end ;
4894: GO 4772
4896: POP
4897: POP
// end ; end ;
4898: LD_VAR 0 2
4902: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4903: LD_INT 0
4905: PPUSH
4906: PPUSH
4907: PPUSH
// i := 3 ;
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_INT 3
4915: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_INT 5
4923: PUSH
4924: LD_INT 10
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 120
4933: PUSH
4934: LD_INT 2
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PUSH
4941: LD_INT 101
4943: PUSH
4944: LD_INT 8
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 27
4953: PUSH
4954: LD_INT 4
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4967: LD_INT 4
4969: PPUSH
4970: LD_INT 5
4972: PPUSH
4973: LD_VAR 0 3
4977: PUSH
4978: LD_VAR 0 2
4982: ARRAY
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: LD_VAR 0 3
4992: PUSH
4993: LD_VAR 0 2
4997: ARRAY
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 58
// end ;
5010: LD_VAR 0 1
5014: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5015: LD_INT 0
5017: PPUSH
// if not side or side > 8 then
5018: LD_VAR 0 1
5022: NOT
5023: PUSH
5024: LD_VAR 0 1
5028: PUSH
5029: LD_INT 8
5031: GREATER
5032: OR
5033: IFFALSE 5037
// exit ;
5035: GO 5054
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5037: LD_VAR 0 1
5041: PPUSH
5042: LD_INT 6
5044: PPUSH
5045: CALL 4500 0 1
5049: PPUSH
5050: CALL 4342 0 2
// end ;
5054: LD_VAR 0 2
5058: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5059: LD_INT 0
5061: PPUSH
// if not side or side > 8 then
5062: LD_VAR 0 1
5066: NOT
5067: PUSH
5068: LD_VAR 0 1
5072: PUSH
5073: LD_INT 8
5075: GREATER
5076: OR
5077: IFFALSE 5081
// exit ;
5079: GO 5098
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5081: LD_VAR 0 1
5085: PPUSH
5086: LD_INT 4
5088: PPUSH
5089: CALL 4500 0 1
5093: PPUSH
5094: CALL 4342 0 2
// end ;
5098: LD_VAR 0 2
5102: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5103: LD_INT 0
5105: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5106: LD_VAR 0 1
5110: NOT
5111: PUSH
5112: LD_VAR 0 1
5116: PUSH
5117: LD_INT 8
5119: GREATER
5120: OR
5121: PUSH
5122: LD_VAR 0 2
5126: PUSH
5127: LD_INT 2
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 36
5135: PUSH
5136: LD_INT 0
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: IN
5145: NOT
5146: OR
5147: IFFALSE 5151
// exit ;
5149: GO 5168
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5151: LD_VAR 0 1
5155: PPUSH
5156: LD_INT 3
5158: PPUSH
5159: CALL 4500 0 1
5163: PPUSH
5164: CALL 4342 0 2
// end ;
5168: LD_VAR 0 3
5172: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5173: LD_INT 0
5175: PPUSH
5176: PPUSH
// if not un then
5177: LD_VAR 0 1
5181: NOT
5182: IFFALSE 5186
// exit ;
5184: GO 5232
// if not points then
5186: LD_VAR 0 3
5190: NOT
5191: IFFALSE 5208
// gained_points := Multiplayer_GetCondition ( 1 ) else
5193: LD_ADDR_VAR 0 5
5197: PUSH
5198: LD_INT 1
5200: PPUSH
5201: CALL 4500 0 1
5205: ST_TO_ADDR
5206: GO 5218
// gained_points := points ;
5208: LD_ADDR_VAR 0 5
5212: PUSH
5213: LD_VAR 0 3
5217: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 5
5227: PPUSH
5228: CALL 4342 0 2
5232: LD_VAR 0 4
5236: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5237: LD_INT 0
5239: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5240: LD_VAR 0 1
5244: PPUSH
5245: LD_INT 2
5247: PPUSH
5248: CALL 4500 0 1
5252: PPUSH
5253: CALL 4342 0 2
// end ; end_of_file
5257: LD_VAR 0 2
5261: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5262: LD_INT 0
5264: PPUSH
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
// side_bot := side ;
5274: LD_ADDR_EXP 3
5278: PUSH
5279: LD_VAR 0 1
5283: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5284: LD_ADDR_VAR 0 10
5288: PUSH
5289: LD_INT 11
5291: PUSH
5292: LD_INT 4
5294: PUSH
5295: LD_INT 3
5297: PUSH
5298: LD_INT 5
5300: PUSH
5301: LD_INT 66
5303: PUSH
5304: LD_INT 67
5306: PUSH
5307: LD_INT 53
5309: PUSH
5310: LD_INT 18
5312: PUSH
5313: LD_INT 40
5315: PUSH
5316: LD_INT 22
5318: PUSH
5319: LD_INT 72
5321: PUSH
5322: LD_INT 55
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: ST_TO_ADDR
// for i in techs do
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 10
5348: PUSH
5349: FOR_IN
5350: IFFALSE 5371
// SetTech ( i , side , state_researched ) ;
5352: LD_VAR 0 3
5356: PPUSH
5357: LD_VAR 0 1
5361: PPUSH
5362: LD_INT 2
5364: PPUSH
5365: CALL_OW 322
5369: GO 5349
5371: POP
5372: POP
// InitScriptBases ;
5373: CALL 7312 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5377: LD_ADDR_VAR 0 8
5381: PUSH
5382: LD_INT 5
5384: PUSH
5385: LD_INT 7
5387: PUSH
5388: LD_INT 10
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: PUSH
5396: LD_OWVAR 67
5400: ARRAY
5401: ST_TO_ADDR
// uc_side := side ;
5402: LD_ADDR_OWVAR 20
5406: PUSH
5407: LD_VAR 0 1
5411: ST_TO_ADDR
// uc_nation := 2 ;
5412: LD_ADDR_OWVAR 21
5416: PUSH
5417: LD_INT 2
5419: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5420: LD_ADDR_EXP 34
5424: PUSH
5425: LD_INT 94
5427: PPUSH
5428: LD_INT 35
5430: PPUSH
5431: LD_STRING dammam
5433: PPUSH
5434: LD_VAR 0 8
5438: PPUSH
5439: LD_INT 10000
5441: PUSH
5442: LD_INT 1000
5444: PUSH
5445: LD_INT 900
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PPUSH
5453: LD_INT 12
5455: PUSH
5456: LD_INT 4
5458: PUSH
5459: LD_INT 1
5461: NEG
5462: PUSH
5463: LD_INT 4
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL 25613 0 6
5476: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5477: LD_ADDR_EXP 35
5481: PUSH
5482: LD_INT 122
5484: PPUSH
5485: LD_INT 38
5487: PPUSH
5488: LD_STRING 
5490: PPUSH
5491: LD_VAR 0 8
5495: PPUSH
5496: LD_INT 500
5498: PUSH
5499: LD_INT 130
5501: PUSH
5502: LD_INT 0
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: PPUSH
5510: LD_INT 16
5512: PUSH
5513: LD_INT 4
5515: PUSH
5516: LD_INT 3
5518: PUSH
5519: LD_INT 1
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PPUSH
5528: CALL 25613 0 6
5532: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5533: LD_ADDR_EXP 32
5537: PUSH
5538: LD_INT 45
5540: PPUSH
5541: LD_INT 34
5543: PPUSH
5544: LD_STRING jeddah
5546: PPUSH
5547: LD_VAR 0 8
5551: PPUSH
5552: LD_INT 2100
5554: PUSH
5555: LD_INT 300
5557: PUSH
5558: LD_INT 10
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: PPUSH
5566: LD_INT 12
5568: PUSH
5569: LD_INT 4
5571: PUSH
5572: LD_INT 3
5574: PUSH
5575: LD_INT 2
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: PPUSH
5584: CALL 25613 0 6
5588: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5589: LD_ADDR_EXP 33
5593: PUSH
5594: LD_INT 7
5596: PPUSH
5597: LD_INT 33
5599: PPUSH
5600: LD_STRING riyadh
5602: PPUSH
5603: LD_VAR 0 8
5607: PPUSH
5608: LD_INT 500
5610: PUSH
5611: LD_INT 60
5613: PUSH
5614: LD_INT 0
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: PPUSH
5622: LD_INT 8
5624: PUSH
5625: LD_INT 2
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: LD_INT 1
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PPUSH
5640: CALL 25613 0 6
5644: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5645: LD_ADDR_EXP 36
5649: PUSH
5650: LD_INT 69
5652: PPUSH
5653: LD_INT 36
5655: PPUSH
5656: LD_STRING 
5658: PPUSH
5659: LD_VAR 0 8
5663: PPUSH
5664: LD_INT 500
5666: PUSH
5667: LD_INT 50
5669: PUSH
5670: LD_INT 0
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: LIST
5677: PPUSH
5678: LD_INT 11
5680: PUSH
5681: LD_INT 2
5683: PUSH
5684: LD_INT 4
5686: PUSH
5687: LD_INT 1
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: LIST
5694: LIST
5695: PPUSH
5696: CALL 25613 0 6
5700: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5701: LD_ADDR_OWVAR 37
5705: PUSH
5706: LD_INT 14
5708: ST_TO_ADDR
// vc_engine := engine_siberite ;
5709: LD_ADDR_OWVAR 39
5713: PUSH
5714: LD_INT 3
5716: ST_TO_ADDR
// vc_control := control_manual ;
5717: LD_ADDR_OWVAR 38
5721: PUSH
5722: LD_INT 1
5724: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5725: LD_ADDR_OWVAR 40
5729: PUSH
5730: LD_INT 31
5732: ST_TO_ADDR
// for i = 1 to 4 do
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: DOUBLE
5739: LD_INT 1
5741: DEC
5742: ST_TO_ADDR
5743: LD_INT 4
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5896
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5749: LD_ADDR_VAR 0 5
5753: PUSH
5754: LD_INT 156
5756: PUSH
5757: LD_INT 15
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 12
5766: PUSH
5767: LD_INT 7
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_VAR 0 3
5782: PUSH
5783: LD_INT 2
5785: MOD
5786: PUSH
5787: LD_INT 1
5789: PLUS
5790: ARRAY
5791: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5792: LD_INT 0
5794: PPUSH
5795: LD_INT 3
5797: PPUSH
5798: LD_VAR 0 8
5802: PPUSH
5803: CALL_OW 380
// un := CreateVehicle ;
5807: LD_ADDR_VAR 0 6
5811: PUSH
5812: CALL_OW 45
5816: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 0
5824: PPUSH
5825: LD_INT 5
5827: PPUSH
5828: CALL_OW 12
5832: PPUSH
5833: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5837: LD_VAR 0 6
5841: PPUSH
5842: LD_VAR 0 5
5846: PUSH
5847: LD_INT 1
5849: ARRAY
5850: PPUSH
5851: LD_VAR 0 5
5855: PUSH
5856: LD_INT 2
5858: ARRAY
5859: PPUSH
5860: LD_INT 6
5862: PPUSH
5863: LD_INT 0
5865: PPUSH
5866: CALL_OW 50
// un2 := CreateHuman ;
5870: LD_ADDR_VAR 0 7
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5880: LD_VAR 0 7
5884: PPUSH
5885: LD_VAR 0 6
5889: PPUSH
5890: CALL_OW 52
// end ;
5894: GO 5746
5896: POP
5897: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5898: LD_ADDR_VAR 0 3
5902: PUSH
5903: LD_INT 22
5905: PUSH
5906: LD_EXP 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 30
5917: PUSH
5918: LD_INT 31
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: LD_INT 58
5927: PUSH
5928: EMPTY
5929: LIST
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: LIST
5935: PPUSH
5936: CALL_OW 69
5940: PUSH
5941: FOR_IN
5942: IFFALSE 6054
// begin d := GetDir ( i ) ;
5944: LD_ADDR_VAR 0 4
5948: PUSH
5949: LD_VAR 0 3
5953: PPUSH
5954: CALL_OW 254
5958: ST_TO_ADDR
// if d < 3 then
5959: LD_VAR 0 4
5963: PUSH
5964: LD_INT 3
5966: LESS
5967: IFFALSE 5985
// d := d + 3 else
5969: LD_ADDR_VAR 0 4
5973: PUSH
5974: LD_VAR 0 4
5978: PUSH
5979: LD_INT 3
5981: PLUS
5982: ST_TO_ADDR
5983: GO 5999
// d := d - 3 ;
5985: LD_ADDR_VAR 0 4
5989: PUSH
5990: LD_VAR 0 4
5994: PUSH
5995: LD_INT 3
5997: MINUS
5998: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
5999: LD_INT 0
6001: PPUSH
6002: LD_INT 8
6004: PPUSH
6005: LD_VAR 0 8
6009: PPUSH
6010: CALL_OW 380
// un := CreateHuman ;
6014: LD_ADDR_VAR 0 6
6018: PUSH
6019: CALL_OW 44
6023: ST_TO_ADDR
// SetDir ( un , d ) ;
6024: LD_VAR 0 6
6028: PPUSH
6029: LD_VAR 0 4
6033: PPUSH
6034: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6038: LD_VAR 0 6
6042: PPUSH
6043: LD_VAR 0 3
6047: PPUSH
6048: CALL_OW 52
// end ;
6052: GO 5941
6054: POP
6055: POP
// ar_force_tmp := [ ] ;
6056: LD_ADDR_EXP 37
6060: PUSH
6061: EMPTY
6062: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6063: LD_INT 1
6065: PPUSH
6066: LD_INT 1
6068: PPUSH
6069: LD_VAR 0 8
6073: PPUSH
6074: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6078: LD_ADDR_OWVAR 33
6082: PUSH
6083: LD_STRING SecondCharsGal
6085: ST_TO_ADDR
// hc_face_number := 4 ;
6086: LD_ADDR_OWVAR 34
6090: PUSH
6091: LD_INT 4
6093: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6094: LD_ADDR_EXP 37
6098: PUSH
6099: LD_EXP 37
6103: PPUSH
6104: LD_INT 1
6106: PPUSH
6107: CALL_OW 44
6111: PPUSH
6112: CALL_OW 1
6116: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6117: LD_INT 2
6119: PPUSH
6120: LD_INT 4
6122: PPUSH
6123: LD_VAR 0 8
6127: PPUSH
6128: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6132: LD_ADDR_OWVAR 33
6136: PUSH
6137: LD_STRING SecondCharsGal
6139: ST_TO_ADDR
// hc_face_number := 15 ;
6140: LD_ADDR_OWVAR 34
6144: PUSH
6145: LD_INT 15
6147: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6148: LD_ADDR_EXP 37
6152: PUSH
6153: LD_EXP 37
6157: PPUSH
6158: LD_INT 2
6160: PPUSH
6161: CALL_OW 44
6165: PPUSH
6166: CALL_OW 1
6170: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6171: LD_INT 2
6173: PPUSH
6174: LD_INT 4
6176: PPUSH
6177: LD_VAR 0 8
6181: PPUSH
6182: CALL_OW 380
// hc_gallery :=  ;
6186: LD_ADDR_OWVAR 33
6190: PUSH
6191: LD_STRING 
6193: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6194: LD_ADDR_EXP 37
6198: PUSH
6199: LD_EXP 37
6203: PPUSH
6204: LD_INT 3
6206: PPUSH
6207: CALL_OW 44
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// hc_sex := sex_male ;
6217: LD_ADDR_OWVAR 27
6221: PUSH
6222: LD_INT 1
6224: ST_TO_ADDR
// hc_class = 11 ;
6225: LD_ADDR_OWVAR 28
6229: PUSH
6230: LD_INT 11
6232: ST_TO_ADDR
// hc_gallery = sandar ;
6233: LD_ADDR_OWVAR 33
6237: PUSH
6238: LD_STRING sandar
6240: ST_TO_ADDR
// hc_face_number = 33 ;
6241: LD_ADDR_OWVAR 34
6245: PUSH
6246: LD_INT 33
6248: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6249: LD_ADDR_OWVAR 26
6253: PUSH
6254: LD_STRING Thabit Muhair Saliba
6256: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6257: LD_ADDR_OWVAR 31
6261: PUSH
6262: LD_INT 5
6264: PUSH
6265: LD_INT 5
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: ST_TO_ADDR
// Saliba := CreateHuman ;
6280: LD_ADDR_EXP 39
6284: PUSH
6285: CALL_OW 44
6289: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6290: LD_EXP 39
6294: PPUSH
6295: LD_INT 7
6297: PPUSH
6298: CALL_OW 52
// hc_name := Dietrich Gensher ;
6302: LD_ADDR_OWVAR 26
6306: PUSH
6307: LD_STRING Dietrich Gensher
6309: ST_TO_ADDR
// hc_class := 1 ;
6310: LD_ADDR_OWVAR 28
6314: PUSH
6315: LD_INT 1
6317: ST_TO_ADDR
// hc_gallery := sandar ;
6318: LD_ADDR_OWVAR 33
6322: PUSH
6323: LD_STRING sandar
6325: ST_TO_ADDR
// hc_face_number := 4 ;
6326: LD_ADDR_OWVAR 34
6330: PUSH
6331: LD_INT 4
6333: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6334: LD_ADDR_OWVAR 31
6338: PUSH
6339: LD_INT 10
6341: PUSH
6342: LD_INT 6
6344: PUSH
6345: LD_INT 5
6347: PUSH
6348: LD_INT 4
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// Gensher := CreateHuman ;
6357: LD_ADDR_EXP 40
6361: PUSH
6362: CALL_OW 44
6366: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6367: LD_EXP 40
6371: PPUSH
6372: LD_INT 45
6374: PPUSH
6375: CALL_OW 52
// hc_name := Abdul Shariff ;
6379: LD_ADDR_OWVAR 26
6383: PUSH
6384: LD_STRING Abdul Shariff
6386: ST_TO_ADDR
// hc_class := 11 ;
6387: LD_ADDR_OWVAR 28
6391: PUSH
6392: LD_INT 11
6394: ST_TO_ADDR
// hc_gallery := sandar ;
6395: LD_ADDR_OWVAR 33
6399: PUSH
6400: LD_STRING sandar
6402: ST_TO_ADDR
// hc_face_number := 5 ;
6403: LD_ADDR_OWVAR 34
6407: PUSH
6408: LD_INT 5
6410: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6411: LD_ADDR_OWVAR 31
6415: PUSH
6416: LD_INT 6
6418: PUSH
6419: LD_INT 5
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: ST_TO_ADDR
// Shariff := CreateHuman ;
6434: LD_ADDR_EXP 41
6438: PUSH
6439: CALL_OW 44
6443: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6444: LD_EXP 41
6448: PPUSH
6449: LD_INT 94
6451: PPUSH
6452: CALL_OW 52
// InitHc ;
6456: CALL_OW 19
// for d := 1 to 5 do
6460: LD_ADDR_VAR 0 4
6464: PUSH
6465: DOUBLE
6466: LD_INT 1
6468: DEC
6469: ST_TO_ADDR
6470: LD_INT 5
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6958
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6476: LD_ADDR_VAR 0 11
6480: PUSH
6481: LD_EXP 49
6485: PUSH
6486: LD_VAR 0 4
6490: ARRAY
6491: PPUSH
6492: LD_INT 30
6494: PUSH
6495: LD_INT 3
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: PPUSH
6502: CALL_OW 70
6506: ST_TO_ADDR
// if fac then
6507: LD_VAR 0 11
6511: IFFALSE 6544
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6513: LD_ADDR_EXP 48
6517: PUSH
6518: LD_EXP 48
6522: PPUSH
6523: LD_VAR 0 4
6527: PPUSH
6528: LD_VAR 0 11
6532: PUSH
6533: LD_INT 1
6535: ARRAY
6536: PPUSH
6537: CALL_OW 1
6541: ST_TO_ADDR
6542: GO 6567
// arFactories := Replace ( arFactories , d , 0 ) ;
6544: LD_ADDR_EXP 48
6548: PUSH
6549: LD_EXP 48
6553: PPUSH
6554: LD_VAR 0 4
6558: PPUSH
6559: LD_INT 0
6561: PPUSH
6562: CALL_OW 1
6566: ST_TO_ADDR
// for i := 1 to 2 do
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: DOUBLE
6573: LD_INT 1
6575: DEC
6576: ST_TO_ADDR
6577: LD_INT 2
6579: PUSH
6580: FOR_TO
6581: IFFALSE 6724
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6583: LD_INT 14
6585: PPUSH
6586: LD_INT 3
6588: PPUSH
6589: LD_INT 2
6591: PPUSH
6592: LD_INT 88
6594: PPUSH
6595: LD_INT 100
6597: PPUSH
6598: CALL 21792 0 5
// un := CreateVehicle ;
6602: LD_ADDR_VAR 0 6
6606: PUSH
6607: CALL_OW 45
6611: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6612: LD_ADDR_EXP 45
6616: PUSH
6617: LD_EXP 45
6621: PPUSH
6622: LD_EXP 45
6626: PUSH
6627: LD_INT 1
6629: PLUS
6630: PPUSH
6631: LD_VAR 0 4
6635: PUSH
6636: LD_VAR 0 6
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 1
6649: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6650: LD_VAR 0 6
6654: PPUSH
6655: LD_INT 0
6657: PPUSH
6658: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6662: LD_VAR 0 6
6666: PPUSH
6667: LD_INT 0
6669: PPUSH
6670: LD_INT 5
6672: PPUSH
6673: CALL_OW 12
6677: PPUSH
6678: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6682: LD_VAR 0 6
6686: PPUSH
6687: LD_INT 24
6689: PUSH
6690: LD_INT 20
6692: PUSH
6693: LD_INT 21
6695: PUSH
6696: LD_INT 22
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: PUSH
6709: LD_VAR 0 4
6713: ARRAY
6714: PPUSH
6715: LD_INT 0
6717: PPUSH
6718: CALL_OW 49
// end ;
6722: GO 6580
6724: POP
6725: POP
// for i := 1 to 4 do
6726: LD_ADDR_VAR 0 3
6730: PUSH
6731: DOUBLE
6732: LD_INT 1
6734: DEC
6735: ST_TO_ADDR
6736: LD_INT 4
6738: PUSH
6739: FOR_TO
6740: IFFALSE 6954
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6742: LD_INT 14
6744: PPUSH
6745: LD_INT 3
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: LD_INT 2
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: LD_INT 1
6773: PUSH
6774: LD_INT 5
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 2
6786: PPUSH
6787: CALL_OW 12
6791: ARRAY
6792: PPUSH
6793: LD_INT 25
6795: PUSH
6796: LD_INT 27
6798: PUSH
6799: LD_INT 26
6801: PUSH
6802: LD_INT 28
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: PUSH
6811: LD_VAR 0 3
6815: PUSH
6816: LD_INT 4
6818: MOD
6819: PUSH
6820: LD_INT 1
6822: PLUS
6823: ARRAY
6824: PPUSH
6825: LD_INT 100
6827: PPUSH
6828: CALL 21792 0 5
// un := CreateVehicle ;
6832: LD_ADDR_VAR 0 6
6836: PUSH
6837: CALL_OW 45
6841: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6842: LD_ADDR_EXP 45
6846: PUSH
6847: LD_EXP 45
6851: PPUSH
6852: LD_EXP 45
6856: PUSH
6857: LD_INT 1
6859: PLUS
6860: PPUSH
6861: LD_VAR 0 4
6865: PUSH
6866: LD_VAR 0 6
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PPUSH
6875: CALL_OW 1
6879: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6880: LD_VAR 0 6
6884: PPUSH
6885: LD_INT 0
6887: PPUSH
6888: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6892: LD_VAR 0 6
6896: PPUSH
6897: LD_INT 0
6899: PPUSH
6900: LD_INT 5
6902: PPUSH
6903: CALL_OW 12
6907: PPUSH
6908: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6912: LD_VAR 0 6
6916: PPUSH
6917: LD_INT 24
6919: PUSH
6920: LD_INT 20
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 46
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: LD_VAR 0 4
6943: ARRAY
6944: PPUSH
6945: LD_INT 0
6947: PPUSH
6948: CALL_OW 49
// end ;
6952: GO 6739
6954: POP
6955: POP
// end ;
6956: GO 6473
6958: POP
6959: POP
// InitHc ;
6960: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6964: LD_ADDR_VAR 0 9
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: ST_TO_ADDR
// if tmp and side <> 2 then
6984: LD_VAR 0 9
6988: PUSH
6989: LD_VAR 0 1
6993: PUSH
6994: LD_INT 2
6996: NONEQUAL
6997: AND
6998: IFFALSE 7031
// begin for i in tmp do
7000: LD_ADDR_VAR 0 3
7004: PUSH
7005: LD_VAR 0 9
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7029
// SetSide ( i , side ) ;
7013: LD_VAR 0 3
7017: PPUSH
7018: LD_VAR 0 1
7022: PPUSH
7023: CALL_OW 235
7027: GO 7010
7029: POP
7030: POP
// end ; end ;
7031: LD_VAR 0 2
7035: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// tmp := AreaToList ( area , 0 ) ;
7042: LD_ADDR_VAR 0 5
7046: PUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: LD_INT 0
7054: PPUSH
7055: CALL_OW 517
7059: ST_TO_ADDR
// if not tmp then
7060: LD_VAR 0 5
7064: NOT
7065: IFFALSE 7069
// exit ;
7067: GO 7307
// for i := 1 to n do
7069: LD_ADDR_VAR 0 4
7073: PUSH
7074: DOUBLE
7075: LD_INT 1
7077: DEC
7078: ST_TO_ADDR
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_TO
7085: IFFALSE 7305
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7087: LD_ADDR_VAR 0 6
7091: PUSH
7092: LD_INT 1
7094: PPUSH
7095: LD_VAR 0 5
7099: PUSH
7100: LD_INT 1
7102: ARRAY
7103: PPUSH
7104: CALL_OW 12
7108: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7109: LD_VAR 0 5
7113: PUSH
7114: LD_INT 1
7116: ARRAY
7117: PUSH
7118: LD_VAR 0 6
7122: ARRAY
7123: PPUSH
7124: LD_VAR 0 5
7128: PUSH
7129: LD_INT 2
7131: ARRAY
7132: PUSH
7133: LD_VAR 0 6
7137: ARRAY
7138: PPUSH
7139: LD_EXP 3
7143: PPUSH
7144: LD_INT 0
7146: PPUSH
7147: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7151: LD_ADDR_EXP 51
7155: PUSH
7156: LD_EXP 51
7160: PPUSH
7161: LD_EXP 51
7165: PUSH
7166: LD_INT 1
7168: PLUS
7169: PPUSH
7170: LD_VAR 0 5
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: PUSH
7179: LD_VAR 0 6
7183: ARRAY
7184: PPUSH
7185: CALL_OW 2
7189: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7190: LD_ADDR_EXP 51
7194: PUSH
7195: LD_EXP 51
7199: PPUSH
7200: LD_EXP 51
7204: PUSH
7205: LD_INT 1
7207: PLUS
7208: PPUSH
7209: LD_VAR 0 5
7213: PUSH
7214: LD_INT 2
7216: ARRAY
7217: PUSH
7218: LD_VAR 0 6
7222: ARRAY
7223: PPUSH
7224: CALL_OW 2
7228: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7229: LD_ADDR_VAR 0 5
7233: PUSH
7234: LD_VAR 0 5
7238: PPUSH
7239: LD_INT 1
7241: PPUSH
7242: LD_VAR 0 5
7246: PUSH
7247: LD_INT 1
7249: ARRAY
7250: PPUSH
7251: LD_VAR 0 6
7255: PPUSH
7256: CALL_OW 3
7260: PPUSH
7261: CALL_OW 1
7265: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_VAR 0 5
7275: PPUSH
7276: LD_INT 2
7278: PPUSH
7279: LD_VAR 0 5
7283: PUSH
7284: LD_INT 2
7286: ARRAY
7287: PPUSH
7288: LD_VAR 0 6
7292: PPUSH
7293: CALL_OW 3
7297: PPUSH
7298: CALL_OW 1
7302: ST_TO_ADDR
// end ;
7303: GO 7084
7305: POP
7306: POP
// end ;
7307: LD_VAR 0 3
7311: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7312: LD_INT 0
7314: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7315: LD_ADDR_EXP 42
7319: PUSH
7320: LD_EXP 3
7324: PPUSH
7325: LD_INT 2
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL 17015 0 3
7335: ST_TO_ADDR
// arConstructList := [ ] ;
7336: LD_ADDR_EXP 43
7340: PUSH
7341: EMPTY
7342: ST_TO_ADDR
// arBuildings := [ ] ;
7343: LD_ADDR_EXP 44
7347: PUSH
7348: EMPTY
7349: ST_TO_ADDR
// arVehicles := [ ] ;
7350: LD_ADDR_EXP 45
7354: PUSH
7355: EMPTY
7356: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7357: LD_ADDR_EXP 46
7361: PUSH
7362: EMPTY
7363: ST_TO_ADDR
// arDrivers := [ ] ;
7364: LD_ADDR_EXP 47
7368: PUSH
7369: EMPTY
7370: ST_TO_ADDR
// arFactories := [ ] ;
7371: LD_ADDR_EXP 48
7375: PUSH
7376: EMPTY
7377: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7378: LD_ADDR_EXP 49
7382: PUSH
7383: LD_INT 33
7385: PUSH
7386: LD_INT 35
7388: PUSH
7389: LD_INT 34
7391: PUSH
7392: LD_INT 36
7394: PUSH
7395: LD_INT 38
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7405: LD_ADDR_EXP 50
7409: PUSH
7410: LD_INT 6
7412: PUSH
7413: LD_INT 6
7415: PUSH
7416: LD_INT 6
7418: PUSH
7419: LD_INT 6
7421: PUSH
7422: LD_INT 2
7424: PUSH
7425: EMPTY
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
// arMinesList := [ ] ;
7432: LD_ADDR_EXP 51
7436: PUSH
7437: EMPTY
7438: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7439: LD_INT 1
7441: PPUSH
7442: LD_INT 7
7444: PUSH
7445: LD_INT 9
7447: PUSH
7448: LD_INT 11
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PUSH
7456: LD_OWVAR 67
7460: ARRAY
7461: PPUSH
7462: CALL 7036 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7466: LD_INT 3
7468: PPUSH
7469: LD_INT 7
7471: PUSH
7472: LD_INT 9
7474: PUSH
7475: LD_INT 9
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: PUSH
7483: LD_OWVAR 67
7487: ARRAY
7488: PPUSH
7489: CALL 7036 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7493: LD_INT 2
7495: PPUSH
7496: LD_INT 6
7498: PUSH
7499: LD_INT 8
7501: PUSH
7502: LD_INT 12
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_OWVAR 67
7514: ARRAY
7515: PPUSH
7516: CALL 7036 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7520: LD_INT 39
7522: PPUSH
7523: LD_INT 5
7525: PUSH
7526: LD_INT 7
7528: PUSH
7529: LD_INT 9
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: LIST
7536: PUSH
7537: LD_OWVAR 67
7541: ARRAY
7542: PPUSH
7543: CALL 7036 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7547: LD_INT 25
7549: PPUSH
7550: LD_INT 4
7552: PUSH
7553: LD_INT 6
7555: PUSH
7556: LD_INT 8
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_OWVAR 67
7568: ARRAY
7569: PPUSH
7570: CALL 7036 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7574: LD_INT 41
7576: PPUSH
7577: LD_INT 12
7579: PUSH
7580: LD_INT 14
7582: PUSH
7583: LD_INT 16
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: LD_OWVAR 67
7595: ARRAY
7596: PPUSH
7597: CALL 7036 0 2
// end ;
7601: LD_VAR 0 1
7605: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
7615: PPUSH
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
7622: PPUSH
7623: PPUSH
7624: PPUSH
7625: PPUSH
7626: PPUSH
7627: PPUSH
7628: PPUSH
7629: PPUSH
7630: PPUSH
7631: PPUSH
7632: PPUSH
7633: PPUSH
7634: PPUSH
// enable ;
7635: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7636: LD_ADDR_VAR 0 10
7640: PUSH
7641: LD_INT 81
7643: PUSH
7644: LD_VAR 0 1
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PPUSH
7653: CALL_OW 69
7657: ST_TO_ADDR
// if tmp then
7658: LD_VAR 0 10
7662: IFFALSE 7683
// enemySide := GetSide ( tmp [ 1 ] ) ;
7664: LD_ADDR_VAR 0 34
7668: PUSH
7669: LD_VAR 0 10
7673: PUSH
7674: LD_INT 1
7676: ARRAY
7677: PPUSH
7678: CALL_OW 255
7682: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7683: LD_ADDR_VAR 0 22
7687: PUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: LD_INT 81
7695: PUSH
7696: LD_VAR 0 1
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: PPUSH
7705: CALL_OW 70
7709: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7710: LD_ADDR_VAR 0 23
7714: PUSH
7715: LD_VAR 0 4
7719: PPUSH
7720: LD_INT 81
7722: PUSH
7723: LD_VAR 0 1
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 70
7736: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7737: LD_ADDR_VAR 0 26
7741: PUSH
7742: LD_EXP 45
7746: PPUSH
7747: LD_INT 1
7749: PPUSH
7750: LD_VAR 0 2
7754: PPUSH
7755: LD_INT 2
7757: PPUSH
7758: CALL 59343 0 4
7762: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7763: LD_ADDR_VAR 0 32
7767: PUSH
7768: LD_VAR 0 3
7772: PPUSH
7773: LD_INT 22
7775: PUSH
7776: LD_VAR 0 1
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 2
7787: PUSH
7788: LD_INT 30
7790: PUSH
7791: LD_INT 0
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 30
7800: PUSH
7801: LD_INT 1
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 70
7821: ST_TO_ADDR
// if depot then
7822: LD_VAR 0 32
7826: IFFALSE 7842
// depot := depot [ 1 ] ;
7828: LD_ADDR_VAR 0 32
7832: PUSH
7833: LD_VAR 0 32
7837: PUSH
7838: LD_INT 1
7840: ARRAY
7841: ST_TO_ADDR
// if arTech then
7842: LD_EXP 42
7846: IFFALSE 8005
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7848: LD_ADDR_VAR 0 12
7852: PUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: LD_INT 22
7860: PUSH
7861: LD_VAR 0 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: LD_INT 50
7872: PUSH
7873: EMPTY
7874: LIST
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: LD_INT 30
7881: PUSH
7882: LD_INT 6
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 30
7891: PUSH
7892: LD_INT 7
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 30
7901: PUSH
7902: LD_INT 8
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 70
7924: ST_TO_ADDR
// if lab then
7925: LD_VAR 0 12
7929: IFFALSE 8005
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7931: LD_VAR 0 12
7935: PUSH
7936: LD_INT 1
7938: ARRAY
7939: PPUSH
7940: CALL_OW 461
7944: PUSH
7945: LD_INT 2
7947: EQUAL
7948: IFFALSE 8005
// begin for i in arTech do
7950: LD_ADDR_VAR 0 9
7954: PUSH
7955: LD_EXP 42
7959: PUSH
7960: FOR_IN
7961: IFFALSE 8003
// if CanBeResearched ( lab [ 1 ] , i ) then
7963: LD_VAR 0 12
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: PPUSH
7972: LD_VAR 0 9
7976: PPUSH
7977: CALL_OW 430
7981: IFFALSE 8001
// begin AddComResearch ( lab [ 1 ] , i ) ;
7983: LD_VAR 0 12
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PPUSH
7992: LD_VAR 0 9
7996: PPUSH
7997: CALL_OW 184
// end ;
8001: GO 7960
8003: POP
8004: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
8005: LD_ADDR_VAR 0 29
8009: PUSH
8010: LD_VAR 0 3
8014: PPUSH
8015: LD_INT 22
8017: PUSH
8018: LD_VAR 0 1
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 3
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 50
8039: PUSH
8040: EMPTY
8041: LIST
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PPUSH
8048: CALL_OW 70
8052: ST_TO_ADDR
// if fac then
8053: LD_VAR 0 29
8057: IFFALSE 8446
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8059: LD_VAR 0 29
8063: PUSH
8064: LD_INT 1
8066: ARRAY
8067: PPUSH
8068: CALL_OW 461
8072: PUSH
8073: LD_INT 2
8075: EQUAL
8076: IFFALSE 8446
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8078: LD_ADDR_VAR 0 30
8082: PUSH
8083: LD_VAR 0 3
8087: PPUSH
8088: LD_INT 2
8090: PUSH
8091: LD_INT 30
8093: PUSH
8094: LD_INT 32
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_INT 30
8103: PUSH
8104: LD_INT 33
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: LD_INT 35
8118: PUSH
8119: LD_INT 0
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PPUSH
8130: CALL_OW 70
8134: ST_TO_ADDR
// if emptyTowers then
8135: LD_VAR 0 30
8139: IFFALSE 8189
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8141: LD_ADDR_VAR 0 31
8145: PUSH
8146: LD_VAR 0 30
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: PPUSH
8155: LD_VAR 0 3
8159: PPUSH
8160: CALL 27299 0 2
8164: ST_TO_ADDR
// if weapon then
8165: LD_VAR 0 31
8169: IFFALSE 8189
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8171: LD_VAR 0 30
8175: PUSH
8176: LD_INT 1
8178: ARRAY
8179: PPUSH
8180: LD_VAR 0 31
8184: PPUSH
8185: CALL_OW 148
// end ; if arConstructList then
8189: LD_EXP 43
8193: IFFALSE 8446
// for i := 1 to Count ( arConstructList ) do
8195: LD_ADDR_VAR 0 9
8199: PUSH
8200: DOUBLE
8201: LD_INT 1
8203: DEC
8204: ST_TO_ADDR
8205: LD_EXP 43
8209: PPUSH
8210: CALL 19054 0 1
8214: PUSH
8215: FOR_TO
8216: IFFALSE 8444
// begin if arConstructList [ i ] [ 1 ] = base then
8218: LD_EXP 43
8222: PUSH
8223: LD_VAR 0 9
8227: ARRAY
8228: PUSH
8229: LD_INT 1
8231: ARRAY
8232: PUSH
8233: LD_VAR 0 2
8237: EQUAL
8238: IFFALSE 8442
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8240: LD_VAR 0 29
8244: PUSH
8245: LD_INT 1
8247: ARRAY
8248: PPUSH
8249: LD_EXP 43
8253: PUSH
8254: LD_VAR 0 9
8258: ARRAY
8259: PUSH
8260: LD_INT 2
8262: ARRAY
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: PPUSH
8268: LD_EXP 43
8272: PUSH
8273: LD_VAR 0 9
8277: ARRAY
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PUSH
8283: LD_INT 2
8285: ARRAY
8286: PPUSH
8287: LD_EXP 43
8291: PUSH
8292: LD_VAR 0 9
8296: ARRAY
8297: PUSH
8298: LD_INT 2
8300: ARRAY
8301: PUSH
8302: LD_INT 3
8304: ARRAY
8305: PPUSH
8306: LD_EXP 43
8310: PUSH
8311: LD_VAR 0 9
8315: ARRAY
8316: PUSH
8317: LD_INT 2
8319: ARRAY
8320: PUSH
8321: LD_INT 4
8323: ARRAY
8324: PPUSH
8325: CALL_OW 448
8329: IFFALSE 8442
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8331: LD_VAR 0 29
8335: PUSH
8336: LD_INT 1
8338: ARRAY
8339: PPUSH
8340: LD_EXP 43
8344: PUSH
8345: LD_VAR 0 9
8349: ARRAY
8350: PUSH
8351: LD_INT 2
8353: ARRAY
8354: PUSH
8355: LD_INT 1
8357: ARRAY
8358: PPUSH
8359: LD_EXP 43
8363: PUSH
8364: LD_VAR 0 9
8368: ARRAY
8369: PUSH
8370: LD_INT 2
8372: ARRAY
8373: PUSH
8374: LD_INT 2
8376: ARRAY
8377: PPUSH
8378: LD_EXP 43
8382: PUSH
8383: LD_VAR 0 9
8387: ARRAY
8388: PUSH
8389: LD_INT 2
8391: ARRAY
8392: PUSH
8393: LD_INT 3
8395: ARRAY
8396: PPUSH
8397: LD_EXP 43
8401: PUSH
8402: LD_VAR 0 9
8406: ARRAY
8407: PUSH
8408: LD_INT 2
8410: ARRAY
8411: PUSH
8412: LD_INT 4
8414: ARRAY
8415: PPUSH
8416: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8420: LD_ADDR_EXP 43
8424: PUSH
8425: LD_EXP 43
8429: PPUSH
8430: LD_VAR 0 9
8434: PPUSH
8435: CALL_OW 3
8439: ST_TO_ADDR
// break ;
8440: GO 8444
// end ; end ;
8442: GO 8215
8444: POP
8445: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8446: LD_ADDR_VAR 0 10
8450: PUSH
8451: LD_VAR 0 3
8455: PPUSH
8456: LD_INT 21
8458: PUSH
8459: LD_INT 3
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 3
8468: PUSH
8469: LD_INT 57
8471: PUSH
8472: EMPTY
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: LD_INT 24
8484: PUSH
8485: LD_INT 1000
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 70
8505: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8506: LD_ADDR_VAR 0 17
8510: PUSH
8511: LD_VAR 0 3
8515: PPUSH
8516: CALL_OW 435
8520: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8521: LD_ADDR_VAR 0 14
8525: PUSH
8526: LD_VAR 0 5
8530: PPUSH
8531: LD_INT 25
8533: PUSH
8534: LD_INT 3
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 50
8543: PUSH
8544: EMPTY
8545: LIST
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 72
8555: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8556: LD_VAR 0 14
8560: PPUSH
8561: LD_INT 3
8563: PUSH
8564: LD_INT 120
8566: PUSH
8567: LD_INT 7
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 3
8580: PUSH
8581: LD_INT 54
8583: PUSH
8584: EMPTY
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PPUSH
8595: CALL_OW 72
8599: PUSH
8600: LD_EXP 48
8604: PUSH
8605: LD_VAR 0 2
8609: ARRAY
8610: PPUSH
8611: CALL_OW 302
8615: AND
8616: IFFALSE 8677
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8618: LD_VAR 0 14
8622: PPUSH
8623: LD_INT 3
8625: PUSH
8626: LD_INT 120
8628: PUSH
8629: LD_INT 7
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 3
8642: PUSH
8643: LD_INT 54
8645: PUSH
8646: EMPTY
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 72
8661: PPUSH
8662: LD_EXP 48
8666: PUSH
8667: LD_VAR 0 2
8671: ARRAY
8672: PPUSH
8673: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8677: LD_ADDR_VAR 0 18
8681: PUSH
8682: LD_VAR 0 5
8686: PPUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 4
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 50
8699: PUSH
8700: EMPTY
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PPUSH
8707: CALL_OW 72
8711: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8712: LD_ADDR_VAR 0 12
8716: PUSH
8717: LD_VAR 0 3
8721: PPUSH
8722: LD_INT 2
8724: PUSH
8725: LD_INT 30
8727: PUSH
8728: LD_INT 6
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 30
8737: PUSH
8738: LD_INT 7
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 30
8747: PUSH
8748: LD_INT 8
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 70
8765: ST_TO_ADDR
// if sci then
8766: LD_VAR 0 18
8770: IFFALSE 8931
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8772: LD_ADDR_VAR 0 20
8776: PUSH
8777: LD_VAR 0 5
8781: PPUSH
8782: LD_INT 95
8784: PUSH
8785: LD_VAR 0 3
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 120
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 72
8812: ST_TO_ADDR
// if hurtUnits then
8813: LD_VAR 0 20
8817: IFFALSE 8878
// begin for i in sci do
8819: LD_ADDR_VAR 0 9
8823: PUSH
8824: LD_VAR 0 18
8828: PUSH
8829: FOR_IN
8830: IFFALSE 8874
// if IsInUnit ( i ) then
8832: LD_VAR 0 9
8836: PPUSH
8837: CALL_OW 310
8841: IFFALSE 8854
// ComExitBuilding ( i ) else
8843: LD_VAR 0 9
8847: PPUSH
8848: CALL_OW 122
8852: GO 8872
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8854: LD_VAR 0 9
8858: PPUSH
8859: LD_VAR 0 20
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: CALL_OW 128
8872: GO 8829
8874: POP
8875: POP
// end else
8876: GO 8931
// if lab then
8878: LD_VAR 0 12
8882: IFFALSE 8931
// begin for i in sci do
8884: LD_ADDR_VAR 0 9
8888: PUSH
8889: LD_VAR 0 18
8893: PUSH
8894: FOR_IN
8895: IFFALSE 8929
// if not IsInUnit ( i ) then
8897: LD_VAR 0 9
8901: PPUSH
8902: CALL_OW 310
8906: NOT
8907: IFFALSE 8927
// ComEnterUnit ( i , lab [ 1 ] ) ;
8909: LD_VAR 0 9
8913: PPUSH
8914: LD_VAR 0 12
8918: PUSH
8919: LD_INT 1
8921: ARRAY
8922: PPUSH
8923: CALL_OW 120
8927: GO 8894
8929: POP
8930: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8931: LD_ADDR_VAR 0 13
8935: PUSH
8936: LD_VAR 0 5
8940: PPUSH
8941: LD_INT 25
8943: PUSH
8944: LD_INT 2
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PPUSH
8951: CALL_OW 72
8955: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8956: LD_ADDR_VAR 0 33
8960: PUSH
8961: LD_EXP 44
8965: PPUSH
8966: LD_INT 1
8968: PPUSH
8969: LD_VAR 0 2
8973: PPUSH
8974: LD_INT 2
8976: PPUSH
8977: CALL 59343 0 4
8981: ST_TO_ADDR
// if eng then
8982: LD_VAR 0 13
8986: IFFALSE 9820
// begin for i in eng do
8988: LD_ADDR_VAR 0 9
8992: PUSH
8993: LD_VAR 0 13
8997: PUSH
8998: FOR_IN
8999: IFFALSE 9818
// begin tag := GetTag ( i ) ;
9001: LD_ADDR_VAR 0 15
9005: PUSH
9006: LD_VAR 0 9
9010: PPUSH
9011: CALL_OW 110
9015: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
9016: LD_VAR 0 9
9020: PPUSH
9021: LD_VAR 0 4
9025: PPUSH
9026: CALL_OW 308
9030: IFFALSE 9061
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9032: LD_VAR 0 9
9036: PPUSH
9037: LD_VAR 0 7
9041: PUSH
9042: LD_INT 1
9044: ARRAY
9045: PPUSH
9046: LD_VAR 0 7
9050: PUSH
9051: LD_INT 2
9053: ARRAY
9054: PPUSH
9055: CALL_OW 111
// continue ;
9059: GO 8998
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9061: LD_VAR 0 9
9065: PPUSH
9066: CALL_OW 256
9070: PUSH
9071: LD_INT 800
9073: LESS
9074: PUSH
9075: LD_VAR 0 15
9079: PUSH
9080: LD_INT 1
9082: NONEQUAL
9083: AND
9084: IFFALSE 9134
// begin SetTag ( i , tHeal ) ;
9086: LD_VAR 0 9
9090: PPUSH
9091: LD_INT 1
9093: PPUSH
9094: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9098: LD_VAR 0 9
9102: PPUSH
9103: LD_VAR 0 6
9107: PUSH
9108: LD_INT 1
9110: ARRAY
9111: PPUSH
9112: LD_VAR 0 6
9116: PUSH
9117: LD_INT 2
9119: ARRAY
9120: PPUSH
9121: CALL_OW 111
// AddComHold ( i ) ;
9125: LD_VAR 0 9
9129: PPUSH
9130: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9134: LD_VAR 0 15
9138: PUSH
9139: LD_INT 1
9141: EQUAL
9142: PUSH
9143: LD_VAR 0 9
9147: PPUSH
9148: CALL_OW 256
9152: PUSH
9153: LD_INT 1000
9155: EQUAL
9156: AND
9157: IFFALSE 9171
// SetTag ( i , 0 ) ;
9159: LD_VAR 0 9
9163: PPUSH
9164: LD_INT 0
9166: PPUSH
9167: CALL_OW 109
// if not tag then
9171: LD_VAR 0 15
9175: NOT
9176: IFFALSE 9343
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9178: LD_ADDR_VAR 0 11
9182: PUSH
9183: LD_VAR 0 3
9187: PPUSH
9188: LD_INT 57
9190: PUSH
9191: EMPTY
9192: LIST
9193: PPUSH
9194: CALL_OW 70
9198: ST_TO_ADDR
// if undone then
9199: LD_VAR 0 11
9203: IFFALSE 9225
// begin ComComplete ( i , undone [ 1 ] ) ;
9205: LD_VAR 0 9
9209: PPUSH
9210: LD_VAR 0 11
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: CALL 25152 0 2
// continue ;
9223: GO 8998
// end ; if cr or tmp or buildingsToBuild then
9225: LD_VAR 0 17
9229: PUSH
9230: LD_VAR 0 10
9234: OR
9235: PUSH
9236: LD_VAR 0 33
9240: OR
9241: IFFALSE 9317
// begin if IsInUnit ( i ) then
9243: LD_VAR 0 9
9247: PPUSH
9248: CALL_OW 310
9252: IFFALSE 9263
// ComExitBuilding ( i ) ;
9254: LD_VAR 0 9
9258: PPUSH
9259: CALL_OW 122
// if tmp then
9263: LD_VAR 0 10
9267: IFFALSE 9283
// SetTag ( i , tRepair ) else
9269: LD_VAR 0 9
9273: PPUSH
9274: LD_INT 3
9276: PPUSH
9277: CALL_OW 109
9281: GO 9315
// if cr then
9283: LD_VAR 0 17
9287: IFFALSE 9303
// SetTag ( i , tCrates ) else
9289: LD_VAR 0 9
9293: PPUSH
9294: LD_INT 2
9296: PPUSH
9297: CALL_OW 109
9301: GO 9315
// SetTag ( i , tBuild ) ;
9303: LD_VAR 0 9
9307: PPUSH
9308: LD_INT 5
9310: PPUSH
9311: CALL_OW 109
// end else
9315: GO 9343
// if not IsInUnit ( i ) then
9317: LD_VAR 0 9
9321: PPUSH
9322: CALL_OW 310
9326: NOT
9327: IFFALSE 9343
// ComEnterUnit ( i , depot ) ;
9329: LD_VAR 0 9
9333: PPUSH
9334: LD_VAR 0 32
9338: PPUSH
9339: CALL_OW 120
// end ; if tag = tRepair then
9343: LD_VAR 0 15
9347: PUSH
9348: LD_INT 3
9350: EQUAL
9351: IFFALSE 9457
// begin if IsInUnit ( i ) then
9353: LD_VAR 0 9
9357: PPUSH
9358: CALL_OW 310
9362: IFFALSE 9375
// begin ComExitBuilding ( i ) ;
9364: LD_VAR 0 9
9368: PPUSH
9369: CALL_OW 122
// continue ;
9373: GO 8998
// end ; if not tmp then
9375: LD_VAR 0 10
9379: NOT
9380: IFFALSE 9396
// begin SetTag ( i , 0 ) ;
9382: LD_VAR 0 9
9386: PPUSH
9387: LD_INT 0
9389: PPUSH
9390: CALL_OW 109
// continue ;
9394: GO 8998
// end ; if not HasTask ( i ) then
9396: LD_VAR 0 9
9400: PPUSH
9401: CALL_OW 314
9405: NOT
9406: IFFALSE 9426
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9408: LD_VAR 0 9
9412: PPUSH
9413: LD_VAR 0 10
9417: PUSH
9418: LD_INT 1
9420: ARRAY
9421: PPUSH
9422: CALL_OW 130
// if not IsInArea ( i , area ) then
9426: LD_VAR 0 9
9430: PPUSH
9431: LD_VAR 0 3
9435: PPUSH
9436: CALL_OW 308
9440: NOT
9441: IFFALSE 9457
// ComMoveToArea ( i , area ) ;
9443: LD_VAR 0 9
9447: PPUSH
9448: LD_VAR 0 3
9452: PPUSH
9453: CALL_OW 113
// end ; if tag = tBuild then
9457: LD_VAR 0 15
9461: PUSH
9462: LD_INT 5
9464: EQUAL
9465: IFFALSE 9671
// begin if IsInUnit ( i ) then
9467: LD_VAR 0 9
9471: PPUSH
9472: CALL_OW 310
9476: IFFALSE 9489
// begin ComExitBuilding ( i ) ;
9478: LD_VAR 0 9
9482: PPUSH
9483: CALL_OW 122
// continue ;
9487: GO 8998
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9489: LD_VAR 0 33
9493: NOT
9494: PUSH
9495: LD_VAR 0 22
9499: OR
9500: PUSH
9501: LD_VAR 0 23
9505: OR
9506: IFFALSE 9524
// begin SetTag ( i , 0 ) ;
9508: LD_VAR 0 9
9512: PPUSH
9513: LD_INT 0
9515: PPUSH
9516: CALL_OW 109
// continue ;
9520: GO 8998
// end else
9522: GO 9563
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9524: LD_VAR 0 32
9528: PPUSH
9529: LD_VAR 0 33
9533: PUSH
9534: LD_INT 1
9536: ARRAY
9537: PUSH
9538: LD_INT 1
9540: ARRAY
9541: PPUSH
9542: CALL 58586 0 2
9546: NOT
9547: IFFALSE 9563
// begin SetTag ( i , 0 ) ;
9549: LD_VAR 0 9
9553: PPUSH
9554: LD_INT 0
9556: PPUSH
9557: CALL_OW 109
// continue ;
9561: GO 8998
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9563: LD_ADDR_VAR 0 11
9567: PUSH
9568: LD_VAR 0 3
9572: PPUSH
9573: LD_INT 57
9575: PUSH
9576: EMPTY
9577: LIST
9578: PPUSH
9579: CALL_OW 70
9583: ST_TO_ADDR
// if undone then
9584: LD_VAR 0 11
9588: IFFALSE 9610
// begin ComComplete ( i , undone [ 1 ] ) ;
9590: LD_VAR 0 9
9594: PPUSH
9595: LD_VAR 0 11
9599: PUSH
9600: LD_INT 1
9602: ARRAY
9603: PPUSH
9604: CALL 25152 0 2
// continue ;
9608: GO 8998
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9610: LD_VAR 0 9
9614: PPUSH
9615: LD_VAR 0 33
9619: PUSH
9620: LD_INT 1
9622: ARRAY
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 33
9632: PUSH
9633: LD_INT 1
9635: ARRAY
9636: PUSH
9637: LD_INT 2
9639: ARRAY
9640: PPUSH
9641: LD_VAR 0 33
9645: PUSH
9646: LD_INT 1
9648: ARRAY
9649: PUSH
9650: LD_INT 3
9652: ARRAY
9653: PPUSH
9654: LD_VAR 0 33
9658: PUSH
9659: LD_INT 1
9661: ARRAY
9662: PUSH
9663: LD_INT 4
9665: ARRAY
9666: PPUSH
9667: CALL_OW 145
// end ; if tag = tCrates then
9671: LD_VAR 0 15
9675: PUSH
9676: LD_INT 2
9678: EQUAL
9679: IFFALSE 9816
// begin if IsInUnit ( i ) then
9681: LD_VAR 0 9
9685: PPUSH
9686: CALL_OW 310
9690: IFFALSE 9703
// begin ComExitBuilding ( i ) ;
9692: LD_VAR 0 9
9696: PPUSH
9697: CALL_OW 122
// continue ;
9701: GO 8998
// end ; if not cr then
9703: LD_VAR 0 17
9707: NOT
9708: IFFALSE 9724
// begin SetTag ( i , 0 ) ;
9710: LD_VAR 0 9
9714: PPUSH
9715: LD_INT 0
9717: PPUSH
9718: CALL_OW 109
// continue ;
9722: GO 8998
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9724: LD_VAR 0 9
9728: PPUSH
9729: CALL_OW 314
9733: NOT
9734: PUSH
9735: LD_INT 81
9737: PUSH
9738: LD_VAR 0 1
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: LD_INT 92
9749: PUSH
9750: LD_VAR 0 17
9754: PUSH
9755: LD_INT 1
9757: ARRAY
9758: PUSH
9759: LD_VAR 0 17
9763: PUSH
9764: LD_INT 2
9766: ARRAY
9767: PUSH
9768: LD_INT 12
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PPUSH
9781: CALL_OW 69
9785: NOT
9786: AND
9787: IFFALSE 9816
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9789: LD_VAR 0 9
9793: PPUSH
9794: LD_VAR 0 17
9798: PUSH
9799: LD_INT 1
9801: ARRAY
9802: PPUSH
9803: LD_VAR 0 17
9807: PUSH
9808: LD_INT 2
9810: ARRAY
9811: PPUSH
9812: CALL_OW 117
// end ; end ;
9816: GO 8998
9818: POP
9819: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9820: LD_ADDR_VAR 0 25
9824: PUSH
9825: LD_VAR 0 26
9829: PPUSH
9830: LD_INT 34
9832: PUSH
9833: LD_INT 88
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 50
9842: PUSH
9843: EMPTY
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 72
9854: ST_TO_ADDR
// if cranes then
9855: LD_VAR 0 25
9859: IFFALSE 9924
// begin if tmp then
9861: LD_VAR 0 10
9865: IFFALSE 9910
// begin for i in cranes do
9867: LD_ADDR_VAR 0 9
9871: PUSH
9872: LD_VAR 0 25
9876: PUSH
9877: FOR_IN
9878: IFFALSE 9906
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9880: LD_VAR 0 9
9884: PPUSH
9885: LD_VAR 0 10
9889: PPUSH
9890: LD_VAR 0 9
9894: PPUSH
9895: CALL_OW 74
9899: PPUSH
9900: CALL_OW 130
9904: GO 9877
9906: POP
9907: POP
// end else
9908: GO 9924
// ComBackOnParking ( cranes , parkingPoint ) ;
9910: LD_VAR 0 25
9914: PPUSH
9915: LD_VAR 0 7
9919: PPUSH
9920: CALL 59480 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9924: LD_ADDR_VAR 0 27
9928: PUSH
9929: LD_EXP 46
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: LD_VAR 0 2
9941: PPUSH
9942: LD_INT 2
9944: PPUSH
9945: CALL 59343 0 4
9949: ST_TO_ADDR
// if vehicles2 then
9950: LD_VAR 0 27
9954: IFFALSE 10021
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9956: LD_ADDR_VAR 0 9
9960: PUSH
9961: LD_VAR 0 27
9965: PPUSH
9966: LD_INT 33
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 50
9978: PUSH
9979: EMPTY
9980: LIST
9981: PUSH
9982: LD_INT 3
9984: PUSH
9985: LD_INT 61
9987: PUSH
9988: EMPTY
9989: LIST
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: PPUSH
10000: CALL_OW 72
10004: PUSH
10005: FOR_IN
10006: IFFALSE 10019
// Connect ( i ) ;
10008: LD_VAR 0 9
10012: PPUSH
10013: CALL 25260 0 1
10017: GO 10005
10019: POP
10020: POP
// if vehicles then
10021: LD_VAR 0 26
10025: IFFALSE 10931
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
10027: LD_ADDR_VAR 0 9
10031: PUSH
10032: LD_VAR 0 26
10036: PPUSH
10037: LD_INT 33
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: LD_INT 50
10049: PUSH
10050: EMPTY
10051: LIST
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 61
10058: PUSH
10059: EMPTY
10060: LIST
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 72
10075: PUSH
10076: FOR_IN
10077: IFFALSE 10090
// Connect ( i ) ;
10079: LD_VAR 0 9
10083: PPUSH
10084: CALL 25260 0 1
10088: GO 10076
10090: POP
10091: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10092: LD_ADDR_VAR 0 26
10096: PUSH
10097: LD_VAR 0 26
10101: PPUSH
10102: LD_INT 3
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: LD_INT 34
10110: PUSH
10111: LD_INT 88
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: PUSH
10118: LD_INT 34
10120: PUSH
10121: LD_INT 32
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 50
10139: PUSH
10140: EMPTY
10141: LIST
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 72
10151: ST_TO_ADDR
// if vehicles then
10152: LD_VAR 0 26
10156: IFFALSE 10931
// begin for i in vehicles do
10158: LD_ADDR_VAR 0 9
10162: PUSH
10163: LD_VAR 0 26
10167: PUSH
10168: FOR_IN
10169: IFFALSE 10929
// begin tag := GetTag ( i ) ;
10171: LD_ADDR_VAR 0 15
10175: PUSH
10176: LD_VAR 0 9
10180: PPUSH
10181: CALL_OW 110
10185: ST_TO_ADDR
// if not tag then
10186: LD_VAR 0 15
10190: NOT
10191: IFFALSE 10362
// begin if GetControl ( i ) = control_manual then
10193: LD_VAR 0 9
10197: PPUSH
10198: CALL_OW 263
10202: PUSH
10203: LD_INT 1
10205: EQUAL
10206: IFFALSE 10348
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10208: LD_ADDR_VAR 0 24
10212: PUSH
10213: LD_EXP 47
10217: PPUSH
10218: LD_INT 1
10220: PPUSH
10221: LD_VAR 0 9
10225: PPUSH
10226: LD_INT 2
10228: PPUSH
10229: CALL 59343 0 4
10233: ST_TO_ADDR
// if not drivers then
10234: LD_VAR 0 24
10238: NOT
10239: IFFALSE 10328
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10241: LD_ADDR_VAR 0 24
10245: PUSH
10246: LD_VAR 0 14
10250: PPUSH
10251: LD_INT 3
10253: PUSH
10254: LD_INT 120
10256: PUSH
10257: LD_INT 7
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PPUSH
10268: CALL_OW 72
10272: ST_TO_ADDR
// if drivers then
10273: LD_VAR 0 24
10277: IFFALSE 10328
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10279: LD_VAR 0 24
10283: PUSH
10284: LD_INT 1
10286: ARRAY
10287: PPUSH
10288: LD_INT 7
10290: PPUSH
10291: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10295: LD_ADDR_EXP 47
10299: PUSH
10300: LD_EXP 47
10304: PPUSH
10305: LD_VAR 0 9
10309: PUSH
10310: LD_VAR 0 24
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL 54663 0 2
10327: ST_TO_ADDR
// end ; end ; if drivers then
10328: LD_VAR 0 24
10332: IFFALSE 10346
// SetTag ( i , tBusy ) ;
10334: LD_VAR 0 9
10338: PPUSH
10339: LD_INT 8
10341: PPUSH
10342: CALL_OW 109
// continue ;
10346: GO 10168
// end ; SetTag ( i , tBusy ) ;
10348: LD_VAR 0 9
10352: PPUSH
10353: LD_INT 8
10355: PPUSH
10356: CALL_OW 109
// end else
10360: GO 10927
// if tag = tBusy then
10362: LD_VAR 0 15
10366: PUSH
10367: LD_INT 8
10369: EQUAL
10370: IFFALSE 10598
// begin if GetLives ( i ) = 1000 then
10372: LD_VAR 0 9
10376: PPUSH
10377: CALL_OW 256
10381: PUSH
10382: LD_INT 1000
10384: EQUAL
10385: IFFALSE 10596
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10387: LD_VAR 0 9
10391: PPUSH
10392: CALL_OW 263
10396: PUSH
10397: LD_INT 1
10399: EQUAL
10400: PUSH
10401: LD_VAR 0 9
10405: PPUSH
10406: CALL_OW 311
10410: NOT
10411: AND
10412: IFFALSE 10584
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10414: LD_ADDR_VAR 0 24
10418: PUSH
10419: LD_EXP 47
10423: PPUSH
10424: LD_INT 1
10426: PPUSH
10427: LD_VAR 0 9
10431: PPUSH
10432: LD_INT 2
10434: PPUSH
10435: CALL 59343 0 4
10439: ST_TO_ADDR
// if not drivers then
10440: LD_VAR 0 24
10444: NOT
10445: IFFALSE 10461
// begin SetTag ( i , 0 ) ;
10447: LD_VAR 0 9
10451: PPUSH
10452: LD_INT 0
10454: PPUSH
10455: CALL_OW 109
// continue ;
10459: GO 10168
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10461: LD_VAR 0 24
10465: PUSH
10466: LD_INT 1
10468: ARRAY
10469: PPUSH
10470: CALL_OW 310
10474: PUSH
10475: LD_VAR 0 24
10479: PUSH
10480: LD_INT 1
10482: ARRAY
10483: PPUSH
10484: CALL 52267 0 1
10488: NOT
10489: AND
10490: IFFALSE 10505
// ComExitBuilding ( drivers [ 1 ] ) ;
10492: LD_VAR 0 24
10496: PUSH
10497: LD_INT 1
10499: ARRAY
10500: PPUSH
10501: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10505: LD_VAR 0 26
10509: PPUSH
10510: LD_INT 120
10512: PUSH
10513: LD_INT 3
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 72
10524: PUSH
10525: LD_VAR 0 24
10529: PUSH
10530: LD_INT 1
10532: ARRAY
10533: PPUSH
10534: CALL_OW 314
10538: NOT
10539: AND
10540: PUSH
10541: LD_VAR 0 26
10545: PPUSH
10546: LD_INT 120
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 72
10560: NOT
10561: OR
10562: IFFALSE 10582
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10564: LD_VAR 0 24
10568: PUSH
10569: LD_INT 1
10571: ARRAY
10572: PPUSH
10573: LD_VAR 0 9
10577: PPUSH
10578: CALL_OW 120
// continue ;
10582: GO 10168
// end ; SetTag ( i , tAttack ) ;
10584: LD_VAR 0 9
10588: PPUSH
10589: LD_INT 13
10591: PPUSH
10592: CALL_OW 109
// end ; end else
10596: GO 10927
// if tag = tAttack then
10598: LD_VAR 0 15
10602: PUSH
10603: LD_INT 13
10605: EQUAL
10606: IFFALSE 10786
// begin enemy := enemyInBase ;
10608: LD_ADDR_VAR 0 21
10612: PUSH
10613: LD_VAR 0 22
10617: ST_TO_ADDR
// if not enemy then
10618: LD_VAR 0 21
10622: NOT
10623: IFFALSE 10635
// enemy := enemyOuterBase ;
10625: LD_ADDR_VAR 0 21
10629: PUSH
10630: LD_VAR 0 23
10634: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10635: LD_VAR 0 21
10639: NOT
10640: PUSH
10641: LD_VAR 0 9
10645: PPUSH
10646: LD_VAR 0 7
10650: PUSH
10651: LD_INT 1
10653: ARRAY
10654: PPUSH
10655: LD_VAR 0 7
10659: PUSH
10660: LD_INT 2
10662: ARRAY
10663: PPUSH
10664: CALL_OW 297
10668: PUSH
10669: LD_INT 10
10671: GREATER
10672: AND
10673: IFFALSE 10704
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10675: LD_VAR 0 9
10679: PPUSH
10680: LD_VAR 0 7
10684: PUSH
10685: LD_INT 1
10687: ARRAY
10688: PPUSH
10689: LD_VAR 0 7
10693: PUSH
10694: LD_INT 2
10696: ARRAY
10697: PPUSH
10698: CALL_OW 111
// continue ;
10702: GO 10168
// end ; if GetLives ( i ) < 650 then
10704: LD_VAR 0 9
10708: PPUSH
10709: CALL_OW 256
10713: PUSH
10714: LD_INT 650
10716: LESS
10717: IFFALSE 10760
// begin SetTag ( i , tVehRepair ) ;
10719: LD_VAR 0 9
10723: PPUSH
10724: LD_INT 9
10726: PPUSH
10727: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10731: LD_VAR 0 9
10735: PPUSH
10736: LD_VAR 0 7
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 7
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 111
// continue ;
10758: GO 10168
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10760: LD_VAR 0 9
10764: PPUSH
10765: LD_VAR 0 21
10769: PPUSH
10770: LD_VAR 0 9
10774: PPUSH
10775: CALL_OW 74
10779: PPUSH
10780: CALL_OW 115
// end else
10784: GO 10927
// if tag = tVehRepair then
10786: LD_VAR 0 15
10790: PUSH
10791: LD_INT 9
10793: EQUAL
10794: IFFALSE 10927
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10796: LD_VAR 0 9
10800: PPUSH
10801: LD_VAR 0 7
10805: PUSH
10806: LD_INT 1
10808: ARRAY
10809: PPUSH
10810: LD_VAR 0 7
10814: PUSH
10815: LD_INT 2
10817: ARRAY
10818: PPUSH
10819: CALL_OW 297
10823: PUSH
10824: LD_INT 10
10826: GREATER
10827: IFFALSE 10858
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10829: LD_VAR 0 9
10833: PPUSH
10834: LD_VAR 0 7
10838: PUSH
10839: LD_INT 1
10841: ARRAY
10842: PPUSH
10843: LD_VAR 0 7
10847: PUSH
10848: LD_INT 2
10850: ARRAY
10851: PPUSH
10852: CALL_OW 111
// continue ;
10856: GO 10168
// end ; if GetLives ( i ) = 1000 then
10858: LD_VAR 0 9
10862: PPUSH
10863: CALL_OW 256
10867: PUSH
10868: LD_INT 1000
10870: EQUAL
10871: IFFALSE 10887
// begin SetTag ( i , tBusy ) ;
10873: LD_VAR 0 9
10877: PPUSH
10878: LD_INT 8
10880: PPUSH
10881: CALL_OW 109
// continue ;
10885: GO 10168
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10887: LD_VAR 0 9
10891: PPUSH
10892: CALL_OW 263
10896: PUSH
10897: LD_INT 1
10899: EQUAL
10900: PUSH
10901: LD_VAR 0 9
10905: PPUSH
10906: CALL_OW 311
10910: AND
10911: IFFALSE 10927
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10913: LD_VAR 0 9
10917: PPUSH
10918: CALL_OW 311
10922: PPUSH
10923: CALL 56363 0 1
// end ; end ;
10927: GO 10168
10929: POP
10930: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10931: LD_ADDR_VAR 0 19
10935: PUSH
10936: LD_VAR 0 5
10940: PPUSH
10941: LD_INT 2
10943: PUSH
10944: LD_INT 25
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 25
10956: PUSH
10957: LD_INT 8
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 25
10966: PUSH
10967: LD_INT 5
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 25
10976: PUSH
10977: LD_INT 9
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 50
10993: PUSH
10994: EMPTY
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PPUSH
11001: CALL_OW 72
11005: ST_TO_ADDR
// if sol then
11006: LD_VAR 0 19
11010: IFFALSE 11558
// begin if enemyInBase then
11012: LD_VAR 0 22
11016: IFFALSE 11195
// begin for i in sol do
11018: LD_ADDR_VAR 0 9
11022: PUSH
11023: LD_VAR 0 19
11027: PUSH
11028: FOR_IN
11029: IFFALSE 11191
// begin tw := IsInUnit ( i ) ;
11031: LD_ADDR_VAR 0 16
11035: PUSH
11036: LD_VAR 0 9
11040: PPUSH
11041: CALL_OW 310
11045: ST_TO_ADDR
// if tw then
11046: LD_VAR 0 16
11050: IFFALSE 11133
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11052: LD_VAR 0 16
11056: PUSH
11057: LD_INT 22
11059: PUSH
11060: LD_VAR 0 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 101
11071: PUSH
11072: LD_VAR 0 34
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 2
11083: PUSH
11084: LD_INT 30
11086: PUSH
11087: LD_INT 32
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 30
11096: PUSH
11097: LD_INT 31
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: PPUSH
11114: CALL_OW 69
11118: IN
11119: NOT
11120: IFFALSE 11131
// ComExitBuilding ( i ) ;
11122: LD_VAR 0 9
11126: PPUSH
11127: CALL_OW 122
// end else
11131: GO 11189
// if IsInArea ( i , area ) then
11133: LD_VAR 0 9
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: CALL_OW 308
11147: IFFALSE 11175
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11149: LD_VAR 0 9
11153: PPUSH
11154: LD_VAR 0 22
11158: PPUSH
11159: LD_VAR 0 9
11163: PPUSH
11164: CALL_OW 74
11168: PPUSH
11169: CALL_OW 115
11173: GO 11189
// ComMoveToArea ( i , area ) ;
11175: LD_VAR 0 9
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: CALL_OW 113
// end ;
11189: GO 11028
11191: POP
11192: POP
// end else
11193: GO 11558
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11195: LD_ADDR_VAR 0 28
11199: PUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_INT 3
11207: PUSH
11208: LD_INT 62
11210: PUSH
11211: EMPTY
11212: LIST
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 2
11220: PUSH
11221: LD_INT 30
11223: PUSH
11224: LD_INT 32
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 30
11233: PUSH
11234: LD_INT 4
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 30
11243: PUSH
11244: LD_INT 5
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 31
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 70
11276: ST_TO_ADDR
// if empty then
11277: LD_VAR 0 28
11281: IFFALSE 11298
// empty := ReverseArray ( empty ) ;
11283: LD_ADDR_VAR 0 28
11287: PUSH
11288: LD_VAR 0 28
11292: PPUSH
11293: CALL 49930 0 1
11297: ST_TO_ADDR
// for i in sol do
11298: LD_ADDR_VAR 0 9
11302: PUSH
11303: LD_VAR 0 19
11307: PUSH
11308: FOR_IN
11309: IFFALSE 11556
// begin tag := GetTag ( i ) ;
11311: LD_ADDR_VAR 0 15
11315: PUSH
11316: LD_VAR 0 9
11320: PPUSH
11321: CALL_OW 110
11325: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11326: LD_VAR 0 9
11330: PPUSH
11331: CALL_OW 256
11335: PUSH
11336: LD_INT 1000
11338: LESS
11339: PUSH
11340: LD_VAR 0 15
11344: PUSH
11345: LD_INT 1
11347: NONEQUAL
11348: AND
11349: IFFALSE 11401
// begin SetTag ( i , tHeal ) ;
11351: LD_VAR 0 9
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11363: LD_VAR 0 9
11367: PPUSH
11368: LD_VAR 0 6
11372: PUSH
11373: LD_INT 1
11375: ARRAY
11376: PPUSH
11377: LD_VAR 0 6
11381: PUSH
11382: LD_INT 2
11384: ARRAY
11385: PPUSH
11386: CALL_OW 111
// AddComHold ( i ) ;
11390: LD_VAR 0 9
11394: PPUSH
11395: CALL_OW 200
// continue ;
11399: GO 11308
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11401: LD_VAR 0 9
11405: PPUSH
11406: CALL_OW 256
11410: PUSH
11411: LD_INT 1000
11413: EQUAL
11414: PUSH
11415: LD_VAR 0 15
11419: PUSH
11420: LD_INT 1
11422: EQUAL
11423: AND
11424: IFFALSE 11440
// begin SetTag ( i , 0 ) ;
11426: LD_VAR 0 9
11430: PPUSH
11431: LD_INT 0
11433: PPUSH
11434: CALL_OW 109
// continue ;
11438: GO 11308
// end ; if HasTask ( i ) then
11440: LD_VAR 0 9
11444: PPUSH
11445: CALL_OW 314
11449: IFFALSE 11453
// continue ;
11451: GO 11308
// if not IsInUnit ( i ) and not tag and empty then
11453: LD_VAR 0 9
11457: PPUSH
11458: CALL_OW 310
11462: NOT
11463: PUSH
11464: LD_VAR 0 15
11468: NOT
11469: AND
11470: PUSH
11471: LD_VAR 0 28
11475: AND
11476: IFFALSE 11554
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11478: LD_VAR 0 9
11482: PPUSH
11483: LD_VAR 0 28
11487: PUSH
11488: LD_INT 1
11490: ARRAY
11491: PPUSH
11492: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11496: LD_VAR 0 28
11500: PUSH
11501: LD_INT 1
11503: ARRAY
11504: PPUSH
11505: CALL_OW 266
11509: PUSH
11510: LD_INT 5
11512: EQUAL
11513: PUSH
11514: LD_INT 50
11516: PPUSH
11517: CALL_OW 13
11521: AND
11522: IFFALSE 11536
// AddComChangeProfession ( i , class_mortar ) ;
11524: LD_VAR 0 9
11528: PPUSH
11529: LD_INT 8
11531: PPUSH
11532: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11536: LD_ADDR_VAR 0 28
11540: PUSH
11541: LD_VAR 0 28
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 3
11553: ST_TO_ADDR
// end ; end ;
11554: GO 11308
11556: POP
11557: POP
// end ; end ; end ;
11558: LD_VAR 0 8
11562: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11563: LD_EXP 33
11567: PPUSH
11568: LD_INT 50
11570: PUSH
11571: EMPTY
11572: LIST
11573: PPUSH
11574: CALL_OW 72
11578: IFFALSE 11627
11580: GO 11582
11582: DISABLE
// begin enable ;
11583: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11584: LD_EXP 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: LD_INT 33
11594: PPUSH
11595: LD_INT 40
11597: PPUSH
11598: LD_EXP 33
11602: PPUSH
11603: LD_INT 120
11605: PUSH
11606: LD_INT 129
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: LD_INT 126
11615: PUSH
11616: LD_INT 136
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL 7606 0 7
// end ;
11627: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11628: LD_EXP 34
11632: PPUSH
11633: LD_INT 50
11635: PUSH
11636: EMPTY
11637: LIST
11638: PPUSH
11639: CALL_OW 72
11643: IFFALSE 11692
11645: GO 11647
11647: DISABLE
// begin enable ;
11648: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11649: LD_EXP 3
11653: PPUSH
11654: LD_INT 2
11656: PPUSH
11657: LD_INT 35
11659: PPUSH
11660: LD_INT 43
11662: PPUSH
11663: LD_EXP 34
11667: PPUSH
11668: LD_INT 116
11670: PUSH
11671: LD_INT 9
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PPUSH
11678: LD_INT 123
11680: PUSH
11681: LD_INT 12
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PPUSH
11688: CALL 7606 0 7
// end ;
11692: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11693: LD_EXP 32
11697: PPUSH
11698: LD_INT 50
11700: PUSH
11701: EMPTY
11702: LIST
11703: PPUSH
11704: CALL_OW 72
11708: IFFALSE 11757
11710: GO 11712
11712: DISABLE
// begin enable ;
11713: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11714: LD_EXP 3
11718: PPUSH
11719: LD_INT 3
11721: PPUSH
11722: LD_INT 34
11724: PPUSH
11725: LD_INT 42
11727: PPUSH
11728: LD_EXP 32
11732: PPUSH
11733: LD_INT 28
11735: PUSH
11736: LD_INT 10
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PPUSH
11743: LD_INT 26
11745: PUSH
11746: LD_INT 17
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PPUSH
11753: CALL 7606 0 7
// end ;
11757: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11758: LD_EXP 36
11762: PPUSH
11763: LD_INT 50
11765: PUSH
11766: EMPTY
11767: LIST
11768: PPUSH
11769: CALL_OW 72
11773: IFFALSE 11822
11775: GO 11777
11777: DISABLE
// begin enable ;
11778: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11779: LD_EXP 3
11783: PPUSH
11784: LD_INT 4
11786: PPUSH
11787: LD_INT 36
11789: PPUSH
11790: LD_INT 44
11792: PPUSH
11793: LD_EXP 36
11797: PPUSH
11798: LD_INT 173
11800: PUSH
11801: LD_INT 72
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PPUSH
11808: LD_INT 167
11810: PUSH
11811: LD_INT 83
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PPUSH
11818: CALL 7606 0 7
// end ;
11822: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11823: LD_EXP 35
11827: PPUSH
11828: LD_INT 50
11830: PUSH
11831: EMPTY
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: IFFALSE 11887
11840: GO 11842
11842: DISABLE
// begin enable ;
11843: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11844: LD_EXP 3
11848: PPUSH
11849: LD_INT 5
11851: PPUSH
11852: LD_INT 38
11854: PPUSH
11855: LD_INT 45
11857: PPUSH
11858: LD_EXP 35
11862: PPUSH
11863: LD_INT 147
11865: PUSH
11866: LD_INT 50
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: LD_INT 159
11875: PUSH
11876: LD_INT 40
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL 7606 0 7
// end ;
11887: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11888: LD_EXP 51
11892: IFFALSE 12112
11894: GO 11896
11896: DISABLE
11897: LD_INT 0
11899: PPUSH
11900: PPUSH
11901: PPUSH
// begin enable ;
11902: ENABLE
// p := 1 ;
11903: LD_ADDR_VAR 0 2
11907: PUSH
11908: LD_INT 1
11910: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11911: LD_ADDR_VAR 0 1
11915: PUSH
11916: DOUBLE
11917: LD_INT 1
11919: DEC
11920: ST_TO_ADDR
11921: LD_EXP 51
11925: PPUSH
11926: CALL 19054 0 1
11930: PUSH
11931: LD_INT 2
11933: DIV
11934: PUSH
11935: FOR_TO
11936: IFFALSE 12110
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_EXP 51
11947: PUSH
11948: LD_VAR 0 2
11952: ARRAY
11953: PPUSH
11954: LD_EXP 51
11958: PUSH
11959: LD_VAR 0 2
11963: PUSH
11964: LD_INT 1
11966: PLUS
11967: ARRAY
11968: PPUSH
11969: CALL_OW 428
11973: ST_TO_ADDR
// if tmp then
11974: LD_VAR 0 3
11978: IFFALSE 12094
// if not GetSide ( tmp ) in [ 0 , side_bot ] then
11980: LD_VAR 0 3
11984: PPUSH
11985: CALL_OW 255
11989: PUSH
11990: LD_INT 0
11992: PUSH
11993: LD_EXP 3
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: IN
12002: NOT
12003: IFFALSE 12094
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
12005: LD_EXP 51
12009: PUSH
12010: LD_VAR 0 2
12014: ARRAY
12015: PPUSH
12016: LD_EXP 51
12020: PUSH
12021: LD_VAR 0 2
12025: PUSH
12026: LD_INT 1
12028: PLUS
12029: ARRAY
12030: PPUSH
12031: LD_EXP 3
12035: PPUSH
12036: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
12040: LD_ADDR_EXP 51
12044: PUSH
12045: LD_EXP 51
12049: PPUSH
12050: LD_VAR 0 2
12054: PPUSH
12055: CALL_OW 3
12059: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12060: LD_ADDR_EXP 51
12064: PUSH
12065: LD_EXP 51
12069: PPUSH
12070: LD_VAR 0 2
12074: PPUSH
12075: CALL_OW 3
12079: ST_TO_ADDR
// p := p - 2 ;
12080: LD_ADDR_VAR 0 2
12084: PUSH
12085: LD_VAR 0 2
12089: PUSH
12090: LD_INT 2
12092: MINUS
12093: ST_TO_ADDR
// end ; p := p + 2 ;
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: LD_VAR 0 2
12103: PUSH
12104: LD_INT 2
12106: PLUS
12107: ST_TO_ADDR
// end ;
12108: GO 11935
12110: POP
12111: POP
// end ; end_of_file
12112: PPOPN 3
12114: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12115: LD_INT 0
12117: PPUSH
12118: PPUSH
// begin if artifact_get then
12119: LD_EXP 4
12123: IFFALSE 12127
// exit ;
12125: GO 12149
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12127: LD_VAR 0 1
12131: PPUSH
12132: CALL_OW 255
12136: PPUSH
12137: CALL 5237 0 1
// artifact_get := true ;
12141: LD_ADDR_EXP 4
12145: PUSH
12146: LD_INT 1
12148: ST_TO_ADDR
// end ;
12149: PPOPN 4
12151: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 255
12161: PUSH
12162: LD_EXP 3
12166: NONEQUAL
12167: IFFALSE 12171
// exit ;
12169: GO 12240
// if not un in [ Saliba , Gensher , Shariff ] then
12171: LD_VAR 0 1
12175: PUSH
12176: LD_EXP 39
12180: PUSH
12181: LD_EXP 40
12185: PUSH
12186: LD_EXP 41
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: IN
12196: NOT
12197: IFFALSE 12218
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 2
12208: PPUSH
12209: LD_INT 0
12211: PPUSH
12212: CALL 5173 0 3
12216: GO 12240
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12218: LD_VAR 0 1
12222: PPUSH
12223: LD_VAR 0 2
12227: PPUSH
12228: LD_INT 5
12230: PPUSH
12231: CALL 4500 0 1
12235: PPUSH
12236: CALL 5173 0 3
// end ;
12240: PPOPN 3
12242: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12243: LD_INT 0
12245: PPUSH
12246: PPUSH
12247: PPUSH
12248: PPUSH
12249: PPUSH
12250: PPUSH
12251: PPUSH
12252: PPUSH
12253: PPUSH
12254: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
12255: LD_VAR 0 1
12259: PPUSH
12260: CALL 59747 0 1
// side := GetSide ( un ) ;
12264: LD_ADDR_VAR 0 3
12268: PUSH
12269: LD_VAR 0 1
12273: PPUSH
12274: CALL_OW 255
12278: ST_TO_ADDR
// if multi_sides [ side ] then
12279: LD_EXP 7
12283: PUSH
12284: LD_VAR 0 3
12288: ARRAY
12289: IFFALSE 12315
// if GetType ( un ) = unit_human then
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 247
12300: PUSH
12301: LD_INT 1
12303: EQUAL
12304: IFFALSE 12315
// MultiplayerEvent_HumanLost ( side ) ;
12306: LD_VAR 0 3
12310: PPUSH
12311: CALL 5059 0 1
// if side = side_bot then
12315: LD_VAR 0 3
12319: PUSH
12320: LD_EXP 3
12324: EQUAL
12325: IFFALSE 12771
// begin if GetType ( un ) = unit_building then
12327: LD_VAR 0 1
12331: PPUSH
12332: CALL_OW 247
12336: PUSH
12337: LD_INT 3
12339: EQUAL
12340: IFFALSE 12570
// begin base := 0 ;
12342: LD_ADDR_VAR 0 4
12346: PUSH
12347: LD_INT 0
12349: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12350: LD_ADDR_VAR 0 2
12354: PUSH
12355: DOUBLE
12356: LD_INT 1
12358: DEC
12359: ST_TO_ADDR
12360: LD_EXP 49
12364: PPUSH
12365: CALL 19054 0 1
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12409
// if IsInArea ( un , arAreas [ i ] ) then
12373: LD_VAR 0 1
12377: PPUSH
12378: LD_EXP 49
12382: PUSH
12383: LD_VAR 0 2
12387: ARRAY
12388: PPUSH
12389: CALL_OW 308
12393: IFFALSE 12407
// begin base := i ;
12395: LD_ADDR_VAR 0 4
12399: PUSH
12400: LD_VAR 0 2
12404: ST_TO_ADDR
// break ;
12405: GO 12409
// end ;
12407: GO 12370
12409: POP
12410: POP
// if not base then
12411: LD_VAR 0 4
12415: NOT
12416: IFFALSE 12420
// exit ;
12418: GO 12872
// btype := GetBType ( un ) ;
12420: LD_ADDR_VAR 0 11
12424: PUSH
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 266
12434: ST_TO_ADDR
// if btype = b_barracks then
12435: LD_VAR 0 11
12439: PUSH
12440: LD_INT 5
12442: EQUAL
12443: IFFALSE 12453
// btype := b_armoury ;
12445: LD_ADDR_VAR 0 11
12449: PUSH
12450: LD_INT 4
12452: ST_TO_ADDR
// if btype = b_factory then
12453: LD_VAR 0 11
12457: PUSH
12458: LD_INT 3
12460: EQUAL
12461: IFFALSE 12471
// btype := b_workshop ;
12463: LD_ADDR_VAR 0 11
12467: PUSH
12468: LD_INT 2
12470: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12471: LD_VAR 0 11
12475: PUSH
12476: LD_INT 8
12478: PUSH
12479: LD_INT 7
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: IN
12486: IFFALSE 12496
// btype := b_lab ;
12488: LD_ADDR_VAR 0 11
12492: PUSH
12493: LD_INT 6
12495: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12496: LD_ADDR_EXP 44
12500: PUSH
12501: LD_EXP 44
12505: PPUSH
12506: LD_EXP 44
12510: PUSH
12511: LD_INT 1
12513: PLUS
12514: PPUSH
12515: LD_VAR 0 4
12519: PUSH
12520: LD_VAR 0 11
12524: PUSH
12525: LD_VAR 0 1
12529: PPUSH
12530: CALL_OW 250
12534: PUSH
12535: LD_VAR 0 1
12539: PPUSH
12540: CALL_OW 251
12544: PUSH
12545: LD_VAR 0 1
12549: PPUSH
12550: CALL_OW 254
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PPUSH
12565: CALL_OW 1
12569: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12570: LD_VAR 0 1
12574: PPUSH
12575: CALL_OW 247
12579: PUSH
12580: LD_INT 2
12582: EQUAL
12583: IFFALSE 12771
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12585: LD_ADDR_VAR 0 4
12589: PUSH
12590: LD_EXP 45
12594: PPUSH
12595: LD_INT 2
12597: PPUSH
12598: LD_VAR 0 1
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL 59343 0 4
12610: ST_TO_ADDR
// if not base then
12611: LD_VAR 0 4
12615: NOT
12616: IFFALSE 12620
// exit ;
12618: GO 12872
// factory := arFactories [ base ] ;
12620: LD_ADDR_VAR 0 10
12624: PUSH
12625: LD_EXP 48
12629: PUSH
12630: LD_VAR 0 4
12634: ARRAY
12635: ST_TO_ADDR
// if not factory then
12636: LD_VAR 0 10
12640: NOT
12641: IFFALSE 12645
// exit ;
12643: GO 12872
// chassis := GetChassis ( un ) ;
12645: LD_ADDR_VAR 0 5
12649: PUSH
12650: LD_VAR 0 1
12654: PPUSH
12655: CALL_OW 265
12659: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12660: LD_ADDR_VAR 0 6
12664: PUSH
12665: LD_VAR 0 1
12669: PPUSH
12670: CALL_OW 262
12674: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12675: LD_ADDR_VAR 0 8
12679: PUSH
12680: LD_VAR 0 1
12684: PPUSH
12685: CALL_OW 264
12689: ST_TO_ADDR
// control := control_remote ;
12690: LD_ADDR_VAR 0 7
12694: PUSH
12695: LD_INT 2
12697: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12698: LD_ADDR_VAR 0 9
12702: PUSH
12703: LD_VAR 0 10
12707: PPUSH
12708: LD_VAR 0 5
12712: PPUSH
12713: LD_VAR 0 6
12717: PPUSH
12718: LD_VAR 0 7
12722: PPUSH
12723: LD_VAR 0 8
12727: PPUSH
12728: CALL 19412 0 5
12732: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12733: LD_ADDR_EXP 43
12737: PUSH
12738: LD_EXP 43
12742: PPUSH
12743: LD_EXP 43
12747: PUSH
12748: LD_INT 1
12750: PLUS
12751: PPUSH
12752: LD_VAR 0 4
12756: PUSH
12757: LD_VAR 0 9
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PPUSH
12766: CALL_OW 1
12770: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
12771: LD_EXP 24
12775: PUSH
12776: LD_EXP 16
12780: AND
12781: PUSH
12782: LD_EXP 25
12786: PUSH
12787: LD_VAR 0 3
12791: ARRAY
12792: NOT
12793: AND
12794: IFFALSE 12872
// if un in multi_commanders then
12796: LD_VAR 0 1
12800: PUSH
12801: LD_EXP 24
12805: IN
12806: IFFALSE 12872
// begin if side = your_side then
12808: LD_VAR 0 3
12812: PUSH
12813: LD_OWVAR 2
12817: EQUAL
12818: IFFALSE 12824
// Multiplayer_Loose_Message ;
12820: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12824: LD_ADDR_EXP 25
12828: PUSH
12829: LD_EXP 25
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 1
12846: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12847: LD_ADDR_EXP 24
12851: PUSH
12852: LD_EXP 24
12856: PUSH
12857: LD_VAR 0 1
12861: DIFF
12862: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12863: LD_VAR 0 3
12867: PPUSH
12868: CALL 4533 0 1
// end ; end ;
12872: PPOPN 11
12874: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
12879: PPUSH
12880: PPUSH
12881: PPUSH
// begin side := GetSide ( building ) ;
12882: LD_ADDR_VAR 0 4
12886: PUSH
12887: LD_VAR 0 1
12891: PPUSH
12892: CALL_OW 255
12896: ST_TO_ADDR
// if multi_sides [ side ] then
12897: LD_EXP 7
12901: PUSH
12902: LD_VAR 0 4
12906: ARRAY
12907: IFFALSE 12928
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12909: LD_VAR 0 4
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL_OW 266
12923: PPUSH
12924: CALL 5103 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 266
12937: PUSH
12938: LD_INT 0
12940: EQUAL
12941: PUSH
12942: LD_EXP 7
12946: PUSH
12947: LD_VAR 0 4
12951: ARRAY
12952: NOT
12953: AND
12954: PUSH
12955: LD_EXP 5
12959: AND
12960: IFFALSE 12998
// begin SetBName ( building , base_names [ 1 ] ) ;
12962: LD_VAR 0 1
12966: PPUSH
12967: LD_EXP 5
12971: PUSH
12972: LD_INT 1
12974: ARRAY
12975: PPUSH
12976: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12980: LD_ADDR_EXP 5
12984: PUSH
12985: LD_EXP 5
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 3
12997: ST_TO_ADDR
// end ; if side = side_bot then
12998: LD_VAR 0 4
13002: PUSH
13003: LD_EXP 3
13007: EQUAL
13008: IFFALSE 13259
// begin base := 0 ;
13010: LD_ADDR_VAR 0 5
13014: PUSH
13015: LD_INT 0
13017: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: DOUBLE
13024: LD_INT 1
13026: DEC
13027: ST_TO_ADDR
13028: LD_EXP 49
13032: PPUSH
13033: CALL 19054 0 1
13037: PUSH
13038: FOR_TO
13039: IFFALSE 13077
// if IsInArea ( building , arAreas [ i ] ) then
13041: LD_VAR 0 1
13045: PPUSH
13046: LD_EXP 49
13050: PUSH
13051: LD_VAR 0 2
13055: ARRAY
13056: PPUSH
13057: CALL_OW 308
13061: IFFALSE 13075
// begin base := i ;
13063: LD_ADDR_VAR 0 5
13067: PUSH
13068: LD_VAR 0 2
13072: ST_TO_ADDR
// break ;
13073: GO 13077
// end ;
13075: GO 13038
13077: POP
13078: POP
// if not base then
13079: LD_VAR 0 5
13083: NOT
13084: IFFALSE 13088
// exit ;
13086: GO 13259
// for i := 1 to Count ( arBuildings ) do
13088: LD_ADDR_VAR 0 2
13092: PUSH
13093: DOUBLE
13094: LD_INT 1
13096: DEC
13097: ST_TO_ADDR
13098: LD_EXP 44
13102: PPUSH
13103: CALL 19054 0 1
13107: PUSH
13108: FOR_TO
13109: IFFALSE 13161
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13111: LD_EXP 44
13115: PUSH
13116: LD_VAR 0 2
13120: ARRAY
13121: PUSH
13122: LD_INT 1
13124: ARRAY
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PUSH
13130: LD_VAR 0 5
13134: EQUAL
13135: IFFALSE 13159
// begin arBuildings := Delete ( arBuildings , i ) ;
13137: LD_ADDR_EXP 44
13141: PUSH
13142: LD_EXP 44
13146: PPUSH
13147: LD_VAR 0 2
13151: PPUSH
13152: CALL_OW 3
13156: ST_TO_ADDR
// break ;
13157: GO 13161
// end ;
13159: GO 13108
13161: POP
13162: POP
// btype := GetBType ( building ) ;
13163: LD_ADDR_VAR 0 6
13167: PUSH
13168: LD_VAR 0 1
13172: PPUSH
13173: CALL_OW 266
13177: ST_TO_ADDR
// case btype of b_armoury :
13178: LD_VAR 0 6
13182: PUSH
13183: LD_INT 4
13185: DOUBLE
13186: EQUAL
13187: IFTRUE 13191
13189: GO 13203
13191: POP
// ComUpgrade ( building ) ; b_workshop :
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL_OW 146
13201: GO 13259
13203: LD_INT 2
13205: DOUBLE
13206: EQUAL
13207: IFTRUE 13211
13209: GO 13223
13211: POP
// ComUpgrade ( building ) ; b_lab :
13212: LD_VAR 0 1
13216: PPUSH
13217: CALL_OW 146
13221: GO 13259
13223: LD_INT 6
13225: DOUBLE
13226: EQUAL
13227: IFTRUE 13231
13229: GO 13258
13231: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13232: LD_VAR 0 1
13236: PPUSH
13237: LD_INT 10
13239: PPUSH
13240: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13244: LD_VAR 0 1
13248: PPUSH
13249: LD_INT 15
13251: PPUSH
13252: CALL_OW 207
// end ; end ;
13256: GO 13259
13258: POP
// end ; end ;
13259: PPOPN 6
13261: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13262: LD_INT 0
13264: PPUSH
13265: PPUSH
13266: PPUSH
13267: PPUSH
13268: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
13269: LD_VAR 0 1
13273: PPUSH
13274: LD_VAR 0 2
13278: PPUSH
13279: CALL 59805 0 2
// side := GetSide ( vehicle ) ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_VAR 0 1
13292: PPUSH
13293: CALL_OW 255
13297: ST_TO_ADDR
// if multi_sides [ side ] then
13298: LD_EXP 7
13302: PUSH
13303: LD_VAR 0 4
13307: ARRAY
13308: IFFALSE 13319
// MultiplayerEvent_Produced ( side ) ;
13310: LD_VAR 0 4
13314: PPUSH
13315: CALL 5015 0 1
// if side_bot = side then
13319: LD_EXP 3
13323: PUSH
13324: LD_VAR 0 4
13328: EQUAL
13329: IFFALSE 13521
// begin base := 0 ;
13331: LD_ADDR_VAR 0 6
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: DOUBLE
13345: LD_INT 1
13347: DEC
13348: ST_TO_ADDR
13349: LD_EXP 48
13353: PPUSH
13354: CALL 19054 0 1
13358: PUSH
13359: FOR_TO
13360: IFFALSE 13394
// if arFactories [ i ] = factory then
13362: LD_EXP 48
13366: PUSH
13367: LD_VAR 0 3
13371: ARRAY
13372: PUSH
13373: LD_VAR 0 2
13377: EQUAL
13378: IFFALSE 13392
// begin base := i ;
13380: LD_ADDR_VAR 0 6
13384: PUSH
13385: LD_VAR 0 3
13389: ST_TO_ADDR
// break ;
13390: GO 13394
// end ;
13392: GO 13359
13394: POP
13395: POP
// if not base then
13396: LD_VAR 0 6
13400: NOT
13401: IFFALSE 13405
// exit ;
13403: GO 13521
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13405: LD_EXP 50
13409: PUSH
13410: LD_VAR 0 6
13414: ARRAY
13415: PUSH
13416: LD_EXP 45
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: LD_VAR 0 6
13428: PPUSH
13429: LD_INT 2
13431: PPUSH
13432: CALL 59343 0 4
13436: GREATER
13437: PUSH
13438: LD_VAR 0 1
13442: PPUSH
13443: CALL_OW 266
13447: PUSH
13448: LD_INT 32
13450: PUSH
13451: LD_INT 88
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: IN
13458: OR
13459: IFFALSE 13492
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13461: LD_ADDR_EXP 45
13465: PUSH
13466: LD_EXP 45
13470: PPUSH
13471: LD_VAR 0 6
13475: PUSH
13476: LD_VAR 0 1
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PPUSH
13485: CALL 54663 0 2
13489: ST_TO_ADDR
13490: GO 13521
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13492: LD_ADDR_EXP 46
13496: PUSH
13497: LD_EXP 46
13501: PPUSH
13502: LD_VAR 0 6
13506: PUSH
13507: LD_VAR 0 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL 54663 0 2
13520: ST_TO_ADDR
// end ; end ;
13521: PPOPN 7
13523: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13524: LD_VAR 0 1
13528: PPUSH
13529: CALL_OW 110
13533: PUSH
13534: LD_INT 7
13536: EQUAL
13537: IFFALSE 13551
// SetTag ( driver , 0 ) ;
13539: LD_VAR 0 1
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 109
// end ;
13551: PPOPN 4
13553: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = side_bot then
13554: LD_VAR 0 2
13558: PPUSH
13559: CALL_OW 255
13563: PUSH
13564: LD_EXP 3
13568: EQUAL
13569: IFFALSE 13599
// if tech in arTech then
13571: LD_VAR 0 1
13575: PUSH
13576: LD_EXP 42
13580: IN
13581: IFFALSE 13599
// arTech := arTech diff tech ;
13583: LD_ADDR_EXP 42
13587: PUSH
13588: LD_EXP 42
13592: PUSH
13593: LD_VAR 0 1
13597: DIFF
13598: ST_TO_ADDR
// end ;
13599: PPOPN 2
13601: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
13602: LD_VAR 0 1
13606: PPUSH
13607: CALL 59764 0 1
// end ; end_of_file
13611: PPOPN 1
13613: END
// every 0 0$20 trigger game do
13614: LD_EXP 2
13618: IFFALSE 13663
13620: GO 13622
13622: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13623: LD_INT 7
13625: PUSH
13626: LD_INT 6
13628: PUSH
13629: LD_INT 4
13631: PUSH
13632: LD_INT 6
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PPUSH
13641: LD_EXP 21
13645: PUSH
13646: LD_INT 2
13648: ARRAY
13649: PPUSH
13650: LD_EXP 21
13654: PUSH
13655: LD_INT 1
13657: ARRAY
13658: PPUSH
13659: CALL 13664 0 3
13663: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13664: LD_INT 0
13666: PPUSH
13667: PPUSH
13668: PPUSH
13669: PPUSH
// if not areas then
13670: LD_VAR 0 1
13674: NOT
13675: IFFALSE 13679
// exit ;
13677: GO 14049
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13679: LD_ADDR_VAR 0 7
13683: PUSH
13684: LD_INT 31
13686: PUSH
13687: LD_INT 32
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: LIST
13697: ST_TO_ADDR
// x := 5 ;
13698: LD_ADDR_VAR 0 6
13702: PUSH
13703: LD_INT 5
13705: ST_TO_ADDR
// repeat wait ( time ) ;
13706: LD_VAR 0 2
13710: PPUSH
13711: CALL_OW 67
// if tick < [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
13715: LD_OWVAR 1
13719: PUSH
13720: LD_INT 52500
13722: PUSH
13723: LD_INT 48300
13725: PUSH
13726: LD_INT 44100
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_OWVAR 67
13738: ARRAY
13739: LESS
13740: IFFALSE 13879
// begin for i := 1 to multi_sides do
13742: LD_ADDR_VAR 0 5
13746: PUSH
13747: DOUBLE
13748: LD_INT 1
13750: DEC
13751: ST_TO_ADDR
13752: LD_EXP 7
13756: PUSH
13757: FOR_TO
13758: IFFALSE 13870
// if multi_sides [ i ] then
13760: LD_EXP 7
13764: PUSH
13765: LD_VAR 0 5
13769: ARRAY
13770: IFFALSE 13868
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13772: LD_VAR 0 7
13776: PUSH
13777: LD_EXP 7
13781: PUSH
13782: LD_VAR 0 5
13786: ARRAY
13787: ARRAY
13788: PPUSH
13789: LD_INT 1
13791: PPUSH
13792: CALL_OW 287
13796: PUSH
13797: LD_INT 25
13799: PUSH
13800: LD_INT 22
13802: PUSH
13803: LD_INT 20
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: PUSH
13811: LD_OWVAR 67
13815: ARRAY
13816: LESS
13817: IFFALSE 13868
// begin amount := amount - ( x * 10 ) ;
13819: LD_ADDR_VAR 0 3
13823: PUSH
13824: LD_VAR 0 3
13828: PUSH
13829: LD_VAR 0 6
13833: PUSH
13834: LD_INT 10
13836: MUL
13837: MINUS
13838: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13839: LD_VAR 0 6
13843: PPUSH
13844: LD_VAR 0 7
13848: PUSH
13849: LD_EXP 7
13853: PUSH
13854: LD_VAR 0 5
13858: ARRAY
13859: ARRAY
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: CALL_OW 55
// end ; end ;
13868: GO 13757
13870: POP
13871: POP
// wait ( 0 0$10 ) ;
13872: LD_INT 350
13874: PPUSH
13875: CALL_OW 67
// end ; for i in areas do
13879: LD_ADDR_VAR 0 5
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: FOR_IN
13890: IFFALSE 13966
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13892: LD_VAR 0 5
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 287
13904: PUSH
13905: LD_INT 25
13907: PUSH
13908: LD_INT 22
13910: PUSH
13911: LD_INT 20
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_OWVAR 67
13923: ARRAY
13924: LESS
13925: IFFALSE 13964
// begin amount := amount - ( x * 10 ) ;
13927: LD_ADDR_VAR 0 3
13931: PUSH
13932: LD_VAR 0 3
13936: PUSH
13937: LD_VAR 0 6
13941: PUSH
13942: LD_INT 10
13944: MUL
13945: MINUS
13946: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
13947: LD_VAR 0 6
13951: PPUSH
13952: LD_VAR 0 5
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 55
// end ; end ;
13964: GO 13889
13966: POP
13967: POP
// time := time + 0 0$2 ;
13968: LD_ADDR_VAR 0 2
13972: PUSH
13973: LD_VAR 0 2
13977: PUSH
13978: LD_INT 70
13980: PLUS
13981: ST_TO_ADDR
// x := x - 1 ;
13982: LD_ADDR_VAR 0 6
13986: PUSH
13987: LD_VAR 0 6
13991: PUSH
13992: LD_INT 1
13994: MINUS
13995: ST_TO_ADDR
// if x = 0 then
13996: LD_VAR 0 6
14000: PUSH
14001: LD_INT 0
14003: EQUAL
14004: IFFALSE 14014
// x := 5 ;
14006: LD_ADDR_VAR 0 6
14010: PUSH
14011: LD_INT 5
14013: ST_TO_ADDR
// if time > 1 1$10 then
14014: LD_VAR 0 2
14018: PUSH
14019: LD_INT 2450
14021: GREATER
14022: IFFALSE 14032
// time := 0 0$30 ;
14024: LD_ADDR_VAR 0 2
14028: PUSH
14029: LD_INT 1050
14031: ST_TO_ADDR
// until not game or amount <= 0 ;
14032: LD_EXP 2
14036: NOT
14037: PUSH
14038: LD_VAR 0 3
14042: PUSH
14043: LD_INT 0
14045: LESSEQUAL
14046: OR
14047: IFFALSE 13706
// end ; end_of_file
14049: LD_VAR 0 4
14053: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
14054: GO 14056
14056: DISABLE
14057: LD_INT 0
14059: PPUSH
// begin NorthBase := 2 ;
14060: LD_ADDR_LOC 1
14064: PUSH
14065: LD_INT 2
14067: ST_TO_ADDR
// WestBase := 3 ;
14068: LD_ADDR_LOC 2
14072: PUSH
14073: LD_INT 3
14075: ST_TO_ADDR
// end ;
14076: PPOPN 1
14078: END
// every 10 10$00 do var i ;
14079: GO 14081
14081: DISABLE
14082: LD_INT 0
14084: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14085: LD_ADDR_VAR 0 1
14089: PUSH
14090: DOUBLE
14091: LD_INT 1
14093: DEC
14094: ST_TO_ADDR
14095: LD_INT 3
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: LD_INT 5
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_OWVAR 67
14113: ARRAY
14114: PUSH
14115: FOR_TO
14116: IFFALSE 14217
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14118: LD_ADDR_EXP 43
14122: PUSH
14123: LD_EXP 43
14127: PPUSH
14128: LD_EXP 43
14132: PUSH
14133: LD_INT 1
14135: PLUS
14136: PPUSH
14137: LD_LOC 1
14141: PUSH
14142: LD_INT 14
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 1
14157: PPUSH
14158: LD_INT 2
14160: PPUSH
14161: CALL_OW 12
14165: ARRAY
14166: PUSH
14167: LD_INT 2
14169: PUSH
14170: LD_INT 27
14172: PUSH
14173: LD_INT 25
14175: PUSH
14176: LD_INT 28
14178: PUSH
14179: LD_INT 29
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 1
14190: PPUSH
14191: LD_INT 4
14193: PPUSH
14194: CALL_OW 12
14198: ARRAY
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PPUSH
14210: CALL_OW 1
14214: ST_TO_ADDR
// end ;
14215: GO 14115
14217: POP
14218: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14219: LD_ADDR_VAR 0 1
14223: PUSH
14224: DOUBLE
14225: LD_INT 1
14227: DEC
14228: ST_TO_ADDR
14229: LD_INT 3
14231: PUSH
14232: LD_INT 4
14234: PUSH
14235: LD_INT 5
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: PUSH
14243: LD_OWVAR 67
14247: ARRAY
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14332
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14252: LD_ADDR_EXP 43
14256: PUSH
14257: LD_EXP 43
14261: PPUSH
14262: LD_EXP 43
14266: PUSH
14267: LD_INT 1
14269: PLUS
14270: PPUSH
14271: LD_LOC 2
14275: PUSH
14276: LD_INT 14
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: LD_INT 2
14284: PUSH
14285: LD_INT 27
14287: PUSH
14288: LD_INT 25
14290: PUSH
14291: LD_INT 28
14293: PUSH
14294: LD_INT 26
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 1
14305: PPUSH
14306: LD_INT 4
14308: PPUSH
14309: CALL_OW 12
14313: ARRAY
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 1
14329: ST_TO_ADDR
// end ;
14330: GO 14249
14332: POP
14333: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14334: LD_INT 16800
14336: PUSH
14337: LD_INT 2100
14339: PUSH
14340: LD_OWVAR 67
14344: MUL
14345: MINUS
14346: PPUSH
14347: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_INT 5
14363: PUSH
14364: LD_INT 5
14366: PUSH
14367: LD_INT 6
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: PUSH
14375: LD_OWVAR 67
14379: ARRAY
14380: PUSH
14381: FOR_TO
14382: IFFALSE 14483
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14384: LD_ADDR_EXP 43
14388: PUSH
14389: LD_EXP 43
14393: PPUSH
14394: LD_EXP 43
14398: PUSH
14399: LD_INT 1
14401: PLUS
14402: PPUSH
14403: LD_LOC 1
14407: PUSH
14408: LD_INT 14
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: LD_INT 1
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 1
14423: PPUSH
14424: LD_INT 2
14426: PPUSH
14427: CALL_OW 12
14431: ARRAY
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 27
14438: PUSH
14439: LD_INT 25
14441: PUSH
14442: LD_INT 28
14444: PUSH
14445: LD_INT 29
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 1
14456: PPUSH
14457: LD_INT 4
14459: PPUSH
14460: CALL_OW 12
14464: ARRAY
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 1
14480: ST_TO_ADDR
// end ;
14481: GO 14381
14483: POP
14484: POP
// if tick > 30 30$0 then
14485: LD_OWVAR 1
14489: PUSH
14490: LD_INT 63000
14492: GREATER
14493: IFFALSE 14569
// begin for i := 1 to tick div 30 30$0 do
14495: LD_ADDR_VAR 0 1
14499: PUSH
14500: DOUBLE
14501: LD_INT 1
14503: DEC
14504: ST_TO_ADDR
14505: LD_OWVAR 1
14509: PUSH
14510: LD_INT 63000
14512: DIV
14513: PUSH
14514: FOR_TO
14515: IFFALSE 14567
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14517: LD_ADDR_EXP 43
14521: PUSH
14522: LD_EXP 43
14526: PPUSH
14527: LD_EXP 43
14531: PUSH
14532: LD_INT 1
14534: PLUS
14535: PPUSH
14536: LD_LOC 1
14540: PUSH
14541: LD_INT 14
14543: PUSH
14544: LD_INT 3
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: LD_INT 29
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 1
14564: ST_TO_ADDR
14565: GO 14514
14567: POP
14568: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14569: LD_ADDR_VAR 0 1
14573: PUSH
14574: DOUBLE
14575: LD_INT 1
14577: DEC
14578: ST_TO_ADDR
14579: LD_INT 5
14581: PUSH
14582: LD_INT 6
14584: PUSH
14585: LD_INT 6
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PUSH
14593: LD_OWVAR 67
14597: ARRAY
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14682
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14602: LD_ADDR_EXP 43
14606: PUSH
14607: LD_EXP 43
14611: PPUSH
14612: LD_EXP 43
14616: PUSH
14617: LD_INT 1
14619: PLUS
14620: PPUSH
14621: LD_LOC 2
14625: PUSH
14626: LD_INT 14
14628: PUSH
14629: LD_INT 1
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 27
14637: PUSH
14638: LD_INT 25
14640: PUSH
14641: LD_INT 28
14643: PUSH
14644: LD_INT 26
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 1
14655: PPUSH
14656: LD_INT 4
14658: PPUSH
14659: CALL_OW 12
14663: ARRAY
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PPUSH
14675: CALL_OW 1
14679: ST_TO_ADDR
// end ;
14680: GO 14599
14682: POP
14683: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14684: LD_INT 21000
14686: PUSH
14687: LD_INT 18900
14689: PUSH
14690: LD_INT 16800
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: LD_OWVAR 67
14702: ARRAY
14703: PPUSH
14704: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14708: LD_ADDR_VAR 0 1
14712: PUSH
14713: DOUBLE
14714: LD_INT 1
14716: DEC
14717: ST_TO_ADDR
14718: LD_INT 5
14720: PUSH
14721: LD_INT 6
14723: PUSH
14724: LD_INT 7
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: LIST
14731: PUSH
14732: LD_OWVAR 67
14736: ARRAY
14737: PUSH
14738: FOR_TO
14739: IFFALSE 14840
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14741: LD_ADDR_EXP 43
14745: PUSH
14746: LD_EXP 43
14750: PPUSH
14751: LD_EXP 43
14755: PUSH
14756: LD_INT 1
14758: PLUS
14759: PPUSH
14760: LD_LOC 1
14764: PUSH
14765: LD_INT 14
14767: PUSH
14768: LD_INT 3
14770: PUSH
14771: LD_INT 1
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_INT 2
14783: PPUSH
14784: CALL_OW 12
14788: ARRAY
14789: PUSH
14790: LD_INT 2
14792: PUSH
14793: LD_INT 27
14795: PUSH
14796: LD_INT 25
14798: PUSH
14799: LD_INT 28
14801: PUSH
14802: LD_INT 29
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 1
14813: PPUSH
14814: LD_INT 4
14816: PPUSH
14817: CALL_OW 12
14821: ARRAY
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 1
14837: ST_TO_ADDR
// end ;
14838: GO 14738
14840: POP
14841: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14842: LD_ADDR_VAR 0 1
14846: PUSH
14847: DOUBLE
14848: LD_INT 1
14850: DEC
14851: ST_TO_ADDR
14852: LD_INT 4
14854: PUSH
14855: LD_INT 5
14857: PUSH
14858: LD_INT 6
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: LD_OWVAR 67
14870: ARRAY
14871: PUSH
14872: FOR_TO
14873: IFFALSE 14955
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14875: LD_ADDR_EXP 43
14879: PUSH
14880: LD_EXP 43
14884: PPUSH
14885: LD_EXP 43
14889: PUSH
14890: LD_INT 1
14892: PLUS
14893: PPUSH
14894: LD_LOC 2
14898: PUSH
14899: LD_INT 14
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: LD_INT 2
14907: PUSH
14908: LD_INT 27
14910: PUSH
14911: LD_INT 25
14913: PUSH
14914: LD_INT 28
14916: PUSH
14917: LD_INT 26
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: LD_INT 1
14928: PPUSH
14929: LD_INT 4
14931: PPUSH
14932: CALL_OW 12
14936: ARRAY
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PPUSH
14948: CALL_OW 1
14952: ST_TO_ADDR
// end ;
14953: GO 14872
14955: POP
14956: POP
// until false ;
14957: LD_INT 0
14959: IFFALSE 14684
// end ;
14961: PPOPN 1
14963: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14964: LD_EXP 46
14968: PPUSH
14969: LD_INT 1
14971: PPUSH
14972: LD_LOC 1
14976: PPUSH
14977: LD_INT 2
14979: PPUSH
14980: CALL 59343 0 4
14984: IFFALSE 15153
14986: GO 14988
14988: DISABLE
14989: LD_INT 0
14991: PPUSH
14992: PPUSH
// begin enable ;
14993: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
14994: LD_ADDR_VAR 0 2
14998: PUSH
14999: LD_EXP 46
15003: PPUSH
15004: LD_INT 1
15006: PPUSH
15007: LD_LOC 1
15011: PPUSH
15012: LD_INT 2
15014: PPUSH
15015: CALL 59343 0 4
15019: ST_TO_ADDR
// if not tmp then
15020: LD_VAR 0 2
15024: NOT
15025: IFFALSE 15029
// exit ;
15027: GO 15153
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15029: LD_ADDR_VAR 0 1
15033: PUSH
15034: DOUBLE
15035: LD_EXP 46
15039: PPUSH
15040: CALL 19054 0 1
15044: INC
15045: ST_TO_ADDR
15046: LD_INT 1
15048: PUSH
15049: FOR_DOWNTO
15050: IFFALSE 15096
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15052: LD_EXP 46
15056: PUSH
15057: LD_VAR 0 1
15061: ARRAY
15062: PUSH
15063: LD_INT 2
15065: ARRAY
15066: PUSH
15067: LD_VAR 0 2
15071: IN
15072: IFFALSE 15094
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15074: LD_ADDR_EXP 46
15078: PUSH
15079: LD_EXP 46
15083: PPUSH
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL_OW 3
15093: ST_TO_ADDR
15094: GO 15049
15096: POP
15097: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
15098: LD_VAR 0 2
15102: PPUSH
15103: LD_INT 164
15105: PUSH
15106: LD_INT 40
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 174
15115: PUSH
15116: LD_INT 72
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: LD_INT 174
15125: PUSH
15126: LD_INT 93
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 196
15135: PUSH
15136: LD_INT 110
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: PPUSH
15149: CALL 15348 0 2
// end ;
15153: PPOPN 2
15155: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
15156: LD_EXP 46
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: LD_LOC 2
15168: PPUSH
15169: LD_INT 2
15171: PPUSH
15172: CALL 59343 0 4
15176: IFFALSE 15345
15178: GO 15180
15180: DISABLE
15181: LD_INT 0
15183: PPUSH
15184: PPUSH
// begin enable ;
15185: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15186: LD_ADDR_VAR 0 2
15190: PUSH
15191: LD_EXP 46
15195: PPUSH
15196: LD_INT 1
15198: PPUSH
15199: LD_LOC 2
15203: PPUSH
15204: LD_INT 2
15206: PPUSH
15207: CALL 59343 0 4
15211: ST_TO_ADDR
// if not tmp then
15212: LD_VAR 0 2
15216: NOT
15217: IFFALSE 15221
// exit ;
15219: GO 15345
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15221: LD_ADDR_VAR 0 1
15225: PUSH
15226: DOUBLE
15227: LD_EXP 46
15231: PPUSH
15232: CALL 19054 0 1
15236: INC
15237: ST_TO_ADDR
15238: LD_INT 1
15240: PUSH
15241: FOR_DOWNTO
15242: IFFALSE 15288
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15244: LD_EXP 46
15248: PUSH
15249: LD_VAR 0 1
15253: ARRAY
15254: PUSH
15255: LD_INT 2
15257: ARRAY
15258: PUSH
15259: LD_VAR 0 2
15263: IN
15264: IFFALSE 15286
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15266: LD_ADDR_EXP 46
15270: PUSH
15271: LD_EXP 46
15275: PPUSH
15276: LD_VAR 0 1
15280: PPUSH
15281: CALL_OW 3
15285: ST_TO_ADDR
15286: GO 15241
15288: POP
15289: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15290: LD_VAR 0 2
15294: PPUSH
15295: LD_INT 49
15297: PUSH
15298: LD_INT 37
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 54
15307: PUSH
15308: LD_INT 68
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 77
15317: PUSH
15318: LD_INT 91
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 95
15327: PUSH
15328: LD_INT 104
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL 15348 0 2
// end ;
15345: PPOPN 2
15347: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
// repeat wait ( 0 0$1 ) ;
15352: LD_INT 35
15354: PPUSH
15355: CALL_OW 67
// for i in attackers do
15359: LD_ADDR_VAR 0 4
15363: PUSH
15364: LD_VAR 0 1
15368: PUSH
15369: FOR_IN
15370: IFFALSE 15452
// begin if not IsOk ( i ) then
15372: LD_VAR 0 4
15376: PPUSH
15377: CALL_OW 302
15381: NOT
15382: IFFALSE 15413
// begin ComUnlink ( i ) ;
15384: LD_VAR 0 4
15388: PPUSH
15389: CALL_OW 136
// attackers := attackers diff i ;
15393: LD_ADDR_VAR 0 1
15397: PUSH
15398: LD_VAR 0 1
15402: PUSH
15403: LD_VAR 0 4
15407: DIFF
15408: ST_TO_ADDR
// continue ;
15409: GO 15369
// end else
15411: GO 15450
// if not IsControledBy ( i ) then
15413: LD_VAR 0 4
15417: PPUSH
15418: CALL_OW 312
15422: NOT
15423: IFFALSE 15436
// Connect ( i ) else
15425: LD_VAR 0 4
15429: PPUSH
15430: CALL 25260 0 1
15434: GO 15450
// AgressiveMove ( i , path ) ;
15436: LD_VAR 0 4
15440: PPUSH
15441: LD_VAR 0 2
15445: PPUSH
15446: CALL 57267 0 2
// end ;
15450: GO 15369
15452: POP
15453: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15454: LD_VAR 0 1
15458: PPUSH
15459: LD_INT 50
15461: PUSH
15462: EMPTY
15463: LIST
15464: PPUSH
15465: CALL_OW 72
15469: NOT
15470: IFFALSE 15352
// end ;
15472: LD_VAR 0 3
15476: RET
// every 0 0$10 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and FilterAllUnits ( [ [ f_side , side_bot ] , [ f_ok ] , [ f_not , [ f_empty ] ] , [ f_weapon , ar_control_tower ] ] ) do var i , un , tmp , enemy ;
15477: LD_INT 7
15479: PPUSH
15480: CALL_OW 302
15484: NOT
15485: PUSH
15486: LD_INT 7
15488: PPUSH
15489: CALL_OW 255
15493: PUSH
15494: LD_EXP 3
15498: NONEQUAL
15499: OR
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_EXP 3
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 50
15515: PUSH
15516: EMPTY
15517: LIST
15518: PUSH
15519: LD_INT 3
15521: PUSH
15522: LD_INT 58
15524: PUSH
15525: EMPTY
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 34
15534: PUSH
15535: LD_INT 31
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: PPUSH
15548: CALL_OW 69
15552: AND
15553: IFFALSE 15947
15555: GO 15557
15557: DISABLE
15558: LD_INT 0
15560: PPUSH
15561: PPUSH
15562: PPUSH
15563: PPUSH
// begin for i := 1 to 3 do
15564: LD_ADDR_VAR 0 1
15568: PUSH
15569: DOUBLE
15570: LD_INT 1
15572: DEC
15573: ST_TO_ADDR
15574: LD_INT 3
15576: PUSH
15577: FOR_TO
15578: IFFALSE 15739
// begin uc_side := 2 ;
15580: LD_ADDR_OWVAR 20
15584: PUSH
15585: LD_INT 2
15587: ST_TO_ADDR
// uc_nation := nation_arabian ;
15588: LD_ADDR_OWVAR 21
15592: PUSH
15593: LD_INT 2
15595: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15596: LD_INT 11
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: LD_INT 2
15604: PPUSH
15605: LD_INT 24
15607: PUSH
15608: LD_INT 23
15610: PUSH
15611: LD_INT 92
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 1
15621: PPUSH
15622: LD_INT 3
15624: PPUSH
15625: CALL_OW 12
15629: ARRAY
15630: PPUSH
15631: LD_INT 100
15633: PPUSH
15634: CALL 21792 0 5
// un := CreateVehicle ;
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: CALL_OW 45
15647: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15648: LD_VAR 0 2
15652: PPUSH
15653: LD_INT 2
15655: PPUSH
15656: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15660: LD_VAR 0 2
15664: PPUSH
15665: LD_INT 47
15667: PPUSH
15668: LD_INT 0
15670: PPUSH
15671: CALL_OW 49
// repeat Connect ( un ) ;
15675: LD_VAR 0 2
15679: PPUSH
15680: CALL 25260 0 1
// wait ( 0 0$0.3 ) ;
15684: LD_INT 10
15686: PPUSH
15687: CALL_OW 67
// until IsControledBy ( un ) ;
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 312
15700: IFFALSE 15675
// ComMoveXY ( un , 73 , 17 ) ;
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_INT 73
15709: PPUSH
15710: LD_INT 17
15712: PPUSH
15713: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15717: LD_ADDR_VAR 0 3
15721: PUSH
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_VAR 0 2
15731: PPUSH
15732: CALL 54663 0 2
15736: ST_TO_ADDR
// end ;
15737: GO 15577
15739: POP
15740: POP
// repeat wait ( 0 0$1 ) ;
15741: LD_INT 35
15743: PPUSH
15744: CALL_OW 67
// for i in tmp do
15748: LD_ADDR_VAR 0 1
15752: PUSH
15753: LD_VAR 0 3
15757: PUSH
15758: FOR_IN
15759: IFFALSE 15920
// begin if not IsOk ( i ) then
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 302
15770: NOT
15771: IFFALSE 15800
// begin ComAutodestruct ( i ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL 50155 0 1
// tmp := tmp diff i ;
15782: LD_ADDR_VAR 0 3
15786: PUSH
15787: LD_VAR 0 3
15791: PUSH
15792: LD_VAR 0 1
15796: DIFF
15797: ST_TO_ADDR
// continue ;
15798: GO 15758
// end ; if GetLives ( i ) < 750 then
15800: LD_VAR 0 1
15804: PPUSH
15805: CALL_OW 256
15809: PUSH
15810: LD_INT 750
15812: LESS
15813: IFFALSE 15874
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15815: LD_ADDR_VAR 0 4
15819: PUSH
15820: LD_INT 81
15822: PUSH
15823: LD_VAR 0 1
15827: PPUSH
15828: CALL_OW 255
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: PPUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 74
15851: ST_TO_ADDR
// if enemy then
15852: LD_VAR 0 4
15856: IFFALSE 15872
// ComMoveUnit ( i , enemy ) ;
15858: LD_VAR 0 1
15862: PPUSH
15863: LD_VAR 0 4
15867: PPUSH
15868: CALL_OW 112
// end else
15872: GO 15918
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15874: LD_VAR 0 1
15878: PPUSH
15879: LD_INT 76
15881: PUSH
15882: LD_INT 31
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 93
15891: PUSH
15892: LD_INT 67
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 108
15901: PUSH
15902: LD_INT 97
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL 57267 0 2
// end ;
15918: GO 15758
15920: POP
15921: POP
// until not tmp ;
15922: LD_VAR 0 3
15926: NOT
15927: IFFALSE 15741
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
15929: LD_INT 16800
15931: PUSH
15932: LD_INT 2100
15934: PUSH
15935: LD_OWVAR 67
15939: MUL
15940: MINUS
15941: PPUSH
15942: CALL_OW 67
// enable ;
15946: ENABLE
// end ;
15947: PPOPN 4
15949: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15950: LD_INT 7
15952: PPUSH
15953: CALL_OW 302
15957: NOT
15958: PUSH
15959: LD_INT 7
15961: PPUSH
15962: CALL_OW 255
15966: PUSH
15967: LD_EXP 3
15971: NONEQUAL
15972: OR
15973: PUSH
15974: LD_INT 45
15976: PPUSH
15977: CALL_OW 302
15981: PUSH
15982: LD_INT 45
15984: PPUSH
15985: CALL_OW 255
15989: PUSH
15990: LD_EXP 3
15994: EQUAL
15995: AND
15996: AND
15997: IFFALSE 16354
15999: GO 16001
16001: DISABLE
16002: LD_INT 0
16004: PPUSH
16005: PPUSH
16006: PPUSH
16007: PPUSH
// begin enable ;
16008: ENABLE
// for i := 1 to 3 do
16009: LD_ADDR_VAR 0 1
16013: PUSH
16014: DOUBLE
16015: LD_INT 1
16017: DEC
16018: ST_TO_ADDR
16019: LD_INT 3
16021: PUSH
16022: FOR_TO
16023: IFFALSE 16164
// begin uc_side := 2 ;
16025: LD_ADDR_OWVAR 20
16029: PUSH
16030: LD_INT 2
16032: ST_TO_ADDR
// uc_nation := nation_arabian ;
16033: LD_ADDR_OWVAR 21
16037: PUSH
16038: LD_INT 2
16040: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
16041: LD_INT 11
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: LD_INT 5
16049: PPUSH
16050: LD_INT 24
16052: PUSH
16053: LD_INT 23
16055: PUSH
16056: LD_INT 92
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 1
16066: PPUSH
16067: LD_INT 3
16069: PPUSH
16070: CALL_OW 12
16074: ARRAY
16075: PPUSH
16076: LD_INT 100
16078: PPUSH
16079: CALL 21792 0 5
// un := CreateVehicle ;
16083: LD_ADDR_VAR 0 2
16087: PUSH
16088: CALL_OW 45
16092: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16093: LD_VAR 0 2
16097: PPUSH
16098: LD_INT 2
16100: PPUSH
16101: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
16105: LD_VAR 0 2
16109: PPUSH
16110: LD_INT 47
16112: PPUSH
16113: LD_INT 0
16115: PPUSH
16116: CALL_OW 49
// wait ( 0 0$0.3 ) ;
16120: LD_INT 10
16122: PPUSH
16123: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
16127: LD_VAR 0 2
16131: PPUSH
16132: LD_INT 73
16134: PPUSH
16135: LD_INT 17
16137: PPUSH
16138: CALL_OW 111
// tmp := Join ( tmp , un ) ;
16142: LD_ADDR_VAR 0 3
16146: PUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: LD_VAR 0 2
16156: PPUSH
16157: CALL 54663 0 2
16161: ST_TO_ADDR
// end ;
16162: GO 16022
16164: POP
16165: POP
// repeat wait ( 0 0$1 ) ;
16166: LD_INT 35
16168: PPUSH
16169: CALL_OW 67
// for i in tmp do
16173: LD_ADDR_VAR 0 1
16177: PUSH
16178: LD_VAR 0 3
16182: PUSH
16183: FOR_IN
16184: IFFALSE 16345
// begin if not IsOk ( i ) then
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 302
16195: NOT
16196: IFFALSE 16225
// begin ComAutodestruct ( i ) ;
16198: LD_VAR 0 1
16202: PPUSH
16203: CALL 50155 0 1
// tmp := tmp diff i ;
16207: LD_ADDR_VAR 0 3
16211: PUSH
16212: LD_VAR 0 3
16216: PUSH
16217: LD_VAR 0 1
16221: DIFF
16222: ST_TO_ADDR
// continue ;
16223: GO 16183
// end ; if GetLives ( i ) < 750 then
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 256
16234: PUSH
16235: LD_INT 750
16237: LESS
16238: IFFALSE 16299
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16240: LD_ADDR_VAR 0 4
16244: PUSH
16245: LD_INT 81
16247: PUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 255
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PPUSH
16262: CALL_OW 69
16266: PPUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 74
16276: ST_TO_ADDR
// if enemy then
16277: LD_VAR 0 4
16281: IFFALSE 16297
// ComMoveUnit ( i , enemy ) ;
16283: LD_VAR 0 1
16287: PPUSH
16288: LD_VAR 0 4
16292: PPUSH
16293: CALL_OW 112
// end else
16297: GO 16343
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16299: LD_VAR 0 1
16303: PPUSH
16304: LD_INT 76
16306: PUSH
16307: LD_INT 31
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 93
16316: PUSH
16317: LD_INT 67
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 108
16326: PUSH
16327: LD_INT 97
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL 57267 0 2
// end ;
16343: GO 16183
16345: POP
16346: POP
// until not tmp ;
16347: LD_VAR 0 3
16351: NOT
16352: IFFALSE 16166
// end ;
16354: PPOPN 4
16356: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16357: LD_INT 69
16359: PPUSH
16360: CALL_OW 302
16364: NOT
16365: PUSH
16366: LD_INT 69
16368: PPUSH
16369: CALL_OW 255
16373: PUSH
16374: LD_EXP 3
16378: NONEQUAL
16379: OR
16380: IFFALSE 16641
16382: GO 16384
16384: DISABLE
16385: LD_INT 0
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16391: LD_ADDR_VAR 0 1
16395: PUSH
16396: DOUBLE
16397: LD_INT 1
16399: DEC
16400: ST_TO_ADDR
16401: LD_INT 2
16403: PUSH
16404: LD_INT 3
16406: PUSH
16407: LD_INT 4
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: LD_OWVAR 67
16419: ARRAY
16420: PUSH
16421: FOR_TO
16422: IFFALSE 16513
// begin uc_side := side_bot ;
16424: LD_ADDR_OWVAR 20
16428: PUSH
16429: LD_EXP 3
16433: ST_TO_ADDR
// uc_nation := nation_nature ;
16434: LD_ADDR_OWVAR 21
16438: PUSH
16439: LD_INT 0
16441: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16442: CALL 50753 0 0
// hc_class := class_apeman_kamikaze ;
16446: LD_ADDR_OWVAR 28
16450: PUSH
16451: LD_INT 17
16453: ST_TO_ADDR
// un := CreateHuman ;
16454: LD_ADDR_VAR 0 2
16458: PUSH
16459: CALL_OW 44
16463: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16464: LD_VAR 0 2
16468: PPUSH
16469: LD_INT 4
16471: PPUSH
16472: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16476: LD_VAR 0 2
16480: PPUSH
16481: LD_INT 48
16483: PPUSH
16484: LD_INT 0
16486: PPUSH
16487: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16491: LD_ADDR_VAR 0 3
16495: PUSH
16496: LD_VAR 0 3
16500: PPUSH
16501: LD_VAR 0 2
16505: PPUSH
16506: CALL 54663 0 2
16510: ST_TO_ADDR
// end ;
16511: GO 16421
16513: POP
16514: POP
// repeat wait ( 0 0$1 ) ;
16515: LD_INT 35
16517: PPUSH
16518: CALL_OW 67
// for i in tmp do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 3
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16624
// begin if not IsOk ( i ) then
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 302
16544: NOT
16545: IFFALSE 16565
// begin tmp := tmp diff i ;
16547: LD_ADDR_VAR 0 3
16551: PUSH
16552: LD_VAR 0 3
16556: PUSH
16557: LD_VAR 0 1
16561: DIFF
16562: ST_TO_ADDR
// continue ;
16563: GO 16532
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16565: LD_ADDR_VAR 0 4
16569: PUSH
16570: LD_INT 81
16572: PUSH
16573: LD_VAR 0 1
16577: PPUSH
16578: CALL_OW 255
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PPUSH
16587: CALL_OW 69
16591: PPUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 74
16601: ST_TO_ADDR
// if enemy then
16602: LD_VAR 0 4
16606: IFFALSE 16622
// ComAttackUnit ( i , enemy ) ;
16608: LD_VAR 0 1
16612: PPUSH
16613: LD_VAR 0 4
16617: PPUSH
16618: CALL_OW 115
// end ;
16622: GO 16532
16624: POP
16625: POP
// until not tmp ;
16626: LD_VAR 0 3
16630: NOT
16631: IFFALSE 16515
// wait ( 10 10$00 ) ;
16633: LD_INT 21000
16635: PPUSH
16636: CALL_OW 67
// enable ;
16640: ENABLE
// end ;
16641: PPOPN 4
16643: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16644: LD_INT 45
16646: PPUSH
16647: CALL_OW 302
16651: NOT
16652: PUSH
16653: LD_INT 45
16655: PPUSH
16656: CALL_OW 255
16660: PUSH
16661: LD_EXP 3
16665: NONEQUAL
16666: OR
16667: IFFALSE 16928
16669: GO 16671
16671: DISABLE
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16678: LD_ADDR_VAR 0 1
16682: PUSH
16683: DOUBLE
16684: LD_INT 1
16686: DEC
16687: ST_TO_ADDR
16688: LD_INT 2
16690: PUSH
16691: LD_INT 3
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: PUSH
16702: LD_OWVAR 67
16706: ARRAY
16707: PUSH
16708: FOR_TO
16709: IFFALSE 16800
// begin uc_side := side_bot ;
16711: LD_ADDR_OWVAR 20
16715: PUSH
16716: LD_EXP 3
16720: ST_TO_ADDR
// uc_nation := nation_nature ;
16721: LD_ADDR_OWVAR 21
16725: PUSH
16726: LD_INT 0
16728: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16729: CALL 50753 0 0
// hc_class := class_apeman_kamikaze ;
16733: LD_ADDR_OWVAR 28
16737: PUSH
16738: LD_INT 17
16740: ST_TO_ADDR
// un := CreateHuman ;
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: CALL_OW 44
16750: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16751: LD_VAR 0 2
16755: PPUSH
16756: LD_INT 2
16758: PPUSH
16759: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_INT 49
16770: PPUSH
16771: LD_INT 0
16773: PPUSH
16774: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16778: LD_ADDR_VAR 0 3
16782: PUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_VAR 0 2
16792: PPUSH
16793: CALL 54663 0 2
16797: ST_TO_ADDR
// end ;
16798: GO 16708
16800: POP
16801: POP
// repeat wait ( 0 0$1 ) ;
16802: LD_INT 35
16804: PPUSH
16805: CALL_OW 67
// for i in tmp do
16809: LD_ADDR_VAR 0 1
16813: PUSH
16814: LD_VAR 0 3
16818: PUSH
16819: FOR_IN
16820: IFFALSE 16911
// begin if not IsOk ( i ) then
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 302
16831: NOT
16832: IFFALSE 16852
// begin tmp := tmp diff i ;
16834: LD_ADDR_VAR 0 3
16838: PUSH
16839: LD_VAR 0 3
16843: PUSH
16844: LD_VAR 0 1
16848: DIFF
16849: ST_TO_ADDR
// continue ;
16850: GO 16819
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16852: LD_ADDR_VAR 0 4
16856: PUSH
16857: LD_INT 81
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PPUSH
16874: CALL_OW 69
16878: PPUSH
16879: LD_VAR 0 1
16883: PPUSH
16884: CALL_OW 74
16888: ST_TO_ADDR
// if enemy then
16889: LD_VAR 0 4
16893: IFFALSE 16909
// ComAttackUnit ( i , enemy ) ;
16895: LD_VAR 0 1
16899: PPUSH
16900: LD_VAR 0 4
16904: PPUSH
16905: CALL_OW 115
// end ;
16909: GO 16819
16911: POP
16912: POP
// until not tmp ;
16913: LD_VAR 0 3
16917: NOT
16918: IFFALSE 16802
// wait ( 10 10$00 ) ;
16920: LD_INT 21000
16922: PPUSH
16923: CALL_OW 67
// enable ;
16927: ENABLE
// end ; end_of_file
16928: PPOPN 4
16930: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16931: LD_INT 0
16933: PPUSH
16934: PPUSH
// if exist_mode then
16935: LD_VAR 0 2
16939: IFFALSE 16985
// begin unit := CreateCharacter ( prefix & ident ) ;
16941: LD_ADDR_VAR 0 5
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_VAR 0 1
16955: STR
16956: PPUSH
16957: CALL_OW 34
16961: ST_TO_ADDR
// if unit then
16962: LD_VAR 0 5
16966: IFFALSE 16983
// DeleteCharacters ( prefix & ident ) ;
16968: LD_VAR 0 3
16972: PUSH
16973: LD_VAR 0 1
16977: STR
16978: PPUSH
16979: CALL_OW 40
// end else
16983: GO 17000
// unit := NewCharacter ( ident ) ;
16985: LD_ADDR_VAR 0 5
16989: PUSH
16990: LD_VAR 0 1
16994: PPUSH
16995: CALL_OW 25
16999: ST_TO_ADDR
// result := unit ;
17000: LD_ADDR_VAR 0 4
17004: PUSH
17005: LD_VAR 0 5
17009: ST_TO_ADDR
// end ;
17010: LD_VAR 0 4
17014: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17015: LD_INT 0
17017: PPUSH
17018: PPUSH
// if not side or not nation then
17019: LD_VAR 0 1
17023: NOT
17024: PUSH
17025: LD_VAR 0 2
17029: NOT
17030: OR
17031: IFFALSE 17035
// exit ;
17033: GO 17803
// case nation of nation_american :
17035: LD_VAR 0 2
17039: PUSH
17040: LD_INT 1
17042: DOUBLE
17043: EQUAL
17044: IFTRUE 17048
17046: GO 17262
17048: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17049: LD_ADDR_VAR 0 4
17053: PUSH
17054: LD_INT 35
17056: PUSH
17057: LD_INT 45
17059: PUSH
17060: LD_INT 46
17062: PUSH
17063: LD_INT 47
17065: PUSH
17066: LD_INT 82
17068: PUSH
17069: LD_INT 83
17071: PUSH
17072: LD_INT 84
17074: PUSH
17075: LD_INT 85
17077: PUSH
17078: LD_INT 86
17080: PUSH
17081: LD_INT 1
17083: PUSH
17084: LD_INT 2
17086: PUSH
17087: LD_INT 6
17089: PUSH
17090: LD_INT 15
17092: PUSH
17093: LD_INT 16
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: LD_INT 12
17101: PUSH
17102: LD_INT 13
17104: PUSH
17105: LD_INT 10
17107: PUSH
17108: LD_INT 14
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: LD_INT 21
17116: PUSH
17117: LD_INT 22
17119: PUSH
17120: LD_INT 25
17122: PUSH
17123: LD_INT 32
17125: PUSH
17126: LD_INT 27
17128: PUSH
17129: LD_INT 36
17131: PUSH
17132: LD_INT 69
17134: PUSH
17135: LD_INT 39
17137: PUSH
17138: LD_INT 34
17140: PUSH
17141: LD_INT 40
17143: PUSH
17144: LD_INT 48
17146: PUSH
17147: LD_INT 49
17149: PUSH
17150: LD_INT 50
17152: PUSH
17153: LD_INT 51
17155: PUSH
17156: LD_INT 52
17158: PUSH
17159: LD_INT 53
17161: PUSH
17162: LD_INT 54
17164: PUSH
17165: LD_INT 55
17167: PUSH
17168: LD_INT 56
17170: PUSH
17171: LD_INT 57
17173: PUSH
17174: LD_INT 58
17176: PUSH
17177: LD_INT 59
17179: PUSH
17180: LD_INT 60
17182: PUSH
17183: LD_INT 61
17185: PUSH
17186: LD_INT 62
17188: PUSH
17189: LD_INT 80
17191: PUSH
17192: LD_INT 82
17194: PUSH
17195: LD_INT 83
17197: PUSH
17198: LD_INT 84
17200: PUSH
17201: LD_INT 85
17203: PUSH
17204: LD_INT 86
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: ST_TO_ADDR
17260: GO 17727
17262: LD_INT 2
17264: DOUBLE
17265: EQUAL
17266: IFTRUE 17270
17268: GO 17496
17270: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17271: LD_ADDR_VAR 0 4
17275: PUSH
17276: LD_INT 35
17278: PUSH
17279: LD_INT 45
17281: PUSH
17282: LD_INT 46
17284: PUSH
17285: LD_INT 47
17287: PUSH
17288: LD_INT 82
17290: PUSH
17291: LD_INT 83
17293: PUSH
17294: LD_INT 84
17296: PUSH
17297: LD_INT 85
17299: PUSH
17300: LD_INT 87
17302: PUSH
17303: LD_INT 70
17305: PUSH
17306: LD_INT 1
17308: PUSH
17309: LD_INT 11
17311: PUSH
17312: LD_INT 3
17314: PUSH
17315: LD_INT 4
17317: PUSH
17318: LD_INT 5
17320: PUSH
17321: LD_INT 6
17323: PUSH
17324: LD_INT 15
17326: PUSH
17327: LD_INT 18
17329: PUSH
17330: LD_INT 7
17332: PUSH
17333: LD_INT 17
17335: PUSH
17336: LD_INT 8
17338: PUSH
17339: LD_INT 20
17341: PUSH
17342: LD_INT 21
17344: PUSH
17345: LD_INT 22
17347: PUSH
17348: LD_INT 72
17350: PUSH
17351: LD_INT 26
17353: PUSH
17354: LD_INT 69
17356: PUSH
17357: LD_INT 39
17359: PUSH
17360: LD_INT 40
17362: PUSH
17363: LD_INT 41
17365: PUSH
17366: LD_INT 42
17368: PUSH
17369: LD_INT 43
17371: PUSH
17372: LD_INT 48
17374: PUSH
17375: LD_INT 49
17377: PUSH
17378: LD_INT 50
17380: PUSH
17381: LD_INT 51
17383: PUSH
17384: LD_INT 52
17386: PUSH
17387: LD_INT 53
17389: PUSH
17390: LD_INT 54
17392: PUSH
17393: LD_INT 55
17395: PUSH
17396: LD_INT 56
17398: PUSH
17399: LD_INT 60
17401: PUSH
17402: LD_INT 61
17404: PUSH
17405: LD_INT 62
17407: PUSH
17408: LD_INT 66
17410: PUSH
17411: LD_INT 67
17413: PUSH
17414: LD_INT 68
17416: PUSH
17417: LD_INT 81
17419: PUSH
17420: LD_INT 82
17422: PUSH
17423: LD_INT 83
17425: PUSH
17426: LD_INT 84
17428: PUSH
17429: LD_INT 85
17431: PUSH
17432: LD_INT 87
17434: PUSH
17435: LD_INT 88
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: ST_TO_ADDR
17494: GO 17727
17496: LD_INT 3
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 17726
17504: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17505: LD_ADDR_VAR 0 4
17509: PUSH
17510: LD_INT 46
17512: PUSH
17513: LD_INT 47
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 82
17524: PUSH
17525: LD_INT 83
17527: PUSH
17528: LD_INT 84
17530: PUSH
17531: LD_INT 85
17533: PUSH
17534: LD_INT 86
17536: PUSH
17537: LD_INT 11
17539: PUSH
17540: LD_INT 9
17542: PUSH
17543: LD_INT 20
17545: PUSH
17546: LD_INT 19
17548: PUSH
17549: LD_INT 21
17551: PUSH
17552: LD_INT 24
17554: PUSH
17555: LD_INT 22
17557: PUSH
17558: LD_INT 25
17560: PUSH
17561: LD_INT 28
17563: PUSH
17564: LD_INT 29
17566: PUSH
17567: LD_INT 30
17569: PUSH
17570: LD_INT 31
17572: PUSH
17573: LD_INT 37
17575: PUSH
17576: LD_INT 38
17578: PUSH
17579: LD_INT 32
17581: PUSH
17582: LD_INT 27
17584: PUSH
17585: LD_INT 33
17587: PUSH
17588: LD_INT 69
17590: PUSH
17591: LD_INT 39
17593: PUSH
17594: LD_INT 34
17596: PUSH
17597: LD_INT 40
17599: PUSH
17600: LD_INT 71
17602: PUSH
17603: LD_INT 23
17605: PUSH
17606: LD_INT 44
17608: PUSH
17609: LD_INT 48
17611: PUSH
17612: LD_INT 49
17614: PUSH
17615: LD_INT 50
17617: PUSH
17618: LD_INT 51
17620: PUSH
17621: LD_INT 52
17623: PUSH
17624: LD_INT 53
17626: PUSH
17627: LD_INT 54
17629: PUSH
17630: LD_INT 55
17632: PUSH
17633: LD_INT 56
17635: PUSH
17636: LD_INT 57
17638: PUSH
17639: LD_INT 58
17641: PUSH
17642: LD_INT 59
17644: PUSH
17645: LD_INT 63
17647: PUSH
17648: LD_INT 64
17650: PUSH
17651: LD_INT 65
17653: PUSH
17654: LD_INT 82
17656: PUSH
17657: LD_INT 83
17659: PUSH
17660: LD_INT 84
17662: PUSH
17663: LD_INT 85
17665: PUSH
17666: LD_INT 86
17668: PUSH
17669: EMPTY
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: ST_TO_ADDR
17724: GO 17727
17726: POP
// if state > - 1 and state < 3 then
17727: LD_VAR 0 3
17731: PUSH
17732: LD_INT 1
17734: NEG
17735: GREATER
17736: PUSH
17737: LD_VAR 0 3
17741: PUSH
17742: LD_INT 3
17744: LESS
17745: AND
17746: IFFALSE 17803
// for i in result do
17748: LD_ADDR_VAR 0 5
17752: PUSH
17753: LD_VAR 0 4
17757: PUSH
17758: FOR_IN
17759: IFFALSE 17801
// if GetTech ( i , side ) <> state then
17761: LD_VAR 0 5
17765: PPUSH
17766: LD_VAR 0 1
17770: PPUSH
17771: CALL_OW 321
17775: PUSH
17776: LD_VAR 0 3
17780: NONEQUAL
17781: IFFALSE 17799
// result := result diff i ;
17783: LD_ADDR_VAR 0 4
17787: PUSH
17788: LD_VAR 0 4
17792: PUSH
17793: LD_VAR 0 5
17797: DIFF
17798: ST_TO_ADDR
17799: GO 17758
17801: POP
17802: POP
// end ;
17803: LD_VAR 0 4
17807: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17808: LD_INT 0
17810: PPUSH
17811: PPUSH
17812: PPUSH
// result := true ;
17813: LD_ADDR_VAR 0 3
17817: PUSH
17818: LD_INT 1
17820: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17821: LD_ADDR_VAR 0 5
17825: PUSH
17826: LD_VAR 0 2
17830: PPUSH
17831: CALL_OW 480
17835: ST_TO_ADDR
// if not tmp then
17836: LD_VAR 0 5
17840: NOT
17841: IFFALSE 17845
// exit ;
17843: GO 17894
// for i in tmp do
17845: LD_ADDR_VAR 0 4
17849: PUSH
17850: LD_VAR 0 5
17854: PUSH
17855: FOR_IN
17856: IFFALSE 17892
// if GetTech ( i , side ) <> state_researched then
17858: LD_VAR 0 4
17862: PPUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: CALL_OW 321
17872: PUSH
17873: LD_INT 2
17875: NONEQUAL
17876: IFFALSE 17890
// begin result := false ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_INT 0
17885: ST_TO_ADDR
// exit ;
17886: POP
17887: POP
17888: GO 17894
// end ;
17890: GO 17855
17892: POP
17893: POP
// end ;
17894: LD_VAR 0 3
17898: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17899: LD_INT 0
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
17905: PPUSH
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
17911: PPUSH
17912: PPUSH
17913: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17914: LD_VAR 0 1
17918: NOT
17919: PUSH
17920: LD_VAR 0 1
17924: PPUSH
17925: CALL_OW 257
17929: PUSH
17930: LD_INT 9
17932: NONEQUAL
17933: OR
17934: IFFALSE 17938
// exit ;
17936: GO 18511
// side := GetSide ( unit ) ;
17938: LD_ADDR_VAR 0 9
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 255
17952: ST_TO_ADDR
// tech_space := tech_spacanom ;
17953: LD_ADDR_VAR 0 12
17957: PUSH
17958: LD_INT 29
17960: ST_TO_ADDR
// tech_time := tech_taurad ;
17961: LD_ADDR_VAR 0 13
17965: PUSH
17966: LD_INT 28
17968: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17969: LD_ADDR_VAR 0 11
17973: PUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 310
17983: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17984: LD_VAR 0 11
17988: PPUSH
17989: CALL_OW 247
17993: PUSH
17994: LD_INT 2
17996: EQUAL
17997: IFFALSE 18001
// exit ;
17999: GO 18511
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18001: LD_ADDR_VAR 0 8
18005: PUSH
18006: LD_INT 81
18008: PUSH
18009: LD_VAR 0 9
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: LD_INT 21
18023: PUSH
18024: LD_INT 3
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PPUSH
18039: CALL_OW 69
18043: ST_TO_ADDR
// if not tmp then
18044: LD_VAR 0 8
18048: NOT
18049: IFFALSE 18053
// exit ;
18051: GO 18511
// if in_unit then
18053: LD_VAR 0 11
18057: IFFALSE 18081
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18059: LD_ADDR_VAR 0 10
18063: PUSH
18064: LD_VAR 0 8
18068: PPUSH
18069: LD_VAR 0 11
18073: PPUSH
18074: CALL_OW 74
18078: ST_TO_ADDR
18079: GO 18101
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18081: LD_ADDR_VAR 0 10
18085: PUSH
18086: LD_VAR 0 8
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: CALL_OW 74
18100: ST_TO_ADDR
// if not enemy then
18101: LD_VAR 0 10
18105: NOT
18106: IFFALSE 18110
// exit ;
18108: GO 18511
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18110: LD_VAR 0 11
18114: PUSH
18115: LD_VAR 0 11
18119: PPUSH
18120: LD_VAR 0 10
18124: PPUSH
18125: CALL_OW 296
18129: PUSH
18130: LD_INT 13
18132: GREATER
18133: AND
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: LD_VAR 0 10
18144: PPUSH
18145: CALL_OW 296
18149: PUSH
18150: LD_INT 12
18152: GREATER
18153: OR
18154: IFFALSE 18158
// exit ;
18156: GO 18511
// missile := [ 1 ] ;
18158: LD_ADDR_VAR 0 14
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18169: LD_VAR 0 9
18173: PPUSH
18174: LD_VAR 0 12
18178: PPUSH
18179: CALL_OW 325
18183: IFFALSE 18212
// missile := Replace ( missile , missile + 1 , 2 ) ;
18185: LD_ADDR_VAR 0 14
18189: PUSH
18190: LD_VAR 0 14
18194: PPUSH
18195: LD_VAR 0 14
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: PPUSH
18204: LD_INT 2
18206: PPUSH
18207: CALL_OW 1
18211: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18212: LD_VAR 0 9
18216: PPUSH
18217: LD_VAR 0 13
18221: PPUSH
18222: CALL_OW 325
18226: PUSH
18227: LD_VAR 0 10
18231: PPUSH
18232: CALL_OW 255
18236: PPUSH
18237: LD_VAR 0 13
18241: PPUSH
18242: CALL_OW 325
18246: NOT
18247: AND
18248: IFFALSE 18277
// missile := Replace ( missile , missile + 1 , 3 ) ;
18250: LD_ADDR_VAR 0 14
18254: PUSH
18255: LD_VAR 0 14
18259: PPUSH
18260: LD_VAR 0 14
18264: PUSH
18265: LD_INT 1
18267: PLUS
18268: PPUSH
18269: LD_INT 3
18271: PPUSH
18272: CALL_OW 1
18276: ST_TO_ADDR
// if missile < 2 then
18277: LD_VAR 0 14
18281: PUSH
18282: LD_INT 2
18284: LESS
18285: IFFALSE 18289
// exit ;
18287: GO 18511
// x := GetX ( enemy ) ;
18289: LD_ADDR_VAR 0 4
18293: PUSH
18294: LD_VAR 0 10
18298: PPUSH
18299: CALL_OW 250
18303: ST_TO_ADDR
// y := GetY ( enemy ) ;
18304: LD_ADDR_VAR 0 5
18308: PUSH
18309: LD_VAR 0 10
18313: PPUSH
18314: CALL_OW 251
18318: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18319: LD_ADDR_VAR 0 6
18323: PUSH
18324: LD_VAR 0 4
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PPUSH
18333: LD_INT 1
18335: PPUSH
18336: CALL_OW 12
18340: PLUS
18341: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18342: LD_ADDR_VAR 0 7
18346: PUSH
18347: LD_VAR 0 5
18351: PUSH
18352: LD_INT 1
18354: NEG
18355: PPUSH
18356: LD_INT 1
18358: PPUSH
18359: CALL_OW 12
18363: PLUS
18364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18365: LD_VAR 0 6
18369: PPUSH
18370: LD_VAR 0 7
18374: PPUSH
18375: CALL_OW 488
18379: NOT
18380: IFFALSE 18402
// begin _x := x ;
18382: LD_ADDR_VAR 0 6
18386: PUSH
18387: LD_VAR 0 4
18391: ST_TO_ADDR
// _y := y ;
18392: LD_ADDR_VAR 0 7
18396: PUSH
18397: LD_VAR 0 5
18401: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18402: LD_ADDR_VAR 0 3
18406: PUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_VAR 0 14
18414: PPUSH
18415: CALL_OW 12
18419: ST_TO_ADDR
// case i of 1 :
18420: LD_VAR 0 3
18424: PUSH
18425: LD_INT 1
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18450
18433: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_VAR 0 10
18443: PPUSH
18444: CALL_OW 115
18448: GO 18511
18450: LD_INT 2
18452: DOUBLE
18453: EQUAL
18454: IFTRUE 18458
18456: GO 18480
18458: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18459: LD_VAR 0 1
18463: PPUSH
18464: LD_VAR 0 6
18468: PPUSH
18469: LD_VAR 0 7
18473: PPUSH
18474: CALL_OW 153
18478: GO 18511
18480: LD_INT 3
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18510
18488: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18489: LD_VAR 0 1
18493: PPUSH
18494: LD_VAR 0 6
18498: PPUSH
18499: LD_VAR 0 7
18503: PPUSH
18504: CALL_OW 154
18508: GO 18511
18510: POP
// end ;
18511: LD_VAR 0 2
18515: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18516: LD_INT 0
18518: PPUSH
18519: PPUSH
18520: PPUSH
18521: PPUSH
18522: PPUSH
18523: PPUSH
// if not unit or not building then
18524: LD_VAR 0 1
18528: NOT
18529: PUSH
18530: LD_VAR 0 2
18534: NOT
18535: OR
18536: IFFALSE 18540
// exit ;
18538: GO 18698
// x := GetX ( building ) ;
18540: LD_ADDR_VAR 0 5
18544: PUSH
18545: LD_VAR 0 2
18549: PPUSH
18550: CALL_OW 250
18554: ST_TO_ADDR
// y := GetY ( building ) ;
18555: LD_ADDR_VAR 0 6
18559: PUSH
18560: LD_VAR 0 2
18564: PPUSH
18565: CALL_OW 251
18569: ST_TO_ADDR
// for i = 0 to 5 do
18570: LD_ADDR_VAR 0 4
18574: PUSH
18575: DOUBLE
18576: LD_INT 0
18578: DEC
18579: ST_TO_ADDR
18580: LD_INT 5
18582: PUSH
18583: FOR_TO
18584: IFFALSE 18696
// begin _x := ShiftX ( x , i , 3 ) ;
18586: LD_ADDR_VAR 0 7
18590: PUSH
18591: LD_VAR 0 5
18595: PPUSH
18596: LD_VAR 0 4
18600: PPUSH
18601: LD_INT 3
18603: PPUSH
18604: CALL_OW 272
18608: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18609: LD_ADDR_VAR 0 8
18613: PUSH
18614: LD_VAR 0 6
18618: PPUSH
18619: LD_VAR 0 4
18623: PPUSH
18624: LD_INT 3
18626: PPUSH
18627: CALL_OW 273
18631: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18632: LD_VAR 0 7
18636: PPUSH
18637: LD_VAR 0 8
18641: PPUSH
18642: CALL_OW 488
18646: NOT
18647: IFFALSE 18651
// continue ;
18649: GO 18583
// if HexInfo ( _x , _y ) = 0 then
18651: LD_VAR 0 7
18655: PPUSH
18656: LD_VAR 0 8
18660: PPUSH
18661: CALL_OW 428
18665: PUSH
18666: LD_INT 0
18668: EQUAL
18669: IFFALSE 18694
// begin ComMoveXY ( unit , _x , _y ) ;
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_VAR 0 7
18680: PPUSH
18681: LD_VAR 0 8
18685: PPUSH
18686: CALL_OW 111
// exit ;
18690: POP
18691: POP
18692: GO 18698
// end ; end ;
18694: GO 18583
18696: POP
18697: POP
// end ;
18698: LD_VAR 0 3
18702: RET
// export function ScanBase ( side , base_area ) ; begin
18703: LD_INT 0
18705: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18706: LD_ADDR_VAR 0 3
18710: PUSH
18711: LD_VAR 0 2
18715: PPUSH
18716: LD_INT 81
18718: PUSH
18719: LD_VAR 0 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PPUSH
18728: CALL_OW 70
18732: ST_TO_ADDR
// end ;
18733: LD_VAR 0 3
18737: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
18742: PPUSH
18743: PPUSH
// result := false ;
18744: LD_ADDR_VAR 0 2
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// side := GetSide ( unit ) ;
18752: LD_ADDR_VAR 0 3
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 255
18766: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18767: LD_ADDR_VAR 0 4
18771: PUSH
18772: LD_VAR 0 1
18776: PPUSH
18777: CALL_OW 248
18781: ST_TO_ADDR
// case nat of 1 :
18782: LD_VAR 0 4
18786: PUSH
18787: LD_INT 1
18789: DOUBLE
18790: EQUAL
18791: IFTRUE 18795
18793: GO 18806
18795: POP
// tech := tech_lassight ; 2 :
18796: LD_ADDR_VAR 0 5
18800: PUSH
18801: LD_INT 12
18803: ST_TO_ADDR
18804: GO 18845
18806: LD_INT 2
18808: DOUBLE
18809: EQUAL
18810: IFTRUE 18814
18812: GO 18825
18814: POP
// tech := tech_mortar ; 3 :
18815: LD_ADDR_VAR 0 5
18819: PUSH
18820: LD_INT 41
18822: ST_TO_ADDR
18823: GO 18845
18825: LD_INT 3
18827: DOUBLE
18828: EQUAL
18829: IFTRUE 18833
18831: GO 18844
18833: POP
// tech := tech_bazooka ; end ;
18834: LD_ADDR_VAR 0 5
18838: PUSH
18839: LD_INT 44
18841: ST_TO_ADDR
18842: GO 18845
18844: POP
// if Researched ( side , tech ) then
18845: LD_VAR 0 3
18849: PPUSH
18850: LD_VAR 0 5
18854: PPUSH
18855: CALL_OW 325
18859: IFFALSE 18886
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18861: LD_ADDR_VAR 0 2
18865: PUSH
18866: LD_INT 5
18868: PUSH
18869: LD_INT 8
18871: PUSH
18872: LD_INT 9
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: PUSH
18880: LD_VAR 0 4
18884: ARRAY
18885: ST_TO_ADDR
// end ;
18886: LD_VAR 0 2
18890: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18891: LD_INT 0
18893: PPUSH
18894: PPUSH
18895: PPUSH
// if not mines then
18896: LD_VAR 0 2
18900: NOT
18901: IFFALSE 18905
// exit ;
18903: GO 19049
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18905: LD_ADDR_VAR 0 5
18909: PUSH
18910: LD_INT 81
18912: PUSH
18913: LD_VAR 0 1
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 3
18924: PUSH
18925: LD_INT 21
18927: PUSH
18928: LD_INT 3
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PPUSH
18943: CALL_OW 69
18947: ST_TO_ADDR
// for i in mines do
18948: LD_ADDR_VAR 0 4
18952: PUSH
18953: LD_VAR 0 2
18957: PUSH
18958: FOR_IN
18959: IFFALSE 19047
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18961: LD_VAR 0 4
18965: PUSH
18966: LD_INT 1
18968: ARRAY
18969: PPUSH
18970: LD_VAR 0 4
18974: PUSH
18975: LD_INT 2
18977: ARRAY
18978: PPUSH
18979: CALL_OW 458
18983: NOT
18984: IFFALSE 18988
// continue ;
18986: GO 18958
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18988: LD_VAR 0 4
18992: PUSH
18993: LD_INT 1
18995: ARRAY
18996: PPUSH
18997: LD_VAR 0 4
19001: PUSH
19002: LD_INT 2
19004: ARRAY
19005: PPUSH
19006: CALL_OW 428
19010: PUSH
19011: LD_VAR 0 5
19015: IN
19016: IFFALSE 19045
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19018: LD_VAR 0 4
19022: PUSH
19023: LD_INT 1
19025: ARRAY
19026: PPUSH
19027: LD_VAR 0 4
19031: PUSH
19032: LD_INT 2
19034: ARRAY
19035: PPUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL_OW 456
// end ;
19045: GO 18958
19047: POP
19048: POP
// end ;
19049: LD_VAR 0 3
19053: RET
// export function Count ( array ) ; begin
19054: LD_INT 0
19056: PPUSH
// result := array + 0 ;
19057: LD_ADDR_VAR 0 2
19061: PUSH
19062: LD_VAR 0 1
19066: PUSH
19067: LD_INT 0
19069: PLUS
19070: ST_TO_ADDR
// end ;
19071: LD_VAR 0 2
19075: RET
// export function IsEmpty ( building ) ; begin
19076: LD_INT 0
19078: PPUSH
// if not building then
19079: LD_VAR 0 1
19083: NOT
19084: IFFALSE 19088
// exit ;
19086: GO 19131
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19088: LD_ADDR_VAR 0 2
19092: PUSH
19093: LD_VAR 0 1
19097: PUSH
19098: LD_INT 22
19100: PUSH
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 255
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 58
19117: PUSH
19118: EMPTY
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: IN
19130: ST_TO_ADDR
// end ;
19131: LD_VAR 0 2
19135: RET
// export function IsNotFull ( building ) ; var places ; begin
19136: LD_INT 0
19138: PPUSH
19139: PPUSH
// if not building then
19140: LD_VAR 0 1
19144: NOT
19145: IFFALSE 19149
// exit ;
19147: GO 19177
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19149: LD_ADDR_VAR 0 2
19153: PUSH
19154: LD_VAR 0 1
19158: PPUSH
19159: LD_INT 3
19161: PUSH
19162: LD_INT 62
19164: PUSH
19165: EMPTY
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 72
19176: ST_TO_ADDR
// end ;
19177: LD_VAR 0 2
19181: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19182: LD_INT 0
19184: PPUSH
19185: PPUSH
19186: PPUSH
19187: PPUSH
// tmp := [ ] ;
19188: LD_ADDR_VAR 0 3
19192: PUSH
19193: EMPTY
19194: ST_TO_ADDR
// list := [ ] ;
19195: LD_ADDR_VAR 0 5
19199: PUSH
19200: EMPTY
19201: ST_TO_ADDR
// for i = 16 to 25 do
19202: LD_ADDR_VAR 0 4
19206: PUSH
19207: DOUBLE
19208: LD_INT 16
19210: DEC
19211: ST_TO_ADDR
19212: LD_INT 25
19214: PUSH
19215: FOR_TO
19216: IFFALSE 19289
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: LD_VAR 0 3
19227: PUSH
19228: LD_INT 22
19230: PUSH
19231: LD_VAR 0 1
19235: PPUSH
19236: CALL_OW 255
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 91
19247: PUSH
19248: LD_VAR 0 1
19252: PUSH
19253: LD_INT 6
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 30
19263: PUSH
19264: LD_VAR 0 4
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: PPUSH
19281: CALL_OW 69
19285: ADD
19286: ST_TO_ADDR
19287: GO 19215
19289: POP
19290: POP
// for i = 1 to tmp do
19291: LD_ADDR_VAR 0 4
19295: PUSH
19296: DOUBLE
19297: LD_INT 1
19299: DEC
19300: ST_TO_ADDR
19301: LD_VAR 0 3
19305: PUSH
19306: FOR_TO
19307: IFFALSE 19395
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19309: LD_ADDR_VAR 0 5
19313: PUSH
19314: LD_VAR 0 5
19318: PUSH
19319: LD_VAR 0 3
19323: PUSH
19324: LD_VAR 0 4
19328: ARRAY
19329: PPUSH
19330: CALL_OW 266
19334: PUSH
19335: LD_VAR 0 3
19339: PUSH
19340: LD_VAR 0 4
19344: ARRAY
19345: PPUSH
19346: CALL_OW 250
19350: PUSH
19351: LD_VAR 0 3
19355: PUSH
19356: LD_VAR 0 4
19360: ARRAY
19361: PPUSH
19362: CALL_OW 251
19366: PUSH
19367: LD_VAR 0 3
19371: PUSH
19372: LD_VAR 0 4
19376: ARRAY
19377: PPUSH
19378: CALL_OW 254
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: PUSH
19389: EMPTY
19390: LIST
19391: ADD
19392: ST_TO_ADDR
19393: GO 19306
19395: POP
19396: POP
// result := list ;
19397: LD_ADDR_VAR 0 2
19401: PUSH
19402: LD_VAR 0 5
19406: ST_TO_ADDR
// end ;
19407: LD_VAR 0 2
19411: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19412: LD_INT 0
19414: PPUSH
19415: PPUSH
19416: PPUSH
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
// if not factory then
19421: LD_VAR 0 1
19425: NOT
19426: IFFALSE 19430
// exit ;
19428: GO 20023
// if control = control_apeman then
19430: LD_VAR 0 4
19434: PUSH
19435: LD_INT 5
19437: EQUAL
19438: IFFALSE 19547
// begin tmp := UnitsInside ( factory ) ;
19440: LD_ADDR_VAR 0 8
19444: PUSH
19445: LD_VAR 0 1
19449: PPUSH
19450: CALL_OW 313
19454: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19455: LD_VAR 0 8
19459: PPUSH
19460: LD_INT 25
19462: PUSH
19463: LD_INT 12
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PPUSH
19470: CALL_OW 72
19474: NOT
19475: IFFALSE 19485
// control := control_manual ;
19477: LD_ADDR_VAR 0 4
19481: PUSH
19482: LD_INT 1
19484: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19485: LD_ADDR_VAR 0 8
19489: PUSH
19490: LD_VAR 0 1
19494: PPUSH
19495: CALL 19182 0 1
19499: ST_TO_ADDR
// if tmp then
19500: LD_VAR 0 8
19504: IFFALSE 19547
// begin for i in tmp do
19506: LD_ADDR_VAR 0 7
19510: PUSH
19511: LD_VAR 0 8
19515: PUSH
19516: FOR_IN
19517: IFFALSE 19545
// if i [ 1 ] = b_ext_radio then
19519: LD_VAR 0 7
19523: PUSH
19524: LD_INT 1
19526: ARRAY
19527: PUSH
19528: LD_INT 22
19530: EQUAL
19531: IFFALSE 19543
// begin control := control_remote ;
19533: LD_ADDR_VAR 0 4
19537: PUSH
19538: LD_INT 2
19540: ST_TO_ADDR
// break ;
19541: GO 19545
// end ;
19543: GO 19516
19545: POP
19546: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 2
19556: PPUSH
19557: LD_VAR 0 3
19561: PPUSH
19562: LD_VAR 0 4
19566: PPUSH
19567: LD_VAR 0 5
19571: PPUSH
19572: CALL_OW 448
19576: IFFALSE 19611
// begin result := [ chassis , engine , control , weapon ] ;
19578: LD_ADDR_VAR 0 6
19582: PUSH
19583: LD_VAR 0 2
19587: PUSH
19588: LD_VAR 0 3
19592: PUSH
19593: LD_VAR 0 4
19597: PUSH
19598: LD_VAR 0 5
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: ST_TO_ADDR
// exit ;
19609: GO 20023
// end ; _chassis := AvailableChassisList ( factory ) ;
19611: LD_ADDR_VAR 0 9
19615: PUSH
19616: LD_VAR 0 1
19620: PPUSH
19621: CALL_OW 475
19625: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19626: LD_ADDR_VAR 0 11
19630: PUSH
19631: LD_VAR 0 1
19635: PPUSH
19636: CALL_OW 476
19640: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19641: LD_ADDR_VAR 0 12
19645: PUSH
19646: LD_VAR 0 1
19650: PPUSH
19651: CALL_OW 477
19655: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19656: LD_ADDR_VAR 0 10
19660: PUSH
19661: LD_VAR 0 1
19665: PPUSH
19666: CALL_OW 478
19670: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19671: LD_VAR 0 9
19675: NOT
19676: PUSH
19677: LD_VAR 0 11
19681: NOT
19682: OR
19683: PUSH
19684: LD_VAR 0 12
19688: NOT
19689: OR
19690: PUSH
19691: LD_VAR 0 10
19695: NOT
19696: OR
19697: IFFALSE 19732
// begin result := [ chassis , engine , control , weapon ] ;
19699: LD_ADDR_VAR 0 6
19703: PUSH
19704: LD_VAR 0 2
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_VAR 0 4
19718: PUSH
19719: LD_VAR 0 5
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: ST_TO_ADDR
// exit ;
19730: GO 20023
// end ; if not chassis in _chassis then
19732: LD_VAR 0 2
19736: PUSH
19737: LD_VAR 0 9
19741: IN
19742: NOT
19743: IFFALSE 19769
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19745: LD_ADDR_VAR 0 2
19749: PUSH
19750: LD_VAR 0 9
19754: PUSH
19755: LD_INT 1
19757: PPUSH
19758: LD_VAR 0 9
19762: PPUSH
19763: CALL_OW 12
19767: ARRAY
19768: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19769: LD_VAR 0 2
19773: PPUSH
19774: LD_VAR 0 3
19778: PPUSH
19779: CALL 20028 0 2
19783: NOT
19784: IFFALSE 19843
// repeat engine := _engine [ 1 ] ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_VAR 0 11
19795: PUSH
19796: LD_INT 1
19798: ARRAY
19799: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19800: LD_ADDR_VAR 0 11
19804: PUSH
19805: LD_VAR 0 11
19809: PPUSH
19810: LD_INT 1
19812: PPUSH
19813: CALL_OW 3
19817: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19818: LD_VAR 0 2
19822: PPUSH
19823: LD_VAR 0 3
19827: PPUSH
19828: CALL 20028 0 2
19832: PUSH
19833: LD_VAR 0 11
19837: PUSH
19838: EMPTY
19839: EQUAL
19840: OR
19841: IFFALSE 19786
// if not control in _control then
19843: LD_VAR 0 4
19847: PUSH
19848: LD_VAR 0 12
19852: IN
19853: NOT
19854: IFFALSE 19880
// control := _control [ rand ( 1 , _control ) ] ;
19856: LD_ADDR_VAR 0 4
19860: PUSH
19861: LD_VAR 0 12
19865: PUSH
19866: LD_INT 1
19868: PPUSH
19869: LD_VAR 0 12
19873: PPUSH
19874: CALL_OW 12
19878: ARRAY
19879: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19880: LD_VAR 0 2
19884: PPUSH
19885: LD_VAR 0 5
19889: PPUSH
19890: CALL 20248 0 2
19894: NOT
19895: IFFALSE 19954
// repeat weapon := _weapon [ 1 ] ;
19897: LD_ADDR_VAR 0 5
19901: PUSH
19902: LD_VAR 0 10
19906: PUSH
19907: LD_INT 1
19909: ARRAY
19910: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19911: LD_ADDR_VAR 0 10
19915: PUSH
19916: LD_VAR 0 10
19920: PPUSH
19921: LD_INT 1
19923: PPUSH
19924: CALL_OW 3
19928: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19929: LD_VAR 0 2
19933: PPUSH
19934: LD_VAR 0 5
19938: PPUSH
19939: CALL 20248 0 2
19943: PUSH
19944: LD_VAR 0 10
19948: PUSH
19949: EMPTY
19950: EQUAL
19951: OR
19952: IFFALSE 19897
// result := [ ] ;
19954: LD_ADDR_VAR 0 6
19958: PUSH
19959: EMPTY
19960: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19961: LD_VAR 0 1
19965: PPUSH
19966: LD_VAR 0 2
19970: PPUSH
19971: LD_VAR 0 3
19975: PPUSH
19976: LD_VAR 0 4
19980: PPUSH
19981: LD_VAR 0 5
19985: PPUSH
19986: CALL_OW 448
19990: IFFALSE 20023
// result := [ chassis , engine , control , weapon ] ;
19992: LD_ADDR_VAR 0 6
19996: PUSH
19997: LD_VAR 0 2
20001: PUSH
20002: LD_VAR 0 3
20006: PUSH
20007: LD_VAR 0 4
20011: PUSH
20012: LD_VAR 0 5
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: ST_TO_ADDR
// end ;
20023: LD_VAR 0 6
20027: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20028: LD_INT 0
20030: PPUSH
// if not chassis or not engine then
20031: LD_VAR 0 1
20035: NOT
20036: PUSH
20037: LD_VAR 0 2
20041: NOT
20042: OR
20043: IFFALSE 20047
// exit ;
20045: GO 20243
// case engine of engine_solar :
20047: LD_VAR 0 2
20051: PUSH
20052: LD_INT 2
20054: DOUBLE
20055: EQUAL
20056: IFTRUE 20060
20058: GO 20098
20060: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20061: LD_ADDR_VAR 0 3
20065: PUSH
20066: LD_INT 11
20068: PUSH
20069: LD_INT 12
20071: PUSH
20072: LD_INT 13
20074: PUSH
20075: LD_INT 14
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: LD_INT 2
20083: PUSH
20084: LD_INT 3
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: ST_TO_ADDR
20096: GO 20227
20098: LD_INT 1
20100: DOUBLE
20101: EQUAL
20102: IFTRUE 20106
20104: GO 20168
20106: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20107: LD_ADDR_VAR 0 3
20111: PUSH
20112: LD_INT 11
20114: PUSH
20115: LD_INT 12
20117: PUSH
20118: LD_INT 13
20120: PUSH
20121: LD_INT 14
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 3
20132: PUSH
20133: LD_INT 4
20135: PUSH
20136: LD_INT 5
20138: PUSH
20139: LD_INT 21
20141: PUSH
20142: LD_INT 23
20144: PUSH
20145: LD_INT 22
20147: PUSH
20148: LD_INT 24
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: ST_TO_ADDR
20166: GO 20227
20168: LD_INT 3
20170: DOUBLE
20171: EQUAL
20172: IFTRUE 20176
20174: GO 20226
20176: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20177: LD_ADDR_VAR 0 3
20181: PUSH
20182: LD_INT 13
20184: PUSH
20185: LD_INT 14
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: LD_INT 3
20193: PUSH
20194: LD_INT 4
20196: PUSH
20197: LD_INT 5
20199: PUSH
20200: LD_INT 21
20202: PUSH
20203: LD_INT 22
20205: PUSH
20206: LD_INT 23
20208: PUSH
20209: LD_INT 24
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: ST_TO_ADDR
20224: GO 20227
20226: POP
// result := ( chassis in result ) ;
20227: LD_ADDR_VAR 0 3
20231: PUSH
20232: LD_VAR 0 1
20236: PUSH
20237: LD_VAR 0 3
20241: IN
20242: ST_TO_ADDR
// end ;
20243: LD_VAR 0 3
20247: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20248: LD_INT 0
20250: PPUSH
// if not chassis or not weapon then
20251: LD_VAR 0 1
20255: NOT
20256: PUSH
20257: LD_VAR 0 2
20261: NOT
20262: OR
20263: IFFALSE 20267
// exit ;
20265: GO 21327
// case weapon of us_machine_gun :
20267: LD_VAR 0 2
20271: PUSH
20272: LD_INT 2
20274: DOUBLE
20275: EQUAL
20276: IFTRUE 20280
20278: GO 20310
20280: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20281: LD_ADDR_VAR 0 3
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: LD_INT 3
20294: PUSH
20295: LD_INT 4
20297: PUSH
20298: LD_INT 5
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: ST_TO_ADDR
20308: GO 21311
20310: LD_INT 3
20312: DOUBLE
20313: EQUAL
20314: IFTRUE 20318
20316: GO 20348
20318: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20319: LD_ADDR_VAR 0 3
20323: PUSH
20324: LD_INT 1
20326: PUSH
20327: LD_INT 2
20329: PUSH
20330: LD_INT 3
20332: PUSH
20333: LD_INT 4
20335: PUSH
20336: LD_INT 5
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: ST_TO_ADDR
20346: GO 21311
20348: LD_INT 11
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20386
20356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20357: LD_ADDR_VAR 0 3
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: LD_INT 3
20370: PUSH
20371: LD_INT 4
20373: PUSH
20374: LD_INT 5
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: ST_TO_ADDR
20384: GO 21311
20386: LD_INT 4
20388: DOUBLE
20389: EQUAL
20390: IFTRUE 20394
20392: GO 20420
20394: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20395: LD_ADDR_VAR 0 3
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 3
20405: PUSH
20406: LD_INT 4
20408: PUSH
20409: LD_INT 5
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: ST_TO_ADDR
20418: GO 21311
20420: LD_INT 5
20422: DOUBLE
20423: EQUAL
20424: IFTRUE 20428
20426: GO 20454
20428: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20429: LD_ADDR_VAR 0 3
20433: PUSH
20434: LD_INT 2
20436: PUSH
20437: LD_INT 3
20439: PUSH
20440: LD_INT 4
20442: PUSH
20443: LD_INT 5
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: ST_TO_ADDR
20452: GO 21311
20454: LD_INT 9
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20488
20462: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20463: LD_ADDR_VAR 0 3
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: LD_INT 3
20473: PUSH
20474: LD_INT 4
20476: PUSH
20477: LD_INT 5
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: ST_TO_ADDR
20486: GO 21311
20488: LD_INT 7
20490: DOUBLE
20491: EQUAL
20492: IFTRUE 20496
20494: GO 20522
20496: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20497: LD_ADDR_VAR 0 3
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 3
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: LD_INT 5
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: ST_TO_ADDR
20520: GO 21311
20522: LD_INT 12
20524: DOUBLE
20525: EQUAL
20526: IFTRUE 20530
20528: GO 20556
20530: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20531: LD_ADDR_VAR 0 3
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 3
20541: PUSH
20542: LD_INT 4
20544: PUSH
20545: LD_INT 5
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: ST_TO_ADDR
20554: GO 21311
20556: LD_INT 13
20558: DOUBLE
20559: EQUAL
20560: IFTRUE 20564
20562: GO 20590
20564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20565: LD_ADDR_VAR 0 3
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 3
20575: PUSH
20576: LD_INT 4
20578: PUSH
20579: LD_INT 5
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: ST_TO_ADDR
20588: GO 21311
20590: LD_INT 14
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20616
20598: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20599: LD_ADDR_VAR 0 3
20603: PUSH
20604: LD_INT 4
20606: PUSH
20607: LD_INT 5
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: ST_TO_ADDR
20614: GO 21311
20616: LD_INT 6
20618: DOUBLE
20619: EQUAL
20620: IFTRUE 20624
20622: GO 20642
20624: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20625: LD_ADDR_VAR 0 3
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: LD_INT 5
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: ST_TO_ADDR
20640: GO 21311
20642: LD_INT 10
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20668
20650: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20651: LD_ADDR_VAR 0 3
20655: PUSH
20656: LD_INT 4
20658: PUSH
20659: LD_INT 5
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: ST_TO_ADDR
20666: GO 21311
20668: LD_INT 22
20670: DOUBLE
20671: EQUAL
20672: IFTRUE 20676
20674: GO 20702
20676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: LD_INT 11
20684: PUSH
20685: LD_INT 12
20687: PUSH
20688: LD_INT 13
20690: PUSH
20691: LD_INT 14
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: ST_TO_ADDR
20700: GO 21311
20702: LD_INT 23
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20736
20710: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20711: LD_ADDR_VAR 0 3
20715: PUSH
20716: LD_INT 11
20718: PUSH
20719: LD_INT 12
20721: PUSH
20722: LD_INT 13
20724: PUSH
20725: LD_INT 14
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: ST_TO_ADDR
20734: GO 21311
20736: LD_INT 24
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20770
20744: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20745: LD_ADDR_VAR 0 3
20749: PUSH
20750: LD_INT 11
20752: PUSH
20753: LD_INT 12
20755: PUSH
20756: LD_INT 13
20758: PUSH
20759: LD_INT 14
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: ST_TO_ADDR
20768: GO 21311
20770: LD_INT 30
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20804
20778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20779: LD_ADDR_VAR 0 3
20783: PUSH
20784: LD_INT 11
20786: PUSH
20787: LD_INT 12
20789: PUSH
20790: LD_INT 13
20792: PUSH
20793: LD_INT 14
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: ST_TO_ADDR
20802: GO 21311
20804: LD_INT 25
20806: DOUBLE
20807: EQUAL
20808: IFTRUE 20812
20810: GO 20830
20812: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20813: LD_ADDR_VAR 0 3
20817: PUSH
20818: LD_INT 13
20820: PUSH
20821: LD_INT 14
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: ST_TO_ADDR
20828: GO 21311
20830: LD_INT 27
20832: DOUBLE
20833: EQUAL
20834: IFTRUE 20838
20836: GO 20856
20838: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20839: LD_ADDR_VAR 0 3
20843: PUSH
20844: LD_INT 13
20846: PUSH
20847: LD_INT 14
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: ST_TO_ADDR
20854: GO 21311
20856: LD_INT 92
20858: DOUBLE
20859: EQUAL
20860: IFTRUE 20864
20862: GO 20890
20864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: LD_INT 11
20872: PUSH
20873: LD_INT 12
20875: PUSH
20876: LD_INT 13
20878: PUSH
20879: LD_INT 14
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: ST_TO_ADDR
20888: GO 21311
20890: LD_INT 28
20892: DOUBLE
20893: EQUAL
20894: IFTRUE 20898
20896: GO 20916
20898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20899: LD_ADDR_VAR 0 3
20903: PUSH
20904: LD_INT 13
20906: PUSH
20907: LD_INT 14
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: ST_TO_ADDR
20914: GO 21311
20916: LD_INT 29
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 20942
20924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20925: LD_ADDR_VAR 0 3
20929: PUSH
20930: LD_INT 13
20932: PUSH
20933: LD_INT 14
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: ST_TO_ADDR
20940: GO 21311
20942: LD_INT 31
20944: DOUBLE
20945: EQUAL
20946: IFTRUE 20950
20948: GO 20968
20950: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_INT 13
20958: PUSH
20959: LD_INT 14
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: ST_TO_ADDR
20966: GO 21311
20968: LD_INT 26
20970: DOUBLE
20971: EQUAL
20972: IFTRUE 20976
20974: GO 20994
20976: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20977: LD_ADDR_VAR 0 3
20981: PUSH
20982: LD_INT 13
20984: PUSH
20985: LD_INT 14
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: ST_TO_ADDR
20992: GO 21311
20994: LD_INT 42
20996: DOUBLE
20997: EQUAL
20998: IFTRUE 21002
21000: GO 21028
21002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21003: LD_ADDR_VAR 0 3
21007: PUSH
21008: LD_INT 21
21010: PUSH
21011: LD_INT 22
21013: PUSH
21014: LD_INT 23
21016: PUSH
21017: LD_INT 24
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: ST_TO_ADDR
21026: GO 21311
21028: LD_INT 43
21030: DOUBLE
21031: EQUAL
21032: IFTRUE 21036
21034: GO 21062
21036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21037: LD_ADDR_VAR 0 3
21041: PUSH
21042: LD_INT 21
21044: PUSH
21045: LD_INT 22
21047: PUSH
21048: LD_INT 23
21050: PUSH
21051: LD_INT 24
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: ST_TO_ADDR
21060: GO 21311
21062: LD_INT 44
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 21096
21070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21071: LD_ADDR_VAR 0 3
21075: PUSH
21076: LD_INT 21
21078: PUSH
21079: LD_INT 22
21081: PUSH
21082: LD_INT 23
21084: PUSH
21085: LD_INT 24
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: ST_TO_ADDR
21094: GO 21311
21096: LD_INT 45
21098: DOUBLE
21099: EQUAL
21100: IFTRUE 21104
21102: GO 21130
21104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_INT 21
21112: PUSH
21113: LD_INT 22
21115: PUSH
21116: LD_INT 23
21118: PUSH
21119: LD_INT 24
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: ST_TO_ADDR
21128: GO 21311
21130: LD_INT 49
21132: DOUBLE
21133: EQUAL
21134: IFTRUE 21138
21136: GO 21164
21138: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21139: LD_ADDR_VAR 0 3
21143: PUSH
21144: LD_INT 21
21146: PUSH
21147: LD_INT 22
21149: PUSH
21150: LD_INT 23
21152: PUSH
21153: LD_INT 24
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: ST_TO_ADDR
21162: GO 21311
21164: LD_INT 51
21166: DOUBLE
21167: EQUAL
21168: IFTRUE 21172
21170: GO 21198
21172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21173: LD_ADDR_VAR 0 3
21177: PUSH
21178: LD_INT 21
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_INT 23
21186: PUSH
21187: LD_INT 24
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
21196: GO 21311
21198: LD_INT 52
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21232
21206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21207: LD_ADDR_VAR 0 3
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 22
21217: PUSH
21218: LD_INT 23
21220: PUSH
21221: LD_INT 24
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: ST_TO_ADDR
21230: GO 21311
21232: LD_INT 53
21234: DOUBLE
21235: EQUAL
21236: IFTRUE 21240
21238: GO 21258
21240: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_INT 23
21248: PUSH
21249: LD_INT 24
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: ST_TO_ADDR
21256: GO 21311
21258: LD_INT 46
21260: DOUBLE
21261: EQUAL
21262: IFTRUE 21266
21264: GO 21284
21266: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21267: LD_ADDR_VAR 0 3
21271: PUSH
21272: LD_INT 23
21274: PUSH
21275: LD_INT 24
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: ST_TO_ADDR
21282: GO 21311
21284: LD_INT 47
21286: DOUBLE
21287: EQUAL
21288: IFTRUE 21292
21290: GO 21310
21292: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_INT 23
21300: PUSH
21301: LD_INT 24
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: ST_TO_ADDR
21308: GO 21311
21310: POP
// result := ( chassis in result ) ;
21311: LD_ADDR_VAR 0 3
21315: PUSH
21316: LD_VAR 0 1
21320: PUSH
21321: LD_VAR 0 3
21325: IN
21326: ST_TO_ADDR
// end ;
21327: LD_VAR 0 3
21331: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
// result := array ;
21341: LD_ADDR_VAR 0 5
21345: PUSH
21346: LD_VAR 0 1
21350: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21351: LD_VAR 0 1
21355: NOT
21356: PUSH
21357: LD_VAR 0 2
21361: NOT
21362: OR
21363: PUSH
21364: LD_VAR 0 3
21368: NOT
21369: OR
21370: PUSH
21371: LD_VAR 0 2
21375: PUSH
21376: LD_VAR 0 1
21380: GREATER
21381: OR
21382: PUSH
21383: LD_VAR 0 3
21387: PUSH
21388: LD_VAR 0 1
21392: GREATER
21393: OR
21394: IFFALSE 21398
// exit ;
21396: GO 21694
// if direction then
21398: LD_VAR 0 4
21402: IFFALSE 21466
// begin d := 1 ;
21404: LD_ADDR_VAR 0 9
21408: PUSH
21409: LD_INT 1
21411: ST_TO_ADDR
// if i_from > i_to then
21412: LD_VAR 0 2
21416: PUSH
21417: LD_VAR 0 3
21421: GREATER
21422: IFFALSE 21448
// length := ( array - i_from ) + i_to else
21424: LD_ADDR_VAR 0 11
21428: PUSH
21429: LD_VAR 0 1
21433: PUSH
21434: LD_VAR 0 2
21438: MINUS
21439: PUSH
21440: LD_VAR 0 3
21444: PLUS
21445: ST_TO_ADDR
21446: GO 21464
// length := i_to - i_from ;
21448: LD_ADDR_VAR 0 11
21452: PUSH
21453: LD_VAR 0 3
21457: PUSH
21458: LD_VAR 0 2
21462: MINUS
21463: ST_TO_ADDR
// end else
21464: GO 21527
// begin d := - 1 ;
21466: LD_ADDR_VAR 0 9
21470: PUSH
21471: LD_INT 1
21473: NEG
21474: ST_TO_ADDR
// if i_from > i_to then
21475: LD_VAR 0 2
21479: PUSH
21480: LD_VAR 0 3
21484: GREATER
21485: IFFALSE 21505
// length := i_from - i_to else
21487: LD_ADDR_VAR 0 11
21491: PUSH
21492: LD_VAR 0 2
21496: PUSH
21497: LD_VAR 0 3
21501: MINUS
21502: ST_TO_ADDR
21503: GO 21527
// length := ( array - i_to ) + i_from ;
21505: LD_ADDR_VAR 0 11
21509: PUSH
21510: LD_VAR 0 1
21514: PUSH
21515: LD_VAR 0 3
21519: MINUS
21520: PUSH
21521: LD_VAR 0 2
21525: PLUS
21526: ST_TO_ADDR
// end ; if not length then
21527: LD_VAR 0 11
21531: NOT
21532: IFFALSE 21536
// exit ;
21534: GO 21694
// tmp := array ;
21536: LD_ADDR_VAR 0 10
21540: PUSH
21541: LD_VAR 0 1
21545: ST_TO_ADDR
// for i = 1 to length do
21546: LD_ADDR_VAR 0 6
21550: PUSH
21551: DOUBLE
21552: LD_INT 1
21554: DEC
21555: ST_TO_ADDR
21556: LD_VAR 0 11
21560: PUSH
21561: FOR_TO
21562: IFFALSE 21682
// begin for j = 1 to array do
21564: LD_ADDR_VAR 0 7
21568: PUSH
21569: DOUBLE
21570: LD_INT 1
21572: DEC
21573: ST_TO_ADDR
21574: LD_VAR 0 1
21578: PUSH
21579: FOR_TO
21580: IFFALSE 21668
// begin k := j + d ;
21582: LD_ADDR_VAR 0 8
21586: PUSH
21587: LD_VAR 0 7
21591: PUSH
21592: LD_VAR 0 9
21596: PLUS
21597: ST_TO_ADDR
// if k > array then
21598: LD_VAR 0 8
21602: PUSH
21603: LD_VAR 0 1
21607: GREATER
21608: IFFALSE 21618
// k := 1 ;
21610: LD_ADDR_VAR 0 8
21614: PUSH
21615: LD_INT 1
21617: ST_TO_ADDR
// if not k then
21618: LD_VAR 0 8
21622: NOT
21623: IFFALSE 21635
// k := array ;
21625: LD_ADDR_VAR 0 8
21629: PUSH
21630: LD_VAR 0 1
21634: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21635: LD_ADDR_VAR 0 10
21639: PUSH
21640: LD_VAR 0 10
21644: PPUSH
21645: LD_VAR 0 8
21649: PPUSH
21650: LD_VAR 0 1
21654: PUSH
21655: LD_VAR 0 7
21659: ARRAY
21660: PPUSH
21661: CALL_OW 1
21665: ST_TO_ADDR
// end ;
21666: GO 21579
21668: POP
21669: POP
// array := tmp ;
21670: LD_ADDR_VAR 0 1
21674: PUSH
21675: LD_VAR 0 10
21679: ST_TO_ADDR
// end ;
21680: GO 21561
21682: POP
21683: POP
// result := array ;
21684: LD_ADDR_VAR 0 5
21688: PUSH
21689: LD_VAR 0 1
21693: ST_TO_ADDR
// end ;
21694: LD_VAR 0 5
21698: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21699: LD_INT 0
21701: PPUSH
21702: PPUSH
// result := 0 ;
21703: LD_ADDR_VAR 0 3
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// if not array or not value in array then
21711: LD_VAR 0 1
21715: NOT
21716: PUSH
21717: LD_VAR 0 2
21721: PUSH
21722: LD_VAR 0 1
21726: IN
21727: NOT
21728: OR
21729: IFFALSE 21733
// exit ;
21731: GO 21787
// for i = 1 to array do
21733: LD_ADDR_VAR 0 4
21737: PUSH
21738: DOUBLE
21739: LD_INT 1
21741: DEC
21742: ST_TO_ADDR
21743: LD_VAR 0 1
21747: PUSH
21748: FOR_TO
21749: IFFALSE 21785
// if value = array [ i ] then
21751: LD_VAR 0 2
21755: PUSH
21756: LD_VAR 0 1
21760: PUSH
21761: LD_VAR 0 4
21765: ARRAY
21766: EQUAL
21767: IFFALSE 21783
// begin result := i ;
21769: LD_ADDR_VAR 0 3
21773: PUSH
21774: LD_VAR 0 4
21778: ST_TO_ADDR
// exit ;
21779: POP
21780: POP
21781: GO 21787
// end ;
21783: GO 21748
21785: POP
21786: POP
// end ;
21787: LD_VAR 0 3
21791: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21792: LD_INT 0
21794: PPUSH
// vc_chassis := chassis ;
21795: LD_ADDR_OWVAR 37
21799: PUSH
21800: LD_VAR 0 1
21804: ST_TO_ADDR
// vc_engine := engine ;
21805: LD_ADDR_OWVAR 39
21809: PUSH
21810: LD_VAR 0 2
21814: ST_TO_ADDR
// vc_control := control ;
21815: LD_ADDR_OWVAR 38
21819: PUSH
21820: LD_VAR 0 3
21824: ST_TO_ADDR
// vc_weapon := weapon ;
21825: LD_ADDR_OWVAR 40
21829: PUSH
21830: LD_VAR 0 4
21834: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21835: LD_ADDR_OWVAR 41
21839: PUSH
21840: LD_VAR 0 5
21844: ST_TO_ADDR
// end ;
21845: LD_VAR 0 6
21849: RET
// export function WantPlant ( unit ) ; var task ; begin
21850: LD_INT 0
21852: PPUSH
21853: PPUSH
// result := false ;
21854: LD_ADDR_VAR 0 2
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21862: LD_ADDR_VAR 0 3
21866: PUSH
21867: LD_VAR 0 1
21871: PPUSH
21872: CALL_OW 437
21876: ST_TO_ADDR
// if task then
21877: LD_VAR 0 3
21881: IFFALSE 21909
// if task [ 1 ] [ 1 ] = p then
21883: LD_VAR 0 3
21887: PUSH
21888: LD_INT 1
21890: ARRAY
21891: PUSH
21892: LD_INT 1
21894: ARRAY
21895: PUSH
21896: LD_STRING p
21898: EQUAL
21899: IFFALSE 21909
// result := true ;
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 1
21908: ST_TO_ADDR
// end ;
21909: LD_VAR 0 2
21913: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21914: LD_INT 0
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
// if pos < 1 then
21920: LD_VAR 0 2
21924: PUSH
21925: LD_INT 1
21927: LESS
21928: IFFALSE 21932
// exit ;
21930: GO 22235
// if pos = 1 then
21932: LD_VAR 0 2
21936: PUSH
21937: LD_INT 1
21939: EQUAL
21940: IFFALSE 21973
// result := Replace ( arr , pos [ 1 ] , value ) else
21942: LD_ADDR_VAR 0 4
21946: PUSH
21947: LD_VAR 0 1
21951: PPUSH
21952: LD_VAR 0 2
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 3
21965: PPUSH
21966: CALL_OW 1
21970: ST_TO_ADDR
21971: GO 22235
// begin tmp := arr ;
21973: LD_ADDR_VAR 0 6
21977: PUSH
21978: LD_VAR 0 1
21982: ST_TO_ADDR
// s_arr := [ tmp ] ;
21983: LD_ADDR_VAR 0 7
21987: PUSH
21988: LD_VAR 0 6
21992: PUSH
21993: EMPTY
21994: LIST
21995: ST_TO_ADDR
// for i = 1 to pos - 1 do
21996: LD_ADDR_VAR 0 5
22000: PUSH
22001: DOUBLE
22002: LD_INT 1
22004: DEC
22005: ST_TO_ADDR
22006: LD_VAR 0 2
22010: PUSH
22011: LD_INT 1
22013: MINUS
22014: PUSH
22015: FOR_TO
22016: IFFALSE 22061
// begin tmp := tmp [ pos [ i ] ] ;
22018: LD_ADDR_VAR 0 6
22022: PUSH
22023: LD_VAR 0 6
22027: PUSH
22028: LD_VAR 0 2
22032: PUSH
22033: LD_VAR 0 5
22037: ARRAY
22038: ARRAY
22039: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22040: LD_ADDR_VAR 0 7
22044: PUSH
22045: LD_VAR 0 7
22049: PUSH
22050: LD_VAR 0 6
22054: PUSH
22055: EMPTY
22056: LIST
22057: ADD
22058: ST_TO_ADDR
// end ;
22059: GO 22015
22061: POP
22062: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22063: LD_ADDR_VAR 0 6
22067: PUSH
22068: LD_VAR 0 6
22072: PPUSH
22073: LD_VAR 0 2
22077: PUSH
22078: LD_VAR 0 2
22082: ARRAY
22083: PPUSH
22084: LD_VAR 0 3
22088: PPUSH
22089: CALL_OW 1
22093: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22094: LD_ADDR_VAR 0 7
22098: PUSH
22099: LD_VAR 0 7
22103: PPUSH
22104: LD_VAR 0 7
22108: PPUSH
22109: LD_VAR 0 6
22113: PPUSH
22114: CALL_OW 1
22118: ST_TO_ADDR
// for i = s_arr downto 2 do
22119: LD_ADDR_VAR 0 5
22123: PUSH
22124: DOUBLE
22125: LD_VAR 0 7
22129: INC
22130: ST_TO_ADDR
22131: LD_INT 2
22133: PUSH
22134: FOR_DOWNTO
22135: IFFALSE 22219
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22137: LD_ADDR_VAR 0 6
22141: PUSH
22142: LD_VAR 0 7
22146: PUSH
22147: LD_VAR 0 5
22151: PUSH
22152: LD_INT 1
22154: MINUS
22155: ARRAY
22156: PPUSH
22157: LD_VAR 0 2
22161: PUSH
22162: LD_VAR 0 5
22166: PUSH
22167: LD_INT 1
22169: MINUS
22170: ARRAY
22171: PPUSH
22172: LD_VAR 0 7
22176: PUSH
22177: LD_VAR 0 5
22181: ARRAY
22182: PPUSH
22183: CALL_OW 1
22187: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22188: LD_ADDR_VAR 0 7
22192: PUSH
22193: LD_VAR 0 7
22197: PPUSH
22198: LD_VAR 0 5
22202: PUSH
22203: LD_INT 1
22205: MINUS
22206: PPUSH
22207: LD_VAR 0 6
22211: PPUSH
22212: CALL_OW 1
22216: ST_TO_ADDR
// end ;
22217: GO 22134
22219: POP
22220: POP
// result := s_arr [ 1 ] ;
22221: LD_ADDR_VAR 0 4
22225: PUSH
22226: LD_VAR 0 7
22230: PUSH
22231: LD_INT 1
22233: ARRAY
22234: ST_TO_ADDR
// end ; end ;
22235: LD_VAR 0 4
22239: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22240: LD_INT 0
22242: PPUSH
22243: PPUSH
// if not list then
22244: LD_VAR 0 1
22248: NOT
22249: IFFALSE 22253
// exit ;
22251: GO 22344
// i := list [ pos1 ] ;
22253: LD_ADDR_VAR 0 5
22257: PUSH
22258: LD_VAR 0 1
22262: PUSH
22263: LD_VAR 0 2
22267: ARRAY
22268: ST_TO_ADDR
// if not i then
22269: LD_VAR 0 5
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22344
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22278: LD_ADDR_VAR 0 1
22282: PUSH
22283: LD_VAR 0 1
22287: PPUSH
22288: LD_VAR 0 2
22292: PPUSH
22293: LD_VAR 0 1
22297: PUSH
22298: LD_VAR 0 3
22302: ARRAY
22303: PPUSH
22304: CALL_OW 1
22308: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22309: LD_ADDR_VAR 0 1
22313: PUSH
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_VAR 0 3
22323: PPUSH
22324: LD_VAR 0 5
22328: PPUSH
22329: CALL_OW 1
22333: ST_TO_ADDR
// result := list ;
22334: LD_ADDR_VAR 0 4
22338: PUSH
22339: LD_VAR 0 1
22343: ST_TO_ADDR
// end ;
22344: LD_VAR 0 4
22348: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22349: LD_INT 0
22351: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22352: LD_ADDR_VAR 0 5
22356: PUSH
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 250
22366: PPUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 251
22376: PPUSH
22377: LD_VAR 0 2
22381: PPUSH
22382: LD_VAR 0 3
22386: PPUSH
22387: LD_VAR 0 4
22391: PPUSH
22392: CALL 22770 0 5
22396: ST_TO_ADDR
// end ;
22397: LD_VAR 0 5
22401: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22402: LD_INT 0
22404: PPUSH
22405: PPUSH
22406: PPUSH
22407: PPUSH
// if not list or not unit then
22408: LD_VAR 0 2
22412: NOT
22413: PUSH
22414: LD_VAR 0 1
22418: NOT
22419: OR
22420: IFFALSE 22424
// exit ;
22422: GO 22765
// result := [ ] ;
22424: LD_ADDR_VAR 0 5
22428: PUSH
22429: EMPTY
22430: ST_TO_ADDR
// for i in list do
22431: LD_ADDR_VAR 0 6
22435: PUSH
22436: LD_VAR 0 2
22440: PUSH
22441: FOR_IN
22442: IFFALSE 22660
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22444: LD_ADDR_VAR 0 8
22448: PUSH
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_VAR 0 6
22458: PUSH
22459: LD_INT 1
22461: ARRAY
22462: PPUSH
22463: LD_VAR 0 6
22467: PUSH
22468: LD_INT 2
22470: ARRAY
22471: PPUSH
22472: CALL_OW 297
22476: ST_TO_ADDR
// if not Count ( result ) then
22477: LD_VAR 0 5
22481: PPUSH
22482: CALL 19054 0 1
22486: NOT
22487: IFFALSE 22520
// begin result := Join ( result , [ i , tmp ] ) ;
22489: LD_ADDR_VAR 0 5
22493: PUSH
22494: LD_VAR 0 5
22498: PPUSH
22499: LD_VAR 0 6
22503: PUSH
22504: LD_VAR 0 8
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PPUSH
22513: CALL 54663 0 2
22517: ST_TO_ADDR
// continue ;
22518: GO 22441
// end ; if result [ result ] [ 2 ] <= tmp then
22520: LD_VAR 0 5
22524: PUSH
22525: LD_VAR 0 5
22529: ARRAY
22530: PUSH
22531: LD_INT 2
22533: ARRAY
22534: PUSH
22535: LD_VAR 0 8
22539: LESSEQUAL
22540: IFFALSE 22573
// result := Join ( result , [ i , tmp ] ) else
22542: LD_ADDR_VAR 0 5
22546: PUSH
22547: LD_VAR 0 5
22551: PPUSH
22552: LD_VAR 0 6
22556: PUSH
22557: LD_VAR 0 8
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PPUSH
22566: CALL 54663 0 2
22570: ST_TO_ADDR
22571: GO 22658
// begin for j := 1 to Count ( result ) do
22573: LD_ADDR_VAR 0 7
22577: PUSH
22578: DOUBLE
22579: LD_INT 1
22581: DEC
22582: ST_TO_ADDR
22583: LD_VAR 0 5
22587: PPUSH
22588: CALL 19054 0 1
22592: PUSH
22593: FOR_TO
22594: IFFALSE 22656
// begin if tmp < result [ j ] [ 2 ] then
22596: LD_VAR 0 8
22600: PUSH
22601: LD_VAR 0 5
22605: PUSH
22606: LD_VAR 0 7
22610: ARRAY
22611: PUSH
22612: LD_INT 2
22614: ARRAY
22615: LESS
22616: IFFALSE 22654
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22618: LD_ADDR_VAR 0 5
22622: PUSH
22623: LD_VAR 0 5
22627: PPUSH
22628: LD_VAR 0 7
22632: PPUSH
22633: LD_VAR 0 6
22637: PUSH
22638: LD_VAR 0 8
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL_OW 2
22651: ST_TO_ADDR
// break ;
22652: GO 22656
// end ; end ;
22654: GO 22593
22656: POP
22657: POP
// end ; end ;
22658: GO 22441
22660: POP
22661: POP
// if result and not asc then
22662: LD_VAR 0 5
22666: PUSH
22667: LD_VAR 0 3
22671: NOT
22672: AND
22673: IFFALSE 22690
// result := ReverseArray ( result ) ;
22675: LD_ADDR_VAR 0 5
22679: PUSH
22680: LD_VAR 0 5
22684: PPUSH
22685: CALL 49930 0 1
22689: ST_TO_ADDR
// tmp := [ ] ;
22690: LD_ADDR_VAR 0 8
22694: PUSH
22695: EMPTY
22696: ST_TO_ADDR
// if mode then
22697: LD_VAR 0 4
22701: IFFALSE 22765
// begin for i := 1 to result do
22703: LD_ADDR_VAR 0 6
22707: PUSH
22708: DOUBLE
22709: LD_INT 1
22711: DEC
22712: ST_TO_ADDR
22713: LD_VAR 0 5
22717: PUSH
22718: FOR_TO
22719: IFFALSE 22753
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22721: LD_ADDR_VAR 0 8
22725: PUSH
22726: LD_VAR 0 8
22730: PPUSH
22731: LD_VAR 0 5
22735: PUSH
22736: LD_VAR 0 6
22740: ARRAY
22741: PUSH
22742: LD_INT 1
22744: ARRAY
22745: PPUSH
22746: CALL 54663 0 2
22750: ST_TO_ADDR
22751: GO 22718
22753: POP
22754: POP
// result := tmp ;
22755: LD_ADDR_VAR 0 5
22759: PUSH
22760: LD_VAR 0 8
22764: ST_TO_ADDR
// end ; end ;
22765: LD_VAR 0 5
22769: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22770: LD_INT 0
22772: PPUSH
22773: PPUSH
22774: PPUSH
22775: PPUSH
// if not list then
22776: LD_VAR 0 3
22780: NOT
22781: IFFALSE 22785
// exit ;
22783: GO 23173
// result := [ ] ;
22785: LD_ADDR_VAR 0 6
22789: PUSH
22790: EMPTY
22791: ST_TO_ADDR
// for i in list do
22792: LD_ADDR_VAR 0 7
22796: PUSH
22797: LD_VAR 0 3
22801: PUSH
22802: FOR_IN
22803: IFFALSE 23005
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22805: LD_ADDR_VAR 0 9
22809: PUSH
22810: LD_VAR 0 7
22814: PPUSH
22815: LD_VAR 0 1
22819: PPUSH
22820: LD_VAR 0 2
22824: PPUSH
22825: CALL_OW 297
22829: ST_TO_ADDR
// if not result then
22830: LD_VAR 0 6
22834: NOT
22835: IFFALSE 22861
// result := [ [ i , tmp ] ] else
22837: LD_ADDR_VAR 0 6
22841: PUSH
22842: LD_VAR 0 7
22846: PUSH
22847: LD_VAR 0 9
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: EMPTY
22857: LIST
22858: ST_TO_ADDR
22859: GO 23003
// begin if result [ result ] [ 2 ] <= tmp then
22861: LD_VAR 0 6
22865: PUSH
22866: LD_VAR 0 6
22870: ARRAY
22871: PUSH
22872: LD_INT 2
22874: ARRAY
22875: PUSH
22876: LD_VAR 0 9
22880: LESSEQUAL
22881: IFFALSE 22923
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22883: LD_ADDR_VAR 0 6
22887: PUSH
22888: LD_VAR 0 6
22892: PPUSH
22893: LD_VAR 0 6
22897: PUSH
22898: LD_INT 1
22900: PLUS
22901: PPUSH
22902: LD_VAR 0 7
22906: PUSH
22907: LD_VAR 0 9
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PPUSH
22916: CALL_OW 2
22920: ST_TO_ADDR
22921: GO 23003
// for j := 1 to result do
22923: LD_ADDR_VAR 0 8
22927: PUSH
22928: DOUBLE
22929: LD_INT 1
22931: DEC
22932: ST_TO_ADDR
22933: LD_VAR 0 6
22937: PUSH
22938: FOR_TO
22939: IFFALSE 23001
// begin if tmp < result [ j ] [ 2 ] then
22941: LD_VAR 0 9
22945: PUSH
22946: LD_VAR 0 6
22950: PUSH
22951: LD_VAR 0 8
22955: ARRAY
22956: PUSH
22957: LD_INT 2
22959: ARRAY
22960: LESS
22961: IFFALSE 22999
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22963: LD_ADDR_VAR 0 6
22967: PUSH
22968: LD_VAR 0 6
22972: PPUSH
22973: LD_VAR 0 8
22977: PPUSH
22978: LD_VAR 0 7
22982: PUSH
22983: LD_VAR 0 9
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PPUSH
22992: CALL_OW 2
22996: ST_TO_ADDR
// break ;
22997: GO 23001
// end ; end ;
22999: GO 22938
23001: POP
23002: POP
// end ; end ;
23003: GO 22802
23005: POP
23006: POP
// if result and not asc then
23007: LD_VAR 0 6
23011: PUSH
23012: LD_VAR 0 4
23016: NOT
23017: AND
23018: IFFALSE 23093
// begin tmp := result ;
23020: LD_ADDR_VAR 0 9
23024: PUSH
23025: LD_VAR 0 6
23029: ST_TO_ADDR
// for i = tmp downto 1 do
23030: LD_ADDR_VAR 0 7
23034: PUSH
23035: DOUBLE
23036: LD_VAR 0 9
23040: INC
23041: ST_TO_ADDR
23042: LD_INT 1
23044: PUSH
23045: FOR_DOWNTO
23046: IFFALSE 23091
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23048: LD_ADDR_VAR 0 6
23052: PUSH
23053: LD_VAR 0 6
23057: PPUSH
23058: LD_VAR 0 9
23062: PUSH
23063: LD_VAR 0 7
23067: MINUS
23068: PUSH
23069: LD_INT 1
23071: PLUS
23072: PPUSH
23073: LD_VAR 0 9
23077: PUSH
23078: LD_VAR 0 7
23082: ARRAY
23083: PPUSH
23084: CALL_OW 1
23088: ST_TO_ADDR
23089: GO 23045
23091: POP
23092: POP
// end ; tmp := [ ] ;
23093: LD_ADDR_VAR 0 9
23097: PUSH
23098: EMPTY
23099: ST_TO_ADDR
// if mode then
23100: LD_VAR 0 5
23104: IFFALSE 23173
// begin for i = 1 to result do
23106: LD_ADDR_VAR 0 7
23110: PUSH
23111: DOUBLE
23112: LD_INT 1
23114: DEC
23115: ST_TO_ADDR
23116: LD_VAR 0 6
23120: PUSH
23121: FOR_TO
23122: IFFALSE 23161
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23124: LD_ADDR_VAR 0 9
23128: PUSH
23129: LD_VAR 0 9
23133: PPUSH
23134: LD_VAR 0 7
23138: PPUSH
23139: LD_VAR 0 6
23143: PUSH
23144: LD_VAR 0 7
23148: ARRAY
23149: PUSH
23150: LD_INT 1
23152: ARRAY
23153: PPUSH
23154: CALL_OW 1
23158: ST_TO_ADDR
23159: GO 23121
23161: POP
23162: POP
// result := tmp ;
23163: LD_ADDR_VAR 0 6
23167: PUSH
23168: LD_VAR 0 9
23172: ST_TO_ADDR
// end ; end ;
23173: LD_VAR 0 6
23177: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23178: LD_INT 0
23180: PPUSH
23181: PPUSH
23182: PPUSH
23183: PPUSH
23184: PPUSH
23185: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23186: LD_ADDR_VAR 0 5
23190: PUSH
23191: LD_INT 0
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: EMPTY
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: ST_TO_ADDR
// if not x or not y then
23208: LD_VAR 0 2
23212: NOT
23213: PUSH
23214: LD_VAR 0 3
23218: NOT
23219: OR
23220: IFFALSE 23224
// exit ;
23222: GO 24874
// if not range then
23224: LD_VAR 0 4
23228: NOT
23229: IFFALSE 23239
// range := 10 ;
23231: LD_ADDR_VAR 0 4
23235: PUSH
23236: LD_INT 10
23238: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23239: LD_ADDR_VAR 0 8
23243: PUSH
23244: LD_INT 81
23246: PUSH
23247: LD_VAR 0 1
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 92
23258: PUSH
23259: LD_VAR 0 2
23263: PUSH
23264: LD_VAR 0 3
23268: PUSH
23269: LD_VAR 0 4
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 21
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: LIST
23301: PPUSH
23302: CALL_OW 69
23306: ST_TO_ADDR
// if not tmp then
23307: LD_VAR 0 8
23311: NOT
23312: IFFALSE 23316
// exit ;
23314: GO 24874
// for i in tmp do
23316: LD_ADDR_VAR 0 6
23320: PUSH
23321: LD_VAR 0 8
23325: PUSH
23326: FOR_IN
23327: IFFALSE 24849
// begin points := [ 0 , 0 , 0 ] ;
23329: LD_ADDR_VAR 0 9
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 0
23339: PUSH
23340: LD_INT 0
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: ST_TO_ADDR
// bpoints := 1 ;
23348: LD_ADDR_VAR 0 10
23352: PUSH
23353: LD_INT 1
23355: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23356: LD_VAR 0 6
23360: PPUSH
23361: CALL_OW 247
23365: PUSH
23366: LD_INT 1
23368: DOUBLE
23369: EQUAL
23370: IFTRUE 23374
23372: GO 23952
23374: POP
// begin if GetClass ( i ) = 1 then
23375: LD_VAR 0 6
23379: PPUSH
23380: CALL_OW 257
23384: PUSH
23385: LD_INT 1
23387: EQUAL
23388: IFFALSE 23409
// points := [ 10 , 5 , 3 ] ;
23390: LD_ADDR_VAR 0 9
23394: PUSH
23395: LD_INT 10
23397: PUSH
23398: LD_INT 5
23400: PUSH
23401: LD_INT 3
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23409: LD_VAR 0 6
23413: PPUSH
23414: CALL_OW 257
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: LD_INT 4
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: LIST
23432: IN
23433: IFFALSE 23454
// points := [ 3 , 2 , 1 ] ;
23435: LD_ADDR_VAR 0 9
23439: PUSH
23440: LD_INT 3
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 1
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: LIST
23453: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23454: LD_VAR 0 6
23458: PPUSH
23459: CALL_OW 257
23463: PUSH
23464: LD_INT 5
23466: EQUAL
23467: IFFALSE 23488
// points := [ 130 , 5 , 2 ] ;
23469: LD_ADDR_VAR 0 9
23473: PUSH
23474: LD_INT 130
23476: PUSH
23477: LD_INT 5
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23488: LD_VAR 0 6
23492: PPUSH
23493: CALL_OW 257
23497: PUSH
23498: LD_INT 8
23500: EQUAL
23501: IFFALSE 23522
// points := [ 35 , 35 , 30 ] ;
23503: LD_ADDR_VAR 0 9
23507: PUSH
23508: LD_INT 35
23510: PUSH
23511: LD_INT 35
23513: PUSH
23514: LD_INT 30
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: LIST
23521: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23522: LD_VAR 0 6
23526: PPUSH
23527: CALL_OW 257
23531: PUSH
23532: LD_INT 9
23534: EQUAL
23535: IFFALSE 23556
// points := [ 20 , 55 , 40 ] ;
23537: LD_ADDR_VAR 0 9
23541: PUSH
23542: LD_INT 20
23544: PUSH
23545: LD_INT 55
23547: PUSH
23548: LD_INT 40
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23556: LD_VAR 0 6
23560: PPUSH
23561: CALL_OW 257
23565: PUSH
23566: LD_INT 12
23568: PUSH
23569: LD_INT 16
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: IN
23576: IFFALSE 23597
// points := [ 5 , 3 , 2 ] ;
23578: LD_ADDR_VAR 0 9
23582: PUSH
23583: LD_INT 5
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: LIST
23596: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23597: LD_VAR 0 6
23601: PPUSH
23602: CALL_OW 257
23606: PUSH
23607: LD_INT 17
23609: EQUAL
23610: IFFALSE 23631
// points := [ 100 , 50 , 75 ] ;
23612: LD_ADDR_VAR 0 9
23616: PUSH
23617: LD_INT 100
23619: PUSH
23620: LD_INT 50
23622: PUSH
23623: LD_INT 75
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: LIST
23630: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23631: LD_VAR 0 6
23635: PPUSH
23636: CALL_OW 257
23640: PUSH
23641: LD_INT 15
23643: EQUAL
23644: IFFALSE 23665
// points := [ 10 , 5 , 3 ] ;
23646: LD_ADDR_VAR 0 9
23650: PUSH
23651: LD_INT 10
23653: PUSH
23654: LD_INT 5
23656: PUSH
23657: LD_INT 3
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: LIST
23664: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23665: LD_VAR 0 6
23669: PPUSH
23670: CALL_OW 257
23674: PUSH
23675: LD_INT 14
23677: EQUAL
23678: IFFALSE 23699
// points := [ 10 , 0 , 0 ] ;
23680: LD_ADDR_VAR 0 9
23684: PUSH
23685: LD_INT 10
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 0
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23699: LD_VAR 0 6
23703: PPUSH
23704: CALL_OW 257
23708: PUSH
23709: LD_INT 11
23711: EQUAL
23712: IFFALSE 23733
// points := [ 30 , 10 , 5 ] ;
23714: LD_ADDR_VAR 0 9
23718: PUSH
23719: LD_INT 30
23721: PUSH
23722: LD_INT 10
23724: PUSH
23725: LD_INT 5
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23733: LD_VAR 0 1
23737: PPUSH
23738: LD_INT 5
23740: PPUSH
23741: CALL_OW 321
23745: PUSH
23746: LD_INT 2
23748: EQUAL
23749: IFFALSE 23766
// bpoints := bpoints * 1.8 ;
23751: LD_ADDR_VAR 0 10
23755: PUSH
23756: LD_VAR 0 10
23760: PUSH
23761: LD_REAL  1.80000000000000E+0000
23764: MUL
23765: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23766: LD_VAR 0 6
23770: PPUSH
23771: CALL_OW 257
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: LD_INT 4
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: IN
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: LD_INT 51
23802: PPUSH
23803: CALL_OW 321
23807: PUSH
23808: LD_INT 2
23810: EQUAL
23811: AND
23812: IFFALSE 23829
// bpoints := bpoints * 1.2 ;
23814: LD_ADDR_VAR 0 10
23818: PUSH
23819: LD_VAR 0 10
23823: PUSH
23824: LD_REAL  1.20000000000000E+0000
23827: MUL
23828: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23829: LD_VAR 0 6
23833: PPUSH
23834: CALL_OW 257
23838: PUSH
23839: LD_INT 5
23841: PUSH
23842: LD_INT 7
23844: PUSH
23845: LD_INT 9
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: IN
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: LD_INT 52
23861: PPUSH
23862: CALL_OW 321
23866: PUSH
23867: LD_INT 2
23869: EQUAL
23870: AND
23871: IFFALSE 23888
// bpoints := bpoints * 1.5 ;
23873: LD_ADDR_VAR 0 10
23877: PUSH
23878: LD_VAR 0 10
23882: PUSH
23883: LD_REAL  1.50000000000000E+0000
23886: MUL
23887: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23888: LD_VAR 0 1
23892: PPUSH
23893: LD_INT 66
23895: PPUSH
23896: CALL_OW 321
23900: PUSH
23901: LD_INT 2
23903: EQUAL
23904: IFFALSE 23921
// bpoints := bpoints * 1.1 ;
23906: LD_ADDR_VAR 0 10
23910: PUSH
23911: LD_VAR 0 10
23915: PUSH
23916: LD_REAL  1.10000000000000E+0000
23919: MUL
23920: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23921: LD_ADDR_VAR 0 10
23925: PUSH
23926: LD_VAR 0 10
23930: PUSH
23931: LD_VAR 0 6
23935: PPUSH
23936: LD_INT 1
23938: PPUSH
23939: CALL_OW 259
23943: PUSH
23944: LD_REAL  1.15000000000000E+0000
23947: MUL
23948: MUL
23949: ST_TO_ADDR
// end ; unit_vehicle :
23950: GO 24778
23952: LD_INT 2
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 24766
23960: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23961: LD_VAR 0 6
23965: PPUSH
23966: CALL_OW 264
23970: PUSH
23971: LD_INT 2
23973: PUSH
23974: LD_INT 42
23976: PUSH
23977: LD_INT 24
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: LIST
23984: IN
23985: IFFALSE 24006
// points := [ 25 , 5 , 3 ] ;
23987: LD_ADDR_VAR 0 9
23991: PUSH
23992: LD_INT 25
23994: PUSH
23995: LD_INT 5
23997: PUSH
23998: LD_INT 3
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: LIST
24005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24006: LD_VAR 0 6
24010: PPUSH
24011: CALL_OW 264
24015: PUSH
24016: LD_INT 4
24018: PUSH
24019: LD_INT 43
24021: PUSH
24022: LD_INT 25
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: IN
24030: IFFALSE 24051
// points := [ 40 , 15 , 5 ] ;
24032: LD_ADDR_VAR 0 9
24036: PUSH
24037: LD_INT 40
24039: PUSH
24040: LD_INT 15
24042: PUSH
24043: LD_INT 5
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24051: LD_VAR 0 6
24055: PPUSH
24056: CALL_OW 264
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: LD_INT 23
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: IN
24071: IFFALSE 24092
// points := [ 7 , 25 , 8 ] ;
24073: LD_ADDR_VAR 0 9
24077: PUSH
24078: LD_INT 7
24080: PUSH
24081: LD_INT 25
24083: PUSH
24084: LD_INT 8
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24092: LD_VAR 0 6
24096: PPUSH
24097: CALL_OW 264
24101: PUSH
24102: LD_INT 5
24104: PUSH
24105: LD_INT 27
24107: PUSH
24108: LD_INT 44
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: LIST
24115: IN
24116: IFFALSE 24137
// points := [ 14 , 50 , 16 ] ;
24118: LD_ADDR_VAR 0 9
24122: PUSH
24123: LD_INT 14
24125: PUSH
24126: LD_INT 50
24128: PUSH
24129: LD_INT 16
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24137: LD_VAR 0 6
24141: PPUSH
24142: CALL_OW 264
24146: PUSH
24147: LD_INT 6
24149: PUSH
24150: LD_INT 46
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: IN
24157: IFFALSE 24178
// points := [ 32 , 120 , 70 ] ;
24159: LD_ADDR_VAR 0 9
24163: PUSH
24164: LD_INT 32
24166: PUSH
24167: LD_INT 120
24169: PUSH
24170: LD_INT 70
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24178: LD_VAR 0 6
24182: PPUSH
24183: CALL_OW 264
24187: PUSH
24188: LD_INT 7
24190: PUSH
24191: LD_INT 28
24193: PUSH
24194: LD_INT 45
24196: PUSH
24197: LD_INT 92
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: IN
24206: IFFALSE 24227
// points := [ 35 , 20 , 45 ] ;
24208: LD_ADDR_VAR 0 9
24212: PUSH
24213: LD_INT 35
24215: PUSH
24216: LD_INT 20
24218: PUSH
24219: LD_INT 45
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 264
24236: PUSH
24237: LD_INT 47
24239: PUSH
24240: EMPTY
24241: LIST
24242: IN
24243: IFFALSE 24264
// points := [ 67 , 45 , 75 ] ;
24245: LD_ADDR_VAR 0 9
24249: PUSH
24250: LD_INT 67
24252: PUSH
24253: LD_INT 45
24255: PUSH
24256: LD_INT 75
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: LIST
24263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24264: LD_VAR 0 6
24268: PPUSH
24269: CALL_OW 264
24273: PUSH
24274: LD_INT 26
24276: PUSH
24277: EMPTY
24278: LIST
24279: IN
24280: IFFALSE 24301
// points := [ 120 , 30 , 80 ] ;
24282: LD_ADDR_VAR 0 9
24286: PUSH
24287: LD_INT 120
24289: PUSH
24290: LD_INT 30
24292: PUSH
24293: LD_INT 80
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24301: LD_VAR 0 6
24305: PPUSH
24306: CALL_OW 264
24310: PUSH
24311: LD_INT 22
24313: PUSH
24314: EMPTY
24315: LIST
24316: IN
24317: IFFALSE 24338
// points := [ 40 , 1 , 1 ] ;
24319: LD_ADDR_VAR 0 9
24323: PUSH
24324: LD_INT 40
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24338: LD_VAR 0 6
24342: PPUSH
24343: CALL_OW 264
24347: PUSH
24348: LD_INT 29
24350: PUSH
24351: EMPTY
24352: LIST
24353: IN
24354: IFFALSE 24375
// points := [ 70 , 200 , 400 ] ;
24356: LD_ADDR_VAR 0 9
24360: PUSH
24361: LD_INT 70
24363: PUSH
24364: LD_INT 200
24366: PUSH
24367: LD_INT 400
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: LIST
24374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24375: LD_VAR 0 6
24379: PPUSH
24380: CALL_OW 264
24384: PUSH
24385: LD_INT 14
24387: PUSH
24388: LD_INT 53
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: IN
24395: IFFALSE 24416
// points := [ 40 , 10 , 20 ] ;
24397: LD_ADDR_VAR 0 9
24401: PUSH
24402: LD_INT 40
24404: PUSH
24405: LD_INT 10
24407: PUSH
24408: LD_INT 20
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24416: LD_VAR 0 6
24420: PPUSH
24421: CALL_OW 264
24425: PUSH
24426: LD_INT 9
24428: PUSH
24429: EMPTY
24430: LIST
24431: IN
24432: IFFALSE 24453
// points := [ 5 , 70 , 20 ] ;
24434: LD_ADDR_VAR 0 9
24438: PUSH
24439: LD_INT 5
24441: PUSH
24442: LD_INT 70
24444: PUSH
24445: LD_INT 20
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24453: LD_VAR 0 6
24457: PPUSH
24458: CALL_OW 264
24462: PUSH
24463: LD_INT 10
24465: PUSH
24466: EMPTY
24467: LIST
24468: IN
24469: IFFALSE 24490
// points := [ 35 , 110 , 70 ] ;
24471: LD_ADDR_VAR 0 9
24475: PUSH
24476: LD_INT 35
24478: PUSH
24479: LD_INT 110
24481: PUSH
24482: LD_INT 70
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24490: LD_VAR 0 6
24494: PPUSH
24495: CALL_OW 265
24499: PUSH
24500: LD_INT 25
24502: EQUAL
24503: IFFALSE 24524
// points := [ 80 , 65 , 100 ] ;
24505: LD_ADDR_VAR 0 9
24509: PUSH
24510: LD_INT 80
24512: PUSH
24513: LD_INT 65
24515: PUSH
24516: LD_INT 100
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: LIST
24523: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24524: LD_VAR 0 6
24528: PPUSH
24529: CALL_OW 263
24533: PUSH
24534: LD_INT 1
24536: EQUAL
24537: IFFALSE 24572
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24539: LD_ADDR_VAR 0 10
24543: PUSH
24544: LD_VAR 0 10
24548: PUSH
24549: LD_VAR 0 6
24553: PPUSH
24554: CALL_OW 311
24558: PPUSH
24559: LD_INT 3
24561: PPUSH
24562: CALL_OW 259
24566: PUSH
24567: LD_INT 4
24569: MUL
24570: MUL
24571: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24572: LD_VAR 0 6
24576: PPUSH
24577: CALL_OW 263
24581: PUSH
24582: LD_INT 2
24584: EQUAL
24585: IFFALSE 24636
// begin j := IsControledBy ( i ) ;
24587: LD_ADDR_VAR 0 7
24591: PUSH
24592: LD_VAR 0 6
24596: PPUSH
24597: CALL_OW 312
24601: ST_TO_ADDR
// if j then
24602: LD_VAR 0 7
24606: IFFALSE 24636
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24608: LD_ADDR_VAR 0 10
24612: PUSH
24613: LD_VAR 0 10
24617: PUSH
24618: LD_VAR 0 7
24622: PPUSH
24623: LD_INT 3
24625: PPUSH
24626: CALL_OW 259
24630: PUSH
24631: LD_INT 3
24633: MUL
24634: MUL
24635: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24636: LD_VAR 0 6
24640: PPUSH
24641: CALL_OW 264
24645: PUSH
24646: LD_INT 5
24648: PUSH
24649: LD_INT 6
24651: PUSH
24652: LD_INT 46
24654: PUSH
24655: LD_INT 44
24657: PUSH
24658: LD_INT 47
24660: PUSH
24661: LD_INT 45
24663: PUSH
24664: LD_INT 28
24666: PUSH
24667: LD_INT 7
24669: PUSH
24670: LD_INT 27
24672: PUSH
24673: LD_INT 29
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: IN
24688: PUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: LD_INT 52
24696: PPUSH
24697: CALL_OW 321
24701: PUSH
24702: LD_INT 2
24704: EQUAL
24705: AND
24706: IFFALSE 24723
// bpoints := bpoints * 1.2 ;
24708: LD_ADDR_VAR 0 10
24712: PUSH
24713: LD_VAR 0 10
24717: PUSH
24718: LD_REAL  1.20000000000000E+0000
24721: MUL
24722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24723: LD_VAR 0 6
24727: PPUSH
24728: CALL_OW 264
24732: PUSH
24733: LD_INT 6
24735: PUSH
24736: LD_INT 46
24738: PUSH
24739: LD_INT 47
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: IN
24747: IFFALSE 24764
// bpoints := bpoints * 1.2 ;
24749: LD_ADDR_VAR 0 10
24753: PUSH
24754: LD_VAR 0 10
24758: PUSH
24759: LD_REAL  1.20000000000000E+0000
24762: MUL
24763: ST_TO_ADDR
// end ; unit_building :
24764: GO 24778
24766: LD_INT 3
24768: DOUBLE
24769: EQUAL
24770: IFTRUE 24774
24772: GO 24777
24774: POP
// ; end ;
24775: GO 24778
24777: POP
// for j = 1 to 3 do
24778: LD_ADDR_VAR 0 7
24782: PUSH
24783: DOUBLE
24784: LD_INT 1
24786: DEC
24787: ST_TO_ADDR
24788: LD_INT 3
24790: PUSH
24791: FOR_TO
24792: IFFALSE 24845
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24794: LD_ADDR_VAR 0 5
24798: PUSH
24799: LD_VAR 0 5
24803: PPUSH
24804: LD_VAR 0 7
24808: PPUSH
24809: LD_VAR 0 5
24813: PUSH
24814: LD_VAR 0 7
24818: ARRAY
24819: PUSH
24820: LD_VAR 0 9
24824: PUSH
24825: LD_VAR 0 7
24829: ARRAY
24830: PUSH
24831: LD_VAR 0 10
24835: MUL
24836: PLUS
24837: PPUSH
24838: CALL_OW 1
24842: ST_TO_ADDR
24843: GO 24791
24845: POP
24846: POP
// end ;
24847: GO 23326
24849: POP
24850: POP
// result := Replace ( result , 4 , tmp ) ;
24851: LD_ADDR_VAR 0 5
24855: PUSH
24856: LD_VAR 0 5
24860: PPUSH
24861: LD_INT 4
24863: PPUSH
24864: LD_VAR 0 8
24868: PPUSH
24869: CALL_OW 1
24873: ST_TO_ADDR
// end ;
24874: LD_VAR 0 5
24878: RET
// export function DangerAtRange ( unit , range ) ; begin
24879: LD_INT 0
24881: PPUSH
// if not unit then
24882: LD_VAR 0 1
24886: NOT
24887: IFFALSE 24891
// exit ;
24889: GO 24936
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24891: LD_ADDR_VAR 0 3
24895: PUSH
24896: LD_VAR 0 1
24900: PPUSH
24901: CALL_OW 255
24905: PPUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 250
24915: PPUSH
24916: LD_VAR 0 1
24920: PPUSH
24921: CALL_OW 251
24925: PPUSH
24926: LD_VAR 0 2
24930: PPUSH
24931: CALL 23178 0 4
24935: ST_TO_ADDR
// end ;
24936: LD_VAR 0 3
24940: RET
// export function DangerInArea ( side , area ) ; begin
24941: LD_INT 0
24943: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_VAR 0 2
24953: PPUSH
24954: LD_INT 81
24956: PUSH
24957: LD_VAR 0 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PPUSH
24966: CALL_OW 70
24970: ST_TO_ADDR
// end ;
24971: LD_VAR 0 3
24975: RET
// export function IsExtension ( b ) ; begin
24976: LD_INT 0
24978: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24979: LD_ADDR_VAR 0 2
24983: PUSH
24984: LD_VAR 0 1
24988: PUSH
24989: LD_INT 23
24991: PUSH
24992: LD_INT 20
24994: PUSH
24995: LD_INT 22
24997: PUSH
24998: LD_INT 17
25000: PUSH
25001: LD_INT 24
25003: PUSH
25004: LD_INT 21
25006: PUSH
25007: LD_INT 19
25009: PUSH
25010: LD_INT 16
25012: PUSH
25013: LD_INT 25
25015: PUSH
25016: LD_INT 18
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: IN
25031: ST_TO_ADDR
// end ;
25032: LD_VAR 0 2
25036: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25037: LD_INT 0
25039: PPUSH
25040: PPUSH
25041: PPUSH
// result := [ ] ;
25042: LD_ADDR_VAR 0 4
25046: PUSH
25047: EMPTY
25048: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25049: LD_ADDR_VAR 0 5
25053: PUSH
25054: LD_VAR 0 2
25058: PPUSH
25059: LD_INT 21
25061: PUSH
25062: LD_INT 3
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PPUSH
25069: CALL_OW 70
25073: ST_TO_ADDR
// if not tmp then
25074: LD_VAR 0 5
25078: NOT
25079: IFFALSE 25083
// exit ;
25081: GO 25147
// if checkLink then
25083: LD_VAR 0 3
25087: IFFALSE 25137
// begin for i in tmp do
25089: LD_ADDR_VAR 0 6
25093: PUSH
25094: LD_VAR 0 5
25098: PUSH
25099: FOR_IN
25100: IFFALSE 25135
// if GetBase ( i ) <> base then
25102: LD_VAR 0 6
25106: PPUSH
25107: CALL_OW 274
25111: PUSH
25112: LD_VAR 0 1
25116: NONEQUAL
25117: IFFALSE 25133
// ComLinkToBase ( base , i ) ;
25119: LD_VAR 0 1
25123: PPUSH
25124: LD_VAR 0 6
25128: PPUSH
25129: CALL_OW 169
25133: GO 25099
25135: POP
25136: POP
// end ; result := tmp ;
25137: LD_ADDR_VAR 0 4
25141: PUSH
25142: LD_VAR 0 5
25146: ST_TO_ADDR
// end ;
25147: LD_VAR 0 4
25151: RET
// export function ComComplete ( units , b ) ; var i ; begin
25152: LD_INT 0
25154: PPUSH
25155: PPUSH
// if not units then
25156: LD_VAR 0 1
25160: NOT
25161: IFFALSE 25165
// exit ;
25163: GO 25255
// for i in units do
25165: LD_ADDR_VAR 0 4
25169: PUSH
25170: LD_VAR 0 1
25174: PUSH
25175: FOR_IN
25176: IFFALSE 25253
// if BuildingStatus ( b ) = bs_build then
25178: LD_VAR 0 2
25182: PPUSH
25183: CALL_OW 461
25187: PUSH
25188: LD_INT 1
25190: EQUAL
25191: IFFALSE 25251
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25193: LD_VAR 0 4
25197: PPUSH
25198: LD_STRING h
25200: PUSH
25201: LD_VAR 0 2
25205: PPUSH
25206: CALL_OW 250
25210: PUSH
25211: LD_VAR 0 2
25215: PPUSH
25216: CALL_OW 251
25220: PUSH
25221: LD_VAR 0 2
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: PUSH
25244: EMPTY
25245: LIST
25246: PPUSH
25247: CALL_OW 446
25251: GO 25175
25253: POP
25254: POP
// end ;
25255: LD_VAR 0 3
25259: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25260: LD_INT 0
25262: PPUSH
25263: PPUSH
25264: PPUSH
25265: PPUSH
25266: PPUSH
25267: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25268: LD_VAR 0 1
25272: NOT
25273: PUSH
25274: LD_VAR 0 1
25278: PPUSH
25279: CALL_OW 263
25283: PUSH
25284: LD_INT 2
25286: NONEQUAL
25287: OR
25288: IFFALSE 25292
// exit ;
25290: GO 25608
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25292: LD_ADDR_VAR 0 6
25296: PUSH
25297: LD_INT 22
25299: PUSH
25300: LD_VAR 0 1
25304: PPUSH
25305: CALL_OW 255
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: LD_INT 30
25319: PUSH
25320: LD_INT 36
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 34
25329: PUSH
25330: LD_INT 31
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PPUSH
25346: CALL_OW 69
25350: ST_TO_ADDR
// if not tmp then
25351: LD_VAR 0 6
25355: NOT
25356: IFFALSE 25360
// exit ;
25358: GO 25608
// result := [ ] ;
25360: LD_ADDR_VAR 0 2
25364: PUSH
25365: EMPTY
25366: ST_TO_ADDR
// for i in tmp do
25367: LD_ADDR_VAR 0 3
25371: PUSH
25372: LD_VAR 0 6
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25449
// begin t := UnitsInside ( i ) ;
25380: LD_ADDR_VAR 0 4
25384: PUSH
25385: LD_VAR 0 3
25389: PPUSH
25390: CALL_OW 313
25394: ST_TO_ADDR
// if t then
25395: LD_VAR 0 4
25399: IFFALSE 25447
// for j in t do
25401: LD_ADDR_VAR 0 7
25405: PUSH
25406: LD_VAR 0 4
25410: PUSH
25411: FOR_IN
25412: IFFALSE 25445
// result := Replace ( result , result + 1 , j ) ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_VAR 0 2
25428: PUSH
25429: LD_INT 1
25431: PLUS
25432: PPUSH
25433: LD_VAR 0 7
25437: PPUSH
25438: CALL_OW 1
25442: ST_TO_ADDR
25443: GO 25411
25445: POP
25446: POP
// end ;
25447: GO 25377
25449: POP
25450: POP
// if not result then
25451: LD_VAR 0 2
25455: NOT
25456: IFFALSE 25460
// exit ;
25458: GO 25608
// mech := result [ 1 ] ;
25460: LD_ADDR_VAR 0 5
25464: PUSH
25465: LD_VAR 0 2
25469: PUSH
25470: LD_INT 1
25472: ARRAY
25473: ST_TO_ADDR
// if result > 1 then
25474: LD_VAR 0 2
25478: PUSH
25479: LD_INT 1
25481: GREATER
25482: IFFALSE 25594
// begin for i = 2 to result do
25484: LD_ADDR_VAR 0 3
25488: PUSH
25489: DOUBLE
25490: LD_INT 2
25492: DEC
25493: ST_TO_ADDR
25494: LD_VAR 0 2
25498: PUSH
25499: FOR_TO
25500: IFFALSE 25592
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25502: LD_ADDR_VAR 0 4
25506: PUSH
25507: LD_VAR 0 2
25511: PUSH
25512: LD_VAR 0 3
25516: ARRAY
25517: PPUSH
25518: LD_INT 3
25520: PPUSH
25521: CALL_OW 259
25525: PUSH
25526: LD_VAR 0 2
25530: PUSH
25531: LD_VAR 0 3
25535: ARRAY
25536: PPUSH
25537: CALL_OW 432
25541: MINUS
25542: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25543: LD_VAR 0 4
25547: PUSH
25548: LD_VAR 0 5
25552: PPUSH
25553: LD_INT 3
25555: PPUSH
25556: CALL_OW 259
25560: PUSH
25561: LD_VAR 0 5
25565: PPUSH
25566: CALL_OW 432
25570: MINUS
25571: GREATEREQUAL
25572: IFFALSE 25590
// mech := result [ i ] ;
25574: LD_ADDR_VAR 0 5
25578: PUSH
25579: LD_VAR 0 2
25583: PUSH
25584: LD_VAR 0 3
25588: ARRAY
25589: ST_TO_ADDR
// end ;
25590: GO 25499
25592: POP
25593: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25594: LD_VAR 0 1
25598: PPUSH
25599: LD_VAR 0 5
25603: PPUSH
25604: CALL_OW 135
// end ;
25608: LD_VAR 0 2
25612: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
// result := [ ] ;
25628: LD_ADDR_VAR 0 7
25632: PUSH
25633: EMPTY
25634: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25635: LD_VAR 0 1
25639: PPUSH
25640: CALL_OW 266
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: IN
25655: NOT
25656: IFFALSE 25660
// exit ;
25658: GO 27294
// if name then
25660: LD_VAR 0 3
25664: IFFALSE 25680
// SetBName ( base_dep , name ) ;
25666: LD_VAR 0 1
25670: PPUSH
25671: LD_VAR 0 3
25675: PPUSH
25676: CALL_OW 500
// base := GetBase ( base_dep ) ;
25680: LD_ADDR_VAR 0 15
25684: PUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 274
25694: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25695: LD_ADDR_VAR 0 16
25699: PUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: CALL_OW 255
25709: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25710: LD_ADDR_VAR 0 17
25714: PUSH
25715: LD_VAR 0 1
25719: PPUSH
25720: CALL_OW 248
25724: ST_TO_ADDR
// if sources then
25725: LD_VAR 0 5
25729: IFFALSE 25776
// for i = 1 to 3 do
25731: LD_ADDR_VAR 0 8
25735: PUSH
25736: DOUBLE
25737: LD_INT 1
25739: DEC
25740: ST_TO_ADDR
25741: LD_INT 3
25743: PUSH
25744: FOR_TO
25745: IFFALSE 25774
// AddResourceType ( base , i , sources [ i ] ) ;
25747: LD_VAR 0 15
25751: PPUSH
25752: LD_VAR 0 8
25756: PPUSH
25757: LD_VAR 0 5
25761: PUSH
25762: LD_VAR 0 8
25766: ARRAY
25767: PPUSH
25768: CALL_OW 276
25772: GO 25744
25774: POP
25775: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25776: LD_ADDR_VAR 0 18
25780: PUSH
25781: LD_VAR 0 15
25785: PPUSH
25786: LD_VAR 0 2
25790: PPUSH
25791: LD_INT 1
25793: PPUSH
25794: CALL 25037 0 3
25798: ST_TO_ADDR
// InitHc ;
25799: CALL_OW 19
// InitUc ;
25803: CALL_OW 18
// uc_side := side ;
25807: LD_ADDR_OWVAR 20
25811: PUSH
25812: LD_VAR 0 16
25816: ST_TO_ADDR
// uc_nation := nation ;
25817: LD_ADDR_OWVAR 21
25821: PUSH
25822: LD_VAR 0 17
25826: ST_TO_ADDR
// if buildings then
25827: LD_VAR 0 18
25831: IFFALSE 27153
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25833: LD_ADDR_VAR 0 19
25837: PUSH
25838: LD_VAR 0 18
25842: PPUSH
25843: LD_INT 2
25845: PUSH
25846: LD_INT 30
25848: PUSH
25849: LD_INT 29
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 30
25858: PUSH
25859: LD_INT 30
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: PPUSH
25871: CALL_OW 72
25875: ST_TO_ADDR
// if tmp then
25876: LD_VAR 0 19
25880: IFFALSE 25928
// for i in tmp do
25882: LD_ADDR_VAR 0 8
25886: PUSH
25887: LD_VAR 0 19
25891: PUSH
25892: FOR_IN
25893: IFFALSE 25926
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25895: LD_VAR 0 8
25899: PPUSH
25900: CALL_OW 250
25904: PPUSH
25905: LD_VAR 0 8
25909: PPUSH
25910: CALL_OW 251
25914: PPUSH
25915: LD_VAR 0 16
25919: PPUSH
25920: CALL_OW 441
25924: GO 25892
25926: POP
25927: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25928: LD_VAR 0 18
25932: PPUSH
25933: LD_INT 2
25935: PUSH
25936: LD_INT 30
25938: PUSH
25939: LD_INT 32
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 30
25948: PUSH
25949: LD_INT 33
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: LIST
25960: PPUSH
25961: CALL_OW 72
25965: IFFALSE 26053
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25967: LD_ADDR_VAR 0 8
25971: PUSH
25972: LD_VAR 0 18
25976: PPUSH
25977: LD_INT 2
25979: PUSH
25980: LD_INT 30
25982: PUSH
25983: LD_INT 32
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 30
25992: PUSH
25993: LD_INT 33
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 72
26009: PUSH
26010: FOR_IN
26011: IFFALSE 26051
// begin if not GetBWeapon ( i ) then
26013: LD_VAR 0 8
26017: PPUSH
26018: CALL_OW 269
26022: NOT
26023: IFFALSE 26049
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26025: LD_VAR 0 8
26029: PPUSH
26030: LD_VAR 0 8
26034: PPUSH
26035: LD_VAR 0 2
26039: PPUSH
26040: CALL 27299 0 2
26044: PPUSH
26045: CALL_OW 431
// end ;
26049: GO 26010
26051: POP
26052: POP
// end ; for i = 1 to personel do
26053: LD_ADDR_VAR 0 8
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_VAR 0 6
26067: PUSH
26068: FOR_TO
26069: IFFALSE 27133
// begin if i > 4 then
26071: LD_VAR 0 8
26075: PUSH
26076: LD_INT 4
26078: GREATER
26079: IFFALSE 26083
// break ;
26081: GO 27133
// case i of 1 :
26083: LD_VAR 0 8
26087: PUSH
26088: LD_INT 1
26090: DOUBLE
26091: EQUAL
26092: IFTRUE 26096
26094: GO 26176
26096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26097: LD_ADDR_VAR 0 12
26101: PUSH
26102: LD_VAR 0 18
26106: PPUSH
26107: LD_INT 22
26109: PUSH
26110: LD_VAR 0 16
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 58
26121: PUSH
26122: EMPTY
26123: LIST
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: LD_INT 30
26130: PUSH
26131: LD_INT 32
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 30
26140: PUSH
26141: LD_INT 4
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 30
26150: PUSH
26151: LD_INT 5
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: LIST
26168: PPUSH
26169: CALL_OW 72
26173: ST_TO_ADDR
26174: GO 26398
26176: LD_INT 2
26178: DOUBLE
26179: EQUAL
26180: IFTRUE 26184
26182: GO 26246
26184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26185: LD_ADDR_VAR 0 12
26189: PUSH
26190: LD_VAR 0 18
26194: PPUSH
26195: LD_INT 22
26197: PUSH
26198: LD_VAR 0 16
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: LD_INT 30
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 30
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PPUSH
26239: CALL_OW 72
26243: ST_TO_ADDR
26244: GO 26398
26246: LD_INT 3
26248: DOUBLE
26249: EQUAL
26250: IFTRUE 26254
26252: GO 26316
26254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26255: LD_ADDR_VAR 0 12
26259: PUSH
26260: LD_VAR 0 18
26264: PPUSH
26265: LD_INT 22
26267: PUSH
26268: LD_VAR 0 16
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 2
26279: PUSH
26280: LD_INT 30
26282: PUSH
26283: LD_INT 2
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 30
26292: PUSH
26293: LD_INT 3
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: LIST
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PPUSH
26309: CALL_OW 72
26313: ST_TO_ADDR
26314: GO 26398
26316: LD_INT 4
26318: DOUBLE
26319: EQUAL
26320: IFTRUE 26324
26322: GO 26397
26324: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26325: LD_ADDR_VAR 0 12
26329: PUSH
26330: LD_VAR 0 18
26334: PPUSH
26335: LD_INT 22
26337: PUSH
26338: LD_VAR 0 16
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: LD_INT 30
26352: PUSH
26353: LD_INT 6
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 30
26362: PUSH
26363: LD_INT 7
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 30
26372: PUSH
26373: LD_INT 8
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 72
26394: ST_TO_ADDR
26395: GO 26398
26397: POP
// if i = 1 then
26398: LD_VAR 0 8
26402: PUSH
26403: LD_INT 1
26405: EQUAL
26406: IFFALSE 26517
// begin tmp := [ ] ;
26408: LD_ADDR_VAR 0 19
26412: PUSH
26413: EMPTY
26414: ST_TO_ADDR
// for j in f do
26415: LD_ADDR_VAR 0 9
26419: PUSH
26420: LD_VAR 0 12
26424: PUSH
26425: FOR_IN
26426: IFFALSE 26499
// if GetBType ( j ) = b_bunker then
26428: LD_VAR 0 9
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_INT 32
26440: EQUAL
26441: IFFALSE 26468
// tmp := Insert ( tmp , 1 , j ) else
26443: LD_ADDR_VAR 0 19
26447: PUSH
26448: LD_VAR 0 19
26452: PPUSH
26453: LD_INT 1
26455: PPUSH
26456: LD_VAR 0 9
26460: PPUSH
26461: CALL_OW 2
26465: ST_TO_ADDR
26466: GO 26497
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26468: LD_ADDR_VAR 0 19
26472: PUSH
26473: LD_VAR 0 19
26477: PPUSH
26478: LD_VAR 0 19
26482: PUSH
26483: LD_INT 1
26485: PLUS
26486: PPUSH
26487: LD_VAR 0 9
26491: PPUSH
26492: CALL_OW 2
26496: ST_TO_ADDR
26497: GO 26425
26499: POP
26500: POP
// if tmp then
26501: LD_VAR 0 19
26505: IFFALSE 26517
// f := tmp ;
26507: LD_ADDR_VAR 0 12
26511: PUSH
26512: LD_VAR 0 19
26516: ST_TO_ADDR
// end ; x := personel [ i ] ;
26517: LD_ADDR_VAR 0 13
26521: PUSH
26522: LD_VAR 0 6
26526: PUSH
26527: LD_VAR 0 8
26531: ARRAY
26532: ST_TO_ADDR
// if x = - 1 then
26533: LD_VAR 0 13
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: EQUAL
26542: IFFALSE 26751
// begin for j in f do
26544: LD_ADDR_VAR 0 9
26548: PUSH
26549: LD_VAR 0 12
26553: PUSH
26554: FOR_IN
26555: IFFALSE 26747
// repeat InitHc ;
26557: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26561: LD_VAR 0 9
26565: PPUSH
26566: CALL_OW 266
26570: PUSH
26571: LD_INT 5
26573: EQUAL
26574: IFFALSE 26644
// begin if UnitsInside ( j ) < 3 then
26576: LD_VAR 0 9
26580: PPUSH
26581: CALL_OW 313
26585: PUSH
26586: LD_INT 3
26588: LESS
26589: IFFALSE 26625
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26591: LD_INT 0
26593: PPUSH
26594: LD_INT 5
26596: PUSH
26597: LD_INT 8
26599: PUSH
26600: LD_INT 9
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: PUSH
26608: LD_VAR 0 17
26612: ARRAY
26613: PPUSH
26614: LD_VAR 0 4
26618: PPUSH
26619: CALL_OW 380
26623: GO 26642
// PrepareHuman ( false , i , skill ) ;
26625: LD_INT 0
26627: PPUSH
26628: LD_VAR 0 8
26632: PPUSH
26633: LD_VAR 0 4
26637: PPUSH
26638: CALL_OW 380
// end else
26642: GO 26661
// PrepareHuman ( false , i , skill ) ;
26644: LD_INT 0
26646: PPUSH
26647: LD_VAR 0 8
26651: PPUSH
26652: LD_VAR 0 4
26656: PPUSH
26657: CALL_OW 380
// un := CreateHuman ;
26661: LD_ADDR_VAR 0 14
26665: PUSH
26666: CALL_OW 44
26670: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26671: LD_ADDR_VAR 0 7
26675: PUSH
26676: LD_VAR 0 7
26680: PPUSH
26681: LD_INT 1
26683: PPUSH
26684: LD_VAR 0 14
26688: PPUSH
26689: CALL_OW 2
26693: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26694: LD_VAR 0 14
26698: PPUSH
26699: LD_VAR 0 9
26703: PPUSH
26704: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26708: LD_VAR 0 9
26712: PPUSH
26713: CALL_OW 313
26717: PUSH
26718: LD_INT 6
26720: EQUAL
26721: PUSH
26722: LD_VAR 0 9
26726: PPUSH
26727: CALL_OW 266
26731: PUSH
26732: LD_INT 32
26734: PUSH
26735: LD_INT 31
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: IN
26742: OR
26743: IFFALSE 26557
26745: GO 26554
26747: POP
26748: POP
// end else
26749: GO 27131
// for j = 1 to x do
26751: LD_ADDR_VAR 0 9
26755: PUSH
26756: DOUBLE
26757: LD_INT 1
26759: DEC
26760: ST_TO_ADDR
26761: LD_VAR 0 13
26765: PUSH
26766: FOR_TO
26767: IFFALSE 27129
// begin InitHc ;
26769: CALL_OW 19
// if not f then
26773: LD_VAR 0 12
26777: NOT
26778: IFFALSE 26867
// begin PrepareHuman ( false , i , skill ) ;
26780: LD_INT 0
26782: PPUSH
26783: LD_VAR 0 8
26787: PPUSH
26788: LD_VAR 0 4
26792: PPUSH
26793: CALL_OW 380
// un := CreateHuman ;
26797: LD_ADDR_VAR 0 14
26801: PUSH
26802: CALL_OW 44
26806: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26807: LD_ADDR_VAR 0 7
26811: PUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_INT 1
26819: PPUSH
26820: LD_VAR 0 14
26824: PPUSH
26825: CALL_OW 2
26829: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26830: LD_VAR 0 14
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 250
26844: PPUSH
26845: LD_VAR 0 1
26849: PPUSH
26850: CALL_OW 251
26854: PPUSH
26855: LD_INT 10
26857: PPUSH
26858: LD_INT 0
26860: PPUSH
26861: CALL_OW 50
// continue ;
26865: GO 26766
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26867: LD_VAR 0 12
26871: PUSH
26872: LD_INT 1
26874: ARRAY
26875: PPUSH
26876: CALL_OW 313
26880: PUSH
26881: LD_VAR 0 12
26885: PUSH
26886: LD_INT 1
26888: ARRAY
26889: PPUSH
26890: CALL_OW 266
26894: PUSH
26895: LD_INT 32
26897: PUSH
26898: LD_INT 31
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: IN
26905: AND
26906: PUSH
26907: LD_VAR 0 12
26911: PUSH
26912: LD_INT 1
26914: ARRAY
26915: PPUSH
26916: CALL_OW 313
26920: PUSH
26921: LD_INT 6
26923: EQUAL
26924: OR
26925: IFFALSE 26945
// f := Delete ( f , 1 ) ;
26927: LD_ADDR_VAR 0 12
26931: PUSH
26932: LD_VAR 0 12
26936: PPUSH
26937: LD_INT 1
26939: PPUSH
26940: CALL_OW 3
26944: ST_TO_ADDR
// if not f then
26945: LD_VAR 0 12
26949: NOT
26950: IFFALSE 26968
// begin x := x + 2 ;
26952: LD_ADDR_VAR 0 13
26956: PUSH
26957: LD_VAR 0 13
26961: PUSH
26962: LD_INT 2
26964: PLUS
26965: ST_TO_ADDR
// continue ;
26966: GO 26766
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26968: LD_VAR 0 12
26972: PUSH
26973: LD_INT 1
26975: ARRAY
26976: PPUSH
26977: CALL_OW 266
26981: PUSH
26982: LD_INT 5
26984: EQUAL
26985: IFFALSE 27059
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26987: LD_VAR 0 12
26991: PUSH
26992: LD_INT 1
26994: ARRAY
26995: PPUSH
26996: CALL_OW 313
27000: PUSH
27001: LD_INT 3
27003: LESS
27004: IFFALSE 27040
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27006: LD_INT 0
27008: PPUSH
27009: LD_INT 5
27011: PUSH
27012: LD_INT 8
27014: PUSH
27015: LD_INT 9
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: PUSH
27023: LD_VAR 0 17
27027: ARRAY
27028: PPUSH
27029: LD_VAR 0 4
27033: PPUSH
27034: CALL_OW 380
27038: GO 27057
// PrepareHuman ( false , i , skill ) ;
27040: LD_INT 0
27042: PPUSH
27043: LD_VAR 0 8
27047: PPUSH
27048: LD_VAR 0 4
27052: PPUSH
27053: CALL_OW 380
// end else
27057: GO 27076
// PrepareHuman ( false , i , skill ) ;
27059: LD_INT 0
27061: PPUSH
27062: LD_VAR 0 8
27066: PPUSH
27067: LD_VAR 0 4
27071: PPUSH
27072: CALL_OW 380
// un := CreateHuman ;
27076: LD_ADDR_VAR 0 14
27080: PUSH
27081: CALL_OW 44
27085: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27086: LD_ADDR_VAR 0 7
27090: PUSH
27091: LD_VAR 0 7
27095: PPUSH
27096: LD_INT 1
27098: PPUSH
27099: LD_VAR 0 14
27103: PPUSH
27104: CALL_OW 2
27108: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27109: LD_VAR 0 14
27113: PPUSH
27114: LD_VAR 0 12
27118: PUSH
27119: LD_INT 1
27121: ARRAY
27122: PPUSH
27123: CALL_OW 52
// end ;
27127: GO 26766
27129: POP
27130: POP
// end ;
27131: GO 26068
27133: POP
27134: POP
// result := result ^ buildings ;
27135: LD_ADDR_VAR 0 7
27139: PUSH
27140: LD_VAR 0 7
27144: PUSH
27145: LD_VAR 0 18
27149: ADD
27150: ST_TO_ADDR
// end else
27151: GO 27294
// begin for i = 1 to personel do
27153: LD_ADDR_VAR 0 8
27157: PUSH
27158: DOUBLE
27159: LD_INT 1
27161: DEC
27162: ST_TO_ADDR
27163: LD_VAR 0 6
27167: PUSH
27168: FOR_TO
27169: IFFALSE 27292
// begin if i > 4 then
27171: LD_VAR 0 8
27175: PUSH
27176: LD_INT 4
27178: GREATER
27179: IFFALSE 27183
// break ;
27181: GO 27292
// x := personel [ i ] ;
27183: LD_ADDR_VAR 0 13
27187: PUSH
27188: LD_VAR 0 6
27192: PUSH
27193: LD_VAR 0 8
27197: ARRAY
27198: ST_TO_ADDR
// if x = - 1 then
27199: LD_VAR 0 13
27203: PUSH
27204: LD_INT 1
27206: NEG
27207: EQUAL
27208: IFFALSE 27212
// continue ;
27210: GO 27168
// PrepareHuman ( false , i , skill ) ;
27212: LD_INT 0
27214: PPUSH
27215: LD_VAR 0 8
27219: PPUSH
27220: LD_VAR 0 4
27224: PPUSH
27225: CALL_OW 380
// un := CreateHuman ;
27229: LD_ADDR_VAR 0 14
27233: PUSH
27234: CALL_OW 44
27238: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27239: LD_VAR 0 14
27243: PPUSH
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 250
27253: PPUSH
27254: LD_VAR 0 1
27258: PPUSH
27259: CALL_OW 251
27263: PPUSH
27264: LD_INT 10
27266: PPUSH
27267: LD_INT 0
27269: PPUSH
27270: CALL_OW 50
// result := result ^ un ;
27274: LD_ADDR_VAR 0 7
27278: PUSH
27279: LD_VAR 0 7
27283: PUSH
27284: LD_VAR 0 14
27288: ADD
27289: ST_TO_ADDR
// end ;
27290: GO 27168
27292: POP
27293: POP
// end ; end ;
27294: LD_VAR 0 7
27298: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27299: LD_INT 0
27301: PPUSH
27302: PPUSH
27303: PPUSH
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
27314: PPUSH
27315: PPUSH
27316: PPUSH
// result := false ;
27317: LD_ADDR_VAR 0 3
27321: PUSH
27322: LD_INT 0
27324: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27325: LD_VAR 0 1
27329: NOT
27330: PUSH
27331: LD_VAR 0 1
27335: PPUSH
27336: CALL_OW 266
27340: PUSH
27341: LD_INT 32
27343: PUSH
27344: LD_INT 33
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: IN
27351: NOT
27352: OR
27353: IFFALSE 27357
// exit ;
27355: GO 28466
// nat := GetNation ( tower ) ;
27357: LD_ADDR_VAR 0 12
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 248
27371: ST_TO_ADDR
// side := GetSide ( tower ) ;
27372: LD_ADDR_VAR 0 16
27376: PUSH
27377: LD_VAR 0 1
27381: PPUSH
27382: CALL_OW 255
27386: ST_TO_ADDR
// x := GetX ( tower ) ;
27387: LD_ADDR_VAR 0 10
27391: PUSH
27392: LD_VAR 0 1
27396: PPUSH
27397: CALL_OW 250
27401: ST_TO_ADDR
// y := GetY ( tower ) ;
27402: LD_ADDR_VAR 0 11
27406: PUSH
27407: LD_VAR 0 1
27411: PPUSH
27412: CALL_OW 251
27416: ST_TO_ADDR
// if not x or not y then
27417: LD_VAR 0 10
27421: NOT
27422: PUSH
27423: LD_VAR 0 11
27427: NOT
27428: OR
27429: IFFALSE 27433
// exit ;
27431: GO 28466
// weapon := 0 ;
27433: LD_ADDR_VAR 0 18
27437: PUSH
27438: LD_INT 0
27440: ST_TO_ADDR
// fac_list := [ ] ;
27441: LD_ADDR_VAR 0 17
27445: PUSH
27446: EMPTY
27447: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27448: LD_ADDR_VAR 0 6
27452: PUSH
27453: LD_VAR 0 1
27457: PPUSH
27458: CALL_OW 274
27462: PPUSH
27463: LD_VAR 0 2
27467: PPUSH
27468: LD_INT 0
27470: PPUSH
27471: CALL 25037 0 3
27475: PPUSH
27476: LD_INT 30
27478: PUSH
27479: LD_INT 3
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PPUSH
27486: CALL_OW 72
27490: ST_TO_ADDR
// if not factories then
27491: LD_VAR 0 6
27495: NOT
27496: IFFALSE 27500
// exit ;
27498: GO 28466
// for i in factories do
27500: LD_ADDR_VAR 0 8
27504: PUSH
27505: LD_VAR 0 6
27509: PUSH
27510: FOR_IN
27511: IFFALSE 27536
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27513: LD_ADDR_VAR 0 17
27517: PUSH
27518: LD_VAR 0 17
27522: PUSH
27523: LD_VAR 0 8
27527: PPUSH
27528: CALL_OW 478
27532: UNION
27533: ST_TO_ADDR
27534: GO 27510
27536: POP
27537: POP
// if not fac_list then
27538: LD_VAR 0 17
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 28466
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27547: LD_ADDR_VAR 0 5
27551: PUSH
27552: LD_INT 4
27554: PUSH
27555: LD_INT 5
27557: PUSH
27558: LD_INT 9
27560: PUSH
27561: LD_INT 10
27563: PUSH
27564: LD_INT 6
27566: PUSH
27567: LD_INT 7
27569: PUSH
27570: LD_INT 11
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 27
27584: PUSH
27585: LD_INT 28
27587: PUSH
27588: LD_INT 26
27590: PUSH
27591: LD_INT 30
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 43
27602: PUSH
27603: LD_INT 44
27605: PUSH
27606: LD_INT 46
27608: PUSH
27609: LD_INT 45
27611: PUSH
27612: LD_INT 47
27614: PUSH
27615: LD_INT 49
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: PUSH
27631: LD_VAR 0 12
27635: ARRAY
27636: ST_TO_ADDR
// list := list isect fac_list ;
27637: LD_ADDR_VAR 0 5
27641: PUSH
27642: LD_VAR 0 5
27646: PUSH
27647: LD_VAR 0 17
27651: ISECT
27652: ST_TO_ADDR
// if not list then
27653: LD_VAR 0 5
27657: NOT
27658: IFFALSE 27662
// exit ;
27660: GO 28466
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27662: LD_VAR 0 12
27666: PUSH
27667: LD_INT 3
27669: EQUAL
27670: PUSH
27671: LD_INT 49
27673: PUSH
27674: LD_VAR 0 5
27678: IN
27679: AND
27680: PUSH
27681: LD_INT 31
27683: PPUSH
27684: LD_VAR 0 16
27688: PPUSH
27689: CALL_OW 321
27693: PUSH
27694: LD_INT 2
27696: EQUAL
27697: AND
27698: IFFALSE 27758
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27700: LD_INT 22
27702: PUSH
27703: LD_VAR 0 16
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 35
27714: PUSH
27715: LD_INT 49
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 91
27724: PUSH
27725: LD_VAR 0 1
27729: PUSH
27730: LD_INT 10
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: LIST
27742: PPUSH
27743: CALL_OW 69
27747: NOT
27748: IFFALSE 27758
// weapon := ru_time_lapser ;
27750: LD_ADDR_VAR 0 18
27754: PUSH
27755: LD_INT 49
27757: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27758: LD_VAR 0 12
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: IN
27773: PUSH
27774: LD_INT 11
27776: PUSH
27777: LD_VAR 0 5
27781: IN
27782: PUSH
27783: LD_INT 30
27785: PUSH
27786: LD_VAR 0 5
27790: IN
27791: OR
27792: AND
27793: PUSH
27794: LD_INT 6
27796: PPUSH
27797: LD_VAR 0 16
27801: PPUSH
27802: CALL_OW 321
27806: PUSH
27807: LD_INT 2
27809: EQUAL
27810: AND
27811: IFFALSE 27976
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27813: LD_INT 22
27815: PUSH
27816: LD_VAR 0 16
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 35
27830: PUSH
27831: LD_INT 11
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 35
27840: PUSH
27841: LD_INT 30
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 91
27855: PUSH
27856: LD_VAR 0 1
27860: PUSH
27861: LD_INT 18
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: PPUSH
27874: CALL_OW 69
27878: NOT
27879: PUSH
27880: LD_INT 22
27882: PUSH
27883: LD_VAR 0 16
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: LD_INT 30
27897: PUSH
27898: LD_INT 32
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 30
27907: PUSH
27908: LD_INT 33
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 91
27922: PUSH
27923: LD_VAR 0 1
27927: PUSH
27928: LD_INT 12
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: PUSH
27941: EMPTY
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: PUSH
27949: LD_INT 2
27951: GREATER
27952: AND
27953: IFFALSE 27976
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27955: LD_ADDR_VAR 0 18
27959: PUSH
27960: LD_INT 11
27962: PUSH
27963: LD_INT 30
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_VAR 0 12
27974: ARRAY
27975: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27976: LD_VAR 0 18
27980: NOT
27981: PUSH
27982: LD_INT 40
27984: PPUSH
27985: LD_VAR 0 16
27989: PPUSH
27990: CALL_OW 321
27994: PUSH
27995: LD_INT 2
27997: EQUAL
27998: AND
27999: PUSH
28000: LD_INT 7
28002: PUSH
28003: LD_VAR 0 5
28007: IN
28008: PUSH
28009: LD_INT 28
28011: PUSH
28012: LD_VAR 0 5
28016: IN
28017: OR
28018: PUSH
28019: LD_INT 45
28021: PUSH
28022: LD_VAR 0 5
28026: IN
28027: OR
28028: AND
28029: IFFALSE 28283
// begin hex := GetHexInfo ( x , y ) ;
28031: LD_ADDR_VAR 0 4
28035: PUSH
28036: LD_VAR 0 10
28040: PPUSH
28041: LD_VAR 0 11
28045: PPUSH
28046: CALL_OW 546
28050: ST_TO_ADDR
// if hex [ 1 ] then
28051: LD_VAR 0 4
28055: PUSH
28056: LD_INT 1
28058: ARRAY
28059: IFFALSE 28063
// exit ;
28061: GO 28466
// height := hex [ 2 ] ;
28063: LD_ADDR_VAR 0 15
28067: PUSH
28068: LD_VAR 0 4
28072: PUSH
28073: LD_INT 2
28075: ARRAY
28076: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28077: LD_ADDR_VAR 0 14
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: LD_INT 3
28090: PUSH
28091: LD_INT 5
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: ST_TO_ADDR
// for i in tmp do
28100: LD_ADDR_VAR 0 8
28104: PUSH
28105: LD_VAR 0 14
28109: PUSH
28110: FOR_IN
28111: IFFALSE 28281
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28113: LD_ADDR_VAR 0 9
28117: PUSH
28118: LD_VAR 0 10
28122: PPUSH
28123: LD_VAR 0 8
28127: PPUSH
28128: LD_INT 5
28130: PPUSH
28131: CALL_OW 272
28135: PUSH
28136: LD_VAR 0 11
28140: PPUSH
28141: LD_VAR 0 8
28145: PPUSH
28146: LD_INT 5
28148: PPUSH
28149: CALL_OW 273
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28158: LD_VAR 0 9
28162: PUSH
28163: LD_INT 1
28165: ARRAY
28166: PPUSH
28167: LD_VAR 0 9
28171: PUSH
28172: LD_INT 2
28174: ARRAY
28175: PPUSH
28176: CALL_OW 488
28180: IFFALSE 28279
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28182: LD_ADDR_VAR 0 4
28186: PUSH
28187: LD_VAR 0 9
28191: PUSH
28192: LD_INT 1
28194: ARRAY
28195: PPUSH
28196: LD_VAR 0 9
28200: PUSH
28201: LD_INT 2
28203: ARRAY
28204: PPUSH
28205: CALL_OW 546
28209: ST_TO_ADDR
// if hex [ 1 ] then
28210: LD_VAR 0 4
28214: PUSH
28215: LD_INT 1
28217: ARRAY
28218: IFFALSE 28222
// continue ;
28220: GO 28110
// h := hex [ 2 ] ;
28222: LD_ADDR_VAR 0 13
28226: PUSH
28227: LD_VAR 0 4
28231: PUSH
28232: LD_INT 2
28234: ARRAY
28235: ST_TO_ADDR
// if h + 7 < height then
28236: LD_VAR 0 13
28240: PUSH
28241: LD_INT 7
28243: PLUS
28244: PUSH
28245: LD_VAR 0 15
28249: LESS
28250: IFFALSE 28279
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28252: LD_ADDR_VAR 0 18
28256: PUSH
28257: LD_INT 7
28259: PUSH
28260: LD_INT 28
28262: PUSH
28263: LD_INT 45
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: PUSH
28271: LD_VAR 0 12
28275: ARRAY
28276: ST_TO_ADDR
// break ;
28277: GO 28281
// end ; end ; end ;
28279: GO 28110
28281: POP
28282: POP
// end ; if not weapon then
28283: LD_VAR 0 18
28287: NOT
28288: IFFALSE 28348
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28290: LD_ADDR_VAR 0 5
28294: PUSH
28295: LD_VAR 0 5
28299: PUSH
28300: LD_INT 11
28302: PUSH
28303: LD_INT 30
28305: PUSH
28306: LD_INT 49
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: DIFF
28314: ST_TO_ADDR
// if not list then
28315: LD_VAR 0 5
28319: NOT
28320: IFFALSE 28324
// exit ;
28322: GO 28466
// weapon := list [ rand ( 1 , list ) ] ;
28324: LD_ADDR_VAR 0 18
28328: PUSH
28329: LD_VAR 0 5
28333: PUSH
28334: LD_INT 1
28336: PPUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: CALL_OW 12
28346: ARRAY
28347: ST_TO_ADDR
// end ; if weapon then
28348: LD_VAR 0 18
28352: IFFALSE 28466
// begin tmp := CostOfWeapon ( weapon ) ;
28354: LD_ADDR_VAR 0 14
28358: PUSH
28359: LD_VAR 0 18
28363: PPUSH
28364: CALL_OW 451
28368: ST_TO_ADDR
// j := GetBase ( tower ) ;
28369: LD_ADDR_VAR 0 9
28373: PUSH
28374: LD_VAR 0 1
28378: PPUSH
28379: CALL_OW 274
28383: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28384: LD_VAR 0 9
28388: PPUSH
28389: LD_INT 1
28391: PPUSH
28392: CALL_OW 275
28396: PUSH
28397: LD_VAR 0 14
28401: PUSH
28402: LD_INT 1
28404: ARRAY
28405: GREATEREQUAL
28406: PUSH
28407: LD_VAR 0 9
28411: PPUSH
28412: LD_INT 2
28414: PPUSH
28415: CALL_OW 275
28419: PUSH
28420: LD_VAR 0 14
28424: PUSH
28425: LD_INT 2
28427: ARRAY
28428: GREATEREQUAL
28429: AND
28430: PUSH
28431: LD_VAR 0 9
28435: PPUSH
28436: LD_INT 3
28438: PPUSH
28439: CALL_OW 275
28443: PUSH
28444: LD_VAR 0 14
28448: PUSH
28449: LD_INT 3
28451: ARRAY
28452: GREATEREQUAL
28453: AND
28454: IFFALSE 28466
// result := weapon ;
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_VAR 0 18
28465: ST_TO_ADDR
// end ; end ;
28466: LD_VAR 0 3
28470: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28471: LD_INT 0
28473: PPUSH
28474: PPUSH
// result := true ;
28475: LD_ADDR_VAR 0 3
28479: PUSH
28480: LD_INT 1
28482: ST_TO_ADDR
// if array1 = array2 then
28483: LD_VAR 0 1
28487: PUSH
28488: LD_VAR 0 2
28492: EQUAL
28493: IFFALSE 28553
// begin for i = 1 to array1 do
28495: LD_ADDR_VAR 0 4
28499: PUSH
28500: DOUBLE
28501: LD_INT 1
28503: DEC
28504: ST_TO_ADDR
28505: LD_VAR 0 1
28509: PUSH
28510: FOR_TO
28511: IFFALSE 28549
// if array1 [ i ] <> array2 [ i ] then
28513: LD_VAR 0 1
28517: PUSH
28518: LD_VAR 0 4
28522: ARRAY
28523: PUSH
28524: LD_VAR 0 2
28528: PUSH
28529: LD_VAR 0 4
28533: ARRAY
28534: NONEQUAL
28535: IFFALSE 28547
// begin result := false ;
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 0
28544: ST_TO_ADDR
// break ;
28545: GO 28549
// end ;
28547: GO 28510
28549: POP
28550: POP
// end else
28551: GO 28561
// result := false ;
28553: LD_ADDR_VAR 0 3
28557: PUSH
28558: LD_INT 0
28560: ST_TO_ADDR
// end ;
28561: LD_VAR 0 3
28565: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28566: LD_INT 0
28568: PPUSH
28569: PPUSH
// if not array1 or not array2 then
28570: LD_VAR 0 1
28574: NOT
28575: PUSH
28576: LD_VAR 0 2
28580: NOT
28581: OR
28582: IFFALSE 28586
// exit ;
28584: GO 28650
// result := true ;
28586: LD_ADDR_VAR 0 3
28590: PUSH
28591: LD_INT 1
28593: ST_TO_ADDR
// for i = 1 to array1 do
28594: LD_ADDR_VAR 0 4
28598: PUSH
28599: DOUBLE
28600: LD_INT 1
28602: DEC
28603: ST_TO_ADDR
28604: LD_VAR 0 1
28608: PUSH
28609: FOR_TO
28610: IFFALSE 28648
// if array1 [ i ] <> array2 [ i ] then
28612: LD_VAR 0 1
28616: PUSH
28617: LD_VAR 0 4
28621: ARRAY
28622: PUSH
28623: LD_VAR 0 2
28627: PUSH
28628: LD_VAR 0 4
28632: ARRAY
28633: NONEQUAL
28634: IFFALSE 28646
// begin result := false ;
28636: LD_ADDR_VAR 0 3
28640: PUSH
28641: LD_INT 0
28643: ST_TO_ADDR
// break ;
28644: GO 28648
// end ;
28646: GO 28609
28648: POP
28649: POP
// end ;
28650: LD_VAR 0 3
28654: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28655: LD_INT 0
28657: PPUSH
28658: PPUSH
28659: PPUSH
// pom := GetBase ( fac ) ;
28660: LD_ADDR_VAR 0 5
28664: PUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 274
28674: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: LD_VAR 0 2
28684: PUSH
28685: LD_INT 1
28687: ARRAY
28688: PPUSH
28689: LD_VAR 0 2
28693: PUSH
28694: LD_INT 2
28696: ARRAY
28697: PPUSH
28698: LD_VAR 0 2
28702: PUSH
28703: LD_INT 3
28705: ARRAY
28706: PPUSH
28707: LD_VAR 0 2
28711: PUSH
28712: LD_INT 4
28714: ARRAY
28715: PPUSH
28716: CALL_OW 449
28720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28721: LD_ADDR_VAR 0 3
28725: PUSH
28726: LD_VAR 0 5
28730: PPUSH
28731: LD_INT 1
28733: PPUSH
28734: CALL_OW 275
28738: PUSH
28739: LD_VAR 0 4
28743: PUSH
28744: LD_INT 1
28746: ARRAY
28747: GREATEREQUAL
28748: PUSH
28749: LD_VAR 0 5
28753: PPUSH
28754: LD_INT 2
28756: PPUSH
28757: CALL_OW 275
28761: PUSH
28762: LD_VAR 0 4
28766: PUSH
28767: LD_INT 2
28769: ARRAY
28770: GREATEREQUAL
28771: AND
28772: PUSH
28773: LD_VAR 0 5
28777: PPUSH
28778: LD_INT 3
28780: PPUSH
28781: CALL_OW 275
28785: PUSH
28786: LD_VAR 0 4
28790: PUSH
28791: LD_INT 3
28793: ARRAY
28794: GREATEREQUAL
28795: AND
28796: ST_TO_ADDR
// end ;
28797: LD_VAR 0 3
28801: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
// pom := GetBase ( building ) ;
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_VAR 0 1
28817: PPUSH
28818: CALL_OW 274
28822: ST_TO_ADDR
// if not pom then
28823: LD_VAR 0 3
28827: NOT
28828: IFFALSE 28832
// exit ;
28830: GO 29002
// btype := GetBType ( building ) ;
28832: LD_ADDR_VAR 0 5
28836: PUSH
28837: LD_VAR 0 1
28841: PPUSH
28842: CALL_OW 266
28846: ST_TO_ADDR
// if btype = b_armoury then
28847: LD_VAR 0 5
28851: PUSH
28852: LD_INT 4
28854: EQUAL
28855: IFFALSE 28865
// btype := b_barracks ;
28857: LD_ADDR_VAR 0 5
28861: PUSH
28862: LD_INT 5
28864: ST_TO_ADDR
// if btype = b_depot then
28865: LD_VAR 0 5
28869: PUSH
28870: LD_INT 0
28872: EQUAL
28873: IFFALSE 28883
// btype := b_warehouse ;
28875: LD_ADDR_VAR 0 5
28879: PUSH
28880: LD_INT 1
28882: ST_TO_ADDR
// if btype = b_workshop then
28883: LD_VAR 0 5
28887: PUSH
28888: LD_INT 2
28890: EQUAL
28891: IFFALSE 28901
// btype := b_factory ;
28893: LD_ADDR_VAR 0 5
28897: PUSH
28898: LD_INT 3
28900: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28901: LD_ADDR_VAR 0 4
28905: PUSH
28906: LD_VAR 0 5
28910: PPUSH
28911: LD_VAR 0 1
28915: PPUSH
28916: CALL_OW 248
28920: PPUSH
28921: CALL_OW 450
28925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28926: LD_ADDR_VAR 0 2
28930: PUSH
28931: LD_VAR 0 3
28935: PPUSH
28936: LD_INT 1
28938: PPUSH
28939: CALL_OW 275
28943: PUSH
28944: LD_VAR 0 4
28948: PUSH
28949: LD_INT 1
28951: ARRAY
28952: GREATEREQUAL
28953: PUSH
28954: LD_VAR 0 3
28958: PPUSH
28959: LD_INT 2
28961: PPUSH
28962: CALL_OW 275
28966: PUSH
28967: LD_VAR 0 4
28971: PUSH
28972: LD_INT 2
28974: ARRAY
28975: GREATEREQUAL
28976: AND
28977: PUSH
28978: LD_VAR 0 3
28982: PPUSH
28983: LD_INT 3
28985: PPUSH
28986: CALL_OW 275
28990: PUSH
28991: LD_VAR 0 4
28995: PUSH
28996: LD_INT 3
28998: ARRAY
28999: GREATEREQUAL
29000: AND
29001: ST_TO_ADDR
// end ;
29002: LD_VAR 0 2
29006: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29007: LD_INT 0
29009: PPUSH
29010: PPUSH
29011: PPUSH
// pom := GetBase ( building ) ;
29012: LD_ADDR_VAR 0 4
29016: PUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 274
29026: ST_TO_ADDR
// if not pom then
29027: LD_VAR 0 4
29031: NOT
29032: IFFALSE 29036
// exit ;
29034: GO 29137
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29036: LD_ADDR_VAR 0 5
29040: PUSH
29041: LD_VAR 0 2
29045: PPUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 248
29055: PPUSH
29056: CALL_OW 450
29060: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_VAR 0 4
29070: PPUSH
29071: LD_INT 1
29073: PPUSH
29074: CALL_OW 275
29078: PUSH
29079: LD_VAR 0 5
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: GREATEREQUAL
29088: PUSH
29089: LD_VAR 0 4
29093: PPUSH
29094: LD_INT 2
29096: PPUSH
29097: CALL_OW 275
29101: PUSH
29102: LD_VAR 0 5
29106: PUSH
29107: LD_INT 2
29109: ARRAY
29110: GREATEREQUAL
29111: AND
29112: PUSH
29113: LD_VAR 0 4
29117: PPUSH
29118: LD_INT 3
29120: PPUSH
29121: CALL_OW 275
29125: PUSH
29126: LD_VAR 0 5
29130: PUSH
29131: LD_INT 3
29133: ARRAY
29134: GREATEREQUAL
29135: AND
29136: ST_TO_ADDR
// end ;
29137: LD_VAR 0 3
29141: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29142: LD_INT 0
29144: PPUSH
29145: PPUSH
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
// result := false ;
29155: LD_ADDR_VAR 0 8
29159: PUSH
29160: LD_INT 0
29162: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29163: LD_VAR 0 5
29167: NOT
29168: PUSH
29169: LD_VAR 0 1
29173: NOT
29174: OR
29175: PUSH
29176: LD_VAR 0 2
29180: NOT
29181: OR
29182: PUSH
29183: LD_VAR 0 3
29187: NOT
29188: OR
29189: IFFALSE 29193
// exit ;
29191: GO 30007
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29193: LD_ADDR_VAR 0 14
29197: PUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: LD_VAR 0 2
29207: PPUSH
29208: LD_VAR 0 3
29212: PPUSH
29213: LD_VAR 0 4
29217: PPUSH
29218: LD_VAR 0 5
29222: PUSH
29223: LD_INT 1
29225: ARRAY
29226: PPUSH
29227: CALL_OW 248
29231: PPUSH
29232: LD_INT 0
29234: PPUSH
29235: CALL 31260 0 6
29239: ST_TO_ADDR
// if not hexes then
29240: LD_VAR 0 14
29244: NOT
29245: IFFALSE 29249
// exit ;
29247: GO 30007
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29249: LD_ADDR_VAR 0 17
29253: PUSH
29254: LD_VAR 0 5
29258: PPUSH
29259: LD_INT 22
29261: PUSH
29262: LD_VAR 0 13
29266: PPUSH
29267: CALL_OW 255
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 2
29278: PUSH
29279: LD_INT 30
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PPUSH
29308: CALL_OW 72
29312: ST_TO_ADDR
// for i = 1 to hexes do
29313: LD_ADDR_VAR 0 9
29317: PUSH
29318: DOUBLE
29319: LD_INT 1
29321: DEC
29322: ST_TO_ADDR
29323: LD_VAR 0 14
29327: PUSH
29328: FOR_TO
29329: IFFALSE 30005
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29331: LD_ADDR_VAR 0 13
29335: PUSH
29336: LD_VAR 0 14
29340: PUSH
29341: LD_VAR 0 9
29345: ARRAY
29346: PUSH
29347: LD_INT 1
29349: ARRAY
29350: PPUSH
29351: LD_VAR 0 14
29355: PUSH
29356: LD_VAR 0 9
29360: ARRAY
29361: PUSH
29362: LD_INT 2
29364: ARRAY
29365: PPUSH
29366: CALL_OW 428
29370: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29371: LD_VAR 0 14
29375: PUSH
29376: LD_VAR 0 9
29380: ARRAY
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PPUSH
29386: LD_VAR 0 14
29390: PUSH
29391: LD_VAR 0 9
29395: ARRAY
29396: PUSH
29397: LD_INT 2
29399: ARRAY
29400: PPUSH
29401: CALL_OW 351
29405: PUSH
29406: LD_VAR 0 14
29410: PUSH
29411: LD_VAR 0 9
29415: ARRAY
29416: PUSH
29417: LD_INT 1
29419: ARRAY
29420: PPUSH
29421: LD_VAR 0 14
29425: PUSH
29426: LD_VAR 0 9
29430: ARRAY
29431: PUSH
29432: LD_INT 2
29434: ARRAY
29435: PPUSH
29436: CALL_OW 488
29440: NOT
29441: OR
29442: PUSH
29443: LD_VAR 0 13
29447: PPUSH
29448: CALL_OW 247
29452: PUSH
29453: LD_INT 3
29455: EQUAL
29456: OR
29457: IFFALSE 29463
// exit ;
29459: POP
29460: POP
29461: GO 30007
// if not tmp then
29463: LD_VAR 0 13
29467: NOT
29468: IFFALSE 29472
// continue ;
29470: GO 29328
// result := true ;
29472: LD_ADDR_VAR 0 8
29476: PUSH
29477: LD_INT 1
29479: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29480: LD_VAR 0 6
29484: PUSH
29485: LD_VAR 0 13
29489: PPUSH
29490: CALL_OW 247
29494: PUSH
29495: LD_INT 2
29497: EQUAL
29498: AND
29499: PUSH
29500: LD_VAR 0 13
29504: PPUSH
29505: CALL_OW 263
29509: PUSH
29510: LD_INT 1
29512: EQUAL
29513: AND
29514: IFFALSE 29678
// begin if IsDrivenBy ( tmp ) then
29516: LD_VAR 0 13
29520: PPUSH
29521: CALL_OW 311
29525: IFFALSE 29529
// continue ;
29527: GO 29328
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29529: LD_VAR 0 6
29533: PPUSH
29534: LD_INT 3
29536: PUSH
29537: LD_INT 60
29539: PUSH
29540: EMPTY
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 3
29549: PUSH
29550: LD_INT 55
29552: PUSH
29553: EMPTY
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PPUSH
29564: CALL_OW 72
29568: IFFALSE 29676
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29570: LD_ADDR_VAR 0 18
29574: PUSH
29575: LD_VAR 0 6
29579: PPUSH
29580: LD_INT 3
29582: PUSH
29583: LD_INT 60
29585: PUSH
29586: EMPTY
29587: LIST
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 55
29598: PUSH
29599: EMPTY
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PPUSH
29610: CALL_OW 72
29614: PUSH
29615: LD_INT 1
29617: ARRAY
29618: ST_TO_ADDR
// if IsInUnit ( driver ) then
29619: LD_VAR 0 18
29623: PPUSH
29624: CALL_OW 310
29628: IFFALSE 29639
// ComExit ( driver ) ;
29630: LD_VAR 0 18
29634: PPUSH
29635: CALL 55061 0 1
// AddComEnterUnit ( driver , tmp ) ;
29639: LD_VAR 0 18
29643: PPUSH
29644: LD_VAR 0 13
29648: PPUSH
29649: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29653: LD_VAR 0 18
29657: PPUSH
29658: LD_VAR 0 7
29662: PPUSH
29663: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29667: LD_VAR 0 18
29671: PPUSH
29672: CALL_OW 181
// end ; continue ;
29676: GO 29328
// end ; if not cleaners or not tmp in cleaners then
29678: LD_VAR 0 6
29682: NOT
29683: PUSH
29684: LD_VAR 0 13
29688: PUSH
29689: LD_VAR 0 6
29693: IN
29694: NOT
29695: OR
29696: IFFALSE 30003
// begin if dep then
29698: LD_VAR 0 17
29702: IFFALSE 29838
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29704: LD_ADDR_VAR 0 16
29708: PUSH
29709: LD_VAR 0 17
29713: PUSH
29714: LD_INT 1
29716: ARRAY
29717: PPUSH
29718: CALL_OW 250
29722: PPUSH
29723: LD_VAR 0 17
29727: PUSH
29728: LD_INT 1
29730: ARRAY
29731: PPUSH
29732: CALL_OW 254
29736: PPUSH
29737: LD_INT 5
29739: PPUSH
29740: CALL_OW 272
29744: PUSH
29745: LD_VAR 0 17
29749: PUSH
29750: LD_INT 1
29752: ARRAY
29753: PPUSH
29754: CALL_OW 251
29758: PPUSH
29759: LD_VAR 0 17
29763: PUSH
29764: LD_INT 1
29766: ARRAY
29767: PPUSH
29768: CALL_OW 254
29772: PPUSH
29773: LD_INT 5
29775: PPUSH
29776: CALL_OW 273
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29785: LD_VAR 0 16
29789: PUSH
29790: LD_INT 1
29792: ARRAY
29793: PPUSH
29794: LD_VAR 0 16
29798: PUSH
29799: LD_INT 2
29801: ARRAY
29802: PPUSH
29803: CALL_OW 488
29807: IFFALSE 29838
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29809: LD_VAR 0 13
29813: PPUSH
29814: LD_VAR 0 16
29818: PUSH
29819: LD_INT 1
29821: ARRAY
29822: PPUSH
29823: LD_VAR 0 16
29827: PUSH
29828: LD_INT 2
29830: ARRAY
29831: PPUSH
29832: CALL_OW 111
// continue ;
29836: GO 29328
// end ; end ; r := GetDir ( tmp ) ;
29838: LD_ADDR_VAR 0 15
29842: PUSH
29843: LD_VAR 0 13
29847: PPUSH
29848: CALL_OW 254
29852: ST_TO_ADDR
// if r = 5 then
29853: LD_VAR 0 15
29857: PUSH
29858: LD_INT 5
29860: EQUAL
29861: IFFALSE 29871
// r := 0 ;
29863: LD_ADDR_VAR 0 15
29867: PUSH
29868: LD_INT 0
29870: ST_TO_ADDR
// for j = r to 5 do
29871: LD_ADDR_VAR 0 10
29875: PUSH
29876: DOUBLE
29877: LD_VAR 0 15
29881: DEC
29882: ST_TO_ADDR
29883: LD_INT 5
29885: PUSH
29886: FOR_TO
29887: IFFALSE 30001
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29889: LD_ADDR_VAR 0 11
29893: PUSH
29894: LD_VAR 0 13
29898: PPUSH
29899: CALL_OW 250
29903: PPUSH
29904: LD_VAR 0 10
29908: PPUSH
29909: LD_INT 2
29911: PPUSH
29912: CALL_OW 272
29916: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29917: LD_ADDR_VAR 0 12
29921: PUSH
29922: LD_VAR 0 13
29926: PPUSH
29927: CALL_OW 251
29931: PPUSH
29932: LD_VAR 0 10
29936: PPUSH
29937: LD_INT 2
29939: PPUSH
29940: CALL_OW 273
29944: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29945: LD_VAR 0 11
29949: PPUSH
29950: LD_VAR 0 12
29954: PPUSH
29955: CALL_OW 488
29959: PUSH
29960: LD_VAR 0 11
29964: PPUSH
29965: LD_VAR 0 12
29969: PPUSH
29970: CALL_OW 428
29974: NOT
29975: AND
29976: IFFALSE 29999
// begin ComMoveXY ( tmp , _x , _y ) ;
29978: LD_VAR 0 13
29982: PPUSH
29983: LD_VAR 0 11
29987: PPUSH
29988: LD_VAR 0 12
29992: PPUSH
29993: CALL_OW 111
// break ;
29997: GO 30001
// end ; end ;
29999: GO 29886
30001: POP
30002: POP
// end ; end ;
30003: GO 29328
30005: POP
30006: POP
// end ;
30007: LD_VAR 0 8
30011: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30012: LD_INT 0
30014: PPUSH
// result := true ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_INT 1
30022: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30023: LD_VAR 0 2
30027: PUSH
30028: LD_INT 24
30030: DOUBLE
30031: EQUAL
30032: IFTRUE 30042
30034: LD_INT 33
30036: DOUBLE
30037: EQUAL
30038: IFTRUE 30042
30040: GO 30067
30042: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30043: LD_ADDR_VAR 0 3
30047: PUSH
30048: LD_INT 32
30050: PPUSH
30051: LD_VAR 0 1
30055: PPUSH
30056: CALL_OW 321
30060: PUSH
30061: LD_INT 2
30063: EQUAL
30064: ST_TO_ADDR
30065: GO 30383
30067: LD_INT 20
30069: DOUBLE
30070: EQUAL
30071: IFTRUE 30075
30073: GO 30100
30075: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30076: LD_ADDR_VAR 0 3
30080: PUSH
30081: LD_INT 6
30083: PPUSH
30084: LD_VAR 0 1
30088: PPUSH
30089: CALL_OW 321
30093: PUSH
30094: LD_INT 2
30096: EQUAL
30097: ST_TO_ADDR
30098: GO 30383
30100: LD_INT 22
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30114
30106: LD_INT 36
30108: DOUBLE
30109: EQUAL
30110: IFTRUE 30114
30112: GO 30139
30114: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30115: LD_ADDR_VAR 0 3
30119: PUSH
30120: LD_INT 15
30122: PPUSH
30123: LD_VAR 0 1
30127: PPUSH
30128: CALL_OW 321
30132: PUSH
30133: LD_INT 2
30135: EQUAL
30136: ST_TO_ADDR
30137: GO 30383
30139: LD_INT 30
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30172
30147: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30148: LD_ADDR_VAR 0 3
30152: PUSH
30153: LD_INT 20
30155: PPUSH
30156: LD_VAR 0 1
30160: PPUSH
30161: CALL_OW 321
30165: PUSH
30166: LD_INT 2
30168: EQUAL
30169: ST_TO_ADDR
30170: GO 30383
30172: LD_INT 28
30174: DOUBLE
30175: EQUAL
30176: IFTRUE 30186
30178: LD_INT 21
30180: DOUBLE
30181: EQUAL
30182: IFTRUE 30186
30184: GO 30211
30186: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 21
30194: PPUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 321
30204: PUSH
30205: LD_INT 2
30207: EQUAL
30208: ST_TO_ADDR
30209: GO 30383
30211: LD_INT 16
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30244
30219: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30220: LD_ADDR_VAR 0 3
30224: PUSH
30225: LD_INT 84
30227: PPUSH
30228: LD_VAR 0 1
30232: PPUSH
30233: CALL_OW 321
30237: PUSH
30238: LD_INT 2
30240: EQUAL
30241: ST_TO_ADDR
30242: GO 30383
30244: LD_INT 19
30246: DOUBLE
30247: EQUAL
30248: IFTRUE 30258
30250: LD_INT 23
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30283
30258: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30259: LD_ADDR_VAR 0 3
30263: PUSH
30264: LD_INT 83
30266: PPUSH
30267: LD_VAR 0 1
30271: PPUSH
30272: CALL_OW 321
30276: PUSH
30277: LD_INT 2
30279: EQUAL
30280: ST_TO_ADDR
30281: GO 30383
30283: LD_INT 17
30285: DOUBLE
30286: EQUAL
30287: IFTRUE 30291
30289: GO 30316
30291: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30292: LD_ADDR_VAR 0 3
30296: PUSH
30297: LD_INT 39
30299: PPUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 321
30309: PUSH
30310: LD_INT 2
30312: EQUAL
30313: ST_TO_ADDR
30314: GO 30383
30316: LD_INT 18
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30349
30324: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 40
30332: PPUSH
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 321
30342: PUSH
30343: LD_INT 2
30345: EQUAL
30346: ST_TO_ADDR
30347: GO 30383
30349: LD_INT 27
30351: DOUBLE
30352: EQUAL
30353: IFTRUE 30357
30355: GO 30382
30357: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30358: LD_ADDR_VAR 0 3
30362: PUSH
30363: LD_INT 35
30365: PPUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 321
30375: PUSH
30376: LD_INT 2
30378: EQUAL
30379: ST_TO_ADDR
30380: GO 30383
30382: POP
// end ;
30383: LD_VAR 0 3
30387: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30388: LD_INT 0
30390: PPUSH
30391: PPUSH
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
30396: PPUSH
30397: PPUSH
30398: PPUSH
30399: PPUSH
30400: PPUSH
// result := false ;
30401: LD_ADDR_VAR 0 6
30405: PUSH
30406: LD_INT 0
30408: ST_TO_ADDR
// if btype = b_depot then
30409: LD_VAR 0 2
30413: PUSH
30414: LD_INT 0
30416: EQUAL
30417: IFFALSE 30429
// begin result := true ;
30419: LD_ADDR_VAR 0 6
30423: PUSH
30424: LD_INT 1
30426: ST_TO_ADDR
// exit ;
30427: GO 31255
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30429: LD_VAR 0 1
30433: NOT
30434: PUSH
30435: LD_VAR 0 1
30439: PPUSH
30440: CALL_OW 266
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: IN
30455: NOT
30456: OR
30457: PUSH
30458: LD_VAR 0 2
30462: NOT
30463: OR
30464: PUSH
30465: LD_VAR 0 5
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: LD_INT 4
30484: PUSH
30485: LD_INT 5
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: IN
30496: NOT
30497: OR
30498: PUSH
30499: LD_VAR 0 3
30503: PPUSH
30504: LD_VAR 0 4
30508: PPUSH
30509: CALL_OW 488
30513: NOT
30514: OR
30515: IFFALSE 30519
// exit ;
30517: GO 31255
// side := GetSide ( depot ) ;
30519: LD_ADDR_VAR 0 9
30523: PUSH
30524: LD_VAR 0 1
30528: PPUSH
30529: CALL_OW 255
30533: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30534: LD_VAR 0 9
30538: PPUSH
30539: LD_VAR 0 2
30543: PPUSH
30544: CALL 30012 0 2
30548: NOT
30549: IFFALSE 30553
// exit ;
30551: GO 31255
// pom := GetBase ( depot ) ;
30553: LD_ADDR_VAR 0 10
30557: PUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 274
30567: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30568: LD_ADDR_VAR 0 11
30572: PUSH
30573: LD_VAR 0 2
30577: PPUSH
30578: LD_VAR 0 1
30582: PPUSH
30583: CALL_OW 248
30587: PPUSH
30588: CALL_OW 450
30592: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30593: LD_VAR 0 10
30597: PPUSH
30598: LD_INT 1
30600: PPUSH
30601: CALL_OW 275
30605: PUSH
30606: LD_VAR 0 11
30610: PUSH
30611: LD_INT 1
30613: ARRAY
30614: GREATEREQUAL
30615: PUSH
30616: LD_VAR 0 10
30620: PPUSH
30621: LD_INT 2
30623: PPUSH
30624: CALL_OW 275
30628: PUSH
30629: LD_VAR 0 11
30633: PUSH
30634: LD_INT 2
30636: ARRAY
30637: GREATEREQUAL
30638: AND
30639: PUSH
30640: LD_VAR 0 10
30644: PPUSH
30645: LD_INT 3
30647: PPUSH
30648: CALL_OW 275
30652: PUSH
30653: LD_VAR 0 11
30657: PUSH
30658: LD_INT 3
30660: ARRAY
30661: GREATEREQUAL
30662: AND
30663: NOT
30664: IFFALSE 30668
// exit ;
30666: GO 31255
// if GetBType ( depot ) = b_depot then
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 266
30677: PUSH
30678: LD_INT 0
30680: EQUAL
30681: IFFALSE 30693
// dist := 28 else
30683: LD_ADDR_VAR 0 14
30687: PUSH
30688: LD_INT 28
30690: ST_TO_ADDR
30691: GO 30701
// dist := 36 ;
30693: LD_ADDR_VAR 0 14
30697: PUSH
30698: LD_INT 36
30700: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30701: LD_VAR 0 1
30705: PPUSH
30706: LD_VAR 0 3
30710: PPUSH
30711: LD_VAR 0 4
30715: PPUSH
30716: CALL_OW 297
30720: PUSH
30721: LD_VAR 0 14
30725: GREATER
30726: IFFALSE 30730
// exit ;
30728: GO 31255
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30730: LD_ADDR_VAR 0 12
30734: PUSH
30735: LD_VAR 0 2
30739: PPUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: LD_VAR 0 4
30749: PPUSH
30750: LD_VAR 0 5
30754: PPUSH
30755: LD_VAR 0 1
30759: PPUSH
30760: CALL_OW 248
30764: PPUSH
30765: LD_INT 0
30767: PPUSH
30768: CALL 31260 0 6
30772: ST_TO_ADDR
// if not hexes then
30773: LD_VAR 0 12
30777: NOT
30778: IFFALSE 30782
// exit ;
30780: GO 31255
// hex := GetHexInfo ( x , y ) ;
30782: LD_ADDR_VAR 0 15
30786: PUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: LD_VAR 0 4
30796: PPUSH
30797: CALL_OW 546
30801: ST_TO_ADDR
// if hex [ 1 ] then
30802: LD_VAR 0 15
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: IFFALSE 30814
// exit ;
30812: GO 31255
// height := hex [ 2 ] ;
30814: LD_ADDR_VAR 0 13
30818: PUSH
30819: LD_VAR 0 15
30823: PUSH
30824: LD_INT 2
30826: ARRAY
30827: ST_TO_ADDR
// for i = 1 to hexes do
30828: LD_ADDR_VAR 0 7
30832: PUSH
30833: DOUBLE
30834: LD_INT 1
30836: DEC
30837: ST_TO_ADDR
30838: LD_VAR 0 12
30842: PUSH
30843: FOR_TO
30844: IFFALSE 31174
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30846: LD_VAR 0 12
30850: PUSH
30851: LD_VAR 0 7
30855: ARRAY
30856: PUSH
30857: LD_INT 1
30859: ARRAY
30860: PPUSH
30861: LD_VAR 0 12
30865: PUSH
30866: LD_VAR 0 7
30870: ARRAY
30871: PUSH
30872: LD_INT 2
30874: ARRAY
30875: PPUSH
30876: CALL_OW 488
30880: NOT
30881: PUSH
30882: LD_VAR 0 12
30886: PUSH
30887: LD_VAR 0 7
30891: ARRAY
30892: PUSH
30893: LD_INT 1
30895: ARRAY
30896: PPUSH
30897: LD_VAR 0 12
30901: PUSH
30902: LD_VAR 0 7
30906: ARRAY
30907: PUSH
30908: LD_INT 2
30910: ARRAY
30911: PPUSH
30912: CALL_OW 428
30916: PUSH
30917: LD_INT 0
30919: GREATER
30920: OR
30921: PUSH
30922: LD_VAR 0 12
30926: PUSH
30927: LD_VAR 0 7
30931: ARRAY
30932: PUSH
30933: LD_INT 1
30935: ARRAY
30936: PPUSH
30937: LD_VAR 0 12
30941: PUSH
30942: LD_VAR 0 7
30946: ARRAY
30947: PUSH
30948: LD_INT 2
30950: ARRAY
30951: PPUSH
30952: CALL_OW 351
30956: OR
30957: IFFALSE 30963
// exit ;
30959: POP
30960: POP
30961: GO 31255
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30963: LD_ADDR_VAR 0 8
30967: PUSH
30968: LD_VAR 0 12
30972: PUSH
30973: LD_VAR 0 7
30977: ARRAY
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: PPUSH
30983: LD_VAR 0 12
30987: PUSH
30988: LD_VAR 0 7
30992: ARRAY
30993: PUSH
30994: LD_INT 2
30996: ARRAY
30997: PPUSH
30998: CALL_OW 546
31002: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31003: LD_VAR 0 8
31007: PUSH
31008: LD_INT 1
31010: ARRAY
31011: PUSH
31012: LD_VAR 0 8
31016: PUSH
31017: LD_INT 2
31019: ARRAY
31020: PUSH
31021: LD_VAR 0 13
31025: PUSH
31026: LD_INT 2
31028: PLUS
31029: GREATER
31030: OR
31031: PUSH
31032: LD_VAR 0 8
31036: PUSH
31037: LD_INT 2
31039: ARRAY
31040: PUSH
31041: LD_VAR 0 13
31045: PUSH
31046: LD_INT 2
31048: MINUS
31049: LESS
31050: OR
31051: PUSH
31052: LD_VAR 0 8
31056: PUSH
31057: LD_INT 3
31059: ARRAY
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 8
31066: PUSH
31067: LD_INT 9
31069: PUSH
31070: LD_INT 10
31072: PUSH
31073: LD_INT 11
31075: PUSH
31076: LD_INT 12
31078: PUSH
31079: LD_INT 13
31081: PUSH
31082: LD_INT 16
31084: PUSH
31085: LD_INT 17
31087: PUSH
31088: LD_INT 18
31090: PUSH
31091: LD_INT 19
31093: PUSH
31094: LD_INT 20
31096: PUSH
31097: LD_INT 21
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: IN
31115: NOT
31116: OR
31117: PUSH
31118: LD_VAR 0 8
31122: PUSH
31123: LD_INT 5
31125: ARRAY
31126: NOT
31127: OR
31128: PUSH
31129: LD_VAR 0 8
31133: PUSH
31134: LD_INT 6
31136: ARRAY
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 7
31146: PUSH
31147: LD_INT 9
31149: PUSH
31150: LD_INT 10
31152: PUSH
31153: LD_INT 11
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: IN
31164: NOT
31165: OR
31166: IFFALSE 31172
// exit ;
31168: POP
31169: POP
31170: GO 31255
// end ;
31172: GO 30843
31174: POP
31175: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31176: LD_VAR 0 9
31180: PPUSH
31181: LD_VAR 0 3
31185: PPUSH
31186: LD_VAR 0 4
31190: PPUSH
31191: LD_INT 20
31193: PPUSH
31194: CALL 23178 0 4
31198: PUSH
31199: LD_INT 4
31201: ARRAY
31202: IFFALSE 31206
// exit ;
31204: GO 31255
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31206: LD_VAR 0 2
31210: PUSH
31211: LD_INT 29
31213: PUSH
31214: LD_INT 30
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: IN
31221: PUSH
31222: LD_VAR 0 3
31226: PPUSH
31227: LD_VAR 0 4
31231: PPUSH
31232: LD_VAR 0 9
31236: PPUSH
31237: CALL_OW 440
31241: NOT
31242: AND
31243: IFFALSE 31247
// exit ;
31245: GO 31255
// result := true ;
31247: LD_ADDR_VAR 0 6
31251: PUSH
31252: LD_INT 1
31254: ST_TO_ADDR
// end ;
31255: LD_VAR 0 6
31259: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31260: LD_INT 0
31262: PPUSH
31263: PPUSH
31264: PPUSH
31265: PPUSH
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
31270: PPUSH
31271: PPUSH
31272: PPUSH
31273: PPUSH
31274: PPUSH
31275: PPUSH
31276: PPUSH
31277: PPUSH
31278: PPUSH
31279: PPUSH
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
31289: PPUSH
31290: PPUSH
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
31301: PPUSH
31302: PPUSH
31303: PPUSH
31304: PPUSH
31305: PPUSH
31306: PPUSH
31307: PPUSH
31308: PPUSH
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
// result = [ ] ;
31320: LD_ADDR_VAR 0 7
31324: PUSH
31325: EMPTY
31326: ST_TO_ADDR
// temp_list = [ ] ;
31327: LD_ADDR_VAR 0 9
31331: PUSH
31332: EMPTY
31333: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31334: LD_VAR 0 4
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: LD_INT 4
31353: PUSH
31354: LD_INT 5
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: IN
31365: NOT
31366: PUSH
31367: LD_VAR 0 1
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: IN
31382: PUSH
31383: LD_VAR 0 5
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 3
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: IN
31402: NOT
31403: AND
31404: OR
31405: IFFALSE 31409
// exit ;
31407: GO 49800
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31409: LD_VAR 0 1
31413: PUSH
31414: LD_INT 6
31416: PUSH
31417: LD_INT 7
31419: PUSH
31420: LD_INT 8
31422: PUSH
31423: LD_INT 13
31425: PUSH
31426: LD_INT 12
31428: PUSH
31429: LD_INT 15
31431: PUSH
31432: LD_INT 11
31434: PUSH
31435: LD_INT 14
31437: PUSH
31438: LD_INT 10
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: IN
31452: IFFALSE 31462
// btype = b_lab ;
31454: LD_ADDR_VAR 0 1
31458: PUSH
31459: LD_INT 6
31461: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31462: LD_VAR 0 6
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 2
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: IN
31481: NOT
31482: PUSH
31483: LD_VAR 0 1
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 3
31499: PUSH
31500: LD_INT 6
31502: PUSH
31503: LD_INT 36
31505: PUSH
31506: LD_INT 4
31508: PUSH
31509: LD_INT 5
31511: PUSH
31512: LD_INT 31
31514: PUSH
31515: LD_INT 32
31517: PUSH
31518: LD_INT 33
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: IN
31534: NOT
31535: PUSH
31536: LD_VAR 0 6
31540: PUSH
31541: LD_INT 1
31543: EQUAL
31544: AND
31545: OR
31546: PUSH
31547: LD_VAR 0 1
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: IN
31562: NOT
31563: PUSH
31564: LD_VAR 0 6
31568: PUSH
31569: LD_INT 2
31571: EQUAL
31572: AND
31573: OR
31574: IFFALSE 31584
// mode = 0 ;
31576: LD_ADDR_VAR 0 6
31580: PUSH
31581: LD_INT 0
31583: ST_TO_ADDR
// case mode of 0 :
31584: LD_VAR 0 6
31588: PUSH
31589: LD_INT 0
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 43050
31597: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31598: LD_ADDR_VAR 0 11
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: NEG
31680: PUSH
31681: LD_INT 2
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: LD_INT 3
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 2
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31791: LD_ADDR_VAR 0 12
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: NEG
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 3
31959: NEG
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31987: LD_ADDR_VAR 0 13
31991: PUSH
31992: LD_INT 0
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 1
32045: NEG
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 2
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 2
32134: NEG
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: NEG
32159: PUSH
32160: LD_INT 3
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32186: LD_ADDR_VAR 0 14
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32382: LD_ADDR_VAR 0 15
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 2
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32575: LD_ADDR_VAR 0 16
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 2
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 2
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32768: LD_ADDR_VAR 0 17
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: NEG
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 1
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 1
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32998: LD_ADDR_VAR 0 18
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: LD_INT 0
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 1
33079: NEG
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 0
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 1
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 2
33197: NEG
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33228: LD_ADDR_VAR 0 19
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: LD_INT 1
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 2
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: LD_INT 2
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 2
33404: NEG
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33458: LD_ADDR_VAR 0 20
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 2
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 2
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33688: LD_ADDR_VAR 0 21
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 1
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: NEG
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: LD_INT 2
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 1
33853: NEG
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: NEG
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33918: LD_ADDR_VAR 0 22
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: LD_INT 2
34003: NEG
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 2
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 2
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34148: LD_ADDR_VAR 0 23
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 0
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: NEG
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 2
34335: NEG
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: LD_INT 3
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: LD_INT 3
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34428: LD_ADDR_VAR 0 24
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 0
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: NEG
34628: PUSH
34629: LD_INT 2
34631: NEG
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: LD_INT 2
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 3
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 3
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34704: LD_ADDR_VAR 0 25
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 2
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: LD_INT 2
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 3
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 3
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 3
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34978: LD_ADDR_VAR 0 26
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 0
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 1
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 1
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 2
35154: NEG
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35254: LD_ADDR_VAR 0 27
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 2
35476: NEG
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 3
35487: NEG
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 3
35499: NEG
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35534: LD_ADDR_VAR 0 28
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 2
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 2
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 2
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 2
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 2
35721: NEG
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: NEG
35746: PUSH
35747: LD_INT 3
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 3
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 3
35781: NEG
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35816: LD_ADDR_VAR 0 29
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 1
35897: NEG
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 2
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 3
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 3
36060: NEG
36061: PUSH
36062: LD_INT 2
36064: NEG
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36095: LD_ADDR_VAR 0 30
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 2
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: NEG
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 3
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 2
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36373: LD_ADDR_VAR 0 31
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: LD_INT 1
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: NEG
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 2
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 1
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: NEG
36551: PUSH
36552: LD_INT 2
36554: NEG
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 3
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 3
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: LD_INT 3
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 3
36616: NEG
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36651: LD_ADDR_VAR 0 32
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 1
36709: NEG
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 1
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: LD_INT 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: NEG
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: NEG
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 3
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: NEG
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36929: LD_ADDR_VAR 0 33
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 1
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 2
37119: NEG
37120: PUSH
37121: LD_INT 3
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 3
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 3
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 2
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37208: LD_ADDR_VAR 0 34
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 2
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: LD_INT 1
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 2
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: LD_INT 3
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 2
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 3
37422: PUSH
37423: LD_INT 2
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 3
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37488: LD_ADDR_VAR 0 35
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 2
37579: NEG
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37600: LD_ADDR_VAR 0 36
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37712: LD_ADDR_VAR 0 37
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: LD_INT 1
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37824: LD_ADDR_VAR 0 38
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 1
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37936: LD_ADDR_VAR 0 39
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 2
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38048: LD_ADDR_VAR 0 40
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 1
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38160: LD_ADDR_VAR 0 41
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: LD_INT 3
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 3
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38510: LD_ADDR_VAR 0 42
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: LD_INT 2
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 3
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 3
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 3
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 2
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 3
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 3
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 3
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38860: LD_ADDR_VAR 0 43
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 3
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 2
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 2
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 3
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: NEG
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39208: LD_ADDR_VAR 0 44
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 0
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 1
39281: NEG
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: NEG
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: LD_INT 1
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 3
39421: PUSH
39422: LD_INT 0
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 3
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: NEG
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 3
39517: NEG
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39558: LD_ADDR_VAR 0 45
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 2
39724: NEG
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: LD_INT 3
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 3
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: LD_INT 3
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 3
39794: PUSH
39795: LD_INT 2
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 3
39804: PUSH
39805: LD_INT 3
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 2
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 2
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: NEG
39868: PUSH
39869: LD_INT 3
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39908: LD_ADDR_VAR 0 46
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 2
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 2
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 2
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: NEG
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 3
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 3
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 3
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 3
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: NEG
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: NEG
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40256: LD_ADDR_VAR 0 47
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40407: LD_ADDR_VAR 0 48
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 0
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: NEG
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40554: LD_ADDR_VAR 0 49
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40698: LD_ADDR_VAR 0 50
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40842: LD_ADDR_VAR 0 51
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40989: LD_ADDR_VAR 0 52
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: NEG
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: NEG
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41140: LD_ADDR_VAR 0 53
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 2
41236: NEG
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41370: LD_ADDR_VAR 0 54
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: NEG
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 2
41546: NEG
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 2
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 2
41569: NEG
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41600: LD_ADDR_VAR 0 55
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 2
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41830: LD_ADDR_VAR 0 56
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 2
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 2
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: NEG
42018: PUSH
42019: LD_INT 1
42021: NEG
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42060: LD_ADDR_VAR 0 57
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42290: LD_ADDR_VAR 0 58
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: NEG
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: NEG
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 2
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 2
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42520: LD_ADDR_VAR 0 59
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42608: LD_ADDR_VAR 0 60
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42696: LD_ADDR_VAR 0 61
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42784: LD_ADDR_VAR 0 62
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42872: LD_ADDR_VAR 0 63
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42960: LD_ADDR_VAR 0 64
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// end ; 1 :
43048: GO 48945
43050: LD_INT 1
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 45681
43058: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43059: LD_ADDR_VAR 0 11
43063: PUSH
43064: LD_INT 1
43066: NEG
43067: PUSH
43068: LD_INT 3
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 3
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: LD_INT 2
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: LIST
43102: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43103: LD_ADDR_VAR 0 12
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: LD_INT 1
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: LIST
43143: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43144: LD_ADDR_VAR 0 13
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 3
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43184: LD_ADDR_VAR 0 14
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43225: LD_ADDR_VAR 0 15
43229: PUSH
43230: LD_INT 2
43232: NEG
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 3
43243: NEG
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43269: LD_ADDR_VAR 0 16
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: LD_INT 3
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 3
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: NEG
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43315: LD_ADDR_VAR 0 17
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: LD_INT 2
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43359: LD_ADDR_VAR 0 18
43363: PUSH
43364: LD_INT 2
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43400: LD_ADDR_VAR 0 19
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 2
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 3
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43440: LD_ADDR_VAR 0 20
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 3
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43481: LD_ADDR_VAR 0 21
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43525: LD_ADDR_VAR 0 22
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 3
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 3
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 3
43556: NEG
43557: PUSH
43558: LD_INT 3
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43571: LD_ADDR_VAR 0 23
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 3
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 4
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43615: LD_ADDR_VAR 0 24
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 3
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 4
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43656: LD_ADDR_VAR 0 25
43660: PUSH
43661: LD_INT 3
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 4
43673: PUSH
43674: LD_INT 3
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: LD_INT 4
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: LIST
43695: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43696: LD_ADDR_VAR 0 26
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 4
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 3
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43737: LD_ADDR_VAR 0 27
43741: PUSH
43742: LD_INT 3
43744: NEG
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 3
43755: NEG
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 4
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43781: LD_ADDR_VAR 0 28
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: LD_INT 3
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: LD_INT 4
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 4
43812: NEG
43813: PUSH
43814: LD_INT 3
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43827: LD_ADDR_VAR 0 29
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 3
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 3
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 4
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 4
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 3
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 5
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 5
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 4
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 6
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 6
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 5
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43982: LD_ADDR_VAR 0 30
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 3
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 3
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 4
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 4
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 5
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 5
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 6
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 6
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44125: LD_ADDR_VAR 0 31
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 4
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 4
44172: PUSH
44173: LD_INT 4
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: PUSH
44183: LD_INT 4
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 5
44192: PUSH
44193: LD_INT 4
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 5
44202: PUSH
44203: LD_INT 5
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 4
44212: PUSH
44213: LD_INT 5
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 6
44222: PUSH
44223: LD_INT 5
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 6
44232: PUSH
44233: LD_INT 6
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 5
44242: PUSH
44243: LD_INT 6
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44264: LD_ADDR_VAR 0 32
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 3
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 3
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 4
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 4
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 3
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 5
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 4
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 6
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 6
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 5
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44407: LD_ADDR_VAR 0 33
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 3
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 4
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 4
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 4
44482: NEG
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 5
44493: NEG
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 5
44504: NEG
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 5
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 6
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 6
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44562: LD_ADDR_VAR 0 34
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: LD_INT 3
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 2
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 3
44593: NEG
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: LD_INT 4
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 4
44617: NEG
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 4
44629: NEG
44630: PUSH
44631: LD_INT 4
44633: NEG
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 4
44641: NEG
44642: PUSH
44643: LD_INT 5
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 5
44653: NEG
44654: PUSH
44655: LD_INT 4
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 5
44665: NEG
44666: PUSH
44667: LD_INT 5
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 5
44677: NEG
44678: PUSH
44679: LD_INT 6
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 6
44689: NEG
44690: PUSH
44691: LD_INT 5
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 6
44701: NEG
44702: PUSH
44703: LD_INT 6
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44725: LD_ADDR_VAR 0 41
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44769: LD_ADDR_VAR 0 42
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 1
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44810: LD_ADDR_VAR 0 43
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 3
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44850: LD_ADDR_VAR 0 44
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44891: LD_ADDR_VAR 0 45
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44935: LD_ADDR_VAR 0 46
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: NEG
44955: PUSH
44956: LD_INT 3
44958: NEG
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 3
44966: NEG
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: LIST
44980: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44981: LD_ADDR_VAR 0 47
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45014: LD_ADDR_VAR 0 48
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 2
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45045: LD_ADDR_VAR 0 49
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45074: LD_ADDR_VAR 0 50
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: LD_INT 3
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 3
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45103: LD_ADDR_VAR 0 51
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45134: LD_ADDR_VAR 0 52
45138: PUSH
45139: LD_INT 3
45141: NEG
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45167: LD_ADDR_VAR 0 53
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 3
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45211: LD_ADDR_VAR 0 54
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45252: LD_ADDR_VAR 0 55
45256: PUSH
45257: LD_INT 3
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: LIST
45291: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45292: LD_ADDR_VAR 0 56
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 3
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45333: LD_ADDR_VAR 0 57
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45377: LD_ADDR_VAR 0 58
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 3
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: NEG
45409: PUSH
45410: LD_INT 3
45412: NEG
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45423: LD_ADDR_VAR 0 59
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45467: LD_ADDR_VAR 0 60
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45508: LD_ADDR_VAR 0 61
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45548: LD_ADDR_VAR 0 62
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45589: LD_ADDR_VAR 0 63
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: NEG
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45633: LD_ADDR_VAR 0 64
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// end ; 2 :
45679: GO 48945
45681: LD_INT 2
45683: DOUBLE
45684: EQUAL
45685: IFTRUE 45689
45687: GO 48944
45689: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45690: LD_ADDR_VAR 0 29
45694: PUSH
45695: LD_INT 4
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 4
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 5
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 5
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 4
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 2
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 5
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: LD_INT 3
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: LD_INT 2
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 4
45810: PUSH
45811: LD_INT 3
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 4
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 3
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 4
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 4
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 4
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 3
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 4
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 5
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 5
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 4
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 5
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: NEG
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 3
46018: NEG
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 4
46029: NEG
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 4
46040: NEG
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 4
46052: NEG
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: LD_INT 4
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: LD_INT 5
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 3
46099: NEG
46100: PUSH
46101: LD_INT 4
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: LD_INT 3
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 4
46123: NEG
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 5
46135: NEG
46136: PUSH
46137: LD_INT 4
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 5
46147: NEG
46148: PUSH
46149: LD_INT 5
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: LD_INT 5
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 5
46171: NEG
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46228: LD_ADDR_VAR 0 30
46232: PUSH
46233: LD_INT 4
46235: PUSH
46236: LD_INT 4
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 4
46245: PUSH
46246: LD_INT 3
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 5
46255: PUSH
46256: LD_INT 4
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 5
46265: PUSH
46266: LD_INT 5
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 4
46275: PUSH
46276: LD_INT 5
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: LD_INT 4
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 5
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: LD_INT 5
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 3
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 4
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 4
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 4
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 4
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 4
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 5
46474: NEG
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 5
46485: NEG
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 5
46497: NEG
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: NEG
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: LD_INT 4
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: LD_INT 3
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 4
46592: NEG
46593: PUSH
46594: LD_INT 4
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: LD_INT 4
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 4
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 4
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: LD_INT 5
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 4
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 3
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 3
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 4
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 5
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: LD_INT 5
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46775: LD_ADDR_VAR 0 31
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 4
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 5
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 4
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: NEG
46865: PUSH
46866: LD_INT 3
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 4
46931: NEG
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 4
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 4
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 4
46977: NEG
46978: PUSH
46979: LD_INT 4
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: LD_INT 5
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 4
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: LD_INT 3
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 4
47025: NEG
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 5
47037: NEG
47038: PUSH
47039: LD_INT 4
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 5
47049: NEG
47050: PUSH
47051: LD_INT 5
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: NEG
47062: PUSH
47063: LD_INT 5
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 5
47073: NEG
47074: PUSH
47075: LD_INT 3
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 4
47099: NEG
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: LD_INT 3
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: LD_INT 2
47121: NEG
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 4
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 4
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 4
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 4
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 5
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 5
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 3
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 5
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47325: LD_ADDR_VAR 0 32
47329: PUSH
47330: LD_INT 4
47332: NEG
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 4
47343: NEG
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 3
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 4
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 5
47399: NEG
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 5
47411: NEG
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: LD_INT 4
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 3
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 4
47494: NEG
47495: PUSH
47496: LD_INT 3
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 4
47506: NEG
47507: PUSH
47508: LD_INT 4
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 4
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 4
47530: NEG
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 4
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 5
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 4
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 3
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 3
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 4
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 5
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: LD_INT 5
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 4
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 4
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 4
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 4
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 5
47757: PUSH
47758: LD_INT 4
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 5
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 4
47777: PUSH
47778: LD_INT 5
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: PUSH
47788: LD_INT 4
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 5
47807: PUSH
47808: LD_INT 3
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: LD_INT 5
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47872: LD_ADDR_VAR 0 33
47876: PUSH
47877: LD_INT 4
47879: NEG
47880: PUSH
47881: LD_INT 4
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 4
47891: NEG
47892: PUSH
47893: LD_INT 5
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: NEG
47904: PUSH
47905: LD_INT 4
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 3
47915: NEG
47916: PUSH
47917: LD_INT 3
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 4
47927: NEG
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 5
47939: NEG
47940: PUSH
47941: LD_INT 4
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 5
47951: NEG
47952: PUSH
47953: LD_INT 5
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 5
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 5
47975: NEG
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 0
47998: PUSH
47999: LD_INT 4
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: LD_INT 3
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 4
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 4
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 4
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 4
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 5
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 4
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 4
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 4
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 4
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 4
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 5
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 5
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 5
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48410: LD_ADDR_VAR 0 34
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 4
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 5
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 4
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 4
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 5
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 2
48507: NEG
48508: PUSH
48509: LD_INT 5
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 4
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 4
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 4
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 4
48612: PUSH
48613: LD_INT 4
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 4
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 4
48652: PUSH
48653: LD_INT 5
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 4
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 5
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: LD_INT 5
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 3
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: LD_INT 4
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 4
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 4
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 4
48795: NEG
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 4
48806: NEG
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 4
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 5
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 5
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 5
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// end ; end ;
48942: GO 48945
48944: POP
// case btype of b_depot , b_warehouse :
48945: LD_VAR 0 1
48949: PUSH
48950: LD_INT 0
48952: DOUBLE
48953: EQUAL
48954: IFTRUE 48964
48956: LD_INT 1
48958: DOUBLE
48959: EQUAL
48960: IFTRUE 48964
48962: GO 49165
48964: POP
// case nation of nation_american :
48965: LD_VAR 0 5
48969: PUSH
48970: LD_INT 1
48972: DOUBLE
48973: EQUAL
48974: IFTRUE 48978
48976: GO 49034
48978: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48979: LD_ADDR_VAR 0 9
48983: PUSH
48984: LD_VAR 0 11
48988: PUSH
48989: LD_VAR 0 12
48993: PUSH
48994: LD_VAR 0 13
48998: PUSH
48999: LD_VAR 0 14
49003: PUSH
49004: LD_VAR 0 15
49008: PUSH
49009: LD_VAR 0 16
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: PUSH
49022: LD_VAR 0 4
49026: PUSH
49027: LD_INT 1
49029: PLUS
49030: ARRAY
49031: ST_TO_ADDR
49032: GO 49163
49034: LD_INT 2
49036: DOUBLE
49037: EQUAL
49038: IFTRUE 49042
49040: GO 49098
49042: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49043: LD_ADDR_VAR 0 9
49047: PUSH
49048: LD_VAR 0 17
49052: PUSH
49053: LD_VAR 0 18
49057: PUSH
49058: LD_VAR 0 19
49062: PUSH
49063: LD_VAR 0 20
49067: PUSH
49068: LD_VAR 0 21
49072: PUSH
49073: LD_VAR 0 22
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: PUSH
49086: LD_VAR 0 4
49090: PUSH
49091: LD_INT 1
49093: PLUS
49094: ARRAY
49095: ST_TO_ADDR
49096: GO 49163
49098: LD_INT 3
49100: DOUBLE
49101: EQUAL
49102: IFTRUE 49106
49104: GO 49162
49106: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49107: LD_ADDR_VAR 0 9
49111: PUSH
49112: LD_VAR 0 23
49116: PUSH
49117: LD_VAR 0 24
49121: PUSH
49122: LD_VAR 0 25
49126: PUSH
49127: LD_VAR 0 26
49131: PUSH
49132: LD_VAR 0 27
49136: PUSH
49137: LD_VAR 0 28
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: PUSH
49150: LD_VAR 0 4
49154: PUSH
49155: LD_INT 1
49157: PLUS
49158: ARRAY
49159: ST_TO_ADDR
49160: GO 49163
49162: POP
49163: GO 49718
49165: LD_INT 2
49167: DOUBLE
49168: EQUAL
49169: IFTRUE 49179
49171: LD_INT 3
49173: DOUBLE
49174: EQUAL
49175: IFTRUE 49179
49177: GO 49235
49179: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49180: LD_ADDR_VAR 0 9
49184: PUSH
49185: LD_VAR 0 29
49189: PUSH
49190: LD_VAR 0 30
49194: PUSH
49195: LD_VAR 0 31
49199: PUSH
49200: LD_VAR 0 32
49204: PUSH
49205: LD_VAR 0 33
49209: PUSH
49210: LD_VAR 0 34
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: PUSH
49223: LD_VAR 0 4
49227: PUSH
49228: LD_INT 1
49230: PLUS
49231: ARRAY
49232: ST_TO_ADDR
49233: GO 49718
49235: LD_INT 16
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49297
49241: LD_INT 17
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49297
49247: LD_INT 18
49249: DOUBLE
49250: EQUAL
49251: IFTRUE 49297
49253: LD_INT 19
49255: DOUBLE
49256: EQUAL
49257: IFTRUE 49297
49259: LD_INT 22
49261: DOUBLE
49262: EQUAL
49263: IFTRUE 49297
49265: LD_INT 20
49267: DOUBLE
49268: EQUAL
49269: IFTRUE 49297
49271: LD_INT 21
49273: DOUBLE
49274: EQUAL
49275: IFTRUE 49297
49277: LD_INT 23
49279: DOUBLE
49280: EQUAL
49281: IFTRUE 49297
49283: LD_INT 24
49285: DOUBLE
49286: EQUAL
49287: IFTRUE 49297
49289: LD_INT 25
49291: DOUBLE
49292: EQUAL
49293: IFTRUE 49297
49295: GO 49353
49297: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49298: LD_ADDR_VAR 0 9
49302: PUSH
49303: LD_VAR 0 35
49307: PUSH
49308: LD_VAR 0 36
49312: PUSH
49313: LD_VAR 0 37
49317: PUSH
49318: LD_VAR 0 38
49322: PUSH
49323: LD_VAR 0 39
49327: PUSH
49328: LD_VAR 0 40
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: PUSH
49341: LD_VAR 0 4
49345: PUSH
49346: LD_INT 1
49348: PLUS
49349: ARRAY
49350: ST_TO_ADDR
49351: GO 49718
49353: LD_INT 6
49355: DOUBLE
49356: EQUAL
49357: IFTRUE 49409
49359: LD_INT 7
49361: DOUBLE
49362: EQUAL
49363: IFTRUE 49409
49365: LD_INT 8
49367: DOUBLE
49368: EQUAL
49369: IFTRUE 49409
49371: LD_INT 13
49373: DOUBLE
49374: EQUAL
49375: IFTRUE 49409
49377: LD_INT 12
49379: DOUBLE
49380: EQUAL
49381: IFTRUE 49409
49383: LD_INT 15
49385: DOUBLE
49386: EQUAL
49387: IFTRUE 49409
49389: LD_INT 11
49391: DOUBLE
49392: EQUAL
49393: IFTRUE 49409
49395: LD_INT 14
49397: DOUBLE
49398: EQUAL
49399: IFTRUE 49409
49401: LD_INT 10
49403: DOUBLE
49404: EQUAL
49405: IFTRUE 49409
49407: GO 49465
49409: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49410: LD_ADDR_VAR 0 9
49414: PUSH
49415: LD_VAR 0 41
49419: PUSH
49420: LD_VAR 0 42
49424: PUSH
49425: LD_VAR 0 43
49429: PUSH
49430: LD_VAR 0 44
49434: PUSH
49435: LD_VAR 0 45
49439: PUSH
49440: LD_VAR 0 46
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: PUSH
49453: LD_VAR 0 4
49457: PUSH
49458: LD_INT 1
49460: PLUS
49461: ARRAY
49462: ST_TO_ADDR
49463: GO 49718
49465: LD_INT 36
49467: DOUBLE
49468: EQUAL
49469: IFTRUE 49473
49471: GO 49529
49473: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49474: LD_ADDR_VAR 0 9
49478: PUSH
49479: LD_VAR 0 47
49483: PUSH
49484: LD_VAR 0 48
49488: PUSH
49489: LD_VAR 0 49
49493: PUSH
49494: LD_VAR 0 50
49498: PUSH
49499: LD_VAR 0 51
49503: PUSH
49504: LD_VAR 0 52
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: PUSH
49517: LD_VAR 0 4
49521: PUSH
49522: LD_INT 1
49524: PLUS
49525: ARRAY
49526: ST_TO_ADDR
49527: GO 49718
49529: LD_INT 4
49531: DOUBLE
49532: EQUAL
49533: IFTRUE 49555
49535: LD_INT 5
49537: DOUBLE
49538: EQUAL
49539: IFTRUE 49555
49541: LD_INT 34
49543: DOUBLE
49544: EQUAL
49545: IFTRUE 49555
49547: LD_INT 37
49549: DOUBLE
49550: EQUAL
49551: IFTRUE 49555
49553: GO 49611
49555: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49556: LD_ADDR_VAR 0 9
49560: PUSH
49561: LD_VAR 0 53
49565: PUSH
49566: LD_VAR 0 54
49570: PUSH
49571: LD_VAR 0 55
49575: PUSH
49576: LD_VAR 0 56
49580: PUSH
49581: LD_VAR 0 57
49585: PUSH
49586: LD_VAR 0 58
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: PUSH
49599: LD_VAR 0 4
49603: PUSH
49604: LD_INT 1
49606: PLUS
49607: ARRAY
49608: ST_TO_ADDR
49609: GO 49718
49611: LD_INT 31
49613: DOUBLE
49614: EQUAL
49615: IFTRUE 49661
49617: LD_INT 32
49619: DOUBLE
49620: EQUAL
49621: IFTRUE 49661
49623: LD_INT 33
49625: DOUBLE
49626: EQUAL
49627: IFTRUE 49661
49629: LD_INT 27
49631: DOUBLE
49632: EQUAL
49633: IFTRUE 49661
49635: LD_INT 26
49637: DOUBLE
49638: EQUAL
49639: IFTRUE 49661
49641: LD_INT 28
49643: DOUBLE
49644: EQUAL
49645: IFTRUE 49661
49647: LD_INT 29
49649: DOUBLE
49650: EQUAL
49651: IFTRUE 49661
49653: LD_INT 30
49655: DOUBLE
49656: EQUAL
49657: IFTRUE 49661
49659: GO 49717
49661: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49662: LD_ADDR_VAR 0 9
49666: PUSH
49667: LD_VAR 0 59
49671: PUSH
49672: LD_VAR 0 60
49676: PUSH
49677: LD_VAR 0 61
49681: PUSH
49682: LD_VAR 0 62
49686: PUSH
49687: LD_VAR 0 63
49691: PUSH
49692: LD_VAR 0 64
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: PUSH
49705: LD_VAR 0 4
49709: PUSH
49710: LD_INT 1
49712: PLUS
49713: ARRAY
49714: ST_TO_ADDR
49715: GO 49718
49717: POP
// temp_list2 = [ ] ;
49718: LD_ADDR_VAR 0 10
49722: PUSH
49723: EMPTY
49724: ST_TO_ADDR
// for i in temp_list do
49725: LD_ADDR_VAR 0 8
49729: PUSH
49730: LD_VAR 0 9
49734: PUSH
49735: FOR_IN
49736: IFFALSE 49788
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49738: LD_ADDR_VAR 0 10
49742: PUSH
49743: LD_VAR 0 10
49747: PUSH
49748: LD_VAR 0 8
49752: PUSH
49753: LD_INT 1
49755: ARRAY
49756: PUSH
49757: LD_VAR 0 2
49761: PLUS
49762: PUSH
49763: LD_VAR 0 8
49767: PUSH
49768: LD_INT 2
49770: ARRAY
49771: PUSH
49772: LD_VAR 0 3
49776: PLUS
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: ADD
49785: ST_TO_ADDR
49786: GO 49735
49788: POP
49789: POP
// result = temp_list2 ;
49790: LD_ADDR_VAR 0 7
49794: PUSH
49795: LD_VAR 0 10
49799: ST_TO_ADDR
// end ;
49800: LD_VAR 0 7
49804: RET
// export function EnemyInRange ( unit , dist ) ; begin
49805: LD_INT 0
49807: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49808: LD_ADDR_VAR 0 3
49812: PUSH
49813: LD_VAR 0 1
49817: PPUSH
49818: CALL_OW 255
49822: PPUSH
49823: LD_VAR 0 1
49827: PPUSH
49828: CALL_OW 250
49832: PPUSH
49833: LD_VAR 0 1
49837: PPUSH
49838: CALL_OW 251
49842: PPUSH
49843: LD_VAR 0 2
49847: PPUSH
49848: CALL 23178 0 4
49852: PUSH
49853: LD_INT 4
49855: ARRAY
49856: ST_TO_ADDR
// end ;
49857: LD_VAR 0 3
49861: RET
// export function PlayerSeeMe ( unit ) ; begin
49862: LD_INT 0
49864: PPUSH
// result := See ( your_side , unit ) ;
49865: LD_ADDR_VAR 0 2
49869: PUSH
49870: LD_OWVAR 2
49874: PPUSH
49875: LD_VAR 0 1
49879: PPUSH
49880: CALL_OW 292
49884: ST_TO_ADDR
// end ;
49885: LD_VAR 0 2
49889: RET
// export function ReverseDir ( unit ) ; begin
49890: LD_INT 0
49892: PPUSH
// if not unit then
49893: LD_VAR 0 1
49897: NOT
49898: IFFALSE 49902
// exit ;
49900: GO 49925
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49902: LD_ADDR_VAR 0 2
49906: PUSH
49907: LD_VAR 0 1
49911: PPUSH
49912: CALL_OW 254
49916: PUSH
49917: LD_INT 3
49919: PLUS
49920: PUSH
49921: LD_INT 6
49923: MOD
49924: ST_TO_ADDR
// end ;
49925: LD_VAR 0 2
49929: RET
// export function ReverseArray ( array ) ; var i ; begin
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
// if not array then
49934: LD_VAR 0 1
49938: NOT
49939: IFFALSE 49943
// exit ;
49941: GO 49998
// result := [ ] ;
49943: LD_ADDR_VAR 0 2
49947: PUSH
49948: EMPTY
49949: ST_TO_ADDR
// for i := array downto 1 do
49950: LD_ADDR_VAR 0 3
49954: PUSH
49955: DOUBLE
49956: LD_VAR 0 1
49960: INC
49961: ST_TO_ADDR
49962: LD_INT 1
49964: PUSH
49965: FOR_DOWNTO
49966: IFFALSE 49996
// result := Join ( result , array [ i ] ) ;
49968: LD_ADDR_VAR 0 2
49972: PUSH
49973: LD_VAR 0 2
49977: PPUSH
49978: LD_VAR 0 1
49982: PUSH
49983: LD_VAR 0 3
49987: ARRAY
49988: PPUSH
49989: CALL 54663 0 2
49993: ST_TO_ADDR
49994: GO 49965
49996: POP
49997: POP
// end ;
49998: LD_VAR 0 2
50002: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50003: LD_INT 0
50005: PPUSH
50006: PPUSH
50007: PPUSH
50008: PPUSH
50009: PPUSH
50010: PPUSH
// if not unit or not hexes then
50011: LD_VAR 0 1
50015: NOT
50016: PUSH
50017: LD_VAR 0 2
50021: NOT
50022: OR
50023: IFFALSE 50027
// exit ;
50025: GO 50150
// dist := 9999 ;
50027: LD_ADDR_VAR 0 5
50031: PUSH
50032: LD_INT 9999
50034: ST_TO_ADDR
// for i = 1 to hexes do
50035: LD_ADDR_VAR 0 4
50039: PUSH
50040: DOUBLE
50041: LD_INT 1
50043: DEC
50044: ST_TO_ADDR
50045: LD_VAR 0 2
50049: PUSH
50050: FOR_TO
50051: IFFALSE 50138
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50053: LD_ADDR_VAR 0 6
50057: PUSH
50058: LD_VAR 0 1
50062: PPUSH
50063: LD_VAR 0 2
50067: PUSH
50068: LD_VAR 0 4
50072: ARRAY
50073: PUSH
50074: LD_INT 1
50076: ARRAY
50077: PPUSH
50078: LD_VAR 0 2
50082: PUSH
50083: LD_VAR 0 4
50087: ARRAY
50088: PUSH
50089: LD_INT 2
50091: ARRAY
50092: PPUSH
50093: CALL_OW 297
50097: ST_TO_ADDR
// if tdist < dist then
50098: LD_VAR 0 6
50102: PUSH
50103: LD_VAR 0 5
50107: LESS
50108: IFFALSE 50136
// begin hex := hexes [ i ] ;
50110: LD_ADDR_VAR 0 8
50114: PUSH
50115: LD_VAR 0 2
50119: PUSH
50120: LD_VAR 0 4
50124: ARRAY
50125: ST_TO_ADDR
// dist := tdist ;
50126: LD_ADDR_VAR 0 5
50130: PUSH
50131: LD_VAR 0 6
50135: ST_TO_ADDR
// end ; end ;
50136: GO 50050
50138: POP
50139: POP
// result := hex ;
50140: LD_ADDR_VAR 0 3
50144: PUSH
50145: LD_VAR 0 8
50149: ST_TO_ADDR
// end ;
50150: LD_VAR 0 3
50154: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50155: LD_INT 0
50157: PPUSH
50158: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50159: LD_VAR 0 1
50163: NOT
50164: PUSH
50165: LD_VAR 0 1
50169: PUSH
50170: LD_INT 21
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 23
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PPUSH
50194: CALL_OW 69
50198: IN
50199: NOT
50200: OR
50201: IFFALSE 50205
// exit ;
50203: GO 50252
// for i = 1 to 3 do
50205: LD_ADDR_VAR 0 3
50209: PUSH
50210: DOUBLE
50211: LD_INT 1
50213: DEC
50214: ST_TO_ADDR
50215: LD_INT 3
50217: PUSH
50218: FOR_TO
50219: IFFALSE 50250
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50221: LD_VAR 0 1
50225: PPUSH
50226: CALL_OW 250
50230: PPUSH
50231: LD_VAR 0 1
50235: PPUSH
50236: CALL_OW 251
50240: PPUSH
50241: LD_INT 1
50243: PPUSH
50244: CALL_OW 453
50248: GO 50218
50250: POP
50251: POP
// end ;
50252: LD_VAR 0 2
50256: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50257: LD_INT 0
50259: PPUSH
50260: PPUSH
50261: PPUSH
50262: PPUSH
50263: PPUSH
50264: PPUSH
// if not unit or not enemy_unit then
50265: LD_VAR 0 1
50269: NOT
50270: PUSH
50271: LD_VAR 0 2
50275: NOT
50276: OR
50277: IFFALSE 50281
// exit ;
50279: GO 50748
// if GetLives ( i ) < 250 then
50281: LD_VAR 0 4
50285: PPUSH
50286: CALL_OW 256
50290: PUSH
50291: LD_INT 250
50293: LESS
50294: IFFALSE 50307
// begin ComAutodestruct ( i ) ;
50296: LD_VAR 0 4
50300: PPUSH
50301: CALL 50155 0 1
// exit ;
50305: GO 50748
// end ; x := GetX ( enemy_unit ) ;
50307: LD_ADDR_VAR 0 7
50311: PUSH
50312: LD_VAR 0 2
50316: PPUSH
50317: CALL_OW 250
50321: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50322: LD_ADDR_VAR 0 8
50326: PUSH
50327: LD_VAR 0 2
50331: PPUSH
50332: CALL_OW 251
50336: ST_TO_ADDR
// if not x or not y then
50337: LD_VAR 0 7
50341: NOT
50342: PUSH
50343: LD_VAR 0 8
50347: NOT
50348: OR
50349: IFFALSE 50353
// exit ;
50351: GO 50748
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50353: LD_ADDR_VAR 0 6
50357: PUSH
50358: LD_VAR 0 7
50362: PPUSH
50363: LD_INT 0
50365: PPUSH
50366: LD_INT 4
50368: PPUSH
50369: CALL_OW 272
50373: PUSH
50374: LD_VAR 0 8
50378: PPUSH
50379: LD_INT 0
50381: PPUSH
50382: LD_INT 4
50384: PPUSH
50385: CALL_OW 273
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_VAR 0 7
50398: PPUSH
50399: LD_INT 1
50401: PPUSH
50402: LD_INT 4
50404: PPUSH
50405: CALL_OW 272
50409: PUSH
50410: LD_VAR 0 8
50414: PPUSH
50415: LD_INT 1
50417: PPUSH
50418: LD_INT 4
50420: PPUSH
50421: CALL_OW 273
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_VAR 0 7
50434: PPUSH
50435: LD_INT 2
50437: PPUSH
50438: LD_INT 4
50440: PPUSH
50441: CALL_OW 272
50445: PUSH
50446: LD_VAR 0 8
50450: PPUSH
50451: LD_INT 2
50453: PPUSH
50454: LD_INT 4
50456: PPUSH
50457: CALL_OW 273
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_VAR 0 7
50470: PPUSH
50471: LD_INT 3
50473: PPUSH
50474: LD_INT 4
50476: PPUSH
50477: CALL_OW 272
50481: PUSH
50482: LD_VAR 0 8
50486: PPUSH
50487: LD_INT 3
50489: PPUSH
50490: LD_INT 4
50492: PPUSH
50493: CALL_OW 273
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_VAR 0 7
50506: PPUSH
50507: LD_INT 4
50509: PPUSH
50510: LD_INT 4
50512: PPUSH
50513: CALL_OW 272
50517: PUSH
50518: LD_VAR 0 8
50522: PPUSH
50523: LD_INT 4
50525: PPUSH
50526: LD_INT 4
50528: PPUSH
50529: CALL_OW 273
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_VAR 0 7
50542: PPUSH
50543: LD_INT 5
50545: PPUSH
50546: LD_INT 4
50548: PPUSH
50549: CALL_OW 272
50553: PUSH
50554: LD_VAR 0 8
50558: PPUSH
50559: LD_INT 5
50561: PPUSH
50562: LD_INT 4
50564: PPUSH
50565: CALL_OW 273
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// for i = tmp downto 1 do
50582: LD_ADDR_VAR 0 4
50586: PUSH
50587: DOUBLE
50588: LD_VAR 0 6
50592: INC
50593: ST_TO_ADDR
50594: LD_INT 1
50596: PUSH
50597: FOR_DOWNTO
50598: IFFALSE 50699
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50600: LD_VAR 0 6
50604: PUSH
50605: LD_VAR 0 4
50609: ARRAY
50610: PUSH
50611: LD_INT 1
50613: ARRAY
50614: PPUSH
50615: LD_VAR 0 6
50619: PUSH
50620: LD_VAR 0 4
50624: ARRAY
50625: PUSH
50626: LD_INT 2
50628: ARRAY
50629: PPUSH
50630: CALL_OW 488
50634: NOT
50635: PUSH
50636: LD_VAR 0 6
50640: PUSH
50641: LD_VAR 0 4
50645: ARRAY
50646: PUSH
50647: LD_INT 1
50649: ARRAY
50650: PPUSH
50651: LD_VAR 0 6
50655: PUSH
50656: LD_VAR 0 4
50660: ARRAY
50661: PUSH
50662: LD_INT 2
50664: ARRAY
50665: PPUSH
50666: CALL_OW 428
50670: PUSH
50671: LD_INT 0
50673: NONEQUAL
50674: OR
50675: IFFALSE 50697
// tmp := Delete ( tmp , i ) ;
50677: LD_ADDR_VAR 0 6
50681: PUSH
50682: LD_VAR 0 6
50686: PPUSH
50687: LD_VAR 0 4
50691: PPUSH
50692: CALL_OW 3
50696: ST_TO_ADDR
50697: GO 50597
50699: POP
50700: POP
// j := GetClosestHex ( unit , tmp ) ;
50701: LD_ADDR_VAR 0 5
50705: PUSH
50706: LD_VAR 0 1
50710: PPUSH
50711: LD_VAR 0 6
50715: PPUSH
50716: CALL 50003 0 2
50720: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50721: LD_VAR 0 1
50725: PPUSH
50726: LD_VAR 0 5
50730: PUSH
50731: LD_INT 1
50733: ARRAY
50734: PPUSH
50735: LD_VAR 0 5
50739: PUSH
50740: LD_INT 2
50742: ARRAY
50743: PPUSH
50744: CALL_OW 111
// end ;
50748: LD_VAR 0 3
50752: RET
// export function PrepareApemanSoldier ( ) ; begin
50753: LD_INT 0
50755: PPUSH
// uc_nation := 0 ;
50756: LD_ADDR_OWVAR 21
50760: PUSH
50761: LD_INT 0
50763: ST_TO_ADDR
// hc_sex := sex_male ;
50764: LD_ADDR_OWVAR 27
50768: PUSH
50769: LD_INT 1
50771: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50772: LD_ADDR_OWVAR 28
50776: PUSH
50777: LD_INT 15
50779: ST_TO_ADDR
// hc_gallery :=  ;
50780: LD_ADDR_OWVAR 33
50784: PUSH
50785: LD_STRING 
50787: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50788: LD_ADDR_OWVAR 31
50792: PUSH
50793: LD_INT 0
50795: PPUSH
50796: LD_INT 3
50798: PPUSH
50799: CALL_OW 12
50803: PUSH
50804: LD_INT 0
50806: PPUSH
50807: LD_INT 3
50809: PPUSH
50810: CALL_OW 12
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// end ;
50827: LD_VAR 0 1
50831: RET
// export function PrepareApemanEngineer ( ) ; begin
50832: LD_INT 0
50834: PPUSH
// uc_nation := 0 ;
50835: LD_ADDR_OWVAR 21
50839: PUSH
50840: LD_INT 0
50842: ST_TO_ADDR
// hc_sex := sex_male ;
50843: LD_ADDR_OWVAR 27
50847: PUSH
50848: LD_INT 1
50850: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50851: LD_ADDR_OWVAR 28
50855: PUSH
50856: LD_INT 16
50858: ST_TO_ADDR
// hc_gallery :=  ;
50859: LD_ADDR_OWVAR 33
50863: PUSH
50864: LD_STRING 
50866: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50867: LD_ADDR_OWVAR 31
50871: PUSH
50872: LD_INT 0
50874: PPUSH
50875: LD_INT 3
50877: PPUSH
50878: CALL_OW 12
50882: PUSH
50883: LD_INT 0
50885: PPUSH
50886: LD_INT 3
50888: PPUSH
50889: CALL_OW 12
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: ST_TO_ADDR
// end ;
50906: LD_VAR 0 1
50910: RET
// export function PrepareApeman ( agressivity ) ; begin
50911: LD_INT 0
50913: PPUSH
// uc_side := 0 ;
50914: LD_ADDR_OWVAR 20
50918: PUSH
50919: LD_INT 0
50921: ST_TO_ADDR
// uc_nation := 0 ;
50922: LD_ADDR_OWVAR 21
50926: PUSH
50927: LD_INT 0
50929: ST_TO_ADDR
// hc_sex := sex_male ;
50930: LD_ADDR_OWVAR 27
50934: PUSH
50935: LD_INT 1
50937: ST_TO_ADDR
// hc_class := class_apeman ;
50938: LD_ADDR_OWVAR 28
50942: PUSH
50943: LD_INT 12
50945: ST_TO_ADDR
// hc_gallery :=  ;
50946: LD_ADDR_OWVAR 33
50950: PUSH
50951: LD_STRING 
50953: ST_TO_ADDR
// if agressivity = 0 then
50954: LD_VAR 0 1
50958: PUSH
50959: LD_INT 0
50961: EQUAL
50962: IFFALSE 50974
// hc_agressivity := 0 else
50964: LD_ADDR_OWVAR 35
50968: PUSH
50969: LD_INT 0
50971: ST_TO_ADDR
50972: GO 50995
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50974: LD_ADDR_OWVAR 35
50978: PUSH
50979: LD_VAR 0 1
50983: NEG
50984: PPUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: CALL_OW 12
50994: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50995: LD_ADDR_OWVAR 31
50999: PUSH
51000: LD_INT 0
51002: PPUSH
51003: LD_INT 3
51005: PPUSH
51006: CALL_OW 12
51010: PUSH
51011: LD_INT 0
51013: PPUSH
51014: LD_INT 3
51016: PPUSH
51017: CALL_OW 12
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 0
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: ST_TO_ADDR
// end ;
51034: LD_VAR 0 2
51038: RET
// export function PrepareTiger ( agressivity ) ; begin
51039: LD_INT 0
51041: PPUSH
// uc_side := 0 ;
51042: LD_ADDR_OWVAR 20
51046: PUSH
51047: LD_INT 0
51049: ST_TO_ADDR
// uc_nation := 0 ;
51050: LD_ADDR_OWVAR 21
51054: PUSH
51055: LD_INT 0
51057: ST_TO_ADDR
// hc_class := class_tiger ;
51058: LD_ADDR_OWVAR 28
51062: PUSH
51063: LD_INT 14
51065: ST_TO_ADDR
// hc_gallery :=  ;
51066: LD_ADDR_OWVAR 33
51070: PUSH
51071: LD_STRING 
51073: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51074: LD_ADDR_OWVAR 35
51078: PUSH
51079: LD_VAR 0 1
51083: NEG
51084: PPUSH
51085: LD_VAR 0 1
51089: PPUSH
51090: CALL_OW 12
51094: ST_TO_ADDR
// end ;
51095: LD_VAR 0 2
51099: RET
// export function PrepareEnchidna ( ) ; begin
51100: LD_INT 0
51102: PPUSH
// uc_side := 0 ;
51103: LD_ADDR_OWVAR 20
51107: PUSH
51108: LD_INT 0
51110: ST_TO_ADDR
// uc_nation := 0 ;
51111: LD_ADDR_OWVAR 21
51115: PUSH
51116: LD_INT 0
51118: ST_TO_ADDR
// hc_class := class_baggie ;
51119: LD_ADDR_OWVAR 28
51123: PUSH
51124: LD_INT 13
51126: ST_TO_ADDR
// hc_gallery :=  ;
51127: LD_ADDR_OWVAR 33
51131: PUSH
51132: LD_STRING 
51134: ST_TO_ADDR
// end ;
51135: LD_VAR 0 1
51139: RET
// export function PrepareFrog ( ) ; begin
51140: LD_INT 0
51142: PPUSH
// uc_side := 0 ;
51143: LD_ADDR_OWVAR 20
51147: PUSH
51148: LD_INT 0
51150: ST_TO_ADDR
// uc_nation := 0 ;
51151: LD_ADDR_OWVAR 21
51155: PUSH
51156: LD_INT 0
51158: ST_TO_ADDR
// hc_class := class_frog ;
51159: LD_ADDR_OWVAR 28
51163: PUSH
51164: LD_INT 19
51166: ST_TO_ADDR
// hc_gallery :=  ;
51167: LD_ADDR_OWVAR 33
51171: PUSH
51172: LD_STRING 
51174: ST_TO_ADDR
// end ;
51175: LD_VAR 0 1
51179: RET
// export function PrepareFish ( ) ; begin
51180: LD_INT 0
51182: PPUSH
// uc_side := 0 ;
51183: LD_ADDR_OWVAR 20
51187: PUSH
51188: LD_INT 0
51190: ST_TO_ADDR
// uc_nation := 0 ;
51191: LD_ADDR_OWVAR 21
51195: PUSH
51196: LD_INT 0
51198: ST_TO_ADDR
// hc_class := class_fish ;
51199: LD_ADDR_OWVAR 28
51203: PUSH
51204: LD_INT 20
51206: ST_TO_ADDR
// hc_gallery :=  ;
51207: LD_ADDR_OWVAR 33
51211: PUSH
51212: LD_STRING 
51214: ST_TO_ADDR
// end ;
51215: LD_VAR 0 1
51219: RET
// export function PrepareBird ( ) ; begin
51220: LD_INT 0
51222: PPUSH
// uc_side := 0 ;
51223: LD_ADDR_OWVAR 20
51227: PUSH
51228: LD_INT 0
51230: ST_TO_ADDR
// uc_nation := 0 ;
51231: LD_ADDR_OWVAR 21
51235: PUSH
51236: LD_INT 0
51238: ST_TO_ADDR
// hc_class := class_phororhacos ;
51239: LD_ADDR_OWVAR 28
51243: PUSH
51244: LD_INT 18
51246: ST_TO_ADDR
// hc_gallery :=  ;
51247: LD_ADDR_OWVAR 33
51251: PUSH
51252: LD_STRING 
51254: ST_TO_ADDR
// end ;
51255: LD_VAR 0 1
51259: RET
// export function PrepareHorse ( ) ; begin
51260: LD_INT 0
51262: PPUSH
// uc_side := 0 ;
51263: LD_ADDR_OWVAR 20
51267: PUSH
51268: LD_INT 0
51270: ST_TO_ADDR
// uc_nation := 0 ;
51271: LD_ADDR_OWVAR 21
51275: PUSH
51276: LD_INT 0
51278: ST_TO_ADDR
// hc_class := class_horse ;
51279: LD_ADDR_OWVAR 28
51283: PUSH
51284: LD_INT 21
51286: ST_TO_ADDR
// hc_gallery :=  ;
51287: LD_ADDR_OWVAR 33
51291: PUSH
51292: LD_STRING 
51294: ST_TO_ADDR
// end ;
51295: LD_VAR 0 1
51299: RET
// export function PrepareMastodont ( ) ; begin
51300: LD_INT 0
51302: PPUSH
// uc_side := 0 ;
51303: LD_ADDR_OWVAR 20
51307: PUSH
51308: LD_INT 0
51310: ST_TO_ADDR
// uc_nation := 0 ;
51311: LD_ADDR_OWVAR 21
51315: PUSH
51316: LD_INT 0
51318: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51319: LD_ADDR_OWVAR 37
51323: PUSH
51324: LD_INT 31
51326: ST_TO_ADDR
// vc_control := control_rider ;
51327: LD_ADDR_OWVAR 38
51331: PUSH
51332: LD_INT 4
51334: ST_TO_ADDR
// end ;
51335: LD_VAR 0 1
51339: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51340: LD_INT 0
51342: PPUSH
51343: PPUSH
51344: PPUSH
// uc_side = 0 ;
51345: LD_ADDR_OWVAR 20
51349: PUSH
51350: LD_INT 0
51352: ST_TO_ADDR
// uc_nation = 0 ;
51353: LD_ADDR_OWVAR 21
51357: PUSH
51358: LD_INT 0
51360: ST_TO_ADDR
// InitHc_All ( ) ;
51361: CALL_OW 584
// InitVc ;
51365: CALL_OW 20
// if mastodonts then
51369: LD_VAR 0 6
51373: IFFALSE 51440
// for i = 1 to mastodonts do
51375: LD_ADDR_VAR 0 11
51379: PUSH
51380: DOUBLE
51381: LD_INT 1
51383: DEC
51384: ST_TO_ADDR
51385: LD_VAR 0 6
51389: PUSH
51390: FOR_TO
51391: IFFALSE 51438
// begin vc_chassis := 31 ;
51393: LD_ADDR_OWVAR 37
51397: PUSH
51398: LD_INT 31
51400: ST_TO_ADDR
// vc_control := control_rider ;
51401: LD_ADDR_OWVAR 38
51405: PUSH
51406: LD_INT 4
51408: ST_TO_ADDR
// animal := CreateVehicle ;
51409: LD_ADDR_VAR 0 12
51413: PUSH
51414: CALL_OW 45
51418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51419: LD_VAR 0 12
51423: PPUSH
51424: LD_VAR 0 8
51428: PPUSH
51429: LD_INT 0
51431: PPUSH
51432: CALL 53568 0 3
// end ;
51436: GO 51390
51438: POP
51439: POP
// if horses then
51440: LD_VAR 0 5
51444: IFFALSE 51511
// for i = 1 to horses do
51446: LD_ADDR_VAR 0 11
51450: PUSH
51451: DOUBLE
51452: LD_INT 1
51454: DEC
51455: ST_TO_ADDR
51456: LD_VAR 0 5
51460: PUSH
51461: FOR_TO
51462: IFFALSE 51509
// begin hc_class := 21 ;
51464: LD_ADDR_OWVAR 28
51468: PUSH
51469: LD_INT 21
51471: ST_TO_ADDR
// hc_gallery :=  ;
51472: LD_ADDR_OWVAR 33
51476: PUSH
51477: LD_STRING 
51479: ST_TO_ADDR
// animal := CreateHuman ;
51480: LD_ADDR_VAR 0 12
51484: PUSH
51485: CALL_OW 44
51489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51490: LD_VAR 0 12
51494: PPUSH
51495: LD_VAR 0 8
51499: PPUSH
51500: LD_INT 0
51502: PPUSH
51503: CALL 53568 0 3
// end ;
51507: GO 51461
51509: POP
51510: POP
// if birds then
51511: LD_VAR 0 1
51515: IFFALSE 51582
// for i = 1 to birds do
51517: LD_ADDR_VAR 0 11
51521: PUSH
51522: DOUBLE
51523: LD_INT 1
51525: DEC
51526: ST_TO_ADDR
51527: LD_VAR 0 1
51531: PUSH
51532: FOR_TO
51533: IFFALSE 51580
// begin hc_class := 18 ;
51535: LD_ADDR_OWVAR 28
51539: PUSH
51540: LD_INT 18
51542: ST_TO_ADDR
// hc_gallery =  ;
51543: LD_ADDR_OWVAR 33
51547: PUSH
51548: LD_STRING 
51550: ST_TO_ADDR
// animal := CreateHuman ;
51551: LD_ADDR_VAR 0 12
51555: PUSH
51556: CALL_OW 44
51560: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51561: LD_VAR 0 12
51565: PPUSH
51566: LD_VAR 0 8
51570: PPUSH
51571: LD_INT 0
51573: PPUSH
51574: CALL 53568 0 3
// end ;
51578: GO 51532
51580: POP
51581: POP
// if tigers then
51582: LD_VAR 0 2
51586: IFFALSE 51670
// for i = 1 to tigers do
51588: LD_ADDR_VAR 0 11
51592: PUSH
51593: DOUBLE
51594: LD_INT 1
51596: DEC
51597: ST_TO_ADDR
51598: LD_VAR 0 2
51602: PUSH
51603: FOR_TO
51604: IFFALSE 51668
// begin hc_class = class_tiger ;
51606: LD_ADDR_OWVAR 28
51610: PUSH
51611: LD_INT 14
51613: ST_TO_ADDR
// hc_gallery =  ;
51614: LD_ADDR_OWVAR 33
51618: PUSH
51619: LD_STRING 
51621: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51622: LD_ADDR_OWVAR 35
51626: PUSH
51627: LD_INT 7
51629: NEG
51630: PPUSH
51631: LD_INT 7
51633: PPUSH
51634: CALL_OW 12
51638: ST_TO_ADDR
// animal := CreateHuman ;
51639: LD_ADDR_VAR 0 12
51643: PUSH
51644: CALL_OW 44
51648: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51649: LD_VAR 0 12
51653: PPUSH
51654: LD_VAR 0 8
51658: PPUSH
51659: LD_INT 0
51661: PPUSH
51662: CALL 53568 0 3
// end ;
51666: GO 51603
51668: POP
51669: POP
// if apemans then
51670: LD_VAR 0 3
51674: IFFALSE 51797
// for i = 1 to apemans do
51676: LD_ADDR_VAR 0 11
51680: PUSH
51681: DOUBLE
51682: LD_INT 1
51684: DEC
51685: ST_TO_ADDR
51686: LD_VAR 0 3
51690: PUSH
51691: FOR_TO
51692: IFFALSE 51795
// begin hc_class = class_apeman ;
51694: LD_ADDR_OWVAR 28
51698: PUSH
51699: LD_INT 12
51701: ST_TO_ADDR
// hc_gallery =  ;
51702: LD_ADDR_OWVAR 33
51706: PUSH
51707: LD_STRING 
51709: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51710: LD_ADDR_OWVAR 35
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PPUSH
51719: LD_INT 2
51721: PPUSH
51722: CALL_OW 12
51726: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51727: LD_ADDR_OWVAR 31
51731: PUSH
51732: LD_INT 1
51734: PPUSH
51735: LD_INT 3
51737: PPUSH
51738: CALL_OW 12
51742: PUSH
51743: LD_INT 1
51745: PPUSH
51746: LD_INT 3
51748: PPUSH
51749: CALL_OW 12
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: ST_TO_ADDR
// animal := CreateHuman ;
51766: LD_ADDR_VAR 0 12
51770: PUSH
51771: CALL_OW 44
51775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51776: LD_VAR 0 12
51780: PPUSH
51781: LD_VAR 0 8
51785: PPUSH
51786: LD_INT 0
51788: PPUSH
51789: CALL 53568 0 3
// end ;
51793: GO 51691
51795: POP
51796: POP
// if enchidnas then
51797: LD_VAR 0 4
51801: IFFALSE 51868
// for i = 1 to enchidnas do
51803: LD_ADDR_VAR 0 11
51807: PUSH
51808: DOUBLE
51809: LD_INT 1
51811: DEC
51812: ST_TO_ADDR
51813: LD_VAR 0 4
51817: PUSH
51818: FOR_TO
51819: IFFALSE 51866
// begin hc_class = 13 ;
51821: LD_ADDR_OWVAR 28
51825: PUSH
51826: LD_INT 13
51828: ST_TO_ADDR
// hc_gallery =  ;
51829: LD_ADDR_OWVAR 33
51833: PUSH
51834: LD_STRING 
51836: ST_TO_ADDR
// animal := CreateHuman ;
51837: LD_ADDR_VAR 0 12
51841: PUSH
51842: CALL_OW 44
51846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51847: LD_VAR 0 12
51851: PPUSH
51852: LD_VAR 0 8
51856: PPUSH
51857: LD_INT 0
51859: PPUSH
51860: CALL 53568 0 3
// end ;
51864: GO 51818
51866: POP
51867: POP
// if fishes then
51868: LD_VAR 0 7
51872: IFFALSE 51939
// for i = 1 to fishes do
51874: LD_ADDR_VAR 0 11
51878: PUSH
51879: DOUBLE
51880: LD_INT 1
51882: DEC
51883: ST_TO_ADDR
51884: LD_VAR 0 7
51888: PUSH
51889: FOR_TO
51890: IFFALSE 51937
// begin hc_class = 20 ;
51892: LD_ADDR_OWVAR 28
51896: PUSH
51897: LD_INT 20
51899: ST_TO_ADDR
// hc_gallery =  ;
51900: LD_ADDR_OWVAR 33
51904: PUSH
51905: LD_STRING 
51907: ST_TO_ADDR
// animal := CreateHuman ;
51908: LD_ADDR_VAR 0 12
51912: PUSH
51913: CALL_OW 44
51917: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51918: LD_VAR 0 12
51922: PPUSH
51923: LD_VAR 0 9
51927: PPUSH
51928: LD_INT 0
51930: PPUSH
51931: CALL 53568 0 3
// end ;
51935: GO 51889
51937: POP
51938: POP
// end ;
51939: LD_VAR 0 10
51943: RET
// export function WantHeal ( sci , unit ) ; begin
51944: LD_INT 0
51946: PPUSH
// if GetTaskList ( sci ) > 0 then
51947: LD_VAR 0 1
51951: PPUSH
51952: CALL_OW 437
51956: PUSH
51957: LD_INT 0
51959: GREATER
51960: IFFALSE 52030
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51962: LD_VAR 0 1
51966: PPUSH
51967: CALL_OW 437
51971: PUSH
51972: LD_INT 1
51974: ARRAY
51975: PUSH
51976: LD_INT 1
51978: ARRAY
51979: PUSH
51980: LD_STRING l
51982: EQUAL
51983: PUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 437
51993: PUSH
51994: LD_INT 1
51996: ARRAY
51997: PUSH
51998: LD_INT 4
52000: ARRAY
52001: PUSH
52002: LD_VAR 0 2
52006: EQUAL
52007: AND
52008: IFFALSE 52020
// result := true else
52010: LD_ADDR_VAR 0 3
52014: PUSH
52015: LD_INT 1
52017: ST_TO_ADDR
52018: GO 52028
// result := false ;
52020: LD_ADDR_VAR 0 3
52024: PUSH
52025: LD_INT 0
52027: ST_TO_ADDR
// end else
52028: GO 52038
// result := false ;
52030: LD_ADDR_VAR 0 3
52034: PUSH
52035: LD_INT 0
52037: ST_TO_ADDR
// end ;
52038: LD_VAR 0 3
52042: RET
// export function HealTarget ( sci ) ; begin
52043: LD_INT 0
52045: PPUSH
// if not sci then
52046: LD_VAR 0 1
52050: NOT
52051: IFFALSE 52055
// exit ;
52053: GO 52120
// result := 0 ;
52055: LD_ADDR_VAR 0 2
52059: PUSH
52060: LD_INT 0
52062: ST_TO_ADDR
// if GetTaskList ( sci ) then
52063: LD_VAR 0 1
52067: PPUSH
52068: CALL_OW 437
52072: IFFALSE 52120
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52074: LD_VAR 0 1
52078: PPUSH
52079: CALL_OW 437
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PUSH
52092: LD_STRING l
52094: EQUAL
52095: IFFALSE 52120
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52097: LD_ADDR_VAR 0 2
52101: PUSH
52102: LD_VAR 0 1
52106: PPUSH
52107: CALL_OW 437
52111: PUSH
52112: LD_INT 1
52114: ARRAY
52115: PUSH
52116: LD_INT 4
52118: ARRAY
52119: ST_TO_ADDR
// end ;
52120: LD_VAR 0 2
52124: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52125: LD_INT 0
52127: PPUSH
52128: PPUSH
52129: PPUSH
52130: PPUSH
// if not base_units then
52131: LD_VAR 0 1
52135: NOT
52136: IFFALSE 52140
// exit ;
52138: GO 52227
// result := false ;
52140: LD_ADDR_VAR 0 2
52144: PUSH
52145: LD_INT 0
52147: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52148: LD_ADDR_VAR 0 5
52152: PUSH
52153: LD_VAR 0 1
52157: PPUSH
52158: LD_INT 21
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PPUSH
52168: CALL_OW 72
52172: ST_TO_ADDR
// if not tmp then
52173: LD_VAR 0 5
52177: NOT
52178: IFFALSE 52182
// exit ;
52180: GO 52227
// for i in tmp do
52182: LD_ADDR_VAR 0 3
52186: PUSH
52187: LD_VAR 0 5
52191: PUSH
52192: FOR_IN
52193: IFFALSE 52225
// begin result := EnemyInRange ( i , 22 ) ;
52195: LD_ADDR_VAR 0 2
52199: PUSH
52200: LD_VAR 0 3
52204: PPUSH
52205: LD_INT 22
52207: PPUSH
52208: CALL 49805 0 2
52212: ST_TO_ADDR
// if result then
52213: LD_VAR 0 2
52217: IFFALSE 52223
// exit ;
52219: POP
52220: POP
52221: GO 52227
// end ;
52223: GO 52192
52225: POP
52226: POP
// end ;
52227: LD_VAR 0 2
52231: RET
// export function FilterByTag ( units , tag ) ; begin
52232: LD_INT 0
52234: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52235: LD_ADDR_VAR 0 3
52239: PUSH
52240: LD_VAR 0 1
52244: PPUSH
52245: LD_INT 120
52247: PUSH
52248: LD_VAR 0 2
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PPUSH
52257: CALL_OW 72
52261: ST_TO_ADDR
// end ;
52262: LD_VAR 0 3
52266: RET
// export function IsDriver ( un ) ; begin
52267: LD_INT 0
52269: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52270: LD_ADDR_VAR 0 2
52274: PUSH
52275: LD_VAR 0 1
52279: PUSH
52280: LD_INT 55
52282: PUSH
52283: EMPTY
52284: LIST
52285: PPUSH
52286: CALL_OW 69
52290: IN
52291: ST_TO_ADDR
// end ;
52292: LD_VAR 0 2
52296: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52297: LD_INT 0
52299: PPUSH
52300: PPUSH
// list := [ ] ;
52301: LD_ADDR_VAR 0 5
52305: PUSH
52306: EMPTY
52307: ST_TO_ADDR
// case d of 0 :
52308: LD_VAR 0 3
52312: PUSH
52313: LD_INT 0
52315: DOUBLE
52316: EQUAL
52317: IFTRUE 52321
52319: GO 52454
52321: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52322: LD_ADDR_VAR 0 5
52326: PUSH
52327: LD_VAR 0 1
52331: PUSH
52332: LD_INT 4
52334: MINUS
52335: PUSH
52336: LD_VAR 0 2
52340: PUSH
52341: LD_INT 4
52343: MINUS
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: LD_VAR 0 1
52357: PUSH
52358: LD_INT 3
52360: MINUS
52361: PUSH
52362: LD_VAR 0 2
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: LD_VAR 0 1
52379: PUSH
52380: LD_INT 4
52382: PLUS
52383: PUSH
52384: LD_VAR 0 2
52388: PUSH
52389: LD_INT 4
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: LD_VAR 0 1
52401: PUSH
52402: LD_INT 3
52404: PLUS
52405: PUSH
52406: LD_VAR 0 2
52410: PUSH
52411: LD_INT 3
52413: PLUS
52414: PUSH
52415: LD_INT 5
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: PUSH
52423: LD_VAR 0 1
52427: PUSH
52428: LD_VAR 0 2
52432: PUSH
52433: LD_INT 4
52435: PLUS
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// end ; 1 :
52452: GO 53152
52454: LD_INT 1
52456: DOUBLE
52457: EQUAL
52458: IFTRUE 52462
52460: GO 52595
52462: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52463: LD_ADDR_VAR 0 5
52467: PUSH
52468: LD_VAR 0 1
52472: PUSH
52473: LD_VAR 0 2
52477: PUSH
52478: LD_INT 4
52480: MINUS
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: LD_VAR 0 1
52494: PUSH
52495: LD_INT 3
52497: MINUS
52498: PUSH
52499: LD_VAR 0 2
52503: PUSH
52504: LD_INT 3
52506: MINUS
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: PUSH
52516: LD_VAR 0 1
52520: PUSH
52521: LD_INT 4
52523: MINUS
52524: PUSH
52525: LD_VAR 0 2
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: LD_VAR 0 1
52542: PUSH
52543: LD_VAR 0 2
52547: PUSH
52548: LD_INT 3
52550: PLUS
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: PUSH
52560: LD_VAR 0 1
52564: PUSH
52565: LD_INT 4
52567: PLUS
52568: PUSH
52569: LD_VAR 0 2
52573: PUSH
52574: LD_INT 4
52576: PLUS
52577: PUSH
52578: LD_INT 5
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: ST_TO_ADDR
// end ; 2 :
52593: GO 53152
52595: LD_INT 2
52597: DOUBLE
52598: EQUAL
52599: IFTRUE 52603
52601: GO 52732
52603: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52604: LD_ADDR_VAR 0 5
52608: PUSH
52609: LD_VAR 0 1
52613: PUSH
52614: LD_VAR 0 2
52618: PUSH
52619: LD_INT 3
52621: MINUS
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_INT 4
52638: PLUS
52639: PUSH
52640: LD_VAR 0 2
52644: PUSH
52645: LD_INT 4
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: PUSH
52653: LD_VAR 0 1
52657: PUSH
52658: LD_VAR 0 2
52662: PUSH
52663: LD_INT 4
52665: PLUS
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: PUSH
52675: LD_VAR 0 1
52679: PUSH
52680: LD_INT 3
52682: MINUS
52683: PUSH
52684: LD_VAR 0 2
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: LIST
52696: PUSH
52697: LD_VAR 0 1
52701: PUSH
52702: LD_INT 4
52704: MINUS
52705: PUSH
52706: LD_VAR 0 2
52710: PUSH
52711: LD_INT 4
52713: MINUS
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// end ; 3 :
52730: GO 53152
52732: LD_INT 3
52734: DOUBLE
52735: EQUAL
52736: IFTRUE 52740
52738: GO 52873
52740: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52741: LD_ADDR_VAR 0 5
52745: PUSH
52746: LD_VAR 0 1
52750: PUSH
52751: LD_INT 3
52753: PLUS
52754: PUSH
52755: LD_VAR 0 2
52759: PUSH
52760: LD_INT 4
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: PUSH
52768: LD_VAR 0 1
52772: PUSH
52773: LD_INT 4
52775: PLUS
52776: PUSH
52777: LD_VAR 0 2
52781: PUSH
52782: LD_INT 4
52784: PLUS
52785: PUSH
52786: LD_INT 5
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: PUSH
52794: LD_VAR 0 1
52798: PUSH
52799: LD_INT 4
52801: MINUS
52802: PUSH
52803: LD_VAR 0 2
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: PUSH
52816: LD_VAR 0 1
52820: PUSH
52821: LD_VAR 0 2
52825: PUSH
52826: LD_INT 4
52828: MINUS
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: LIST
52837: PUSH
52838: LD_VAR 0 1
52842: PUSH
52843: LD_INT 3
52845: MINUS
52846: PUSH
52847: LD_VAR 0 2
52851: PUSH
52852: LD_INT 3
52854: MINUS
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// end ; 4 :
52871: GO 53152
52873: LD_INT 4
52875: DOUBLE
52876: EQUAL
52877: IFTRUE 52881
52879: GO 53014
52881: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52882: LD_ADDR_VAR 0 5
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: LD_VAR 0 2
52896: PUSH
52897: LD_INT 4
52899: PLUS
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: PUSH
52909: LD_VAR 0 1
52913: PUSH
52914: LD_INT 3
52916: PLUS
52917: PUSH
52918: LD_VAR 0 2
52922: PUSH
52923: LD_INT 3
52925: PLUS
52926: PUSH
52927: LD_INT 5
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: PUSH
52935: LD_VAR 0 1
52939: PUSH
52940: LD_INT 4
52942: PLUS
52943: PUSH
52944: LD_VAR 0 2
52948: PUSH
52949: LD_INT 4
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: PUSH
52957: LD_VAR 0 1
52961: PUSH
52962: LD_VAR 0 2
52966: PUSH
52967: LD_INT 3
52969: MINUS
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: LIST
52978: PUSH
52979: LD_VAR 0 1
52983: PUSH
52984: LD_INT 4
52986: MINUS
52987: PUSH
52988: LD_VAR 0 2
52992: PUSH
52993: LD_INT 4
52995: MINUS
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// end ; 5 :
53012: GO 53152
53014: LD_INT 5
53016: DOUBLE
53017: EQUAL
53018: IFTRUE 53022
53020: GO 53151
53022: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53023: LD_ADDR_VAR 0 5
53027: PUSH
53028: LD_VAR 0 1
53032: PUSH
53033: LD_INT 4
53035: MINUS
53036: PUSH
53037: LD_VAR 0 2
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: LD_VAR 0 1
53054: PUSH
53055: LD_VAR 0 2
53059: PUSH
53060: LD_INT 4
53062: MINUS
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_INT 4
53079: PLUS
53080: PUSH
53081: LD_VAR 0 2
53085: PUSH
53086: LD_INT 4
53088: PLUS
53089: PUSH
53090: LD_INT 5
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: PUSH
53098: LD_VAR 0 1
53102: PUSH
53103: LD_INT 3
53105: PLUS
53106: PUSH
53107: LD_VAR 0 2
53111: PUSH
53112: LD_INT 4
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: PUSH
53120: LD_VAR 0 1
53124: PUSH
53125: LD_VAR 0 2
53129: PUSH
53130: LD_INT 3
53132: PLUS
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: ST_TO_ADDR
// end ; end ;
53149: GO 53152
53151: POP
// result := list ;
53152: LD_ADDR_VAR 0 4
53156: PUSH
53157: LD_VAR 0 5
53161: ST_TO_ADDR
// end ;
53162: LD_VAR 0 4
53166: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53167: LD_INT 0
53169: PPUSH
53170: PPUSH
53171: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53172: LD_VAR 0 1
53176: NOT
53177: PUSH
53178: LD_VAR 0 2
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 4
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: IN
53201: NOT
53202: OR
53203: IFFALSE 53207
// exit ;
53205: GO 53290
// tmp := [ ] ;
53207: LD_ADDR_VAR 0 5
53211: PUSH
53212: EMPTY
53213: ST_TO_ADDR
// for i in units do
53214: LD_ADDR_VAR 0 4
53218: PUSH
53219: LD_VAR 0 1
53223: PUSH
53224: FOR_IN
53225: IFFALSE 53259
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53227: LD_ADDR_VAR 0 5
53231: PUSH
53232: LD_VAR 0 5
53236: PPUSH
53237: LD_VAR 0 4
53241: PPUSH
53242: LD_VAR 0 2
53246: PPUSH
53247: CALL_OW 259
53251: PPUSH
53252: CALL 54663 0 2
53256: ST_TO_ADDR
53257: GO 53224
53259: POP
53260: POP
// if not tmp then
53261: LD_VAR 0 5
53265: NOT
53266: IFFALSE 53270
// exit ;
53268: GO 53290
// result := SortListByListDesc ( units , tmp ) ;
53270: LD_ADDR_VAR 0 3
53274: PUSH
53275: LD_VAR 0 1
53279: PPUSH
53280: LD_VAR 0 5
53284: PPUSH
53285: CALL_OW 77
53289: ST_TO_ADDR
// end ;
53290: LD_VAR 0 3
53294: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53295: LD_INT 0
53297: PPUSH
53298: PPUSH
53299: PPUSH
// result := false ;
53300: LD_ADDR_VAR 0 3
53304: PUSH
53305: LD_INT 0
53307: ST_TO_ADDR
// if not building then
53308: LD_VAR 0 2
53312: NOT
53313: IFFALSE 53317
// exit ;
53315: GO 53455
// x := GetX ( building ) ;
53317: LD_ADDR_VAR 0 4
53321: PUSH
53322: LD_VAR 0 2
53326: PPUSH
53327: CALL_OW 250
53331: ST_TO_ADDR
// y := GetY ( building ) ;
53332: LD_ADDR_VAR 0 5
53336: PUSH
53337: LD_VAR 0 2
53341: PPUSH
53342: CALL_OW 251
53346: ST_TO_ADDR
// if not x or not y then
53347: LD_VAR 0 4
53351: NOT
53352: PUSH
53353: LD_VAR 0 5
53357: NOT
53358: OR
53359: IFFALSE 53363
// exit ;
53361: GO 53455
// if GetTaskList ( unit ) then
53363: LD_VAR 0 1
53367: PPUSH
53368: CALL_OW 437
53372: IFFALSE 53455
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53374: LD_STRING e
53376: PUSH
53377: LD_VAR 0 1
53381: PPUSH
53382: CALL_OW 437
53386: PUSH
53387: LD_INT 1
53389: ARRAY
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: EQUAL
53395: PUSH
53396: LD_VAR 0 4
53400: PUSH
53401: LD_VAR 0 1
53405: PPUSH
53406: CALL_OW 437
53410: PUSH
53411: LD_INT 1
53413: ARRAY
53414: PUSH
53415: LD_INT 2
53417: ARRAY
53418: EQUAL
53419: AND
53420: PUSH
53421: LD_VAR 0 5
53425: PUSH
53426: LD_VAR 0 1
53430: PPUSH
53431: CALL_OW 437
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PUSH
53440: LD_INT 3
53442: ARRAY
53443: EQUAL
53444: AND
53445: IFFALSE 53455
// result := true end ;
53447: LD_ADDR_VAR 0 3
53451: PUSH
53452: LD_INT 1
53454: ST_TO_ADDR
// end ;
53455: LD_VAR 0 3
53459: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53460: LD_INT 0
53462: PPUSH
// result := false ;
53463: LD_ADDR_VAR 0 4
53467: PUSH
53468: LD_INT 0
53470: ST_TO_ADDR
// if GetTaskList ( unit ) then
53471: LD_VAR 0 1
53475: PPUSH
53476: CALL_OW 437
53480: IFFALSE 53563
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53482: LD_STRING M
53484: PUSH
53485: LD_VAR 0 1
53489: PPUSH
53490: CALL_OW 437
53494: PUSH
53495: LD_INT 1
53497: ARRAY
53498: PUSH
53499: LD_INT 1
53501: ARRAY
53502: EQUAL
53503: PUSH
53504: LD_VAR 0 2
53508: PUSH
53509: LD_VAR 0 1
53513: PPUSH
53514: CALL_OW 437
53518: PUSH
53519: LD_INT 1
53521: ARRAY
53522: PUSH
53523: LD_INT 2
53525: ARRAY
53526: EQUAL
53527: AND
53528: PUSH
53529: LD_VAR 0 3
53533: PUSH
53534: LD_VAR 0 1
53538: PPUSH
53539: CALL_OW 437
53543: PUSH
53544: LD_INT 1
53546: ARRAY
53547: PUSH
53548: LD_INT 3
53550: ARRAY
53551: EQUAL
53552: AND
53553: IFFALSE 53563
// result := true ;
53555: LD_ADDR_VAR 0 4
53559: PUSH
53560: LD_INT 1
53562: ST_TO_ADDR
// end ; end ;
53563: LD_VAR 0 4
53567: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53568: LD_INT 0
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
// if not unit or not area then
53574: LD_VAR 0 1
53578: NOT
53579: PUSH
53580: LD_VAR 0 2
53584: NOT
53585: OR
53586: IFFALSE 53590
// exit ;
53588: GO 53766
// tmp := AreaToList ( area , i ) ;
53590: LD_ADDR_VAR 0 6
53594: PUSH
53595: LD_VAR 0 2
53599: PPUSH
53600: LD_VAR 0 5
53604: PPUSH
53605: CALL_OW 517
53609: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53610: LD_ADDR_VAR 0 5
53614: PUSH
53615: DOUBLE
53616: LD_INT 1
53618: DEC
53619: ST_TO_ADDR
53620: LD_VAR 0 6
53624: PUSH
53625: LD_INT 1
53627: ARRAY
53628: PUSH
53629: FOR_TO
53630: IFFALSE 53764
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53632: LD_ADDR_VAR 0 7
53636: PUSH
53637: LD_VAR 0 6
53641: PUSH
53642: LD_INT 1
53644: ARRAY
53645: PUSH
53646: LD_VAR 0 5
53650: ARRAY
53651: PUSH
53652: LD_VAR 0 6
53656: PUSH
53657: LD_INT 2
53659: ARRAY
53660: PUSH
53661: LD_VAR 0 5
53665: ARRAY
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53671: LD_INT 92
53673: PUSH
53674: LD_VAR 0 7
53678: PUSH
53679: LD_INT 1
53681: ARRAY
53682: PUSH
53683: LD_VAR 0 7
53687: PUSH
53688: LD_INT 2
53690: ARRAY
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: PPUSH
53701: CALL_OW 69
53705: PUSH
53706: LD_INT 0
53708: EQUAL
53709: IFFALSE 53762
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53711: LD_VAR 0 1
53715: PPUSH
53716: LD_VAR 0 7
53720: PUSH
53721: LD_INT 1
53723: ARRAY
53724: PPUSH
53725: LD_VAR 0 7
53729: PUSH
53730: LD_INT 2
53732: ARRAY
53733: PPUSH
53734: LD_VAR 0 3
53738: PPUSH
53739: CALL_OW 48
// result := IsPlaced ( unit ) ;
53743: LD_ADDR_VAR 0 4
53747: PUSH
53748: LD_VAR 0 1
53752: PPUSH
53753: CALL_OW 305
53757: ST_TO_ADDR
// exit ;
53758: POP
53759: POP
53760: GO 53766
// end ; end ;
53762: GO 53629
53764: POP
53765: POP
// end ;
53766: LD_VAR 0 4
53770: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53771: LD_INT 0
53773: PPUSH
53774: PPUSH
53775: PPUSH
// if not side or side > 8 then
53776: LD_VAR 0 1
53780: NOT
53781: PUSH
53782: LD_VAR 0 1
53786: PUSH
53787: LD_INT 8
53789: GREATER
53790: OR
53791: IFFALSE 53795
// exit ;
53793: GO 53982
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53795: LD_ADDR_VAR 0 4
53799: PUSH
53800: LD_INT 22
53802: PUSH
53803: LD_VAR 0 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 21
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PPUSH
53826: CALL_OW 69
53830: ST_TO_ADDR
// if not tmp then
53831: LD_VAR 0 4
53835: NOT
53836: IFFALSE 53840
// exit ;
53838: GO 53982
// enable_addtolog := true ;
53840: LD_ADDR_OWVAR 81
53844: PUSH
53845: LD_INT 1
53847: ST_TO_ADDR
// AddToLog ( [ ) ;
53848: LD_STRING [
53850: PPUSH
53851: CALL_OW 561
// for i in tmp do
53855: LD_ADDR_VAR 0 3
53859: PUSH
53860: LD_VAR 0 4
53864: PUSH
53865: FOR_IN
53866: IFFALSE 53973
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53868: LD_STRING [
53870: PUSH
53871: LD_VAR 0 3
53875: PPUSH
53876: CALL_OW 266
53880: STR
53881: PUSH
53882: LD_STRING , 
53884: STR
53885: PUSH
53886: LD_VAR 0 3
53890: PPUSH
53891: CALL_OW 250
53895: STR
53896: PUSH
53897: LD_STRING , 
53899: STR
53900: PUSH
53901: LD_VAR 0 3
53905: PPUSH
53906: CALL_OW 251
53910: STR
53911: PUSH
53912: LD_STRING , 
53914: STR
53915: PUSH
53916: LD_VAR 0 3
53920: PPUSH
53921: CALL_OW 254
53925: STR
53926: PUSH
53927: LD_STRING , 
53929: STR
53930: PUSH
53931: LD_VAR 0 3
53935: PPUSH
53936: LD_INT 1
53938: PPUSH
53939: CALL_OW 268
53943: STR
53944: PUSH
53945: LD_STRING , 
53947: STR
53948: PUSH
53949: LD_VAR 0 3
53953: PPUSH
53954: LD_INT 2
53956: PPUSH
53957: CALL_OW 268
53961: STR
53962: PUSH
53963: LD_STRING ],
53965: STR
53966: PPUSH
53967: CALL_OW 561
// end ;
53971: GO 53865
53973: POP
53974: POP
// AddToLog ( ]; ) ;
53975: LD_STRING ];
53977: PPUSH
53978: CALL_OW 561
// end ;
53982: LD_VAR 0 2
53986: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53987: LD_INT 0
53989: PPUSH
53990: PPUSH
53991: PPUSH
53992: PPUSH
53993: PPUSH
// if not area or not rate or not max then
53994: LD_VAR 0 1
53998: NOT
53999: PUSH
54000: LD_VAR 0 2
54004: NOT
54005: OR
54006: PUSH
54007: LD_VAR 0 4
54011: NOT
54012: OR
54013: IFFALSE 54017
// exit ;
54015: GO 54206
// while 1 do
54017: LD_INT 1
54019: IFFALSE 54206
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54021: LD_ADDR_VAR 0 9
54025: PUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: LD_INT 1
54033: PPUSH
54034: CALL_OW 287
54038: PUSH
54039: LD_INT 10
54041: MUL
54042: ST_TO_ADDR
// r := rate / 10 ;
54043: LD_ADDR_VAR 0 7
54047: PUSH
54048: LD_VAR 0 2
54052: PUSH
54053: LD_INT 10
54055: DIVREAL
54056: ST_TO_ADDR
// time := 1 1$00 ;
54057: LD_ADDR_VAR 0 8
54061: PUSH
54062: LD_INT 2100
54064: ST_TO_ADDR
// if amount < min then
54065: LD_VAR 0 9
54069: PUSH
54070: LD_VAR 0 3
54074: LESS
54075: IFFALSE 54093
// r := r * 2 else
54077: LD_ADDR_VAR 0 7
54081: PUSH
54082: LD_VAR 0 7
54086: PUSH
54087: LD_INT 2
54089: MUL
54090: ST_TO_ADDR
54091: GO 54119
// if amount > max then
54093: LD_VAR 0 9
54097: PUSH
54098: LD_VAR 0 4
54102: GREATER
54103: IFFALSE 54119
// r := r / 2 ;
54105: LD_ADDR_VAR 0 7
54109: PUSH
54110: LD_VAR 0 7
54114: PUSH
54115: LD_INT 2
54117: DIVREAL
54118: ST_TO_ADDR
// time := time / r ;
54119: LD_ADDR_VAR 0 8
54123: PUSH
54124: LD_VAR 0 8
54128: PUSH
54129: LD_VAR 0 7
54133: DIVREAL
54134: ST_TO_ADDR
// if time < 0 then
54135: LD_VAR 0 8
54139: PUSH
54140: LD_INT 0
54142: LESS
54143: IFFALSE 54160
// time := time * - 1 ;
54145: LD_ADDR_VAR 0 8
54149: PUSH
54150: LD_VAR 0 8
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: MUL
54159: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54160: LD_VAR 0 8
54164: PUSH
54165: LD_INT 35
54167: PPUSH
54168: LD_INT 875
54170: PPUSH
54171: CALL_OW 12
54175: PLUS
54176: PPUSH
54177: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54181: LD_INT 1
54183: PPUSH
54184: LD_INT 5
54186: PPUSH
54187: CALL_OW 12
54191: PPUSH
54192: LD_VAR 0 1
54196: PPUSH
54197: LD_INT 1
54199: PPUSH
54200: CALL_OW 55
// end ;
54204: GO 54017
// end ;
54206: LD_VAR 0 5
54210: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54211: LD_INT 0
54213: PPUSH
54214: PPUSH
54215: PPUSH
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
// if not turrets or not factories then
54221: LD_VAR 0 1
54225: NOT
54226: PUSH
54227: LD_VAR 0 2
54231: NOT
54232: OR
54233: IFFALSE 54237
// exit ;
54235: GO 54544
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54237: LD_ADDR_VAR 0 10
54241: PUSH
54242: LD_INT 5
54244: PUSH
54245: LD_INT 6
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 4
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: LD_INT 5
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 24
54279: PUSH
54280: LD_INT 25
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 23
54289: PUSH
54290: LD_INT 27
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 42
54303: PUSH
54304: LD_INT 43
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 44
54313: PUSH
54314: LD_INT 46
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 45
54323: PUSH
54324: LD_INT 47
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// result := [ ] ;
54341: LD_ADDR_VAR 0 3
54345: PUSH
54346: EMPTY
54347: ST_TO_ADDR
// for i in turrets do
54348: LD_ADDR_VAR 0 4
54352: PUSH
54353: LD_VAR 0 1
54357: PUSH
54358: FOR_IN
54359: IFFALSE 54542
// begin nat := GetNation ( i ) ;
54361: LD_ADDR_VAR 0 7
54365: PUSH
54366: LD_VAR 0 4
54370: PPUSH
54371: CALL_OW 248
54375: ST_TO_ADDR
// weapon := 0 ;
54376: LD_ADDR_VAR 0 8
54380: PUSH
54381: LD_INT 0
54383: ST_TO_ADDR
// if not nat then
54384: LD_VAR 0 7
54388: NOT
54389: IFFALSE 54393
// continue ;
54391: GO 54358
// for j in list [ nat ] do
54393: LD_ADDR_VAR 0 5
54397: PUSH
54398: LD_VAR 0 10
54402: PUSH
54403: LD_VAR 0 7
54407: ARRAY
54408: PUSH
54409: FOR_IN
54410: IFFALSE 54451
// if GetBWeapon ( i ) = j [ 1 ] then
54412: LD_VAR 0 4
54416: PPUSH
54417: CALL_OW 269
54421: PUSH
54422: LD_VAR 0 5
54426: PUSH
54427: LD_INT 1
54429: ARRAY
54430: EQUAL
54431: IFFALSE 54449
// begin weapon := j [ 2 ] ;
54433: LD_ADDR_VAR 0 8
54437: PUSH
54438: LD_VAR 0 5
54442: PUSH
54443: LD_INT 2
54445: ARRAY
54446: ST_TO_ADDR
// break ;
54447: GO 54451
// end ;
54449: GO 54409
54451: POP
54452: POP
// if not weapon then
54453: LD_VAR 0 8
54457: NOT
54458: IFFALSE 54462
// continue ;
54460: GO 54358
// for k in factories do
54462: LD_ADDR_VAR 0 6
54466: PUSH
54467: LD_VAR 0 2
54471: PUSH
54472: FOR_IN
54473: IFFALSE 54538
// begin weapons := AvailableWeaponList ( k ) ;
54475: LD_ADDR_VAR 0 9
54479: PUSH
54480: LD_VAR 0 6
54484: PPUSH
54485: CALL_OW 478
54489: ST_TO_ADDR
// if not weapons then
54490: LD_VAR 0 9
54494: NOT
54495: IFFALSE 54499
// continue ;
54497: GO 54472
// if weapon in weapons then
54499: LD_VAR 0 8
54503: PUSH
54504: LD_VAR 0 9
54508: IN
54509: IFFALSE 54536
// begin result := [ i , weapon ] ;
54511: LD_ADDR_VAR 0 3
54515: PUSH
54516: LD_VAR 0 4
54520: PUSH
54521: LD_VAR 0 8
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: ST_TO_ADDR
// exit ;
54530: POP
54531: POP
54532: POP
54533: POP
54534: GO 54544
// end ; end ;
54536: GO 54472
54538: POP
54539: POP
// end ;
54540: GO 54358
54542: POP
54543: POP
// end ;
54544: LD_VAR 0 3
54548: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54549: LD_INT 0
54551: PPUSH
// if not side or side > 8 then
54552: LD_VAR 0 3
54556: NOT
54557: PUSH
54558: LD_VAR 0 3
54562: PUSH
54563: LD_INT 8
54565: GREATER
54566: OR
54567: IFFALSE 54571
// exit ;
54569: GO 54630
// if not range then
54571: LD_VAR 0 4
54575: NOT
54576: IFFALSE 54587
// range := - 12 ;
54578: LD_ADDR_VAR 0 4
54582: PUSH
54583: LD_INT 12
54585: NEG
54586: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54587: LD_VAR 0 1
54591: PPUSH
54592: LD_VAR 0 2
54596: PPUSH
54597: LD_VAR 0 3
54601: PPUSH
54602: LD_VAR 0 4
54606: PPUSH
54607: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54611: LD_VAR 0 1
54615: PPUSH
54616: LD_VAR 0 2
54620: PPUSH
54621: LD_VAR 0 3
54625: PPUSH
54626: CALL_OW 331
// end ;
54630: LD_VAR 0 5
54634: RET
// export function Video ( mode ) ; begin
54635: LD_INT 0
54637: PPUSH
// ingame_video = mode ;
54638: LD_ADDR_OWVAR 52
54642: PUSH
54643: LD_VAR 0 1
54647: ST_TO_ADDR
// interface_hidden = mode ;
54648: LD_ADDR_OWVAR 54
54652: PUSH
54653: LD_VAR 0 1
54657: ST_TO_ADDR
// end ;
54658: LD_VAR 0 2
54662: RET
// export function Join ( array , element ) ; begin
54663: LD_INT 0
54665: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54666: LD_ADDR_VAR 0 3
54670: PUSH
54671: LD_VAR 0 1
54675: PPUSH
54676: LD_VAR 0 1
54680: PUSH
54681: LD_INT 1
54683: PLUS
54684: PPUSH
54685: LD_VAR 0 2
54689: PPUSH
54690: CALL_OW 1
54694: ST_TO_ADDR
// end ;
54695: LD_VAR 0 3
54699: RET
// export function JoinUnion ( array , element ) ; begin
54700: LD_INT 0
54702: PPUSH
// result := array union element ;
54703: LD_ADDR_VAR 0 3
54707: PUSH
54708: LD_VAR 0 1
54712: PUSH
54713: LD_VAR 0 2
54717: UNION
54718: ST_TO_ADDR
// end ;
54719: LD_VAR 0 3
54723: RET
// export function GetBehemoths ( side ) ; begin
54724: LD_INT 0
54726: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54727: LD_ADDR_VAR 0 2
54731: PUSH
54732: LD_INT 22
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 31
54746: PUSH
54747: LD_INT 25
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PPUSH
54758: CALL_OW 69
54762: ST_TO_ADDR
// end ;
54763: LD_VAR 0 2
54767: RET
// export function Shuffle ( array ) ; var i , index ; begin
54768: LD_INT 0
54770: PPUSH
54771: PPUSH
54772: PPUSH
// result := [ ] ;
54773: LD_ADDR_VAR 0 2
54777: PUSH
54778: EMPTY
54779: ST_TO_ADDR
// if not array then
54780: LD_VAR 0 1
54784: NOT
54785: IFFALSE 54789
// exit ;
54787: GO 54888
// Randomize ;
54789: CALL_OW 10
// for i = array downto 1 do
54793: LD_ADDR_VAR 0 3
54797: PUSH
54798: DOUBLE
54799: LD_VAR 0 1
54803: INC
54804: ST_TO_ADDR
54805: LD_INT 1
54807: PUSH
54808: FOR_DOWNTO
54809: IFFALSE 54886
// begin index := rand ( 1 , array ) ;
54811: LD_ADDR_VAR 0 4
54815: PUSH
54816: LD_INT 1
54818: PPUSH
54819: LD_VAR 0 1
54823: PPUSH
54824: CALL_OW 12
54828: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54829: LD_ADDR_VAR 0 2
54833: PUSH
54834: LD_VAR 0 2
54838: PPUSH
54839: LD_VAR 0 2
54843: PUSH
54844: LD_INT 1
54846: PLUS
54847: PPUSH
54848: LD_VAR 0 1
54852: PUSH
54853: LD_VAR 0 4
54857: ARRAY
54858: PPUSH
54859: CALL_OW 2
54863: ST_TO_ADDR
// array := Delete ( array , index ) ;
54864: LD_ADDR_VAR 0 1
54868: PUSH
54869: LD_VAR 0 1
54873: PPUSH
54874: LD_VAR 0 4
54878: PPUSH
54879: CALL_OW 3
54883: ST_TO_ADDR
// end ;
54884: GO 54808
54886: POP
54887: POP
// end ;
54888: LD_VAR 0 2
54892: RET
// export function GetBaseMaterials ( base ) ; begin
54893: LD_INT 0
54895: PPUSH
// result := [ 0 , 0 , 0 ] ;
54896: LD_ADDR_VAR 0 2
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: ST_TO_ADDR
// if not base then
54915: LD_VAR 0 1
54919: NOT
54920: IFFALSE 54924
// exit ;
54922: GO 54973
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54924: LD_ADDR_VAR 0 2
54928: PUSH
54929: LD_VAR 0 1
54933: PPUSH
54934: LD_INT 1
54936: PPUSH
54937: CALL_OW 275
54941: PUSH
54942: LD_VAR 0 1
54946: PPUSH
54947: LD_INT 2
54949: PPUSH
54950: CALL_OW 275
54954: PUSH
54955: LD_VAR 0 1
54959: PPUSH
54960: LD_INT 3
54962: PPUSH
54963: CALL_OW 275
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: ST_TO_ADDR
// end ;
54973: LD_VAR 0 2
54977: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54978: LD_INT 0
54980: PPUSH
54981: PPUSH
// result := array ;
54982: LD_ADDR_VAR 0 3
54986: PUSH
54987: LD_VAR 0 1
54991: ST_TO_ADDR
// if size >= result then
54992: LD_VAR 0 2
54996: PUSH
54997: LD_VAR 0 3
55001: GREATEREQUAL
55002: IFFALSE 55006
// exit ;
55004: GO 55056
// if size then
55006: LD_VAR 0 2
55010: IFFALSE 55056
// for i := array downto size do
55012: LD_ADDR_VAR 0 4
55016: PUSH
55017: DOUBLE
55018: LD_VAR 0 1
55022: INC
55023: ST_TO_ADDR
55024: LD_VAR 0 2
55028: PUSH
55029: FOR_DOWNTO
55030: IFFALSE 55054
// result := Delete ( result , result ) ;
55032: LD_ADDR_VAR 0 3
55036: PUSH
55037: LD_VAR 0 3
55041: PPUSH
55042: LD_VAR 0 3
55046: PPUSH
55047: CALL_OW 3
55051: ST_TO_ADDR
55052: GO 55029
55054: POP
55055: POP
// end ;
55056: LD_VAR 0 3
55060: RET
// export function ComExit ( unit ) ; var tmp ; begin
55061: LD_INT 0
55063: PPUSH
55064: PPUSH
// if not IsInUnit ( unit ) then
55065: LD_VAR 0 1
55069: PPUSH
55070: CALL_OW 310
55074: NOT
55075: IFFALSE 55079
// exit ;
55077: GO 55139
// tmp := IsInUnit ( unit ) ;
55079: LD_ADDR_VAR 0 3
55083: PUSH
55084: LD_VAR 0 1
55088: PPUSH
55089: CALL_OW 310
55093: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55094: LD_VAR 0 3
55098: PPUSH
55099: CALL_OW 247
55103: PUSH
55104: LD_INT 2
55106: EQUAL
55107: IFFALSE 55120
// ComExitVehicle ( unit ) else
55109: LD_VAR 0 1
55113: PPUSH
55114: CALL_OW 121
55118: GO 55129
// ComExitBuilding ( unit ) ;
55120: LD_VAR 0 1
55124: PPUSH
55125: CALL_OW 122
// result := tmp ;
55129: LD_ADDR_VAR 0 2
55133: PUSH
55134: LD_VAR 0 3
55138: ST_TO_ADDR
// end ;
55139: LD_VAR 0 2
55143: RET
// export function ComExitAll ( units ) ; var i ; begin
55144: LD_INT 0
55146: PPUSH
55147: PPUSH
// if not units then
55148: LD_VAR 0 1
55152: NOT
55153: IFFALSE 55157
// exit ;
55155: GO 55183
// for i in units do
55157: LD_ADDR_VAR 0 3
55161: PUSH
55162: LD_VAR 0 1
55166: PUSH
55167: FOR_IN
55168: IFFALSE 55181
// ComExit ( i ) ;
55170: LD_VAR 0 3
55174: PPUSH
55175: CALL 55061 0 1
55179: GO 55167
55181: POP
55182: POP
// end ;
55183: LD_VAR 0 2
55187: RET
// export function ResetHc ; begin
55188: LD_INT 0
55190: PPUSH
// InitHc ;
55191: CALL_OW 19
// hc_importance := 0 ;
55195: LD_ADDR_OWVAR 32
55199: PUSH
55200: LD_INT 0
55202: ST_TO_ADDR
// end ;
55203: LD_VAR 0 1
55207: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55208: LD_INT 0
55210: PPUSH
55211: PPUSH
55212: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55213: LD_ADDR_VAR 0 6
55217: PUSH
55218: LD_VAR 0 1
55222: PUSH
55223: LD_VAR 0 3
55227: PLUS
55228: PUSH
55229: LD_INT 2
55231: DIV
55232: ST_TO_ADDR
// if _x < 0 then
55233: LD_VAR 0 6
55237: PUSH
55238: LD_INT 0
55240: LESS
55241: IFFALSE 55258
// _x := _x * - 1 ;
55243: LD_ADDR_VAR 0 6
55247: PUSH
55248: LD_VAR 0 6
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: MUL
55257: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55258: LD_ADDR_VAR 0 7
55262: PUSH
55263: LD_VAR 0 2
55267: PUSH
55268: LD_VAR 0 4
55272: PLUS
55273: PUSH
55274: LD_INT 2
55276: DIV
55277: ST_TO_ADDR
// if _y < 0 then
55278: LD_VAR 0 7
55282: PUSH
55283: LD_INT 0
55285: LESS
55286: IFFALSE 55303
// _y := _y * - 1 ;
55288: LD_ADDR_VAR 0 7
55292: PUSH
55293: LD_VAR 0 7
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: MUL
55302: ST_TO_ADDR
// result := [ _x , _y ] ;
55303: LD_ADDR_VAR 0 5
55307: PUSH
55308: LD_VAR 0 6
55312: PUSH
55313: LD_VAR 0 7
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: ST_TO_ADDR
// end ;
55322: LD_VAR 0 5
55326: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55327: LD_INT 0
55329: PPUSH
55330: PPUSH
55331: PPUSH
55332: PPUSH
// task := GetTaskList ( unit ) ;
55333: LD_ADDR_VAR 0 7
55337: PUSH
55338: LD_VAR 0 1
55342: PPUSH
55343: CALL_OW 437
55347: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55348: LD_VAR 0 7
55352: NOT
55353: PUSH
55354: LD_VAR 0 1
55358: PPUSH
55359: LD_VAR 0 2
55363: PPUSH
55364: CALL_OW 308
55368: NOT
55369: AND
55370: IFFALSE 55374
// exit ;
55372: GO 55492
// if IsInArea ( unit , area ) then
55374: LD_VAR 0 1
55378: PPUSH
55379: LD_VAR 0 2
55383: PPUSH
55384: CALL_OW 308
55388: IFFALSE 55406
// begin ComMoveToArea ( unit , goAway ) ;
55390: LD_VAR 0 1
55394: PPUSH
55395: LD_VAR 0 3
55399: PPUSH
55400: CALL_OW 113
// exit ;
55404: GO 55492
// end ; if task [ 1 ] [ 1 ] <> M then
55406: LD_VAR 0 7
55410: PUSH
55411: LD_INT 1
55413: ARRAY
55414: PUSH
55415: LD_INT 1
55417: ARRAY
55418: PUSH
55419: LD_STRING M
55421: NONEQUAL
55422: IFFALSE 55426
// exit ;
55424: GO 55492
// x := task [ 1 ] [ 2 ] ;
55426: LD_ADDR_VAR 0 5
55430: PUSH
55431: LD_VAR 0 7
55435: PUSH
55436: LD_INT 1
55438: ARRAY
55439: PUSH
55440: LD_INT 2
55442: ARRAY
55443: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55444: LD_ADDR_VAR 0 6
55448: PUSH
55449: LD_VAR 0 7
55453: PUSH
55454: LD_INT 1
55456: ARRAY
55457: PUSH
55458: LD_INT 3
55460: ARRAY
55461: ST_TO_ADDR
// if InArea ( x , y , area ) then
55462: LD_VAR 0 5
55466: PPUSH
55467: LD_VAR 0 6
55471: PPUSH
55472: LD_VAR 0 2
55476: PPUSH
55477: CALL_OW 309
55481: IFFALSE 55492
// ComStop ( unit ) ;
55483: LD_VAR 0 1
55487: PPUSH
55488: CALL_OW 141
// end ;
55492: LD_VAR 0 4
55496: RET
// export function Abs ( value ) ; begin
55497: LD_INT 0
55499: PPUSH
// result := value ;
55500: LD_ADDR_VAR 0 2
55504: PUSH
55505: LD_VAR 0 1
55509: ST_TO_ADDR
// if value < 0 then
55510: LD_VAR 0 1
55514: PUSH
55515: LD_INT 0
55517: LESS
55518: IFFALSE 55535
// result := value * - 1 ;
55520: LD_ADDR_VAR 0 2
55524: PUSH
55525: LD_VAR 0 1
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: MUL
55534: ST_TO_ADDR
// end ;
55535: LD_VAR 0 2
55539: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55540: LD_INT 0
55542: PPUSH
55543: PPUSH
55544: PPUSH
55545: PPUSH
55546: PPUSH
55547: PPUSH
55548: PPUSH
55549: PPUSH
// if not unit or not building then
55550: LD_VAR 0 1
55554: NOT
55555: PUSH
55556: LD_VAR 0 2
55560: NOT
55561: OR
55562: IFFALSE 55566
// exit ;
55564: GO 55792
// x := GetX ( building ) ;
55566: LD_ADDR_VAR 0 4
55570: PUSH
55571: LD_VAR 0 2
55575: PPUSH
55576: CALL_OW 250
55580: ST_TO_ADDR
// y := GetY ( building ) ;
55581: LD_ADDR_VAR 0 6
55585: PUSH
55586: LD_VAR 0 2
55590: PPUSH
55591: CALL_OW 251
55595: ST_TO_ADDR
// d := GetDir ( building ) ;
55596: LD_ADDR_VAR 0 8
55600: PUSH
55601: LD_VAR 0 2
55605: PPUSH
55606: CALL_OW 254
55610: ST_TO_ADDR
// r := 4 ;
55611: LD_ADDR_VAR 0 9
55615: PUSH
55616: LD_INT 4
55618: ST_TO_ADDR
// for i := 1 to 5 do
55619: LD_ADDR_VAR 0 10
55623: PUSH
55624: DOUBLE
55625: LD_INT 1
55627: DEC
55628: ST_TO_ADDR
55629: LD_INT 5
55631: PUSH
55632: FOR_TO
55633: IFFALSE 55790
// begin _x := ShiftX ( x , d , r + i ) ;
55635: LD_ADDR_VAR 0 5
55639: PUSH
55640: LD_VAR 0 4
55644: PPUSH
55645: LD_VAR 0 8
55649: PPUSH
55650: LD_VAR 0 9
55654: PUSH
55655: LD_VAR 0 10
55659: PLUS
55660: PPUSH
55661: CALL_OW 272
55665: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55666: LD_ADDR_VAR 0 7
55670: PUSH
55671: LD_VAR 0 6
55675: PPUSH
55676: LD_VAR 0 8
55680: PPUSH
55681: LD_VAR 0 9
55685: PUSH
55686: LD_VAR 0 10
55690: PLUS
55691: PPUSH
55692: CALL_OW 273
55696: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55697: LD_VAR 0 5
55701: PPUSH
55702: LD_VAR 0 7
55706: PPUSH
55707: CALL_OW 488
55711: PUSH
55712: LD_VAR 0 5
55716: PPUSH
55717: LD_VAR 0 7
55721: PPUSH
55722: CALL_OW 428
55726: PPUSH
55727: CALL_OW 247
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: IN
55742: NOT
55743: AND
55744: IFFALSE 55788
// begin ComMoveXY ( unit , _x , _y ) ;
55746: LD_VAR 0 1
55750: PPUSH
55751: LD_VAR 0 5
55755: PPUSH
55756: LD_VAR 0 7
55760: PPUSH
55761: CALL_OW 111
// result := [ _x , _y ] ;
55765: LD_ADDR_VAR 0 3
55769: PUSH
55770: LD_VAR 0 5
55774: PUSH
55775: LD_VAR 0 7
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// exit ;
55784: POP
55785: POP
55786: GO 55792
// end ; end ;
55788: GO 55632
55790: POP
55791: POP
// end ;
55792: LD_VAR 0 3
55796: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55797: LD_INT 0
55799: PPUSH
55800: PPUSH
55801: PPUSH
// result := 0 ;
55802: LD_ADDR_VAR 0 3
55806: PUSH
55807: LD_INT 0
55809: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55810: LD_VAR 0 1
55814: PUSH
55815: LD_INT 0
55817: LESS
55818: PUSH
55819: LD_VAR 0 1
55823: PUSH
55824: LD_INT 8
55826: GREATER
55827: OR
55828: PUSH
55829: LD_VAR 0 2
55833: PUSH
55834: LD_INT 0
55836: LESS
55837: OR
55838: PUSH
55839: LD_VAR 0 2
55843: PUSH
55844: LD_INT 8
55846: GREATER
55847: OR
55848: IFFALSE 55852
// exit ;
55850: GO 55927
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55852: LD_ADDR_VAR 0 4
55856: PUSH
55857: LD_INT 22
55859: PUSH
55860: LD_VAR 0 2
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PPUSH
55869: CALL_OW 69
55873: PUSH
55874: FOR_IN
55875: IFFALSE 55925
// begin un := UnitShoot ( i ) ;
55877: LD_ADDR_VAR 0 5
55881: PUSH
55882: LD_VAR 0 4
55886: PPUSH
55887: CALL_OW 504
55891: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55892: LD_VAR 0 5
55896: PPUSH
55897: CALL_OW 255
55901: PUSH
55902: LD_VAR 0 1
55906: EQUAL
55907: IFFALSE 55923
// begin result := un ;
55909: LD_ADDR_VAR 0 3
55913: PUSH
55914: LD_VAR 0 5
55918: ST_TO_ADDR
// exit ;
55919: POP
55920: POP
55921: GO 55927
// end ; end ;
55923: GO 55874
55925: POP
55926: POP
// end ;
55927: LD_VAR 0 3
55931: RET
// export function GetCargoBay ( units ) ; begin
55932: LD_INT 0
55934: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55935: LD_ADDR_VAR 0 2
55939: PUSH
55940: LD_VAR 0 1
55944: PPUSH
55945: LD_INT 2
55947: PUSH
55948: LD_INT 34
55950: PUSH
55951: LD_INT 12
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 34
55960: PUSH
55961: LD_INT 51
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 34
55970: PUSH
55971: LD_INT 32
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 34
55980: PUSH
55981: LD_INT 89
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: PPUSH
55995: CALL_OW 72
55999: ST_TO_ADDR
// end ;
56000: LD_VAR 0 2
56004: RET
// export function Negate ( value ) ; begin
56005: LD_INT 0
56007: PPUSH
// result := not value ;
56008: LD_ADDR_VAR 0 2
56012: PUSH
56013: LD_VAR 0 1
56017: NOT
56018: ST_TO_ADDR
// end ;
56019: LD_VAR 0 2
56023: RET
// export function Inc ( value ) ; begin
56024: LD_INT 0
56026: PPUSH
// result := value + 1 ;
56027: LD_ADDR_VAR 0 2
56031: PUSH
56032: LD_VAR 0 1
56036: PUSH
56037: LD_INT 1
56039: PLUS
56040: ST_TO_ADDR
// end ;
56041: LD_VAR 0 2
56045: RET
// export function Dec ( value ) ; begin
56046: LD_INT 0
56048: PPUSH
// result := value - 1 ;
56049: LD_ADDR_VAR 0 2
56053: PUSH
56054: LD_VAR 0 1
56058: PUSH
56059: LD_INT 1
56061: MINUS
56062: ST_TO_ADDR
// end ;
56063: LD_VAR 0 2
56067: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56068: LD_INT 0
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56078: LD_VAR 0 1
56082: PPUSH
56083: LD_VAR 0 2
56087: PPUSH
56088: CALL_OW 488
56092: NOT
56093: PUSH
56094: LD_VAR 0 3
56098: PPUSH
56099: LD_VAR 0 4
56103: PPUSH
56104: CALL_OW 488
56108: NOT
56109: OR
56110: IFFALSE 56123
// begin result := - 1 ;
56112: LD_ADDR_VAR 0 5
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: ST_TO_ADDR
// exit ;
56121: GO 56358
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56123: LD_ADDR_VAR 0 12
56127: PUSH
56128: LD_VAR 0 1
56132: PPUSH
56133: LD_VAR 0 2
56137: PPUSH
56138: LD_VAR 0 3
56142: PPUSH
56143: LD_VAR 0 4
56147: PPUSH
56148: CALL 55208 0 4
56152: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56153: LD_ADDR_VAR 0 11
56157: PUSH
56158: LD_VAR 0 1
56162: PPUSH
56163: LD_VAR 0 2
56167: PPUSH
56168: LD_VAR 0 12
56172: PUSH
56173: LD_INT 1
56175: ARRAY
56176: PPUSH
56177: LD_VAR 0 12
56181: PUSH
56182: LD_INT 2
56184: ARRAY
56185: PPUSH
56186: CALL_OW 298
56190: ST_TO_ADDR
// distance := 9999 ;
56191: LD_ADDR_VAR 0 10
56195: PUSH
56196: LD_INT 9999
56198: ST_TO_ADDR
// for i := 0 to 5 do
56199: LD_ADDR_VAR 0 6
56203: PUSH
56204: DOUBLE
56205: LD_INT 0
56207: DEC
56208: ST_TO_ADDR
56209: LD_INT 5
56211: PUSH
56212: FOR_TO
56213: IFFALSE 56356
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56215: LD_ADDR_VAR 0 7
56219: PUSH
56220: LD_VAR 0 1
56224: PPUSH
56225: LD_VAR 0 6
56229: PPUSH
56230: LD_VAR 0 11
56234: PPUSH
56235: CALL_OW 272
56239: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56240: LD_ADDR_VAR 0 8
56244: PUSH
56245: LD_VAR 0 2
56249: PPUSH
56250: LD_VAR 0 6
56254: PPUSH
56255: LD_VAR 0 11
56259: PPUSH
56260: CALL_OW 273
56264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56265: LD_VAR 0 7
56269: PPUSH
56270: LD_VAR 0 8
56274: PPUSH
56275: CALL_OW 488
56279: NOT
56280: IFFALSE 56284
// continue ;
56282: GO 56212
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56284: LD_ADDR_VAR 0 9
56288: PUSH
56289: LD_VAR 0 12
56293: PUSH
56294: LD_INT 1
56296: ARRAY
56297: PPUSH
56298: LD_VAR 0 12
56302: PUSH
56303: LD_INT 2
56305: ARRAY
56306: PPUSH
56307: LD_VAR 0 7
56311: PPUSH
56312: LD_VAR 0 8
56316: PPUSH
56317: CALL_OW 298
56321: ST_TO_ADDR
// if tmp < distance then
56322: LD_VAR 0 9
56326: PUSH
56327: LD_VAR 0 10
56331: LESS
56332: IFFALSE 56354
// begin result := i ;
56334: LD_ADDR_VAR 0 5
56338: PUSH
56339: LD_VAR 0 6
56343: ST_TO_ADDR
// distance := tmp ;
56344: LD_ADDR_VAR 0 10
56348: PUSH
56349: LD_VAR 0 9
56353: ST_TO_ADDR
// end ; end ;
56354: GO 56212
56356: POP
56357: POP
// end ;
56358: LD_VAR 0 5
56362: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56363: LD_INT 0
56365: PPUSH
56366: PPUSH
// if not driver or not IsInUnit ( driver ) then
56367: LD_VAR 0 1
56371: NOT
56372: PUSH
56373: LD_VAR 0 1
56377: PPUSH
56378: CALL_OW 310
56382: NOT
56383: OR
56384: IFFALSE 56388
// exit ;
56386: GO 56478
// vehicle := IsInUnit ( driver ) ;
56388: LD_ADDR_VAR 0 3
56392: PUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: CALL_OW 310
56402: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56403: LD_VAR 0 1
56407: PPUSH
56408: LD_STRING \
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: PUSH
56438: LD_STRING E
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_VAR 0 3
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PPUSH
56474: CALL_OW 446
// end ;
56478: LD_VAR 0 2
56482: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56483: LD_INT 0
56485: PPUSH
56486: PPUSH
// if not driver or not IsInUnit ( driver ) then
56487: LD_VAR 0 1
56491: NOT
56492: PUSH
56493: LD_VAR 0 1
56497: PPUSH
56498: CALL_OW 310
56502: NOT
56503: OR
56504: IFFALSE 56508
// exit ;
56506: GO 56598
// vehicle := IsInUnit ( driver ) ;
56508: LD_ADDR_VAR 0 3
56512: PUSH
56513: LD_VAR 0 1
56517: PPUSH
56518: CALL_OW 310
56522: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56523: LD_VAR 0 1
56527: PPUSH
56528: LD_STRING \
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: PUSH
56558: LD_STRING E
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_VAR 0 3
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PPUSH
56594: CALL_OW 447
// end ;
56598: LD_VAR 0 2
56602: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56603: LD_INT 0
56605: PPUSH
56606: PPUSH
56607: PPUSH
// tmp := [ ] ;
56608: LD_ADDR_VAR 0 5
56612: PUSH
56613: EMPTY
56614: ST_TO_ADDR
// for i in units do
56615: LD_ADDR_VAR 0 4
56619: PUSH
56620: LD_VAR 0 1
56624: PUSH
56625: FOR_IN
56626: IFFALSE 56664
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56628: LD_ADDR_VAR 0 5
56632: PUSH
56633: LD_VAR 0 5
56637: PPUSH
56638: LD_VAR 0 5
56642: PUSH
56643: LD_INT 1
56645: PLUS
56646: PPUSH
56647: LD_VAR 0 4
56651: PPUSH
56652: CALL_OW 256
56656: PPUSH
56657: CALL_OW 2
56661: ST_TO_ADDR
56662: GO 56625
56664: POP
56665: POP
// if not tmp then
56666: LD_VAR 0 5
56670: NOT
56671: IFFALSE 56675
// exit ;
56673: GO 56723
// if asc then
56675: LD_VAR 0 2
56679: IFFALSE 56703
// result := SortListByListAsc ( units , tmp ) else
56681: LD_ADDR_VAR 0 3
56685: PUSH
56686: LD_VAR 0 1
56690: PPUSH
56691: LD_VAR 0 5
56695: PPUSH
56696: CALL_OW 76
56700: ST_TO_ADDR
56701: GO 56723
// result := SortListByListDesc ( units , tmp ) ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: LD_VAR 0 5
56717: PPUSH
56718: CALL_OW 77
56722: ST_TO_ADDR
// end ;
56723: LD_VAR 0 3
56727: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56728: LD_INT 0
56730: PPUSH
56731: PPUSH
// task := GetTaskList ( mech ) ;
56732: LD_ADDR_VAR 0 4
56736: PUSH
56737: LD_VAR 0 1
56741: PPUSH
56742: CALL_OW 437
56746: ST_TO_ADDR
// if not task then
56747: LD_VAR 0 4
56751: NOT
56752: IFFALSE 56756
// exit ;
56754: GO 56798
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56756: LD_ADDR_VAR 0 3
56760: PUSH
56761: LD_VAR 0 4
56765: PUSH
56766: LD_INT 1
56768: ARRAY
56769: PUSH
56770: LD_INT 1
56772: ARRAY
56773: PUSH
56774: LD_STRING r
56776: EQUAL
56777: PUSH
56778: LD_VAR 0 4
56782: PUSH
56783: LD_INT 1
56785: ARRAY
56786: PUSH
56787: LD_INT 4
56789: ARRAY
56790: PUSH
56791: LD_VAR 0 2
56795: EQUAL
56796: AND
56797: ST_TO_ADDR
// end ;
56798: LD_VAR 0 3
56802: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56803: LD_INT 0
56805: PPUSH
// SetDir ( unit , d ) ;
56806: LD_VAR 0 1
56810: PPUSH
56811: LD_VAR 0 4
56815: PPUSH
56816: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56820: LD_VAR 0 1
56824: PPUSH
56825: LD_VAR 0 2
56829: PPUSH
56830: LD_VAR 0 3
56834: PPUSH
56835: LD_VAR 0 5
56839: PPUSH
56840: CALL_OW 48
// end ;
56844: LD_VAR 0 6
56848: RET
// export function ToNaturalNumber ( number ) ; begin
56849: LD_INT 0
56851: PPUSH
// result := number div 1 ;
56852: LD_ADDR_VAR 0 2
56856: PUSH
56857: LD_VAR 0 1
56861: PUSH
56862: LD_INT 1
56864: DIV
56865: ST_TO_ADDR
// if number < 0 then
56866: LD_VAR 0 1
56870: PUSH
56871: LD_INT 0
56873: LESS
56874: IFFALSE 56884
// result := 0 ;
56876: LD_ADDR_VAR 0 2
56880: PUSH
56881: LD_INT 0
56883: ST_TO_ADDR
// end ;
56884: LD_VAR 0 2
56888: RET
// export function SortByClass ( units , class ) ; var un ; begin
56889: LD_INT 0
56891: PPUSH
56892: PPUSH
// if not units or not class then
56893: LD_VAR 0 1
56897: NOT
56898: PUSH
56899: LD_VAR 0 2
56903: NOT
56904: OR
56905: IFFALSE 56909
// exit ;
56907: GO 57004
// result := [ ] ;
56909: LD_ADDR_VAR 0 3
56913: PUSH
56914: EMPTY
56915: ST_TO_ADDR
// for un in units do
56916: LD_ADDR_VAR 0 4
56920: PUSH
56921: LD_VAR 0 1
56925: PUSH
56926: FOR_IN
56927: IFFALSE 57002
// if GetClass ( un ) = class then
56929: LD_VAR 0 4
56933: PPUSH
56934: CALL_OW 257
56938: PUSH
56939: LD_VAR 0 2
56943: EQUAL
56944: IFFALSE 56971
// result := Insert ( result , 1 , un ) else
56946: LD_ADDR_VAR 0 3
56950: PUSH
56951: LD_VAR 0 3
56955: PPUSH
56956: LD_INT 1
56958: PPUSH
56959: LD_VAR 0 4
56963: PPUSH
56964: CALL_OW 2
56968: ST_TO_ADDR
56969: GO 57000
// result := Replace ( result , result + 1 , un ) ;
56971: LD_ADDR_VAR 0 3
56975: PUSH
56976: LD_VAR 0 3
56980: PPUSH
56981: LD_VAR 0 3
56985: PUSH
56986: LD_INT 1
56988: PLUS
56989: PPUSH
56990: LD_VAR 0 4
56994: PPUSH
56995: CALL_OW 1
56999: ST_TO_ADDR
57000: GO 56926
57002: POP
57003: POP
// end ;
57004: LD_VAR 0 3
57008: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57009: LD_INT 0
57011: PPUSH
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
// result := [ ] ;
57018: LD_ADDR_VAR 0 4
57022: PUSH
57023: EMPTY
57024: ST_TO_ADDR
// if x - r < 0 then
57025: LD_VAR 0 1
57029: PUSH
57030: LD_VAR 0 3
57034: MINUS
57035: PUSH
57036: LD_INT 0
57038: LESS
57039: IFFALSE 57051
// min_x := 0 else
57041: LD_ADDR_VAR 0 8
57045: PUSH
57046: LD_INT 0
57048: ST_TO_ADDR
57049: GO 57067
// min_x := x - r ;
57051: LD_ADDR_VAR 0 8
57055: PUSH
57056: LD_VAR 0 1
57060: PUSH
57061: LD_VAR 0 3
57065: MINUS
57066: ST_TO_ADDR
// if y - r < 0 then
57067: LD_VAR 0 2
57071: PUSH
57072: LD_VAR 0 3
57076: MINUS
57077: PUSH
57078: LD_INT 0
57080: LESS
57081: IFFALSE 57093
// min_y := 0 else
57083: LD_ADDR_VAR 0 7
57087: PUSH
57088: LD_INT 0
57090: ST_TO_ADDR
57091: GO 57109
// min_y := y - r ;
57093: LD_ADDR_VAR 0 7
57097: PUSH
57098: LD_VAR 0 2
57102: PUSH
57103: LD_VAR 0 3
57107: MINUS
57108: ST_TO_ADDR
// max_x := x + r ;
57109: LD_ADDR_VAR 0 9
57113: PUSH
57114: LD_VAR 0 1
57118: PUSH
57119: LD_VAR 0 3
57123: PLUS
57124: ST_TO_ADDR
// max_y := y + r ;
57125: LD_ADDR_VAR 0 10
57129: PUSH
57130: LD_VAR 0 2
57134: PUSH
57135: LD_VAR 0 3
57139: PLUS
57140: ST_TO_ADDR
// for _x = min_x to max_x do
57141: LD_ADDR_VAR 0 5
57145: PUSH
57146: DOUBLE
57147: LD_VAR 0 8
57151: DEC
57152: ST_TO_ADDR
57153: LD_VAR 0 9
57157: PUSH
57158: FOR_TO
57159: IFFALSE 57260
// for _y = min_y to max_y do
57161: LD_ADDR_VAR 0 6
57165: PUSH
57166: DOUBLE
57167: LD_VAR 0 7
57171: DEC
57172: ST_TO_ADDR
57173: LD_VAR 0 10
57177: PUSH
57178: FOR_TO
57179: IFFALSE 57256
// begin if not ValidHex ( _x , _y ) then
57181: LD_VAR 0 5
57185: PPUSH
57186: LD_VAR 0 6
57190: PPUSH
57191: CALL_OW 488
57195: NOT
57196: IFFALSE 57200
// continue ;
57198: GO 57178
// if GetResourceTypeXY ( _x , _y ) then
57200: LD_VAR 0 5
57204: PPUSH
57205: LD_VAR 0 6
57209: PPUSH
57210: CALL_OW 283
57214: IFFALSE 57254
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57216: LD_ADDR_VAR 0 4
57220: PUSH
57221: LD_VAR 0 4
57225: PPUSH
57226: LD_VAR 0 4
57230: PUSH
57231: LD_INT 1
57233: PLUS
57234: PPUSH
57235: LD_VAR 0 5
57239: PUSH
57240: LD_VAR 0 6
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PPUSH
57249: CALL_OW 1
57253: ST_TO_ADDR
// end ;
57254: GO 57178
57256: POP
57257: POP
57258: GO 57158
57260: POP
57261: POP
// end ;
57262: LD_VAR 0 4
57266: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57267: LD_INT 0
57269: PPUSH
57270: PPUSH
57271: PPUSH
57272: PPUSH
57273: PPUSH
57274: PPUSH
57275: PPUSH
57276: PPUSH
// if not units then
57277: LD_VAR 0 1
57281: NOT
57282: IFFALSE 57286
// exit ;
57284: GO 57814
// result := UnitFilter ( units , [ f_ok ] ) ;
57286: LD_ADDR_VAR 0 3
57290: PUSH
57291: LD_VAR 0 1
57295: PPUSH
57296: LD_INT 50
57298: PUSH
57299: EMPTY
57300: LIST
57301: PPUSH
57302: CALL_OW 72
57306: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57307: LD_ADDR_VAR 0 8
57311: PUSH
57312: LD_VAR 0 1
57316: PUSH
57317: LD_INT 1
57319: ARRAY
57320: PPUSH
57321: CALL_OW 255
57325: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57326: LD_ADDR_VAR 0 10
57330: PUSH
57331: LD_INT 29
57333: PUSH
57334: LD_INT 91
57336: PUSH
57337: LD_INT 49
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// if not result then
57345: LD_VAR 0 3
57349: NOT
57350: IFFALSE 57354
// exit ;
57352: GO 57814
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57354: LD_ADDR_VAR 0 5
57358: PUSH
57359: LD_INT 81
57361: PUSH
57362: LD_VAR 0 8
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PPUSH
57371: CALL_OW 69
57375: ST_TO_ADDR
// for i in result do
57376: LD_ADDR_VAR 0 4
57380: PUSH
57381: LD_VAR 0 3
57385: PUSH
57386: FOR_IN
57387: IFFALSE 57812
// begin tag := GetTag ( i ) + 1 ;
57389: LD_ADDR_VAR 0 9
57393: PUSH
57394: LD_VAR 0 4
57398: PPUSH
57399: CALL_OW 110
57403: PUSH
57404: LD_INT 1
57406: PLUS
57407: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57408: LD_ADDR_VAR 0 7
57412: PUSH
57413: LD_VAR 0 4
57417: PPUSH
57418: CALL_OW 250
57422: PPUSH
57423: LD_VAR 0 4
57427: PPUSH
57428: CALL_OW 251
57432: PPUSH
57433: LD_INT 4
57435: PPUSH
57436: CALL 57009 0 3
57440: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57441: LD_VAR 0 4
57445: PPUSH
57446: CALL_OW 247
57450: PUSH
57451: LD_INT 2
57453: EQUAL
57454: PUSH
57455: LD_VAR 0 7
57459: PUSH
57460: LD_INT 2
57462: GREATER
57463: AND
57464: PUSH
57465: LD_VAR 0 4
57469: PPUSH
57470: CALL_OW 264
57474: PUSH
57475: LD_VAR 0 10
57479: IN
57480: NOT
57481: AND
57482: IFFALSE 57521
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57484: LD_VAR 0 4
57488: PPUSH
57489: LD_VAR 0 7
57493: PUSH
57494: LD_INT 1
57496: ARRAY
57497: PUSH
57498: LD_INT 1
57500: ARRAY
57501: PPUSH
57502: LD_VAR 0 7
57506: PUSH
57507: LD_INT 1
57509: ARRAY
57510: PUSH
57511: LD_INT 2
57513: ARRAY
57514: PPUSH
57515: CALL_OW 116
57519: GO 57810
// if path > tag then
57521: LD_VAR 0 2
57525: PUSH
57526: LD_VAR 0 9
57530: GREATER
57531: IFFALSE 57739
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57533: LD_ADDR_VAR 0 6
57537: PUSH
57538: LD_VAR 0 5
57542: PPUSH
57543: LD_INT 91
57545: PUSH
57546: LD_VAR 0 4
57550: PUSH
57551: LD_INT 8
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: LIST
57558: PPUSH
57559: CALL_OW 72
57563: ST_TO_ADDR
// if nearEnemy then
57564: LD_VAR 0 6
57568: IFFALSE 57637
// begin if GetWeapon ( i ) = ru_time_lapser then
57570: LD_VAR 0 4
57574: PPUSH
57575: CALL_OW 264
57579: PUSH
57580: LD_INT 49
57582: EQUAL
57583: IFFALSE 57611
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57585: LD_VAR 0 4
57589: PPUSH
57590: LD_VAR 0 6
57594: PPUSH
57595: LD_VAR 0 4
57599: PPUSH
57600: CALL_OW 74
57604: PPUSH
57605: CALL_OW 112
57609: GO 57635
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57611: LD_VAR 0 4
57615: PPUSH
57616: LD_VAR 0 6
57620: PPUSH
57621: LD_VAR 0 4
57625: PPUSH
57626: CALL_OW 74
57630: PPUSH
57631: CALL 58885 0 2
// end else
57635: GO 57737
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57637: LD_VAR 0 4
57641: PPUSH
57642: LD_VAR 0 2
57646: PUSH
57647: LD_VAR 0 9
57651: ARRAY
57652: PUSH
57653: LD_INT 1
57655: ARRAY
57656: PPUSH
57657: LD_VAR 0 2
57661: PUSH
57662: LD_VAR 0 9
57666: ARRAY
57667: PUSH
57668: LD_INT 2
57670: ARRAY
57671: PPUSH
57672: CALL_OW 297
57676: PUSH
57677: LD_INT 6
57679: GREATER
57680: IFFALSE 57723
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57682: LD_VAR 0 4
57686: PPUSH
57687: LD_VAR 0 2
57691: PUSH
57692: LD_VAR 0 9
57696: ARRAY
57697: PUSH
57698: LD_INT 1
57700: ARRAY
57701: PPUSH
57702: LD_VAR 0 2
57706: PUSH
57707: LD_VAR 0 9
57711: ARRAY
57712: PUSH
57713: LD_INT 2
57715: ARRAY
57716: PPUSH
57717: CALL_OW 114
57721: GO 57737
// SetTag ( i , tag ) ;
57723: LD_VAR 0 4
57727: PPUSH
57728: LD_VAR 0 9
57732: PPUSH
57733: CALL_OW 109
// end else
57737: GO 57810
// if enemy then
57739: LD_VAR 0 5
57743: IFFALSE 57810
// begin if GetWeapon ( i ) = ru_time_lapser then
57745: LD_VAR 0 4
57749: PPUSH
57750: CALL_OW 264
57754: PUSH
57755: LD_INT 49
57757: EQUAL
57758: IFFALSE 57786
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57760: LD_VAR 0 4
57764: PPUSH
57765: LD_VAR 0 5
57769: PPUSH
57770: LD_VAR 0 4
57774: PPUSH
57775: CALL_OW 74
57779: PPUSH
57780: CALL_OW 112
57784: GO 57810
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57786: LD_VAR 0 4
57790: PPUSH
57791: LD_VAR 0 5
57795: PPUSH
57796: LD_VAR 0 4
57800: PPUSH
57801: CALL_OW 74
57805: PPUSH
57806: CALL 58885 0 2
// end ; end ;
57810: GO 57386
57812: POP
57813: POP
// end ;
57814: LD_VAR 0 3
57818: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57819: LD_INT 0
57821: PPUSH
57822: PPUSH
57823: PPUSH
// if not unit or IsInUnit ( unit ) then
57824: LD_VAR 0 1
57828: NOT
57829: PUSH
57830: LD_VAR 0 1
57834: PPUSH
57835: CALL_OW 310
57839: OR
57840: IFFALSE 57844
// exit ;
57842: GO 57935
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57844: LD_ADDR_VAR 0 4
57848: PUSH
57849: LD_VAR 0 1
57853: PPUSH
57854: CALL_OW 250
57858: PPUSH
57859: LD_VAR 0 2
57863: PPUSH
57864: LD_INT 1
57866: PPUSH
57867: CALL_OW 272
57871: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57872: LD_ADDR_VAR 0 5
57876: PUSH
57877: LD_VAR 0 1
57881: PPUSH
57882: CALL_OW 251
57886: PPUSH
57887: LD_VAR 0 2
57891: PPUSH
57892: LD_INT 1
57894: PPUSH
57895: CALL_OW 273
57899: ST_TO_ADDR
// if ValidHex ( x , y ) then
57900: LD_VAR 0 4
57904: PPUSH
57905: LD_VAR 0 5
57909: PPUSH
57910: CALL_OW 488
57914: IFFALSE 57935
// ComTurnXY ( unit , x , y ) ;
57916: LD_VAR 0 1
57920: PPUSH
57921: LD_VAR 0 4
57925: PPUSH
57926: LD_VAR 0 5
57930: PPUSH
57931: CALL_OW 118
// end ;
57935: LD_VAR 0 3
57939: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57940: LD_INT 0
57942: PPUSH
57943: PPUSH
// result := false ;
57944: LD_ADDR_VAR 0 3
57948: PUSH
57949: LD_INT 0
57951: ST_TO_ADDR
// if not units then
57952: LD_VAR 0 2
57956: NOT
57957: IFFALSE 57961
// exit ;
57959: GO 58006
// for i in units do
57961: LD_ADDR_VAR 0 4
57965: PUSH
57966: LD_VAR 0 2
57970: PUSH
57971: FOR_IN
57972: IFFALSE 58004
// if See ( side , i ) then
57974: LD_VAR 0 1
57978: PPUSH
57979: LD_VAR 0 4
57983: PPUSH
57984: CALL_OW 292
57988: IFFALSE 58002
// begin result := true ;
57990: LD_ADDR_VAR 0 3
57994: PUSH
57995: LD_INT 1
57997: ST_TO_ADDR
// exit ;
57998: POP
57999: POP
58000: GO 58006
// end ;
58002: GO 57971
58004: POP
58005: POP
// end ;
58006: LD_VAR 0 3
58010: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58011: LD_INT 0
58013: PPUSH
58014: PPUSH
58015: PPUSH
58016: PPUSH
// if not unit or not points then
58017: LD_VAR 0 1
58021: NOT
58022: PUSH
58023: LD_VAR 0 2
58027: NOT
58028: OR
58029: IFFALSE 58033
// exit ;
58031: GO 58123
// dist := 99999 ;
58033: LD_ADDR_VAR 0 5
58037: PUSH
58038: LD_INT 99999
58040: ST_TO_ADDR
// for i in points do
58041: LD_ADDR_VAR 0 4
58045: PUSH
58046: LD_VAR 0 2
58050: PUSH
58051: FOR_IN
58052: IFFALSE 58121
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58054: LD_ADDR_VAR 0 6
58058: PUSH
58059: LD_VAR 0 1
58063: PPUSH
58064: LD_VAR 0 4
58068: PUSH
58069: LD_INT 1
58071: ARRAY
58072: PPUSH
58073: LD_VAR 0 4
58077: PUSH
58078: LD_INT 2
58080: ARRAY
58081: PPUSH
58082: CALL_OW 297
58086: ST_TO_ADDR
// if tmpDist < dist then
58087: LD_VAR 0 6
58091: PUSH
58092: LD_VAR 0 5
58096: LESS
58097: IFFALSE 58119
// begin result := i ;
58099: LD_ADDR_VAR 0 3
58103: PUSH
58104: LD_VAR 0 4
58108: ST_TO_ADDR
// dist := tmpDist ;
58109: LD_ADDR_VAR 0 5
58113: PUSH
58114: LD_VAR 0 6
58118: ST_TO_ADDR
// end ; end ;
58119: GO 58051
58121: POP
58122: POP
// end ;
58123: LD_VAR 0 3
58127: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58128: LD_INT 0
58130: PPUSH
// uc_side := side ;
58131: LD_ADDR_OWVAR 20
58135: PUSH
58136: LD_VAR 0 1
58140: ST_TO_ADDR
// uc_nation := 3 ;
58141: LD_ADDR_OWVAR 21
58145: PUSH
58146: LD_INT 3
58148: ST_TO_ADDR
// vc_chassis := 25 ;
58149: LD_ADDR_OWVAR 37
58153: PUSH
58154: LD_INT 25
58156: ST_TO_ADDR
// vc_engine := engine_siberite ;
58157: LD_ADDR_OWVAR 39
58161: PUSH
58162: LD_INT 3
58164: ST_TO_ADDR
// vc_control := control_computer ;
58165: LD_ADDR_OWVAR 38
58169: PUSH
58170: LD_INT 3
58172: ST_TO_ADDR
// vc_weapon := 59 ;
58173: LD_ADDR_OWVAR 40
58177: PUSH
58178: LD_INT 59
58180: ST_TO_ADDR
// result := CreateVehicle ;
58181: LD_ADDR_VAR 0 5
58185: PUSH
58186: CALL_OW 45
58190: ST_TO_ADDR
// SetDir ( result , d ) ;
58191: LD_VAR 0 5
58195: PPUSH
58196: LD_VAR 0 4
58200: PPUSH
58201: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58205: LD_VAR 0 5
58209: PPUSH
58210: LD_VAR 0 2
58214: PPUSH
58215: LD_VAR 0 3
58219: PPUSH
58220: LD_INT 0
58222: PPUSH
58223: CALL_OW 48
// end ;
58227: LD_VAR 0 5
58231: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58232: LD_INT 0
58234: PPUSH
58235: PPUSH
58236: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58237: LD_ADDR_VAR 0 2
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58260: LD_VAR 0 1
58264: NOT
58265: PUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL_OW 264
58275: PUSH
58276: LD_INT 12
58278: PUSH
58279: LD_INT 51
58281: PUSH
58282: LD_INT 32
58284: PUSH
58285: LD_INT 89
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: IN
58294: NOT
58295: OR
58296: IFFALSE 58300
// exit ;
58298: GO 58398
// for i := 1 to 3 do
58300: LD_ADDR_VAR 0 3
58304: PUSH
58305: DOUBLE
58306: LD_INT 1
58308: DEC
58309: ST_TO_ADDR
58310: LD_INT 3
58312: PUSH
58313: FOR_TO
58314: IFFALSE 58396
// begin tmp := GetCargo ( cargo , i ) ;
58316: LD_ADDR_VAR 0 4
58320: PUSH
58321: LD_VAR 0 1
58325: PPUSH
58326: LD_VAR 0 3
58330: PPUSH
58331: CALL_OW 289
58335: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58336: LD_ADDR_VAR 0 2
58340: PUSH
58341: LD_VAR 0 2
58345: PPUSH
58346: LD_VAR 0 3
58350: PPUSH
58351: LD_VAR 0 4
58355: PPUSH
58356: CALL_OW 1
58360: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58361: LD_ADDR_VAR 0 2
58365: PUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: LD_INT 4
58373: PPUSH
58374: LD_VAR 0 2
58378: PUSH
58379: LD_INT 4
58381: ARRAY
58382: PUSH
58383: LD_VAR 0 4
58387: PLUS
58388: PPUSH
58389: CALL_OW 1
58393: ST_TO_ADDR
// end ;
58394: GO 58313
58396: POP
58397: POP
// end ;
58398: LD_VAR 0 2
58402: RET
// export function Length ( array ) ; begin
58403: LD_INT 0
58405: PPUSH
// result := array + 0 ;
58406: LD_ADDR_VAR 0 2
58410: PUSH
58411: LD_VAR 0 1
58415: PUSH
58416: LD_INT 0
58418: PLUS
58419: ST_TO_ADDR
// end ;
58420: LD_VAR 0 2
58424: RET
// export function PrepareArray ( array ) ; begin
58425: LD_INT 0
58427: PPUSH
// result := array diff 0 ;
58428: LD_ADDR_VAR 0 2
58432: PUSH
58433: LD_VAR 0 1
58437: PUSH
58438: LD_INT 0
58440: DIFF
58441: ST_TO_ADDR
// if not result [ 1 ] then
58442: LD_VAR 0 2
58446: PUSH
58447: LD_INT 1
58449: ARRAY
58450: NOT
58451: IFFALSE 58471
// result := Delete ( result , 1 ) ;
58453: LD_ADDR_VAR 0 2
58457: PUSH
58458: LD_VAR 0 2
58462: PPUSH
58463: LD_INT 1
58465: PPUSH
58466: CALL_OW 3
58470: ST_TO_ADDR
// end ;
58471: LD_VAR 0 2
58475: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58476: LD_INT 0
58478: PPUSH
58479: PPUSH
58480: PPUSH
58481: PPUSH
// sibRocketRange := 25 ;
58482: LD_ADDR_VAR 0 6
58486: PUSH
58487: LD_INT 25
58489: ST_TO_ADDR
// result := false ;
58490: LD_ADDR_VAR 0 4
58494: PUSH
58495: LD_INT 0
58497: ST_TO_ADDR
// for i := 0 to 5 do
58498: LD_ADDR_VAR 0 5
58502: PUSH
58503: DOUBLE
58504: LD_INT 0
58506: DEC
58507: ST_TO_ADDR
58508: LD_INT 5
58510: PUSH
58511: FOR_TO
58512: IFFALSE 58579
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58514: LD_VAR 0 1
58518: PPUSH
58519: LD_VAR 0 5
58523: PPUSH
58524: LD_VAR 0 6
58528: PPUSH
58529: CALL_OW 272
58533: PPUSH
58534: LD_VAR 0 2
58538: PPUSH
58539: LD_VAR 0 5
58543: PPUSH
58544: LD_VAR 0 6
58548: PPUSH
58549: CALL_OW 273
58553: PPUSH
58554: LD_VAR 0 3
58558: PPUSH
58559: CALL_OW 309
58563: IFFALSE 58577
// begin result := true ;
58565: LD_ADDR_VAR 0 4
58569: PUSH
58570: LD_INT 1
58572: ST_TO_ADDR
// exit ;
58573: POP
58574: POP
58575: GO 58581
// end ;
58577: GO 58511
58579: POP
58580: POP
// end ;
58581: LD_VAR 0 4
58585: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58586: LD_INT 0
58588: PPUSH
58589: PPUSH
58590: PPUSH
// if btype = b_depot then
58591: LD_VAR 0 2
58595: PUSH
58596: LD_INT 0
58598: EQUAL
58599: IFFALSE 58611
// begin result := true ;
58601: LD_ADDR_VAR 0 3
58605: PUSH
58606: LD_INT 1
58608: ST_TO_ADDR
// exit ;
58609: GO 58727
// end ; pom := GetBase ( depot ) ;
58611: LD_ADDR_VAR 0 4
58615: PUSH
58616: LD_VAR 0 1
58620: PPUSH
58621: CALL_OW 274
58625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58626: LD_ADDR_VAR 0 5
58630: PUSH
58631: LD_VAR 0 2
58635: PPUSH
58636: LD_VAR 0 1
58640: PPUSH
58641: CALL_OW 248
58645: PPUSH
58646: CALL_OW 450
58650: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: LD_VAR 0 4
58660: PPUSH
58661: LD_INT 1
58663: PPUSH
58664: CALL_OW 275
58668: PUSH
58669: LD_VAR 0 5
58673: PUSH
58674: LD_INT 1
58676: ARRAY
58677: GREATEREQUAL
58678: PUSH
58679: LD_VAR 0 4
58683: PPUSH
58684: LD_INT 2
58686: PPUSH
58687: CALL_OW 275
58691: PUSH
58692: LD_VAR 0 5
58696: PUSH
58697: LD_INT 2
58699: ARRAY
58700: GREATEREQUAL
58701: AND
58702: PUSH
58703: LD_VAR 0 4
58707: PPUSH
58708: LD_INT 3
58710: PPUSH
58711: CALL_OW 275
58715: PUSH
58716: LD_VAR 0 5
58720: PUSH
58721: LD_INT 3
58723: ARRAY
58724: GREATEREQUAL
58725: AND
58726: ST_TO_ADDR
// end ;
58727: LD_VAR 0 3
58731: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58732: LD_INT 0
58734: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58735: LD_VAR 0 1
58739: PPUSH
58740: LD_VAR 0 2
58744: PPUSH
58745: LD_INT 0
58747: PPUSH
58748: LD_INT 0
58750: PPUSH
58751: LD_INT 1
58753: PPUSH
58754: LD_INT 0
58756: PPUSH
58757: CALL_OW 587
// end ;
58761: LD_VAR 0 3
58765: RET
// export function CenterOnNow ( unit ) ; begin
58766: LD_INT 0
58768: PPUSH
// result := IsInUnit ( unit ) ;
58769: LD_ADDR_VAR 0 2
58773: PUSH
58774: LD_VAR 0 1
58778: PPUSH
58779: CALL_OW 310
58783: ST_TO_ADDR
// if not result then
58784: LD_VAR 0 2
58788: NOT
58789: IFFALSE 58801
// result := unit ;
58791: LD_ADDR_VAR 0 2
58795: PUSH
58796: LD_VAR 0 1
58800: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58801: LD_VAR 0 1
58805: PPUSH
58806: CALL_OW 87
// end ;
58810: LD_VAR 0 2
58814: RET
// export function ComMoveHex ( unit , hex ) ; begin
58815: LD_INT 0
58817: PPUSH
// if not hex then
58818: LD_VAR 0 2
58822: NOT
58823: IFFALSE 58827
// exit ;
58825: GO 58880
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58827: LD_VAR 0 2
58831: PUSH
58832: LD_INT 1
58834: ARRAY
58835: PPUSH
58836: LD_VAR 0 2
58840: PUSH
58841: LD_INT 2
58843: ARRAY
58844: PPUSH
58845: CALL_OW 428
58849: IFFALSE 58853
// exit ;
58851: GO 58880
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58853: LD_VAR 0 1
58857: PPUSH
58858: LD_VAR 0 2
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PPUSH
58867: LD_VAR 0 2
58871: PUSH
58872: LD_INT 2
58874: ARRAY
58875: PPUSH
58876: CALL_OW 111
// end ;
58880: LD_VAR 0 3
58884: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58885: LD_INT 0
58887: PPUSH
58888: PPUSH
58889: PPUSH
// if not unit or not enemy then
58890: LD_VAR 0 1
58894: NOT
58895: PUSH
58896: LD_VAR 0 2
58900: NOT
58901: OR
58902: IFFALSE 58906
// exit ;
58904: GO 59030
// x := GetX ( enemy ) ;
58906: LD_ADDR_VAR 0 4
58910: PUSH
58911: LD_VAR 0 2
58915: PPUSH
58916: CALL_OW 250
58920: ST_TO_ADDR
// y := GetY ( enemy ) ;
58921: LD_ADDR_VAR 0 5
58925: PUSH
58926: LD_VAR 0 2
58930: PPUSH
58931: CALL_OW 251
58935: ST_TO_ADDR
// if ValidHex ( x , y ) then
58936: LD_VAR 0 4
58940: PPUSH
58941: LD_VAR 0 5
58945: PPUSH
58946: CALL_OW 488
58950: IFFALSE 59030
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58952: LD_VAR 0 2
58956: PPUSH
58957: CALL_OW 247
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: LD_INT 2
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: IN
58972: PUSH
58973: LD_VAR 0 1
58977: PPUSH
58978: CALL_OW 255
58982: PPUSH
58983: LD_VAR 0 2
58987: PPUSH
58988: CALL_OW 292
58992: OR
58993: IFFALSE 59011
// ComAttackUnit ( unit , enemy ) else
58995: LD_VAR 0 1
58999: PPUSH
59000: LD_VAR 0 2
59004: PPUSH
59005: CALL_OW 115
59009: GO 59030
// ComAgressiveMove ( unit , x , y ) ;
59011: LD_VAR 0 1
59015: PPUSH
59016: LD_VAR 0 4
59020: PPUSH
59021: LD_VAR 0 5
59025: PPUSH
59026: CALL_OW 114
// end ;
59030: LD_VAR 0 3
59034: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59035: LD_INT 0
59037: PPUSH
59038: PPUSH
59039: PPUSH
// list := AreaToList ( area , 0 ) ;
59040: LD_ADDR_VAR 0 5
59044: PUSH
59045: LD_VAR 0 1
59049: PPUSH
59050: LD_INT 0
59052: PPUSH
59053: CALL_OW 517
59057: ST_TO_ADDR
// if not list then
59058: LD_VAR 0 5
59062: NOT
59063: IFFALSE 59067
// exit ;
59065: GO 59197
// if all then
59067: LD_VAR 0 2
59071: IFFALSE 59159
// begin for i := 1 to list [ 1 ] do
59073: LD_ADDR_VAR 0 4
59077: PUSH
59078: DOUBLE
59079: LD_INT 1
59081: DEC
59082: ST_TO_ADDR
59083: LD_VAR 0 5
59087: PUSH
59088: LD_INT 1
59090: ARRAY
59091: PUSH
59092: FOR_TO
59093: IFFALSE 59155
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59095: LD_ADDR_VAR 0 3
59099: PUSH
59100: LD_VAR 0 3
59104: PPUSH
59105: LD_VAR 0 3
59109: PUSH
59110: LD_INT 1
59112: PLUS
59113: PPUSH
59114: LD_VAR 0 5
59118: PUSH
59119: LD_INT 1
59121: ARRAY
59122: PUSH
59123: LD_VAR 0 4
59127: ARRAY
59128: PUSH
59129: LD_VAR 0 5
59133: PUSH
59134: LD_INT 2
59136: ARRAY
59137: PUSH
59138: LD_VAR 0 4
59142: ARRAY
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PPUSH
59148: CALL_OW 1
59152: ST_TO_ADDR
59153: GO 59092
59155: POP
59156: POP
// exit ;
59157: GO 59197
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59159: LD_ADDR_VAR 0 3
59163: PUSH
59164: LD_VAR 0 5
59168: PUSH
59169: LD_INT 1
59171: ARRAY
59172: PUSH
59173: LD_INT 1
59175: ARRAY
59176: PUSH
59177: LD_VAR 0 5
59181: PUSH
59182: LD_INT 2
59184: ARRAY
59185: PUSH
59186: LD_INT 1
59188: ARRAY
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: ST_TO_ADDR
// end ;
59197: LD_VAR 0 3
59201: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59202: LD_INT 0
59204: PPUSH
59205: PPUSH
// list := AreaToList ( area , 0 ) ;
59206: LD_ADDR_VAR 0 4
59210: PUSH
59211: LD_VAR 0 1
59215: PPUSH
59216: LD_INT 0
59218: PPUSH
59219: CALL_OW 517
59223: ST_TO_ADDR
// if not list then
59224: LD_VAR 0 4
59228: NOT
59229: IFFALSE 59233
// exit ;
59231: GO 59274
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59233: LD_ADDR_VAR 0 3
59237: PUSH
59238: LD_VAR 0 4
59242: PUSH
59243: LD_INT 1
59245: ARRAY
59246: PUSH
59247: LD_INT 1
59249: ARRAY
59250: PUSH
59251: LD_VAR 0 4
59255: PUSH
59256: LD_INT 2
59258: ARRAY
59259: PUSH
59260: LD_INT 1
59262: ARRAY
59263: PUSH
59264: LD_VAR 0 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: LIST
59273: ST_TO_ADDR
// end ;
59274: LD_VAR 0 3
59278: RET
// export function First ( array ) ; begin
59279: LD_INT 0
59281: PPUSH
// if not array then
59282: LD_VAR 0 1
59286: NOT
59287: IFFALSE 59291
// exit ;
59289: GO 59305
// result := array [ 1 ] ;
59291: LD_ADDR_VAR 0 2
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_INT 1
59303: ARRAY
59304: ST_TO_ADDR
// end ;
59305: LD_VAR 0 2
59309: RET
// export function Last ( array ) ; begin
59310: LD_INT 0
59312: PPUSH
// if not array then
59313: LD_VAR 0 1
59317: NOT
59318: IFFALSE 59322
// exit ;
59320: GO 59338
// result := array [ array ] ;
59322: LD_ADDR_VAR 0 2
59326: PUSH
59327: LD_VAR 0 1
59331: PUSH
59332: LD_VAR 0 1
59336: ARRAY
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 2
59342: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
// result := [ ] ;
59347: LD_ADDR_VAR 0 5
59351: PUSH
59352: EMPTY
59353: ST_TO_ADDR
// if not array then
59354: LD_VAR 0 1
59358: NOT
59359: IFFALSE 59363
// exit ;
59361: GO 59475
// for i := 1 to array do
59363: LD_ADDR_VAR 0 6
59367: PUSH
59368: DOUBLE
59369: LD_INT 1
59371: DEC
59372: ST_TO_ADDR
59373: LD_VAR 0 1
59377: PUSH
59378: FOR_TO
59379: IFFALSE 59473
// if array [ i ] [ index ] = value then
59381: LD_VAR 0 1
59385: PUSH
59386: LD_VAR 0 6
59390: ARRAY
59391: PUSH
59392: LD_VAR 0 2
59396: ARRAY
59397: PUSH
59398: LD_VAR 0 3
59402: EQUAL
59403: IFFALSE 59471
// begin if indexColumn then
59405: LD_VAR 0 4
59409: IFFALSE 59445
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59411: LD_ADDR_VAR 0 5
59415: PUSH
59416: LD_VAR 0 5
59420: PPUSH
59421: LD_VAR 0 1
59425: PUSH
59426: LD_VAR 0 6
59430: ARRAY
59431: PUSH
59432: LD_VAR 0 4
59436: ARRAY
59437: PPUSH
59438: CALL 54663 0 2
59442: ST_TO_ADDR
59443: GO 59471
// result := Join ( result , array [ i ] ) ;
59445: LD_ADDR_VAR 0 5
59449: PUSH
59450: LD_VAR 0 5
59454: PPUSH
59455: LD_VAR 0 1
59459: PUSH
59460: LD_VAR 0 6
59464: ARRAY
59465: PPUSH
59466: CALL 54663 0 2
59470: ST_TO_ADDR
// end ;
59471: GO 59378
59473: POP
59474: POP
// end ;
59475: LD_VAR 0 5
59479: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59480: LD_INT 0
59482: PPUSH
// if not vehicles or not parkingPoint then
59483: LD_VAR 0 1
59487: NOT
59488: PUSH
59489: LD_VAR 0 2
59493: NOT
59494: OR
59495: IFFALSE 59499
// exit ;
59497: GO 59597
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59499: LD_ADDR_VAR 0 1
59503: PUSH
59504: LD_VAR 0 1
59508: PPUSH
59509: LD_INT 50
59511: PUSH
59512: EMPTY
59513: LIST
59514: PUSH
59515: LD_INT 3
59517: PUSH
59518: LD_INT 92
59520: PUSH
59521: LD_VAR 0 2
59525: PUSH
59526: LD_INT 1
59528: ARRAY
59529: PUSH
59530: LD_VAR 0 2
59534: PUSH
59535: LD_INT 2
59537: ARRAY
59538: PUSH
59539: LD_INT 8
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PPUSH
59556: CALL_OW 72
59560: ST_TO_ADDR
// if not vehicles then
59561: LD_VAR 0 1
59565: NOT
59566: IFFALSE 59570
// exit ;
59568: GO 59597
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59570: LD_VAR 0 1
59574: PPUSH
59575: LD_VAR 0 2
59579: PUSH
59580: LD_INT 1
59582: ARRAY
59583: PPUSH
59584: LD_VAR 0 2
59588: PUSH
59589: LD_INT 2
59591: ARRAY
59592: PPUSH
59593: CALL_OW 111
// end ;
59597: LD_VAR 0 3
59601: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59602: LD_INT 0
59604: PPUSH
59605: PPUSH
59606: PPUSH
// if not side or not area then
59607: LD_VAR 0 1
59611: NOT
59612: PUSH
59613: LD_VAR 0 2
59617: NOT
59618: OR
59619: IFFALSE 59623
// exit ;
59621: GO 59742
// tmp := AreaToList ( area , 0 ) ;
59623: LD_ADDR_VAR 0 5
59627: PUSH
59628: LD_VAR 0 2
59632: PPUSH
59633: LD_INT 0
59635: PPUSH
59636: CALL_OW 517
59640: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59641: LD_ADDR_VAR 0 4
59645: PUSH
59646: DOUBLE
59647: LD_INT 1
59649: DEC
59650: ST_TO_ADDR
59651: LD_VAR 0 5
59655: PUSH
59656: LD_INT 1
59658: ARRAY
59659: PUSH
59660: FOR_TO
59661: IFFALSE 59740
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59663: LD_VAR 0 5
59667: PUSH
59668: LD_INT 1
59670: ARRAY
59671: PUSH
59672: LD_VAR 0 4
59676: ARRAY
59677: PPUSH
59678: LD_VAR 0 5
59682: PUSH
59683: LD_INT 2
59685: ARRAY
59686: PUSH
59687: LD_VAR 0 4
59691: ARRAY
59692: PPUSH
59693: CALL_OW 351
59697: IFFALSE 59738
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59699: LD_VAR 0 5
59703: PUSH
59704: LD_INT 1
59706: ARRAY
59707: PUSH
59708: LD_VAR 0 4
59712: ARRAY
59713: PPUSH
59714: LD_VAR 0 5
59718: PUSH
59719: LD_INT 2
59721: ARRAY
59722: PUSH
59723: LD_VAR 0 4
59727: ARRAY
59728: PPUSH
59729: LD_VAR 0 1
59733: PPUSH
59734: CALL_OW 244
// end ;
59738: GO 59660
59740: POP
59741: POP
// end ; end_of_file
59742: LD_VAR 0 3
59746: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59747: LD_INT 0
59749: PPUSH
// ComRadiation ( un ) ;
59750: LD_VAR 0 1
59754: PPUSH
59755: CALL 60736 0 1
// end ;
59759: LD_VAR 0 2
59763: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59764: LD_INT 0
59766: PPUSH
// ComRadiation ( un ) ;
59767: LD_VAR 0 1
59771: PPUSH
59772: CALL 60736 0 1
// end ;
59776: LD_VAR 0 2
59780: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59781: LD_INT 0
59783: PPUSH
// end ;
59784: LD_VAR 0 4
59788: RET
// export function SOS_Command ( cmd ) ; begin
59789: LD_INT 0
59791: PPUSH
// end ;
59792: LD_VAR 0 2
59796: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59797: LD_INT 0
59799: PPUSH
// end ;
59800: LD_VAR 0 6
59804: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
59805: LD_INT 0
59807: PPUSH
59808: PPUSH
59809: PPUSH
59810: PPUSH
59811: PPUSH
// if not vehicle or not factory then
59812: LD_VAR 0 1
59816: NOT
59817: PUSH
59818: LD_VAR 0 2
59822: NOT
59823: OR
59824: IFFALSE 59828
// exit ;
59826: GO 60327
// if not factoryWaypoints then
59828: LD_EXP 62
59832: NOT
59833: IFFALSE 59837
// exit ;
59835: GO 60327
// for i := 1 to Count ( factoryWaypoints ) do
59837: LD_ADDR_VAR 0 4
59841: PUSH
59842: DOUBLE
59843: LD_INT 1
59845: DEC
59846: ST_TO_ADDR
59847: LD_EXP 62
59851: PPUSH
59852: CALL 19054 0 1
59856: PUSH
59857: FOR_TO
59858: IFFALSE 60325
// if factoryWaypoints [ i ] [ 2 ] = factory then
59860: LD_EXP 62
59864: PUSH
59865: LD_VAR 0 4
59869: ARRAY
59870: PUSH
59871: LD_INT 2
59873: ARRAY
59874: PUSH
59875: LD_VAR 0 2
59879: EQUAL
59880: IFFALSE 60323
// begin if GetControl ( vehicle ) = control_manual then
59882: LD_VAR 0 1
59886: PPUSH
59887: CALL_OW 263
59891: PUSH
59892: LD_INT 1
59894: EQUAL
59895: IFFALSE 60206
// begin driver := IsDrivenBy ( vehicle ) ;
59897: LD_ADDR_VAR 0 6
59901: PUSH
59902: LD_VAR 0 1
59906: PPUSH
59907: CALL_OW 311
59911: ST_TO_ADDR
// tag := GetTag ( driver ) ;
59912: LD_ADDR_VAR 0 5
59916: PUSH
59917: LD_VAR 0 6
59921: PPUSH
59922: CALL_OW 110
59926: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
59927: LD_VAR 0 5
59931: PUSH
59932: LD_INT 501
59934: EQUAL
59935: PUSH
59936: LD_VAR 0 1
59940: PPUSH
59941: CALL_OW 110
59945: PUSH
59946: LD_INT 501
59948: EQUAL
59949: OR
59950: IFFALSE 59956
// exit ;
59952: POP
59953: POP
59954: GO 60327
// if not HasTask ( driver ) then
59956: LD_VAR 0 6
59960: PPUSH
59961: CALL_OW 314
59965: NOT
59966: IFFALSE 60204
// begin SetTag ( driver , tDriver ) ;
59968: LD_VAR 0 6
59972: PPUSH
59973: LD_INT 501
59975: PPUSH
59976: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
59980: LD_VAR 0 1
59984: PPUSH
59985: LD_INT 501
59987: PPUSH
59988: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59992: LD_ADDR_VAR 0 7
59996: PUSH
59997: LD_EXP 62
60001: PUSH
60002: LD_VAR 0 4
60006: ARRAY
60007: PUSH
60008: LD_INT 3
60010: ARRAY
60011: PPUSH
60012: LD_EXP 62
60016: PUSH
60017: LD_VAR 0 4
60021: ARRAY
60022: PUSH
60023: LD_INT 4
60025: ARRAY
60026: PPUSH
60027: CALL_OW 428
60031: ST_TO_ADDR
// if hex then
60032: LD_VAR 0 7
60036: IFFALSE 60054
// ComMoveUnit ( driver , hex ) else
60038: LD_VAR 0 6
60042: PPUSH
60043: LD_VAR 0 7
60047: PPUSH
60048: CALL_OW 112
60052: GO 60093
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60054: LD_VAR 0 6
60058: PPUSH
60059: LD_EXP 62
60063: PUSH
60064: LD_VAR 0 4
60068: ARRAY
60069: PUSH
60070: LD_INT 3
60072: ARRAY
60073: PPUSH
60074: LD_EXP 62
60078: PUSH
60079: LD_VAR 0 4
60083: ARRAY
60084: PUSH
60085: LD_INT 4
60087: ARRAY
60088: PPUSH
60089: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60093: LD_VAR 0 6
60097: PPUSH
60098: CALL_OW 181
// if Multiplayer then
60102: LD_OWVAR 4
60106: IFFALSE 60155
// begin repeat wait ( 10 ) ;
60108: LD_INT 10
60110: PPUSH
60111: CALL_OW 67
// until not IsInUnit ( driver ) ;
60115: LD_VAR 0 6
60119: PPUSH
60120: CALL_OW 310
60124: NOT
60125: IFFALSE 60108
// if not HasTask ( driver ) then
60127: LD_VAR 0 6
60131: PPUSH
60132: CALL_OW 314
60136: NOT
60137: IFFALSE 60153
// ComEnterUnit ( driver , factory ) ;
60139: LD_VAR 0 6
60143: PPUSH
60144: LD_VAR 0 2
60148: PPUSH
60149: CALL_OW 120
// end else
60153: GO 60169
// AddComEnterUnit ( driver , factory ) ;
60155: LD_VAR 0 6
60159: PPUSH
60160: LD_VAR 0 2
60164: PPUSH
60165: CALL_OW 180
// wait ( 0 0$1 ) ;
60169: LD_INT 35
60171: PPUSH
60172: CALL_OW 67
// SetTag ( driver , tag ) ;
60176: LD_VAR 0 6
60180: PPUSH
60181: LD_VAR 0 5
60185: PPUSH
60186: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: LD_INT 0
60197: PPUSH
60198: CALL_OW 109
// break ;
60202: GO 60325
// end ; end else
60204: GO 60323
// if GetControl ( vehicle ) = control_remote then
60206: LD_VAR 0 1
60210: PPUSH
60211: CALL_OW 263
60215: PUSH
60216: LD_INT 2
60218: EQUAL
60219: IFFALSE 60282
// begin wait ( 0 0$2 ) ;
60221: LD_INT 70
60223: PPUSH
60224: CALL_OW 67
// if Connect ( vehicle ) then
60228: LD_VAR 0 1
60232: PPUSH
60233: CALL 25260 0 1
60237: IFFALSE 60278
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60239: LD_VAR 0 1
60243: PPUSH
60244: LD_EXP 62
60248: PUSH
60249: LD_VAR 0 4
60253: ARRAY
60254: PUSH
60255: LD_INT 3
60257: ARRAY
60258: PPUSH
60259: LD_EXP 62
60263: PUSH
60264: LD_VAR 0 4
60268: ARRAY
60269: PUSH
60270: LD_INT 4
60272: ARRAY
60273: PPUSH
60274: CALL_OW 171
// break ;
60278: GO 60325
// end else
60280: GO 60323
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60282: LD_VAR 0 1
60286: PPUSH
60287: LD_EXP 62
60291: PUSH
60292: LD_VAR 0 4
60296: ARRAY
60297: PUSH
60298: LD_INT 3
60300: ARRAY
60301: PPUSH
60302: LD_EXP 62
60306: PUSH
60307: LD_VAR 0 4
60311: ARRAY
60312: PUSH
60313: LD_INT 4
60315: ARRAY
60316: PPUSH
60317: CALL_OW 171
// break ;
60321: GO 60325
// end ; end ;
60323: GO 59857
60325: POP
60326: POP
// end ;
60327: LD_VAR 0 3
60331: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60332: LD_INT 0
60334: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60335: LD_VAR 0 1
60339: PUSH
60340: LD_INT 250
60342: EQUAL
60343: PUSH
60344: LD_VAR 0 2
60348: PPUSH
60349: CALL_OW 264
60353: PUSH
60354: LD_INT 81
60356: EQUAL
60357: AND
60358: IFFALSE 60379
// MinerPlaceMine ( unit , x , y ) ;
60360: LD_VAR 0 2
60364: PPUSH
60365: LD_VAR 0 4
60369: PPUSH
60370: LD_VAR 0 5
60374: PPUSH
60375: CALL 63471 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60379: LD_VAR 0 1
60383: PUSH
60384: LD_INT 251
60386: EQUAL
60387: PUSH
60388: LD_VAR 0 2
60392: PPUSH
60393: CALL_OW 264
60397: PUSH
60398: LD_INT 81
60400: EQUAL
60401: AND
60402: IFFALSE 60423
// MinerDetonateMine ( unit , x , y ) ;
60404: LD_VAR 0 2
60408: PPUSH
60409: LD_VAR 0 4
60413: PPUSH
60414: LD_VAR 0 5
60418: PPUSH
60419: CALL 63746 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60423: LD_VAR 0 1
60427: PUSH
60428: LD_INT 252
60430: EQUAL
60431: PUSH
60432: LD_VAR 0 2
60436: PPUSH
60437: CALL_OW 264
60441: PUSH
60442: LD_INT 81
60444: EQUAL
60445: AND
60446: IFFALSE 60467
// MinerCreateMinefield ( unit , x , y ) ;
60448: LD_VAR 0 2
60452: PPUSH
60453: LD_VAR 0 4
60457: PPUSH
60458: LD_VAR 0 5
60462: PPUSH
60463: CALL 64163 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60467: LD_VAR 0 1
60471: PUSH
60472: LD_INT 253
60474: EQUAL
60475: PUSH
60476: LD_VAR 0 2
60480: PPUSH
60481: CALL_OW 257
60485: PUSH
60486: LD_INT 5
60488: EQUAL
60489: AND
60490: IFFALSE 60511
// ComBinocular ( unit , x , y ) ;
60492: LD_VAR 0 2
60496: PPUSH
60497: LD_VAR 0 4
60501: PPUSH
60502: LD_VAR 0 5
60506: PPUSH
60507: CALL 64532 0 3
// if selectedUnit then
60511: LD_VAR 0 3
60515: IFFALSE 60571
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60517: LD_VAR 0 1
60521: PUSH
60522: LD_INT 254
60524: EQUAL
60525: PUSH
60526: LD_VAR 0 2
60530: PPUSH
60531: CALL_OW 264
60535: PUSH
60536: LD_INT 99
60538: EQUAL
60539: AND
60540: PUSH
60541: LD_VAR 0 3
60545: PPUSH
60546: CALL_OW 263
60550: PUSH
60551: LD_INT 3
60553: EQUAL
60554: AND
60555: IFFALSE 60571
// HackDestroyVehicle ( unit , selectedUnit ) ;
60557: LD_VAR 0 2
60561: PPUSH
60562: LD_VAR 0 3
60566: PPUSH
60567: CALL 62835 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60571: LD_VAR 0 1
60575: PUSH
60576: LD_INT 255
60578: EQUAL
60579: PUSH
60580: LD_VAR 0 2
60584: PPUSH
60585: CALL_OW 264
60589: PUSH
60590: LD_INT 14
60592: PUSH
60593: LD_INT 53
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: IN
60600: AND
60601: PUSH
60602: LD_VAR 0 4
60606: PPUSH
60607: LD_VAR 0 5
60611: PPUSH
60612: CALL_OW 488
60616: AND
60617: IFFALSE 60641
// CutTreeXYR ( unit , x , y , 12 ) ;
60619: LD_VAR 0 2
60623: PPUSH
60624: LD_VAR 0 4
60628: PPUSH
60629: LD_VAR 0 5
60633: PPUSH
60634: LD_INT 12
60636: PPUSH
60637: CALL 60832 0 4
// if cmd = 256 then
60641: LD_VAR 0 1
60645: PUSH
60646: LD_INT 256
60648: EQUAL
60649: IFFALSE 60670
// SetFactoryWaypoint ( unit , x , y ) ;
60651: LD_VAR 0 2
60655: PPUSH
60656: LD_VAR 0 4
60660: PPUSH
60661: LD_VAR 0 5
60665: PPUSH
60666: CALL 65250 0 3
// if cmd = 257 then
60670: LD_VAR 0 1
60674: PUSH
60675: LD_INT 257
60677: EQUAL
60678: IFFALSE 60699
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60680: LD_VAR 0 2
60684: PPUSH
60685: LD_VAR 0 4
60689: PPUSH
60690: LD_VAR 0 5
60694: PPUSH
60695: CALL 65740 0 3
// if cmd = 258 then
60699: LD_VAR 0 1
60703: PUSH
60704: LD_INT 258
60706: EQUAL
60707: IFFALSE 60731
// BurnTreeXYR ( unit , x , y , 8 ) ;
60709: LD_VAR 0 2
60713: PPUSH
60714: LD_VAR 0 4
60718: PPUSH
60719: LD_VAR 0 5
60723: PPUSH
60724: LD_INT 8
60726: PPUSH
60727: CALL 61226 0 4
// end ;
60731: LD_VAR 0 6
60735: RET
// export function ComRadiation ( un ) ; var eff ; begin
60736: LD_INT 0
60738: PPUSH
60739: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60740: LD_VAR 0 1
60744: PPUSH
60745: CALL_OW 264
60749: PUSH
60750: LD_INT 91
60752: NONEQUAL
60753: IFFALSE 60757
// exit ;
60755: GO 60827
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60757: LD_INT 68
60759: PPUSH
60760: LD_VAR 0 1
60764: PPUSH
60765: CALL_OW 255
60769: PPUSH
60770: CALL_OW 321
60774: PUSH
60775: LD_INT 2
60777: EQUAL
60778: IFFALSE 60790
// eff := 70 else
60780: LD_ADDR_VAR 0 3
60784: PUSH
60785: LD_INT 70
60787: ST_TO_ADDR
60788: GO 60798
// eff := 30 ;
60790: LD_ADDR_VAR 0 3
60794: PUSH
60795: LD_INT 30
60797: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 250
60807: PPUSH
60808: LD_VAR 0 1
60812: PPUSH
60813: CALL_OW 251
60817: PPUSH
60818: LD_VAR 0 3
60822: PPUSH
60823: CALL_OW 495
// end ;
60827: LD_VAR 0 2
60831: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60832: LD_INT 0
60834: PPUSH
60835: PPUSH
60836: PPUSH
60837: PPUSH
60838: PPUSH
60839: PPUSH
60840: PPUSH
60841: PPUSH
60842: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60843: LD_VAR 0 1
60847: PPUSH
60848: CALL_OW 302
60852: NOT
60853: PUSH
60854: LD_VAR 0 2
60858: PPUSH
60859: LD_VAR 0 3
60863: PPUSH
60864: CALL_OW 488
60868: NOT
60869: OR
60870: PUSH
60871: LD_VAR 0 4
60875: NOT
60876: OR
60877: IFFALSE 60881
// exit ;
60879: GO 61221
// list := [ ] ;
60881: LD_ADDR_VAR 0 13
60885: PUSH
60886: EMPTY
60887: ST_TO_ADDR
// if x - r < 0 then
60888: LD_VAR 0 2
60892: PUSH
60893: LD_VAR 0 4
60897: MINUS
60898: PUSH
60899: LD_INT 0
60901: LESS
60902: IFFALSE 60914
// min_x := 0 else
60904: LD_ADDR_VAR 0 7
60908: PUSH
60909: LD_INT 0
60911: ST_TO_ADDR
60912: GO 60930
// min_x := x - r ;
60914: LD_ADDR_VAR 0 7
60918: PUSH
60919: LD_VAR 0 2
60923: PUSH
60924: LD_VAR 0 4
60928: MINUS
60929: ST_TO_ADDR
// if y - r < 0 then
60930: LD_VAR 0 3
60934: PUSH
60935: LD_VAR 0 4
60939: MINUS
60940: PUSH
60941: LD_INT 0
60943: LESS
60944: IFFALSE 60956
// min_y := 0 else
60946: LD_ADDR_VAR 0 8
60950: PUSH
60951: LD_INT 0
60953: ST_TO_ADDR
60954: GO 60972
// min_y := y - r ;
60956: LD_ADDR_VAR 0 8
60960: PUSH
60961: LD_VAR 0 3
60965: PUSH
60966: LD_VAR 0 4
60970: MINUS
60971: ST_TO_ADDR
// max_x := x + r ;
60972: LD_ADDR_VAR 0 9
60976: PUSH
60977: LD_VAR 0 2
60981: PUSH
60982: LD_VAR 0 4
60986: PLUS
60987: ST_TO_ADDR
// max_y := y + r ;
60988: LD_ADDR_VAR 0 10
60992: PUSH
60993: LD_VAR 0 3
60997: PUSH
60998: LD_VAR 0 4
61002: PLUS
61003: ST_TO_ADDR
// for _x = min_x to max_x do
61004: LD_ADDR_VAR 0 11
61008: PUSH
61009: DOUBLE
61010: LD_VAR 0 7
61014: DEC
61015: ST_TO_ADDR
61016: LD_VAR 0 9
61020: PUSH
61021: FOR_TO
61022: IFFALSE 61139
// for _y = min_y to max_y do
61024: LD_ADDR_VAR 0 12
61028: PUSH
61029: DOUBLE
61030: LD_VAR 0 8
61034: DEC
61035: ST_TO_ADDR
61036: LD_VAR 0 10
61040: PUSH
61041: FOR_TO
61042: IFFALSE 61135
// begin if not ValidHex ( _x , _y ) then
61044: LD_VAR 0 11
61048: PPUSH
61049: LD_VAR 0 12
61053: PPUSH
61054: CALL_OW 488
61058: NOT
61059: IFFALSE 61063
// continue ;
61061: GO 61041
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61063: LD_VAR 0 11
61067: PPUSH
61068: LD_VAR 0 12
61072: PPUSH
61073: CALL_OW 351
61077: PUSH
61078: LD_VAR 0 11
61082: PPUSH
61083: LD_VAR 0 12
61087: PPUSH
61088: CALL_OW 554
61092: AND
61093: IFFALSE 61133
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61095: LD_ADDR_VAR 0 13
61099: PUSH
61100: LD_VAR 0 13
61104: PPUSH
61105: LD_VAR 0 13
61109: PUSH
61110: LD_INT 1
61112: PLUS
61113: PPUSH
61114: LD_VAR 0 11
61118: PUSH
61119: LD_VAR 0 12
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PPUSH
61128: CALL_OW 2
61132: ST_TO_ADDR
// end ;
61133: GO 61041
61135: POP
61136: POP
61137: GO 61021
61139: POP
61140: POP
// if not list then
61141: LD_VAR 0 13
61145: NOT
61146: IFFALSE 61150
// exit ;
61148: GO 61221
// for i in list do
61150: LD_ADDR_VAR 0 6
61154: PUSH
61155: LD_VAR 0 13
61159: PUSH
61160: FOR_IN
61161: IFFALSE 61219
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61163: LD_VAR 0 1
61167: PPUSH
61168: LD_STRING M
61170: PUSH
61171: LD_VAR 0 6
61175: PUSH
61176: LD_INT 1
61178: ARRAY
61179: PUSH
61180: LD_VAR 0 6
61184: PUSH
61185: LD_INT 2
61187: ARRAY
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 0
61197: PUSH
61198: LD_INT 0
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: PPUSH
61213: CALL_OW 447
61217: GO 61160
61219: POP
61220: POP
// end ;
61221: LD_VAR 0 5
61225: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61226: LD_INT 0
61228: PPUSH
61229: PPUSH
61230: PPUSH
61231: PPUSH
61232: PPUSH
61233: PPUSH
61234: PPUSH
61235: PPUSH
61236: PPUSH
61237: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61238: LD_VAR 0 1
61242: PPUSH
61243: CALL_OW 302
61247: NOT
61248: PUSH
61249: LD_VAR 0 2
61253: PPUSH
61254: LD_VAR 0 3
61258: PPUSH
61259: CALL_OW 488
61263: NOT
61264: OR
61265: PUSH
61266: LD_VAR 0 4
61270: NOT
61271: OR
61272: IFFALSE 61276
// exit ;
61274: GO 61789
// list := [ ] ;
61276: LD_ADDR_VAR 0 13
61280: PUSH
61281: EMPTY
61282: ST_TO_ADDR
// if x - r < 0 then
61283: LD_VAR 0 2
61287: PUSH
61288: LD_VAR 0 4
61292: MINUS
61293: PUSH
61294: LD_INT 0
61296: LESS
61297: IFFALSE 61309
// min_x := 0 else
61299: LD_ADDR_VAR 0 7
61303: PUSH
61304: LD_INT 0
61306: ST_TO_ADDR
61307: GO 61325
// min_x := x - r ;
61309: LD_ADDR_VAR 0 7
61313: PUSH
61314: LD_VAR 0 2
61318: PUSH
61319: LD_VAR 0 4
61323: MINUS
61324: ST_TO_ADDR
// if y - r < 0 then
61325: LD_VAR 0 3
61329: PUSH
61330: LD_VAR 0 4
61334: MINUS
61335: PUSH
61336: LD_INT 0
61338: LESS
61339: IFFALSE 61351
// min_y := 0 else
61341: LD_ADDR_VAR 0 8
61345: PUSH
61346: LD_INT 0
61348: ST_TO_ADDR
61349: GO 61367
// min_y := y - r ;
61351: LD_ADDR_VAR 0 8
61355: PUSH
61356: LD_VAR 0 3
61360: PUSH
61361: LD_VAR 0 4
61365: MINUS
61366: ST_TO_ADDR
// max_x := x + r ;
61367: LD_ADDR_VAR 0 9
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: LD_VAR 0 4
61381: PLUS
61382: ST_TO_ADDR
// max_y := y + r ;
61383: LD_ADDR_VAR 0 10
61387: PUSH
61388: LD_VAR 0 3
61392: PUSH
61393: LD_VAR 0 4
61397: PLUS
61398: ST_TO_ADDR
// for _x = min_x to max_x do
61399: LD_ADDR_VAR 0 11
61403: PUSH
61404: DOUBLE
61405: LD_VAR 0 7
61409: DEC
61410: ST_TO_ADDR
61411: LD_VAR 0 9
61415: PUSH
61416: FOR_TO
61417: IFFALSE 61534
// for _y = min_y to max_y do
61419: LD_ADDR_VAR 0 12
61423: PUSH
61424: DOUBLE
61425: LD_VAR 0 8
61429: DEC
61430: ST_TO_ADDR
61431: LD_VAR 0 10
61435: PUSH
61436: FOR_TO
61437: IFFALSE 61530
// begin if not ValidHex ( _x , _y ) then
61439: LD_VAR 0 11
61443: PPUSH
61444: LD_VAR 0 12
61448: PPUSH
61449: CALL_OW 488
61453: NOT
61454: IFFALSE 61458
// continue ;
61456: GO 61436
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61458: LD_VAR 0 11
61462: PPUSH
61463: LD_VAR 0 12
61467: PPUSH
61468: CALL_OW 351
61472: PUSH
61473: LD_VAR 0 11
61477: PPUSH
61478: LD_VAR 0 12
61482: PPUSH
61483: CALL_OW 554
61487: AND
61488: IFFALSE 61528
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61490: LD_ADDR_VAR 0 13
61494: PUSH
61495: LD_VAR 0 13
61499: PPUSH
61500: LD_VAR 0 13
61504: PUSH
61505: LD_INT 1
61507: PLUS
61508: PPUSH
61509: LD_VAR 0 11
61513: PUSH
61514: LD_VAR 0 12
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PPUSH
61523: CALL_OW 2
61527: ST_TO_ADDR
// end ;
61528: GO 61436
61530: POP
61531: POP
61532: GO 61416
61534: POP
61535: POP
// if not list then
61536: LD_VAR 0 13
61540: NOT
61541: IFFALSE 61545
// exit ;
61543: GO 61789
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61545: LD_ADDR_VAR 0 13
61549: PUSH
61550: LD_VAR 0 1
61554: PPUSH
61555: LD_VAR 0 13
61559: PPUSH
61560: LD_INT 1
61562: PPUSH
61563: LD_INT 1
61565: PPUSH
61566: CALL 22402 0 4
61570: ST_TO_ADDR
// ComStop ( flame ) ;
61571: LD_VAR 0 1
61575: PPUSH
61576: CALL_OW 141
// for i in list do
61580: LD_ADDR_VAR 0 6
61584: PUSH
61585: LD_VAR 0 13
61589: PUSH
61590: FOR_IN
61591: IFFALSE 61622
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61593: LD_VAR 0 1
61597: PPUSH
61598: LD_VAR 0 6
61602: PUSH
61603: LD_INT 1
61605: ARRAY
61606: PPUSH
61607: LD_VAR 0 6
61611: PUSH
61612: LD_INT 2
61614: ARRAY
61615: PPUSH
61616: CALL_OW 176
61620: GO 61590
61622: POP
61623: POP
// repeat wait ( 0 0$1 ) ;
61624: LD_INT 35
61626: PPUSH
61627: CALL_OW 67
// task := GetTaskList ( flame ) ;
61631: LD_ADDR_VAR 0 14
61635: PUSH
61636: LD_VAR 0 1
61640: PPUSH
61641: CALL_OW 437
61645: ST_TO_ADDR
// if not task then
61646: LD_VAR 0 14
61650: NOT
61651: IFFALSE 61655
// exit ;
61653: GO 61789
// if task [ 1 ] [ 1 ] <> | then
61655: LD_VAR 0 14
61659: PUSH
61660: LD_INT 1
61662: ARRAY
61663: PUSH
61664: LD_INT 1
61666: ARRAY
61667: PUSH
61668: LD_STRING |
61670: NONEQUAL
61671: IFFALSE 61675
// exit ;
61673: GO 61789
// _x := task [ 1 ] [ 2 ] ;
61675: LD_ADDR_VAR 0 11
61679: PUSH
61680: LD_VAR 0 14
61684: PUSH
61685: LD_INT 1
61687: ARRAY
61688: PUSH
61689: LD_INT 2
61691: ARRAY
61692: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61693: LD_ADDR_VAR 0 12
61697: PUSH
61698: LD_VAR 0 14
61702: PUSH
61703: LD_INT 1
61705: ARRAY
61706: PUSH
61707: LD_INT 3
61709: ARRAY
61710: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61711: LD_VAR 0 11
61715: PPUSH
61716: LD_VAR 0 12
61720: PPUSH
61721: CALL_OW 351
61725: NOT
61726: PUSH
61727: LD_VAR 0 11
61731: PPUSH
61732: LD_VAR 0 12
61736: PPUSH
61737: CALL_OW 554
61741: NOT
61742: OR
61743: IFFALSE 61777
// begin task := Delete ( task , 1 ) ;
61745: LD_ADDR_VAR 0 14
61749: PUSH
61750: LD_VAR 0 14
61754: PPUSH
61755: LD_INT 1
61757: PPUSH
61758: CALL_OW 3
61762: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61763: LD_VAR 0 1
61767: PPUSH
61768: LD_VAR 0 14
61772: PPUSH
61773: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61777: LD_VAR 0 1
61781: PPUSH
61782: CALL_OW 314
61786: NOT
61787: IFFALSE 61624
// end ;
61789: LD_VAR 0 5
61793: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61794: LD_EXP 52
61798: NOT
61799: IFFALSE 61849
61801: GO 61803
61803: DISABLE
// begin initHack := true ;
61804: LD_ADDR_EXP 52
61808: PUSH
61809: LD_INT 1
61811: ST_TO_ADDR
// hackTanks := [ ] ;
61812: LD_ADDR_EXP 53
61816: PUSH
61817: EMPTY
61818: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61819: LD_ADDR_EXP 54
61823: PUSH
61824: EMPTY
61825: ST_TO_ADDR
// hackLimit := 3 ;
61826: LD_ADDR_EXP 55
61830: PUSH
61831: LD_INT 3
61833: ST_TO_ADDR
// hackDist := 12 ;
61834: LD_ADDR_EXP 56
61838: PUSH
61839: LD_INT 12
61841: ST_TO_ADDR
// hackCounter := [ ] ;
61842: LD_ADDR_EXP 57
61846: PUSH
61847: EMPTY
61848: ST_TO_ADDR
// end ;
61849: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61850: LD_EXP 52
61854: PUSH
61855: LD_INT 34
61857: PUSH
61858: LD_INT 99
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PPUSH
61865: CALL_OW 69
61869: AND
61870: IFFALSE 62123
61872: GO 61874
61874: DISABLE
61875: LD_INT 0
61877: PPUSH
61878: PPUSH
// begin enable ;
61879: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61880: LD_ADDR_VAR 0 1
61884: PUSH
61885: LD_INT 34
61887: PUSH
61888: LD_INT 99
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PPUSH
61895: CALL_OW 69
61899: PUSH
61900: FOR_IN
61901: IFFALSE 62121
// begin if not i in hackTanks then
61903: LD_VAR 0 1
61907: PUSH
61908: LD_EXP 53
61912: IN
61913: NOT
61914: IFFALSE 61997
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61916: LD_ADDR_EXP 53
61920: PUSH
61921: LD_EXP 53
61925: PPUSH
61926: LD_EXP 53
61930: PUSH
61931: LD_INT 1
61933: PLUS
61934: PPUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: CALL_OW 1
61944: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61945: LD_ADDR_EXP 54
61949: PUSH
61950: LD_EXP 54
61954: PPUSH
61955: LD_EXP 54
61959: PUSH
61960: LD_INT 1
61962: PLUS
61963: PPUSH
61964: EMPTY
61965: PPUSH
61966: CALL_OW 1
61970: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61971: LD_ADDR_EXP 57
61975: PUSH
61976: LD_EXP 57
61980: PPUSH
61981: LD_EXP 57
61985: PUSH
61986: LD_INT 1
61988: PLUS
61989: PPUSH
61990: EMPTY
61991: PPUSH
61992: CALL_OW 1
61996: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61997: LD_VAR 0 1
62001: PPUSH
62002: CALL_OW 302
62006: NOT
62007: IFFALSE 62020
// begin HackUnlinkAll ( i ) ;
62009: LD_VAR 0 1
62013: PPUSH
62014: CALL 62126 0 1
// continue ;
62018: GO 61900
// end ; HackCheckCapturedStatus ( i ) ;
62020: LD_VAR 0 1
62024: PPUSH
62025: CALL 62569 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62029: LD_ADDR_VAR 0 2
62033: PUSH
62034: LD_INT 81
62036: PUSH
62037: LD_VAR 0 1
62041: PPUSH
62042: CALL_OW 255
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 33
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 91
62063: PUSH
62064: LD_VAR 0 1
62068: PUSH
62069: LD_EXP 56
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 50
62081: PUSH
62082: EMPTY
62083: LIST
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: PPUSH
62091: CALL_OW 69
62095: ST_TO_ADDR
// if not tmp then
62096: LD_VAR 0 2
62100: NOT
62101: IFFALSE 62105
// continue ;
62103: GO 61900
// HackLink ( i , tmp ) ;
62105: LD_VAR 0 1
62109: PPUSH
62110: LD_VAR 0 2
62114: PPUSH
62115: CALL 62262 0 2
// end ;
62119: GO 61900
62121: POP
62122: POP
// end ;
62123: PPOPN 2
62125: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62126: LD_INT 0
62128: PPUSH
62129: PPUSH
62130: PPUSH
// if not hack in hackTanks then
62131: LD_VAR 0 1
62135: PUSH
62136: LD_EXP 53
62140: IN
62141: NOT
62142: IFFALSE 62146
// exit ;
62144: GO 62257
// index := GetElementIndex ( hackTanks , hack ) ;
62146: LD_ADDR_VAR 0 4
62150: PUSH
62151: LD_EXP 53
62155: PPUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: CALL 21699 0 2
62165: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62166: LD_EXP 54
62170: PUSH
62171: LD_VAR 0 4
62175: ARRAY
62176: IFFALSE 62257
// begin for i in hackTanksCaptured [ index ] do
62178: LD_ADDR_VAR 0 3
62182: PUSH
62183: LD_EXP 54
62187: PUSH
62188: LD_VAR 0 4
62192: ARRAY
62193: PUSH
62194: FOR_IN
62195: IFFALSE 62221
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62197: LD_VAR 0 3
62201: PUSH
62202: LD_INT 1
62204: ARRAY
62205: PPUSH
62206: LD_VAR 0 3
62210: PUSH
62211: LD_INT 2
62213: ARRAY
62214: PPUSH
62215: CALL_OW 235
62219: GO 62194
62221: POP
62222: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62223: LD_ADDR_EXP 54
62227: PUSH
62228: LD_EXP 54
62232: PPUSH
62233: LD_VAR 0 4
62237: PPUSH
62238: EMPTY
62239: PPUSH
62240: CALL_OW 1
62244: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62245: LD_VAR 0 1
62249: PPUSH
62250: LD_INT 0
62252: PPUSH
62253: CALL_OW 505
// end ; end ;
62257: LD_VAR 0 2
62261: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62262: LD_INT 0
62264: PPUSH
62265: PPUSH
62266: PPUSH
// if not hack in hackTanks or not vehicles then
62267: LD_VAR 0 1
62271: PUSH
62272: LD_EXP 53
62276: IN
62277: NOT
62278: PUSH
62279: LD_VAR 0 2
62283: NOT
62284: OR
62285: IFFALSE 62289
// exit ;
62287: GO 62564
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62289: LD_ADDR_VAR 0 2
62293: PUSH
62294: LD_VAR 0 1
62298: PPUSH
62299: LD_VAR 0 2
62303: PPUSH
62304: LD_INT 1
62306: PPUSH
62307: LD_INT 1
62309: PPUSH
62310: CALL 22349 0 4
62314: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62315: LD_ADDR_VAR 0 5
62319: PUSH
62320: LD_EXP 53
62324: PPUSH
62325: LD_VAR 0 1
62329: PPUSH
62330: CALL 21699 0 2
62334: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62335: LD_EXP 54
62339: PUSH
62340: LD_VAR 0 5
62344: ARRAY
62345: PUSH
62346: LD_EXP 55
62350: LESS
62351: IFFALSE 62540
// begin for i := 1 to vehicles do
62353: LD_ADDR_VAR 0 4
62357: PUSH
62358: DOUBLE
62359: LD_INT 1
62361: DEC
62362: ST_TO_ADDR
62363: LD_VAR 0 2
62367: PUSH
62368: FOR_TO
62369: IFFALSE 62538
// begin if hackTanksCaptured [ index ] = hackLimit then
62371: LD_EXP 54
62375: PUSH
62376: LD_VAR 0 5
62380: ARRAY
62381: PUSH
62382: LD_EXP 55
62386: EQUAL
62387: IFFALSE 62391
// break ;
62389: GO 62538
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62391: LD_ADDR_EXP 57
62395: PUSH
62396: LD_EXP 57
62400: PPUSH
62401: LD_VAR 0 5
62405: PPUSH
62406: LD_EXP 57
62410: PUSH
62411: LD_VAR 0 5
62415: ARRAY
62416: PUSH
62417: LD_INT 1
62419: PLUS
62420: PPUSH
62421: CALL_OW 1
62425: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62426: LD_ADDR_EXP 54
62430: PUSH
62431: LD_EXP 54
62435: PPUSH
62436: LD_VAR 0 5
62440: PUSH
62441: LD_EXP 54
62445: PUSH
62446: LD_VAR 0 5
62450: ARRAY
62451: PUSH
62452: LD_INT 1
62454: PLUS
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PPUSH
62460: LD_VAR 0 2
62464: PUSH
62465: LD_VAR 0 4
62469: ARRAY
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_VAR 0 4
62480: ARRAY
62481: PPUSH
62482: CALL_OW 255
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PPUSH
62491: CALL 21914 0 3
62495: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62496: LD_VAR 0 2
62500: PUSH
62501: LD_VAR 0 4
62505: ARRAY
62506: PPUSH
62507: LD_VAR 0 1
62511: PPUSH
62512: CALL_OW 255
62516: PPUSH
62517: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62521: LD_VAR 0 2
62525: PUSH
62526: LD_VAR 0 4
62530: ARRAY
62531: PPUSH
62532: CALL_OW 141
// end ;
62536: GO 62368
62538: POP
62539: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62540: LD_VAR 0 1
62544: PPUSH
62545: LD_EXP 54
62549: PUSH
62550: LD_VAR 0 5
62554: ARRAY
62555: PUSH
62556: LD_INT 0
62558: PLUS
62559: PPUSH
62560: CALL_OW 505
// end ;
62564: LD_VAR 0 3
62568: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62569: LD_INT 0
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
// if not hack in hackTanks then
62575: LD_VAR 0 1
62579: PUSH
62580: LD_EXP 53
62584: IN
62585: NOT
62586: IFFALSE 62590
// exit ;
62588: GO 62830
// index := GetElementIndex ( hackTanks , hack ) ;
62590: LD_ADDR_VAR 0 4
62594: PUSH
62595: LD_EXP 53
62599: PPUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: CALL 21699 0 2
62609: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62610: LD_ADDR_VAR 0 3
62614: PUSH
62615: DOUBLE
62616: LD_EXP 54
62620: PUSH
62621: LD_VAR 0 4
62625: ARRAY
62626: INC
62627: ST_TO_ADDR
62628: LD_INT 1
62630: PUSH
62631: FOR_DOWNTO
62632: IFFALSE 62804
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62634: LD_ADDR_VAR 0 5
62638: PUSH
62639: LD_EXP 54
62643: PUSH
62644: LD_VAR 0 4
62648: ARRAY
62649: PUSH
62650: LD_VAR 0 3
62654: ARRAY
62655: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62656: LD_VAR 0 5
62660: PUSH
62661: LD_INT 1
62663: ARRAY
62664: PPUSH
62665: CALL_OW 302
62669: NOT
62670: PUSH
62671: LD_VAR 0 5
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PPUSH
62680: CALL_OW 255
62684: PUSH
62685: LD_VAR 0 1
62689: PPUSH
62690: CALL_OW 255
62694: NONEQUAL
62695: OR
62696: IFFALSE 62802
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62698: LD_VAR 0 5
62702: PUSH
62703: LD_INT 1
62705: ARRAY
62706: PPUSH
62707: CALL_OW 305
62711: PUSH
62712: LD_VAR 0 5
62716: PUSH
62717: LD_INT 1
62719: ARRAY
62720: PPUSH
62721: CALL_OW 255
62725: PUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 255
62735: EQUAL
62736: AND
62737: IFFALSE 62761
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62739: LD_VAR 0 5
62743: PUSH
62744: LD_INT 1
62746: ARRAY
62747: PPUSH
62748: LD_VAR 0 5
62752: PUSH
62753: LD_INT 2
62755: ARRAY
62756: PPUSH
62757: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62761: LD_ADDR_EXP 54
62765: PUSH
62766: LD_EXP 54
62770: PPUSH
62771: LD_VAR 0 4
62775: PPUSH
62776: LD_EXP 54
62780: PUSH
62781: LD_VAR 0 4
62785: ARRAY
62786: PPUSH
62787: LD_VAR 0 3
62791: PPUSH
62792: CALL_OW 3
62796: PPUSH
62797: CALL_OW 1
62801: ST_TO_ADDR
// end ; end ;
62802: GO 62631
62804: POP
62805: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62806: LD_VAR 0 1
62810: PPUSH
62811: LD_EXP 54
62815: PUSH
62816: LD_VAR 0 4
62820: ARRAY
62821: PUSH
62822: LD_INT 0
62824: PLUS
62825: PPUSH
62826: CALL_OW 505
// end ;
62830: LD_VAR 0 2
62834: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62835: LD_INT 0
62837: PPUSH
62838: PPUSH
62839: PPUSH
62840: PPUSH
// if not hack in hackTanks then
62841: LD_VAR 0 1
62845: PUSH
62846: LD_EXP 53
62850: IN
62851: NOT
62852: IFFALSE 62856
// exit ;
62854: GO 62941
// index := GetElementIndex ( hackTanks , hack ) ;
62856: LD_ADDR_VAR 0 5
62860: PUSH
62861: LD_EXP 53
62865: PPUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: CALL 21699 0 2
62875: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62876: LD_ADDR_VAR 0 4
62880: PUSH
62881: DOUBLE
62882: LD_INT 1
62884: DEC
62885: ST_TO_ADDR
62886: LD_EXP 54
62890: PUSH
62891: LD_VAR 0 5
62895: ARRAY
62896: PUSH
62897: FOR_TO
62898: IFFALSE 62939
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62900: LD_EXP 54
62904: PUSH
62905: LD_VAR 0 5
62909: ARRAY
62910: PUSH
62911: LD_VAR 0 4
62915: ARRAY
62916: PUSH
62917: LD_INT 1
62919: ARRAY
62920: PUSH
62921: LD_VAR 0 2
62925: EQUAL
62926: IFFALSE 62937
// KillUnit ( vehicle ) ;
62928: LD_VAR 0 2
62932: PPUSH
62933: CALL_OW 66
62937: GO 62897
62939: POP
62940: POP
// end ;
62941: LD_VAR 0 3
62945: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62946: LD_EXP 58
62950: NOT
62951: IFFALSE 62986
62953: GO 62955
62955: DISABLE
// begin initMiner := true ;
62956: LD_ADDR_EXP 58
62960: PUSH
62961: LD_INT 1
62963: ST_TO_ADDR
// minersList := [ ] ;
62964: LD_ADDR_EXP 59
62968: PUSH
62969: EMPTY
62970: ST_TO_ADDR
// minerMinesList := [ ] ;
62971: LD_ADDR_EXP 60
62975: PUSH
62976: EMPTY
62977: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62978: LD_ADDR_EXP 61
62982: PUSH
62983: LD_INT 5
62985: ST_TO_ADDR
// end ;
62986: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62987: LD_EXP 58
62991: PUSH
62992: LD_INT 34
62994: PUSH
62995: LD_INT 81
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PPUSH
63002: CALL_OW 69
63006: AND
63007: IFFALSE 63468
63009: GO 63011
63011: DISABLE
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
// begin enable ;
63018: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63019: LD_ADDR_VAR 0 1
63023: PUSH
63024: LD_INT 34
63026: PUSH
63027: LD_INT 81
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PPUSH
63034: CALL_OW 69
63038: PUSH
63039: FOR_IN
63040: IFFALSE 63112
// begin if not i in minersList then
63042: LD_VAR 0 1
63046: PUSH
63047: LD_EXP 59
63051: IN
63052: NOT
63053: IFFALSE 63110
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63055: LD_ADDR_EXP 59
63059: PUSH
63060: LD_EXP 59
63064: PPUSH
63065: LD_EXP 59
63069: PUSH
63070: LD_INT 1
63072: PLUS
63073: PPUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: CALL_OW 1
63083: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63084: LD_ADDR_EXP 60
63088: PUSH
63089: LD_EXP 60
63093: PPUSH
63094: LD_EXP 60
63098: PUSH
63099: LD_INT 1
63101: PLUS
63102: PPUSH
63103: EMPTY
63104: PPUSH
63105: CALL_OW 1
63109: ST_TO_ADDR
// end end ;
63110: GO 63039
63112: POP
63113: POP
// for i := minerMinesList downto 1 do
63114: LD_ADDR_VAR 0 1
63118: PUSH
63119: DOUBLE
63120: LD_EXP 60
63124: INC
63125: ST_TO_ADDR
63126: LD_INT 1
63128: PUSH
63129: FOR_DOWNTO
63130: IFFALSE 63466
// begin if IsLive ( minersList [ i ] ) then
63132: LD_EXP 59
63136: PUSH
63137: LD_VAR 0 1
63141: ARRAY
63142: PPUSH
63143: CALL_OW 300
63147: IFFALSE 63175
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
63149: LD_EXP 59
63153: PUSH
63154: LD_VAR 0 1
63158: ARRAY
63159: PPUSH
63160: LD_EXP 60
63164: PUSH
63165: LD_VAR 0 1
63169: ARRAY
63170: PPUSH
63171: CALL_OW 505
// if not minerMinesList [ i ] then
63175: LD_EXP 60
63179: PUSH
63180: LD_VAR 0 1
63184: ARRAY
63185: NOT
63186: IFFALSE 63190
// continue ;
63188: GO 63129
// for j := minerMinesList [ i ] downto 1 do
63190: LD_ADDR_VAR 0 2
63194: PUSH
63195: DOUBLE
63196: LD_EXP 60
63200: PUSH
63201: LD_VAR 0 1
63205: ARRAY
63206: INC
63207: ST_TO_ADDR
63208: LD_INT 1
63210: PUSH
63211: FOR_DOWNTO
63212: IFFALSE 63462
// begin side := GetSide ( minersList [ i ] ) ;
63214: LD_ADDR_VAR 0 3
63218: PUSH
63219: LD_EXP 59
63223: PUSH
63224: LD_VAR 0 1
63228: ARRAY
63229: PPUSH
63230: CALL_OW 255
63234: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63235: LD_ADDR_VAR 0 4
63239: PUSH
63240: LD_EXP 60
63244: PUSH
63245: LD_VAR 0 1
63249: ARRAY
63250: PUSH
63251: LD_VAR 0 2
63255: ARRAY
63256: PUSH
63257: LD_INT 1
63259: ARRAY
63260: PPUSH
63261: LD_EXP 60
63265: PUSH
63266: LD_VAR 0 1
63270: ARRAY
63271: PUSH
63272: LD_VAR 0 2
63276: ARRAY
63277: PUSH
63278: LD_INT 2
63280: ARRAY
63281: PPUSH
63282: CALL_OW 428
63286: ST_TO_ADDR
// if not tmp then
63287: LD_VAR 0 4
63291: NOT
63292: IFFALSE 63296
// continue ;
63294: GO 63211
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63296: LD_VAR 0 4
63300: PUSH
63301: LD_INT 81
63303: PUSH
63304: LD_VAR 0 3
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PPUSH
63313: CALL_OW 69
63317: IN
63318: PUSH
63319: LD_EXP 60
63323: PUSH
63324: LD_VAR 0 1
63328: ARRAY
63329: PUSH
63330: LD_VAR 0 2
63334: ARRAY
63335: PUSH
63336: LD_INT 1
63338: ARRAY
63339: PPUSH
63340: LD_EXP 60
63344: PUSH
63345: LD_VAR 0 1
63349: ARRAY
63350: PUSH
63351: LD_VAR 0 2
63355: ARRAY
63356: PUSH
63357: LD_INT 2
63359: ARRAY
63360: PPUSH
63361: CALL_OW 458
63365: AND
63366: IFFALSE 63460
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63368: LD_EXP 60
63372: PUSH
63373: LD_VAR 0 1
63377: ARRAY
63378: PUSH
63379: LD_VAR 0 2
63383: ARRAY
63384: PUSH
63385: LD_INT 1
63387: ARRAY
63388: PPUSH
63389: LD_EXP 60
63393: PUSH
63394: LD_VAR 0 1
63398: ARRAY
63399: PUSH
63400: LD_VAR 0 2
63404: ARRAY
63405: PUSH
63406: LD_INT 2
63408: ARRAY
63409: PPUSH
63410: LD_VAR 0 3
63414: PPUSH
63415: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63419: LD_ADDR_EXP 60
63423: PUSH
63424: LD_EXP 60
63428: PPUSH
63429: LD_VAR 0 1
63433: PPUSH
63434: LD_EXP 60
63438: PUSH
63439: LD_VAR 0 1
63443: ARRAY
63444: PPUSH
63445: LD_VAR 0 2
63449: PPUSH
63450: CALL_OW 3
63454: PPUSH
63455: CALL_OW 1
63459: ST_TO_ADDR
// end ; end ;
63460: GO 63211
63462: POP
63463: POP
// end ;
63464: GO 63129
63466: POP
63467: POP
// end ;
63468: PPOPN 4
63470: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
63471: LD_INT 0
63473: PPUSH
63474: PPUSH
// result := false ;
63475: LD_ADDR_VAR 0 4
63479: PUSH
63480: LD_INT 0
63482: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63483: LD_VAR 0 1
63487: PPUSH
63488: CALL_OW 264
63492: PUSH
63493: LD_INT 81
63495: EQUAL
63496: NOT
63497: IFFALSE 63501
// exit ;
63499: GO 63741
// index := GetElementIndex ( minersList , unit ) ;
63501: LD_ADDR_VAR 0 5
63505: PUSH
63506: LD_EXP 59
63510: PPUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL 21699 0 2
63520: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63521: LD_EXP 60
63525: PUSH
63526: LD_VAR 0 5
63530: ARRAY
63531: PUSH
63532: LD_EXP 61
63536: GREATEREQUAL
63537: IFFALSE 63541
// exit ;
63539: GO 63741
// ComMoveXY ( unit , x , y ) ;
63541: LD_VAR 0 1
63545: PPUSH
63546: LD_VAR 0 2
63550: PPUSH
63551: LD_VAR 0 3
63555: PPUSH
63556: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63560: LD_INT 35
63562: PPUSH
63563: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63567: LD_VAR 0 1
63571: PPUSH
63572: LD_VAR 0 2
63576: PPUSH
63577: LD_VAR 0 3
63581: PPUSH
63582: CALL 53460 0 3
63586: NOT
63587: PUSH
63588: LD_VAR 0 1
63592: PPUSH
63593: CALL_OW 314
63597: AND
63598: IFFALSE 63602
// exit ;
63600: GO 63741
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63602: LD_VAR 0 2
63606: PPUSH
63607: LD_VAR 0 3
63611: PPUSH
63612: CALL_OW 428
63616: PUSH
63617: LD_VAR 0 1
63621: EQUAL
63622: PUSH
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 314
63632: NOT
63633: AND
63634: IFFALSE 63560
// PlaySoundXY ( x , y , PlantMine ) ;
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_VAR 0 3
63645: PPUSH
63646: LD_STRING PlantMine
63648: PPUSH
63649: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63653: LD_VAR 0 2
63657: PPUSH
63658: LD_VAR 0 3
63662: PPUSH
63663: LD_VAR 0 1
63667: PPUSH
63668: CALL_OW 255
63672: PPUSH
63673: LD_INT 0
63675: PPUSH
63676: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63680: LD_ADDR_EXP 60
63684: PUSH
63685: LD_EXP 60
63689: PPUSH
63690: LD_VAR 0 5
63694: PUSH
63695: LD_EXP 60
63699: PUSH
63700: LD_VAR 0 5
63704: ARRAY
63705: PUSH
63706: LD_INT 1
63708: PLUS
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PPUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_VAR 0 3
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PPUSH
63728: CALL 21914 0 3
63732: ST_TO_ADDR
// result := true ;
63733: LD_ADDR_VAR 0 4
63737: PUSH
63738: LD_INT 1
63740: ST_TO_ADDR
// end ;
63741: LD_VAR 0 4
63745: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63746: LD_INT 0
63748: PPUSH
63749: PPUSH
63750: PPUSH
// if not unit in minersList then
63751: LD_VAR 0 1
63755: PUSH
63756: LD_EXP 59
63760: IN
63761: NOT
63762: IFFALSE 63766
// exit ;
63764: GO 64158
// index := GetElementIndex ( minersList , unit ) ;
63766: LD_ADDR_VAR 0 6
63770: PUSH
63771: LD_EXP 59
63775: PPUSH
63776: LD_VAR 0 1
63780: PPUSH
63781: CALL 21699 0 2
63785: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63786: LD_ADDR_VAR 0 5
63790: PUSH
63791: DOUBLE
63792: LD_EXP 60
63796: PUSH
63797: LD_VAR 0 6
63801: ARRAY
63802: INC
63803: ST_TO_ADDR
63804: LD_INT 1
63806: PUSH
63807: FOR_DOWNTO
63808: IFFALSE 63969
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63810: LD_EXP 60
63814: PUSH
63815: LD_VAR 0 6
63819: ARRAY
63820: PUSH
63821: LD_VAR 0 5
63825: ARRAY
63826: PUSH
63827: LD_INT 1
63829: ARRAY
63830: PUSH
63831: LD_VAR 0 2
63835: EQUAL
63836: PUSH
63837: LD_EXP 60
63841: PUSH
63842: LD_VAR 0 6
63846: ARRAY
63847: PUSH
63848: LD_VAR 0 5
63852: ARRAY
63853: PUSH
63854: LD_INT 2
63856: ARRAY
63857: PUSH
63858: LD_VAR 0 3
63862: EQUAL
63863: AND
63864: IFFALSE 63967
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63866: LD_EXP 60
63870: PUSH
63871: LD_VAR 0 6
63875: ARRAY
63876: PUSH
63877: LD_VAR 0 5
63881: ARRAY
63882: PUSH
63883: LD_INT 1
63885: ARRAY
63886: PPUSH
63887: LD_EXP 60
63891: PUSH
63892: LD_VAR 0 6
63896: ARRAY
63897: PUSH
63898: LD_VAR 0 5
63902: ARRAY
63903: PUSH
63904: LD_INT 2
63906: ARRAY
63907: PPUSH
63908: LD_VAR 0 1
63912: PPUSH
63913: CALL_OW 255
63917: PPUSH
63918: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63922: LD_ADDR_EXP 60
63926: PUSH
63927: LD_EXP 60
63931: PPUSH
63932: LD_VAR 0 6
63936: PPUSH
63937: LD_EXP 60
63941: PUSH
63942: LD_VAR 0 6
63946: ARRAY
63947: PPUSH
63948: LD_VAR 0 5
63952: PPUSH
63953: CALL_OW 3
63957: PPUSH
63958: CALL_OW 1
63962: ST_TO_ADDR
// exit ;
63963: POP
63964: POP
63965: GO 64158
// end ; end ;
63967: GO 63807
63969: POP
63970: POP
// for i := minerMinesList [ index ] downto 1 do
63971: LD_ADDR_VAR 0 5
63975: PUSH
63976: DOUBLE
63977: LD_EXP 60
63981: PUSH
63982: LD_VAR 0 6
63986: ARRAY
63987: INC
63988: ST_TO_ADDR
63989: LD_INT 1
63991: PUSH
63992: FOR_DOWNTO
63993: IFFALSE 64156
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63995: LD_EXP 60
63999: PUSH
64000: LD_VAR 0 6
64004: ARRAY
64005: PUSH
64006: LD_VAR 0 5
64010: ARRAY
64011: PUSH
64012: LD_INT 1
64014: ARRAY
64015: PPUSH
64016: LD_EXP 60
64020: PUSH
64021: LD_VAR 0 6
64025: ARRAY
64026: PUSH
64027: LD_VAR 0 5
64031: ARRAY
64032: PUSH
64033: LD_INT 2
64035: ARRAY
64036: PPUSH
64037: LD_VAR 0 2
64041: PPUSH
64042: LD_VAR 0 3
64046: PPUSH
64047: CALL_OW 298
64051: PUSH
64052: LD_INT 6
64054: LESS
64055: IFFALSE 64154
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64057: LD_EXP 60
64061: PUSH
64062: LD_VAR 0 6
64066: ARRAY
64067: PUSH
64068: LD_VAR 0 5
64072: ARRAY
64073: PUSH
64074: LD_INT 1
64076: ARRAY
64077: PPUSH
64078: LD_EXP 60
64082: PUSH
64083: LD_VAR 0 6
64087: ARRAY
64088: PUSH
64089: LD_VAR 0 5
64093: ARRAY
64094: PUSH
64095: LD_INT 2
64097: ARRAY
64098: PPUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 255
64108: PPUSH
64109: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64113: LD_ADDR_EXP 60
64117: PUSH
64118: LD_EXP 60
64122: PPUSH
64123: LD_VAR 0 6
64127: PPUSH
64128: LD_EXP 60
64132: PUSH
64133: LD_VAR 0 6
64137: ARRAY
64138: PPUSH
64139: LD_VAR 0 5
64143: PPUSH
64144: CALL_OW 3
64148: PPUSH
64149: CALL_OW 1
64153: ST_TO_ADDR
// end ; end ;
64154: GO 63992
64156: POP
64157: POP
// end ;
64158: LD_VAR 0 4
64162: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64163: LD_INT 0
64165: PPUSH
64166: PPUSH
64167: PPUSH
64168: PPUSH
64169: PPUSH
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64174: LD_VAR 0 1
64178: PPUSH
64179: CALL_OW 264
64183: PUSH
64184: LD_INT 81
64186: EQUAL
64187: NOT
64188: PUSH
64189: LD_VAR 0 1
64193: PUSH
64194: LD_EXP 59
64198: IN
64199: NOT
64200: OR
64201: IFFALSE 64205
// exit ;
64203: GO 64527
// index := GetElementIndex ( minersList , unit ) ;
64205: LD_ADDR_VAR 0 6
64209: PUSH
64210: LD_EXP 59
64214: PPUSH
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL 21699 0 2
64224: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64225: LD_ADDR_VAR 0 8
64229: PUSH
64230: LD_EXP 61
64234: PUSH
64235: LD_EXP 60
64239: PUSH
64240: LD_VAR 0 6
64244: ARRAY
64245: MINUS
64246: ST_TO_ADDR
// if not minesFreeAmount then
64247: LD_VAR 0 8
64251: NOT
64252: IFFALSE 64256
// exit ;
64254: GO 64527
// tmp := [ ] ;
64256: LD_ADDR_VAR 0 7
64260: PUSH
64261: EMPTY
64262: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64263: LD_ADDR_VAR 0 5
64267: PUSH
64268: DOUBLE
64269: LD_INT 1
64271: DEC
64272: ST_TO_ADDR
64273: LD_VAR 0 8
64277: PUSH
64278: FOR_TO
64279: IFFALSE 64474
// begin _d := rand ( 0 , 5 ) ;
64281: LD_ADDR_VAR 0 11
64285: PUSH
64286: LD_INT 0
64288: PPUSH
64289: LD_INT 5
64291: PPUSH
64292: CALL_OW 12
64296: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64297: LD_ADDR_VAR 0 12
64301: PUSH
64302: LD_INT 2
64304: PPUSH
64305: LD_INT 6
64307: PPUSH
64308: CALL_OW 12
64312: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64313: LD_ADDR_VAR 0 9
64317: PUSH
64318: LD_VAR 0 2
64322: PPUSH
64323: LD_VAR 0 11
64327: PPUSH
64328: LD_VAR 0 12
64332: PPUSH
64333: CALL_OW 272
64337: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64338: LD_ADDR_VAR 0 10
64342: PUSH
64343: LD_VAR 0 3
64347: PPUSH
64348: LD_VAR 0 11
64352: PPUSH
64353: LD_VAR 0 12
64357: PPUSH
64358: CALL_OW 273
64362: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64363: LD_VAR 0 9
64367: PPUSH
64368: LD_VAR 0 10
64372: PPUSH
64373: CALL_OW 488
64377: PUSH
64378: LD_VAR 0 9
64382: PUSH
64383: LD_VAR 0 10
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_VAR 0 7
64396: IN
64397: NOT
64398: AND
64399: PUSH
64400: LD_VAR 0 9
64404: PPUSH
64405: LD_VAR 0 10
64409: PPUSH
64410: CALL_OW 458
64414: NOT
64415: AND
64416: IFFALSE 64458
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64418: LD_ADDR_VAR 0 7
64422: PUSH
64423: LD_VAR 0 7
64427: PPUSH
64428: LD_VAR 0 7
64432: PUSH
64433: LD_INT 1
64435: PLUS
64436: PPUSH
64437: LD_VAR 0 9
64441: PUSH
64442: LD_VAR 0 10
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PPUSH
64451: CALL_OW 1
64455: ST_TO_ADDR
64456: GO 64472
// i := i - 1 ;
64458: LD_ADDR_VAR 0 5
64462: PUSH
64463: LD_VAR 0 5
64467: PUSH
64468: LD_INT 1
64470: MINUS
64471: ST_TO_ADDR
// end ;
64472: GO 64278
64474: POP
64475: POP
// for i in tmp do
64476: LD_ADDR_VAR 0 5
64480: PUSH
64481: LD_VAR 0 7
64485: PUSH
64486: FOR_IN
64487: IFFALSE 64525
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64489: LD_VAR 0 1
64493: PPUSH
64494: LD_VAR 0 5
64498: PUSH
64499: LD_INT 1
64501: ARRAY
64502: PPUSH
64503: LD_VAR 0 5
64507: PUSH
64508: LD_INT 2
64510: ARRAY
64511: PPUSH
64512: CALL 63471 0 3
64516: NOT
64517: IFFALSE 64523
// exit ;
64519: POP
64520: POP
64521: GO 64527
64523: GO 64486
64525: POP
64526: POP
// end ;
64527: LD_VAR 0 4
64531: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64532: LD_INT 0
64534: PPUSH
64535: PPUSH
64536: PPUSH
64537: PPUSH
64538: PPUSH
64539: PPUSH
64540: PPUSH
64541: PPUSH
64542: PPUSH
// if GetClass ( unit ) <> class_sniper then
64543: LD_VAR 0 1
64547: PPUSH
64548: CALL_OW 257
64552: PUSH
64553: LD_INT 5
64555: NONEQUAL
64556: IFFALSE 64560
// exit ;
64558: GO 65026
// dist := 8 ;
64560: LD_ADDR_VAR 0 5
64564: PUSH
64565: LD_INT 8
64567: ST_TO_ADDR
// viewRange := 12 ;
64568: LD_ADDR_VAR 0 8
64572: PUSH
64573: LD_INT 12
64575: ST_TO_ADDR
// side := GetSide ( unit ) ;
64576: LD_ADDR_VAR 0 6
64580: PUSH
64581: LD_VAR 0 1
64585: PPUSH
64586: CALL_OW 255
64590: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64591: LD_INT 61
64593: PPUSH
64594: LD_VAR 0 6
64598: PPUSH
64599: CALL_OW 321
64603: PUSH
64604: LD_INT 2
64606: EQUAL
64607: IFFALSE 64617
// viewRange := 16 ;
64609: LD_ADDR_VAR 0 8
64613: PUSH
64614: LD_INT 16
64616: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64617: LD_VAR 0 1
64621: PPUSH
64622: LD_VAR 0 2
64626: PPUSH
64627: LD_VAR 0 3
64631: PPUSH
64632: CALL_OW 297
64636: PUSH
64637: LD_VAR 0 5
64641: GREATER
64642: IFFALSE 64721
// begin ComMoveXY ( unit , x , y ) ;
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_VAR 0 2
64653: PPUSH
64654: LD_VAR 0 3
64658: PPUSH
64659: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64663: LD_INT 35
64665: PPUSH
64666: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64670: LD_VAR 0 1
64674: PPUSH
64675: LD_VAR 0 2
64679: PPUSH
64680: LD_VAR 0 3
64684: PPUSH
64685: CALL 53460 0 3
64689: NOT
64690: IFFALSE 64694
// exit ;
64692: GO 65026
// until GetDistUnitXY ( unit , x , y ) < dist ;
64694: LD_VAR 0 1
64698: PPUSH
64699: LD_VAR 0 2
64703: PPUSH
64704: LD_VAR 0 3
64708: PPUSH
64709: CALL_OW 297
64713: PUSH
64714: LD_VAR 0 5
64718: LESS
64719: IFFALSE 64663
// end ; ComTurnXY ( unit , x , y ) ;
64721: LD_VAR 0 1
64725: PPUSH
64726: LD_VAR 0 2
64730: PPUSH
64731: LD_VAR 0 3
64735: PPUSH
64736: CALL_OW 118
// repeat if Multiplayer then
64740: LD_OWVAR 4
64744: IFFALSE 64755
// wait ( 35 ) else
64746: LD_INT 35
64748: PPUSH
64749: CALL_OW 67
64753: GO 64762
// wait ( 5 ) ;
64755: LD_INT 5
64757: PPUSH
64758: CALL_OW 67
// _d := GetDir ( unit ) ;
64762: LD_ADDR_VAR 0 11
64766: PUSH
64767: LD_VAR 0 1
64771: PPUSH
64772: CALL_OW 254
64776: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64777: LD_ADDR_VAR 0 7
64781: PUSH
64782: LD_VAR 0 1
64786: PPUSH
64787: CALL_OW 250
64791: PPUSH
64792: LD_VAR 0 1
64796: PPUSH
64797: CALL_OW 251
64801: PPUSH
64802: LD_VAR 0 2
64806: PPUSH
64807: LD_VAR 0 3
64811: PPUSH
64812: CALL 56068 0 4
64816: ST_TO_ADDR
// until dir = _d ;
64817: LD_VAR 0 7
64821: PUSH
64822: LD_VAR 0 11
64826: EQUAL
64827: IFFALSE 64740
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64829: LD_ADDR_VAR 0 9
64833: PUSH
64834: LD_VAR 0 1
64838: PPUSH
64839: CALL_OW 250
64843: PPUSH
64844: LD_VAR 0 7
64848: PPUSH
64849: LD_VAR 0 5
64853: PPUSH
64854: CALL_OW 272
64858: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64859: LD_ADDR_VAR 0 10
64863: PUSH
64864: LD_VAR 0 1
64868: PPUSH
64869: CALL_OW 251
64873: PPUSH
64874: LD_VAR 0 7
64878: PPUSH
64879: LD_VAR 0 5
64883: PPUSH
64884: CALL_OW 273
64888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64889: LD_VAR 0 9
64893: PPUSH
64894: LD_VAR 0 10
64898: PPUSH
64899: CALL_OW 488
64903: NOT
64904: IFFALSE 64908
// exit ;
64906: GO 65026
// ComAnimCustom ( unit , 1 ) ;
64908: LD_VAR 0 1
64912: PPUSH
64913: LD_INT 1
64915: PPUSH
64916: CALL_OW 592
// p := 0 ;
64920: LD_ADDR_VAR 0 12
64924: PUSH
64925: LD_INT 0
64927: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64928: LD_VAR 0 9
64932: PPUSH
64933: LD_VAR 0 10
64937: PPUSH
64938: LD_VAR 0 6
64942: PPUSH
64943: LD_VAR 0 8
64947: PPUSH
64948: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64952: LD_INT 35
64954: PPUSH
64955: CALL_OW 67
// p := Inc ( p ) ;
64959: LD_ADDR_VAR 0 12
64963: PUSH
64964: LD_VAR 0 12
64968: PPUSH
64969: CALL 56024 0 1
64973: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64974: LD_VAR 0 12
64978: PUSH
64979: LD_INT 3
64981: EQUAL
64982: PUSH
64983: LD_VAR 0 1
64987: PPUSH
64988: CALL_OW 302
64992: NOT
64993: OR
64994: PUSH
64995: LD_VAR 0 1
64999: PPUSH
65000: CALL_OW 301
65004: OR
65005: IFFALSE 64952
// RemoveSeeing ( _x , _y , side ) ;
65007: LD_VAR 0 9
65011: PPUSH
65012: LD_VAR 0 10
65016: PPUSH
65017: LD_VAR 0 6
65021: PPUSH
65022: CALL_OW 331
// end ; end_of_file
65026: LD_VAR 0 4
65030: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65031: LD_VAR 0 1
65035: PUSH
65036: LD_INT 200
65038: DOUBLE
65039: GREATEREQUAL
65040: IFFALSE 65048
65042: LD_INT 299
65044: DOUBLE
65045: LESSEQUAL
65046: IFTRUE 65050
65048: GO 65082
65050: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65051: LD_VAR 0 1
65055: PPUSH
65056: LD_VAR 0 2
65060: PPUSH
65061: LD_VAR 0 3
65065: PPUSH
65066: LD_VAR 0 4
65070: PPUSH
65071: LD_VAR 0 5
65075: PPUSH
65076: CALL 60332 0 5
65080: GO 65159
65082: LD_INT 300
65084: DOUBLE
65085: GREATEREQUAL
65086: IFFALSE 65094
65088: LD_INT 399
65090: DOUBLE
65091: LESSEQUAL
65092: IFTRUE 65096
65094: GO 65158
65096: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65097: LD_VAR 0 1
65101: PPUSH
65102: LD_VAR 0 2
65106: PPUSH
65107: LD_VAR 0 3
65111: PPUSH
65112: LD_VAR 0 4
65116: PPUSH
65117: LD_VAR 0 5
65121: PPUSH
65122: LD_VAR 0 6
65126: PPUSH
65127: LD_VAR 0 7
65131: PPUSH
65132: LD_VAR 0 8
65136: PPUSH
65137: LD_VAR 0 9
65141: PPUSH
65142: LD_VAR 0 10
65146: PPUSH
65147: LD_VAR 0 11
65151: PPUSH
65152: CALL 65242 0 11
65156: GO 65159
65158: POP
// end ;
65159: PPOPN 11
65161: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65162: LD_VAR 0 1
65166: PPUSH
65167: LD_VAR 0 2
65171: PPUSH
65172: LD_VAR 0 3
65176: PPUSH
65177: LD_VAR 0 4
65181: PPUSH
65182: LD_VAR 0 5
65186: PPUSH
65187: CALL 59797 0 5
// end ; end_of_file
65191: PPOPN 5
65193: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65194: PPOPN 6
65196: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65197: CALL 65226 0 0
// end ; end_of_file
65201: PPOPN 1
65203: END
// every 0 0$1 do
65204: GO 65206
65206: DISABLE
// begin enable ;
65207: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65208: LD_STRING updateTimer(
65210: PUSH
65211: LD_OWVAR 1
65215: STR
65216: PUSH
65217: LD_STRING );
65219: STR
65220: PPUSH
65221: CALL_OW 559
// end ;
65225: END
// export function SOS_MapStart ( ) ; begin
65226: LD_INT 0
65228: PPUSH
// UpdateFactoryWaypoints ( ) ;
65229: CALL 65598 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65233: CALL 65850 0 0
// end ;
65237: LD_VAR 0 1
65241: RET
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65242: LD_INT 0
65244: PPUSH
// end ;
65245: LD_VAR 0 12
65249: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65250: LD_INT 0
65252: PPUSH
65253: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65254: LD_VAR 0 1
65258: NOT
65259: PUSH
65260: LD_VAR 0 2
65264: PPUSH
65265: LD_VAR 0 3
65269: PPUSH
65270: CALL_OW 488
65274: NOT
65275: OR
65276: PUSH
65277: LD_VAR 0 1
65281: PPUSH
65282: CALL_OW 266
65286: PUSH
65287: LD_INT 3
65289: NONEQUAL
65290: PUSH
65291: LD_VAR 0 1
65295: PPUSH
65296: CALL_OW 247
65300: PUSH
65301: LD_INT 1
65303: EQUAL
65304: NOT
65305: AND
65306: OR
65307: IFFALSE 65311
// exit ;
65309: GO 65593
// if GetType ( factory ) = unit_human then
65311: LD_VAR 0 1
65315: PPUSH
65316: CALL_OW 247
65320: PUSH
65321: LD_INT 1
65323: EQUAL
65324: IFFALSE 65341
// factory := IsInUnit ( factory ) ;
65326: LD_ADDR_VAR 0 1
65330: PUSH
65331: LD_VAR 0 1
65335: PPUSH
65336: CALL_OW 310
65340: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65341: LD_VAR 0 1
65345: PPUSH
65346: CALL_OW 266
65350: PUSH
65351: LD_INT 3
65353: NONEQUAL
65354: IFFALSE 65358
// exit ;
65356: GO 65593
// for i := 1 to Count ( factoryWaypoints ) do
65358: LD_ADDR_VAR 0 5
65362: PUSH
65363: DOUBLE
65364: LD_INT 1
65366: DEC
65367: ST_TO_ADDR
65368: LD_EXP 62
65372: PPUSH
65373: CALL 19054 0 1
65377: PUSH
65378: FOR_TO
65379: IFFALSE 65541
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65381: LD_VAR 0 2
65385: PPUSH
65386: LD_VAR 0 3
65390: PPUSH
65391: CALL_OW 428
65395: PUSH
65396: LD_EXP 62
65400: PUSH
65401: LD_VAR 0 5
65405: ARRAY
65406: PUSH
65407: LD_INT 2
65409: ARRAY
65410: EQUAL
65411: IFFALSE 65443
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65413: LD_ADDR_EXP 62
65417: PUSH
65418: LD_EXP 62
65422: PPUSH
65423: LD_VAR 0 5
65427: PPUSH
65428: CALL_OW 3
65432: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65433: CALL 65598 0 0
// exit ;
65437: POP
65438: POP
65439: GO 65593
// end else
65441: GO 65539
// if factory = factoryWaypoints [ i ] [ 2 ] then
65443: LD_VAR 0 1
65447: PUSH
65448: LD_EXP 62
65452: PUSH
65453: LD_VAR 0 5
65457: ARRAY
65458: PUSH
65459: LD_INT 2
65461: ARRAY
65462: EQUAL
65463: IFFALSE 65539
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65465: LD_ADDR_EXP 62
65469: PUSH
65470: LD_EXP 62
65474: PPUSH
65475: LD_VAR 0 5
65479: PPUSH
65480: CALL_OW 3
65484: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65485: LD_ADDR_EXP 62
65489: PUSH
65490: LD_EXP 62
65494: PPUSH
65495: LD_VAR 0 1
65499: PPUSH
65500: CALL_OW 255
65504: PUSH
65505: LD_VAR 0 1
65509: PUSH
65510: LD_VAR 0 2
65514: PUSH
65515: LD_VAR 0 3
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: PPUSH
65526: CALL 54663 0 2
65530: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65531: CALL 65598 0 0
// exit ;
65535: POP
65536: POP
65537: GO 65593
// end ; end ;
65539: GO 65378
65541: POP
65542: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65543: LD_ADDR_EXP 62
65547: PUSH
65548: LD_EXP 62
65552: PPUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: CALL_OW 255
65562: PUSH
65563: LD_VAR 0 1
65567: PUSH
65568: LD_VAR 0 2
65572: PUSH
65573: LD_VAR 0 3
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: PPUSH
65584: CALL 54663 0 2
65588: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65589: CALL 65598 0 0
// end ;
65593: LD_VAR 0 4
65597: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65598: LD_INT 0
65600: PPUSH
65601: PPUSH
65602: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65603: LD_STRING resetFactoryWaypoint();
65605: PPUSH
65606: CALL_OW 559
// if factoryWaypoints then
65610: LD_EXP 62
65614: IFFALSE 65735
// begin list := factoryWaypoints ;
65616: LD_ADDR_VAR 0 3
65620: PUSH
65621: LD_EXP 62
65625: ST_TO_ADDR
// for i := 1 to list do
65626: LD_ADDR_VAR 0 2
65630: PUSH
65631: DOUBLE
65632: LD_INT 1
65634: DEC
65635: ST_TO_ADDR
65636: LD_VAR 0 3
65640: PUSH
65641: FOR_TO
65642: IFFALSE 65733
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65644: LD_STRING setFactoryWaypointXY(
65646: PUSH
65647: LD_VAR 0 3
65651: PUSH
65652: LD_VAR 0 2
65656: ARRAY
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: STR
65662: PUSH
65663: LD_STRING ,
65665: STR
65666: PUSH
65667: LD_VAR 0 3
65671: PUSH
65672: LD_VAR 0 2
65676: ARRAY
65677: PUSH
65678: LD_INT 2
65680: ARRAY
65681: STR
65682: PUSH
65683: LD_STRING ,
65685: STR
65686: PUSH
65687: LD_VAR 0 3
65691: PUSH
65692: LD_VAR 0 2
65696: ARRAY
65697: PUSH
65698: LD_INT 3
65700: ARRAY
65701: STR
65702: PUSH
65703: LD_STRING ,
65705: STR
65706: PUSH
65707: LD_VAR 0 3
65711: PUSH
65712: LD_VAR 0 2
65716: ARRAY
65717: PUSH
65718: LD_INT 4
65720: ARRAY
65721: STR
65722: PUSH
65723: LD_STRING )
65725: STR
65726: PPUSH
65727: CALL_OW 559
65731: GO 65641
65733: POP
65734: POP
// end ; end ;
65735: LD_VAR 0 1
65739: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65740: LD_INT 0
65742: PPUSH
// if HexInfo ( x , y ) = warehouse then
65743: LD_VAR 0 2
65747: PPUSH
65748: LD_VAR 0 3
65752: PPUSH
65753: CALL_OW 428
65757: PUSH
65758: LD_VAR 0 1
65762: EQUAL
65763: IFFALSE 65790
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65765: LD_ADDR_EXP 63
65769: PUSH
65770: LD_EXP 63
65774: PPUSH
65775: LD_VAR 0 1
65779: PPUSH
65780: LD_INT 0
65782: PPUSH
65783: CALL_OW 1
65787: ST_TO_ADDR
65788: GO 65841
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65790: LD_ADDR_EXP 63
65794: PUSH
65795: LD_EXP 63
65799: PPUSH
65800: LD_VAR 0 1
65804: PPUSH
65805: LD_VAR 0 1
65809: PPUSH
65810: CALL_OW 255
65814: PUSH
65815: LD_VAR 0 1
65819: PUSH
65820: LD_VAR 0 2
65824: PUSH
65825: LD_VAR 0 3
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: PPUSH
65836: CALL_OW 1
65840: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65841: CALL 65850 0 0
// end ;
65845: LD_VAR 0 4
65849: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
65854: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65855: LD_STRING resetWarehouseGatheringPoints();
65857: PPUSH
65858: CALL_OW 559
// if warehouseGatheringPoints then
65862: LD_EXP 63
65866: IFFALSE 65992
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65868: LD_ADDR_VAR 0 3
65872: PUSH
65873: LD_EXP 63
65877: PPUSH
65878: CALL 58425 0 1
65882: ST_TO_ADDR
// for i := 1 to list do
65883: LD_ADDR_VAR 0 2
65887: PUSH
65888: DOUBLE
65889: LD_INT 1
65891: DEC
65892: ST_TO_ADDR
65893: LD_VAR 0 3
65897: PUSH
65898: FOR_TO
65899: IFFALSE 65990
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65901: LD_STRING setWarehouseGatheringPointXY(
65903: PUSH
65904: LD_VAR 0 3
65908: PUSH
65909: LD_VAR 0 2
65913: ARRAY
65914: PUSH
65915: LD_INT 1
65917: ARRAY
65918: STR
65919: PUSH
65920: LD_STRING ,
65922: STR
65923: PUSH
65924: LD_VAR 0 3
65928: PUSH
65929: LD_VAR 0 2
65933: ARRAY
65934: PUSH
65935: LD_INT 2
65937: ARRAY
65938: STR
65939: PUSH
65940: LD_STRING ,
65942: STR
65943: PUSH
65944: LD_VAR 0 3
65948: PUSH
65949: LD_VAR 0 2
65953: ARRAY
65954: PUSH
65955: LD_INT 3
65957: ARRAY
65958: STR
65959: PUSH
65960: LD_STRING ,
65962: STR
65963: PUSH
65964: LD_VAR 0 3
65968: PUSH
65969: LD_VAR 0 2
65973: ARRAY
65974: PUSH
65975: LD_INT 4
65977: ARRAY
65978: STR
65979: PUSH
65980: LD_STRING )
65982: STR
65983: PPUSH
65984: CALL_OW 559
65988: GO 65898
65990: POP
65991: POP
// end ; end ;
65992: LD_VAR 0 1
65996: RET
