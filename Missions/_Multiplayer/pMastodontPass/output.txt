// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3164 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3540 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 120
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , CenterArea , RoadArea ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 60
 891: PUSH
 892: LD_INT 61
 894: PUSH
 895: LD_INT 62
 897: PUSH
 898: LD_INT 63
 900: PUSH
 901: LD_INT 59
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 9
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 55018 0 2
1427: PUSH
1428: LD_INT 15
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 55018 0 2
1438: PUSH
1439: LD_INT 21
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: CALL 55018 0 2
1449: PUSH
1450: LD_INT 27
1452: PPUSH
1453: LD_INT 3
1455: PPUSH
1456: CALL 55018 0 2
1460: PUSH
1461: LD_INT 33
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL 55018 0 2
1471: PUSH
1472: LD_INT 39
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 55018 0 2
1482: PUSH
1483: LD_INT 45
1485: PPUSH
1486: LD_INT 4
1488: PPUSH
1489: CALL 55018 0 2
1493: PUSH
1494: LD_INT 51
1496: PPUSH
1497: LD_INT 5
1499: PPUSH
1500: CALL 55018 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 14367 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1896
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// if all then
1666: LD_VAR 0 4
1670: IFFALSE 1793
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1672: LD_ADDR_EXP 12
1676: PUSH
1677: LD_INT 10
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 54851 0 2
1689: PUSH
1690: LD_INT 16
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 54851 0 2
1702: PUSH
1703: LD_INT 22
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 54851 0 2
1715: PUSH
1716: LD_INT 28
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 54851 0 2
1728: PUSH
1729: LD_INT 34
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 54851 0 2
1741: PUSH
1742: LD_INT 40
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL 54851 0 2
1754: PUSH
1755: LD_INT 46
1757: PPUSH
1758: LD_VAR 0 4
1762: PPUSH
1763: CALL 54851 0 2
1767: PUSH
1768: LD_INT 52
1770: PPUSH
1771: LD_VAR 0 4
1775: PPUSH
1776: CALL 54851 0 2
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: ST_TO_ADDR
// end else
1791: GO 1896
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1793: LD_ADDR_EXP 12
1797: PUSH
1798: LD_INT 80
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: CALL 54851 0 2
1808: PUSH
1809: LD_INT 82
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: CALL 54851 0 2
1819: PUSH
1820: LD_INT 84
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL 54851 0 2
1830: PUSH
1831: LD_INT 86
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: CALL 54851 0 2
1841: PUSH
1842: LD_INT 72
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: CALL 54851 0 2
1852: PUSH
1853: LD_INT 74
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 54851 0 2
1863: PUSH
1864: LD_INT 76
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL 54851 0 2
1874: PUSH
1875: LD_INT 78
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 54851 0 2
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: ST_TO_ADDR
// end ; end ; if hasSib then
1896: LD_VAR 0 6
1900: IFFALSE 2150
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1902: LD_ADDR_VAR 0 4
1906: PUSH
1907: LD_EXP 6
1911: PUSH
1912: LD_INT 7
1914: ARRAY
1915: PUSH
1916: LD_INT 2
1918: EQUAL
1919: ST_TO_ADDR
// if all then
1920: LD_VAR 0 4
1924: IFFALSE 2047
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1926: LD_ADDR_EXP 13
1930: PUSH
1931: LD_INT 11
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: CALL 54851 0 2
1943: PUSH
1944: LD_INT 17
1946: PPUSH
1947: LD_VAR 0 4
1951: PPUSH
1952: CALL 54851 0 2
1956: PUSH
1957: LD_INT 23
1959: PPUSH
1960: LD_VAR 0 4
1964: PPUSH
1965: CALL 54851 0 2
1969: PUSH
1970: LD_INT 29
1972: PPUSH
1973: LD_VAR 0 4
1977: PPUSH
1978: CALL 54851 0 2
1982: PUSH
1983: LD_INT 35
1985: PPUSH
1986: LD_VAR 0 4
1990: PPUSH
1991: CALL 54851 0 2
1995: PUSH
1996: LD_INT 41
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 54851 0 2
2008: PUSH
2009: LD_INT 47
2011: PPUSH
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL 54851 0 2
2021: PUSH
2022: LD_INT 53
2024: PPUSH
2025: LD_VAR 0 4
2029: PPUSH
2030: CALL 54851 0 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: ST_TO_ADDR
// end else
2045: GO 2150
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2047: LD_ADDR_EXP 13
2051: PUSH
2052: LD_INT 81
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: CALL 54851 0 2
2062: PUSH
2063: LD_INT 83
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: CALL 54851 0 2
2073: PUSH
2074: LD_INT 85
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 54851 0 2
2084: PUSH
2085: LD_INT 87
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: CALL 54851 0 2
2095: PUSH
2096: LD_INT 73
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL 54851 0 2
2106: PUSH
2107: LD_INT 75
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: CALL 54851 0 2
2117: PUSH
2118: LD_INT 77
2120: PPUSH
2121: LD_INT 1
2123: PPUSH
2124: CALL 54851 0 2
2128: PUSH
2129: LD_INT 79
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 54851 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2150: LD_VAR 0 7
2154: PUSH
2155: LD_INT 1
2157: GREATEREQUAL
2158: IFFALSE 2170
// mpDepots := startPos ;
2160: LD_ADDR_EXP 14
2164: PUSH
2165: LD_VAR 0 8
2169: ST_TO_ADDR
// if baseLevel >= 2 then
2170: LD_VAR 0 7
2174: PUSH
2175: LD_INT 2
2177: GREATEREQUAL
2178: IFFALSE 2595
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 3 ) ] ] ;
2180: LD_ADDR_EXP 17
2184: PUSH
2185: LD_INT 31
2187: PUSH
2188: LD_INT 13
2190: PPUSH
2191: LD_INT 5
2193: PPUSH
2194: CALL 55018 0 2
2198: ADD
2199: PUSH
2200: LD_INT 31
2202: PUSH
2203: LD_INT 14
2205: PPUSH
2206: LD_INT 0
2208: PPUSH
2209: CALL 55018 0 2
2213: ADD
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 12
2220: PPUSH
2221: LD_INT 5
2223: PPUSH
2224: CALL 55018 0 2
2228: ADD
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 31
2237: PUSH
2238: LD_INT 18
2240: PPUSH
2241: LD_INT 4
2243: PPUSH
2244: CALL 55018 0 2
2248: ADD
2249: PUSH
2250: LD_INT 31
2252: PUSH
2253: LD_INT 19
2255: PPUSH
2256: LD_INT 5
2258: PPUSH
2259: CALL 55018 0 2
2263: ADD
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: LD_INT 20
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL 55018 0 2
2278: ADD
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 31
2287: PUSH
2288: LD_INT 25
2290: PPUSH
2291: LD_INT 0
2293: PPUSH
2294: CALL 55018 0 2
2298: ADD
2299: PUSH
2300: LD_INT 31
2302: PUSH
2303: LD_INT 26
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: CALL 55018 0 2
2313: ADD
2314: PUSH
2315: LD_INT 4
2317: PUSH
2318: LD_INT 24
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL 55018 0 2
2328: ADD
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 31
2337: PUSH
2338: LD_INT 31
2340: PPUSH
2341: LD_INT 0
2343: PPUSH
2344: CALL 55018 0 2
2348: ADD
2349: PUSH
2350: LD_INT 31
2352: PUSH
2353: LD_INT 32
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: CALL 55018 0 2
2363: ADD
2364: PUSH
2365: LD_INT 4
2367: PUSH
2368: LD_INT 30
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL 55018 0 2
2378: ADD
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 31
2387: PUSH
2388: LD_INT 37
2390: PPUSH
2391: LD_INT 3
2393: PPUSH
2394: CALL 55018 0 2
2398: ADD
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: LD_INT 38
2405: PPUSH
2406: LD_INT 4
2408: PPUSH
2409: CALL 55018 0 2
2413: ADD
2414: PUSH
2415: LD_INT 4
2417: PUSH
2418: LD_INT 36
2420: PPUSH
2421: LD_INT 3
2423: PPUSH
2424: CALL 55018 0 2
2428: ADD
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 31
2437: PUSH
2438: LD_INT 43
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: CALL 55018 0 2
2448: ADD
2449: PUSH
2450: LD_INT 31
2452: PUSH
2453: LD_INT 44
2455: PPUSH
2456: LD_INT 2
2458: PPUSH
2459: CALL 55018 0 2
2463: ADD
2464: PUSH
2465: LD_INT 4
2467: PUSH
2468: LD_INT 42
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL 55018 0 2
2478: ADD
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: LD_INT 31
2487: PUSH
2488: LD_INT 49
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL 55018 0 2
2498: ADD
2499: PUSH
2500: LD_INT 31
2502: PUSH
2503: LD_INT 50
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL 55018 0 2
2513: ADD
2514: PUSH
2515: LD_INT 4
2517: PUSH
2518: LD_INT 48
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL 55018 0 2
2528: ADD
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 31
2537: PUSH
2538: LD_INT 55
2540: PPUSH
2541: LD_INT 2
2543: PPUSH
2544: CALL 55018 0 2
2548: ADD
2549: PUSH
2550: LD_INT 31
2552: PUSH
2553: LD_INT 56
2555: PPUSH
2556: LD_INT 3
2558: PPUSH
2559: CALL 55018 0 2
2563: ADD
2564: PUSH
2565: LD_INT 4
2567: PUSH
2568: LD_INT 54
2570: PPUSH
2571: LD_INT 3
2573: PPUSH
2574: CALL 55018 0 2
2578: ADD
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: ST_TO_ADDR
// end ; end ;
2595: LD_VAR 0 2
2599: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2600: GO 2602
2602: DISABLE
2603: LD_INT 0
2605: PPUSH
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
// begin if not mpShipments then
2613: LD_EXP 27
2617: NOT
2618: IFFALSE 2622
// exit ;
2620: GO 3077
// case mpShipments of 1 :
2622: LD_EXP 27
2626: PUSH
2627: LD_INT 1
2629: DOUBLE
2630: EQUAL
2631: IFTRUE 2635
2633: GO 2670
2635: POP
// begin time := 0 0$30 ;
2636: LD_ADDR_VAR 0 5
2640: PUSH
2641: LD_INT 1050
2643: ST_TO_ADDR
// normalTime := 0 0$30 ;
2644: LD_ADDR_VAR 0 6
2648: PUSH
2649: LD_INT 1050
2651: ST_TO_ADDR
// maxTime := 1 1$20 ;
2652: LD_ADDR_VAR 0 8
2656: PUSH
2657: LD_INT 2800
2659: ST_TO_ADDR
// delayTime := 0 0$5 ;
2660: LD_ADDR_VAR 0 7
2664: PUSH
2665: LD_INT 175
2667: ST_TO_ADDR
// end ; 2 :
2668: GO 2800
2670: LD_INT 2
2672: DOUBLE
2673: EQUAL
2674: IFTRUE 2678
2676: GO 2713
2678: POP
// begin time := 0 0$25 ;
2679: LD_ADDR_VAR 0 5
2683: PUSH
2684: LD_INT 875
2686: ST_TO_ADDR
// normalTime := 0 0$25 ;
2687: LD_ADDR_VAR 0 6
2691: PUSH
2692: LD_INT 875
2694: ST_TO_ADDR
// maxTime := 1 1$10 ;
2695: LD_ADDR_VAR 0 8
2699: PUSH
2700: LD_INT 2450
2702: ST_TO_ADDR
// delayTime := 0 0$4 ;
2703: LD_ADDR_VAR 0 7
2707: PUSH
2708: LD_INT 140
2710: ST_TO_ADDR
// end ; 3 :
2711: GO 2800
2713: LD_INT 3
2715: DOUBLE
2716: EQUAL
2717: IFTRUE 2721
2719: GO 2756
2721: POP
// begin time := 0 0$20 ;
2722: LD_ADDR_VAR 0 5
2726: PUSH
2727: LD_INT 700
2729: ST_TO_ADDR
// normalTime := 0 0$20 ;
2730: LD_ADDR_VAR 0 6
2734: PUSH
2735: LD_INT 700
2737: ST_TO_ADDR
// maxTime := 1 1$00 ;
2738: LD_ADDR_VAR 0 8
2742: PUSH
2743: LD_INT 2100
2745: ST_TO_ADDR
// delayTime := 0 0$3 ;
2746: LD_ADDR_VAR 0 7
2750: PUSH
2751: LD_INT 105
2753: ST_TO_ADDR
// end ; 4 :
2754: GO 2800
2756: LD_INT 4
2758: DOUBLE
2759: EQUAL
2760: IFTRUE 2764
2762: GO 2799
2764: POP
// begin time := 0 0$15 ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_INT 525
2772: ST_TO_ADDR
// normalTime := 0 0$15 ;
2773: LD_ADDR_VAR 0 6
2777: PUSH
2778: LD_INT 525
2780: ST_TO_ADDR
// maxTime := 0 0$55 ;
2781: LD_ADDR_VAR 0 8
2785: PUSH
2786: LD_INT 1925
2788: ST_TO_ADDR
// delayTime := 0 0$2 ;
2789: LD_ADDR_VAR 0 7
2793: PUSH
2794: LD_INT 70
2796: ST_TO_ADDR
// end ; end ;
2797: GO 2800
2799: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , CenterArea , RoadArea ] ;
2800: LD_ADDR_VAR 0 4
2804: PUSH
2805: LD_INT 60
2807: PUSH
2808: LD_INT 61
2810: PUSH
2811: LD_INT 62
2813: PUSH
2814: LD_INT 63
2816: PUSH
2817: LD_INT 59
2819: PUSH
2820: LD_INT 58
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2831: LD_ADDR_VAR 0 3
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 4
2847: PUSH
2848: LD_INT 5
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: ST_TO_ADDR
// for i := 1 to 8 do
2870: LD_ADDR_VAR 0 1
2874: PUSH
2875: DOUBLE
2876: LD_INT 1
2878: DEC
2879: ST_TO_ADDR
2880: LD_INT 8
2882: PUSH
2883: FOR_TO
2884: IFFALSE 2931
// begin if not mpSidePositions [ i ] then
2886: LD_EXP 7
2890: PUSH
2891: LD_VAR 0 1
2895: ARRAY
2896: NOT
2897: IFFALSE 2901
// continue ;
2899: GO 2883
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: LD_VAR 0 4
2910: PUSH
2911: LD_VAR 0 3
2915: PUSH
2916: LD_EXP 7
2920: PUSH
2921: LD_VAR 0 1
2925: ARRAY
2926: ARRAY
2927: ADD
2928: ST_TO_ADDR
// end ;
2929: GO 2883
2931: POP
2932: POP
// x := 1 ;
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: LD_INT 1
2940: ST_TO_ADDR
// repeat wait ( time ) ;
2941: LD_VAR 0 5
2945: PPUSH
2946: CALL_OW 67
// x := Inc ( x ) ;
2950: LD_ADDR_VAR 0 2
2954: PUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: CALL 51672 0 1
2964: ST_TO_ADDR
// if x > 5 then
2965: LD_VAR 0 2
2969: PUSH
2970: LD_INT 5
2972: GREATER
2973: IFFALSE 2983
// x := 1 ;
2975: LD_ADDR_VAR 0 2
2979: PUSH
2980: LD_INT 1
2982: ST_TO_ADDR
// for i in areas do
2983: LD_ADDR_VAR 0 1
2987: PUSH
2988: LD_VAR 0 4
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3033
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_INT 1
3003: PPUSH
3004: CALL_OW 287
3008: PUSH
3009: LD_INT 30
3011: LESS
3012: IFFALSE 3031
// begin CreateCratesArea ( x , i , true ) ;
3014: LD_VAR 0 2
3018: PPUSH
3019: LD_VAR 0 1
3023: PPUSH
3024: LD_INT 1
3026: PPUSH
3027: CALL_OW 55
// end ; end ;
3031: GO 2993
3033: POP
3034: POP
// time := time + delayTime ;
3035: LD_ADDR_VAR 0 5
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: LD_VAR 0 7
3049: PLUS
3050: ST_TO_ADDR
// if time > maxTime then
3051: LD_VAR 0 5
3055: PUSH
3056: LD_VAR 0 8
3060: GREATER
3061: IFFALSE 3073
// time := normalTime ;
3063: LD_ADDR_VAR 0 5
3067: PUSH
3068: LD_VAR 0 6
3072: ST_TO_ADDR
// until false ;
3073: LD_INT 0
3075: IFFALSE 2941
// end ; end_of_file
3077: PPOPN 8
3079: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL 55816 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 8312 0 1
// end ;
3098: PPOPN 1
3100: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL 55833 0 1
// end ;
3110: PPOPN 1
3112: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3113: LD_VAR 0 1
3117: PPUSH
3118: CALL 9019 0 1
3122: PPOPN 1
3124: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: LD_VAR 0 2
3134: PPUSH
3135: CALL 55874 0 2
3139: PPOPN 2
3141: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: CALL 9072 0 3
3161: PPOPN 3
3163: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3164: LD_INT 0
3166: PPUSH
3167: PPUSH
// disable ( mpActive ) ;
3168: LD_INT 100
3170: DISABLE_MARKED
// disable ( mpWin ) ;
3171: LD_INT 101
3173: DISABLE_MARKED
// disable ( mpLose ) ;
3174: LD_INT 102
3176: DISABLE_MARKED
// mpGameType := 0 ;
3177: LD_ADDR_EXP 3
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// mpGameSettings := [ ] ;
3185: LD_ADDR_EXP 6
3189: PUSH
3190: EMPTY
3191: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3192: LD_ADDR_EXP 4
3196: PUSH
3197: EMPTY
3198: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3199: LD_ADDR_EXP 5
3203: PUSH
3204: EMPTY
3205: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3206: LD_ADDR_EXP 29
3210: PUSH
3211: LD_INT 2
3213: PUSH
3214: LD_INT 2
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3221: LD_ADDR_EXP 12
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3228: LD_ADDR_EXP 13
3232: PUSH
3233: EMPTY
3234: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3235: LD_ADDR_EXP 41
3239: PUSH
3240: EMPTY
3241: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3242: LD_ADDR_EXP 42
3246: PUSH
3247: EMPTY
3248: ST_TO_ADDR
// mpDepots := [ ] ;
3249: LD_ADDR_EXP 14
3253: PUSH
3254: EMPTY
3255: ST_TO_ADDR
// mpBuildings := [ ] ;
3256: LD_ADDR_EXP 17
3260: PUSH
3261: EMPTY
3262: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3263: LD_ADDR_EXP 18
3267: PUSH
3268: EMPTY
3269: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3270: LD_ADDR_EXP 19
3274: PUSH
3275: EMPTY
3276: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3277: LD_ADDR_EXP 20
3281: PUSH
3282: EMPTY
3283: ST_TO_ADDR
// mpStartingResources := [ ] ;
3284: LD_ADDR_EXP 15
3288: PUSH
3289: EMPTY
3290: ST_TO_ADDR
// mpStartPos := [ ] ;
3291: LD_ADDR_EXP 21
3295: PUSH
3296: EMPTY
3297: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3298: LD_ADDR_EXP 22
3302: PUSH
3303: LD_INT 1
3305: NEG
3306: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3307: LD_ADDR_EXP 23
3311: PUSH
3312: EMPTY
3313: ST_TO_ADDR
// mpApemans := [ ] ;
3314: LD_ADDR_EXP 30
3318: PUSH
3319: EMPTY
3320: ST_TO_ADDR
// mpApemansArea := [ ] ;
3321: LD_ADDR_EXP 31
3325: PUSH
3326: EMPTY
3327: ST_TO_ADDR
// mpRespawn := [ ] ;
3328: LD_ADDR_EXP 33
3332: PUSH
3333: EMPTY
3334: ST_TO_ADDR
// mpKingArea := 0 ;
3335: LD_ADDR_EXP 34
3339: PUSH
3340: LD_INT 0
3342: ST_TO_ADDR
// mpPoints := [ ] ;
3343: LD_ADDR_EXP 35
3347: PUSH
3348: EMPTY
3349: ST_TO_ADDR
// mpVehicles := 0 ;
3350: LD_ADDR_EXP 36
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// mpShipments := 0 ;
3358: LD_ADDR_EXP 27
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3366: LD_ADDR_EXP 40
3370: PUSH
3371: EMPTY
3372: PUSH
3373: EMPTY
3374: PUSH
3375: EMPTY
3376: PUSH
3377: EMPTY
3378: PUSH
3379: EMPTY
3380: PUSH
3381: EMPTY
3382: PUSH
3383: EMPTY
3384: PUSH
3385: EMPTY
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3397: LD_ADDR_EXP 32
3401: PUSH
3402: EMPTY
3403: PUSH
3404: EMPTY
3405: PUSH
3406: EMPTY
3407: PUSH
3408: EMPTY
3409: PUSH
3410: EMPTY
3411: PUSH
3412: EMPTY
3413: PUSH
3414: EMPTY
3415: PUSH
3416: EMPTY
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: ST_TO_ADDR
// mpEmissions := 0 ;
3428: LD_ADDR_EXP 37
3432: PUSH
3433: LD_INT 0
3435: ST_TO_ADDR
// mpTeleports := 0 ;
3436: LD_ADDR_EXP 43
3440: PUSH
3441: LD_INT 0
3443: ST_TO_ADDR
// mpArtifacts := 0 ;
3444: LD_ADDR_EXP 44
3448: PUSH
3449: LD_INT 0
3451: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3452: LD_ADDR_EXP 25
3456: PUSH
3457: LD_INT 3
3459: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3460: LD_ADDR_EXP 24
3464: PUSH
3465: LD_INT 15
3467: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3468: LD_ADDR_EXP 38
3472: PUSH
3473: LD_INT 0
3475: ST_TO_ADDR
// mpGameActive := false ;
3476: LD_ADDR_EXP 39
3480: PUSH
3481: LD_INT 0
3483: ST_TO_ADDR
// mpBlockRespThread := false ;
3484: LD_ADDR_EXP 45
3488: PUSH
3489: LD_INT 0
3491: ST_TO_ADDR
// for i := 1 to 32 do
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 32
3504: PUSH
3505: FOR_TO
3506: IFFALSE 3533
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3508: LD_ADDR_EXP 6
3512: PUSH
3513: LD_EXP 6
3517: PPUSH
3518: LD_VAR 0 2
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 1
3530: ST_TO_ADDR
3531: GO 3505
3533: POP
3534: POP
// end ;
3535: LD_VAR 0 1
3539: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3540: LD_INT 0
3542: PPUSH
3543: PPUSH
3544: PPUSH
3545: PPUSH
3546: PPUSH
3547: PPUSH
3548: PPUSH
3549: PPUSH
3550: PPUSH
3551: PPUSH
3552: PPUSH
3553: PPUSH
3554: PPUSH
3555: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3556: LD_ADDR_VAR 0 14
3560: PUSH
3561: LD_INT 1
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: LD_INT 3
3569: PUSH
3570: LD_INT 5
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: ST_TO_ADDR
// for i in gameTypes do
3579: LD_ADDR_VAR 0 2
3583: PUSH
3584: LD_VAR 0 14
3588: PUSH
3589: FOR_IN
3590: IFFALSE 3599
// disable ( i ) ;
3592: LD_VAR 0 2
3596: DISABLE_MARKED
3597: GO 3589
3599: POP
3600: POP
// if Multiplayer then
3601: LD_OWVAR 4
3605: IFFALSE 3789
// begin mpGameType := mp_game_type ;
3607: LD_ADDR_EXP 3
3611: PUSH
3612: LD_OWVAR 6
3616: ST_TO_ADDR
// your_side := mp_player_side ;
3617: LD_ADDR_OWVAR 2
3621: PUSH
3622: LD_OWVAR 7
3626: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3627: LD_ADDR_EXP 7
3631: PUSH
3632: LD_OWVAR 17
3636: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3637: LD_ADDR_EXP 8
3641: PUSH
3642: LD_OWVAR 15
3646: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3647: LD_ADDR_EXP 9
3651: PUSH
3652: LD_OWVAR 16
3656: ST_TO_ADDR
// mpTeams := mp_teams ;
3657: LD_ADDR_EXP 10
3661: PUSH
3662: LD_OWVAR 12
3666: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3667: LD_ADDR_VAR 0 2
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_EXP 4
3681: PPUSH
3682: CALL 14367 0 1
3686: PUSH
3687: FOR_TO
3688: IFFALSE 3764
// begin setting := mpGameSettingsKeys [ i ] ;
3690: LD_ADDR_VAR 0 12
3694: PUSH
3695: LD_EXP 4
3699: PUSH
3700: LD_VAR 0 2
3704: ARRAY
3705: ST_TO_ADDR
// if setting then
3706: LD_VAR 0 12
3710: IFFALSE 3762
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3712: LD_ADDR_EXP 6
3716: PUSH
3717: LD_EXP 6
3721: PPUSH
3722: LD_VAR 0 2
3726: PPUSH
3727: LD_EXP 5
3731: PUSH
3732: LD_VAR 0 2
3736: ARRAY
3737: PUSH
3738: LD_VAR 0 2
3742: PUSH
3743: LD_INT 1
3745: MINUS
3746: PPUSH
3747: CALL_OW 426
3751: PUSH
3752: LD_INT 1
3754: PLUS
3755: ARRAY
3756: PPUSH
3757: CALL_OW 1
3761: ST_TO_ADDR
// end ;
3762: GO 3687
3764: POP
3765: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3766: LD_ADDR_EXP 11
3770: PUSH
3771: LD_EXP 8
3775: PUSH
3776: LD_INT 0
3778: PUSH
3779: EMPTY
3780: LIST
3781: DIFF
3782: PUSH
3783: LD_INT 1
3785: GREATER
3786: ST_TO_ADDR
// end else
3787: GO 3789
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3789: LD_EXP 3
3793: PPUSH
3794: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3798: LD_EXP 18
3802: PPUSH
3803: CALL 14367 0 1
3807: IFFALSE 3838
// begin for i in mpMarkedAreas do
3809: LD_ADDR_VAR 0 2
3813: PUSH
3814: LD_EXP 18
3818: PUSH
3819: FOR_IN
3820: IFFALSE 3836
// SetAreaMapShow ( i , 0 ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_INT 0
3829: PPUSH
3830: CALL_OW 424
3834: GO 3819
3836: POP
3837: POP
// end ; for i := 1 to 8 do
3838: LD_ADDR_VAR 0 2
3842: PUSH
3843: DOUBLE
3844: LD_INT 1
3846: DEC
3847: ST_TO_ADDR
3848: LD_INT 8
3850: PUSH
3851: FOR_TO
3852: IFFALSE 5188
// begin if not mpSidePositions [ i ] then
3854: LD_EXP 7
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: NOT
3865: IFFALSE 3869
// continue ;
3867: GO 3851
// side := i ;
3869: LD_ADDR_VAR 0 7
3873: PUSH
3874: LD_VAR 0 2
3878: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3879: LD_ADDR_VAR 0 9
3883: PUSH
3884: LD_EXP 9
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3895: LD_ADDR_VAR 0 8
3899: PUSH
3900: LD_EXP 7
3904: PUSH
3905: LD_VAR 0 2
3909: ARRAY
3910: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3911: LD_EXP 12
3915: PPUSH
3916: CALL 14367 0 1
3920: IFFALSE 3997
// begin for j in mpOilDeposits [ pos ] do
3922: LD_ADDR_VAR 0 3
3926: PUSH
3927: LD_EXP 12
3931: PUSH
3932: LD_VAR 0 8
3936: ARRAY
3937: PUSH
3938: FOR_IN
3939: IFFALSE 3995
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3941: LD_VAR 0 3
3945: PUSH
3946: LD_INT 1
3948: ARRAY
3949: PPUSH
3950: LD_VAR 0 3
3954: PUSH
3955: LD_INT 2
3957: ARRAY
3958: PPUSH
3959: LD_INT 2
3961: PPUSH
3962: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3966: LD_VAR 0 3
3970: PUSH
3971: LD_INT 1
3973: ARRAY
3974: PPUSH
3975: LD_VAR 0 3
3979: PUSH
3980: LD_INT 2
3982: ARRAY
3983: PPUSH
3984: LD_VAR 0 7
3988: PPUSH
3989: CALL_OW 441
// end ;
3993: GO 3938
3995: POP
3996: POP
// end ; if Count ( mpSibDeposits ) then
3997: LD_EXP 13
4001: PPUSH
4002: CALL 14367 0 1
4006: IFFALSE 4083
// begin for j in mpSibDeposits [ pos ] do
4008: LD_ADDR_VAR 0 3
4012: PUSH
4013: LD_EXP 13
4017: PUSH
4018: LD_VAR 0 8
4022: ARRAY
4023: PUSH
4024: FOR_IN
4025: IFFALSE 4081
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4027: LD_VAR 0 3
4031: PUSH
4032: LD_INT 1
4034: ARRAY
4035: PPUSH
4036: LD_VAR 0 3
4040: PUSH
4041: LD_INT 2
4043: ARRAY
4044: PPUSH
4045: LD_INT 3
4047: PPUSH
4048: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4052: LD_VAR 0 3
4056: PUSH
4057: LD_INT 1
4059: ARRAY
4060: PPUSH
4061: LD_VAR 0 3
4065: PUSH
4066: LD_INT 2
4068: ARRAY
4069: PPUSH
4070: LD_VAR 0 7
4074: PPUSH
4075: CALL_OW 441
// end ;
4079: GO 4024
4081: POP
4082: POP
// end ; InitBc ;
4083: CALL_OW 21
// InitUc ;
4087: CALL_OW 18
// uc_side := side ;
4091: LD_ADDR_OWVAR 20
4095: PUSH
4096: LD_VAR 0 7
4100: ST_TO_ADDR
// uc_nation := nation ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_VAR 0 9
4110: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4111: LD_EXP 22
4115: PUSH
4116: LD_INT 1
4118: NEG
4119: GREATER
4120: IFFALSE 4279
// begin x := mpStartPos [ pos ] [ 1 ] ;
4122: LD_ADDR_VAR 0 5
4126: PUSH
4127: LD_EXP 21
4131: PUSH
4132: LD_VAR 0 8
4136: ARRAY
4137: PUSH
4138: LD_INT 1
4140: ARRAY
4141: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: LD_EXP 21
4151: PUSH
4152: LD_VAR 0 8
4156: ARRAY
4157: PUSH
4158: LD_INT 2
4160: ARRAY
4161: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4162: LD_VAR 0 5
4166: PPUSH
4167: LD_VAR 0 6
4171: PPUSH
4172: LD_INT 12
4174: PPUSH
4175: LD_INT 2
4177: PPUSH
4178: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4182: LD_ADDR_EXP 23
4186: PUSH
4187: LD_EXP 23
4191: PPUSH
4192: LD_VAR 0 7
4196: PPUSH
4197: LD_VAR 0 7
4201: PPUSH
4202: LD_VAR 0 5
4206: PPUSH
4207: LD_VAR 0 6
4211: PPUSH
4212: LD_INT 1
4214: PUSH
4215: LD_INT 100
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: LD_INT 70
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: LD_INT 40
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: LD_INT 10
4244: PUSH
4245: LD_INT 25
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 20
4254: PUSH
4255: LD_INT 100
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PPUSH
4269: CALL_OW 418
4273: PPUSH
4274: CALL_OW 1
4278: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4279: LD_EXP 14
4283: PPUSH
4284: CALL 14367 0 1
4288: IFFALSE 4472
// begin if mpGameType = GameTypeSurvival then
4290: LD_EXP 3
4294: PUSH
4295: LD_INT 2
4297: EQUAL
4298: IFFALSE 4318
// begin bc_level := 10 ;
4300: LD_ADDR_OWVAR 43
4304: PUSH
4305: LD_INT 10
4307: ST_TO_ADDR
// bc_type := b_warehouse ;
4308: LD_ADDR_OWVAR 42
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// end else
4316: GO 4334
// begin bc_level := 0 ;
4318: LD_ADDR_OWVAR 43
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// bc_type := b_depot ;
4326: LD_ADDR_OWVAR 42
4330: PUSH
4331: LD_INT 0
4333: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4334: LD_ADDR_VAR 0 4
4338: PUSH
4339: LD_EXP 14
4343: PUSH
4344: LD_VAR 0 8
4348: ARRAY
4349: PUSH
4350: LD_INT 1
4352: ARRAY
4353: PPUSH
4354: LD_EXP 14
4358: PUSH
4359: LD_VAR 0 8
4363: ARRAY
4364: PUSH
4365: LD_INT 2
4367: ARRAY
4368: PPUSH
4369: LD_EXP 14
4373: PUSH
4374: LD_VAR 0 8
4378: ARRAY
4379: PUSH
4380: LD_INT 3
4382: ARRAY
4383: PPUSH
4384: CALL_OW 47
4388: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4389: LD_VAR 0 4
4393: PPUSH
4394: LD_STRING @
4396: PUSH
4397: LD_VAR 0 7
4401: STR
4402: PPUSH
4403: CALL_OW 500
// if Count ( mpStartingResources ) then
4407: LD_EXP 15
4411: PPUSH
4412: CALL 14367 0 1
4416: IFFALSE 4470
// begin for j := 1 to mpStartingResources do
4418: LD_ADDR_VAR 0 3
4422: PUSH
4423: DOUBLE
4424: LD_INT 1
4426: DEC
4427: ST_TO_ADDR
4428: LD_EXP 15
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4468
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4436: LD_VAR 0 4
4440: PPUSH
4441: CALL_OW 274
4445: PPUSH
4446: LD_VAR 0 3
4450: PPUSH
4451: LD_EXP 15
4455: PUSH
4456: LD_VAR 0 3
4460: ARRAY
4461: PPUSH
4462: CALL_OW 277
4466: GO 4433
4468: POP
4469: POP
// end ; end else
4470: GO 4679
// if Count ( mpStartingResources ) then
4472: LD_EXP 15
4476: PPUSH
4477: CALL 14367 0 1
4481: IFFALSE 4679
// begin x := mpStartPos [ pos ] [ 1 ] ;
4483: LD_ADDR_VAR 0 5
4487: PUSH
4488: LD_EXP 21
4492: PUSH
4493: LD_VAR 0 8
4497: ARRAY
4498: PUSH
4499: LD_INT 1
4501: ARRAY
4502: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4503: LD_ADDR_VAR 0 6
4507: PUSH
4508: LD_EXP 21
4512: PUSH
4513: LD_VAR 0 8
4517: ARRAY
4518: PUSH
4519: LD_INT 2
4521: ARRAY
4522: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4523: LD_ADDR_VAR 0 3
4527: PUSH
4528: DOUBLE
4529: LD_INT 1
4531: DEC
4532: ST_TO_ADDR
4533: LD_EXP 15
4537: PUSH
4538: FOR_TO
4539: IFFALSE 4677
// begin resources := mpStartingResources [ j ] ;
4541: LD_ADDR_VAR 0 13
4545: PUSH
4546: LD_EXP 15
4550: PUSH
4551: LD_VAR 0 3
4555: ARRAY
4556: ST_TO_ADDR
// if resources = 0 then
4557: LD_VAR 0 13
4561: PUSH
4562: LD_INT 0
4564: EQUAL
4565: IFFALSE 4569
// continue ;
4567: GO 4538
// repeat if resources >= 50 then
4569: LD_VAR 0 13
4573: PUSH
4574: LD_INT 50
4576: GREATEREQUAL
4577: IFFALSE 4623
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4579: LD_VAR 0 3
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_VAR 0 5
4591: PPUSH
4592: LD_VAR 0 6
4596: PPUSH
4597: LD_INT 6
4599: PPUSH
4600: LD_INT 0
4602: PPUSH
4603: CALL_OW 60
// resources := resources - 50 ;
4607: LD_ADDR_VAR 0 13
4611: PUSH
4612: LD_VAR 0 13
4616: PUSH
4617: LD_INT 50
4619: MINUS
4620: ST_TO_ADDR
// end else
4621: GO 4665
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4623: LD_VAR 0 3
4627: PPUSH
4628: LD_VAR 0 13
4632: PUSH
4633: LD_INT 10
4635: DIV
4636: PPUSH
4637: LD_VAR 0 5
4641: PPUSH
4642: LD_VAR 0 6
4646: PPUSH
4647: LD_INT 6
4649: PPUSH
4650: LD_INT 0
4652: PPUSH
4653: CALL_OW 60
// resources := 0 ;
4657: LD_ADDR_VAR 0 13
4661: PUSH
4662: LD_INT 0
4664: ST_TO_ADDR
// end ; until resources <= 0 ;
4665: LD_VAR 0 13
4669: PUSH
4670: LD_INT 0
4672: LESSEQUAL
4673: IFFALSE 4569
// end ;
4675: GO 4538
4677: POP
4678: POP
// end ; if Count ( mpBuildings ) then
4679: LD_EXP 17
4683: PPUSH
4684: CALL 14367 0 1
4688: IFFALSE 4766
// begin for j in mpBuildings [ pos ] do
4690: LD_ADDR_VAR 0 3
4694: PUSH
4695: LD_EXP 17
4699: PUSH
4700: LD_VAR 0 8
4704: ARRAY
4705: PUSH
4706: FOR_IN
4707: IFFALSE 4764
// begin bc_level := 0 ;
4709: LD_ADDR_OWVAR 43
4713: PUSH
4714: LD_INT 0
4716: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4717: LD_ADDR_OWVAR 42
4721: PUSH
4722: LD_VAR 0 3
4726: PUSH
4727: LD_INT 1
4729: ARRAY
4730: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4731: LD_VAR 0 3
4735: PUSH
4736: LD_INT 2
4738: ARRAY
4739: PPUSH
4740: LD_VAR 0 3
4744: PUSH
4745: LD_INT 3
4747: ARRAY
4748: PPUSH
4749: LD_VAR 0 3
4753: PUSH
4754: LD_INT 4
4756: ARRAY
4757: PPUSH
4758: CALL_OW 47
// end ;
4762: GO 4706
4764: POP
4765: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4766: LD_EXP 26
4770: IFFALSE 4790
4772: PUSH
4773: LD_INT 20
4775: PPUSH
4776: LD_VAR 0 7
4780: PPUSH
4781: CALL_OW 321
4785: PUSH
4786: LD_INT 1
4788: EQUAL
4789: AND
4790: IFFALSE 4807
// SetTech ( tech_SibDet , side , state_researched ) ;
4792: LD_INT 20
4794: PPUSH
4795: LD_VAR 0 7
4799: PPUSH
4800: LD_INT 2
4802: PPUSH
4803: CALL_OW 322
// if not mpArtifacts then
4807: LD_EXP 44
4811: NOT
4812: IFFALSE 4829
// SetTech ( tech_artifact , side , state_disabled ) ;
4814: LD_INT 24
4816: PPUSH
4817: LD_VAR 0 7
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 322
// if mpSibBomb = 1 then
4829: LD_EXP 28
4833: PUSH
4834: LD_INT 1
4836: EQUAL
4837: IFFALSE 4856
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4839: LD_INT 25
4841: PPUSH
4842: LD_VAR 0 7
4846: PPUSH
4847: LD_INT 1
4849: PPUSH
4850: CALL_OW 322
// end else
4854: GO 4871
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4856: LD_INT 25
4858: PPUSH
4859: LD_VAR 0 7
4863: PPUSH
4864: LD_INT 0
4866: PPUSH
4867: CALL_OW 322
// end ; if mpVehicles then
4871: LD_EXP 36
4875: IFFALSE 4974
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: LD_VAR 0 7
4886: PPUSH
4887: LD_VAR 0 9
4891: PPUSH
4892: LD_EXP 36
4896: PPUSH
4897: CALL 6098 0 3
4901: PUSH
4902: FOR_IN
4903: IFFALSE 4972
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4905: LD_VAR 0 3
4909: PPUSH
4910: LD_INT 0
4912: PPUSH
4913: LD_INT 5
4915: PPUSH
4916: CALL_OW 12
4920: PPUSH
4921: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4925: LD_VAR 0 3
4929: PPUSH
4930: LD_EXP 21
4934: PUSH
4935: LD_VAR 0 8
4939: ARRAY
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: LD_EXP 21
4949: PUSH
4950: LD_VAR 0 8
4954: ARRAY
4955: PUSH
4956: LD_INT 2
4958: ARRAY
4959: PPUSH
4960: LD_INT 12
4962: PPUSH
4963: LD_INT 0
4965: PPUSH
4966: CALL_OW 50
// end ;
4970: GO 4902
4972: POP
4973: POP
// end ; uc_nation := nation ;
4974: LD_ADDR_OWVAR 21
4978: PUSH
4979: LD_VAR 0 9
4983: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4984: LD_ADDR_VAR 0 11
4988: PUSH
4989: LD_VAR 0 7
4993: PPUSH
4994: LD_VAR 0 9
4998: PPUSH
4999: LD_EXP 24
5003: PPUSH
5004: LD_EXP 25
5008: PPUSH
5009: CALL 5600 0 4
5013: ST_TO_ADDR
// for j in team do
5014: LD_ADDR_VAR 0 3
5018: PUSH
5019: LD_VAR 0 11
5023: PUSH
5024: FOR_IN
5025: IFFALSE 5074
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_EXP 21
5036: PUSH
5037: LD_VAR 0 8
5041: ARRAY
5042: PUSH
5043: LD_INT 1
5045: ARRAY
5046: PPUSH
5047: LD_EXP 21
5051: PUSH
5052: LD_VAR 0 8
5056: ARRAY
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_INT 12
5064: PPUSH
5065: LD_INT 0
5067: PPUSH
5068: CALL_OW 50
5072: GO 5024
5074: POP
5075: POP
// if mpApemans then
5076: LD_EXP 30
5080: IFFALSE 5186
// begin for j := 1 to mpApemans do
5082: LD_ADDR_VAR 0 3
5086: PUSH
5087: DOUBLE
5088: LD_INT 1
5090: DEC
5091: ST_TO_ADDR
5092: LD_EXP 30
5096: PUSH
5097: FOR_TO
5098: IFFALSE 5184
// begin PrepareApeman ( - 5 ) ;
5100: LD_INT 5
5102: NEG
5103: PPUSH
5104: CALL 46426 0 1
// ape := CreateHuman ;
5108: LD_ADDR_VAR 0 10
5112: PUSH
5113: CALL_OW 44
5117: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5118: LD_ADDR_EXP 32
5122: PUSH
5123: LD_EXP 32
5127: PPUSH
5128: LD_VAR 0 8
5132: PPUSH
5133: LD_EXP 32
5137: PUSH
5138: LD_VAR 0 8
5142: ARRAY
5143: PPUSH
5144: LD_VAR 0 10
5148: PPUSH
5149: CALL 50299 0 2
5153: PPUSH
5154: CALL_OW 1
5158: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5159: LD_VAR 0 10
5163: PPUSH
5164: LD_EXP 31
5168: PUSH
5169: LD_VAR 0 8
5173: ARRAY
5174: PPUSH
5175: LD_INT 0
5177: PPUSH
5178: CALL_OW 49
// end ;
5182: GO 5097
5184: POP
5185: POP
// end ; end ;
5186: GO 3851
5188: POP
5189: POP
// if not mpTeamGame then
5190: LD_EXP 11
5194: NOT
5195: IFFALSE 5293
// begin for i := 1 to 8 do
5197: LD_ADDR_VAR 0 2
5201: PUSH
5202: DOUBLE
5203: LD_INT 1
5205: DEC
5206: ST_TO_ADDR
5207: LD_INT 8
5209: PUSH
5210: FOR_TO
5211: IFFALSE 5289
// for j := 1 to 8 do
5213: LD_ADDR_VAR 0 3
5217: PUSH
5218: DOUBLE
5219: LD_INT 1
5221: DEC
5222: ST_TO_ADDR
5223: LD_INT 8
5225: PUSH
5226: FOR_TO
5227: IFFALSE 5285
// if i <> j then
5229: LD_VAR 0 2
5233: PUSH
5234: LD_VAR 0 3
5238: NONEQUAL
5239: IFFALSE 5263
// SetAttitude ( i , j , att_neutral , true ) else
5241: LD_VAR 0 2
5245: PPUSH
5246: LD_VAR 0 3
5250: PPUSH
5251: LD_INT 0
5253: PPUSH
5254: LD_INT 1
5256: PPUSH
5257: CALL_OW 80
5261: GO 5283
// SetAttitude ( i , j , att_friend , true ) ;
5263: LD_VAR 0 2
5267: PPUSH
5268: LD_VAR 0 3
5272: PPUSH
5273: LD_INT 1
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: CALL_OW 80
5283: GO 5226
5285: POP
5286: POP
5287: GO 5210
5289: POP
5290: POP
// end else
5291: GO 5468
// begin if mpSharedVision then
5293: LD_EXP 16
5297: IFFALSE 5362
// begin for i in mpTeams do
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: LD_EXP 10
5308: PUSH
5309: FOR_IN
5310: IFFALSE 5360
// for j := 2 to i do
5312: LD_ADDR_VAR 0 3
5316: PUSH
5317: DOUBLE
5318: LD_INT 2
5320: DEC
5321: ST_TO_ADDR
5322: LD_VAR 0 2
5326: PUSH
5327: FOR_TO
5328: IFFALSE 5356
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5330: LD_VAR 0 2
5334: PUSH
5335: LD_VAR 0 3
5339: ARRAY
5340: PPUSH
5341: LD_VAR 0 2
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PPUSH
5350: CALL_OW 343
5354: GO 5327
5356: POP
5357: POP
5358: GO 5309
5360: POP
5361: POP
// end ; for i := 1 to 8 do
5362: LD_ADDR_VAR 0 2
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_INT 8
5374: PUSH
5375: FOR_TO
5376: IFFALSE 5466
// for j := 1 to 8 do
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: DOUBLE
5384: LD_INT 1
5386: DEC
5387: ST_TO_ADDR
5388: LD_INT 8
5390: PUSH
5391: FOR_TO
5392: IFFALSE 5462
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5394: LD_EXP 8
5398: PUSH
5399: LD_VAR 0 2
5403: ARRAY
5404: PUSH
5405: LD_EXP 8
5409: PUSH
5410: LD_VAR 0 3
5414: ARRAY
5415: EQUAL
5416: IFFALSE 5440
// SetAttitude ( i , j , att_friend , true ) else
5418: LD_VAR 0 2
5422: PPUSH
5423: LD_VAR 0 3
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 80
5438: GO 5460
// SetAttitude ( i , j , att_enemy , true ) ;
5440: LD_VAR 0 2
5444: PPUSH
5445: LD_VAR 0 3
5449: PPUSH
5450: LD_INT 2
5452: PPUSH
5453: LD_INT 1
5455: PPUSH
5456: CALL_OW 80
5460: GO 5391
5462: POP
5463: POP
5464: GO 5375
5466: POP
5467: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5468: LD_ADDR_OWVAR 71
5472: PUSH
5473: LD_EXP 9
5477: PUSH
5478: LD_OWVAR 2
5482: ARRAY
5483: ST_TO_ADDR
// if IAmSpec then
5484: CALL_OW 531
5488: IFFALSE 5529
// begin FogOff ( true ) ;
5490: LD_INT 1
5492: PPUSH
5493: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5497: LD_EXP 29
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PUSH
5506: LD_INT 2
5508: DIV
5509: PPUSH
5510: LD_EXP 29
5514: PUSH
5515: LD_INT 2
5517: ARRAY
5518: PUSH
5519: LD_INT 2
5521: DIV
5522: PPUSH
5523: CALL_OW 86
// end else
5527: GO 5575
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5529: LD_EXP 21
5533: PUSH
5534: LD_EXP 7
5538: PUSH
5539: LD_OWVAR 2
5543: ARRAY
5544: ARRAY
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: LD_EXP 21
5554: PUSH
5555: LD_EXP 7
5559: PUSH
5560: LD_OWVAR 2
5564: ARRAY
5565: ARRAY
5566: PUSH
5567: LD_INT 2
5569: ARRAY
5570: PPUSH
5571: CALL_OW 86
// end ; BeginBuildUp ;
5575: CALL 6631 0 0
// enable ( mpActive ) ;
5579: LD_INT 100
5581: ENABLE_MARKED
// enable ( mpGameType ) ;
5582: LD_EXP 3
5586: ENABLE_MARKED
// mpGameActive := true ;
5587: LD_ADDR_EXP 39
5591: PUSH
5592: LD_INT 1
5594: ST_TO_ADDR
// end ;
5595: LD_VAR 0 1
5599: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5600: LD_INT 0
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
// result := [ ] ;
5606: LD_ADDR_VAR 0 5
5610: PUSH
5611: EMPTY
5612: ST_TO_ADDR
// class := class_soldier ;
5613: LD_ADDR_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: ST_TO_ADDR
// uc_side := side ;
5621: LD_ADDR_OWVAR 20
5625: PUSH
5626: LD_VAR 0 1
5630: ST_TO_ADDR
// uc_nation := nation ;
5631: LD_ADDR_OWVAR 21
5635: PUSH
5636: LD_VAR 0 2
5640: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5641: LD_ADDR_OWVAR 26
5645: PUSH
5646: LD_OWVAR 19
5650: PUSH
5651: LD_VAR 0 1
5655: ARRAY
5656: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5657: LD_INT 1
5659: PPUSH
5660: LD_INT 2
5662: PPUSH
5663: CALL_OW 12
5667: PPUSH
5668: LD_VAR 0 8
5672: PPUSH
5673: LD_VAR 0 4
5677: PUSH
5678: LD_INT 2
5680: PLUS
5681: PPUSH
5682: CALL_OW 380
// hc_importance := 105 ;
5686: LD_ADDR_OWVAR 32
5690: PUSH
5691: LD_INT 105
5693: ST_TO_ADDR
// if Multiplayer then
5694: LD_OWVAR 4
5698: IFFALSE 5738
// begin hc_gallery := MULTIAVATARS ;
5700: LD_ADDR_OWVAR 33
5704: PUSH
5705: LD_STRING MULTIAVATARS
5707: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5708: LD_ADDR_OWVAR 34
5712: PUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 525
5722: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5723: LD_ADDR_OWVAR 27
5727: PUSH
5728: LD_VAR 0 1
5732: PPUSH
5733: CALL_OW 526
5737: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5738: LD_ADDR_VAR 0 5
5742: PUSH
5743: LD_VAR 0 5
5747: PPUSH
5748: CALL_OW 44
5752: PPUSH
5753: CALL 50299 0 2
5757: ST_TO_ADDR
// if mpTeamPreset then
5758: LD_LOC 1
5762: IFFALSE 5858
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5764: LD_LOC 1
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: LD_VAR 0 5
5777: PUSH
5778: LD_VAR 0 5
5782: ARRAY
5783: PPUSH
5784: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5788: LD_VAR 0 5
5792: PUSH
5793: LD_VAR 0 5
5797: ARRAY
5798: PPUSH
5799: LD_INT 1
5801: PPUSH
5802: LD_LOC 1
5806: PUSH
5807: LD_INT 1
5809: ARRAY
5810: PPUSH
5811: LD_INT 1
5813: PPUSH
5814: CALL_OW 260
5818: PPUSH
5819: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5823: LD_VAR 0 5
5827: PUSH
5828: LD_VAR 0 5
5832: ARRAY
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: LD_LOC 1
5841: PUSH
5842: LD_INT 1
5844: ARRAY
5845: PPUSH
5846: LD_INT 2
5848: PPUSH
5849: CALL_OW 260
5853: PPUSH
5854: CALL_OW 239
// end ; InitHc_All ( ) ;
5858: CALL_OW 584
// class := 2 ;
5862: LD_ADDR_VAR 0 8
5866: PUSH
5867: LD_INT 2
5869: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5870: LD_ADDR_VAR 0 6
5874: PUSH
5875: DOUBLE
5876: LD_INT 1
5878: DEC
5879: ST_TO_ADDR
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 1
5887: MINUS
5888: PUSH
5889: FOR_TO
5890: IFFALSE 6074
// begin PrepareHuman ( false , class , skill ) ;
5892: LD_INT 0
5894: PPUSH
5895: LD_VAR 0 8
5899: PPUSH
5900: LD_VAR 0 4
5904: PPUSH
5905: CALL_OW 380
// un := CreateHuman ;
5909: LD_ADDR_VAR 0 7
5913: PUSH
5914: CALL_OW 44
5918: ST_TO_ADDR
// result := Join ( result , un ) ;
5919: LD_ADDR_VAR 0 5
5923: PUSH
5924: LD_VAR 0 5
5928: PPUSH
5929: LD_VAR 0 7
5933: PPUSH
5934: CALL 50299 0 2
5938: ST_TO_ADDR
// if mpTeamPreset then
5939: LD_LOC 1
5943: IFFALSE 6039
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5945: LD_LOC 1
5949: PUSH
5950: LD_VAR 0 6
5954: PUSH
5955: LD_INT 1
5957: PLUS
5958: ARRAY
5959: PPUSH
5960: LD_VAR 0 7
5964: PPUSH
5965: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5969: LD_VAR 0 7
5973: PPUSH
5974: LD_INT 1
5976: PPUSH
5977: LD_LOC 1
5981: PUSH
5982: LD_VAR 0 6
5986: PUSH
5987: LD_INT 1
5989: PLUS
5990: ARRAY
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 260
5999: PPUSH
6000: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6004: LD_VAR 0 7
6008: PPUSH
6009: LD_INT 2
6011: PPUSH
6012: LD_LOC 1
6016: PUSH
6017: LD_VAR 0 6
6021: PUSH
6022: LD_INT 1
6024: PLUS
6025: ARRAY
6026: PPUSH
6027: LD_INT 2
6029: PPUSH
6030: CALL_OW 260
6034: PPUSH
6035: CALL_OW 239
// end ; class := Inc ( class ) ;
6039: LD_ADDR_VAR 0 8
6043: PUSH
6044: LD_VAR 0 8
6048: PPUSH
6049: CALL 51672 0 1
6053: ST_TO_ADDR
// if class = 5 then
6054: LD_VAR 0 8
6058: PUSH
6059: LD_INT 5
6061: EQUAL
6062: IFFALSE 6072
// class := 1 ;
6064: LD_ADDR_VAR 0 8
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// end ;
6072: GO 5889
6074: POP
6075: POP
// if not mpTeamPreset then
6076: LD_LOC 1
6080: NOT
6081: IFFALSE 6093
// mpTeamPreset := result ;
6083: LD_ADDR_LOC 1
6087: PUSH
6088: LD_VAR 0 5
6092: ST_TO_ADDR
// end ;
6093: LD_VAR 0 5
6097: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6098: LD_INT 0
6100: PPUSH
6101: PPUSH
// result := [ ] ;
6102: LD_ADDR_VAR 0 4
6106: PUSH
6107: EMPTY
6108: ST_TO_ADDR
// if not vehicles then
6109: LD_VAR 0 3
6113: NOT
6114: IFFALSE 6118
// exit ;
6116: GO 6332
// for i := 1 to vehicles [ nation ] do
6118: LD_ADDR_VAR 0 5
6122: PUSH
6123: DOUBLE
6124: LD_INT 1
6126: DEC
6127: ST_TO_ADDR
6128: LD_VAR 0 3
6132: PUSH
6133: LD_VAR 0 2
6137: ARRAY
6138: PUSH
6139: FOR_TO
6140: IFFALSE 6330
// begin uc_side := side ;
6142: LD_ADDR_OWVAR 20
6146: PUSH
6147: LD_VAR 0 1
6151: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6152: LD_VAR 0 3
6156: PUSH
6157: LD_VAR 0 2
6161: ARRAY
6162: PUSH
6163: LD_VAR 0 5
6167: ARRAY
6168: PPUSH
6169: CALL 14367 0 1
6173: PUSH
6174: LD_INT 4
6176: GREATER
6177: IFFALSE 6207
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6179: LD_ADDR_OWVAR 21
6183: PUSH
6184: LD_VAR 0 3
6188: PUSH
6189: LD_VAR 0 2
6193: ARRAY
6194: PUSH
6195: LD_VAR 0 5
6199: ARRAY
6200: PUSH
6201: LD_INT 5
6203: ARRAY
6204: ST_TO_ADDR
6205: GO 6217
// uc_nation := nation ;
6207: LD_ADDR_OWVAR 21
6211: PUSH
6212: LD_VAR 0 2
6216: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6217: LD_VAR 0 3
6221: PUSH
6222: LD_VAR 0 2
6226: ARRAY
6227: PUSH
6228: LD_VAR 0 5
6232: ARRAY
6233: PUSH
6234: LD_INT 1
6236: ARRAY
6237: PPUSH
6238: LD_VAR 0 3
6242: PUSH
6243: LD_VAR 0 2
6247: ARRAY
6248: PUSH
6249: LD_VAR 0 5
6253: ARRAY
6254: PUSH
6255: LD_INT 2
6257: ARRAY
6258: PPUSH
6259: LD_VAR 0 3
6263: PUSH
6264: LD_VAR 0 2
6268: ARRAY
6269: PUSH
6270: LD_VAR 0 5
6274: ARRAY
6275: PUSH
6276: LD_INT 3
6278: ARRAY
6279: PPUSH
6280: LD_VAR 0 3
6284: PUSH
6285: LD_VAR 0 2
6289: ARRAY
6290: PUSH
6291: LD_VAR 0 5
6295: ARRAY
6296: PUSH
6297: LD_INT 4
6299: ARRAY
6300: PPUSH
6301: LD_INT 80
6303: PPUSH
6304: CALL 17129 0 5
// result := Join ( result , CreateVehicle ) ;
6308: LD_ADDR_VAR 0 4
6312: PUSH
6313: LD_VAR 0 4
6317: PPUSH
6318: CALL_OW 45
6322: PPUSH
6323: CALL 50299 0 2
6327: ST_TO_ADDR
// end ;
6328: GO 6139
6330: POP
6331: POP
// end ;
6332: LD_VAR 0 4
6336: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6337: LD_INT 0
6339: PPUSH
6340: PPUSH
// for i in mpBattleFlags do
6341: LD_ADDR_VAR 0 3
6345: PUSH
6346: LD_EXP 23
6350: PUSH
6351: FOR_IN
6352: IFFALSE 6429
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6354: LD_VAR 0 3
6358: PPUSH
6359: LD_INT 1
6361: PUSH
6362: LD_VAR 0 1
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 2
6373: PUSH
6374: LD_VAR 0 1
6378: PUSH
6379: LD_REAL  7.00000000000000E-0001
6382: MUL
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 3
6390: PUSH
6391: LD_VAR 0 1
6395: PUSH
6396: LD_REAL  4.00000000000000E-0001
6399: MUL
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 20
6407: PUSH
6408: LD_VAR 0 1
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PPUSH
6423: CALL_OW 423
6427: GO 6351
6429: POP
6430: POP
// end ;
6431: LD_VAR 0 2
6435: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6436: LD_INT 100
6438: IFFALSE 6533
6440: GO 6442
6442: DISABLE
6443: LD_INT 0
6445: PPUSH
6446: PPUSH
// begin if mpBattleFlag <= 0 then
6447: LD_EXP 22
6451: PUSH
6452: LD_INT 0
6454: LESSEQUAL
6455: IFFALSE 6459
// exit ;
6457: GO 6533
// strength := 100 ;
6459: LD_ADDR_VAR 0 2
6463: PUSH
6464: LD_INT 100
6466: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6467: LD_EXP 22
6471: PPUSH
6472: CALL_OW 67
// strength := Dec ( strength ) ;
6476: LD_ADDR_VAR 0 2
6480: PUSH
6481: LD_VAR 0 2
6485: PPUSH
6486: CALL 51694 0 1
6490: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: CALL 6337 0 1
// until not strength ;
6500: LD_VAR 0 2
6504: NOT
6505: IFFALSE 6467
// for i in mpBattleFlags do
6507: LD_ADDR_VAR 0 1
6511: PUSH
6512: LD_EXP 23
6516: PUSH
6517: FOR_IN
6518: IFFALSE 6531
// KillBattleFlag ( i ) ;
6520: LD_VAR 0 1
6524: PPUSH
6525: CALL_OW 419
6529: GO 6517
6531: POP
6532: POP
// end ;
6533: PPOPN 2
6535: END
// every 0 0$1 marked mpActive do var side , tmp ;
6536: GO 6538
6538: DISABLE
6539: LD_INT 0
6541: PPUSH
6542: PPUSH
// begin if mpSibBomb <= 1 then
6543: LD_EXP 28
6547: PUSH
6548: LD_INT 1
6550: LESSEQUAL
6551: IFFALSE 6555
// exit ;
6553: GO 6628
// tmp := mpSibBomb ;
6555: LD_ADDR_VAR 0 2
6559: PUSH
6560: LD_EXP 28
6564: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6565: LD_INT 35
6567: PPUSH
6568: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6572: LD_ADDR_VAR 0 2
6576: PUSH
6577: LD_VAR 0 2
6581: PUSH
6582: LD_INT 35
6584: MINUS
6585: ST_TO_ADDR
// until not tmp ;
6586: LD_VAR 0 2
6590: NOT
6591: IFFALSE 6565
// for side := 1 to 8 do
6593: LD_ADDR_VAR 0 1
6597: PUSH
6598: DOUBLE
6599: LD_INT 1
6601: DEC
6602: ST_TO_ADDR
6603: LD_INT 8
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6626
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6609: LD_INT 25
6611: PPUSH
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_INT 1
6619: PPUSH
6620: CALL_OW 322
6624: GO 6606
6626: POP
6627: POP
// end ;
6628: PPOPN 2
6630: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6631: LD_INT 0
6633: PPUSH
6634: PPUSH
6635: PPUSH
// mpBuildUpTimeDelay := 0 ;
6636: LD_ADDR_EXP 46
6640: PUSH
6641: LD_INT 0
6643: ST_TO_ADDR
// if not mpBuildUpTime then
6644: LD_EXP 20
6648: NOT
6649: IFFALSE 6653
// exit ;
6651: GO 6842
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6653: LD_ADDR_EXP 46
6657: PUSH
6658: LD_INT 8400
6660: PUSH
6661: LD_INT 2100
6663: PUSH
6664: LD_EXP 20
6668: MUL
6669: PLUS
6670: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6671: LD_ADDR_EXP 47
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// for i := 1 to 8 do
6679: LD_ADDR_VAR 0 2
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_INT 8
6691: PUSH
6692: FOR_TO
6693: IFFALSE 6840
// if mpSidePositions [ i ] then
6695: LD_EXP 7
6699: PUSH
6700: LD_VAR 0 2
6704: ARRAY
6705: IFFALSE 6838
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6707: LD_EXP 19
6711: PUSH
6712: LD_EXP 7
6716: PUSH
6717: LD_VAR 0 2
6721: ARRAY
6722: ARRAY
6723: PPUSH
6724: LD_INT 5
6726: PPUSH
6727: CALL_OW 424
// for j := 1 to 8 do
6731: LD_ADDR_VAR 0 3
6735: PUSH
6736: DOUBLE
6737: LD_INT 1
6739: DEC
6740: ST_TO_ADDR
6741: LD_INT 8
6743: PUSH
6744: FOR_TO
6745: IFFALSE 6836
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6747: LD_EXP 7
6751: PUSH
6752: LD_VAR 0 3
6756: ARRAY
6757: IFFALSE 6806
6759: PUSH
6760: LD_EXP 8
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PUSH
6771: LD_EXP 8
6775: PUSH
6776: LD_VAR 0 3
6780: ARRAY
6781: NONEQUAL
6782: IFTRUE 6805
6784: PUSH
6785: LD_EXP 11
6789: NOT
6790: IFFALSE 6804
6792: PUSH
6793: LD_VAR 0 2
6797: PUSH
6798: LD_VAR 0 3
6802: NONEQUAL
6803: AND
6804: OR
6805: AND
6806: IFFALSE 6834
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_EXP 19
6817: PUSH
6818: LD_EXP 7
6822: PUSH
6823: LD_VAR 0 2
6827: ARRAY
6828: ARRAY
6829: PPUSH
6830: CALL_OW 333
6834: GO 6744
6836: POP
6837: POP
// end ;
6838: GO 6692
6840: POP
6841: POP
// end ;
6842: LD_VAR 0 1
6846: RET
// function EndBuildUp ; var i , j ; begin
6847: LD_INT 0
6849: PPUSH
6850: PPUSH
6851: PPUSH
// mpBuildUpTimeActive := false ;
6852: LD_ADDR_EXP 47
6856: PUSH
6857: LD_INT 0
6859: ST_TO_ADDR
// for i := 1 to 8 do
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: DOUBLE
6866: LD_INT 1
6868: DEC
6869: ST_TO_ADDR
6870: LD_INT 8
6872: PUSH
6873: FOR_TO
6874: IFFALSE 7021
// if mpSidePositions [ i ] then
6876: LD_EXP 7
6880: PUSH
6881: LD_VAR 0 2
6885: ARRAY
6886: IFFALSE 7019
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6888: LD_EXP 19
6892: PUSH
6893: LD_EXP 7
6897: PUSH
6898: LD_VAR 0 2
6902: ARRAY
6903: ARRAY
6904: PPUSH
6905: LD_INT 0
6907: PPUSH
6908: CALL_OW 424
// for j := 1 to 8 do
6912: LD_ADDR_VAR 0 3
6916: PUSH
6917: DOUBLE
6918: LD_INT 1
6920: DEC
6921: ST_TO_ADDR
6922: LD_INT 8
6924: PUSH
6925: FOR_TO
6926: IFFALSE 7017
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6928: LD_EXP 7
6932: PUSH
6933: LD_VAR 0 3
6937: ARRAY
6938: IFFALSE 6987
6940: PUSH
6941: LD_EXP 8
6945: PUSH
6946: LD_VAR 0 2
6950: ARRAY
6951: PUSH
6952: LD_EXP 8
6956: PUSH
6957: LD_VAR 0 3
6961: ARRAY
6962: NONEQUAL
6963: IFTRUE 6986
6965: PUSH
6966: LD_EXP 11
6970: NOT
6971: IFFALSE 6985
6973: PUSH
6974: LD_VAR 0 2
6978: PUSH
6979: LD_VAR 0 3
6983: NONEQUAL
6984: AND
6985: OR
6986: AND
6987: IFFALSE 7015
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6989: LD_VAR 0 3
6993: PPUSH
6994: LD_EXP 19
6998: PUSH
6999: LD_EXP 7
7003: PUSH
7004: LD_VAR 0 2
7008: ARRAY
7009: ARRAY
7010: PPUSH
7011: CALL_OW 334
7015: GO 6925
7017: POP
7018: POP
// end ;
7019: GO 6873
7021: POP
7022: POP
// end ;
7023: LD_VAR 0 1
7027: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7028: LD_EXP 47
7032: IFFALSE 7211
7034: GO 7036
7036: DISABLE
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
// begin for i := 1 to 8 do
7041: LD_ADDR_VAR 0 1
7045: PUSH
7046: DOUBLE
7047: LD_INT 1
7049: DEC
7050: ST_TO_ADDR
7051: LD_INT 8
7053: PUSH
7054: FOR_TO
7055: IFFALSE 7208
// if mpSidePositions [ i ] then
7057: LD_EXP 7
7061: PUSH
7062: LD_VAR 0 1
7066: ARRAY
7067: IFFALSE 7206
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7069: LD_ADDR_VAR 0 2
7073: PUSH
7074: LD_EXP 19
7078: PUSH
7079: LD_EXP 7
7083: PUSH
7084: LD_VAR 0 1
7088: ARRAY
7089: ARRAY
7090: PPUSH
7091: LD_INT 2
7093: PUSH
7094: LD_INT 21
7096: PUSH
7097: LD_INT 1
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PUSH
7104: LD_INT 21
7106: PUSH
7107: LD_INT 2
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 22
7121: PUSH
7122: LD_OWVAR 2
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PPUSH
7135: CALL_OW 70
7139: PUSH
7140: FOR_IN
7141: IFFALSE 7204
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7143: LD_EXP 8
7147: PUSH
7148: LD_VAR 0 1
7152: ARRAY
7153: PUSH
7154: LD_EXP 8
7158: PUSH
7159: LD_OWVAR 2
7163: ARRAY
7164: NONEQUAL
7165: IFTRUE 7188
7167: PUSH
7168: LD_EXP 11
7172: NOT
7173: IFFALSE 7187
7175: PUSH
7176: LD_VAR 0 1
7180: PUSH
7181: LD_OWVAR 2
7185: NONEQUAL
7186: AND
7187: OR
7188: IFFALSE 7202
// ComMoveToArea ( un , BuildUpEscape ) ;
7190: LD_VAR 0 2
7194: PPUSH
7195: LD_INT 57
7197: PPUSH
7198: CALL_OW 113
7202: GO 7140
7204: POP
7205: POP
7206: GO 7054
7208: POP
7209: POP
// enable ;
7210: ENABLE
// end ;
7211: PPOPN 2
7213: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7214: LD_EXP 20
7218: IFFALSE 7268
7220: GO 7222
7222: DISABLE
7223: LD_INT 0
7225: PPUSH
// begin tmp := mpBuildUpTime ;
7226: LD_ADDR_VAR 0 1
7230: PUSH
7231: LD_EXP 20
7235: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7236: LD_INT 35
7238: PPUSH
7239: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: LD_VAR 0 1
7252: PUSH
7253: LD_INT 35
7255: MINUS
7256: ST_TO_ADDR
// until not tmp ;
7257: LD_VAR 0 1
7261: NOT
7262: IFFALSE 7236
// EndBuildUp ;
7264: CALL 6847 0 0
// end ;
7268: PPOPN 1
7270: END
// every 0 0$1 trigger mpActive marked mpWin do
7271: LD_INT 100
7273: IFFALSE 7307
7275: GO 7277
7277: DISABLE
// begin if IAmServer then
7278: CALL_OW 518
7282: IFFALSE 7291
// wait ( 0 0$3 ) ;
7284: LD_INT 105
7286: PPUSH
7287: CALL_OW 67
// if Multiplayer then
7291: LD_OWVAR 4
7295: IFFALSE 7303
// YouWinInMultiplayer else
7297: CALL_OW 106
7301: GO 7307
// YouWin ;
7303: CALL_OW 103
// end ;
7307: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7308: LD_INT 0
7310: PPUSH
// result := false ;
7311: LD_ADDR_VAR 0 3
7315: PUSH
7316: LD_INT 0
7318: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
7319: LD_VAR 0 1
7323: PUSH
7324: LD_INT 1
7326: DOUBLE
7327: EQUAL
7328: IFTRUE 7338
7330: LD_INT 5
7332: DOUBLE
7333: EQUAL
7334: IFTRUE 7338
7336: GO 7411
7338: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7339: LD_ADDR_VAR 0 3
7343: PUSH
7344: LD_INT 22
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 2
7358: PUSH
7359: LD_INT 21
7361: PUSH
7362: LD_INT 1
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_INT 33
7371: PUSH
7372: LD_INT 3
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: LD_INT 33
7381: PUSH
7382: LD_INT 5
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PPUSH
7399: CALL_OW 69
7403: PPUSH
7404: CALL 14367 0 1
7408: ST_TO_ADDR
// end ; GameTypeSurvival :
7409: GO 7650
7411: LD_INT 2
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7549
7419: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7420: LD_ADDR_VAR 0 3
7424: PUSH
7425: LD_INT 22
7427: PUSH
7428: LD_VAR 0 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: LD_INT 30
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 30
7452: PUSH
7453: LD_INT 1
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 69
7473: PPUSH
7474: CALL 14367 0 1
7478: IFFALSE 7546
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_VAR 0 2
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 2
7495: PUSH
7496: LD_INT 21
7498: PUSH
7499: LD_INT 1
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 33
7508: PUSH
7509: LD_INT 3
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 33
7518: PUSH
7519: LD_INT 5
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: PUSH
7532: EMPTY
7533: LIST
7534: LIST
7535: PPUSH
7536: CALL_OW 69
7540: PPUSH
7541: CALL 14367 0 1
7545: AND
7546: ST_TO_ADDR
// end ; GameTypeKing :
7547: GO 7650
7549: LD_INT 3
7551: DOUBLE
7552: EQUAL
7553: IFTRUE 7557
7555: GO 7649
7557: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7558: LD_ADDR_VAR 0 3
7562: PUSH
7563: LD_INT 22
7565: PUSH
7566: LD_VAR 0 2
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 21
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 33
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 33
7600: PUSH
7601: LD_INT 5
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PPUSH
7618: CALL_OW 69
7622: PPUSH
7623: CALL 14367 0 1
7627: IFFALSE 7646
7629: PUSH
7630: LD_VAR 0 2
7634: PPUSH
7635: CALL 11507 0 1
7639: PUSH
7640: LD_EXP 35
7644: LESS
7645: AND
7646: ST_TO_ADDR
// end ; end ;
7647: GO 7650
7649: POP
// end ;
7650: LD_VAR 0 3
7654: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7655: LD_INT 100
7657: IFFALSE 7887
7659: GO 7661
7661: DISABLE
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
// begin if Multiplayer then
7666: LD_OWVAR 4
7670: IFFALSE 7678
// SetPlayerSpectator ( ) else
7672: CALL_OW 572
7676: GO 7687
// FogOff ( your_side ) ;
7678: LD_OWVAR 2
7682: PPUSH
7683: CALL_OW 344
// repeat gameIsOn := false ;
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_INT 0
7694: ST_TO_ADDR
// for i := 1 to 8 do
7695: LD_ADDR_VAR 0 2
7699: PUSH
7700: DOUBLE
7701: LD_INT 1
7703: DEC
7704: ST_TO_ADDR
7705: LD_INT 8
7707: PUSH
7708: FOR_TO
7709: IFFALSE 7839
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7711: LD_EXP 7
7715: PUSH
7716: LD_VAR 0 2
7720: ARRAY
7721: IFFALSE 7734
7723: PUSH
7724: LD_VAR 0 2
7728: PPUSH
7729: CALL_OW 108
7733: AND
7734: IFFALSE 7748
7736: PUSH
7737: LD_VAR 0 2
7741: PUSH
7742: LD_OWVAR 2
7746: NONEQUAL
7747: AND
7748: IFFALSE 7837
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7750: LD_EXP 8
7754: PUSH
7755: LD_VAR 0 2
7759: ARRAY
7760: NOT
7761: IFTRUE 7809
7763: PUSH
7764: LD_EXP 8
7768: PUSH
7769: LD_VAR 0 2
7773: ARRAY
7774: PUSH
7775: LD_EXP 8
7779: PUSH
7780: LD_OWVAR 2
7784: ARRAY
7785: NONEQUAL
7786: IFFALSE 7808
7788: PUSH
7789: LD_OWVAR 2
7793: PPUSH
7794: LD_VAR 0 2
7798: PPUSH
7799: CALL_OW 81
7803: PUSH
7804: LD_INT 1
7806: NONEQUAL
7807: AND
7808: OR
7809: IFFALSE 7837
// if HasPowerByGameType ( mpGameType , i ) then
7811: LD_EXP 3
7815: PPUSH
7816: LD_VAR 0 2
7820: PPUSH
7821: CALL 7308 0 2
7825: IFFALSE 7837
// begin gameIsOn := true ;
7827: LD_ADDR_VAR 0 1
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// break ;
7835: GO 7839
// end ;
7837: GO 7708
7839: POP
7840: POP
// wait ( 100 ) ;
7841: LD_INT 100
7843: PPUSH
7844: CALL_OW 67
// until not gameIsOn ;
7848: LD_VAR 0 1
7852: NOT
7853: IFFALSE 7687
// if IAmServer then
7855: CALL_OW 518
7859: IFFALSE 7868
// wait ( 0 0$3 ) ;
7861: LD_INT 105
7863: PPUSH
7864: CALL_OW 67
// if Multiplayer then
7868: LD_OWVAR 4
7872: IFFALSE 7880
// YouLostInMultiplayer else
7874: CALL_OW 107
7878: GO 7887
// YouLost (  ) ;
7880: LD_STRING 
7882: PPUSH
7883: CALL_OW 104
// end ;
7887: PPOPN 2
7889: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7890: LD_EXP 33
7894: IFFALSE 8278
7896: GO 7898
7898: DISABLE
7899: LD_INT 0
7901: PPUSH
7902: PPUSH
7903: PPUSH
7904: PPUSH
7905: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7906: LD_ADDR_VAR 0 5
7910: PUSH
7911: LD_INT 1
7913: PUSH
7914: LD_INT 2
7916: PUSH
7917: LD_INT 3
7919: PUSH
7920: LD_INT 4
7922: PUSH
7923: LD_INT 5
7925: PUSH
7926: LD_INT 6
7928: PUSH
7929: LD_INT 7
7931: PUSH
7932: LD_INT 8
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7945: LD_INT 350
7947: PPUSH
7948: CALL_OW 67
// for i := 1 to 8 do
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: DOUBLE
7958: LD_INT 1
7960: DEC
7961: ST_TO_ADDR
7962: LD_INT 8
7964: PUSH
7965: FOR_TO
7966: IFFALSE 8248
// begin j := sides [ i ] ;
7968: LD_ADDR_VAR 0 2
7972: PUSH
7973: LD_VAR 0 5
7977: PUSH
7978: LD_VAR 0 1
7982: ARRAY
7983: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7984: LD_EXP 40
7988: PUSH
7989: LD_VAR 0 2
7993: ARRAY
7994: PPUSH
7995: CALL 14367 0 1
7999: IFFALSE 8012
8001: PUSH
8002: LD_VAR 0 2
8006: PPUSH
8007: CALL_OW 108
8011: AND
8012: IFFALSE 8030
8014: PUSH
8015: LD_EXP 3
8019: PPUSH
8020: LD_VAR 0 2
8024: PPUSH
8025: CALL 7308 0 2
8029: AND
8030: IFFALSE 8246
// begin wait ( mpRespawn div 2 ) ;
8032: LD_EXP 33
8036: PUSH
8037: LD_INT 2
8039: DIV
8040: PPUSH
8041: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 50
8064: PUSH
8065: EMPTY
8066: LIST
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 30
8073: PUSH
8074: LD_INT 0
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 30
8083: PUSH
8084: LD_INT 1
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: LIST
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8106: LD_VAR 0 3
8110: NOT
8111: IFTRUE 8125
8113: PUSH
8114: LD_VAR 0 2
8118: PPUSH
8119: CALL_OW 108
8123: NOT
8124: OR
8125: IFTRUE 8144
8127: PUSH
8128: LD_EXP 3
8132: PPUSH
8133: LD_VAR 0 2
8137: PPUSH
8138: CALL 7308 0 2
8142: NOT
8143: OR
8144: IFFALSE 8148
// continue ;
8146: GO 7965
// spawn := tmp [ 1 ] ;
8148: LD_ADDR_VAR 0 4
8152: PUSH
8153: LD_VAR 0 3
8157: PUSH
8158: LD_INT 1
8160: ARRAY
8161: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8162: LD_EXP 40
8166: PUSH
8167: LD_VAR 0 2
8171: ARRAY
8172: PUSH
8173: LD_INT 1
8175: ARRAY
8176: PPUSH
8177: LD_VAR 0 4
8181: PPUSH
8182: CALL_OW 250
8186: PPUSH
8187: LD_VAR 0 4
8191: PPUSH
8192: CALL_OW 251
8196: PPUSH
8197: LD_INT 32
8199: PPUSH
8200: LD_INT 1
8202: PPUSH
8203: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8207: LD_ADDR_EXP 40
8211: PUSH
8212: LD_EXP 40
8216: PPUSH
8217: LD_VAR 0 2
8221: PPUSH
8222: LD_EXP 40
8226: PUSH
8227: LD_VAR 0 2
8231: ARRAY
8232: PPUSH
8233: LD_INT 1
8235: PPUSH
8236: CALL_OW 3
8240: PPUSH
8241: CALL_OW 1
8245: ST_TO_ADDR
// end ; end ;
8246: GO 7965
8248: POP
8249: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8250: LD_ADDR_VAR 0 5
8254: PUSH
8255: LD_VAR 0 5
8259: PPUSH
8260: LD_INT 1
8262: PPUSH
8263: LD_INT 8
8265: PPUSH
8266: LD_INT 1
8268: PPUSH
8269: CALL 16659 0 4
8273: ST_TO_ADDR
// until false ;
8274: LD_INT 0
8276: IFFALSE 7945
// end ;
8278: PPOPN 5
8280: END
// every 0 0$1 marked mpActive do
8281: GO 8283
8283: DISABLE
// begin enable ;
8284: ENABLE
// if not mpDisplayStrings then
8285: LD_EXP 38
8289: NOT
8290: IFFALSE 8301
// begin display_strings := [ ] ;
8292: LD_ADDR_OWVAR 47
8296: PUSH
8297: EMPTY
8298: ST_TO_ADDR
// exit ;
8299: GO 8311
// end ; display_strings := mpDisplayStrings ;
8301: LD_ADDR_OWVAR 47
8305: PUSH
8306: LD_EXP 38
8310: ST_TO_ADDR
// end ; end_of_file
8311: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8312: LD_INT 0
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
// if GetType ( un ) = unit_vehicle then
8323: LD_VAR 0 1
8327: PPUSH
8328: CALL_OW 247
8332: PUSH
8333: LD_INT 2
8335: EQUAL
8336: IFFALSE 8340
// exit ;
8338: GO 9014
// side := GetSide ( un ) ;
8340: LD_ADDR_VAR 0 9
8344: PUSH
8345: LD_VAR 0 1
8349: PPUSH
8350: CALL_OW 255
8354: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8355: LD_EXP 3
8359: PUSH
8360: LD_INT 2
8362: EQUAL
8363: IFFALSE 8457
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 266
8374: PUSH
8375: LD_INT 0
8377: PUSH
8378: LD_INT 1
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: IN
8385: IFFALSE 8457
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8387: LD_ADDR_VAR 0 3
8391: PUSH
8392: LD_INT 22
8394: PUSH
8395: LD_VAR 0 9
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: LD_INT 2
8406: PUSH
8407: LD_INT 21
8409: PUSH
8410: LD_INT 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 33
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PPUSH
8436: CALL_OW 69
8440: PUSH
8441: FOR_IN
8442: IFFALSE 8455
// KillUnit ( i ) ;
8444: LD_VAR 0 3
8448: PPUSH
8449: CALL_OW 66
8453: GO 8441
8455: POP
8456: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 257
8466: PUSH
8467: LD_INT 12
8469: PUSH
8470: LD_INT 17
8472: PUSH
8473: LD_INT 15
8475: PUSH
8476: LD_INT 16
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: IN
8485: IFTRUE 8502
8487: PUSH
8488: LD_VAR 0 1
8492: PPUSH
8493: CALL_OW 263
8497: PUSH
8498: LD_INT 5
8500: EQUAL
8501: OR
8502: IFFALSE 8739
// begin tag := 0 ;
8504: LD_ADDR_VAR 0 5
8508: PUSH
8509: LD_INT 0
8511: ST_TO_ADDR
// for i := 1 to 8 do
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: DOUBLE
8518: LD_INT 1
8520: DEC
8521: ST_TO_ADDR
8522: LD_INT 8
8524: PUSH
8525: FOR_TO
8526: IFFALSE 8560
// if un in mpApePosIndex [ i ] then
8528: LD_VAR 0 1
8532: PUSH
8533: LD_EXP 32
8537: PUSH
8538: LD_VAR 0 3
8542: ARRAY
8543: IN
8544: IFFALSE 8558
// begin tag := i ;
8546: LD_ADDR_VAR 0 5
8550: PUSH
8551: LD_VAR 0 3
8555: ST_TO_ADDR
// break ;
8556: GO 8560
// end ;
8558: GO 8525
8560: POP
8561: POP
// if not tag then
8562: LD_VAR 0 5
8566: NOT
8567: IFFALSE 8571
// exit ;
8569: GO 9014
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8571: LD_ADDR_VAR 0 7
8575: PUSH
8576: LD_EXP 31
8580: PUSH
8581: LD_EXP 7
8585: PUSH
8586: LD_VAR 0 5
8590: ARRAY
8591: ARRAY
8592: ST_TO_ADDR
// if not area then
8593: LD_VAR 0 7
8597: NOT
8598: IFFALSE 8602
// exit ;
8600: GO 9014
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8602: LD_INT 14700
8604: PUSH
8605: LD_VAR 0 1
8609: PUSH
8610: LD_INT 5
8612: MOD
8613: PUSH
8614: LD_INT 1
8616: PLUS
8617: PUSH
8618: LD_INT 700
8620: MUL
8621: PLUS
8622: PPUSH
8623: CALL_OW 67
// repeat wait ( 10 ) ;
8627: LD_INT 10
8629: PPUSH
8630: CALL_OW 67
// until not mpBlockRespThread ;
8634: LD_EXP 45
8638: NOT
8639: IFFALSE 8627
// mpBlockRespThread := true ;
8641: LD_ADDR_EXP 45
8645: PUSH
8646: LD_INT 1
8648: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8649: LD_INT 0
8651: PPUSH
8652: CALL 46426 0 1
// ape := CreateHuman ;
8656: LD_ADDR_VAR 0 4
8660: PUSH
8661: CALL_OW 44
8665: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8666: LD_ADDR_EXP 32
8670: PUSH
8671: LD_EXP 32
8675: PPUSH
8676: LD_VAR 0 5
8680: PPUSH
8681: LD_EXP 32
8685: PUSH
8686: LD_VAR 0 5
8690: ARRAY
8691: PPUSH
8692: LD_VAR 0 4
8696: PPUSH
8697: CALL 50299 0 2
8701: PPUSH
8702: CALL_OW 1
8706: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8707: LD_VAR 0 4
8711: PPUSH
8712: LD_VAR 0 7
8716: PPUSH
8717: LD_INT 0
8719: PPUSH
8720: CALL_OW 49
// wait ( 10 ) ;
8724: LD_INT 10
8726: PPUSH
8727: CALL_OW 67
// mpBlockRespThread := false ;
8731: LD_ADDR_EXP 45
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8739: LD_VAR 0 1
8743: PPUSH
8744: CALL_OW 247
8748: PUSH
8749: LD_INT 1
8751: EQUAL
8752: IFFALSE 8769
8754: PUSH
8755: LD_VAR 0 1
8759: PPUSH
8760: CALL_OW 248
8764: PUSH
8765: LD_INT 0
8767: GREATER
8768: AND
8769: IFFALSE 9014
// begin if not mpRespawn then
8771: LD_EXP 33
8775: NOT
8776: IFFALSE 8780
// exit ;
8778: GO 9014
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8780: LD_VAR 0 9
8784: PPUSH
8785: CALL_OW 108
8789: NOT
8790: IFFALSE 8809
8792: PUSH
8793: LD_EXP 3
8797: PPUSH
8798: LD_VAR 0 9
8802: PPUSH
8803: CALL 7308 0 2
8807: NOT
8808: AND
8809: IFFALSE 8813
// exit ;
8811: GO 9014
// side := GetSide ( un ) ;
8813: LD_ADDR_VAR 0 9
8817: PUSH
8818: LD_VAR 0 1
8822: PPUSH
8823: CALL_OW 255
8827: ST_TO_ADDR
// nation := GetNation ( un ) ;
8828: LD_ADDR_VAR 0 8
8832: PUSH
8833: LD_VAR 0 1
8837: PPUSH
8838: CALL_OW 248
8842: ST_TO_ADDR
// class := GetClass ( un ) ;
8843: LD_ADDR_VAR 0 6
8847: PUSH
8848: LD_VAR 0 1
8852: PPUSH
8853: CALL_OW 257
8857: ST_TO_ADDR
// if class > 4 then
8858: LD_VAR 0 6
8862: PUSH
8863: LD_INT 4
8865: GREATER
8866: IFFALSE 8876
// class := 1 ;
8868: LD_ADDR_VAR 0 6
8872: PUSH
8873: LD_INT 1
8875: ST_TO_ADDR
// repeat wait ( 10 ) ;
8876: LD_INT 10
8878: PPUSH
8879: CALL_OW 67
// until not mpBlockRespThread ;
8883: LD_EXP 45
8887: NOT
8888: IFFALSE 8876
// mpBlockRespThread := true ;
8890: LD_ADDR_EXP 45
8894: PUSH
8895: LD_INT 1
8897: ST_TO_ADDR
// uc_side := side ;
8898: LD_ADDR_OWVAR 20
8902: PUSH
8903: LD_VAR 0 9
8907: ST_TO_ADDR
// uc_nation := nation ;
8908: LD_ADDR_OWVAR 21
8912: PUSH
8913: LD_VAR 0 8
8917: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8918: LD_INT 0
8920: PPUSH
8921: LD_VAR 0 6
8925: PPUSH
8926: LD_INT 2
8928: PPUSH
8929: CALL_OW 380
// un := CreateHuman ;
8933: LD_ADDR_VAR 0 1
8937: PUSH
8938: CALL_OW 44
8942: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8943: LD_ADDR_EXP 40
8947: PUSH
8948: LD_EXP 40
8952: PPUSH
8953: LD_VAR 0 9
8957: PPUSH
8958: LD_EXP 40
8962: PUSH
8963: LD_VAR 0 9
8967: ARRAY
8968: PPUSH
8969: LD_EXP 40
8973: PUSH
8974: LD_VAR 0 9
8978: ARRAY
8979: PUSH
8980: LD_INT 1
8982: PLUS
8983: PPUSH
8984: LD_VAR 0 1
8988: PPUSH
8989: CALL_OW 1
8993: PPUSH
8994: CALL_OW 1
8998: ST_TO_ADDR
// wait ( 10 ) ;
8999: LD_INT 10
9001: PPUSH
9002: CALL_OW 67
// mpBlockRespThread := false ;
9006: LD_ADDR_EXP 45
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// end ; end ;
9014: LD_VAR 0 2
9018: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9019: LD_INT 0
9021: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9022: LD_VAR 0 1
9026: PPUSH
9027: CALL_OW 266
9031: PUSH
9032: LD_INT 0
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: IN
9042: IFFALSE 9067
// SetBName ( building , @ & GetSide ( building ) ) ;
9044: LD_VAR 0 1
9048: PPUSH
9049: LD_STRING @
9051: PUSH
9052: LD_VAR 0 1
9056: PPUSH
9057: CALL_OW 255
9061: STR
9062: PPUSH
9063: CALL_OW 500
// end ;
9067: LD_VAR 0 2
9071: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9072: LD_INT 0
9074: PPUSH
9075: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
9076: LD_EXP 3
9080: PUSH
9081: LD_INT 2
9083: EQUAL
9084: IFFALSE 9108
9086: PUSH
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 266
9096: PUSH
9097: LD_INT 0
9099: PUSH
9100: LD_INT 1
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: IN
9107: AND
9108: IFFALSE 9187
// begin SetSide ( building , oldSide ) ;
9110: LD_VAR 0 1
9114: PPUSH
9115: LD_VAR 0 2
9119: PPUSH
9120: CALL_OW 235
// KillUnit ( building ) ;
9124: LD_VAR 0 1
9128: PPUSH
9129: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9133: LD_ADDR_VAR 0 5
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_VAR 0 2
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 1
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PPUSH
9164: CALL_OW 69
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9183
// KillUnit ( i ) ;
9172: LD_VAR 0 5
9176: PPUSH
9177: CALL_OW 66
9181: GO 9169
9183: POP
9184: POP
// exit ;
9185: GO 9232
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9187: LD_VAR 0 1
9191: PPUSH
9192: CALL_OW 266
9196: PUSH
9197: LD_INT 0
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: IN
9207: IFFALSE 9232
// SetBName ( building , @ & GetSide ( building ) ) ;
9209: LD_VAR 0 1
9213: PPUSH
9214: LD_STRING @
9216: PUSH
9217: LD_VAR 0 1
9221: PPUSH
9222: CALL_OW 255
9226: STR
9227: PPUSH
9228: CALL_OW 500
// end ;
9232: LD_VAR 0 4
9236: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9237: LD_INT 0
9239: PPUSH
9240: PPUSH
9241: PPUSH
// if mpGameType <> GameTypeFamine then
9242: LD_EXP 3
9246: PUSH
9247: LD_INT 5
9249: NONEQUAL
9250: IFFALSE 9254
// exit ;
9252: GO 9468
// for i := 1 to mpGlobalOilDeposits do
9254: LD_ADDR_VAR 0 6
9258: PUSH
9259: DOUBLE
9260: LD_INT 1
9262: DEC
9263: ST_TO_ADDR
9264: LD_EXP 41
9268: PUSH
9269: FOR_TO
9270: IFFALSE 9466
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9272: LD_EXP 41
9276: PUSH
9277: LD_VAR 0 6
9281: ARRAY
9282: PUSH
9283: LD_INT 1
9285: ARRAY
9286: PPUSH
9287: LD_EXP 41
9291: PUSH
9292: LD_VAR 0 6
9296: ARRAY
9297: PUSH
9298: LD_INT 2
9300: ARRAY
9301: PPUSH
9302: CALL_OW 428
9306: PUSH
9307: LD_VAR 0 1
9311: EQUAL
9312: IFFALSE 9464
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9314: LD_ADDR_VAR 0 7
9318: PUSH
9319: LD_EXP 41
9323: PUSH
9324: LD_VAR 0 6
9328: ARRAY
9329: PUSH
9330: LD_INT 3
9332: ARRAY
9333: ST_TO_ADDR
// value := Dec ( value ) ;
9334: LD_ADDR_VAR 0 7
9338: PUSH
9339: LD_VAR 0 7
9343: PPUSH
9344: CALL 51694 0 1
9348: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9349: LD_ADDR_EXP 41
9353: PUSH
9354: LD_EXP 41
9358: PPUSH
9359: LD_VAR 0 6
9363: PPUSH
9364: LD_EXP 41
9368: PUSH
9369: LD_VAR 0 6
9373: ARRAY
9374: PPUSH
9375: LD_INT 3
9377: PPUSH
9378: LD_VAR 0 7
9382: PPUSH
9383: CALL_OW 1
9387: PPUSH
9388: CALL_OW 1
9392: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_VAR 0 7
9402: PPUSH
9403: CALL_OW 505
// if value = 0 then
9407: LD_VAR 0 7
9411: PUSH
9412: LD_INT 0
9414: EQUAL
9415: IFFALSE 9464
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9417: LD_EXP 41
9421: PUSH
9422: LD_VAR 0 6
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: ARRAY
9431: PPUSH
9432: LD_EXP 41
9436: PUSH
9437: LD_VAR 0 6
9441: ARRAY
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PPUSH
9447: CALL_OW 63
// KillUnit ( building ) ;
9451: LD_VAR 0 1
9455: PPUSH
9456: CALL_OW 66
// exit ;
9460: POP
9461: POP
9462: GO 9468
// end ; end ; end ;
9464: GO 9269
9466: POP
9467: POP
// end ;
9468: LD_VAR 0 5
9472: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9473: LD_INT 0
9475: PPUSH
9476: PPUSH
9477: PPUSH
// if mpGameType <> GameTypeFamine then
9478: LD_EXP 3
9482: PUSH
9483: LD_INT 5
9485: NONEQUAL
9486: IFFALSE 9490
// exit ;
9488: GO 9704
// for i := 1 to mpGlobalSibDeposits do
9490: LD_ADDR_VAR 0 6
9494: PUSH
9495: DOUBLE
9496: LD_INT 1
9498: DEC
9499: ST_TO_ADDR
9500: LD_EXP 42
9504: PUSH
9505: FOR_TO
9506: IFFALSE 9702
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9508: LD_EXP 42
9512: PUSH
9513: LD_VAR 0 6
9517: ARRAY
9518: PUSH
9519: LD_INT 1
9521: ARRAY
9522: PPUSH
9523: LD_EXP 42
9527: PUSH
9528: LD_VAR 0 6
9532: ARRAY
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PPUSH
9538: CALL_OW 428
9542: PUSH
9543: LD_VAR 0 1
9547: EQUAL
9548: IFFALSE 9700
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9550: LD_ADDR_VAR 0 7
9554: PUSH
9555: LD_EXP 42
9559: PUSH
9560: LD_VAR 0 6
9564: ARRAY
9565: PUSH
9566: LD_INT 3
9568: ARRAY
9569: ST_TO_ADDR
// value := Dec ( value ) ;
9570: LD_ADDR_VAR 0 7
9574: PUSH
9575: LD_VAR 0 7
9579: PPUSH
9580: CALL 51694 0 1
9584: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9585: LD_ADDR_EXP 42
9589: PUSH
9590: LD_EXP 42
9594: PPUSH
9595: LD_VAR 0 6
9599: PPUSH
9600: LD_EXP 42
9604: PUSH
9605: LD_VAR 0 6
9609: ARRAY
9610: PPUSH
9611: LD_INT 3
9613: PPUSH
9614: LD_VAR 0 7
9618: PPUSH
9619: CALL_OW 1
9623: PPUSH
9624: CALL_OW 1
9628: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9629: LD_VAR 0 1
9633: PPUSH
9634: LD_VAR 0 7
9638: PPUSH
9639: CALL_OW 505
// if value = 0 then
9643: LD_VAR 0 7
9647: PUSH
9648: LD_INT 0
9650: EQUAL
9651: IFFALSE 9700
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9653: LD_EXP 42
9657: PUSH
9658: LD_VAR 0 6
9662: ARRAY
9663: PUSH
9664: LD_INT 1
9666: ARRAY
9667: PPUSH
9668: LD_EXP 42
9672: PUSH
9673: LD_VAR 0 6
9677: ARRAY
9678: PUSH
9679: LD_INT 2
9681: ARRAY
9682: PPUSH
9683: CALL_OW 63
// KillUnit ( building ) ;
9687: LD_VAR 0 1
9691: PPUSH
9692: CALL_OW 66
// exit ;
9696: POP
9697: POP
9698: GO 9704
// end ; end ; end ;
9700: GO 9505
9702: POP
9703: POP
// end ; end_of_file
9704: LD_VAR 0 5
9708: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9709: LD_EXP 39
9713: IFFALSE 9721
9715: PUSH
9716: CALL 9931 0 0
9720: AND
9721: IFFALSE 9729
9723: PUSH
9724: LD_OWVAR 4
9728: AND
9729: IFFALSE 9928
9731: GO 9733
9733: DISABLE
9734: LD_INT 0
9736: PPUSH
9737: PPUSH
// begin canWin := false ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 0
9745: ST_TO_ADDR
// if not HasPower ( your_side ) then
9746: LD_OWVAR 2
9750: PPUSH
9751: CALL 9973 0 1
9755: NOT
9756: IFFALSE 9767
// begin Multiplayer_Loose_Message ;
9758: CALL_OW 521
// enable ( mpLose ) ;
9762: LD_INT 102
9764: ENABLE_MARKED
// end else
9765: GO 9928
// begin canWin := true ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_INT 1
9774: ST_TO_ADDR
// for i := 1 to 8 do
9775: LD_ADDR_VAR 0 1
9779: PUSH
9780: DOUBLE
9781: LD_INT 1
9783: DEC
9784: ST_TO_ADDR
9785: LD_INT 8
9787: PUSH
9788: FOR_TO
9789: IFFALSE 9914
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9791: LD_EXP 7
9795: PUSH
9796: LD_VAR 0 1
9800: ARRAY
9801: IFFALSE 9814
9803: PUSH
9804: LD_VAR 0 1
9808: PPUSH
9809: CALL_OW 108
9813: AND
9814: IFFALSE 9828
9816: PUSH
9817: LD_VAR 0 1
9821: PUSH
9822: LD_OWVAR 2
9826: NONEQUAL
9827: AND
9828: IFFALSE 9912
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9830: LD_EXP 8
9834: PUSH
9835: LD_VAR 0 1
9839: ARRAY
9840: NOT
9841: IFTRUE 9889
9843: PUSH
9844: LD_EXP 8
9848: PUSH
9849: LD_VAR 0 1
9853: ARRAY
9854: PUSH
9855: LD_EXP 8
9859: PUSH
9860: LD_OWVAR 2
9864: ARRAY
9865: NONEQUAL
9866: IFFALSE 9888
9868: PUSH
9869: LD_OWVAR 2
9873: PPUSH
9874: LD_VAR 0 1
9878: PPUSH
9879: CALL_OW 81
9883: PUSH
9884: LD_INT 1
9886: NONEQUAL
9887: AND
9888: OR
9889: IFFALSE 9912
// if HasPower ( i ) then
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL 9973 0 1
9900: IFFALSE 9912
// begin canWin := false ;
9902: LD_ADDR_VAR 0 2
9906: PUSH
9907: LD_INT 0
9909: ST_TO_ADDR
// break ;
9910: GO 9914
// end ;
9912: GO 9788
9914: POP
9915: POP
// if canWin then
9916: LD_VAR 0 2
9920: IFFALSE 9927
// enable ( mpWin ) else
9922: LD_INT 101
9924: ENABLE_MARKED
9925: GO 9928
// enable ;
9927: ENABLE
// end ; end ;
9928: PPOPN 2
9930: END
// function CanWinLoose ; begin
9931: LD_INT 0
9933: PPUSH
// result := true ;
9934: LD_ADDR_VAR 0 1
9938: PUSH
9939: LD_INT 1
9941: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9942: CALL_OW 531
9946: IFFALSE 9958
9948: PUSH
9949: CALL_OW 519
9953: PUSH
9954: LD_INT 1
9956: GREATER
9957: AND
9958: IFFALSE 9968
// result := false ;
9960: LD_ADDR_VAR 0 1
9964: PUSH
9965: LD_INT 0
9967: ST_TO_ADDR
// end ;
9968: LD_VAR 0 1
9972: RET
// function HasPower ( i ) ; begin
9973: LD_INT 0
9975: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9976: LD_ADDR_VAR 0 2
9980: PUSH
9981: LD_INT 22
9983: PUSH
9984: LD_VAR 0 1
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 2
9995: PUSH
9996: LD_INT 21
9998: PUSH
9999: LD_INT 1
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 33
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 33
10018: PUSH
10019: LD_INT 5
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 69
10040: ST_TO_ADDR
// end ; end_of_file
10041: LD_VAR 0 2
10045: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10046: LD_EXP 39
10050: IFFALSE 10093
10052: GO 10054
10054: DISABLE
10055: LD_INT 0
10057: PPUSH
// begin for i := 1 to 8 do
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: DOUBLE
10064: LD_INT 1
10066: DEC
10067: ST_TO_ADDR
10068: LD_INT 8
10070: PUSH
10071: FOR_TO
10072: IFFALSE 10091
// SetRestrict ( b_depot , i , state_disabled ) ;
10074: LD_INT 0
10076: PPUSH
10077: LD_VAR 0 1
10081: PPUSH
10082: LD_INT 0
10084: PPUSH
10085: CALL_OW 324
10089: GO 10071
10091: POP
10092: POP
// end ;
10093: PPOPN 1
10095: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10096: LD_EXP 39
10100: IFFALSE 10108
10102: PUSH
10103: CALL 10318 0 0
10107: AND
10108: IFFALSE 10116
10110: PUSH
10111: LD_OWVAR 4
10115: AND
10116: IFFALSE 10315
10118: GO 10120
10120: DISABLE
10121: LD_INT 0
10123: PPUSH
10124: PPUSH
// begin canWin := false ;
10125: LD_ADDR_VAR 0 2
10129: PUSH
10130: LD_INT 0
10132: ST_TO_ADDR
// if not HasPower ( your_side ) then
10133: LD_OWVAR 2
10137: PPUSH
10138: CALL 10360 0 1
10142: NOT
10143: IFFALSE 10154
// begin Multiplayer_Loose_Message ;
10145: CALL_OW 521
// enable ( mpLose ) ;
10149: LD_INT 102
10151: ENABLE_MARKED
// end else
10152: GO 10315
// begin canWin := true ;
10154: LD_ADDR_VAR 0 2
10158: PUSH
10159: LD_INT 1
10161: ST_TO_ADDR
// for i := 1 to 8 do
10162: LD_ADDR_VAR 0 1
10166: PUSH
10167: DOUBLE
10168: LD_INT 1
10170: DEC
10171: ST_TO_ADDR
10172: LD_INT 8
10174: PUSH
10175: FOR_TO
10176: IFFALSE 10301
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10178: LD_EXP 7
10182: PUSH
10183: LD_VAR 0 1
10187: ARRAY
10188: IFFALSE 10201
10190: PUSH
10191: LD_VAR 0 1
10195: PPUSH
10196: CALL_OW 108
10200: AND
10201: IFFALSE 10215
10203: PUSH
10204: LD_VAR 0 1
10208: PUSH
10209: LD_OWVAR 2
10213: NONEQUAL
10214: AND
10215: IFFALSE 10299
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10217: LD_EXP 8
10221: PUSH
10222: LD_VAR 0 1
10226: ARRAY
10227: NOT
10228: IFTRUE 10276
10230: PUSH
10231: LD_EXP 8
10235: PUSH
10236: LD_VAR 0 1
10240: ARRAY
10241: PUSH
10242: LD_EXP 8
10246: PUSH
10247: LD_OWVAR 2
10251: ARRAY
10252: NONEQUAL
10253: IFFALSE 10275
10255: PUSH
10256: LD_OWVAR 2
10260: PPUSH
10261: LD_VAR 0 1
10265: PPUSH
10266: CALL_OW 81
10270: PUSH
10271: LD_INT 1
10273: NONEQUAL
10274: AND
10275: OR
10276: IFFALSE 10299
// if HasPower ( i ) then
10278: LD_VAR 0 1
10282: PPUSH
10283: CALL 10360 0 1
10287: IFFALSE 10299
// begin canWin := false ;
10289: LD_ADDR_VAR 0 2
10293: PUSH
10294: LD_INT 0
10296: ST_TO_ADDR
// break ;
10297: GO 10301
// end ;
10299: GO 10175
10301: POP
10302: POP
// if canWin then
10303: LD_VAR 0 2
10307: IFFALSE 10314
// enable ( mpWin ) else
10309: LD_INT 101
10311: ENABLE_MARKED
10312: GO 10315
// enable ;
10314: ENABLE
// end ; end ;
10315: PPOPN 2
10317: END
// function CanWinLoose ; begin
10318: LD_INT 0
10320: PPUSH
// result := true ;
10321: LD_ADDR_VAR 0 1
10325: PUSH
10326: LD_INT 1
10328: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10329: CALL_OW 531
10333: IFFALSE 10345
10335: PUSH
10336: CALL_OW 519
10340: PUSH
10341: LD_INT 1
10343: GREATER
10344: AND
10345: IFFALSE 10355
// result := false ;
10347: LD_ADDR_VAR 0 1
10351: PUSH
10352: LD_INT 0
10354: ST_TO_ADDR
// end ;
10355: LD_VAR 0 1
10359: RET
// function HasPower ( i ) ; begin
10360: LD_INT 0
10362: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10363: LD_INT 22
10365: PUSH
10366: LD_VAR 0 1
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: LD_INT 30
10380: PUSH
10381: LD_INT 0
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 30
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 69
10411: NOT
10412: IFFALSE 10416
// exit ;
10414: GO 10481
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10416: LD_ADDR_VAR 0 2
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_VAR 0 1
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: PUSH
10433: LD_INT 2
10435: PUSH
10436: LD_INT 21
10438: PUSH
10439: LD_INT 1
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 33
10448: PUSH
10449: LD_INT 3
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: PUSH
10456: LD_INT 33
10458: PUSH
10459: LD_INT 5
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: ST_TO_ADDR
// end ; end_of_file
10481: LD_VAR 0 2
10485: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
10486: LD_EXP 39
10490: IFFALSE 10831
10492: GO 10494
10494: DISABLE
10495: LD_INT 0
10497: PPUSH
10498: PPUSH
10499: PPUSH
// begin mpKingPoints := [ ] ;
10500: LD_ADDR_EXP 48
10504: PUSH
10505: EMPTY
10506: ST_TO_ADDR
// if mpTeamGame then
10507: LD_EXP 11
10511: IFFALSE 10565
// begin for i := 1 to Count ( mpTeams ) do
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: DOUBLE
10519: LD_INT 1
10521: DEC
10522: ST_TO_ADDR
10523: LD_EXP 10
10527: PPUSH
10528: CALL 14367 0 1
10532: PUSH
10533: FOR_TO
10534: IFFALSE 10561
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10536: LD_ADDR_EXP 48
10540: PUSH
10541: LD_EXP 48
10545: PPUSH
10546: LD_VAR 0 1
10550: PPUSH
10551: LD_INT 0
10553: PPUSH
10554: CALL_OW 1
10558: ST_TO_ADDR
10559: GO 10533
10561: POP
10562: POP
// end else
10563: GO 10608
// begin for i := 1 to 8 do
10565: LD_ADDR_VAR 0 1
10569: PUSH
10570: DOUBLE
10571: LD_INT 1
10573: DEC
10574: ST_TO_ADDR
10575: LD_INT 8
10577: PUSH
10578: FOR_TO
10579: IFFALSE 10606
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
10581: LD_ADDR_EXP 48
10585: PUSH
10586: LD_EXP 48
10590: PPUSH
10591: LD_VAR 0 1
10595: PPUSH
10596: LD_INT 0
10598: PPUSH
10599: CALL_OW 1
10603: ST_TO_ADDR
10604: GO 10578
10606: POP
10607: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
10608: LD_ADDR_VAR 0 3
10612: PUSH
10613: LD_EXP 2
10617: PPUSH
10618: LD_INT 0
10620: PPUSH
10621: CALL_OW 517
10625: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10626: LD_ADDR_VAR 0 1
10630: PUSH
10631: DOUBLE
10632: LD_INT 1
10634: DEC
10635: ST_TO_ADDR
10636: LD_VAR 0 3
10640: PUSH
10641: LD_INT 1
10643: ARRAY
10644: PUSH
10645: FOR_TO
10646: IFFALSE 10713
// for j := 1 to 8 do
10648: LD_ADDR_VAR 0 2
10652: PUSH
10653: DOUBLE
10654: LD_INT 1
10656: DEC
10657: ST_TO_ADDR
10658: LD_INT 8
10660: PUSH
10661: FOR_TO
10662: IFFALSE 10709
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
10664: LD_VAR 0 3
10668: PUSH
10669: LD_INT 1
10671: ARRAY
10672: PUSH
10673: LD_VAR 0 1
10677: ARRAY
10678: PPUSH
10679: LD_VAR 0 3
10683: PUSH
10684: LD_INT 2
10686: ARRAY
10687: PUSH
10688: LD_VAR 0 1
10692: ARRAY
10693: PPUSH
10694: LD_VAR 0 2
10698: PPUSH
10699: LD_INT 12
10701: NEG
10702: PPUSH
10703: CALL_OW 330
10707: GO 10661
10709: POP
10710: POP
10711: GO 10645
10713: POP
10714: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
10715: LD_EXP 34
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 424
// UpdateCounter ;
10727: CALL 11337 0 0
// repeat wait ( 0 0$1 ) ;
10731: LD_INT 35
10733: PPUSH
10734: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10738: LD_ADDR_VAR 0 3
10742: PUSH
10743: LD_EXP 34
10747: PPUSH
10748: LD_INT 3
10750: PUSH
10751: LD_INT 57
10753: PUSH
10754: EMPTY
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 50
10763: PUSH
10764: EMPTY
10765: LIST
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 30
10772: PUSH
10773: LD_INT 0
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 30
10782: PUSH
10783: LD_INT 1
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: PPUSH
10800: CALL_OW 70
10804: ST_TO_ADDR
// if not tmp then
10805: LD_VAR 0 3
10809: NOT
10810: IFFALSE 10814
// continue ;
10812: GO 10731
// AddPoints ( tmp ) ;
10814: LD_VAR 0 3
10818: PPUSH
10819: CALL 11015 0 1
// UpdateCounter ;
10823: CALL 11337 0 0
// until false ;
10827: LD_INT 0
10829: IFFALSE 10731
// end ;
10831: PPOPN 3
10833: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
10834: LD_EXP 39
10838: IFFALSE 10846
10840: PUSH
10841: LD_EXP 37
10845: AND
10846: IFFALSE 11012
10848: GO 10850
10850: DISABLE
10851: LD_INT 0
10853: PPUSH
10854: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_EXP 2
10864: PPUSH
10865: LD_INT 0
10867: PPUSH
10868: CALL_OW 517
10872: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
10873: LD_ADDR_VAR 0 1
10877: PUSH
10878: DOUBLE
10879: LD_INT 1
10881: DEC
10882: ST_TO_ADDR
10883: LD_VAR 0 2
10887: PUSH
10888: LD_INT 1
10890: ARRAY
10891: PUSH
10892: FOR_TO
10893: IFFALSE 10934
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
10895: LD_VAR 0 2
10899: PUSH
10900: LD_INT 1
10902: ARRAY
10903: PUSH
10904: LD_VAR 0 1
10908: ARRAY
10909: PPUSH
10910: LD_VAR 0 2
10914: PUSH
10915: LD_INT 2
10917: ARRAY
10918: PUSH
10919: LD_VAR 0 1
10923: ARRAY
10924: PPUSH
10925: LD_INT 125
10927: PPUSH
10928: CALL_OW 495
10932: GO 10892
10934: POP
10935: POP
// repeat wait ( mpEmissions ) ;
10936: LD_EXP 37
10940: PPUSH
10941: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
10945: LD_ADDR_VAR 0 1
10949: PUSH
10950: DOUBLE
10951: LD_INT 1
10953: DEC
10954: ST_TO_ADDR
10955: LD_VAR 0 2
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PUSH
10964: FOR_TO
10965: IFFALSE 11006
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 1
10974: ARRAY
10975: PUSH
10976: LD_VAR 0 1
10980: ARRAY
10981: PPUSH
10982: LD_VAR 0 2
10986: PUSH
10987: LD_INT 2
10989: ARRAY
10990: PUSH
10991: LD_VAR 0 1
10995: ARRAY
10996: PPUSH
10997: LD_INT 15
10999: PPUSH
11000: CALL_OW 495
11004: GO 10964
11006: POP
11007: POP
// until false ;
11008: LD_INT 0
11010: IFFALSE 10936
// end ;
11012: PPOPN 2
11014: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
11015: LD_INT 0
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
// if mpTeamGame then
11022: LD_EXP 11
11026: IFFALSE 11223
// begin first := depots [ 1 ] ;
11028: LD_ADDR_VAR 0 4
11032: PUSH
11033: LD_VAR 0 1
11037: PUSH
11038: LD_INT 1
11040: ARRAY
11041: ST_TO_ADDR
// side := GetSide ( first ) ;
11042: LD_ADDR_VAR 0 6
11046: PUSH
11047: LD_VAR 0 4
11051: PPUSH
11052: CALL_OW 255
11056: ST_TO_ADDR
// for i := 1 to mpTeams do
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: DOUBLE
11063: LD_INT 1
11065: DEC
11066: ST_TO_ADDR
11067: LD_EXP 10
11071: PUSH
11072: FOR_TO
11073: IFFALSE 11107
// if side in mpTeams [ i ] then
11075: LD_VAR 0 6
11079: PUSH
11080: LD_EXP 10
11084: PUSH
11085: LD_VAR 0 3
11089: ARRAY
11090: IN
11091: IFFALSE 11105
// begin team := i ;
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_VAR 0 3
11102: ST_TO_ADDR
// break ;
11103: GO 11107
// end ;
11105: GO 11072
11107: POP
11108: POP
// if not team then
11109: LD_VAR 0 5
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11332
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11118: LD_EXP 34
11122: PPUSH
11123: LD_INT 81
11125: PUSH
11126: LD_VAR 0 6
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PPUSH
11135: CALL_OW 70
11139: IFFALSE 11143
// exit ;
11141: GO 11332
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
11143: LD_ADDR_EXP 48
11147: PUSH
11148: LD_EXP 48
11152: PPUSH
11153: LD_VAR 0 5
11157: PPUSH
11158: LD_EXP 48
11162: PUSH
11163: LD_VAR 0 5
11167: ARRAY
11168: PUSH
11169: LD_INT 1
11171: PLUS
11172: PPUSH
11173: CALL_OW 1
11177: ST_TO_ADDR
// for i in mpTeams [ team ] do
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: LD_EXP 10
11187: PUSH
11188: LD_VAR 0 5
11192: ARRAY
11193: PUSH
11194: FOR_IN
11195: IFFALSE 11219
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
11197: LD_VAR 0 3
11201: PPUSH
11202: LD_EXP 48
11206: PUSH
11207: LD_VAR 0 5
11211: ARRAY
11212: PPUSH
11213: CALL_OW 506
11217: GO 11194
11219: POP
11220: POP
// end else
11221: GO 11332
// begin first := depots [ 1 ] ;
11223: LD_ADDR_VAR 0 4
11227: PUSH
11228: LD_VAR 0 1
11232: PUSH
11233: LD_INT 1
11235: ARRAY
11236: ST_TO_ADDR
// side := GetSide ( first ) ;
11237: LD_ADDR_VAR 0 6
11241: PUSH
11242: LD_VAR 0 4
11246: PPUSH
11247: CALL_OW 255
11251: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11252: LD_EXP 34
11256: PPUSH
11257: LD_INT 81
11259: PUSH
11260: LD_VAR 0 6
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PPUSH
11269: CALL_OW 70
11273: IFFALSE 11277
// exit ;
11275: GO 11332
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
11277: LD_ADDR_EXP 48
11281: PUSH
11282: LD_EXP 48
11286: PPUSH
11287: LD_VAR 0 6
11291: PPUSH
11292: LD_EXP 48
11296: PUSH
11297: LD_VAR 0 6
11301: ARRAY
11302: PUSH
11303: LD_INT 1
11305: PLUS
11306: PPUSH
11307: CALL_OW 1
11311: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
11312: LD_VAR 0 6
11316: PPUSH
11317: LD_EXP 48
11321: PUSH
11322: LD_VAR 0 6
11326: ARRAY
11327: PPUSH
11328: CALL_OW 506
// end ; end ;
11332: LD_VAR 0 2
11336: RET
// function UpdateCounter ; var i ; begin
11337: LD_INT 0
11339: PPUSH
11340: PPUSH
// result := [ ] ;
11341: LD_ADDR_VAR 0 1
11345: PUSH
11346: EMPTY
11347: ST_TO_ADDR
// if mpTeamGame then
11348: LD_EXP 11
11352: IFFALSE 11419
// begin for i := 1 to mpTeams do
11354: LD_ADDR_VAR 0 2
11358: PUSH
11359: DOUBLE
11360: LD_INT 1
11362: DEC
11363: ST_TO_ADDR
11364: LD_EXP 10
11368: PUSH
11369: FOR_TO
11370: IFFALSE 11415
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_VAR 0 1
11381: PUSH
11382: LD_STRING #KingoftheHill-Team
11384: PUSH
11385: LD_VAR 0 2
11389: PUSH
11390: LD_EXP 48
11394: PUSH
11395: LD_VAR 0 2
11399: ARRAY
11400: PUSH
11401: LD_EXP 35
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: ADD
11412: ST_TO_ADDR
11413: GO 11369
11415: POP
11416: POP
// end else
11417: GO 11492
// begin for i := 1 to 8 do
11419: LD_ADDR_VAR 0 2
11423: PUSH
11424: DOUBLE
11425: LD_INT 1
11427: DEC
11428: ST_TO_ADDR
11429: LD_INT 8
11431: PUSH
11432: FOR_TO
11433: IFFALSE 11490
// if mpSidePositions [ i ] then
11435: LD_EXP 7
11439: PUSH
11440: LD_VAR 0 2
11444: ARRAY
11445: IFFALSE 11488
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
11447: LD_ADDR_VAR 0 1
11451: PUSH
11452: LD_VAR 0 1
11456: PUSH
11457: LD_STRING #KingoftheHill-Player
11459: PUSH
11460: LD_VAR 0 2
11464: PUSH
11465: LD_EXP 48
11469: PUSH
11470: LD_VAR 0 2
11474: ARRAY
11475: PUSH
11476: LD_EXP 35
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: ADD
11487: ST_TO_ADDR
11488: GO 11432
11490: POP
11491: POP
// end ; mpDisplayStrings := result ;
11492: LD_ADDR_EXP 38
11496: PUSH
11497: LD_VAR 0 1
11501: ST_TO_ADDR
// end ;
11502: LD_VAR 0 1
11506: RET
// export function HowMuchPointsKing ( side ) ; begin
11507: LD_INT 0
11509: PPUSH
// result := HowMuchPoints ( side ) ;
11510: LD_ADDR_VAR 0 2
11514: PUSH
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL 11530 0 1
11524: ST_TO_ADDR
// end ;
11525: LD_VAR 0 2
11529: RET
// function HowMuchPoints ( side ) ; var i ; begin
11530: LD_INT 0
11532: PPUSH
11533: PPUSH
// if mpTeamGame then
11534: LD_EXP 11
11538: IFFALSE 11607
// begin for i := 1 to Count ( mpTeams ) do
11540: LD_ADDR_VAR 0 3
11544: PUSH
11545: DOUBLE
11546: LD_INT 1
11548: DEC
11549: ST_TO_ADDR
11550: LD_EXP 10
11554: PPUSH
11555: CALL 14367 0 1
11559: PUSH
11560: FOR_TO
11561: IFFALSE 11603
// begin if side in mpTeams [ i ] then
11563: LD_VAR 0 1
11567: PUSH
11568: LD_EXP 10
11572: PUSH
11573: LD_VAR 0 3
11577: ARRAY
11578: IN
11579: IFFALSE 11601
// begin result := mpKingPoints [ i ] ;
11581: LD_ADDR_VAR 0 2
11585: PUSH
11586: LD_EXP 48
11590: PUSH
11591: LD_VAR 0 3
11595: ARRAY
11596: ST_TO_ADDR
// exit ;
11597: POP
11598: POP
11599: GO 11623
// end ; end ;
11601: GO 11560
11603: POP
11604: POP
// end else
11605: GO 11623
// result := mpKingPoints [ side ] ;
11607: LD_ADDR_VAR 0 2
11611: PUSH
11612: LD_EXP 48
11616: PUSH
11617: LD_VAR 0 1
11621: ARRAY
11622: ST_TO_ADDR
// end ;
11623: LD_VAR 0 2
11627: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
11628: LD_EXP 39
11632: IFFALSE 11640
11634: PUSH
11635: CALL 12052 0 0
11639: AND
11640: IFFALSE 11648
11642: PUSH
11643: LD_OWVAR 4
11647: AND
11648: IFFALSE 11901
11650: GO 11652
11652: DISABLE
11653: LD_INT 0
11655: PPUSH
11656: PPUSH
// begin canWin := false ;
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_INT 0
11664: ST_TO_ADDR
// if not HasPower ( your_side ) then
11665: LD_OWVAR 2
11669: PPUSH
11670: CALL 12094 0 1
11674: NOT
11675: IFFALSE 11686
// begin Multiplayer_Loose_Message ;
11677: CALL_OW 521
// enable ( mpLose ) ;
11681: LD_INT 102
11683: ENABLE_MARKED
// end else
11684: GO 11901
// begin if not EnemiesInGame then
11686: CALL 11904 0 0
11690: NOT
11691: IFFALSE 11698
// begin enable ( mpWin ) ;
11693: LD_INT 101
11695: ENABLE_MARKED
// exit ;
11696: GO 11901
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_OWVAR 2
11707: PPUSH
11708: CALL 11530 0 1
11712: PUSH
11713: LD_EXP 35
11717: GREATEREQUAL
11718: IFFALSE 11731
11720: PUSH
11721: LD_OWVAR 2
11725: PPUSH
11726: CALL 12094 0 1
11730: AND
11731: ST_TO_ADDR
// for i := 1 to 8 do
11732: LD_ADDR_VAR 0 1
11736: PUSH
11737: DOUBLE
11738: LD_INT 1
11740: DEC
11741: ST_TO_ADDR
11742: LD_INT 8
11744: PUSH
11745: FOR_TO
11746: IFFALSE 11887
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11748: LD_EXP 7
11752: PUSH
11753: LD_VAR 0 1
11757: ARRAY
11758: IFFALSE 11771
11760: PUSH
11761: LD_VAR 0 1
11765: PPUSH
11766: CALL_OW 108
11770: AND
11771: IFFALSE 11785
11773: PUSH
11774: LD_VAR 0 1
11778: PUSH
11779: LD_OWVAR 2
11783: NONEQUAL
11784: AND
11785: IFFALSE 11885
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11787: LD_EXP 8
11791: PUSH
11792: LD_VAR 0 1
11796: ARRAY
11797: NOT
11798: IFTRUE 11846
11800: PUSH
11801: LD_EXP 8
11805: PUSH
11806: LD_VAR 0 1
11810: ARRAY
11811: PUSH
11812: LD_EXP 8
11816: PUSH
11817: LD_OWVAR 2
11821: ARRAY
11822: NONEQUAL
11823: IFFALSE 11845
11825: PUSH
11826: LD_OWVAR 2
11830: PPUSH
11831: LD_VAR 0 1
11835: PPUSH
11836: CALL_OW 81
11840: PUSH
11841: LD_INT 1
11843: NONEQUAL
11844: AND
11845: OR
11846: IFFALSE 11885
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
11848: LD_VAR 0 1
11852: PPUSH
11853: CALL 11530 0 1
11857: PUSH
11858: LD_EXP 35
11862: GREATEREQUAL
11863: IFFALSE 11876
11865: PUSH
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL 12094 0 1
11875: AND
11876: IFFALSE 11885
// begin enable ( mpLose ) ;
11878: LD_INT 102
11880: ENABLE_MARKED
// exit ;
11881: POP
11882: POP
11883: GO 11901
// end ;
11885: GO 11745
11887: POP
11888: POP
// if canWin then
11889: LD_VAR 0 2
11893: IFFALSE 11900
// enable ( mpWin ) else
11895: LD_INT 101
11897: ENABLE_MARKED
11898: GO 11901
// enable ;
11900: ENABLE
// end ; end ;
11901: PPOPN 2
11903: END
// function EnemiesInGame ; var i ; begin
11904: LD_INT 0
11906: PPUSH
11907: PPUSH
// result := false ;
11908: LD_ADDR_VAR 0 1
11912: PUSH
11913: LD_INT 0
11915: ST_TO_ADDR
// for i := 1 to 8 do
11916: LD_ADDR_VAR 0 2
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_INT 8
11928: PUSH
11929: FOR_TO
11930: IFFALSE 12045
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
11932: LD_VAR 0 2
11936: PUSH
11937: LD_OWVAR 2
11941: NONEQUAL
11942: IFFALSE 11955
11944: PUSH
11945: LD_VAR 0 2
11949: PPUSH
11950: CALL 12094 0 1
11954: AND
11955: IFFALSE 11968
11957: PUSH
11958: LD_VAR 0 2
11962: PPUSH
11963: CALL_OW 108
11967: AND
11968: IFFALSE 12043
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11970: LD_EXP 8
11974: PUSH
11975: LD_VAR 0 2
11979: ARRAY
11980: NOT
11981: IFTRUE 12029
11983: PUSH
11984: LD_EXP 8
11988: PUSH
11989: LD_VAR 0 2
11993: ARRAY
11994: PUSH
11995: LD_EXP 8
11999: PUSH
12000: LD_OWVAR 2
12004: ARRAY
12005: NONEQUAL
12006: IFFALSE 12028
12008: PUSH
12009: LD_OWVAR 2
12013: PPUSH
12014: LD_VAR 0 2
12018: PPUSH
12019: CALL_OW 81
12023: PUSH
12024: LD_INT 1
12026: NONEQUAL
12027: AND
12028: OR
12029: IFFALSE 12043
// begin result := true ;
12031: LD_ADDR_VAR 0 1
12035: PUSH
12036: LD_INT 1
12038: ST_TO_ADDR
// exit ;
12039: POP
12040: POP
12041: GO 12047
// end ;
12043: GO 11929
12045: POP
12046: POP
// end ;
12047: LD_VAR 0 1
12051: RET
// function CanWinLoose ; begin
12052: LD_INT 0
12054: PPUSH
// result := true ;
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: LD_INT 1
12062: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12063: CALL_OW 531
12067: IFFALSE 12079
12069: PUSH
12070: CALL_OW 519
12074: PUSH
12075: LD_INT 1
12077: GREATER
12078: AND
12079: IFFALSE 12089
// result := false ;
12081: LD_ADDR_VAR 0 1
12085: PUSH
12086: LD_INT 0
12088: ST_TO_ADDR
// end ;
12089: LD_VAR 0 1
12093: RET
// function HasPower ( i ) ; begin
12094: LD_INT 0
12096: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12097: LD_ADDR_VAR 0 2
12101: PUSH
12102: LD_INT 22
12104: PUSH
12105: LD_VAR 0 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: LD_INT 21
12119: PUSH
12120: LD_INT 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 33
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 33
12139: PUSH
12140: LD_INT 5
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: ST_TO_ADDR
// end ; end_of_file
12162: LD_VAR 0 2
12166: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12167: LD_INT 0
12169: PPUSH
12170: PPUSH
// if exist_mode then
12171: LD_VAR 0 2
12175: IFFALSE 12221
// begin unit := CreateCharacter ( prefix & ident ) ;
12177: LD_ADDR_VAR 0 5
12181: PUSH
12182: LD_VAR 0 3
12186: PUSH
12187: LD_VAR 0 1
12191: STR
12192: PPUSH
12193: CALL_OW 34
12197: ST_TO_ADDR
// if unit then
12198: LD_VAR 0 5
12202: IFFALSE 12219
// DeleteCharacters ( prefix & ident ) ;
12204: LD_VAR 0 3
12208: PUSH
12209: LD_VAR 0 1
12213: STR
12214: PPUSH
12215: CALL_OW 40
// end else
12219: GO 12236
// unit := NewCharacter ( ident ) ;
12221: LD_ADDR_VAR 0 5
12225: PUSH
12226: LD_VAR 0 1
12230: PPUSH
12231: CALL_OW 25
12235: ST_TO_ADDR
// result := unit ;
12236: LD_ADDR_VAR 0 4
12240: PUSH
12241: LD_VAR 0 5
12245: ST_TO_ADDR
// end ;
12246: LD_VAR 0 4
12250: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
12251: LD_INT 0
12253: PPUSH
12254: PPUSH
// if exist_mode then
12255: LD_VAR 0 2
12259: IFFALSE 12284
// unit := CreateCharacter ( prefix & ident ) else
12261: LD_ADDR_VAR 0 5
12265: PUSH
12266: LD_VAR 0 3
12270: PUSH
12271: LD_VAR 0 1
12275: STR
12276: PPUSH
12277: CALL_OW 34
12281: ST_TO_ADDR
12282: GO 12299
// unit := NewCharacter ( ident ) ;
12284: LD_ADDR_VAR 0 5
12288: PUSH
12289: LD_VAR 0 1
12293: PPUSH
12294: CALL_OW 25
12298: ST_TO_ADDR
// result := unit ;
12299: LD_ADDR_VAR 0 4
12303: PUSH
12304: LD_VAR 0 5
12308: ST_TO_ADDR
// end ;
12309: LD_VAR 0 4
12313: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12314: LD_INT 0
12316: PPUSH
12317: PPUSH
// if not side or not nation then
12318: LD_VAR 0 1
12322: NOT
12323: IFTRUE 12332
12325: PUSH
12326: LD_VAR 0 2
12330: NOT
12331: OR
12332: IFFALSE 12336
// exit ;
12334: GO 13106
// case nation of nation_american :
12336: LD_VAR 0 2
12340: PUSH
12341: LD_INT 1
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12563
12349: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12350: LD_ADDR_VAR 0 4
12354: PUSH
12355: LD_INT 35
12357: PUSH
12358: LD_INT 45
12360: PUSH
12361: LD_INT 46
12363: PUSH
12364: LD_INT 47
12366: PUSH
12367: LD_INT 82
12369: PUSH
12370: LD_INT 83
12372: PUSH
12373: LD_INT 84
12375: PUSH
12376: LD_INT 85
12378: PUSH
12379: LD_INT 86
12381: PUSH
12382: LD_INT 1
12384: PUSH
12385: LD_INT 2
12387: PUSH
12388: LD_INT 6
12390: PUSH
12391: LD_INT 15
12393: PUSH
12394: LD_INT 16
12396: PUSH
12397: LD_INT 7
12399: PUSH
12400: LD_INT 12
12402: PUSH
12403: LD_INT 13
12405: PUSH
12406: LD_INT 10
12408: PUSH
12409: LD_INT 14
12411: PUSH
12412: LD_INT 20
12414: PUSH
12415: LD_INT 21
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 25
12423: PUSH
12424: LD_INT 32
12426: PUSH
12427: LD_INT 27
12429: PUSH
12430: LD_INT 36
12432: PUSH
12433: LD_INT 69
12435: PUSH
12436: LD_INT 39
12438: PUSH
12439: LD_INT 34
12441: PUSH
12442: LD_INT 40
12444: PUSH
12445: LD_INT 48
12447: PUSH
12448: LD_INT 49
12450: PUSH
12451: LD_INT 50
12453: PUSH
12454: LD_INT 51
12456: PUSH
12457: LD_INT 52
12459: PUSH
12460: LD_INT 53
12462: PUSH
12463: LD_INT 54
12465: PUSH
12466: LD_INT 55
12468: PUSH
12469: LD_INT 56
12471: PUSH
12472: LD_INT 57
12474: PUSH
12475: LD_INT 58
12477: PUSH
12478: LD_INT 59
12480: PUSH
12481: LD_INT 60
12483: PUSH
12484: LD_INT 61
12486: PUSH
12487: LD_INT 62
12489: PUSH
12490: LD_INT 80
12492: PUSH
12493: LD_INT 82
12495: PUSH
12496: LD_INT 83
12498: PUSH
12499: LD_INT 84
12501: PUSH
12502: LD_INT 85
12504: PUSH
12505: LD_INT 86
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: ST_TO_ADDR
12561: GO 13028
12563: LD_INT 2
12565: DOUBLE
12566: EQUAL
12567: IFTRUE 12571
12569: GO 12797
12571: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
12572: LD_ADDR_VAR 0 4
12576: PUSH
12577: LD_INT 35
12579: PUSH
12580: LD_INT 45
12582: PUSH
12583: LD_INT 46
12585: PUSH
12586: LD_INT 47
12588: PUSH
12589: LD_INT 82
12591: PUSH
12592: LD_INT 83
12594: PUSH
12595: LD_INT 84
12597: PUSH
12598: LD_INT 85
12600: PUSH
12601: LD_INT 87
12603: PUSH
12604: LD_INT 70
12606: PUSH
12607: LD_INT 1
12609: PUSH
12610: LD_INT 11
12612: PUSH
12613: LD_INT 3
12615: PUSH
12616: LD_INT 4
12618: PUSH
12619: LD_INT 5
12621: PUSH
12622: LD_INT 6
12624: PUSH
12625: LD_INT 15
12627: PUSH
12628: LD_INT 18
12630: PUSH
12631: LD_INT 7
12633: PUSH
12634: LD_INT 17
12636: PUSH
12637: LD_INT 8
12639: PUSH
12640: LD_INT 20
12642: PUSH
12643: LD_INT 21
12645: PUSH
12646: LD_INT 22
12648: PUSH
12649: LD_INT 72
12651: PUSH
12652: LD_INT 26
12654: PUSH
12655: LD_INT 69
12657: PUSH
12658: LD_INT 39
12660: PUSH
12661: LD_INT 40
12663: PUSH
12664: LD_INT 41
12666: PUSH
12667: LD_INT 42
12669: PUSH
12670: LD_INT 43
12672: PUSH
12673: LD_INT 48
12675: PUSH
12676: LD_INT 49
12678: PUSH
12679: LD_INT 50
12681: PUSH
12682: LD_INT 51
12684: PUSH
12685: LD_INT 52
12687: PUSH
12688: LD_INT 53
12690: PUSH
12691: LD_INT 54
12693: PUSH
12694: LD_INT 55
12696: PUSH
12697: LD_INT 56
12699: PUSH
12700: LD_INT 60
12702: PUSH
12703: LD_INT 61
12705: PUSH
12706: LD_INT 62
12708: PUSH
12709: LD_INT 66
12711: PUSH
12712: LD_INT 67
12714: PUSH
12715: LD_INT 68
12717: PUSH
12718: LD_INT 81
12720: PUSH
12721: LD_INT 82
12723: PUSH
12724: LD_INT 83
12726: PUSH
12727: LD_INT 84
12729: PUSH
12730: LD_INT 85
12732: PUSH
12733: LD_INT 87
12735: PUSH
12736: LD_INT 88
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: ST_TO_ADDR
12795: GO 13028
12797: LD_INT 3
12799: DOUBLE
12800: EQUAL
12801: IFTRUE 12805
12803: GO 13027
12805: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
12806: LD_ADDR_VAR 0 4
12810: PUSH
12811: LD_INT 46
12813: PUSH
12814: LD_INT 47
12816: PUSH
12817: LD_INT 1
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 82
12825: PUSH
12826: LD_INT 83
12828: PUSH
12829: LD_INT 84
12831: PUSH
12832: LD_INT 85
12834: PUSH
12835: LD_INT 86
12837: PUSH
12838: LD_INT 11
12840: PUSH
12841: LD_INT 9
12843: PUSH
12844: LD_INT 20
12846: PUSH
12847: LD_INT 19
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 24
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 25
12861: PUSH
12862: LD_INT 28
12864: PUSH
12865: LD_INT 29
12867: PUSH
12868: LD_INT 30
12870: PUSH
12871: LD_INT 31
12873: PUSH
12874: LD_INT 37
12876: PUSH
12877: LD_INT 38
12879: PUSH
12880: LD_INT 32
12882: PUSH
12883: LD_INT 27
12885: PUSH
12886: LD_INT 33
12888: PUSH
12889: LD_INT 69
12891: PUSH
12892: LD_INT 39
12894: PUSH
12895: LD_INT 34
12897: PUSH
12898: LD_INT 40
12900: PUSH
12901: LD_INT 71
12903: PUSH
12904: LD_INT 23
12906: PUSH
12907: LD_INT 44
12909: PUSH
12910: LD_INT 48
12912: PUSH
12913: LD_INT 49
12915: PUSH
12916: LD_INT 50
12918: PUSH
12919: LD_INT 51
12921: PUSH
12922: LD_INT 52
12924: PUSH
12925: LD_INT 53
12927: PUSH
12928: LD_INT 54
12930: PUSH
12931: LD_INT 55
12933: PUSH
12934: LD_INT 56
12936: PUSH
12937: LD_INT 57
12939: PUSH
12940: LD_INT 58
12942: PUSH
12943: LD_INT 59
12945: PUSH
12946: LD_INT 63
12948: PUSH
12949: LD_INT 64
12951: PUSH
12952: LD_INT 65
12954: PUSH
12955: LD_INT 82
12957: PUSH
12958: LD_INT 83
12960: PUSH
12961: LD_INT 84
12963: PUSH
12964: LD_INT 85
12966: PUSH
12967: LD_INT 86
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: ST_TO_ADDR
13025: GO 13028
13027: POP
// if state > - 1 and state < 3 then
13028: LD_VAR 0 3
13032: PUSH
13033: LD_INT 1
13035: NEG
13036: GREATER
13037: IFFALSE 13049
13039: PUSH
13040: LD_VAR 0 3
13044: PUSH
13045: LD_INT 3
13047: LESS
13048: AND
13049: IFFALSE 13106
// for i in result do
13051: LD_ADDR_VAR 0 5
13055: PUSH
13056: LD_VAR 0 4
13060: PUSH
13061: FOR_IN
13062: IFFALSE 13104
// if GetTech ( i , side ) <> state then
13064: LD_VAR 0 5
13068: PPUSH
13069: LD_VAR 0 1
13073: PPUSH
13074: CALL_OW 321
13078: PUSH
13079: LD_VAR 0 3
13083: NONEQUAL
13084: IFFALSE 13102
// result := result diff i ;
13086: LD_ADDR_VAR 0 4
13090: PUSH
13091: LD_VAR 0 4
13095: PUSH
13096: LD_VAR 0 5
13100: DIFF
13101: ST_TO_ADDR
13102: GO 13061
13104: POP
13105: POP
// end ;
13106: LD_VAR 0 4
13110: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13111: LD_INT 0
13113: PPUSH
13114: PPUSH
13115: PPUSH
// result := true ;
13116: LD_ADDR_VAR 0 3
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13124: LD_ADDR_VAR 0 5
13128: PUSH
13129: LD_VAR 0 2
13133: PPUSH
13134: CALL_OW 480
13138: ST_TO_ADDR
// if not tmp then
13139: LD_VAR 0 5
13143: NOT
13144: IFFALSE 13148
// exit ;
13146: GO 13197
// for i in tmp do
13148: LD_ADDR_VAR 0 4
13152: PUSH
13153: LD_VAR 0 5
13157: PUSH
13158: FOR_IN
13159: IFFALSE 13195
// if GetTech ( i , side ) <> state_researched then
13161: LD_VAR 0 4
13165: PPUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: CALL_OW 321
13175: PUSH
13176: LD_INT 2
13178: NONEQUAL
13179: IFFALSE 13193
// begin result := false ;
13181: LD_ADDR_VAR 0 3
13185: PUSH
13186: LD_INT 0
13188: ST_TO_ADDR
// exit ;
13189: POP
13190: POP
13191: GO 13197
// end ;
13193: GO 13158
13195: POP
13196: POP
// end ;
13197: LD_VAR 0 3
13201: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13202: LD_INT 0
13204: PPUSH
13205: PPUSH
13206: PPUSH
13207: PPUSH
13208: PPUSH
13209: PPUSH
13210: PPUSH
13211: PPUSH
13212: PPUSH
13213: PPUSH
13214: PPUSH
13215: PPUSH
13216: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13217: LD_VAR 0 1
13221: NOT
13222: IFTRUE 13239
13224: PUSH
13225: LD_VAR 0 1
13229: PPUSH
13230: CALL_OW 257
13234: PUSH
13235: LD_INT 9
13237: NONEQUAL
13238: OR
13239: IFFALSE 13243
// exit ;
13241: GO 13822
// side := GetSide ( unit ) ;
13243: LD_ADDR_VAR 0 9
13247: PUSH
13248: LD_VAR 0 1
13252: PPUSH
13253: CALL_OW 255
13257: ST_TO_ADDR
// tech_space := tech_spacanom ;
13258: LD_ADDR_VAR 0 12
13262: PUSH
13263: LD_INT 29
13265: ST_TO_ADDR
// tech_time := tech_taurad ;
13266: LD_ADDR_VAR 0 13
13270: PUSH
13271: LD_INT 28
13273: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13274: LD_ADDR_VAR 0 11
13278: PUSH
13279: LD_VAR 0 1
13283: PPUSH
13284: CALL_OW 310
13288: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13289: LD_VAR 0 11
13293: PPUSH
13294: CALL_OW 247
13298: PUSH
13299: LD_INT 2
13301: EQUAL
13302: IFFALSE 13306
// exit ;
13304: GO 13822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13306: LD_ADDR_VAR 0 8
13310: PUSH
13311: LD_INT 81
13313: PUSH
13314: LD_VAR 0 9
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 3
13325: PUSH
13326: LD_INT 21
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PPUSH
13344: CALL_OW 69
13348: ST_TO_ADDR
// if not tmp then
13349: LD_VAR 0 8
13353: NOT
13354: IFFALSE 13358
// exit ;
13356: GO 13822
// if in_unit then
13358: LD_VAR 0 11
13362: IFFALSE 13386
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13364: LD_ADDR_VAR 0 10
13368: PUSH
13369: LD_VAR 0 8
13373: PPUSH
13374: LD_VAR 0 11
13378: PPUSH
13379: CALL_OW 74
13383: ST_TO_ADDR
13384: GO 13406
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13386: LD_ADDR_VAR 0 10
13390: PUSH
13391: LD_VAR 0 8
13395: PPUSH
13396: LD_VAR 0 1
13400: PPUSH
13401: CALL_OW 74
13405: ST_TO_ADDR
// if not enemy then
13406: LD_VAR 0 10
13410: NOT
13411: IFFALSE 13415
// exit ;
13413: GO 13822
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13415: LD_VAR 0 11
13419: IFFALSE 13441
13421: PUSH
13422: LD_VAR 0 11
13426: PPUSH
13427: LD_VAR 0 10
13431: PPUSH
13432: CALL_OW 296
13436: PUSH
13437: LD_INT 13
13439: GREATER
13440: AND
13441: IFTRUE 13463
13443: PUSH
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_VAR 0 10
13453: PPUSH
13454: CALL_OW 296
13458: PUSH
13459: LD_INT 12
13461: GREATER
13462: OR
13463: IFFALSE 13467
// exit ;
13465: GO 13822
// missile := [ 1 ] ;
13467: LD_ADDR_VAR 0 14
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13478: LD_VAR 0 9
13482: PPUSH
13483: LD_VAR 0 12
13487: PPUSH
13488: CALL_OW 325
13492: IFFALSE 13521
// missile := Replace ( missile , missile + 1 , 2 ) ;
13494: LD_ADDR_VAR 0 14
13498: PUSH
13499: LD_VAR 0 14
13503: PPUSH
13504: LD_VAR 0 14
13508: PUSH
13509: LD_INT 1
13511: PLUS
13512: PPUSH
13513: LD_INT 2
13515: PPUSH
13516: CALL_OW 1
13520: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13521: LD_VAR 0 9
13525: PPUSH
13526: LD_VAR 0 13
13530: PPUSH
13531: CALL_OW 325
13535: IFFALSE 13559
13537: PUSH
13538: LD_VAR 0 10
13542: PPUSH
13543: CALL_OW 255
13547: PPUSH
13548: LD_VAR 0 13
13552: PPUSH
13553: CALL_OW 325
13557: NOT
13558: AND
13559: IFFALSE 13588
// missile := Replace ( missile , missile + 1 , 3 ) ;
13561: LD_ADDR_VAR 0 14
13565: PUSH
13566: LD_VAR 0 14
13570: PPUSH
13571: LD_VAR 0 14
13575: PUSH
13576: LD_INT 1
13578: PLUS
13579: PPUSH
13580: LD_INT 3
13582: PPUSH
13583: CALL_OW 1
13587: ST_TO_ADDR
// if missile < 2 then
13588: LD_VAR 0 14
13592: PUSH
13593: LD_INT 2
13595: LESS
13596: IFFALSE 13600
// exit ;
13598: GO 13822
// x := GetX ( enemy ) ;
13600: LD_ADDR_VAR 0 4
13604: PUSH
13605: LD_VAR 0 10
13609: PPUSH
13610: CALL_OW 250
13614: ST_TO_ADDR
// y := GetY ( enemy ) ;
13615: LD_ADDR_VAR 0 5
13619: PUSH
13620: LD_VAR 0 10
13624: PPUSH
13625: CALL_OW 251
13629: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13630: LD_ADDR_VAR 0 6
13634: PUSH
13635: LD_VAR 0 4
13639: PUSH
13640: LD_INT 1
13642: NEG
13643: PPUSH
13644: LD_INT 1
13646: PPUSH
13647: CALL_OW 12
13651: PLUS
13652: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13653: LD_ADDR_VAR 0 7
13657: PUSH
13658: LD_VAR 0 5
13662: PUSH
13663: LD_INT 1
13665: NEG
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: CALL_OW 12
13674: PLUS
13675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13676: LD_VAR 0 6
13680: PPUSH
13681: LD_VAR 0 7
13685: PPUSH
13686: CALL_OW 488
13690: NOT
13691: IFFALSE 13713
// begin _x := x ;
13693: LD_ADDR_VAR 0 6
13697: PUSH
13698: LD_VAR 0 4
13702: ST_TO_ADDR
// _y := y ;
13703: LD_ADDR_VAR 0 7
13707: PUSH
13708: LD_VAR 0 5
13712: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_INT 1
13720: PPUSH
13721: LD_VAR 0 14
13725: PPUSH
13726: CALL_OW 12
13730: ST_TO_ADDR
// case i of 1 :
13731: LD_VAR 0 3
13735: PUSH
13736: LD_INT 1
13738: DOUBLE
13739: EQUAL
13740: IFTRUE 13744
13742: GO 13761
13744: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13745: LD_VAR 0 1
13749: PPUSH
13750: LD_VAR 0 10
13754: PPUSH
13755: CALL_OW 115
13759: GO 13822
13761: LD_INT 2
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13769
13767: GO 13791
13769: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13770: LD_VAR 0 1
13774: PPUSH
13775: LD_VAR 0 6
13779: PPUSH
13780: LD_VAR 0 7
13784: PPUSH
13785: CALL_OW 153
13789: GO 13822
13791: LD_INT 3
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 13821
13799: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13800: LD_VAR 0 1
13804: PPUSH
13805: LD_VAR 0 6
13809: PPUSH
13810: LD_VAR 0 7
13814: PPUSH
13815: CALL_OW 154
13819: GO 13822
13821: POP
// end ;
13822: LD_VAR 0 2
13826: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13827: LD_INT 0
13829: PPUSH
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
// if not unit or not building then
13835: LD_VAR 0 1
13839: NOT
13840: IFTRUE 13849
13842: PUSH
13843: LD_VAR 0 2
13847: NOT
13848: OR
13849: IFFALSE 13853
// exit ;
13851: GO 14011
// x := GetX ( building ) ;
13853: LD_ADDR_VAR 0 5
13857: PUSH
13858: LD_VAR 0 2
13862: PPUSH
13863: CALL_OW 250
13867: ST_TO_ADDR
// y := GetY ( building ) ;
13868: LD_ADDR_VAR 0 6
13872: PUSH
13873: LD_VAR 0 2
13877: PPUSH
13878: CALL_OW 251
13882: ST_TO_ADDR
// for i := 0 to 5 do
13883: LD_ADDR_VAR 0 4
13887: PUSH
13888: DOUBLE
13889: LD_INT 0
13891: DEC
13892: ST_TO_ADDR
13893: LD_INT 5
13895: PUSH
13896: FOR_TO
13897: IFFALSE 14009
// begin _x := ShiftX ( x , i , 3 ) ;
13899: LD_ADDR_VAR 0 7
13903: PUSH
13904: LD_VAR 0 5
13908: PPUSH
13909: LD_VAR 0 4
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: CALL_OW 272
13921: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13922: LD_ADDR_VAR 0 8
13926: PUSH
13927: LD_VAR 0 6
13931: PPUSH
13932: LD_VAR 0 4
13936: PPUSH
13937: LD_INT 3
13939: PPUSH
13940: CALL_OW 273
13944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13945: LD_VAR 0 7
13949: PPUSH
13950: LD_VAR 0 8
13954: PPUSH
13955: CALL_OW 488
13959: NOT
13960: IFFALSE 13964
// continue ;
13962: GO 13896
// if HexInfo ( _x , _y ) = 0 then
13964: LD_VAR 0 7
13968: PPUSH
13969: LD_VAR 0 8
13973: PPUSH
13974: CALL_OW 428
13978: PUSH
13979: LD_INT 0
13981: EQUAL
13982: IFFALSE 14007
// begin ComMoveXY ( unit , _x , _y ) ;
13984: LD_VAR 0 1
13988: PPUSH
13989: LD_VAR 0 7
13993: PPUSH
13994: LD_VAR 0 8
13998: PPUSH
13999: CALL_OW 111
// exit ;
14003: POP
14004: POP
14005: GO 14011
// end ; end ;
14007: GO 13896
14009: POP
14010: POP
// end ;
14011: LD_VAR 0 3
14015: RET
// export function ScanBase ( side , base_area ) ; begin
14016: LD_INT 0
14018: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_VAR 0 2
14028: PPUSH
14029: LD_INT 81
14031: PUSH
14032: LD_VAR 0 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 70
14045: ST_TO_ADDR
// end ;
14046: LD_VAR 0 3
14050: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14051: LD_INT 0
14053: PPUSH
14054: PPUSH
14055: PPUSH
14056: PPUSH
// result := false ;
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: LD_INT 0
14064: ST_TO_ADDR
// side := GetSide ( unit ) ;
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 255
14079: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14080: LD_ADDR_VAR 0 4
14084: PUSH
14085: LD_VAR 0 1
14089: PPUSH
14090: CALL_OW 248
14094: ST_TO_ADDR
// case nat of 1 :
14095: LD_VAR 0 4
14099: PUSH
14100: LD_INT 1
14102: DOUBLE
14103: EQUAL
14104: IFTRUE 14108
14106: GO 14119
14108: POP
// tech := tech_lassight ; 2 :
14109: LD_ADDR_VAR 0 5
14113: PUSH
14114: LD_INT 12
14116: ST_TO_ADDR
14117: GO 14158
14119: LD_INT 2
14121: DOUBLE
14122: EQUAL
14123: IFTRUE 14127
14125: GO 14138
14127: POP
// tech := tech_mortar ; 3 :
14128: LD_ADDR_VAR 0 5
14132: PUSH
14133: LD_INT 41
14135: ST_TO_ADDR
14136: GO 14158
14138: LD_INT 3
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14157
14146: POP
// tech := tech_bazooka ; end ;
14147: LD_ADDR_VAR 0 5
14151: PUSH
14152: LD_INT 44
14154: ST_TO_ADDR
14155: GO 14158
14157: POP
// if Researched ( side , tech ) then
14158: LD_VAR 0 3
14162: PPUSH
14163: LD_VAR 0 5
14167: PPUSH
14168: CALL_OW 325
14172: IFFALSE 14199
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14174: LD_ADDR_VAR 0 2
14178: PUSH
14179: LD_INT 5
14181: PUSH
14182: LD_INT 8
14184: PUSH
14185: LD_INT 9
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: LIST
14192: PUSH
14193: LD_VAR 0 4
14197: ARRAY
14198: ST_TO_ADDR
// end ;
14199: LD_VAR 0 2
14203: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14204: LD_INT 0
14206: PPUSH
14207: PPUSH
14208: PPUSH
// if not mines then
14209: LD_VAR 0 2
14213: NOT
14214: IFFALSE 14218
// exit ;
14216: GO 14362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14218: LD_ADDR_VAR 0 5
14222: PUSH
14223: LD_INT 81
14225: PUSH
14226: LD_VAR 0 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 3
14237: PUSH
14238: LD_INT 21
14240: PUSH
14241: LD_INT 3
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// for i in mines do
14261: LD_ADDR_VAR 0 4
14265: PUSH
14266: LD_VAR 0 2
14270: PUSH
14271: FOR_IN
14272: IFFALSE 14360
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14274: LD_VAR 0 4
14278: PUSH
14279: LD_INT 1
14281: ARRAY
14282: PPUSH
14283: LD_VAR 0 4
14287: PUSH
14288: LD_INT 2
14290: ARRAY
14291: PPUSH
14292: CALL_OW 458
14296: NOT
14297: IFFALSE 14301
// continue ;
14299: GO 14271
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 1
14308: ARRAY
14309: PPUSH
14310: LD_VAR 0 4
14314: PUSH
14315: LD_INT 2
14317: ARRAY
14318: PPUSH
14319: CALL_OW 428
14323: PUSH
14324: LD_VAR 0 5
14328: IN
14329: IFFALSE 14358
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14331: LD_VAR 0 4
14335: PUSH
14336: LD_INT 1
14338: ARRAY
14339: PPUSH
14340: LD_VAR 0 4
14344: PUSH
14345: LD_INT 2
14347: ARRAY
14348: PPUSH
14349: LD_VAR 0 1
14353: PPUSH
14354: CALL_OW 456
// end ;
14358: GO 14271
14360: POP
14361: POP
// end ;
14362: LD_VAR 0 3
14366: RET
// export function Count ( array ) ; begin
14367: LD_INT 0
14369: PPUSH
// result := array + 0 ;
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_VAR 0 1
14379: PUSH
14380: LD_INT 0
14382: PLUS
14383: ST_TO_ADDR
// end ;
14384: LD_VAR 0 2
14388: RET
// export function IsEmpty ( building ) ; begin
14389: LD_INT 0
14391: PPUSH
// if not building then
14392: LD_VAR 0 1
14396: NOT
14397: IFFALSE 14401
// exit ;
14399: GO 14444
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14401: LD_ADDR_VAR 0 2
14405: PUSH
14406: LD_VAR 0 1
14410: PUSH
14411: LD_INT 22
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: CALL_OW 255
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 58
14430: PUSH
14431: EMPTY
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PPUSH
14438: CALL_OW 69
14442: IN
14443: ST_TO_ADDR
// end ;
14444: LD_VAR 0 2
14448: RET
// export function IsNotFull ( building ) ; var places ; begin
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
// if not building then
14453: LD_VAR 0 1
14457: NOT
14458: IFFALSE 14462
// exit ;
14460: GO 14490
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
14462: LD_ADDR_VAR 0 2
14466: PUSH
14467: LD_VAR 0 1
14471: PPUSH
14472: LD_INT 3
14474: PUSH
14475: LD_INT 62
14477: PUSH
14478: EMPTY
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PPUSH
14485: CALL_OW 72
14489: ST_TO_ADDR
// end ;
14490: LD_VAR 0 2
14494: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
14499: PPUSH
14500: PPUSH
// tmp := [ ] ;
14501: LD_ADDR_VAR 0 3
14505: PUSH
14506: EMPTY
14507: ST_TO_ADDR
// list := [ ] ;
14508: LD_ADDR_VAR 0 5
14512: PUSH
14513: EMPTY
14514: ST_TO_ADDR
// for i = 16 to 25 do
14515: LD_ADDR_VAR 0 4
14519: PUSH
14520: DOUBLE
14521: LD_INT 16
14523: DEC
14524: ST_TO_ADDR
14525: LD_INT 25
14527: PUSH
14528: FOR_TO
14529: IFFALSE 14602
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14531: LD_ADDR_VAR 0 3
14535: PUSH
14536: LD_VAR 0 3
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_VAR 0 1
14548: PPUSH
14549: CALL_OW 255
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 91
14560: PUSH
14561: LD_VAR 0 1
14565: PUSH
14566: LD_INT 6
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 30
14576: PUSH
14577: LD_VAR 0 4
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: PPUSH
14594: CALL_OW 69
14598: ADD
14599: ST_TO_ADDR
14600: GO 14528
14602: POP
14603: POP
// for i = 1 to tmp do
14604: LD_ADDR_VAR 0 4
14608: PUSH
14609: DOUBLE
14610: LD_INT 1
14612: DEC
14613: ST_TO_ADDR
14614: LD_VAR 0 3
14618: PUSH
14619: FOR_TO
14620: IFFALSE 14708
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14622: LD_ADDR_VAR 0 5
14626: PUSH
14627: LD_VAR 0 5
14631: PUSH
14632: LD_VAR 0 3
14636: PUSH
14637: LD_VAR 0 4
14641: ARRAY
14642: PPUSH
14643: CALL_OW 266
14647: PUSH
14648: LD_VAR 0 3
14652: PUSH
14653: LD_VAR 0 4
14657: ARRAY
14658: PPUSH
14659: CALL_OW 250
14663: PUSH
14664: LD_VAR 0 3
14668: PUSH
14669: LD_VAR 0 4
14673: ARRAY
14674: PPUSH
14675: CALL_OW 251
14679: PUSH
14680: LD_VAR 0 3
14684: PUSH
14685: LD_VAR 0 4
14689: ARRAY
14690: PPUSH
14691: CALL_OW 254
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: ADD
14705: ST_TO_ADDR
14706: GO 14619
14708: POP
14709: POP
// result := list ;
14710: LD_ADDR_VAR 0 2
14714: PUSH
14715: LD_VAR 0 5
14719: ST_TO_ADDR
// end ;
14720: LD_VAR 0 2
14724: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14725: LD_INT 0
14727: PPUSH
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
14733: PPUSH
// if not factory then
14734: LD_VAR 0 1
14738: NOT
14739: IFFALSE 14743
// exit ;
14741: GO 15346
// if control = control_apeman then
14743: LD_VAR 0 4
14747: PUSH
14748: LD_INT 5
14750: EQUAL
14751: IFFALSE 14860
// begin tmp := UnitsInside ( factory ) ;
14753: LD_ADDR_VAR 0 8
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 313
14767: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14768: LD_VAR 0 8
14772: PPUSH
14773: LD_INT 25
14775: PUSH
14776: LD_INT 12
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 72
14787: NOT
14788: IFFALSE 14798
// control := control_manual ;
14790: LD_ADDR_VAR 0 4
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14798: LD_ADDR_VAR 0 8
14802: PUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL 14495 0 1
14812: ST_TO_ADDR
// if tmp then
14813: LD_VAR 0 8
14817: IFFALSE 14860
// begin for i in tmp do
14819: LD_ADDR_VAR 0 7
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: FOR_IN
14830: IFFALSE 14858
// if i [ 1 ] = b_ext_radio then
14832: LD_VAR 0 7
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: PUSH
14841: LD_INT 22
14843: EQUAL
14844: IFFALSE 14856
// begin control := control_remote ;
14846: LD_ADDR_VAR 0 4
14850: PUSH
14851: LD_INT 2
14853: ST_TO_ADDR
// break ;
14854: GO 14858
// end ;
14856: GO 14829
14858: POP
14859: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14860: LD_VAR 0 1
14864: PPUSH
14865: LD_VAR 0 2
14869: PPUSH
14870: LD_VAR 0 3
14874: PPUSH
14875: LD_VAR 0 4
14879: PPUSH
14880: LD_VAR 0 5
14884: PPUSH
14885: CALL_OW 448
14889: IFFALSE 14924
// begin result := [ chassis , engine , control , weapon ] ;
14891: LD_ADDR_VAR 0 6
14895: PUSH
14896: LD_VAR 0 2
14900: PUSH
14901: LD_VAR 0 3
14905: PUSH
14906: LD_VAR 0 4
14910: PUSH
14911: LD_VAR 0 5
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: ST_TO_ADDR
// exit ;
14922: GO 15346
// end ; _chassis := AvailableChassisList ( factory ) ;
14924: LD_ADDR_VAR 0 9
14928: PUSH
14929: LD_VAR 0 1
14933: PPUSH
14934: CALL_OW 475
14938: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14939: LD_ADDR_VAR 0 11
14943: PUSH
14944: LD_VAR 0 1
14948: PPUSH
14949: CALL_OW 476
14953: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14954: LD_ADDR_VAR 0 12
14958: PUSH
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 477
14968: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14969: LD_ADDR_VAR 0 10
14973: PUSH
14974: LD_VAR 0 1
14978: PPUSH
14979: CALL_OW 478
14983: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14984: LD_VAR 0 9
14988: NOT
14989: IFTRUE 14998
14991: PUSH
14992: LD_VAR 0 11
14996: NOT
14997: OR
14998: IFTRUE 15007
15000: PUSH
15001: LD_VAR 0 12
15005: NOT
15006: OR
15007: IFTRUE 15016
15009: PUSH
15010: LD_VAR 0 10
15014: NOT
15015: OR
15016: IFFALSE 15051
// begin result := [ chassis , engine , control , weapon ] ;
15018: LD_ADDR_VAR 0 6
15022: PUSH
15023: LD_VAR 0 2
15027: PUSH
15028: LD_VAR 0 3
15032: PUSH
15033: LD_VAR 0 4
15037: PUSH
15038: LD_VAR 0 5
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: ST_TO_ADDR
// exit ;
15049: GO 15346
// end ; if not chassis in _chassis then
15051: LD_VAR 0 2
15055: PUSH
15056: LD_VAR 0 9
15060: IN
15061: NOT
15062: IFFALSE 15088
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15064: LD_ADDR_VAR 0 2
15068: PUSH
15069: LD_VAR 0 9
15073: PUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_VAR 0 9
15081: PPUSH
15082: CALL_OW 12
15086: ARRAY
15087: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15088: LD_VAR 0 2
15092: PPUSH
15093: LD_VAR 0 3
15097: PPUSH
15098: CALL 15351 0 2
15102: NOT
15103: IFFALSE 15164
// repeat engine := _engine [ 1 ] ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 11
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15119: LD_ADDR_VAR 0 11
15123: PUSH
15124: LD_VAR 0 11
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 3
15136: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15137: LD_VAR 0 2
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: CALL 15351 0 2
15151: IFTRUE 15162
15153: PUSH
15154: LD_VAR 0 11
15158: PUSH
15159: EMPTY
15160: EQUAL
15161: OR
15162: IFFALSE 15105
// if not control in _control then
15164: LD_VAR 0 4
15168: PUSH
15169: LD_VAR 0 12
15173: IN
15174: NOT
15175: IFFALSE 15201
// control := _control [ rand ( 1 , _control ) ] ;
15177: LD_ADDR_VAR 0 4
15181: PUSH
15182: LD_VAR 0 12
15186: PUSH
15187: LD_INT 1
15189: PPUSH
15190: LD_VAR 0 12
15194: PPUSH
15195: CALL_OW 12
15199: ARRAY
15200: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15201: LD_VAR 0 2
15205: PPUSH
15206: LD_VAR 0 5
15210: PPUSH
15211: CALL 15573 0 2
15215: NOT
15216: IFFALSE 15277
// repeat weapon := _weapon [ 1 ] ;
15218: LD_ADDR_VAR 0 5
15222: PUSH
15223: LD_VAR 0 10
15227: PUSH
15228: LD_INT 1
15230: ARRAY
15231: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15232: LD_ADDR_VAR 0 10
15236: PUSH
15237: LD_VAR 0 10
15241: PPUSH
15242: LD_INT 1
15244: PPUSH
15245: CALL_OW 3
15249: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_VAR 0 5
15259: PPUSH
15260: CALL 15573 0 2
15264: IFTRUE 15275
15266: PUSH
15267: LD_VAR 0 10
15271: PUSH
15272: EMPTY
15273: EQUAL
15274: OR
15275: IFFALSE 15218
// result := [ ] ;
15277: LD_ADDR_VAR 0 6
15281: PUSH
15282: EMPTY
15283: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_VAR 0 2
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: LD_VAR 0 4
15303: PPUSH
15304: LD_VAR 0 5
15308: PPUSH
15309: CALL_OW 448
15313: IFFALSE 15346
// result := [ chassis , engine , control , weapon ] ;
15315: LD_ADDR_VAR 0 6
15319: PUSH
15320: LD_VAR 0 2
15324: PUSH
15325: LD_VAR 0 3
15329: PUSH
15330: LD_VAR 0 4
15334: PUSH
15335: LD_VAR 0 5
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: ST_TO_ADDR
// end ;
15346: LD_VAR 0 6
15350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15351: LD_INT 0
15353: PPUSH
// if not chassis or not engine then
15354: LD_VAR 0 1
15358: NOT
15359: IFTRUE 15368
15361: PUSH
15362: LD_VAR 0 2
15366: NOT
15367: OR
15368: IFFALSE 15372
// exit ;
15370: GO 15568
// case engine of engine_solar :
15372: LD_VAR 0 2
15376: PUSH
15377: LD_INT 2
15379: DOUBLE
15380: EQUAL
15381: IFTRUE 15385
15383: GO 15423
15385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_INT 11
15393: PUSH
15394: LD_INT 12
15396: PUSH
15397: LD_INT 13
15399: PUSH
15400: LD_INT 14
15402: PUSH
15403: LD_INT 1
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 3
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: ST_TO_ADDR
15421: GO 15552
15423: LD_INT 1
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 15493
15431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_INT 11
15439: PUSH
15440: LD_INT 12
15442: PUSH
15443: LD_INT 13
15445: PUSH
15446: LD_INT 14
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: LD_INT 2
15454: PUSH
15455: LD_INT 3
15457: PUSH
15458: LD_INT 4
15460: PUSH
15461: LD_INT 5
15463: PUSH
15464: LD_INT 21
15466: PUSH
15467: LD_INT 23
15469: PUSH
15470: LD_INT 22
15472: PUSH
15473: LD_INT 24
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: ST_TO_ADDR
15491: GO 15552
15493: LD_INT 3
15495: DOUBLE
15496: EQUAL
15497: IFTRUE 15501
15499: GO 15551
15501: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15502: LD_ADDR_VAR 0 3
15506: PUSH
15507: LD_INT 13
15509: PUSH
15510: LD_INT 14
15512: PUSH
15513: LD_INT 2
15515: PUSH
15516: LD_INT 3
15518: PUSH
15519: LD_INT 4
15521: PUSH
15522: LD_INT 5
15524: PUSH
15525: LD_INT 21
15527: PUSH
15528: LD_INT 22
15530: PUSH
15531: LD_INT 23
15533: PUSH
15534: LD_INT 24
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: ST_TO_ADDR
15549: GO 15552
15551: POP
// result := ( chassis in result ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_VAR 0 1
15561: PUSH
15562: LD_VAR 0 3
15566: IN
15567: ST_TO_ADDR
// end ;
15568: LD_VAR 0 3
15572: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15573: LD_INT 0
15575: PPUSH
// if not chassis or not weapon then
15576: LD_VAR 0 1
15580: NOT
15581: IFTRUE 15590
15583: PUSH
15584: LD_VAR 0 2
15588: NOT
15589: OR
15590: IFFALSE 15594
// exit ;
15592: GO 16654
// case weapon of us_machine_gun :
15594: LD_VAR 0 2
15598: PUSH
15599: LD_INT 2
15601: DOUBLE
15602: EQUAL
15603: IFTRUE 15607
15605: GO 15637
15607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15608: LD_ADDR_VAR 0 3
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 3
15621: PUSH
15622: LD_INT 4
15624: PUSH
15625: LD_INT 5
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: ST_TO_ADDR
15635: GO 16638
15637: LD_INT 3
15639: DOUBLE
15640: EQUAL
15641: IFTRUE 15645
15643: GO 15675
15645: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: LD_INT 1
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: LD_INT 3
15659: PUSH
15660: LD_INT 4
15662: PUSH
15663: LD_INT 5
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: ST_TO_ADDR
15673: GO 16638
15675: LD_INT 11
15677: DOUBLE
15678: EQUAL
15679: IFTRUE 15683
15681: GO 15713
15683: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15684: LD_ADDR_VAR 0 3
15688: PUSH
15689: LD_INT 1
15691: PUSH
15692: LD_INT 2
15694: PUSH
15695: LD_INT 3
15697: PUSH
15698: LD_INT 4
15700: PUSH
15701: LD_INT 5
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: ST_TO_ADDR
15711: GO 16638
15713: LD_INT 4
15715: DOUBLE
15716: EQUAL
15717: IFTRUE 15721
15719: GO 15747
15721: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_INT 2
15729: PUSH
15730: LD_INT 3
15732: PUSH
15733: LD_INT 4
15735: PUSH
15736: LD_INT 5
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: ST_TO_ADDR
15745: GO 16638
15747: LD_INT 5
15749: DOUBLE
15750: EQUAL
15751: IFTRUE 15755
15753: GO 15781
15755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15756: LD_ADDR_VAR 0 3
15760: PUSH
15761: LD_INT 2
15763: PUSH
15764: LD_INT 3
15766: PUSH
15767: LD_INT 4
15769: PUSH
15770: LD_INT 5
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: ST_TO_ADDR
15779: GO 16638
15781: LD_INT 9
15783: DOUBLE
15784: EQUAL
15785: IFTRUE 15789
15787: GO 15815
15789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_INT 2
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: LD_INT 4
15803: PUSH
15804: LD_INT 5
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: ST_TO_ADDR
15813: GO 16638
15815: LD_INT 7
15817: DOUBLE
15818: EQUAL
15819: IFTRUE 15823
15821: GO 15849
15823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15824: LD_ADDR_VAR 0 3
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: LD_INT 3
15834: PUSH
15835: LD_INT 4
15837: PUSH
15838: LD_INT 5
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: ST_TO_ADDR
15847: GO 16638
15849: LD_INT 12
15851: DOUBLE
15852: EQUAL
15853: IFTRUE 15857
15855: GO 15883
15857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15858: LD_ADDR_VAR 0 3
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: LD_INT 4
15871: PUSH
15872: LD_INT 5
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: ST_TO_ADDR
15881: GO 16638
15883: LD_INT 13
15885: DOUBLE
15886: EQUAL
15887: IFTRUE 15891
15889: GO 15917
15891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15892: LD_ADDR_VAR 0 3
15896: PUSH
15897: LD_INT 2
15899: PUSH
15900: LD_INT 3
15902: PUSH
15903: LD_INT 4
15905: PUSH
15906: LD_INT 5
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: ST_TO_ADDR
15915: GO 16638
15917: LD_INT 14
15919: DOUBLE
15920: EQUAL
15921: IFTRUE 15925
15923: GO 15943
15925: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15926: LD_ADDR_VAR 0 3
15930: PUSH
15931: LD_INT 4
15933: PUSH
15934: LD_INT 5
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: ST_TO_ADDR
15941: GO 16638
15943: LD_INT 6
15945: DOUBLE
15946: EQUAL
15947: IFTRUE 15951
15949: GO 15969
15951: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15952: LD_ADDR_VAR 0 3
15956: PUSH
15957: LD_INT 4
15959: PUSH
15960: LD_INT 5
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: ST_TO_ADDR
15967: GO 16638
15969: LD_INT 10
15971: DOUBLE
15972: EQUAL
15973: IFTRUE 15977
15975: GO 15995
15977: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15978: LD_ADDR_VAR 0 3
15982: PUSH
15983: LD_INT 4
15985: PUSH
15986: LD_INT 5
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: ST_TO_ADDR
15993: GO 16638
15995: LD_INT 22
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16029
16003: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16004: LD_ADDR_VAR 0 3
16008: PUSH
16009: LD_INT 11
16011: PUSH
16012: LD_INT 12
16014: PUSH
16015: LD_INT 13
16017: PUSH
16018: LD_INT 14
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: ST_TO_ADDR
16027: GO 16638
16029: LD_INT 23
16031: DOUBLE
16032: EQUAL
16033: IFTRUE 16037
16035: GO 16063
16037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16038: LD_ADDR_VAR 0 3
16042: PUSH
16043: LD_INT 11
16045: PUSH
16046: LD_INT 12
16048: PUSH
16049: LD_INT 13
16051: PUSH
16052: LD_INT 14
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: ST_TO_ADDR
16061: GO 16638
16063: LD_INT 24
16065: DOUBLE
16066: EQUAL
16067: IFTRUE 16071
16069: GO 16097
16071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16072: LD_ADDR_VAR 0 3
16076: PUSH
16077: LD_INT 11
16079: PUSH
16080: LD_INT 12
16082: PUSH
16083: LD_INT 13
16085: PUSH
16086: LD_INT 14
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: ST_TO_ADDR
16095: GO 16638
16097: LD_INT 30
16099: DOUBLE
16100: EQUAL
16101: IFTRUE 16105
16103: GO 16131
16105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16106: LD_ADDR_VAR 0 3
16110: PUSH
16111: LD_INT 11
16113: PUSH
16114: LD_INT 12
16116: PUSH
16117: LD_INT 13
16119: PUSH
16120: LD_INT 14
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: ST_TO_ADDR
16129: GO 16638
16131: LD_INT 25
16133: DOUBLE
16134: EQUAL
16135: IFTRUE 16139
16137: GO 16157
16139: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16140: LD_ADDR_VAR 0 3
16144: PUSH
16145: LD_INT 13
16147: PUSH
16148: LD_INT 14
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: ST_TO_ADDR
16155: GO 16638
16157: LD_INT 27
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16183
16165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16166: LD_ADDR_VAR 0 3
16170: PUSH
16171: LD_INT 13
16173: PUSH
16174: LD_INT 14
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: ST_TO_ADDR
16181: GO 16638
16183: LD_INT 92
16185: DOUBLE
16186: EQUAL
16187: IFTRUE 16191
16189: GO 16217
16191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16192: LD_ADDR_VAR 0 3
16196: PUSH
16197: LD_INT 11
16199: PUSH
16200: LD_INT 12
16202: PUSH
16203: LD_INT 13
16205: PUSH
16206: LD_INT 14
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: ST_TO_ADDR
16215: GO 16638
16217: LD_INT 28
16219: DOUBLE
16220: EQUAL
16221: IFTRUE 16225
16223: GO 16243
16225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16226: LD_ADDR_VAR 0 3
16230: PUSH
16231: LD_INT 13
16233: PUSH
16234: LD_INT 14
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: ST_TO_ADDR
16241: GO 16638
16243: LD_INT 29
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16269
16251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16252: LD_ADDR_VAR 0 3
16256: PUSH
16257: LD_INT 13
16259: PUSH
16260: LD_INT 14
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: ST_TO_ADDR
16267: GO 16638
16269: LD_INT 31
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16295
16277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_INT 13
16285: PUSH
16286: LD_INT 14
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: ST_TO_ADDR
16293: GO 16638
16295: LD_INT 26
16297: DOUBLE
16298: EQUAL
16299: IFTRUE 16303
16301: GO 16321
16303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16304: LD_ADDR_VAR 0 3
16308: PUSH
16309: LD_INT 13
16311: PUSH
16312: LD_INT 14
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: ST_TO_ADDR
16319: GO 16638
16321: LD_INT 42
16323: DOUBLE
16324: EQUAL
16325: IFTRUE 16329
16327: GO 16355
16329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 22
16340: PUSH
16341: LD_INT 23
16343: PUSH
16344: LD_INT 24
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: ST_TO_ADDR
16353: GO 16638
16355: LD_INT 43
16357: DOUBLE
16358: EQUAL
16359: IFTRUE 16363
16361: GO 16389
16363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16364: LD_ADDR_VAR 0 3
16368: PUSH
16369: LD_INT 21
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_INT 23
16377: PUSH
16378: LD_INT 24
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: ST_TO_ADDR
16387: GO 16638
16389: LD_INT 44
16391: DOUBLE
16392: EQUAL
16393: IFTRUE 16397
16395: GO 16423
16397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 21
16405: PUSH
16406: LD_INT 22
16408: PUSH
16409: LD_INT 23
16411: PUSH
16412: LD_INT 24
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: ST_TO_ADDR
16421: GO 16638
16423: LD_INT 45
16425: DOUBLE
16426: EQUAL
16427: IFTRUE 16431
16429: GO 16457
16431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16432: LD_ADDR_VAR 0 3
16436: PUSH
16437: LD_INT 21
16439: PUSH
16440: LD_INT 22
16442: PUSH
16443: LD_INT 23
16445: PUSH
16446: LD_INT 24
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: ST_TO_ADDR
16455: GO 16638
16457: LD_INT 49
16459: DOUBLE
16460: EQUAL
16461: IFTRUE 16465
16463: GO 16491
16465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16466: LD_ADDR_VAR 0 3
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_INT 23
16479: PUSH
16480: LD_INT 24
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: ST_TO_ADDR
16489: GO 16638
16491: LD_INT 51
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16499
16497: GO 16525
16499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_INT 21
16507: PUSH
16508: LD_INT 22
16510: PUSH
16511: LD_INT 23
16513: PUSH
16514: LD_INT 24
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: ST_TO_ADDR
16523: GO 16638
16525: LD_INT 52
16527: DOUBLE
16528: EQUAL
16529: IFTRUE 16533
16531: GO 16559
16533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16534: LD_ADDR_VAR 0 3
16538: PUSH
16539: LD_INT 21
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_INT 23
16547: PUSH
16548: LD_INT 24
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: ST_TO_ADDR
16557: GO 16638
16559: LD_INT 53
16561: DOUBLE
16562: EQUAL
16563: IFTRUE 16567
16565: GO 16585
16567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_INT 23
16575: PUSH
16576: LD_INT 24
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: ST_TO_ADDR
16583: GO 16638
16585: LD_INT 46
16587: DOUBLE
16588: EQUAL
16589: IFTRUE 16593
16591: GO 16611
16593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_INT 23
16601: PUSH
16602: LD_INT 24
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: ST_TO_ADDR
16609: GO 16638
16611: LD_INT 47
16613: DOUBLE
16614: EQUAL
16615: IFTRUE 16619
16617: GO 16637
16619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16620: LD_ADDR_VAR 0 3
16624: PUSH
16625: LD_INT 23
16627: PUSH
16628: LD_INT 24
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: ST_TO_ADDR
16635: GO 16638
16637: POP
// result := ( chassis in result ) ;
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_VAR 0 1
16647: PUSH
16648: LD_VAR 0 3
16652: IN
16653: ST_TO_ADDR
// end ;
16654: LD_VAR 0 3
16658: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16659: LD_INT 0
16661: PPUSH
16662: PPUSH
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
16667: PPUSH
// result := array ;
16668: LD_ADDR_VAR 0 5
16672: PUSH
16673: LD_VAR 0 1
16677: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16678: LD_VAR 0 1
16682: NOT
16683: IFTRUE 16692
16685: PUSH
16686: LD_VAR 0 2
16690: NOT
16691: OR
16692: IFTRUE 16701
16694: PUSH
16695: LD_VAR 0 3
16699: NOT
16700: OR
16701: IFTRUE 16715
16703: PUSH
16704: LD_VAR 0 2
16708: PUSH
16709: LD_VAR 0 1
16713: GREATER
16714: OR
16715: IFTRUE 16729
16717: PUSH
16718: LD_VAR 0 3
16722: PUSH
16723: LD_VAR 0 1
16727: GREATER
16728: OR
16729: IFFALSE 16733
// exit ;
16731: GO 17029
// if direction then
16733: LD_VAR 0 4
16737: IFFALSE 16801
// begin d := 1 ;
16739: LD_ADDR_VAR 0 9
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// if i_from > i_to then
16747: LD_VAR 0 2
16751: PUSH
16752: LD_VAR 0 3
16756: GREATER
16757: IFFALSE 16783
// length := ( array - i_from ) + i_to else
16759: LD_ADDR_VAR 0 11
16763: PUSH
16764: LD_VAR 0 1
16768: PUSH
16769: LD_VAR 0 2
16773: MINUS
16774: PUSH
16775: LD_VAR 0 3
16779: PLUS
16780: ST_TO_ADDR
16781: GO 16799
// length := i_to - i_from ;
16783: LD_ADDR_VAR 0 11
16787: PUSH
16788: LD_VAR 0 3
16792: PUSH
16793: LD_VAR 0 2
16797: MINUS
16798: ST_TO_ADDR
// end else
16799: GO 16862
// begin d := - 1 ;
16801: LD_ADDR_VAR 0 9
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: ST_TO_ADDR
// if i_from > i_to then
16810: LD_VAR 0 2
16814: PUSH
16815: LD_VAR 0 3
16819: GREATER
16820: IFFALSE 16840
// length := i_from - i_to else
16822: LD_ADDR_VAR 0 11
16826: PUSH
16827: LD_VAR 0 2
16831: PUSH
16832: LD_VAR 0 3
16836: MINUS
16837: ST_TO_ADDR
16838: GO 16862
// length := ( array - i_to ) + i_from ;
16840: LD_ADDR_VAR 0 11
16844: PUSH
16845: LD_VAR 0 1
16849: PUSH
16850: LD_VAR 0 3
16854: MINUS
16855: PUSH
16856: LD_VAR 0 2
16860: PLUS
16861: ST_TO_ADDR
// end ; if not length then
16862: LD_VAR 0 11
16866: NOT
16867: IFFALSE 16871
// exit ;
16869: GO 17029
// tmp := array ;
16871: LD_ADDR_VAR 0 10
16875: PUSH
16876: LD_VAR 0 1
16880: ST_TO_ADDR
// for i = 1 to length do
16881: LD_ADDR_VAR 0 6
16885: PUSH
16886: DOUBLE
16887: LD_INT 1
16889: DEC
16890: ST_TO_ADDR
16891: LD_VAR 0 11
16895: PUSH
16896: FOR_TO
16897: IFFALSE 17017
// begin for j = 1 to array do
16899: LD_ADDR_VAR 0 7
16903: PUSH
16904: DOUBLE
16905: LD_INT 1
16907: DEC
16908: ST_TO_ADDR
16909: LD_VAR 0 1
16913: PUSH
16914: FOR_TO
16915: IFFALSE 17003
// begin k := j + d ;
16917: LD_ADDR_VAR 0 8
16921: PUSH
16922: LD_VAR 0 7
16926: PUSH
16927: LD_VAR 0 9
16931: PLUS
16932: ST_TO_ADDR
// if k > array then
16933: LD_VAR 0 8
16937: PUSH
16938: LD_VAR 0 1
16942: GREATER
16943: IFFALSE 16953
// k := 1 ;
16945: LD_ADDR_VAR 0 8
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// if not k then
16953: LD_VAR 0 8
16957: NOT
16958: IFFALSE 16970
// k := array ;
16960: LD_ADDR_VAR 0 8
16964: PUSH
16965: LD_VAR 0 1
16969: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16970: LD_ADDR_VAR 0 10
16974: PUSH
16975: LD_VAR 0 10
16979: PPUSH
16980: LD_VAR 0 8
16984: PPUSH
16985: LD_VAR 0 1
16989: PUSH
16990: LD_VAR 0 7
16994: ARRAY
16995: PPUSH
16996: CALL_OW 1
17000: ST_TO_ADDR
// end ;
17001: GO 16914
17003: POP
17004: POP
// array := tmp ;
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: LD_VAR 0 10
17014: ST_TO_ADDR
// end ;
17015: GO 16896
17017: POP
17018: POP
// result := array ;
17019: LD_ADDR_VAR 0 5
17023: PUSH
17024: LD_VAR 0 1
17028: ST_TO_ADDR
// end ;
17029: LD_VAR 0 5
17033: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17034: LD_INT 0
17036: PPUSH
17037: PPUSH
// result := 0 ;
17038: LD_ADDR_VAR 0 3
17042: PUSH
17043: LD_INT 0
17045: ST_TO_ADDR
// if not array or not value in array then
17046: LD_VAR 0 1
17050: NOT
17051: IFTRUE 17066
17053: PUSH
17054: LD_VAR 0 2
17058: PUSH
17059: LD_VAR 0 1
17063: IN
17064: NOT
17065: OR
17066: IFFALSE 17070
// exit ;
17068: GO 17124
// for i = 1 to array do
17070: LD_ADDR_VAR 0 4
17074: PUSH
17075: DOUBLE
17076: LD_INT 1
17078: DEC
17079: ST_TO_ADDR
17080: LD_VAR 0 1
17084: PUSH
17085: FOR_TO
17086: IFFALSE 17122
// if value = array [ i ] then
17088: LD_VAR 0 2
17092: PUSH
17093: LD_VAR 0 1
17097: PUSH
17098: LD_VAR 0 4
17102: ARRAY
17103: EQUAL
17104: IFFALSE 17120
// begin result := i ;
17106: LD_ADDR_VAR 0 3
17110: PUSH
17111: LD_VAR 0 4
17115: ST_TO_ADDR
// exit ;
17116: POP
17117: POP
17118: GO 17124
// end ;
17120: GO 17085
17122: POP
17123: POP
// end ;
17124: LD_VAR 0 3
17128: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17129: LD_INT 0
17131: PPUSH
// vc_chassis := chassis ;
17132: LD_ADDR_OWVAR 37
17136: PUSH
17137: LD_VAR 0 1
17141: ST_TO_ADDR
// vc_engine := engine ;
17142: LD_ADDR_OWVAR 39
17146: PUSH
17147: LD_VAR 0 2
17151: ST_TO_ADDR
// vc_control := control ;
17152: LD_ADDR_OWVAR 38
17156: PUSH
17157: LD_VAR 0 3
17161: ST_TO_ADDR
// vc_weapon := weapon ;
17162: LD_ADDR_OWVAR 40
17166: PUSH
17167: LD_VAR 0 4
17171: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17172: LD_ADDR_OWVAR 41
17176: PUSH
17177: LD_VAR 0 5
17181: ST_TO_ADDR
// end ;
17182: LD_VAR 0 6
17186: RET
// export function WantPlant ( unit ) ; var task ; begin
17187: LD_INT 0
17189: PPUSH
17190: PPUSH
// result := false ;
17191: LD_ADDR_VAR 0 2
17195: PUSH
17196: LD_INT 0
17198: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17199: LD_ADDR_VAR 0 3
17203: PUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 437
17213: ST_TO_ADDR
// if task then
17214: LD_VAR 0 3
17218: IFFALSE 17246
// if task [ 1 ] [ 1 ] = p then
17220: LD_VAR 0 3
17224: PUSH
17225: LD_INT 1
17227: ARRAY
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PUSH
17233: LD_STRING p
17235: EQUAL
17236: IFFALSE 17246
// result := true ;
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_INT 1
17245: ST_TO_ADDR
// end ;
17246: LD_VAR 0 2
17250: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17251: LD_INT 0
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
// if pos < 1 then
17257: LD_VAR 0 2
17261: PUSH
17262: LD_INT 1
17264: LESS
17265: IFFALSE 17269
// exit ;
17267: GO 17572
// if pos = 1 then
17269: LD_VAR 0 2
17273: PUSH
17274: LD_INT 1
17276: EQUAL
17277: IFFALSE 17310
// result := Replace ( arr , pos [ 1 ] , value ) else
17279: LD_ADDR_VAR 0 4
17283: PUSH
17284: LD_VAR 0 1
17288: PPUSH
17289: LD_VAR 0 2
17293: PUSH
17294: LD_INT 1
17296: ARRAY
17297: PPUSH
17298: LD_VAR 0 3
17302: PPUSH
17303: CALL_OW 1
17307: ST_TO_ADDR
17308: GO 17572
// begin tmp := arr ;
17310: LD_ADDR_VAR 0 6
17314: PUSH
17315: LD_VAR 0 1
17319: ST_TO_ADDR
// s_arr := [ tmp ] ;
17320: LD_ADDR_VAR 0 7
17324: PUSH
17325: LD_VAR 0 6
17329: PUSH
17330: EMPTY
17331: LIST
17332: ST_TO_ADDR
// for i = 1 to pos - 1 do
17333: LD_ADDR_VAR 0 5
17337: PUSH
17338: DOUBLE
17339: LD_INT 1
17341: DEC
17342: ST_TO_ADDR
17343: LD_VAR 0 2
17347: PUSH
17348: LD_INT 1
17350: MINUS
17351: PUSH
17352: FOR_TO
17353: IFFALSE 17398
// begin tmp := tmp [ pos [ i ] ] ;
17355: LD_ADDR_VAR 0 6
17359: PUSH
17360: LD_VAR 0 6
17364: PUSH
17365: LD_VAR 0 2
17369: PUSH
17370: LD_VAR 0 5
17374: ARRAY
17375: ARRAY
17376: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17377: LD_ADDR_VAR 0 7
17381: PUSH
17382: LD_VAR 0 7
17386: PUSH
17387: LD_VAR 0 6
17391: PUSH
17392: EMPTY
17393: LIST
17394: ADD
17395: ST_TO_ADDR
// end ;
17396: GO 17352
17398: POP
17399: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17400: LD_ADDR_VAR 0 6
17404: PUSH
17405: LD_VAR 0 6
17409: PPUSH
17410: LD_VAR 0 2
17414: PUSH
17415: LD_VAR 0 2
17419: ARRAY
17420: PPUSH
17421: LD_VAR 0 3
17425: PPUSH
17426: CALL_OW 1
17430: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17431: LD_ADDR_VAR 0 7
17435: PUSH
17436: LD_VAR 0 7
17440: PPUSH
17441: LD_VAR 0 7
17445: PPUSH
17446: LD_VAR 0 6
17450: PPUSH
17451: CALL_OW 1
17455: ST_TO_ADDR
// for i = s_arr downto 2 do
17456: LD_ADDR_VAR 0 5
17460: PUSH
17461: DOUBLE
17462: LD_VAR 0 7
17466: INC
17467: ST_TO_ADDR
17468: LD_INT 2
17470: PUSH
17471: FOR_DOWNTO
17472: IFFALSE 17556
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17474: LD_ADDR_VAR 0 6
17478: PUSH
17479: LD_VAR 0 7
17483: PUSH
17484: LD_VAR 0 5
17488: PUSH
17489: LD_INT 1
17491: MINUS
17492: ARRAY
17493: PPUSH
17494: LD_VAR 0 2
17498: PUSH
17499: LD_VAR 0 5
17503: PUSH
17504: LD_INT 1
17506: MINUS
17507: ARRAY
17508: PPUSH
17509: LD_VAR 0 7
17513: PUSH
17514: LD_VAR 0 5
17518: ARRAY
17519: PPUSH
17520: CALL_OW 1
17524: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17525: LD_ADDR_VAR 0 7
17529: PUSH
17530: LD_VAR 0 7
17534: PPUSH
17535: LD_VAR 0 5
17539: PUSH
17540: LD_INT 1
17542: MINUS
17543: PPUSH
17544: LD_VAR 0 6
17548: PPUSH
17549: CALL_OW 1
17553: ST_TO_ADDR
// end ;
17554: GO 17471
17556: POP
17557: POP
// result := s_arr [ 1 ] ;
17558: LD_ADDR_VAR 0 4
17562: PUSH
17563: LD_VAR 0 7
17567: PUSH
17568: LD_INT 1
17570: ARRAY
17571: ST_TO_ADDR
// end ; end ;
17572: LD_VAR 0 4
17576: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17577: LD_INT 0
17579: PPUSH
17580: PPUSH
// if not list then
17581: LD_VAR 0 1
17585: NOT
17586: IFFALSE 17590
// exit ;
17588: GO 17681
// i := list [ pos1 ] ;
17590: LD_ADDR_VAR 0 5
17594: PUSH
17595: LD_VAR 0 1
17599: PUSH
17600: LD_VAR 0 2
17604: ARRAY
17605: ST_TO_ADDR
// if not i then
17606: LD_VAR 0 5
17610: NOT
17611: IFFALSE 17615
// exit ;
17613: GO 17681
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17615: LD_ADDR_VAR 0 1
17619: PUSH
17620: LD_VAR 0 1
17624: PPUSH
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_VAR 0 1
17634: PUSH
17635: LD_VAR 0 3
17639: ARRAY
17640: PPUSH
17641: CALL_OW 1
17645: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17646: LD_ADDR_VAR 0 1
17650: PUSH
17651: LD_VAR 0 1
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: LD_VAR 0 5
17665: PPUSH
17666: CALL_OW 1
17670: ST_TO_ADDR
// result := list ;
17671: LD_ADDR_VAR 0 4
17675: PUSH
17676: LD_VAR 0 1
17680: ST_TO_ADDR
// end ;
17681: LD_VAR 0 4
17685: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17686: LD_INT 0
17688: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17689: LD_ADDR_VAR 0 5
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 250
17703: PPUSH
17704: LD_VAR 0 1
17708: PPUSH
17709: CALL_OW 251
17713: PPUSH
17714: LD_VAR 0 2
17718: PPUSH
17719: LD_VAR 0 3
17723: PPUSH
17724: LD_VAR 0 4
17728: PPUSH
17729: CALL 18111 0 5
17733: ST_TO_ADDR
// end ;
17734: LD_VAR 0 5
17738: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
17739: LD_INT 0
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
// if not list or not unit then
17745: LD_VAR 0 2
17749: NOT
17750: IFTRUE 17759
17752: PUSH
17753: LD_VAR 0 1
17757: NOT
17758: OR
17759: IFFALSE 17763
// exit ;
17761: GO 18106
// result := [ ] ;
17763: LD_ADDR_VAR 0 5
17767: PUSH
17768: EMPTY
17769: ST_TO_ADDR
// for i in list do
17770: LD_ADDR_VAR 0 6
17774: PUSH
17775: LD_VAR 0 2
17779: PUSH
17780: FOR_IN
17781: IFFALSE 17999
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
17783: LD_ADDR_VAR 0 8
17787: PUSH
17788: LD_VAR 0 1
17792: PPUSH
17793: LD_VAR 0 6
17797: PUSH
17798: LD_INT 1
17800: ARRAY
17801: PPUSH
17802: LD_VAR 0 6
17806: PUSH
17807: LD_INT 2
17809: ARRAY
17810: PPUSH
17811: CALL_OW 297
17815: ST_TO_ADDR
// if not Count ( result ) then
17816: LD_VAR 0 5
17820: PPUSH
17821: CALL 14367 0 1
17825: NOT
17826: IFFALSE 17859
// begin result := Join ( result , [ i , tmp ] ) ;
17828: LD_ADDR_VAR 0 5
17832: PUSH
17833: LD_VAR 0 5
17837: PPUSH
17838: LD_VAR 0 6
17842: PUSH
17843: LD_VAR 0 8
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PPUSH
17852: CALL 50299 0 2
17856: ST_TO_ADDR
// continue ;
17857: GO 17780
// end ; if result [ result ] [ 2 ] <= tmp then
17859: LD_VAR 0 5
17863: PUSH
17864: LD_VAR 0 5
17868: ARRAY
17869: PUSH
17870: LD_INT 2
17872: ARRAY
17873: PUSH
17874: LD_VAR 0 8
17878: LESSEQUAL
17879: IFFALSE 17912
// result := Join ( result , [ i , tmp ] ) else
17881: LD_ADDR_VAR 0 5
17885: PUSH
17886: LD_VAR 0 5
17890: PPUSH
17891: LD_VAR 0 6
17895: PUSH
17896: LD_VAR 0 8
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL 50299 0 2
17909: ST_TO_ADDR
17910: GO 17997
// begin for j := 1 to Count ( result ) do
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: DOUBLE
17918: LD_INT 1
17920: DEC
17921: ST_TO_ADDR
17922: LD_VAR 0 5
17926: PPUSH
17927: CALL 14367 0 1
17931: PUSH
17932: FOR_TO
17933: IFFALSE 17995
// begin if tmp < result [ j ] [ 2 ] then
17935: LD_VAR 0 8
17939: PUSH
17940: LD_VAR 0 5
17944: PUSH
17945: LD_VAR 0 7
17949: ARRAY
17950: PUSH
17951: LD_INT 2
17953: ARRAY
17954: LESS
17955: IFFALSE 17993
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17957: LD_ADDR_VAR 0 5
17961: PUSH
17962: LD_VAR 0 5
17966: PPUSH
17967: LD_VAR 0 7
17971: PPUSH
17972: LD_VAR 0 6
17976: PUSH
17977: LD_VAR 0 8
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PPUSH
17986: CALL_OW 2
17990: ST_TO_ADDR
// break ;
17991: GO 17995
// end ; end ;
17993: GO 17932
17995: POP
17996: POP
// end ; end ;
17997: GO 17780
17999: POP
18000: POP
// if result and not asc then
18001: LD_VAR 0 5
18005: IFFALSE 18014
18007: PUSH
18008: LD_VAR 0 3
18012: NOT
18013: AND
18014: IFFALSE 18031
// result := ReverseArray ( result ) ;
18016: LD_ADDR_VAR 0 5
18020: PUSH
18021: LD_VAR 0 5
18025: PPUSH
18026: CALL 45389 0 1
18030: ST_TO_ADDR
// tmp := [ ] ;
18031: LD_ADDR_VAR 0 8
18035: PUSH
18036: EMPTY
18037: ST_TO_ADDR
// if mode then
18038: LD_VAR 0 4
18042: IFFALSE 18106
// begin for i := 1 to result do
18044: LD_ADDR_VAR 0 6
18048: PUSH
18049: DOUBLE
18050: LD_INT 1
18052: DEC
18053: ST_TO_ADDR
18054: LD_VAR 0 5
18058: PUSH
18059: FOR_TO
18060: IFFALSE 18094
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
18062: LD_ADDR_VAR 0 8
18066: PUSH
18067: LD_VAR 0 8
18071: PPUSH
18072: LD_VAR 0 5
18076: PUSH
18077: LD_VAR 0 6
18081: ARRAY
18082: PUSH
18083: LD_INT 1
18085: ARRAY
18086: PPUSH
18087: CALL 50299 0 2
18091: ST_TO_ADDR
18092: GO 18059
18094: POP
18095: POP
// result := tmp ;
18096: LD_ADDR_VAR 0 5
18100: PUSH
18101: LD_VAR 0 8
18105: ST_TO_ADDR
// end ; end ;
18106: LD_VAR 0 5
18110: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18111: LD_INT 0
18113: PPUSH
18114: PPUSH
18115: PPUSH
18116: PPUSH
// if not list then
18117: LD_VAR 0 3
18121: NOT
18122: IFFALSE 18126
// exit ;
18124: GO 18516
// result := [ ] ;
18126: LD_ADDR_VAR 0 6
18130: PUSH
18131: EMPTY
18132: ST_TO_ADDR
// for i in list do
18133: LD_ADDR_VAR 0 7
18137: PUSH
18138: LD_VAR 0 3
18142: PUSH
18143: FOR_IN
18144: IFFALSE 18346
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18146: LD_ADDR_VAR 0 9
18150: PUSH
18151: LD_VAR 0 7
18155: PPUSH
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_VAR 0 2
18165: PPUSH
18166: CALL_OW 297
18170: ST_TO_ADDR
// if not result then
18171: LD_VAR 0 6
18175: NOT
18176: IFFALSE 18202
// result := [ [ i , tmp ] ] else
18178: LD_ADDR_VAR 0 6
18182: PUSH
18183: LD_VAR 0 7
18187: PUSH
18188: LD_VAR 0 9
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: ST_TO_ADDR
18200: GO 18344
// begin if result [ result ] [ 2 ] <= tmp then
18202: LD_VAR 0 6
18206: PUSH
18207: LD_VAR 0 6
18211: ARRAY
18212: PUSH
18213: LD_INT 2
18215: ARRAY
18216: PUSH
18217: LD_VAR 0 9
18221: LESSEQUAL
18222: IFFALSE 18264
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18224: LD_ADDR_VAR 0 6
18228: PUSH
18229: LD_VAR 0 6
18233: PPUSH
18234: LD_VAR 0 6
18238: PUSH
18239: LD_INT 1
18241: PLUS
18242: PPUSH
18243: LD_VAR 0 7
18247: PUSH
18248: LD_VAR 0 9
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PPUSH
18257: CALL_OW 2
18261: ST_TO_ADDR
18262: GO 18344
// for j := 1 to result do
18264: LD_ADDR_VAR 0 8
18268: PUSH
18269: DOUBLE
18270: LD_INT 1
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 6
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18342
// begin if tmp < result [ j ] [ 2 ] then
18282: LD_VAR 0 9
18286: PUSH
18287: LD_VAR 0 6
18291: PUSH
18292: LD_VAR 0 8
18296: ARRAY
18297: PUSH
18298: LD_INT 2
18300: ARRAY
18301: LESS
18302: IFFALSE 18340
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18304: LD_ADDR_VAR 0 6
18308: PUSH
18309: LD_VAR 0 6
18313: PPUSH
18314: LD_VAR 0 8
18318: PPUSH
18319: LD_VAR 0 7
18323: PUSH
18324: LD_VAR 0 9
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 2
18337: ST_TO_ADDR
// break ;
18338: GO 18342
// end ; end ;
18340: GO 18279
18342: POP
18343: POP
// end ; end ;
18344: GO 18143
18346: POP
18347: POP
// if result and not asc then
18348: LD_VAR 0 6
18352: IFFALSE 18361
18354: PUSH
18355: LD_VAR 0 4
18359: NOT
18360: AND
18361: IFFALSE 18436
// begin tmp := result ;
18363: LD_ADDR_VAR 0 9
18367: PUSH
18368: LD_VAR 0 6
18372: ST_TO_ADDR
// for i = tmp downto 1 do
18373: LD_ADDR_VAR 0 7
18377: PUSH
18378: DOUBLE
18379: LD_VAR 0 9
18383: INC
18384: ST_TO_ADDR
18385: LD_INT 1
18387: PUSH
18388: FOR_DOWNTO
18389: IFFALSE 18434
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18391: LD_ADDR_VAR 0 6
18395: PUSH
18396: LD_VAR 0 6
18400: PPUSH
18401: LD_VAR 0 9
18405: PUSH
18406: LD_VAR 0 7
18410: MINUS
18411: PUSH
18412: LD_INT 1
18414: PLUS
18415: PPUSH
18416: LD_VAR 0 9
18420: PUSH
18421: LD_VAR 0 7
18425: ARRAY
18426: PPUSH
18427: CALL_OW 1
18431: ST_TO_ADDR
18432: GO 18388
18434: POP
18435: POP
// end ; tmp := [ ] ;
18436: LD_ADDR_VAR 0 9
18440: PUSH
18441: EMPTY
18442: ST_TO_ADDR
// if mode then
18443: LD_VAR 0 5
18447: IFFALSE 18516
// begin for i = 1 to result do
18449: LD_ADDR_VAR 0 7
18453: PUSH
18454: DOUBLE
18455: LD_INT 1
18457: DEC
18458: ST_TO_ADDR
18459: LD_VAR 0 6
18463: PUSH
18464: FOR_TO
18465: IFFALSE 18504
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18467: LD_ADDR_VAR 0 9
18471: PUSH
18472: LD_VAR 0 9
18476: PPUSH
18477: LD_VAR 0 7
18481: PPUSH
18482: LD_VAR 0 6
18486: PUSH
18487: LD_VAR 0 7
18491: ARRAY
18492: PUSH
18493: LD_INT 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 1
18501: ST_TO_ADDR
18502: GO 18464
18504: POP
18505: POP
// result := tmp ;
18506: LD_ADDR_VAR 0 6
18510: PUSH
18511: LD_VAR 0 9
18515: ST_TO_ADDR
// end ; end ;
18516: LD_VAR 0 6
18520: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18521: LD_INT 0
18523: PPUSH
18524: PPUSH
18525: PPUSH
18526: PPUSH
18527: PPUSH
18528: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: EMPTY
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: ST_TO_ADDR
// if not x or not y then
18551: LD_VAR 0 2
18555: NOT
18556: IFTRUE 18565
18558: PUSH
18559: LD_VAR 0 3
18563: NOT
18564: OR
18565: IFFALSE 18569
// exit ;
18567: GO 20225
// if not range then
18569: LD_VAR 0 4
18573: NOT
18574: IFFALSE 18584
// range := 10 ;
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_INT 10
18583: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18584: LD_ADDR_VAR 0 8
18588: PUSH
18589: LD_INT 81
18591: PUSH
18592: LD_VAR 0 1
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 92
18603: PUSH
18604: LD_VAR 0 2
18608: PUSH
18609: LD_VAR 0 3
18613: PUSH
18614: LD_VAR 0 4
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 3
18627: PUSH
18628: LD_INT 21
18630: PUSH
18631: LD_INT 3
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: ST_TO_ADDR
// if not tmp then
18652: LD_VAR 0 8
18656: NOT
18657: IFFALSE 18661
// exit ;
18659: GO 20225
// for i in tmp do
18661: LD_ADDR_VAR 0 6
18665: PUSH
18666: LD_VAR 0 8
18670: PUSH
18671: FOR_IN
18672: IFFALSE 20200
// begin points := [ 0 , 0 , 0 ] ;
18674: LD_ADDR_VAR 0 9
18678: PUSH
18679: LD_INT 0
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: ST_TO_ADDR
// bpoints := 1 ;
18693: LD_ADDR_VAR 0 10
18697: PUSH
18698: LD_INT 1
18700: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18701: LD_VAR 0 6
18705: PPUSH
18706: CALL_OW 247
18710: PUSH
18711: LD_INT 1
18713: DOUBLE
18714: EQUAL
18715: IFTRUE 18719
18717: GO 19301
18719: POP
// begin if GetClass ( i ) = 1 then
18720: LD_VAR 0 6
18724: PPUSH
18725: CALL_OW 257
18729: PUSH
18730: LD_INT 1
18732: EQUAL
18733: IFFALSE 18754
// points := [ 10 , 5 , 3 ] ;
18735: LD_ADDR_VAR 0 9
18739: PUSH
18740: LD_INT 10
18742: PUSH
18743: LD_INT 5
18745: PUSH
18746: LD_INT 3
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: LIST
18753: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18754: LD_VAR 0 6
18758: PPUSH
18759: CALL_OW 257
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: LD_INT 4
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: IN
18778: IFFALSE 18799
// points := [ 3 , 2 , 1 ] ;
18780: LD_ADDR_VAR 0 9
18784: PUSH
18785: LD_INT 3
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: LIST
18798: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18799: LD_VAR 0 6
18803: PPUSH
18804: CALL_OW 257
18808: PUSH
18809: LD_INT 5
18811: EQUAL
18812: IFFALSE 18833
// points := [ 130 , 5 , 2 ] ;
18814: LD_ADDR_VAR 0 9
18818: PUSH
18819: LD_INT 130
18821: PUSH
18822: LD_INT 5
18824: PUSH
18825: LD_INT 2
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: LIST
18832: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18833: LD_VAR 0 6
18837: PPUSH
18838: CALL_OW 257
18842: PUSH
18843: LD_INT 8
18845: EQUAL
18846: IFFALSE 18867
// points := [ 35 , 35 , 30 ] ;
18848: LD_ADDR_VAR 0 9
18852: PUSH
18853: LD_INT 35
18855: PUSH
18856: LD_INT 35
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: LIST
18866: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18867: LD_VAR 0 6
18871: PPUSH
18872: CALL_OW 257
18876: PUSH
18877: LD_INT 9
18879: EQUAL
18880: IFFALSE 18901
// points := [ 20 , 55 , 40 ] ;
18882: LD_ADDR_VAR 0 9
18886: PUSH
18887: LD_INT 20
18889: PUSH
18890: LD_INT 55
18892: PUSH
18893: LD_INT 40
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18901: LD_VAR 0 6
18905: PPUSH
18906: CALL_OW 257
18910: PUSH
18911: LD_INT 12
18913: PUSH
18914: LD_INT 16
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: IN
18921: IFFALSE 18942
// points := [ 5 , 3 , 2 ] ;
18923: LD_ADDR_VAR 0 9
18927: PUSH
18928: LD_INT 5
18930: PUSH
18931: LD_INT 3
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: LIST
18941: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18942: LD_VAR 0 6
18946: PPUSH
18947: CALL_OW 257
18951: PUSH
18952: LD_INT 17
18954: EQUAL
18955: IFFALSE 18976
// points := [ 100 , 50 , 75 ] ;
18957: LD_ADDR_VAR 0 9
18961: PUSH
18962: LD_INT 100
18964: PUSH
18965: LD_INT 50
18967: PUSH
18968: LD_INT 75
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18976: LD_VAR 0 6
18980: PPUSH
18981: CALL_OW 257
18985: PUSH
18986: LD_INT 15
18988: EQUAL
18989: IFFALSE 19010
// points := [ 10 , 5 , 3 ] ;
18991: LD_ADDR_VAR 0 9
18995: PUSH
18996: LD_INT 10
18998: PUSH
18999: LD_INT 5
19001: PUSH
19002: LD_INT 3
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19010: LD_VAR 0 6
19014: PPUSH
19015: CALL_OW 257
19019: PUSH
19020: LD_INT 14
19022: EQUAL
19023: IFFALSE 19044
// points := [ 10 , 0 , 0 ] ;
19025: LD_ADDR_VAR 0 9
19029: PUSH
19030: LD_INT 10
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19044: LD_VAR 0 6
19048: PPUSH
19049: CALL_OW 257
19053: PUSH
19054: LD_INT 11
19056: EQUAL
19057: IFFALSE 19078
// points := [ 30 , 10 , 5 ] ;
19059: LD_ADDR_VAR 0 9
19063: PUSH
19064: LD_INT 30
19066: PUSH
19067: LD_INT 10
19069: PUSH
19070: LD_INT 5
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19078: LD_VAR 0 1
19082: PPUSH
19083: LD_INT 5
19085: PPUSH
19086: CALL_OW 321
19090: PUSH
19091: LD_INT 2
19093: EQUAL
19094: IFFALSE 19111
// bpoints := bpoints * 1.8 ;
19096: LD_ADDR_VAR 0 10
19100: PUSH
19101: LD_VAR 0 10
19105: PUSH
19106: LD_REAL  1.80000000000000E+0000
19109: MUL
19110: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19111: LD_VAR 0 6
19115: PPUSH
19116: CALL_OW 257
19120: PUSH
19121: LD_INT 1
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: LD_INT 3
19129: PUSH
19130: LD_INT 4
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: IN
19139: IFFALSE 19159
19141: PUSH
19142: LD_VAR 0 1
19146: PPUSH
19147: LD_INT 51
19149: PPUSH
19150: CALL_OW 321
19154: PUSH
19155: LD_INT 2
19157: EQUAL
19158: AND
19159: IFFALSE 19176
// bpoints := bpoints * 1.2 ;
19161: LD_ADDR_VAR 0 10
19165: PUSH
19166: LD_VAR 0 10
19170: PUSH
19171: LD_REAL  1.20000000000000E+0000
19174: MUL
19175: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19176: LD_VAR 0 6
19180: PPUSH
19181: CALL_OW 257
19185: PUSH
19186: LD_INT 5
19188: PUSH
19189: LD_INT 7
19191: PUSH
19192: LD_INT 9
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: IN
19200: IFFALSE 19220
19202: PUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: LD_INT 52
19210: PPUSH
19211: CALL_OW 321
19215: PUSH
19216: LD_INT 2
19218: EQUAL
19219: AND
19220: IFFALSE 19237
// bpoints := bpoints * 1.5 ;
19222: LD_ADDR_VAR 0 10
19226: PUSH
19227: LD_VAR 0 10
19231: PUSH
19232: LD_REAL  1.50000000000000E+0000
19235: MUL
19236: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19237: LD_VAR 0 1
19241: PPUSH
19242: LD_INT 66
19244: PPUSH
19245: CALL_OW 321
19249: PUSH
19250: LD_INT 2
19252: EQUAL
19253: IFFALSE 19270
// bpoints := bpoints * 1.1 ;
19255: LD_ADDR_VAR 0 10
19259: PUSH
19260: LD_VAR 0 10
19264: PUSH
19265: LD_REAL  1.10000000000000E+0000
19268: MUL
19269: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19270: LD_ADDR_VAR 0 10
19274: PUSH
19275: LD_VAR 0 10
19279: PUSH
19280: LD_VAR 0 6
19284: PPUSH
19285: LD_INT 1
19287: PPUSH
19288: CALL_OW 259
19292: PUSH
19293: LD_REAL  1.15000000000000E+0000
19296: MUL
19297: MUL
19298: ST_TO_ADDR
// end ; unit_vehicle :
19299: GO 20129
19301: LD_INT 2
19303: DOUBLE
19304: EQUAL
19305: IFTRUE 19309
19307: GO 20117
19309: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19310: LD_VAR 0 6
19314: PPUSH
19315: CALL_OW 264
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: LD_INT 42
19325: PUSH
19326: LD_INT 24
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: LIST
19333: IN
19334: IFFALSE 19355
// points := [ 25 , 5 , 3 ] ;
19336: LD_ADDR_VAR 0 9
19340: PUSH
19341: LD_INT 25
19343: PUSH
19344: LD_INT 5
19346: PUSH
19347: LD_INT 3
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19355: LD_VAR 0 6
19359: PPUSH
19360: CALL_OW 264
19364: PUSH
19365: LD_INT 4
19367: PUSH
19368: LD_INT 43
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: IN
19379: IFFALSE 19400
// points := [ 40 , 15 , 5 ] ;
19381: LD_ADDR_VAR 0 9
19385: PUSH
19386: LD_INT 40
19388: PUSH
19389: LD_INT 15
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19400: LD_VAR 0 6
19404: PPUSH
19405: CALL_OW 264
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 23
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: IN
19420: IFFALSE 19441
// points := [ 7 , 25 , 8 ] ;
19422: LD_ADDR_VAR 0 9
19426: PUSH
19427: LD_INT 7
19429: PUSH
19430: LD_INT 25
19432: PUSH
19433: LD_INT 8
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: LIST
19440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19441: LD_VAR 0 6
19445: PPUSH
19446: CALL_OW 264
19450: PUSH
19451: LD_INT 5
19453: PUSH
19454: LD_INT 27
19456: PUSH
19457: LD_INT 44
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: IN
19465: IFFALSE 19486
// points := [ 14 , 50 , 16 ] ;
19467: LD_ADDR_VAR 0 9
19471: PUSH
19472: LD_INT 14
19474: PUSH
19475: LD_INT 50
19477: PUSH
19478: LD_INT 16
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19486: LD_VAR 0 6
19490: PPUSH
19491: CALL_OW 264
19495: PUSH
19496: LD_INT 6
19498: PUSH
19499: LD_INT 46
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: IN
19506: IFFALSE 19527
// points := [ 32 , 120 , 70 ] ;
19508: LD_ADDR_VAR 0 9
19512: PUSH
19513: LD_INT 32
19515: PUSH
19516: LD_INT 120
19518: PUSH
19519: LD_INT 70
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19527: LD_VAR 0 6
19531: PPUSH
19532: CALL_OW 264
19536: PUSH
19537: LD_INT 7
19539: PUSH
19540: LD_INT 28
19542: PUSH
19543: LD_INT 45
19545: PUSH
19546: LD_INT 92
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: IN
19555: IFFALSE 19576
// points := [ 35 , 20 , 45 ] ;
19557: LD_ADDR_VAR 0 9
19561: PUSH
19562: LD_INT 35
19564: PUSH
19565: LD_INT 20
19567: PUSH
19568: LD_INT 45
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19576: LD_VAR 0 6
19580: PPUSH
19581: CALL_OW 264
19585: PUSH
19586: LD_INT 47
19588: PUSH
19589: EMPTY
19590: LIST
19591: IN
19592: IFFALSE 19613
// points := [ 67 , 45 , 75 ] ;
19594: LD_ADDR_VAR 0 9
19598: PUSH
19599: LD_INT 67
19601: PUSH
19602: LD_INT 45
19604: PUSH
19605: LD_INT 75
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19613: LD_VAR 0 6
19617: PPUSH
19618: CALL_OW 264
19622: PUSH
19623: LD_INT 26
19625: PUSH
19626: EMPTY
19627: LIST
19628: IN
19629: IFFALSE 19650
// points := [ 120 , 30 , 80 ] ;
19631: LD_ADDR_VAR 0 9
19635: PUSH
19636: LD_INT 120
19638: PUSH
19639: LD_INT 30
19641: PUSH
19642: LD_INT 80
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19650: LD_VAR 0 6
19654: PPUSH
19655: CALL_OW 264
19659: PUSH
19660: LD_INT 22
19662: PUSH
19663: EMPTY
19664: LIST
19665: IN
19666: IFFALSE 19687
// points := [ 40 , 1 , 1 ] ;
19668: LD_ADDR_VAR 0 9
19672: PUSH
19673: LD_INT 40
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: LIST
19686: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19687: LD_VAR 0 6
19691: PPUSH
19692: CALL_OW 264
19696: PUSH
19697: LD_INT 29
19699: PUSH
19700: EMPTY
19701: LIST
19702: IN
19703: IFFALSE 19724
// points := [ 70 , 200 , 400 ] ;
19705: LD_ADDR_VAR 0 9
19709: PUSH
19710: LD_INT 70
19712: PUSH
19713: LD_INT 200
19715: PUSH
19716: LD_INT 400
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19724: LD_VAR 0 6
19728: PPUSH
19729: CALL_OW 264
19733: PUSH
19734: LD_INT 14
19736: PUSH
19737: LD_INT 53
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: IN
19744: IFFALSE 19765
// points := [ 40 , 10 , 20 ] ;
19746: LD_ADDR_VAR 0 9
19750: PUSH
19751: LD_INT 40
19753: PUSH
19754: LD_INT 10
19756: PUSH
19757: LD_INT 20
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19765: LD_VAR 0 6
19769: PPUSH
19770: CALL_OW 264
19774: PUSH
19775: LD_INT 9
19777: PUSH
19778: EMPTY
19779: LIST
19780: IN
19781: IFFALSE 19802
// points := [ 5 , 70 , 20 ] ;
19783: LD_ADDR_VAR 0 9
19787: PUSH
19788: LD_INT 5
19790: PUSH
19791: LD_INT 70
19793: PUSH
19794: LD_INT 20
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: LIST
19801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19802: LD_VAR 0 6
19806: PPUSH
19807: CALL_OW 264
19811: PUSH
19812: LD_INT 10
19814: PUSH
19815: EMPTY
19816: LIST
19817: IN
19818: IFFALSE 19839
// points := [ 35 , 110 , 70 ] ;
19820: LD_ADDR_VAR 0 9
19824: PUSH
19825: LD_INT 35
19827: PUSH
19828: LD_INT 110
19830: PUSH
19831: LD_INT 70
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19839: LD_VAR 0 6
19843: PPUSH
19844: CALL_OW 265
19848: PUSH
19849: LD_INT 25
19851: EQUAL
19852: IFFALSE 19873
// points := [ 80 , 65 , 100 ] ;
19854: LD_ADDR_VAR 0 9
19858: PUSH
19859: LD_INT 80
19861: PUSH
19862: LD_INT 65
19864: PUSH
19865: LD_INT 100
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19873: LD_VAR 0 6
19877: PPUSH
19878: CALL_OW 263
19882: PUSH
19883: LD_INT 1
19885: EQUAL
19886: IFFALSE 19921
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19888: LD_ADDR_VAR 0 10
19892: PUSH
19893: LD_VAR 0 10
19897: PUSH
19898: LD_VAR 0 6
19902: PPUSH
19903: CALL_OW 311
19907: PPUSH
19908: LD_INT 3
19910: PPUSH
19911: CALL_OW 259
19915: PUSH
19916: LD_INT 4
19918: MUL
19919: MUL
19920: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19921: LD_VAR 0 6
19925: PPUSH
19926: CALL_OW 263
19930: PUSH
19931: LD_INT 2
19933: EQUAL
19934: IFFALSE 19985
// begin j := IsControledBy ( i ) ;
19936: LD_ADDR_VAR 0 7
19940: PUSH
19941: LD_VAR 0 6
19945: PPUSH
19946: CALL_OW 312
19950: ST_TO_ADDR
// if j then
19951: LD_VAR 0 7
19955: IFFALSE 19985
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19957: LD_ADDR_VAR 0 10
19961: PUSH
19962: LD_VAR 0 10
19966: PUSH
19967: LD_VAR 0 7
19971: PPUSH
19972: LD_INT 3
19974: PPUSH
19975: CALL_OW 259
19979: PUSH
19980: LD_INT 3
19982: MUL
19983: MUL
19984: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19985: LD_VAR 0 6
19989: PPUSH
19990: CALL_OW 264
19994: PUSH
19995: LD_INT 5
19997: PUSH
19998: LD_INT 6
20000: PUSH
20001: LD_INT 46
20003: PUSH
20004: LD_INT 44
20006: PUSH
20007: LD_INT 47
20009: PUSH
20010: LD_INT 45
20012: PUSH
20013: LD_INT 28
20015: PUSH
20016: LD_INT 7
20018: PUSH
20019: LD_INT 27
20021: PUSH
20022: LD_INT 29
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: IN
20037: IFFALSE 20057
20039: PUSH
20040: LD_VAR 0 1
20044: PPUSH
20045: LD_INT 52
20047: PPUSH
20048: CALL_OW 321
20052: PUSH
20053: LD_INT 2
20055: EQUAL
20056: AND
20057: IFFALSE 20074
// bpoints := bpoints * 1.2 ;
20059: LD_ADDR_VAR 0 10
20063: PUSH
20064: LD_VAR 0 10
20068: PUSH
20069: LD_REAL  1.20000000000000E+0000
20072: MUL
20073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20074: LD_VAR 0 6
20078: PPUSH
20079: CALL_OW 264
20083: PUSH
20084: LD_INT 6
20086: PUSH
20087: LD_INT 46
20089: PUSH
20090: LD_INT 47
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: IN
20098: IFFALSE 20115
// bpoints := bpoints * 1.2 ;
20100: LD_ADDR_VAR 0 10
20104: PUSH
20105: LD_VAR 0 10
20109: PUSH
20110: LD_REAL  1.20000000000000E+0000
20113: MUL
20114: ST_TO_ADDR
// end ; unit_building :
20115: GO 20129
20117: LD_INT 3
20119: DOUBLE
20120: EQUAL
20121: IFTRUE 20125
20123: GO 20128
20125: POP
// ; end ;
20126: GO 20129
20128: POP
// for j = 1 to 3 do
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: DOUBLE
20135: LD_INT 1
20137: DEC
20138: ST_TO_ADDR
20139: LD_INT 3
20141: PUSH
20142: FOR_TO
20143: IFFALSE 20196
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20145: LD_ADDR_VAR 0 5
20149: PUSH
20150: LD_VAR 0 5
20154: PPUSH
20155: LD_VAR 0 7
20159: PPUSH
20160: LD_VAR 0 5
20164: PUSH
20165: LD_VAR 0 7
20169: ARRAY
20170: PUSH
20171: LD_VAR 0 9
20175: PUSH
20176: LD_VAR 0 7
20180: ARRAY
20181: PUSH
20182: LD_VAR 0 10
20186: MUL
20187: PLUS
20188: PPUSH
20189: CALL_OW 1
20193: ST_TO_ADDR
20194: GO 20142
20196: POP
20197: POP
// end ;
20198: GO 18671
20200: POP
20201: POP
// result := Replace ( result , 4 , tmp ) ;
20202: LD_ADDR_VAR 0 5
20206: PUSH
20207: LD_VAR 0 5
20211: PPUSH
20212: LD_INT 4
20214: PPUSH
20215: LD_VAR 0 8
20219: PPUSH
20220: CALL_OW 1
20224: ST_TO_ADDR
// end ;
20225: LD_VAR 0 5
20229: RET
// export function DangerAtRange ( unit , range ) ; begin
20230: LD_INT 0
20232: PPUSH
// if not unit then
20233: LD_VAR 0 1
20237: NOT
20238: IFFALSE 20242
// exit ;
20240: GO 20287
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20242: LD_ADDR_VAR 0 3
20246: PUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL_OW 255
20256: PPUSH
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 250
20266: PPUSH
20267: LD_VAR 0 1
20271: PPUSH
20272: CALL_OW 251
20276: PPUSH
20277: LD_VAR 0 2
20281: PPUSH
20282: CALL 18521 0 4
20286: ST_TO_ADDR
// end ;
20287: LD_VAR 0 3
20291: RET
// export function DangerInArea ( side , area ) ; begin
20292: LD_INT 0
20294: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20295: LD_ADDR_VAR 0 3
20299: PUSH
20300: LD_VAR 0 2
20304: PPUSH
20305: LD_INT 81
20307: PUSH
20308: LD_VAR 0 1
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PPUSH
20317: CALL_OW 70
20321: ST_TO_ADDR
// end ;
20322: LD_VAR 0 3
20326: RET
// export function IsExtension ( b ) ; begin
20327: LD_INT 0
20329: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20330: LD_ADDR_VAR 0 2
20334: PUSH
20335: LD_VAR 0 1
20339: PUSH
20340: LD_INT 23
20342: PUSH
20343: LD_INT 20
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_INT 17
20351: PUSH
20352: LD_INT 24
20354: PUSH
20355: LD_INT 21
20357: PUSH
20358: LD_INT 19
20360: PUSH
20361: LD_INT 16
20363: PUSH
20364: LD_INT 25
20366: PUSH
20367: LD_INT 18
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: IN
20382: ST_TO_ADDR
// end ;
20383: LD_VAR 0 2
20387: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20388: LD_INT 0
20390: PPUSH
20391: PPUSH
20392: PPUSH
// result := [ ] ;
20393: LD_ADDR_VAR 0 4
20397: PUSH
20398: EMPTY
20399: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20400: LD_ADDR_VAR 0 5
20404: PUSH
20405: LD_VAR 0 2
20409: PPUSH
20410: LD_INT 21
20412: PUSH
20413: LD_INT 3
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PPUSH
20420: CALL_OW 70
20424: ST_TO_ADDR
// if not tmp then
20425: LD_VAR 0 5
20429: NOT
20430: IFFALSE 20434
// exit ;
20432: GO 20498
// if checkLink then
20434: LD_VAR 0 3
20438: IFFALSE 20488
// begin for i in tmp do
20440: LD_ADDR_VAR 0 6
20444: PUSH
20445: LD_VAR 0 5
20449: PUSH
20450: FOR_IN
20451: IFFALSE 20486
// if GetBase ( i ) <> base then
20453: LD_VAR 0 6
20457: PPUSH
20458: CALL_OW 274
20462: PUSH
20463: LD_VAR 0 1
20467: NONEQUAL
20468: IFFALSE 20484
// ComLinkToBase ( base , i ) ;
20470: LD_VAR 0 1
20474: PPUSH
20475: LD_VAR 0 6
20479: PPUSH
20480: CALL_OW 169
20484: GO 20450
20486: POP
20487: POP
// end ; result := tmp ;
20488: LD_ADDR_VAR 0 4
20492: PUSH
20493: LD_VAR 0 5
20497: ST_TO_ADDR
// end ;
20498: LD_VAR 0 4
20502: RET
// export function ComComplete ( units , b ) ; var i ; begin
20503: LD_INT 0
20505: PPUSH
20506: PPUSH
// if not units then
20507: LD_VAR 0 1
20511: NOT
20512: IFFALSE 20516
// exit ;
20514: GO 20606
// for i in units do
20516: LD_ADDR_VAR 0 4
20520: PUSH
20521: LD_VAR 0 1
20525: PUSH
20526: FOR_IN
20527: IFFALSE 20604
// if BuildingStatus ( b ) = bs_build then
20529: LD_VAR 0 2
20533: PPUSH
20534: CALL_OW 461
20538: PUSH
20539: LD_INT 1
20541: EQUAL
20542: IFFALSE 20602
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20544: LD_VAR 0 4
20548: PPUSH
20549: LD_STRING h
20551: PUSH
20552: LD_VAR 0 2
20556: PPUSH
20557: CALL_OW 250
20561: PUSH
20562: LD_VAR 0 2
20566: PPUSH
20567: CALL_OW 251
20571: PUSH
20572: LD_VAR 0 2
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 0
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: PPUSH
20598: CALL_OW 446
20602: GO 20526
20604: POP
20605: POP
// end ;
20606: LD_VAR 0 3
20610: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20611: LD_INT 0
20613: PPUSH
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20619: LD_VAR 0 1
20623: NOT
20624: IFTRUE 20641
20626: PUSH
20627: LD_VAR 0 1
20631: PPUSH
20632: CALL_OW 263
20636: PUSH
20637: LD_INT 2
20639: NONEQUAL
20640: OR
20641: IFFALSE 20645
// exit ;
20643: GO 20961
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20645: LD_ADDR_VAR 0 6
20649: PUSH
20650: LD_INT 22
20652: PUSH
20653: LD_VAR 0 1
20657: PPUSH
20658: CALL_OW 255
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: LD_INT 30
20672: PUSH
20673: LD_INT 36
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 34
20682: PUSH
20683: LD_INT 31
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PPUSH
20699: CALL_OW 69
20703: ST_TO_ADDR
// if not tmp then
20704: LD_VAR 0 6
20708: NOT
20709: IFFALSE 20713
// exit ;
20711: GO 20961
// result := [ ] ;
20713: LD_ADDR_VAR 0 2
20717: PUSH
20718: EMPTY
20719: ST_TO_ADDR
// for i in tmp do
20720: LD_ADDR_VAR 0 3
20724: PUSH
20725: LD_VAR 0 6
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20802
// begin t := UnitsInside ( i ) ;
20733: LD_ADDR_VAR 0 4
20737: PUSH
20738: LD_VAR 0 3
20742: PPUSH
20743: CALL_OW 313
20747: ST_TO_ADDR
// if t then
20748: LD_VAR 0 4
20752: IFFALSE 20800
// for j in t do
20754: LD_ADDR_VAR 0 7
20758: PUSH
20759: LD_VAR 0 4
20763: PUSH
20764: FOR_IN
20765: IFFALSE 20798
// result := Replace ( result , result + 1 , j ) ;
20767: LD_ADDR_VAR 0 2
20771: PUSH
20772: LD_VAR 0 2
20776: PPUSH
20777: LD_VAR 0 2
20781: PUSH
20782: LD_INT 1
20784: PLUS
20785: PPUSH
20786: LD_VAR 0 7
20790: PPUSH
20791: CALL_OW 1
20795: ST_TO_ADDR
20796: GO 20764
20798: POP
20799: POP
// end ;
20800: GO 20730
20802: POP
20803: POP
// if not result then
20804: LD_VAR 0 2
20808: NOT
20809: IFFALSE 20813
// exit ;
20811: GO 20961
// mech := result [ 1 ] ;
20813: LD_ADDR_VAR 0 5
20817: PUSH
20818: LD_VAR 0 2
20822: PUSH
20823: LD_INT 1
20825: ARRAY
20826: ST_TO_ADDR
// if result > 1 then
20827: LD_VAR 0 2
20831: PUSH
20832: LD_INT 1
20834: GREATER
20835: IFFALSE 20947
// begin for i = 2 to result do
20837: LD_ADDR_VAR 0 3
20841: PUSH
20842: DOUBLE
20843: LD_INT 2
20845: DEC
20846: ST_TO_ADDR
20847: LD_VAR 0 2
20851: PUSH
20852: FOR_TO
20853: IFFALSE 20945
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20855: LD_ADDR_VAR 0 4
20859: PUSH
20860: LD_VAR 0 2
20864: PUSH
20865: LD_VAR 0 3
20869: ARRAY
20870: PPUSH
20871: LD_INT 3
20873: PPUSH
20874: CALL_OW 259
20878: PUSH
20879: LD_VAR 0 2
20883: PUSH
20884: LD_VAR 0 3
20888: ARRAY
20889: PPUSH
20890: CALL_OW 432
20894: MINUS
20895: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20896: LD_VAR 0 4
20900: PUSH
20901: LD_VAR 0 5
20905: PPUSH
20906: LD_INT 3
20908: PPUSH
20909: CALL_OW 259
20913: PUSH
20914: LD_VAR 0 5
20918: PPUSH
20919: CALL_OW 432
20923: MINUS
20924: GREATEREQUAL
20925: IFFALSE 20943
// mech := result [ i ] ;
20927: LD_ADDR_VAR 0 5
20931: PUSH
20932: LD_VAR 0 2
20936: PUSH
20937: LD_VAR 0 3
20941: ARRAY
20942: ST_TO_ADDR
// end ;
20943: GO 20852
20945: POP
20946: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20947: LD_VAR 0 1
20951: PPUSH
20952: LD_VAR 0 5
20956: PPUSH
20957: CALL_OW 135
// end ;
20961: LD_VAR 0 2
20965: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20966: LD_INT 0
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
20975: PPUSH
20976: PPUSH
20977: PPUSH
20978: PPUSH
20979: PPUSH
20980: PPUSH
// result := [ ] ;
20981: LD_ADDR_VAR 0 7
20985: PUSH
20986: EMPTY
20987: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20988: LD_VAR 0 1
20992: PPUSH
20993: CALL_OW 266
20997: PUSH
20998: LD_INT 0
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: IN
21008: NOT
21009: IFFALSE 21013
// exit ;
21011: GO 22653
// if name then
21013: LD_VAR 0 3
21017: IFFALSE 21033
// SetBName ( base_dep , name ) ;
21019: LD_VAR 0 1
21023: PPUSH
21024: LD_VAR 0 3
21028: PPUSH
21029: CALL_OW 500
// base := GetBase ( base_dep ) ;
21033: LD_ADDR_VAR 0 15
21037: PUSH
21038: LD_VAR 0 1
21042: PPUSH
21043: CALL_OW 274
21047: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21048: LD_ADDR_VAR 0 16
21052: PUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 255
21062: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21063: LD_ADDR_VAR 0 17
21067: PUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 248
21077: ST_TO_ADDR
// if sources then
21078: LD_VAR 0 5
21082: IFFALSE 21129
// for i = 1 to 3 do
21084: LD_ADDR_VAR 0 8
21088: PUSH
21089: DOUBLE
21090: LD_INT 1
21092: DEC
21093: ST_TO_ADDR
21094: LD_INT 3
21096: PUSH
21097: FOR_TO
21098: IFFALSE 21127
// AddResourceType ( base , i , sources [ i ] ) ;
21100: LD_VAR 0 15
21104: PPUSH
21105: LD_VAR 0 8
21109: PPUSH
21110: LD_VAR 0 5
21114: PUSH
21115: LD_VAR 0 8
21119: ARRAY
21120: PPUSH
21121: CALL_OW 276
21125: GO 21097
21127: POP
21128: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21129: LD_ADDR_VAR 0 18
21133: PUSH
21134: LD_VAR 0 15
21138: PPUSH
21139: LD_VAR 0 2
21143: PPUSH
21144: LD_INT 1
21146: PPUSH
21147: CALL 20388 0 3
21151: ST_TO_ADDR
// InitHc ;
21152: CALL_OW 19
// InitUc ;
21156: CALL_OW 18
// uc_side := side ;
21160: LD_ADDR_OWVAR 20
21164: PUSH
21165: LD_VAR 0 16
21169: ST_TO_ADDR
// uc_nation := nation ;
21170: LD_ADDR_OWVAR 21
21174: PUSH
21175: LD_VAR 0 17
21179: ST_TO_ADDR
// if buildings then
21180: LD_VAR 0 18
21184: IFFALSE 22512
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21186: LD_ADDR_VAR 0 19
21190: PUSH
21191: LD_VAR 0 18
21195: PPUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 30
21201: PUSH
21202: LD_INT 29
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 30
21211: PUSH
21212: LD_INT 30
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: LIST
21223: PPUSH
21224: CALL_OW 72
21228: ST_TO_ADDR
// if tmp then
21229: LD_VAR 0 19
21233: IFFALSE 21281
// for i in tmp do
21235: LD_ADDR_VAR 0 8
21239: PUSH
21240: LD_VAR 0 19
21244: PUSH
21245: FOR_IN
21246: IFFALSE 21279
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21248: LD_VAR 0 8
21252: PPUSH
21253: CALL_OW 250
21257: PPUSH
21258: LD_VAR 0 8
21262: PPUSH
21263: CALL_OW 251
21267: PPUSH
21268: LD_VAR 0 16
21272: PPUSH
21273: CALL_OW 441
21277: GO 21245
21279: POP
21280: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21281: LD_VAR 0 18
21285: PPUSH
21286: LD_INT 2
21288: PUSH
21289: LD_INT 30
21291: PUSH
21292: LD_INT 32
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 30
21301: PUSH
21302: LD_INT 33
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: LIST
21313: PPUSH
21314: CALL_OW 72
21318: IFFALSE 21406
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21320: LD_ADDR_VAR 0 8
21324: PUSH
21325: LD_VAR 0 18
21329: PPUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 30
21335: PUSH
21336: LD_INT 32
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 30
21345: PUSH
21346: LD_INT 33
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: PPUSH
21358: CALL_OW 72
21362: PUSH
21363: FOR_IN
21364: IFFALSE 21404
// begin if not GetBWeapon ( i ) then
21366: LD_VAR 0 8
21370: PPUSH
21371: CALL_OW 269
21375: NOT
21376: IFFALSE 21402
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21378: LD_VAR 0 8
21382: PPUSH
21383: LD_VAR 0 8
21387: PPUSH
21388: LD_VAR 0 2
21392: PPUSH
21393: CALL 22658 0 2
21397: PPUSH
21398: CALL_OW 431
// end ;
21402: GO 21363
21404: POP
21405: POP
// end ; for i = 1 to personel do
21406: LD_ADDR_VAR 0 8
21410: PUSH
21411: DOUBLE
21412: LD_INT 1
21414: DEC
21415: ST_TO_ADDR
21416: LD_VAR 0 6
21420: PUSH
21421: FOR_TO
21422: IFFALSE 22492
// begin if i > 4 then
21424: LD_VAR 0 8
21428: PUSH
21429: LD_INT 4
21431: GREATER
21432: IFFALSE 21436
// break ;
21434: GO 22492
// case i of 1 :
21436: LD_VAR 0 8
21440: PUSH
21441: LD_INT 1
21443: DOUBLE
21444: EQUAL
21445: IFTRUE 21449
21447: GO 21529
21449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21450: LD_ADDR_VAR 0 12
21454: PUSH
21455: LD_VAR 0 18
21459: PPUSH
21460: LD_INT 22
21462: PUSH
21463: LD_VAR 0 16
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 58
21474: PUSH
21475: EMPTY
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 30
21483: PUSH
21484: LD_INT 32
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 30
21493: PUSH
21494: LD_INT 4
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 30
21503: PUSH
21504: LD_INT 5
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: LIST
21521: PPUSH
21522: CALL_OW 72
21526: ST_TO_ADDR
21527: GO 21751
21529: LD_INT 2
21531: DOUBLE
21532: EQUAL
21533: IFTRUE 21537
21535: GO 21599
21537: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21538: LD_ADDR_VAR 0 12
21542: PUSH
21543: LD_VAR 0 18
21547: PPUSH
21548: LD_INT 22
21550: PUSH
21551: LD_VAR 0 16
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 30
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 30
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PPUSH
21592: CALL_OW 72
21596: ST_TO_ADDR
21597: GO 21751
21599: LD_INT 3
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21669
21607: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21608: LD_ADDR_VAR 0 12
21612: PUSH
21613: LD_VAR 0 18
21617: PPUSH
21618: LD_INT 22
21620: PUSH
21621: LD_VAR 0 16
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: LD_INT 30
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: LD_INT 30
21645: PUSH
21646: LD_INT 3
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PPUSH
21662: CALL_OW 72
21666: ST_TO_ADDR
21667: GO 21751
21669: LD_INT 4
21671: DOUBLE
21672: EQUAL
21673: IFTRUE 21677
21675: GO 21750
21677: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21678: LD_ADDR_VAR 0 12
21682: PUSH
21683: LD_VAR 0 18
21687: PPUSH
21688: LD_INT 22
21690: PUSH
21691: LD_VAR 0 16
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 2
21702: PUSH
21703: LD_INT 30
21705: PUSH
21706: LD_INT 6
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 30
21715: PUSH
21716: LD_INT 7
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 30
21725: PUSH
21726: LD_INT 8
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PPUSH
21743: CALL_OW 72
21747: ST_TO_ADDR
21748: GO 21751
21750: POP
// if i = 1 then
21751: LD_VAR 0 8
21755: PUSH
21756: LD_INT 1
21758: EQUAL
21759: IFFALSE 21870
// begin tmp := [ ] ;
21761: LD_ADDR_VAR 0 19
21765: PUSH
21766: EMPTY
21767: ST_TO_ADDR
// for j in f do
21768: LD_ADDR_VAR 0 9
21772: PUSH
21773: LD_VAR 0 12
21777: PUSH
21778: FOR_IN
21779: IFFALSE 21852
// if GetBType ( j ) = b_bunker then
21781: LD_VAR 0 9
21785: PPUSH
21786: CALL_OW 266
21790: PUSH
21791: LD_INT 32
21793: EQUAL
21794: IFFALSE 21821
// tmp := Insert ( tmp , 1 , j ) else
21796: LD_ADDR_VAR 0 19
21800: PUSH
21801: LD_VAR 0 19
21805: PPUSH
21806: LD_INT 1
21808: PPUSH
21809: LD_VAR 0 9
21813: PPUSH
21814: CALL_OW 2
21818: ST_TO_ADDR
21819: GO 21850
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21821: LD_ADDR_VAR 0 19
21825: PUSH
21826: LD_VAR 0 19
21830: PPUSH
21831: LD_VAR 0 19
21835: PUSH
21836: LD_INT 1
21838: PLUS
21839: PPUSH
21840: LD_VAR 0 9
21844: PPUSH
21845: CALL_OW 2
21849: ST_TO_ADDR
21850: GO 21778
21852: POP
21853: POP
// if tmp then
21854: LD_VAR 0 19
21858: IFFALSE 21870
// f := tmp ;
21860: LD_ADDR_VAR 0 12
21864: PUSH
21865: LD_VAR 0 19
21869: ST_TO_ADDR
// end ; x := personel [ i ] ;
21870: LD_ADDR_VAR 0 13
21874: PUSH
21875: LD_VAR 0 6
21879: PUSH
21880: LD_VAR 0 8
21884: ARRAY
21885: ST_TO_ADDR
// if x = - 1 then
21886: LD_VAR 0 13
21890: PUSH
21891: LD_INT 1
21893: NEG
21894: EQUAL
21895: IFFALSE 22106
// begin for j in f do
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: LD_VAR 0 12
21906: PUSH
21907: FOR_IN
21908: IFFALSE 22102
// repeat InitHc ;
21910: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21914: LD_VAR 0 9
21918: PPUSH
21919: CALL_OW 266
21923: PUSH
21924: LD_INT 5
21926: EQUAL
21927: IFFALSE 21997
// begin if UnitsInside ( j ) < 3 then
21929: LD_VAR 0 9
21933: PPUSH
21934: CALL_OW 313
21938: PUSH
21939: LD_INT 3
21941: LESS
21942: IFFALSE 21978
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21944: LD_INT 0
21946: PPUSH
21947: LD_INT 5
21949: PUSH
21950: LD_INT 8
21952: PUSH
21953: LD_INT 9
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: PUSH
21961: LD_VAR 0 17
21965: ARRAY
21966: PPUSH
21967: LD_VAR 0 4
21971: PPUSH
21972: CALL_OW 380
21976: GO 21995
// PrepareHuman ( false , i , skill ) ;
21978: LD_INT 0
21980: PPUSH
21981: LD_VAR 0 8
21985: PPUSH
21986: LD_VAR 0 4
21990: PPUSH
21991: CALL_OW 380
// end else
21995: GO 22014
// PrepareHuman ( false , i , skill ) ;
21997: LD_INT 0
21999: PPUSH
22000: LD_VAR 0 8
22004: PPUSH
22005: LD_VAR 0 4
22009: PPUSH
22010: CALL_OW 380
// un := CreateHuman ;
22014: LD_ADDR_VAR 0 14
22018: PUSH
22019: CALL_OW 44
22023: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22024: LD_ADDR_VAR 0 7
22028: PUSH
22029: LD_VAR 0 7
22033: PPUSH
22034: LD_INT 1
22036: PPUSH
22037: LD_VAR 0 14
22041: PPUSH
22042: CALL_OW 2
22046: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22047: LD_VAR 0 14
22051: PPUSH
22052: LD_VAR 0 9
22056: PPUSH
22057: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22061: LD_VAR 0 9
22065: PPUSH
22066: CALL_OW 313
22070: PUSH
22071: LD_INT 6
22073: EQUAL
22074: IFTRUE 22098
22076: PUSH
22077: LD_VAR 0 9
22081: PPUSH
22082: CALL_OW 266
22086: PUSH
22087: LD_INT 32
22089: PUSH
22090: LD_INT 31
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: IN
22097: OR
22098: IFFALSE 21910
22100: GO 21907
22102: POP
22103: POP
// end else
22104: GO 22490
// for j = 1 to x do
22106: LD_ADDR_VAR 0 9
22110: PUSH
22111: DOUBLE
22112: LD_INT 1
22114: DEC
22115: ST_TO_ADDR
22116: LD_VAR 0 13
22120: PUSH
22121: FOR_TO
22122: IFFALSE 22488
// begin InitHc ;
22124: CALL_OW 19
// if not f then
22128: LD_VAR 0 12
22132: NOT
22133: IFFALSE 22222
// begin PrepareHuman ( false , i , skill ) ;
22135: LD_INT 0
22137: PPUSH
22138: LD_VAR 0 8
22142: PPUSH
22143: LD_VAR 0 4
22147: PPUSH
22148: CALL_OW 380
// un := CreateHuman ;
22152: LD_ADDR_VAR 0 14
22156: PUSH
22157: CALL_OW 44
22161: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22162: LD_ADDR_VAR 0 7
22166: PUSH
22167: LD_VAR 0 7
22171: PPUSH
22172: LD_INT 1
22174: PPUSH
22175: LD_VAR 0 14
22179: PPUSH
22180: CALL_OW 2
22184: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22185: LD_VAR 0 14
22189: PPUSH
22190: LD_VAR 0 1
22194: PPUSH
22195: CALL_OW 250
22199: PPUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 251
22209: PPUSH
22210: LD_INT 10
22212: PPUSH
22213: LD_INT 0
22215: PPUSH
22216: CALL_OW 50
// continue ;
22220: GO 22121
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22222: LD_VAR 0 12
22226: PUSH
22227: LD_INT 1
22229: ARRAY
22230: PPUSH
22231: CALL_OW 313
22235: IFFALSE 22263
22237: PUSH
22238: LD_VAR 0 12
22242: PUSH
22243: LD_INT 1
22245: ARRAY
22246: PPUSH
22247: CALL_OW 266
22251: PUSH
22252: LD_INT 32
22254: PUSH
22255: LD_INT 31
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: IN
22262: AND
22263: IFTRUE 22284
22265: PUSH
22266: LD_VAR 0 12
22270: PUSH
22271: LD_INT 1
22273: ARRAY
22274: PPUSH
22275: CALL_OW 313
22279: PUSH
22280: LD_INT 6
22282: EQUAL
22283: OR
22284: IFFALSE 22304
// f := Delete ( f , 1 ) ;
22286: LD_ADDR_VAR 0 12
22290: PUSH
22291: LD_VAR 0 12
22295: PPUSH
22296: LD_INT 1
22298: PPUSH
22299: CALL_OW 3
22303: ST_TO_ADDR
// if not f then
22304: LD_VAR 0 12
22308: NOT
22309: IFFALSE 22327
// begin x := x + 2 ;
22311: LD_ADDR_VAR 0 13
22315: PUSH
22316: LD_VAR 0 13
22320: PUSH
22321: LD_INT 2
22323: PLUS
22324: ST_TO_ADDR
// continue ;
22325: GO 22121
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22327: LD_VAR 0 12
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: PPUSH
22336: CALL_OW 266
22340: PUSH
22341: LD_INT 5
22343: EQUAL
22344: IFFALSE 22418
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22346: LD_VAR 0 12
22350: PUSH
22351: LD_INT 1
22353: ARRAY
22354: PPUSH
22355: CALL_OW 313
22359: PUSH
22360: LD_INT 3
22362: LESS
22363: IFFALSE 22399
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22365: LD_INT 0
22367: PPUSH
22368: LD_INT 5
22370: PUSH
22371: LD_INT 8
22373: PUSH
22374: LD_INT 9
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: LIST
22381: PUSH
22382: LD_VAR 0 17
22386: ARRAY
22387: PPUSH
22388: LD_VAR 0 4
22392: PPUSH
22393: CALL_OW 380
22397: GO 22416
// PrepareHuman ( false , i , skill ) ;
22399: LD_INT 0
22401: PPUSH
22402: LD_VAR 0 8
22406: PPUSH
22407: LD_VAR 0 4
22411: PPUSH
22412: CALL_OW 380
// end else
22416: GO 22435
// PrepareHuman ( false , i , skill ) ;
22418: LD_INT 0
22420: PPUSH
22421: LD_VAR 0 8
22425: PPUSH
22426: LD_VAR 0 4
22430: PPUSH
22431: CALL_OW 380
// un := CreateHuman ;
22435: LD_ADDR_VAR 0 14
22439: PUSH
22440: CALL_OW 44
22444: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22445: LD_ADDR_VAR 0 7
22449: PUSH
22450: LD_VAR 0 7
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: LD_VAR 0 14
22462: PPUSH
22463: CALL_OW 2
22467: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22468: LD_VAR 0 14
22472: PPUSH
22473: LD_VAR 0 12
22477: PUSH
22478: LD_INT 1
22480: ARRAY
22481: PPUSH
22482: CALL_OW 52
// end ;
22486: GO 22121
22488: POP
22489: POP
// end ;
22490: GO 21421
22492: POP
22493: POP
// result := result ^ buildings ;
22494: LD_ADDR_VAR 0 7
22498: PUSH
22499: LD_VAR 0 7
22503: PUSH
22504: LD_VAR 0 18
22508: ADD
22509: ST_TO_ADDR
// end else
22510: GO 22653
// begin for i = 1 to personel do
22512: LD_ADDR_VAR 0 8
22516: PUSH
22517: DOUBLE
22518: LD_INT 1
22520: DEC
22521: ST_TO_ADDR
22522: LD_VAR 0 6
22526: PUSH
22527: FOR_TO
22528: IFFALSE 22651
// begin if i > 4 then
22530: LD_VAR 0 8
22534: PUSH
22535: LD_INT 4
22537: GREATER
22538: IFFALSE 22542
// break ;
22540: GO 22651
// x := personel [ i ] ;
22542: LD_ADDR_VAR 0 13
22546: PUSH
22547: LD_VAR 0 6
22551: PUSH
22552: LD_VAR 0 8
22556: ARRAY
22557: ST_TO_ADDR
// if x = - 1 then
22558: LD_VAR 0 13
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: EQUAL
22567: IFFALSE 22571
// continue ;
22569: GO 22527
// PrepareHuman ( false , i , skill ) ;
22571: LD_INT 0
22573: PPUSH
22574: LD_VAR 0 8
22578: PPUSH
22579: LD_VAR 0 4
22583: PPUSH
22584: CALL_OW 380
// un := CreateHuman ;
22588: LD_ADDR_VAR 0 14
22592: PUSH
22593: CALL_OW 44
22597: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22598: LD_VAR 0 14
22602: PPUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: CALL_OW 250
22612: PPUSH
22613: LD_VAR 0 1
22617: PPUSH
22618: CALL_OW 251
22622: PPUSH
22623: LD_INT 10
22625: PPUSH
22626: LD_INT 0
22628: PPUSH
22629: CALL_OW 50
// result := result ^ un ;
22633: LD_ADDR_VAR 0 7
22637: PUSH
22638: LD_VAR 0 7
22642: PUSH
22643: LD_VAR 0 14
22647: ADD
22648: ST_TO_ADDR
// end ;
22649: GO 22527
22651: POP
22652: POP
// end ; end ;
22653: LD_VAR 0 7
22657: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22658: LD_INT 0
22660: PPUSH
22661: PPUSH
22662: PPUSH
22663: PPUSH
22664: PPUSH
22665: PPUSH
22666: PPUSH
22667: PPUSH
22668: PPUSH
22669: PPUSH
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
22674: PPUSH
22675: PPUSH
// result := false ;
22676: LD_ADDR_VAR 0 3
22680: PUSH
22681: LD_INT 0
22683: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22684: LD_VAR 0 1
22688: NOT
22689: IFTRUE 22714
22691: PUSH
22692: LD_VAR 0 1
22696: PPUSH
22697: CALL_OW 266
22701: PUSH
22702: LD_INT 32
22704: PUSH
22705: LD_INT 33
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: IN
22712: NOT
22713: OR
22714: IFFALSE 22718
// exit ;
22716: GO 23853
// nat := GetNation ( tower ) ;
22718: LD_ADDR_VAR 0 12
22722: PUSH
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL_OW 248
22732: ST_TO_ADDR
// side := GetSide ( tower ) ;
22733: LD_ADDR_VAR 0 16
22737: PUSH
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 255
22747: ST_TO_ADDR
// x := GetX ( tower ) ;
22748: LD_ADDR_VAR 0 10
22752: PUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 250
22762: ST_TO_ADDR
// y := GetY ( tower ) ;
22763: LD_ADDR_VAR 0 11
22767: PUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 251
22777: ST_TO_ADDR
// if not x or not y then
22778: LD_VAR 0 10
22782: NOT
22783: IFTRUE 22792
22785: PUSH
22786: LD_VAR 0 11
22790: NOT
22791: OR
22792: IFFALSE 22796
// exit ;
22794: GO 23853
// weapon := 0 ;
22796: LD_ADDR_VAR 0 18
22800: PUSH
22801: LD_INT 0
22803: ST_TO_ADDR
// fac_list := [ ] ;
22804: LD_ADDR_VAR 0 17
22808: PUSH
22809: EMPTY
22810: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22811: LD_ADDR_VAR 0 6
22815: PUSH
22816: LD_VAR 0 1
22820: PPUSH
22821: CALL_OW 274
22825: PPUSH
22826: LD_VAR 0 2
22830: PPUSH
22831: LD_INT 0
22833: PPUSH
22834: CALL 20388 0 3
22838: PPUSH
22839: LD_INT 30
22841: PUSH
22842: LD_INT 3
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL_OW 72
22853: ST_TO_ADDR
// if not factories then
22854: LD_VAR 0 6
22858: NOT
22859: IFFALSE 22863
// exit ;
22861: GO 23853
// for i in factories do
22863: LD_ADDR_VAR 0 8
22867: PUSH
22868: LD_VAR 0 6
22872: PUSH
22873: FOR_IN
22874: IFFALSE 22899
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22876: LD_ADDR_VAR 0 17
22880: PUSH
22881: LD_VAR 0 17
22885: PUSH
22886: LD_VAR 0 8
22890: PPUSH
22891: CALL_OW 478
22895: UNION
22896: ST_TO_ADDR
22897: GO 22873
22899: POP
22900: POP
// if not fac_list then
22901: LD_VAR 0 17
22905: NOT
22906: IFFALSE 22910
// exit ;
22908: GO 23853
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22910: LD_ADDR_VAR 0 5
22914: PUSH
22915: LD_INT 4
22917: PUSH
22918: LD_INT 5
22920: PUSH
22921: LD_INT 9
22923: PUSH
22924: LD_INT 10
22926: PUSH
22927: LD_INT 6
22929: PUSH
22930: LD_INT 7
22932: PUSH
22933: LD_INT 11
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 27
22947: PUSH
22948: LD_INT 28
22950: PUSH
22951: LD_INT 26
22953: PUSH
22954: LD_INT 30
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 43
22965: PUSH
22966: LD_INT 44
22968: PUSH
22969: LD_INT 46
22971: PUSH
22972: LD_INT 45
22974: PUSH
22975: LD_INT 47
22977: PUSH
22978: LD_INT 49
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: PUSH
22994: LD_VAR 0 12
22998: ARRAY
22999: ST_TO_ADDR
// list := list isect fac_list ;
23000: LD_ADDR_VAR 0 5
23004: PUSH
23005: LD_VAR 0 5
23009: PUSH
23010: LD_VAR 0 17
23014: ISECT
23015: ST_TO_ADDR
// if not list then
23016: LD_VAR 0 5
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23853
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23025: LD_VAR 0 12
23029: PUSH
23030: LD_INT 3
23032: EQUAL
23033: IFFALSE 23045
23035: PUSH
23036: LD_INT 49
23038: PUSH
23039: LD_VAR 0 5
23043: IN
23044: AND
23045: IFFALSE 23065
23047: PUSH
23048: LD_INT 31
23050: PPUSH
23051: LD_VAR 0 16
23055: PPUSH
23056: CALL_OW 321
23060: PUSH
23061: LD_INT 2
23063: EQUAL
23064: AND
23065: IFFALSE 23125
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23067: LD_INT 22
23069: PUSH
23070: LD_VAR 0 16
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 35
23081: PUSH
23082: LD_INT 49
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 91
23091: PUSH
23092: LD_VAR 0 1
23096: PUSH
23097: LD_INT 10
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: LIST
23109: PPUSH
23110: CALL_OW 69
23114: NOT
23115: IFFALSE 23125
// weapon := ru_time_lapser ;
23117: LD_ADDR_VAR 0 18
23121: PUSH
23122: LD_INT 49
23124: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23125: LD_VAR 0 12
23129: PUSH
23130: LD_INT 1
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: IN
23140: IFFALSE 23164
23142: PUSH
23143: LD_INT 11
23145: PUSH
23146: LD_VAR 0 5
23150: IN
23151: IFTRUE 23163
23153: PUSH
23154: LD_INT 30
23156: PUSH
23157: LD_VAR 0 5
23161: IN
23162: OR
23163: AND
23164: IFFALSE 23184
23166: PUSH
23167: LD_INT 6
23169: PPUSH
23170: LD_VAR 0 16
23174: PPUSH
23175: CALL_OW 321
23179: PUSH
23180: LD_INT 2
23182: EQUAL
23183: AND
23184: IFFALSE 23351
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23186: LD_INT 22
23188: PUSH
23189: LD_VAR 0 16
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 2
23200: PUSH
23201: LD_INT 35
23203: PUSH
23204: LD_INT 11
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 35
23213: PUSH
23214: LD_INT 30
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 91
23228: PUSH
23229: LD_VAR 0 1
23233: PUSH
23234: LD_INT 18
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: PPUSH
23247: CALL_OW 69
23251: NOT
23252: IFFALSE 23328
23254: PUSH
23255: LD_INT 22
23257: PUSH
23258: LD_VAR 0 16
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 2
23269: PUSH
23270: LD_INT 30
23272: PUSH
23273: LD_INT 32
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 30
23282: PUSH
23283: LD_INT 33
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 91
23297: PUSH
23298: LD_VAR 0 1
23302: PUSH
23303: LD_INT 12
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: PUSH
23316: EMPTY
23317: LIST
23318: PPUSH
23319: CALL_OW 69
23323: PUSH
23324: LD_INT 2
23326: GREATER
23327: AND
23328: IFFALSE 23351
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23330: LD_ADDR_VAR 0 18
23334: PUSH
23335: LD_INT 11
23337: PUSH
23338: LD_INT 30
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_VAR 0 12
23349: ARRAY
23350: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23351: LD_VAR 0 18
23355: NOT
23356: IFFALSE 23376
23358: PUSH
23359: LD_INT 40
23361: PPUSH
23362: LD_VAR 0 16
23366: PPUSH
23367: CALL_OW 321
23371: PUSH
23372: LD_INT 2
23374: EQUAL
23375: AND
23376: IFFALSE 23412
23378: PUSH
23379: LD_INT 7
23381: PUSH
23382: LD_VAR 0 5
23386: IN
23387: IFTRUE 23399
23389: PUSH
23390: LD_INT 28
23392: PUSH
23393: LD_VAR 0 5
23397: IN
23398: OR
23399: IFTRUE 23411
23401: PUSH
23402: LD_INT 45
23404: PUSH
23405: LD_VAR 0 5
23409: IN
23410: OR
23411: AND
23412: IFFALSE 23666
// begin hex := GetHexInfo ( x , y ) ;
23414: LD_ADDR_VAR 0 4
23418: PUSH
23419: LD_VAR 0 10
23423: PPUSH
23424: LD_VAR 0 11
23428: PPUSH
23429: CALL_OW 546
23433: ST_TO_ADDR
// if hex [ 1 ] then
23434: LD_VAR 0 4
23438: PUSH
23439: LD_INT 1
23441: ARRAY
23442: IFFALSE 23446
// exit ;
23444: GO 23853
// height := hex [ 2 ] ;
23446: LD_ADDR_VAR 0 15
23450: PUSH
23451: LD_VAR 0 4
23455: PUSH
23456: LD_INT 2
23458: ARRAY
23459: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23460: LD_ADDR_VAR 0 14
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: LD_INT 3
23473: PUSH
23474: LD_INT 5
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: ST_TO_ADDR
// for i in tmp do
23483: LD_ADDR_VAR 0 8
23487: PUSH
23488: LD_VAR 0 14
23492: PUSH
23493: FOR_IN
23494: IFFALSE 23664
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23496: LD_ADDR_VAR 0 9
23500: PUSH
23501: LD_VAR 0 10
23505: PPUSH
23506: LD_VAR 0 8
23510: PPUSH
23511: LD_INT 5
23513: PPUSH
23514: CALL_OW 272
23518: PUSH
23519: LD_VAR 0 11
23523: PPUSH
23524: LD_VAR 0 8
23528: PPUSH
23529: LD_INT 5
23531: PPUSH
23532: CALL_OW 273
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23541: LD_VAR 0 9
23545: PUSH
23546: LD_INT 1
23548: ARRAY
23549: PPUSH
23550: LD_VAR 0 9
23554: PUSH
23555: LD_INT 2
23557: ARRAY
23558: PPUSH
23559: CALL_OW 488
23563: IFFALSE 23662
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23565: LD_ADDR_VAR 0 4
23569: PUSH
23570: LD_VAR 0 9
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PPUSH
23579: LD_VAR 0 9
23583: PUSH
23584: LD_INT 2
23586: ARRAY
23587: PPUSH
23588: CALL_OW 546
23592: ST_TO_ADDR
// if hex [ 1 ] then
23593: LD_VAR 0 4
23597: PUSH
23598: LD_INT 1
23600: ARRAY
23601: IFFALSE 23605
// continue ;
23603: GO 23493
// h := hex [ 2 ] ;
23605: LD_ADDR_VAR 0 13
23609: PUSH
23610: LD_VAR 0 4
23614: PUSH
23615: LD_INT 2
23617: ARRAY
23618: ST_TO_ADDR
// if h + 7 < height then
23619: LD_VAR 0 13
23623: PUSH
23624: LD_INT 7
23626: PLUS
23627: PUSH
23628: LD_VAR 0 15
23632: LESS
23633: IFFALSE 23662
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23635: LD_ADDR_VAR 0 18
23639: PUSH
23640: LD_INT 7
23642: PUSH
23643: LD_INT 28
23645: PUSH
23646: LD_INT 45
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: LD_VAR 0 12
23658: ARRAY
23659: ST_TO_ADDR
// break ;
23660: GO 23664
// end ; end ; end ;
23662: GO 23493
23664: POP
23665: POP
// end ; if not weapon then
23666: LD_VAR 0 18
23670: NOT
23671: IFFALSE 23731
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23673: LD_ADDR_VAR 0 5
23677: PUSH
23678: LD_VAR 0 5
23682: PUSH
23683: LD_INT 11
23685: PUSH
23686: LD_INT 30
23688: PUSH
23689: LD_INT 49
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: DIFF
23697: ST_TO_ADDR
// if not list then
23698: LD_VAR 0 5
23702: NOT
23703: IFFALSE 23707
// exit ;
23705: GO 23853
// weapon := list [ rand ( 1 , list ) ] ;
23707: LD_ADDR_VAR 0 18
23711: PUSH
23712: LD_VAR 0 5
23716: PUSH
23717: LD_INT 1
23719: PPUSH
23720: LD_VAR 0 5
23724: PPUSH
23725: CALL_OW 12
23729: ARRAY
23730: ST_TO_ADDR
// end ; if weapon then
23731: LD_VAR 0 18
23735: IFFALSE 23853
// begin tmp := CostOfWeapon ( weapon ) ;
23737: LD_ADDR_VAR 0 14
23741: PUSH
23742: LD_VAR 0 18
23746: PPUSH
23747: CALL_OW 451
23751: ST_TO_ADDR
// j := GetBase ( tower ) ;
23752: LD_ADDR_VAR 0 9
23756: PUSH
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 274
23766: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23767: LD_VAR 0 9
23771: PPUSH
23772: LD_INT 1
23774: PPUSH
23775: CALL_OW 275
23779: PUSH
23780: LD_VAR 0 14
23784: PUSH
23785: LD_INT 1
23787: ARRAY
23788: GREATEREQUAL
23789: IFFALSE 23815
23791: PUSH
23792: LD_VAR 0 9
23796: PPUSH
23797: LD_INT 2
23799: PPUSH
23800: CALL_OW 275
23804: PUSH
23805: LD_VAR 0 14
23809: PUSH
23810: LD_INT 2
23812: ARRAY
23813: GREATEREQUAL
23814: AND
23815: IFFALSE 23841
23817: PUSH
23818: LD_VAR 0 9
23822: PPUSH
23823: LD_INT 3
23825: PPUSH
23826: CALL_OW 275
23830: PUSH
23831: LD_VAR 0 14
23835: PUSH
23836: LD_INT 3
23838: ARRAY
23839: GREATEREQUAL
23840: AND
23841: IFFALSE 23853
// result := weapon ;
23843: LD_ADDR_VAR 0 3
23847: PUSH
23848: LD_VAR 0 18
23852: ST_TO_ADDR
// end ; end ;
23853: LD_VAR 0 3
23857: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23858: LD_INT 0
23860: PPUSH
23861: PPUSH
// result := true ;
23862: LD_ADDR_VAR 0 3
23866: PUSH
23867: LD_INT 1
23869: ST_TO_ADDR
// if array1 = array2 then
23870: LD_VAR 0 1
23874: PUSH
23875: LD_VAR 0 2
23879: EQUAL
23880: IFFALSE 23940
// begin for i = 1 to array1 do
23882: LD_ADDR_VAR 0 4
23886: PUSH
23887: DOUBLE
23888: LD_INT 1
23890: DEC
23891: ST_TO_ADDR
23892: LD_VAR 0 1
23896: PUSH
23897: FOR_TO
23898: IFFALSE 23936
// if array1 [ i ] <> array2 [ i ] then
23900: LD_VAR 0 1
23904: PUSH
23905: LD_VAR 0 4
23909: ARRAY
23910: PUSH
23911: LD_VAR 0 2
23915: PUSH
23916: LD_VAR 0 4
23920: ARRAY
23921: NONEQUAL
23922: IFFALSE 23934
// begin result := false ;
23924: LD_ADDR_VAR 0 3
23928: PUSH
23929: LD_INT 0
23931: ST_TO_ADDR
// break ;
23932: GO 23936
// end ;
23934: GO 23897
23936: POP
23937: POP
// end else
23938: GO 23948
// result := false ;
23940: LD_ADDR_VAR 0 3
23944: PUSH
23945: LD_INT 0
23947: ST_TO_ADDR
// end ;
23948: LD_VAR 0 3
23952: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23953: LD_INT 0
23955: PPUSH
23956: PPUSH
// if not array1 or not array2 then
23957: LD_VAR 0 1
23961: NOT
23962: IFTRUE 23971
23964: PUSH
23965: LD_VAR 0 2
23969: NOT
23970: OR
23971: IFFALSE 23975
// exit ;
23973: GO 24039
// result := true ;
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: LD_INT 1
23982: ST_TO_ADDR
// for i = 1 to array1 do
23983: LD_ADDR_VAR 0 4
23987: PUSH
23988: DOUBLE
23989: LD_INT 1
23991: DEC
23992: ST_TO_ADDR
23993: LD_VAR 0 1
23997: PUSH
23998: FOR_TO
23999: IFFALSE 24037
// if array1 [ i ] <> array2 [ i ] then
24001: LD_VAR 0 1
24005: PUSH
24006: LD_VAR 0 4
24010: ARRAY
24011: PUSH
24012: LD_VAR 0 2
24016: PUSH
24017: LD_VAR 0 4
24021: ARRAY
24022: NONEQUAL
24023: IFFALSE 24035
// begin result := false ;
24025: LD_ADDR_VAR 0 3
24029: PUSH
24030: LD_INT 0
24032: ST_TO_ADDR
// break ;
24033: GO 24037
// end ;
24035: GO 23998
24037: POP
24038: POP
// end ;
24039: LD_VAR 0 3
24043: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24044: LD_INT 0
24046: PPUSH
24047: PPUSH
24048: PPUSH
// pom := GetBase ( fac ) ;
24049: LD_ADDR_VAR 0 5
24053: PUSH
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 274
24063: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24064: LD_ADDR_VAR 0 4
24068: PUSH
24069: LD_VAR 0 2
24073: PUSH
24074: LD_INT 1
24076: ARRAY
24077: PPUSH
24078: LD_VAR 0 2
24082: PUSH
24083: LD_INT 2
24085: ARRAY
24086: PPUSH
24087: LD_VAR 0 2
24091: PUSH
24092: LD_INT 3
24094: ARRAY
24095: PPUSH
24096: LD_VAR 0 2
24100: PUSH
24101: LD_INT 4
24103: ARRAY
24104: PPUSH
24105: CALL_OW 449
24109: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24110: LD_ADDR_VAR 0 3
24114: PUSH
24115: LD_VAR 0 5
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: CALL_OW 275
24127: PUSH
24128: LD_VAR 0 4
24132: PUSH
24133: LD_INT 1
24135: ARRAY
24136: GREATEREQUAL
24137: IFFALSE 24163
24139: PUSH
24140: LD_VAR 0 5
24144: PPUSH
24145: LD_INT 2
24147: PPUSH
24148: CALL_OW 275
24152: PUSH
24153: LD_VAR 0 4
24157: PUSH
24158: LD_INT 2
24160: ARRAY
24161: GREATEREQUAL
24162: AND
24163: IFFALSE 24189
24165: PUSH
24166: LD_VAR 0 5
24170: PPUSH
24171: LD_INT 3
24173: PPUSH
24174: CALL_OW 275
24178: PUSH
24179: LD_VAR 0 4
24183: PUSH
24184: LD_INT 3
24186: ARRAY
24187: GREATEREQUAL
24188: AND
24189: ST_TO_ADDR
// end ;
24190: LD_VAR 0 3
24194: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24195: LD_INT 0
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
// pom := GetBase ( building ) ;
24201: LD_ADDR_VAR 0 3
24205: PUSH
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 274
24215: ST_TO_ADDR
// if not pom then
24216: LD_VAR 0 3
24220: NOT
24221: IFFALSE 24225
// exit ;
24223: GO 24399
// btype := GetBType ( building ) ;
24225: LD_ADDR_VAR 0 5
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 266
24239: ST_TO_ADDR
// if btype = b_armoury then
24240: LD_VAR 0 5
24244: PUSH
24245: LD_INT 4
24247: EQUAL
24248: IFFALSE 24258
// btype := b_barracks ;
24250: LD_ADDR_VAR 0 5
24254: PUSH
24255: LD_INT 5
24257: ST_TO_ADDR
// if btype = b_depot then
24258: LD_VAR 0 5
24262: PUSH
24263: LD_INT 0
24265: EQUAL
24266: IFFALSE 24276
// btype := b_warehouse ;
24268: LD_ADDR_VAR 0 5
24272: PUSH
24273: LD_INT 1
24275: ST_TO_ADDR
// if btype = b_workshop then
24276: LD_VAR 0 5
24280: PUSH
24281: LD_INT 2
24283: EQUAL
24284: IFFALSE 24294
// btype := b_factory ;
24286: LD_ADDR_VAR 0 5
24290: PUSH
24291: LD_INT 3
24293: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24294: LD_ADDR_VAR 0 4
24298: PUSH
24299: LD_VAR 0 5
24303: PPUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: CALL_OW 248
24313: PPUSH
24314: CALL_OW 450
24318: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24319: LD_ADDR_VAR 0 2
24323: PUSH
24324: LD_VAR 0 3
24328: PPUSH
24329: LD_INT 1
24331: PPUSH
24332: CALL_OW 275
24336: PUSH
24337: LD_VAR 0 4
24341: PUSH
24342: LD_INT 1
24344: ARRAY
24345: GREATEREQUAL
24346: IFFALSE 24372
24348: PUSH
24349: LD_VAR 0 3
24353: PPUSH
24354: LD_INT 2
24356: PPUSH
24357: CALL_OW 275
24361: PUSH
24362: LD_VAR 0 4
24366: PUSH
24367: LD_INT 2
24369: ARRAY
24370: GREATEREQUAL
24371: AND
24372: IFFALSE 24398
24374: PUSH
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 3
24382: PPUSH
24383: CALL_OW 275
24387: PUSH
24388: LD_VAR 0 4
24392: PUSH
24393: LD_INT 3
24395: ARRAY
24396: GREATEREQUAL
24397: AND
24398: ST_TO_ADDR
// end ;
24399: LD_VAR 0 2
24403: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24404: LD_INT 0
24406: PPUSH
24407: PPUSH
24408: PPUSH
// pom := GetBase ( building ) ;
24409: LD_ADDR_VAR 0 4
24413: PUSH
24414: LD_VAR 0 1
24418: PPUSH
24419: CALL_OW 274
24423: ST_TO_ADDR
// if not pom then
24424: LD_VAR 0 4
24428: NOT
24429: IFFALSE 24433
// exit ;
24431: GO 24538
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24433: LD_ADDR_VAR 0 5
24437: PUSH
24438: LD_VAR 0 2
24442: PPUSH
24443: LD_VAR 0 1
24447: PPUSH
24448: CALL_OW 248
24452: PPUSH
24453: CALL_OW 450
24457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24458: LD_ADDR_VAR 0 3
24462: PUSH
24463: LD_VAR 0 4
24467: PPUSH
24468: LD_INT 1
24470: PPUSH
24471: CALL_OW 275
24475: PUSH
24476: LD_VAR 0 5
24480: PUSH
24481: LD_INT 1
24483: ARRAY
24484: GREATEREQUAL
24485: IFFALSE 24511
24487: PUSH
24488: LD_VAR 0 4
24492: PPUSH
24493: LD_INT 2
24495: PPUSH
24496: CALL_OW 275
24500: PUSH
24501: LD_VAR 0 5
24505: PUSH
24506: LD_INT 2
24508: ARRAY
24509: GREATEREQUAL
24510: AND
24511: IFFALSE 24537
24513: PUSH
24514: LD_VAR 0 4
24518: PPUSH
24519: LD_INT 3
24521: PPUSH
24522: CALL_OW 275
24526: PUSH
24527: LD_VAR 0 5
24531: PUSH
24532: LD_INT 3
24534: ARRAY
24535: GREATEREQUAL
24536: AND
24537: ST_TO_ADDR
// end ;
24538: LD_VAR 0 3
24542: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24543: LD_INT 0
24545: PPUSH
24546: PPUSH
24547: PPUSH
24548: PPUSH
24549: PPUSH
24550: PPUSH
24551: PPUSH
24552: PPUSH
24553: PPUSH
24554: PPUSH
24555: PPUSH
// result := false ;
24556: LD_ADDR_VAR 0 8
24560: PUSH
24561: LD_INT 0
24563: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24564: LD_VAR 0 5
24568: NOT
24569: IFTRUE 24578
24571: PUSH
24572: LD_VAR 0 1
24576: NOT
24577: OR
24578: IFTRUE 24587
24580: PUSH
24581: LD_VAR 0 2
24585: NOT
24586: OR
24587: IFTRUE 24596
24589: PUSH
24590: LD_VAR 0 3
24594: NOT
24595: OR
24596: IFFALSE 24600
// exit ;
24598: GO 25426
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24600: LD_ADDR_VAR 0 14
24604: PUSH
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_VAR 0 4
24624: PPUSH
24625: LD_VAR 0 5
24629: PUSH
24630: LD_INT 1
24632: ARRAY
24633: PPUSH
24634: CALL_OW 248
24638: PPUSH
24639: LD_INT 0
24641: PPUSH
24642: CALL 26707 0 6
24646: ST_TO_ADDR
// if not hexes then
24647: LD_VAR 0 14
24651: NOT
24652: IFFALSE 24656
// exit ;
24654: GO 25426
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24656: LD_ADDR_VAR 0 17
24660: PUSH
24661: LD_VAR 0 5
24665: PPUSH
24666: LD_INT 22
24668: PUSH
24669: LD_VAR 0 13
24673: PPUSH
24674: CALL_OW 255
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: PUSH
24686: LD_INT 30
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 30
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 72
24719: ST_TO_ADDR
// for i = 1 to hexes do
24720: LD_ADDR_VAR 0 9
24724: PUSH
24725: DOUBLE
24726: LD_INT 1
24728: DEC
24729: ST_TO_ADDR
24730: LD_VAR 0 14
24734: PUSH
24735: FOR_TO
24736: IFFALSE 25424
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24738: LD_ADDR_VAR 0 13
24742: PUSH
24743: LD_VAR 0 14
24747: PUSH
24748: LD_VAR 0 9
24752: ARRAY
24753: PUSH
24754: LD_INT 1
24756: ARRAY
24757: PPUSH
24758: LD_VAR 0 14
24762: PUSH
24763: LD_VAR 0 9
24767: ARRAY
24768: PUSH
24769: LD_INT 2
24771: ARRAY
24772: PPUSH
24773: CALL_OW 428
24777: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24778: LD_VAR 0 14
24782: PUSH
24783: LD_VAR 0 9
24787: ARRAY
24788: PUSH
24789: LD_INT 1
24791: ARRAY
24792: PPUSH
24793: LD_VAR 0 14
24797: PUSH
24798: LD_VAR 0 9
24802: ARRAY
24803: PUSH
24804: LD_INT 2
24806: ARRAY
24807: PPUSH
24808: CALL_OW 351
24812: IFTRUE 24851
24814: PUSH
24815: LD_VAR 0 14
24819: PUSH
24820: LD_VAR 0 9
24824: ARRAY
24825: PUSH
24826: LD_INT 1
24828: ARRAY
24829: PPUSH
24830: LD_VAR 0 14
24834: PUSH
24835: LD_VAR 0 9
24839: ARRAY
24840: PUSH
24841: LD_INT 2
24843: ARRAY
24844: PPUSH
24845: CALL_OW 488
24849: NOT
24850: OR
24851: IFTRUE 24868
24853: PUSH
24854: LD_VAR 0 13
24858: PPUSH
24859: CALL_OW 247
24863: PUSH
24864: LD_INT 3
24866: EQUAL
24867: OR
24868: IFFALSE 24874
// exit ;
24870: POP
24871: POP
24872: GO 25426
// if not tmp then
24874: LD_VAR 0 13
24878: NOT
24879: IFFALSE 24883
// continue ;
24881: GO 24735
// result := true ;
24883: LD_ADDR_VAR 0 8
24887: PUSH
24888: LD_INT 1
24890: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24891: LD_VAR 0 6
24895: IFFALSE 24912
24897: PUSH
24898: LD_VAR 0 13
24902: PPUSH
24903: CALL_OW 247
24907: PUSH
24908: LD_INT 2
24910: EQUAL
24911: AND
24912: IFFALSE 24929
24914: PUSH
24915: LD_VAR 0 13
24919: PPUSH
24920: CALL_OW 263
24924: PUSH
24925: LD_INT 1
24927: EQUAL
24928: AND
24929: IFFALSE 25093
// begin if IsDrivenBy ( tmp ) then
24931: LD_VAR 0 13
24935: PPUSH
24936: CALL_OW 311
24940: IFFALSE 24944
// continue ;
24942: GO 24735
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24944: LD_VAR 0 6
24948: PPUSH
24949: LD_INT 3
24951: PUSH
24952: LD_INT 60
24954: PUSH
24955: EMPTY
24956: LIST
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 3
24964: PUSH
24965: LD_INT 55
24967: PUSH
24968: EMPTY
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PPUSH
24979: CALL_OW 72
24983: IFFALSE 25091
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24985: LD_ADDR_VAR 0 18
24989: PUSH
24990: LD_VAR 0 6
24994: PPUSH
24995: LD_INT 3
24997: PUSH
24998: LD_INT 60
25000: PUSH
25001: EMPTY
25002: LIST
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 3
25010: PUSH
25011: LD_INT 55
25013: PUSH
25014: EMPTY
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 72
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: ST_TO_ADDR
// if IsInUnit ( driver ) then
25034: LD_VAR 0 18
25038: PPUSH
25039: CALL_OW 310
25043: IFFALSE 25054
// ComExit ( driver ) ;
25045: LD_VAR 0 18
25049: PPUSH
25050: CALL 50697 0 1
// AddComEnterUnit ( driver , tmp ) ;
25054: LD_VAR 0 18
25058: PPUSH
25059: LD_VAR 0 13
25063: PPUSH
25064: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25068: LD_VAR 0 18
25072: PPUSH
25073: LD_VAR 0 7
25077: PPUSH
25078: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25082: LD_VAR 0 18
25086: PPUSH
25087: CALL_OW 181
// end ; continue ;
25091: GO 24735
// end ; if not cleaners or not tmp in cleaners then
25093: LD_VAR 0 6
25097: NOT
25098: IFTRUE 25113
25100: PUSH
25101: LD_VAR 0 13
25105: PUSH
25106: LD_VAR 0 6
25110: IN
25111: NOT
25112: OR
25113: IFFALSE 25422
// begin if dep then
25115: LD_VAR 0 17
25119: IFFALSE 25255
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25121: LD_ADDR_VAR 0 16
25125: PUSH
25126: LD_VAR 0 17
25130: PUSH
25131: LD_INT 1
25133: ARRAY
25134: PPUSH
25135: CALL_OW 250
25139: PPUSH
25140: LD_VAR 0 17
25144: PUSH
25145: LD_INT 1
25147: ARRAY
25148: PPUSH
25149: CALL_OW 254
25153: PPUSH
25154: LD_INT 5
25156: PPUSH
25157: CALL_OW 272
25161: PUSH
25162: LD_VAR 0 17
25166: PUSH
25167: LD_INT 1
25169: ARRAY
25170: PPUSH
25171: CALL_OW 251
25175: PPUSH
25176: LD_VAR 0 17
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PPUSH
25185: CALL_OW 254
25189: PPUSH
25190: LD_INT 5
25192: PPUSH
25193: CALL_OW 273
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25202: LD_VAR 0 16
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: PPUSH
25211: LD_VAR 0 16
25215: PUSH
25216: LD_INT 2
25218: ARRAY
25219: PPUSH
25220: CALL_OW 488
25224: IFFALSE 25255
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25226: LD_VAR 0 13
25230: PPUSH
25231: LD_VAR 0 16
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: PPUSH
25240: LD_VAR 0 16
25244: PUSH
25245: LD_INT 2
25247: ARRAY
25248: PPUSH
25249: CALL_OW 111
// continue ;
25253: GO 24735
// end ; end ; r := GetDir ( tmp ) ;
25255: LD_ADDR_VAR 0 15
25259: PUSH
25260: LD_VAR 0 13
25264: PPUSH
25265: CALL_OW 254
25269: ST_TO_ADDR
// if r = 5 then
25270: LD_VAR 0 15
25274: PUSH
25275: LD_INT 5
25277: EQUAL
25278: IFFALSE 25288
// r := 0 ;
25280: LD_ADDR_VAR 0 15
25284: PUSH
25285: LD_INT 0
25287: ST_TO_ADDR
// for j = r to 5 do
25288: LD_ADDR_VAR 0 10
25292: PUSH
25293: DOUBLE
25294: LD_VAR 0 15
25298: DEC
25299: ST_TO_ADDR
25300: LD_INT 5
25302: PUSH
25303: FOR_TO
25304: IFFALSE 25420
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25306: LD_ADDR_VAR 0 11
25310: PUSH
25311: LD_VAR 0 13
25315: PPUSH
25316: CALL_OW 250
25320: PPUSH
25321: LD_VAR 0 10
25325: PPUSH
25326: LD_INT 2
25328: PPUSH
25329: CALL_OW 272
25333: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25334: LD_ADDR_VAR 0 12
25338: PUSH
25339: LD_VAR 0 13
25343: PPUSH
25344: CALL_OW 251
25348: PPUSH
25349: LD_VAR 0 10
25353: PPUSH
25354: LD_INT 2
25356: PPUSH
25357: CALL_OW 273
25361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25362: LD_VAR 0 11
25366: PPUSH
25367: LD_VAR 0 12
25371: PPUSH
25372: CALL_OW 488
25376: IFFALSE 25395
25378: PUSH
25379: LD_VAR 0 11
25383: PPUSH
25384: LD_VAR 0 12
25388: PPUSH
25389: CALL_OW 428
25393: NOT
25394: AND
25395: IFFALSE 25418
// begin ComMoveXY ( tmp , _x , _y ) ;
25397: LD_VAR 0 13
25401: PPUSH
25402: LD_VAR 0 11
25406: PPUSH
25407: LD_VAR 0 12
25411: PPUSH
25412: CALL_OW 111
// break ;
25416: GO 25420
// end ; end ;
25418: GO 25303
25420: POP
25421: POP
// end ; end ;
25422: GO 24735
25424: POP
25425: POP
// end ;
25426: LD_VAR 0 8
25430: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25431: LD_INT 0
25433: PPUSH
// result := true ;
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 1
25441: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25442: LD_VAR 0 2
25446: PUSH
25447: LD_INT 24
25449: DOUBLE
25450: EQUAL
25451: IFTRUE 25461
25453: LD_INT 33
25455: DOUBLE
25456: EQUAL
25457: IFTRUE 25461
25459: GO 25486
25461: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25462: LD_ADDR_VAR 0 3
25466: PUSH
25467: LD_INT 32
25469: PPUSH
25470: LD_VAR 0 1
25474: PPUSH
25475: CALL_OW 321
25479: PUSH
25480: LD_INT 2
25482: EQUAL
25483: ST_TO_ADDR
25484: GO 25802
25486: LD_INT 20
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25519
25494: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 6
25502: PPUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 321
25512: PUSH
25513: LD_INT 2
25515: EQUAL
25516: ST_TO_ADDR
25517: GO 25802
25519: LD_INT 22
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25533
25525: LD_INT 36
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25558
25533: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25534: LD_ADDR_VAR 0 3
25538: PUSH
25539: LD_INT 15
25541: PPUSH
25542: LD_VAR 0 1
25546: PPUSH
25547: CALL_OW 321
25551: PUSH
25552: LD_INT 2
25554: EQUAL
25555: ST_TO_ADDR
25556: GO 25802
25558: LD_INT 30
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25591
25566: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 20
25574: PPUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 321
25584: PUSH
25585: LD_INT 2
25587: EQUAL
25588: ST_TO_ADDR
25589: GO 25802
25591: LD_INT 28
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25605
25597: LD_INT 21
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25605
25603: GO 25630
25605: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: LD_INT 21
25613: PPUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 321
25623: PUSH
25624: LD_INT 2
25626: EQUAL
25627: ST_TO_ADDR
25628: GO 25802
25630: LD_INT 16
25632: DOUBLE
25633: EQUAL
25634: IFTRUE 25638
25636: GO 25663
25638: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25639: LD_ADDR_VAR 0 3
25643: PUSH
25644: LD_INT 84
25646: PPUSH
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 321
25656: PUSH
25657: LD_INT 2
25659: EQUAL
25660: ST_TO_ADDR
25661: GO 25802
25663: LD_INT 19
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25677
25669: LD_INT 23
25671: DOUBLE
25672: EQUAL
25673: IFTRUE 25677
25675: GO 25702
25677: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 83
25685: PPUSH
25686: LD_VAR 0 1
25690: PPUSH
25691: CALL_OW 321
25695: PUSH
25696: LD_INT 2
25698: EQUAL
25699: ST_TO_ADDR
25700: GO 25802
25702: LD_INT 17
25704: DOUBLE
25705: EQUAL
25706: IFTRUE 25710
25708: GO 25735
25710: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25711: LD_ADDR_VAR 0 3
25715: PUSH
25716: LD_INT 39
25718: PPUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 321
25728: PUSH
25729: LD_INT 2
25731: EQUAL
25732: ST_TO_ADDR
25733: GO 25802
25735: LD_INT 18
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 25768
25743: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_INT 40
25751: PPUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 321
25761: PUSH
25762: LD_INT 2
25764: EQUAL
25765: ST_TO_ADDR
25766: GO 25802
25768: LD_INT 27
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25776
25774: GO 25801
25776: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25777: LD_ADDR_VAR 0 3
25781: PUSH
25782: LD_INT 35
25784: PPUSH
25785: LD_VAR 0 1
25789: PPUSH
25790: CALL_OW 321
25794: PUSH
25795: LD_INT 2
25797: EQUAL
25798: ST_TO_ADDR
25799: GO 25802
25801: POP
// end ;
25802: LD_VAR 0 3
25806: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25807: LD_INT 0
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
25817: PPUSH
25818: PPUSH
25819: PPUSH
// result := false ;
25820: LD_ADDR_VAR 0 6
25824: PUSH
25825: LD_INT 0
25827: ST_TO_ADDR
// if btype = b_depot then
25828: LD_VAR 0 2
25832: PUSH
25833: LD_INT 0
25835: EQUAL
25836: IFFALSE 25848
// begin result := true ;
25838: LD_ADDR_VAR 0 6
25842: PUSH
25843: LD_INT 1
25845: ST_TO_ADDR
// exit ;
25846: GO 26702
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25848: LD_VAR 0 1
25852: NOT
25853: IFTRUE 25878
25855: PUSH
25856: LD_VAR 0 1
25860: PPUSH
25861: CALL_OW 266
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: IN
25876: NOT
25877: OR
25878: IFTRUE 25887
25880: PUSH
25881: LD_VAR 0 2
25885: NOT
25886: OR
25887: IFTRUE 25923
25889: PUSH
25890: LD_VAR 0 5
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 3
25906: PUSH
25907: LD_INT 4
25909: PUSH
25910: LD_INT 5
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: IN
25921: NOT
25922: OR
25923: IFTRUE 25942
25925: PUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_VAR 0 4
25935: PPUSH
25936: CALL_OW 488
25940: NOT
25941: OR
25942: IFFALSE 25946
// exit ;
25944: GO 26702
// side := GetSide ( depot ) ;
25946: LD_ADDR_VAR 0 9
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 255
25960: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25961: LD_VAR 0 9
25965: PPUSH
25966: LD_VAR 0 2
25970: PPUSH
25971: CALL 25431 0 2
25975: NOT
25976: IFFALSE 25980
// exit ;
25978: GO 26702
// pom := GetBase ( depot ) ;
25980: LD_ADDR_VAR 0 10
25984: PUSH
25985: LD_VAR 0 1
25989: PPUSH
25990: CALL_OW 274
25994: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25995: LD_ADDR_VAR 0 11
25999: PUSH
26000: LD_VAR 0 2
26004: PPUSH
26005: LD_VAR 0 1
26009: PPUSH
26010: CALL_OW 248
26014: PPUSH
26015: CALL_OW 450
26019: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26020: LD_VAR 0 10
26024: PPUSH
26025: LD_INT 1
26027: PPUSH
26028: CALL_OW 275
26032: PUSH
26033: LD_VAR 0 11
26037: PUSH
26038: LD_INT 1
26040: ARRAY
26041: GREATEREQUAL
26042: IFFALSE 26068
26044: PUSH
26045: LD_VAR 0 10
26049: PPUSH
26050: LD_INT 2
26052: PPUSH
26053: CALL_OW 275
26057: PUSH
26058: LD_VAR 0 11
26062: PUSH
26063: LD_INT 2
26065: ARRAY
26066: GREATEREQUAL
26067: AND
26068: IFFALSE 26094
26070: PUSH
26071: LD_VAR 0 10
26075: PPUSH
26076: LD_INT 3
26078: PPUSH
26079: CALL_OW 275
26083: PUSH
26084: LD_VAR 0 11
26088: PUSH
26089: LD_INT 3
26091: ARRAY
26092: GREATEREQUAL
26093: AND
26094: NOT
26095: IFFALSE 26099
// exit ;
26097: GO 26702
// if GetBType ( depot ) = b_depot then
26099: LD_VAR 0 1
26103: PPUSH
26104: CALL_OW 266
26108: PUSH
26109: LD_INT 0
26111: EQUAL
26112: IFFALSE 26124
// dist := 28 else
26114: LD_ADDR_VAR 0 14
26118: PUSH
26119: LD_INT 28
26121: ST_TO_ADDR
26122: GO 26132
// dist := 36 ;
26124: LD_ADDR_VAR 0 14
26128: PUSH
26129: LD_INT 36
26131: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26132: LD_VAR 0 1
26136: PPUSH
26137: LD_VAR 0 3
26141: PPUSH
26142: LD_VAR 0 4
26146: PPUSH
26147: CALL_OW 297
26151: PUSH
26152: LD_VAR 0 14
26156: GREATER
26157: IFFALSE 26161
// exit ;
26159: GO 26702
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26161: LD_ADDR_VAR 0 12
26165: PUSH
26166: LD_VAR 0 2
26170: PPUSH
26171: LD_VAR 0 3
26175: PPUSH
26176: LD_VAR 0 4
26180: PPUSH
26181: LD_VAR 0 5
26185: PPUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 248
26195: PPUSH
26196: LD_INT 0
26198: PPUSH
26199: CALL 26707 0 6
26203: ST_TO_ADDR
// if not hexes then
26204: LD_VAR 0 12
26208: NOT
26209: IFFALSE 26213
// exit ;
26211: GO 26702
// hex := GetHexInfo ( x , y ) ;
26213: LD_ADDR_VAR 0 15
26217: PUSH
26218: LD_VAR 0 3
26222: PPUSH
26223: LD_VAR 0 4
26227: PPUSH
26228: CALL_OW 546
26232: ST_TO_ADDR
// if hex [ 1 ] then
26233: LD_VAR 0 15
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: IFFALSE 26245
// exit ;
26243: GO 26702
// height := hex [ 2 ] ;
26245: LD_ADDR_VAR 0 13
26249: PUSH
26250: LD_VAR 0 15
26254: PUSH
26255: LD_INT 2
26257: ARRAY
26258: ST_TO_ADDR
// for i = 1 to hexes do
26259: LD_ADDR_VAR 0 7
26263: PUSH
26264: DOUBLE
26265: LD_INT 1
26267: DEC
26268: ST_TO_ADDR
26269: LD_VAR 0 12
26273: PUSH
26274: FOR_TO
26275: IFFALSE 26619
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26277: LD_VAR 0 12
26281: PUSH
26282: LD_VAR 0 7
26286: ARRAY
26287: PUSH
26288: LD_INT 1
26290: ARRAY
26291: PPUSH
26292: LD_VAR 0 12
26296: PUSH
26297: LD_VAR 0 7
26301: ARRAY
26302: PUSH
26303: LD_INT 2
26305: ARRAY
26306: PPUSH
26307: CALL_OW 488
26311: NOT
26312: IFTRUE 26354
26314: PUSH
26315: LD_VAR 0 12
26319: PUSH
26320: LD_VAR 0 7
26324: ARRAY
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 12
26334: PUSH
26335: LD_VAR 0 7
26339: ARRAY
26340: PUSH
26341: LD_INT 2
26343: ARRAY
26344: PPUSH
26345: CALL_OW 428
26349: PUSH
26350: LD_INT 0
26352: GREATER
26353: OR
26354: IFTRUE 26392
26356: PUSH
26357: LD_VAR 0 12
26361: PUSH
26362: LD_VAR 0 7
26366: ARRAY
26367: PUSH
26368: LD_INT 1
26370: ARRAY
26371: PPUSH
26372: LD_VAR 0 12
26376: PUSH
26377: LD_VAR 0 7
26381: ARRAY
26382: PUSH
26383: LD_INT 2
26385: ARRAY
26386: PPUSH
26387: CALL_OW 351
26391: OR
26392: IFFALSE 26398
// exit ;
26394: POP
26395: POP
26396: GO 26702
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26398: LD_ADDR_VAR 0 8
26402: PUSH
26403: LD_VAR 0 12
26407: PUSH
26408: LD_VAR 0 7
26412: ARRAY
26413: PUSH
26414: LD_INT 1
26416: ARRAY
26417: PPUSH
26418: LD_VAR 0 12
26422: PUSH
26423: LD_VAR 0 7
26427: ARRAY
26428: PUSH
26429: LD_INT 2
26431: ARRAY
26432: PPUSH
26433: CALL_OW 546
26437: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26438: LD_VAR 0 8
26442: PUSH
26443: LD_INT 1
26445: ARRAY
26446: IFTRUE 26468
26448: PUSH
26449: LD_VAR 0 8
26453: PUSH
26454: LD_INT 2
26456: ARRAY
26457: PUSH
26458: LD_VAR 0 13
26462: PUSH
26463: LD_INT 2
26465: PLUS
26466: GREATER
26467: OR
26468: IFTRUE 26490
26470: PUSH
26471: LD_VAR 0 8
26475: PUSH
26476: LD_INT 2
26478: ARRAY
26479: PUSH
26480: LD_VAR 0 13
26484: PUSH
26485: LD_INT 2
26487: MINUS
26488: LESS
26489: OR
26490: IFTRUE 26558
26492: PUSH
26493: LD_VAR 0 8
26497: PUSH
26498: LD_INT 3
26500: ARRAY
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: LD_INT 8
26507: PUSH
26508: LD_INT 9
26510: PUSH
26511: LD_INT 10
26513: PUSH
26514: LD_INT 11
26516: PUSH
26517: LD_INT 12
26519: PUSH
26520: LD_INT 13
26522: PUSH
26523: LD_INT 16
26525: PUSH
26526: LD_INT 17
26528: PUSH
26529: LD_INT 18
26531: PUSH
26532: LD_INT 19
26534: PUSH
26535: LD_INT 20
26537: PUSH
26538: LD_INT 21
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: IN
26556: NOT
26557: OR
26558: IFTRUE 26571
26560: PUSH
26561: LD_VAR 0 8
26565: PUSH
26566: LD_INT 5
26568: ARRAY
26569: NOT
26570: OR
26571: IFTRUE 26611
26573: PUSH
26574: LD_VAR 0 8
26578: PUSH
26579: LD_INT 6
26581: ARRAY
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: LD_INT 7
26591: PUSH
26592: LD_INT 9
26594: PUSH
26595: LD_INT 10
26597: PUSH
26598: LD_INT 11
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: IN
26609: NOT
26610: OR
26611: IFFALSE 26617
// exit ;
26613: POP
26614: POP
26615: GO 26702
// end ;
26617: GO 26274
26619: POP
26620: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26621: LD_VAR 0 9
26625: PPUSH
26626: LD_VAR 0 3
26630: PPUSH
26631: LD_VAR 0 4
26635: PPUSH
26636: LD_INT 20
26638: PPUSH
26639: CALL 18521 0 4
26643: PUSH
26644: LD_INT 4
26646: ARRAY
26647: IFFALSE 26651
// exit ;
26649: GO 26702
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26651: LD_VAR 0 2
26655: PUSH
26656: LD_INT 29
26658: PUSH
26659: LD_INT 30
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: IN
26666: IFFALSE 26690
26668: PUSH
26669: LD_VAR 0 3
26673: PPUSH
26674: LD_VAR 0 4
26678: PPUSH
26679: LD_VAR 0 9
26683: PPUSH
26684: CALL_OW 440
26688: NOT
26689: AND
26690: IFFALSE 26694
// exit ;
26692: GO 26702
// result := true ;
26694: LD_ADDR_VAR 0 6
26698: PUSH
26699: LD_INT 1
26701: ST_TO_ADDR
// end ;
26702: LD_VAR 0 6
26706: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26707: LD_INT 0
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
26756: PPUSH
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
// result = [ ] ;
26767: LD_ADDR_VAR 0 7
26771: PUSH
26772: EMPTY
26773: ST_TO_ADDR
// temp_list = [ ] ;
26774: LD_ADDR_VAR 0 9
26778: PUSH
26779: EMPTY
26780: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26781: LD_VAR 0 4
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: LD_INT 4
26800: PUSH
26801: LD_INT 5
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: IN
26812: NOT
26813: IFTRUE 26856
26815: PUSH
26816: LD_VAR 0 1
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: IN
26831: IFFALSE 26855
26833: PUSH
26834: LD_VAR 0 5
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 3
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: IN
26853: NOT
26854: AND
26855: OR
26856: IFFALSE 26860
// exit ;
26858: GO 45259
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26860: LD_VAR 0 1
26864: PUSH
26865: LD_INT 6
26867: PUSH
26868: LD_INT 7
26870: PUSH
26871: LD_INT 8
26873: PUSH
26874: LD_INT 13
26876: PUSH
26877: LD_INT 12
26879: PUSH
26880: LD_INT 15
26882: PUSH
26883: LD_INT 11
26885: PUSH
26886: LD_INT 14
26888: PUSH
26889: LD_INT 10
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: IN
26903: IFFALSE 26913
// btype = b_lab ;
26905: LD_ADDR_VAR 0 1
26909: PUSH
26910: LD_INT 6
26912: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26913: LD_VAR 0 6
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: IN
26932: NOT
26933: IFTRUE 27001
26935: PUSH
26936: LD_VAR 0 1
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: LD_INT 6
26955: PUSH
26956: LD_INT 36
26958: PUSH
26959: LD_INT 4
26961: PUSH
26962: LD_INT 5
26964: PUSH
26965: LD_INT 31
26967: PUSH
26968: LD_INT 32
26970: PUSH
26971: LD_INT 33
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: IN
26987: NOT
26988: IFFALSE 27000
26990: PUSH
26991: LD_VAR 0 6
26995: PUSH
26996: LD_INT 1
26998: EQUAL
26999: AND
27000: OR
27001: IFTRUE 27033
27003: PUSH
27004: LD_VAR 0 1
27008: PUSH
27009: LD_INT 2
27011: PUSH
27012: LD_INT 3
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: IN
27019: NOT
27020: IFFALSE 27032
27022: PUSH
27023: LD_VAR 0 6
27027: PUSH
27028: LD_INT 2
27030: EQUAL
27031: AND
27032: OR
27033: IFFALSE 27043
// mode = 0 ;
27035: LD_ADDR_VAR 0 6
27039: PUSH
27040: LD_INT 0
27042: ST_TO_ADDR
// case mode of 0 :
27043: LD_VAR 0 6
27047: PUSH
27048: LD_INT 0
27050: DOUBLE
27051: EQUAL
27052: IFTRUE 27056
27054: GO 38509
27056: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27057: LD_ADDR_VAR 0 11
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 2
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 3
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: NEG
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27250: LD_ADDR_VAR 0 12
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: NEG
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: LD_INT 1
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 3
27407: NEG
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 3
27418: NEG
27419: PUSH
27420: LD_INT 1
27422: NEG
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27446: LD_ADDR_VAR 0 13
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 2
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: NEG
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 3
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: NEG
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 3
27617: NEG
27618: PUSH
27619: LD_INT 3
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27645: LD_ADDR_VAR 0 14
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 2
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: LD_INT 2
27741: NEG
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 3
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: LD_INT 3
27806: NEG
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 2
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27841: LD_ADDR_VAR 0 15
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: LD_INT 1
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 2
27964: NEG
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 3
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28034: LD_ADDR_VAR 0 16
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 0
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 2
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 1
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: LD_INT 2
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 3
28191: PUSH
28192: LD_INT 3
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28227: LD_ADDR_VAR 0 17
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: LD_INT 1
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: LD_INT 2
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 2
28323: NEG
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: LD_INT 2
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 2
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28457: LD_ADDR_VAR 0 18
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: LD_INT 2
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 0
28612: PUSH
28613: LD_INT 2
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: LD_INT 2
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28687: LD_ADDR_VAR 0 19
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 2
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: NEG
28887: PUSH
28888: LD_INT 2
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28917: LD_ADDR_VAR 0 20
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: LD_INT 2
29002: NEG
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 0
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 2
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 2
29104: NEG
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: NEG
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29147: LD_ADDR_VAR 0 21
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 0
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: LD_INT 2
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 2
29334: NEG
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 2
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: NEG
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29377: LD_ADDR_VAR 0 22
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: PUSH
29482: LD_INT 1
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: NEG
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29607: LD_ADDR_VAR 0 23
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 0
29624: PUSH
29625: LD_INT 1
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 1
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: NEG
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: LD_INT 2
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 1
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: NEG
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 2
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 3
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 1
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29887: LD_ADDR_VAR 0 24
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: NEG
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 2
29983: NEG
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 2
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: LD_INT 2
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 1
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 2
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: NEG
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: LD_INT 2
30101: NEG
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 2
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 3
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 3
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30163: LD_ADDR_VAR 0 25
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 0
30180: PUSH
30181: LD_INT 1
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 0
30211: PUSH
30212: LD_INT 1
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 2
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: LD_INT 2
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 1
30328: NEG
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 2
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: LD_INT 2
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30437: LD_ADDR_VAR 0 26
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 1
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 1
30518: NEG
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: LD_INT 0
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 0
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: LD_INT 2
30624: NEG
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 2
30636: NEG
30637: PUSH
30638: LD_INT 2
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: LD_INT 3
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30713: LD_ADDR_VAR 0 27
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 2
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: LD_INT 1
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 2
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 3
30946: NEG
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 3
30958: NEG
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30993: LD_ADDR_VAR 0 28
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 1
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 0
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 2
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 2
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 2
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 3
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 3
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31275: LD_ADDR_VAR 0 29
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: NEG
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 1
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 3
31519: NEG
31520: PUSH
31521: LD_INT 2
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31554: LD_ADDR_VAR 0 30
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: NEG
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: LD_INT 2
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: LD_INT 3
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31832: LD_ADDR_VAR 0 31
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: LD_INT 3
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 3
32044: PUSH
32045: LD_INT 1
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 3
32075: NEG
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32110: LD_ADDR_VAR 0 32
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 1
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: LD_INT 2
32195: NEG
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 2
32206: NEG
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 2
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: LD_INT 2
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 2
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: NEG
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 2
32287: NEG
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 3
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: LD_INT 2
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: LD_INT 2
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: LD_INT 3
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: LD_INT 1
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32388: LD_ADDR_VAR 0 33
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: NEG
32567: PUSH
32568: LD_INT 2
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: LD_INT 3
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 3
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: LD_INT 2
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32667: LD_ADDR_VAR 0 34
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: NEG
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: LD_INT 2
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: LD_INT 3
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: LD_INT 2
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 3
32912: NEG
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32947: LD_ADDR_VAR 0 35
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 1
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33059: LD_ADDR_VAR 0 36
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: LD_INT 1
33079: NEG
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 1
33140: NEG
33141: PUSH
33142: LD_INT 2
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33171: LD_ADDR_VAR 0 37
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 1
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 1
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33283: LD_ADDR_VAR 0 38
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33395: LD_ADDR_VAR 0 39
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33507: LD_ADDR_VAR 0 40
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33619: LD_ADDR_VAR 0 41
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: LD_INT 2
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 2
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 3
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 3
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 3
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 2
33872: PUSH
33873: LD_INT 3
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 2
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 3
33904: NEG
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 3
33916: NEG
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 3
33928: NEG
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33969: LD_ADDR_VAR 0 42
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 2
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: NEG
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 3
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: LD_INT 3
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 3
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 3
34266: NEG
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 3
34278: NEG
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34319: LD_ADDR_VAR 0 43
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 1
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: LD_INT 1
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 1
34388: NEG
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: LD_INT 3
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: LD_INT 3
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: PUSH
34574: LD_INT 3
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: NEG
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: NEG
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: LD_INT 1
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34667: LD_ADDR_VAR 0 44
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 1
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 2
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 2
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: NEG
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 2
34845: NEG
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: LD_INT 1
34872: NEG
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 3
34880: PUSH
34881: LD_INT 0
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: LD_INT 3
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 3
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: NEG
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: NEG
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 3
34964: NEG
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 3
34976: NEG
34977: PUSH
34978: LD_INT 3
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35017: LD_ADDR_VAR 0 45
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 0
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 1
35086: NEG
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: LD_INT 1
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 2
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 3
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 3
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 3
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 3
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 3
35314: NEG
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 3
35326: NEG
35327: PUSH
35328: LD_INT 3
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35367: LD_ADDR_VAR 0 46
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 1
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 1
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 3
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: LD_INT 3
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: NEG
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 2
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 3
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35715: LD_ADDR_VAR 0 47
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: NEG
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 2
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35866: LD_ADDR_VAR 0 48
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: LD_INT 2
35951: NEG
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36013: LD_ADDR_VAR 0 49
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36157: LD_ADDR_VAR 0 50
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36301: LD_ADDR_VAR 0 51
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: LD_INT 1
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36448: LD_ADDR_VAR 0 52
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 1
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: NEG
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: NEG
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 2
36575: NEG
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36599: LD_ADDR_VAR 0 53
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 2
36798: NEG
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36829: LD_ADDR_VAR 0 54
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: LD_INT 1
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 1
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 2
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 2
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: LD_INT 2
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37059: LD_ADDR_VAR 0 55
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 1
37128: NEG
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 2
37144: NEG
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 2
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37289: LD_ADDR_VAR 0 56
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 2
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 2
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: NEG
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37519: LD_ADDR_VAR 0 57
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 1
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 2
37706: NEG
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: LD_INT 2
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37749: LD_ADDR_VAR 0 58
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 1
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: LD_INT 2
37834: NEG
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: LD_INT 0
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: LD_INT 2
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: NEG
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37979: LD_ADDR_VAR 0 59
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38067: LD_ADDR_VAR 0 60
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38155: LD_ADDR_VAR 0 61
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38243: LD_ADDR_VAR 0 62
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 0
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: NEG
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38331: LD_ADDR_VAR 0 63
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38419: LD_ADDR_VAR 0 64
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// end ; 1 :
38507: GO 44404
38509: LD_INT 1
38511: DOUBLE
38512: EQUAL
38513: IFTRUE 38517
38515: GO 41140
38517: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38518: LD_ADDR_VAR 0 11
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: LD_INT 3
38529: NEG
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 3
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: LIST
38561: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38562: LD_ADDR_VAR 0 12
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 3
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38603: LD_ADDR_VAR 0 13
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: LD_INT 2
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: PUSH
38621: LD_INT 3
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 3
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38643: LD_ADDR_VAR 0 14
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38684: LD_ADDR_VAR 0 15
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 3
38713: NEG
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38728: LD_ADDR_VAR 0 16
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 3
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 3
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38774: LD_ADDR_VAR 0 17
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 3
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 3
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38818: LD_ADDR_VAR 0 18
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38859: LD_ADDR_VAR 0 19
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38899: LD_ADDR_VAR 0 20
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 3
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: LD_INT 3
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38940: LD_ADDR_VAR 0 21
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 3
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38984: LD_ADDR_VAR 0 22
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: LD_INT 3
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 3
39003: NEG
39004: PUSH
39005: LD_INT 2
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 3
39015: NEG
39016: PUSH
39017: LD_INT 3
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39030: LD_ADDR_VAR 0 23
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 4
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39074: LD_ADDR_VAR 0 24
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 3
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 4
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: LIST
39114: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39115: LD_ADDR_VAR 0 25
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 4
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: LD_INT 4
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: LIST
39154: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39155: LD_ADDR_VAR 0 26
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 4
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39196: LD_ADDR_VAR 0 27
39200: PUSH
39201: LD_INT 3
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 4
39225: NEG
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39240: LD_ADDR_VAR 0 28
39244: PUSH
39245: LD_INT 3
39247: NEG
39248: PUSH
39249: LD_INT 3
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 3
39259: NEG
39260: PUSH
39261: LD_INT 4
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 4
39271: NEG
39272: PUSH
39273: LD_INT 3
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39286: LD_ADDR_VAR 0 29
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 3
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 4
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 4
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 3
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: NEG
39362: PUSH
39363: LD_INT 5
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 5
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 4
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: LD_INT 6
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: LD_INT 6
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: PUSH
39419: LD_INT 5
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39441: LD_ADDR_VAR 0 30
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 3
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 3
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 4
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 4
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 4
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 5
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 5
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 5
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 6
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 6
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39584: LD_ADDR_VAR 0 31
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: LD_INT 3
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 3
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 4
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 4
39631: PUSH
39632: LD_INT 4
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 3
39641: PUSH
39642: LD_INT 4
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 5
39651: PUSH
39652: LD_INT 4
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: LD_INT 5
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 4
39671: PUSH
39672: LD_INT 5
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 6
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 6
39691: PUSH
39692: LD_INT 6
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 5
39701: PUSH
39702: LD_INT 6
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39723: LD_ADDR_VAR 0 32
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 4
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 4
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 3
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 5
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 5
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: NEG
39813: PUSH
39814: LD_INT 4
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 6
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 6
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: LD_INT 5
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39866: LD_ADDR_VAR 0 33
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 3
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 4
39918: NEG
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 4
39929: NEG
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 4
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 5
39952: NEG
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 5
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 5
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 6
39986: NEG
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 6
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40021: LD_ADDR_VAR 0 34
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: LD_INT 3
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 3
40040: NEG
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: NEG
40053: PUSH
40054: LD_INT 3
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: LD_INT 4
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 4
40076: NEG
40077: PUSH
40078: LD_INT 3
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 4
40088: NEG
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: NEG
40101: PUSH
40102: LD_INT 5
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 5
40112: NEG
40113: PUSH
40114: LD_INT 4
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 5
40124: NEG
40125: PUSH
40126: LD_INT 5
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 5
40136: NEG
40137: PUSH
40138: LD_INT 6
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 6
40148: NEG
40149: PUSH
40150: LD_INT 5
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 6
40160: NEG
40161: PUSH
40162: LD_INT 6
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40184: LD_ADDR_VAR 0 41
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 3
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: LIST
40227: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40228: LD_ADDR_VAR 0 42
40232: PUSH
40233: LD_INT 2
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 3
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40269: LD_ADDR_VAR 0 43
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 3
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 3
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40309: LD_ADDR_VAR 0 44
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 3
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40350: LD_ADDR_VAR 0 45
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 3
40379: NEG
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40394: LD_ADDR_VAR 0 46
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: LD_INT 3
40417: NEG
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40440: LD_ADDR_VAR 0 47
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: LD_INT 3
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 3
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40473: LD_ADDR_VAR 0 48
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 2
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 2
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40504: LD_ADDR_VAR 0 49
40508: PUSH
40509: LD_INT 3
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 3
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40533: LD_ADDR_VAR 0 50
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: LD_INT 3
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 3
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40562: LD_ADDR_VAR 0 51
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40593: LD_ADDR_VAR 0 52
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 3
40612: NEG
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40626: LD_ADDR_VAR 0 53
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 3
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 3
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40670: LD_ADDR_VAR 0 54
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 3
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40711: LD_ADDR_VAR 0 55
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40751: LD_ADDR_VAR 0 56
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 3
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40792: LD_ADDR_VAR 0 57
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 3
40810: NEG
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 3
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: LIST
40835: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40836: LD_ADDR_VAR 0 58
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: LD_INT 3
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 3
40855: NEG
40856: PUSH
40857: LD_INT 2
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: LD_INT 3
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40882: LD_ADDR_VAR 0 59
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: LIST
40925: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40926: LD_ADDR_VAR 0 60
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40967: LD_ADDR_VAR 0 61
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41007: LD_ADDR_VAR 0 62
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41048: LD_ADDR_VAR 0 63
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41092: LD_ADDR_VAR 0 64
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: ST_TO_ADDR
// end ; 2 :
41138: GO 44404
41140: LD_INT 2
41142: DOUBLE
41143: EQUAL
41144: IFTRUE 41148
41146: GO 44403
41148: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41149: LD_ADDR_VAR 0 29
41153: PUSH
41154: LD_INT 4
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 4
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 5
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 5
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 4
41197: PUSH
41198: LD_INT 1
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 5
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: LD_INT 3
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 4
41269: PUSH
41270: LD_INT 3
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 4
41279: PUSH
41280: LD_INT 4
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 4
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 4
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 4
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 4
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: LD_INT 5
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: LD_INT 5
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 4
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 5
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 3
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 3
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 4
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 4
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 4
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 4
41534: NEG
41535: PUSH
41536: LD_INT 4
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 4
41546: NEG
41547: PUSH
41548: LD_INT 5
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: NEG
41559: PUSH
41560: LD_INT 4
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: NEG
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 4
41582: NEG
41583: PUSH
41584: LD_INT 3
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 5
41594: NEG
41595: PUSH
41596: LD_INT 4
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 5
41606: NEG
41607: PUSH
41608: LD_INT 5
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 3
41618: NEG
41619: PUSH
41620: LD_INT 5
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 5
41630: NEG
41631: PUSH
41632: LD_INT 3
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41687: LD_ADDR_VAR 0 30
41691: PUSH
41692: LD_INT 4
41694: PUSH
41695: LD_INT 4
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 4
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: LD_INT 4
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 5
41724: PUSH
41725: LD_INT 5
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 4
41734: PUSH
41735: LD_INT 5
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 3
41744: PUSH
41745: LD_INT 4
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: LD_INT 3
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 5
41764: PUSH
41765: LD_INT 3
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: LD_INT 5
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 0
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 4
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 3
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 4
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 4
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 4
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 3
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 3
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 4
41922: NEG
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 5
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 5
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 5
41956: NEG
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 3
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: NEG
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: NEG
41992: PUSH
41993: LD_INT 4
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 3
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 4
42039: NEG
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 4
42051: NEG
42052: PUSH
42053: LD_INT 4
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: LD_INT 4
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 4
42075: NEG
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 4
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: LD_INT 5
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: LD_INT 4
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 3
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 3
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 4
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: LD_INT 5
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: LD_INT 5
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42234: LD_ADDR_VAR 0 31
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 4
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 4
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 5
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 5
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 4
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 3
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 5
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: NEG
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 4
42390: NEG
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 4
42401: NEG
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 4
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 4
42436: NEG
42437: PUSH
42438: LD_INT 4
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 4
42448: NEG
42449: PUSH
42450: LD_INT 5
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: LD_INT 4
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 3
42472: NEG
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 4
42484: NEG
42485: PUSH
42486: LD_INT 3
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 5
42496: NEG
42497: PUSH
42498: LD_INT 4
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 5
42508: NEG
42509: PUSH
42510: LD_INT 5
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 3
42520: NEG
42521: PUSH
42522: LD_INT 5
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 5
42532: NEG
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 3
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 4
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 4
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 2
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 4
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 4
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 4
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 5
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 5
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 4
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 5
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42784: LD_ADDR_VAR 0 32
42788: PUSH
42789: LD_INT 4
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 4
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 4
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 5
42847: NEG
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 5
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 5
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 3
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: LD_INT 4
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 3
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 2
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 3
42941: NEG
42942: PUSH
42943: LD_INT 2
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 4
42953: NEG
42954: PUSH
42955: LD_INT 3
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 4
42965: NEG
42966: PUSH
42967: LD_INT 4
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 4
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 4
42989: NEG
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 4
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 5
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 4
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: PUSH
43035: LD_INT 3
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: LD_INT 3
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: LD_INT 4
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: LD_INT 5
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: LD_INT 3
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: LD_INT 5
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 4
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 4
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 4
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 4
43196: PUSH
43197: LD_INT 4
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 4
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 5
43216: PUSH
43217: LD_INT 4
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 5
43226: PUSH
43227: LD_INT 5
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 4
43236: PUSH
43237: LD_INT 5
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: LD_INT 4
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 3
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 5
43266: PUSH
43267: LD_INT 3
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: LD_INT 5
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43331: LD_ADDR_VAR 0 33
43335: PUSH
43336: LD_INT 4
43338: NEG
43339: PUSH
43340: LD_INT 4
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 4
43350: NEG
43351: PUSH
43352: LD_INT 5
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 4
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: NEG
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 4
43386: NEG
43387: PUSH
43388: LD_INT 3
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 5
43398: NEG
43399: PUSH
43400: LD_INT 4
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 5
43410: NEG
43411: PUSH
43412: LD_INT 5
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: LD_INT 5
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 5
43434: NEG
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 4
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 4
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: LD_INT 4
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 4
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 4
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 5
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 5
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 4
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 3
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 5
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 4
43661: PUSH
43662: LD_INT 3
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 4
43671: PUSH
43672: LD_INT 4
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: LD_INT 4
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 2
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: LD_INT 4
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 4
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: PUSH
43752: LD_INT 4
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 5
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 5
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: LD_INT 4
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 5
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43869: LD_ADDR_VAR 0 34
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 4
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: LD_INT 5
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 4
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 3
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 3
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 4
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 5
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: LD_INT 5
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 4
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 4
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: LD_INT 4
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 4
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: LD_INT 4
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 5
44101: PUSH
44102: LD_INT 5
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 4
44111: PUSH
44112: LD_INT 5
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: PUSH
44132: LD_INT 3
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 5
44141: PUSH
44142: LD_INT 3
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 5
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 4
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 4
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 4
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 4
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 4
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 3
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 4
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 5
44310: NEG
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 5
44321: NEG
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 5
44333: NEG
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: NEG
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// end ; end ;
44401: GO 44404
44403: POP
// case btype of b_depot , b_warehouse :
44404: LD_VAR 0 1
44408: PUSH
44409: LD_INT 0
44411: DOUBLE
44412: EQUAL
44413: IFTRUE 44423
44415: LD_INT 1
44417: DOUBLE
44418: EQUAL
44419: IFTRUE 44423
44421: GO 44624
44423: POP
// case nation of nation_american :
44424: LD_VAR 0 5
44428: PUSH
44429: LD_INT 1
44431: DOUBLE
44432: EQUAL
44433: IFTRUE 44437
44435: GO 44493
44437: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44438: LD_ADDR_VAR 0 9
44442: PUSH
44443: LD_VAR 0 11
44447: PUSH
44448: LD_VAR 0 12
44452: PUSH
44453: LD_VAR 0 13
44457: PUSH
44458: LD_VAR 0 14
44462: PUSH
44463: LD_VAR 0 15
44467: PUSH
44468: LD_VAR 0 16
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: PUSH
44481: LD_VAR 0 4
44485: PUSH
44486: LD_INT 1
44488: PLUS
44489: ARRAY
44490: ST_TO_ADDR
44491: GO 44622
44493: LD_INT 2
44495: DOUBLE
44496: EQUAL
44497: IFTRUE 44501
44499: GO 44557
44501: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44502: LD_ADDR_VAR 0 9
44506: PUSH
44507: LD_VAR 0 17
44511: PUSH
44512: LD_VAR 0 18
44516: PUSH
44517: LD_VAR 0 19
44521: PUSH
44522: LD_VAR 0 20
44526: PUSH
44527: LD_VAR 0 21
44531: PUSH
44532: LD_VAR 0 22
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: PUSH
44545: LD_VAR 0 4
44549: PUSH
44550: LD_INT 1
44552: PLUS
44553: ARRAY
44554: ST_TO_ADDR
44555: GO 44622
44557: LD_INT 3
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44565
44563: GO 44621
44565: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44566: LD_ADDR_VAR 0 9
44570: PUSH
44571: LD_VAR 0 23
44575: PUSH
44576: LD_VAR 0 24
44580: PUSH
44581: LD_VAR 0 25
44585: PUSH
44586: LD_VAR 0 26
44590: PUSH
44591: LD_VAR 0 27
44595: PUSH
44596: LD_VAR 0 28
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: LD_VAR 0 4
44613: PUSH
44614: LD_INT 1
44616: PLUS
44617: ARRAY
44618: ST_TO_ADDR
44619: GO 44622
44621: POP
44622: GO 45177
44624: LD_INT 2
44626: DOUBLE
44627: EQUAL
44628: IFTRUE 44638
44630: LD_INT 3
44632: DOUBLE
44633: EQUAL
44634: IFTRUE 44638
44636: GO 44694
44638: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44639: LD_ADDR_VAR 0 9
44643: PUSH
44644: LD_VAR 0 29
44648: PUSH
44649: LD_VAR 0 30
44653: PUSH
44654: LD_VAR 0 31
44658: PUSH
44659: LD_VAR 0 32
44663: PUSH
44664: LD_VAR 0 33
44668: PUSH
44669: LD_VAR 0 34
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: PUSH
44682: LD_VAR 0 4
44686: PUSH
44687: LD_INT 1
44689: PLUS
44690: ARRAY
44691: ST_TO_ADDR
44692: GO 45177
44694: LD_INT 16
44696: DOUBLE
44697: EQUAL
44698: IFTRUE 44756
44700: LD_INT 17
44702: DOUBLE
44703: EQUAL
44704: IFTRUE 44756
44706: LD_INT 18
44708: DOUBLE
44709: EQUAL
44710: IFTRUE 44756
44712: LD_INT 19
44714: DOUBLE
44715: EQUAL
44716: IFTRUE 44756
44718: LD_INT 22
44720: DOUBLE
44721: EQUAL
44722: IFTRUE 44756
44724: LD_INT 20
44726: DOUBLE
44727: EQUAL
44728: IFTRUE 44756
44730: LD_INT 21
44732: DOUBLE
44733: EQUAL
44734: IFTRUE 44756
44736: LD_INT 23
44738: DOUBLE
44739: EQUAL
44740: IFTRUE 44756
44742: LD_INT 24
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44756
44748: LD_INT 25
44750: DOUBLE
44751: EQUAL
44752: IFTRUE 44756
44754: GO 44812
44756: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44757: LD_ADDR_VAR 0 9
44761: PUSH
44762: LD_VAR 0 35
44766: PUSH
44767: LD_VAR 0 36
44771: PUSH
44772: LD_VAR 0 37
44776: PUSH
44777: LD_VAR 0 38
44781: PUSH
44782: LD_VAR 0 39
44786: PUSH
44787: LD_VAR 0 40
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: PUSH
44800: LD_VAR 0 4
44804: PUSH
44805: LD_INT 1
44807: PLUS
44808: ARRAY
44809: ST_TO_ADDR
44810: GO 45177
44812: LD_INT 6
44814: DOUBLE
44815: EQUAL
44816: IFTRUE 44868
44818: LD_INT 7
44820: DOUBLE
44821: EQUAL
44822: IFTRUE 44868
44824: LD_INT 8
44826: DOUBLE
44827: EQUAL
44828: IFTRUE 44868
44830: LD_INT 13
44832: DOUBLE
44833: EQUAL
44834: IFTRUE 44868
44836: LD_INT 12
44838: DOUBLE
44839: EQUAL
44840: IFTRUE 44868
44842: LD_INT 15
44844: DOUBLE
44845: EQUAL
44846: IFTRUE 44868
44848: LD_INT 11
44850: DOUBLE
44851: EQUAL
44852: IFTRUE 44868
44854: LD_INT 14
44856: DOUBLE
44857: EQUAL
44858: IFTRUE 44868
44860: LD_INT 10
44862: DOUBLE
44863: EQUAL
44864: IFTRUE 44868
44866: GO 44924
44868: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44869: LD_ADDR_VAR 0 9
44873: PUSH
44874: LD_VAR 0 41
44878: PUSH
44879: LD_VAR 0 42
44883: PUSH
44884: LD_VAR 0 43
44888: PUSH
44889: LD_VAR 0 44
44893: PUSH
44894: LD_VAR 0 45
44898: PUSH
44899: LD_VAR 0 46
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: PUSH
44912: LD_VAR 0 4
44916: PUSH
44917: LD_INT 1
44919: PLUS
44920: ARRAY
44921: ST_TO_ADDR
44922: GO 45177
44924: LD_INT 36
44926: DOUBLE
44927: EQUAL
44928: IFTRUE 44932
44930: GO 44988
44932: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44933: LD_ADDR_VAR 0 9
44937: PUSH
44938: LD_VAR 0 47
44942: PUSH
44943: LD_VAR 0 48
44947: PUSH
44948: LD_VAR 0 49
44952: PUSH
44953: LD_VAR 0 50
44957: PUSH
44958: LD_VAR 0 51
44962: PUSH
44963: LD_VAR 0 52
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: PUSH
44976: LD_VAR 0 4
44980: PUSH
44981: LD_INT 1
44983: PLUS
44984: ARRAY
44985: ST_TO_ADDR
44986: GO 45177
44988: LD_INT 4
44990: DOUBLE
44991: EQUAL
44992: IFTRUE 45014
44994: LD_INT 5
44996: DOUBLE
44997: EQUAL
44998: IFTRUE 45014
45000: LD_INT 34
45002: DOUBLE
45003: EQUAL
45004: IFTRUE 45014
45006: LD_INT 37
45008: DOUBLE
45009: EQUAL
45010: IFTRUE 45014
45012: GO 45070
45014: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45015: LD_ADDR_VAR 0 9
45019: PUSH
45020: LD_VAR 0 53
45024: PUSH
45025: LD_VAR 0 54
45029: PUSH
45030: LD_VAR 0 55
45034: PUSH
45035: LD_VAR 0 56
45039: PUSH
45040: LD_VAR 0 57
45044: PUSH
45045: LD_VAR 0 58
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: PUSH
45058: LD_VAR 0 4
45062: PUSH
45063: LD_INT 1
45065: PLUS
45066: ARRAY
45067: ST_TO_ADDR
45068: GO 45177
45070: LD_INT 31
45072: DOUBLE
45073: EQUAL
45074: IFTRUE 45120
45076: LD_INT 32
45078: DOUBLE
45079: EQUAL
45080: IFTRUE 45120
45082: LD_INT 33
45084: DOUBLE
45085: EQUAL
45086: IFTRUE 45120
45088: LD_INT 27
45090: DOUBLE
45091: EQUAL
45092: IFTRUE 45120
45094: LD_INT 26
45096: DOUBLE
45097: EQUAL
45098: IFTRUE 45120
45100: LD_INT 28
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45120
45106: LD_INT 29
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45120
45112: LD_INT 30
45114: DOUBLE
45115: EQUAL
45116: IFTRUE 45120
45118: GO 45176
45120: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45121: LD_ADDR_VAR 0 9
45125: PUSH
45126: LD_VAR 0 59
45130: PUSH
45131: LD_VAR 0 60
45135: PUSH
45136: LD_VAR 0 61
45140: PUSH
45141: LD_VAR 0 62
45145: PUSH
45146: LD_VAR 0 63
45150: PUSH
45151: LD_VAR 0 64
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: PUSH
45164: LD_VAR 0 4
45168: PUSH
45169: LD_INT 1
45171: PLUS
45172: ARRAY
45173: ST_TO_ADDR
45174: GO 45177
45176: POP
// temp_list2 = [ ] ;
45177: LD_ADDR_VAR 0 10
45181: PUSH
45182: EMPTY
45183: ST_TO_ADDR
// for i in temp_list do
45184: LD_ADDR_VAR 0 8
45188: PUSH
45189: LD_VAR 0 9
45193: PUSH
45194: FOR_IN
45195: IFFALSE 45247
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45197: LD_ADDR_VAR 0 10
45201: PUSH
45202: LD_VAR 0 10
45206: PUSH
45207: LD_VAR 0 8
45211: PUSH
45212: LD_INT 1
45214: ARRAY
45215: PUSH
45216: LD_VAR 0 2
45220: PLUS
45221: PUSH
45222: LD_VAR 0 8
45226: PUSH
45227: LD_INT 2
45229: ARRAY
45230: PUSH
45231: LD_VAR 0 3
45235: PLUS
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: ADD
45244: ST_TO_ADDR
45245: GO 45194
45247: POP
45248: POP
// result = temp_list2 ;
45249: LD_ADDR_VAR 0 7
45253: PUSH
45254: LD_VAR 0 10
45258: ST_TO_ADDR
// end ;
45259: LD_VAR 0 7
45263: RET
// export function EnemyInRange ( unit , dist ) ; begin
45264: LD_INT 0
45266: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45267: LD_ADDR_VAR 0 3
45271: PUSH
45272: LD_VAR 0 1
45276: PPUSH
45277: CALL_OW 255
45281: PPUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: CALL_OW 250
45291: PPUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 251
45301: PPUSH
45302: LD_VAR 0 2
45306: PPUSH
45307: CALL 18521 0 4
45311: PUSH
45312: LD_INT 4
45314: ARRAY
45315: ST_TO_ADDR
// end ;
45316: LD_VAR 0 3
45320: RET
// export function PlayerSeeMe ( unit ) ; begin
45321: LD_INT 0
45323: PPUSH
// result := See ( your_side , unit ) ;
45324: LD_ADDR_VAR 0 2
45328: PUSH
45329: LD_OWVAR 2
45333: PPUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: CALL_OW 292
45343: ST_TO_ADDR
// end ;
45344: LD_VAR 0 2
45348: RET
// export function ReverseDir ( unit ) ; begin
45349: LD_INT 0
45351: PPUSH
// if not unit then
45352: LD_VAR 0 1
45356: NOT
45357: IFFALSE 45361
// exit ;
45359: GO 45384
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45361: LD_ADDR_VAR 0 2
45365: PUSH
45366: LD_VAR 0 1
45370: PPUSH
45371: CALL_OW 254
45375: PUSH
45376: LD_INT 3
45378: PLUS
45379: PUSH
45380: LD_INT 6
45382: MOD
45383: ST_TO_ADDR
// end ;
45384: LD_VAR 0 2
45388: RET
// export function ReverseArray ( array ) ; var i ; begin
45389: LD_INT 0
45391: PPUSH
45392: PPUSH
// if not array then
45393: LD_VAR 0 1
45397: NOT
45398: IFFALSE 45402
// exit ;
45400: GO 45457
// result := [ ] ;
45402: LD_ADDR_VAR 0 2
45406: PUSH
45407: EMPTY
45408: ST_TO_ADDR
// for i := array downto 1 do
45409: LD_ADDR_VAR 0 3
45413: PUSH
45414: DOUBLE
45415: LD_VAR 0 1
45419: INC
45420: ST_TO_ADDR
45421: LD_INT 1
45423: PUSH
45424: FOR_DOWNTO
45425: IFFALSE 45455
// result := Join ( result , array [ i ] ) ;
45427: LD_ADDR_VAR 0 2
45431: PUSH
45432: LD_VAR 0 2
45436: PPUSH
45437: LD_VAR 0 1
45441: PUSH
45442: LD_VAR 0 3
45446: ARRAY
45447: PPUSH
45448: CALL 50299 0 2
45452: ST_TO_ADDR
45453: GO 45424
45455: POP
45456: POP
// end ;
45457: LD_VAR 0 2
45461: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
45462: LD_INT 0
45464: PPUSH
45465: PPUSH
45466: PPUSH
45467: PPUSH
45468: PPUSH
45469: PPUSH
// if not unit or not hexes then
45470: LD_VAR 0 1
45474: NOT
45475: IFTRUE 45484
45477: PUSH
45478: LD_VAR 0 2
45482: NOT
45483: OR
45484: IFFALSE 45488
// exit ;
45486: GO 45611
// dist := 9999 ;
45488: LD_ADDR_VAR 0 5
45492: PUSH
45493: LD_INT 9999
45495: ST_TO_ADDR
// for i = 1 to hexes do
45496: LD_ADDR_VAR 0 4
45500: PUSH
45501: DOUBLE
45502: LD_INT 1
45504: DEC
45505: ST_TO_ADDR
45506: LD_VAR 0 2
45510: PUSH
45511: FOR_TO
45512: IFFALSE 45599
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45514: LD_ADDR_VAR 0 6
45518: PUSH
45519: LD_VAR 0 1
45523: PPUSH
45524: LD_VAR 0 2
45528: PUSH
45529: LD_VAR 0 4
45533: ARRAY
45534: PUSH
45535: LD_INT 1
45537: ARRAY
45538: PPUSH
45539: LD_VAR 0 2
45543: PUSH
45544: LD_VAR 0 4
45548: ARRAY
45549: PUSH
45550: LD_INT 2
45552: ARRAY
45553: PPUSH
45554: CALL_OW 297
45558: ST_TO_ADDR
// if tdist < dist then
45559: LD_VAR 0 6
45563: PUSH
45564: LD_VAR 0 5
45568: LESS
45569: IFFALSE 45597
// begin hex := hexes [ i ] ;
45571: LD_ADDR_VAR 0 8
45575: PUSH
45576: LD_VAR 0 2
45580: PUSH
45581: LD_VAR 0 4
45585: ARRAY
45586: ST_TO_ADDR
// dist := tdist ;
45587: LD_ADDR_VAR 0 5
45591: PUSH
45592: LD_VAR 0 6
45596: ST_TO_ADDR
// end ; end ;
45597: GO 45511
45599: POP
45600: POP
// result := hex ;
45601: LD_ADDR_VAR 0 3
45605: PUSH
45606: LD_VAR 0 8
45610: ST_TO_ADDR
// end ;
45611: LD_VAR 0 3
45615: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45616: LD_INT 0
45618: PPUSH
45619: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45620: LD_VAR 0 1
45624: NOT
45625: IFTRUE 45664
45627: PUSH
45628: LD_VAR 0 1
45632: PUSH
45633: LD_INT 21
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 23
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PPUSH
45657: CALL_OW 69
45661: IN
45662: NOT
45663: OR
45664: IFFALSE 45668
// exit ;
45666: GO 45715
// for i = 1 to 3 do
45668: LD_ADDR_VAR 0 3
45672: PUSH
45673: DOUBLE
45674: LD_INT 1
45676: DEC
45677: ST_TO_ADDR
45678: LD_INT 3
45680: PUSH
45681: FOR_TO
45682: IFFALSE 45713
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45684: LD_VAR 0 1
45688: PPUSH
45689: CALL_OW 250
45693: PPUSH
45694: LD_VAR 0 1
45698: PPUSH
45699: CALL_OW 251
45703: PPUSH
45704: LD_INT 1
45706: PPUSH
45707: CALL_OW 453
45711: GO 45681
45713: POP
45714: POP
// end ;
45715: LD_VAR 0 2
45719: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45720: LD_INT 0
45722: PPUSH
45723: PPUSH
45724: PPUSH
45725: PPUSH
45726: PPUSH
45727: PPUSH
// if not unit or not enemy_unit then
45728: LD_VAR 0 1
45732: NOT
45733: IFTRUE 45742
45735: PUSH
45736: LD_VAR 0 2
45740: NOT
45741: OR
45742: IFFALSE 45746
// exit ;
45744: GO 46217
// if GetLives ( i ) < 250 then
45746: LD_VAR 0 4
45750: PPUSH
45751: CALL_OW 256
45755: PUSH
45756: LD_INT 250
45758: LESS
45759: IFFALSE 45772
// begin ComAutodestruct ( i ) ;
45761: LD_VAR 0 4
45765: PPUSH
45766: CALL 45616 0 1
// exit ;
45770: GO 46217
// end ; x := GetX ( enemy_unit ) ;
45772: LD_ADDR_VAR 0 7
45776: PUSH
45777: LD_VAR 0 2
45781: PPUSH
45782: CALL_OW 250
45786: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45787: LD_ADDR_VAR 0 8
45791: PUSH
45792: LD_VAR 0 2
45796: PPUSH
45797: CALL_OW 251
45801: ST_TO_ADDR
// if not x or not y then
45802: LD_VAR 0 7
45806: NOT
45807: IFTRUE 45816
45809: PUSH
45810: LD_VAR 0 8
45814: NOT
45815: OR
45816: IFFALSE 45820
// exit ;
45818: GO 46217
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45820: LD_ADDR_VAR 0 6
45824: PUSH
45825: LD_VAR 0 7
45829: PPUSH
45830: LD_INT 0
45832: PPUSH
45833: LD_INT 4
45835: PPUSH
45836: CALL_OW 272
45840: PUSH
45841: LD_VAR 0 8
45845: PPUSH
45846: LD_INT 0
45848: PPUSH
45849: LD_INT 4
45851: PPUSH
45852: CALL_OW 273
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_VAR 0 7
45865: PPUSH
45866: LD_INT 1
45868: PPUSH
45869: LD_INT 4
45871: PPUSH
45872: CALL_OW 272
45876: PUSH
45877: LD_VAR 0 8
45881: PPUSH
45882: LD_INT 1
45884: PPUSH
45885: LD_INT 4
45887: PPUSH
45888: CALL_OW 273
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_VAR 0 7
45901: PPUSH
45902: LD_INT 2
45904: PPUSH
45905: LD_INT 4
45907: PPUSH
45908: CALL_OW 272
45912: PUSH
45913: LD_VAR 0 8
45917: PPUSH
45918: LD_INT 2
45920: PPUSH
45921: LD_INT 4
45923: PPUSH
45924: CALL_OW 273
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_VAR 0 7
45937: PPUSH
45938: LD_INT 3
45940: PPUSH
45941: LD_INT 4
45943: PPUSH
45944: CALL_OW 272
45948: PUSH
45949: LD_VAR 0 8
45953: PPUSH
45954: LD_INT 3
45956: PPUSH
45957: LD_INT 4
45959: PPUSH
45960: CALL_OW 273
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_VAR 0 7
45973: PPUSH
45974: LD_INT 4
45976: PPUSH
45977: LD_INT 4
45979: PPUSH
45980: CALL_OW 272
45984: PUSH
45985: LD_VAR 0 8
45989: PPUSH
45990: LD_INT 4
45992: PPUSH
45993: LD_INT 4
45995: PPUSH
45996: CALL_OW 273
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_VAR 0 7
46009: PPUSH
46010: LD_INT 5
46012: PPUSH
46013: LD_INT 4
46015: PPUSH
46016: CALL_OW 272
46020: PUSH
46021: LD_VAR 0 8
46025: PPUSH
46026: LD_INT 5
46028: PPUSH
46029: LD_INT 4
46031: PPUSH
46032: CALL_OW 273
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
// for i = tmp downto 1 do
46049: LD_ADDR_VAR 0 4
46053: PUSH
46054: DOUBLE
46055: LD_VAR 0 6
46059: INC
46060: ST_TO_ADDR
46061: LD_INT 1
46063: PUSH
46064: FOR_DOWNTO
46065: IFFALSE 46168
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46067: LD_VAR 0 6
46071: PUSH
46072: LD_VAR 0 4
46076: ARRAY
46077: PUSH
46078: LD_INT 1
46080: ARRAY
46081: PPUSH
46082: LD_VAR 0 6
46086: PUSH
46087: LD_VAR 0 4
46091: ARRAY
46092: PUSH
46093: LD_INT 2
46095: ARRAY
46096: PPUSH
46097: CALL_OW 488
46101: NOT
46102: IFTRUE 46144
46104: PUSH
46105: LD_VAR 0 6
46109: PUSH
46110: LD_VAR 0 4
46114: ARRAY
46115: PUSH
46116: LD_INT 1
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 6
46124: PUSH
46125: LD_VAR 0 4
46129: ARRAY
46130: PUSH
46131: LD_INT 2
46133: ARRAY
46134: PPUSH
46135: CALL_OW 428
46139: PUSH
46140: LD_INT 0
46142: NONEQUAL
46143: OR
46144: IFFALSE 46166
// tmp := Delete ( tmp , i ) ;
46146: LD_ADDR_VAR 0 6
46150: PUSH
46151: LD_VAR 0 6
46155: PPUSH
46156: LD_VAR 0 4
46160: PPUSH
46161: CALL_OW 3
46165: ST_TO_ADDR
46166: GO 46064
46168: POP
46169: POP
// j := GetClosestHex ( unit , tmp ) ;
46170: LD_ADDR_VAR 0 5
46174: PUSH
46175: LD_VAR 0 1
46179: PPUSH
46180: LD_VAR 0 6
46184: PPUSH
46185: CALL 45462 0 2
46189: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46190: LD_VAR 0 1
46194: PPUSH
46195: LD_VAR 0 5
46199: PUSH
46200: LD_INT 1
46202: ARRAY
46203: PPUSH
46204: LD_VAR 0 5
46208: PUSH
46209: LD_INT 2
46211: ARRAY
46212: PPUSH
46213: CALL_OW 111
// end ;
46217: LD_VAR 0 3
46221: RET
// export function PrepareApemanSoldier ( ) ; begin
46222: LD_INT 0
46224: PPUSH
// uc_nation := 0 ;
46225: LD_ADDR_OWVAR 21
46229: PUSH
46230: LD_INT 0
46232: ST_TO_ADDR
// hc_sex := sex_male ;
46233: LD_ADDR_OWVAR 27
46237: PUSH
46238: LD_INT 1
46240: ST_TO_ADDR
// hc_name :=  ;
46241: LD_ADDR_OWVAR 26
46245: PUSH
46246: LD_STRING 
46248: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
46249: LD_ADDR_OWVAR 28
46253: PUSH
46254: LD_INT 15
46256: ST_TO_ADDR
// hc_gallery :=  ;
46257: LD_ADDR_OWVAR 33
46261: PUSH
46262: LD_STRING 
46264: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46265: LD_ADDR_OWVAR 31
46269: PUSH
46270: LD_INT 0
46272: PPUSH
46273: LD_INT 3
46275: PPUSH
46276: CALL_OW 12
46280: PUSH
46281: LD_INT 0
46283: PPUSH
46284: LD_INT 3
46286: PPUSH
46287: CALL_OW 12
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46304: LD_ADDR_OWVAR 29
46308: PUSH
46309: LD_INT 12
46311: PUSH
46312: LD_INT 12
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// end ;
46319: LD_VAR 0 1
46323: RET
// export function PrepareApemanEngineer ( ) ; begin
46324: LD_INT 0
46326: PPUSH
// uc_nation := 0 ;
46327: LD_ADDR_OWVAR 21
46331: PUSH
46332: LD_INT 0
46334: ST_TO_ADDR
// hc_sex := sex_male ;
46335: LD_ADDR_OWVAR 27
46339: PUSH
46340: LD_INT 1
46342: ST_TO_ADDR
// hc_name :=  ;
46343: LD_ADDR_OWVAR 26
46347: PUSH
46348: LD_STRING 
46350: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
46351: LD_ADDR_OWVAR 28
46355: PUSH
46356: LD_INT 16
46358: ST_TO_ADDR
// hc_gallery :=  ;
46359: LD_ADDR_OWVAR 33
46363: PUSH
46364: LD_STRING 
46366: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46367: LD_ADDR_OWVAR 31
46371: PUSH
46372: LD_INT 0
46374: PPUSH
46375: LD_INT 3
46377: PPUSH
46378: CALL_OW 12
46382: PUSH
46383: LD_INT 0
46385: PPUSH
46386: LD_INT 3
46388: PPUSH
46389: CALL_OW 12
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46406: LD_ADDR_OWVAR 29
46410: PUSH
46411: LD_INT 12
46413: PUSH
46414: LD_INT 12
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: ST_TO_ADDR
// end ;
46421: LD_VAR 0 1
46425: RET
// export function PrepareApeman ( agressivity ) ; begin
46426: LD_INT 0
46428: PPUSH
// uc_side := 0 ;
46429: LD_ADDR_OWVAR 20
46433: PUSH
46434: LD_INT 0
46436: ST_TO_ADDR
// uc_nation := 0 ;
46437: LD_ADDR_OWVAR 21
46441: PUSH
46442: LD_INT 0
46444: ST_TO_ADDR
// hc_sex := sex_male ;
46445: LD_ADDR_OWVAR 27
46449: PUSH
46450: LD_INT 1
46452: ST_TO_ADDR
// hc_class := class_apeman ;
46453: LD_ADDR_OWVAR 28
46457: PUSH
46458: LD_INT 12
46460: ST_TO_ADDR
// hc_gallery :=  ;
46461: LD_ADDR_OWVAR 33
46465: PUSH
46466: LD_STRING 
46468: ST_TO_ADDR
// hc_name :=  ;
46469: LD_ADDR_OWVAR 26
46473: PUSH
46474: LD_STRING 
46476: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46477: LD_ADDR_OWVAR 29
46481: PUSH
46482: LD_INT 12
46484: PUSH
46485: LD_INT 12
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// if agressivity = 0 then
46492: LD_VAR 0 1
46496: PUSH
46497: LD_INT 0
46499: EQUAL
46500: IFFALSE 46512
// hc_agressivity := 0 else
46502: LD_ADDR_OWVAR 35
46506: PUSH
46507: LD_INT 0
46509: ST_TO_ADDR
46510: GO 46533
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46512: LD_ADDR_OWVAR 35
46516: PUSH
46517: LD_VAR 0 1
46521: NEG
46522: PPUSH
46523: LD_VAR 0 1
46527: PPUSH
46528: CALL_OW 12
46532: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46533: LD_ADDR_OWVAR 31
46537: PUSH
46538: LD_INT 0
46540: PPUSH
46541: LD_INT 3
46543: PPUSH
46544: CALL_OW 12
46548: PUSH
46549: LD_INT 0
46551: PPUSH
46552: LD_INT 3
46554: PPUSH
46555: CALL_OW 12
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: ST_TO_ADDR
// end ;
46572: LD_VAR 0 2
46576: RET
// export function PrepareTiger ( agressivity ) ; begin
46577: LD_INT 0
46579: PPUSH
// uc_side := 0 ;
46580: LD_ADDR_OWVAR 20
46584: PUSH
46585: LD_INT 0
46587: ST_TO_ADDR
// uc_nation := 0 ;
46588: LD_ADDR_OWVAR 21
46592: PUSH
46593: LD_INT 0
46595: ST_TO_ADDR
// InitHc ;
46596: CALL_OW 19
// hc_class := class_tiger ;
46600: LD_ADDR_OWVAR 28
46604: PUSH
46605: LD_INT 14
46607: ST_TO_ADDR
// hc_gallery :=  ;
46608: LD_ADDR_OWVAR 33
46612: PUSH
46613: LD_STRING 
46615: ST_TO_ADDR
// hc_name :=  ;
46616: LD_ADDR_OWVAR 26
46620: PUSH
46621: LD_STRING 
46623: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46624: LD_ADDR_OWVAR 35
46628: PUSH
46629: LD_VAR 0 1
46633: NEG
46634: PPUSH
46635: LD_VAR 0 1
46639: PPUSH
46640: CALL_OW 12
46644: ST_TO_ADDR
// end ;
46645: LD_VAR 0 2
46649: RET
// export function PrepareEnchidna ( ) ; begin
46650: LD_INT 0
46652: PPUSH
// uc_side := 0 ;
46653: LD_ADDR_OWVAR 20
46657: PUSH
46658: LD_INT 0
46660: ST_TO_ADDR
// uc_nation := 0 ;
46661: LD_ADDR_OWVAR 21
46665: PUSH
46666: LD_INT 0
46668: ST_TO_ADDR
// InitHc ;
46669: CALL_OW 19
// hc_class := class_baggie ;
46673: LD_ADDR_OWVAR 28
46677: PUSH
46678: LD_INT 13
46680: ST_TO_ADDR
// hc_gallery :=  ;
46681: LD_ADDR_OWVAR 33
46685: PUSH
46686: LD_STRING 
46688: ST_TO_ADDR
// hc_name :=  ;
46689: LD_ADDR_OWVAR 26
46693: PUSH
46694: LD_STRING 
46696: ST_TO_ADDR
// end ;
46697: LD_VAR 0 1
46701: RET
// export function PrepareFrog ( ) ; begin
46702: LD_INT 0
46704: PPUSH
// uc_side := 0 ;
46705: LD_ADDR_OWVAR 20
46709: PUSH
46710: LD_INT 0
46712: ST_TO_ADDR
// uc_nation := 0 ;
46713: LD_ADDR_OWVAR 21
46717: PUSH
46718: LD_INT 0
46720: ST_TO_ADDR
// InitHc ;
46721: CALL_OW 19
// hc_class := class_frog ;
46725: LD_ADDR_OWVAR 28
46729: PUSH
46730: LD_INT 19
46732: ST_TO_ADDR
// hc_gallery :=  ;
46733: LD_ADDR_OWVAR 33
46737: PUSH
46738: LD_STRING 
46740: ST_TO_ADDR
// hc_name :=  ;
46741: LD_ADDR_OWVAR 26
46745: PUSH
46746: LD_STRING 
46748: ST_TO_ADDR
// end ;
46749: LD_VAR 0 1
46753: RET
// export function PrepareFish ( ) ; begin
46754: LD_INT 0
46756: PPUSH
// uc_side := 0 ;
46757: LD_ADDR_OWVAR 20
46761: PUSH
46762: LD_INT 0
46764: ST_TO_ADDR
// uc_nation := 0 ;
46765: LD_ADDR_OWVAR 21
46769: PUSH
46770: LD_INT 0
46772: ST_TO_ADDR
// InitHc ;
46773: CALL_OW 19
// hc_class := class_fish ;
46777: LD_ADDR_OWVAR 28
46781: PUSH
46782: LD_INT 20
46784: ST_TO_ADDR
// hc_gallery :=  ;
46785: LD_ADDR_OWVAR 33
46789: PUSH
46790: LD_STRING 
46792: ST_TO_ADDR
// hc_name :=  ;
46793: LD_ADDR_OWVAR 26
46797: PUSH
46798: LD_STRING 
46800: ST_TO_ADDR
// end ;
46801: LD_VAR 0 1
46805: RET
// export function PrepareBird ( ) ; begin
46806: LD_INT 0
46808: PPUSH
// uc_side := 0 ;
46809: LD_ADDR_OWVAR 20
46813: PUSH
46814: LD_INT 0
46816: ST_TO_ADDR
// uc_nation := 0 ;
46817: LD_ADDR_OWVAR 21
46821: PUSH
46822: LD_INT 0
46824: ST_TO_ADDR
// InitHc ;
46825: CALL_OW 19
// hc_class := class_phororhacos ;
46829: LD_ADDR_OWVAR 28
46833: PUSH
46834: LD_INT 18
46836: ST_TO_ADDR
// hc_gallery :=  ;
46837: LD_ADDR_OWVAR 33
46841: PUSH
46842: LD_STRING 
46844: ST_TO_ADDR
// hc_name :=  ;
46845: LD_ADDR_OWVAR 26
46849: PUSH
46850: LD_STRING 
46852: ST_TO_ADDR
// end ;
46853: LD_VAR 0 1
46857: RET
// export function PrepareHorse ( ) ; begin
46858: LD_INT 0
46860: PPUSH
// uc_side := 0 ;
46861: LD_ADDR_OWVAR 20
46865: PUSH
46866: LD_INT 0
46868: ST_TO_ADDR
// uc_nation := 0 ;
46869: LD_ADDR_OWVAR 21
46873: PUSH
46874: LD_INT 0
46876: ST_TO_ADDR
// InitHc ;
46877: CALL_OW 19
// hc_class := class_horse ;
46881: LD_ADDR_OWVAR 28
46885: PUSH
46886: LD_INT 21
46888: ST_TO_ADDR
// hc_gallery :=  ;
46889: LD_ADDR_OWVAR 33
46893: PUSH
46894: LD_STRING 
46896: ST_TO_ADDR
// hc_name :=  ;
46897: LD_ADDR_OWVAR 26
46901: PUSH
46902: LD_STRING 
46904: ST_TO_ADDR
// end ;
46905: LD_VAR 0 1
46909: RET
// export function PrepareMastodont ( ) ; begin
46910: LD_INT 0
46912: PPUSH
// uc_side := 0 ;
46913: LD_ADDR_OWVAR 20
46917: PUSH
46918: LD_INT 0
46920: ST_TO_ADDR
// uc_nation := 0 ;
46921: LD_ADDR_OWVAR 21
46925: PUSH
46926: LD_INT 0
46928: ST_TO_ADDR
// vc_chassis := class_mastodont ;
46929: LD_ADDR_OWVAR 37
46933: PUSH
46934: LD_INT 31
46936: ST_TO_ADDR
// vc_control := control_rider ;
46937: LD_ADDR_OWVAR 38
46941: PUSH
46942: LD_INT 4
46944: ST_TO_ADDR
// end ;
46945: LD_VAR 0 1
46949: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46950: LD_INT 0
46952: PPUSH
46953: PPUSH
46954: PPUSH
// uc_side = 0 ;
46955: LD_ADDR_OWVAR 20
46959: PUSH
46960: LD_INT 0
46962: ST_TO_ADDR
// uc_nation = 0 ;
46963: LD_ADDR_OWVAR 21
46967: PUSH
46968: LD_INT 0
46970: ST_TO_ADDR
// InitHc_All ( ) ;
46971: CALL_OW 584
// InitVc ;
46975: CALL_OW 20
// if mastodonts then
46979: LD_VAR 0 6
46983: IFFALSE 47050
// for i = 1 to mastodonts do
46985: LD_ADDR_VAR 0 11
46989: PUSH
46990: DOUBLE
46991: LD_INT 1
46993: DEC
46994: ST_TO_ADDR
46995: LD_VAR 0 6
46999: PUSH
47000: FOR_TO
47001: IFFALSE 47048
// begin vc_chassis := 31 ;
47003: LD_ADDR_OWVAR 37
47007: PUSH
47008: LD_INT 31
47010: ST_TO_ADDR
// vc_control := control_rider ;
47011: LD_ADDR_OWVAR 38
47015: PUSH
47016: LD_INT 4
47018: ST_TO_ADDR
// animal := CreateVehicle ;
47019: LD_ADDR_VAR 0 12
47023: PUSH
47024: CALL_OW 45
47028: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47029: LD_VAR 0 12
47033: PPUSH
47034: LD_VAR 0 8
47038: PPUSH
47039: LD_INT 0
47041: PPUSH
47042: CALL 49192 0 3
// end ;
47046: GO 47000
47048: POP
47049: POP
// if horses then
47050: LD_VAR 0 5
47054: IFFALSE 47121
// for i = 1 to horses do
47056: LD_ADDR_VAR 0 11
47060: PUSH
47061: DOUBLE
47062: LD_INT 1
47064: DEC
47065: ST_TO_ADDR
47066: LD_VAR 0 5
47070: PUSH
47071: FOR_TO
47072: IFFALSE 47119
// begin hc_class := 21 ;
47074: LD_ADDR_OWVAR 28
47078: PUSH
47079: LD_INT 21
47081: ST_TO_ADDR
// hc_gallery :=  ;
47082: LD_ADDR_OWVAR 33
47086: PUSH
47087: LD_STRING 
47089: ST_TO_ADDR
// animal := CreateHuman ;
47090: LD_ADDR_VAR 0 12
47094: PUSH
47095: CALL_OW 44
47099: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47100: LD_VAR 0 12
47104: PPUSH
47105: LD_VAR 0 8
47109: PPUSH
47110: LD_INT 0
47112: PPUSH
47113: CALL 49192 0 3
// end ;
47117: GO 47071
47119: POP
47120: POP
// if birds then
47121: LD_VAR 0 1
47125: IFFALSE 47192
// for i = 1 to birds do
47127: LD_ADDR_VAR 0 11
47131: PUSH
47132: DOUBLE
47133: LD_INT 1
47135: DEC
47136: ST_TO_ADDR
47137: LD_VAR 0 1
47141: PUSH
47142: FOR_TO
47143: IFFALSE 47190
// begin hc_class := 18 ;
47145: LD_ADDR_OWVAR 28
47149: PUSH
47150: LD_INT 18
47152: ST_TO_ADDR
// hc_gallery =  ;
47153: LD_ADDR_OWVAR 33
47157: PUSH
47158: LD_STRING 
47160: ST_TO_ADDR
// animal := CreateHuman ;
47161: LD_ADDR_VAR 0 12
47165: PUSH
47166: CALL_OW 44
47170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47171: LD_VAR 0 12
47175: PPUSH
47176: LD_VAR 0 8
47180: PPUSH
47181: LD_INT 0
47183: PPUSH
47184: CALL 49192 0 3
// end ;
47188: GO 47142
47190: POP
47191: POP
// if tigers then
47192: LD_VAR 0 2
47196: IFFALSE 47280
// for i = 1 to tigers do
47198: LD_ADDR_VAR 0 11
47202: PUSH
47203: DOUBLE
47204: LD_INT 1
47206: DEC
47207: ST_TO_ADDR
47208: LD_VAR 0 2
47212: PUSH
47213: FOR_TO
47214: IFFALSE 47278
// begin hc_class = class_tiger ;
47216: LD_ADDR_OWVAR 28
47220: PUSH
47221: LD_INT 14
47223: ST_TO_ADDR
// hc_gallery =  ;
47224: LD_ADDR_OWVAR 33
47228: PUSH
47229: LD_STRING 
47231: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47232: LD_ADDR_OWVAR 35
47236: PUSH
47237: LD_INT 7
47239: NEG
47240: PPUSH
47241: LD_INT 7
47243: PPUSH
47244: CALL_OW 12
47248: ST_TO_ADDR
// animal := CreateHuman ;
47249: LD_ADDR_VAR 0 12
47253: PUSH
47254: CALL_OW 44
47258: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47259: LD_VAR 0 12
47263: PPUSH
47264: LD_VAR 0 8
47268: PPUSH
47269: LD_INT 0
47271: PPUSH
47272: CALL 49192 0 3
// end ;
47276: GO 47213
47278: POP
47279: POP
// if apemans then
47280: LD_VAR 0 3
47284: IFFALSE 47407
// for i = 1 to apemans do
47286: LD_ADDR_VAR 0 11
47290: PUSH
47291: DOUBLE
47292: LD_INT 1
47294: DEC
47295: ST_TO_ADDR
47296: LD_VAR 0 3
47300: PUSH
47301: FOR_TO
47302: IFFALSE 47405
// begin hc_class = class_apeman ;
47304: LD_ADDR_OWVAR 28
47308: PUSH
47309: LD_INT 12
47311: ST_TO_ADDR
// hc_gallery =  ;
47312: LD_ADDR_OWVAR 33
47316: PUSH
47317: LD_STRING 
47319: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47320: LD_ADDR_OWVAR 35
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PPUSH
47329: LD_INT 2
47331: PPUSH
47332: CALL_OW 12
47336: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47337: LD_ADDR_OWVAR 31
47341: PUSH
47342: LD_INT 1
47344: PPUSH
47345: LD_INT 3
47347: PPUSH
47348: CALL_OW 12
47352: PUSH
47353: LD_INT 1
47355: PPUSH
47356: LD_INT 3
47358: PPUSH
47359: CALL_OW 12
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// animal := CreateHuman ;
47376: LD_ADDR_VAR 0 12
47380: PUSH
47381: CALL_OW 44
47385: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47386: LD_VAR 0 12
47390: PPUSH
47391: LD_VAR 0 8
47395: PPUSH
47396: LD_INT 0
47398: PPUSH
47399: CALL 49192 0 3
// end ;
47403: GO 47301
47405: POP
47406: POP
// if enchidnas then
47407: LD_VAR 0 4
47411: IFFALSE 47478
// for i = 1 to enchidnas do
47413: LD_ADDR_VAR 0 11
47417: PUSH
47418: DOUBLE
47419: LD_INT 1
47421: DEC
47422: ST_TO_ADDR
47423: LD_VAR 0 4
47427: PUSH
47428: FOR_TO
47429: IFFALSE 47476
// begin hc_class = 13 ;
47431: LD_ADDR_OWVAR 28
47435: PUSH
47436: LD_INT 13
47438: ST_TO_ADDR
// hc_gallery =  ;
47439: LD_ADDR_OWVAR 33
47443: PUSH
47444: LD_STRING 
47446: ST_TO_ADDR
// animal := CreateHuman ;
47447: LD_ADDR_VAR 0 12
47451: PUSH
47452: CALL_OW 44
47456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47457: LD_VAR 0 12
47461: PPUSH
47462: LD_VAR 0 8
47466: PPUSH
47467: LD_INT 0
47469: PPUSH
47470: CALL 49192 0 3
// end ;
47474: GO 47428
47476: POP
47477: POP
// if fishes then
47478: LD_VAR 0 7
47482: IFFALSE 47549
// for i = 1 to fishes do
47484: LD_ADDR_VAR 0 11
47488: PUSH
47489: DOUBLE
47490: LD_INT 1
47492: DEC
47493: ST_TO_ADDR
47494: LD_VAR 0 7
47498: PUSH
47499: FOR_TO
47500: IFFALSE 47547
// begin hc_class = 20 ;
47502: LD_ADDR_OWVAR 28
47506: PUSH
47507: LD_INT 20
47509: ST_TO_ADDR
// hc_gallery =  ;
47510: LD_ADDR_OWVAR 33
47514: PUSH
47515: LD_STRING 
47517: ST_TO_ADDR
// animal := CreateHuman ;
47518: LD_ADDR_VAR 0 12
47522: PUSH
47523: CALL_OW 44
47527: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47528: LD_VAR 0 12
47532: PPUSH
47533: LD_VAR 0 9
47537: PPUSH
47538: LD_INT 0
47540: PPUSH
47541: CALL 49192 0 3
// end ;
47545: GO 47499
47547: POP
47548: POP
// end ;
47549: LD_VAR 0 10
47553: RET
// export function WantHeal ( sci , unit ) ; begin
47554: LD_INT 0
47556: PPUSH
// if GetTaskList ( sci ) > 0 then
47557: LD_VAR 0 1
47561: PPUSH
47562: CALL_OW 437
47566: PUSH
47567: LD_INT 0
47569: GREATER
47570: IFFALSE 47642
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47572: LD_VAR 0 1
47576: PPUSH
47577: CALL_OW 437
47581: PUSH
47582: LD_INT 1
47584: ARRAY
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: PUSH
47590: LD_STRING l
47592: EQUAL
47593: IFFALSE 47620
47595: PUSH
47596: LD_VAR 0 1
47600: PPUSH
47601: CALL_OW 437
47605: PUSH
47606: LD_INT 1
47608: ARRAY
47609: PUSH
47610: LD_INT 4
47612: ARRAY
47613: PUSH
47614: LD_VAR 0 2
47618: EQUAL
47619: AND
47620: IFFALSE 47632
// result := true else
47622: LD_ADDR_VAR 0 3
47626: PUSH
47627: LD_INT 1
47629: ST_TO_ADDR
47630: GO 47640
// result := false ;
47632: LD_ADDR_VAR 0 3
47636: PUSH
47637: LD_INT 0
47639: ST_TO_ADDR
// end else
47640: GO 47650
// result := false ;
47642: LD_ADDR_VAR 0 3
47646: PUSH
47647: LD_INT 0
47649: ST_TO_ADDR
// end ;
47650: LD_VAR 0 3
47654: RET
// export function HealTarget ( sci ) ; begin
47655: LD_INT 0
47657: PPUSH
// if not sci then
47658: LD_VAR 0 1
47662: NOT
47663: IFFALSE 47667
// exit ;
47665: GO 47732
// result := 0 ;
47667: LD_ADDR_VAR 0 2
47671: PUSH
47672: LD_INT 0
47674: ST_TO_ADDR
// if GetTaskList ( sci ) then
47675: LD_VAR 0 1
47679: PPUSH
47680: CALL_OW 437
47684: IFFALSE 47732
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47686: LD_VAR 0 1
47690: PPUSH
47691: CALL_OW 437
47695: PUSH
47696: LD_INT 1
47698: ARRAY
47699: PUSH
47700: LD_INT 1
47702: ARRAY
47703: PUSH
47704: LD_STRING l
47706: EQUAL
47707: IFFALSE 47732
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47709: LD_ADDR_VAR 0 2
47713: PUSH
47714: LD_VAR 0 1
47718: PPUSH
47719: CALL_OW 437
47723: PUSH
47724: LD_INT 1
47726: ARRAY
47727: PUSH
47728: LD_INT 4
47730: ARRAY
47731: ST_TO_ADDR
// end ;
47732: LD_VAR 0 2
47736: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47737: LD_INT 0
47739: PPUSH
47740: PPUSH
47741: PPUSH
47742: PPUSH
// if not base_units then
47743: LD_VAR 0 1
47747: NOT
47748: IFFALSE 47752
// exit ;
47750: GO 47839
// result := false ;
47752: LD_ADDR_VAR 0 2
47756: PUSH
47757: LD_INT 0
47759: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47760: LD_ADDR_VAR 0 5
47764: PUSH
47765: LD_VAR 0 1
47769: PPUSH
47770: LD_INT 21
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PPUSH
47780: CALL_OW 72
47784: ST_TO_ADDR
// if not tmp then
47785: LD_VAR 0 5
47789: NOT
47790: IFFALSE 47794
// exit ;
47792: GO 47839
// for i in tmp do
47794: LD_ADDR_VAR 0 3
47798: PUSH
47799: LD_VAR 0 5
47803: PUSH
47804: FOR_IN
47805: IFFALSE 47837
// begin result := EnemyInRange ( i , 22 ) ;
47807: LD_ADDR_VAR 0 2
47811: PUSH
47812: LD_VAR 0 3
47816: PPUSH
47817: LD_INT 22
47819: PPUSH
47820: CALL 45264 0 2
47824: ST_TO_ADDR
// if result then
47825: LD_VAR 0 2
47829: IFFALSE 47835
// exit ;
47831: POP
47832: POP
47833: GO 47839
// end ;
47835: GO 47804
47837: POP
47838: POP
// end ;
47839: LD_VAR 0 2
47843: RET
// export function FilterByTag ( units , tag ) ; begin
47844: LD_INT 0
47846: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47847: LD_ADDR_VAR 0 3
47851: PUSH
47852: LD_VAR 0 1
47856: PPUSH
47857: LD_INT 120
47859: PUSH
47860: LD_VAR 0 2
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PPUSH
47869: CALL_OW 72
47873: ST_TO_ADDR
// end ;
47874: LD_VAR 0 3
47878: RET
// export function IsDriver ( un ) ; begin
47879: LD_INT 0
47881: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47882: LD_ADDR_VAR 0 2
47886: PUSH
47887: LD_VAR 0 1
47891: PUSH
47892: LD_INT 55
47894: PUSH
47895: EMPTY
47896: LIST
47897: PPUSH
47898: CALL_OW 69
47902: IN
47903: ST_TO_ADDR
// end ;
47904: LD_VAR 0 2
47908: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47909: LD_INT 0
47911: PPUSH
47912: PPUSH
// list := [ ] ;
47913: LD_ADDR_VAR 0 5
47917: PUSH
47918: EMPTY
47919: ST_TO_ADDR
// case d of 0 :
47920: LD_VAR 0 3
47924: PUSH
47925: LD_INT 0
47927: DOUBLE
47928: EQUAL
47929: IFTRUE 47933
47931: GO 48066
47933: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47934: LD_ADDR_VAR 0 5
47938: PUSH
47939: LD_VAR 0 1
47943: PUSH
47944: LD_INT 4
47946: MINUS
47947: PUSH
47948: LD_VAR 0 2
47952: PUSH
47953: LD_INT 4
47955: MINUS
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: PUSH
47965: LD_VAR 0 1
47969: PUSH
47970: LD_INT 3
47972: MINUS
47973: PUSH
47974: LD_VAR 0 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: PUSH
47987: LD_VAR 0 1
47991: PUSH
47992: LD_INT 4
47994: PLUS
47995: PUSH
47996: LD_VAR 0 2
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: PUSH
48009: LD_VAR 0 1
48013: PUSH
48014: LD_INT 3
48016: PLUS
48017: PUSH
48018: LD_VAR 0 2
48022: PUSH
48023: LD_INT 3
48025: PLUS
48026: PUSH
48027: LD_INT 5
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: PUSH
48035: LD_VAR 0 1
48039: PUSH
48040: LD_VAR 0 2
48044: PUSH
48045: LD_INT 4
48047: PLUS
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// end ; 1 :
48064: GO 48764
48066: LD_INT 1
48068: DOUBLE
48069: EQUAL
48070: IFTRUE 48074
48072: GO 48207
48074: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48075: LD_ADDR_VAR 0 5
48079: PUSH
48080: LD_VAR 0 1
48084: PUSH
48085: LD_VAR 0 2
48089: PUSH
48090: LD_INT 4
48092: MINUS
48093: PUSH
48094: LD_INT 3
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: PUSH
48102: LD_VAR 0 1
48106: PUSH
48107: LD_INT 3
48109: MINUS
48110: PUSH
48111: LD_VAR 0 2
48115: PUSH
48116: LD_INT 3
48118: MINUS
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: PUSH
48128: LD_VAR 0 1
48132: PUSH
48133: LD_INT 4
48135: MINUS
48136: PUSH
48137: LD_VAR 0 2
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: PUSH
48150: LD_VAR 0 1
48154: PUSH
48155: LD_VAR 0 2
48159: PUSH
48160: LD_INT 3
48162: PLUS
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: PUSH
48172: LD_VAR 0 1
48176: PUSH
48177: LD_INT 4
48179: PLUS
48180: PUSH
48181: LD_VAR 0 2
48185: PUSH
48186: LD_INT 4
48188: PLUS
48189: PUSH
48190: LD_INT 5
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// end ; 2 :
48205: GO 48764
48207: LD_INT 2
48209: DOUBLE
48210: EQUAL
48211: IFTRUE 48215
48213: GO 48344
48215: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48216: LD_ADDR_VAR 0 5
48220: PUSH
48221: LD_VAR 0 1
48225: PUSH
48226: LD_VAR 0 2
48230: PUSH
48231: LD_INT 3
48233: MINUS
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: PUSH
48243: LD_VAR 0 1
48247: PUSH
48248: LD_INT 4
48250: PLUS
48251: PUSH
48252: LD_VAR 0 2
48256: PUSH
48257: LD_INT 4
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: PUSH
48265: LD_VAR 0 1
48269: PUSH
48270: LD_VAR 0 2
48274: PUSH
48275: LD_INT 4
48277: PLUS
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: PUSH
48287: LD_VAR 0 1
48291: PUSH
48292: LD_INT 3
48294: MINUS
48295: PUSH
48296: LD_VAR 0 2
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: PUSH
48309: LD_VAR 0 1
48313: PUSH
48314: LD_INT 4
48316: MINUS
48317: PUSH
48318: LD_VAR 0 2
48322: PUSH
48323: LD_INT 4
48325: MINUS
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: LIST
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: ST_TO_ADDR
// end ; 3 :
48342: GO 48764
48344: LD_INT 3
48346: DOUBLE
48347: EQUAL
48348: IFTRUE 48352
48350: GO 48485
48352: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48353: LD_ADDR_VAR 0 5
48357: PUSH
48358: LD_VAR 0 1
48362: PUSH
48363: LD_INT 3
48365: PLUS
48366: PUSH
48367: LD_VAR 0 2
48371: PUSH
48372: LD_INT 4
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: PUSH
48380: LD_VAR 0 1
48384: PUSH
48385: LD_INT 4
48387: PLUS
48388: PUSH
48389: LD_VAR 0 2
48393: PUSH
48394: LD_INT 4
48396: PLUS
48397: PUSH
48398: LD_INT 5
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: PUSH
48406: LD_VAR 0 1
48410: PUSH
48411: LD_INT 4
48413: MINUS
48414: PUSH
48415: LD_VAR 0 2
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: PUSH
48428: LD_VAR 0 1
48432: PUSH
48433: LD_VAR 0 2
48437: PUSH
48438: LD_INT 4
48440: MINUS
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: LIST
48449: PUSH
48450: LD_VAR 0 1
48454: PUSH
48455: LD_INT 3
48457: MINUS
48458: PUSH
48459: LD_VAR 0 2
48463: PUSH
48464: LD_INT 3
48466: MINUS
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: ST_TO_ADDR
// end ; 4 :
48483: GO 48764
48485: LD_INT 4
48487: DOUBLE
48488: EQUAL
48489: IFTRUE 48493
48491: GO 48626
48493: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48494: LD_ADDR_VAR 0 5
48498: PUSH
48499: LD_VAR 0 1
48503: PUSH
48504: LD_VAR 0 2
48508: PUSH
48509: LD_INT 4
48511: PLUS
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: PUSH
48521: LD_VAR 0 1
48525: PUSH
48526: LD_INT 3
48528: PLUS
48529: PUSH
48530: LD_VAR 0 2
48534: PUSH
48535: LD_INT 3
48537: PLUS
48538: PUSH
48539: LD_INT 5
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: PUSH
48547: LD_VAR 0 1
48551: PUSH
48552: LD_INT 4
48554: PLUS
48555: PUSH
48556: LD_VAR 0 2
48560: PUSH
48561: LD_INT 4
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: PUSH
48569: LD_VAR 0 1
48573: PUSH
48574: LD_VAR 0 2
48578: PUSH
48579: LD_INT 3
48581: MINUS
48582: PUSH
48583: LD_INT 3
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: PUSH
48591: LD_VAR 0 1
48595: PUSH
48596: LD_INT 4
48598: MINUS
48599: PUSH
48600: LD_VAR 0 2
48604: PUSH
48605: LD_INT 4
48607: MINUS
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: ST_TO_ADDR
// end ; 5 :
48624: GO 48764
48626: LD_INT 5
48628: DOUBLE
48629: EQUAL
48630: IFTRUE 48634
48632: GO 48763
48634: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48635: LD_ADDR_VAR 0 5
48639: PUSH
48640: LD_VAR 0 1
48644: PUSH
48645: LD_INT 4
48647: MINUS
48648: PUSH
48649: LD_VAR 0 2
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: PUSH
48662: LD_VAR 0 1
48666: PUSH
48667: LD_VAR 0 2
48671: PUSH
48672: LD_INT 4
48674: MINUS
48675: PUSH
48676: LD_INT 3
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: LIST
48683: PUSH
48684: LD_VAR 0 1
48688: PUSH
48689: LD_INT 4
48691: PLUS
48692: PUSH
48693: LD_VAR 0 2
48697: PUSH
48698: LD_INT 4
48700: PLUS
48701: PUSH
48702: LD_INT 5
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: LIST
48709: PUSH
48710: LD_VAR 0 1
48714: PUSH
48715: LD_INT 3
48717: PLUS
48718: PUSH
48719: LD_VAR 0 2
48723: PUSH
48724: LD_INT 4
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: LIST
48731: PUSH
48732: LD_VAR 0 1
48736: PUSH
48737: LD_VAR 0 2
48741: PUSH
48742: LD_INT 3
48744: PLUS
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// end ; end ;
48761: GO 48764
48763: POP
// result := list ;
48764: LD_ADDR_VAR 0 4
48768: PUSH
48769: LD_VAR 0 5
48773: ST_TO_ADDR
// end ;
48774: LD_VAR 0 4
48778: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48779: LD_INT 0
48781: PPUSH
48782: PPUSH
48783: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48784: LD_VAR 0 1
48788: NOT
48789: IFTRUE 48817
48791: PUSH
48792: LD_VAR 0 2
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 3
48805: PUSH
48806: LD_INT 4
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: IN
48815: NOT
48816: OR
48817: IFFALSE 48821
// exit ;
48819: GO 48904
// tmp := [ ] ;
48821: LD_ADDR_VAR 0 5
48825: PUSH
48826: EMPTY
48827: ST_TO_ADDR
// for i in units do
48828: LD_ADDR_VAR 0 4
48832: PUSH
48833: LD_VAR 0 1
48837: PUSH
48838: FOR_IN
48839: IFFALSE 48873
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
48841: LD_ADDR_VAR 0 5
48845: PUSH
48846: LD_VAR 0 5
48850: PPUSH
48851: LD_VAR 0 4
48855: PPUSH
48856: LD_VAR 0 2
48860: PPUSH
48861: CALL_OW 259
48865: PPUSH
48866: CALL 50299 0 2
48870: ST_TO_ADDR
48871: GO 48838
48873: POP
48874: POP
// if not tmp then
48875: LD_VAR 0 5
48879: NOT
48880: IFFALSE 48884
// exit ;
48882: GO 48904
// result := SortListByListDesc ( units , tmp ) ;
48884: LD_ADDR_VAR 0 3
48888: PUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: LD_VAR 0 5
48898: PPUSH
48899: CALL_OW 77
48903: ST_TO_ADDR
// end ;
48904: LD_VAR 0 3
48908: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48909: LD_INT 0
48911: PPUSH
48912: PPUSH
48913: PPUSH
// result := false ;
48914: LD_ADDR_VAR 0 3
48918: PUSH
48919: LD_INT 0
48921: ST_TO_ADDR
// if not building then
48922: LD_VAR 0 2
48926: NOT
48927: IFFALSE 48931
// exit ;
48929: GO 49075
// x := GetX ( building ) ;
48931: LD_ADDR_VAR 0 4
48935: PUSH
48936: LD_VAR 0 2
48940: PPUSH
48941: CALL_OW 250
48945: ST_TO_ADDR
// y := GetY ( building ) ;
48946: LD_ADDR_VAR 0 5
48950: PUSH
48951: LD_VAR 0 2
48955: PPUSH
48956: CALL_OW 251
48960: ST_TO_ADDR
// if not x or not y then
48961: LD_VAR 0 4
48965: NOT
48966: IFTRUE 48975
48968: PUSH
48969: LD_VAR 0 5
48973: NOT
48974: OR
48975: IFFALSE 48979
// exit ;
48977: GO 49075
// if GetTaskList ( unit ) then
48979: LD_VAR 0 1
48983: PPUSH
48984: CALL_OW 437
48988: IFFALSE 49075
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48990: LD_STRING e
48992: PUSH
48993: LD_VAR 0 1
48997: PPUSH
48998: CALL_OW 437
49002: PUSH
49003: LD_INT 1
49005: ARRAY
49006: PUSH
49007: LD_INT 1
49009: ARRAY
49010: EQUAL
49011: IFFALSE 49038
49013: PUSH
49014: LD_VAR 0 4
49018: PUSH
49019: LD_VAR 0 1
49023: PPUSH
49024: CALL_OW 437
49028: PUSH
49029: LD_INT 1
49031: ARRAY
49032: PUSH
49033: LD_INT 2
49035: ARRAY
49036: EQUAL
49037: AND
49038: IFFALSE 49065
49040: PUSH
49041: LD_VAR 0 5
49045: PUSH
49046: LD_VAR 0 1
49050: PPUSH
49051: CALL_OW 437
49055: PUSH
49056: LD_INT 1
49058: ARRAY
49059: PUSH
49060: LD_INT 3
49062: ARRAY
49063: EQUAL
49064: AND
49065: IFFALSE 49075
// result := true end ;
49067: LD_ADDR_VAR 0 3
49071: PUSH
49072: LD_INT 1
49074: ST_TO_ADDR
// end ;
49075: LD_VAR 0 3
49079: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
49080: LD_INT 0
49082: PPUSH
// result := false ;
49083: LD_ADDR_VAR 0 4
49087: PUSH
49088: LD_INT 0
49090: ST_TO_ADDR
// if GetTaskList ( unit ) then
49091: LD_VAR 0 1
49095: PPUSH
49096: CALL_OW 437
49100: IFFALSE 49187
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49102: LD_STRING M
49104: PUSH
49105: LD_VAR 0 1
49109: PPUSH
49110: CALL_OW 437
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: PUSH
49119: LD_INT 1
49121: ARRAY
49122: EQUAL
49123: IFFALSE 49150
49125: PUSH
49126: LD_VAR 0 2
49130: PUSH
49131: LD_VAR 0 1
49135: PPUSH
49136: CALL_OW 437
49140: PUSH
49141: LD_INT 1
49143: ARRAY
49144: PUSH
49145: LD_INT 2
49147: ARRAY
49148: EQUAL
49149: AND
49150: IFFALSE 49177
49152: PUSH
49153: LD_VAR 0 3
49157: PUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 437
49167: PUSH
49168: LD_INT 1
49170: ARRAY
49171: PUSH
49172: LD_INT 3
49174: ARRAY
49175: EQUAL
49176: AND
49177: IFFALSE 49187
// result := true ;
49179: LD_ADDR_VAR 0 4
49183: PUSH
49184: LD_INT 1
49186: ST_TO_ADDR
// end ; end ;
49187: LD_VAR 0 4
49191: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49192: LD_INT 0
49194: PPUSH
49195: PPUSH
49196: PPUSH
49197: PPUSH
// if not unit or not area then
49198: LD_VAR 0 1
49202: NOT
49203: IFTRUE 49212
49205: PUSH
49206: LD_VAR 0 2
49210: NOT
49211: OR
49212: IFFALSE 49216
// exit ;
49214: GO 49392
// tmp := AreaToList ( area , i ) ;
49216: LD_ADDR_VAR 0 6
49220: PUSH
49221: LD_VAR 0 2
49225: PPUSH
49226: LD_VAR 0 5
49230: PPUSH
49231: CALL_OW 517
49235: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49236: LD_ADDR_VAR 0 5
49240: PUSH
49241: DOUBLE
49242: LD_INT 1
49244: DEC
49245: ST_TO_ADDR
49246: LD_VAR 0 6
49250: PUSH
49251: LD_INT 1
49253: ARRAY
49254: PUSH
49255: FOR_TO
49256: IFFALSE 49390
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49258: LD_ADDR_VAR 0 7
49262: PUSH
49263: LD_VAR 0 6
49267: PUSH
49268: LD_INT 1
49270: ARRAY
49271: PUSH
49272: LD_VAR 0 5
49276: ARRAY
49277: PUSH
49278: LD_VAR 0 6
49282: PUSH
49283: LD_INT 2
49285: ARRAY
49286: PUSH
49287: LD_VAR 0 5
49291: ARRAY
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
49297: LD_INT 92
49299: PUSH
49300: LD_VAR 0 7
49304: PUSH
49305: LD_INT 1
49307: ARRAY
49308: PUSH
49309: LD_VAR 0 7
49313: PUSH
49314: LD_INT 2
49316: ARRAY
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: PPUSH
49327: CALL_OW 69
49331: PUSH
49332: LD_INT 0
49334: EQUAL
49335: IFFALSE 49388
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49337: LD_VAR 0 1
49341: PPUSH
49342: LD_VAR 0 7
49346: PUSH
49347: LD_INT 1
49349: ARRAY
49350: PPUSH
49351: LD_VAR 0 7
49355: PUSH
49356: LD_INT 2
49358: ARRAY
49359: PPUSH
49360: LD_VAR 0 3
49364: PPUSH
49365: CALL_OW 48
// result := IsPlaced ( unit ) ;
49369: LD_ADDR_VAR 0 4
49373: PUSH
49374: LD_VAR 0 1
49378: PPUSH
49379: CALL_OW 305
49383: ST_TO_ADDR
// exit ;
49384: POP
49385: POP
49386: GO 49392
// end ; end ;
49388: GO 49255
49390: POP
49391: POP
// end ;
49392: LD_VAR 0 4
49396: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49397: LD_INT 0
49399: PPUSH
49400: PPUSH
49401: PPUSH
// if not side or side > 8 then
49402: LD_VAR 0 1
49406: NOT
49407: IFTRUE 49419
49409: PUSH
49410: LD_VAR 0 1
49414: PUSH
49415: LD_INT 8
49417: GREATER
49418: OR
49419: IFFALSE 49423
// exit ;
49421: GO 49610
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49423: LD_ADDR_VAR 0 4
49427: PUSH
49428: LD_INT 22
49430: PUSH
49431: LD_VAR 0 1
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 21
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PPUSH
49454: CALL_OW 69
49458: ST_TO_ADDR
// if not tmp then
49459: LD_VAR 0 4
49463: NOT
49464: IFFALSE 49468
// exit ;
49466: GO 49610
// enable_addtolog := true ;
49468: LD_ADDR_OWVAR 81
49472: PUSH
49473: LD_INT 1
49475: ST_TO_ADDR
// AddToLog ( [ ) ;
49476: LD_STRING [
49478: PPUSH
49479: CALL_OW 561
// for i in tmp do
49483: LD_ADDR_VAR 0 3
49487: PUSH
49488: LD_VAR 0 4
49492: PUSH
49493: FOR_IN
49494: IFFALSE 49601
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49496: LD_STRING [
49498: PUSH
49499: LD_VAR 0 3
49503: PPUSH
49504: CALL_OW 266
49508: STR
49509: PUSH
49510: LD_STRING , 
49512: STR
49513: PUSH
49514: LD_VAR 0 3
49518: PPUSH
49519: CALL_OW 250
49523: STR
49524: PUSH
49525: LD_STRING , 
49527: STR
49528: PUSH
49529: LD_VAR 0 3
49533: PPUSH
49534: CALL_OW 251
49538: STR
49539: PUSH
49540: LD_STRING , 
49542: STR
49543: PUSH
49544: LD_VAR 0 3
49548: PPUSH
49549: CALL_OW 254
49553: STR
49554: PUSH
49555: LD_STRING , 
49557: STR
49558: PUSH
49559: LD_VAR 0 3
49563: PPUSH
49564: LD_INT 1
49566: PPUSH
49567: CALL_OW 268
49571: STR
49572: PUSH
49573: LD_STRING , 
49575: STR
49576: PUSH
49577: LD_VAR 0 3
49581: PPUSH
49582: LD_INT 2
49584: PPUSH
49585: CALL_OW 268
49589: STR
49590: PUSH
49591: LD_STRING ],
49593: STR
49594: PPUSH
49595: CALL_OW 561
// end ;
49599: GO 49493
49601: POP
49602: POP
// AddToLog ( ]; ) ;
49603: LD_STRING ];
49605: PPUSH
49606: CALL_OW 561
// end ;
49610: LD_VAR 0 2
49614: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49615: LD_INT 0
49617: PPUSH
49618: PPUSH
49619: PPUSH
49620: PPUSH
49621: PPUSH
// if not area or not rate or not max then
49622: LD_VAR 0 1
49626: NOT
49627: IFTRUE 49636
49629: PUSH
49630: LD_VAR 0 2
49634: NOT
49635: OR
49636: IFTRUE 49645
49638: PUSH
49639: LD_VAR 0 4
49643: NOT
49644: OR
49645: IFFALSE 49649
// exit ;
49647: GO 49838
// while 1 do
49649: LD_INT 1
49651: IFFALSE 49838
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49653: LD_ADDR_VAR 0 9
49657: PUSH
49658: LD_VAR 0 1
49662: PPUSH
49663: LD_INT 1
49665: PPUSH
49666: CALL_OW 287
49670: PUSH
49671: LD_INT 10
49673: MUL
49674: ST_TO_ADDR
// r := rate / 10 ;
49675: LD_ADDR_VAR 0 7
49679: PUSH
49680: LD_VAR 0 2
49684: PUSH
49685: LD_INT 10
49687: DIVREAL
49688: ST_TO_ADDR
// time := 1 1$00 ;
49689: LD_ADDR_VAR 0 8
49693: PUSH
49694: LD_INT 2100
49696: ST_TO_ADDR
// if amount < min then
49697: LD_VAR 0 9
49701: PUSH
49702: LD_VAR 0 3
49706: LESS
49707: IFFALSE 49725
// r := r * 2 else
49709: LD_ADDR_VAR 0 7
49713: PUSH
49714: LD_VAR 0 7
49718: PUSH
49719: LD_INT 2
49721: MUL
49722: ST_TO_ADDR
49723: GO 49751
// if amount > max then
49725: LD_VAR 0 9
49729: PUSH
49730: LD_VAR 0 4
49734: GREATER
49735: IFFALSE 49751
// r := r / 2 ;
49737: LD_ADDR_VAR 0 7
49741: PUSH
49742: LD_VAR 0 7
49746: PUSH
49747: LD_INT 2
49749: DIVREAL
49750: ST_TO_ADDR
// time := time / r ;
49751: LD_ADDR_VAR 0 8
49755: PUSH
49756: LD_VAR 0 8
49760: PUSH
49761: LD_VAR 0 7
49765: DIVREAL
49766: ST_TO_ADDR
// if time < 0 then
49767: LD_VAR 0 8
49771: PUSH
49772: LD_INT 0
49774: LESS
49775: IFFALSE 49792
// time := time * - 1 ;
49777: LD_ADDR_VAR 0 8
49781: PUSH
49782: LD_VAR 0 8
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: MUL
49791: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49792: LD_VAR 0 8
49796: PUSH
49797: LD_INT 35
49799: PPUSH
49800: LD_INT 875
49802: PPUSH
49803: CALL_OW 12
49807: PLUS
49808: PPUSH
49809: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49813: LD_INT 1
49815: PPUSH
49816: LD_INT 5
49818: PPUSH
49819: CALL_OW 12
49823: PPUSH
49824: LD_VAR 0 1
49828: PPUSH
49829: LD_INT 1
49831: PPUSH
49832: CALL_OW 55
// end ;
49836: GO 49649
// end ;
49838: LD_VAR 0 5
49842: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49843: LD_INT 0
49845: PPUSH
49846: PPUSH
49847: PPUSH
49848: PPUSH
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
// if not turrets or not factories then
49853: LD_VAR 0 1
49857: NOT
49858: IFTRUE 49867
49860: PUSH
49861: LD_VAR 0 2
49865: NOT
49866: OR
49867: IFFALSE 49871
// exit ;
49869: GO 50178
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49871: LD_ADDR_VAR 0 10
49875: PUSH
49876: LD_INT 5
49878: PUSH
49879: LD_INT 6
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 4
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 5
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 24
49913: PUSH
49914: LD_INT 25
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 23
49923: PUSH
49924: LD_INT 27
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 42
49937: PUSH
49938: LD_INT 43
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 44
49947: PUSH
49948: LD_INT 46
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 45
49957: PUSH
49958: LD_INT 47
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// result := [ ] ;
49975: LD_ADDR_VAR 0 3
49979: PUSH
49980: EMPTY
49981: ST_TO_ADDR
// for i in turrets do
49982: LD_ADDR_VAR 0 4
49986: PUSH
49987: LD_VAR 0 1
49991: PUSH
49992: FOR_IN
49993: IFFALSE 50176
// begin nat := GetNation ( i ) ;
49995: LD_ADDR_VAR 0 7
49999: PUSH
50000: LD_VAR 0 4
50004: PPUSH
50005: CALL_OW 248
50009: ST_TO_ADDR
// weapon := 0 ;
50010: LD_ADDR_VAR 0 8
50014: PUSH
50015: LD_INT 0
50017: ST_TO_ADDR
// if not nat then
50018: LD_VAR 0 7
50022: NOT
50023: IFFALSE 50027
// continue ;
50025: GO 49992
// for j in list [ nat ] do
50027: LD_ADDR_VAR 0 5
50031: PUSH
50032: LD_VAR 0 10
50036: PUSH
50037: LD_VAR 0 7
50041: ARRAY
50042: PUSH
50043: FOR_IN
50044: IFFALSE 50085
// if GetBWeapon ( i ) = j [ 1 ] then
50046: LD_VAR 0 4
50050: PPUSH
50051: CALL_OW 269
50055: PUSH
50056: LD_VAR 0 5
50060: PUSH
50061: LD_INT 1
50063: ARRAY
50064: EQUAL
50065: IFFALSE 50083
// begin weapon := j [ 2 ] ;
50067: LD_ADDR_VAR 0 8
50071: PUSH
50072: LD_VAR 0 5
50076: PUSH
50077: LD_INT 2
50079: ARRAY
50080: ST_TO_ADDR
// break ;
50081: GO 50085
// end ;
50083: GO 50043
50085: POP
50086: POP
// if not weapon then
50087: LD_VAR 0 8
50091: NOT
50092: IFFALSE 50096
// continue ;
50094: GO 49992
// for k in factories do
50096: LD_ADDR_VAR 0 6
50100: PUSH
50101: LD_VAR 0 2
50105: PUSH
50106: FOR_IN
50107: IFFALSE 50172
// begin weapons := AvailableWeaponList ( k ) ;
50109: LD_ADDR_VAR 0 9
50113: PUSH
50114: LD_VAR 0 6
50118: PPUSH
50119: CALL_OW 478
50123: ST_TO_ADDR
// if not weapons then
50124: LD_VAR 0 9
50128: NOT
50129: IFFALSE 50133
// continue ;
50131: GO 50106
// if weapon in weapons then
50133: LD_VAR 0 8
50137: PUSH
50138: LD_VAR 0 9
50142: IN
50143: IFFALSE 50170
// begin result := [ i , weapon ] ;
50145: LD_ADDR_VAR 0 3
50149: PUSH
50150: LD_VAR 0 4
50154: PUSH
50155: LD_VAR 0 8
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: ST_TO_ADDR
// exit ;
50164: POP
50165: POP
50166: POP
50167: POP
50168: GO 50178
// end ; end ;
50170: GO 50106
50172: POP
50173: POP
// end ;
50174: GO 49992
50176: POP
50177: POP
// end ;
50178: LD_VAR 0 3
50182: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50183: LD_INT 0
50185: PPUSH
// if not side or side > 8 then
50186: LD_VAR 0 3
50190: NOT
50191: IFTRUE 50203
50193: PUSH
50194: LD_VAR 0 3
50198: PUSH
50199: LD_INT 8
50201: GREATER
50202: OR
50203: IFFALSE 50207
// exit ;
50205: GO 50266
// if not range then
50207: LD_VAR 0 4
50211: NOT
50212: IFFALSE 50223
// range := - 12 ;
50214: LD_ADDR_VAR 0 4
50218: PUSH
50219: LD_INT 12
50221: NEG
50222: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50223: LD_VAR 0 1
50227: PPUSH
50228: LD_VAR 0 2
50232: PPUSH
50233: LD_VAR 0 3
50237: PPUSH
50238: LD_VAR 0 4
50242: PPUSH
50243: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 2
50256: PPUSH
50257: LD_VAR 0 3
50261: PPUSH
50262: CALL_OW 331
// end ;
50266: LD_VAR 0 5
50270: RET
// export function Video ( mode ) ; begin
50271: LD_INT 0
50273: PPUSH
// ingame_video = mode ;
50274: LD_ADDR_OWVAR 52
50278: PUSH
50279: LD_VAR 0 1
50283: ST_TO_ADDR
// interface_hidden = mode ;
50284: LD_ADDR_OWVAR 54
50288: PUSH
50289: LD_VAR 0 1
50293: ST_TO_ADDR
// end ;
50294: LD_VAR 0 2
50298: RET
// export function Join ( array , element ) ; begin
50299: LD_INT 0
50301: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50302: LD_ADDR_VAR 0 3
50306: PUSH
50307: LD_VAR 0 1
50311: PPUSH
50312: LD_VAR 0 1
50316: PUSH
50317: LD_INT 1
50319: PLUS
50320: PPUSH
50321: LD_VAR 0 2
50325: PPUSH
50326: CALL_OW 1
50330: ST_TO_ADDR
// end ;
50331: LD_VAR 0 3
50335: RET
// export function JoinUnion ( array , element ) ; begin
50336: LD_INT 0
50338: PPUSH
// result := array union element ;
50339: LD_ADDR_VAR 0 3
50343: PUSH
50344: LD_VAR 0 1
50348: PUSH
50349: LD_VAR 0 2
50353: UNION
50354: ST_TO_ADDR
// end ;
50355: LD_VAR 0 3
50359: RET
// export function GetBehemoths ( side ) ; begin
50360: LD_INT 0
50362: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
50363: LD_ADDR_VAR 0 2
50367: PUSH
50368: LD_INT 22
50370: PUSH
50371: LD_VAR 0 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 31
50382: PUSH
50383: LD_INT 25
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PPUSH
50394: CALL_OW 69
50398: ST_TO_ADDR
// end ;
50399: LD_VAR 0 2
50403: RET
// export function Shuffle ( array ) ; var i , index ; begin
50404: LD_INT 0
50406: PPUSH
50407: PPUSH
50408: PPUSH
// result := [ ] ;
50409: LD_ADDR_VAR 0 2
50413: PUSH
50414: EMPTY
50415: ST_TO_ADDR
// if not array then
50416: LD_VAR 0 1
50420: NOT
50421: IFFALSE 50425
// exit ;
50423: GO 50524
// Randomize ;
50425: CALL_OW 10
// for i = array downto 1 do
50429: LD_ADDR_VAR 0 3
50433: PUSH
50434: DOUBLE
50435: LD_VAR 0 1
50439: INC
50440: ST_TO_ADDR
50441: LD_INT 1
50443: PUSH
50444: FOR_DOWNTO
50445: IFFALSE 50522
// begin index := rand ( 1 , array ) ;
50447: LD_ADDR_VAR 0 4
50451: PUSH
50452: LD_INT 1
50454: PPUSH
50455: LD_VAR 0 1
50459: PPUSH
50460: CALL_OW 12
50464: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50465: LD_ADDR_VAR 0 2
50469: PUSH
50470: LD_VAR 0 2
50474: PPUSH
50475: LD_VAR 0 2
50479: PUSH
50480: LD_INT 1
50482: PLUS
50483: PPUSH
50484: LD_VAR 0 1
50488: PUSH
50489: LD_VAR 0 4
50493: ARRAY
50494: PPUSH
50495: CALL_OW 2
50499: ST_TO_ADDR
// array := Delete ( array , index ) ;
50500: LD_ADDR_VAR 0 1
50504: PUSH
50505: LD_VAR 0 1
50509: PPUSH
50510: LD_VAR 0 4
50514: PPUSH
50515: CALL_OW 3
50519: ST_TO_ADDR
// end ;
50520: GO 50444
50522: POP
50523: POP
// end ;
50524: LD_VAR 0 2
50528: RET
// export function GetBaseMaterials ( base ) ; begin
50529: LD_INT 0
50531: PPUSH
// result := [ 0 , 0 , 0 ] ;
50532: LD_ADDR_VAR 0 2
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// if not base then
50551: LD_VAR 0 1
50555: NOT
50556: IFFALSE 50560
// exit ;
50558: GO 50609
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50560: LD_ADDR_VAR 0 2
50564: PUSH
50565: LD_VAR 0 1
50569: PPUSH
50570: LD_INT 1
50572: PPUSH
50573: CALL_OW 275
50577: PUSH
50578: LD_VAR 0 1
50582: PPUSH
50583: LD_INT 2
50585: PPUSH
50586: CALL_OW 275
50590: PUSH
50591: LD_VAR 0 1
50595: PPUSH
50596: LD_INT 3
50598: PPUSH
50599: CALL_OW 275
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: ST_TO_ADDR
// end ;
50609: LD_VAR 0 2
50613: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50614: LD_INT 0
50616: PPUSH
50617: PPUSH
// result := array ;
50618: LD_ADDR_VAR 0 3
50622: PUSH
50623: LD_VAR 0 1
50627: ST_TO_ADDR
// if size >= result then
50628: LD_VAR 0 2
50632: PUSH
50633: LD_VAR 0 3
50637: GREATEREQUAL
50638: IFFALSE 50642
// exit ;
50640: GO 50692
// if size then
50642: LD_VAR 0 2
50646: IFFALSE 50692
// for i := array downto size do
50648: LD_ADDR_VAR 0 4
50652: PUSH
50653: DOUBLE
50654: LD_VAR 0 1
50658: INC
50659: ST_TO_ADDR
50660: LD_VAR 0 2
50664: PUSH
50665: FOR_DOWNTO
50666: IFFALSE 50690
// result := Delete ( result , result ) ;
50668: LD_ADDR_VAR 0 3
50672: PUSH
50673: LD_VAR 0 3
50677: PPUSH
50678: LD_VAR 0 3
50682: PPUSH
50683: CALL_OW 3
50687: ST_TO_ADDR
50688: GO 50665
50690: POP
50691: POP
// end ;
50692: LD_VAR 0 3
50696: RET
// export function ComExit ( unit ) ; var tmp ; begin
50697: LD_INT 0
50699: PPUSH
50700: PPUSH
// if not IsInUnit ( unit ) then
50701: LD_VAR 0 1
50705: PPUSH
50706: CALL_OW 310
50710: NOT
50711: IFFALSE 50715
// exit ;
50713: GO 50775
// tmp := IsInUnit ( unit ) ;
50715: LD_ADDR_VAR 0 3
50719: PUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: CALL_OW 310
50729: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50730: LD_VAR 0 3
50734: PPUSH
50735: CALL_OW 247
50739: PUSH
50740: LD_INT 2
50742: EQUAL
50743: IFFALSE 50756
// ComExitVehicle ( unit ) else
50745: LD_VAR 0 1
50749: PPUSH
50750: CALL_OW 121
50754: GO 50765
// ComExitBuilding ( unit ) ;
50756: LD_VAR 0 1
50760: PPUSH
50761: CALL_OW 122
// result := tmp ;
50765: LD_ADDR_VAR 0 2
50769: PUSH
50770: LD_VAR 0 3
50774: ST_TO_ADDR
// end ;
50775: LD_VAR 0 2
50779: RET
// export function ComExitAll ( units ) ; var i ; begin
50780: LD_INT 0
50782: PPUSH
50783: PPUSH
// if not units then
50784: LD_VAR 0 1
50788: NOT
50789: IFFALSE 50793
// exit ;
50791: GO 50819
// for i in units do
50793: LD_ADDR_VAR 0 3
50797: PUSH
50798: LD_VAR 0 1
50802: PUSH
50803: FOR_IN
50804: IFFALSE 50817
// ComExit ( i ) ;
50806: LD_VAR 0 3
50810: PPUSH
50811: CALL 50697 0 1
50815: GO 50803
50817: POP
50818: POP
// end ;
50819: LD_VAR 0 2
50823: RET
// export function ResetHc ; begin
50824: LD_INT 0
50826: PPUSH
// InitHc ;
50827: CALL_OW 19
// hc_importance := 0 ;
50831: LD_ADDR_OWVAR 32
50835: PUSH
50836: LD_INT 0
50838: ST_TO_ADDR
// end ;
50839: LD_VAR 0 1
50843: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50844: LD_INT 0
50846: PPUSH
50847: PPUSH
50848: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50849: LD_ADDR_VAR 0 6
50853: PUSH
50854: LD_VAR 0 1
50858: PUSH
50859: LD_VAR 0 3
50863: PLUS
50864: PUSH
50865: LD_INT 2
50867: DIV
50868: ST_TO_ADDR
// if _x < 0 then
50869: LD_VAR 0 6
50873: PUSH
50874: LD_INT 0
50876: LESS
50877: IFFALSE 50894
// _x := _x * - 1 ;
50879: LD_ADDR_VAR 0 6
50883: PUSH
50884: LD_VAR 0 6
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: MUL
50893: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50894: LD_ADDR_VAR 0 7
50898: PUSH
50899: LD_VAR 0 2
50903: PUSH
50904: LD_VAR 0 4
50908: PLUS
50909: PUSH
50910: LD_INT 2
50912: DIV
50913: ST_TO_ADDR
// if _y < 0 then
50914: LD_VAR 0 7
50918: PUSH
50919: LD_INT 0
50921: LESS
50922: IFFALSE 50939
// _y := _y * - 1 ;
50924: LD_ADDR_VAR 0 7
50928: PUSH
50929: LD_VAR 0 7
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: MUL
50938: ST_TO_ADDR
// result := [ _x , _y ] ;
50939: LD_ADDR_VAR 0 5
50943: PUSH
50944: LD_VAR 0 6
50948: PUSH
50949: LD_VAR 0 7
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// end ;
50958: LD_VAR 0 5
50962: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50963: LD_INT 0
50965: PPUSH
50966: PPUSH
50967: PPUSH
50968: PPUSH
// task := GetTaskList ( unit ) ;
50969: LD_ADDR_VAR 0 7
50973: PUSH
50974: LD_VAR 0 1
50978: PPUSH
50979: CALL_OW 437
50983: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50984: LD_VAR 0 7
50988: NOT
50989: IFFALSE 51008
50991: PUSH
50992: LD_VAR 0 1
50996: PPUSH
50997: LD_VAR 0 2
51001: PPUSH
51002: CALL_OW 308
51006: NOT
51007: AND
51008: IFFALSE 51012
// exit ;
51010: GO 51130
// if IsInArea ( unit , area ) then
51012: LD_VAR 0 1
51016: PPUSH
51017: LD_VAR 0 2
51021: PPUSH
51022: CALL_OW 308
51026: IFFALSE 51044
// begin ComMoveToArea ( unit , goAway ) ;
51028: LD_VAR 0 1
51032: PPUSH
51033: LD_VAR 0 3
51037: PPUSH
51038: CALL_OW 113
// exit ;
51042: GO 51130
// end ; if task [ 1 ] [ 1 ] <> M then
51044: LD_VAR 0 7
51048: PUSH
51049: LD_INT 1
51051: ARRAY
51052: PUSH
51053: LD_INT 1
51055: ARRAY
51056: PUSH
51057: LD_STRING M
51059: NONEQUAL
51060: IFFALSE 51064
// exit ;
51062: GO 51130
// x := task [ 1 ] [ 2 ] ;
51064: LD_ADDR_VAR 0 5
51068: PUSH
51069: LD_VAR 0 7
51073: PUSH
51074: LD_INT 1
51076: ARRAY
51077: PUSH
51078: LD_INT 2
51080: ARRAY
51081: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51082: LD_ADDR_VAR 0 6
51086: PUSH
51087: LD_VAR 0 7
51091: PUSH
51092: LD_INT 1
51094: ARRAY
51095: PUSH
51096: LD_INT 3
51098: ARRAY
51099: ST_TO_ADDR
// if InArea ( x , y , area ) then
51100: LD_VAR 0 5
51104: PPUSH
51105: LD_VAR 0 6
51109: PPUSH
51110: LD_VAR 0 2
51114: PPUSH
51115: CALL_OW 309
51119: IFFALSE 51130
// ComStop ( unit ) ;
51121: LD_VAR 0 1
51125: PPUSH
51126: CALL_OW 141
// end ;
51130: LD_VAR 0 4
51134: RET
// export function Abs ( value ) ; begin
51135: LD_INT 0
51137: PPUSH
// result := value ;
51138: LD_ADDR_VAR 0 2
51142: PUSH
51143: LD_VAR 0 1
51147: ST_TO_ADDR
// if value < 0 then
51148: LD_VAR 0 1
51152: PUSH
51153: LD_INT 0
51155: LESS
51156: IFFALSE 51173
// result := value * - 1 ;
51158: LD_ADDR_VAR 0 2
51162: PUSH
51163: LD_VAR 0 1
51167: PUSH
51168: LD_INT 1
51170: NEG
51171: MUL
51172: ST_TO_ADDR
// end ;
51173: LD_VAR 0 2
51177: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51178: LD_INT 0
51180: PPUSH
51181: PPUSH
51182: PPUSH
51183: PPUSH
51184: PPUSH
51185: PPUSH
51186: PPUSH
51187: PPUSH
// if not unit or not building then
51188: LD_VAR 0 1
51192: NOT
51193: IFTRUE 51202
51195: PUSH
51196: LD_VAR 0 2
51200: NOT
51201: OR
51202: IFFALSE 51206
// exit ;
51204: GO 51434
// x := GetX ( building ) ;
51206: LD_ADDR_VAR 0 4
51210: PUSH
51211: LD_VAR 0 2
51215: PPUSH
51216: CALL_OW 250
51220: ST_TO_ADDR
// y := GetY ( building ) ;
51221: LD_ADDR_VAR 0 6
51225: PUSH
51226: LD_VAR 0 2
51230: PPUSH
51231: CALL_OW 251
51235: ST_TO_ADDR
// d := GetDir ( building ) ;
51236: LD_ADDR_VAR 0 8
51240: PUSH
51241: LD_VAR 0 2
51245: PPUSH
51246: CALL_OW 254
51250: ST_TO_ADDR
// r := 4 ;
51251: LD_ADDR_VAR 0 9
51255: PUSH
51256: LD_INT 4
51258: ST_TO_ADDR
// for i := 1 to 5 do
51259: LD_ADDR_VAR 0 10
51263: PUSH
51264: DOUBLE
51265: LD_INT 1
51267: DEC
51268: ST_TO_ADDR
51269: LD_INT 5
51271: PUSH
51272: FOR_TO
51273: IFFALSE 51432
// begin _x := ShiftX ( x , d , r + i ) ;
51275: LD_ADDR_VAR 0 5
51279: PUSH
51280: LD_VAR 0 4
51284: PPUSH
51285: LD_VAR 0 8
51289: PPUSH
51290: LD_VAR 0 9
51294: PUSH
51295: LD_VAR 0 10
51299: PLUS
51300: PPUSH
51301: CALL_OW 272
51305: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51306: LD_ADDR_VAR 0 7
51310: PUSH
51311: LD_VAR 0 6
51315: PPUSH
51316: LD_VAR 0 8
51320: PPUSH
51321: LD_VAR 0 9
51325: PUSH
51326: LD_VAR 0 10
51330: PLUS
51331: PPUSH
51332: CALL_OW 273
51336: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51337: LD_VAR 0 5
51341: PPUSH
51342: LD_VAR 0 7
51346: PPUSH
51347: CALL_OW 488
51351: IFFALSE 51386
51353: PUSH
51354: LD_VAR 0 5
51358: PPUSH
51359: LD_VAR 0 7
51363: PPUSH
51364: CALL_OW 428
51368: PPUSH
51369: CALL_OW 247
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: IN
51384: NOT
51385: AND
51386: IFFALSE 51430
// begin ComMoveXY ( unit , _x , _y ) ;
51388: LD_VAR 0 1
51392: PPUSH
51393: LD_VAR 0 5
51397: PPUSH
51398: LD_VAR 0 7
51402: PPUSH
51403: CALL_OW 111
// result := [ _x , _y ] ;
51407: LD_ADDR_VAR 0 3
51411: PUSH
51412: LD_VAR 0 5
51416: PUSH
51417: LD_VAR 0 7
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// exit ;
51426: POP
51427: POP
51428: GO 51434
// end ; end ;
51430: GO 51272
51432: POP
51433: POP
// end ;
51434: LD_VAR 0 3
51438: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51439: LD_INT 0
51441: PPUSH
51442: PPUSH
51443: PPUSH
// result := 0 ;
51444: LD_ADDR_VAR 0 3
51448: PUSH
51449: LD_INT 0
51451: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51452: LD_VAR 0 1
51456: PUSH
51457: LD_INT 0
51459: LESS
51460: IFTRUE 51472
51462: PUSH
51463: LD_VAR 0 1
51467: PUSH
51468: LD_INT 8
51470: GREATER
51471: OR
51472: IFTRUE 51484
51474: PUSH
51475: LD_VAR 0 2
51479: PUSH
51480: LD_INT 0
51482: LESS
51483: OR
51484: IFTRUE 51496
51486: PUSH
51487: LD_VAR 0 2
51491: PUSH
51492: LD_INT 8
51494: GREATER
51495: OR
51496: IFFALSE 51500
// exit ;
51498: GO 51575
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51500: LD_ADDR_VAR 0 4
51504: PUSH
51505: LD_INT 22
51507: PUSH
51508: LD_VAR 0 2
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PPUSH
51517: CALL_OW 69
51521: PUSH
51522: FOR_IN
51523: IFFALSE 51573
// begin un := UnitShoot ( i ) ;
51525: LD_ADDR_VAR 0 5
51529: PUSH
51530: LD_VAR 0 4
51534: PPUSH
51535: CALL_OW 504
51539: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51540: LD_VAR 0 5
51544: PPUSH
51545: CALL_OW 255
51549: PUSH
51550: LD_VAR 0 1
51554: EQUAL
51555: IFFALSE 51571
// begin result := un ;
51557: LD_ADDR_VAR 0 3
51561: PUSH
51562: LD_VAR 0 5
51566: ST_TO_ADDR
// exit ;
51567: POP
51568: POP
51569: GO 51575
// end ; end ;
51571: GO 51522
51573: POP
51574: POP
// end ;
51575: LD_VAR 0 3
51579: RET
// export function GetCargoBay ( units ) ; begin
51580: LD_INT 0
51582: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51583: LD_ADDR_VAR 0 2
51587: PUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: LD_INT 2
51595: PUSH
51596: LD_INT 34
51598: PUSH
51599: LD_INT 12
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 34
51608: PUSH
51609: LD_INT 51
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 34
51618: PUSH
51619: LD_INT 32
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 34
51628: PUSH
51629: LD_INT 89
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: PPUSH
51643: CALL_OW 72
51647: ST_TO_ADDR
// end ;
51648: LD_VAR 0 2
51652: RET
// export function Negate ( value ) ; begin
51653: LD_INT 0
51655: PPUSH
// result := not value ;
51656: LD_ADDR_VAR 0 2
51660: PUSH
51661: LD_VAR 0 1
51665: NOT
51666: ST_TO_ADDR
// end ;
51667: LD_VAR 0 2
51671: RET
// export function Inc ( value ) ; begin
51672: LD_INT 0
51674: PPUSH
// result := value + 1 ;
51675: LD_ADDR_VAR 0 2
51679: PUSH
51680: LD_VAR 0 1
51684: PUSH
51685: LD_INT 1
51687: PLUS
51688: ST_TO_ADDR
// end ;
51689: LD_VAR 0 2
51693: RET
// export function Dec ( value ) ; begin
51694: LD_INT 0
51696: PPUSH
// result := value - 1 ;
51697: LD_ADDR_VAR 0 2
51701: PUSH
51702: LD_VAR 0 1
51706: PUSH
51707: LD_INT 1
51709: MINUS
51710: ST_TO_ADDR
// end ;
51711: LD_VAR 0 2
51715: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51716: LD_INT 0
51718: PPUSH
51719: PPUSH
51720: PPUSH
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
51725: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51726: LD_VAR 0 1
51730: PPUSH
51731: LD_VAR 0 2
51735: PPUSH
51736: CALL_OW 488
51740: NOT
51741: IFTRUE 51760
51743: PUSH
51744: LD_VAR 0 3
51748: PPUSH
51749: LD_VAR 0 4
51753: PPUSH
51754: CALL_OW 488
51758: NOT
51759: OR
51760: IFFALSE 51773
// begin result := - 1 ;
51762: LD_ADDR_VAR 0 5
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: ST_TO_ADDR
// exit ;
51771: GO 52008
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51773: LD_ADDR_VAR 0 12
51777: PUSH
51778: LD_VAR 0 1
51782: PPUSH
51783: LD_VAR 0 2
51787: PPUSH
51788: LD_VAR 0 3
51792: PPUSH
51793: LD_VAR 0 4
51797: PPUSH
51798: CALL 50844 0 4
51802: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51803: LD_ADDR_VAR 0 11
51807: PUSH
51808: LD_VAR 0 1
51812: PPUSH
51813: LD_VAR 0 2
51817: PPUSH
51818: LD_VAR 0 12
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: PPUSH
51827: LD_VAR 0 12
51831: PUSH
51832: LD_INT 2
51834: ARRAY
51835: PPUSH
51836: CALL_OW 298
51840: ST_TO_ADDR
// distance := 9999 ;
51841: LD_ADDR_VAR 0 10
51845: PUSH
51846: LD_INT 9999
51848: ST_TO_ADDR
// for i := 0 to 5 do
51849: LD_ADDR_VAR 0 6
51853: PUSH
51854: DOUBLE
51855: LD_INT 0
51857: DEC
51858: ST_TO_ADDR
51859: LD_INT 5
51861: PUSH
51862: FOR_TO
51863: IFFALSE 52006
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51865: LD_ADDR_VAR 0 7
51869: PUSH
51870: LD_VAR 0 1
51874: PPUSH
51875: LD_VAR 0 6
51879: PPUSH
51880: LD_VAR 0 11
51884: PPUSH
51885: CALL_OW 272
51889: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51890: LD_ADDR_VAR 0 8
51894: PUSH
51895: LD_VAR 0 2
51899: PPUSH
51900: LD_VAR 0 6
51904: PPUSH
51905: LD_VAR 0 11
51909: PPUSH
51910: CALL_OW 273
51914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51915: LD_VAR 0 7
51919: PPUSH
51920: LD_VAR 0 8
51924: PPUSH
51925: CALL_OW 488
51929: NOT
51930: IFFALSE 51934
// continue ;
51932: GO 51862
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51934: LD_ADDR_VAR 0 9
51938: PUSH
51939: LD_VAR 0 12
51943: PUSH
51944: LD_INT 1
51946: ARRAY
51947: PPUSH
51948: LD_VAR 0 12
51952: PUSH
51953: LD_INT 2
51955: ARRAY
51956: PPUSH
51957: LD_VAR 0 7
51961: PPUSH
51962: LD_VAR 0 8
51966: PPUSH
51967: CALL_OW 298
51971: ST_TO_ADDR
// if tmp < distance then
51972: LD_VAR 0 9
51976: PUSH
51977: LD_VAR 0 10
51981: LESS
51982: IFFALSE 52004
// begin result := i ;
51984: LD_ADDR_VAR 0 5
51988: PUSH
51989: LD_VAR 0 6
51993: ST_TO_ADDR
// distance := tmp ;
51994: LD_ADDR_VAR 0 10
51998: PUSH
51999: LD_VAR 0 9
52003: ST_TO_ADDR
// end ; end ;
52004: GO 51862
52006: POP
52007: POP
// end ;
52008: LD_VAR 0 5
52012: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52013: LD_INT 0
52015: PPUSH
52016: PPUSH
// if not driver or not IsInUnit ( driver ) then
52017: LD_VAR 0 1
52021: NOT
52022: IFTRUE 52036
52024: PUSH
52025: LD_VAR 0 1
52029: PPUSH
52030: CALL_OW 310
52034: NOT
52035: OR
52036: IFFALSE 52040
// exit ;
52038: GO 52130
// vehicle := IsInUnit ( driver ) ;
52040: LD_ADDR_VAR 0 3
52044: PUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 310
52054: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52055: LD_VAR 0 1
52059: PPUSH
52060: LD_STRING \
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: PUSH
52090: LD_STRING E
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_VAR 0 3
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PPUSH
52126: CALL_OW 446
// end ;
52130: LD_VAR 0 2
52134: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52135: LD_INT 0
52137: PPUSH
52138: PPUSH
// if not driver or not IsInUnit ( driver ) then
52139: LD_VAR 0 1
52143: NOT
52144: IFTRUE 52158
52146: PUSH
52147: LD_VAR 0 1
52151: PPUSH
52152: CALL_OW 310
52156: NOT
52157: OR
52158: IFFALSE 52162
// exit ;
52160: GO 52252
// vehicle := IsInUnit ( driver ) ;
52162: LD_ADDR_VAR 0 3
52166: PUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 310
52176: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52177: LD_VAR 0 1
52181: PPUSH
52182: LD_STRING \
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 0
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 0
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: PUSH
52212: LD_STRING E
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_VAR 0 3
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PPUSH
52248: CALL_OW 447
// end ;
52252: LD_VAR 0 2
52256: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
52257: LD_INT 0
52259: PPUSH
52260: PPUSH
52261: PPUSH
// tmp := [ ] ;
52262: LD_ADDR_VAR 0 5
52266: PUSH
52267: EMPTY
52268: ST_TO_ADDR
// for i in units do
52269: LD_ADDR_VAR 0 4
52273: PUSH
52274: LD_VAR 0 1
52278: PUSH
52279: FOR_IN
52280: IFFALSE 52318
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52282: LD_ADDR_VAR 0 5
52286: PUSH
52287: LD_VAR 0 5
52291: PPUSH
52292: LD_VAR 0 5
52296: PUSH
52297: LD_INT 1
52299: PLUS
52300: PPUSH
52301: LD_VAR 0 4
52305: PPUSH
52306: CALL_OW 256
52310: PPUSH
52311: CALL_OW 2
52315: ST_TO_ADDR
52316: GO 52279
52318: POP
52319: POP
// if not tmp then
52320: LD_VAR 0 5
52324: NOT
52325: IFFALSE 52329
// exit ;
52327: GO 52377
// if asc then
52329: LD_VAR 0 2
52333: IFFALSE 52357
// result := SortListByListAsc ( units , tmp ) else
52335: LD_ADDR_VAR 0 3
52339: PUSH
52340: LD_VAR 0 1
52344: PPUSH
52345: LD_VAR 0 5
52349: PPUSH
52350: CALL_OW 76
52354: ST_TO_ADDR
52355: GO 52377
// result := SortListByListDesc ( units , tmp ) ;
52357: LD_ADDR_VAR 0 3
52361: PUSH
52362: LD_VAR 0 1
52366: PPUSH
52367: LD_VAR 0 5
52371: PPUSH
52372: CALL_OW 77
52376: ST_TO_ADDR
// end ;
52377: LD_VAR 0 3
52381: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
52382: LD_INT 0
52384: PPUSH
52385: PPUSH
// task := GetTaskList ( mech ) ;
52386: LD_ADDR_VAR 0 4
52390: PUSH
52391: LD_VAR 0 1
52395: PPUSH
52396: CALL_OW 437
52400: ST_TO_ADDR
// if not task then
52401: LD_VAR 0 4
52405: NOT
52406: IFFALSE 52410
// exit ;
52408: GO 52454
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52410: LD_ADDR_VAR 0 3
52414: PUSH
52415: LD_VAR 0 4
52419: PUSH
52420: LD_INT 1
52422: ARRAY
52423: PUSH
52424: LD_INT 1
52426: ARRAY
52427: PUSH
52428: LD_STRING r
52430: EQUAL
52431: IFFALSE 52453
52433: PUSH
52434: LD_VAR 0 4
52438: PUSH
52439: LD_INT 1
52441: ARRAY
52442: PUSH
52443: LD_INT 4
52445: ARRAY
52446: PUSH
52447: LD_VAR 0 2
52451: EQUAL
52452: AND
52453: ST_TO_ADDR
// end ;
52454: LD_VAR 0 3
52458: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52459: LD_INT 0
52461: PPUSH
// SetDir ( unit , d ) ;
52462: LD_VAR 0 1
52466: PPUSH
52467: LD_VAR 0 4
52471: PPUSH
52472: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
52476: LD_ADDR_VAR 0 6
52480: PUSH
52481: LD_VAR 0 1
52485: PPUSH
52486: LD_VAR 0 2
52490: PPUSH
52491: LD_VAR 0 3
52495: PPUSH
52496: LD_VAR 0 5
52500: PPUSH
52501: CALL_OW 48
52505: ST_TO_ADDR
// end ;
52506: LD_VAR 0 6
52510: RET
// export function ToNaturalNumber ( number ) ; begin
52511: LD_INT 0
52513: PPUSH
// result := number div 1 ;
52514: LD_ADDR_VAR 0 2
52518: PUSH
52519: LD_VAR 0 1
52523: PUSH
52524: LD_INT 1
52526: DIV
52527: ST_TO_ADDR
// if number < 0 then
52528: LD_VAR 0 1
52532: PUSH
52533: LD_INT 0
52535: LESS
52536: IFFALSE 52546
// result := 0 ;
52538: LD_ADDR_VAR 0 2
52542: PUSH
52543: LD_INT 0
52545: ST_TO_ADDR
// end ;
52546: LD_VAR 0 2
52550: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
52551: LD_INT 0
52553: PPUSH
52554: PPUSH
52555: PPUSH
// if not buildings then
52556: LD_VAR 0 1
52560: NOT
52561: IFFALSE 52565
// exit ;
52563: GO 52680
// tmp := [ ] ;
52565: LD_ADDR_VAR 0 5
52569: PUSH
52570: EMPTY
52571: ST_TO_ADDR
// for b in buildings do
52572: LD_ADDR_VAR 0 4
52576: PUSH
52577: LD_VAR 0 1
52581: PUSH
52582: FOR_IN
52583: IFFALSE 52621
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
52585: LD_ADDR_VAR 0 5
52589: PUSH
52590: LD_VAR 0 5
52594: PPUSH
52595: LD_VAR 0 5
52599: PUSH
52600: LD_INT 1
52602: PLUS
52603: PPUSH
52604: LD_VAR 0 4
52608: PPUSH
52609: CALL_OW 266
52613: PPUSH
52614: CALL_OW 1
52618: ST_TO_ADDR
52619: GO 52582
52621: POP
52622: POP
// if not tmp then
52623: LD_VAR 0 5
52627: NOT
52628: IFFALSE 52632
// exit ;
52630: GO 52680
// if asc then
52632: LD_VAR 0 2
52636: IFFALSE 52660
// result := SortListByListAsc ( buildings , tmp ) else
52638: LD_ADDR_VAR 0 3
52642: PUSH
52643: LD_VAR 0 1
52647: PPUSH
52648: LD_VAR 0 5
52652: PPUSH
52653: CALL_OW 76
52657: ST_TO_ADDR
52658: GO 52680
// result := SortListByListDesc ( buildings , tmp ) ;
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_VAR 0 1
52669: PPUSH
52670: LD_VAR 0 5
52674: PPUSH
52675: CALL_OW 77
52679: ST_TO_ADDR
// end ;
52680: LD_VAR 0 3
52684: RET
// export function SortByClass ( units , class ) ; var un ; begin
52685: LD_INT 0
52687: PPUSH
52688: PPUSH
// if not units or not class then
52689: LD_VAR 0 1
52693: NOT
52694: IFTRUE 52703
52696: PUSH
52697: LD_VAR 0 2
52701: NOT
52702: OR
52703: IFFALSE 52707
// exit ;
52705: GO 52802
// result := [ ] ;
52707: LD_ADDR_VAR 0 3
52711: PUSH
52712: EMPTY
52713: ST_TO_ADDR
// for un in units do
52714: LD_ADDR_VAR 0 4
52718: PUSH
52719: LD_VAR 0 1
52723: PUSH
52724: FOR_IN
52725: IFFALSE 52800
// if GetClass ( un ) = class then
52727: LD_VAR 0 4
52731: PPUSH
52732: CALL_OW 257
52736: PUSH
52737: LD_VAR 0 2
52741: EQUAL
52742: IFFALSE 52769
// result := Insert ( result , 1 , un ) else
52744: LD_ADDR_VAR 0 3
52748: PUSH
52749: LD_VAR 0 3
52753: PPUSH
52754: LD_INT 1
52756: PPUSH
52757: LD_VAR 0 4
52761: PPUSH
52762: CALL_OW 2
52766: ST_TO_ADDR
52767: GO 52798
// result := Replace ( result , result + 1 , un ) ;
52769: LD_ADDR_VAR 0 3
52773: PUSH
52774: LD_VAR 0 3
52778: PPUSH
52779: LD_VAR 0 3
52783: PUSH
52784: LD_INT 1
52786: PLUS
52787: PPUSH
52788: LD_VAR 0 4
52792: PPUSH
52793: CALL_OW 1
52797: ST_TO_ADDR
52798: GO 52724
52800: POP
52801: POP
// end ;
52802: LD_VAR 0 3
52806: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52807: LD_INT 0
52809: PPUSH
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
// result := [ ] ;
52816: LD_ADDR_VAR 0 4
52820: PUSH
52821: EMPTY
52822: ST_TO_ADDR
// if x - r < 0 then
52823: LD_VAR 0 1
52827: PUSH
52828: LD_VAR 0 3
52832: MINUS
52833: PUSH
52834: LD_INT 0
52836: LESS
52837: IFFALSE 52849
// min_x := 0 else
52839: LD_ADDR_VAR 0 8
52843: PUSH
52844: LD_INT 0
52846: ST_TO_ADDR
52847: GO 52865
// min_x := x - r ;
52849: LD_ADDR_VAR 0 8
52853: PUSH
52854: LD_VAR 0 1
52858: PUSH
52859: LD_VAR 0 3
52863: MINUS
52864: ST_TO_ADDR
// if y - r < 0 then
52865: LD_VAR 0 2
52869: PUSH
52870: LD_VAR 0 3
52874: MINUS
52875: PUSH
52876: LD_INT 0
52878: LESS
52879: IFFALSE 52891
// min_y := 0 else
52881: LD_ADDR_VAR 0 7
52885: PUSH
52886: LD_INT 0
52888: ST_TO_ADDR
52889: GO 52907
// min_y := y - r ;
52891: LD_ADDR_VAR 0 7
52895: PUSH
52896: LD_VAR 0 2
52900: PUSH
52901: LD_VAR 0 3
52905: MINUS
52906: ST_TO_ADDR
// max_x := x + r ;
52907: LD_ADDR_VAR 0 9
52911: PUSH
52912: LD_VAR 0 1
52916: PUSH
52917: LD_VAR 0 3
52921: PLUS
52922: ST_TO_ADDR
// max_y := y + r ;
52923: LD_ADDR_VAR 0 10
52927: PUSH
52928: LD_VAR 0 2
52932: PUSH
52933: LD_VAR 0 3
52937: PLUS
52938: ST_TO_ADDR
// for _x = min_x to max_x do
52939: LD_ADDR_VAR 0 5
52943: PUSH
52944: DOUBLE
52945: LD_VAR 0 8
52949: DEC
52950: ST_TO_ADDR
52951: LD_VAR 0 9
52955: PUSH
52956: FOR_TO
52957: IFFALSE 53058
// for _y = min_y to max_y do
52959: LD_ADDR_VAR 0 6
52963: PUSH
52964: DOUBLE
52965: LD_VAR 0 7
52969: DEC
52970: ST_TO_ADDR
52971: LD_VAR 0 10
52975: PUSH
52976: FOR_TO
52977: IFFALSE 53054
// begin if not ValidHex ( _x , _y ) then
52979: LD_VAR 0 5
52983: PPUSH
52984: LD_VAR 0 6
52988: PPUSH
52989: CALL_OW 488
52993: NOT
52994: IFFALSE 52998
// continue ;
52996: GO 52976
// if GetResourceTypeXY ( _x , _y ) then
52998: LD_VAR 0 5
53002: PPUSH
53003: LD_VAR 0 6
53007: PPUSH
53008: CALL_OW 283
53012: IFFALSE 53052
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53014: LD_ADDR_VAR 0 4
53018: PUSH
53019: LD_VAR 0 4
53023: PPUSH
53024: LD_VAR 0 4
53028: PUSH
53029: LD_INT 1
53031: PLUS
53032: PPUSH
53033: LD_VAR 0 5
53037: PUSH
53038: LD_VAR 0 6
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PPUSH
53047: CALL_OW 1
53051: ST_TO_ADDR
// end ;
53052: GO 52976
53054: POP
53055: POP
53056: GO 52956
53058: POP
53059: POP
// end ;
53060: LD_VAR 0 4
53064: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
53065: LD_INT 0
53067: PPUSH
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
53072: PPUSH
53073: PPUSH
53074: PPUSH
// if not units then
53075: LD_VAR 0 1
53079: NOT
53080: IFFALSE 53084
// exit ;
53082: GO 53616
// result := UnitFilter ( units , [ f_ok ] ) ;
53084: LD_ADDR_VAR 0 3
53088: PUSH
53089: LD_VAR 0 1
53093: PPUSH
53094: LD_INT 50
53096: PUSH
53097: EMPTY
53098: LIST
53099: PPUSH
53100: CALL_OW 72
53104: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
53105: LD_ADDR_VAR 0 8
53109: PUSH
53110: LD_VAR 0 1
53114: PUSH
53115: LD_INT 1
53117: ARRAY
53118: PPUSH
53119: CALL_OW 255
53123: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
53124: LD_ADDR_VAR 0 10
53128: PUSH
53129: LD_INT 29
53131: PUSH
53132: LD_INT 91
53134: PUSH
53135: LD_INT 49
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// if not result then
53143: LD_VAR 0 3
53147: NOT
53148: IFFALSE 53152
// exit ;
53150: GO 53616
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
53152: LD_ADDR_VAR 0 5
53156: PUSH
53157: LD_INT 81
53159: PUSH
53160: LD_VAR 0 8
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PPUSH
53169: CALL_OW 69
53173: ST_TO_ADDR
// for i in result do
53174: LD_ADDR_VAR 0 4
53178: PUSH
53179: LD_VAR 0 3
53183: PUSH
53184: FOR_IN
53185: IFFALSE 53614
// begin tag := GetTag ( i ) + 1 ;
53187: LD_ADDR_VAR 0 9
53191: PUSH
53192: LD_VAR 0 4
53196: PPUSH
53197: CALL_OW 110
53201: PUSH
53202: LD_INT 1
53204: PLUS
53205: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
53206: LD_ADDR_VAR 0 7
53210: PUSH
53211: LD_VAR 0 4
53215: PPUSH
53216: CALL_OW 250
53220: PPUSH
53221: LD_VAR 0 4
53225: PPUSH
53226: CALL_OW 251
53230: PPUSH
53231: LD_INT 4
53233: PPUSH
53234: CALL 52807 0 3
53238: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
53239: LD_VAR 0 4
53243: PPUSH
53244: CALL_OW 247
53248: PUSH
53249: LD_INT 2
53251: EQUAL
53252: IFFALSE 53264
53254: PUSH
53255: LD_VAR 0 7
53259: PUSH
53260: LD_INT 2
53262: GREATER
53263: AND
53264: IFFALSE 53284
53266: PUSH
53267: LD_VAR 0 4
53271: PPUSH
53272: CALL_OW 264
53276: PUSH
53277: LD_VAR 0 10
53281: IN
53282: NOT
53283: AND
53284: IFFALSE 53323
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
53286: LD_VAR 0 4
53290: PPUSH
53291: LD_VAR 0 7
53295: PUSH
53296: LD_INT 1
53298: ARRAY
53299: PUSH
53300: LD_INT 1
53302: ARRAY
53303: PPUSH
53304: LD_VAR 0 7
53308: PUSH
53309: LD_INT 1
53311: ARRAY
53312: PUSH
53313: LD_INT 2
53315: ARRAY
53316: PPUSH
53317: CALL_OW 116
53321: GO 53612
// if path > tag then
53323: LD_VAR 0 2
53327: PUSH
53328: LD_VAR 0 9
53332: GREATER
53333: IFFALSE 53541
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
53335: LD_ADDR_VAR 0 6
53339: PUSH
53340: LD_VAR 0 5
53344: PPUSH
53345: LD_INT 91
53347: PUSH
53348: LD_VAR 0 4
53352: PUSH
53353: LD_INT 8
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: PPUSH
53361: CALL_OW 72
53365: ST_TO_ADDR
// if nearEnemy then
53366: LD_VAR 0 6
53370: IFFALSE 53439
// begin if GetWeapon ( i ) = ru_time_lapser then
53372: LD_VAR 0 4
53376: PPUSH
53377: CALL_OW 264
53381: PUSH
53382: LD_INT 49
53384: EQUAL
53385: IFFALSE 53413
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
53387: LD_VAR 0 4
53391: PPUSH
53392: LD_VAR 0 6
53396: PPUSH
53397: LD_VAR 0 4
53401: PPUSH
53402: CALL_OW 74
53406: PPUSH
53407: CALL_OW 112
53411: GO 53437
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
53413: LD_VAR 0 4
53417: PPUSH
53418: LD_VAR 0 6
53422: PPUSH
53423: LD_VAR 0 4
53427: PPUSH
53428: CALL_OW 74
53432: PPUSH
53433: CALL 54697 0 2
// end else
53437: GO 53539
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
53439: LD_VAR 0 4
53443: PPUSH
53444: LD_VAR 0 2
53448: PUSH
53449: LD_VAR 0 9
53453: ARRAY
53454: PUSH
53455: LD_INT 1
53457: ARRAY
53458: PPUSH
53459: LD_VAR 0 2
53463: PUSH
53464: LD_VAR 0 9
53468: ARRAY
53469: PUSH
53470: LD_INT 2
53472: ARRAY
53473: PPUSH
53474: CALL_OW 297
53478: PUSH
53479: LD_INT 6
53481: GREATER
53482: IFFALSE 53525
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
53484: LD_VAR 0 4
53488: PPUSH
53489: LD_VAR 0 2
53493: PUSH
53494: LD_VAR 0 9
53498: ARRAY
53499: PUSH
53500: LD_INT 1
53502: ARRAY
53503: PPUSH
53504: LD_VAR 0 2
53508: PUSH
53509: LD_VAR 0 9
53513: ARRAY
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: PPUSH
53519: CALL_OW 114
53523: GO 53539
// SetTag ( i , tag ) ;
53525: LD_VAR 0 4
53529: PPUSH
53530: LD_VAR 0 9
53534: PPUSH
53535: CALL_OW 109
// end else
53539: GO 53612
// if enemy then
53541: LD_VAR 0 5
53545: IFFALSE 53612
// begin if GetWeapon ( i ) = ru_time_lapser then
53547: LD_VAR 0 4
53551: PPUSH
53552: CALL_OW 264
53556: PUSH
53557: LD_INT 49
53559: EQUAL
53560: IFFALSE 53588
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53562: LD_VAR 0 4
53566: PPUSH
53567: LD_VAR 0 5
53571: PPUSH
53572: LD_VAR 0 4
53576: PPUSH
53577: CALL_OW 74
53581: PPUSH
53582: CALL_OW 112
53586: GO 53612
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53588: LD_VAR 0 4
53592: PPUSH
53593: LD_VAR 0 5
53597: PPUSH
53598: LD_VAR 0 4
53602: PPUSH
53603: CALL_OW 74
53607: PPUSH
53608: CALL 54697 0 2
// end ; end ;
53612: GO 53184
53614: POP
53615: POP
// end ;
53616: LD_VAR 0 3
53620: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53621: LD_INT 0
53623: PPUSH
53624: PPUSH
53625: PPUSH
// if not unit or IsInUnit ( unit ) then
53626: LD_VAR 0 1
53630: NOT
53631: IFTRUE 53644
53633: PUSH
53634: LD_VAR 0 1
53638: PPUSH
53639: CALL_OW 310
53643: OR
53644: IFFALSE 53648
// exit ;
53646: GO 53739
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53648: LD_ADDR_VAR 0 4
53652: PUSH
53653: LD_VAR 0 1
53657: PPUSH
53658: CALL_OW 250
53662: PPUSH
53663: LD_VAR 0 2
53667: PPUSH
53668: LD_INT 1
53670: PPUSH
53671: CALL_OW 272
53675: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53676: LD_ADDR_VAR 0 5
53680: PUSH
53681: LD_VAR 0 1
53685: PPUSH
53686: CALL_OW 251
53690: PPUSH
53691: LD_VAR 0 2
53695: PPUSH
53696: LD_INT 1
53698: PPUSH
53699: CALL_OW 273
53703: ST_TO_ADDR
// if ValidHex ( x , y ) then
53704: LD_VAR 0 4
53708: PPUSH
53709: LD_VAR 0 5
53713: PPUSH
53714: CALL_OW 488
53718: IFFALSE 53739
// ComTurnXY ( unit , x , y ) ;
53720: LD_VAR 0 1
53724: PPUSH
53725: LD_VAR 0 4
53729: PPUSH
53730: LD_VAR 0 5
53734: PPUSH
53735: CALL_OW 118
// end ;
53739: LD_VAR 0 3
53743: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53744: LD_INT 0
53746: PPUSH
53747: PPUSH
// result := false ;
53748: LD_ADDR_VAR 0 3
53752: PUSH
53753: LD_INT 0
53755: ST_TO_ADDR
// if not units then
53756: LD_VAR 0 2
53760: NOT
53761: IFFALSE 53765
// exit ;
53763: GO 53810
// for i in units do
53765: LD_ADDR_VAR 0 4
53769: PUSH
53770: LD_VAR 0 2
53774: PUSH
53775: FOR_IN
53776: IFFALSE 53808
// if See ( side , i ) then
53778: LD_VAR 0 1
53782: PPUSH
53783: LD_VAR 0 4
53787: PPUSH
53788: CALL_OW 292
53792: IFFALSE 53806
// begin result := true ;
53794: LD_ADDR_VAR 0 3
53798: PUSH
53799: LD_INT 1
53801: ST_TO_ADDR
// exit ;
53802: POP
53803: POP
53804: GO 53810
// end ;
53806: GO 53775
53808: POP
53809: POP
// end ;
53810: LD_VAR 0 3
53814: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53815: LD_INT 0
53817: PPUSH
53818: PPUSH
53819: PPUSH
53820: PPUSH
// if not unit or not points then
53821: LD_VAR 0 1
53825: NOT
53826: IFTRUE 53835
53828: PUSH
53829: LD_VAR 0 2
53833: NOT
53834: OR
53835: IFFALSE 53839
// exit ;
53837: GO 53929
// dist := 99999 ;
53839: LD_ADDR_VAR 0 5
53843: PUSH
53844: LD_INT 99999
53846: ST_TO_ADDR
// for i in points do
53847: LD_ADDR_VAR 0 4
53851: PUSH
53852: LD_VAR 0 2
53856: PUSH
53857: FOR_IN
53858: IFFALSE 53927
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53860: LD_ADDR_VAR 0 6
53864: PUSH
53865: LD_VAR 0 1
53869: PPUSH
53870: LD_VAR 0 4
53874: PUSH
53875: LD_INT 1
53877: ARRAY
53878: PPUSH
53879: LD_VAR 0 4
53883: PUSH
53884: LD_INT 2
53886: ARRAY
53887: PPUSH
53888: CALL_OW 297
53892: ST_TO_ADDR
// if tmpDist < dist then
53893: LD_VAR 0 6
53897: PUSH
53898: LD_VAR 0 5
53902: LESS
53903: IFFALSE 53925
// begin result := i ;
53905: LD_ADDR_VAR 0 3
53909: PUSH
53910: LD_VAR 0 4
53914: ST_TO_ADDR
// dist := tmpDist ;
53915: LD_ADDR_VAR 0 5
53919: PUSH
53920: LD_VAR 0 6
53924: ST_TO_ADDR
// end ; end ;
53925: GO 53857
53927: POP
53928: POP
// end ;
53929: LD_VAR 0 3
53933: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53934: LD_INT 0
53936: PPUSH
// uc_side := side ;
53937: LD_ADDR_OWVAR 20
53941: PUSH
53942: LD_VAR 0 1
53946: ST_TO_ADDR
// uc_nation := 3 ;
53947: LD_ADDR_OWVAR 21
53951: PUSH
53952: LD_INT 3
53954: ST_TO_ADDR
// vc_chassis := 25 ;
53955: LD_ADDR_OWVAR 37
53959: PUSH
53960: LD_INT 25
53962: ST_TO_ADDR
// vc_engine := engine_siberite ;
53963: LD_ADDR_OWVAR 39
53967: PUSH
53968: LD_INT 3
53970: ST_TO_ADDR
// vc_control := control_computer ;
53971: LD_ADDR_OWVAR 38
53975: PUSH
53976: LD_INT 3
53978: ST_TO_ADDR
// vc_weapon := 59 ;
53979: LD_ADDR_OWVAR 40
53983: PUSH
53984: LD_INT 59
53986: ST_TO_ADDR
// result := CreateVehicle ;
53987: LD_ADDR_VAR 0 5
53991: PUSH
53992: CALL_OW 45
53996: ST_TO_ADDR
// SetDir ( result , d ) ;
53997: LD_VAR 0 5
54001: PPUSH
54002: LD_VAR 0 4
54006: PPUSH
54007: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
54011: LD_VAR 0 5
54015: PPUSH
54016: LD_VAR 0 2
54020: PPUSH
54021: LD_VAR 0 3
54025: PPUSH
54026: LD_INT 0
54028: PPUSH
54029: CALL_OW 48
// end ;
54033: LD_VAR 0 5
54037: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
54038: LD_INT 0
54040: PPUSH
54041: PPUSH
54042: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
54043: LD_ADDR_VAR 0 2
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 0
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
54066: LD_VAR 0 1
54070: NOT
54071: IFTRUE 54104
54073: PUSH
54074: LD_VAR 0 1
54078: PPUSH
54079: CALL_OW 264
54083: PUSH
54084: LD_INT 12
54086: PUSH
54087: LD_INT 51
54089: PUSH
54090: LD_INT 32
54092: PUSH
54093: LD_INT 89
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: IN
54102: NOT
54103: OR
54104: IFFALSE 54108
// exit ;
54106: GO 54206
// for i := 1 to 3 do
54108: LD_ADDR_VAR 0 3
54112: PUSH
54113: DOUBLE
54114: LD_INT 1
54116: DEC
54117: ST_TO_ADDR
54118: LD_INT 3
54120: PUSH
54121: FOR_TO
54122: IFFALSE 54204
// begin tmp := GetCargo ( cargo , i ) ;
54124: LD_ADDR_VAR 0 4
54128: PUSH
54129: LD_VAR 0 1
54133: PPUSH
54134: LD_VAR 0 3
54138: PPUSH
54139: CALL_OW 289
54143: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
54144: LD_ADDR_VAR 0 2
54148: PUSH
54149: LD_VAR 0 2
54153: PPUSH
54154: LD_VAR 0 3
54158: PPUSH
54159: LD_VAR 0 4
54163: PPUSH
54164: CALL_OW 1
54168: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
54169: LD_ADDR_VAR 0 2
54173: PUSH
54174: LD_VAR 0 2
54178: PPUSH
54179: LD_INT 4
54181: PPUSH
54182: LD_VAR 0 2
54186: PUSH
54187: LD_INT 4
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 4
54195: PLUS
54196: PPUSH
54197: CALL_OW 1
54201: ST_TO_ADDR
// end ;
54202: GO 54121
54204: POP
54205: POP
// end ;
54206: LD_VAR 0 2
54210: RET
// export function Length ( array ) ; begin
54211: LD_INT 0
54213: PPUSH
// result := array + 0 ;
54214: LD_ADDR_VAR 0 2
54218: PUSH
54219: LD_VAR 0 1
54223: PUSH
54224: LD_INT 0
54226: PLUS
54227: ST_TO_ADDR
// end ;
54228: LD_VAR 0 2
54232: RET
// export function PrepareArray ( array ) ; begin
54233: LD_INT 0
54235: PPUSH
// result := array diff 0 ;
54236: LD_ADDR_VAR 0 2
54240: PUSH
54241: LD_VAR 0 1
54245: PUSH
54246: LD_INT 0
54248: DIFF
54249: ST_TO_ADDR
// if not result [ 1 ] then
54250: LD_VAR 0 2
54254: PUSH
54255: LD_INT 1
54257: ARRAY
54258: NOT
54259: IFFALSE 54279
// result := Delete ( result , 1 ) ;
54261: LD_ADDR_VAR 0 2
54265: PUSH
54266: LD_VAR 0 2
54270: PPUSH
54271: LD_INT 1
54273: PPUSH
54274: CALL_OW 3
54278: ST_TO_ADDR
// end ;
54279: LD_VAR 0 2
54283: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
54284: LD_INT 0
54286: PPUSH
54287: PPUSH
54288: PPUSH
54289: PPUSH
// sibRocketRange := 25 ;
54290: LD_ADDR_VAR 0 6
54294: PUSH
54295: LD_INT 25
54297: ST_TO_ADDR
// result := false ;
54298: LD_ADDR_VAR 0 4
54302: PUSH
54303: LD_INT 0
54305: ST_TO_ADDR
// for i := 0 to 5 do
54306: LD_ADDR_VAR 0 5
54310: PUSH
54311: DOUBLE
54312: LD_INT 0
54314: DEC
54315: ST_TO_ADDR
54316: LD_INT 5
54318: PUSH
54319: FOR_TO
54320: IFFALSE 54387
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
54322: LD_VAR 0 1
54326: PPUSH
54327: LD_VAR 0 5
54331: PPUSH
54332: LD_VAR 0 6
54336: PPUSH
54337: CALL_OW 272
54341: PPUSH
54342: LD_VAR 0 2
54346: PPUSH
54347: LD_VAR 0 5
54351: PPUSH
54352: LD_VAR 0 6
54356: PPUSH
54357: CALL_OW 273
54361: PPUSH
54362: LD_VAR 0 3
54366: PPUSH
54367: CALL_OW 309
54371: IFFALSE 54385
// begin result := true ;
54373: LD_ADDR_VAR 0 4
54377: PUSH
54378: LD_INT 1
54380: ST_TO_ADDR
// exit ;
54381: POP
54382: POP
54383: GO 54389
// end ;
54385: GO 54319
54387: POP
54388: POP
// end ;
54389: LD_VAR 0 4
54393: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
54394: LD_INT 0
54396: PPUSH
54397: PPUSH
54398: PPUSH
// if btype = b_depot then
54399: LD_VAR 0 2
54403: PUSH
54404: LD_INT 0
54406: EQUAL
54407: IFFALSE 54419
// begin result := true ;
54409: LD_ADDR_VAR 0 3
54413: PUSH
54414: LD_INT 1
54416: ST_TO_ADDR
// exit ;
54417: GO 54539
// end ; pom := GetBase ( depot ) ;
54419: LD_ADDR_VAR 0 4
54423: PUSH
54424: LD_VAR 0 1
54428: PPUSH
54429: CALL_OW 274
54433: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54434: LD_ADDR_VAR 0 5
54438: PUSH
54439: LD_VAR 0 2
54443: PPUSH
54444: LD_VAR 0 1
54448: PPUSH
54449: CALL_OW 248
54453: PPUSH
54454: CALL_OW 450
54458: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
54459: LD_ADDR_VAR 0 3
54463: PUSH
54464: LD_VAR 0 4
54468: PPUSH
54469: LD_INT 1
54471: PPUSH
54472: CALL_OW 275
54476: PUSH
54477: LD_VAR 0 5
54481: PUSH
54482: LD_INT 1
54484: ARRAY
54485: GREATEREQUAL
54486: IFFALSE 54512
54488: PUSH
54489: LD_VAR 0 4
54493: PPUSH
54494: LD_INT 2
54496: PPUSH
54497: CALL_OW 275
54501: PUSH
54502: LD_VAR 0 5
54506: PUSH
54507: LD_INT 2
54509: ARRAY
54510: GREATEREQUAL
54511: AND
54512: IFFALSE 54538
54514: PUSH
54515: LD_VAR 0 4
54519: PPUSH
54520: LD_INT 3
54522: PPUSH
54523: CALL_OW 275
54527: PUSH
54528: LD_VAR 0 5
54532: PUSH
54533: LD_INT 3
54535: ARRAY
54536: GREATEREQUAL
54537: AND
54538: ST_TO_ADDR
// end ;
54539: LD_VAR 0 3
54543: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
54544: LD_INT 0
54546: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
54547: LD_VAR 0 1
54551: PPUSH
54552: LD_VAR 0 2
54556: PPUSH
54557: LD_INT 0
54559: PPUSH
54560: LD_INT 0
54562: PPUSH
54563: LD_INT 1
54565: PPUSH
54566: LD_INT 0
54568: PPUSH
54569: CALL_OW 587
// end ;
54573: LD_VAR 0 3
54577: RET
// export function CenterOnNow ( unit ) ; begin
54578: LD_INT 0
54580: PPUSH
// result := IsInUnit ( unit ) ;
54581: LD_ADDR_VAR 0 2
54585: PUSH
54586: LD_VAR 0 1
54590: PPUSH
54591: CALL_OW 310
54595: ST_TO_ADDR
// if not result then
54596: LD_VAR 0 2
54600: NOT
54601: IFFALSE 54613
// result := unit ;
54603: LD_ADDR_VAR 0 2
54607: PUSH
54608: LD_VAR 0 1
54612: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
54613: LD_VAR 0 1
54617: PPUSH
54618: CALL_OW 87
// end ;
54622: LD_VAR 0 2
54626: RET
// export function ComMoveHex ( unit , hex ) ; begin
54627: LD_INT 0
54629: PPUSH
// if not hex then
54630: LD_VAR 0 2
54634: NOT
54635: IFFALSE 54639
// exit ;
54637: GO 54692
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
54639: LD_VAR 0 2
54643: PUSH
54644: LD_INT 1
54646: ARRAY
54647: PPUSH
54648: LD_VAR 0 2
54652: PUSH
54653: LD_INT 2
54655: ARRAY
54656: PPUSH
54657: CALL_OW 428
54661: IFFALSE 54665
// exit ;
54663: GO 54692
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
54665: LD_VAR 0 1
54669: PPUSH
54670: LD_VAR 0 2
54674: PUSH
54675: LD_INT 1
54677: ARRAY
54678: PPUSH
54679: LD_VAR 0 2
54683: PUSH
54684: LD_INT 2
54686: ARRAY
54687: PPUSH
54688: CALL_OW 111
// end ;
54692: LD_VAR 0 3
54696: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
54697: LD_INT 0
54699: PPUSH
54700: PPUSH
54701: PPUSH
// if not unit or not enemy then
54702: LD_VAR 0 1
54706: NOT
54707: IFTRUE 54716
54709: PUSH
54710: LD_VAR 0 2
54714: NOT
54715: OR
54716: IFFALSE 54720
// exit ;
54718: GO 54846
// x := GetX ( enemy ) ;
54720: LD_ADDR_VAR 0 4
54724: PUSH
54725: LD_VAR 0 2
54729: PPUSH
54730: CALL_OW 250
54734: ST_TO_ADDR
// y := GetY ( enemy ) ;
54735: LD_ADDR_VAR 0 5
54739: PUSH
54740: LD_VAR 0 2
54744: PPUSH
54745: CALL_OW 251
54749: ST_TO_ADDR
// if ValidHex ( x , y ) then
54750: LD_VAR 0 4
54754: PPUSH
54755: LD_VAR 0 5
54759: PPUSH
54760: CALL_OW 488
54764: IFFALSE 54846
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
54766: LD_VAR 0 2
54770: PPUSH
54771: CALL_OW 247
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: IN
54786: IFTRUE 54809
54788: PUSH
54789: LD_VAR 0 1
54793: PPUSH
54794: CALL_OW 255
54798: PPUSH
54799: LD_VAR 0 2
54803: PPUSH
54804: CALL_OW 292
54808: OR
54809: IFFALSE 54827
// ComAttackUnit ( unit , enemy ) else
54811: LD_VAR 0 1
54815: PPUSH
54816: LD_VAR 0 2
54820: PPUSH
54821: CALL_OW 115
54825: GO 54846
// ComAgressiveMove ( unit , x , y ) ;
54827: LD_VAR 0 1
54831: PPUSH
54832: LD_VAR 0 4
54836: PPUSH
54837: LD_VAR 0 5
54841: PPUSH
54842: CALL_OW 114
// end ;
54846: LD_VAR 0 3
54850: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
54851: LD_INT 0
54853: PPUSH
54854: PPUSH
54855: PPUSH
// list := AreaToList ( area , 0 ) ;
54856: LD_ADDR_VAR 0 5
54860: PUSH
54861: LD_VAR 0 1
54865: PPUSH
54866: LD_INT 0
54868: PPUSH
54869: CALL_OW 517
54873: ST_TO_ADDR
// if not list then
54874: LD_VAR 0 5
54878: NOT
54879: IFFALSE 54883
// exit ;
54881: GO 55013
// if all then
54883: LD_VAR 0 2
54887: IFFALSE 54975
// begin for i := 1 to list [ 1 ] do
54889: LD_ADDR_VAR 0 4
54893: PUSH
54894: DOUBLE
54895: LD_INT 1
54897: DEC
54898: ST_TO_ADDR
54899: LD_VAR 0 5
54903: PUSH
54904: LD_INT 1
54906: ARRAY
54907: PUSH
54908: FOR_TO
54909: IFFALSE 54971
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54911: LD_ADDR_VAR 0 3
54915: PUSH
54916: LD_VAR 0 3
54920: PPUSH
54921: LD_VAR 0 3
54925: PUSH
54926: LD_INT 1
54928: PLUS
54929: PPUSH
54930: LD_VAR 0 5
54934: PUSH
54935: LD_INT 1
54937: ARRAY
54938: PUSH
54939: LD_VAR 0 4
54943: ARRAY
54944: PUSH
54945: LD_VAR 0 5
54949: PUSH
54950: LD_INT 2
54952: ARRAY
54953: PUSH
54954: LD_VAR 0 4
54958: ARRAY
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PPUSH
54964: CALL_OW 1
54968: ST_TO_ADDR
54969: GO 54908
54971: POP
54972: POP
// exit ;
54973: GO 55013
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
54975: LD_ADDR_VAR 0 3
54979: PUSH
54980: LD_VAR 0 5
54984: PUSH
54985: LD_INT 1
54987: ARRAY
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: PUSH
54993: LD_VAR 0 5
54997: PUSH
54998: LD_INT 2
55000: ARRAY
55001: PUSH
55002: LD_INT 1
55004: ARRAY
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: ST_TO_ADDR
// end ;
55013: LD_VAR 0 3
55017: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
55018: LD_INT 0
55020: PPUSH
55021: PPUSH
// list := AreaToList ( area , 0 ) ;
55022: LD_ADDR_VAR 0 4
55026: PUSH
55027: LD_VAR 0 1
55031: PPUSH
55032: LD_INT 0
55034: PPUSH
55035: CALL_OW 517
55039: ST_TO_ADDR
// if not list then
55040: LD_VAR 0 4
55044: NOT
55045: IFFALSE 55049
// exit ;
55047: GO 55090
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
55049: LD_ADDR_VAR 0 3
55053: PUSH
55054: LD_VAR 0 4
55058: PUSH
55059: LD_INT 1
55061: ARRAY
55062: PUSH
55063: LD_INT 1
55065: ARRAY
55066: PUSH
55067: LD_VAR 0 4
55071: PUSH
55072: LD_INT 2
55074: ARRAY
55075: PUSH
55076: LD_INT 1
55078: ARRAY
55079: PUSH
55080: LD_VAR 0 2
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// end ;
55090: LD_VAR 0 3
55094: RET
// export function First ( array ) ; begin
55095: LD_INT 0
55097: PPUSH
// if not array then
55098: LD_VAR 0 1
55102: NOT
55103: IFFALSE 55107
// exit ;
55105: GO 55121
// result := array [ 1 ] ;
55107: LD_ADDR_VAR 0 2
55111: PUSH
55112: LD_VAR 0 1
55116: PUSH
55117: LD_INT 1
55119: ARRAY
55120: ST_TO_ADDR
// end ;
55121: LD_VAR 0 2
55125: RET
// export function Last ( array ) ; begin
55126: LD_INT 0
55128: PPUSH
// if not array then
55129: LD_VAR 0 1
55133: NOT
55134: IFFALSE 55138
// exit ;
55136: GO 55154
// result := array [ array ] ;
55138: LD_ADDR_VAR 0 2
55142: PUSH
55143: LD_VAR 0 1
55147: PUSH
55148: LD_VAR 0 1
55152: ARRAY
55153: ST_TO_ADDR
// end ;
55154: LD_VAR 0 2
55158: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
55159: LD_INT 0
55161: PPUSH
55162: PPUSH
// result := [ ] ;
55163: LD_ADDR_VAR 0 5
55167: PUSH
55168: EMPTY
55169: ST_TO_ADDR
// if not array then
55170: LD_VAR 0 1
55174: NOT
55175: IFFALSE 55179
// exit ;
55177: GO 55291
// for i := 1 to array do
55179: LD_ADDR_VAR 0 6
55183: PUSH
55184: DOUBLE
55185: LD_INT 1
55187: DEC
55188: ST_TO_ADDR
55189: LD_VAR 0 1
55193: PUSH
55194: FOR_TO
55195: IFFALSE 55289
// if array [ i ] [ index ] = value then
55197: LD_VAR 0 1
55201: PUSH
55202: LD_VAR 0 6
55206: ARRAY
55207: PUSH
55208: LD_VAR 0 2
55212: ARRAY
55213: PUSH
55214: LD_VAR 0 3
55218: EQUAL
55219: IFFALSE 55287
// begin if indexColumn then
55221: LD_VAR 0 4
55225: IFFALSE 55261
// result := Join ( result , array [ i ] [ indexColumn ] ) else
55227: LD_ADDR_VAR 0 5
55231: PUSH
55232: LD_VAR 0 5
55236: PPUSH
55237: LD_VAR 0 1
55241: PUSH
55242: LD_VAR 0 6
55246: ARRAY
55247: PUSH
55248: LD_VAR 0 4
55252: ARRAY
55253: PPUSH
55254: CALL 50299 0 2
55258: ST_TO_ADDR
55259: GO 55287
// result := Join ( result , array [ i ] ) ;
55261: LD_ADDR_VAR 0 5
55265: PUSH
55266: LD_VAR 0 5
55270: PPUSH
55271: LD_VAR 0 1
55275: PUSH
55276: LD_VAR 0 6
55280: ARRAY
55281: PPUSH
55282: CALL 50299 0 2
55286: ST_TO_ADDR
// end ;
55287: GO 55194
55289: POP
55290: POP
// end ;
55291: LD_VAR 0 5
55295: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
55296: LD_INT 0
55298: PPUSH
// if not vehicles or not parkingPoint then
55299: LD_VAR 0 1
55303: NOT
55304: IFTRUE 55313
55306: PUSH
55307: LD_VAR 0 2
55311: NOT
55312: OR
55313: IFFALSE 55317
// exit ;
55315: GO 55415
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
55317: LD_ADDR_VAR 0 1
55321: PUSH
55322: LD_VAR 0 1
55326: PPUSH
55327: LD_INT 50
55329: PUSH
55330: EMPTY
55331: LIST
55332: PUSH
55333: LD_INT 3
55335: PUSH
55336: LD_INT 92
55338: PUSH
55339: LD_VAR 0 2
55343: PUSH
55344: LD_INT 1
55346: ARRAY
55347: PUSH
55348: LD_VAR 0 2
55352: PUSH
55353: LD_INT 2
55355: ARRAY
55356: PUSH
55357: LD_INT 8
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PPUSH
55374: CALL_OW 72
55378: ST_TO_ADDR
// if not vehicles then
55379: LD_VAR 0 1
55383: NOT
55384: IFFALSE 55388
// exit ;
55386: GO 55415
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
55388: LD_VAR 0 1
55392: PPUSH
55393: LD_VAR 0 2
55397: PUSH
55398: LD_INT 1
55400: ARRAY
55401: PPUSH
55402: LD_VAR 0 2
55406: PUSH
55407: LD_INT 2
55409: ARRAY
55410: PPUSH
55411: CALL_OW 111
// end ;
55415: LD_VAR 0 3
55419: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
55420: LD_INT 0
55422: PPUSH
55423: PPUSH
55424: PPUSH
// if not side or not area then
55425: LD_VAR 0 1
55429: NOT
55430: IFTRUE 55439
55432: PUSH
55433: LD_VAR 0 2
55437: NOT
55438: OR
55439: IFFALSE 55443
// exit ;
55441: GO 55562
// tmp := AreaToList ( area , 0 ) ;
55443: LD_ADDR_VAR 0 5
55447: PUSH
55448: LD_VAR 0 2
55452: PPUSH
55453: LD_INT 0
55455: PPUSH
55456: CALL_OW 517
55460: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55461: LD_ADDR_VAR 0 4
55465: PUSH
55466: DOUBLE
55467: LD_INT 1
55469: DEC
55470: ST_TO_ADDR
55471: LD_VAR 0 5
55475: PUSH
55476: LD_INT 1
55478: ARRAY
55479: PUSH
55480: FOR_TO
55481: IFFALSE 55560
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
55483: LD_VAR 0 5
55487: PUSH
55488: LD_INT 1
55490: ARRAY
55491: PUSH
55492: LD_VAR 0 4
55496: ARRAY
55497: PPUSH
55498: LD_VAR 0 5
55502: PUSH
55503: LD_INT 2
55505: ARRAY
55506: PUSH
55507: LD_VAR 0 4
55511: ARRAY
55512: PPUSH
55513: CALL_OW 351
55517: IFFALSE 55558
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
55519: LD_VAR 0 5
55523: PUSH
55524: LD_INT 1
55526: ARRAY
55527: PUSH
55528: LD_VAR 0 4
55532: ARRAY
55533: PPUSH
55534: LD_VAR 0 5
55538: PUSH
55539: LD_INT 2
55541: ARRAY
55542: PUSH
55543: LD_VAR 0 4
55547: ARRAY
55548: PPUSH
55549: LD_VAR 0 1
55553: PPUSH
55554: CALL_OW 244
// end ;
55558: GO 55480
55560: POP
55561: POP
// end ;
55562: LD_VAR 0 3
55566: RET
// export function UniqueArray ( array ) ; var i ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
// result := [ ] ;
55571: LD_ADDR_VAR 0 2
55575: PUSH
55576: EMPTY
55577: ST_TO_ADDR
// if not array then
55578: LD_VAR 0 1
55582: NOT
55583: IFFALSE 55587
// exit ;
55585: GO 55648
// for i := 1 to array do
55587: LD_ADDR_VAR 0 3
55591: PUSH
55592: DOUBLE
55593: LD_INT 1
55595: DEC
55596: ST_TO_ADDR
55597: LD_VAR 0 1
55601: PUSH
55602: FOR_TO
55603: IFFALSE 55646
// if not array [ i ] in result then
55605: LD_VAR 0 1
55609: PUSH
55610: LD_VAR 0 3
55614: ARRAY
55615: PUSH
55616: LD_VAR 0 2
55620: IN
55621: NOT
55622: IFFALSE 55644
// result := Join ( result , i ) ;
55624: LD_ADDR_VAR 0 2
55628: PUSH
55629: LD_VAR 0 2
55633: PPUSH
55634: LD_VAR 0 3
55638: PPUSH
55639: CALL 50299 0 2
55643: ST_TO_ADDR
55644: GO 55602
55646: POP
55647: POP
// end ; end_of_file
55648: LD_VAR 0 2
55652: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55653: LD_VAR 0 1
55657: PUSH
55658: LD_INT 200
55660: DOUBLE
55661: GREATEREQUAL
55662: IFFALSE 55670
55664: LD_INT 299
55666: DOUBLE
55667: LESSEQUAL
55668: IFTRUE 55672
55670: GO 55704
55672: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55673: LD_VAR 0 1
55677: PPUSH
55678: LD_VAR 0 2
55682: PPUSH
55683: LD_VAR 0 3
55687: PPUSH
55688: LD_VAR 0 4
55692: PPUSH
55693: LD_VAR 0 5
55697: PPUSH
55698: CALL 56485 0 5
55702: GO 55781
55704: LD_INT 300
55706: DOUBLE
55707: GREATEREQUAL
55708: IFFALSE 55716
55710: LD_INT 399
55712: DOUBLE
55713: LESSEQUAL
55714: IFTRUE 55718
55716: GO 55780
55718: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55719: LD_VAR 0 1
55723: PPUSH
55724: LD_VAR 0 2
55728: PPUSH
55729: LD_VAR 0 3
55733: PPUSH
55734: LD_VAR 0 4
55738: PPUSH
55739: LD_VAR 0 5
55743: PPUSH
55744: LD_VAR 0 6
55748: PPUSH
55749: LD_VAR 0 7
55753: PPUSH
55754: LD_VAR 0 8
55758: PPUSH
55759: LD_VAR 0 9
55763: PPUSH
55764: LD_VAR 0 10
55768: PPUSH
55769: LD_VAR 0 11
55773: PPUSH
55774: CALL 61890 0 11
55778: GO 55781
55780: POP
// end ;
55781: PPOPN 11
55783: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55784: LD_VAR 0 1
55788: PPUSH
55789: LD_VAR 0 2
55793: PPUSH
55794: LD_VAR 0 3
55798: PPUSH
55799: LD_VAR 0 4
55803: PPUSH
55804: LD_VAR 0 5
55808: PPUSH
55809: CALL 55866 0 5
// end ; end_of_file
55813: PPOPN 5
55815: END
// export function SOS_UnitDestroyed ( un ) ; begin
55816: LD_INT 0
55818: PPUSH
// ComRadiation ( un ) ;
55819: LD_VAR 0 1
55823: PPUSH
55824: CALL 56905 0 1
// end ;
55828: LD_VAR 0 2
55832: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55833: LD_INT 0
55835: PPUSH
// ComRadiation ( un ) ;
55836: LD_VAR 0 1
55840: PPUSH
55841: CALL 56905 0 1
// end ;
55845: LD_VAR 0 2
55849: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55850: LD_INT 0
55852: PPUSH
// end ;
55853: LD_VAR 0 4
55857: RET
// export function SOS_Command ( cmd ) ; begin
55858: LD_INT 0
55860: PPUSH
// end ;
55861: LD_VAR 0 2
55865: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55866: LD_INT 0
55868: PPUSH
// end ;
55869: LD_VAR 0 6
55873: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55874: LD_INT 0
55876: PPUSH
55877: PPUSH
55878: PPUSH
55879: PPUSH
// if not vehicle or not factory then
55880: LD_VAR 0 1
55884: NOT
55885: IFTRUE 55894
55887: PUSH
55888: LD_VAR 0 2
55892: NOT
55893: OR
55894: IFFALSE 55898
// exit ;
55896: GO 56480
// if not factoryWaypoints then
55898: LD_EXP 59
55902: NOT
55903: IFFALSE 55907
// exit ;
55905: GO 56480
// for i := 1 to Count ( factoryWaypoints ) do
55907: LD_ADDR_VAR 0 4
55911: PUSH
55912: DOUBLE
55913: LD_INT 1
55915: DEC
55916: ST_TO_ADDR
55917: LD_EXP 59
55921: PPUSH
55922: CALL 14367 0 1
55926: PUSH
55927: FOR_TO
55928: IFFALSE 56478
// if factoryWaypoints [ i ] [ 2 ] = factory then
55930: LD_EXP 59
55934: PUSH
55935: LD_VAR 0 4
55939: ARRAY
55940: PUSH
55941: LD_INT 2
55943: ARRAY
55944: PUSH
55945: LD_VAR 0 2
55949: EQUAL
55950: IFFALSE 56476
// begin if GetControl ( vehicle ) = control_manual then
55952: LD_VAR 0 1
55956: PPUSH
55957: CALL_OW 263
55961: PUSH
55962: LD_INT 1
55964: EQUAL
55965: IFFALSE 56329
// begin driver := IsDrivenBy ( vehicle ) ;
55967: LD_ADDR_VAR 0 5
55971: PUSH
55972: LD_VAR 0 1
55976: PPUSH
55977: CALL_OW 311
55981: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55982: LD_VAR 0 5
55986: PUSH
55987: LD_EXP 60
55991: IN
55992: IFTRUE 56006
55994: PUSH
55995: LD_VAR 0 1
55999: PUSH
56000: LD_EXP 60
56004: IN
56005: OR
56006: IFFALSE 56012
// exit ;
56008: POP
56009: POP
56010: GO 56480
// if not HasTask ( driver ) then
56012: LD_VAR 0 5
56016: PPUSH
56017: CALL_OW 314
56021: NOT
56022: IFFALSE 56327
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56024: LD_ADDR_EXP 60
56028: PUSH
56029: LD_EXP 60
56033: PPUSH
56034: LD_VAR 0 5
56038: PPUSH
56039: CALL 50299 0 2
56043: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56044: LD_ADDR_EXP 60
56048: PUSH
56049: LD_EXP 60
56053: PPUSH
56054: LD_VAR 0 1
56058: PPUSH
56059: CALL 50299 0 2
56063: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56064: LD_ADDR_VAR 0 6
56068: PUSH
56069: LD_EXP 59
56073: PUSH
56074: LD_VAR 0 4
56078: ARRAY
56079: PUSH
56080: LD_INT 3
56082: ARRAY
56083: PPUSH
56084: LD_EXP 59
56088: PUSH
56089: LD_VAR 0 4
56093: ARRAY
56094: PUSH
56095: LD_INT 4
56097: ARRAY
56098: PPUSH
56099: CALL_OW 428
56103: ST_TO_ADDR
// if hex then
56104: LD_VAR 0 6
56108: IFFALSE 56126
// ComMoveUnit ( driver , hex ) else
56110: LD_VAR 0 5
56114: PPUSH
56115: LD_VAR 0 6
56119: PPUSH
56120: CALL_OW 112
56124: GO 56210
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56126: LD_VAR 0 1
56130: PPUSH
56131: LD_EXP 59
56135: PUSH
56136: LD_VAR 0 4
56140: ARRAY
56141: PUSH
56142: LD_INT 3
56144: ARRAY
56145: PPUSH
56146: LD_EXP 59
56150: PUSH
56151: LD_VAR 0 4
56155: ARRAY
56156: PUSH
56157: LD_INT 4
56159: ARRAY
56160: PPUSH
56161: CALL_OW 297
56165: PUSH
56166: LD_INT 0
56168: GREATER
56169: IFFALSE 56210
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56171: LD_VAR 0 5
56175: PPUSH
56176: LD_EXP 59
56180: PUSH
56181: LD_VAR 0 4
56185: ARRAY
56186: PUSH
56187: LD_INT 3
56189: ARRAY
56190: PPUSH
56191: LD_EXP 59
56195: PUSH
56196: LD_VAR 0 4
56200: ARRAY
56201: PUSH
56202: LD_INT 4
56204: ARRAY
56205: PPUSH
56206: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56210: LD_VAR 0 5
56214: PPUSH
56215: CALL_OW 181
// if Multiplayer then
56219: LD_OWVAR 4
56223: IFFALSE 56272
// begin repeat wait ( 10 ) ;
56225: LD_INT 10
56227: PPUSH
56228: CALL_OW 67
// until not IsInUnit ( driver ) ;
56232: LD_VAR 0 5
56236: PPUSH
56237: CALL_OW 310
56241: NOT
56242: IFFALSE 56225
// if not HasTask ( driver ) then
56244: LD_VAR 0 5
56248: PPUSH
56249: CALL_OW 314
56253: NOT
56254: IFFALSE 56270
// ComEnterUnit ( driver , factory ) ;
56256: LD_VAR 0 5
56260: PPUSH
56261: LD_VAR 0 2
56265: PPUSH
56266: CALL_OW 120
// end else
56270: GO 56286
// AddComEnterUnit ( driver , factory ) ;
56272: LD_VAR 0 5
56276: PPUSH
56277: LD_VAR 0 2
56281: PPUSH
56282: CALL_OW 180
// wait ( 0 0$1 ) ;
56286: LD_INT 35
56288: PPUSH
56289: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56293: LD_ADDR_EXP 60
56297: PUSH
56298: LD_EXP 60
56302: PUSH
56303: LD_VAR 0 5
56307: DIFF
56308: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56309: LD_ADDR_EXP 60
56313: PUSH
56314: LD_EXP 60
56318: PUSH
56319: LD_VAR 0 1
56323: DIFF
56324: ST_TO_ADDR
// break ;
56325: GO 56478
// end ; end else
56327: GO 56476
// if GetControl ( vehicle ) = control_remote then
56329: LD_VAR 0 1
56333: PPUSH
56334: CALL_OW 263
56338: PUSH
56339: LD_INT 2
56341: EQUAL
56342: IFFALSE 56428
// begin wait ( 0 0$2 ) ;
56344: LD_INT 70
56346: PPUSH
56347: CALL_OW 67
// repeat wait ( 10 ) ;
56351: LD_INT 10
56353: PPUSH
56354: CALL_OW 67
// Connect ( vehicle ) ;
56358: LD_VAR 0 1
56362: PPUSH
56363: CALL 20611 0 1
// until IsControledBy ( vehicle ) ;
56367: LD_VAR 0 1
56371: PPUSH
56372: CALL_OW 312
56376: IFFALSE 56351
// wait ( 10 ) ;
56378: LD_INT 10
56380: PPUSH
56381: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56385: LD_VAR 0 1
56389: PPUSH
56390: LD_EXP 59
56394: PUSH
56395: LD_VAR 0 4
56399: ARRAY
56400: PUSH
56401: LD_INT 3
56403: ARRAY
56404: PPUSH
56405: LD_EXP 59
56409: PUSH
56410: LD_VAR 0 4
56414: ARRAY
56415: PUSH
56416: LD_INT 4
56418: ARRAY
56419: PPUSH
56420: CALL_OW 111
// break ;
56424: GO 56478
// end else
56426: GO 56476
// begin wait ( 0 0$3 ) ;
56428: LD_INT 105
56430: PPUSH
56431: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56435: LD_VAR 0 1
56439: PPUSH
56440: LD_EXP 59
56444: PUSH
56445: LD_VAR 0 4
56449: ARRAY
56450: PUSH
56451: LD_INT 3
56453: ARRAY
56454: PPUSH
56455: LD_EXP 59
56459: PUSH
56460: LD_VAR 0 4
56464: ARRAY
56465: PUSH
56466: LD_INT 4
56468: ARRAY
56469: PPUSH
56470: CALL_OW 111
// break ;
56474: GO 56478
// end ; end ;
56476: GO 55927
56478: POP
56479: POP
// end ;
56480: LD_VAR 0 3
56484: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56485: LD_INT 0
56487: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56488: LD_VAR 0 1
56492: PUSH
56493: LD_INT 250
56495: EQUAL
56496: IFFALSE 56513
56498: PUSH
56499: LD_VAR 0 2
56503: PPUSH
56504: CALL_OW 264
56508: PUSH
56509: LD_INT 81
56511: EQUAL
56512: AND
56513: IFFALSE 56534
// MinerPlaceMine ( unit , x , y ) ;
56515: LD_VAR 0 2
56519: PPUSH
56520: LD_VAR 0 4
56524: PPUSH
56525: LD_VAR 0 5
56529: PPUSH
56530: CALL 59666 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56534: LD_VAR 0 1
56538: PUSH
56539: LD_INT 251
56541: EQUAL
56542: IFFALSE 56559
56544: PUSH
56545: LD_VAR 0 2
56549: PPUSH
56550: CALL_OW 264
56554: PUSH
56555: LD_INT 81
56557: EQUAL
56558: AND
56559: IFFALSE 56580
// MinerDetonateMine ( unit , x , y ) ;
56561: LD_VAR 0 2
56565: PPUSH
56566: LD_VAR 0 4
56570: PPUSH
56571: LD_VAR 0 5
56575: PPUSH
56576: CALL 59945 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56580: LD_VAR 0 1
56584: PUSH
56585: LD_INT 252
56587: EQUAL
56588: IFFALSE 56605
56590: PUSH
56591: LD_VAR 0 2
56595: PPUSH
56596: CALL_OW 264
56600: PUSH
56601: LD_INT 81
56603: EQUAL
56604: AND
56605: IFFALSE 56626
// MinerCreateMinefield ( unit , x , y ) ;
56607: LD_VAR 0 2
56611: PPUSH
56612: LD_VAR 0 4
56616: PPUSH
56617: LD_VAR 0 5
56621: PPUSH
56622: CALL 60364 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56626: LD_VAR 0 1
56630: PUSH
56631: LD_INT 253
56633: EQUAL
56634: IFFALSE 56651
56636: PUSH
56637: LD_VAR 0 2
56641: PPUSH
56642: CALL_OW 257
56646: PUSH
56647: LD_INT 5
56649: EQUAL
56650: AND
56651: IFFALSE 56672
// ComBinocular ( unit , x , y ) ;
56653: LD_VAR 0 2
56657: PPUSH
56658: LD_VAR 0 4
56662: PPUSH
56663: LD_VAR 0 5
56667: PPUSH
56668: CALL 60739 0 3
// if selectedUnit then
56672: LD_VAR 0 3
56676: IFFALSE 56736
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56678: LD_VAR 0 1
56682: PUSH
56683: LD_INT 254
56685: EQUAL
56686: IFFALSE 56703
56688: PUSH
56689: LD_VAR 0 2
56693: PPUSH
56694: CALL_OW 264
56698: PUSH
56699: LD_INT 99
56701: EQUAL
56702: AND
56703: IFFALSE 56720
56705: PUSH
56706: LD_VAR 0 3
56710: PPUSH
56711: CALL_OW 263
56715: PUSH
56716: LD_INT 3
56718: EQUAL
56719: AND
56720: IFFALSE 56736
// HackDestroyVehicle ( unit , selectedUnit ) ;
56722: LD_VAR 0 2
56726: PPUSH
56727: LD_VAR 0 3
56731: PPUSH
56732: CALL 59026 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56736: LD_VAR 0 1
56740: PUSH
56741: LD_INT 255
56743: EQUAL
56744: IFFALSE 56768
56746: PUSH
56747: LD_VAR 0 2
56751: PPUSH
56752: CALL_OW 264
56756: PUSH
56757: LD_INT 14
56759: PUSH
56760: LD_INT 53
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: IN
56767: AND
56768: IFFALSE 56786
56770: PUSH
56771: LD_VAR 0 4
56775: PPUSH
56776: LD_VAR 0 5
56780: PPUSH
56781: CALL_OW 488
56785: AND
56786: IFFALSE 56810
// CutTreeXYR ( unit , x , y , 12 ) ;
56788: LD_VAR 0 2
56792: PPUSH
56793: LD_VAR 0 4
56797: PPUSH
56798: LD_VAR 0 5
56802: PPUSH
56803: LD_INT 12
56805: PPUSH
56806: CALL 57001 0 4
// if cmd = 256 then
56810: LD_VAR 0 1
56814: PUSH
56815: LD_INT 256
56817: EQUAL
56818: IFFALSE 56839
// SetFactoryWaypoint ( unit , x , y ) ;
56820: LD_VAR 0 2
56824: PPUSH
56825: LD_VAR 0 4
56829: PPUSH
56830: LD_VAR 0 5
56834: PPUSH
56835: CALL 61898 0 3
// if cmd = 257 then
56839: LD_VAR 0 1
56843: PUSH
56844: LD_INT 257
56846: EQUAL
56847: IFFALSE 56868
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56849: LD_VAR 0 2
56853: PPUSH
56854: LD_VAR 0 4
56858: PPUSH
56859: LD_VAR 0 5
56863: PPUSH
56864: CALL 62394 0 3
// if cmd = 258 then
56868: LD_VAR 0 1
56872: PUSH
56873: LD_INT 258
56875: EQUAL
56876: IFFALSE 56900
// BurnTreeXYR ( unit , x , y , 8 ) ;
56878: LD_VAR 0 2
56882: PPUSH
56883: LD_VAR 0 4
56887: PPUSH
56888: LD_VAR 0 5
56892: PPUSH
56893: LD_INT 8
56895: PPUSH
56896: CALL 57401 0 4
// end ;
56900: LD_VAR 0 6
56904: RET
// export function ComRadiation ( un ) ; var eff ; begin
56905: LD_INT 0
56907: PPUSH
56908: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 264
56918: PUSH
56919: LD_INT 91
56921: NONEQUAL
56922: IFFALSE 56926
// exit ;
56924: GO 56996
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56926: LD_INT 68
56928: PPUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 255
56938: PPUSH
56939: CALL_OW 321
56943: PUSH
56944: LD_INT 2
56946: EQUAL
56947: IFFALSE 56959
// eff := 50 else
56949: LD_ADDR_VAR 0 3
56953: PUSH
56954: LD_INT 50
56956: ST_TO_ADDR
56957: GO 56967
// eff := 25 ;
56959: LD_ADDR_VAR 0 3
56963: PUSH
56964: LD_INT 25
56966: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56967: LD_VAR 0 1
56971: PPUSH
56972: CALL_OW 250
56976: PPUSH
56977: LD_VAR 0 1
56981: PPUSH
56982: CALL_OW 251
56986: PPUSH
56987: LD_VAR 0 3
56991: PPUSH
56992: CALL_OW 495
// end ;
56996: LD_VAR 0 2
57000: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57001: LD_INT 0
57003: PPUSH
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57012: LD_VAR 0 1
57016: PPUSH
57017: CALL_OW 302
57021: NOT
57022: IFTRUE 57041
57024: PUSH
57025: LD_VAR 0 2
57029: PPUSH
57030: LD_VAR 0 3
57034: PPUSH
57035: CALL_OW 488
57039: NOT
57040: OR
57041: IFTRUE 57050
57043: PUSH
57044: LD_VAR 0 4
57048: NOT
57049: OR
57050: IFFALSE 57054
// exit ;
57052: GO 57396
// list := [ ] ;
57054: LD_ADDR_VAR 0 13
57058: PUSH
57059: EMPTY
57060: ST_TO_ADDR
// if x - r < 0 then
57061: LD_VAR 0 2
57065: PUSH
57066: LD_VAR 0 4
57070: MINUS
57071: PUSH
57072: LD_INT 0
57074: LESS
57075: IFFALSE 57087
// min_x := 0 else
57077: LD_ADDR_VAR 0 7
57081: PUSH
57082: LD_INT 0
57084: ST_TO_ADDR
57085: GO 57103
// min_x := x - r ;
57087: LD_ADDR_VAR 0 7
57091: PUSH
57092: LD_VAR 0 2
57096: PUSH
57097: LD_VAR 0 4
57101: MINUS
57102: ST_TO_ADDR
// if y - r < 0 then
57103: LD_VAR 0 3
57107: PUSH
57108: LD_VAR 0 4
57112: MINUS
57113: PUSH
57114: LD_INT 0
57116: LESS
57117: IFFALSE 57129
// min_y := 0 else
57119: LD_ADDR_VAR 0 8
57123: PUSH
57124: LD_INT 0
57126: ST_TO_ADDR
57127: GO 57145
// min_y := y - r ;
57129: LD_ADDR_VAR 0 8
57133: PUSH
57134: LD_VAR 0 3
57138: PUSH
57139: LD_VAR 0 4
57143: MINUS
57144: ST_TO_ADDR
// max_x := x + r ;
57145: LD_ADDR_VAR 0 9
57149: PUSH
57150: LD_VAR 0 2
57154: PUSH
57155: LD_VAR 0 4
57159: PLUS
57160: ST_TO_ADDR
// max_y := y + r ;
57161: LD_ADDR_VAR 0 10
57165: PUSH
57166: LD_VAR 0 3
57170: PUSH
57171: LD_VAR 0 4
57175: PLUS
57176: ST_TO_ADDR
// for _x = min_x to max_x do
57177: LD_ADDR_VAR 0 11
57181: PUSH
57182: DOUBLE
57183: LD_VAR 0 7
57187: DEC
57188: ST_TO_ADDR
57189: LD_VAR 0 9
57193: PUSH
57194: FOR_TO
57195: IFFALSE 57314
// for _y = min_y to max_y do
57197: LD_ADDR_VAR 0 12
57201: PUSH
57202: DOUBLE
57203: LD_VAR 0 8
57207: DEC
57208: ST_TO_ADDR
57209: LD_VAR 0 10
57213: PUSH
57214: FOR_TO
57215: IFFALSE 57310
// begin if not ValidHex ( _x , _y ) then
57217: LD_VAR 0 11
57221: PPUSH
57222: LD_VAR 0 12
57226: PPUSH
57227: CALL_OW 488
57231: NOT
57232: IFFALSE 57236
// continue ;
57234: GO 57214
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57236: LD_VAR 0 11
57240: PPUSH
57241: LD_VAR 0 12
57245: PPUSH
57246: CALL_OW 351
57250: IFFALSE 57268
57252: PUSH
57253: LD_VAR 0 11
57257: PPUSH
57258: LD_VAR 0 12
57262: PPUSH
57263: CALL_OW 554
57267: AND
57268: IFFALSE 57308
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57270: LD_ADDR_VAR 0 13
57274: PUSH
57275: LD_VAR 0 13
57279: PPUSH
57280: LD_VAR 0 13
57284: PUSH
57285: LD_INT 1
57287: PLUS
57288: PPUSH
57289: LD_VAR 0 11
57293: PUSH
57294: LD_VAR 0 12
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PPUSH
57303: CALL_OW 2
57307: ST_TO_ADDR
// end ;
57308: GO 57214
57310: POP
57311: POP
57312: GO 57194
57314: POP
57315: POP
// if not list then
57316: LD_VAR 0 13
57320: NOT
57321: IFFALSE 57325
// exit ;
57323: GO 57396
// for i in list do
57325: LD_ADDR_VAR 0 6
57329: PUSH
57330: LD_VAR 0 13
57334: PUSH
57335: FOR_IN
57336: IFFALSE 57394
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57338: LD_VAR 0 1
57342: PPUSH
57343: LD_STRING M
57345: PUSH
57346: LD_VAR 0 6
57350: PUSH
57351: LD_INT 1
57353: ARRAY
57354: PUSH
57355: LD_VAR 0 6
57359: PUSH
57360: LD_INT 2
57362: ARRAY
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: PPUSH
57388: CALL_OW 447
57392: GO 57335
57394: POP
57395: POP
// end ;
57396: LD_VAR 0 5
57400: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57401: LD_INT 0
57403: PPUSH
57404: PPUSH
57405: PPUSH
57406: PPUSH
57407: PPUSH
57408: PPUSH
57409: PPUSH
57410: PPUSH
57411: PPUSH
57412: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57413: LD_VAR 0 1
57417: PPUSH
57418: CALL_OW 302
57422: NOT
57423: IFTRUE 57442
57425: PUSH
57426: LD_VAR 0 2
57430: PPUSH
57431: LD_VAR 0 3
57435: PPUSH
57436: CALL_OW 488
57440: NOT
57441: OR
57442: IFTRUE 57451
57444: PUSH
57445: LD_VAR 0 4
57449: NOT
57450: OR
57451: IFFALSE 57455
// exit ;
57453: GO 57972
// list := [ ] ;
57455: LD_ADDR_VAR 0 13
57459: PUSH
57460: EMPTY
57461: ST_TO_ADDR
// if x - r < 0 then
57462: LD_VAR 0 2
57466: PUSH
57467: LD_VAR 0 4
57471: MINUS
57472: PUSH
57473: LD_INT 0
57475: LESS
57476: IFFALSE 57488
// min_x := 0 else
57478: LD_ADDR_VAR 0 7
57482: PUSH
57483: LD_INT 0
57485: ST_TO_ADDR
57486: GO 57504
// min_x := x - r ;
57488: LD_ADDR_VAR 0 7
57492: PUSH
57493: LD_VAR 0 2
57497: PUSH
57498: LD_VAR 0 4
57502: MINUS
57503: ST_TO_ADDR
// if y - r < 0 then
57504: LD_VAR 0 3
57508: PUSH
57509: LD_VAR 0 4
57513: MINUS
57514: PUSH
57515: LD_INT 0
57517: LESS
57518: IFFALSE 57530
// min_y := 0 else
57520: LD_ADDR_VAR 0 8
57524: PUSH
57525: LD_INT 0
57527: ST_TO_ADDR
57528: GO 57546
// min_y := y - r ;
57530: LD_ADDR_VAR 0 8
57534: PUSH
57535: LD_VAR 0 3
57539: PUSH
57540: LD_VAR 0 4
57544: MINUS
57545: ST_TO_ADDR
// max_x := x + r ;
57546: LD_ADDR_VAR 0 9
57550: PUSH
57551: LD_VAR 0 2
57555: PUSH
57556: LD_VAR 0 4
57560: PLUS
57561: ST_TO_ADDR
// max_y := y + r ;
57562: LD_ADDR_VAR 0 10
57566: PUSH
57567: LD_VAR 0 3
57571: PUSH
57572: LD_VAR 0 4
57576: PLUS
57577: ST_TO_ADDR
// for _x = min_x to max_x do
57578: LD_ADDR_VAR 0 11
57582: PUSH
57583: DOUBLE
57584: LD_VAR 0 7
57588: DEC
57589: ST_TO_ADDR
57590: LD_VAR 0 9
57594: PUSH
57595: FOR_TO
57596: IFFALSE 57715
// for _y = min_y to max_y do
57598: LD_ADDR_VAR 0 12
57602: PUSH
57603: DOUBLE
57604: LD_VAR 0 8
57608: DEC
57609: ST_TO_ADDR
57610: LD_VAR 0 10
57614: PUSH
57615: FOR_TO
57616: IFFALSE 57711
// begin if not ValidHex ( _x , _y ) then
57618: LD_VAR 0 11
57622: PPUSH
57623: LD_VAR 0 12
57627: PPUSH
57628: CALL_OW 488
57632: NOT
57633: IFFALSE 57637
// continue ;
57635: GO 57615
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57637: LD_VAR 0 11
57641: PPUSH
57642: LD_VAR 0 12
57646: PPUSH
57647: CALL_OW 351
57651: IFFALSE 57669
57653: PUSH
57654: LD_VAR 0 11
57658: PPUSH
57659: LD_VAR 0 12
57663: PPUSH
57664: CALL_OW 554
57668: AND
57669: IFFALSE 57709
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57671: LD_ADDR_VAR 0 13
57675: PUSH
57676: LD_VAR 0 13
57680: PPUSH
57681: LD_VAR 0 13
57685: PUSH
57686: LD_INT 1
57688: PLUS
57689: PPUSH
57690: LD_VAR 0 11
57694: PUSH
57695: LD_VAR 0 12
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PPUSH
57704: CALL_OW 2
57708: ST_TO_ADDR
// end ;
57709: GO 57615
57711: POP
57712: POP
57713: GO 57595
57715: POP
57716: POP
// if not list then
57717: LD_VAR 0 13
57721: NOT
57722: IFFALSE 57726
// exit ;
57724: GO 57972
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57726: LD_ADDR_VAR 0 13
57730: PUSH
57731: LD_VAR 0 1
57735: PPUSH
57736: LD_VAR 0 13
57740: PPUSH
57741: LD_INT 1
57743: PPUSH
57744: LD_INT 1
57746: PPUSH
57747: CALL 17739 0 4
57751: ST_TO_ADDR
// ComStop ( flame ) ;
57752: LD_VAR 0 1
57756: PPUSH
57757: CALL_OW 141
// for i in list do
57761: LD_ADDR_VAR 0 6
57765: PUSH
57766: LD_VAR 0 13
57770: PUSH
57771: FOR_IN
57772: IFFALSE 57803
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57774: LD_VAR 0 1
57778: PPUSH
57779: LD_VAR 0 6
57783: PUSH
57784: LD_INT 1
57786: ARRAY
57787: PPUSH
57788: LD_VAR 0 6
57792: PUSH
57793: LD_INT 2
57795: ARRAY
57796: PPUSH
57797: CALL_OW 176
57801: GO 57771
57803: POP
57804: POP
// repeat wait ( 0 0$1 ) ;
57805: LD_INT 35
57807: PPUSH
57808: CALL_OW 67
// task := GetTaskList ( flame ) ;
57812: LD_ADDR_VAR 0 14
57816: PUSH
57817: LD_VAR 0 1
57821: PPUSH
57822: CALL_OW 437
57826: ST_TO_ADDR
// if not task then
57827: LD_VAR 0 14
57831: NOT
57832: IFFALSE 57836
// exit ;
57834: GO 57972
// if task [ 1 ] [ 1 ] <> | then
57836: LD_VAR 0 14
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: PUSH
57845: LD_INT 1
57847: ARRAY
57848: PUSH
57849: LD_STRING |
57851: NONEQUAL
57852: IFFALSE 57856
// exit ;
57854: GO 57972
// _x := task [ 1 ] [ 2 ] ;
57856: LD_ADDR_VAR 0 11
57860: PUSH
57861: LD_VAR 0 14
57865: PUSH
57866: LD_INT 1
57868: ARRAY
57869: PUSH
57870: LD_INT 2
57872: ARRAY
57873: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57874: LD_ADDR_VAR 0 12
57878: PUSH
57879: LD_VAR 0 14
57883: PUSH
57884: LD_INT 1
57886: ARRAY
57887: PUSH
57888: LD_INT 3
57890: ARRAY
57891: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57892: LD_VAR 0 11
57896: PPUSH
57897: LD_VAR 0 12
57901: PPUSH
57902: CALL_OW 351
57906: NOT
57907: IFTRUE 57926
57909: PUSH
57910: LD_VAR 0 11
57914: PPUSH
57915: LD_VAR 0 12
57919: PPUSH
57920: CALL_OW 554
57924: NOT
57925: OR
57926: IFFALSE 57960
// begin task := Delete ( task , 1 ) ;
57928: LD_ADDR_VAR 0 14
57932: PUSH
57933: LD_VAR 0 14
57937: PPUSH
57938: LD_INT 1
57940: PPUSH
57941: CALL_OW 3
57945: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57946: LD_VAR 0 1
57950: PPUSH
57951: LD_VAR 0 14
57955: PPUSH
57956: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57960: LD_VAR 0 1
57964: PPUSH
57965: CALL_OW 314
57969: NOT
57970: IFFALSE 57805
// end ;
57972: LD_VAR 0 5
57976: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57977: LD_EXP 49
57981: NOT
57982: IFFALSE 58032
57984: GO 57986
57986: DISABLE
// begin initHack := true ;
57987: LD_ADDR_EXP 49
57991: PUSH
57992: LD_INT 1
57994: ST_TO_ADDR
// hackTanks := [ ] ;
57995: LD_ADDR_EXP 50
57999: PUSH
58000: EMPTY
58001: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58002: LD_ADDR_EXP 51
58006: PUSH
58007: EMPTY
58008: ST_TO_ADDR
// hackLimit := 3 ;
58009: LD_ADDR_EXP 52
58013: PUSH
58014: LD_INT 3
58016: ST_TO_ADDR
// hackDist := 12 ;
58017: LD_ADDR_EXP 53
58021: PUSH
58022: LD_INT 12
58024: ST_TO_ADDR
// hackCounter := [ ] ;
58025: LD_ADDR_EXP 54
58029: PUSH
58030: EMPTY
58031: ST_TO_ADDR
// end ;
58032: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58033: LD_EXP 49
58037: IFFALSE 58055
58039: PUSH
58040: LD_INT 34
58042: PUSH
58043: LD_INT 99
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PPUSH
58050: CALL_OW 69
58054: AND
58055: IFFALSE 58308
58057: GO 58059
58059: DISABLE
58060: LD_INT 0
58062: PPUSH
58063: PPUSH
// begin enable ;
58064: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58065: LD_ADDR_VAR 0 1
58069: PUSH
58070: LD_INT 34
58072: PUSH
58073: LD_INT 99
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PPUSH
58080: CALL_OW 69
58084: PUSH
58085: FOR_IN
58086: IFFALSE 58306
// begin if not i in hackTanks then
58088: LD_VAR 0 1
58092: PUSH
58093: LD_EXP 50
58097: IN
58098: NOT
58099: IFFALSE 58182
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58101: LD_ADDR_EXP 50
58105: PUSH
58106: LD_EXP 50
58110: PPUSH
58111: LD_EXP 50
58115: PUSH
58116: LD_INT 1
58118: PLUS
58119: PPUSH
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 1
58129: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58130: LD_ADDR_EXP 51
58134: PUSH
58135: LD_EXP 51
58139: PPUSH
58140: LD_EXP 51
58144: PUSH
58145: LD_INT 1
58147: PLUS
58148: PPUSH
58149: EMPTY
58150: PPUSH
58151: CALL_OW 1
58155: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58156: LD_ADDR_EXP 54
58160: PUSH
58161: LD_EXP 54
58165: PPUSH
58166: LD_EXP 54
58170: PUSH
58171: LD_INT 1
58173: PLUS
58174: PPUSH
58175: EMPTY
58176: PPUSH
58177: CALL_OW 1
58181: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58182: LD_VAR 0 1
58186: PPUSH
58187: CALL_OW 302
58191: NOT
58192: IFFALSE 58205
// begin HackUnlinkAll ( i ) ;
58194: LD_VAR 0 1
58198: PPUSH
58199: CALL 58311 0 1
// continue ;
58203: GO 58085
// end ; HackCheckCapturedStatus ( i ) ;
58205: LD_VAR 0 1
58209: PPUSH
58210: CALL 58756 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58214: LD_ADDR_VAR 0 2
58218: PUSH
58219: LD_INT 81
58221: PUSH
58222: LD_VAR 0 1
58226: PPUSH
58227: CALL_OW 255
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 33
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 91
58248: PUSH
58249: LD_VAR 0 1
58253: PUSH
58254: LD_EXP 53
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 50
58266: PUSH
58267: EMPTY
58268: LIST
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: PPUSH
58276: CALL_OW 69
58280: ST_TO_ADDR
// if not tmp then
58281: LD_VAR 0 2
58285: NOT
58286: IFFALSE 58290
// continue ;
58288: GO 58085
// HackLink ( i , tmp ) ;
58290: LD_VAR 0 1
58294: PPUSH
58295: LD_VAR 0 2
58299: PPUSH
58300: CALL 58447 0 2
// end ;
58304: GO 58085
58306: POP
58307: POP
// end ;
58308: PPOPN 2
58310: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58311: LD_INT 0
58313: PPUSH
58314: PPUSH
58315: PPUSH
// if not hack in hackTanks then
58316: LD_VAR 0 1
58320: PUSH
58321: LD_EXP 50
58325: IN
58326: NOT
58327: IFFALSE 58331
// exit ;
58329: GO 58442
// index := GetElementIndex ( hackTanks , hack ) ;
58331: LD_ADDR_VAR 0 4
58335: PUSH
58336: LD_EXP 50
58340: PPUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL 17034 0 2
58350: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58351: LD_EXP 51
58355: PUSH
58356: LD_VAR 0 4
58360: ARRAY
58361: IFFALSE 58442
// begin for i in hackTanksCaptured [ index ] do
58363: LD_ADDR_VAR 0 3
58367: PUSH
58368: LD_EXP 51
58372: PUSH
58373: LD_VAR 0 4
58377: ARRAY
58378: PUSH
58379: FOR_IN
58380: IFFALSE 58406
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58382: LD_VAR 0 3
58386: PUSH
58387: LD_INT 1
58389: ARRAY
58390: PPUSH
58391: LD_VAR 0 3
58395: PUSH
58396: LD_INT 2
58398: ARRAY
58399: PPUSH
58400: CALL_OW 235
58404: GO 58379
58406: POP
58407: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58408: LD_ADDR_EXP 51
58412: PUSH
58413: LD_EXP 51
58417: PPUSH
58418: LD_VAR 0 4
58422: PPUSH
58423: EMPTY
58424: PPUSH
58425: CALL_OW 1
58429: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58430: LD_VAR 0 1
58434: PPUSH
58435: LD_INT 0
58437: PPUSH
58438: CALL_OW 505
// end ; end ;
58442: LD_VAR 0 2
58446: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58447: LD_INT 0
58449: PPUSH
58450: PPUSH
58451: PPUSH
// if not hack in hackTanks or not vehicles then
58452: LD_VAR 0 1
58456: PUSH
58457: LD_EXP 50
58461: IN
58462: NOT
58463: IFTRUE 58472
58465: PUSH
58466: LD_VAR 0 2
58470: NOT
58471: OR
58472: IFFALSE 58476
// exit ;
58474: GO 58751
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58476: LD_ADDR_VAR 0 2
58480: PUSH
58481: LD_VAR 0 1
58485: PPUSH
58486: LD_VAR 0 2
58490: PPUSH
58491: LD_INT 1
58493: PPUSH
58494: LD_INT 1
58496: PPUSH
58497: CALL 17686 0 4
58501: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58502: LD_ADDR_VAR 0 5
58506: PUSH
58507: LD_EXP 50
58511: PPUSH
58512: LD_VAR 0 1
58516: PPUSH
58517: CALL 17034 0 2
58521: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58522: LD_EXP 51
58526: PUSH
58527: LD_VAR 0 5
58531: ARRAY
58532: PUSH
58533: LD_EXP 52
58537: LESS
58538: IFFALSE 58727
// begin for i := 1 to vehicles do
58540: LD_ADDR_VAR 0 4
58544: PUSH
58545: DOUBLE
58546: LD_INT 1
58548: DEC
58549: ST_TO_ADDR
58550: LD_VAR 0 2
58554: PUSH
58555: FOR_TO
58556: IFFALSE 58725
// begin if hackTanksCaptured [ index ] = hackLimit then
58558: LD_EXP 51
58562: PUSH
58563: LD_VAR 0 5
58567: ARRAY
58568: PUSH
58569: LD_EXP 52
58573: EQUAL
58574: IFFALSE 58578
// break ;
58576: GO 58725
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58578: LD_ADDR_EXP 54
58582: PUSH
58583: LD_EXP 54
58587: PPUSH
58588: LD_VAR 0 5
58592: PPUSH
58593: LD_EXP 54
58597: PUSH
58598: LD_VAR 0 5
58602: ARRAY
58603: PUSH
58604: LD_INT 1
58606: PLUS
58607: PPUSH
58608: CALL_OW 1
58612: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58613: LD_ADDR_EXP 51
58617: PUSH
58618: LD_EXP 51
58622: PPUSH
58623: LD_VAR 0 5
58627: PUSH
58628: LD_EXP 51
58632: PUSH
58633: LD_VAR 0 5
58637: ARRAY
58638: PUSH
58639: LD_INT 1
58641: PLUS
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PPUSH
58647: LD_VAR 0 2
58651: PUSH
58652: LD_VAR 0 4
58656: ARRAY
58657: PUSH
58658: LD_VAR 0 2
58662: PUSH
58663: LD_VAR 0 4
58667: ARRAY
58668: PPUSH
58669: CALL_OW 255
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PPUSH
58678: CALL 17251 0 3
58682: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58683: LD_VAR 0 2
58687: PUSH
58688: LD_VAR 0 4
58692: ARRAY
58693: PPUSH
58694: LD_VAR 0 1
58698: PPUSH
58699: CALL_OW 255
58703: PPUSH
58704: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58708: LD_VAR 0 2
58712: PUSH
58713: LD_VAR 0 4
58717: ARRAY
58718: PPUSH
58719: CALL_OW 141
// end ;
58723: GO 58555
58725: POP
58726: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58727: LD_VAR 0 1
58731: PPUSH
58732: LD_EXP 51
58736: PUSH
58737: LD_VAR 0 5
58741: ARRAY
58742: PUSH
58743: LD_INT 0
58745: PLUS
58746: PPUSH
58747: CALL_OW 505
// end ;
58751: LD_VAR 0 3
58755: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58756: LD_INT 0
58758: PPUSH
58759: PPUSH
58760: PPUSH
58761: PPUSH
// if not hack in hackTanks then
58762: LD_VAR 0 1
58766: PUSH
58767: LD_EXP 50
58771: IN
58772: NOT
58773: IFFALSE 58777
// exit ;
58775: GO 59021
// index := GetElementIndex ( hackTanks , hack ) ;
58777: LD_ADDR_VAR 0 4
58781: PUSH
58782: LD_EXP 50
58786: PPUSH
58787: LD_VAR 0 1
58791: PPUSH
58792: CALL 17034 0 2
58796: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58797: LD_ADDR_VAR 0 3
58801: PUSH
58802: DOUBLE
58803: LD_EXP 51
58807: PUSH
58808: LD_VAR 0 4
58812: ARRAY
58813: INC
58814: ST_TO_ADDR
58815: LD_INT 1
58817: PUSH
58818: FOR_DOWNTO
58819: IFFALSE 58995
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58821: LD_ADDR_VAR 0 5
58825: PUSH
58826: LD_EXP 51
58830: PUSH
58831: LD_VAR 0 4
58835: ARRAY
58836: PUSH
58837: LD_VAR 0 3
58841: ARRAY
58842: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58843: LD_VAR 0 5
58847: PUSH
58848: LD_INT 1
58850: ARRAY
58851: PPUSH
58852: CALL_OW 302
58856: NOT
58857: IFTRUE 58885
58859: PUSH
58860: LD_VAR 0 5
58864: PUSH
58865: LD_INT 1
58867: ARRAY
58868: PPUSH
58869: CALL_OW 255
58873: PUSH
58874: LD_VAR 0 1
58878: PPUSH
58879: CALL_OW 255
58883: NONEQUAL
58884: OR
58885: IFFALSE 58993
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58887: LD_VAR 0 5
58891: PUSH
58892: LD_INT 1
58894: ARRAY
58895: PPUSH
58896: CALL_OW 305
58900: IFFALSE 58928
58902: PUSH
58903: LD_VAR 0 5
58907: PUSH
58908: LD_INT 1
58910: ARRAY
58911: PPUSH
58912: CALL_OW 255
58916: PUSH
58917: LD_VAR 0 1
58921: PPUSH
58922: CALL_OW 255
58926: EQUAL
58927: AND
58928: IFFALSE 58952
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58930: LD_VAR 0 5
58934: PUSH
58935: LD_INT 1
58937: ARRAY
58938: PPUSH
58939: LD_VAR 0 5
58943: PUSH
58944: LD_INT 2
58946: ARRAY
58947: PPUSH
58948: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58952: LD_ADDR_EXP 51
58956: PUSH
58957: LD_EXP 51
58961: PPUSH
58962: LD_VAR 0 4
58966: PPUSH
58967: LD_EXP 51
58971: PUSH
58972: LD_VAR 0 4
58976: ARRAY
58977: PPUSH
58978: LD_VAR 0 3
58982: PPUSH
58983: CALL_OW 3
58987: PPUSH
58988: CALL_OW 1
58992: ST_TO_ADDR
// end ; end ;
58993: GO 58818
58995: POP
58996: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58997: LD_VAR 0 1
59001: PPUSH
59002: LD_EXP 51
59006: PUSH
59007: LD_VAR 0 4
59011: ARRAY
59012: PUSH
59013: LD_INT 0
59015: PLUS
59016: PPUSH
59017: CALL_OW 505
// end ;
59021: LD_VAR 0 2
59025: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59026: LD_INT 0
59028: PPUSH
59029: PPUSH
59030: PPUSH
59031: PPUSH
// if not hack in hackTanks then
59032: LD_VAR 0 1
59036: PUSH
59037: LD_EXP 50
59041: IN
59042: NOT
59043: IFFALSE 59047
// exit ;
59045: GO 59132
// index := GetElementIndex ( hackTanks , hack ) ;
59047: LD_ADDR_VAR 0 5
59051: PUSH
59052: LD_EXP 50
59056: PPUSH
59057: LD_VAR 0 1
59061: PPUSH
59062: CALL 17034 0 2
59066: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59067: LD_ADDR_VAR 0 4
59071: PUSH
59072: DOUBLE
59073: LD_INT 1
59075: DEC
59076: ST_TO_ADDR
59077: LD_EXP 51
59081: PUSH
59082: LD_VAR 0 5
59086: ARRAY
59087: PUSH
59088: FOR_TO
59089: IFFALSE 59130
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59091: LD_EXP 51
59095: PUSH
59096: LD_VAR 0 5
59100: ARRAY
59101: PUSH
59102: LD_VAR 0 4
59106: ARRAY
59107: PUSH
59108: LD_INT 1
59110: ARRAY
59111: PUSH
59112: LD_VAR 0 2
59116: EQUAL
59117: IFFALSE 59128
// KillUnit ( vehicle ) ;
59119: LD_VAR 0 2
59123: PPUSH
59124: CALL_OW 66
59128: GO 59088
59130: POP
59131: POP
// end ;
59132: LD_VAR 0 3
59136: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59137: LD_EXP 55
59141: NOT
59142: IFFALSE 59177
59144: GO 59146
59146: DISABLE
// begin initMiner := true ;
59147: LD_ADDR_EXP 55
59151: PUSH
59152: LD_INT 1
59154: ST_TO_ADDR
// minersList := [ ] ;
59155: LD_ADDR_EXP 56
59159: PUSH
59160: EMPTY
59161: ST_TO_ADDR
// minerMinesList := [ ] ;
59162: LD_ADDR_EXP 57
59166: PUSH
59167: EMPTY
59168: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59169: LD_ADDR_EXP 58
59173: PUSH
59174: LD_INT 5
59176: ST_TO_ADDR
// end ;
59177: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59178: LD_EXP 55
59182: IFFALSE 59200
59184: PUSH
59185: LD_INT 34
59187: PUSH
59188: LD_INT 81
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PPUSH
59195: CALL_OW 69
59199: AND
59200: IFFALSE 59663
59202: GO 59204
59204: DISABLE
59205: LD_INT 0
59207: PPUSH
59208: PPUSH
59209: PPUSH
59210: PPUSH
// begin enable ;
59211: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59212: LD_ADDR_VAR 0 1
59216: PUSH
59217: LD_INT 34
59219: PUSH
59220: LD_INT 81
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PPUSH
59227: CALL_OW 69
59231: PUSH
59232: FOR_IN
59233: IFFALSE 59305
// begin if not i in minersList then
59235: LD_VAR 0 1
59239: PUSH
59240: LD_EXP 56
59244: IN
59245: NOT
59246: IFFALSE 59303
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59248: LD_ADDR_EXP 56
59252: PUSH
59253: LD_EXP 56
59257: PPUSH
59258: LD_EXP 56
59262: PUSH
59263: LD_INT 1
59265: PLUS
59266: PPUSH
59267: LD_VAR 0 1
59271: PPUSH
59272: CALL_OW 1
59276: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59277: LD_ADDR_EXP 57
59281: PUSH
59282: LD_EXP 57
59286: PPUSH
59287: LD_EXP 57
59291: PUSH
59292: LD_INT 1
59294: PLUS
59295: PPUSH
59296: EMPTY
59297: PPUSH
59298: CALL_OW 1
59302: ST_TO_ADDR
// end end ;
59303: GO 59232
59305: POP
59306: POP
// for i := minerMinesList downto 1 do
59307: LD_ADDR_VAR 0 1
59311: PUSH
59312: DOUBLE
59313: LD_EXP 57
59317: INC
59318: ST_TO_ADDR
59319: LD_INT 1
59321: PUSH
59322: FOR_DOWNTO
59323: IFFALSE 59661
// begin if IsLive ( minersList [ i ] ) then
59325: LD_EXP 56
59329: PUSH
59330: LD_VAR 0 1
59334: ARRAY
59335: PPUSH
59336: CALL_OW 300
59340: IFFALSE 59368
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59342: LD_EXP 56
59346: PUSH
59347: LD_VAR 0 1
59351: ARRAY
59352: PPUSH
59353: LD_EXP 57
59357: PUSH
59358: LD_VAR 0 1
59362: ARRAY
59363: PPUSH
59364: CALL_OW 505
// if not minerMinesList [ i ] then
59368: LD_EXP 57
59372: PUSH
59373: LD_VAR 0 1
59377: ARRAY
59378: NOT
59379: IFFALSE 59383
// continue ;
59381: GO 59322
// for j := minerMinesList [ i ] downto 1 do
59383: LD_ADDR_VAR 0 2
59387: PUSH
59388: DOUBLE
59389: LD_EXP 57
59393: PUSH
59394: LD_VAR 0 1
59398: ARRAY
59399: INC
59400: ST_TO_ADDR
59401: LD_INT 1
59403: PUSH
59404: FOR_DOWNTO
59405: IFFALSE 59657
// begin side := GetSide ( minersList [ i ] ) ;
59407: LD_ADDR_VAR 0 3
59411: PUSH
59412: LD_EXP 56
59416: PUSH
59417: LD_VAR 0 1
59421: ARRAY
59422: PPUSH
59423: CALL_OW 255
59427: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59428: LD_ADDR_VAR 0 4
59432: PUSH
59433: LD_EXP 57
59437: PUSH
59438: LD_VAR 0 1
59442: ARRAY
59443: PUSH
59444: LD_VAR 0 2
59448: ARRAY
59449: PUSH
59450: LD_INT 1
59452: ARRAY
59453: PPUSH
59454: LD_EXP 57
59458: PUSH
59459: LD_VAR 0 1
59463: ARRAY
59464: PUSH
59465: LD_VAR 0 2
59469: ARRAY
59470: PUSH
59471: LD_INT 2
59473: ARRAY
59474: PPUSH
59475: CALL_OW 428
59479: ST_TO_ADDR
// if not tmp then
59480: LD_VAR 0 4
59484: NOT
59485: IFFALSE 59489
// continue ;
59487: GO 59404
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59489: LD_VAR 0 4
59493: PUSH
59494: LD_INT 81
59496: PUSH
59497: LD_VAR 0 3
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PPUSH
59506: CALL_OW 69
59510: IN
59511: IFFALSE 59561
59513: PUSH
59514: LD_EXP 57
59518: PUSH
59519: LD_VAR 0 1
59523: ARRAY
59524: PUSH
59525: LD_VAR 0 2
59529: ARRAY
59530: PUSH
59531: LD_INT 1
59533: ARRAY
59534: PPUSH
59535: LD_EXP 57
59539: PUSH
59540: LD_VAR 0 1
59544: ARRAY
59545: PUSH
59546: LD_VAR 0 2
59550: ARRAY
59551: PUSH
59552: LD_INT 2
59554: ARRAY
59555: PPUSH
59556: CALL_OW 458
59560: AND
59561: IFFALSE 59655
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59563: LD_EXP 57
59567: PUSH
59568: LD_VAR 0 1
59572: ARRAY
59573: PUSH
59574: LD_VAR 0 2
59578: ARRAY
59579: PUSH
59580: LD_INT 1
59582: ARRAY
59583: PPUSH
59584: LD_EXP 57
59588: PUSH
59589: LD_VAR 0 1
59593: ARRAY
59594: PUSH
59595: LD_VAR 0 2
59599: ARRAY
59600: PUSH
59601: LD_INT 2
59603: ARRAY
59604: PPUSH
59605: LD_VAR 0 3
59609: PPUSH
59610: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59614: LD_ADDR_EXP 57
59618: PUSH
59619: LD_EXP 57
59623: PPUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: LD_EXP 57
59633: PUSH
59634: LD_VAR 0 1
59638: ARRAY
59639: PPUSH
59640: LD_VAR 0 2
59644: PPUSH
59645: CALL_OW 3
59649: PPUSH
59650: CALL_OW 1
59654: ST_TO_ADDR
// end ; end ;
59655: GO 59404
59657: POP
59658: POP
// end ;
59659: GO 59322
59661: POP
59662: POP
// end ;
59663: PPOPN 4
59665: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59666: LD_INT 0
59668: PPUSH
59669: PPUSH
// result := false ;
59670: LD_ADDR_VAR 0 4
59674: PUSH
59675: LD_INT 0
59677: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59678: LD_VAR 0 1
59682: PPUSH
59683: CALL_OW 264
59687: PUSH
59688: LD_INT 81
59690: EQUAL
59691: NOT
59692: IFFALSE 59696
// exit ;
59694: GO 59940
// index := GetElementIndex ( minersList , unit ) ;
59696: LD_ADDR_VAR 0 5
59700: PUSH
59701: LD_EXP 56
59705: PPUSH
59706: LD_VAR 0 1
59710: PPUSH
59711: CALL 17034 0 2
59715: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59716: LD_EXP 57
59720: PUSH
59721: LD_VAR 0 5
59725: ARRAY
59726: PUSH
59727: LD_EXP 58
59731: GREATEREQUAL
59732: IFFALSE 59736
// exit ;
59734: GO 59940
// ComMoveXY ( unit , x , y ) ;
59736: LD_VAR 0 1
59740: PPUSH
59741: LD_VAR 0 2
59745: PPUSH
59746: LD_VAR 0 3
59750: PPUSH
59751: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59755: LD_INT 35
59757: PPUSH
59758: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59762: LD_VAR 0 1
59766: PPUSH
59767: LD_VAR 0 2
59771: PPUSH
59772: LD_VAR 0 3
59776: PPUSH
59777: CALL 49080 0 3
59781: NOT
59782: IFFALSE 59795
59784: PUSH
59785: LD_VAR 0 1
59789: PPUSH
59790: CALL_OW 314
59794: AND
59795: IFFALSE 59799
// exit ;
59797: GO 59940
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59799: LD_VAR 0 2
59803: PPUSH
59804: LD_VAR 0 3
59808: PPUSH
59809: CALL_OW 428
59813: PUSH
59814: LD_VAR 0 1
59818: EQUAL
59819: IFFALSE 59833
59821: PUSH
59822: LD_VAR 0 1
59826: PPUSH
59827: CALL_OW 314
59831: NOT
59832: AND
59833: IFFALSE 59755
// PlaySoundXY ( x , y , PlantMine ) ;
59835: LD_VAR 0 2
59839: PPUSH
59840: LD_VAR 0 3
59844: PPUSH
59845: LD_STRING PlantMine
59847: PPUSH
59848: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59852: LD_VAR 0 2
59856: PPUSH
59857: LD_VAR 0 3
59861: PPUSH
59862: LD_VAR 0 1
59866: PPUSH
59867: CALL_OW 255
59871: PPUSH
59872: LD_INT 0
59874: PPUSH
59875: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59879: LD_ADDR_EXP 57
59883: PUSH
59884: LD_EXP 57
59888: PPUSH
59889: LD_VAR 0 5
59893: PUSH
59894: LD_EXP 57
59898: PUSH
59899: LD_VAR 0 5
59903: ARRAY
59904: PUSH
59905: LD_INT 1
59907: PLUS
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PPUSH
59913: LD_VAR 0 2
59917: PUSH
59918: LD_VAR 0 3
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PPUSH
59927: CALL 17251 0 3
59931: ST_TO_ADDR
// result := true ;
59932: LD_ADDR_VAR 0 4
59936: PUSH
59937: LD_INT 1
59939: ST_TO_ADDR
// end ;
59940: LD_VAR 0 4
59944: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59945: LD_INT 0
59947: PPUSH
59948: PPUSH
59949: PPUSH
// if not unit in minersList then
59950: LD_VAR 0 1
59954: PUSH
59955: LD_EXP 56
59959: IN
59960: NOT
59961: IFFALSE 59965
// exit ;
59963: GO 60359
// index := GetElementIndex ( minersList , unit ) ;
59965: LD_ADDR_VAR 0 6
59969: PUSH
59970: LD_EXP 56
59974: PPUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: CALL 17034 0 2
59984: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59985: LD_ADDR_VAR 0 5
59989: PUSH
59990: DOUBLE
59991: LD_EXP 57
59995: PUSH
59996: LD_VAR 0 6
60000: ARRAY
60001: INC
60002: ST_TO_ADDR
60003: LD_INT 1
60005: PUSH
60006: FOR_DOWNTO
60007: IFFALSE 60170
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60009: LD_EXP 57
60013: PUSH
60014: LD_VAR 0 6
60018: ARRAY
60019: PUSH
60020: LD_VAR 0 5
60024: ARRAY
60025: PUSH
60026: LD_INT 1
60028: ARRAY
60029: PUSH
60030: LD_VAR 0 2
60034: EQUAL
60035: IFFALSE 60065
60037: PUSH
60038: LD_EXP 57
60042: PUSH
60043: LD_VAR 0 6
60047: ARRAY
60048: PUSH
60049: LD_VAR 0 5
60053: ARRAY
60054: PUSH
60055: LD_INT 2
60057: ARRAY
60058: PUSH
60059: LD_VAR 0 3
60063: EQUAL
60064: AND
60065: IFFALSE 60168
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60067: LD_EXP 57
60071: PUSH
60072: LD_VAR 0 6
60076: ARRAY
60077: PUSH
60078: LD_VAR 0 5
60082: ARRAY
60083: PUSH
60084: LD_INT 1
60086: ARRAY
60087: PPUSH
60088: LD_EXP 57
60092: PUSH
60093: LD_VAR 0 6
60097: ARRAY
60098: PUSH
60099: LD_VAR 0 5
60103: ARRAY
60104: PUSH
60105: LD_INT 2
60107: ARRAY
60108: PPUSH
60109: LD_VAR 0 1
60113: PPUSH
60114: CALL_OW 255
60118: PPUSH
60119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60123: LD_ADDR_EXP 57
60127: PUSH
60128: LD_EXP 57
60132: PPUSH
60133: LD_VAR 0 6
60137: PPUSH
60138: LD_EXP 57
60142: PUSH
60143: LD_VAR 0 6
60147: ARRAY
60148: PPUSH
60149: LD_VAR 0 5
60153: PPUSH
60154: CALL_OW 3
60158: PPUSH
60159: CALL_OW 1
60163: ST_TO_ADDR
// exit ;
60164: POP
60165: POP
60166: GO 60359
// end ; end ;
60168: GO 60006
60170: POP
60171: POP
// for i := minerMinesList [ index ] downto 1 do
60172: LD_ADDR_VAR 0 5
60176: PUSH
60177: DOUBLE
60178: LD_EXP 57
60182: PUSH
60183: LD_VAR 0 6
60187: ARRAY
60188: INC
60189: ST_TO_ADDR
60190: LD_INT 1
60192: PUSH
60193: FOR_DOWNTO
60194: IFFALSE 60357
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60196: LD_EXP 57
60200: PUSH
60201: LD_VAR 0 6
60205: ARRAY
60206: PUSH
60207: LD_VAR 0 5
60211: ARRAY
60212: PUSH
60213: LD_INT 1
60215: ARRAY
60216: PPUSH
60217: LD_EXP 57
60221: PUSH
60222: LD_VAR 0 6
60226: ARRAY
60227: PUSH
60228: LD_VAR 0 5
60232: ARRAY
60233: PUSH
60234: LD_INT 2
60236: ARRAY
60237: PPUSH
60238: LD_VAR 0 2
60242: PPUSH
60243: LD_VAR 0 3
60247: PPUSH
60248: CALL_OW 298
60252: PUSH
60253: LD_INT 6
60255: LESS
60256: IFFALSE 60355
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60258: LD_EXP 57
60262: PUSH
60263: LD_VAR 0 6
60267: ARRAY
60268: PUSH
60269: LD_VAR 0 5
60273: ARRAY
60274: PUSH
60275: LD_INT 1
60277: ARRAY
60278: PPUSH
60279: LD_EXP 57
60283: PUSH
60284: LD_VAR 0 6
60288: ARRAY
60289: PUSH
60290: LD_VAR 0 5
60294: ARRAY
60295: PUSH
60296: LD_INT 2
60298: ARRAY
60299: PPUSH
60300: LD_VAR 0 1
60304: PPUSH
60305: CALL_OW 255
60309: PPUSH
60310: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60314: LD_ADDR_EXP 57
60318: PUSH
60319: LD_EXP 57
60323: PPUSH
60324: LD_VAR 0 6
60328: PPUSH
60329: LD_EXP 57
60333: PUSH
60334: LD_VAR 0 6
60338: ARRAY
60339: PPUSH
60340: LD_VAR 0 5
60344: PPUSH
60345: CALL_OW 3
60349: PPUSH
60350: CALL_OW 1
60354: ST_TO_ADDR
// end ; end ;
60355: GO 60193
60357: POP
60358: POP
// end ;
60359: LD_VAR 0 4
60363: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60364: LD_INT 0
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
60371: PPUSH
60372: PPUSH
60373: PPUSH
60374: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 264
60384: PUSH
60385: LD_INT 81
60387: EQUAL
60388: NOT
60389: IFTRUE 60404
60391: PUSH
60392: LD_VAR 0 1
60396: PUSH
60397: LD_EXP 56
60401: IN
60402: NOT
60403: OR
60404: IFFALSE 60408
// exit ;
60406: GO 60734
// index := GetElementIndex ( minersList , unit ) ;
60408: LD_ADDR_VAR 0 6
60412: PUSH
60413: LD_EXP 56
60417: PPUSH
60418: LD_VAR 0 1
60422: PPUSH
60423: CALL 17034 0 2
60427: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60428: LD_ADDR_VAR 0 8
60432: PUSH
60433: LD_EXP 58
60437: PUSH
60438: LD_EXP 57
60442: PUSH
60443: LD_VAR 0 6
60447: ARRAY
60448: MINUS
60449: ST_TO_ADDR
// if not minesFreeAmount then
60450: LD_VAR 0 8
60454: NOT
60455: IFFALSE 60459
// exit ;
60457: GO 60734
// tmp := [ ] ;
60459: LD_ADDR_VAR 0 7
60463: PUSH
60464: EMPTY
60465: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60466: LD_ADDR_VAR 0 5
60470: PUSH
60471: DOUBLE
60472: LD_INT 1
60474: DEC
60475: ST_TO_ADDR
60476: LD_VAR 0 8
60480: PUSH
60481: FOR_TO
60482: IFFALSE 60681
// begin _d := rand ( 0 , 5 ) ;
60484: LD_ADDR_VAR 0 11
60488: PUSH
60489: LD_INT 0
60491: PPUSH
60492: LD_INT 5
60494: PPUSH
60495: CALL_OW 12
60499: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60500: LD_ADDR_VAR 0 12
60504: PUSH
60505: LD_INT 2
60507: PPUSH
60508: LD_INT 6
60510: PPUSH
60511: CALL_OW 12
60515: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60516: LD_ADDR_VAR 0 9
60520: PUSH
60521: LD_VAR 0 2
60525: PPUSH
60526: LD_VAR 0 11
60530: PPUSH
60531: LD_VAR 0 12
60535: PPUSH
60536: CALL_OW 272
60540: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60541: LD_ADDR_VAR 0 10
60545: PUSH
60546: LD_VAR 0 3
60550: PPUSH
60551: LD_VAR 0 11
60555: PPUSH
60556: LD_VAR 0 12
60560: PPUSH
60561: CALL_OW 273
60565: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60566: LD_VAR 0 9
60570: PPUSH
60571: LD_VAR 0 10
60575: PPUSH
60576: CALL_OW 488
60580: IFFALSE 60604
60582: PUSH
60583: LD_VAR 0 9
60587: PUSH
60588: LD_VAR 0 10
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_VAR 0 7
60601: IN
60602: NOT
60603: AND
60604: IFFALSE 60623
60606: PUSH
60607: LD_VAR 0 9
60611: PPUSH
60612: LD_VAR 0 10
60616: PPUSH
60617: CALL_OW 458
60621: NOT
60622: AND
60623: IFFALSE 60665
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60625: LD_ADDR_VAR 0 7
60629: PUSH
60630: LD_VAR 0 7
60634: PPUSH
60635: LD_VAR 0 7
60639: PUSH
60640: LD_INT 1
60642: PLUS
60643: PPUSH
60644: LD_VAR 0 9
60648: PUSH
60649: LD_VAR 0 10
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PPUSH
60658: CALL_OW 1
60662: ST_TO_ADDR
60663: GO 60679
// i := i - 1 ;
60665: LD_ADDR_VAR 0 5
60669: PUSH
60670: LD_VAR 0 5
60674: PUSH
60675: LD_INT 1
60677: MINUS
60678: ST_TO_ADDR
// end ;
60679: GO 60481
60681: POP
60682: POP
// for i in tmp do
60683: LD_ADDR_VAR 0 5
60687: PUSH
60688: LD_VAR 0 7
60692: PUSH
60693: FOR_IN
60694: IFFALSE 60732
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60696: LD_VAR 0 1
60700: PPUSH
60701: LD_VAR 0 5
60705: PUSH
60706: LD_INT 1
60708: ARRAY
60709: PPUSH
60710: LD_VAR 0 5
60714: PUSH
60715: LD_INT 2
60717: ARRAY
60718: PPUSH
60719: CALL 59666 0 3
60723: NOT
60724: IFFALSE 60730
// exit ;
60726: POP
60727: POP
60728: GO 60734
60730: GO 60693
60732: POP
60733: POP
// end ;
60734: LD_VAR 0 4
60738: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60739: LD_INT 0
60741: PPUSH
60742: PPUSH
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
60747: PPUSH
60748: PPUSH
60749: PPUSH
// if GetClass ( unit ) <> class_sniper then
60750: LD_VAR 0 1
60754: PPUSH
60755: CALL_OW 257
60759: PUSH
60760: LD_INT 5
60762: NONEQUAL
60763: IFFALSE 60767
// exit ;
60765: GO 61237
// dist := 8 ;
60767: LD_ADDR_VAR 0 5
60771: PUSH
60772: LD_INT 8
60774: ST_TO_ADDR
// viewRange := 12 ;
60775: LD_ADDR_VAR 0 8
60779: PUSH
60780: LD_INT 12
60782: ST_TO_ADDR
// side := GetSide ( unit ) ;
60783: LD_ADDR_VAR 0 6
60787: PUSH
60788: LD_VAR 0 1
60792: PPUSH
60793: CALL_OW 255
60797: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60798: LD_INT 61
60800: PPUSH
60801: LD_VAR 0 6
60805: PPUSH
60806: CALL_OW 321
60810: PUSH
60811: LD_INT 2
60813: EQUAL
60814: IFFALSE 60824
// viewRange := 16 ;
60816: LD_ADDR_VAR 0 8
60820: PUSH
60821: LD_INT 16
60823: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60824: LD_VAR 0 1
60828: PPUSH
60829: LD_VAR 0 2
60833: PPUSH
60834: LD_VAR 0 3
60838: PPUSH
60839: CALL_OW 297
60843: PUSH
60844: LD_VAR 0 5
60848: GREATER
60849: IFFALSE 60928
// begin ComMoveXY ( unit , x , y ) ;
60851: LD_VAR 0 1
60855: PPUSH
60856: LD_VAR 0 2
60860: PPUSH
60861: LD_VAR 0 3
60865: PPUSH
60866: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60870: LD_INT 35
60872: PPUSH
60873: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60877: LD_VAR 0 1
60881: PPUSH
60882: LD_VAR 0 2
60886: PPUSH
60887: LD_VAR 0 3
60891: PPUSH
60892: CALL 49080 0 3
60896: NOT
60897: IFFALSE 60901
// exit ;
60899: GO 61237
// until GetDistUnitXY ( unit , x , y ) < dist ;
60901: LD_VAR 0 1
60905: PPUSH
60906: LD_VAR 0 2
60910: PPUSH
60911: LD_VAR 0 3
60915: PPUSH
60916: CALL_OW 297
60920: PUSH
60921: LD_VAR 0 5
60925: LESS
60926: IFFALSE 60870
// end ; ComTurnXY ( unit , x , y ) ;
60928: LD_VAR 0 1
60932: PPUSH
60933: LD_VAR 0 2
60937: PPUSH
60938: LD_VAR 0 3
60942: PPUSH
60943: CALL_OW 118
// repeat if Multiplayer then
60947: LD_OWVAR 4
60951: IFFALSE 60962
// wait ( 35 ) else
60953: LD_INT 35
60955: PPUSH
60956: CALL_OW 67
60960: GO 60969
// wait ( 5 ) ;
60962: LD_INT 5
60964: PPUSH
60965: CALL_OW 67
// _d := GetDir ( unit ) ;
60969: LD_ADDR_VAR 0 11
60973: PUSH
60974: LD_VAR 0 1
60978: PPUSH
60979: CALL_OW 254
60983: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60984: LD_ADDR_VAR 0 7
60988: PUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 250
60998: PPUSH
60999: LD_VAR 0 1
61003: PPUSH
61004: CALL_OW 251
61008: PPUSH
61009: LD_VAR 0 2
61013: PPUSH
61014: LD_VAR 0 3
61018: PPUSH
61019: CALL 51716 0 4
61023: ST_TO_ADDR
// until dir = _d ;
61024: LD_VAR 0 7
61028: PUSH
61029: LD_VAR 0 11
61033: EQUAL
61034: IFFALSE 60947
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61036: LD_ADDR_VAR 0 9
61040: PUSH
61041: LD_VAR 0 1
61045: PPUSH
61046: CALL_OW 250
61050: PPUSH
61051: LD_VAR 0 7
61055: PPUSH
61056: LD_VAR 0 5
61060: PPUSH
61061: CALL_OW 272
61065: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61066: LD_ADDR_VAR 0 10
61070: PUSH
61071: LD_VAR 0 1
61075: PPUSH
61076: CALL_OW 251
61080: PPUSH
61081: LD_VAR 0 7
61085: PPUSH
61086: LD_VAR 0 5
61090: PPUSH
61091: CALL_OW 273
61095: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61096: LD_VAR 0 9
61100: PPUSH
61101: LD_VAR 0 10
61105: PPUSH
61106: CALL_OW 488
61110: NOT
61111: IFFALSE 61115
// exit ;
61113: GO 61237
// ComAnimCustom ( unit , 1 ) ;
61115: LD_VAR 0 1
61119: PPUSH
61120: LD_INT 1
61122: PPUSH
61123: CALL_OW 592
// p := 0 ;
61127: LD_ADDR_VAR 0 12
61131: PUSH
61132: LD_INT 0
61134: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61135: LD_VAR 0 9
61139: PPUSH
61140: LD_VAR 0 10
61144: PPUSH
61145: LD_VAR 0 6
61149: PPUSH
61150: LD_VAR 0 8
61154: PPUSH
61155: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61159: LD_INT 35
61161: PPUSH
61162: CALL_OW 67
// p := Inc ( p ) ;
61166: LD_ADDR_VAR 0 12
61170: PUSH
61171: LD_VAR 0 12
61175: PPUSH
61176: CALL 51672 0 1
61180: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61181: LD_VAR 0 12
61185: PUSH
61186: LD_INT 3
61188: EQUAL
61189: IFTRUE 61203
61191: PUSH
61192: LD_VAR 0 1
61196: PPUSH
61197: CALL_OW 302
61201: NOT
61202: OR
61203: IFTRUE 61216
61205: PUSH
61206: LD_VAR 0 1
61210: PPUSH
61211: CALL_OW 301
61215: OR
61216: IFFALSE 61159
// RemoveSeeing ( _x , _y , side ) ;
61218: LD_VAR 0 9
61222: PPUSH
61223: LD_VAR 0 10
61227: PPUSH
61228: LD_VAR 0 6
61232: PPUSH
61233: CALL_OW 331
// end ; end_of_file
61237: LD_VAR 0 4
61241: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61242: PPOPN 6
61244: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61245: LD_EXP 3
61249: PUSH
61250: LD_INT 4
61252: EQUAL
61253: IFFALSE 61289
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61255: LD_STRING setGameDifficulty(
61257: PUSH
61258: LD_OWVAR 67
61262: STR
61263: PUSH
61264: LD_STRING )
61266: STR
61267: PPUSH
61268: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61272: LD_STRING displayDifficulty(
61274: PUSH
61275: LD_OWVAR 67
61279: STR
61280: PUSH
61281: LD_STRING )
61283: STR
61284: PPUSH
61285: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61289: CALL 61318 0 0
// end ; end_of_file
61293: PPOPN 1
61295: END
// every 0 0$1 do
61296: GO 61298
61298: DISABLE
// begin enable ;
61299: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61300: LD_STRING updateTimer(
61302: PUSH
61303: LD_OWVAR 1
61307: STR
61308: PUSH
61309: LD_STRING );
61311: STR
61312: PPUSH
61313: CALL_OW 559
// end ;
61317: END
// export function SOS_MapStart ( ) ; begin
61318: LD_INT 0
61320: PPUSH
// UpdateFactoryWaypoints ( ) ;
61321: CALL 62252 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61325: CALL 62504 0 0
// ParseMultiDataToLua ( ) ;
61329: CALL 62651 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61333: LD_STRING setSpecLogoNumber(
61335: PUSH
61336: LD_INT 2
61338: STR
61339: PUSH
61340: LD_STRING ,
61342: STR
61343: PUSH
61344: LD_INT 1
61346: STR
61347: PUSH
61348: LD_STRING )
61350: STR
61351: PPUSH
61352: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61356: LD_STRING setSpecLogoNumber(
61358: PUSH
61359: LD_INT 3
61361: STR
61362: PUSH
61363: LD_STRING ,
61365: STR
61366: PUSH
61367: LD_INT 2
61369: STR
61370: PUSH
61371: LD_STRING )
61373: STR
61374: PPUSH
61375: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61379: LD_STRING setSpecLogoNumber(
61381: PUSH
61382: LD_INT 4
61384: STR
61385: PUSH
61386: LD_STRING ,
61388: STR
61389: PUSH
61390: LD_INT 3
61392: STR
61393: PUSH
61394: LD_STRING )
61396: STR
61397: PPUSH
61398: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61402: LD_STRING setSpecLogoNumber(
61404: PUSH
61405: LD_INT 5
61407: STR
61408: PUSH
61409: LD_STRING ,
61411: STR
61412: PUSH
61413: LD_INT 4
61415: STR
61416: PUSH
61417: LD_STRING )
61419: STR
61420: PPUSH
61421: CALL_OW 559
// end ;
61425: LD_VAR 0 1
61429: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61430: LD_INT 0
61432: PPUSH
61433: PPUSH
61434: PPUSH
61435: PPUSH
61436: PPUSH
61437: PPUSH
61438: PPUSH
61439: PPUSH
61440: PPUSH
// for i := 1 to 8 do
61441: LD_ADDR_VAR 0 2
61445: PUSH
61446: DOUBLE
61447: LD_INT 1
61449: DEC
61450: ST_TO_ADDR
61451: LD_INT 8
61453: PUSH
61454: FOR_TO
61455: IFFALSE 61840
// begin if mpSidePositions [ i ] then
61457: LD_EXP 7
61461: PUSH
61462: LD_VAR 0 2
61466: ARRAY
61467: IFFALSE 61838
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61469: LD_ADDR_VAR 0 7
61473: PUSH
61474: LD_INT 22
61476: PUSH
61477: LD_VAR 0 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 21
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PPUSH
61500: CALL_OW 69
61504: PPUSH
61505: CALL 14367 0 1
61509: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61510: LD_ADDR_VAR 0 9
61514: PUSH
61515: LD_INT 22
61517: PUSH
61518: LD_VAR 0 2
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: LD_INT 30
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 30
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PPUSH
61559: CALL_OW 69
61563: ST_TO_ADDR
// crates := 0 ;
61564: LD_ADDR_VAR 0 4
61568: PUSH
61569: LD_INT 0
61571: ST_TO_ADDR
// oil := 0 ;
61572: LD_ADDR_VAR 0 5
61576: PUSH
61577: LD_INT 0
61579: ST_TO_ADDR
// sib := 0 ;
61580: LD_ADDR_VAR 0 6
61584: PUSH
61585: LD_INT 0
61587: ST_TO_ADDR
// if bases then
61588: LD_VAR 0 9
61592: IFFALSE 61698
// begin for j in bases do
61594: LD_ADDR_VAR 0 3
61598: PUSH
61599: LD_VAR 0 9
61603: PUSH
61604: FOR_IN
61605: IFFALSE 61696
// begin base := GetBase ( j ) ;
61607: LD_ADDR_VAR 0 8
61611: PUSH
61612: LD_VAR 0 3
61616: PPUSH
61617: CALL_OW 274
61621: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61622: LD_ADDR_VAR 0 4
61626: PUSH
61627: LD_VAR 0 4
61631: PUSH
61632: LD_VAR 0 8
61636: PPUSH
61637: LD_INT 1
61639: PPUSH
61640: CALL_OW 275
61644: PLUS
61645: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61646: LD_ADDR_VAR 0 5
61650: PUSH
61651: LD_VAR 0 5
61655: PUSH
61656: LD_VAR 0 8
61660: PPUSH
61661: LD_INT 2
61663: PPUSH
61664: CALL_OW 275
61668: PLUS
61669: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61670: LD_ADDR_VAR 0 6
61674: PUSH
61675: LD_VAR 0 6
61679: PUSH
61680: LD_VAR 0 8
61684: PPUSH
61685: LD_INT 3
61687: PPUSH
61688: CALL_OW 275
61692: PLUS
61693: ST_TO_ADDR
// end ;
61694: GO 61604
61696: POP
61697: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61698: LD_STRING setSpecText(
61700: PUSH
61701: LD_VAR 0 2
61705: STR
61706: PUSH
61707: LD_STRING ,
61709: STR
61710: PUSH
61711: LD_INT 2
61713: STR
61714: PUSH
61715: LD_STRING ,
61717: STR
61718: PUSH
61719: LD_VAR 0 4
61723: STR
61724: PUSH
61725: LD_STRING )
61727: STR
61728: PPUSH
61729: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61733: LD_STRING setSpecText(
61735: PUSH
61736: LD_VAR 0 2
61740: STR
61741: PUSH
61742: LD_STRING ,
61744: STR
61745: PUSH
61746: LD_INT 3
61748: STR
61749: PUSH
61750: LD_STRING ,
61752: STR
61753: PUSH
61754: LD_VAR 0 5
61758: STR
61759: PUSH
61760: LD_STRING )
61762: STR
61763: PPUSH
61764: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61768: LD_STRING setSpecText(
61770: PUSH
61771: LD_VAR 0 2
61775: STR
61776: PUSH
61777: LD_STRING ,
61779: STR
61780: PUSH
61781: LD_INT 4
61783: STR
61784: PUSH
61785: LD_STRING ,
61787: STR
61788: PUSH
61789: LD_VAR 0 6
61793: STR
61794: PUSH
61795: LD_STRING )
61797: STR
61798: PPUSH
61799: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61803: LD_STRING setSpecText(
61805: PUSH
61806: LD_VAR 0 2
61810: STR
61811: PUSH
61812: LD_STRING ,
61814: STR
61815: PUSH
61816: LD_INT 5
61818: STR
61819: PUSH
61820: LD_STRING ,
61822: STR
61823: PUSH
61824: LD_VAR 0 7
61828: STR
61829: PUSH
61830: LD_STRING )
61832: STR
61833: PPUSH
61834: CALL_OW 559
// end ; end ;
61838: GO 61454
61840: POP
61841: POP
// end ;
61842: LD_VAR 0 1
61846: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61847: LD_INT 2
61849: PUSH
61850: LD_INT 30
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 30
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: PPUSH
61875: CALL_OW 69
61879: IFFALSE 61889
61881: GO 61883
61883: DISABLE
// begin enable ;
61884: ENABLE
// UpdateSpectatorBar ;
61885: CALL 61430 0 0
// end ;
61889: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61890: LD_INT 0
61892: PPUSH
// end ;
61893: LD_VAR 0 12
61897: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61898: LD_INT 0
61900: PPUSH
61901: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61902: LD_VAR 0 1
61906: NOT
61907: IFTRUE 61926
61909: PUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: LD_VAR 0 3
61919: PPUSH
61920: CALL_OW 488
61924: NOT
61925: OR
61926: IFTRUE 61961
61928: PUSH
61929: LD_VAR 0 1
61933: PPUSH
61934: CALL_OW 266
61938: PUSH
61939: LD_INT 3
61941: NONEQUAL
61942: IFFALSE 61960
61944: PUSH
61945: LD_VAR 0 1
61949: PPUSH
61950: CALL_OW 247
61954: PUSH
61955: LD_INT 1
61957: EQUAL
61958: NOT
61959: AND
61960: OR
61961: IFFALSE 61965
// exit ;
61963: GO 62247
// if GetType ( factory ) = unit_human then
61965: LD_VAR 0 1
61969: PPUSH
61970: CALL_OW 247
61974: PUSH
61975: LD_INT 1
61977: EQUAL
61978: IFFALSE 61995
// factory := IsInUnit ( factory ) ;
61980: LD_ADDR_VAR 0 1
61984: PUSH
61985: LD_VAR 0 1
61989: PPUSH
61990: CALL_OW 310
61994: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61995: LD_VAR 0 1
61999: PPUSH
62000: CALL_OW 266
62004: PUSH
62005: LD_INT 3
62007: NONEQUAL
62008: IFFALSE 62012
// exit ;
62010: GO 62247
// for i := 1 to Count ( factoryWaypoints ) do
62012: LD_ADDR_VAR 0 5
62016: PUSH
62017: DOUBLE
62018: LD_INT 1
62020: DEC
62021: ST_TO_ADDR
62022: LD_EXP 59
62026: PPUSH
62027: CALL 14367 0 1
62031: PUSH
62032: FOR_TO
62033: IFFALSE 62195
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62035: LD_VAR 0 2
62039: PPUSH
62040: LD_VAR 0 3
62044: PPUSH
62045: CALL_OW 428
62049: PUSH
62050: LD_EXP 59
62054: PUSH
62055: LD_VAR 0 5
62059: ARRAY
62060: PUSH
62061: LD_INT 2
62063: ARRAY
62064: EQUAL
62065: IFFALSE 62097
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62067: LD_ADDR_EXP 59
62071: PUSH
62072: LD_EXP 59
62076: PPUSH
62077: LD_VAR 0 5
62081: PPUSH
62082: CALL_OW 3
62086: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62087: CALL 62252 0 0
// exit ;
62091: POP
62092: POP
62093: GO 62247
// end else
62095: GO 62193
// if factory = factoryWaypoints [ i ] [ 2 ] then
62097: LD_VAR 0 1
62101: PUSH
62102: LD_EXP 59
62106: PUSH
62107: LD_VAR 0 5
62111: ARRAY
62112: PUSH
62113: LD_INT 2
62115: ARRAY
62116: EQUAL
62117: IFFALSE 62193
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62119: LD_ADDR_EXP 59
62123: PUSH
62124: LD_EXP 59
62128: PPUSH
62129: LD_VAR 0 5
62133: PPUSH
62134: CALL_OW 3
62138: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62139: LD_ADDR_EXP 59
62143: PUSH
62144: LD_EXP 59
62148: PPUSH
62149: LD_VAR 0 1
62153: PPUSH
62154: CALL_OW 255
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: LD_VAR 0 2
62168: PUSH
62169: LD_VAR 0 3
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: PPUSH
62180: CALL 50299 0 2
62184: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62185: CALL 62252 0 0
// exit ;
62189: POP
62190: POP
62191: GO 62247
// end ; end ;
62193: GO 62032
62195: POP
62196: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
62197: LD_ADDR_EXP 59
62201: PUSH
62202: LD_EXP 59
62206: PPUSH
62207: LD_VAR 0 1
62211: PPUSH
62212: CALL_OW 255
62216: PUSH
62217: LD_VAR 0 1
62221: PUSH
62222: LD_VAR 0 2
62226: PUSH
62227: LD_VAR 0 3
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: PPUSH
62238: CALL 50299 0 2
62242: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62243: CALL 62252 0 0
// end ;
62247: LD_VAR 0 4
62251: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62252: LD_INT 0
62254: PPUSH
62255: PPUSH
62256: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62257: LD_STRING resetFactoryWaypoint();
62259: PPUSH
62260: CALL_OW 559
// if factoryWaypoints then
62264: LD_EXP 59
62268: IFFALSE 62389
// begin list := factoryWaypoints ;
62270: LD_ADDR_VAR 0 3
62274: PUSH
62275: LD_EXP 59
62279: ST_TO_ADDR
// for i := 1 to list do
62280: LD_ADDR_VAR 0 2
62284: PUSH
62285: DOUBLE
62286: LD_INT 1
62288: DEC
62289: ST_TO_ADDR
62290: LD_VAR 0 3
62294: PUSH
62295: FOR_TO
62296: IFFALSE 62387
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62298: LD_STRING setFactoryWaypointXY(
62300: PUSH
62301: LD_VAR 0 3
62305: PUSH
62306: LD_VAR 0 2
62310: ARRAY
62311: PUSH
62312: LD_INT 1
62314: ARRAY
62315: STR
62316: PUSH
62317: LD_STRING ,
62319: STR
62320: PUSH
62321: LD_VAR 0 3
62325: PUSH
62326: LD_VAR 0 2
62330: ARRAY
62331: PUSH
62332: LD_INT 2
62334: ARRAY
62335: STR
62336: PUSH
62337: LD_STRING ,
62339: STR
62340: PUSH
62341: LD_VAR 0 3
62345: PUSH
62346: LD_VAR 0 2
62350: ARRAY
62351: PUSH
62352: LD_INT 3
62354: ARRAY
62355: STR
62356: PUSH
62357: LD_STRING ,
62359: STR
62360: PUSH
62361: LD_VAR 0 3
62365: PUSH
62366: LD_VAR 0 2
62370: ARRAY
62371: PUSH
62372: LD_INT 4
62374: ARRAY
62375: STR
62376: PUSH
62377: LD_STRING )
62379: STR
62380: PPUSH
62381: CALL_OW 559
62385: GO 62295
62387: POP
62388: POP
// end ; end ;
62389: LD_VAR 0 1
62393: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62394: LD_INT 0
62396: PPUSH
// if HexInfo ( x , y ) = warehouse then
62397: LD_VAR 0 2
62401: PPUSH
62402: LD_VAR 0 3
62406: PPUSH
62407: CALL_OW 428
62411: PUSH
62412: LD_VAR 0 1
62416: EQUAL
62417: IFFALSE 62444
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62419: LD_ADDR_EXP 61
62423: PUSH
62424: LD_EXP 61
62428: PPUSH
62429: LD_VAR 0 1
62433: PPUSH
62434: LD_INT 0
62436: PPUSH
62437: CALL_OW 1
62441: ST_TO_ADDR
62442: GO 62495
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62444: LD_ADDR_EXP 61
62448: PUSH
62449: LD_EXP 61
62453: PPUSH
62454: LD_VAR 0 1
62458: PPUSH
62459: LD_VAR 0 1
62463: PPUSH
62464: CALL_OW 255
62468: PUSH
62469: LD_VAR 0 1
62473: PUSH
62474: LD_VAR 0 2
62478: PUSH
62479: LD_VAR 0 3
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: PPUSH
62490: CALL_OW 1
62494: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62495: CALL 62504 0 0
// end ;
62499: LD_VAR 0 4
62503: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62504: LD_INT 0
62506: PPUSH
62507: PPUSH
62508: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62509: LD_STRING resetWarehouseGatheringPoints();
62511: PPUSH
62512: CALL_OW 559
// if warehouseGatheringPoints then
62516: LD_EXP 61
62520: IFFALSE 62646
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62522: LD_ADDR_VAR 0 3
62526: PUSH
62527: LD_EXP 61
62531: PPUSH
62532: CALL 54233 0 1
62536: ST_TO_ADDR
// for i := 1 to list do
62537: LD_ADDR_VAR 0 2
62541: PUSH
62542: DOUBLE
62543: LD_INT 1
62545: DEC
62546: ST_TO_ADDR
62547: LD_VAR 0 3
62551: PUSH
62552: FOR_TO
62553: IFFALSE 62644
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62555: LD_STRING setWarehouseGatheringPointXY(
62557: PUSH
62558: LD_VAR 0 3
62562: PUSH
62563: LD_VAR 0 2
62567: ARRAY
62568: PUSH
62569: LD_INT 1
62571: ARRAY
62572: STR
62573: PUSH
62574: LD_STRING ,
62576: STR
62577: PUSH
62578: LD_VAR 0 3
62582: PUSH
62583: LD_VAR 0 2
62587: ARRAY
62588: PUSH
62589: LD_INT 2
62591: ARRAY
62592: STR
62593: PUSH
62594: LD_STRING ,
62596: STR
62597: PUSH
62598: LD_VAR 0 3
62602: PUSH
62603: LD_VAR 0 2
62607: ARRAY
62608: PUSH
62609: LD_INT 3
62611: ARRAY
62612: STR
62613: PUSH
62614: LD_STRING ,
62616: STR
62617: PUSH
62618: LD_VAR 0 3
62622: PUSH
62623: LD_VAR 0 2
62627: ARRAY
62628: PUSH
62629: LD_INT 4
62631: ARRAY
62632: STR
62633: PUSH
62634: LD_STRING )
62636: STR
62637: PPUSH
62638: CALL_OW 559
62642: GO 62552
62644: POP
62645: POP
// end ; end ;
62646: LD_VAR 0 1
62650: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62651: LD_INT 0
62653: PPUSH
62654: PPUSH
// if not mpSidePositions then
62655: LD_EXP 7
62659: NOT
62660: IFFALSE 62664
// exit ;
62662: GO 62735
// result :=  ;
62664: LD_ADDR_VAR 0 1
62668: PUSH
62669: LD_STRING 
62671: ST_TO_ADDR
// for i := 1 to 8 do
62672: LD_ADDR_VAR 0 2
62676: PUSH
62677: DOUBLE
62678: LD_INT 1
62680: DEC
62681: ST_TO_ADDR
62682: LD_INT 8
62684: PUSH
62685: FOR_TO
62686: IFFALSE 62716
// begin result := result & mpSidePositions [ i ] & ; ;
62688: LD_ADDR_VAR 0 1
62692: PUSH
62693: LD_VAR 0 1
62697: PUSH
62698: LD_EXP 7
62702: PUSH
62703: LD_VAR 0 2
62707: ARRAY
62708: STR
62709: PUSH
62710: LD_STRING ;
62712: STR
62713: ST_TO_ADDR
// end ;
62714: GO 62685
62716: POP
62717: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62718: LD_STRING setMultiplayerRealPosition("
62720: PUSH
62721: LD_VAR 0 1
62725: STR
62726: PUSH
62727: LD_STRING ");
62729: STR
62730: PPUSH
62731: CALL_OW 559
// end ;
62735: LD_VAR 0 1
62739: RET
