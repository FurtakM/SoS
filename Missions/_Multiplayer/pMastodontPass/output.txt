// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3240 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3663 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 120
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , CenterArea , RoadArea ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 60
 891: PUSH
 892: LD_INT 61
 894: PUSH
 895: LD_INT 62
 897: PUSH
 898: LD_INT 63
 900: PUSH
 901: LD_INT 59
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 9
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 56376 0 2
1427: PUSH
1428: LD_INT 15
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 56376 0 2
1438: PUSH
1439: LD_INT 21
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: CALL 56376 0 2
1449: PUSH
1450: LD_INT 27
1452: PPUSH
1453: LD_INT 3
1455: PPUSH
1456: CALL 56376 0 2
1460: PUSH
1461: LD_INT 33
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL 56376 0 2
1471: PUSH
1472: LD_INT 39
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 56376 0 2
1482: PUSH
1483: LD_INT 45
1485: PPUSH
1486: LD_INT 4
1488: PPUSH
1489: CALL 56376 0 2
1493: PUSH
1494: LD_INT 51
1496: PPUSH
1497: LD_INT 5
1499: PPUSH
1500: CALL 56376 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 15681 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1896
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// if all then
1666: LD_VAR 0 4
1670: IFFALSE 1793
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1672: LD_ADDR_EXP 12
1676: PUSH
1677: LD_INT 10
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 56209 0 2
1689: PUSH
1690: LD_INT 16
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 56209 0 2
1702: PUSH
1703: LD_INT 22
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 56209 0 2
1715: PUSH
1716: LD_INT 28
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 56209 0 2
1728: PUSH
1729: LD_INT 34
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 56209 0 2
1741: PUSH
1742: LD_INT 40
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL 56209 0 2
1754: PUSH
1755: LD_INT 46
1757: PPUSH
1758: LD_VAR 0 4
1762: PPUSH
1763: CALL 56209 0 2
1767: PUSH
1768: LD_INT 52
1770: PPUSH
1771: LD_VAR 0 4
1775: PPUSH
1776: CALL 56209 0 2
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: ST_TO_ADDR
// end else
1791: GO 1896
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1793: LD_ADDR_EXP 12
1797: PUSH
1798: LD_INT 80
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: CALL 56209 0 2
1808: PUSH
1809: LD_INT 82
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: CALL 56209 0 2
1819: PUSH
1820: LD_INT 84
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL 56209 0 2
1830: PUSH
1831: LD_INT 86
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: CALL 56209 0 2
1841: PUSH
1842: LD_INT 72
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: CALL 56209 0 2
1852: PUSH
1853: LD_INT 74
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 56209 0 2
1863: PUSH
1864: LD_INT 76
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL 56209 0 2
1874: PUSH
1875: LD_INT 78
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 56209 0 2
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: ST_TO_ADDR
// end ; end ; if hasSib then
1896: LD_VAR 0 6
1900: IFFALSE 2150
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1902: LD_ADDR_VAR 0 4
1906: PUSH
1907: LD_EXP 6
1911: PUSH
1912: LD_INT 7
1914: ARRAY
1915: PUSH
1916: LD_INT 2
1918: EQUAL
1919: ST_TO_ADDR
// if all then
1920: LD_VAR 0 4
1924: IFFALSE 2047
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1926: LD_ADDR_EXP 13
1930: PUSH
1931: LD_INT 11
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: CALL 56209 0 2
1943: PUSH
1944: LD_INT 17
1946: PPUSH
1947: LD_VAR 0 4
1951: PPUSH
1952: CALL 56209 0 2
1956: PUSH
1957: LD_INT 23
1959: PPUSH
1960: LD_VAR 0 4
1964: PPUSH
1965: CALL 56209 0 2
1969: PUSH
1970: LD_INT 29
1972: PPUSH
1973: LD_VAR 0 4
1977: PPUSH
1978: CALL 56209 0 2
1982: PUSH
1983: LD_INT 35
1985: PPUSH
1986: LD_VAR 0 4
1990: PPUSH
1991: CALL 56209 0 2
1995: PUSH
1996: LD_INT 41
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 56209 0 2
2008: PUSH
2009: LD_INT 47
2011: PPUSH
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL 56209 0 2
2021: PUSH
2022: LD_INT 53
2024: PPUSH
2025: LD_VAR 0 4
2029: PPUSH
2030: CALL 56209 0 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: ST_TO_ADDR
// end else
2045: GO 2150
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2047: LD_ADDR_EXP 13
2051: PUSH
2052: LD_INT 81
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: CALL 56209 0 2
2062: PUSH
2063: LD_INT 83
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: CALL 56209 0 2
2073: PUSH
2074: LD_INT 85
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 56209 0 2
2084: PUSH
2085: LD_INT 87
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: CALL 56209 0 2
2095: PUSH
2096: LD_INT 73
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL 56209 0 2
2106: PUSH
2107: LD_INT 75
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: CALL 56209 0 2
2117: PUSH
2118: LD_INT 77
2120: PPUSH
2121: LD_INT 1
2123: PPUSH
2124: CALL 56209 0 2
2128: PUSH
2129: LD_INT 79
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 56209 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2150: LD_VAR 0 7
2154: PUSH
2155: LD_INT 1
2157: GREATEREQUAL
2158: IFFALSE 2170
// mpDepots := startPos ;
2160: LD_ADDR_EXP 14
2164: PUSH
2165: LD_VAR 0 8
2169: ST_TO_ADDR
// if baseLevel >= 2 then
2170: LD_VAR 0 7
2174: PUSH
2175: LD_INT 2
2177: GREATEREQUAL
2178: IFFALSE 2595
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 3 ) ] ] ;
2180: LD_ADDR_EXP 17
2184: PUSH
2185: LD_INT 31
2187: PUSH
2188: LD_INT 13
2190: PPUSH
2191: LD_INT 5
2193: PPUSH
2194: CALL 56376 0 2
2198: ADD
2199: PUSH
2200: LD_INT 31
2202: PUSH
2203: LD_INT 14
2205: PPUSH
2206: LD_INT 0
2208: PPUSH
2209: CALL 56376 0 2
2213: ADD
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 12
2220: PPUSH
2221: LD_INT 5
2223: PPUSH
2224: CALL 56376 0 2
2228: ADD
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 31
2237: PUSH
2238: LD_INT 18
2240: PPUSH
2241: LD_INT 4
2243: PPUSH
2244: CALL 56376 0 2
2248: ADD
2249: PUSH
2250: LD_INT 31
2252: PUSH
2253: LD_INT 19
2255: PPUSH
2256: LD_INT 5
2258: PPUSH
2259: CALL 56376 0 2
2263: ADD
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: LD_INT 20
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL 56376 0 2
2278: ADD
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 31
2287: PUSH
2288: LD_INT 25
2290: PPUSH
2291: LD_INT 0
2293: PPUSH
2294: CALL 56376 0 2
2298: ADD
2299: PUSH
2300: LD_INT 31
2302: PUSH
2303: LD_INT 26
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: CALL 56376 0 2
2313: ADD
2314: PUSH
2315: LD_INT 4
2317: PUSH
2318: LD_INT 24
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL 56376 0 2
2328: ADD
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 31
2337: PUSH
2338: LD_INT 31
2340: PPUSH
2341: LD_INT 0
2343: PPUSH
2344: CALL 56376 0 2
2348: ADD
2349: PUSH
2350: LD_INT 31
2352: PUSH
2353: LD_INT 32
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: CALL 56376 0 2
2363: ADD
2364: PUSH
2365: LD_INT 4
2367: PUSH
2368: LD_INT 30
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL 56376 0 2
2378: ADD
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 31
2387: PUSH
2388: LD_INT 37
2390: PPUSH
2391: LD_INT 3
2393: PPUSH
2394: CALL 56376 0 2
2398: ADD
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: LD_INT 38
2405: PPUSH
2406: LD_INT 4
2408: PPUSH
2409: CALL 56376 0 2
2413: ADD
2414: PUSH
2415: LD_INT 4
2417: PUSH
2418: LD_INT 36
2420: PPUSH
2421: LD_INT 3
2423: PPUSH
2424: CALL 56376 0 2
2428: ADD
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 31
2437: PUSH
2438: LD_INT 43
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: CALL 56376 0 2
2448: ADD
2449: PUSH
2450: LD_INT 31
2452: PUSH
2453: LD_INT 44
2455: PPUSH
2456: LD_INT 2
2458: PPUSH
2459: CALL 56376 0 2
2463: ADD
2464: PUSH
2465: LD_INT 4
2467: PUSH
2468: LD_INT 42
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL 56376 0 2
2478: ADD
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: LD_INT 31
2487: PUSH
2488: LD_INT 49
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL 56376 0 2
2498: ADD
2499: PUSH
2500: LD_INT 31
2502: PUSH
2503: LD_INT 50
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL 56376 0 2
2513: ADD
2514: PUSH
2515: LD_INT 4
2517: PUSH
2518: LD_INT 48
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL 56376 0 2
2528: ADD
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 31
2537: PUSH
2538: LD_INT 55
2540: PPUSH
2541: LD_INT 2
2543: PPUSH
2544: CALL 56376 0 2
2548: ADD
2549: PUSH
2550: LD_INT 31
2552: PUSH
2553: LD_INT 56
2555: PPUSH
2556: LD_INT 3
2558: PPUSH
2559: CALL 56376 0 2
2563: ADD
2564: PUSH
2565: LD_INT 4
2567: PUSH
2568: LD_INT 54
2570: PPUSH
2571: LD_INT 3
2573: PPUSH
2574: CALL 56376 0 2
2578: ADD
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: ST_TO_ADDR
// end ; end ;
2595: LD_VAR 0 2
2599: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2600: GO 2602
2602: DISABLE
2603: LD_INT 0
2605: PPUSH
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
// begin if not mpShipments then
2613: LD_EXP 27
2617: NOT
2618: IFFALSE 2622
// exit ;
2620: GO 3077
// case mpShipments of 1 :
2622: LD_EXP 27
2626: PUSH
2627: LD_INT 1
2629: DOUBLE
2630: EQUAL
2631: IFTRUE 2635
2633: GO 2670
2635: POP
// begin time := 0 0$30 ;
2636: LD_ADDR_VAR 0 5
2640: PUSH
2641: LD_INT 1050
2643: ST_TO_ADDR
// normalTime := 0 0$30 ;
2644: LD_ADDR_VAR 0 6
2648: PUSH
2649: LD_INT 1050
2651: ST_TO_ADDR
// maxTime := 1 1$20 ;
2652: LD_ADDR_VAR 0 8
2656: PUSH
2657: LD_INT 2800
2659: ST_TO_ADDR
// delayTime := 0 0$5 ;
2660: LD_ADDR_VAR 0 7
2664: PUSH
2665: LD_INT 175
2667: ST_TO_ADDR
// end ; 2 :
2668: GO 2800
2670: LD_INT 2
2672: DOUBLE
2673: EQUAL
2674: IFTRUE 2678
2676: GO 2713
2678: POP
// begin time := 0 0$25 ;
2679: LD_ADDR_VAR 0 5
2683: PUSH
2684: LD_INT 875
2686: ST_TO_ADDR
// normalTime := 0 0$25 ;
2687: LD_ADDR_VAR 0 6
2691: PUSH
2692: LD_INT 875
2694: ST_TO_ADDR
// maxTime := 1 1$10 ;
2695: LD_ADDR_VAR 0 8
2699: PUSH
2700: LD_INT 2450
2702: ST_TO_ADDR
// delayTime := 0 0$4 ;
2703: LD_ADDR_VAR 0 7
2707: PUSH
2708: LD_INT 140
2710: ST_TO_ADDR
// end ; 3 :
2711: GO 2800
2713: LD_INT 3
2715: DOUBLE
2716: EQUAL
2717: IFTRUE 2721
2719: GO 2756
2721: POP
// begin time := 0 0$20 ;
2722: LD_ADDR_VAR 0 5
2726: PUSH
2727: LD_INT 700
2729: ST_TO_ADDR
// normalTime := 0 0$20 ;
2730: LD_ADDR_VAR 0 6
2734: PUSH
2735: LD_INT 700
2737: ST_TO_ADDR
// maxTime := 1 1$00 ;
2738: LD_ADDR_VAR 0 8
2742: PUSH
2743: LD_INT 2100
2745: ST_TO_ADDR
// delayTime := 0 0$3 ;
2746: LD_ADDR_VAR 0 7
2750: PUSH
2751: LD_INT 105
2753: ST_TO_ADDR
// end ; 4 :
2754: GO 2800
2756: LD_INT 4
2758: DOUBLE
2759: EQUAL
2760: IFTRUE 2764
2762: GO 2799
2764: POP
// begin time := 0 0$15 ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_INT 525
2772: ST_TO_ADDR
// normalTime := 0 0$15 ;
2773: LD_ADDR_VAR 0 6
2777: PUSH
2778: LD_INT 525
2780: ST_TO_ADDR
// maxTime := 0 0$55 ;
2781: LD_ADDR_VAR 0 8
2785: PUSH
2786: LD_INT 1925
2788: ST_TO_ADDR
// delayTime := 0 0$2 ;
2789: LD_ADDR_VAR 0 7
2793: PUSH
2794: LD_INT 70
2796: ST_TO_ADDR
// end ; end ;
2797: GO 2800
2799: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , CenterArea , RoadArea ] ;
2800: LD_ADDR_VAR 0 4
2804: PUSH
2805: LD_INT 60
2807: PUSH
2808: LD_INT 61
2810: PUSH
2811: LD_INT 62
2813: PUSH
2814: LD_INT 63
2816: PUSH
2817: LD_INT 59
2819: PUSH
2820: LD_INT 58
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2831: LD_ADDR_VAR 0 3
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 4
2847: PUSH
2848: LD_INT 5
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: ST_TO_ADDR
// for i := 1 to 8 do
2870: LD_ADDR_VAR 0 1
2874: PUSH
2875: DOUBLE
2876: LD_INT 1
2878: DEC
2879: ST_TO_ADDR
2880: LD_INT 8
2882: PUSH
2883: FOR_TO
2884: IFFALSE 2931
// begin if not mpSidePositions [ i ] then
2886: LD_EXP 7
2890: PUSH
2891: LD_VAR 0 1
2895: ARRAY
2896: NOT
2897: IFFALSE 2901
// continue ;
2899: GO 2883
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: LD_VAR 0 4
2910: PUSH
2911: LD_VAR 0 3
2915: PUSH
2916: LD_EXP 7
2920: PUSH
2921: LD_VAR 0 1
2925: ARRAY
2926: ARRAY
2927: ADD
2928: ST_TO_ADDR
// end ;
2929: GO 2883
2931: POP
2932: POP
// x := 1 ;
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: LD_INT 1
2940: ST_TO_ADDR
// repeat wait ( time ) ;
2941: LD_VAR 0 5
2945: PPUSH
2946: CALL_OW 67
// x := Inc ( x ) ;
2950: LD_ADDR_VAR 0 2
2954: PUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: CALL 53030 0 1
2964: ST_TO_ADDR
// if x > 5 then
2965: LD_VAR 0 2
2969: PUSH
2970: LD_INT 5
2972: GREATER
2973: IFFALSE 2983
// x := 1 ;
2975: LD_ADDR_VAR 0 2
2979: PUSH
2980: LD_INT 1
2982: ST_TO_ADDR
// for i in areas do
2983: LD_ADDR_VAR 0 1
2987: PUSH
2988: LD_VAR 0 4
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3033
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_INT 1
3003: PPUSH
3004: CALL_OW 287
3008: PUSH
3009: LD_INT 30
3011: LESS
3012: IFFALSE 3031
// begin CreateCratesArea ( x , i , true ) ;
3014: LD_VAR 0 2
3018: PPUSH
3019: LD_VAR 0 1
3023: PPUSH
3024: LD_INT 1
3026: PPUSH
3027: CALL_OW 55
// end ; end ;
3031: GO 2993
3033: POP
3034: POP
// time := time + delayTime ;
3035: LD_ADDR_VAR 0 5
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: LD_VAR 0 7
3049: PLUS
3050: ST_TO_ADDR
// if time > maxTime then
3051: LD_VAR 0 5
3055: PUSH
3056: LD_VAR 0 8
3060: GREATER
3061: IFFALSE 3073
// time := normalTime ;
3063: LD_ADDR_VAR 0 5
3067: PUSH
3068: LD_VAR 0 6
3072: ST_TO_ADDR
// until false ;
3073: LD_INT 0
3075: IFFALSE 2941
// end ; end_of_file
3077: PPOPN 8
3079: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL 57174 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 8786 0 1
// end ;
3098: PPOPN 1
3100: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL 57191 0 1
// end ;
3110: PPOPN 1
3112: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3113: LD_VAR 0 1
3117: PPUSH
3118: CALL 9839 0 1
3122: PPOPN 1
3124: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: LD_VAR 0 2
3134: PPUSH
3135: CALL 57232 0 2
3139: PPOPN 2
3141: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL 9592 0 2
3156: PPOPN 2
3158: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3159: LD_VAR 0 1
3163: PPUSH
3164: LD_VAR 0 2
3168: PPUSH
3169: LD_VAR 0 3
3173: PPUSH
3174: CALL 9892 0 3
3178: PPOPN 3
3180: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_VAR 0 3
3195: PPUSH
3196: LD_VAR 0 4
3200: PPUSH
3201: LD_VAR 0 5
3205: PPUSH
3206: CALL 10576 0 5
3210: PPOPN 5
3212: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3213: LD_VAR 0 1
3217: PPUSH
3218: LD_VAR 0 2
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: LD_VAR 0 4
3232: PPUSH
3233: CALL 10679 0 4
3237: PPOPN 4
3239: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3240: LD_INT 0
3242: PPUSH
3243: PPUSH
// disable ( mpActive ) ;
3244: LD_INT 100
3246: DISABLE_MARKED
// disable ( mpWin ) ;
3247: LD_INT 101
3249: DISABLE_MARKED
// disable ( mpLose ) ;
3250: LD_INT 102
3252: DISABLE_MARKED
// mpGameType := 0 ;
3253: LD_ADDR_EXP 3
3257: PUSH
3258: LD_INT 0
3260: ST_TO_ADDR
// mpGameSettings := [ ] ;
3261: LD_ADDR_EXP 6
3265: PUSH
3266: EMPTY
3267: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3268: LD_ADDR_EXP 4
3272: PUSH
3273: EMPTY
3274: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3275: LD_ADDR_EXP 5
3279: PUSH
3280: EMPTY
3281: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3282: LD_ADDR_EXP 29
3286: PUSH
3287: LD_INT 2
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3297: LD_ADDR_EXP 12
3301: PUSH
3302: EMPTY
3303: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3304: LD_ADDR_EXP 13
3308: PUSH
3309: EMPTY
3310: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3311: LD_ADDR_EXP 42
3315: PUSH
3316: EMPTY
3317: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3318: LD_ADDR_EXP 43
3322: PUSH
3323: EMPTY
3324: ST_TO_ADDR
// mpDepots := [ ] ;
3325: LD_ADDR_EXP 14
3329: PUSH
3330: EMPTY
3331: ST_TO_ADDR
// mpBuildings := [ ] ;
3332: LD_ADDR_EXP 17
3336: PUSH
3337: EMPTY
3338: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3339: LD_ADDR_EXP 18
3343: PUSH
3344: EMPTY
3345: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3346: LD_ADDR_EXP 19
3350: PUSH
3351: EMPTY
3352: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3353: LD_ADDR_EXP 20
3357: PUSH
3358: EMPTY
3359: ST_TO_ADDR
// mpStartingResources := [ ] ;
3360: LD_ADDR_EXP 15
3364: PUSH
3365: EMPTY
3366: ST_TO_ADDR
// mpStartPos := [ ] ;
3367: LD_ADDR_EXP 21
3371: PUSH
3372: EMPTY
3373: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3374: LD_ADDR_EXP 22
3378: PUSH
3379: LD_INT 1
3381: NEG
3382: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3383: LD_ADDR_EXP 23
3387: PUSH
3388: EMPTY
3389: ST_TO_ADDR
// mpApemans := [ ] ;
3390: LD_ADDR_EXP 30
3394: PUSH
3395: EMPTY
3396: ST_TO_ADDR
// mpApemansArea := [ ] ;
3397: LD_ADDR_EXP 31
3401: PUSH
3402: EMPTY
3403: ST_TO_ADDR
// mpRespawn := [ ] ;
3404: LD_ADDR_EXP 33
3408: PUSH
3409: EMPTY
3410: ST_TO_ADDR
// mpKingArea := 0 ;
3411: LD_ADDR_EXP 34
3415: PUSH
3416: LD_INT 0
3418: ST_TO_ADDR
// mpPoints := [ ] ;
3419: LD_ADDR_EXP 35
3423: PUSH
3424: EMPTY
3425: ST_TO_ADDR
// mpVehicles := 0 ;
3426: LD_ADDR_EXP 36
3430: PUSH
3431: LD_INT 0
3433: ST_TO_ADDR
// mpShipments := 0 ;
3434: LD_ADDR_EXP 27
3438: PUSH
3439: LD_INT 0
3441: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3442: LD_ADDR_EXP 40
3446: PUSH
3447: EMPTY
3448: PUSH
3449: EMPTY
3450: PUSH
3451: EMPTY
3452: PUSH
3453: EMPTY
3454: PUSH
3455: EMPTY
3456: PUSH
3457: EMPTY
3458: PUSH
3459: EMPTY
3460: PUSH
3461: EMPTY
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: LIST
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3473: LD_ADDR_EXP 32
3477: PUSH
3478: EMPTY
3479: PUSH
3480: EMPTY
3481: PUSH
3482: EMPTY
3483: PUSH
3484: EMPTY
3485: PUSH
3486: EMPTY
3487: PUSH
3488: EMPTY
3489: PUSH
3490: EMPTY
3491: PUSH
3492: EMPTY
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3504: LD_ADDR_EXP 41
3508: PUSH
3509: LD_INT 0
3511: PUSH
3512: LD_INT 0
3514: PUSH
3515: LD_INT 0
3517: PUSH
3518: LD_INT 0
3520: PUSH
3521: LD_INT 0
3523: PUSH
3524: LD_INT 0
3526: PUSH
3527: LD_INT 0
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: ST_TO_ADDR
// mpEmissions := 0 ;
3543: LD_ADDR_EXP 37
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// mpTeleports := 0 ;
3551: LD_ADDR_EXP 44
3555: PUSH
3556: LD_INT 0
3558: ST_TO_ADDR
// mpArtifacts := 0 ;
3559: LD_ADDR_EXP 45
3563: PUSH
3564: LD_INT 0
3566: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3567: LD_ADDR_EXP 46
3571: PUSH
3572: LD_INT 0
3574: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3575: LD_ADDR_EXP 25
3579: PUSH
3580: LD_INT 3
3582: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3583: LD_ADDR_EXP 24
3587: PUSH
3588: LD_INT 15
3590: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3591: LD_ADDR_EXP 38
3595: PUSH
3596: LD_INT 0
3598: ST_TO_ADDR
// mpGameActive := false ;
3599: LD_ADDR_EXP 39
3603: PUSH
3604: LD_INT 0
3606: ST_TO_ADDR
// mpBlockRespThread := false ;
3607: LD_ADDR_EXP 47
3611: PUSH
3612: LD_INT 0
3614: ST_TO_ADDR
// for i := 1 to 32 do
3615: LD_ADDR_VAR 0 2
3619: PUSH
3620: DOUBLE
3621: LD_INT 1
3623: DEC
3624: ST_TO_ADDR
3625: LD_INT 32
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3656
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3631: LD_ADDR_EXP 6
3635: PUSH
3636: LD_EXP 6
3640: PPUSH
3641: LD_VAR 0 2
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
3654: GO 3628
3656: POP
3657: POP
// end ;
3658: LD_VAR 0 1
3662: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3663: LD_INT 0
3665: PPUSH
3666: PPUSH
3667: PPUSH
3668: PPUSH
3669: PPUSH
3670: PPUSH
3671: PPUSH
3672: PPUSH
3673: PPUSH
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
3678: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3679: LD_ADDR_VAR 0 14
3683: PUSH
3684: LD_INT 1
3686: PUSH
3687: LD_INT 2
3689: PUSH
3690: LD_INT 3
3692: PUSH
3693: LD_INT 5
3695: PUSH
3696: LD_INT 6
3698: PUSH
3699: LD_INT 7
3701: PUSH
3702: LD_INT 8
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: ST_TO_ADDR
// for i in gameTypes do
3714: LD_ADDR_VAR 0 2
3718: PUSH
3719: LD_VAR 0 14
3723: PUSH
3724: FOR_IN
3725: IFFALSE 3734
// disable ( i ) ;
3727: LD_VAR 0 2
3731: DISABLE_MARKED
3732: GO 3724
3734: POP
3735: POP
// if Multiplayer then
3736: LD_OWVAR 4
3740: IFFALSE 3924
// begin mpGameType := mp_game_type ;
3742: LD_ADDR_EXP 3
3746: PUSH
3747: LD_OWVAR 6
3751: ST_TO_ADDR
// your_side := mp_player_side ;
3752: LD_ADDR_OWVAR 2
3756: PUSH
3757: LD_OWVAR 7
3761: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3762: LD_ADDR_EXP 7
3766: PUSH
3767: LD_OWVAR 17
3771: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3772: LD_ADDR_EXP 8
3776: PUSH
3777: LD_OWVAR 15
3781: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3782: LD_ADDR_EXP 9
3786: PUSH
3787: LD_OWVAR 16
3791: ST_TO_ADDR
// mpTeams := mp_teams ;
3792: LD_ADDR_EXP 10
3796: PUSH
3797: LD_OWVAR 12
3801: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_EXP 4
3816: PPUSH
3817: CALL 15681 0 1
3821: PUSH
3822: FOR_TO
3823: IFFALSE 3899
// begin setting := mpGameSettingsKeys [ i ] ;
3825: LD_ADDR_VAR 0 12
3829: PUSH
3830: LD_EXP 4
3834: PUSH
3835: LD_VAR 0 2
3839: ARRAY
3840: ST_TO_ADDR
// if setting then
3841: LD_VAR 0 12
3845: IFFALSE 3897
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3847: LD_ADDR_EXP 6
3851: PUSH
3852: LD_EXP 6
3856: PPUSH
3857: LD_VAR 0 2
3861: PPUSH
3862: LD_EXP 5
3866: PUSH
3867: LD_VAR 0 2
3871: ARRAY
3872: PUSH
3873: LD_VAR 0 2
3877: PUSH
3878: LD_INT 1
3880: MINUS
3881: PPUSH
3882: CALL_OW 426
3886: PUSH
3887: LD_INT 1
3889: PLUS
3890: ARRAY
3891: PPUSH
3892: CALL_OW 1
3896: ST_TO_ADDR
// end ;
3897: GO 3822
3899: POP
3900: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3901: LD_ADDR_EXP 11
3905: PUSH
3906: LD_EXP 8
3910: PUSH
3911: LD_INT 0
3913: PUSH
3914: EMPTY
3915: LIST
3916: DIFF
3917: PUSH
3918: LD_INT 1
3920: GREATER
3921: ST_TO_ADDR
// end else
3922: GO 3924
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3924: LD_EXP 3
3928: PPUSH
3929: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3933: LD_EXP 18
3937: PPUSH
3938: CALL 15681 0 1
3942: IFFALSE 3973
// begin for i in mpMarkedAreas do
3944: LD_ADDR_VAR 0 2
3948: PUSH
3949: LD_EXP 18
3953: PUSH
3954: FOR_IN
3955: IFFALSE 3971
// SetAreaMapShow ( i , 0 ) ;
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL_OW 424
3969: GO 3954
3971: POP
3972: POP
// end ; for i := 1 to 8 do
3973: LD_ADDR_VAR 0 2
3977: PUSH
3978: DOUBLE
3979: LD_INT 1
3981: DEC
3982: ST_TO_ADDR
3983: LD_INT 8
3985: PUSH
3986: FOR_TO
3987: IFFALSE 5446
// begin if not mpSidePositions [ i ] then
3989: LD_EXP 7
3993: PUSH
3994: LD_VAR 0 2
3998: ARRAY
3999: NOT
4000: IFFALSE 4004
// continue ;
4002: GO 3986
// side := i ;
4004: LD_ADDR_VAR 0 7
4008: PUSH
4009: LD_VAR 0 2
4013: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
4014: LD_ADDR_VAR 0 9
4018: PUSH
4019: LD_EXP 9
4023: PUSH
4024: LD_VAR 0 2
4028: ARRAY
4029: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
4030: LD_ADDR_VAR 0 8
4034: PUSH
4035: LD_EXP 7
4039: PUSH
4040: LD_VAR 0 2
4044: ARRAY
4045: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
4046: LD_EXP 12
4050: PPUSH
4051: CALL 15681 0 1
4055: IFFALSE 4132
// begin for j in mpOilDeposits [ pos ] do
4057: LD_ADDR_VAR 0 3
4061: PUSH
4062: LD_EXP 12
4066: PUSH
4067: LD_VAR 0 8
4071: ARRAY
4072: PUSH
4073: FOR_IN
4074: IFFALSE 4130
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4076: LD_VAR 0 3
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: LD_VAR 0 3
4089: PUSH
4090: LD_INT 2
4092: ARRAY
4093: PPUSH
4094: LD_INT 2
4096: PPUSH
4097: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4101: LD_VAR 0 3
4105: PUSH
4106: LD_INT 1
4108: ARRAY
4109: PPUSH
4110: LD_VAR 0 3
4114: PUSH
4115: LD_INT 2
4117: ARRAY
4118: PPUSH
4119: LD_VAR 0 7
4123: PPUSH
4124: CALL_OW 441
// end ;
4128: GO 4073
4130: POP
4131: POP
// end ; if Count ( mpSibDeposits ) then
4132: LD_EXP 13
4136: PPUSH
4137: CALL 15681 0 1
4141: IFFALSE 4218
// begin for j in mpSibDeposits [ pos ] do
4143: LD_ADDR_VAR 0 3
4147: PUSH
4148: LD_EXP 13
4152: PUSH
4153: LD_VAR 0 8
4157: ARRAY
4158: PUSH
4159: FOR_IN
4160: IFFALSE 4216
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4162: LD_VAR 0 3
4166: PUSH
4167: LD_INT 1
4169: ARRAY
4170: PPUSH
4171: LD_VAR 0 3
4175: PUSH
4176: LD_INT 2
4178: ARRAY
4179: PPUSH
4180: LD_INT 3
4182: PPUSH
4183: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4187: LD_VAR 0 3
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: LD_VAR 0 3
4200: PUSH
4201: LD_INT 2
4203: ARRAY
4204: PPUSH
4205: LD_VAR 0 7
4209: PPUSH
4210: CALL_OW 441
// end ;
4214: GO 4159
4216: POP
4217: POP
// end ; InitBc ;
4218: CALL_OW 21
// InitUc ;
4222: CALL_OW 18
// uc_side := side ;
4226: LD_ADDR_OWVAR 20
4230: PUSH
4231: LD_VAR 0 7
4235: ST_TO_ADDR
// uc_nation := nation ;
4236: LD_ADDR_OWVAR 21
4240: PUSH
4241: LD_VAR 0 9
4245: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4246: LD_EXP 22
4250: PUSH
4251: LD_INT 1
4253: NEG
4254: GREATER
4255: IFFALSE 4414
// begin x := mpStartPos [ pos ] [ 1 ] ;
4257: LD_ADDR_VAR 0 5
4261: PUSH
4262: LD_EXP 21
4266: PUSH
4267: LD_VAR 0 8
4271: ARRAY
4272: PUSH
4273: LD_INT 1
4275: ARRAY
4276: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4277: LD_ADDR_VAR 0 6
4281: PUSH
4282: LD_EXP 21
4286: PUSH
4287: LD_VAR 0 8
4291: ARRAY
4292: PUSH
4293: LD_INT 2
4295: ARRAY
4296: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4297: LD_VAR 0 5
4301: PPUSH
4302: LD_VAR 0 6
4306: PPUSH
4307: LD_INT 12
4309: PPUSH
4310: LD_INT 2
4312: PPUSH
4313: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4317: LD_ADDR_EXP 23
4321: PUSH
4322: LD_EXP 23
4326: PPUSH
4327: LD_VAR 0 7
4331: PPUSH
4332: LD_VAR 0 7
4336: PPUSH
4337: LD_VAR 0 5
4341: PPUSH
4342: LD_VAR 0 6
4346: PPUSH
4347: LD_INT 1
4349: PUSH
4350: LD_INT 100
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 2
4359: PUSH
4360: LD_INT 70
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 3
4369: PUSH
4370: LD_INT 40
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 10
4379: PUSH
4380: LD_INT 25
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_INT 20
4389: PUSH
4390: LD_INT 100
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 418
4408: PPUSH
4409: CALL_OW 1
4413: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4414: LD_EXP 14
4418: PPUSH
4419: CALL 15681 0 1
4423: IFFALSE 4622
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
4425: LD_EXP 3
4429: PUSH
4430: LD_INT 2
4432: PUSH
4433: LD_INT 8
4435: PUSH
4436: LD_INT 6
4438: PUSH
4439: LD_INT 7
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: IN
4448: IFFALSE 4468
// begin bc_level := 10 ;
4450: LD_ADDR_OWVAR 43
4454: PUSH
4455: LD_INT 10
4457: ST_TO_ADDR
// bc_type := b_warehouse ;
4458: LD_ADDR_OWVAR 42
4462: PUSH
4463: LD_INT 1
4465: ST_TO_ADDR
// end else
4466: GO 4484
// begin bc_level := 0 ;
4468: LD_ADDR_OWVAR 43
4472: PUSH
4473: LD_INT 0
4475: ST_TO_ADDR
// bc_type := b_depot ;
4476: LD_ADDR_OWVAR 42
4480: PUSH
4481: LD_INT 0
4483: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4484: LD_ADDR_VAR 0 4
4488: PUSH
4489: LD_EXP 14
4493: PUSH
4494: LD_VAR 0 8
4498: ARRAY
4499: PUSH
4500: LD_INT 1
4502: ARRAY
4503: PPUSH
4504: LD_EXP 14
4508: PUSH
4509: LD_VAR 0 8
4513: ARRAY
4514: PUSH
4515: LD_INT 2
4517: ARRAY
4518: PPUSH
4519: LD_EXP 14
4523: PUSH
4524: LD_VAR 0 8
4528: ARRAY
4529: PUSH
4530: LD_INT 3
4532: ARRAY
4533: PPUSH
4534: CALL_OW 47
4538: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4539: LD_VAR 0 4
4543: PPUSH
4544: LD_STRING @
4546: PUSH
4547: LD_VAR 0 7
4551: STR
4552: PPUSH
4553: CALL_OW 500
// if Count ( mpStartingResources ) then
4557: LD_EXP 15
4561: PPUSH
4562: CALL 15681 0 1
4566: IFFALSE 4620
// begin for j := 1 to mpStartingResources do
4568: LD_ADDR_VAR 0 3
4572: PUSH
4573: DOUBLE
4574: LD_INT 1
4576: DEC
4577: ST_TO_ADDR
4578: LD_EXP 15
4582: PUSH
4583: FOR_TO
4584: IFFALSE 4618
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4586: LD_VAR 0 4
4590: PPUSH
4591: CALL_OW 274
4595: PPUSH
4596: LD_VAR 0 3
4600: PPUSH
4601: LD_EXP 15
4605: PUSH
4606: LD_VAR 0 3
4610: ARRAY
4611: PPUSH
4612: CALL_OW 277
4616: GO 4583
4618: POP
4619: POP
// end ; end else
4620: GO 4829
// if Count ( mpStartingResources ) then
4622: LD_EXP 15
4626: PPUSH
4627: CALL 15681 0 1
4631: IFFALSE 4829
// begin x := mpStartPos [ pos ] [ 1 ] ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_EXP 21
4642: PUSH
4643: LD_VAR 0 8
4647: ARRAY
4648: PUSH
4649: LD_INT 1
4651: ARRAY
4652: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4653: LD_ADDR_VAR 0 6
4657: PUSH
4658: LD_EXP 21
4662: PUSH
4663: LD_VAR 0 8
4667: ARRAY
4668: PUSH
4669: LD_INT 2
4671: ARRAY
4672: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4673: LD_ADDR_VAR 0 3
4677: PUSH
4678: DOUBLE
4679: LD_INT 1
4681: DEC
4682: ST_TO_ADDR
4683: LD_EXP 15
4687: PUSH
4688: FOR_TO
4689: IFFALSE 4827
// begin resources := mpStartingResources [ j ] ;
4691: LD_ADDR_VAR 0 13
4695: PUSH
4696: LD_EXP 15
4700: PUSH
4701: LD_VAR 0 3
4705: ARRAY
4706: ST_TO_ADDR
// if resources = 0 then
4707: LD_VAR 0 13
4711: PUSH
4712: LD_INT 0
4714: EQUAL
4715: IFFALSE 4719
// continue ;
4717: GO 4688
// repeat if resources >= 50 then
4719: LD_VAR 0 13
4723: PUSH
4724: LD_INT 50
4726: GREATEREQUAL
4727: IFFALSE 4773
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4729: LD_VAR 0 3
4733: PPUSH
4734: LD_INT 5
4736: PPUSH
4737: LD_VAR 0 5
4741: PPUSH
4742: LD_VAR 0 6
4746: PPUSH
4747: LD_INT 6
4749: PPUSH
4750: LD_INT 0
4752: PPUSH
4753: CALL_OW 60
// resources := resources - 50 ;
4757: LD_ADDR_VAR 0 13
4761: PUSH
4762: LD_VAR 0 13
4766: PUSH
4767: LD_INT 50
4769: MINUS
4770: ST_TO_ADDR
// end else
4771: GO 4815
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4773: LD_VAR 0 3
4777: PPUSH
4778: LD_VAR 0 13
4782: PUSH
4783: LD_INT 10
4785: DIV
4786: PPUSH
4787: LD_VAR 0 5
4791: PPUSH
4792: LD_VAR 0 6
4796: PPUSH
4797: LD_INT 6
4799: PPUSH
4800: LD_INT 0
4802: PPUSH
4803: CALL_OW 60
// resources := 0 ;
4807: LD_ADDR_VAR 0 13
4811: PUSH
4812: LD_INT 0
4814: ST_TO_ADDR
// end ; until resources <= 0 ;
4815: LD_VAR 0 13
4819: PUSH
4820: LD_INT 0
4822: LESSEQUAL
4823: IFFALSE 4719
// end ;
4825: GO 4688
4827: POP
4828: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4829: LD_EXP 17
4833: PPUSH
4834: CALL 15681 0 1
4838: IFFALSE 4858
4840: PUSH
4841: LD_EXP 3
4845: PUSH
4846: LD_INT 2
4848: PUSH
4849: LD_INT 8
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: IN
4856: NOT
4857: AND
4858: IFFALSE 4936
// begin for j in mpBuildings [ pos ] do
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_EXP 17
4869: PUSH
4870: LD_VAR 0 8
4874: ARRAY
4875: PUSH
4876: FOR_IN
4877: IFFALSE 4934
// begin bc_level := 0 ;
4879: LD_ADDR_OWVAR 43
4883: PUSH
4884: LD_INT 0
4886: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4887: LD_ADDR_OWVAR 42
4891: PUSH
4892: LD_VAR 0 3
4896: PUSH
4897: LD_INT 1
4899: ARRAY
4900: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4901: LD_VAR 0 3
4905: PUSH
4906: LD_INT 2
4908: ARRAY
4909: PPUSH
4910: LD_VAR 0 3
4914: PUSH
4915: LD_INT 3
4917: ARRAY
4918: PPUSH
4919: LD_VAR 0 3
4923: PUSH
4924: LD_INT 4
4926: ARRAY
4927: PPUSH
4928: CALL_OW 47
// end ;
4932: GO 4876
4934: POP
4935: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4936: LD_EXP 26
4940: IFFALSE 4960
4942: PUSH
4943: LD_INT 20
4945: PPUSH
4946: LD_VAR 0 7
4950: PPUSH
4951: CALL_OW 321
4955: PUSH
4956: LD_INT 1
4958: EQUAL
4959: AND
4960: IFFALSE 4977
// SetTech ( tech_SibDet , side , state_researched ) ;
4962: LD_INT 20
4964: PPUSH
4965: LD_VAR 0 7
4969: PPUSH
4970: LD_INT 2
4972: PPUSH
4973: CALL_OW 322
// if not mpArtifacts then
4977: LD_EXP 45
4981: NOT
4982: IFFALSE 4999
// SetTech ( tech_artifact , side , state_disabled ) ;
4984: LD_INT 24
4986: PPUSH
4987: LD_VAR 0 7
4991: PPUSH
4992: LD_INT 0
4994: PPUSH
4995: CALL_OW 322
// if mpSibBomb = 1 then
4999: LD_EXP 28
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: IFFALSE 5026
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5009: LD_INT 25
5011: PPUSH
5012: LD_VAR 0 7
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 322
// end else
5024: GO 5041
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5026: LD_INT 25
5028: PPUSH
5029: LD_VAR 0 7
5033: PPUSH
5034: LD_INT 0
5036: PPUSH
5037: CALL_OW 322
// end ; if mpVehicles then
5041: LD_EXP 36
5045: IFFALSE 5144
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
5047: LD_ADDR_VAR 0 3
5051: PUSH
5052: LD_VAR 0 7
5056: PPUSH
5057: LD_VAR 0 9
5061: PPUSH
5062: LD_EXP 36
5066: PPUSH
5067: CALL 6403 0 3
5071: PUSH
5072: FOR_IN
5073: IFFALSE 5142
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
5075: LD_VAR 0 3
5079: PPUSH
5080: LD_INT 0
5082: PPUSH
5083: LD_INT 5
5085: PPUSH
5086: CALL_OW 12
5090: PPUSH
5091: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_EXP 21
5104: PUSH
5105: LD_VAR 0 8
5109: ARRAY
5110: PUSH
5111: LD_INT 1
5113: ARRAY
5114: PPUSH
5115: LD_EXP 21
5119: PUSH
5120: LD_VAR 0 8
5124: ARRAY
5125: PUSH
5126: LD_INT 2
5128: ARRAY
5129: PPUSH
5130: LD_INT 12
5132: PPUSH
5133: LD_INT 0
5135: PPUSH
5136: CALL_OW 50
// end ;
5140: GO 5072
5142: POP
5143: POP
// end ; uc_nation := nation ;
5144: LD_ADDR_OWVAR 21
5148: PUSH
5149: LD_VAR 0 9
5153: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
5154: LD_EXP 3
5158: PUSH
5159: LD_INT 6
5161: PUSH
5162: LD_INT 7
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: IN
5169: IFFALSE 5194
5171: PUSH
5172: LD_EXP 7
5176: PUSH
5177: LD_VAR 0 2
5181: ARRAY
5182: PUSH
5183: LD_INT 1
5185: PUSH
5186: LD_INT 2
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: IN
5193: AND
5194: IFFALSE 5242
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5196: LD_ADDR_VAR 0 11
5200: PUSH
5201: LD_VAR 0 7
5205: PPUSH
5206: LD_VAR 0 9
5210: PPUSH
5211: LD_EXP 24
5215: PUSH
5216: LD_EXP 24
5220: PUSH
5221: LD_INT 2
5223: DIV
5224: PLUS
5225: PPUSH
5226: LD_EXP 25
5230: PUSH
5231: LD_INT 1
5233: PLUS
5234: PPUSH
5235: CALL 5858 0 4
5239: ST_TO_ADDR
5240: GO 5272
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5242: LD_ADDR_VAR 0 11
5246: PUSH
5247: LD_VAR 0 7
5251: PPUSH
5252: LD_VAR 0 9
5256: PPUSH
5257: LD_EXP 24
5261: PPUSH
5262: LD_EXP 25
5266: PPUSH
5267: CALL 5858 0 4
5271: ST_TO_ADDR
// for j in team do
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: LD_VAR 0 11
5281: PUSH
5282: FOR_IN
5283: IFFALSE 5332
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5285: LD_VAR 0 3
5289: PPUSH
5290: LD_EXP 21
5294: PUSH
5295: LD_VAR 0 8
5299: ARRAY
5300: PUSH
5301: LD_INT 1
5303: ARRAY
5304: PPUSH
5305: LD_EXP 21
5309: PUSH
5310: LD_VAR 0 8
5314: ARRAY
5315: PUSH
5316: LD_INT 2
5318: ARRAY
5319: PPUSH
5320: LD_INT 12
5322: PPUSH
5323: LD_INT 0
5325: PPUSH
5326: CALL_OW 50
5330: GO 5282
5332: POP
5333: POP
// if mpApemans then
5334: LD_EXP 30
5338: IFFALSE 5444
// begin for j := 1 to mpApemans do
5340: LD_ADDR_VAR 0 3
5344: PUSH
5345: DOUBLE
5346: LD_INT 1
5348: DEC
5349: ST_TO_ADDR
5350: LD_EXP 30
5354: PUSH
5355: FOR_TO
5356: IFFALSE 5442
// begin PrepareApeman ( - 5 ) ;
5358: LD_INT 5
5360: NEG
5361: PPUSH
5362: CALL 47784 0 1
// ape := CreateHuman ;
5366: LD_ADDR_VAR 0 10
5370: PUSH
5371: CALL_OW 44
5375: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5376: LD_ADDR_EXP 32
5380: PUSH
5381: LD_EXP 32
5385: PPUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_EXP 32
5395: PUSH
5396: LD_VAR 0 8
5400: ARRAY
5401: PPUSH
5402: LD_VAR 0 10
5406: PPUSH
5407: CALL 51657 0 2
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5417: LD_VAR 0 10
5421: PPUSH
5422: LD_EXP 31
5426: PUSH
5427: LD_VAR 0 8
5431: ARRAY
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: CALL_OW 49
// end ;
5440: GO 5355
5442: POP
5443: POP
// end ; end ;
5444: GO 3986
5446: POP
5447: POP
// if not mpTeamGame then
5448: LD_EXP 11
5452: NOT
5453: IFFALSE 5551
// begin for i := 1 to 8 do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 8
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5547
// for j := 1 to 8 do
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: DOUBLE
5477: LD_INT 1
5479: DEC
5480: ST_TO_ADDR
5481: LD_INT 8
5483: PUSH
5484: FOR_TO
5485: IFFALSE 5543
// if i <> j then
5487: LD_VAR 0 2
5491: PUSH
5492: LD_VAR 0 3
5496: NONEQUAL
5497: IFFALSE 5521
// SetAttitude ( i , j , att_neutral , true ) else
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_VAR 0 3
5508: PPUSH
5509: LD_INT 0
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 80
5519: GO 5541
// SetAttitude ( i , j , att_friend , true ) ;
5521: LD_VAR 0 2
5525: PPUSH
5526: LD_VAR 0 3
5530: PPUSH
5531: LD_INT 1
5533: PPUSH
5534: LD_INT 1
5536: PPUSH
5537: CALL_OW 80
5541: GO 5484
5543: POP
5544: POP
5545: GO 5468
5547: POP
5548: POP
// end else
5549: GO 5726
// begin if mpSharedVision then
5551: LD_EXP 16
5555: IFFALSE 5620
// begin for i in mpTeams do
5557: LD_ADDR_VAR 0 2
5561: PUSH
5562: LD_EXP 10
5566: PUSH
5567: FOR_IN
5568: IFFALSE 5618
// for j := 2 to i do
5570: LD_ADDR_VAR 0 3
5574: PUSH
5575: DOUBLE
5576: LD_INT 2
5578: DEC
5579: ST_TO_ADDR
5580: LD_VAR 0 2
5584: PUSH
5585: FOR_TO
5586: IFFALSE 5614
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5588: LD_VAR 0 2
5592: PUSH
5593: LD_VAR 0 3
5597: ARRAY
5598: PPUSH
5599: LD_VAR 0 2
5603: PUSH
5604: LD_INT 1
5606: ARRAY
5607: PPUSH
5608: CALL_OW 343
5612: GO 5585
5614: POP
5615: POP
5616: GO 5567
5618: POP
5619: POP
// end ; for i := 1 to 8 do
5620: LD_ADDR_VAR 0 2
5624: PUSH
5625: DOUBLE
5626: LD_INT 1
5628: DEC
5629: ST_TO_ADDR
5630: LD_INT 8
5632: PUSH
5633: FOR_TO
5634: IFFALSE 5724
// for j := 1 to 8 do
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: DOUBLE
5642: LD_INT 1
5644: DEC
5645: ST_TO_ADDR
5646: LD_INT 8
5648: PUSH
5649: FOR_TO
5650: IFFALSE 5720
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5652: LD_EXP 8
5656: PUSH
5657: LD_VAR 0 2
5661: ARRAY
5662: PUSH
5663: LD_EXP 8
5667: PUSH
5668: LD_VAR 0 3
5672: ARRAY
5673: EQUAL
5674: IFFALSE 5698
// SetAttitude ( i , j , att_friend , true ) else
5676: LD_VAR 0 2
5680: PPUSH
5681: LD_VAR 0 3
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: CALL_OW 80
5696: GO 5718
// SetAttitude ( i , j , att_enemy , true ) ;
5698: LD_VAR 0 2
5702: PPUSH
5703: LD_VAR 0 3
5707: PPUSH
5708: LD_INT 2
5710: PPUSH
5711: LD_INT 1
5713: PPUSH
5714: CALL_OW 80
5718: GO 5649
5720: POP
5721: POP
5722: GO 5633
5724: POP
5725: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5726: LD_ADDR_OWVAR 71
5730: PUSH
5731: LD_EXP 9
5735: PUSH
5736: LD_OWVAR 2
5740: ARRAY
5741: ST_TO_ADDR
// if IAmSpec then
5742: CALL_OW 531
5746: IFFALSE 5787
// begin FogOff ( true ) ;
5748: LD_INT 1
5750: PPUSH
5751: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5755: LD_EXP 29
5759: PUSH
5760: LD_INT 1
5762: ARRAY
5763: PUSH
5764: LD_INT 2
5766: DIV
5767: PPUSH
5768: LD_EXP 29
5772: PUSH
5773: LD_INT 2
5775: ARRAY
5776: PUSH
5777: LD_INT 2
5779: DIV
5780: PPUSH
5781: CALL_OW 86
// end else
5785: GO 5833
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5787: LD_EXP 21
5791: PUSH
5792: LD_EXP 7
5796: PUSH
5797: LD_OWVAR 2
5801: ARRAY
5802: ARRAY
5803: PUSH
5804: LD_INT 1
5806: ARRAY
5807: PPUSH
5808: LD_EXP 21
5812: PUSH
5813: LD_EXP 7
5817: PUSH
5818: LD_OWVAR 2
5822: ARRAY
5823: ARRAY
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: CALL_OW 86
// end ; BeginBuildUp ;
5833: CALL 6936 0 0
// enable ( mpActive ) ;
5837: LD_INT 100
5839: ENABLE_MARKED
// enable ( mpGameType ) ;
5840: LD_EXP 3
5844: ENABLE_MARKED
// mpGameActive := true ;
5845: LD_ADDR_EXP 39
5849: PUSH
5850: LD_INT 1
5852: ST_TO_ADDR
// end ;
5853: LD_VAR 0 1
5857: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5858: LD_INT 0
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
// result := [ ] ;
5865: LD_ADDR_VAR 0 5
5869: PUSH
5870: EMPTY
5871: ST_TO_ADDR
// class := class_soldier ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 1
5879: ST_TO_ADDR
// uc_side := side ;
5880: LD_ADDR_OWVAR 20
5884: PUSH
5885: LD_VAR 0 1
5889: ST_TO_ADDR
// uc_nation := nation ;
5890: LD_ADDR_OWVAR 21
5894: PUSH
5895: LD_VAR 0 2
5899: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5900: LD_ADDR_OWVAR 26
5904: PUSH
5905: LD_OWVAR 19
5909: PUSH
5910: LD_VAR 0 1
5914: ARRAY
5915: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5916: LD_INT 1
5918: PPUSH
5919: LD_INT 2
5921: PPUSH
5922: CALL_OW 12
5926: PPUSH
5927: LD_VAR 0 8
5931: PPUSH
5932: LD_VAR 0 4
5936: PUSH
5937: LD_INT 2
5939: PLUS
5940: PPUSH
5941: CALL_OW 380
// hc_importance := 105 ;
5945: LD_ADDR_OWVAR 32
5949: PUSH
5950: LD_INT 105
5952: ST_TO_ADDR
// if Multiplayer then
5953: LD_OWVAR 4
5957: IFFALSE 5997
// begin hc_gallery := MULTIAVATARS ;
5959: LD_ADDR_OWVAR 33
5963: PUSH
5964: LD_STRING MULTIAVATARS
5966: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5967: LD_ADDR_OWVAR 34
5971: PUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 525
5981: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5982: LD_ADDR_OWVAR 27
5986: PUSH
5987: LD_VAR 0 1
5991: PPUSH
5992: CALL_OW 526
5996: ST_TO_ADDR
// end ; commander := CreateHuman ;
5997: LD_ADDR_VAR 0 9
6001: PUSH
6002: CALL_OW 44
6006: ST_TO_ADDR
// result := Join ( result , commander ) ;
6007: LD_ADDR_VAR 0 5
6011: PUSH
6012: LD_VAR 0 5
6016: PPUSH
6017: LD_VAR 0 9
6021: PPUSH
6022: CALL 51657 0 2
6026: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
6027: LD_ADDR_EXP 41
6031: PUSH
6032: LD_EXP 41
6036: PPUSH
6037: LD_VAR 0 1
6041: PPUSH
6042: LD_VAR 0 9
6046: PPUSH
6047: CALL_OW 1
6051: ST_TO_ADDR
// if mpTeamPreset then
6052: LD_LOC 1
6056: IFFALSE 6152
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
6058: LD_LOC 1
6062: PUSH
6063: LD_INT 1
6065: ARRAY
6066: PPUSH
6067: LD_VAR 0 5
6071: PUSH
6072: LD_VAR 0 5
6076: ARRAY
6077: PPUSH
6078: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
6082: LD_VAR 0 5
6086: PUSH
6087: LD_VAR 0 5
6091: ARRAY
6092: PPUSH
6093: LD_INT 1
6095: PPUSH
6096: LD_LOC 1
6100: PUSH
6101: LD_INT 1
6103: ARRAY
6104: PPUSH
6105: LD_INT 1
6107: PPUSH
6108: CALL_OW 260
6112: PPUSH
6113: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
6117: LD_VAR 0 5
6121: PUSH
6122: LD_VAR 0 5
6126: ARRAY
6127: PPUSH
6128: LD_INT 2
6130: PPUSH
6131: LD_LOC 1
6135: PUSH
6136: LD_INT 1
6138: ARRAY
6139: PPUSH
6140: LD_INT 2
6142: PPUSH
6143: CALL_OW 260
6147: PPUSH
6148: CALL_OW 239
// end ; InitHc_All ( ) ;
6152: CALL_OW 584
// class := 2 ;
6156: LD_ADDR_VAR 0 8
6160: PUSH
6161: LD_INT 2
6163: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6164: LD_ADDR_VAR 0 6
6168: PUSH
6169: DOUBLE
6170: LD_INT 1
6172: DEC
6173: ST_TO_ADDR
6174: LD_VAR 0 3
6178: PUSH
6179: LD_INT 1
6181: MINUS
6182: PUSH
6183: FOR_TO
6184: IFFALSE 6379
// begin PrepareHuman ( false , class , skill ) ;
6186: LD_INT 0
6188: PPUSH
6189: LD_VAR 0 8
6193: PPUSH
6194: LD_VAR 0 4
6198: PPUSH
6199: CALL_OW 380
// un := CreateHuman ;
6203: LD_ADDR_VAR 0 7
6207: PUSH
6208: CALL_OW 44
6212: ST_TO_ADDR
// result := Join ( result , un ) ;
6213: LD_ADDR_VAR 0 5
6217: PUSH
6218: LD_VAR 0 5
6222: PPUSH
6223: LD_VAR 0 7
6227: PPUSH
6228: CALL 51657 0 2
6232: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6233: LD_LOC 1
6237: PPUSH
6238: CALL 15681 0 1
6242: PUSH
6243: LD_VAR 0 3
6247: GREATEREQUAL
6248: IFFALSE 6344
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6250: LD_LOC 1
6254: PUSH
6255: LD_VAR 0 6
6259: PUSH
6260: LD_INT 1
6262: PLUS
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 7
6269: PPUSH
6270: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6274: LD_VAR 0 7
6278: PPUSH
6279: LD_INT 1
6281: PPUSH
6282: LD_LOC 1
6286: PUSH
6287: LD_VAR 0 6
6291: PUSH
6292: LD_INT 1
6294: PLUS
6295: ARRAY
6296: PPUSH
6297: LD_INT 1
6299: PPUSH
6300: CALL_OW 260
6304: PPUSH
6305: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6309: LD_VAR 0 7
6313: PPUSH
6314: LD_INT 2
6316: PPUSH
6317: LD_LOC 1
6321: PUSH
6322: LD_VAR 0 6
6326: PUSH
6327: LD_INT 1
6329: PLUS
6330: ARRAY
6331: PPUSH
6332: LD_INT 2
6334: PPUSH
6335: CALL_OW 260
6339: PPUSH
6340: CALL_OW 239
// end ; class := Inc ( class ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_VAR 0 8
6353: PPUSH
6354: CALL 53030 0 1
6358: ST_TO_ADDR
// if class = 5 then
6359: LD_VAR 0 8
6363: PUSH
6364: LD_INT 5
6366: EQUAL
6367: IFFALSE 6377
// class := 1 ;
6369: LD_ADDR_VAR 0 8
6373: PUSH
6374: LD_INT 1
6376: ST_TO_ADDR
// end ;
6377: GO 6183
6379: POP
6380: POP
// if not mpTeamPreset then
6381: LD_LOC 1
6385: NOT
6386: IFFALSE 6398
// mpTeamPreset := result ;
6388: LD_ADDR_LOC 1
6392: PUSH
6393: LD_VAR 0 5
6397: ST_TO_ADDR
// end ;
6398: LD_VAR 0 5
6402: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6403: LD_INT 0
6405: PPUSH
6406: PPUSH
// result := [ ] ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: EMPTY
6413: ST_TO_ADDR
// if not vehicles then
6414: LD_VAR 0 3
6418: NOT
6419: IFFALSE 6423
// exit ;
6421: GO 6637
// for i := 1 to vehicles [ nation ] do
6423: LD_ADDR_VAR 0 5
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_VAR 0 3
6437: PUSH
6438: LD_VAR 0 2
6442: ARRAY
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6635
// begin uc_side := side ;
6447: LD_ADDR_OWVAR 20
6451: PUSH
6452: LD_VAR 0 1
6456: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6457: LD_VAR 0 3
6461: PUSH
6462: LD_VAR 0 2
6466: ARRAY
6467: PUSH
6468: LD_VAR 0 5
6472: ARRAY
6473: PPUSH
6474: CALL 15681 0 1
6478: PUSH
6479: LD_INT 4
6481: GREATER
6482: IFFALSE 6512
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6484: LD_ADDR_OWVAR 21
6488: PUSH
6489: LD_VAR 0 3
6493: PUSH
6494: LD_VAR 0 2
6498: ARRAY
6499: PUSH
6500: LD_VAR 0 5
6504: ARRAY
6505: PUSH
6506: LD_INT 5
6508: ARRAY
6509: ST_TO_ADDR
6510: GO 6522
// uc_nation := nation ;
6512: LD_ADDR_OWVAR 21
6516: PUSH
6517: LD_VAR 0 2
6521: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6522: LD_VAR 0 3
6526: PUSH
6527: LD_VAR 0 2
6531: ARRAY
6532: PUSH
6533: LD_VAR 0 5
6537: ARRAY
6538: PUSH
6539: LD_INT 1
6541: ARRAY
6542: PPUSH
6543: LD_VAR 0 3
6547: PUSH
6548: LD_VAR 0 2
6552: ARRAY
6553: PUSH
6554: LD_VAR 0 5
6558: ARRAY
6559: PUSH
6560: LD_INT 2
6562: ARRAY
6563: PPUSH
6564: LD_VAR 0 3
6568: PUSH
6569: LD_VAR 0 2
6573: ARRAY
6574: PUSH
6575: LD_VAR 0 5
6579: ARRAY
6580: PUSH
6581: LD_INT 3
6583: ARRAY
6584: PPUSH
6585: LD_VAR 0 3
6589: PUSH
6590: LD_VAR 0 2
6594: ARRAY
6595: PUSH
6596: LD_VAR 0 5
6600: ARRAY
6601: PUSH
6602: LD_INT 4
6604: ARRAY
6605: PPUSH
6606: LD_INT 80
6608: PPUSH
6609: CALL 18477 0 5
// result := Join ( result , CreateVehicle ) ;
6613: LD_ADDR_VAR 0 4
6617: PUSH
6618: LD_VAR 0 4
6622: PPUSH
6623: CALL_OW 45
6627: PPUSH
6628: CALL 51657 0 2
6632: ST_TO_ADDR
// end ;
6633: GO 6444
6635: POP
6636: POP
// end ;
6637: LD_VAR 0 4
6641: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6642: LD_INT 0
6644: PPUSH
6645: PPUSH
// for i in mpBattleFlags do
6646: LD_ADDR_VAR 0 3
6650: PUSH
6651: LD_EXP 23
6655: PUSH
6656: FOR_IN
6657: IFFALSE 6734
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6659: LD_VAR 0 3
6663: PPUSH
6664: LD_INT 1
6666: PUSH
6667: LD_VAR 0 1
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 2
6678: PUSH
6679: LD_VAR 0 1
6683: PUSH
6684: LD_REAL  7.00000000000000E-0001
6687: MUL
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_VAR 0 1
6700: PUSH
6701: LD_REAL  4.00000000000000E-0001
6704: MUL
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 20
6712: PUSH
6713: LD_VAR 0 1
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PPUSH
6728: CALL_OW 423
6732: GO 6656
6734: POP
6735: POP
// end ;
6736: LD_VAR 0 2
6740: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6741: LD_INT 100
6743: IFFALSE 6838
6745: GO 6747
6747: DISABLE
6748: LD_INT 0
6750: PPUSH
6751: PPUSH
// begin if mpBattleFlag <= 0 then
6752: LD_EXP 22
6756: PUSH
6757: LD_INT 0
6759: LESSEQUAL
6760: IFFALSE 6764
// exit ;
6762: GO 6838
// strength := 100 ;
6764: LD_ADDR_VAR 0 2
6768: PUSH
6769: LD_INT 100
6771: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6772: LD_EXP 22
6776: PPUSH
6777: CALL_OW 67
// strength := Dec ( strength ) ;
6781: LD_ADDR_VAR 0 2
6785: PUSH
6786: LD_VAR 0 2
6790: PPUSH
6791: CALL 53052 0 1
6795: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6796: LD_VAR 0 2
6800: PPUSH
6801: CALL 6642 0 1
// until not strength ;
6805: LD_VAR 0 2
6809: NOT
6810: IFFALSE 6772
// for i in mpBattleFlags do
6812: LD_ADDR_VAR 0 1
6816: PUSH
6817: LD_EXP 23
6821: PUSH
6822: FOR_IN
6823: IFFALSE 6836
// KillBattleFlag ( i ) ;
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 419
6834: GO 6822
6836: POP
6837: POP
// end ;
6838: PPOPN 2
6840: END
// every 0 0$1 marked mpActive do var side , tmp ;
6841: GO 6843
6843: DISABLE
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
// begin if mpSibBomb <= 1 then
6848: LD_EXP 28
6852: PUSH
6853: LD_INT 1
6855: LESSEQUAL
6856: IFFALSE 6860
// exit ;
6858: GO 6933
// tmp := mpSibBomb ;
6860: LD_ADDR_VAR 0 2
6864: PUSH
6865: LD_EXP 28
6869: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6870: LD_INT 35
6872: PPUSH
6873: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6877: LD_ADDR_VAR 0 2
6881: PUSH
6882: LD_VAR 0 2
6886: PUSH
6887: LD_INT 35
6889: MINUS
6890: ST_TO_ADDR
// until not tmp ;
6891: LD_VAR 0 2
6895: NOT
6896: IFFALSE 6870
// for side := 1 to 8 do
6898: LD_ADDR_VAR 0 1
6902: PUSH
6903: DOUBLE
6904: LD_INT 1
6906: DEC
6907: ST_TO_ADDR
6908: LD_INT 8
6910: PUSH
6911: FOR_TO
6912: IFFALSE 6931
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6914: LD_INT 25
6916: PPUSH
6917: LD_VAR 0 1
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL_OW 322
6929: GO 6911
6931: POP
6932: POP
// end ;
6933: PPOPN 2
6935: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6936: LD_INT 0
6938: PPUSH
6939: PPUSH
6940: PPUSH
// mpBuildUpTimeDelay := 0 ;
6941: LD_ADDR_EXP 48
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// if not mpBuildUpTime then
6949: LD_EXP 20
6953: NOT
6954: IFFALSE 6958
// exit ;
6956: GO 7147
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6958: LD_ADDR_EXP 48
6962: PUSH
6963: LD_INT 8400
6965: PUSH
6966: LD_INT 2100
6968: PUSH
6969: LD_EXP 20
6973: MUL
6974: PLUS
6975: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6976: LD_ADDR_EXP 49
6980: PUSH
6981: LD_INT 1
6983: ST_TO_ADDR
// for i := 1 to 8 do
6984: LD_ADDR_VAR 0 2
6988: PUSH
6989: DOUBLE
6990: LD_INT 1
6992: DEC
6993: ST_TO_ADDR
6994: LD_INT 8
6996: PUSH
6997: FOR_TO
6998: IFFALSE 7145
// if mpSidePositions [ i ] then
7000: LD_EXP 7
7004: PUSH
7005: LD_VAR 0 2
7009: ARRAY
7010: IFFALSE 7143
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
7012: LD_EXP 19
7016: PUSH
7017: LD_EXP 7
7021: PUSH
7022: LD_VAR 0 2
7026: ARRAY
7027: ARRAY
7028: PPUSH
7029: LD_INT 5
7031: PPUSH
7032: CALL_OW 424
// for j := 1 to 8 do
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: DOUBLE
7042: LD_INT 1
7044: DEC
7045: ST_TO_ADDR
7046: LD_INT 8
7048: PUSH
7049: FOR_TO
7050: IFFALSE 7141
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7052: LD_EXP 7
7056: PUSH
7057: LD_VAR 0 3
7061: ARRAY
7062: IFFALSE 7111
7064: PUSH
7065: LD_EXP 8
7069: PUSH
7070: LD_VAR 0 2
7074: ARRAY
7075: PUSH
7076: LD_EXP 8
7080: PUSH
7081: LD_VAR 0 3
7085: ARRAY
7086: NONEQUAL
7087: IFTRUE 7110
7089: PUSH
7090: LD_EXP 11
7094: NOT
7095: IFFALSE 7109
7097: PUSH
7098: LD_VAR 0 2
7102: PUSH
7103: LD_VAR 0 3
7107: NONEQUAL
7108: AND
7109: OR
7110: AND
7111: IFFALSE 7139
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7113: LD_VAR 0 3
7117: PPUSH
7118: LD_EXP 19
7122: PUSH
7123: LD_EXP 7
7127: PUSH
7128: LD_VAR 0 2
7132: ARRAY
7133: ARRAY
7134: PPUSH
7135: CALL_OW 333
7139: GO 7049
7141: POP
7142: POP
// end ;
7143: GO 6997
7145: POP
7146: POP
// end ;
7147: LD_VAR 0 1
7151: RET
// function EndBuildUp ; var i , j ; begin
7152: LD_INT 0
7154: PPUSH
7155: PPUSH
7156: PPUSH
// mpBuildUpTimeActive := false ;
7157: LD_ADDR_EXP 49
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
// for i := 1 to 8 do
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: DOUBLE
7171: LD_INT 1
7173: DEC
7174: ST_TO_ADDR
7175: LD_INT 8
7177: PUSH
7178: FOR_TO
7179: IFFALSE 7326
// if mpSidePositions [ i ] then
7181: LD_EXP 7
7185: PUSH
7186: LD_VAR 0 2
7190: ARRAY
7191: IFFALSE 7324
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7193: LD_EXP 19
7197: PUSH
7198: LD_EXP 7
7202: PUSH
7203: LD_VAR 0 2
7207: ARRAY
7208: ARRAY
7209: PPUSH
7210: LD_INT 0
7212: PPUSH
7213: CALL_OW 424
// for j := 1 to 8 do
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: DOUBLE
7223: LD_INT 1
7225: DEC
7226: ST_TO_ADDR
7227: LD_INT 8
7229: PUSH
7230: FOR_TO
7231: IFFALSE 7322
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7233: LD_EXP 7
7237: PUSH
7238: LD_VAR 0 3
7242: ARRAY
7243: IFFALSE 7292
7245: PUSH
7246: LD_EXP 8
7250: PUSH
7251: LD_VAR 0 2
7255: ARRAY
7256: PUSH
7257: LD_EXP 8
7261: PUSH
7262: LD_VAR 0 3
7266: ARRAY
7267: NONEQUAL
7268: IFTRUE 7291
7270: PUSH
7271: LD_EXP 11
7275: NOT
7276: IFFALSE 7290
7278: PUSH
7279: LD_VAR 0 2
7283: PUSH
7284: LD_VAR 0 3
7288: NONEQUAL
7289: AND
7290: OR
7291: AND
7292: IFFALSE 7320
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7294: LD_VAR 0 3
7298: PPUSH
7299: LD_EXP 19
7303: PUSH
7304: LD_EXP 7
7308: PUSH
7309: LD_VAR 0 2
7313: ARRAY
7314: ARRAY
7315: PPUSH
7316: CALL_OW 334
7320: GO 7230
7322: POP
7323: POP
// end ;
7324: GO 7178
7326: POP
7327: POP
// end ;
7328: LD_VAR 0 1
7332: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7333: LD_EXP 49
7337: IFFALSE 7516
7339: GO 7341
7341: DISABLE
7342: LD_INT 0
7344: PPUSH
7345: PPUSH
// begin for i := 1 to 8 do
7346: LD_ADDR_VAR 0 1
7350: PUSH
7351: DOUBLE
7352: LD_INT 1
7354: DEC
7355: ST_TO_ADDR
7356: LD_INT 8
7358: PUSH
7359: FOR_TO
7360: IFFALSE 7513
// if mpSidePositions [ i ] then
7362: LD_EXP 7
7366: PUSH
7367: LD_VAR 0 1
7371: ARRAY
7372: IFFALSE 7511
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_EXP 19
7383: PUSH
7384: LD_EXP 7
7388: PUSH
7389: LD_VAR 0 1
7393: ARRAY
7394: ARRAY
7395: PPUSH
7396: LD_INT 2
7398: PUSH
7399: LD_INT 21
7401: PUSH
7402: LD_INT 1
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 21
7411: PUSH
7412: LD_INT 2
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 22
7426: PUSH
7427: LD_OWVAR 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 70
7444: PUSH
7445: FOR_IN
7446: IFFALSE 7509
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7448: LD_EXP 8
7452: PUSH
7453: LD_VAR 0 1
7457: ARRAY
7458: PUSH
7459: LD_EXP 8
7463: PUSH
7464: LD_OWVAR 2
7468: ARRAY
7469: NONEQUAL
7470: IFTRUE 7493
7472: PUSH
7473: LD_EXP 11
7477: NOT
7478: IFFALSE 7492
7480: PUSH
7481: LD_VAR 0 1
7485: PUSH
7486: LD_OWVAR 2
7490: NONEQUAL
7491: AND
7492: OR
7493: IFFALSE 7507
// ComMoveToArea ( un , BuildUpEscape ) ;
7495: LD_VAR 0 2
7499: PPUSH
7500: LD_INT 57
7502: PPUSH
7503: CALL_OW 113
7507: GO 7445
7509: POP
7510: POP
7511: GO 7359
7513: POP
7514: POP
// enable ;
7515: ENABLE
// end ;
7516: PPOPN 2
7518: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7519: LD_EXP 20
7523: IFFALSE 7573
7525: GO 7527
7527: DISABLE
7528: LD_INT 0
7530: PPUSH
// begin tmp := mpBuildUpTime ;
7531: LD_ADDR_VAR 0 1
7535: PUSH
7536: LD_EXP 20
7540: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7541: LD_INT 35
7543: PPUSH
7544: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: LD_INT 35
7560: MINUS
7561: ST_TO_ADDR
// until not tmp ;
7562: LD_VAR 0 1
7566: NOT
7567: IFFALSE 7541
// EndBuildUp ;
7569: CALL 7152 0 0
// end ;
7573: PPOPN 1
7575: END
// every 0 0$1 trigger mpActive marked mpWin do
7576: LD_INT 100
7578: IFFALSE 7612
7580: GO 7582
7582: DISABLE
// begin if IAmServer then
7583: CALL_OW 518
7587: IFFALSE 7596
// wait ( 0 0$3 ) ;
7589: LD_INT 105
7591: PPUSH
7592: CALL_OW 67
// if Multiplayer then
7596: LD_OWVAR 4
7600: IFFALSE 7608
// YouWinInMultiplayer else
7602: CALL_OW 106
7606: GO 7612
// YouWin ;
7608: CALL_OW 103
// end ;
7612: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7613: LD_INT 0
7615: PPUSH
// result := false ;
7616: LD_ADDR_VAR 0 3
7620: PUSH
7621: LD_INT 0
7623: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 1
7631: DOUBLE
7632: EQUAL
7633: IFTRUE 7655
7635: LD_INT 5
7637: DOUBLE
7638: EQUAL
7639: IFTRUE 7655
7641: LD_INT 6
7643: DOUBLE
7644: EQUAL
7645: IFTRUE 7655
7647: LD_INT 7
7649: DOUBLE
7650: EQUAL
7651: IFTRUE 7655
7653: GO 7728
7655: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7656: LD_ADDR_VAR 0 3
7660: PUSH
7661: LD_INT 22
7663: PUSH
7664: LD_VAR 0 2
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 2
7675: PUSH
7676: LD_INT 21
7678: PUSH
7679: LD_INT 1
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 33
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: LD_INT 33
7698: PUSH
7699: LD_INT 5
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PPUSH
7716: CALL_OW 69
7720: PPUSH
7721: CALL 15681 0 1
7725: ST_TO_ADDR
// end ; GameTypeSurvival :
7726: GO 8124
7728: LD_INT 2
7730: DOUBLE
7731: EQUAL
7732: IFTRUE 7736
7734: GO 7866
7736: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7737: LD_ADDR_VAR 0 3
7741: PUSH
7742: LD_INT 22
7744: PUSH
7745: LD_VAR 0 2
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 30
7759: PUSH
7760: LD_INT 0
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 30
7769: PUSH
7770: LD_INT 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PPUSH
7786: CALL_OW 69
7790: PPUSH
7791: CALL 15681 0 1
7795: IFFALSE 7863
7797: PUSH
7798: LD_INT 22
7800: PUSH
7801: LD_VAR 0 2
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 2
7812: PUSH
7813: LD_INT 21
7815: PUSH
7816: LD_INT 1
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 33
7825: PUSH
7826: LD_INT 3
7828: PUSH
7829: EMPTY
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 33
7835: PUSH
7836: LD_INT 5
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 69
7857: PPUSH
7858: CALL 15681 0 1
7862: AND
7863: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7864: GO 8124
7866: LD_INT 8
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 8023
7874: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_EXP 41
7884: PUSH
7885: LD_VAR 0 2
7889: ARRAY
7890: PPUSH
7891: CALL_OW 300
7895: IFFALSE 7952
7897: PUSH
7898: LD_INT 22
7900: PUSH
7901: LD_VAR 0 2
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: LD_INT 30
7915: PUSH
7916: LD_INT 0
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PUSH
7923: LD_INT 30
7925: PUSH
7926: LD_INT 1
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: PPUSH
7947: CALL 15681 0 1
7951: AND
7952: IFFALSE 8020
7954: PUSH
7955: LD_INT 22
7957: PUSH
7958: LD_VAR 0 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 2
7969: PUSH
7970: LD_INT 21
7972: PUSH
7973: LD_INT 1
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 33
7982: PUSH
7983: LD_INT 3
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 33
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: PPUSH
8015: CALL 15681 0 1
8019: AND
8020: ST_TO_ADDR
// end ; GameTypeKing :
8021: GO 8124
8023: LD_INT 3
8025: DOUBLE
8026: EQUAL
8027: IFTRUE 8031
8029: GO 8123
8031: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 22
8039: PUSH
8040: LD_VAR 0 2
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 2
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 33
8064: PUSH
8065: LD_INT 3
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 33
8074: PUSH
8075: LD_INT 5
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 69
8096: PPUSH
8097: CALL 15681 0 1
8101: IFFALSE 8120
8103: PUSH
8104: LD_VAR 0 2
8108: PPUSH
8109: CALL 12797 0 1
8113: PUSH
8114: LD_EXP 35
8118: LESS
8119: AND
8120: ST_TO_ADDR
// end ; end ;
8121: GO 8124
8123: POP
// end ;
8124: LD_VAR 0 3
8128: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
8129: LD_INT 100
8131: IFFALSE 8361
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
8139: PPUSH
// begin if Multiplayer then
8140: LD_OWVAR 4
8144: IFFALSE 8152
// SetPlayerSpectator ( ) else
8146: CALL_OW 572
8150: GO 8161
// FogOff ( your_side ) ;
8152: LD_OWVAR 2
8156: PPUSH
8157: CALL_OW 344
// repeat gameIsOn := false ;
8161: LD_ADDR_VAR 0 1
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// for i := 1 to 8 do
8169: LD_ADDR_VAR 0 2
8173: PUSH
8174: DOUBLE
8175: LD_INT 1
8177: DEC
8178: ST_TO_ADDR
8179: LD_INT 8
8181: PUSH
8182: FOR_TO
8183: IFFALSE 8313
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8185: LD_EXP 7
8189: PUSH
8190: LD_VAR 0 2
8194: ARRAY
8195: IFFALSE 8208
8197: PUSH
8198: LD_VAR 0 2
8202: PPUSH
8203: CALL_OW 108
8207: AND
8208: IFFALSE 8222
8210: PUSH
8211: LD_VAR 0 2
8215: PUSH
8216: LD_OWVAR 2
8220: NONEQUAL
8221: AND
8222: IFFALSE 8311
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8224: LD_EXP 8
8228: PUSH
8229: LD_VAR 0 2
8233: ARRAY
8234: NOT
8235: IFTRUE 8283
8237: PUSH
8238: LD_EXP 8
8242: PUSH
8243: LD_VAR 0 2
8247: ARRAY
8248: PUSH
8249: LD_EXP 8
8253: PUSH
8254: LD_OWVAR 2
8258: ARRAY
8259: NONEQUAL
8260: IFFALSE 8282
8262: PUSH
8263: LD_OWVAR 2
8267: PPUSH
8268: LD_VAR 0 2
8272: PPUSH
8273: CALL_OW 81
8277: PUSH
8278: LD_INT 1
8280: NONEQUAL
8281: AND
8282: OR
8283: IFFALSE 8311
// if HasPowerByGameType ( mpGameType , i ) then
8285: LD_EXP 3
8289: PPUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: CALL 7613 0 2
8299: IFFALSE 8311
// begin gameIsOn := true ;
8301: LD_ADDR_VAR 0 1
8305: PUSH
8306: LD_INT 1
8308: ST_TO_ADDR
// break ;
8309: GO 8313
// end ;
8311: GO 8182
8313: POP
8314: POP
// wait ( 100 ) ;
8315: LD_INT 100
8317: PPUSH
8318: CALL_OW 67
// until not gameIsOn ;
8322: LD_VAR 0 1
8326: NOT
8327: IFFALSE 8161
// if IAmServer then
8329: CALL_OW 518
8333: IFFALSE 8342
// wait ( 0 0$3 ) ;
8335: LD_INT 105
8337: PPUSH
8338: CALL_OW 67
// if Multiplayer then
8342: LD_OWVAR 4
8346: IFFALSE 8354
// YouLostInMultiplayer else
8348: CALL_OW 107
8352: GO 8361
// YouLost (  ) ;
8354: LD_STRING 
8356: PPUSH
8357: CALL_OW 104
// end ;
8361: PPOPN 2
8363: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8364: LD_EXP 33
8368: IFFALSE 8752
8370: GO 8372
8372: DISABLE
8373: LD_INT 0
8375: PPUSH
8376: PPUSH
8377: PPUSH
8378: PPUSH
8379: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8380: LD_ADDR_VAR 0 5
8384: PUSH
8385: LD_INT 1
8387: PUSH
8388: LD_INT 2
8390: PUSH
8391: LD_INT 3
8393: PUSH
8394: LD_INT 4
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: LD_INT 6
8402: PUSH
8403: LD_INT 7
8405: PUSH
8406: LD_INT 8
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8419: LD_INT 350
8421: PPUSH
8422: CALL_OW 67
// for i := 1 to 8 do
8426: LD_ADDR_VAR 0 1
8430: PUSH
8431: DOUBLE
8432: LD_INT 1
8434: DEC
8435: ST_TO_ADDR
8436: LD_INT 8
8438: PUSH
8439: FOR_TO
8440: IFFALSE 8722
// begin j := sides [ i ] ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: LD_VAR 0 5
8451: PUSH
8452: LD_VAR 0 1
8456: ARRAY
8457: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8458: LD_EXP 40
8462: PUSH
8463: LD_VAR 0 2
8467: ARRAY
8468: PPUSH
8469: CALL 15681 0 1
8473: IFFALSE 8486
8475: PUSH
8476: LD_VAR 0 2
8480: PPUSH
8481: CALL_OW 108
8485: AND
8486: IFFALSE 8504
8488: PUSH
8489: LD_EXP 3
8493: PPUSH
8494: LD_VAR 0 2
8498: PPUSH
8499: CALL 7613 0 2
8503: AND
8504: IFFALSE 8720
// begin wait ( mpRespawn div 2 ) ;
8506: LD_EXP 33
8510: PUSH
8511: LD_INT 2
8513: DIV
8514: PPUSH
8515: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8519: LD_ADDR_VAR 0 3
8523: PUSH
8524: LD_INT 22
8526: PUSH
8527: LD_VAR 0 2
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 50
8538: PUSH
8539: EMPTY
8540: LIST
8541: PUSH
8542: LD_INT 2
8544: PUSH
8545: LD_INT 30
8547: PUSH
8548: LD_INT 0
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PUSH
8555: LD_INT 30
8557: PUSH
8558: LD_INT 1
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 69
8579: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8580: LD_VAR 0 3
8584: NOT
8585: IFTRUE 8599
8587: PUSH
8588: LD_VAR 0 2
8592: PPUSH
8593: CALL_OW 108
8597: NOT
8598: OR
8599: IFTRUE 8618
8601: PUSH
8602: LD_EXP 3
8606: PPUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: CALL 7613 0 2
8616: NOT
8617: OR
8618: IFFALSE 8622
// continue ;
8620: GO 8439
// spawn := tmp [ 1 ] ;
8622: LD_ADDR_VAR 0 4
8626: PUSH
8627: LD_VAR 0 3
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8636: LD_EXP 40
8640: PUSH
8641: LD_VAR 0 2
8645: ARRAY
8646: PUSH
8647: LD_INT 1
8649: ARRAY
8650: PPUSH
8651: LD_VAR 0 4
8655: PPUSH
8656: CALL_OW 250
8660: PPUSH
8661: LD_VAR 0 4
8665: PPUSH
8666: CALL_OW 251
8670: PPUSH
8671: LD_INT 32
8673: PPUSH
8674: LD_INT 1
8676: PPUSH
8677: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8681: LD_ADDR_EXP 40
8685: PUSH
8686: LD_EXP 40
8690: PPUSH
8691: LD_VAR 0 2
8695: PPUSH
8696: LD_EXP 40
8700: PUSH
8701: LD_VAR 0 2
8705: ARRAY
8706: PPUSH
8707: LD_INT 1
8709: PPUSH
8710: CALL_OW 3
8714: PPUSH
8715: CALL_OW 1
8719: ST_TO_ADDR
// end ; end ;
8720: GO 8439
8722: POP
8723: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8724: LD_ADDR_VAR 0 5
8728: PUSH
8729: LD_VAR 0 5
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 8
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: CALL 18007 0 4
8747: ST_TO_ADDR
// until false ;
8748: LD_INT 0
8750: IFFALSE 8419
// end ;
8752: PPOPN 5
8754: END
// every 0 0$1 marked mpActive do
8755: GO 8757
8757: DISABLE
// begin enable ;
8758: ENABLE
// if not mpDisplayStrings then
8759: LD_EXP 38
8763: NOT
8764: IFFALSE 8775
// begin display_strings := [ ] ;
8766: LD_ADDR_OWVAR 47
8770: PUSH
8771: EMPTY
8772: ST_TO_ADDR
// exit ;
8773: GO 8785
// end ; display_strings := mpDisplayStrings ;
8775: LD_ADDR_OWVAR 47
8779: PUSH
8780: LD_EXP 38
8784: ST_TO_ADDR
// end ; end_of_file
8785: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8786: LD_INT 0
8788: PPUSH
8789: PPUSH
8790: PPUSH
8791: PPUSH
8792: PPUSH
8793: PPUSH
8794: PPUSH
8795: PPUSH
8796: PPUSH
// if GetType ( un ) = unit_vehicle then
8797: LD_VAR 0 1
8801: PPUSH
8802: CALL_OW 247
8806: PUSH
8807: LD_INT 2
8809: EQUAL
8810: IFFALSE 8814
// exit ;
8812: GO 9587
// side := GetSide ( un ) ;
8814: LD_ADDR_VAR 0 9
8818: PUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 255
8828: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8829: LD_EXP 3
8833: PUSH
8834: LD_INT 2
8836: PUSH
8837: LD_INT 8
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: IN
8844: IFFALSE 8938
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 266
8855: PUSH
8856: LD_INT 0
8858: PUSH
8859: LD_INT 1
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: IN
8866: IFFALSE 8938
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8868: LD_ADDR_VAR 0 3
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_VAR 0 9
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 2
8887: PUSH
8888: LD_INT 21
8890: PUSH
8891: LD_INT 1
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 33
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PPUSH
8917: CALL_OW 69
8921: PUSH
8922: FOR_IN
8923: IFFALSE 8936
// KillUnit ( i ) ;
8925: LD_VAR 0 3
8929: PPUSH
8930: CALL_OW 66
8934: GO 8922
8936: POP
8937: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8938: LD_EXP 3
8942: PUSH
8943: LD_INT 8
8945: EQUAL
8946: IFFALSE 9030
// if un in mpCommanders then
8948: LD_VAR 0 1
8952: PUSH
8953: LD_EXP 41
8957: IN
8958: IFFALSE 9030
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8960: LD_ADDR_VAR 0 3
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_VAR 0 9
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: LD_INT 21
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 33
8992: PUSH
8993: LD_INT 3
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PPUSH
9009: CALL_OW 69
9013: PUSH
9014: FOR_IN
9015: IFFALSE 9028
// KillUnit ( i ) ;
9017: LD_VAR 0 3
9021: PPUSH
9022: CALL_OW 66
9026: GO 9014
9028: POP
9029: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 257
9039: PUSH
9040: LD_INT 12
9042: PUSH
9043: LD_INT 17
9045: PUSH
9046: LD_INT 15
9048: PUSH
9049: LD_INT 16
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: IN
9058: IFTRUE 9075
9060: PUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 263
9070: PUSH
9071: LD_INT 5
9073: EQUAL
9074: OR
9075: IFFALSE 9312
// begin tag := 0 ;
9077: LD_ADDR_VAR 0 5
9081: PUSH
9082: LD_INT 0
9084: ST_TO_ADDR
// for i := 1 to 8 do
9085: LD_ADDR_VAR 0 3
9089: PUSH
9090: DOUBLE
9091: LD_INT 1
9093: DEC
9094: ST_TO_ADDR
9095: LD_INT 8
9097: PUSH
9098: FOR_TO
9099: IFFALSE 9133
// if un in mpApePosIndex [ i ] then
9101: LD_VAR 0 1
9105: PUSH
9106: LD_EXP 32
9110: PUSH
9111: LD_VAR 0 3
9115: ARRAY
9116: IN
9117: IFFALSE 9131
// begin tag := i ;
9119: LD_ADDR_VAR 0 5
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// break ;
9129: GO 9133
// end ;
9131: GO 9098
9133: POP
9134: POP
// if not tag then
9135: LD_VAR 0 5
9139: NOT
9140: IFFALSE 9144
// exit ;
9142: GO 9587
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9144: LD_ADDR_VAR 0 7
9148: PUSH
9149: LD_EXP 31
9153: PUSH
9154: LD_EXP 7
9158: PUSH
9159: LD_VAR 0 5
9163: ARRAY
9164: ARRAY
9165: ST_TO_ADDR
// if not area then
9166: LD_VAR 0 7
9170: NOT
9171: IFFALSE 9175
// exit ;
9173: GO 9587
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9175: LD_INT 14700
9177: PUSH
9178: LD_VAR 0 1
9182: PUSH
9183: LD_INT 5
9185: MOD
9186: PUSH
9187: LD_INT 1
9189: PLUS
9190: PUSH
9191: LD_INT 700
9193: MUL
9194: PLUS
9195: PPUSH
9196: CALL_OW 67
// repeat wait ( 10 ) ;
9200: LD_INT 10
9202: PPUSH
9203: CALL_OW 67
// until not mpBlockRespThread ;
9207: LD_EXP 47
9211: NOT
9212: IFFALSE 9200
// mpBlockRespThread := true ;
9214: LD_ADDR_EXP 47
9218: PUSH
9219: LD_INT 1
9221: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9222: LD_INT 0
9224: PPUSH
9225: CALL 47784 0 1
// ape := CreateHuman ;
9229: LD_ADDR_VAR 0 4
9233: PUSH
9234: CALL_OW 44
9238: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9239: LD_ADDR_EXP 32
9243: PUSH
9244: LD_EXP 32
9248: PPUSH
9249: LD_VAR 0 5
9253: PPUSH
9254: LD_EXP 32
9258: PUSH
9259: LD_VAR 0 5
9263: ARRAY
9264: PPUSH
9265: LD_VAR 0 4
9269: PPUSH
9270: CALL 51657 0 2
9274: PPUSH
9275: CALL_OW 1
9279: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9280: LD_VAR 0 4
9284: PPUSH
9285: LD_VAR 0 7
9289: PPUSH
9290: LD_INT 0
9292: PPUSH
9293: CALL_OW 49
// wait ( 10 ) ;
9297: LD_INT 10
9299: PPUSH
9300: CALL_OW 67
// mpBlockRespThread := false ;
9304: LD_ADDR_EXP 47
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 247
9321: PUSH
9322: LD_INT 1
9324: EQUAL
9325: IFFALSE 9342
9327: PUSH
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL_OW 248
9337: PUSH
9338: LD_INT 0
9340: GREATER
9341: AND
9342: IFFALSE 9587
// begin if not mpRespawn then
9344: LD_EXP 33
9348: NOT
9349: IFFALSE 9353
// exit ;
9351: GO 9587
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9353: LD_VAR 0 9
9357: PPUSH
9358: CALL_OW 108
9362: NOT
9363: IFFALSE 9382
9365: PUSH
9366: LD_EXP 3
9370: PPUSH
9371: LD_VAR 0 9
9375: PPUSH
9376: CALL 7613 0 2
9380: NOT
9381: AND
9382: IFFALSE 9386
// exit ;
9384: GO 9587
// side := GetSide ( un ) ;
9386: LD_ADDR_VAR 0 9
9390: PUSH
9391: LD_VAR 0 1
9395: PPUSH
9396: CALL_OW 255
9400: ST_TO_ADDR
// nation := GetNation ( un ) ;
9401: LD_ADDR_VAR 0 8
9405: PUSH
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 248
9415: ST_TO_ADDR
// class := GetClass ( un ) ;
9416: LD_ADDR_VAR 0 6
9420: PUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 257
9430: ST_TO_ADDR
// if class > 4 then
9431: LD_VAR 0 6
9435: PUSH
9436: LD_INT 4
9438: GREATER
9439: IFFALSE 9449
// class := 1 ;
9441: LD_ADDR_VAR 0 6
9445: PUSH
9446: LD_INT 1
9448: ST_TO_ADDR
// repeat wait ( 10 ) ;
9449: LD_INT 10
9451: PPUSH
9452: CALL_OW 67
// until not mpBlockRespThread ;
9456: LD_EXP 47
9460: NOT
9461: IFFALSE 9449
// mpBlockRespThread := true ;
9463: LD_ADDR_EXP 47
9467: PUSH
9468: LD_INT 1
9470: ST_TO_ADDR
// uc_side := side ;
9471: LD_ADDR_OWVAR 20
9475: PUSH
9476: LD_VAR 0 9
9480: ST_TO_ADDR
// uc_nation := nation ;
9481: LD_ADDR_OWVAR 21
9485: PUSH
9486: LD_VAR 0 8
9490: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9491: LD_INT 0
9493: PPUSH
9494: LD_VAR 0 6
9498: PPUSH
9499: LD_INT 2
9501: PPUSH
9502: CALL_OW 380
// un := CreateHuman ;
9506: LD_ADDR_VAR 0 1
9510: PUSH
9511: CALL_OW 44
9515: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9516: LD_ADDR_EXP 40
9520: PUSH
9521: LD_EXP 40
9525: PPUSH
9526: LD_VAR 0 9
9530: PPUSH
9531: LD_EXP 40
9535: PUSH
9536: LD_VAR 0 9
9540: ARRAY
9541: PPUSH
9542: LD_EXP 40
9546: PUSH
9547: LD_VAR 0 9
9551: ARRAY
9552: PUSH
9553: LD_INT 1
9555: PLUS
9556: PPUSH
9557: LD_VAR 0 1
9561: PPUSH
9562: CALL_OW 1
9566: PPUSH
9567: CALL_OW 1
9571: ST_TO_ADDR
// wait ( 10 ) ;
9572: LD_INT 10
9574: PPUSH
9575: CALL_OW 67
// mpBlockRespThread := false ;
9579: LD_ADDR_EXP 47
9583: PUSH
9584: LD_INT 0
9586: ST_TO_ADDR
// end ; end ;
9587: LD_VAR 0 2
9591: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9592: LD_INT 0
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
9598: PPUSH
// tag := 0 ;
9599: LD_ADDR_VAR 0 5
9603: PUSH
9604: LD_INT 0
9606: ST_TO_ADDR
// for i := 1 to 8 do
9607: LD_ADDR_VAR 0 4
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 8
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9655
// if un in mpApePosIndex [ i ] then
9623: LD_VAR 0 2
9627: PUSH
9628: LD_EXP 32
9632: PUSH
9633: LD_VAR 0 4
9637: ARRAY
9638: IN
9639: IFFALSE 9653
// begin tag := i ;
9641: LD_ADDR_VAR 0 5
9645: PUSH
9646: LD_VAR 0 4
9650: ST_TO_ADDR
// break ;
9651: GO 9655
// end ;
9653: GO 9620
9655: POP
9656: POP
// if not tag then
9657: LD_VAR 0 5
9661: NOT
9662: IFFALSE 9666
// exit ;
9664: GO 9834
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9666: LD_ADDR_VAR 0 6
9670: PUSH
9671: LD_EXP 31
9675: PUSH
9676: LD_EXP 7
9680: PUSH
9681: LD_VAR 0 5
9685: ARRAY
9686: ARRAY
9687: ST_TO_ADDR
// if not area then
9688: LD_VAR 0 6
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9834
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9697: LD_INT 14700
9699: PUSH
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 5
9707: MOD
9708: PUSH
9709: LD_INT 1
9711: PLUS
9712: PUSH
9713: LD_INT 700
9715: MUL
9716: PLUS
9717: PPUSH
9718: CALL_OW 67
// repeat wait ( 10 ) ;
9722: LD_INT 10
9724: PPUSH
9725: CALL_OW 67
// until not mpBlockRespThread ;
9729: LD_EXP 47
9733: NOT
9734: IFFALSE 9722
// mpBlockRespThread := true ;
9736: LD_ADDR_EXP 47
9740: PUSH
9741: LD_INT 1
9743: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9744: LD_INT 0
9746: PPUSH
9747: CALL 47784 0 1
// ape := CreateHuman ;
9751: LD_ADDR_VAR 0 7
9755: PUSH
9756: CALL_OW 44
9760: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9761: LD_ADDR_EXP 32
9765: PUSH
9766: LD_EXP 32
9770: PPUSH
9771: LD_VAR 0 5
9775: PPUSH
9776: LD_EXP 32
9780: PUSH
9781: LD_VAR 0 5
9785: ARRAY
9786: PPUSH
9787: LD_VAR 0 7
9791: PPUSH
9792: CALL 51657 0 2
9796: PPUSH
9797: CALL_OW 1
9801: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9802: LD_VAR 0 7
9806: PPUSH
9807: LD_VAR 0 6
9811: PPUSH
9812: LD_INT 0
9814: PPUSH
9815: CALL_OW 49
// wait ( 10 ) ;
9819: LD_INT 10
9821: PPUSH
9822: CALL_OW 67
// mpBlockRespThread := false ;
9826: LD_ADDR_EXP 47
9830: PUSH
9831: LD_INT 0
9833: ST_TO_ADDR
// end ;
9834: LD_VAR 0 3
9838: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9839: LD_INT 0
9841: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL_OW 266
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: LD_INT 1
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: IN
9862: IFFALSE 9887
// SetBName ( building , @ & GetSide ( building ) ) ;
9864: LD_VAR 0 1
9868: PPUSH
9869: LD_STRING @
9871: PUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: CALL_OW 255
9881: STR
9882: PPUSH
9883: CALL_OW 500
// end ;
9887: LD_VAR 0 2
9891: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9892: LD_INT 0
9894: PPUSH
9895: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9896: LD_EXP 3
9900: PUSH
9901: LD_INT 2
9903: PUSH
9904: LD_INT 8
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: IN
9911: IFFALSE 9935
9913: PUSH
9914: LD_VAR 0 1
9918: PPUSH
9919: CALL_OW 266
9923: PUSH
9924: LD_INT 0
9926: PUSH
9927: LD_INT 1
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: IN
9934: AND
9935: IFFALSE 10014
// begin SetSide ( building , oldSide ) ;
9937: LD_VAR 0 1
9941: PPUSH
9942: LD_VAR 0 2
9946: PPUSH
9947: CALL_OW 235
// KillUnit ( building ) ;
9951: LD_VAR 0 1
9955: PPUSH
9956: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9960: LD_ADDR_VAR 0 5
9964: PUSH
9965: LD_INT 22
9967: PUSH
9968: LD_VAR 0 2
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 21
9979: PUSH
9980: LD_INT 1
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PPUSH
9991: CALL_OW 69
9995: PUSH
9996: FOR_IN
9997: IFFALSE 10010
// KillUnit ( i ) ;
9999: LD_VAR 0 5
10003: PPUSH
10004: CALL_OW 66
10008: GO 9996
10010: POP
10011: POP
// exit ;
10012: GO 10059
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
10014: LD_VAR 0 1
10018: PPUSH
10019: CALL_OW 266
10023: PUSH
10024: LD_INT 0
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: IN
10034: IFFALSE 10059
// SetBName ( building , @ & GetSide ( building ) ) ;
10036: LD_VAR 0 1
10040: PPUSH
10041: LD_STRING @
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 255
10053: STR
10054: PPUSH
10055: CALL_OW 500
// end ;
10059: LD_VAR 0 4
10063: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
10064: LD_INT 0
10066: PPUSH
10067: PPUSH
10068: PPUSH
// if mpGameType <> GameTypeFamine then
10069: LD_EXP 3
10073: PUSH
10074: LD_INT 5
10076: NONEQUAL
10077: IFFALSE 10081
// exit ;
10079: GO 10315
// for i := 1 to mpGlobalOilDeposits do
10081: LD_ADDR_VAR 0 6
10085: PUSH
10086: DOUBLE
10087: LD_INT 1
10089: DEC
10090: ST_TO_ADDR
10091: LD_EXP 42
10095: PUSH
10096: FOR_TO
10097: IFFALSE 10313
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
10099: LD_EXP 42
10103: PUSH
10104: LD_VAR 0 6
10108: ARRAY
10109: PUSH
10110: LD_INT 1
10112: ARRAY
10113: PPUSH
10114: LD_EXP 42
10118: PUSH
10119: LD_VAR 0 6
10123: ARRAY
10124: PUSH
10125: LD_INT 2
10127: ARRAY
10128: PPUSH
10129: CALL_OW 428
10133: PUSH
10134: LD_VAR 0 1
10138: EQUAL
10139: IFFALSE 10311
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
10141: LD_ADDR_VAR 0 7
10145: PUSH
10146: LD_EXP 42
10150: PUSH
10151: LD_VAR 0 6
10155: ARRAY
10156: PUSH
10157: LD_INT 3
10159: ARRAY
10160: ST_TO_ADDR
// value := value - amount ;
10161: LD_ADDR_VAR 0 7
10165: PUSH
10166: LD_VAR 0 7
10170: PUSH
10171: LD_VAR 0 4
10175: MINUS
10176: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10177: LD_ADDR_EXP 42
10181: PUSH
10182: LD_EXP 42
10186: PPUSH
10187: LD_VAR 0 6
10191: PPUSH
10192: LD_EXP 42
10196: PUSH
10197: LD_VAR 0 6
10201: ARRAY
10202: PPUSH
10203: LD_INT 3
10205: PPUSH
10206: LD_VAR 0 7
10210: PPUSH
10211: CALL_OW 1
10215: PPUSH
10216: CALL_OW 1
10220: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10221: LD_VAR 0 2
10225: PUSH
10226: LD_OWVAR 2
10230: PUSH
10231: LD_INT 9
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: IN
10238: IFFALSE 10254
// SetUnitDisplayNumber ( building , value ) ;
10240: LD_VAR 0 1
10244: PPUSH
10245: LD_VAR 0 7
10249: PPUSH
10250: CALL_OW 505
// if value <= 0 then
10254: LD_VAR 0 7
10258: PUSH
10259: LD_INT 0
10261: LESSEQUAL
10262: IFFALSE 10311
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10264: LD_EXP 42
10268: PUSH
10269: LD_VAR 0 6
10273: ARRAY
10274: PUSH
10275: LD_INT 1
10277: ARRAY
10278: PPUSH
10279: LD_EXP 42
10283: PUSH
10284: LD_VAR 0 6
10288: ARRAY
10289: PUSH
10290: LD_INT 2
10292: ARRAY
10293: PPUSH
10294: CALL_OW 63
// KillUnit ( building ) ;
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 66
// exit ;
10307: POP
10308: POP
10309: GO 10315
// end ; end ; end ;
10311: GO 10096
10313: POP
10314: POP
// end ;
10315: LD_VAR 0 5
10319: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
// if mpGameType <> GameTypeFamine then
10325: LD_EXP 3
10329: PUSH
10330: LD_INT 5
10332: NONEQUAL
10333: IFFALSE 10337
// exit ;
10335: GO 10571
// for i := 1 to mpGlobalSibDeposits do
10337: LD_ADDR_VAR 0 6
10341: PUSH
10342: DOUBLE
10343: LD_INT 1
10345: DEC
10346: ST_TO_ADDR
10347: LD_EXP 43
10351: PUSH
10352: FOR_TO
10353: IFFALSE 10569
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10355: LD_EXP 43
10359: PUSH
10360: LD_VAR 0 6
10364: ARRAY
10365: PUSH
10366: LD_INT 1
10368: ARRAY
10369: PPUSH
10370: LD_EXP 43
10374: PUSH
10375: LD_VAR 0 6
10379: ARRAY
10380: PUSH
10381: LD_INT 2
10383: ARRAY
10384: PPUSH
10385: CALL_OW 428
10389: PUSH
10390: LD_VAR 0 1
10394: EQUAL
10395: IFFALSE 10567
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10397: LD_ADDR_VAR 0 7
10401: PUSH
10402: LD_EXP 43
10406: PUSH
10407: LD_VAR 0 6
10411: ARRAY
10412: PUSH
10413: LD_INT 3
10415: ARRAY
10416: ST_TO_ADDR
// value := value - amount ;
10417: LD_ADDR_VAR 0 7
10421: PUSH
10422: LD_VAR 0 7
10426: PUSH
10427: LD_VAR 0 4
10431: MINUS
10432: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10433: LD_ADDR_EXP 43
10437: PUSH
10438: LD_EXP 43
10442: PPUSH
10443: LD_VAR 0 6
10447: PPUSH
10448: LD_EXP 43
10452: PUSH
10453: LD_VAR 0 6
10457: ARRAY
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: LD_VAR 0 7
10466: PPUSH
10467: CALL_OW 1
10471: PPUSH
10472: CALL_OW 1
10476: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10477: LD_VAR 0 2
10481: PUSH
10482: LD_OWVAR 2
10486: PUSH
10487: LD_INT 9
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: IN
10494: IFFALSE 10510
// SetUnitDisplayNumber ( building , value ) ;
10496: LD_VAR 0 1
10500: PPUSH
10501: LD_VAR 0 7
10505: PPUSH
10506: CALL_OW 505
// if value <= 0 then
10510: LD_VAR 0 7
10514: PUSH
10515: LD_INT 0
10517: LESSEQUAL
10518: IFFALSE 10567
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10520: LD_EXP 43
10524: PUSH
10525: LD_VAR 0 6
10529: ARRAY
10530: PUSH
10531: LD_INT 1
10533: ARRAY
10534: PPUSH
10535: LD_EXP 43
10539: PUSH
10540: LD_VAR 0 6
10544: ARRAY
10545: PUSH
10546: LD_INT 2
10548: ARRAY
10549: PPUSH
10550: CALL_OW 63
// KillUnit ( building ) ;
10554: LD_VAR 0 1
10558: PPUSH
10559: CALL_OW 66
// exit ;
10563: POP
10564: POP
10565: GO 10571
// end ; end ; end ;
10567: GO 10352
10569: POP
10570: POP
// end ;
10571: LD_VAR 0 5
10575: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10576: LD_INT 0
10578: PPUSH
10579: PPUSH
// side := GetSide ( factory ) ;
10580: LD_ADDR_VAR 0 7
10584: PUSH
10585: LD_VAR 0 1
10589: PPUSH
10590: CALL_OW 255
10594: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10595: LD_VAR 0 5
10599: PUSH
10600: LD_INT 81
10602: EQUAL
10603: IFFALSE 10641
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_VAR 0 7
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PUSH
10618: LD_INT 34
10620: PUSH
10621: LD_INT 81
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PPUSH
10632: CALL_OW 69
10636: PUSH
10637: LD_INT 0
10639: GREATER
10640: AND
10641: IFFALSE 10674
// begin ComCancel ( factory ) ;
10643: LD_VAR 0 1
10647: PPUSH
10648: CALL_OW 127
// if side = your_side then
10652: LD_VAR 0 7
10656: PUSH
10657: LD_OWVAR 2
10661: EQUAL
10662: IFFALSE 10674
// HintSpec ( VehLimit , 2 ) ;
10664: LD_STRING VehLimit
10666: PPUSH
10667: LD_INT 2
10669: PPUSH
10670: CALL_OW 338
// end ; end ;
10674: LD_VAR 0 6
10678: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10679: LD_INT 0
10681: PPUSH
10682: PPUSH
10683: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10684: LD_VAR 0 1
10688: PPUSH
10689: CALL_OW 264
10693: PUSH
10694: LD_INT 81
10696: EQUAL
10697: IFFALSE 10714
10699: PUSH
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL_OW 263
10709: PUSH
10710: LD_INT 1
10712: EQUAL
10713: AND
10714: IFFALSE 10994
// begin for i := 1 to Count ( minersList ) do
10716: LD_ADDR_VAR 0 6
10720: PUSH
10721: DOUBLE
10722: LD_INT 1
10724: DEC
10725: ST_TO_ADDR
10726: LD_EXP 58
10730: PPUSH
10731: CALL 15681 0 1
10735: PUSH
10736: FOR_TO
10737: IFFALSE 10855
// begin if minersList [ i ] = oldId then
10739: LD_EXP 58
10743: PUSH
10744: LD_VAR 0 6
10748: ARRAY
10749: PUSH
10750: LD_VAR 0 2
10754: EQUAL
10755: IFFALSE 10853
// begin for j := 1 to minerMinesList [ i ] do
10757: LD_ADDR_VAR 0 7
10761: PUSH
10762: DOUBLE
10763: LD_INT 1
10765: DEC
10766: ST_TO_ADDR
10767: LD_EXP 59
10771: PUSH
10772: LD_VAR 0 6
10776: ARRAY
10777: PUSH
10778: FOR_TO
10779: IFFALSE 10829
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10781: LD_EXP 59
10785: PUSH
10786: LD_VAR 0 6
10790: ARRAY
10791: PUSH
10792: LD_VAR 0 7
10796: ARRAY
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_EXP 59
10806: PUSH
10807: LD_VAR 0 6
10811: ARRAY
10812: PUSH
10813: LD_VAR 0 7
10817: ARRAY
10818: PUSH
10819: LD_INT 2
10821: ARRAY
10822: PPUSH
10823: CALL_OW 612
10827: GO 10778
10829: POP
10830: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10831: LD_ADDR_EXP 59
10835: PUSH
10836: LD_EXP 59
10840: PPUSH
10841: LD_VAR 0 6
10845: PPUSH
10846: CALL_OW 3
10850: ST_TO_ADDR
// break ;
10851: GO 10855
// end ; end ;
10853: GO 10736
10855: POP
10856: POP
// minersList := minersList diff oldId ;
10857: LD_ADDR_EXP 58
10861: PUSH
10862: LD_EXP 58
10866: PUSH
10867: LD_VAR 0 2
10871: DIFF
10872: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10873: LD_INT 22
10875: PUSH
10876: LD_VAR 0 4
10880: PPUSH
10881: CALL_OW 255
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 34
10892: PUSH
10893: LD_INT 81
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 69
10908: PUSH
10909: LD_INT 1
10911: GREATER
10912: IFFALSE 10939
// begin ComExit ( unit ) ;
10914: LD_VAR 0 4
10918: PPUSH
10919: CALL 52055 0 1
// SetSide ( newId , oldSide ) ;
10923: LD_VAR 0 1
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: CALL_OW 235
// exit ;
10937: GO 10994
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10939: LD_ADDR_EXP 58
10943: PUSH
10944: LD_EXP 58
10948: PPUSH
10949: LD_EXP 58
10953: PUSH
10954: LD_INT 1
10956: PLUS
10957: PPUSH
10958: LD_VAR 0 1
10962: PPUSH
10963: CALL_OW 1
10967: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10968: LD_ADDR_EXP 59
10972: PUSH
10973: LD_EXP 59
10977: PPUSH
10978: LD_EXP 59
10982: PUSH
10983: LD_INT 1
10985: PLUS
10986: PPUSH
10987: EMPTY
10988: PPUSH
10989: CALL_OW 1
10993: ST_TO_ADDR
// end ; end ; end_of_file
10994: LD_VAR 0 5
10998: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10999: LD_EXP 39
11003: IFFALSE 11011
11005: PUSH
11006: CALL 11221 0 0
11010: AND
11011: IFFALSE 11019
11013: PUSH
11014: LD_OWVAR 4
11018: AND
11019: IFFALSE 11218
11021: GO 11023
11023: DISABLE
11024: LD_INT 0
11026: PPUSH
11027: PPUSH
// begin canWin := false ;
11028: LD_ADDR_VAR 0 2
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// if not HasPower ( your_side ) then
11036: LD_OWVAR 2
11040: PPUSH
11041: CALL 11263 0 1
11045: NOT
11046: IFFALSE 11057
// begin Multiplayer_Loose_Message ;
11048: CALL_OW 521
// enable ( mpLose ) ;
11052: LD_INT 102
11054: ENABLE_MARKED
// end else
11055: GO 11218
// begin canWin := true ;
11057: LD_ADDR_VAR 0 2
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// for i := 1 to 8 do
11065: LD_ADDR_VAR 0 1
11069: PUSH
11070: DOUBLE
11071: LD_INT 1
11073: DEC
11074: ST_TO_ADDR
11075: LD_INT 8
11077: PUSH
11078: FOR_TO
11079: IFFALSE 11204
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11081: LD_EXP 7
11085: PUSH
11086: LD_VAR 0 1
11090: ARRAY
11091: IFFALSE 11104
11093: PUSH
11094: LD_VAR 0 1
11098: PPUSH
11099: CALL_OW 108
11103: AND
11104: IFFALSE 11118
11106: PUSH
11107: LD_VAR 0 1
11111: PUSH
11112: LD_OWVAR 2
11116: NONEQUAL
11117: AND
11118: IFFALSE 11202
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11120: LD_EXP 8
11124: PUSH
11125: LD_VAR 0 1
11129: ARRAY
11130: NOT
11131: IFTRUE 11179
11133: PUSH
11134: LD_EXP 8
11138: PUSH
11139: LD_VAR 0 1
11143: ARRAY
11144: PUSH
11145: LD_EXP 8
11149: PUSH
11150: LD_OWVAR 2
11154: ARRAY
11155: NONEQUAL
11156: IFFALSE 11178
11158: PUSH
11159: LD_OWVAR 2
11163: PPUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: CALL_OW 81
11173: PUSH
11174: LD_INT 1
11176: NONEQUAL
11177: AND
11178: OR
11179: IFFALSE 11202
// if HasPower ( i ) then
11181: LD_VAR 0 1
11185: PPUSH
11186: CALL 11263 0 1
11190: IFFALSE 11202
// begin canWin := false ;
11192: LD_ADDR_VAR 0 2
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// break ;
11200: GO 11204
// end ;
11202: GO 11078
11204: POP
11205: POP
// if canWin then
11206: LD_VAR 0 2
11210: IFFALSE 11217
// enable ( mpWin ) else
11212: LD_INT 101
11214: ENABLE_MARKED
11215: GO 11218
// enable ;
11217: ENABLE
// end ; end ;
11218: PPOPN 2
11220: END
// function CanWinLoose ; begin
11221: LD_INT 0
11223: PPUSH
// result := true ;
11224: LD_ADDR_VAR 0 1
11228: PUSH
11229: LD_INT 1
11231: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11232: CALL_OW 531
11236: IFFALSE 11248
11238: PUSH
11239: CALL_OW 519
11243: PUSH
11244: LD_INT 1
11246: GREATER
11247: AND
11248: IFFALSE 11258
// result := false ;
11250: LD_ADDR_VAR 0 1
11254: PUSH
11255: LD_INT 0
11257: ST_TO_ADDR
// end ;
11258: LD_VAR 0 1
11262: RET
// function HasPower ( i ) ; begin
11263: LD_INT 0
11265: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11266: LD_ADDR_VAR 0 2
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_VAR 0 1
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 2
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 1
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 33
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 33
11308: PUSH
11309: LD_INT 5
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PPUSH
11326: CALL_OW 69
11330: ST_TO_ADDR
// end ; end_of_file
11331: LD_VAR 0 2
11335: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11336: LD_EXP 39
11340: IFFALSE 11383
11342: GO 11344
11344: DISABLE
11345: LD_INT 0
11347: PPUSH
// begin for i := 1 to 8 do
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: DOUBLE
11354: LD_INT 1
11356: DEC
11357: ST_TO_ADDR
11358: LD_INT 8
11360: PUSH
11361: FOR_TO
11362: IFFALSE 11381
// SetRestrict ( b_depot , i , state_disabled ) ;
11364: LD_INT 0
11366: PPUSH
11367: LD_VAR 0 1
11371: PPUSH
11372: LD_INT 0
11374: PPUSH
11375: CALL_OW 324
11379: GO 11361
11381: POP
11382: POP
// end ;
11383: PPOPN 1
11385: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11386: LD_EXP 39
11390: IFFALSE 11398
11392: PUSH
11393: CALL 11608 0 0
11397: AND
11398: IFFALSE 11406
11400: PUSH
11401: LD_OWVAR 4
11405: AND
11406: IFFALSE 11605
11408: GO 11410
11410: DISABLE
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
// begin canWin := false ;
11415: LD_ADDR_VAR 0 2
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// if not HasPower ( your_side ) then
11423: LD_OWVAR 2
11427: PPUSH
11428: CALL 11650 0 1
11432: NOT
11433: IFFALSE 11444
// begin Multiplayer_Loose_Message ;
11435: CALL_OW 521
// enable ( mpLose ) ;
11439: LD_INT 102
11441: ENABLE_MARKED
// end else
11442: GO 11605
// begin canWin := true ;
11444: LD_ADDR_VAR 0 2
11448: PUSH
11449: LD_INT 1
11451: ST_TO_ADDR
// for i := 1 to 8 do
11452: LD_ADDR_VAR 0 1
11456: PUSH
11457: DOUBLE
11458: LD_INT 1
11460: DEC
11461: ST_TO_ADDR
11462: LD_INT 8
11464: PUSH
11465: FOR_TO
11466: IFFALSE 11591
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11468: LD_EXP 7
11472: PUSH
11473: LD_VAR 0 1
11477: ARRAY
11478: IFFALSE 11491
11480: PUSH
11481: LD_VAR 0 1
11485: PPUSH
11486: CALL_OW 108
11490: AND
11491: IFFALSE 11505
11493: PUSH
11494: LD_VAR 0 1
11498: PUSH
11499: LD_OWVAR 2
11503: NONEQUAL
11504: AND
11505: IFFALSE 11589
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11507: LD_EXP 8
11511: PUSH
11512: LD_VAR 0 1
11516: ARRAY
11517: NOT
11518: IFTRUE 11566
11520: PUSH
11521: LD_EXP 8
11525: PUSH
11526: LD_VAR 0 1
11530: ARRAY
11531: PUSH
11532: LD_EXP 8
11536: PUSH
11537: LD_OWVAR 2
11541: ARRAY
11542: NONEQUAL
11543: IFFALSE 11565
11545: PUSH
11546: LD_OWVAR 2
11550: PPUSH
11551: LD_VAR 0 1
11555: PPUSH
11556: CALL_OW 81
11560: PUSH
11561: LD_INT 1
11563: NONEQUAL
11564: AND
11565: OR
11566: IFFALSE 11589
// if HasPower ( i ) then
11568: LD_VAR 0 1
11572: PPUSH
11573: CALL 11650 0 1
11577: IFFALSE 11589
// begin canWin := false ;
11579: LD_ADDR_VAR 0 2
11583: PUSH
11584: LD_INT 0
11586: ST_TO_ADDR
// break ;
11587: GO 11591
// end ;
11589: GO 11465
11591: POP
11592: POP
// if canWin then
11593: LD_VAR 0 2
11597: IFFALSE 11604
// enable ( mpWin ) else
11599: LD_INT 101
11601: ENABLE_MARKED
11602: GO 11605
// enable ;
11604: ENABLE
// end ; end ;
11605: PPOPN 2
11607: END
// function CanWinLoose ; begin
11608: LD_INT 0
11610: PPUSH
// result := true ;
11611: LD_ADDR_VAR 0 1
11615: PUSH
11616: LD_INT 1
11618: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11619: CALL_OW 531
11623: IFFALSE 11635
11625: PUSH
11626: CALL_OW 519
11630: PUSH
11631: LD_INT 1
11633: GREATER
11634: AND
11635: IFFALSE 11645
// result := false ;
11637: LD_ADDR_VAR 0 1
11641: PUSH
11642: LD_INT 0
11644: ST_TO_ADDR
// end ;
11645: LD_VAR 0 1
11649: RET
// function HasPower ( i ) ; begin
11650: LD_INT 0
11652: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11653: LD_INT 22
11655: PUSH
11656: LD_VAR 0 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: LD_INT 30
11670: PUSH
11671: LD_INT 0
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 30
11680: PUSH
11681: LD_INT 1
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PPUSH
11697: CALL_OW 69
11701: NOT
11702: IFFALSE 11706
// exit ;
11704: GO 11771
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11706: LD_ADDR_VAR 0 2
11710: PUSH
11711: LD_INT 22
11713: PUSH
11714: LD_VAR 0 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: LD_INT 21
11728: PUSH
11729: LD_INT 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 33
11738: PUSH
11739: LD_INT 3
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 33
11748: PUSH
11749: LD_INT 5
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: PPUSH
11766: CALL_OW 69
11770: ST_TO_ADDR
// end ; end_of_file
11771: LD_VAR 0 2
11775: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
11776: LD_EXP 39
11780: IFFALSE 12121
11782: GO 11784
11784: DISABLE
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
11789: PPUSH
// begin mpKingPoints := [ ] ;
11790: LD_ADDR_EXP 50
11794: PUSH
11795: EMPTY
11796: ST_TO_ADDR
// if mpTeamGame then
11797: LD_EXP 11
11801: IFFALSE 11855
// begin for i := 1 to Count ( mpTeams ) do
11803: LD_ADDR_VAR 0 1
11807: PUSH
11808: DOUBLE
11809: LD_INT 1
11811: DEC
11812: ST_TO_ADDR
11813: LD_EXP 10
11817: PPUSH
11818: CALL 15681 0 1
11822: PUSH
11823: FOR_TO
11824: IFFALSE 11851
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11826: LD_ADDR_EXP 50
11830: PUSH
11831: LD_EXP 50
11835: PPUSH
11836: LD_VAR 0 1
11840: PPUSH
11841: LD_INT 0
11843: PPUSH
11844: CALL_OW 1
11848: ST_TO_ADDR
11849: GO 11823
11851: POP
11852: POP
// end else
11853: GO 11898
// begin for i := 1 to 8 do
11855: LD_ADDR_VAR 0 1
11859: PUSH
11860: DOUBLE
11861: LD_INT 1
11863: DEC
11864: ST_TO_ADDR
11865: LD_INT 8
11867: PUSH
11868: FOR_TO
11869: IFFALSE 11896
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11871: LD_ADDR_EXP 50
11875: PUSH
11876: LD_EXP 50
11880: PPUSH
11881: LD_VAR 0 1
11885: PPUSH
11886: LD_INT 0
11888: PPUSH
11889: CALL_OW 1
11893: ST_TO_ADDR
11894: GO 11868
11896: POP
11897: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
11898: LD_ADDR_VAR 0 3
11902: PUSH
11903: LD_EXP 2
11907: PPUSH
11908: LD_INT 0
11910: PPUSH
11911: CALL_OW 517
11915: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11916: LD_ADDR_VAR 0 1
11920: PUSH
11921: DOUBLE
11922: LD_INT 1
11924: DEC
11925: ST_TO_ADDR
11926: LD_VAR 0 3
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PUSH
11935: FOR_TO
11936: IFFALSE 12003
// for j := 1 to 8 do
11938: LD_ADDR_VAR 0 2
11942: PUSH
11943: DOUBLE
11944: LD_INT 1
11946: DEC
11947: ST_TO_ADDR
11948: LD_INT 8
11950: PUSH
11951: FOR_TO
11952: IFFALSE 11999
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
11954: LD_VAR 0 3
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PUSH
11963: LD_VAR 0 1
11967: ARRAY
11968: PPUSH
11969: LD_VAR 0 3
11973: PUSH
11974: LD_INT 2
11976: ARRAY
11977: PUSH
11978: LD_VAR 0 1
11982: ARRAY
11983: PPUSH
11984: LD_VAR 0 2
11988: PPUSH
11989: LD_INT 12
11991: NEG
11992: PPUSH
11993: CALL_OW 330
11997: GO 11951
11999: POP
12000: POP
12001: GO 11935
12003: POP
12004: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
12005: LD_EXP 34
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 424
// UpdateCounter ;
12017: CALL 12627 0 0
// repeat wait ( 0 0$1 ) ;
12021: LD_INT 35
12023: PPUSH
12024: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12028: LD_ADDR_VAR 0 3
12032: PUSH
12033: LD_EXP 34
12037: PPUSH
12038: LD_INT 3
12040: PUSH
12041: LD_INT 57
12043: PUSH
12044: EMPTY
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 50
12053: PUSH
12054: EMPTY
12055: LIST
12056: PUSH
12057: LD_INT 2
12059: PUSH
12060: LD_INT 30
12062: PUSH
12063: LD_INT 0
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 30
12072: PUSH
12073: LD_INT 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: PPUSH
12090: CALL_OW 70
12094: ST_TO_ADDR
// if not tmp then
12095: LD_VAR 0 3
12099: NOT
12100: IFFALSE 12104
// continue ;
12102: GO 12021
// AddPoints ( tmp ) ;
12104: LD_VAR 0 3
12108: PPUSH
12109: CALL 12305 0 1
// UpdateCounter ;
12113: CALL 12627 0 0
// until false ;
12117: LD_INT 0
12119: IFFALSE 12021
// end ;
12121: PPOPN 3
12123: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
12124: LD_EXP 39
12128: IFFALSE 12136
12130: PUSH
12131: LD_EXP 37
12135: AND
12136: IFFALSE 12302
12138: GO 12140
12140: DISABLE
12141: LD_INT 0
12143: PPUSH
12144: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
12145: LD_ADDR_VAR 0 2
12149: PUSH
12150: LD_EXP 2
12154: PPUSH
12155: LD_INT 0
12157: PPUSH
12158: CALL_OW 517
12162: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: DOUBLE
12169: LD_INT 1
12171: DEC
12172: ST_TO_ADDR
12173: LD_VAR 0 2
12177: PUSH
12178: LD_INT 1
12180: ARRAY
12181: PUSH
12182: FOR_TO
12183: IFFALSE 12224
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
12185: LD_VAR 0 2
12189: PUSH
12190: LD_INT 1
12192: ARRAY
12193: PUSH
12194: LD_VAR 0 1
12198: ARRAY
12199: PPUSH
12200: LD_VAR 0 2
12204: PUSH
12205: LD_INT 2
12207: ARRAY
12208: PUSH
12209: LD_VAR 0 1
12213: ARRAY
12214: PPUSH
12215: LD_INT 125
12217: PPUSH
12218: CALL_OW 495
12222: GO 12182
12224: POP
12225: POP
// repeat wait ( mpEmissions ) ;
12226: LD_EXP 37
12230: PPUSH
12231: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
12235: LD_ADDR_VAR 0 1
12239: PUSH
12240: DOUBLE
12241: LD_INT 1
12243: DEC
12244: ST_TO_ADDR
12245: LD_VAR 0 2
12249: PUSH
12250: LD_INT 1
12252: ARRAY
12253: PUSH
12254: FOR_TO
12255: IFFALSE 12296
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
12257: LD_VAR 0 2
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PUSH
12266: LD_VAR 0 1
12270: ARRAY
12271: PPUSH
12272: LD_VAR 0 2
12276: PUSH
12277: LD_INT 2
12279: ARRAY
12280: PUSH
12281: LD_VAR 0 1
12285: ARRAY
12286: PPUSH
12287: LD_INT 15
12289: PPUSH
12290: CALL_OW 495
12294: GO 12254
12296: POP
12297: POP
// until false ;
12298: LD_INT 0
12300: IFFALSE 12226
// end ;
12302: PPOPN 2
12304: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
12311: PPUSH
// if mpTeamGame then
12312: LD_EXP 11
12316: IFFALSE 12513
// begin first := depots [ 1 ] ;
12318: LD_ADDR_VAR 0 4
12322: PUSH
12323: LD_VAR 0 1
12327: PUSH
12328: LD_INT 1
12330: ARRAY
12331: ST_TO_ADDR
// side := GetSide ( first ) ;
12332: LD_ADDR_VAR 0 6
12336: PUSH
12337: LD_VAR 0 4
12341: PPUSH
12342: CALL_OW 255
12346: ST_TO_ADDR
// for i := 1 to mpTeams do
12347: LD_ADDR_VAR 0 3
12351: PUSH
12352: DOUBLE
12353: LD_INT 1
12355: DEC
12356: ST_TO_ADDR
12357: LD_EXP 10
12361: PUSH
12362: FOR_TO
12363: IFFALSE 12397
// if side in mpTeams [ i ] then
12365: LD_VAR 0 6
12369: PUSH
12370: LD_EXP 10
12374: PUSH
12375: LD_VAR 0 3
12379: ARRAY
12380: IN
12381: IFFALSE 12395
// begin team := i ;
12383: LD_ADDR_VAR 0 5
12387: PUSH
12388: LD_VAR 0 3
12392: ST_TO_ADDR
// break ;
12393: GO 12397
// end ;
12395: GO 12362
12397: POP
12398: POP
// if not team then
12399: LD_VAR 0 5
12403: NOT
12404: IFFALSE 12408
// exit ;
12406: GO 12622
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
12408: LD_EXP 34
12412: PPUSH
12413: LD_INT 81
12415: PUSH
12416: LD_VAR 0 6
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 70
12429: IFFALSE 12433
// exit ;
12431: GO 12622
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
12433: LD_ADDR_EXP 50
12437: PUSH
12438: LD_EXP 50
12442: PPUSH
12443: LD_VAR 0 5
12447: PPUSH
12448: LD_EXP 50
12452: PUSH
12453: LD_VAR 0 5
12457: ARRAY
12458: PUSH
12459: LD_INT 1
12461: PLUS
12462: PPUSH
12463: CALL_OW 1
12467: ST_TO_ADDR
// for i in mpTeams [ team ] do
12468: LD_ADDR_VAR 0 3
12472: PUSH
12473: LD_EXP 10
12477: PUSH
12478: LD_VAR 0 5
12482: ARRAY
12483: PUSH
12484: FOR_IN
12485: IFFALSE 12509
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_EXP 50
12496: PUSH
12497: LD_VAR 0 5
12501: ARRAY
12502: PPUSH
12503: CALL_OW 506
12507: GO 12484
12509: POP
12510: POP
// end else
12511: GO 12622
// begin first := depots [ 1 ] ;
12513: LD_ADDR_VAR 0 4
12517: PUSH
12518: LD_VAR 0 1
12522: PUSH
12523: LD_INT 1
12525: ARRAY
12526: ST_TO_ADDR
// side := GetSide ( first ) ;
12527: LD_ADDR_VAR 0 6
12531: PUSH
12532: LD_VAR 0 4
12536: PPUSH
12537: CALL_OW 255
12541: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
12542: LD_EXP 34
12546: PPUSH
12547: LD_INT 81
12549: PUSH
12550: LD_VAR 0 6
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PPUSH
12559: CALL_OW 70
12563: IFFALSE 12567
// exit ;
12565: GO 12622
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
12567: LD_ADDR_EXP 50
12571: PUSH
12572: LD_EXP 50
12576: PPUSH
12577: LD_VAR 0 6
12581: PPUSH
12582: LD_EXP 50
12586: PUSH
12587: LD_VAR 0 6
12591: ARRAY
12592: PUSH
12593: LD_INT 1
12595: PLUS
12596: PPUSH
12597: CALL_OW 1
12601: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
12602: LD_VAR 0 6
12606: PPUSH
12607: LD_EXP 50
12611: PUSH
12612: LD_VAR 0 6
12616: ARRAY
12617: PPUSH
12618: CALL_OW 506
// end ; end ;
12622: LD_VAR 0 2
12626: RET
// function UpdateCounter ; var i ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// result := [ ] ;
12631: LD_ADDR_VAR 0 1
12635: PUSH
12636: EMPTY
12637: ST_TO_ADDR
// if mpTeamGame then
12638: LD_EXP 11
12642: IFFALSE 12709
// begin for i := 1 to mpTeams do
12644: LD_ADDR_VAR 0 2
12648: PUSH
12649: DOUBLE
12650: LD_INT 1
12652: DEC
12653: ST_TO_ADDR
12654: LD_EXP 10
12658: PUSH
12659: FOR_TO
12660: IFFALSE 12705
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
12662: LD_ADDR_VAR 0 1
12666: PUSH
12667: LD_VAR 0 1
12671: PUSH
12672: LD_STRING #KingoftheHill-Team
12674: PUSH
12675: LD_VAR 0 2
12679: PUSH
12680: LD_EXP 50
12684: PUSH
12685: LD_VAR 0 2
12689: ARRAY
12690: PUSH
12691: LD_EXP 35
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: ADD
12702: ST_TO_ADDR
12703: GO 12659
12705: POP
12706: POP
// end else
12707: GO 12782
// begin for i := 1 to 8 do
12709: LD_ADDR_VAR 0 2
12713: PUSH
12714: DOUBLE
12715: LD_INT 1
12717: DEC
12718: ST_TO_ADDR
12719: LD_INT 8
12721: PUSH
12722: FOR_TO
12723: IFFALSE 12780
// if mpSidePositions [ i ] then
12725: LD_EXP 7
12729: PUSH
12730: LD_VAR 0 2
12734: ARRAY
12735: IFFALSE 12778
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
12737: LD_ADDR_VAR 0 1
12741: PUSH
12742: LD_VAR 0 1
12746: PUSH
12747: LD_STRING #KingoftheHill-Player
12749: PUSH
12750: LD_VAR 0 2
12754: PUSH
12755: LD_EXP 50
12759: PUSH
12760: LD_VAR 0 2
12764: ARRAY
12765: PUSH
12766: LD_EXP 35
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: ADD
12777: ST_TO_ADDR
12778: GO 12722
12780: POP
12781: POP
// end ; mpDisplayStrings := result ;
12782: LD_ADDR_EXP 38
12786: PUSH
12787: LD_VAR 0 1
12791: ST_TO_ADDR
// end ;
12792: LD_VAR 0 1
12796: RET
// export function HowMuchPointsKing ( side ) ; begin
12797: LD_INT 0
12799: PPUSH
// result := HowMuchPoints ( side ) ;
12800: LD_ADDR_VAR 0 2
12804: PUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL 12820 0 1
12814: ST_TO_ADDR
// end ;
12815: LD_VAR 0 2
12819: RET
// function HowMuchPoints ( side ) ; var i ; begin
12820: LD_INT 0
12822: PPUSH
12823: PPUSH
// if mpTeamGame then
12824: LD_EXP 11
12828: IFFALSE 12897
// begin for i := 1 to Count ( mpTeams ) do
12830: LD_ADDR_VAR 0 3
12834: PUSH
12835: DOUBLE
12836: LD_INT 1
12838: DEC
12839: ST_TO_ADDR
12840: LD_EXP 10
12844: PPUSH
12845: CALL 15681 0 1
12849: PUSH
12850: FOR_TO
12851: IFFALSE 12893
// begin if side in mpTeams [ i ] then
12853: LD_VAR 0 1
12857: PUSH
12858: LD_EXP 10
12862: PUSH
12863: LD_VAR 0 3
12867: ARRAY
12868: IN
12869: IFFALSE 12891
// begin result := mpKingPoints [ i ] ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_EXP 50
12880: PUSH
12881: LD_VAR 0 3
12885: ARRAY
12886: ST_TO_ADDR
// exit ;
12887: POP
12888: POP
12889: GO 12913
// end ; end ;
12891: GO 12850
12893: POP
12894: POP
// end else
12895: GO 12913
// result := mpKingPoints [ side ] ;
12897: LD_ADDR_VAR 0 2
12901: PUSH
12902: LD_EXP 50
12906: PUSH
12907: LD_VAR 0 1
12911: ARRAY
12912: ST_TO_ADDR
// end ;
12913: LD_VAR 0 2
12917: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
12918: LD_EXP 39
12922: IFFALSE 12930
12924: PUSH
12925: CALL 13342 0 0
12929: AND
12930: IFFALSE 12938
12932: PUSH
12933: LD_OWVAR 4
12937: AND
12938: IFFALSE 13191
12940: GO 12942
12942: DISABLE
12943: LD_INT 0
12945: PPUSH
12946: PPUSH
// begin canWin := false ;
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: LD_INT 0
12954: ST_TO_ADDR
// if not HasPower ( your_side ) then
12955: LD_OWVAR 2
12959: PPUSH
12960: CALL 13384 0 1
12964: NOT
12965: IFFALSE 12976
// begin Multiplayer_Loose_Message ;
12967: CALL_OW 521
// enable ( mpLose ) ;
12971: LD_INT 102
12973: ENABLE_MARKED
// end else
12974: GO 13191
// begin if not EnemiesInGame then
12976: CALL 13194 0 0
12980: NOT
12981: IFFALSE 12988
// begin enable ( mpWin ) ;
12983: LD_INT 101
12985: ENABLE_MARKED
// exit ;
12986: GO 13191
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: LD_OWVAR 2
12997: PPUSH
12998: CALL 12820 0 1
13002: PUSH
13003: LD_EXP 35
13007: GREATEREQUAL
13008: IFFALSE 13021
13010: PUSH
13011: LD_OWVAR 2
13015: PPUSH
13016: CALL 13384 0 1
13020: AND
13021: ST_TO_ADDR
// for i := 1 to 8 do
13022: LD_ADDR_VAR 0 1
13026: PUSH
13027: DOUBLE
13028: LD_INT 1
13030: DEC
13031: ST_TO_ADDR
13032: LD_INT 8
13034: PUSH
13035: FOR_TO
13036: IFFALSE 13177
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13038: LD_EXP 7
13042: PUSH
13043: LD_VAR 0 1
13047: ARRAY
13048: IFFALSE 13061
13050: PUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 108
13060: AND
13061: IFFALSE 13075
13063: PUSH
13064: LD_VAR 0 1
13068: PUSH
13069: LD_OWVAR 2
13073: NONEQUAL
13074: AND
13075: IFFALSE 13175
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13077: LD_EXP 8
13081: PUSH
13082: LD_VAR 0 1
13086: ARRAY
13087: NOT
13088: IFTRUE 13136
13090: PUSH
13091: LD_EXP 8
13095: PUSH
13096: LD_VAR 0 1
13100: ARRAY
13101: PUSH
13102: LD_EXP 8
13106: PUSH
13107: LD_OWVAR 2
13111: ARRAY
13112: NONEQUAL
13113: IFFALSE 13135
13115: PUSH
13116: LD_OWVAR 2
13120: PPUSH
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 81
13130: PUSH
13131: LD_INT 1
13133: NONEQUAL
13134: AND
13135: OR
13136: IFFALSE 13175
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
13138: LD_VAR 0 1
13142: PPUSH
13143: CALL 12820 0 1
13147: PUSH
13148: LD_EXP 35
13152: GREATEREQUAL
13153: IFFALSE 13166
13155: PUSH
13156: LD_VAR 0 1
13160: PPUSH
13161: CALL 13384 0 1
13165: AND
13166: IFFALSE 13175
// begin enable ( mpLose ) ;
13168: LD_INT 102
13170: ENABLE_MARKED
// exit ;
13171: POP
13172: POP
13173: GO 13191
// end ;
13175: GO 13035
13177: POP
13178: POP
// if canWin then
13179: LD_VAR 0 2
13183: IFFALSE 13190
// enable ( mpWin ) else
13185: LD_INT 101
13187: ENABLE_MARKED
13188: GO 13191
// enable ;
13190: ENABLE
// end ; end ;
13191: PPOPN 2
13193: END
// function EnemiesInGame ; var i ; begin
13194: LD_INT 0
13196: PPUSH
13197: PPUSH
// result := false ;
13198: LD_ADDR_VAR 0 1
13202: PUSH
13203: LD_INT 0
13205: ST_TO_ADDR
// for i := 1 to 8 do
13206: LD_ADDR_VAR 0 2
13210: PUSH
13211: DOUBLE
13212: LD_INT 1
13214: DEC
13215: ST_TO_ADDR
13216: LD_INT 8
13218: PUSH
13219: FOR_TO
13220: IFFALSE 13335
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
13222: LD_VAR 0 2
13226: PUSH
13227: LD_OWVAR 2
13231: NONEQUAL
13232: IFFALSE 13245
13234: PUSH
13235: LD_VAR 0 2
13239: PPUSH
13240: CALL 13384 0 1
13244: AND
13245: IFFALSE 13258
13247: PUSH
13248: LD_VAR 0 2
13252: PPUSH
13253: CALL_OW 108
13257: AND
13258: IFFALSE 13333
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13260: LD_EXP 8
13264: PUSH
13265: LD_VAR 0 2
13269: ARRAY
13270: NOT
13271: IFTRUE 13319
13273: PUSH
13274: LD_EXP 8
13278: PUSH
13279: LD_VAR 0 2
13283: ARRAY
13284: PUSH
13285: LD_EXP 8
13289: PUSH
13290: LD_OWVAR 2
13294: ARRAY
13295: NONEQUAL
13296: IFFALSE 13318
13298: PUSH
13299: LD_OWVAR 2
13303: PPUSH
13304: LD_VAR 0 2
13308: PPUSH
13309: CALL_OW 81
13313: PUSH
13314: LD_INT 1
13316: NONEQUAL
13317: AND
13318: OR
13319: IFFALSE 13333
// begin result := true ;
13321: LD_ADDR_VAR 0 1
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// exit ;
13329: POP
13330: POP
13331: GO 13337
// end ;
13333: GO 13219
13335: POP
13336: POP
// end ;
13337: LD_VAR 0 1
13341: RET
// function CanWinLoose ; begin
13342: LD_INT 0
13344: PPUSH
// result := true ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13353: CALL_OW 531
13357: IFFALSE 13369
13359: PUSH
13360: CALL_OW 519
13364: PUSH
13365: LD_INT 1
13367: GREATER
13368: AND
13369: IFFALSE 13379
// result := false ;
13371: LD_ADDR_VAR 0 1
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// end ;
13379: LD_VAR 0 1
13383: RET
// function HasPower ( i ) ; begin
13384: LD_INT 0
13386: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_VAR 0 1
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 21
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 33
13419: PUSH
13420: LD_INT 3
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 33
13429: PUSH
13430: LD_INT 5
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: ST_TO_ADDR
// end ; end_of_file
13452: LD_VAR 0 2
13456: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13457: LD_INT 0
13459: PPUSH
13460: PPUSH
// if exist_mode then
13461: LD_VAR 0 2
13465: IFFALSE 13511
// begin unit := CreateCharacter ( prefix & ident ) ;
13467: LD_ADDR_VAR 0 5
13471: PUSH
13472: LD_VAR 0 3
13476: PUSH
13477: LD_VAR 0 1
13481: STR
13482: PPUSH
13483: CALL_OW 34
13487: ST_TO_ADDR
// if unit then
13488: LD_VAR 0 5
13492: IFFALSE 13509
// DeleteCharacters ( prefix & ident ) ;
13494: LD_VAR 0 3
13498: PUSH
13499: LD_VAR 0 1
13503: STR
13504: PPUSH
13505: CALL_OW 40
// end else
13509: GO 13526
// unit := NewCharacter ( ident ) ;
13511: LD_ADDR_VAR 0 5
13515: PUSH
13516: LD_VAR 0 1
13520: PPUSH
13521: CALL_OW 25
13525: ST_TO_ADDR
// result := unit ;
13526: LD_ADDR_VAR 0 4
13530: PUSH
13531: LD_VAR 0 5
13535: ST_TO_ADDR
// end ;
13536: LD_VAR 0 4
13540: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
13541: LD_INT 0
13543: PPUSH
13544: PPUSH
// if exist_mode then
13545: LD_VAR 0 2
13549: IFFALSE 13574
// unit := CreateCharacter ( prefix & ident ) else
13551: LD_ADDR_VAR 0 5
13555: PUSH
13556: LD_VAR 0 3
13560: PUSH
13561: LD_VAR 0 1
13565: STR
13566: PPUSH
13567: CALL_OW 34
13571: ST_TO_ADDR
13572: GO 13589
// unit := NewCharacter ( ident ) ;
13574: LD_ADDR_VAR 0 5
13578: PUSH
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL_OW 25
13588: ST_TO_ADDR
// result := unit ;
13589: LD_ADDR_VAR 0 4
13593: PUSH
13594: LD_VAR 0 5
13598: ST_TO_ADDR
// end ;
13599: LD_VAR 0 4
13603: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13604: LD_INT 0
13606: PPUSH
13607: PPUSH
// if not side or not nation then
13608: LD_VAR 0 1
13612: NOT
13613: IFTRUE 13622
13615: PUSH
13616: LD_VAR 0 2
13620: NOT
13621: OR
13622: IFFALSE 13626
// exit ;
13624: GO 14420
// case nation of nation_american :
13626: LD_VAR 0 2
13630: PUSH
13631: LD_INT 1
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13861
13639: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
13640: LD_ADDR_VAR 0 4
13644: PUSH
13645: LD_INT 35
13647: PUSH
13648: LD_INT 45
13650: PUSH
13651: LD_INT 46
13653: PUSH
13654: LD_INT 47
13656: PUSH
13657: LD_INT 82
13659: PUSH
13660: LD_INT 83
13662: PUSH
13663: LD_INT 84
13665: PUSH
13666: LD_INT 85
13668: PUSH
13669: LD_INT 86
13671: PUSH
13672: LD_INT 1
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: LD_INT 6
13680: PUSH
13681: LD_INT 15
13683: PUSH
13684: LD_INT 16
13686: PUSH
13687: LD_INT 7
13689: PUSH
13690: LD_INT 12
13692: PUSH
13693: LD_INT 13
13695: PUSH
13696: LD_INT 10
13698: PUSH
13699: LD_INT 14
13701: PUSH
13702: LD_INT 20
13704: PUSH
13705: LD_INT 21
13707: PUSH
13708: LD_INT 22
13710: PUSH
13711: LD_INT 25
13713: PUSH
13714: LD_INT 32
13716: PUSH
13717: LD_INT 27
13719: PUSH
13720: LD_INT 36
13722: PUSH
13723: LD_INT 69
13725: PUSH
13726: LD_INT 39
13728: PUSH
13729: LD_INT 34
13731: PUSH
13732: LD_INT 40
13734: PUSH
13735: LD_INT 48
13737: PUSH
13738: LD_INT 49
13740: PUSH
13741: LD_INT 50
13743: PUSH
13744: LD_INT 51
13746: PUSH
13747: LD_INT 52
13749: PUSH
13750: LD_INT 53
13752: PUSH
13753: LD_INT 54
13755: PUSH
13756: LD_INT 55
13758: PUSH
13759: LD_INT 56
13761: PUSH
13762: LD_INT 57
13764: PUSH
13765: LD_INT 58
13767: PUSH
13768: LD_INT 59
13770: PUSH
13771: LD_INT 60
13773: PUSH
13774: LD_INT 61
13776: PUSH
13777: LD_INT 62
13779: PUSH
13780: LD_INT 80
13782: PUSH
13783: LD_INT 82
13785: PUSH
13786: LD_INT 83
13788: PUSH
13789: LD_INT 84
13791: PUSH
13792: LD_INT 85
13794: PUSH
13795: LD_INT 86
13797: PUSH
13798: LD_INT 90
13800: PUSH
13801: LD_INT 93
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: ST_TO_ADDR
13859: GO 14342
13861: LD_INT 2
13863: DOUBLE
13864: EQUAL
13865: IFTRUE 13869
13867: GO 14103
13869: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
13870: LD_ADDR_VAR 0 4
13874: PUSH
13875: LD_INT 35
13877: PUSH
13878: LD_INT 45
13880: PUSH
13881: LD_INT 46
13883: PUSH
13884: LD_INT 47
13886: PUSH
13887: LD_INT 82
13889: PUSH
13890: LD_INT 83
13892: PUSH
13893: LD_INT 84
13895: PUSH
13896: LD_INT 85
13898: PUSH
13899: LD_INT 87
13901: PUSH
13902: LD_INT 70
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 11
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: LD_INT 6
13922: PUSH
13923: LD_INT 15
13925: PUSH
13926: LD_INT 18
13928: PUSH
13929: LD_INT 7
13931: PUSH
13932: LD_INT 17
13934: PUSH
13935: LD_INT 8
13937: PUSH
13938: LD_INT 20
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 72
13949: PUSH
13950: LD_INT 26
13952: PUSH
13953: LD_INT 69
13955: PUSH
13956: LD_INT 39
13958: PUSH
13959: LD_INT 40
13961: PUSH
13962: LD_INT 41
13964: PUSH
13965: LD_INT 42
13967: PUSH
13968: LD_INT 43
13970: PUSH
13971: LD_INT 48
13973: PUSH
13974: LD_INT 49
13976: PUSH
13977: LD_INT 50
13979: PUSH
13980: LD_INT 51
13982: PUSH
13983: LD_INT 52
13985: PUSH
13986: LD_INT 53
13988: PUSH
13989: LD_INT 54
13991: PUSH
13992: LD_INT 55
13994: PUSH
13995: LD_INT 56
13997: PUSH
13998: LD_INT 60
14000: PUSH
14001: LD_INT 61
14003: PUSH
14004: LD_INT 62
14006: PUSH
14007: LD_INT 66
14009: PUSH
14010: LD_INT 67
14012: PUSH
14013: LD_INT 68
14015: PUSH
14016: LD_INT 81
14018: PUSH
14019: LD_INT 82
14021: PUSH
14022: LD_INT 83
14024: PUSH
14025: LD_INT 84
14027: PUSH
14028: LD_INT 85
14030: PUSH
14031: LD_INT 87
14033: PUSH
14034: LD_INT 88
14036: PUSH
14037: LD_INT 92
14039: PUSH
14040: LD_INT 94
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: ST_TO_ADDR
14101: GO 14342
14103: LD_INT 3
14105: DOUBLE
14106: EQUAL
14107: IFTRUE 14111
14109: GO 14341
14111: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
14112: LD_ADDR_VAR 0 4
14116: PUSH
14117: LD_INT 46
14119: PUSH
14120: LD_INT 47
14122: PUSH
14123: LD_INT 1
14125: PUSH
14126: LD_INT 2
14128: PUSH
14129: LD_INT 82
14131: PUSH
14132: LD_INT 83
14134: PUSH
14135: LD_INT 84
14137: PUSH
14138: LD_INT 85
14140: PUSH
14141: LD_INT 86
14143: PUSH
14144: LD_INT 11
14146: PUSH
14147: LD_INT 9
14149: PUSH
14150: LD_INT 20
14152: PUSH
14153: LD_INT 19
14155: PUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 24
14161: PUSH
14162: LD_INT 22
14164: PUSH
14165: LD_INT 25
14167: PUSH
14168: LD_INT 28
14170: PUSH
14171: LD_INT 29
14173: PUSH
14174: LD_INT 30
14176: PUSH
14177: LD_INT 31
14179: PUSH
14180: LD_INT 37
14182: PUSH
14183: LD_INT 38
14185: PUSH
14186: LD_INT 32
14188: PUSH
14189: LD_INT 27
14191: PUSH
14192: LD_INT 33
14194: PUSH
14195: LD_INT 69
14197: PUSH
14198: LD_INT 39
14200: PUSH
14201: LD_INT 34
14203: PUSH
14204: LD_INT 40
14206: PUSH
14207: LD_INT 71
14209: PUSH
14210: LD_INT 23
14212: PUSH
14213: LD_INT 44
14215: PUSH
14216: LD_INT 48
14218: PUSH
14219: LD_INT 49
14221: PUSH
14222: LD_INT 50
14224: PUSH
14225: LD_INT 51
14227: PUSH
14228: LD_INT 52
14230: PUSH
14231: LD_INT 53
14233: PUSH
14234: LD_INT 54
14236: PUSH
14237: LD_INT 55
14239: PUSH
14240: LD_INT 56
14242: PUSH
14243: LD_INT 57
14245: PUSH
14246: LD_INT 58
14248: PUSH
14249: LD_INT 59
14251: PUSH
14252: LD_INT 63
14254: PUSH
14255: LD_INT 64
14257: PUSH
14258: LD_INT 65
14260: PUSH
14261: LD_INT 82
14263: PUSH
14264: LD_INT 83
14266: PUSH
14267: LD_INT 84
14269: PUSH
14270: LD_INT 85
14272: PUSH
14273: LD_INT 86
14275: PUSH
14276: LD_INT 89
14278: PUSH
14279: LD_INT 91
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: ST_TO_ADDR
14339: GO 14342
14341: POP
// if state > - 1 and state < 3 then
14342: LD_VAR 0 3
14346: PUSH
14347: LD_INT 1
14349: NEG
14350: GREATER
14351: IFFALSE 14363
14353: PUSH
14354: LD_VAR 0 3
14358: PUSH
14359: LD_INT 3
14361: LESS
14362: AND
14363: IFFALSE 14420
// for i in result do
14365: LD_ADDR_VAR 0 5
14369: PUSH
14370: LD_VAR 0 4
14374: PUSH
14375: FOR_IN
14376: IFFALSE 14418
// if GetTech ( i , side ) <> state then
14378: LD_VAR 0 5
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 321
14392: PUSH
14393: LD_VAR 0 3
14397: NONEQUAL
14398: IFFALSE 14416
// result := result diff i ;
14400: LD_ADDR_VAR 0 4
14404: PUSH
14405: LD_VAR 0 4
14409: PUSH
14410: LD_VAR 0 5
14414: DIFF
14415: ST_TO_ADDR
14416: GO 14375
14418: POP
14419: POP
// end ;
14420: LD_VAR 0 4
14424: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14425: LD_INT 0
14427: PPUSH
14428: PPUSH
14429: PPUSH
// result := true ;
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_INT 1
14437: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14438: LD_ADDR_VAR 0 5
14442: PUSH
14443: LD_VAR 0 2
14447: PPUSH
14448: CALL_OW 480
14452: ST_TO_ADDR
// if not tmp then
14453: LD_VAR 0 5
14457: NOT
14458: IFFALSE 14462
// exit ;
14460: GO 14511
// for i in tmp do
14462: LD_ADDR_VAR 0 4
14466: PUSH
14467: LD_VAR 0 5
14471: PUSH
14472: FOR_IN
14473: IFFALSE 14509
// if GetTech ( i , side ) <> state_researched then
14475: LD_VAR 0 4
14479: PPUSH
14480: LD_VAR 0 1
14484: PPUSH
14485: CALL_OW 321
14489: PUSH
14490: LD_INT 2
14492: NONEQUAL
14493: IFFALSE 14507
// begin result := false ;
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_INT 0
14502: ST_TO_ADDR
// exit ;
14503: POP
14504: POP
14505: GO 14511
// end ;
14507: GO 14472
14509: POP
14510: POP
// end ;
14511: LD_VAR 0 3
14515: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14516: LD_INT 0
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
14525: PPUSH
14526: PPUSH
14527: PPUSH
14528: PPUSH
14529: PPUSH
14530: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14531: LD_VAR 0 1
14535: NOT
14536: IFTRUE 14553
14538: PUSH
14539: LD_VAR 0 1
14543: PPUSH
14544: CALL_OW 257
14548: PUSH
14549: LD_INT 9
14551: NONEQUAL
14552: OR
14553: IFFALSE 14557
// exit ;
14555: GO 15136
// side := GetSide ( unit ) ;
14557: LD_ADDR_VAR 0 9
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 255
14571: ST_TO_ADDR
// tech_space := tech_spacanom ;
14572: LD_ADDR_VAR 0 12
14576: PUSH
14577: LD_INT 29
14579: ST_TO_ADDR
// tech_time := tech_taurad ;
14580: LD_ADDR_VAR 0 13
14584: PUSH
14585: LD_INT 28
14587: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14588: LD_ADDR_VAR 0 11
14592: PUSH
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 310
14602: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14603: LD_VAR 0 11
14607: PPUSH
14608: CALL_OW 247
14612: PUSH
14613: LD_INT 2
14615: EQUAL
14616: IFFALSE 14620
// exit ;
14618: GO 15136
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14620: LD_ADDR_VAR 0 8
14624: PUSH
14625: LD_INT 81
14627: PUSH
14628: LD_VAR 0 9
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 3
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 3
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PPUSH
14658: CALL_OW 69
14662: ST_TO_ADDR
// if not tmp then
14663: LD_VAR 0 8
14667: NOT
14668: IFFALSE 14672
// exit ;
14670: GO 15136
// if in_unit then
14672: LD_VAR 0 11
14676: IFFALSE 14700
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14678: LD_ADDR_VAR 0 10
14682: PUSH
14683: LD_VAR 0 8
14687: PPUSH
14688: LD_VAR 0 11
14692: PPUSH
14693: CALL_OW 74
14697: ST_TO_ADDR
14698: GO 14720
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14700: LD_ADDR_VAR 0 10
14704: PUSH
14705: LD_VAR 0 8
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 74
14719: ST_TO_ADDR
// if not enemy then
14720: LD_VAR 0 10
14724: NOT
14725: IFFALSE 14729
// exit ;
14727: GO 15136
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14729: LD_VAR 0 11
14733: IFFALSE 14755
14735: PUSH
14736: LD_VAR 0 11
14740: PPUSH
14741: LD_VAR 0 10
14745: PPUSH
14746: CALL_OW 296
14750: PUSH
14751: LD_INT 13
14753: GREATER
14754: AND
14755: IFTRUE 14777
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: LD_VAR 0 10
14767: PPUSH
14768: CALL_OW 296
14772: PUSH
14773: LD_INT 12
14775: GREATER
14776: OR
14777: IFFALSE 14781
// exit ;
14779: GO 15136
// missile := [ 1 ] ;
14781: LD_ADDR_VAR 0 14
14785: PUSH
14786: LD_INT 1
14788: PUSH
14789: EMPTY
14790: LIST
14791: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14792: LD_VAR 0 9
14796: PPUSH
14797: LD_VAR 0 12
14801: PPUSH
14802: CALL_OW 325
14806: IFFALSE 14835
// missile := Replace ( missile , missile + 1 , 2 ) ;
14808: LD_ADDR_VAR 0 14
14812: PUSH
14813: LD_VAR 0 14
14817: PPUSH
14818: LD_VAR 0 14
14822: PUSH
14823: LD_INT 1
14825: PLUS
14826: PPUSH
14827: LD_INT 2
14829: PPUSH
14830: CALL_OW 1
14834: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14835: LD_VAR 0 9
14839: PPUSH
14840: LD_VAR 0 13
14844: PPUSH
14845: CALL_OW 325
14849: IFFALSE 14873
14851: PUSH
14852: LD_VAR 0 10
14856: PPUSH
14857: CALL_OW 255
14861: PPUSH
14862: LD_VAR 0 13
14866: PPUSH
14867: CALL_OW 325
14871: NOT
14872: AND
14873: IFFALSE 14902
// missile := Replace ( missile , missile + 1 , 3 ) ;
14875: LD_ADDR_VAR 0 14
14879: PUSH
14880: LD_VAR 0 14
14884: PPUSH
14885: LD_VAR 0 14
14889: PUSH
14890: LD_INT 1
14892: PLUS
14893: PPUSH
14894: LD_INT 3
14896: PPUSH
14897: CALL_OW 1
14901: ST_TO_ADDR
// if missile < 2 then
14902: LD_VAR 0 14
14906: PUSH
14907: LD_INT 2
14909: LESS
14910: IFFALSE 14914
// exit ;
14912: GO 15136
// x := GetX ( enemy ) ;
14914: LD_ADDR_VAR 0 4
14918: PUSH
14919: LD_VAR 0 10
14923: PPUSH
14924: CALL_OW 250
14928: ST_TO_ADDR
// y := GetY ( enemy ) ;
14929: LD_ADDR_VAR 0 5
14933: PUSH
14934: LD_VAR 0 10
14938: PPUSH
14939: CALL_OW 251
14943: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14944: LD_ADDR_VAR 0 6
14948: PUSH
14949: LD_VAR 0 4
14953: PUSH
14954: LD_INT 1
14956: NEG
14957: PPUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 12
14965: PLUS
14966: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14967: LD_ADDR_VAR 0 7
14971: PUSH
14972: LD_VAR 0 5
14976: PUSH
14977: LD_INT 1
14979: NEG
14980: PPUSH
14981: LD_INT 1
14983: PPUSH
14984: CALL_OW 12
14988: PLUS
14989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14990: LD_VAR 0 6
14994: PPUSH
14995: LD_VAR 0 7
14999: PPUSH
15000: CALL_OW 488
15004: NOT
15005: IFFALSE 15027
// begin _x := x ;
15007: LD_ADDR_VAR 0 6
15011: PUSH
15012: LD_VAR 0 4
15016: ST_TO_ADDR
// _y := y ;
15017: LD_ADDR_VAR 0 7
15021: PUSH
15022: LD_VAR 0 5
15026: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 1
15034: PPUSH
15035: LD_VAR 0 14
15039: PPUSH
15040: CALL_OW 12
15044: ST_TO_ADDR
// case i of 1 :
15045: LD_VAR 0 3
15049: PUSH
15050: LD_INT 1
15052: DOUBLE
15053: EQUAL
15054: IFTRUE 15058
15056: GO 15075
15058: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15059: LD_VAR 0 1
15063: PPUSH
15064: LD_VAR 0 10
15068: PPUSH
15069: CALL_OW 115
15073: GO 15136
15075: LD_INT 2
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15105
15083: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15084: LD_VAR 0 1
15088: PPUSH
15089: LD_VAR 0 6
15093: PPUSH
15094: LD_VAR 0 7
15098: PPUSH
15099: CALL_OW 153
15103: GO 15136
15105: LD_INT 3
15107: DOUBLE
15108: EQUAL
15109: IFTRUE 15113
15111: GO 15135
15113: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15114: LD_VAR 0 1
15118: PPUSH
15119: LD_VAR 0 6
15123: PPUSH
15124: LD_VAR 0 7
15128: PPUSH
15129: CALL_OW 154
15133: GO 15136
15135: POP
// end ;
15136: LD_VAR 0 2
15140: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15141: LD_INT 0
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
15147: PPUSH
15148: PPUSH
// if not unit or not building then
15149: LD_VAR 0 1
15153: NOT
15154: IFTRUE 15163
15156: PUSH
15157: LD_VAR 0 2
15161: NOT
15162: OR
15163: IFFALSE 15167
// exit ;
15165: GO 15325
// x := GetX ( building ) ;
15167: LD_ADDR_VAR 0 5
15171: PUSH
15172: LD_VAR 0 2
15176: PPUSH
15177: CALL_OW 250
15181: ST_TO_ADDR
// y := GetY ( building ) ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_VAR 0 2
15191: PPUSH
15192: CALL_OW 251
15196: ST_TO_ADDR
// for i := 0 to 5 do
15197: LD_ADDR_VAR 0 4
15201: PUSH
15202: DOUBLE
15203: LD_INT 0
15205: DEC
15206: ST_TO_ADDR
15207: LD_INT 5
15209: PUSH
15210: FOR_TO
15211: IFFALSE 15323
// begin _x := ShiftX ( x , i , 3 ) ;
15213: LD_ADDR_VAR 0 7
15217: PUSH
15218: LD_VAR 0 5
15222: PPUSH
15223: LD_VAR 0 4
15227: PPUSH
15228: LD_INT 3
15230: PPUSH
15231: CALL_OW 272
15235: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15236: LD_ADDR_VAR 0 8
15240: PUSH
15241: LD_VAR 0 6
15245: PPUSH
15246: LD_VAR 0 4
15250: PPUSH
15251: LD_INT 3
15253: PPUSH
15254: CALL_OW 273
15258: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15259: LD_VAR 0 7
15263: PPUSH
15264: LD_VAR 0 8
15268: PPUSH
15269: CALL_OW 488
15273: NOT
15274: IFFALSE 15278
// continue ;
15276: GO 15210
// if HexInfo ( _x , _y ) = 0 then
15278: LD_VAR 0 7
15282: PPUSH
15283: LD_VAR 0 8
15287: PPUSH
15288: CALL_OW 428
15292: PUSH
15293: LD_INT 0
15295: EQUAL
15296: IFFALSE 15321
// begin ComMoveXY ( unit , _x , _y ) ;
15298: LD_VAR 0 1
15302: PPUSH
15303: LD_VAR 0 7
15307: PPUSH
15308: LD_VAR 0 8
15312: PPUSH
15313: CALL_OW 111
// exit ;
15317: POP
15318: POP
15319: GO 15325
// end ; end ;
15321: GO 15210
15323: POP
15324: POP
// end ;
15325: LD_VAR 0 3
15329: RET
// export function ScanBase ( side , base_area ) ; begin
15330: LD_INT 0
15332: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15333: LD_ADDR_VAR 0 3
15337: PUSH
15338: LD_VAR 0 2
15342: PPUSH
15343: LD_INT 81
15345: PUSH
15346: LD_VAR 0 1
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 70
15359: ST_TO_ADDR
// end ;
15360: LD_VAR 0 3
15364: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15365: LD_INT 0
15367: PPUSH
15368: PPUSH
15369: PPUSH
15370: PPUSH
// result := false ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_INT 0
15378: ST_TO_ADDR
// side := GetSide ( unit ) ;
15379: LD_ADDR_VAR 0 3
15383: PUSH
15384: LD_VAR 0 1
15388: PPUSH
15389: CALL_OW 255
15393: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15394: LD_ADDR_VAR 0 4
15398: PUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 248
15408: ST_TO_ADDR
// case nat of 1 :
15409: LD_VAR 0 4
15413: PUSH
15414: LD_INT 1
15416: DOUBLE
15417: EQUAL
15418: IFTRUE 15422
15420: GO 15433
15422: POP
// tech := tech_lassight ; 2 :
15423: LD_ADDR_VAR 0 5
15427: PUSH
15428: LD_INT 12
15430: ST_TO_ADDR
15431: GO 15472
15433: LD_INT 2
15435: DOUBLE
15436: EQUAL
15437: IFTRUE 15441
15439: GO 15452
15441: POP
// tech := tech_mortar ; 3 :
15442: LD_ADDR_VAR 0 5
15446: PUSH
15447: LD_INT 41
15449: ST_TO_ADDR
15450: GO 15472
15452: LD_INT 3
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15471
15460: POP
// tech := tech_bazooka ; end ;
15461: LD_ADDR_VAR 0 5
15465: PUSH
15466: LD_INT 44
15468: ST_TO_ADDR
15469: GO 15472
15471: POP
// if Researched ( side , tech ) then
15472: LD_VAR 0 3
15476: PPUSH
15477: LD_VAR 0 5
15481: PPUSH
15482: CALL_OW 325
15486: IFFALSE 15513
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: LD_INT 5
15495: PUSH
15496: LD_INT 8
15498: PUSH
15499: LD_INT 9
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PUSH
15507: LD_VAR 0 4
15511: ARRAY
15512: ST_TO_ADDR
// end ;
15513: LD_VAR 0 2
15517: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15518: LD_INT 0
15520: PPUSH
15521: PPUSH
15522: PPUSH
// if not mines then
15523: LD_VAR 0 2
15527: NOT
15528: IFFALSE 15532
// exit ;
15530: GO 15676
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15532: LD_ADDR_VAR 0 5
15536: PUSH
15537: LD_INT 81
15539: PUSH
15540: LD_VAR 0 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 3
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PPUSH
15570: CALL_OW 69
15574: ST_TO_ADDR
// for i in mines do
15575: LD_ADDR_VAR 0 4
15579: PUSH
15580: LD_VAR 0 2
15584: PUSH
15585: FOR_IN
15586: IFFALSE 15674
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15588: LD_VAR 0 4
15592: PUSH
15593: LD_INT 1
15595: ARRAY
15596: PPUSH
15597: LD_VAR 0 4
15601: PUSH
15602: LD_INT 2
15604: ARRAY
15605: PPUSH
15606: CALL_OW 458
15610: NOT
15611: IFFALSE 15615
// continue ;
15613: GO 15585
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15615: LD_VAR 0 4
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PPUSH
15624: LD_VAR 0 4
15628: PUSH
15629: LD_INT 2
15631: ARRAY
15632: PPUSH
15633: CALL_OW 428
15637: PUSH
15638: LD_VAR 0 5
15642: IN
15643: IFFALSE 15672
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15645: LD_VAR 0 4
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PPUSH
15654: LD_VAR 0 4
15658: PUSH
15659: LD_INT 2
15661: ARRAY
15662: PPUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 456
// end ;
15672: GO 15585
15674: POP
15675: POP
// end ;
15676: LD_VAR 0 3
15680: RET
// export function Count ( array ) ; begin
15681: LD_INT 0
15683: PPUSH
// result := array + 0 ;
15684: LD_ADDR_VAR 0 2
15688: PUSH
15689: LD_VAR 0 1
15693: PUSH
15694: LD_INT 0
15696: PLUS
15697: ST_TO_ADDR
// end ;
15698: LD_VAR 0 2
15702: RET
// export function IsEmpty ( building ) ; begin
15703: LD_INT 0
15705: PPUSH
// if not building then
15706: LD_VAR 0 1
15710: NOT
15711: IFFALSE 15715
// exit ;
15713: GO 15758
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15715: LD_ADDR_VAR 0 2
15719: PUSH
15720: LD_VAR 0 1
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 255
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 58
15744: PUSH
15745: EMPTY
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PPUSH
15752: CALL_OW 69
15756: IN
15757: ST_TO_ADDR
// end ;
15758: LD_VAR 0 2
15762: RET
// export function IsNotFull ( building ) ; var places ; begin
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
// if not building then
15767: LD_VAR 0 1
15771: NOT
15772: IFFALSE 15776
// exit ;
15774: GO 15804
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
15776: LD_ADDR_VAR 0 2
15780: PUSH
15781: LD_VAR 0 1
15785: PPUSH
15786: LD_INT 3
15788: PUSH
15789: LD_INT 62
15791: PUSH
15792: EMPTY
15793: LIST
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 72
15803: ST_TO_ADDR
// end ;
15804: LD_VAR 0 2
15808: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15809: LD_INT 0
15811: PPUSH
15812: PPUSH
15813: PPUSH
15814: PPUSH
// tmp := [ ] ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: EMPTY
15821: ST_TO_ADDR
// list := [ ] ;
15822: LD_ADDR_VAR 0 5
15826: PUSH
15827: EMPTY
15828: ST_TO_ADDR
// for i = 16 to 25 do
15829: LD_ADDR_VAR 0 4
15833: PUSH
15834: DOUBLE
15835: LD_INT 16
15837: DEC
15838: ST_TO_ADDR
15839: LD_INT 25
15841: PUSH
15842: FOR_TO
15843: IFFALSE 15916
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15845: LD_ADDR_VAR 0 3
15849: PUSH
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_VAR 0 1
15862: PPUSH
15863: CALL_OW 255
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 91
15874: PUSH
15875: LD_VAR 0 1
15879: PUSH
15880: LD_INT 6
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_VAR 0 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: ADD
15913: ST_TO_ADDR
15914: GO 15842
15916: POP
15917: POP
// for i = 1 to tmp do
15918: LD_ADDR_VAR 0 4
15922: PUSH
15923: DOUBLE
15924: LD_INT 1
15926: DEC
15927: ST_TO_ADDR
15928: LD_VAR 0 3
15932: PUSH
15933: FOR_TO
15934: IFFALSE 16022
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15936: LD_ADDR_VAR 0 5
15940: PUSH
15941: LD_VAR 0 5
15945: PUSH
15946: LD_VAR 0 3
15950: PUSH
15951: LD_VAR 0 4
15955: ARRAY
15956: PPUSH
15957: CALL_OW 266
15961: PUSH
15962: LD_VAR 0 3
15966: PUSH
15967: LD_VAR 0 4
15971: ARRAY
15972: PPUSH
15973: CALL_OW 250
15977: PUSH
15978: LD_VAR 0 3
15982: PUSH
15983: LD_VAR 0 4
15987: ARRAY
15988: PPUSH
15989: CALL_OW 251
15993: PUSH
15994: LD_VAR 0 3
15998: PUSH
15999: LD_VAR 0 4
16003: ARRAY
16004: PPUSH
16005: CALL_OW 254
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: PUSH
16016: EMPTY
16017: LIST
16018: ADD
16019: ST_TO_ADDR
16020: GO 15933
16022: POP
16023: POP
// result := list ;
16024: LD_ADDR_VAR 0 2
16028: PUSH
16029: LD_VAR 0 5
16033: ST_TO_ADDR
// end ;
16034: LD_VAR 0 2
16038: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16039: LD_INT 0
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
16046: PPUSH
16047: PPUSH
// if not factory then
16048: LD_VAR 0 1
16052: NOT
16053: IFFALSE 16057
// exit ;
16055: GO 16660
// if control = control_apeman then
16057: LD_VAR 0 4
16061: PUSH
16062: LD_INT 5
16064: EQUAL
16065: IFFALSE 16174
// begin tmp := UnitsInside ( factory ) ;
16067: LD_ADDR_VAR 0 8
16071: PUSH
16072: LD_VAR 0 1
16076: PPUSH
16077: CALL_OW 313
16081: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16082: LD_VAR 0 8
16086: PPUSH
16087: LD_INT 25
16089: PUSH
16090: LD_INT 12
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 72
16101: NOT
16102: IFFALSE 16112
// control := control_manual ;
16104: LD_ADDR_VAR 0 4
16108: PUSH
16109: LD_INT 1
16111: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16112: LD_ADDR_VAR 0 8
16116: PUSH
16117: LD_VAR 0 1
16121: PPUSH
16122: CALL 15809 0 1
16126: ST_TO_ADDR
// if tmp then
16127: LD_VAR 0 8
16131: IFFALSE 16174
// begin for i in tmp do
16133: LD_ADDR_VAR 0 7
16137: PUSH
16138: LD_VAR 0 8
16142: PUSH
16143: FOR_IN
16144: IFFALSE 16172
// if i [ 1 ] = b_ext_radio then
16146: LD_VAR 0 7
16150: PUSH
16151: LD_INT 1
16153: ARRAY
16154: PUSH
16155: LD_INT 22
16157: EQUAL
16158: IFFALSE 16170
// begin control := control_remote ;
16160: LD_ADDR_VAR 0 4
16164: PUSH
16165: LD_INT 2
16167: ST_TO_ADDR
// break ;
16168: GO 16172
// end ;
16170: GO 16143
16172: POP
16173: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16174: LD_VAR 0 1
16178: PPUSH
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_VAR 0 3
16188: PPUSH
16189: LD_VAR 0 4
16193: PPUSH
16194: LD_VAR 0 5
16198: PPUSH
16199: CALL_OW 448
16203: IFFALSE 16238
// begin result := [ chassis , engine , control , weapon ] ;
16205: LD_ADDR_VAR 0 6
16209: PUSH
16210: LD_VAR 0 2
16214: PUSH
16215: LD_VAR 0 3
16219: PUSH
16220: LD_VAR 0 4
16224: PUSH
16225: LD_VAR 0 5
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: ST_TO_ADDR
// exit ;
16236: GO 16660
// end ; _chassis := AvailableChassisList ( factory ) ;
16238: LD_ADDR_VAR 0 9
16242: PUSH
16243: LD_VAR 0 1
16247: PPUSH
16248: CALL_OW 475
16252: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16253: LD_ADDR_VAR 0 11
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 476
16267: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16268: LD_ADDR_VAR 0 12
16272: PUSH
16273: LD_VAR 0 1
16277: PPUSH
16278: CALL_OW 477
16282: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16283: LD_ADDR_VAR 0 10
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 478
16297: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16298: LD_VAR 0 9
16302: NOT
16303: IFTRUE 16312
16305: PUSH
16306: LD_VAR 0 11
16310: NOT
16311: OR
16312: IFTRUE 16321
16314: PUSH
16315: LD_VAR 0 12
16319: NOT
16320: OR
16321: IFTRUE 16330
16323: PUSH
16324: LD_VAR 0 10
16328: NOT
16329: OR
16330: IFFALSE 16365
// begin result := [ chassis , engine , control , weapon ] ;
16332: LD_ADDR_VAR 0 6
16336: PUSH
16337: LD_VAR 0 2
16341: PUSH
16342: LD_VAR 0 3
16346: PUSH
16347: LD_VAR 0 4
16351: PUSH
16352: LD_VAR 0 5
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: ST_TO_ADDR
// exit ;
16363: GO 16660
// end ; if not chassis in _chassis then
16365: LD_VAR 0 2
16369: PUSH
16370: LD_VAR 0 9
16374: IN
16375: NOT
16376: IFFALSE 16402
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16378: LD_ADDR_VAR 0 2
16382: PUSH
16383: LD_VAR 0 9
16387: PUSH
16388: LD_INT 1
16390: PPUSH
16391: LD_VAR 0 9
16395: PPUSH
16396: CALL_OW 12
16400: ARRAY
16401: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16402: LD_VAR 0 2
16406: PPUSH
16407: LD_VAR 0 3
16411: PPUSH
16412: CALL 16665 0 2
16416: NOT
16417: IFFALSE 16478
// repeat engine := _engine [ 1 ] ;
16419: LD_ADDR_VAR 0 3
16423: PUSH
16424: LD_VAR 0 11
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16433: LD_ADDR_VAR 0 11
16437: PUSH
16438: LD_VAR 0 11
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 3
16450: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16451: LD_VAR 0 2
16455: PPUSH
16456: LD_VAR 0 3
16460: PPUSH
16461: CALL 16665 0 2
16465: IFTRUE 16476
16467: PUSH
16468: LD_VAR 0 11
16472: PUSH
16473: EMPTY
16474: EQUAL
16475: OR
16476: IFFALSE 16419
// if not control in _control then
16478: LD_VAR 0 4
16482: PUSH
16483: LD_VAR 0 12
16487: IN
16488: NOT
16489: IFFALSE 16515
// control := _control [ rand ( 1 , _control ) ] ;
16491: LD_ADDR_VAR 0 4
16495: PUSH
16496: LD_VAR 0 12
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_VAR 0 12
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16515: LD_VAR 0 2
16519: PPUSH
16520: LD_VAR 0 5
16524: PPUSH
16525: CALL 16887 0 2
16529: NOT
16530: IFFALSE 16591
// repeat weapon := _weapon [ 1 ] ;
16532: LD_ADDR_VAR 0 5
16536: PUSH
16537: LD_VAR 0 10
16541: PUSH
16542: LD_INT 1
16544: ARRAY
16545: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16546: LD_ADDR_VAR 0 10
16550: PUSH
16551: LD_VAR 0 10
16555: PPUSH
16556: LD_INT 1
16558: PPUSH
16559: CALL_OW 3
16563: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16564: LD_VAR 0 2
16568: PPUSH
16569: LD_VAR 0 5
16573: PPUSH
16574: CALL 16887 0 2
16578: IFTRUE 16589
16580: PUSH
16581: LD_VAR 0 10
16585: PUSH
16586: EMPTY
16587: EQUAL
16588: OR
16589: IFFALSE 16532
// result := [ ] ;
16591: LD_ADDR_VAR 0 6
16595: PUSH
16596: EMPTY
16597: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16598: LD_VAR 0 1
16602: PPUSH
16603: LD_VAR 0 2
16607: PPUSH
16608: LD_VAR 0 3
16612: PPUSH
16613: LD_VAR 0 4
16617: PPUSH
16618: LD_VAR 0 5
16622: PPUSH
16623: CALL_OW 448
16627: IFFALSE 16660
// result := [ chassis , engine , control , weapon ] ;
16629: LD_ADDR_VAR 0 6
16633: PUSH
16634: LD_VAR 0 2
16638: PUSH
16639: LD_VAR 0 3
16643: PUSH
16644: LD_VAR 0 4
16648: PUSH
16649: LD_VAR 0 5
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: ST_TO_ADDR
// end ;
16660: LD_VAR 0 6
16664: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16665: LD_INT 0
16667: PPUSH
// if not chassis or not engine then
16668: LD_VAR 0 1
16672: NOT
16673: IFTRUE 16682
16675: PUSH
16676: LD_VAR 0 2
16680: NOT
16681: OR
16682: IFFALSE 16686
// exit ;
16684: GO 16882
// case engine of engine_solar :
16686: LD_VAR 0 2
16690: PUSH
16691: LD_INT 2
16693: DOUBLE
16694: EQUAL
16695: IFTRUE 16699
16697: GO 16737
16699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16700: LD_ADDR_VAR 0 3
16704: PUSH
16705: LD_INT 11
16707: PUSH
16708: LD_INT 12
16710: PUSH
16711: LD_INT 13
16713: PUSH
16714: LD_INT 14
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: LD_INT 3
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: ST_TO_ADDR
16735: GO 16866
16737: LD_INT 1
16739: DOUBLE
16740: EQUAL
16741: IFTRUE 16745
16743: GO 16807
16745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16746: LD_ADDR_VAR 0 3
16750: PUSH
16751: LD_INT 11
16753: PUSH
16754: LD_INT 12
16756: PUSH
16757: LD_INT 13
16759: PUSH
16760: LD_INT 14
16762: PUSH
16763: LD_INT 1
16765: PUSH
16766: LD_INT 2
16768: PUSH
16769: LD_INT 3
16771: PUSH
16772: LD_INT 4
16774: PUSH
16775: LD_INT 5
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 23
16783: PUSH
16784: LD_INT 22
16786: PUSH
16787: LD_INT 24
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: ST_TO_ADDR
16805: GO 16866
16807: LD_INT 3
16809: DOUBLE
16810: EQUAL
16811: IFTRUE 16815
16813: GO 16865
16815: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16816: LD_ADDR_VAR 0 3
16820: PUSH
16821: LD_INT 13
16823: PUSH
16824: LD_INT 14
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: LD_INT 3
16832: PUSH
16833: LD_INT 4
16835: PUSH
16836: LD_INT 5
16838: PUSH
16839: LD_INT 21
16841: PUSH
16842: LD_INT 22
16844: PUSH
16845: LD_INT 23
16847: PUSH
16848: LD_INT 24
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: ST_TO_ADDR
16863: GO 16866
16865: POP
// result := ( chassis in result ) ;
16866: LD_ADDR_VAR 0 3
16870: PUSH
16871: LD_VAR 0 1
16875: PUSH
16876: LD_VAR 0 3
16880: IN
16881: ST_TO_ADDR
// end ;
16882: LD_VAR 0 3
16886: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16887: LD_INT 0
16889: PPUSH
// if not chassis or not weapon then
16890: LD_VAR 0 1
16894: NOT
16895: IFTRUE 16904
16897: PUSH
16898: LD_VAR 0 2
16902: NOT
16903: OR
16904: IFFALSE 16908
// exit ;
16906: GO 18002
// case weapon of us_machine_gun :
16908: LD_VAR 0 2
16912: PUSH
16913: LD_INT 2
16915: DOUBLE
16916: EQUAL
16917: IFTRUE 16921
16919: GO 16951
16921: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: LD_INT 2
16932: PUSH
16933: LD_INT 3
16935: PUSH
16936: LD_INT 4
16938: PUSH
16939: LD_INT 5
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: ST_TO_ADDR
16949: GO 17986
16951: LD_INT 3
16953: DOUBLE
16954: EQUAL
16955: IFTRUE 16959
16957: GO 16989
16959: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16960: LD_ADDR_VAR 0 3
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: LD_INT 3
16973: PUSH
16974: LD_INT 4
16976: PUSH
16977: LD_INT 5
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: ST_TO_ADDR
16987: GO 17986
16989: LD_INT 11
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17027
16997: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16998: LD_ADDR_VAR 0 3
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: LD_INT 4
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17986
17027: LD_INT 4
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17061
17035: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17036: LD_ADDR_VAR 0 3
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 3
17046: PUSH
17047: LD_INT 4
17049: PUSH
17050: LD_INT 5
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
17059: GO 17986
17061: LD_INT 5
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17095
17069: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: LD_INT 5
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: ST_TO_ADDR
17093: GO 17986
17095: LD_INT 9
17097: DOUBLE
17098: EQUAL
17099: IFTRUE 17103
17101: GO 17129
17103: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_INT 2
17111: PUSH
17112: LD_INT 3
17114: PUSH
17115: LD_INT 4
17117: PUSH
17118: LD_INT 5
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: ST_TO_ADDR
17127: GO 17986
17129: LD_INT 7
17131: DOUBLE
17132: EQUAL
17133: IFTRUE 17137
17135: GO 17163
17137: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: LD_INT 3
17148: PUSH
17149: LD_INT 4
17151: PUSH
17152: LD_INT 5
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: ST_TO_ADDR
17161: GO 17986
17163: LD_INT 12
17165: DOUBLE
17166: EQUAL
17167: IFTRUE 17171
17169: GO 17197
17171: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17172: LD_ADDR_VAR 0 3
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: LD_INT 4
17185: PUSH
17186: LD_INT 5
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: ST_TO_ADDR
17195: GO 17986
17197: LD_INT 13
17199: DOUBLE
17200: EQUAL
17201: IFTRUE 17205
17203: GO 17231
17205: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17206: LD_ADDR_VAR 0 3
17210: PUSH
17211: LD_INT 2
17213: PUSH
17214: LD_INT 3
17216: PUSH
17217: LD_INT 4
17219: PUSH
17220: LD_INT 5
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: ST_TO_ADDR
17229: GO 17986
17231: LD_INT 14
17233: DOUBLE
17234: EQUAL
17235: IFTRUE 17239
17237: GO 17257
17239: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17240: LD_ADDR_VAR 0 3
17244: PUSH
17245: LD_INT 4
17247: PUSH
17248: LD_INT 5
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: ST_TO_ADDR
17255: GO 17986
17257: LD_INT 6
17259: DOUBLE
17260: EQUAL
17261: IFTRUE 17265
17263: GO 17283
17265: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_INT 4
17273: PUSH
17274: LD_INT 5
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: ST_TO_ADDR
17281: GO 17986
17283: LD_INT 10
17285: DOUBLE
17286: EQUAL
17287: IFTRUE 17291
17289: GO 17309
17291: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_INT 4
17299: PUSH
17300: LD_INT 5
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: ST_TO_ADDR
17307: GO 17986
17309: LD_INT 22
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17343
17317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_INT 11
17325: PUSH
17326: LD_INT 12
17328: PUSH
17329: LD_INT 13
17331: PUSH
17332: LD_INT 14
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: ST_TO_ADDR
17341: GO 17986
17343: LD_INT 23
17345: DOUBLE
17346: EQUAL
17347: IFTRUE 17351
17349: GO 17377
17351: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17352: LD_ADDR_VAR 0 3
17356: PUSH
17357: LD_INT 11
17359: PUSH
17360: LD_INT 12
17362: PUSH
17363: LD_INT 13
17365: PUSH
17366: LD_INT 14
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
17375: GO 17986
17377: LD_INT 24
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17411
17385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17386: LD_ADDR_VAR 0 3
17390: PUSH
17391: LD_INT 11
17393: PUSH
17394: LD_INT 12
17396: PUSH
17397: LD_INT 13
17399: PUSH
17400: LD_INT 14
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: ST_TO_ADDR
17409: GO 17986
17411: LD_INT 30
17413: DOUBLE
17414: EQUAL
17415: IFTRUE 17419
17417: GO 17445
17419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17420: LD_ADDR_VAR 0 3
17424: PUSH
17425: LD_INT 11
17427: PUSH
17428: LD_INT 12
17430: PUSH
17431: LD_INT 13
17433: PUSH
17434: LD_INT 14
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: ST_TO_ADDR
17443: GO 17986
17445: LD_INT 25
17447: DOUBLE
17448: EQUAL
17449: IFTRUE 17453
17451: GO 17471
17453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 13
17461: PUSH
17462: LD_INT 14
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: ST_TO_ADDR
17469: GO 17986
17471: LD_INT 27
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17497
17479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_INT 13
17487: PUSH
17488: LD_INT 14
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: ST_TO_ADDR
17495: GO 17986
17497: LD_INT 92
17499: DOUBLE
17500: EQUAL
17501: IFTRUE 17505
17503: GO 17531
17505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17506: LD_ADDR_VAR 0 3
17510: PUSH
17511: LD_INT 11
17513: PUSH
17514: LD_INT 12
17516: PUSH
17517: LD_INT 13
17519: PUSH
17520: LD_INT 14
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: ST_TO_ADDR
17529: GO 17986
17531: LD_INT 28
17533: DOUBLE
17534: EQUAL
17535: IFTRUE 17539
17537: GO 17557
17539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17540: LD_ADDR_VAR 0 3
17544: PUSH
17545: LD_INT 13
17547: PUSH
17548: LD_INT 14
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: ST_TO_ADDR
17555: GO 17986
17557: LD_INT 29
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17583
17565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17566: LD_ADDR_VAR 0 3
17570: PUSH
17571: LD_INT 13
17573: PUSH
17574: LD_INT 14
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: ST_TO_ADDR
17581: GO 17986
17583: LD_INT 31
17585: DOUBLE
17586: EQUAL
17587: IFTRUE 17591
17589: GO 17609
17591: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17592: LD_ADDR_VAR 0 3
17596: PUSH
17597: LD_INT 13
17599: PUSH
17600: LD_INT 14
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: ST_TO_ADDR
17607: GO 17986
17609: LD_INT 26
17611: DOUBLE
17612: EQUAL
17613: IFTRUE 17617
17615: GO 17635
17617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17618: LD_ADDR_VAR 0 3
17622: PUSH
17623: LD_INT 13
17625: PUSH
17626: LD_INT 14
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: ST_TO_ADDR
17633: GO 17986
17635: LD_INT 42
17637: DOUBLE
17638: EQUAL
17639: IFTRUE 17643
17641: GO 17669
17643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17644: LD_ADDR_VAR 0 3
17648: PUSH
17649: LD_INT 21
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 23
17657: PUSH
17658: LD_INT 24
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: ST_TO_ADDR
17667: GO 17986
17669: LD_INT 43
17671: DOUBLE
17672: EQUAL
17673: IFTRUE 17677
17675: GO 17703
17677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17678: LD_ADDR_VAR 0 3
17682: PUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_INT 23
17691: PUSH
17692: LD_INT 24
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: ST_TO_ADDR
17701: GO 17986
17703: LD_INT 44
17705: DOUBLE
17706: EQUAL
17707: IFTRUE 17711
17709: GO 17737
17711: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17712: LD_ADDR_VAR 0 3
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_INT 23
17725: PUSH
17726: LD_INT 24
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: ST_TO_ADDR
17735: GO 17986
17737: LD_INT 45
17739: DOUBLE
17740: EQUAL
17741: IFTRUE 17745
17743: GO 17771
17745: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17746: LD_ADDR_VAR 0 3
17750: PUSH
17751: LD_INT 21
17753: PUSH
17754: LD_INT 22
17756: PUSH
17757: LD_INT 23
17759: PUSH
17760: LD_INT 24
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: ST_TO_ADDR
17769: GO 17986
17771: LD_INT 49
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17779
17777: GO 17805
17779: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17780: LD_ADDR_VAR 0 3
17784: PUSH
17785: LD_INT 21
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_INT 23
17793: PUSH
17794: LD_INT 24
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: ST_TO_ADDR
17803: GO 17986
17805: LD_INT 51
17807: DOUBLE
17808: EQUAL
17809: IFTRUE 17813
17811: GO 17839
17813: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17814: LD_ADDR_VAR 0 3
17818: PUSH
17819: LD_INT 21
17821: PUSH
17822: LD_INT 22
17824: PUSH
17825: LD_INT 23
17827: PUSH
17828: LD_INT 24
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: ST_TO_ADDR
17837: GO 17986
17839: LD_INT 52
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17873
17847: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17848: LD_ADDR_VAR 0 3
17852: PUSH
17853: LD_INT 21
17855: PUSH
17856: LD_INT 22
17858: PUSH
17859: LD_INT 23
17861: PUSH
17862: LD_INT 24
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: ST_TO_ADDR
17871: GO 17986
17873: LD_INT 53
17875: DOUBLE
17876: EQUAL
17877: IFTRUE 17881
17879: GO 17899
17881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17882: LD_ADDR_VAR 0 3
17886: PUSH
17887: LD_INT 23
17889: PUSH
17890: LD_INT 24
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: ST_TO_ADDR
17897: GO 17986
17899: LD_INT 46
17901: DOUBLE
17902: EQUAL
17903: IFTRUE 17907
17905: GO 17925
17907: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_INT 23
17915: PUSH
17916: LD_INT 24
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: ST_TO_ADDR
17923: GO 17986
17925: LD_INT 47
17927: DOUBLE
17928: EQUAL
17929: IFTRUE 17933
17931: GO 17951
17933: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
17934: LD_ADDR_VAR 0 3
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 24
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: ST_TO_ADDR
17949: GO 17986
17951: LD_INT 98
17953: DOUBLE
17954: EQUAL
17955: IFTRUE 17959
17957: GO 17985
17959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17960: LD_ADDR_VAR 0 3
17964: PUSH
17965: LD_INT 21
17967: PUSH
17968: LD_INT 22
17970: PUSH
17971: LD_INT 23
17973: PUSH
17974: LD_INT 24
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
17983: GO 17986
17985: POP
// result := ( chassis in result ) ;
17986: LD_ADDR_VAR 0 3
17990: PUSH
17991: LD_VAR 0 1
17995: PUSH
17996: LD_VAR 0 3
18000: IN
18001: ST_TO_ADDR
// end ;
18002: LD_VAR 0 3
18006: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18007: LD_INT 0
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
18013: PPUSH
18014: PPUSH
18015: PPUSH
// result := array ;
18016: LD_ADDR_VAR 0 5
18020: PUSH
18021: LD_VAR 0 1
18025: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18026: LD_VAR 0 1
18030: NOT
18031: IFTRUE 18040
18033: PUSH
18034: LD_VAR 0 2
18038: NOT
18039: OR
18040: IFTRUE 18049
18042: PUSH
18043: LD_VAR 0 3
18047: NOT
18048: OR
18049: IFTRUE 18063
18051: PUSH
18052: LD_VAR 0 2
18056: PUSH
18057: LD_VAR 0 1
18061: GREATER
18062: OR
18063: IFTRUE 18077
18065: PUSH
18066: LD_VAR 0 3
18070: PUSH
18071: LD_VAR 0 1
18075: GREATER
18076: OR
18077: IFFALSE 18081
// exit ;
18079: GO 18377
// if direction then
18081: LD_VAR 0 4
18085: IFFALSE 18149
// begin d := 1 ;
18087: LD_ADDR_VAR 0 9
18091: PUSH
18092: LD_INT 1
18094: ST_TO_ADDR
// if i_from > i_to then
18095: LD_VAR 0 2
18099: PUSH
18100: LD_VAR 0 3
18104: GREATER
18105: IFFALSE 18131
// length := ( array - i_from ) + i_to else
18107: LD_ADDR_VAR 0 11
18111: PUSH
18112: LD_VAR 0 1
18116: PUSH
18117: LD_VAR 0 2
18121: MINUS
18122: PUSH
18123: LD_VAR 0 3
18127: PLUS
18128: ST_TO_ADDR
18129: GO 18147
// length := i_to - i_from ;
18131: LD_ADDR_VAR 0 11
18135: PUSH
18136: LD_VAR 0 3
18140: PUSH
18141: LD_VAR 0 2
18145: MINUS
18146: ST_TO_ADDR
// end else
18147: GO 18210
// begin d := - 1 ;
18149: LD_ADDR_VAR 0 9
18153: PUSH
18154: LD_INT 1
18156: NEG
18157: ST_TO_ADDR
// if i_from > i_to then
18158: LD_VAR 0 2
18162: PUSH
18163: LD_VAR 0 3
18167: GREATER
18168: IFFALSE 18188
// length := i_from - i_to else
18170: LD_ADDR_VAR 0 11
18174: PUSH
18175: LD_VAR 0 2
18179: PUSH
18180: LD_VAR 0 3
18184: MINUS
18185: ST_TO_ADDR
18186: GO 18210
// length := ( array - i_to ) + i_from ;
18188: LD_ADDR_VAR 0 11
18192: PUSH
18193: LD_VAR 0 1
18197: PUSH
18198: LD_VAR 0 3
18202: MINUS
18203: PUSH
18204: LD_VAR 0 2
18208: PLUS
18209: ST_TO_ADDR
// end ; if not length then
18210: LD_VAR 0 11
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18377
// tmp := array ;
18219: LD_ADDR_VAR 0 10
18223: PUSH
18224: LD_VAR 0 1
18228: ST_TO_ADDR
// for i = 1 to length do
18229: LD_ADDR_VAR 0 6
18233: PUSH
18234: DOUBLE
18235: LD_INT 1
18237: DEC
18238: ST_TO_ADDR
18239: LD_VAR 0 11
18243: PUSH
18244: FOR_TO
18245: IFFALSE 18365
// begin for j = 1 to array do
18247: LD_ADDR_VAR 0 7
18251: PUSH
18252: DOUBLE
18253: LD_INT 1
18255: DEC
18256: ST_TO_ADDR
18257: LD_VAR 0 1
18261: PUSH
18262: FOR_TO
18263: IFFALSE 18351
// begin k := j + d ;
18265: LD_ADDR_VAR 0 8
18269: PUSH
18270: LD_VAR 0 7
18274: PUSH
18275: LD_VAR 0 9
18279: PLUS
18280: ST_TO_ADDR
// if k > array then
18281: LD_VAR 0 8
18285: PUSH
18286: LD_VAR 0 1
18290: GREATER
18291: IFFALSE 18301
// k := 1 ;
18293: LD_ADDR_VAR 0 8
18297: PUSH
18298: LD_INT 1
18300: ST_TO_ADDR
// if not k then
18301: LD_VAR 0 8
18305: NOT
18306: IFFALSE 18318
// k := array ;
18308: LD_ADDR_VAR 0 8
18312: PUSH
18313: LD_VAR 0 1
18317: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18318: LD_ADDR_VAR 0 10
18322: PUSH
18323: LD_VAR 0 10
18327: PPUSH
18328: LD_VAR 0 8
18332: PPUSH
18333: LD_VAR 0 1
18337: PUSH
18338: LD_VAR 0 7
18342: ARRAY
18343: PPUSH
18344: CALL_OW 1
18348: ST_TO_ADDR
// end ;
18349: GO 18262
18351: POP
18352: POP
// array := tmp ;
18353: LD_ADDR_VAR 0 1
18357: PUSH
18358: LD_VAR 0 10
18362: ST_TO_ADDR
// end ;
18363: GO 18244
18365: POP
18366: POP
// result := array ;
18367: LD_ADDR_VAR 0 5
18371: PUSH
18372: LD_VAR 0 1
18376: ST_TO_ADDR
// end ;
18377: LD_VAR 0 5
18381: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18382: LD_INT 0
18384: PPUSH
18385: PPUSH
// result := 0 ;
18386: LD_ADDR_VAR 0 3
18390: PUSH
18391: LD_INT 0
18393: ST_TO_ADDR
// if not array or not value in array then
18394: LD_VAR 0 1
18398: NOT
18399: IFTRUE 18414
18401: PUSH
18402: LD_VAR 0 2
18406: PUSH
18407: LD_VAR 0 1
18411: IN
18412: NOT
18413: OR
18414: IFFALSE 18418
// exit ;
18416: GO 18472
// for i = 1 to array do
18418: LD_ADDR_VAR 0 4
18422: PUSH
18423: DOUBLE
18424: LD_INT 1
18426: DEC
18427: ST_TO_ADDR
18428: LD_VAR 0 1
18432: PUSH
18433: FOR_TO
18434: IFFALSE 18470
// if value = array [ i ] then
18436: LD_VAR 0 2
18440: PUSH
18441: LD_VAR 0 1
18445: PUSH
18446: LD_VAR 0 4
18450: ARRAY
18451: EQUAL
18452: IFFALSE 18468
// begin result := i ;
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: LD_VAR 0 4
18463: ST_TO_ADDR
// exit ;
18464: POP
18465: POP
18466: GO 18472
// end ;
18468: GO 18433
18470: POP
18471: POP
// end ;
18472: LD_VAR 0 3
18476: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18477: LD_INT 0
18479: PPUSH
// vc_chassis := chassis ;
18480: LD_ADDR_OWVAR 37
18484: PUSH
18485: LD_VAR 0 1
18489: ST_TO_ADDR
// vc_engine := engine ;
18490: LD_ADDR_OWVAR 39
18494: PUSH
18495: LD_VAR 0 2
18499: ST_TO_ADDR
// vc_control := control ;
18500: LD_ADDR_OWVAR 38
18504: PUSH
18505: LD_VAR 0 3
18509: ST_TO_ADDR
// vc_weapon := weapon ;
18510: LD_ADDR_OWVAR 40
18514: PUSH
18515: LD_VAR 0 4
18519: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18520: LD_ADDR_OWVAR 41
18524: PUSH
18525: LD_VAR 0 5
18529: ST_TO_ADDR
// end ;
18530: LD_VAR 0 6
18534: RET
// export function WantPlant ( unit ) ; var task ; begin
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
// result := false ;
18539: LD_ADDR_VAR 0 2
18543: PUSH
18544: LD_INT 0
18546: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18547: LD_ADDR_VAR 0 3
18551: PUSH
18552: LD_VAR 0 1
18556: PPUSH
18557: CALL_OW 437
18561: ST_TO_ADDR
// if task then
18562: LD_VAR 0 3
18566: IFFALSE 18594
// if task [ 1 ] [ 1 ] = p then
18568: LD_VAR 0 3
18572: PUSH
18573: LD_INT 1
18575: ARRAY
18576: PUSH
18577: LD_INT 1
18579: ARRAY
18580: PUSH
18581: LD_STRING p
18583: EQUAL
18584: IFFALSE 18594
// result := true ;
18586: LD_ADDR_VAR 0 2
18590: PUSH
18591: LD_INT 1
18593: ST_TO_ADDR
// end ;
18594: LD_VAR 0 2
18598: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18599: LD_INT 0
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
// if pos < 1 then
18605: LD_VAR 0 2
18609: PUSH
18610: LD_INT 1
18612: LESS
18613: IFFALSE 18617
// exit ;
18615: GO 18920
// if pos = 1 then
18617: LD_VAR 0 2
18621: PUSH
18622: LD_INT 1
18624: EQUAL
18625: IFFALSE 18658
// result := Replace ( arr , pos [ 1 ] , value ) else
18627: LD_ADDR_VAR 0 4
18631: PUSH
18632: LD_VAR 0 1
18636: PPUSH
18637: LD_VAR 0 2
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: PPUSH
18646: LD_VAR 0 3
18650: PPUSH
18651: CALL_OW 1
18655: ST_TO_ADDR
18656: GO 18920
// begin tmp := arr ;
18658: LD_ADDR_VAR 0 6
18662: PUSH
18663: LD_VAR 0 1
18667: ST_TO_ADDR
// s_arr := [ tmp ] ;
18668: LD_ADDR_VAR 0 7
18672: PUSH
18673: LD_VAR 0 6
18677: PUSH
18678: EMPTY
18679: LIST
18680: ST_TO_ADDR
// for i = 1 to pos - 1 do
18681: LD_ADDR_VAR 0 5
18685: PUSH
18686: DOUBLE
18687: LD_INT 1
18689: DEC
18690: ST_TO_ADDR
18691: LD_VAR 0 2
18695: PUSH
18696: LD_INT 1
18698: MINUS
18699: PUSH
18700: FOR_TO
18701: IFFALSE 18746
// begin tmp := tmp [ pos [ i ] ] ;
18703: LD_ADDR_VAR 0 6
18707: PUSH
18708: LD_VAR 0 6
18712: PUSH
18713: LD_VAR 0 2
18717: PUSH
18718: LD_VAR 0 5
18722: ARRAY
18723: ARRAY
18724: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18725: LD_ADDR_VAR 0 7
18729: PUSH
18730: LD_VAR 0 7
18734: PUSH
18735: LD_VAR 0 6
18739: PUSH
18740: EMPTY
18741: LIST
18742: ADD
18743: ST_TO_ADDR
// end ;
18744: GO 18700
18746: POP
18747: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18748: LD_ADDR_VAR 0 6
18752: PUSH
18753: LD_VAR 0 6
18757: PPUSH
18758: LD_VAR 0 2
18762: PUSH
18763: LD_VAR 0 2
18767: ARRAY
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 1
18778: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18779: LD_ADDR_VAR 0 7
18783: PUSH
18784: LD_VAR 0 7
18788: PPUSH
18789: LD_VAR 0 7
18793: PPUSH
18794: LD_VAR 0 6
18798: PPUSH
18799: CALL_OW 1
18803: ST_TO_ADDR
// for i = s_arr downto 2 do
18804: LD_ADDR_VAR 0 5
18808: PUSH
18809: DOUBLE
18810: LD_VAR 0 7
18814: INC
18815: ST_TO_ADDR
18816: LD_INT 2
18818: PUSH
18819: FOR_DOWNTO
18820: IFFALSE 18904
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18822: LD_ADDR_VAR 0 6
18826: PUSH
18827: LD_VAR 0 7
18831: PUSH
18832: LD_VAR 0 5
18836: PUSH
18837: LD_INT 1
18839: MINUS
18840: ARRAY
18841: PPUSH
18842: LD_VAR 0 2
18846: PUSH
18847: LD_VAR 0 5
18851: PUSH
18852: LD_INT 1
18854: MINUS
18855: ARRAY
18856: PPUSH
18857: LD_VAR 0 7
18861: PUSH
18862: LD_VAR 0 5
18866: ARRAY
18867: PPUSH
18868: CALL_OW 1
18872: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18873: LD_ADDR_VAR 0 7
18877: PUSH
18878: LD_VAR 0 7
18882: PPUSH
18883: LD_VAR 0 5
18887: PUSH
18888: LD_INT 1
18890: MINUS
18891: PPUSH
18892: LD_VAR 0 6
18896: PPUSH
18897: CALL_OW 1
18901: ST_TO_ADDR
// end ;
18902: GO 18819
18904: POP
18905: POP
// result := s_arr [ 1 ] ;
18906: LD_ADDR_VAR 0 4
18910: PUSH
18911: LD_VAR 0 7
18915: PUSH
18916: LD_INT 1
18918: ARRAY
18919: ST_TO_ADDR
// end ; end ;
18920: LD_VAR 0 4
18924: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18925: LD_INT 0
18927: PPUSH
18928: PPUSH
// if not list then
18929: LD_VAR 0 1
18933: NOT
18934: IFFALSE 18938
// exit ;
18936: GO 19029
// i := list [ pos1 ] ;
18938: LD_ADDR_VAR 0 5
18942: PUSH
18943: LD_VAR 0 1
18947: PUSH
18948: LD_VAR 0 2
18952: ARRAY
18953: ST_TO_ADDR
// if not i then
18954: LD_VAR 0 5
18958: NOT
18959: IFFALSE 18963
// exit ;
18961: GO 19029
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18963: LD_ADDR_VAR 0 1
18967: PUSH
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_VAR 0 2
18977: PPUSH
18978: LD_VAR 0 1
18982: PUSH
18983: LD_VAR 0 3
18987: ARRAY
18988: PPUSH
18989: CALL_OW 1
18993: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18994: LD_ADDR_VAR 0 1
18998: PUSH
18999: LD_VAR 0 1
19003: PPUSH
19004: LD_VAR 0 3
19008: PPUSH
19009: LD_VAR 0 5
19013: PPUSH
19014: CALL_OW 1
19018: ST_TO_ADDR
// result := list ;
19019: LD_ADDR_VAR 0 4
19023: PUSH
19024: LD_VAR 0 1
19028: ST_TO_ADDR
// end ;
19029: LD_VAR 0 4
19033: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19034: LD_INT 0
19036: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19037: LD_ADDR_VAR 0 5
19041: PUSH
19042: LD_VAR 0 1
19046: PPUSH
19047: CALL_OW 250
19051: PPUSH
19052: LD_VAR 0 1
19056: PPUSH
19057: CALL_OW 251
19061: PPUSH
19062: LD_VAR 0 2
19066: PPUSH
19067: LD_VAR 0 3
19071: PPUSH
19072: LD_VAR 0 4
19076: PPUSH
19077: CALL 19459 0 5
19081: ST_TO_ADDR
// end ;
19082: LD_VAR 0 5
19086: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
19087: LD_INT 0
19089: PPUSH
19090: PPUSH
19091: PPUSH
19092: PPUSH
// if not list or not unit then
19093: LD_VAR 0 2
19097: NOT
19098: IFTRUE 19107
19100: PUSH
19101: LD_VAR 0 1
19105: NOT
19106: OR
19107: IFFALSE 19111
// exit ;
19109: GO 19454
// result := [ ] ;
19111: LD_ADDR_VAR 0 5
19115: PUSH
19116: EMPTY
19117: ST_TO_ADDR
// for i in list do
19118: LD_ADDR_VAR 0 6
19122: PUSH
19123: LD_VAR 0 2
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19347
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
19131: LD_ADDR_VAR 0 8
19135: PUSH
19136: LD_VAR 0 1
19140: PPUSH
19141: LD_VAR 0 6
19145: PUSH
19146: LD_INT 1
19148: ARRAY
19149: PPUSH
19150: LD_VAR 0 6
19154: PUSH
19155: LD_INT 2
19157: ARRAY
19158: PPUSH
19159: CALL_OW 297
19163: ST_TO_ADDR
// if not Count ( result ) then
19164: LD_VAR 0 5
19168: PPUSH
19169: CALL 15681 0 1
19173: NOT
19174: IFFALSE 19207
// begin result := Join ( result , [ i , tmp ] ) ;
19176: LD_ADDR_VAR 0 5
19180: PUSH
19181: LD_VAR 0 5
19185: PPUSH
19186: LD_VAR 0 6
19190: PUSH
19191: LD_VAR 0 8
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PPUSH
19200: CALL 51657 0 2
19204: ST_TO_ADDR
// continue ;
19205: GO 19128
// end ; if result [ result ] [ 2 ] <= tmp then
19207: LD_VAR 0 5
19211: PUSH
19212: LD_VAR 0 5
19216: ARRAY
19217: PUSH
19218: LD_INT 2
19220: ARRAY
19221: PUSH
19222: LD_VAR 0 8
19226: LESSEQUAL
19227: IFFALSE 19260
// result := Join ( result , [ i , tmp ] ) else
19229: LD_ADDR_VAR 0 5
19233: PUSH
19234: LD_VAR 0 5
19238: PPUSH
19239: LD_VAR 0 6
19243: PUSH
19244: LD_VAR 0 8
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PPUSH
19253: CALL 51657 0 2
19257: ST_TO_ADDR
19258: GO 19345
// begin for j := 1 to Count ( result ) do
19260: LD_ADDR_VAR 0 7
19264: PUSH
19265: DOUBLE
19266: LD_INT 1
19268: DEC
19269: ST_TO_ADDR
19270: LD_VAR 0 5
19274: PPUSH
19275: CALL 15681 0 1
19279: PUSH
19280: FOR_TO
19281: IFFALSE 19343
// begin if tmp < result [ j ] [ 2 ] then
19283: LD_VAR 0 8
19287: PUSH
19288: LD_VAR 0 5
19292: PUSH
19293: LD_VAR 0 7
19297: ARRAY
19298: PUSH
19299: LD_INT 2
19301: ARRAY
19302: LESS
19303: IFFALSE 19341
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19305: LD_ADDR_VAR 0 5
19309: PUSH
19310: LD_VAR 0 5
19314: PPUSH
19315: LD_VAR 0 7
19319: PPUSH
19320: LD_VAR 0 6
19324: PUSH
19325: LD_VAR 0 8
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL_OW 2
19338: ST_TO_ADDR
// break ;
19339: GO 19343
// end ; end ;
19341: GO 19280
19343: POP
19344: POP
// end ; end ;
19345: GO 19128
19347: POP
19348: POP
// if result and not asc then
19349: LD_VAR 0 5
19353: IFFALSE 19362
19355: PUSH
19356: LD_VAR 0 3
19360: NOT
19361: AND
19362: IFFALSE 19379
// result := ReverseArray ( result ) ;
19364: LD_ADDR_VAR 0 5
19368: PUSH
19369: LD_VAR 0 5
19373: PPUSH
19374: CALL 46737 0 1
19378: ST_TO_ADDR
// tmp := [ ] ;
19379: LD_ADDR_VAR 0 8
19383: PUSH
19384: EMPTY
19385: ST_TO_ADDR
// if mode then
19386: LD_VAR 0 4
19390: IFFALSE 19454
// begin for i := 1 to result do
19392: LD_ADDR_VAR 0 6
19396: PUSH
19397: DOUBLE
19398: LD_INT 1
19400: DEC
19401: ST_TO_ADDR
19402: LD_VAR 0 5
19406: PUSH
19407: FOR_TO
19408: IFFALSE 19442
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
19410: LD_ADDR_VAR 0 8
19414: PUSH
19415: LD_VAR 0 8
19419: PPUSH
19420: LD_VAR 0 5
19424: PUSH
19425: LD_VAR 0 6
19429: ARRAY
19430: PUSH
19431: LD_INT 1
19433: ARRAY
19434: PPUSH
19435: CALL 51657 0 2
19439: ST_TO_ADDR
19440: GO 19407
19442: POP
19443: POP
// result := tmp ;
19444: LD_ADDR_VAR 0 5
19448: PUSH
19449: LD_VAR 0 8
19453: ST_TO_ADDR
// end ; end ;
19454: LD_VAR 0 5
19458: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19459: LD_INT 0
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
// if not list then
19465: LD_VAR 0 3
19469: NOT
19470: IFFALSE 19474
// exit ;
19472: GO 19864
// result := [ ] ;
19474: LD_ADDR_VAR 0 6
19478: PUSH
19479: EMPTY
19480: ST_TO_ADDR
// for i in list do
19481: LD_ADDR_VAR 0 7
19485: PUSH
19486: LD_VAR 0 3
19490: PUSH
19491: FOR_IN
19492: IFFALSE 19694
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19494: LD_ADDR_VAR 0 9
19498: PUSH
19499: LD_VAR 0 7
19503: PPUSH
19504: LD_VAR 0 1
19508: PPUSH
19509: LD_VAR 0 2
19513: PPUSH
19514: CALL_OW 297
19518: ST_TO_ADDR
// if not result then
19519: LD_VAR 0 6
19523: NOT
19524: IFFALSE 19550
// result := [ [ i , tmp ] ] else
19526: LD_ADDR_VAR 0 6
19530: PUSH
19531: LD_VAR 0 7
19535: PUSH
19536: LD_VAR 0 9
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: ST_TO_ADDR
19548: GO 19692
// begin if result [ result ] [ 2 ] <= tmp then
19550: LD_VAR 0 6
19554: PUSH
19555: LD_VAR 0 6
19559: ARRAY
19560: PUSH
19561: LD_INT 2
19563: ARRAY
19564: PUSH
19565: LD_VAR 0 9
19569: LESSEQUAL
19570: IFFALSE 19612
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19572: LD_ADDR_VAR 0 6
19576: PUSH
19577: LD_VAR 0 6
19581: PPUSH
19582: LD_VAR 0 6
19586: PUSH
19587: LD_INT 1
19589: PLUS
19590: PPUSH
19591: LD_VAR 0 7
19595: PUSH
19596: LD_VAR 0 9
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PPUSH
19605: CALL_OW 2
19609: ST_TO_ADDR
19610: GO 19692
// for j := 1 to result do
19612: LD_ADDR_VAR 0 8
19616: PUSH
19617: DOUBLE
19618: LD_INT 1
19620: DEC
19621: ST_TO_ADDR
19622: LD_VAR 0 6
19626: PUSH
19627: FOR_TO
19628: IFFALSE 19690
// begin if tmp < result [ j ] [ 2 ] then
19630: LD_VAR 0 9
19634: PUSH
19635: LD_VAR 0 6
19639: PUSH
19640: LD_VAR 0 8
19644: ARRAY
19645: PUSH
19646: LD_INT 2
19648: ARRAY
19649: LESS
19650: IFFALSE 19688
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19652: LD_ADDR_VAR 0 6
19656: PUSH
19657: LD_VAR 0 6
19661: PPUSH
19662: LD_VAR 0 8
19666: PPUSH
19667: LD_VAR 0 7
19671: PUSH
19672: LD_VAR 0 9
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PPUSH
19681: CALL_OW 2
19685: ST_TO_ADDR
// break ;
19686: GO 19690
// end ; end ;
19688: GO 19627
19690: POP
19691: POP
// end ; end ;
19692: GO 19491
19694: POP
19695: POP
// if result and not asc then
19696: LD_VAR 0 6
19700: IFFALSE 19709
19702: PUSH
19703: LD_VAR 0 4
19707: NOT
19708: AND
19709: IFFALSE 19784
// begin tmp := result ;
19711: LD_ADDR_VAR 0 9
19715: PUSH
19716: LD_VAR 0 6
19720: ST_TO_ADDR
// for i = tmp downto 1 do
19721: LD_ADDR_VAR 0 7
19725: PUSH
19726: DOUBLE
19727: LD_VAR 0 9
19731: INC
19732: ST_TO_ADDR
19733: LD_INT 1
19735: PUSH
19736: FOR_DOWNTO
19737: IFFALSE 19782
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19739: LD_ADDR_VAR 0 6
19743: PUSH
19744: LD_VAR 0 6
19748: PPUSH
19749: LD_VAR 0 9
19753: PUSH
19754: LD_VAR 0 7
19758: MINUS
19759: PUSH
19760: LD_INT 1
19762: PLUS
19763: PPUSH
19764: LD_VAR 0 9
19768: PUSH
19769: LD_VAR 0 7
19773: ARRAY
19774: PPUSH
19775: CALL_OW 1
19779: ST_TO_ADDR
19780: GO 19736
19782: POP
19783: POP
// end ; tmp := [ ] ;
19784: LD_ADDR_VAR 0 9
19788: PUSH
19789: EMPTY
19790: ST_TO_ADDR
// if mode then
19791: LD_VAR 0 5
19795: IFFALSE 19864
// begin for i = 1 to result do
19797: LD_ADDR_VAR 0 7
19801: PUSH
19802: DOUBLE
19803: LD_INT 1
19805: DEC
19806: ST_TO_ADDR
19807: LD_VAR 0 6
19811: PUSH
19812: FOR_TO
19813: IFFALSE 19852
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19815: LD_ADDR_VAR 0 9
19819: PUSH
19820: LD_VAR 0 9
19824: PPUSH
19825: LD_VAR 0 7
19829: PPUSH
19830: LD_VAR 0 6
19834: PUSH
19835: LD_VAR 0 7
19839: ARRAY
19840: PUSH
19841: LD_INT 1
19843: ARRAY
19844: PPUSH
19845: CALL_OW 1
19849: ST_TO_ADDR
19850: GO 19812
19852: POP
19853: POP
// result := tmp ;
19854: LD_ADDR_VAR 0 6
19858: PUSH
19859: LD_VAR 0 9
19863: ST_TO_ADDR
// end ; end ;
19864: LD_VAR 0 6
19868: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19869: LD_INT 0
19871: PPUSH
19872: PPUSH
19873: PPUSH
19874: PPUSH
19875: PPUSH
19876: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19877: LD_ADDR_VAR 0 5
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: ST_TO_ADDR
// if not x or not y then
19899: LD_VAR 0 2
19903: NOT
19904: IFTRUE 19913
19906: PUSH
19907: LD_VAR 0 3
19911: NOT
19912: OR
19913: IFFALSE 19917
// exit ;
19915: GO 21573
// if not range then
19917: LD_VAR 0 4
19921: NOT
19922: IFFALSE 19932
// range := 10 ;
19924: LD_ADDR_VAR 0 4
19928: PUSH
19929: LD_INT 10
19931: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19932: LD_ADDR_VAR 0 8
19936: PUSH
19937: LD_INT 81
19939: PUSH
19940: LD_VAR 0 1
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 92
19951: PUSH
19952: LD_VAR 0 2
19956: PUSH
19957: LD_VAR 0 3
19961: PUSH
19962: LD_VAR 0 4
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 3
19975: PUSH
19976: LD_INT 21
19978: PUSH
19979: LD_INT 3
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: LIST
19994: PPUSH
19995: CALL_OW 69
19999: ST_TO_ADDR
// if not tmp then
20000: LD_VAR 0 8
20004: NOT
20005: IFFALSE 20009
// exit ;
20007: GO 21573
// for i in tmp do
20009: LD_ADDR_VAR 0 6
20013: PUSH
20014: LD_VAR 0 8
20018: PUSH
20019: FOR_IN
20020: IFFALSE 21548
// begin points := [ 0 , 0 , 0 ] ;
20022: LD_ADDR_VAR 0 9
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: ST_TO_ADDR
// bpoints := 1 ;
20041: LD_ADDR_VAR 0 10
20045: PUSH
20046: LD_INT 1
20048: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20049: LD_VAR 0 6
20053: PPUSH
20054: CALL_OW 247
20058: PUSH
20059: LD_INT 1
20061: DOUBLE
20062: EQUAL
20063: IFTRUE 20067
20065: GO 20649
20067: POP
// begin if GetClass ( i ) = 1 then
20068: LD_VAR 0 6
20072: PPUSH
20073: CALL_OW 257
20077: PUSH
20078: LD_INT 1
20080: EQUAL
20081: IFFALSE 20102
// points := [ 10 , 5 , 3 ] ;
20083: LD_ADDR_VAR 0 9
20087: PUSH
20088: LD_INT 10
20090: PUSH
20091: LD_INT 5
20093: PUSH
20094: LD_INT 3
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20102: LD_VAR 0 6
20106: PPUSH
20107: CALL_OW 257
20111: PUSH
20112: LD_INT 2
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: LD_INT 4
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: LIST
20125: IN
20126: IFFALSE 20147
// points := [ 3 , 2 , 1 ] ;
20128: LD_ADDR_VAR 0 9
20132: PUSH
20133: LD_INT 3
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20147: LD_VAR 0 6
20151: PPUSH
20152: CALL_OW 257
20156: PUSH
20157: LD_INT 5
20159: EQUAL
20160: IFFALSE 20181
// points := [ 130 , 5 , 2 ] ;
20162: LD_ADDR_VAR 0 9
20166: PUSH
20167: LD_INT 130
20169: PUSH
20170: LD_INT 5
20172: PUSH
20173: LD_INT 2
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20181: LD_VAR 0 6
20185: PPUSH
20186: CALL_OW 257
20190: PUSH
20191: LD_INT 8
20193: EQUAL
20194: IFFALSE 20215
// points := [ 35 , 35 , 30 ] ;
20196: LD_ADDR_VAR 0 9
20200: PUSH
20201: LD_INT 35
20203: PUSH
20204: LD_INT 35
20206: PUSH
20207: LD_INT 30
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20215: LD_VAR 0 6
20219: PPUSH
20220: CALL_OW 257
20224: PUSH
20225: LD_INT 9
20227: EQUAL
20228: IFFALSE 20249
// points := [ 20 , 55 , 40 ] ;
20230: LD_ADDR_VAR 0 9
20234: PUSH
20235: LD_INT 20
20237: PUSH
20238: LD_INT 55
20240: PUSH
20241: LD_INT 40
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20249: LD_VAR 0 6
20253: PPUSH
20254: CALL_OW 257
20258: PUSH
20259: LD_INT 12
20261: PUSH
20262: LD_INT 16
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: IN
20269: IFFALSE 20290
// points := [ 5 , 3 , 2 ] ;
20271: LD_ADDR_VAR 0 9
20275: PUSH
20276: LD_INT 5
20278: PUSH
20279: LD_INT 3
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20290: LD_VAR 0 6
20294: PPUSH
20295: CALL_OW 257
20299: PUSH
20300: LD_INT 17
20302: EQUAL
20303: IFFALSE 20324
// points := [ 100 , 50 , 75 ] ;
20305: LD_ADDR_VAR 0 9
20309: PUSH
20310: LD_INT 100
20312: PUSH
20313: LD_INT 50
20315: PUSH
20316: LD_INT 75
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20324: LD_VAR 0 6
20328: PPUSH
20329: CALL_OW 257
20333: PUSH
20334: LD_INT 15
20336: EQUAL
20337: IFFALSE 20358
// points := [ 10 , 5 , 3 ] ;
20339: LD_ADDR_VAR 0 9
20343: PUSH
20344: LD_INT 10
20346: PUSH
20347: LD_INT 5
20349: PUSH
20350: LD_INT 3
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: LIST
20357: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20358: LD_VAR 0 6
20362: PPUSH
20363: CALL_OW 257
20367: PUSH
20368: LD_INT 14
20370: EQUAL
20371: IFFALSE 20392
// points := [ 10 , 0 , 0 ] ;
20373: LD_ADDR_VAR 0 9
20377: PUSH
20378: LD_INT 10
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20392: LD_VAR 0 6
20396: PPUSH
20397: CALL_OW 257
20401: PUSH
20402: LD_INT 11
20404: EQUAL
20405: IFFALSE 20426
// points := [ 30 , 10 , 5 ] ;
20407: LD_ADDR_VAR 0 9
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 10
20417: PUSH
20418: LD_INT 5
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20426: LD_VAR 0 1
20430: PPUSH
20431: LD_INT 5
20433: PPUSH
20434: CALL_OW 321
20438: PUSH
20439: LD_INT 2
20441: EQUAL
20442: IFFALSE 20459
// bpoints := bpoints * 1.8 ;
20444: LD_ADDR_VAR 0 10
20448: PUSH
20449: LD_VAR 0 10
20453: PUSH
20454: LD_REAL  1.80000000000000E+0000
20457: MUL
20458: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20459: LD_VAR 0 6
20463: PPUSH
20464: CALL_OW 257
20468: PUSH
20469: LD_INT 1
20471: PUSH
20472: LD_INT 2
20474: PUSH
20475: LD_INT 3
20477: PUSH
20478: LD_INT 4
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: IN
20487: IFFALSE 20507
20489: PUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: LD_INT 51
20497: PPUSH
20498: CALL_OW 321
20502: PUSH
20503: LD_INT 2
20505: EQUAL
20506: AND
20507: IFFALSE 20524
// bpoints := bpoints * 1.2 ;
20509: LD_ADDR_VAR 0 10
20513: PUSH
20514: LD_VAR 0 10
20518: PUSH
20519: LD_REAL  1.20000000000000E+0000
20522: MUL
20523: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20524: LD_VAR 0 6
20528: PPUSH
20529: CALL_OW 257
20533: PUSH
20534: LD_INT 5
20536: PUSH
20537: LD_INT 7
20539: PUSH
20540: LD_INT 9
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: LIST
20547: IN
20548: IFFALSE 20568
20550: PUSH
20551: LD_VAR 0 1
20555: PPUSH
20556: LD_INT 52
20558: PPUSH
20559: CALL_OW 321
20563: PUSH
20564: LD_INT 2
20566: EQUAL
20567: AND
20568: IFFALSE 20585
// bpoints := bpoints * 1.5 ;
20570: LD_ADDR_VAR 0 10
20574: PUSH
20575: LD_VAR 0 10
20579: PUSH
20580: LD_REAL  1.50000000000000E+0000
20583: MUL
20584: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20585: LD_VAR 0 1
20589: PPUSH
20590: LD_INT 66
20592: PPUSH
20593: CALL_OW 321
20597: PUSH
20598: LD_INT 2
20600: EQUAL
20601: IFFALSE 20618
// bpoints := bpoints * 1.1 ;
20603: LD_ADDR_VAR 0 10
20607: PUSH
20608: LD_VAR 0 10
20612: PUSH
20613: LD_REAL  1.10000000000000E+0000
20616: MUL
20617: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20618: LD_ADDR_VAR 0 10
20622: PUSH
20623: LD_VAR 0 10
20627: PUSH
20628: LD_VAR 0 6
20632: PPUSH
20633: LD_INT 1
20635: PPUSH
20636: CALL_OW 259
20640: PUSH
20641: LD_REAL  1.15000000000000E+0000
20644: MUL
20645: MUL
20646: ST_TO_ADDR
// end ; unit_vehicle :
20647: GO 21477
20649: LD_INT 2
20651: DOUBLE
20652: EQUAL
20653: IFTRUE 20657
20655: GO 21465
20657: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20658: LD_VAR 0 6
20662: PPUSH
20663: CALL_OW 264
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: LD_INT 42
20673: PUSH
20674: LD_INT 24
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: IN
20682: IFFALSE 20703
// points := [ 25 , 5 , 3 ] ;
20684: LD_ADDR_VAR 0 9
20688: PUSH
20689: LD_INT 25
20691: PUSH
20692: LD_INT 5
20694: PUSH
20695: LD_INT 3
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20703: LD_VAR 0 6
20707: PPUSH
20708: CALL_OW 264
20712: PUSH
20713: LD_INT 4
20715: PUSH
20716: LD_INT 43
20718: PUSH
20719: LD_INT 25
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: LIST
20726: IN
20727: IFFALSE 20748
// points := [ 40 , 15 , 5 ] ;
20729: LD_ADDR_VAR 0 9
20733: PUSH
20734: LD_INT 40
20736: PUSH
20737: LD_INT 15
20739: PUSH
20740: LD_INT 5
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20748: LD_VAR 0 6
20752: PPUSH
20753: CALL_OW 264
20757: PUSH
20758: LD_INT 3
20760: PUSH
20761: LD_INT 23
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: IN
20768: IFFALSE 20789
// points := [ 7 , 25 , 8 ] ;
20770: LD_ADDR_VAR 0 9
20774: PUSH
20775: LD_INT 7
20777: PUSH
20778: LD_INT 25
20780: PUSH
20781: LD_INT 8
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20789: LD_VAR 0 6
20793: PPUSH
20794: CALL_OW 264
20798: PUSH
20799: LD_INT 5
20801: PUSH
20802: LD_INT 27
20804: PUSH
20805: LD_INT 44
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: IN
20813: IFFALSE 20834
// points := [ 14 , 50 , 16 ] ;
20815: LD_ADDR_VAR 0 9
20819: PUSH
20820: LD_INT 14
20822: PUSH
20823: LD_INT 50
20825: PUSH
20826: LD_INT 16
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: LIST
20833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20834: LD_VAR 0 6
20838: PPUSH
20839: CALL_OW 264
20843: PUSH
20844: LD_INT 6
20846: PUSH
20847: LD_INT 46
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: IN
20854: IFFALSE 20875
// points := [ 32 , 120 , 70 ] ;
20856: LD_ADDR_VAR 0 9
20860: PUSH
20861: LD_INT 32
20863: PUSH
20864: LD_INT 120
20866: PUSH
20867: LD_INT 70
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20875: LD_VAR 0 6
20879: PPUSH
20880: CALL_OW 264
20884: PUSH
20885: LD_INT 7
20887: PUSH
20888: LD_INT 28
20890: PUSH
20891: LD_INT 45
20893: PUSH
20894: LD_INT 92
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: IN
20903: IFFALSE 20924
// points := [ 35 , 20 , 45 ] ;
20905: LD_ADDR_VAR 0 9
20909: PUSH
20910: LD_INT 35
20912: PUSH
20913: LD_INT 20
20915: PUSH
20916: LD_INT 45
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20924: LD_VAR 0 6
20928: PPUSH
20929: CALL_OW 264
20933: PUSH
20934: LD_INT 47
20936: PUSH
20937: EMPTY
20938: LIST
20939: IN
20940: IFFALSE 20961
// points := [ 67 , 45 , 75 ] ;
20942: LD_ADDR_VAR 0 9
20946: PUSH
20947: LD_INT 67
20949: PUSH
20950: LD_INT 45
20952: PUSH
20953: LD_INT 75
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20961: LD_VAR 0 6
20965: PPUSH
20966: CALL_OW 264
20970: PUSH
20971: LD_INT 26
20973: PUSH
20974: EMPTY
20975: LIST
20976: IN
20977: IFFALSE 20998
// points := [ 120 , 30 , 80 ] ;
20979: LD_ADDR_VAR 0 9
20983: PUSH
20984: LD_INT 120
20986: PUSH
20987: LD_INT 30
20989: PUSH
20990: LD_INT 80
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20998: LD_VAR 0 6
21002: PPUSH
21003: CALL_OW 264
21007: PUSH
21008: LD_INT 22
21010: PUSH
21011: EMPTY
21012: LIST
21013: IN
21014: IFFALSE 21035
// points := [ 40 , 1 , 1 ] ;
21016: LD_ADDR_VAR 0 9
21020: PUSH
21021: LD_INT 40
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: LD_INT 1
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21035: LD_VAR 0 6
21039: PPUSH
21040: CALL_OW 264
21044: PUSH
21045: LD_INT 29
21047: PUSH
21048: EMPTY
21049: LIST
21050: IN
21051: IFFALSE 21072
// points := [ 70 , 200 , 400 ] ;
21053: LD_ADDR_VAR 0 9
21057: PUSH
21058: LD_INT 70
21060: PUSH
21061: LD_INT 200
21063: PUSH
21064: LD_INT 400
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21072: LD_VAR 0 6
21076: PPUSH
21077: CALL_OW 264
21081: PUSH
21082: LD_INT 14
21084: PUSH
21085: LD_INT 53
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: IN
21092: IFFALSE 21113
// points := [ 40 , 10 , 20 ] ;
21094: LD_ADDR_VAR 0 9
21098: PUSH
21099: LD_INT 40
21101: PUSH
21102: LD_INT 10
21104: PUSH
21105: LD_INT 20
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: LIST
21112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21113: LD_VAR 0 6
21117: PPUSH
21118: CALL_OW 264
21122: PUSH
21123: LD_INT 9
21125: PUSH
21126: EMPTY
21127: LIST
21128: IN
21129: IFFALSE 21150
// points := [ 5 , 70 , 20 ] ;
21131: LD_ADDR_VAR 0 9
21135: PUSH
21136: LD_INT 5
21138: PUSH
21139: LD_INT 70
21141: PUSH
21142: LD_INT 20
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: LIST
21149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21150: LD_VAR 0 6
21154: PPUSH
21155: CALL_OW 264
21159: PUSH
21160: LD_INT 10
21162: PUSH
21163: EMPTY
21164: LIST
21165: IN
21166: IFFALSE 21187
// points := [ 35 , 110 , 70 ] ;
21168: LD_ADDR_VAR 0 9
21172: PUSH
21173: LD_INT 35
21175: PUSH
21176: LD_INT 110
21178: PUSH
21179: LD_INT 70
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21187: LD_VAR 0 6
21191: PPUSH
21192: CALL_OW 265
21196: PUSH
21197: LD_INT 25
21199: EQUAL
21200: IFFALSE 21221
// points := [ 80 , 65 , 100 ] ;
21202: LD_ADDR_VAR 0 9
21206: PUSH
21207: LD_INT 80
21209: PUSH
21210: LD_INT 65
21212: PUSH
21213: LD_INT 100
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21221: LD_VAR 0 6
21225: PPUSH
21226: CALL_OW 263
21230: PUSH
21231: LD_INT 1
21233: EQUAL
21234: IFFALSE 21269
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21236: LD_ADDR_VAR 0 10
21240: PUSH
21241: LD_VAR 0 10
21245: PUSH
21246: LD_VAR 0 6
21250: PPUSH
21251: CALL_OW 311
21255: PPUSH
21256: LD_INT 3
21258: PPUSH
21259: CALL_OW 259
21263: PUSH
21264: LD_INT 4
21266: MUL
21267: MUL
21268: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21269: LD_VAR 0 6
21273: PPUSH
21274: CALL_OW 263
21278: PUSH
21279: LD_INT 2
21281: EQUAL
21282: IFFALSE 21333
// begin j := IsControledBy ( i ) ;
21284: LD_ADDR_VAR 0 7
21288: PUSH
21289: LD_VAR 0 6
21293: PPUSH
21294: CALL_OW 312
21298: ST_TO_ADDR
// if j then
21299: LD_VAR 0 7
21303: IFFALSE 21333
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21305: LD_ADDR_VAR 0 10
21309: PUSH
21310: LD_VAR 0 10
21314: PUSH
21315: LD_VAR 0 7
21319: PPUSH
21320: LD_INT 3
21322: PPUSH
21323: CALL_OW 259
21327: PUSH
21328: LD_INT 3
21330: MUL
21331: MUL
21332: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21333: LD_VAR 0 6
21337: PPUSH
21338: CALL_OW 264
21342: PUSH
21343: LD_INT 5
21345: PUSH
21346: LD_INT 6
21348: PUSH
21349: LD_INT 46
21351: PUSH
21352: LD_INT 44
21354: PUSH
21355: LD_INT 47
21357: PUSH
21358: LD_INT 45
21360: PUSH
21361: LD_INT 28
21363: PUSH
21364: LD_INT 7
21366: PUSH
21367: LD_INT 27
21369: PUSH
21370: LD_INT 29
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: IN
21385: IFFALSE 21405
21387: PUSH
21388: LD_VAR 0 1
21392: PPUSH
21393: LD_INT 52
21395: PPUSH
21396: CALL_OW 321
21400: PUSH
21401: LD_INT 2
21403: EQUAL
21404: AND
21405: IFFALSE 21422
// bpoints := bpoints * 1.2 ;
21407: LD_ADDR_VAR 0 10
21411: PUSH
21412: LD_VAR 0 10
21416: PUSH
21417: LD_REAL  1.20000000000000E+0000
21420: MUL
21421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21422: LD_VAR 0 6
21426: PPUSH
21427: CALL_OW 264
21431: PUSH
21432: LD_INT 6
21434: PUSH
21435: LD_INT 46
21437: PUSH
21438: LD_INT 47
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: IN
21446: IFFALSE 21463
// bpoints := bpoints * 1.2 ;
21448: LD_ADDR_VAR 0 10
21452: PUSH
21453: LD_VAR 0 10
21457: PUSH
21458: LD_REAL  1.20000000000000E+0000
21461: MUL
21462: ST_TO_ADDR
// end ; unit_building :
21463: GO 21477
21465: LD_INT 3
21467: DOUBLE
21468: EQUAL
21469: IFTRUE 21473
21471: GO 21476
21473: POP
// ; end ;
21474: GO 21477
21476: POP
// for j = 1 to 3 do
21477: LD_ADDR_VAR 0 7
21481: PUSH
21482: DOUBLE
21483: LD_INT 1
21485: DEC
21486: ST_TO_ADDR
21487: LD_INT 3
21489: PUSH
21490: FOR_TO
21491: IFFALSE 21544
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21493: LD_ADDR_VAR 0 5
21497: PUSH
21498: LD_VAR 0 5
21502: PPUSH
21503: LD_VAR 0 7
21507: PPUSH
21508: LD_VAR 0 5
21512: PUSH
21513: LD_VAR 0 7
21517: ARRAY
21518: PUSH
21519: LD_VAR 0 9
21523: PUSH
21524: LD_VAR 0 7
21528: ARRAY
21529: PUSH
21530: LD_VAR 0 10
21534: MUL
21535: PLUS
21536: PPUSH
21537: CALL_OW 1
21541: ST_TO_ADDR
21542: GO 21490
21544: POP
21545: POP
// end ;
21546: GO 20019
21548: POP
21549: POP
// result := Replace ( result , 4 , tmp ) ;
21550: LD_ADDR_VAR 0 5
21554: PUSH
21555: LD_VAR 0 5
21559: PPUSH
21560: LD_INT 4
21562: PPUSH
21563: LD_VAR 0 8
21567: PPUSH
21568: CALL_OW 1
21572: ST_TO_ADDR
// end ;
21573: LD_VAR 0 5
21577: RET
// export function DangerAtRange ( unit , range ) ; begin
21578: LD_INT 0
21580: PPUSH
// if not unit then
21581: LD_VAR 0 1
21585: NOT
21586: IFFALSE 21590
// exit ;
21588: GO 21635
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21590: LD_ADDR_VAR 0 3
21594: PUSH
21595: LD_VAR 0 1
21599: PPUSH
21600: CALL_OW 255
21604: PPUSH
21605: LD_VAR 0 1
21609: PPUSH
21610: CALL_OW 250
21614: PPUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 251
21624: PPUSH
21625: LD_VAR 0 2
21629: PPUSH
21630: CALL 19869 0 4
21634: ST_TO_ADDR
// end ;
21635: LD_VAR 0 3
21639: RET
// export function DangerInArea ( side , area ) ; begin
21640: LD_INT 0
21642: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21643: LD_ADDR_VAR 0 3
21647: PUSH
21648: LD_VAR 0 2
21652: PPUSH
21653: LD_INT 81
21655: PUSH
21656: LD_VAR 0 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 70
21669: ST_TO_ADDR
// end ;
21670: LD_VAR 0 3
21674: RET
// export function IsExtension ( b ) ; begin
21675: LD_INT 0
21677: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21678: LD_ADDR_VAR 0 2
21682: PUSH
21683: LD_VAR 0 1
21687: PUSH
21688: LD_INT 23
21690: PUSH
21691: LD_INT 20
21693: PUSH
21694: LD_INT 22
21696: PUSH
21697: LD_INT 17
21699: PUSH
21700: LD_INT 24
21702: PUSH
21703: LD_INT 21
21705: PUSH
21706: LD_INT 19
21708: PUSH
21709: LD_INT 16
21711: PUSH
21712: LD_INT 25
21714: PUSH
21715: LD_INT 18
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: IN
21730: ST_TO_ADDR
// end ;
21731: LD_VAR 0 2
21735: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
// result := [ ] ;
21741: LD_ADDR_VAR 0 4
21745: PUSH
21746: EMPTY
21747: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21748: LD_ADDR_VAR 0 5
21752: PUSH
21753: LD_VAR 0 2
21757: PPUSH
21758: LD_INT 21
21760: PUSH
21761: LD_INT 3
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PPUSH
21768: CALL_OW 70
21772: ST_TO_ADDR
// if not tmp then
21773: LD_VAR 0 5
21777: NOT
21778: IFFALSE 21782
// exit ;
21780: GO 21846
// if checkLink then
21782: LD_VAR 0 3
21786: IFFALSE 21836
// begin for i in tmp do
21788: LD_ADDR_VAR 0 6
21792: PUSH
21793: LD_VAR 0 5
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21834
// if GetBase ( i ) <> base then
21801: LD_VAR 0 6
21805: PPUSH
21806: CALL_OW 274
21810: PUSH
21811: LD_VAR 0 1
21815: NONEQUAL
21816: IFFALSE 21832
// ComLinkToBase ( base , i ) ;
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_VAR 0 6
21827: PPUSH
21828: CALL_OW 169
21832: GO 21798
21834: POP
21835: POP
// end ; result := tmp ;
21836: LD_ADDR_VAR 0 4
21840: PUSH
21841: LD_VAR 0 5
21845: ST_TO_ADDR
// end ;
21846: LD_VAR 0 4
21850: RET
// export function ComComplete ( units , b ) ; var i ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
// if not units then
21855: LD_VAR 0 1
21859: NOT
21860: IFFALSE 21864
// exit ;
21862: GO 21954
// for i in units do
21864: LD_ADDR_VAR 0 4
21868: PUSH
21869: LD_VAR 0 1
21873: PUSH
21874: FOR_IN
21875: IFFALSE 21952
// if BuildingStatus ( b ) = bs_build then
21877: LD_VAR 0 2
21881: PPUSH
21882: CALL_OW 461
21886: PUSH
21887: LD_INT 1
21889: EQUAL
21890: IFFALSE 21950
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21892: LD_VAR 0 4
21896: PPUSH
21897: LD_STRING h
21899: PUSH
21900: LD_VAR 0 2
21904: PPUSH
21905: CALL_OW 250
21909: PUSH
21910: LD_VAR 0 2
21914: PPUSH
21915: CALL_OW 251
21919: PUSH
21920: LD_VAR 0 2
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: PUSH
21943: EMPTY
21944: LIST
21945: PPUSH
21946: CALL_OW 446
21950: GO 21874
21952: POP
21953: POP
// end ;
21954: LD_VAR 0 3
21958: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21959: LD_INT 0
21961: PPUSH
21962: PPUSH
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21967: LD_VAR 0 1
21971: NOT
21972: IFTRUE 21989
21974: PUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 263
21984: PUSH
21985: LD_INT 2
21987: NONEQUAL
21988: OR
21989: IFFALSE 21993
// exit ;
21991: GO 22309
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21993: LD_ADDR_VAR 0 6
21997: PUSH
21998: LD_INT 22
22000: PUSH
22001: LD_VAR 0 1
22005: PPUSH
22006: CALL_OW 255
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 30
22020: PUSH
22021: LD_INT 36
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 34
22030: PUSH
22031: LD_INT 31
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PPUSH
22047: CALL_OW 69
22051: ST_TO_ADDR
// if not tmp then
22052: LD_VAR 0 6
22056: NOT
22057: IFFALSE 22061
// exit ;
22059: GO 22309
// result := [ ] ;
22061: LD_ADDR_VAR 0 2
22065: PUSH
22066: EMPTY
22067: ST_TO_ADDR
// for i in tmp do
22068: LD_ADDR_VAR 0 3
22072: PUSH
22073: LD_VAR 0 6
22077: PUSH
22078: FOR_IN
22079: IFFALSE 22150
// begin t := UnitsInside ( i ) ;
22081: LD_ADDR_VAR 0 4
22085: PUSH
22086: LD_VAR 0 3
22090: PPUSH
22091: CALL_OW 313
22095: ST_TO_ADDR
// if t then
22096: LD_VAR 0 4
22100: IFFALSE 22148
// for j in t do
22102: LD_ADDR_VAR 0 7
22106: PUSH
22107: LD_VAR 0 4
22111: PUSH
22112: FOR_IN
22113: IFFALSE 22146
// result := Replace ( result , result + 1 , j ) ;
22115: LD_ADDR_VAR 0 2
22119: PUSH
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 2
22129: PUSH
22130: LD_INT 1
22132: PLUS
22133: PPUSH
22134: LD_VAR 0 7
22138: PPUSH
22139: CALL_OW 1
22143: ST_TO_ADDR
22144: GO 22112
22146: POP
22147: POP
// end ;
22148: GO 22078
22150: POP
22151: POP
// if not result then
22152: LD_VAR 0 2
22156: NOT
22157: IFFALSE 22161
// exit ;
22159: GO 22309
// mech := result [ 1 ] ;
22161: LD_ADDR_VAR 0 5
22165: PUSH
22166: LD_VAR 0 2
22170: PUSH
22171: LD_INT 1
22173: ARRAY
22174: ST_TO_ADDR
// if result > 1 then
22175: LD_VAR 0 2
22179: PUSH
22180: LD_INT 1
22182: GREATER
22183: IFFALSE 22295
// begin for i = 2 to result do
22185: LD_ADDR_VAR 0 3
22189: PUSH
22190: DOUBLE
22191: LD_INT 2
22193: DEC
22194: ST_TO_ADDR
22195: LD_VAR 0 2
22199: PUSH
22200: FOR_TO
22201: IFFALSE 22293
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22203: LD_ADDR_VAR 0 4
22207: PUSH
22208: LD_VAR 0 2
22212: PUSH
22213: LD_VAR 0 3
22217: ARRAY
22218: PPUSH
22219: LD_INT 3
22221: PPUSH
22222: CALL_OW 259
22226: PUSH
22227: LD_VAR 0 2
22231: PUSH
22232: LD_VAR 0 3
22236: ARRAY
22237: PPUSH
22238: CALL_OW 432
22242: MINUS
22243: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22244: LD_VAR 0 4
22248: PUSH
22249: LD_VAR 0 5
22253: PPUSH
22254: LD_INT 3
22256: PPUSH
22257: CALL_OW 259
22261: PUSH
22262: LD_VAR 0 5
22266: PPUSH
22267: CALL_OW 432
22271: MINUS
22272: GREATEREQUAL
22273: IFFALSE 22291
// mech := result [ i ] ;
22275: LD_ADDR_VAR 0 5
22279: PUSH
22280: LD_VAR 0 2
22284: PUSH
22285: LD_VAR 0 3
22289: ARRAY
22290: ST_TO_ADDR
// end ;
22291: GO 22200
22293: POP
22294: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22295: LD_VAR 0 1
22299: PPUSH
22300: LD_VAR 0 5
22304: PPUSH
22305: CALL_OW 135
// end ;
22309: LD_VAR 0 2
22313: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22314: LD_INT 0
22316: PPUSH
22317: PPUSH
22318: PPUSH
22319: PPUSH
22320: PPUSH
22321: PPUSH
22322: PPUSH
22323: PPUSH
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
// result := [ ] ;
22329: LD_ADDR_VAR 0 7
22333: PUSH
22334: EMPTY
22335: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 266
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: LD_INT 1
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: IN
22356: NOT
22357: IFFALSE 22361
// exit ;
22359: GO 24001
// if name then
22361: LD_VAR 0 3
22365: IFFALSE 22381
// SetBName ( base_dep , name ) ;
22367: LD_VAR 0 1
22371: PPUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: CALL_OW 500
// base := GetBase ( base_dep ) ;
22381: LD_ADDR_VAR 0 15
22385: PUSH
22386: LD_VAR 0 1
22390: PPUSH
22391: CALL_OW 274
22395: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22396: LD_ADDR_VAR 0 16
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 255
22410: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22411: LD_ADDR_VAR 0 17
22415: PUSH
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 248
22425: ST_TO_ADDR
// if sources then
22426: LD_VAR 0 5
22430: IFFALSE 22477
// for i = 1 to 3 do
22432: LD_ADDR_VAR 0 8
22436: PUSH
22437: DOUBLE
22438: LD_INT 1
22440: DEC
22441: ST_TO_ADDR
22442: LD_INT 3
22444: PUSH
22445: FOR_TO
22446: IFFALSE 22475
// AddResourceType ( base , i , sources [ i ] ) ;
22448: LD_VAR 0 15
22452: PPUSH
22453: LD_VAR 0 8
22457: PPUSH
22458: LD_VAR 0 5
22462: PUSH
22463: LD_VAR 0 8
22467: ARRAY
22468: PPUSH
22469: CALL_OW 276
22473: GO 22445
22475: POP
22476: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22477: LD_ADDR_VAR 0 18
22481: PUSH
22482: LD_VAR 0 15
22486: PPUSH
22487: LD_VAR 0 2
22491: PPUSH
22492: LD_INT 1
22494: PPUSH
22495: CALL 21736 0 3
22499: ST_TO_ADDR
// InitHc ;
22500: CALL_OW 19
// InitUc ;
22504: CALL_OW 18
// uc_side := side ;
22508: LD_ADDR_OWVAR 20
22512: PUSH
22513: LD_VAR 0 16
22517: ST_TO_ADDR
// uc_nation := nation ;
22518: LD_ADDR_OWVAR 21
22522: PUSH
22523: LD_VAR 0 17
22527: ST_TO_ADDR
// if buildings then
22528: LD_VAR 0 18
22532: IFFALSE 23860
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22534: LD_ADDR_VAR 0 19
22538: PUSH
22539: LD_VAR 0 18
22543: PPUSH
22544: LD_INT 2
22546: PUSH
22547: LD_INT 30
22549: PUSH
22550: LD_INT 29
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 30
22559: PUSH
22560: LD_INT 30
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: PPUSH
22572: CALL_OW 72
22576: ST_TO_ADDR
// if tmp then
22577: LD_VAR 0 19
22581: IFFALSE 22629
// for i in tmp do
22583: LD_ADDR_VAR 0 8
22587: PUSH
22588: LD_VAR 0 19
22592: PUSH
22593: FOR_IN
22594: IFFALSE 22627
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22596: LD_VAR 0 8
22600: PPUSH
22601: CALL_OW 250
22605: PPUSH
22606: LD_VAR 0 8
22610: PPUSH
22611: CALL_OW 251
22615: PPUSH
22616: LD_VAR 0 16
22620: PPUSH
22621: CALL_OW 441
22625: GO 22593
22627: POP
22628: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22629: LD_VAR 0 18
22633: PPUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 30
22639: PUSH
22640: LD_INT 32
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 30
22649: PUSH
22650: LD_INT 33
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: PPUSH
22662: CALL_OW 72
22666: IFFALSE 22754
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22668: LD_ADDR_VAR 0 8
22672: PUSH
22673: LD_VAR 0 18
22677: PPUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 30
22683: PUSH
22684: LD_INT 32
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PUSH
22691: LD_INT 30
22693: PUSH
22694: LD_INT 33
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 72
22710: PUSH
22711: FOR_IN
22712: IFFALSE 22752
// begin if not GetBWeapon ( i ) then
22714: LD_VAR 0 8
22718: PPUSH
22719: CALL_OW 269
22723: NOT
22724: IFFALSE 22750
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22726: LD_VAR 0 8
22730: PPUSH
22731: LD_VAR 0 8
22735: PPUSH
22736: LD_VAR 0 2
22740: PPUSH
22741: CALL 24006 0 2
22745: PPUSH
22746: CALL_OW 431
// end ;
22750: GO 22711
22752: POP
22753: POP
// end ; for i = 1 to personel do
22754: LD_ADDR_VAR 0 8
22758: PUSH
22759: DOUBLE
22760: LD_INT 1
22762: DEC
22763: ST_TO_ADDR
22764: LD_VAR 0 6
22768: PUSH
22769: FOR_TO
22770: IFFALSE 23840
// begin if i > 4 then
22772: LD_VAR 0 8
22776: PUSH
22777: LD_INT 4
22779: GREATER
22780: IFFALSE 22784
// break ;
22782: GO 23840
// case i of 1 :
22784: LD_VAR 0 8
22788: PUSH
22789: LD_INT 1
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22877
22797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22798: LD_ADDR_VAR 0 12
22802: PUSH
22803: LD_VAR 0 18
22807: PPUSH
22808: LD_INT 22
22810: PUSH
22811: LD_VAR 0 16
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 58
22822: PUSH
22823: EMPTY
22824: LIST
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: LD_INT 30
22831: PUSH
22832: LD_INT 32
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 30
22841: PUSH
22842: LD_INT 4
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 30
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 72
22874: ST_TO_ADDR
22875: GO 23099
22877: LD_INT 2
22879: DOUBLE
22880: EQUAL
22881: IFTRUE 22885
22883: GO 22947
22885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22886: LD_ADDR_VAR 0 12
22890: PUSH
22891: LD_VAR 0 18
22895: PPUSH
22896: LD_INT 22
22898: PUSH
22899: LD_VAR 0 16
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 30
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 30
22923: PUSH
22924: LD_INT 1
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 72
22944: ST_TO_ADDR
22945: GO 23099
22947: LD_INT 3
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 23017
22955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22956: LD_ADDR_VAR 0 12
22960: PUSH
22961: LD_VAR 0 18
22965: PPUSH
22966: LD_INT 22
22968: PUSH
22969: LD_VAR 0 16
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: LD_INT 30
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 30
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PPUSH
23010: CALL_OW 72
23014: ST_TO_ADDR
23015: GO 23099
23017: LD_INT 4
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23098
23025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23026: LD_ADDR_VAR 0 12
23030: PUSH
23031: LD_VAR 0 18
23035: PPUSH
23036: LD_INT 22
23038: PUSH
23039: LD_VAR 0 16
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 30
23053: PUSH
23054: LD_INT 6
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 30
23063: PUSH
23064: LD_INT 7
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 30
23073: PUSH
23074: LD_INT 8
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: CALL_OW 72
23095: ST_TO_ADDR
23096: GO 23099
23098: POP
// if i = 1 then
23099: LD_VAR 0 8
23103: PUSH
23104: LD_INT 1
23106: EQUAL
23107: IFFALSE 23218
// begin tmp := [ ] ;
23109: LD_ADDR_VAR 0 19
23113: PUSH
23114: EMPTY
23115: ST_TO_ADDR
// for j in f do
23116: LD_ADDR_VAR 0 9
23120: PUSH
23121: LD_VAR 0 12
23125: PUSH
23126: FOR_IN
23127: IFFALSE 23200
// if GetBType ( j ) = b_bunker then
23129: LD_VAR 0 9
23133: PPUSH
23134: CALL_OW 266
23138: PUSH
23139: LD_INT 32
23141: EQUAL
23142: IFFALSE 23169
// tmp := Insert ( tmp , 1 , j ) else
23144: LD_ADDR_VAR 0 19
23148: PUSH
23149: LD_VAR 0 19
23153: PPUSH
23154: LD_INT 1
23156: PPUSH
23157: LD_VAR 0 9
23161: PPUSH
23162: CALL_OW 2
23166: ST_TO_ADDR
23167: GO 23198
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23169: LD_ADDR_VAR 0 19
23173: PUSH
23174: LD_VAR 0 19
23178: PPUSH
23179: LD_VAR 0 19
23183: PUSH
23184: LD_INT 1
23186: PLUS
23187: PPUSH
23188: LD_VAR 0 9
23192: PPUSH
23193: CALL_OW 2
23197: ST_TO_ADDR
23198: GO 23126
23200: POP
23201: POP
// if tmp then
23202: LD_VAR 0 19
23206: IFFALSE 23218
// f := tmp ;
23208: LD_ADDR_VAR 0 12
23212: PUSH
23213: LD_VAR 0 19
23217: ST_TO_ADDR
// end ; x := personel [ i ] ;
23218: LD_ADDR_VAR 0 13
23222: PUSH
23223: LD_VAR 0 6
23227: PUSH
23228: LD_VAR 0 8
23232: ARRAY
23233: ST_TO_ADDR
// if x = - 1 then
23234: LD_VAR 0 13
23238: PUSH
23239: LD_INT 1
23241: NEG
23242: EQUAL
23243: IFFALSE 23454
// begin for j in f do
23245: LD_ADDR_VAR 0 9
23249: PUSH
23250: LD_VAR 0 12
23254: PUSH
23255: FOR_IN
23256: IFFALSE 23450
// repeat InitHc ;
23258: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23262: LD_VAR 0 9
23266: PPUSH
23267: CALL_OW 266
23271: PUSH
23272: LD_INT 5
23274: EQUAL
23275: IFFALSE 23345
// begin if UnitsInside ( j ) < 3 then
23277: LD_VAR 0 9
23281: PPUSH
23282: CALL_OW 313
23286: PUSH
23287: LD_INT 3
23289: LESS
23290: IFFALSE 23326
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23292: LD_INT 0
23294: PPUSH
23295: LD_INT 5
23297: PUSH
23298: LD_INT 8
23300: PUSH
23301: LD_INT 9
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: LIST
23308: PUSH
23309: LD_VAR 0 17
23313: ARRAY
23314: PPUSH
23315: LD_VAR 0 4
23319: PPUSH
23320: CALL_OW 380
23324: GO 23343
// PrepareHuman ( false , i , skill ) ;
23326: LD_INT 0
23328: PPUSH
23329: LD_VAR 0 8
23333: PPUSH
23334: LD_VAR 0 4
23338: PPUSH
23339: CALL_OW 380
// end else
23343: GO 23362
// PrepareHuman ( false , i , skill ) ;
23345: LD_INT 0
23347: PPUSH
23348: LD_VAR 0 8
23352: PPUSH
23353: LD_VAR 0 4
23357: PPUSH
23358: CALL_OW 380
// un := CreateHuman ;
23362: LD_ADDR_VAR 0 14
23366: PUSH
23367: CALL_OW 44
23371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23372: LD_ADDR_VAR 0 7
23376: PUSH
23377: LD_VAR 0 7
23381: PPUSH
23382: LD_INT 1
23384: PPUSH
23385: LD_VAR 0 14
23389: PPUSH
23390: CALL_OW 2
23394: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23395: LD_VAR 0 14
23399: PPUSH
23400: LD_VAR 0 9
23404: PPUSH
23405: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23409: LD_VAR 0 9
23413: PPUSH
23414: CALL_OW 313
23418: PUSH
23419: LD_INT 6
23421: EQUAL
23422: IFTRUE 23446
23424: PUSH
23425: LD_VAR 0 9
23429: PPUSH
23430: CALL_OW 266
23434: PUSH
23435: LD_INT 32
23437: PUSH
23438: LD_INT 31
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: IN
23445: OR
23446: IFFALSE 23258
23448: GO 23255
23450: POP
23451: POP
// end else
23452: GO 23838
// for j = 1 to x do
23454: LD_ADDR_VAR 0 9
23458: PUSH
23459: DOUBLE
23460: LD_INT 1
23462: DEC
23463: ST_TO_ADDR
23464: LD_VAR 0 13
23468: PUSH
23469: FOR_TO
23470: IFFALSE 23836
// begin InitHc ;
23472: CALL_OW 19
// if not f then
23476: LD_VAR 0 12
23480: NOT
23481: IFFALSE 23570
// begin PrepareHuman ( false , i , skill ) ;
23483: LD_INT 0
23485: PPUSH
23486: LD_VAR 0 8
23490: PPUSH
23491: LD_VAR 0 4
23495: PPUSH
23496: CALL_OW 380
// un := CreateHuman ;
23500: LD_ADDR_VAR 0 14
23504: PUSH
23505: CALL_OW 44
23509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23510: LD_ADDR_VAR 0 7
23514: PUSH
23515: LD_VAR 0 7
23519: PPUSH
23520: LD_INT 1
23522: PPUSH
23523: LD_VAR 0 14
23527: PPUSH
23528: CALL_OW 2
23532: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23533: LD_VAR 0 14
23537: PPUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 250
23547: PPUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: CALL_OW 251
23557: PPUSH
23558: LD_INT 10
23560: PPUSH
23561: LD_INT 0
23563: PPUSH
23564: CALL_OW 50
// continue ;
23568: GO 23469
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23570: LD_VAR 0 12
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PPUSH
23579: CALL_OW 313
23583: IFFALSE 23611
23585: PUSH
23586: LD_VAR 0 12
23590: PUSH
23591: LD_INT 1
23593: ARRAY
23594: PPUSH
23595: CALL_OW 266
23599: PUSH
23600: LD_INT 32
23602: PUSH
23603: LD_INT 31
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: IN
23610: AND
23611: IFTRUE 23632
23613: PUSH
23614: LD_VAR 0 12
23618: PUSH
23619: LD_INT 1
23621: ARRAY
23622: PPUSH
23623: CALL_OW 313
23627: PUSH
23628: LD_INT 6
23630: EQUAL
23631: OR
23632: IFFALSE 23652
// f := Delete ( f , 1 ) ;
23634: LD_ADDR_VAR 0 12
23638: PUSH
23639: LD_VAR 0 12
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 3
23651: ST_TO_ADDR
// if not f then
23652: LD_VAR 0 12
23656: NOT
23657: IFFALSE 23675
// begin x := x + 2 ;
23659: LD_ADDR_VAR 0 13
23663: PUSH
23664: LD_VAR 0 13
23668: PUSH
23669: LD_INT 2
23671: PLUS
23672: ST_TO_ADDR
// continue ;
23673: GO 23469
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23675: LD_VAR 0 12
23679: PUSH
23680: LD_INT 1
23682: ARRAY
23683: PPUSH
23684: CALL_OW 266
23688: PUSH
23689: LD_INT 5
23691: EQUAL
23692: IFFALSE 23766
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23694: LD_VAR 0 12
23698: PUSH
23699: LD_INT 1
23701: ARRAY
23702: PPUSH
23703: CALL_OW 313
23707: PUSH
23708: LD_INT 3
23710: LESS
23711: IFFALSE 23747
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23713: LD_INT 0
23715: PPUSH
23716: LD_INT 5
23718: PUSH
23719: LD_INT 8
23721: PUSH
23722: LD_INT 9
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: LIST
23729: PUSH
23730: LD_VAR 0 17
23734: ARRAY
23735: PPUSH
23736: LD_VAR 0 4
23740: PPUSH
23741: CALL_OW 380
23745: GO 23764
// PrepareHuman ( false , i , skill ) ;
23747: LD_INT 0
23749: PPUSH
23750: LD_VAR 0 8
23754: PPUSH
23755: LD_VAR 0 4
23759: PPUSH
23760: CALL_OW 380
// end else
23764: GO 23783
// PrepareHuman ( false , i , skill ) ;
23766: LD_INT 0
23768: PPUSH
23769: LD_VAR 0 8
23773: PPUSH
23774: LD_VAR 0 4
23778: PPUSH
23779: CALL_OW 380
// un := CreateHuman ;
23783: LD_ADDR_VAR 0 14
23787: PUSH
23788: CALL_OW 44
23792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23793: LD_ADDR_VAR 0 7
23797: PUSH
23798: LD_VAR 0 7
23802: PPUSH
23803: LD_INT 1
23805: PPUSH
23806: LD_VAR 0 14
23810: PPUSH
23811: CALL_OW 2
23815: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23816: LD_VAR 0 14
23820: PPUSH
23821: LD_VAR 0 12
23825: PUSH
23826: LD_INT 1
23828: ARRAY
23829: PPUSH
23830: CALL_OW 52
// end ;
23834: GO 23469
23836: POP
23837: POP
// end ;
23838: GO 22769
23840: POP
23841: POP
// result := result ^ buildings ;
23842: LD_ADDR_VAR 0 7
23846: PUSH
23847: LD_VAR 0 7
23851: PUSH
23852: LD_VAR 0 18
23856: ADD
23857: ST_TO_ADDR
// end else
23858: GO 24001
// begin for i = 1 to personel do
23860: LD_ADDR_VAR 0 8
23864: PUSH
23865: DOUBLE
23866: LD_INT 1
23868: DEC
23869: ST_TO_ADDR
23870: LD_VAR 0 6
23874: PUSH
23875: FOR_TO
23876: IFFALSE 23999
// begin if i > 4 then
23878: LD_VAR 0 8
23882: PUSH
23883: LD_INT 4
23885: GREATER
23886: IFFALSE 23890
// break ;
23888: GO 23999
// x := personel [ i ] ;
23890: LD_ADDR_VAR 0 13
23894: PUSH
23895: LD_VAR 0 6
23899: PUSH
23900: LD_VAR 0 8
23904: ARRAY
23905: ST_TO_ADDR
// if x = - 1 then
23906: LD_VAR 0 13
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: EQUAL
23915: IFFALSE 23919
// continue ;
23917: GO 23875
// PrepareHuman ( false , i , skill ) ;
23919: LD_INT 0
23921: PPUSH
23922: LD_VAR 0 8
23926: PPUSH
23927: LD_VAR 0 4
23931: PPUSH
23932: CALL_OW 380
// un := CreateHuman ;
23936: LD_ADDR_VAR 0 14
23940: PUSH
23941: CALL_OW 44
23945: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23946: LD_VAR 0 14
23950: PPUSH
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL_OW 250
23960: PPUSH
23961: LD_VAR 0 1
23965: PPUSH
23966: CALL_OW 251
23970: PPUSH
23971: LD_INT 10
23973: PPUSH
23974: LD_INT 0
23976: PPUSH
23977: CALL_OW 50
// result := result ^ un ;
23981: LD_ADDR_VAR 0 7
23985: PUSH
23986: LD_VAR 0 7
23990: PUSH
23991: LD_VAR 0 14
23995: ADD
23996: ST_TO_ADDR
// end ;
23997: GO 23875
23999: POP
24000: POP
// end ; end ;
24001: LD_VAR 0 7
24005: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24006: LD_INT 0
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
24019: PPUSH
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
// result := false ;
24024: LD_ADDR_VAR 0 3
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24032: LD_VAR 0 1
24036: NOT
24037: IFTRUE 24062
24039: PUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 266
24049: PUSH
24050: LD_INT 32
24052: PUSH
24053: LD_INT 33
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: IN
24060: NOT
24061: OR
24062: IFFALSE 24066
// exit ;
24064: GO 25201
// nat := GetNation ( tower ) ;
24066: LD_ADDR_VAR 0 12
24070: PUSH
24071: LD_VAR 0 1
24075: PPUSH
24076: CALL_OW 248
24080: ST_TO_ADDR
// side := GetSide ( tower ) ;
24081: LD_ADDR_VAR 0 16
24085: PUSH
24086: LD_VAR 0 1
24090: PPUSH
24091: CALL_OW 255
24095: ST_TO_ADDR
// x := GetX ( tower ) ;
24096: LD_ADDR_VAR 0 10
24100: PUSH
24101: LD_VAR 0 1
24105: PPUSH
24106: CALL_OW 250
24110: ST_TO_ADDR
// y := GetY ( tower ) ;
24111: LD_ADDR_VAR 0 11
24115: PUSH
24116: LD_VAR 0 1
24120: PPUSH
24121: CALL_OW 251
24125: ST_TO_ADDR
// if not x or not y then
24126: LD_VAR 0 10
24130: NOT
24131: IFTRUE 24140
24133: PUSH
24134: LD_VAR 0 11
24138: NOT
24139: OR
24140: IFFALSE 24144
// exit ;
24142: GO 25201
// weapon := 0 ;
24144: LD_ADDR_VAR 0 18
24148: PUSH
24149: LD_INT 0
24151: ST_TO_ADDR
// fac_list := [ ] ;
24152: LD_ADDR_VAR 0 17
24156: PUSH
24157: EMPTY
24158: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24159: LD_ADDR_VAR 0 6
24163: PUSH
24164: LD_VAR 0 1
24168: PPUSH
24169: CALL_OW 274
24173: PPUSH
24174: LD_VAR 0 2
24178: PPUSH
24179: LD_INT 0
24181: PPUSH
24182: CALL 21736 0 3
24186: PPUSH
24187: LD_INT 30
24189: PUSH
24190: LD_INT 3
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PPUSH
24197: CALL_OW 72
24201: ST_TO_ADDR
// if not factories then
24202: LD_VAR 0 6
24206: NOT
24207: IFFALSE 24211
// exit ;
24209: GO 25201
// for i in factories do
24211: LD_ADDR_VAR 0 8
24215: PUSH
24216: LD_VAR 0 6
24220: PUSH
24221: FOR_IN
24222: IFFALSE 24247
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24224: LD_ADDR_VAR 0 17
24228: PUSH
24229: LD_VAR 0 17
24233: PUSH
24234: LD_VAR 0 8
24238: PPUSH
24239: CALL_OW 478
24243: UNION
24244: ST_TO_ADDR
24245: GO 24221
24247: POP
24248: POP
// if not fac_list then
24249: LD_VAR 0 17
24253: NOT
24254: IFFALSE 24258
// exit ;
24256: GO 25201
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24258: LD_ADDR_VAR 0 5
24262: PUSH
24263: LD_INT 4
24265: PUSH
24266: LD_INT 5
24268: PUSH
24269: LD_INT 9
24271: PUSH
24272: LD_INT 10
24274: PUSH
24275: LD_INT 6
24277: PUSH
24278: LD_INT 7
24280: PUSH
24281: LD_INT 11
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 27
24295: PUSH
24296: LD_INT 28
24298: PUSH
24299: LD_INT 26
24301: PUSH
24302: LD_INT 30
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 43
24313: PUSH
24314: LD_INT 44
24316: PUSH
24317: LD_INT 46
24319: PUSH
24320: LD_INT 45
24322: PUSH
24323: LD_INT 47
24325: PUSH
24326: LD_INT 49
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: LIST
24341: PUSH
24342: LD_VAR 0 12
24346: ARRAY
24347: ST_TO_ADDR
// list := list isect fac_list ;
24348: LD_ADDR_VAR 0 5
24352: PUSH
24353: LD_VAR 0 5
24357: PUSH
24358: LD_VAR 0 17
24362: ISECT
24363: ST_TO_ADDR
// if not list then
24364: LD_VAR 0 5
24368: NOT
24369: IFFALSE 24373
// exit ;
24371: GO 25201
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24373: LD_VAR 0 12
24377: PUSH
24378: LD_INT 3
24380: EQUAL
24381: IFFALSE 24393
24383: PUSH
24384: LD_INT 49
24386: PUSH
24387: LD_VAR 0 5
24391: IN
24392: AND
24393: IFFALSE 24413
24395: PUSH
24396: LD_INT 31
24398: PPUSH
24399: LD_VAR 0 16
24403: PPUSH
24404: CALL_OW 321
24408: PUSH
24409: LD_INT 2
24411: EQUAL
24412: AND
24413: IFFALSE 24473
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24415: LD_INT 22
24417: PUSH
24418: LD_VAR 0 16
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 35
24429: PUSH
24430: LD_INT 49
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 91
24439: PUSH
24440: LD_VAR 0 1
24444: PUSH
24445: LD_INT 10
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 69
24462: NOT
24463: IFFALSE 24473
// weapon := ru_time_lapser ;
24465: LD_ADDR_VAR 0 18
24469: PUSH
24470: LD_INT 49
24472: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24473: LD_VAR 0 12
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: IN
24488: IFFALSE 24512
24490: PUSH
24491: LD_INT 11
24493: PUSH
24494: LD_VAR 0 5
24498: IN
24499: IFTRUE 24511
24501: PUSH
24502: LD_INT 30
24504: PUSH
24505: LD_VAR 0 5
24509: IN
24510: OR
24511: AND
24512: IFFALSE 24532
24514: PUSH
24515: LD_INT 6
24517: PPUSH
24518: LD_VAR 0 16
24522: PPUSH
24523: CALL_OW 321
24527: PUSH
24528: LD_INT 2
24530: EQUAL
24531: AND
24532: IFFALSE 24699
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24534: LD_INT 22
24536: PUSH
24537: LD_VAR 0 16
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 2
24548: PUSH
24549: LD_INT 35
24551: PUSH
24552: LD_INT 11
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 35
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 91
24576: PUSH
24577: LD_VAR 0 1
24581: PUSH
24582: LD_INT 18
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: LIST
24594: PPUSH
24595: CALL_OW 69
24599: NOT
24600: IFFALSE 24676
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_VAR 0 16
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: LD_INT 30
24620: PUSH
24621: LD_INT 32
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 30
24630: PUSH
24631: LD_INT 33
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 91
24645: PUSH
24646: LD_VAR 0 1
24650: PUSH
24651: LD_INT 12
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: PUSH
24664: EMPTY
24665: LIST
24666: PPUSH
24667: CALL_OW 69
24671: PUSH
24672: LD_INT 2
24674: GREATER
24675: AND
24676: IFFALSE 24699
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24678: LD_ADDR_VAR 0 18
24682: PUSH
24683: LD_INT 11
24685: PUSH
24686: LD_INT 30
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_VAR 0 12
24697: ARRAY
24698: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24699: LD_VAR 0 18
24703: NOT
24704: IFFALSE 24724
24706: PUSH
24707: LD_INT 40
24709: PPUSH
24710: LD_VAR 0 16
24714: PPUSH
24715: CALL_OW 321
24719: PUSH
24720: LD_INT 2
24722: EQUAL
24723: AND
24724: IFFALSE 24760
24726: PUSH
24727: LD_INT 7
24729: PUSH
24730: LD_VAR 0 5
24734: IN
24735: IFTRUE 24747
24737: PUSH
24738: LD_INT 28
24740: PUSH
24741: LD_VAR 0 5
24745: IN
24746: OR
24747: IFTRUE 24759
24749: PUSH
24750: LD_INT 45
24752: PUSH
24753: LD_VAR 0 5
24757: IN
24758: OR
24759: AND
24760: IFFALSE 25014
// begin hex := GetHexInfo ( x , y ) ;
24762: LD_ADDR_VAR 0 4
24766: PUSH
24767: LD_VAR 0 10
24771: PPUSH
24772: LD_VAR 0 11
24776: PPUSH
24777: CALL_OW 546
24781: ST_TO_ADDR
// if hex [ 1 ] then
24782: LD_VAR 0 4
24786: PUSH
24787: LD_INT 1
24789: ARRAY
24790: IFFALSE 24794
// exit ;
24792: GO 25201
// height := hex [ 2 ] ;
24794: LD_ADDR_VAR 0 15
24798: PUSH
24799: LD_VAR 0 4
24803: PUSH
24804: LD_INT 2
24806: ARRAY
24807: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24808: LD_ADDR_VAR 0 14
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: LD_INT 3
24821: PUSH
24822: LD_INT 5
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: ST_TO_ADDR
// for i in tmp do
24831: LD_ADDR_VAR 0 8
24835: PUSH
24836: LD_VAR 0 14
24840: PUSH
24841: FOR_IN
24842: IFFALSE 25012
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24844: LD_ADDR_VAR 0 9
24848: PUSH
24849: LD_VAR 0 10
24853: PPUSH
24854: LD_VAR 0 8
24858: PPUSH
24859: LD_INT 5
24861: PPUSH
24862: CALL_OW 272
24866: PUSH
24867: LD_VAR 0 11
24871: PPUSH
24872: LD_VAR 0 8
24876: PPUSH
24877: LD_INT 5
24879: PPUSH
24880: CALL_OW 273
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24889: LD_VAR 0 9
24893: PUSH
24894: LD_INT 1
24896: ARRAY
24897: PPUSH
24898: LD_VAR 0 9
24902: PUSH
24903: LD_INT 2
24905: ARRAY
24906: PPUSH
24907: CALL_OW 488
24911: IFFALSE 25010
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24913: LD_ADDR_VAR 0 4
24917: PUSH
24918: LD_VAR 0 9
24922: PUSH
24923: LD_INT 1
24925: ARRAY
24926: PPUSH
24927: LD_VAR 0 9
24931: PUSH
24932: LD_INT 2
24934: ARRAY
24935: PPUSH
24936: CALL_OW 546
24940: ST_TO_ADDR
// if hex [ 1 ] then
24941: LD_VAR 0 4
24945: PUSH
24946: LD_INT 1
24948: ARRAY
24949: IFFALSE 24953
// continue ;
24951: GO 24841
// h := hex [ 2 ] ;
24953: LD_ADDR_VAR 0 13
24957: PUSH
24958: LD_VAR 0 4
24962: PUSH
24963: LD_INT 2
24965: ARRAY
24966: ST_TO_ADDR
// if h + 7 < height then
24967: LD_VAR 0 13
24971: PUSH
24972: LD_INT 7
24974: PLUS
24975: PUSH
24976: LD_VAR 0 15
24980: LESS
24981: IFFALSE 25010
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24983: LD_ADDR_VAR 0 18
24987: PUSH
24988: LD_INT 7
24990: PUSH
24991: LD_INT 28
24993: PUSH
24994: LD_INT 45
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: LIST
25001: PUSH
25002: LD_VAR 0 12
25006: ARRAY
25007: ST_TO_ADDR
// break ;
25008: GO 25012
// end ; end ; end ;
25010: GO 24841
25012: POP
25013: POP
// end ; if not weapon then
25014: LD_VAR 0 18
25018: NOT
25019: IFFALSE 25079
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25021: LD_ADDR_VAR 0 5
25025: PUSH
25026: LD_VAR 0 5
25030: PUSH
25031: LD_INT 11
25033: PUSH
25034: LD_INT 30
25036: PUSH
25037: LD_INT 49
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: LIST
25044: DIFF
25045: ST_TO_ADDR
// if not list then
25046: LD_VAR 0 5
25050: NOT
25051: IFFALSE 25055
// exit ;
25053: GO 25201
// weapon := list [ rand ( 1 , list ) ] ;
25055: LD_ADDR_VAR 0 18
25059: PUSH
25060: LD_VAR 0 5
25064: PUSH
25065: LD_INT 1
25067: PPUSH
25068: LD_VAR 0 5
25072: PPUSH
25073: CALL_OW 12
25077: ARRAY
25078: ST_TO_ADDR
// end ; if weapon then
25079: LD_VAR 0 18
25083: IFFALSE 25201
// begin tmp := CostOfWeapon ( weapon ) ;
25085: LD_ADDR_VAR 0 14
25089: PUSH
25090: LD_VAR 0 18
25094: PPUSH
25095: CALL_OW 451
25099: ST_TO_ADDR
// j := GetBase ( tower ) ;
25100: LD_ADDR_VAR 0 9
25104: PUSH
25105: LD_VAR 0 1
25109: PPUSH
25110: CALL_OW 274
25114: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25115: LD_VAR 0 9
25119: PPUSH
25120: LD_INT 1
25122: PPUSH
25123: CALL_OW 275
25127: PUSH
25128: LD_VAR 0 14
25132: PUSH
25133: LD_INT 1
25135: ARRAY
25136: GREATEREQUAL
25137: IFFALSE 25163
25139: PUSH
25140: LD_VAR 0 9
25144: PPUSH
25145: LD_INT 2
25147: PPUSH
25148: CALL_OW 275
25152: PUSH
25153: LD_VAR 0 14
25157: PUSH
25158: LD_INT 2
25160: ARRAY
25161: GREATEREQUAL
25162: AND
25163: IFFALSE 25189
25165: PUSH
25166: LD_VAR 0 9
25170: PPUSH
25171: LD_INT 3
25173: PPUSH
25174: CALL_OW 275
25178: PUSH
25179: LD_VAR 0 14
25183: PUSH
25184: LD_INT 3
25186: ARRAY
25187: GREATEREQUAL
25188: AND
25189: IFFALSE 25201
// result := weapon ;
25191: LD_ADDR_VAR 0 3
25195: PUSH
25196: LD_VAR 0 18
25200: ST_TO_ADDR
// end ; end ;
25201: LD_VAR 0 3
25205: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25206: LD_INT 0
25208: PPUSH
25209: PPUSH
// result := true ;
25210: LD_ADDR_VAR 0 3
25214: PUSH
25215: LD_INT 1
25217: ST_TO_ADDR
// if array1 = array2 then
25218: LD_VAR 0 1
25222: PUSH
25223: LD_VAR 0 2
25227: EQUAL
25228: IFFALSE 25288
// begin for i = 1 to array1 do
25230: LD_ADDR_VAR 0 4
25234: PUSH
25235: DOUBLE
25236: LD_INT 1
25238: DEC
25239: ST_TO_ADDR
25240: LD_VAR 0 1
25244: PUSH
25245: FOR_TO
25246: IFFALSE 25284
// if array1 [ i ] <> array2 [ i ] then
25248: LD_VAR 0 1
25252: PUSH
25253: LD_VAR 0 4
25257: ARRAY
25258: PUSH
25259: LD_VAR 0 2
25263: PUSH
25264: LD_VAR 0 4
25268: ARRAY
25269: NONEQUAL
25270: IFFALSE 25282
// begin result := false ;
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_INT 0
25279: ST_TO_ADDR
// break ;
25280: GO 25284
// end ;
25282: GO 25245
25284: POP
25285: POP
// end else
25286: GO 25296
// result := false ;
25288: LD_ADDR_VAR 0 3
25292: PUSH
25293: LD_INT 0
25295: ST_TO_ADDR
// end ;
25296: LD_VAR 0 3
25300: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25301: LD_INT 0
25303: PPUSH
25304: PPUSH
// if not array1 or not array2 then
25305: LD_VAR 0 1
25309: NOT
25310: IFTRUE 25319
25312: PUSH
25313: LD_VAR 0 2
25317: NOT
25318: OR
25319: IFFALSE 25323
// exit ;
25321: GO 25387
// result := true ;
25323: LD_ADDR_VAR 0 3
25327: PUSH
25328: LD_INT 1
25330: ST_TO_ADDR
// for i = 1 to array1 do
25331: LD_ADDR_VAR 0 4
25335: PUSH
25336: DOUBLE
25337: LD_INT 1
25339: DEC
25340: ST_TO_ADDR
25341: LD_VAR 0 1
25345: PUSH
25346: FOR_TO
25347: IFFALSE 25385
// if array1 [ i ] <> array2 [ i ] then
25349: LD_VAR 0 1
25353: PUSH
25354: LD_VAR 0 4
25358: ARRAY
25359: PUSH
25360: LD_VAR 0 2
25364: PUSH
25365: LD_VAR 0 4
25369: ARRAY
25370: NONEQUAL
25371: IFFALSE 25383
// begin result := false ;
25373: LD_ADDR_VAR 0 3
25377: PUSH
25378: LD_INT 0
25380: ST_TO_ADDR
// break ;
25381: GO 25385
// end ;
25383: GO 25346
25385: POP
25386: POP
// end ;
25387: LD_VAR 0 3
25391: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25392: LD_INT 0
25394: PPUSH
25395: PPUSH
25396: PPUSH
// pom := GetBase ( fac ) ;
25397: LD_ADDR_VAR 0 5
25401: PUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 274
25411: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25412: LD_ADDR_VAR 0 4
25416: PUSH
25417: LD_VAR 0 2
25421: PUSH
25422: LD_INT 1
25424: ARRAY
25425: PPUSH
25426: LD_VAR 0 2
25430: PUSH
25431: LD_INT 2
25433: ARRAY
25434: PPUSH
25435: LD_VAR 0 2
25439: PUSH
25440: LD_INT 3
25442: ARRAY
25443: PPUSH
25444: LD_VAR 0 2
25448: PUSH
25449: LD_INT 4
25451: ARRAY
25452: PPUSH
25453: CALL_OW 449
25457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25458: LD_ADDR_VAR 0 3
25462: PUSH
25463: LD_VAR 0 5
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 275
25475: PUSH
25476: LD_VAR 0 4
25480: PUSH
25481: LD_INT 1
25483: ARRAY
25484: GREATEREQUAL
25485: IFFALSE 25511
25487: PUSH
25488: LD_VAR 0 5
25492: PPUSH
25493: LD_INT 2
25495: PPUSH
25496: CALL_OW 275
25500: PUSH
25501: LD_VAR 0 4
25505: PUSH
25506: LD_INT 2
25508: ARRAY
25509: GREATEREQUAL
25510: AND
25511: IFFALSE 25537
25513: PUSH
25514: LD_VAR 0 5
25518: PPUSH
25519: LD_INT 3
25521: PPUSH
25522: CALL_OW 275
25526: PUSH
25527: LD_VAR 0 4
25531: PUSH
25532: LD_INT 3
25534: ARRAY
25535: GREATEREQUAL
25536: AND
25537: ST_TO_ADDR
// end ;
25538: LD_VAR 0 3
25542: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25543: LD_INT 0
25545: PPUSH
25546: PPUSH
25547: PPUSH
25548: PPUSH
// pom := GetBase ( building ) ;
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_VAR 0 1
25558: PPUSH
25559: CALL_OW 274
25563: ST_TO_ADDR
// if not pom then
25564: LD_VAR 0 3
25568: NOT
25569: IFFALSE 25573
// exit ;
25571: GO 25747
// btype := GetBType ( building ) ;
25573: LD_ADDR_VAR 0 5
25577: PUSH
25578: LD_VAR 0 1
25582: PPUSH
25583: CALL_OW 266
25587: ST_TO_ADDR
// if btype = b_armoury then
25588: LD_VAR 0 5
25592: PUSH
25593: LD_INT 4
25595: EQUAL
25596: IFFALSE 25606
// btype := b_barracks ;
25598: LD_ADDR_VAR 0 5
25602: PUSH
25603: LD_INT 5
25605: ST_TO_ADDR
// if btype = b_depot then
25606: LD_VAR 0 5
25610: PUSH
25611: LD_INT 0
25613: EQUAL
25614: IFFALSE 25624
// btype := b_warehouse ;
25616: LD_ADDR_VAR 0 5
25620: PUSH
25621: LD_INT 1
25623: ST_TO_ADDR
// if btype = b_workshop then
25624: LD_VAR 0 5
25628: PUSH
25629: LD_INT 2
25631: EQUAL
25632: IFFALSE 25642
// btype := b_factory ;
25634: LD_ADDR_VAR 0 5
25638: PUSH
25639: LD_INT 3
25641: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25642: LD_ADDR_VAR 0 4
25646: PUSH
25647: LD_VAR 0 5
25651: PPUSH
25652: LD_VAR 0 1
25656: PPUSH
25657: CALL_OW 248
25661: PPUSH
25662: CALL_OW 450
25666: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25667: LD_ADDR_VAR 0 2
25671: PUSH
25672: LD_VAR 0 3
25676: PPUSH
25677: LD_INT 1
25679: PPUSH
25680: CALL_OW 275
25684: PUSH
25685: LD_VAR 0 4
25689: PUSH
25690: LD_INT 1
25692: ARRAY
25693: GREATEREQUAL
25694: IFFALSE 25720
25696: PUSH
25697: LD_VAR 0 3
25701: PPUSH
25702: LD_INT 2
25704: PPUSH
25705: CALL_OW 275
25709: PUSH
25710: LD_VAR 0 4
25714: PUSH
25715: LD_INT 2
25717: ARRAY
25718: GREATEREQUAL
25719: AND
25720: IFFALSE 25746
25722: PUSH
25723: LD_VAR 0 3
25727: PPUSH
25728: LD_INT 3
25730: PPUSH
25731: CALL_OW 275
25735: PUSH
25736: LD_VAR 0 4
25740: PUSH
25741: LD_INT 3
25743: ARRAY
25744: GREATEREQUAL
25745: AND
25746: ST_TO_ADDR
// end ;
25747: LD_VAR 0 2
25751: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
// pom := GetBase ( building ) ;
25757: LD_ADDR_VAR 0 4
25761: PUSH
25762: LD_VAR 0 1
25766: PPUSH
25767: CALL_OW 274
25771: ST_TO_ADDR
// if not pom then
25772: LD_VAR 0 4
25776: NOT
25777: IFFALSE 25781
// exit ;
25779: GO 25886
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25781: LD_ADDR_VAR 0 5
25785: PUSH
25786: LD_VAR 0 2
25790: PPUSH
25791: LD_VAR 0 1
25795: PPUSH
25796: CALL_OW 248
25800: PPUSH
25801: CALL_OW 450
25805: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_VAR 0 4
25815: PPUSH
25816: LD_INT 1
25818: PPUSH
25819: CALL_OW 275
25823: PUSH
25824: LD_VAR 0 5
25828: PUSH
25829: LD_INT 1
25831: ARRAY
25832: GREATEREQUAL
25833: IFFALSE 25859
25835: PUSH
25836: LD_VAR 0 4
25840: PPUSH
25841: LD_INT 2
25843: PPUSH
25844: CALL_OW 275
25848: PUSH
25849: LD_VAR 0 5
25853: PUSH
25854: LD_INT 2
25856: ARRAY
25857: GREATEREQUAL
25858: AND
25859: IFFALSE 25885
25861: PUSH
25862: LD_VAR 0 4
25866: PPUSH
25867: LD_INT 3
25869: PPUSH
25870: CALL_OW 275
25874: PUSH
25875: LD_VAR 0 5
25879: PUSH
25880: LD_INT 3
25882: ARRAY
25883: GREATEREQUAL
25884: AND
25885: ST_TO_ADDR
// end ;
25886: LD_VAR 0 3
25890: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
25903: PPUSH
// result := false ;
25904: LD_ADDR_VAR 0 8
25908: PUSH
25909: LD_INT 0
25911: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25912: LD_VAR 0 5
25916: NOT
25917: IFTRUE 25926
25919: PUSH
25920: LD_VAR 0 1
25924: NOT
25925: OR
25926: IFTRUE 25935
25928: PUSH
25929: LD_VAR 0 2
25933: NOT
25934: OR
25935: IFTRUE 25944
25937: PUSH
25938: LD_VAR 0 3
25942: NOT
25943: OR
25944: IFFALSE 25948
// exit ;
25946: GO 26774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25948: LD_ADDR_VAR 0 14
25952: PUSH
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_VAR 0 3
25967: PPUSH
25968: LD_VAR 0 4
25972: PPUSH
25973: LD_VAR 0 5
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: PPUSH
25982: CALL_OW 248
25986: PPUSH
25987: LD_INT 0
25989: PPUSH
25990: CALL 28055 0 6
25994: ST_TO_ADDR
// if not hexes then
25995: LD_VAR 0 14
25999: NOT
26000: IFFALSE 26004
// exit ;
26002: GO 26774
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26004: LD_ADDR_VAR 0 17
26008: PUSH
26009: LD_VAR 0 5
26013: PPUSH
26014: LD_INT 22
26016: PUSH
26017: LD_VAR 0 13
26021: PPUSH
26022: CALL_OW 255
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 30
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 30
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: LIST
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PPUSH
26063: CALL_OW 72
26067: ST_TO_ADDR
// for i = 1 to hexes do
26068: LD_ADDR_VAR 0 9
26072: PUSH
26073: DOUBLE
26074: LD_INT 1
26076: DEC
26077: ST_TO_ADDR
26078: LD_VAR 0 14
26082: PUSH
26083: FOR_TO
26084: IFFALSE 26772
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26086: LD_ADDR_VAR 0 13
26090: PUSH
26091: LD_VAR 0 14
26095: PUSH
26096: LD_VAR 0 9
26100: ARRAY
26101: PUSH
26102: LD_INT 1
26104: ARRAY
26105: PPUSH
26106: LD_VAR 0 14
26110: PUSH
26111: LD_VAR 0 9
26115: ARRAY
26116: PUSH
26117: LD_INT 2
26119: ARRAY
26120: PPUSH
26121: CALL_OW 428
26125: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26126: LD_VAR 0 14
26130: PUSH
26131: LD_VAR 0 9
26135: ARRAY
26136: PUSH
26137: LD_INT 1
26139: ARRAY
26140: PPUSH
26141: LD_VAR 0 14
26145: PUSH
26146: LD_VAR 0 9
26150: ARRAY
26151: PUSH
26152: LD_INT 2
26154: ARRAY
26155: PPUSH
26156: CALL_OW 351
26160: IFTRUE 26199
26162: PUSH
26163: LD_VAR 0 14
26167: PUSH
26168: LD_VAR 0 9
26172: ARRAY
26173: PUSH
26174: LD_INT 1
26176: ARRAY
26177: PPUSH
26178: LD_VAR 0 14
26182: PUSH
26183: LD_VAR 0 9
26187: ARRAY
26188: PUSH
26189: LD_INT 2
26191: ARRAY
26192: PPUSH
26193: CALL_OW 488
26197: NOT
26198: OR
26199: IFTRUE 26216
26201: PUSH
26202: LD_VAR 0 13
26206: PPUSH
26207: CALL_OW 247
26211: PUSH
26212: LD_INT 3
26214: EQUAL
26215: OR
26216: IFFALSE 26222
// exit ;
26218: POP
26219: POP
26220: GO 26774
// if not tmp then
26222: LD_VAR 0 13
26226: NOT
26227: IFFALSE 26231
// continue ;
26229: GO 26083
// result := true ;
26231: LD_ADDR_VAR 0 8
26235: PUSH
26236: LD_INT 1
26238: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26239: LD_VAR 0 6
26243: IFFALSE 26260
26245: PUSH
26246: LD_VAR 0 13
26250: PPUSH
26251: CALL_OW 247
26255: PUSH
26256: LD_INT 2
26258: EQUAL
26259: AND
26260: IFFALSE 26277
26262: PUSH
26263: LD_VAR 0 13
26267: PPUSH
26268: CALL_OW 263
26272: PUSH
26273: LD_INT 1
26275: EQUAL
26276: AND
26277: IFFALSE 26441
// begin if IsDrivenBy ( tmp ) then
26279: LD_VAR 0 13
26283: PPUSH
26284: CALL_OW 311
26288: IFFALSE 26292
// continue ;
26290: GO 26083
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26292: LD_VAR 0 6
26296: PPUSH
26297: LD_INT 3
26299: PUSH
26300: LD_INT 60
26302: PUSH
26303: EMPTY
26304: LIST
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 3
26312: PUSH
26313: LD_INT 55
26315: PUSH
26316: EMPTY
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PPUSH
26327: CALL_OW 72
26331: IFFALSE 26439
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26333: LD_ADDR_VAR 0 18
26337: PUSH
26338: LD_VAR 0 6
26342: PPUSH
26343: LD_INT 3
26345: PUSH
26346: LD_INT 60
26348: PUSH
26349: EMPTY
26350: LIST
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 3
26358: PUSH
26359: LD_INT 55
26361: PUSH
26362: EMPTY
26363: LIST
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PPUSH
26373: CALL_OW 72
26377: PUSH
26378: LD_INT 1
26380: ARRAY
26381: ST_TO_ADDR
// if IsInUnit ( driver ) then
26382: LD_VAR 0 18
26386: PPUSH
26387: CALL_OW 310
26391: IFFALSE 26402
// ComExit ( driver ) ;
26393: LD_VAR 0 18
26397: PPUSH
26398: CALL 52055 0 1
// AddComEnterUnit ( driver , tmp ) ;
26402: LD_VAR 0 18
26406: PPUSH
26407: LD_VAR 0 13
26411: PPUSH
26412: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26416: LD_VAR 0 18
26420: PPUSH
26421: LD_VAR 0 7
26425: PPUSH
26426: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26430: LD_VAR 0 18
26434: PPUSH
26435: CALL_OW 181
// end ; continue ;
26439: GO 26083
// end ; if not cleaners or not tmp in cleaners then
26441: LD_VAR 0 6
26445: NOT
26446: IFTRUE 26461
26448: PUSH
26449: LD_VAR 0 13
26453: PUSH
26454: LD_VAR 0 6
26458: IN
26459: NOT
26460: OR
26461: IFFALSE 26770
// begin if dep then
26463: LD_VAR 0 17
26467: IFFALSE 26603
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26469: LD_ADDR_VAR 0 16
26473: PUSH
26474: LD_VAR 0 17
26478: PUSH
26479: LD_INT 1
26481: ARRAY
26482: PPUSH
26483: CALL_OW 250
26487: PPUSH
26488: LD_VAR 0 17
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PPUSH
26497: CALL_OW 254
26501: PPUSH
26502: LD_INT 5
26504: PPUSH
26505: CALL_OW 272
26509: PUSH
26510: LD_VAR 0 17
26514: PUSH
26515: LD_INT 1
26517: ARRAY
26518: PPUSH
26519: CALL_OW 251
26523: PPUSH
26524: LD_VAR 0 17
26528: PUSH
26529: LD_INT 1
26531: ARRAY
26532: PPUSH
26533: CALL_OW 254
26537: PPUSH
26538: LD_INT 5
26540: PPUSH
26541: CALL_OW 273
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26550: LD_VAR 0 16
26554: PUSH
26555: LD_INT 1
26557: ARRAY
26558: PPUSH
26559: LD_VAR 0 16
26563: PUSH
26564: LD_INT 2
26566: ARRAY
26567: PPUSH
26568: CALL_OW 488
26572: IFFALSE 26603
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26574: LD_VAR 0 13
26578: PPUSH
26579: LD_VAR 0 16
26583: PUSH
26584: LD_INT 1
26586: ARRAY
26587: PPUSH
26588: LD_VAR 0 16
26592: PUSH
26593: LD_INT 2
26595: ARRAY
26596: PPUSH
26597: CALL_OW 111
// continue ;
26601: GO 26083
// end ; end ; r := GetDir ( tmp ) ;
26603: LD_ADDR_VAR 0 15
26607: PUSH
26608: LD_VAR 0 13
26612: PPUSH
26613: CALL_OW 254
26617: ST_TO_ADDR
// if r = 5 then
26618: LD_VAR 0 15
26622: PUSH
26623: LD_INT 5
26625: EQUAL
26626: IFFALSE 26636
// r := 0 ;
26628: LD_ADDR_VAR 0 15
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
// for j = r to 5 do
26636: LD_ADDR_VAR 0 10
26640: PUSH
26641: DOUBLE
26642: LD_VAR 0 15
26646: DEC
26647: ST_TO_ADDR
26648: LD_INT 5
26650: PUSH
26651: FOR_TO
26652: IFFALSE 26768
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26654: LD_ADDR_VAR 0 11
26658: PUSH
26659: LD_VAR 0 13
26663: PPUSH
26664: CALL_OW 250
26668: PPUSH
26669: LD_VAR 0 10
26673: PPUSH
26674: LD_INT 2
26676: PPUSH
26677: CALL_OW 272
26681: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26682: LD_ADDR_VAR 0 12
26686: PUSH
26687: LD_VAR 0 13
26691: PPUSH
26692: CALL_OW 251
26696: PPUSH
26697: LD_VAR 0 10
26701: PPUSH
26702: LD_INT 2
26704: PPUSH
26705: CALL_OW 273
26709: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26710: LD_VAR 0 11
26714: PPUSH
26715: LD_VAR 0 12
26719: PPUSH
26720: CALL_OW 488
26724: IFFALSE 26743
26726: PUSH
26727: LD_VAR 0 11
26731: PPUSH
26732: LD_VAR 0 12
26736: PPUSH
26737: CALL_OW 428
26741: NOT
26742: AND
26743: IFFALSE 26766
// begin ComMoveXY ( tmp , _x , _y ) ;
26745: LD_VAR 0 13
26749: PPUSH
26750: LD_VAR 0 11
26754: PPUSH
26755: LD_VAR 0 12
26759: PPUSH
26760: CALL_OW 111
// break ;
26764: GO 26768
// end ; end ;
26766: GO 26651
26768: POP
26769: POP
// end ; end ;
26770: GO 26083
26772: POP
26773: POP
// end ;
26774: LD_VAR 0 8
26778: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26779: LD_INT 0
26781: PPUSH
// result := true ;
26782: LD_ADDR_VAR 0 3
26786: PUSH
26787: LD_INT 1
26789: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26790: LD_VAR 0 2
26794: PUSH
26795: LD_INT 24
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26809
26801: LD_INT 33
26803: DOUBLE
26804: EQUAL
26805: IFTRUE 26809
26807: GO 26834
26809: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26810: LD_ADDR_VAR 0 3
26814: PUSH
26815: LD_INT 32
26817: PPUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 321
26827: PUSH
26828: LD_INT 2
26830: EQUAL
26831: ST_TO_ADDR
26832: GO 27150
26834: LD_INT 20
26836: DOUBLE
26837: EQUAL
26838: IFTRUE 26842
26840: GO 26867
26842: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26843: LD_ADDR_VAR 0 3
26847: PUSH
26848: LD_INT 6
26850: PPUSH
26851: LD_VAR 0 1
26855: PPUSH
26856: CALL_OW 321
26860: PUSH
26861: LD_INT 2
26863: EQUAL
26864: ST_TO_ADDR
26865: GO 27150
26867: LD_INT 22
26869: DOUBLE
26870: EQUAL
26871: IFTRUE 26881
26873: LD_INT 36
26875: DOUBLE
26876: EQUAL
26877: IFTRUE 26881
26879: GO 26906
26881: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26882: LD_ADDR_VAR 0 3
26886: PUSH
26887: LD_INT 15
26889: PPUSH
26890: LD_VAR 0 1
26894: PPUSH
26895: CALL_OW 321
26899: PUSH
26900: LD_INT 2
26902: EQUAL
26903: ST_TO_ADDR
26904: GO 27150
26906: LD_INT 30
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 26939
26914: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26915: LD_ADDR_VAR 0 3
26919: PUSH
26920: LD_INT 20
26922: PPUSH
26923: LD_VAR 0 1
26927: PPUSH
26928: CALL_OW 321
26932: PUSH
26933: LD_INT 2
26935: EQUAL
26936: ST_TO_ADDR
26937: GO 27150
26939: LD_INT 28
26941: DOUBLE
26942: EQUAL
26943: IFTRUE 26953
26945: LD_INT 21
26947: DOUBLE
26948: EQUAL
26949: IFTRUE 26953
26951: GO 26978
26953: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26954: LD_ADDR_VAR 0 3
26958: PUSH
26959: LD_INT 21
26961: PPUSH
26962: LD_VAR 0 1
26966: PPUSH
26967: CALL_OW 321
26971: PUSH
26972: LD_INT 2
26974: EQUAL
26975: ST_TO_ADDR
26976: GO 27150
26978: LD_INT 16
26980: DOUBLE
26981: EQUAL
26982: IFTRUE 26986
26984: GO 27011
26986: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26987: LD_ADDR_VAR 0 3
26991: PUSH
26992: LD_INT 84
26994: PPUSH
26995: LD_VAR 0 1
26999: PPUSH
27000: CALL_OW 321
27004: PUSH
27005: LD_INT 2
27007: EQUAL
27008: ST_TO_ADDR
27009: GO 27150
27011: LD_INT 19
27013: DOUBLE
27014: EQUAL
27015: IFTRUE 27025
27017: LD_INT 23
27019: DOUBLE
27020: EQUAL
27021: IFTRUE 27025
27023: GO 27050
27025: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27026: LD_ADDR_VAR 0 3
27030: PUSH
27031: LD_INT 83
27033: PPUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 321
27043: PUSH
27044: LD_INT 2
27046: EQUAL
27047: ST_TO_ADDR
27048: GO 27150
27050: LD_INT 17
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27083
27058: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27059: LD_ADDR_VAR 0 3
27063: PUSH
27064: LD_INT 39
27066: PPUSH
27067: LD_VAR 0 1
27071: PPUSH
27072: CALL_OW 321
27076: PUSH
27077: LD_INT 2
27079: EQUAL
27080: ST_TO_ADDR
27081: GO 27150
27083: LD_INT 18
27085: DOUBLE
27086: EQUAL
27087: IFTRUE 27091
27089: GO 27116
27091: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27092: LD_ADDR_VAR 0 3
27096: PUSH
27097: LD_INT 40
27099: PPUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 321
27109: PUSH
27110: LD_INT 2
27112: EQUAL
27113: ST_TO_ADDR
27114: GO 27150
27116: LD_INT 27
27118: DOUBLE
27119: EQUAL
27120: IFTRUE 27124
27122: GO 27149
27124: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27125: LD_ADDR_VAR 0 3
27129: PUSH
27130: LD_INT 35
27132: PPUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: ST_TO_ADDR
27147: GO 27150
27149: POP
// end ;
27150: LD_VAR 0 3
27154: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27155: LD_INT 0
27157: PPUSH
27158: PPUSH
27159: PPUSH
27160: PPUSH
27161: PPUSH
27162: PPUSH
27163: PPUSH
27164: PPUSH
27165: PPUSH
27166: PPUSH
27167: PPUSH
// result := false ;
27168: LD_ADDR_VAR 0 6
27172: PUSH
27173: LD_INT 0
27175: ST_TO_ADDR
// if btype = b_depot then
27176: LD_VAR 0 2
27180: PUSH
27181: LD_INT 0
27183: EQUAL
27184: IFFALSE 27196
// begin result := true ;
27186: LD_ADDR_VAR 0 6
27190: PUSH
27191: LD_INT 1
27193: ST_TO_ADDR
// exit ;
27194: GO 28050
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27196: LD_VAR 0 1
27200: NOT
27201: IFTRUE 27226
27203: PUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 266
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: IN
27224: NOT
27225: OR
27226: IFTRUE 27235
27228: PUSH
27229: LD_VAR 0 2
27233: NOT
27234: OR
27235: IFTRUE 27271
27237: PUSH
27238: LD_VAR 0 5
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: LD_INT 3
27254: PUSH
27255: LD_INT 4
27257: PUSH
27258: LD_INT 5
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: IN
27269: NOT
27270: OR
27271: IFTRUE 27290
27273: PUSH
27274: LD_VAR 0 3
27278: PPUSH
27279: LD_VAR 0 4
27283: PPUSH
27284: CALL_OW 488
27288: NOT
27289: OR
27290: IFFALSE 27294
// exit ;
27292: GO 28050
// side := GetSide ( depot ) ;
27294: LD_ADDR_VAR 0 9
27298: PUSH
27299: LD_VAR 0 1
27303: PPUSH
27304: CALL_OW 255
27308: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27309: LD_VAR 0 9
27313: PPUSH
27314: LD_VAR 0 2
27318: PPUSH
27319: CALL 26779 0 2
27323: NOT
27324: IFFALSE 27328
// exit ;
27326: GO 28050
// pom := GetBase ( depot ) ;
27328: LD_ADDR_VAR 0 10
27332: PUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 274
27342: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27343: LD_ADDR_VAR 0 11
27347: PUSH
27348: LD_VAR 0 2
27352: PPUSH
27353: LD_VAR 0 1
27357: PPUSH
27358: CALL_OW 248
27362: PPUSH
27363: CALL_OW 450
27367: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27368: LD_VAR 0 10
27372: PPUSH
27373: LD_INT 1
27375: PPUSH
27376: CALL_OW 275
27380: PUSH
27381: LD_VAR 0 11
27385: PUSH
27386: LD_INT 1
27388: ARRAY
27389: GREATEREQUAL
27390: IFFALSE 27416
27392: PUSH
27393: LD_VAR 0 10
27397: PPUSH
27398: LD_INT 2
27400: PPUSH
27401: CALL_OW 275
27405: PUSH
27406: LD_VAR 0 11
27410: PUSH
27411: LD_INT 2
27413: ARRAY
27414: GREATEREQUAL
27415: AND
27416: IFFALSE 27442
27418: PUSH
27419: LD_VAR 0 10
27423: PPUSH
27424: LD_INT 3
27426: PPUSH
27427: CALL_OW 275
27431: PUSH
27432: LD_VAR 0 11
27436: PUSH
27437: LD_INT 3
27439: ARRAY
27440: GREATEREQUAL
27441: AND
27442: NOT
27443: IFFALSE 27447
// exit ;
27445: GO 28050
// if GetBType ( depot ) = b_depot then
27447: LD_VAR 0 1
27451: PPUSH
27452: CALL_OW 266
27456: PUSH
27457: LD_INT 0
27459: EQUAL
27460: IFFALSE 27472
// dist := 28 else
27462: LD_ADDR_VAR 0 14
27466: PUSH
27467: LD_INT 28
27469: ST_TO_ADDR
27470: GO 27480
// dist := 36 ;
27472: LD_ADDR_VAR 0 14
27476: PUSH
27477: LD_INT 36
27479: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27480: LD_VAR 0 1
27484: PPUSH
27485: LD_VAR 0 3
27489: PPUSH
27490: LD_VAR 0 4
27494: PPUSH
27495: CALL_OW 297
27499: PUSH
27500: LD_VAR 0 14
27504: GREATER
27505: IFFALSE 27509
// exit ;
27507: GO 28050
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27509: LD_ADDR_VAR 0 12
27513: PUSH
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_VAR 0 3
27523: PPUSH
27524: LD_VAR 0 4
27528: PPUSH
27529: LD_VAR 0 5
27533: PPUSH
27534: LD_VAR 0 1
27538: PPUSH
27539: CALL_OW 248
27543: PPUSH
27544: LD_INT 0
27546: PPUSH
27547: CALL 28055 0 6
27551: ST_TO_ADDR
// if not hexes then
27552: LD_VAR 0 12
27556: NOT
27557: IFFALSE 27561
// exit ;
27559: GO 28050
// hex := GetHexInfo ( x , y ) ;
27561: LD_ADDR_VAR 0 15
27565: PUSH
27566: LD_VAR 0 3
27570: PPUSH
27571: LD_VAR 0 4
27575: PPUSH
27576: CALL_OW 546
27580: ST_TO_ADDR
// if hex [ 1 ] then
27581: LD_VAR 0 15
27585: PUSH
27586: LD_INT 1
27588: ARRAY
27589: IFFALSE 27593
// exit ;
27591: GO 28050
// height := hex [ 2 ] ;
27593: LD_ADDR_VAR 0 13
27597: PUSH
27598: LD_VAR 0 15
27602: PUSH
27603: LD_INT 2
27605: ARRAY
27606: ST_TO_ADDR
// for i = 1 to hexes do
27607: LD_ADDR_VAR 0 7
27611: PUSH
27612: DOUBLE
27613: LD_INT 1
27615: DEC
27616: ST_TO_ADDR
27617: LD_VAR 0 12
27621: PUSH
27622: FOR_TO
27623: IFFALSE 27967
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27625: LD_VAR 0 12
27629: PUSH
27630: LD_VAR 0 7
27634: ARRAY
27635: PUSH
27636: LD_INT 1
27638: ARRAY
27639: PPUSH
27640: LD_VAR 0 12
27644: PUSH
27645: LD_VAR 0 7
27649: ARRAY
27650: PUSH
27651: LD_INT 2
27653: ARRAY
27654: PPUSH
27655: CALL_OW 488
27659: NOT
27660: IFTRUE 27702
27662: PUSH
27663: LD_VAR 0 12
27667: PUSH
27668: LD_VAR 0 7
27672: ARRAY
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: PPUSH
27678: LD_VAR 0 12
27682: PUSH
27683: LD_VAR 0 7
27687: ARRAY
27688: PUSH
27689: LD_INT 2
27691: ARRAY
27692: PPUSH
27693: CALL_OW 428
27697: PUSH
27698: LD_INT 0
27700: GREATER
27701: OR
27702: IFTRUE 27740
27704: PUSH
27705: LD_VAR 0 12
27709: PUSH
27710: LD_VAR 0 7
27714: ARRAY
27715: PUSH
27716: LD_INT 1
27718: ARRAY
27719: PPUSH
27720: LD_VAR 0 12
27724: PUSH
27725: LD_VAR 0 7
27729: ARRAY
27730: PUSH
27731: LD_INT 2
27733: ARRAY
27734: PPUSH
27735: CALL_OW 351
27739: OR
27740: IFFALSE 27746
// exit ;
27742: POP
27743: POP
27744: GO 28050
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27746: LD_ADDR_VAR 0 8
27750: PUSH
27751: LD_VAR 0 12
27755: PUSH
27756: LD_VAR 0 7
27760: ARRAY
27761: PUSH
27762: LD_INT 1
27764: ARRAY
27765: PPUSH
27766: LD_VAR 0 12
27770: PUSH
27771: LD_VAR 0 7
27775: ARRAY
27776: PUSH
27777: LD_INT 2
27779: ARRAY
27780: PPUSH
27781: CALL_OW 546
27785: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27786: LD_VAR 0 8
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: IFTRUE 27816
27796: PUSH
27797: LD_VAR 0 8
27801: PUSH
27802: LD_INT 2
27804: ARRAY
27805: PUSH
27806: LD_VAR 0 13
27810: PUSH
27811: LD_INT 2
27813: PLUS
27814: GREATER
27815: OR
27816: IFTRUE 27838
27818: PUSH
27819: LD_VAR 0 8
27823: PUSH
27824: LD_INT 2
27826: ARRAY
27827: PUSH
27828: LD_VAR 0 13
27832: PUSH
27833: LD_INT 2
27835: MINUS
27836: LESS
27837: OR
27838: IFTRUE 27906
27840: PUSH
27841: LD_VAR 0 8
27845: PUSH
27846: LD_INT 3
27848: ARRAY
27849: PUSH
27850: LD_INT 0
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: LD_INT 9
27858: PUSH
27859: LD_INT 10
27861: PUSH
27862: LD_INT 11
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: LD_INT 13
27870: PUSH
27871: LD_INT 16
27873: PUSH
27874: LD_INT 17
27876: PUSH
27877: LD_INT 18
27879: PUSH
27880: LD_INT 19
27882: PUSH
27883: LD_INT 20
27885: PUSH
27886: LD_INT 21
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: IN
27904: NOT
27905: OR
27906: IFTRUE 27919
27908: PUSH
27909: LD_VAR 0 8
27913: PUSH
27914: LD_INT 5
27916: ARRAY
27917: NOT
27918: OR
27919: IFTRUE 27959
27921: PUSH
27922: LD_VAR 0 8
27926: PUSH
27927: LD_INT 6
27929: ARRAY
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 7
27939: PUSH
27940: LD_INT 9
27942: PUSH
27943: LD_INT 10
27945: PUSH
27946: LD_INT 11
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: IN
27957: NOT
27958: OR
27959: IFFALSE 27965
// exit ;
27961: POP
27962: POP
27963: GO 28050
// end ;
27965: GO 27622
27967: POP
27968: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27969: LD_VAR 0 9
27973: PPUSH
27974: LD_VAR 0 3
27978: PPUSH
27979: LD_VAR 0 4
27983: PPUSH
27984: LD_INT 20
27986: PPUSH
27987: CALL 19869 0 4
27991: PUSH
27992: LD_INT 4
27994: ARRAY
27995: IFFALSE 27999
// exit ;
27997: GO 28050
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27999: LD_VAR 0 2
28003: PUSH
28004: LD_INT 29
28006: PUSH
28007: LD_INT 30
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: IN
28014: IFFALSE 28038
28016: PUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: LD_VAR 0 4
28026: PPUSH
28027: LD_VAR 0 9
28031: PPUSH
28032: CALL_OW 440
28036: NOT
28037: AND
28038: IFFALSE 28042
// exit ;
28040: GO 28050
// result := true ;
28042: LD_ADDR_VAR 0 6
28046: PUSH
28047: LD_INT 1
28049: ST_TO_ADDR
// end ;
28050: LD_VAR 0 6
28054: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28055: LD_INT 0
28057: PPUSH
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
28062: PPUSH
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
28079: PPUSH
28080: PPUSH
28081: PPUSH
28082: PPUSH
28083: PPUSH
28084: PPUSH
28085: PPUSH
28086: PPUSH
28087: PPUSH
28088: PPUSH
28089: PPUSH
28090: PPUSH
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
28108: PPUSH
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
28113: PPUSH
28114: PPUSH
// result = [ ] ;
28115: LD_ADDR_VAR 0 7
28119: PUSH
28120: EMPTY
28121: ST_TO_ADDR
// temp_list = [ ] ;
28122: LD_ADDR_VAR 0 9
28126: PUSH
28127: EMPTY
28128: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28129: LD_VAR 0 4
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: LD_INT 3
28145: PUSH
28146: LD_INT 4
28148: PUSH
28149: LD_INT 5
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: IN
28160: NOT
28161: IFTRUE 28204
28163: PUSH
28164: LD_VAR 0 1
28168: PUSH
28169: LD_INT 0
28171: PUSH
28172: LD_INT 1
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: IN
28179: IFFALSE 28203
28181: PUSH
28182: LD_VAR 0 5
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: IN
28201: NOT
28202: AND
28203: OR
28204: IFFALSE 28208
// exit ;
28206: GO 46607
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28208: LD_VAR 0 1
28212: PUSH
28213: LD_INT 6
28215: PUSH
28216: LD_INT 7
28218: PUSH
28219: LD_INT 8
28221: PUSH
28222: LD_INT 13
28224: PUSH
28225: LD_INT 12
28227: PUSH
28228: LD_INT 15
28230: PUSH
28231: LD_INT 11
28233: PUSH
28234: LD_INT 14
28236: PUSH
28237: LD_INT 10
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: IN
28251: IFFALSE 28261
// btype = b_lab ;
28253: LD_ADDR_VAR 0 1
28257: PUSH
28258: LD_INT 6
28260: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28261: LD_VAR 0 6
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: IN
28280: NOT
28281: IFTRUE 28349
28283: PUSH
28284: LD_VAR 0 1
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 3
28300: PUSH
28301: LD_INT 6
28303: PUSH
28304: LD_INT 36
28306: PUSH
28307: LD_INT 4
28309: PUSH
28310: LD_INT 5
28312: PUSH
28313: LD_INT 31
28315: PUSH
28316: LD_INT 32
28318: PUSH
28319: LD_INT 33
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: IN
28335: NOT
28336: IFFALSE 28348
28338: PUSH
28339: LD_VAR 0 6
28343: PUSH
28344: LD_INT 1
28346: EQUAL
28347: AND
28348: OR
28349: IFTRUE 28381
28351: PUSH
28352: LD_VAR 0 1
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: IN
28367: NOT
28368: IFFALSE 28380
28370: PUSH
28371: LD_VAR 0 6
28375: PUSH
28376: LD_INT 2
28378: EQUAL
28379: AND
28380: OR
28381: IFFALSE 28391
// mode = 0 ;
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_INT 0
28390: ST_TO_ADDR
// case mode of 0 :
28391: LD_VAR 0 6
28395: PUSH
28396: LD_INT 0
28398: DOUBLE
28399: EQUAL
28400: IFTRUE 28404
28402: GO 39857
28404: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28405: LD_ADDR_VAR 0 11
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 3
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 1
28571: NEG
28572: PUSH
28573: LD_INT 2
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28598: LD_ADDR_VAR 0 12
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 0
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: NEG
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: LD_INT 1
28682: NEG
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: NEG
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 3
28755: NEG
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 3
28766: NEG
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28794: LD_ADDR_VAR 0 13
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 2
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 2
28917: NEG
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: LD_INT 2
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 2
28941: NEG
28942: PUSH
28943: LD_INT 3
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 3
28953: NEG
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 3
28965: NEG
28966: PUSH
28967: LD_INT 3
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28993: LD_ADDR_VAR 0 14
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 1
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: LD_INT 2
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: LD_INT 2
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 3
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 3
29154: NEG
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 2
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29189: LD_ADDR_VAR 0 15
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 1
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 1
29247: NEG
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: NEG
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: LD_INT 1
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 2
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: LD_INT 0
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29382: LD_ADDR_VAR 0 16
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 2
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: LD_INT 2
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: LD_INT 2
29521: NEG
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 3
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 3
29539: PUSH
29540: LD_INT 3
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: LD_INT 3
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29575: LD_ADDR_VAR 0 17
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 2
29751: NEG
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: NEG
29775: PUSH
29776: LD_INT 2
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29805: LD_ADDR_VAR 0 18
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 0
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 2
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 1
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: LD_INT 2
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 2
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: NEG
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30035: LD_ADDR_VAR 0 19
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 2
30120: NEG
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: LD_INT 2
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 0
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 2
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 2
30211: NEG
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30265: LD_ADDR_VAR 0 20
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: LD_INT 1
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 1
30346: NEG
30347: PUSH
30348: LD_INT 2
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: PUSH
30370: LD_INT 1
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 2
30380: PUSH
30381: LD_INT 0
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 2
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 1
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: LD_INT 2
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 2
30441: NEG
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: NEG
30465: PUSH
30466: LD_INT 2
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30495: LD_ADDR_VAR 0 21
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 0
30650: PUSH
30651: LD_INT 2
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: NEG
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30725: LD_ADDR_VAR 0 22
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: LD_INT 0
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: LD_INT 1
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 2
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: LD_INT 0
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: PUSH
30861: LD_INT 2
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 2
30901: NEG
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30955: LD_ADDR_VAR 0 23
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 2
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 2
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 2
31131: NEG
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: NEG
31167: PUSH
31168: LD_INT 3
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: NEG
31179: PUSH
31180: LD_INT 3
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31235: LD_ADDR_VAR 0 24
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: LD_INT 2
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 2
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 3
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31511: LD_ADDR_VAR 0 25
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 3
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31785: LD_ADDR_VAR 0 26
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: LD_INT 3
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 3
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 1
32016: NEG
32017: PUSH
32018: LD_INT 2
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32061: LD_ADDR_VAR 0 27
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 1
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 2
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 2
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 2
32237: NEG
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: NEG
32284: PUSH
32285: LD_INT 1
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 3
32294: NEG
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 3
32306: NEG
32307: PUSH
32308: LD_INT 2
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32341: LD_ADDR_VAR 0 28
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 0
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 2
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 2
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: LD_INT 1
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 2
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: NEG
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: LD_INT 3
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: NEG
32565: PUSH
32566: LD_INT 3
32568: NEG
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: NEG
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 3
32588: NEG
32589: PUSH
32590: LD_INT 2
32592: NEG
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32623: LD_ADDR_VAR 0 29
32627: PUSH
32628: LD_INT 0
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 1
32692: NEG
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: NEG
32802: PUSH
32803: LD_INT 2
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 3
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 1
32846: PUSH
32847: LD_INT 3
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 3
32867: NEG
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32902: LD_ADDR_VAR 0 30
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: NEG
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: NEG
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: LD_INT 3
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 2
33106: NEG
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33180: LD_ADDR_VAR 0 31
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: NEG
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: PUSH
33315: LD_INT 2
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 3
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 3
33423: NEG
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33458: LD_ADDR_VAR 0 32
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 1
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 0
33551: PUSH
33552: LD_INT 2
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 3
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 3
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 3
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 3
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33736: LD_ADDR_VAR 0 33
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: LD_INT 1
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 1
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: LD_INT 1
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: LD_INT 2
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: NEG
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 3
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: NEG
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 3
33980: NEG
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34015: LD_ADDR_VAR 0 34
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 2
34182: NEG
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 3
34260: NEG
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34295: LD_ADDR_VAR 0 35
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34407: LD_ADDR_VAR 0 36
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: NEG
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34519: LD_ADDR_VAR 0 37
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: LD_INT 1
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: NEG
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 1
34611: NEG
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34631: LD_ADDR_VAR 0 38
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34743: LD_ADDR_VAR 0 39
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34855: LD_ADDR_VAR 0 40
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: LD_INT 1
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34967: LD_ADDR_VAR 0 41
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 1
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 2
35122: NEG
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: NEG
35158: PUSH
35159: LD_INT 3
35161: NEG
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 3
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: LD_INT 3
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 3
35241: NEG
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 3
35252: NEG
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 3
35264: NEG
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 3
35276: NEG
35277: PUSH
35278: LD_INT 3
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35317: LD_ADDR_VAR 0 42
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: LD_INT 2
35413: NEG
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 2
35483: NEG
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: LD_INT 2
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: NEG
35508: PUSH
35509: LD_INT 3
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: LD_INT 3
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 3
35553: PUSH
35554: LD_INT 2
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 3
35563: PUSH
35564: LD_INT 3
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: LD_INT 3
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: LD_INT 3
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: LD_INT 3
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 2
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 3
35626: NEG
35627: PUSH
35628: LD_INT 3
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35667: LD_ADDR_VAR 0 43
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: LD_INT 1
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 2
35763: NEG
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: LD_INT 2
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: NEG
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: LD_INT 3
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: LD_INT 3
35871: NEG
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 3
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 3
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 3
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: NEG
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 3
35963: NEG
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 3
35974: NEG
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36015: LD_ADDR_VAR 0 44
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 2
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: NEG
36194: PUSH
36195: LD_INT 2
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: NEG
36206: PUSH
36207: LD_INT 3
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 3
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 3
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 3
36258: PUSH
36259: LD_INT 3
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 3
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 2
36278: NEG
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 3
36289: NEG
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 3
36300: NEG
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 3
36312: NEG
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 3
36324: NEG
36325: PUSH
36326: LD_INT 3
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36365: LD_ADDR_VAR 0 45
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 2
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 2
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: NEG
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: NEG
36556: PUSH
36557: LD_INT 3
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 3
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 3
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 2
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 3
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 3
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 3
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: LD_INT 3
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 3
36662: NEG
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 3
36674: NEG
36675: PUSH
36676: LD_INT 3
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36715: LD_ADDR_VAR 0 46
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 3
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 3
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 3
37011: NEG
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 3
37022: NEG
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37063: LD_ADDR_VAR 0 47
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: LD_INT 0
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 2
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: LD_INT 2
37159: NEG
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 2
37190: NEG
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37214: LD_ADDR_VAR 0 48
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 2
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37361: LD_ADDR_VAR 0 49
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 0
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37505: LD_ADDR_VAR 0 50
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37649: LD_ADDR_VAR 0 51
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: LD_INT 0
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 1
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 0
37697: PUSH
37698: LD_INT 1
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 1
37707: NEG
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37796: LD_ADDR_VAR 0 52
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: NEG
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 2
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: NEG
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37947: LD_ADDR_VAR 0 53
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 2
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 2
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: NEG
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38177: LD_ADDR_VAR 0 54
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 2
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 2
38353: NEG
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38407: LD_ADDR_VAR 0 55
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38637: LD_ADDR_VAR 0 56
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 1
38710: NEG
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38867: LD_ADDR_VAR 0 57
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 2
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 2
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 2
39043: NEG
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: NEG
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39097: LD_ADDR_VAR 0 58
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: LD_INT 2
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: NEG
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: NEG
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39327: LD_ADDR_VAR 0 59
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39415: LD_ADDR_VAR 0 60
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39503: LD_ADDR_VAR 0 61
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39591: LD_ADDR_VAR 0 62
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39679: LD_ADDR_VAR 0 63
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 1
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39767: LD_ADDR_VAR 0 64
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// end ; 1 :
39855: GO 45752
39857: LD_INT 1
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 42488
39865: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39866: LD_ADDR_VAR 0 11
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 3
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 3
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39910: LD_ADDR_VAR 0 12
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 3
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: LIST
39950: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39951: LD_ADDR_VAR 0 13
39955: PUSH
39956: LD_INT 3
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 3
39968: PUSH
39969: LD_INT 3
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39991: LD_ADDR_VAR 0 14
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 3
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 0
40008: PUSH
40009: LD_INT 3
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40032: LD_ADDR_VAR 0 15
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 3
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40076: LD_ADDR_VAR 0 16
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: LD_INT 3
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40122: LD_ADDR_VAR 0 17
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 3
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40166: LD_ADDR_VAR 0 18
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 3
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40207: LD_ADDR_VAR 0 19
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: LIST
40246: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40247: LD_ADDR_VAR 0 20
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 3
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40288: LD_ADDR_VAR 0 21
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 3
40306: NEG
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 3
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40332: LD_ADDR_VAR 0 22
40336: PUSH
40337: LD_INT 2
40339: NEG
40340: PUSH
40341: LD_INT 3
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 3
40351: NEG
40352: PUSH
40353: LD_INT 2
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 3
40363: NEG
40364: PUSH
40365: LD_INT 3
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40378: LD_ADDR_VAR 0 23
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: LD_INT 4
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 3
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40422: LD_ADDR_VAR 0 24
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: LD_INT 0
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 3
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 4
40450: PUSH
40451: LD_INT 1
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40463: LD_ADDR_VAR 0 25
40467: PUSH
40468: LD_INT 3
40470: PUSH
40471: LD_INT 3
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 4
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: LD_INT 4
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40503: LD_ADDR_VAR 0 26
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 3
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40544: LD_ADDR_VAR 0 27
40548: PUSH
40549: LD_INT 3
40551: NEG
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: NEG
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 4
40573: NEG
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40588: LD_ADDR_VAR 0 28
40592: PUSH
40593: LD_INT 3
40595: NEG
40596: PUSH
40597: LD_INT 3
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 3
40607: NEG
40608: PUSH
40609: LD_INT 4
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 4
40619: NEG
40620: PUSH
40621: LD_INT 3
40623: NEG
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: LIST
40633: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40634: LD_ADDR_VAR 0 29
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: LD_INT 3
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: LD_INT 3
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 4
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 4
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 3
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 5
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 5
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 4
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 6
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 6
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 5
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40789: LD_ADDR_VAR 0 30
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 4
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 4
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 4
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 5
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 5
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 5
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 6
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 6
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40932: LD_ADDR_VAR 0 31
40936: PUSH
40937: LD_INT 3
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: LD_INT 3
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 4
40969: PUSH
40970: LD_INT 3
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 4
40979: PUSH
40980: LD_INT 4
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 3
40989: PUSH
40990: LD_INT 4
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 5
40999: PUSH
41000: LD_INT 4
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 5
41009: PUSH
41010: LD_INT 5
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 4
41019: PUSH
41020: LD_INT 5
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 6
41029: PUSH
41030: LD_INT 5
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 6
41039: PUSH
41040: LD_INT 6
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 5
41049: PUSH
41050: LD_INT 6
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41071: LD_ADDR_VAR 0 32
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 4
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: LD_INT 4
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: LD_INT 5
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: LD_INT 5
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: LD_INT 4
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: LD_INT 6
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 6
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 5
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41214: LD_ADDR_VAR 0 33
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 3
41232: NEG
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 4
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 4
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 4
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 5
41300: NEG
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 5
41311: NEG
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 5
41323: NEG
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 6
41334: NEG
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 6
41345: NEG
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41369: LD_ADDR_VAR 0 34
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 3
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 3
41412: NEG
41413: PUSH
41414: LD_INT 4
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 4
41424: NEG
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 4
41436: NEG
41437: PUSH
41438: LD_INT 4
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 4
41448: NEG
41449: PUSH
41450: LD_INT 5
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 5
41460: NEG
41461: PUSH
41462: LD_INT 4
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 5
41472: NEG
41473: PUSH
41474: LD_INT 5
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 5
41484: NEG
41485: PUSH
41486: LD_INT 6
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 6
41496: NEG
41497: PUSH
41498: LD_INT 5
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 6
41508: NEG
41509: PUSH
41510: LD_INT 6
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41532: LD_ADDR_VAR 0 41
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 3
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41576: LD_ADDR_VAR 0 42
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 3
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41617: LD_ADDR_VAR 0 43
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41657: LD_ADDR_VAR 0 44
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 3
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: NEG
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41698: LD_ADDR_VAR 0 45
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 3
41727: NEG
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41742: LD_ADDR_VAR 0 46
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 2
41761: NEG
41762: PUSH
41763: LD_INT 3
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 3
41773: NEG
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41788: LD_ADDR_VAR 0 47
41792: PUSH
41793: LD_INT 2
41795: NEG
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 3
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41821: LD_ADDR_VAR 0 48
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41852: LD_ADDR_VAR 0 49
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 3
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41881: LD_ADDR_VAR 0 50
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 3
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 3
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41910: LD_ADDR_VAR 0 51
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 2
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41941: LD_ADDR_VAR 0 52
41945: PUSH
41946: LD_INT 3
41948: NEG
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: LD_INT 2
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41974: LD_ADDR_VAR 0 53
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 3
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 3
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42018: LD_ADDR_VAR 0 54
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 3
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42059: LD_ADDR_VAR 0 55
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 3
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42099: LD_ADDR_VAR 0 56
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 3
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42140: LD_ADDR_VAR 0 57
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 3
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42184: LD_ADDR_VAR 0 58
42188: PUSH
42189: LD_INT 2
42191: NEG
42192: PUSH
42193: LD_INT 3
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 3
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 3
42215: NEG
42216: PUSH
42217: LD_INT 3
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42230: LD_ADDR_VAR 0 59
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42274: LD_ADDR_VAR 0 60
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 1
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42315: LD_ADDR_VAR 0 61
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 2
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 2
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42355: LD_ADDR_VAR 0 62
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: LIST
42395: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42396: LD_ADDR_VAR 0 63
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42440: LD_ADDR_VAR 0 64
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 2
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: LIST
42485: ST_TO_ADDR
// end ; 2 :
42486: GO 45752
42488: LD_INT 2
42490: DOUBLE
42491: EQUAL
42492: IFTRUE 42496
42494: GO 45751
42496: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42497: LD_ADDR_VAR 0 29
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 4
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 4
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 3
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 4
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 4
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 4
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 5
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 4
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 3
42780: NEG
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 4
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 4
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 4
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 4
42882: NEG
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 4
42894: NEG
42895: PUSH
42896: LD_INT 5
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: LD_INT 4
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 3
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 4
42930: NEG
42931: PUSH
42932: LD_INT 3
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 5
42942: NEG
42943: PUSH
42944: LD_INT 4
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 5
42954: NEG
42955: PUSH
42956: LD_INT 5
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: NEG
42967: PUSH
42968: LD_INT 5
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 5
42978: NEG
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43035: LD_ADDR_VAR 0 30
43039: PUSH
43040: LD_INT 4
43042: PUSH
43043: LD_INT 4
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 4
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 5
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 5
43072: PUSH
43073: LD_INT 5
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 4
43082: PUSH
43083: LD_INT 5
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 4
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 5
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: LD_INT 5
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 3
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: LD_INT 4
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 4
43225: NEG
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 4
43236: NEG
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 3
43248: NEG
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 3
43259: NEG
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 4
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 5
43281: NEG
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 5
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 5
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 3
43316: NEG
43317: PUSH
43318: LD_INT 2
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: LD_INT 3
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: LD_INT 4
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 4
43387: NEG
43388: PUSH
43389: LD_INT 3
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 4
43399: NEG
43400: PUSH
43401: LD_INT 4
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 4
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 4
43423: NEG
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 4
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 5
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 4
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: LD_INT 3
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 4
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 5
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: LD_INT 5
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43582: LD_ADDR_VAR 0 31
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 4
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 3
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 4
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 5
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 5
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 4
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: LD_INT 3
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 5
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 3
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 4
43738: NEG
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 4
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 4
43761: NEG
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 4
43784: NEG
43785: PUSH
43786: LD_INT 4
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 4
43796: NEG
43797: PUSH
43798: LD_INT 5
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 3
43808: NEG
43809: PUSH
43810: LD_INT 4
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: NEG
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 4
43832: NEG
43833: PUSH
43834: LD_INT 3
43836: NEG
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 5
43844: NEG
43845: PUSH
43846: LD_INT 4
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 5
43856: NEG
43857: PUSH
43858: LD_INT 5
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 5
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 5
43880: NEG
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 3
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 4
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 3
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: LD_INT 4
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 2
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 4
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 4
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 4
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 5
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 5
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 4
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 5
44077: PUSH
44078: LD_INT 2
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44132: LD_ADDR_VAR 0 32
44136: PUSH
44137: LD_INT 4
44139: NEG
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 4
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 3
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 4
44184: NEG
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 5
44195: NEG
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 5
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 5
44218: NEG
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 3
44230: NEG
44231: PUSH
44232: LD_INT 2
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 3
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 3
44253: NEG
44254: PUSH
44255: LD_INT 4
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 4
44301: NEG
44302: PUSH
44303: LD_INT 3
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 4
44313: NEG
44314: PUSH
44315: LD_INT 4
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 4
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 4
44337: NEG
44338: PUSH
44339: LD_INT 2
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: LD_INT 4
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 5
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 4
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 3
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 3
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 4
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 5
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 3
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: LD_INT 5
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 3
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 4
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 4
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 4
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 4
44544: PUSH
44545: LD_INT 4
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 4
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 5
44564: PUSH
44565: LD_INT 4
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 5
44574: PUSH
44575: LD_INT 5
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 4
44584: PUSH
44585: LD_INT 5
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: LD_INT 4
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 3
44604: PUSH
44605: LD_INT 3
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 5
44614: PUSH
44615: LD_INT 3
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: LD_INT 5
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44679: LD_ADDR_VAR 0 33
44683: PUSH
44684: LD_INT 4
44686: NEG
44687: PUSH
44688: LD_INT 4
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 4
44698: NEG
44699: PUSH
44700: LD_INT 5
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 3
44710: NEG
44711: PUSH
44712: LD_INT 4
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: NEG
44723: PUSH
44724: LD_INT 3
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 4
44734: NEG
44735: PUSH
44736: LD_INT 3
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 5
44746: NEG
44747: PUSH
44748: LD_INT 4
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 5
44758: NEG
44759: PUSH
44760: LD_INT 5
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: LD_INT 5
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 5
44782: NEG
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 3
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 4
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: LD_INT 3
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 3
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 4
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 4
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 4
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 4
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 5
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 4
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 3
44989: PUSH
44990: LD_INT 3
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 4
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 4
45019: PUSH
45020: LD_INT 4
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: LD_INT 4
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 4
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: LD_INT 4
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 4
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 3
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 4
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 5
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 5
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 3
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 5
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: LD_INT 3
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45217: LD_ADDR_VAR 0 34
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 4
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 5
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 4
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 3
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 3
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 4
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 5
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 5
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 3
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 3
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 4
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 4
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 4
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 4
45419: PUSH
45420: LD_INT 4
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 4
45429: PUSH
45430: LD_INT 3
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 5
45439: PUSH
45440: LD_INT 4
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 5
45449: PUSH
45450: LD_INT 5
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 4
45459: PUSH
45460: LD_INT 5
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 3
45479: PUSH
45480: LD_INT 3
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 5
45489: PUSH
45490: LD_INT 3
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: PUSH
45500: LD_INT 5
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 3
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 3
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 4
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 4
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 4
45602: NEG
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 4
45613: NEG
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 3
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 3
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 4
45647: NEG
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 5
45658: NEG
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 5
45669: NEG
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 5
45681: NEG
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 3
45693: NEG
45694: PUSH
45695: LD_INT 2
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: ST_TO_ADDR
// end ; end ;
45749: GO 45752
45751: POP
// case btype of b_depot , b_warehouse :
45752: LD_VAR 0 1
45756: PUSH
45757: LD_INT 0
45759: DOUBLE
45760: EQUAL
45761: IFTRUE 45771
45763: LD_INT 1
45765: DOUBLE
45766: EQUAL
45767: IFTRUE 45771
45769: GO 45972
45771: POP
// case nation of nation_american :
45772: LD_VAR 0 5
45776: PUSH
45777: LD_INT 1
45779: DOUBLE
45780: EQUAL
45781: IFTRUE 45785
45783: GO 45841
45785: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45786: LD_ADDR_VAR 0 9
45790: PUSH
45791: LD_VAR 0 11
45795: PUSH
45796: LD_VAR 0 12
45800: PUSH
45801: LD_VAR 0 13
45805: PUSH
45806: LD_VAR 0 14
45810: PUSH
45811: LD_VAR 0 15
45815: PUSH
45816: LD_VAR 0 16
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: PUSH
45829: LD_VAR 0 4
45833: PUSH
45834: LD_INT 1
45836: PLUS
45837: ARRAY
45838: ST_TO_ADDR
45839: GO 45970
45841: LD_INT 2
45843: DOUBLE
45844: EQUAL
45845: IFTRUE 45849
45847: GO 45905
45849: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45850: LD_ADDR_VAR 0 9
45854: PUSH
45855: LD_VAR 0 17
45859: PUSH
45860: LD_VAR 0 18
45864: PUSH
45865: LD_VAR 0 19
45869: PUSH
45870: LD_VAR 0 20
45874: PUSH
45875: LD_VAR 0 21
45879: PUSH
45880: LD_VAR 0 22
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: PUSH
45893: LD_VAR 0 4
45897: PUSH
45898: LD_INT 1
45900: PLUS
45901: ARRAY
45902: ST_TO_ADDR
45903: GO 45970
45905: LD_INT 3
45907: DOUBLE
45908: EQUAL
45909: IFTRUE 45913
45911: GO 45969
45913: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45914: LD_ADDR_VAR 0 9
45918: PUSH
45919: LD_VAR 0 23
45923: PUSH
45924: LD_VAR 0 24
45928: PUSH
45929: LD_VAR 0 25
45933: PUSH
45934: LD_VAR 0 26
45938: PUSH
45939: LD_VAR 0 27
45943: PUSH
45944: LD_VAR 0 28
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: PUSH
45957: LD_VAR 0 4
45961: PUSH
45962: LD_INT 1
45964: PLUS
45965: ARRAY
45966: ST_TO_ADDR
45967: GO 45970
45969: POP
45970: GO 46525
45972: LD_INT 2
45974: DOUBLE
45975: EQUAL
45976: IFTRUE 45986
45978: LD_INT 3
45980: DOUBLE
45981: EQUAL
45982: IFTRUE 45986
45984: GO 46042
45986: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45987: LD_ADDR_VAR 0 9
45991: PUSH
45992: LD_VAR 0 29
45996: PUSH
45997: LD_VAR 0 30
46001: PUSH
46002: LD_VAR 0 31
46006: PUSH
46007: LD_VAR 0 32
46011: PUSH
46012: LD_VAR 0 33
46016: PUSH
46017: LD_VAR 0 34
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: PUSH
46030: LD_VAR 0 4
46034: PUSH
46035: LD_INT 1
46037: PLUS
46038: ARRAY
46039: ST_TO_ADDR
46040: GO 46525
46042: LD_INT 16
46044: DOUBLE
46045: EQUAL
46046: IFTRUE 46104
46048: LD_INT 17
46050: DOUBLE
46051: EQUAL
46052: IFTRUE 46104
46054: LD_INT 18
46056: DOUBLE
46057: EQUAL
46058: IFTRUE 46104
46060: LD_INT 19
46062: DOUBLE
46063: EQUAL
46064: IFTRUE 46104
46066: LD_INT 22
46068: DOUBLE
46069: EQUAL
46070: IFTRUE 46104
46072: LD_INT 20
46074: DOUBLE
46075: EQUAL
46076: IFTRUE 46104
46078: LD_INT 21
46080: DOUBLE
46081: EQUAL
46082: IFTRUE 46104
46084: LD_INT 23
46086: DOUBLE
46087: EQUAL
46088: IFTRUE 46104
46090: LD_INT 24
46092: DOUBLE
46093: EQUAL
46094: IFTRUE 46104
46096: LD_INT 25
46098: DOUBLE
46099: EQUAL
46100: IFTRUE 46104
46102: GO 46160
46104: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46105: LD_ADDR_VAR 0 9
46109: PUSH
46110: LD_VAR 0 35
46114: PUSH
46115: LD_VAR 0 36
46119: PUSH
46120: LD_VAR 0 37
46124: PUSH
46125: LD_VAR 0 38
46129: PUSH
46130: LD_VAR 0 39
46134: PUSH
46135: LD_VAR 0 40
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: PUSH
46148: LD_VAR 0 4
46152: PUSH
46153: LD_INT 1
46155: PLUS
46156: ARRAY
46157: ST_TO_ADDR
46158: GO 46525
46160: LD_INT 6
46162: DOUBLE
46163: EQUAL
46164: IFTRUE 46216
46166: LD_INT 7
46168: DOUBLE
46169: EQUAL
46170: IFTRUE 46216
46172: LD_INT 8
46174: DOUBLE
46175: EQUAL
46176: IFTRUE 46216
46178: LD_INT 13
46180: DOUBLE
46181: EQUAL
46182: IFTRUE 46216
46184: LD_INT 12
46186: DOUBLE
46187: EQUAL
46188: IFTRUE 46216
46190: LD_INT 15
46192: DOUBLE
46193: EQUAL
46194: IFTRUE 46216
46196: LD_INT 11
46198: DOUBLE
46199: EQUAL
46200: IFTRUE 46216
46202: LD_INT 14
46204: DOUBLE
46205: EQUAL
46206: IFTRUE 46216
46208: LD_INT 10
46210: DOUBLE
46211: EQUAL
46212: IFTRUE 46216
46214: GO 46272
46216: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46217: LD_ADDR_VAR 0 9
46221: PUSH
46222: LD_VAR 0 41
46226: PUSH
46227: LD_VAR 0 42
46231: PUSH
46232: LD_VAR 0 43
46236: PUSH
46237: LD_VAR 0 44
46241: PUSH
46242: LD_VAR 0 45
46246: PUSH
46247: LD_VAR 0 46
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: PUSH
46260: LD_VAR 0 4
46264: PUSH
46265: LD_INT 1
46267: PLUS
46268: ARRAY
46269: ST_TO_ADDR
46270: GO 46525
46272: LD_INT 36
46274: DOUBLE
46275: EQUAL
46276: IFTRUE 46280
46278: GO 46336
46280: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46281: LD_ADDR_VAR 0 9
46285: PUSH
46286: LD_VAR 0 47
46290: PUSH
46291: LD_VAR 0 48
46295: PUSH
46296: LD_VAR 0 49
46300: PUSH
46301: LD_VAR 0 50
46305: PUSH
46306: LD_VAR 0 51
46310: PUSH
46311: LD_VAR 0 52
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: PUSH
46324: LD_VAR 0 4
46328: PUSH
46329: LD_INT 1
46331: PLUS
46332: ARRAY
46333: ST_TO_ADDR
46334: GO 46525
46336: LD_INT 4
46338: DOUBLE
46339: EQUAL
46340: IFTRUE 46362
46342: LD_INT 5
46344: DOUBLE
46345: EQUAL
46346: IFTRUE 46362
46348: LD_INT 34
46350: DOUBLE
46351: EQUAL
46352: IFTRUE 46362
46354: LD_INT 37
46356: DOUBLE
46357: EQUAL
46358: IFTRUE 46362
46360: GO 46418
46362: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46363: LD_ADDR_VAR 0 9
46367: PUSH
46368: LD_VAR 0 53
46372: PUSH
46373: LD_VAR 0 54
46377: PUSH
46378: LD_VAR 0 55
46382: PUSH
46383: LD_VAR 0 56
46387: PUSH
46388: LD_VAR 0 57
46392: PUSH
46393: LD_VAR 0 58
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: PUSH
46406: LD_VAR 0 4
46410: PUSH
46411: LD_INT 1
46413: PLUS
46414: ARRAY
46415: ST_TO_ADDR
46416: GO 46525
46418: LD_INT 31
46420: DOUBLE
46421: EQUAL
46422: IFTRUE 46468
46424: LD_INT 32
46426: DOUBLE
46427: EQUAL
46428: IFTRUE 46468
46430: LD_INT 33
46432: DOUBLE
46433: EQUAL
46434: IFTRUE 46468
46436: LD_INT 27
46438: DOUBLE
46439: EQUAL
46440: IFTRUE 46468
46442: LD_INT 26
46444: DOUBLE
46445: EQUAL
46446: IFTRUE 46468
46448: LD_INT 28
46450: DOUBLE
46451: EQUAL
46452: IFTRUE 46468
46454: LD_INT 29
46456: DOUBLE
46457: EQUAL
46458: IFTRUE 46468
46460: LD_INT 30
46462: DOUBLE
46463: EQUAL
46464: IFTRUE 46468
46466: GO 46524
46468: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46469: LD_ADDR_VAR 0 9
46473: PUSH
46474: LD_VAR 0 59
46478: PUSH
46479: LD_VAR 0 60
46483: PUSH
46484: LD_VAR 0 61
46488: PUSH
46489: LD_VAR 0 62
46493: PUSH
46494: LD_VAR 0 63
46498: PUSH
46499: LD_VAR 0 64
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: PUSH
46512: LD_VAR 0 4
46516: PUSH
46517: LD_INT 1
46519: PLUS
46520: ARRAY
46521: ST_TO_ADDR
46522: GO 46525
46524: POP
// temp_list2 = [ ] ;
46525: LD_ADDR_VAR 0 10
46529: PUSH
46530: EMPTY
46531: ST_TO_ADDR
// for i in temp_list do
46532: LD_ADDR_VAR 0 8
46536: PUSH
46537: LD_VAR 0 9
46541: PUSH
46542: FOR_IN
46543: IFFALSE 46595
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46545: LD_ADDR_VAR 0 10
46549: PUSH
46550: LD_VAR 0 10
46554: PUSH
46555: LD_VAR 0 8
46559: PUSH
46560: LD_INT 1
46562: ARRAY
46563: PUSH
46564: LD_VAR 0 2
46568: PLUS
46569: PUSH
46570: LD_VAR 0 8
46574: PUSH
46575: LD_INT 2
46577: ARRAY
46578: PUSH
46579: LD_VAR 0 3
46583: PLUS
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: ADD
46592: ST_TO_ADDR
46593: GO 46542
46595: POP
46596: POP
// result = temp_list2 ;
46597: LD_ADDR_VAR 0 7
46601: PUSH
46602: LD_VAR 0 10
46606: ST_TO_ADDR
// end ;
46607: LD_VAR 0 7
46611: RET
// export function EnemyInRange ( unit , dist ) ; begin
46612: LD_INT 0
46614: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46615: LD_ADDR_VAR 0 3
46619: PUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 255
46629: PPUSH
46630: LD_VAR 0 1
46634: PPUSH
46635: CALL_OW 250
46639: PPUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 251
46649: PPUSH
46650: LD_VAR 0 2
46654: PPUSH
46655: CALL 19869 0 4
46659: PUSH
46660: LD_INT 4
46662: ARRAY
46663: ST_TO_ADDR
// end ;
46664: LD_VAR 0 3
46668: RET
// export function PlayerSeeMe ( unit ) ; begin
46669: LD_INT 0
46671: PPUSH
// result := See ( your_side , unit ) ;
46672: LD_ADDR_VAR 0 2
46676: PUSH
46677: LD_OWVAR 2
46681: PPUSH
46682: LD_VAR 0 1
46686: PPUSH
46687: CALL_OW 292
46691: ST_TO_ADDR
// end ;
46692: LD_VAR 0 2
46696: RET
// export function ReverseDir ( unit ) ; begin
46697: LD_INT 0
46699: PPUSH
// if not unit then
46700: LD_VAR 0 1
46704: NOT
46705: IFFALSE 46709
// exit ;
46707: GO 46732
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46709: LD_ADDR_VAR 0 2
46713: PUSH
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 254
46723: PUSH
46724: LD_INT 3
46726: PLUS
46727: PUSH
46728: LD_INT 6
46730: MOD
46731: ST_TO_ADDR
// end ;
46732: LD_VAR 0 2
46736: RET
// export function ReverseArray ( array ) ; var i ; begin
46737: LD_INT 0
46739: PPUSH
46740: PPUSH
// if not array then
46741: LD_VAR 0 1
46745: NOT
46746: IFFALSE 46750
// exit ;
46748: GO 46805
// result := [ ] ;
46750: LD_ADDR_VAR 0 2
46754: PUSH
46755: EMPTY
46756: ST_TO_ADDR
// for i := array downto 1 do
46757: LD_ADDR_VAR 0 3
46761: PUSH
46762: DOUBLE
46763: LD_VAR 0 1
46767: INC
46768: ST_TO_ADDR
46769: LD_INT 1
46771: PUSH
46772: FOR_DOWNTO
46773: IFFALSE 46803
// result := Join ( result , array [ i ] ) ;
46775: LD_ADDR_VAR 0 2
46779: PUSH
46780: LD_VAR 0 2
46784: PPUSH
46785: LD_VAR 0 1
46789: PUSH
46790: LD_VAR 0 3
46794: ARRAY
46795: PPUSH
46796: CALL 51657 0 2
46800: ST_TO_ADDR
46801: GO 46772
46803: POP
46804: POP
// end ;
46805: LD_VAR 0 2
46809: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
46810: LD_INT 0
46812: PPUSH
46813: PPUSH
46814: PPUSH
46815: PPUSH
46816: PPUSH
46817: PPUSH
// if not unit or not hexes then
46818: LD_VAR 0 1
46822: NOT
46823: IFTRUE 46832
46825: PUSH
46826: LD_VAR 0 2
46830: NOT
46831: OR
46832: IFFALSE 46836
// exit ;
46834: GO 46959
// dist := 9999 ;
46836: LD_ADDR_VAR 0 5
46840: PUSH
46841: LD_INT 9999
46843: ST_TO_ADDR
// for i = 1 to hexes do
46844: LD_ADDR_VAR 0 4
46848: PUSH
46849: DOUBLE
46850: LD_INT 1
46852: DEC
46853: ST_TO_ADDR
46854: LD_VAR 0 2
46858: PUSH
46859: FOR_TO
46860: IFFALSE 46947
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46862: LD_ADDR_VAR 0 6
46866: PUSH
46867: LD_VAR 0 1
46871: PPUSH
46872: LD_VAR 0 2
46876: PUSH
46877: LD_VAR 0 4
46881: ARRAY
46882: PUSH
46883: LD_INT 1
46885: ARRAY
46886: PPUSH
46887: LD_VAR 0 2
46891: PUSH
46892: LD_VAR 0 4
46896: ARRAY
46897: PUSH
46898: LD_INT 2
46900: ARRAY
46901: PPUSH
46902: CALL_OW 297
46906: ST_TO_ADDR
// if tdist < dist then
46907: LD_VAR 0 6
46911: PUSH
46912: LD_VAR 0 5
46916: LESS
46917: IFFALSE 46945
// begin hex := hexes [ i ] ;
46919: LD_ADDR_VAR 0 8
46923: PUSH
46924: LD_VAR 0 2
46928: PUSH
46929: LD_VAR 0 4
46933: ARRAY
46934: ST_TO_ADDR
// dist := tdist ;
46935: LD_ADDR_VAR 0 5
46939: PUSH
46940: LD_VAR 0 6
46944: ST_TO_ADDR
// end ; end ;
46945: GO 46859
46947: POP
46948: POP
// result := hex ;
46949: LD_ADDR_VAR 0 3
46953: PUSH
46954: LD_VAR 0 8
46958: ST_TO_ADDR
// end ;
46959: LD_VAR 0 3
46963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46964: LD_INT 0
46966: PPUSH
46967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46968: LD_VAR 0 1
46972: NOT
46973: IFTRUE 47012
46975: PUSH
46976: LD_VAR 0 1
46980: PUSH
46981: LD_INT 21
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 23
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PPUSH
47005: CALL_OW 69
47009: IN
47010: NOT
47011: OR
47012: IFFALSE 47016
// exit ;
47014: GO 47063
// for i = 1 to 3 do
47016: LD_ADDR_VAR 0 3
47020: PUSH
47021: DOUBLE
47022: LD_INT 1
47024: DEC
47025: ST_TO_ADDR
47026: LD_INT 3
47028: PUSH
47029: FOR_TO
47030: IFFALSE 47061
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47032: LD_VAR 0 1
47036: PPUSH
47037: CALL_OW 250
47041: PPUSH
47042: LD_VAR 0 1
47046: PPUSH
47047: CALL_OW 251
47051: PPUSH
47052: LD_INT 1
47054: PPUSH
47055: CALL_OW 453
47059: GO 47029
47061: POP
47062: POP
// end ;
47063: LD_VAR 0 2
47067: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47068: LD_INT 0
47070: PPUSH
47071: PPUSH
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
// if not unit or not enemy_unit then
47076: LD_VAR 0 1
47080: NOT
47081: IFTRUE 47090
47083: PUSH
47084: LD_VAR 0 2
47088: NOT
47089: OR
47090: IFFALSE 47094
// exit ;
47092: GO 47575
// if GetLives ( i ) < 250 then
47094: LD_VAR 0 4
47098: PPUSH
47099: CALL_OW 256
47103: PUSH
47104: LD_INT 250
47106: LESS
47107: IFFALSE 47120
// begin ComAutodestruct ( i ) ;
47109: LD_VAR 0 4
47113: PPUSH
47114: CALL 46964 0 1
// exit ;
47118: GO 47575
// end ; x := GetX ( enemy_unit ) ;
47120: LD_ADDR_VAR 0 7
47124: PUSH
47125: LD_VAR 0 2
47129: PPUSH
47130: CALL_OW 250
47134: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47135: LD_ADDR_VAR 0 8
47139: PUSH
47140: LD_VAR 0 2
47144: PPUSH
47145: CALL_OW 251
47149: ST_TO_ADDR
// if not x or not y then
47150: LD_VAR 0 7
47154: NOT
47155: IFTRUE 47164
47157: PUSH
47158: LD_VAR 0 8
47162: NOT
47163: OR
47164: IFFALSE 47168
// exit ;
47166: GO 47575
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47168: LD_ADDR_VAR 0 6
47172: PUSH
47173: LD_VAR 0 7
47177: PPUSH
47178: LD_INT 0
47180: PPUSH
47181: LD_INT 4
47183: PPUSH
47184: CALL_OW 272
47188: PUSH
47189: LD_VAR 0 8
47193: PPUSH
47194: LD_INT 0
47196: PPUSH
47197: LD_INT 4
47199: PPUSH
47200: CALL_OW 273
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_VAR 0 7
47213: PPUSH
47214: LD_INT 1
47216: PPUSH
47217: LD_INT 4
47219: PPUSH
47220: CALL_OW 272
47224: PUSH
47225: LD_VAR 0 8
47229: PPUSH
47230: LD_INT 1
47232: PPUSH
47233: LD_INT 4
47235: PPUSH
47236: CALL_OW 273
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_VAR 0 7
47249: PPUSH
47250: LD_INT 2
47252: PPUSH
47253: LD_INT 4
47255: PPUSH
47256: CALL_OW 272
47260: PUSH
47261: LD_VAR 0 8
47265: PPUSH
47266: LD_INT 2
47268: PPUSH
47269: LD_INT 4
47271: PPUSH
47272: CALL_OW 273
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_VAR 0 7
47285: PPUSH
47286: LD_INT 3
47288: PPUSH
47289: LD_INT 4
47291: PPUSH
47292: CALL_OW 272
47296: PUSH
47297: LD_VAR 0 8
47301: PPUSH
47302: LD_INT 3
47304: PPUSH
47305: LD_INT 4
47307: PPUSH
47308: CALL_OW 273
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_VAR 0 7
47321: PPUSH
47322: LD_INT 4
47324: PPUSH
47325: LD_INT 4
47327: PPUSH
47328: CALL_OW 272
47332: PUSH
47333: LD_VAR 0 8
47337: PPUSH
47338: LD_INT 4
47340: PPUSH
47341: LD_INT 4
47343: PPUSH
47344: CALL_OW 273
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_VAR 0 7
47357: PPUSH
47358: LD_INT 5
47360: PPUSH
47361: LD_INT 4
47363: PPUSH
47364: CALL_OW 272
47368: PUSH
47369: LD_VAR 0 8
47373: PPUSH
47374: LD_INT 5
47376: PPUSH
47377: LD_INT 4
47379: PPUSH
47380: CALL_OW 273
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// for i = tmp downto 1 do
47397: LD_ADDR_VAR 0 4
47401: PUSH
47402: DOUBLE
47403: LD_VAR 0 6
47407: INC
47408: ST_TO_ADDR
47409: LD_INT 1
47411: PUSH
47412: FOR_DOWNTO
47413: IFFALSE 47516
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47415: LD_VAR 0 6
47419: PUSH
47420: LD_VAR 0 4
47424: ARRAY
47425: PUSH
47426: LD_INT 1
47428: ARRAY
47429: PPUSH
47430: LD_VAR 0 6
47434: PUSH
47435: LD_VAR 0 4
47439: ARRAY
47440: PUSH
47441: LD_INT 2
47443: ARRAY
47444: PPUSH
47445: CALL_OW 488
47449: NOT
47450: IFTRUE 47492
47452: PUSH
47453: LD_VAR 0 6
47457: PUSH
47458: LD_VAR 0 4
47462: ARRAY
47463: PUSH
47464: LD_INT 1
47466: ARRAY
47467: PPUSH
47468: LD_VAR 0 6
47472: PUSH
47473: LD_VAR 0 4
47477: ARRAY
47478: PUSH
47479: LD_INT 2
47481: ARRAY
47482: PPUSH
47483: CALL_OW 428
47487: PUSH
47488: LD_INT 0
47490: NONEQUAL
47491: OR
47492: IFFALSE 47514
// tmp := Delete ( tmp , i ) ;
47494: LD_ADDR_VAR 0 6
47498: PUSH
47499: LD_VAR 0 6
47503: PPUSH
47504: LD_VAR 0 4
47508: PPUSH
47509: CALL_OW 3
47513: ST_TO_ADDR
47514: GO 47412
47516: POP
47517: POP
// j := GetClosestHex ( unit , tmp ) ;
47518: LD_ADDR_VAR 0 5
47522: PUSH
47523: LD_VAR 0 1
47527: PPUSH
47528: LD_VAR 0 6
47532: PPUSH
47533: CALL 46810 0 2
47537: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47538: LD_VAR 0 1
47542: PPUSH
47543: LD_VAR 0 5
47547: PUSH
47548: LD_INT 1
47550: ARRAY
47551: PPUSH
47552: LD_VAR 0 5
47556: PUSH
47557: LD_INT 2
47559: ARRAY
47560: PPUSH
47561: CALL_OW 111
// result := j ;
47565: LD_ADDR_VAR 0 3
47569: PUSH
47570: LD_VAR 0 5
47574: ST_TO_ADDR
// end ;
47575: LD_VAR 0 3
47579: RET
// export function PrepareApemanSoldier ( ) ; begin
47580: LD_INT 0
47582: PPUSH
// uc_nation := 0 ;
47583: LD_ADDR_OWVAR 21
47587: PUSH
47588: LD_INT 0
47590: ST_TO_ADDR
// hc_sex := sex_male ;
47591: LD_ADDR_OWVAR 27
47595: PUSH
47596: LD_INT 1
47598: ST_TO_ADDR
// hc_name :=  ;
47599: LD_ADDR_OWVAR 26
47603: PUSH
47604: LD_STRING 
47606: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
47607: LD_ADDR_OWVAR 28
47611: PUSH
47612: LD_INT 15
47614: ST_TO_ADDR
// hc_gallery :=  ;
47615: LD_ADDR_OWVAR 33
47619: PUSH
47620: LD_STRING 
47622: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47623: LD_ADDR_OWVAR 31
47627: PUSH
47628: LD_INT 0
47630: PPUSH
47631: LD_INT 3
47633: PPUSH
47634: CALL_OW 12
47638: PUSH
47639: LD_INT 0
47641: PPUSH
47642: LD_INT 3
47644: PPUSH
47645: CALL_OW 12
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
47662: LD_ADDR_OWVAR 29
47666: PUSH
47667: LD_INT 10
47669: PUSH
47670: LD_INT 12
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: ST_TO_ADDR
// end ;
47677: LD_VAR 0 1
47681: RET
// export function PrepareApemanEngineer ( ) ; begin
47682: LD_INT 0
47684: PPUSH
// uc_nation := 0 ;
47685: LD_ADDR_OWVAR 21
47689: PUSH
47690: LD_INT 0
47692: ST_TO_ADDR
// hc_sex := sex_male ;
47693: LD_ADDR_OWVAR 27
47697: PUSH
47698: LD_INT 1
47700: ST_TO_ADDR
// hc_name :=  ;
47701: LD_ADDR_OWVAR 26
47705: PUSH
47706: LD_STRING 
47708: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47709: LD_ADDR_OWVAR 28
47713: PUSH
47714: LD_INT 16
47716: ST_TO_ADDR
// hc_gallery :=  ;
47717: LD_ADDR_OWVAR 33
47721: PUSH
47722: LD_STRING 
47724: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47725: LD_ADDR_OWVAR 31
47729: PUSH
47730: LD_INT 0
47732: PPUSH
47733: LD_INT 3
47735: PPUSH
47736: CALL_OW 12
47740: PUSH
47741: LD_INT 0
47743: PPUSH
47744: LD_INT 3
47746: PPUSH
47747: CALL_OW 12
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
47764: LD_ADDR_OWVAR 29
47768: PUSH
47769: LD_INT 10
47771: PUSH
47772: LD_INT 12
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// end ;
47779: LD_VAR 0 1
47783: RET
// export function PrepareApeman ( agressivity ) ; begin
47784: LD_INT 0
47786: PPUSH
// uc_side := 0 ;
47787: LD_ADDR_OWVAR 20
47791: PUSH
47792: LD_INT 0
47794: ST_TO_ADDR
// uc_nation := 0 ;
47795: LD_ADDR_OWVAR 21
47799: PUSH
47800: LD_INT 0
47802: ST_TO_ADDR
// hc_sex := sex_male ;
47803: LD_ADDR_OWVAR 27
47807: PUSH
47808: LD_INT 1
47810: ST_TO_ADDR
// hc_class := class_apeman ;
47811: LD_ADDR_OWVAR 28
47815: PUSH
47816: LD_INT 12
47818: ST_TO_ADDR
// hc_gallery :=  ;
47819: LD_ADDR_OWVAR 33
47823: PUSH
47824: LD_STRING 
47826: ST_TO_ADDR
// hc_name :=  ;
47827: LD_ADDR_OWVAR 26
47831: PUSH
47832: LD_STRING 
47834: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
47835: LD_ADDR_OWVAR 29
47839: PUSH
47840: LD_INT 10
47842: PUSH
47843: LD_INT 12
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: ST_TO_ADDR
// if agressivity = 0 then
47850: LD_VAR 0 1
47854: PUSH
47855: LD_INT 0
47857: EQUAL
47858: IFFALSE 47870
// hc_agressivity := 0 else
47860: LD_ADDR_OWVAR 35
47864: PUSH
47865: LD_INT 0
47867: ST_TO_ADDR
47868: GO 47891
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47870: LD_ADDR_OWVAR 35
47874: PUSH
47875: LD_VAR 0 1
47879: NEG
47880: PPUSH
47881: LD_VAR 0 1
47885: PPUSH
47886: CALL_OW 12
47890: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47891: LD_ADDR_OWVAR 31
47895: PUSH
47896: LD_INT 0
47898: PPUSH
47899: LD_INT 3
47901: PPUSH
47902: CALL_OW 12
47906: PUSH
47907: LD_INT 0
47909: PPUSH
47910: LD_INT 3
47912: PPUSH
47913: CALL_OW 12
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// end ;
47930: LD_VAR 0 2
47934: RET
// export function PrepareTiger ( agressivity ) ; begin
47935: LD_INT 0
47937: PPUSH
// uc_side := 0 ;
47938: LD_ADDR_OWVAR 20
47942: PUSH
47943: LD_INT 0
47945: ST_TO_ADDR
// uc_nation := 0 ;
47946: LD_ADDR_OWVAR 21
47950: PUSH
47951: LD_INT 0
47953: ST_TO_ADDR
// InitHc ;
47954: CALL_OW 19
// hc_class := class_tiger ;
47958: LD_ADDR_OWVAR 28
47962: PUSH
47963: LD_INT 14
47965: ST_TO_ADDR
// hc_gallery :=  ;
47966: LD_ADDR_OWVAR 33
47970: PUSH
47971: LD_STRING 
47973: ST_TO_ADDR
// hc_name :=  ;
47974: LD_ADDR_OWVAR 26
47978: PUSH
47979: LD_STRING 
47981: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47982: LD_ADDR_OWVAR 35
47986: PUSH
47987: LD_VAR 0 1
47991: NEG
47992: PPUSH
47993: LD_VAR 0 1
47997: PPUSH
47998: CALL_OW 12
48002: ST_TO_ADDR
// end ;
48003: LD_VAR 0 2
48007: RET
// export function PrepareEnchidna ( ) ; begin
48008: LD_INT 0
48010: PPUSH
// uc_side := 0 ;
48011: LD_ADDR_OWVAR 20
48015: PUSH
48016: LD_INT 0
48018: ST_TO_ADDR
// uc_nation := 0 ;
48019: LD_ADDR_OWVAR 21
48023: PUSH
48024: LD_INT 0
48026: ST_TO_ADDR
// InitHc ;
48027: CALL_OW 19
// hc_class := class_baggie ;
48031: LD_ADDR_OWVAR 28
48035: PUSH
48036: LD_INT 13
48038: ST_TO_ADDR
// hc_gallery :=  ;
48039: LD_ADDR_OWVAR 33
48043: PUSH
48044: LD_STRING 
48046: ST_TO_ADDR
// hc_name :=  ;
48047: LD_ADDR_OWVAR 26
48051: PUSH
48052: LD_STRING 
48054: ST_TO_ADDR
// end ;
48055: LD_VAR 0 1
48059: RET
// export function PrepareFrog ( ) ; begin
48060: LD_INT 0
48062: PPUSH
// uc_side := 0 ;
48063: LD_ADDR_OWVAR 20
48067: PUSH
48068: LD_INT 0
48070: ST_TO_ADDR
// uc_nation := 0 ;
48071: LD_ADDR_OWVAR 21
48075: PUSH
48076: LD_INT 0
48078: ST_TO_ADDR
// InitHc ;
48079: CALL_OW 19
// hc_class := class_frog ;
48083: LD_ADDR_OWVAR 28
48087: PUSH
48088: LD_INT 19
48090: ST_TO_ADDR
// hc_gallery :=  ;
48091: LD_ADDR_OWVAR 33
48095: PUSH
48096: LD_STRING 
48098: ST_TO_ADDR
// hc_name :=  ;
48099: LD_ADDR_OWVAR 26
48103: PUSH
48104: LD_STRING 
48106: ST_TO_ADDR
// end ;
48107: LD_VAR 0 1
48111: RET
// export function PrepareFish ( ) ; begin
48112: LD_INT 0
48114: PPUSH
// uc_side := 0 ;
48115: LD_ADDR_OWVAR 20
48119: PUSH
48120: LD_INT 0
48122: ST_TO_ADDR
// uc_nation := 0 ;
48123: LD_ADDR_OWVAR 21
48127: PUSH
48128: LD_INT 0
48130: ST_TO_ADDR
// InitHc ;
48131: CALL_OW 19
// hc_class := class_fish ;
48135: LD_ADDR_OWVAR 28
48139: PUSH
48140: LD_INT 20
48142: ST_TO_ADDR
// hc_gallery :=  ;
48143: LD_ADDR_OWVAR 33
48147: PUSH
48148: LD_STRING 
48150: ST_TO_ADDR
// hc_name :=  ;
48151: LD_ADDR_OWVAR 26
48155: PUSH
48156: LD_STRING 
48158: ST_TO_ADDR
// end ;
48159: LD_VAR 0 1
48163: RET
// export function PrepareBird ( ) ; begin
48164: LD_INT 0
48166: PPUSH
// uc_side := 0 ;
48167: LD_ADDR_OWVAR 20
48171: PUSH
48172: LD_INT 0
48174: ST_TO_ADDR
// uc_nation := 0 ;
48175: LD_ADDR_OWVAR 21
48179: PUSH
48180: LD_INT 0
48182: ST_TO_ADDR
// InitHc ;
48183: CALL_OW 19
// hc_class := class_phororhacos ;
48187: LD_ADDR_OWVAR 28
48191: PUSH
48192: LD_INT 18
48194: ST_TO_ADDR
// hc_gallery :=  ;
48195: LD_ADDR_OWVAR 33
48199: PUSH
48200: LD_STRING 
48202: ST_TO_ADDR
// hc_name :=  ;
48203: LD_ADDR_OWVAR 26
48207: PUSH
48208: LD_STRING 
48210: ST_TO_ADDR
// end ;
48211: LD_VAR 0 1
48215: RET
// export function PrepareHorse ( ) ; begin
48216: LD_INT 0
48218: PPUSH
// uc_side := 0 ;
48219: LD_ADDR_OWVAR 20
48223: PUSH
48224: LD_INT 0
48226: ST_TO_ADDR
// uc_nation := 0 ;
48227: LD_ADDR_OWVAR 21
48231: PUSH
48232: LD_INT 0
48234: ST_TO_ADDR
// InitHc ;
48235: CALL_OW 19
// hc_class := class_horse ;
48239: LD_ADDR_OWVAR 28
48243: PUSH
48244: LD_INT 21
48246: ST_TO_ADDR
// hc_gallery :=  ;
48247: LD_ADDR_OWVAR 33
48251: PUSH
48252: LD_STRING 
48254: ST_TO_ADDR
// hc_name :=  ;
48255: LD_ADDR_OWVAR 26
48259: PUSH
48260: LD_STRING 
48262: ST_TO_ADDR
// end ;
48263: LD_VAR 0 1
48267: RET
// export function PrepareMastodont ( ) ; begin
48268: LD_INT 0
48270: PPUSH
// uc_side := 0 ;
48271: LD_ADDR_OWVAR 20
48275: PUSH
48276: LD_INT 0
48278: ST_TO_ADDR
// uc_nation := 0 ;
48279: LD_ADDR_OWVAR 21
48283: PUSH
48284: LD_INT 0
48286: ST_TO_ADDR
// vc_chassis := class_mastodont ;
48287: LD_ADDR_OWVAR 37
48291: PUSH
48292: LD_INT 31
48294: ST_TO_ADDR
// vc_control := control_rider ;
48295: LD_ADDR_OWVAR 38
48299: PUSH
48300: LD_INT 4
48302: ST_TO_ADDR
// end ;
48303: LD_VAR 0 1
48307: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48308: LD_INT 0
48310: PPUSH
48311: PPUSH
48312: PPUSH
// uc_side = 0 ;
48313: LD_ADDR_OWVAR 20
48317: PUSH
48318: LD_INT 0
48320: ST_TO_ADDR
// uc_nation = 0 ;
48321: LD_ADDR_OWVAR 21
48325: PUSH
48326: LD_INT 0
48328: ST_TO_ADDR
// InitHc_All ( ) ;
48329: CALL_OW 584
// InitVc ;
48333: CALL_OW 20
// if mastodonts then
48337: LD_VAR 0 6
48341: IFFALSE 48408
// for i = 1 to mastodonts do
48343: LD_ADDR_VAR 0 11
48347: PUSH
48348: DOUBLE
48349: LD_INT 1
48351: DEC
48352: ST_TO_ADDR
48353: LD_VAR 0 6
48357: PUSH
48358: FOR_TO
48359: IFFALSE 48406
// begin vc_chassis := 31 ;
48361: LD_ADDR_OWVAR 37
48365: PUSH
48366: LD_INT 31
48368: ST_TO_ADDR
// vc_control := control_rider ;
48369: LD_ADDR_OWVAR 38
48373: PUSH
48374: LD_INT 4
48376: ST_TO_ADDR
// animal := CreateVehicle ;
48377: LD_ADDR_VAR 0 12
48381: PUSH
48382: CALL_OW 45
48386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48387: LD_VAR 0 12
48391: PPUSH
48392: LD_VAR 0 8
48396: PPUSH
48397: LD_INT 0
48399: PPUSH
48400: CALL 50550 0 3
// end ;
48404: GO 48358
48406: POP
48407: POP
// if horses then
48408: LD_VAR 0 5
48412: IFFALSE 48479
// for i = 1 to horses do
48414: LD_ADDR_VAR 0 11
48418: PUSH
48419: DOUBLE
48420: LD_INT 1
48422: DEC
48423: ST_TO_ADDR
48424: LD_VAR 0 5
48428: PUSH
48429: FOR_TO
48430: IFFALSE 48477
// begin hc_class := 21 ;
48432: LD_ADDR_OWVAR 28
48436: PUSH
48437: LD_INT 21
48439: ST_TO_ADDR
// hc_gallery :=  ;
48440: LD_ADDR_OWVAR 33
48444: PUSH
48445: LD_STRING 
48447: ST_TO_ADDR
// animal := CreateHuman ;
48448: LD_ADDR_VAR 0 12
48452: PUSH
48453: CALL_OW 44
48457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48458: LD_VAR 0 12
48462: PPUSH
48463: LD_VAR 0 8
48467: PPUSH
48468: LD_INT 0
48470: PPUSH
48471: CALL 50550 0 3
// end ;
48475: GO 48429
48477: POP
48478: POP
// if birds then
48479: LD_VAR 0 1
48483: IFFALSE 48550
// for i = 1 to birds do
48485: LD_ADDR_VAR 0 11
48489: PUSH
48490: DOUBLE
48491: LD_INT 1
48493: DEC
48494: ST_TO_ADDR
48495: LD_VAR 0 1
48499: PUSH
48500: FOR_TO
48501: IFFALSE 48548
// begin hc_class := 18 ;
48503: LD_ADDR_OWVAR 28
48507: PUSH
48508: LD_INT 18
48510: ST_TO_ADDR
// hc_gallery =  ;
48511: LD_ADDR_OWVAR 33
48515: PUSH
48516: LD_STRING 
48518: ST_TO_ADDR
// animal := CreateHuman ;
48519: LD_ADDR_VAR 0 12
48523: PUSH
48524: CALL_OW 44
48528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48529: LD_VAR 0 12
48533: PPUSH
48534: LD_VAR 0 8
48538: PPUSH
48539: LD_INT 0
48541: PPUSH
48542: CALL 50550 0 3
// end ;
48546: GO 48500
48548: POP
48549: POP
// if tigers then
48550: LD_VAR 0 2
48554: IFFALSE 48638
// for i = 1 to tigers do
48556: LD_ADDR_VAR 0 11
48560: PUSH
48561: DOUBLE
48562: LD_INT 1
48564: DEC
48565: ST_TO_ADDR
48566: LD_VAR 0 2
48570: PUSH
48571: FOR_TO
48572: IFFALSE 48636
// begin hc_class = class_tiger ;
48574: LD_ADDR_OWVAR 28
48578: PUSH
48579: LD_INT 14
48581: ST_TO_ADDR
// hc_gallery =  ;
48582: LD_ADDR_OWVAR 33
48586: PUSH
48587: LD_STRING 
48589: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48590: LD_ADDR_OWVAR 35
48594: PUSH
48595: LD_INT 7
48597: NEG
48598: PPUSH
48599: LD_INT 7
48601: PPUSH
48602: CALL_OW 12
48606: ST_TO_ADDR
// animal := CreateHuman ;
48607: LD_ADDR_VAR 0 12
48611: PUSH
48612: CALL_OW 44
48616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48617: LD_VAR 0 12
48621: PPUSH
48622: LD_VAR 0 8
48626: PPUSH
48627: LD_INT 0
48629: PPUSH
48630: CALL 50550 0 3
// end ;
48634: GO 48571
48636: POP
48637: POP
// if apemans then
48638: LD_VAR 0 3
48642: IFFALSE 48765
// for i = 1 to apemans do
48644: LD_ADDR_VAR 0 11
48648: PUSH
48649: DOUBLE
48650: LD_INT 1
48652: DEC
48653: ST_TO_ADDR
48654: LD_VAR 0 3
48658: PUSH
48659: FOR_TO
48660: IFFALSE 48763
// begin hc_class = class_apeman ;
48662: LD_ADDR_OWVAR 28
48666: PUSH
48667: LD_INT 12
48669: ST_TO_ADDR
// hc_gallery =  ;
48670: LD_ADDR_OWVAR 33
48674: PUSH
48675: LD_STRING 
48677: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48678: LD_ADDR_OWVAR 35
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PPUSH
48687: LD_INT 2
48689: PPUSH
48690: CALL_OW 12
48694: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48695: LD_ADDR_OWVAR 31
48699: PUSH
48700: LD_INT 1
48702: PPUSH
48703: LD_INT 3
48705: PPUSH
48706: CALL_OW 12
48710: PUSH
48711: LD_INT 1
48713: PPUSH
48714: LD_INT 3
48716: PPUSH
48717: CALL_OW 12
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// animal := CreateHuman ;
48734: LD_ADDR_VAR 0 12
48738: PUSH
48739: CALL_OW 44
48743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48744: LD_VAR 0 12
48748: PPUSH
48749: LD_VAR 0 8
48753: PPUSH
48754: LD_INT 0
48756: PPUSH
48757: CALL 50550 0 3
// end ;
48761: GO 48659
48763: POP
48764: POP
// if enchidnas then
48765: LD_VAR 0 4
48769: IFFALSE 48836
// for i = 1 to enchidnas do
48771: LD_ADDR_VAR 0 11
48775: PUSH
48776: DOUBLE
48777: LD_INT 1
48779: DEC
48780: ST_TO_ADDR
48781: LD_VAR 0 4
48785: PUSH
48786: FOR_TO
48787: IFFALSE 48834
// begin hc_class = 13 ;
48789: LD_ADDR_OWVAR 28
48793: PUSH
48794: LD_INT 13
48796: ST_TO_ADDR
// hc_gallery =  ;
48797: LD_ADDR_OWVAR 33
48801: PUSH
48802: LD_STRING 
48804: ST_TO_ADDR
// animal := CreateHuman ;
48805: LD_ADDR_VAR 0 12
48809: PUSH
48810: CALL_OW 44
48814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48815: LD_VAR 0 12
48819: PPUSH
48820: LD_VAR 0 8
48824: PPUSH
48825: LD_INT 0
48827: PPUSH
48828: CALL 50550 0 3
// end ;
48832: GO 48786
48834: POP
48835: POP
// if fishes then
48836: LD_VAR 0 7
48840: IFFALSE 48907
// for i = 1 to fishes do
48842: LD_ADDR_VAR 0 11
48846: PUSH
48847: DOUBLE
48848: LD_INT 1
48850: DEC
48851: ST_TO_ADDR
48852: LD_VAR 0 7
48856: PUSH
48857: FOR_TO
48858: IFFALSE 48905
// begin hc_class = 20 ;
48860: LD_ADDR_OWVAR 28
48864: PUSH
48865: LD_INT 20
48867: ST_TO_ADDR
// hc_gallery =  ;
48868: LD_ADDR_OWVAR 33
48872: PUSH
48873: LD_STRING 
48875: ST_TO_ADDR
// animal := CreateHuman ;
48876: LD_ADDR_VAR 0 12
48880: PUSH
48881: CALL_OW 44
48885: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48886: LD_VAR 0 12
48890: PPUSH
48891: LD_VAR 0 9
48895: PPUSH
48896: LD_INT 0
48898: PPUSH
48899: CALL 50550 0 3
// end ;
48903: GO 48857
48905: POP
48906: POP
// end ;
48907: LD_VAR 0 10
48911: RET
// export function WantHeal ( sci , unit ) ; begin
48912: LD_INT 0
48914: PPUSH
// if GetTaskList ( sci ) > 0 then
48915: LD_VAR 0 1
48919: PPUSH
48920: CALL_OW 437
48924: PUSH
48925: LD_INT 0
48927: GREATER
48928: IFFALSE 49000
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48930: LD_VAR 0 1
48934: PPUSH
48935: CALL_OW 437
48939: PUSH
48940: LD_INT 1
48942: ARRAY
48943: PUSH
48944: LD_INT 1
48946: ARRAY
48947: PUSH
48948: LD_STRING l
48950: EQUAL
48951: IFFALSE 48978
48953: PUSH
48954: LD_VAR 0 1
48958: PPUSH
48959: CALL_OW 437
48963: PUSH
48964: LD_INT 1
48966: ARRAY
48967: PUSH
48968: LD_INT 4
48970: ARRAY
48971: PUSH
48972: LD_VAR 0 2
48976: EQUAL
48977: AND
48978: IFFALSE 48990
// result := true else
48980: LD_ADDR_VAR 0 3
48984: PUSH
48985: LD_INT 1
48987: ST_TO_ADDR
48988: GO 48998
// result := false ;
48990: LD_ADDR_VAR 0 3
48994: PUSH
48995: LD_INT 0
48997: ST_TO_ADDR
// end else
48998: GO 49008
// result := false ;
49000: LD_ADDR_VAR 0 3
49004: PUSH
49005: LD_INT 0
49007: ST_TO_ADDR
// end ;
49008: LD_VAR 0 3
49012: RET
// export function HealTarget ( sci ) ; begin
49013: LD_INT 0
49015: PPUSH
// if not sci then
49016: LD_VAR 0 1
49020: NOT
49021: IFFALSE 49025
// exit ;
49023: GO 49090
// result := 0 ;
49025: LD_ADDR_VAR 0 2
49029: PUSH
49030: LD_INT 0
49032: ST_TO_ADDR
// if GetTaskList ( sci ) then
49033: LD_VAR 0 1
49037: PPUSH
49038: CALL_OW 437
49042: IFFALSE 49090
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49044: LD_VAR 0 1
49048: PPUSH
49049: CALL_OW 437
49053: PUSH
49054: LD_INT 1
49056: ARRAY
49057: PUSH
49058: LD_INT 1
49060: ARRAY
49061: PUSH
49062: LD_STRING l
49064: EQUAL
49065: IFFALSE 49090
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49067: LD_ADDR_VAR 0 2
49071: PUSH
49072: LD_VAR 0 1
49076: PPUSH
49077: CALL_OW 437
49081: PUSH
49082: LD_INT 1
49084: ARRAY
49085: PUSH
49086: LD_INT 4
49088: ARRAY
49089: ST_TO_ADDR
// end ;
49090: LD_VAR 0 2
49094: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49095: LD_INT 0
49097: PPUSH
49098: PPUSH
49099: PPUSH
49100: PPUSH
// if not base_units then
49101: LD_VAR 0 1
49105: NOT
49106: IFFALSE 49110
// exit ;
49108: GO 49197
// result := false ;
49110: LD_ADDR_VAR 0 2
49114: PUSH
49115: LD_INT 0
49117: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49118: LD_ADDR_VAR 0 5
49122: PUSH
49123: LD_VAR 0 1
49127: PPUSH
49128: LD_INT 21
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PPUSH
49138: CALL_OW 72
49142: ST_TO_ADDR
// if not tmp then
49143: LD_VAR 0 5
49147: NOT
49148: IFFALSE 49152
// exit ;
49150: GO 49197
// for i in tmp do
49152: LD_ADDR_VAR 0 3
49156: PUSH
49157: LD_VAR 0 5
49161: PUSH
49162: FOR_IN
49163: IFFALSE 49195
// begin result := EnemyInRange ( i , 22 ) ;
49165: LD_ADDR_VAR 0 2
49169: PUSH
49170: LD_VAR 0 3
49174: PPUSH
49175: LD_INT 22
49177: PPUSH
49178: CALL 46612 0 2
49182: ST_TO_ADDR
// if result then
49183: LD_VAR 0 2
49187: IFFALSE 49193
// exit ;
49189: POP
49190: POP
49191: GO 49197
// end ;
49193: GO 49162
49195: POP
49196: POP
// end ;
49197: LD_VAR 0 2
49201: RET
// export function FilterByTag ( units , tag ) ; begin
49202: LD_INT 0
49204: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49205: LD_ADDR_VAR 0 3
49209: PUSH
49210: LD_VAR 0 1
49214: PPUSH
49215: LD_INT 120
49217: PUSH
49218: LD_VAR 0 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PPUSH
49227: CALL_OW 72
49231: ST_TO_ADDR
// end ;
49232: LD_VAR 0 3
49236: RET
// export function IsDriver ( un ) ; begin
49237: LD_INT 0
49239: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49240: LD_ADDR_VAR 0 2
49244: PUSH
49245: LD_VAR 0 1
49249: PUSH
49250: LD_INT 55
49252: PUSH
49253: EMPTY
49254: LIST
49255: PPUSH
49256: CALL_OW 69
49260: IN
49261: ST_TO_ADDR
// end ;
49262: LD_VAR 0 2
49266: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49267: LD_INT 0
49269: PPUSH
49270: PPUSH
// list := [ ] ;
49271: LD_ADDR_VAR 0 5
49275: PUSH
49276: EMPTY
49277: ST_TO_ADDR
// case d of 0 :
49278: LD_VAR 0 3
49282: PUSH
49283: LD_INT 0
49285: DOUBLE
49286: EQUAL
49287: IFTRUE 49291
49289: GO 49424
49291: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49292: LD_ADDR_VAR 0 5
49296: PUSH
49297: LD_VAR 0 1
49301: PUSH
49302: LD_INT 4
49304: MINUS
49305: PUSH
49306: LD_VAR 0 2
49310: PUSH
49311: LD_INT 4
49313: MINUS
49314: PUSH
49315: LD_INT 2
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: LIST
49322: PUSH
49323: LD_VAR 0 1
49327: PUSH
49328: LD_INT 3
49330: MINUS
49331: PUSH
49332: LD_VAR 0 2
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: PUSH
49345: LD_VAR 0 1
49349: PUSH
49350: LD_INT 4
49352: PLUS
49353: PUSH
49354: LD_VAR 0 2
49358: PUSH
49359: LD_INT 4
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: LIST
49366: PUSH
49367: LD_VAR 0 1
49371: PUSH
49372: LD_INT 3
49374: PLUS
49375: PUSH
49376: LD_VAR 0 2
49380: PUSH
49381: LD_INT 3
49383: PLUS
49384: PUSH
49385: LD_INT 5
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: PUSH
49393: LD_VAR 0 1
49397: PUSH
49398: LD_VAR 0 2
49402: PUSH
49403: LD_INT 4
49405: PLUS
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: ST_TO_ADDR
// end ; 1 :
49422: GO 50122
49424: LD_INT 1
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49432
49430: GO 49565
49432: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49433: LD_ADDR_VAR 0 5
49437: PUSH
49438: LD_VAR 0 1
49442: PUSH
49443: LD_VAR 0 2
49447: PUSH
49448: LD_INT 4
49450: MINUS
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: LD_VAR 0 1
49464: PUSH
49465: LD_INT 3
49467: MINUS
49468: PUSH
49469: LD_VAR 0 2
49473: PUSH
49474: LD_INT 3
49476: MINUS
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: PUSH
49486: LD_VAR 0 1
49490: PUSH
49491: LD_INT 4
49493: MINUS
49494: PUSH
49495: LD_VAR 0 2
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: PUSH
49508: LD_VAR 0 1
49512: PUSH
49513: LD_VAR 0 2
49517: PUSH
49518: LD_INT 3
49520: PLUS
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: LIST
49529: PUSH
49530: LD_VAR 0 1
49534: PUSH
49535: LD_INT 4
49537: PLUS
49538: PUSH
49539: LD_VAR 0 2
49543: PUSH
49544: LD_INT 4
49546: PLUS
49547: PUSH
49548: LD_INT 5
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: ST_TO_ADDR
// end ; 2 :
49563: GO 50122
49565: LD_INT 2
49567: DOUBLE
49568: EQUAL
49569: IFTRUE 49573
49571: GO 49702
49573: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49574: LD_ADDR_VAR 0 5
49578: PUSH
49579: LD_VAR 0 1
49583: PUSH
49584: LD_VAR 0 2
49588: PUSH
49589: LD_INT 3
49591: MINUS
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: LIST
49600: PUSH
49601: LD_VAR 0 1
49605: PUSH
49606: LD_INT 4
49608: PLUS
49609: PUSH
49610: LD_VAR 0 2
49614: PUSH
49615: LD_INT 4
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: PUSH
49623: LD_VAR 0 1
49627: PUSH
49628: LD_VAR 0 2
49632: PUSH
49633: LD_INT 4
49635: PLUS
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: PUSH
49645: LD_VAR 0 1
49649: PUSH
49650: LD_INT 3
49652: MINUS
49653: PUSH
49654: LD_VAR 0 2
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: PUSH
49667: LD_VAR 0 1
49671: PUSH
49672: LD_INT 4
49674: MINUS
49675: PUSH
49676: LD_VAR 0 2
49680: PUSH
49681: LD_INT 4
49683: MINUS
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: ST_TO_ADDR
// end ; 3 :
49700: GO 50122
49702: LD_INT 3
49704: DOUBLE
49705: EQUAL
49706: IFTRUE 49710
49708: GO 49843
49710: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49711: LD_ADDR_VAR 0 5
49715: PUSH
49716: LD_VAR 0 1
49720: PUSH
49721: LD_INT 3
49723: PLUS
49724: PUSH
49725: LD_VAR 0 2
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: PUSH
49738: LD_VAR 0 1
49742: PUSH
49743: LD_INT 4
49745: PLUS
49746: PUSH
49747: LD_VAR 0 2
49751: PUSH
49752: LD_INT 4
49754: PLUS
49755: PUSH
49756: LD_INT 5
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: PUSH
49764: LD_VAR 0 1
49768: PUSH
49769: LD_INT 4
49771: MINUS
49772: PUSH
49773: LD_VAR 0 2
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: LIST
49785: PUSH
49786: LD_VAR 0 1
49790: PUSH
49791: LD_VAR 0 2
49795: PUSH
49796: LD_INT 4
49798: MINUS
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: LIST
49807: PUSH
49808: LD_VAR 0 1
49812: PUSH
49813: LD_INT 3
49815: MINUS
49816: PUSH
49817: LD_VAR 0 2
49821: PUSH
49822: LD_INT 3
49824: MINUS
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: ST_TO_ADDR
// end ; 4 :
49841: GO 50122
49843: LD_INT 4
49845: DOUBLE
49846: EQUAL
49847: IFTRUE 49851
49849: GO 49984
49851: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49852: LD_ADDR_VAR 0 5
49856: PUSH
49857: LD_VAR 0 1
49861: PUSH
49862: LD_VAR 0 2
49866: PUSH
49867: LD_INT 4
49869: PLUS
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: LIST
49878: PUSH
49879: LD_VAR 0 1
49883: PUSH
49884: LD_INT 3
49886: PLUS
49887: PUSH
49888: LD_VAR 0 2
49892: PUSH
49893: LD_INT 3
49895: PLUS
49896: PUSH
49897: LD_INT 5
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: PUSH
49905: LD_VAR 0 1
49909: PUSH
49910: LD_INT 4
49912: PLUS
49913: PUSH
49914: LD_VAR 0 2
49918: PUSH
49919: LD_INT 4
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: PUSH
49927: LD_VAR 0 1
49931: PUSH
49932: LD_VAR 0 2
49936: PUSH
49937: LD_INT 3
49939: MINUS
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: LD_VAR 0 1
49953: PUSH
49954: LD_INT 4
49956: MINUS
49957: PUSH
49958: LD_VAR 0 2
49962: PUSH
49963: LD_INT 4
49965: MINUS
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// end ; 5 :
49982: GO 50122
49984: LD_INT 5
49986: DOUBLE
49987: EQUAL
49988: IFTRUE 49992
49990: GO 50121
49992: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49993: LD_ADDR_VAR 0 5
49997: PUSH
49998: LD_VAR 0 1
50002: PUSH
50003: LD_INT 4
50005: MINUS
50006: PUSH
50007: LD_VAR 0 2
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: PUSH
50020: LD_VAR 0 1
50024: PUSH
50025: LD_VAR 0 2
50029: PUSH
50030: LD_INT 4
50032: MINUS
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: PUSH
50042: LD_VAR 0 1
50046: PUSH
50047: LD_INT 4
50049: PLUS
50050: PUSH
50051: LD_VAR 0 2
50055: PUSH
50056: LD_INT 4
50058: PLUS
50059: PUSH
50060: LD_INT 5
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: LIST
50067: PUSH
50068: LD_VAR 0 1
50072: PUSH
50073: LD_INT 3
50075: PLUS
50076: PUSH
50077: LD_VAR 0 2
50081: PUSH
50082: LD_INT 4
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: LIST
50089: PUSH
50090: LD_VAR 0 1
50094: PUSH
50095: LD_VAR 0 2
50099: PUSH
50100: LD_INT 3
50102: PLUS
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// end ; end ;
50119: GO 50122
50121: POP
// result := list ;
50122: LD_ADDR_VAR 0 4
50126: PUSH
50127: LD_VAR 0 5
50131: ST_TO_ADDR
// end ;
50132: LD_VAR 0 4
50136: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50137: LD_INT 0
50139: PPUSH
50140: PPUSH
50141: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50142: LD_VAR 0 1
50146: NOT
50147: IFTRUE 50175
50149: PUSH
50150: LD_VAR 0 2
50154: PUSH
50155: LD_INT 1
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 3
50163: PUSH
50164: LD_INT 4
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: IN
50173: NOT
50174: OR
50175: IFFALSE 50179
// exit ;
50177: GO 50262
// tmp := [ ] ;
50179: LD_ADDR_VAR 0 5
50183: PUSH
50184: EMPTY
50185: ST_TO_ADDR
// for i in units do
50186: LD_ADDR_VAR 0 4
50190: PUSH
50191: LD_VAR 0 1
50195: PUSH
50196: FOR_IN
50197: IFFALSE 50231
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
50199: LD_ADDR_VAR 0 5
50203: PUSH
50204: LD_VAR 0 5
50208: PPUSH
50209: LD_VAR 0 4
50213: PPUSH
50214: LD_VAR 0 2
50218: PPUSH
50219: CALL_OW 259
50223: PPUSH
50224: CALL 51657 0 2
50228: ST_TO_ADDR
50229: GO 50196
50231: POP
50232: POP
// if not tmp then
50233: LD_VAR 0 5
50237: NOT
50238: IFFALSE 50242
// exit ;
50240: GO 50262
// result := SortListByListDesc ( units , tmp ) ;
50242: LD_ADDR_VAR 0 3
50246: PUSH
50247: LD_VAR 0 1
50251: PPUSH
50252: LD_VAR 0 5
50256: PPUSH
50257: CALL_OW 77
50261: ST_TO_ADDR
// end ;
50262: LD_VAR 0 3
50266: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50267: LD_INT 0
50269: PPUSH
50270: PPUSH
50271: PPUSH
// result := false ;
50272: LD_ADDR_VAR 0 3
50276: PUSH
50277: LD_INT 0
50279: ST_TO_ADDR
// if not building then
50280: LD_VAR 0 2
50284: NOT
50285: IFFALSE 50289
// exit ;
50287: GO 50433
// x := GetX ( building ) ;
50289: LD_ADDR_VAR 0 4
50293: PUSH
50294: LD_VAR 0 2
50298: PPUSH
50299: CALL_OW 250
50303: ST_TO_ADDR
// y := GetY ( building ) ;
50304: LD_ADDR_VAR 0 5
50308: PUSH
50309: LD_VAR 0 2
50313: PPUSH
50314: CALL_OW 251
50318: ST_TO_ADDR
// if not x or not y then
50319: LD_VAR 0 4
50323: NOT
50324: IFTRUE 50333
50326: PUSH
50327: LD_VAR 0 5
50331: NOT
50332: OR
50333: IFFALSE 50337
// exit ;
50335: GO 50433
// if GetTaskList ( unit ) then
50337: LD_VAR 0 1
50341: PPUSH
50342: CALL_OW 437
50346: IFFALSE 50433
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50348: LD_STRING e
50350: PUSH
50351: LD_VAR 0 1
50355: PPUSH
50356: CALL_OW 437
50360: PUSH
50361: LD_INT 1
50363: ARRAY
50364: PUSH
50365: LD_INT 1
50367: ARRAY
50368: EQUAL
50369: IFFALSE 50396
50371: PUSH
50372: LD_VAR 0 4
50376: PUSH
50377: LD_VAR 0 1
50381: PPUSH
50382: CALL_OW 437
50386: PUSH
50387: LD_INT 1
50389: ARRAY
50390: PUSH
50391: LD_INT 2
50393: ARRAY
50394: EQUAL
50395: AND
50396: IFFALSE 50423
50398: PUSH
50399: LD_VAR 0 5
50403: PUSH
50404: LD_VAR 0 1
50408: PPUSH
50409: CALL_OW 437
50413: PUSH
50414: LD_INT 1
50416: ARRAY
50417: PUSH
50418: LD_INT 3
50420: ARRAY
50421: EQUAL
50422: AND
50423: IFFALSE 50433
// result := true end ;
50425: LD_ADDR_VAR 0 3
50429: PUSH
50430: LD_INT 1
50432: ST_TO_ADDR
// end ;
50433: LD_VAR 0 3
50437: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50438: LD_INT 0
50440: PPUSH
// result := false ;
50441: LD_ADDR_VAR 0 4
50445: PUSH
50446: LD_INT 0
50448: ST_TO_ADDR
// if GetTaskList ( unit ) then
50449: LD_VAR 0 1
50453: PPUSH
50454: CALL_OW 437
50458: IFFALSE 50545
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50460: LD_STRING M
50462: PUSH
50463: LD_VAR 0 1
50467: PPUSH
50468: CALL_OW 437
50472: PUSH
50473: LD_INT 1
50475: ARRAY
50476: PUSH
50477: LD_INT 1
50479: ARRAY
50480: EQUAL
50481: IFFALSE 50508
50483: PUSH
50484: LD_VAR 0 2
50488: PUSH
50489: LD_VAR 0 1
50493: PPUSH
50494: CALL_OW 437
50498: PUSH
50499: LD_INT 1
50501: ARRAY
50502: PUSH
50503: LD_INT 2
50505: ARRAY
50506: EQUAL
50507: AND
50508: IFFALSE 50535
50510: PUSH
50511: LD_VAR 0 3
50515: PUSH
50516: LD_VAR 0 1
50520: PPUSH
50521: CALL_OW 437
50525: PUSH
50526: LD_INT 1
50528: ARRAY
50529: PUSH
50530: LD_INT 3
50532: ARRAY
50533: EQUAL
50534: AND
50535: IFFALSE 50545
// result := true ;
50537: LD_ADDR_VAR 0 4
50541: PUSH
50542: LD_INT 1
50544: ST_TO_ADDR
// end ; end ;
50545: LD_VAR 0 4
50549: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50550: LD_INT 0
50552: PPUSH
50553: PPUSH
50554: PPUSH
50555: PPUSH
// if not unit or not area then
50556: LD_VAR 0 1
50560: NOT
50561: IFTRUE 50570
50563: PUSH
50564: LD_VAR 0 2
50568: NOT
50569: OR
50570: IFFALSE 50574
// exit ;
50572: GO 50750
// tmp := AreaToList ( area , i ) ;
50574: LD_ADDR_VAR 0 6
50578: PUSH
50579: LD_VAR 0 2
50583: PPUSH
50584: LD_VAR 0 5
50588: PPUSH
50589: CALL_OW 517
50593: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50594: LD_ADDR_VAR 0 5
50598: PUSH
50599: DOUBLE
50600: LD_INT 1
50602: DEC
50603: ST_TO_ADDR
50604: LD_VAR 0 6
50608: PUSH
50609: LD_INT 1
50611: ARRAY
50612: PUSH
50613: FOR_TO
50614: IFFALSE 50748
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50616: LD_ADDR_VAR 0 7
50620: PUSH
50621: LD_VAR 0 6
50625: PUSH
50626: LD_INT 1
50628: ARRAY
50629: PUSH
50630: LD_VAR 0 5
50634: ARRAY
50635: PUSH
50636: LD_VAR 0 6
50640: PUSH
50641: LD_INT 2
50643: ARRAY
50644: PUSH
50645: LD_VAR 0 5
50649: ARRAY
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
50655: LD_INT 92
50657: PUSH
50658: LD_VAR 0 7
50662: PUSH
50663: LD_INT 1
50665: ARRAY
50666: PUSH
50667: LD_VAR 0 7
50671: PUSH
50672: LD_INT 2
50674: ARRAY
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: PPUSH
50685: CALL_OW 69
50689: PUSH
50690: LD_INT 0
50692: EQUAL
50693: IFFALSE 50746
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50695: LD_VAR 0 1
50699: PPUSH
50700: LD_VAR 0 7
50704: PUSH
50705: LD_INT 1
50707: ARRAY
50708: PPUSH
50709: LD_VAR 0 7
50713: PUSH
50714: LD_INT 2
50716: ARRAY
50717: PPUSH
50718: LD_VAR 0 3
50722: PPUSH
50723: CALL_OW 48
// result := IsPlaced ( unit ) ;
50727: LD_ADDR_VAR 0 4
50731: PUSH
50732: LD_VAR 0 1
50736: PPUSH
50737: CALL_OW 305
50741: ST_TO_ADDR
// exit ;
50742: POP
50743: POP
50744: GO 50750
// end ; end ;
50746: GO 50613
50748: POP
50749: POP
// end ;
50750: LD_VAR 0 4
50754: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50755: LD_INT 0
50757: PPUSH
50758: PPUSH
50759: PPUSH
// if not side or side > 8 then
50760: LD_VAR 0 1
50764: NOT
50765: IFTRUE 50777
50767: PUSH
50768: LD_VAR 0 1
50772: PUSH
50773: LD_INT 8
50775: GREATER
50776: OR
50777: IFFALSE 50781
// exit ;
50779: GO 50968
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50781: LD_ADDR_VAR 0 4
50785: PUSH
50786: LD_INT 22
50788: PUSH
50789: LD_VAR 0 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 21
50800: PUSH
50801: LD_INT 3
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PPUSH
50812: CALL_OW 69
50816: ST_TO_ADDR
// if not tmp then
50817: LD_VAR 0 4
50821: NOT
50822: IFFALSE 50826
// exit ;
50824: GO 50968
// enable_addtolog := true ;
50826: LD_ADDR_OWVAR 81
50830: PUSH
50831: LD_INT 1
50833: ST_TO_ADDR
// AddToLog ( [ ) ;
50834: LD_STRING [
50836: PPUSH
50837: CALL_OW 561
// for i in tmp do
50841: LD_ADDR_VAR 0 3
50845: PUSH
50846: LD_VAR 0 4
50850: PUSH
50851: FOR_IN
50852: IFFALSE 50959
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50854: LD_STRING [
50856: PUSH
50857: LD_VAR 0 3
50861: PPUSH
50862: CALL_OW 266
50866: STR
50867: PUSH
50868: LD_STRING , 
50870: STR
50871: PUSH
50872: LD_VAR 0 3
50876: PPUSH
50877: CALL_OW 250
50881: STR
50882: PUSH
50883: LD_STRING , 
50885: STR
50886: PUSH
50887: LD_VAR 0 3
50891: PPUSH
50892: CALL_OW 251
50896: STR
50897: PUSH
50898: LD_STRING , 
50900: STR
50901: PUSH
50902: LD_VAR 0 3
50906: PPUSH
50907: CALL_OW 254
50911: STR
50912: PUSH
50913: LD_STRING , 
50915: STR
50916: PUSH
50917: LD_VAR 0 3
50921: PPUSH
50922: LD_INT 1
50924: PPUSH
50925: CALL_OW 268
50929: STR
50930: PUSH
50931: LD_STRING , 
50933: STR
50934: PUSH
50935: LD_VAR 0 3
50939: PPUSH
50940: LD_INT 2
50942: PPUSH
50943: CALL_OW 268
50947: STR
50948: PUSH
50949: LD_STRING ],
50951: STR
50952: PPUSH
50953: CALL_OW 561
// end ;
50957: GO 50851
50959: POP
50960: POP
// AddToLog ( ]; ) ;
50961: LD_STRING ];
50963: PPUSH
50964: CALL_OW 561
// end ;
50968: LD_VAR 0 2
50972: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50973: LD_INT 0
50975: PPUSH
50976: PPUSH
50977: PPUSH
50978: PPUSH
50979: PPUSH
// if not area or not rate or not max then
50980: LD_VAR 0 1
50984: NOT
50985: IFTRUE 50994
50987: PUSH
50988: LD_VAR 0 2
50992: NOT
50993: OR
50994: IFTRUE 51003
50996: PUSH
50997: LD_VAR 0 4
51001: NOT
51002: OR
51003: IFFALSE 51007
// exit ;
51005: GO 51196
// while 1 do
51007: LD_INT 1
51009: IFFALSE 51196
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51011: LD_ADDR_VAR 0 9
51015: PUSH
51016: LD_VAR 0 1
51020: PPUSH
51021: LD_INT 1
51023: PPUSH
51024: CALL_OW 287
51028: PUSH
51029: LD_INT 10
51031: MUL
51032: ST_TO_ADDR
// r := rate / 10 ;
51033: LD_ADDR_VAR 0 7
51037: PUSH
51038: LD_VAR 0 2
51042: PUSH
51043: LD_INT 10
51045: DIVREAL
51046: ST_TO_ADDR
// time := 1 1$00 ;
51047: LD_ADDR_VAR 0 8
51051: PUSH
51052: LD_INT 2100
51054: ST_TO_ADDR
// if amount < min then
51055: LD_VAR 0 9
51059: PUSH
51060: LD_VAR 0 3
51064: LESS
51065: IFFALSE 51083
// r := r * 2 else
51067: LD_ADDR_VAR 0 7
51071: PUSH
51072: LD_VAR 0 7
51076: PUSH
51077: LD_INT 2
51079: MUL
51080: ST_TO_ADDR
51081: GO 51109
// if amount > max then
51083: LD_VAR 0 9
51087: PUSH
51088: LD_VAR 0 4
51092: GREATER
51093: IFFALSE 51109
// r := r / 2 ;
51095: LD_ADDR_VAR 0 7
51099: PUSH
51100: LD_VAR 0 7
51104: PUSH
51105: LD_INT 2
51107: DIVREAL
51108: ST_TO_ADDR
// time := time / r ;
51109: LD_ADDR_VAR 0 8
51113: PUSH
51114: LD_VAR 0 8
51118: PUSH
51119: LD_VAR 0 7
51123: DIVREAL
51124: ST_TO_ADDR
// if time < 0 then
51125: LD_VAR 0 8
51129: PUSH
51130: LD_INT 0
51132: LESS
51133: IFFALSE 51150
// time := time * - 1 ;
51135: LD_ADDR_VAR 0 8
51139: PUSH
51140: LD_VAR 0 8
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: MUL
51149: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51150: LD_VAR 0 8
51154: PUSH
51155: LD_INT 35
51157: PPUSH
51158: LD_INT 875
51160: PPUSH
51161: CALL_OW 12
51165: PLUS
51166: PPUSH
51167: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51171: LD_INT 1
51173: PPUSH
51174: LD_INT 5
51176: PPUSH
51177: CALL_OW 12
51181: PPUSH
51182: LD_VAR 0 1
51186: PPUSH
51187: LD_INT 1
51189: PPUSH
51190: CALL_OW 55
// end ;
51194: GO 51007
// end ;
51196: LD_VAR 0 5
51200: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51201: LD_INT 0
51203: PPUSH
51204: PPUSH
51205: PPUSH
51206: PPUSH
51207: PPUSH
51208: PPUSH
51209: PPUSH
51210: PPUSH
// if not turrets or not factories then
51211: LD_VAR 0 1
51215: NOT
51216: IFTRUE 51225
51218: PUSH
51219: LD_VAR 0 2
51223: NOT
51224: OR
51225: IFFALSE 51229
// exit ;
51227: GO 51536
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51229: LD_ADDR_VAR 0 10
51233: PUSH
51234: LD_INT 5
51236: PUSH
51237: LD_INT 6
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: LD_INT 4
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: LD_INT 5
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 24
51271: PUSH
51272: LD_INT 25
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 23
51281: PUSH
51282: LD_INT 27
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 42
51295: PUSH
51296: LD_INT 43
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 44
51305: PUSH
51306: LD_INT 46
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 45
51315: PUSH
51316: LD_INT 47
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// result := [ ] ;
51333: LD_ADDR_VAR 0 3
51337: PUSH
51338: EMPTY
51339: ST_TO_ADDR
// for i in turrets do
51340: LD_ADDR_VAR 0 4
51344: PUSH
51345: LD_VAR 0 1
51349: PUSH
51350: FOR_IN
51351: IFFALSE 51534
// begin nat := GetNation ( i ) ;
51353: LD_ADDR_VAR 0 7
51357: PUSH
51358: LD_VAR 0 4
51362: PPUSH
51363: CALL_OW 248
51367: ST_TO_ADDR
// weapon := 0 ;
51368: LD_ADDR_VAR 0 8
51372: PUSH
51373: LD_INT 0
51375: ST_TO_ADDR
// if not nat then
51376: LD_VAR 0 7
51380: NOT
51381: IFFALSE 51385
// continue ;
51383: GO 51350
// for j in list [ nat ] do
51385: LD_ADDR_VAR 0 5
51389: PUSH
51390: LD_VAR 0 10
51394: PUSH
51395: LD_VAR 0 7
51399: ARRAY
51400: PUSH
51401: FOR_IN
51402: IFFALSE 51443
// if GetBWeapon ( i ) = j [ 1 ] then
51404: LD_VAR 0 4
51408: PPUSH
51409: CALL_OW 269
51413: PUSH
51414: LD_VAR 0 5
51418: PUSH
51419: LD_INT 1
51421: ARRAY
51422: EQUAL
51423: IFFALSE 51441
// begin weapon := j [ 2 ] ;
51425: LD_ADDR_VAR 0 8
51429: PUSH
51430: LD_VAR 0 5
51434: PUSH
51435: LD_INT 2
51437: ARRAY
51438: ST_TO_ADDR
// break ;
51439: GO 51443
// end ;
51441: GO 51401
51443: POP
51444: POP
// if not weapon then
51445: LD_VAR 0 8
51449: NOT
51450: IFFALSE 51454
// continue ;
51452: GO 51350
// for k in factories do
51454: LD_ADDR_VAR 0 6
51458: PUSH
51459: LD_VAR 0 2
51463: PUSH
51464: FOR_IN
51465: IFFALSE 51530
// begin weapons := AvailableWeaponList ( k ) ;
51467: LD_ADDR_VAR 0 9
51471: PUSH
51472: LD_VAR 0 6
51476: PPUSH
51477: CALL_OW 478
51481: ST_TO_ADDR
// if not weapons then
51482: LD_VAR 0 9
51486: NOT
51487: IFFALSE 51491
// continue ;
51489: GO 51464
// if weapon in weapons then
51491: LD_VAR 0 8
51495: PUSH
51496: LD_VAR 0 9
51500: IN
51501: IFFALSE 51528
// begin result := [ i , weapon ] ;
51503: LD_ADDR_VAR 0 3
51507: PUSH
51508: LD_VAR 0 4
51512: PUSH
51513: LD_VAR 0 8
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// exit ;
51522: POP
51523: POP
51524: POP
51525: POP
51526: GO 51536
// end ; end ;
51528: GO 51464
51530: POP
51531: POP
// end ;
51532: GO 51350
51534: POP
51535: POP
// end ;
51536: LD_VAR 0 3
51540: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51541: LD_INT 0
51543: PPUSH
// if not side or side > 8 then
51544: LD_VAR 0 3
51548: NOT
51549: IFTRUE 51561
51551: PUSH
51552: LD_VAR 0 3
51556: PUSH
51557: LD_INT 8
51559: GREATER
51560: OR
51561: IFFALSE 51565
// exit ;
51563: GO 51624
// if not range then
51565: LD_VAR 0 4
51569: NOT
51570: IFFALSE 51581
// range := - 12 ;
51572: LD_ADDR_VAR 0 4
51576: PUSH
51577: LD_INT 12
51579: NEG
51580: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51581: LD_VAR 0 1
51585: PPUSH
51586: LD_VAR 0 2
51590: PPUSH
51591: LD_VAR 0 3
51595: PPUSH
51596: LD_VAR 0 4
51600: PPUSH
51601: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51605: LD_VAR 0 1
51609: PPUSH
51610: LD_VAR 0 2
51614: PPUSH
51615: LD_VAR 0 3
51619: PPUSH
51620: CALL_OW 331
// end ;
51624: LD_VAR 0 5
51628: RET
// export function Video ( mode ) ; begin
51629: LD_INT 0
51631: PPUSH
// ingame_video = mode ;
51632: LD_ADDR_OWVAR 52
51636: PUSH
51637: LD_VAR 0 1
51641: ST_TO_ADDR
// interface_hidden = mode ;
51642: LD_ADDR_OWVAR 54
51646: PUSH
51647: LD_VAR 0 1
51651: ST_TO_ADDR
// end ;
51652: LD_VAR 0 2
51656: RET
// export function Join ( array , element ) ; begin
51657: LD_INT 0
51659: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51660: LD_ADDR_VAR 0 3
51664: PUSH
51665: LD_VAR 0 1
51669: PPUSH
51670: LD_VAR 0 1
51674: PUSH
51675: LD_INT 1
51677: PLUS
51678: PPUSH
51679: LD_VAR 0 2
51683: PPUSH
51684: CALL_OW 1
51688: ST_TO_ADDR
// end ;
51689: LD_VAR 0 3
51693: RET
// export function JoinUnion ( array , element ) ; begin
51694: LD_INT 0
51696: PPUSH
// result := array union element ;
51697: LD_ADDR_VAR 0 3
51701: PUSH
51702: LD_VAR 0 1
51706: PUSH
51707: LD_VAR 0 2
51711: UNION
51712: ST_TO_ADDR
// end ;
51713: LD_VAR 0 3
51717: RET
// export function GetBehemoths ( side ) ; begin
51718: LD_INT 0
51720: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51721: LD_ADDR_VAR 0 2
51725: PUSH
51726: LD_INT 22
51728: PUSH
51729: LD_VAR 0 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 31
51740: PUSH
51741: LD_INT 25
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PPUSH
51752: CALL_OW 69
51756: ST_TO_ADDR
// end ;
51757: LD_VAR 0 2
51761: RET
// export function Shuffle ( array ) ; var i , index ; begin
51762: LD_INT 0
51764: PPUSH
51765: PPUSH
51766: PPUSH
// result := [ ] ;
51767: LD_ADDR_VAR 0 2
51771: PUSH
51772: EMPTY
51773: ST_TO_ADDR
// if not array then
51774: LD_VAR 0 1
51778: NOT
51779: IFFALSE 51783
// exit ;
51781: GO 51882
// Randomize ;
51783: CALL_OW 10
// for i = array downto 1 do
51787: LD_ADDR_VAR 0 3
51791: PUSH
51792: DOUBLE
51793: LD_VAR 0 1
51797: INC
51798: ST_TO_ADDR
51799: LD_INT 1
51801: PUSH
51802: FOR_DOWNTO
51803: IFFALSE 51880
// begin index := rand ( 1 , array ) ;
51805: LD_ADDR_VAR 0 4
51809: PUSH
51810: LD_INT 1
51812: PPUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 12
51822: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51823: LD_ADDR_VAR 0 2
51827: PUSH
51828: LD_VAR 0 2
51832: PPUSH
51833: LD_VAR 0 2
51837: PUSH
51838: LD_INT 1
51840: PLUS
51841: PPUSH
51842: LD_VAR 0 1
51846: PUSH
51847: LD_VAR 0 4
51851: ARRAY
51852: PPUSH
51853: CALL_OW 2
51857: ST_TO_ADDR
// array := Delete ( array , index ) ;
51858: LD_ADDR_VAR 0 1
51862: PUSH
51863: LD_VAR 0 1
51867: PPUSH
51868: LD_VAR 0 4
51872: PPUSH
51873: CALL_OW 3
51877: ST_TO_ADDR
// end ;
51878: GO 51802
51880: POP
51881: POP
// end ;
51882: LD_VAR 0 2
51886: RET
// export function GetBaseMaterials ( base ) ; begin
51887: LD_INT 0
51889: PPUSH
// result := [ 0 , 0 , 0 ] ;
51890: LD_ADDR_VAR 0 2
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: ST_TO_ADDR
// if not base then
51909: LD_VAR 0 1
51913: NOT
51914: IFFALSE 51918
// exit ;
51916: GO 51967
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51918: LD_ADDR_VAR 0 2
51922: PUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: LD_INT 1
51930: PPUSH
51931: CALL_OW 275
51935: PUSH
51936: LD_VAR 0 1
51940: PPUSH
51941: LD_INT 2
51943: PPUSH
51944: CALL_OW 275
51948: PUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: LD_INT 3
51956: PPUSH
51957: CALL_OW 275
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// end ;
51967: LD_VAR 0 2
51971: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51972: LD_INT 0
51974: PPUSH
51975: PPUSH
// result := array ;
51976: LD_ADDR_VAR 0 3
51980: PUSH
51981: LD_VAR 0 1
51985: ST_TO_ADDR
// if size >= result then
51986: LD_VAR 0 2
51990: PUSH
51991: LD_VAR 0 3
51995: GREATEREQUAL
51996: IFFALSE 52000
// exit ;
51998: GO 52050
// if size then
52000: LD_VAR 0 2
52004: IFFALSE 52050
// for i := array downto size do
52006: LD_ADDR_VAR 0 4
52010: PUSH
52011: DOUBLE
52012: LD_VAR 0 1
52016: INC
52017: ST_TO_ADDR
52018: LD_VAR 0 2
52022: PUSH
52023: FOR_DOWNTO
52024: IFFALSE 52048
// result := Delete ( result , result ) ;
52026: LD_ADDR_VAR 0 3
52030: PUSH
52031: LD_VAR 0 3
52035: PPUSH
52036: LD_VAR 0 3
52040: PPUSH
52041: CALL_OW 3
52045: ST_TO_ADDR
52046: GO 52023
52048: POP
52049: POP
// end ;
52050: LD_VAR 0 3
52054: RET
// export function ComExit ( unit ) ; var tmp ; begin
52055: LD_INT 0
52057: PPUSH
52058: PPUSH
// if not IsInUnit ( unit ) then
52059: LD_VAR 0 1
52063: PPUSH
52064: CALL_OW 310
52068: NOT
52069: IFFALSE 52073
// exit ;
52071: GO 52133
// tmp := IsInUnit ( unit ) ;
52073: LD_ADDR_VAR 0 3
52077: PUSH
52078: LD_VAR 0 1
52082: PPUSH
52083: CALL_OW 310
52087: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52088: LD_VAR 0 3
52092: PPUSH
52093: CALL_OW 247
52097: PUSH
52098: LD_INT 2
52100: EQUAL
52101: IFFALSE 52114
// ComExitVehicle ( unit ) else
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 121
52112: GO 52123
// ComExitBuilding ( unit ) ;
52114: LD_VAR 0 1
52118: PPUSH
52119: CALL_OW 122
// result := tmp ;
52123: LD_ADDR_VAR 0 2
52127: PUSH
52128: LD_VAR 0 3
52132: ST_TO_ADDR
// end ;
52133: LD_VAR 0 2
52137: RET
// export function ComExitAll ( units ) ; var i ; begin
52138: LD_INT 0
52140: PPUSH
52141: PPUSH
// if not units then
52142: LD_VAR 0 1
52146: NOT
52147: IFFALSE 52151
// exit ;
52149: GO 52177
// for i in units do
52151: LD_ADDR_VAR 0 3
52155: PUSH
52156: LD_VAR 0 1
52160: PUSH
52161: FOR_IN
52162: IFFALSE 52175
// ComExit ( i ) ;
52164: LD_VAR 0 3
52168: PPUSH
52169: CALL 52055 0 1
52173: GO 52161
52175: POP
52176: POP
// end ;
52177: LD_VAR 0 2
52181: RET
// export function ResetHc ; begin
52182: LD_INT 0
52184: PPUSH
// InitHc ;
52185: CALL_OW 19
// hc_importance := 0 ;
52189: LD_ADDR_OWVAR 32
52193: PUSH
52194: LD_INT 0
52196: ST_TO_ADDR
// end ;
52197: LD_VAR 0 1
52201: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52202: LD_INT 0
52204: PPUSH
52205: PPUSH
52206: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52207: LD_ADDR_VAR 0 6
52211: PUSH
52212: LD_VAR 0 1
52216: PUSH
52217: LD_VAR 0 3
52221: PLUS
52222: PUSH
52223: LD_INT 2
52225: DIV
52226: ST_TO_ADDR
// if _x < 0 then
52227: LD_VAR 0 6
52231: PUSH
52232: LD_INT 0
52234: LESS
52235: IFFALSE 52252
// _x := _x * - 1 ;
52237: LD_ADDR_VAR 0 6
52241: PUSH
52242: LD_VAR 0 6
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: MUL
52251: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52252: LD_ADDR_VAR 0 7
52256: PUSH
52257: LD_VAR 0 2
52261: PUSH
52262: LD_VAR 0 4
52266: PLUS
52267: PUSH
52268: LD_INT 2
52270: DIV
52271: ST_TO_ADDR
// if _y < 0 then
52272: LD_VAR 0 7
52276: PUSH
52277: LD_INT 0
52279: LESS
52280: IFFALSE 52297
// _y := _y * - 1 ;
52282: LD_ADDR_VAR 0 7
52286: PUSH
52287: LD_VAR 0 7
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: MUL
52296: ST_TO_ADDR
// result := [ _x , _y ] ;
52297: LD_ADDR_VAR 0 5
52301: PUSH
52302: LD_VAR 0 6
52306: PUSH
52307: LD_VAR 0 7
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// end ;
52316: LD_VAR 0 5
52320: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52321: LD_INT 0
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
// task := GetTaskList ( unit ) ;
52327: LD_ADDR_VAR 0 7
52331: PUSH
52332: LD_VAR 0 1
52336: PPUSH
52337: CALL_OW 437
52341: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52342: LD_VAR 0 7
52346: NOT
52347: IFFALSE 52366
52349: PUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: LD_VAR 0 2
52359: PPUSH
52360: CALL_OW 308
52364: NOT
52365: AND
52366: IFFALSE 52370
// exit ;
52368: GO 52488
// if IsInArea ( unit , area ) then
52370: LD_VAR 0 1
52374: PPUSH
52375: LD_VAR 0 2
52379: PPUSH
52380: CALL_OW 308
52384: IFFALSE 52402
// begin ComMoveToArea ( unit , goAway ) ;
52386: LD_VAR 0 1
52390: PPUSH
52391: LD_VAR 0 3
52395: PPUSH
52396: CALL_OW 113
// exit ;
52400: GO 52488
// end ; if task [ 1 ] [ 1 ] <> M then
52402: LD_VAR 0 7
52406: PUSH
52407: LD_INT 1
52409: ARRAY
52410: PUSH
52411: LD_INT 1
52413: ARRAY
52414: PUSH
52415: LD_STRING M
52417: NONEQUAL
52418: IFFALSE 52422
// exit ;
52420: GO 52488
// x := task [ 1 ] [ 2 ] ;
52422: LD_ADDR_VAR 0 5
52426: PUSH
52427: LD_VAR 0 7
52431: PUSH
52432: LD_INT 1
52434: ARRAY
52435: PUSH
52436: LD_INT 2
52438: ARRAY
52439: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52440: LD_ADDR_VAR 0 6
52444: PUSH
52445: LD_VAR 0 7
52449: PUSH
52450: LD_INT 1
52452: ARRAY
52453: PUSH
52454: LD_INT 3
52456: ARRAY
52457: ST_TO_ADDR
// if InArea ( x , y , area ) then
52458: LD_VAR 0 5
52462: PPUSH
52463: LD_VAR 0 6
52467: PPUSH
52468: LD_VAR 0 2
52472: PPUSH
52473: CALL_OW 309
52477: IFFALSE 52488
// ComStop ( unit ) ;
52479: LD_VAR 0 1
52483: PPUSH
52484: CALL_OW 141
// end ;
52488: LD_VAR 0 4
52492: RET
// export function Abs ( value ) ; begin
52493: LD_INT 0
52495: PPUSH
// result := value ;
52496: LD_ADDR_VAR 0 2
52500: PUSH
52501: LD_VAR 0 1
52505: ST_TO_ADDR
// if value < 0 then
52506: LD_VAR 0 1
52510: PUSH
52511: LD_INT 0
52513: LESS
52514: IFFALSE 52531
// result := value * - 1 ;
52516: LD_ADDR_VAR 0 2
52520: PUSH
52521: LD_VAR 0 1
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: MUL
52530: ST_TO_ADDR
// end ;
52531: LD_VAR 0 2
52535: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52536: LD_INT 0
52538: PPUSH
52539: PPUSH
52540: PPUSH
52541: PPUSH
52542: PPUSH
52543: PPUSH
52544: PPUSH
52545: PPUSH
// if not unit or not building then
52546: LD_VAR 0 1
52550: NOT
52551: IFTRUE 52560
52553: PUSH
52554: LD_VAR 0 2
52558: NOT
52559: OR
52560: IFFALSE 52564
// exit ;
52562: GO 52792
// x := GetX ( building ) ;
52564: LD_ADDR_VAR 0 4
52568: PUSH
52569: LD_VAR 0 2
52573: PPUSH
52574: CALL_OW 250
52578: ST_TO_ADDR
// y := GetY ( building ) ;
52579: LD_ADDR_VAR 0 6
52583: PUSH
52584: LD_VAR 0 2
52588: PPUSH
52589: CALL_OW 251
52593: ST_TO_ADDR
// d := GetDir ( building ) ;
52594: LD_ADDR_VAR 0 8
52598: PUSH
52599: LD_VAR 0 2
52603: PPUSH
52604: CALL_OW 254
52608: ST_TO_ADDR
// r := 4 ;
52609: LD_ADDR_VAR 0 9
52613: PUSH
52614: LD_INT 4
52616: ST_TO_ADDR
// for i := 1 to 5 do
52617: LD_ADDR_VAR 0 10
52621: PUSH
52622: DOUBLE
52623: LD_INT 1
52625: DEC
52626: ST_TO_ADDR
52627: LD_INT 5
52629: PUSH
52630: FOR_TO
52631: IFFALSE 52790
// begin _x := ShiftX ( x , d , r + i ) ;
52633: LD_ADDR_VAR 0 5
52637: PUSH
52638: LD_VAR 0 4
52642: PPUSH
52643: LD_VAR 0 8
52647: PPUSH
52648: LD_VAR 0 9
52652: PUSH
52653: LD_VAR 0 10
52657: PLUS
52658: PPUSH
52659: CALL_OW 272
52663: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52664: LD_ADDR_VAR 0 7
52668: PUSH
52669: LD_VAR 0 6
52673: PPUSH
52674: LD_VAR 0 8
52678: PPUSH
52679: LD_VAR 0 9
52683: PUSH
52684: LD_VAR 0 10
52688: PLUS
52689: PPUSH
52690: CALL_OW 273
52694: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52695: LD_VAR 0 5
52699: PPUSH
52700: LD_VAR 0 7
52704: PPUSH
52705: CALL_OW 488
52709: IFFALSE 52744
52711: PUSH
52712: LD_VAR 0 5
52716: PPUSH
52717: LD_VAR 0 7
52721: PPUSH
52722: CALL_OW 428
52726: PPUSH
52727: CALL_OW 247
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: IN
52742: NOT
52743: AND
52744: IFFALSE 52788
// begin ComMoveXY ( unit , _x , _y ) ;
52746: LD_VAR 0 1
52750: PPUSH
52751: LD_VAR 0 5
52755: PPUSH
52756: LD_VAR 0 7
52760: PPUSH
52761: CALL_OW 111
// result := [ _x , _y ] ;
52765: LD_ADDR_VAR 0 3
52769: PUSH
52770: LD_VAR 0 5
52774: PUSH
52775: LD_VAR 0 7
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: ST_TO_ADDR
// exit ;
52784: POP
52785: POP
52786: GO 52792
// end ; end ;
52788: GO 52630
52790: POP
52791: POP
// end ;
52792: LD_VAR 0 3
52796: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52797: LD_INT 0
52799: PPUSH
52800: PPUSH
52801: PPUSH
// result := 0 ;
52802: LD_ADDR_VAR 0 3
52806: PUSH
52807: LD_INT 0
52809: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52810: LD_VAR 0 1
52814: PUSH
52815: LD_INT 0
52817: LESS
52818: IFTRUE 52830
52820: PUSH
52821: LD_VAR 0 1
52825: PUSH
52826: LD_INT 8
52828: GREATER
52829: OR
52830: IFTRUE 52842
52832: PUSH
52833: LD_VAR 0 2
52837: PUSH
52838: LD_INT 0
52840: LESS
52841: OR
52842: IFTRUE 52854
52844: PUSH
52845: LD_VAR 0 2
52849: PUSH
52850: LD_INT 8
52852: GREATER
52853: OR
52854: IFFALSE 52858
// exit ;
52856: GO 52933
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52858: LD_ADDR_VAR 0 4
52862: PUSH
52863: LD_INT 22
52865: PUSH
52866: LD_VAR 0 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PPUSH
52875: CALL_OW 69
52879: PUSH
52880: FOR_IN
52881: IFFALSE 52931
// begin un := UnitShoot ( i ) ;
52883: LD_ADDR_VAR 0 5
52887: PUSH
52888: LD_VAR 0 4
52892: PPUSH
52893: CALL_OW 504
52897: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52898: LD_VAR 0 5
52902: PPUSH
52903: CALL_OW 255
52907: PUSH
52908: LD_VAR 0 1
52912: EQUAL
52913: IFFALSE 52929
// begin result := un ;
52915: LD_ADDR_VAR 0 3
52919: PUSH
52920: LD_VAR 0 5
52924: ST_TO_ADDR
// exit ;
52925: POP
52926: POP
52927: GO 52933
// end ; end ;
52929: GO 52880
52931: POP
52932: POP
// end ;
52933: LD_VAR 0 3
52937: RET
// export function GetCargoBay ( units ) ; begin
52938: LD_INT 0
52940: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
52941: LD_ADDR_VAR 0 2
52945: PUSH
52946: LD_VAR 0 1
52950: PPUSH
52951: LD_INT 2
52953: PUSH
52954: LD_INT 34
52956: PUSH
52957: LD_INT 12
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 34
52966: PUSH
52967: LD_INT 51
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 34
52976: PUSH
52977: LD_INT 32
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 34
52986: PUSH
52987: LD_INT 89
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: PPUSH
53001: CALL_OW 72
53005: ST_TO_ADDR
// end ;
53006: LD_VAR 0 2
53010: RET
// export function Negate ( value ) ; begin
53011: LD_INT 0
53013: PPUSH
// result := not value ;
53014: LD_ADDR_VAR 0 2
53018: PUSH
53019: LD_VAR 0 1
53023: NOT
53024: ST_TO_ADDR
// end ;
53025: LD_VAR 0 2
53029: RET
// export function Inc ( value ) ; begin
53030: LD_INT 0
53032: PPUSH
// result := value + 1 ;
53033: LD_ADDR_VAR 0 2
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_INT 1
53045: PLUS
53046: ST_TO_ADDR
// end ;
53047: LD_VAR 0 2
53051: RET
// export function Dec ( value ) ; begin
53052: LD_INT 0
53054: PPUSH
// result := value - 1 ;
53055: LD_ADDR_VAR 0 2
53059: PUSH
53060: LD_VAR 0 1
53064: PUSH
53065: LD_INT 1
53067: MINUS
53068: ST_TO_ADDR
// end ;
53069: LD_VAR 0 2
53073: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
53074: LD_INT 0
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
53084: LD_VAR 0 1
53088: PPUSH
53089: LD_VAR 0 2
53093: PPUSH
53094: CALL_OW 488
53098: NOT
53099: IFTRUE 53118
53101: PUSH
53102: LD_VAR 0 3
53106: PPUSH
53107: LD_VAR 0 4
53111: PPUSH
53112: CALL_OW 488
53116: NOT
53117: OR
53118: IFFALSE 53131
// begin result := - 1 ;
53120: LD_ADDR_VAR 0 5
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: ST_TO_ADDR
// exit ;
53129: GO 53366
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
53131: LD_ADDR_VAR 0 12
53135: PUSH
53136: LD_VAR 0 1
53140: PPUSH
53141: LD_VAR 0 2
53145: PPUSH
53146: LD_VAR 0 3
53150: PPUSH
53151: LD_VAR 0 4
53155: PPUSH
53156: CALL 52202 0 4
53160: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53161: LD_ADDR_VAR 0 11
53165: PUSH
53166: LD_VAR 0 1
53170: PPUSH
53171: LD_VAR 0 2
53175: PPUSH
53176: LD_VAR 0 12
53180: PUSH
53181: LD_INT 1
53183: ARRAY
53184: PPUSH
53185: LD_VAR 0 12
53189: PUSH
53190: LD_INT 2
53192: ARRAY
53193: PPUSH
53194: CALL_OW 298
53198: ST_TO_ADDR
// distance := 9999 ;
53199: LD_ADDR_VAR 0 10
53203: PUSH
53204: LD_INT 9999
53206: ST_TO_ADDR
// for i := 0 to 5 do
53207: LD_ADDR_VAR 0 6
53211: PUSH
53212: DOUBLE
53213: LD_INT 0
53215: DEC
53216: ST_TO_ADDR
53217: LD_INT 5
53219: PUSH
53220: FOR_TO
53221: IFFALSE 53364
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53223: LD_ADDR_VAR 0 7
53227: PUSH
53228: LD_VAR 0 1
53232: PPUSH
53233: LD_VAR 0 6
53237: PPUSH
53238: LD_VAR 0 11
53242: PPUSH
53243: CALL_OW 272
53247: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53248: LD_ADDR_VAR 0 8
53252: PUSH
53253: LD_VAR 0 2
53257: PPUSH
53258: LD_VAR 0 6
53262: PPUSH
53263: LD_VAR 0 11
53267: PPUSH
53268: CALL_OW 273
53272: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53273: LD_VAR 0 7
53277: PPUSH
53278: LD_VAR 0 8
53282: PPUSH
53283: CALL_OW 488
53287: NOT
53288: IFFALSE 53292
// continue ;
53290: GO 53220
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53292: LD_ADDR_VAR 0 9
53296: PUSH
53297: LD_VAR 0 12
53301: PUSH
53302: LD_INT 1
53304: ARRAY
53305: PPUSH
53306: LD_VAR 0 12
53310: PUSH
53311: LD_INT 2
53313: ARRAY
53314: PPUSH
53315: LD_VAR 0 7
53319: PPUSH
53320: LD_VAR 0 8
53324: PPUSH
53325: CALL_OW 298
53329: ST_TO_ADDR
// if tmp < distance then
53330: LD_VAR 0 9
53334: PUSH
53335: LD_VAR 0 10
53339: LESS
53340: IFFALSE 53362
// begin result := i ;
53342: LD_ADDR_VAR 0 5
53346: PUSH
53347: LD_VAR 0 6
53351: ST_TO_ADDR
// distance := tmp ;
53352: LD_ADDR_VAR 0 10
53356: PUSH
53357: LD_VAR 0 9
53361: ST_TO_ADDR
// end ; end ;
53362: GO 53220
53364: POP
53365: POP
// end ;
53366: LD_VAR 0 5
53370: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53371: LD_INT 0
53373: PPUSH
53374: PPUSH
// if not driver or not IsInUnit ( driver ) then
53375: LD_VAR 0 1
53379: NOT
53380: IFTRUE 53394
53382: PUSH
53383: LD_VAR 0 1
53387: PPUSH
53388: CALL_OW 310
53392: NOT
53393: OR
53394: IFFALSE 53398
// exit ;
53396: GO 53488
// vehicle := IsInUnit ( driver ) ;
53398: LD_ADDR_VAR 0 3
53402: PUSH
53403: LD_VAR 0 1
53407: PPUSH
53408: CALL_OW 310
53412: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53413: LD_VAR 0 1
53417: PPUSH
53418: LD_STRING \
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: PUSH
53448: LD_STRING E
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: LD_VAR 0 3
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PPUSH
53484: CALL_OW 446
// end ;
53488: LD_VAR 0 2
53492: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53493: LD_INT 0
53495: PPUSH
53496: PPUSH
// if not driver or not IsInUnit ( driver ) then
53497: LD_VAR 0 1
53501: NOT
53502: IFTRUE 53516
53504: PUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: CALL_OW 310
53514: NOT
53515: OR
53516: IFFALSE 53520
// exit ;
53518: GO 53610
// vehicle := IsInUnit ( driver ) ;
53520: LD_ADDR_VAR 0 3
53524: PUSH
53525: LD_VAR 0 1
53529: PPUSH
53530: CALL_OW 310
53534: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53535: LD_VAR 0 1
53539: PPUSH
53540: LD_STRING \
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: PUSH
53570: LD_STRING E
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: LD_INT 0
53578: PUSH
53579: LD_VAR 0 3
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PPUSH
53606: CALL_OW 447
// end ;
53610: LD_VAR 0 2
53614: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53615: LD_INT 0
53617: PPUSH
53618: PPUSH
53619: PPUSH
// tmp := [ ] ;
53620: LD_ADDR_VAR 0 5
53624: PUSH
53625: EMPTY
53626: ST_TO_ADDR
// for i in units do
53627: LD_ADDR_VAR 0 4
53631: PUSH
53632: LD_VAR 0 1
53636: PUSH
53637: FOR_IN
53638: IFFALSE 53676
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53640: LD_ADDR_VAR 0 5
53644: PUSH
53645: LD_VAR 0 5
53649: PPUSH
53650: LD_VAR 0 5
53654: PUSH
53655: LD_INT 1
53657: PLUS
53658: PPUSH
53659: LD_VAR 0 4
53663: PPUSH
53664: CALL_OW 256
53668: PPUSH
53669: CALL_OW 2
53673: ST_TO_ADDR
53674: GO 53637
53676: POP
53677: POP
// if not tmp then
53678: LD_VAR 0 5
53682: NOT
53683: IFFALSE 53687
// exit ;
53685: GO 53735
// if asc then
53687: LD_VAR 0 2
53691: IFFALSE 53715
// result := SortListByListAsc ( units , tmp ) else
53693: LD_ADDR_VAR 0 3
53697: PUSH
53698: LD_VAR 0 1
53702: PPUSH
53703: LD_VAR 0 5
53707: PPUSH
53708: CALL_OW 76
53712: ST_TO_ADDR
53713: GO 53735
// result := SortListByListDesc ( units , tmp ) ;
53715: LD_ADDR_VAR 0 3
53719: PUSH
53720: LD_VAR 0 1
53724: PPUSH
53725: LD_VAR 0 5
53729: PPUSH
53730: CALL_OW 77
53734: ST_TO_ADDR
// end ;
53735: LD_VAR 0 3
53739: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53740: LD_INT 0
53742: PPUSH
53743: PPUSH
// task := GetTaskList ( mech ) ;
53744: LD_ADDR_VAR 0 4
53748: PUSH
53749: LD_VAR 0 1
53753: PPUSH
53754: CALL_OW 437
53758: ST_TO_ADDR
// if not task then
53759: LD_VAR 0 4
53763: NOT
53764: IFFALSE 53768
// exit ;
53766: GO 53812
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53768: LD_ADDR_VAR 0 3
53772: PUSH
53773: LD_VAR 0 4
53777: PUSH
53778: LD_INT 1
53780: ARRAY
53781: PUSH
53782: LD_INT 1
53784: ARRAY
53785: PUSH
53786: LD_STRING r
53788: EQUAL
53789: IFFALSE 53811
53791: PUSH
53792: LD_VAR 0 4
53796: PUSH
53797: LD_INT 1
53799: ARRAY
53800: PUSH
53801: LD_INT 4
53803: ARRAY
53804: PUSH
53805: LD_VAR 0 2
53809: EQUAL
53810: AND
53811: ST_TO_ADDR
// end ;
53812: LD_VAR 0 3
53816: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53817: LD_INT 0
53819: PPUSH
// SetDir ( unit , d ) ;
53820: LD_VAR 0 1
53824: PPUSH
53825: LD_VAR 0 4
53829: PPUSH
53830: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
53834: LD_ADDR_VAR 0 6
53838: PUSH
53839: LD_VAR 0 1
53843: PPUSH
53844: LD_VAR 0 2
53848: PPUSH
53849: LD_VAR 0 3
53853: PPUSH
53854: LD_VAR 0 5
53858: PPUSH
53859: CALL_OW 48
53863: ST_TO_ADDR
// end ;
53864: LD_VAR 0 6
53868: RET
// export function ToNaturalNumber ( number ) ; begin
53869: LD_INT 0
53871: PPUSH
// result := number div 1 ;
53872: LD_ADDR_VAR 0 2
53876: PUSH
53877: LD_VAR 0 1
53881: PUSH
53882: LD_INT 1
53884: DIV
53885: ST_TO_ADDR
// if number < 0 then
53886: LD_VAR 0 1
53890: PUSH
53891: LD_INT 0
53893: LESS
53894: IFFALSE 53904
// result := 0 ;
53896: LD_ADDR_VAR 0 2
53900: PUSH
53901: LD_INT 0
53903: ST_TO_ADDR
// end ;
53904: LD_VAR 0 2
53908: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
53909: LD_INT 0
53911: PPUSH
53912: PPUSH
53913: PPUSH
// if not buildings then
53914: LD_VAR 0 1
53918: NOT
53919: IFFALSE 53923
// exit ;
53921: GO 54038
// tmp := [ ] ;
53923: LD_ADDR_VAR 0 5
53927: PUSH
53928: EMPTY
53929: ST_TO_ADDR
// for b in buildings do
53930: LD_ADDR_VAR 0 4
53934: PUSH
53935: LD_VAR 0 1
53939: PUSH
53940: FOR_IN
53941: IFFALSE 53979
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
53943: LD_ADDR_VAR 0 5
53947: PUSH
53948: LD_VAR 0 5
53952: PPUSH
53953: LD_VAR 0 5
53957: PUSH
53958: LD_INT 1
53960: PLUS
53961: PPUSH
53962: LD_VAR 0 4
53966: PPUSH
53967: CALL_OW 266
53971: PPUSH
53972: CALL_OW 1
53976: ST_TO_ADDR
53977: GO 53940
53979: POP
53980: POP
// if not tmp then
53981: LD_VAR 0 5
53985: NOT
53986: IFFALSE 53990
// exit ;
53988: GO 54038
// if asc then
53990: LD_VAR 0 2
53994: IFFALSE 54018
// result := SortListByListAsc ( buildings , tmp ) else
53996: LD_ADDR_VAR 0 3
54000: PUSH
54001: LD_VAR 0 1
54005: PPUSH
54006: LD_VAR 0 5
54010: PPUSH
54011: CALL_OW 76
54015: ST_TO_ADDR
54016: GO 54038
// result := SortListByListDesc ( buildings , tmp ) ;
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_VAR 0 1
54027: PPUSH
54028: LD_VAR 0 5
54032: PPUSH
54033: CALL_OW 77
54037: ST_TO_ADDR
// end ;
54038: LD_VAR 0 3
54042: RET
// export function SortByClass ( units , class ) ; var un ; begin
54043: LD_INT 0
54045: PPUSH
54046: PPUSH
// if not units or not class then
54047: LD_VAR 0 1
54051: NOT
54052: IFTRUE 54061
54054: PUSH
54055: LD_VAR 0 2
54059: NOT
54060: OR
54061: IFFALSE 54065
// exit ;
54063: GO 54160
// result := [ ] ;
54065: LD_ADDR_VAR 0 3
54069: PUSH
54070: EMPTY
54071: ST_TO_ADDR
// for un in units do
54072: LD_ADDR_VAR 0 4
54076: PUSH
54077: LD_VAR 0 1
54081: PUSH
54082: FOR_IN
54083: IFFALSE 54158
// if GetClass ( un ) = class then
54085: LD_VAR 0 4
54089: PPUSH
54090: CALL_OW 257
54094: PUSH
54095: LD_VAR 0 2
54099: EQUAL
54100: IFFALSE 54127
// result := Insert ( result , 1 , un ) else
54102: LD_ADDR_VAR 0 3
54106: PUSH
54107: LD_VAR 0 3
54111: PPUSH
54112: LD_INT 1
54114: PPUSH
54115: LD_VAR 0 4
54119: PPUSH
54120: CALL_OW 2
54124: ST_TO_ADDR
54125: GO 54156
// result := Replace ( result , result + 1 , un ) ;
54127: LD_ADDR_VAR 0 3
54131: PUSH
54132: LD_VAR 0 3
54136: PPUSH
54137: LD_VAR 0 3
54141: PUSH
54142: LD_INT 1
54144: PLUS
54145: PPUSH
54146: LD_VAR 0 4
54150: PPUSH
54151: CALL_OW 1
54155: ST_TO_ADDR
54156: GO 54082
54158: POP
54159: POP
// end ;
54160: LD_VAR 0 3
54164: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
54165: LD_INT 0
54167: PPUSH
54168: PPUSH
54169: PPUSH
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
// result := [ ] ;
54174: LD_ADDR_VAR 0 4
54178: PUSH
54179: EMPTY
54180: ST_TO_ADDR
// if x - r < 0 then
54181: LD_VAR 0 1
54185: PUSH
54186: LD_VAR 0 3
54190: MINUS
54191: PUSH
54192: LD_INT 0
54194: LESS
54195: IFFALSE 54207
// min_x := 0 else
54197: LD_ADDR_VAR 0 8
54201: PUSH
54202: LD_INT 0
54204: ST_TO_ADDR
54205: GO 54223
// min_x := x - r ;
54207: LD_ADDR_VAR 0 8
54211: PUSH
54212: LD_VAR 0 1
54216: PUSH
54217: LD_VAR 0 3
54221: MINUS
54222: ST_TO_ADDR
// if y - r < 0 then
54223: LD_VAR 0 2
54227: PUSH
54228: LD_VAR 0 3
54232: MINUS
54233: PUSH
54234: LD_INT 0
54236: LESS
54237: IFFALSE 54249
// min_y := 0 else
54239: LD_ADDR_VAR 0 7
54243: PUSH
54244: LD_INT 0
54246: ST_TO_ADDR
54247: GO 54265
// min_y := y - r ;
54249: LD_ADDR_VAR 0 7
54253: PUSH
54254: LD_VAR 0 2
54258: PUSH
54259: LD_VAR 0 3
54263: MINUS
54264: ST_TO_ADDR
// max_x := x + r ;
54265: LD_ADDR_VAR 0 9
54269: PUSH
54270: LD_VAR 0 1
54274: PUSH
54275: LD_VAR 0 3
54279: PLUS
54280: ST_TO_ADDR
// max_y := y + r ;
54281: LD_ADDR_VAR 0 10
54285: PUSH
54286: LD_VAR 0 2
54290: PUSH
54291: LD_VAR 0 3
54295: PLUS
54296: ST_TO_ADDR
// for _x = min_x to max_x do
54297: LD_ADDR_VAR 0 5
54301: PUSH
54302: DOUBLE
54303: LD_VAR 0 8
54307: DEC
54308: ST_TO_ADDR
54309: LD_VAR 0 9
54313: PUSH
54314: FOR_TO
54315: IFFALSE 54416
// for _y = min_y to max_y do
54317: LD_ADDR_VAR 0 6
54321: PUSH
54322: DOUBLE
54323: LD_VAR 0 7
54327: DEC
54328: ST_TO_ADDR
54329: LD_VAR 0 10
54333: PUSH
54334: FOR_TO
54335: IFFALSE 54412
// begin if not ValidHex ( _x , _y ) then
54337: LD_VAR 0 5
54341: PPUSH
54342: LD_VAR 0 6
54346: PPUSH
54347: CALL_OW 488
54351: NOT
54352: IFFALSE 54356
// continue ;
54354: GO 54334
// if GetResourceTypeXY ( _x , _y ) then
54356: LD_VAR 0 5
54360: PPUSH
54361: LD_VAR 0 6
54365: PPUSH
54366: CALL_OW 283
54370: IFFALSE 54410
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54372: LD_ADDR_VAR 0 4
54376: PUSH
54377: LD_VAR 0 4
54381: PPUSH
54382: LD_VAR 0 4
54386: PUSH
54387: LD_INT 1
54389: PLUS
54390: PPUSH
54391: LD_VAR 0 5
54395: PUSH
54396: LD_VAR 0 6
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PPUSH
54405: CALL_OW 1
54409: ST_TO_ADDR
// end ;
54410: GO 54334
54412: POP
54413: POP
54414: GO 54314
54416: POP
54417: POP
// end ;
54418: LD_VAR 0 4
54422: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54423: LD_INT 0
54425: PPUSH
54426: PPUSH
54427: PPUSH
54428: PPUSH
54429: PPUSH
54430: PPUSH
54431: PPUSH
54432: PPUSH
// if not units then
54433: LD_VAR 0 1
54437: NOT
54438: IFFALSE 54442
// exit ;
54440: GO 54974
// result := UnitFilter ( units , [ f_ok ] ) ;
54442: LD_ADDR_VAR 0 3
54446: PUSH
54447: LD_VAR 0 1
54451: PPUSH
54452: LD_INT 50
54454: PUSH
54455: EMPTY
54456: LIST
54457: PPUSH
54458: CALL_OW 72
54462: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54463: LD_ADDR_VAR 0 8
54467: PUSH
54468: LD_VAR 0 1
54472: PUSH
54473: LD_INT 1
54475: ARRAY
54476: PPUSH
54477: CALL_OW 255
54481: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
54482: LD_ADDR_VAR 0 10
54486: PUSH
54487: LD_INT 29
54489: PUSH
54490: LD_INT 91
54492: PUSH
54493: LD_INT 49
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: ST_TO_ADDR
// if not result then
54501: LD_VAR 0 3
54505: NOT
54506: IFFALSE 54510
// exit ;
54508: GO 54974
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54510: LD_ADDR_VAR 0 5
54514: PUSH
54515: LD_INT 81
54517: PUSH
54518: LD_VAR 0 8
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PPUSH
54527: CALL_OW 69
54531: ST_TO_ADDR
// for i in result do
54532: LD_ADDR_VAR 0 4
54536: PUSH
54537: LD_VAR 0 3
54541: PUSH
54542: FOR_IN
54543: IFFALSE 54972
// begin tag := GetTag ( i ) + 1 ;
54545: LD_ADDR_VAR 0 9
54549: PUSH
54550: LD_VAR 0 4
54554: PPUSH
54555: CALL_OW 110
54559: PUSH
54560: LD_INT 1
54562: PLUS
54563: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
54564: LD_ADDR_VAR 0 7
54568: PUSH
54569: LD_VAR 0 4
54573: PPUSH
54574: CALL_OW 250
54578: PPUSH
54579: LD_VAR 0 4
54583: PPUSH
54584: CALL_OW 251
54588: PPUSH
54589: LD_INT 4
54591: PPUSH
54592: CALL 54165 0 3
54596: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
54597: LD_VAR 0 4
54601: PPUSH
54602: CALL_OW 247
54606: PUSH
54607: LD_INT 2
54609: EQUAL
54610: IFFALSE 54622
54612: PUSH
54613: LD_VAR 0 7
54617: PUSH
54618: LD_INT 2
54620: GREATER
54621: AND
54622: IFFALSE 54642
54624: PUSH
54625: LD_VAR 0 4
54629: PPUSH
54630: CALL_OW 264
54634: PUSH
54635: LD_VAR 0 10
54639: IN
54640: NOT
54641: AND
54642: IFFALSE 54681
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54644: LD_VAR 0 4
54648: PPUSH
54649: LD_VAR 0 7
54653: PUSH
54654: LD_INT 1
54656: ARRAY
54657: PUSH
54658: LD_INT 1
54660: ARRAY
54661: PPUSH
54662: LD_VAR 0 7
54666: PUSH
54667: LD_INT 1
54669: ARRAY
54670: PUSH
54671: LD_INT 2
54673: ARRAY
54674: PPUSH
54675: CALL_OW 116
54679: GO 54970
// if path > tag then
54681: LD_VAR 0 2
54685: PUSH
54686: LD_VAR 0 9
54690: GREATER
54691: IFFALSE 54899
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54693: LD_ADDR_VAR 0 6
54697: PUSH
54698: LD_VAR 0 5
54702: PPUSH
54703: LD_INT 91
54705: PUSH
54706: LD_VAR 0 4
54710: PUSH
54711: LD_INT 8
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: PPUSH
54719: CALL_OW 72
54723: ST_TO_ADDR
// if nearEnemy then
54724: LD_VAR 0 6
54728: IFFALSE 54797
// begin if GetWeapon ( i ) = ru_time_lapser then
54730: LD_VAR 0 4
54734: PPUSH
54735: CALL_OW 264
54739: PUSH
54740: LD_INT 49
54742: EQUAL
54743: IFFALSE 54771
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54745: LD_VAR 0 4
54749: PPUSH
54750: LD_VAR 0 6
54754: PPUSH
54755: LD_VAR 0 4
54759: PPUSH
54760: CALL_OW 74
54764: PPUSH
54765: CALL_OW 112
54769: GO 54795
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54771: LD_VAR 0 4
54775: PPUSH
54776: LD_VAR 0 6
54780: PPUSH
54781: LD_VAR 0 4
54785: PPUSH
54786: CALL_OW 74
54790: PPUSH
54791: CALL 56055 0 2
// end else
54795: GO 54897
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54797: LD_VAR 0 4
54801: PPUSH
54802: LD_VAR 0 2
54806: PUSH
54807: LD_VAR 0 9
54811: ARRAY
54812: PUSH
54813: LD_INT 1
54815: ARRAY
54816: PPUSH
54817: LD_VAR 0 2
54821: PUSH
54822: LD_VAR 0 9
54826: ARRAY
54827: PUSH
54828: LD_INT 2
54830: ARRAY
54831: PPUSH
54832: CALL_OW 297
54836: PUSH
54837: LD_INT 6
54839: GREATER
54840: IFFALSE 54883
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54842: LD_VAR 0 4
54846: PPUSH
54847: LD_VAR 0 2
54851: PUSH
54852: LD_VAR 0 9
54856: ARRAY
54857: PUSH
54858: LD_INT 1
54860: ARRAY
54861: PPUSH
54862: LD_VAR 0 2
54866: PUSH
54867: LD_VAR 0 9
54871: ARRAY
54872: PUSH
54873: LD_INT 2
54875: ARRAY
54876: PPUSH
54877: CALL_OW 114
54881: GO 54897
// SetTag ( i , tag ) ;
54883: LD_VAR 0 4
54887: PPUSH
54888: LD_VAR 0 9
54892: PPUSH
54893: CALL_OW 109
// end else
54897: GO 54970
// if enemy then
54899: LD_VAR 0 5
54903: IFFALSE 54970
// begin if GetWeapon ( i ) = ru_time_lapser then
54905: LD_VAR 0 4
54909: PPUSH
54910: CALL_OW 264
54914: PUSH
54915: LD_INT 49
54917: EQUAL
54918: IFFALSE 54946
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54920: LD_VAR 0 4
54924: PPUSH
54925: LD_VAR 0 5
54929: PPUSH
54930: LD_VAR 0 4
54934: PPUSH
54935: CALL_OW 74
54939: PPUSH
54940: CALL_OW 112
54944: GO 54970
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54946: LD_VAR 0 4
54950: PPUSH
54951: LD_VAR 0 5
54955: PPUSH
54956: LD_VAR 0 4
54960: PPUSH
54961: CALL_OW 74
54965: PPUSH
54966: CALL 56055 0 2
// end ; end ;
54970: GO 54542
54972: POP
54973: POP
// end ;
54974: LD_VAR 0 3
54978: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54979: LD_INT 0
54981: PPUSH
54982: PPUSH
54983: PPUSH
// if not unit or IsInUnit ( unit ) then
54984: LD_VAR 0 1
54988: NOT
54989: IFTRUE 55002
54991: PUSH
54992: LD_VAR 0 1
54996: PPUSH
54997: CALL_OW 310
55001: OR
55002: IFFALSE 55006
// exit ;
55004: GO 55097
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55006: LD_ADDR_VAR 0 4
55010: PUSH
55011: LD_VAR 0 1
55015: PPUSH
55016: CALL_OW 250
55020: PPUSH
55021: LD_VAR 0 2
55025: PPUSH
55026: LD_INT 1
55028: PPUSH
55029: CALL_OW 272
55033: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55034: LD_ADDR_VAR 0 5
55038: PUSH
55039: LD_VAR 0 1
55043: PPUSH
55044: CALL_OW 251
55048: PPUSH
55049: LD_VAR 0 2
55053: PPUSH
55054: LD_INT 1
55056: PPUSH
55057: CALL_OW 273
55061: ST_TO_ADDR
// if ValidHex ( x , y ) then
55062: LD_VAR 0 4
55066: PPUSH
55067: LD_VAR 0 5
55071: PPUSH
55072: CALL_OW 488
55076: IFFALSE 55097
// ComTurnXY ( unit , x , y ) ;
55078: LD_VAR 0 1
55082: PPUSH
55083: LD_VAR 0 4
55087: PPUSH
55088: LD_VAR 0 5
55092: PPUSH
55093: CALL_OW 118
// end ;
55097: LD_VAR 0 3
55101: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55102: LD_INT 0
55104: PPUSH
55105: PPUSH
// result := false ;
55106: LD_ADDR_VAR 0 3
55110: PUSH
55111: LD_INT 0
55113: ST_TO_ADDR
// if not units then
55114: LD_VAR 0 2
55118: NOT
55119: IFFALSE 55123
// exit ;
55121: GO 55168
// for i in units do
55123: LD_ADDR_VAR 0 4
55127: PUSH
55128: LD_VAR 0 2
55132: PUSH
55133: FOR_IN
55134: IFFALSE 55166
// if See ( side , i ) then
55136: LD_VAR 0 1
55140: PPUSH
55141: LD_VAR 0 4
55145: PPUSH
55146: CALL_OW 292
55150: IFFALSE 55164
// begin result := true ;
55152: LD_ADDR_VAR 0 3
55156: PUSH
55157: LD_INT 1
55159: ST_TO_ADDR
// exit ;
55160: POP
55161: POP
55162: GO 55168
// end ;
55164: GO 55133
55166: POP
55167: POP
// end ;
55168: LD_VAR 0 3
55172: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
55173: LD_INT 0
55175: PPUSH
55176: PPUSH
55177: PPUSH
55178: PPUSH
// if not unit or not points then
55179: LD_VAR 0 1
55183: NOT
55184: IFTRUE 55193
55186: PUSH
55187: LD_VAR 0 2
55191: NOT
55192: OR
55193: IFFALSE 55197
// exit ;
55195: GO 55287
// dist := 99999 ;
55197: LD_ADDR_VAR 0 5
55201: PUSH
55202: LD_INT 99999
55204: ST_TO_ADDR
// for i in points do
55205: LD_ADDR_VAR 0 4
55209: PUSH
55210: LD_VAR 0 2
55214: PUSH
55215: FOR_IN
55216: IFFALSE 55285
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
55218: LD_ADDR_VAR 0 6
55222: PUSH
55223: LD_VAR 0 1
55227: PPUSH
55228: LD_VAR 0 4
55232: PUSH
55233: LD_INT 1
55235: ARRAY
55236: PPUSH
55237: LD_VAR 0 4
55241: PUSH
55242: LD_INT 2
55244: ARRAY
55245: PPUSH
55246: CALL_OW 297
55250: ST_TO_ADDR
// if tmpDist < dist then
55251: LD_VAR 0 6
55255: PUSH
55256: LD_VAR 0 5
55260: LESS
55261: IFFALSE 55283
// begin result := i ;
55263: LD_ADDR_VAR 0 3
55267: PUSH
55268: LD_VAR 0 4
55272: ST_TO_ADDR
// dist := tmpDist ;
55273: LD_ADDR_VAR 0 5
55277: PUSH
55278: LD_VAR 0 6
55282: ST_TO_ADDR
// end ; end ;
55283: GO 55215
55285: POP
55286: POP
// end ;
55287: LD_VAR 0 3
55291: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
55292: LD_INT 0
55294: PPUSH
// uc_side := side ;
55295: LD_ADDR_OWVAR 20
55299: PUSH
55300: LD_VAR 0 1
55304: ST_TO_ADDR
// uc_nation := 3 ;
55305: LD_ADDR_OWVAR 21
55309: PUSH
55310: LD_INT 3
55312: ST_TO_ADDR
// vc_chassis := 25 ;
55313: LD_ADDR_OWVAR 37
55317: PUSH
55318: LD_INT 25
55320: ST_TO_ADDR
// vc_engine := engine_siberite ;
55321: LD_ADDR_OWVAR 39
55325: PUSH
55326: LD_INT 3
55328: ST_TO_ADDR
// vc_control := control_computer ;
55329: LD_ADDR_OWVAR 38
55333: PUSH
55334: LD_INT 3
55336: ST_TO_ADDR
// vc_weapon := 59 ;
55337: LD_ADDR_OWVAR 40
55341: PUSH
55342: LD_INT 59
55344: ST_TO_ADDR
// result := CreateVehicle ;
55345: LD_ADDR_VAR 0 5
55349: PUSH
55350: CALL_OW 45
55354: ST_TO_ADDR
// SetDir ( result , d ) ;
55355: LD_VAR 0 5
55359: PPUSH
55360: LD_VAR 0 4
55364: PPUSH
55365: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55369: LD_VAR 0 5
55373: PPUSH
55374: LD_VAR 0 2
55378: PPUSH
55379: LD_VAR 0 3
55383: PPUSH
55384: LD_INT 0
55386: PPUSH
55387: CALL_OW 48
// end ;
55391: LD_VAR 0 5
55395: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55396: LD_INT 0
55398: PPUSH
55399: PPUSH
55400: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55401: LD_ADDR_VAR 0 2
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
55424: LD_VAR 0 1
55428: NOT
55429: IFTRUE 55462
55431: PUSH
55432: LD_VAR 0 1
55436: PPUSH
55437: CALL_OW 264
55441: PUSH
55442: LD_INT 12
55444: PUSH
55445: LD_INT 51
55447: PUSH
55448: LD_INT 32
55450: PUSH
55451: LD_INT 89
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: IN
55460: NOT
55461: OR
55462: IFFALSE 55466
// exit ;
55464: GO 55564
// for i := 1 to 3 do
55466: LD_ADDR_VAR 0 3
55470: PUSH
55471: DOUBLE
55472: LD_INT 1
55474: DEC
55475: ST_TO_ADDR
55476: LD_INT 3
55478: PUSH
55479: FOR_TO
55480: IFFALSE 55562
// begin tmp := GetCargo ( cargo , i ) ;
55482: LD_ADDR_VAR 0 4
55486: PUSH
55487: LD_VAR 0 1
55491: PPUSH
55492: LD_VAR 0 3
55496: PPUSH
55497: CALL_OW 289
55501: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55502: LD_ADDR_VAR 0 2
55506: PUSH
55507: LD_VAR 0 2
55511: PPUSH
55512: LD_VAR 0 3
55516: PPUSH
55517: LD_VAR 0 4
55521: PPUSH
55522: CALL_OW 1
55526: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55527: LD_ADDR_VAR 0 2
55531: PUSH
55532: LD_VAR 0 2
55536: PPUSH
55537: LD_INT 4
55539: PPUSH
55540: LD_VAR 0 2
55544: PUSH
55545: LD_INT 4
55547: ARRAY
55548: PUSH
55549: LD_VAR 0 4
55553: PLUS
55554: PPUSH
55555: CALL_OW 1
55559: ST_TO_ADDR
// end ;
55560: GO 55479
55562: POP
55563: POP
// end ;
55564: LD_VAR 0 2
55568: RET
// export function Length ( array ) ; begin
55569: LD_INT 0
55571: PPUSH
// result := array + 0 ;
55572: LD_ADDR_VAR 0 2
55576: PUSH
55577: LD_VAR 0 1
55581: PUSH
55582: LD_INT 0
55584: PLUS
55585: ST_TO_ADDR
// end ;
55586: LD_VAR 0 2
55590: RET
// export function PrepareArray ( array ) ; begin
55591: LD_INT 0
55593: PPUSH
// result := array diff 0 ;
55594: LD_ADDR_VAR 0 2
55598: PUSH
55599: LD_VAR 0 1
55603: PUSH
55604: LD_INT 0
55606: DIFF
55607: ST_TO_ADDR
// if not result [ 1 ] then
55608: LD_VAR 0 2
55612: PUSH
55613: LD_INT 1
55615: ARRAY
55616: NOT
55617: IFFALSE 55637
// result := Delete ( result , 1 ) ;
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_VAR 0 2
55628: PPUSH
55629: LD_INT 1
55631: PPUSH
55632: CALL_OW 3
55636: ST_TO_ADDR
// end ;
55637: LD_VAR 0 2
55641: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
55642: LD_INT 0
55644: PPUSH
55645: PPUSH
55646: PPUSH
55647: PPUSH
// sibRocketRange := 25 ;
55648: LD_ADDR_VAR 0 6
55652: PUSH
55653: LD_INT 25
55655: ST_TO_ADDR
// result := false ;
55656: LD_ADDR_VAR 0 4
55660: PUSH
55661: LD_INT 0
55663: ST_TO_ADDR
// for i := 0 to 5 do
55664: LD_ADDR_VAR 0 5
55668: PUSH
55669: DOUBLE
55670: LD_INT 0
55672: DEC
55673: ST_TO_ADDR
55674: LD_INT 5
55676: PUSH
55677: FOR_TO
55678: IFFALSE 55745
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
55680: LD_VAR 0 1
55684: PPUSH
55685: LD_VAR 0 5
55689: PPUSH
55690: LD_VAR 0 6
55694: PPUSH
55695: CALL_OW 272
55699: PPUSH
55700: LD_VAR 0 2
55704: PPUSH
55705: LD_VAR 0 5
55709: PPUSH
55710: LD_VAR 0 6
55714: PPUSH
55715: CALL_OW 273
55719: PPUSH
55720: LD_VAR 0 3
55724: PPUSH
55725: CALL_OW 309
55729: IFFALSE 55743
// begin result := true ;
55731: LD_ADDR_VAR 0 4
55735: PUSH
55736: LD_INT 1
55738: ST_TO_ADDR
// exit ;
55739: POP
55740: POP
55741: GO 55747
// end ;
55743: GO 55677
55745: POP
55746: POP
// end ;
55747: LD_VAR 0 4
55751: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
55752: LD_INT 0
55754: PPUSH
55755: PPUSH
55756: PPUSH
// if btype = b_depot then
55757: LD_VAR 0 2
55761: PUSH
55762: LD_INT 0
55764: EQUAL
55765: IFFALSE 55777
// begin result := true ;
55767: LD_ADDR_VAR 0 3
55771: PUSH
55772: LD_INT 1
55774: ST_TO_ADDR
// exit ;
55775: GO 55897
// end ; pom := GetBase ( depot ) ;
55777: LD_ADDR_VAR 0 4
55781: PUSH
55782: LD_VAR 0 1
55786: PPUSH
55787: CALL_OW 274
55791: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55792: LD_ADDR_VAR 0 5
55796: PUSH
55797: LD_VAR 0 2
55801: PPUSH
55802: LD_VAR 0 1
55806: PPUSH
55807: CALL_OW 248
55811: PPUSH
55812: CALL_OW 450
55816: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
55817: LD_ADDR_VAR 0 3
55821: PUSH
55822: LD_VAR 0 4
55826: PPUSH
55827: LD_INT 1
55829: PPUSH
55830: CALL_OW 275
55834: PUSH
55835: LD_VAR 0 5
55839: PUSH
55840: LD_INT 1
55842: ARRAY
55843: GREATEREQUAL
55844: IFFALSE 55870
55846: PUSH
55847: LD_VAR 0 4
55851: PPUSH
55852: LD_INT 2
55854: PPUSH
55855: CALL_OW 275
55859: PUSH
55860: LD_VAR 0 5
55864: PUSH
55865: LD_INT 2
55867: ARRAY
55868: GREATEREQUAL
55869: AND
55870: IFFALSE 55896
55872: PUSH
55873: LD_VAR 0 4
55877: PPUSH
55878: LD_INT 3
55880: PPUSH
55881: CALL_OW 275
55885: PUSH
55886: LD_VAR 0 5
55890: PUSH
55891: LD_INT 3
55893: ARRAY
55894: GREATEREQUAL
55895: AND
55896: ST_TO_ADDR
// end ;
55897: LD_VAR 0 3
55901: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
55902: LD_INT 0
55904: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
55905: LD_VAR 0 1
55909: PPUSH
55910: LD_VAR 0 2
55914: PPUSH
55915: LD_INT 0
55917: PPUSH
55918: LD_INT 0
55920: PPUSH
55921: LD_INT 1
55923: PPUSH
55924: LD_INT 0
55926: PPUSH
55927: CALL_OW 587
// end ;
55931: LD_VAR 0 3
55935: RET
// export function CenterOnNow ( unit ) ; begin
55936: LD_INT 0
55938: PPUSH
// result := IsInUnit ( unit ) ;
55939: LD_ADDR_VAR 0 2
55943: PUSH
55944: LD_VAR 0 1
55948: PPUSH
55949: CALL_OW 310
55953: ST_TO_ADDR
// if not result then
55954: LD_VAR 0 2
55958: NOT
55959: IFFALSE 55971
// result := unit ;
55961: LD_ADDR_VAR 0 2
55965: PUSH
55966: LD_VAR 0 1
55970: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
55971: LD_VAR 0 1
55975: PPUSH
55976: CALL_OW 87
// end ;
55980: LD_VAR 0 2
55984: RET
// export function ComMoveHex ( unit , hex ) ; begin
55985: LD_INT 0
55987: PPUSH
// if not hex then
55988: LD_VAR 0 2
55992: NOT
55993: IFFALSE 55997
// exit ;
55995: GO 56050
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
55997: LD_VAR 0 2
56001: PUSH
56002: LD_INT 1
56004: ARRAY
56005: PPUSH
56006: LD_VAR 0 2
56010: PUSH
56011: LD_INT 2
56013: ARRAY
56014: PPUSH
56015: CALL_OW 428
56019: IFFALSE 56023
// exit ;
56021: GO 56050
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56023: LD_VAR 0 1
56027: PPUSH
56028: LD_VAR 0 2
56032: PUSH
56033: LD_INT 1
56035: ARRAY
56036: PPUSH
56037: LD_VAR 0 2
56041: PUSH
56042: LD_INT 2
56044: ARRAY
56045: PPUSH
56046: CALL_OW 111
// end ;
56050: LD_VAR 0 3
56054: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56055: LD_INT 0
56057: PPUSH
56058: PPUSH
56059: PPUSH
// if not unit or not enemy then
56060: LD_VAR 0 1
56064: NOT
56065: IFTRUE 56074
56067: PUSH
56068: LD_VAR 0 2
56072: NOT
56073: OR
56074: IFFALSE 56078
// exit ;
56076: GO 56204
// x := GetX ( enemy ) ;
56078: LD_ADDR_VAR 0 4
56082: PUSH
56083: LD_VAR 0 2
56087: PPUSH
56088: CALL_OW 250
56092: ST_TO_ADDR
// y := GetY ( enemy ) ;
56093: LD_ADDR_VAR 0 5
56097: PUSH
56098: LD_VAR 0 2
56102: PPUSH
56103: CALL_OW 251
56107: ST_TO_ADDR
// if ValidHex ( x , y ) then
56108: LD_VAR 0 4
56112: PPUSH
56113: LD_VAR 0 5
56117: PPUSH
56118: CALL_OW 488
56122: IFFALSE 56204
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
56124: LD_VAR 0 2
56128: PPUSH
56129: CALL_OW 247
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: IN
56144: IFTRUE 56167
56146: PUSH
56147: LD_VAR 0 1
56151: PPUSH
56152: CALL_OW 255
56156: PPUSH
56157: LD_VAR 0 2
56161: PPUSH
56162: CALL_OW 292
56166: OR
56167: IFFALSE 56185
// ComAttackUnit ( unit , enemy ) else
56169: LD_VAR 0 1
56173: PPUSH
56174: LD_VAR 0 2
56178: PPUSH
56179: CALL_OW 115
56183: GO 56204
// ComAgressiveMove ( unit , x , y ) ;
56185: LD_VAR 0 1
56189: PPUSH
56190: LD_VAR 0 4
56194: PPUSH
56195: LD_VAR 0 5
56199: PPUSH
56200: CALL_OW 114
// end ;
56204: LD_VAR 0 3
56208: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
56209: LD_INT 0
56211: PPUSH
56212: PPUSH
56213: PPUSH
// list := AreaToList ( area , 0 ) ;
56214: LD_ADDR_VAR 0 5
56218: PUSH
56219: LD_VAR 0 1
56223: PPUSH
56224: LD_INT 0
56226: PPUSH
56227: CALL_OW 517
56231: ST_TO_ADDR
// if not list then
56232: LD_VAR 0 5
56236: NOT
56237: IFFALSE 56241
// exit ;
56239: GO 56371
// if all then
56241: LD_VAR 0 2
56245: IFFALSE 56333
// begin for i := 1 to list [ 1 ] do
56247: LD_ADDR_VAR 0 4
56251: PUSH
56252: DOUBLE
56253: LD_INT 1
56255: DEC
56256: ST_TO_ADDR
56257: LD_VAR 0 5
56261: PUSH
56262: LD_INT 1
56264: ARRAY
56265: PUSH
56266: FOR_TO
56267: IFFALSE 56329
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_VAR 0 3
56278: PPUSH
56279: LD_VAR 0 3
56283: PUSH
56284: LD_INT 1
56286: PLUS
56287: PPUSH
56288: LD_VAR 0 5
56292: PUSH
56293: LD_INT 1
56295: ARRAY
56296: PUSH
56297: LD_VAR 0 4
56301: ARRAY
56302: PUSH
56303: LD_VAR 0 5
56307: PUSH
56308: LD_INT 2
56310: ARRAY
56311: PUSH
56312: LD_VAR 0 4
56316: ARRAY
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PPUSH
56322: CALL_OW 1
56326: ST_TO_ADDR
56327: GO 56266
56329: POP
56330: POP
// exit ;
56331: GO 56371
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
56333: LD_ADDR_VAR 0 3
56337: PUSH
56338: LD_VAR 0 5
56342: PUSH
56343: LD_INT 1
56345: ARRAY
56346: PUSH
56347: LD_INT 1
56349: ARRAY
56350: PUSH
56351: LD_VAR 0 5
56355: PUSH
56356: LD_INT 2
56358: ARRAY
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: ST_TO_ADDR
// end ;
56371: LD_VAR 0 3
56375: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
56376: LD_INT 0
56378: PPUSH
56379: PPUSH
// list := AreaToList ( area , 0 ) ;
56380: LD_ADDR_VAR 0 4
56384: PUSH
56385: LD_VAR 0 1
56389: PPUSH
56390: LD_INT 0
56392: PPUSH
56393: CALL_OW 517
56397: ST_TO_ADDR
// if not list then
56398: LD_VAR 0 4
56402: NOT
56403: IFFALSE 56407
// exit ;
56405: GO 56448
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
56407: LD_ADDR_VAR 0 3
56411: PUSH
56412: LD_VAR 0 4
56416: PUSH
56417: LD_INT 1
56419: ARRAY
56420: PUSH
56421: LD_INT 1
56423: ARRAY
56424: PUSH
56425: LD_VAR 0 4
56429: PUSH
56430: LD_INT 2
56432: ARRAY
56433: PUSH
56434: LD_INT 1
56436: ARRAY
56437: PUSH
56438: LD_VAR 0 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: LIST
56447: ST_TO_ADDR
// end ;
56448: LD_VAR 0 3
56452: RET
// export function First ( array ) ; begin
56453: LD_INT 0
56455: PPUSH
// if not array then
56456: LD_VAR 0 1
56460: NOT
56461: IFFALSE 56465
// exit ;
56463: GO 56479
// result := array [ 1 ] ;
56465: LD_ADDR_VAR 0 2
56469: PUSH
56470: LD_VAR 0 1
56474: PUSH
56475: LD_INT 1
56477: ARRAY
56478: ST_TO_ADDR
// end ;
56479: LD_VAR 0 2
56483: RET
// export function Last ( array ) ; begin
56484: LD_INT 0
56486: PPUSH
// if not array then
56487: LD_VAR 0 1
56491: NOT
56492: IFFALSE 56496
// exit ;
56494: GO 56512
// result := array [ array ] ;
56496: LD_ADDR_VAR 0 2
56500: PUSH
56501: LD_VAR 0 1
56505: PUSH
56506: LD_VAR 0 1
56510: ARRAY
56511: ST_TO_ADDR
// end ;
56512: LD_VAR 0 2
56516: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
56517: LD_INT 0
56519: PPUSH
56520: PPUSH
// result := [ ] ;
56521: LD_ADDR_VAR 0 5
56525: PUSH
56526: EMPTY
56527: ST_TO_ADDR
// if not array then
56528: LD_VAR 0 1
56532: NOT
56533: IFFALSE 56537
// exit ;
56535: GO 56649
// for i := 1 to array do
56537: LD_ADDR_VAR 0 6
56541: PUSH
56542: DOUBLE
56543: LD_INT 1
56545: DEC
56546: ST_TO_ADDR
56547: LD_VAR 0 1
56551: PUSH
56552: FOR_TO
56553: IFFALSE 56647
// if array [ i ] [ index ] = value then
56555: LD_VAR 0 1
56559: PUSH
56560: LD_VAR 0 6
56564: ARRAY
56565: PUSH
56566: LD_VAR 0 2
56570: ARRAY
56571: PUSH
56572: LD_VAR 0 3
56576: EQUAL
56577: IFFALSE 56645
// begin if indexColumn then
56579: LD_VAR 0 4
56583: IFFALSE 56619
// result := Join ( result , array [ i ] [ indexColumn ] ) else
56585: LD_ADDR_VAR 0 5
56589: PUSH
56590: LD_VAR 0 5
56594: PPUSH
56595: LD_VAR 0 1
56599: PUSH
56600: LD_VAR 0 6
56604: ARRAY
56605: PUSH
56606: LD_VAR 0 4
56610: ARRAY
56611: PPUSH
56612: CALL 51657 0 2
56616: ST_TO_ADDR
56617: GO 56645
// result := Join ( result , array [ i ] ) ;
56619: LD_ADDR_VAR 0 5
56623: PUSH
56624: LD_VAR 0 5
56628: PPUSH
56629: LD_VAR 0 1
56633: PUSH
56634: LD_VAR 0 6
56638: ARRAY
56639: PPUSH
56640: CALL 51657 0 2
56644: ST_TO_ADDR
// end ;
56645: GO 56552
56647: POP
56648: POP
// end ;
56649: LD_VAR 0 5
56653: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
56654: LD_INT 0
56656: PPUSH
// if not vehicles or not parkingPoint then
56657: LD_VAR 0 1
56661: NOT
56662: IFTRUE 56671
56664: PUSH
56665: LD_VAR 0 2
56669: NOT
56670: OR
56671: IFFALSE 56675
// exit ;
56673: GO 56773
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
56675: LD_ADDR_VAR 0 1
56679: PUSH
56680: LD_VAR 0 1
56684: PPUSH
56685: LD_INT 50
56687: PUSH
56688: EMPTY
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 92
56696: PUSH
56697: LD_VAR 0 2
56701: PUSH
56702: LD_INT 1
56704: ARRAY
56705: PUSH
56706: LD_VAR 0 2
56710: PUSH
56711: LD_INT 2
56713: ARRAY
56714: PUSH
56715: LD_INT 8
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PPUSH
56732: CALL_OW 72
56736: ST_TO_ADDR
// if not vehicles then
56737: LD_VAR 0 1
56741: NOT
56742: IFFALSE 56746
// exit ;
56744: GO 56773
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
56746: LD_VAR 0 1
56750: PPUSH
56751: LD_VAR 0 2
56755: PUSH
56756: LD_INT 1
56758: ARRAY
56759: PPUSH
56760: LD_VAR 0 2
56764: PUSH
56765: LD_INT 2
56767: ARRAY
56768: PPUSH
56769: CALL_OW 111
// end ;
56773: LD_VAR 0 3
56777: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
56778: LD_INT 0
56780: PPUSH
56781: PPUSH
56782: PPUSH
// if not side or not area then
56783: LD_VAR 0 1
56787: NOT
56788: IFTRUE 56797
56790: PUSH
56791: LD_VAR 0 2
56795: NOT
56796: OR
56797: IFFALSE 56801
// exit ;
56799: GO 56920
// tmp := AreaToList ( area , 0 ) ;
56801: LD_ADDR_VAR 0 5
56805: PUSH
56806: LD_VAR 0 2
56810: PPUSH
56811: LD_INT 0
56813: PPUSH
56814: CALL_OW 517
56818: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56819: LD_ADDR_VAR 0 4
56823: PUSH
56824: DOUBLE
56825: LD_INT 1
56827: DEC
56828: ST_TO_ADDR
56829: LD_VAR 0 5
56833: PUSH
56834: LD_INT 1
56836: ARRAY
56837: PUSH
56838: FOR_TO
56839: IFFALSE 56918
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
56841: LD_VAR 0 5
56845: PUSH
56846: LD_INT 1
56848: ARRAY
56849: PUSH
56850: LD_VAR 0 4
56854: ARRAY
56855: PPUSH
56856: LD_VAR 0 5
56860: PUSH
56861: LD_INT 2
56863: ARRAY
56864: PUSH
56865: LD_VAR 0 4
56869: ARRAY
56870: PPUSH
56871: CALL_OW 351
56875: IFFALSE 56916
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
56877: LD_VAR 0 5
56881: PUSH
56882: LD_INT 1
56884: ARRAY
56885: PUSH
56886: LD_VAR 0 4
56890: ARRAY
56891: PPUSH
56892: LD_VAR 0 5
56896: PUSH
56897: LD_INT 2
56899: ARRAY
56900: PUSH
56901: LD_VAR 0 4
56905: ARRAY
56906: PPUSH
56907: LD_VAR 0 1
56911: PPUSH
56912: CALL_OW 244
// end ;
56916: GO 56838
56918: POP
56919: POP
// end ;
56920: LD_VAR 0 3
56924: RET
// export function UniqueArray ( array ) ; var i ; begin
56925: LD_INT 0
56927: PPUSH
56928: PPUSH
// result := [ ] ;
56929: LD_ADDR_VAR 0 2
56933: PUSH
56934: EMPTY
56935: ST_TO_ADDR
// if not array then
56936: LD_VAR 0 1
56940: NOT
56941: IFFALSE 56945
// exit ;
56943: GO 57006
// for i := 1 to array do
56945: LD_ADDR_VAR 0 3
56949: PUSH
56950: DOUBLE
56951: LD_INT 1
56953: DEC
56954: ST_TO_ADDR
56955: LD_VAR 0 1
56959: PUSH
56960: FOR_TO
56961: IFFALSE 57004
// if not array [ i ] in result then
56963: LD_VAR 0 1
56967: PUSH
56968: LD_VAR 0 3
56972: ARRAY
56973: PUSH
56974: LD_VAR 0 2
56978: IN
56979: NOT
56980: IFFALSE 57002
// result := Join ( result , i ) ;
56982: LD_ADDR_VAR 0 2
56986: PUSH
56987: LD_VAR 0 2
56991: PPUSH
56992: LD_VAR 0 3
56996: PPUSH
56997: CALL 51657 0 2
57001: ST_TO_ADDR
57002: GO 56960
57004: POP
57005: POP
// end ; end_of_file
57006: LD_VAR 0 2
57010: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
57011: LD_VAR 0 1
57015: PUSH
57016: LD_INT 200
57018: DOUBLE
57019: GREATEREQUAL
57020: IFFALSE 57028
57022: LD_INT 299
57024: DOUBLE
57025: LESSEQUAL
57026: IFTRUE 57030
57028: GO 57062
57030: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
57031: LD_VAR 0 1
57035: PPUSH
57036: LD_VAR 0 2
57040: PPUSH
57041: LD_VAR 0 3
57045: PPUSH
57046: LD_VAR 0 4
57050: PPUSH
57051: LD_VAR 0 5
57055: PPUSH
57056: CALL 57924 0 5
57060: GO 57139
57062: LD_INT 300
57064: DOUBLE
57065: GREATEREQUAL
57066: IFFALSE 57074
57068: LD_INT 399
57070: DOUBLE
57071: LESSEQUAL
57072: IFTRUE 57076
57074: GO 57138
57076: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
57077: LD_VAR 0 1
57081: PPUSH
57082: LD_VAR 0 2
57086: PPUSH
57087: LD_VAR 0 3
57091: PPUSH
57092: LD_VAR 0 4
57096: PPUSH
57097: LD_VAR 0 5
57101: PPUSH
57102: LD_VAR 0 6
57106: PPUSH
57107: LD_VAR 0 7
57111: PPUSH
57112: LD_VAR 0 8
57116: PPUSH
57117: LD_VAR 0 9
57121: PPUSH
57122: LD_VAR 0 10
57126: PPUSH
57127: LD_VAR 0 11
57131: PPUSH
57132: CALL 64352 0 11
57136: GO 57139
57138: POP
// end ;
57139: PPOPN 11
57141: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
57142: LD_VAR 0 1
57146: PPUSH
57147: LD_VAR 0 2
57151: PPUSH
57152: LD_VAR 0 3
57156: PPUSH
57157: LD_VAR 0 4
57161: PPUSH
57162: LD_VAR 0 5
57166: PPUSH
57167: CALL 57224 0 5
// end ; end_of_file
57171: PPOPN 5
57173: END
// export function SOS_UnitDestroyed ( un ) ; begin
57174: LD_INT 0
57176: PPUSH
// ComRadiation ( un ) ;
57177: LD_VAR 0 1
57181: PPUSH
57182: CALL 58344 0 1
// end ;
57186: LD_VAR 0 2
57190: RET
// export function SOS_UnitKamikazed ( un ) ; begin
57191: LD_INT 0
57193: PPUSH
// ComRadiation ( un ) ;
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL 58344 0 1
// end ;
57203: LD_VAR 0 2
57207: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57208: LD_INT 0
57210: PPUSH
// end ;
57211: LD_VAR 0 4
57215: RET
// export function SOS_Command ( cmd ) ; begin
57216: LD_INT 0
57218: PPUSH
// end ;
57219: LD_VAR 0 2
57223: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57224: LD_INT 0
57226: PPUSH
// end ;
57227: LD_VAR 0 6
57231: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
57232: LD_INT 0
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
57238: PPUSH
// if not vehicle or not factory then
57239: LD_VAR 0 1
57243: NOT
57244: IFTRUE 57253
57246: PUSH
57247: LD_VAR 0 2
57251: NOT
57252: OR
57253: IFFALSE 57257
// exit ;
57255: GO 57919
// weapon := GetWeapon ( vehicle ) ;
57257: LD_ADDR_VAR 0 7
57261: PUSH
57262: LD_VAR 0 1
57266: PPUSH
57267: CALL_OW 264
57271: ST_TO_ADDR
// if weapon = ar_miner then
57272: LD_VAR 0 7
57276: PUSH
57277: LD_INT 81
57279: EQUAL
57280: IFFALSE 57337
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57282: LD_ADDR_EXP 58
57286: PUSH
57287: LD_EXP 58
57291: PPUSH
57292: LD_EXP 58
57296: PUSH
57297: LD_INT 1
57299: PLUS
57300: PPUSH
57301: LD_VAR 0 1
57305: PPUSH
57306: CALL_OW 1
57310: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57311: LD_ADDR_EXP 59
57315: PUSH
57316: LD_EXP 59
57320: PPUSH
57321: LD_EXP 59
57325: PUSH
57326: LD_INT 1
57328: PLUS
57329: PPUSH
57330: EMPTY
57331: PPUSH
57332: CALL_OW 1
57336: ST_TO_ADDR
// end ; if not factoryWaypoints then
57337: LD_EXP 61
57341: NOT
57342: IFFALSE 57346
// exit ;
57344: GO 57919
// for i := 1 to Count ( factoryWaypoints ) do
57346: LD_ADDR_VAR 0 4
57350: PUSH
57351: DOUBLE
57352: LD_INT 1
57354: DEC
57355: ST_TO_ADDR
57356: LD_EXP 61
57360: PPUSH
57361: CALL 15681 0 1
57365: PUSH
57366: FOR_TO
57367: IFFALSE 57917
// if factoryWaypoints [ i ] [ 2 ] = factory then
57369: LD_EXP 61
57373: PUSH
57374: LD_VAR 0 4
57378: ARRAY
57379: PUSH
57380: LD_INT 2
57382: ARRAY
57383: PUSH
57384: LD_VAR 0 2
57388: EQUAL
57389: IFFALSE 57915
// begin if GetControl ( vehicle ) = control_manual then
57391: LD_VAR 0 1
57395: PPUSH
57396: CALL_OW 263
57400: PUSH
57401: LD_INT 1
57403: EQUAL
57404: IFFALSE 57768
// begin driver := IsDrivenBy ( vehicle ) ;
57406: LD_ADDR_VAR 0 5
57410: PUSH
57411: LD_VAR 0 1
57415: PPUSH
57416: CALL_OW 311
57420: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57421: LD_VAR 0 5
57425: PUSH
57426: LD_EXP 62
57430: IN
57431: IFTRUE 57445
57433: PUSH
57434: LD_VAR 0 1
57438: PUSH
57439: LD_EXP 62
57443: IN
57444: OR
57445: IFFALSE 57451
// exit ;
57447: POP
57448: POP
57449: GO 57919
// if not HasTask ( driver ) then
57451: LD_VAR 0 5
57455: PPUSH
57456: CALL_OW 314
57460: NOT
57461: IFFALSE 57766
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57463: LD_ADDR_EXP 62
57467: PUSH
57468: LD_EXP 62
57472: PPUSH
57473: LD_VAR 0 5
57477: PPUSH
57478: CALL 51657 0 2
57482: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57483: LD_ADDR_EXP 62
57487: PUSH
57488: LD_EXP 62
57492: PPUSH
57493: LD_VAR 0 1
57497: PPUSH
57498: CALL 51657 0 2
57502: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57503: LD_ADDR_VAR 0 6
57507: PUSH
57508: LD_EXP 61
57512: PUSH
57513: LD_VAR 0 4
57517: ARRAY
57518: PUSH
57519: LD_INT 3
57521: ARRAY
57522: PPUSH
57523: LD_EXP 61
57527: PUSH
57528: LD_VAR 0 4
57532: ARRAY
57533: PUSH
57534: LD_INT 4
57536: ARRAY
57537: PPUSH
57538: CALL_OW 428
57542: ST_TO_ADDR
// if hex then
57543: LD_VAR 0 6
57547: IFFALSE 57565
// ComMoveUnit ( driver , hex ) else
57549: LD_VAR 0 5
57553: PPUSH
57554: LD_VAR 0 6
57558: PPUSH
57559: CALL_OW 112
57563: GO 57649
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57565: LD_VAR 0 1
57569: PPUSH
57570: LD_EXP 61
57574: PUSH
57575: LD_VAR 0 4
57579: ARRAY
57580: PUSH
57581: LD_INT 3
57583: ARRAY
57584: PPUSH
57585: LD_EXP 61
57589: PUSH
57590: LD_VAR 0 4
57594: ARRAY
57595: PUSH
57596: LD_INT 4
57598: ARRAY
57599: PPUSH
57600: CALL_OW 297
57604: PUSH
57605: LD_INT 0
57607: GREATER
57608: IFFALSE 57649
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57610: LD_VAR 0 5
57614: PPUSH
57615: LD_EXP 61
57619: PUSH
57620: LD_VAR 0 4
57624: ARRAY
57625: PUSH
57626: LD_INT 3
57628: ARRAY
57629: PPUSH
57630: LD_EXP 61
57634: PUSH
57635: LD_VAR 0 4
57639: ARRAY
57640: PUSH
57641: LD_INT 4
57643: ARRAY
57644: PPUSH
57645: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57649: LD_VAR 0 5
57653: PPUSH
57654: CALL_OW 181
// if Multiplayer then
57658: LD_OWVAR 4
57662: IFFALSE 57711
// begin repeat wait ( 10 ) ;
57664: LD_INT 10
57666: PPUSH
57667: CALL_OW 67
// until not IsInUnit ( driver ) ;
57671: LD_VAR 0 5
57675: PPUSH
57676: CALL_OW 310
57680: NOT
57681: IFFALSE 57664
// if not HasTask ( driver ) then
57683: LD_VAR 0 5
57687: PPUSH
57688: CALL_OW 314
57692: NOT
57693: IFFALSE 57709
// ComEnterUnit ( driver , factory ) ;
57695: LD_VAR 0 5
57699: PPUSH
57700: LD_VAR 0 2
57704: PPUSH
57705: CALL_OW 120
// end else
57709: GO 57725
// AddComEnterUnit ( driver , factory ) ;
57711: LD_VAR 0 5
57715: PPUSH
57716: LD_VAR 0 2
57720: PPUSH
57721: CALL_OW 180
// wait ( 0 0$1 ) ;
57725: LD_INT 35
57727: PPUSH
57728: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57732: LD_ADDR_EXP 62
57736: PUSH
57737: LD_EXP 62
57741: PUSH
57742: LD_VAR 0 5
57746: DIFF
57747: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57748: LD_ADDR_EXP 62
57752: PUSH
57753: LD_EXP 62
57757: PUSH
57758: LD_VAR 0 1
57762: DIFF
57763: ST_TO_ADDR
// break ;
57764: GO 57917
// end ; end else
57766: GO 57915
// if GetControl ( vehicle ) = control_remote then
57768: LD_VAR 0 1
57772: PPUSH
57773: CALL_OW 263
57777: PUSH
57778: LD_INT 2
57780: EQUAL
57781: IFFALSE 57867
// begin wait ( 0 0$2 ) ;
57783: LD_INT 70
57785: PPUSH
57786: CALL_OW 67
// repeat wait ( 10 ) ;
57790: LD_INT 10
57792: PPUSH
57793: CALL_OW 67
// Connect ( vehicle ) ;
57797: LD_VAR 0 1
57801: PPUSH
57802: CALL 21959 0 1
// until IsControledBy ( vehicle ) ;
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 312
57815: IFFALSE 57790
// wait ( 10 ) ;
57817: LD_INT 10
57819: PPUSH
57820: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57824: LD_VAR 0 1
57828: PPUSH
57829: LD_EXP 61
57833: PUSH
57834: LD_VAR 0 4
57838: ARRAY
57839: PUSH
57840: LD_INT 3
57842: ARRAY
57843: PPUSH
57844: LD_EXP 61
57848: PUSH
57849: LD_VAR 0 4
57853: ARRAY
57854: PUSH
57855: LD_INT 4
57857: ARRAY
57858: PPUSH
57859: CALL_OW 111
// break ;
57863: GO 57917
// end else
57865: GO 57915
// begin wait ( 0 0$3 ) ;
57867: LD_INT 105
57869: PPUSH
57870: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57874: LD_VAR 0 1
57878: PPUSH
57879: LD_EXP 61
57883: PUSH
57884: LD_VAR 0 4
57888: ARRAY
57889: PUSH
57890: LD_INT 3
57892: ARRAY
57893: PPUSH
57894: LD_EXP 61
57898: PUSH
57899: LD_VAR 0 4
57903: ARRAY
57904: PUSH
57905: LD_INT 4
57907: ARRAY
57908: PPUSH
57909: CALL_OW 111
// break ;
57913: GO 57917
// end ; end ;
57915: GO 57366
57917: POP
57918: POP
// end ;
57919: LD_VAR 0 3
57923: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57924: LD_INT 0
57926: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57927: LD_VAR 0 1
57931: PUSH
57932: LD_INT 250
57934: EQUAL
57935: IFFALSE 57952
57937: PUSH
57938: LD_VAR 0 2
57942: PPUSH
57943: CALL_OW 264
57947: PUSH
57948: LD_INT 81
57950: EQUAL
57951: AND
57952: IFFALSE 57973
// MinerPlaceMine ( unit , x , y ) ;
57954: LD_VAR 0 2
57958: PPUSH
57959: LD_VAR 0 4
57963: PPUSH
57964: LD_VAR 0 5
57968: PPUSH
57969: CALL 61319 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57973: LD_VAR 0 1
57977: PUSH
57978: LD_INT 251
57980: EQUAL
57981: IFFALSE 57998
57983: PUSH
57984: LD_VAR 0 2
57988: PPUSH
57989: CALL_OW 264
57993: PUSH
57994: LD_INT 81
57996: EQUAL
57997: AND
57998: IFFALSE 58019
// MinerDetonateMine ( unit , x , y ) ;
58000: LD_VAR 0 2
58004: PPUSH
58005: LD_VAR 0 4
58009: PPUSH
58010: LD_VAR 0 5
58014: PPUSH
58015: CALL 61726 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58019: LD_VAR 0 1
58023: PUSH
58024: LD_INT 252
58026: EQUAL
58027: IFFALSE 58044
58029: PUSH
58030: LD_VAR 0 2
58034: PPUSH
58035: CALL_OW 264
58039: PUSH
58040: LD_INT 81
58042: EQUAL
58043: AND
58044: IFFALSE 58065
// MinerCreateMinefield ( unit , x , y ) ;
58046: LD_VAR 0 2
58050: PPUSH
58051: LD_VAR 0 4
58055: PPUSH
58056: LD_VAR 0 5
58060: PPUSH
58061: CALL 61958 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58065: LD_VAR 0 1
58069: PUSH
58070: LD_INT 253
58072: EQUAL
58073: IFFALSE 58090
58075: PUSH
58076: LD_VAR 0 2
58080: PPUSH
58081: CALL_OW 257
58085: PUSH
58086: LD_INT 5
58088: EQUAL
58089: AND
58090: IFFALSE 58111
// ComBinocular ( unit , x , y ) ;
58092: LD_VAR 0 2
58096: PPUSH
58097: LD_VAR 0 4
58101: PPUSH
58102: LD_VAR 0 5
58106: PPUSH
58107: CALL 62333 0 3
// if selectedUnit then
58111: LD_VAR 0 3
58115: IFFALSE 58175
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58117: LD_VAR 0 1
58121: PUSH
58122: LD_INT 254
58124: EQUAL
58125: IFFALSE 58142
58127: PUSH
58128: LD_VAR 0 2
58132: PPUSH
58133: CALL_OW 264
58137: PUSH
58138: LD_INT 99
58140: EQUAL
58141: AND
58142: IFFALSE 58159
58144: PUSH
58145: LD_VAR 0 3
58149: PPUSH
58150: CALL_OW 263
58154: PUSH
58155: LD_INT 3
58157: EQUAL
58158: AND
58159: IFFALSE 58175
// HackDestroyVehicle ( unit , selectedUnit ) ;
58161: LD_VAR 0 2
58165: PPUSH
58166: LD_VAR 0 3
58170: PPUSH
58171: CALL 60509 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58175: LD_VAR 0 1
58179: PUSH
58180: LD_INT 255
58182: EQUAL
58183: IFFALSE 58207
58185: PUSH
58186: LD_VAR 0 2
58190: PPUSH
58191: CALL_OW 264
58195: PUSH
58196: LD_INT 14
58198: PUSH
58199: LD_INT 53
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: IN
58206: AND
58207: IFFALSE 58225
58209: PUSH
58210: LD_VAR 0 4
58214: PPUSH
58215: LD_VAR 0 5
58219: PPUSH
58220: CALL_OW 488
58224: AND
58225: IFFALSE 58249
// CutTreeXYR ( unit , x , y , 12 ) ;
58227: LD_VAR 0 2
58231: PPUSH
58232: LD_VAR 0 4
58236: PPUSH
58237: LD_VAR 0 5
58241: PPUSH
58242: LD_INT 12
58244: PPUSH
58245: CALL 58440 0 4
// if cmd = 256 then
58249: LD_VAR 0 1
58253: PUSH
58254: LD_INT 256
58256: EQUAL
58257: IFFALSE 58278
// SetFactoryWaypoint ( unit , x , y ) ;
58259: LD_VAR 0 2
58263: PPUSH
58264: LD_VAR 0 4
58268: PPUSH
58269: LD_VAR 0 5
58273: PPUSH
58274: CALL 64360 0 3
// if cmd = 257 then
58278: LD_VAR 0 1
58282: PUSH
58283: LD_INT 257
58285: EQUAL
58286: IFFALSE 58307
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58288: LD_VAR 0 2
58292: PPUSH
58293: LD_VAR 0 4
58297: PPUSH
58298: LD_VAR 0 5
58302: PPUSH
58303: CALL 64856 0 3
// if cmd = 258 then
58307: LD_VAR 0 1
58311: PUSH
58312: LD_INT 258
58314: EQUAL
58315: IFFALSE 58339
// BurnTreeXYR ( unit , x , y , 8 ) ;
58317: LD_VAR 0 2
58321: PPUSH
58322: LD_VAR 0 4
58326: PPUSH
58327: LD_VAR 0 5
58331: PPUSH
58332: LD_INT 8
58334: PPUSH
58335: CALL 58862 0 4
// end ;
58339: LD_VAR 0 6
58343: RET
// export function ComRadiation ( un ) ; var eff ; begin
58344: LD_INT 0
58346: PPUSH
58347: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58348: LD_VAR 0 1
58352: PPUSH
58353: CALL_OW 264
58357: PUSH
58358: LD_INT 91
58360: NONEQUAL
58361: IFFALSE 58365
// exit ;
58363: GO 58435
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58365: LD_INT 68
58367: PPUSH
58368: LD_VAR 0 1
58372: PPUSH
58373: CALL_OW 255
58377: PPUSH
58378: CALL_OW 321
58382: PUSH
58383: LD_INT 2
58385: EQUAL
58386: IFFALSE 58398
// eff := 50 else
58388: LD_ADDR_VAR 0 3
58392: PUSH
58393: LD_INT 50
58395: ST_TO_ADDR
58396: GO 58406
// eff := 25 ;
58398: LD_ADDR_VAR 0 3
58402: PUSH
58403: LD_INT 25
58405: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58406: LD_VAR 0 1
58410: PPUSH
58411: CALL_OW 250
58415: PPUSH
58416: LD_VAR 0 1
58420: PPUSH
58421: CALL_OW 251
58425: PPUSH
58426: LD_VAR 0 3
58430: PPUSH
58431: CALL_OW 495
// end ;
58435: LD_VAR 0 2
58439: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58440: LD_INT 0
58442: PPUSH
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
58447: PPUSH
58448: PPUSH
58449: PPUSH
58450: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58451: LD_VAR 0 1
58455: PPUSH
58456: CALL_OW 302
58460: NOT
58461: IFTRUE 58480
58463: PUSH
58464: LD_VAR 0 2
58468: PPUSH
58469: LD_VAR 0 3
58473: PPUSH
58474: CALL_OW 488
58478: NOT
58479: OR
58480: IFTRUE 58489
58482: PUSH
58483: LD_VAR 0 4
58487: NOT
58488: OR
58489: IFFALSE 58493
// exit ;
58491: GO 58857
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58493: LD_VAR 0 1
58497: PPUSH
58498: CALL_OW 437
58502: PPUSH
58503: CALL 15681 0 1
58507: PUSH
58508: LD_INT 10
58510: GREATER
58511: IFFALSE 58515
// exit ;
58513: GO 58857
// list := [ ] ;
58515: LD_ADDR_VAR 0 13
58519: PUSH
58520: EMPTY
58521: ST_TO_ADDR
// if x - r < 0 then
58522: LD_VAR 0 2
58526: PUSH
58527: LD_VAR 0 4
58531: MINUS
58532: PUSH
58533: LD_INT 0
58535: LESS
58536: IFFALSE 58548
// min_x := 0 else
58538: LD_ADDR_VAR 0 7
58542: PUSH
58543: LD_INT 0
58545: ST_TO_ADDR
58546: GO 58564
// min_x := x - r ;
58548: LD_ADDR_VAR 0 7
58552: PUSH
58553: LD_VAR 0 2
58557: PUSH
58558: LD_VAR 0 4
58562: MINUS
58563: ST_TO_ADDR
// if y - r < 0 then
58564: LD_VAR 0 3
58568: PUSH
58569: LD_VAR 0 4
58573: MINUS
58574: PUSH
58575: LD_INT 0
58577: LESS
58578: IFFALSE 58590
// min_y := 0 else
58580: LD_ADDR_VAR 0 8
58584: PUSH
58585: LD_INT 0
58587: ST_TO_ADDR
58588: GO 58606
// min_y := y - r ;
58590: LD_ADDR_VAR 0 8
58594: PUSH
58595: LD_VAR 0 3
58599: PUSH
58600: LD_VAR 0 4
58604: MINUS
58605: ST_TO_ADDR
// max_x := x + r ;
58606: LD_ADDR_VAR 0 9
58610: PUSH
58611: LD_VAR 0 2
58615: PUSH
58616: LD_VAR 0 4
58620: PLUS
58621: ST_TO_ADDR
// max_y := y + r ;
58622: LD_ADDR_VAR 0 10
58626: PUSH
58627: LD_VAR 0 3
58631: PUSH
58632: LD_VAR 0 4
58636: PLUS
58637: ST_TO_ADDR
// for _x = min_x to max_x do
58638: LD_ADDR_VAR 0 11
58642: PUSH
58643: DOUBLE
58644: LD_VAR 0 7
58648: DEC
58649: ST_TO_ADDR
58650: LD_VAR 0 9
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58775
// for _y = min_y to max_y do
58658: LD_ADDR_VAR 0 12
58662: PUSH
58663: DOUBLE
58664: LD_VAR 0 8
58668: DEC
58669: ST_TO_ADDR
58670: LD_VAR 0 10
58674: PUSH
58675: FOR_TO
58676: IFFALSE 58771
// begin if not ValidHex ( _x , _y ) then
58678: LD_VAR 0 11
58682: PPUSH
58683: LD_VAR 0 12
58687: PPUSH
58688: CALL_OW 488
58692: NOT
58693: IFFALSE 58697
// continue ;
58695: GO 58675
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58697: LD_VAR 0 11
58701: PPUSH
58702: LD_VAR 0 12
58706: PPUSH
58707: CALL_OW 351
58711: IFFALSE 58729
58713: PUSH
58714: LD_VAR 0 11
58718: PPUSH
58719: LD_VAR 0 12
58723: PPUSH
58724: CALL_OW 554
58728: AND
58729: IFFALSE 58769
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58731: LD_ADDR_VAR 0 13
58735: PUSH
58736: LD_VAR 0 13
58740: PPUSH
58741: LD_VAR 0 13
58745: PUSH
58746: LD_INT 1
58748: PLUS
58749: PPUSH
58750: LD_VAR 0 11
58754: PUSH
58755: LD_VAR 0 12
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PPUSH
58764: CALL_OW 2
58768: ST_TO_ADDR
// end ;
58769: GO 58675
58771: POP
58772: POP
58773: GO 58655
58775: POP
58776: POP
// if not list then
58777: LD_VAR 0 13
58781: NOT
58782: IFFALSE 58786
// exit ;
58784: GO 58857
// for i in list do
58786: LD_ADDR_VAR 0 6
58790: PUSH
58791: LD_VAR 0 13
58795: PUSH
58796: FOR_IN
58797: IFFALSE 58855
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58799: LD_VAR 0 1
58803: PPUSH
58804: LD_STRING M
58806: PUSH
58807: LD_VAR 0 6
58811: PUSH
58812: LD_INT 1
58814: ARRAY
58815: PUSH
58816: LD_VAR 0 6
58820: PUSH
58821: LD_INT 2
58823: ARRAY
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: EMPTY
58847: LIST
58848: PPUSH
58849: CALL_OW 447
58853: GO 58796
58855: POP
58856: POP
// end ;
58857: LD_VAR 0 5
58861: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58862: LD_INT 0
58864: PPUSH
58865: PPUSH
58866: PPUSH
58867: PPUSH
58868: PPUSH
58869: PPUSH
58870: PPUSH
58871: PPUSH
58872: PPUSH
58873: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58874: LD_VAR 0 1
58878: PPUSH
58879: CALL_OW 302
58883: NOT
58884: IFTRUE 58903
58886: PUSH
58887: LD_VAR 0 2
58891: PPUSH
58892: LD_VAR 0 3
58896: PPUSH
58897: CALL_OW 488
58901: NOT
58902: OR
58903: IFTRUE 58912
58905: PUSH
58906: LD_VAR 0 4
58910: NOT
58911: OR
58912: IFFALSE 58916
// exit ;
58914: GO 59455
// if Count ( GetTaskList ( flame ) ) > 10 then
58916: LD_VAR 0 1
58920: PPUSH
58921: CALL_OW 437
58925: PPUSH
58926: CALL 15681 0 1
58930: PUSH
58931: LD_INT 10
58933: GREATER
58934: IFFALSE 58938
// exit ;
58936: GO 59455
// list := [ ] ;
58938: LD_ADDR_VAR 0 13
58942: PUSH
58943: EMPTY
58944: ST_TO_ADDR
// if x - r < 0 then
58945: LD_VAR 0 2
58949: PUSH
58950: LD_VAR 0 4
58954: MINUS
58955: PUSH
58956: LD_INT 0
58958: LESS
58959: IFFALSE 58971
// min_x := 0 else
58961: LD_ADDR_VAR 0 7
58965: PUSH
58966: LD_INT 0
58968: ST_TO_ADDR
58969: GO 58987
// min_x := x - r ;
58971: LD_ADDR_VAR 0 7
58975: PUSH
58976: LD_VAR 0 2
58980: PUSH
58981: LD_VAR 0 4
58985: MINUS
58986: ST_TO_ADDR
// if y - r < 0 then
58987: LD_VAR 0 3
58991: PUSH
58992: LD_VAR 0 4
58996: MINUS
58997: PUSH
58998: LD_INT 0
59000: LESS
59001: IFFALSE 59013
// min_y := 0 else
59003: LD_ADDR_VAR 0 8
59007: PUSH
59008: LD_INT 0
59010: ST_TO_ADDR
59011: GO 59029
// min_y := y - r ;
59013: LD_ADDR_VAR 0 8
59017: PUSH
59018: LD_VAR 0 3
59022: PUSH
59023: LD_VAR 0 4
59027: MINUS
59028: ST_TO_ADDR
// max_x := x + r ;
59029: LD_ADDR_VAR 0 9
59033: PUSH
59034: LD_VAR 0 2
59038: PUSH
59039: LD_VAR 0 4
59043: PLUS
59044: ST_TO_ADDR
// max_y := y + r ;
59045: LD_ADDR_VAR 0 10
59049: PUSH
59050: LD_VAR 0 3
59054: PUSH
59055: LD_VAR 0 4
59059: PLUS
59060: ST_TO_ADDR
// for _x = min_x to max_x do
59061: LD_ADDR_VAR 0 11
59065: PUSH
59066: DOUBLE
59067: LD_VAR 0 7
59071: DEC
59072: ST_TO_ADDR
59073: LD_VAR 0 9
59077: PUSH
59078: FOR_TO
59079: IFFALSE 59198
// for _y = min_y to max_y do
59081: LD_ADDR_VAR 0 12
59085: PUSH
59086: DOUBLE
59087: LD_VAR 0 8
59091: DEC
59092: ST_TO_ADDR
59093: LD_VAR 0 10
59097: PUSH
59098: FOR_TO
59099: IFFALSE 59194
// begin if not ValidHex ( _x , _y ) then
59101: LD_VAR 0 11
59105: PPUSH
59106: LD_VAR 0 12
59110: PPUSH
59111: CALL_OW 488
59115: NOT
59116: IFFALSE 59120
// continue ;
59118: GO 59098
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59120: LD_VAR 0 11
59124: PPUSH
59125: LD_VAR 0 12
59129: PPUSH
59130: CALL_OW 351
59134: IFFALSE 59152
59136: PUSH
59137: LD_VAR 0 11
59141: PPUSH
59142: LD_VAR 0 12
59146: PPUSH
59147: CALL_OW 554
59151: AND
59152: IFFALSE 59192
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59154: LD_ADDR_VAR 0 13
59158: PUSH
59159: LD_VAR 0 13
59163: PPUSH
59164: LD_VAR 0 13
59168: PUSH
59169: LD_INT 1
59171: PLUS
59172: PPUSH
59173: LD_VAR 0 11
59177: PUSH
59178: LD_VAR 0 12
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PPUSH
59187: CALL_OW 2
59191: ST_TO_ADDR
// end ;
59192: GO 59098
59194: POP
59195: POP
59196: GO 59078
59198: POP
59199: POP
// if not list then
59200: LD_VAR 0 13
59204: NOT
59205: IFFALSE 59209
// exit ;
59207: GO 59455
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
59209: LD_ADDR_VAR 0 13
59213: PUSH
59214: LD_VAR 0 1
59218: PPUSH
59219: LD_VAR 0 13
59223: PPUSH
59224: LD_INT 1
59226: PPUSH
59227: LD_INT 1
59229: PPUSH
59230: CALL 19087 0 4
59234: ST_TO_ADDR
// ComStop ( flame ) ;
59235: LD_VAR 0 1
59239: PPUSH
59240: CALL_OW 141
// for i in list do
59244: LD_ADDR_VAR 0 6
59248: PUSH
59249: LD_VAR 0 13
59253: PUSH
59254: FOR_IN
59255: IFFALSE 59286
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59257: LD_VAR 0 1
59261: PPUSH
59262: LD_VAR 0 6
59266: PUSH
59267: LD_INT 1
59269: ARRAY
59270: PPUSH
59271: LD_VAR 0 6
59275: PUSH
59276: LD_INT 2
59278: ARRAY
59279: PPUSH
59280: CALL_OW 176
59284: GO 59254
59286: POP
59287: POP
// repeat wait ( 0 0$1 ) ;
59288: LD_INT 35
59290: PPUSH
59291: CALL_OW 67
// task := GetTaskList ( flame ) ;
59295: LD_ADDR_VAR 0 14
59299: PUSH
59300: LD_VAR 0 1
59304: PPUSH
59305: CALL_OW 437
59309: ST_TO_ADDR
// if not task then
59310: LD_VAR 0 14
59314: NOT
59315: IFFALSE 59319
// exit ;
59317: GO 59455
// if task [ 1 ] [ 1 ] <> | then
59319: LD_VAR 0 14
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PUSH
59328: LD_INT 1
59330: ARRAY
59331: PUSH
59332: LD_STRING |
59334: NONEQUAL
59335: IFFALSE 59339
// exit ;
59337: GO 59455
// _x := task [ 1 ] [ 2 ] ;
59339: LD_ADDR_VAR 0 11
59343: PUSH
59344: LD_VAR 0 14
59348: PUSH
59349: LD_INT 1
59351: ARRAY
59352: PUSH
59353: LD_INT 2
59355: ARRAY
59356: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59357: LD_ADDR_VAR 0 12
59361: PUSH
59362: LD_VAR 0 14
59366: PUSH
59367: LD_INT 1
59369: ARRAY
59370: PUSH
59371: LD_INT 3
59373: ARRAY
59374: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59375: LD_VAR 0 11
59379: PPUSH
59380: LD_VAR 0 12
59384: PPUSH
59385: CALL_OW 351
59389: NOT
59390: IFTRUE 59409
59392: PUSH
59393: LD_VAR 0 11
59397: PPUSH
59398: LD_VAR 0 12
59402: PPUSH
59403: CALL_OW 554
59407: NOT
59408: OR
59409: IFFALSE 59443
// begin task := Delete ( task , 1 ) ;
59411: LD_ADDR_VAR 0 14
59415: PUSH
59416: LD_VAR 0 14
59420: PPUSH
59421: LD_INT 1
59423: PPUSH
59424: CALL_OW 3
59428: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59429: LD_VAR 0 1
59433: PPUSH
59434: LD_VAR 0 14
59438: PPUSH
59439: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 314
59452: NOT
59453: IFFALSE 59288
// end ;
59455: LD_VAR 0 5
59459: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59460: LD_EXP 51
59464: NOT
59465: IFFALSE 59515
59467: GO 59469
59469: DISABLE
// begin initHack := true ;
59470: LD_ADDR_EXP 51
59474: PUSH
59475: LD_INT 1
59477: ST_TO_ADDR
// hackTanks := [ ] ;
59478: LD_ADDR_EXP 52
59482: PUSH
59483: EMPTY
59484: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59485: LD_ADDR_EXP 53
59489: PUSH
59490: EMPTY
59491: ST_TO_ADDR
// hackLimit := 3 ;
59492: LD_ADDR_EXP 54
59496: PUSH
59497: LD_INT 3
59499: ST_TO_ADDR
// hackDist := 12 ;
59500: LD_ADDR_EXP 55
59504: PUSH
59505: LD_INT 12
59507: ST_TO_ADDR
// hackCounter := [ ] ;
59508: LD_ADDR_EXP 56
59512: PUSH
59513: EMPTY
59514: ST_TO_ADDR
// end ;
59515: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59516: LD_EXP 51
59520: IFFALSE 59538
59522: PUSH
59523: LD_INT 34
59525: PUSH
59526: LD_INT 99
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PPUSH
59533: CALL_OW 69
59537: AND
59538: IFFALSE 59791
59540: GO 59542
59542: DISABLE
59543: LD_INT 0
59545: PPUSH
59546: PPUSH
// begin enable ;
59547: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59548: LD_ADDR_VAR 0 1
59552: PUSH
59553: LD_INT 34
59555: PUSH
59556: LD_INT 99
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PPUSH
59563: CALL_OW 69
59567: PUSH
59568: FOR_IN
59569: IFFALSE 59789
// begin if not i in hackTanks then
59571: LD_VAR 0 1
59575: PUSH
59576: LD_EXP 52
59580: IN
59581: NOT
59582: IFFALSE 59665
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59584: LD_ADDR_EXP 52
59588: PUSH
59589: LD_EXP 52
59593: PPUSH
59594: LD_EXP 52
59598: PUSH
59599: LD_INT 1
59601: PLUS
59602: PPUSH
59603: LD_VAR 0 1
59607: PPUSH
59608: CALL_OW 1
59612: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59613: LD_ADDR_EXP 53
59617: PUSH
59618: LD_EXP 53
59622: PPUSH
59623: LD_EXP 53
59627: PUSH
59628: LD_INT 1
59630: PLUS
59631: PPUSH
59632: EMPTY
59633: PPUSH
59634: CALL_OW 1
59638: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59639: LD_ADDR_EXP 56
59643: PUSH
59644: LD_EXP 56
59648: PPUSH
59649: LD_EXP 56
59653: PUSH
59654: LD_INT 1
59656: PLUS
59657: PPUSH
59658: EMPTY
59659: PPUSH
59660: CALL_OW 1
59664: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59665: LD_VAR 0 1
59669: PPUSH
59670: CALL_OW 302
59674: NOT
59675: IFFALSE 59688
// begin HackUnlinkAll ( i ) ;
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL 59794 0 1
// continue ;
59686: GO 59568
// end ; HackCheckCapturedStatus ( i ) ;
59688: LD_VAR 0 1
59692: PPUSH
59693: CALL 60239 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59697: LD_ADDR_VAR 0 2
59701: PUSH
59702: LD_INT 81
59704: PUSH
59705: LD_VAR 0 1
59709: PPUSH
59710: CALL_OW 255
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 33
59721: PUSH
59722: LD_INT 3
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 91
59731: PUSH
59732: LD_VAR 0 1
59736: PUSH
59737: LD_EXP 55
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 50
59749: PUSH
59750: EMPTY
59751: LIST
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: PPUSH
59759: CALL_OW 69
59763: ST_TO_ADDR
// if not tmp then
59764: LD_VAR 0 2
59768: NOT
59769: IFFALSE 59773
// continue ;
59771: GO 59568
// HackLink ( i , tmp ) ;
59773: LD_VAR 0 1
59777: PPUSH
59778: LD_VAR 0 2
59782: PPUSH
59783: CALL 59930 0 2
// end ;
59787: GO 59568
59789: POP
59790: POP
// end ;
59791: PPOPN 2
59793: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59794: LD_INT 0
59796: PPUSH
59797: PPUSH
59798: PPUSH
// if not hack in hackTanks then
59799: LD_VAR 0 1
59803: PUSH
59804: LD_EXP 52
59808: IN
59809: NOT
59810: IFFALSE 59814
// exit ;
59812: GO 59925
// index := GetElementIndex ( hackTanks , hack ) ;
59814: LD_ADDR_VAR 0 4
59818: PUSH
59819: LD_EXP 52
59823: PPUSH
59824: LD_VAR 0 1
59828: PPUSH
59829: CALL 18382 0 2
59833: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59834: LD_EXP 53
59838: PUSH
59839: LD_VAR 0 4
59843: ARRAY
59844: IFFALSE 59925
// begin for i in hackTanksCaptured [ index ] do
59846: LD_ADDR_VAR 0 3
59850: PUSH
59851: LD_EXP 53
59855: PUSH
59856: LD_VAR 0 4
59860: ARRAY
59861: PUSH
59862: FOR_IN
59863: IFFALSE 59889
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59865: LD_VAR 0 3
59869: PUSH
59870: LD_INT 1
59872: ARRAY
59873: PPUSH
59874: LD_VAR 0 3
59878: PUSH
59879: LD_INT 2
59881: ARRAY
59882: PPUSH
59883: CALL_OW 235
59887: GO 59862
59889: POP
59890: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59891: LD_ADDR_EXP 53
59895: PUSH
59896: LD_EXP 53
59900: PPUSH
59901: LD_VAR 0 4
59905: PPUSH
59906: EMPTY
59907: PPUSH
59908: CALL_OW 1
59912: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59913: LD_VAR 0 1
59917: PPUSH
59918: LD_INT 0
59920: PPUSH
59921: CALL_OW 505
// end ; end ;
59925: LD_VAR 0 2
59929: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59930: LD_INT 0
59932: PPUSH
59933: PPUSH
59934: PPUSH
// if not hack in hackTanks or not vehicles then
59935: LD_VAR 0 1
59939: PUSH
59940: LD_EXP 52
59944: IN
59945: NOT
59946: IFTRUE 59955
59948: PUSH
59949: LD_VAR 0 2
59953: NOT
59954: OR
59955: IFFALSE 59959
// exit ;
59957: GO 60234
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59959: LD_ADDR_VAR 0 2
59963: PUSH
59964: LD_VAR 0 1
59968: PPUSH
59969: LD_VAR 0 2
59973: PPUSH
59974: LD_INT 1
59976: PPUSH
59977: LD_INT 1
59979: PPUSH
59980: CALL 19034 0 4
59984: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59985: LD_ADDR_VAR 0 5
59989: PUSH
59990: LD_EXP 52
59994: PPUSH
59995: LD_VAR 0 1
59999: PPUSH
60000: CALL 18382 0 2
60004: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
60005: LD_EXP 53
60009: PUSH
60010: LD_VAR 0 5
60014: ARRAY
60015: PUSH
60016: LD_EXP 54
60020: LESS
60021: IFFALSE 60210
// begin for i := 1 to vehicles do
60023: LD_ADDR_VAR 0 4
60027: PUSH
60028: DOUBLE
60029: LD_INT 1
60031: DEC
60032: ST_TO_ADDR
60033: LD_VAR 0 2
60037: PUSH
60038: FOR_TO
60039: IFFALSE 60208
// begin if hackTanksCaptured [ index ] = hackLimit then
60041: LD_EXP 53
60045: PUSH
60046: LD_VAR 0 5
60050: ARRAY
60051: PUSH
60052: LD_EXP 54
60056: EQUAL
60057: IFFALSE 60061
// break ;
60059: GO 60208
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60061: LD_ADDR_EXP 56
60065: PUSH
60066: LD_EXP 56
60070: PPUSH
60071: LD_VAR 0 5
60075: PPUSH
60076: LD_EXP 56
60080: PUSH
60081: LD_VAR 0 5
60085: ARRAY
60086: PUSH
60087: LD_INT 1
60089: PLUS
60090: PPUSH
60091: CALL_OW 1
60095: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60096: LD_ADDR_EXP 53
60100: PUSH
60101: LD_EXP 53
60105: PPUSH
60106: LD_VAR 0 5
60110: PUSH
60111: LD_EXP 53
60115: PUSH
60116: LD_VAR 0 5
60120: ARRAY
60121: PUSH
60122: LD_INT 1
60124: PLUS
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PPUSH
60130: LD_VAR 0 2
60134: PUSH
60135: LD_VAR 0 4
60139: ARRAY
60140: PUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_VAR 0 4
60150: ARRAY
60151: PPUSH
60152: CALL_OW 255
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PPUSH
60161: CALL 18599 0 3
60165: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60166: LD_VAR 0 2
60170: PUSH
60171: LD_VAR 0 4
60175: ARRAY
60176: PPUSH
60177: LD_VAR 0 1
60181: PPUSH
60182: CALL_OW 255
60186: PPUSH
60187: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60191: LD_VAR 0 2
60195: PUSH
60196: LD_VAR 0 4
60200: ARRAY
60201: PPUSH
60202: CALL_OW 141
// end ;
60206: GO 60038
60208: POP
60209: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60210: LD_VAR 0 1
60214: PPUSH
60215: LD_EXP 53
60219: PUSH
60220: LD_VAR 0 5
60224: ARRAY
60225: PUSH
60226: LD_INT 0
60228: PLUS
60229: PPUSH
60230: CALL_OW 505
// end ;
60234: LD_VAR 0 3
60238: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60239: LD_INT 0
60241: PPUSH
60242: PPUSH
60243: PPUSH
60244: PPUSH
// if not hack in hackTanks then
60245: LD_VAR 0 1
60249: PUSH
60250: LD_EXP 52
60254: IN
60255: NOT
60256: IFFALSE 60260
// exit ;
60258: GO 60504
// index := GetElementIndex ( hackTanks , hack ) ;
60260: LD_ADDR_VAR 0 4
60264: PUSH
60265: LD_EXP 52
60269: PPUSH
60270: LD_VAR 0 1
60274: PPUSH
60275: CALL 18382 0 2
60279: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60280: LD_ADDR_VAR 0 3
60284: PUSH
60285: DOUBLE
60286: LD_EXP 53
60290: PUSH
60291: LD_VAR 0 4
60295: ARRAY
60296: INC
60297: ST_TO_ADDR
60298: LD_INT 1
60300: PUSH
60301: FOR_DOWNTO
60302: IFFALSE 60478
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60304: LD_ADDR_VAR 0 5
60308: PUSH
60309: LD_EXP 53
60313: PUSH
60314: LD_VAR 0 4
60318: ARRAY
60319: PUSH
60320: LD_VAR 0 3
60324: ARRAY
60325: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60326: LD_VAR 0 5
60330: PUSH
60331: LD_INT 1
60333: ARRAY
60334: PPUSH
60335: CALL_OW 302
60339: NOT
60340: IFTRUE 60368
60342: PUSH
60343: LD_VAR 0 5
60347: PUSH
60348: LD_INT 1
60350: ARRAY
60351: PPUSH
60352: CALL_OW 255
60356: PUSH
60357: LD_VAR 0 1
60361: PPUSH
60362: CALL_OW 255
60366: NONEQUAL
60367: OR
60368: IFFALSE 60476
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60370: LD_VAR 0 5
60374: PUSH
60375: LD_INT 1
60377: ARRAY
60378: PPUSH
60379: CALL_OW 305
60383: IFFALSE 60411
60385: PUSH
60386: LD_VAR 0 5
60390: PUSH
60391: LD_INT 1
60393: ARRAY
60394: PPUSH
60395: CALL_OW 255
60399: PUSH
60400: LD_VAR 0 1
60404: PPUSH
60405: CALL_OW 255
60409: EQUAL
60410: AND
60411: IFFALSE 60435
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60413: LD_VAR 0 5
60417: PUSH
60418: LD_INT 1
60420: ARRAY
60421: PPUSH
60422: LD_VAR 0 5
60426: PUSH
60427: LD_INT 2
60429: ARRAY
60430: PPUSH
60431: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60435: LD_ADDR_EXP 53
60439: PUSH
60440: LD_EXP 53
60444: PPUSH
60445: LD_VAR 0 4
60449: PPUSH
60450: LD_EXP 53
60454: PUSH
60455: LD_VAR 0 4
60459: ARRAY
60460: PPUSH
60461: LD_VAR 0 3
60465: PPUSH
60466: CALL_OW 3
60470: PPUSH
60471: CALL_OW 1
60475: ST_TO_ADDR
// end ; end ;
60476: GO 60301
60478: POP
60479: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60480: LD_VAR 0 1
60484: PPUSH
60485: LD_EXP 53
60489: PUSH
60490: LD_VAR 0 4
60494: ARRAY
60495: PUSH
60496: LD_INT 0
60498: PLUS
60499: PPUSH
60500: CALL_OW 505
// end ;
60504: LD_VAR 0 2
60508: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60509: LD_INT 0
60511: PPUSH
60512: PPUSH
60513: PPUSH
60514: PPUSH
// if not hack in hackTanks then
60515: LD_VAR 0 1
60519: PUSH
60520: LD_EXP 52
60524: IN
60525: NOT
60526: IFFALSE 60530
// exit ;
60528: GO 60615
// index := GetElementIndex ( hackTanks , hack ) ;
60530: LD_ADDR_VAR 0 5
60534: PUSH
60535: LD_EXP 52
60539: PPUSH
60540: LD_VAR 0 1
60544: PPUSH
60545: CALL 18382 0 2
60549: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60550: LD_ADDR_VAR 0 4
60554: PUSH
60555: DOUBLE
60556: LD_INT 1
60558: DEC
60559: ST_TO_ADDR
60560: LD_EXP 53
60564: PUSH
60565: LD_VAR 0 5
60569: ARRAY
60570: PUSH
60571: FOR_TO
60572: IFFALSE 60613
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60574: LD_EXP 53
60578: PUSH
60579: LD_VAR 0 5
60583: ARRAY
60584: PUSH
60585: LD_VAR 0 4
60589: ARRAY
60590: PUSH
60591: LD_INT 1
60593: ARRAY
60594: PUSH
60595: LD_VAR 0 2
60599: EQUAL
60600: IFFALSE 60611
// KillUnit ( vehicle ) ;
60602: LD_VAR 0 2
60606: PPUSH
60607: CALL_OW 66
60611: GO 60571
60613: POP
60614: POP
// end ;
60615: LD_VAR 0 3
60619: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60620: LD_EXP 57
60624: NOT
60625: IFFALSE 60758
60627: GO 60629
60629: DISABLE
60630: LD_INT 0
60632: PPUSH
// begin initMiner := true ;
60633: LD_ADDR_EXP 57
60637: PUSH
60638: LD_INT 1
60640: ST_TO_ADDR
// minersList := [ ] ;
60641: LD_ADDR_EXP 58
60645: PUSH
60646: EMPTY
60647: ST_TO_ADDR
// minerMinesList := [ ] ;
60648: LD_ADDR_EXP 59
60652: PUSH
60653: EMPTY
60654: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60655: LD_ADDR_EXP 60
60659: PUSH
60660: LD_INT 10
60662: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60663: LD_ADDR_VAR 0 1
60667: PUSH
60668: LD_INT 34
60670: PUSH
60671: LD_INT 81
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PPUSH
60678: CALL_OW 69
60682: PUSH
60683: FOR_IN
60684: IFFALSE 60756
// begin if not i in minersList then
60686: LD_VAR 0 1
60690: PUSH
60691: LD_EXP 58
60695: IN
60696: NOT
60697: IFFALSE 60754
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60699: LD_ADDR_EXP 58
60703: PUSH
60704: LD_EXP 58
60708: PPUSH
60709: LD_EXP 58
60713: PUSH
60714: LD_INT 1
60716: PLUS
60717: PPUSH
60718: LD_VAR 0 1
60722: PPUSH
60723: CALL_OW 1
60727: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60728: LD_ADDR_EXP 59
60732: PUSH
60733: LD_EXP 59
60737: PPUSH
60738: LD_EXP 59
60742: PUSH
60743: LD_INT 1
60745: PLUS
60746: PPUSH
60747: EMPTY
60748: PPUSH
60749: CALL_OW 1
60753: ST_TO_ADDR
// end end ;
60754: GO 60683
60756: POP
60757: POP
// end ;
60758: PPOPN 1
60760: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60761: LD_EXP 57
60765: IFFALSE 60796
60767: PUSH
60768: LD_EXP 59
60772: PPUSH
60773: CALL 15681 0 1
60777: IFTRUE 60795
60779: PUSH
60780: LD_INT 34
60782: PUSH
60783: LD_INT 81
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PPUSH
60790: CALL_OW 69
60794: OR
60795: AND
60796: IFFALSE 61316
60798: GO 60800
60800: DISABLE
60801: LD_INT 0
60803: PPUSH
60804: PPUSH
60805: PPUSH
60806: PPUSH
// begin enable ;
60807: ENABLE
// for i := minerMinesList downto 1 do
60808: LD_ADDR_VAR 0 1
60812: PUSH
60813: DOUBLE
60814: LD_EXP 59
60818: INC
60819: ST_TO_ADDR
60820: LD_INT 1
60822: PUSH
60823: FOR_DOWNTO
60824: IFFALSE 61314
// begin side := GetSide ( minersList [ i ] ) ;
60826: LD_ADDR_VAR 0 3
60830: PUSH
60831: LD_EXP 58
60835: PUSH
60836: LD_VAR 0 1
60840: ARRAY
60841: PPUSH
60842: CALL_OW 255
60846: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60847: LD_EXP 58
60851: PUSH
60852: LD_VAR 0 1
60856: ARRAY
60857: PPUSH
60858: CALL_OW 300
60862: IFFALSE 60883
60864: PUSH
60865: LD_VAR 0 3
60869: PUSH
60870: LD_OWVAR 2
60874: PUSH
60875: LD_INT 9
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: IN
60882: AND
60883: IFFALSE 60916
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60885: LD_EXP 58
60889: PUSH
60890: LD_VAR 0 1
60894: ARRAY
60895: PPUSH
60896: LD_EXP 59
60900: PUSH
60901: LD_VAR 0 1
60905: ARRAY
60906: PPUSH
60907: CALL 15681 0 1
60911: PPUSH
60912: CALL_OW 505
// if not minerMinesList [ i ] then
60916: LD_EXP 59
60920: PUSH
60921: LD_VAR 0 1
60925: ARRAY
60926: NOT
60927: IFFALSE 60931
// continue ;
60929: GO 60823
// for j := minerMinesList [ i ] downto 1 do
60931: LD_ADDR_VAR 0 2
60935: PUSH
60936: DOUBLE
60937: LD_EXP 59
60941: PUSH
60942: LD_VAR 0 1
60946: ARRAY
60947: INC
60948: ST_TO_ADDR
60949: LD_INT 1
60951: PUSH
60952: FOR_DOWNTO
60953: IFFALSE 61310
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60955: LD_EXP 58
60959: PUSH
60960: LD_VAR 0 1
60964: ARRAY
60965: PPUSH
60966: CALL_OW 301
60970: IFTRUE 60990
60972: PUSH
60973: LD_EXP 58
60977: PUSH
60978: LD_VAR 0 1
60982: ARRAY
60983: PPUSH
60984: CALL_OW 305
60988: NOT
60989: OR
60990: IFFALSE 61081
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60992: LD_EXP 59
60996: PUSH
60997: LD_VAR 0 1
61001: ARRAY
61002: PUSH
61003: LD_VAR 0 2
61007: ARRAY
61008: PUSH
61009: LD_INT 1
61011: ARRAY
61012: PPUSH
61013: LD_EXP 59
61017: PUSH
61018: LD_VAR 0 1
61022: ARRAY
61023: PUSH
61024: LD_VAR 0 2
61028: ARRAY
61029: PUSH
61030: LD_INT 2
61032: ARRAY
61033: PPUSH
61034: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61038: LD_ADDR_EXP 59
61042: PUSH
61043: LD_EXP 59
61047: PPUSH
61048: LD_VAR 0 1
61052: PPUSH
61053: LD_EXP 59
61057: PUSH
61058: LD_VAR 0 1
61062: ARRAY
61063: PPUSH
61064: LD_VAR 0 2
61068: PPUSH
61069: CALL_OW 3
61073: PPUSH
61074: CALL_OW 1
61078: ST_TO_ADDR
// continue ;
61079: GO 60952
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
61081: LD_ADDR_VAR 0 4
61085: PUSH
61086: LD_EXP 59
61090: PUSH
61091: LD_VAR 0 1
61095: ARRAY
61096: PUSH
61097: LD_VAR 0 2
61101: ARRAY
61102: PUSH
61103: LD_INT 1
61105: ARRAY
61106: PPUSH
61107: LD_EXP 59
61111: PUSH
61112: LD_VAR 0 1
61116: ARRAY
61117: PUSH
61118: LD_VAR 0 2
61122: ARRAY
61123: PUSH
61124: LD_INT 2
61126: ARRAY
61127: PPUSH
61128: CALL_OW 428
61132: ST_TO_ADDR
// if not tmp then
61133: LD_VAR 0 4
61137: NOT
61138: IFFALSE 61142
// continue ;
61140: GO 60952
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
61142: LD_VAR 0 4
61146: PUSH
61147: LD_INT 81
61149: PUSH
61150: LD_VAR 0 3
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PPUSH
61159: CALL_OW 69
61163: IN
61164: IFFALSE 61214
61166: PUSH
61167: LD_EXP 59
61171: PUSH
61172: LD_VAR 0 1
61176: ARRAY
61177: PUSH
61178: LD_VAR 0 2
61182: ARRAY
61183: PUSH
61184: LD_INT 1
61186: ARRAY
61187: PPUSH
61188: LD_EXP 59
61192: PUSH
61193: LD_VAR 0 1
61197: ARRAY
61198: PUSH
61199: LD_VAR 0 2
61203: ARRAY
61204: PUSH
61205: LD_INT 2
61207: ARRAY
61208: PPUSH
61209: CALL_OW 458
61213: AND
61214: IFFALSE 61308
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61216: LD_EXP 59
61220: PUSH
61221: LD_VAR 0 1
61225: ARRAY
61226: PUSH
61227: LD_VAR 0 2
61231: ARRAY
61232: PUSH
61233: LD_INT 1
61235: ARRAY
61236: PPUSH
61237: LD_EXP 59
61241: PUSH
61242: LD_VAR 0 1
61246: ARRAY
61247: PUSH
61248: LD_VAR 0 2
61252: ARRAY
61253: PUSH
61254: LD_INT 2
61256: ARRAY
61257: PPUSH
61258: LD_VAR 0 3
61262: PPUSH
61263: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61267: LD_ADDR_EXP 59
61271: PUSH
61272: LD_EXP 59
61276: PPUSH
61277: LD_VAR 0 1
61281: PPUSH
61282: LD_EXP 59
61286: PUSH
61287: LD_VAR 0 1
61291: ARRAY
61292: PPUSH
61293: LD_VAR 0 2
61297: PPUSH
61298: CALL_OW 3
61302: PPUSH
61303: CALL_OW 1
61307: ST_TO_ADDR
// end ; end ;
61308: GO 60952
61310: POP
61311: POP
// end ;
61312: GO 60823
61314: POP
61315: POP
// end ;
61316: PPOPN 4
61318: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61319: LD_INT 0
61321: PPUSH
61322: PPUSH
61323: PPUSH
61324: PPUSH
// result := false ;
61325: LD_ADDR_VAR 0 4
61329: PUSH
61330: LD_INT 0
61332: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61333: LD_VAR 0 1
61337: PPUSH
61338: CALL_OW 264
61342: PUSH
61343: LD_INT 81
61345: EQUAL
61346: NOT
61347: IFFALSE 61351
// exit ;
61349: GO 61721
// side := GetSide ( unit ) ;
61351: LD_ADDR_VAR 0 6
61355: PUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 255
61365: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61366: LD_ADDR_VAR 0 5
61370: PUSH
61371: LD_EXP 58
61375: PPUSH
61376: LD_VAR 0 1
61380: PPUSH
61381: CALL 18382 0 2
61385: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61386: LD_EXP 59
61390: PUSH
61391: LD_VAR 0 5
61395: ARRAY
61396: PUSH
61397: LD_EXP 60
61401: GREATEREQUAL
61402: IFFALSE 61406
// exit ;
61404: GO 61721
// ComMoveXY ( unit , x , y ) ;
61406: LD_VAR 0 1
61410: PPUSH
61411: LD_VAR 0 2
61415: PPUSH
61416: LD_VAR 0 3
61420: PPUSH
61421: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61425: LD_INT 35
61427: PPUSH
61428: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61432: LD_VAR 0 1
61436: PPUSH
61437: LD_VAR 0 2
61441: PPUSH
61442: LD_VAR 0 3
61446: PPUSH
61447: CALL 50438 0 3
61451: NOT
61452: IFFALSE 61465
61454: PUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: CALL_OW 314
61464: AND
61465: IFFALSE 61469
// exit ;
61467: GO 61721
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61469: LD_VAR 0 2
61473: PPUSH
61474: LD_VAR 0 3
61478: PPUSH
61479: CALL_OW 428
61483: PUSH
61484: LD_VAR 0 1
61488: EQUAL
61489: IFFALSE 61503
61491: PUSH
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL_OW 314
61501: NOT
61502: AND
61503: IFFALSE 61425
// if MineAtPos ( x , y ) then
61505: LD_VAR 0 2
61509: PPUSH
61510: LD_VAR 0 3
61514: PPUSH
61515: CALL_OW 458
61519: IFFALSE 61523
// exit ;
61521: GO 61721
// if your_side = side then
61523: LD_OWVAR 2
61527: PUSH
61528: LD_VAR 0 6
61532: EQUAL
61533: IFFALSE 61552
// PlaySoundXY ( x , y , PlantMine ) ;
61535: LD_VAR 0 2
61539: PPUSH
61540: LD_VAR 0 3
61544: PPUSH
61545: LD_STRING PlantMine
61547: PPUSH
61548: CALL_OW 366
// repeat wait ( 1 ) ;
61552: LD_INT 1
61554: PPUSH
61555: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61559: LD_VAR 0 2
61563: PPUSH
61564: LD_VAR 0 3
61568: PPUSH
61569: LD_VAR 0 6
61573: PPUSH
61574: LD_INT 0
61576: PPUSH
61577: CALL_OW 454
61581: IFFALSE 61552
// if MineAtPos ( x , y ) then
61583: LD_VAR 0 2
61587: PPUSH
61588: LD_VAR 0 3
61592: PPUSH
61593: CALL_OW 458
61597: IFFALSE 61713
// begin for i in minerMinesList [ index ] do
61599: LD_ADDR_VAR 0 7
61603: PUSH
61604: LD_EXP 59
61608: PUSH
61609: LD_VAR 0 5
61613: ARRAY
61614: PUSH
61615: FOR_IN
61616: IFFALSE 61658
// if i [ 1 ] = x and i [ 2 ] = y then
61618: LD_VAR 0 7
61622: PUSH
61623: LD_INT 1
61625: ARRAY
61626: PUSH
61627: LD_VAR 0 2
61631: EQUAL
61632: IFFALSE 61650
61634: PUSH
61635: LD_VAR 0 7
61639: PUSH
61640: LD_INT 2
61642: ARRAY
61643: PUSH
61644: LD_VAR 0 3
61648: EQUAL
61649: AND
61650: IFFALSE 61656
// exit ;
61652: POP
61653: POP
61654: GO 61721
61656: GO 61615
61658: POP
61659: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61660: LD_ADDR_EXP 59
61664: PUSH
61665: LD_EXP 59
61669: PPUSH
61670: LD_VAR 0 5
61674: PUSH
61675: LD_EXP 59
61679: PUSH
61680: LD_VAR 0 5
61684: ARRAY
61685: PUSH
61686: LD_INT 1
61688: PLUS
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PPUSH
61694: LD_VAR 0 2
61698: PUSH
61699: LD_VAR 0 3
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PPUSH
61708: CALL 18599 0 3
61712: ST_TO_ADDR
// end ; result := true ;
61713: LD_ADDR_VAR 0 4
61717: PUSH
61718: LD_INT 1
61720: ST_TO_ADDR
// end ;
61721: LD_VAR 0 4
61725: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61726: LD_INT 0
61728: PPUSH
61729: PPUSH
61730: PPUSH
// if not unit in minersList then
61731: LD_VAR 0 1
61735: PUSH
61736: LD_EXP 58
61740: IN
61741: NOT
61742: IFFALSE 61746
// exit ;
61744: GO 61953
// index := GetElementIndex ( minersList , unit ) ;
61746: LD_ADDR_VAR 0 6
61750: PUSH
61751: LD_EXP 58
61755: PPUSH
61756: LD_VAR 0 1
61760: PPUSH
61761: CALL 18382 0 2
61765: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61766: LD_ADDR_VAR 0 5
61770: PUSH
61771: DOUBLE
61772: LD_EXP 59
61776: PUSH
61777: LD_VAR 0 6
61781: ARRAY
61782: INC
61783: ST_TO_ADDR
61784: LD_INT 1
61786: PUSH
61787: FOR_DOWNTO
61788: IFFALSE 61951
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61790: LD_EXP 59
61794: PUSH
61795: LD_VAR 0 6
61799: ARRAY
61800: PUSH
61801: LD_VAR 0 5
61805: ARRAY
61806: PUSH
61807: LD_INT 1
61809: ARRAY
61810: PPUSH
61811: LD_EXP 59
61815: PUSH
61816: LD_VAR 0 6
61820: ARRAY
61821: PUSH
61822: LD_VAR 0 5
61826: ARRAY
61827: PUSH
61828: LD_INT 2
61830: ARRAY
61831: PPUSH
61832: LD_VAR 0 2
61836: PPUSH
61837: LD_VAR 0 3
61841: PPUSH
61842: CALL_OW 298
61846: PUSH
61847: LD_INT 6
61849: LESS
61850: IFFALSE 61949
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61852: LD_EXP 59
61856: PUSH
61857: LD_VAR 0 6
61861: ARRAY
61862: PUSH
61863: LD_VAR 0 5
61867: ARRAY
61868: PUSH
61869: LD_INT 1
61871: ARRAY
61872: PPUSH
61873: LD_EXP 59
61877: PUSH
61878: LD_VAR 0 6
61882: ARRAY
61883: PUSH
61884: LD_VAR 0 5
61888: ARRAY
61889: PUSH
61890: LD_INT 2
61892: ARRAY
61893: PPUSH
61894: LD_VAR 0 1
61898: PPUSH
61899: CALL_OW 255
61903: PPUSH
61904: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61908: LD_ADDR_EXP 59
61912: PUSH
61913: LD_EXP 59
61917: PPUSH
61918: LD_VAR 0 6
61922: PPUSH
61923: LD_EXP 59
61927: PUSH
61928: LD_VAR 0 6
61932: ARRAY
61933: PPUSH
61934: LD_VAR 0 5
61938: PPUSH
61939: CALL_OW 3
61943: PPUSH
61944: CALL_OW 1
61948: ST_TO_ADDR
// end ; end ;
61949: GO 61787
61951: POP
61952: POP
// end ;
61953: LD_VAR 0 4
61957: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61958: LD_INT 0
61960: PPUSH
61961: PPUSH
61962: PPUSH
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
61967: PPUSH
61968: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 264
61978: PUSH
61979: LD_INT 81
61981: EQUAL
61982: NOT
61983: IFTRUE 61998
61985: PUSH
61986: LD_VAR 0 1
61990: PUSH
61991: LD_EXP 58
61995: IN
61996: NOT
61997: OR
61998: IFFALSE 62002
// exit ;
62000: GO 62328
// index := GetElementIndex ( minersList , unit ) ;
62002: LD_ADDR_VAR 0 6
62006: PUSH
62007: LD_EXP 58
62011: PPUSH
62012: LD_VAR 0 1
62016: PPUSH
62017: CALL 18382 0 2
62021: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
62022: LD_ADDR_VAR 0 8
62026: PUSH
62027: LD_EXP 60
62031: PUSH
62032: LD_EXP 59
62036: PUSH
62037: LD_VAR 0 6
62041: ARRAY
62042: MINUS
62043: ST_TO_ADDR
// if not minesFreeAmount then
62044: LD_VAR 0 8
62048: NOT
62049: IFFALSE 62053
// exit ;
62051: GO 62328
// tmp := [ ] ;
62053: LD_ADDR_VAR 0 7
62057: PUSH
62058: EMPTY
62059: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
62060: LD_ADDR_VAR 0 5
62064: PUSH
62065: DOUBLE
62066: LD_INT 1
62068: DEC
62069: ST_TO_ADDR
62070: LD_VAR 0 8
62074: PUSH
62075: FOR_TO
62076: IFFALSE 62275
// begin _d := rand ( 0 , 5 ) ;
62078: LD_ADDR_VAR 0 11
62082: PUSH
62083: LD_INT 0
62085: PPUSH
62086: LD_INT 5
62088: PPUSH
62089: CALL_OW 12
62093: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
62094: LD_ADDR_VAR 0 12
62098: PUSH
62099: LD_INT 2
62101: PPUSH
62102: LD_INT 6
62104: PPUSH
62105: CALL_OW 12
62109: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
62110: LD_ADDR_VAR 0 9
62114: PUSH
62115: LD_VAR 0 2
62119: PPUSH
62120: LD_VAR 0 11
62124: PPUSH
62125: LD_VAR 0 12
62129: PPUSH
62130: CALL_OW 272
62134: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
62135: LD_ADDR_VAR 0 10
62139: PUSH
62140: LD_VAR 0 3
62144: PPUSH
62145: LD_VAR 0 11
62149: PPUSH
62150: LD_VAR 0 12
62154: PPUSH
62155: CALL_OW 273
62159: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62160: LD_VAR 0 9
62164: PPUSH
62165: LD_VAR 0 10
62169: PPUSH
62170: CALL_OW 488
62174: IFFALSE 62198
62176: PUSH
62177: LD_VAR 0 9
62181: PUSH
62182: LD_VAR 0 10
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_VAR 0 7
62195: IN
62196: NOT
62197: AND
62198: IFFALSE 62217
62200: PUSH
62201: LD_VAR 0 9
62205: PPUSH
62206: LD_VAR 0 10
62210: PPUSH
62211: CALL_OW 458
62215: NOT
62216: AND
62217: IFFALSE 62259
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62219: LD_ADDR_VAR 0 7
62223: PUSH
62224: LD_VAR 0 7
62228: PPUSH
62229: LD_VAR 0 7
62233: PUSH
62234: LD_INT 1
62236: PLUS
62237: PPUSH
62238: LD_VAR 0 9
62242: PUSH
62243: LD_VAR 0 10
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PPUSH
62252: CALL_OW 1
62256: ST_TO_ADDR
62257: GO 62273
// i := i - 1 ;
62259: LD_ADDR_VAR 0 5
62263: PUSH
62264: LD_VAR 0 5
62268: PUSH
62269: LD_INT 1
62271: MINUS
62272: ST_TO_ADDR
// end ;
62273: GO 62075
62275: POP
62276: POP
// for i in tmp do
62277: LD_ADDR_VAR 0 5
62281: PUSH
62282: LD_VAR 0 7
62286: PUSH
62287: FOR_IN
62288: IFFALSE 62326
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62290: LD_VAR 0 1
62294: PPUSH
62295: LD_VAR 0 5
62299: PUSH
62300: LD_INT 1
62302: ARRAY
62303: PPUSH
62304: LD_VAR 0 5
62308: PUSH
62309: LD_INT 2
62311: ARRAY
62312: PPUSH
62313: CALL 61319 0 3
62317: NOT
62318: IFFALSE 62324
// exit ;
62320: POP
62321: POP
62322: GO 62328
62324: GO 62287
62326: POP
62327: POP
// end ;
62328: LD_VAR 0 4
62332: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62333: LD_INT 0
62335: PPUSH
62336: PPUSH
62337: PPUSH
62338: PPUSH
62339: PPUSH
62340: PPUSH
62341: PPUSH
62342: PPUSH
62343: PPUSH
// if GetClass ( unit ) <> class_sniper then
62344: LD_VAR 0 1
62348: PPUSH
62349: CALL_OW 257
62353: PUSH
62354: LD_INT 5
62356: NONEQUAL
62357: IFFALSE 62361
// exit ;
62359: GO 62831
// dist := 8 ;
62361: LD_ADDR_VAR 0 5
62365: PUSH
62366: LD_INT 8
62368: ST_TO_ADDR
// viewRange := 12 ;
62369: LD_ADDR_VAR 0 8
62373: PUSH
62374: LD_INT 12
62376: ST_TO_ADDR
// side := GetSide ( unit ) ;
62377: LD_ADDR_VAR 0 6
62381: PUSH
62382: LD_VAR 0 1
62386: PPUSH
62387: CALL_OW 255
62391: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62392: LD_INT 61
62394: PPUSH
62395: LD_VAR 0 6
62399: PPUSH
62400: CALL_OW 321
62404: PUSH
62405: LD_INT 2
62407: EQUAL
62408: IFFALSE 62418
// viewRange := 16 ;
62410: LD_ADDR_VAR 0 8
62414: PUSH
62415: LD_INT 16
62417: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62418: LD_VAR 0 1
62422: PPUSH
62423: LD_VAR 0 2
62427: PPUSH
62428: LD_VAR 0 3
62432: PPUSH
62433: CALL_OW 297
62437: PUSH
62438: LD_VAR 0 5
62442: GREATER
62443: IFFALSE 62522
// begin ComMoveXY ( unit , x , y ) ;
62445: LD_VAR 0 1
62449: PPUSH
62450: LD_VAR 0 2
62454: PPUSH
62455: LD_VAR 0 3
62459: PPUSH
62460: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62464: LD_INT 35
62466: PPUSH
62467: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62471: LD_VAR 0 1
62475: PPUSH
62476: LD_VAR 0 2
62480: PPUSH
62481: LD_VAR 0 3
62485: PPUSH
62486: CALL 50438 0 3
62490: NOT
62491: IFFALSE 62495
// exit ;
62493: GO 62831
// until GetDistUnitXY ( unit , x , y ) < dist ;
62495: LD_VAR 0 1
62499: PPUSH
62500: LD_VAR 0 2
62504: PPUSH
62505: LD_VAR 0 3
62509: PPUSH
62510: CALL_OW 297
62514: PUSH
62515: LD_VAR 0 5
62519: LESS
62520: IFFALSE 62464
// end ; ComTurnXY ( unit , x , y ) ;
62522: LD_VAR 0 1
62526: PPUSH
62527: LD_VAR 0 2
62531: PPUSH
62532: LD_VAR 0 3
62536: PPUSH
62537: CALL_OW 118
// repeat if Multiplayer then
62541: LD_OWVAR 4
62545: IFFALSE 62556
// wait ( 35 ) else
62547: LD_INT 35
62549: PPUSH
62550: CALL_OW 67
62554: GO 62563
// wait ( 5 ) ;
62556: LD_INT 5
62558: PPUSH
62559: CALL_OW 67
// _d := GetDir ( unit ) ;
62563: LD_ADDR_VAR 0 11
62567: PUSH
62568: LD_VAR 0 1
62572: PPUSH
62573: CALL_OW 254
62577: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62578: LD_ADDR_VAR 0 7
62582: PUSH
62583: LD_VAR 0 1
62587: PPUSH
62588: CALL_OW 250
62592: PPUSH
62593: LD_VAR 0 1
62597: PPUSH
62598: CALL_OW 251
62602: PPUSH
62603: LD_VAR 0 2
62607: PPUSH
62608: LD_VAR 0 3
62612: PPUSH
62613: CALL 53074 0 4
62617: ST_TO_ADDR
// until dir = _d ;
62618: LD_VAR 0 7
62622: PUSH
62623: LD_VAR 0 11
62627: EQUAL
62628: IFFALSE 62541
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62630: LD_ADDR_VAR 0 9
62634: PUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: CALL_OW 250
62644: PPUSH
62645: LD_VAR 0 7
62649: PPUSH
62650: LD_VAR 0 5
62654: PPUSH
62655: CALL_OW 272
62659: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62660: LD_ADDR_VAR 0 10
62664: PUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: CALL_OW 251
62674: PPUSH
62675: LD_VAR 0 7
62679: PPUSH
62680: LD_VAR 0 5
62684: PPUSH
62685: CALL_OW 273
62689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62690: LD_VAR 0 9
62694: PPUSH
62695: LD_VAR 0 10
62699: PPUSH
62700: CALL_OW 488
62704: NOT
62705: IFFALSE 62709
// exit ;
62707: GO 62831
// ComAnimCustom ( unit , 1 ) ;
62709: LD_VAR 0 1
62713: PPUSH
62714: LD_INT 1
62716: PPUSH
62717: CALL_OW 592
// p := 0 ;
62721: LD_ADDR_VAR 0 12
62725: PUSH
62726: LD_INT 0
62728: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62729: LD_VAR 0 9
62733: PPUSH
62734: LD_VAR 0 10
62738: PPUSH
62739: LD_VAR 0 6
62743: PPUSH
62744: LD_VAR 0 8
62748: PPUSH
62749: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62753: LD_INT 35
62755: PPUSH
62756: CALL_OW 67
// p := Inc ( p ) ;
62760: LD_ADDR_VAR 0 12
62764: PUSH
62765: LD_VAR 0 12
62769: PPUSH
62770: CALL 53030 0 1
62774: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62775: LD_VAR 0 12
62779: PUSH
62780: LD_INT 3
62782: EQUAL
62783: IFTRUE 62797
62785: PUSH
62786: LD_VAR 0 1
62790: PPUSH
62791: CALL_OW 302
62795: NOT
62796: OR
62797: IFTRUE 62810
62799: PUSH
62800: LD_VAR 0 1
62804: PPUSH
62805: CALL_OW 301
62809: OR
62810: IFFALSE 62753
// RemoveSeeing ( _x , _y , side ) ;
62812: LD_VAR 0 9
62816: PPUSH
62817: LD_VAR 0 10
62821: PPUSH
62822: LD_VAR 0 6
62826: PPUSH
62827: CALL_OW 331
// end ;
62831: LD_VAR 0 4
62835: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62836: LD_INT 0
62838: PPUSH
62839: PPUSH
62840: PPUSH
62841: PPUSH
62842: PPUSH
62843: PPUSH
62844: PPUSH
62845: PPUSH
62846: PPUSH
62847: PPUSH
62848: PPUSH
// if not unit then
62849: LD_VAR 0 1
62853: NOT
62854: IFFALSE 62858
// exit ;
62856: GO 63129
// side := GetSide ( unit ) ;
62858: LD_ADDR_VAR 0 3
62862: PUSH
62863: LD_VAR 0 1
62867: PPUSH
62868: CALL_OW 255
62872: ST_TO_ADDR
// x := GetX ( unit ) ;
62873: LD_ADDR_VAR 0 5
62877: PUSH
62878: LD_VAR 0 1
62882: PPUSH
62883: CALL_OW 250
62887: ST_TO_ADDR
// y := GetY ( unit ) ;
62888: LD_ADDR_VAR 0 6
62892: PUSH
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 251
62902: ST_TO_ADDR
// r := 8 ;
62903: LD_ADDR_VAR 0 4
62907: PUSH
62908: LD_INT 8
62910: ST_TO_ADDR
// if x - r < 0 then
62911: LD_VAR 0 5
62915: PUSH
62916: LD_VAR 0 4
62920: MINUS
62921: PUSH
62922: LD_INT 0
62924: LESS
62925: IFFALSE 62937
// min_x := 0 else
62927: LD_ADDR_VAR 0 7
62931: PUSH
62932: LD_INT 0
62934: ST_TO_ADDR
62935: GO 62953
// min_x := x - r ;
62937: LD_ADDR_VAR 0 7
62941: PUSH
62942: LD_VAR 0 5
62946: PUSH
62947: LD_VAR 0 4
62951: MINUS
62952: ST_TO_ADDR
// if y - r < 0 then
62953: LD_VAR 0 6
62957: PUSH
62958: LD_VAR 0 4
62962: MINUS
62963: PUSH
62964: LD_INT 0
62966: LESS
62967: IFFALSE 62979
// min_y := 0 else
62969: LD_ADDR_VAR 0 8
62973: PUSH
62974: LD_INT 0
62976: ST_TO_ADDR
62977: GO 62995
// min_y := y - r ;
62979: LD_ADDR_VAR 0 8
62983: PUSH
62984: LD_VAR 0 6
62988: PUSH
62989: LD_VAR 0 4
62993: MINUS
62994: ST_TO_ADDR
// max_x := x + r ;
62995: LD_ADDR_VAR 0 9
62999: PUSH
63000: LD_VAR 0 5
63004: PUSH
63005: LD_VAR 0 4
63009: PLUS
63010: ST_TO_ADDR
// max_y := y + r ;
63011: LD_ADDR_VAR 0 10
63015: PUSH
63016: LD_VAR 0 6
63020: PUSH
63021: LD_VAR 0 4
63025: PLUS
63026: ST_TO_ADDR
// for _x = min_x to max_x do
63027: LD_ADDR_VAR 0 11
63031: PUSH
63032: DOUBLE
63033: LD_VAR 0 7
63037: DEC
63038: ST_TO_ADDR
63039: LD_VAR 0 9
63043: PUSH
63044: FOR_TO
63045: IFFALSE 63127
// for _y = min_y to max_y do
63047: LD_ADDR_VAR 0 12
63051: PUSH
63052: DOUBLE
63053: LD_VAR 0 8
63057: DEC
63058: ST_TO_ADDR
63059: LD_VAR 0 10
63063: PUSH
63064: FOR_TO
63065: IFFALSE 63123
// begin if not ValidHex ( _x , _y ) then
63067: LD_VAR 0 11
63071: PPUSH
63072: LD_VAR 0 12
63076: PPUSH
63077: CALL_OW 488
63081: NOT
63082: IFFALSE 63086
// continue ;
63084: GO 63064
// if MineAtPos ( _x , _y ) then
63086: LD_VAR 0 11
63090: PPUSH
63091: LD_VAR 0 12
63095: PPUSH
63096: CALL_OW 458
63100: IFFALSE 63121
// ViewMineAtPos ( _x , _y , side ) ;
63102: LD_VAR 0 11
63106: PPUSH
63107: LD_VAR 0 12
63111: PPUSH
63112: LD_VAR 0 3
63116: PPUSH
63117: CALL_OW 457
// end ;
63121: GO 63064
63123: POP
63124: POP
63125: GO 63044
63127: POP
63128: POP
// end ;
63129: LD_VAR 0 2
63133: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
63134: LD_INT 0
63136: PPUSH
63137: PPUSH
63138: PPUSH
63139: PPUSH
63140: PPUSH
63141: PPUSH
63142: PPUSH
// if not units then
63143: LD_VAR 0 1
63147: NOT
63148: IFFALSE 63152
// exit ;
63150: GO 63616
// scaners := [ ] ;
63152: LD_ADDR_VAR 0 6
63156: PUSH
63157: EMPTY
63158: ST_TO_ADDR
// for i in units do
63159: LD_ADDR_VAR 0 3
63163: PUSH
63164: LD_VAR 0 1
63168: PUSH
63169: FOR_IN
63170: IFFALSE 63327
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
63172: LD_VAR 0 3
63176: PPUSH
63177: CALL_OW 264
63181: PUSH
63182: LD_INT 11
63184: NONEQUAL
63185: IFTRUE 63199
63187: PUSH
63188: LD_VAR 0 3
63192: PPUSH
63193: CALL_OW 302
63197: NOT
63198: OR
63199: IFTRUE 63216
63201: PUSH
63202: LD_VAR 0 3
63206: PPUSH
63207: CALL_OW 110
63211: PUSH
63212: LD_INT 502
63214: EQUAL
63215: OR
63216: IFFALSE 63220
// continue ;
63218: GO 63169
// ComStop ( i ) ;
63220: LD_VAR 0 3
63224: PPUSH
63225: CALL_OW 141
// x := GetX ( i ) ;
63229: LD_ADDR_VAR 0 4
63233: PUSH
63234: LD_VAR 0 3
63238: PPUSH
63239: CALL_OW 250
63243: ST_TO_ADDR
// y := GetY ( i ) ;
63244: LD_ADDR_VAR 0 5
63248: PUSH
63249: LD_VAR 0 3
63253: PPUSH
63254: CALL_OW 251
63258: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63259: LD_VAR 0 3
63263: PPUSH
63264: CALL_OW 255
63268: PUSH
63269: LD_OWVAR 2
63273: EQUAL
63274: IFFALSE 63293
// PlaySoundXY ( x , y , mineDetector ) ;
63276: LD_VAR 0 4
63280: PPUSH
63281: LD_VAR 0 5
63285: PPUSH
63286: LD_STRING mineDetector
63288: PPUSH
63289: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63293: LD_ADDR_VAR 0 6
63297: PUSH
63298: LD_VAR 0 6
63302: PPUSH
63303: LD_VAR 0 3
63307: PPUSH
63308: CALL 51657 0 2
63312: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63313: LD_VAR 0 3
63317: PPUSH
63318: LD_INT 502
63320: PPUSH
63321: CALL_OW 109
// end ;
63325: GO 63169
63327: POP
63328: POP
// if not scaners then
63329: LD_VAR 0 6
63333: NOT
63334: IFFALSE 63338
// exit ;
63336: GO 63616
// wait ( 3 ) ;
63338: LD_INT 3
63340: PPUSH
63341: CALL_OW 67
// timer := 6 ;
63345: LD_ADDR_VAR 0 7
63349: PUSH
63350: LD_INT 6
63352: ST_TO_ADDR
// repeat for i in scaners do
63353: LD_ADDR_VAR 0 3
63357: PUSH
63358: LD_VAR 0 6
63362: PUSH
63363: FOR_IN
63364: IFFALSE 63514
// begin side := GetSide ( i ) ;
63366: LD_ADDR_VAR 0 8
63370: PUSH
63371: LD_VAR 0 3
63375: PPUSH
63376: CALL_OW 255
63380: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63381: LD_VAR 0 3
63385: PPUSH
63386: CALL_OW 302
63390: NOT
63391: IFTRUE 63404
63393: PUSH
63394: LD_VAR 0 3
63398: PPUSH
63399: CALL_OW 314
63403: OR
63404: IFTRUE 63435
63406: PUSH
63407: LD_VAR 0 3
63411: PPUSH
63412: CALL_OW 263
63416: PUSH
63417: LD_INT 1
63419: EQUAL
63420: IFFALSE 63434
63422: PUSH
63423: LD_VAR 0 3
63427: PPUSH
63428: CALL_OW 311
63432: NOT
63433: AND
63434: OR
63435: IFFALSE 63479
// begin SetUnitDisplayNumber ( i , 0 ) ;
63437: LD_VAR 0 3
63441: PPUSH
63442: LD_INT 0
63444: PPUSH
63445: CALL_OW 505
// SetTag ( i , 0 ) ;
63449: LD_VAR 0 3
63453: PPUSH
63454: LD_INT 0
63456: PPUSH
63457: CALL_OW 109
// scaners := scaners diff i ;
63461: LD_ADDR_VAR 0 6
63465: PUSH
63466: LD_VAR 0 6
63470: PUSH
63471: LD_VAR 0 3
63475: DIFF
63476: ST_TO_ADDR
// continue ;
63477: GO 63363
// end ; if side in [ your_side , 9 ] then
63479: LD_VAR 0 8
63483: PUSH
63484: LD_OWVAR 2
63488: PUSH
63489: LD_INT 9
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: IN
63496: IFFALSE 63512
// SetUnitDisplayNumber ( i , timer ) ;
63498: LD_VAR 0 3
63502: PPUSH
63503: LD_VAR 0 7
63507: PPUSH
63508: CALL_OW 505
// end ;
63512: GO 63363
63514: POP
63515: POP
// if not scaners then
63516: LD_VAR 0 6
63520: NOT
63521: IFFALSE 63525
// exit ;
63523: GO 63616
// timer := Dec ( timer ) ;
63525: LD_ADDR_VAR 0 7
63529: PUSH
63530: LD_VAR 0 7
63534: PPUSH
63535: CALL 53052 0 1
63539: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63540: LD_INT 35
63542: PPUSH
63543: CALL_OW 67
// until timer = 0 ;
63547: LD_VAR 0 7
63551: PUSH
63552: LD_INT 0
63554: EQUAL
63555: IFFALSE 63353
// if not scaners then
63557: LD_VAR 0 6
63561: NOT
63562: IFFALSE 63566
// exit ;
63564: GO 63616
// for i in scaners do
63566: LD_ADDR_VAR 0 3
63570: PUSH
63571: LD_VAR 0 6
63575: PUSH
63576: FOR_IN
63577: IFFALSE 63614
// begin SetUnitDisplayNumber ( i , 0 ) ;
63579: LD_VAR 0 3
63583: PPUSH
63584: LD_INT 0
63586: PPUSH
63587: CALL_OW 505
// SetTag ( i , 0 ) ;
63591: LD_VAR 0 3
63595: PPUSH
63596: LD_INT 0
63598: PPUSH
63599: CALL_OW 109
// RevealDetectorMine ( i ) ;
63603: LD_VAR 0 3
63607: PPUSH
63608: CALL 62836 0 1
// end ;
63612: GO 63576
63614: POP
63615: POP
// end ;
63616: LD_VAR 0 2
63620: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63621: LD_INT 0
63623: PPUSH
// if p1 = mine_detector_mode then
63624: LD_VAR 0 2
63628: PUSH
63629: LD_INT 103
63631: EQUAL
63632: IFFALSE 63643
// DetectMine ( units ) ;
63634: LD_VAR 0 1
63638: PPUSH
63639: CALL 63134 0 1
// end ; end_of_file
63643: LD_VAR 0 7
63647: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63648: PPOPN 6
63650: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63651: LD_INT 0
63653: PPUSH
// begin if not units then
63654: LD_VAR 0 1
63658: NOT
63659: IFFALSE 63663
// exit ;
63661: GO 63697
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63663: LD_VAR 0 1
63667: PPUSH
63668: LD_VAR 0 2
63672: PPUSH
63673: LD_VAR 0 3
63677: PPUSH
63678: LD_VAR 0 4
63682: PPUSH
63683: LD_VAR 0 5
63687: PPUSH
63688: LD_VAR 0 6
63692: PPUSH
63693: CALL 63621 0 6
// end ;
63697: PPOPN 7
63699: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63700: LD_EXP 3
63704: PUSH
63705: LD_INT 4
63707: EQUAL
63708: IFFALSE 63744
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63710: LD_STRING setGameDifficulty(
63712: PUSH
63713: LD_OWVAR 67
63717: STR
63718: PUSH
63719: LD_STRING )
63721: STR
63722: PPUSH
63723: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63727: LD_STRING displayDifficulty(
63729: PUSH
63730: LD_OWVAR 67
63734: STR
63735: PUSH
63736: LD_STRING )
63738: STR
63739: PPUSH
63740: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63744: CALL 63773 0 0
// end ; end_of_file
63748: PPOPN 1
63750: END
// every 0 0$1 do
63751: GO 63753
63753: DISABLE
// begin enable ;
63754: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63755: LD_STRING updateTimer(
63757: PUSH
63758: LD_OWVAR 1
63762: STR
63763: PUSH
63764: LD_STRING );
63766: STR
63767: PPUSH
63768: CALL_OW 559
// end ;
63772: END
// export function SOS_MapStart ( ) ; begin
63773: LD_INT 0
63775: PPUSH
// UpdateFactoryWaypoints ( ) ;
63776: CALL 64714 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63780: CALL 64966 0 0
// ParseMultiDataToLua ( ) ;
63784: CALL 65113 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
63788: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
63790: PPUSH
63791: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63795: LD_STRING setSpecLogoNumber(
63797: PUSH
63798: LD_INT 2
63800: STR
63801: PUSH
63802: LD_STRING ,
63804: STR
63805: PUSH
63806: LD_INT 1
63808: STR
63809: PUSH
63810: LD_STRING )
63812: STR
63813: PPUSH
63814: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63818: LD_STRING setSpecLogoNumber(
63820: PUSH
63821: LD_INT 3
63823: STR
63824: PUSH
63825: LD_STRING ,
63827: STR
63828: PUSH
63829: LD_INT 2
63831: STR
63832: PUSH
63833: LD_STRING )
63835: STR
63836: PPUSH
63837: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63841: LD_STRING setSpecLogoNumber(
63843: PUSH
63844: LD_INT 4
63846: STR
63847: PUSH
63848: LD_STRING ,
63850: STR
63851: PUSH
63852: LD_INT 3
63854: STR
63855: PUSH
63856: LD_STRING )
63858: STR
63859: PPUSH
63860: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63864: LD_STRING setSpecLogoNumber(
63866: PUSH
63867: LD_INT 5
63869: STR
63870: PUSH
63871: LD_STRING ,
63873: STR
63874: PUSH
63875: LD_INT 4
63877: STR
63878: PUSH
63879: LD_STRING )
63881: STR
63882: PPUSH
63883: CALL_OW 559
// end ;
63887: LD_VAR 0 1
63891: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63892: LD_INT 0
63894: PPUSH
63895: PPUSH
63896: PPUSH
63897: PPUSH
63898: PPUSH
63899: PPUSH
63900: PPUSH
63901: PPUSH
63902: PPUSH
// for i := 1 to 8 do
63903: LD_ADDR_VAR 0 2
63907: PUSH
63908: DOUBLE
63909: LD_INT 1
63911: DEC
63912: ST_TO_ADDR
63913: LD_INT 8
63915: PUSH
63916: FOR_TO
63917: IFFALSE 64302
// begin if mpSidePositions [ i ] then
63919: LD_EXP 7
63923: PUSH
63924: LD_VAR 0 2
63928: ARRAY
63929: IFFALSE 64300
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63931: LD_ADDR_VAR 0 7
63935: PUSH
63936: LD_INT 22
63938: PUSH
63939: LD_VAR 0 2
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 21
63950: PUSH
63951: LD_INT 1
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PPUSH
63962: CALL_OW 69
63966: PPUSH
63967: CALL 15681 0 1
63971: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63972: LD_ADDR_VAR 0 9
63976: PUSH
63977: LD_INT 22
63979: PUSH
63980: LD_VAR 0 2
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: PUSH
63989: LD_INT 2
63991: PUSH
63992: LD_INT 30
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 30
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: LIST
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PPUSH
64021: CALL_OW 69
64025: ST_TO_ADDR
// crates := 0 ;
64026: LD_ADDR_VAR 0 4
64030: PUSH
64031: LD_INT 0
64033: ST_TO_ADDR
// oil := 0 ;
64034: LD_ADDR_VAR 0 5
64038: PUSH
64039: LD_INT 0
64041: ST_TO_ADDR
// sib := 0 ;
64042: LD_ADDR_VAR 0 6
64046: PUSH
64047: LD_INT 0
64049: ST_TO_ADDR
// if bases then
64050: LD_VAR 0 9
64054: IFFALSE 64160
// begin for j in bases do
64056: LD_ADDR_VAR 0 3
64060: PUSH
64061: LD_VAR 0 9
64065: PUSH
64066: FOR_IN
64067: IFFALSE 64158
// begin base := GetBase ( j ) ;
64069: LD_ADDR_VAR 0 8
64073: PUSH
64074: LD_VAR 0 3
64078: PPUSH
64079: CALL_OW 274
64083: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64084: LD_ADDR_VAR 0 4
64088: PUSH
64089: LD_VAR 0 4
64093: PUSH
64094: LD_VAR 0 8
64098: PPUSH
64099: LD_INT 1
64101: PPUSH
64102: CALL_OW 275
64106: PLUS
64107: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64108: LD_ADDR_VAR 0 5
64112: PUSH
64113: LD_VAR 0 5
64117: PUSH
64118: LD_VAR 0 8
64122: PPUSH
64123: LD_INT 2
64125: PPUSH
64126: CALL_OW 275
64130: PLUS
64131: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64132: LD_ADDR_VAR 0 6
64136: PUSH
64137: LD_VAR 0 6
64141: PUSH
64142: LD_VAR 0 8
64146: PPUSH
64147: LD_INT 3
64149: PPUSH
64150: CALL_OW 275
64154: PLUS
64155: ST_TO_ADDR
// end ;
64156: GO 64066
64158: POP
64159: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64160: LD_STRING setSpecText(
64162: PUSH
64163: LD_VAR 0 2
64167: STR
64168: PUSH
64169: LD_STRING ,
64171: STR
64172: PUSH
64173: LD_INT 2
64175: STR
64176: PUSH
64177: LD_STRING ,
64179: STR
64180: PUSH
64181: LD_VAR 0 4
64185: STR
64186: PUSH
64187: LD_STRING )
64189: STR
64190: PPUSH
64191: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
64195: LD_STRING setSpecText(
64197: PUSH
64198: LD_VAR 0 2
64202: STR
64203: PUSH
64204: LD_STRING ,
64206: STR
64207: PUSH
64208: LD_INT 3
64210: STR
64211: PUSH
64212: LD_STRING ,
64214: STR
64215: PUSH
64216: LD_VAR 0 5
64220: STR
64221: PUSH
64222: LD_STRING )
64224: STR
64225: PPUSH
64226: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
64230: LD_STRING setSpecText(
64232: PUSH
64233: LD_VAR 0 2
64237: STR
64238: PUSH
64239: LD_STRING ,
64241: STR
64242: PUSH
64243: LD_INT 4
64245: STR
64246: PUSH
64247: LD_STRING ,
64249: STR
64250: PUSH
64251: LD_VAR 0 6
64255: STR
64256: PUSH
64257: LD_STRING )
64259: STR
64260: PPUSH
64261: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64265: LD_STRING setSpecText(
64267: PUSH
64268: LD_VAR 0 2
64272: STR
64273: PUSH
64274: LD_STRING ,
64276: STR
64277: PUSH
64278: LD_INT 5
64280: STR
64281: PUSH
64282: LD_STRING ,
64284: STR
64285: PUSH
64286: LD_VAR 0 7
64290: STR
64291: PUSH
64292: LD_STRING )
64294: STR
64295: PPUSH
64296: CALL_OW 559
// end ; end ;
64300: GO 63916
64302: POP
64303: POP
// end ;
64304: LD_VAR 0 1
64308: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64309: LD_INT 2
64311: PUSH
64312: LD_INT 30
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 30
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: LIST
64336: PPUSH
64337: CALL_OW 69
64341: IFFALSE 64351
64343: GO 64345
64345: DISABLE
// begin enable ;
64346: ENABLE
// UpdateSpectatorBar ;
64347: CALL 63892 0 0
// end ;
64351: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64352: LD_INT 0
64354: PPUSH
// end ;
64355: LD_VAR 0 12
64359: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64360: LD_INT 0
64362: PPUSH
64363: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64364: LD_VAR 0 1
64368: NOT
64369: IFTRUE 64388
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: LD_VAR 0 3
64381: PPUSH
64382: CALL_OW 488
64386: NOT
64387: OR
64388: IFTRUE 64423
64390: PUSH
64391: LD_VAR 0 1
64395: PPUSH
64396: CALL_OW 266
64400: PUSH
64401: LD_INT 3
64403: NONEQUAL
64404: IFFALSE 64422
64406: PUSH
64407: LD_VAR 0 1
64411: PPUSH
64412: CALL_OW 247
64416: PUSH
64417: LD_INT 1
64419: EQUAL
64420: NOT
64421: AND
64422: OR
64423: IFFALSE 64427
// exit ;
64425: GO 64709
// if GetType ( factory ) = unit_human then
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 247
64436: PUSH
64437: LD_INT 1
64439: EQUAL
64440: IFFALSE 64457
// factory := IsInUnit ( factory ) ;
64442: LD_ADDR_VAR 0 1
64446: PUSH
64447: LD_VAR 0 1
64451: PPUSH
64452: CALL_OW 310
64456: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64457: LD_VAR 0 1
64461: PPUSH
64462: CALL_OW 266
64466: PUSH
64467: LD_INT 3
64469: NONEQUAL
64470: IFFALSE 64474
// exit ;
64472: GO 64709
// for i := 1 to Count ( factoryWaypoints ) do
64474: LD_ADDR_VAR 0 5
64478: PUSH
64479: DOUBLE
64480: LD_INT 1
64482: DEC
64483: ST_TO_ADDR
64484: LD_EXP 61
64488: PPUSH
64489: CALL 15681 0 1
64493: PUSH
64494: FOR_TO
64495: IFFALSE 64657
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64497: LD_VAR 0 2
64501: PPUSH
64502: LD_VAR 0 3
64506: PPUSH
64507: CALL_OW 428
64511: PUSH
64512: LD_EXP 61
64516: PUSH
64517: LD_VAR 0 5
64521: ARRAY
64522: PUSH
64523: LD_INT 2
64525: ARRAY
64526: EQUAL
64527: IFFALSE 64559
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64529: LD_ADDR_EXP 61
64533: PUSH
64534: LD_EXP 61
64538: PPUSH
64539: LD_VAR 0 5
64543: PPUSH
64544: CALL_OW 3
64548: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64549: CALL 64714 0 0
// exit ;
64553: POP
64554: POP
64555: GO 64709
// end else
64557: GO 64655
// if factory = factoryWaypoints [ i ] [ 2 ] then
64559: LD_VAR 0 1
64563: PUSH
64564: LD_EXP 61
64568: PUSH
64569: LD_VAR 0 5
64573: ARRAY
64574: PUSH
64575: LD_INT 2
64577: ARRAY
64578: EQUAL
64579: IFFALSE 64655
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64581: LD_ADDR_EXP 61
64585: PUSH
64586: LD_EXP 61
64590: PPUSH
64591: LD_VAR 0 5
64595: PPUSH
64596: CALL_OW 3
64600: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64601: LD_ADDR_EXP 61
64605: PUSH
64606: LD_EXP 61
64610: PPUSH
64611: LD_VAR 0 1
64615: PPUSH
64616: CALL_OW 255
64620: PUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_VAR 0 2
64630: PUSH
64631: LD_VAR 0 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: PPUSH
64642: CALL 51657 0 2
64646: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64647: CALL 64714 0 0
// exit ;
64651: POP
64652: POP
64653: GO 64709
// end ; end ;
64655: GO 64494
64657: POP
64658: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64659: LD_ADDR_EXP 61
64663: PUSH
64664: LD_EXP 61
64668: PPUSH
64669: LD_VAR 0 1
64673: PPUSH
64674: CALL_OW 255
64678: PUSH
64679: LD_VAR 0 1
64683: PUSH
64684: LD_VAR 0 2
64688: PUSH
64689: LD_VAR 0 3
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: PPUSH
64700: CALL 51657 0 2
64704: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64705: CALL 64714 0 0
// end ;
64709: LD_VAR 0 4
64713: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64714: LD_INT 0
64716: PPUSH
64717: PPUSH
64718: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64719: LD_STRING resetFactoryWaypoint();
64721: PPUSH
64722: CALL_OW 559
// if factoryWaypoints then
64726: LD_EXP 61
64730: IFFALSE 64851
// begin list := factoryWaypoints ;
64732: LD_ADDR_VAR 0 3
64736: PUSH
64737: LD_EXP 61
64741: ST_TO_ADDR
// for i := 1 to list do
64742: LD_ADDR_VAR 0 2
64746: PUSH
64747: DOUBLE
64748: LD_INT 1
64750: DEC
64751: ST_TO_ADDR
64752: LD_VAR 0 3
64756: PUSH
64757: FOR_TO
64758: IFFALSE 64849
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64760: LD_STRING setFactoryWaypointXY(
64762: PUSH
64763: LD_VAR 0 3
64767: PUSH
64768: LD_VAR 0 2
64772: ARRAY
64773: PUSH
64774: LD_INT 1
64776: ARRAY
64777: STR
64778: PUSH
64779: LD_STRING ,
64781: STR
64782: PUSH
64783: LD_VAR 0 3
64787: PUSH
64788: LD_VAR 0 2
64792: ARRAY
64793: PUSH
64794: LD_INT 2
64796: ARRAY
64797: STR
64798: PUSH
64799: LD_STRING ,
64801: STR
64802: PUSH
64803: LD_VAR 0 3
64807: PUSH
64808: LD_VAR 0 2
64812: ARRAY
64813: PUSH
64814: LD_INT 3
64816: ARRAY
64817: STR
64818: PUSH
64819: LD_STRING ,
64821: STR
64822: PUSH
64823: LD_VAR 0 3
64827: PUSH
64828: LD_VAR 0 2
64832: ARRAY
64833: PUSH
64834: LD_INT 4
64836: ARRAY
64837: STR
64838: PUSH
64839: LD_STRING )
64841: STR
64842: PPUSH
64843: CALL_OW 559
64847: GO 64757
64849: POP
64850: POP
// end ; end ;
64851: LD_VAR 0 1
64855: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64856: LD_INT 0
64858: PPUSH
// if HexInfo ( x , y ) = warehouse then
64859: LD_VAR 0 2
64863: PPUSH
64864: LD_VAR 0 3
64868: PPUSH
64869: CALL_OW 428
64873: PUSH
64874: LD_VAR 0 1
64878: EQUAL
64879: IFFALSE 64906
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64881: LD_ADDR_EXP 63
64885: PUSH
64886: LD_EXP 63
64890: PPUSH
64891: LD_VAR 0 1
64895: PPUSH
64896: LD_INT 0
64898: PPUSH
64899: CALL_OW 1
64903: ST_TO_ADDR
64904: GO 64957
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64906: LD_ADDR_EXP 63
64910: PUSH
64911: LD_EXP 63
64915: PPUSH
64916: LD_VAR 0 1
64920: PPUSH
64921: LD_VAR 0 1
64925: PPUSH
64926: CALL_OW 255
64930: PUSH
64931: LD_VAR 0 1
64935: PUSH
64936: LD_VAR 0 2
64940: PUSH
64941: LD_VAR 0 3
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: PPUSH
64952: CALL_OW 1
64956: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64957: CALL 64966 0 0
// end ;
64961: LD_VAR 0 4
64965: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64966: LD_INT 0
64968: PPUSH
64969: PPUSH
64970: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64971: LD_STRING resetWarehouseGatheringPoints();
64973: PPUSH
64974: CALL_OW 559
// if warehouseGatheringPoints then
64978: LD_EXP 63
64982: IFFALSE 65108
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64984: LD_ADDR_VAR 0 3
64988: PUSH
64989: LD_EXP 63
64993: PPUSH
64994: CALL 55591 0 1
64998: ST_TO_ADDR
// for i := 1 to list do
64999: LD_ADDR_VAR 0 2
65003: PUSH
65004: DOUBLE
65005: LD_INT 1
65007: DEC
65008: ST_TO_ADDR
65009: LD_VAR 0 3
65013: PUSH
65014: FOR_TO
65015: IFFALSE 65106
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65017: LD_STRING setWarehouseGatheringPointXY(
65019: PUSH
65020: LD_VAR 0 3
65024: PUSH
65025: LD_VAR 0 2
65029: ARRAY
65030: PUSH
65031: LD_INT 1
65033: ARRAY
65034: STR
65035: PUSH
65036: LD_STRING ,
65038: STR
65039: PUSH
65040: LD_VAR 0 3
65044: PUSH
65045: LD_VAR 0 2
65049: ARRAY
65050: PUSH
65051: LD_INT 2
65053: ARRAY
65054: STR
65055: PUSH
65056: LD_STRING ,
65058: STR
65059: PUSH
65060: LD_VAR 0 3
65064: PUSH
65065: LD_VAR 0 2
65069: ARRAY
65070: PUSH
65071: LD_INT 3
65073: ARRAY
65074: STR
65075: PUSH
65076: LD_STRING ,
65078: STR
65079: PUSH
65080: LD_VAR 0 3
65084: PUSH
65085: LD_VAR 0 2
65089: ARRAY
65090: PUSH
65091: LD_INT 4
65093: ARRAY
65094: STR
65095: PUSH
65096: LD_STRING )
65098: STR
65099: PPUSH
65100: CALL_OW 559
65104: GO 65014
65106: POP
65107: POP
// end ; end ;
65108: LD_VAR 0 1
65112: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65113: LD_INT 0
65115: PPUSH
65116: PPUSH
// if not mpSidePositions then
65117: LD_EXP 7
65121: NOT
65122: IFFALSE 65126
// exit ;
65124: GO 65197
// result :=  ;
65126: LD_ADDR_VAR 0 1
65130: PUSH
65131: LD_STRING 
65133: ST_TO_ADDR
// for i := 1 to 8 do
65134: LD_ADDR_VAR 0 2
65138: PUSH
65139: DOUBLE
65140: LD_INT 1
65142: DEC
65143: ST_TO_ADDR
65144: LD_INT 8
65146: PUSH
65147: FOR_TO
65148: IFFALSE 65178
// begin result := result & mpSidePositions [ i ] & ; ;
65150: LD_ADDR_VAR 0 1
65154: PUSH
65155: LD_VAR 0 1
65159: PUSH
65160: LD_EXP 7
65164: PUSH
65165: LD_VAR 0 2
65169: ARRAY
65170: STR
65171: PUSH
65172: LD_STRING ;
65174: STR
65175: ST_TO_ADDR
// end ;
65176: GO 65147
65178: POP
65179: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
65180: LD_STRING setMultiplayerRealPosition("
65182: PUSH
65183: LD_VAR 0 1
65187: STR
65188: PUSH
65189: LD_STRING ");
65191: STR
65192: PPUSH
65193: CALL_OW 559
// end ; end_of_file
65197: LD_VAR 0 1
65201: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
65202: LD_EXP 39
65206: IFFALSE 65249
65208: GO 65210
65210: DISABLE
65211: LD_INT 0
65213: PPUSH
// begin for i := 1 to 8 do
65214: LD_ADDR_VAR 0 1
65218: PUSH
65219: DOUBLE
65220: LD_INT 1
65222: DEC
65223: ST_TO_ADDR
65224: LD_INT 8
65226: PUSH
65227: FOR_TO
65228: IFFALSE 65247
// SetRestrict ( b_depot , i , state_disabled ) ;
65230: LD_INT 0
65232: PPUSH
65233: LD_VAR 0 1
65237: PPUSH
65238: LD_INT 0
65240: PPUSH
65241: CALL_OW 324
65245: GO 65227
65247: POP
65248: POP
// end ;
65249: PPOPN 1
65251: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
65252: LD_EXP 39
65256: IFFALSE 65264
65258: PUSH
65259: CALL 65474 0 0
65263: AND
65264: IFFALSE 65272
65266: PUSH
65267: LD_OWVAR 4
65271: AND
65272: IFFALSE 65471
65274: GO 65276
65276: DISABLE
65277: LD_INT 0
65279: PPUSH
65280: PPUSH
// begin canWin := false ;
65281: LD_ADDR_VAR 0 2
65285: PUSH
65286: LD_INT 0
65288: ST_TO_ADDR
// if not HasPower ( your_side ) then
65289: LD_OWVAR 2
65293: PPUSH
65294: CALL 65516 0 1
65298: NOT
65299: IFFALSE 65310
// begin Multiplayer_Loose_Message ;
65301: CALL_OW 521
// enable ( mpLose ) ;
65305: LD_INT 102
65307: ENABLE_MARKED
// end else
65308: GO 65471
// begin canWin := true ;
65310: LD_ADDR_VAR 0 2
65314: PUSH
65315: LD_INT 1
65317: ST_TO_ADDR
// for i := 1 to 8 do
65318: LD_ADDR_VAR 0 1
65322: PUSH
65323: DOUBLE
65324: LD_INT 1
65326: DEC
65327: ST_TO_ADDR
65328: LD_INT 8
65330: PUSH
65331: FOR_TO
65332: IFFALSE 65457
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65334: LD_EXP 7
65338: PUSH
65339: LD_VAR 0 1
65343: ARRAY
65344: IFFALSE 65357
65346: PUSH
65347: LD_VAR 0 1
65351: PPUSH
65352: CALL_OW 108
65356: AND
65357: IFFALSE 65371
65359: PUSH
65360: LD_VAR 0 1
65364: PUSH
65365: LD_OWVAR 2
65369: NONEQUAL
65370: AND
65371: IFFALSE 65455
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65373: LD_EXP 8
65377: PUSH
65378: LD_VAR 0 1
65382: ARRAY
65383: NOT
65384: IFTRUE 65432
65386: PUSH
65387: LD_EXP 8
65391: PUSH
65392: LD_VAR 0 1
65396: ARRAY
65397: PUSH
65398: LD_EXP 8
65402: PUSH
65403: LD_OWVAR 2
65407: ARRAY
65408: NONEQUAL
65409: IFFALSE 65431
65411: PUSH
65412: LD_OWVAR 2
65416: PPUSH
65417: LD_VAR 0 1
65421: PPUSH
65422: CALL_OW 81
65426: PUSH
65427: LD_INT 1
65429: NONEQUAL
65430: AND
65431: OR
65432: IFFALSE 65455
// if HasPower ( i ) then
65434: LD_VAR 0 1
65438: PPUSH
65439: CALL 65516 0 1
65443: IFFALSE 65455
// begin canWin := false ;
65445: LD_ADDR_VAR 0 2
65449: PUSH
65450: LD_INT 0
65452: ST_TO_ADDR
// break ;
65453: GO 65457
// end ;
65455: GO 65331
65457: POP
65458: POP
// if canWin then
65459: LD_VAR 0 2
65463: IFFALSE 65470
// enable ( mpWin ) else
65465: LD_INT 101
65467: ENABLE_MARKED
65468: GO 65471
// enable ;
65470: ENABLE
// end ; end ;
65471: PPOPN 2
65473: END
// function CanWinLoose ; begin
65474: LD_INT 0
65476: PPUSH
// result := true ;
65477: LD_ADDR_VAR 0 1
65481: PUSH
65482: LD_INT 1
65484: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65485: CALL_OW 531
65489: IFFALSE 65501
65491: PUSH
65492: CALL_OW 519
65496: PUSH
65497: LD_INT 1
65499: GREATER
65500: AND
65501: IFFALSE 65511
// result := false ;
65503: LD_ADDR_VAR 0 1
65507: PUSH
65508: LD_INT 0
65510: ST_TO_ADDR
// end ;
65511: LD_VAR 0 1
65515: RET
// function HasPower ( i ) ; begin
65516: LD_INT 0
65518: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65519: LD_INT 22
65521: PUSH
65522: LD_VAR 0 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: LD_INT 30
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 30
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PPUSH
65563: CALL_OW 69
65567: NOT
65568: IFFALSE 65572
// exit ;
65570: GO 65637
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65572: LD_ADDR_VAR 0 2
65576: PUSH
65577: LD_INT 22
65579: PUSH
65580: LD_VAR 0 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 2
65591: PUSH
65592: LD_INT 21
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 33
65604: PUSH
65605: LD_INT 3
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 33
65614: PUSH
65615: LD_INT 5
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PPUSH
65632: CALL_OW 69
65636: ST_TO_ADDR
// end ;
65637: LD_VAR 0 2
65641: RET
