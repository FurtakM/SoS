// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3223 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3607 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 120 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 120
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , CenterArea , RoadArea ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 60
 891: PUSH
 892: LD_INT 61
 894: PUSH
 895: LD_INT 62
 897: PUSH
 898: LD_INT 63
 900: PUSH
 901: LD_INT 59
 903: PUSH
 904: LD_INT 58
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 34
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 35
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 37
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 34
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 37
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 36
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 33
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 9
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 55698 0 2
1427: PUSH
1428: LD_INT 15
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 55698 0 2
1438: PUSH
1439: LD_INT 21
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: CALL 55698 0 2
1449: PUSH
1450: LD_INT 27
1452: PPUSH
1453: LD_INT 3
1455: PPUSH
1456: CALL 55698 0 2
1460: PUSH
1461: LD_INT 33
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL 55698 0 2
1471: PUSH
1472: LD_INT 39
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 55698 0 2
1482: PUSH
1483: LD_INT 45
1485: PPUSH
1486: LD_INT 4
1488: PPUSH
1489: CALL 55698 0 2
1493: PUSH
1494: LD_INT 51
1496: PPUSH
1497: LD_INT 5
1499: PPUSH
1500: CALL 55698 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 15013 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1896
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// if all then
1666: LD_VAR 0 4
1670: IFFALSE 1793
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1672: LD_ADDR_EXP 12
1676: PUSH
1677: LD_INT 10
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 55531 0 2
1689: PUSH
1690: LD_INT 16
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 55531 0 2
1702: PUSH
1703: LD_INT 22
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 55531 0 2
1715: PUSH
1716: LD_INT 28
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: CALL 55531 0 2
1728: PUSH
1729: LD_INT 34
1731: PPUSH
1732: LD_VAR 0 4
1736: PPUSH
1737: CALL 55531 0 2
1741: PUSH
1742: LD_INT 40
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL 55531 0 2
1754: PUSH
1755: LD_INT 46
1757: PPUSH
1758: LD_VAR 0 4
1762: PPUSH
1763: CALL 55531 0 2
1767: PUSH
1768: LD_INT 52
1770: PPUSH
1771: LD_VAR 0 4
1775: PPUSH
1776: CALL 55531 0 2
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: ST_TO_ADDR
// end else
1791: GO 1896
// begin mpOilDeposits := [ GetSourcesFromArea ( oilArea1s , 1 ) , GetSourcesFromArea ( oilArea2s , 1 ) , GetSourcesFromArea ( oilArea3s , 1 ) , GetSourcesFromArea ( oilArea4s , 1 ) , GetSourcesFromArea ( oilArea5s , 1 ) , GetSourcesFromArea ( oilArea6s , 1 ) , GetSourcesFromArea ( oilArea7s , 1 ) , GetSourcesFromArea ( oilArea8s , 1 ) ] ;
1793: LD_ADDR_EXP 12
1797: PUSH
1798: LD_INT 80
1800: PPUSH
1801: LD_INT 1
1803: PPUSH
1804: CALL 55531 0 2
1808: PUSH
1809: LD_INT 82
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: CALL 55531 0 2
1819: PUSH
1820: LD_INT 84
1822: PPUSH
1823: LD_INT 1
1825: PPUSH
1826: CALL 55531 0 2
1830: PUSH
1831: LD_INT 86
1833: PPUSH
1834: LD_INT 1
1836: PPUSH
1837: CALL 55531 0 2
1841: PUSH
1842: LD_INT 72
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: CALL 55531 0 2
1852: PUSH
1853: LD_INT 74
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 55531 0 2
1863: PUSH
1864: LD_INT 76
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL 55531 0 2
1874: PUSH
1875: LD_INT 78
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 55531 0 2
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: ST_TO_ADDR
// end ; end ; if hasSib then
1896: LD_VAR 0 6
1900: IFFALSE 2150
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1902: LD_ADDR_VAR 0 4
1906: PUSH
1907: LD_EXP 6
1911: PUSH
1912: LD_INT 7
1914: ARRAY
1915: PUSH
1916: LD_INT 2
1918: EQUAL
1919: ST_TO_ADDR
// if all then
1920: LD_VAR 0 4
1924: IFFALSE 2047
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1926: LD_ADDR_EXP 13
1930: PUSH
1931: LD_INT 11
1933: PPUSH
1934: LD_VAR 0 4
1938: PPUSH
1939: CALL 55531 0 2
1943: PUSH
1944: LD_INT 17
1946: PPUSH
1947: LD_VAR 0 4
1951: PPUSH
1952: CALL 55531 0 2
1956: PUSH
1957: LD_INT 23
1959: PPUSH
1960: LD_VAR 0 4
1964: PPUSH
1965: CALL 55531 0 2
1969: PUSH
1970: LD_INT 29
1972: PPUSH
1973: LD_VAR 0 4
1977: PPUSH
1978: CALL 55531 0 2
1982: PUSH
1983: LD_INT 35
1985: PPUSH
1986: LD_VAR 0 4
1990: PPUSH
1991: CALL 55531 0 2
1995: PUSH
1996: LD_INT 41
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 55531 0 2
2008: PUSH
2009: LD_INT 47
2011: PPUSH
2012: LD_VAR 0 4
2016: PPUSH
2017: CALL 55531 0 2
2021: PUSH
2022: LD_INT 53
2024: PPUSH
2025: LD_VAR 0 4
2029: PPUSH
2030: CALL 55531 0 2
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: ST_TO_ADDR
// end else
2045: GO 2150
// begin mpSibDeposits := [ GetSourcesFromArea ( sibArea1s , 1 ) , GetSourcesFromArea ( sibArea2s , 1 ) , GetSourcesFromArea ( sibArea3s , 1 ) , GetSourcesFromArea ( sibArea4s , 1 ) , GetSourcesFromArea ( sibArea5s , 1 ) , GetSourcesFromArea ( sibArea6s , 1 ) , GetSourcesFromArea ( sibArea7s , 1 ) , GetSourcesFromArea ( sibArea8s , 1 ) ] ;
2047: LD_ADDR_EXP 13
2051: PUSH
2052: LD_INT 81
2054: PPUSH
2055: LD_INT 1
2057: PPUSH
2058: CALL 55531 0 2
2062: PUSH
2063: LD_INT 83
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: CALL 55531 0 2
2073: PUSH
2074: LD_INT 85
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL 55531 0 2
2084: PUSH
2085: LD_INT 87
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: CALL 55531 0 2
2095: PUSH
2096: LD_INT 73
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL 55531 0 2
2106: PUSH
2107: LD_INT 75
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: CALL 55531 0 2
2117: PUSH
2118: LD_INT 77
2120: PPUSH
2121: LD_INT 1
2123: PPUSH
2124: CALL 55531 0 2
2128: PUSH
2129: LD_INT 79
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL 55531 0 2
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: ST_TO_ADDR
// end ; end ; if baseLevel >= 1 then
2150: LD_VAR 0 7
2154: PUSH
2155: LD_INT 1
2157: GREATEREQUAL
2158: IFFALSE 2170
// mpDepots := startPos ;
2160: LD_ADDR_EXP 14
2164: PUSH
2165: LD_VAR 0 8
2169: ST_TO_ADDR
// if baseLevel >= 2 then
2170: LD_VAR 0 7
2174: PUSH
2175: LD_INT 2
2177: GREATEREQUAL
2178: IFFALSE 2595
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 3 ) ] ] ;
2180: LD_ADDR_EXP 17
2184: PUSH
2185: LD_INT 31
2187: PUSH
2188: LD_INT 13
2190: PPUSH
2191: LD_INT 5
2193: PPUSH
2194: CALL 55698 0 2
2198: ADD
2199: PUSH
2200: LD_INT 31
2202: PUSH
2203: LD_INT 14
2205: PPUSH
2206: LD_INT 0
2208: PPUSH
2209: CALL 55698 0 2
2213: ADD
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: LD_INT 12
2220: PPUSH
2221: LD_INT 5
2223: PPUSH
2224: CALL 55698 0 2
2228: ADD
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 31
2237: PUSH
2238: LD_INT 18
2240: PPUSH
2241: LD_INT 4
2243: PPUSH
2244: CALL 55698 0 2
2248: ADD
2249: PUSH
2250: LD_INT 31
2252: PUSH
2253: LD_INT 19
2255: PPUSH
2256: LD_INT 5
2258: PPUSH
2259: CALL 55698 0 2
2263: ADD
2264: PUSH
2265: LD_INT 4
2267: PUSH
2268: LD_INT 20
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: CALL 55698 0 2
2278: ADD
2279: PUSH
2280: EMPTY
2281: LIST
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 31
2287: PUSH
2288: LD_INT 25
2290: PPUSH
2291: LD_INT 0
2293: PPUSH
2294: CALL 55698 0 2
2298: ADD
2299: PUSH
2300: LD_INT 31
2302: PUSH
2303: LD_INT 26
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: CALL 55698 0 2
2313: ADD
2314: PUSH
2315: LD_INT 4
2317: PUSH
2318: LD_INT 24
2320: PPUSH
2321: LD_INT 0
2323: PPUSH
2324: CALL 55698 0 2
2328: ADD
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: PUSH
2335: LD_INT 31
2337: PUSH
2338: LD_INT 31
2340: PPUSH
2341: LD_INT 0
2343: PPUSH
2344: CALL 55698 0 2
2348: ADD
2349: PUSH
2350: LD_INT 31
2352: PUSH
2353: LD_INT 32
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: CALL 55698 0 2
2363: ADD
2364: PUSH
2365: LD_INT 4
2367: PUSH
2368: LD_INT 30
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL 55698 0 2
2378: ADD
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 31
2387: PUSH
2388: LD_INT 37
2390: PPUSH
2391: LD_INT 3
2393: PPUSH
2394: CALL 55698 0 2
2398: ADD
2399: PUSH
2400: LD_INT 31
2402: PUSH
2403: LD_INT 38
2405: PPUSH
2406: LD_INT 4
2408: PPUSH
2409: CALL 55698 0 2
2413: ADD
2414: PUSH
2415: LD_INT 4
2417: PUSH
2418: LD_INT 36
2420: PPUSH
2421: LD_INT 3
2423: PPUSH
2424: CALL 55698 0 2
2428: ADD
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 31
2437: PUSH
2438: LD_INT 43
2440: PPUSH
2441: LD_INT 1
2443: PPUSH
2444: CALL 55698 0 2
2448: ADD
2449: PUSH
2450: LD_INT 31
2452: PUSH
2453: LD_INT 44
2455: PPUSH
2456: LD_INT 2
2458: PPUSH
2459: CALL 55698 0 2
2463: ADD
2464: PUSH
2465: LD_INT 4
2467: PUSH
2468: LD_INT 42
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL 55698 0 2
2478: ADD
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: LD_INT 31
2487: PUSH
2488: LD_INT 49
2490: PPUSH
2491: LD_INT 2
2493: PPUSH
2494: CALL 55698 0 2
2498: ADD
2499: PUSH
2500: LD_INT 31
2502: PUSH
2503: LD_INT 50
2505: PPUSH
2506: LD_INT 3
2508: PPUSH
2509: CALL 55698 0 2
2513: ADD
2514: PUSH
2515: LD_INT 4
2517: PUSH
2518: LD_INT 48
2520: PPUSH
2521: LD_INT 3
2523: PPUSH
2524: CALL 55698 0 2
2528: ADD
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 31
2537: PUSH
2538: LD_INT 55
2540: PPUSH
2541: LD_INT 2
2543: PPUSH
2544: CALL 55698 0 2
2548: ADD
2549: PUSH
2550: LD_INT 31
2552: PUSH
2553: LD_INT 56
2555: PPUSH
2556: LD_INT 3
2558: PPUSH
2559: CALL 55698 0 2
2563: ADD
2564: PUSH
2565: LD_INT 4
2567: PUSH
2568: LD_INT 54
2570: PPUSH
2571: LD_INT 3
2573: PPUSH
2574: CALL 55698 0 2
2578: ADD
2579: PUSH
2580: EMPTY
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: ST_TO_ADDR
// end ; end ;
2595: LD_VAR 0 2
2599: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2600: GO 2602
2602: DISABLE
2603: LD_INT 0
2605: PPUSH
2606: PPUSH
2607: PPUSH
2608: PPUSH
2609: PPUSH
2610: PPUSH
2611: PPUSH
2612: PPUSH
// begin if not mpShipments then
2613: LD_EXP 27
2617: NOT
2618: IFFALSE 2622
// exit ;
2620: GO 3077
// case mpShipments of 1 :
2622: LD_EXP 27
2626: PUSH
2627: LD_INT 1
2629: DOUBLE
2630: EQUAL
2631: IFTRUE 2635
2633: GO 2670
2635: POP
// begin time := 0 0$30 ;
2636: LD_ADDR_VAR 0 5
2640: PUSH
2641: LD_INT 1050
2643: ST_TO_ADDR
// normalTime := 0 0$30 ;
2644: LD_ADDR_VAR 0 6
2648: PUSH
2649: LD_INT 1050
2651: ST_TO_ADDR
// maxTime := 1 1$20 ;
2652: LD_ADDR_VAR 0 8
2656: PUSH
2657: LD_INT 2800
2659: ST_TO_ADDR
// delayTime := 0 0$5 ;
2660: LD_ADDR_VAR 0 7
2664: PUSH
2665: LD_INT 175
2667: ST_TO_ADDR
// end ; 2 :
2668: GO 2800
2670: LD_INT 2
2672: DOUBLE
2673: EQUAL
2674: IFTRUE 2678
2676: GO 2713
2678: POP
// begin time := 0 0$25 ;
2679: LD_ADDR_VAR 0 5
2683: PUSH
2684: LD_INT 875
2686: ST_TO_ADDR
// normalTime := 0 0$25 ;
2687: LD_ADDR_VAR 0 6
2691: PUSH
2692: LD_INT 875
2694: ST_TO_ADDR
// maxTime := 1 1$10 ;
2695: LD_ADDR_VAR 0 8
2699: PUSH
2700: LD_INT 2450
2702: ST_TO_ADDR
// delayTime := 0 0$4 ;
2703: LD_ADDR_VAR 0 7
2707: PUSH
2708: LD_INT 140
2710: ST_TO_ADDR
// end ; 3 :
2711: GO 2800
2713: LD_INT 3
2715: DOUBLE
2716: EQUAL
2717: IFTRUE 2721
2719: GO 2756
2721: POP
// begin time := 0 0$20 ;
2722: LD_ADDR_VAR 0 5
2726: PUSH
2727: LD_INT 700
2729: ST_TO_ADDR
// normalTime := 0 0$20 ;
2730: LD_ADDR_VAR 0 6
2734: PUSH
2735: LD_INT 700
2737: ST_TO_ADDR
// maxTime := 1 1$00 ;
2738: LD_ADDR_VAR 0 8
2742: PUSH
2743: LD_INT 2100
2745: ST_TO_ADDR
// delayTime := 0 0$3 ;
2746: LD_ADDR_VAR 0 7
2750: PUSH
2751: LD_INT 105
2753: ST_TO_ADDR
// end ; 4 :
2754: GO 2800
2756: LD_INT 4
2758: DOUBLE
2759: EQUAL
2760: IFTRUE 2764
2762: GO 2799
2764: POP
// begin time := 0 0$15 ;
2765: LD_ADDR_VAR 0 5
2769: PUSH
2770: LD_INT 525
2772: ST_TO_ADDR
// normalTime := 0 0$15 ;
2773: LD_ADDR_VAR 0 6
2777: PUSH
2778: LD_INT 525
2780: ST_TO_ADDR
// maxTime := 0 0$55 ;
2781: LD_ADDR_VAR 0 8
2785: PUSH
2786: LD_INT 1925
2788: ST_TO_ADDR
// delayTime := 0 0$2 ;
2789: LD_ADDR_VAR 0 7
2793: PUSH
2794: LD_INT 70
2796: ST_TO_ADDR
// end ; end ;
2797: GO 2800
2799: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , CenterArea , RoadArea ] ;
2800: LD_ADDR_VAR 0 4
2804: PUSH
2805: LD_INT 60
2807: PUSH
2808: LD_INT 61
2810: PUSH
2811: LD_INT 62
2813: PUSH
2814: LD_INT 63
2816: PUSH
2817: LD_INT 59
2819: PUSH
2820: LD_INT 58
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2831: LD_ADDR_VAR 0 3
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: LD_INT 2
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 4
2847: PUSH
2848: LD_INT 5
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 8
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: ST_TO_ADDR
// for i := 1 to 8 do
2870: LD_ADDR_VAR 0 1
2874: PUSH
2875: DOUBLE
2876: LD_INT 1
2878: DEC
2879: ST_TO_ADDR
2880: LD_INT 8
2882: PUSH
2883: FOR_TO
2884: IFFALSE 2931
// begin if not mpSidePositions [ i ] then
2886: LD_EXP 7
2890: PUSH
2891: LD_VAR 0 1
2895: ARRAY
2896: NOT
2897: IFFALSE 2901
// continue ;
2899: GO 2883
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: LD_VAR 0 4
2910: PUSH
2911: LD_VAR 0 3
2915: PUSH
2916: LD_EXP 7
2920: PUSH
2921: LD_VAR 0 1
2925: ARRAY
2926: ARRAY
2927: ADD
2928: ST_TO_ADDR
// end ;
2929: GO 2883
2931: POP
2932: POP
// x := 1 ;
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: LD_INT 1
2940: ST_TO_ADDR
// repeat wait ( time ) ;
2941: LD_VAR 0 5
2945: PPUSH
2946: CALL_OW 67
// x := Inc ( x ) ;
2950: LD_ADDR_VAR 0 2
2954: PUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: CALL 52352 0 1
2964: ST_TO_ADDR
// if x > 5 then
2965: LD_VAR 0 2
2969: PUSH
2970: LD_INT 5
2972: GREATER
2973: IFFALSE 2983
// x := 1 ;
2975: LD_ADDR_VAR 0 2
2979: PUSH
2980: LD_INT 1
2982: ST_TO_ADDR
// for i in areas do
2983: LD_ADDR_VAR 0 1
2987: PUSH
2988: LD_VAR 0 4
2992: PUSH
2993: FOR_IN
2994: IFFALSE 3033
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2996: LD_VAR 0 1
3000: PPUSH
3001: LD_INT 1
3003: PPUSH
3004: CALL_OW 287
3008: PUSH
3009: LD_INT 30
3011: LESS
3012: IFFALSE 3031
// begin CreateCratesArea ( x , i , true ) ;
3014: LD_VAR 0 2
3018: PPUSH
3019: LD_VAR 0 1
3023: PPUSH
3024: LD_INT 1
3026: PPUSH
3027: CALL_OW 55
// end ; end ;
3031: GO 2993
3033: POP
3034: POP
// time := time + delayTime ;
3035: LD_ADDR_VAR 0 5
3039: PUSH
3040: LD_VAR 0 5
3044: PUSH
3045: LD_VAR 0 7
3049: PLUS
3050: ST_TO_ADDR
// if time > maxTime then
3051: LD_VAR 0 5
3055: PUSH
3056: LD_VAR 0 8
3060: GREATER
3061: IFFALSE 3073
// time := normalTime ;
3063: LD_ADDR_VAR 0 5
3067: PUSH
3068: LD_VAR 0 6
3072: ST_TO_ADDR
// until false ;
3073: LD_INT 0
3075: IFFALSE 2941
// end ; end_of_file
3077: PPOPN 8
3079: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3080: LD_VAR 0 1
3084: PPUSH
3085: CALL 56496 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: CALL 8509 0 1
// end ;
3098: PPOPN 1
3100: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL 56513 0 1
// end ;
3110: PPOPN 1
3112: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3113: LD_VAR 0 1
3117: PPUSH
3118: CALL 9216 0 1
3122: PPOPN 1
3124: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3125: LD_VAR 0 1
3129: PPUSH
3130: LD_VAR 0 2
3134: PPUSH
3135: CALL 56554 0 2
3139: PPOPN 2
3141: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3142: LD_VAR 0 1
3146: PPUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: LD_VAR 0 3
3156: PPUSH
3157: CALL 9269 0 3
3161: PPOPN 3
3163: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 2
3173: PPUSH
3174: LD_VAR 0 3
3178: PPUSH
3179: LD_VAR 0 4
3183: PPUSH
3184: LD_VAR 0 5
3188: PPUSH
3189: CALL 9908 0 5
3193: PPOPN 5
3195: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_VAR 0 2
3205: PPUSH
3206: LD_VAR 0 3
3210: PPUSH
3211: LD_VAR 0 4
3215: PPUSH
3216: CALL 10011 0 4
3220: PPOPN 4
3222: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3223: LD_INT 0
3225: PPUSH
3226: PPUSH
// disable ( mpActive ) ;
3227: LD_INT 100
3229: DISABLE_MARKED
// disable ( mpWin ) ;
3230: LD_INT 101
3232: DISABLE_MARKED
// disable ( mpLose ) ;
3233: LD_INT 102
3235: DISABLE_MARKED
// mpGameType := 0 ;
3236: LD_ADDR_EXP 3
3240: PUSH
3241: LD_INT 0
3243: ST_TO_ADDR
// mpGameSettings := [ ] ;
3244: LD_ADDR_EXP 6
3248: PUSH
3249: EMPTY
3250: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3251: LD_ADDR_EXP 4
3255: PUSH
3256: EMPTY
3257: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3258: LD_ADDR_EXP 5
3262: PUSH
3263: EMPTY
3264: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3265: LD_ADDR_EXP 29
3269: PUSH
3270: LD_INT 2
3272: PUSH
3273: LD_INT 2
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3280: LD_ADDR_EXP 12
3284: PUSH
3285: EMPTY
3286: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3287: LD_ADDR_EXP 13
3291: PUSH
3292: EMPTY
3293: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3294: LD_ADDR_EXP 41
3298: PUSH
3299: EMPTY
3300: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3301: LD_ADDR_EXP 42
3305: PUSH
3306: EMPTY
3307: ST_TO_ADDR
// mpDepots := [ ] ;
3308: LD_ADDR_EXP 14
3312: PUSH
3313: EMPTY
3314: ST_TO_ADDR
// mpBuildings := [ ] ;
3315: LD_ADDR_EXP 17
3319: PUSH
3320: EMPTY
3321: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3322: LD_ADDR_EXP 18
3326: PUSH
3327: EMPTY
3328: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3329: LD_ADDR_EXP 19
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3336: LD_ADDR_EXP 20
3340: PUSH
3341: EMPTY
3342: ST_TO_ADDR
// mpStartingResources := [ ] ;
3343: LD_ADDR_EXP 15
3347: PUSH
3348: EMPTY
3349: ST_TO_ADDR
// mpStartPos := [ ] ;
3350: LD_ADDR_EXP 21
3354: PUSH
3355: EMPTY
3356: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3357: LD_ADDR_EXP 22
3361: PUSH
3362: LD_INT 1
3364: NEG
3365: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3366: LD_ADDR_EXP 23
3370: PUSH
3371: EMPTY
3372: ST_TO_ADDR
// mpApemans := [ ] ;
3373: LD_ADDR_EXP 30
3377: PUSH
3378: EMPTY
3379: ST_TO_ADDR
// mpApemansArea := [ ] ;
3380: LD_ADDR_EXP 31
3384: PUSH
3385: EMPTY
3386: ST_TO_ADDR
// mpRespawn := [ ] ;
3387: LD_ADDR_EXP 33
3391: PUSH
3392: EMPTY
3393: ST_TO_ADDR
// mpKingArea := 0 ;
3394: LD_ADDR_EXP 34
3398: PUSH
3399: LD_INT 0
3401: ST_TO_ADDR
// mpPoints := [ ] ;
3402: LD_ADDR_EXP 35
3406: PUSH
3407: EMPTY
3408: ST_TO_ADDR
// mpVehicles := 0 ;
3409: LD_ADDR_EXP 36
3413: PUSH
3414: LD_INT 0
3416: ST_TO_ADDR
// mpShipments := 0 ;
3417: LD_ADDR_EXP 27
3421: PUSH
3422: LD_INT 0
3424: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3425: LD_ADDR_EXP 40
3429: PUSH
3430: EMPTY
3431: PUSH
3432: EMPTY
3433: PUSH
3434: EMPTY
3435: PUSH
3436: EMPTY
3437: PUSH
3438: EMPTY
3439: PUSH
3440: EMPTY
3441: PUSH
3442: EMPTY
3443: PUSH
3444: EMPTY
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3456: LD_ADDR_EXP 32
3460: PUSH
3461: EMPTY
3462: PUSH
3463: EMPTY
3464: PUSH
3465: EMPTY
3466: PUSH
3467: EMPTY
3468: PUSH
3469: EMPTY
3470: PUSH
3471: EMPTY
3472: PUSH
3473: EMPTY
3474: PUSH
3475: EMPTY
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: ST_TO_ADDR
// mpEmissions := 0 ;
3487: LD_ADDR_EXP 37
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// mpTeleports := 0 ;
3495: LD_ADDR_EXP 43
3499: PUSH
3500: LD_INT 0
3502: ST_TO_ADDR
// mpArtifacts := 0 ;
3503: LD_ADDR_EXP 44
3507: PUSH
3508: LD_INT 0
3510: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3511: LD_ADDR_EXP 45
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3519: LD_ADDR_EXP 25
3523: PUSH
3524: LD_INT 3
3526: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3527: LD_ADDR_EXP 24
3531: PUSH
3532: LD_INT 15
3534: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3535: LD_ADDR_EXP 38
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// mpGameActive := false ;
3543: LD_ADDR_EXP 39
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// mpBlockRespThread := false ;
3551: LD_ADDR_EXP 46
3555: PUSH
3556: LD_INT 0
3558: ST_TO_ADDR
// for i := 1 to 32 do
3559: LD_ADDR_VAR 0 2
3563: PUSH
3564: DOUBLE
3565: LD_INT 1
3567: DEC
3568: ST_TO_ADDR
3569: LD_INT 32
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3600
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3575: LD_ADDR_EXP 6
3579: PUSH
3580: LD_EXP 6
3584: PPUSH
3585: LD_VAR 0 2
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL_OW 1
3597: ST_TO_ADDR
3598: GO 3572
3600: POP
3601: POP
// end ;
3602: LD_VAR 0 1
3606: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3607: LD_INT 0
3609: PPUSH
3610: PPUSH
3611: PPUSH
3612: PPUSH
3613: PPUSH
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
3623: LD_ADDR_VAR 0 14
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 2
3633: PUSH
3634: LD_INT 3
3636: PUSH
3637: LD_INT 5
3639: PUSH
3640: LD_INT 6
3642: PUSH
3643: LD_INT 7
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: ST_TO_ADDR
// for i in gameTypes do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: LD_VAR 0 14
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3674
// disable ( i ) ;
3667: LD_VAR 0 2
3671: DISABLE_MARKED
3672: GO 3664
3674: POP
3675: POP
// if Multiplayer then
3676: LD_OWVAR 4
3680: IFFALSE 3864
// begin mpGameType := mp_game_type ;
3682: LD_ADDR_EXP 3
3686: PUSH
3687: LD_OWVAR 6
3691: ST_TO_ADDR
// your_side := mp_player_side ;
3692: LD_ADDR_OWVAR 2
3696: PUSH
3697: LD_OWVAR 7
3701: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3702: LD_ADDR_EXP 7
3706: PUSH
3707: LD_OWVAR 17
3711: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3712: LD_ADDR_EXP 8
3716: PUSH
3717: LD_OWVAR 15
3721: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3722: LD_ADDR_EXP 9
3726: PUSH
3727: LD_OWVAR 16
3731: ST_TO_ADDR
// mpTeams := mp_teams ;
3732: LD_ADDR_EXP 10
3736: PUSH
3737: LD_OWVAR 12
3741: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3742: LD_ADDR_VAR 0 2
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_EXP 4
3756: PPUSH
3757: CALL 15013 0 1
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3839
// begin setting := mpGameSettingsKeys [ i ] ;
3765: LD_ADDR_VAR 0 12
3769: PUSH
3770: LD_EXP 4
3774: PUSH
3775: LD_VAR 0 2
3779: ARRAY
3780: ST_TO_ADDR
// if setting then
3781: LD_VAR 0 12
3785: IFFALSE 3837
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3787: LD_ADDR_EXP 6
3791: PUSH
3792: LD_EXP 6
3796: PPUSH
3797: LD_VAR 0 2
3801: PPUSH
3802: LD_EXP 5
3806: PUSH
3807: LD_VAR 0 2
3811: ARRAY
3812: PUSH
3813: LD_VAR 0 2
3817: PUSH
3818: LD_INT 1
3820: MINUS
3821: PPUSH
3822: CALL_OW 426
3826: PUSH
3827: LD_INT 1
3829: PLUS
3830: ARRAY
3831: PPUSH
3832: CALL_OW 1
3836: ST_TO_ADDR
// end ;
3837: GO 3762
3839: POP
3840: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3841: LD_ADDR_EXP 11
3845: PUSH
3846: LD_EXP 8
3850: PUSH
3851: LD_INT 0
3853: PUSH
3854: EMPTY
3855: LIST
3856: DIFF
3857: PUSH
3858: LD_INT 1
3860: GREATER
3861: ST_TO_ADDR
// end else
3862: GO 3864
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3864: LD_EXP 3
3868: PPUSH
3869: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
3873: LD_EXP 18
3877: PPUSH
3878: CALL 15013 0 1
3882: IFFALSE 3913
// begin for i in mpMarkedAreas do
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_EXP 18
3893: PUSH
3894: FOR_IN
3895: IFFALSE 3911
// SetAreaMapShow ( i , 0 ) ;
3897: LD_VAR 0 2
3901: PPUSH
3902: LD_INT 0
3904: PPUSH
3905: CALL_OW 424
3909: GO 3894
3911: POP
3912: POP
// end ; for i := 1 to 8 do
3913: LD_ADDR_VAR 0 2
3917: PUSH
3918: DOUBLE
3919: LD_INT 1
3921: DEC
3922: ST_TO_ADDR
3923: LD_INT 8
3925: PUSH
3926: FOR_TO
3927: IFFALSE 5362
// begin if not mpSidePositions [ i ] then
3929: LD_EXP 7
3933: PUSH
3934: LD_VAR 0 2
3938: ARRAY
3939: NOT
3940: IFFALSE 3944
// continue ;
3942: GO 3926
// side := i ;
3944: LD_ADDR_VAR 0 7
3948: PUSH
3949: LD_VAR 0 2
3953: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3954: LD_ADDR_VAR 0 9
3958: PUSH
3959: LD_EXP 9
3963: PUSH
3964: LD_VAR 0 2
3968: ARRAY
3969: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3970: LD_ADDR_VAR 0 8
3974: PUSH
3975: LD_EXP 7
3979: PUSH
3980: LD_VAR 0 2
3984: ARRAY
3985: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3986: LD_EXP 12
3990: PPUSH
3991: CALL 15013 0 1
3995: IFFALSE 4072
// begin for j in mpOilDeposits [ pos ] do
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_EXP 12
4006: PUSH
4007: LD_VAR 0 8
4011: ARRAY
4012: PUSH
4013: FOR_IN
4014: IFFALSE 4070
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4016: LD_VAR 0 3
4020: PUSH
4021: LD_INT 1
4023: ARRAY
4024: PPUSH
4025: LD_VAR 0 3
4029: PUSH
4030: LD_INT 2
4032: ARRAY
4033: PPUSH
4034: LD_INT 2
4036: PPUSH
4037: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4041: LD_VAR 0 3
4045: PUSH
4046: LD_INT 1
4048: ARRAY
4049: PPUSH
4050: LD_VAR 0 3
4054: PUSH
4055: LD_INT 2
4057: ARRAY
4058: PPUSH
4059: LD_VAR 0 7
4063: PPUSH
4064: CALL_OW 441
// end ;
4068: GO 4013
4070: POP
4071: POP
// end ; if Count ( mpSibDeposits ) then
4072: LD_EXP 13
4076: PPUSH
4077: CALL 15013 0 1
4081: IFFALSE 4158
// begin for j in mpSibDeposits [ pos ] do
4083: LD_ADDR_VAR 0 3
4087: PUSH
4088: LD_EXP 13
4092: PUSH
4093: LD_VAR 0 8
4097: ARRAY
4098: PUSH
4099: FOR_IN
4100: IFFALSE 4156
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4102: LD_VAR 0 3
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: LD_VAR 0 3
4115: PUSH
4116: LD_INT 2
4118: ARRAY
4119: PPUSH
4120: LD_INT 3
4122: PPUSH
4123: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4127: LD_VAR 0 3
4131: PUSH
4132: LD_INT 1
4134: ARRAY
4135: PPUSH
4136: LD_VAR 0 3
4140: PUSH
4141: LD_INT 2
4143: ARRAY
4144: PPUSH
4145: LD_VAR 0 7
4149: PPUSH
4150: CALL_OW 441
// end ;
4154: GO 4099
4156: POP
4157: POP
// end ; InitBc ;
4158: CALL_OW 21
// InitUc ;
4162: CALL_OW 18
// uc_side := side ;
4166: LD_ADDR_OWVAR 20
4170: PUSH
4171: LD_VAR 0 7
4175: ST_TO_ADDR
// uc_nation := nation ;
4176: LD_ADDR_OWVAR 21
4180: PUSH
4181: LD_VAR 0 9
4185: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4186: LD_EXP 22
4190: PUSH
4191: LD_INT 1
4193: NEG
4194: GREATER
4195: IFFALSE 4354
// begin x := mpStartPos [ pos ] [ 1 ] ;
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_EXP 21
4206: PUSH
4207: LD_VAR 0 8
4211: ARRAY
4212: PUSH
4213: LD_INT 1
4215: ARRAY
4216: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4217: LD_ADDR_VAR 0 6
4221: PUSH
4222: LD_EXP 21
4226: PUSH
4227: LD_VAR 0 8
4231: ARRAY
4232: PUSH
4233: LD_INT 2
4235: ARRAY
4236: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4237: LD_VAR 0 5
4241: PPUSH
4242: LD_VAR 0 6
4246: PPUSH
4247: LD_INT 12
4249: PPUSH
4250: LD_INT 2
4252: PPUSH
4253: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4257: LD_ADDR_EXP 23
4261: PUSH
4262: LD_EXP 23
4266: PPUSH
4267: LD_VAR 0 7
4271: PPUSH
4272: LD_VAR 0 7
4276: PPUSH
4277: LD_VAR 0 5
4281: PPUSH
4282: LD_VAR 0 6
4286: PPUSH
4287: LD_INT 1
4289: PUSH
4290: LD_INT 100
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 2
4299: PUSH
4300: LD_INT 70
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 3
4309: PUSH
4310: LD_INT 40
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 10
4319: PUSH
4320: LD_INT 25
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 20
4329: PUSH
4330: LD_INT 100
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: PPUSH
4344: CALL_OW 418
4348: PPUSH
4349: CALL_OW 1
4353: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4354: LD_EXP 14
4358: PPUSH
4359: CALL 15013 0 1
4363: IFFALSE 4558
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
4365: LD_EXP 3
4369: PUSH
4370: LD_INT 2
4372: PUSH
4373: LD_INT 6
4375: PUSH
4376: LD_INT 7
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: LIST
4383: IN
4384: IFFALSE 4404
// begin bc_level := 10 ;
4386: LD_ADDR_OWVAR 43
4390: PUSH
4391: LD_INT 10
4393: ST_TO_ADDR
// bc_type := b_warehouse ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 1
4401: ST_TO_ADDR
// end else
4402: GO 4420
// begin bc_level := 0 ;
4404: LD_ADDR_OWVAR 43
4408: PUSH
4409: LD_INT 0
4411: ST_TO_ADDR
// bc_type := b_depot ;
4412: LD_ADDR_OWVAR 42
4416: PUSH
4417: LD_INT 0
4419: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4420: LD_ADDR_VAR 0 4
4424: PUSH
4425: LD_EXP 14
4429: PUSH
4430: LD_VAR 0 8
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 14
4444: PUSH
4445: LD_VAR 0 8
4449: ARRAY
4450: PUSH
4451: LD_INT 2
4453: ARRAY
4454: PPUSH
4455: LD_EXP 14
4459: PUSH
4460: LD_VAR 0 8
4464: ARRAY
4465: PUSH
4466: LD_INT 3
4468: ARRAY
4469: PPUSH
4470: CALL_OW 47
4474: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_STRING @
4482: PUSH
4483: LD_VAR 0 7
4487: STR
4488: PPUSH
4489: CALL_OW 500
// if Count ( mpStartingResources ) then
4493: LD_EXP 15
4497: PPUSH
4498: CALL 15013 0 1
4502: IFFALSE 4556
// begin for j := 1 to mpStartingResources do
4504: LD_ADDR_VAR 0 3
4508: PUSH
4509: DOUBLE
4510: LD_INT 1
4512: DEC
4513: ST_TO_ADDR
4514: LD_EXP 15
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4554
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4522: LD_VAR 0 4
4526: PPUSH
4527: CALL_OW 274
4531: PPUSH
4532: LD_VAR 0 3
4536: PPUSH
4537: LD_EXP 15
4541: PUSH
4542: LD_VAR 0 3
4546: ARRAY
4547: PPUSH
4548: CALL_OW 277
4552: GO 4519
4554: POP
4555: POP
// end ; end else
4556: GO 4765
// if Count ( mpStartingResources ) then
4558: LD_EXP 15
4562: PPUSH
4563: CALL 15013 0 1
4567: IFFALSE 4765
// begin x := mpStartPos [ pos ] [ 1 ] ;
4569: LD_ADDR_VAR 0 5
4573: PUSH
4574: LD_EXP 21
4578: PUSH
4579: LD_VAR 0 8
4583: ARRAY
4584: PUSH
4585: LD_INT 1
4587: ARRAY
4588: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4589: LD_ADDR_VAR 0 6
4593: PUSH
4594: LD_EXP 21
4598: PUSH
4599: LD_VAR 0 8
4603: ARRAY
4604: PUSH
4605: LD_INT 2
4607: ARRAY
4608: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4609: LD_ADDR_VAR 0 3
4613: PUSH
4614: DOUBLE
4615: LD_INT 1
4617: DEC
4618: ST_TO_ADDR
4619: LD_EXP 15
4623: PUSH
4624: FOR_TO
4625: IFFALSE 4763
// begin resources := mpStartingResources [ j ] ;
4627: LD_ADDR_VAR 0 13
4631: PUSH
4632: LD_EXP 15
4636: PUSH
4637: LD_VAR 0 3
4641: ARRAY
4642: ST_TO_ADDR
// if resources = 0 then
4643: LD_VAR 0 13
4647: PUSH
4648: LD_INT 0
4650: EQUAL
4651: IFFALSE 4655
// continue ;
4653: GO 4624
// repeat if resources >= 50 then
4655: LD_VAR 0 13
4659: PUSH
4660: LD_INT 50
4662: GREATEREQUAL
4663: IFFALSE 4709
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4665: LD_VAR 0 3
4669: PPUSH
4670: LD_INT 5
4672: PPUSH
4673: LD_VAR 0 5
4677: PPUSH
4678: LD_VAR 0 6
4682: PPUSH
4683: LD_INT 6
4685: PPUSH
4686: LD_INT 0
4688: PPUSH
4689: CALL_OW 60
// resources := resources - 50 ;
4693: LD_ADDR_VAR 0 13
4697: PUSH
4698: LD_VAR 0 13
4702: PUSH
4703: LD_INT 50
4705: MINUS
4706: ST_TO_ADDR
// end else
4707: GO 4751
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4709: LD_VAR 0 3
4713: PPUSH
4714: LD_VAR 0 13
4718: PUSH
4719: LD_INT 10
4721: DIV
4722: PPUSH
4723: LD_VAR 0 5
4727: PPUSH
4728: LD_VAR 0 6
4732: PPUSH
4733: LD_INT 6
4735: PPUSH
4736: LD_INT 0
4738: PPUSH
4739: CALL_OW 60
// resources := 0 ;
4743: LD_ADDR_VAR 0 13
4747: PUSH
4748: LD_INT 0
4750: ST_TO_ADDR
// end ; until resources <= 0 ;
4751: LD_VAR 0 13
4755: PUSH
4756: LD_INT 0
4758: LESSEQUAL
4759: IFFALSE 4655
// end ;
4761: GO 4624
4763: POP
4764: POP
// end ; if Count ( mpBuildings ) then
4765: LD_EXP 17
4769: PPUSH
4770: CALL 15013 0 1
4774: IFFALSE 4852
// begin for j in mpBuildings [ pos ] do
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: LD_EXP 17
4785: PUSH
4786: LD_VAR 0 8
4790: ARRAY
4791: PUSH
4792: FOR_IN
4793: IFFALSE 4850
// begin bc_level := 0 ;
4795: LD_ADDR_OWVAR 43
4799: PUSH
4800: LD_INT 0
4802: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4803: LD_ADDR_OWVAR 42
4807: PUSH
4808: LD_VAR 0 3
4812: PUSH
4813: LD_INT 1
4815: ARRAY
4816: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 2
4824: ARRAY
4825: PPUSH
4826: LD_VAR 0 3
4830: PUSH
4831: LD_INT 3
4833: ARRAY
4834: PPUSH
4835: LD_VAR 0 3
4839: PUSH
4840: LD_INT 4
4842: ARRAY
4843: PPUSH
4844: CALL_OW 47
// end ;
4848: GO 4792
4850: POP
4851: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4852: LD_EXP 26
4856: IFFALSE 4876
4858: PUSH
4859: LD_INT 20
4861: PPUSH
4862: LD_VAR 0 7
4866: PPUSH
4867: CALL_OW 321
4871: PUSH
4872: LD_INT 1
4874: EQUAL
4875: AND
4876: IFFALSE 4893
// SetTech ( tech_SibDet , side , state_researched ) ;
4878: LD_INT 20
4880: PPUSH
4881: LD_VAR 0 7
4885: PPUSH
4886: LD_INT 2
4888: PPUSH
4889: CALL_OW 322
// if not mpArtifacts then
4893: LD_EXP 44
4897: NOT
4898: IFFALSE 4915
// SetTech ( tech_artifact , side , state_disabled ) ;
4900: LD_INT 24
4902: PPUSH
4903: LD_VAR 0 7
4907: PPUSH
4908: LD_INT 0
4910: PPUSH
4911: CALL_OW 322
// if mpSibBomb = 1 then
4915: LD_EXP 28
4919: PUSH
4920: LD_INT 1
4922: EQUAL
4923: IFFALSE 4942
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4925: LD_INT 25
4927: PPUSH
4928: LD_VAR 0 7
4932: PPUSH
4933: LD_INT 1
4935: PPUSH
4936: CALL_OW 322
// end else
4940: GO 4957
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4942: LD_INT 25
4944: PPUSH
4945: LD_VAR 0 7
4949: PPUSH
4950: LD_INT 0
4952: PPUSH
4953: CALL_OW 322
// end ; if mpVehicles then
4957: LD_EXP 36
4961: IFFALSE 5060
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4963: LD_ADDR_VAR 0 3
4967: PUSH
4968: LD_VAR 0 7
4972: PPUSH
4973: LD_VAR 0 9
4977: PPUSH
4978: LD_EXP 36
4982: PPUSH
4983: CALL 6283 0 3
4987: PUSH
4988: FOR_IN
4989: IFFALSE 5058
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4991: LD_VAR 0 3
4995: PPUSH
4996: LD_INT 0
4998: PPUSH
4999: LD_INT 5
5001: PPUSH
5002: CALL_OW 12
5006: PPUSH
5007: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5011: LD_VAR 0 3
5015: PPUSH
5016: LD_EXP 21
5020: PUSH
5021: LD_VAR 0 8
5025: ARRAY
5026: PUSH
5027: LD_INT 1
5029: ARRAY
5030: PPUSH
5031: LD_EXP 21
5035: PUSH
5036: LD_VAR 0 8
5040: ARRAY
5041: PUSH
5042: LD_INT 2
5044: ARRAY
5045: PPUSH
5046: LD_INT 12
5048: PPUSH
5049: LD_INT 0
5051: PPUSH
5052: CALL_OW 50
// end ;
5056: GO 4988
5058: POP
5059: POP
// end ; uc_nation := nation ;
5060: LD_ADDR_OWVAR 21
5064: PUSH
5065: LD_VAR 0 9
5069: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
5070: LD_EXP 3
5074: PUSH
5075: LD_INT 6
5077: PUSH
5078: LD_INT 7
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: IN
5085: IFFALSE 5110
5087: PUSH
5088: LD_EXP 7
5092: PUSH
5093: LD_VAR 0 2
5097: ARRAY
5098: PUSH
5099: LD_INT 1
5101: PUSH
5102: LD_INT 2
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: IN
5109: AND
5110: IFFALSE 5158
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5112: LD_ADDR_VAR 0 11
5116: PUSH
5117: LD_VAR 0 7
5121: PPUSH
5122: LD_VAR 0 9
5126: PPUSH
5127: LD_EXP 24
5131: PUSH
5132: LD_EXP 24
5136: PUSH
5137: LD_INT 2
5139: DIV
5140: PLUS
5141: PPUSH
5142: LD_EXP 25
5146: PUSH
5147: LD_INT 1
5149: PLUS
5150: PPUSH
5151: CALL 5774 0 4
5155: ST_TO_ADDR
5156: GO 5188
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5158: LD_ADDR_VAR 0 11
5162: PUSH
5163: LD_VAR 0 7
5167: PPUSH
5168: LD_VAR 0 9
5172: PPUSH
5173: LD_EXP 24
5177: PPUSH
5178: LD_EXP 25
5182: PPUSH
5183: CALL 5774 0 4
5187: ST_TO_ADDR
// for j in team do
5188: LD_ADDR_VAR 0 3
5192: PUSH
5193: LD_VAR 0 11
5197: PUSH
5198: FOR_IN
5199: IFFALSE 5248
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5201: LD_VAR 0 3
5205: PPUSH
5206: LD_EXP 21
5210: PUSH
5211: LD_VAR 0 8
5215: ARRAY
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_EXP 21
5225: PUSH
5226: LD_VAR 0 8
5230: ARRAY
5231: PUSH
5232: LD_INT 2
5234: ARRAY
5235: PPUSH
5236: LD_INT 12
5238: PPUSH
5239: LD_INT 0
5241: PPUSH
5242: CALL_OW 50
5246: GO 5198
5248: POP
5249: POP
// if mpApemans then
5250: LD_EXP 30
5254: IFFALSE 5360
// begin for j := 1 to mpApemans do
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: DOUBLE
5262: LD_INT 1
5264: DEC
5265: ST_TO_ADDR
5266: LD_EXP 30
5270: PUSH
5271: FOR_TO
5272: IFFALSE 5358
// begin PrepareApeman ( - 5 ) ;
5274: LD_INT 5
5276: NEG
5277: PPUSH
5278: CALL 47106 0 1
// ape := CreateHuman ;
5282: LD_ADDR_VAR 0 10
5286: PUSH
5287: CALL_OW 44
5291: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5292: LD_ADDR_EXP 32
5296: PUSH
5297: LD_EXP 32
5301: PPUSH
5302: LD_VAR 0 8
5306: PPUSH
5307: LD_EXP 32
5311: PUSH
5312: LD_VAR 0 8
5316: ARRAY
5317: PPUSH
5318: LD_VAR 0 10
5322: PPUSH
5323: CALL 50979 0 2
5327: PPUSH
5328: CALL_OW 1
5332: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5333: LD_VAR 0 10
5337: PPUSH
5338: LD_EXP 31
5342: PUSH
5343: LD_VAR 0 8
5347: ARRAY
5348: PPUSH
5349: LD_INT 0
5351: PPUSH
5352: CALL_OW 49
// end ;
5356: GO 5271
5358: POP
5359: POP
// end ; end ;
5360: GO 3926
5362: POP
5363: POP
// if not mpTeamGame then
5364: LD_EXP 11
5368: NOT
5369: IFFALSE 5467
// begin for i := 1 to 8 do
5371: LD_ADDR_VAR 0 2
5375: PUSH
5376: DOUBLE
5377: LD_INT 1
5379: DEC
5380: ST_TO_ADDR
5381: LD_INT 8
5383: PUSH
5384: FOR_TO
5385: IFFALSE 5463
// for j := 1 to 8 do
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: DOUBLE
5393: LD_INT 1
5395: DEC
5396: ST_TO_ADDR
5397: LD_INT 8
5399: PUSH
5400: FOR_TO
5401: IFFALSE 5459
// if i <> j then
5403: LD_VAR 0 2
5407: PUSH
5408: LD_VAR 0 3
5412: NONEQUAL
5413: IFFALSE 5437
// SetAttitude ( i , j , att_neutral , true ) else
5415: LD_VAR 0 2
5419: PPUSH
5420: LD_VAR 0 3
5424: PPUSH
5425: LD_INT 0
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: CALL_OW 80
5435: GO 5457
// SetAttitude ( i , j , att_friend , true ) ;
5437: LD_VAR 0 2
5441: PPUSH
5442: LD_VAR 0 3
5446: PPUSH
5447: LD_INT 1
5449: PPUSH
5450: LD_INT 1
5452: PPUSH
5453: CALL_OW 80
5457: GO 5400
5459: POP
5460: POP
5461: GO 5384
5463: POP
5464: POP
// end else
5465: GO 5642
// begin if mpSharedVision then
5467: LD_EXP 16
5471: IFFALSE 5536
// begin for i in mpTeams do
5473: LD_ADDR_VAR 0 2
5477: PUSH
5478: LD_EXP 10
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5534
// for j := 2 to i do
5486: LD_ADDR_VAR 0 3
5490: PUSH
5491: DOUBLE
5492: LD_INT 2
5494: DEC
5495: ST_TO_ADDR
5496: LD_VAR 0 2
5500: PUSH
5501: FOR_TO
5502: IFFALSE 5530
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5504: LD_VAR 0 2
5508: PUSH
5509: LD_VAR 0 3
5513: ARRAY
5514: PPUSH
5515: LD_VAR 0 2
5519: PUSH
5520: LD_INT 1
5522: ARRAY
5523: PPUSH
5524: CALL_OW 343
5528: GO 5501
5530: POP
5531: POP
5532: GO 5483
5534: POP
5535: POP
// end ; for i := 1 to 8 do
5536: LD_ADDR_VAR 0 2
5540: PUSH
5541: DOUBLE
5542: LD_INT 1
5544: DEC
5545: ST_TO_ADDR
5546: LD_INT 8
5548: PUSH
5549: FOR_TO
5550: IFFALSE 5640
// for j := 1 to 8 do
5552: LD_ADDR_VAR 0 3
5556: PUSH
5557: DOUBLE
5558: LD_INT 1
5560: DEC
5561: ST_TO_ADDR
5562: LD_INT 8
5564: PUSH
5565: FOR_TO
5566: IFFALSE 5636
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5568: LD_EXP 8
5572: PUSH
5573: LD_VAR 0 2
5577: ARRAY
5578: PUSH
5579: LD_EXP 8
5583: PUSH
5584: LD_VAR 0 3
5588: ARRAY
5589: EQUAL
5590: IFFALSE 5614
// SetAttitude ( i , j , att_friend , true ) else
5592: LD_VAR 0 2
5596: PPUSH
5597: LD_VAR 0 3
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_INT 1
5607: PPUSH
5608: CALL_OW 80
5612: GO 5634
// SetAttitude ( i , j , att_enemy , true ) ;
5614: LD_VAR 0 2
5618: PPUSH
5619: LD_VAR 0 3
5623: PPUSH
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 1
5629: PPUSH
5630: CALL_OW 80
5634: GO 5565
5636: POP
5637: POP
5638: GO 5549
5640: POP
5641: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5642: LD_ADDR_OWVAR 71
5646: PUSH
5647: LD_EXP 9
5651: PUSH
5652: LD_OWVAR 2
5656: ARRAY
5657: ST_TO_ADDR
// if IAmSpec then
5658: CALL_OW 531
5662: IFFALSE 5703
// begin FogOff ( true ) ;
5664: LD_INT 1
5666: PPUSH
5667: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5671: LD_EXP 29
5675: PUSH
5676: LD_INT 1
5678: ARRAY
5679: PUSH
5680: LD_INT 2
5682: DIV
5683: PPUSH
5684: LD_EXP 29
5688: PUSH
5689: LD_INT 2
5691: ARRAY
5692: PUSH
5693: LD_INT 2
5695: DIV
5696: PPUSH
5697: CALL_OW 86
// end else
5701: GO 5749
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5703: LD_EXP 21
5707: PUSH
5708: LD_EXP 7
5712: PUSH
5713: LD_OWVAR 2
5717: ARRAY
5718: ARRAY
5719: PUSH
5720: LD_INT 1
5722: ARRAY
5723: PPUSH
5724: LD_EXP 21
5728: PUSH
5729: LD_EXP 7
5733: PUSH
5734: LD_OWVAR 2
5738: ARRAY
5739: ARRAY
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PPUSH
5745: CALL_OW 86
// end ; BeginBuildUp ;
5749: CALL 6816 0 0
// enable ( mpActive ) ;
5753: LD_INT 100
5755: ENABLE_MARKED
// enable ( mpGameType ) ;
5756: LD_EXP 3
5760: ENABLE_MARKED
// mpGameActive := true ;
5761: LD_ADDR_EXP 39
5765: PUSH
5766: LD_INT 1
5768: ST_TO_ADDR
// end ;
5769: LD_VAR 0 1
5773: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5774: LD_INT 0
5776: PPUSH
5777: PPUSH
5778: PPUSH
5779: PPUSH
// result := [ ] ;
5780: LD_ADDR_VAR 0 5
5784: PUSH
5785: EMPTY
5786: ST_TO_ADDR
// class := class_soldier ;
5787: LD_ADDR_VAR 0 8
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// uc_side := side ;
5795: LD_ADDR_OWVAR 20
5799: PUSH
5800: LD_VAR 0 1
5804: ST_TO_ADDR
// uc_nation := nation ;
5805: LD_ADDR_OWVAR 21
5809: PUSH
5810: LD_VAR 0 2
5814: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5815: LD_ADDR_OWVAR 26
5819: PUSH
5820: LD_OWVAR 19
5824: PUSH
5825: LD_VAR 0 1
5829: ARRAY
5830: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5831: LD_INT 1
5833: PPUSH
5834: LD_INT 2
5836: PPUSH
5837: CALL_OW 12
5841: PPUSH
5842: LD_VAR 0 8
5846: PPUSH
5847: LD_VAR 0 4
5851: PUSH
5852: LD_INT 2
5854: PLUS
5855: PPUSH
5856: CALL_OW 380
// hc_importance := 105 ;
5860: LD_ADDR_OWVAR 32
5864: PUSH
5865: LD_INT 105
5867: ST_TO_ADDR
// if Multiplayer then
5868: LD_OWVAR 4
5872: IFFALSE 5912
// begin hc_gallery := MULTIAVATARS ;
5874: LD_ADDR_OWVAR 33
5878: PUSH
5879: LD_STRING MULTIAVATARS
5881: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5882: LD_ADDR_OWVAR 34
5886: PUSH
5887: LD_VAR 0 1
5891: PPUSH
5892: CALL_OW 525
5896: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5897: LD_ADDR_OWVAR 27
5901: PUSH
5902: LD_VAR 0 1
5906: PPUSH
5907: CALL_OW 526
5911: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5912: LD_ADDR_VAR 0 5
5916: PUSH
5917: LD_VAR 0 5
5921: PPUSH
5922: CALL_OW 44
5926: PPUSH
5927: CALL 50979 0 2
5931: ST_TO_ADDR
// if mpTeamPreset then
5932: LD_LOC 1
5936: IFFALSE 6032
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5938: LD_LOC 1
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: PPUSH
5947: LD_VAR 0 5
5951: PUSH
5952: LD_VAR 0 5
5956: ARRAY
5957: PPUSH
5958: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5962: LD_VAR 0 5
5966: PUSH
5967: LD_VAR 0 5
5971: ARRAY
5972: PPUSH
5973: LD_INT 1
5975: PPUSH
5976: LD_LOC 1
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: CALL_OW 260
5992: PPUSH
5993: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5997: LD_VAR 0 5
6001: PUSH
6002: LD_VAR 0 5
6006: ARRAY
6007: PPUSH
6008: LD_INT 2
6010: PPUSH
6011: LD_LOC 1
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 260
6027: PPUSH
6028: CALL_OW 239
// end ; InitHc_All ( ) ;
6032: CALL_OW 584
// class := 2 ;
6036: LD_ADDR_VAR 0 8
6040: PUSH
6041: LD_INT 2
6043: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6044: LD_ADDR_VAR 0 6
6048: PUSH
6049: DOUBLE
6050: LD_INT 1
6052: DEC
6053: ST_TO_ADDR
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 1
6061: MINUS
6062: PUSH
6063: FOR_TO
6064: IFFALSE 6259
// begin PrepareHuman ( false , class , skill ) ;
6066: LD_INT 0
6068: PPUSH
6069: LD_VAR 0 8
6073: PPUSH
6074: LD_VAR 0 4
6078: PPUSH
6079: CALL_OW 380
// un := CreateHuman ;
6083: LD_ADDR_VAR 0 7
6087: PUSH
6088: CALL_OW 44
6092: ST_TO_ADDR
// result := Join ( result , un ) ;
6093: LD_ADDR_VAR 0 5
6097: PUSH
6098: LD_VAR 0 5
6102: PPUSH
6103: LD_VAR 0 7
6107: PPUSH
6108: CALL 50979 0 2
6112: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6113: LD_LOC 1
6117: PPUSH
6118: CALL 15013 0 1
6122: PUSH
6123: LD_VAR 0 3
6127: GREATEREQUAL
6128: IFFALSE 6224
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6130: LD_LOC 1
6134: PUSH
6135: LD_VAR 0 6
6139: PUSH
6140: LD_INT 1
6142: PLUS
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 7
6149: PPUSH
6150: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6154: LD_VAR 0 7
6158: PPUSH
6159: LD_INT 1
6161: PPUSH
6162: LD_LOC 1
6166: PUSH
6167: LD_VAR 0 6
6171: PUSH
6172: LD_INT 1
6174: PLUS
6175: ARRAY
6176: PPUSH
6177: LD_INT 1
6179: PPUSH
6180: CALL_OW 260
6184: PPUSH
6185: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6189: LD_VAR 0 7
6193: PPUSH
6194: LD_INT 2
6196: PPUSH
6197: LD_LOC 1
6201: PUSH
6202: LD_VAR 0 6
6206: PUSH
6207: LD_INT 1
6209: PLUS
6210: ARRAY
6211: PPUSH
6212: LD_INT 2
6214: PPUSH
6215: CALL_OW 260
6219: PPUSH
6220: CALL_OW 239
// end ; class := Inc ( class ) ;
6224: LD_ADDR_VAR 0 8
6228: PUSH
6229: LD_VAR 0 8
6233: PPUSH
6234: CALL 52352 0 1
6238: ST_TO_ADDR
// if class = 5 then
6239: LD_VAR 0 8
6243: PUSH
6244: LD_INT 5
6246: EQUAL
6247: IFFALSE 6257
// class := 1 ;
6249: LD_ADDR_VAR 0 8
6253: PUSH
6254: LD_INT 1
6256: ST_TO_ADDR
// end ;
6257: GO 6063
6259: POP
6260: POP
// if not mpTeamPreset then
6261: LD_LOC 1
6265: NOT
6266: IFFALSE 6278
// mpTeamPreset := result ;
6268: LD_ADDR_LOC 1
6272: PUSH
6273: LD_VAR 0 5
6277: ST_TO_ADDR
// end ;
6278: LD_VAR 0 5
6282: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6283: LD_INT 0
6285: PPUSH
6286: PPUSH
// result := [ ] ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: EMPTY
6293: ST_TO_ADDR
// if not vehicles then
6294: LD_VAR 0 3
6298: NOT
6299: IFFALSE 6303
// exit ;
6301: GO 6517
// for i := 1 to vehicles [ nation ] do
6303: LD_ADDR_VAR 0 5
6307: PUSH
6308: DOUBLE
6309: LD_INT 1
6311: DEC
6312: ST_TO_ADDR
6313: LD_VAR 0 3
6317: PUSH
6318: LD_VAR 0 2
6322: ARRAY
6323: PUSH
6324: FOR_TO
6325: IFFALSE 6515
// begin uc_side := side ;
6327: LD_ADDR_OWVAR 20
6331: PUSH
6332: LD_VAR 0 1
6336: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6337: LD_VAR 0 3
6341: PUSH
6342: LD_VAR 0 2
6346: ARRAY
6347: PUSH
6348: LD_VAR 0 5
6352: ARRAY
6353: PPUSH
6354: CALL 15013 0 1
6358: PUSH
6359: LD_INT 4
6361: GREATER
6362: IFFALSE 6392
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6364: LD_ADDR_OWVAR 21
6368: PUSH
6369: LD_VAR 0 3
6373: PUSH
6374: LD_VAR 0 2
6378: ARRAY
6379: PUSH
6380: LD_VAR 0 5
6384: ARRAY
6385: PUSH
6386: LD_INT 5
6388: ARRAY
6389: ST_TO_ADDR
6390: GO 6402
// uc_nation := nation ;
6392: LD_ADDR_OWVAR 21
6396: PUSH
6397: LD_VAR 0 2
6401: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6402: LD_VAR 0 3
6406: PUSH
6407: LD_VAR 0 2
6411: ARRAY
6412: PUSH
6413: LD_VAR 0 5
6417: ARRAY
6418: PUSH
6419: LD_INT 1
6421: ARRAY
6422: PPUSH
6423: LD_VAR 0 3
6427: PUSH
6428: LD_VAR 0 2
6432: ARRAY
6433: PUSH
6434: LD_VAR 0 5
6438: ARRAY
6439: PUSH
6440: LD_INT 2
6442: ARRAY
6443: PPUSH
6444: LD_VAR 0 3
6448: PUSH
6449: LD_VAR 0 2
6453: ARRAY
6454: PUSH
6455: LD_VAR 0 5
6459: ARRAY
6460: PUSH
6461: LD_INT 3
6463: ARRAY
6464: PPUSH
6465: LD_VAR 0 3
6469: PUSH
6470: LD_VAR 0 2
6474: ARRAY
6475: PUSH
6476: LD_VAR 0 5
6480: ARRAY
6481: PUSH
6482: LD_INT 4
6484: ARRAY
6485: PPUSH
6486: LD_INT 80
6488: PPUSH
6489: CALL 17809 0 5
// result := Join ( result , CreateVehicle ) ;
6493: LD_ADDR_VAR 0 4
6497: PUSH
6498: LD_VAR 0 4
6502: PPUSH
6503: CALL_OW 45
6507: PPUSH
6508: CALL 50979 0 2
6512: ST_TO_ADDR
// end ;
6513: GO 6324
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 4
6521: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
// for i in mpBattleFlags do
6526: LD_ADDR_VAR 0 3
6530: PUSH
6531: LD_EXP 23
6535: PUSH
6536: FOR_IN
6537: IFFALSE 6614
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6539: LD_VAR 0 3
6543: PPUSH
6544: LD_INT 1
6546: PUSH
6547: LD_VAR 0 1
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 2
6558: PUSH
6559: LD_VAR 0 1
6563: PUSH
6564: LD_REAL  7.00000000000000E-0001
6567: MUL
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 3
6575: PUSH
6576: LD_VAR 0 1
6580: PUSH
6581: LD_REAL  4.00000000000000E-0001
6584: MUL
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 20
6592: PUSH
6593: LD_VAR 0 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 423
6612: GO 6536
6614: POP
6615: POP
// end ;
6616: LD_VAR 0 2
6620: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6621: LD_INT 100
6623: IFFALSE 6718
6625: GO 6627
6627: DISABLE
6628: LD_INT 0
6630: PPUSH
6631: PPUSH
// begin if mpBattleFlag <= 0 then
6632: LD_EXP 22
6636: PUSH
6637: LD_INT 0
6639: LESSEQUAL
6640: IFFALSE 6644
// exit ;
6642: GO 6718
// strength := 100 ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 100
6651: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6652: LD_EXP 22
6656: PPUSH
6657: CALL_OW 67
// strength := Dec ( strength ) ;
6661: LD_ADDR_VAR 0 2
6665: PUSH
6666: LD_VAR 0 2
6670: PPUSH
6671: CALL 52374 0 1
6675: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6676: LD_VAR 0 2
6680: PPUSH
6681: CALL 6522 0 1
// until not strength ;
6685: LD_VAR 0 2
6689: NOT
6690: IFFALSE 6652
// for i in mpBattleFlags do
6692: LD_ADDR_VAR 0 1
6696: PUSH
6697: LD_EXP 23
6701: PUSH
6702: FOR_IN
6703: IFFALSE 6716
// KillBattleFlag ( i ) ;
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 419
6714: GO 6702
6716: POP
6717: POP
// end ;
6718: PPOPN 2
6720: END
// every 0 0$1 marked mpActive do var side , tmp ;
6721: GO 6723
6723: DISABLE
6724: LD_INT 0
6726: PPUSH
6727: PPUSH
// begin if mpSibBomb <= 1 then
6728: LD_EXP 28
6732: PUSH
6733: LD_INT 1
6735: LESSEQUAL
6736: IFFALSE 6740
// exit ;
6738: GO 6813
// tmp := mpSibBomb ;
6740: LD_ADDR_VAR 0 2
6744: PUSH
6745: LD_EXP 28
6749: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6750: LD_INT 35
6752: PPUSH
6753: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6757: LD_ADDR_VAR 0 2
6761: PUSH
6762: LD_VAR 0 2
6766: PUSH
6767: LD_INT 35
6769: MINUS
6770: ST_TO_ADDR
// until not tmp ;
6771: LD_VAR 0 2
6775: NOT
6776: IFFALSE 6750
// for side := 1 to 8 do
6778: LD_ADDR_VAR 0 1
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 8
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6811
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6794: LD_INT 25
6796: PPUSH
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_INT 1
6804: PPUSH
6805: CALL_OW 322
6809: GO 6791
6811: POP
6812: POP
// end ;
6813: PPOPN 2
6815: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6816: LD_INT 0
6818: PPUSH
6819: PPUSH
6820: PPUSH
// mpBuildUpTimeDelay := 0 ;
6821: LD_ADDR_EXP 47
6825: PUSH
6826: LD_INT 0
6828: ST_TO_ADDR
// if not mpBuildUpTime then
6829: LD_EXP 20
6833: NOT
6834: IFFALSE 6838
// exit ;
6836: GO 7027
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6838: LD_ADDR_EXP 47
6842: PUSH
6843: LD_INT 8400
6845: PUSH
6846: LD_INT 2100
6848: PUSH
6849: LD_EXP 20
6853: MUL
6854: PLUS
6855: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6856: LD_ADDR_EXP 48
6860: PUSH
6861: LD_INT 1
6863: ST_TO_ADDR
// for i := 1 to 8 do
6864: LD_ADDR_VAR 0 2
6868: PUSH
6869: DOUBLE
6870: LD_INT 1
6872: DEC
6873: ST_TO_ADDR
6874: LD_INT 8
6876: PUSH
6877: FOR_TO
6878: IFFALSE 7025
// if mpSidePositions [ i ] then
6880: LD_EXP 7
6884: PUSH
6885: LD_VAR 0 2
6889: ARRAY
6890: IFFALSE 7023
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6892: LD_EXP 19
6896: PUSH
6897: LD_EXP 7
6901: PUSH
6902: LD_VAR 0 2
6906: ARRAY
6907: ARRAY
6908: PPUSH
6909: LD_INT 5
6911: PPUSH
6912: CALL_OW 424
// for j := 1 to 8 do
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: DOUBLE
6922: LD_INT 1
6924: DEC
6925: ST_TO_ADDR
6926: LD_INT 8
6928: PUSH
6929: FOR_TO
6930: IFFALSE 7021
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6932: LD_EXP 7
6936: PUSH
6937: LD_VAR 0 3
6941: ARRAY
6942: IFFALSE 6991
6944: PUSH
6945: LD_EXP 8
6949: PUSH
6950: LD_VAR 0 2
6954: ARRAY
6955: PUSH
6956: LD_EXP 8
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: NONEQUAL
6967: IFTRUE 6990
6969: PUSH
6970: LD_EXP 11
6974: NOT
6975: IFFALSE 6989
6977: PUSH
6978: LD_VAR 0 2
6982: PUSH
6983: LD_VAR 0 3
6987: NONEQUAL
6988: AND
6989: OR
6990: AND
6991: IFFALSE 7019
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6993: LD_VAR 0 3
6997: PPUSH
6998: LD_EXP 19
7002: PUSH
7003: LD_EXP 7
7007: PUSH
7008: LD_VAR 0 2
7012: ARRAY
7013: ARRAY
7014: PPUSH
7015: CALL_OW 333
7019: GO 6929
7021: POP
7022: POP
// end ;
7023: GO 6877
7025: POP
7026: POP
// end ;
7027: LD_VAR 0 1
7031: RET
// function EndBuildUp ; var i , j ; begin
7032: LD_INT 0
7034: PPUSH
7035: PPUSH
7036: PPUSH
// mpBuildUpTimeActive := false ;
7037: LD_ADDR_EXP 48
7041: PUSH
7042: LD_INT 0
7044: ST_TO_ADDR
// for i := 1 to 8 do
7045: LD_ADDR_VAR 0 2
7049: PUSH
7050: DOUBLE
7051: LD_INT 1
7053: DEC
7054: ST_TO_ADDR
7055: LD_INT 8
7057: PUSH
7058: FOR_TO
7059: IFFALSE 7206
// if mpSidePositions [ i ] then
7061: LD_EXP 7
7065: PUSH
7066: LD_VAR 0 2
7070: ARRAY
7071: IFFALSE 7204
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7073: LD_EXP 19
7077: PUSH
7078: LD_EXP 7
7082: PUSH
7083: LD_VAR 0 2
7087: ARRAY
7088: ARRAY
7089: PPUSH
7090: LD_INT 0
7092: PPUSH
7093: CALL_OW 424
// for j := 1 to 8 do
7097: LD_ADDR_VAR 0 3
7101: PUSH
7102: DOUBLE
7103: LD_INT 1
7105: DEC
7106: ST_TO_ADDR
7107: LD_INT 8
7109: PUSH
7110: FOR_TO
7111: IFFALSE 7202
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7113: LD_EXP 7
7117: PUSH
7118: LD_VAR 0 3
7122: ARRAY
7123: IFFALSE 7172
7125: PUSH
7126: LD_EXP 8
7130: PUSH
7131: LD_VAR 0 2
7135: ARRAY
7136: PUSH
7137: LD_EXP 8
7141: PUSH
7142: LD_VAR 0 3
7146: ARRAY
7147: NONEQUAL
7148: IFTRUE 7171
7150: PUSH
7151: LD_EXP 11
7155: NOT
7156: IFFALSE 7170
7158: PUSH
7159: LD_VAR 0 2
7163: PUSH
7164: LD_VAR 0 3
7168: NONEQUAL
7169: AND
7170: OR
7171: AND
7172: IFFALSE 7200
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7174: LD_VAR 0 3
7178: PPUSH
7179: LD_EXP 19
7183: PUSH
7184: LD_EXP 7
7188: PUSH
7189: LD_VAR 0 2
7193: ARRAY
7194: ARRAY
7195: PPUSH
7196: CALL_OW 334
7200: GO 7110
7202: POP
7203: POP
// end ;
7204: GO 7058
7206: POP
7207: POP
// end ;
7208: LD_VAR 0 1
7212: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7213: LD_EXP 48
7217: IFFALSE 7396
7219: GO 7221
7221: DISABLE
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
// begin for i := 1 to 8 do
7226: LD_ADDR_VAR 0 1
7230: PUSH
7231: DOUBLE
7232: LD_INT 1
7234: DEC
7235: ST_TO_ADDR
7236: LD_INT 8
7238: PUSH
7239: FOR_TO
7240: IFFALSE 7393
// if mpSidePositions [ i ] then
7242: LD_EXP 7
7246: PUSH
7247: LD_VAR 0 1
7251: ARRAY
7252: IFFALSE 7391
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7254: LD_ADDR_VAR 0 2
7258: PUSH
7259: LD_EXP 19
7263: PUSH
7264: LD_EXP 7
7268: PUSH
7269: LD_VAR 0 1
7273: ARRAY
7274: ARRAY
7275: PPUSH
7276: LD_INT 2
7278: PUSH
7279: LD_INT 21
7281: PUSH
7282: LD_INT 1
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 21
7291: PUSH
7292: LD_INT 2
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 22
7306: PUSH
7307: LD_OWVAR 2
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 70
7324: PUSH
7325: FOR_IN
7326: IFFALSE 7389
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7328: LD_EXP 8
7332: PUSH
7333: LD_VAR 0 1
7337: ARRAY
7338: PUSH
7339: LD_EXP 8
7343: PUSH
7344: LD_OWVAR 2
7348: ARRAY
7349: NONEQUAL
7350: IFTRUE 7373
7352: PUSH
7353: LD_EXP 11
7357: NOT
7358: IFFALSE 7372
7360: PUSH
7361: LD_VAR 0 1
7365: PUSH
7366: LD_OWVAR 2
7370: NONEQUAL
7371: AND
7372: OR
7373: IFFALSE 7387
// ComMoveToArea ( un , BuildUpEscape ) ;
7375: LD_VAR 0 2
7379: PPUSH
7380: LD_INT 57
7382: PPUSH
7383: CALL_OW 113
7387: GO 7325
7389: POP
7390: POP
7391: GO 7239
7393: POP
7394: POP
// enable ;
7395: ENABLE
// end ;
7396: PPOPN 2
7398: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7399: LD_EXP 20
7403: IFFALSE 7453
7405: GO 7407
7407: DISABLE
7408: LD_INT 0
7410: PPUSH
// begin tmp := mpBuildUpTime ;
7411: LD_ADDR_VAR 0 1
7415: PUSH
7416: LD_EXP 20
7420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7421: LD_INT 35
7423: PPUSH
7424: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7428: LD_ADDR_VAR 0 1
7432: PUSH
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 35
7440: MINUS
7441: ST_TO_ADDR
// until not tmp ;
7442: LD_VAR 0 1
7446: NOT
7447: IFFALSE 7421
// EndBuildUp ;
7449: CALL 7032 0 0
// end ;
7453: PPOPN 1
7455: END
// every 0 0$1 trigger mpActive marked mpWin do
7456: LD_INT 100
7458: IFFALSE 7492
7460: GO 7462
7462: DISABLE
// begin if IAmServer then
7463: CALL_OW 518
7467: IFFALSE 7476
// wait ( 0 0$3 ) ;
7469: LD_INT 105
7471: PPUSH
7472: CALL_OW 67
// if Multiplayer then
7476: LD_OWVAR 4
7480: IFFALSE 7488
// YouWinInMultiplayer else
7482: CALL_OW 106
7486: GO 7492
// YouWin ;
7488: CALL_OW 103
// end ;
7492: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7493: LD_INT 0
7495: PPUSH
// result := false ;
7496: LD_ADDR_VAR 0 3
7500: PUSH
7501: LD_INT 0
7503: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
7504: LD_VAR 0 1
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7535
7515: LD_INT 5
7517: DOUBLE
7518: EQUAL
7519: IFTRUE 7535
7521: LD_INT 6
7523: DOUBLE
7524: EQUAL
7525: IFTRUE 7535
7527: LD_INT 7
7529: DOUBLE
7530: EQUAL
7531: IFTRUE 7535
7533: GO 7608
7535: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7536: LD_ADDR_VAR 0 3
7540: PUSH
7541: LD_INT 22
7543: PUSH
7544: LD_VAR 0 2
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 2
7555: PUSH
7556: LD_INT 21
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 33
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 33
7578: PUSH
7579: LD_INT 5
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PPUSH
7596: CALL_OW 69
7600: PPUSH
7601: CALL 15013 0 1
7605: ST_TO_ADDR
// end ; GameTypeSurvival :
7606: GO 7847
7608: LD_INT 2
7610: DOUBLE
7611: EQUAL
7612: IFTRUE 7616
7614: GO 7746
7616: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7617: LD_ADDR_VAR 0 3
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_VAR 0 2
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: LD_INT 30
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 30
7649: PUSH
7650: LD_INT 1
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: LIST
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: PPUSH
7671: CALL 15013 0 1
7675: IFFALSE 7743
7677: PUSH
7678: LD_INT 22
7680: PUSH
7681: LD_VAR 0 2
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: LD_INT 21
7695: PUSH
7696: LD_INT 1
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 33
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 33
7715: PUSH
7716: LD_INT 5
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PPUSH
7733: CALL_OW 69
7737: PPUSH
7738: CALL 15013 0 1
7742: AND
7743: ST_TO_ADDR
// end ; GameTypeKing :
7744: GO 7847
7746: LD_INT 3
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 7846
7754: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7755: LD_ADDR_VAR 0 3
7759: PUSH
7760: LD_INT 22
7762: PUSH
7763: LD_VAR 0 2
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: LD_INT 21
7777: PUSH
7778: LD_INT 1
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 33
7787: PUSH
7788: LD_INT 3
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 33
7797: PUSH
7798: LD_INT 5
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PPUSH
7815: CALL_OW 69
7819: PPUSH
7820: CALL 15013 0 1
7824: IFFALSE 7843
7826: PUSH
7827: LD_VAR 0 2
7831: PPUSH
7832: CALL 12129 0 1
7836: PUSH
7837: LD_EXP 35
7841: LESS
7842: AND
7843: ST_TO_ADDR
// end ; end ;
7844: GO 7847
7846: POP
// end ;
7847: LD_VAR 0 3
7851: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7852: LD_INT 100
7854: IFFALSE 8084
7856: GO 7858
7858: DISABLE
7859: LD_INT 0
7861: PPUSH
7862: PPUSH
// begin if Multiplayer then
7863: LD_OWVAR 4
7867: IFFALSE 7875
// SetPlayerSpectator ( ) else
7869: CALL_OW 572
7873: GO 7884
// FogOff ( your_side ) ;
7875: LD_OWVAR 2
7879: PPUSH
7880: CALL_OW 344
// repeat gameIsOn := false ;
7884: LD_ADDR_VAR 0 1
7888: PUSH
7889: LD_INT 0
7891: ST_TO_ADDR
// for i := 1 to 8 do
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: DOUBLE
7898: LD_INT 1
7900: DEC
7901: ST_TO_ADDR
7902: LD_INT 8
7904: PUSH
7905: FOR_TO
7906: IFFALSE 8036
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7908: LD_EXP 7
7912: PUSH
7913: LD_VAR 0 2
7917: ARRAY
7918: IFFALSE 7931
7920: PUSH
7921: LD_VAR 0 2
7925: PPUSH
7926: CALL_OW 108
7930: AND
7931: IFFALSE 7945
7933: PUSH
7934: LD_VAR 0 2
7938: PUSH
7939: LD_OWVAR 2
7943: NONEQUAL
7944: AND
7945: IFFALSE 8034
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7947: LD_EXP 8
7951: PUSH
7952: LD_VAR 0 2
7956: ARRAY
7957: NOT
7958: IFTRUE 8006
7960: PUSH
7961: LD_EXP 8
7965: PUSH
7966: LD_VAR 0 2
7970: ARRAY
7971: PUSH
7972: LD_EXP 8
7976: PUSH
7977: LD_OWVAR 2
7981: ARRAY
7982: NONEQUAL
7983: IFFALSE 8005
7985: PUSH
7986: LD_OWVAR 2
7990: PPUSH
7991: LD_VAR 0 2
7995: PPUSH
7996: CALL_OW 81
8000: PUSH
8001: LD_INT 1
8003: NONEQUAL
8004: AND
8005: OR
8006: IFFALSE 8034
// if HasPowerByGameType ( mpGameType , i ) then
8008: LD_EXP 3
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL 7493 0 2
8022: IFFALSE 8034
// begin gameIsOn := true ;
8024: LD_ADDR_VAR 0 1
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// break ;
8032: GO 8036
// end ;
8034: GO 7905
8036: POP
8037: POP
// wait ( 100 ) ;
8038: LD_INT 100
8040: PPUSH
8041: CALL_OW 67
// until not gameIsOn ;
8045: LD_VAR 0 1
8049: NOT
8050: IFFALSE 7884
// if IAmServer then
8052: CALL_OW 518
8056: IFFALSE 8065
// wait ( 0 0$3 ) ;
8058: LD_INT 105
8060: PPUSH
8061: CALL_OW 67
// if Multiplayer then
8065: LD_OWVAR 4
8069: IFFALSE 8077
// YouLostInMultiplayer else
8071: CALL_OW 107
8075: GO 8084
// YouLost (  ) ;
8077: LD_STRING 
8079: PPUSH
8080: CALL_OW 104
// end ;
8084: PPOPN 2
8086: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8087: LD_EXP 33
8091: IFFALSE 8475
8093: GO 8095
8095: DISABLE
8096: LD_INT 0
8098: PPUSH
8099: PPUSH
8100: PPUSH
8101: PPUSH
8102: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8103: LD_ADDR_VAR 0 5
8107: PUSH
8108: LD_INT 1
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 3
8116: PUSH
8117: LD_INT 4
8119: PUSH
8120: LD_INT 5
8122: PUSH
8123: LD_INT 6
8125: PUSH
8126: LD_INT 7
8128: PUSH
8129: LD_INT 8
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8142: LD_INT 350
8144: PPUSH
8145: CALL_OW 67
// for i := 1 to 8 do
8149: LD_ADDR_VAR 0 1
8153: PUSH
8154: DOUBLE
8155: LD_INT 1
8157: DEC
8158: ST_TO_ADDR
8159: LD_INT 8
8161: PUSH
8162: FOR_TO
8163: IFFALSE 8445
// begin j := sides [ i ] ;
8165: LD_ADDR_VAR 0 2
8169: PUSH
8170: LD_VAR 0 5
8174: PUSH
8175: LD_VAR 0 1
8179: ARRAY
8180: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8181: LD_EXP 40
8185: PUSH
8186: LD_VAR 0 2
8190: ARRAY
8191: PPUSH
8192: CALL 15013 0 1
8196: IFFALSE 8209
8198: PUSH
8199: LD_VAR 0 2
8203: PPUSH
8204: CALL_OW 108
8208: AND
8209: IFFALSE 8227
8211: PUSH
8212: LD_EXP 3
8216: PPUSH
8217: LD_VAR 0 2
8221: PPUSH
8222: CALL 7493 0 2
8226: AND
8227: IFFALSE 8443
// begin wait ( mpRespawn div 2 ) ;
8229: LD_EXP 33
8233: PUSH
8234: LD_INT 2
8236: DIV
8237: PPUSH
8238: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8242: LD_ADDR_VAR 0 3
8246: PUSH
8247: LD_INT 22
8249: PUSH
8250: LD_VAR 0 2
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 50
8261: PUSH
8262: EMPTY
8263: LIST
8264: PUSH
8265: LD_INT 2
8267: PUSH
8268: LD_INT 30
8270: PUSH
8271: LD_INT 0
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: PUSH
8278: LD_INT 30
8280: PUSH
8281: LD_INT 1
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: LIST
8292: PUSH
8293: EMPTY
8294: LIST
8295: LIST
8296: LIST
8297: PPUSH
8298: CALL_OW 69
8302: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8303: LD_VAR 0 3
8307: NOT
8308: IFTRUE 8322
8310: PUSH
8311: LD_VAR 0 2
8315: PPUSH
8316: CALL_OW 108
8320: NOT
8321: OR
8322: IFTRUE 8341
8324: PUSH
8325: LD_EXP 3
8329: PPUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: CALL 7493 0 2
8339: NOT
8340: OR
8341: IFFALSE 8345
// continue ;
8343: GO 8162
// spawn := tmp [ 1 ] ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 1
8357: ARRAY
8358: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8359: LD_EXP 40
8363: PUSH
8364: LD_VAR 0 2
8368: ARRAY
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_VAR 0 4
8378: PPUSH
8379: CALL_OW 250
8383: PPUSH
8384: LD_VAR 0 4
8388: PPUSH
8389: CALL_OW 251
8393: PPUSH
8394: LD_INT 32
8396: PPUSH
8397: LD_INT 1
8399: PPUSH
8400: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8404: LD_ADDR_EXP 40
8408: PUSH
8409: LD_EXP 40
8413: PPUSH
8414: LD_VAR 0 2
8418: PPUSH
8419: LD_EXP 40
8423: PUSH
8424: LD_VAR 0 2
8428: ARRAY
8429: PPUSH
8430: LD_INT 1
8432: PPUSH
8433: CALL_OW 3
8437: PPUSH
8438: CALL_OW 1
8442: ST_TO_ADDR
// end ; end ;
8443: GO 8162
8445: POP
8446: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8447: LD_ADDR_VAR 0 5
8451: PUSH
8452: LD_VAR 0 5
8456: PPUSH
8457: LD_INT 1
8459: PPUSH
8460: LD_INT 8
8462: PPUSH
8463: LD_INT 1
8465: PPUSH
8466: CALL 17339 0 4
8470: ST_TO_ADDR
// until false ;
8471: LD_INT 0
8473: IFFALSE 8142
// end ;
8475: PPOPN 5
8477: END
// every 0 0$1 marked mpActive do
8478: GO 8480
8480: DISABLE
// begin enable ;
8481: ENABLE
// if not mpDisplayStrings then
8482: LD_EXP 38
8486: NOT
8487: IFFALSE 8498
// begin display_strings := [ ] ;
8489: LD_ADDR_OWVAR 47
8493: PUSH
8494: EMPTY
8495: ST_TO_ADDR
// exit ;
8496: GO 8508
// end ; display_strings := mpDisplayStrings ;
8498: LD_ADDR_OWVAR 47
8502: PUSH
8503: LD_EXP 38
8507: ST_TO_ADDR
// end ; end_of_file
8508: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8509: LD_INT 0
8511: PPUSH
8512: PPUSH
8513: PPUSH
8514: PPUSH
8515: PPUSH
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
// if GetType ( un ) = unit_vehicle then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 247
8529: PUSH
8530: LD_INT 2
8532: EQUAL
8533: IFFALSE 8537
// exit ;
8535: GO 9211
// side := GetSide ( un ) ;
8537: LD_ADDR_VAR 0 9
8541: PUSH
8542: LD_VAR 0 1
8546: PPUSH
8547: CALL_OW 255
8551: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8552: LD_EXP 3
8556: PUSH
8557: LD_INT 2
8559: EQUAL
8560: IFFALSE 8654
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8562: LD_VAR 0 1
8566: PPUSH
8567: CALL_OW 266
8571: PUSH
8572: LD_INT 0
8574: PUSH
8575: LD_INT 1
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: IN
8582: IFFALSE 8654
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: LD_INT 22
8591: PUSH
8592: LD_VAR 0 9
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: LD_INT 2
8603: PUSH
8604: LD_INT 21
8606: PUSH
8607: LD_INT 1
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 33
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: PUSH
8629: EMPTY
8630: LIST
8631: LIST
8632: PPUSH
8633: CALL_OW 69
8637: PUSH
8638: FOR_IN
8639: IFFALSE 8652
// KillUnit ( i ) ;
8641: LD_VAR 0 3
8645: PPUSH
8646: CALL_OW 66
8650: GO 8638
8652: POP
8653: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 257
8663: PUSH
8664: LD_INT 12
8666: PUSH
8667: LD_INT 17
8669: PUSH
8670: LD_INT 15
8672: PUSH
8673: LD_INT 16
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: IN
8682: IFTRUE 8699
8684: PUSH
8685: LD_VAR 0 1
8689: PPUSH
8690: CALL_OW 263
8694: PUSH
8695: LD_INT 5
8697: EQUAL
8698: OR
8699: IFFALSE 8936
// begin tag := 0 ;
8701: LD_ADDR_VAR 0 5
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// for i := 1 to 8 do
8709: LD_ADDR_VAR 0 3
8713: PUSH
8714: DOUBLE
8715: LD_INT 1
8717: DEC
8718: ST_TO_ADDR
8719: LD_INT 8
8721: PUSH
8722: FOR_TO
8723: IFFALSE 8757
// if un in mpApePosIndex [ i ] then
8725: LD_VAR 0 1
8729: PUSH
8730: LD_EXP 32
8734: PUSH
8735: LD_VAR 0 3
8739: ARRAY
8740: IN
8741: IFFALSE 8755
// begin tag := i ;
8743: LD_ADDR_VAR 0 5
8747: PUSH
8748: LD_VAR 0 3
8752: ST_TO_ADDR
// break ;
8753: GO 8757
// end ;
8755: GO 8722
8757: POP
8758: POP
// if not tag then
8759: LD_VAR 0 5
8763: NOT
8764: IFFALSE 8768
// exit ;
8766: GO 9211
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8768: LD_ADDR_VAR 0 7
8772: PUSH
8773: LD_EXP 31
8777: PUSH
8778: LD_EXP 7
8782: PUSH
8783: LD_VAR 0 5
8787: ARRAY
8788: ARRAY
8789: ST_TO_ADDR
// if not area then
8790: LD_VAR 0 7
8794: NOT
8795: IFFALSE 8799
// exit ;
8797: GO 9211
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8799: LD_INT 14700
8801: PUSH
8802: LD_VAR 0 1
8806: PUSH
8807: LD_INT 5
8809: MOD
8810: PUSH
8811: LD_INT 1
8813: PLUS
8814: PUSH
8815: LD_INT 700
8817: MUL
8818: PLUS
8819: PPUSH
8820: CALL_OW 67
// repeat wait ( 10 ) ;
8824: LD_INT 10
8826: PPUSH
8827: CALL_OW 67
// until not mpBlockRespThread ;
8831: LD_EXP 46
8835: NOT
8836: IFFALSE 8824
// mpBlockRespThread := true ;
8838: LD_ADDR_EXP 46
8842: PUSH
8843: LD_INT 1
8845: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8846: LD_INT 0
8848: PPUSH
8849: CALL 47106 0 1
// ape := CreateHuman ;
8853: LD_ADDR_VAR 0 4
8857: PUSH
8858: CALL_OW 44
8862: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8863: LD_ADDR_EXP 32
8867: PUSH
8868: LD_EXP 32
8872: PPUSH
8873: LD_VAR 0 5
8877: PPUSH
8878: LD_EXP 32
8882: PUSH
8883: LD_VAR 0 5
8887: ARRAY
8888: PPUSH
8889: LD_VAR 0 4
8893: PPUSH
8894: CALL 50979 0 2
8898: PPUSH
8899: CALL_OW 1
8903: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8904: LD_VAR 0 4
8908: PPUSH
8909: LD_VAR 0 7
8913: PPUSH
8914: LD_INT 0
8916: PPUSH
8917: CALL_OW 49
// wait ( 10 ) ;
8921: LD_INT 10
8923: PPUSH
8924: CALL_OW 67
// mpBlockRespThread := false ;
8928: LD_ADDR_EXP 46
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8936: LD_VAR 0 1
8940: PPUSH
8941: CALL_OW 247
8945: PUSH
8946: LD_INT 1
8948: EQUAL
8949: IFFALSE 8966
8951: PUSH
8952: LD_VAR 0 1
8956: PPUSH
8957: CALL_OW 248
8961: PUSH
8962: LD_INT 0
8964: GREATER
8965: AND
8966: IFFALSE 9211
// begin if not mpRespawn then
8968: LD_EXP 33
8972: NOT
8973: IFFALSE 8977
// exit ;
8975: GO 9211
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8977: LD_VAR 0 9
8981: PPUSH
8982: CALL_OW 108
8986: NOT
8987: IFFALSE 9006
8989: PUSH
8990: LD_EXP 3
8994: PPUSH
8995: LD_VAR 0 9
8999: PPUSH
9000: CALL 7493 0 2
9004: NOT
9005: AND
9006: IFFALSE 9010
// exit ;
9008: GO 9211
// side := GetSide ( un ) ;
9010: LD_ADDR_VAR 0 9
9014: PUSH
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 255
9024: ST_TO_ADDR
// nation := GetNation ( un ) ;
9025: LD_ADDR_VAR 0 8
9029: PUSH
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 248
9039: ST_TO_ADDR
// class := GetClass ( un ) ;
9040: LD_ADDR_VAR 0 6
9044: PUSH
9045: LD_VAR 0 1
9049: PPUSH
9050: CALL_OW 257
9054: ST_TO_ADDR
// if class > 4 then
9055: LD_VAR 0 6
9059: PUSH
9060: LD_INT 4
9062: GREATER
9063: IFFALSE 9073
// class := 1 ;
9065: LD_ADDR_VAR 0 6
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// repeat wait ( 10 ) ;
9073: LD_INT 10
9075: PPUSH
9076: CALL_OW 67
// until not mpBlockRespThread ;
9080: LD_EXP 46
9084: NOT
9085: IFFALSE 9073
// mpBlockRespThread := true ;
9087: LD_ADDR_EXP 46
9091: PUSH
9092: LD_INT 1
9094: ST_TO_ADDR
// uc_side := side ;
9095: LD_ADDR_OWVAR 20
9099: PUSH
9100: LD_VAR 0 9
9104: ST_TO_ADDR
// uc_nation := nation ;
9105: LD_ADDR_OWVAR 21
9109: PUSH
9110: LD_VAR 0 8
9114: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9115: LD_INT 0
9117: PPUSH
9118: LD_VAR 0 6
9122: PPUSH
9123: LD_INT 2
9125: PPUSH
9126: CALL_OW 380
// un := CreateHuman ;
9130: LD_ADDR_VAR 0 1
9134: PUSH
9135: CALL_OW 44
9139: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9140: LD_ADDR_EXP 40
9144: PUSH
9145: LD_EXP 40
9149: PPUSH
9150: LD_VAR 0 9
9154: PPUSH
9155: LD_EXP 40
9159: PUSH
9160: LD_VAR 0 9
9164: ARRAY
9165: PPUSH
9166: LD_EXP 40
9170: PUSH
9171: LD_VAR 0 9
9175: ARRAY
9176: PUSH
9177: LD_INT 1
9179: PLUS
9180: PPUSH
9181: LD_VAR 0 1
9185: PPUSH
9186: CALL_OW 1
9190: PPUSH
9191: CALL_OW 1
9195: ST_TO_ADDR
// wait ( 10 ) ;
9196: LD_INT 10
9198: PPUSH
9199: CALL_OW 67
// mpBlockRespThread := false ;
9203: LD_ADDR_EXP 46
9207: PUSH
9208: LD_INT 0
9210: ST_TO_ADDR
// end ; end ;
9211: LD_VAR 0 2
9215: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9216: LD_INT 0
9218: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9219: LD_VAR 0 1
9223: PPUSH
9224: CALL_OW 266
9228: PUSH
9229: LD_INT 0
9231: PUSH
9232: LD_INT 1
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: IN
9239: IFFALSE 9264
// SetBName ( building , @ & GetSide ( building ) ) ;
9241: LD_VAR 0 1
9245: PPUSH
9246: LD_STRING @
9248: PUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 255
9258: STR
9259: PPUSH
9260: CALL_OW 500
// end ;
9264: LD_VAR 0 2
9268: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9269: LD_INT 0
9271: PPUSH
9272: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
9273: LD_EXP 3
9277: PUSH
9278: LD_INT 2
9280: EQUAL
9281: IFFALSE 9305
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 266
9293: PUSH
9294: LD_INT 0
9296: PUSH
9297: LD_INT 1
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: IN
9304: AND
9305: IFFALSE 9384
// begin SetSide ( building , oldSide ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_VAR 0 2
9316: PPUSH
9317: CALL_OW 235
// KillUnit ( building ) ;
9321: LD_VAR 0 1
9325: PPUSH
9326: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9330: LD_ADDR_VAR 0 5
9334: PUSH
9335: LD_INT 22
9337: PUSH
9338: LD_VAR 0 2
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 21
9349: PUSH
9350: LD_INT 1
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PPUSH
9361: CALL_OW 69
9365: PUSH
9366: FOR_IN
9367: IFFALSE 9380
// KillUnit ( i ) ;
9369: LD_VAR 0 5
9373: PPUSH
9374: CALL_OW 66
9378: GO 9366
9380: POP
9381: POP
// exit ;
9382: GO 9429
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 266
9393: PUSH
9394: LD_INT 0
9396: PUSH
9397: LD_INT 1
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: IN
9404: IFFALSE 9429
// SetBName ( building , @ & GetSide ( building ) ) ;
9406: LD_VAR 0 1
9410: PPUSH
9411: LD_STRING @
9413: PUSH
9414: LD_VAR 0 1
9418: PPUSH
9419: CALL_OW 255
9423: STR
9424: PPUSH
9425: CALL_OW 500
// end ;
9429: LD_VAR 0 4
9433: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9434: LD_INT 0
9436: PPUSH
9437: PPUSH
9438: PPUSH
// if mpGameType <> GameTypeFamine then
9439: LD_EXP 3
9443: PUSH
9444: LD_INT 5
9446: NONEQUAL
9447: IFFALSE 9451
// exit ;
9449: GO 9666
// for i := 1 to mpGlobalOilDeposits do
9451: LD_ADDR_VAR 0 6
9455: PUSH
9456: DOUBLE
9457: LD_INT 1
9459: DEC
9460: ST_TO_ADDR
9461: LD_EXP 41
9465: PUSH
9466: FOR_TO
9467: IFFALSE 9664
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9469: LD_EXP 41
9473: PUSH
9474: LD_VAR 0 6
9478: ARRAY
9479: PUSH
9480: LD_INT 1
9482: ARRAY
9483: PPUSH
9484: LD_EXP 41
9488: PUSH
9489: LD_VAR 0 6
9493: ARRAY
9494: PUSH
9495: LD_INT 2
9497: ARRAY
9498: PPUSH
9499: CALL_OW 428
9503: PUSH
9504: LD_VAR 0 1
9508: EQUAL
9509: IFFALSE 9662
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9511: LD_ADDR_VAR 0 7
9515: PUSH
9516: LD_EXP 41
9520: PUSH
9521: LD_VAR 0 6
9525: ARRAY
9526: PUSH
9527: LD_INT 3
9529: ARRAY
9530: ST_TO_ADDR
// value := value - amount ;
9531: LD_ADDR_VAR 0 7
9535: PUSH
9536: LD_VAR 0 7
9540: PUSH
9541: LD_VAR 0 4
9545: MINUS
9546: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9547: LD_ADDR_EXP 41
9551: PUSH
9552: LD_EXP 41
9556: PPUSH
9557: LD_VAR 0 6
9561: PPUSH
9562: LD_EXP 41
9566: PUSH
9567: LD_VAR 0 6
9571: ARRAY
9572: PPUSH
9573: LD_INT 3
9575: PPUSH
9576: LD_VAR 0 7
9580: PPUSH
9581: CALL_OW 1
9585: PPUSH
9586: CALL_OW 1
9590: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9591: LD_VAR 0 1
9595: PPUSH
9596: LD_VAR 0 7
9600: PPUSH
9601: CALL_OW 505
// if value <= 0 then
9605: LD_VAR 0 7
9609: PUSH
9610: LD_INT 0
9612: LESSEQUAL
9613: IFFALSE 9662
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9615: LD_EXP 41
9619: PUSH
9620: LD_VAR 0 6
9624: ARRAY
9625: PUSH
9626: LD_INT 1
9628: ARRAY
9629: PPUSH
9630: LD_EXP 41
9634: PUSH
9635: LD_VAR 0 6
9639: ARRAY
9640: PUSH
9641: LD_INT 2
9643: ARRAY
9644: PPUSH
9645: CALL_OW 63
// KillUnit ( building ) ;
9649: LD_VAR 0 1
9653: PPUSH
9654: CALL_OW 66
// exit ;
9658: POP
9659: POP
9660: GO 9666
// end ; end ; end ;
9662: GO 9466
9664: POP
9665: POP
// end ;
9666: LD_VAR 0 5
9670: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9671: LD_INT 0
9673: PPUSH
9674: PPUSH
9675: PPUSH
// if mpGameType <> GameTypeFamine then
9676: LD_EXP 3
9680: PUSH
9681: LD_INT 5
9683: NONEQUAL
9684: IFFALSE 9688
// exit ;
9686: GO 9903
// for i := 1 to mpGlobalSibDeposits do
9688: LD_ADDR_VAR 0 6
9692: PUSH
9693: DOUBLE
9694: LD_INT 1
9696: DEC
9697: ST_TO_ADDR
9698: LD_EXP 42
9702: PUSH
9703: FOR_TO
9704: IFFALSE 9901
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9706: LD_EXP 42
9710: PUSH
9711: LD_VAR 0 6
9715: ARRAY
9716: PUSH
9717: LD_INT 1
9719: ARRAY
9720: PPUSH
9721: LD_EXP 42
9725: PUSH
9726: LD_VAR 0 6
9730: ARRAY
9731: PUSH
9732: LD_INT 2
9734: ARRAY
9735: PPUSH
9736: CALL_OW 428
9740: PUSH
9741: LD_VAR 0 1
9745: EQUAL
9746: IFFALSE 9899
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9748: LD_ADDR_VAR 0 7
9752: PUSH
9753: LD_EXP 42
9757: PUSH
9758: LD_VAR 0 6
9762: ARRAY
9763: PUSH
9764: LD_INT 3
9766: ARRAY
9767: ST_TO_ADDR
// value := value - amount ;
9768: LD_ADDR_VAR 0 7
9772: PUSH
9773: LD_VAR 0 7
9777: PUSH
9778: LD_VAR 0 4
9782: MINUS
9783: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9784: LD_ADDR_EXP 42
9788: PUSH
9789: LD_EXP 42
9793: PPUSH
9794: LD_VAR 0 6
9798: PPUSH
9799: LD_EXP 42
9803: PUSH
9804: LD_VAR 0 6
9808: ARRAY
9809: PPUSH
9810: LD_INT 3
9812: PPUSH
9813: LD_VAR 0 7
9817: PPUSH
9818: CALL_OW 1
9822: PPUSH
9823: CALL_OW 1
9827: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9828: LD_VAR 0 1
9832: PPUSH
9833: LD_VAR 0 7
9837: PPUSH
9838: CALL_OW 505
// if value <= 0 then
9842: LD_VAR 0 7
9846: PUSH
9847: LD_INT 0
9849: LESSEQUAL
9850: IFFALSE 9899
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9852: LD_EXP 42
9856: PUSH
9857: LD_VAR 0 6
9861: ARRAY
9862: PUSH
9863: LD_INT 1
9865: ARRAY
9866: PPUSH
9867: LD_EXP 42
9871: PUSH
9872: LD_VAR 0 6
9876: ARRAY
9877: PUSH
9878: LD_INT 2
9880: ARRAY
9881: PPUSH
9882: CALL_OW 63
// KillUnit ( building ) ;
9886: LD_VAR 0 1
9890: PPUSH
9891: CALL_OW 66
// exit ;
9895: POP
9896: POP
9897: GO 9903
// end ; end ; end ;
9899: GO 9703
9901: POP
9902: POP
// end ;
9903: LD_VAR 0 5
9907: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9908: LD_INT 0
9910: PPUSH
9911: PPUSH
// side := GetSide ( factory ) ;
9912: LD_ADDR_VAR 0 7
9916: PUSH
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 255
9926: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9927: LD_VAR 0 5
9931: PUSH
9932: LD_INT 81
9934: EQUAL
9935: IFFALSE 9973
9937: PUSH
9938: LD_INT 22
9940: PUSH
9941: LD_VAR 0 7
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 34
9952: PUSH
9953: LD_INT 81
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PPUSH
9964: CALL_OW 69
9968: PUSH
9969: LD_INT 0
9971: GREATER
9972: AND
9973: IFFALSE 10006
// begin ComCancel ( factory ) ;
9975: LD_VAR 0 1
9979: PPUSH
9980: CALL_OW 127
// if side = your_side then
9984: LD_VAR 0 7
9988: PUSH
9989: LD_OWVAR 2
9993: EQUAL
9994: IFFALSE 10006
// HintSpec ( VehLimit , 2 ) ;
9996: LD_STRING VehLimit
9998: PPUSH
9999: LD_INT 2
10001: PPUSH
10002: CALL_OW 338
// end ; end ;
10006: LD_VAR 0 6
10010: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10011: LD_INT 0
10013: PPUSH
10014: PPUSH
10015: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10016: LD_VAR 0 1
10020: PPUSH
10021: CALL_OW 264
10025: PUSH
10026: LD_INT 81
10028: EQUAL
10029: IFFALSE 10046
10031: PUSH
10032: LD_VAR 0 1
10036: PPUSH
10037: CALL_OW 263
10041: PUSH
10042: LD_INT 1
10044: EQUAL
10045: AND
10046: IFFALSE 10326
// begin for i := 1 to Count ( minersList ) do
10048: LD_ADDR_VAR 0 6
10052: PUSH
10053: DOUBLE
10054: LD_INT 1
10056: DEC
10057: ST_TO_ADDR
10058: LD_EXP 57
10062: PPUSH
10063: CALL 15013 0 1
10067: PUSH
10068: FOR_TO
10069: IFFALSE 10187
// begin if minersList [ i ] = oldId then
10071: LD_EXP 57
10075: PUSH
10076: LD_VAR 0 6
10080: ARRAY
10081: PUSH
10082: LD_VAR 0 2
10086: EQUAL
10087: IFFALSE 10185
// begin for j := 1 to minerMinesList [ i ] do
10089: LD_ADDR_VAR 0 7
10093: PUSH
10094: DOUBLE
10095: LD_INT 1
10097: DEC
10098: ST_TO_ADDR
10099: LD_EXP 58
10103: PUSH
10104: LD_VAR 0 6
10108: ARRAY
10109: PUSH
10110: FOR_TO
10111: IFFALSE 10161
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10113: LD_EXP 58
10117: PUSH
10118: LD_VAR 0 6
10122: ARRAY
10123: PUSH
10124: LD_VAR 0 7
10128: ARRAY
10129: PUSH
10130: LD_INT 1
10132: ARRAY
10133: PPUSH
10134: LD_EXP 58
10138: PUSH
10139: LD_VAR 0 6
10143: ARRAY
10144: PUSH
10145: LD_VAR 0 7
10149: ARRAY
10150: PUSH
10151: LD_INT 2
10153: ARRAY
10154: PPUSH
10155: CALL_OW 612
10159: GO 10110
10161: POP
10162: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10163: LD_ADDR_EXP 58
10167: PUSH
10168: LD_EXP 58
10172: PPUSH
10173: LD_VAR 0 6
10177: PPUSH
10178: CALL_OW 3
10182: ST_TO_ADDR
// break ;
10183: GO 10187
// end ; end ;
10185: GO 10068
10187: POP
10188: POP
// minersList := minersList diff oldId ;
10189: LD_ADDR_EXP 57
10193: PUSH
10194: LD_EXP 57
10198: PUSH
10199: LD_VAR 0 2
10203: DIFF
10204: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10205: LD_INT 22
10207: PUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: CALL_OW 255
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 34
10224: PUSH
10225: LD_INT 81
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: EMPTY
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: GREATER
10244: IFFALSE 10271
// begin ComExit ( unit ) ;
10246: LD_VAR 0 4
10250: PPUSH
10251: CALL 51377 0 1
// SetSide ( newId , oldSide ) ;
10255: LD_VAR 0 1
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: CALL_OW 235
// exit ;
10269: GO 10326
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10271: LD_ADDR_EXP 57
10275: PUSH
10276: LD_EXP 57
10280: PPUSH
10281: LD_EXP 57
10285: PUSH
10286: LD_INT 1
10288: PLUS
10289: PPUSH
10290: LD_VAR 0 1
10294: PPUSH
10295: CALL_OW 1
10299: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10300: LD_ADDR_EXP 58
10304: PUSH
10305: LD_EXP 58
10309: PPUSH
10310: LD_EXP 58
10314: PUSH
10315: LD_INT 1
10317: PLUS
10318: PPUSH
10319: EMPTY
10320: PPUSH
10321: CALL_OW 1
10325: ST_TO_ADDR
// end ; end ; end_of_file
10326: LD_VAR 0 5
10330: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10331: LD_EXP 39
10335: IFFALSE 10343
10337: PUSH
10338: CALL 10553 0 0
10342: AND
10343: IFFALSE 10351
10345: PUSH
10346: LD_OWVAR 4
10350: AND
10351: IFFALSE 10550
10353: GO 10355
10355: DISABLE
10356: LD_INT 0
10358: PPUSH
10359: PPUSH
// begin canWin := false ;
10360: LD_ADDR_VAR 0 2
10364: PUSH
10365: LD_INT 0
10367: ST_TO_ADDR
// if not HasPower ( your_side ) then
10368: LD_OWVAR 2
10372: PPUSH
10373: CALL 10595 0 1
10377: NOT
10378: IFFALSE 10389
// begin Multiplayer_Loose_Message ;
10380: CALL_OW 521
// enable ( mpLose ) ;
10384: LD_INT 102
10386: ENABLE_MARKED
// end else
10387: GO 10550
// begin canWin := true ;
10389: LD_ADDR_VAR 0 2
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// for i := 1 to 8 do
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: DOUBLE
10403: LD_INT 1
10405: DEC
10406: ST_TO_ADDR
10407: LD_INT 8
10409: PUSH
10410: FOR_TO
10411: IFFALSE 10536
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10413: LD_EXP 7
10417: PUSH
10418: LD_VAR 0 1
10422: ARRAY
10423: IFFALSE 10436
10425: PUSH
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 108
10435: AND
10436: IFFALSE 10450
10438: PUSH
10439: LD_VAR 0 1
10443: PUSH
10444: LD_OWVAR 2
10448: NONEQUAL
10449: AND
10450: IFFALSE 10534
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10452: LD_EXP 8
10456: PUSH
10457: LD_VAR 0 1
10461: ARRAY
10462: NOT
10463: IFTRUE 10511
10465: PUSH
10466: LD_EXP 8
10470: PUSH
10471: LD_VAR 0 1
10475: ARRAY
10476: PUSH
10477: LD_EXP 8
10481: PUSH
10482: LD_OWVAR 2
10486: ARRAY
10487: NONEQUAL
10488: IFFALSE 10510
10490: PUSH
10491: LD_OWVAR 2
10495: PPUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 81
10505: PUSH
10506: LD_INT 1
10508: NONEQUAL
10509: AND
10510: OR
10511: IFFALSE 10534
// if HasPower ( i ) then
10513: LD_VAR 0 1
10517: PPUSH
10518: CALL 10595 0 1
10522: IFFALSE 10534
// begin canWin := false ;
10524: LD_ADDR_VAR 0 2
10528: PUSH
10529: LD_INT 0
10531: ST_TO_ADDR
// break ;
10532: GO 10536
// end ;
10534: GO 10410
10536: POP
10537: POP
// if canWin then
10538: LD_VAR 0 2
10542: IFFALSE 10549
// enable ( mpWin ) else
10544: LD_INT 101
10546: ENABLE_MARKED
10547: GO 10550
// enable ;
10549: ENABLE
// end ; end ;
10550: PPOPN 2
10552: END
// function CanWinLoose ; begin
10553: LD_INT 0
10555: PPUSH
// result := true ;
10556: LD_ADDR_VAR 0 1
10560: PUSH
10561: LD_INT 1
10563: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10564: CALL_OW 531
10568: IFFALSE 10580
10570: PUSH
10571: CALL_OW 519
10575: PUSH
10576: LD_INT 1
10578: GREATER
10579: AND
10580: IFFALSE 10590
// result := false ;
10582: LD_ADDR_VAR 0 1
10586: PUSH
10587: LD_INT 0
10589: ST_TO_ADDR
// end ;
10590: LD_VAR 0 1
10594: RET
// function HasPower ( i ) ; begin
10595: LD_INT 0
10597: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: LD_INT 22
10605: PUSH
10606: LD_VAR 0 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 21
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 33
10630: PUSH
10631: LD_INT 3
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 33
10640: PUSH
10641: LD_INT 5
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 69
10662: ST_TO_ADDR
// end ; end_of_file
10663: LD_VAR 0 2
10667: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10668: LD_EXP 39
10672: IFFALSE 10715
10674: GO 10676
10676: DISABLE
10677: LD_INT 0
10679: PPUSH
// begin for i := 1 to 8 do
10680: LD_ADDR_VAR 0 1
10684: PUSH
10685: DOUBLE
10686: LD_INT 1
10688: DEC
10689: ST_TO_ADDR
10690: LD_INT 8
10692: PUSH
10693: FOR_TO
10694: IFFALSE 10713
// SetRestrict ( b_depot , i , state_disabled ) ;
10696: LD_INT 0
10698: PPUSH
10699: LD_VAR 0 1
10703: PPUSH
10704: LD_INT 0
10706: PPUSH
10707: CALL_OW 324
10711: GO 10693
10713: POP
10714: POP
// end ;
10715: PPOPN 1
10717: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10718: LD_EXP 39
10722: IFFALSE 10730
10724: PUSH
10725: CALL 10940 0 0
10729: AND
10730: IFFALSE 10738
10732: PUSH
10733: LD_OWVAR 4
10737: AND
10738: IFFALSE 10937
10740: GO 10742
10742: DISABLE
10743: LD_INT 0
10745: PPUSH
10746: PPUSH
// begin canWin := false ;
10747: LD_ADDR_VAR 0 2
10751: PUSH
10752: LD_INT 0
10754: ST_TO_ADDR
// if not HasPower ( your_side ) then
10755: LD_OWVAR 2
10759: PPUSH
10760: CALL 10982 0 1
10764: NOT
10765: IFFALSE 10776
// begin Multiplayer_Loose_Message ;
10767: CALL_OW 521
// enable ( mpLose ) ;
10771: LD_INT 102
10773: ENABLE_MARKED
// end else
10774: GO 10937
// begin canWin := true ;
10776: LD_ADDR_VAR 0 2
10780: PUSH
10781: LD_INT 1
10783: ST_TO_ADDR
// for i := 1 to 8 do
10784: LD_ADDR_VAR 0 1
10788: PUSH
10789: DOUBLE
10790: LD_INT 1
10792: DEC
10793: ST_TO_ADDR
10794: LD_INT 8
10796: PUSH
10797: FOR_TO
10798: IFFALSE 10923
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10800: LD_EXP 7
10804: PUSH
10805: LD_VAR 0 1
10809: ARRAY
10810: IFFALSE 10823
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 108
10822: AND
10823: IFFALSE 10837
10825: PUSH
10826: LD_VAR 0 1
10830: PUSH
10831: LD_OWVAR 2
10835: NONEQUAL
10836: AND
10837: IFFALSE 10921
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10839: LD_EXP 8
10843: PUSH
10844: LD_VAR 0 1
10848: ARRAY
10849: NOT
10850: IFTRUE 10898
10852: PUSH
10853: LD_EXP 8
10857: PUSH
10858: LD_VAR 0 1
10862: ARRAY
10863: PUSH
10864: LD_EXP 8
10868: PUSH
10869: LD_OWVAR 2
10873: ARRAY
10874: NONEQUAL
10875: IFFALSE 10897
10877: PUSH
10878: LD_OWVAR 2
10882: PPUSH
10883: LD_VAR 0 1
10887: PPUSH
10888: CALL_OW 81
10892: PUSH
10893: LD_INT 1
10895: NONEQUAL
10896: AND
10897: OR
10898: IFFALSE 10921
// if HasPower ( i ) then
10900: LD_VAR 0 1
10904: PPUSH
10905: CALL 10982 0 1
10909: IFFALSE 10921
// begin canWin := false ;
10911: LD_ADDR_VAR 0 2
10915: PUSH
10916: LD_INT 0
10918: ST_TO_ADDR
// break ;
10919: GO 10923
// end ;
10921: GO 10797
10923: POP
10924: POP
// if canWin then
10925: LD_VAR 0 2
10929: IFFALSE 10936
// enable ( mpWin ) else
10931: LD_INT 101
10933: ENABLE_MARKED
10934: GO 10937
// enable ;
10936: ENABLE
// end ; end ;
10937: PPOPN 2
10939: END
// function CanWinLoose ; begin
10940: LD_INT 0
10942: PPUSH
// result := true ;
10943: LD_ADDR_VAR 0 1
10947: PUSH
10948: LD_INT 1
10950: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10951: CALL_OW 531
10955: IFFALSE 10967
10957: PUSH
10958: CALL_OW 519
10962: PUSH
10963: LD_INT 1
10965: GREATER
10966: AND
10967: IFFALSE 10977
// result := false ;
10969: LD_ADDR_VAR 0 1
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// end ;
10977: LD_VAR 0 1
10981: RET
// function HasPower ( i ) ; begin
10982: LD_INT 0
10984: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10985: LD_INT 22
10987: PUSH
10988: LD_VAR 0 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: LD_INT 30
11002: PUSH
11003: LD_INT 0
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 30
11012: PUSH
11013: LD_INT 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: NOT
11034: IFFALSE 11038
// exit ;
11036: GO 11103
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11038: LD_ADDR_VAR 0 2
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_VAR 0 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 2
11057: PUSH
11058: LD_INT 21
11060: PUSH
11061: LD_INT 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 33
11070: PUSH
11071: LD_INT 3
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 33
11080: PUSH
11081: LD_INT 5
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 69
11102: ST_TO_ADDR
// end ; end_of_file
11103: LD_VAR 0 2
11107: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
11108: LD_EXP 39
11112: IFFALSE 11453
11114: GO 11116
11116: DISABLE
11117: LD_INT 0
11119: PPUSH
11120: PPUSH
11121: PPUSH
// begin mpKingPoints := [ ] ;
11122: LD_ADDR_EXP 49
11126: PUSH
11127: EMPTY
11128: ST_TO_ADDR
// if mpTeamGame then
11129: LD_EXP 11
11133: IFFALSE 11187
// begin for i := 1 to Count ( mpTeams ) do
11135: LD_ADDR_VAR 0 1
11139: PUSH
11140: DOUBLE
11141: LD_INT 1
11143: DEC
11144: ST_TO_ADDR
11145: LD_EXP 10
11149: PPUSH
11150: CALL 15013 0 1
11154: PUSH
11155: FOR_TO
11156: IFFALSE 11183
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11158: LD_ADDR_EXP 49
11162: PUSH
11163: LD_EXP 49
11167: PPUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: LD_INT 0
11175: PPUSH
11176: CALL_OW 1
11180: ST_TO_ADDR
11181: GO 11155
11183: POP
11184: POP
// end else
11185: GO 11230
// begin for i := 1 to 8 do
11187: LD_ADDR_VAR 0 1
11191: PUSH
11192: DOUBLE
11193: LD_INT 1
11195: DEC
11196: ST_TO_ADDR
11197: LD_INT 8
11199: PUSH
11200: FOR_TO
11201: IFFALSE 11228
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
11203: LD_ADDR_EXP 49
11207: PUSH
11208: LD_EXP 49
11212: PPUSH
11213: LD_VAR 0 1
11217: PPUSH
11218: LD_INT 0
11220: PPUSH
11221: CALL_OW 1
11225: ST_TO_ADDR
11226: GO 11200
11228: POP
11229: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: LD_EXP 2
11239: PPUSH
11240: LD_INT 0
11242: PPUSH
11243: CALL_OW 517
11247: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11248: LD_ADDR_VAR 0 1
11252: PUSH
11253: DOUBLE
11254: LD_INT 1
11256: DEC
11257: ST_TO_ADDR
11258: LD_VAR 0 3
11262: PUSH
11263: LD_INT 1
11265: ARRAY
11266: PUSH
11267: FOR_TO
11268: IFFALSE 11335
// for j := 1 to 8 do
11270: LD_ADDR_VAR 0 2
11274: PUSH
11275: DOUBLE
11276: LD_INT 1
11278: DEC
11279: ST_TO_ADDR
11280: LD_INT 8
11282: PUSH
11283: FOR_TO
11284: IFFALSE 11331
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
11286: LD_VAR 0 3
11290: PUSH
11291: LD_INT 1
11293: ARRAY
11294: PUSH
11295: LD_VAR 0 1
11299: ARRAY
11300: PPUSH
11301: LD_VAR 0 3
11305: PUSH
11306: LD_INT 2
11308: ARRAY
11309: PUSH
11310: LD_VAR 0 1
11314: ARRAY
11315: PPUSH
11316: LD_VAR 0 2
11320: PPUSH
11321: LD_INT 12
11323: NEG
11324: PPUSH
11325: CALL_OW 330
11329: GO 11283
11331: POP
11332: POP
11333: GO 11267
11335: POP
11336: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
11337: LD_EXP 34
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 424
// UpdateCounter ;
11349: CALL 11959 0 0
// repeat wait ( 0 0$1 ) ;
11353: LD_INT 35
11355: PPUSH
11356: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11360: LD_ADDR_VAR 0 3
11364: PUSH
11365: LD_EXP 34
11369: PPUSH
11370: LD_INT 3
11372: PUSH
11373: LD_INT 57
11375: PUSH
11376: EMPTY
11377: LIST
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 50
11385: PUSH
11386: EMPTY
11387: LIST
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 30
11394: PUSH
11395: LD_INT 0
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 70
11426: ST_TO_ADDR
// if not tmp then
11427: LD_VAR 0 3
11431: NOT
11432: IFFALSE 11436
// continue ;
11434: GO 11353
// AddPoints ( tmp ) ;
11436: LD_VAR 0 3
11440: PPUSH
11441: CALL 11637 0 1
// UpdateCounter ;
11445: CALL 11959 0 0
// until false ;
11449: LD_INT 0
11451: IFFALSE 11353
// end ;
11453: PPOPN 3
11455: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
11456: LD_EXP 39
11460: IFFALSE 11468
11462: PUSH
11463: LD_EXP 37
11467: AND
11468: IFFALSE 11634
11470: GO 11472
11472: DISABLE
11473: LD_INT 0
11475: PPUSH
11476: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
11477: LD_ADDR_VAR 0 2
11481: PUSH
11482: LD_EXP 2
11486: PPUSH
11487: LD_INT 0
11489: PPUSH
11490: CALL_OW 517
11494: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: DOUBLE
11501: LD_INT 1
11503: DEC
11504: ST_TO_ADDR
11505: LD_VAR 0 2
11509: PUSH
11510: LD_INT 1
11512: ARRAY
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11556
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
11517: LD_VAR 0 2
11521: PUSH
11522: LD_INT 1
11524: ARRAY
11525: PUSH
11526: LD_VAR 0 1
11530: ARRAY
11531: PPUSH
11532: LD_VAR 0 2
11536: PUSH
11537: LD_INT 2
11539: ARRAY
11540: PUSH
11541: LD_VAR 0 1
11545: ARRAY
11546: PPUSH
11547: LD_INT 125
11549: PPUSH
11550: CALL_OW 495
11554: GO 11514
11556: POP
11557: POP
// repeat wait ( mpEmissions ) ;
11558: LD_EXP 37
11562: PPUSH
11563: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
11567: LD_ADDR_VAR 0 1
11571: PUSH
11572: DOUBLE
11573: LD_INT 1
11575: DEC
11576: ST_TO_ADDR
11577: LD_VAR 0 2
11581: PUSH
11582: LD_INT 1
11584: ARRAY
11585: PUSH
11586: FOR_TO
11587: IFFALSE 11628
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
11589: LD_VAR 0 2
11593: PUSH
11594: LD_INT 1
11596: ARRAY
11597: PUSH
11598: LD_VAR 0 1
11602: ARRAY
11603: PPUSH
11604: LD_VAR 0 2
11608: PUSH
11609: LD_INT 2
11611: ARRAY
11612: PUSH
11613: LD_VAR 0 1
11617: ARRAY
11618: PPUSH
11619: LD_INT 15
11621: PPUSH
11622: CALL_OW 495
11626: GO 11586
11628: POP
11629: POP
// until false ;
11630: LD_INT 0
11632: IFFALSE 11558
// end ;
11634: PPOPN 2
11636: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
11637: LD_INT 0
11639: PPUSH
11640: PPUSH
11641: PPUSH
11642: PPUSH
11643: PPUSH
// if mpTeamGame then
11644: LD_EXP 11
11648: IFFALSE 11845
// begin first := depots [ 1 ] ;
11650: LD_ADDR_VAR 0 4
11654: PUSH
11655: LD_VAR 0 1
11659: PUSH
11660: LD_INT 1
11662: ARRAY
11663: ST_TO_ADDR
// side := GetSide ( first ) ;
11664: LD_ADDR_VAR 0 6
11668: PUSH
11669: LD_VAR 0 4
11673: PPUSH
11674: CALL_OW 255
11678: ST_TO_ADDR
// for i := 1 to mpTeams do
11679: LD_ADDR_VAR 0 3
11683: PUSH
11684: DOUBLE
11685: LD_INT 1
11687: DEC
11688: ST_TO_ADDR
11689: LD_EXP 10
11693: PUSH
11694: FOR_TO
11695: IFFALSE 11729
// if side in mpTeams [ i ] then
11697: LD_VAR 0 6
11701: PUSH
11702: LD_EXP 10
11706: PUSH
11707: LD_VAR 0 3
11711: ARRAY
11712: IN
11713: IFFALSE 11727
// begin team := i ;
11715: LD_ADDR_VAR 0 5
11719: PUSH
11720: LD_VAR 0 3
11724: ST_TO_ADDR
// break ;
11725: GO 11729
// end ;
11727: GO 11694
11729: POP
11730: POP
// if not team then
11731: LD_VAR 0 5
11735: NOT
11736: IFFALSE 11740
// exit ;
11738: GO 11954
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11740: LD_EXP 34
11744: PPUSH
11745: LD_INT 81
11747: PUSH
11748: LD_VAR 0 6
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 70
11761: IFFALSE 11765
// exit ;
11763: GO 11954
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
11765: LD_ADDR_EXP 49
11769: PUSH
11770: LD_EXP 49
11774: PPUSH
11775: LD_VAR 0 5
11779: PPUSH
11780: LD_EXP 49
11784: PUSH
11785: LD_VAR 0 5
11789: ARRAY
11790: PUSH
11791: LD_INT 1
11793: PLUS
11794: PPUSH
11795: CALL_OW 1
11799: ST_TO_ADDR
// for i in mpTeams [ team ] do
11800: LD_ADDR_VAR 0 3
11804: PUSH
11805: LD_EXP 10
11809: PUSH
11810: LD_VAR 0 5
11814: ARRAY
11815: PUSH
11816: FOR_IN
11817: IFFALSE 11841
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_EXP 49
11828: PUSH
11829: LD_VAR 0 5
11833: ARRAY
11834: PPUSH
11835: CALL_OW 506
11839: GO 11816
11841: POP
11842: POP
// end else
11843: GO 11954
// begin first := depots [ 1 ] ;
11845: LD_ADDR_VAR 0 4
11849: PUSH
11850: LD_VAR 0 1
11854: PUSH
11855: LD_INT 1
11857: ARRAY
11858: ST_TO_ADDR
// side := GetSide ( first ) ;
11859: LD_ADDR_VAR 0 6
11863: PUSH
11864: LD_VAR 0 4
11868: PPUSH
11869: CALL_OW 255
11873: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
11874: LD_EXP 34
11878: PPUSH
11879: LD_INT 81
11881: PUSH
11882: LD_VAR 0 6
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PPUSH
11891: CALL_OW 70
11895: IFFALSE 11899
// exit ;
11897: GO 11954
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
11899: LD_ADDR_EXP 49
11903: PUSH
11904: LD_EXP 49
11908: PPUSH
11909: LD_VAR 0 6
11913: PPUSH
11914: LD_EXP 49
11918: PUSH
11919: LD_VAR 0 6
11923: ARRAY
11924: PUSH
11925: LD_INT 1
11927: PLUS
11928: PPUSH
11929: CALL_OW 1
11933: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
11934: LD_VAR 0 6
11938: PPUSH
11939: LD_EXP 49
11943: PUSH
11944: LD_VAR 0 6
11948: ARRAY
11949: PPUSH
11950: CALL_OW 506
// end ; end ;
11954: LD_VAR 0 2
11958: RET
// function UpdateCounter ; var i ; begin
11959: LD_INT 0
11961: PPUSH
11962: PPUSH
// result := [ ] ;
11963: LD_ADDR_VAR 0 1
11967: PUSH
11968: EMPTY
11969: ST_TO_ADDR
// if mpTeamGame then
11970: LD_EXP 11
11974: IFFALSE 12041
// begin for i := 1 to mpTeams do
11976: LD_ADDR_VAR 0 2
11980: PUSH
11981: DOUBLE
11982: LD_INT 1
11984: DEC
11985: ST_TO_ADDR
11986: LD_EXP 10
11990: PUSH
11991: FOR_TO
11992: IFFALSE 12037
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
11994: LD_ADDR_VAR 0 1
11998: PUSH
11999: LD_VAR 0 1
12003: PUSH
12004: LD_STRING #KingoftheHill-Team
12006: PUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_EXP 49
12016: PUSH
12017: LD_VAR 0 2
12021: ARRAY
12022: PUSH
12023: LD_EXP 35
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: ADD
12034: ST_TO_ADDR
12035: GO 11991
12037: POP
12038: POP
// end else
12039: GO 12114
// begin for i := 1 to 8 do
12041: LD_ADDR_VAR 0 2
12045: PUSH
12046: DOUBLE
12047: LD_INT 1
12049: DEC
12050: ST_TO_ADDR
12051: LD_INT 8
12053: PUSH
12054: FOR_TO
12055: IFFALSE 12112
// if mpSidePositions [ i ] then
12057: LD_EXP 7
12061: PUSH
12062: LD_VAR 0 2
12066: ARRAY
12067: IFFALSE 12110
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
12069: LD_ADDR_VAR 0 1
12073: PUSH
12074: LD_VAR 0 1
12078: PUSH
12079: LD_STRING #KingoftheHill-Player
12081: PUSH
12082: LD_VAR 0 2
12086: PUSH
12087: LD_EXP 49
12091: PUSH
12092: LD_VAR 0 2
12096: ARRAY
12097: PUSH
12098: LD_EXP 35
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: ADD
12109: ST_TO_ADDR
12110: GO 12054
12112: POP
12113: POP
// end ; mpDisplayStrings := result ;
12114: LD_ADDR_EXP 38
12118: PUSH
12119: LD_VAR 0 1
12123: ST_TO_ADDR
// end ;
12124: LD_VAR 0 1
12128: RET
// export function HowMuchPointsKing ( side ) ; begin
12129: LD_INT 0
12131: PPUSH
// result := HowMuchPoints ( side ) ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_VAR 0 1
12141: PPUSH
12142: CALL 12152 0 1
12146: ST_TO_ADDR
// end ;
12147: LD_VAR 0 2
12151: RET
// function HowMuchPoints ( side ) ; var i ; begin
12152: LD_INT 0
12154: PPUSH
12155: PPUSH
// if mpTeamGame then
12156: LD_EXP 11
12160: IFFALSE 12229
// begin for i := 1 to Count ( mpTeams ) do
12162: LD_ADDR_VAR 0 3
12166: PUSH
12167: DOUBLE
12168: LD_INT 1
12170: DEC
12171: ST_TO_ADDR
12172: LD_EXP 10
12176: PPUSH
12177: CALL 15013 0 1
12181: PUSH
12182: FOR_TO
12183: IFFALSE 12225
// begin if side in mpTeams [ i ] then
12185: LD_VAR 0 1
12189: PUSH
12190: LD_EXP 10
12194: PUSH
12195: LD_VAR 0 3
12199: ARRAY
12200: IN
12201: IFFALSE 12223
// begin result := mpKingPoints [ i ] ;
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: LD_EXP 49
12212: PUSH
12213: LD_VAR 0 3
12217: ARRAY
12218: ST_TO_ADDR
// exit ;
12219: POP
12220: POP
12221: GO 12245
// end ; end ;
12223: GO 12182
12225: POP
12226: POP
// end else
12227: GO 12245
// result := mpKingPoints [ side ] ;
12229: LD_ADDR_VAR 0 2
12233: PUSH
12234: LD_EXP 49
12238: PUSH
12239: LD_VAR 0 1
12243: ARRAY
12244: ST_TO_ADDR
// end ;
12245: LD_VAR 0 2
12249: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
12250: LD_EXP 39
12254: IFFALSE 12262
12256: PUSH
12257: CALL 12674 0 0
12261: AND
12262: IFFALSE 12270
12264: PUSH
12265: LD_OWVAR 4
12269: AND
12270: IFFALSE 12523
12272: GO 12274
12274: DISABLE
12275: LD_INT 0
12277: PPUSH
12278: PPUSH
// begin canWin := false ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// if not HasPower ( your_side ) then
12287: LD_OWVAR 2
12291: PPUSH
12292: CALL 12716 0 1
12296: NOT
12297: IFFALSE 12308
// begin Multiplayer_Loose_Message ;
12299: CALL_OW 521
// enable ( mpLose ) ;
12303: LD_INT 102
12305: ENABLE_MARKED
// end else
12306: GO 12523
// begin if not EnemiesInGame then
12308: CALL 12526 0 0
12312: NOT
12313: IFFALSE 12320
// begin enable ( mpWin ) ;
12315: LD_INT 101
12317: ENABLE_MARKED
// exit ;
12318: GO 12523
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
12320: LD_ADDR_VAR 0 2
12324: PUSH
12325: LD_OWVAR 2
12329: PPUSH
12330: CALL 12152 0 1
12334: PUSH
12335: LD_EXP 35
12339: GREATEREQUAL
12340: IFFALSE 12353
12342: PUSH
12343: LD_OWVAR 2
12347: PPUSH
12348: CALL 12716 0 1
12352: AND
12353: ST_TO_ADDR
// for i := 1 to 8 do
12354: LD_ADDR_VAR 0 1
12358: PUSH
12359: DOUBLE
12360: LD_INT 1
12362: DEC
12363: ST_TO_ADDR
12364: LD_INT 8
12366: PUSH
12367: FOR_TO
12368: IFFALSE 12509
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12370: LD_EXP 7
12374: PUSH
12375: LD_VAR 0 1
12379: ARRAY
12380: IFFALSE 12393
12382: PUSH
12383: LD_VAR 0 1
12387: PPUSH
12388: CALL_OW 108
12392: AND
12393: IFFALSE 12407
12395: PUSH
12396: LD_VAR 0 1
12400: PUSH
12401: LD_OWVAR 2
12405: NONEQUAL
12406: AND
12407: IFFALSE 12507
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12409: LD_EXP 8
12413: PUSH
12414: LD_VAR 0 1
12418: ARRAY
12419: NOT
12420: IFTRUE 12468
12422: PUSH
12423: LD_EXP 8
12427: PUSH
12428: LD_VAR 0 1
12432: ARRAY
12433: PUSH
12434: LD_EXP 8
12438: PUSH
12439: LD_OWVAR 2
12443: ARRAY
12444: NONEQUAL
12445: IFFALSE 12467
12447: PUSH
12448: LD_OWVAR 2
12452: PPUSH
12453: LD_VAR 0 1
12457: PPUSH
12458: CALL_OW 81
12462: PUSH
12463: LD_INT 1
12465: NONEQUAL
12466: AND
12467: OR
12468: IFFALSE 12507
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
12470: LD_VAR 0 1
12474: PPUSH
12475: CALL 12152 0 1
12479: PUSH
12480: LD_EXP 35
12484: GREATEREQUAL
12485: IFFALSE 12498
12487: PUSH
12488: LD_VAR 0 1
12492: PPUSH
12493: CALL 12716 0 1
12497: AND
12498: IFFALSE 12507
// begin enable ( mpLose ) ;
12500: LD_INT 102
12502: ENABLE_MARKED
// exit ;
12503: POP
12504: POP
12505: GO 12523
// end ;
12507: GO 12367
12509: POP
12510: POP
// if canWin then
12511: LD_VAR 0 2
12515: IFFALSE 12522
// enable ( mpWin ) else
12517: LD_INT 101
12519: ENABLE_MARKED
12520: GO 12523
// enable ;
12522: ENABLE
// end ; end ;
12523: PPOPN 2
12525: END
// function EnemiesInGame ; var i ; begin
12526: LD_INT 0
12528: PPUSH
12529: PPUSH
// result := false ;
12530: LD_ADDR_VAR 0 1
12534: PUSH
12535: LD_INT 0
12537: ST_TO_ADDR
// for i := 1 to 8 do
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: DOUBLE
12544: LD_INT 1
12546: DEC
12547: ST_TO_ADDR
12548: LD_INT 8
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12667
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
12554: LD_VAR 0 2
12558: PUSH
12559: LD_OWVAR 2
12563: NONEQUAL
12564: IFFALSE 12577
12566: PUSH
12567: LD_VAR 0 2
12571: PPUSH
12572: CALL 12716 0 1
12576: AND
12577: IFFALSE 12590
12579: PUSH
12580: LD_VAR 0 2
12584: PPUSH
12585: CALL_OW 108
12589: AND
12590: IFFALSE 12665
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12592: LD_EXP 8
12596: PUSH
12597: LD_VAR 0 2
12601: ARRAY
12602: NOT
12603: IFTRUE 12651
12605: PUSH
12606: LD_EXP 8
12610: PUSH
12611: LD_VAR 0 2
12615: ARRAY
12616: PUSH
12617: LD_EXP 8
12621: PUSH
12622: LD_OWVAR 2
12626: ARRAY
12627: NONEQUAL
12628: IFFALSE 12650
12630: PUSH
12631: LD_OWVAR 2
12635: PPUSH
12636: LD_VAR 0 2
12640: PPUSH
12641: CALL_OW 81
12645: PUSH
12646: LD_INT 1
12648: NONEQUAL
12649: AND
12650: OR
12651: IFFALSE 12665
// begin result := true ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 1
12660: ST_TO_ADDR
// exit ;
12661: POP
12662: POP
12663: GO 12669
// end ;
12665: GO 12551
12667: POP
12668: POP
// end ;
12669: LD_VAR 0 1
12673: RET
// function CanWinLoose ; begin
12674: LD_INT 0
12676: PPUSH
// result := true ;
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12685: CALL_OW 531
12689: IFFALSE 12701
12691: PUSH
12692: CALL_OW 519
12696: PUSH
12697: LD_INT 1
12699: GREATER
12700: AND
12701: IFFALSE 12711
// result := false ;
12703: LD_ADDR_VAR 0 1
12707: PUSH
12708: LD_INT 0
12710: ST_TO_ADDR
// end ;
12711: LD_VAR 0 1
12715: RET
// function HasPower ( i ) ; begin
12716: LD_INT 0
12718: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: LD_INT 22
12726: PUSH
12727: LD_VAR 0 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: LD_INT 21
12741: PUSH
12742: LD_INT 1
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 33
12751: PUSH
12752: LD_INT 3
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 33
12761: PUSH
12762: LD_INT 5
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PPUSH
12779: CALL_OW 69
12783: ST_TO_ADDR
// end ; end_of_file
12784: LD_VAR 0 2
12788: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
// if exist_mode then
12793: LD_VAR 0 2
12797: IFFALSE 12843
// begin unit := CreateCharacter ( prefix & ident ) ;
12799: LD_ADDR_VAR 0 5
12803: PUSH
12804: LD_VAR 0 3
12808: PUSH
12809: LD_VAR 0 1
12813: STR
12814: PPUSH
12815: CALL_OW 34
12819: ST_TO_ADDR
// if unit then
12820: LD_VAR 0 5
12824: IFFALSE 12841
// DeleteCharacters ( prefix & ident ) ;
12826: LD_VAR 0 3
12830: PUSH
12831: LD_VAR 0 1
12835: STR
12836: PPUSH
12837: CALL_OW 40
// end else
12841: GO 12858
// unit := NewCharacter ( ident ) ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: CALL_OW 25
12857: ST_TO_ADDR
// result := unit ;
12858: LD_ADDR_VAR 0 4
12862: PUSH
12863: LD_VAR 0 5
12867: ST_TO_ADDR
// end ;
12868: LD_VAR 0 4
12872: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
12873: LD_INT 0
12875: PPUSH
12876: PPUSH
// if exist_mode then
12877: LD_VAR 0 2
12881: IFFALSE 12906
// unit := CreateCharacter ( prefix & ident ) else
12883: LD_ADDR_VAR 0 5
12887: PUSH
12888: LD_VAR 0 3
12892: PUSH
12893: LD_VAR 0 1
12897: STR
12898: PPUSH
12899: CALL_OW 34
12903: ST_TO_ADDR
12904: GO 12921
// unit := NewCharacter ( ident ) ;
12906: LD_ADDR_VAR 0 5
12910: PUSH
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 25
12920: ST_TO_ADDR
// result := unit ;
12921: LD_ADDR_VAR 0 4
12925: PUSH
12926: LD_VAR 0 5
12930: ST_TO_ADDR
// end ;
12931: LD_VAR 0 4
12935: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12936: LD_INT 0
12938: PPUSH
12939: PPUSH
// if not side or not nation then
12940: LD_VAR 0 1
12944: NOT
12945: IFTRUE 12954
12947: PUSH
12948: LD_VAR 0 2
12952: NOT
12953: OR
12954: IFFALSE 12958
// exit ;
12956: GO 13752
// case nation of nation_american :
12958: LD_VAR 0 2
12962: PUSH
12963: LD_INT 1
12965: DOUBLE
12966: EQUAL
12967: IFTRUE 12971
12969: GO 13193
12971: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
12972: LD_ADDR_VAR 0 4
12976: PUSH
12977: LD_INT 35
12979: PUSH
12980: LD_INT 45
12982: PUSH
12983: LD_INT 46
12985: PUSH
12986: LD_INT 47
12988: PUSH
12989: LD_INT 82
12991: PUSH
12992: LD_INT 83
12994: PUSH
12995: LD_INT 84
12997: PUSH
12998: LD_INT 85
13000: PUSH
13001: LD_INT 86
13003: PUSH
13004: LD_INT 1
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: LD_INT 6
13012: PUSH
13013: LD_INT 15
13015: PUSH
13016: LD_INT 16
13018: PUSH
13019: LD_INT 7
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: LD_INT 13
13027: PUSH
13028: LD_INT 10
13030: PUSH
13031: LD_INT 14
13033: PUSH
13034: LD_INT 20
13036: PUSH
13037: LD_INT 21
13039: PUSH
13040: LD_INT 22
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 32
13048: PUSH
13049: LD_INT 27
13051: PUSH
13052: LD_INT 36
13054: PUSH
13055: LD_INT 69
13057: PUSH
13058: LD_INT 39
13060: PUSH
13061: LD_INT 34
13063: PUSH
13064: LD_INT 40
13066: PUSH
13067: LD_INT 48
13069: PUSH
13070: LD_INT 49
13072: PUSH
13073: LD_INT 50
13075: PUSH
13076: LD_INT 51
13078: PUSH
13079: LD_INT 52
13081: PUSH
13082: LD_INT 53
13084: PUSH
13085: LD_INT 54
13087: PUSH
13088: LD_INT 55
13090: PUSH
13091: LD_INT 56
13093: PUSH
13094: LD_INT 57
13096: PUSH
13097: LD_INT 58
13099: PUSH
13100: LD_INT 59
13102: PUSH
13103: LD_INT 60
13105: PUSH
13106: LD_INT 61
13108: PUSH
13109: LD_INT 62
13111: PUSH
13112: LD_INT 80
13114: PUSH
13115: LD_INT 82
13117: PUSH
13118: LD_INT 83
13120: PUSH
13121: LD_INT 84
13123: PUSH
13124: LD_INT 85
13126: PUSH
13127: LD_INT 86
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 93
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: ST_TO_ADDR
13191: GO 13674
13193: LD_INT 2
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13435
13201: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
13202: LD_ADDR_VAR 0 4
13206: PUSH
13207: LD_INT 35
13209: PUSH
13210: LD_INT 45
13212: PUSH
13213: LD_INT 46
13215: PUSH
13216: LD_INT 47
13218: PUSH
13219: LD_INT 82
13221: PUSH
13222: LD_INT 83
13224: PUSH
13225: LD_INT 84
13227: PUSH
13228: LD_INT 85
13230: PUSH
13231: LD_INT 87
13233: PUSH
13234: LD_INT 70
13236: PUSH
13237: LD_INT 1
13239: PUSH
13240: LD_INT 11
13242: PUSH
13243: LD_INT 3
13245: PUSH
13246: LD_INT 4
13248: PUSH
13249: LD_INT 5
13251: PUSH
13252: LD_INT 6
13254: PUSH
13255: LD_INT 15
13257: PUSH
13258: LD_INT 18
13260: PUSH
13261: LD_INT 7
13263: PUSH
13264: LD_INT 17
13266: PUSH
13267: LD_INT 8
13269: PUSH
13270: LD_INT 20
13272: PUSH
13273: LD_INT 21
13275: PUSH
13276: LD_INT 22
13278: PUSH
13279: LD_INT 72
13281: PUSH
13282: LD_INT 26
13284: PUSH
13285: LD_INT 69
13287: PUSH
13288: LD_INT 39
13290: PUSH
13291: LD_INT 40
13293: PUSH
13294: LD_INT 41
13296: PUSH
13297: LD_INT 42
13299: PUSH
13300: LD_INT 43
13302: PUSH
13303: LD_INT 48
13305: PUSH
13306: LD_INT 49
13308: PUSH
13309: LD_INT 50
13311: PUSH
13312: LD_INT 51
13314: PUSH
13315: LD_INT 52
13317: PUSH
13318: LD_INT 53
13320: PUSH
13321: LD_INT 54
13323: PUSH
13324: LD_INT 55
13326: PUSH
13327: LD_INT 56
13329: PUSH
13330: LD_INT 60
13332: PUSH
13333: LD_INT 61
13335: PUSH
13336: LD_INT 62
13338: PUSH
13339: LD_INT 66
13341: PUSH
13342: LD_INT 67
13344: PUSH
13345: LD_INT 68
13347: PUSH
13348: LD_INT 81
13350: PUSH
13351: LD_INT 82
13353: PUSH
13354: LD_INT 83
13356: PUSH
13357: LD_INT 84
13359: PUSH
13360: LD_INT 85
13362: PUSH
13363: LD_INT 87
13365: PUSH
13366: LD_INT 88
13368: PUSH
13369: LD_INT 92
13371: PUSH
13372: LD_INT 94
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: ST_TO_ADDR
13433: GO 13674
13435: LD_INT 3
13437: DOUBLE
13438: EQUAL
13439: IFTRUE 13443
13441: GO 13673
13443: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
13444: LD_ADDR_VAR 0 4
13448: PUSH
13449: LD_INT 46
13451: PUSH
13452: LD_INT 47
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: LD_INT 82
13463: PUSH
13464: LD_INT 83
13466: PUSH
13467: LD_INT 84
13469: PUSH
13470: LD_INT 85
13472: PUSH
13473: LD_INT 86
13475: PUSH
13476: LD_INT 11
13478: PUSH
13479: LD_INT 9
13481: PUSH
13482: LD_INT 20
13484: PUSH
13485: LD_INT 19
13487: PUSH
13488: LD_INT 21
13490: PUSH
13491: LD_INT 24
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_INT 25
13499: PUSH
13500: LD_INT 28
13502: PUSH
13503: LD_INT 29
13505: PUSH
13506: LD_INT 30
13508: PUSH
13509: LD_INT 31
13511: PUSH
13512: LD_INT 37
13514: PUSH
13515: LD_INT 38
13517: PUSH
13518: LD_INT 32
13520: PUSH
13521: LD_INT 27
13523: PUSH
13524: LD_INT 33
13526: PUSH
13527: LD_INT 69
13529: PUSH
13530: LD_INT 39
13532: PUSH
13533: LD_INT 34
13535: PUSH
13536: LD_INT 40
13538: PUSH
13539: LD_INT 71
13541: PUSH
13542: LD_INT 23
13544: PUSH
13545: LD_INT 44
13547: PUSH
13548: LD_INT 48
13550: PUSH
13551: LD_INT 49
13553: PUSH
13554: LD_INT 50
13556: PUSH
13557: LD_INT 51
13559: PUSH
13560: LD_INT 52
13562: PUSH
13563: LD_INT 53
13565: PUSH
13566: LD_INT 54
13568: PUSH
13569: LD_INT 55
13571: PUSH
13572: LD_INT 56
13574: PUSH
13575: LD_INT 57
13577: PUSH
13578: LD_INT 58
13580: PUSH
13581: LD_INT 59
13583: PUSH
13584: LD_INT 63
13586: PUSH
13587: LD_INT 64
13589: PUSH
13590: LD_INT 65
13592: PUSH
13593: LD_INT 82
13595: PUSH
13596: LD_INT 83
13598: PUSH
13599: LD_INT 84
13601: PUSH
13602: LD_INT 85
13604: PUSH
13605: LD_INT 86
13607: PUSH
13608: LD_INT 89
13610: PUSH
13611: LD_INT 91
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: ST_TO_ADDR
13671: GO 13674
13673: POP
// if state > - 1 and state < 3 then
13674: LD_VAR 0 3
13678: PUSH
13679: LD_INT 1
13681: NEG
13682: GREATER
13683: IFFALSE 13695
13685: PUSH
13686: LD_VAR 0 3
13690: PUSH
13691: LD_INT 3
13693: LESS
13694: AND
13695: IFFALSE 13752
// for i in result do
13697: LD_ADDR_VAR 0 5
13701: PUSH
13702: LD_VAR 0 4
13706: PUSH
13707: FOR_IN
13708: IFFALSE 13750
// if GetTech ( i , side ) <> state then
13710: LD_VAR 0 5
13714: PPUSH
13715: LD_VAR 0 1
13719: PPUSH
13720: CALL_OW 321
13724: PUSH
13725: LD_VAR 0 3
13729: NONEQUAL
13730: IFFALSE 13748
// result := result diff i ;
13732: LD_ADDR_VAR 0 4
13736: PUSH
13737: LD_VAR 0 4
13741: PUSH
13742: LD_VAR 0 5
13746: DIFF
13747: ST_TO_ADDR
13748: GO 13707
13750: POP
13751: POP
// end ;
13752: LD_VAR 0 4
13756: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13757: LD_INT 0
13759: PPUSH
13760: PPUSH
13761: PPUSH
// result := true ;
13762: LD_ADDR_VAR 0 3
13766: PUSH
13767: LD_INT 1
13769: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13770: LD_ADDR_VAR 0 5
13774: PUSH
13775: LD_VAR 0 2
13779: PPUSH
13780: CALL_OW 480
13784: ST_TO_ADDR
// if not tmp then
13785: LD_VAR 0 5
13789: NOT
13790: IFFALSE 13794
// exit ;
13792: GO 13843
// for i in tmp do
13794: LD_ADDR_VAR 0 4
13798: PUSH
13799: LD_VAR 0 5
13803: PUSH
13804: FOR_IN
13805: IFFALSE 13841
// if GetTech ( i , side ) <> state_researched then
13807: LD_VAR 0 4
13811: PPUSH
13812: LD_VAR 0 1
13816: PPUSH
13817: CALL_OW 321
13821: PUSH
13822: LD_INT 2
13824: NONEQUAL
13825: IFFALSE 13839
// begin result := false ;
13827: LD_ADDR_VAR 0 3
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// exit ;
13835: POP
13836: POP
13837: GO 13843
// end ;
13839: GO 13804
13841: POP
13842: POP
// end ;
13843: LD_VAR 0 3
13847: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13848: LD_INT 0
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
13862: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13863: LD_VAR 0 1
13867: NOT
13868: IFTRUE 13885
13870: PUSH
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL_OW 257
13880: PUSH
13881: LD_INT 9
13883: NONEQUAL
13884: OR
13885: IFFALSE 13889
// exit ;
13887: GO 14468
// side := GetSide ( unit ) ;
13889: LD_ADDR_VAR 0 9
13893: PUSH
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 255
13903: ST_TO_ADDR
// tech_space := tech_spacanom ;
13904: LD_ADDR_VAR 0 12
13908: PUSH
13909: LD_INT 29
13911: ST_TO_ADDR
// tech_time := tech_taurad ;
13912: LD_ADDR_VAR 0 13
13916: PUSH
13917: LD_INT 28
13919: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13920: LD_ADDR_VAR 0 11
13924: PUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 310
13934: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13935: LD_VAR 0 11
13939: PPUSH
13940: CALL_OW 247
13944: PUSH
13945: LD_INT 2
13947: EQUAL
13948: IFFALSE 13952
// exit ;
13950: GO 14468
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13952: LD_ADDR_VAR 0 8
13956: PUSH
13957: LD_INT 81
13959: PUSH
13960: LD_VAR 0 9
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: LD_INT 21
13974: PUSH
13975: LD_INT 3
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PPUSH
13990: CALL_OW 69
13994: ST_TO_ADDR
// if not tmp then
13995: LD_VAR 0 8
13999: NOT
14000: IFFALSE 14004
// exit ;
14002: GO 14468
// if in_unit then
14004: LD_VAR 0 11
14008: IFFALSE 14032
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14010: LD_ADDR_VAR 0 10
14014: PUSH
14015: LD_VAR 0 8
14019: PPUSH
14020: LD_VAR 0 11
14024: PPUSH
14025: CALL_OW 74
14029: ST_TO_ADDR
14030: GO 14052
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14032: LD_ADDR_VAR 0 10
14036: PUSH
14037: LD_VAR 0 8
14041: PPUSH
14042: LD_VAR 0 1
14046: PPUSH
14047: CALL_OW 74
14051: ST_TO_ADDR
// if not enemy then
14052: LD_VAR 0 10
14056: NOT
14057: IFFALSE 14061
// exit ;
14059: GO 14468
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14061: LD_VAR 0 11
14065: IFFALSE 14087
14067: PUSH
14068: LD_VAR 0 11
14072: PPUSH
14073: LD_VAR 0 10
14077: PPUSH
14078: CALL_OW 296
14082: PUSH
14083: LD_INT 13
14085: GREATER
14086: AND
14087: IFTRUE 14109
14089: PUSH
14090: LD_VAR 0 1
14094: PPUSH
14095: LD_VAR 0 10
14099: PPUSH
14100: CALL_OW 296
14104: PUSH
14105: LD_INT 12
14107: GREATER
14108: OR
14109: IFFALSE 14113
// exit ;
14111: GO 14468
// missile := [ 1 ] ;
14113: LD_ADDR_VAR 0 14
14117: PUSH
14118: LD_INT 1
14120: PUSH
14121: EMPTY
14122: LIST
14123: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14124: LD_VAR 0 9
14128: PPUSH
14129: LD_VAR 0 12
14133: PPUSH
14134: CALL_OW 325
14138: IFFALSE 14167
// missile := Replace ( missile , missile + 1 , 2 ) ;
14140: LD_ADDR_VAR 0 14
14144: PUSH
14145: LD_VAR 0 14
14149: PPUSH
14150: LD_VAR 0 14
14154: PUSH
14155: LD_INT 1
14157: PLUS
14158: PPUSH
14159: LD_INT 2
14161: PPUSH
14162: CALL_OW 1
14166: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14167: LD_VAR 0 9
14171: PPUSH
14172: LD_VAR 0 13
14176: PPUSH
14177: CALL_OW 325
14181: IFFALSE 14205
14183: PUSH
14184: LD_VAR 0 10
14188: PPUSH
14189: CALL_OW 255
14193: PPUSH
14194: LD_VAR 0 13
14198: PPUSH
14199: CALL_OW 325
14203: NOT
14204: AND
14205: IFFALSE 14234
// missile := Replace ( missile , missile + 1 , 3 ) ;
14207: LD_ADDR_VAR 0 14
14211: PUSH
14212: LD_VAR 0 14
14216: PPUSH
14217: LD_VAR 0 14
14221: PUSH
14222: LD_INT 1
14224: PLUS
14225: PPUSH
14226: LD_INT 3
14228: PPUSH
14229: CALL_OW 1
14233: ST_TO_ADDR
// if missile < 2 then
14234: LD_VAR 0 14
14238: PUSH
14239: LD_INT 2
14241: LESS
14242: IFFALSE 14246
// exit ;
14244: GO 14468
// x := GetX ( enemy ) ;
14246: LD_ADDR_VAR 0 4
14250: PUSH
14251: LD_VAR 0 10
14255: PPUSH
14256: CALL_OW 250
14260: ST_TO_ADDR
// y := GetY ( enemy ) ;
14261: LD_ADDR_VAR 0 5
14265: PUSH
14266: LD_VAR 0 10
14270: PPUSH
14271: CALL_OW 251
14275: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14276: LD_ADDR_VAR 0 6
14280: PUSH
14281: LD_VAR 0 4
14285: PUSH
14286: LD_INT 1
14288: NEG
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 12
14297: PLUS
14298: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14299: LD_ADDR_VAR 0 7
14303: PUSH
14304: LD_VAR 0 5
14308: PUSH
14309: LD_INT 1
14311: NEG
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: CALL_OW 12
14320: PLUS
14321: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14322: LD_VAR 0 6
14326: PPUSH
14327: LD_VAR 0 7
14331: PPUSH
14332: CALL_OW 488
14336: NOT
14337: IFFALSE 14359
// begin _x := x ;
14339: LD_ADDR_VAR 0 6
14343: PUSH
14344: LD_VAR 0 4
14348: ST_TO_ADDR
// _y := y ;
14349: LD_ADDR_VAR 0 7
14353: PUSH
14354: LD_VAR 0 5
14358: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_INT 1
14366: PPUSH
14367: LD_VAR 0 14
14371: PPUSH
14372: CALL_OW 12
14376: ST_TO_ADDR
// case i of 1 :
14377: LD_VAR 0 3
14381: PUSH
14382: LD_INT 1
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14407
14390: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14391: LD_VAR 0 1
14395: PPUSH
14396: LD_VAR 0 10
14400: PPUSH
14401: CALL_OW 115
14405: GO 14468
14407: LD_INT 2
14409: DOUBLE
14410: EQUAL
14411: IFTRUE 14415
14413: GO 14437
14415: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14416: LD_VAR 0 1
14420: PPUSH
14421: LD_VAR 0 6
14425: PPUSH
14426: LD_VAR 0 7
14430: PPUSH
14431: CALL_OW 153
14435: GO 14468
14437: LD_INT 3
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14467
14445: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14446: LD_VAR 0 1
14450: PPUSH
14451: LD_VAR 0 6
14455: PPUSH
14456: LD_VAR 0 7
14460: PPUSH
14461: CALL_OW 154
14465: GO 14468
14467: POP
// end ;
14468: LD_VAR 0 2
14472: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14473: LD_INT 0
14475: PPUSH
14476: PPUSH
14477: PPUSH
14478: PPUSH
14479: PPUSH
14480: PPUSH
// if not unit or not building then
14481: LD_VAR 0 1
14485: NOT
14486: IFTRUE 14495
14488: PUSH
14489: LD_VAR 0 2
14493: NOT
14494: OR
14495: IFFALSE 14499
// exit ;
14497: GO 14657
// x := GetX ( building ) ;
14499: LD_ADDR_VAR 0 5
14503: PUSH
14504: LD_VAR 0 2
14508: PPUSH
14509: CALL_OW 250
14513: ST_TO_ADDR
// y := GetY ( building ) ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: LD_VAR 0 2
14523: PPUSH
14524: CALL_OW 251
14528: ST_TO_ADDR
// for i := 0 to 5 do
14529: LD_ADDR_VAR 0 4
14533: PUSH
14534: DOUBLE
14535: LD_INT 0
14537: DEC
14538: ST_TO_ADDR
14539: LD_INT 5
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14655
// begin _x := ShiftX ( x , i , 3 ) ;
14545: LD_ADDR_VAR 0 7
14549: PUSH
14550: LD_VAR 0 5
14554: PPUSH
14555: LD_VAR 0 4
14559: PPUSH
14560: LD_INT 3
14562: PPUSH
14563: CALL_OW 272
14567: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14568: LD_ADDR_VAR 0 8
14572: PUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: LD_VAR 0 4
14582: PPUSH
14583: LD_INT 3
14585: PPUSH
14586: CALL_OW 273
14590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14591: LD_VAR 0 7
14595: PPUSH
14596: LD_VAR 0 8
14600: PPUSH
14601: CALL_OW 488
14605: NOT
14606: IFFALSE 14610
// continue ;
14608: GO 14542
// if HexInfo ( _x , _y ) = 0 then
14610: LD_VAR 0 7
14614: PPUSH
14615: LD_VAR 0 8
14619: PPUSH
14620: CALL_OW 428
14624: PUSH
14625: LD_INT 0
14627: EQUAL
14628: IFFALSE 14653
// begin ComMoveXY ( unit , _x , _y ) ;
14630: LD_VAR 0 1
14634: PPUSH
14635: LD_VAR 0 7
14639: PPUSH
14640: LD_VAR 0 8
14644: PPUSH
14645: CALL_OW 111
// exit ;
14649: POP
14650: POP
14651: GO 14657
// end ; end ;
14653: GO 14542
14655: POP
14656: POP
// end ;
14657: LD_VAR 0 3
14661: RET
// export function ScanBase ( side , base_area ) ; begin
14662: LD_INT 0
14664: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14665: LD_ADDR_VAR 0 3
14669: PUSH
14670: LD_VAR 0 2
14674: PPUSH
14675: LD_INT 81
14677: PUSH
14678: LD_VAR 0 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 70
14691: ST_TO_ADDR
// end ;
14692: LD_VAR 0 3
14696: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14697: LD_INT 0
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
// result := false ;
14703: LD_ADDR_VAR 0 2
14707: PUSH
14708: LD_INT 0
14710: ST_TO_ADDR
// side := GetSide ( unit ) ;
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: CALL_OW 255
14725: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14726: LD_ADDR_VAR 0 4
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: CALL_OW 248
14740: ST_TO_ADDR
// case nat of 1 :
14741: LD_VAR 0 4
14745: PUSH
14746: LD_INT 1
14748: DOUBLE
14749: EQUAL
14750: IFTRUE 14754
14752: GO 14765
14754: POP
// tech := tech_lassight ; 2 :
14755: LD_ADDR_VAR 0 5
14759: PUSH
14760: LD_INT 12
14762: ST_TO_ADDR
14763: GO 14804
14765: LD_INT 2
14767: DOUBLE
14768: EQUAL
14769: IFTRUE 14773
14771: GO 14784
14773: POP
// tech := tech_mortar ; 3 :
14774: LD_ADDR_VAR 0 5
14778: PUSH
14779: LD_INT 41
14781: ST_TO_ADDR
14782: GO 14804
14784: LD_INT 3
14786: DOUBLE
14787: EQUAL
14788: IFTRUE 14792
14790: GO 14803
14792: POP
// tech := tech_bazooka ; end ;
14793: LD_ADDR_VAR 0 5
14797: PUSH
14798: LD_INT 44
14800: ST_TO_ADDR
14801: GO 14804
14803: POP
// if Researched ( side , tech ) then
14804: LD_VAR 0 3
14808: PPUSH
14809: LD_VAR 0 5
14813: PPUSH
14814: CALL_OW 325
14818: IFFALSE 14845
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14820: LD_ADDR_VAR 0 2
14824: PUSH
14825: LD_INT 5
14827: PUSH
14828: LD_INT 8
14830: PUSH
14831: LD_INT 9
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: LD_VAR 0 4
14843: ARRAY
14844: ST_TO_ADDR
// end ;
14845: LD_VAR 0 2
14849: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14850: LD_INT 0
14852: PPUSH
14853: PPUSH
14854: PPUSH
// if not mines then
14855: LD_VAR 0 2
14859: NOT
14860: IFFALSE 14864
// exit ;
14862: GO 15008
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14864: LD_ADDR_VAR 0 5
14868: PUSH
14869: LD_INT 81
14871: PUSH
14872: LD_VAR 0 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 3
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PPUSH
14902: CALL_OW 69
14906: ST_TO_ADDR
// for i in mines do
14907: LD_ADDR_VAR 0 4
14911: PUSH
14912: LD_VAR 0 2
14916: PUSH
14917: FOR_IN
14918: IFFALSE 15006
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14920: LD_VAR 0 4
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 4
14933: PUSH
14934: LD_INT 2
14936: ARRAY
14937: PPUSH
14938: CALL_OW 458
14942: NOT
14943: IFFALSE 14947
// continue ;
14945: GO 14917
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14947: LD_VAR 0 4
14951: PUSH
14952: LD_INT 1
14954: ARRAY
14955: PPUSH
14956: LD_VAR 0 4
14960: PUSH
14961: LD_INT 2
14963: ARRAY
14964: PPUSH
14965: CALL_OW 428
14969: PUSH
14970: LD_VAR 0 5
14974: IN
14975: IFFALSE 15004
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14977: LD_VAR 0 4
14981: PUSH
14982: LD_INT 1
14984: ARRAY
14985: PPUSH
14986: LD_VAR 0 4
14990: PUSH
14991: LD_INT 2
14993: ARRAY
14994: PPUSH
14995: LD_VAR 0 1
14999: PPUSH
15000: CALL_OW 456
// end ;
15004: GO 14917
15006: POP
15007: POP
// end ;
15008: LD_VAR 0 3
15012: RET
// export function Count ( array ) ; begin
15013: LD_INT 0
15015: PPUSH
// result := array + 0 ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_VAR 0 1
15025: PUSH
15026: LD_INT 0
15028: PLUS
15029: ST_TO_ADDR
// end ;
15030: LD_VAR 0 2
15034: RET
// export function IsEmpty ( building ) ; begin
15035: LD_INT 0
15037: PPUSH
// if not building then
15038: LD_VAR 0 1
15042: NOT
15043: IFFALSE 15047
// exit ;
15045: GO 15090
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_VAR 0 1
15056: PUSH
15057: LD_INT 22
15059: PUSH
15060: LD_VAR 0 1
15064: PPUSH
15065: CALL_OW 255
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 58
15076: PUSH
15077: EMPTY
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PPUSH
15084: CALL_OW 69
15088: IN
15089: ST_TO_ADDR
// end ;
15090: LD_VAR 0 2
15094: RET
// export function IsNotFull ( building ) ; var places ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
// if not building then
15099: LD_VAR 0 1
15103: NOT
15104: IFFALSE 15108
// exit ;
15106: GO 15136
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
15108: LD_ADDR_VAR 0 2
15112: PUSH
15113: LD_VAR 0 1
15117: PPUSH
15118: LD_INT 3
15120: PUSH
15121: LD_INT 62
15123: PUSH
15124: EMPTY
15125: LIST
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 72
15135: ST_TO_ADDR
// end ;
15136: LD_VAR 0 2
15140: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15141: LD_INT 0
15143: PPUSH
15144: PPUSH
15145: PPUSH
15146: PPUSH
// tmp := [ ] ;
15147: LD_ADDR_VAR 0 3
15151: PUSH
15152: EMPTY
15153: ST_TO_ADDR
// list := [ ] ;
15154: LD_ADDR_VAR 0 5
15158: PUSH
15159: EMPTY
15160: ST_TO_ADDR
// for i = 16 to 25 do
15161: LD_ADDR_VAR 0 4
15165: PUSH
15166: DOUBLE
15167: LD_INT 16
15169: DEC
15170: ST_TO_ADDR
15171: LD_INT 25
15173: PUSH
15174: FOR_TO
15175: IFFALSE 15248
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15177: LD_ADDR_VAR 0 3
15181: PUSH
15182: LD_VAR 0 3
15186: PUSH
15187: LD_INT 22
15189: PUSH
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 255
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 91
15206: PUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_INT 6
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 30
15222: PUSH
15223: LD_VAR 0 4
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: PUSH
15237: EMPTY
15238: LIST
15239: PPUSH
15240: CALL_OW 69
15244: ADD
15245: ST_TO_ADDR
15246: GO 15174
15248: POP
15249: POP
// for i = 1 to tmp do
15250: LD_ADDR_VAR 0 4
15254: PUSH
15255: DOUBLE
15256: LD_INT 1
15258: DEC
15259: ST_TO_ADDR
15260: LD_VAR 0 3
15264: PUSH
15265: FOR_TO
15266: IFFALSE 15354
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15268: LD_ADDR_VAR 0 5
15272: PUSH
15273: LD_VAR 0 5
15277: PUSH
15278: LD_VAR 0 3
15282: PUSH
15283: LD_VAR 0 4
15287: ARRAY
15288: PPUSH
15289: CALL_OW 266
15293: PUSH
15294: LD_VAR 0 3
15298: PUSH
15299: LD_VAR 0 4
15303: ARRAY
15304: PPUSH
15305: CALL_OW 250
15309: PUSH
15310: LD_VAR 0 3
15314: PUSH
15315: LD_VAR 0 4
15319: ARRAY
15320: PPUSH
15321: CALL_OW 251
15325: PUSH
15326: LD_VAR 0 3
15330: PUSH
15331: LD_VAR 0 4
15335: ARRAY
15336: PPUSH
15337: CALL_OW 254
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: ADD
15351: ST_TO_ADDR
15352: GO 15265
15354: POP
15355: POP
// result := list ;
15356: LD_ADDR_VAR 0 2
15360: PUSH
15361: LD_VAR 0 5
15365: ST_TO_ADDR
// end ;
15366: LD_VAR 0 2
15370: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15371: LD_INT 0
15373: PPUSH
15374: PPUSH
15375: PPUSH
15376: PPUSH
15377: PPUSH
15378: PPUSH
15379: PPUSH
// if not factory then
15380: LD_VAR 0 1
15384: NOT
15385: IFFALSE 15389
// exit ;
15387: GO 15992
// if control = control_apeman then
15389: LD_VAR 0 4
15393: PUSH
15394: LD_INT 5
15396: EQUAL
15397: IFFALSE 15506
// begin tmp := UnitsInside ( factory ) ;
15399: LD_ADDR_VAR 0 8
15403: PUSH
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 313
15413: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15414: LD_VAR 0 8
15418: PPUSH
15419: LD_INT 25
15421: PUSH
15422: LD_INT 12
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PPUSH
15429: CALL_OW 72
15433: NOT
15434: IFFALSE 15444
// control := control_manual ;
15436: LD_ADDR_VAR 0 4
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15444: LD_ADDR_VAR 0 8
15448: PUSH
15449: LD_VAR 0 1
15453: PPUSH
15454: CALL 15141 0 1
15458: ST_TO_ADDR
// if tmp then
15459: LD_VAR 0 8
15463: IFFALSE 15506
// begin for i in tmp do
15465: LD_ADDR_VAR 0 7
15469: PUSH
15470: LD_VAR 0 8
15474: PUSH
15475: FOR_IN
15476: IFFALSE 15504
// if i [ 1 ] = b_ext_radio then
15478: LD_VAR 0 7
15482: PUSH
15483: LD_INT 1
15485: ARRAY
15486: PUSH
15487: LD_INT 22
15489: EQUAL
15490: IFFALSE 15502
// begin control := control_remote ;
15492: LD_ADDR_VAR 0 4
15496: PUSH
15497: LD_INT 2
15499: ST_TO_ADDR
// break ;
15500: GO 15504
// end ;
15502: GO 15475
15504: POP
15505: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_VAR 0 2
15515: PPUSH
15516: LD_VAR 0 3
15520: PPUSH
15521: LD_VAR 0 4
15525: PPUSH
15526: LD_VAR 0 5
15530: PPUSH
15531: CALL_OW 448
15535: IFFALSE 15570
// begin result := [ chassis , engine , control , weapon ] ;
15537: LD_ADDR_VAR 0 6
15541: PUSH
15542: LD_VAR 0 2
15546: PUSH
15547: LD_VAR 0 3
15551: PUSH
15552: LD_VAR 0 4
15556: PUSH
15557: LD_VAR 0 5
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: ST_TO_ADDR
// exit ;
15568: GO 15992
// end ; _chassis := AvailableChassisList ( factory ) ;
15570: LD_ADDR_VAR 0 9
15574: PUSH
15575: LD_VAR 0 1
15579: PPUSH
15580: CALL_OW 475
15584: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15585: LD_ADDR_VAR 0 11
15589: PUSH
15590: LD_VAR 0 1
15594: PPUSH
15595: CALL_OW 476
15599: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15600: LD_ADDR_VAR 0 12
15604: PUSH
15605: LD_VAR 0 1
15609: PPUSH
15610: CALL_OW 477
15614: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15615: LD_ADDR_VAR 0 10
15619: PUSH
15620: LD_VAR 0 1
15624: PPUSH
15625: CALL_OW 478
15629: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15630: LD_VAR 0 9
15634: NOT
15635: IFTRUE 15644
15637: PUSH
15638: LD_VAR 0 11
15642: NOT
15643: OR
15644: IFTRUE 15653
15646: PUSH
15647: LD_VAR 0 12
15651: NOT
15652: OR
15653: IFTRUE 15662
15655: PUSH
15656: LD_VAR 0 10
15660: NOT
15661: OR
15662: IFFALSE 15697
// begin result := [ chassis , engine , control , weapon ] ;
15664: LD_ADDR_VAR 0 6
15668: PUSH
15669: LD_VAR 0 2
15673: PUSH
15674: LD_VAR 0 3
15678: PUSH
15679: LD_VAR 0 4
15683: PUSH
15684: LD_VAR 0 5
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: ST_TO_ADDR
// exit ;
15695: GO 15992
// end ; if not chassis in _chassis then
15697: LD_VAR 0 2
15701: PUSH
15702: LD_VAR 0 9
15706: IN
15707: NOT
15708: IFFALSE 15734
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15710: LD_ADDR_VAR 0 2
15714: PUSH
15715: LD_VAR 0 9
15719: PUSH
15720: LD_INT 1
15722: PPUSH
15723: LD_VAR 0 9
15727: PPUSH
15728: CALL_OW 12
15732: ARRAY
15733: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15734: LD_VAR 0 2
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL 15997 0 2
15748: NOT
15749: IFFALSE 15810
// repeat engine := _engine [ 1 ] ;
15751: LD_ADDR_VAR 0 3
15755: PUSH
15756: LD_VAR 0 11
15760: PUSH
15761: LD_INT 1
15763: ARRAY
15764: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15765: LD_ADDR_VAR 0 11
15769: PUSH
15770: LD_VAR 0 11
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: CALL_OW 3
15782: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15783: LD_VAR 0 2
15787: PPUSH
15788: LD_VAR 0 3
15792: PPUSH
15793: CALL 15997 0 2
15797: IFTRUE 15808
15799: PUSH
15800: LD_VAR 0 11
15804: PUSH
15805: EMPTY
15806: EQUAL
15807: OR
15808: IFFALSE 15751
// if not control in _control then
15810: LD_VAR 0 4
15814: PUSH
15815: LD_VAR 0 12
15819: IN
15820: NOT
15821: IFFALSE 15847
// control := _control [ rand ( 1 , _control ) ] ;
15823: LD_ADDR_VAR 0 4
15827: PUSH
15828: LD_VAR 0 12
15832: PUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_VAR 0 12
15840: PPUSH
15841: CALL_OW 12
15845: ARRAY
15846: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15847: LD_VAR 0 2
15851: PPUSH
15852: LD_VAR 0 5
15856: PPUSH
15857: CALL 16219 0 2
15861: NOT
15862: IFFALSE 15923
// repeat weapon := _weapon [ 1 ] ;
15864: LD_ADDR_VAR 0 5
15868: PUSH
15869: LD_VAR 0 10
15873: PUSH
15874: LD_INT 1
15876: ARRAY
15877: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15878: LD_ADDR_VAR 0 10
15882: PUSH
15883: LD_VAR 0 10
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: CALL_OW 3
15895: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15896: LD_VAR 0 2
15900: PPUSH
15901: LD_VAR 0 5
15905: PPUSH
15906: CALL 16219 0 2
15910: IFTRUE 15921
15912: PUSH
15913: LD_VAR 0 10
15917: PUSH
15918: EMPTY
15919: EQUAL
15920: OR
15921: IFFALSE 15864
// result := [ ] ;
15923: LD_ADDR_VAR 0 6
15927: PUSH
15928: EMPTY
15929: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15930: LD_VAR 0 1
15934: PPUSH
15935: LD_VAR 0 2
15939: PPUSH
15940: LD_VAR 0 3
15944: PPUSH
15945: LD_VAR 0 4
15949: PPUSH
15950: LD_VAR 0 5
15954: PPUSH
15955: CALL_OW 448
15959: IFFALSE 15992
// result := [ chassis , engine , control , weapon ] ;
15961: LD_ADDR_VAR 0 6
15965: PUSH
15966: LD_VAR 0 2
15970: PUSH
15971: LD_VAR 0 3
15975: PUSH
15976: LD_VAR 0 4
15980: PUSH
15981: LD_VAR 0 5
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
// end ;
15992: LD_VAR 0 6
15996: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15997: LD_INT 0
15999: PPUSH
// if not chassis or not engine then
16000: LD_VAR 0 1
16004: NOT
16005: IFTRUE 16014
16007: PUSH
16008: LD_VAR 0 2
16012: NOT
16013: OR
16014: IFFALSE 16018
// exit ;
16016: GO 16214
// case engine of engine_solar :
16018: LD_VAR 0 2
16022: PUSH
16023: LD_INT 2
16025: DOUBLE
16026: EQUAL
16027: IFTRUE 16031
16029: GO 16069
16031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16032: LD_ADDR_VAR 0 3
16036: PUSH
16037: LD_INT 11
16039: PUSH
16040: LD_INT 12
16042: PUSH
16043: LD_INT 13
16045: PUSH
16046: LD_INT 14
16048: PUSH
16049: LD_INT 1
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: LD_INT 3
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: ST_TO_ADDR
16067: GO 16198
16069: LD_INT 1
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16139
16077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 11
16085: PUSH
16086: LD_INT 12
16088: PUSH
16089: LD_INT 13
16091: PUSH
16092: LD_INT 14
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: LD_INT 2
16100: PUSH
16101: LD_INT 3
16103: PUSH
16104: LD_INT 4
16106: PUSH
16107: LD_INT 5
16109: PUSH
16110: LD_INT 21
16112: PUSH
16113: LD_INT 23
16115: PUSH
16116: LD_INT 22
16118: PUSH
16119: LD_INT 24
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: ST_TO_ADDR
16137: GO 16198
16139: LD_INT 3
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16197
16147: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16148: LD_ADDR_VAR 0 3
16152: PUSH
16153: LD_INT 13
16155: PUSH
16156: LD_INT 14
16158: PUSH
16159: LD_INT 2
16161: PUSH
16162: LD_INT 3
16164: PUSH
16165: LD_INT 4
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: LD_INT 21
16173: PUSH
16174: LD_INT 22
16176: PUSH
16177: LD_INT 23
16179: PUSH
16180: LD_INT 24
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: ST_TO_ADDR
16195: GO 16198
16197: POP
// result := ( chassis in result ) ;
16198: LD_ADDR_VAR 0 3
16202: PUSH
16203: LD_VAR 0 1
16207: PUSH
16208: LD_VAR 0 3
16212: IN
16213: ST_TO_ADDR
// end ;
16214: LD_VAR 0 3
16218: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16219: LD_INT 0
16221: PPUSH
// if not chassis or not weapon then
16222: LD_VAR 0 1
16226: NOT
16227: IFTRUE 16236
16229: PUSH
16230: LD_VAR 0 2
16234: NOT
16235: OR
16236: IFFALSE 16240
// exit ;
16238: GO 17334
// case weapon of us_machine_gun :
16240: LD_VAR 0 2
16244: PUSH
16245: LD_INT 2
16247: DOUBLE
16248: EQUAL
16249: IFTRUE 16253
16251: GO 16283
16253: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: LD_INT 2
16264: PUSH
16265: LD_INT 3
16267: PUSH
16268: LD_INT 4
16270: PUSH
16271: LD_INT 5
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: ST_TO_ADDR
16281: GO 17318
16283: LD_INT 3
16285: DOUBLE
16286: EQUAL
16287: IFTRUE 16291
16289: GO 16321
16291: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16292: LD_ADDR_VAR 0 3
16296: PUSH
16297: LD_INT 1
16299: PUSH
16300: LD_INT 2
16302: PUSH
16303: LD_INT 3
16305: PUSH
16306: LD_INT 4
16308: PUSH
16309: LD_INT 5
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: ST_TO_ADDR
16319: GO 17318
16321: LD_INT 11
16323: DOUBLE
16324: EQUAL
16325: IFTRUE 16329
16327: GO 16359
16329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16330: LD_ADDR_VAR 0 3
16334: PUSH
16335: LD_INT 1
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: LD_INT 3
16343: PUSH
16344: LD_INT 4
16346: PUSH
16347: LD_INT 5
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: ST_TO_ADDR
16357: GO 17318
16359: LD_INT 4
16361: DOUBLE
16362: EQUAL
16363: IFTRUE 16367
16365: GO 16393
16367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16368: LD_ADDR_VAR 0 3
16372: PUSH
16373: LD_INT 2
16375: PUSH
16376: LD_INT 3
16378: PUSH
16379: LD_INT 4
16381: PUSH
16382: LD_INT 5
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: ST_TO_ADDR
16391: GO 17318
16393: LD_INT 5
16395: DOUBLE
16396: EQUAL
16397: IFTRUE 16401
16399: GO 16427
16401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16402: LD_ADDR_VAR 0 3
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: LD_INT 3
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: LD_INT 5
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: ST_TO_ADDR
16425: GO 17318
16427: LD_INT 9
16429: DOUBLE
16430: EQUAL
16431: IFTRUE 16435
16433: GO 16461
16435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 3
16446: PUSH
16447: LD_INT 4
16449: PUSH
16450: LD_INT 5
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: ST_TO_ADDR
16459: GO 17318
16461: LD_INT 7
16463: DOUBLE
16464: EQUAL
16465: IFTRUE 16469
16467: GO 16495
16469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_INT 2
16477: PUSH
16478: LD_INT 3
16480: PUSH
16481: LD_INT 4
16483: PUSH
16484: LD_INT 5
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: ST_TO_ADDR
16493: GO 17318
16495: LD_INT 12
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16503
16501: GO 16529
16503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16504: LD_ADDR_VAR 0 3
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: LD_INT 4
16517: PUSH
16518: LD_INT 5
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: ST_TO_ADDR
16527: GO 17318
16529: LD_INT 13
16531: DOUBLE
16532: EQUAL
16533: IFTRUE 16537
16535: GO 16563
16537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16538: LD_ADDR_VAR 0 3
16542: PUSH
16543: LD_INT 2
16545: PUSH
16546: LD_INT 3
16548: PUSH
16549: LD_INT 4
16551: PUSH
16552: LD_INT 5
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: ST_TO_ADDR
16561: GO 17318
16563: LD_INT 14
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16571
16569: GO 16589
16571: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16572: LD_ADDR_VAR 0 3
16576: PUSH
16577: LD_INT 4
16579: PUSH
16580: LD_INT 5
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: ST_TO_ADDR
16587: GO 17318
16589: LD_INT 6
16591: DOUBLE
16592: EQUAL
16593: IFTRUE 16597
16595: GO 16615
16597: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16598: LD_ADDR_VAR 0 3
16602: PUSH
16603: LD_INT 4
16605: PUSH
16606: LD_INT 5
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: ST_TO_ADDR
16613: GO 17318
16615: LD_INT 10
16617: DOUBLE
16618: EQUAL
16619: IFTRUE 16623
16621: GO 16641
16623: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16624: LD_ADDR_VAR 0 3
16628: PUSH
16629: LD_INT 4
16631: PUSH
16632: LD_INT 5
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: ST_TO_ADDR
16639: GO 17318
16641: LD_INT 22
16643: DOUBLE
16644: EQUAL
16645: IFTRUE 16649
16647: GO 16675
16649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16650: LD_ADDR_VAR 0 3
16654: PUSH
16655: LD_INT 11
16657: PUSH
16658: LD_INT 12
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 14
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: ST_TO_ADDR
16673: GO 17318
16675: LD_INT 23
16677: DOUBLE
16678: EQUAL
16679: IFTRUE 16683
16681: GO 16709
16683: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16684: LD_ADDR_VAR 0 3
16688: PUSH
16689: LD_INT 11
16691: PUSH
16692: LD_INT 12
16694: PUSH
16695: LD_INT 13
16697: PUSH
16698: LD_INT 14
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: ST_TO_ADDR
16707: GO 17318
16709: LD_INT 24
16711: DOUBLE
16712: EQUAL
16713: IFTRUE 16717
16715: GO 16743
16717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16718: LD_ADDR_VAR 0 3
16722: PUSH
16723: LD_INT 11
16725: PUSH
16726: LD_INT 12
16728: PUSH
16729: LD_INT 13
16731: PUSH
16732: LD_INT 14
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: ST_TO_ADDR
16741: GO 17318
16743: LD_INT 30
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16777
16751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_INT 11
16759: PUSH
16760: LD_INT 12
16762: PUSH
16763: LD_INT 13
16765: PUSH
16766: LD_INT 14
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: ST_TO_ADDR
16775: GO 17318
16777: LD_INT 25
16779: DOUBLE
16780: EQUAL
16781: IFTRUE 16785
16783: GO 16803
16785: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16786: LD_ADDR_VAR 0 3
16790: PUSH
16791: LD_INT 13
16793: PUSH
16794: LD_INT 14
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: ST_TO_ADDR
16801: GO 17318
16803: LD_INT 27
16805: DOUBLE
16806: EQUAL
16807: IFTRUE 16811
16809: GO 16829
16811: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16812: LD_ADDR_VAR 0 3
16816: PUSH
16817: LD_INT 13
16819: PUSH
16820: LD_INT 14
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: ST_TO_ADDR
16827: GO 17318
16829: LD_INT 92
16831: DOUBLE
16832: EQUAL
16833: IFTRUE 16837
16835: GO 16863
16837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16838: LD_ADDR_VAR 0 3
16842: PUSH
16843: LD_INT 11
16845: PUSH
16846: LD_INT 12
16848: PUSH
16849: LD_INT 13
16851: PUSH
16852: LD_INT 14
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: ST_TO_ADDR
16861: GO 17318
16863: LD_INT 28
16865: DOUBLE
16866: EQUAL
16867: IFTRUE 16871
16869: GO 16889
16871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16872: LD_ADDR_VAR 0 3
16876: PUSH
16877: LD_INT 13
16879: PUSH
16880: LD_INT 14
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: ST_TO_ADDR
16887: GO 17318
16889: LD_INT 29
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16915
16897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16898: LD_ADDR_VAR 0 3
16902: PUSH
16903: LD_INT 13
16905: PUSH
16906: LD_INT 14
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: ST_TO_ADDR
16913: GO 17318
16915: LD_INT 31
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16941
16923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16924: LD_ADDR_VAR 0 3
16928: PUSH
16929: LD_INT 13
16931: PUSH
16932: LD_INT 14
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: ST_TO_ADDR
16939: GO 17318
16941: LD_INT 26
16943: DOUBLE
16944: EQUAL
16945: IFTRUE 16949
16947: GO 16967
16949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16950: LD_ADDR_VAR 0 3
16954: PUSH
16955: LD_INT 13
16957: PUSH
16958: LD_INT 14
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: ST_TO_ADDR
16965: GO 17318
16967: LD_INT 42
16969: DOUBLE
16970: EQUAL
16971: IFTRUE 16975
16973: GO 17001
16975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_INT 21
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 23
16989: PUSH
16990: LD_INT 24
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: ST_TO_ADDR
16999: GO 17318
17001: LD_INT 43
17003: DOUBLE
17004: EQUAL
17005: IFTRUE 17009
17007: GO 17035
17009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17010: LD_ADDR_VAR 0 3
17014: PUSH
17015: LD_INT 21
17017: PUSH
17018: LD_INT 22
17020: PUSH
17021: LD_INT 23
17023: PUSH
17024: LD_INT 24
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: ST_TO_ADDR
17033: GO 17318
17035: LD_INT 44
17037: DOUBLE
17038: EQUAL
17039: IFTRUE 17043
17041: GO 17069
17043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17044: LD_ADDR_VAR 0 3
17048: PUSH
17049: LD_INT 21
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 23
17057: PUSH
17058: LD_INT 24
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: ST_TO_ADDR
17067: GO 17318
17069: LD_INT 45
17071: DOUBLE
17072: EQUAL
17073: IFTRUE 17077
17075: GO 17103
17077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17078: LD_ADDR_VAR 0 3
17082: PUSH
17083: LD_INT 21
17085: PUSH
17086: LD_INT 22
17088: PUSH
17089: LD_INT 23
17091: PUSH
17092: LD_INT 24
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: ST_TO_ADDR
17101: GO 17318
17103: LD_INT 49
17105: DOUBLE
17106: EQUAL
17107: IFTRUE 17111
17109: GO 17137
17111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17112: LD_ADDR_VAR 0 3
17116: PUSH
17117: LD_INT 21
17119: PUSH
17120: LD_INT 22
17122: PUSH
17123: LD_INT 23
17125: PUSH
17126: LD_INT 24
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
17135: GO 17318
17137: LD_INT 51
17139: DOUBLE
17140: EQUAL
17141: IFTRUE 17145
17143: GO 17171
17145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17146: LD_ADDR_VAR 0 3
17150: PUSH
17151: LD_INT 21
17153: PUSH
17154: LD_INT 22
17156: PUSH
17157: LD_INT 23
17159: PUSH
17160: LD_INT 24
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: ST_TO_ADDR
17169: GO 17318
17171: LD_INT 52
17173: DOUBLE
17174: EQUAL
17175: IFTRUE 17179
17177: GO 17205
17179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17180: LD_ADDR_VAR 0 3
17184: PUSH
17185: LD_INT 21
17187: PUSH
17188: LD_INT 22
17190: PUSH
17191: LD_INT 23
17193: PUSH
17194: LD_INT 24
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: ST_TO_ADDR
17203: GO 17318
17205: LD_INT 53
17207: DOUBLE
17208: EQUAL
17209: IFTRUE 17213
17211: GO 17231
17213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17214: LD_ADDR_VAR 0 3
17218: PUSH
17219: LD_INT 23
17221: PUSH
17222: LD_INT 24
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: ST_TO_ADDR
17229: GO 17318
17231: LD_INT 46
17233: DOUBLE
17234: EQUAL
17235: IFTRUE 17239
17237: GO 17257
17239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17240: LD_ADDR_VAR 0 3
17244: PUSH
17245: LD_INT 23
17247: PUSH
17248: LD_INT 24
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: ST_TO_ADDR
17255: GO 17318
17257: LD_INT 47
17259: DOUBLE
17260: EQUAL
17261: IFTRUE 17265
17263: GO 17283
17265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
17266: LD_ADDR_VAR 0 3
17270: PUSH
17271: LD_INT 23
17273: PUSH
17274: LD_INT 24
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: ST_TO_ADDR
17281: GO 17318
17283: LD_INT 98
17285: DOUBLE
17286: EQUAL
17287: IFTRUE 17291
17289: GO 17317
17291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_INT 21
17299: PUSH
17300: LD_INT 22
17302: PUSH
17303: LD_INT 23
17305: PUSH
17306: LD_INT 24
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: ST_TO_ADDR
17315: GO 17318
17317: POP
// result := ( chassis in result ) ;
17318: LD_ADDR_VAR 0 3
17322: PUSH
17323: LD_VAR 0 1
17327: PUSH
17328: LD_VAR 0 3
17332: IN
17333: ST_TO_ADDR
// end ;
17334: LD_VAR 0 3
17338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
17346: PPUSH
17347: PPUSH
// result := array ;
17348: LD_ADDR_VAR 0 5
17352: PUSH
17353: LD_VAR 0 1
17357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17358: LD_VAR 0 1
17362: NOT
17363: IFTRUE 17372
17365: PUSH
17366: LD_VAR 0 2
17370: NOT
17371: OR
17372: IFTRUE 17381
17374: PUSH
17375: LD_VAR 0 3
17379: NOT
17380: OR
17381: IFTRUE 17395
17383: PUSH
17384: LD_VAR 0 2
17388: PUSH
17389: LD_VAR 0 1
17393: GREATER
17394: OR
17395: IFTRUE 17409
17397: PUSH
17398: LD_VAR 0 3
17402: PUSH
17403: LD_VAR 0 1
17407: GREATER
17408: OR
17409: IFFALSE 17413
// exit ;
17411: GO 17709
// if direction then
17413: LD_VAR 0 4
17417: IFFALSE 17481
// begin d := 1 ;
17419: LD_ADDR_VAR 0 9
17423: PUSH
17424: LD_INT 1
17426: ST_TO_ADDR
// if i_from > i_to then
17427: LD_VAR 0 2
17431: PUSH
17432: LD_VAR 0 3
17436: GREATER
17437: IFFALSE 17463
// length := ( array - i_from ) + i_to else
17439: LD_ADDR_VAR 0 11
17443: PUSH
17444: LD_VAR 0 1
17448: PUSH
17449: LD_VAR 0 2
17453: MINUS
17454: PUSH
17455: LD_VAR 0 3
17459: PLUS
17460: ST_TO_ADDR
17461: GO 17479
// length := i_to - i_from ;
17463: LD_ADDR_VAR 0 11
17467: PUSH
17468: LD_VAR 0 3
17472: PUSH
17473: LD_VAR 0 2
17477: MINUS
17478: ST_TO_ADDR
// end else
17479: GO 17542
// begin d := - 1 ;
17481: LD_ADDR_VAR 0 9
17485: PUSH
17486: LD_INT 1
17488: NEG
17489: ST_TO_ADDR
// if i_from > i_to then
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 3
17499: GREATER
17500: IFFALSE 17520
// length := i_from - i_to else
17502: LD_ADDR_VAR 0 11
17506: PUSH
17507: LD_VAR 0 2
17511: PUSH
17512: LD_VAR 0 3
17516: MINUS
17517: ST_TO_ADDR
17518: GO 17542
// length := ( array - i_to ) + i_from ;
17520: LD_ADDR_VAR 0 11
17524: PUSH
17525: LD_VAR 0 1
17529: PUSH
17530: LD_VAR 0 3
17534: MINUS
17535: PUSH
17536: LD_VAR 0 2
17540: PLUS
17541: ST_TO_ADDR
// end ; if not length then
17542: LD_VAR 0 11
17546: NOT
17547: IFFALSE 17551
// exit ;
17549: GO 17709
// tmp := array ;
17551: LD_ADDR_VAR 0 10
17555: PUSH
17556: LD_VAR 0 1
17560: ST_TO_ADDR
// for i = 1 to length do
17561: LD_ADDR_VAR 0 6
17565: PUSH
17566: DOUBLE
17567: LD_INT 1
17569: DEC
17570: ST_TO_ADDR
17571: LD_VAR 0 11
17575: PUSH
17576: FOR_TO
17577: IFFALSE 17697
// begin for j = 1 to array do
17579: LD_ADDR_VAR 0 7
17583: PUSH
17584: DOUBLE
17585: LD_INT 1
17587: DEC
17588: ST_TO_ADDR
17589: LD_VAR 0 1
17593: PUSH
17594: FOR_TO
17595: IFFALSE 17683
// begin k := j + d ;
17597: LD_ADDR_VAR 0 8
17601: PUSH
17602: LD_VAR 0 7
17606: PUSH
17607: LD_VAR 0 9
17611: PLUS
17612: ST_TO_ADDR
// if k > array then
17613: LD_VAR 0 8
17617: PUSH
17618: LD_VAR 0 1
17622: GREATER
17623: IFFALSE 17633
// k := 1 ;
17625: LD_ADDR_VAR 0 8
17629: PUSH
17630: LD_INT 1
17632: ST_TO_ADDR
// if not k then
17633: LD_VAR 0 8
17637: NOT
17638: IFFALSE 17650
// k := array ;
17640: LD_ADDR_VAR 0 8
17644: PUSH
17645: LD_VAR 0 1
17649: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17650: LD_ADDR_VAR 0 10
17654: PUSH
17655: LD_VAR 0 10
17659: PPUSH
17660: LD_VAR 0 8
17664: PPUSH
17665: LD_VAR 0 1
17669: PUSH
17670: LD_VAR 0 7
17674: ARRAY
17675: PPUSH
17676: CALL_OW 1
17680: ST_TO_ADDR
// end ;
17681: GO 17594
17683: POP
17684: POP
// array := tmp ;
17685: LD_ADDR_VAR 0 1
17689: PUSH
17690: LD_VAR 0 10
17694: ST_TO_ADDR
// end ;
17695: GO 17576
17697: POP
17698: POP
// result := array ;
17699: LD_ADDR_VAR 0 5
17703: PUSH
17704: LD_VAR 0 1
17708: ST_TO_ADDR
// end ;
17709: LD_VAR 0 5
17713: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17714: LD_INT 0
17716: PPUSH
17717: PPUSH
// result := 0 ;
17718: LD_ADDR_VAR 0 3
17722: PUSH
17723: LD_INT 0
17725: ST_TO_ADDR
// if not array or not value in array then
17726: LD_VAR 0 1
17730: NOT
17731: IFTRUE 17746
17733: PUSH
17734: LD_VAR 0 2
17738: PUSH
17739: LD_VAR 0 1
17743: IN
17744: NOT
17745: OR
17746: IFFALSE 17750
// exit ;
17748: GO 17804
// for i = 1 to array do
17750: LD_ADDR_VAR 0 4
17754: PUSH
17755: DOUBLE
17756: LD_INT 1
17758: DEC
17759: ST_TO_ADDR
17760: LD_VAR 0 1
17764: PUSH
17765: FOR_TO
17766: IFFALSE 17802
// if value = array [ i ] then
17768: LD_VAR 0 2
17772: PUSH
17773: LD_VAR 0 1
17777: PUSH
17778: LD_VAR 0 4
17782: ARRAY
17783: EQUAL
17784: IFFALSE 17800
// begin result := i ;
17786: LD_ADDR_VAR 0 3
17790: PUSH
17791: LD_VAR 0 4
17795: ST_TO_ADDR
// exit ;
17796: POP
17797: POP
17798: GO 17804
// end ;
17800: GO 17765
17802: POP
17803: POP
// end ;
17804: LD_VAR 0 3
17808: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17809: LD_INT 0
17811: PPUSH
// vc_chassis := chassis ;
17812: LD_ADDR_OWVAR 37
17816: PUSH
17817: LD_VAR 0 1
17821: ST_TO_ADDR
// vc_engine := engine ;
17822: LD_ADDR_OWVAR 39
17826: PUSH
17827: LD_VAR 0 2
17831: ST_TO_ADDR
// vc_control := control ;
17832: LD_ADDR_OWVAR 38
17836: PUSH
17837: LD_VAR 0 3
17841: ST_TO_ADDR
// vc_weapon := weapon ;
17842: LD_ADDR_OWVAR 40
17846: PUSH
17847: LD_VAR 0 4
17851: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17852: LD_ADDR_OWVAR 41
17856: PUSH
17857: LD_VAR 0 5
17861: ST_TO_ADDR
// end ;
17862: LD_VAR 0 6
17866: RET
// export function WantPlant ( unit ) ; var task ; begin
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
// result := false ;
17871: LD_ADDR_VAR 0 2
17875: PUSH
17876: LD_INT 0
17878: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17879: LD_ADDR_VAR 0 3
17883: PUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 437
17893: ST_TO_ADDR
// if task then
17894: LD_VAR 0 3
17898: IFFALSE 17926
// if task [ 1 ] [ 1 ] = p then
17900: LD_VAR 0 3
17904: PUSH
17905: LD_INT 1
17907: ARRAY
17908: PUSH
17909: LD_INT 1
17911: ARRAY
17912: PUSH
17913: LD_STRING p
17915: EQUAL
17916: IFFALSE 17926
// result := true ;
17918: LD_ADDR_VAR 0 2
17922: PUSH
17923: LD_INT 1
17925: ST_TO_ADDR
// end ;
17926: LD_VAR 0 2
17930: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17931: LD_INT 0
17933: PPUSH
17934: PPUSH
17935: PPUSH
17936: PPUSH
// if pos < 1 then
17937: LD_VAR 0 2
17941: PUSH
17942: LD_INT 1
17944: LESS
17945: IFFALSE 17949
// exit ;
17947: GO 18252
// if pos = 1 then
17949: LD_VAR 0 2
17953: PUSH
17954: LD_INT 1
17956: EQUAL
17957: IFFALSE 17990
// result := Replace ( arr , pos [ 1 ] , value ) else
17959: LD_ADDR_VAR 0 4
17963: PUSH
17964: LD_VAR 0 1
17968: PPUSH
17969: LD_VAR 0 2
17973: PUSH
17974: LD_INT 1
17976: ARRAY
17977: PPUSH
17978: LD_VAR 0 3
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
17988: GO 18252
// begin tmp := arr ;
17990: LD_ADDR_VAR 0 6
17994: PUSH
17995: LD_VAR 0 1
17999: ST_TO_ADDR
// s_arr := [ tmp ] ;
18000: LD_ADDR_VAR 0 7
18004: PUSH
18005: LD_VAR 0 6
18009: PUSH
18010: EMPTY
18011: LIST
18012: ST_TO_ADDR
// for i = 1 to pos - 1 do
18013: LD_ADDR_VAR 0 5
18017: PUSH
18018: DOUBLE
18019: LD_INT 1
18021: DEC
18022: ST_TO_ADDR
18023: LD_VAR 0 2
18027: PUSH
18028: LD_INT 1
18030: MINUS
18031: PUSH
18032: FOR_TO
18033: IFFALSE 18078
// begin tmp := tmp [ pos [ i ] ] ;
18035: LD_ADDR_VAR 0 6
18039: PUSH
18040: LD_VAR 0 6
18044: PUSH
18045: LD_VAR 0 2
18049: PUSH
18050: LD_VAR 0 5
18054: ARRAY
18055: ARRAY
18056: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18057: LD_ADDR_VAR 0 7
18061: PUSH
18062: LD_VAR 0 7
18066: PUSH
18067: LD_VAR 0 6
18071: PUSH
18072: EMPTY
18073: LIST
18074: ADD
18075: ST_TO_ADDR
// end ;
18076: GO 18032
18078: POP
18079: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18080: LD_ADDR_VAR 0 6
18084: PUSH
18085: LD_VAR 0 6
18089: PPUSH
18090: LD_VAR 0 2
18094: PUSH
18095: LD_VAR 0 2
18099: ARRAY
18100: PPUSH
18101: LD_VAR 0 3
18105: PPUSH
18106: CALL_OW 1
18110: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18111: LD_ADDR_VAR 0 7
18115: PUSH
18116: LD_VAR 0 7
18120: PPUSH
18121: LD_VAR 0 7
18125: PPUSH
18126: LD_VAR 0 6
18130: PPUSH
18131: CALL_OW 1
18135: ST_TO_ADDR
// for i = s_arr downto 2 do
18136: LD_ADDR_VAR 0 5
18140: PUSH
18141: DOUBLE
18142: LD_VAR 0 7
18146: INC
18147: ST_TO_ADDR
18148: LD_INT 2
18150: PUSH
18151: FOR_DOWNTO
18152: IFFALSE 18236
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18154: LD_ADDR_VAR 0 6
18158: PUSH
18159: LD_VAR 0 7
18163: PUSH
18164: LD_VAR 0 5
18168: PUSH
18169: LD_INT 1
18171: MINUS
18172: ARRAY
18173: PPUSH
18174: LD_VAR 0 2
18178: PUSH
18179: LD_VAR 0 5
18183: PUSH
18184: LD_INT 1
18186: MINUS
18187: ARRAY
18188: PPUSH
18189: LD_VAR 0 7
18193: PUSH
18194: LD_VAR 0 5
18198: ARRAY
18199: PPUSH
18200: CALL_OW 1
18204: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18205: LD_ADDR_VAR 0 7
18209: PUSH
18210: LD_VAR 0 7
18214: PPUSH
18215: LD_VAR 0 5
18219: PUSH
18220: LD_INT 1
18222: MINUS
18223: PPUSH
18224: LD_VAR 0 6
18228: PPUSH
18229: CALL_OW 1
18233: ST_TO_ADDR
// end ;
18234: GO 18151
18236: POP
18237: POP
// result := s_arr [ 1 ] ;
18238: LD_ADDR_VAR 0 4
18242: PUSH
18243: LD_VAR 0 7
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: ST_TO_ADDR
// end ; end ;
18252: LD_VAR 0 4
18256: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18257: LD_INT 0
18259: PPUSH
18260: PPUSH
// if not list then
18261: LD_VAR 0 1
18265: NOT
18266: IFFALSE 18270
// exit ;
18268: GO 18361
// i := list [ pos1 ] ;
18270: LD_ADDR_VAR 0 5
18274: PUSH
18275: LD_VAR 0 1
18279: PUSH
18280: LD_VAR 0 2
18284: ARRAY
18285: ST_TO_ADDR
// if not i then
18286: LD_VAR 0 5
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18361
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18295: LD_ADDR_VAR 0 1
18299: PUSH
18300: LD_VAR 0 1
18304: PPUSH
18305: LD_VAR 0 2
18309: PPUSH
18310: LD_VAR 0 1
18314: PUSH
18315: LD_VAR 0 3
18319: ARRAY
18320: PPUSH
18321: CALL_OW 1
18325: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18326: LD_ADDR_VAR 0 1
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: LD_VAR 0 5
18345: PPUSH
18346: CALL_OW 1
18350: ST_TO_ADDR
// result := list ;
18351: LD_ADDR_VAR 0 4
18355: PUSH
18356: LD_VAR 0 1
18360: ST_TO_ADDR
// end ;
18361: LD_VAR 0 4
18365: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18366: LD_INT 0
18368: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18369: LD_ADDR_VAR 0 5
18373: PUSH
18374: LD_VAR 0 1
18378: PPUSH
18379: CALL_OW 250
18383: PPUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 251
18393: PPUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_VAR 0 4
18408: PPUSH
18409: CALL 18791 0 5
18413: ST_TO_ADDR
// end ;
18414: LD_VAR 0 5
18418: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
18419: LD_INT 0
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
// if not list or not unit then
18425: LD_VAR 0 2
18429: NOT
18430: IFTRUE 18439
18432: PUSH
18433: LD_VAR 0 1
18437: NOT
18438: OR
18439: IFFALSE 18443
// exit ;
18441: GO 18786
// result := [ ] ;
18443: LD_ADDR_VAR 0 5
18447: PUSH
18448: EMPTY
18449: ST_TO_ADDR
// for i in list do
18450: LD_ADDR_VAR 0 6
18454: PUSH
18455: LD_VAR 0 2
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18679
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
18463: LD_ADDR_VAR 0 8
18467: PUSH
18468: LD_VAR 0 1
18472: PPUSH
18473: LD_VAR 0 6
18477: PUSH
18478: LD_INT 1
18480: ARRAY
18481: PPUSH
18482: LD_VAR 0 6
18486: PUSH
18487: LD_INT 2
18489: ARRAY
18490: PPUSH
18491: CALL_OW 297
18495: ST_TO_ADDR
// if not Count ( result ) then
18496: LD_VAR 0 5
18500: PPUSH
18501: CALL 15013 0 1
18505: NOT
18506: IFFALSE 18539
// begin result := Join ( result , [ i , tmp ] ) ;
18508: LD_ADDR_VAR 0 5
18512: PUSH
18513: LD_VAR 0 5
18517: PPUSH
18518: LD_VAR 0 6
18522: PUSH
18523: LD_VAR 0 8
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL 50979 0 2
18536: ST_TO_ADDR
// continue ;
18537: GO 18460
// end ; if result [ result ] [ 2 ] <= tmp then
18539: LD_VAR 0 5
18543: PUSH
18544: LD_VAR 0 5
18548: ARRAY
18549: PUSH
18550: LD_INT 2
18552: ARRAY
18553: PUSH
18554: LD_VAR 0 8
18558: LESSEQUAL
18559: IFFALSE 18592
// result := Join ( result , [ i , tmp ] ) else
18561: LD_ADDR_VAR 0 5
18565: PUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 6
18575: PUSH
18576: LD_VAR 0 8
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PPUSH
18585: CALL 50979 0 2
18589: ST_TO_ADDR
18590: GO 18677
// begin for j := 1 to Count ( result ) do
18592: LD_ADDR_VAR 0 7
18596: PUSH
18597: DOUBLE
18598: LD_INT 1
18600: DEC
18601: ST_TO_ADDR
18602: LD_VAR 0 5
18606: PPUSH
18607: CALL 15013 0 1
18611: PUSH
18612: FOR_TO
18613: IFFALSE 18675
// begin if tmp < result [ j ] [ 2 ] then
18615: LD_VAR 0 8
18619: PUSH
18620: LD_VAR 0 5
18624: PUSH
18625: LD_VAR 0 7
18629: ARRAY
18630: PUSH
18631: LD_INT 2
18633: ARRAY
18634: LESS
18635: IFFALSE 18673
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18637: LD_ADDR_VAR 0 5
18641: PUSH
18642: LD_VAR 0 5
18646: PPUSH
18647: LD_VAR 0 7
18651: PPUSH
18652: LD_VAR 0 6
18656: PUSH
18657: LD_VAR 0 8
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PPUSH
18666: CALL_OW 2
18670: ST_TO_ADDR
// break ;
18671: GO 18675
// end ; end ;
18673: GO 18612
18675: POP
18676: POP
// end ; end ;
18677: GO 18460
18679: POP
18680: POP
// if result and not asc then
18681: LD_VAR 0 5
18685: IFFALSE 18694
18687: PUSH
18688: LD_VAR 0 3
18692: NOT
18693: AND
18694: IFFALSE 18711
// result := ReverseArray ( result ) ;
18696: LD_ADDR_VAR 0 5
18700: PUSH
18701: LD_VAR 0 5
18705: PPUSH
18706: CALL 46069 0 1
18710: ST_TO_ADDR
// tmp := [ ] ;
18711: LD_ADDR_VAR 0 8
18715: PUSH
18716: EMPTY
18717: ST_TO_ADDR
// if mode then
18718: LD_VAR 0 4
18722: IFFALSE 18786
// begin for i := 1 to result do
18724: LD_ADDR_VAR 0 6
18728: PUSH
18729: DOUBLE
18730: LD_INT 1
18732: DEC
18733: ST_TO_ADDR
18734: LD_VAR 0 5
18738: PUSH
18739: FOR_TO
18740: IFFALSE 18774
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
18742: LD_ADDR_VAR 0 8
18746: PUSH
18747: LD_VAR 0 8
18751: PPUSH
18752: LD_VAR 0 5
18756: PUSH
18757: LD_VAR 0 6
18761: ARRAY
18762: PUSH
18763: LD_INT 1
18765: ARRAY
18766: PPUSH
18767: CALL 50979 0 2
18771: ST_TO_ADDR
18772: GO 18739
18774: POP
18775: POP
// result := tmp ;
18776: LD_ADDR_VAR 0 5
18780: PUSH
18781: LD_VAR 0 8
18785: ST_TO_ADDR
// end ; end ;
18786: LD_VAR 0 5
18790: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18791: LD_INT 0
18793: PPUSH
18794: PPUSH
18795: PPUSH
18796: PPUSH
// if not list then
18797: LD_VAR 0 3
18801: NOT
18802: IFFALSE 18806
// exit ;
18804: GO 19196
// result := [ ] ;
18806: LD_ADDR_VAR 0 6
18810: PUSH
18811: EMPTY
18812: ST_TO_ADDR
// for i in list do
18813: LD_ADDR_VAR 0 7
18817: PUSH
18818: LD_VAR 0 3
18822: PUSH
18823: FOR_IN
18824: IFFALSE 19026
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18826: LD_ADDR_VAR 0 9
18830: PUSH
18831: LD_VAR 0 7
18835: PPUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: LD_VAR 0 2
18845: PPUSH
18846: CALL_OW 297
18850: ST_TO_ADDR
// if not result then
18851: LD_VAR 0 6
18855: NOT
18856: IFFALSE 18882
// result := [ [ i , tmp ] ] else
18858: LD_ADDR_VAR 0 6
18862: PUSH
18863: LD_VAR 0 7
18867: PUSH
18868: LD_VAR 0 9
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: ST_TO_ADDR
18880: GO 19024
// begin if result [ result ] [ 2 ] <= tmp then
18882: LD_VAR 0 6
18886: PUSH
18887: LD_VAR 0 6
18891: ARRAY
18892: PUSH
18893: LD_INT 2
18895: ARRAY
18896: PUSH
18897: LD_VAR 0 9
18901: LESSEQUAL
18902: IFFALSE 18944
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18904: LD_ADDR_VAR 0 6
18908: PUSH
18909: LD_VAR 0 6
18913: PPUSH
18914: LD_VAR 0 6
18918: PUSH
18919: LD_INT 1
18921: PLUS
18922: PPUSH
18923: LD_VAR 0 7
18927: PUSH
18928: LD_VAR 0 9
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 2
18941: ST_TO_ADDR
18942: GO 19024
// for j := 1 to result do
18944: LD_ADDR_VAR 0 8
18948: PUSH
18949: DOUBLE
18950: LD_INT 1
18952: DEC
18953: ST_TO_ADDR
18954: LD_VAR 0 6
18958: PUSH
18959: FOR_TO
18960: IFFALSE 19022
// begin if tmp < result [ j ] [ 2 ] then
18962: LD_VAR 0 9
18966: PUSH
18967: LD_VAR 0 6
18971: PUSH
18972: LD_VAR 0 8
18976: ARRAY
18977: PUSH
18978: LD_INT 2
18980: ARRAY
18981: LESS
18982: IFFALSE 19020
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18984: LD_ADDR_VAR 0 6
18988: PUSH
18989: LD_VAR 0 6
18993: PPUSH
18994: LD_VAR 0 8
18998: PPUSH
18999: LD_VAR 0 7
19003: PUSH
19004: LD_VAR 0 9
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PPUSH
19013: CALL_OW 2
19017: ST_TO_ADDR
// break ;
19018: GO 19022
// end ; end ;
19020: GO 18959
19022: POP
19023: POP
// end ; end ;
19024: GO 18823
19026: POP
19027: POP
// if result and not asc then
19028: LD_VAR 0 6
19032: IFFALSE 19041
19034: PUSH
19035: LD_VAR 0 4
19039: NOT
19040: AND
19041: IFFALSE 19116
// begin tmp := result ;
19043: LD_ADDR_VAR 0 9
19047: PUSH
19048: LD_VAR 0 6
19052: ST_TO_ADDR
// for i = tmp downto 1 do
19053: LD_ADDR_VAR 0 7
19057: PUSH
19058: DOUBLE
19059: LD_VAR 0 9
19063: INC
19064: ST_TO_ADDR
19065: LD_INT 1
19067: PUSH
19068: FOR_DOWNTO
19069: IFFALSE 19114
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19071: LD_ADDR_VAR 0 6
19075: PUSH
19076: LD_VAR 0 6
19080: PPUSH
19081: LD_VAR 0 9
19085: PUSH
19086: LD_VAR 0 7
19090: MINUS
19091: PUSH
19092: LD_INT 1
19094: PLUS
19095: PPUSH
19096: LD_VAR 0 9
19100: PUSH
19101: LD_VAR 0 7
19105: ARRAY
19106: PPUSH
19107: CALL_OW 1
19111: ST_TO_ADDR
19112: GO 19068
19114: POP
19115: POP
// end ; tmp := [ ] ;
19116: LD_ADDR_VAR 0 9
19120: PUSH
19121: EMPTY
19122: ST_TO_ADDR
// if mode then
19123: LD_VAR 0 5
19127: IFFALSE 19196
// begin for i = 1 to result do
19129: LD_ADDR_VAR 0 7
19133: PUSH
19134: DOUBLE
19135: LD_INT 1
19137: DEC
19138: ST_TO_ADDR
19139: LD_VAR 0 6
19143: PUSH
19144: FOR_TO
19145: IFFALSE 19184
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19147: LD_ADDR_VAR 0 9
19151: PUSH
19152: LD_VAR 0 9
19156: PPUSH
19157: LD_VAR 0 7
19161: PPUSH
19162: LD_VAR 0 6
19166: PUSH
19167: LD_VAR 0 7
19171: ARRAY
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: PPUSH
19177: CALL_OW 1
19181: ST_TO_ADDR
19182: GO 19144
19184: POP
19185: POP
// result := tmp ;
19186: LD_ADDR_VAR 0 6
19190: PUSH
19191: LD_VAR 0 9
19195: ST_TO_ADDR
// end ; end ;
19196: LD_VAR 0 6
19200: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19201: LD_INT 0
19203: PPUSH
19204: PPUSH
19205: PPUSH
19206: PPUSH
19207: PPUSH
19208: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19209: LD_ADDR_VAR 0 5
19213: PUSH
19214: LD_INT 0
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: LD_INT 0
19222: PUSH
19223: EMPTY
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: ST_TO_ADDR
// if not x or not y then
19231: LD_VAR 0 2
19235: NOT
19236: IFTRUE 19245
19238: PUSH
19239: LD_VAR 0 3
19243: NOT
19244: OR
19245: IFFALSE 19249
// exit ;
19247: GO 20905
// if not range then
19249: LD_VAR 0 4
19253: NOT
19254: IFFALSE 19264
// range := 10 ;
19256: LD_ADDR_VAR 0 4
19260: PUSH
19261: LD_INT 10
19263: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19264: LD_ADDR_VAR 0 8
19268: PUSH
19269: LD_INT 81
19271: PUSH
19272: LD_VAR 0 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 92
19283: PUSH
19284: LD_VAR 0 2
19288: PUSH
19289: LD_VAR 0 3
19293: PUSH
19294: LD_VAR 0 4
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 3
19307: PUSH
19308: LD_INT 21
19310: PUSH
19311: LD_INT 3
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: LIST
19326: PPUSH
19327: CALL_OW 69
19331: ST_TO_ADDR
// if not tmp then
19332: LD_VAR 0 8
19336: NOT
19337: IFFALSE 19341
// exit ;
19339: GO 20905
// for i in tmp do
19341: LD_ADDR_VAR 0 6
19345: PUSH
19346: LD_VAR 0 8
19350: PUSH
19351: FOR_IN
19352: IFFALSE 20880
// begin points := [ 0 , 0 , 0 ] ;
19354: LD_ADDR_VAR 0 9
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: LIST
19372: ST_TO_ADDR
// bpoints := 1 ;
19373: LD_ADDR_VAR 0 10
19377: PUSH
19378: LD_INT 1
19380: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19381: LD_VAR 0 6
19385: PPUSH
19386: CALL_OW 247
19390: PUSH
19391: LD_INT 1
19393: DOUBLE
19394: EQUAL
19395: IFTRUE 19399
19397: GO 19981
19399: POP
// begin if GetClass ( i ) = 1 then
19400: LD_VAR 0 6
19404: PPUSH
19405: CALL_OW 257
19409: PUSH
19410: LD_INT 1
19412: EQUAL
19413: IFFALSE 19434
// points := [ 10 , 5 , 3 ] ;
19415: LD_ADDR_VAR 0 9
19419: PUSH
19420: LD_INT 10
19422: PUSH
19423: LD_INT 5
19425: PUSH
19426: LD_INT 3
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19434: LD_VAR 0 6
19438: PPUSH
19439: CALL_OW 257
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: LD_INT 3
19449: PUSH
19450: LD_INT 4
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: IN
19458: IFFALSE 19479
// points := [ 3 , 2 , 1 ] ;
19460: LD_ADDR_VAR 0 9
19464: PUSH
19465: LD_INT 3
19467: PUSH
19468: LD_INT 2
19470: PUSH
19471: LD_INT 1
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19479: LD_VAR 0 6
19483: PPUSH
19484: CALL_OW 257
19488: PUSH
19489: LD_INT 5
19491: EQUAL
19492: IFFALSE 19513
// points := [ 130 , 5 , 2 ] ;
19494: LD_ADDR_VAR 0 9
19498: PUSH
19499: LD_INT 130
19501: PUSH
19502: LD_INT 5
19504: PUSH
19505: LD_INT 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: LIST
19512: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19513: LD_VAR 0 6
19517: PPUSH
19518: CALL_OW 257
19522: PUSH
19523: LD_INT 8
19525: EQUAL
19526: IFFALSE 19547
// points := [ 35 , 35 , 30 ] ;
19528: LD_ADDR_VAR 0 9
19532: PUSH
19533: LD_INT 35
19535: PUSH
19536: LD_INT 35
19538: PUSH
19539: LD_INT 30
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19547: LD_VAR 0 6
19551: PPUSH
19552: CALL_OW 257
19556: PUSH
19557: LD_INT 9
19559: EQUAL
19560: IFFALSE 19581
// points := [ 20 , 55 , 40 ] ;
19562: LD_ADDR_VAR 0 9
19566: PUSH
19567: LD_INT 20
19569: PUSH
19570: LD_INT 55
19572: PUSH
19573: LD_INT 40
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19581: LD_VAR 0 6
19585: PPUSH
19586: CALL_OW 257
19590: PUSH
19591: LD_INT 12
19593: PUSH
19594: LD_INT 16
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: IN
19601: IFFALSE 19622
// points := [ 5 , 3 , 2 ] ;
19603: LD_ADDR_VAR 0 9
19607: PUSH
19608: LD_INT 5
19610: PUSH
19611: LD_INT 3
19613: PUSH
19614: LD_INT 2
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19622: LD_VAR 0 6
19626: PPUSH
19627: CALL_OW 257
19631: PUSH
19632: LD_INT 17
19634: EQUAL
19635: IFFALSE 19656
// points := [ 100 , 50 , 75 ] ;
19637: LD_ADDR_VAR 0 9
19641: PUSH
19642: LD_INT 100
19644: PUSH
19645: LD_INT 50
19647: PUSH
19648: LD_INT 75
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19656: LD_VAR 0 6
19660: PPUSH
19661: CALL_OW 257
19665: PUSH
19666: LD_INT 15
19668: EQUAL
19669: IFFALSE 19690
// points := [ 10 , 5 , 3 ] ;
19671: LD_ADDR_VAR 0 9
19675: PUSH
19676: LD_INT 10
19678: PUSH
19679: LD_INT 5
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19690: LD_VAR 0 6
19694: PPUSH
19695: CALL_OW 257
19699: PUSH
19700: LD_INT 14
19702: EQUAL
19703: IFFALSE 19724
// points := [ 10 , 0 , 0 ] ;
19705: LD_ADDR_VAR 0 9
19709: PUSH
19710: LD_INT 10
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: LD_INT 0
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: LIST
19723: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19724: LD_VAR 0 6
19728: PPUSH
19729: CALL_OW 257
19733: PUSH
19734: LD_INT 11
19736: EQUAL
19737: IFFALSE 19758
// points := [ 30 , 10 , 5 ] ;
19739: LD_ADDR_VAR 0 9
19743: PUSH
19744: LD_INT 30
19746: PUSH
19747: LD_INT 10
19749: PUSH
19750: LD_INT 5
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_INT 5
19765: PPUSH
19766: CALL_OW 321
19770: PUSH
19771: LD_INT 2
19773: EQUAL
19774: IFFALSE 19791
// bpoints := bpoints * 1.8 ;
19776: LD_ADDR_VAR 0 10
19780: PUSH
19781: LD_VAR 0 10
19785: PUSH
19786: LD_REAL  1.80000000000000E+0000
19789: MUL
19790: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19791: LD_VAR 0 6
19795: PPUSH
19796: CALL_OW 257
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 3
19809: PUSH
19810: LD_INT 4
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: IN
19819: IFFALSE 19839
19821: PUSH
19822: LD_VAR 0 1
19826: PPUSH
19827: LD_INT 51
19829: PPUSH
19830: CALL_OW 321
19834: PUSH
19835: LD_INT 2
19837: EQUAL
19838: AND
19839: IFFALSE 19856
// bpoints := bpoints * 1.2 ;
19841: LD_ADDR_VAR 0 10
19845: PUSH
19846: LD_VAR 0 10
19850: PUSH
19851: LD_REAL  1.20000000000000E+0000
19854: MUL
19855: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19856: LD_VAR 0 6
19860: PPUSH
19861: CALL_OW 257
19865: PUSH
19866: LD_INT 5
19868: PUSH
19869: LD_INT 7
19871: PUSH
19872: LD_INT 9
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: IN
19880: IFFALSE 19900
19882: PUSH
19883: LD_VAR 0 1
19887: PPUSH
19888: LD_INT 52
19890: PPUSH
19891: CALL_OW 321
19895: PUSH
19896: LD_INT 2
19898: EQUAL
19899: AND
19900: IFFALSE 19917
// bpoints := bpoints * 1.5 ;
19902: LD_ADDR_VAR 0 10
19906: PUSH
19907: LD_VAR 0 10
19911: PUSH
19912: LD_REAL  1.50000000000000E+0000
19915: MUL
19916: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19917: LD_VAR 0 1
19921: PPUSH
19922: LD_INT 66
19924: PPUSH
19925: CALL_OW 321
19929: PUSH
19930: LD_INT 2
19932: EQUAL
19933: IFFALSE 19950
// bpoints := bpoints * 1.1 ;
19935: LD_ADDR_VAR 0 10
19939: PUSH
19940: LD_VAR 0 10
19944: PUSH
19945: LD_REAL  1.10000000000000E+0000
19948: MUL
19949: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19950: LD_ADDR_VAR 0 10
19954: PUSH
19955: LD_VAR 0 10
19959: PUSH
19960: LD_VAR 0 6
19964: PPUSH
19965: LD_INT 1
19967: PPUSH
19968: CALL_OW 259
19972: PUSH
19973: LD_REAL  1.15000000000000E+0000
19976: MUL
19977: MUL
19978: ST_TO_ADDR
// end ; unit_vehicle :
19979: GO 20809
19981: LD_INT 2
19983: DOUBLE
19984: EQUAL
19985: IFTRUE 19989
19987: GO 20797
19989: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19990: LD_VAR 0 6
19994: PPUSH
19995: CALL_OW 264
19999: PUSH
20000: LD_INT 2
20002: PUSH
20003: LD_INT 42
20005: PUSH
20006: LD_INT 24
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: IN
20014: IFFALSE 20035
// points := [ 25 , 5 , 3 ] ;
20016: LD_ADDR_VAR 0 9
20020: PUSH
20021: LD_INT 25
20023: PUSH
20024: LD_INT 5
20026: PUSH
20027: LD_INT 3
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20035: LD_VAR 0 6
20039: PPUSH
20040: CALL_OW 264
20044: PUSH
20045: LD_INT 4
20047: PUSH
20048: LD_INT 43
20050: PUSH
20051: LD_INT 25
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: IN
20059: IFFALSE 20080
// points := [ 40 , 15 , 5 ] ;
20061: LD_ADDR_VAR 0 9
20065: PUSH
20066: LD_INT 40
20068: PUSH
20069: LD_INT 15
20071: PUSH
20072: LD_INT 5
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20080: LD_VAR 0 6
20084: PPUSH
20085: CALL_OW 264
20089: PUSH
20090: LD_INT 3
20092: PUSH
20093: LD_INT 23
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: IN
20100: IFFALSE 20121
// points := [ 7 , 25 , 8 ] ;
20102: LD_ADDR_VAR 0 9
20106: PUSH
20107: LD_INT 7
20109: PUSH
20110: LD_INT 25
20112: PUSH
20113: LD_INT 8
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20121: LD_VAR 0 6
20125: PPUSH
20126: CALL_OW 264
20130: PUSH
20131: LD_INT 5
20133: PUSH
20134: LD_INT 27
20136: PUSH
20137: LD_INT 44
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: IN
20145: IFFALSE 20166
// points := [ 14 , 50 , 16 ] ;
20147: LD_ADDR_VAR 0 9
20151: PUSH
20152: LD_INT 14
20154: PUSH
20155: LD_INT 50
20157: PUSH
20158: LD_INT 16
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: LIST
20165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20166: LD_VAR 0 6
20170: PPUSH
20171: CALL_OW 264
20175: PUSH
20176: LD_INT 6
20178: PUSH
20179: LD_INT 46
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: IN
20186: IFFALSE 20207
// points := [ 32 , 120 , 70 ] ;
20188: LD_ADDR_VAR 0 9
20192: PUSH
20193: LD_INT 32
20195: PUSH
20196: LD_INT 120
20198: PUSH
20199: LD_INT 70
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: LIST
20206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
20207: LD_VAR 0 6
20211: PPUSH
20212: CALL_OW 264
20216: PUSH
20217: LD_INT 7
20219: PUSH
20220: LD_INT 28
20222: PUSH
20223: LD_INT 45
20225: PUSH
20226: LD_INT 92
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: IN
20235: IFFALSE 20256
// points := [ 35 , 20 , 45 ] ;
20237: LD_ADDR_VAR 0 9
20241: PUSH
20242: LD_INT 35
20244: PUSH
20245: LD_INT 20
20247: PUSH
20248: LD_INT 45
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20256: LD_VAR 0 6
20260: PPUSH
20261: CALL_OW 264
20265: PUSH
20266: LD_INT 47
20268: PUSH
20269: EMPTY
20270: LIST
20271: IN
20272: IFFALSE 20293
// points := [ 67 , 45 , 75 ] ;
20274: LD_ADDR_VAR 0 9
20278: PUSH
20279: LD_INT 67
20281: PUSH
20282: LD_INT 45
20284: PUSH
20285: LD_INT 75
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20293: LD_VAR 0 6
20297: PPUSH
20298: CALL_OW 264
20302: PUSH
20303: LD_INT 26
20305: PUSH
20306: EMPTY
20307: LIST
20308: IN
20309: IFFALSE 20330
// points := [ 120 , 30 , 80 ] ;
20311: LD_ADDR_VAR 0 9
20315: PUSH
20316: LD_INT 120
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 80
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20330: LD_VAR 0 6
20334: PPUSH
20335: CALL_OW 264
20339: PUSH
20340: LD_INT 22
20342: PUSH
20343: EMPTY
20344: LIST
20345: IN
20346: IFFALSE 20367
// points := [ 40 , 1 , 1 ] ;
20348: LD_ADDR_VAR 0 9
20352: PUSH
20353: LD_INT 40
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20367: LD_VAR 0 6
20371: PPUSH
20372: CALL_OW 264
20376: PUSH
20377: LD_INT 29
20379: PUSH
20380: EMPTY
20381: LIST
20382: IN
20383: IFFALSE 20404
// points := [ 70 , 200 , 400 ] ;
20385: LD_ADDR_VAR 0 9
20389: PUSH
20390: LD_INT 70
20392: PUSH
20393: LD_INT 200
20395: PUSH
20396: LD_INT 400
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: LIST
20403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20404: LD_VAR 0 6
20408: PPUSH
20409: CALL_OW 264
20413: PUSH
20414: LD_INT 14
20416: PUSH
20417: LD_INT 53
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: IN
20424: IFFALSE 20445
// points := [ 40 , 10 , 20 ] ;
20426: LD_ADDR_VAR 0 9
20430: PUSH
20431: LD_INT 40
20433: PUSH
20434: LD_INT 10
20436: PUSH
20437: LD_INT 20
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: LIST
20444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20445: LD_VAR 0 6
20449: PPUSH
20450: CALL_OW 264
20454: PUSH
20455: LD_INT 9
20457: PUSH
20458: EMPTY
20459: LIST
20460: IN
20461: IFFALSE 20482
// points := [ 5 , 70 , 20 ] ;
20463: LD_ADDR_VAR 0 9
20467: PUSH
20468: LD_INT 5
20470: PUSH
20471: LD_INT 70
20473: PUSH
20474: LD_INT 20
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20482: LD_VAR 0 6
20486: PPUSH
20487: CALL_OW 264
20491: PUSH
20492: LD_INT 10
20494: PUSH
20495: EMPTY
20496: LIST
20497: IN
20498: IFFALSE 20519
// points := [ 35 , 110 , 70 ] ;
20500: LD_ADDR_VAR 0 9
20504: PUSH
20505: LD_INT 35
20507: PUSH
20508: LD_INT 110
20510: PUSH
20511: LD_INT 70
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: LIST
20518: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20519: LD_VAR 0 6
20523: PPUSH
20524: CALL_OW 265
20528: PUSH
20529: LD_INT 25
20531: EQUAL
20532: IFFALSE 20553
// points := [ 80 , 65 , 100 ] ;
20534: LD_ADDR_VAR 0 9
20538: PUSH
20539: LD_INT 80
20541: PUSH
20542: LD_INT 65
20544: PUSH
20545: LD_INT 100
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20553: LD_VAR 0 6
20557: PPUSH
20558: CALL_OW 263
20562: PUSH
20563: LD_INT 1
20565: EQUAL
20566: IFFALSE 20601
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20568: LD_ADDR_VAR 0 10
20572: PUSH
20573: LD_VAR 0 10
20577: PUSH
20578: LD_VAR 0 6
20582: PPUSH
20583: CALL_OW 311
20587: PPUSH
20588: LD_INT 3
20590: PPUSH
20591: CALL_OW 259
20595: PUSH
20596: LD_INT 4
20598: MUL
20599: MUL
20600: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20601: LD_VAR 0 6
20605: PPUSH
20606: CALL_OW 263
20610: PUSH
20611: LD_INT 2
20613: EQUAL
20614: IFFALSE 20665
// begin j := IsControledBy ( i ) ;
20616: LD_ADDR_VAR 0 7
20620: PUSH
20621: LD_VAR 0 6
20625: PPUSH
20626: CALL_OW 312
20630: ST_TO_ADDR
// if j then
20631: LD_VAR 0 7
20635: IFFALSE 20665
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20637: LD_ADDR_VAR 0 10
20641: PUSH
20642: LD_VAR 0 10
20646: PUSH
20647: LD_VAR 0 7
20651: PPUSH
20652: LD_INT 3
20654: PPUSH
20655: CALL_OW 259
20659: PUSH
20660: LD_INT 3
20662: MUL
20663: MUL
20664: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20665: LD_VAR 0 6
20669: PPUSH
20670: CALL_OW 264
20674: PUSH
20675: LD_INT 5
20677: PUSH
20678: LD_INT 6
20680: PUSH
20681: LD_INT 46
20683: PUSH
20684: LD_INT 44
20686: PUSH
20687: LD_INT 47
20689: PUSH
20690: LD_INT 45
20692: PUSH
20693: LD_INT 28
20695: PUSH
20696: LD_INT 7
20698: PUSH
20699: LD_INT 27
20701: PUSH
20702: LD_INT 29
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: IN
20717: IFFALSE 20737
20719: PUSH
20720: LD_VAR 0 1
20724: PPUSH
20725: LD_INT 52
20727: PPUSH
20728: CALL_OW 321
20732: PUSH
20733: LD_INT 2
20735: EQUAL
20736: AND
20737: IFFALSE 20754
// bpoints := bpoints * 1.2 ;
20739: LD_ADDR_VAR 0 10
20743: PUSH
20744: LD_VAR 0 10
20748: PUSH
20749: LD_REAL  1.20000000000000E+0000
20752: MUL
20753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20754: LD_VAR 0 6
20758: PPUSH
20759: CALL_OW 264
20763: PUSH
20764: LD_INT 6
20766: PUSH
20767: LD_INT 46
20769: PUSH
20770: LD_INT 47
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: IN
20778: IFFALSE 20795
// bpoints := bpoints * 1.2 ;
20780: LD_ADDR_VAR 0 10
20784: PUSH
20785: LD_VAR 0 10
20789: PUSH
20790: LD_REAL  1.20000000000000E+0000
20793: MUL
20794: ST_TO_ADDR
// end ; unit_building :
20795: GO 20809
20797: LD_INT 3
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20808
20805: POP
// ; end ;
20806: GO 20809
20808: POP
// for j = 1 to 3 do
20809: LD_ADDR_VAR 0 7
20813: PUSH
20814: DOUBLE
20815: LD_INT 1
20817: DEC
20818: ST_TO_ADDR
20819: LD_INT 3
20821: PUSH
20822: FOR_TO
20823: IFFALSE 20876
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20825: LD_ADDR_VAR 0 5
20829: PUSH
20830: LD_VAR 0 5
20834: PPUSH
20835: LD_VAR 0 7
20839: PPUSH
20840: LD_VAR 0 5
20844: PUSH
20845: LD_VAR 0 7
20849: ARRAY
20850: PUSH
20851: LD_VAR 0 9
20855: PUSH
20856: LD_VAR 0 7
20860: ARRAY
20861: PUSH
20862: LD_VAR 0 10
20866: MUL
20867: PLUS
20868: PPUSH
20869: CALL_OW 1
20873: ST_TO_ADDR
20874: GO 20822
20876: POP
20877: POP
// end ;
20878: GO 19351
20880: POP
20881: POP
// result := Replace ( result , 4 , tmp ) ;
20882: LD_ADDR_VAR 0 5
20886: PUSH
20887: LD_VAR 0 5
20891: PPUSH
20892: LD_INT 4
20894: PPUSH
20895: LD_VAR 0 8
20899: PPUSH
20900: CALL_OW 1
20904: ST_TO_ADDR
// end ;
20905: LD_VAR 0 5
20909: RET
// export function DangerAtRange ( unit , range ) ; begin
20910: LD_INT 0
20912: PPUSH
// if not unit then
20913: LD_VAR 0 1
20917: NOT
20918: IFFALSE 20922
// exit ;
20920: GO 20967
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20922: LD_ADDR_VAR 0 3
20926: PUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 255
20936: PPUSH
20937: LD_VAR 0 1
20941: PPUSH
20942: CALL_OW 250
20946: PPUSH
20947: LD_VAR 0 1
20951: PPUSH
20952: CALL_OW 251
20956: PPUSH
20957: LD_VAR 0 2
20961: PPUSH
20962: CALL 19201 0 4
20966: ST_TO_ADDR
// end ;
20967: LD_VAR 0 3
20971: RET
// export function DangerInArea ( side , area ) ; begin
20972: LD_INT 0
20974: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20975: LD_ADDR_VAR 0 3
20979: PUSH
20980: LD_VAR 0 2
20984: PPUSH
20985: LD_INT 81
20987: PUSH
20988: LD_VAR 0 1
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 70
21001: ST_TO_ADDR
// end ;
21002: LD_VAR 0 3
21006: RET
// export function IsExtension ( b ) ; begin
21007: LD_INT 0
21009: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21010: LD_ADDR_VAR 0 2
21014: PUSH
21015: LD_VAR 0 1
21019: PUSH
21020: LD_INT 23
21022: PUSH
21023: LD_INT 20
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_INT 17
21031: PUSH
21032: LD_INT 24
21034: PUSH
21035: LD_INT 21
21037: PUSH
21038: LD_INT 19
21040: PUSH
21041: LD_INT 16
21043: PUSH
21044: LD_INT 25
21046: PUSH
21047: LD_INT 18
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: IN
21062: ST_TO_ADDR
// end ;
21063: LD_VAR 0 2
21067: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21068: LD_INT 0
21070: PPUSH
21071: PPUSH
21072: PPUSH
// result := [ ] ;
21073: LD_ADDR_VAR 0 4
21077: PUSH
21078: EMPTY
21079: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21080: LD_ADDR_VAR 0 5
21084: PUSH
21085: LD_VAR 0 2
21089: PPUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 3
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PPUSH
21100: CALL_OW 70
21104: ST_TO_ADDR
// if not tmp then
21105: LD_VAR 0 5
21109: NOT
21110: IFFALSE 21114
// exit ;
21112: GO 21178
// if checkLink then
21114: LD_VAR 0 3
21118: IFFALSE 21168
// begin for i in tmp do
21120: LD_ADDR_VAR 0 6
21124: PUSH
21125: LD_VAR 0 5
21129: PUSH
21130: FOR_IN
21131: IFFALSE 21166
// if GetBase ( i ) <> base then
21133: LD_VAR 0 6
21137: PPUSH
21138: CALL_OW 274
21142: PUSH
21143: LD_VAR 0 1
21147: NONEQUAL
21148: IFFALSE 21164
// ComLinkToBase ( base , i ) ;
21150: LD_VAR 0 1
21154: PPUSH
21155: LD_VAR 0 6
21159: PPUSH
21160: CALL_OW 169
21164: GO 21130
21166: POP
21167: POP
// end ; result := tmp ;
21168: LD_ADDR_VAR 0 4
21172: PUSH
21173: LD_VAR 0 5
21177: ST_TO_ADDR
// end ;
21178: LD_VAR 0 4
21182: RET
// export function ComComplete ( units , b ) ; var i ; begin
21183: LD_INT 0
21185: PPUSH
21186: PPUSH
// if not units then
21187: LD_VAR 0 1
21191: NOT
21192: IFFALSE 21196
// exit ;
21194: GO 21286
// for i in units do
21196: LD_ADDR_VAR 0 4
21200: PUSH
21201: LD_VAR 0 1
21205: PUSH
21206: FOR_IN
21207: IFFALSE 21284
// if BuildingStatus ( b ) = bs_build then
21209: LD_VAR 0 2
21213: PPUSH
21214: CALL_OW 461
21218: PUSH
21219: LD_INT 1
21221: EQUAL
21222: IFFALSE 21282
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21224: LD_VAR 0 4
21228: PPUSH
21229: LD_STRING h
21231: PUSH
21232: LD_VAR 0 2
21236: PPUSH
21237: CALL_OW 250
21241: PUSH
21242: LD_VAR 0 2
21246: PPUSH
21247: CALL_OW 251
21251: PUSH
21252: LD_VAR 0 2
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: PPUSH
21278: CALL_OW 446
21282: GO 21206
21284: POP
21285: POP
// end ;
21286: LD_VAR 0 3
21290: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
21295: PPUSH
21296: PPUSH
21297: PPUSH
21298: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
21299: LD_VAR 0 1
21303: NOT
21304: IFTRUE 21321
21306: PUSH
21307: LD_VAR 0 1
21311: PPUSH
21312: CALL_OW 263
21316: PUSH
21317: LD_INT 2
21319: NONEQUAL
21320: OR
21321: IFFALSE 21325
// exit ;
21323: GO 21641
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21325: LD_ADDR_VAR 0 6
21329: PUSH
21330: LD_INT 22
21332: PUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 255
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 30
21352: PUSH
21353: LD_INT 36
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 34
21362: PUSH
21363: LD_INT 31
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PPUSH
21379: CALL_OW 69
21383: ST_TO_ADDR
// if not tmp then
21384: LD_VAR 0 6
21388: NOT
21389: IFFALSE 21393
// exit ;
21391: GO 21641
// result := [ ] ;
21393: LD_ADDR_VAR 0 2
21397: PUSH
21398: EMPTY
21399: ST_TO_ADDR
// for i in tmp do
21400: LD_ADDR_VAR 0 3
21404: PUSH
21405: LD_VAR 0 6
21409: PUSH
21410: FOR_IN
21411: IFFALSE 21482
// begin t := UnitsInside ( i ) ;
21413: LD_ADDR_VAR 0 4
21417: PUSH
21418: LD_VAR 0 3
21422: PPUSH
21423: CALL_OW 313
21427: ST_TO_ADDR
// if t then
21428: LD_VAR 0 4
21432: IFFALSE 21480
// for j in t do
21434: LD_ADDR_VAR 0 7
21438: PUSH
21439: LD_VAR 0 4
21443: PUSH
21444: FOR_IN
21445: IFFALSE 21478
// result := Replace ( result , result + 1 , j ) ;
21447: LD_ADDR_VAR 0 2
21451: PUSH
21452: LD_VAR 0 2
21456: PPUSH
21457: LD_VAR 0 2
21461: PUSH
21462: LD_INT 1
21464: PLUS
21465: PPUSH
21466: LD_VAR 0 7
21470: PPUSH
21471: CALL_OW 1
21475: ST_TO_ADDR
21476: GO 21444
21478: POP
21479: POP
// end ;
21480: GO 21410
21482: POP
21483: POP
// if not result then
21484: LD_VAR 0 2
21488: NOT
21489: IFFALSE 21493
// exit ;
21491: GO 21641
// mech := result [ 1 ] ;
21493: LD_ADDR_VAR 0 5
21497: PUSH
21498: LD_VAR 0 2
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: ST_TO_ADDR
// if result > 1 then
21507: LD_VAR 0 2
21511: PUSH
21512: LD_INT 1
21514: GREATER
21515: IFFALSE 21627
// begin for i = 2 to result do
21517: LD_ADDR_VAR 0 3
21521: PUSH
21522: DOUBLE
21523: LD_INT 2
21525: DEC
21526: ST_TO_ADDR
21527: LD_VAR 0 2
21531: PUSH
21532: FOR_TO
21533: IFFALSE 21625
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21535: LD_ADDR_VAR 0 4
21539: PUSH
21540: LD_VAR 0 2
21544: PUSH
21545: LD_VAR 0 3
21549: ARRAY
21550: PPUSH
21551: LD_INT 3
21553: PPUSH
21554: CALL_OW 259
21558: PUSH
21559: LD_VAR 0 2
21563: PUSH
21564: LD_VAR 0 3
21568: ARRAY
21569: PPUSH
21570: CALL_OW 432
21574: MINUS
21575: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21576: LD_VAR 0 4
21580: PUSH
21581: LD_VAR 0 5
21585: PPUSH
21586: LD_INT 3
21588: PPUSH
21589: CALL_OW 259
21593: PUSH
21594: LD_VAR 0 5
21598: PPUSH
21599: CALL_OW 432
21603: MINUS
21604: GREATEREQUAL
21605: IFFALSE 21623
// mech := result [ i ] ;
21607: LD_ADDR_VAR 0 5
21611: PUSH
21612: LD_VAR 0 2
21616: PUSH
21617: LD_VAR 0 3
21621: ARRAY
21622: ST_TO_ADDR
// end ;
21623: GO 21532
21625: POP
21626: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21627: LD_VAR 0 1
21631: PPUSH
21632: LD_VAR 0 5
21636: PPUSH
21637: CALL_OW 135
// end ;
21641: LD_VAR 0 2
21645: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
21658: PPUSH
21659: PPUSH
21660: PPUSH
// result := [ ] ;
21661: LD_ADDR_VAR 0 7
21665: PUSH
21666: EMPTY
21667: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21668: LD_VAR 0 1
21672: PPUSH
21673: CALL_OW 266
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: IN
21688: NOT
21689: IFFALSE 21693
// exit ;
21691: GO 23333
// if name then
21693: LD_VAR 0 3
21697: IFFALSE 21713
// SetBName ( base_dep , name ) ;
21699: LD_VAR 0 1
21703: PPUSH
21704: LD_VAR 0 3
21708: PPUSH
21709: CALL_OW 500
// base := GetBase ( base_dep ) ;
21713: LD_ADDR_VAR 0 15
21717: PUSH
21718: LD_VAR 0 1
21722: PPUSH
21723: CALL_OW 274
21727: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21728: LD_ADDR_VAR 0 16
21732: PUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 255
21742: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21743: LD_ADDR_VAR 0 17
21747: PUSH
21748: LD_VAR 0 1
21752: PPUSH
21753: CALL_OW 248
21757: ST_TO_ADDR
// if sources then
21758: LD_VAR 0 5
21762: IFFALSE 21809
// for i = 1 to 3 do
21764: LD_ADDR_VAR 0 8
21768: PUSH
21769: DOUBLE
21770: LD_INT 1
21772: DEC
21773: ST_TO_ADDR
21774: LD_INT 3
21776: PUSH
21777: FOR_TO
21778: IFFALSE 21807
// AddResourceType ( base , i , sources [ i ] ) ;
21780: LD_VAR 0 15
21784: PPUSH
21785: LD_VAR 0 8
21789: PPUSH
21790: LD_VAR 0 5
21794: PUSH
21795: LD_VAR 0 8
21799: ARRAY
21800: PPUSH
21801: CALL_OW 276
21805: GO 21777
21807: POP
21808: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21809: LD_ADDR_VAR 0 18
21813: PUSH
21814: LD_VAR 0 15
21818: PPUSH
21819: LD_VAR 0 2
21823: PPUSH
21824: LD_INT 1
21826: PPUSH
21827: CALL 21068 0 3
21831: ST_TO_ADDR
// InitHc ;
21832: CALL_OW 19
// InitUc ;
21836: CALL_OW 18
// uc_side := side ;
21840: LD_ADDR_OWVAR 20
21844: PUSH
21845: LD_VAR 0 16
21849: ST_TO_ADDR
// uc_nation := nation ;
21850: LD_ADDR_OWVAR 21
21854: PUSH
21855: LD_VAR 0 17
21859: ST_TO_ADDR
// if buildings then
21860: LD_VAR 0 18
21864: IFFALSE 23192
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21866: LD_ADDR_VAR 0 19
21870: PUSH
21871: LD_VAR 0 18
21875: PPUSH
21876: LD_INT 2
21878: PUSH
21879: LD_INT 30
21881: PUSH
21882: LD_INT 29
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 30
21891: PUSH
21892: LD_INT 30
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: LIST
21903: PPUSH
21904: CALL_OW 72
21908: ST_TO_ADDR
// if tmp then
21909: LD_VAR 0 19
21913: IFFALSE 21961
// for i in tmp do
21915: LD_ADDR_VAR 0 8
21919: PUSH
21920: LD_VAR 0 19
21924: PUSH
21925: FOR_IN
21926: IFFALSE 21959
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21928: LD_VAR 0 8
21932: PPUSH
21933: CALL_OW 250
21937: PPUSH
21938: LD_VAR 0 8
21942: PPUSH
21943: CALL_OW 251
21947: PPUSH
21948: LD_VAR 0 16
21952: PPUSH
21953: CALL_OW 441
21957: GO 21925
21959: POP
21960: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21961: LD_VAR 0 18
21965: PPUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 32
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 30
21981: PUSH
21982: LD_INT 33
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: PPUSH
21994: CALL_OW 72
21998: IFFALSE 22086
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22000: LD_ADDR_VAR 0 8
22004: PUSH
22005: LD_VAR 0 18
22009: PPUSH
22010: LD_INT 2
22012: PUSH
22013: LD_INT 30
22015: PUSH
22016: LD_INT 32
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 30
22025: PUSH
22026: LD_INT 33
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: PPUSH
22038: CALL_OW 72
22042: PUSH
22043: FOR_IN
22044: IFFALSE 22084
// begin if not GetBWeapon ( i ) then
22046: LD_VAR 0 8
22050: PPUSH
22051: CALL_OW 269
22055: NOT
22056: IFFALSE 22082
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22058: LD_VAR 0 8
22062: PPUSH
22063: LD_VAR 0 8
22067: PPUSH
22068: LD_VAR 0 2
22072: PPUSH
22073: CALL 23338 0 2
22077: PPUSH
22078: CALL_OW 431
// end ;
22082: GO 22043
22084: POP
22085: POP
// end ; for i = 1 to personel do
22086: LD_ADDR_VAR 0 8
22090: PUSH
22091: DOUBLE
22092: LD_INT 1
22094: DEC
22095: ST_TO_ADDR
22096: LD_VAR 0 6
22100: PUSH
22101: FOR_TO
22102: IFFALSE 23172
// begin if i > 4 then
22104: LD_VAR 0 8
22108: PUSH
22109: LD_INT 4
22111: GREATER
22112: IFFALSE 22116
// break ;
22114: GO 23172
// case i of 1 :
22116: LD_VAR 0 8
22120: PUSH
22121: LD_INT 1
22123: DOUBLE
22124: EQUAL
22125: IFTRUE 22129
22127: GO 22209
22129: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22130: LD_ADDR_VAR 0 12
22134: PUSH
22135: LD_VAR 0 18
22139: PPUSH
22140: LD_INT 22
22142: PUSH
22143: LD_VAR 0 16
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 58
22154: PUSH
22155: EMPTY
22156: LIST
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 30
22163: PUSH
22164: LD_INT 32
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 30
22173: PUSH
22174: LD_INT 4
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 30
22183: PUSH
22184: LD_INT 5
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 72
22206: ST_TO_ADDR
22207: GO 22431
22209: LD_INT 2
22211: DOUBLE
22212: EQUAL
22213: IFTRUE 22217
22215: GO 22279
22217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22218: LD_ADDR_VAR 0 12
22222: PUSH
22223: LD_VAR 0 18
22227: PPUSH
22228: LD_INT 22
22230: PUSH
22231: LD_VAR 0 16
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 2
22242: PUSH
22243: LD_INT 30
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 30
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: LIST
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PPUSH
22272: CALL_OW 72
22276: ST_TO_ADDR
22277: GO 22431
22279: LD_INT 3
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22349
22287: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22288: LD_ADDR_VAR 0 12
22292: PUSH
22293: LD_VAR 0 18
22297: PPUSH
22298: LD_INT 22
22300: PUSH
22301: LD_VAR 0 16
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 2
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 30
22325: PUSH
22326: LD_INT 3
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PPUSH
22342: CALL_OW 72
22346: ST_TO_ADDR
22347: GO 22431
22349: LD_INT 4
22351: DOUBLE
22352: EQUAL
22353: IFTRUE 22357
22355: GO 22430
22357: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22358: LD_ADDR_VAR 0 12
22362: PUSH
22363: LD_VAR 0 18
22367: PPUSH
22368: LD_INT 22
22370: PUSH
22371: LD_VAR 0 16
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: LD_INT 30
22385: PUSH
22386: LD_INT 6
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 30
22395: PUSH
22396: LD_INT 7
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 30
22405: PUSH
22406: LD_INT 8
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PPUSH
22423: CALL_OW 72
22427: ST_TO_ADDR
22428: GO 22431
22430: POP
// if i = 1 then
22431: LD_VAR 0 8
22435: PUSH
22436: LD_INT 1
22438: EQUAL
22439: IFFALSE 22550
// begin tmp := [ ] ;
22441: LD_ADDR_VAR 0 19
22445: PUSH
22446: EMPTY
22447: ST_TO_ADDR
// for j in f do
22448: LD_ADDR_VAR 0 9
22452: PUSH
22453: LD_VAR 0 12
22457: PUSH
22458: FOR_IN
22459: IFFALSE 22532
// if GetBType ( j ) = b_bunker then
22461: LD_VAR 0 9
22465: PPUSH
22466: CALL_OW 266
22470: PUSH
22471: LD_INT 32
22473: EQUAL
22474: IFFALSE 22501
// tmp := Insert ( tmp , 1 , j ) else
22476: LD_ADDR_VAR 0 19
22480: PUSH
22481: LD_VAR 0 19
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: LD_VAR 0 9
22493: PPUSH
22494: CALL_OW 2
22498: ST_TO_ADDR
22499: GO 22530
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22501: LD_ADDR_VAR 0 19
22505: PUSH
22506: LD_VAR 0 19
22510: PPUSH
22511: LD_VAR 0 19
22515: PUSH
22516: LD_INT 1
22518: PLUS
22519: PPUSH
22520: LD_VAR 0 9
22524: PPUSH
22525: CALL_OW 2
22529: ST_TO_ADDR
22530: GO 22458
22532: POP
22533: POP
// if tmp then
22534: LD_VAR 0 19
22538: IFFALSE 22550
// f := tmp ;
22540: LD_ADDR_VAR 0 12
22544: PUSH
22545: LD_VAR 0 19
22549: ST_TO_ADDR
// end ; x := personel [ i ] ;
22550: LD_ADDR_VAR 0 13
22554: PUSH
22555: LD_VAR 0 6
22559: PUSH
22560: LD_VAR 0 8
22564: ARRAY
22565: ST_TO_ADDR
// if x = - 1 then
22566: LD_VAR 0 13
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: EQUAL
22575: IFFALSE 22786
// begin for j in f do
22577: LD_ADDR_VAR 0 9
22581: PUSH
22582: LD_VAR 0 12
22586: PUSH
22587: FOR_IN
22588: IFFALSE 22782
// repeat InitHc ;
22590: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22594: LD_VAR 0 9
22598: PPUSH
22599: CALL_OW 266
22603: PUSH
22604: LD_INT 5
22606: EQUAL
22607: IFFALSE 22677
// begin if UnitsInside ( j ) < 3 then
22609: LD_VAR 0 9
22613: PPUSH
22614: CALL_OW 313
22618: PUSH
22619: LD_INT 3
22621: LESS
22622: IFFALSE 22658
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22624: LD_INT 0
22626: PPUSH
22627: LD_INT 5
22629: PUSH
22630: LD_INT 8
22632: PUSH
22633: LD_INT 9
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: PUSH
22641: LD_VAR 0 17
22645: ARRAY
22646: PPUSH
22647: LD_VAR 0 4
22651: PPUSH
22652: CALL_OW 380
22656: GO 22675
// PrepareHuman ( false , i , skill ) ;
22658: LD_INT 0
22660: PPUSH
22661: LD_VAR 0 8
22665: PPUSH
22666: LD_VAR 0 4
22670: PPUSH
22671: CALL_OW 380
// end else
22675: GO 22694
// PrepareHuman ( false , i , skill ) ;
22677: LD_INT 0
22679: PPUSH
22680: LD_VAR 0 8
22684: PPUSH
22685: LD_VAR 0 4
22689: PPUSH
22690: CALL_OW 380
// un := CreateHuman ;
22694: LD_ADDR_VAR 0 14
22698: PUSH
22699: CALL_OW 44
22703: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22704: LD_ADDR_VAR 0 7
22708: PUSH
22709: LD_VAR 0 7
22713: PPUSH
22714: LD_INT 1
22716: PPUSH
22717: LD_VAR 0 14
22721: PPUSH
22722: CALL_OW 2
22726: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22727: LD_VAR 0 14
22731: PPUSH
22732: LD_VAR 0 9
22736: PPUSH
22737: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22741: LD_VAR 0 9
22745: PPUSH
22746: CALL_OW 313
22750: PUSH
22751: LD_INT 6
22753: EQUAL
22754: IFTRUE 22778
22756: PUSH
22757: LD_VAR 0 9
22761: PPUSH
22762: CALL_OW 266
22766: PUSH
22767: LD_INT 32
22769: PUSH
22770: LD_INT 31
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: IN
22777: OR
22778: IFFALSE 22590
22780: GO 22587
22782: POP
22783: POP
// end else
22784: GO 23170
// for j = 1 to x do
22786: LD_ADDR_VAR 0 9
22790: PUSH
22791: DOUBLE
22792: LD_INT 1
22794: DEC
22795: ST_TO_ADDR
22796: LD_VAR 0 13
22800: PUSH
22801: FOR_TO
22802: IFFALSE 23168
// begin InitHc ;
22804: CALL_OW 19
// if not f then
22808: LD_VAR 0 12
22812: NOT
22813: IFFALSE 22902
// begin PrepareHuman ( false , i , skill ) ;
22815: LD_INT 0
22817: PPUSH
22818: LD_VAR 0 8
22822: PPUSH
22823: LD_VAR 0 4
22827: PPUSH
22828: CALL_OW 380
// un := CreateHuman ;
22832: LD_ADDR_VAR 0 14
22836: PUSH
22837: CALL_OW 44
22841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22842: LD_ADDR_VAR 0 7
22846: PUSH
22847: LD_VAR 0 7
22851: PPUSH
22852: LD_INT 1
22854: PPUSH
22855: LD_VAR 0 14
22859: PPUSH
22860: CALL_OW 2
22864: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22865: LD_VAR 0 14
22869: PPUSH
22870: LD_VAR 0 1
22874: PPUSH
22875: CALL_OW 250
22879: PPUSH
22880: LD_VAR 0 1
22884: PPUSH
22885: CALL_OW 251
22889: PPUSH
22890: LD_INT 10
22892: PPUSH
22893: LD_INT 0
22895: PPUSH
22896: CALL_OW 50
// continue ;
22900: GO 22801
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22902: LD_VAR 0 12
22906: PUSH
22907: LD_INT 1
22909: ARRAY
22910: PPUSH
22911: CALL_OW 313
22915: IFFALSE 22943
22917: PUSH
22918: LD_VAR 0 12
22922: PUSH
22923: LD_INT 1
22925: ARRAY
22926: PPUSH
22927: CALL_OW 266
22931: PUSH
22932: LD_INT 32
22934: PUSH
22935: LD_INT 31
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: IN
22942: AND
22943: IFTRUE 22964
22945: PUSH
22946: LD_VAR 0 12
22950: PUSH
22951: LD_INT 1
22953: ARRAY
22954: PPUSH
22955: CALL_OW 313
22959: PUSH
22960: LD_INT 6
22962: EQUAL
22963: OR
22964: IFFALSE 22984
// f := Delete ( f , 1 ) ;
22966: LD_ADDR_VAR 0 12
22970: PUSH
22971: LD_VAR 0 12
22975: PPUSH
22976: LD_INT 1
22978: PPUSH
22979: CALL_OW 3
22983: ST_TO_ADDR
// if not f then
22984: LD_VAR 0 12
22988: NOT
22989: IFFALSE 23007
// begin x := x + 2 ;
22991: LD_ADDR_VAR 0 13
22995: PUSH
22996: LD_VAR 0 13
23000: PUSH
23001: LD_INT 2
23003: PLUS
23004: ST_TO_ADDR
// continue ;
23005: GO 22801
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23007: LD_VAR 0 12
23011: PUSH
23012: LD_INT 1
23014: ARRAY
23015: PPUSH
23016: CALL_OW 266
23020: PUSH
23021: LD_INT 5
23023: EQUAL
23024: IFFALSE 23098
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23026: LD_VAR 0 12
23030: PUSH
23031: LD_INT 1
23033: ARRAY
23034: PPUSH
23035: CALL_OW 313
23039: PUSH
23040: LD_INT 3
23042: LESS
23043: IFFALSE 23079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23045: LD_INT 0
23047: PPUSH
23048: LD_INT 5
23050: PUSH
23051: LD_INT 8
23053: PUSH
23054: LD_INT 9
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: LD_VAR 0 17
23066: ARRAY
23067: PPUSH
23068: LD_VAR 0 4
23072: PPUSH
23073: CALL_OW 380
23077: GO 23096
// PrepareHuman ( false , i , skill ) ;
23079: LD_INT 0
23081: PPUSH
23082: LD_VAR 0 8
23086: PPUSH
23087: LD_VAR 0 4
23091: PPUSH
23092: CALL_OW 380
// end else
23096: GO 23115
// PrepareHuman ( false , i , skill ) ;
23098: LD_INT 0
23100: PPUSH
23101: LD_VAR 0 8
23105: PPUSH
23106: LD_VAR 0 4
23110: PPUSH
23111: CALL_OW 380
// un := CreateHuman ;
23115: LD_ADDR_VAR 0 14
23119: PUSH
23120: CALL_OW 44
23124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23125: LD_ADDR_VAR 0 7
23129: PUSH
23130: LD_VAR 0 7
23134: PPUSH
23135: LD_INT 1
23137: PPUSH
23138: LD_VAR 0 14
23142: PPUSH
23143: CALL_OW 2
23147: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23148: LD_VAR 0 14
23152: PPUSH
23153: LD_VAR 0 12
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: CALL_OW 52
// end ;
23166: GO 22801
23168: POP
23169: POP
// end ;
23170: GO 22101
23172: POP
23173: POP
// result := result ^ buildings ;
23174: LD_ADDR_VAR 0 7
23178: PUSH
23179: LD_VAR 0 7
23183: PUSH
23184: LD_VAR 0 18
23188: ADD
23189: ST_TO_ADDR
// end else
23190: GO 23333
// begin for i = 1 to personel do
23192: LD_ADDR_VAR 0 8
23196: PUSH
23197: DOUBLE
23198: LD_INT 1
23200: DEC
23201: ST_TO_ADDR
23202: LD_VAR 0 6
23206: PUSH
23207: FOR_TO
23208: IFFALSE 23331
// begin if i > 4 then
23210: LD_VAR 0 8
23214: PUSH
23215: LD_INT 4
23217: GREATER
23218: IFFALSE 23222
// break ;
23220: GO 23331
// x := personel [ i ] ;
23222: LD_ADDR_VAR 0 13
23226: PUSH
23227: LD_VAR 0 6
23231: PUSH
23232: LD_VAR 0 8
23236: ARRAY
23237: ST_TO_ADDR
// if x = - 1 then
23238: LD_VAR 0 13
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: EQUAL
23247: IFFALSE 23251
// continue ;
23249: GO 23207
// PrepareHuman ( false , i , skill ) ;
23251: LD_INT 0
23253: PPUSH
23254: LD_VAR 0 8
23258: PPUSH
23259: LD_VAR 0 4
23263: PPUSH
23264: CALL_OW 380
// un := CreateHuman ;
23268: LD_ADDR_VAR 0 14
23272: PUSH
23273: CALL_OW 44
23277: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23278: LD_VAR 0 14
23282: PPUSH
23283: LD_VAR 0 1
23287: PPUSH
23288: CALL_OW 250
23292: PPUSH
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 251
23302: PPUSH
23303: LD_INT 10
23305: PPUSH
23306: LD_INT 0
23308: PPUSH
23309: CALL_OW 50
// result := result ^ un ;
23313: LD_ADDR_VAR 0 7
23317: PUSH
23318: LD_VAR 0 7
23322: PUSH
23323: LD_VAR 0 14
23327: ADD
23328: ST_TO_ADDR
// end ;
23329: GO 23207
23331: POP
23332: POP
// end ; end ;
23333: LD_VAR 0 7
23337: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23338: LD_INT 0
23340: PPUSH
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
23352: PPUSH
23353: PPUSH
23354: PPUSH
23355: PPUSH
// result := false ;
23356: LD_ADDR_VAR 0 3
23360: PUSH
23361: LD_INT 0
23363: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23364: LD_VAR 0 1
23368: NOT
23369: IFTRUE 23394
23371: PUSH
23372: LD_VAR 0 1
23376: PPUSH
23377: CALL_OW 266
23381: PUSH
23382: LD_INT 32
23384: PUSH
23385: LD_INT 33
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: IN
23392: NOT
23393: OR
23394: IFFALSE 23398
// exit ;
23396: GO 24533
// nat := GetNation ( tower ) ;
23398: LD_ADDR_VAR 0 12
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 248
23412: ST_TO_ADDR
// side := GetSide ( tower ) ;
23413: LD_ADDR_VAR 0 16
23417: PUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 255
23427: ST_TO_ADDR
// x := GetX ( tower ) ;
23428: LD_ADDR_VAR 0 10
23432: PUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 250
23442: ST_TO_ADDR
// y := GetY ( tower ) ;
23443: LD_ADDR_VAR 0 11
23447: PUSH
23448: LD_VAR 0 1
23452: PPUSH
23453: CALL_OW 251
23457: ST_TO_ADDR
// if not x or not y then
23458: LD_VAR 0 10
23462: NOT
23463: IFTRUE 23472
23465: PUSH
23466: LD_VAR 0 11
23470: NOT
23471: OR
23472: IFFALSE 23476
// exit ;
23474: GO 24533
// weapon := 0 ;
23476: LD_ADDR_VAR 0 18
23480: PUSH
23481: LD_INT 0
23483: ST_TO_ADDR
// fac_list := [ ] ;
23484: LD_ADDR_VAR 0 17
23488: PUSH
23489: EMPTY
23490: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
23491: LD_ADDR_VAR 0 6
23495: PUSH
23496: LD_VAR 0 1
23500: PPUSH
23501: CALL_OW 274
23505: PPUSH
23506: LD_VAR 0 2
23510: PPUSH
23511: LD_INT 0
23513: PPUSH
23514: CALL 21068 0 3
23518: PPUSH
23519: LD_INT 30
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PPUSH
23529: CALL_OW 72
23533: ST_TO_ADDR
// if not factories then
23534: LD_VAR 0 6
23538: NOT
23539: IFFALSE 23543
// exit ;
23541: GO 24533
// for i in factories do
23543: LD_ADDR_VAR 0 8
23547: PUSH
23548: LD_VAR 0 6
23552: PUSH
23553: FOR_IN
23554: IFFALSE 23579
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23556: LD_ADDR_VAR 0 17
23560: PUSH
23561: LD_VAR 0 17
23565: PUSH
23566: LD_VAR 0 8
23570: PPUSH
23571: CALL_OW 478
23575: UNION
23576: ST_TO_ADDR
23577: GO 23553
23579: POP
23580: POP
// if not fac_list then
23581: LD_VAR 0 17
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 24533
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23590: LD_ADDR_VAR 0 5
23594: PUSH
23595: LD_INT 4
23597: PUSH
23598: LD_INT 5
23600: PUSH
23601: LD_INT 9
23603: PUSH
23604: LD_INT 10
23606: PUSH
23607: LD_INT 6
23609: PUSH
23610: LD_INT 7
23612: PUSH
23613: LD_INT 11
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 27
23627: PUSH
23628: LD_INT 28
23630: PUSH
23631: LD_INT 26
23633: PUSH
23634: LD_INT 30
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 43
23645: PUSH
23646: LD_INT 44
23648: PUSH
23649: LD_INT 46
23651: PUSH
23652: LD_INT 45
23654: PUSH
23655: LD_INT 47
23657: PUSH
23658: LD_INT 49
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: PUSH
23674: LD_VAR 0 12
23678: ARRAY
23679: ST_TO_ADDR
// list := list isect fac_list ;
23680: LD_ADDR_VAR 0 5
23684: PUSH
23685: LD_VAR 0 5
23689: PUSH
23690: LD_VAR 0 17
23694: ISECT
23695: ST_TO_ADDR
// if not list then
23696: LD_VAR 0 5
23700: NOT
23701: IFFALSE 23705
// exit ;
23703: GO 24533
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23705: LD_VAR 0 12
23709: PUSH
23710: LD_INT 3
23712: EQUAL
23713: IFFALSE 23725
23715: PUSH
23716: LD_INT 49
23718: PUSH
23719: LD_VAR 0 5
23723: IN
23724: AND
23725: IFFALSE 23745
23727: PUSH
23728: LD_INT 31
23730: PPUSH
23731: LD_VAR 0 16
23735: PPUSH
23736: CALL_OW 321
23740: PUSH
23741: LD_INT 2
23743: EQUAL
23744: AND
23745: IFFALSE 23805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23747: LD_INT 22
23749: PUSH
23750: LD_VAR 0 16
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 35
23761: PUSH
23762: LD_INT 49
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 91
23771: PUSH
23772: LD_VAR 0 1
23776: PUSH
23777: LD_INT 10
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: LIST
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PPUSH
23790: CALL_OW 69
23794: NOT
23795: IFFALSE 23805
// weapon := ru_time_lapser ;
23797: LD_ADDR_VAR 0 18
23801: PUSH
23802: LD_INT 49
23804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23805: LD_VAR 0 12
23809: PUSH
23810: LD_INT 1
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: IN
23820: IFFALSE 23844
23822: PUSH
23823: LD_INT 11
23825: PUSH
23826: LD_VAR 0 5
23830: IN
23831: IFTRUE 23843
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_VAR 0 5
23841: IN
23842: OR
23843: AND
23844: IFFALSE 23864
23846: PUSH
23847: LD_INT 6
23849: PPUSH
23850: LD_VAR 0 16
23854: PPUSH
23855: CALL_OW 321
23859: PUSH
23860: LD_INT 2
23862: EQUAL
23863: AND
23864: IFFALSE 24031
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23866: LD_INT 22
23868: PUSH
23869: LD_VAR 0 16
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 35
23883: PUSH
23884: LD_INT 11
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 35
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 91
23908: PUSH
23909: LD_VAR 0 1
23913: PUSH
23914: LD_INT 18
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: LIST
23926: PPUSH
23927: CALL_OW 69
23931: NOT
23932: IFFALSE 24008
23934: PUSH
23935: LD_INT 22
23937: PUSH
23938: LD_VAR 0 16
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: LD_INT 30
23952: PUSH
23953: LD_INT 32
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 30
23962: PUSH
23963: LD_INT 33
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 91
23977: PUSH
23978: LD_VAR 0 1
23982: PUSH
23983: LD_INT 12
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: PUSH
24004: LD_INT 2
24006: GREATER
24007: AND
24008: IFFALSE 24031
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24010: LD_ADDR_VAR 0 18
24014: PUSH
24015: LD_INT 11
24017: PUSH
24018: LD_INT 30
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_VAR 0 12
24029: ARRAY
24030: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24031: LD_VAR 0 18
24035: NOT
24036: IFFALSE 24056
24038: PUSH
24039: LD_INT 40
24041: PPUSH
24042: LD_VAR 0 16
24046: PPUSH
24047: CALL_OW 321
24051: PUSH
24052: LD_INT 2
24054: EQUAL
24055: AND
24056: IFFALSE 24092
24058: PUSH
24059: LD_INT 7
24061: PUSH
24062: LD_VAR 0 5
24066: IN
24067: IFTRUE 24079
24069: PUSH
24070: LD_INT 28
24072: PUSH
24073: LD_VAR 0 5
24077: IN
24078: OR
24079: IFTRUE 24091
24081: PUSH
24082: LD_INT 45
24084: PUSH
24085: LD_VAR 0 5
24089: IN
24090: OR
24091: AND
24092: IFFALSE 24346
// begin hex := GetHexInfo ( x , y ) ;
24094: LD_ADDR_VAR 0 4
24098: PUSH
24099: LD_VAR 0 10
24103: PPUSH
24104: LD_VAR 0 11
24108: PPUSH
24109: CALL_OW 546
24113: ST_TO_ADDR
// if hex [ 1 ] then
24114: LD_VAR 0 4
24118: PUSH
24119: LD_INT 1
24121: ARRAY
24122: IFFALSE 24126
// exit ;
24124: GO 24533
// height := hex [ 2 ] ;
24126: LD_ADDR_VAR 0 15
24130: PUSH
24131: LD_VAR 0 4
24135: PUSH
24136: LD_INT 2
24138: ARRAY
24139: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24140: LD_ADDR_VAR 0 14
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: LD_INT 5
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: ST_TO_ADDR
// for i in tmp do
24163: LD_ADDR_VAR 0 8
24167: PUSH
24168: LD_VAR 0 14
24172: PUSH
24173: FOR_IN
24174: IFFALSE 24344
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24176: LD_ADDR_VAR 0 9
24180: PUSH
24181: LD_VAR 0 10
24185: PPUSH
24186: LD_VAR 0 8
24190: PPUSH
24191: LD_INT 5
24193: PPUSH
24194: CALL_OW 272
24198: PUSH
24199: LD_VAR 0 11
24203: PPUSH
24204: LD_VAR 0 8
24208: PPUSH
24209: LD_INT 5
24211: PPUSH
24212: CALL_OW 273
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24221: LD_VAR 0 9
24225: PUSH
24226: LD_INT 1
24228: ARRAY
24229: PPUSH
24230: LD_VAR 0 9
24234: PUSH
24235: LD_INT 2
24237: ARRAY
24238: PPUSH
24239: CALL_OW 488
24243: IFFALSE 24342
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24245: LD_ADDR_VAR 0 4
24249: PUSH
24250: LD_VAR 0 9
24254: PUSH
24255: LD_INT 1
24257: ARRAY
24258: PPUSH
24259: LD_VAR 0 9
24263: PUSH
24264: LD_INT 2
24266: ARRAY
24267: PPUSH
24268: CALL_OW 546
24272: ST_TO_ADDR
// if hex [ 1 ] then
24273: LD_VAR 0 4
24277: PUSH
24278: LD_INT 1
24280: ARRAY
24281: IFFALSE 24285
// continue ;
24283: GO 24173
// h := hex [ 2 ] ;
24285: LD_ADDR_VAR 0 13
24289: PUSH
24290: LD_VAR 0 4
24294: PUSH
24295: LD_INT 2
24297: ARRAY
24298: ST_TO_ADDR
// if h + 7 < height then
24299: LD_VAR 0 13
24303: PUSH
24304: LD_INT 7
24306: PLUS
24307: PUSH
24308: LD_VAR 0 15
24312: LESS
24313: IFFALSE 24342
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24315: LD_ADDR_VAR 0 18
24319: PUSH
24320: LD_INT 7
24322: PUSH
24323: LD_INT 28
24325: PUSH
24326: LD_INT 45
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: PUSH
24334: LD_VAR 0 12
24338: ARRAY
24339: ST_TO_ADDR
// break ;
24340: GO 24344
// end ; end ; end ;
24342: GO 24173
24344: POP
24345: POP
// end ; if not weapon then
24346: LD_VAR 0 18
24350: NOT
24351: IFFALSE 24411
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24353: LD_ADDR_VAR 0 5
24357: PUSH
24358: LD_VAR 0 5
24362: PUSH
24363: LD_INT 11
24365: PUSH
24366: LD_INT 30
24368: PUSH
24369: LD_INT 49
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: LIST
24376: DIFF
24377: ST_TO_ADDR
// if not list then
24378: LD_VAR 0 5
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24533
// weapon := list [ rand ( 1 , list ) ] ;
24387: LD_ADDR_VAR 0 18
24391: PUSH
24392: LD_VAR 0 5
24396: PUSH
24397: LD_INT 1
24399: PPUSH
24400: LD_VAR 0 5
24404: PPUSH
24405: CALL_OW 12
24409: ARRAY
24410: ST_TO_ADDR
// end ; if weapon then
24411: LD_VAR 0 18
24415: IFFALSE 24533
// begin tmp := CostOfWeapon ( weapon ) ;
24417: LD_ADDR_VAR 0 14
24421: PUSH
24422: LD_VAR 0 18
24426: PPUSH
24427: CALL_OW 451
24431: ST_TO_ADDR
// j := GetBase ( tower ) ;
24432: LD_ADDR_VAR 0 9
24436: PUSH
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 274
24446: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24447: LD_VAR 0 9
24451: PPUSH
24452: LD_INT 1
24454: PPUSH
24455: CALL_OW 275
24459: PUSH
24460: LD_VAR 0 14
24464: PUSH
24465: LD_INT 1
24467: ARRAY
24468: GREATEREQUAL
24469: IFFALSE 24495
24471: PUSH
24472: LD_VAR 0 9
24476: PPUSH
24477: LD_INT 2
24479: PPUSH
24480: CALL_OW 275
24484: PUSH
24485: LD_VAR 0 14
24489: PUSH
24490: LD_INT 2
24492: ARRAY
24493: GREATEREQUAL
24494: AND
24495: IFFALSE 24521
24497: PUSH
24498: LD_VAR 0 9
24502: PPUSH
24503: LD_INT 3
24505: PPUSH
24506: CALL_OW 275
24510: PUSH
24511: LD_VAR 0 14
24515: PUSH
24516: LD_INT 3
24518: ARRAY
24519: GREATEREQUAL
24520: AND
24521: IFFALSE 24533
// result := weapon ;
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_VAR 0 18
24532: ST_TO_ADDR
// end ; end ;
24533: LD_VAR 0 3
24537: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24538: LD_INT 0
24540: PPUSH
24541: PPUSH
// result := true ;
24542: LD_ADDR_VAR 0 3
24546: PUSH
24547: LD_INT 1
24549: ST_TO_ADDR
// if array1 = array2 then
24550: LD_VAR 0 1
24554: PUSH
24555: LD_VAR 0 2
24559: EQUAL
24560: IFFALSE 24620
// begin for i = 1 to array1 do
24562: LD_ADDR_VAR 0 4
24566: PUSH
24567: DOUBLE
24568: LD_INT 1
24570: DEC
24571: ST_TO_ADDR
24572: LD_VAR 0 1
24576: PUSH
24577: FOR_TO
24578: IFFALSE 24616
// if array1 [ i ] <> array2 [ i ] then
24580: LD_VAR 0 1
24584: PUSH
24585: LD_VAR 0 4
24589: ARRAY
24590: PUSH
24591: LD_VAR 0 2
24595: PUSH
24596: LD_VAR 0 4
24600: ARRAY
24601: NONEQUAL
24602: IFFALSE 24614
// begin result := false ;
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_INT 0
24611: ST_TO_ADDR
// break ;
24612: GO 24616
// end ;
24614: GO 24577
24616: POP
24617: POP
// end else
24618: GO 24628
// result := false ;
24620: LD_ADDR_VAR 0 3
24624: PUSH
24625: LD_INT 0
24627: ST_TO_ADDR
// end ;
24628: LD_VAR 0 3
24632: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24633: LD_INT 0
24635: PPUSH
24636: PPUSH
// if not array1 or not array2 then
24637: LD_VAR 0 1
24641: NOT
24642: IFTRUE 24651
24644: PUSH
24645: LD_VAR 0 2
24649: NOT
24650: OR
24651: IFFALSE 24655
// exit ;
24653: GO 24719
// result := true ;
24655: LD_ADDR_VAR 0 3
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// for i = 1 to array1 do
24663: LD_ADDR_VAR 0 4
24667: PUSH
24668: DOUBLE
24669: LD_INT 1
24671: DEC
24672: ST_TO_ADDR
24673: LD_VAR 0 1
24677: PUSH
24678: FOR_TO
24679: IFFALSE 24717
// if array1 [ i ] <> array2 [ i ] then
24681: LD_VAR 0 1
24685: PUSH
24686: LD_VAR 0 4
24690: ARRAY
24691: PUSH
24692: LD_VAR 0 2
24696: PUSH
24697: LD_VAR 0 4
24701: ARRAY
24702: NONEQUAL
24703: IFFALSE 24715
// begin result := false ;
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: LD_INT 0
24712: ST_TO_ADDR
// break ;
24713: GO 24717
// end ;
24715: GO 24678
24717: POP
24718: POP
// end ;
24719: LD_VAR 0 3
24723: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24724: LD_INT 0
24726: PPUSH
24727: PPUSH
24728: PPUSH
// pom := GetBase ( fac ) ;
24729: LD_ADDR_VAR 0 5
24733: PUSH
24734: LD_VAR 0 1
24738: PPUSH
24739: CALL_OW 274
24743: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24744: LD_ADDR_VAR 0 4
24748: PUSH
24749: LD_VAR 0 2
24753: PUSH
24754: LD_INT 1
24756: ARRAY
24757: PPUSH
24758: LD_VAR 0 2
24762: PUSH
24763: LD_INT 2
24765: ARRAY
24766: PPUSH
24767: LD_VAR 0 2
24771: PUSH
24772: LD_INT 3
24774: ARRAY
24775: PPUSH
24776: LD_VAR 0 2
24780: PUSH
24781: LD_INT 4
24783: ARRAY
24784: PPUSH
24785: CALL_OW 449
24789: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_VAR 0 5
24799: PPUSH
24800: LD_INT 1
24802: PPUSH
24803: CALL_OW 275
24807: PUSH
24808: LD_VAR 0 4
24812: PUSH
24813: LD_INT 1
24815: ARRAY
24816: GREATEREQUAL
24817: IFFALSE 24843
24819: PUSH
24820: LD_VAR 0 5
24824: PPUSH
24825: LD_INT 2
24827: PPUSH
24828: CALL_OW 275
24832: PUSH
24833: LD_VAR 0 4
24837: PUSH
24838: LD_INT 2
24840: ARRAY
24841: GREATEREQUAL
24842: AND
24843: IFFALSE 24869
24845: PUSH
24846: LD_VAR 0 5
24850: PPUSH
24851: LD_INT 3
24853: PPUSH
24854: CALL_OW 275
24858: PUSH
24859: LD_VAR 0 4
24863: PUSH
24864: LD_INT 3
24866: ARRAY
24867: GREATEREQUAL
24868: AND
24869: ST_TO_ADDR
// end ;
24870: LD_VAR 0 3
24874: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
// pom := GetBase ( building ) ;
24881: LD_ADDR_VAR 0 3
24885: PUSH
24886: LD_VAR 0 1
24890: PPUSH
24891: CALL_OW 274
24895: ST_TO_ADDR
// if not pom then
24896: LD_VAR 0 3
24900: NOT
24901: IFFALSE 24905
// exit ;
24903: GO 25079
// btype := GetBType ( building ) ;
24905: LD_ADDR_VAR 0 5
24909: PUSH
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL_OW 266
24919: ST_TO_ADDR
// if btype = b_armoury then
24920: LD_VAR 0 5
24924: PUSH
24925: LD_INT 4
24927: EQUAL
24928: IFFALSE 24938
// btype := b_barracks ;
24930: LD_ADDR_VAR 0 5
24934: PUSH
24935: LD_INT 5
24937: ST_TO_ADDR
// if btype = b_depot then
24938: LD_VAR 0 5
24942: PUSH
24943: LD_INT 0
24945: EQUAL
24946: IFFALSE 24956
// btype := b_warehouse ;
24948: LD_ADDR_VAR 0 5
24952: PUSH
24953: LD_INT 1
24955: ST_TO_ADDR
// if btype = b_workshop then
24956: LD_VAR 0 5
24960: PUSH
24961: LD_INT 2
24963: EQUAL
24964: IFFALSE 24974
// btype := b_factory ;
24966: LD_ADDR_VAR 0 5
24970: PUSH
24971: LD_INT 3
24973: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24974: LD_ADDR_VAR 0 4
24978: PUSH
24979: LD_VAR 0 5
24983: PPUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 248
24993: PPUSH
24994: CALL_OW 450
24998: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24999: LD_ADDR_VAR 0 2
25003: PUSH
25004: LD_VAR 0 3
25008: PPUSH
25009: LD_INT 1
25011: PPUSH
25012: CALL_OW 275
25016: PUSH
25017: LD_VAR 0 4
25021: PUSH
25022: LD_INT 1
25024: ARRAY
25025: GREATEREQUAL
25026: IFFALSE 25052
25028: PUSH
25029: LD_VAR 0 3
25033: PPUSH
25034: LD_INT 2
25036: PPUSH
25037: CALL_OW 275
25041: PUSH
25042: LD_VAR 0 4
25046: PUSH
25047: LD_INT 2
25049: ARRAY
25050: GREATEREQUAL
25051: AND
25052: IFFALSE 25078
25054: PUSH
25055: LD_VAR 0 3
25059: PPUSH
25060: LD_INT 3
25062: PPUSH
25063: CALL_OW 275
25067: PUSH
25068: LD_VAR 0 4
25072: PUSH
25073: LD_INT 3
25075: ARRAY
25076: GREATEREQUAL
25077: AND
25078: ST_TO_ADDR
// end ;
25079: LD_VAR 0 2
25083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25084: LD_INT 0
25086: PPUSH
25087: PPUSH
25088: PPUSH
// pom := GetBase ( building ) ;
25089: LD_ADDR_VAR 0 4
25093: PUSH
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 274
25103: ST_TO_ADDR
// if not pom then
25104: LD_VAR 0 4
25108: NOT
25109: IFFALSE 25113
// exit ;
25111: GO 25218
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25113: LD_ADDR_VAR 0 5
25117: PUSH
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 248
25132: PPUSH
25133: CALL_OW 450
25137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25138: LD_ADDR_VAR 0 3
25142: PUSH
25143: LD_VAR 0 4
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 275
25155: PUSH
25156: LD_VAR 0 5
25160: PUSH
25161: LD_INT 1
25163: ARRAY
25164: GREATEREQUAL
25165: IFFALSE 25191
25167: PUSH
25168: LD_VAR 0 4
25172: PPUSH
25173: LD_INT 2
25175: PPUSH
25176: CALL_OW 275
25180: PUSH
25181: LD_VAR 0 5
25185: PUSH
25186: LD_INT 2
25188: ARRAY
25189: GREATEREQUAL
25190: AND
25191: IFFALSE 25217
25193: PUSH
25194: LD_VAR 0 4
25198: PPUSH
25199: LD_INT 3
25201: PPUSH
25202: CALL_OW 275
25206: PUSH
25207: LD_VAR 0 5
25211: PUSH
25212: LD_INT 3
25214: ARRAY
25215: GREATEREQUAL
25216: AND
25217: ST_TO_ADDR
// end ;
25218: LD_VAR 0 3
25222: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
25223: LD_INT 0
25225: PPUSH
25226: PPUSH
25227: PPUSH
25228: PPUSH
25229: PPUSH
25230: PPUSH
25231: PPUSH
25232: PPUSH
25233: PPUSH
25234: PPUSH
25235: PPUSH
// result := false ;
25236: LD_ADDR_VAR 0 8
25240: PUSH
25241: LD_INT 0
25243: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
25244: LD_VAR 0 5
25248: NOT
25249: IFTRUE 25258
25251: PUSH
25252: LD_VAR 0 1
25256: NOT
25257: OR
25258: IFTRUE 25267
25260: PUSH
25261: LD_VAR 0 2
25265: NOT
25266: OR
25267: IFTRUE 25276
25269: PUSH
25270: LD_VAR 0 3
25274: NOT
25275: OR
25276: IFFALSE 25280
// exit ;
25278: GO 26106
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
25280: LD_ADDR_VAR 0 14
25284: PUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: LD_VAR 0 4
25304: PPUSH
25305: LD_VAR 0 5
25309: PUSH
25310: LD_INT 1
25312: ARRAY
25313: PPUSH
25314: CALL_OW 248
25318: PPUSH
25319: LD_INT 0
25321: PPUSH
25322: CALL 27387 0 6
25326: ST_TO_ADDR
// if not hexes then
25327: LD_VAR 0 14
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 26106
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25336: LD_ADDR_VAR 0 17
25340: PUSH
25341: LD_VAR 0 5
25345: PPUSH
25346: LD_INT 22
25348: PUSH
25349: LD_VAR 0 13
25353: PPUSH
25354: CALL_OW 255
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: LD_INT 30
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 30
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: LIST
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 72
25399: ST_TO_ADDR
// for i = 1 to hexes do
25400: LD_ADDR_VAR 0 9
25404: PUSH
25405: DOUBLE
25406: LD_INT 1
25408: DEC
25409: ST_TO_ADDR
25410: LD_VAR 0 14
25414: PUSH
25415: FOR_TO
25416: IFFALSE 26104
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25418: LD_ADDR_VAR 0 13
25422: PUSH
25423: LD_VAR 0 14
25427: PUSH
25428: LD_VAR 0 9
25432: ARRAY
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: PPUSH
25438: LD_VAR 0 14
25442: PUSH
25443: LD_VAR 0 9
25447: ARRAY
25448: PUSH
25449: LD_INT 2
25451: ARRAY
25452: PPUSH
25453: CALL_OW 428
25457: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25458: LD_VAR 0 14
25462: PUSH
25463: LD_VAR 0 9
25467: ARRAY
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: PPUSH
25473: LD_VAR 0 14
25477: PUSH
25478: LD_VAR 0 9
25482: ARRAY
25483: PUSH
25484: LD_INT 2
25486: ARRAY
25487: PPUSH
25488: CALL_OW 351
25492: IFTRUE 25531
25494: PUSH
25495: LD_VAR 0 14
25499: PUSH
25500: LD_VAR 0 9
25504: ARRAY
25505: PUSH
25506: LD_INT 1
25508: ARRAY
25509: PPUSH
25510: LD_VAR 0 14
25514: PUSH
25515: LD_VAR 0 9
25519: ARRAY
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PPUSH
25525: CALL_OW 488
25529: NOT
25530: OR
25531: IFTRUE 25548
25533: PUSH
25534: LD_VAR 0 13
25538: PPUSH
25539: CALL_OW 247
25543: PUSH
25544: LD_INT 3
25546: EQUAL
25547: OR
25548: IFFALSE 25554
// exit ;
25550: POP
25551: POP
25552: GO 26106
// if not tmp then
25554: LD_VAR 0 13
25558: NOT
25559: IFFALSE 25563
// continue ;
25561: GO 25415
// result := true ;
25563: LD_ADDR_VAR 0 8
25567: PUSH
25568: LD_INT 1
25570: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
25571: LD_VAR 0 6
25575: IFFALSE 25592
25577: PUSH
25578: LD_VAR 0 13
25582: PPUSH
25583: CALL_OW 247
25587: PUSH
25588: LD_INT 2
25590: EQUAL
25591: AND
25592: IFFALSE 25609
25594: PUSH
25595: LD_VAR 0 13
25599: PPUSH
25600: CALL_OW 263
25604: PUSH
25605: LD_INT 1
25607: EQUAL
25608: AND
25609: IFFALSE 25773
// begin if IsDrivenBy ( tmp ) then
25611: LD_VAR 0 13
25615: PPUSH
25616: CALL_OW 311
25620: IFFALSE 25624
// continue ;
25622: GO 25415
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25624: LD_VAR 0 6
25628: PPUSH
25629: LD_INT 3
25631: PUSH
25632: LD_INT 60
25634: PUSH
25635: EMPTY
25636: LIST
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 3
25644: PUSH
25645: LD_INT 55
25647: PUSH
25648: EMPTY
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PPUSH
25659: CALL_OW 72
25663: IFFALSE 25771
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25665: LD_ADDR_VAR 0 18
25669: PUSH
25670: LD_VAR 0 6
25674: PPUSH
25675: LD_INT 3
25677: PUSH
25678: LD_INT 60
25680: PUSH
25681: EMPTY
25682: LIST
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 3
25690: PUSH
25691: LD_INT 55
25693: PUSH
25694: EMPTY
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PPUSH
25705: CALL_OW 72
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: ST_TO_ADDR
// if IsInUnit ( driver ) then
25714: LD_VAR 0 18
25718: PPUSH
25719: CALL_OW 310
25723: IFFALSE 25734
// ComExit ( driver ) ;
25725: LD_VAR 0 18
25729: PPUSH
25730: CALL 51377 0 1
// AddComEnterUnit ( driver , tmp ) ;
25734: LD_VAR 0 18
25738: PPUSH
25739: LD_VAR 0 13
25743: PPUSH
25744: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25748: LD_VAR 0 18
25752: PPUSH
25753: LD_VAR 0 7
25757: PPUSH
25758: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25762: LD_VAR 0 18
25766: PPUSH
25767: CALL_OW 181
// end ; continue ;
25771: GO 25415
// end ; if not cleaners or not tmp in cleaners then
25773: LD_VAR 0 6
25777: NOT
25778: IFTRUE 25793
25780: PUSH
25781: LD_VAR 0 13
25785: PUSH
25786: LD_VAR 0 6
25790: IN
25791: NOT
25792: OR
25793: IFFALSE 26102
// begin if dep then
25795: LD_VAR 0 17
25799: IFFALSE 25935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25801: LD_ADDR_VAR 0 16
25805: PUSH
25806: LD_VAR 0 17
25810: PUSH
25811: LD_INT 1
25813: ARRAY
25814: PPUSH
25815: CALL_OW 250
25819: PPUSH
25820: LD_VAR 0 17
25824: PUSH
25825: LD_INT 1
25827: ARRAY
25828: PPUSH
25829: CALL_OW 254
25833: PPUSH
25834: LD_INT 5
25836: PPUSH
25837: CALL_OW 272
25841: PUSH
25842: LD_VAR 0 17
25846: PUSH
25847: LD_INT 1
25849: ARRAY
25850: PPUSH
25851: CALL_OW 251
25855: PPUSH
25856: LD_VAR 0 17
25860: PUSH
25861: LD_INT 1
25863: ARRAY
25864: PPUSH
25865: CALL_OW 254
25869: PPUSH
25870: LD_INT 5
25872: PPUSH
25873: CALL_OW 273
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25882: LD_VAR 0 16
25886: PUSH
25887: LD_INT 1
25889: ARRAY
25890: PPUSH
25891: LD_VAR 0 16
25895: PUSH
25896: LD_INT 2
25898: ARRAY
25899: PPUSH
25900: CALL_OW 488
25904: IFFALSE 25935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25906: LD_VAR 0 13
25910: PPUSH
25911: LD_VAR 0 16
25915: PUSH
25916: LD_INT 1
25918: ARRAY
25919: PPUSH
25920: LD_VAR 0 16
25924: PUSH
25925: LD_INT 2
25927: ARRAY
25928: PPUSH
25929: CALL_OW 111
// continue ;
25933: GO 25415
// end ; end ; r := GetDir ( tmp ) ;
25935: LD_ADDR_VAR 0 15
25939: PUSH
25940: LD_VAR 0 13
25944: PPUSH
25945: CALL_OW 254
25949: ST_TO_ADDR
// if r = 5 then
25950: LD_VAR 0 15
25954: PUSH
25955: LD_INT 5
25957: EQUAL
25958: IFFALSE 25968
// r := 0 ;
25960: LD_ADDR_VAR 0 15
25964: PUSH
25965: LD_INT 0
25967: ST_TO_ADDR
// for j = r to 5 do
25968: LD_ADDR_VAR 0 10
25972: PUSH
25973: DOUBLE
25974: LD_VAR 0 15
25978: DEC
25979: ST_TO_ADDR
25980: LD_INT 5
25982: PUSH
25983: FOR_TO
25984: IFFALSE 26100
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25986: LD_ADDR_VAR 0 11
25990: PUSH
25991: LD_VAR 0 13
25995: PPUSH
25996: CALL_OW 250
26000: PPUSH
26001: LD_VAR 0 10
26005: PPUSH
26006: LD_INT 2
26008: PPUSH
26009: CALL_OW 272
26013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26014: LD_ADDR_VAR 0 12
26018: PUSH
26019: LD_VAR 0 13
26023: PPUSH
26024: CALL_OW 251
26028: PPUSH
26029: LD_VAR 0 10
26033: PPUSH
26034: LD_INT 2
26036: PPUSH
26037: CALL_OW 273
26041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26042: LD_VAR 0 11
26046: PPUSH
26047: LD_VAR 0 12
26051: PPUSH
26052: CALL_OW 488
26056: IFFALSE 26075
26058: PUSH
26059: LD_VAR 0 11
26063: PPUSH
26064: LD_VAR 0 12
26068: PPUSH
26069: CALL_OW 428
26073: NOT
26074: AND
26075: IFFALSE 26098
// begin ComMoveXY ( tmp , _x , _y ) ;
26077: LD_VAR 0 13
26081: PPUSH
26082: LD_VAR 0 11
26086: PPUSH
26087: LD_VAR 0 12
26091: PPUSH
26092: CALL_OW 111
// break ;
26096: GO 26100
// end ; end ;
26098: GO 25983
26100: POP
26101: POP
// end ; end ;
26102: GO 25415
26104: POP
26105: POP
// end ;
26106: LD_VAR 0 8
26110: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26111: LD_INT 0
26113: PPUSH
// result := true ;
26114: LD_ADDR_VAR 0 3
26118: PUSH
26119: LD_INT 1
26121: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26122: LD_VAR 0 2
26126: PUSH
26127: LD_INT 24
26129: DOUBLE
26130: EQUAL
26131: IFTRUE 26141
26133: LD_INT 33
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26166
26141: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26142: LD_ADDR_VAR 0 3
26146: PUSH
26147: LD_INT 32
26149: PPUSH
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL_OW 321
26159: PUSH
26160: LD_INT 2
26162: EQUAL
26163: ST_TO_ADDR
26164: GO 26482
26166: LD_INT 20
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26199
26174: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26175: LD_ADDR_VAR 0 3
26179: PUSH
26180: LD_INT 6
26182: PPUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL_OW 321
26192: PUSH
26193: LD_INT 2
26195: EQUAL
26196: ST_TO_ADDR
26197: GO 26482
26199: LD_INT 22
26201: DOUBLE
26202: EQUAL
26203: IFTRUE 26213
26205: LD_INT 36
26207: DOUBLE
26208: EQUAL
26209: IFTRUE 26213
26211: GO 26238
26213: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
26214: LD_ADDR_VAR 0 3
26218: PUSH
26219: LD_INT 15
26221: PPUSH
26222: LD_VAR 0 1
26226: PPUSH
26227: CALL_OW 321
26231: PUSH
26232: LD_INT 2
26234: EQUAL
26235: ST_TO_ADDR
26236: GO 26482
26238: LD_INT 30
26240: DOUBLE
26241: EQUAL
26242: IFTRUE 26246
26244: GO 26271
26246: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
26247: LD_ADDR_VAR 0 3
26251: PUSH
26252: LD_INT 20
26254: PPUSH
26255: LD_VAR 0 1
26259: PPUSH
26260: CALL_OW 321
26264: PUSH
26265: LD_INT 2
26267: EQUAL
26268: ST_TO_ADDR
26269: GO 26482
26271: LD_INT 28
26273: DOUBLE
26274: EQUAL
26275: IFTRUE 26285
26277: LD_INT 21
26279: DOUBLE
26280: EQUAL
26281: IFTRUE 26285
26283: GO 26310
26285: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
26286: LD_ADDR_VAR 0 3
26290: PUSH
26291: LD_INT 21
26293: PPUSH
26294: LD_VAR 0 1
26298: PPUSH
26299: CALL_OW 321
26303: PUSH
26304: LD_INT 2
26306: EQUAL
26307: ST_TO_ADDR
26308: GO 26482
26310: LD_INT 16
26312: DOUBLE
26313: EQUAL
26314: IFTRUE 26318
26316: GO 26343
26318: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
26319: LD_ADDR_VAR 0 3
26323: PUSH
26324: LD_INT 84
26326: PPUSH
26327: LD_VAR 0 1
26331: PPUSH
26332: CALL_OW 321
26336: PUSH
26337: LD_INT 2
26339: EQUAL
26340: ST_TO_ADDR
26341: GO 26482
26343: LD_INT 19
26345: DOUBLE
26346: EQUAL
26347: IFTRUE 26357
26349: LD_INT 23
26351: DOUBLE
26352: EQUAL
26353: IFTRUE 26357
26355: GO 26382
26357: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
26358: LD_ADDR_VAR 0 3
26362: PUSH
26363: LD_INT 83
26365: PPUSH
26366: LD_VAR 0 1
26370: PPUSH
26371: CALL_OW 321
26375: PUSH
26376: LD_INT 2
26378: EQUAL
26379: ST_TO_ADDR
26380: GO 26482
26382: LD_INT 17
26384: DOUBLE
26385: EQUAL
26386: IFTRUE 26390
26388: GO 26415
26390: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
26391: LD_ADDR_VAR 0 3
26395: PUSH
26396: LD_INT 39
26398: PPUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 321
26408: PUSH
26409: LD_INT 2
26411: EQUAL
26412: ST_TO_ADDR
26413: GO 26482
26415: LD_INT 18
26417: DOUBLE
26418: EQUAL
26419: IFTRUE 26423
26421: GO 26448
26423: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
26424: LD_ADDR_VAR 0 3
26428: PUSH
26429: LD_INT 40
26431: PPUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 321
26441: PUSH
26442: LD_INT 2
26444: EQUAL
26445: ST_TO_ADDR
26446: GO 26482
26448: LD_INT 27
26450: DOUBLE
26451: EQUAL
26452: IFTRUE 26456
26454: GO 26481
26456: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
26457: LD_ADDR_VAR 0 3
26461: PUSH
26462: LD_INT 35
26464: PPUSH
26465: LD_VAR 0 1
26469: PPUSH
26470: CALL_OW 321
26474: PUSH
26475: LD_INT 2
26477: EQUAL
26478: ST_TO_ADDR
26479: GO 26482
26481: POP
// end ;
26482: LD_VAR 0 3
26486: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
26487: LD_INT 0
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
// result := false ;
26500: LD_ADDR_VAR 0 6
26504: PUSH
26505: LD_INT 0
26507: ST_TO_ADDR
// if btype = b_depot then
26508: LD_VAR 0 2
26512: PUSH
26513: LD_INT 0
26515: EQUAL
26516: IFFALSE 26528
// begin result := true ;
26518: LD_ADDR_VAR 0 6
26522: PUSH
26523: LD_INT 1
26525: ST_TO_ADDR
// exit ;
26526: GO 27382
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
26528: LD_VAR 0 1
26532: NOT
26533: IFTRUE 26558
26535: PUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 266
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: IN
26556: NOT
26557: OR
26558: IFTRUE 26567
26560: PUSH
26561: LD_VAR 0 2
26565: NOT
26566: OR
26567: IFTRUE 26603
26569: PUSH
26570: LD_VAR 0 5
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 4
26589: PUSH
26590: LD_INT 5
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: IN
26601: NOT
26602: OR
26603: IFTRUE 26622
26605: PUSH
26606: LD_VAR 0 3
26610: PPUSH
26611: LD_VAR 0 4
26615: PPUSH
26616: CALL_OW 488
26620: NOT
26621: OR
26622: IFFALSE 26626
// exit ;
26624: GO 27382
// side := GetSide ( depot ) ;
26626: LD_ADDR_VAR 0 9
26630: PUSH
26631: LD_VAR 0 1
26635: PPUSH
26636: CALL_OW 255
26640: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26641: LD_VAR 0 9
26645: PPUSH
26646: LD_VAR 0 2
26650: PPUSH
26651: CALL 26111 0 2
26655: NOT
26656: IFFALSE 26660
// exit ;
26658: GO 27382
// pom := GetBase ( depot ) ;
26660: LD_ADDR_VAR 0 10
26664: PUSH
26665: LD_VAR 0 1
26669: PPUSH
26670: CALL_OW 274
26674: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26675: LD_ADDR_VAR 0 11
26679: PUSH
26680: LD_VAR 0 2
26684: PPUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 248
26694: PPUSH
26695: CALL_OW 450
26699: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26700: LD_VAR 0 10
26704: PPUSH
26705: LD_INT 1
26707: PPUSH
26708: CALL_OW 275
26712: PUSH
26713: LD_VAR 0 11
26717: PUSH
26718: LD_INT 1
26720: ARRAY
26721: GREATEREQUAL
26722: IFFALSE 26748
26724: PUSH
26725: LD_VAR 0 10
26729: PPUSH
26730: LD_INT 2
26732: PPUSH
26733: CALL_OW 275
26737: PUSH
26738: LD_VAR 0 11
26742: PUSH
26743: LD_INT 2
26745: ARRAY
26746: GREATEREQUAL
26747: AND
26748: IFFALSE 26774
26750: PUSH
26751: LD_VAR 0 10
26755: PPUSH
26756: LD_INT 3
26758: PPUSH
26759: CALL_OW 275
26763: PUSH
26764: LD_VAR 0 11
26768: PUSH
26769: LD_INT 3
26771: ARRAY
26772: GREATEREQUAL
26773: AND
26774: NOT
26775: IFFALSE 26779
// exit ;
26777: GO 27382
// if GetBType ( depot ) = b_depot then
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 266
26788: PUSH
26789: LD_INT 0
26791: EQUAL
26792: IFFALSE 26804
// dist := 28 else
26794: LD_ADDR_VAR 0 14
26798: PUSH
26799: LD_INT 28
26801: ST_TO_ADDR
26802: GO 26812
// dist := 36 ;
26804: LD_ADDR_VAR 0 14
26808: PUSH
26809: LD_INT 36
26811: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26812: LD_VAR 0 1
26816: PPUSH
26817: LD_VAR 0 3
26821: PPUSH
26822: LD_VAR 0 4
26826: PPUSH
26827: CALL_OW 297
26831: PUSH
26832: LD_VAR 0 14
26836: GREATER
26837: IFFALSE 26841
// exit ;
26839: GO 27382
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26841: LD_ADDR_VAR 0 12
26845: PUSH
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_VAR 0 3
26855: PPUSH
26856: LD_VAR 0 4
26860: PPUSH
26861: LD_VAR 0 5
26865: PPUSH
26866: LD_VAR 0 1
26870: PPUSH
26871: CALL_OW 248
26875: PPUSH
26876: LD_INT 0
26878: PPUSH
26879: CALL 27387 0 6
26883: ST_TO_ADDR
// if not hexes then
26884: LD_VAR 0 12
26888: NOT
26889: IFFALSE 26893
// exit ;
26891: GO 27382
// hex := GetHexInfo ( x , y ) ;
26893: LD_ADDR_VAR 0 15
26897: PUSH
26898: LD_VAR 0 3
26902: PPUSH
26903: LD_VAR 0 4
26907: PPUSH
26908: CALL_OW 546
26912: ST_TO_ADDR
// if hex [ 1 ] then
26913: LD_VAR 0 15
26917: PUSH
26918: LD_INT 1
26920: ARRAY
26921: IFFALSE 26925
// exit ;
26923: GO 27382
// height := hex [ 2 ] ;
26925: LD_ADDR_VAR 0 13
26929: PUSH
26930: LD_VAR 0 15
26934: PUSH
26935: LD_INT 2
26937: ARRAY
26938: ST_TO_ADDR
// for i = 1 to hexes do
26939: LD_ADDR_VAR 0 7
26943: PUSH
26944: DOUBLE
26945: LD_INT 1
26947: DEC
26948: ST_TO_ADDR
26949: LD_VAR 0 12
26953: PUSH
26954: FOR_TO
26955: IFFALSE 27299
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26957: LD_VAR 0 12
26961: PUSH
26962: LD_VAR 0 7
26966: ARRAY
26967: PUSH
26968: LD_INT 1
26970: ARRAY
26971: PPUSH
26972: LD_VAR 0 12
26976: PUSH
26977: LD_VAR 0 7
26981: ARRAY
26982: PUSH
26983: LD_INT 2
26985: ARRAY
26986: PPUSH
26987: CALL_OW 488
26991: NOT
26992: IFTRUE 27034
26994: PUSH
26995: LD_VAR 0 12
26999: PUSH
27000: LD_VAR 0 7
27004: ARRAY
27005: PUSH
27006: LD_INT 1
27008: ARRAY
27009: PPUSH
27010: LD_VAR 0 12
27014: PUSH
27015: LD_VAR 0 7
27019: ARRAY
27020: PUSH
27021: LD_INT 2
27023: ARRAY
27024: PPUSH
27025: CALL_OW 428
27029: PUSH
27030: LD_INT 0
27032: GREATER
27033: OR
27034: IFTRUE 27072
27036: PUSH
27037: LD_VAR 0 12
27041: PUSH
27042: LD_VAR 0 7
27046: ARRAY
27047: PUSH
27048: LD_INT 1
27050: ARRAY
27051: PPUSH
27052: LD_VAR 0 12
27056: PUSH
27057: LD_VAR 0 7
27061: ARRAY
27062: PUSH
27063: LD_INT 2
27065: ARRAY
27066: PPUSH
27067: CALL_OW 351
27071: OR
27072: IFFALSE 27078
// exit ;
27074: POP
27075: POP
27076: GO 27382
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27078: LD_ADDR_VAR 0 8
27082: PUSH
27083: LD_VAR 0 12
27087: PUSH
27088: LD_VAR 0 7
27092: ARRAY
27093: PUSH
27094: LD_INT 1
27096: ARRAY
27097: PPUSH
27098: LD_VAR 0 12
27102: PUSH
27103: LD_VAR 0 7
27107: ARRAY
27108: PUSH
27109: LD_INT 2
27111: ARRAY
27112: PPUSH
27113: CALL_OW 546
27117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27118: LD_VAR 0 8
27122: PUSH
27123: LD_INT 1
27125: ARRAY
27126: IFTRUE 27148
27128: PUSH
27129: LD_VAR 0 8
27133: PUSH
27134: LD_INT 2
27136: ARRAY
27137: PUSH
27138: LD_VAR 0 13
27142: PUSH
27143: LD_INT 2
27145: PLUS
27146: GREATER
27147: OR
27148: IFTRUE 27170
27150: PUSH
27151: LD_VAR 0 8
27155: PUSH
27156: LD_INT 2
27158: ARRAY
27159: PUSH
27160: LD_VAR 0 13
27164: PUSH
27165: LD_INT 2
27167: MINUS
27168: LESS
27169: OR
27170: IFTRUE 27238
27172: PUSH
27173: LD_VAR 0 8
27177: PUSH
27178: LD_INT 3
27180: ARRAY
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: LD_INT 8
27187: PUSH
27188: LD_INT 9
27190: PUSH
27191: LD_INT 10
27193: PUSH
27194: LD_INT 11
27196: PUSH
27197: LD_INT 12
27199: PUSH
27200: LD_INT 13
27202: PUSH
27203: LD_INT 16
27205: PUSH
27206: LD_INT 17
27208: PUSH
27209: LD_INT 18
27211: PUSH
27212: LD_INT 19
27214: PUSH
27215: LD_INT 20
27217: PUSH
27218: LD_INT 21
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: IN
27236: NOT
27237: OR
27238: IFTRUE 27251
27240: PUSH
27241: LD_VAR 0 8
27245: PUSH
27246: LD_INT 5
27248: ARRAY
27249: NOT
27250: OR
27251: IFTRUE 27291
27253: PUSH
27254: LD_VAR 0 8
27258: PUSH
27259: LD_INT 6
27261: ARRAY
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: LD_INT 7
27271: PUSH
27272: LD_INT 9
27274: PUSH
27275: LD_INT 10
27277: PUSH
27278: LD_INT 11
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: IN
27289: NOT
27290: OR
27291: IFFALSE 27297
// exit ;
27293: POP
27294: POP
27295: GO 27382
// end ;
27297: GO 26954
27299: POP
27300: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27301: LD_VAR 0 9
27305: PPUSH
27306: LD_VAR 0 3
27310: PPUSH
27311: LD_VAR 0 4
27315: PPUSH
27316: LD_INT 20
27318: PPUSH
27319: CALL 19201 0 4
27323: PUSH
27324: LD_INT 4
27326: ARRAY
27327: IFFALSE 27331
// exit ;
27329: GO 27382
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
27331: LD_VAR 0 2
27335: PUSH
27336: LD_INT 29
27338: PUSH
27339: LD_INT 30
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: IN
27346: IFFALSE 27370
27348: PUSH
27349: LD_VAR 0 3
27353: PPUSH
27354: LD_VAR 0 4
27358: PPUSH
27359: LD_VAR 0 9
27363: PPUSH
27364: CALL_OW 440
27368: NOT
27369: AND
27370: IFFALSE 27374
// exit ;
27372: GO 27382
// result := true ;
27374: LD_ADDR_VAR 0 6
27378: PUSH
27379: LD_INT 1
27381: ST_TO_ADDR
// end ;
27382: LD_VAR 0 6
27386: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
27387: LD_INT 0
27389: PPUSH
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
27394: PPUSH
27395: PPUSH
27396: PPUSH
27397: PPUSH
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
27403: PPUSH
27404: PPUSH
27405: PPUSH
27406: PPUSH
27407: PPUSH
27408: PPUSH
27409: PPUSH
27410: PPUSH
27411: PPUSH
27412: PPUSH
27413: PPUSH
27414: PPUSH
27415: PPUSH
27416: PPUSH
27417: PPUSH
27418: PPUSH
27419: PPUSH
27420: PPUSH
27421: PPUSH
27422: PPUSH
27423: PPUSH
27424: PPUSH
27425: PPUSH
27426: PPUSH
27427: PPUSH
27428: PPUSH
27429: PPUSH
27430: PPUSH
27431: PPUSH
27432: PPUSH
27433: PPUSH
27434: PPUSH
27435: PPUSH
27436: PPUSH
27437: PPUSH
27438: PPUSH
27439: PPUSH
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
// result = [ ] ;
27447: LD_ADDR_VAR 0 7
27451: PUSH
27452: EMPTY
27453: ST_TO_ADDR
// temp_list = [ ] ;
27454: LD_ADDR_VAR 0 9
27458: PUSH
27459: EMPTY
27460: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
27461: LD_VAR 0 4
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: LD_INT 2
27474: PUSH
27475: LD_INT 3
27477: PUSH
27478: LD_INT 4
27480: PUSH
27481: LD_INT 5
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: IN
27492: NOT
27493: IFTRUE 27536
27495: PUSH
27496: LD_VAR 0 1
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: IN
27511: IFFALSE 27535
27513: PUSH
27514: LD_VAR 0 5
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: IN
27533: NOT
27534: AND
27535: OR
27536: IFFALSE 27540
// exit ;
27538: GO 45939
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
27540: LD_VAR 0 1
27544: PUSH
27545: LD_INT 6
27547: PUSH
27548: LD_INT 7
27550: PUSH
27551: LD_INT 8
27553: PUSH
27554: LD_INT 13
27556: PUSH
27557: LD_INT 12
27559: PUSH
27560: LD_INT 15
27562: PUSH
27563: LD_INT 11
27565: PUSH
27566: LD_INT 14
27568: PUSH
27569: LD_INT 10
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: IN
27583: IFFALSE 27593
// btype = b_lab ;
27585: LD_ADDR_VAR 0 1
27589: PUSH
27590: LD_INT 6
27592: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
27593: LD_VAR 0 6
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: IN
27612: NOT
27613: IFTRUE 27681
27615: PUSH
27616: LD_VAR 0 1
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: LD_INT 3
27632: PUSH
27633: LD_INT 6
27635: PUSH
27636: LD_INT 36
27638: PUSH
27639: LD_INT 4
27641: PUSH
27642: LD_INT 5
27644: PUSH
27645: LD_INT 31
27647: PUSH
27648: LD_INT 32
27650: PUSH
27651: LD_INT 33
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: IN
27667: NOT
27668: IFFALSE 27680
27670: PUSH
27671: LD_VAR 0 6
27675: PUSH
27676: LD_INT 1
27678: EQUAL
27679: AND
27680: OR
27681: IFTRUE 27713
27683: PUSH
27684: LD_VAR 0 1
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 3
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: IN
27699: NOT
27700: IFFALSE 27712
27702: PUSH
27703: LD_VAR 0 6
27707: PUSH
27708: LD_INT 2
27710: EQUAL
27711: AND
27712: OR
27713: IFFALSE 27723
// mode = 0 ;
27715: LD_ADDR_VAR 0 6
27719: PUSH
27720: LD_INT 0
27722: ST_TO_ADDR
// case mode of 0 :
27723: LD_VAR 0 6
27727: PUSH
27728: LD_INT 0
27730: DOUBLE
27731: EQUAL
27732: IFTRUE 27736
27734: GO 39189
27736: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27737: LD_ADDR_VAR 0 11
27741: PUSH
27742: LD_INT 0
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: PUSH
27766: LD_INT 0
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 0
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: NEG
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: LD_INT 2
27833: NEG
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: LD_INT 2
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 3
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27930: LD_ADDR_VAR 0 12
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 1
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: NEG
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 2
28064: NEG
28065: PUSH
28066: LD_INT 1
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: LD_INT 1
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 3
28087: NEG
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 3
28098: NEG
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28126: LD_ADDR_VAR 0 13
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: LD_INT 2
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: LD_INT 3
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: NEG
28286: PUSH
28287: LD_INT 2
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 3
28297: NEG
28298: PUSH
28299: LD_INT 3
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28325: LD_ADDR_VAR 0 14
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: LD_INT 2
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: NEG
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 3
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: LD_INT 3
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: PUSH
28495: LD_INT 2
28497: NEG
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28521: LD_ADDR_VAR 0 15
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 3
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 3
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28714: LD_ADDR_VAR 0 16
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 0
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: NEG
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 1
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 2
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: LD_INT 2
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 2
28837: NEG
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 2
28849: NEG
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 3
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 3
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 2
28881: PUSH
28882: LD_INT 3
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28907: LD_ADDR_VAR 0 17
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 2
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: LD_INT 2
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 1
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 2
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: LD_INT 2
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 2
29094: NEG
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 2
29106: NEG
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29137: LD_ADDR_VAR 0 18
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 1
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: LD_INT 0
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: LD_INT 2
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 2
29324: NEG
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29367: LD_ADDR_VAR 0 19
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 2
29566: NEG
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29597: LD_ADDR_VAR 0 20
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 2
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29827: LD_ADDR_VAR 0 21
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30057: LD_ADDR_VAR 0 22
30061: PUSH
30062: LD_INT 0
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 1
30077: NEG
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 1
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: NEG
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: LD_INT 2
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 1
30202: PUSH
30203: LD_INT 2
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: LD_INT 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: NEG
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 2
30256: NEG
30257: PUSH
30258: LD_INT 2
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30287: LD_ADDR_VAR 0 23
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: LD_INT 1
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: LD_INT 1
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: NEG
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: NEG
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: LD_INT 2
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 2
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 1
30452: NEG
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: NEG
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: NEG
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: LD_INT 3
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: NEG
30511: PUSH
30512: LD_INT 3
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
30567: LD_ADDR_VAR 0 24
30571: PUSH
30572: LD_INT 0
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: NEG
30637: PUSH
30638: LD_INT 1
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 2
30663: NEG
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: LD_INT 2
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 2
30789: PUSH
30790: LD_INT 1
30792: NEG
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30843: LD_ADDR_VAR 0 25
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 3
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31117: LD_ADDR_VAR 0 26
31121: PUSH
31122: LD_INT 0
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: NEG
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 2
31316: NEG
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 2
31328: PUSH
31329: LD_INT 3
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31393: LD_ADDR_VAR 0 27
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 0
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: LD_INT 1
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 3
31638: NEG
31639: PUSH
31640: LD_INT 2
31642: NEG
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31673: LD_ADDR_VAR 0 28
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 1
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: LD_INT 0
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 2
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: NEG
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 2
31860: NEG
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 2
31872: NEG
31873: PUSH
31874: LD_INT 2
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: LD_INT 3
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 3
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 3
31920: NEG
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31955: LD_ADDR_VAR 0 29
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: NEG
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 2
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: LD_INT 3
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: LD_INT 3
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 3
32199: NEG
32200: PUSH
32201: LD_INT 2
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32234: LD_ADDR_VAR 0 30
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 3
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 2
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: PUSH
32447: LD_INT 2
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 2
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32512: LD_ADDR_VAR 0 31
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 2
32616: PUSH
32617: LD_INT 0
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 2
32677: NEG
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: NEG
32690: PUSH
32691: LD_INT 2
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 3
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 3
32755: NEG
32756: PUSH
32757: LD_INT 2
32759: NEG
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32790: LD_ADDR_VAR 0 32
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: LD_INT 1
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 1
32871: NEG
32872: PUSH
32873: LD_INT 2
32875: NEG
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 1
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 2
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: NEG
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 3
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33068: LD_ADDR_VAR 0 33
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 2
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 1
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 2
33234: NEG
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: NEG
33247: PUSH
33248: LD_INT 2
33250: NEG
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 2
33258: NEG
33259: PUSH
33260: LD_INT 3
33262: NEG
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: LD_INT 3
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 2
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 3
33312: NEG
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33347: LD_ADDR_VAR 0 34
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: NEG
33429: PUSH
33430: LD_INT 2
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 2
33503: NEG
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 2
33514: NEG
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: LD_INT 3
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 3
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 3
33592: NEG
33593: PUSH
33594: LD_INT 1
33596: NEG
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33627: LD_ADDR_VAR 0 35
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 1
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: NEG
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33739: LD_ADDR_VAR 0 36
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 2
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33851: LD_ADDR_VAR 0 37
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33963: LD_ADDR_VAR 0 38
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 2
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34075: LD_ADDR_VAR 0 39
34079: PUSH
34080: LD_INT 0
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 1
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: NEG
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: LD_INT 2
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34187: LD_ADDR_VAR 0 40
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: NEG
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34299: LD_ADDR_VAR 0 41
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 1
34319: NEG
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: NEG
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: NEG
34381: PUSH
34382: LD_INT 2
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 3
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: NEG
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: NEG
34597: PUSH
34598: LD_INT 2
34600: NEG
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 3
34608: NEG
34609: PUSH
34610: LD_INT 3
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34649: LD_ADDR_VAR 0 42
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: LD_INT 2
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 2
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: LD_INT 2
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: LD_INT 3
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 3
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: LD_INT 3
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 3
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: PUSH
34896: LD_INT 3
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 3
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 3
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 3
34946: NEG
34947: PUSH
34948: LD_INT 2
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 3
34958: NEG
34959: PUSH
34960: LD_INT 3
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34999: LD_ADDR_VAR 0 43
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 0
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: LD_INT 1
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 0
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: NEG
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: NEG
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: NEG
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 3
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 3
35203: NEG
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: LD_INT 2
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 3
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 3
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 3
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35347: LD_ADDR_VAR 0 44
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 1
35491: NEG
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: LD_INT 3
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: LD_INT 1
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 3
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 3
35621: NEG
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 3
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 3
35644: NEG
35645: PUSH
35646: LD_INT 2
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: LD_INT 3
35656: NEG
35657: PUSH
35658: LD_INT 3
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35697: LD_ADDR_VAR 0 45
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 1
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: LD_INT 2
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: NEG
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 2
35875: NEG
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: NEG
35888: PUSH
35889: LD_INT 3
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 3
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 3
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 3
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 3
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: LD_INT 2
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 3
36006: NEG
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36047: LD_ADDR_VAR 0 46
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: LD_INT 1
36067: NEG
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 1
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 1
36116: NEG
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: NEG
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 3
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 3
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 2
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 3
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: LD_INT 3
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: LD_INT 3
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 1
36321: NEG
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 2
36332: NEG
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 3
36343: NEG
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 3
36354: NEG
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36395: LD_ADDR_VAR 0 47
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 2
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36546: LD_ADDR_VAR 0 48
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 1
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36693: LD_ADDR_VAR 0 49
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 1
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: LD_INT 1
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 1
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 2
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36837: LD_ADDR_VAR 0 50
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36981: LD_ADDR_VAR 0 51
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 1
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 1
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 2
37093: NEG
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37128: LD_ADDR_VAR 0 52
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 1
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 2
37255: NEG
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37279: LD_ADDR_VAR 0 53
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: LD_INT 2
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37509: LD_ADDR_VAR 0 54
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 2
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37739: LD_ADDR_VAR 0 55
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: LD_INT 1
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37969: LD_ADDR_VAR 0 56
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 1
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38199: LD_ADDR_VAR 0 57
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38429: LD_ADDR_VAR 0 58
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 0
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 1
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 2
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 2
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: NEG
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 2
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38659: LD_ADDR_VAR 0 59
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 1
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38747: LD_ADDR_VAR 0 60
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 1
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: LD_INT 0
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38835: LD_ADDR_VAR 0 61
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 1
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38923: LD_ADDR_VAR 0 62
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39011: LD_ADDR_VAR 0 63
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 1
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39099: LD_ADDR_VAR 0 64
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: ST_TO_ADDR
// end ; 1 :
39187: GO 45084
39189: LD_INT 1
39191: DOUBLE
39192: EQUAL
39193: IFTRUE 39197
39195: GO 41820
39197: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39198: LD_ADDR_VAR 0 11
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 3
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 3
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39242: LD_ADDR_VAR 0 12
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 3
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39283: LD_ADDR_VAR 0 13
39287: PUSH
39288: LD_INT 3
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 3
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 2
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39323: LD_ADDR_VAR 0 14
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 3
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39364: LD_ADDR_VAR 0 15
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39408: LD_ADDR_VAR 0 16
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: LD_INT 3
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 3
39439: NEG
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39454: LD_ADDR_VAR 0 17
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: LD_INT 3
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: LD_INT 3
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39498: LD_ADDR_VAR 0 18
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: LD_INT 0
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 3
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39539: LD_ADDR_VAR 0 19
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 3
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39579: LD_ADDR_VAR 0 20
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39620: LD_ADDR_VAR 0 21
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39664: LD_ADDR_VAR 0 22
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: NEG
39696: PUSH
39697: LD_INT 3
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39710: LD_ADDR_VAR 0 23
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 4
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 3
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39754: LD_ADDR_VAR 0 24
39758: PUSH
39759: LD_INT 3
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 3
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 4
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39795: LD_ADDR_VAR 0 25
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: LD_INT 3
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 4
39812: PUSH
39813: LD_INT 3
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 3
39822: PUSH
39823: LD_INT 4
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: LIST
39834: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39835: LD_ADDR_VAR 0 26
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 3
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: LD_INT 4
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39876: LD_ADDR_VAR 0 27
39880: PUSH
39881: LD_INT 3
39883: NEG
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 3
39894: NEG
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 4
39905: NEG
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39920: LD_ADDR_VAR 0 28
39924: PUSH
39925: LD_INT 3
39927: NEG
39928: PUSH
39929: LD_INT 3
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: LD_INT 4
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 4
39951: NEG
39952: PUSH
39953: LD_INT 3
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: LIST
39965: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39966: LD_ADDR_VAR 0 29
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: LD_INT 3
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: NEG
40008: PUSH
40009: LD_INT 4
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 4
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 3
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 5
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 5
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 4
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 6
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 6
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 5
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40121: LD_ADDR_VAR 0 30
40125: PUSH
40126: LD_INT 2
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 3
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 4
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 4
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 5
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 5
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 5
40221: PUSH
40222: LD_INT 1
40224: NEG
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 6
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 6
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
40264: LD_ADDR_VAR 0 31
40268: PUSH
40269: LD_INT 3
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 3
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: LD_INT 3
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 4
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 4
40311: PUSH
40312: LD_INT 4
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: LD_INT 4
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 5
40331: PUSH
40332: LD_INT 4
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 5
40341: PUSH
40342: LD_INT 5
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 4
40351: PUSH
40352: LD_INT 5
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 6
40361: PUSH
40362: LD_INT 5
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 6
40371: PUSH
40372: LD_INT 6
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 5
40381: PUSH
40382: LD_INT 6
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
40403: LD_ADDR_VAR 0 32
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: LD_INT 3
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: LD_INT 3
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: LD_INT 4
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: LD_INT 4
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 3
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: LD_INT 5
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 5
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: NEG
40493: PUSH
40494: LD_INT 4
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 6
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 6
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 5
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
40546: LD_ADDR_VAR 0 33
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 3
40587: NEG
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 4
40598: NEG
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 4
40609: NEG
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 4
40621: NEG
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 5
40632: NEG
40633: PUSH
40634: LD_INT 0
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 5
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 5
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 6
40666: NEG
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 6
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40701: LD_ADDR_VAR 0 34
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: LD_INT 3
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 3
40720: NEG
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: NEG
40733: PUSH
40734: LD_INT 3
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 3
40744: NEG
40745: PUSH
40746: LD_INT 4
40748: NEG
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 4
40756: NEG
40757: PUSH
40758: LD_INT 3
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 4
40768: NEG
40769: PUSH
40770: LD_INT 4
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 4
40780: NEG
40781: PUSH
40782: LD_INT 5
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 5
40792: NEG
40793: PUSH
40794: LD_INT 4
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 5
40804: NEG
40805: PUSH
40806: LD_INT 5
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 5
40816: NEG
40817: PUSH
40818: LD_INT 6
40820: NEG
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 6
40828: NEG
40829: PUSH
40830: LD_INT 5
40832: NEG
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 6
40840: NEG
40841: PUSH
40842: LD_INT 6
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40864: LD_ADDR_VAR 0 41
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 3
40886: NEG
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40908: LD_ADDR_VAR 0 42
40912: PUSH
40913: LD_INT 2
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40949: LD_ADDR_VAR 0 43
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: LD_INT 3
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40989: LD_ADDR_VAR 0 44
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 3
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41030: LD_ADDR_VAR 0 45
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 3
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41074: LD_ADDR_VAR 0 46
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 2
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: LD_INT 3
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41120: LD_ADDR_VAR 0 47
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 3
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41153: LD_ADDR_VAR 0 48
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41184: LD_ADDR_VAR 0 49
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41213: LD_ADDR_VAR 0 50
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 3
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41242: LD_ADDR_VAR 0 51
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41273: LD_ADDR_VAR 0 52
41277: PUSH
41278: LD_INT 3
41280: NEG
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 3
41292: NEG
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41306: LD_ADDR_VAR 0 53
41310: PUSH
41311: LD_INT 1
41313: NEG
41314: PUSH
41315: LD_INT 3
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41350: LD_ADDR_VAR 0 54
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 3
41368: PUSH
41369: LD_INT 0
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 3
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41391: LD_ADDR_VAR 0 55
41395: PUSH
41396: LD_INT 3
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: LD_INT 3
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 3
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41431: LD_ADDR_VAR 0 56
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41472: LD_ADDR_VAR 0 57
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 3
41490: NEG
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41516: LD_ADDR_VAR 0 58
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 3
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 3
41547: NEG
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
41562: LD_ADDR_VAR 0 59
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41606: LD_ADDR_VAR 0 60
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41647: LD_ADDR_VAR 0 61
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41687: LD_ADDR_VAR 0 62
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41728: LD_ADDR_VAR 0 63
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41772: LD_ADDR_VAR 0 64
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: NEG
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: LIST
41817: ST_TO_ADDR
// end ; 2 :
41818: GO 45084
41820: LD_INT 2
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 45083
41828: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41829: LD_ADDR_VAR 0 29
41833: PUSH
41834: LD_INT 4
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 4
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 5
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 5
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 4
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 5
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: LD_INT 3
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 4
41949: PUSH
41950: LD_INT 3
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 4
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: LD_INT 4
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 4
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 4
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 4
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 4
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 5
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 4
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 5
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 3
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 3
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 4
42168: NEG
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 4
42179: NEG
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 4
42191: NEG
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 4
42214: NEG
42215: PUSH
42216: LD_INT 4
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 4
42226: NEG
42227: PUSH
42228: LD_INT 5
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 3
42238: NEG
42239: PUSH
42240: LD_INT 4
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 3
42250: NEG
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 4
42262: NEG
42263: PUSH
42264: LD_INT 3
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 5
42274: NEG
42275: PUSH
42276: LD_INT 4
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 5
42286: NEG
42287: PUSH
42288: LD_INT 5
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: LD_INT 5
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 5
42310: NEG
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
42367: LD_ADDR_VAR 0 30
42371: PUSH
42372: LD_INT 4
42374: PUSH
42375: LD_INT 4
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 4
42384: PUSH
42385: LD_INT 3
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 5
42394: PUSH
42395: LD_INT 4
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 5
42404: PUSH
42405: LD_INT 5
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 4
42414: PUSH
42415: LD_INT 5
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: LD_INT 4
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 5
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 5
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 4
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 4
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 2
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 4
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 4
42557: NEG
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 4
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: NEG
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 4
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 5
42613: NEG
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 5
42624: NEG
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 5
42636: NEG
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: LD_INT 3
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 3
42671: NEG
42672: PUSH
42673: LD_INT 4
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 3
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 3
42707: NEG
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 4
42719: NEG
42720: PUSH
42721: LD_INT 3
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 4
42731: NEG
42732: PUSH
42733: LD_INT 4
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 4
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 4
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: LD_INT 4
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 5
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 4
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 3
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 5
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 5
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42914: LD_ADDR_VAR 0 31
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 4
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 4
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: LD_INT 5
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 5
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 4
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 2
42993: PUSH
42994: LD_INT 5
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: NEG
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 4
43070: NEG
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 4
43081: NEG
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 4
43093: NEG
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 4
43116: NEG
43117: PUSH
43118: LD_INT 4
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 4
43128: NEG
43129: PUSH
43130: LD_INT 5
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: NEG
43141: PUSH
43142: LD_INT 4
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 4
43164: NEG
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 5
43176: NEG
43177: PUSH
43178: LD_INT 4
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 5
43188: NEG
43189: PUSH
43190: LD_INT 5
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 3
43200: NEG
43201: PUSH
43202: LD_INT 5
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 5
43212: NEG
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 3
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: LD_INT 4
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 3
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 3
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 4
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 4
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 4
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 4
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 5
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 5
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 4
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 5
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
43464: LD_ADDR_VAR 0 32
43468: PUSH
43469: LD_INT 4
43471: NEG
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 4
43482: NEG
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 3
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 4
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 5
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 5
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 5
43550: NEG
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 3
43562: NEG
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: NEG
43574: PUSH
43575: LD_INT 3
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 3
43585: NEG
43586: PUSH
43587: LD_INT 4
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 4
43633: NEG
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 4
43645: NEG
43646: PUSH
43647: LD_INT 4
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: NEG
43658: PUSH
43659: LD_INT 4
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 4
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 4
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 5
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 4
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 3
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 3
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 4
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 5
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 3
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 5
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 4
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 4
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 4
43876: PUSH
43877: LD_INT 4
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 4
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: LD_INT 4
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: LD_INT 5
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 4
43916: PUSH
43917: LD_INT 5
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: LD_INT 4
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 5
43946: PUSH
43947: LD_INT 3
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 3
43956: PUSH
43957: LD_INT 5
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44011: LD_ADDR_VAR 0 33
44015: PUSH
44016: LD_INT 4
44018: NEG
44019: PUSH
44020: LD_INT 4
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 4
44030: NEG
44031: PUSH
44032: LD_INT 5
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 3
44042: NEG
44043: PUSH
44044: LD_INT 4
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: LD_INT 3
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 4
44066: NEG
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 5
44078: NEG
44079: PUSH
44080: LD_INT 4
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 5
44090: NEG
44091: PUSH
44092: LD_INT 5
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: NEG
44103: PUSH
44104: LD_INT 5
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 5
44114: NEG
44115: PUSH
44116: LD_INT 3
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 4
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 3
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 4
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: NEG
44217: PUSH
44218: LD_INT 4
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 4
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 4
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 5
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 4
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 3
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 3
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 5
44311: PUSH
44312: LD_INT 2
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: LD_INT 3
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 4
44341: PUSH
44342: LD_INT 3
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 4
44351: PUSH
44352: LD_INT 4
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 4
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 4
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: LD_INT 4
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 4
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 3
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: LD_INT 4
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 5
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 5
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 4
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 5
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
44549: LD_ADDR_VAR 0 34
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 4
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 5
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 4
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 3
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 4
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 5
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: LD_INT 3
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 5
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 1
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 4
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 4
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 4
44741: PUSH
44742: LD_INT 2
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 4
44751: PUSH
44752: LD_INT 4
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 4
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 5
44771: PUSH
44772: LD_INT 4
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 5
44781: PUSH
44782: LD_INT 5
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 4
44791: PUSH
44792: LD_INT 5
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: PUSH
44802: LD_INT 4
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 5
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 3
44831: PUSH
44832: LD_INT 5
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 3
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 4
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 4
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 4
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 4
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 4
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 4
44979: NEG
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 5
44990: NEG
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 5
45001: NEG
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 5
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: ST_TO_ADDR
// end ; end ;
45081: GO 45084
45083: POP
// case btype of b_depot , b_warehouse :
45084: LD_VAR 0 1
45088: PUSH
45089: LD_INT 0
45091: DOUBLE
45092: EQUAL
45093: IFTRUE 45103
45095: LD_INT 1
45097: DOUBLE
45098: EQUAL
45099: IFTRUE 45103
45101: GO 45304
45103: POP
// case nation of nation_american :
45104: LD_VAR 0 5
45108: PUSH
45109: LD_INT 1
45111: DOUBLE
45112: EQUAL
45113: IFTRUE 45117
45115: GO 45173
45117: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45118: LD_ADDR_VAR 0 9
45122: PUSH
45123: LD_VAR 0 11
45127: PUSH
45128: LD_VAR 0 12
45132: PUSH
45133: LD_VAR 0 13
45137: PUSH
45138: LD_VAR 0 14
45142: PUSH
45143: LD_VAR 0 15
45147: PUSH
45148: LD_VAR 0 16
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: PUSH
45161: LD_VAR 0 4
45165: PUSH
45166: LD_INT 1
45168: PLUS
45169: ARRAY
45170: ST_TO_ADDR
45171: GO 45302
45173: LD_INT 2
45175: DOUBLE
45176: EQUAL
45177: IFTRUE 45181
45179: GO 45237
45181: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45182: LD_ADDR_VAR 0 9
45186: PUSH
45187: LD_VAR 0 17
45191: PUSH
45192: LD_VAR 0 18
45196: PUSH
45197: LD_VAR 0 19
45201: PUSH
45202: LD_VAR 0 20
45206: PUSH
45207: LD_VAR 0 21
45211: PUSH
45212: LD_VAR 0 22
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: PUSH
45225: LD_VAR 0 4
45229: PUSH
45230: LD_INT 1
45232: PLUS
45233: ARRAY
45234: ST_TO_ADDR
45235: GO 45302
45237: LD_INT 3
45239: DOUBLE
45240: EQUAL
45241: IFTRUE 45245
45243: GO 45301
45245: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45246: LD_ADDR_VAR 0 9
45250: PUSH
45251: LD_VAR 0 23
45255: PUSH
45256: LD_VAR 0 24
45260: PUSH
45261: LD_VAR 0 25
45265: PUSH
45266: LD_VAR 0 26
45270: PUSH
45271: LD_VAR 0 27
45275: PUSH
45276: LD_VAR 0 28
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: PUSH
45289: LD_VAR 0 4
45293: PUSH
45294: LD_INT 1
45296: PLUS
45297: ARRAY
45298: ST_TO_ADDR
45299: GO 45302
45301: POP
45302: GO 45857
45304: LD_INT 2
45306: DOUBLE
45307: EQUAL
45308: IFTRUE 45318
45310: LD_INT 3
45312: DOUBLE
45313: EQUAL
45314: IFTRUE 45318
45316: GO 45374
45318: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
45319: LD_ADDR_VAR 0 9
45323: PUSH
45324: LD_VAR 0 29
45328: PUSH
45329: LD_VAR 0 30
45333: PUSH
45334: LD_VAR 0 31
45338: PUSH
45339: LD_VAR 0 32
45343: PUSH
45344: LD_VAR 0 33
45348: PUSH
45349: LD_VAR 0 34
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: PUSH
45362: LD_VAR 0 4
45366: PUSH
45367: LD_INT 1
45369: PLUS
45370: ARRAY
45371: ST_TO_ADDR
45372: GO 45857
45374: LD_INT 16
45376: DOUBLE
45377: EQUAL
45378: IFTRUE 45436
45380: LD_INT 17
45382: DOUBLE
45383: EQUAL
45384: IFTRUE 45436
45386: LD_INT 18
45388: DOUBLE
45389: EQUAL
45390: IFTRUE 45436
45392: LD_INT 19
45394: DOUBLE
45395: EQUAL
45396: IFTRUE 45436
45398: LD_INT 22
45400: DOUBLE
45401: EQUAL
45402: IFTRUE 45436
45404: LD_INT 20
45406: DOUBLE
45407: EQUAL
45408: IFTRUE 45436
45410: LD_INT 21
45412: DOUBLE
45413: EQUAL
45414: IFTRUE 45436
45416: LD_INT 23
45418: DOUBLE
45419: EQUAL
45420: IFTRUE 45436
45422: LD_INT 24
45424: DOUBLE
45425: EQUAL
45426: IFTRUE 45436
45428: LD_INT 25
45430: DOUBLE
45431: EQUAL
45432: IFTRUE 45436
45434: GO 45492
45436: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
45437: LD_ADDR_VAR 0 9
45441: PUSH
45442: LD_VAR 0 35
45446: PUSH
45447: LD_VAR 0 36
45451: PUSH
45452: LD_VAR 0 37
45456: PUSH
45457: LD_VAR 0 38
45461: PUSH
45462: LD_VAR 0 39
45466: PUSH
45467: LD_VAR 0 40
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: PUSH
45480: LD_VAR 0 4
45484: PUSH
45485: LD_INT 1
45487: PLUS
45488: ARRAY
45489: ST_TO_ADDR
45490: GO 45857
45492: LD_INT 6
45494: DOUBLE
45495: EQUAL
45496: IFTRUE 45548
45498: LD_INT 7
45500: DOUBLE
45501: EQUAL
45502: IFTRUE 45548
45504: LD_INT 8
45506: DOUBLE
45507: EQUAL
45508: IFTRUE 45548
45510: LD_INT 13
45512: DOUBLE
45513: EQUAL
45514: IFTRUE 45548
45516: LD_INT 12
45518: DOUBLE
45519: EQUAL
45520: IFTRUE 45548
45522: LD_INT 15
45524: DOUBLE
45525: EQUAL
45526: IFTRUE 45548
45528: LD_INT 11
45530: DOUBLE
45531: EQUAL
45532: IFTRUE 45548
45534: LD_INT 14
45536: DOUBLE
45537: EQUAL
45538: IFTRUE 45548
45540: LD_INT 10
45542: DOUBLE
45543: EQUAL
45544: IFTRUE 45548
45546: GO 45604
45548: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
45549: LD_ADDR_VAR 0 9
45553: PUSH
45554: LD_VAR 0 41
45558: PUSH
45559: LD_VAR 0 42
45563: PUSH
45564: LD_VAR 0 43
45568: PUSH
45569: LD_VAR 0 44
45573: PUSH
45574: LD_VAR 0 45
45578: PUSH
45579: LD_VAR 0 46
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: PUSH
45592: LD_VAR 0 4
45596: PUSH
45597: LD_INT 1
45599: PLUS
45600: ARRAY
45601: ST_TO_ADDR
45602: GO 45857
45604: LD_INT 36
45606: DOUBLE
45607: EQUAL
45608: IFTRUE 45612
45610: GO 45668
45612: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
45613: LD_ADDR_VAR 0 9
45617: PUSH
45618: LD_VAR 0 47
45622: PUSH
45623: LD_VAR 0 48
45627: PUSH
45628: LD_VAR 0 49
45632: PUSH
45633: LD_VAR 0 50
45637: PUSH
45638: LD_VAR 0 51
45642: PUSH
45643: LD_VAR 0 52
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: PUSH
45656: LD_VAR 0 4
45660: PUSH
45661: LD_INT 1
45663: PLUS
45664: ARRAY
45665: ST_TO_ADDR
45666: GO 45857
45668: LD_INT 4
45670: DOUBLE
45671: EQUAL
45672: IFTRUE 45694
45674: LD_INT 5
45676: DOUBLE
45677: EQUAL
45678: IFTRUE 45694
45680: LD_INT 34
45682: DOUBLE
45683: EQUAL
45684: IFTRUE 45694
45686: LD_INT 37
45688: DOUBLE
45689: EQUAL
45690: IFTRUE 45694
45692: GO 45750
45694: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45695: LD_ADDR_VAR 0 9
45699: PUSH
45700: LD_VAR 0 53
45704: PUSH
45705: LD_VAR 0 54
45709: PUSH
45710: LD_VAR 0 55
45714: PUSH
45715: LD_VAR 0 56
45719: PUSH
45720: LD_VAR 0 57
45724: PUSH
45725: LD_VAR 0 58
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: PUSH
45738: LD_VAR 0 4
45742: PUSH
45743: LD_INT 1
45745: PLUS
45746: ARRAY
45747: ST_TO_ADDR
45748: GO 45857
45750: LD_INT 31
45752: DOUBLE
45753: EQUAL
45754: IFTRUE 45800
45756: LD_INT 32
45758: DOUBLE
45759: EQUAL
45760: IFTRUE 45800
45762: LD_INT 33
45764: DOUBLE
45765: EQUAL
45766: IFTRUE 45800
45768: LD_INT 27
45770: DOUBLE
45771: EQUAL
45772: IFTRUE 45800
45774: LD_INT 26
45776: DOUBLE
45777: EQUAL
45778: IFTRUE 45800
45780: LD_INT 28
45782: DOUBLE
45783: EQUAL
45784: IFTRUE 45800
45786: LD_INT 29
45788: DOUBLE
45789: EQUAL
45790: IFTRUE 45800
45792: LD_INT 30
45794: DOUBLE
45795: EQUAL
45796: IFTRUE 45800
45798: GO 45856
45800: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45801: LD_ADDR_VAR 0 9
45805: PUSH
45806: LD_VAR 0 59
45810: PUSH
45811: LD_VAR 0 60
45815: PUSH
45816: LD_VAR 0 61
45820: PUSH
45821: LD_VAR 0 62
45825: PUSH
45826: LD_VAR 0 63
45830: PUSH
45831: LD_VAR 0 64
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: PUSH
45844: LD_VAR 0 4
45848: PUSH
45849: LD_INT 1
45851: PLUS
45852: ARRAY
45853: ST_TO_ADDR
45854: GO 45857
45856: POP
// temp_list2 = [ ] ;
45857: LD_ADDR_VAR 0 10
45861: PUSH
45862: EMPTY
45863: ST_TO_ADDR
// for i in temp_list do
45864: LD_ADDR_VAR 0 8
45868: PUSH
45869: LD_VAR 0 9
45873: PUSH
45874: FOR_IN
45875: IFFALSE 45927
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45877: LD_ADDR_VAR 0 10
45881: PUSH
45882: LD_VAR 0 10
45886: PUSH
45887: LD_VAR 0 8
45891: PUSH
45892: LD_INT 1
45894: ARRAY
45895: PUSH
45896: LD_VAR 0 2
45900: PLUS
45901: PUSH
45902: LD_VAR 0 8
45906: PUSH
45907: LD_INT 2
45909: ARRAY
45910: PUSH
45911: LD_VAR 0 3
45915: PLUS
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: ADD
45924: ST_TO_ADDR
45925: GO 45874
45927: POP
45928: POP
// result = temp_list2 ;
45929: LD_ADDR_VAR 0 7
45933: PUSH
45934: LD_VAR 0 10
45938: ST_TO_ADDR
// end ;
45939: LD_VAR 0 7
45943: RET
// export function EnemyInRange ( unit , dist ) ; begin
45944: LD_INT 0
45946: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_VAR 0 1
45956: PPUSH
45957: CALL_OW 255
45961: PPUSH
45962: LD_VAR 0 1
45966: PPUSH
45967: CALL_OW 250
45971: PPUSH
45972: LD_VAR 0 1
45976: PPUSH
45977: CALL_OW 251
45981: PPUSH
45982: LD_VAR 0 2
45986: PPUSH
45987: CALL 19201 0 4
45991: PUSH
45992: LD_INT 4
45994: ARRAY
45995: ST_TO_ADDR
// end ;
45996: LD_VAR 0 3
46000: RET
// export function PlayerSeeMe ( unit ) ; begin
46001: LD_INT 0
46003: PPUSH
// result := See ( your_side , unit ) ;
46004: LD_ADDR_VAR 0 2
46008: PUSH
46009: LD_OWVAR 2
46013: PPUSH
46014: LD_VAR 0 1
46018: PPUSH
46019: CALL_OW 292
46023: ST_TO_ADDR
// end ;
46024: LD_VAR 0 2
46028: RET
// export function ReverseDir ( unit ) ; begin
46029: LD_INT 0
46031: PPUSH
// if not unit then
46032: LD_VAR 0 1
46036: NOT
46037: IFFALSE 46041
// exit ;
46039: GO 46064
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46041: LD_ADDR_VAR 0 2
46045: PUSH
46046: LD_VAR 0 1
46050: PPUSH
46051: CALL_OW 254
46055: PUSH
46056: LD_INT 3
46058: PLUS
46059: PUSH
46060: LD_INT 6
46062: MOD
46063: ST_TO_ADDR
// end ;
46064: LD_VAR 0 2
46068: RET
// export function ReverseArray ( array ) ; var i ; begin
46069: LD_INT 0
46071: PPUSH
46072: PPUSH
// if not array then
46073: LD_VAR 0 1
46077: NOT
46078: IFFALSE 46082
// exit ;
46080: GO 46137
// result := [ ] ;
46082: LD_ADDR_VAR 0 2
46086: PUSH
46087: EMPTY
46088: ST_TO_ADDR
// for i := array downto 1 do
46089: LD_ADDR_VAR 0 3
46093: PUSH
46094: DOUBLE
46095: LD_VAR 0 1
46099: INC
46100: ST_TO_ADDR
46101: LD_INT 1
46103: PUSH
46104: FOR_DOWNTO
46105: IFFALSE 46135
// result := Join ( result , array [ i ] ) ;
46107: LD_ADDR_VAR 0 2
46111: PUSH
46112: LD_VAR 0 2
46116: PPUSH
46117: LD_VAR 0 1
46121: PUSH
46122: LD_VAR 0 3
46126: ARRAY
46127: PPUSH
46128: CALL 50979 0 2
46132: ST_TO_ADDR
46133: GO 46104
46135: POP
46136: POP
// end ;
46137: LD_VAR 0 2
46141: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
46142: LD_INT 0
46144: PPUSH
46145: PPUSH
46146: PPUSH
46147: PPUSH
46148: PPUSH
46149: PPUSH
// if not unit or not hexes then
46150: LD_VAR 0 1
46154: NOT
46155: IFTRUE 46164
46157: PUSH
46158: LD_VAR 0 2
46162: NOT
46163: OR
46164: IFFALSE 46168
// exit ;
46166: GO 46291
// dist := 9999 ;
46168: LD_ADDR_VAR 0 5
46172: PUSH
46173: LD_INT 9999
46175: ST_TO_ADDR
// for i = 1 to hexes do
46176: LD_ADDR_VAR 0 4
46180: PUSH
46181: DOUBLE
46182: LD_INT 1
46184: DEC
46185: ST_TO_ADDR
46186: LD_VAR 0 2
46190: PUSH
46191: FOR_TO
46192: IFFALSE 46279
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46194: LD_ADDR_VAR 0 6
46198: PUSH
46199: LD_VAR 0 1
46203: PPUSH
46204: LD_VAR 0 2
46208: PUSH
46209: LD_VAR 0 4
46213: ARRAY
46214: PUSH
46215: LD_INT 1
46217: ARRAY
46218: PPUSH
46219: LD_VAR 0 2
46223: PUSH
46224: LD_VAR 0 4
46228: ARRAY
46229: PUSH
46230: LD_INT 2
46232: ARRAY
46233: PPUSH
46234: CALL_OW 297
46238: ST_TO_ADDR
// if tdist < dist then
46239: LD_VAR 0 6
46243: PUSH
46244: LD_VAR 0 5
46248: LESS
46249: IFFALSE 46277
// begin hex := hexes [ i ] ;
46251: LD_ADDR_VAR 0 8
46255: PUSH
46256: LD_VAR 0 2
46260: PUSH
46261: LD_VAR 0 4
46265: ARRAY
46266: ST_TO_ADDR
// dist := tdist ;
46267: LD_ADDR_VAR 0 5
46271: PUSH
46272: LD_VAR 0 6
46276: ST_TO_ADDR
// end ; end ;
46277: GO 46191
46279: POP
46280: POP
// result := hex ;
46281: LD_ADDR_VAR 0 3
46285: PUSH
46286: LD_VAR 0 8
46290: ST_TO_ADDR
// end ;
46291: LD_VAR 0 3
46295: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
46296: LD_INT 0
46298: PPUSH
46299: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
46300: LD_VAR 0 1
46304: NOT
46305: IFTRUE 46344
46307: PUSH
46308: LD_VAR 0 1
46312: PUSH
46313: LD_INT 21
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 23
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PPUSH
46337: CALL_OW 69
46341: IN
46342: NOT
46343: OR
46344: IFFALSE 46348
// exit ;
46346: GO 46395
// for i = 1 to 3 do
46348: LD_ADDR_VAR 0 3
46352: PUSH
46353: DOUBLE
46354: LD_INT 1
46356: DEC
46357: ST_TO_ADDR
46358: LD_INT 3
46360: PUSH
46361: FOR_TO
46362: IFFALSE 46393
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
46364: LD_VAR 0 1
46368: PPUSH
46369: CALL_OW 250
46373: PPUSH
46374: LD_VAR 0 1
46378: PPUSH
46379: CALL_OW 251
46383: PPUSH
46384: LD_INT 1
46386: PPUSH
46387: CALL_OW 453
46391: GO 46361
46393: POP
46394: POP
// end ;
46395: LD_VAR 0 2
46399: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
46400: LD_INT 0
46402: PPUSH
46403: PPUSH
46404: PPUSH
46405: PPUSH
46406: PPUSH
46407: PPUSH
// if not unit or not enemy_unit then
46408: LD_VAR 0 1
46412: NOT
46413: IFTRUE 46422
46415: PUSH
46416: LD_VAR 0 2
46420: NOT
46421: OR
46422: IFFALSE 46426
// exit ;
46424: GO 46897
// if GetLives ( i ) < 250 then
46426: LD_VAR 0 4
46430: PPUSH
46431: CALL_OW 256
46435: PUSH
46436: LD_INT 250
46438: LESS
46439: IFFALSE 46452
// begin ComAutodestruct ( i ) ;
46441: LD_VAR 0 4
46445: PPUSH
46446: CALL 46296 0 1
// exit ;
46450: GO 46897
// end ; x := GetX ( enemy_unit ) ;
46452: LD_ADDR_VAR 0 7
46456: PUSH
46457: LD_VAR 0 2
46461: PPUSH
46462: CALL_OW 250
46466: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
46467: LD_ADDR_VAR 0 8
46471: PUSH
46472: LD_VAR 0 2
46476: PPUSH
46477: CALL_OW 251
46481: ST_TO_ADDR
// if not x or not y then
46482: LD_VAR 0 7
46486: NOT
46487: IFTRUE 46496
46489: PUSH
46490: LD_VAR 0 8
46494: NOT
46495: OR
46496: IFFALSE 46500
// exit ;
46498: GO 46897
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
46500: LD_ADDR_VAR 0 6
46504: PUSH
46505: LD_VAR 0 7
46509: PPUSH
46510: LD_INT 0
46512: PPUSH
46513: LD_INT 4
46515: PPUSH
46516: CALL_OW 272
46520: PUSH
46521: LD_VAR 0 8
46525: PPUSH
46526: LD_INT 0
46528: PPUSH
46529: LD_INT 4
46531: PPUSH
46532: CALL_OW 273
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_VAR 0 7
46545: PPUSH
46546: LD_INT 1
46548: PPUSH
46549: LD_INT 4
46551: PPUSH
46552: CALL_OW 272
46556: PUSH
46557: LD_VAR 0 8
46561: PPUSH
46562: LD_INT 1
46564: PPUSH
46565: LD_INT 4
46567: PPUSH
46568: CALL_OW 273
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_VAR 0 7
46581: PPUSH
46582: LD_INT 2
46584: PPUSH
46585: LD_INT 4
46587: PPUSH
46588: CALL_OW 272
46592: PUSH
46593: LD_VAR 0 8
46597: PPUSH
46598: LD_INT 2
46600: PPUSH
46601: LD_INT 4
46603: PPUSH
46604: CALL_OW 273
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_VAR 0 7
46617: PPUSH
46618: LD_INT 3
46620: PPUSH
46621: LD_INT 4
46623: PPUSH
46624: CALL_OW 272
46628: PUSH
46629: LD_VAR 0 8
46633: PPUSH
46634: LD_INT 3
46636: PPUSH
46637: LD_INT 4
46639: PPUSH
46640: CALL_OW 273
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_VAR 0 7
46653: PPUSH
46654: LD_INT 4
46656: PPUSH
46657: LD_INT 4
46659: PPUSH
46660: CALL_OW 272
46664: PUSH
46665: LD_VAR 0 8
46669: PPUSH
46670: LD_INT 4
46672: PPUSH
46673: LD_INT 4
46675: PPUSH
46676: CALL_OW 273
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_VAR 0 7
46689: PPUSH
46690: LD_INT 5
46692: PPUSH
46693: LD_INT 4
46695: PPUSH
46696: CALL_OW 272
46700: PUSH
46701: LD_VAR 0 8
46705: PPUSH
46706: LD_INT 5
46708: PPUSH
46709: LD_INT 4
46711: PPUSH
46712: CALL_OW 273
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: ST_TO_ADDR
// for i = tmp downto 1 do
46729: LD_ADDR_VAR 0 4
46733: PUSH
46734: DOUBLE
46735: LD_VAR 0 6
46739: INC
46740: ST_TO_ADDR
46741: LD_INT 1
46743: PUSH
46744: FOR_DOWNTO
46745: IFFALSE 46848
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46747: LD_VAR 0 6
46751: PUSH
46752: LD_VAR 0 4
46756: ARRAY
46757: PUSH
46758: LD_INT 1
46760: ARRAY
46761: PPUSH
46762: LD_VAR 0 6
46766: PUSH
46767: LD_VAR 0 4
46771: ARRAY
46772: PUSH
46773: LD_INT 2
46775: ARRAY
46776: PPUSH
46777: CALL_OW 488
46781: NOT
46782: IFTRUE 46824
46784: PUSH
46785: LD_VAR 0 6
46789: PUSH
46790: LD_VAR 0 4
46794: ARRAY
46795: PUSH
46796: LD_INT 1
46798: ARRAY
46799: PPUSH
46800: LD_VAR 0 6
46804: PUSH
46805: LD_VAR 0 4
46809: ARRAY
46810: PUSH
46811: LD_INT 2
46813: ARRAY
46814: PPUSH
46815: CALL_OW 428
46819: PUSH
46820: LD_INT 0
46822: NONEQUAL
46823: OR
46824: IFFALSE 46846
// tmp := Delete ( tmp , i ) ;
46826: LD_ADDR_VAR 0 6
46830: PUSH
46831: LD_VAR 0 6
46835: PPUSH
46836: LD_VAR 0 4
46840: PPUSH
46841: CALL_OW 3
46845: ST_TO_ADDR
46846: GO 46744
46848: POP
46849: POP
// j := GetClosestHex ( unit , tmp ) ;
46850: LD_ADDR_VAR 0 5
46854: PUSH
46855: LD_VAR 0 1
46859: PPUSH
46860: LD_VAR 0 6
46864: PPUSH
46865: CALL 46142 0 2
46869: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46870: LD_VAR 0 1
46874: PPUSH
46875: LD_VAR 0 5
46879: PUSH
46880: LD_INT 1
46882: ARRAY
46883: PPUSH
46884: LD_VAR 0 5
46888: PUSH
46889: LD_INT 2
46891: ARRAY
46892: PPUSH
46893: CALL_OW 111
// end ;
46897: LD_VAR 0 3
46901: RET
// export function PrepareApemanSoldier ( ) ; begin
46902: LD_INT 0
46904: PPUSH
// uc_nation := 0 ;
46905: LD_ADDR_OWVAR 21
46909: PUSH
46910: LD_INT 0
46912: ST_TO_ADDR
// hc_sex := sex_male ;
46913: LD_ADDR_OWVAR 27
46917: PUSH
46918: LD_INT 1
46920: ST_TO_ADDR
// hc_name :=  ;
46921: LD_ADDR_OWVAR 26
46925: PUSH
46926: LD_STRING 
46928: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
46929: LD_ADDR_OWVAR 28
46933: PUSH
46934: LD_INT 15
46936: ST_TO_ADDR
// hc_gallery :=  ;
46937: LD_ADDR_OWVAR 33
46941: PUSH
46942: LD_STRING 
46944: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46945: LD_ADDR_OWVAR 31
46949: PUSH
46950: LD_INT 0
46952: PPUSH
46953: LD_INT 3
46955: PPUSH
46956: CALL_OW 12
46960: PUSH
46961: LD_INT 0
46963: PPUSH
46964: LD_INT 3
46966: PPUSH
46967: CALL_OW 12
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
46984: LD_ADDR_OWVAR 29
46988: PUSH
46989: LD_INT 12
46991: PUSH
46992: LD_INT 12
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// end ;
46999: LD_VAR 0 1
47003: RET
// export function PrepareApemanEngineer ( ) ; begin
47004: LD_INT 0
47006: PPUSH
// uc_nation := 0 ;
47007: LD_ADDR_OWVAR 21
47011: PUSH
47012: LD_INT 0
47014: ST_TO_ADDR
// hc_sex := sex_male ;
47015: LD_ADDR_OWVAR 27
47019: PUSH
47020: LD_INT 1
47022: ST_TO_ADDR
// hc_name :=  ;
47023: LD_ADDR_OWVAR 26
47027: PUSH
47028: LD_STRING 
47030: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47031: LD_ADDR_OWVAR 28
47035: PUSH
47036: LD_INT 16
47038: ST_TO_ADDR
// hc_gallery :=  ;
47039: LD_ADDR_OWVAR 33
47043: PUSH
47044: LD_STRING 
47046: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47047: LD_ADDR_OWVAR 31
47051: PUSH
47052: LD_INT 0
47054: PPUSH
47055: LD_INT 3
47057: PPUSH
47058: CALL_OW 12
47062: PUSH
47063: LD_INT 0
47065: PPUSH
47066: LD_INT 3
47068: PPUSH
47069: CALL_OW 12
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47086: LD_ADDR_OWVAR 29
47090: PUSH
47091: LD_INT 12
47093: PUSH
47094: LD_INT 12
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: ST_TO_ADDR
// end ;
47101: LD_VAR 0 1
47105: RET
// export function PrepareApeman ( agressivity ) ; begin
47106: LD_INT 0
47108: PPUSH
// uc_side := 0 ;
47109: LD_ADDR_OWVAR 20
47113: PUSH
47114: LD_INT 0
47116: ST_TO_ADDR
// uc_nation := 0 ;
47117: LD_ADDR_OWVAR 21
47121: PUSH
47122: LD_INT 0
47124: ST_TO_ADDR
// hc_sex := sex_male ;
47125: LD_ADDR_OWVAR 27
47129: PUSH
47130: LD_INT 1
47132: ST_TO_ADDR
// hc_class := class_apeman ;
47133: LD_ADDR_OWVAR 28
47137: PUSH
47138: LD_INT 12
47140: ST_TO_ADDR
// hc_gallery :=  ;
47141: LD_ADDR_OWVAR 33
47145: PUSH
47146: LD_STRING 
47148: ST_TO_ADDR
// hc_name :=  ;
47149: LD_ADDR_OWVAR 26
47153: PUSH
47154: LD_STRING 
47156: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
47157: LD_ADDR_OWVAR 29
47161: PUSH
47162: LD_INT 12
47164: PUSH
47165: LD_INT 12
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// if agressivity = 0 then
47172: LD_VAR 0 1
47176: PUSH
47177: LD_INT 0
47179: EQUAL
47180: IFFALSE 47192
// hc_agressivity := 0 else
47182: LD_ADDR_OWVAR 35
47186: PUSH
47187: LD_INT 0
47189: ST_TO_ADDR
47190: GO 47213
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47192: LD_ADDR_OWVAR 35
47196: PUSH
47197: LD_VAR 0 1
47201: NEG
47202: PPUSH
47203: LD_VAR 0 1
47207: PPUSH
47208: CALL_OW 12
47212: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47213: LD_ADDR_OWVAR 31
47217: PUSH
47218: LD_INT 0
47220: PPUSH
47221: LD_INT 3
47223: PPUSH
47224: CALL_OW 12
47228: PUSH
47229: LD_INT 0
47231: PPUSH
47232: LD_INT 3
47234: PPUSH
47235: CALL_OW 12
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: LD_INT 0
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// end ;
47252: LD_VAR 0 2
47256: RET
// export function PrepareTiger ( agressivity ) ; begin
47257: LD_INT 0
47259: PPUSH
// uc_side := 0 ;
47260: LD_ADDR_OWVAR 20
47264: PUSH
47265: LD_INT 0
47267: ST_TO_ADDR
// uc_nation := 0 ;
47268: LD_ADDR_OWVAR 21
47272: PUSH
47273: LD_INT 0
47275: ST_TO_ADDR
// InitHc ;
47276: CALL_OW 19
// hc_class := class_tiger ;
47280: LD_ADDR_OWVAR 28
47284: PUSH
47285: LD_INT 14
47287: ST_TO_ADDR
// hc_gallery :=  ;
47288: LD_ADDR_OWVAR 33
47292: PUSH
47293: LD_STRING 
47295: ST_TO_ADDR
// hc_name :=  ;
47296: LD_ADDR_OWVAR 26
47300: PUSH
47301: LD_STRING 
47303: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47304: LD_ADDR_OWVAR 35
47308: PUSH
47309: LD_VAR 0 1
47313: NEG
47314: PPUSH
47315: LD_VAR 0 1
47319: PPUSH
47320: CALL_OW 12
47324: ST_TO_ADDR
// end ;
47325: LD_VAR 0 2
47329: RET
// export function PrepareEnchidna ( ) ; begin
47330: LD_INT 0
47332: PPUSH
// uc_side := 0 ;
47333: LD_ADDR_OWVAR 20
47337: PUSH
47338: LD_INT 0
47340: ST_TO_ADDR
// uc_nation := 0 ;
47341: LD_ADDR_OWVAR 21
47345: PUSH
47346: LD_INT 0
47348: ST_TO_ADDR
// InitHc ;
47349: CALL_OW 19
// hc_class := class_baggie ;
47353: LD_ADDR_OWVAR 28
47357: PUSH
47358: LD_INT 13
47360: ST_TO_ADDR
// hc_gallery :=  ;
47361: LD_ADDR_OWVAR 33
47365: PUSH
47366: LD_STRING 
47368: ST_TO_ADDR
// hc_name :=  ;
47369: LD_ADDR_OWVAR 26
47373: PUSH
47374: LD_STRING 
47376: ST_TO_ADDR
// end ;
47377: LD_VAR 0 1
47381: RET
// export function PrepareFrog ( ) ; begin
47382: LD_INT 0
47384: PPUSH
// uc_side := 0 ;
47385: LD_ADDR_OWVAR 20
47389: PUSH
47390: LD_INT 0
47392: ST_TO_ADDR
// uc_nation := 0 ;
47393: LD_ADDR_OWVAR 21
47397: PUSH
47398: LD_INT 0
47400: ST_TO_ADDR
// InitHc ;
47401: CALL_OW 19
// hc_class := class_frog ;
47405: LD_ADDR_OWVAR 28
47409: PUSH
47410: LD_INT 19
47412: ST_TO_ADDR
// hc_gallery :=  ;
47413: LD_ADDR_OWVAR 33
47417: PUSH
47418: LD_STRING 
47420: ST_TO_ADDR
// hc_name :=  ;
47421: LD_ADDR_OWVAR 26
47425: PUSH
47426: LD_STRING 
47428: ST_TO_ADDR
// end ;
47429: LD_VAR 0 1
47433: RET
// export function PrepareFish ( ) ; begin
47434: LD_INT 0
47436: PPUSH
// uc_side := 0 ;
47437: LD_ADDR_OWVAR 20
47441: PUSH
47442: LD_INT 0
47444: ST_TO_ADDR
// uc_nation := 0 ;
47445: LD_ADDR_OWVAR 21
47449: PUSH
47450: LD_INT 0
47452: ST_TO_ADDR
// InitHc ;
47453: CALL_OW 19
// hc_class := class_fish ;
47457: LD_ADDR_OWVAR 28
47461: PUSH
47462: LD_INT 20
47464: ST_TO_ADDR
// hc_gallery :=  ;
47465: LD_ADDR_OWVAR 33
47469: PUSH
47470: LD_STRING 
47472: ST_TO_ADDR
// hc_name :=  ;
47473: LD_ADDR_OWVAR 26
47477: PUSH
47478: LD_STRING 
47480: ST_TO_ADDR
// end ;
47481: LD_VAR 0 1
47485: RET
// export function PrepareBird ( ) ; begin
47486: LD_INT 0
47488: PPUSH
// uc_side := 0 ;
47489: LD_ADDR_OWVAR 20
47493: PUSH
47494: LD_INT 0
47496: ST_TO_ADDR
// uc_nation := 0 ;
47497: LD_ADDR_OWVAR 21
47501: PUSH
47502: LD_INT 0
47504: ST_TO_ADDR
// InitHc ;
47505: CALL_OW 19
// hc_class := class_phororhacos ;
47509: LD_ADDR_OWVAR 28
47513: PUSH
47514: LD_INT 18
47516: ST_TO_ADDR
// hc_gallery :=  ;
47517: LD_ADDR_OWVAR 33
47521: PUSH
47522: LD_STRING 
47524: ST_TO_ADDR
// hc_name :=  ;
47525: LD_ADDR_OWVAR 26
47529: PUSH
47530: LD_STRING 
47532: ST_TO_ADDR
// end ;
47533: LD_VAR 0 1
47537: RET
// export function PrepareHorse ( ) ; begin
47538: LD_INT 0
47540: PPUSH
// uc_side := 0 ;
47541: LD_ADDR_OWVAR 20
47545: PUSH
47546: LD_INT 0
47548: ST_TO_ADDR
// uc_nation := 0 ;
47549: LD_ADDR_OWVAR 21
47553: PUSH
47554: LD_INT 0
47556: ST_TO_ADDR
// InitHc ;
47557: CALL_OW 19
// hc_class := class_horse ;
47561: LD_ADDR_OWVAR 28
47565: PUSH
47566: LD_INT 21
47568: ST_TO_ADDR
// hc_gallery :=  ;
47569: LD_ADDR_OWVAR 33
47573: PUSH
47574: LD_STRING 
47576: ST_TO_ADDR
// hc_name :=  ;
47577: LD_ADDR_OWVAR 26
47581: PUSH
47582: LD_STRING 
47584: ST_TO_ADDR
// end ;
47585: LD_VAR 0 1
47589: RET
// export function PrepareMastodont ( ) ; begin
47590: LD_INT 0
47592: PPUSH
// uc_side := 0 ;
47593: LD_ADDR_OWVAR 20
47597: PUSH
47598: LD_INT 0
47600: ST_TO_ADDR
// uc_nation := 0 ;
47601: LD_ADDR_OWVAR 21
47605: PUSH
47606: LD_INT 0
47608: ST_TO_ADDR
// vc_chassis := class_mastodont ;
47609: LD_ADDR_OWVAR 37
47613: PUSH
47614: LD_INT 31
47616: ST_TO_ADDR
// vc_control := control_rider ;
47617: LD_ADDR_OWVAR 38
47621: PUSH
47622: LD_INT 4
47624: ST_TO_ADDR
// end ;
47625: LD_VAR 0 1
47629: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
47630: LD_INT 0
47632: PPUSH
47633: PPUSH
47634: PPUSH
// uc_side = 0 ;
47635: LD_ADDR_OWVAR 20
47639: PUSH
47640: LD_INT 0
47642: ST_TO_ADDR
// uc_nation = 0 ;
47643: LD_ADDR_OWVAR 21
47647: PUSH
47648: LD_INT 0
47650: ST_TO_ADDR
// InitHc_All ( ) ;
47651: CALL_OW 584
// InitVc ;
47655: CALL_OW 20
// if mastodonts then
47659: LD_VAR 0 6
47663: IFFALSE 47730
// for i = 1 to mastodonts do
47665: LD_ADDR_VAR 0 11
47669: PUSH
47670: DOUBLE
47671: LD_INT 1
47673: DEC
47674: ST_TO_ADDR
47675: LD_VAR 0 6
47679: PUSH
47680: FOR_TO
47681: IFFALSE 47728
// begin vc_chassis := 31 ;
47683: LD_ADDR_OWVAR 37
47687: PUSH
47688: LD_INT 31
47690: ST_TO_ADDR
// vc_control := control_rider ;
47691: LD_ADDR_OWVAR 38
47695: PUSH
47696: LD_INT 4
47698: ST_TO_ADDR
// animal := CreateVehicle ;
47699: LD_ADDR_VAR 0 12
47703: PUSH
47704: CALL_OW 45
47708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47709: LD_VAR 0 12
47713: PPUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: LD_INT 0
47721: PPUSH
47722: CALL 49872 0 3
// end ;
47726: GO 47680
47728: POP
47729: POP
// if horses then
47730: LD_VAR 0 5
47734: IFFALSE 47801
// for i = 1 to horses do
47736: LD_ADDR_VAR 0 11
47740: PUSH
47741: DOUBLE
47742: LD_INT 1
47744: DEC
47745: ST_TO_ADDR
47746: LD_VAR 0 5
47750: PUSH
47751: FOR_TO
47752: IFFALSE 47799
// begin hc_class := 21 ;
47754: LD_ADDR_OWVAR 28
47758: PUSH
47759: LD_INT 21
47761: ST_TO_ADDR
// hc_gallery :=  ;
47762: LD_ADDR_OWVAR 33
47766: PUSH
47767: LD_STRING 
47769: ST_TO_ADDR
// animal := CreateHuman ;
47770: LD_ADDR_VAR 0 12
47774: PUSH
47775: CALL_OW 44
47779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47780: LD_VAR 0 12
47784: PPUSH
47785: LD_VAR 0 8
47789: PPUSH
47790: LD_INT 0
47792: PPUSH
47793: CALL 49872 0 3
// end ;
47797: GO 47751
47799: POP
47800: POP
// if birds then
47801: LD_VAR 0 1
47805: IFFALSE 47872
// for i = 1 to birds do
47807: LD_ADDR_VAR 0 11
47811: PUSH
47812: DOUBLE
47813: LD_INT 1
47815: DEC
47816: ST_TO_ADDR
47817: LD_VAR 0 1
47821: PUSH
47822: FOR_TO
47823: IFFALSE 47870
// begin hc_class := 18 ;
47825: LD_ADDR_OWVAR 28
47829: PUSH
47830: LD_INT 18
47832: ST_TO_ADDR
// hc_gallery =  ;
47833: LD_ADDR_OWVAR 33
47837: PUSH
47838: LD_STRING 
47840: ST_TO_ADDR
// animal := CreateHuman ;
47841: LD_ADDR_VAR 0 12
47845: PUSH
47846: CALL_OW 44
47850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47851: LD_VAR 0 12
47855: PPUSH
47856: LD_VAR 0 8
47860: PPUSH
47861: LD_INT 0
47863: PPUSH
47864: CALL 49872 0 3
// end ;
47868: GO 47822
47870: POP
47871: POP
// if tigers then
47872: LD_VAR 0 2
47876: IFFALSE 47960
// for i = 1 to tigers do
47878: LD_ADDR_VAR 0 11
47882: PUSH
47883: DOUBLE
47884: LD_INT 1
47886: DEC
47887: ST_TO_ADDR
47888: LD_VAR 0 2
47892: PUSH
47893: FOR_TO
47894: IFFALSE 47958
// begin hc_class = class_tiger ;
47896: LD_ADDR_OWVAR 28
47900: PUSH
47901: LD_INT 14
47903: ST_TO_ADDR
// hc_gallery =  ;
47904: LD_ADDR_OWVAR 33
47908: PUSH
47909: LD_STRING 
47911: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47912: LD_ADDR_OWVAR 35
47916: PUSH
47917: LD_INT 7
47919: NEG
47920: PPUSH
47921: LD_INT 7
47923: PPUSH
47924: CALL_OW 12
47928: ST_TO_ADDR
// animal := CreateHuman ;
47929: LD_ADDR_VAR 0 12
47933: PUSH
47934: CALL_OW 44
47938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47939: LD_VAR 0 12
47943: PPUSH
47944: LD_VAR 0 8
47948: PPUSH
47949: LD_INT 0
47951: PPUSH
47952: CALL 49872 0 3
// end ;
47956: GO 47893
47958: POP
47959: POP
// if apemans then
47960: LD_VAR 0 3
47964: IFFALSE 48087
// for i = 1 to apemans do
47966: LD_ADDR_VAR 0 11
47970: PUSH
47971: DOUBLE
47972: LD_INT 1
47974: DEC
47975: ST_TO_ADDR
47976: LD_VAR 0 3
47980: PUSH
47981: FOR_TO
47982: IFFALSE 48085
// begin hc_class = class_apeman ;
47984: LD_ADDR_OWVAR 28
47988: PUSH
47989: LD_INT 12
47991: ST_TO_ADDR
// hc_gallery =  ;
47992: LD_ADDR_OWVAR 33
47996: PUSH
47997: LD_STRING 
47999: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48000: LD_ADDR_OWVAR 35
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PPUSH
48009: LD_INT 2
48011: PPUSH
48012: CALL_OW 12
48016: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48017: LD_ADDR_OWVAR 31
48021: PUSH
48022: LD_INT 1
48024: PPUSH
48025: LD_INT 3
48027: PPUSH
48028: CALL_OW 12
48032: PUSH
48033: LD_INT 1
48035: PPUSH
48036: LD_INT 3
48038: PPUSH
48039: CALL_OW 12
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// animal := CreateHuman ;
48056: LD_ADDR_VAR 0 12
48060: PUSH
48061: CALL_OW 44
48065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48066: LD_VAR 0 12
48070: PPUSH
48071: LD_VAR 0 8
48075: PPUSH
48076: LD_INT 0
48078: PPUSH
48079: CALL 49872 0 3
// end ;
48083: GO 47981
48085: POP
48086: POP
// if enchidnas then
48087: LD_VAR 0 4
48091: IFFALSE 48158
// for i = 1 to enchidnas do
48093: LD_ADDR_VAR 0 11
48097: PUSH
48098: DOUBLE
48099: LD_INT 1
48101: DEC
48102: ST_TO_ADDR
48103: LD_VAR 0 4
48107: PUSH
48108: FOR_TO
48109: IFFALSE 48156
// begin hc_class = 13 ;
48111: LD_ADDR_OWVAR 28
48115: PUSH
48116: LD_INT 13
48118: ST_TO_ADDR
// hc_gallery =  ;
48119: LD_ADDR_OWVAR 33
48123: PUSH
48124: LD_STRING 
48126: ST_TO_ADDR
// animal := CreateHuman ;
48127: LD_ADDR_VAR 0 12
48131: PUSH
48132: CALL_OW 44
48136: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48137: LD_VAR 0 12
48141: PPUSH
48142: LD_VAR 0 8
48146: PPUSH
48147: LD_INT 0
48149: PPUSH
48150: CALL 49872 0 3
// end ;
48154: GO 48108
48156: POP
48157: POP
// if fishes then
48158: LD_VAR 0 7
48162: IFFALSE 48229
// for i = 1 to fishes do
48164: LD_ADDR_VAR 0 11
48168: PUSH
48169: DOUBLE
48170: LD_INT 1
48172: DEC
48173: ST_TO_ADDR
48174: LD_VAR 0 7
48178: PUSH
48179: FOR_TO
48180: IFFALSE 48227
// begin hc_class = 20 ;
48182: LD_ADDR_OWVAR 28
48186: PUSH
48187: LD_INT 20
48189: ST_TO_ADDR
// hc_gallery =  ;
48190: LD_ADDR_OWVAR 33
48194: PUSH
48195: LD_STRING 
48197: ST_TO_ADDR
// animal := CreateHuman ;
48198: LD_ADDR_VAR 0 12
48202: PUSH
48203: CALL_OW 44
48207: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48208: LD_VAR 0 12
48212: PPUSH
48213: LD_VAR 0 9
48217: PPUSH
48218: LD_INT 0
48220: PPUSH
48221: CALL 49872 0 3
// end ;
48225: GO 48179
48227: POP
48228: POP
// end ;
48229: LD_VAR 0 10
48233: RET
// export function WantHeal ( sci , unit ) ; begin
48234: LD_INT 0
48236: PPUSH
// if GetTaskList ( sci ) > 0 then
48237: LD_VAR 0 1
48241: PPUSH
48242: CALL_OW 437
48246: PUSH
48247: LD_INT 0
48249: GREATER
48250: IFFALSE 48322
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48252: LD_VAR 0 1
48256: PPUSH
48257: CALL_OW 437
48261: PUSH
48262: LD_INT 1
48264: ARRAY
48265: PUSH
48266: LD_INT 1
48268: ARRAY
48269: PUSH
48270: LD_STRING l
48272: EQUAL
48273: IFFALSE 48300
48275: PUSH
48276: LD_VAR 0 1
48280: PPUSH
48281: CALL_OW 437
48285: PUSH
48286: LD_INT 1
48288: ARRAY
48289: PUSH
48290: LD_INT 4
48292: ARRAY
48293: PUSH
48294: LD_VAR 0 2
48298: EQUAL
48299: AND
48300: IFFALSE 48312
// result := true else
48302: LD_ADDR_VAR 0 3
48306: PUSH
48307: LD_INT 1
48309: ST_TO_ADDR
48310: GO 48320
// result := false ;
48312: LD_ADDR_VAR 0 3
48316: PUSH
48317: LD_INT 0
48319: ST_TO_ADDR
// end else
48320: GO 48330
// result := false ;
48322: LD_ADDR_VAR 0 3
48326: PUSH
48327: LD_INT 0
48329: ST_TO_ADDR
// end ;
48330: LD_VAR 0 3
48334: RET
// export function HealTarget ( sci ) ; begin
48335: LD_INT 0
48337: PPUSH
// if not sci then
48338: LD_VAR 0 1
48342: NOT
48343: IFFALSE 48347
// exit ;
48345: GO 48412
// result := 0 ;
48347: LD_ADDR_VAR 0 2
48351: PUSH
48352: LD_INT 0
48354: ST_TO_ADDR
// if GetTaskList ( sci ) then
48355: LD_VAR 0 1
48359: PPUSH
48360: CALL_OW 437
48364: IFFALSE 48412
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48366: LD_VAR 0 1
48370: PPUSH
48371: CALL_OW 437
48375: PUSH
48376: LD_INT 1
48378: ARRAY
48379: PUSH
48380: LD_INT 1
48382: ARRAY
48383: PUSH
48384: LD_STRING l
48386: EQUAL
48387: IFFALSE 48412
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48389: LD_ADDR_VAR 0 2
48393: PUSH
48394: LD_VAR 0 1
48398: PPUSH
48399: CALL_OW 437
48403: PUSH
48404: LD_INT 1
48406: ARRAY
48407: PUSH
48408: LD_INT 4
48410: ARRAY
48411: ST_TO_ADDR
// end ;
48412: LD_VAR 0 2
48416: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48417: LD_INT 0
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
// if not base_units then
48423: LD_VAR 0 1
48427: NOT
48428: IFFALSE 48432
// exit ;
48430: GO 48519
// result := false ;
48432: LD_ADDR_VAR 0 2
48436: PUSH
48437: LD_INT 0
48439: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
48440: LD_ADDR_VAR 0 5
48444: PUSH
48445: LD_VAR 0 1
48449: PPUSH
48450: LD_INT 21
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PPUSH
48460: CALL_OW 72
48464: ST_TO_ADDR
// if not tmp then
48465: LD_VAR 0 5
48469: NOT
48470: IFFALSE 48474
// exit ;
48472: GO 48519
// for i in tmp do
48474: LD_ADDR_VAR 0 3
48478: PUSH
48479: LD_VAR 0 5
48483: PUSH
48484: FOR_IN
48485: IFFALSE 48517
// begin result := EnemyInRange ( i , 22 ) ;
48487: LD_ADDR_VAR 0 2
48491: PUSH
48492: LD_VAR 0 3
48496: PPUSH
48497: LD_INT 22
48499: PPUSH
48500: CALL 45944 0 2
48504: ST_TO_ADDR
// if result then
48505: LD_VAR 0 2
48509: IFFALSE 48515
// exit ;
48511: POP
48512: POP
48513: GO 48519
// end ;
48515: GO 48484
48517: POP
48518: POP
// end ;
48519: LD_VAR 0 2
48523: RET
// export function FilterByTag ( units , tag ) ; begin
48524: LD_INT 0
48526: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: LD_INT 120
48539: PUSH
48540: LD_VAR 0 2
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PPUSH
48549: CALL_OW 72
48553: ST_TO_ADDR
// end ;
48554: LD_VAR 0 3
48558: RET
// export function IsDriver ( un ) ; begin
48559: LD_INT 0
48561: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
48562: LD_ADDR_VAR 0 2
48566: PUSH
48567: LD_VAR 0 1
48571: PUSH
48572: LD_INT 55
48574: PUSH
48575: EMPTY
48576: LIST
48577: PPUSH
48578: CALL_OW 69
48582: IN
48583: ST_TO_ADDR
// end ;
48584: LD_VAR 0 2
48588: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
48589: LD_INT 0
48591: PPUSH
48592: PPUSH
// list := [ ] ;
48593: LD_ADDR_VAR 0 5
48597: PUSH
48598: EMPTY
48599: ST_TO_ADDR
// case d of 0 :
48600: LD_VAR 0 3
48604: PUSH
48605: LD_INT 0
48607: DOUBLE
48608: EQUAL
48609: IFTRUE 48613
48611: GO 48746
48613: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
48614: LD_ADDR_VAR 0 5
48618: PUSH
48619: LD_VAR 0 1
48623: PUSH
48624: LD_INT 4
48626: MINUS
48627: PUSH
48628: LD_VAR 0 2
48632: PUSH
48633: LD_INT 4
48635: MINUS
48636: PUSH
48637: LD_INT 2
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: PUSH
48645: LD_VAR 0 1
48649: PUSH
48650: LD_INT 3
48652: MINUS
48653: PUSH
48654: LD_VAR 0 2
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: PUSH
48667: LD_VAR 0 1
48671: PUSH
48672: LD_INT 4
48674: PLUS
48675: PUSH
48676: LD_VAR 0 2
48680: PUSH
48681: LD_INT 4
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: LIST
48688: PUSH
48689: LD_VAR 0 1
48693: PUSH
48694: LD_INT 3
48696: PLUS
48697: PUSH
48698: LD_VAR 0 2
48702: PUSH
48703: LD_INT 3
48705: PLUS
48706: PUSH
48707: LD_INT 5
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: PUSH
48715: LD_VAR 0 1
48719: PUSH
48720: LD_VAR 0 2
48724: PUSH
48725: LD_INT 4
48727: PLUS
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// end ; 1 :
48744: GO 49444
48746: LD_INT 1
48748: DOUBLE
48749: EQUAL
48750: IFTRUE 48754
48752: GO 48887
48754: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
48755: LD_ADDR_VAR 0 5
48759: PUSH
48760: LD_VAR 0 1
48764: PUSH
48765: LD_VAR 0 2
48769: PUSH
48770: LD_INT 4
48772: MINUS
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: PUSH
48782: LD_VAR 0 1
48786: PUSH
48787: LD_INT 3
48789: MINUS
48790: PUSH
48791: LD_VAR 0 2
48795: PUSH
48796: LD_INT 3
48798: MINUS
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: LIST
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: LD_INT 4
48815: MINUS
48816: PUSH
48817: LD_VAR 0 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: PUSH
48830: LD_VAR 0 1
48834: PUSH
48835: LD_VAR 0 2
48839: PUSH
48840: LD_INT 3
48842: PLUS
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: PUSH
48852: LD_VAR 0 1
48856: PUSH
48857: LD_INT 4
48859: PLUS
48860: PUSH
48861: LD_VAR 0 2
48865: PUSH
48866: LD_INT 4
48868: PLUS
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// end ; 2 :
48885: GO 49444
48887: LD_INT 2
48889: DOUBLE
48890: EQUAL
48891: IFTRUE 48895
48893: GO 49024
48895: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
48896: LD_ADDR_VAR 0 5
48900: PUSH
48901: LD_VAR 0 1
48905: PUSH
48906: LD_VAR 0 2
48910: PUSH
48911: LD_INT 3
48913: MINUS
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: PUSH
48923: LD_VAR 0 1
48927: PUSH
48928: LD_INT 4
48930: PLUS
48931: PUSH
48932: LD_VAR 0 2
48936: PUSH
48937: LD_INT 4
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: LIST
48944: PUSH
48945: LD_VAR 0 1
48949: PUSH
48950: LD_VAR 0 2
48954: PUSH
48955: LD_INT 4
48957: PLUS
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: PUSH
48967: LD_VAR 0 1
48971: PUSH
48972: LD_INT 3
48974: MINUS
48975: PUSH
48976: LD_VAR 0 2
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: PUSH
48989: LD_VAR 0 1
48993: PUSH
48994: LD_INT 4
48996: MINUS
48997: PUSH
48998: LD_VAR 0 2
49002: PUSH
49003: LD_INT 4
49005: MINUS
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: ST_TO_ADDR
// end ; 3 :
49022: GO 49444
49024: LD_INT 3
49026: DOUBLE
49027: EQUAL
49028: IFTRUE 49032
49030: GO 49165
49032: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49033: LD_ADDR_VAR 0 5
49037: PUSH
49038: LD_VAR 0 1
49042: PUSH
49043: LD_INT 3
49045: PLUS
49046: PUSH
49047: LD_VAR 0 2
49051: PUSH
49052: LD_INT 4
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: PUSH
49060: LD_VAR 0 1
49064: PUSH
49065: LD_INT 4
49067: PLUS
49068: PUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_INT 4
49076: PLUS
49077: PUSH
49078: LD_INT 5
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: LIST
49085: PUSH
49086: LD_VAR 0 1
49090: PUSH
49091: LD_INT 4
49093: MINUS
49094: PUSH
49095: LD_VAR 0 2
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: LIST
49107: PUSH
49108: LD_VAR 0 1
49112: PUSH
49113: LD_VAR 0 2
49117: PUSH
49118: LD_INT 4
49120: MINUS
49121: PUSH
49122: LD_INT 3
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: PUSH
49130: LD_VAR 0 1
49134: PUSH
49135: LD_INT 3
49137: MINUS
49138: PUSH
49139: LD_VAR 0 2
49143: PUSH
49144: LD_INT 3
49146: MINUS
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: ST_TO_ADDR
// end ; 4 :
49163: GO 49444
49165: LD_INT 4
49167: DOUBLE
49168: EQUAL
49169: IFTRUE 49173
49171: GO 49306
49173: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49174: LD_ADDR_VAR 0 5
49178: PUSH
49179: LD_VAR 0 1
49183: PUSH
49184: LD_VAR 0 2
49188: PUSH
49189: LD_INT 4
49191: PLUS
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: PUSH
49201: LD_VAR 0 1
49205: PUSH
49206: LD_INT 3
49208: PLUS
49209: PUSH
49210: LD_VAR 0 2
49214: PUSH
49215: LD_INT 3
49217: PLUS
49218: PUSH
49219: LD_INT 5
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: PUSH
49227: LD_VAR 0 1
49231: PUSH
49232: LD_INT 4
49234: PLUS
49235: PUSH
49236: LD_VAR 0 2
49240: PUSH
49241: LD_INT 4
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: PUSH
49249: LD_VAR 0 1
49253: PUSH
49254: LD_VAR 0 2
49258: PUSH
49259: LD_INT 3
49261: MINUS
49262: PUSH
49263: LD_INT 3
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: PUSH
49271: LD_VAR 0 1
49275: PUSH
49276: LD_INT 4
49278: MINUS
49279: PUSH
49280: LD_VAR 0 2
49284: PUSH
49285: LD_INT 4
49287: MINUS
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: ST_TO_ADDR
// end ; 5 :
49304: GO 49444
49306: LD_INT 5
49308: DOUBLE
49309: EQUAL
49310: IFTRUE 49314
49312: GO 49443
49314: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49315: LD_ADDR_VAR 0 5
49319: PUSH
49320: LD_VAR 0 1
49324: PUSH
49325: LD_INT 4
49327: MINUS
49328: PUSH
49329: LD_VAR 0 2
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: PUSH
49342: LD_VAR 0 1
49346: PUSH
49347: LD_VAR 0 2
49351: PUSH
49352: LD_INT 4
49354: MINUS
49355: PUSH
49356: LD_INT 3
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: LD_VAR 0 1
49368: PUSH
49369: LD_INT 4
49371: PLUS
49372: PUSH
49373: LD_VAR 0 2
49377: PUSH
49378: LD_INT 4
49380: PLUS
49381: PUSH
49382: LD_INT 5
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: PUSH
49390: LD_VAR 0 1
49394: PUSH
49395: LD_INT 3
49397: PLUS
49398: PUSH
49399: LD_VAR 0 2
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: PUSH
49412: LD_VAR 0 1
49416: PUSH
49417: LD_VAR 0 2
49421: PUSH
49422: LD_INT 3
49424: PLUS
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// end ; end ;
49441: GO 49444
49443: POP
// result := list ;
49444: LD_ADDR_VAR 0 4
49448: PUSH
49449: LD_VAR 0 5
49453: ST_TO_ADDR
// end ;
49454: LD_VAR 0 4
49458: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
49459: LD_INT 0
49461: PPUSH
49462: PPUSH
49463: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
49464: LD_VAR 0 1
49468: NOT
49469: IFTRUE 49497
49471: PUSH
49472: LD_VAR 0 2
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: LD_INT 3
49485: PUSH
49486: LD_INT 4
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: IN
49495: NOT
49496: OR
49497: IFFALSE 49501
// exit ;
49499: GO 49584
// tmp := [ ] ;
49501: LD_ADDR_VAR 0 5
49505: PUSH
49506: EMPTY
49507: ST_TO_ADDR
// for i in units do
49508: LD_ADDR_VAR 0 4
49512: PUSH
49513: LD_VAR 0 1
49517: PUSH
49518: FOR_IN
49519: IFFALSE 49553
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
49521: LD_ADDR_VAR 0 5
49525: PUSH
49526: LD_VAR 0 5
49530: PPUSH
49531: LD_VAR 0 4
49535: PPUSH
49536: LD_VAR 0 2
49540: PPUSH
49541: CALL_OW 259
49545: PPUSH
49546: CALL 50979 0 2
49550: ST_TO_ADDR
49551: GO 49518
49553: POP
49554: POP
// if not tmp then
49555: LD_VAR 0 5
49559: NOT
49560: IFFALSE 49564
// exit ;
49562: GO 49584
// result := SortListByListDesc ( units , tmp ) ;
49564: LD_ADDR_VAR 0 3
49568: PUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: LD_VAR 0 5
49578: PPUSH
49579: CALL_OW 77
49583: ST_TO_ADDR
// end ;
49584: LD_VAR 0 3
49588: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
49589: LD_INT 0
49591: PPUSH
49592: PPUSH
49593: PPUSH
// result := false ;
49594: LD_ADDR_VAR 0 3
49598: PUSH
49599: LD_INT 0
49601: ST_TO_ADDR
// if not building then
49602: LD_VAR 0 2
49606: NOT
49607: IFFALSE 49611
// exit ;
49609: GO 49755
// x := GetX ( building ) ;
49611: LD_ADDR_VAR 0 4
49615: PUSH
49616: LD_VAR 0 2
49620: PPUSH
49621: CALL_OW 250
49625: ST_TO_ADDR
// y := GetY ( building ) ;
49626: LD_ADDR_VAR 0 5
49630: PUSH
49631: LD_VAR 0 2
49635: PPUSH
49636: CALL_OW 251
49640: ST_TO_ADDR
// if not x or not y then
49641: LD_VAR 0 4
49645: NOT
49646: IFTRUE 49655
49648: PUSH
49649: LD_VAR 0 5
49653: NOT
49654: OR
49655: IFFALSE 49659
// exit ;
49657: GO 49755
// if GetTaskList ( unit ) then
49659: LD_VAR 0 1
49663: PPUSH
49664: CALL_OW 437
49668: IFFALSE 49755
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49670: LD_STRING e
49672: PUSH
49673: LD_VAR 0 1
49677: PPUSH
49678: CALL_OW 437
49682: PUSH
49683: LD_INT 1
49685: ARRAY
49686: PUSH
49687: LD_INT 1
49689: ARRAY
49690: EQUAL
49691: IFFALSE 49718
49693: PUSH
49694: LD_VAR 0 4
49698: PUSH
49699: LD_VAR 0 1
49703: PPUSH
49704: CALL_OW 437
49708: PUSH
49709: LD_INT 1
49711: ARRAY
49712: PUSH
49713: LD_INT 2
49715: ARRAY
49716: EQUAL
49717: AND
49718: IFFALSE 49745
49720: PUSH
49721: LD_VAR 0 5
49725: PUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 437
49735: PUSH
49736: LD_INT 1
49738: ARRAY
49739: PUSH
49740: LD_INT 3
49742: ARRAY
49743: EQUAL
49744: AND
49745: IFFALSE 49755
// result := true end ;
49747: LD_ADDR_VAR 0 3
49751: PUSH
49752: LD_INT 1
49754: ST_TO_ADDR
// end ;
49755: LD_VAR 0 3
49759: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
49760: LD_INT 0
49762: PPUSH
// result := false ;
49763: LD_ADDR_VAR 0 4
49767: PUSH
49768: LD_INT 0
49770: ST_TO_ADDR
// if GetTaskList ( unit ) then
49771: LD_VAR 0 1
49775: PPUSH
49776: CALL_OW 437
49780: IFFALSE 49867
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
49782: LD_STRING M
49784: PUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: CALL_OW 437
49794: PUSH
49795: LD_INT 1
49797: ARRAY
49798: PUSH
49799: LD_INT 1
49801: ARRAY
49802: EQUAL
49803: IFFALSE 49830
49805: PUSH
49806: LD_VAR 0 2
49810: PUSH
49811: LD_VAR 0 1
49815: PPUSH
49816: CALL_OW 437
49820: PUSH
49821: LD_INT 1
49823: ARRAY
49824: PUSH
49825: LD_INT 2
49827: ARRAY
49828: EQUAL
49829: AND
49830: IFFALSE 49857
49832: PUSH
49833: LD_VAR 0 3
49837: PUSH
49838: LD_VAR 0 1
49842: PPUSH
49843: CALL_OW 437
49847: PUSH
49848: LD_INT 1
49850: ARRAY
49851: PUSH
49852: LD_INT 3
49854: ARRAY
49855: EQUAL
49856: AND
49857: IFFALSE 49867
// result := true ;
49859: LD_ADDR_VAR 0 4
49863: PUSH
49864: LD_INT 1
49866: ST_TO_ADDR
// end ; end ;
49867: LD_VAR 0 4
49871: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
49872: LD_INT 0
49874: PPUSH
49875: PPUSH
49876: PPUSH
49877: PPUSH
// if not unit or not area then
49878: LD_VAR 0 1
49882: NOT
49883: IFTRUE 49892
49885: PUSH
49886: LD_VAR 0 2
49890: NOT
49891: OR
49892: IFFALSE 49896
// exit ;
49894: GO 50072
// tmp := AreaToList ( area , i ) ;
49896: LD_ADDR_VAR 0 6
49900: PUSH
49901: LD_VAR 0 2
49905: PPUSH
49906: LD_VAR 0 5
49910: PPUSH
49911: CALL_OW 517
49915: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49916: LD_ADDR_VAR 0 5
49920: PUSH
49921: DOUBLE
49922: LD_INT 1
49924: DEC
49925: ST_TO_ADDR
49926: LD_VAR 0 6
49930: PUSH
49931: LD_INT 1
49933: ARRAY
49934: PUSH
49935: FOR_TO
49936: IFFALSE 50070
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49938: LD_ADDR_VAR 0 7
49942: PUSH
49943: LD_VAR 0 6
49947: PUSH
49948: LD_INT 1
49950: ARRAY
49951: PUSH
49952: LD_VAR 0 5
49956: ARRAY
49957: PUSH
49958: LD_VAR 0 6
49962: PUSH
49963: LD_INT 2
49965: ARRAY
49966: PUSH
49967: LD_VAR 0 5
49971: ARRAY
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
49977: LD_INT 92
49979: PUSH
49980: LD_VAR 0 7
49984: PUSH
49985: LD_INT 1
49987: ARRAY
49988: PUSH
49989: LD_VAR 0 7
49993: PUSH
49994: LD_INT 2
49996: ARRAY
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: PPUSH
50007: CALL_OW 69
50011: PUSH
50012: LD_INT 0
50014: EQUAL
50015: IFFALSE 50068
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50017: LD_VAR 0 1
50021: PPUSH
50022: LD_VAR 0 7
50026: PUSH
50027: LD_INT 1
50029: ARRAY
50030: PPUSH
50031: LD_VAR 0 7
50035: PUSH
50036: LD_INT 2
50038: ARRAY
50039: PPUSH
50040: LD_VAR 0 3
50044: PPUSH
50045: CALL_OW 48
// result := IsPlaced ( unit ) ;
50049: LD_ADDR_VAR 0 4
50053: PUSH
50054: LD_VAR 0 1
50058: PPUSH
50059: CALL_OW 305
50063: ST_TO_ADDR
// exit ;
50064: POP
50065: POP
50066: GO 50072
// end ; end ;
50068: GO 49935
50070: POP
50071: POP
// end ;
50072: LD_VAR 0 4
50076: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50077: LD_INT 0
50079: PPUSH
50080: PPUSH
50081: PPUSH
// if not side or side > 8 then
50082: LD_VAR 0 1
50086: NOT
50087: IFTRUE 50099
50089: PUSH
50090: LD_VAR 0 1
50094: PUSH
50095: LD_INT 8
50097: GREATER
50098: OR
50099: IFFALSE 50103
// exit ;
50101: GO 50290
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50103: LD_ADDR_VAR 0 4
50107: PUSH
50108: LD_INT 22
50110: PUSH
50111: LD_VAR 0 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 21
50122: PUSH
50123: LD_INT 3
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PPUSH
50134: CALL_OW 69
50138: ST_TO_ADDR
// if not tmp then
50139: LD_VAR 0 4
50143: NOT
50144: IFFALSE 50148
// exit ;
50146: GO 50290
// enable_addtolog := true ;
50148: LD_ADDR_OWVAR 81
50152: PUSH
50153: LD_INT 1
50155: ST_TO_ADDR
// AddToLog ( [ ) ;
50156: LD_STRING [
50158: PPUSH
50159: CALL_OW 561
// for i in tmp do
50163: LD_ADDR_VAR 0 3
50167: PUSH
50168: LD_VAR 0 4
50172: PUSH
50173: FOR_IN
50174: IFFALSE 50281
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50176: LD_STRING [
50178: PUSH
50179: LD_VAR 0 3
50183: PPUSH
50184: CALL_OW 266
50188: STR
50189: PUSH
50190: LD_STRING , 
50192: STR
50193: PUSH
50194: LD_VAR 0 3
50198: PPUSH
50199: CALL_OW 250
50203: STR
50204: PUSH
50205: LD_STRING , 
50207: STR
50208: PUSH
50209: LD_VAR 0 3
50213: PPUSH
50214: CALL_OW 251
50218: STR
50219: PUSH
50220: LD_STRING , 
50222: STR
50223: PUSH
50224: LD_VAR 0 3
50228: PPUSH
50229: CALL_OW 254
50233: STR
50234: PUSH
50235: LD_STRING , 
50237: STR
50238: PUSH
50239: LD_VAR 0 3
50243: PPUSH
50244: LD_INT 1
50246: PPUSH
50247: CALL_OW 268
50251: STR
50252: PUSH
50253: LD_STRING , 
50255: STR
50256: PUSH
50257: LD_VAR 0 3
50261: PPUSH
50262: LD_INT 2
50264: PPUSH
50265: CALL_OW 268
50269: STR
50270: PUSH
50271: LD_STRING ],
50273: STR
50274: PPUSH
50275: CALL_OW 561
// end ;
50279: GO 50173
50281: POP
50282: POP
// AddToLog ( ]; ) ;
50283: LD_STRING ];
50285: PPUSH
50286: CALL_OW 561
// end ;
50290: LD_VAR 0 2
50294: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50295: LD_INT 0
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
50301: PPUSH
// if not area or not rate or not max then
50302: LD_VAR 0 1
50306: NOT
50307: IFTRUE 50316
50309: PUSH
50310: LD_VAR 0 2
50314: NOT
50315: OR
50316: IFTRUE 50325
50318: PUSH
50319: LD_VAR 0 4
50323: NOT
50324: OR
50325: IFFALSE 50329
// exit ;
50327: GO 50518
// while 1 do
50329: LD_INT 1
50331: IFFALSE 50518
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
50333: LD_ADDR_VAR 0 9
50337: PUSH
50338: LD_VAR 0 1
50342: PPUSH
50343: LD_INT 1
50345: PPUSH
50346: CALL_OW 287
50350: PUSH
50351: LD_INT 10
50353: MUL
50354: ST_TO_ADDR
// r := rate / 10 ;
50355: LD_ADDR_VAR 0 7
50359: PUSH
50360: LD_VAR 0 2
50364: PUSH
50365: LD_INT 10
50367: DIVREAL
50368: ST_TO_ADDR
// time := 1 1$00 ;
50369: LD_ADDR_VAR 0 8
50373: PUSH
50374: LD_INT 2100
50376: ST_TO_ADDR
// if amount < min then
50377: LD_VAR 0 9
50381: PUSH
50382: LD_VAR 0 3
50386: LESS
50387: IFFALSE 50405
// r := r * 2 else
50389: LD_ADDR_VAR 0 7
50393: PUSH
50394: LD_VAR 0 7
50398: PUSH
50399: LD_INT 2
50401: MUL
50402: ST_TO_ADDR
50403: GO 50431
// if amount > max then
50405: LD_VAR 0 9
50409: PUSH
50410: LD_VAR 0 4
50414: GREATER
50415: IFFALSE 50431
// r := r / 2 ;
50417: LD_ADDR_VAR 0 7
50421: PUSH
50422: LD_VAR 0 7
50426: PUSH
50427: LD_INT 2
50429: DIVREAL
50430: ST_TO_ADDR
// time := time / r ;
50431: LD_ADDR_VAR 0 8
50435: PUSH
50436: LD_VAR 0 8
50440: PUSH
50441: LD_VAR 0 7
50445: DIVREAL
50446: ST_TO_ADDR
// if time < 0 then
50447: LD_VAR 0 8
50451: PUSH
50452: LD_INT 0
50454: LESS
50455: IFFALSE 50472
// time := time * - 1 ;
50457: LD_ADDR_VAR 0 8
50461: PUSH
50462: LD_VAR 0 8
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: MUL
50471: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
50472: LD_VAR 0 8
50476: PUSH
50477: LD_INT 35
50479: PPUSH
50480: LD_INT 875
50482: PPUSH
50483: CALL_OW 12
50487: PLUS
50488: PPUSH
50489: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
50493: LD_INT 1
50495: PPUSH
50496: LD_INT 5
50498: PPUSH
50499: CALL_OW 12
50503: PPUSH
50504: LD_VAR 0 1
50508: PPUSH
50509: LD_INT 1
50511: PPUSH
50512: CALL_OW 55
// end ;
50516: GO 50329
// end ;
50518: LD_VAR 0 5
50522: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
50523: LD_INT 0
50525: PPUSH
50526: PPUSH
50527: PPUSH
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
// if not turrets or not factories then
50533: LD_VAR 0 1
50537: NOT
50538: IFTRUE 50547
50540: PUSH
50541: LD_VAR 0 2
50545: NOT
50546: OR
50547: IFFALSE 50551
// exit ;
50549: GO 50858
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
50551: LD_ADDR_VAR 0 10
50555: PUSH
50556: LD_INT 5
50558: PUSH
50559: LD_INT 6
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: LD_INT 4
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: LD_INT 5
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 24
50593: PUSH
50594: LD_INT 25
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 23
50603: PUSH
50604: LD_INT 27
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 42
50617: PUSH
50618: LD_INT 43
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 44
50627: PUSH
50628: LD_INT 46
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 45
50637: PUSH
50638: LD_INT 47
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
// result := [ ] ;
50655: LD_ADDR_VAR 0 3
50659: PUSH
50660: EMPTY
50661: ST_TO_ADDR
// for i in turrets do
50662: LD_ADDR_VAR 0 4
50666: PUSH
50667: LD_VAR 0 1
50671: PUSH
50672: FOR_IN
50673: IFFALSE 50856
// begin nat := GetNation ( i ) ;
50675: LD_ADDR_VAR 0 7
50679: PUSH
50680: LD_VAR 0 4
50684: PPUSH
50685: CALL_OW 248
50689: ST_TO_ADDR
// weapon := 0 ;
50690: LD_ADDR_VAR 0 8
50694: PUSH
50695: LD_INT 0
50697: ST_TO_ADDR
// if not nat then
50698: LD_VAR 0 7
50702: NOT
50703: IFFALSE 50707
// continue ;
50705: GO 50672
// for j in list [ nat ] do
50707: LD_ADDR_VAR 0 5
50711: PUSH
50712: LD_VAR 0 10
50716: PUSH
50717: LD_VAR 0 7
50721: ARRAY
50722: PUSH
50723: FOR_IN
50724: IFFALSE 50765
// if GetBWeapon ( i ) = j [ 1 ] then
50726: LD_VAR 0 4
50730: PPUSH
50731: CALL_OW 269
50735: PUSH
50736: LD_VAR 0 5
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: EQUAL
50745: IFFALSE 50763
// begin weapon := j [ 2 ] ;
50747: LD_ADDR_VAR 0 8
50751: PUSH
50752: LD_VAR 0 5
50756: PUSH
50757: LD_INT 2
50759: ARRAY
50760: ST_TO_ADDR
// break ;
50761: GO 50765
// end ;
50763: GO 50723
50765: POP
50766: POP
// if not weapon then
50767: LD_VAR 0 8
50771: NOT
50772: IFFALSE 50776
// continue ;
50774: GO 50672
// for k in factories do
50776: LD_ADDR_VAR 0 6
50780: PUSH
50781: LD_VAR 0 2
50785: PUSH
50786: FOR_IN
50787: IFFALSE 50852
// begin weapons := AvailableWeaponList ( k ) ;
50789: LD_ADDR_VAR 0 9
50793: PUSH
50794: LD_VAR 0 6
50798: PPUSH
50799: CALL_OW 478
50803: ST_TO_ADDR
// if not weapons then
50804: LD_VAR 0 9
50808: NOT
50809: IFFALSE 50813
// continue ;
50811: GO 50786
// if weapon in weapons then
50813: LD_VAR 0 8
50817: PUSH
50818: LD_VAR 0 9
50822: IN
50823: IFFALSE 50850
// begin result := [ i , weapon ] ;
50825: LD_ADDR_VAR 0 3
50829: PUSH
50830: LD_VAR 0 4
50834: PUSH
50835: LD_VAR 0 8
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: ST_TO_ADDR
// exit ;
50844: POP
50845: POP
50846: POP
50847: POP
50848: GO 50858
// end ; end ;
50850: GO 50786
50852: POP
50853: POP
// end ;
50854: GO 50672
50856: POP
50857: POP
// end ;
50858: LD_VAR 0 3
50862: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
50863: LD_INT 0
50865: PPUSH
// if not side or side > 8 then
50866: LD_VAR 0 3
50870: NOT
50871: IFTRUE 50883
50873: PUSH
50874: LD_VAR 0 3
50878: PUSH
50879: LD_INT 8
50881: GREATER
50882: OR
50883: IFFALSE 50887
// exit ;
50885: GO 50946
// if not range then
50887: LD_VAR 0 4
50891: NOT
50892: IFFALSE 50903
// range := - 12 ;
50894: LD_ADDR_VAR 0 4
50898: PUSH
50899: LD_INT 12
50901: NEG
50902: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
50903: LD_VAR 0 1
50907: PPUSH
50908: LD_VAR 0 2
50912: PPUSH
50913: LD_VAR 0 3
50917: PPUSH
50918: LD_VAR 0 4
50922: PPUSH
50923: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
50927: LD_VAR 0 1
50931: PPUSH
50932: LD_VAR 0 2
50936: PPUSH
50937: LD_VAR 0 3
50941: PPUSH
50942: CALL_OW 331
// end ;
50946: LD_VAR 0 5
50950: RET
// export function Video ( mode ) ; begin
50951: LD_INT 0
50953: PPUSH
// ingame_video = mode ;
50954: LD_ADDR_OWVAR 52
50958: PUSH
50959: LD_VAR 0 1
50963: ST_TO_ADDR
// interface_hidden = mode ;
50964: LD_ADDR_OWVAR 54
50968: PUSH
50969: LD_VAR 0 1
50973: ST_TO_ADDR
// end ;
50974: LD_VAR 0 2
50978: RET
// export function Join ( array , element ) ; begin
50979: LD_INT 0
50981: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50982: LD_ADDR_VAR 0 3
50986: PUSH
50987: LD_VAR 0 1
50991: PPUSH
50992: LD_VAR 0 1
50996: PUSH
50997: LD_INT 1
50999: PLUS
51000: PPUSH
51001: LD_VAR 0 2
51005: PPUSH
51006: CALL_OW 1
51010: ST_TO_ADDR
// end ;
51011: LD_VAR 0 3
51015: RET
// export function JoinUnion ( array , element ) ; begin
51016: LD_INT 0
51018: PPUSH
// result := array union element ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_VAR 0 1
51028: PUSH
51029: LD_VAR 0 2
51033: UNION
51034: ST_TO_ADDR
// end ;
51035: LD_VAR 0 3
51039: RET
// export function GetBehemoths ( side ) ; begin
51040: LD_INT 0
51042: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51043: LD_ADDR_VAR 0 2
51047: PUSH
51048: LD_INT 22
51050: PUSH
51051: LD_VAR 0 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 31
51062: PUSH
51063: LD_INT 25
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PPUSH
51074: CALL_OW 69
51078: ST_TO_ADDR
// end ;
51079: LD_VAR 0 2
51083: RET
// export function Shuffle ( array ) ; var i , index ; begin
51084: LD_INT 0
51086: PPUSH
51087: PPUSH
51088: PPUSH
// result := [ ] ;
51089: LD_ADDR_VAR 0 2
51093: PUSH
51094: EMPTY
51095: ST_TO_ADDR
// if not array then
51096: LD_VAR 0 1
51100: NOT
51101: IFFALSE 51105
// exit ;
51103: GO 51204
// Randomize ;
51105: CALL_OW 10
// for i = array downto 1 do
51109: LD_ADDR_VAR 0 3
51113: PUSH
51114: DOUBLE
51115: LD_VAR 0 1
51119: INC
51120: ST_TO_ADDR
51121: LD_INT 1
51123: PUSH
51124: FOR_DOWNTO
51125: IFFALSE 51202
// begin index := rand ( 1 , array ) ;
51127: LD_ADDR_VAR 0 4
51131: PUSH
51132: LD_INT 1
51134: PPUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: CALL_OW 12
51144: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51145: LD_ADDR_VAR 0 2
51149: PUSH
51150: LD_VAR 0 2
51154: PPUSH
51155: LD_VAR 0 2
51159: PUSH
51160: LD_INT 1
51162: PLUS
51163: PPUSH
51164: LD_VAR 0 1
51168: PUSH
51169: LD_VAR 0 4
51173: ARRAY
51174: PPUSH
51175: CALL_OW 2
51179: ST_TO_ADDR
// array := Delete ( array , index ) ;
51180: LD_ADDR_VAR 0 1
51184: PUSH
51185: LD_VAR 0 1
51189: PPUSH
51190: LD_VAR 0 4
51194: PPUSH
51195: CALL_OW 3
51199: ST_TO_ADDR
// end ;
51200: GO 51124
51202: POP
51203: POP
// end ;
51204: LD_VAR 0 2
51208: RET
// export function GetBaseMaterials ( base ) ; begin
51209: LD_INT 0
51211: PPUSH
// result := [ 0 , 0 , 0 ] ;
51212: LD_ADDR_VAR 0 2
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: ST_TO_ADDR
// if not base then
51231: LD_VAR 0 1
51235: NOT
51236: IFFALSE 51240
// exit ;
51238: GO 51289
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51240: LD_ADDR_VAR 0 2
51244: PUSH
51245: LD_VAR 0 1
51249: PPUSH
51250: LD_INT 1
51252: PPUSH
51253: CALL_OW 275
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: LD_INT 2
51265: PPUSH
51266: CALL_OW 275
51270: PUSH
51271: LD_VAR 0 1
51275: PPUSH
51276: LD_INT 3
51278: PPUSH
51279: CALL_OW 275
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: ST_TO_ADDR
// end ;
51289: LD_VAR 0 2
51293: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51294: LD_INT 0
51296: PPUSH
51297: PPUSH
// result := array ;
51298: LD_ADDR_VAR 0 3
51302: PUSH
51303: LD_VAR 0 1
51307: ST_TO_ADDR
// if size >= result then
51308: LD_VAR 0 2
51312: PUSH
51313: LD_VAR 0 3
51317: GREATEREQUAL
51318: IFFALSE 51322
// exit ;
51320: GO 51372
// if size then
51322: LD_VAR 0 2
51326: IFFALSE 51372
// for i := array downto size do
51328: LD_ADDR_VAR 0 4
51332: PUSH
51333: DOUBLE
51334: LD_VAR 0 1
51338: INC
51339: ST_TO_ADDR
51340: LD_VAR 0 2
51344: PUSH
51345: FOR_DOWNTO
51346: IFFALSE 51370
// result := Delete ( result , result ) ;
51348: LD_ADDR_VAR 0 3
51352: PUSH
51353: LD_VAR 0 3
51357: PPUSH
51358: LD_VAR 0 3
51362: PPUSH
51363: CALL_OW 3
51367: ST_TO_ADDR
51368: GO 51345
51370: POP
51371: POP
// end ;
51372: LD_VAR 0 3
51376: RET
// export function ComExit ( unit ) ; var tmp ; begin
51377: LD_INT 0
51379: PPUSH
51380: PPUSH
// if not IsInUnit ( unit ) then
51381: LD_VAR 0 1
51385: PPUSH
51386: CALL_OW 310
51390: NOT
51391: IFFALSE 51395
// exit ;
51393: GO 51455
// tmp := IsInUnit ( unit ) ;
51395: LD_ADDR_VAR 0 3
51399: PUSH
51400: LD_VAR 0 1
51404: PPUSH
51405: CALL_OW 310
51409: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
51410: LD_VAR 0 3
51414: PPUSH
51415: CALL_OW 247
51419: PUSH
51420: LD_INT 2
51422: EQUAL
51423: IFFALSE 51436
// ComExitVehicle ( unit ) else
51425: LD_VAR 0 1
51429: PPUSH
51430: CALL_OW 121
51434: GO 51445
// ComExitBuilding ( unit ) ;
51436: LD_VAR 0 1
51440: PPUSH
51441: CALL_OW 122
// result := tmp ;
51445: LD_ADDR_VAR 0 2
51449: PUSH
51450: LD_VAR 0 3
51454: ST_TO_ADDR
// end ;
51455: LD_VAR 0 2
51459: RET
// export function ComExitAll ( units ) ; var i ; begin
51460: LD_INT 0
51462: PPUSH
51463: PPUSH
// if not units then
51464: LD_VAR 0 1
51468: NOT
51469: IFFALSE 51473
// exit ;
51471: GO 51499
// for i in units do
51473: LD_ADDR_VAR 0 3
51477: PUSH
51478: LD_VAR 0 1
51482: PUSH
51483: FOR_IN
51484: IFFALSE 51497
// ComExit ( i ) ;
51486: LD_VAR 0 3
51490: PPUSH
51491: CALL 51377 0 1
51495: GO 51483
51497: POP
51498: POP
// end ;
51499: LD_VAR 0 2
51503: RET
// export function ResetHc ; begin
51504: LD_INT 0
51506: PPUSH
// InitHc ;
51507: CALL_OW 19
// hc_importance := 0 ;
51511: LD_ADDR_OWVAR 32
51515: PUSH
51516: LD_INT 0
51518: ST_TO_ADDR
// end ;
51519: LD_VAR 0 1
51523: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
51524: LD_INT 0
51526: PPUSH
51527: PPUSH
51528: PPUSH
// _x := ( x1 + x2 ) div 2 ;
51529: LD_ADDR_VAR 0 6
51533: PUSH
51534: LD_VAR 0 1
51538: PUSH
51539: LD_VAR 0 3
51543: PLUS
51544: PUSH
51545: LD_INT 2
51547: DIV
51548: ST_TO_ADDR
// if _x < 0 then
51549: LD_VAR 0 6
51553: PUSH
51554: LD_INT 0
51556: LESS
51557: IFFALSE 51574
// _x := _x * - 1 ;
51559: LD_ADDR_VAR 0 6
51563: PUSH
51564: LD_VAR 0 6
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: MUL
51573: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
51574: LD_ADDR_VAR 0 7
51578: PUSH
51579: LD_VAR 0 2
51583: PUSH
51584: LD_VAR 0 4
51588: PLUS
51589: PUSH
51590: LD_INT 2
51592: DIV
51593: ST_TO_ADDR
// if _y < 0 then
51594: LD_VAR 0 7
51598: PUSH
51599: LD_INT 0
51601: LESS
51602: IFFALSE 51619
// _y := _y * - 1 ;
51604: LD_ADDR_VAR 0 7
51608: PUSH
51609: LD_VAR 0 7
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: MUL
51618: ST_TO_ADDR
// result := [ _x , _y ] ;
51619: LD_ADDR_VAR 0 5
51623: PUSH
51624: LD_VAR 0 6
51628: PUSH
51629: LD_VAR 0 7
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: ST_TO_ADDR
// end ;
51638: LD_VAR 0 5
51642: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
51643: LD_INT 0
51645: PPUSH
51646: PPUSH
51647: PPUSH
51648: PPUSH
// task := GetTaskList ( unit ) ;
51649: LD_ADDR_VAR 0 7
51653: PUSH
51654: LD_VAR 0 1
51658: PPUSH
51659: CALL_OW 437
51663: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
51664: LD_VAR 0 7
51668: NOT
51669: IFFALSE 51688
51671: PUSH
51672: LD_VAR 0 1
51676: PPUSH
51677: LD_VAR 0 2
51681: PPUSH
51682: CALL_OW 308
51686: NOT
51687: AND
51688: IFFALSE 51692
// exit ;
51690: GO 51810
// if IsInArea ( unit , area ) then
51692: LD_VAR 0 1
51696: PPUSH
51697: LD_VAR 0 2
51701: PPUSH
51702: CALL_OW 308
51706: IFFALSE 51724
// begin ComMoveToArea ( unit , goAway ) ;
51708: LD_VAR 0 1
51712: PPUSH
51713: LD_VAR 0 3
51717: PPUSH
51718: CALL_OW 113
// exit ;
51722: GO 51810
// end ; if task [ 1 ] [ 1 ] <> M then
51724: LD_VAR 0 7
51728: PUSH
51729: LD_INT 1
51731: ARRAY
51732: PUSH
51733: LD_INT 1
51735: ARRAY
51736: PUSH
51737: LD_STRING M
51739: NONEQUAL
51740: IFFALSE 51744
// exit ;
51742: GO 51810
// x := task [ 1 ] [ 2 ] ;
51744: LD_ADDR_VAR 0 5
51748: PUSH
51749: LD_VAR 0 7
51753: PUSH
51754: LD_INT 1
51756: ARRAY
51757: PUSH
51758: LD_INT 2
51760: ARRAY
51761: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
51762: LD_ADDR_VAR 0 6
51766: PUSH
51767: LD_VAR 0 7
51771: PUSH
51772: LD_INT 1
51774: ARRAY
51775: PUSH
51776: LD_INT 3
51778: ARRAY
51779: ST_TO_ADDR
// if InArea ( x , y , area ) then
51780: LD_VAR 0 5
51784: PPUSH
51785: LD_VAR 0 6
51789: PPUSH
51790: LD_VAR 0 2
51794: PPUSH
51795: CALL_OW 309
51799: IFFALSE 51810
// ComStop ( unit ) ;
51801: LD_VAR 0 1
51805: PPUSH
51806: CALL_OW 141
// end ;
51810: LD_VAR 0 4
51814: RET
// export function Abs ( value ) ; begin
51815: LD_INT 0
51817: PPUSH
// result := value ;
51818: LD_ADDR_VAR 0 2
51822: PUSH
51823: LD_VAR 0 1
51827: ST_TO_ADDR
// if value < 0 then
51828: LD_VAR 0 1
51832: PUSH
51833: LD_INT 0
51835: LESS
51836: IFFALSE 51853
// result := value * - 1 ;
51838: LD_ADDR_VAR 0 2
51842: PUSH
51843: LD_VAR 0 1
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: MUL
51852: ST_TO_ADDR
// end ;
51853: LD_VAR 0 2
51857: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
51858: LD_INT 0
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
// if not unit or not building then
51868: LD_VAR 0 1
51872: NOT
51873: IFTRUE 51882
51875: PUSH
51876: LD_VAR 0 2
51880: NOT
51881: OR
51882: IFFALSE 51886
// exit ;
51884: GO 52114
// x := GetX ( building ) ;
51886: LD_ADDR_VAR 0 4
51890: PUSH
51891: LD_VAR 0 2
51895: PPUSH
51896: CALL_OW 250
51900: ST_TO_ADDR
// y := GetY ( building ) ;
51901: LD_ADDR_VAR 0 6
51905: PUSH
51906: LD_VAR 0 2
51910: PPUSH
51911: CALL_OW 251
51915: ST_TO_ADDR
// d := GetDir ( building ) ;
51916: LD_ADDR_VAR 0 8
51920: PUSH
51921: LD_VAR 0 2
51925: PPUSH
51926: CALL_OW 254
51930: ST_TO_ADDR
// r := 4 ;
51931: LD_ADDR_VAR 0 9
51935: PUSH
51936: LD_INT 4
51938: ST_TO_ADDR
// for i := 1 to 5 do
51939: LD_ADDR_VAR 0 10
51943: PUSH
51944: DOUBLE
51945: LD_INT 1
51947: DEC
51948: ST_TO_ADDR
51949: LD_INT 5
51951: PUSH
51952: FOR_TO
51953: IFFALSE 52112
// begin _x := ShiftX ( x , d , r + i ) ;
51955: LD_ADDR_VAR 0 5
51959: PUSH
51960: LD_VAR 0 4
51964: PPUSH
51965: LD_VAR 0 8
51969: PPUSH
51970: LD_VAR 0 9
51974: PUSH
51975: LD_VAR 0 10
51979: PLUS
51980: PPUSH
51981: CALL_OW 272
51985: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51986: LD_ADDR_VAR 0 7
51990: PUSH
51991: LD_VAR 0 6
51995: PPUSH
51996: LD_VAR 0 8
52000: PPUSH
52001: LD_VAR 0 9
52005: PUSH
52006: LD_VAR 0 10
52010: PLUS
52011: PPUSH
52012: CALL_OW 273
52016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52017: LD_VAR 0 5
52021: PPUSH
52022: LD_VAR 0 7
52026: PPUSH
52027: CALL_OW 488
52031: IFFALSE 52066
52033: PUSH
52034: LD_VAR 0 5
52038: PPUSH
52039: LD_VAR 0 7
52043: PPUSH
52044: CALL_OW 428
52048: PPUSH
52049: CALL_OW 247
52053: PUSH
52054: LD_INT 3
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: IN
52064: NOT
52065: AND
52066: IFFALSE 52110
// begin ComMoveXY ( unit , _x , _y ) ;
52068: LD_VAR 0 1
52072: PPUSH
52073: LD_VAR 0 5
52077: PPUSH
52078: LD_VAR 0 7
52082: PPUSH
52083: CALL_OW 111
// result := [ _x , _y ] ;
52087: LD_ADDR_VAR 0 3
52091: PUSH
52092: LD_VAR 0 5
52096: PUSH
52097: LD_VAR 0 7
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: ST_TO_ADDR
// exit ;
52106: POP
52107: POP
52108: GO 52114
// end ; end ;
52110: GO 51952
52112: POP
52113: POP
// end ;
52114: LD_VAR 0 3
52118: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52119: LD_INT 0
52121: PPUSH
52122: PPUSH
52123: PPUSH
// result := 0 ;
52124: LD_ADDR_VAR 0 3
52128: PUSH
52129: LD_INT 0
52131: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52132: LD_VAR 0 1
52136: PUSH
52137: LD_INT 0
52139: LESS
52140: IFTRUE 52152
52142: PUSH
52143: LD_VAR 0 1
52147: PUSH
52148: LD_INT 8
52150: GREATER
52151: OR
52152: IFTRUE 52164
52154: PUSH
52155: LD_VAR 0 2
52159: PUSH
52160: LD_INT 0
52162: LESS
52163: OR
52164: IFTRUE 52176
52166: PUSH
52167: LD_VAR 0 2
52171: PUSH
52172: LD_INT 8
52174: GREATER
52175: OR
52176: IFFALSE 52180
// exit ;
52178: GO 52255
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52180: LD_ADDR_VAR 0 4
52184: PUSH
52185: LD_INT 22
52187: PUSH
52188: LD_VAR 0 2
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PPUSH
52197: CALL_OW 69
52201: PUSH
52202: FOR_IN
52203: IFFALSE 52253
// begin un := UnitShoot ( i ) ;
52205: LD_ADDR_VAR 0 5
52209: PUSH
52210: LD_VAR 0 4
52214: PPUSH
52215: CALL_OW 504
52219: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52220: LD_VAR 0 5
52224: PPUSH
52225: CALL_OW 255
52229: PUSH
52230: LD_VAR 0 1
52234: EQUAL
52235: IFFALSE 52251
// begin result := un ;
52237: LD_ADDR_VAR 0 3
52241: PUSH
52242: LD_VAR 0 5
52246: ST_TO_ADDR
// exit ;
52247: POP
52248: POP
52249: GO 52255
// end ; end ;
52251: GO 52202
52253: POP
52254: POP
// end ;
52255: LD_VAR 0 3
52259: RET
// export function GetCargoBay ( units ) ; begin
52260: LD_INT 0
52262: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
52263: LD_ADDR_VAR 0 2
52267: PUSH
52268: LD_VAR 0 1
52272: PPUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 34
52278: PUSH
52279: LD_INT 12
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 34
52288: PUSH
52289: LD_INT 51
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 34
52298: PUSH
52299: LD_INT 32
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 34
52308: PUSH
52309: LD_INT 89
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: PPUSH
52323: CALL_OW 72
52327: ST_TO_ADDR
// end ;
52328: LD_VAR 0 2
52332: RET
// export function Negate ( value ) ; begin
52333: LD_INT 0
52335: PPUSH
// result := not value ;
52336: LD_ADDR_VAR 0 2
52340: PUSH
52341: LD_VAR 0 1
52345: NOT
52346: ST_TO_ADDR
// end ;
52347: LD_VAR 0 2
52351: RET
// export function Inc ( value ) ; begin
52352: LD_INT 0
52354: PPUSH
// result := value + 1 ;
52355: LD_ADDR_VAR 0 2
52359: PUSH
52360: LD_VAR 0 1
52364: PUSH
52365: LD_INT 1
52367: PLUS
52368: ST_TO_ADDR
// end ;
52369: LD_VAR 0 2
52373: RET
// export function Dec ( value ) ; begin
52374: LD_INT 0
52376: PPUSH
// result := value - 1 ;
52377: LD_ADDR_VAR 0 2
52381: PUSH
52382: LD_VAR 0 1
52386: PUSH
52387: LD_INT 1
52389: MINUS
52390: ST_TO_ADDR
// end ;
52391: LD_VAR 0 2
52395: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
52396: LD_INT 0
52398: PPUSH
52399: PPUSH
52400: PPUSH
52401: PPUSH
52402: PPUSH
52403: PPUSH
52404: PPUSH
52405: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
52406: LD_VAR 0 1
52410: PPUSH
52411: LD_VAR 0 2
52415: PPUSH
52416: CALL_OW 488
52420: NOT
52421: IFTRUE 52440
52423: PUSH
52424: LD_VAR 0 3
52428: PPUSH
52429: LD_VAR 0 4
52433: PPUSH
52434: CALL_OW 488
52438: NOT
52439: OR
52440: IFFALSE 52453
// begin result := - 1 ;
52442: LD_ADDR_VAR 0 5
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: ST_TO_ADDR
// exit ;
52451: GO 52688
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
52453: LD_ADDR_VAR 0 12
52457: PUSH
52458: LD_VAR 0 1
52462: PPUSH
52463: LD_VAR 0 2
52467: PPUSH
52468: LD_VAR 0 3
52472: PPUSH
52473: LD_VAR 0 4
52477: PPUSH
52478: CALL 51524 0 4
52482: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
52483: LD_ADDR_VAR 0 11
52487: PUSH
52488: LD_VAR 0 1
52492: PPUSH
52493: LD_VAR 0 2
52497: PPUSH
52498: LD_VAR 0 12
52502: PUSH
52503: LD_INT 1
52505: ARRAY
52506: PPUSH
52507: LD_VAR 0 12
52511: PUSH
52512: LD_INT 2
52514: ARRAY
52515: PPUSH
52516: CALL_OW 298
52520: ST_TO_ADDR
// distance := 9999 ;
52521: LD_ADDR_VAR 0 10
52525: PUSH
52526: LD_INT 9999
52528: ST_TO_ADDR
// for i := 0 to 5 do
52529: LD_ADDR_VAR 0 6
52533: PUSH
52534: DOUBLE
52535: LD_INT 0
52537: DEC
52538: ST_TO_ADDR
52539: LD_INT 5
52541: PUSH
52542: FOR_TO
52543: IFFALSE 52686
// begin _x := ShiftX ( x1 , i , centerDist ) ;
52545: LD_ADDR_VAR 0 7
52549: PUSH
52550: LD_VAR 0 1
52554: PPUSH
52555: LD_VAR 0 6
52559: PPUSH
52560: LD_VAR 0 11
52564: PPUSH
52565: CALL_OW 272
52569: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
52570: LD_ADDR_VAR 0 8
52574: PUSH
52575: LD_VAR 0 2
52579: PPUSH
52580: LD_VAR 0 6
52584: PPUSH
52585: LD_VAR 0 11
52589: PPUSH
52590: CALL_OW 273
52594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52595: LD_VAR 0 7
52599: PPUSH
52600: LD_VAR 0 8
52604: PPUSH
52605: CALL_OW 488
52609: NOT
52610: IFFALSE 52614
// continue ;
52612: GO 52542
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
52614: LD_ADDR_VAR 0 9
52618: PUSH
52619: LD_VAR 0 12
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PPUSH
52628: LD_VAR 0 12
52632: PUSH
52633: LD_INT 2
52635: ARRAY
52636: PPUSH
52637: LD_VAR 0 7
52641: PPUSH
52642: LD_VAR 0 8
52646: PPUSH
52647: CALL_OW 298
52651: ST_TO_ADDR
// if tmp < distance then
52652: LD_VAR 0 9
52656: PUSH
52657: LD_VAR 0 10
52661: LESS
52662: IFFALSE 52684
// begin result := i ;
52664: LD_ADDR_VAR 0 5
52668: PUSH
52669: LD_VAR 0 6
52673: ST_TO_ADDR
// distance := tmp ;
52674: LD_ADDR_VAR 0 10
52678: PUSH
52679: LD_VAR 0 9
52683: ST_TO_ADDR
// end ; end ;
52684: GO 52542
52686: POP
52687: POP
// end ;
52688: LD_VAR 0 5
52692: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52693: LD_INT 0
52695: PPUSH
52696: PPUSH
// if not driver or not IsInUnit ( driver ) then
52697: LD_VAR 0 1
52701: NOT
52702: IFTRUE 52716
52704: PUSH
52705: LD_VAR 0 1
52709: PPUSH
52710: CALL_OW 310
52714: NOT
52715: OR
52716: IFFALSE 52720
// exit ;
52718: GO 52810
// vehicle := IsInUnit ( driver ) ;
52720: LD_ADDR_VAR 0 3
52724: PUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 310
52734: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52735: LD_VAR 0 1
52739: PPUSH
52740: LD_STRING \
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: PUSH
52770: LD_STRING E
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_VAR 0 3
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PPUSH
52806: CALL_OW 446
// end ;
52810: LD_VAR 0 2
52814: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
52815: LD_INT 0
52817: PPUSH
52818: PPUSH
// if not driver or not IsInUnit ( driver ) then
52819: LD_VAR 0 1
52823: NOT
52824: IFTRUE 52838
52826: PUSH
52827: LD_VAR 0 1
52831: PPUSH
52832: CALL_OW 310
52836: NOT
52837: OR
52838: IFFALSE 52842
// exit ;
52840: GO 52932
// vehicle := IsInUnit ( driver ) ;
52842: LD_ADDR_VAR 0 3
52846: PUSH
52847: LD_VAR 0 1
52851: PPUSH
52852: CALL_OW 310
52856: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
52857: LD_VAR 0 1
52861: PPUSH
52862: LD_STRING \
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: PUSH
52892: LD_STRING E
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: LD_VAR 0 3
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PPUSH
52928: CALL_OW 447
// end ;
52932: LD_VAR 0 2
52936: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
52937: LD_INT 0
52939: PPUSH
52940: PPUSH
52941: PPUSH
// tmp := [ ] ;
52942: LD_ADDR_VAR 0 5
52946: PUSH
52947: EMPTY
52948: ST_TO_ADDR
// for i in units do
52949: LD_ADDR_VAR 0 4
52953: PUSH
52954: LD_VAR 0 1
52958: PUSH
52959: FOR_IN
52960: IFFALSE 52998
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52962: LD_ADDR_VAR 0 5
52966: PUSH
52967: LD_VAR 0 5
52971: PPUSH
52972: LD_VAR 0 5
52976: PUSH
52977: LD_INT 1
52979: PLUS
52980: PPUSH
52981: LD_VAR 0 4
52985: PPUSH
52986: CALL_OW 256
52990: PPUSH
52991: CALL_OW 2
52995: ST_TO_ADDR
52996: GO 52959
52998: POP
52999: POP
// if not tmp then
53000: LD_VAR 0 5
53004: NOT
53005: IFFALSE 53009
// exit ;
53007: GO 53057
// if asc then
53009: LD_VAR 0 2
53013: IFFALSE 53037
// result := SortListByListAsc ( units , tmp ) else
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_VAR 0 1
53024: PPUSH
53025: LD_VAR 0 5
53029: PPUSH
53030: CALL_OW 76
53034: ST_TO_ADDR
53035: GO 53057
// result := SortListByListDesc ( units , tmp ) ;
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_VAR 0 1
53046: PPUSH
53047: LD_VAR 0 5
53051: PPUSH
53052: CALL_OW 77
53056: ST_TO_ADDR
// end ;
53057: LD_VAR 0 3
53061: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53062: LD_INT 0
53064: PPUSH
53065: PPUSH
// task := GetTaskList ( mech ) ;
53066: LD_ADDR_VAR 0 4
53070: PUSH
53071: LD_VAR 0 1
53075: PPUSH
53076: CALL_OW 437
53080: ST_TO_ADDR
// if not task then
53081: LD_VAR 0 4
53085: NOT
53086: IFFALSE 53090
// exit ;
53088: GO 53134
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53090: LD_ADDR_VAR 0 3
53094: PUSH
53095: LD_VAR 0 4
53099: PUSH
53100: LD_INT 1
53102: ARRAY
53103: PUSH
53104: LD_INT 1
53106: ARRAY
53107: PUSH
53108: LD_STRING r
53110: EQUAL
53111: IFFALSE 53133
53113: PUSH
53114: LD_VAR 0 4
53118: PUSH
53119: LD_INT 1
53121: ARRAY
53122: PUSH
53123: LD_INT 4
53125: ARRAY
53126: PUSH
53127: LD_VAR 0 2
53131: EQUAL
53132: AND
53133: ST_TO_ADDR
// end ;
53134: LD_VAR 0 3
53138: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53139: LD_INT 0
53141: PPUSH
// SetDir ( unit , d ) ;
53142: LD_VAR 0 1
53146: PPUSH
53147: LD_VAR 0 4
53151: PPUSH
53152: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
53156: LD_ADDR_VAR 0 6
53160: PUSH
53161: LD_VAR 0 1
53165: PPUSH
53166: LD_VAR 0 2
53170: PPUSH
53171: LD_VAR 0 3
53175: PPUSH
53176: LD_VAR 0 5
53180: PPUSH
53181: CALL_OW 48
53185: ST_TO_ADDR
// end ;
53186: LD_VAR 0 6
53190: RET
// export function ToNaturalNumber ( number ) ; begin
53191: LD_INT 0
53193: PPUSH
// result := number div 1 ;
53194: LD_ADDR_VAR 0 2
53198: PUSH
53199: LD_VAR 0 1
53203: PUSH
53204: LD_INT 1
53206: DIV
53207: ST_TO_ADDR
// if number < 0 then
53208: LD_VAR 0 1
53212: PUSH
53213: LD_INT 0
53215: LESS
53216: IFFALSE 53226
// result := 0 ;
53218: LD_ADDR_VAR 0 2
53222: PUSH
53223: LD_INT 0
53225: ST_TO_ADDR
// end ;
53226: LD_VAR 0 2
53230: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
53231: LD_INT 0
53233: PPUSH
53234: PPUSH
53235: PPUSH
// if not buildings then
53236: LD_VAR 0 1
53240: NOT
53241: IFFALSE 53245
// exit ;
53243: GO 53360
// tmp := [ ] ;
53245: LD_ADDR_VAR 0 5
53249: PUSH
53250: EMPTY
53251: ST_TO_ADDR
// for b in buildings do
53252: LD_ADDR_VAR 0 4
53256: PUSH
53257: LD_VAR 0 1
53261: PUSH
53262: FOR_IN
53263: IFFALSE 53301
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
53265: LD_ADDR_VAR 0 5
53269: PUSH
53270: LD_VAR 0 5
53274: PPUSH
53275: LD_VAR 0 5
53279: PUSH
53280: LD_INT 1
53282: PLUS
53283: PPUSH
53284: LD_VAR 0 4
53288: PPUSH
53289: CALL_OW 266
53293: PPUSH
53294: CALL_OW 1
53298: ST_TO_ADDR
53299: GO 53262
53301: POP
53302: POP
// if not tmp then
53303: LD_VAR 0 5
53307: NOT
53308: IFFALSE 53312
// exit ;
53310: GO 53360
// if asc then
53312: LD_VAR 0 2
53316: IFFALSE 53340
// result := SortListByListAsc ( buildings , tmp ) else
53318: LD_ADDR_VAR 0 3
53322: PUSH
53323: LD_VAR 0 1
53327: PPUSH
53328: LD_VAR 0 5
53332: PPUSH
53333: CALL_OW 76
53337: ST_TO_ADDR
53338: GO 53360
// result := SortListByListDesc ( buildings , tmp ) ;
53340: LD_ADDR_VAR 0 3
53344: PUSH
53345: LD_VAR 0 1
53349: PPUSH
53350: LD_VAR 0 5
53354: PPUSH
53355: CALL_OW 77
53359: ST_TO_ADDR
// end ;
53360: LD_VAR 0 3
53364: RET
// export function SortByClass ( units , class ) ; var un ; begin
53365: LD_INT 0
53367: PPUSH
53368: PPUSH
// if not units or not class then
53369: LD_VAR 0 1
53373: NOT
53374: IFTRUE 53383
53376: PUSH
53377: LD_VAR 0 2
53381: NOT
53382: OR
53383: IFFALSE 53387
// exit ;
53385: GO 53482
// result := [ ] ;
53387: LD_ADDR_VAR 0 3
53391: PUSH
53392: EMPTY
53393: ST_TO_ADDR
// for un in units do
53394: LD_ADDR_VAR 0 4
53398: PUSH
53399: LD_VAR 0 1
53403: PUSH
53404: FOR_IN
53405: IFFALSE 53480
// if GetClass ( un ) = class then
53407: LD_VAR 0 4
53411: PPUSH
53412: CALL_OW 257
53416: PUSH
53417: LD_VAR 0 2
53421: EQUAL
53422: IFFALSE 53449
// result := Insert ( result , 1 , un ) else
53424: LD_ADDR_VAR 0 3
53428: PUSH
53429: LD_VAR 0 3
53433: PPUSH
53434: LD_INT 1
53436: PPUSH
53437: LD_VAR 0 4
53441: PPUSH
53442: CALL_OW 2
53446: ST_TO_ADDR
53447: GO 53478
// result := Replace ( result , result + 1 , un ) ;
53449: LD_ADDR_VAR 0 3
53453: PUSH
53454: LD_VAR 0 3
53458: PPUSH
53459: LD_VAR 0 3
53463: PUSH
53464: LD_INT 1
53466: PLUS
53467: PPUSH
53468: LD_VAR 0 4
53472: PPUSH
53473: CALL_OW 1
53477: ST_TO_ADDR
53478: GO 53404
53480: POP
53481: POP
// end ;
53482: LD_VAR 0 3
53486: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53487: LD_INT 0
53489: PPUSH
53490: PPUSH
53491: PPUSH
53492: PPUSH
53493: PPUSH
53494: PPUSH
53495: PPUSH
// result := [ ] ;
53496: LD_ADDR_VAR 0 4
53500: PUSH
53501: EMPTY
53502: ST_TO_ADDR
// if x - r < 0 then
53503: LD_VAR 0 1
53507: PUSH
53508: LD_VAR 0 3
53512: MINUS
53513: PUSH
53514: LD_INT 0
53516: LESS
53517: IFFALSE 53529
// min_x := 0 else
53519: LD_ADDR_VAR 0 8
53523: PUSH
53524: LD_INT 0
53526: ST_TO_ADDR
53527: GO 53545
// min_x := x - r ;
53529: LD_ADDR_VAR 0 8
53533: PUSH
53534: LD_VAR 0 1
53538: PUSH
53539: LD_VAR 0 3
53543: MINUS
53544: ST_TO_ADDR
// if y - r < 0 then
53545: LD_VAR 0 2
53549: PUSH
53550: LD_VAR 0 3
53554: MINUS
53555: PUSH
53556: LD_INT 0
53558: LESS
53559: IFFALSE 53571
// min_y := 0 else
53561: LD_ADDR_VAR 0 7
53565: PUSH
53566: LD_INT 0
53568: ST_TO_ADDR
53569: GO 53587
// min_y := y - r ;
53571: LD_ADDR_VAR 0 7
53575: PUSH
53576: LD_VAR 0 2
53580: PUSH
53581: LD_VAR 0 3
53585: MINUS
53586: ST_TO_ADDR
// max_x := x + r ;
53587: LD_ADDR_VAR 0 9
53591: PUSH
53592: LD_VAR 0 1
53596: PUSH
53597: LD_VAR 0 3
53601: PLUS
53602: ST_TO_ADDR
// max_y := y + r ;
53603: LD_ADDR_VAR 0 10
53607: PUSH
53608: LD_VAR 0 2
53612: PUSH
53613: LD_VAR 0 3
53617: PLUS
53618: ST_TO_ADDR
// for _x = min_x to max_x do
53619: LD_ADDR_VAR 0 5
53623: PUSH
53624: DOUBLE
53625: LD_VAR 0 8
53629: DEC
53630: ST_TO_ADDR
53631: LD_VAR 0 9
53635: PUSH
53636: FOR_TO
53637: IFFALSE 53738
// for _y = min_y to max_y do
53639: LD_ADDR_VAR 0 6
53643: PUSH
53644: DOUBLE
53645: LD_VAR 0 7
53649: DEC
53650: ST_TO_ADDR
53651: LD_VAR 0 10
53655: PUSH
53656: FOR_TO
53657: IFFALSE 53734
// begin if not ValidHex ( _x , _y ) then
53659: LD_VAR 0 5
53663: PPUSH
53664: LD_VAR 0 6
53668: PPUSH
53669: CALL_OW 488
53673: NOT
53674: IFFALSE 53678
// continue ;
53676: GO 53656
// if GetResourceTypeXY ( _x , _y ) then
53678: LD_VAR 0 5
53682: PPUSH
53683: LD_VAR 0 6
53687: PPUSH
53688: CALL_OW 283
53692: IFFALSE 53732
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
53694: LD_ADDR_VAR 0 4
53698: PUSH
53699: LD_VAR 0 4
53703: PPUSH
53704: LD_VAR 0 4
53708: PUSH
53709: LD_INT 1
53711: PLUS
53712: PPUSH
53713: LD_VAR 0 5
53717: PUSH
53718: LD_VAR 0 6
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PPUSH
53727: CALL_OW 1
53731: ST_TO_ADDR
// end ;
53732: GO 53656
53734: POP
53735: POP
53736: GO 53636
53738: POP
53739: POP
// end ;
53740: LD_VAR 0 4
53744: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
53745: LD_INT 0
53747: PPUSH
53748: PPUSH
53749: PPUSH
53750: PPUSH
53751: PPUSH
53752: PPUSH
53753: PPUSH
53754: PPUSH
// if not units then
53755: LD_VAR 0 1
53759: NOT
53760: IFFALSE 53764
// exit ;
53762: GO 54296
// result := UnitFilter ( units , [ f_ok ] ) ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_VAR 0 1
53773: PPUSH
53774: LD_INT 50
53776: PUSH
53777: EMPTY
53778: LIST
53779: PPUSH
53780: CALL_OW 72
53784: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
53785: LD_ADDR_VAR 0 8
53789: PUSH
53790: LD_VAR 0 1
53794: PUSH
53795: LD_INT 1
53797: ARRAY
53798: PPUSH
53799: CALL_OW 255
53803: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
53804: LD_ADDR_VAR 0 10
53808: PUSH
53809: LD_INT 29
53811: PUSH
53812: LD_INT 91
53814: PUSH
53815: LD_INT 49
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// if not result then
53823: LD_VAR 0 3
53827: NOT
53828: IFFALSE 53832
// exit ;
53830: GO 54296
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
53832: LD_ADDR_VAR 0 5
53836: PUSH
53837: LD_INT 81
53839: PUSH
53840: LD_VAR 0 8
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PPUSH
53849: CALL_OW 69
53853: ST_TO_ADDR
// for i in result do
53854: LD_ADDR_VAR 0 4
53858: PUSH
53859: LD_VAR 0 3
53863: PUSH
53864: FOR_IN
53865: IFFALSE 54294
// begin tag := GetTag ( i ) + 1 ;
53867: LD_ADDR_VAR 0 9
53871: PUSH
53872: LD_VAR 0 4
53876: PPUSH
53877: CALL_OW 110
53881: PUSH
53882: LD_INT 1
53884: PLUS
53885: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
53886: LD_ADDR_VAR 0 7
53890: PUSH
53891: LD_VAR 0 4
53895: PPUSH
53896: CALL_OW 250
53900: PPUSH
53901: LD_VAR 0 4
53905: PPUSH
53906: CALL_OW 251
53910: PPUSH
53911: LD_INT 4
53913: PPUSH
53914: CALL 53487 0 3
53918: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
53919: LD_VAR 0 4
53923: PPUSH
53924: CALL_OW 247
53928: PUSH
53929: LD_INT 2
53931: EQUAL
53932: IFFALSE 53944
53934: PUSH
53935: LD_VAR 0 7
53939: PUSH
53940: LD_INT 2
53942: GREATER
53943: AND
53944: IFFALSE 53964
53946: PUSH
53947: LD_VAR 0 4
53951: PPUSH
53952: CALL_OW 264
53956: PUSH
53957: LD_VAR 0 10
53961: IN
53962: NOT
53963: AND
53964: IFFALSE 54003
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
53966: LD_VAR 0 4
53970: PPUSH
53971: LD_VAR 0 7
53975: PUSH
53976: LD_INT 1
53978: ARRAY
53979: PUSH
53980: LD_INT 1
53982: ARRAY
53983: PPUSH
53984: LD_VAR 0 7
53988: PUSH
53989: LD_INT 1
53991: ARRAY
53992: PUSH
53993: LD_INT 2
53995: ARRAY
53996: PPUSH
53997: CALL_OW 116
54001: GO 54292
// if path > tag then
54003: LD_VAR 0 2
54007: PUSH
54008: LD_VAR 0 9
54012: GREATER
54013: IFFALSE 54221
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54015: LD_ADDR_VAR 0 6
54019: PUSH
54020: LD_VAR 0 5
54024: PPUSH
54025: LD_INT 91
54027: PUSH
54028: LD_VAR 0 4
54032: PUSH
54033: LD_INT 8
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: PPUSH
54041: CALL_OW 72
54045: ST_TO_ADDR
// if nearEnemy then
54046: LD_VAR 0 6
54050: IFFALSE 54119
// begin if GetWeapon ( i ) = ru_time_lapser then
54052: LD_VAR 0 4
54056: PPUSH
54057: CALL_OW 264
54061: PUSH
54062: LD_INT 49
54064: EQUAL
54065: IFFALSE 54093
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54067: LD_VAR 0 4
54071: PPUSH
54072: LD_VAR 0 6
54076: PPUSH
54077: LD_VAR 0 4
54081: PPUSH
54082: CALL_OW 74
54086: PPUSH
54087: CALL_OW 112
54091: GO 54117
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54093: LD_VAR 0 4
54097: PPUSH
54098: LD_VAR 0 6
54102: PPUSH
54103: LD_VAR 0 4
54107: PPUSH
54108: CALL_OW 74
54112: PPUSH
54113: CALL 55377 0 2
// end else
54117: GO 54219
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54119: LD_VAR 0 4
54123: PPUSH
54124: LD_VAR 0 2
54128: PUSH
54129: LD_VAR 0 9
54133: ARRAY
54134: PUSH
54135: LD_INT 1
54137: ARRAY
54138: PPUSH
54139: LD_VAR 0 2
54143: PUSH
54144: LD_VAR 0 9
54148: ARRAY
54149: PUSH
54150: LD_INT 2
54152: ARRAY
54153: PPUSH
54154: CALL_OW 297
54158: PUSH
54159: LD_INT 6
54161: GREATER
54162: IFFALSE 54205
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54164: LD_VAR 0 4
54168: PPUSH
54169: LD_VAR 0 2
54173: PUSH
54174: LD_VAR 0 9
54178: ARRAY
54179: PUSH
54180: LD_INT 1
54182: ARRAY
54183: PPUSH
54184: LD_VAR 0 2
54188: PUSH
54189: LD_VAR 0 9
54193: ARRAY
54194: PUSH
54195: LD_INT 2
54197: ARRAY
54198: PPUSH
54199: CALL_OW 114
54203: GO 54219
// SetTag ( i , tag ) ;
54205: LD_VAR 0 4
54209: PPUSH
54210: LD_VAR 0 9
54214: PPUSH
54215: CALL_OW 109
// end else
54219: GO 54292
// if enemy then
54221: LD_VAR 0 5
54225: IFFALSE 54292
// begin if GetWeapon ( i ) = ru_time_lapser then
54227: LD_VAR 0 4
54231: PPUSH
54232: CALL_OW 264
54236: PUSH
54237: LD_INT 49
54239: EQUAL
54240: IFFALSE 54268
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54242: LD_VAR 0 4
54246: PPUSH
54247: LD_VAR 0 5
54251: PPUSH
54252: LD_VAR 0 4
54256: PPUSH
54257: CALL_OW 74
54261: PPUSH
54262: CALL_OW 112
54266: GO 54292
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54268: LD_VAR 0 4
54272: PPUSH
54273: LD_VAR 0 5
54277: PPUSH
54278: LD_VAR 0 4
54282: PPUSH
54283: CALL_OW 74
54287: PPUSH
54288: CALL 55377 0 2
// end ; end ;
54292: GO 53864
54294: POP
54295: POP
// end ;
54296: LD_VAR 0 3
54300: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54301: LD_INT 0
54303: PPUSH
54304: PPUSH
54305: PPUSH
// if not unit or IsInUnit ( unit ) then
54306: LD_VAR 0 1
54310: NOT
54311: IFTRUE 54324
54313: PUSH
54314: LD_VAR 0 1
54318: PPUSH
54319: CALL_OW 310
54323: OR
54324: IFFALSE 54328
// exit ;
54326: GO 54419
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54328: LD_ADDR_VAR 0 4
54332: PUSH
54333: LD_VAR 0 1
54337: PPUSH
54338: CALL_OW 250
54342: PPUSH
54343: LD_VAR 0 2
54347: PPUSH
54348: LD_INT 1
54350: PPUSH
54351: CALL_OW 272
54355: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54356: LD_ADDR_VAR 0 5
54360: PUSH
54361: LD_VAR 0 1
54365: PPUSH
54366: CALL_OW 251
54370: PPUSH
54371: LD_VAR 0 2
54375: PPUSH
54376: LD_INT 1
54378: PPUSH
54379: CALL_OW 273
54383: ST_TO_ADDR
// if ValidHex ( x , y ) then
54384: LD_VAR 0 4
54388: PPUSH
54389: LD_VAR 0 5
54393: PPUSH
54394: CALL_OW 488
54398: IFFALSE 54419
// ComTurnXY ( unit , x , y ) ;
54400: LD_VAR 0 1
54404: PPUSH
54405: LD_VAR 0 4
54409: PPUSH
54410: LD_VAR 0 5
54414: PPUSH
54415: CALL_OW 118
// end ;
54419: LD_VAR 0 3
54423: RET
// export function SeeUnits ( side , units ) ; var i ; begin
54424: LD_INT 0
54426: PPUSH
54427: PPUSH
// result := false ;
54428: LD_ADDR_VAR 0 3
54432: PUSH
54433: LD_INT 0
54435: ST_TO_ADDR
// if not units then
54436: LD_VAR 0 2
54440: NOT
54441: IFFALSE 54445
// exit ;
54443: GO 54490
// for i in units do
54445: LD_ADDR_VAR 0 4
54449: PUSH
54450: LD_VAR 0 2
54454: PUSH
54455: FOR_IN
54456: IFFALSE 54488
// if See ( side , i ) then
54458: LD_VAR 0 1
54462: PPUSH
54463: LD_VAR 0 4
54467: PPUSH
54468: CALL_OW 292
54472: IFFALSE 54486
// begin result := true ;
54474: LD_ADDR_VAR 0 3
54478: PUSH
54479: LD_INT 1
54481: ST_TO_ADDR
// exit ;
54482: POP
54483: POP
54484: GO 54490
// end ;
54486: GO 54455
54488: POP
54489: POP
// end ;
54490: LD_VAR 0 3
54494: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
54495: LD_INT 0
54497: PPUSH
54498: PPUSH
54499: PPUSH
54500: PPUSH
// if not unit or not points then
54501: LD_VAR 0 1
54505: NOT
54506: IFTRUE 54515
54508: PUSH
54509: LD_VAR 0 2
54513: NOT
54514: OR
54515: IFFALSE 54519
// exit ;
54517: GO 54609
// dist := 99999 ;
54519: LD_ADDR_VAR 0 5
54523: PUSH
54524: LD_INT 99999
54526: ST_TO_ADDR
// for i in points do
54527: LD_ADDR_VAR 0 4
54531: PUSH
54532: LD_VAR 0 2
54536: PUSH
54537: FOR_IN
54538: IFFALSE 54607
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
54540: LD_ADDR_VAR 0 6
54544: PUSH
54545: LD_VAR 0 1
54549: PPUSH
54550: LD_VAR 0 4
54554: PUSH
54555: LD_INT 1
54557: ARRAY
54558: PPUSH
54559: LD_VAR 0 4
54563: PUSH
54564: LD_INT 2
54566: ARRAY
54567: PPUSH
54568: CALL_OW 297
54572: ST_TO_ADDR
// if tmpDist < dist then
54573: LD_VAR 0 6
54577: PUSH
54578: LD_VAR 0 5
54582: LESS
54583: IFFALSE 54605
// begin result := i ;
54585: LD_ADDR_VAR 0 3
54589: PUSH
54590: LD_VAR 0 4
54594: ST_TO_ADDR
// dist := tmpDist ;
54595: LD_ADDR_VAR 0 5
54599: PUSH
54600: LD_VAR 0 6
54604: ST_TO_ADDR
// end ; end ;
54605: GO 54537
54607: POP
54608: POP
// end ;
54609: LD_VAR 0 3
54613: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
54614: LD_INT 0
54616: PPUSH
// uc_side := side ;
54617: LD_ADDR_OWVAR 20
54621: PUSH
54622: LD_VAR 0 1
54626: ST_TO_ADDR
// uc_nation := 3 ;
54627: LD_ADDR_OWVAR 21
54631: PUSH
54632: LD_INT 3
54634: ST_TO_ADDR
// vc_chassis := 25 ;
54635: LD_ADDR_OWVAR 37
54639: PUSH
54640: LD_INT 25
54642: ST_TO_ADDR
// vc_engine := engine_siberite ;
54643: LD_ADDR_OWVAR 39
54647: PUSH
54648: LD_INT 3
54650: ST_TO_ADDR
// vc_control := control_computer ;
54651: LD_ADDR_OWVAR 38
54655: PUSH
54656: LD_INT 3
54658: ST_TO_ADDR
// vc_weapon := 59 ;
54659: LD_ADDR_OWVAR 40
54663: PUSH
54664: LD_INT 59
54666: ST_TO_ADDR
// result := CreateVehicle ;
54667: LD_ADDR_VAR 0 5
54671: PUSH
54672: CALL_OW 45
54676: ST_TO_ADDR
// SetDir ( result , d ) ;
54677: LD_VAR 0 5
54681: PPUSH
54682: LD_VAR 0 4
54686: PPUSH
54687: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
54691: LD_VAR 0 5
54695: PPUSH
54696: LD_VAR 0 2
54700: PPUSH
54701: LD_VAR 0 3
54705: PPUSH
54706: LD_INT 0
54708: PPUSH
54709: CALL_OW 48
// end ;
54713: LD_VAR 0 5
54717: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
54718: LD_INT 0
54720: PPUSH
54721: PPUSH
54722: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
54723: LD_ADDR_VAR 0 2
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
54746: LD_VAR 0 1
54750: NOT
54751: IFTRUE 54784
54753: PUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: CALL_OW 264
54763: PUSH
54764: LD_INT 12
54766: PUSH
54767: LD_INT 51
54769: PUSH
54770: LD_INT 32
54772: PUSH
54773: LD_INT 89
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: IN
54782: NOT
54783: OR
54784: IFFALSE 54788
// exit ;
54786: GO 54886
// for i := 1 to 3 do
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: DOUBLE
54794: LD_INT 1
54796: DEC
54797: ST_TO_ADDR
54798: LD_INT 3
54800: PUSH
54801: FOR_TO
54802: IFFALSE 54884
// begin tmp := GetCargo ( cargo , i ) ;
54804: LD_ADDR_VAR 0 4
54808: PUSH
54809: LD_VAR 0 1
54813: PPUSH
54814: LD_VAR 0 3
54818: PPUSH
54819: CALL_OW 289
54823: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
54824: LD_ADDR_VAR 0 2
54828: PUSH
54829: LD_VAR 0 2
54833: PPUSH
54834: LD_VAR 0 3
54838: PPUSH
54839: LD_VAR 0 4
54843: PPUSH
54844: CALL_OW 1
54848: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
54849: LD_ADDR_VAR 0 2
54853: PUSH
54854: LD_VAR 0 2
54858: PPUSH
54859: LD_INT 4
54861: PPUSH
54862: LD_VAR 0 2
54866: PUSH
54867: LD_INT 4
54869: ARRAY
54870: PUSH
54871: LD_VAR 0 4
54875: PLUS
54876: PPUSH
54877: CALL_OW 1
54881: ST_TO_ADDR
// end ;
54882: GO 54801
54884: POP
54885: POP
// end ;
54886: LD_VAR 0 2
54890: RET
// export function Length ( array ) ; begin
54891: LD_INT 0
54893: PPUSH
// result := array + 0 ;
54894: LD_ADDR_VAR 0 2
54898: PUSH
54899: LD_VAR 0 1
54903: PUSH
54904: LD_INT 0
54906: PLUS
54907: ST_TO_ADDR
// end ;
54908: LD_VAR 0 2
54912: RET
// export function PrepareArray ( array ) ; begin
54913: LD_INT 0
54915: PPUSH
// result := array diff 0 ;
54916: LD_ADDR_VAR 0 2
54920: PUSH
54921: LD_VAR 0 1
54925: PUSH
54926: LD_INT 0
54928: DIFF
54929: ST_TO_ADDR
// if not result [ 1 ] then
54930: LD_VAR 0 2
54934: PUSH
54935: LD_INT 1
54937: ARRAY
54938: NOT
54939: IFFALSE 54959
// result := Delete ( result , 1 ) ;
54941: LD_ADDR_VAR 0 2
54945: PUSH
54946: LD_VAR 0 2
54950: PPUSH
54951: LD_INT 1
54953: PPUSH
54954: CALL_OW 3
54958: ST_TO_ADDR
// end ;
54959: LD_VAR 0 2
54963: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
54964: LD_INT 0
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
// sibRocketRange := 25 ;
54970: LD_ADDR_VAR 0 6
54974: PUSH
54975: LD_INT 25
54977: ST_TO_ADDR
// result := false ;
54978: LD_ADDR_VAR 0 4
54982: PUSH
54983: LD_INT 0
54985: ST_TO_ADDR
// for i := 0 to 5 do
54986: LD_ADDR_VAR 0 5
54990: PUSH
54991: DOUBLE
54992: LD_INT 0
54994: DEC
54995: ST_TO_ADDR
54996: LD_INT 5
54998: PUSH
54999: FOR_TO
55000: IFFALSE 55067
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
55002: LD_VAR 0 1
55006: PPUSH
55007: LD_VAR 0 5
55011: PPUSH
55012: LD_VAR 0 6
55016: PPUSH
55017: CALL_OW 272
55021: PPUSH
55022: LD_VAR 0 2
55026: PPUSH
55027: LD_VAR 0 5
55031: PPUSH
55032: LD_VAR 0 6
55036: PPUSH
55037: CALL_OW 273
55041: PPUSH
55042: LD_VAR 0 3
55046: PPUSH
55047: CALL_OW 309
55051: IFFALSE 55065
// begin result := true ;
55053: LD_ADDR_VAR 0 4
55057: PUSH
55058: LD_INT 1
55060: ST_TO_ADDR
// exit ;
55061: POP
55062: POP
55063: GO 55069
// end ;
55065: GO 54999
55067: POP
55068: POP
// end ;
55069: LD_VAR 0 4
55073: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
55074: LD_INT 0
55076: PPUSH
55077: PPUSH
55078: PPUSH
// if btype = b_depot then
55079: LD_VAR 0 2
55083: PUSH
55084: LD_INT 0
55086: EQUAL
55087: IFFALSE 55099
// begin result := true ;
55089: LD_ADDR_VAR 0 3
55093: PUSH
55094: LD_INT 1
55096: ST_TO_ADDR
// exit ;
55097: GO 55219
// end ; pom := GetBase ( depot ) ;
55099: LD_ADDR_VAR 0 4
55103: PUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: CALL_OW 274
55113: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55114: LD_ADDR_VAR 0 5
55118: PUSH
55119: LD_VAR 0 2
55123: PPUSH
55124: LD_VAR 0 1
55128: PPUSH
55129: CALL_OW 248
55133: PPUSH
55134: CALL_OW 450
55138: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
55139: LD_ADDR_VAR 0 3
55143: PUSH
55144: LD_VAR 0 4
55148: PPUSH
55149: LD_INT 1
55151: PPUSH
55152: CALL_OW 275
55156: PUSH
55157: LD_VAR 0 5
55161: PUSH
55162: LD_INT 1
55164: ARRAY
55165: GREATEREQUAL
55166: IFFALSE 55192
55168: PUSH
55169: LD_VAR 0 4
55173: PPUSH
55174: LD_INT 2
55176: PPUSH
55177: CALL_OW 275
55181: PUSH
55182: LD_VAR 0 5
55186: PUSH
55187: LD_INT 2
55189: ARRAY
55190: GREATEREQUAL
55191: AND
55192: IFFALSE 55218
55194: PUSH
55195: LD_VAR 0 4
55199: PPUSH
55200: LD_INT 3
55202: PPUSH
55203: CALL_OW 275
55207: PUSH
55208: LD_VAR 0 5
55212: PUSH
55213: LD_INT 3
55215: ARRAY
55216: GREATEREQUAL
55217: AND
55218: ST_TO_ADDR
// end ;
55219: LD_VAR 0 3
55223: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
55224: LD_INT 0
55226: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
55227: LD_VAR 0 1
55231: PPUSH
55232: LD_VAR 0 2
55236: PPUSH
55237: LD_INT 0
55239: PPUSH
55240: LD_INT 0
55242: PPUSH
55243: LD_INT 1
55245: PPUSH
55246: LD_INT 0
55248: PPUSH
55249: CALL_OW 587
// end ;
55253: LD_VAR 0 3
55257: RET
// export function CenterOnNow ( unit ) ; begin
55258: LD_INT 0
55260: PPUSH
// result := IsInUnit ( unit ) ;
55261: LD_ADDR_VAR 0 2
55265: PUSH
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 310
55275: ST_TO_ADDR
// if not result then
55276: LD_VAR 0 2
55280: NOT
55281: IFFALSE 55293
// result := unit ;
55283: LD_ADDR_VAR 0 2
55287: PUSH
55288: LD_VAR 0 1
55292: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
55293: LD_VAR 0 1
55297: PPUSH
55298: CALL_OW 87
// end ;
55302: LD_VAR 0 2
55306: RET
// export function ComMoveHex ( unit , hex ) ; begin
55307: LD_INT 0
55309: PPUSH
// if not hex then
55310: LD_VAR 0 2
55314: NOT
55315: IFFALSE 55319
// exit ;
55317: GO 55372
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
55319: LD_VAR 0 2
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: PPUSH
55328: LD_VAR 0 2
55332: PUSH
55333: LD_INT 2
55335: ARRAY
55336: PPUSH
55337: CALL_OW 428
55341: IFFALSE 55345
// exit ;
55343: GO 55372
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
55345: LD_VAR 0 1
55349: PPUSH
55350: LD_VAR 0 2
55354: PUSH
55355: LD_INT 1
55357: ARRAY
55358: PPUSH
55359: LD_VAR 0 2
55363: PUSH
55364: LD_INT 2
55366: ARRAY
55367: PPUSH
55368: CALL_OW 111
// end ;
55372: LD_VAR 0 3
55376: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
55377: LD_INT 0
55379: PPUSH
55380: PPUSH
55381: PPUSH
// if not unit or not enemy then
55382: LD_VAR 0 1
55386: NOT
55387: IFTRUE 55396
55389: PUSH
55390: LD_VAR 0 2
55394: NOT
55395: OR
55396: IFFALSE 55400
// exit ;
55398: GO 55526
// x := GetX ( enemy ) ;
55400: LD_ADDR_VAR 0 4
55404: PUSH
55405: LD_VAR 0 2
55409: PPUSH
55410: CALL_OW 250
55414: ST_TO_ADDR
// y := GetY ( enemy ) ;
55415: LD_ADDR_VAR 0 5
55419: PUSH
55420: LD_VAR 0 2
55424: PPUSH
55425: CALL_OW 251
55429: ST_TO_ADDR
// if ValidHex ( x , y ) then
55430: LD_VAR 0 4
55434: PPUSH
55435: LD_VAR 0 5
55439: PPUSH
55440: CALL_OW 488
55444: IFFALSE 55526
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
55446: LD_VAR 0 2
55450: PPUSH
55451: CALL_OW 247
55455: PUSH
55456: LD_INT 3
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: IN
55466: IFTRUE 55489
55468: PUSH
55469: LD_VAR 0 1
55473: PPUSH
55474: CALL_OW 255
55478: PPUSH
55479: LD_VAR 0 2
55483: PPUSH
55484: CALL_OW 292
55488: OR
55489: IFFALSE 55507
// ComAttackUnit ( unit , enemy ) else
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_VAR 0 2
55500: PPUSH
55501: CALL_OW 115
55505: GO 55526
// ComAgressiveMove ( unit , x , y ) ;
55507: LD_VAR 0 1
55511: PPUSH
55512: LD_VAR 0 4
55516: PPUSH
55517: LD_VAR 0 5
55521: PPUSH
55522: CALL_OW 114
// end ;
55526: LD_VAR 0 3
55530: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
55531: LD_INT 0
55533: PPUSH
55534: PPUSH
55535: PPUSH
// list := AreaToList ( area , 0 ) ;
55536: LD_ADDR_VAR 0 5
55540: PUSH
55541: LD_VAR 0 1
55545: PPUSH
55546: LD_INT 0
55548: PPUSH
55549: CALL_OW 517
55553: ST_TO_ADDR
// if not list then
55554: LD_VAR 0 5
55558: NOT
55559: IFFALSE 55563
// exit ;
55561: GO 55693
// if all then
55563: LD_VAR 0 2
55567: IFFALSE 55655
// begin for i := 1 to list [ 1 ] do
55569: LD_ADDR_VAR 0 4
55573: PUSH
55574: DOUBLE
55575: LD_INT 1
55577: DEC
55578: ST_TO_ADDR
55579: LD_VAR 0 5
55583: PUSH
55584: LD_INT 1
55586: ARRAY
55587: PUSH
55588: FOR_TO
55589: IFFALSE 55651
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
55591: LD_ADDR_VAR 0 3
55595: PUSH
55596: LD_VAR 0 3
55600: PPUSH
55601: LD_VAR 0 3
55605: PUSH
55606: LD_INT 1
55608: PLUS
55609: PPUSH
55610: LD_VAR 0 5
55614: PUSH
55615: LD_INT 1
55617: ARRAY
55618: PUSH
55619: LD_VAR 0 4
55623: ARRAY
55624: PUSH
55625: LD_VAR 0 5
55629: PUSH
55630: LD_INT 2
55632: ARRAY
55633: PUSH
55634: LD_VAR 0 4
55638: ARRAY
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PPUSH
55644: CALL_OW 1
55648: ST_TO_ADDR
55649: GO 55588
55651: POP
55652: POP
// exit ;
55653: GO 55693
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
55655: LD_ADDR_VAR 0 3
55659: PUSH
55660: LD_VAR 0 5
55664: PUSH
55665: LD_INT 1
55667: ARRAY
55668: PUSH
55669: LD_INT 1
55671: ARRAY
55672: PUSH
55673: LD_VAR 0 5
55677: PUSH
55678: LD_INT 2
55680: ARRAY
55681: PUSH
55682: LD_INT 1
55684: ARRAY
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: ST_TO_ADDR
// end ;
55693: LD_VAR 0 3
55697: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
55698: LD_INT 0
55700: PPUSH
55701: PPUSH
// list := AreaToList ( area , 0 ) ;
55702: LD_ADDR_VAR 0 4
55706: PUSH
55707: LD_VAR 0 1
55711: PPUSH
55712: LD_INT 0
55714: PPUSH
55715: CALL_OW 517
55719: ST_TO_ADDR
// if not list then
55720: LD_VAR 0 4
55724: NOT
55725: IFFALSE 55729
// exit ;
55727: GO 55770
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
55729: LD_ADDR_VAR 0 3
55733: PUSH
55734: LD_VAR 0 4
55738: PUSH
55739: LD_INT 1
55741: ARRAY
55742: PUSH
55743: LD_INT 1
55745: ARRAY
55746: PUSH
55747: LD_VAR 0 4
55751: PUSH
55752: LD_INT 2
55754: ARRAY
55755: PUSH
55756: LD_INT 1
55758: ARRAY
55759: PUSH
55760: LD_VAR 0 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// end ;
55770: LD_VAR 0 3
55774: RET
// export function First ( array ) ; begin
55775: LD_INT 0
55777: PPUSH
// if not array then
55778: LD_VAR 0 1
55782: NOT
55783: IFFALSE 55787
// exit ;
55785: GO 55801
// result := array [ 1 ] ;
55787: LD_ADDR_VAR 0 2
55791: PUSH
55792: LD_VAR 0 1
55796: PUSH
55797: LD_INT 1
55799: ARRAY
55800: ST_TO_ADDR
// end ;
55801: LD_VAR 0 2
55805: RET
// export function Last ( array ) ; begin
55806: LD_INT 0
55808: PPUSH
// if not array then
55809: LD_VAR 0 1
55813: NOT
55814: IFFALSE 55818
// exit ;
55816: GO 55834
// result := array [ array ] ;
55818: LD_ADDR_VAR 0 2
55822: PUSH
55823: LD_VAR 0 1
55827: PUSH
55828: LD_VAR 0 1
55832: ARRAY
55833: ST_TO_ADDR
// end ;
55834: LD_VAR 0 2
55838: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
55839: LD_INT 0
55841: PPUSH
55842: PPUSH
// result := [ ] ;
55843: LD_ADDR_VAR 0 5
55847: PUSH
55848: EMPTY
55849: ST_TO_ADDR
// if not array then
55850: LD_VAR 0 1
55854: NOT
55855: IFFALSE 55859
// exit ;
55857: GO 55971
// for i := 1 to array do
55859: LD_ADDR_VAR 0 6
55863: PUSH
55864: DOUBLE
55865: LD_INT 1
55867: DEC
55868: ST_TO_ADDR
55869: LD_VAR 0 1
55873: PUSH
55874: FOR_TO
55875: IFFALSE 55969
// if array [ i ] [ index ] = value then
55877: LD_VAR 0 1
55881: PUSH
55882: LD_VAR 0 6
55886: ARRAY
55887: PUSH
55888: LD_VAR 0 2
55892: ARRAY
55893: PUSH
55894: LD_VAR 0 3
55898: EQUAL
55899: IFFALSE 55967
// begin if indexColumn then
55901: LD_VAR 0 4
55905: IFFALSE 55941
// result := Join ( result , array [ i ] [ indexColumn ] ) else
55907: LD_ADDR_VAR 0 5
55911: PUSH
55912: LD_VAR 0 5
55916: PPUSH
55917: LD_VAR 0 1
55921: PUSH
55922: LD_VAR 0 6
55926: ARRAY
55927: PUSH
55928: LD_VAR 0 4
55932: ARRAY
55933: PPUSH
55934: CALL 50979 0 2
55938: ST_TO_ADDR
55939: GO 55967
// result := Join ( result , array [ i ] ) ;
55941: LD_ADDR_VAR 0 5
55945: PUSH
55946: LD_VAR 0 5
55950: PPUSH
55951: LD_VAR 0 1
55955: PUSH
55956: LD_VAR 0 6
55960: ARRAY
55961: PPUSH
55962: CALL 50979 0 2
55966: ST_TO_ADDR
// end ;
55967: GO 55874
55969: POP
55970: POP
// end ;
55971: LD_VAR 0 5
55975: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
55976: LD_INT 0
55978: PPUSH
// if not vehicles or not parkingPoint then
55979: LD_VAR 0 1
55983: NOT
55984: IFTRUE 55993
55986: PUSH
55987: LD_VAR 0 2
55991: NOT
55992: OR
55993: IFFALSE 55997
// exit ;
55995: GO 56095
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
55997: LD_ADDR_VAR 0 1
56001: PUSH
56002: LD_VAR 0 1
56006: PPUSH
56007: LD_INT 50
56009: PUSH
56010: EMPTY
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 92
56018: PUSH
56019: LD_VAR 0 2
56023: PUSH
56024: LD_INT 1
56026: ARRAY
56027: PUSH
56028: LD_VAR 0 2
56032: PUSH
56033: LD_INT 2
56035: ARRAY
56036: PUSH
56037: LD_INT 8
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PPUSH
56054: CALL_OW 72
56058: ST_TO_ADDR
// if not vehicles then
56059: LD_VAR 0 1
56063: NOT
56064: IFFALSE 56068
// exit ;
56066: GO 56095
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
56068: LD_VAR 0 1
56072: PPUSH
56073: LD_VAR 0 2
56077: PUSH
56078: LD_INT 1
56080: ARRAY
56081: PPUSH
56082: LD_VAR 0 2
56086: PUSH
56087: LD_INT 2
56089: ARRAY
56090: PPUSH
56091: CALL_OW 111
// end ;
56095: LD_VAR 0 3
56099: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
56100: LD_INT 0
56102: PPUSH
56103: PPUSH
56104: PPUSH
// if not side or not area then
56105: LD_VAR 0 1
56109: NOT
56110: IFTRUE 56119
56112: PUSH
56113: LD_VAR 0 2
56117: NOT
56118: OR
56119: IFFALSE 56123
// exit ;
56121: GO 56242
// tmp := AreaToList ( area , 0 ) ;
56123: LD_ADDR_VAR 0 5
56127: PUSH
56128: LD_VAR 0 2
56132: PPUSH
56133: LD_INT 0
56135: PPUSH
56136: CALL_OW 517
56140: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56141: LD_ADDR_VAR 0 4
56145: PUSH
56146: DOUBLE
56147: LD_INT 1
56149: DEC
56150: ST_TO_ADDR
56151: LD_VAR 0 5
56155: PUSH
56156: LD_INT 1
56158: ARRAY
56159: PUSH
56160: FOR_TO
56161: IFFALSE 56240
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
56163: LD_VAR 0 5
56167: PUSH
56168: LD_INT 1
56170: ARRAY
56171: PUSH
56172: LD_VAR 0 4
56176: ARRAY
56177: PPUSH
56178: LD_VAR 0 5
56182: PUSH
56183: LD_INT 2
56185: ARRAY
56186: PUSH
56187: LD_VAR 0 4
56191: ARRAY
56192: PPUSH
56193: CALL_OW 351
56197: IFFALSE 56238
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
56199: LD_VAR 0 5
56203: PUSH
56204: LD_INT 1
56206: ARRAY
56207: PUSH
56208: LD_VAR 0 4
56212: ARRAY
56213: PPUSH
56214: LD_VAR 0 5
56218: PUSH
56219: LD_INT 2
56221: ARRAY
56222: PUSH
56223: LD_VAR 0 4
56227: ARRAY
56228: PPUSH
56229: LD_VAR 0 1
56233: PPUSH
56234: CALL_OW 244
// end ;
56238: GO 56160
56240: POP
56241: POP
// end ;
56242: LD_VAR 0 3
56246: RET
// export function UniqueArray ( array ) ; var i ; begin
56247: LD_INT 0
56249: PPUSH
56250: PPUSH
// result := [ ] ;
56251: LD_ADDR_VAR 0 2
56255: PUSH
56256: EMPTY
56257: ST_TO_ADDR
// if not array then
56258: LD_VAR 0 1
56262: NOT
56263: IFFALSE 56267
// exit ;
56265: GO 56328
// for i := 1 to array do
56267: LD_ADDR_VAR 0 3
56271: PUSH
56272: DOUBLE
56273: LD_INT 1
56275: DEC
56276: ST_TO_ADDR
56277: LD_VAR 0 1
56281: PUSH
56282: FOR_TO
56283: IFFALSE 56326
// if not array [ i ] in result then
56285: LD_VAR 0 1
56289: PUSH
56290: LD_VAR 0 3
56294: ARRAY
56295: PUSH
56296: LD_VAR 0 2
56300: IN
56301: NOT
56302: IFFALSE 56324
// result := Join ( result , i ) ;
56304: LD_ADDR_VAR 0 2
56308: PUSH
56309: LD_VAR 0 2
56313: PPUSH
56314: LD_VAR 0 3
56318: PPUSH
56319: CALL 50979 0 2
56323: ST_TO_ADDR
56324: GO 56282
56326: POP
56327: POP
// end ; end_of_file
56328: LD_VAR 0 2
56332: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56333: LD_VAR 0 1
56337: PUSH
56338: LD_INT 200
56340: DOUBLE
56341: GREATEREQUAL
56342: IFFALSE 56350
56344: LD_INT 299
56346: DOUBLE
56347: LESSEQUAL
56348: IFTRUE 56352
56350: GO 56384
56352: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56353: LD_VAR 0 1
56357: PPUSH
56358: LD_VAR 0 2
56362: PPUSH
56363: LD_VAR 0 3
56367: PPUSH
56368: LD_VAR 0 4
56372: PPUSH
56373: LD_VAR 0 5
56377: PPUSH
56378: CALL 57246 0 5
56382: GO 56461
56384: LD_INT 300
56386: DOUBLE
56387: GREATEREQUAL
56388: IFFALSE 56396
56390: LD_INT 399
56392: DOUBLE
56393: LESSEQUAL
56394: IFTRUE 56398
56396: GO 56460
56398: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56399: LD_VAR 0 1
56403: PPUSH
56404: LD_VAR 0 2
56408: PPUSH
56409: LD_VAR 0 3
56413: PPUSH
56414: LD_VAR 0 4
56418: PPUSH
56419: LD_VAR 0 5
56423: PPUSH
56424: LD_VAR 0 6
56428: PPUSH
56429: LD_VAR 0 7
56433: PPUSH
56434: LD_VAR 0 8
56438: PPUSH
56439: LD_VAR 0 9
56443: PPUSH
56444: LD_VAR 0 10
56448: PPUSH
56449: LD_VAR 0 11
56453: PPUSH
56454: CALL 63567 0 11
56458: GO 56461
56460: POP
// end ;
56461: PPOPN 11
56463: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56464: LD_VAR 0 1
56468: PPUSH
56469: LD_VAR 0 2
56473: PPUSH
56474: LD_VAR 0 3
56478: PPUSH
56479: LD_VAR 0 4
56483: PPUSH
56484: LD_VAR 0 5
56488: PPUSH
56489: CALL 56546 0 5
// end ; end_of_file
56493: PPOPN 5
56495: END
// export function SOS_UnitDestroyed ( un ) ; begin
56496: LD_INT 0
56498: PPUSH
// ComRadiation ( un ) ;
56499: LD_VAR 0 1
56503: PPUSH
56504: CALL 57666 0 1
// end ;
56508: LD_VAR 0 2
56512: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56513: LD_INT 0
56515: PPUSH
// ComRadiation ( un ) ;
56516: LD_VAR 0 1
56520: PPUSH
56521: CALL 57666 0 1
// end ;
56525: LD_VAR 0 2
56529: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56530: LD_INT 0
56532: PPUSH
// end ;
56533: LD_VAR 0 4
56537: RET
// export function SOS_Command ( cmd ) ; begin
56538: LD_INT 0
56540: PPUSH
// end ;
56541: LD_VAR 0 2
56545: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56546: LD_INT 0
56548: PPUSH
// end ;
56549: LD_VAR 0 6
56553: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56554: LD_INT 0
56556: PPUSH
56557: PPUSH
56558: PPUSH
56559: PPUSH
56560: PPUSH
// if not vehicle or not factory then
56561: LD_VAR 0 1
56565: NOT
56566: IFTRUE 56575
56568: PUSH
56569: LD_VAR 0 2
56573: NOT
56574: OR
56575: IFFALSE 56579
// exit ;
56577: GO 57241
// weapon := GetWeapon ( vehicle ) ;
56579: LD_ADDR_VAR 0 7
56583: PUSH
56584: LD_VAR 0 1
56588: PPUSH
56589: CALL_OW 264
56593: ST_TO_ADDR
// if weapon = ar_miner then
56594: LD_VAR 0 7
56598: PUSH
56599: LD_INT 81
56601: EQUAL
56602: IFFALSE 56659
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56604: LD_ADDR_EXP 57
56608: PUSH
56609: LD_EXP 57
56613: PPUSH
56614: LD_EXP 57
56618: PUSH
56619: LD_INT 1
56621: PLUS
56622: PPUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: CALL_OW 1
56632: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56633: LD_ADDR_EXP 58
56637: PUSH
56638: LD_EXP 58
56642: PPUSH
56643: LD_EXP 58
56647: PUSH
56648: LD_INT 1
56650: PLUS
56651: PPUSH
56652: EMPTY
56653: PPUSH
56654: CALL_OW 1
56658: ST_TO_ADDR
// end ; if not factoryWaypoints then
56659: LD_EXP 60
56663: NOT
56664: IFFALSE 56668
// exit ;
56666: GO 57241
// for i := 1 to Count ( factoryWaypoints ) do
56668: LD_ADDR_VAR 0 4
56672: PUSH
56673: DOUBLE
56674: LD_INT 1
56676: DEC
56677: ST_TO_ADDR
56678: LD_EXP 60
56682: PPUSH
56683: CALL 15013 0 1
56687: PUSH
56688: FOR_TO
56689: IFFALSE 57239
// if factoryWaypoints [ i ] [ 2 ] = factory then
56691: LD_EXP 60
56695: PUSH
56696: LD_VAR 0 4
56700: ARRAY
56701: PUSH
56702: LD_INT 2
56704: ARRAY
56705: PUSH
56706: LD_VAR 0 2
56710: EQUAL
56711: IFFALSE 57237
// begin if GetControl ( vehicle ) = control_manual then
56713: LD_VAR 0 1
56717: PPUSH
56718: CALL_OW 263
56722: PUSH
56723: LD_INT 1
56725: EQUAL
56726: IFFALSE 57090
// begin driver := IsDrivenBy ( vehicle ) ;
56728: LD_ADDR_VAR 0 5
56732: PUSH
56733: LD_VAR 0 1
56737: PPUSH
56738: CALL_OW 311
56742: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56743: LD_VAR 0 5
56747: PUSH
56748: LD_EXP 61
56752: IN
56753: IFTRUE 56767
56755: PUSH
56756: LD_VAR 0 1
56760: PUSH
56761: LD_EXP 61
56765: IN
56766: OR
56767: IFFALSE 56773
// exit ;
56769: POP
56770: POP
56771: GO 57241
// if not HasTask ( driver ) then
56773: LD_VAR 0 5
56777: PPUSH
56778: CALL_OW 314
56782: NOT
56783: IFFALSE 57088
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56785: LD_ADDR_EXP 61
56789: PUSH
56790: LD_EXP 61
56794: PPUSH
56795: LD_VAR 0 5
56799: PPUSH
56800: CALL 50979 0 2
56804: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56805: LD_ADDR_EXP 61
56809: PUSH
56810: LD_EXP 61
56814: PPUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: CALL 50979 0 2
56824: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56825: LD_ADDR_VAR 0 6
56829: PUSH
56830: LD_EXP 60
56834: PUSH
56835: LD_VAR 0 4
56839: ARRAY
56840: PUSH
56841: LD_INT 3
56843: ARRAY
56844: PPUSH
56845: LD_EXP 60
56849: PUSH
56850: LD_VAR 0 4
56854: ARRAY
56855: PUSH
56856: LD_INT 4
56858: ARRAY
56859: PPUSH
56860: CALL_OW 428
56864: ST_TO_ADDR
// if hex then
56865: LD_VAR 0 6
56869: IFFALSE 56887
// ComMoveUnit ( driver , hex ) else
56871: LD_VAR 0 5
56875: PPUSH
56876: LD_VAR 0 6
56880: PPUSH
56881: CALL_OW 112
56885: GO 56971
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56887: LD_VAR 0 1
56891: PPUSH
56892: LD_EXP 60
56896: PUSH
56897: LD_VAR 0 4
56901: ARRAY
56902: PUSH
56903: LD_INT 3
56905: ARRAY
56906: PPUSH
56907: LD_EXP 60
56911: PUSH
56912: LD_VAR 0 4
56916: ARRAY
56917: PUSH
56918: LD_INT 4
56920: ARRAY
56921: PPUSH
56922: CALL_OW 297
56926: PUSH
56927: LD_INT 0
56929: GREATER
56930: IFFALSE 56971
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56932: LD_VAR 0 5
56936: PPUSH
56937: LD_EXP 60
56941: PUSH
56942: LD_VAR 0 4
56946: ARRAY
56947: PUSH
56948: LD_INT 3
56950: ARRAY
56951: PPUSH
56952: LD_EXP 60
56956: PUSH
56957: LD_VAR 0 4
56961: ARRAY
56962: PUSH
56963: LD_INT 4
56965: ARRAY
56966: PPUSH
56967: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56971: LD_VAR 0 5
56975: PPUSH
56976: CALL_OW 181
// if Multiplayer then
56980: LD_OWVAR 4
56984: IFFALSE 57033
// begin repeat wait ( 10 ) ;
56986: LD_INT 10
56988: PPUSH
56989: CALL_OW 67
// until not IsInUnit ( driver ) ;
56993: LD_VAR 0 5
56997: PPUSH
56998: CALL_OW 310
57002: NOT
57003: IFFALSE 56986
// if not HasTask ( driver ) then
57005: LD_VAR 0 5
57009: PPUSH
57010: CALL_OW 314
57014: NOT
57015: IFFALSE 57031
// ComEnterUnit ( driver , factory ) ;
57017: LD_VAR 0 5
57021: PPUSH
57022: LD_VAR 0 2
57026: PPUSH
57027: CALL_OW 120
// end else
57031: GO 57047
// AddComEnterUnit ( driver , factory ) ;
57033: LD_VAR 0 5
57037: PPUSH
57038: LD_VAR 0 2
57042: PPUSH
57043: CALL_OW 180
// wait ( 0 0$1 ) ;
57047: LD_INT 35
57049: PPUSH
57050: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57054: LD_ADDR_EXP 61
57058: PUSH
57059: LD_EXP 61
57063: PUSH
57064: LD_VAR 0 5
57068: DIFF
57069: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57070: LD_ADDR_EXP 61
57074: PUSH
57075: LD_EXP 61
57079: PUSH
57080: LD_VAR 0 1
57084: DIFF
57085: ST_TO_ADDR
// break ;
57086: GO 57239
// end ; end else
57088: GO 57237
// if GetControl ( vehicle ) = control_remote then
57090: LD_VAR 0 1
57094: PPUSH
57095: CALL_OW 263
57099: PUSH
57100: LD_INT 2
57102: EQUAL
57103: IFFALSE 57189
// begin wait ( 0 0$2 ) ;
57105: LD_INT 70
57107: PPUSH
57108: CALL_OW 67
// repeat wait ( 10 ) ;
57112: LD_INT 10
57114: PPUSH
57115: CALL_OW 67
// Connect ( vehicle ) ;
57119: LD_VAR 0 1
57123: PPUSH
57124: CALL 21291 0 1
// until IsControledBy ( vehicle ) ;
57128: LD_VAR 0 1
57132: PPUSH
57133: CALL_OW 312
57137: IFFALSE 57112
// wait ( 10 ) ;
57139: LD_INT 10
57141: PPUSH
57142: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57146: LD_VAR 0 1
57150: PPUSH
57151: LD_EXP 60
57155: PUSH
57156: LD_VAR 0 4
57160: ARRAY
57161: PUSH
57162: LD_INT 3
57164: ARRAY
57165: PPUSH
57166: LD_EXP 60
57170: PUSH
57171: LD_VAR 0 4
57175: ARRAY
57176: PUSH
57177: LD_INT 4
57179: ARRAY
57180: PPUSH
57181: CALL_OW 111
// break ;
57185: GO 57239
// end else
57187: GO 57237
// begin wait ( 0 0$3 ) ;
57189: LD_INT 105
57191: PPUSH
57192: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57196: LD_VAR 0 1
57200: PPUSH
57201: LD_EXP 60
57205: PUSH
57206: LD_VAR 0 4
57210: ARRAY
57211: PUSH
57212: LD_INT 3
57214: ARRAY
57215: PPUSH
57216: LD_EXP 60
57220: PUSH
57221: LD_VAR 0 4
57225: ARRAY
57226: PUSH
57227: LD_INT 4
57229: ARRAY
57230: PPUSH
57231: CALL_OW 111
// break ;
57235: GO 57239
// end ; end ;
57237: GO 56688
57239: POP
57240: POP
// end ;
57241: LD_VAR 0 3
57245: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57246: LD_INT 0
57248: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57249: LD_VAR 0 1
57253: PUSH
57254: LD_INT 250
57256: EQUAL
57257: IFFALSE 57274
57259: PUSH
57260: LD_VAR 0 2
57264: PPUSH
57265: CALL_OW 264
57269: PUSH
57270: LD_INT 81
57272: EQUAL
57273: AND
57274: IFFALSE 57295
// MinerPlaceMine ( unit , x , y ) ;
57276: LD_VAR 0 2
57280: PPUSH
57281: LD_VAR 0 4
57285: PPUSH
57286: LD_VAR 0 5
57290: PPUSH
57291: CALL 60576 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57295: LD_VAR 0 1
57299: PUSH
57300: LD_INT 251
57302: EQUAL
57303: IFFALSE 57320
57305: PUSH
57306: LD_VAR 0 2
57310: PPUSH
57311: CALL_OW 264
57315: PUSH
57316: LD_INT 81
57318: EQUAL
57319: AND
57320: IFFALSE 57341
// MinerDetonateMine ( unit , x , y ) ;
57322: LD_VAR 0 2
57326: PPUSH
57327: LD_VAR 0 4
57331: PPUSH
57332: LD_VAR 0 5
57336: PPUSH
57337: CALL 60983 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57341: LD_VAR 0 1
57345: PUSH
57346: LD_INT 252
57348: EQUAL
57349: IFFALSE 57366
57351: PUSH
57352: LD_VAR 0 2
57356: PPUSH
57357: CALL_OW 264
57361: PUSH
57362: LD_INT 81
57364: EQUAL
57365: AND
57366: IFFALSE 57387
// MinerCreateMinefield ( unit , x , y ) ;
57368: LD_VAR 0 2
57372: PPUSH
57373: LD_VAR 0 4
57377: PPUSH
57378: LD_VAR 0 5
57382: PPUSH
57383: CALL 61215 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57387: LD_VAR 0 1
57391: PUSH
57392: LD_INT 253
57394: EQUAL
57395: IFFALSE 57412
57397: PUSH
57398: LD_VAR 0 2
57402: PPUSH
57403: CALL_OW 257
57407: PUSH
57408: LD_INT 5
57410: EQUAL
57411: AND
57412: IFFALSE 57433
// ComBinocular ( unit , x , y ) ;
57414: LD_VAR 0 2
57418: PPUSH
57419: LD_VAR 0 4
57423: PPUSH
57424: LD_VAR 0 5
57428: PPUSH
57429: CALL 61590 0 3
// if selectedUnit then
57433: LD_VAR 0 3
57437: IFFALSE 57497
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57439: LD_VAR 0 1
57443: PUSH
57444: LD_INT 254
57446: EQUAL
57447: IFFALSE 57464
57449: PUSH
57450: LD_VAR 0 2
57454: PPUSH
57455: CALL_OW 264
57459: PUSH
57460: LD_INT 99
57462: EQUAL
57463: AND
57464: IFFALSE 57481
57466: PUSH
57467: LD_VAR 0 3
57471: PPUSH
57472: CALL_OW 263
57476: PUSH
57477: LD_INT 3
57479: EQUAL
57480: AND
57481: IFFALSE 57497
// HackDestroyVehicle ( unit , selectedUnit ) ;
57483: LD_VAR 0 2
57487: PPUSH
57488: LD_VAR 0 3
57492: PPUSH
57493: CALL 59787 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57497: LD_VAR 0 1
57501: PUSH
57502: LD_INT 255
57504: EQUAL
57505: IFFALSE 57529
57507: PUSH
57508: LD_VAR 0 2
57512: PPUSH
57513: CALL_OW 264
57517: PUSH
57518: LD_INT 14
57520: PUSH
57521: LD_INT 53
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: IN
57528: AND
57529: IFFALSE 57547
57531: PUSH
57532: LD_VAR 0 4
57536: PPUSH
57537: LD_VAR 0 5
57541: PPUSH
57542: CALL_OW 488
57546: AND
57547: IFFALSE 57571
// CutTreeXYR ( unit , x , y , 12 ) ;
57549: LD_VAR 0 2
57553: PPUSH
57554: LD_VAR 0 4
57558: PPUSH
57559: LD_VAR 0 5
57563: PPUSH
57564: LD_INT 12
57566: PPUSH
57567: CALL 57762 0 4
// if cmd = 256 then
57571: LD_VAR 0 1
57575: PUSH
57576: LD_INT 256
57578: EQUAL
57579: IFFALSE 57600
// SetFactoryWaypoint ( unit , x , y ) ;
57581: LD_VAR 0 2
57585: PPUSH
57586: LD_VAR 0 4
57590: PPUSH
57591: LD_VAR 0 5
57595: PPUSH
57596: CALL 63575 0 3
// if cmd = 257 then
57600: LD_VAR 0 1
57604: PUSH
57605: LD_INT 257
57607: EQUAL
57608: IFFALSE 57629
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57610: LD_VAR 0 2
57614: PPUSH
57615: LD_VAR 0 4
57619: PPUSH
57620: LD_VAR 0 5
57624: PPUSH
57625: CALL 64071 0 3
// if cmd = 258 then
57629: LD_VAR 0 1
57633: PUSH
57634: LD_INT 258
57636: EQUAL
57637: IFFALSE 57661
// BurnTreeXYR ( unit , x , y , 8 ) ;
57639: LD_VAR 0 2
57643: PPUSH
57644: LD_VAR 0 4
57648: PPUSH
57649: LD_VAR 0 5
57653: PPUSH
57654: LD_INT 8
57656: PPUSH
57657: CALL 58162 0 4
// end ;
57661: LD_VAR 0 6
57665: RET
// export function ComRadiation ( un ) ; var eff ; begin
57666: LD_INT 0
57668: PPUSH
57669: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57670: LD_VAR 0 1
57674: PPUSH
57675: CALL_OW 264
57679: PUSH
57680: LD_INT 91
57682: NONEQUAL
57683: IFFALSE 57687
// exit ;
57685: GO 57757
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57687: LD_INT 68
57689: PPUSH
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL_OW 255
57699: PPUSH
57700: CALL_OW 321
57704: PUSH
57705: LD_INT 2
57707: EQUAL
57708: IFFALSE 57720
// eff := 50 else
57710: LD_ADDR_VAR 0 3
57714: PUSH
57715: LD_INT 50
57717: ST_TO_ADDR
57718: GO 57728
// eff := 25 ;
57720: LD_ADDR_VAR 0 3
57724: PUSH
57725: LD_INT 25
57727: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57728: LD_VAR 0 1
57732: PPUSH
57733: CALL_OW 250
57737: PPUSH
57738: LD_VAR 0 1
57742: PPUSH
57743: CALL_OW 251
57747: PPUSH
57748: LD_VAR 0 3
57752: PPUSH
57753: CALL_OW 495
// end ;
57757: LD_VAR 0 2
57761: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57762: LD_INT 0
57764: PPUSH
57765: PPUSH
57766: PPUSH
57767: PPUSH
57768: PPUSH
57769: PPUSH
57770: PPUSH
57771: PPUSH
57772: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57773: LD_VAR 0 1
57777: PPUSH
57778: CALL_OW 302
57782: NOT
57783: IFTRUE 57802
57785: PUSH
57786: LD_VAR 0 2
57790: PPUSH
57791: LD_VAR 0 3
57795: PPUSH
57796: CALL_OW 488
57800: NOT
57801: OR
57802: IFTRUE 57811
57804: PUSH
57805: LD_VAR 0 4
57809: NOT
57810: OR
57811: IFFALSE 57815
// exit ;
57813: GO 58157
// list := [ ] ;
57815: LD_ADDR_VAR 0 13
57819: PUSH
57820: EMPTY
57821: ST_TO_ADDR
// if x - r < 0 then
57822: LD_VAR 0 2
57826: PUSH
57827: LD_VAR 0 4
57831: MINUS
57832: PUSH
57833: LD_INT 0
57835: LESS
57836: IFFALSE 57848
// min_x := 0 else
57838: LD_ADDR_VAR 0 7
57842: PUSH
57843: LD_INT 0
57845: ST_TO_ADDR
57846: GO 57864
// min_x := x - r ;
57848: LD_ADDR_VAR 0 7
57852: PUSH
57853: LD_VAR 0 2
57857: PUSH
57858: LD_VAR 0 4
57862: MINUS
57863: ST_TO_ADDR
// if y - r < 0 then
57864: LD_VAR 0 3
57868: PUSH
57869: LD_VAR 0 4
57873: MINUS
57874: PUSH
57875: LD_INT 0
57877: LESS
57878: IFFALSE 57890
// min_y := 0 else
57880: LD_ADDR_VAR 0 8
57884: PUSH
57885: LD_INT 0
57887: ST_TO_ADDR
57888: GO 57906
// min_y := y - r ;
57890: LD_ADDR_VAR 0 8
57894: PUSH
57895: LD_VAR 0 3
57899: PUSH
57900: LD_VAR 0 4
57904: MINUS
57905: ST_TO_ADDR
// max_x := x + r ;
57906: LD_ADDR_VAR 0 9
57910: PUSH
57911: LD_VAR 0 2
57915: PUSH
57916: LD_VAR 0 4
57920: PLUS
57921: ST_TO_ADDR
// max_y := y + r ;
57922: LD_ADDR_VAR 0 10
57926: PUSH
57927: LD_VAR 0 3
57931: PUSH
57932: LD_VAR 0 4
57936: PLUS
57937: ST_TO_ADDR
// for _x = min_x to max_x do
57938: LD_ADDR_VAR 0 11
57942: PUSH
57943: DOUBLE
57944: LD_VAR 0 7
57948: DEC
57949: ST_TO_ADDR
57950: LD_VAR 0 9
57954: PUSH
57955: FOR_TO
57956: IFFALSE 58075
// for _y = min_y to max_y do
57958: LD_ADDR_VAR 0 12
57962: PUSH
57963: DOUBLE
57964: LD_VAR 0 8
57968: DEC
57969: ST_TO_ADDR
57970: LD_VAR 0 10
57974: PUSH
57975: FOR_TO
57976: IFFALSE 58071
// begin if not ValidHex ( _x , _y ) then
57978: LD_VAR 0 11
57982: PPUSH
57983: LD_VAR 0 12
57987: PPUSH
57988: CALL_OW 488
57992: NOT
57993: IFFALSE 57997
// continue ;
57995: GO 57975
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57997: LD_VAR 0 11
58001: PPUSH
58002: LD_VAR 0 12
58006: PPUSH
58007: CALL_OW 351
58011: IFFALSE 58029
58013: PUSH
58014: LD_VAR 0 11
58018: PPUSH
58019: LD_VAR 0 12
58023: PPUSH
58024: CALL_OW 554
58028: AND
58029: IFFALSE 58069
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58031: LD_ADDR_VAR 0 13
58035: PUSH
58036: LD_VAR 0 13
58040: PPUSH
58041: LD_VAR 0 13
58045: PUSH
58046: LD_INT 1
58048: PLUS
58049: PPUSH
58050: LD_VAR 0 11
58054: PUSH
58055: LD_VAR 0 12
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PPUSH
58064: CALL_OW 2
58068: ST_TO_ADDR
// end ;
58069: GO 57975
58071: POP
58072: POP
58073: GO 57955
58075: POP
58076: POP
// if not list then
58077: LD_VAR 0 13
58081: NOT
58082: IFFALSE 58086
// exit ;
58084: GO 58157
// for i in list do
58086: LD_ADDR_VAR 0 6
58090: PUSH
58091: LD_VAR 0 13
58095: PUSH
58096: FOR_IN
58097: IFFALSE 58155
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_STRING M
58106: PUSH
58107: LD_VAR 0 6
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: PUSH
58116: LD_VAR 0 6
58120: PUSH
58121: LD_INT 2
58123: ARRAY
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 0
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: PPUSH
58149: CALL_OW 447
58153: GO 58096
58155: POP
58156: POP
// end ;
58157: LD_VAR 0 5
58161: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58162: LD_INT 0
58164: PPUSH
58165: PPUSH
58166: PPUSH
58167: PPUSH
58168: PPUSH
58169: PPUSH
58170: PPUSH
58171: PPUSH
58172: PPUSH
58173: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58174: LD_VAR 0 1
58178: PPUSH
58179: CALL_OW 302
58183: NOT
58184: IFTRUE 58203
58186: PUSH
58187: LD_VAR 0 2
58191: PPUSH
58192: LD_VAR 0 3
58196: PPUSH
58197: CALL_OW 488
58201: NOT
58202: OR
58203: IFTRUE 58212
58205: PUSH
58206: LD_VAR 0 4
58210: NOT
58211: OR
58212: IFFALSE 58216
// exit ;
58214: GO 58733
// list := [ ] ;
58216: LD_ADDR_VAR 0 13
58220: PUSH
58221: EMPTY
58222: ST_TO_ADDR
// if x - r < 0 then
58223: LD_VAR 0 2
58227: PUSH
58228: LD_VAR 0 4
58232: MINUS
58233: PUSH
58234: LD_INT 0
58236: LESS
58237: IFFALSE 58249
// min_x := 0 else
58239: LD_ADDR_VAR 0 7
58243: PUSH
58244: LD_INT 0
58246: ST_TO_ADDR
58247: GO 58265
// min_x := x - r ;
58249: LD_ADDR_VAR 0 7
58253: PUSH
58254: LD_VAR 0 2
58258: PUSH
58259: LD_VAR 0 4
58263: MINUS
58264: ST_TO_ADDR
// if y - r < 0 then
58265: LD_VAR 0 3
58269: PUSH
58270: LD_VAR 0 4
58274: MINUS
58275: PUSH
58276: LD_INT 0
58278: LESS
58279: IFFALSE 58291
// min_y := 0 else
58281: LD_ADDR_VAR 0 8
58285: PUSH
58286: LD_INT 0
58288: ST_TO_ADDR
58289: GO 58307
// min_y := y - r ;
58291: LD_ADDR_VAR 0 8
58295: PUSH
58296: LD_VAR 0 3
58300: PUSH
58301: LD_VAR 0 4
58305: MINUS
58306: ST_TO_ADDR
// max_x := x + r ;
58307: LD_ADDR_VAR 0 9
58311: PUSH
58312: LD_VAR 0 2
58316: PUSH
58317: LD_VAR 0 4
58321: PLUS
58322: ST_TO_ADDR
// max_y := y + r ;
58323: LD_ADDR_VAR 0 10
58327: PUSH
58328: LD_VAR 0 3
58332: PUSH
58333: LD_VAR 0 4
58337: PLUS
58338: ST_TO_ADDR
// for _x = min_x to max_x do
58339: LD_ADDR_VAR 0 11
58343: PUSH
58344: DOUBLE
58345: LD_VAR 0 7
58349: DEC
58350: ST_TO_ADDR
58351: LD_VAR 0 9
58355: PUSH
58356: FOR_TO
58357: IFFALSE 58476
// for _y = min_y to max_y do
58359: LD_ADDR_VAR 0 12
58363: PUSH
58364: DOUBLE
58365: LD_VAR 0 8
58369: DEC
58370: ST_TO_ADDR
58371: LD_VAR 0 10
58375: PUSH
58376: FOR_TO
58377: IFFALSE 58472
// begin if not ValidHex ( _x , _y ) then
58379: LD_VAR 0 11
58383: PPUSH
58384: LD_VAR 0 12
58388: PPUSH
58389: CALL_OW 488
58393: NOT
58394: IFFALSE 58398
// continue ;
58396: GO 58376
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58398: LD_VAR 0 11
58402: PPUSH
58403: LD_VAR 0 12
58407: PPUSH
58408: CALL_OW 351
58412: IFFALSE 58430
58414: PUSH
58415: LD_VAR 0 11
58419: PPUSH
58420: LD_VAR 0 12
58424: PPUSH
58425: CALL_OW 554
58429: AND
58430: IFFALSE 58470
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58432: LD_ADDR_VAR 0 13
58436: PUSH
58437: LD_VAR 0 13
58441: PPUSH
58442: LD_VAR 0 13
58446: PUSH
58447: LD_INT 1
58449: PLUS
58450: PPUSH
58451: LD_VAR 0 11
58455: PUSH
58456: LD_VAR 0 12
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PPUSH
58465: CALL_OW 2
58469: ST_TO_ADDR
// end ;
58470: GO 58376
58472: POP
58473: POP
58474: GO 58356
58476: POP
58477: POP
// if not list then
58478: LD_VAR 0 13
58482: NOT
58483: IFFALSE 58487
// exit ;
58485: GO 58733
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58487: LD_ADDR_VAR 0 13
58491: PUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: LD_VAR 0 13
58501: PPUSH
58502: LD_INT 1
58504: PPUSH
58505: LD_INT 1
58507: PPUSH
58508: CALL 18419 0 4
58512: ST_TO_ADDR
// ComStop ( flame ) ;
58513: LD_VAR 0 1
58517: PPUSH
58518: CALL_OW 141
// for i in list do
58522: LD_ADDR_VAR 0 6
58526: PUSH
58527: LD_VAR 0 13
58531: PUSH
58532: FOR_IN
58533: IFFALSE 58564
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58535: LD_VAR 0 1
58539: PPUSH
58540: LD_VAR 0 6
58544: PUSH
58545: LD_INT 1
58547: ARRAY
58548: PPUSH
58549: LD_VAR 0 6
58553: PUSH
58554: LD_INT 2
58556: ARRAY
58557: PPUSH
58558: CALL_OW 176
58562: GO 58532
58564: POP
58565: POP
// repeat wait ( 0 0$1 ) ;
58566: LD_INT 35
58568: PPUSH
58569: CALL_OW 67
// task := GetTaskList ( flame ) ;
58573: LD_ADDR_VAR 0 14
58577: PUSH
58578: LD_VAR 0 1
58582: PPUSH
58583: CALL_OW 437
58587: ST_TO_ADDR
// if not task then
58588: LD_VAR 0 14
58592: NOT
58593: IFFALSE 58597
// exit ;
58595: GO 58733
// if task [ 1 ] [ 1 ] <> | then
58597: LD_VAR 0 14
58601: PUSH
58602: LD_INT 1
58604: ARRAY
58605: PUSH
58606: LD_INT 1
58608: ARRAY
58609: PUSH
58610: LD_STRING |
58612: NONEQUAL
58613: IFFALSE 58617
// exit ;
58615: GO 58733
// _x := task [ 1 ] [ 2 ] ;
58617: LD_ADDR_VAR 0 11
58621: PUSH
58622: LD_VAR 0 14
58626: PUSH
58627: LD_INT 1
58629: ARRAY
58630: PUSH
58631: LD_INT 2
58633: ARRAY
58634: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58635: LD_ADDR_VAR 0 12
58639: PUSH
58640: LD_VAR 0 14
58644: PUSH
58645: LD_INT 1
58647: ARRAY
58648: PUSH
58649: LD_INT 3
58651: ARRAY
58652: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58653: LD_VAR 0 11
58657: PPUSH
58658: LD_VAR 0 12
58662: PPUSH
58663: CALL_OW 351
58667: NOT
58668: IFTRUE 58687
58670: PUSH
58671: LD_VAR 0 11
58675: PPUSH
58676: LD_VAR 0 12
58680: PPUSH
58681: CALL_OW 554
58685: NOT
58686: OR
58687: IFFALSE 58721
// begin task := Delete ( task , 1 ) ;
58689: LD_ADDR_VAR 0 14
58693: PUSH
58694: LD_VAR 0 14
58698: PPUSH
58699: LD_INT 1
58701: PPUSH
58702: CALL_OW 3
58706: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58707: LD_VAR 0 1
58711: PPUSH
58712: LD_VAR 0 14
58716: PPUSH
58717: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58721: LD_VAR 0 1
58725: PPUSH
58726: CALL_OW 314
58730: NOT
58731: IFFALSE 58566
// end ;
58733: LD_VAR 0 5
58737: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58738: LD_EXP 50
58742: NOT
58743: IFFALSE 58793
58745: GO 58747
58747: DISABLE
// begin initHack := true ;
58748: LD_ADDR_EXP 50
58752: PUSH
58753: LD_INT 1
58755: ST_TO_ADDR
// hackTanks := [ ] ;
58756: LD_ADDR_EXP 51
58760: PUSH
58761: EMPTY
58762: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58763: LD_ADDR_EXP 52
58767: PUSH
58768: EMPTY
58769: ST_TO_ADDR
// hackLimit := 3 ;
58770: LD_ADDR_EXP 53
58774: PUSH
58775: LD_INT 3
58777: ST_TO_ADDR
// hackDist := 12 ;
58778: LD_ADDR_EXP 54
58782: PUSH
58783: LD_INT 12
58785: ST_TO_ADDR
// hackCounter := [ ] ;
58786: LD_ADDR_EXP 55
58790: PUSH
58791: EMPTY
58792: ST_TO_ADDR
// end ;
58793: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58794: LD_EXP 50
58798: IFFALSE 58816
58800: PUSH
58801: LD_INT 34
58803: PUSH
58804: LD_INT 99
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PPUSH
58811: CALL_OW 69
58815: AND
58816: IFFALSE 59069
58818: GO 58820
58820: DISABLE
58821: LD_INT 0
58823: PPUSH
58824: PPUSH
// begin enable ;
58825: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58826: LD_ADDR_VAR 0 1
58830: PUSH
58831: LD_INT 34
58833: PUSH
58834: LD_INT 99
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PPUSH
58841: CALL_OW 69
58845: PUSH
58846: FOR_IN
58847: IFFALSE 59067
// begin if not i in hackTanks then
58849: LD_VAR 0 1
58853: PUSH
58854: LD_EXP 51
58858: IN
58859: NOT
58860: IFFALSE 58943
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58862: LD_ADDR_EXP 51
58866: PUSH
58867: LD_EXP 51
58871: PPUSH
58872: LD_EXP 51
58876: PUSH
58877: LD_INT 1
58879: PLUS
58880: PPUSH
58881: LD_VAR 0 1
58885: PPUSH
58886: CALL_OW 1
58890: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58891: LD_ADDR_EXP 52
58895: PUSH
58896: LD_EXP 52
58900: PPUSH
58901: LD_EXP 52
58905: PUSH
58906: LD_INT 1
58908: PLUS
58909: PPUSH
58910: EMPTY
58911: PPUSH
58912: CALL_OW 1
58916: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58917: LD_ADDR_EXP 55
58921: PUSH
58922: LD_EXP 55
58926: PPUSH
58927: LD_EXP 55
58931: PUSH
58932: LD_INT 1
58934: PLUS
58935: PPUSH
58936: EMPTY
58937: PPUSH
58938: CALL_OW 1
58942: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58943: LD_VAR 0 1
58947: PPUSH
58948: CALL_OW 302
58952: NOT
58953: IFFALSE 58966
// begin HackUnlinkAll ( i ) ;
58955: LD_VAR 0 1
58959: PPUSH
58960: CALL 59072 0 1
// continue ;
58964: GO 58846
// end ; HackCheckCapturedStatus ( i ) ;
58966: LD_VAR 0 1
58970: PPUSH
58971: CALL 59517 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58975: LD_ADDR_VAR 0 2
58979: PUSH
58980: LD_INT 81
58982: PUSH
58983: LD_VAR 0 1
58987: PPUSH
58988: CALL_OW 255
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 33
58999: PUSH
59000: LD_INT 3
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 91
59009: PUSH
59010: LD_VAR 0 1
59014: PUSH
59015: LD_EXP 54
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 50
59027: PUSH
59028: EMPTY
59029: LIST
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: PPUSH
59037: CALL_OW 69
59041: ST_TO_ADDR
// if not tmp then
59042: LD_VAR 0 2
59046: NOT
59047: IFFALSE 59051
// continue ;
59049: GO 58846
// HackLink ( i , tmp ) ;
59051: LD_VAR 0 1
59055: PPUSH
59056: LD_VAR 0 2
59060: PPUSH
59061: CALL 59208 0 2
// end ;
59065: GO 58846
59067: POP
59068: POP
// end ;
59069: PPOPN 2
59071: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59072: LD_INT 0
59074: PPUSH
59075: PPUSH
59076: PPUSH
// if not hack in hackTanks then
59077: LD_VAR 0 1
59081: PUSH
59082: LD_EXP 51
59086: IN
59087: NOT
59088: IFFALSE 59092
// exit ;
59090: GO 59203
// index := GetElementIndex ( hackTanks , hack ) ;
59092: LD_ADDR_VAR 0 4
59096: PUSH
59097: LD_EXP 51
59101: PPUSH
59102: LD_VAR 0 1
59106: PPUSH
59107: CALL 17714 0 2
59111: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59112: LD_EXP 52
59116: PUSH
59117: LD_VAR 0 4
59121: ARRAY
59122: IFFALSE 59203
// begin for i in hackTanksCaptured [ index ] do
59124: LD_ADDR_VAR 0 3
59128: PUSH
59129: LD_EXP 52
59133: PUSH
59134: LD_VAR 0 4
59138: ARRAY
59139: PUSH
59140: FOR_IN
59141: IFFALSE 59167
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59143: LD_VAR 0 3
59147: PUSH
59148: LD_INT 1
59150: ARRAY
59151: PPUSH
59152: LD_VAR 0 3
59156: PUSH
59157: LD_INT 2
59159: ARRAY
59160: PPUSH
59161: CALL_OW 235
59165: GO 59140
59167: POP
59168: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59169: LD_ADDR_EXP 52
59173: PUSH
59174: LD_EXP 52
59178: PPUSH
59179: LD_VAR 0 4
59183: PPUSH
59184: EMPTY
59185: PPUSH
59186: CALL_OW 1
59190: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59191: LD_VAR 0 1
59195: PPUSH
59196: LD_INT 0
59198: PPUSH
59199: CALL_OW 505
// end ; end ;
59203: LD_VAR 0 2
59207: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59208: LD_INT 0
59210: PPUSH
59211: PPUSH
59212: PPUSH
// if not hack in hackTanks or not vehicles then
59213: LD_VAR 0 1
59217: PUSH
59218: LD_EXP 51
59222: IN
59223: NOT
59224: IFTRUE 59233
59226: PUSH
59227: LD_VAR 0 2
59231: NOT
59232: OR
59233: IFFALSE 59237
// exit ;
59235: GO 59512
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59237: LD_ADDR_VAR 0 2
59241: PUSH
59242: LD_VAR 0 1
59246: PPUSH
59247: LD_VAR 0 2
59251: PPUSH
59252: LD_INT 1
59254: PPUSH
59255: LD_INT 1
59257: PPUSH
59258: CALL 18366 0 4
59262: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59263: LD_ADDR_VAR 0 5
59267: PUSH
59268: LD_EXP 51
59272: PPUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: CALL 17714 0 2
59282: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59283: LD_EXP 52
59287: PUSH
59288: LD_VAR 0 5
59292: ARRAY
59293: PUSH
59294: LD_EXP 53
59298: LESS
59299: IFFALSE 59488
// begin for i := 1 to vehicles do
59301: LD_ADDR_VAR 0 4
59305: PUSH
59306: DOUBLE
59307: LD_INT 1
59309: DEC
59310: ST_TO_ADDR
59311: LD_VAR 0 2
59315: PUSH
59316: FOR_TO
59317: IFFALSE 59486
// begin if hackTanksCaptured [ index ] = hackLimit then
59319: LD_EXP 52
59323: PUSH
59324: LD_VAR 0 5
59328: ARRAY
59329: PUSH
59330: LD_EXP 53
59334: EQUAL
59335: IFFALSE 59339
// break ;
59337: GO 59486
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59339: LD_ADDR_EXP 55
59343: PUSH
59344: LD_EXP 55
59348: PPUSH
59349: LD_VAR 0 5
59353: PPUSH
59354: LD_EXP 55
59358: PUSH
59359: LD_VAR 0 5
59363: ARRAY
59364: PUSH
59365: LD_INT 1
59367: PLUS
59368: PPUSH
59369: CALL_OW 1
59373: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59374: LD_ADDR_EXP 52
59378: PUSH
59379: LD_EXP 52
59383: PPUSH
59384: LD_VAR 0 5
59388: PUSH
59389: LD_EXP 52
59393: PUSH
59394: LD_VAR 0 5
59398: ARRAY
59399: PUSH
59400: LD_INT 1
59402: PLUS
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PPUSH
59408: LD_VAR 0 2
59412: PUSH
59413: LD_VAR 0 4
59417: ARRAY
59418: PUSH
59419: LD_VAR 0 2
59423: PUSH
59424: LD_VAR 0 4
59428: ARRAY
59429: PPUSH
59430: CALL_OW 255
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PPUSH
59439: CALL 17931 0 3
59443: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59444: LD_VAR 0 2
59448: PUSH
59449: LD_VAR 0 4
59453: ARRAY
59454: PPUSH
59455: LD_VAR 0 1
59459: PPUSH
59460: CALL_OW 255
59464: PPUSH
59465: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59469: LD_VAR 0 2
59473: PUSH
59474: LD_VAR 0 4
59478: ARRAY
59479: PPUSH
59480: CALL_OW 141
// end ;
59484: GO 59316
59486: POP
59487: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59488: LD_VAR 0 1
59492: PPUSH
59493: LD_EXP 52
59497: PUSH
59498: LD_VAR 0 5
59502: ARRAY
59503: PUSH
59504: LD_INT 0
59506: PLUS
59507: PPUSH
59508: CALL_OW 505
// end ;
59512: LD_VAR 0 3
59516: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59517: LD_INT 0
59519: PPUSH
59520: PPUSH
59521: PPUSH
59522: PPUSH
// if not hack in hackTanks then
59523: LD_VAR 0 1
59527: PUSH
59528: LD_EXP 51
59532: IN
59533: NOT
59534: IFFALSE 59538
// exit ;
59536: GO 59782
// index := GetElementIndex ( hackTanks , hack ) ;
59538: LD_ADDR_VAR 0 4
59542: PUSH
59543: LD_EXP 51
59547: PPUSH
59548: LD_VAR 0 1
59552: PPUSH
59553: CALL 17714 0 2
59557: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59558: LD_ADDR_VAR 0 3
59562: PUSH
59563: DOUBLE
59564: LD_EXP 52
59568: PUSH
59569: LD_VAR 0 4
59573: ARRAY
59574: INC
59575: ST_TO_ADDR
59576: LD_INT 1
59578: PUSH
59579: FOR_DOWNTO
59580: IFFALSE 59756
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59582: LD_ADDR_VAR 0 5
59586: PUSH
59587: LD_EXP 52
59591: PUSH
59592: LD_VAR 0 4
59596: ARRAY
59597: PUSH
59598: LD_VAR 0 3
59602: ARRAY
59603: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59604: LD_VAR 0 5
59608: PUSH
59609: LD_INT 1
59611: ARRAY
59612: PPUSH
59613: CALL_OW 302
59617: NOT
59618: IFTRUE 59646
59620: PUSH
59621: LD_VAR 0 5
59625: PUSH
59626: LD_INT 1
59628: ARRAY
59629: PPUSH
59630: CALL_OW 255
59634: PUSH
59635: LD_VAR 0 1
59639: PPUSH
59640: CALL_OW 255
59644: NONEQUAL
59645: OR
59646: IFFALSE 59754
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59648: LD_VAR 0 5
59652: PUSH
59653: LD_INT 1
59655: ARRAY
59656: PPUSH
59657: CALL_OW 305
59661: IFFALSE 59689
59663: PUSH
59664: LD_VAR 0 5
59668: PUSH
59669: LD_INT 1
59671: ARRAY
59672: PPUSH
59673: CALL_OW 255
59677: PUSH
59678: LD_VAR 0 1
59682: PPUSH
59683: CALL_OW 255
59687: EQUAL
59688: AND
59689: IFFALSE 59713
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59691: LD_VAR 0 5
59695: PUSH
59696: LD_INT 1
59698: ARRAY
59699: PPUSH
59700: LD_VAR 0 5
59704: PUSH
59705: LD_INT 2
59707: ARRAY
59708: PPUSH
59709: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59713: LD_ADDR_EXP 52
59717: PUSH
59718: LD_EXP 52
59722: PPUSH
59723: LD_VAR 0 4
59727: PPUSH
59728: LD_EXP 52
59732: PUSH
59733: LD_VAR 0 4
59737: ARRAY
59738: PPUSH
59739: LD_VAR 0 3
59743: PPUSH
59744: CALL_OW 3
59748: PPUSH
59749: CALL_OW 1
59753: ST_TO_ADDR
// end ; end ;
59754: GO 59579
59756: POP
59757: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59758: LD_VAR 0 1
59762: PPUSH
59763: LD_EXP 52
59767: PUSH
59768: LD_VAR 0 4
59772: ARRAY
59773: PUSH
59774: LD_INT 0
59776: PLUS
59777: PPUSH
59778: CALL_OW 505
// end ;
59782: LD_VAR 0 2
59786: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59787: LD_INT 0
59789: PPUSH
59790: PPUSH
59791: PPUSH
59792: PPUSH
// if not hack in hackTanks then
59793: LD_VAR 0 1
59797: PUSH
59798: LD_EXP 51
59802: IN
59803: NOT
59804: IFFALSE 59808
// exit ;
59806: GO 59893
// index := GetElementIndex ( hackTanks , hack ) ;
59808: LD_ADDR_VAR 0 5
59812: PUSH
59813: LD_EXP 51
59817: PPUSH
59818: LD_VAR 0 1
59822: PPUSH
59823: CALL 17714 0 2
59827: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59828: LD_ADDR_VAR 0 4
59832: PUSH
59833: DOUBLE
59834: LD_INT 1
59836: DEC
59837: ST_TO_ADDR
59838: LD_EXP 52
59842: PUSH
59843: LD_VAR 0 5
59847: ARRAY
59848: PUSH
59849: FOR_TO
59850: IFFALSE 59891
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59852: LD_EXP 52
59856: PUSH
59857: LD_VAR 0 5
59861: ARRAY
59862: PUSH
59863: LD_VAR 0 4
59867: ARRAY
59868: PUSH
59869: LD_INT 1
59871: ARRAY
59872: PUSH
59873: LD_VAR 0 2
59877: EQUAL
59878: IFFALSE 59889
// KillUnit ( vehicle ) ;
59880: LD_VAR 0 2
59884: PPUSH
59885: CALL_OW 66
59889: GO 59849
59891: POP
59892: POP
// end ;
59893: LD_VAR 0 3
59897: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59898: LD_EXP 56
59902: NOT
59903: IFFALSE 60036
59905: GO 59907
59907: DISABLE
59908: LD_INT 0
59910: PPUSH
// begin initMiner := true ;
59911: LD_ADDR_EXP 56
59915: PUSH
59916: LD_INT 1
59918: ST_TO_ADDR
// minersList := [ ] ;
59919: LD_ADDR_EXP 57
59923: PUSH
59924: EMPTY
59925: ST_TO_ADDR
// minerMinesList := [ ] ;
59926: LD_ADDR_EXP 58
59930: PUSH
59931: EMPTY
59932: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59933: LD_ADDR_EXP 59
59937: PUSH
59938: LD_INT 6
59940: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59941: LD_ADDR_VAR 0 1
59945: PUSH
59946: LD_INT 34
59948: PUSH
59949: LD_INT 81
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PPUSH
59956: CALL_OW 69
59960: PUSH
59961: FOR_IN
59962: IFFALSE 60034
// begin if not i in minersList then
59964: LD_VAR 0 1
59968: PUSH
59969: LD_EXP 57
59973: IN
59974: NOT
59975: IFFALSE 60032
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59977: LD_ADDR_EXP 57
59981: PUSH
59982: LD_EXP 57
59986: PPUSH
59987: LD_EXP 57
59991: PUSH
59992: LD_INT 1
59994: PLUS
59995: PPUSH
59996: LD_VAR 0 1
60000: PPUSH
60001: CALL_OW 1
60005: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60006: LD_ADDR_EXP 58
60010: PUSH
60011: LD_EXP 58
60015: PPUSH
60016: LD_EXP 58
60020: PUSH
60021: LD_INT 1
60023: PLUS
60024: PPUSH
60025: EMPTY
60026: PPUSH
60027: CALL_OW 1
60031: ST_TO_ADDR
// end end ;
60032: GO 59961
60034: POP
60035: POP
// end ;
60036: PPOPN 1
60038: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60039: LD_EXP 56
60043: IFFALSE 60074
60045: PUSH
60046: LD_EXP 58
60050: PPUSH
60051: CALL 15013 0 1
60055: IFTRUE 60073
60057: PUSH
60058: LD_INT 34
60060: PUSH
60061: LD_INT 81
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PPUSH
60068: CALL_OW 69
60072: OR
60073: AND
60074: IFFALSE 60573
60076: GO 60078
60078: DISABLE
60079: LD_INT 0
60081: PPUSH
60082: PPUSH
60083: PPUSH
60084: PPUSH
// begin enable ;
60085: ENABLE
// for i := minerMinesList downto 1 do
60086: LD_ADDR_VAR 0 1
60090: PUSH
60091: DOUBLE
60092: LD_EXP 58
60096: INC
60097: ST_TO_ADDR
60098: LD_INT 1
60100: PUSH
60101: FOR_DOWNTO
60102: IFFALSE 60571
// begin if IsLive ( minersList [ i ] ) then
60104: LD_EXP 57
60108: PUSH
60109: LD_VAR 0 1
60113: ARRAY
60114: PPUSH
60115: CALL_OW 300
60119: IFFALSE 60152
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60121: LD_EXP 57
60125: PUSH
60126: LD_VAR 0 1
60130: ARRAY
60131: PPUSH
60132: LD_EXP 58
60136: PUSH
60137: LD_VAR 0 1
60141: ARRAY
60142: PPUSH
60143: CALL 15013 0 1
60147: PPUSH
60148: CALL_OW 505
// if not minerMinesList [ i ] then
60152: LD_EXP 58
60156: PUSH
60157: LD_VAR 0 1
60161: ARRAY
60162: NOT
60163: IFFALSE 60167
// continue ;
60165: GO 60101
// for j := minerMinesList [ i ] downto 1 do
60167: LD_ADDR_VAR 0 2
60171: PUSH
60172: DOUBLE
60173: LD_EXP 58
60177: PUSH
60178: LD_VAR 0 1
60182: ARRAY
60183: INC
60184: ST_TO_ADDR
60185: LD_INT 1
60187: PUSH
60188: FOR_DOWNTO
60189: IFFALSE 60567
// begin side := GetSide ( minersList [ i ] ) ;
60191: LD_ADDR_VAR 0 3
60195: PUSH
60196: LD_EXP 57
60200: PUSH
60201: LD_VAR 0 1
60205: ARRAY
60206: PPUSH
60207: CALL_OW 255
60211: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60212: LD_EXP 57
60216: PUSH
60217: LD_VAR 0 1
60221: ARRAY
60222: PPUSH
60223: CALL_OW 301
60227: IFTRUE 60247
60229: PUSH
60230: LD_EXP 57
60234: PUSH
60235: LD_VAR 0 1
60239: ARRAY
60240: PPUSH
60241: CALL_OW 305
60245: NOT
60246: OR
60247: IFFALSE 60338
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60249: LD_EXP 58
60253: PUSH
60254: LD_VAR 0 1
60258: ARRAY
60259: PUSH
60260: LD_VAR 0 2
60264: ARRAY
60265: PUSH
60266: LD_INT 1
60268: ARRAY
60269: PPUSH
60270: LD_EXP 58
60274: PUSH
60275: LD_VAR 0 1
60279: ARRAY
60280: PUSH
60281: LD_VAR 0 2
60285: ARRAY
60286: PUSH
60287: LD_INT 2
60289: ARRAY
60290: PPUSH
60291: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60295: LD_ADDR_EXP 58
60299: PUSH
60300: LD_EXP 58
60304: PPUSH
60305: LD_VAR 0 1
60309: PPUSH
60310: LD_EXP 58
60314: PUSH
60315: LD_VAR 0 1
60319: ARRAY
60320: PPUSH
60321: LD_VAR 0 2
60325: PPUSH
60326: CALL_OW 3
60330: PPUSH
60331: CALL_OW 1
60335: ST_TO_ADDR
// continue ;
60336: GO 60188
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60338: LD_ADDR_VAR 0 4
60342: PUSH
60343: LD_EXP 58
60347: PUSH
60348: LD_VAR 0 1
60352: ARRAY
60353: PUSH
60354: LD_VAR 0 2
60358: ARRAY
60359: PUSH
60360: LD_INT 1
60362: ARRAY
60363: PPUSH
60364: LD_EXP 58
60368: PUSH
60369: LD_VAR 0 1
60373: ARRAY
60374: PUSH
60375: LD_VAR 0 2
60379: ARRAY
60380: PUSH
60381: LD_INT 2
60383: ARRAY
60384: PPUSH
60385: CALL_OW 428
60389: ST_TO_ADDR
// if not tmp then
60390: LD_VAR 0 4
60394: NOT
60395: IFFALSE 60399
// continue ;
60397: GO 60188
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60399: LD_VAR 0 4
60403: PUSH
60404: LD_INT 81
60406: PUSH
60407: LD_VAR 0 3
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PPUSH
60416: CALL_OW 69
60420: IN
60421: IFFALSE 60471
60423: PUSH
60424: LD_EXP 58
60428: PUSH
60429: LD_VAR 0 1
60433: ARRAY
60434: PUSH
60435: LD_VAR 0 2
60439: ARRAY
60440: PUSH
60441: LD_INT 1
60443: ARRAY
60444: PPUSH
60445: LD_EXP 58
60449: PUSH
60450: LD_VAR 0 1
60454: ARRAY
60455: PUSH
60456: LD_VAR 0 2
60460: ARRAY
60461: PUSH
60462: LD_INT 2
60464: ARRAY
60465: PPUSH
60466: CALL_OW 458
60470: AND
60471: IFFALSE 60565
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60473: LD_EXP 58
60477: PUSH
60478: LD_VAR 0 1
60482: ARRAY
60483: PUSH
60484: LD_VAR 0 2
60488: ARRAY
60489: PUSH
60490: LD_INT 1
60492: ARRAY
60493: PPUSH
60494: LD_EXP 58
60498: PUSH
60499: LD_VAR 0 1
60503: ARRAY
60504: PUSH
60505: LD_VAR 0 2
60509: ARRAY
60510: PUSH
60511: LD_INT 2
60513: ARRAY
60514: PPUSH
60515: LD_VAR 0 3
60519: PPUSH
60520: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60524: LD_ADDR_EXP 58
60528: PUSH
60529: LD_EXP 58
60533: PPUSH
60534: LD_VAR 0 1
60538: PPUSH
60539: LD_EXP 58
60543: PUSH
60544: LD_VAR 0 1
60548: ARRAY
60549: PPUSH
60550: LD_VAR 0 2
60554: PPUSH
60555: CALL_OW 3
60559: PPUSH
60560: CALL_OW 1
60564: ST_TO_ADDR
// end ; end ;
60565: GO 60188
60567: POP
60568: POP
// end ;
60569: GO 60101
60571: POP
60572: POP
// end ;
60573: PPOPN 4
60575: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60576: LD_INT 0
60578: PPUSH
60579: PPUSH
60580: PPUSH
60581: PPUSH
// result := false ;
60582: LD_ADDR_VAR 0 4
60586: PUSH
60587: LD_INT 0
60589: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60590: LD_VAR 0 1
60594: PPUSH
60595: CALL_OW 264
60599: PUSH
60600: LD_INT 81
60602: EQUAL
60603: NOT
60604: IFFALSE 60608
// exit ;
60606: GO 60978
// side := GetSide ( unit ) ;
60608: LD_ADDR_VAR 0 6
60612: PUSH
60613: LD_VAR 0 1
60617: PPUSH
60618: CALL_OW 255
60622: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60623: LD_ADDR_VAR 0 5
60627: PUSH
60628: LD_EXP 57
60632: PPUSH
60633: LD_VAR 0 1
60637: PPUSH
60638: CALL 17714 0 2
60642: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60643: LD_EXP 58
60647: PUSH
60648: LD_VAR 0 5
60652: ARRAY
60653: PUSH
60654: LD_EXP 59
60658: GREATEREQUAL
60659: IFFALSE 60663
// exit ;
60661: GO 60978
// ComMoveXY ( unit , x , y ) ;
60663: LD_VAR 0 1
60667: PPUSH
60668: LD_VAR 0 2
60672: PPUSH
60673: LD_VAR 0 3
60677: PPUSH
60678: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60682: LD_INT 35
60684: PPUSH
60685: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60689: LD_VAR 0 1
60693: PPUSH
60694: LD_VAR 0 2
60698: PPUSH
60699: LD_VAR 0 3
60703: PPUSH
60704: CALL 49760 0 3
60708: NOT
60709: IFFALSE 60722
60711: PUSH
60712: LD_VAR 0 1
60716: PPUSH
60717: CALL_OW 314
60721: AND
60722: IFFALSE 60726
// exit ;
60724: GO 60978
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60726: LD_VAR 0 2
60730: PPUSH
60731: LD_VAR 0 3
60735: PPUSH
60736: CALL_OW 428
60740: PUSH
60741: LD_VAR 0 1
60745: EQUAL
60746: IFFALSE 60760
60748: PUSH
60749: LD_VAR 0 1
60753: PPUSH
60754: CALL_OW 314
60758: NOT
60759: AND
60760: IFFALSE 60682
// if MineAtPos ( x , y ) then
60762: LD_VAR 0 2
60766: PPUSH
60767: LD_VAR 0 3
60771: PPUSH
60772: CALL_OW 458
60776: IFFALSE 60780
// exit ;
60778: GO 60978
// if your_side = side then
60780: LD_OWVAR 2
60784: PUSH
60785: LD_VAR 0 6
60789: EQUAL
60790: IFFALSE 60809
// PlaySoundXY ( x , y , PlantMine ) ;
60792: LD_VAR 0 2
60796: PPUSH
60797: LD_VAR 0 3
60801: PPUSH
60802: LD_STRING PlantMine
60804: PPUSH
60805: CALL_OW 366
// repeat wait ( 1 ) ;
60809: LD_INT 1
60811: PPUSH
60812: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60816: LD_VAR 0 2
60820: PPUSH
60821: LD_VAR 0 3
60825: PPUSH
60826: LD_VAR 0 6
60830: PPUSH
60831: LD_INT 0
60833: PPUSH
60834: CALL_OW 454
60838: IFFALSE 60809
// if MineAtPos ( x , y ) then
60840: LD_VAR 0 2
60844: PPUSH
60845: LD_VAR 0 3
60849: PPUSH
60850: CALL_OW 458
60854: IFFALSE 60970
// begin for i in minerMinesList [ index ] do
60856: LD_ADDR_VAR 0 7
60860: PUSH
60861: LD_EXP 58
60865: PUSH
60866: LD_VAR 0 5
60870: ARRAY
60871: PUSH
60872: FOR_IN
60873: IFFALSE 60915
// if i [ 1 ] = x and i [ 2 ] = y then
60875: LD_VAR 0 7
60879: PUSH
60880: LD_INT 1
60882: ARRAY
60883: PUSH
60884: LD_VAR 0 2
60888: EQUAL
60889: IFFALSE 60907
60891: PUSH
60892: LD_VAR 0 7
60896: PUSH
60897: LD_INT 2
60899: ARRAY
60900: PUSH
60901: LD_VAR 0 3
60905: EQUAL
60906: AND
60907: IFFALSE 60913
// exit ;
60909: POP
60910: POP
60911: GO 60978
60913: GO 60872
60915: POP
60916: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60917: LD_ADDR_EXP 58
60921: PUSH
60922: LD_EXP 58
60926: PPUSH
60927: LD_VAR 0 5
60931: PUSH
60932: LD_EXP 58
60936: PUSH
60937: LD_VAR 0 5
60941: ARRAY
60942: PUSH
60943: LD_INT 1
60945: PLUS
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PPUSH
60951: LD_VAR 0 2
60955: PUSH
60956: LD_VAR 0 3
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PPUSH
60965: CALL 17931 0 3
60969: ST_TO_ADDR
// end ; result := true ;
60970: LD_ADDR_VAR 0 4
60974: PUSH
60975: LD_INT 1
60977: ST_TO_ADDR
// end ;
60978: LD_VAR 0 4
60982: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60983: LD_INT 0
60985: PPUSH
60986: PPUSH
60987: PPUSH
// if not unit in minersList then
60988: LD_VAR 0 1
60992: PUSH
60993: LD_EXP 57
60997: IN
60998: NOT
60999: IFFALSE 61003
// exit ;
61001: GO 61210
// index := GetElementIndex ( minersList , unit ) ;
61003: LD_ADDR_VAR 0 6
61007: PUSH
61008: LD_EXP 57
61012: PPUSH
61013: LD_VAR 0 1
61017: PPUSH
61018: CALL 17714 0 2
61022: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61023: LD_ADDR_VAR 0 5
61027: PUSH
61028: DOUBLE
61029: LD_EXP 58
61033: PUSH
61034: LD_VAR 0 6
61038: ARRAY
61039: INC
61040: ST_TO_ADDR
61041: LD_INT 1
61043: PUSH
61044: FOR_DOWNTO
61045: IFFALSE 61208
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61047: LD_EXP 58
61051: PUSH
61052: LD_VAR 0 6
61056: ARRAY
61057: PUSH
61058: LD_VAR 0 5
61062: ARRAY
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PPUSH
61068: LD_EXP 58
61072: PUSH
61073: LD_VAR 0 6
61077: ARRAY
61078: PUSH
61079: LD_VAR 0 5
61083: ARRAY
61084: PUSH
61085: LD_INT 2
61087: ARRAY
61088: PPUSH
61089: LD_VAR 0 2
61093: PPUSH
61094: LD_VAR 0 3
61098: PPUSH
61099: CALL_OW 298
61103: PUSH
61104: LD_INT 6
61106: LESS
61107: IFFALSE 61206
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61109: LD_EXP 58
61113: PUSH
61114: LD_VAR 0 6
61118: ARRAY
61119: PUSH
61120: LD_VAR 0 5
61124: ARRAY
61125: PUSH
61126: LD_INT 1
61128: ARRAY
61129: PPUSH
61130: LD_EXP 58
61134: PUSH
61135: LD_VAR 0 6
61139: ARRAY
61140: PUSH
61141: LD_VAR 0 5
61145: ARRAY
61146: PUSH
61147: LD_INT 2
61149: ARRAY
61150: PPUSH
61151: LD_VAR 0 1
61155: PPUSH
61156: CALL_OW 255
61160: PPUSH
61161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61165: LD_ADDR_EXP 58
61169: PUSH
61170: LD_EXP 58
61174: PPUSH
61175: LD_VAR 0 6
61179: PPUSH
61180: LD_EXP 58
61184: PUSH
61185: LD_VAR 0 6
61189: ARRAY
61190: PPUSH
61191: LD_VAR 0 5
61195: PPUSH
61196: CALL_OW 3
61200: PPUSH
61201: CALL_OW 1
61205: ST_TO_ADDR
// end ; end ;
61206: GO 61044
61208: POP
61209: POP
// end ;
61210: LD_VAR 0 4
61214: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61215: LD_INT 0
61217: PPUSH
61218: PPUSH
61219: PPUSH
61220: PPUSH
61221: PPUSH
61222: PPUSH
61223: PPUSH
61224: PPUSH
61225: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61226: LD_VAR 0 1
61230: PPUSH
61231: CALL_OW 264
61235: PUSH
61236: LD_INT 81
61238: EQUAL
61239: NOT
61240: IFTRUE 61255
61242: PUSH
61243: LD_VAR 0 1
61247: PUSH
61248: LD_EXP 57
61252: IN
61253: NOT
61254: OR
61255: IFFALSE 61259
// exit ;
61257: GO 61585
// index := GetElementIndex ( minersList , unit ) ;
61259: LD_ADDR_VAR 0 6
61263: PUSH
61264: LD_EXP 57
61268: PPUSH
61269: LD_VAR 0 1
61273: PPUSH
61274: CALL 17714 0 2
61278: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61279: LD_ADDR_VAR 0 8
61283: PUSH
61284: LD_EXP 59
61288: PUSH
61289: LD_EXP 58
61293: PUSH
61294: LD_VAR 0 6
61298: ARRAY
61299: MINUS
61300: ST_TO_ADDR
// if not minesFreeAmount then
61301: LD_VAR 0 8
61305: NOT
61306: IFFALSE 61310
// exit ;
61308: GO 61585
// tmp := [ ] ;
61310: LD_ADDR_VAR 0 7
61314: PUSH
61315: EMPTY
61316: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61317: LD_ADDR_VAR 0 5
61321: PUSH
61322: DOUBLE
61323: LD_INT 1
61325: DEC
61326: ST_TO_ADDR
61327: LD_VAR 0 8
61331: PUSH
61332: FOR_TO
61333: IFFALSE 61532
// begin _d := rand ( 0 , 5 ) ;
61335: LD_ADDR_VAR 0 11
61339: PUSH
61340: LD_INT 0
61342: PPUSH
61343: LD_INT 5
61345: PPUSH
61346: CALL_OW 12
61350: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61351: LD_ADDR_VAR 0 12
61355: PUSH
61356: LD_INT 2
61358: PPUSH
61359: LD_INT 6
61361: PPUSH
61362: CALL_OW 12
61366: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61367: LD_ADDR_VAR 0 9
61371: PUSH
61372: LD_VAR 0 2
61376: PPUSH
61377: LD_VAR 0 11
61381: PPUSH
61382: LD_VAR 0 12
61386: PPUSH
61387: CALL_OW 272
61391: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61392: LD_ADDR_VAR 0 10
61396: PUSH
61397: LD_VAR 0 3
61401: PPUSH
61402: LD_VAR 0 11
61406: PPUSH
61407: LD_VAR 0 12
61411: PPUSH
61412: CALL_OW 273
61416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61417: LD_VAR 0 9
61421: PPUSH
61422: LD_VAR 0 10
61426: PPUSH
61427: CALL_OW 488
61431: IFFALSE 61455
61433: PUSH
61434: LD_VAR 0 9
61438: PUSH
61439: LD_VAR 0 10
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_VAR 0 7
61452: IN
61453: NOT
61454: AND
61455: IFFALSE 61474
61457: PUSH
61458: LD_VAR 0 9
61462: PPUSH
61463: LD_VAR 0 10
61467: PPUSH
61468: CALL_OW 458
61472: NOT
61473: AND
61474: IFFALSE 61516
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61476: LD_ADDR_VAR 0 7
61480: PUSH
61481: LD_VAR 0 7
61485: PPUSH
61486: LD_VAR 0 7
61490: PUSH
61491: LD_INT 1
61493: PLUS
61494: PPUSH
61495: LD_VAR 0 9
61499: PUSH
61500: LD_VAR 0 10
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PPUSH
61509: CALL_OW 1
61513: ST_TO_ADDR
61514: GO 61530
// i := i - 1 ;
61516: LD_ADDR_VAR 0 5
61520: PUSH
61521: LD_VAR 0 5
61525: PUSH
61526: LD_INT 1
61528: MINUS
61529: ST_TO_ADDR
// end ;
61530: GO 61332
61532: POP
61533: POP
// for i in tmp do
61534: LD_ADDR_VAR 0 5
61538: PUSH
61539: LD_VAR 0 7
61543: PUSH
61544: FOR_IN
61545: IFFALSE 61583
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61547: LD_VAR 0 1
61551: PPUSH
61552: LD_VAR 0 5
61556: PUSH
61557: LD_INT 1
61559: ARRAY
61560: PPUSH
61561: LD_VAR 0 5
61565: PUSH
61566: LD_INT 2
61568: ARRAY
61569: PPUSH
61570: CALL 60576 0 3
61574: NOT
61575: IFFALSE 61581
// exit ;
61577: POP
61578: POP
61579: GO 61585
61581: GO 61544
61583: POP
61584: POP
// end ;
61585: LD_VAR 0 4
61589: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61590: LD_INT 0
61592: PPUSH
61593: PPUSH
61594: PPUSH
61595: PPUSH
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
61600: PPUSH
// if GetClass ( unit ) <> class_sniper then
61601: LD_VAR 0 1
61605: PPUSH
61606: CALL_OW 257
61610: PUSH
61611: LD_INT 5
61613: NONEQUAL
61614: IFFALSE 61618
// exit ;
61616: GO 62088
// dist := 8 ;
61618: LD_ADDR_VAR 0 5
61622: PUSH
61623: LD_INT 8
61625: ST_TO_ADDR
// viewRange := 12 ;
61626: LD_ADDR_VAR 0 8
61630: PUSH
61631: LD_INT 12
61633: ST_TO_ADDR
// side := GetSide ( unit ) ;
61634: LD_ADDR_VAR 0 6
61638: PUSH
61639: LD_VAR 0 1
61643: PPUSH
61644: CALL_OW 255
61648: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61649: LD_INT 61
61651: PPUSH
61652: LD_VAR 0 6
61656: PPUSH
61657: CALL_OW 321
61661: PUSH
61662: LD_INT 2
61664: EQUAL
61665: IFFALSE 61675
// viewRange := 16 ;
61667: LD_ADDR_VAR 0 8
61671: PUSH
61672: LD_INT 16
61674: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61675: LD_VAR 0 1
61679: PPUSH
61680: LD_VAR 0 2
61684: PPUSH
61685: LD_VAR 0 3
61689: PPUSH
61690: CALL_OW 297
61694: PUSH
61695: LD_VAR 0 5
61699: GREATER
61700: IFFALSE 61779
// begin ComMoveXY ( unit , x , y ) ;
61702: LD_VAR 0 1
61706: PPUSH
61707: LD_VAR 0 2
61711: PPUSH
61712: LD_VAR 0 3
61716: PPUSH
61717: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61721: LD_INT 35
61723: PPUSH
61724: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61728: LD_VAR 0 1
61732: PPUSH
61733: LD_VAR 0 2
61737: PPUSH
61738: LD_VAR 0 3
61742: PPUSH
61743: CALL 49760 0 3
61747: NOT
61748: IFFALSE 61752
// exit ;
61750: GO 62088
// until GetDistUnitXY ( unit , x , y ) < dist ;
61752: LD_VAR 0 1
61756: PPUSH
61757: LD_VAR 0 2
61761: PPUSH
61762: LD_VAR 0 3
61766: PPUSH
61767: CALL_OW 297
61771: PUSH
61772: LD_VAR 0 5
61776: LESS
61777: IFFALSE 61721
// end ; ComTurnXY ( unit , x , y ) ;
61779: LD_VAR 0 1
61783: PPUSH
61784: LD_VAR 0 2
61788: PPUSH
61789: LD_VAR 0 3
61793: PPUSH
61794: CALL_OW 118
// repeat if Multiplayer then
61798: LD_OWVAR 4
61802: IFFALSE 61813
// wait ( 35 ) else
61804: LD_INT 35
61806: PPUSH
61807: CALL_OW 67
61811: GO 61820
// wait ( 5 ) ;
61813: LD_INT 5
61815: PPUSH
61816: CALL_OW 67
// _d := GetDir ( unit ) ;
61820: LD_ADDR_VAR 0 11
61824: PUSH
61825: LD_VAR 0 1
61829: PPUSH
61830: CALL_OW 254
61834: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61835: LD_ADDR_VAR 0 7
61839: PUSH
61840: LD_VAR 0 1
61844: PPUSH
61845: CALL_OW 250
61849: PPUSH
61850: LD_VAR 0 1
61854: PPUSH
61855: CALL_OW 251
61859: PPUSH
61860: LD_VAR 0 2
61864: PPUSH
61865: LD_VAR 0 3
61869: PPUSH
61870: CALL 52396 0 4
61874: ST_TO_ADDR
// until dir = _d ;
61875: LD_VAR 0 7
61879: PUSH
61880: LD_VAR 0 11
61884: EQUAL
61885: IFFALSE 61798
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61887: LD_ADDR_VAR 0 9
61891: PUSH
61892: LD_VAR 0 1
61896: PPUSH
61897: CALL_OW 250
61901: PPUSH
61902: LD_VAR 0 7
61906: PPUSH
61907: LD_VAR 0 5
61911: PPUSH
61912: CALL_OW 272
61916: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61917: LD_ADDR_VAR 0 10
61921: PUSH
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 251
61931: PPUSH
61932: LD_VAR 0 7
61936: PPUSH
61937: LD_VAR 0 5
61941: PPUSH
61942: CALL_OW 273
61946: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61947: LD_VAR 0 9
61951: PPUSH
61952: LD_VAR 0 10
61956: PPUSH
61957: CALL_OW 488
61961: NOT
61962: IFFALSE 61966
// exit ;
61964: GO 62088
// ComAnimCustom ( unit , 1 ) ;
61966: LD_VAR 0 1
61970: PPUSH
61971: LD_INT 1
61973: PPUSH
61974: CALL_OW 592
// p := 0 ;
61978: LD_ADDR_VAR 0 12
61982: PUSH
61983: LD_INT 0
61985: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61986: LD_VAR 0 9
61990: PPUSH
61991: LD_VAR 0 10
61995: PPUSH
61996: LD_VAR 0 6
62000: PPUSH
62001: LD_VAR 0 8
62005: PPUSH
62006: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62010: LD_INT 35
62012: PPUSH
62013: CALL_OW 67
// p := Inc ( p ) ;
62017: LD_ADDR_VAR 0 12
62021: PUSH
62022: LD_VAR 0 12
62026: PPUSH
62027: CALL 52352 0 1
62031: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62032: LD_VAR 0 12
62036: PUSH
62037: LD_INT 3
62039: EQUAL
62040: IFTRUE 62054
62042: PUSH
62043: LD_VAR 0 1
62047: PPUSH
62048: CALL_OW 302
62052: NOT
62053: OR
62054: IFTRUE 62067
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: CALL_OW 301
62066: OR
62067: IFFALSE 62010
// RemoveSeeing ( _x , _y , side ) ;
62069: LD_VAR 0 9
62073: PPUSH
62074: LD_VAR 0 10
62078: PPUSH
62079: LD_VAR 0 6
62083: PPUSH
62084: CALL_OW 331
// end ;
62088: LD_VAR 0 4
62092: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
62100: PPUSH
62101: PPUSH
62102: PPUSH
62103: PPUSH
62104: PPUSH
62105: PPUSH
// if not unit then
62106: LD_VAR 0 1
62110: NOT
62111: IFFALSE 62115
// exit ;
62113: GO 62386
// side := GetSide ( unit ) ;
62115: LD_ADDR_VAR 0 3
62119: PUSH
62120: LD_VAR 0 1
62124: PPUSH
62125: CALL_OW 255
62129: ST_TO_ADDR
// x := GetX ( unit ) ;
62130: LD_ADDR_VAR 0 5
62134: PUSH
62135: LD_VAR 0 1
62139: PPUSH
62140: CALL_OW 250
62144: ST_TO_ADDR
// y := GetY ( unit ) ;
62145: LD_ADDR_VAR 0 6
62149: PUSH
62150: LD_VAR 0 1
62154: PPUSH
62155: CALL_OW 251
62159: ST_TO_ADDR
// r := 8 ;
62160: LD_ADDR_VAR 0 4
62164: PUSH
62165: LD_INT 8
62167: ST_TO_ADDR
// if x - r < 0 then
62168: LD_VAR 0 5
62172: PUSH
62173: LD_VAR 0 4
62177: MINUS
62178: PUSH
62179: LD_INT 0
62181: LESS
62182: IFFALSE 62194
// min_x := 0 else
62184: LD_ADDR_VAR 0 7
62188: PUSH
62189: LD_INT 0
62191: ST_TO_ADDR
62192: GO 62210
// min_x := x - r ;
62194: LD_ADDR_VAR 0 7
62198: PUSH
62199: LD_VAR 0 5
62203: PUSH
62204: LD_VAR 0 4
62208: MINUS
62209: ST_TO_ADDR
// if y - r < 0 then
62210: LD_VAR 0 6
62214: PUSH
62215: LD_VAR 0 4
62219: MINUS
62220: PUSH
62221: LD_INT 0
62223: LESS
62224: IFFALSE 62236
// min_y := 0 else
62226: LD_ADDR_VAR 0 8
62230: PUSH
62231: LD_INT 0
62233: ST_TO_ADDR
62234: GO 62252
// min_y := y - r ;
62236: LD_ADDR_VAR 0 8
62240: PUSH
62241: LD_VAR 0 6
62245: PUSH
62246: LD_VAR 0 4
62250: MINUS
62251: ST_TO_ADDR
// max_x := x + r ;
62252: LD_ADDR_VAR 0 9
62256: PUSH
62257: LD_VAR 0 5
62261: PUSH
62262: LD_VAR 0 4
62266: PLUS
62267: ST_TO_ADDR
// max_y := y + r ;
62268: LD_ADDR_VAR 0 10
62272: PUSH
62273: LD_VAR 0 6
62277: PUSH
62278: LD_VAR 0 4
62282: PLUS
62283: ST_TO_ADDR
// for _x = min_x to max_x do
62284: LD_ADDR_VAR 0 11
62288: PUSH
62289: DOUBLE
62290: LD_VAR 0 7
62294: DEC
62295: ST_TO_ADDR
62296: LD_VAR 0 9
62300: PUSH
62301: FOR_TO
62302: IFFALSE 62384
// for _y = min_y to max_y do
62304: LD_ADDR_VAR 0 12
62308: PUSH
62309: DOUBLE
62310: LD_VAR 0 8
62314: DEC
62315: ST_TO_ADDR
62316: LD_VAR 0 10
62320: PUSH
62321: FOR_TO
62322: IFFALSE 62380
// begin if not ValidHex ( _x , _y ) then
62324: LD_VAR 0 11
62328: PPUSH
62329: LD_VAR 0 12
62333: PPUSH
62334: CALL_OW 488
62338: NOT
62339: IFFALSE 62343
// continue ;
62341: GO 62321
// if MineAtPos ( _x , _y ) then
62343: LD_VAR 0 11
62347: PPUSH
62348: LD_VAR 0 12
62352: PPUSH
62353: CALL_OW 458
62357: IFFALSE 62378
// ViewMineAtPos ( _x , _y , side ) ;
62359: LD_VAR 0 11
62363: PPUSH
62364: LD_VAR 0 12
62368: PPUSH
62369: LD_VAR 0 3
62373: PPUSH
62374: CALL_OW 457
// end ;
62378: GO 62321
62380: POP
62381: POP
62382: GO 62301
62384: POP
62385: POP
// end ;
62386: LD_VAR 0 2
62390: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
// if not units then
62399: LD_VAR 0 1
62403: NOT
62404: IFFALSE 62408
// exit ;
62406: GO 62838
// scaners := [ ] ;
62408: LD_ADDR_VAR 0 6
62412: PUSH
62413: EMPTY
62414: ST_TO_ADDR
// for i in units do
62415: LD_ADDR_VAR 0 3
62419: PUSH
62420: LD_VAR 0 1
62424: PUSH
62425: FOR_IN
62426: IFFALSE 62583
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62428: LD_VAR 0 3
62432: PPUSH
62433: CALL_OW 264
62437: PUSH
62438: LD_INT 11
62440: NONEQUAL
62441: IFTRUE 62455
62443: PUSH
62444: LD_VAR 0 3
62448: PPUSH
62449: CALL_OW 302
62453: NOT
62454: OR
62455: IFTRUE 62472
62457: PUSH
62458: LD_VAR 0 3
62462: PPUSH
62463: CALL_OW 110
62467: PUSH
62468: LD_INT 502
62470: EQUAL
62471: OR
62472: IFFALSE 62476
// continue ;
62474: GO 62425
// ComStop ( i ) ;
62476: LD_VAR 0 3
62480: PPUSH
62481: CALL_OW 141
// x := GetX ( i ) ;
62485: LD_ADDR_VAR 0 4
62489: PUSH
62490: LD_VAR 0 3
62494: PPUSH
62495: CALL_OW 250
62499: ST_TO_ADDR
// y := GetY ( i ) ;
62500: LD_ADDR_VAR 0 5
62504: PUSH
62505: LD_VAR 0 3
62509: PPUSH
62510: CALL_OW 251
62514: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62515: LD_VAR 0 3
62519: PPUSH
62520: CALL_OW 255
62524: PUSH
62525: LD_OWVAR 2
62529: EQUAL
62530: IFFALSE 62549
// PlaySoundXY ( x , y , mineDetector ) ;
62532: LD_VAR 0 4
62536: PPUSH
62537: LD_VAR 0 5
62541: PPUSH
62542: LD_STRING mineDetector
62544: PPUSH
62545: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62549: LD_ADDR_VAR 0 6
62553: PUSH
62554: LD_VAR 0 6
62558: PPUSH
62559: LD_VAR 0 3
62563: PPUSH
62564: CALL 50979 0 2
62568: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62569: LD_VAR 0 3
62573: PPUSH
62574: LD_INT 502
62576: PPUSH
62577: CALL_OW 109
// end ;
62581: GO 62425
62583: POP
62584: POP
// if not scaners then
62585: LD_VAR 0 6
62589: NOT
62590: IFFALSE 62594
// exit ;
62592: GO 62838
// wait ( 3 ) ;
62594: LD_INT 3
62596: PPUSH
62597: CALL_OW 67
// timer := 6 ;
62601: LD_ADDR_VAR 0 7
62605: PUSH
62606: LD_INT 6
62608: ST_TO_ADDR
// repeat for i in scaners do
62609: LD_ADDR_VAR 0 3
62613: PUSH
62614: LD_VAR 0 6
62618: PUSH
62619: FOR_IN
62620: IFFALSE 62736
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62622: LD_VAR 0 3
62626: PPUSH
62627: CALL_OW 302
62631: NOT
62632: IFTRUE 62645
62634: PUSH
62635: LD_VAR 0 3
62639: PPUSH
62640: CALL_OW 314
62644: OR
62645: IFTRUE 62676
62647: PUSH
62648: LD_VAR 0 3
62652: PPUSH
62653: CALL_OW 263
62657: PUSH
62658: LD_INT 1
62660: EQUAL
62661: IFFALSE 62675
62663: PUSH
62664: LD_VAR 0 3
62668: PPUSH
62669: CALL_OW 311
62673: NOT
62674: AND
62675: OR
62676: IFFALSE 62720
// begin SetUnitDisplayNumber ( i , 0 ) ;
62678: LD_VAR 0 3
62682: PPUSH
62683: LD_INT 0
62685: PPUSH
62686: CALL_OW 505
// SetTag ( i , 0 ) ;
62690: LD_VAR 0 3
62694: PPUSH
62695: LD_INT 0
62697: PPUSH
62698: CALL_OW 109
// scaners := scaners diff i ;
62702: LD_ADDR_VAR 0 6
62706: PUSH
62707: LD_VAR 0 6
62711: PUSH
62712: LD_VAR 0 3
62716: DIFF
62717: ST_TO_ADDR
// continue ;
62718: GO 62619
// end ; SetUnitDisplayNumber ( i , timer ) ;
62720: LD_VAR 0 3
62724: PPUSH
62725: LD_VAR 0 7
62729: PPUSH
62730: CALL_OW 505
// end ;
62734: GO 62619
62736: POP
62737: POP
// if not scaners then
62738: LD_VAR 0 6
62742: NOT
62743: IFFALSE 62747
// exit ;
62745: GO 62838
// timer := Dec ( timer ) ;
62747: LD_ADDR_VAR 0 7
62751: PUSH
62752: LD_VAR 0 7
62756: PPUSH
62757: CALL 52374 0 1
62761: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62762: LD_INT 35
62764: PPUSH
62765: CALL_OW 67
// until timer = 0 ;
62769: LD_VAR 0 7
62773: PUSH
62774: LD_INT 0
62776: EQUAL
62777: IFFALSE 62609
// if not scaners then
62779: LD_VAR 0 6
62783: NOT
62784: IFFALSE 62788
// exit ;
62786: GO 62838
// for i in scaners do
62788: LD_ADDR_VAR 0 3
62792: PUSH
62793: LD_VAR 0 6
62797: PUSH
62798: FOR_IN
62799: IFFALSE 62836
// begin SetUnitDisplayNumber ( i , 0 ) ;
62801: LD_VAR 0 3
62805: PPUSH
62806: LD_INT 0
62808: PPUSH
62809: CALL_OW 505
// SetTag ( i , 0 ) ;
62813: LD_VAR 0 3
62817: PPUSH
62818: LD_INT 0
62820: PPUSH
62821: CALL_OW 109
// RevealDetectorMine ( i ) ;
62825: LD_VAR 0 3
62829: PPUSH
62830: CALL 62093 0 1
// end ;
62834: GO 62798
62836: POP
62837: POP
// end ;
62838: LD_VAR 0 2
62842: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62843: LD_INT 0
62845: PPUSH
// if p1 = mine_detector_mode then
62846: LD_VAR 0 2
62850: PUSH
62851: LD_INT 103
62853: EQUAL
62854: IFFALSE 62865
// DetectMine ( units ) ;
62856: LD_VAR 0 1
62860: PPUSH
62861: CALL 62391 0 1
// end ; end_of_file
62865: LD_VAR 0 7
62869: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62870: PPOPN 6
62872: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62873: LD_INT 0
62875: PPUSH
// begin if not units then
62876: LD_VAR 0 1
62880: NOT
62881: IFFALSE 62885
// exit ;
62883: GO 62919
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62885: LD_VAR 0 1
62889: PPUSH
62890: LD_VAR 0 2
62894: PPUSH
62895: LD_VAR 0 3
62899: PPUSH
62900: LD_VAR 0 4
62904: PPUSH
62905: LD_VAR 0 5
62909: PPUSH
62910: LD_VAR 0 6
62914: PPUSH
62915: CALL 62843 0 6
// end ;
62919: PPOPN 7
62921: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62922: LD_EXP 3
62926: PUSH
62927: LD_INT 4
62929: EQUAL
62930: IFFALSE 62966
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62932: LD_STRING setGameDifficulty(
62934: PUSH
62935: LD_OWVAR 67
62939: STR
62940: PUSH
62941: LD_STRING )
62943: STR
62944: PPUSH
62945: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62949: LD_STRING displayDifficulty(
62951: PUSH
62952: LD_OWVAR 67
62956: STR
62957: PUSH
62958: LD_STRING )
62960: STR
62961: PPUSH
62962: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62966: CALL 62995 0 0
// end ; end_of_file
62970: PPOPN 1
62972: END
// every 0 0$1 do
62973: GO 62975
62975: DISABLE
// begin enable ;
62976: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62977: LD_STRING updateTimer(
62979: PUSH
62980: LD_OWVAR 1
62984: STR
62985: PUSH
62986: LD_STRING );
62988: STR
62989: PPUSH
62990: CALL_OW 559
// end ;
62994: END
// export function SOS_MapStart ( ) ; begin
62995: LD_INT 0
62997: PPUSH
// UpdateFactoryWaypoints ( ) ;
62998: CALL 63929 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63002: CALL 64181 0 0
// ParseMultiDataToLua ( ) ;
63006: CALL 64328 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63010: LD_STRING setSpecLogoNumber(
63012: PUSH
63013: LD_INT 2
63015: STR
63016: PUSH
63017: LD_STRING ,
63019: STR
63020: PUSH
63021: LD_INT 1
63023: STR
63024: PUSH
63025: LD_STRING )
63027: STR
63028: PPUSH
63029: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63033: LD_STRING setSpecLogoNumber(
63035: PUSH
63036: LD_INT 3
63038: STR
63039: PUSH
63040: LD_STRING ,
63042: STR
63043: PUSH
63044: LD_INT 2
63046: STR
63047: PUSH
63048: LD_STRING )
63050: STR
63051: PPUSH
63052: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63056: LD_STRING setSpecLogoNumber(
63058: PUSH
63059: LD_INT 4
63061: STR
63062: PUSH
63063: LD_STRING ,
63065: STR
63066: PUSH
63067: LD_INT 3
63069: STR
63070: PUSH
63071: LD_STRING )
63073: STR
63074: PPUSH
63075: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63079: LD_STRING setSpecLogoNumber(
63081: PUSH
63082: LD_INT 5
63084: STR
63085: PUSH
63086: LD_STRING ,
63088: STR
63089: PUSH
63090: LD_INT 4
63092: STR
63093: PUSH
63094: LD_STRING )
63096: STR
63097: PPUSH
63098: CALL_OW 559
// end ;
63102: LD_VAR 0 1
63106: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63107: LD_INT 0
63109: PPUSH
63110: PPUSH
63111: PPUSH
63112: PPUSH
63113: PPUSH
63114: PPUSH
63115: PPUSH
63116: PPUSH
63117: PPUSH
// for i := 1 to 8 do
63118: LD_ADDR_VAR 0 2
63122: PUSH
63123: DOUBLE
63124: LD_INT 1
63126: DEC
63127: ST_TO_ADDR
63128: LD_INT 8
63130: PUSH
63131: FOR_TO
63132: IFFALSE 63517
// begin if mpSidePositions [ i ] then
63134: LD_EXP 7
63138: PUSH
63139: LD_VAR 0 2
63143: ARRAY
63144: IFFALSE 63515
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63146: LD_ADDR_VAR 0 7
63150: PUSH
63151: LD_INT 22
63153: PUSH
63154: LD_VAR 0 2
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 21
63165: PUSH
63166: LD_INT 1
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PPUSH
63177: CALL_OW 69
63181: PPUSH
63182: CALL 15013 0 1
63186: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63187: LD_ADDR_VAR 0 9
63191: PUSH
63192: LD_INT 22
63194: PUSH
63195: LD_VAR 0 2
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 30
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 30
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: LIST
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PPUSH
63236: CALL_OW 69
63240: ST_TO_ADDR
// crates := 0 ;
63241: LD_ADDR_VAR 0 4
63245: PUSH
63246: LD_INT 0
63248: ST_TO_ADDR
// oil := 0 ;
63249: LD_ADDR_VAR 0 5
63253: PUSH
63254: LD_INT 0
63256: ST_TO_ADDR
// sib := 0 ;
63257: LD_ADDR_VAR 0 6
63261: PUSH
63262: LD_INT 0
63264: ST_TO_ADDR
// if bases then
63265: LD_VAR 0 9
63269: IFFALSE 63375
// begin for j in bases do
63271: LD_ADDR_VAR 0 3
63275: PUSH
63276: LD_VAR 0 9
63280: PUSH
63281: FOR_IN
63282: IFFALSE 63373
// begin base := GetBase ( j ) ;
63284: LD_ADDR_VAR 0 8
63288: PUSH
63289: LD_VAR 0 3
63293: PPUSH
63294: CALL_OW 274
63298: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63299: LD_ADDR_VAR 0 4
63303: PUSH
63304: LD_VAR 0 4
63308: PUSH
63309: LD_VAR 0 8
63313: PPUSH
63314: LD_INT 1
63316: PPUSH
63317: CALL_OW 275
63321: PLUS
63322: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63323: LD_ADDR_VAR 0 5
63327: PUSH
63328: LD_VAR 0 5
63332: PUSH
63333: LD_VAR 0 8
63337: PPUSH
63338: LD_INT 2
63340: PPUSH
63341: CALL_OW 275
63345: PLUS
63346: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63347: LD_ADDR_VAR 0 6
63351: PUSH
63352: LD_VAR 0 6
63356: PUSH
63357: LD_VAR 0 8
63361: PPUSH
63362: LD_INT 3
63364: PPUSH
63365: CALL_OW 275
63369: PLUS
63370: ST_TO_ADDR
// end ;
63371: GO 63281
63373: POP
63374: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63375: LD_STRING setSpecText(
63377: PUSH
63378: LD_VAR 0 2
63382: STR
63383: PUSH
63384: LD_STRING ,
63386: STR
63387: PUSH
63388: LD_INT 2
63390: STR
63391: PUSH
63392: LD_STRING ,
63394: STR
63395: PUSH
63396: LD_VAR 0 4
63400: STR
63401: PUSH
63402: LD_STRING )
63404: STR
63405: PPUSH
63406: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63410: LD_STRING setSpecText(
63412: PUSH
63413: LD_VAR 0 2
63417: STR
63418: PUSH
63419: LD_STRING ,
63421: STR
63422: PUSH
63423: LD_INT 3
63425: STR
63426: PUSH
63427: LD_STRING ,
63429: STR
63430: PUSH
63431: LD_VAR 0 5
63435: STR
63436: PUSH
63437: LD_STRING )
63439: STR
63440: PPUSH
63441: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63445: LD_STRING setSpecText(
63447: PUSH
63448: LD_VAR 0 2
63452: STR
63453: PUSH
63454: LD_STRING ,
63456: STR
63457: PUSH
63458: LD_INT 4
63460: STR
63461: PUSH
63462: LD_STRING ,
63464: STR
63465: PUSH
63466: LD_VAR 0 6
63470: STR
63471: PUSH
63472: LD_STRING )
63474: STR
63475: PPUSH
63476: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63480: LD_STRING setSpecText(
63482: PUSH
63483: LD_VAR 0 2
63487: STR
63488: PUSH
63489: LD_STRING ,
63491: STR
63492: PUSH
63493: LD_INT 5
63495: STR
63496: PUSH
63497: LD_STRING ,
63499: STR
63500: PUSH
63501: LD_VAR 0 7
63505: STR
63506: PUSH
63507: LD_STRING )
63509: STR
63510: PPUSH
63511: CALL_OW 559
// end ; end ;
63515: GO 63131
63517: POP
63518: POP
// end ;
63519: LD_VAR 0 1
63523: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63524: LD_INT 2
63526: PUSH
63527: LD_INT 30
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 30
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: PPUSH
63552: CALL_OW 69
63556: IFFALSE 63566
63558: GO 63560
63560: DISABLE
// begin enable ;
63561: ENABLE
// UpdateSpectatorBar ;
63562: CALL 63107 0 0
// end ;
63566: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63567: LD_INT 0
63569: PPUSH
// end ;
63570: LD_VAR 0 12
63574: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63575: LD_INT 0
63577: PPUSH
63578: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63579: LD_VAR 0 1
63583: NOT
63584: IFTRUE 63603
63586: PUSH
63587: LD_VAR 0 2
63591: PPUSH
63592: LD_VAR 0 3
63596: PPUSH
63597: CALL_OW 488
63601: NOT
63602: OR
63603: IFTRUE 63638
63605: PUSH
63606: LD_VAR 0 1
63610: PPUSH
63611: CALL_OW 266
63615: PUSH
63616: LD_INT 3
63618: NONEQUAL
63619: IFFALSE 63637
63621: PUSH
63622: LD_VAR 0 1
63626: PPUSH
63627: CALL_OW 247
63631: PUSH
63632: LD_INT 1
63634: EQUAL
63635: NOT
63636: AND
63637: OR
63638: IFFALSE 63642
// exit ;
63640: GO 63924
// if GetType ( factory ) = unit_human then
63642: LD_VAR 0 1
63646: PPUSH
63647: CALL_OW 247
63651: PUSH
63652: LD_INT 1
63654: EQUAL
63655: IFFALSE 63672
// factory := IsInUnit ( factory ) ;
63657: LD_ADDR_VAR 0 1
63661: PUSH
63662: LD_VAR 0 1
63666: PPUSH
63667: CALL_OW 310
63671: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63672: LD_VAR 0 1
63676: PPUSH
63677: CALL_OW 266
63681: PUSH
63682: LD_INT 3
63684: NONEQUAL
63685: IFFALSE 63689
// exit ;
63687: GO 63924
// for i := 1 to Count ( factoryWaypoints ) do
63689: LD_ADDR_VAR 0 5
63693: PUSH
63694: DOUBLE
63695: LD_INT 1
63697: DEC
63698: ST_TO_ADDR
63699: LD_EXP 60
63703: PPUSH
63704: CALL 15013 0 1
63708: PUSH
63709: FOR_TO
63710: IFFALSE 63872
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63712: LD_VAR 0 2
63716: PPUSH
63717: LD_VAR 0 3
63721: PPUSH
63722: CALL_OW 428
63726: PUSH
63727: LD_EXP 60
63731: PUSH
63732: LD_VAR 0 5
63736: ARRAY
63737: PUSH
63738: LD_INT 2
63740: ARRAY
63741: EQUAL
63742: IFFALSE 63774
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63744: LD_ADDR_EXP 60
63748: PUSH
63749: LD_EXP 60
63753: PPUSH
63754: LD_VAR 0 5
63758: PPUSH
63759: CALL_OW 3
63763: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63764: CALL 63929 0 0
// exit ;
63768: POP
63769: POP
63770: GO 63924
// end else
63772: GO 63870
// if factory = factoryWaypoints [ i ] [ 2 ] then
63774: LD_VAR 0 1
63778: PUSH
63779: LD_EXP 60
63783: PUSH
63784: LD_VAR 0 5
63788: ARRAY
63789: PUSH
63790: LD_INT 2
63792: ARRAY
63793: EQUAL
63794: IFFALSE 63870
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63796: LD_ADDR_EXP 60
63800: PUSH
63801: LD_EXP 60
63805: PPUSH
63806: LD_VAR 0 5
63810: PPUSH
63811: CALL_OW 3
63815: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63816: LD_ADDR_EXP 60
63820: PUSH
63821: LD_EXP 60
63825: PPUSH
63826: LD_VAR 0 1
63830: PPUSH
63831: CALL_OW 255
63835: PUSH
63836: LD_VAR 0 1
63840: PUSH
63841: LD_VAR 0 2
63845: PUSH
63846: LD_VAR 0 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: PPUSH
63857: CALL 50979 0 2
63861: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63862: CALL 63929 0 0
// exit ;
63866: POP
63867: POP
63868: GO 63924
// end ; end ;
63870: GO 63709
63872: POP
63873: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63874: LD_ADDR_EXP 60
63878: PUSH
63879: LD_EXP 60
63883: PPUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: CALL_OW 255
63893: PUSH
63894: LD_VAR 0 1
63898: PUSH
63899: LD_VAR 0 2
63903: PUSH
63904: LD_VAR 0 3
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: PPUSH
63915: CALL 50979 0 2
63919: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63920: CALL 63929 0 0
// end ;
63924: LD_VAR 0 4
63928: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63929: LD_INT 0
63931: PPUSH
63932: PPUSH
63933: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63934: LD_STRING resetFactoryWaypoint();
63936: PPUSH
63937: CALL_OW 559
// if factoryWaypoints then
63941: LD_EXP 60
63945: IFFALSE 64066
// begin list := factoryWaypoints ;
63947: LD_ADDR_VAR 0 3
63951: PUSH
63952: LD_EXP 60
63956: ST_TO_ADDR
// for i := 1 to list do
63957: LD_ADDR_VAR 0 2
63961: PUSH
63962: DOUBLE
63963: LD_INT 1
63965: DEC
63966: ST_TO_ADDR
63967: LD_VAR 0 3
63971: PUSH
63972: FOR_TO
63973: IFFALSE 64064
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63975: LD_STRING setFactoryWaypointXY(
63977: PUSH
63978: LD_VAR 0 3
63982: PUSH
63983: LD_VAR 0 2
63987: ARRAY
63988: PUSH
63989: LD_INT 1
63991: ARRAY
63992: STR
63993: PUSH
63994: LD_STRING ,
63996: STR
63997: PUSH
63998: LD_VAR 0 3
64002: PUSH
64003: LD_VAR 0 2
64007: ARRAY
64008: PUSH
64009: LD_INT 2
64011: ARRAY
64012: STR
64013: PUSH
64014: LD_STRING ,
64016: STR
64017: PUSH
64018: LD_VAR 0 3
64022: PUSH
64023: LD_VAR 0 2
64027: ARRAY
64028: PUSH
64029: LD_INT 3
64031: ARRAY
64032: STR
64033: PUSH
64034: LD_STRING ,
64036: STR
64037: PUSH
64038: LD_VAR 0 3
64042: PUSH
64043: LD_VAR 0 2
64047: ARRAY
64048: PUSH
64049: LD_INT 4
64051: ARRAY
64052: STR
64053: PUSH
64054: LD_STRING )
64056: STR
64057: PPUSH
64058: CALL_OW 559
64062: GO 63972
64064: POP
64065: POP
// end ; end ;
64066: LD_VAR 0 1
64070: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64071: LD_INT 0
64073: PPUSH
// if HexInfo ( x , y ) = warehouse then
64074: LD_VAR 0 2
64078: PPUSH
64079: LD_VAR 0 3
64083: PPUSH
64084: CALL_OW 428
64088: PUSH
64089: LD_VAR 0 1
64093: EQUAL
64094: IFFALSE 64121
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64096: LD_ADDR_EXP 62
64100: PUSH
64101: LD_EXP 62
64105: PPUSH
64106: LD_VAR 0 1
64110: PPUSH
64111: LD_INT 0
64113: PPUSH
64114: CALL_OW 1
64118: ST_TO_ADDR
64119: GO 64172
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64121: LD_ADDR_EXP 62
64125: PUSH
64126: LD_EXP 62
64130: PPUSH
64131: LD_VAR 0 1
64135: PPUSH
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 255
64145: PUSH
64146: LD_VAR 0 1
64150: PUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_VAR 0 3
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: PPUSH
64167: CALL_OW 1
64171: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64172: CALL 64181 0 0
// end ;
64176: LD_VAR 0 4
64180: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64181: LD_INT 0
64183: PPUSH
64184: PPUSH
64185: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64186: LD_STRING resetWarehouseGatheringPoints();
64188: PPUSH
64189: CALL_OW 559
// if warehouseGatheringPoints then
64193: LD_EXP 62
64197: IFFALSE 64323
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64199: LD_ADDR_VAR 0 3
64203: PUSH
64204: LD_EXP 62
64208: PPUSH
64209: CALL 54913 0 1
64213: ST_TO_ADDR
// for i := 1 to list do
64214: LD_ADDR_VAR 0 2
64218: PUSH
64219: DOUBLE
64220: LD_INT 1
64222: DEC
64223: ST_TO_ADDR
64224: LD_VAR 0 3
64228: PUSH
64229: FOR_TO
64230: IFFALSE 64321
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64232: LD_STRING setWarehouseGatheringPointXY(
64234: PUSH
64235: LD_VAR 0 3
64239: PUSH
64240: LD_VAR 0 2
64244: ARRAY
64245: PUSH
64246: LD_INT 1
64248: ARRAY
64249: STR
64250: PUSH
64251: LD_STRING ,
64253: STR
64254: PUSH
64255: LD_VAR 0 3
64259: PUSH
64260: LD_VAR 0 2
64264: ARRAY
64265: PUSH
64266: LD_INT 2
64268: ARRAY
64269: STR
64270: PUSH
64271: LD_STRING ,
64273: STR
64274: PUSH
64275: LD_VAR 0 3
64279: PUSH
64280: LD_VAR 0 2
64284: ARRAY
64285: PUSH
64286: LD_INT 3
64288: ARRAY
64289: STR
64290: PUSH
64291: LD_STRING ,
64293: STR
64294: PUSH
64295: LD_VAR 0 3
64299: PUSH
64300: LD_VAR 0 2
64304: ARRAY
64305: PUSH
64306: LD_INT 4
64308: ARRAY
64309: STR
64310: PUSH
64311: LD_STRING )
64313: STR
64314: PPUSH
64315: CALL_OW 559
64319: GO 64229
64321: POP
64322: POP
// end ; end ;
64323: LD_VAR 0 1
64327: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64328: LD_INT 0
64330: PPUSH
64331: PPUSH
// if not mpSidePositions then
64332: LD_EXP 7
64336: NOT
64337: IFFALSE 64341
// exit ;
64339: GO 64412
// result :=  ;
64341: LD_ADDR_VAR 0 1
64345: PUSH
64346: LD_STRING 
64348: ST_TO_ADDR
// for i := 1 to 8 do
64349: LD_ADDR_VAR 0 2
64353: PUSH
64354: DOUBLE
64355: LD_INT 1
64357: DEC
64358: ST_TO_ADDR
64359: LD_INT 8
64361: PUSH
64362: FOR_TO
64363: IFFALSE 64393
// begin result := result & mpSidePositions [ i ] & ; ;
64365: LD_ADDR_VAR 0 1
64369: PUSH
64370: LD_VAR 0 1
64374: PUSH
64375: LD_EXP 7
64379: PUSH
64380: LD_VAR 0 2
64384: ARRAY
64385: STR
64386: PUSH
64387: LD_STRING ;
64389: STR
64390: ST_TO_ADDR
// end ;
64391: GO 64362
64393: POP
64394: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64395: LD_STRING setMultiplayerRealPosition("
64397: PUSH
64398: LD_VAR 0 1
64402: STR
64403: PUSH
64404: LD_STRING ");
64406: STR
64407: PPUSH
64408: CALL_OW 559
// end ;
64412: LD_VAR 0 1
64416: RET
