// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 4611 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 4995 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 0
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 0
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: LD_INT 1
  90: PUSH
  91: EMPTY
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// mpGameSettingsValues := [ [ ] , [ 9 , 12 , 15 , 24 ] , [ 3 , 5 , 7 , 9 ] , [ [ 0 , 0 , 0 ] , [ 1000 , 300 , 0 ] , [ 2000 , 750 , 100 ] , [ 3000 , 1500 , 300 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ ] , [ ] , [ ] , [ 0 , 1 ] , [ ] , [ ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 5 5$0 , 10 10$0 , 15 15$0 , 20 20$0 ] , [ 60 60$0 , 90 90$0 , 120 120$0 ] , ] ;
 115: LD_ADDR_EXP 5
 119: PUSH
 120: EMPTY
 121: PUSH
 122: LD_INT 9
 124: PUSH
 125: LD_INT 12
 127: PUSH
 128: LD_INT 15
 130: PUSH
 131: LD_INT 24
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 3
 142: PUSH
 143: LD_INT 5
 145: PUSH
 146: LD_INT 7
 148: PUSH
 149: LD_INT 9
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: LD_INT 0
 163: PUSH
 164: LD_INT 0
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 1000
 174: PUSH
 175: LD_INT 300
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: PUSH
 186: LD_INT 2000
 188: PUSH
 189: LD_INT 750
 191: PUSH
 192: LD_INT 100
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_INT 3000
 202: PUSH
 203: LD_INT 1500
 205: PUSH
 206: LD_INT 300
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 3
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 2
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_INT 0
 254: PUSH
 255: LD_INT 1
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: PUSH
 268: EMPTY
 269: PUSH
 270: EMPTY
 271: PUSH
 272: LD_INT 0
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 13650
 291: PUSH
 292: LD_INT 7350
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 2
 305: PUSH
 306: LD_INT 4
 308: PUSH
 309: LD_INT 6
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: PUSH
 320: EMPTY
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: LD_INT 31500
 330: PUSH
 331: LD_INT 52500
 333: PUSH
 334: LD_INT 63000
 336: PUSH
 337: LD_INT 94500
 339: PUSH
 340: LD_INT 126000
 342: PUSH
 343: LD_INT 189000
 345: PUSH
 346: LD_INT 210000
 348: PUSH
 349: LD_INT 252000
 351: PUSH
 352: LD_INT 378000
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: PUSH
 368: EMPTY
 369: PUSH
 370: EMPTY
 371: PUSH
 372: LD_INT 10500
 374: PUSH
 375: LD_INT 21000
 377: PUSH
 378: LD_INT 31500
 380: PUSH
 381: LD_INT 42000
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 126000
 392: PUSH
 393: LD_INT 189000
 395: PUSH
 396: LD_INT 252000
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// mpGameSettings := [ 0 , 24 , 4 , [ 1000 , 300 , 0 ] , 3 , 1 , 2 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 0$20 , 3 , 0 , 0 , 0 , 0 , 0 , 3 3$0 , 60 60$0 ] ;
 428: LD_ADDR_EXP 6
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 24
 438: PUSH
 439: LD_INT 4
 441: PUSH
 442: LD_INT 1000
 444: PUSH
 445: LD_INT 300
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 1
 479: NEG
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 700
 486: PUSH
 487: LD_INT 3
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: LD_INT 0
 501: PUSH
 502: LD_INT 0
 504: PUSH
 505: LD_INT 6300
 507: PUSH
 508: LD_INT 126000
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: ST_TO_ADDR
// mpGameType := GameTypeArmsRace ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_INT 6
 542: ST_TO_ADDR
// your_side := 3 ;
 543: LD_ADDR_OWVAR 2
 547: PUSH
 548: LD_INT 3
 550: ST_TO_ADDR
// mpSidePositions := [ 3 , 2 , 1 , 4 , 5 , 6 , 7 , 8 ] ;
 551: LD_ADDR_EXP 7
 555: PUSH
 556: LD_INT 3
 558: PUSH
 559: LD_INT 2
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: LD_INT 4
 567: PUSH
 568: LD_INT 5
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 7
 576: PUSH
 577: LD_INT 8
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: ST_TO_ADDR
// mpSideTeams := [ 2 , 1 , 1 , 2 , 2 , 2 , 2 , 2 ] ;
 590: LD_ADDR_EXP 8
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: LD_INT 2
 606: PUSH
 607: LD_INT 2
 609: PUSH
 610: LD_INT 2
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// mpSideNations := [ 3 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 629: LD_ADDR_EXP 9
 633: PUSH
 634: LD_INT 3
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: LD_INT 3
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: LD_INT 3
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: ST_TO_ADDR
// mpTeams := [ [ 3 , 2 ] , [ 1 , 4 , 5 , 6 , 7 , 8 ] ] ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 1
 685: PUSH
 686: LD_INT 4
 688: PUSH
 689: LD_INT 5
 691: PUSH
 692: LD_INT 6
 694: PUSH
 695: LD_INT 7
 697: PUSH
 698: LD_INT 8
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: ST_TO_ADDR
// mpTeamGame := true ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// mpMapSize := [ 140 , 250 ] ;
 721: LD_ADDR_EXP 29
 725: PUSH
 726: LD_INT 140
 728: PUSH
 729: LD_INT 250
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: ST_TO_ADDR
// end ;
 736: LD_VAR 0 1
 740: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 741: LD_INT 0
 743: PPUSH
 744: PPUSH
 745: PPUSH
 746: PPUSH
 747: PPUSH
 748: PPUSH
 749: PPUSH
// mpBuildUpAreas := [ buildUpNorthArea , buildUpNorthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea ] ;
 750: LD_ADDR_EXP 19
 754: PUSH
 755: LD_INT 1
 757: PUSH
 758: LD_INT 1
 760: PUSH
 761: LD_INT 2
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 2
 769: PUSH
 770: LD_INT 2
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: LD_INT 2
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 789: LD_ADDR_EXP 18
 793: PUSH
 794: EMPTY
 795: PUSH
 796: LD_EXP 19
 800: UNION
 801: ST_TO_ADDR
// if gameType in [ GameTypeSurvival , GameTypeArmsRace ] then
 802: LD_VAR 0 1
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 6
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: IN
 817: IFFALSE 829
// baseLevel := 1 else
 819: LD_ADDR_VAR 0 7
 823: PUSH
 824: LD_INT 1
 826: ST_TO_ADDR
 827: GO 843
// baseLevel := mpGameSettings [ 1 ] ;
 829: LD_ADDR_VAR 0 7
 833: PUSH
 834: LD_EXP 6
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 843: LD_ADDR_EXP 24
 847: PUSH
 848: LD_EXP 6
 852: PUSH
 853: LD_INT 2
 855: ARRAY
 856: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 857: LD_ADDR_EXP 25
 861: PUSH
 862: LD_EXP 6
 866: PUSH
 867: LD_INT 3
 869: ARRAY
 870: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 871: LD_ADDR_EXP 15
 875: PUSH
 876: LD_EXP 6
 880: PUSH
 881: LD_INT 4
 883: ARRAY
 884: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 885: LD_ADDR_EXP 27
 889: PUSH
 890: LD_EXP 6
 894: PUSH
 895: LD_INT 5
 897: ARRAY
 898: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 899: LD_ADDR_VAR 0 5
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 6
 911: ARRAY
 912: PUSH
 913: LD_INT 0
 915: GREATER
 916: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 917: LD_ADDR_VAR 0 6
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 7
 929: ARRAY
 930: PUSH
 931: LD_INT 0
 933: GREATER
 934: ST_TO_ADDR
// kingCamArea := 0 ;
 935: LD_ADDR_EXP 2
 939: PUSH
 940: LD_INT 0
 942: ST_TO_ADDR
// kingArea := 0 ;
 943: LD_ADDR_EXP 1
 947: PUSH
 948: LD_INT 0
 950: ST_TO_ADDR
// if gameType = GameTypeKing then
 951: LD_VAR 0 1
 955: PUSH
 956: LD_INT 3
 958: EQUAL
 959: IFFALSE 999
// begin mpKingArea := 0 ;
 961: LD_ADDR_EXP 34
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
 969: LD_ADDR_EXP 35
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 8
 981: ARRAY
 982: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
 983: LD_ADDR_EXP 37
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 10
 995: ARRAY
 996: ST_TO_ADDR
// end else
 997: GO 1023
// begin mpKingArea := 0 ;
 999: LD_ADDR_EXP 34
1003: PUSH
1004: LD_INT 0
1006: ST_TO_ADDR
// mpPoints := 0 ;
1007: LD_ADDR_EXP 35
1011: PUSH
1012: LD_INT 0
1014: ST_TO_ADDR
// mpEmissions := 0 ;
1015: LD_ADDR_EXP 37
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// end ; mpVehicles := [ [ [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_computer , us_cargo_bay ] ] , [ [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] ] , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ] ] ;
1023: LD_ADDR_EXP 36
1027: PUSH
1028: LD_INT 5
1030: PUSH
1031: LD_INT 3
1033: PUSH
1034: LD_INT 1
1036: PUSH
1037: LD_INT 6
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: LD_INT 3
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 6
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 3
1069: PUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 14
1089: PUSH
1090: LD_INT 3
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 27
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 14
1107: PUSH
1108: LD_INT 3
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 27
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 14
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 5
1131: PUSH
1132: LD_INT 32
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 23
1148: PUSH
1149: LD_INT 3
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 46
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 23
1166: PUSH
1167: LD_INT 3
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: LD_INT 46
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 21
1184: PUSH
1185: LD_INT 3
1187: PUSH
1188: LD_INT 3
1190: PUSH
1191: LD_INT 51
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: ST_TO_ADDR
// mpSharedVision := mpGameSettings [ 11 ] ;
1210: LD_ADDR_EXP 16
1214: PUSH
1215: LD_EXP 6
1219: PUSH
1220: LD_INT 11
1222: ARRAY
1223: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1224: LD_ADDR_EXP 22
1228: PUSH
1229: LD_EXP 6
1233: PUSH
1234: LD_INT 12
1236: ARRAY
1237: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1238: LD_ADDR_EXP 26
1242: PUSH
1243: LD_EXP 6
1247: PUSH
1248: LD_INT 13
1250: ARRAY
1251: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1252: LD_ADDR_EXP 33
1256: PUSH
1257: LD_EXP 6
1261: PUSH
1262: LD_INT 14
1264: ARRAY
1265: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1266: LD_ADDR_EXP 30
1270: PUSH
1271: LD_EXP 6
1275: PUSH
1276: LD_INT 15
1278: ARRAY
1279: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1280: LD_ADDR_EXP 28
1284: PUSH
1285: LD_EXP 6
1289: PUSH
1290: LD_INT 18
1292: ARRAY
1293: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_EXP 6
1303: PUSH
1304: LD_INT 21
1306: ARRAY
1307: ST_TO_ADDR
// mpTimeToWin := mpGameSettings [ 22 ] ;
1308: LD_ADDR_EXP 45
1312: PUSH
1313: LD_EXP 6
1317: PUSH
1318: LD_INT 22
1320: ARRAY
1321: ST_TO_ADDR
// mpApemansArea := [ base1ApeArea , base2ApeArea , base3ApeArea , base4ApeArea , base5ApeArea , base6ApeArea , base7ApeArea , base8ApeArea ] ;
1322: LD_ADDR_EXP 31
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: LD_INT 9
1344: PUSH
1345: LD_INT 10
1347: PUSH
1348: LD_INT 11
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 1 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 4 ) ] ;
1361: LD_ADDR_VAR 0 8
1365: PUSH
1366: LD_INT 12
1368: PPUSH
1369: LD_INT 2
1371: PPUSH
1372: CALL 58572 0 2
1376: PUSH
1377: LD_INT 13
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: CALL 58572 0 2
1387: PUSH
1388: LD_INT 14
1390: PPUSH
1391: LD_INT 0
1393: PPUSH
1394: CALL 58572 0 2
1398: PUSH
1399: LD_INT 15
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL 58572 0 2
1409: PUSH
1410: LD_INT 16
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: CALL 58572 0 2
1420: PUSH
1421: LD_INT 17
1423: PPUSH
1424: LD_INT 5
1426: PPUSH
1427: CALL 58572 0 2
1431: PUSH
1432: LD_INT 18
1434: PPUSH
1435: LD_INT 5
1437: PPUSH
1438: CALL 58572 0 2
1442: PUSH
1443: LD_INT 19
1445: PPUSH
1446: LD_INT 4
1448: PPUSH
1449: CALL 58572 0 2
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1464: LD_ADDR_VAR 0 3
1468: PUSH
1469: DOUBLE
1470: LD_INT 1
1472: DEC
1473: ST_TO_ADDR
1474: LD_VAR 0 8
1478: PPUSH
1479: CALL 17887 0 1
1483: PUSH
1484: FOR_TO
1485: IFFALSE 1589
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1487: LD_ADDR_EXP 21
1491: PUSH
1492: LD_EXP 21
1496: PPUSH
1497: LD_VAR 0 3
1501: PPUSH
1502: LD_VAR 0 8
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: PPUSH
1517: LD_VAR 0 8
1521: PUSH
1522: LD_VAR 0 3
1526: ARRAY
1527: PUSH
1528: LD_INT 3
1530: ARRAY
1531: PPUSH
1532: LD_INT 10
1534: PPUSH
1535: CALL_OW 272
1539: PUSH
1540: LD_VAR 0 8
1544: PUSH
1545: LD_VAR 0 3
1549: ARRAY
1550: PUSH
1551: LD_INT 2
1553: ARRAY
1554: PPUSH
1555: LD_VAR 0 8
1559: PUSH
1560: LD_VAR 0 3
1564: ARRAY
1565: PUSH
1566: LD_INT 3
1568: ARRAY
1569: PPUSH
1570: LD_INT 10
1572: PPUSH
1573: CALL_OW 273
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 1
1586: ST_TO_ADDR
1587: GO 1484
1589: POP
1590: POP
// if hasOil then
1591: LD_VAR 0 5
1595: IFFALSE 1734
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1597: LD_ADDR_VAR 0 4
1601: PUSH
1602: LD_EXP 6
1606: PUSH
1607: LD_INT 6
1609: ARRAY
1610: PUSH
1611: LD_INT 2
1613: EQUAL
1614: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1615: LD_ADDR_EXP 12
1619: PUSH
1620: LD_INT 20
1622: PPUSH
1623: LD_VAR 0 4
1627: PPUSH
1628: CALL 58405 0 2
1632: PUSH
1633: LD_INT 21
1635: PPUSH
1636: LD_VAR 0 4
1640: PPUSH
1641: CALL 58405 0 2
1645: PUSH
1646: LD_INT 24
1648: PPUSH
1649: LD_VAR 0 4
1653: PPUSH
1654: CALL 58405 0 2
1658: PUSH
1659: LD_INT 26
1661: PPUSH
1662: LD_VAR 0 4
1666: PPUSH
1667: CALL 58405 0 2
1671: PUSH
1672: LD_INT 28
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 58405 0 2
1684: PUSH
1685: LD_INT 30
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 58405 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 58405 0 2
1710: PUSH
1711: LD_INT 34
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 58405 0 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
// end ; if hasSib then
1734: LD_VAR 0 6
1738: IFFALSE 1877
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1740: LD_ADDR_VAR 0 4
1744: PUSH
1745: LD_EXP 6
1749: PUSH
1750: LD_INT 7
1752: ARRAY
1753: PUSH
1754: LD_INT 2
1756: EQUAL
1757: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1758: LD_ADDR_EXP 13
1762: PUSH
1763: LD_INT 22
1765: PPUSH
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL 58405 0 2
1775: PUSH
1776: LD_INT 23
1778: PPUSH
1779: LD_VAR 0 4
1783: PPUSH
1784: CALL 58405 0 2
1788: PUSH
1789: LD_INT 25
1791: PPUSH
1792: LD_VAR 0 4
1796: PPUSH
1797: CALL 58405 0 2
1801: PUSH
1802: LD_INT 27
1804: PPUSH
1805: LD_VAR 0 4
1809: PPUSH
1810: CALL 58405 0 2
1814: PUSH
1815: LD_INT 29
1817: PPUSH
1818: LD_VAR 0 4
1822: PPUSH
1823: CALL 58405 0 2
1827: PUSH
1828: LD_INT 31
1830: PPUSH
1831: LD_VAR 0 4
1835: PPUSH
1836: CALL 58405 0 2
1840: PUSH
1841: LD_INT 33
1843: PPUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: CALL 58405 0 2
1853: PUSH
1854: LD_INT 35
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: CALL 58405 0 2
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1877: LD_VAR 0 7
1881: PUSH
1882: LD_INT 1
1884: GREATEREQUAL
1885: IFFALSE 1897
// mpDepots := startPos ;
1887: LD_ADDR_EXP 14
1891: PUSH
1892: LD_VAR 0 8
1896: ST_TO_ADDR
// end ;
1897: LD_VAR 0 2
1901: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
1902: GO 1904
1904: DISABLE
1905: LD_INT 0
1907: PPUSH
1908: PPUSH
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
// begin if not mpShipments then
1915: LD_EXP 27
1919: NOT
1920: IFFALSE 1924
// exit ;
1922: GO 2403
// case mpShipments of 1 :
1924: LD_EXP 27
1928: PUSH
1929: LD_INT 1
1931: DOUBLE
1932: EQUAL
1933: IFTRUE 1937
1935: GO 1972
1937: POP
// begin time := 0 0$30 ;
1938: LD_ADDR_VAR 0 5
1942: PUSH
1943: LD_INT 1050
1945: ST_TO_ADDR
// normalTime := 0 0$30 ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_INT 1050
1953: ST_TO_ADDR
// maxTime := 1 1$20 ;
1954: LD_ADDR_VAR 0 8
1958: PUSH
1959: LD_INT 2800
1961: ST_TO_ADDR
// delayTime := 0 0$5 ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 175
1969: ST_TO_ADDR
// end ; 2 :
1970: GO 2102
1972: LD_INT 2
1974: DOUBLE
1975: EQUAL
1976: IFTRUE 1980
1978: GO 2015
1980: POP
// begin time := 0 0$25 ;
1981: LD_ADDR_VAR 0 5
1985: PUSH
1986: LD_INT 875
1988: ST_TO_ADDR
// normalTime := 0 0$25 ;
1989: LD_ADDR_VAR 0 6
1993: PUSH
1994: LD_INT 875
1996: ST_TO_ADDR
// maxTime := 1 1$10 ;
1997: LD_ADDR_VAR 0 8
2001: PUSH
2002: LD_INT 2450
2004: ST_TO_ADDR
// delayTime := 0 0$4 ;
2005: LD_ADDR_VAR 0 7
2009: PUSH
2010: LD_INT 140
2012: ST_TO_ADDR
// end ; 3 :
2013: GO 2102
2015: LD_INT 3
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$20 ;
2024: LD_ADDR_VAR 0 5
2028: PUSH
2029: LD_INT 700
2031: ST_TO_ADDR
// normalTime := 0 0$20 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 700
2039: ST_TO_ADDR
// maxTime := 1 1$00 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2100
2047: ST_TO_ADDR
// delayTime := 0 0$3 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 105
2055: ST_TO_ADDR
// end ; 4 :
2056: GO 2102
2058: LD_INT 4
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$15 ;
2067: LD_ADDR_VAR 0 5
2071: PUSH
2072: LD_INT 525
2074: ST_TO_ADDR
// normalTime := 0 0$15 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 525
2082: ST_TO_ADDR
// maxTime := 0 0$55 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 1925
2090: ST_TO_ADDR
// delayTime := 0 0$2 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 70
2098: ST_TO_ADDR
// end ; end ;
2099: GO 2102
2101: POP
// areas := [ cratesArea1 , cratesArea2 , cratesArea3 , cratesArea4 , cratesArea5 , cratesArea6 ] ;
2102: LD_ADDR_VAR 0 4
2106: PUSH
2107: LD_INT 36
2109: PUSH
2110: LD_INT 37
2112: PUSH
2113: LD_INT 38
2115: PUSH
2116: LD_INT 39
2118: PUSH
2119: LD_INT 40
2121: PUSH
2122: LD_INT 41
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// tmp := [ 0 , 0 , playerCratesArea3 , playerCratesArea4 , playerCratesArea5 , playerCratesArea6 , playerCratesArea7 , playerCratesArea8 ] ;
2133: LD_ADDR_VAR 0 3
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 0
2143: PUSH
2144: LD_INT 42
2146: PUSH
2147: LD_INT 43
2149: PUSH
2150: LD_INT 44
2152: PUSH
2153: LD_INT 45
2155: PUSH
2156: LD_INT 46
2158: PUSH
2159: LD_INT 47
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2257
// begin if not mpSidePositions [ i ] or tmp [ mpSidePositions [ i ] ] = 0 then
2188: LD_EXP 7
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFTRUE 2223
2201: PUSH
2202: LD_VAR 0 3
2206: PUSH
2207: LD_EXP 7
2211: PUSH
2212: LD_VAR 0 1
2216: ARRAY
2217: ARRAY
2218: PUSH
2219: LD_INT 0
2221: EQUAL
2222: OR
2223: IFFALSE 2227
// continue ;
2225: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2227: LD_ADDR_VAR 0 4
2231: PUSH
2232: LD_VAR 0 4
2236: PUSH
2237: LD_VAR 0 3
2241: PUSH
2242: LD_EXP 7
2246: PUSH
2247: LD_VAR 0 1
2251: ARRAY
2252: ARRAY
2253: ADD
2254: ST_TO_ADDR
// end ;
2255: GO 2185
2257: POP
2258: POP
// x := 1 ;
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// repeat wait ( time ) ;
2267: LD_VAR 0 5
2271: PPUSH
2272: CALL_OW 67
// x := Inc ( x ) ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PPUSH
2286: CALL 55226 0 1
2290: ST_TO_ADDR
// if x > 5 then
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 5
2298: GREATER
2299: IFFALSE 2309
// x := 1 ;
2301: LD_ADDR_VAR 0 2
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// for i in areas do
2309: LD_ADDR_VAR 0 1
2313: PUSH
2314: LD_VAR 0 4
2318: PUSH
2319: FOR_IN
2320: IFFALSE 2359
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2322: LD_VAR 0 1
2326: PPUSH
2327: LD_INT 1
2329: PPUSH
2330: CALL_OW 287
2334: PUSH
2335: LD_INT 30
2337: LESS
2338: IFFALSE 2357
// begin CreateCratesArea ( x , i , true ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_VAR 0 1
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: CALL_OW 55
// end ; end ;
2357: GO 2319
2359: POP
2360: POP
// time := time + delayTime ;
2361: LD_ADDR_VAR 0 5
2365: PUSH
2366: LD_VAR 0 5
2370: PUSH
2371: LD_VAR 0 7
2375: PLUS
2376: ST_TO_ADDR
// if time > maxTime then
2377: LD_VAR 0 5
2381: PUSH
2382: LD_VAR 0 8
2386: GREATER
2387: IFFALSE 2399
// time := normalTime ;
2389: LD_ADDR_VAR 0 5
2393: PUSH
2394: LD_VAR 0 6
2398: ST_TO_ADDR
// until false ;
2399: LD_INT 0
2401: IFFALSE 2267
// end ;
2403: PPOPN 8
2405: END
// export function PrepareArmsRaceVehiclesList ( pos , side , nation ) ; var i , j ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
// if nation = nation_american then
2411: LD_VAR 0 3
2415: PUSH
2416: LD_INT 1
2418: EQUAL
2419: IFFALSE 2565
// begin uc_nation := nation_american ;
2421: LD_ADDR_OWVAR 21
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// for j := 1 to 2 do
2429: LD_ADDR_VAR 0 6
2433: PUSH
2434: DOUBLE
2435: LD_INT 1
2437: DEC
2438: ST_TO_ADDR
2439: LD_INT 2
2441: PUSH
2442: FOR_TO
2443: IFFALSE 2495
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_autoloader , 100 ) ;
2445: LD_INT 5
2447: PPUSH
2448: LD_INT 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 96
2456: PPUSH
2457: LD_INT 100
2459: PPUSH
2460: CALL 20683 0 5
// uc_direction := 2 ;
2464: LD_ADDR_OWVAR 24
2468: PUSH
2469: LD_INT 2
2471: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , 76 , 18 , 10 , false ) ;
2472: CALL_OW 45
2476: PPUSH
2477: LD_INT 76
2479: PPUSH
2480: LD_INT 18
2482: PPUSH
2483: LD_INT 10
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 50
// end ;
2493: GO 2442
2495: POP
2496: POP
// for j := 1 to 3 do
2497: LD_ADDR_VAR 0 6
2501: PUSH
2502: DOUBLE
2503: LD_INT 1
2505: DEC
2506: ST_TO_ADDR
2507: LD_INT 3
2509: PUSH
2510: FOR_TO
2511: IFFALSE 2563
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
2513: LD_INT 5
2515: PPUSH
2516: LD_INT 3
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: LD_INT 10
2524: PPUSH
2525: LD_INT 100
2527: PPUSH
2528: CALL 20683 0 5
// uc_direction := 2 ;
2532: LD_ADDR_OWVAR 24
2536: PUSH
2537: LD_INT 2
2539: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , 76 , 18 , 10 , false ) ;
2540: CALL_OW 45
2544: PPUSH
2545: LD_INT 76
2547: PPUSH
2548: LD_INT 18
2550: PPUSH
2551: LD_INT 10
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 50
// end ;
2561: GO 2510
2563: POP
2564: POP
// end ; if nation = nation_russian then
2565: LD_VAR 0 3
2569: PUSH
2570: LD_INT 3
2572: EQUAL
2573: IFFALSE 2651
// begin uc_nation := nation_russian ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 3
2582: ST_TO_ADDR
// PrepareVehicle ( ru_behemoth , engine_siberite , control_computer , ru_behemoth , 100 ) ;
2583: LD_INT 25
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 25
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: CALL 20683 0 5
// uc_direction := 2 ;
2602: LD_ADDR_OWVAR 24
2606: PUSH
2607: LD_INT 2
2609: ST_TO_ADDR
// for j := 1 to 2 do
2610: LD_ADDR_VAR 0 6
2614: PUSH
2615: DOUBLE
2616: LD_INT 1
2618: DEC
2619: ST_TO_ADDR
2620: LD_INT 2
2622: PUSH
2623: FOR_TO
2624: IFFALSE 2649
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 10 , false ) ;
2626: CALL_OW 45
2630: PPUSH
2631: LD_INT 104
2633: PPUSH
2634: LD_INT 59
2636: PPUSH
2637: LD_INT 10
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
2647: GO 2623
2649: POP
2650: POP
// end ; if nation = nation_arabian then
2651: LD_VAR 0 3
2655: PUSH
2656: LD_INT 2
2658: EQUAL
2659: IFFALSE 2737
// begin uc_nation := nation_arabian ;
2661: LD_ADDR_OWVAR 21
2665: PUSH
2666: LD_INT 2
2668: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_miner , 100 ) ;
2669: LD_INT 14
2671: PPUSH
2672: LD_INT 3
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: LD_INT 81
2680: PPUSH
2681: LD_INT 100
2683: PPUSH
2684: CALL 20683 0 5
// uc_direction := 2 ;
2688: LD_ADDR_OWVAR 24
2692: PUSH
2693: LD_INT 2
2695: ST_TO_ADDR
// for j := 1 to 3 do
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: DOUBLE
2702: LD_INT 1
2704: DEC
2705: ST_TO_ADDR
2706: LD_INT 3
2708: PUSH
2709: FOR_TO
2710: IFFALSE 2735
// PlaceUnitXYR ( CreateVehicle , 81 , 30 , 8 , false ) ;
2712: CALL_OW 45
2716: PPUSH
2717: LD_INT 81
2719: PPUSH
2720: LD_INT 30
2722: PPUSH
2723: LD_INT 8
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 50
2733: GO 2709
2735: POP
2736: POP
// end ; uc_nation := nation ;
2737: LD_ADDR_OWVAR 21
2741: PUSH
2742: LD_VAR 0 3
2746: ST_TO_ADDR
// uc_direction := 2 ;
2747: LD_ADDR_OWVAR 24
2751: PUSH
2752: LD_INT 2
2754: ST_TO_ADDR
// case nation of 1 :
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 1
2762: DOUBLE
2763: EQUAL
2764: IFTRUE 2768
2766: GO 2891
2768: POP
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2769: LD_INT 5
2771: PPUSH
2772: LD_INT 3
2774: PPUSH
2775: LD_INT 3
2777: PPUSH
2778: LD_INT 13
2780: PPUSH
2781: LD_INT 100
2783: PPUSH
2784: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2788: CALL_OW 45
2792: PPUSH
2793: LD_INT 104
2795: PPUSH
2796: LD_INT 59
2798: PPUSH
2799: LD_INT 6
2801: PPUSH
2802: LD_INT 0
2804: PPUSH
2805: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2809: LD_INT 5
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: LD_INT 13
2820: PPUSH
2821: LD_INT 100
2823: PPUSH
2824: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2828: CALL_OW 45
2832: PPUSH
2833: LD_INT 104
2835: PPUSH
2836: LD_INT 59
2838: PPUSH
2839: LD_INT 6
2841: PPUSH
2842: LD_INT 0
2844: PPUSH
2845: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
2849: LD_INT 5
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: LD_INT 3
2857: PPUSH
2858: LD_INT 11
2860: PPUSH
2861: LD_INT 100
2863: PPUSH
2864: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2868: CALL_OW 45
2872: PPUSH
2873: LD_INT 104
2875: PPUSH
2876: LD_INT 59
2878: PPUSH
2879: LD_INT 6
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 50
// end ; 2 :
2889: GO 3154
2891: LD_INT 2
2893: DOUBLE
2894: EQUAL
2895: IFTRUE 2899
2897: GO 3022
2899: POP
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 5
2908: PPUSH
2909: LD_INT 88
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2919: CALL_OW 45
2923: PPUSH
2924: LD_INT 104
2926: PPUSH
2927: LD_INT 59
2929: PPUSH
2930: LD_INT 6
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2940: LD_INT 14
2942: PPUSH
2943: LD_INT 3
2945: PPUSH
2946: LD_INT 5
2948: PPUSH
2949: LD_INT 88
2951: PPUSH
2952: LD_INT 100
2954: PPUSH
2955: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2959: CALL_OW 45
2963: PPUSH
2964: LD_INT 104
2966: PPUSH
2967: LD_INT 59
2969: PPUSH
2970: LD_INT 6
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_radar , 100 ) ;
2980: LD_INT 14
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: LD_INT 5
2988: PPUSH
2989: LD_INT 30
2991: PPUSH
2992: LD_INT 100
2994: PPUSH
2995: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2999: CALL_OW 45
3003: PPUSH
3004: LD_INT 104
3006: PPUSH
3007: LD_INT 59
3009: PPUSH
3010: LD_INT 6
3012: PPUSH
3013: LD_INT 0
3015: PPUSH
3016: CALL_OW 50
// end ; 3 :
3020: GO 3154
3022: LD_INT 3
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3153
3030: POP
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
3031: LD_INT 22
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 52
3042: PPUSH
3043: LD_INT 100
3045: PPUSH
3046: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
3050: CALL_OW 45
3054: PPUSH
3055: LD_INT 104
3057: PPUSH
3058: LD_INT 59
3060: PPUSH
3061: LD_INT 6
3063: PPUSH
3064: LD_INT 0
3066: PPUSH
3067: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
3071: LD_INT 22
3073: PPUSH
3074: LD_INT 3
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: LD_INT 52
3082: PPUSH
3083: LD_INT 100
3085: PPUSH
3086: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
3090: CALL_OW 45
3094: PPUSH
3095: LD_INT 104
3097: PPUSH
3098: LD_INT 59
3100: PPUSH
3101: LD_INT 6
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_radar , 100 ) ;
3111: LD_INT 22
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 3
3119: PPUSH
3120: LD_INT 98
3122: PPUSH
3123: LD_INT 100
3125: PPUSH
3126: CALL 20683 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
3130: CALL_OW 45
3134: PPUSH
3135: LD_INT 104
3137: PPUSH
3138: LD_INT 59
3140: PPUSH
3141: LD_INT 6
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL_OW 50
// end ; end ;
3151: GO 3154
3153: POP
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
3154: LD_ADDR_VAR 0 5
3158: PUSH
3159: LD_INT 34
3161: PUSH
3162: LD_INT 81
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PPUSH
3169: CALL_OW 69
3173: PUSH
3174: FOR_IN
3175: IFFALSE 3247
// begin if not i in minersList then
3177: LD_VAR 0 5
3181: PUSH
3182: LD_EXP 57
3186: IN
3187: NOT
3188: IFFALSE 3245
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
3190: LD_ADDR_EXP 57
3194: PUSH
3195: LD_EXP 57
3199: PPUSH
3200: LD_EXP 57
3204: PUSH
3205: LD_INT 1
3207: PLUS
3208: PPUSH
3209: LD_VAR 0 5
3213: PPUSH
3214: CALL_OW 1
3218: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
3219: LD_ADDR_EXP 58
3223: PUSH
3224: LD_EXP 58
3228: PPUSH
3229: LD_EXP 58
3233: PUSH
3234: LD_INT 1
3236: PLUS
3237: PPUSH
3238: EMPTY
3239: PPUSH
3240: CALL_OW 1
3244: ST_TO_ADDR
// end end ;
3245: GO 3174
3247: POP
3248: POP
// end ;
3249: LD_VAR 0 4
3253: RET
// export function GetArmsRaceBuildingsList ( pos ) ; begin
3254: LD_INT 0
3256: PPUSH
// case pos of 1 :
3257: LD_VAR 0 1
3261: PUSH
3262: LD_INT 1
3264: DOUBLE
3265: EQUAL
3266: IFTRUE 3270
3268: GO 3862
3270: POP
// begin result := [ b_depot ^ GetBuildingFromArea ( dep1Area1 , 2 ) , b_depot ^ GetBuildingFromArea ( dep2Area1 , 2 ) , b_depot ^ GetBuildingFromArea ( dep3Area1 , 2 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm2Area1 , 0 ) , b_lab ^ GetBuildingFromArea ( lab1Area1 , 4 ) , b_factory ^ GetBuildingFromArea ( fac1Area1 , 1 ) , b_bunker ^ GetBuildingFromArea ( tw1Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area1 , 0 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
3271: LD_ADDR_VAR 0 2
3275: PUSH
3276: LD_INT 0
3278: PUSH
3279: LD_INT 67
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: CALL 58572 0 2
3289: ADD
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: LD_INT 81
3296: PPUSH
3297: LD_INT 2
3299: PPUSH
3300: CALL 58572 0 2
3304: ADD
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: LD_INT 94
3311: PPUSH
3312: LD_INT 2
3314: PPUSH
3315: CALL 58572 0 2
3319: ADD
3320: PUSH
3321: LD_INT 28
3323: PUSH
3324: LD_INT 56
3326: PPUSH
3327: LD_INT 5
3329: PPUSH
3330: CALL 58572 0 2
3334: ADD
3335: PUSH
3336: LD_INT 28
3338: PUSH
3339: LD_INT 57
3341: PPUSH
3342: LD_INT 5
3344: PPUSH
3345: CALL 58572 0 2
3349: ADD
3350: PUSH
3351: LD_INT 28
3353: PUSH
3354: LD_INT 58
3356: PPUSH
3357: LD_INT 5
3359: PPUSH
3360: CALL 58572 0 2
3364: ADD
3365: PUSH
3366: LD_INT 28
3368: PUSH
3369: LD_INT 71
3371: PPUSH
3372: LD_INT 5
3374: PPUSH
3375: CALL 58572 0 2
3379: ADD
3380: PUSH
3381: LD_INT 28
3383: PUSH
3384: LD_INT 83
3386: PPUSH
3387: LD_INT 5
3389: PPUSH
3390: CALL 58572 0 2
3394: ADD
3395: PUSH
3396: LD_INT 28
3398: PUSH
3399: LD_INT 96
3401: PPUSH
3402: LD_INT 5
3404: PPUSH
3405: CALL 58572 0 2
3409: ADD
3410: PUSH
3411: LD_INT 5
3413: PUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 5
3419: PPUSH
3420: CALL 58572 0 2
3424: ADD
3425: PUSH
3426: LD_INT 5
3428: PUSH
3429: LD_INT 69
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL 58572 0 2
3439: ADD
3440: PUSH
3441: LD_INT 6
3443: PUSH
3444: LD_INT 60
3446: PPUSH
3447: LD_INT 4
3449: PPUSH
3450: CALL 58572 0 2
3454: ADD
3455: PUSH
3456: LD_INT 3
3458: PUSH
3459: LD_INT 59
3461: PPUSH
3462: LD_INT 1
3464: PPUSH
3465: CALL 58572 0 2
3469: ADD
3470: PUSH
3471: LD_INT 32
3473: PUSH
3474: LD_INT 49
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL 58572 0 2
3484: ADD
3485: PUSH
3486: LD_INT 7
3488: PUSH
3489: LD_INT 28
3491: PUSH
3492: LD_INT 45
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: ADD
3503: PUSH
3504: LD_INT 32
3506: PUSH
3507: LD_INT 50
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL 58572 0 2
3517: ADD
3518: PUSH
3519: LD_INT 9
3521: PUSH
3522: LD_INT 27
3524: PUSH
3525: LD_INT 46
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: ADD
3536: PUSH
3537: LD_INT 32
3539: PUSH
3540: LD_INT 51
3542: PPUSH
3543: LD_INT 0
3545: PPUSH
3546: CALL 58572 0 2
3550: ADD
3551: PUSH
3552: LD_INT 7
3554: PUSH
3555: LD_INT 28
3557: PUSH
3558: LD_INT 45
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: EMPTY
3567: LIST
3568: ADD
3569: PUSH
3570: LD_INT 32
3572: PUSH
3573: LD_INT 73
3575: PPUSH
3576: LD_INT 0
3578: PPUSH
3579: CALL 58572 0 2
3583: ADD
3584: PUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 28
3590: PUSH
3591: LD_INT 45
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: ADD
3602: PUSH
3603: LD_INT 32
3605: PUSH
3606: LD_INT 74
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL 58572 0 2
3616: ADD
3617: PUSH
3618: LD_INT 9
3620: PUSH
3621: LD_INT 27
3623: PUSH
3624: LD_INT 46
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: EMPTY
3633: LIST
3634: ADD
3635: PUSH
3636: LD_INT 32
3638: PUSH
3639: LD_INT 75
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL 58572 0 2
3649: ADD
3650: PUSH
3651: LD_INT 9
3653: PUSH
3654: LD_INT 27
3656: PUSH
3657: LD_INT 46
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: EMPTY
3666: LIST
3667: ADD
3668: PUSH
3669: LD_INT 32
3671: PUSH
3672: LD_INT 76
3674: PPUSH
3675: LD_INT 0
3677: PPUSH
3678: CALL 58572 0 2
3682: ADD
3683: PUSH
3684: LD_INT 9
3686: PUSH
3687: LD_INT 27
3689: PUSH
3690: LD_INT 46
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: ADD
3701: PUSH
3702: LD_INT 32
3704: PUSH
3705: LD_INT 85
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL 58572 0 2
3715: ADD
3716: PUSH
3717: LD_INT 9
3719: PUSH
3720: LD_INT 27
3722: PUSH
3723: LD_INT 46
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: ADD
3734: PUSH
3735: LD_INT 32
3737: PUSH
3738: LD_INT 86
3740: PPUSH
3741: LD_INT 0
3743: PPUSH
3744: CALL 58572 0 2
3748: ADD
3749: PUSH
3750: LD_INT 7
3752: PUSH
3753: LD_INT 28
3755: PUSH
3756: LD_INT 45
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: EMPTY
3765: LIST
3766: ADD
3767: PUSH
3768: LD_INT 32
3770: PUSH
3771: LD_INT 87
3773: PPUSH
3774: LD_INT 0
3776: PPUSH
3777: CALL 58572 0 2
3781: ADD
3782: PUSH
3783: LD_INT 7
3785: PUSH
3786: LD_INT 28
3788: PUSH
3789: LD_INT 45
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: ADD
3800: PUSH
3801: LD_INT 32
3803: PUSH
3804: LD_INT 88
3806: PPUSH
3807: LD_INT 0
3809: PPUSH
3810: CALL 58572 0 2
3814: ADD
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: LD_INT 43
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: ADD
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: ST_TO_ADDR
// end ; 2 :
3860: GO 4463
3862: LD_INT 2
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 4462
3870: POP
// begin result := [ b_depot ^ GetBuildingFromArea ( dep1Area2 , 3 ) , b_depot ^ GetBuildingFromArea ( dep2Area2 , 2 ) , b_depot ^ GetBuildingFromArea ( dep3Area2 , 3 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area2 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area2 , 0 ) , b_barracks ^ GetBuildingFromArea ( arm2Area2 , 5 ) , b_lab ^ GetBuildingFromArea ( lab1Area2 , 1 ) , b_factory ^ GetBuildingFromArea ( fac1Area2 , 4 ) , b_bunker ^ GetBuildingFromArea ( tw1Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area2 , 5 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_INT 0
3878: PUSH
3879: LD_INT 68
3881: PPUSH
3882: LD_INT 3
3884: PPUSH
3885: CALL 58572 0 2
3889: ADD
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: LD_INT 82
3896: PPUSH
3897: LD_INT 2
3899: PPUSH
3900: CALL 58572 0 2
3904: ADD
3905: PUSH
3906: LD_INT 0
3908: PUSH
3909: LD_INT 95
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: CALL 58572 0 2
3919: ADD
3920: PUSH
3921: LD_INT 28
3923: PUSH
3924: LD_INT 62
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: CALL 58572 0 2
3934: ADD
3935: PUSH
3936: LD_INT 28
3938: PUSH
3939: LD_INT 63
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: CALL 58572 0 2
3949: ADD
3950: PUSH
3951: LD_INT 28
3953: PUSH
3954: LD_INT 64
3956: PPUSH
3957: LD_INT 5
3959: PPUSH
3960: CALL 58572 0 2
3964: ADD
3965: PUSH
3966: LD_INT 28
3968: PUSH
3969: LD_INT 72
3971: PPUSH
3972: LD_INT 5
3974: PPUSH
3975: CALL 58572 0 2
3979: ADD
3980: PUSH
3981: LD_INT 28
3983: PUSH
3984: LD_INT 84
3986: PPUSH
3987: LD_INT 5
3989: PPUSH
3990: CALL 58572 0 2
3994: ADD
3995: PUSH
3996: LD_INT 28
3998: PUSH
3999: LD_INT 97
4001: PPUSH
4002: LD_INT 5
4004: PPUSH
4005: CALL 58572 0 2
4009: ADD
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 52
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: CALL 58572 0 2
4024: ADD
4025: PUSH
4026: LD_INT 5
4028: PUSH
4029: LD_INT 70
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL 58572 0 2
4039: ADD
4040: PUSH
4041: LD_INT 6
4043: PUSH
4044: LD_INT 65
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL 58572 0 2
4054: ADD
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 61
4061: PPUSH
4062: LD_INT 4
4064: PPUSH
4065: CALL 58572 0 2
4069: ADD
4070: PUSH
4071: LD_INT 32
4073: PUSH
4074: LD_INT 53
4076: PPUSH
4077: LD_INT 5
4079: PPUSH
4080: CALL 58572 0 2
4084: ADD
4085: PUSH
4086: LD_INT 7
4088: PUSH
4089: LD_INT 28
4091: PUSH
4092: LD_INT 45
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: ADD
4103: PUSH
4104: LD_INT 32
4106: PUSH
4107: LD_INT 54
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: CALL 58572 0 2
4117: ADD
4118: PUSH
4119: LD_INT 9
4121: PUSH
4122: LD_INT 27
4124: PUSH
4125: LD_INT 46
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: ADD
4136: PUSH
4137: LD_INT 32
4139: PUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL 58572 0 2
4150: ADD
4151: PUSH
4152: LD_INT 7
4154: PUSH
4155: LD_INT 28
4157: PUSH
4158: LD_INT 45
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: EMPTY
4167: LIST
4168: ADD
4169: PUSH
4170: LD_INT 32
4172: PUSH
4173: LD_INT 77
4175: PPUSH
4176: LD_INT 5
4178: PPUSH
4179: CALL 58572 0 2
4183: ADD
4184: PUSH
4185: LD_INT 7
4187: PUSH
4188: LD_INT 28
4190: PUSH
4191: LD_INT 45
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: ADD
4202: PUSH
4203: LD_INT 32
4205: PUSH
4206: LD_INT 78
4208: PPUSH
4209: LD_INT 5
4211: PPUSH
4212: CALL 58572 0 2
4216: ADD
4217: PUSH
4218: LD_INT 9
4220: PUSH
4221: LD_INT 27
4223: PUSH
4224: LD_INT 46
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: ADD
4235: PUSH
4236: LD_INT 32
4238: PUSH
4239: LD_INT 79
4241: PPUSH
4242: LD_INT 5
4244: PPUSH
4245: CALL 58572 0 2
4249: ADD
4250: PUSH
4251: LD_INT 9
4253: PUSH
4254: LD_INT 27
4256: PUSH
4257: LD_INT 46
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: EMPTY
4266: LIST
4267: ADD
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: LD_INT 80
4274: PPUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL 58572 0 2
4282: ADD
4283: PUSH
4284: LD_INT 9
4286: PUSH
4287: LD_INT 27
4289: PUSH
4290: LD_INT 46
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: PUSH
4298: EMPTY
4299: LIST
4300: ADD
4301: PUSH
4302: LD_INT 32
4304: PUSH
4305: LD_INT 90
4307: PPUSH
4308: LD_INT 5
4310: PPUSH
4311: CALL 58572 0 2
4315: ADD
4316: PUSH
4317: LD_INT 9
4319: PUSH
4320: LD_INT 27
4322: PUSH
4323: LD_INT 46
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: ADD
4334: PUSH
4335: LD_INT 32
4337: PUSH
4338: LD_INT 91
4340: PPUSH
4341: LD_INT 5
4343: PPUSH
4344: CALL 58572 0 2
4348: ADD
4349: PUSH
4350: LD_INT 7
4352: PUSH
4353: LD_INT 28
4355: PUSH
4356: LD_INT 45
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: ADD
4367: PUSH
4368: LD_INT 32
4370: PUSH
4371: LD_INT 92
4373: PPUSH
4374: LD_INT 5
4376: PPUSH
4377: CALL 58572 0 2
4381: ADD
4382: PUSH
4383: LD_INT 7
4385: PUSH
4386: LD_INT 28
4388: PUSH
4389: LD_INT 45
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: ADD
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 93
4406: PPUSH
4407: LD_INT 5
4409: PPUSH
4410: CALL 58572 0 2
4414: ADD
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: LD_INT 25
4421: PUSH
4422: LD_INT 43
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: ADD
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: ST_TO_ADDR
// end ; end ;
4460: GO 4463
4462: POP
// end ; end_of_file
4463: LD_VAR 0 2
4467: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4468: LD_VAR 0 1
4472: PPUSH
4473: CALL 59370 0 1
// Multiplayer_UnitDestroyed ( un ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: CALL 9897 0 1
// end ;
4486: PPOPN 1
4488: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: CALL 59387 0 1
// end ;
4498: PPOPN 1
4500: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL 10604 0 1
4510: PPOPN 1
4512: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_VAR 0 2
4522: PPUSH
4523: CALL 59428 0 2
4527: PPOPN 2
4529: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
4530: LD_VAR 0 1
4534: PPUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: LD_VAR 0 3
4544: PPUSH
4545: CALL 10657 0 3
4549: PPOPN 3
4551: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
4552: LD_VAR 0 1
4556: PPUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_VAR 0 3
4566: PPUSH
4567: LD_VAR 0 4
4571: PPUSH
4572: LD_VAR 0 5
4576: PPUSH
4577: CALL 11296 0 5
4581: PPOPN 5
4583: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
4584: LD_VAR 0 1
4588: PPUSH
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 3
4598: PPUSH
4599: LD_VAR 0 4
4603: PPUSH
4604: CALL 11399 0 4
4608: PPOPN 4
4610: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
4611: LD_INT 0
4613: PPUSH
4614: PPUSH
// disable ( mpActive ) ;
4615: LD_INT 100
4617: DISABLE_MARKED
// disable ( mpWin ) ;
4618: LD_INT 101
4620: DISABLE_MARKED
// disable ( mpLose ) ;
4621: LD_INT 102
4623: DISABLE_MARKED
// mpGameType := 0 ;
4624: LD_ADDR_EXP 3
4628: PUSH
4629: LD_INT 0
4631: ST_TO_ADDR
// mpGameSettings := [ ] ;
4632: LD_ADDR_EXP 6
4636: PUSH
4637: EMPTY
4638: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
4639: LD_ADDR_EXP 4
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
4646: LD_ADDR_EXP 5
4650: PUSH
4651: EMPTY
4652: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
4653: LD_ADDR_EXP 29
4657: PUSH
4658: LD_INT 2
4660: PUSH
4661: LD_INT 2
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: ST_TO_ADDR
// mpOilDeposits := [ ] ;
4668: LD_ADDR_EXP 12
4672: PUSH
4673: EMPTY
4674: ST_TO_ADDR
// mpSibDeposits := [ ] ;
4675: LD_ADDR_EXP 13
4679: PUSH
4680: EMPTY
4681: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
4682: LD_ADDR_EXP 41
4686: PUSH
4687: EMPTY
4688: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
4689: LD_ADDR_EXP 42
4693: PUSH
4694: EMPTY
4695: ST_TO_ADDR
// mpDepots := [ ] ;
4696: LD_ADDR_EXP 14
4700: PUSH
4701: EMPTY
4702: ST_TO_ADDR
// mpBuildings := [ ] ;
4703: LD_ADDR_EXP 17
4707: PUSH
4708: EMPTY
4709: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
4710: LD_ADDR_EXP 18
4714: PUSH
4715: EMPTY
4716: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
4717: LD_ADDR_EXP 19
4721: PUSH
4722: EMPTY
4723: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
4724: LD_ADDR_EXP 20
4728: PUSH
4729: EMPTY
4730: ST_TO_ADDR
// mpStartingResources := [ ] ;
4731: LD_ADDR_EXP 15
4735: PUSH
4736: EMPTY
4737: ST_TO_ADDR
// mpStartPos := [ ] ;
4738: LD_ADDR_EXP 21
4742: PUSH
4743: EMPTY
4744: ST_TO_ADDR
// mpBattleFlag := - 1 ;
4745: LD_ADDR_EXP 22
4749: PUSH
4750: LD_INT 1
4752: NEG
4753: ST_TO_ADDR
// mpBattleFlags := [ ] ;
4754: LD_ADDR_EXP 23
4758: PUSH
4759: EMPTY
4760: ST_TO_ADDR
// mpApemans := [ ] ;
4761: LD_ADDR_EXP 30
4765: PUSH
4766: EMPTY
4767: ST_TO_ADDR
// mpApemansArea := [ ] ;
4768: LD_ADDR_EXP 31
4772: PUSH
4773: EMPTY
4774: ST_TO_ADDR
// mpRespawn := [ ] ;
4775: LD_ADDR_EXP 33
4779: PUSH
4780: EMPTY
4781: ST_TO_ADDR
// mpKingArea := 0 ;
4782: LD_ADDR_EXP 34
4786: PUSH
4787: LD_INT 0
4789: ST_TO_ADDR
// mpPoints := [ ] ;
4790: LD_ADDR_EXP 35
4794: PUSH
4795: EMPTY
4796: ST_TO_ADDR
// mpVehicles := 0 ;
4797: LD_ADDR_EXP 36
4801: PUSH
4802: LD_INT 0
4804: ST_TO_ADDR
// mpShipments := 0 ;
4805: LD_ADDR_EXP 27
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4813: LD_ADDR_EXP 40
4817: PUSH
4818: EMPTY
4819: PUSH
4820: EMPTY
4821: PUSH
4822: EMPTY
4823: PUSH
4824: EMPTY
4825: PUSH
4826: EMPTY
4827: PUSH
4828: EMPTY
4829: PUSH
4830: EMPTY
4831: PUSH
4832: EMPTY
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4844: LD_ADDR_EXP 32
4848: PUSH
4849: EMPTY
4850: PUSH
4851: EMPTY
4852: PUSH
4853: EMPTY
4854: PUSH
4855: EMPTY
4856: PUSH
4857: EMPTY
4858: PUSH
4859: EMPTY
4860: PUSH
4861: EMPTY
4862: PUSH
4863: EMPTY
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: ST_TO_ADDR
// mpEmissions := 0 ;
4875: LD_ADDR_EXP 37
4879: PUSH
4880: LD_INT 0
4882: ST_TO_ADDR
// mpTeleports := 0 ;
4883: LD_ADDR_EXP 43
4887: PUSH
4888: LD_INT 0
4890: ST_TO_ADDR
// mpArtifacts := 0 ;
4891: LD_ADDR_EXP 44
4895: PUSH
4896: LD_INT 0
4898: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
4899: LD_ADDR_EXP 45
4903: PUSH
4904: LD_INT 0
4906: ST_TO_ADDR
// mpPeopleSkill := 3 ;
4907: LD_ADDR_EXP 25
4911: PUSH
4912: LD_INT 3
4914: ST_TO_ADDR
// mpPeopleAmount := 15 ;
4915: LD_ADDR_EXP 24
4919: PUSH
4920: LD_INT 15
4922: ST_TO_ADDR
// mpDisplayStrings := 0 ;
4923: LD_ADDR_EXP 38
4927: PUSH
4928: LD_INT 0
4930: ST_TO_ADDR
// mpGameActive := false ;
4931: LD_ADDR_EXP 39
4935: PUSH
4936: LD_INT 0
4938: ST_TO_ADDR
// mpBlockRespThread := false ;
4939: LD_ADDR_EXP 46
4943: PUSH
4944: LD_INT 0
4946: ST_TO_ADDR
// for i := 1 to 32 do
4947: LD_ADDR_VAR 0 2
4951: PUSH
4952: DOUBLE
4953: LD_INT 1
4955: DEC
4956: ST_TO_ADDR
4957: LD_INT 32
4959: PUSH
4960: FOR_TO
4961: IFFALSE 4988
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
4963: LD_ADDR_EXP 6
4967: PUSH
4968: LD_EXP 6
4972: PPUSH
4973: LD_VAR 0 2
4977: PPUSH
4978: LD_INT 0
4980: PPUSH
4981: CALL_OW 1
4985: ST_TO_ADDR
4986: GO 4960
4988: POP
4989: POP
// end ;
4990: LD_VAR 0 1
4994: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
4995: LD_INT 0
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
5001: PPUSH
5002: PPUSH
5003: PPUSH
5004: PPUSH
5005: PPUSH
5006: PPUSH
5007: PPUSH
5008: PPUSH
5009: PPUSH
5010: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 1
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: LD_INT 5
5027: PUSH
5028: LD_INT 6
5030: PUSH
5031: LD_INT 7
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: ST_TO_ADDR
// for i in gameTypes do
5042: LD_ADDR_VAR 0 2
5046: PUSH
5047: LD_VAR 0 14
5051: PUSH
5052: FOR_IN
5053: IFFALSE 5062
// disable ( i ) ;
5055: LD_VAR 0 2
5059: DISABLE_MARKED
5060: GO 5052
5062: POP
5063: POP
// if Multiplayer then
5064: LD_OWVAR 4
5068: IFFALSE 5252
// begin mpGameType := mp_game_type ;
5070: LD_ADDR_EXP 3
5074: PUSH
5075: LD_OWVAR 6
5079: ST_TO_ADDR
// your_side := mp_player_side ;
5080: LD_ADDR_OWVAR 2
5084: PUSH
5085: LD_OWVAR 7
5089: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
5090: LD_ADDR_EXP 7
5094: PUSH
5095: LD_OWVAR 17
5099: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
5100: LD_ADDR_EXP 8
5104: PUSH
5105: LD_OWVAR 15
5109: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
5110: LD_ADDR_EXP 9
5114: PUSH
5115: LD_OWVAR 16
5119: ST_TO_ADDR
// mpTeams := mp_teams ;
5120: LD_ADDR_EXP 10
5124: PUSH
5125: LD_OWVAR 12
5129: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: DOUBLE
5136: LD_INT 1
5138: DEC
5139: ST_TO_ADDR
5140: LD_EXP 4
5144: PPUSH
5145: CALL 17887 0 1
5149: PUSH
5150: FOR_TO
5151: IFFALSE 5227
// begin setting := mpGameSettingsKeys [ i ] ;
5153: LD_ADDR_VAR 0 12
5157: PUSH
5158: LD_EXP 4
5162: PUSH
5163: LD_VAR 0 2
5167: ARRAY
5168: ST_TO_ADDR
// if setting then
5169: LD_VAR 0 12
5173: IFFALSE 5225
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
5175: LD_ADDR_EXP 6
5179: PUSH
5180: LD_EXP 6
5184: PPUSH
5185: LD_VAR 0 2
5189: PPUSH
5190: LD_EXP 5
5194: PUSH
5195: LD_VAR 0 2
5199: ARRAY
5200: PUSH
5201: LD_VAR 0 2
5205: PUSH
5206: LD_INT 1
5208: MINUS
5209: PPUSH
5210: CALL_OW 426
5214: PUSH
5215: LD_INT 1
5217: PLUS
5218: ARRAY
5219: PPUSH
5220: CALL_OW 1
5224: ST_TO_ADDR
// end ;
5225: GO 5150
5227: POP
5228: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
5229: LD_ADDR_EXP 11
5233: PUSH
5234: LD_EXP 8
5238: PUSH
5239: LD_INT 0
5241: PUSH
5242: EMPTY
5243: LIST
5244: DIFF
5245: PUSH
5246: LD_INT 1
5248: GREATER
5249: ST_TO_ADDR
// end else
5250: GO 5252
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
5252: LD_EXP 3
5256: PPUSH
5257: CALL 741 0 1
// if Count ( mpMarkedAreas ) then
5261: LD_EXP 18
5265: PPUSH
5266: CALL 17887 0 1
5270: IFFALSE 5301
// begin for i in mpMarkedAreas do
5272: LD_ADDR_VAR 0 2
5276: PUSH
5277: LD_EXP 18
5281: PUSH
5282: FOR_IN
5283: IFFALSE 5299
// SetAreaMapShow ( i , 0 ) ;
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_INT 0
5292: PPUSH
5293: CALL_OW 424
5297: GO 5282
5299: POP
5300: POP
// end ; for i := 1 to 8 do
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: DOUBLE
5307: LD_INT 1
5309: DEC
5310: ST_TO_ADDR
5311: LD_INT 8
5313: PUSH
5314: FOR_TO
5315: IFFALSE 6750
// begin if not mpSidePositions [ i ] then
5317: LD_EXP 7
5321: PUSH
5322: LD_VAR 0 2
5326: ARRAY
5327: NOT
5328: IFFALSE 5332
// continue ;
5330: GO 5314
// side := i ;
5332: LD_ADDR_VAR 0 7
5336: PUSH
5337: LD_VAR 0 2
5341: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
5342: LD_ADDR_VAR 0 9
5346: PUSH
5347: LD_EXP 9
5351: PUSH
5352: LD_VAR 0 2
5356: ARRAY
5357: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
5358: LD_ADDR_VAR 0 8
5362: PUSH
5363: LD_EXP 7
5367: PUSH
5368: LD_VAR 0 2
5372: ARRAY
5373: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
5374: LD_EXP 12
5378: PPUSH
5379: CALL 17887 0 1
5383: IFFALSE 5460
// begin for j in mpOilDeposits [ pos ] do
5385: LD_ADDR_VAR 0 3
5389: PUSH
5390: LD_EXP 12
5394: PUSH
5395: LD_VAR 0 8
5399: ARRAY
5400: PUSH
5401: FOR_IN
5402: IFFALSE 5458
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
5404: LD_VAR 0 3
5408: PUSH
5409: LD_INT 1
5411: ARRAY
5412: PPUSH
5413: LD_VAR 0 3
5417: PUSH
5418: LD_INT 2
5420: ARRAY
5421: PPUSH
5422: LD_INT 2
5424: PPUSH
5425: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5429: LD_VAR 0 3
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: PPUSH
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 2
5445: ARRAY
5446: PPUSH
5447: LD_VAR 0 7
5451: PPUSH
5452: CALL_OW 441
// end ;
5456: GO 5401
5458: POP
5459: POP
// end ; if Count ( mpSibDeposits ) then
5460: LD_EXP 13
5464: PPUSH
5465: CALL 17887 0 1
5469: IFFALSE 5546
// begin for j in mpSibDeposits [ pos ] do
5471: LD_ADDR_VAR 0 3
5475: PUSH
5476: LD_EXP 13
5480: PUSH
5481: LD_VAR 0 8
5485: ARRAY
5486: PUSH
5487: FOR_IN
5488: IFFALSE 5544
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: PPUSH
5499: LD_VAR 0 3
5503: PUSH
5504: LD_INT 2
5506: ARRAY
5507: PPUSH
5508: LD_INT 3
5510: PPUSH
5511: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5515: LD_VAR 0 3
5519: PUSH
5520: LD_INT 1
5522: ARRAY
5523: PPUSH
5524: LD_VAR 0 3
5528: PUSH
5529: LD_INT 2
5531: ARRAY
5532: PPUSH
5533: LD_VAR 0 7
5537: PPUSH
5538: CALL_OW 441
// end ;
5542: GO 5487
5544: POP
5545: POP
// end ; InitBc ;
5546: CALL_OW 21
// InitUc ;
5550: CALL_OW 18
// uc_side := side ;
5554: LD_ADDR_OWVAR 20
5558: PUSH
5559: LD_VAR 0 7
5563: ST_TO_ADDR
// uc_nation := nation ;
5564: LD_ADDR_OWVAR 21
5568: PUSH
5569: LD_VAR 0 9
5573: ST_TO_ADDR
// if mpBattleFlag > - 1 then
5574: LD_EXP 22
5578: PUSH
5579: LD_INT 1
5581: NEG
5582: GREATER
5583: IFFALSE 5742
// begin x := mpStartPos [ pos ] [ 1 ] ;
5585: LD_ADDR_VAR 0 5
5589: PUSH
5590: LD_EXP 21
5594: PUSH
5595: LD_VAR 0 8
5599: ARRAY
5600: PUSH
5601: LD_INT 1
5603: ARRAY
5604: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5605: LD_ADDR_VAR 0 6
5609: PUSH
5610: LD_EXP 21
5614: PUSH
5615: LD_VAR 0 8
5619: ARRAY
5620: PUSH
5621: LD_INT 2
5623: ARRAY
5624: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
5625: LD_VAR 0 5
5629: PPUSH
5630: LD_VAR 0 6
5634: PPUSH
5635: LD_INT 12
5637: PPUSH
5638: LD_INT 2
5640: PPUSH
5641: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
5645: LD_ADDR_EXP 23
5649: PUSH
5650: LD_EXP 23
5654: PPUSH
5655: LD_VAR 0 7
5659: PPUSH
5660: LD_VAR 0 7
5664: PPUSH
5665: LD_VAR 0 5
5669: PPUSH
5670: LD_VAR 0 6
5674: PPUSH
5675: LD_INT 1
5677: PUSH
5678: LD_INT 100
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 2
5687: PUSH
5688: LD_INT 70
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 3
5697: PUSH
5698: LD_INT 40
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: LD_INT 10
5707: PUSH
5708: LD_INT 25
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 20
5717: PUSH
5718: LD_INT 100
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: PPUSH
5732: CALL_OW 418
5736: PPUSH
5737: CALL_OW 1
5741: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
5742: LD_EXP 14
5746: PPUSH
5747: CALL 17887 0 1
5751: IFFALSE 5946
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
5753: LD_EXP 3
5757: PUSH
5758: LD_INT 2
5760: PUSH
5761: LD_INT 6
5763: PUSH
5764: LD_INT 7
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: LIST
5771: IN
5772: IFFALSE 5792
// begin bc_level := 10 ;
5774: LD_ADDR_OWVAR 43
5778: PUSH
5779: LD_INT 10
5781: ST_TO_ADDR
// bc_type := b_warehouse ;
5782: LD_ADDR_OWVAR 42
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// end else
5790: GO 5808
// begin bc_level := 0 ;
5792: LD_ADDR_OWVAR 43
5796: PUSH
5797: LD_INT 0
5799: ST_TO_ADDR
// bc_type := b_depot ;
5800: LD_ADDR_OWVAR 42
5804: PUSH
5805: LD_INT 0
5807: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
5808: LD_ADDR_VAR 0 4
5812: PUSH
5813: LD_EXP 14
5817: PUSH
5818: LD_VAR 0 8
5822: ARRAY
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: LD_EXP 14
5832: PUSH
5833: LD_VAR 0 8
5837: ARRAY
5838: PUSH
5839: LD_INT 2
5841: ARRAY
5842: PPUSH
5843: LD_EXP 14
5847: PUSH
5848: LD_VAR 0 8
5852: ARRAY
5853: PUSH
5854: LD_INT 3
5856: ARRAY
5857: PPUSH
5858: CALL_OW 47
5862: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
5863: LD_VAR 0 4
5867: PPUSH
5868: LD_STRING @
5870: PUSH
5871: LD_VAR 0 7
5875: STR
5876: PPUSH
5877: CALL_OW 500
// if Count ( mpStartingResources ) then
5881: LD_EXP 15
5885: PPUSH
5886: CALL 17887 0 1
5890: IFFALSE 5944
// begin for j := 1 to mpStartingResources do
5892: LD_ADDR_VAR 0 3
5896: PUSH
5897: DOUBLE
5898: LD_INT 1
5900: DEC
5901: ST_TO_ADDR
5902: LD_EXP 15
5906: PUSH
5907: FOR_TO
5908: IFFALSE 5942
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
5910: LD_VAR 0 4
5914: PPUSH
5915: CALL_OW 274
5919: PPUSH
5920: LD_VAR 0 3
5924: PPUSH
5925: LD_EXP 15
5929: PUSH
5930: LD_VAR 0 3
5934: ARRAY
5935: PPUSH
5936: CALL_OW 277
5940: GO 5907
5942: POP
5943: POP
// end ; end else
5944: GO 6153
// if Count ( mpStartingResources ) then
5946: LD_EXP 15
5950: PPUSH
5951: CALL 17887 0 1
5955: IFFALSE 6153
// begin x := mpStartPos [ pos ] [ 1 ] ;
5957: LD_ADDR_VAR 0 5
5961: PUSH
5962: LD_EXP 21
5966: PUSH
5967: LD_VAR 0 8
5971: ARRAY
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5977: LD_ADDR_VAR 0 6
5981: PUSH
5982: LD_EXP 21
5986: PUSH
5987: LD_VAR 0 8
5991: ARRAY
5992: PUSH
5993: LD_INT 2
5995: ARRAY
5996: ST_TO_ADDR
// for j := 1 to mpStartingResources do
5997: LD_ADDR_VAR 0 3
6001: PUSH
6002: DOUBLE
6003: LD_INT 1
6005: DEC
6006: ST_TO_ADDR
6007: LD_EXP 15
6011: PUSH
6012: FOR_TO
6013: IFFALSE 6151
// begin resources := mpStartingResources [ j ] ;
6015: LD_ADDR_VAR 0 13
6019: PUSH
6020: LD_EXP 15
6024: PUSH
6025: LD_VAR 0 3
6029: ARRAY
6030: ST_TO_ADDR
// if resources = 0 then
6031: LD_VAR 0 13
6035: PUSH
6036: LD_INT 0
6038: EQUAL
6039: IFFALSE 6043
// continue ;
6041: GO 6012
// repeat if resources >= 50 then
6043: LD_VAR 0 13
6047: PUSH
6048: LD_INT 50
6050: GREATEREQUAL
6051: IFFALSE 6097
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
6053: LD_VAR 0 3
6057: PPUSH
6058: LD_INT 5
6060: PPUSH
6061: LD_VAR 0 5
6065: PPUSH
6066: LD_VAR 0 6
6070: PPUSH
6071: LD_INT 6
6073: PPUSH
6074: LD_INT 0
6076: PPUSH
6077: CALL_OW 60
// resources := resources - 50 ;
6081: LD_ADDR_VAR 0 13
6085: PUSH
6086: LD_VAR 0 13
6090: PUSH
6091: LD_INT 50
6093: MINUS
6094: ST_TO_ADDR
// end else
6095: GO 6139
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
6097: LD_VAR 0 3
6101: PPUSH
6102: LD_VAR 0 13
6106: PUSH
6107: LD_INT 10
6109: DIV
6110: PPUSH
6111: LD_VAR 0 5
6115: PPUSH
6116: LD_VAR 0 6
6120: PPUSH
6121: LD_INT 6
6123: PPUSH
6124: LD_INT 0
6126: PPUSH
6127: CALL_OW 60
// resources := 0 ;
6131: LD_ADDR_VAR 0 13
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// end ; until resources <= 0 ;
6139: LD_VAR 0 13
6143: PUSH
6144: LD_INT 0
6146: LESSEQUAL
6147: IFFALSE 6043
// end ;
6149: GO 6012
6151: POP
6152: POP
// end ; if Count ( mpBuildings ) then
6153: LD_EXP 17
6157: PPUSH
6158: CALL 17887 0 1
6162: IFFALSE 6240
// begin for j in mpBuildings [ pos ] do
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: LD_EXP 17
6173: PUSH
6174: LD_VAR 0 8
6178: ARRAY
6179: PUSH
6180: FOR_IN
6181: IFFALSE 6238
// begin bc_level := 0 ;
6183: LD_ADDR_OWVAR 43
6187: PUSH
6188: LD_INT 0
6190: ST_TO_ADDR
// bc_type := j [ 1 ] ;
6191: LD_ADDR_OWVAR 42
6195: PUSH
6196: LD_VAR 0 3
6200: PUSH
6201: LD_INT 1
6203: ARRAY
6204: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
6205: LD_VAR 0 3
6209: PUSH
6210: LD_INT 2
6212: ARRAY
6213: PPUSH
6214: LD_VAR 0 3
6218: PUSH
6219: LD_INT 3
6221: ARRAY
6222: PPUSH
6223: LD_VAR 0 3
6227: PUSH
6228: LD_INT 4
6230: ARRAY
6231: PPUSH
6232: CALL_OW 47
// end ;
6236: GO 6180
6238: POP
6239: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
6240: LD_EXP 26
6244: IFFALSE 6264
6246: PUSH
6247: LD_INT 20
6249: PPUSH
6250: LD_VAR 0 7
6254: PPUSH
6255: CALL_OW 321
6259: PUSH
6260: LD_INT 1
6262: EQUAL
6263: AND
6264: IFFALSE 6281
// SetTech ( tech_SibDet , side , state_researched ) ;
6266: LD_INT 20
6268: PPUSH
6269: LD_VAR 0 7
6273: PPUSH
6274: LD_INT 2
6276: PPUSH
6277: CALL_OW 322
// if not mpArtifacts then
6281: LD_EXP 44
6285: NOT
6286: IFFALSE 6303
// SetTech ( tech_artifact , side , state_disabled ) ;
6288: LD_INT 24
6290: PPUSH
6291: LD_VAR 0 7
6295: PPUSH
6296: LD_INT 0
6298: PPUSH
6299: CALL_OW 322
// if mpSibBomb = 1 then
6303: LD_EXP 28
6307: PUSH
6308: LD_INT 1
6310: EQUAL
6311: IFFALSE 6330
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
6313: LD_INT 25
6315: PPUSH
6316: LD_VAR 0 7
6320: PPUSH
6321: LD_INT 1
6323: PPUSH
6324: CALL_OW 322
// end else
6328: GO 6345
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
6330: LD_INT 25
6332: PPUSH
6333: LD_VAR 0 7
6337: PPUSH
6338: LD_INT 0
6340: PPUSH
6341: CALL_OW 322
// end ; if mpVehicles then
6345: LD_EXP 36
6349: IFFALSE 6448
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_VAR 0 7
6360: PPUSH
6361: LD_VAR 0 9
6365: PPUSH
6366: LD_EXP 36
6370: PPUSH
6371: CALL 7671 0 3
6375: PUSH
6376: FOR_IN
6377: IFFALSE 6446
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
6379: LD_VAR 0 3
6383: PPUSH
6384: LD_INT 0
6386: PPUSH
6387: LD_INT 5
6389: PPUSH
6390: CALL_OW 12
6394: PPUSH
6395: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6399: LD_VAR 0 3
6403: PPUSH
6404: LD_EXP 21
6408: PUSH
6409: LD_VAR 0 8
6413: ARRAY
6414: PUSH
6415: LD_INT 1
6417: ARRAY
6418: PPUSH
6419: LD_EXP 21
6423: PUSH
6424: LD_VAR 0 8
6428: ARRAY
6429: PUSH
6430: LD_INT 2
6432: ARRAY
6433: PPUSH
6434: LD_INT 12
6436: PPUSH
6437: LD_INT 0
6439: PPUSH
6440: CALL_OW 50
// end ;
6444: GO 6376
6446: POP
6447: POP
// end ; uc_nation := nation ;
6448: LD_ADDR_OWVAR 21
6452: PUSH
6453: LD_VAR 0 9
6457: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
6458: LD_EXP 3
6462: PUSH
6463: LD_INT 6
6465: PUSH
6466: LD_INT 7
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: IN
6473: IFFALSE 6498
6475: PUSH
6476: LD_EXP 7
6480: PUSH
6481: LD_VAR 0 2
6485: ARRAY
6486: PUSH
6487: LD_INT 1
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: IN
6497: AND
6498: IFFALSE 6546
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
6500: LD_ADDR_VAR 0 11
6504: PUSH
6505: LD_VAR 0 7
6509: PPUSH
6510: LD_VAR 0 9
6514: PPUSH
6515: LD_EXP 24
6519: PUSH
6520: LD_EXP 24
6524: PUSH
6525: LD_INT 2
6527: DIV
6528: PLUS
6529: PPUSH
6530: LD_EXP 25
6534: PUSH
6535: LD_INT 1
6537: PLUS
6538: PPUSH
6539: CALL 7162 0 4
6543: ST_TO_ADDR
6544: GO 6576
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
6546: LD_ADDR_VAR 0 11
6550: PUSH
6551: LD_VAR 0 7
6555: PPUSH
6556: LD_VAR 0 9
6560: PPUSH
6561: LD_EXP 24
6565: PPUSH
6566: LD_EXP 25
6570: PPUSH
6571: CALL 7162 0 4
6575: ST_TO_ADDR
// for j in team do
6576: LD_ADDR_VAR 0 3
6580: PUSH
6581: LD_VAR 0 11
6585: PUSH
6586: FOR_IN
6587: IFFALSE 6636
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6589: LD_VAR 0 3
6593: PPUSH
6594: LD_EXP 21
6598: PUSH
6599: LD_VAR 0 8
6603: ARRAY
6604: PUSH
6605: LD_INT 1
6607: ARRAY
6608: PPUSH
6609: LD_EXP 21
6613: PUSH
6614: LD_VAR 0 8
6618: ARRAY
6619: PUSH
6620: LD_INT 2
6622: ARRAY
6623: PPUSH
6624: LD_INT 12
6626: PPUSH
6627: LD_INT 0
6629: PPUSH
6630: CALL_OW 50
6634: GO 6586
6636: POP
6637: POP
// if mpApemans then
6638: LD_EXP 30
6642: IFFALSE 6748
// begin for j := 1 to mpApemans do
6644: LD_ADDR_VAR 0 3
6648: PUSH
6649: DOUBLE
6650: LD_INT 1
6652: DEC
6653: ST_TO_ADDR
6654: LD_EXP 30
6658: PUSH
6659: FOR_TO
6660: IFFALSE 6746
// begin PrepareApeman ( - 5 ) ;
6662: LD_INT 5
6664: NEG
6665: PPUSH
6666: CALL 49980 0 1
// ape := CreateHuman ;
6670: LD_ADDR_VAR 0 10
6674: PUSH
6675: CALL_OW 44
6679: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
6680: LD_ADDR_EXP 32
6684: PUSH
6685: LD_EXP 32
6689: PPUSH
6690: LD_VAR 0 8
6694: PPUSH
6695: LD_EXP 32
6699: PUSH
6700: LD_VAR 0 8
6704: ARRAY
6705: PPUSH
6706: LD_VAR 0 10
6710: PPUSH
6711: CALL 53853 0 2
6715: PPUSH
6716: CALL_OW 1
6720: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
6721: LD_VAR 0 10
6725: PPUSH
6726: LD_EXP 31
6730: PUSH
6731: LD_VAR 0 8
6735: ARRAY
6736: PPUSH
6737: LD_INT 0
6739: PPUSH
6740: CALL_OW 49
// end ;
6744: GO 6659
6746: POP
6747: POP
// end ; end ;
6748: GO 5314
6750: POP
6751: POP
// if not mpTeamGame then
6752: LD_EXP 11
6756: NOT
6757: IFFALSE 6855
// begin for i := 1 to 8 do
6759: LD_ADDR_VAR 0 2
6763: PUSH
6764: DOUBLE
6765: LD_INT 1
6767: DEC
6768: ST_TO_ADDR
6769: LD_INT 8
6771: PUSH
6772: FOR_TO
6773: IFFALSE 6851
// for j := 1 to 8 do
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: DOUBLE
6781: LD_INT 1
6783: DEC
6784: ST_TO_ADDR
6785: LD_INT 8
6787: PUSH
6788: FOR_TO
6789: IFFALSE 6847
// if i <> j then
6791: LD_VAR 0 2
6795: PUSH
6796: LD_VAR 0 3
6800: NONEQUAL
6801: IFFALSE 6825
// SetAttitude ( i , j , att_neutral , true ) else
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_INT 0
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: CALL_OW 80
6823: GO 6845
// SetAttitude ( i , j , att_friend , true ) ;
6825: LD_VAR 0 2
6829: PPUSH
6830: LD_VAR 0 3
6834: PPUSH
6835: LD_INT 1
6837: PPUSH
6838: LD_INT 1
6840: PPUSH
6841: CALL_OW 80
6845: GO 6788
6847: POP
6848: POP
6849: GO 6772
6851: POP
6852: POP
// end else
6853: GO 7030
// begin if mpSharedVision then
6855: LD_EXP 16
6859: IFFALSE 6924
// begin for i in mpTeams do
6861: LD_ADDR_VAR 0 2
6865: PUSH
6866: LD_EXP 10
6870: PUSH
6871: FOR_IN
6872: IFFALSE 6922
// for j := 2 to i do
6874: LD_ADDR_VAR 0 3
6878: PUSH
6879: DOUBLE
6880: LD_INT 2
6882: DEC
6883: ST_TO_ADDR
6884: LD_VAR 0 2
6888: PUSH
6889: FOR_TO
6890: IFFALSE 6918
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6892: LD_VAR 0 2
6896: PUSH
6897: LD_VAR 0 3
6901: ARRAY
6902: PPUSH
6903: LD_VAR 0 2
6907: PUSH
6908: LD_INT 1
6910: ARRAY
6911: PPUSH
6912: CALL_OW 343
6916: GO 6889
6918: POP
6919: POP
6920: GO 6871
6922: POP
6923: POP
// end ; for i := 1 to 8 do
6924: LD_ADDR_VAR 0 2
6928: PUSH
6929: DOUBLE
6930: LD_INT 1
6932: DEC
6933: ST_TO_ADDR
6934: LD_INT 8
6936: PUSH
6937: FOR_TO
6938: IFFALSE 7028
// for j := 1 to 8 do
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: DOUBLE
6946: LD_INT 1
6948: DEC
6949: ST_TO_ADDR
6950: LD_INT 8
6952: PUSH
6953: FOR_TO
6954: IFFALSE 7024
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
6956: LD_EXP 8
6960: PUSH
6961: LD_VAR 0 2
6965: ARRAY
6966: PUSH
6967: LD_EXP 8
6971: PUSH
6972: LD_VAR 0 3
6976: ARRAY
6977: EQUAL
6978: IFFALSE 7002
// SetAttitude ( i , j , att_friend , true ) else
6980: LD_VAR 0 2
6984: PPUSH
6985: LD_VAR 0 3
6989: PPUSH
6990: LD_INT 1
6992: PPUSH
6993: LD_INT 1
6995: PPUSH
6996: CALL_OW 80
7000: GO 7022
// SetAttitude ( i , j , att_enemy , true ) ;
7002: LD_VAR 0 2
7006: PPUSH
7007: LD_VAR 0 3
7011: PPUSH
7012: LD_INT 2
7014: PPUSH
7015: LD_INT 1
7017: PPUSH
7018: CALL_OW 80
7022: GO 6953
7024: POP
7025: POP
7026: GO 6937
7028: POP
7029: POP
// end ; music_nat := mpSideNations [ your_side ] ;
7030: LD_ADDR_OWVAR 71
7034: PUSH
7035: LD_EXP 9
7039: PUSH
7040: LD_OWVAR 2
7044: ARRAY
7045: ST_TO_ADDR
// if IAmSpec then
7046: CALL_OW 531
7050: IFFALSE 7091
// begin FogOff ( true ) ;
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
7059: LD_EXP 29
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PUSH
7068: LD_INT 2
7070: DIV
7071: PPUSH
7072: LD_EXP 29
7076: PUSH
7077: LD_INT 2
7079: ARRAY
7080: PUSH
7081: LD_INT 2
7083: DIV
7084: PPUSH
7085: CALL_OW 86
// end else
7089: GO 7137
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
7091: LD_EXP 21
7095: PUSH
7096: LD_EXP 7
7100: PUSH
7101: LD_OWVAR 2
7105: ARRAY
7106: ARRAY
7107: PUSH
7108: LD_INT 1
7110: ARRAY
7111: PPUSH
7112: LD_EXP 21
7116: PUSH
7117: LD_EXP 7
7121: PUSH
7122: LD_OWVAR 2
7126: ARRAY
7127: ARRAY
7128: PUSH
7129: LD_INT 2
7131: ARRAY
7132: PPUSH
7133: CALL_OW 86
// end ; BeginBuildUp ;
7137: CALL 8204 0 0
// enable ( mpActive ) ;
7141: LD_INT 100
7143: ENABLE_MARKED
// enable ( mpGameType ) ;
7144: LD_EXP 3
7148: ENABLE_MARKED
// mpGameActive := true ;
7149: LD_ADDR_EXP 39
7153: PUSH
7154: LD_INT 1
7156: ST_TO_ADDR
// end ;
7157: LD_VAR 0 1
7161: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
7162: LD_INT 0
7164: PPUSH
7165: PPUSH
7166: PPUSH
7167: PPUSH
// result := [ ] ;
7168: LD_ADDR_VAR 0 5
7172: PUSH
7173: EMPTY
7174: ST_TO_ADDR
// class := class_soldier ;
7175: LD_ADDR_VAR 0 8
7179: PUSH
7180: LD_INT 1
7182: ST_TO_ADDR
// uc_side := side ;
7183: LD_ADDR_OWVAR 20
7187: PUSH
7188: LD_VAR 0 1
7192: ST_TO_ADDR
// uc_nation := nation ;
7193: LD_ADDR_OWVAR 21
7197: PUSH
7198: LD_VAR 0 2
7202: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
7203: LD_ADDR_OWVAR 26
7207: PUSH
7208: LD_OWVAR 19
7212: PUSH
7213: LD_VAR 0 1
7217: ARRAY
7218: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
7219: LD_INT 1
7221: PPUSH
7222: LD_INT 2
7224: PPUSH
7225: CALL_OW 12
7229: PPUSH
7230: LD_VAR 0 8
7234: PPUSH
7235: LD_VAR 0 4
7239: PUSH
7240: LD_INT 2
7242: PLUS
7243: PPUSH
7244: CALL_OW 380
// hc_importance := 105 ;
7248: LD_ADDR_OWVAR 32
7252: PUSH
7253: LD_INT 105
7255: ST_TO_ADDR
// if Multiplayer then
7256: LD_OWVAR 4
7260: IFFALSE 7300
// begin hc_gallery := MULTIAVATARS ;
7262: LD_ADDR_OWVAR 33
7266: PUSH
7267: LD_STRING MULTIAVATARS
7269: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
7270: LD_ADDR_OWVAR 34
7274: PUSH
7275: LD_VAR 0 1
7279: PPUSH
7280: CALL_OW 525
7284: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
7285: LD_ADDR_OWVAR 27
7289: PUSH
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 526
7299: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
7300: LD_ADDR_VAR 0 5
7304: PUSH
7305: LD_VAR 0 5
7309: PPUSH
7310: CALL_OW 44
7314: PPUSH
7315: CALL 53853 0 2
7319: ST_TO_ADDR
// if mpTeamPreset then
7320: LD_LOC 1
7324: IFFALSE 7420
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
7326: LD_LOC 1
7330: PUSH
7331: LD_INT 1
7333: ARRAY
7334: PPUSH
7335: LD_VAR 0 5
7339: PUSH
7340: LD_VAR 0 5
7344: ARRAY
7345: PPUSH
7346: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
7350: LD_VAR 0 5
7354: PUSH
7355: LD_VAR 0 5
7359: ARRAY
7360: PPUSH
7361: LD_INT 1
7363: PPUSH
7364: LD_LOC 1
7368: PUSH
7369: LD_INT 1
7371: ARRAY
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: CALL_OW 260
7380: PPUSH
7381: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
7385: LD_VAR 0 5
7389: PUSH
7390: LD_VAR 0 5
7394: ARRAY
7395: PPUSH
7396: LD_INT 2
7398: PPUSH
7399: LD_LOC 1
7403: PUSH
7404: LD_INT 1
7406: ARRAY
7407: PPUSH
7408: LD_INT 2
7410: PPUSH
7411: CALL_OW 260
7415: PPUSH
7416: CALL_OW 239
// end ; InitHc_All ( ) ;
7420: CALL_OW 584
// class := 2 ;
7424: LD_ADDR_VAR 0 8
7428: PUSH
7429: LD_INT 2
7431: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
7432: LD_ADDR_VAR 0 6
7436: PUSH
7437: DOUBLE
7438: LD_INT 1
7440: DEC
7441: ST_TO_ADDR
7442: LD_VAR 0 3
7446: PUSH
7447: LD_INT 1
7449: MINUS
7450: PUSH
7451: FOR_TO
7452: IFFALSE 7647
// begin PrepareHuman ( false , class , skill ) ;
7454: LD_INT 0
7456: PPUSH
7457: LD_VAR 0 8
7461: PPUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: CALL_OW 380
// un := CreateHuman ;
7471: LD_ADDR_VAR 0 7
7475: PUSH
7476: CALL_OW 44
7480: ST_TO_ADDR
// result := Join ( result , un ) ;
7481: LD_ADDR_VAR 0 5
7485: PUSH
7486: LD_VAR 0 5
7490: PPUSH
7491: LD_VAR 0 7
7495: PPUSH
7496: CALL 53853 0 2
7500: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
7501: LD_LOC 1
7505: PPUSH
7506: CALL 17887 0 1
7510: PUSH
7511: LD_VAR 0 3
7515: GREATEREQUAL
7516: IFFALSE 7612
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
7518: LD_LOC 1
7522: PUSH
7523: LD_VAR 0 6
7527: PUSH
7528: LD_INT 1
7530: PLUS
7531: ARRAY
7532: PPUSH
7533: LD_VAR 0 7
7537: PPUSH
7538: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
7542: LD_VAR 0 7
7546: PPUSH
7547: LD_INT 1
7549: PPUSH
7550: LD_LOC 1
7554: PUSH
7555: LD_VAR 0 6
7559: PUSH
7560: LD_INT 1
7562: PLUS
7563: ARRAY
7564: PPUSH
7565: LD_INT 1
7567: PPUSH
7568: CALL_OW 260
7572: PPUSH
7573: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
7577: LD_VAR 0 7
7581: PPUSH
7582: LD_INT 2
7584: PPUSH
7585: LD_LOC 1
7589: PUSH
7590: LD_VAR 0 6
7594: PUSH
7595: LD_INT 1
7597: PLUS
7598: ARRAY
7599: PPUSH
7600: LD_INT 2
7602: PPUSH
7603: CALL_OW 260
7607: PPUSH
7608: CALL_OW 239
// end ; class := Inc ( class ) ;
7612: LD_ADDR_VAR 0 8
7616: PUSH
7617: LD_VAR 0 8
7621: PPUSH
7622: CALL 55226 0 1
7626: ST_TO_ADDR
// if class = 5 then
7627: LD_VAR 0 8
7631: PUSH
7632: LD_INT 5
7634: EQUAL
7635: IFFALSE 7645
// class := 1 ;
7637: LD_ADDR_VAR 0 8
7641: PUSH
7642: LD_INT 1
7644: ST_TO_ADDR
// end ;
7645: GO 7451
7647: POP
7648: POP
// if not mpTeamPreset then
7649: LD_LOC 1
7653: NOT
7654: IFFALSE 7666
// mpTeamPreset := result ;
7656: LD_ADDR_LOC 1
7660: PUSH
7661: LD_VAR 0 5
7665: ST_TO_ADDR
// end ;
7666: LD_VAR 0 5
7670: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
7671: LD_INT 0
7673: PPUSH
7674: PPUSH
// result := [ ] ;
7675: LD_ADDR_VAR 0 4
7679: PUSH
7680: EMPTY
7681: ST_TO_ADDR
// if not vehicles then
7682: LD_VAR 0 3
7686: NOT
7687: IFFALSE 7691
// exit ;
7689: GO 7905
// for i := 1 to vehicles [ nation ] do
7691: LD_ADDR_VAR 0 5
7695: PUSH
7696: DOUBLE
7697: LD_INT 1
7699: DEC
7700: ST_TO_ADDR
7701: LD_VAR 0 3
7705: PUSH
7706: LD_VAR 0 2
7710: ARRAY
7711: PUSH
7712: FOR_TO
7713: IFFALSE 7903
// begin uc_side := side ;
7715: LD_ADDR_OWVAR 20
7719: PUSH
7720: LD_VAR 0 1
7724: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
7725: LD_VAR 0 3
7729: PUSH
7730: LD_VAR 0 2
7734: ARRAY
7735: PUSH
7736: LD_VAR 0 5
7740: ARRAY
7741: PPUSH
7742: CALL 17887 0 1
7746: PUSH
7747: LD_INT 4
7749: GREATER
7750: IFFALSE 7780
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
7752: LD_ADDR_OWVAR 21
7756: PUSH
7757: LD_VAR 0 3
7761: PUSH
7762: LD_VAR 0 2
7766: ARRAY
7767: PUSH
7768: LD_VAR 0 5
7772: ARRAY
7773: PUSH
7774: LD_INT 5
7776: ARRAY
7777: ST_TO_ADDR
7778: GO 7790
// uc_nation := nation ;
7780: LD_ADDR_OWVAR 21
7784: PUSH
7785: LD_VAR 0 2
7789: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
7790: LD_VAR 0 3
7794: PUSH
7795: LD_VAR 0 2
7799: ARRAY
7800: PUSH
7801: LD_VAR 0 5
7805: ARRAY
7806: PUSH
7807: LD_INT 1
7809: ARRAY
7810: PPUSH
7811: LD_VAR 0 3
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: PUSH
7822: LD_VAR 0 5
7826: ARRAY
7827: PUSH
7828: LD_INT 2
7830: ARRAY
7831: PPUSH
7832: LD_VAR 0 3
7836: PUSH
7837: LD_VAR 0 2
7841: ARRAY
7842: PUSH
7843: LD_VAR 0 5
7847: ARRAY
7848: PUSH
7849: LD_INT 3
7851: ARRAY
7852: PPUSH
7853: LD_VAR 0 3
7857: PUSH
7858: LD_VAR 0 2
7862: ARRAY
7863: PUSH
7864: LD_VAR 0 5
7868: ARRAY
7869: PUSH
7870: LD_INT 4
7872: ARRAY
7873: PPUSH
7874: LD_INT 80
7876: PPUSH
7877: CALL 20683 0 5
// result := Join ( result , CreateVehicle ) ;
7881: LD_ADDR_VAR 0 4
7885: PUSH
7886: LD_VAR 0 4
7890: PPUSH
7891: CALL_OW 45
7895: PPUSH
7896: CALL 53853 0 2
7900: ST_TO_ADDR
// end ;
7901: GO 7712
7903: POP
7904: POP
// end ;
7905: LD_VAR 0 4
7909: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
7910: LD_INT 0
7912: PPUSH
7913: PPUSH
// for i in mpBattleFlags do
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_EXP 23
7923: PUSH
7924: FOR_IN
7925: IFFALSE 8002
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
7927: LD_VAR 0 3
7931: PPUSH
7932: LD_INT 1
7934: PUSH
7935: LD_VAR 0 1
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 2
7946: PUSH
7947: LD_VAR 0 1
7951: PUSH
7952: LD_REAL  7.00000000000000E-0001
7955: MUL
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 3
7963: PUSH
7964: LD_VAR 0 1
7968: PUSH
7969: LD_REAL  4.00000000000000E-0001
7972: MUL
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 20
7980: PUSH
7981: LD_VAR 0 1
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: PPUSH
7996: CALL_OW 423
8000: GO 7924
8002: POP
8003: POP
// end ;
8004: LD_VAR 0 2
8008: RET
// every 0 0$1 trigger mpActive do var i , strength ;
8009: LD_INT 100
8011: IFFALSE 8106
8013: GO 8015
8015: DISABLE
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
// begin if mpBattleFlag <= 0 then
8020: LD_EXP 22
8024: PUSH
8025: LD_INT 0
8027: LESSEQUAL
8028: IFFALSE 8032
// exit ;
8030: GO 8106
// strength := 100 ;
8032: LD_ADDR_VAR 0 2
8036: PUSH
8037: LD_INT 100
8039: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
8040: LD_EXP 22
8044: PPUSH
8045: CALL_OW 67
// strength := Dec ( strength ) ;
8049: LD_ADDR_VAR 0 2
8053: PUSH
8054: LD_VAR 0 2
8058: PPUSH
8059: CALL 55248 0 1
8063: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
8064: LD_VAR 0 2
8068: PPUSH
8069: CALL 7910 0 1
// until not strength ;
8073: LD_VAR 0 2
8077: NOT
8078: IFFALSE 8040
// for i in mpBattleFlags do
8080: LD_ADDR_VAR 0 1
8084: PUSH
8085: LD_EXP 23
8089: PUSH
8090: FOR_IN
8091: IFFALSE 8104
// KillBattleFlag ( i ) ;
8093: LD_VAR 0 1
8097: PPUSH
8098: CALL_OW 419
8102: GO 8090
8104: POP
8105: POP
// end ;
8106: PPOPN 2
8108: END
// every 0 0$1 marked mpActive do var side , tmp ;
8109: GO 8111
8111: DISABLE
8112: LD_INT 0
8114: PPUSH
8115: PPUSH
// begin if mpSibBomb <= 1 then
8116: LD_EXP 28
8120: PUSH
8121: LD_INT 1
8123: LESSEQUAL
8124: IFFALSE 8128
// exit ;
8126: GO 8201
// tmp := mpSibBomb ;
8128: LD_ADDR_VAR 0 2
8132: PUSH
8133: LD_EXP 28
8137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 67
// tmp := tmp - 0 0$1 ;
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_VAR 0 2
8154: PUSH
8155: LD_INT 35
8157: MINUS
8158: ST_TO_ADDR
// until not tmp ;
8159: LD_VAR 0 2
8163: NOT
8164: IFFALSE 8138
// for side := 1 to 8 do
8166: LD_ADDR_VAR 0 1
8170: PUSH
8171: DOUBLE
8172: LD_INT 1
8174: DEC
8175: ST_TO_ADDR
8176: LD_INT 8
8178: PUSH
8179: FOR_TO
8180: IFFALSE 8199
// SetTech ( tech_SibFiss , side , state_enabled ) ;
8182: LD_INT 25
8184: PPUSH
8185: LD_VAR 0 1
8189: PPUSH
8190: LD_INT 1
8192: PPUSH
8193: CALL_OW 322
8197: GO 8179
8199: POP
8200: POP
// end ;
8201: PPOPN 2
8203: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
8204: LD_INT 0
8206: PPUSH
8207: PPUSH
8208: PPUSH
// mpBuildUpTimeDelay := 0 ;
8209: LD_ADDR_EXP 47
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// if not mpBuildUpTime then
8217: LD_EXP 20
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8415
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
8226: LD_ADDR_EXP 47
8230: PUSH
8231: LD_INT 8400
8233: PUSH
8234: LD_INT 2100
8236: PUSH
8237: LD_EXP 20
8241: MUL
8242: PLUS
8243: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
8244: LD_ADDR_EXP 48
8248: PUSH
8249: LD_INT 1
8251: ST_TO_ADDR
// for i := 1 to 8 do
8252: LD_ADDR_VAR 0 2
8256: PUSH
8257: DOUBLE
8258: LD_INT 1
8260: DEC
8261: ST_TO_ADDR
8262: LD_INT 8
8264: PUSH
8265: FOR_TO
8266: IFFALSE 8413
// if mpSidePositions [ i ] then
8268: LD_EXP 7
8272: PUSH
8273: LD_VAR 0 2
8277: ARRAY
8278: IFFALSE 8411
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
8280: LD_EXP 19
8284: PUSH
8285: LD_EXP 7
8289: PUSH
8290: LD_VAR 0 2
8294: ARRAY
8295: ARRAY
8296: PPUSH
8297: LD_INT 5
8299: PPUSH
8300: CALL_OW 424
// for j := 1 to 8 do
8304: LD_ADDR_VAR 0 3
8308: PUSH
8309: DOUBLE
8310: LD_INT 1
8312: DEC
8313: ST_TO_ADDR
8314: LD_INT 8
8316: PUSH
8317: FOR_TO
8318: IFFALSE 8409
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8320: LD_EXP 7
8324: PUSH
8325: LD_VAR 0 3
8329: ARRAY
8330: IFFALSE 8379
8332: PUSH
8333: LD_EXP 8
8337: PUSH
8338: LD_VAR 0 2
8342: ARRAY
8343: PUSH
8344: LD_EXP 8
8348: PUSH
8349: LD_VAR 0 3
8353: ARRAY
8354: NONEQUAL
8355: IFTRUE 8378
8357: PUSH
8358: LD_EXP 11
8362: NOT
8363: IFFALSE 8377
8365: PUSH
8366: LD_VAR 0 2
8370: PUSH
8371: LD_VAR 0 3
8375: NONEQUAL
8376: AND
8377: OR
8378: AND
8379: IFFALSE 8407
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8381: LD_VAR 0 3
8385: PPUSH
8386: LD_EXP 19
8390: PUSH
8391: LD_EXP 7
8395: PUSH
8396: LD_VAR 0 2
8400: ARRAY
8401: ARRAY
8402: PPUSH
8403: CALL_OW 333
8407: GO 8317
8409: POP
8410: POP
// end ;
8411: GO 8265
8413: POP
8414: POP
// end ;
8415: LD_VAR 0 1
8419: RET
// function EndBuildUp ; var i , j ; begin
8420: LD_INT 0
8422: PPUSH
8423: PPUSH
8424: PPUSH
// mpBuildUpTimeActive := false ;
8425: LD_ADDR_EXP 48
8429: PUSH
8430: LD_INT 0
8432: ST_TO_ADDR
// for i := 1 to 8 do
8433: LD_ADDR_VAR 0 2
8437: PUSH
8438: DOUBLE
8439: LD_INT 1
8441: DEC
8442: ST_TO_ADDR
8443: LD_INT 8
8445: PUSH
8446: FOR_TO
8447: IFFALSE 8594
// if mpSidePositions [ i ] then
8449: LD_EXP 7
8453: PUSH
8454: LD_VAR 0 2
8458: ARRAY
8459: IFFALSE 8592
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
8461: LD_EXP 19
8465: PUSH
8466: LD_EXP 7
8470: PUSH
8471: LD_VAR 0 2
8475: ARRAY
8476: ARRAY
8477: PPUSH
8478: LD_INT 0
8480: PPUSH
8481: CALL_OW 424
// for j := 1 to 8 do
8485: LD_ADDR_VAR 0 3
8489: PUSH
8490: DOUBLE
8491: LD_INT 1
8493: DEC
8494: ST_TO_ADDR
8495: LD_INT 8
8497: PUSH
8498: FOR_TO
8499: IFFALSE 8590
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8501: LD_EXP 7
8505: PUSH
8506: LD_VAR 0 3
8510: ARRAY
8511: IFFALSE 8560
8513: PUSH
8514: LD_EXP 8
8518: PUSH
8519: LD_VAR 0 2
8523: ARRAY
8524: PUSH
8525: LD_EXP 8
8529: PUSH
8530: LD_VAR 0 3
8534: ARRAY
8535: NONEQUAL
8536: IFTRUE 8559
8538: PUSH
8539: LD_EXP 11
8543: NOT
8544: IFFALSE 8558
8546: PUSH
8547: LD_VAR 0 2
8551: PUSH
8552: LD_VAR 0 3
8556: NONEQUAL
8557: AND
8558: OR
8559: AND
8560: IFFALSE 8588
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8562: LD_VAR 0 3
8566: PPUSH
8567: LD_EXP 19
8571: PUSH
8572: LD_EXP 7
8576: PUSH
8577: LD_VAR 0 2
8581: ARRAY
8582: ARRAY
8583: PPUSH
8584: CALL_OW 334
8588: GO 8498
8590: POP
8591: POP
// end ;
8592: GO 8446
8594: POP
8595: POP
// end ;
8596: LD_VAR 0 1
8600: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
8601: LD_EXP 48
8605: IFFALSE 8784
8607: GO 8609
8609: DISABLE
8610: LD_INT 0
8612: PPUSH
8613: PPUSH
// begin for i := 1 to 8 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 8
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8781
// if mpSidePositions [ i ] then
8630: LD_EXP 7
8634: PUSH
8635: LD_VAR 0 1
8639: ARRAY
8640: IFFALSE 8779
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
8642: LD_ADDR_VAR 0 2
8646: PUSH
8647: LD_EXP 19
8651: PUSH
8652: LD_EXP 7
8656: PUSH
8657: LD_VAR 0 1
8661: ARRAY
8662: ARRAY
8663: PPUSH
8664: LD_INT 2
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 21
8679: PUSH
8680: LD_INT 2
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: PUSH
8692: LD_INT 22
8694: PUSH
8695: LD_OWVAR 2
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 70
8712: PUSH
8713: FOR_IN
8714: IFFALSE 8777
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
8716: LD_EXP 8
8720: PUSH
8721: LD_VAR 0 1
8725: ARRAY
8726: PUSH
8727: LD_EXP 8
8731: PUSH
8732: LD_OWVAR 2
8736: ARRAY
8737: NONEQUAL
8738: IFTRUE 8761
8740: PUSH
8741: LD_EXP 11
8745: NOT
8746: IFFALSE 8760
8748: PUSH
8749: LD_VAR 0 1
8753: PUSH
8754: LD_OWVAR 2
8758: NONEQUAL
8759: AND
8760: OR
8761: IFFALSE 8775
// ComMoveToArea ( un , BuildUpEscape ) ;
8763: LD_VAR 0 2
8767: PPUSH
8768: LD_INT 3
8770: PPUSH
8771: CALL_OW 113
8775: GO 8713
8777: POP
8778: POP
8779: GO 8627
8781: POP
8782: POP
// enable ;
8783: ENABLE
// end ;
8784: PPOPN 2
8786: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
8787: LD_EXP 20
8791: IFFALSE 8841
8793: GO 8795
8795: DISABLE
8796: LD_INT 0
8798: PPUSH
// begin tmp := mpBuildUpTime ;
8799: LD_ADDR_VAR 0 1
8803: PUSH
8804: LD_EXP 20
8808: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8809: LD_INT 35
8811: PPUSH
8812: CALL_OW 67
// tmp := tmp - 0 0$1 ;
8816: LD_ADDR_VAR 0 1
8820: PUSH
8821: LD_VAR 0 1
8825: PUSH
8826: LD_INT 35
8828: MINUS
8829: ST_TO_ADDR
// until not tmp ;
8830: LD_VAR 0 1
8834: NOT
8835: IFFALSE 8809
// EndBuildUp ;
8837: CALL 8420 0 0
// end ;
8841: PPOPN 1
8843: END
// every 0 0$1 trigger mpActive marked mpWin do
8844: LD_INT 100
8846: IFFALSE 8880
8848: GO 8850
8850: DISABLE
// begin if IAmServer then
8851: CALL_OW 518
8855: IFFALSE 8864
// wait ( 0 0$3 ) ;
8857: LD_INT 105
8859: PPUSH
8860: CALL_OW 67
// if Multiplayer then
8864: LD_OWVAR 4
8868: IFFALSE 8876
// YouWinInMultiplayer else
8870: CALL_OW 106
8874: GO 8880
// YouWin ;
8876: CALL_OW 103
// end ;
8880: END
// export function HasPowerByGameType ( gameType , side ) ; begin
8881: LD_INT 0
8883: PPUSH
// result := false ;
8884: LD_ADDR_VAR 0 3
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
8892: LD_VAR 0 1
8896: PUSH
8897: LD_INT 1
8899: DOUBLE
8900: EQUAL
8901: IFTRUE 8923
8903: LD_INT 5
8905: DOUBLE
8906: EQUAL
8907: IFTRUE 8923
8909: LD_INT 6
8911: DOUBLE
8912: EQUAL
8913: IFTRUE 8923
8915: LD_INT 7
8917: DOUBLE
8918: EQUAL
8919: IFTRUE 8923
8921: GO 8996
8923: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8924: LD_ADDR_VAR 0 3
8928: PUSH
8929: LD_INT 22
8931: PUSH
8932: LD_VAR 0 2
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: LD_INT 21
8946: PUSH
8947: LD_INT 1
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 33
8956: PUSH
8957: LD_INT 3
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 33
8966: PUSH
8967: LD_INT 5
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: PPUSH
8984: CALL_OW 69
8988: PPUSH
8989: CALL 17887 0 1
8993: ST_TO_ADDR
// end ; GameTypeSurvival :
8994: GO 9235
8996: LD_INT 2
8998: DOUBLE
8999: EQUAL
9000: IFTRUE 9004
9002: GO 9134
9004: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: LD_INT 22
9012: PUSH
9013: LD_VAR 0 2
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 30
9027: PUSH
9028: LD_INT 0
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 30
9037: PUSH
9038: LD_INT 1
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PPUSH
9059: CALL 17887 0 1
9063: IFFALSE 9131
9065: PUSH
9066: LD_INT 22
9068: PUSH
9069: LD_VAR 0 2
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 2
9080: PUSH
9081: LD_INT 21
9083: PUSH
9084: LD_INT 1
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 33
9093: PUSH
9094: LD_INT 3
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: PUSH
9101: LD_INT 33
9103: PUSH
9104: LD_INT 5
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PPUSH
9121: CALL_OW 69
9125: PPUSH
9126: CALL 17887 0 1
9130: AND
9131: ST_TO_ADDR
// end ; GameTypeKing :
9132: GO 9235
9134: LD_INT 3
9136: DOUBLE
9137: EQUAL
9138: IFTRUE 9142
9140: GO 9234
9142: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
9143: LD_ADDR_VAR 0 3
9147: PUSH
9148: LD_INT 22
9150: PUSH
9151: LD_VAR 0 2
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 2
9162: PUSH
9163: LD_INT 21
9165: PUSH
9166: LD_INT 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 33
9175: PUSH
9176: LD_INT 3
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 33
9185: PUSH
9186: LD_INT 5
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PPUSH
9208: CALL 17887 0 1
9212: IFFALSE 9231
9214: PUSH
9215: LD_VAR 0 2
9219: PPUSH
9220: CALL 15003 0 1
9224: PUSH
9225: LD_EXP 35
9229: LESS
9230: AND
9231: ST_TO_ADDR
// end ; end ;
9232: GO 9235
9234: POP
// end ;
9235: LD_VAR 0 3
9239: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
9240: LD_INT 100
9242: IFFALSE 9472
9244: GO 9246
9246: DISABLE
9247: LD_INT 0
9249: PPUSH
9250: PPUSH
// begin if Multiplayer then
9251: LD_OWVAR 4
9255: IFFALSE 9263
// SetPlayerSpectator ( ) else
9257: CALL_OW 572
9261: GO 9272
// FogOff ( your_side ) ;
9263: LD_OWVAR 2
9267: PPUSH
9268: CALL_OW 344
// repeat gameIsOn := false ;
9272: LD_ADDR_VAR 0 1
9276: PUSH
9277: LD_INT 0
9279: ST_TO_ADDR
// for i := 1 to 8 do
9280: LD_ADDR_VAR 0 2
9284: PUSH
9285: DOUBLE
9286: LD_INT 1
9288: DEC
9289: ST_TO_ADDR
9290: LD_INT 8
9292: PUSH
9293: FOR_TO
9294: IFFALSE 9424
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9296: LD_EXP 7
9300: PUSH
9301: LD_VAR 0 2
9305: ARRAY
9306: IFFALSE 9319
9308: PUSH
9309: LD_VAR 0 2
9313: PPUSH
9314: CALL_OW 108
9318: AND
9319: IFFALSE 9333
9321: PUSH
9322: LD_VAR 0 2
9326: PUSH
9327: LD_OWVAR 2
9331: NONEQUAL
9332: AND
9333: IFFALSE 9422
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9335: LD_EXP 8
9339: PUSH
9340: LD_VAR 0 2
9344: ARRAY
9345: NOT
9346: IFTRUE 9394
9348: PUSH
9349: LD_EXP 8
9353: PUSH
9354: LD_VAR 0 2
9358: ARRAY
9359: PUSH
9360: LD_EXP 8
9364: PUSH
9365: LD_OWVAR 2
9369: ARRAY
9370: NONEQUAL
9371: IFFALSE 9393
9373: PUSH
9374: LD_OWVAR 2
9378: PPUSH
9379: LD_VAR 0 2
9383: PPUSH
9384: CALL_OW 81
9388: PUSH
9389: LD_INT 1
9391: NONEQUAL
9392: AND
9393: OR
9394: IFFALSE 9422
// if HasPowerByGameType ( mpGameType , i ) then
9396: LD_EXP 3
9400: PPUSH
9401: LD_VAR 0 2
9405: PPUSH
9406: CALL 8881 0 2
9410: IFFALSE 9422
// begin gameIsOn := true ;
9412: LD_ADDR_VAR 0 1
9416: PUSH
9417: LD_INT 1
9419: ST_TO_ADDR
// break ;
9420: GO 9424
// end ;
9422: GO 9293
9424: POP
9425: POP
// wait ( 100 ) ;
9426: LD_INT 100
9428: PPUSH
9429: CALL_OW 67
// until not gameIsOn ;
9433: LD_VAR 0 1
9437: NOT
9438: IFFALSE 9272
// if IAmServer then
9440: CALL_OW 518
9444: IFFALSE 9453
// wait ( 0 0$3 ) ;
9446: LD_INT 105
9448: PPUSH
9449: CALL_OW 67
// if Multiplayer then
9453: LD_OWVAR 4
9457: IFFALSE 9465
// YouLostInMultiplayer else
9459: CALL_OW 107
9463: GO 9472
// YouLost (  ) ;
9465: LD_STRING 
9467: PPUSH
9468: CALL_OW 104
// end ;
9472: PPOPN 2
9474: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
9475: LD_EXP 33
9479: IFFALSE 9863
9481: GO 9483
9483: DISABLE
9484: LD_INT 0
9486: PPUSH
9487: PPUSH
9488: PPUSH
9489: PPUSH
9490: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
9491: LD_ADDR_VAR 0 5
9495: PUSH
9496: LD_INT 1
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: LD_INT 3
9504: PUSH
9505: LD_INT 4
9507: PUSH
9508: LD_INT 5
9510: PUSH
9511: LD_INT 6
9513: PUSH
9514: LD_INT 7
9516: PUSH
9517: LD_INT 8
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
9530: LD_INT 350
9532: PPUSH
9533: CALL_OW 67
// for i := 1 to 8 do
9537: LD_ADDR_VAR 0 1
9541: PUSH
9542: DOUBLE
9543: LD_INT 1
9545: DEC
9546: ST_TO_ADDR
9547: LD_INT 8
9549: PUSH
9550: FOR_TO
9551: IFFALSE 9833
// begin j := sides [ i ] ;
9553: LD_ADDR_VAR 0 2
9557: PUSH
9558: LD_VAR 0 5
9562: PUSH
9563: LD_VAR 0 1
9567: ARRAY
9568: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
9569: LD_EXP 40
9573: PUSH
9574: LD_VAR 0 2
9578: ARRAY
9579: PPUSH
9580: CALL 17887 0 1
9584: IFFALSE 9597
9586: PUSH
9587: LD_VAR 0 2
9591: PPUSH
9592: CALL_OW 108
9596: AND
9597: IFFALSE 9615
9599: PUSH
9600: LD_EXP 3
9604: PPUSH
9605: LD_VAR 0 2
9609: PPUSH
9610: CALL 8881 0 2
9614: AND
9615: IFFALSE 9831
// begin wait ( mpRespawn div 2 ) ;
9617: LD_EXP 33
9621: PUSH
9622: LD_INT 2
9624: DIV
9625: PPUSH
9626: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9630: LD_ADDR_VAR 0 3
9634: PUSH
9635: LD_INT 22
9637: PUSH
9638: LD_VAR 0 2
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 50
9649: PUSH
9650: EMPTY
9651: LIST
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 30
9658: PUSH
9659: LD_INT 0
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 30
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 69
9690: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
9691: LD_VAR 0 3
9695: NOT
9696: IFTRUE 9710
9698: PUSH
9699: LD_VAR 0 2
9703: PPUSH
9704: CALL_OW 108
9708: NOT
9709: OR
9710: IFTRUE 9729
9712: PUSH
9713: LD_EXP 3
9717: PPUSH
9718: LD_VAR 0 2
9722: PPUSH
9723: CALL 8881 0 2
9727: NOT
9728: OR
9729: IFFALSE 9733
// continue ;
9731: GO 9550
// spawn := tmp [ 1 ] ;
9733: LD_ADDR_VAR 0 4
9737: PUSH
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 1
9745: ARRAY
9746: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
9747: LD_EXP 40
9751: PUSH
9752: LD_VAR 0 2
9756: ARRAY
9757: PUSH
9758: LD_INT 1
9760: ARRAY
9761: PPUSH
9762: LD_VAR 0 4
9766: PPUSH
9767: CALL_OW 250
9771: PPUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 251
9781: PPUSH
9782: LD_INT 32
9784: PPUSH
9785: LD_INT 1
9787: PPUSH
9788: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
9792: LD_ADDR_EXP 40
9796: PUSH
9797: LD_EXP 40
9801: PPUSH
9802: LD_VAR 0 2
9806: PPUSH
9807: LD_EXP 40
9811: PUSH
9812: LD_VAR 0 2
9816: ARRAY
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: CALL_OW 3
9825: PPUSH
9826: CALL_OW 1
9830: ST_TO_ADDR
// end ; end ;
9831: GO 9550
9833: POP
9834: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
9835: LD_ADDR_VAR 0 5
9839: PUSH
9840: LD_VAR 0 5
9844: PPUSH
9845: LD_INT 1
9847: PPUSH
9848: LD_INT 8
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: CALL 20213 0 4
9858: ST_TO_ADDR
// until false ;
9859: LD_INT 0
9861: IFFALSE 9530
// end ;
9863: PPOPN 5
9865: END
// every 0 0$1 marked mpActive do
9866: GO 9868
9868: DISABLE
// begin enable ;
9869: ENABLE
// if not mpDisplayStrings then
9870: LD_EXP 38
9874: NOT
9875: IFFALSE 9886
// begin display_strings := [ ] ;
9877: LD_ADDR_OWVAR 47
9881: PUSH
9882: EMPTY
9883: ST_TO_ADDR
// exit ;
9884: GO 9896
// end ; display_strings := mpDisplayStrings ;
9886: LD_ADDR_OWVAR 47
9890: PUSH
9891: LD_EXP 38
9895: ST_TO_ADDR
// end ; end_of_file
9896: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
9903: PPUSH
9904: PPUSH
9905: PPUSH
9906: PPUSH
9907: PPUSH
// if GetType ( un ) = unit_vehicle then
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 247
9917: PUSH
9918: LD_INT 2
9920: EQUAL
9921: IFFALSE 9925
// exit ;
9923: GO 10599
// side := GetSide ( un ) ;
9925: LD_ADDR_VAR 0 9
9929: PUSH
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 255
9939: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
9940: LD_EXP 3
9944: PUSH
9945: LD_INT 2
9947: EQUAL
9948: IFFALSE 10042
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 266
9959: PUSH
9960: LD_INT 0
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: IN
9970: IFFALSE 10042
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9972: LD_ADDR_VAR 0 3
9976: PUSH
9977: LD_INT 22
9979: PUSH
9980: LD_VAR 0 9
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 33
10004: PUSH
10005: LD_INT 3
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 69
10025: PUSH
10026: FOR_IN
10027: IFFALSE 10040
// KillUnit ( i ) ;
10029: LD_VAR 0 3
10033: PPUSH
10034: CALL_OW 66
10038: GO 10026
10040: POP
10041: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
10042: LD_VAR 0 1
10046: PPUSH
10047: CALL_OW 257
10051: PUSH
10052: LD_INT 12
10054: PUSH
10055: LD_INT 17
10057: PUSH
10058: LD_INT 15
10060: PUSH
10061: LD_INT 16
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: IN
10070: IFTRUE 10087
10072: PUSH
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 263
10082: PUSH
10083: LD_INT 5
10085: EQUAL
10086: OR
10087: IFFALSE 10324
// begin tag := 0 ;
10089: LD_ADDR_VAR 0 5
10093: PUSH
10094: LD_INT 0
10096: ST_TO_ADDR
// for i := 1 to 8 do
10097: LD_ADDR_VAR 0 3
10101: PUSH
10102: DOUBLE
10103: LD_INT 1
10105: DEC
10106: ST_TO_ADDR
10107: LD_INT 8
10109: PUSH
10110: FOR_TO
10111: IFFALSE 10145
// if un in mpApePosIndex [ i ] then
10113: LD_VAR 0 1
10117: PUSH
10118: LD_EXP 32
10122: PUSH
10123: LD_VAR 0 3
10127: ARRAY
10128: IN
10129: IFFALSE 10143
// begin tag := i ;
10131: LD_ADDR_VAR 0 5
10135: PUSH
10136: LD_VAR 0 3
10140: ST_TO_ADDR
// break ;
10141: GO 10145
// end ;
10143: GO 10110
10145: POP
10146: POP
// if not tag then
10147: LD_VAR 0 5
10151: NOT
10152: IFFALSE 10156
// exit ;
10154: GO 10599
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
10156: LD_ADDR_VAR 0 7
10160: PUSH
10161: LD_EXP 31
10165: PUSH
10166: LD_EXP 7
10170: PUSH
10171: LD_VAR 0 5
10175: ARRAY
10176: ARRAY
10177: ST_TO_ADDR
// if not area then
10178: LD_VAR 0 7
10182: NOT
10183: IFFALSE 10187
// exit ;
10185: GO 10599
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
10187: LD_INT 14700
10189: PUSH
10190: LD_VAR 0 1
10194: PUSH
10195: LD_INT 5
10197: MOD
10198: PUSH
10199: LD_INT 1
10201: PLUS
10202: PUSH
10203: LD_INT 700
10205: MUL
10206: PLUS
10207: PPUSH
10208: CALL_OW 67
// repeat wait ( 10 ) ;
10212: LD_INT 10
10214: PPUSH
10215: CALL_OW 67
// until not mpBlockRespThread ;
10219: LD_EXP 46
10223: NOT
10224: IFFALSE 10212
// mpBlockRespThread := true ;
10226: LD_ADDR_EXP 46
10230: PUSH
10231: LD_INT 1
10233: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
10234: LD_INT 0
10236: PPUSH
10237: CALL 49980 0 1
// ape := CreateHuman ;
10241: LD_ADDR_VAR 0 4
10245: PUSH
10246: CALL_OW 44
10250: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
10251: LD_ADDR_EXP 32
10255: PUSH
10256: LD_EXP 32
10260: PPUSH
10261: LD_VAR 0 5
10265: PPUSH
10266: LD_EXP 32
10270: PUSH
10271: LD_VAR 0 5
10275: ARRAY
10276: PPUSH
10277: LD_VAR 0 4
10281: PPUSH
10282: CALL 53853 0 2
10286: PPUSH
10287: CALL_OW 1
10291: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10292: LD_VAR 0 4
10296: PPUSH
10297: LD_VAR 0 7
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 49
// wait ( 10 ) ;
10309: LD_INT 10
10311: PPUSH
10312: CALL_OW 67
// mpBlockRespThread := false ;
10316: LD_ADDR_EXP 46
10320: PUSH
10321: LD_INT 0
10323: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 247
10333: PUSH
10334: LD_INT 1
10336: EQUAL
10337: IFFALSE 10354
10339: PUSH
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 248
10349: PUSH
10350: LD_INT 0
10352: GREATER
10353: AND
10354: IFFALSE 10599
// begin if not mpRespawn then
10356: LD_EXP 33
10360: NOT
10361: IFFALSE 10365
// exit ;
10363: GO 10599
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
10365: LD_VAR 0 9
10369: PPUSH
10370: CALL_OW 108
10374: NOT
10375: IFFALSE 10394
10377: PUSH
10378: LD_EXP 3
10382: PPUSH
10383: LD_VAR 0 9
10387: PPUSH
10388: CALL 8881 0 2
10392: NOT
10393: AND
10394: IFFALSE 10398
// exit ;
10396: GO 10599
// side := GetSide ( un ) ;
10398: LD_ADDR_VAR 0 9
10402: PUSH
10403: LD_VAR 0 1
10407: PPUSH
10408: CALL_OW 255
10412: ST_TO_ADDR
// nation := GetNation ( un ) ;
10413: LD_ADDR_VAR 0 8
10417: PUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 248
10427: ST_TO_ADDR
// class := GetClass ( un ) ;
10428: LD_ADDR_VAR 0 6
10432: PUSH
10433: LD_VAR 0 1
10437: PPUSH
10438: CALL_OW 257
10442: ST_TO_ADDR
// if class > 4 then
10443: LD_VAR 0 6
10447: PUSH
10448: LD_INT 4
10450: GREATER
10451: IFFALSE 10461
// class := 1 ;
10453: LD_ADDR_VAR 0 6
10457: PUSH
10458: LD_INT 1
10460: ST_TO_ADDR
// repeat wait ( 10 ) ;
10461: LD_INT 10
10463: PPUSH
10464: CALL_OW 67
// until not mpBlockRespThread ;
10468: LD_EXP 46
10472: NOT
10473: IFFALSE 10461
// mpBlockRespThread := true ;
10475: LD_ADDR_EXP 46
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// uc_side := side ;
10483: LD_ADDR_OWVAR 20
10487: PUSH
10488: LD_VAR 0 9
10492: ST_TO_ADDR
// uc_nation := nation ;
10493: LD_ADDR_OWVAR 21
10497: PUSH
10498: LD_VAR 0 8
10502: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
10503: LD_INT 0
10505: PPUSH
10506: LD_VAR 0 6
10510: PPUSH
10511: LD_INT 2
10513: PPUSH
10514: CALL_OW 380
// un := CreateHuman ;
10518: LD_ADDR_VAR 0 1
10522: PUSH
10523: CALL_OW 44
10527: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
10528: LD_ADDR_EXP 40
10532: PUSH
10533: LD_EXP 40
10537: PPUSH
10538: LD_VAR 0 9
10542: PPUSH
10543: LD_EXP 40
10547: PUSH
10548: LD_VAR 0 9
10552: ARRAY
10553: PPUSH
10554: LD_EXP 40
10558: PUSH
10559: LD_VAR 0 9
10563: ARRAY
10564: PUSH
10565: LD_INT 1
10567: PLUS
10568: PPUSH
10569: LD_VAR 0 1
10573: PPUSH
10574: CALL_OW 1
10578: PPUSH
10579: CALL_OW 1
10583: ST_TO_ADDR
// wait ( 10 ) ;
10584: LD_INT 10
10586: PPUSH
10587: CALL_OW 67
// mpBlockRespThread := false ;
10591: LD_ADDR_EXP 46
10595: PUSH
10596: LD_INT 0
10598: ST_TO_ADDR
// end ; end ;
10599: LD_VAR 0 2
10603: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
10604: LD_INT 0
10606: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
10607: LD_VAR 0 1
10611: PPUSH
10612: CALL_OW 266
10616: PUSH
10617: LD_INT 0
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: IN
10627: IFFALSE 10652
// SetBName ( building , @ & GetSide ( building ) ) ;
10629: LD_VAR 0 1
10633: PPUSH
10634: LD_STRING @
10636: PUSH
10637: LD_VAR 0 1
10641: PPUSH
10642: CALL_OW 255
10646: STR
10647: PPUSH
10648: CALL_OW 500
// end ;
10652: LD_VAR 0 2
10656: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
10657: LD_INT 0
10659: PPUSH
10660: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
10661: LD_EXP 3
10665: PUSH
10666: LD_INT 2
10668: EQUAL
10669: IFFALSE 10693
10671: PUSH
10672: LD_VAR 0 1
10676: PPUSH
10677: CALL_OW 266
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: LD_INT 1
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: IN
10692: AND
10693: IFFALSE 10772
// begin SetSide ( building , oldSide ) ;
10695: LD_VAR 0 1
10699: PPUSH
10700: LD_VAR 0 2
10704: PPUSH
10705: CALL_OW 235
// KillUnit ( building ) ;
10709: LD_VAR 0 1
10713: PPUSH
10714: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_INT 22
10725: PUSH
10726: LD_VAR 0 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 21
10737: PUSH
10738: LD_INT 1
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PPUSH
10749: CALL_OW 69
10753: PUSH
10754: FOR_IN
10755: IFFALSE 10768
// KillUnit ( i ) ;
10757: LD_VAR 0 5
10761: PPUSH
10762: CALL_OW 66
10766: GO 10754
10768: POP
10769: POP
// exit ;
10770: GO 10817
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
10772: LD_VAR 0 1
10776: PPUSH
10777: CALL_OW 266
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: IN
10792: IFFALSE 10817
// SetBName ( building , @ & GetSide ( building ) ) ;
10794: LD_VAR 0 1
10798: PPUSH
10799: LD_STRING @
10801: PUSH
10802: LD_VAR 0 1
10806: PPUSH
10807: CALL_OW 255
10811: STR
10812: PPUSH
10813: CALL_OW 500
// end ;
10817: LD_VAR 0 4
10821: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
10822: LD_INT 0
10824: PPUSH
10825: PPUSH
10826: PPUSH
// if mpGameType <> GameTypeFamine then
10827: LD_EXP 3
10831: PUSH
10832: LD_INT 5
10834: NONEQUAL
10835: IFFALSE 10839
// exit ;
10837: GO 11054
// for i := 1 to mpGlobalOilDeposits do
10839: LD_ADDR_VAR 0 6
10843: PUSH
10844: DOUBLE
10845: LD_INT 1
10847: DEC
10848: ST_TO_ADDR
10849: LD_EXP 41
10853: PUSH
10854: FOR_TO
10855: IFFALSE 11052
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
10857: LD_EXP 41
10861: PUSH
10862: LD_VAR 0 6
10866: ARRAY
10867: PUSH
10868: LD_INT 1
10870: ARRAY
10871: PPUSH
10872: LD_EXP 41
10876: PUSH
10877: LD_VAR 0 6
10881: ARRAY
10882: PUSH
10883: LD_INT 2
10885: ARRAY
10886: PPUSH
10887: CALL_OW 428
10891: PUSH
10892: LD_VAR 0 1
10896: EQUAL
10897: IFFALSE 11050
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
10899: LD_ADDR_VAR 0 7
10903: PUSH
10904: LD_EXP 41
10908: PUSH
10909: LD_VAR 0 6
10913: ARRAY
10914: PUSH
10915: LD_INT 3
10917: ARRAY
10918: ST_TO_ADDR
// value := value - amount ;
10919: LD_ADDR_VAR 0 7
10923: PUSH
10924: LD_VAR 0 7
10928: PUSH
10929: LD_VAR 0 4
10933: MINUS
10934: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10935: LD_ADDR_EXP 41
10939: PUSH
10940: LD_EXP 41
10944: PPUSH
10945: LD_VAR 0 6
10949: PPUSH
10950: LD_EXP 41
10954: PUSH
10955: LD_VAR 0 6
10959: ARRAY
10960: PPUSH
10961: LD_INT 3
10963: PPUSH
10964: LD_VAR 0 7
10968: PPUSH
10969: CALL_OW 1
10973: PPUSH
10974: CALL_OW 1
10978: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
10979: LD_VAR 0 1
10983: PPUSH
10984: LD_VAR 0 7
10988: PPUSH
10989: CALL_OW 505
// if value <= 0 then
10993: LD_VAR 0 7
10997: PUSH
10998: LD_INT 0
11000: LESSEQUAL
11001: IFFALSE 11050
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
11003: LD_EXP 41
11007: PUSH
11008: LD_VAR 0 6
11012: ARRAY
11013: PUSH
11014: LD_INT 1
11016: ARRAY
11017: PPUSH
11018: LD_EXP 41
11022: PUSH
11023: LD_VAR 0 6
11027: ARRAY
11028: PUSH
11029: LD_INT 2
11031: ARRAY
11032: PPUSH
11033: CALL_OW 63
// KillUnit ( building ) ;
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 66
// exit ;
11046: POP
11047: POP
11048: GO 11054
// end ; end ; end ;
11050: GO 10854
11052: POP
11053: POP
// end ;
11054: LD_VAR 0 5
11058: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
11059: LD_INT 0
11061: PPUSH
11062: PPUSH
11063: PPUSH
// if mpGameType <> GameTypeFamine then
11064: LD_EXP 3
11068: PUSH
11069: LD_INT 5
11071: NONEQUAL
11072: IFFALSE 11076
// exit ;
11074: GO 11291
// for i := 1 to mpGlobalSibDeposits do
11076: LD_ADDR_VAR 0 6
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_EXP 42
11090: PUSH
11091: FOR_TO
11092: IFFALSE 11289
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
11094: LD_EXP 42
11098: PUSH
11099: LD_VAR 0 6
11103: ARRAY
11104: PUSH
11105: LD_INT 1
11107: ARRAY
11108: PPUSH
11109: LD_EXP 42
11113: PUSH
11114: LD_VAR 0 6
11118: ARRAY
11119: PUSH
11120: LD_INT 2
11122: ARRAY
11123: PPUSH
11124: CALL_OW 428
11128: PUSH
11129: LD_VAR 0 1
11133: EQUAL
11134: IFFALSE 11287
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
11136: LD_ADDR_VAR 0 7
11140: PUSH
11141: LD_EXP 42
11145: PUSH
11146: LD_VAR 0 6
11150: ARRAY
11151: PUSH
11152: LD_INT 3
11154: ARRAY
11155: ST_TO_ADDR
// value := value - amount ;
11156: LD_ADDR_VAR 0 7
11160: PUSH
11161: LD_VAR 0 7
11165: PUSH
11166: LD_VAR 0 4
11170: MINUS
11171: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
11172: LD_ADDR_EXP 42
11176: PUSH
11177: LD_EXP 42
11181: PPUSH
11182: LD_VAR 0 6
11186: PPUSH
11187: LD_EXP 42
11191: PUSH
11192: LD_VAR 0 6
11196: ARRAY
11197: PPUSH
11198: LD_INT 3
11200: PPUSH
11201: LD_VAR 0 7
11205: PPUSH
11206: CALL_OW 1
11210: PPUSH
11211: CALL_OW 1
11215: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
11216: LD_VAR 0 1
11220: PPUSH
11221: LD_VAR 0 7
11225: PPUSH
11226: CALL_OW 505
// if value <= 0 then
11230: LD_VAR 0 7
11234: PUSH
11235: LD_INT 0
11237: LESSEQUAL
11238: IFFALSE 11287
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
11240: LD_EXP 42
11244: PUSH
11245: LD_VAR 0 6
11249: ARRAY
11250: PUSH
11251: LD_INT 1
11253: ARRAY
11254: PPUSH
11255: LD_EXP 42
11259: PUSH
11260: LD_VAR 0 6
11264: ARRAY
11265: PUSH
11266: LD_INT 2
11268: ARRAY
11269: PPUSH
11270: CALL_OW 63
// KillUnit ( building ) ;
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 66
// exit ;
11283: POP
11284: POP
11285: GO 11291
// end ; end ; end ;
11287: GO 11091
11289: POP
11290: POP
// end ;
11291: LD_VAR 0 5
11295: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
11296: LD_INT 0
11298: PPUSH
11299: PPUSH
// side := GetSide ( factory ) ;
11300: LD_ADDR_VAR 0 7
11304: PUSH
11305: LD_VAR 0 1
11309: PPUSH
11310: CALL_OW 255
11314: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
11315: LD_VAR 0 5
11319: PUSH
11320: LD_INT 81
11322: EQUAL
11323: IFFALSE 11361
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_VAR 0 7
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 34
11340: PUSH
11341: LD_INT 81
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: PUSH
11357: LD_INT 0
11359: GREATER
11360: AND
11361: IFFALSE 11394
// begin ComCancel ( factory ) ;
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 127
// if side = your_side then
11372: LD_VAR 0 7
11376: PUSH
11377: LD_OWVAR 2
11381: EQUAL
11382: IFFALSE 11394
// HintSpec ( VehLimit , 2 ) ;
11384: LD_STRING VehLimit
11386: PPUSH
11387: LD_INT 2
11389: PPUSH
11390: CALL_OW 338
// end ; end ;
11394: LD_VAR 0 6
11398: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
11399: LD_INT 0
11401: PPUSH
11402: PPUSH
11403: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
11404: LD_VAR 0 1
11408: PPUSH
11409: CALL_OW 264
11413: PUSH
11414: LD_INT 81
11416: EQUAL
11417: IFFALSE 11434
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 263
11429: PUSH
11430: LD_INT 1
11432: EQUAL
11433: AND
11434: IFFALSE 11714
// begin for i := 1 to Count ( minersList ) do
11436: LD_ADDR_VAR 0 6
11440: PUSH
11441: DOUBLE
11442: LD_INT 1
11444: DEC
11445: ST_TO_ADDR
11446: LD_EXP 57
11450: PPUSH
11451: CALL 17887 0 1
11455: PUSH
11456: FOR_TO
11457: IFFALSE 11575
// begin if minersList [ i ] = oldId then
11459: LD_EXP 57
11463: PUSH
11464: LD_VAR 0 6
11468: ARRAY
11469: PUSH
11470: LD_VAR 0 2
11474: EQUAL
11475: IFFALSE 11573
// begin for j := 1 to minerMinesList [ i ] do
11477: LD_ADDR_VAR 0 7
11481: PUSH
11482: DOUBLE
11483: LD_INT 1
11485: DEC
11486: ST_TO_ADDR
11487: LD_EXP 58
11491: PUSH
11492: LD_VAR 0 6
11496: ARRAY
11497: PUSH
11498: FOR_TO
11499: IFFALSE 11549
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
11501: LD_EXP 58
11505: PUSH
11506: LD_VAR 0 6
11510: ARRAY
11511: PUSH
11512: LD_VAR 0 7
11516: ARRAY
11517: PUSH
11518: LD_INT 1
11520: ARRAY
11521: PPUSH
11522: LD_EXP 58
11526: PUSH
11527: LD_VAR 0 6
11531: ARRAY
11532: PUSH
11533: LD_VAR 0 7
11537: ARRAY
11538: PUSH
11539: LD_INT 2
11541: ARRAY
11542: PPUSH
11543: CALL_OW 612
11547: GO 11498
11549: POP
11550: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
11551: LD_ADDR_EXP 58
11555: PUSH
11556: LD_EXP 58
11560: PPUSH
11561: LD_VAR 0 6
11565: PPUSH
11566: CALL_OW 3
11570: ST_TO_ADDR
// break ;
11571: GO 11575
// end ; end ;
11573: GO 11456
11575: POP
11576: POP
// minersList := minersList diff oldId ;
11577: LD_ADDR_EXP 57
11581: PUSH
11582: LD_EXP 57
11586: PUSH
11587: LD_VAR 0 2
11591: DIFF
11592: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
11593: LD_INT 22
11595: PUSH
11596: LD_VAR 0 4
11600: PPUSH
11601: CALL_OW 255
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 34
11612: PUSH
11613: LD_INT 81
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 69
11628: PUSH
11629: LD_INT 1
11631: GREATER
11632: IFFALSE 11659
// begin ComExit ( unit ) ;
11634: LD_VAR 0 4
11638: PPUSH
11639: CALL 54251 0 1
// SetSide ( newId , oldSide ) ;
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: CALL_OW 235
// exit ;
11657: GO 11714
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
11659: LD_ADDR_EXP 57
11663: PUSH
11664: LD_EXP 57
11668: PPUSH
11669: LD_EXP 57
11673: PUSH
11674: LD_INT 1
11676: PLUS
11677: PPUSH
11678: LD_VAR 0 1
11682: PPUSH
11683: CALL_OW 1
11687: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11688: LD_ADDR_EXP 58
11692: PUSH
11693: LD_EXP 58
11697: PPUSH
11698: LD_EXP 58
11702: PUSH
11703: LD_INT 1
11705: PLUS
11706: PPUSH
11707: EMPTY
11708: PPUSH
11709: CALL_OW 1
11713: ST_TO_ADDR
// end ; end ; end_of_file
11714: LD_VAR 0 5
11718: RET
// every 0 0$1 trigger mpGameActive marked GameTypeArmsRace do var i , j , k , techs , hasCameras , cameras , resource , depot , b , un , type , buildings , side , nation ;
11719: LD_EXP 39
11723: IFFALSE 12865
11725: GO 11727
11727: DISABLE
11728: LD_INT 0
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
// begin for i := 1 to 8 do
11744: LD_ADDR_VAR 0 1
11748: PUSH
11749: DOUBLE
11750: LD_INT 1
11752: DEC
11753: ST_TO_ADDR
11754: LD_INT 8
11756: PUSH
11757: FOR_TO
11758: IFFALSE 12659
// begin hasCameras := false ;
11760: LD_ADDR_VAR 0 5
11764: PUSH
11765: LD_INT 0
11767: ST_TO_ADDR
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
11768: LD_EXP 8
11772: PUSH
11773: LD_VAR 0 1
11777: ARRAY
11778: PUSH
11779: LD_INT 1
11781: EQUAL
11782: IFFALSE 11796
11784: PUSH
11785: LD_EXP 7
11789: PUSH
11790: LD_VAR 0 1
11794: ARRAY
11795: AND
11796: IFFALSE 12657
// begin side := i ;
11798: LD_ADDR_VAR 0 13
11802: PUSH
11803: LD_VAR 0 1
11807: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
11808: LD_ADDR_VAR 0 14
11812: PUSH
11813: LD_EXP 9
11817: PUSH
11818: LD_VAR 0 1
11822: ARRAY
11823: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
11824: LD_ADDR_VAR 0 8
11828: PUSH
11829: LD_INT 22
11831: PUSH
11832: LD_VAR 0 13
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 69
11859: ST_TO_ADDR
// for j := 1 to mpStartingResources do
11860: LD_ADDR_VAR 0 2
11864: PUSH
11865: DOUBLE
11866: LD_INT 1
11868: DEC
11869: ST_TO_ADDR
11870: LD_EXP 15
11874: PUSH
11875: FOR_TO
11876: IFFALSE 11943
// begin resource := mpStartingResources [ j ] ;
11878: LD_ADDR_VAR 0 7
11882: PUSH
11883: LD_EXP 15
11887: PUSH
11888: LD_VAR 0 2
11892: ARRAY
11893: ST_TO_ADDR
// if not resource then
11894: LD_VAR 0 7
11898: NOT
11899: IFFALSE 11909
// resource := 30 ;
11901: LD_ADDR_VAR 0 7
11905: PUSH
11906: LD_INT 30
11908: ST_TO_ADDR
// SetResourceType ( GetBase ( depot [ 1 ] ) , j , resource * 2 ) ;
11909: LD_VAR 0 8
11913: PUSH
11914: LD_INT 1
11916: ARRAY
11917: PPUSH
11918: CALL_OW 274
11922: PPUSH
11923: LD_VAR 0 2
11927: PPUSH
11928: LD_VAR 0 7
11932: PUSH
11933: LD_INT 2
11935: MUL
11936: PPUSH
11937: CALL_OW 277
// end ;
11941: GO 11875
11943: POP
11944: POP
// uc_side := side ;
11945: LD_ADDR_OWVAR 20
11949: PUSH
11950: LD_VAR 0 13
11954: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
11955: LD_INT 1
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: LD_VAR 0 13
11965: PPUSH
11966: LD_INT 32793
11968: NEG
11969: PPUSH
11970: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
11974: LD_INT 1
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: LD_VAR 0 13
11984: PPUSH
11985: CALL_OW 331
// if nation = nation_arabian and not hasCameras then
11989: LD_VAR 0 14
11993: PUSH
11994: LD_INT 2
11996: EQUAL
11997: IFFALSE 12006
11999: PUSH
12000: LD_VAR 0 5
12004: NOT
12005: AND
12006: IFFALSE 12028
// begin hasCameras := true ;
12008: LD_ADDR_VAR 0 5
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , camsArea ) ;
12016: LD_VAR 0 13
12020: PPUSH
12021: LD_INT 66
12023: PPUSH
12024: CALL 58974 0 2
// end ; techs := GetTechNation ( side , nation , - 1 ) diff [ tech_bio3 , tech_bio2 , tech_bio1 , tech_comp3 , tech_comp2 , tech_comp1 , tech_opto3 , tech_opto2 , tech_sib3 , tech_sib2 , tech_weap3 , tech_weap2 , tech_radmat , tech_artillery , tech_sibimplosion , tech_behemoth , tech_sibfiss ] ;
12028: LD_ADDR_VAR 0 4
12032: PUSH
12033: LD_VAR 0 13
12037: PPUSH
12038: LD_VAR 0 14
12042: PPUSH
12043: LD_INT 1
12045: NEG
12046: PPUSH
12047: CALL 15810 0 3
12051: PUSH
12052: LD_INT 68
12054: PUSH
12055: LD_INT 67
12057: PUSH
12058: LD_INT 66
12060: PUSH
12061: LD_INT 59
12063: PUSH
12064: LD_INT 58
12066: PUSH
12067: LD_INT 57
12069: PUSH
12070: LD_INT 62
12072: PUSH
12073: LD_INT 61
12075: PUSH
12076: LD_INT 56
12078: PUSH
12079: LD_INT 55
12081: PUSH
12082: LD_INT 53
12084: PUSH
12085: LD_INT 52
12087: PUSH
12088: LD_INT 81
12090: PUSH
12091: LD_INT 80
12093: PUSH
12094: LD_INT 72
12096: PUSH
12097: LD_INT 23
12099: PUSH
12100: LD_INT 25
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: DIFF
12122: ST_TO_ADDR
// for j in techs do
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: LD_VAR 0 4
12132: PUSH
12133: FOR_IN
12134: IFFALSE 12155
// SetTech ( j , side , state_researched ) ;
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_VAR 0 13
12145: PPUSH
12146: LD_INT 2
12148: PPUSH
12149: CALL_OW 322
12153: GO 12133
12155: POP
12156: POP
// PrepareArmsRaceVehiclesList ( mpSidePositions [ i ] , side , nation ) ;
12157: LD_EXP 7
12161: PUSH
12162: LD_VAR 0 1
12166: ARRAY
12167: PPUSH
12168: LD_VAR 0 13
12172: PPUSH
12173: LD_VAR 0 14
12177: PPUSH
12178: CALL 2406 0 3
// buildings := GetArmsRaceBuildingsList ( mpSidePositions [ i ] ) ;
12182: LD_ADDR_VAR 0 12
12186: PUSH
12187: LD_EXP 7
12191: PUSH
12192: LD_VAR 0 1
12196: ARRAY
12197: PPUSH
12198: CALL 3254 0 1
12202: ST_TO_ADDR
// for j in buildings do
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: LD_VAR 0 12
12212: PUSH
12213: FOR_IN
12214: IFFALSE 12653
// begin uc_nation := nation ;
12216: LD_ADDR_OWVAR 21
12220: PUSH
12221: LD_VAR 0 14
12225: ST_TO_ADDR
// if j [ 1 ] = b_bunker and nation in [ nation_american , nation_russian ] then
12226: LD_VAR 0 2
12230: PUSH
12231: LD_INT 1
12233: ARRAY
12234: PUSH
12235: LD_INT 32
12237: EQUAL
12238: IFFALSE 12257
12240: PUSH
12241: LD_VAR 0 14
12245: PUSH
12246: LD_INT 1
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: IN
12256: AND
12257: IFFALSE 12269
// type := b_turret else
12259: LD_ADDR_VAR 0 11
12263: PUSH
12264: LD_INT 33
12266: ST_TO_ADDR
12267: GO 12307
// if j [ 1 ] = b_lab then
12269: LD_VAR 0 2
12273: PUSH
12274: LD_INT 1
12276: ARRAY
12277: PUSH
12278: LD_INT 6
12280: EQUAL
12281: IFFALSE 12293
// type := b_lab_full else
12283: LD_ADDR_VAR 0 11
12287: PUSH
12288: LD_INT 8
12290: ST_TO_ADDR
12291: GO 12307
// type := j [ 1 ] ;
12293: LD_ADDR_VAR 0 11
12297: PUSH
12298: LD_VAR 0 2
12302: PUSH
12303: LD_INT 1
12305: ARRAY
12306: ST_TO_ADDR
// bc_level := 10 ;
12307: LD_ADDR_OWVAR 43
12311: PUSH
12312: LD_INT 10
12314: ST_TO_ADDR
// bc_type := type ;
12315: LD_ADDR_OWVAR 42
12319: PUSH
12320: LD_VAR 0 11
12324: ST_TO_ADDR
// bc_kind1 := - 1 ;
12325: LD_ADDR_OWVAR 44
12329: PUSH
12330: LD_INT 1
12332: NEG
12333: ST_TO_ADDR
// bc_kind2 := - 1 ;
12334: LD_ADDR_OWVAR 45
12338: PUSH
12339: LD_INT 1
12341: NEG
12342: ST_TO_ADDR
// if j [ 1 ] = b_lab then
12343: LD_VAR 0 2
12347: PUSH
12348: LD_INT 1
12350: ARRAY
12351: PUSH
12352: LD_INT 6
12354: EQUAL
12355: IFFALSE 12373
// begin bc_kind1 := b_lab_weapon ;
12357: LD_ADDR_OWVAR 44
12361: PUSH
12362: LD_INT 10
12364: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
12365: LD_ADDR_OWVAR 45
12369: PUSH
12370: LD_INT 11
12372: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
12373: LD_ADDR_VAR 0 9
12377: PUSH
12378: LD_VAR 0 2
12382: PUSH
12383: LD_INT 2
12385: ARRAY
12386: PPUSH
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 3
12394: ARRAY
12395: PPUSH
12396: LD_VAR 0 2
12400: PUSH
12401: LD_INT 4
12403: ARRAY
12404: PPUSH
12405: CALL_OW 47
12409: ST_TO_ADDR
// if j [ 1 ] = b_depot then
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PUSH
12419: LD_INT 0
12421: EQUAL
12422: IFFALSE 12552
// begin SetBName ( b , @ & side ) ;
12424: LD_VAR 0 9
12428: PPUSH
12429: LD_STRING @
12431: PUSH
12432: LD_VAR 0 13
12436: STR
12437: PPUSH
12438: CALL_OW 500
// for k := 1 to 2 do
12442: LD_ADDR_VAR 0 3
12446: PUSH
12447: DOUBLE
12448: LD_INT 1
12450: DEC
12451: ST_TO_ADDR
12452: LD_INT 2
12454: PUSH
12455: FOR_TO
12456: IFFALSE 12478
// begin PrepareApemanEngineer ( ) ;
12458: CALL 49878 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
12462: CALL_OW 44
12466: PPUSH
12467: LD_VAR 0 9
12471: PPUSH
12472: CALL_OW 52
// end ;
12476: GO 12455
12478: POP
12479: POP
// for k := 1 to mpStartingResources do
12480: LD_ADDR_VAR 0 3
12484: PUSH
12485: DOUBLE
12486: LD_INT 1
12488: DEC
12489: ST_TO_ADDR
12490: LD_EXP 15
12494: PUSH
12495: FOR_TO
12496: IFFALSE 12550
// begin resource := mpStartingResources [ k ] ;
12498: LD_ADDR_VAR 0 7
12502: PUSH
12503: LD_EXP 15
12507: PUSH
12508: LD_VAR 0 3
12512: ARRAY
12513: ST_TO_ADDR
// if resource then
12514: LD_VAR 0 7
12518: IFFALSE 12548
// SetResourceType ( GetBase ( b ) , k , resource div 2 ) ;
12520: LD_VAR 0 9
12524: PPUSH
12525: CALL_OW 274
12529: PPUSH
12530: LD_VAR 0 3
12534: PPUSH
12535: LD_VAR 0 7
12539: PUSH
12540: LD_INT 2
12542: DIV
12543: PPUSH
12544: CALL_OW 277
// end ;
12548: GO 12495
12550: POP
12551: POP
// end ; if j [ 1 ] = b_bunker and nation = nation_arabian then
12552: LD_VAR 0 2
12556: PUSH
12557: LD_INT 1
12559: ARRAY
12560: PUSH
12561: LD_INT 32
12563: EQUAL
12564: IFFALSE 12576
12566: PUSH
12567: LD_VAR 0 14
12571: PUSH
12572: LD_INT 2
12574: EQUAL
12575: AND
12576: IFFALSE 12596
// begin PrepareApemanSoldier ( ) ;
12578: CALL 49776 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
12582: CALL_OW 44
12586: PPUSH
12587: LD_VAR 0 9
12591: PPUSH
12592: CALL_OW 52
// end ; if Count ( j ) > 4 and j [ 1 ] = b_bunker then
12596: LD_VAR 0 2
12600: PPUSH
12601: CALL 17887 0 1
12605: PUSH
12606: LD_INT 4
12608: GREATER
12609: IFFALSE 12625
12611: PUSH
12612: LD_VAR 0 2
12616: PUSH
12617: LD_INT 1
12619: ARRAY
12620: PUSH
12621: LD_INT 32
12623: EQUAL
12624: AND
12625: IFFALSE 12651
// PlaceWeaponTurret ( b , j [ 5 ] [ nation ] ) ;
12627: LD_VAR 0 9
12631: PPUSH
12632: LD_VAR 0 2
12636: PUSH
12637: LD_INT 5
12639: ARRAY
12640: PUSH
12641: LD_VAR 0 14
12645: ARRAY
12646: PPUSH
12647: CALL_OW 431
// end ;
12651: GO 12213
12653: POP
12654: POP
// end else
12655: GO 12657
// end ;
12657: GO 11757
12659: POP
12660: POP
// repeat mpDisplayStrings := [ #TimeToWin , ( mpBuildUpTime + mpTimeToWin ) - tick ] ;
12661: LD_ADDR_EXP 38
12665: PUSH
12666: LD_STRING #TimeToWin
12668: PUSH
12669: LD_EXP 20
12673: PUSH
12674: LD_EXP 45
12678: PLUS
12679: PUSH
12680: LD_OWVAR 1
12684: MINUS
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: ST_TO_ADDR
// if mpBuildUpTime > tick then
12690: LD_EXP 20
12694: PUSH
12695: LD_OWVAR 1
12699: GREATER
12700: IFFALSE 12731
// mpDisplayStrings := mpDisplayStrings ^ [ #PrepareTime , mpBuildUpTime - tick ] ;
12702: LD_ADDR_EXP 38
12706: PUSH
12707: LD_EXP 38
12711: PUSH
12712: LD_STRING #PrepareTime
12714: PUSH
12715: LD_EXP 20
12719: PUSH
12720: LD_OWVAR 1
12724: MINUS
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: ADD
12730: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12731: LD_INT 35
12733: PPUSH
12734: CALL_OW 67
// if ( ( 30 30$0 + mpBuildUpTime ) = tick ) then
12738: LD_INT 63000
12740: PUSH
12741: LD_EXP 20
12745: PLUS
12746: PUSH
12747: LD_OWVAR 1
12751: EQUAL
12752: IFFALSE 12819
// begin for i := 1 to 8 do
12754: LD_ADDR_VAR 0 1
12758: PUSH
12759: DOUBLE
12760: LD_INT 1
12762: DEC
12763: ST_TO_ADDR
12764: LD_INT 8
12766: PUSH
12767: FOR_TO
12768: IFFALSE 12817
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
12770: LD_EXP 8
12774: PUSH
12775: LD_VAR 0 1
12779: ARRAY
12780: PUSH
12781: LD_INT 1
12783: EQUAL
12784: IFFALSE 12798
12786: PUSH
12787: LD_EXP 7
12791: PUSH
12792: LD_VAR 0 1
12796: ARRAY
12797: AND
12798: IFFALSE 12815
// SetTech ( tech_SibFiss , i , state_enabled ) ;
12800: LD_INT 25
12802: PPUSH
12803: LD_VAR 0 1
12807: PPUSH
12808: LD_INT 1
12810: PPUSH
12811: CALL_OW 322
12815: GO 12767
12817: POP
12818: POP
// end ; until ( mpBuildUpTime + mpTimeToWin ) <= tick ;
12819: LD_EXP 20
12823: PUSH
12824: LD_EXP 45
12828: PLUS
12829: PUSH
12830: LD_OWVAR 1
12834: LESSEQUAL
12835: IFFALSE 12661
// if mpSideTeams [ your_side ] = 1 then
12837: LD_EXP 8
12841: PUSH
12842: LD_OWVAR 2
12846: ARRAY
12847: PUSH
12848: LD_INT 1
12850: EQUAL
12851: IFFALSE 12858
// enable ( mpWin ) else
12853: LD_INT 101
12855: ENABLE_MARKED
12856: GO 12865
// begin Multiplayer_Loose_Message ;
12858: CALL_OW 521
// enable ( mpLose ) ;
12862: LD_INT 102
12864: ENABLE_MARKED
// end ; end ;
12865: PPOPN 14
12867: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeArmsRace do var i , canWin ;
12868: LD_EXP 39
12872: IFFALSE 12880
12874: PUSH
12875: CALL 13090 0 0
12879: AND
12880: IFFALSE 12888
12882: PUSH
12883: LD_OWVAR 4
12887: AND
12888: IFFALSE 13087
12890: GO 12892
12892: DISABLE
12893: LD_INT 0
12895: PPUSH
12896: PPUSH
// begin canWin := false ;
12897: LD_ADDR_VAR 0 2
12901: PUSH
12902: LD_INT 0
12904: ST_TO_ADDR
// if not HasPower ( your_side ) then
12905: LD_OWVAR 2
12909: PPUSH
12910: CALL 13132 0 1
12914: NOT
12915: IFFALSE 12926
// begin Multiplayer_Loose_Message ;
12917: CALL_OW 521
// enable ( mpLose ) ;
12921: LD_INT 102
12923: ENABLE_MARKED
// end else
12924: GO 13087
// begin canWin := true ;
12926: LD_ADDR_VAR 0 2
12930: PUSH
12931: LD_INT 1
12933: ST_TO_ADDR
// for i := 1 to 8 do
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: DOUBLE
12940: LD_INT 1
12942: DEC
12943: ST_TO_ADDR
12944: LD_INT 8
12946: PUSH
12947: FOR_TO
12948: IFFALSE 13073
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12950: LD_EXP 7
12954: PUSH
12955: LD_VAR 0 1
12959: ARRAY
12960: IFFALSE 12973
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 108
12972: AND
12973: IFFALSE 12987
12975: PUSH
12976: LD_VAR 0 1
12980: PUSH
12981: LD_OWVAR 2
12985: NONEQUAL
12986: AND
12987: IFFALSE 13071
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12989: LD_EXP 8
12993: PUSH
12994: LD_VAR 0 1
12998: ARRAY
12999: NOT
13000: IFTRUE 13048
13002: PUSH
13003: LD_EXP 8
13007: PUSH
13008: LD_VAR 0 1
13012: ARRAY
13013: PUSH
13014: LD_EXP 8
13018: PUSH
13019: LD_OWVAR 2
13023: ARRAY
13024: NONEQUAL
13025: IFFALSE 13047
13027: PUSH
13028: LD_OWVAR 2
13032: PPUSH
13033: LD_VAR 0 1
13037: PPUSH
13038: CALL_OW 81
13042: PUSH
13043: LD_INT 1
13045: NONEQUAL
13046: AND
13047: OR
13048: IFFALSE 13071
// if HasPower ( i ) then
13050: LD_VAR 0 1
13054: PPUSH
13055: CALL 13132 0 1
13059: IFFALSE 13071
// begin canWin := false ;
13061: LD_ADDR_VAR 0 2
13065: PUSH
13066: LD_INT 0
13068: ST_TO_ADDR
// break ;
13069: GO 13073
// end ;
13071: GO 12947
13073: POP
13074: POP
// if canWin then
13075: LD_VAR 0 2
13079: IFFALSE 13086
// enable ( mpWin ) else
13081: LD_INT 101
13083: ENABLE_MARKED
13084: GO 13087
// enable ;
13086: ENABLE
// end ; end ;
13087: PPOPN 2
13089: END
// function CanWinLoose ; begin
13090: LD_INT 0
13092: PPUSH
// result := true ;
13093: LD_ADDR_VAR 0 1
13097: PUSH
13098: LD_INT 1
13100: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13101: CALL_OW 531
13105: IFFALSE 13117
13107: PUSH
13108: CALL_OW 519
13112: PUSH
13113: LD_INT 1
13115: GREATER
13116: AND
13117: IFFALSE 13127
// result := false ;
13119: LD_ADDR_VAR 0 1
13123: PUSH
13124: LD_INT 0
13126: ST_TO_ADDR
// end ;
13127: LD_VAR 0 1
13131: RET
// function HasPower ( i ) ; begin
13132: LD_INT 0
13134: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13135: LD_ADDR_VAR 0 2
13139: PUSH
13140: LD_INT 22
13142: PUSH
13143: LD_VAR 0 1
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 2
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 33
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 33
13177: PUSH
13178: LD_INT 5
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PPUSH
13195: CALL_OW 69
13199: ST_TO_ADDR
// end ; end_of_file
13200: LD_VAR 0 2
13204: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
13205: LD_EXP 39
13209: IFFALSE 13217
13211: PUSH
13212: CALL 13427 0 0
13216: AND
13217: IFFALSE 13225
13219: PUSH
13220: LD_OWVAR 4
13224: AND
13225: IFFALSE 13424
13227: GO 13229
13229: DISABLE
13230: LD_INT 0
13232: PPUSH
13233: PPUSH
// begin canWin := false ;
13234: LD_ADDR_VAR 0 2
13238: PUSH
13239: LD_INT 0
13241: ST_TO_ADDR
// if not HasPower ( your_side ) then
13242: LD_OWVAR 2
13246: PPUSH
13247: CALL 13469 0 1
13251: NOT
13252: IFFALSE 13263
// begin Multiplayer_Loose_Message ;
13254: CALL_OW 521
// enable ( mpLose ) ;
13258: LD_INT 102
13260: ENABLE_MARKED
// end else
13261: GO 13424
// begin canWin := true ;
13263: LD_ADDR_VAR 0 2
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// for i := 1 to 8 do
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_INT 8
13283: PUSH
13284: FOR_TO
13285: IFFALSE 13410
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13287: LD_EXP 7
13291: PUSH
13292: LD_VAR 0 1
13296: ARRAY
13297: IFFALSE 13310
13299: PUSH
13300: LD_VAR 0 1
13304: PPUSH
13305: CALL_OW 108
13309: AND
13310: IFFALSE 13324
13312: PUSH
13313: LD_VAR 0 1
13317: PUSH
13318: LD_OWVAR 2
13322: NONEQUAL
13323: AND
13324: IFFALSE 13408
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13326: LD_EXP 8
13330: PUSH
13331: LD_VAR 0 1
13335: ARRAY
13336: NOT
13337: IFTRUE 13385
13339: PUSH
13340: LD_EXP 8
13344: PUSH
13345: LD_VAR 0 1
13349: ARRAY
13350: PUSH
13351: LD_EXP 8
13355: PUSH
13356: LD_OWVAR 2
13360: ARRAY
13361: NONEQUAL
13362: IFFALSE 13384
13364: PUSH
13365: LD_OWVAR 2
13369: PPUSH
13370: LD_VAR 0 1
13374: PPUSH
13375: CALL_OW 81
13379: PUSH
13380: LD_INT 1
13382: NONEQUAL
13383: AND
13384: OR
13385: IFFALSE 13408
// if HasPower ( i ) then
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL 13469 0 1
13396: IFFALSE 13408
// begin canWin := false ;
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_INT 0
13405: ST_TO_ADDR
// break ;
13406: GO 13410
// end ;
13408: GO 13284
13410: POP
13411: POP
// if canWin then
13412: LD_VAR 0 2
13416: IFFALSE 13423
// enable ( mpWin ) else
13418: LD_INT 101
13420: ENABLE_MARKED
13421: GO 13424
// enable ;
13423: ENABLE
// end ; end ;
13424: PPOPN 2
13426: END
// function CanWinLoose ; begin
13427: LD_INT 0
13429: PPUSH
// result := true ;
13430: LD_ADDR_VAR 0 1
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13438: CALL_OW 531
13442: IFFALSE 13454
13444: PUSH
13445: CALL_OW 519
13449: PUSH
13450: LD_INT 1
13452: GREATER
13453: AND
13454: IFFALSE 13464
// result := false ;
13456: LD_ADDR_VAR 0 1
13460: PUSH
13461: LD_INT 0
13463: ST_TO_ADDR
// end ;
13464: LD_VAR 0 1
13468: RET
// function HasPower ( i ) ; begin
13469: LD_INT 0
13471: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_VAR 0 1
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 2
13491: PUSH
13492: LD_INT 21
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 3
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: LD_INT 33
13514: PUSH
13515: LD_INT 5
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PPUSH
13532: CALL_OW 69
13536: ST_TO_ADDR
// end ; end_of_file
13537: LD_VAR 0 2
13541: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
13542: LD_EXP 39
13546: IFFALSE 13589
13548: GO 13550
13550: DISABLE
13551: LD_INT 0
13553: PPUSH
// begin for i := 1 to 8 do
13554: LD_ADDR_VAR 0 1
13558: PUSH
13559: DOUBLE
13560: LD_INT 1
13562: DEC
13563: ST_TO_ADDR
13564: LD_INT 8
13566: PUSH
13567: FOR_TO
13568: IFFALSE 13587
// SetRestrict ( b_depot , i , state_disabled ) ;
13570: LD_INT 0
13572: PPUSH
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_INT 0
13580: PPUSH
13581: CALL_OW 324
13585: GO 13567
13587: POP
13588: POP
// end ;
13589: PPOPN 1
13591: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
13592: LD_EXP 39
13596: IFFALSE 13604
13598: PUSH
13599: CALL 13814 0 0
13603: AND
13604: IFFALSE 13612
13606: PUSH
13607: LD_OWVAR 4
13611: AND
13612: IFFALSE 13811
13614: GO 13616
13616: DISABLE
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
// begin canWin := false ;
13621: LD_ADDR_VAR 0 2
13625: PUSH
13626: LD_INT 0
13628: ST_TO_ADDR
// if not HasPower ( your_side ) then
13629: LD_OWVAR 2
13633: PPUSH
13634: CALL 13856 0 1
13638: NOT
13639: IFFALSE 13650
// begin Multiplayer_Loose_Message ;
13641: CALL_OW 521
// enable ( mpLose ) ;
13645: LD_INT 102
13647: ENABLE_MARKED
// end else
13648: GO 13811
// begin canWin := true ;
13650: LD_ADDR_VAR 0 2
13654: PUSH
13655: LD_INT 1
13657: ST_TO_ADDR
// for i := 1 to 8 do
13658: LD_ADDR_VAR 0 1
13662: PUSH
13663: DOUBLE
13664: LD_INT 1
13666: DEC
13667: ST_TO_ADDR
13668: LD_INT 8
13670: PUSH
13671: FOR_TO
13672: IFFALSE 13797
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13674: LD_EXP 7
13678: PUSH
13679: LD_VAR 0 1
13683: ARRAY
13684: IFFALSE 13697
13686: PUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 108
13696: AND
13697: IFFALSE 13711
13699: PUSH
13700: LD_VAR 0 1
13704: PUSH
13705: LD_OWVAR 2
13709: NONEQUAL
13710: AND
13711: IFFALSE 13795
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13713: LD_EXP 8
13717: PUSH
13718: LD_VAR 0 1
13722: ARRAY
13723: NOT
13724: IFTRUE 13772
13726: PUSH
13727: LD_EXP 8
13731: PUSH
13732: LD_VAR 0 1
13736: ARRAY
13737: PUSH
13738: LD_EXP 8
13742: PUSH
13743: LD_OWVAR 2
13747: ARRAY
13748: NONEQUAL
13749: IFFALSE 13771
13751: PUSH
13752: LD_OWVAR 2
13756: PPUSH
13757: LD_VAR 0 1
13761: PPUSH
13762: CALL_OW 81
13766: PUSH
13767: LD_INT 1
13769: NONEQUAL
13770: AND
13771: OR
13772: IFFALSE 13795
// if HasPower ( i ) then
13774: LD_VAR 0 1
13778: PPUSH
13779: CALL 13856 0 1
13783: IFFALSE 13795
// begin canWin := false ;
13785: LD_ADDR_VAR 0 2
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// break ;
13793: GO 13797
// end ;
13795: GO 13671
13797: POP
13798: POP
// if canWin then
13799: LD_VAR 0 2
13803: IFFALSE 13810
// enable ( mpWin ) else
13805: LD_INT 101
13807: ENABLE_MARKED
13808: GO 13811
// enable ;
13810: ENABLE
// end ; end ;
13811: PPOPN 2
13813: END
// function CanWinLoose ; begin
13814: LD_INT 0
13816: PPUSH
// result := true ;
13817: LD_ADDR_VAR 0 1
13821: PUSH
13822: LD_INT 1
13824: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13825: CALL_OW 531
13829: IFFALSE 13841
13831: PUSH
13832: CALL_OW 519
13836: PUSH
13837: LD_INT 1
13839: GREATER
13840: AND
13841: IFFALSE 13851
// result := false ;
13843: LD_ADDR_VAR 0 1
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// end ;
13851: LD_VAR 0 1
13855: RET
// function HasPower ( i ) ; begin
13856: LD_INT 0
13858: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
13859: LD_INT 22
13861: PUSH
13862: LD_VAR 0 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: LD_INT 30
13876: PUSH
13877: LD_INT 0
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 30
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 69
13907: NOT
13908: IFFALSE 13912
// exit ;
13910: GO 13977
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13912: LD_ADDR_VAR 0 2
13916: PUSH
13917: LD_INT 22
13919: PUSH
13920: LD_VAR 0 1
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: LD_INT 21
13934: PUSH
13935: LD_INT 1
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 33
13944: PUSH
13945: LD_INT 3
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 33
13954: PUSH
13955: LD_INT 5
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PPUSH
13972: CALL_OW 69
13976: ST_TO_ADDR
// end ; end_of_file
13977: LD_VAR 0 2
13981: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
13982: LD_EXP 39
13986: IFFALSE 14327
13988: GO 13990
13990: DISABLE
13991: LD_INT 0
13993: PPUSH
13994: PPUSH
13995: PPUSH
// begin mpKingPoints := [ ] ;
13996: LD_ADDR_EXP 49
14000: PUSH
14001: EMPTY
14002: ST_TO_ADDR
// if mpTeamGame then
14003: LD_EXP 11
14007: IFFALSE 14061
// begin for i := 1 to Count ( mpTeams ) do
14009: LD_ADDR_VAR 0 1
14013: PUSH
14014: DOUBLE
14015: LD_INT 1
14017: DEC
14018: ST_TO_ADDR
14019: LD_EXP 10
14023: PPUSH
14024: CALL 17887 0 1
14028: PUSH
14029: FOR_TO
14030: IFFALSE 14057
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14032: LD_ADDR_EXP 49
14036: PUSH
14037: LD_EXP 49
14041: PPUSH
14042: LD_VAR 0 1
14046: PPUSH
14047: LD_INT 0
14049: PPUSH
14050: CALL_OW 1
14054: ST_TO_ADDR
14055: GO 14029
14057: POP
14058: POP
// end else
14059: GO 14104
// begin for i := 1 to 8 do
14061: LD_ADDR_VAR 0 1
14065: PUSH
14066: DOUBLE
14067: LD_INT 1
14069: DEC
14070: ST_TO_ADDR
14071: LD_INT 8
14073: PUSH
14074: FOR_TO
14075: IFFALSE 14102
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14077: LD_ADDR_EXP 49
14081: PUSH
14082: LD_EXP 49
14086: PPUSH
14087: LD_VAR 0 1
14091: PPUSH
14092: LD_INT 0
14094: PPUSH
14095: CALL_OW 1
14099: ST_TO_ADDR
14100: GO 14074
14102: POP
14103: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_EXP 2
14113: PPUSH
14114: LD_INT 0
14116: PPUSH
14117: CALL_OW 517
14121: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14122: LD_ADDR_VAR 0 1
14126: PUSH
14127: DOUBLE
14128: LD_INT 1
14130: DEC
14131: ST_TO_ADDR
14132: LD_VAR 0 3
14136: PUSH
14137: LD_INT 1
14139: ARRAY
14140: PUSH
14141: FOR_TO
14142: IFFALSE 14209
// for j := 1 to 8 do
14144: LD_ADDR_VAR 0 2
14148: PUSH
14149: DOUBLE
14150: LD_INT 1
14152: DEC
14153: ST_TO_ADDR
14154: LD_INT 8
14156: PUSH
14157: FOR_TO
14158: IFFALSE 14205
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
14160: LD_VAR 0 3
14164: PUSH
14165: LD_INT 1
14167: ARRAY
14168: PUSH
14169: LD_VAR 0 1
14173: ARRAY
14174: PPUSH
14175: LD_VAR 0 3
14179: PUSH
14180: LD_INT 2
14182: ARRAY
14183: PUSH
14184: LD_VAR 0 1
14188: ARRAY
14189: PPUSH
14190: LD_VAR 0 2
14194: PPUSH
14195: LD_INT 12
14197: NEG
14198: PPUSH
14199: CALL_OW 330
14203: GO 14157
14205: POP
14206: POP
14207: GO 14141
14209: POP
14210: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
14211: LD_EXP 34
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: CALL_OW 424
// UpdateCounter ;
14223: CALL 14833 0 0
// repeat wait ( 0 0$1 ) ;
14227: LD_INT 35
14229: PPUSH
14230: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14234: LD_ADDR_VAR 0 3
14238: PUSH
14239: LD_EXP 34
14243: PPUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 57
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 50
14259: PUSH
14260: EMPTY
14261: LIST
14262: PUSH
14263: LD_INT 2
14265: PUSH
14266: LD_INT 30
14268: PUSH
14269: LD_INT 0
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 30
14278: PUSH
14279: LD_INT 1
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: LIST
14295: PPUSH
14296: CALL_OW 70
14300: ST_TO_ADDR
// if not tmp then
14301: LD_VAR 0 3
14305: NOT
14306: IFFALSE 14310
// continue ;
14308: GO 14227
// AddPoints ( tmp ) ;
14310: LD_VAR 0 3
14314: PPUSH
14315: CALL 14511 0 1
// UpdateCounter ;
14319: CALL 14833 0 0
// until false ;
14323: LD_INT 0
14325: IFFALSE 14227
// end ;
14327: PPOPN 3
14329: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14330: LD_EXP 39
14334: IFFALSE 14342
14336: PUSH
14337: LD_EXP 37
14341: AND
14342: IFFALSE 14508
14344: GO 14346
14346: DISABLE
14347: LD_INT 0
14349: PPUSH
14350: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_EXP 2
14360: PPUSH
14361: LD_INT 0
14363: PPUSH
14364: CALL_OW 517
14368: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14369: LD_ADDR_VAR 0 1
14373: PUSH
14374: DOUBLE
14375: LD_INT 1
14377: DEC
14378: ST_TO_ADDR
14379: LD_VAR 0 2
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PUSH
14388: FOR_TO
14389: IFFALSE 14430
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
14391: LD_VAR 0 2
14395: PUSH
14396: LD_INT 1
14398: ARRAY
14399: PUSH
14400: LD_VAR 0 1
14404: ARRAY
14405: PPUSH
14406: LD_VAR 0 2
14410: PUSH
14411: LD_INT 2
14413: ARRAY
14414: PUSH
14415: LD_VAR 0 1
14419: ARRAY
14420: PPUSH
14421: LD_INT 125
14423: PPUSH
14424: CALL_OW 495
14428: GO 14388
14430: POP
14431: POP
// repeat wait ( mpEmissions ) ;
14432: LD_EXP 37
14436: PPUSH
14437: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: DOUBLE
14447: LD_INT 1
14449: DEC
14450: ST_TO_ADDR
14451: LD_VAR 0 2
14455: PUSH
14456: LD_INT 1
14458: ARRAY
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14502
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
14463: LD_VAR 0 2
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PUSH
14472: LD_VAR 0 1
14476: ARRAY
14477: PPUSH
14478: LD_VAR 0 2
14482: PUSH
14483: LD_INT 2
14485: ARRAY
14486: PUSH
14487: LD_VAR 0 1
14491: ARRAY
14492: PPUSH
14493: LD_INT 15
14495: PPUSH
14496: CALL_OW 495
14500: GO 14460
14502: POP
14503: POP
// until false ;
14504: LD_INT 0
14506: IFFALSE 14432
// end ;
14508: PPOPN 2
14510: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
14511: LD_INT 0
14513: PPUSH
14514: PPUSH
14515: PPUSH
14516: PPUSH
14517: PPUSH
// if mpTeamGame then
14518: LD_EXP 11
14522: IFFALSE 14719
// begin first := depots [ 1 ] ;
14524: LD_ADDR_VAR 0 4
14528: PUSH
14529: LD_VAR 0 1
14533: PUSH
14534: LD_INT 1
14536: ARRAY
14537: ST_TO_ADDR
// side := GetSide ( first ) ;
14538: LD_ADDR_VAR 0 6
14542: PUSH
14543: LD_VAR 0 4
14547: PPUSH
14548: CALL_OW 255
14552: ST_TO_ADDR
// for i := 1 to mpTeams do
14553: LD_ADDR_VAR 0 3
14557: PUSH
14558: DOUBLE
14559: LD_INT 1
14561: DEC
14562: ST_TO_ADDR
14563: LD_EXP 10
14567: PUSH
14568: FOR_TO
14569: IFFALSE 14603
// if side in mpTeams [ i ] then
14571: LD_VAR 0 6
14575: PUSH
14576: LD_EXP 10
14580: PUSH
14581: LD_VAR 0 3
14585: ARRAY
14586: IN
14587: IFFALSE 14601
// begin team := i ;
14589: LD_ADDR_VAR 0 5
14593: PUSH
14594: LD_VAR 0 3
14598: ST_TO_ADDR
// break ;
14599: GO 14603
// end ;
14601: GO 14568
14603: POP
14604: POP
// if not team then
14605: LD_VAR 0 5
14609: NOT
14610: IFFALSE 14614
// exit ;
14612: GO 14828
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
14614: LD_EXP 34
14618: PPUSH
14619: LD_INT 81
14621: PUSH
14622: LD_VAR 0 6
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PPUSH
14631: CALL_OW 70
14635: IFFALSE 14639
// exit ;
14637: GO 14828
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
14639: LD_ADDR_EXP 49
14643: PUSH
14644: LD_EXP 49
14648: PPUSH
14649: LD_VAR 0 5
14653: PPUSH
14654: LD_EXP 49
14658: PUSH
14659: LD_VAR 0 5
14663: ARRAY
14664: PUSH
14665: LD_INT 1
14667: PLUS
14668: PPUSH
14669: CALL_OW 1
14673: ST_TO_ADDR
// for i in mpTeams [ team ] do
14674: LD_ADDR_VAR 0 3
14678: PUSH
14679: LD_EXP 10
14683: PUSH
14684: LD_VAR 0 5
14688: ARRAY
14689: PUSH
14690: FOR_IN
14691: IFFALSE 14715
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_EXP 49
14702: PUSH
14703: LD_VAR 0 5
14707: ARRAY
14708: PPUSH
14709: CALL_OW 506
14713: GO 14690
14715: POP
14716: POP
// end else
14717: GO 14828
// begin first := depots [ 1 ] ;
14719: LD_ADDR_VAR 0 4
14723: PUSH
14724: LD_VAR 0 1
14728: PUSH
14729: LD_INT 1
14731: ARRAY
14732: ST_TO_ADDR
// side := GetSide ( first ) ;
14733: LD_ADDR_VAR 0 6
14737: PUSH
14738: LD_VAR 0 4
14742: PPUSH
14743: CALL_OW 255
14747: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
14748: LD_EXP 34
14752: PPUSH
14753: LD_INT 81
14755: PUSH
14756: LD_VAR 0 6
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PPUSH
14765: CALL_OW 70
14769: IFFALSE 14773
// exit ;
14771: GO 14828
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
14773: LD_ADDR_EXP 49
14777: PUSH
14778: LD_EXP 49
14782: PPUSH
14783: LD_VAR 0 6
14787: PPUSH
14788: LD_EXP 49
14792: PUSH
14793: LD_VAR 0 6
14797: ARRAY
14798: PUSH
14799: LD_INT 1
14801: PLUS
14802: PPUSH
14803: CALL_OW 1
14807: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
14808: LD_VAR 0 6
14812: PPUSH
14813: LD_EXP 49
14817: PUSH
14818: LD_VAR 0 6
14822: ARRAY
14823: PPUSH
14824: CALL_OW 506
// end ; end ;
14828: LD_VAR 0 2
14832: RET
// function UpdateCounter ; var i ; begin
14833: LD_INT 0
14835: PPUSH
14836: PPUSH
// result := [ ] ;
14837: LD_ADDR_VAR 0 1
14841: PUSH
14842: EMPTY
14843: ST_TO_ADDR
// if mpTeamGame then
14844: LD_EXP 11
14848: IFFALSE 14915
// begin for i := 1 to mpTeams do
14850: LD_ADDR_VAR 0 2
14854: PUSH
14855: DOUBLE
14856: LD_INT 1
14858: DEC
14859: ST_TO_ADDR
14860: LD_EXP 10
14864: PUSH
14865: FOR_TO
14866: IFFALSE 14911
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
14868: LD_ADDR_VAR 0 1
14872: PUSH
14873: LD_VAR 0 1
14877: PUSH
14878: LD_STRING #KingoftheHill-Team
14880: PUSH
14881: LD_VAR 0 2
14885: PUSH
14886: LD_EXP 49
14890: PUSH
14891: LD_VAR 0 2
14895: ARRAY
14896: PUSH
14897: LD_EXP 35
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: ADD
14908: ST_TO_ADDR
14909: GO 14865
14911: POP
14912: POP
// end else
14913: GO 14988
// begin for i := 1 to 8 do
14915: LD_ADDR_VAR 0 2
14919: PUSH
14920: DOUBLE
14921: LD_INT 1
14923: DEC
14924: ST_TO_ADDR
14925: LD_INT 8
14927: PUSH
14928: FOR_TO
14929: IFFALSE 14986
// if mpSidePositions [ i ] then
14931: LD_EXP 7
14935: PUSH
14936: LD_VAR 0 2
14940: ARRAY
14941: IFFALSE 14984
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
14943: LD_ADDR_VAR 0 1
14947: PUSH
14948: LD_VAR 0 1
14952: PUSH
14953: LD_STRING #KingoftheHill-Player
14955: PUSH
14956: LD_VAR 0 2
14960: PUSH
14961: LD_EXP 49
14965: PUSH
14966: LD_VAR 0 2
14970: ARRAY
14971: PUSH
14972: LD_EXP 35
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: ADD
14983: ST_TO_ADDR
14984: GO 14928
14986: POP
14987: POP
// end ; mpDisplayStrings := result ;
14988: LD_ADDR_EXP 38
14992: PUSH
14993: LD_VAR 0 1
14997: ST_TO_ADDR
// end ;
14998: LD_VAR 0 1
15002: RET
// export function HowMuchPointsKing ( side ) ; begin
15003: LD_INT 0
15005: PPUSH
// result := HowMuchPoints ( side ) ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: LD_VAR 0 1
15015: PPUSH
15016: CALL 15026 0 1
15020: ST_TO_ADDR
// end ;
15021: LD_VAR 0 2
15025: RET
// function HowMuchPoints ( side ) ; var i ; begin
15026: LD_INT 0
15028: PPUSH
15029: PPUSH
// if mpTeamGame then
15030: LD_EXP 11
15034: IFFALSE 15103
// begin for i := 1 to Count ( mpTeams ) do
15036: LD_ADDR_VAR 0 3
15040: PUSH
15041: DOUBLE
15042: LD_INT 1
15044: DEC
15045: ST_TO_ADDR
15046: LD_EXP 10
15050: PPUSH
15051: CALL 17887 0 1
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15099
// begin if side in mpTeams [ i ] then
15059: LD_VAR 0 1
15063: PUSH
15064: LD_EXP 10
15068: PUSH
15069: LD_VAR 0 3
15073: ARRAY
15074: IN
15075: IFFALSE 15097
// begin result := mpKingPoints [ i ] ;
15077: LD_ADDR_VAR 0 2
15081: PUSH
15082: LD_EXP 49
15086: PUSH
15087: LD_VAR 0 3
15091: ARRAY
15092: ST_TO_ADDR
// exit ;
15093: POP
15094: POP
15095: GO 15119
// end ; end ;
15097: GO 15056
15099: POP
15100: POP
// end else
15101: GO 15119
// result := mpKingPoints [ side ] ;
15103: LD_ADDR_VAR 0 2
15107: PUSH
15108: LD_EXP 49
15112: PUSH
15113: LD_VAR 0 1
15117: ARRAY
15118: ST_TO_ADDR
// end ;
15119: LD_VAR 0 2
15123: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
15124: LD_EXP 39
15128: IFFALSE 15136
15130: PUSH
15131: CALL 15548 0 0
15135: AND
15136: IFFALSE 15144
15138: PUSH
15139: LD_OWVAR 4
15143: AND
15144: IFFALSE 15397
15146: GO 15148
15148: DISABLE
15149: LD_INT 0
15151: PPUSH
15152: PPUSH
// begin canWin := false ;
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: LD_INT 0
15160: ST_TO_ADDR
// if not HasPower ( your_side ) then
15161: LD_OWVAR 2
15165: PPUSH
15166: CALL 15590 0 1
15170: NOT
15171: IFFALSE 15182
// begin Multiplayer_Loose_Message ;
15173: CALL_OW 521
// enable ( mpLose ) ;
15177: LD_INT 102
15179: ENABLE_MARKED
// end else
15180: GO 15397
// begin if not EnemiesInGame then
15182: CALL 15400 0 0
15186: NOT
15187: IFFALSE 15194
// begin enable ( mpWin ) ;
15189: LD_INT 101
15191: ENABLE_MARKED
// exit ;
15192: GO 15397
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_OWVAR 2
15203: PPUSH
15204: CALL 15026 0 1
15208: PUSH
15209: LD_EXP 35
15213: GREATEREQUAL
15214: IFFALSE 15227
15216: PUSH
15217: LD_OWVAR 2
15221: PPUSH
15222: CALL 15590 0 1
15226: AND
15227: ST_TO_ADDR
// for i := 1 to 8 do
15228: LD_ADDR_VAR 0 1
15232: PUSH
15233: DOUBLE
15234: LD_INT 1
15236: DEC
15237: ST_TO_ADDR
15238: LD_INT 8
15240: PUSH
15241: FOR_TO
15242: IFFALSE 15383
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15244: LD_EXP 7
15248: PUSH
15249: LD_VAR 0 1
15253: ARRAY
15254: IFFALSE 15267
15256: PUSH
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 108
15266: AND
15267: IFFALSE 15281
15269: PUSH
15270: LD_VAR 0 1
15274: PUSH
15275: LD_OWVAR 2
15279: NONEQUAL
15280: AND
15281: IFFALSE 15381
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15283: LD_EXP 8
15287: PUSH
15288: LD_VAR 0 1
15292: ARRAY
15293: NOT
15294: IFTRUE 15342
15296: PUSH
15297: LD_EXP 8
15301: PUSH
15302: LD_VAR 0 1
15306: ARRAY
15307: PUSH
15308: LD_EXP 8
15312: PUSH
15313: LD_OWVAR 2
15317: ARRAY
15318: NONEQUAL
15319: IFFALSE 15341
15321: PUSH
15322: LD_OWVAR 2
15326: PPUSH
15327: LD_VAR 0 1
15331: PPUSH
15332: CALL_OW 81
15336: PUSH
15337: LD_INT 1
15339: NONEQUAL
15340: AND
15341: OR
15342: IFFALSE 15381
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL 15026 0 1
15353: PUSH
15354: LD_EXP 35
15358: GREATEREQUAL
15359: IFFALSE 15372
15361: PUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL 15590 0 1
15371: AND
15372: IFFALSE 15381
// begin enable ( mpLose ) ;
15374: LD_INT 102
15376: ENABLE_MARKED
// exit ;
15377: POP
15378: POP
15379: GO 15397
// end ;
15381: GO 15241
15383: POP
15384: POP
// if canWin then
15385: LD_VAR 0 2
15389: IFFALSE 15396
// enable ( mpWin ) else
15391: LD_INT 101
15393: ENABLE_MARKED
15394: GO 15397
// enable ;
15396: ENABLE
// end ; end ;
15397: PPOPN 2
15399: END
// function EnemiesInGame ; var i ; begin
15400: LD_INT 0
15402: PPUSH
15403: PPUSH
// result := false ;
15404: LD_ADDR_VAR 0 1
15408: PUSH
15409: LD_INT 0
15411: ST_TO_ADDR
// for i := 1 to 8 do
15412: LD_ADDR_VAR 0 2
15416: PUSH
15417: DOUBLE
15418: LD_INT 1
15420: DEC
15421: ST_TO_ADDR
15422: LD_INT 8
15424: PUSH
15425: FOR_TO
15426: IFFALSE 15541
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
15428: LD_VAR 0 2
15432: PUSH
15433: LD_OWVAR 2
15437: NONEQUAL
15438: IFFALSE 15451
15440: PUSH
15441: LD_VAR 0 2
15445: PPUSH
15446: CALL 15590 0 1
15450: AND
15451: IFFALSE 15464
15453: PUSH
15454: LD_VAR 0 2
15458: PPUSH
15459: CALL_OW 108
15463: AND
15464: IFFALSE 15539
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15466: LD_EXP 8
15470: PUSH
15471: LD_VAR 0 2
15475: ARRAY
15476: NOT
15477: IFTRUE 15525
15479: PUSH
15480: LD_EXP 8
15484: PUSH
15485: LD_VAR 0 2
15489: ARRAY
15490: PUSH
15491: LD_EXP 8
15495: PUSH
15496: LD_OWVAR 2
15500: ARRAY
15501: NONEQUAL
15502: IFFALSE 15524
15504: PUSH
15505: LD_OWVAR 2
15509: PPUSH
15510: LD_VAR 0 2
15514: PPUSH
15515: CALL_OW 81
15519: PUSH
15520: LD_INT 1
15522: NONEQUAL
15523: AND
15524: OR
15525: IFFALSE 15539
// begin result := true ;
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: LD_INT 1
15534: ST_TO_ADDR
// exit ;
15535: POP
15536: POP
15537: GO 15543
// end ;
15539: GO 15425
15541: POP
15542: POP
// end ;
15543: LD_VAR 0 1
15547: RET
// function CanWinLoose ; begin
15548: LD_INT 0
15550: PPUSH
// result := true ;
15551: LD_ADDR_VAR 0 1
15555: PUSH
15556: LD_INT 1
15558: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15559: CALL_OW 531
15563: IFFALSE 15575
15565: PUSH
15566: CALL_OW 519
15570: PUSH
15571: LD_INT 1
15573: GREATER
15574: AND
15575: IFFALSE 15585
// result := false ;
15577: LD_ADDR_VAR 0 1
15581: PUSH
15582: LD_INT 0
15584: ST_TO_ADDR
// end ;
15585: LD_VAR 0 1
15589: RET
// function HasPower ( i ) ; begin
15590: LD_INT 0
15592: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
15593: LD_ADDR_VAR 0 2
15597: PUSH
15598: LD_INT 22
15600: PUSH
15601: LD_VAR 0 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 21
15615: PUSH
15616: LD_INT 1
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: LD_INT 33
15625: PUSH
15626: LD_INT 3
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 33
15635: PUSH
15636: LD_INT 5
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: ST_TO_ADDR
// end ; end_of_file
15658: LD_VAR 0 2
15662: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15663: LD_INT 0
15665: PPUSH
15666: PPUSH
// if exist_mode then
15667: LD_VAR 0 2
15671: IFFALSE 15717
// begin unit := CreateCharacter ( prefix & ident ) ;
15673: LD_ADDR_VAR 0 5
15677: PUSH
15678: LD_VAR 0 3
15682: PUSH
15683: LD_VAR 0 1
15687: STR
15688: PPUSH
15689: CALL_OW 34
15693: ST_TO_ADDR
// if unit then
15694: LD_VAR 0 5
15698: IFFALSE 15715
// DeleteCharacters ( prefix & ident ) ;
15700: LD_VAR 0 3
15704: PUSH
15705: LD_VAR 0 1
15709: STR
15710: PPUSH
15711: CALL_OW 40
// end else
15715: GO 15732
// unit := NewCharacter ( ident ) ;
15717: LD_ADDR_VAR 0 5
15721: PUSH
15722: LD_VAR 0 1
15726: PPUSH
15727: CALL_OW 25
15731: ST_TO_ADDR
// result := unit ;
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_VAR 0 5
15741: ST_TO_ADDR
// end ;
15742: LD_VAR 0 4
15746: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
// if exist_mode then
15751: LD_VAR 0 2
15755: IFFALSE 15780
// unit := CreateCharacter ( prefix & ident ) else
15757: LD_ADDR_VAR 0 5
15761: PUSH
15762: LD_VAR 0 3
15766: PUSH
15767: LD_VAR 0 1
15771: STR
15772: PPUSH
15773: CALL_OW 34
15777: ST_TO_ADDR
15778: GO 15795
// unit := NewCharacter ( ident ) ;
15780: LD_ADDR_VAR 0 5
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 25
15794: ST_TO_ADDR
// result := unit ;
15795: LD_ADDR_VAR 0 4
15799: PUSH
15800: LD_VAR 0 5
15804: ST_TO_ADDR
// end ;
15805: LD_VAR 0 4
15809: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15810: LD_INT 0
15812: PPUSH
15813: PPUSH
// if not side or not nation then
15814: LD_VAR 0 1
15818: NOT
15819: IFTRUE 15828
15821: PUSH
15822: LD_VAR 0 2
15826: NOT
15827: OR
15828: IFFALSE 15832
// exit ;
15830: GO 16626
// case nation of nation_american :
15832: LD_VAR 0 2
15836: PUSH
15837: LD_INT 1
15839: DOUBLE
15840: EQUAL
15841: IFTRUE 15845
15843: GO 16067
15845: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15846: LD_ADDR_VAR 0 4
15850: PUSH
15851: LD_INT 35
15853: PUSH
15854: LD_INT 45
15856: PUSH
15857: LD_INT 46
15859: PUSH
15860: LD_INT 47
15862: PUSH
15863: LD_INT 82
15865: PUSH
15866: LD_INT 83
15868: PUSH
15869: LD_INT 84
15871: PUSH
15872: LD_INT 85
15874: PUSH
15875: LD_INT 86
15877: PUSH
15878: LD_INT 1
15880: PUSH
15881: LD_INT 2
15883: PUSH
15884: LD_INT 6
15886: PUSH
15887: LD_INT 15
15889: PUSH
15890: LD_INT 16
15892: PUSH
15893: LD_INT 7
15895: PUSH
15896: LD_INT 12
15898: PUSH
15899: LD_INT 13
15901: PUSH
15902: LD_INT 10
15904: PUSH
15905: LD_INT 14
15907: PUSH
15908: LD_INT 20
15910: PUSH
15911: LD_INT 21
15913: PUSH
15914: LD_INT 22
15916: PUSH
15917: LD_INT 25
15919: PUSH
15920: LD_INT 32
15922: PUSH
15923: LD_INT 27
15925: PUSH
15926: LD_INT 36
15928: PUSH
15929: LD_INT 69
15931: PUSH
15932: LD_INT 39
15934: PUSH
15935: LD_INT 34
15937: PUSH
15938: LD_INT 40
15940: PUSH
15941: LD_INT 48
15943: PUSH
15944: LD_INT 49
15946: PUSH
15947: LD_INT 50
15949: PUSH
15950: LD_INT 51
15952: PUSH
15953: LD_INT 52
15955: PUSH
15956: LD_INT 53
15958: PUSH
15959: LD_INT 54
15961: PUSH
15962: LD_INT 55
15964: PUSH
15965: LD_INT 56
15967: PUSH
15968: LD_INT 57
15970: PUSH
15971: LD_INT 58
15973: PUSH
15974: LD_INT 59
15976: PUSH
15977: LD_INT 60
15979: PUSH
15980: LD_INT 61
15982: PUSH
15983: LD_INT 62
15985: PUSH
15986: LD_INT 80
15988: PUSH
15989: LD_INT 82
15991: PUSH
15992: LD_INT 83
15994: PUSH
15995: LD_INT 84
15997: PUSH
15998: LD_INT 85
16000: PUSH
16001: LD_INT 86
16003: PUSH
16004: LD_INT 90
16006: PUSH
16007: LD_INT 93
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: ST_TO_ADDR
16065: GO 16548
16067: LD_INT 2
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16309
16075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16076: LD_ADDR_VAR 0 4
16080: PUSH
16081: LD_INT 35
16083: PUSH
16084: LD_INT 45
16086: PUSH
16087: LD_INT 46
16089: PUSH
16090: LD_INT 47
16092: PUSH
16093: LD_INT 82
16095: PUSH
16096: LD_INT 83
16098: PUSH
16099: LD_INT 84
16101: PUSH
16102: LD_INT 85
16104: PUSH
16105: LD_INT 87
16107: PUSH
16108: LD_INT 70
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 11
16116: PUSH
16117: LD_INT 3
16119: PUSH
16120: LD_INT 4
16122: PUSH
16123: LD_INT 5
16125: PUSH
16126: LD_INT 6
16128: PUSH
16129: LD_INT 15
16131: PUSH
16132: LD_INT 18
16134: PUSH
16135: LD_INT 7
16137: PUSH
16138: LD_INT 17
16140: PUSH
16141: LD_INT 8
16143: PUSH
16144: LD_INT 20
16146: PUSH
16147: LD_INT 21
16149: PUSH
16150: LD_INT 22
16152: PUSH
16153: LD_INT 72
16155: PUSH
16156: LD_INT 26
16158: PUSH
16159: LD_INT 69
16161: PUSH
16162: LD_INT 39
16164: PUSH
16165: LD_INT 40
16167: PUSH
16168: LD_INT 41
16170: PUSH
16171: LD_INT 42
16173: PUSH
16174: LD_INT 43
16176: PUSH
16177: LD_INT 48
16179: PUSH
16180: LD_INT 49
16182: PUSH
16183: LD_INT 50
16185: PUSH
16186: LD_INT 51
16188: PUSH
16189: LD_INT 52
16191: PUSH
16192: LD_INT 53
16194: PUSH
16195: LD_INT 54
16197: PUSH
16198: LD_INT 55
16200: PUSH
16201: LD_INT 56
16203: PUSH
16204: LD_INT 60
16206: PUSH
16207: LD_INT 61
16209: PUSH
16210: LD_INT 62
16212: PUSH
16213: LD_INT 66
16215: PUSH
16216: LD_INT 67
16218: PUSH
16219: LD_INT 68
16221: PUSH
16222: LD_INT 81
16224: PUSH
16225: LD_INT 82
16227: PUSH
16228: LD_INT 83
16230: PUSH
16231: LD_INT 84
16233: PUSH
16234: LD_INT 85
16236: PUSH
16237: LD_INT 87
16239: PUSH
16240: LD_INT 88
16242: PUSH
16243: LD_INT 92
16245: PUSH
16246: LD_INT 94
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: ST_TO_ADDR
16307: GO 16548
16309: LD_INT 3
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16547
16317: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16318: LD_ADDR_VAR 0 4
16322: PUSH
16323: LD_INT 46
16325: PUSH
16326: LD_INT 47
16328: PUSH
16329: LD_INT 1
16331: PUSH
16332: LD_INT 2
16334: PUSH
16335: LD_INT 82
16337: PUSH
16338: LD_INT 83
16340: PUSH
16341: LD_INT 84
16343: PUSH
16344: LD_INT 85
16346: PUSH
16347: LD_INT 86
16349: PUSH
16350: LD_INT 11
16352: PUSH
16353: LD_INT 9
16355: PUSH
16356: LD_INT 20
16358: PUSH
16359: LD_INT 19
16361: PUSH
16362: LD_INT 21
16364: PUSH
16365: LD_INT 24
16367: PUSH
16368: LD_INT 22
16370: PUSH
16371: LD_INT 25
16373: PUSH
16374: LD_INT 28
16376: PUSH
16377: LD_INT 29
16379: PUSH
16380: LD_INT 30
16382: PUSH
16383: LD_INT 31
16385: PUSH
16386: LD_INT 37
16388: PUSH
16389: LD_INT 38
16391: PUSH
16392: LD_INT 32
16394: PUSH
16395: LD_INT 27
16397: PUSH
16398: LD_INT 33
16400: PUSH
16401: LD_INT 69
16403: PUSH
16404: LD_INT 39
16406: PUSH
16407: LD_INT 34
16409: PUSH
16410: LD_INT 40
16412: PUSH
16413: LD_INT 71
16415: PUSH
16416: LD_INT 23
16418: PUSH
16419: LD_INT 44
16421: PUSH
16422: LD_INT 48
16424: PUSH
16425: LD_INT 49
16427: PUSH
16428: LD_INT 50
16430: PUSH
16431: LD_INT 51
16433: PUSH
16434: LD_INT 52
16436: PUSH
16437: LD_INT 53
16439: PUSH
16440: LD_INT 54
16442: PUSH
16443: LD_INT 55
16445: PUSH
16446: LD_INT 56
16448: PUSH
16449: LD_INT 57
16451: PUSH
16452: LD_INT 58
16454: PUSH
16455: LD_INT 59
16457: PUSH
16458: LD_INT 63
16460: PUSH
16461: LD_INT 64
16463: PUSH
16464: LD_INT 65
16466: PUSH
16467: LD_INT 82
16469: PUSH
16470: LD_INT 83
16472: PUSH
16473: LD_INT 84
16475: PUSH
16476: LD_INT 85
16478: PUSH
16479: LD_INT 86
16481: PUSH
16482: LD_INT 89
16484: PUSH
16485: LD_INT 91
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: ST_TO_ADDR
16545: GO 16548
16547: POP
// if state > - 1 and state < 3 then
16548: LD_VAR 0 3
16552: PUSH
16553: LD_INT 1
16555: NEG
16556: GREATER
16557: IFFALSE 16569
16559: PUSH
16560: LD_VAR 0 3
16564: PUSH
16565: LD_INT 3
16567: LESS
16568: AND
16569: IFFALSE 16626
// for i in result do
16571: LD_ADDR_VAR 0 5
16575: PUSH
16576: LD_VAR 0 4
16580: PUSH
16581: FOR_IN
16582: IFFALSE 16624
// if GetTech ( i , side ) <> state then
16584: LD_VAR 0 5
16588: PPUSH
16589: LD_VAR 0 1
16593: PPUSH
16594: CALL_OW 321
16598: PUSH
16599: LD_VAR 0 3
16603: NONEQUAL
16604: IFFALSE 16622
// result := result diff i ;
16606: LD_ADDR_VAR 0 4
16610: PUSH
16611: LD_VAR 0 4
16615: PUSH
16616: LD_VAR 0 5
16620: DIFF
16621: ST_TO_ADDR
16622: GO 16581
16624: POP
16625: POP
// end ;
16626: LD_VAR 0 4
16630: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16631: LD_INT 0
16633: PPUSH
16634: PPUSH
16635: PPUSH
// result := true ;
16636: LD_ADDR_VAR 0 3
16640: PUSH
16641: LD_INT 1
16643: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 480
16658: ST_TO_ADDR
// if not tmp then
16659: LD_VAR 0 5
16663: NOT
16664: IFFALSE 16668
// exit ;
16666: GO 16717
// for i in tmp do
16668: LD_ADDR_VAR 0 4
16672: PUSH
16673: LD_VAR 0 5
16677: PUSH
16678: FOR_IN
16679: IFFALSE 16715
// if GetTech ( i , side ) <> state_researched then
16681: LD_VAR 0 4
16685: PPUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 321
16695: PUSH
16696: LD_INT 2
16698: NONEQUAL
16699: IFFALSE 16713
// begin result := false ;
16701: LD_ADDR_VAR 0 3
16705: PUSH
16706: LD_INT 0
16708: ST_TO_ADDR
// exit ;
16709: POP
16710: POP
16711: GO 16717
// end ;
16713: GO 16678
16715: POP
16716: POP
// end ;
16717: LD_VAR 0 3
16721: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16722: LD_INT 0
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16737: LD_VAR 0 1
16741: NOT
16742: IFTRUE 16759
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 257
16754: PUSH
16755: LD_INT 9
16757: NONEQUAL
16758: OR
16759: IFFALSE 16763
// exit ;
16761: GO 17342
// side := GetSide ( unit ) ;
16763: LD_ADDR_VAR 0 9
16767: PUSH
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 255
16777: ST_TO_ADDR
// tech_space := tech_spacanom ;
16778: LD_ADDR_VAR 0 12
16782: PUSH
16783: LD_INT 29
16785: ST_TO_ADDR
// tech_time := tech_taurad ;
16786: LD_ADDR_VAR 0 13
16790: PUSH
16791: LD_INT 28
16793: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16794: LD_ADDR_VAR 0 11
16798: PUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 310
16808: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16809: LD_VAR 0 11
16813: PPUSH
16814: CALL_OW 247
16818: PUSH
16819: LD_INT 2
16821: EQUAL
16822: IFFALSE 16826
// exit ;
16824: GO 17342
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16826: LD_ADDR_VAR 0 8
16830: PUSH
16831: LD_INT 81
16833: PUSH
16834: LD_VAR 0 9
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 3
16845: PUSH
16846: LD_INT 21
16848: PUSH
16849: LD_INT 3
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// if not tmp then
16869: LD_VAR 0 8
16873: NOT
16874: IFFALSE 16878
// exit ;
16876: GO 17342
// if in_unit then
16878: LD_VAR 0 11
16882: IFFALSE 16906
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16884: LD_ADDR_VAR 0 10
16888: PUSH
16889: LD_VAR 0 8
16893: PPUSH
16894: LD_VAR 0 11
16898: PPUSH
16899: CALL_OW 74
16903: ST_TO_ADDR
16904: GO 16926
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16906: LD_ADDR_VAR 0 10
16910: PUSH
16911: LD_VAR 0 8
16915: PPUSH
16916: LD_VAR 0 1
16920: PPUSH
16921: CALL_OW 74
16925: ST_TO_ADDR
// if not enemy then
16926: LD_VAR 0 10
16930: NOT
16931: IFFALSE 16935
// exit ;
16933: GO 17342
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16935: LD_VAR 0 11
16939: IFFALSE 16961
16941: PUSH
16942: LD_VAR 0 11
16946: PPUSH
16947: LD_VAR 0 10
16951: PPUSH
16952: CALL_OW 296
16956: PUSH
16957: LD_INT 13
16959: GREATER
16960: AND
16961: IFTRUE 16983
16963: PUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: LD_VAR 0 10
16973: PPUSH
16974: CALL_OW 296
16978: PUSH
16979: LD_INT 12
16981: GREATER
16982: OR
16983: IFFALSE 16987
// exit ;
16985: GO 17342
// missile := [ 1 ] ;
16987: LD_ADDR_VAR 0 14
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: EMPTY
16996: LIST
16997: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16998: LD_VAR 0 9
17002: PPUSH
17003: LD_VAR 0 12
17007: PPUSH
17008: CALL_OW 325
17012: IFFALSE 17041
// missile := Replace ( missile , missile + 1 , 2 ) ;
17014: LD_ADDR_VAR 0 14
17018: PUSH
17019: LD_VAR 0 14
17023: PPUSH
17024: LD_VAR 0 14
17028: PUSH
17029: LD_INT 1
17031: PLUS
17032: PPUSH
17033: LD_INT 2
17035: PPUSH
17036: CALL_OW 1
17040: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17041: LD_VAR 0 9
17045: PPUSH
17046: LD_VAR 0 13
17050: PPUSH
17051: CALL_OW 325
17055: IFFALSE 17079
17057: PUSH
17058: LD_VAR 0 10
17062: PPUSH
17063: CALL_OW 255
17067: PPUSH
17068: LD_VAR 0 13
17072: PPUSH
17073: CALL_OW 325
17077: NOT
17078: AND
17079: IFFALSE 17108
// missile := Replace ( missile , missile + 1 , 3 ) ;
17081: LD_ADDR_VAR 0 14
17085: PUSH
17086: LD_VAR 0 14
17090: PPUSH
17091: LD_VAR 0 14
17095: PUSH
17096: LD_INT 1
17098: PLUS
17099: PPUSH
17100: LD_INT 3
17102: PPUSH
17103: CALL_OW 1
17107: ST_TO_ADDR
// if missile < 2 then
17108: LD_VAR 0 14
17112: PUSH
17113: LD_INT 2
17115: LESS
17116: IFFALSE 17120
// exit ;
17118: GO 17342
// x := GetX ( enemy ) ;
17120: LD_ADDR_VAR 0 4
17124: PUSH
17125: LD_VAR 0 10
17129: PPUSH
17130: CALL_OW 250
17134: ST_TO_ADDR
// y := GetY ( enemy ) ;
17135: LD_ADDR_VAR 0 5
17139: PUSH
17140: LD_VAR 0 10
17144: PPUSH
17145: CALL_OW 251
17149: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17150: LD_ADDR_VAR 0 6
17154: PUSH
17155: LD_VAR 0 4
17159: PUSH
17160: LD_INT 1
17162: NEG
17163: PPUSH
17164: LD_INT 1
17166: PPUSH
17167: CALL_OW 12
17171: PLUS
17172: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17173: LD_ADDR_VAR 0 7
17177: PUSH
17178: LD_VAR 0 5
17182: PUSH
17183: LD_INT 1
17185: NEG
17186: PPUSH
17187: LD_INT 1
17189: PPUSH
17190: CALL_OW 12
17194: PLUS
17195: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17196: LD_VAR 0 6
17200: PPUSH
17201: LD_VAR 0 7
17205: PPUSH
17206: CALL_OW 488
17210: NOT
17211: IFFALSE 17233
// begin _x := x ;
17213: LD_ADDR_VAR 0 6
17217: PUSH
17218: LD_VAR 0 4
17222: ST_TO_ADDR
// _y := y ;
17223: LD_ADDR_VAR 0 7
17227: PUSH
17228: LD_VAR 0 5
17232: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17233: LD_ADDR_VAR 0 3
17237: PUSH
17238: LD_INT 1
17240: PPUSH
17241: LD_VAR 0 14
17245: PPUSH
17246: CALL_OW 12
17250: ST_TO_ADDR
// case i of 1 :
17251: LD_VAR 0 3
17255: PUSH
17256: LD_INT 1
17258: DOUBLE
17259: EQUAL
17260: IFTRUE 17264
17262: GO 17281
17264: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17265: LD_VAR 0 1
17269: PPUSH
17270: LD_VAR 0 10
17274: PPUSH
17275: CALL_OW 115
17279: GO 17342
17281: LD_INT 2
17283: DOUBLE
17284: EQUAL
17285: IFTRUE 17289
17287: GO 17311
17289: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17290: LD_VAR 0 1
17294: PPUSH
17295: LD_VAR 0 6
17299: PPUSH
17300: LD_VAR 0 7
17304: PPUSH
17305: CALL_OW 153
17309: GO 17342
17311: LD_INT 3
17313: DOUBLE
17314: EQUAL
17315: IFTRUE 17319
17317: GO 17341
17319: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17320: LD_VAR 0 1
17324: PPUSH
17325: LD_VAR 0 6
17329: PPUSH
17330: LD_VAR 0 7
17334: PPUSH
17335: CALL_OW 154
17339: GO 17342
17341: POP
// end ;
17342: LD_VAR 0 2
17346: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17347: LD_INT 0
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
// if not unit or not building then
17355: LD_VAR 0 1
17359: NOT
17360: IFTRUE 17369
17362: PUSH
17363: LD_VAR 0 2
17367: NOT
17368: OR
17369: IFFALSE 17373
// exit ;
17371: GO 17531
// x := GetX ( building ) ;
17373: LD_ADDR_VAR 0 5
17377: PUSH
17378: LD_VAR 0 2
17382: PPUSH
17383: CALL_OW 250
17387: ST_TO_ADDR
// y := GetY ( building ) ;
17388: LD_ADDR_VAR 0 6
17392: PUSH
17393: LD_VAR 0 2
17397: PPUSH
17398: CALL_OW 251
17402: ST_TO_ADDR
// for i := 0 to 5 do
17403: LD_ADDR_VAR 0 4
17407: PUSH
17408: DOUBLE
17409: LD_INT 0
17411: DEC
17412: ST_TO_ADDR
17413: LD_INT 5
17415: PUSH
17416: FOR_TO
17417: IFFALSE 17529
// begin _x := ShiftX ( x , i , 3 ) ;
17419: LD_ADDR_VAR 0 7
17423: PUSH
17424: LD_VAR 0 5
17428: PPUSH
17429: LD_VAR 0 4
17433: PPUSH
17434: LD_INT 3
17436: PPUSH
17437: CALL_OW 272
17441: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17442: LD_ADDR_VAR 0 8
17446: PUSH
17447: LD_VAR 0 6
17451: PPUSH
17452: LD_VAR 0 4
17456: PPUSH
17457: LD_INT 3
17459: PPUSH
17460: CALL_OW 273
17464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17465: LD_VAR 0 7
17469: PPUSH
17470: LD_VAR 0 8
17474: PPUSH
17475: CALL_OW 488
17479: NOT
17480: IFFALSE 17484
// continue ;
17482: GO 17416
// if HexInfo ( _x , _y ) = 0 then
17484: LD_VAR 0 7
17488: PPUSH
17489: LD_VAR 0 8
17493: PPUSH
17494: CALL_OW 428
17498: PUSH
17499: LD_INT 0
17501: EQUAL
17502: IFFALSE 17527
// begin ComMoveXY ( unit , _x , _y ) ;
17504: LD_VAR 0 1
17508: PPUSH
17509: LD_VAR 0 7
17513: PPUSH
17514: LD_VAR 0 8
17518: PPUSH
17519: CALL_OW 111
// exit ;
17523: POP
17524: POP
17525: GO 17531
// end ; end ;
17527: GO 17416
17529: POP
17530: POP
// end ;
17531: LD_VAR 0 3
17535: RET
// export function ScanBase ( side , base_area ) ; begin
17536: LD_INT 0
17538: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17539: LD_ADDR_VAR 0 3
17543: PUSH
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_INT 81
17551: PUSH
17552: LD_VAR 0 1
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 70
17565: ST_TO_ADDR
// end ;
17566: LD_VAR 0 3
17570: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17571: LD_INT 0
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
// result := false ;
17577: LD_ADDR_VAR 0 2
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// side := GetSide ( unit ) ;
17585: LD_ADDR_VAR 0 3
17589: PUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: CALL_OW 255
17599: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17600: LD_ADDR_VAR 0 4
17604: PUSH
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 248
17614: ST_TO_ADDR
// case nat of 1 :
17615: LD_VAR 0 4
17619: PUSH
17620: LD_INT 1
17622: DOUBLE
17623: EQUAL
17624: IFTRUE 17628
17626: GO 17639
17628: POP
// tech := tech_lassight ; 2 :
17629: LD_ADDR_VAR 0 5
17633: PUSH
17634: LD_INT 12
17636: ST_TO_ADDR
17637: GO 17678
17639: LD_INT 2
17641: DOUBLE
17642: EQUAL
17643: IFTRUE 17647
17645: GO 17658
17647: POP
// tech := tech_mortar ; 3 :
17648: LD_ADDR_VAR 0 5
17652: PUSH
17653: LD_INT 41
17655: ST_TO_ADDR
17656: GO 17678
17658: LD_INT 3
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17677
17666: POP
// tech := tech_bazooka ; end ;
17667: LD_ADDR_VAR 0 5
17671: PUSH
17672: LD_INT 44
17674: ST_TO_ADDR
17675: GO 17678
17677: POP
// if Researched ( side , tech ) then
17678: LD_VAR 0 3
17682: PPUSH
17683: LD_VAR 0 5
17687: PPUSH
17688: CALL_OW 325
17692: IFFALSE 17719
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17694: LD_ADDR_VAR 0 2
17698: PUSH
17699: LD_INT 5
17701: PUSH
17702: LD_INT 8
17704: PUSH
17705: LD_INT 9
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PUSH
17713: LD_VAR 0 4
17717: ARRAY
17718: ST_TO_ADDR
// end ;
17719: LD_VAR 0 2
17723: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
17728: PPUSH
// if not mines then
17729: LD_VAR 0 2
17733: NOT
17734: IFFALSE 17738
// exit ;
17736: GO 17882
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17738: LD_ADDR_VAR 0 5
17742: PUSH
17743: LD_INT 81
17745: PUSH
17746: LD_VAR 0 1
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 3
17757: PUSH
17758: LD_INT 21
17760: PUSH
17761: LD_INT 3
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PPUSH
17776: CALL_OW 69
17780: ST_TO_ADDR
// for i in mines do
17781: LD_ADDR_VAR 0 4
17785: PUSH
17786: LD_VAR 0 2
17790: PUSH
17791: FOR_IN
17792: IFFALSE 17880
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17794: LD_VAR 0 4
17798: PUSH
17799: LD_INT 1
17801: ARRAY
17802: PPUSH
17803: LD_VAR 0 4
17807: PUSH
17808: LD_INT 2
17810: ARRAY
17811: PPUSH
17812: CALL_OW 458
17816: NOT
17817: IFFALSE 17821
// continue ;
17819: GO 17791
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17821: LD_VAR 0 4
17825: PUSH
17826: LD_INT 1
17828: ARRAY
17829: PPUSH
17830: LD_VAR 0 4
17834: PUSH
17835: LD_INT 2
17837: ARRAY
17838: PPUSH
17839: CALL_OW 428
17843: PUSH
17844: LD_VAR 0 5
17848: IN
17849: IFFALSE 17878
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17851: LD_VAR 0 4
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: PPUSH
17860: LD_VAR 0 4
17864: PUSH
17865: LD_INT 2
17867: ARRAY
17868: PPUSH
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 456
// end ;
17878: GO 17791
17880: POP
17881: POP
// end ;
17882: LD_VAR 0 3
17886: RET
// export function Count ( array ) ; begin
17887: LD_INT 0
17889: PPUSH
// result := array + 0 ;
17890: LD_ADDR_VAR 0 2
17894: PUSH
17895: LD_VAR 0 1
17899: PUSH
17900: LD_INT 0
17902: PLUS
17903: ST_TO_ADDR
// end ;
17904: LD_VAR 0 2
17908: RET
// export function IsEmpty ( building ) ; begin
17909: LD_INT 0
17911: PPUSH
// if not building then
17912: LD_VAR 0 1
17916: NOT
17917: IFFALSE 17921
// exit ;
17919: GO 17964
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17921: LD_ADDR_VAR 0 2
17925: PUSH
17926: LD_VAR 0 1
17930: PUSH
17931: LD_INT 22
17933: PUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 255
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 58
17950: PUSH
17951: EMPTY
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 69
17962: IN
17963: ST_TO_ADDR
// end ;
17964: LD_VAR 0 2
17968: RET
// export function IsNotFull ( building ) ; var places ; begin
17969: LD_INT 0
17971: PPUSH
17972: PPUSH
// if not building then
17973: LD_VAR 0 1
17977: NOT
17978: IFFALSE 17982
// exit ;
17980: GO 18010
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17982: LD_ADDR_VAR 0 2
17986: PUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_INT 3
17994: PUSH
17995: LD_INT 62
17997: PUSH
17998: EMPTY
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PPUSH
18005: CALL_OW 72
18009: ST_TO_ADDR
// end ;
18010: LD_VAR 0 2
18014: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18015: LD_INT 0
18017: PPUSH
18018: PPUSH
18019: PPUSH
18020: PPUSH
// tmp := [ ] ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: EMPTY
18027: ST_TO_ADDR
// list := [ ] ;
18028: LD_ADDR_VAR 0 5
18032: PUSH
18033: EMPTY
18034: ST_TO_ADDR
// for i = 16 to 25 do
18035: LD_ADDR_VAR 0 4
18039: PUSH
18040: DOUBLE
18041: LD_INT 16
18043: DEC
18044: ST_TO_ADDR
18045: LD_INT 25
18047: PUSH
18048: FOR_TO
18049: IFFALSE 18122
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18051: LD_ADDR_VAR 0 3
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 255
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 91
18080: PUSH
18081: LD_VAR 0 1
18085: PUSH
18086: LD_INT 6
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 30
18096: PUSH
18097: LD_VAR 0 4
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: PPUSH
18114: CALL_OW 69
18118: ADD
18119: ST_TO_ADDR
18120: GO 18048
18122: POP
18123: POP
// for i = 1 to tmp do
18124: LD_ADDR_VAR 0 4
18128: PUSH
18129: DOUBLE
18130: LD_INT 1
18132: DEC
18133: ST_TO_ADDR
18134: LD_VAR 0 3
18138: PUSH
18139: FOR_TO
18140: IFFALSE 18228
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18142: LD_ADDR_VAR 0 5
18146: PUSH
18147: LD_VAR 0 5
18151: PUSH
18152: LD_VAR 0 3
18156: PUSH
18157: LD_VAR 0 4
18161: ARRAY
18162: PPUSH
18163: CALL_OW 266
18167: PUSH
18168: LD_VAR 0 3
18172: PUSH
18173: LD_VAR 0 4
18177: ARRAY
18178: PPUSH
18179: CALL_OW 250
18183: PUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_VAR 0 4
18193: ARRAY
18194: PPUSH
18195: CALL_OW 251
18199: PUSH
18200: LD_VAR 0 3
18204: PUSH
18205: LD_VAR 0 4
18209: ARRAY
18210: PPUSH
18211: CALL_OW 254
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: ADD
18225: ST_TO_ADDR
18226: GO 18139
18228: POP
18229: POP
// result := list ;
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_VAR 0 5
18239: ST_TO_ADDR
// end ;
18240: LD_VAR 0 2
18244: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
// if not factory then
18254: LD_VAR 0 1
18258: NOT
18259: IFFALSE 18263
// exit ;
18261: GO 18866
// if control = control_apeman then
18263: LD_VAR 0 4
18267: PUSH
18268: LD_INT 5
18270: EQUAL
18271: IFFALSE 18380
// begin tmp := UnitsInside ( factory ) ;
18273: LD_ADDR_VAR 0 8
18277: PUSH
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 313
18287: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18288: LD_VAR 0 8
18292: PPUSH
18293: LD_INT 25
18295: PUSH
18296: LD_INT 12
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 72
18307: NOT
18308: IFFALSE 18318
// control := control_manual ;
18310: LD_ADDR_VAR 0 4
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18318: LD_ADDR_VAR 0 8
18322: PUSH
18323: LD_VAR 0 1
18327: PPUSH
18328: CALL 18015 0 1
18332: ST_TO_ADDR
// if tmp then
18333: LD_VAR 0 8
18337: IFFALSE 18380
// begin for i in tmp do
18339: LD_ADDR_VAR 0 7
18343: PUSH
18344: LD_VAR 0 8
18348: PUSH
18349: FOR_IN
18350: IFFALSE 18378
// if i [ 1 ] = b_ext_radio then
18352: LD_VAR 0 7
18356: PUSH
18357: LD_INT 1
18359: ARRAY
18360: PUSH
18361: LD_INT 22
18363: EQUAL
18364: IFFALSE 18376
// begin control := control_remote ;
18366: LD_ADDR_VAR 0 4
18370: PUSH
18371: LD_INT 2
18373: ST_TO_ADDR
// break ;
18374: GO 18378
// end ;
18376: GO 18349
18378: POP
18379: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18380: LD_VAR 0 1
18384: PPUSH
18385: LD_VAR 0 2
18389: PPUSH
18390: LD_VAR 0 3
18394: PPUSH
18395: LD_VAR 0 4
18399: PPUSH
18400: LD_VAR 0 5
18404: PPUSH
18405: CALL_OW 448
18409: IFFALSE 18444
// begin result := [ chassis , engine , control , weapon ] ;
18411: LD_ADDR_VAR 0 6
18415: PUSH
18416: LD_VAR 0 2
18420: PUSH
18421: LD_VAR 0 3
18425: PUSH
18426: LD_VAR 0 4
18430: PUSH
18431: LD_VAR 0 5
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: ST_TO_ADDR
// exit ;
18442: GO 18866
// end ; _chassis := AvailableChassisList ( factory ) ;
18444: LD_ADDR_VAR 0 9
18448: PUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 475
18458: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18459: LD_ADDR_VAR 0 11
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 476
18473: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18474: LD_ADDR_VAR 0 12
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 477
18488: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18489: LD_ADDR_VAR 0 10
18493: PUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 478
18503: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18504: LD_VAR 0 9
18508: NOT
18509: IFTRUE 18518
18511: PUSH
18512: LD_VAR 0 11
18516: NOT
18517: OR
18518: IFTRUE 18527
18520: PUSH
18521: LD_VAR 0 12
18525: NOT
18526: OR
18527: IFTRUE 18536
18529: PUSH
18530: LD_VAR 0 10
18534: NOT
18535: OR
18536: IFFALSE 18571
// begin result := [ chassis , engine , control , weapon ] ;
18538: LD_ADDR_VAR 0 6
18542: PUSH
18543: LD_VAR 0 2
18547: PUSH
18548: LD_VAR 0 3
18552: PUSH
18553: LD_VAR 0 4
18557: PUSH
18558: LD_VAR 0 5
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: ST_TO_ADDR
// exit ;
18569: GO 18866
// end ; if not chassis in _chassis then
18571: LD_VAR 0 2
18575: PUSH
18576: LD_VAR 0 9
18580: IN
18581: NOT
18582: IFFALSE 18608
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18584: LD_ADDR_VAR 0 2
18588: PUSH
18589: LD_VAR 0 9
18593: PUSH
18594: LD_INT 1
18596: PPUSH
18597: LD_VAR 0 9
18601: PPUSH
18602: CALL_OW 12
18606: ARRAY
18607: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18608: LD_VAR 0 2
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: CALL 18871 0 2
18622: NOT
18623: IFFALSE 18684
// repeat engine := _engine [ 1 ] ;
18625: LD_ADDR_VAR 0 3
18629: PUSH
18630: LD_VAR 0 11
18634: PUSH
18635: LD_INT 1
18637: ARRAY
18638: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18639: LD_ADDR_VAR 0 11
18643: PUSH
18644: LD_VAR 0 11
18648: PPUSH
18649: LD_INT 1
18651: PPUSH
18652: CALL_OW 3
18656: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18657: LD_VAR 0 2
18661: PPUSH
18662: LD_VAR 0 3
18666: PPUSH
18667: CALL 18871 0 2
18671: IFTRUE 18682
18673: PUSH
18674: LD_VAR 0 11
18678: PUSH
18679: EMPTY
18680: EQUAL
18681: OR
18682: IFFALSE 18625
// if not control in _control then
18684: LD_VAR 0 4
18688: PUSH
18689: LD_VAR 0 12
18693: IN
18694: NOT
18695: IFFALSE 18721
// control := _control [ rand ( 1 , _control ) ] ;
18697: LD_ADDR_VAR 0 4
18701: PUSH
18702: LD_VAR 0 12
18706: PUSH
18707: LD_INT 1
18709: PPUSH
18710: LD_VAR 0 12
18714: PPUSH
18715: CALL_OW 12
18719: ARRAY
18720: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18721: LD_VAR 0 2
18725: PPUSH
18726: LD_VAR 0 5
18730: PPUSH
18731: CALL 19093 0 2
18735: NOT
18736: IFFALSE 18797
// repeat weapon := _weapon [ 1 ] ;
18738: LD_ADDR_VAR 0 5
18742: PUSH
18743: LD_VAR 0 10
18747: PUSH
18748: LD_INT 1
18750: ARRAY
18751: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18752: LD_ADDR_VAR 0 10
18756: PUSH
18757: LD_VAR 0 10
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 3
18769: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18770: LD_VAR 0 2
18774: PPUSH
18775: LD_VAR 0 5
18779: PPUSH
18780: CALL 19093 0 2
18784: IFTRUE 18795
18786: PUSH
18787: LD_VAR 0 10
18791: PUSH
18792: EMPTY
18793: EQUAL
18794: OR
18795: IFFALSE 18738
// result := [ ] ;
18797: LD_ADDR_VAR 0 6
18801: PUSH
18802: EMPTY
18803: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18804: LD_VAR 0 1
18808: PPUSH
18809: LD_VAR 0 2
18813: PPUSH
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_VAR 0 4
18823: PPUSH
18824: LD_VAR 0 5
18828: PPUSH
18829: CALL_OW 448
18833: IFFALSE 18866
// result := [ chassis , engine , control , weapon ] ;
18835: LD_ADDR_VAR 0 6
18839: PUSH
18840: LD_VAR 0 2
18844: PUSH
18845: LD_VAR 0 3
18849: PUSH
18850: LD_VAR 0 4
18854: PUSH
18855: LD_VAR 0 5
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: ST_TO_ADDR
// end ;
18866: LD_VAR 0 6
18870: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18871: LD_INT 0
18873: PPUSH
// if not chassis or not engine then
18874: LD_VAR 0 1
18878: NOT
18879: IFTRUE 18888
18881: PUSH
18882: LD_VAR 0 2
18886: NOT
18887: OR
18888: IFFALSE 18892
// exit ;
18890: GO 19088
// case engine of engine_solar :
18892: LD_VAR 0 2
18896: PUSH
18897: LD_INT 2
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 18943
18905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18906: LD_ADDR_VAR 0 3
18910: PUSH
18911: LD_INT 11
18913: PUSH
18914: LD_INT 12
18916: PUSH
18917: LD_INT 13
18919: PUSH
18920: LD_INT 14
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 3
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: ST_TO_ADDR
18941: GO 19072
18943: LD_INT 1
18945: DOUBLE
18946: EQUAL
18947: IFTRUE 18951
18949: GO 19013
18951: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18952: LD_ADDR_VAR 0 3
18956: PUSH
18957: LD_INT 11
18959: PUSH
18960: LD_INT 12
18962: PUSH
18963: LD_INT 13
18965: PUSH
18966: LD_INT 14
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 2
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: LD_INT 4
18980: PUSH
18981: LD_INT 5
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 23
18989: PUSH
18990: LD_INT 22
18992: PUSH
18993: LD_INT 24
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: ST_TO_ADDR
19011: GO 19072
19013: LD_INT 3
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19071
19021: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19022: LD_ADDR_VAR 0 3
19026: PUSH
19027: LD_INT 13
19029: PUSH
19030: LD_INT 14
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: LD_INT 3
19038: PUSH
19039: LD_INT 4
19041: PUSH
19042: LD_INT 5
19044: PUSH
19045: LD_INT 21
19047: PUSH
19048: LD_INT 22
19050: PUSH
19051: LD_INT 23
19053: PUSH
19054: LD_INT 24
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: ST_TO_ADDR
19069: GO 19072
19071: POP
// result := ( chassis in result ) ;
19072: LD_ADDR_VAR 0 3
19076: PUSH
19077: LD_VAR 0 1
19081: PUSH
19082: LD_VAR 0 3
19086: IN
19087: ST_TO_ADDR
// end ;
19088: LD_VAR 0 3
19092: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19093: LD_INT 0
19095: PPUSH
// if not chassis or not weapon then
19096: LD_VAR 0 1
19100: NOT
19101: IFTRUE 19110
19103: PUSH
19104: LD_VAR 0 2
19108: NOT
19109: OR
19110: IFFALSE 19114
// exit ;
19112: GO 20208
// case weapon of us_machine_gun :
19114: LD_VAR 0 2
19118: PUSH
19119: LD_INT 2
19121: DOUBLE
19122: EQUAL
19123: IFTRUE 19127
19125: GO 19157
19127: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19128: LD_ADDR_VAR 0 3
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 3
19141: PUSH
19142: LD_INT 4
19144: PUSH
19145: LD_INT 5
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: ST_TO_ADDR
19155: GO 20192
19157: LD_INT 3
19159: DOUBLE
19160: EQUAL
19161: IFTRUE 19165
19163: GO 19195
19165: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19166: LD_ADDR_VAR 0 3
19170: PUSH
19171: LD_INT 1
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: LD_INT 3
19179: PUSH
19180: LD_INT 4
19182: PUSH
19183: LD_INT 5
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: ST_TO_ADDR
19193: GO 20192
19195: LD_INT 11
19197: DOUBLE
19198: EQUAL
19199: IFTRUE 19203
19201: GO 19233
19203: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19204: LD_ADDR_VAR 0 3
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: LD_INT 3
19217: PUSH
19218: LD_INT 4
19220: PUSH
19221: LD_INT 5
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: ST_TO_ADDR
19231: GO 20192
19233: LD_INT 4
19235: DOUBLE
19236: EQUAL
19237: IFTRUE 19241
19239: GO 19267
19241: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19242: LD_ADDR_VAR 0 3
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: LD_INT 4
19255: PUSH
19256: LD_INT 5
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: ST_TO_ADDR
19265: GO 20192
19267: LD_INT 5
19269: DOUBLE
19270: EQUAL
19271: IFTRUE 19275
19273: GO 19301
19275: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19276: LD_ADDR_VAR 0 3
19280: PUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 3
19286: PUSH
19287: LD_INT 4
19289: PUSH
19290: LD_INT 5
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: ST_TO_ADDR
19299: GO 20192
19301: LD_INT 9
19303: DOUBLE
19304: EQUAL
19305: IFTRUE 19309
19307: GO 19335
19309: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19310: LD_ADDR_VAR 0 3
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: LD_INT 3
19320: PUSH
19321: LD_INT 4
19323: PUSH
19324: LD_INT 5
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: ST_TO_ADDR
19333: GO 20192
19335: LD_INT 7
19337: DOUBLE
19338: EQUAL
19339: IFTRUE 19343
19341: GO 19369
19343: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19344: LD_ADDR_VAR 0 3
19348: PUSH
19349: LD_INT 2
19351: PUSH
19352: LD_INT 3
19354: PUSH
19355: LD_INT 4
19357: PUSH
19358: LD_INT 5
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: ST_TO_ADDR
19367: GO 20192
19369: LD_INT 12
19371: DOUBLE
19372: EQUAL
19373: IFTRUE 19377
19375: GO 19403
19377: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19378: LD_ADDR_VAR 0 3
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: LD_INT 4
19391: PUSH
19392: LD_INT 5
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: ST_TO_ADDR
19401: GO 20192
19403: LD_INT 13
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19437
19411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19412: LD_ADDR_VAR 0 3
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 3
19422: PUSH
19423: LD_INT 4
19425: PUSH
19426: LD_INT 5
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: ST_TO_ADDR
19435: GO 20192
19437: LD_INT 14
19439: DOUBLE
19440: EQUAL
19441: IFTRUE 19445
19443: GO 19463
19445: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19446: LD_ADDR_VAR 0 3
19450: PUSH
19451: LD_INT 4
19453: PUSH
19454: LD_INT 5
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: ST_TO_ADDR
19461: GO 20192
19463: LD_INT 6
19465: DOUBLE
19466: EQUAL
19467: IFTRUE 19471
19469: GO 19489
19471: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19472: LD_ADDR_VAR 0 3
19476: PUSH
19477: LD_INT 4
19479: PUSH
19480: LD_INT 5
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: ST_TO_ADDR
19487: GO 20192
19489: LD_INT 10
19491: DOUBLE
19492: EQUAL
19493: IFTRUE 19497
19495: GO 19515
19497: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19498: LD_ADDR_VAR 0 3
19502: PUSH
19503: LD_INT 4
19505: PUSH
19506: LD_INT 5
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: ST_TO_ADDR
19513: GO 20192
19515: LD_INT 22
19517: DOUBLE
19518: EQUAL
19519: IFTRUE 19523
19521: GO 19549
19523: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: LD_INT 11
19531: PUSH
19532: LD_INT 12
19534: PUSH
19535: LD_INT 13
19537: PUSH
19538: LD_INT 14
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: ST_TO_ADDR
19547: GO 20192
19549: LD_INT 23
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19583
19557: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: LD_INT 11
19565: PUSH
19566: LD_INT 12
19568: PUSH
19569: LD_INT 13
19571: PUSH
19572: LD_INT 14
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: ST_TO_ADDR
19581: GO 20192
19583: LD_INT 24
19585: DOUBLE
19586: EQUAL
19587: IFTRUE 19591
19589: GO 19617
19591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19592: LD_ADDR_VAR 0 3
19596: PUSH
19597: LD_INT 11
19599: PUSH
19600: LD_INT 12
19602: PUSH
19603: LD_INT 13
19605: PUSH
19606: LD_INT 14
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: ST_TO_ADDR
19615: GO 20192
19617: LD_INT 30
19619: DOUBLE
19620: EQUAL
19621: IFTRUE 19625
19623: GO 19651
19625: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19626: LD_ADDR_VAR 0 3
19630: PUSH
19631: LD_INT 11
19633: PUSH
19634: LD_INT 12
19636: PUSH
19637: LD_INT 13
19639: PUSH
19640: LD_INT 14
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: ST_TO_ADDR
19649: GO 20192
19651: LD_INT 25
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19677
19659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19660: LD_ADDR_VAR 0 3
19664: PUSH
19665: LD_INT 13
19667: PUSH
19668: LD_INT 14
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: ST_TO_ADDR
19675: GO 20192
19677: LD_INT 27
19679: DOUBLE
19680: EQUAL
19681: IFTRUE 19685
19683: GO 19703
19685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: LD_INT 13
19693: PUSH
19694: LD_INT 14
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: ST_TO_ADDR
19701: GO 20192
19703: LD_INT 92
19705: DOUBLE
19706: EQUAL
19707: IFTRUE 19711
19709: GO 19737
19711: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_INT 11
19719: PUSH
19720: LD_INT 12
19722: PUSH
19723: LD_INT 13
19725: PUSH
19726: LD_INT 14
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: ST_TO_ADDR
19735: GO 20192
19737: LD_INT 28
19739: DOUBLE
19740: EQUAL
19741: IFTRUE 19745
19743: GO 19763
19745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19746: LD_ADDR_VAR 0 3
19750: PUSH
19751: LD_INT 13
19753: PUSH
19754: LD_INT 14
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: ST_TO_ADDR
19761: GO 20192
19763: LD_INT 29
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19789
19771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19772: LD_ADDR_VAR 0 3
19776: PUSH
19777: LD_INT 13
19779: PUSH
19780: LD_INT 14
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: ST_TO_ADDR
19787: GO 20192
19789: LD_INT 31
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19815
19797: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_INT 13
19805: PUSH
19806: LD_INT 14
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: ST_TO_ADDR
19813: GO 20192
19815: LD_INT 26
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19823
19821: GO 19841
19823: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19824: LD_ADDR_VAR 0 3
19828: PUSH
19829: LD_INT 13
19831: PUSH
19832: LD_INT 14
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: ST_TO_ADDR
19839: GO 20192
19841: LD_INT 42
19843: DOUBLE
19844: EQUAL
19845: IFTRUE 19849
19847: GO 19875
19849: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19850: LD_ADDR_VAR 0 3
19854: PUSH
19855: LD_INT 21
19857: PUSH
19858: LD_INT 22
19860: PUSH
19861: LD_INT 23
19863: PUSH
19864: LD_INT 24
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: ST_TO_ADDR
19873: GO 20192
19875: LD_INT 43
19877: DOUBLE
19878: EQUAL
19879: IFTRUE 19883
19881: GO 19909
19883: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19884: LD_ADDR_VAR 0 3
19888: PUSH
19889: LD_INT 21
19891: PUSH
19892: LD_INT 22
19894: PUSH
19895: LD_INT 23
19897: PUSH
19898: LD_INT 24
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: ST_TO_ADDR
19907: GO 20192
19909: LD_INT 44
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19943
19917: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19918: LD_ADDR_VAR 0 3
19922: PUSH
19923: LD_INT 21
19925: PUSH
19926: LD_INT 22
19928: PUSH
19929: LD_INT 23
19931: PUSH
19932: LD_INT 24
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: ST_TO_ADDR
19941: GO 20192
19943: LD_INT 45
19945: DOUBLE
19946: EQUAL
19947: IFTRUE 19951
19949: GO 19977
19951: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19952: LD_ADDR_VAR 0 3
19956: PUSH
19957: LD_INT 21
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_INT 23
19965: PUSH
19966: LD_INT 24
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: ST_TO_ADDR
19975: GO 20192
19977: LD_INT 49
19979: DOUBLE
19980: EQUAL
19981: IFTRUE 19985
19983: GO 20011
19985: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19986: LD_ADDR_VAR 0 3
19990: PUSH
19991: LD_INT 21
19993: PUSH
19994: LD_INT 22
19996: PUSH
19997: LD_INT 23
19999: PUSH
20000: LD_INT 24
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: ST_TO_ADDR
20009: GO 20192
20011: LD_INT 51
20013: DOUBLE
20014: EQUAL
20015: IFTRUE 20019
20017: GO 20045
20019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_INT 21
20027: PUSH
20028: LD_INT 22
20030: PUSH
20031: LD_INT 23
20033: PUSH
20034: LD_INT 24
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: ST_TO_ADDR
20043: GO 20192
20045: LD_INT 52
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20079
20053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20054: LD_ADDR_VAR 0 3
20058: PUSH
20059: LD_INT 21
20061: PUSH
20062: LD_INT 22
20064: PUSH
20065: LD_INT 23
20067: PUSH
20068: LD_INT 24
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: ST_TO_ADDR
20077: GO 20192
20079: LD_INT 53
20081: DOUBLE
20082: EQUAL
20083: IFTRUE 20087
20085: GO 20105
20087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20088: LD_ADDR_VAR 0 3
20092: PUSH
20093: LD_INT 23
20095: PUSH
20096: LD_INT 24
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: ST_TO_ADDR
20103: GO 20192
20105: LD_INT 46
20107: DOUBLE
20108: EQUAL
20109: IFTRUE 20113
20111: GO 20131
20113: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20114: LD_ADDR_VAR 0 3
20118: PUSH
20119: LD_INT 23
20121: PUSH
20122: LD_INT 24
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: ST_TO_ADDR
20129: GO 20192
20131: LD_INT 47
20133: DOUBLE
20134: EQUAL
20135: IFTRUE 20139
20137: GO 20157
20139: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 23
20147: PUSH
20148: LD_INT 24
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: ST_TO_ADDR
20155: GO 20192
20157: LD_INT 98
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20191
20165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_INT 21
20173: PUSH
20174: LD_INT 22
20176: PUSH
20177: LD_INT 23
20179: PUSH
20180: LD_INT 24
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: ST_TO_ADDR
20189: GO 20192
20191: POP
// result := ( chassis in result ) ;
20192: LD_ADDR_VAR 0 3
20196: PUSH
20197: LD_VAR 0 1
20201: PUSH
20202: LD_VAR 0 3
20206: IN
20207: ST_TO_ADDR
// end ;
20208: LD_VAR 0 3
20212: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20213: LD_INT 0
20215: PPUSH
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
// result := array ;
20222: LD_ADDR_VAR 0 5
20226: PUSH
20227: LD_VAR 0 1
20231: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20232: LD_VAR 0 1
20236: NOT
20237: IFTRUE 20246
20239: PUSH
20240: LD_VAR 0 2
20244: NOT
20245: OR
20246: IFTRUE 20255
20248: PUSH
20249: LD_VAR 0 3
20253: NOT
20254: OR
20255: IFTRUE 20269
20257: PUSH
20258: LD_VAR 0 2
20262: PUSH
20263: LD_VAR 0 1
20267: GREATER
20268: OR
20269: IFTRUE 20283
20271: PUSH
20272: LD_VAR 0 3
20276: PUSH
20277: LD_VAR 0 1
20281: GREATER
20282: OR
20283: IFFALSE 20287
// exit ;
20285: GO 20583
// if direction then
20287: LD_VAR 0 4
20291: IFFALSE 20355
// begin d := 1 ;
20293: LD_ADDR_VAR 0 9
20297: PUSH
20298: LD_INT 1
20300: ST_TO_ADDR
// if i_from > i_to then
20301: LD_VAR 0 2
20305: PUSH
20306: LD_VAR 0 3
20310: GREATER
20311: IFFALSE 20337
// length := ( array - i_from ) + i_to else
20313: LD_ADDR_VAR 0 11
20317: PUSH
20318: LD_VAR 0 1
20322: PUSH
20323: LD_VAR 0 2
20327: MINUS
20328: PUSH
20329: LD_VAR 0 3
20333: PLUS
20334: ST_TO_ADDR
20335: GO 20353
// length := i_to - i_from ;
20337: LD_ADDR_VAR 0 11
20341: PUSH
20342: LD_VAR 0 3
20346: PUSH
20347: LD_VAR 0 2
20351: MINUS
20352: ST_TO_ADDR
// end else
20353: GO 20416
// begin d := - 1 ;
20355: LD_ADDR_VAR 0 9
20359: PUSH
20360: LD_INT 1
20362: NEG
20363: ST_TO_ADDR
// if i_from > i_to then
20364: LD_VAR 0 2
20368: PUSH
20369: LD_VAR 0 3
20373: GREATER
20374: IFFALSE 20394
// length := i_from - i_to else
20376: LD_ADDR_VAR 0 11
20380: PUSH
20381: LD_VAR 0 2
20385: PUSH
20386: LD_VAR 0 3
20390: MINUS
20391: ST_TO_ADDR
20392: GO 20416
// length := ( array - i_to ) + i_from ;
20394: LD_ADDR_VAR 0 11
20398: PUSH
20399: LD_VAR 0 1
20403: PUSH
20404: LD_VAR 0 3
20408: MINUS
20409: PUSH
20410: LD_VAR 0 2
20414: PLUS
20415: ST_TO_ADDR
// end ; if not length then
20416: LD_VAR 0 11
20420: NOT
20421: IFFALSE 20425
// exit ;
20423: GO 20583
// tmp := array ;
20425: LD_ADDR_VAR 0 10
20429: PUSH
20430: LD_VAR 0 1
20434: ST_TO_ADDR
// for i = 1 to length do
20435: LD_ADDR_VAR 0 6
20439: PUSH
20440: DOUBLE
20441: LD_INT 1
20443: DEC
20444: ST_TO_ADDR
20445: LD_VAR 0 11
20449: PUSH
20450: FOR_TO
20451: IFFALSE 20571
// begin for j = 1 to array do
20453: LD_ADDR_VAR 0 7
20457: PUSH
20458: DOUBLE
20459: LD_INT 1
20461: DEC
20462: ST_TO_ADDR
20463: LD_VAR 0 1
20467: PUSH
20468: FOR_TO
20469: IFFALSE 20557
// begin k := j + d ;
20471: LD_ADDR_VAR 0 8
20475: PUSH
20476: LD_VAR 0 7
20480: PUSH
20481: LD_VAR 0 9
20485: PLUS
20486: ST_TO_ADDR
// if k > array then
20487: LD_VAR 0 8
20491: PUSH
20492: LD_VAR 0 1
20496: GREATER
20497: IFFALSE 20507
// k := 1 ;
20499: LD_ADDR_VAR 0 8
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// if not k then
20507: LD_VAR 0 8
20511: NOT
20512: IFFALSE 20524
// k := array ;
20514: LD_ADDR_VAR 0 8
20518: PUSH
20519: LD_VAR 0 1
20523: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20524: LD_ADDR_VAR 0 10
20528: PUSH
20529: LD_VAR 0 10
20533: PPUSH
20534: LD_VAR 0 8
20538: PPUSH
20539: LD_VAR 0 1
20543: PUSH
20544: LD_VAR 0 7
20548: ARRAY
20549: PPUSH
20550: CALL_OW 1
20554: ST_TO_ADDR
// end ;
20555: GO 20468
20557: POP
20558: POP
// array := tmp ;
20559: LD_ADDR_VAR 0 1
20563: PUSH
20564: LD_VAR 0 10
20568: ST_TO_ADDR
// end ;
20569: GO 20450
20571: POP
20572: POP
// result := array ;
20573: LD_ADDR_VAR 0 5
20577: PUSH
20578: LD_VAR 0 1
20582: ST_TO_ADDR
// end ;
20583: LD_VAR 0 5
20587: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20588: LD_INT 0
20590: PPUSH
20591: PPUSH
// result := 0 ;
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: LD_INT 0
20599: ST_TO_ADDR
// if not array or not value in array then
20600: LD_VAR 0 1
20604: NOT
20605: IFTRUE 20620
20607: PUSH
20608: LD_VAR 0 2
20612: PUSH
20613: LD_VAR 0 1
20617: IN
20618: NOT
20619: OR
20620: IFFALSE 20624
// exit ;
20622: GO 20678
// for i = 1 to array do
20624: LD_ADDR_VAR 0 4
20628: PUSH
20629: DOUBLE
20630: LD_INT 1
20632: DEC
20633: ST_TO_ADDR
20634: LD_VAR 0 1
20638: PUSH
20639: FOR_TO
20640: IFFALSE 20676
// if value = array [ i ] then
20642: LD_VAR 0 2
20646: PUSH
20647: LD_VAR 0 1
20651: PUSH
20652: LD_VAR 0 4
20656: ARRAY
20657: EQUAL
20658: IFFALSE 20674
// begin result := i ;
20660: LD_ADDR_VAR 0 3
20664: PUSH
20665: LD_VAR 0 4
20669: ST_TO_ADDR
// exit ;
20670: POP
20671: POP
20672: GO 20678
// end ;
20674: GO 20639
20676: POP
20677: POP
// end ;
20678: LD_VAR 0 3
20682: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20683: LD_INT 0
20685: PPUSH
// vc_chassis := chassis ;
20686: LD_ADDR_OWVAR 37
20690: PUSH
20691: LD_VAR 0 1
20695: ST_TO_ADDR
// vc_engine := engine ;
20696: LD_ADDR_OWVAR 39
20700: PUSH
20701: LD_VAR 0 2
20705: ST_TO_ADDR
// vc_control := control ;
20706: LD_ADDR_OWVAR 38
20710: PUSH
20711: LD_VAR 0 3
20715: ST_TO_ADDR
// vc_weapon := weapon ;
20716: LD_ADDR_OWVAR 40
20720: PUSH
20721: LD_VAR 0 4
20725: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20726: LD_ADDR_OWVAR 41
20730: PUSH
20731: LD_VAR 0 5
20735: ST_TO_ADDR
// end ;
20736: LD_VAR 0 6
20740: RET
// export function WantPlant ( unit ) ; var task ; begin
20741: LD_INT 0
20743: PPUSH
20744: PPUSH
// result := false ;
20745: LD_ADDR_VAR 0 2
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20753: LD_ADDR_VAR 0 3
20757: PUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL_OW 437
20767: ST_TO_ADDR
// if task then
20768: LD_VAR 0 3
20772: IFFALSE 20800
// if task [ 1 ] [ 1 ] = p then
20774: LD_VAR 0 3
20778: PUSH
20779: LD_INT 1
20781: ARRAY
20782: PUSH
20783: LD_INT 1
20785: ARRAY
20786: PUSH
20787: LD_STRING p
20789: EQUAL
20790: IFFALSE 20800
// result := true ;
20792: LD_ADDR_VAR 0 2
20796: PUSH
20797: LD_INT 1
20799: ST_TO_ADDR
// end ;
20800: LD_VAR 0 2
20804: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20805: LD_INT 0
20807: PPUSH
20808: PPUSH
20809: PPUSH
20810: PPUSH
// if pos < 1 then
20811: LD_VAR 0 2
20815: PUSH
20816: LD_INT 1
20818: LESS
20819: IFFALSE 20823
// exit ;
20821: GO 21126
// if pos = 1 then
20823: LD_VAR 0 2
20827: PUSH
20828: LD_INT 1
20830: EQUAL
20831: IFFALSE 20864
// result := Replace ( arr , pos [ 1 ] , value ) else
20833: LD_ADDR_VAR 0 4
20837: PUSH
20838: LD_VAR 0 1
20842: PPUSH
20843: LD_VAR 0 2
20847: PUSH
20848: LD_INT 1
20850: ARRAY
20851: PPUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: CALL_OW 1
20861: ST_TO_ADDR
20862: GO 21126
// begin tmp := arr ;
20864: LD_ADDR_VAR 0 6
20868: PUSH
20869: LD_VAR 0 1
20873: ST_TO_ADDR
// s_arr := [ tmp ] ;
20874: LD_ADDR_VAR 0 7
20878: PUSH
20879: LD_VAR 0 6
20883: PUSH
20884: EMPTY
20885: LIST
20886: ST_TO_ADDR
// for i = 1 to pos - 1 do
20887: LD_ADDR_VAR 0 5
20891: PUSH
20892: DOUBLE
20893: LD_INT 1
20895: DEC
20896: ST_TO_ADDR
20897: LD_VAR 0 2
20901: PUSH
20902: LD_INT 1
20904: MINUS
20905: PUSH
20906: FOR_TO
20907: IFFALSE 20952
// begin tmp := tmp [ pos [ i ] ] ;
20909: LD_ADDR_VAR 0 6
20913: PUSH
20914: LD_VAR 0 6
20918: PUSH
20919: LD_VAR 0 2
20923: PUSH
20924: LD_VAR 0 5
20928: ARRAY
20929: ARRAY
20930: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20931: LD_ADDR_VAR 0 7
20935: PUSH
20936: LD_VAR 0 7
20940: PUSH
20941: LD_VAR 0 6
20945: PUSH
20946: EMPTY
20947: LIST
20948: ADD
20949: ST_TO_ADDR
// end ;
20950: GO 20906
20952: POP
20953: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 2
20968: PUSH
20969: LD_VAR 0 2
20973: ARRAY
20974: PPUSH
20975: LD_VAR 0 3
20979: PPUSH
20980: CALL_OW 1
20984: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_VAR 0 7
20994: PPUSH
20995: LD_VAR 0 7
20999: PPUSH
21000: LD_VAR 0 6
21004: PPUSH
21005: CALL_OW 1
21009: ST_TO_ADDR
// for i = s_arr downto 2 do
21010: LD_ADDR_VAR 0 5
21014: PUSH
21015: DOUBLE
21016: LD_VAR 0 7
21020: INC
21021: ST_TO_ADDR
21022: LD_INT 2
21024: PUSH
21025: FOR_DOWNTO
21026: IFFALSE 21110
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21028: LD_ADDR_VAR 0 6
21032: PUSH
21033: LD_VAR 0 7
21037: PUSH
21038: LD_VAR 0 5
21042: PUSH
21043: LD_INT 1
21045: MINUS
21046: ARRAY
21047: PPUSH
21048: LD_VAR 0 2
21052: PUSH
21053: LD_VAR 0 5
21057: PUSH
21058: LD_INT 1
21060: MINUS
21061: ARRAY
21062: PPUSH
21063: LD_VAR 0 7
21067: PUSH
21068: LD_VAR 0 5
21072: ARRAY
21073: PPUSH
21074: CALL_OW 1
21078: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21079: LD_ADDR_VAR 0 7
21083: PUSH
21084: LD_VAR 0 7
21088: PPUSH
21089: LD_VAR 0 5
21093: PUSH
21094: LD_INT 1
21096: MINUS
21097: PPUSH
21098: LD_VAR 0 6
21102: PPUSH
21103: CALL_OW 1
21107: ST_TO_ADDR
// end ;
21108: GO 21025
21110: POP
21111: POP
// result := s_arr [ 1 ] ;
21112: LD_ADDR_VAR 0 4
21116: PUSH
21117: LD_VAR 0 7
21121: PUSH
21122: LD_INT 1
21124: ARRAY
21125: ST_TO_ADDR
// end ; end ;
21126: LD_VAR 0 4
21130: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21131: LD_INT 0
21133: PPUSH
21134: PPUSH
// if not list then
21135: LD_VAR 0 1
21139: NOT
21140: IFFALSE 21144
// exit ;
21142: GO 21235
// i := list [ pos1 ] ;
21144: LD_ADDR_VAR 0 5
21148: PUSH
21149: LD_VAR 0 1
21153: PUSH
21154: LD_VAR 0 2
21158: ARRAY
21159: ST_TO_ADDR
// if not i then
21160: LD_VAR 0 5
21164: NOT
21165: IFFALSE 21169
// exit ;
21167: GO 21235
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21169: LD_ADDR_VAR 0 1
21173: PUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: LD_VAR 0 2
21183: PPUSH
21184: LD_VAR 0 1
21188: PUSH
21189: LD_VAR 0 3
21193: ARRAY
21194: PPUSH
21195: CALL_OW 1
21199: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21200: LD_ADDR_VAR 0 1
21204: PUSH
21205: LD_VAR 0 1
21209: PPUSH
21210: LD_VAR 0 3
21214: PPUSH
21215: LD_VAR 0 5
21219: PPUSH
21220: CALL_OW 1
21224: ST_TO_ADDR
// result := list ;
21225: LD_ADDR_VAR 0 4
21229: PUSH
21230: LD_VAR 0 1
21234: ST_TO_ADDR
// end ;
21235: LD_VAR 0 4
21239: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21240: LD_INT 0
21242: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21243: LD_ADDR_VAR 0 5
21247: PUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 250
21257: PPUSH
21258: LD_VAR 0 1
21262: PPUSH
21263: CALL_OW 251
21267: PPUSH
21268: LD_VAR 0 2
21272: PPUSH
21273: LD_VAR 0 3
21277: PPUSH
21278: LD_VAR 0 4
21282: PPUSH
21283: CALL 21665 0 5
21287: ST_TO_ADDR
// end ;
21288: LD_VAR 0 5
21292: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21293: LD_INT 0
21295: PPUSH
21296: PPUSH
21297: PPUSH
21298: PPUSH
// if not list or not unit then
21299: LD_VAR 0 2
21303: NOT
21304: IFTRUE 21313
21306: PUSH
21307: LD_VAR 0 1
21311: NOT
21312: OR
21313: IFFALSE 21317
// exit ;
21315: GO 21660
// result := [ ] ;
21317: LD_ADDR_VAR 0 5
21321: PUSH
21322: EMPTY
21323: ST_TO_ADDR
// for i in list do
21324: LD_ADDR_VAR 0 6
21328: PUSH
21329: LD_VAR 0 2
21333: PUSH
21334: FOR_IN
21335: IFFALSE 21553
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21337: LD_ADDR_VAR 0 8
21341: PUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: LD_VAR 0 6
21351: PUSH
21352: LD_INT 1
21354: ARRAY
21355: PPUSH
21356: LD_VAR 0 6
21360: PUSH
21361: LD_INT 2
21363: ARRAY
21364: PPUSH
21365: CALL_OW 297
21369: ST_TO_ADDR
// if not Count ( result ) then
21370: LD_VAR 0 5
21374: PPUSH
21375: CALL 17887 0 1
21379: NOT
21380: IFFALSE 21413
// begin result := Join ( result , [ i , tmp ] ) ;
21382: LD_ADDR_VAR 0 5
21386: PUSH
21387: LD_VAR 0 5
21391: PPUSH
21392: LD_VAR 0 6
21396: PUSH
21397: LD_VAR 0 8
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL 53853 0 2
21410: ST_TO_ADDR
// continue ;
21411: GO 21334
// end ; if result [ result ] [ 2 ] <= tmp then
21413: LD_VAR 0 5
21417: PUSH
21418: LD_VAR 0 5
21422: ARRAY
21423: PUSH
21424: LD_INT 2
21426: ARRAY
21427: PUSH
21428: LD_VAR 0 8
21432: LESSEQUAL
21433: IFFALSE 21466
// result := Join ( result , [ i , tmp ] ) else
21435: LD_ADDR_VAR 0 5
21439: PUSH
21440: LD_VAR 0 5
21444: PPUSH
21445: LD_VAR 0 6
21449: PUSH
21450: LD_VAR 0 8
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL 53853 0 2
21463: ST_TO_ADDR
21464: GO 21551
// begin for j := 1 to Count ( result ) do
21466: LD_ADDR_VAR 0 7
21470: PUSH
21471: DOUBLE
21472: LD_INT 1
21474: DEC
21475: ST_TO_ADDR
21476: LD_VAR 0 5
21480: PPUSH
21481: CALL 17887 0 1
21485: PUSH
21486: FOR_TO
21487: IFFALSE 21549
// begin if tmp < result [ j ] [ 2 ] then
21489: LD_VAR 0 8
21493: PUSH
21494: LD_VAR 0 5
21498: PUSH
21499: LD_VAR 0 7
21503: ARRAY
21504: PUSH
21505: LD_INT 2
21507: ARRAY
21508: LESS
21509: IFFALSE 21547
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21511: LD_ADDR_VAR 0 5
21515: PUSH
21516: LD_VAR 0 5
21520: PPUSH
21521: LD_VAR 0 7
21525: PPUSH
21526: LD_VAR 0 6
21530: PUSH
21531: LD_VAR 0 8
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PPUSH
21540: CALL_OW 2
21544: ST_TO_ADDR
// break ;
21545: GO 21549
// end ; end ;
21547: GO 21486
21549: POP
21550: POP
// end ; end ;
21551: GO 21334
21553: POP
21554: POP
// if result and not asc then
21555: LD_VAR 0 5
21559: IFFALSE 21568
21561: PUSH
21562: LD_VAR 0 3
21566: NOT
21567: AND
21568: IFFALSE 21585
// result := ReverseArray ( result ) ;
21570: LD_ADDR_VAR 0 5
21574: PUSH
21575: LD_VAR 0 5
21579: PPUSH
21580: CALL 48943 0 1
21584: ST_TO_ADDR
// tmp := [ ] ;
21585: LD_ADDR_VAR 0 8
21589: PUSH
21590: EMPTY
21591: ST_TO_ADDR
// if mode then
21592: LD_VAR 0 4
21596: IFFALSE 21660
// begin for i := 1 to result do
21598: LD_ADDR_VAR 0 6
21602: PUSH
21603: DOUBLE
21604: LD_INT 1
21606: DEC
21607: ST_TO_ADDR
21608: LD_VAR 0 5
21612: PUSH
21613: FOR_TO
21614: IFFALSE 21648
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21616: LD_ADDR_VAR 0 8
21620: PUSH
21621: LD_VAR 0 8
21625: PPUSH
21626: LD_VAR 0 5
21630: PUSH
21631: LD_VAR 0 6
21635: ARRAY
21636: PUSH
21637: LD_INT 1
21639: ARRAY
21640: PPUSH
21641: CALL 53853 0 2
21645: ST_TO_ADDR
21646: GO 21613
21648: POP
21649: POP
// result := tmp ;
21650: LD_ADDR_VAR 0 5
21654: PUSH
21655: LD_VAR 0 8
21659: ST_TO_ADDR
// end ; end ;
21660: LD_VAR 0 5
21664: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21665: LD_INT 0
21667: PPUSH
21668: PPUSH
21669: PPUSH
21670: PPUSH
// if not list then
21671: LD_VAR 0 3
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 22070
// result := [ ] ;
21680: LD_ADDR_VAR 0 6
21684: PUSH
21685: EMPTY
21686: ST_TO_ADDR
// for i in list do
21687: LD_ADDR_VAR 0 7
21691: PUSH
21692: LD_VAR 0 3
21696: PUSH
21697: FOR_IN
21698: IFFALSE 21900
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21700: LD_ADDR_VAR 0 9
21704: PUSH
21705: LD_VAR 0 7
21709: PPUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 297
21724: ST_TO_ADDR
// if not result then
21725: LD_VAR 0 6
21729: NOT
21730: IFFALSE 21756
// result := [ [ i , tmp ] ] else
21732: LD_ADDR_VAR 0 6
21736: PUSH
21737: LD_VAR 0 7
21741: PUSH
21742: LD_VAR 0 9
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: EMPTY
21752: LIST
21753: ST_TO_ADDR
21754: GO 21898
// begin if result [ result ] [ 2 ] <= tmp then
21756: LD_VAR 0 6
21760: PUSH
21761: LD_VAR 0 6
21765: ARRAY
21766: PUSH
21767: LD_INT 2
21769: ARRAY
21770: PUSH
21771: LD_VAR 0 9
21775: LESSEQUAL
21776: IFFALSE 21818
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21778: LD_ADDR_VAR 0 6
21782: PUSH
21783: LD_VAR 0 6
21787: PPUSH
21788: LD_VAR 0 6
21792: PUSH
21793: LD_INT 1
21795: PLUS
21796: PPUSH
21797: LD_VAR 0 7
21801: PUSH
21802: LD_VAR 0 9
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PPUSH
21811: CALL_OW 2
21815: ST_TO_ADDR
21816: GO 21898
// for j := 1 to result do
21818: LD_ADDR_VAR 0 8
21822: PUSH
21823: DOUBLE
21824: LD_INT 1
21826: DEC
21827: ST_TO_ADDR
21828: LD_VAR 0 6
21832: PUSH
21833: FOR_TO
21834: IFFALSE 21896
// begin if tmp < result [ j ] [ 2 ] then
21836: LD_VAR 0 9
21840: PUSH
21841: LD_VAR 0 6
21845: PUSH
21846: LD_VAR 0 8
21850: ARRAY
21851: PUSH
21852: LD_INT 2
21854: ARRAY
21855: LESS
21856: IFFALSE 21894
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21858: LD_ADDR_VAR 0 6
21862: PUSH
21863: LD_VAR 0 6
21867: PPUSH
21868: LD_VAR 0 8
21872: PPUSH
21873: LD_VAR 0 7
21877: PUSH
21878: LD_VAR 0 9
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PPUSH
21887: CALL_OW 2
21891: ST_TO_ADDR
// break ;
21892: GO 21896
// end ; end ;
21894: GO 21833
21896: POP
21897: POP
// end ; end ;
21898: GO 21697
21900: POP
21901: POP
// if result and not asc then
21902: LD_VAR 0 6
21906: IFFALSE 21915
21908: PUSH
21909: LD_VAR 0 4
21913: NOT
21914: AND
21915: IFFALSE 21990
// begin tmp := result ;
21917: LD_ADDR_VAR 0 9
21921: PUSH
21922: LD_VAR 0 6
21926: ST_TO_ADDR
// for i = tmp downto 1 do
21927: LD_ADDR_VAR 0 7
21931: PUSH
21932: DOUBLE
21933: LD_VAR 0 9
21937: INC
21938: ST_TO_ADDR
21939: LD_INT 1
21941: PUSH
21942: FOR_DOWNTO
21943: IFFALSE 21988
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21945: LD_ADDR_VAR 0 6
21949: PUSH
21950: LD_VAR 0 6
21954: PPUSH
21955: LD_VAR 0 9
21959: PUSH
21960: LD_VAR 0 7
21964: MINUS
21965: PUSH
21966: LD_INT 1
21968: PLUS
21969: PPUSH
21970: LD_VAR 0 9
21974: PUSH
21975: LD_VAR 0 7
21979: ARRAY
21980: PPUSH
21981: CALL_OW 1
21985: ST_TO_ADDR
21986: GO 21942
21988: POP
21989: POP
// end ; tmp := [ ] ;
21990: LD_ADDR_VAR 0 9
21994: PUSH
21995: EMPTY
21996: ST_TO_ADDR
// if mode then
21997: LD_VAR 0 5
22001: IFFALSE 22070
// begin for i = 1 to result do
22003: LD_ADDR_VAR 0 7
22007: PUSH
22008: DOUBLE
22009: LD_INT 1
22011: DEC
22012: ST_TO_ADDR
22013: LD_VAR 0 6
22017: PUSH
22018: FOR_TO
22019: IFFALSE 22058
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22021: LD_ADDR_VAR 0 9
22025: PUSH
22026: LD_VAR 0 9
22030: PPUSH
22031: LD_VAR 0 7
22035: PPUSH
22036: LD_VAR 0 6
22040: PUSH
22041: LD_VAR 0 7
22045: ARRAY
22046: PUSH
22047: LD_INT 1
22049: ARRAY
22050: PPUSH
22051: CALL_OW 1
22055: ST_TO_ADDR
22056: GO 22018
22058: POP
22059: POP
// result := tmp ;
22060: LD_ADDR_VAR 0 6
22064: PUSH
22065: LD_VAR 0 9
22069: ST_TO_ADDR
// end ; end ;
22070: LD_VAR 0 6
22074: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22075: LD_INT 0
22077: PPUSH
22078: PPUSH
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22083: LD_ADDR_VAR 0 5
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: EMPTY
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: ST_TO_ADDR
// if not x or not y then
22105: LD_VAR 0 2
22109: NOT
22110: IFTRUE 22119
22112: PUSH
22113: LD_VAR 0 3
22117: NOT
22118: OR
22119: IFFALSE 22123
// exit ;
22121: GO 23779
// if not range then
22123: LD_VAR 0 4
22127: NOT
22128: IFFALSE 22138
// range := 10 ;
22130: LD_ADDR_VAR 0 4
22134: PUSH
22135: LD_INT 10
22137: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22138: LD_ADDR_VAR 0 8
22142: PUSH
22143: LD_INT 81
22145: PUSH
22146: LD_VAR 0 1
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 92
22157: PUSH
22158: LD_VAR 0 2
22162: PUSH
22163: LD_VAR 0 3
22167: PUSH
22168: LD_VAR 0 4
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: LD_INT 21
22184: PUSH
22185: LD_INT 3
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: PPUSH
22201: CALL_OW 69
22205: ST_TO_ADDR
// if not tmp then
22206: LD_VAR 0 8
22210: NOT
22211: IFFALSE 22215
// exit ;
22213: GO 23779
// for i in tmp do
22215: LD_ADDR_VAR 0 6
22219: PUSH
22220: LD_VAR 0 8
22224: PUSH
22225: FOR_IN
22226: IFFALSE 23754
// begin points := [ 0 , 0 , 0 ] ;
22228: LD_ADDR_VAR 0 9
22232: PUSH
22233: LD_INT 0
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: LD_INT 0
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: LIST
22246: ST_TO_ADDR
// bpoints := 1 ;
22247: LD_ADDR_VAR 0 10
22251: PUSH
22252: LD_INT 1
22254: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22255: LD_VAR 0 6
22259: PPUSH
22260: CALL_OW 247
22264: PUSH
22265: LD_INT 1
22267: DOUBLE
22268: EQUAL
22269: IFTRUE 22273
22271: GO 22855
22273: POP
// begin if GetClass ( i ) = 1 then
22274: LD_VAR 0 6
22278: PPUSH
22279: CALL_OW 257
22283: PUSH
22284: LD_INT 1
22286: EQUAL
22287: IFFALSE 22308
// points := [ 10 , 5 , 3 ] ;
22289: LD_ADDR_VAR 0 9
22293: PUSH
22294: LD_INT 10
22296: PUSH
22297: LD_INT 5
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: LIST
22307: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22308: LD_VAR 0 6
22312: PPUSH
22313: CALL_OW 257
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: LD_INT 3
22323: PUSH
22324: LD_INT 4
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: IN
22332: IFFALSE 22353
// points := [ 3 , 2 , 1 ] ;
22334: LD_ADDR_VAR 0 9
22338: PUSH
22339: LD_INT 3
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22353: LD_VAR 0 6
22357: PPUSH
22358: CALL_OW 257
22362: PUSH
22363: LD_INT 5
22365: EQUAL
22366: IFFALSE 22387
// points := [ 130 , 5 , 2 ] ;
22368: LD_ADDR_VAR 0 9
22372: PUSH
22373: LD_INT 130
22375: PUSH
22376: LD_INT 5
22378: PUSH
22379: LD_INT 2
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22387: LD_VAR 0 6
22391: PPUSH
22392: CALL_OW 257
22396: PUSH
22397: LD_INT 8
22399: EQUAL
22400: IFFALSE 22421
// points := [ 35 , 35 , 30 ] ;
22402: LD_ADDR_VAR 0 9
22406: PUSH
22407: LD_INT 35
22409: PUSH
22410: LD_INT 35
22412: PUSH
22413: LD_INT 30
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: LIST
22420: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22421: LD_VAR 0 6
22425: PPUSH
22426: CALL_OW 257
22430: PUSH
22431: LD_INT 9
22433: EQUAL
22434: IFFALSE 22455
// points := [ 20 , 55 , 40 ] ;
22436: LD_ADDR_VAR 0 9
22440: PUSH
22441: LD_INT 20
22443: PUSH
22444: LD_INT 55
22446: PUSH
22447: LD_INT 40
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22455: LD_VAR 0 6
22459: PPUSH
22460: CALL_OW 257
22464: PUSH
22465: LD_INT 12
22467: PUSH
22468: LD_INT 16
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: IN
22475: IFFALSE 22496
// points := [ 5 , 3 , 2 ] ;
22477: LD_ADDR_VAR 0 9
22481: PUSH
22482: LD_INT 5
22484: PUSH
22485: LD_INT 3
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22496: LD_VAR 0 6
22500: PPUSH
22501: CALL_OW 257
22505: PUSH
22506: LD_INT 17
22508: EQUAL
22509: IFFALSE 22530
// points := [ 100 , 50 , 75 ] ;
22511: LD_ADDR_VAR 0 9
22515: PUSH
22516: LD_INT 100
22518: PUSH
22519: LD_INT 50
22521: PUSH
22522: LD_INT 75
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22530: LD_VAR 0 6
22534: PPUSH
22535: CALL_OW 257
22539: PUSH
22540: LD_INT 15
22542: EQUAL
22543: IFFALSE 22564
// points := [ 10 , 5 , 3 ] ;
22545: LD_ADDR_VAR 0 9
22549: PUSH
22550: LD_INT 10
22552: PUSH
22553: LD_INT 5
22555: PUSH
22556: LD_INT 3
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22564: LD_VAR 0 6
22568: PPUSH
22569: CALL_OW 257
22573: PUSH
22574: LD_INT 14
22576: EQUAL
22577: IFFALSE 22598
// points := [ 10 , 0 , 0 ] ;
22579: LD_ADDR_VAR 0 9
22583: PUSH
22584: LD_INT 10
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: LD_INT 0
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: LIST
22597: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22598: LD_VAR 0 6
22602: PPUSH
22603: CALL_OW 257
22607: PUSH
22608: LD_INT 11
22610: EQUAL
22611: IFFALSE 22632
// points := [ 30 , 10 , 5 ] ;
22613: LD_ADDR_VAR 0 9
22617: PUSH
22618: LD_INT 30
22620: PUSH
22621: LD_INT 10
22623: PUSH
22624: LD_INT 5
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: LIST
22631: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_INT 5
22639: PPUSH
22640: CALL_OW 321
22644: PUSH
22645: LD_INT 2
22647: EQUAL
22648: IFFALSE 22665
// bpoints := bpoints * 1.8 ;
22650: LD_ADDR_VAR 0 10
22654: PUSH
22655: LD_VAR 0 10
22659: PUSH
22660: LD_REAL  1.80000000000000E+0000
22663: MUL
22664: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22665: LD_VAR 0 6
22669: PPUSH
22670: CALL_OW 257
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: LD_INT 4
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: IN
22693: IFFALSE 22713
22695: PUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: LD_INT 51
22703: PPUSH
22704: CALL_OW 321
22708: PUSH
22709: LD_INT 2
22711: EQUAL
22712: AND
22713: IFFALSE 22730
// bpoints := bpoints * 1.2 ;
22715: LD_ADDR_VAR 0 10
22719: PUSH
22720: LD_VAR 0 10
22724: PUSH
22725: LD_REAL  1.20000000000000E+0000
22728: MUL
22729: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22730: LD_VAR 0 6
22734: PPUSH
22735: CALL_OW 257
22739: PUSH
22740: LD_INT 5
22742: PUSH
22743: LD_INT 7
22745: PUSH
22746: LD_INT 9
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: IN
22754: IFFALSE 22774
22756: PUSH
22757: LD_VAR 0 1
22761: PPUSH
22762: LD_INT 52
22764: PPUSH
22765: CALL_OW 321
22769: PUSH
22770: LD_INT 2
22772: EQUAL
22773: AND
22774: IFFALSE 22791
// bpoints := bpoints * 1.5 ;
22776: LD_ADDR_VAR 0 10
22780: PUSH
22781: LD_VAR 0 10
22785: PUSH
22786: LD_REAL  1.50000000000000E+0000
22789: MUL
22790: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22791: LD_VAR 0 1
22795: PPUSH
22796: LD_INT 66
22798: PPUSH
22799: CALL_OW 321
22803: PUSH
22804: LD_INT 2
22806: EQUAL
22807: IFFALSE 22824
// bpoints := bpoints * 1.1 ;
22809: LD_ADDR_VAR 0 10
22813: PUSH
22814: LD_VAR 0 10
22818: PUSH
22819: LD_REAL  1.10000000000000E+0000
22822: MUL
22823: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22824: LD_ADDR_VAR 0 10
22828: PUSH
22829: LD_VAR 0 10
22833: PUSH
22834: LD_VAR 0 6
22838: PPUSH
22839: LD_INT 1
22841: PPUSH
22842: CALL_OW 259
22846: PUSH
22847: LD_REAL  1.15000000000000E+0000
22850: MUL
22851: MUL
22852: ST_TO_ADDR
// end ; unit_vehicle :
22853: GO 23683
22855: LD_INT 2
22857: DOUBLE
22858: EQUAL
22859: IFTRUE 22863
22861: GO 23671
22863: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22864: LD_VAR 0 6
22868: PPUSH
22869: CALL_OW 264
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 42
22879: PUSH
22880: LD_INT 24
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: IN
22888: IFFALSE 22909
// points := [ 25 , 5 , 3 ] ;
22890: LD_ADDR_VAR 0 9
22894: PUSH
22895: LD_INT 25
22897: PUSH
22898: LD_INT 5
22900: PUSH
22901: LD_INT 3
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22909: LD_VAR 0 6
22913: PPUSH
22914: CALL_OW 264
22918: PUSH
22919: LD_INT 4
22921: PUSH
22922: LD_INT 43
22924: PUSH
22925: LD_INT 25
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: IN
22933: IFFALSE 22954
// points := [ 40 , 15 , 5 ] ;
22935: LD_ADDR_VAR 0 9
22939: PUSH
22940: LD_INT 40
22942: PUSH
22943: LD_INT 15
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22954: LD_VAR 0 6
22958: PPUSH
22959: CALL_OW 264
22963: PUSH
22964: LD_INT 3
22966: PUSH
22967: LD_INT 23
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: IN
22974: IFFALSE 22995
// points := [ 7 , 25 , 8 ] ;
22976: LD_ADDR_VAR 0 9
22980: PUSH
22981: LD_INT 7
22983: PUSH
22984: LD_INT 25
22986: PUSH
22987: LD_INT 8
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22995: LD_VAR 0 6
22999: PPUSH
23000: CALL_OW 264
23004: PUSH
23005: LD_INT 5
23007: PUSH
23008: LD_INT 27
23010: PUSH
23011: LD_INT 44
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: LIST
23018: IN
23019: IFFALSE 23040
// points := [ 14 , 50 , 16 ] ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_INT 14
23028: PUSH
23029: LD_INT 50
23031: PUSH
23032: LD_INT 16
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23040: LD_VAR 0 6
23044: PPUSH
23045: CALL_OW 264
23049: PUSH
23050: LD_INT 6
23052: PUSH
23053: LD_INT 46
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: IN
23060: IFFALSE 23081
// points := [ 32 , 120 , 70 ] ;
23062: LD_ADDR_VAR 0 9
23066: PUSH
23067: LD_INT 32
23069: PUSH
23070: LD_INT 120
23072: PUSH
23073: LD_INT 70
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23081: LD_VAR 0 6
23085: PPUSH
23086: CALL_OW 264
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 28
23096: PUSH
23097: LD_INT 45
23099: PUSH
23100: LD_INT 92
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: IN
23109: IFFALSE 23130
// points := [ 35 , 20 , 45 ] ;
23111: LD_ADDR_VAR 0 9
23115: PUSH
23116: LD_INT 35
23118: PUSH
23119: LD_INT 20
23121: PUSH
23122: LD_INT 45
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23130: LD_VAR 0 6
23134: PPUSH
23135: CALL_OW 264
23139: PUSH
23140: LD_INT 47
23142: PUSH
23143: EMPTY
23144: LIST
23145: IN
23146: IFFALSE 23167
// points := [ 67 , 45 , 75 ] ;
23148: LD_ADDR_VAR 0 9
23152: PUSH
23153: LD_INT 67
23155: PUSH
23156: LD_INT 45
23158: PUSH
23159: LD_INT 75
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: LIST
23166: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23167: LD_VAR 0 6
23171: PPUSH
23172: CALL_OW 264
23176: PUSH
23177: LD_INT 26
23179: PUSH
23180: EMPTY
23181: LIST
23182: IN
23183: IFFALSE 23204
// points := [ 120 , 30 , 80 ] ;
23185: LD_ADDR_VAR 0 9
23189: PUSH
23190: LD_INT 120
23192: PUSH
23193: LD_INT 30
23195: PUSH
23196: LD_INT 80
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23204: LD_VAR 0 6
23208: PPUSH
23209: CALL_OW 264
23213: PUSH
23214: LD_INT 22
23216: PUSH
23217: EMPTY
23218: LIST
23219: IN
23220: IFFALSE 23241
// points := [ 40 , 1 , 1 ] ;
23222: LD_ADDR_VAR 0 9
23226: PUSH
23227: LD_INT 40
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: LD_INT 1
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23241: LD_VAR 0 6
23245: PPUSH
23246: CALL_OW 264
23250: PUSH
23251: LD_INT 29
23253: PUSH
23254: EMPTY
23255: LIST
23256: IN
23257: IFFALSE 23278
// points := [ 70 , 200 , 400 ] ;
23259: LD_ADDR_VAR 0 9
23263: PUSH
23264: LD_INT 70
23266: PUSH
23267: LD_INT 200
23269: PUSH
23270: LD_INT 400
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: LIST
23277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23278: LD_VAR 0 6
23282: PPUSH
23283: CALL_OW 264
23287: PUSH
23288: LD_INT 14
23290: PUSH
23291: LD_INT 53
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: IN
23298: IFFALSE 23319
// points := [ 40 , 10 , 20 ] ;
23300: LD_ADDR_VAR 0 9
23304: PUSH
23305: LD_INT 40
23307: PUSH
23308: LD_INT 10
23310: PUSH
23311: LD_INT 20
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: LIST
23318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23319: LD_VAR 0 6
23323: PPUSH
23324: CALL_OW 264
23328: PUSH
23329: LD_INT 9
23331: PUSH
23332: EMPTY
23333: LIST
23334: IN
23335: IFFALSE 23356
// points := [ 5 , 70 , 20 ] ;
23337: LD_ADDR_VAR 0 9
23341: PUSH
23342: LD_INT 5
23344: PUSH
23345: LD_INT 70
23347: PUSH
23348: LD_INT 20
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23356: LD_VAR 0 6
23360: PPUSH
23361: CALL_OW 264
23365: PUSH
23366: LD_INT 10
23368: PUSH
23369: EMPTY
23370: LIST
23371: IN
23372: IFFALSE 23393
// points := [ 35 , 110 , 70 ] ;
23374: LD_ADDR_VAR 0 9
23378: PUSH
23379: LD_INT 35
23381: PUSH
23382: LD_INT 110
23384: PUSH
23385: LD_INT 70
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23393: LD_VAR 0 6
23397: PPUSH
23398: CALL_OW 265
23402: PUSH
23403: LD_INT 25
23405: EQUAL
23406: IFFALSE 23427
// points := [ 80 , 65 , 100 ] ;
23408: LD_ADDR_VAR 0 9
23412: PUSH
23413: LD_INT 80
23415: PUSH
23416: LD_INT 65
23418: PUSH
23419: LD_INT 100
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23427: LD_VAR 0 6
23431: PPUSH
23432: CALL_OW 263
23436: PUSH
23437: LD_INT 1
23439: EQUAL
23440: IFFALSE 23475
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23442: LD_ADDR_VAR 0 10
23446: PUSH
23447: LD_VAR 0 10
23451: PUSH
23452: LD_VAR 0 6
23456: PPUSH
23457: CALL_OW 311
23461: PPUSH
23462: LD_INT 3
23464: PPUSH
23465: CALL_OW 259
23469: PUSH
23470: LD_INT 4
23472: MUL
23473: MUL
23474: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23475: LD_VAR 0 6
23479: PPUSH
23480: CALL_OW 263
23484: PUSH
23485: LD_INT 2
23487: EQUAL
23488: IFFALSE 23539
// begin j := IsControledBy ( i ) ;
23490: LD_ADDR_VAR 0 7
23494: PUSH
23495: LD_VAR 0 6
23499: PPUSH
23500: CALL_OW 312
23504: ST_TO_ADDR
// if j then
23505: LD_VAR 0 7
23509: IFFALSE 23539
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23511: LD_ADDR_VAR 0 10
23515: PUSH
23516: LD_VAR 0 10
23520: PUSH
23521: LD_VAR 0 7
23525: PPUSH
23526: LD_INT 3
23528: PPUSH
23529: CALL_OW 259
23533: PUSH
23534: LD_INT 3
23536: MUL
23537: MUL
23538: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23539: LD_VAR 0 6
23543: PPUSH
23544: CALL_OW 264
23548: PUSH
23549: LD_INT 5
23551: PUSH
23552: LD_INT 6
23554: PUSH
23555: LD_INT 46
23557: PUSH
23558: LD_INT 44
23560: PUSH
23561: LD_INT 47
23563: PUSH
23564: LD_INT 45
23566: PUSH
23567: LD_INT 28
23569: PUSH
23570: LD_INT 7
23572: PUSH
23573: LD_INT 27
23575: PUSH
23576: LD_INT 29
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: IN
23591: IFFALSE 23611
23593: PUSH
23594: LD_VAR 0 1
23598: PPUSH
23599: LD_INT 52
23601: PPUSH
23602: CALL_OW 321
23606: PUSH
23607: LD_INT 2
23609: EQUAL
23610: AND
23611: IFFALSE 23628
// bpoints := bpoints * 1.2 ;
23613: LD_ADDR_VAR 0 10
23617: PUSH
23618: LD_VAR 0 10
23622: PUSH
23623: LD_REAL  1.20000000000000E+0000
23626: MUL
23627: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23628: LD_VAR 0 6
23632: PPUSH
23633: CALL_OW 264
23637: PUSH
23638: LD_INT 6
23640: PUSH
23641: LD_INT 46
23643: PUSH
23644: LD_INT 47
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: LIST
23651: IN
23652: IFFALSE 23669
// bpoints := bpoints * 1.2 ;
23654: LD_ADDR_VAR 0 10
23658: PUSH
23659: LD_VAR 0 10
23663: PUSH
23664: LD_REAL  1.20000000000000E+0000
23667: MUL
23668: ST_TO_ADDR
// end ; unit_building :
23669: GO 23683
23671: LD_INT 3
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23682
23679: POP
// ; end ;
23680: GO 23683
23682: POP
// for j = 1 to 3 do
23683: LD_ADDR_VAR 0 7
23687: PUSH
23688: DOUBLE
23689: LD_INT 1
23691: DEC
23692: ST_TO_ADDR
23693: LD_INT 3
23695: PUSH
23696: FOR_TO
23697: IFFALSE 23750
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23699: LD_ADDR_VAR 0 5
23703: PUSH
23704: LD_VAR 0 5
23708: PPUSH
23709: LD_VAR 0 7
23713: PPUSH
23714: LD_VAR 0 5
23718: PUSH
23719: LD_VAR 0 7
23723: ARRAY
23724: PUSH
23725: LD_VAR 0 9
23729: PUSH
23730: LD_VAR 0 7
23734: ARRAY
23735: PUSH
23736: LD_VAR 0 10
23740: MUL
23741: PLUS
23742: PPUSH
23743: CALL_OW 1
23747: ST_TO_ADDR
23748: GO 23696
23750: POP
23751: POP
// end ;
23752: GO 22225
23754: POP
23755: POP
// result := Replace ( result , 4 , tmp ) ;
23756: LD_ADDR_VAR 0 5
23760: PUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: LD_INT 4
23768: PPUSH
23769: LD_VAR 0 8
23773: PPUSH
23774: CALL_OW 1
23778: ST_TO_ADDR
// end ;
23779: LD_VAR 0 5
23783: RET
// export function DangerAtRange ( unit , range ) ; begin
23784: LD_INT 0
23786: PPUSH
// if not unit then
23787: LD_VAR 0 1
23791: NOT
23792: IFFALSE 23796
// exit ;
23794: GO 23841
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23796: LD_ADDR_VAR 0 3
23800: PUSH
23801: LD_VAR 0 1
23805: PPUSH
23806: CALL_OW 255
23810: PPUSH
23811: LD_VAR 0 1
23815: PPUSH
23816: CALL_OW 250
23820: PPUSH
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL_OW 251
23830: PPUSH
23831: LD_VAR 0 2
23835: PPUSH
23836: CALL 22075 0 4
23840: ST_TO_ADDR
// end ;
23841: LD_VAR 0 3
23845: RET
// export function DangerInArea ( side , area ) ; begin
23846: LD_INT 0
23848: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_VAR 0 2
23858: PPUSH
23859: LD_INT 81
23861: PUSH
23862: LD_VAR 0 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PPUSH
23871: CALL_OW 70
23875: ST_TO_ADDR
// end ;
23876: LD_VAR 0 3
23880: RET
// export function IsExtension ( b ) ; begin
23881: LD_INT 0
23883: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23884: LD_ADDR_VAR 0 2
23888: PUSH
23889: LD_VAR 0 1
23893: PUSH
23894: LD_INT 23
23896: PUSH
23897: LD_INT 20
23899: PUSH
23900: LD_INT 22
23902: PUSH
23903: LD_INT 17
23905: PUSH
23906: LD_INT 24
23908: PUSH
23909: LD_INT 21
23911: PUSH
23912: LD_INT 19
23914: PUSH
23915: LD_INT 16
23917: PUSH
23918: LD_INT 25
23920: PUSH
23921: LD_INT 18
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: IN
23936: ST_TO_ADDR
// end ;
23937: LD_VAR 0 2
23941: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23942: LD_INT 0
23944: PPUSH
23945: PPUSH
23946: PPUSH
// result := [ ] ;
23947: LD_ADDR_VAR 0 4
23951: PUSH
23952: EMPTY
23953: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23954: LD_ADDR_VAR 0 5
23958: PUSH
23959: LD_VAR 0 2
23963: PPUSH
23964: LD_INT 21
23966: PUSH
23967: LD_INT 3
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PPUSH
23974: CALL_OW 70
23978: ST_TO_ADDR
// if not tmp then
23979: LD_VAR 0 5
23983: NOT
23984: IFFALSE 23988
// exit ;
23986: GO 24052
// if checkLink then
23988: LD_VAR 0 3
23992: IFFALSE 24042
// begin for i in tmp do
23994: LD_ADDR_VAR 0 6
23998: PUSH
23999: LD_VAR 0 5
24003: PUSH
24004: FOR_IN
24005: IFFALSE 24040
// if GetBase ( i ) <> base then
24007: LD_VAR 0 6
24011: PPUSH
24012: CALL_OW 274
24016: PUSH
24017: LD_VAR 0 1
24021: NONEQUAL
24022: IFFALSE 24038
// ComLinkToBase ( base , i ) ;
24024: LD_VAR 0 1
24028: PPUSH
24029: LD_VAR 0 6
24033: PPUSH
24034: CALL_OW 169
24038: GO 24004
24040: POP
24041: POP
// end ; result := tmp ;
24042: LD_ADDR_VAR 0 4
24046: PUSH
24047: LD_VAR 0 5
24051: ST_TO_ADDR
// end ;
24052: LD_VAR 0 4
24056: RET
// export function ComComplete ( units , b ) ; var i ; begin
24057: LD_INT 0
24059: PPUSH
24060: PPUSH
// if not units then
24061: LD_VAR 0 1
24065: NOT
24066: IFFALSE 24070
// exit ;
24068: GO 24160
// for i in units do
24070: LD_ADDR_VAR 0 4
24074: PUSH
24075: LD_VAR 0 1
24079: PUSH
24080: FOR_IN
24081: IFFALSE 24158
// if BuildingStatus ( b ) = bs_build then
24083: LD_VAR 0 2
24087: PPUSH
24088: CALL_OW 461
24092: PUSH
24093: LD_INT 1
24095: EQUAL
24096: IFFALSE 24156
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24098: LD_VAR 0 4
24102: PPUSH
24103: LD_STRING h
24105: PUSH
24106: LD_VAR 0 2
24110: PPUSH
24111: CALL_OW 250
24115: PUSH
24116: LD_VAR 0 2
24120: PPUSH
24121: CALL_OW 251
24125: PUSH
24126: LD_VAR 0 2
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: PPUSH
24152: CALL_OW 446
24156: GO 24080
24158: POP
24159: POP
// end ;
24160: LD_VAR 0 3
24164: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24173: LD_VAR 0 1
24177: NOT
24178: IFTRUE 24195
24180: PUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 263
24190: PUSH
24191: LD_INT 2
24193: NONEQUAL
24194: OR
24195: IFFALSE 24199
// exit ;
24197: GO 24515
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24199: LD_ADDR_VAR 0 6
24203: PUSH
24204: LD_INT 22
24206: PUSH
24207: LD_VAR 0 1
24211: PPUSH
24212: CALL_OW 255
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 30
24226: PUSH
24227: LD_INT 36
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 34
24236: PUSH
24237: LD_INT 31
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PPUSH
24253: CALL_OW 69
24257: ST_TO_ADDR
// if not tmp then
24258: LD_VAR 0 6
24262: NOT
24263: IFFALSE 24267
// exit ;
24265: GO 24515
// result := [ ] ;
24267: LD_ADDR_VAR 0 2
24271: PUSH
24272: EMPTY
24273: ST_TO_ADDR
// for i in tmp do
24274: LD_ADDR_VAR 0 3
24278: PUSH
24279: LD_VAR 0 6
24283: PUSH
24284: FOR_IN
24285: IFFALSE 24356
// begin t := UnitsInside ( i ) ;
24287: LD_ADDR_VAR 0 4
24291: PUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: CALL_OW 313
24301: ST_TO_ADDR
// if t then
24302: LD_VAR 0 4
24306: IFFALSE 24354
// for j in t do
24308: LD_ADDR_VAR 0 7
24312: PUSH
24313: LD_VAR 0 4
24317: PUSH
24318: FOR_IN
24319: IFFALSE 24352
// result := Replace ( result , result + 1 , j ) ;
24321: LD_ADDR_VAR 0 2
24325: PUSH
24326: LD_VAR 0 2
24330: PPUSH
24331: LD_VAR 0 2
24335: PUSH
24336: LD_INT 1
24338: PLUS
24339: PPUSH
24340: LD_VAR 0 7
24344: PPUSH
24345: CALL_OW 1
24349: ST_TO_ADDR
24350: GO 24318
24352: POP
24353: POP
// end ;
24354: GO 24284
24356: POP
24357: POP
// if not result then
24358: LD_VAR 0 2
24362: NOT
24363: IFFALSE 24367
// exit ;
24365: GO 24515
// mech := result [ 1 ] ;
24367: LD_ADDR_VAR 0 5
24371: PUSH
24372: LD_VAR 0 2
24376: PUSH
24377: LD_INT 1
24379: ARRAY
24380: ST_TO_ADDR
// if result > 1 then
24381: LD_VAR 0 2
24385: PUSH
24386: LD_INT 1
24388: GREATER
24389: IFFALSE 24501
// begin for i = 2 to result do
24391: LD_ADDR_VAR 0 3
24395: PUSH
24396: DOUBLE
24397: LD_INT 2
24399: DEC
24400: ST_TO_ADDR
24401: LD_VAR 0 2
24405: PUSH
24406: FOR_TO
24407: IFFALSE 24499
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24409: LD_ADDR_VAR 0 4
24413: PUSH
24414: LD_VAR 0 2
24418: PUSH
24419: LD_VAR 0 3
24423: ARRAY
24424: PPUSH
24425: LD_INT 3
24427: PPUSH
24428: CALL_OW 259
24432: PUSH
24433: LD_VAR 0 2
24437: PUSH
24438: LD_VAR 0 3
24442: ARRAY
24443: PPUSH
24444: CALL_OW 432
24448: MINUS
24449: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24450: LD_VAR 0 4
24454: PUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: LD_INT 3
24462: PPUSH
24463: CALL_OW 259
24467: PUSH
24468: LD_VAR 0 5
24472: PPUSH
24473: CALL_OW 432
24477: MINUS
24478: GREATEREQUAL
24479: IFFALSE 24497
// mech := result [ i ] ;
24481: LD_ADDR_VAR 0 5
24485: PUSH
24486: LD_VAR 0 2
24490: PUSH
24491: LD_VAR 0 3
24495: ARRAY
24496: ST_TO_ADDR
// end ;
24497: GO 24406
24499: POP
24500: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24501: LD_VAR 0 1
24505: PPUSH
24506: LD_VAR 0 5
24510: PPUSH
24511: CALL_OW 135
// end ;
24515: LD_VAR 0 2
24519: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24520: LD_INT 0
24522: PPUSH
24523: PPUSH
24524: PPUSH
24525: PPUSH
24526: PPUSH
24527: PPUSH
24528: PPUSH
24529: PPUSH
24530: PPUSH
24531: PPUSH
24532: PPUSH
24533: PPUSH
24534: PPUSH
// result := [ ] ;
24535: LD_ADDR_VAR 0 7
24539: PUSH
24540: EMPTY
24541: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24542: LD_VAR 0 1
24546: PPUSH
24547: CALL_OW 266
24551: PUSH
24552: LD_INT 0
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: IN
24562: NOT
24563: IFFALSE 24567
// exit ;
24565: GO 26207
// if name then
24567: LD_VAR 0 3
24571: IFFALSE 24587
// SetBName ( base_dep , name ) ;
24573: LD_VAR 0 1
24577: PPUSH
24578: LD_VAR 0 3
24582: PPUSH
24583: CALL_OW 500
// base := GetBase ( base_dep ) ;
24587: LD_ADDR_VAR 0 15
24591: PUSH
24592: LD_VAR 0 1
24596: PPUSH
24597: CALL_OW 274
24601: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24602: LD_ADDR_VAR 0 16
24606: PUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: CALL_OW 255
24616: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24617: LD_ADDR_VAR 0 17
24621: PUSH
24622: LD_VAR 0 1
24626: PPUSH
24627: CALL_OW 248
24631: ST_TO_ADDR
// if sources then
24632: LD_VAR 0 5
24636: IFFALSE 24683
// for i = 1 to 3 do
24638: LD_ADDR_VAR 0 8
24642: PUSH
24643: DOUBLE
24644: LD_INT 1
24646: DEC
24647: ST_TO_ADDR
24648: LD_INT 3
24650: PUSH
24651: FOR_TO
24652: IFFALSE 24681
// AddResourceType ( base , i , sources [ i ] ) ;
24654: LD_VAR 0 15
24658: PPUSH
24659: LD_VAR 0 8
24663: PPUSH
24664: LD_VAR 0 5
24668: PUSH
24669: LD_VAR 0 8
24673: ARRAY
24674: PPUSH
24675: CALL_OW 276
24679: GO 24651
24681: POP
24682: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24683: LD_ADDR_VAR 0 18
24687: PUSH
24688: LD_VAR 0 15
24692: PPUSH
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_INT 1
24700: PPUSH
24701: CALL 23942 0 3
24705: ST_TO_ADDR
// InitHc ;
24706: CALL_OW 19
// InitUc ;
24710: CALL_OW 18
// uc_side := side ;
24714: LD_ADDR_OWVAR 20
24718: PUSH
24719: LD_VAR 0 16
24723: ST_TO_ADDR
// uc_nation := nation ;
24724: LD_ADDR_OWVAR 21
24728: PUSH
24729: LD_VAR 0 17
24733: ST_TO_ADDR
// if buildings then
24734: LD_VAR 0 18
24738: IFFALSE 26066
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24740: LD_ADDR_VAR 0 19
24744: PUSH
24745: LD_VAR 0 18
24749: PPUSH
24750: LD_INT 2
24752: PUSH
24753: LD_INT 30
24755: PUSH
24756: LD_INT 29
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 30
24765: PUSH
24766: LD_INT 30
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: PPUSH
24778: CALL_OW 72
24782: ST_TO_ADDR
// if tmp then
24783: LD_VAR 0 19
24787: IFFALSE 24835
// for i in tmp do
24789: LD_ADDR_VAR 0 8
24793: PUSH
24794: LD_VAR 0 19
24798: PUSH
24799: FOR_IN
24800: IFFALSE 24833
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24802: LD_VAR 0 8
24806: PPUSH
24807: CALL_OW 250
24811: PPUSH
24812: LD_VAR 0 8
24816: PPUSH
24817: CALL_OW 251
24821: PPUSH
24822: LD_VAR 0 16
24826: PPUSH
24827: CALL_OW 441
24831: GO 24799
24833: POP
24834: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24835: LD_VAR 0 18
24839: PPUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 30
24845: PUSH
24846: LD_INT 32
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 30
24855: PUSH
24856: LD_INT 33
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: PPUSH
24868: CALL_OW 72
24872: IFFALSE 24960
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24874: LD_ADDR_VAR 0 8
24878: PUSH
24879: LD_VAR 0 18
24883: PPUSH
24884: LD_INT 2
24886: PUSH
24887: LD_INT 30
24889: PUSH
24890: LD_INT 32
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 30
24899: PUSH
24900: LD_INT 33
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: PPUSH
24912: CALL_OW 72
24916: PUSH
24917: FOR_IN
24918: IFFALSE 24958
// begin if not GetBWeapon ( i ) then
24920: LD_VAR 0 8
24924: PPUSH
24925: CALL_OW 269
24929: NOT
24930: IFFALSE 24956
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24932: LD_VAR 0 8
24936: PPUSH
24937: LD_VAR 0 8
24941: PPUSH
24942: LD_VAR 0 2
24946: PPUSH
24947: CALL 26212 0 2
24951: PPUSH
24952: CALL_OW 431
// end ;
24956: GO 24917
24958: POP
24959: POP
// end ; for i = 1 to personel do
24960: LD_ADDR_VAR 0 8
24964: PUSH
24965: DOUBLE
24966: LD_INT 1
24968: DEC
24969: ST_TO_ADDR
24970: LD_VAR 0 6
24974: PUSH
24975: FOR_TO
24976: IFFALSE 26046
// begin if i > 4 then
24978: LD_VAR 0 8
24982: PUSH
24983: LD_INT 4
24985: GREATER
24986: IFFALSE 24990
// break ;
24988: GO 26046
// case i of 1 :
24990: LD_VAR 0 8
24994: PUSH
24995: LD_INT 1
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25083
25003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25004: LD_ADDR_VAR 0 12
25008: PUSH
25009: LD_VAR 0 18
25013: PPUSH
25014: LD_INT 22
25016: PUSH
25017: LD_VAR 0 16
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 58
25028: PUSH
25029: EMPTY
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: PUSH
25035: LD_INT 30
25037: PUSH
25038: LD_INT 32
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 30
25047: PUSH
25048: LD_INT 4
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 30
25057: PUSH
25058: LD_INT 5
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: LIST
25075: PPUSH
25076: CALL_OW 72
25080: ST_TO_ADDR
25081: GO 25305
25083: LD_INT 2
25085: DOUBLE
25086: EQUAL
25087: IFTRUE 25091
25089: GO 25153
25091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25092: LD_ADDR_VAR 0 12
25096: PUSH
25097: LD_VAR 0 18
25101: PPUSH
25102: LD_INT 22
25104: PUSH
25105: LD_VAR 0 16
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: LD_INT 30
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 30
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 72
25150: ST_TO_ADDR
25151: GO 25305
25153: LD_INT 3
25155: DOUBLE
25156: EQUAL
25157: IFTRUE 25161
25159: GO 25223
25161: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25162: LD_ADDR_VAR 0 12
25166: PUSH
25167: LD_VAR 0 18
25171: PPUSH
25172: LD_INT 22
25174: PUSH
25175: LD_VAR 0 16
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: LD_INT 30
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 30
25199: PUSH
25200: LD_INT 3
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: LIST
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PPUSH
25216: CALL_OW 72
25220: ST_TO_ADDR
25221: GO 25305
25223: LD_INT 4
25225: DOUBLE
25226: EQUAL
25227: IFTRUE 25231
25229: GO 25304
25231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25232: LD_ADDR_VAR 0 12
25236: PUSH
25237: LD_VAR 0 18
25241: PPUSH
25242: LD_INT 22
25244: PUSH
25245: LD_VAR 0 16
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: LD_INT 30
25259: PUSH
25260: LD_INT 6
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 30
25269: PUSH
25270: LD_INT 7
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 8
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PPUSH
25297: CALL_OW 72
25301: ST_TO_ADDR
25302: GO 25305
25304: POP
// if i = 1 then
25305: LD_VAR 0 8
25309: PUSH
25310: LD_INT 1
25312: EQUAL
25313: IFFALSE 25424
// begin tmp := [ ] ;
25315: LD_ADDR_VAR 0 19
25319: PUSH
25320: EMPTY
25321: ST_TO_ADDR
// for j in f do
25322: LD_ADDR_VAR 0 9
25326: PUSH
25327: LD_VAR 0 12
25331: PUSH
25332: FOR_IN
25333: IFFALSE 25406
// if GetBType ( j ) = b_bunker then
25335: LD_VAR 0 9
25339: PPUSH
25340: CALL_OW 266
25344: PUSH
25345: LD_INT 32
25347: EQUAL
25348: IFFALSE 25375
// tmp := Insert ( tmp , 1 , j ) else
25350: LD_ADDR_VAR 0 19
25354: PUSH
25355: LD_VAR 0 19
25359: PPUSH
25360: LD_INT 1
25362: PPUSH
25363: LD_VAR 0 9
25367: PPUSH
25368: CALL_OW 2
25372: ST_TO_ADDR
25373: GO 25404
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25375: LD_ADDR_VAR 0 19
25379: PUSH
25380: LD_VAR 0 19
25384: PPUSH
25385: LD_VAR 0 19
25389: PUSH
25390: LD_INT 1
25392: PLUS
25393: PPUSH
25394: LD_VAR 0 9
25398: PPUSH
25399: CALL_OW 2
25403: ST_TO_ADDR
25404: GO 25332
25406: POP
25407: POP
// if tmp then
25408: LD_VAR 0 19
25412: IFFALSE 25424
// f := tmp ;
25414: LD_ADDR_VAR 0 12
25418: PUSH
25419: LD_VAR 0 19
25423: ST_TO_ADDR
// end ; x := personel [ i ] ;
25424: LD_ADDR_VAR 0 13
25428: PUSH
25429: LD_VAR 0 6
25433: PUSH
25434: LD_VAR 0 8
25438: ARRAY
25439: ST_TO_ADDR
// if x = - 1 then
25440: LD_VAR 0 13
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: EQUAL
25449: IFFALSE 25660
// begin for j in f do
25451: LD_ADDR_VAR 0 9
25455: PUSH
25456: LD_VAR 0 12
25460: PUSH
25461: FOR_IN
25462: IFFALSE 25656
// repeat InitHc ;
25464: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25468: LD_VAR 0 9
25472: PPUSH
25473: CALL_OW 266
25477: PUSH
25478: LD_INT 5
25480: EQUAL
25481: IFFALSE 25551
// begin if UnitsInside ( j ) < 3 then
25483: LD_VAR 0 9
25487: PPUSH
25488: CALL_OW 313
25492: PUSH
25493: LD_INT 3
25495: LESS
25496: IFFALSE 25532
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25498: LD_INT 0
25500: PPUSH
25501: LD_INT 5
25503: PUSH
25504: LD_INT 8
25506: PUSH
25507: LD_INT 9
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: PUSH
25515: LD_VAR 0 17
25519: ARRAY
25520: PPUSH
25521: LD_VAR 0 4
25525: PPUSH
25526: CALL_OW 380
25530: GO 25549
// PrepareHuman ( false , i , skill ) ;
25532: LD_INT 0
25534: PPUSH
25535: LD_VAR 0 8
25539: PPUSH
25540: LD_VAR 0 4
25544: PPUSH
25545: CALL_OW 380
// end else
25549: GO 25568
// PrepareHuman ( false , i , skill ) ;
25551: LD_INT 0
25553: PPUSH
25554: LD_VAR 0 8
25558: PPUSH
25559: LD_VAR 0 4
25563: PPUSH
25564: CALL_OW 380
// un := CreateHuman ;
25568: LD_ADDR_VAR 0 14
25572: PUSH
25573: CALL_OW 44
25577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25578: LD_ADDR_VAR 0 7
25582: PUSH
25583: LD_VAR 0 7
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: LD_VAR 0 14
25595: PPUSH
25596: CALL_OW 2
25600: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25601: LD_VAR 0 14
25605: PPUSH
25606: LD_VAR 0 9
25610: PPUSH
25611: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25615: LD_VAR 0 9
25619: PPUSH
25620: CALL_OW 313
25624: PUSH
25625: LD_INT 6
25627: EQUAL
25628: IFTRUE 25652
25630: PUSH
25631: LD_VAR 0 9
25635: PPUSH
25636: CALL_OW 266
25640: PUSH
25641: LD_INT 32
25643: PUSH
25644: LD_INT 31
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: IN
25651: OR
25652: IFFALSE 25464
25654: GO 25461
25656: POP
25657: POP
// end else
25658: GO 26044
// for j = 1 to x do
25660: LD_ADDR_VAR 0 9
25664: PUSH
25665: DOUBLE
25666: LD_INT 1
25668: DEC
25669: ST_TO_ADDR
25670: LD_VAR 0 13
25674: PUSH
25675: FOR_TO
25676: IFFALSE 26042
// begin InitHc ;
25678: CALL_OW 19
// if not f then
25682: LD_VAR 0 12
25686: NOT
25687: IFFALSE 25776
// begin PrepareHuman ( false , i , skill ) ;
25689: LD_INT 0
25691: PPUSH
25692: LD_VAR 0 8
25696: PPUSH
25697: LD_VAR 0 4
25701: PPUSH
25702: CALL_OW 380
// un := CreateHuman ;
25706: LD_ADDR_VAR 0 14
25710: PUSH
25711: CALL_OW 44
25715: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25716: LD_ADDR_VAR 0 7
25720: PUSH
25721: LD_VAR 0 7
25725: PPUSH
25726: LD_INT 1
25728: PPUSH
25729: LD_VAR 0 14
25733: PPUSH
25734: CALL_OW 2
25738: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25739: LD_VAR 0 14
25743: PPUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 250
25753: PPUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 251
25763: PPUSH
25764: LD_INT 10
25766: PPUSH
25767: LD_INT 0
25769: PPUSH
25770: CALL_OW 50
// continue ;
25774: GO 25675
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25776: LD_VAR 0 12
25780: PUSH
25781: LD_INT 1
25783: ARRAY
25784: PPUSH
25785: CALL_OW 313
25789: IFFALSE 25817
25791: PUSH
25792: LD_VAR 0 12
25796: PUSH
25797: LD_INT 1
25799: ARRAY
25800: PPUSH
25801: CALL_OW 266
25805: PUSH
25806: LD_INT 32
25808: PUSH
25809: LD_INT 31
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: IN
25816: AND
25817: IFTRUE 25838
25819: PUSH
25820: LD_VAR 0 12
25824: PUSH
25825: LD_INT 1
25827: ARRAY
25828: PPUSH
25829: CALL_OW 313
25833: PUSH
25834: LD_INT 6
25836: EQUAL
25837: OR
25838: IFFALSE 25858
// f := Delete ( f , 1 ) ;
25840: LD_ADDR_VAR 0 12
25844: PUSH
25845: LD_VAR 0 12
25849: PPUSH
25850: LD_INT 1
25852: PPUSH
25853: CALL_OW 3
25857: ST_TO_ADDR
// if not f then
25858: LD_VAR 0 12
25862: NOT
25863: IFFALSE 25881
// begin x := x + 2 ;
25865: LD_ADDR_VAR 0 13
25869: PUSH
25870: LD_VAR 0 13
25874: PUSH
25875: LD_INT 2
25877: PLUS
25878: ST_TO_ADDR
// continue ;
25879: GO 25675
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25881: LD_VAR 0 12
25885: PUSH
25886: LD_INT 1
25888: ARRAY
25889: PPUSH
25890: CALL_OW 266
25894: PUSH
25895: LD_INT 5
25897: EQUAL
25898: IFFALSE 25972
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25900: LD_VAR 0 12
25904: PUSH
25905: LD_INT 1
25907: ARRAY
25908: PPUSH
25909: CALL_OW 313
25913: PUSH
25914: LD_INT 3
25916: LESS
25917: IFFALSE 25953
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25919: LD_INT 0
25921: PPUSH
25922: LD_INT 5
25924: PUSH
25925: LD_INT 8
25927: PUSH
25928: LD_INT 9
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: LIST
25935: PUSH
25936: LD_VAR 0 17
25940: ARRAY
25941: PPUSH
25942: LD_VAR 0 4
25946: PPUSH
25947: CALL_OW 380
25951: GO 25970
// PrepareHuman ( false , i , skill ) ;
25953: LD_INT 0
25955: PPUSH
25956: LD_VAR 0 8
25960: PPUSH
25961: LD_VAR 0 4
25965: PPUSH
25966: CALL_OW 380
// end else
25970: GO 25989
// PrepareHuman ( false , i , skill ) ;
25972: LD_INT 0
25974: PPUSH
25975: LD_VAR 0 8
25979: PPUSH
25980: LD_VAR 0 4
25984: PPUSH
25985: CALL_OW 380
// un := CreateHuman ;
25989: LD_ADDR_VAR 0 14
25993: PUSH
25994: CALL_OW 44
25998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25999: LD_ADDR_VAR 0 7
26003: PUSH
26004: LD_VAR 0 7
26008: PPUSH
26009: LD_INT 1
26011: PPUSH
26012: LD_VAR 0 14
26016: PPUSH
26017: CALL_OW 2
26021: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26022: LD_VAR 0 14
26026: PPUSH
26027: LD_VAR 0 12
26031: PUSH
26032: LD_INT 1
26034: ARRAY
26035: PPUSH
26036: CALL_OW 52
// end ;
26040: GO 25675
26042: POP
26043: POP
// end ;
26044: GO 24975
26046: POP
26047: POP
// result := result ^ buildings ;
26048: LD_ADDR_VAR 0 7
26052: PUSH
26053: LD_VAR 0 7
26057: PUSH
26058: LD_VAR 0 18
26062: ADD
26063: ST_TO_ADDR
// end else
26064: GO 26207
// begin for i = 1 to personel do
26066: LD_ADDR_VAR 0 8
26070: PUSH
26071: DOUBLE
26072: LD_INT 1
26074: DEC
26075: ST_TO_ADDR
26076: LD_VAR 0 6
26080: PUSH
26081: FOR_TO
26082: IFFALSE 26205
// begin if i > 4 then
26084: LD_VAR 0 8
26088: PUSH
26089: LD_INT 4
26091: GREATER
26092: IFFALSE 26096
// break ;
26094: GO 26205
// x := personel [ i ] ;
26096: LD_ADDR_VAR 0 13
26100: PUSH
26101: LD_VAR 0 6
26105: PUSH
26106: LD_VAR 0 8
26110: ARRAY
26111: ST_TO_ADDR
// if x = - 1 then
26112: LD_VAR 0 13
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: EQUAL
26121: IFFALSE 26125
// continue ;
26123: GO 26081
// PrepareHuman ( false , i , skill ) ;
26125: LD_INT 0
26127: PPUSH
26128: LD_VAR 0 8
26132: PPUSH
26133: LD_VAR 0 4
26137: PPUSH
26138: CALL_OW 380
// un := CreateHuman ;
26142: LD_ADDR_VAR 0 14
26146: PUSH
26147: CALL_OW 44
26151: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26152: LD_VAR 0 14
26156: PPUSH
26157: LD_VAR 0 1
26161: PPUSH
26162: CALL_OW 250
26166: PPUSH
26167: LD_VAR 0 1
26171: PPUSH
26172: CALL_OW 251
26176: PPUSH
26177: LD_INT 10
26179: PPUSH
26180: LD_INT 0
26182: PPUSH
26183: CALL_OW 50
// result := result ^ un ;
26187: LD_ADDR_VAR 0 7
26191: PUSH
26192: LD_VAR 0 7
26196: PUSH
26197: LD_VAR 0 14
26201: ADD
26202: ST_TO_ADDR
// end ;
26203: GO 26081
26205: POP
26206: POP
// end ; end ;
26207: LD_VAR 0 7
26211: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
26218: PPUSH
26219: PPUSH
26220: PPUSH
26221: PPUSH
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
26228: PPUSH
26229: PPUSH
// result := false ;
26230: LD_ADDR_VAR 0 3
26234: PUSH
26235: LD_INT 0
26237: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26238: LD_VAR 0 1
26242: NOT
26243: IFTRUE 26268
26245: PUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 266
26255: PUSH
26256: LD_INT 32
26258: PUSH
26259: LD_INT 33
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: IN
26266: NOT
26267: OR
26268: IFFALSE 26272
// exit ;
26270: GO 27407
// nat := GetNation ( tower ) ;
26272: LD_ADDR_VAR 0 12
26276: PUSH
26277: LD_VAR 0 1
26281: PPUSH
26282: CALL_OW 248
26286: ST_TO_ADDR
// side := GetSide ( tower ) ;
26287: LD_ADDR_VAR 0 16
26291: PUSH
26292: LD_VAR 0 1
26296: PPUSH
26297: CALL_OW 255
26301: ST_TO_ADDR
// x := GetX ( tower ) ;
26302: LD_ADDR_VAR 0 10
26306: PUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 250
26316: ST_TO_ADDR
// y := GetY ( tower ) ;
26317: LD_ADDR_VAR 0 11
26321: PUSH
26322: LD_VAR 0 1
26326: PPUSH
26327: CALL_OW 251
26331: ST_TO_ADDR
// if not x or not y then
26332: LD_VAR 0 10
26336: NOT
26337: IFTRUE 26346
26339: PUSH
26340: LD_VAR 0 11
26344: NOT
26345: OR
26346: IFFALSE 26350
// exit ;
26348: GO 27407
// weapon := 0 ;
26350: LD_ADDR_VAR 0 18
26354: PUSH
26355: LD_INT 0
26357: ST_TO_ADDR
// fac_list := [ ] ;
26358: LD_ADDR_VAR 0 17
26362: PUSH
26363: EMPTY
26364: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26365: LD_ADDR_VAR 0 6
26369: PUSH
26370: LD_VAR 0 1
26374: PPUSH
26375: CALL_OW 274
26379: PPUSH
26380: LD_VAR 0 2
26384: PPUSH
26385: LD_INT 0
26387: PPUSH
26388: CALL 23942 0 3
26392: PPUSH
26393: LD_INT 30
26395: PUSH
26396: LD_INT 3
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 72
26407: ST_TO_ADDR
// if not factories then
26408: LD_VAR 0 6
26412: NOT
26413: IFFALSE 26417
// exit ;
26415: GO 27407
// for i in factories do
26417: LD_ADDR_VAR 0 8
26421: PUSH
26422: LD_VAR 0 6
26426: PUSH
26427: FOR_IN
26428: IFFALSE 26453
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26430: LD_ADDR_VAR 0 17
26434: PUSH
26435: LD_VAR 0 17
26439: PUSH
26440: LD_VAR 0 8
26444: PPUSH
26445: CALL_OW 478
26449: UNION
26450: ST_TO_ADDR
26451: GO 26427
26453: POP
26454: POP
// if not fac_list then
26455: LD_VAR 0 17
26459: NOT
26460: IFFALSE 26464
// exit ;
26462: GO 27407
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26464: LD_ADDR_VAR 0 5
26468: PUSH
26469: LD_INT 4
26471: PUSH
26472: LD_INT 5
26474: PUSH
26475: LD_INT 9
26477: PUSH
26478: LD_INT 10
26480: PUSH
26481: LD_INT 6
26483: PUSH
26484: LD_INT 7
26486: PUSH
26487: LD_INT 11
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 27
26501: PUSH
26502: LD_INT 28
26504: PUSH
26505: LD_INT 26
26507: PUSH
26508: LD_INT 30
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 43
26519: PUSH
26520: LD_INT 44
26522: PUSH
26523: LD_INT 46
26525: PUSH
26526: LD_INT 45
26528: PUSH
26529: LD_INT 47
26531: PUSH
26532: LD_INT 49
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: PUSH
26548: LD_VAR 0 12
26552: ARRAY
26553: ST_TO_ADDR
// list := list isect fac_list ;
26554: LD_ADDR_VAR 0 5
26558: PUSH
26559: LD_VAR 0 5
26563: PUSH
26564: LD_VAR 0 17
26568: ISECT
26569: ST_TO_ADDR
// if not list then
26570: LD_VAR 0 5
26574: NOT
26575: IFFALSE 26579
// exit ;
26577: GO 27407
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26579: LD_VAR 0 12
26583: PUSH
26584: LD_INT 3
26586: EQUAL
26587: IFFALSE 26599
26589: PUSH
26590: LD_INT 49
26592: PUSH
26593: LD_VAR 0 5
26597: IN
26598: AND
26599: IFFALSE 26619
26601: PUSH
26602: LD_INT 31
26604: PPUSH
26605: LD_VAR 0 16
26609: PPUSH
26610: CALL_OW 321
26614: PUSH
26615: LD_INT 2
26617: EQUAL
26618: AND
26619: IFFALSE 26679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26621: LD_INT 22
26623: PUSH
26624: LD_VAR 0 16
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 35
26635: PUSH
26636: LD_INT 49
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 91
26645: PUSH
26646: LD_VAR 0 1
26650: PUSH
26651: LD_INT 10
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: NOT
26669: IFFALSE 26679
// weapon := ru_time_lapser ;
26671: LD_ADDR_VAR 0 18
26675: PUSH
26676: LD_INT 49
26678: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26679: LD_VAR 0 12
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 2
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: IN
26694: IFFALSE 26718
26696: PUSH
26697: LD_INT 11
26699: PUSH
26700: LD_VAR 0 5
26704: IN
26705: IFTRUE 26717
26707: PUSH
26708: LD_INT 30
26710: PUSH
26711: LD_VAR 0 5
26715: IN
26716: OR
26717: AND
26718: IFFALSE 26738
26720: PUSH
26721: LD_INT 6
26723: PPUSH
26724: LD_VAR 0 16
26728: PPUSH
26729: CALL_OW 321
26733: PUSH
26734: LD_INT 2
26736: EQUAL
26737: AND
26738: IFFALSE 26905
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26740: LD_INT 22
26742: PUSH
26743: LD_VAR 0 16
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: LD_INT 35
26757: PUSH
26758: LD_INT 11
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 35
26767: PUSH
26768: LD_INT 30
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 91
26782: PUSH
26783: LD_VAR 0 1
26787: PUSH
26788: LD_INT 18
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: PPUSH
26801: CALL_OW 69
26805: NOT
26806: IFFALSE 26882
26808: PUSH
26809: LD_INT 22
26811: PUSH
26812: LD_VAR 0 16
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 2
26823: PUSH
26824: LD_INT 30
26826: PUSH
26827: LD_INT 32
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 30
26836: PUSH
26837: LD_INT 33
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 91
26851: PUSH
26852: LD_VAR 0 1
26856: PUSH
26857: LD_INT 12
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: PUSH
26870: EMPTY
26871: LIST
26872: PPUSH
26873: CALL_OW 69
26877: PUSH
26878: LD_INT 2
26880: GREATER
26881: AND
26882: IFFALSE 26905
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26884: LD_ADDR_VAR 0 18
26888: PUSH
26889: LD_INT 11
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_VAR 0 12
26903: ARRAY
26904: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26905: LD_VAR 0 18
26909: NOT
26910: IFFALSE 26930
26912: PUSH
26913: LD_INT 40
26915: PPUSH
26916: LD_VAR 0 16
26920: PPUSH
26921: CALL_OW 321
26925: PUSH
26926: LD_INT 2
26928: EQUAL
26929: AND
26930: IFFALSE 26966
26932: PUSH
26933: LD_INT 7
26935: PUSH
26936: LD_VAR 0 5
26940: IN
26941: IFTRUE 26953
26943: PUSH
26944: LD_INT 28
26946: PUSH
26947: LD_VAR 0 5
26951: IN
26952: OR
26953: IFTRUE 26965
26955: PUSH
26956: LD_INT 45
26958: PUSH
26959: LD_VAR 0 5
26963: IN
26964: OR
26965: AND
26966: IFFALSE 27220
// begin hex := GetHexInfo ( x , y ) ;
26968: LD_ADDR_VAR 0 4
26972: PUSH
26973: LD_VAR 0 10
26977: PPUSH
26978: LD_VAR 0 11
26982: PPUSH
26983: CALL_OW 546
26987: ST_TO_ADDR
// if hex [ 1 ] then
26988: LD_VAR 0 4
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: IFFALSE 27000
// exit ;
26998: GO 27407
// height := hex [ 2 ] ;
27000: LD_ADDR_VAR 0 15
27004: PUSH
27005: LD_VAR 0 4
27009: PUSH
27010: LD_INT 2
27012: ARRAY
27013: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27014: LD_ADDR_VAR 0 14
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: LD_INT 5
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// for i in tmp do
27037: LD_ADDR_VAR 0 8
27041: PUSH
27042: LD_VAR 0 14
27046: PUSH
27047: FOR_IN
27048: IFFALSE 27218
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27050: LD_ADDR_VAR 0 9
27054: PUSH
27055: LD_VAR 0 10
27059: PPUSH
27060: LD_VAR 0 8
27064: PPUSH
27065: LD_INT 5
27067: PPUSH
27068: CALL_OW 272
27072: PUSH
27073: LD_VAR 0 11
27077: PPUSH
27078: LD_VAR 0 8
27082: PPUSH
27083: LD_INT 5
27085: PPUSH
27086: CALL_OW 273
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27095: LD_VAR 0 9
27099: PUSH
27100: LD_INT 1
27102: ARRAY
27103: PPUSH
27104: LD_VAR 0 9
27108: PUSH
27109: LD_INT 2
27111: ARRAY
27112: PPUSH
27113: CALL_OW 488
27117: IFFALSE 27216
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27119: LD_ADDR_VAR 0 4
27123: PUSH
27124: LD_VAR 0 9
27128: PUSH
27129: LD_INT 1
27131: ARRAY
27132: PPUSH
27133: LD_VAR 0 9
27137: PUSH
27138: LD_INT 2
27140: ARRAY
27141: PPUSH
27142: CALL_OW 546
27146: ST_TO_ADDR
// if hex [ 1 ] then
27147: LD_VAR 0 4
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: IFFALSE 27159
// continue ;
27157: GO 27047
// h := hex [ 2 ] ;
27159: LD_ADDR_VAR 0 13
27163: PUSH
27164: LD_VAR 0 4
27168: PUSH
27169: LD_INT 2
27171: ARRAY
27172: ST_TO_ADDR
// if h + 7 < height then
27173: LD_VAR 0 13
27177: PUSH
27178: LD_INT 7
27180: PLUS
27181: PUSH
27182: LD_VAR 0 15
27186: LESS
27187: IFFALSE 27216
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27189: LD_ADDR_VAR 0 18
27193: PUSH
27194: LD_INT 7
27196: PUSH
27197: LD_INT 28
27199: PUSH
27200: LD_INT 45
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: PUSH
27208: LD_VAR 0 12
27212: ARRAY
27213: ST_TO_ADDR
// break ;
27214: GO 27218
// end ; end ; end ;
27216: GO 27047
27218: POP
27219: POP
// end ; if not weapon then
27220: LD_VAR 0 18
27224: NOT
27225: IFFALSE 27285
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27227: LD_ADDR_VAR 0 5
27231: PUSH
27232: LD_VAR 0 5
27236: PUSH
27237: LD_INT 11
27239: PUSH
27240: LD_INT 30
27242: PUSH
27243: LD_INT 49
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: DIFF
27251: ST_TO_ADDR
// if not list then
27252: LD_VAR 0 5
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27407
// weapon := list [ rand ( 1 , list ) ] ;
27261: LD_ADDR_VAR 0 18
27265: PUSH
27266: LD_VAR 0 5
27270: PUSH
27271: LD_INT 1
27273: PPUSH
27274: LD_VAR 0 5
27278: PPUSH
27279: CALL_OW 12
27283: ARRAY
27284: ST_TO_ADDR
// end ; if weapon then
27285: LD_VAR 0 18
27289: IFFALSE 27407
// begin tmp := CostOfWeapon ( weapon ) ;
27291: LD_ADDR_VAR 0 14
27295: PUSH
27296: LD_VAR 0 18
27300: PPUSH
27301: CALL_OW 451
27305: ST_TO_ADDR
// j := GetBase ( tower ) ;
27306: LD_ADDR_VAR 0 9
27310: PUSH
27311: LD_VAR 0 1
27315: PPUSH
27316: CALL_OW 274
27320: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27321: LD_VAR 0 9
27325: PPUSH
27326: LD_INT 1
27328: PPUSH
27329: CALL_OW 275
27333: PUSH
27334: LD_VAR 0 14
27338: PUSH
27339: LD_INT 1
27341: ARRAY
27342: GREATEREQUAL
27343: IFFALSE 27369
27345: PUSH
27346: LD_VAR 0 9
27350: PPUSH
27351: LD_INT 2
27353: PPUSH
27354: CALL_OW 275
27358: PUSH
27359: LD_VAR 0 14
27363: PUSH
27364: LD_INT 2
27366: ARRAY
27367: GREATEREQUAL
27368: AND
27369: IFFALSE 27395
27371: PUSH
27372: LD_VAR 0 9
27376: PPUSH
27377: LD_INT 3
27379: PPUSH
27380: CALL_OW 275
27384: PUSH
27385: LD_VAR 0 14
27389: PUSH
27390: LD_INT 3
27392: ARRAY
27393: GREATEREQUAL
27394: AND
27395: IFFALSE 27407
// result := weapon ;
27397: LD_ADDR_VAR 0 3
27401: PUSH
27402: LD_VAR 0 18
27406: ST_TO_ADDR
// end ; end ;
27407: LD_VAR 0 3
27411: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27412: LD_INT 0
27414: PPUSH
27415: PPUSH
// result := true ;
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 1
27423: ST_TO_ADDR
// if array1 = array2 then
27424: LD_VAR 0 1
27428: PUSH
27429: LD_VAR 0 2
27433: EQUAL
27434: IFFALSE 27494
// begin for i = 1 to array1 do
27436: LD_ADDR_VAR 0 4
27440: PUSH
27441: DOUBLE
27442: LD_INT 1
27444: DEC
27445: ST_TO_ADDR
27446: LD_VAR 0 1
27450: PUSH
27451: FOR_TO
27452: IFFALSE 27490
// if array1 [ i ] <> array2 [ i ] then
27454: LD_VAR 0 1
27458: PUSH
27459: LD_VAR 0 4
27463: ARRAY
27464: PUSH
27465: LD_VAR 0 2
27469: PUSH
27470: LD_VAR 0 4
27474: ARRAY
27475: NONEQUAL
27476: IFFALSE 27488
// begin result := false ;
27478: LD_ADDR_VAR 0 3
27482: PUSH
27483: LD_INT 0
27485: ST_TO_ADDR
// break ;
27486: GO 27490
// end ;
27488: GO 27451
27490: POP
27491: POP
// end else
27492: GO 27502
// result := false ;
27494: LD_ADDR_VAR 0 3
27498: PUSH
27499: LD_INT 0
27501: ST_TO_ADDR
// end ;
27502: LD_VAR 0 3
27506: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27507: LD_INT 0
27509: PPUSH
27510: PPUSH
// if not array1 or not array2 then
27511: LD_VAR 0 1
27515: NOT
27516: IFTRUE 27525
27518: PUSH
27519: LD_VAR 0 2
27523: NOT
27524: OR
27525: IFFALSE 27529
// exit ;
27527: GO 27593
// result := true ;
27529: LD_ADDR_VAR 0 3
27533: PUSH
27534: LD_INT 1
27536: ST_TO_ADDR
// for i = 1 to array1 do
27537: LD_ADDR_VAR 0 4
27541: PUSH
27542: DOUBLE
27543: LD_INT 1
27545: DEC
27546: ST_TO_ADDR
27547: LD_VAR 0 1
27551: PUSH
27552: FOR_TO
27553: IFFALSE 27591
// if array1 [ i ] <> array2 [ i ] then
27555: LD_VAR 0 1
27559: PUSH
27560: LD_VAR 0 4
27564: ARRAY
27565: PUSH
27566: LD_VAR 0 2
27570: PUSH
27571: LD_VAR 0 4
27575: ARRAY
27576: NONEQUAL
27577: IFFALSE 27589
// begin result := false ;
27579: LD_ADDR_VAR 0 3
27583: PUSH
27584: LD_INT 0
27586: ST_TO_ADDR
// break ;
27587: GO 27591
// end ;
27589: GO 27552
27591: POP
27592: POP
// end ;
27593: LD_VAR 0 3
27597: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27598: LD_INT 0
27600: PPUSH
27601: PPUSH
27602: PPUSH
// pom := GetBase ( fac ) ;
27603: LD_ADDR_VAR 0 5
27607: PUSH
27608: LD_VAR 0 1
27612: PPUSH
27613: CALL_OW 274
27617: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27618: LD_ADDR_VAR 0 4
27622: PUSH
27623: LD_VAR 0 2
27627: PUSH
27628: LD_INT 1
27630: ARRAY
27631: PPUSH
27632: LD_VAR 0 2
27636: PUSH
27637: LD_INT 2
27639: ARRAY
27640: PPUSH
27641: LD_VAR 0 2
27645: PUSH
27646: LD_INT 3
27648: ARRAY
27649: PPUSH
27650: LD_VAR 0 2
27654: PUSH
27655: LD_INT 4
27657: ARRAY
27658: PPUSH
27659: CALL_OW 449
27663: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27664: LD_ADDR_VAR 0 3
27668: PUSH
27669: LD_VAR 0 5
27673: PPUSH
27674: LD_INT 1
27676: PPUSH
27677: CALL_OW 275
27681: PUSH
27682: LD_VAR 0 4
27686: PUSH
27687: LD_INT 1
27689: ARRAY
27690: GREATEREQUAL
27691: IFFALSE 27717
27693: PUSH
27694: LD_VAR 0 5
27698: PPUSH
27699: LD_INT 2
27701: PPUSH
27702: CALL_OW 275
27706: PUSH
27707: LD_VAR 0 4
27711: PUSH
27712: LD_INT 2
27714: ARRAY
27715: GREATEREQUAL
27716: AND
27717: IFFALSE 27743
27719: PUSH
27720: LD_VAR 0 5
27724: PPUSH
27725: LD_INT 3
27727: PPUSH
27728: CALL_OW 275
27732: PUSH
27733: LD_VAR 0 4
27737: PUSH
27738: LD_INT 3
27740: ARRAY
27741: GREATEREQUAL
27742: AND
27743: ST_TO_ADDR
// end ;
27744: LD_VAR 0 3
27748: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27749: LD_INT 0
27751: PPUSH
27752: PPUSH
27753: PPUSH
27754: PPUSH
// pom := GetBase ( building ) ;
27755: LD_ADDR_VAR 0 3
27759: PUSH
27760: LD_VAR 0 1
27764: PPUSH
27765: CALL_OW 274
27769: ST_TO_ADDR
// if not pom then
27770: LD_VAR 0 3
27774: NOT
27775: IFFALSE 27779
// exit ;
27777: GO 27953
// btype := GetBType ( building ) ;
27779: LD_ADDR_VAR 0 5
27783: PUSH
27784: LD_VAR 0 1
27788: PPUSH
27789: CALL_OW 266
27793: ST_TO_ADDR
// if btype = b_armoury then
27794: LD_VAR 0 5
27798: PUSH
27799: LD_INT 4
27801: EQUAL
27802: IFFALSE 27812
// btype := b_barracks ;
27804: LD_ADDR_VAR 0 5
27808: PUSH
27809: LD_INT 5
27811: ST_TO_ADDR
// if btype = b_depot then
27812: LD_VAR 0 5
27816: PUSH
27817: LD_INT 0
27819: EQUAL
27820: IFFALSE 27830
// btype := b_warehouse ;
27822: LD_ADDR_VAR 0 5
27826: PUSH
27827: LD_INT 1
27829: ST_TO_ADDR
// if btype = b_workshop then
27830: LD_VAR 0 5
27834: PUSH
27835: LD_INT 2
27837: EQUAL
27838: IFFALSE 27848
// btype := b_factory ;
27840: LD_ADDR_VAR 0 5
27844: PUSH
27845: LD_INT 3
27847: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27848: LD_ADDR_VAR 0 4
27852: PUSH
27853: LD_VAR 0 5
27857: PPUSH
27858: LD_VAR 0 1
27862: PPUSH
27863: CALL_OW 248
27867: PPUSH
27868: CALL_OW 450
27872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27873: LD_ADDR_VAR 0 2
27877: PUSH
27878: LD_VAR 0 3
27882: PPUSH
27883: LD_INT 1
27885: PPUSH
27886: CALL_OW 275
27890: PUSH
27891: LD_VAR 0 4
27895: PUSH
27896: LD_INT 1
27898: ARRAY
27899: GREATEREQUAL
27900: IFFALSE 27926
27902: PUSH
27903: LD_VAR 0 3
27907: PPUSH
27908: LD_INT 2
27910: PPUSH
27911: CALL_OW 275
27915: PUSH
27916: LD_VAR 0 4
27920: PUSH
27921: LD_INT 2
27923: ARRAY
27924: GREATEREQUAL
27925: AND
27926: IFFALSE 27952
27928: PUSH
27929: LD_VAR 0 3
27933: PPUSH
27934: LD_INT 3
27936: PPUSH
27937: CALL_OW 275
27941: PUSH
27942: LD_VAR 0 4
27946: PUSH
27947: LD_INT 3
27949: ARRAY
27950: GREATEREQUAL
27951: AND
27952: ST_TO_ADDR
// end ;
27953: LD_VAR 0 2
27957: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27958: LD_INT 0
27960: PPUSH
27961: PPUSH
27962: PPUSH
// pom := GetBase ( building ) ;
27963: LD_ADDR_VAR 0 4
27967: PUSH
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 274
27977: ST_TO_ADDR
// if not pom then
27978: LD_VAR 0 4
27982: NOT
27983: IFFALSE 27987
// exit ;
27985: GO 28092
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27987: LD_ADDR_VAR 0 5
27991: PUSH
27992: LD_VAR 0 2
27996: PPUSH
27997: LD_VAR 0 1
28001: PPUSH
28002: CALL_OW 248
28006: PPUSH
28007: CALL_OW 450
28011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28012: LD_ADDR_VAR 0 3
28016: PUSH
28017: LD_VAR 0 4
28021: PPUSH
28022: LD_INT 1
28024: PPUSH
28025: CALL_OW 275
28029: PUSH
28030: LD_VAR 0 5
28034: PUSH
28035: LD_INT 1
28037: ARRAY
28038: GREATEREQUAL
28039: IFFALSE 28065
28041: PUSH
28042: LD_VAR 0 4
28046: PPUSH
28047: LD_INT 2
28049: PPUSH
28050: CALL_OW 275
28054: PUSH
28055: LD_VAR 0 5
28059: PUSH
28060: LD_INT 2
28062: ARRAY
28063: GREATEREQUAL
28064: AND
28065: IFFALSE 28091
28067: PUSH
28068: LD_VAR 0 4
28072: PPUSH
28073: LD_INT 3
28075: PPUSH
28076: CALL_OW 275
28080: PUSH
28081: LD_VAR 0 5
28085: PUSH
28086: LD_INT 3
28088: ARRAY
28089: GREATEREQUAL
28090: AND
28091: ST_TO_ADDR
// end ;
28092: LD_VAR 0 3
28096: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28097: LD_INT 0
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
28105: PPUSH
28106: PPUSH
28107: PPUSH
28108: PPUSH
28109: PPUSH
// result := false ;
28110: LD_ADDR_VAR 0 8
28114: PUSH
28115: LD_INT 0
28117: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28118: LD_VAR 0 5
28122: NOT
28123: IFTRUE 28132
28125: PUSH
28126: LD_VAR 0 1
28130: NOT
28131: OR
28132: IFTRUE 28141
28134: PUSH
28135: LD_VAR 0 2
28139: NOT
28140: OR
28141: IFTRUE 28150
28143: PUSH
28144: LD_VAR 0 3
28148: NOT
28149: OR
28150: IFFALSE 28154
// exit ;
28152: GO 28980
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28154: LD_ADDR_VAR 0 14
28158: PUSH
28159: LD_VAR 0 1
28163: PPUSH
28164: LD_VAR 0 2
28168: PPUSH
28169: LD_VAR 0 3
28173: PPUSH
28174: LD_VAR 0 4
28178: PPUSH
28179: LD_VAR 0 5
28183: PUSH
28184: LD_INT 1
28186: ARRAY
28187: PPUSH
28188: CALL_OW 248
28192: PPUSH
28193: LD_INT 0
28195: PPUSH
28196: CALL 30261 0 6
28200: ST_TO_ADDR
// if not hexes then
28201: LD_VAR 0 14
28205: NOT
28206: IFFALSE 28210
// exit ;
28208: GO 28980
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28210: LD_ADDR_VAR 0 17
28214: PUSH
28215: LD_VAR 0 5
28219: PPUSH
28220: LD_INT 22
28222: PUSH
28223: LD_VAR 0 13
28227: PPUSH
28228: CALL_OW 255
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 30
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 30
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PPUSH
28269: CALL_OW 72
28273: ST_TO_ADDR
// for i = 1 to hexes do
28274: LD_ADDR_VAR 0 9
28278: PUSH
28279: DOUBLE
28280: LD_INT 1
28282: DEC
28283: ST_TO_ADDR
28284: LD_VAR 0 14
28288: PUSH
28289: FOR_TO
28290: IFFALSE 28978
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28292: LD_ADDR_VAR 0 13
28296: PUSH
28297: LD_VAR 0 14
28301: PUSH
28302: LD_VAR 0 9
28306: ARRAY
28307: PUSH
28308: LD_INT 1
28310: ARRAY
28311: PPUSH
28312: LD_VAR 0 14
28316: PUSH
28317: LD_VAR 0 9
28321: ARRAY
28322: PUSH
28323: LD_INT 2
28325: ARRAY
28326: PPUSH
28327: CALL_OW 428
28331: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28332: LD_VAR 0 14
28336: PUSH
28337: LD_VAR 0 9
28341: ARRAY
28342: PUSH
28343: LD_INT 1
28345: ARRAY
28346: PPUSH
28347: LD_VAR 0 14
28351: PUSH
28352: LD_VAR 0 9
28356: ARRAY
28357: PUSH
28358: LD_INT 2
28360: ARRAY
28361: PPUSH
28362: CALL_OW 351
28366: IFTRUE 28405
28368: PUSH
28369: LD_VAR 0 14
28373: PUSH
28374: LD_VAR 0 9
28378: ARRAY
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: PPUSH
28384: LD_VAR 0 14
28388: PUSH
28389: LD_VAR 0 9
28393: ARRAY
28394: PUSH
28395: LD_INT 2
28397: ARRAY
28398: PPUSH
28399: CALL_OW 488
28403: NOT
28404: OR
28405: IFTRUE 28422
28407: PUSH
28408: LD_VAR 0 13
28412: PPUSH
28413: CALL_OW 247
28417: PUSH
28418: LD_INT 3
28420: EQUAL
28421: OR
28422: IFFALSE 28428
// exit ;
28424: POP
28425: POP
28426: GO 28980
// if not tmp then
28428: LD_VAR 0 13
28432: NOT
28433: IFFALSE 28437
// continue ;
28435: GO 28289
// result := true ;
28437: LD_ADDR_VAR 0 8
28441: PUSH
28442: LD_INT 1
28444: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28445: LD_VAR 0 6
28449: IFFALSE 28466
28451: PUSH
28452: LD_VAR 0 13
28456: PPUSH
28457: CALL_OW 247
28461: PUSH
28462: LD_INT 2
28464: EQUAL
28465: AND
28466: IFFALSE 28483
28468: PUSH
28469: LD_VAR 0 13
28473: PPUSH
28474: CALL_OW 263
28478: PUSH
28479: LD_INT 1
28481: EQUAL
28482: AND
28483: IFFALSE 28647
// begin if IsDrivenBy ( tmp ) then
28485: LD_VAR 0 13
28489: PPUSH
28490: CALL_OW 311
28494: IFFALSE 28498
// continue ;
28496: GO 28289
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28498: LD_VAR 0 6
28502: PPUSH
28503: LD_INT 3
28505: PUSH
28506: LD_INT 60
28508: PUSH
28509: EMPTY
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 55
28521: PUSH
28522: EMPTY
28523: LIST
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PPUSH
28533: CALL_OW 72
28537: IFFALSE 28645
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28539: LD_ADDR_VAR 0 18
28543: PUSH
28544: LD_VAR 0 6
28548: PPUSH
28549: LD_INT 3
28551: PUSH
28552: LD_INT 60
28554: PUSH
28555: EMPTY
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 3
28564: PUSH
28565: LD_INT 55
28567: PUSH
28568: EMPTY
28569: LIST
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PPUSH
28579: CALL_OW 72
28583: PUSH
28584: LD_INT 1
28586: ARRAY
28587: ST_TO_ADDR
// if IsInUnit ( driver ) then
28588: LD_VAR 0 18
28592: PPUSH
28593: CALL_OW 310
28597: IFFALSE 28608
// ComExit ( driver ) ;
28599: LD_VAR 0 18
28603: PPUSH
28604: CALL 54251 0 1
// AddComEnterUnit ( driver , tmp ) ;
28608: LD_VAR 0 18
28612: PPUSH
28613: LD_VAR 0 13
28617: PPUSH
28618: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28622: LD_VAR 0 18
28626: PPUSH
28627: LD_VAR 0 7
28631: PPUSH
28632: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28636: LD_VAR 0 18
28640: PPUSH
28641: CALL_OW 181
// end ; continue ;
28645: GO 28289
// end ; if not cleaners or not tmp in cleaners then
28647: LD_VAR 0 6
28651: NOT
28652: IFTRUE 28667
28654: PUSH
28655: LD_VAR 0 13
28659: PUSH
28660: LD_VAR 0 6
28664: IN
28665: NOT
28666: OR
28667: IFFALSE 28976
// begin if dep then
28669: LD_VAR 0 17
28673: IFFALSE 28809
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28675: LD_ADDR_VAR 0 16
28679: PUSH
28680: LD_VAR 0 17
28684: PUSH
28685: LD_INT 1
28687: ARRAY
28688: PPUSH
28689: CALL_OW 250
28693: PPUSH
28694: LD_VAR 0 17
28698: PUSH
28699: LD_INT 1
28701: ARRAY
28702: PPUSH
28703: CALL_OW 254
28707: PPUSH
28708: LD_INT 5
28710: PPUSH
28711: CALL_OW 272
28715: PUSH
28716: LD_VAR 0 17
28720: PUSH
28721: LD_INT 1
28723: ARRAY
28724: PPUSH
28725: CALL_OW 251
28729: PPUSH
28730: LD_VAR 0 17
28734: PUSH
28735: LD_INT 1
28737: ARRAY
28738: PPUSH
28739: CALL_OW 254
28743: PPUSH
28744: LD_INT 5
28746: PPUSH
28747: CALL_OW 273
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28756: LD_VAR 0 16
28760: PUSH
28761: LD_INT 1
28763: ARRAY
28764: PPUSH
28765: LD_VAR 0 16
28769: PUSH
28770: LD_INT 2
28772: ARRAY
28773: PPUSH
28774: CALL_OW 488
28778: IFFALSE 28809
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28780: LD_VAR 0 13
28784: PPUSH
28785: LD_VAR 0 16
28789: PUSH
28790: LD_INT 1
28792: ARRAY
28793: PPUSH
28794: LD_VAR 0 16
28798: PUSH
28799: LD_INT 2
28801: ARRAY
28802: PPUSH
28803: CALL_OW 111
// continue ;
28807: GO 28289
// end ; end ; r := GetDir ( tmp ) ;
28809: LD_ADDR_VAR 0 15
28813: PUSH
28814: LD_VAR 0 13
28818: PPUSH
28819: CALL_OW 254
28823: ST_TO_ADDR
// if r = 5 then
28824: LD_VAR 0 15
28828: PUSH
28829: LD_INT 5
28831: EQUAL
28832: IFFALSE 28842
// r := 0 ;
28834: LD_ADDR_VAR 0 15
28838: PUSH
28839: LD_INT 0
28841: ST_TO_ADDR
// for j = r to 5 do
28842: LD_ADDR_VAR 0 10
28846: PUSH
28847: DOUBLE
28848: LD_VAR 0 15
28852: DEC
28853: ST_TO_ADDR
28854: LD_INT 5
28856: PUSH
28857: FOR_TO
28858: IFFALSE 28974
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28860: LD_ADDR_VAR 0 11
28864: PUSH
28865: LD_VAR 0 13
28869: PPUSH
28870: CALL_OW 250
28874: PPUSH
28875: LD_VAR 0 10
28879: PPUSH
28880: LD_INT 2
28882: PPUSH
28883: CALL_OW 272
28887: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28888: LD_ADDR_VAR 0 12
28892: PUSH
28893: LD_VAR 0 13
28897: PPUSH
28898: CALL_OW 251
28902: PPUSH
28903: LD_VAR 0 10
28907: PPUSH
28908: LD_INT 2
28910: PPUSH
28911: CALL_OW 273
28915: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28916: LD_VAR 0 11
28920: PPUSH
28921: LD_VAR 0 12
28925: PPUSH
28926: CALL_OW 488
28930: IFFALSE 28949
28932: PUSH
28933: LD_VAR 0 11
28937: PPUSH
28938: LD_VAR 0 12
28942: PPUSH
28943: CALL_OW 428
28947: NOT
28948: AND
28949: IFFALSE 28972
// begin ComMoveXY ( tmp , _x , _y ) ;
28951: LD_VAR 0 13
28955: PPUSH
28956: LD_VAR 0 11
28960: PPUSH
28961: LD_VAR 0 12
28965: PPUSH
28966: CALL_OW 111
// break ;
28970: GO 28974
// end ; end ;
28972: GO 28857
28974: POP
28975: POP
// end ; end ;
28976: GO 28289
28978: POP
28979: POP
// end ;
28980: LD_VAR 0 8
28984: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28985: LD_INT 0
28987: PPUSH
// result := true ;
28988: LD_ADDR_VAR 0 3
28992: PUSH
28993: LD_INT 1
28995: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28996: LD_VAR 0 2
29000: PUSH
29001: LD_INT 24
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29015
29007: LD_INT 33
29009: DOUBLE
29010: EQUAL
29011: IFTRUE 29015
29013: GO 29040
29015: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: LD_INT 32
29023: PPUSH
29024: LD_VAR 0 1
29028: PPUSH
29029: CALL_OW 321
29033: PUSH
29034: LD_INT 2
29036: EQUAL
29037: ST_TO_ADDR
29038: GO 29356
29040: LD_INT 20
29042: DOUBLE
29043: EQUAL
29044: IFTRUE 29048
29046: GO 29073
29048: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29049: LD_ADDR_VAR 0 3
29053: PUSH
29054: LD_INT 6
29056: PPUSH
29057: LD_VAR 0 1
29061: PPUSH
29062: CALL_OW 321
29066: PUSH
29067: LD_INT 2
29069: EQUAL
29070: ST_TO_ADDR
29071: GO 29356
29073: LD_INT 22
29075: DOUBLE
29076: EQUAL
29077: IFTRUE 29087
29079: LD_INT 36
29081: DOUBLE
29082: EQUAL
29083: IFTRUE 29087
29085: GO 29112
29087: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29088: LD_ADDR_VAR 0 3
29092: PUSH
29093: LD_INT 15
29095: PPUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 321
29105: PUSH
29106: LD_INT 2
29108: EQUAL
29109: ST_TO_ADDR
29110: GO 29356
29112: LD_INT 30
29114: DOUBLE
29115: EQUAL
29116: IFTRUE 29120
29118: GO 29145
29120: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29121: LD_ADDR_VAR 0 3
29125: PUSH
29126: LD_INT 20
29128: PPUSH
29129: LD_VAR 0 1
29133: PPUSH
29134: CALL_OW 321
29138: PUSH
29139: LD_INT 2
29141: EQUAL
29142: ST_TO_ADDR
29143: GO 29356
29145: LD_INT 28
29147: DOUBLE
29148: EQUAL
29149: IFTRUE 29159
29151: LD_INT 21
29153: DOUBLE
29154: EQUAL
29155: IFTRUE 29159
29157: GO 29184
29159: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29160: LD_ADDR_VAR 0 3
29164: PUSH
29165: LD_INT 21
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: CALL_OW 321
29177: PUSH
29178: LD_INT 2
29180: EQUAL
29181: ST_TO_ADDR
29182: GO 29356
29184: LD_INT 16
29186: DOUBLE
29187: EQUAL
29188: IFTRUE 29192
29190: GO 29217
29192: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: LD_INT 84
29200: PPUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 321
29210: PUSH
29211: LD_INT 2
29213: EQUAL
29214: ST_TO_ADDR
29215: GO 29356
29217: LD_INT 19
29219: DOUBLE
29220: EQUAL
29221: IFTRUE 29231
29223: LD_INT 23
29225: DOUBLE
29226: EQUAL
29227: IFTRUE 29231
29229: GO 29256
29231: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_INT 83
29239: PPUSH
29240: LD_VAR 0 1
29244: PPUSH
29245: CALL_OW 321
29249: PUSH
29250: LD_INT 2
29252: EQUAL
29253: ST_TO_ADDR
29254: GO 29356
29256: LD_INT 17
29258: DOUBLE
29259: EQUAL
29260: IFTRUE 29264
29262: GO 29289
29264: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_INT 39
29272: PPUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 321
29282: PUSH
29283: LD_INT 2
29285: EQUAL
29286: ST_TO_ADDR
29287: GO 29356
29289: LD_INT 18
29291: DOUBLE
29292: EQUAL
29293: IFTRUE 29297
29295: GO 29322
29297: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29298: LD_ADDR_VAR 0 3
29302: PUSH
29303: LD_INT 40
29305: PPUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL_OW 321
29315: PUSH
29316: LD_INT 2
29318: EQUAL
29319: ST_TO_ADDR
29320: GO 29356
29322: LD_INT 27
29324: DOUBLE
29325: EQUAL
29326: IFTRUE 29330
29328: GO 29355
29330: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29331: LD_ADDR_VAR 0 3
29335: PUSH
29336: LD_INT 35
29338: PPUSH
29339: LD_VAR 0 1
29343: PPUSH
29344: CALL_OW 321
29348: PUSH
29349: LD_INT 2
29351: EQUAL
29352: ST_TO_ADDR
29353: GO 29356
29355: POP
// end ;
29356: LD_VAR 0 3
29360: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
// result := false ;
29374: LD_ADDR_VAR 0 6
29378: PUSH
29379: LD_INT 0
29381: ST_TO_ADDR
// if btype = b_depot then
29382: LD_VAR 0 2
29386: PUSH
29387: LD_INT 0
29389: EQUAL
29390: IFFALSE 29402
// begin result := true ;
29392: LD_ADDR_VAR 0 6
29396: PUSH
29397: LD_INT 1
29399: ST_TO_ADDR
// exit ;
29400: GO 30256
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29402: LD_VAR 0 1
29406: NOT
29407: IFTRUE 29432
29409: PUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 266
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: IN
29430: NOT
29431: OR
29432: IFTRUE 29441
29434: PUSH
29435: LD_VAR 0 2
29439: NOT
29440: OR
29441: IFTRUE 29477
29443: PUSH
29444: LD_VAR 0 5
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: LD_INT 1
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 3
29460: PUSH
29461: LD_INT 4
29463: PUSH
29464: LD_INT 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: IN
29475: NOT
29476: OR
29477: IFTRUE 29496
29479: PUSH
29480: LD_VAR 0 3
29484: PPUSH
29485: LD_VAR 0 4
29489: PPUSH
29490: CALL_OW 488
29494: NOT
29495: OR
29496: IFFALSE 29500
// exit ;
29498: GO 30256
// side := GetSide ( depot ) ;
29500: LD_ADDR_VAR 0 9
29504: PUSH
29505: LD_VAR 0 1
29509: PPUSH
29510: CALL_OW 255
29514: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29515: LD_VAR 0 9
29519: PPUSH
29520: LD_VAR 0 2
29524: PPUSH
29525: CALL 28985 0 2
29529: NOT
29530: IFFALSE 29534
// exit ;
29532: GO 30256
// pom := GetBase ( depot ) ;
29534: LD_ADDR_VAR 0 10
29538: PUSH
29539: LD_VAR 0 1
29543: PPUSH
29544: CALL_OW 274
29548: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29549: LD_ADDR_VAR 0 11
29553: PUSH
29554: LD_VAR 0 2
29558: PPUSH
29559: LD_VAR 0 1
29563: PPUSH
29564: CALL_OW 248
29568: PPUSH
29569: CALL_OW 450
29573: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29574: LD_VAR 0 10
29578: PPUSH
29579: LD_INT 1
29581: PPUSH
29582: CALL_OW 275
29586: PUSH
29587: LD_VAR 0 11
29591: PUSH
29592: LD_INT 1
29594: ARRAY
29595: GREATEREQUAL
29596: IFFALSE 29622
29598: PUSH
29599: LD_VAR 0 10
29603: PPUSH
29604: LD_INT 2
29606: PPUSH
29607: CALL_OW 275
29611: PUSH
29612: LD_VAR 0 11
29616: PUSH
29617: LD_INT 2
29619: ARRAY
29620: GREATEREQUAL
29621: AND
29622: IFFALSE 29648
29624: PUSH
29625: LD_VAR 0 10
29629: PPUSH
29630: LD_INT 3
29632: PPUSH
29633: CALL_OW 275
29637: PUSH
29638: LD_VAR 0 11
29642: PUSH
29643: LD_INT 3
29645: ARRAY
29646: GREATEREQUAL
29647: AND
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 30256
// if GetBType ( depot ) = b_depot then
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 266
29662: PUSH
29663: LD_INT 0
29665: EQUAL
29666: IFFALSE 29678
// dist := 28 else
29668: LD_ADDR_VAR 0 14
29672: PUSH
29673: LD_INT 28
29675: ST_TO_ADDR
29676: GO 29686
// dist := 36 ;
29678: LD_ADDR_VAR 0 14
29682: PUSH
29683: LD_INT 36
29685: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29686: LD_VAR 0 1
29690: PPUSH
29691: LD_VAR 0 3
29695: PPUSH
29696: LD_VAR 0 4
29700: PPUSH
29701: CALL_OW 297
29705: PUSH
29706: LD_VAR 0 14
29710: GREATER
29711: IFFALSE 29715
// exit ;
29713: GO 30256
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29715: LD_ADDR_VAR 0 12
29719: PUSH
29720: LD_VAR 0 2
29724: PPUSH
29725: LD_VAR 0 3
29729: PPUSH
29730: LD_VAR 0 4
29734: PPUSH
29735: LD_VAR 0 5
29739: PPUSH
29740: LD_VAR 0 1
29744: PPUSH
29745: CALL_OW 248
29749: PPUSH
29750: LD_INT 0
29752: PPUSH
29753: CALL 30261 0 6
29757: ST_TO_ADDR
// if not hexes then
29758: LD_VAR 0 12
29762: NOT
29763: IFFALSE 29767
// exit ;
29765: GO 30256
// hex := GetHexInfo ( x , y ) ;
29767: LD_ADDR_VAR 0 15
29771: PUSH
29772: LD_VAR 0 3
29776: PPUSH
29777: LD_VAR 0 4
29781: PPUSH
29782: CALL_OW 546
29786: ST_TO_ADDR
// if hex [ 1 ] then
29787: LD_VAR 0 15
29791: PUSH
29792: LD_INT 1
29794: ARRAY
29795: IFFALSE 29799
// exit ;
29797: GO 30256
// height := hex [ 2 ] ;
29799: LD_ADDR_VAR 0 13
29803: PUSH
29804: LD_VAR 0 15
29808: PUSH
29809: LD_INT 2
29811: ARRAY
29812: ST_TO_ADDR
// for i = 1 to hexes do
29813: LD_ADDR_VAR 0 7
29817: PUSH
29818: DOUBLE
29819: LD_INT 1
29821: DEC
29822: ST_TO_ADDR
29823: LD_VAR 0 12
29827: PUSH
29828: FOR_TO
29829: IFFALSE 30173
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29831: LD_VAR 0 12
29835: PUSH
29836: LD_VAR 0 7
29840: ARRAY
29841: PUSH
29842: LD_INT 1
29844: ARRAY
29845: PPUSH
29846: LD_VAR 0 12
29850: PUSH
29851: LD_VAR 0 7
29855: ARRAY
29856: PUSH
29857: LD_INT 2
29859: ARRAY
29860: PPUSH
29861: CALL_OW 488
29865: NOT
29866: IFTRUE 29908
29868: PUSH
29869: LD_VAR 0 12
29873: PUSH
29874: LD_VAR 0 7
29878: ARRAY
29879: PUSH
29880: LD_INT 1
29882: ARRAY
29883: PPUSH
29884: LD_VAR 0 12
29888: PUSH
29889: LD_VAR 0 7
29893: ARRAY
29894: PUSH
29895: LD_INT 2
29897: ARRAY
29898: PPUSH
29899: CALL_OW 428
29903: PUSH
29904: LD_INT 0
29906: GREATER
29907: OR
29908: IFTRUE 29946
29910: PUSH
29911: LD_VAR 0 12
29915: PUSH
29916: LD_VAR 0 7
29920: ARRAY
29921: PUSH
29922: LD_INT 1
29924: ARRAY
29925: PPUSH
29926: LD_VAR 0 12
29930: PUSH
29931: LD_VAR 0 7
29935: ARRAY
29936: PUSH
29937: LD_INT 2
29939: ARRAY
29940: PPUSH
29941: CALL_OW 351
29945: OR
29946: IFFALSE 29952
// exit ;
29948: POP
29949: POP
29950: GO 30256
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29952: LD_ADDR_VAR 0 8
29956: PUSH
29957: LD_VAR 0 12
29961: PUSH
29962: LD_VAR 0 7
29966: ARRAY
29967: PUSH
29968: LD_INT 1
29970: ARRAY
29971: PPUSH
29972: LD_VAR 0 12
29976: PUSH
29977: LD_VAR 0 7
29981: ARRAY
29982: PUSH
29983: LD_INT 2
29985: ARRAY
29986: PPUSH
29987: CALL_OW 546
29991: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29992: LD_VAR 0 8
29996: PUSH
29997: LD_INT 1
29999: ARRAY
30000: IFTRUE 30022
30002: PUSH
30003: LD_VAR 0 8
30007: PUSH
30008: LD_INT 2
30010: ARRAY
30011: PUSH
30012: LD_VAR 0 13
30016: PUSH
30017: LD_INT 2
30019: PLUS
30020: GREATER
30021: OR
30022: IFTRUE 30044
30024: PUSH
30025: LD_VAR 0 8
30029: PUSH
30030: LD_INT 2
30032: ARRAY
30033: PUSH
30034: LD_VAR 0 13
30038: PUSH
30039: LD_INT 2
30041: MINUS
30042: LESS
30043: OR
30044: IFTRUE 30112
30046: PUSH
30047: LD_VAR 0 8
30051: PUSH
30052: LD_INT 3
30054: ARRAY
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: LD_INT 8
30061: PUSH
30062: LD_INT 9
30064: PUSH
30065: LD_INT 10
30067: PUSH
30068: LD_INT 11
30070: PUSH
30071: LD_INT 12
30073: PUSH
30074: LD_INT 13
30076: PUSH
30077: LD_INT 16
30079: PUSH
30080: LD_INT 17
30082: PUSH
30083: LD_INT 18
30085: PUSH
30086: LD_INT 19
30088: PUSH
30089: LD_INT 20
30091: PUSH
30092: LD_INT 21
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: IN
30110: NOT
30111: OR
30112: IFTRUE 30125
30114: PUSH
30115: LD_VAR 0 8
30119: PUSH
30120: LD_INT 5
30122: ARRAY
30123: NOT
30124: OR
30125: IFTRUE 30165
30127: PUSH
30128: LD_VAR 0 8
30132: PUSH
30133: LD_INT 6
30135: ARRAY
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: LD_INT 7
30145: PUSH
30146: LD_INT 9
30148: PUSH
30149: LD_INT 10
30151: PUSH
30152: LD_INT 11
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: IN
30163: NOT
30164: OR
30165: IFFALSE 30171
// exit ;
30167: POP
30168: POP
30169: GO 30256
// end ;
30171: GO 29828
30173: POP
30174: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30175: LD_VAR 0 9
30179: PPUSH
30180: LD_VAR 0 3
30184: PPUSH
30185: LD_VAR 0 4
30189: PPUSH
30190: LD_INT 20
30192: PPUSH
30193: CALL 22075 0 4
30197: PUSH
30198: LD_INT 4
30200: ARRAY
30201: IFFALSE 30205
// exit ;
30203: GO 30256
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30205: LD_VAR 0 2
30209: PUSH
30210: LD_INT 29
30212: PUSH
30213: LD_INT 30
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: IN
30220: IFFALSE 30244
30222: PUSH
30223: LD_VAR 0 3
30227: PPUSH
30228: LD_VAR 0 4
30232: PPUSH
30233: LD_VAR 0 9
30237: PPUSH
30238: CALL_OW 440
30242: NOT
30243: AND
30244: IFFALSE 30248
// exit ;
30246: GO 30256
// result := true ;
30248: LD_ADDR_VAR 0 6
30252: PUSH
30253: LD_INT 1
30255: ST_TO_ADDR
// end ;
30256: LD_VAR 0 6
30260: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30261: LD_INT 0
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
30270: PPUSH
30271: PPUSH
30272: PPUSH
30273: PPUSH
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
30278: PPUSH
30279: PPUSH
30280: PPUSH
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
30292: PPUSH
30293: PPUSH
30294: PPUSH
30295: PPUSH
30296: PPUSH
30297: PPUSH
30298: PPUSH
30299: PPUSH
30300: PPUSH
30301: PPUSH
30302: PPUSH
30303: PPUSH
30304: PPUSH
30305: PPUSH
30306: PPUSH
30307: PPUSH
30308: PPUSH
30309: PPUSH
30310: PPUSH
30311: PPUSH
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
// result = [ ] ;
30321: LD_ADDR_VAR 0 7
30325: PUSH
30326: EMPTY
30327: ST_TO_ADDR
// temp_list = [ ] ;
30328: LD_ADDR_VAR 0 9
30332: PUSH
30333: EMPTY
30334: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30335: LD_VAR 0 4
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 4
30354: PUSH
30355: LD_INT 5
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: IN
30366: NOT
30367: IFTRUE 30410
30369: PUSH
30370: LD_VAR 0 1
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: IN
30385: IFFALSE 30409
30387: PUSH
30388: LD_VAR 0 5
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 3
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: IN
30407: NOT
30408: AND
30409: OR
30410: IFFALSE 30414
// exit ;
30412: GO 48813
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30414: LD_VAR 0 1
30418: PUSH
30419: LD_INT 6
30421: PUSH
30422: LD_INT 7
30424: PUSH
30425: LD_INT 8
30427: PUSH
30428: LD_INT 13
30430: PUSH
30431: LD_INT 12
30433: PUSH
30434: LD_INT 15
30436: PUSH
30437: LD_INT 11
30439: PUSH
30440: LD_INT 14
30442: PUSH
30443: LD_INT 10
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: IN
30457: IFFALSE 30467
// btype = b_lab ;
30459: LD_ADDR_VAR 0 1
30463: PUSH
30464: LD_INT 6
30466: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30467: LD_VAR 0 6
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: IN
30486: NOT
30487: IFTRUE 30555
30489: PUSH
30490: LD_VAR 0 1
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: LD_INT 3
30506: PUSH
30507: LD_INT 6
30509: PUSH
30510: LD_INT 36
30512: PUSH
30513: LD_INT 4
30515: PUSH
30516: LD_INT 5
30518: PUSH
30519: LD_INT 31
30521: PUSH
30522: LD_INT 32
30524: PUSH
30525: LD_INT 33
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: IN
30541: NOT
30542: IFFALSE 30554
30544: PUSH
30545: LD_VAR 0 6
30549: PUSH
30550: LD_INT 1
30552: EQUAL
30553: AND
30554: OR
30555: IFTRUE 30587
30557: PUSH
30558: LD_VAR 0 1
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: LD_INT 3
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: IN
30573: NOT
30574: IFFALSE 30586
30576: PUSH
30577: LD_VAR 0 6
30581: PUSH
30582: LD_INT 2
30584: EQUAL
30585: AND
30586: OR
30587: IFFALSE 30597
// mode = 0 ;
30589: LD_ADDR_VAR 0 6
30593: PUSH
30594: LD_INT 0
30596: ST_TO_ADDR
// case mode of 0 :
30597: LD_VAR 0 6
30601: PUSH
30602: LD_INT 0
30604: DOUBLE
30605: EQUAL
30606: IFTRUE 30610
30608: GO 42063
30610: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30611: LD_ADDR_VAR 0 11
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30804: LD_ADDR_VAR 0 12
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 2
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: NEG
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 3
30961: NEG
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31000: LD_ADDR_VAR 0 13
31004: PUSH
31005: LD_INT 0
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: PUSH
31029: LD_INT 0
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: LD_INT 2
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: NEG
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 3
31171: NEG
31172: PUSH
31173: LD_INT 3
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31199: LD_ADDR_VAR 0 14
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: LD_INT 1
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 0
31247: PUSH
31248: LD_INT 1
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 1
31268: NEG
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 2
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: LD_INT 2
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: NEG
31335: PUSH
31336: LD_INT 1
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: LD_INT 3
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 2
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31395: LD_ADDR_VAR 0 15
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 0
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 0
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31588: LD_ADDR_VAR 0 16
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 2
31711: NEG
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: LD_INT 2
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 3
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31781: LD_ADDR_VAR 0 17
31785: PUSH
31786: LD_INT 0
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: LD_INT 1
31801: NEG
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 2
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 0
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 2
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 2
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 2
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32011: LD_ADDR_VAR 0 18
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: LD_INT 1
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 1
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: NEG
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 2
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: LD_INT 2
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 2
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 2
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 0
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: NEG
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 2
32210: NEG
32211: PUSH
32212: LD_INT 2
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32241: LD_ADDR_VAR 0 19
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 1
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: LD_INT 2
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: LD_INT 2
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: NEG
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32471: LD_ADDR_VAR 0 20
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 0
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: LD_INT 1
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 0
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 2
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 2
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32701: LD_ADDR_VAR 0 21
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 0
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 0
32718: PUSH
32719: LD_INT 1
32721: NEG
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 0
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 1
32846: PUSH
32847: LD_INT 2
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 2
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: NEG
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: LD_INT 0
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: NEG
32889: PUSH
32890: LD_INT 1
32892: NEG
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: LD_INT 2
32904: NEG
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32931: LD_ADDR_VAR 0 22
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 1
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: NEG
33013: PUSH
33014: LD_INT 2
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 2
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 1
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 1
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 2
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33161: LD_ADDR_VAR 0 23
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: LD_INT 1
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: LD_INT 1
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 2
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 2
33286: PUSH
33287: LD_INT 1
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 2
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 2
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 2
33348: NEG
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: LD_INT 2
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 2
33372: NEG
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: NEG
33385: PUSH
33386: LD_INT 3
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33441: LD_ADDR_VAR 0 24
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33717: LD_ADDR_VAR 0 25
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: NEG
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 1
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 0
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 2
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: LD_INT 2
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: LD_INT 2
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: LD_INT 1
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 2
33916: NEG
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 3
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 2
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: LD_INT 3
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33991: LD_ADDR_VAR 0 26
33995: PUSH
33996: LD_INT 0
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: NEG
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 2
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 2
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 2
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 2
34178: NEG
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: NEG
34223: PUSH
34224: LD_INT 2
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34267: LD_ADDR_VAR 0 27
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 2
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 3
34500: NEG
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 3
34512: NEG
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34547: LD_ADDR_VAR 0 28
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 2
34723: NEG
34724: PUSH
34725: LD_INT 0
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: PUSH
34732: LD_INT 2
34734: NEG
34735: PUSH
34736: LD_INT 1
34738: NEG
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 3
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: LD_INT 3
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 3
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 3
34794: NEG
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34829: LD_ADDR_VAR 0 29
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 1
34984: NEG
34985: PUSH
34986: LD_INT 1
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 2
34995: NEG
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 2
35007: NEG
35008: PUSH
35009: LD_INT 2
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 2
35019: NEG
35020: PUSH
35021: LD_INT 3
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 3
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 3
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: NEG
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35108: LD_ADDR_VAR 0 30
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 1
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 0
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: PUSH
35244: LD_INT 2
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: NEG
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: LD_INT 3
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: PUSH
35310: LD_INT 2
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 3
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 2
35340: NEG
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 3
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35386: LD_ADDR_VAR 0 31
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 0
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: NEG
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 3
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 3
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 3
35629: NEG
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35664: LD_ADDR_VAR 0 32
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: NEG
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 3
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: LD_INT 2
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 3
35876: PUSH
35877: LD_INT 2
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: LD_INT 3
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 3
35907: NEG
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35942: LD_ADDR_VAR 0 33
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 1
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 2
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 0
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 2
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 2
36132: NEG
36133: PUSH
36134: LD_INT 3
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 3
36186: NEG
36187: PUSH
36188: LD_INT 2
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36221: LD_ADDR_VAR 0 34
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 2
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 2
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: LD_INT 2
36404: NEG
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: LD_INT 3
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 2
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 2
36455: NEG
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 3
36466: NEG
36467: PUSH
36468: LD_INT 1
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36501: LD_ADDR_VAR 0 35
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36613: LD_ADDR_VAR 0 36
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36725: LD_ADDR_VAR 0 37
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 1
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: LD_INT 1
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36837: LD_ADDR_VAR 0 38
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: LD_INT 1
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: NEG
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36949: LD_ADDR_VAR 0 39
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: LD_INT 1
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37061: LD_ADDR_VAR 0 40
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 0
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37173: LD_ADDR_VAR 0 41
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 1
37269: NEG
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: NEG
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 2
37363: NEG
37364: PUSH
37365: LD_INT 3
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 3
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: LD_INT 3
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 3
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 3
37447: NEG
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 3
37458: NEG
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: LD_INT 3
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37523: LD_ADDR_VAR 0 42
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: LD_INT 1
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: NEG
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: NEG
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 2
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: NEG
37702: PUSH
37703: LD_INT 2
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 2
37713: NEG
37714: PUSH
37715: LD_INT 3
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: LD_INT 3
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 3
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: LD_INT 2
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: LD_INT 3
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 1
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 3
37820: NEG
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 3
37832: NEG
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37873: LD_ADDR_VAR 0 43
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: NEG
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: NEG
38063: PUSH
38064: LD_INT 3
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 3
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: LD_INT 3
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: LD_INT 3
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 3
38169: NEG
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 3
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38221: LD_ADDR_VAR 0 44
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: NEG
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: LD_INT 2
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: LD_INT 2
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: LD_INT 3
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: LD_INT 3
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 3
38518: NEG
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 3
38530: NEG
38531: PUSH
38532: LD_INT 3
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38571: LD_ADDR_VAR 0 45
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 1
38726: NEG
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 2
38761: NEG
38762: PUSH
38763: LD_INT 3
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 3
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: LD_INT 3
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 1
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: LD_INT 3
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 3
38868: NEG
38869: PUSH
38870: LD_INT 2
38872: NEG
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 3
38880: NEG
38881: PUSH
38882: LD_INT 3
38884: NEG
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38921: LD_ADDR_VAR 0 46
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 1
39028: NEG
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: NEG
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 3
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 3
39217: NEG
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39269: LD_ADDR_VAR 0 47
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39420: LD_ADDR_VAR 0 48
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 1
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39567: LD_ADDR_VAR 0 49
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 1
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39711: LD_ADDR_VAR 0 50
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39855: LD_ADDR_VAR 0 51
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 1
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40002: LD_ADDR_VAR 0 52
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 2
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40153: LD_ADDR_VAR 0 53
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: NEG
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40383: LD_ADDR_VAR 0 54
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 1
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: LD_INT 1
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 1
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 2
40570: NEG
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40613: LD_ADDR_VAR 0 55
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: LD_INT 2
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 2
40709: NEG
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40843: LD_ADDR_VAR 0 56
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: LD_INT 2
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 2
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41073: LD_ADDR_VAR 0 57
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: NEG
41155: PUSH
41156: LD_INT 2
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: NEG
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41303: LD_ADDR_VAR 0 58
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: NEG
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41533: LD_ADDR_VAR 0 59
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41621: LD_ADDR_VAR 0 60
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 1
41690: NEG
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41709: LD_ADDR_VAR 0 61
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41797: LD_ADDR_VAR 0 62
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41885: LD_ADDR_VAR 0 63
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41973: LD_ADDR_VAR 0 64
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
// end ; 1 :
42061: GO 47958
42063: LD_INT 1
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42071
42069: GO 44694
42071: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42072: LD_ADDR_VAR 0 11
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: LD_INT 3
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 3
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42116: LD_ADDR_VAR 0 12
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42157: LD_ADDR_VAR 0 13
42161: PUSH
42162: LD_INT 3
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: LD_INT 3
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42197: LD_ADDR_VAR 0 14
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 3
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42238: LD_ADDR_VAR 0 15
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 3
42256: NEG
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 3
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42282: LD_ADDR_VAR 0 16
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: NEG
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: LD_INT 3
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42328: LD_ADDR_VAR 0 17
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 3
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 3
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42372: LD_ADDR_VAR 0 18
42376: PUSH
42377: LD_INT 2
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42413: LD_ADDR_VAR 0 19
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 3
42430: PUSH
42431: LD_INT 3
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42453: LD_ADDR_VAR 0 20
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 3
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 3
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42494: LD_ADDR_VAR 0 21
42498: PUSH
42499: LD_INT 2
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 3
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42538: LD_ADDR_VAR 0 22
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: LD_INT 3
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: NEG
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 3
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42584: LD_ADDR_VAR 0 23
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: LD_INT 3
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 4
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: LD_INT 3
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42628: LD_ADDR_VAR 0 24
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: LD_INT 1
42648: NEG
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 4
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42669: LD_ADDR_VAR 0 25
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: LD_INT 3
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 4
42686: PUSH
42687: LD_INT 3
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 4
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42709: LD_ADDR_VAR 0 26
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: LD_INT 4
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: LIST
42749: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42750: LD_ADDR_VAR 0 27
42754: PUSH
42755: LD_INT 3
42757: NEG
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 3
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 4
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42794: LD_ADDR_VAR 0 28
42798: PUSH
42799: LD_INT 3
42801: NEG
42802: PUSH
42803: LD_INT 3
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: NEG
42814: PUSH
42815: LD_INT 4
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 4
42825: NEG
42826: PUSH
42827: LD_INT 3
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42840: LD_ADDR_VAR 0 29
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 4
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 4
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 3
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 5
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 5
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 4
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 6
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: LD_INT 6
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 5
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42995: LD_ADDR_VAR 0 30
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 3
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 4
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 4
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 5
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 5
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 5
43095: PUSH
43096: LD_INT 1
43098: NEG
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 6
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 6
43116: PUSH
43117: LD_INT 1
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43138: LD_ADDR_VAR 0 31
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 3
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 4
43185: PUSH
43186: LD_INT 4
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 3
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 5
43205: PUSH
43206: LD_INT 4
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 5
43215: PUSH
43216: LD_INT 5
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 4
43225: PUSH
43226: LD_INT 5
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 6
43235: PUSH
43236: LD_INT 5
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 6
43245: PUSH
43246: LD_INT 6
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 5
43255: PUSH
43256: LD_INT 6
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43277: LD_ADDR_VAR 0 32
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 3
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 4
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 4
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 5
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 5
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 4
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 6
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 6
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 5
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43420: LD_ADDR_VAR 0 33
43424: PUSH
43425: LD_INT 2
43427: NEG
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 4
43472: NEG
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 4
43483: NEG
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 4
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 5
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 5
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 5
43529: NEG
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 6
43540: NEG
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 6
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43575: LD_ADDR_VAR 0 34
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: LD_INT 3
43586: NEG
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 3
43594: NEG
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 3
43606: NEG
43607: PUSH
43608: LD_INT 3
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: NEG
43619: PUSH
43620: LD_INT 4
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 4
43630: NEG
43631: PUSH
43632: LD_INT 3
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 4
43642: NEG
43643: PUSH
43644: LD_INT 4
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 4
43654: NEG
43655: PUSH
43656: LD_INT 5
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 5
43666: NEG
43667: PUSH
43668: LD_INT 4
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 5
43678: NEG
43679: PUSH
43680: LD_INT 5
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 5
43690: NEG
43691: PUSH
43692: LD_INT 6
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 6
43702: NEG
43703: PUSH
43704: LD_INT 5
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 6
43714: NEG
43715: PUSH
43716: LD_INT 6
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43738: LD_ADDR_VAR 0 41
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: LD_INT 3
43760: NEG
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43782: LD_ADDR_VAR 0 42
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 3
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43823: LD_ADDR_VAR 0 43
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: LD_INT 3
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43863: LD_ADDR_VAR 0 44
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43904: LD_ADDR_VAR 0 45
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: LD_INT 0
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43948: LD_ADDR_VAR 0 46
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: LD_INT 3
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 3
43979: NEG
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43994: LD_ADDR_VAR 0 47
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: LD_INT 3
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 3
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44027: LD_ADDR_VAR 0 48
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44058: LD_ADDR_VAR 0 49
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 3
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44087: LD_ADDR_VAR 0 50
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 3
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 3
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44116: LD_ADDR_VAR 0 51
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44147: LD_ADDR_VAR 0 52
44151: PUSH
44152: LD_INT 3
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 3
44166: NEG
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44180: LD_ADDR_VAR 0 53
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 3
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44224: LD_ADDR_VAR 0 54
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 3
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44265: LD_ADDR_VAR 0 55
44269: PUSH
44270: LD_INT 3
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: LD_INT 3
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44305: LD_ADDR_VAR 0 56
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 3
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: LIST
44345: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44346: LD_ADDR_VAR 0 57
44350: PUSH
44351: LD_INT 2
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 3
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 3
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44390: LD_ADDR_VAR 0 58
44394: PUSH
44395: LD_INT 2
44397: NEG
44398: PUSH
44399: LD_INT 3
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: NEG
44422: PUSH
44423: LD_INT 3
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44436: LD_ADDR_VAR 0 59
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44480: LD_ADDR_VAR 0 60
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44521: LD_ADDR_VAR 0 61
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44561: LD_ADDR_VAR 0 62
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44602: LD_ADDR_VAR 0 63
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44646: LD_ADDR_VAR 0 64
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 2
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: ST_TO_ADDR
// end ; 2 :
44692: GO 47958
44694: LD_INT 2
44696: DOUBLE
44697: EQUAL
44698: IFTRUE 44702
44700: GO 47957
44702: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44703: LD_ADDR_VAR 0 29
44707: PUSH
44708: LD_INT 4
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 4
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 5
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 5
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 4
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 3
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 5
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 3
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 4
44823: PUSH
44824: LD_INT 3
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 4
44833: PUSH
44834: LD_INT 4
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: LD_INT 4
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 4
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 2
44883: PUSH
44884: LD_INT 4
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 4
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 3
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 4
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: LD_INT 5
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 5
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 4
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 5
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 3
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 3
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 4
45042: NEG
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 4
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 4
45065: NEG
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 4
45088: NEG
45089: PUSH
45090: LD_INT 4
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 5
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 3
45112: NEG
45113: PUSH
45114: LD_INT 4
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 3
45124: NEG
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 4
45136: NEG
45137: PUSH
45138: LD_INT 3
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 5
45148: NEG
45149: PUSH
45150: LD_INT 4
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 5
45160: NEG
45161: PUSH
45162: LD_INT 5
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: NEG
45173: PUSH
45174: LD_INT 5
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 5
45184: NEG
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45241: LD_ADDR_VAR 0 30
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 4
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: LD_INT 3
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 5
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 5
45278: PUSH
45279: LD_INT 5
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 4
45288: PUSH
45289: LD_INT 5
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 4
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 5
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 3
45328: PUSH
45329: LD_INT 5
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 4
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 4
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 4
45431: NEG
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 4
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 3
45454: NEG
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 3
45465: NEG
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 4
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 5
45487: NEG
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 5
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 5
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 3
45545: NEG
45546: PUSH
45547: LD_INT 4
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 3
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 4
45593: NEG
45594: PUSH
45595: LD_INT 3
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 4
45605: NEG
45606: PUSH
45607: LD_INT 4
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: LD_INT 4
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 4
45629: NEG
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 4
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 5
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 4
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 3
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 4
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: LD_INT 5
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: LD_INT 5
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45788: LD_ADDR_VAR 0 31
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 4
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 3
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 4
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: LD_INT 4
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: LD_INT 5
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 3
45899: NEG
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 4
45944: NEG
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 4
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 4
45967: NEG
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 2
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 4
45990: NEG
45991: PUSH
45992: LD_INT 4
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 4
46002: NEG
46003: PUSH
46004: LD_INT 5
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: NEG
46015: PUSH
46016: LD_INT 4
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 3
46026: NEG
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 4
46038: NEG
46039: PUSH
46040: LD_INT 3
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 5
46050: NEG
46051: PUSH
46052: LD_INT 4
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 5
46062: NEG
46063: PUSH
46064: LD_INT 5
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: LD_INT 5
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 5
46086: NEG
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 4
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 3
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 4
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 4
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 4
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 5
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 5
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 4
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: PUSH
46273: LD_INT 2
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 5
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46338: LD_ADDR_VAR 0 32
46342: PUSH
46343: LD_INT 4
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 4
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 3
46368: NEG
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 4
46390: NEG
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 5
46401: NEG
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 5
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 5
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 3
46447: NEG
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: LD_INT 4
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: LD_INT 3
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 3
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 4
46507: NEG
46508: PUSH
46509: LD_INT 3
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 4
46519: NEG
46520: PUSH
46521: LD_INT 4
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 4
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 4
46543: NEG
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 4
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 5
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 3
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 4
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 5
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: LD_INT 5
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 3
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 4
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 4
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 2
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 4
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 4
46750: PUSH
46751: LD_INT 4
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 4
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 5
46770: PUSH
46771: LD_INT 4
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 5
46780: PUSH
46781: LD_INT 5
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 4
46790: PUSH
46791: LD_INT 5
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 5
46820: PUSH
46821: LD_INT 3
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 5
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46885: LD_ADDR_VAR 0 33
46889: PUSH
46890: LD_INT 4
46892: NEG
46893: PUSH
46894: LD_INT 4
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 4
46904: NEG
46905: PUSH
46906: LD_INT 5
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 3
46916: NEG
46917: PUSH
46918: LD_INT 4
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: NEG
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 5
46952: NEG
46953: PUSH
46954: LD_INT 4
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 5
46964: NEG
46965: PUSH
46966: LD_INT 5
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: LD_INT 5
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 5
46988: NEG
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: LD_INT 4
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 3
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: LD_INT 4
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 4
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 4
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 4
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 5
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 5
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 4
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 3
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 5
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 4
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 4
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 4
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 2
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 4
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 3
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 4
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 5
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 5
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 4
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 5
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: LD_INT 3
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47423: LD_ADDR_VAR 0 34
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 4
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 5
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 4
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 3
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 4
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 5
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: LD_INT 5
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 4
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: LD_INT 2
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 4
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 4
47625: PUSH
47626: LD_INT 4
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 4
47635: PUSH
47636: LD_INT 3
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 5
47645: PUSH
47646: LD_INT 4
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 5
47655: PUSH
47656: LD_INT 5
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 4
47665: PUSH
47666: LD_INT 5
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: LD_INT 4
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 5
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 3
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: LD_INT 4
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 4
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 2
47787: PUSH
47788: LD_INT 4
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 4
47808: NEG
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 4
47819: NEG
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 4
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 5
47864: NEG
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 5
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 5
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: ST_TO_ADDR
// end ; end ;
47955: GO 47958
47957: POP
// case btype of b_depot , b_warehouse :
47958: LD_VAR 0 1
47962: PUSH
47963: LD_INT 0
47965: DOUBLE
47966: EQUAL
47967: IFTRUE 47977
47969: LD_INT 1
47971: DOUBLE
47972: EQUAL
47973: IFTRUE 47977
47975: GO 48178
47977: POP
// case nation of nation_american :
47978: LD_VAR 0 5
47982: PUSH
47983: LD_INT 1
47985: DOUBLE
47986: EQUAL
47987: IFTRUE 47991
47989: GO 48047
47991: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47992: LD_ADDR_VAR 0 9
47996: PUSH
47997: LD_VAR 0 11
48001: PUSH
48002: LD_VAR 0 12
48006: PUSH
48007: LD_VAR 0 13
48011: PUSH
48012: LD_VAR 0 14
48016: PUSH
48017: LD_VAR 0 15
48021: PUSH
48022: LD_VAR 0 16
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: PUSH
48035: LD_VAR 0 4
48039: PUSH
48040: LD_INT 1
48042: PLUS
48043: ARRAY
48044: ST_TO_ADDR
48045: GO 48176
48047: LD_INT 2
48049: DOUBLE
48050: EQUAL
48051: IFTRUE 48055
48053: GO 48111
48055: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48056: LD_ADDR_VAR 0 9
48060: PUSH
48061: LD_VAR 0 17
48065: PUSH
48066: LD_VAR 0 18
48070: PUSH
48071: LD_VAR 0 19
48075: PUSH
48076: LD_VAR 0 20
48080: PUSH
48081: LD_VAR 0 21
48085: PUSH
48086: LD_VAR 0 22
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: PUSH
48099: LD_VAR 0 4
48103: PUSH
48104: LD_INT 1
48106: PLUS
48107: ARRAY
48108: ST_TO_ADDR
48109: GO 48176
48111: LD_INT 3
48113: DOUBLE
48114: EQUAL
48115: IFTRUE 48119
48117: GO 48175
48119: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48120: LD_ADDR_VAR 0 9
48124: PUSH
48125: LD_VAR 0 23
48129: PUSH
48130: LD_VAR 0 24
48134: PUSH
48135: LD_VAR 0 25
48139: PUSH
48140: LD_VAR 0 26
48144: PUSH
48145: LD_VAR 0 27
48149: PUSH
48150: LD_VAR 0 28
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: PUSH
48163: LD_VAR 0 4
48167: PUSH
48168: LD_INT 1
48170: PLUS
48171: ARRAY
48172: ST_TO_ADDR
48173: GO 48176
48175: POP
48176: GO 48731
48178: LD_INT 2
48180: DOUBLE
48181: EQUAL
48182: IFTRUE 48192
48184: LD_INT 3
48186: DOUBLE
48187: EQUAL
48188: IFTRUE 48192
48190: GO 48248
48192: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48193: LD_ADDR_VAR 0 9
48197: PUSH
48198: LD_VAR 0 29
48202: PUSH
48203: LD_VAR 0 30
48207: PUSH
48208: LD_VAR 0 31
48212: PUSH
48213: LD_VAR 0 32
48217: PUSH
48218: LD_VAR 0 33
48222: PUSH
48223: LD_VAR 0 34
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: PUSH
48236: LD_VAR 0 4
48240: PUSH
48241: LD_INT 1
48243: PLUS
48244: ARRAY
48245: ST_TO_ADDR
48246: GO 48731
48248: LD_INT 16
48250: DOUBLE
48251: EQUAL
48252: IFTRUE 48310
48254: LD_INT 17
48256: DOUBLE
48257: EQUAL
48258: IFTRUE 48310
48260: LD_INT 18
48262: DOUBLE
48263: EQUAL
48264: IFTRUE 48310
48266: LD_INT 19
48268: DOUBLE
48269: EQUAL
48270: IFTRUE 48310
48272: LD_INT 22
48274: DOUBLE
48275: EQUAL
48276: IFTRUE 48310
48278: LD_INT 20
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48310
48284: LD_INT 21
48286: DOUBLE
48287: EQUAL
48288: IFTRUE 48310
48290: LD_INT 23
48292: DOUBLE
48293: EQUAL
48294: IFTRUE 48310
48296: LD_INT 24
48298: DOUBLE
48299: EQUAL
48300: IFTRUE 48310
48302: LD_INT 25
48304: DOUBLE
48305: EQUAL
48306: IFTRUE 48310
48308: GO 48366
48310: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48311: LD_ADDR_VAR 0 9
48315: PUSH
48316: LD_VAR 0 35
48320: PUSH
48321: LD_VAR 0 36
48325: PUSH
48326: LD_VAR 0 37
48330: PUSH
48331: LD_VAR 0 38
48335: PUSH
48336: LD_VAR 0 39
48340: PUSH
48341: LD_VAR 0 40
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: PUSH
48354: LD_VAR 0 4
48358: PUSH
48359: LD_INT 1
48361: PLUS
48362: ARRAY
48363: ST_TO_ADDR
48364: GO 48731
48366: LD_INT 6
48368: DOUBLE
48369: EQUAL
48370: IFTRUE 48422
48372: LD_INT 7
48374: DOUBLE
48375: EQUAL
48376: IFTRUE 48422
48378: LD_INT 8
48380: DOUBLE
48381: EQUAL
48382: IFTRUE 48422
48384: LD_INT 13
48386: DOUBLE
48387: EQUAL
48388: IFTRUE 48422
48390: LD_INT 12
48392: DOUBLE
48393: EQUAL
48394: IFTRUE 48422
48396: LD_INT 15
48398: DOUBLE
48399: EQUAL
48400: IFTRUE 48422
48402: LD_INT 11
48404: DOUBLE
48405: EQUAL
48406: IFTRUE 48422
48408: LD_INT 14
48410: DOUBLE
48411: EQUAL
48412: IFTRUE 48422
48414: LD_INT 10
48416: DOUBLE
48417: EQUAL
48418: IFTRUE 48422
48420: GO 48478
48422: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48423: LD_ADDR_VAR 0 9
48427: PUSH
48428: LD_VAR 0 41
48432: PUSH
48433: LD_VAR 0 42
48437: PUSH
48438: LD_VAR 0 43
48442: PUSH
48443: LD_VAR 0 44
48447: PUSH
48448: LD_VAR 0 45
48452: PUSH
48453: LD_VAR 0 46
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: PUSH
48466: LD_VAR 0 4
48470: PUSH
48471: LD_INT 1
48473: PLUS
48474: ARRAY
48475: ST_TO_ADDR
48476: GO 48731
48478: LD_INT 36
48480: DOUBLE
48481: EQUAL
48482: IFTRUE 48486
48484: GO 48542
48486: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48487: LD_ADDR_VAR 0 9
48491: PUSH
48492: LD_VAR 0 47
48496: PUSH
48497: LD_VAR 0 48
48501: PUSH
48502: LD_VAR 0 49
48506: PUSH
48507: LD_VAR 0 50
48511: PUSH
48512: LD_VAR 0 51
48516: PUSH
48517: LD_VAR 0 52
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: PUSH
48530: LD_VAR 0 4
48534: PUSH
48535: LD_INT 1
48537: PLUS
48538: ARRAY
48539: ST_TO_ADDR
48540: GO 48731
48542: LD_INT 4
48544: DOUBLE
48545: EQUAL
48546: IFTRUE 48568
48548: LD_INT 5
48550: DOUBLE
48551: EQUAL
48552: IFTRUE 48568
48554: LD_INT 34
48556: DOUBLE
48557: EQUAL
48558: IFTRUE 48568
48560: LD_INT 37
48562: DOUBLE
48563: EQUAL
48564: IFTRUE 48568
48566: GO 48624
48568: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48569: LD_ADDR_VAR 0 9
48573: PUSH
48574: LD_VAR 0 53
48578: PUSH
48579: LD_VAR 0 54
48583: PUSH
48584: LD_VAR 0 55
48588: PUSH
48589: LD_VAR 0 56
48593: PUSH
48594: LD_VAR 0 57
48598: PUSH
48599: LD_VAR 0 58
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: PUSH
48612: LD_VAR 0 4
48616: PUSH
48617: LD_INT 1
48619: PLUS
48620: ARRAY
48621: ST_TO_ADDR
48622: GO 48731
48624: LD_INT 31
48626: DOUBLE
48627: EQUAL
48628: IFTRUE 48674
48630: LD_INT 32
48632: DOUBLE
48633: EQUAL
48634: IFTRUE 48674
48636: LD_INT 33
48638: DOUBLE
48639: EQUAL
48640: IFTRUE 48674
48642: LD_INT 27
48644: DOUBLE
48645: EQUAL
48646: IFTRUE 48674
48648: LD_INT 26
48650: DOUBLE
48651: EQUAL
48652: IFTRUE 48674
48654: LD_INT 28
48656: DOUBLE
48657: EQUAL
48658: IFTRUE 48674
48660: LD_INT 29
48662: DOUBLE
48663: EQUAL
48664: IFTRUE 48674
48666: LD_INT 30
48668: DOUBLE
48669: EQUAL
48670: IFTRUE 48674
48672: GO 48730
48674: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48675: LD_ADDR_VAR 0 9
48679: PUSH
48680: LD_VAR 0 59
48684: PUSH
48685: LD_VAR 0 60
48689: PUSH
48690: LD_VAR 0 61
48694: PUSH
48695: LD_VAR 0 62
48699: PUSH
48700: LD_VAR 0 63
48704: PUSH
48705: LD_VAR 0 64
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: PUSH
48718: LD_VAR 0 4
48722: PUSH
48723: LD_INT 1
48725: PLUS
48726: ARRAY
48727: ST_TO_ADDR
48728: GO 48731
48730: POP
// temp_list2 = [ ] ;
48731: LD_ADDR_VAR 0 10
48735: PUSH
48736: EMPTY
48737: ST_TO_ADDR
// for i in temp_list do
48738: LD_ADDR_VAR 0 8
48742: PUSH
48743: LD_VAR 0 9
48747: PUSH
48748: FOR_IN
48749: IFFALSE 48801
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48751: LD_ADDR_VAR 0 10
48755: PUSH
48756: LD_VAR 0 10
48760: PUSH
48761: LD_VAR 0 8
48765: PUSH
48766: LD_INT 1
48768: ARRAY
48769: PUSH
48770: LD_VAR 0 2
48774: PLUS
48775: PUSH
48776: LD_VAR 0 8
48780: PUSH
48781: LD_INT 2
48783: ARRAY
48784: PUSH
48785: LD_VAR 0 3
48789: PLUS
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: EMPTY
48796: LIST
48797: ADD
48798: ST_TO_ADDR
48799: GO 48748
48801: POP
48802: POP
// result = temp_list2 ;
48803: LD_ADDR_VAR 0 7
48807: PUSH
48808: LD_VAR 0 10
48812: ST_TO_ADDR
// end ;
48813: LD_VAR 0 7
48817: RET
// export function EnemyInRange ( unit , dist ) ; begin
48818: LD_INT 0
48820: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48821: LD_ADDR_VAR 0 3
48825: PUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: CALL_OW 255
48835: PPUSH
48836: LD_VAR 0 1
48840: PPUSH
48841: CALL_OW 250
48845: PPUSH
48846: LD_VAR 0 1
48850: PPUSH
48851: CALL_OW 251
48855: PPUSH
48856: LD_VAR 0 2
48860: PPUSH
48861: CALL 22075 0 4
48865: PUSH
48866: LD_INT 4
48868: ARRAY
48869: ST_TO_ADDR
// end ;
48870: LD_VAR 0 3
48874: RET
// export function PlayerSeeMe ( unit ) ; begin
48875: LD_INT 0
48877: PPUSH
// result := See ( your_side , unit ) ;
48878: LD_ADDR_VAR 0 2
48882: PUSH
48883: LD_OWVAR 2
48887: PPUSH
48888: LD_VAR 0 1
48892: PPUSH
48893: CALL_OW 292
48897: ST_TO_ADDR
// end ;
48898: LD_VAR 0 2
48902: RET
// export function ReverseDir ( unit ) ; begin
48903: LD_INT 0
48905: PPUSH
// if not unit then
48906: LD_VAR 0 1
48910: NOT
48911: IFFALSE 48915
// exit ;
48913: GO 48938
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48915: LD_ADDR_VAR 0 2
48919: PUSH
48920: LD_VAR 0 1
48924: PPUSH
48925: CALL_OW 254
48929: PUSH
48930: LD_INT 3
48932: PLUS
48933: PUSH
48934: LD_INT 6
48936: MOD
48937: ST_TO_ADDR
// end ;
48938: LD_VAR 0 2
48942: RET
// export function ReverseArray ( array ) ; var i ; begin
48943: LD_INT 0
48945: PPUSH
48946: PPUSH
// if not array then
48947: LD_VAR 0 1
48951: NOT
48952: IFFALSE 48956
// exit ;
48954: GO 49011
// result := [ ] ;
48956: LD_ADDR_VAR 0 2
48960: PUSH
48961: EMPTY
48962: ST_TO_ADDR
// for i := array downto 1 do
48963: LD_ADDR_VAR 0 3
48967: PUSH
48968: DOUBLE
48969: LD_VAR 0 1
48973: INC
48974: ST_TO_ADDR
48975: LD_INT 1
48977: PUSH
48978: FOR_DOWNTO
48979: IFFALSE 49009
// result := Join ( result , array [ i ] ) ;
48981: LD_ADDR_VAR 0 2
48985: PUSH
48986: LD_VAR 0 2
48990: PPUSH
48991: LD_VAR 0 1
48995: PUSH
48996: LD_VAR 0 3
49000: ARRAY
49001: PPUSH
49002: CALL 53853 0 2
49006: ST_TO_ADDR
49007: GO 48978
49009: POP
49010: POP
// end ;
49011: LD_VAR 0 2
49015: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49016: LD_INT 0
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
// if not unit or not hexes then
49024: LD_VAR 0 1
49028: NOT
49029: IFTRUE 49038
49031: PUSH
49032: LD_VAR 0 2
49036: NOT
49037: OR
49038: IFFALSE 49042
// exit ;
49040: GO 49165
// dist := 9999 ;
49042: LD_ADDR_VAR 0 5
49046: PUSH
49047: LD_INT 9999
49049: ST_TO_ADDR
// for i = 1 to hexes do
49050: LD_ADDR_VAR 0 4
49054: PUSH
49055: DOUBLE
49056: LD_INT 1
49058: DEC
49059: ST_TO_ADDR
49060: LD_VAR 0 2
49064: PUSH
49065: FOR_TO
49066: IFFALSE 49153
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49068: LD_ADDR_VAR 0 6
49072: PUSH
49073: LD_VAR 0 1
49077: PPUSH
49078: LD_VAR 0 2
49082: PUSH
49083: LD_VAR 0 4
49087: ARRAY
49088: PUSH
49089: LD_INT 1
49091: ARRAY
49092: PPUSH
49093: LD_VAR 0 2
49097: PUSH
49098: LD_VAR 0 4
49102: ARRAY
49103: PUSH
49104: LD_INT 2
49106: ARRAY
49107: PPUSH
49108: CALL_OW 297
49112: ST_TO_ADDR
// if tdist < dist then
49113: LD_VAR 0 6
49117: PUSH
49118: LD_VAR 0 5
49122: LESS
49123: IFFALSE 49151
// begin hex := hexes [ i ] ;
49125: LD_ADDR_VAR 0 8
49129: PUSH
49130: LD_VAR 0 2
49134: PUSH
49135: LD_VAR 0 4
49139: ARRAY
49140: ST_TO_ADDR
// dist := tdist ;
49141: LD_ADDR_VAR 0 5
49145: PUSH
49146: LD_VAR 0 6
49150: ST_TO_ADDR
// end ; end ;
49151: GO 49065
49153: POP
49154: POP
// result := hex ;
49155: LD_ADDR_VAR 0 3
49159: PUSH
49160: LD_VAR 0 8
49164: ST_TO_ADDR
// end ;
49165: LD_VAR 0 3
49169: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49170: LD_INT 0
49172: PPUSH
49173: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49174: LD_VAR 0 1
49178: NOT
49179: IFTRUE 49218
49181: PUSH
49182: LD_VAR 0 1
49186: PUSH
49187: LD_INT 21
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 23
49199: PUSH
49200: LD_INT 2
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PPUSH
49211: CALL_OW 69
49215: IN
49216: NOT
49217: OR
49218: IFFALSE 49222
// exit ;
49220: GO 49269
// for i = 1 to 3 do
49222: LD_ADDR_VAR 0 3
49226: PUSH
49227: DOUBLE
49228: LD_INT 1
49230: DEC
49231: ST_TO_ADDR
49232: LD_INT 3
49234: PUSH
49235: FOR_TO
49236: IFFALSE 49267
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49238: LD_VAR 0 1
49242: PPUSH
49243: CALL_OW 250
49247: PPUSH
49248: LD_VAR 0 1
49252: PPUSH
49253: CALL_OW 251
49257: PPUSH
49258: LD_INT 1
49260: PPUSH
49261: CALL_OW 453
49265: GO 49235
49267: POP
49268: POP
// end ;
49269: LD_VAR 0 2
49273: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49274: LD_INT 0
49276: PPUSH
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
// if not unit or not enemy_unit then
49282: LD_VAR 0 1
49286: NOT
49287: IFTRUE 49296
49289: PUSH
49290: LD_VAR 0 2
49294: NOT
49295: OR
49296: IFFALSE 49300
// exit ;
49298: GO 49771
// if GetLives ( i ) < 250 then
49300: LD_VAR 0 4
49304: PPUSH
49305: CALL_OW 256
49309: PUSH
49310: LD_INT 250
49312: LESS
49313: IFFALSE 49326
// begin ComAutodestruct ( i ) ;
49315: LD_VAR 0 4
49319: PPUSH
49320: CALL 49170 0 1
// exit ;
49324: GO 49771
// end ; x := GetX ( enemy_unit ) ;
49326: LD_ADDR_VAR 0 7
49330: PUSH
49331: LD_VAR 0 2
49335: PPUSH
49336: CALL_OW 250
49340: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49341: LD_ADDR_VAR 0 8
49345: PUSH
49346: LD_VAR 0 2
49350: PPUSH
49351: CALL_OW 251
49355: ST_TO_ADDR
// if not x or not y then
49356: LD_VAR 0 7
49360: NOT
49361: IFTRUE 49370
49363: PUSH
49364: LD_VAR 0 8
49368: NOT
49369: OR
49370: IFFALSE 49374
// exit ;
49372: GO 49771
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49374: LD_ADDR_VAR 0 6
49378: PUSH
49379: LD_VAR 0 7
49383: PPUSH
49384: LD_INT 0
49386: PPUSH
49387: LD_INT 4
49389: PPUSH
49390: CALL_OW 272
49394: PUSH
49395: LD_VAR 0 8
49399: PPUSH
49400: LD_INT 0
49402: PPUSH
49403: LD_INT 4
49405: PPUSH
49406: CALL_OW 273
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_VAR 0 7
49419: PPUSH
49420: LD_INT 1
49422: PPUSH
49423: LD_INT 4
49425: PPUSH
49426: CALL_OW 272
49430: PUSH
49431: LD_VAR 0 8
49435: PPUSH
49436: LD_INT 1
49438: PPUSH
49439: LD_INT 4
49441: PPUSH
49442: CALL_OW 273
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_VAR 0 7
49455: PPUSH
49456: LD_INT 2
49458: PPUSH
49459: LD_INT 4
49461: PPUSH
49462: CALL_OW 272
49466: PUSH
49467: LD_VAR 0 8
49471: PPUSH
49472: LD_INT 2
49474: PPUSH
49475: LD_INT 4
49477: PPUSH
49478: CALL_OW 273
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_VAR 0 7
49491: PPUSH
49492: LD_INT 3
49494: PPUSH
49495: LD_INT 4
49497: PPUSH
49498: CALL_OW 272
49502: PUSH
49503: LD_VAR 0 8
49507: PPUSH
49508: LD_INT 3
49510: PPUSH
49511: LD_INT 4
49513: PPUSH
49514: CALL_OW 273
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_VAR 0 7
49527: PPUSH
49528: LD_INT 4
49530: PPUSH
49531: LD_INT 4
49533: PPUSH
49534: CALL_OW 272
49538: PUSH
49539: LD_VAR 0 8
49543: PPUSH
49544: LD_INT 4
49546: PPUSH
49547: LD_INT 4
49549: PPUSH
49550: CALL_OW 273
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_VAR 0 7
49563: PPUSH
49564: LD_INT 5
49566: PPUSH
49567: LD_INT 4
49569: PPUSH
49570: CALL_OW 272
49574: PUSH
49575: LD_VAR 0 8
49579: PPUSH
49580: LD_INT 5
49582: PPUSH
49583: LD_INT 4
49585: PPUSH
49586: CALL_OW 273
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// for i = tmp downto 1 do
49603: LD_ADDR_VAR 0 4
49607: PUSH
49608: DOUBLE
49609: LD_VAR 0 6
49613: INC
49614: ST_TO_ADDR
49615: LD_INT 1
49617: PUSH
49618: FOR_DOWNTO
49619: IFFALSE 49722
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49621: LD_VAR 0 6
49625: PUSH
49626: LD_VAR 0 4
49630: ARRAY
49631: PUSH
49632: LD_INT 1
49634: ARRAY
49635: PPUSH
49636: LD_VAR 0 6
49640: PUSH
49641: LD_VAR 0 4
49645: ARRAY
49646: PUSH
49647: LD_INT 2
49649: ARRAY
49650: PPUSH
49651: CALL_OW 488
49655: NOT
49656: IFTRUE 49698
49658: PUSH
49659: LD_VAR 0 6
49663: PUSH
49664: LD_VAR 0 4
49668: ARRAY
49669: PUSH
49670: LD_INT 1
49672: ARRAY
49673: PPUSH
49674: LD_VAR 0 6
49678: PUSH
49679: LD_VAR 0 4
49683: ARRAY
49684: PUSH
49685: LD_INT 2
49687: ARRAY
49688: PPUSH
49689: CALL_OW 428
49693: PUSH
49694: LD_INT 0
49696: NONEQUAL
49697: OR
49698: IFFALSE 49720
// tmp := Delete ( tmp , i ) ;
49700: LD_ADDR_VAR 0 6
49704: PUSH
49705: LD_VAR 0 6
49709: PPUSH
49710: LD_VAR 0 4
49714: PPUSH
49715: CALL_OW 3
49719: ST_TO_ADDR
49720: GO 49618
49722: POP
49723: POP
// j := GetClosestHex ( unit , tmp ) ;
49724: LD_ADDR_VAR 0 5
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: LD_VAR 0 6
49738: PPUSH
49739: CALL 49016 0 2
49743: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49744: LD_VAR 0 1
49748: PPUSH
49749: LD_VAR 0 5
49753: PUSH
49754: LD_INT 1
49756: ARRAY
49757: PPUSH
49758: LD_VAR 0 5
49762: PUSH
49763: LD_INT 2
49765: ARRAY
49766: PPUSH
49767: CALL_OW 111
// end ;
49771: LD_VAR 0 3
49775: RET
// export function PrepareApemanSoldier ( ) ; begin
49776: LD_INT 0
49778: PPUSH
// uc_nation := 0 ;
49779: LD_ADDR_OWVAR 21
49783: PUSH
49784: LD_INT 0
49786: ST_TO_ADDR
// hc_sex := sex_male ;
49787: LD_ADDR_OWVAR 27
49791: PUSH
49792: LD_INT 1
49794: ST_TO_ADDR
// hc_name :=  ;
49795: LD_ADDR_OWVAR 26
49799: PUSH
49800: LD_STRING 
49802: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49803: LD_ADDR_OWVAR 28
49807: PUSH
49808: LD_INT 15
49810: ST_TO_ADDR
// hc_gallery :=  ;
49811: LD_ADDR_OWVAR 33
49815: PUSH
49816: LD_STRING 
49818: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49819: LD_ADDR_OWVAR 31
49823: PUSH
49824: LD_INT 0
49826: PPUSH
49827: LD_INT 3
49829: PPUSH
49830: CALL_OW 12
49834: PUSH
49835: LD_INT 0
49837: PPUSH
49838: LD_INT 3
49840: PPUSH
49841: CALL_OW 12
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49858: LD_ADDR_OWVAR 29
49862: PUSH
49863: LD_INT 12
49865: PUSH
49866: LD_INT 12
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: ST_TO_ADDR
// end ;
49873: LD_VAR 0 1
49877: RET
// export function PrepareApemanEngineer ( ) ; begin
49878: LD_INT 0
49880: PPUSH
// uc_nation := 0 ;
49881: LD_ADDR_OWVAR 21
49885: PUSH
49886: LD_INT 0
49888: ST_TO_ADDR
// hc_sex := sex_male ;
49889: LD_ADDR_OWVAR 27
49893: PUSH
49894: LD_INT 1
49896: ST_TO_ADDR
// hc_name :=  ;
49897: LD_ADDR_OWVAR 26
49901: PUSH
49902: LD_STRING 
49904: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49905: LD_ADDR_OWVAR 28
49909: PUSH
49910: LD_INT 16
49912: ST_TO_ADDR
// hc_gallery :=  ;
49913: LD_ADDR_OWVAR 33
49917: PUSH
49918: LD_STRING 
49920: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49921: LD_ADDR_OWVAR 31
49925: PUSH
49926: LD_INT 0
49928: PPUSH
49929: LD_INT 3
49931: PPUSH
49932: CALL_OW 12
49936: PUSH
49937: LD_INT 0
49939: PPUSH
49940: LD_INT 3
49942: PPUSH
49943: CALL_OW 12
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49960: LD_ADDR_OWVAR 29
49964: PUSH
49965: LD_INT 12
49967: PUSH
49968: LD_INT 12
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: ST_TO_ADDR
// end ;
49975: LD_VAR 0 1
49979: RET
// export function PrepareApeman ( agressivity ) ; begin
49980: LD_INT 0
49982: PPUSH
// uc_side := 0 ;
49983: LD_ADDR_OWVAR 20
49987: PUSH
49988: LD_INT 0
49990: ST_TO_ADDR
// uc_nation := 0 ;
49991: LD_ADDR_OWVAR 21
49995: PUSH
49996: LD_INT 0
49998: ST_TO_ADDR
// hc_sex := sex_male ;
49999: LD_ADDR_OWVAR 27
50003: PUSH
50004: LD_INT 1
50006: ST_TO_ADDR
// hc_class := class_apeman ;
50007: LD_ADDR_OWVAR 28
50011: PUSH
50012: LD_INT 12
50014: ST_TO_ADDR
// hc_gallery :=  ;
50015: LD_ADDR_OWVAR 33
50019: PUSH
50020: LD_STRING 
50022: ST_TO_ADDR
// hc_name :=  ;
50023: LD_ADDR_OWVAR 26
50027: PUSH
50028: LD_STRING 
50030: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50031: LD_ADDR_OWVAR 29
50035: PUSH
50036: LD_INT 12
50038: PUSH
50039: LD_INT 12
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: ST_TO_ADDR
// if agressivity = 0 then
50046: LD_VAR 0 1
50050: PUSH
50051: LD_INT 0
50053: EQUAL
50054: IFFALSE 50066
// hc_agressivity := 0 else
50056: LD_ADDR_OWVAR 35
50060: PUSH
50061: LD_INT 0
50063: ST_TO_ADDR
50064: GO 50087
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50066: LD_ADDR_OWVAR 35
50070: PUSH
50071: LD_VAR 0 1
50075: NEG
50076: PPUSH
50077: LD_VAR 0 1
50081: PPUSH
50082: CALL_OW 12
50086: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50087: LD_ADDR_OWVAR 31
50091: PUSH
50092: LD_INT 0
50094: PPUSH
50095: LD_INT 3
50097: PPUSH
50098: CALL_OW 12
50102: PUSH
50103: LD_INT 0
50105: PPUSH
50106: LD_INT 3
50108: PPUSH
50109: CALL_OW 12
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// end ;
50126: LD_VAR 0 2
50130: RET
// export function PrepareTiger ( agressivity ) ; begin
50131: LD_INT 0
50133: PPUSH
// uc_side := 0 ;
50134: LD_ADDR_OWVAR 20
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// uc_nation := 0 ;
50142: LD_ADDR_OWVAR 21
50146: PUSH
50147: LD_INT 0
50149: ST_TO_ADDR
// InitHc ;
50150: CALL_OW 19
// hc_class := class_tiger ;
50154: LD_ADDR_OWVAR 28
50158: PUSH
50159: LD_INT 14
50161: ST_TO_ADDR
// hc_gallery :=  ;
50162: LD_ADDR_OWVAR 33
50166: PUSH
50167: LD_STRING 
50169: ST_TO_ADDR
// hc_name :=  ;
50170: LD_ADDR_OWVAR 26
50174: PUSH
50175: LD_STRING 
50177: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50178: LD_ADDR_OWVAR 35
50182: PUSH
50183: LD_VAR 0 1
50187: NEG
50188: PPUSH
50189: LD_VAR 0 1
50193: PPUSH
50194: CALL_OW 12
50198: ST_TO_ADDR
// end ;
50199: LD_VAR 0 2
50203: RET
// export function PrepareEnchidna ( ) ; begin
50204: LD_INT 0
50206: PPUSH
// uc_side := 0 ;
50207: LD_ADDR_OWVAR 20
50211: PUSH
50212: LD_INT 0
50214: ST_TO_ADDR
// uc_nation := 0 ;
50215: LD_ADDR_OWVAR 21
50219: PUSH
50220: LD_INT 0
50222: ST_TO_ADDR
// InitHc ;
50223: CALL_OW 19
// hc_class := class_baggie ;
50227: LD_ADDR_OWVAR 28
50231: PUSH
50232: LD_INT 13
50234: ST_TO_ADDR
// hc_gallery :=  ;
50235: LD_ADDR_OWVAR 33
50239: PUSH
50240: LD_STRING 
50242: ST_TO_ADDR
// hc_name :=  ;
50243: LD_ADDR_OWVAR 26
50247: PUSH
50248: LD_STRING 
50250: ST_TO_ADDR
// end ;
50251: LD_VAR 0 1
50255: RET
// export function PrepareFrog ( ) ; begin
50256: LD_INT 0
50258: PPUSH
// uc_side := 0 ;
50259: LD_ADDR_OWVAR 20
50263: PUSH
50264: LD_INT 0
50266: ST_TO_ADDR
// uc_nation := 0 ;
50267: LD_ADDR_OWVAR 21
50271: PUSH
50272: LD_INT 0
50274: ST_TO_ADDR
// InitHc ;
50275: CALL_OW 19
// hc_class := class_frog ;
50279: LD_ADDR_OWVAR 28
50283: PUSH
50284: LD_INT 19
50286: ST_TO_ADDR
// hc_gallery :=  ;
50287: LD_ADDR_OWVAR 33
50291: PUSH
50292: LD_STRING 
50294: ST_TO_ADDR
// hc_name :=  ;
50295: LD_ADDR_OWVAR 26
50299: PUSH
50300: LD_STRING 
50302: ST_TO_ADDR
// end ;
50303: LD_VAR 0 1
50307: RET
// export function PrepareFish ( ) ; begin
50308: LD_INT 0
50310: PPUSH
// uc_side := 0 ;
50311: LD_ADDR_OWVAR 20
50315: PUSH
50316: LD_INT 0
50318: ST_TO_ADDR
// uc_nation := 0 ;
50319: LD_ADDR_OWVAR 21
50323: PUSH
50324: LD_INT 0
50326: ST_TO_ADDR
// InitHc ;
50327: CALL_OW 19
// hc_class := class_fish ;
50331: LD_ADDR_OWVAR 28
50335: PUSH
50336: LD_INT 20
50338: ST_TO_ADDR
// hc_gallery :=  ;
50339: LD_ADDR_OWVAR 33
50343: PUSH
50344: LD_STRING 
50346: ST_TO_ADDR
// hc_name :=  ;
50347: LD_ADDR_OWVAR 26
50351: PUSH
50352: LD_STRING 
50354: ST_TO_ADDR
// end ;
50355: LD_VAR 0 1
50359: RET
// export function PrepareBird ( ) ; begin
50360: LD_INT 0
50362: PPUSH
// uc_side := 0 ;
50363: LD_ADDR_OWVAR 20
50367: PUSH
50368: LD_INT 0
50370: ST_TO_ADDR
// uc_nation := 0 ;
50371: LD_ADDR_OWVAR 21
50375: PUSH
50376: LD_INT 0
50378: ST_TO_ADDR
// InitHc ;
50379: CALL_OW 19
// hc_class := class_phororhacos ;
50383: LD_ADDR_OWVAR 28
50387: PUSH
50388: LD_INT 18
50390: ST_TO_ADDR
// hc_gallery :=  ;
50391: LD_ADDR_OWVAR 33
50395: PUSH
50396: LD_STRING 
50398: ST_TO_ADDR
// hc_name :=  ;
50399: LD_ADDR_OWVAR 26
50403: PUSH
50404: LD_STRING 
50406: ST_TO_ADDR
// end ;
50407: LD_VAR 0 1
50411: RET
// export function PrepareHorse ( ) ; begin
50412: LD_INT 0
50414: PPUSH
// uc_side := 0 ;
50415: LD_ADDR_OWVAR 20
50419: PUSH
50420: LD_INT 0
50422: ST_TO_ADDR
// uc_nation := 0 ;
50423: LD_ADDR_OWVAR 21
50427: PUSH
50428: LD_INT 0
50430: ST_TO_ADDR
// InitHc ;
50431: CALL_OW 19
// hc_class := class_horse ;
50435: LD_ADDR_OWVAR 28
50439: PUSH
50440: LD_INT 21
50442: ST_TO_ADDR
// hc_gallery :=  ;
50443: LD_ADDR_OWVAR 33
50447: PUSH
50448: LD_STRING 
50450: ST_TO_ADDR
// hc_name :=  ;
50451: LD_ADDR_OWVAR 26
50455: PUSH
50456: LD_STRING 
50458: ST_TO_ADDR
// end ;
50459: LD_VAR 0 1
50463: RET
// export function PrepareMastodont ( ) ; begin
50464: LD_INT 0
50466: PPUSH
// uc_side := 0 ;
50467: LD_ADDR_OWVAR 20
50471: PUSH
50472: LD_INT 0
50474: ST_TO_ADDR
// uc_nation := 0 ;
50475: LD_ADDR_OWVAR 21
50479: PUSH
50480: LD_INT 0
50482: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50483: LD_ADDR_OWVAR 37
50487: PUSH
50488: LD_INT 31
50490: ST_TO_ADDR
// vc_control := control_rider ;
50491: LD_ADDR_OWVAR 38
50495: PUSH
50496: LD_INT 4
50498: ST_TO_ADDR
// end ;
50499: LD_VAR 0 1
50503: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50504: LD_INT 0
50506: PPUSH
50507: PPUSH
50508: PPUSH
// uc_side = 0 ;
50509: LD_ADDR_OWVAR 20
50513: PUSH
50514: LD_INT 0
50516: ST_TO_ADDR
// uc_nation = 0 ;
50517: LD_ADDR_OWVAR 21
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
// InitHc_All ( ) ;
50525: CALL_OW 584
// InitVc ;
50529: CALL_OW 20
// if mastodonts then
50533: LD_VAR 0 6
50537: IFFALSE 50604
// for i = 1 to mastodonts do
50539: LD_ADDR_VAR 0 11
50543: PUSH
50544: DOUBLE
50545: LD_INT 1
50547: DEC
50548: ST_TO_ADDR
50549: LD_VAR 0 6
50553: PUSH
50554: FOR_TO
50555: IFFALSE 50602
// begin vc_chassis := 31 ;
50557: LD_ADDR_OWVAR 37
50561: PUSH
50562: LD_INT 31
50564: ST_TO_ADDR
// vc_control := control_rider ;
50565: LD_ADDR_OWVAR 38
50569: PUSH
50570: LD_INT 4
50572: ST_TO_ADDR
// animal := CreateVehicle ;
50573: LD_ADDR_VAR 0 12
50577: PUSH
50578: CALL_OW 45
50582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50583: LD_VAR 0 12
50587: PPUSH
50588: LD_VAR 0 8
50592: PPUSH
50593: LD_INT 0
50595: PPUSH
50596: CALL 52746 0 3
// end ;
50600: GO 50554
50602: POP
50603: POP
// if horses then
50604: LD_VAR 0 5
50608: IFFALSE 50675
// for i = 1 to horses do
50610: LD_ADDR_VAR 0 11
50614: PUSH
50615: DOUBLE
50616: LD_INT 1
50618: DEC
50619: ST_TO_ADDR
50620: LD_VAR 0 5
50624: PUSH
50625: FOR_TO
50626: IFFALSE 50673
// begin hc_class := 21 ;
50628: LD_ADDR_OWVAR 28
50632: PUSH
50633: LD_INT 21
50635: ST_TO_ADDR
// hc_gallery :=  ;
50636: LD_ADDR_OWVAR 33
50640: PUSH
50641: LD_STRING 
50643: ST_TO_ADDR
// animal := CreateHuman ;
50644: LD_ADDR_VAR 0 12
50648: PUSH
50649: CALL_OW 44
50653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50654: LD_VAR 0 12
50658: PPUSH
50659: LD_VAR 0 8
50663: PPUSH
50664: LD_INT 0
50666: PPUSH
50667: CALL 52746 0 3
// end ;
50671: GO 50625
50673: POP
50674: POP
// if birds then
50675: LD_VAR 0 1
50679: IFFALSE 50746
// for i = 1 to birds do
50681: LD_ADDR_VAR 0 11
50685: PUSH
50686: DOUBLE
50687: LD_INT 1
50689: DEC
50690: ST_TO_ADDR
50691: LD_VAR 0 1
50695: PUSH
50696: FOR_TO
50697: IFFALSE 50744
// begin hc_class := 18 ;
50699: LD_ADDR_OWVAR 28
50703: PUSH
50704: LD_INT 18
50706: ST_TO_ADDR
// hc_gallery =  ;
50707: LD_ADDR_OWVAR 33
50711: PUSH
50712: LD_STRING 
50714: ST_TO_ADDR
// animal := CreateHuman ;
50715: LD_ADDR_VAR 0 12
50719: PUSH
50720: CALL_OW 44
50724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50725: LD_VAR 0 12
50729: PPUSH
50730: LD_VAR 0 8
50734: PPUSH
50735: LD_INT 0
50737: PPUSH
50738: CALL 52746 0 3
// end ;
50742: GO 50696
50744: POP
50745: POP
// if tigers then
50746: LD_VAR 0 2
50750: IFFALSE 50834
// for i = 1 to tigers do
50752: LD_ADDR_VAR 0 11
50756: PUSH
50757: DOUBLE
50758: LD_INT 1
50760: DEC
50761: ST_TO_ADDR
50762: LD_VAR 0 2
50766: PUSH
50767: FOR_TO
50768: IFFALSE 50832
// begin hc_class = class_tiger ;
50770: LD_ADDR_OWVAR 28
50774: PUSH
50775: LD_INT 14
50777: ST_TO_ADDR
// hc_gallery =  ;
50778: LD_ADDR_OWVAR 33
50782: PUSH
50783: LD_STRING 
50785: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50786: LD_ADDR_OWVAR 35
50790: PUSH
50791: LD_INT 7
50793: NEG
50794: PPUSH
50795: LD_INT 7
50797: PPUSH
50798: CALL_OW 12
50802: ST_TO_ADDR
// animal := CreateHuman ;
50803: LD_ADDR_VAR 0 12
50807: PUSH
50808: CALL_OW 44
50812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50813: LD_VAR 0 12
50817: PPUSH
50818: LD_VAR 0 8
50822: PPUSH
50823: LD_INT 0
50825: PPUSH
50826: CALL 52746 0 3
// end ;
50830: GO 50767
50832: POP
50833: POP
// if apemans then
50834: LD_VAR 0 3
50838: IFFALSE 50961
// for i = 1 to apemans do
50840: LD_ADDR_VAR 0 11
50844: PUSH
50845: DOUBLE
50846: LD_INT 1
50848: DEC
50849: ST_TO_ADDR
50850: LD_VAR 0 3
50854: PUSH
50855: FOR_TO
50856: IFFALSE 50959
// begin hc_class = class_apeman ;
50858: LD_ADDR_OWVAR 28
50862: PUSH
50863: LD_INT 12
50865: ST_TO_ADDR
// hc_gallery =  ;
50866: LD_ADDR_OWVAR 33
50870: PUSH
50871: LD_STRING 
50873: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50874: LD_ADDR_OWVAR 35
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PPUSH
50883: LD_INT 2
50885: PPUSH
50886: CALL_OW 12
50890: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50891: LD_ADDR_OWVAR 31
50895: PUSH
50896: LD_INT 1
50898: PPUSH
50899: LD_INT 3
50901: PPUSH
50902: CALL_OW 12
50906: PUSH
50907: LD_INT 1
50909: PPUSH
50910: LD_INT 3
50912: PPUSH
50913: CALL_OW 12
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// animal := CreateHuman ;
50930: LD_ADDR_VAR 0 12
50934: PUSH
50935: CALL_OW 44
50939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50940: LD_VAR 0 12
50944: PPUSH
50945: LD_VAR 0 8
50949: PPUSH
50950: LD_INT 0
50952: PPUSH
50953: CALL 52746 0 3
// end ;
50957: GO 50855
50959: POP
50960: POP
// if enchidnas then
50961: LD_VAR 0 4
50965: IFFALSE 51032
// for i = 1 to enchidnas do
50967: LD_ADDR_VAR 0 11
50971: PUSH
50972: DOUBLE
50973: LD_INT 1
50975: DEC
50976: ST_TO_ADDR
50977: LD_VAR 0 4
50981: PUSH
50982: FOR_TO
50983: IFFALSE 51030
// begin hc_class = 13 ;
50985: LD_ADDR_OWVAR 28
50989: PUSH
50990: LD_INT 13
50992: ST_TO_ADDR
// hc_gallery =  ;
50993: LD_ADDR_OWVAR 33
50997: PUSH
50998: LD_STRING 
51000: ST_TO_ADDR
// animal := CreateHuman ;
51001: LD_ADDR_VAR 0 12
51005: PUSH
51006: CALL_OW 44
51010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51011: LD_VAR 0 12
51015: PPUSH
51016: LD_VAR 0 8
51020: PPUSH
51021: LD_INT 0
51023: PPUSH
51024: CALL 52746 0 3
// end ;
51028: GO 50982
51030: POP
51031: POP
// if fishes then
51032: LD_VAR 0 7
51036: IFFALSE 51103
// for i = 1 to fishes do
51038: LD_ADDR_VAR 0 11
51042: PUSH
51043: DOUBLE
51044: LD_INT 1
51046: DEC
51047: ST_TO_ADDR
51048: LD_VAR 0 7
51052: PUSH
51053: FOR_TO
51054: IFFALSE 51101
// begin hc_class = 20 ;
51056: LD_ADDR_OWVAR 28
51060: PUSH
51061: LD_INT 20
51063: ST_TO_ADDR
// hc_gallery =  ;
51064: LD_ADDR_OWVAR 33
51068: PUSH
51069: LD_STRING 
51071: ST_TO_ADDR
// animal := CreateHuman ;
51072: LD_ADDR_VAR 0 12
51076: PUSH
51077: CALL_OW 44
51081: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51082: LD_VAR 0 12
51086: PPUSH
51087: LD_VAR 0 9
51091: PPUSH
51092: LD_INT 0
51094: PPUSH
51095: CALL 52746 0 3
// end ;
51099: GO 51053
51101: POP
51102: POP
// end ;
51103: LD_VAR 0 10
51107: RET
// export function WantHeal ( sci , unit ) ; begin
51108: LD_INT 0
51110: PPUSH
// if GetTaskList ( sci ) > 0 then
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 437
51120: PUSH
51121: LD_INT 0
51123: GREATER
51124: IFFALSE 51196
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51126: LD_VAR 0 1
51130: PPUSH
51131: CALL_OW 437
51135: PUSH
51136: LD_INT 1
51138: ARRAY
51139: PUSH
51140: LD_INT 1
51142: ARRAY
51143: PUSH
51144: LD_STRING l
51146: EQUAL
51147: IFFALSE 51174
51149: PUSH
51150: LD_VAR 0 1
51154: PPUSH
51155: CALL_OW 437
51159: PUSH
51160: LD_INT 1
51162: ARRAY
51163: PUSH
51164: LD_INT 4
51166: ARRAY
51167: PUSH
51168: LD_VAR 0 2
51172: EQUAL
51173: AND
51174: IFFALSE 51186
// result := true else
51176: LD_ADDR_VAR 0 3
51180: PUSH
51181: LD_INT 1
51183: ST_TO_ADDR
51184: GO 51194
// result := false ;
51186: LD_ADDR_VAR 0 3
51190: PUSH
51191: LD_INT 0
51193: ST_TO_ADDR
// end else
51194: GO 51204
// result := false ;
51196: LD_ADDR_VAR 0 3
51200: PUSH
51201: LD_INT 0
51203: ST_TO_ADDR
// end ;
51204: LD_VAR 0 3
51208: RET
// export function HealTarget ( sci ) ; begin
51209: LD_INT 0
51211: PPUSH
// if not sci then
51212: LD_VAR 0 1
51216: NOT
51217: IFFALSE 51221
// exit ;
51219: GO 51286
// result := 0 ;
51221: LD_ADDR_VAR 0 2
51225: PUSH
51226: LD_INT 0
51228: ST_TO_ADDR
// if GetTaskList ( sci ) then
51229: LD_VAR 0 1
51233: PPUSH
51234: CALL_OW 437
51238: IFFALSE 51286
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51240: LD_VAR 0 1
51244: PPUSH
51245: CALL_OW 437
51249: PUSH
51250: LD_INT 1
51252: ARRAY
51253: PUSH
51254: LD_INT 1
51256: ARRAY
51257: PUSH
51258: LD_STRING l
51260: EQUAL
51261: IFFALSE 51286
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51263: LD_ADDR_VAR 0 2
51267: PUSH
51268: LD_VAR 0 1
51272: PPUSH
51273: CALL_OW 437
51277: PUSH
51278: LD_INT 1
51280: ARRAY
51281: PUSH
51282: LD_INT 4
51284: ARRAY
51285: ST_TO_ADDR
// end ;
51286: LD_VAR 0 2
51290: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51291: LD_INT 0
51293: PPUSH
51294: PPUSH
51295: PPUSH
51296: PPUSH
// if not base_units then
51297: LD_VAR 0 1
51301: NOT
51302: IFFALSE 51306
// exit ;
51304: GO 51393
// result := false ;
51306: LD_ADDR_VAR 0 2
51310: PUSH
51311: LD_INT 0
51313: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51314: LD_ADDR_VAR 0 5
51318: PUSH
51319: LD_VAR 0 1
51323: PPUSH
51324: LD_INT 21
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PPUSH
51334: CALL_OW 72
51338: ST_TO_ADDR
// if not tmp then
51339: LD_VAR 0 5
51343: NOT
51344: IFFALSE 51348
// exit ;
51346: GO 51393
// for i in tmp do
51348: LD_ADDR_VAR 0 3
51352: PUSH
51353: LD_VAR 0 5
51357: PUSH
51358: FOR_IN
51359: IFFALSE 51391
// begin result := EnemyInRange ( i , 22 ) ;
51361: LD_ADDR_VAR 0 2
51365: PUSH
51366: LD_VAR 0 3
51370: PPUSH
51371: LD_INT 22
51373: PPUSH
51374: CALL 48818 0 2
51378: ST_TO_ADDR
// if result then
51379: LD_VAR 0 2
51383: IFFALSE 51389
// exit ;
51385: POP
51386: POP
51387: GO 51393
// end ;
51389: GO 51358
51391: POP
51392: POP
// end ;
51393: LD_VAR 0 2
51397: RET
// export function FilterByTag ( units , tag ) ; begin
51398: LD_INT 0
51400: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_VAR 0 1
51410: PPUSH
51411: LD_INT 120
51413: PUSH
51414: LD_VAR 0 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PPUSH
51423: CALL_OW 72
51427: ST_TO_ADDR
// end ;
51428: LD_VAR 0 3
51432: RET
// export function IsDriver ( un ) ; begin
51433: LD_INT 0
51435: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51436: LD_ADDR_VAR 0 2
51440: PUSH
51441: LD_VAR 0 1
51445: PUSH
51446: LD_INT 55
51448: PUSH
51449: EMPTY
51450: LIST
51451: PPUSH
51452: CALL_OW 69
51456: IN
51457: ST_TO_ADDR
// end ;
51458: LD_VAR 0 2
51462: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51463: LD_INT 0
51465: PPUSH
51466: PPUSH
// list := [ ] ;
51467: LD_ADDR_VAR 0 5
51471: PUSH
51472: EMPTY
51473: ST_TO_ADDR
// case d of 0 :
51474: LD_VAR 0 3
51478: PUSH
51479: LD_INT 0
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51487
51485: GO 51620
51487: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51488: LD_ADDR_VAR 0 5
51492: PUSH
51493: LD_VAR 0 1
51497: PUSH
51498: LD_INT 4
51500: MINUS
51501: PUSH
51502: LD_VAR 0 2
51506: PUSH
51507: LD_INT 4
51509: MINUS
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: LIST
51518: PUSH
51519: LD_VAR 0 1
51523: PUSH
51524: LD_INT 3
51526: MINUS
51527: PUSH
51528: LD_VAR 0 2
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: PUSH
51541: LD_VAR 0 1
51545: PUSH
51546: LD_INT 4
51548: PLUS
51549: PUSH
51550: LD_VAR 0 2
51554: PUSH
51555: LD_INT 4
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: PUSH
51563: LD_VAR 0 1
51567: PUSH
51568: LD_INT 3
51570: PLUS
51571: PUSH
51572: LD_VAR 0 2
51576: PUSH
51577: LD_INT 3
51579: PLUS
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 1
51593: PUSH
51594: LD_VAR 0 2
51598: PUSH
51599: LD_INT 4
51601: PLUS
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// end ; 1 :
51618: GO 52318
51620: LD_INT 1
51622: DOUBLE
51623: EQUAL
51624: IFTRUE 51628
51626: GO 51761
51628: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51629: LD_ADDR_VAR 0 5
51633: PUSH
51634: LD_VAR 0 1
51638: PUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_INT 4
51646: MINUS
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: PUSH
51656: LD_VAR 0 1
51660: PUSH
51661: LD_INT 3
51663: MINUS
51664: PUSH
51665: LD_VAR 0 2
51669: PUSH
51670: LD_INT 3
51672: MINUS
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: LIST
51681: PUSH
51682: LD_VAR 0 1
51686: PUSH
51687: LD_INT 4
51689: MINUS
51690: PUSH
51691: LD_VAR 0 2
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: LD_VAR 0 1
51708: PUSH
51709: LD_VAR 0 2
51713: PUSH
51714: LD_INT 3
51716: PLUS
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_INT 4
51733: PLUS
51734: PUSH
51735: LD_VAR 0 2
51739: PUSH
51740: LD_INT 4
51742: PLUS
51743: PUSH
51744: LD_INT 5
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: LIST
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// end ; 2 :
51759: GO 52318
51761: LD_INT 2
51763: DOUBLE
51764: EQUAL
51765: IFTRUE 51769
51767: GO 51898
51769: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51770: LD_ADDR_VAR 0 5
51774: PUSH
51775: LD_VAR 0 1
51779: PUSH
51780: LD_VAR 0 2
51784: PUSH
51785: LD_INT 3
51787: MINUS
51788: PUSH
51789: LD_INT 3
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: PUSH
51797: LD_VAR 0 1
51801: PUSH
51802: LD_INT 4
51804: PLUS
51805: PUSH
51806: LD_VAR 0 2
51810: PUSH
51811: LD_INT 4
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: PUSH
51819: LD_VAR 0 1
51823: PUSH
51824: LD_VAR 0 2
51828: PUSH
51829: LD_INT 4
51831: PLUS
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: PUSH
51841: LD_VAR 0 1
51845: PUSH
51846: LD_INT 3
51848: MINUS
51849: PUSH
51850: LD_VAR 0 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: PUSH
51863: LD_VAR 0 1
51867: PUSH
51868: LD_INT 4
51870: MINUS
51871: PUSH
51872: LD_VAR 0 2
51876: PUSH
51877: LD_INT 4
51879: MINUS
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// end ; 3 :
51896: GO 52318
51898: LD_INT 3
51900: DOUBLE
51901: EQUAL
51902: IFTRUE 51906
51904: GO 52039
51906: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51907: LD_ADDR_VAR 0 5
51911: PUSH
51912: LD_VAR 0 1
51916: PUSH
51917: LD_INT 3
51919: PLUS
51920: PUSH
51921: LD_VAR 0 2
51925: PUSH
51926: LD_INT 4
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: PUSH
51934: LD_VAR 0 1
51938: PUSH
51939: LD_INT 4
51941: PLUS
51942: PUSH
51943: LD_VAR 0 2
51947: PUSH
51948: LD_INT 4
51950: PLUS
51951: PUSH
51952: LD_INT 5
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: LD_INT 4
51967: MINUS
51968: PUSH
51969: LD_VAR 0 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: PUSH
51982: LD_VAR 0 1
51986: PUSH
51987: LD_VAR 0 2
51991: PUSH
51992: LD_INT 4
51994: MINUS
51995: PUSH
51996: LD_INT 3
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: PUSH
52004: LD_VAR 0 1
52008: PUSH
52009: LD_INT 3
52011: MINUS
52012: PUSH
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 3
52020: MINUS
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: ST_TO_ADDR
// end ; 4 :
52037: GO 52318
52039: LD_INT 4
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52047
52045: GO 52180
52047: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52048: LD_ADDR_VAR 0 5
52052: PUSH
52053: LD_VAR 0 1
52057: PUSH
52058: LD_VAR 0 2
52062: PUSH
52063: LD_INT 4
52065: PLUS
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: PUSH
52075: LD_VAR 0 1
52079: PUSH
52080: LD_INT 3
52082: PLUS
52083: PUSH
52084: LD_VAR 0 2
52088: PUSH
52089: LD_INT 3
52091: PLUS
52092: PUSH
52093: LD_INT 5
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_INT 4
52108: PLUS
52109: PUSH
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 3
52135: MINUS
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 4
52152: MINUS
52153: PUSH
52154: LD_VAR 0 2
52158: PUSH
52159: LD_INT 4
52161: MINUS
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// end ; 5 :
52178: GO 52318
52180: LD_INT 5
52182: DOUBLE
52183: EQUAL
52184: IFTRUE 52188
52186: GO 52317
52188: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52189: LD_ADDR_VAR 0 5
52193: PUSH
52194: LD_VAR 0 1
52198: PUSH
52199: LD_INT 4
52201: MINUS
52202: PUSH
52203: LD_VAR 0 2
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: PUSH
52216: LD_VAR 0 1
52220: PUSH
52221: LD_VAR 0 2
52225: PUSH
52226: LD_INT 4
52228: MINUS
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: LD_VAR 0 1
52242: PUSH
52243: LD_INT 4
52245: PLUS
52246: PUSH
52247: LD_VAR 0 2
52251: PUSH
52252: LD_INT 4
52254: PLUS
52255: PUSH
52256: LD_INT 5
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: LIST
52263: PUSH
52264: LD_VAR 0 1
52268: PUSH
52269: LD_INT 3
52271: PLUS
52272: PUSH
52273: LD_VAR 0 2
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: PUSH
52286: LD_VAR 0 1
52290: PUSH
52291: LD_VAR 0 2
52295: PUSH
52296: LD_INT 3
52298: PLUS
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: LIST
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: ST_TO_ADDR
// end ; end ;
52315: GO 52318
52317: POP
// result := list ;
52318: LD_ADDR_VAR 0 4
52322: PUSH
52323: LD_VAR 0 5
52327: ST_TO_ADDR
// end ;
52328: LD_VAR 0 4
52332: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52333: LD_INT 0
52335: PPUSH
52336: PPUSH
52337: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52338: LD_VAR 0 1
52342: NOT
52343: IFTRUE 52371
52345: PUSH
52346: LD_VAR 0 2
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: LD_INT 4
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: IN
52369: NOT
52370: OR
52371: IFFALSE 52375
// exit ;
52373: GO 52458
// tmp := [ ] ;
52375: LD_ADDR_VAR 0 5
52379: PUSH
52380: EMPTY
52381: ST_TO_ADDR
// for i in units do
52382: LD_ADDR_VAR 0 4
52386: PUSH
52387: LD_VAR 0 1
52391: PUSH
52392: FOR_IN
52393: IFFALSE 52427
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52395: LD_ADDR_VAR 0 5
52399: PUSH
52400: LD_VAR 0 5
52404: PPUSH
52405: LD_VAR 0 4
52409: PPUSH
52410: LD_VAR 0 2
52414: PPUSH
52415: CALL_OW 259
52419: PPUSH
52420: CALL 53853 0 2
52424: ST_TO_ADDR
52425: GO 52392
52427: POP
52428: POP
// if not tmp then
52429: LD_VAR 0 5
52433: NOT
52434: IFFALSE 52438
// exit ;
52436: GO 52458
// result := SortListByListDesc ( units , tmp ) ;
52438: LD_ADDR_VAR 0 3
52442: PUSH
52443: LD_VAR 0 1
52447: PPUSH
52448: LD_VAR 0 5
52452: PPUSH
52453: CALL_OW 77
52457: ST_TO_ADDR
// end ;
52458: LD_VAR 0 3
52462: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52463: LD_INT 0
52465: PPUSH
52466: PPUSH
52467: PPUSH
// result := false ;
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_INT 0
52475: ST_TO_ADDR
// if not building then
52476: LD_VAR 0 2
52480: NOT
52481: IFFALSE 52485
// exit ;
52483: GO 52629
// x := GetX ( building ) ;
52485: LD_ADDR_VAR 0 4
52489: PUSH
52490: LD_VAR 0 2
52494: PPUSH
52495: CALL_OW 250
52499: ST_TO_ADDR
// y := GetY ( building ) ;
52500: LD_ADDR_VAR 0 5
52504: PUSH
52505: LD_VAR 0 2
52509: PPUSH
52510: CALL_OW 251
52514: ST_TO_ADDR
// if not x or not y then
52515: LD_VAR 0 4
52519: NOT
52520: IFTRUE 52529
52522: PUSH
52523: LD_VAR 0 5
52527: NOT
52528: OR
52529: IFFALSE 52533
// exit ;
52531: GO 52629
// if GetTaskList ( unit ) then
52533: LD_VAR 0 1
52537: PPUSH
52538: CALL_OW 437
52542: IFFALSE 52629
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52544: LD_STRING e
52546: PUSH
52547: LD_VAR 0 1
52551: PPUSH
52552: CALL_OW 437
52556: PUSH
52557: LD_INT 1
52559: ARRAY
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: EQUAL
52565: IFFALSE 52592
52567: PUSH
52568: LD_VAR 0 4
52572: PUSH
52573: LD_VAR 0 1
52577: PPUSH
52578: CALL_OW 437
52582: PUSH
52583: LD_INT 1
52585: ARRAY
52586: PUSH
52587: LD_INT 2
52589: ARRAY
52590: EQUAL
52591: AND
52592: IFFALSE 52619
52594: PUSH
52595: LD_VAR 0 5
52599: PUSH
52600: LD_VAR 0 1
52604: PPUSH
52605: CALL_OW 437
52609: PUSH
52610: LD_INT 1
52612: ARRAY
52613: PUSH
52614: LD_INT 3
52616: ARRAY
52617: EQUAL
52618: AND
52619: IFFALSE 52629
// result := true end ;
52621: LD_ADDR_VAR 0 3
52625: PUSH
52626: LD_INT 1
52628: ST_TO_ADDR
// end ;
52629: LD_VAR 0 3
52633: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52634: LD_INT 0
52636: PPUSH
// result := false ;
52637: LD_ADDR_VAR 0 4
52641: PUSH
52642: LD_INT 0
52644: ST_TO_ADDR
// if GetTaskList ( unit ) then
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 437
52654: IFFALSE 52741
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52656: LD_STRING M
52658: PUSH
52659: LD_VAR 0 1
52663: PPUSH
52664: CALL_OW 437
52668: PUSH
52669: LD_INT 1
52671: ARRAY
52672: PUSH
52673: LD_INT 1
52675: ARRAY
52676: EQUAL
52677: IFFALSE 52704
52679: PUSH
52680: LD_VAR 0 2
52684: PUSH
52685: LD_VAR 0 1
52689: PPUSH
52690: CALL_OW 437
52694: PUSH
52695: LD_INT 1
52697: ARRAY
52698: PUSH
52699: LD_INT 2
52701: ARRAY
52702: EQUAL
52703: AND
52704: IFFALSE 52731
52706: PUSH
52707: LD_VAR 0 3
52711: PUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: CALL_OW 437
52721: PUSH
52722: LD_INT 1
52724: ARRAY
52725: PUSH
52726: LD_INT 3
52728: ARRAY
52729: EQUAL
52730: AND
52731: IFFALSE 52741
// result := true ;
52733: LD_ADDR_VAR 0 4
52737: PUSH
52738: LD_INT 1
52740: ST_TO_ADDR
// end ; end ;
52741: LD_VAR 0 4
52745: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52746: LD_INT 0
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
// if not unit or not area then
52752: LD_VAR 0 1
52756: NOT
52757: IFTRUE 52766
52759: PUSH
52760: LD_VAR 0 2
52764: NOT
52765: OR
52766: IFFALSE 52770
// exit ;
52768: GO 52946
// tmp := AreaToList ( area , i ) ;
52770: LD_ADDR_VAR 0 6
52774: PUSH
52775: LD_VAR 0 2
52779: PPUSH
52780: LD_VAR 0 5
52784: PPUSH
52785: CALL_OW 517
52789: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52790: LD_ADDR_VAR 0 5
52794: PUSH
52795: DOUBLE
52796: LD_INT 1
52798: DEC
52799: ST_TO_ADDR
52800: LD_VAR 0 6
52804: PUSH
52805: LD_INT 1
52807: ARRAY
52808: PUSH
52809: FOR_TO
52810: IFFALSE 52944
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52812: LD_ADDR_VAR 0 7
52816: PUSH
52817: LD_VAR 0 6
52821: PUSH
52822: LD_INT 1
52824: ARRAY
52825: PUSH
52826: LD_VAR 0 5
52830: ARRAY
52831: PUSH
52832: LD_VAR 0 6
52836: PUSH
52837: LD_INT 2
52839: ARRAY
52840: PUSH
52841: LD_VAR 0 5
52845: ARRAY
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52851: LD_INT 92
52853: PUSH
52854: LD_VAR 0 7
52858: PUSH
52859: LD_INT 1
52861: ARRAY
52862: PUSH
52863: LD_VAR 0 7
52867: PUSH
52868: LD_INT 2
52870: ARRAY
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: PPUSH
52881: CALL_OW 69
52885: PUSH
52886: LD_INT 0
52888: EQUAL
52889: IFFALSE 52942
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52891: LD_VAR 0 1
52895: PPUSH
52896: LD_VAR 0 7
52900: PUSH
52901: LD_INT 1
52903: ARRAY
52904: PPUSH
52905: LD_VAR 0 7
52909: PUSH
52910: LD_INT 2
52912: ARRAY
52913: PPUSH
52914: LD_VAR 0 3
52918: PPUSH
52919: CALL_OW 48
// result := IsPlaced ( unit ) ;
52923: LD_ADDR_VAR 0 4
52927: PUSH
52928: LD_VAR 0 1
52932: PPUSH
52933: CALL_OW 305
52937: ST_TO_ADDR
// exit ;
52938: POP
52939: POP
52940: GO 52946
// end ; end ;
52942: GO 52809
52944: POP
52945: POP
// end ;
52946: LD_VAR 0 4
52950: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52951: LD_INT 0
52953: PPUSH
52954: PPUSH
52955: PPUSH
// if not side or side > 8 then
52956: LD_VAR 0 1
52960: NOT
52961: IFTRUE 52973
52963: PUSH
52964: LD_VAR 0 1
52968: PUSH
52969: LD_INT 8
52971: GREATER
52972: OR
52973: IFFALSE 52977
// exit ;
52975: GO 53164
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52977: LD_ADDR_VAR 0 4
52981: PUSH
52982: LD_INT 22
52984: PUSH
52985: LD_VAR 0 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 21
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PPUSH
53008: CALL_OW 69
53012: ST_TO_ADDR
// if not tmp then
53013: LD_VAR 0 4
53017: NOT
53018: IFFALSE 53022
// exit ;
53020: GO 53164
// enable_addtolog := true ;
53022: LD_ADDR_OWVAR 81
53026: PUSH
53027: LD_INT 1
53029: ST_TO_ADDR
// AddToLog ( [ ) ;
53030: LD_STRING [
53032: PPUSH
53033: CALL_OW 561
// for i in tmp do
53037: LD_ADDR_VAR 0 3
53041: PUSH
53042: LD_VAR 0 4
53046: PUSH
53047: FOR_IN
53048: IFFALSE 53155
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53050: LD_STRING [
53052: PUSH
53053: LD_VAR 0 3
53057: PPUSH
53058: CALL_OW 266
53062: STR
53063: PUSH
53064: LD_STRING , 
53066: STR
53067: PUSH
53068: LD_VAR 0 3
53072: PPUSH
53073: CALL_OW 250
53077: STR
53078: PUSH
53079: LD_STRING , 
53081: STR
53082: PUSH
53083: LD_VAR 0 3
53087: PPUSH
53088: CALL_OW 251
53092: STR
53093: PUSH
53094: LD_STRING , 
53096: STR
53097: PUSH
53098: LD_VAR 0 3
53102: PPUSH
53103: CALL_OW 254
53107: STR
53108: PUSH
53109: LD_STRING , 
53111: STR
53112: PUSH
53113: LD_VAR 0 3
53117: PPUSH
53118: LD_INT 1
53120: PPUSH
53121: CALL_OW 268
53125: STR
53126: PUSH
53127: LD_STRING , 
53129: STR
53130: PUSH
53131: LD_VAR 0 3
53135: PPUSH
53136: LD_INT 2
53138: PPUSH
53139: CALL_OW 268
53143: STR
53144: PUSH
53145: LD_STRING ],
53147: STR
53148: PPUSH
53149: CALL_OW 561
// end ;
53153: GO 53047
53155: POP
53156: POP
// AddToLog ( ]; ) ;
53157: LD_STRING ];
53159: PPUSH
53160: CALL_OW 561
// end ;
53164: LD_VAR 0 2
53168: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53169: LD_INT 0
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
53175: PPUSH
// if not area or not rate or not max then
53176: LD_VAR 0 1
53180: NOT
53181: IFTRUE 53190
53183: PUSH
53184: LD_VAR 0 2
53188: NOT
53189: OR
53190: IFTRUE 53199
53192: PUSH
53193: LD_VAR 0 4
53197: NOT
53198: OR
53199: IFFALSE 53203
// exit ;
53201: GO 53392
// while 1 do
53203: LD_INT 1
53205: IFFALSE 53392
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53207: LD_ADDR_VAR 0 9
53211: PUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: LD_INT 1
53219: PPUSH
53220: CALL_OW 287
53224: PUSH
53225: LD_INT 10
53227: MUL
53228: ST_TO_ADDR
// r := rate / 10 ;
53229: LD_ADDR_VAR 0 7
53233: PUSH
53234: LD_VAR 0 2
53238: PUSH
53239: LD_INT 10
53241: DIVREAL
53242: ST_TO_ADDR
// time := 1 1$00 ;
53243: LD_ADDR_VAR 0 8
53247: PUSH
53248: LD_INT 2100
53250: ST_TO_ADDR
// if amount < min then
53251: LD_VAR 0 9
53255: PUSH
53256: LD_VAR 0 3
53260: LESS
53261: IFFALSE 53279
// r := r * 2 else
53263: LD_ADDR_VAR 0 7
53267: PUSH
53268: LD_VAR 0 7
53272: PUSH
53273: LD_INT 2
53275: MUL
53276: ST_TO_ADDR
53277: GO 53305
// if amount > max then
53279: LD_VAR 0 9
53283: PUSH
53284: LD_VAR 0 4
53288: GREATER
53289: IFFALSE 53305
// r := r / 2 ;
53291: LD_ADDR_VAR 0 7
53295: PUSH
53296: LD_VAR 0 7
53300: PUSH
53301: LD_INT 2
53303: DIVREAL
53304: ST_TO_ADDR
// time := time / r ;
53305: LD_ADDR_VAR 0 8
53309: PUSH
53310: LD_VAR 0 8
53314: PUSH
53315: LD_VAR 0 7
53319: DIVREAL
53320: ST_TO_ADDR
// if time < 0 then
53321: LD_VAR 0 8
53325: PUSH
53326: LD_INT 0
53328: LESS
53329: IFFALSE 53346
// time := time * - 1 ;
53331: LD_ADDR_VAR 0 8
53335: PUSH
53336: LD_VAR 0 8
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: MUL
53345: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53346: LD_VAR 0 8
53350: PUSH
53351: LD_INT 35
53353: PPUSH
53354: LD_INT 875
53356: PPUSH
53357: CALL_OW 12
53361: PLUS
53362: PPUSH
53363: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53367: LD_INT 1
53369: PPUSH
53370: LD_INT 5
53372: PPUSH
53373: CALL_OW 12
53377: PPUSH
53378: LD_VAR 0 1
53382: PPUSH
53383: LD_INT 1
53385: PPUSH
53386: CALL_OW 55
// end ;
53390: GO 53203
// end ;
53392: LD_VAR 0 5
53396: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53397: LD_INT 0
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
53405: PPUSH
53406: PPUSH
// if not turrets or not factories then
53407: LD_VAR 0 1
53411: NOT
53412: IFTRUE 53421
53414: PUSH
53415: LD_VAR 0 2
53419: NOT
53420: OR
53421: IFFALSE 53425
// exit ;
53423: GO 53732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53425: LD_ADDR_VAR 0 10
53429: PUSH
53430: LD_INT 5
53432: PUSH
53433: LD_INT 6
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 5
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 24
53467: PUSH
53468: LD_INT 25
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 23
53477: PUSH
53478: LD_INT 27
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 42
53491: PUSH
53492: LD_INT 43
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 44
53501: PUSH
53502: LD_INT 46
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 45
53511: PUSH
53512: LD_INT 47
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// result := [ ] ;
53529: LD_ADDR_VAR 0 3
53533: PUSH
53534: EMPTY
53535: ST_TO_ADDR
// for i in turrets do
53536: LD_ADDR_VAR 0 4
53540: PUSH
53541: LD_VAR 0 1
53545: PUSH
53546: FOR_IN
53547: IFFALSE 53730
// begin nat := GetNation ( i ) ;
53549: LD_ADDR_VAR 0 7
53553: PUSH
53554: LD_VAR 0 4
53558: PPUSH
53559: CALL_OW 248
53563: ST_TO_ADDR
// weapon := 0 ;
53564: LD_ADDR_VAR 0 8
53568: PUSH
53569: LD_INT 0
53571: ST_TO_ADDR
// if not nat then
53572: LD_VAR 0 7
53576: NOT
53577: IFFALSE 53581
// continue ;
53579: GO 53546
// for j in list [ nat ] do
53581: LD_ADDR_VAR 0 5
53585: PUSH
53586: LD_VAR 0 10
53590: PUSH
53591: LD_VAR 0 7
53595: ARRAY
53596: PUSH
53597: FOR_IN
53598: IFFALSE 53639
// if GetBWeapon ( i ) = j [ 1 ] then
53600: LD_VAR 0 4
53604: PPUSH
53605: CALL_OW 269
53609: PUSH
53610: LD_VAR 0 5
53614: PUSH
53615: LD_INT 1
53617: ARRAY
53618: EQUAL
53619: IFFALSE 53637
// begin weapon := j [ 2 ] ;
53621: LD_ADDR_VAR 0 8
53625: PUSH
53626: LD_VAR 0 5
53630: PUSH
53631: LD_INT 2
53633: ARRAY
53634: ST_TO_ADDR
// break ;
53635: GO 53639
// end ;
53637: GO 53597
53639: POP
53640: POP
// if not weapon then
53641: LD_VAR 0 8
53645: NOT
53646: IFFALSE 53650
// continue ;
53648: GO 53546
// for k in factories do
53650: LD_ADDR_VAR 0 6
53654: PUSH
53655: LD_VAR 0 2
53659: PUSH
53660: FOR_IN
53661: IFFALSE 53726
// begin weapons := AvailableWeaponList ( k ) ;
53663: LD_ADDR_VAR 0 9
53667: PUSH
53668: LD_VAR 0 6
53672: PPUSH
53673: CALL_OW 478
53677: ST_TO_ADDR
// if not weapons then
53678: LD_VAR 0 9
53682: NOT
53683: IFFALSE 53687
// continue ;
53685: GO 53660
// if weapon in weapons then
53687: LD_VAR 0 8
53691: PUSH
53692: LD_VAR 0 9
53696: IN
53697: IFFALSE 53724
// begin result := [ i , weapon ] ;
53699: LD_ADDR_VAR 0 3
53703: PUSH
53704: LD_VAR 0 4
53708: PUSH
53709: LD_VAR 0 8
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: ST_TO_ADDR
// exit ;
53718: POP
53719: POP
53720: POP
53721: POP
53722: GO 53732
// end ; end ;
53724: GO 53660
53726: POP
53727: POP
// end ;
53728: GO 53546
53730: POP
53731: POP
// end ;
53732: LD_VAR 0 3
53736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53737: LD_INT 0
53739: PPUSH
// if not side or side > 8 then
53740: LD_VAR 0 3
53744: NOT
53745: IFTRUE 53757
53747: PUSH
53748: LD_VAR 0 3
53752: PUSH
53753: LD_INT 8
53755: GREATER
53756: OR
53757: IFFALSE 53761
// exit ;
53759: GO 53820
// if not range then
53761: LD_VAR 0 4
53765: NOT
53766: IFFALSE 53777
// range := - 12 ;
53768: LD_ADDR_VAR 0 4
53772: PUSH
53773: LD_INT 12
53775: NEG
53776: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53777: LD_VAR 0 1
53781: PPUSH
53782: LD_VAR 0 2
53786: PPUSH
53787: LD_VAR 0 3
53791: PPUSH
53792: LD_VAR 0 4
53796: PPUSH
53797: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_VAR 0 2
53810: PPUSH
53811: LD_VAR 0 3
53815: PPUSH
53816: CALL_OW 331
// end ;
53820: LD_VAR 0 5
53824: RET
// export function Video ( mode ) ; begin
53825: LD_INT 0
53827: PPUSH
// ingame_video = mode ;
53828: LD_ADDR_OWVAR 52
53832: PUSH
53833: LD_VAR 0 1
53837: ST_TO_ADDR
// interface_hidden = mode ;
53838: LD_ADDR_OWVAR 54
53842: PUSH
53843: LD_VAR 0 1
53847: ST_TO_ADDR
// end ;
53848: LD_VAR 0 2
53852: RET
// export function Join ( array , element ) ; begin
53853: LD_INT 0
53855: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53856: LD_ADDR_VAR 0 3
53860: PUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: LD_VAR 0 1
53870: PUSH
53871: LD_INT 1
53873: PLUS
53874: PPUSH
53875: LD_VAR 0 2
53879: PPUSH
53880: CALL_OW 1
53884: ST_TO_ADDR
// end ;
53885: LD_VAR 0 3
53889: RET
// export function JoinUnion ( array , element ) ; begin
53890: LD_INT 0
53892: PPUSH
// result := array union element ;
53893: LD_ADDR_VAR 0 3
53897: PUSH
53898: LD_VAR 0 1
53902: PUSH
53903: LD_VAR 0 2
53907: UNION
53908: ST_TO_ADDR
// end ;
53909: LD_VAR 0 3
53913: RET
// export function GetBehemoths ( side ) ; begin
53914: LD_INT 0
53916: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53917: LD_ADDR_VAR 0 2
53921: PUSH
53922: LD_INT 22
53924: PUSH
53925: LD_VAR 0 1
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 31
53936: PUSH
53937: LD_INT 25
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PPUSH
53948: CALL_OW 69
53952: ST_TO_ADDR
// end ;
53953: LD_VAR 0 2
53957: RET
// export function Shuffle ( array ) ; var i , index ; begin
53958: LD_INT 0
53960: PPUSH
53961: PPUSH
53962: PPUSH
// result := [ ] ;
53963: LD_ADDR_VAR 0 2
53967: PUSH
53968: EMPTY
53969: ST_TO_ADDR
// if not array then
53970: LD_VAR 0 1
53974: NOT
53975: IFFALSE 53979
// exit ;
53977: GO 54078
// Randomize ;
53979: CALL_OW 10
// for i = array downto 1 do
53983: LD_ADDR_VAR 0 3
53987: PUSH
53988: DOUBLE
53989: LD_VAR 0 1
53993: INC
53994: ST_TO_ADDR
53995: LD_INT 1
53997: PUSH
53998: FOR_DOWNTO
53999: IFFALSE 54076
// begin index := rand ( 1 , array ) ;
54001: LD_ADDR_VAR 0 4
54005: PUSH
54006: LD_INT 1
54008: PPUSH
54009: LD_VAR 0 1
54013: PPUSH
54014: CALL_OW 12
54018: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54019: LD_ADDR_VAR 0 2
54023: PUSH
54024: LD_VAR 0 2
54028: PPUSH
54029: LD_VAR 0 2
54033: PUSH
54034: LD_INT 1
54036: PLUS
54037: PPUSH
54038: LD_VAR 0 1
54042: PUSH
54043: LD_VAR 0 4
54047: ARRAY
54048: PPUSH
54049: CALL_OW 2
54053: ST_TO_ADDR
// array := Delete ( array , index ) ;
54054: LD_ADDR_VAR 0 1
54058: PUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: LD_VAR 0 4
54068: PPUSH
54069: CALL_OW 3
54073: ST_TO_ADDR
// end ;
54074: GO 53998
54076: POP
54077: POP
// end ;
54078: LD_VAR 0 2
54082: RET
// export function GetBaseMaterials ( base ) ; begin
54083: LD_INT 0
54085: PPUSH
// result := [ 0 , 0 , 0 ] ;
54086: LD_ADDR_VAR 0 2
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: LIST
54104: ST_TO_ADDR
// if not base then
54105: LD_VAR 0 1
54109: NOT
54110: IFFALSE 54114
// exit ;
54112: GO 54163
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54114: LD_ADDR_VAR 0 2
54118: PUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: LD_INT 1
54126: PPUSH
54127: CALL_OW 275
54131: PUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: LD_INT 2
54139: PPUSH
54140: CALL_OW 275
54144: PUSH
54145: LD_VAR 0 1
54149: PPUSH
54150: LD_INT 3
54152: PPUSH
54153: CALL_OW 275
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// end ;
54163: LD_VAR 0 2
54167: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54168: LD_INT 0
54170: PPUSH
54171: PPUSH
// result := array ;
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_VAR 0 1
54181: ST_TO_ADDR
// if size >= result then
54182: LD_VAR 0 2
54186: PUSH
54187: LD_VAR 0 3
54191: GREATEREQUAL
54192: IFFALSE 54196
// exit ;
54194: GO 54246
// if size then
54196: LD_VAR 0 2
54200: IFFALSE 54246
// for i := array downto size do
54202: LD_ADDR_VAR 0 4
54206: PUSH
54207: DOUBLE
54208: LD_VAR 0 1
54212: INC
54213: ST_TO_ADDR
54214: LD_VAR 0 2
54218: PUSH
54219: FOR_DOWNTO
54220: IFFALSE 54244
// result := Delete ( result , result ) ;
54222: LD_ADDR_VAR 0 3
54226: PUSH
54227: LD_VAR 0 3
54231: PPUSH
54232: LD_VAR 0 3
54236: PPUSH
54237: CALL_OW 3
54241: ST_TO_ADDR
54242: GO 54219
54244: POP
54245: POP
// end ;
54246: LD_VAR 0 3
54250: RET
// export function ComExit ( unit ) ; var tmp ; begin
54251: LD_INT 0
54253: PPUSH
54254: PPUSH
// if not IsInUnit ( unit ) then
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 310
54264: NOT
54265: IFFALSE 54269
// exit ;
54267: GO 54329
// tmp := IsInUnit ( unit ) ;
54269: LD_ADDR_VAR 0 3
54273: PUSH
54274: LD_VAR 0 1
54278: PPUSH
54279: CALL_OW 310
54283: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54284: LD_VAR 0 3
54288: PPUSH
54289: CALL_OW 247
54293: PUSH
54294: LD_INT 2
54296: EQUAL
54297: IFFALSE 54310
// ComExitVehicle ( unit ) else
54299: LD_VAR 0 1
54303: PPUSH
54304: CALL_OW 121
54308: GO 54319
// ComExitBuilding ( unit ) ;
54310: LD_VAR 0 1
54314: PPUSH
54315: CALL_OW 122
// result := tmp ;
54319: LD_ADDR_VAR 0 2
54323: PUSH
54324: LD_VAR 0 3
54328: ST_TO_ADDR
// end ;
54329: LD_VAR 0 2
54333: RET
// export function ComExitAll ( units ) ; var i ; begin
54334: LD_INT 0
54336: PPUSH
54337: PPUSH
// if not units then
54338: LD_VAR 0 1
54342: NOT
54343: IFFALSE 54347
// exit ;
54345: GO 54373
// for i in units do
54347: LD_ADDR_VAR 0 3
54351: PUSH
54352: LD_VAR 0 1
54356: PUSH
54357: FOR_IN
54358: IFFALSE 54371
// ComExit ( i ) ;
54360: LD_VAR 0 3
54364: PPUSH
54365: CALL 54251 0 1
54369: GO 54357
54371: POP
54372: POP
// end ;
54373: LD_VAR 0 2
54377: RET
// export function ResetHc ; begin
54378: LD_INT 0
54380: PPUSH
// InitHc ;
54381: CALL_OW 19
// hc_importance := 0 ;
54385: LD_ADDR_OWVAR 32
54389: PUSH
54390: LD_INT 0
54392: ST_TO_ADDR
// end ;
54393: LD_VAR 0 1
54397: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54398: LD_INT 0
54400: PPUSH
54401: PPUSH
54402: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54403: LD_ADDR_VAR 0 6
54407: PUSH
54408: LD_VAR 0 1
54412: PUSH
54413: LD_VAR 0 3
54417: PLUS
54418: PUSH
54419: LD_INT 2
54421: DIV
54422: ST_TO_ADDR
// if _x < 0 then
54423: LD_VAR 0 6
54427: PUSH
54428: LD_INT 0
54430: LESS
54431: IFFALSE 54448
// _x := _x * - 1 ;
54433: LD_ADDR_VAR 0 6
54437: PUSH
54438: LD_VAR 0 6
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: MUL
54447: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54448: LD_ADDR_VAR 0 7
54452: PUSH
54453: LD_VAR 0 2
54457: PUSH
54458: LD_VAR 0 4
54462: PLUS
54463: PUSH
54464: LD_INT 2
54466: DIV
54467: ST_TO_ADDR
// if _y < 0 then
54468: LD_VAR 0 7
54472: PUSH
54473: LD_INT 0
54475: LESS
54476: IFFALSE 54493
// _y := _y * - 1 ;
54478: LD_ADDR_VAR 0 7
54482: PUSH
54483: LD_VAR 0 7
54487: PUSH
54488: LD_INT 1
54490: NEG
54491: MUL
54492: ST_TO_ADDR
// result := [ _x , _y ] ;
54493: LD_ADDR_VAR 0 5
54497: PUSH
54498: LD_VAR 0 6
54502: PUSH
54503: LD_VAR 0 7
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// end ;
54512: LD_VAR 0 5
54516: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54517: LD_INT 0
54519: PPUSH
54520: PPUSH
54521: PPUSH
54522: PPUSH
// task := GetTaskList ( unit ) ;
54523: LD_ADDR_VAR 0 7
54527: PUSH
54528: LD_VAR 0 1
54532: PPUSH
54533: CALL_OW 437
54537: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54538: LD_VAR 0 7
54542: NOT
54543: IFFALSE 54562
54545: PUSH
54546: LD_VAR 0 1
54550: PPUSH
54551: LD_VAR 0 2
54555: PPUSH
54556: CALL_OW 308
54560: NOT
54561: AND
54562: IFFALSE 54566
// exit ;
54564: GO 54684
// if IsInArea ( unit , area ) then
54566: LD_VAR 0 1
54570: PPUSH
54571: LD_VAR 0 2
54575: PPUSH
54576: CALL_OW 308
54580: IFFALSE 54598
// begin ComMoveToArea ( unit , goAway ) ;
54582: LD_VAR 0 1
54586: PPUSH
54587: LD_VAR 0 3
54591: PPUSH
54592: CALL_OW 113
// exit ;
54596: GO 54684
// end ; if task [ 1 ] [ 1 ] <> M then
54598: LD_VAR 0 7
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PUSH
54607: LD_INT 1
54609: ARRAY
54610: PUSH
54611: LD_STRING M
54613: NONEQUAL
54614: IFFALSE 54618
// exit ;
54616: GO 54684
// x := task [ 1 ] [ 2 ] ;
54618: LD_ADDR_VAR 0 5
54622: PUSH
54623: LD_VAR 0 7
54627: PUSH
54628: LD_INT 1
54630: ARRAY
54631: PUSH
54632: LD_INT 2
54634: ARRAY
54635: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54636: LD_ADDR_VAR 0 6
54640: PUSH
54641: LD_VAR 0 7
54645: PUSH
54646: LD_INT 1
54648: ARRAY
54649: PUSH
54650: LD_INT 3
54652: ARRAY
54653: ST_TO_ADDR
// if InArea ( x , y , area ) then
54654: LD_VAR 0 5
54658: PPUSH
54659: LD_VAR 0 6
54663: PPUSH
54664: LD_VAR 0 2
54668: PPUSH
54669: CALL_OW 309
54673: IFFALSE 54684
// ComStop ( unit ) ;
54675: LD_VAR 0 1
54679: PPUSH
54680: CALL_OW 141
// end ;
54684: LD_VAR 0 4
54688: RET
// export function Abs ( value ) ; begin
54689: LD_INT 0
54691: PPUSH
// result := value ;
54692: LD_ADDR_VAR 0 2
54696: PUSH
54697: LD_VAR 0 1
54701: ST_TO_ADDR
// if value < 0 then
54702: LD_VAR 0 1
54706: PUSH
54707: LD_INT 0
54709: LESS
54710: IFFALSE 54727
// result := value * - 1 ;
54712: LD_ADDR_VAR 0 2
54716: PUSH
54717: LD_VAR 0 1
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: MUL
54726: ST_TO_ADDR
// end ;
54727: LD_VAR 0 2
54731: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54732: LD_INT 0
54734: PPUSH
54735: PPUSH
54736: PPUSH
54737: PPUSH
54738: PPUSH
54739: PPUSH
54740: PPUSH
54741: PPUSH
// if not unit or not building then
54742: LD_VAR 0 1
54746: NOT
54747: IFTRUE 54756
54749: PUSH
54750: LD_VAR 0 2
54754: NOT
54755: OR
54756: IFFALSE 54760
// exit ;
54758: GO 54988
// x := GetX ( building ) ;
54760: LD_ADDR_VAR 0 4
54764: PUSH
54765: LD_VAR 0 2
54769: PPUSH
54770: CALL_OW 250
54774: ST_TO_ADDR
// y := GetY ( building ) ;
54775: LD_ADDR_VAR 0 6
54779: PUSH
54780: LD_VAR 0 2
54784: PPUSH
54785: CALL_OW 251
54789: ST_TO_ADDR
// d := GetDir ( building ) ;
54790: LD_ADDR_VAR 0 8
54794: PUSH
54795: LD_VAR 0 2
54799: PPUSH
54800: CALL_OW 254
54804: ST_TO_ADDR
// r := 4 ;
54805: LD_ADDR_VAR 0 9
54809: PUSH
54810: LD_INT 4
54812: ST_TO_ADDR
// for i := 1 to 5 do
54813: LD_ADDR_VAR 0 10
54817: PUSH
54818: DOUBLE
54819: LD_INT 1
54821: DEC
54822: ST_TO_ADDR
54823: LD_INT 5
54825: PUSH
54826: FOR_TO
54827: IFFALSE 54986
// begin _x := ShiftX ( x , d , r + i ) ;
54829: LD_ADDR_VAR 0 5
54833: PUSH
54834: LD_VAR 0 4
54838: PPUSH
54839: LD_VAR 0 8
54843: PPUSH
54844: LD_VAR 0 9
54848: PUSH
54849: LD_VAR 0 10
54853: PLUS
54854: PPUSH
54855: CALL_OW 272
54859: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54860: LD_ADDR_VAR 0 7
54864: PUSH
54865: LD_VAR 0 6
54869: PPUSH
54870: LD_VAR 0 8
54874: PPUSH
54875: LD_VAR 0 9
54879: PUSH
54880: LD_VAR 0 10
54884: PLUS
54885: PPUSH
54886: CALL_OW 273
54890: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54891: LD_VAR 0 5
54895: PPUSH
54896: LD_VAR 0 7
54900: PPUSH
54901: CALL_OW 488
54905: IFFALSE 54940
54907: PUSH
54908: LD_VAR 0 5
54912: PPUSH
54913: LD_VAR 0 7
54917: PPUSH
54918: CALL_OW 428
54922: PPUSH
54923: CALL_OW 247
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: IN
54938: NOT
54939: AND
54940: IFFALSE 54984
// begin ComMoveXY ( unit , _x , _y ) ;
54942: LD_VAR 0 1
54946: PPUSH
54947: LD_VAR 0 5
54951: PPUSH
54952: LD_VAR 0 7
54956: PPUSH
54957: CALL_OW 111
// result := [ _x , _y ] ;
54961: LD_ADDR_VAR 0 3
54965: PUSH
54966: LD_VAR 0 5
54970: PUSH
54971: LD_VAR 0 7
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// exit ;
54980: POP
54981: POP
54982: GO 54988
// end ; end ;
54984: GO 54826
54986: POP
54987: POP
// end ;
54988: LD_VAR 0 3
54992: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54993: LD_INT 0
54995: PPUSH
54996: PPUSH
54997: PPUSH
// result := 0 ;
54998: LD_ADDR_VAR 0 3
55002: PUSH
55003: LD_INT 0
55005: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55006: LD_VAR 0 1
55010: PUSH
55011: LD_INT 0
55013: LESS
55014: IFTRUE 55026
55016: PUSH
55017: LD_VAR 0 1
55021: PUSH
55022: LD_INT 8
55024: GREATER
55025: OR
55026: IFTRUE 55038
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: LD_INT 0
55036: LESS
55037: OR
55038: IFTRUE 55050
55040: PUSH
55041: LD_VAR 0 2
55045: PUSH
55046: LD_INT 8
55048: GREATER
55049: OR
55050: IFFALSE 55054
// exit ;
55052: GO 55129
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55054: LD_ADDR_VAR 0 4
55058: PUSH
55059: LD_INT 22
55061: PUSH
55062: LD_VAR 0 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PPUSH
55071: CALL_OW 69
55075: PUSH
55076: FOR_IN
55077: IFFALSE 55127
// begin un := UnitShoot ( i ) ;
55079: LD_ADDR_VAR 0 5
55083: PUSH
55084: LD_VAR 0 4
55088: PPUSH
55089: CALL_OW 504
55093: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55094: LD_VAR 0 5
55098: PPUSH
55099: CALL_OW 255
55103: PUSH
55104: LD_VAR 0 1
55108: EQUAL
55109: IFFALSE 55125
// begin result := un ;
55111: LD_ADDR_VAR 0 3
55115: PUSH
55116: LD_VAR 0 5
55120: ST_TO_ADDR
// exit ;
55121: POP
55122: POP
55123: GO 55129
// end ; end ;
55125: GO 55076
55127: POP
55128: POP
// end ;
55129: LD_VAR 0 3
55133: RET
// export function GetCargoBay ( units ) ; begin
55134: LD_INT 0
55136: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55137: LD_ADDR_VAR 0 2
55141: PUSH
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 34
55152: PUSH
55153: LD_INT 12
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 34
55162: PUSH
55163: LD_INT 51
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 34
55172: PUSH
55173: LD_INT 32
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 34
55182: PUSH
55183: LD_INT 89
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: PPUSH
55197: CALL_OW 72
55201: ST_TO_ADDR
// end ;
55202: LD_VAR 0 2
55206: RET
// export function Negate ( value ) ; begin
55207: LD_INT 0
55209: PPUSH
// result := not value ;
55210: LD_ADDR_VAR 0 2
55214: PUSH
55215: LD_VAR 0 1
55219: NOT
55220: ST_TO_ADDR
// end ;
55221: LD_VAR 0 2
55225: RET
// export function Inc ( value ) ; begin
55226: LD_INT 0
55228: PPUSH
// result := value + 1 ;
55229: LD_ADDR_VAR 0 2
55233: PUSH
55234: LD_VAR 0 1
55238: PUSH
55239: LD_INT 1
55241: PLUS
55242: ST_TO_ADDR
// end ;
55243: LD_VAR 0 2
55247: RET
// export function Dec ( value ) ; begin
55248: LD_INT 0
55250: PPUSH
// result := value - 1 ;
55251: LD_ADDR_VAR 0 2
55255: PUSH
55256: LD_VAR 0 1
55260: PUSH
55261: LD_INT 1
55263: MINUS
55264: ST_TO_ADDR
// end ;
55265: LD_VAR 0 2
55269: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55270: LD_INT 0
55272: PPUSH
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55280: LD_VAR 0 1
55284: PPUSH
55285: LD_VAR 0 2
55289: PPUSH
55290: CALL_OW 488
55294: NOT
55295: IFTRUE 55314
55297: PUSH
55298: LD_VAR 0 3
55302: PPUSH
55303: LD_VAR 0 4
55307: PPUSH
55308: CALL_OW 488
55312: NOT
55313: OR
55314: IFFALSE 55327
// begin result := - 1 ;
55316: LD_ADDR_VAR 0 5
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: ST_TO_ADDR
// exit ;
55325: GO 55562
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55327: LD_ADDR_VAR 0 12
55331: PUSH
55332: LD_VAR 0 1
55336: PPUSH
55337: LD_VAR 0 2
55341: PPUSH
55342: LD_VAR 0 3
55346: PPUSH
55347: LD_VAR 0 4
55351: PPUSH
55352: CALL 54398 0 4
55356: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55357: LD_ADDR_VAR 0 11
55361: PUSH
55362: LD_VAR 0 1
55366: PPUSH
55367: LD_VAR 0 2
55371: PPUSH
55372: LD_VAR 0 12
55376: PUSH
55377: LD_INT 1
55379: ARRAY
55380: PPUSH
55381: LD_VAR 0 12
55385: PUSH
55386: LD_INT 2
55388: ARRAY
55389: PPUSH
55390: CALL_OW 298
55394: ST_TO_ADDR
// distance := 9999 ;
55395: LD_ADDR_VAR 0 10
55399: PUSH
55400: LD_INT 9999
55402: ST_TO_ADDR
// for i := 0 to 5 do
55403: LD_ADDR_VAR 0 6
55407: PUSH
55408: DOUBLE
55409: LD_INT 0
55411: DEC
55412: ST_TO_ADDR
55413: LD_INT 5
55415: PUSH
55416: FOR_TO
55417: IFFALSE 55560
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55419: LD_ADDR_VAR 0 7
55423: PUSH
55424: LD_VAR 0 1
55428: PPUSH
55429: LD_VAR 0 6
55433: PPUSH
55434: LD_VAR 0 11
55438: PPUSH
55439: CALL_OW 272
55443: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55444: LD_ADDR_VAR 0 8
55448: PUSH
55449: LD_VAR 0 2
55453: PPUSH
55454: LD_VAR 0 6
55458: PPUSH
55459: LD_VAR 0 11
55463: PPUSH
55464: CALL_OW 273
55468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55469: LD_VAR 0 7
55473: PPUSH
55474: LD_VAR 0 8
55478: PPUSH
55479: CALL_OW 488
55483: NOT
55484: IFFALSE 55488
// continue ;
55486: GO 55416
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55488: LD_ADDR_VAR 0 9
55492: PUSH
55493: LD_VAR 0 12
55497: PUSH
55498: LD_INT 1
55500: ARRAY
55501: PPUSH
55502: LD_VAR 0 12
55506: PUSH
55507: LD_INT 2
55509: ARRAY
55510: PPUSH
55511: LD_VAR 0 7
55515: PPUSH
55516: LD_VAR 0 8
55520: PPUSH
55521: CALL_OW 298
55525: ST_TO_ADDR
// if tmp < distance then
55526: LD_VAR 0 9
55530: PUSH
55531: LD_VAR 0 10
55535: LESS
55536: IFFALSE 55558
// begin result := i ;
55538: LD_ADDR_VAR 0 5
55542: PUSH
55543: LD_VAR 0 6
55547: ST_TO_ADDR
// distance := tmp ;
55548: LD_ADDR_VAR 0 10
55552: PUSH
55553: LD_VAR 0 9
55557: ST_TO_ADDR
// end ; end ;
55558: GO 55416
55560: POP
55561: POP
// end ;
55562: LD_VAR 0 5
55566: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
// if not driver or not IsInUnit ( driver ) then
55571: LD_VAR 0 1
55575: NOT
55576: IFTRUE 55590
55578: PUSH
55579: LD_VAR 0 1
55583: PPUSH
55584: CALL_OW 310
55588: NOT
55589: OR
55590: IFFALSE 55594
// exit ;
55592: GO 55684
// vehicle := IsInUnit ( driver ) ;
55594: LD_ADDR_VAR 0 3
55598: PUSH
55599: LD_VAR 0 1
55603: PPUSH
55604: CALL_OW 310
55608: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55609: LD_VAR 0 1
55613: PPUSH
55614: LD_STRING \
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: PUSH
55644: LD_STRING E
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_VAR 0 3
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PPUSH
55680: CALL_OW 446
// end ;
55684: LD_VAR 0 2
55688: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55689: LD_INT 0
55691: PPUSH
55692: PPUSH
// if not driver or not IsInUnit ( driver ) then
55693: LD_VAR 0 1
55697: NOT
55698: IFTRUE 55712
55700: PUSH
55701: LD_VAR 0 1
55705: PPUSH
55706: CALL_OW 310
55710: NOT
55711: OR
55712: IFFALSE 55716
// exit ;
55714: GO 55806
// vehicle := IsInUnit ( driver ) ;
55716: LD_ADDR_VAR 0 3
55720: PUSH
55721: LD_VAR 0 1
55725: PPUSH
55726: CALL_OW 310
55730: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55731: LD_VAR 0 1
55735: PPUSH
55736: LD_STRING \
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: PUSH
55766: LD_STRING E
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: LD_VAR 0 3
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PPUSH
55802: CALL_OW 447
// end ;
55806: LD_VAR 0 2
55810: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55811: LD_INT 0
55813: PPUSH
55814: PPUSH
55815: PPUSH
// tmp := [ ] ;
55816: LD_ADDR_VAR 0 5
55820: PUSH
55821: EMPTY
55822: ST_TO_ADDR
// for i in units do
55823: LD_ADDR_VAR 0 4
55827: PUSH
55828: LD_VAR 0 1
55832: PUSH
55833: FOR_IN
55834: IFFALSE 55872
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55836: LD_ADDR_VAR 0 5
55840: PUSH
55841: LD_VAR 0 5
55845: PPUSH
55846: LD_VAR 0 5
55850: PUSH
55851: LD_INT 1
55853: PLUS
55854: PPUSH
55855: LD_VAR 0 4
55859: PPUSH
55860: CALL_OW 256
55864: PPUSH
55865: CALL_OW 2
55869: ST_TO_ADDR
55870: GO 55833
55872: POP
55873: POP
// if not tmp then
55874: LD_VAR 0 5
55878: NOT
55879: IFFALSE 55883
// exit ;
55881: GO 55931
// if asc then
55883: LD_VAR 0 2
55887: IFFALSE 55911
// result := SortListByListAsc ( units , tmp ) else
55889: LD_ADDR_VAR 0 3
55893: PUSH
55894: LD_VAR 0 1
55898: PPUSH
55899: LD_VAR 0 5
55903: PPUSH
55904: CALL_OW 76
55908: ST_TO_ADDR
55909: GO 55931
// result := SortListByListDesc ( units , tmp ) ;
55911: LD_ADDR_VAR 0 3
55915: PUSH
55916: LD_VAR 0 1
55920: PPUSH
55921: LD_VAR 0 5
55925: PPUSH
55926: CALL_OW 77
55930: ST_TO_ADDR
// end ;
55931: LD_VAR 0 3
55935: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55936: LD_INT 0
55938: PPUSH
55939: PPUSH
// task := GetTaskList ( mech ) ;
55940: LD_ADDR_VAR 0 4
55944: PUSH
55945: LD_VAR 0 1
55949: PPUSH
55950: CALL_OW 437
55954: ST_TO_ADDR
// if not task then
55955: LD_VAR 0 4
55959: NOT
55960: IFFALSE 55964
// exit ;
55962: GO 56008
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55964: LD_ADDR_VAR 0 3
55968: PUSH
55969: LD_VAR 0 4
55973: PUSH
55974: LD_INT 1
55976: ARRAY
55977: PUSH
55978: LD_INT 1
55980: ARRAY
55981: PUSH
55982: LD_STRING r
55984: EQUAL
55985: IFFALSE 56007
55987: PUSH
55988: LD_VAR 0 4
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PUSH
55997: LD_INT 4
55999: ARRAY
56000: PUSH
56001: LD_VAR 0 2
56005: EQUAL
56006: AND
56007: ST_TO_ADDR
// end ;
56008: LD_VAR 0 3
56012: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56013: LD_INT 0
56015: PPUSH
// SetDir ( unit , d ) ;
56016: LD_VAR 0 1
56020: PPUSH
56021: LD_VAR 0 4
56025: PPUSH
56026: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56030: LD_ADDR_VAR 0 6
56034: PUSH
56035: LD_VAR 0 1
56039: PPUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: LD_VAR 0 3
56049: PPUSH
56050: LD_VAR 0 5
56054: PPUSH
56055: CALL_OW 48
56059: ST_TO_ADDR
// end ;
56060: LD_VAR 0 6
56064: RET
// export function ToNaturalNumber ( number ) ; begin
56065: LD_INT 0
56067: PPUSH
// result := number div 1 ;
56068: LD_ADDR_VAR 0 2
56072: PUSH
56073: LD_VAR 0 1
56077: PUSH
56078: LD_INT 1
56080: DIV
56081: ST_TO_ADDR
// if number < 0 then
56082: LD_VAR 0 1
56086: PUSH
56087: LD_INT 0
56089: LESS
56090: IFFALSE 56100
// result := 0 ;
56092: LD_ADDR_VAR 0 2
56096: PUSH
56097: LD_INT 0
56099: ST_TO_ADDR
// end ;
56100: LD_VAR 0 2
56104: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56105: LD_INT 0
56107: PPUSH
56108: PPUSH
56109: PPUSH
// if not buildings then
56110: LD_VAR 0 1
56114: NOT
56115: IFFALSE 56119
// exit ;
56117: GO 56234
// tmp := [ ] ;
56119: LD_ADDR_VAR 0 5
56123: PUSH
56124: EMPTY
56125: ST_TO_ADDR
// for b in buildings do
56126: LD_ADDR_VAR 0 4
56130: PUSH
56131: LD_VAR 0 1
56135: PUSH
56136: FOR_IN
56137: IFFALSE 56175
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56139: LD_ADDR_VAR 0 5
56143: PUSH
56144: LD_VAR 0 5
56148: PPUSH
56149: LD_VAR 0 5
56153: PUSH
56154: LD_INT 1
56156: PLUS
56157: PPUSH
56158: LD_VAR 0 4
56162: PPUSH
56163: CALL_OW 266
56167: PPUSH
56168: CALL_OW 1
56172: ST_TO_ADDR
56173: GO 56136
56175: POP
56176: POP
// if not tmp then
56177: LD_VAR 0 5
56181: NOT
56182: IFFALSE 56186
// exit ;
56184: GO 56234
// if asc then
56186: LD_VAR 0 2
56190: IFFALSE 56214
// result := SortListByListAsc ( buildings , tmp ) else
56192: LD_ADDR_VAR 0 3
56196: PUSH
56197: LD_VAR 0 1
56201: PPUSH
56202: LD_VAR 0 5
56206: PPUSH
56207: CALL_OW 76
56211: ST_TO_ADDR
56212: GO 56234
// result := SortListByListDesc ( buildings , tmp ) ;
56214: LD_ADDR_VAR 0 3
56218: PUSH
56219: LD_VAR 0 1
56223: PPUSH
56224: LD_VAR 0 5
56228: PPUSH
56229: CALL_OW 77
56233: ST_TO_ADDR
// end ;
56234: LD_VAR 0 3
56238: RET
// export function SortByClass ( units , class ) ; var un ; begin
56239: LD_INT 0
56241: PPUSH
56242: PPUSH
// if not units or not class then
56243: LD_VAR 0 1
56247: NOT
56248: IFTRUE 56257
56250: PUSH
56251: LD_VAR 0 2
56255: NOT
56256: OR
56257: IFFALSE 56261
// exit ;
56259: GO 56356
// result := [ ] ;
56261: LD_ADDR_VAR 0 3
56265: PUSH
56266: EMPTY
56267: ST_TO_ADDR
// for un in units do
56268: LD_ADDR_VAR 0 4
56272: PUSH
56273: LD_VAR 0 1
56277: PUSH
56278: FOR_IN
56279: IFFALSE 56354
// if GetClass ( un ) = class then
56281: LD_VAR 0 4
56285: PPUSH
56286: CALL_OW 257
56290: PUSH
56291: LD_VAR 0 2
56295: EQUAL
56296: IFFALSE 56323
// result := Insert ( result , 1 , un ) else
56298: LD_ADDR_VAR 0 3
56302: PUSH
56303: LD_VAR 0 3
56307: PPUSH
56308: LD_INT 1
56310: PPUSH
56311: LD_VAR 0 4
56315: PPUSH
56316: CALL_OW 2
56320: ST_TO_ADDR
56321: GO 56352
// result := Replace ( result , result + 1 , un ) ;
56323: LD_ADDR_VAR 0 3
56327: PUSH
56328: LD_VAR 0 3
56332: PPUSH
56333: LD_VAR 0 3
56337: PUSH
56338: LD_INT 1
56340: PLUS
56341: PPUSH
56342: LD_VAR 0 4
56346: PPUSH
56347: CALL_OW 1
56351: ST_TO_ADDR
56352: GO 56278
56354: POP
56355: POP
// end ;
56356: LD_VAR 0 3
56360: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56361: LD_INT 0
56363: PPUSH
56364: PPUSH
56365: PPUSH
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
// result := [ ] ;
56370: LD_ADDR_VAR 0 4
56374: PUSH
56375: EMPTY
56376: ST_TO_ADDR
// if x - r < 0 then
56377: LD_VAR 0 1
56381: PUSH
56382: LD_VAR 0 3
56386: MINUS
56387: PUSH
56388: LD_INT 0
56390: LESS
56391: IFFALSE 56403
// min_x := 0 else
56393: LD_ADDR_VAR 0 8
56397: PUSH
56398: LD_INT 0
56400: ST_TO_ADDR
56401: GO 56419
// min_x := x - r ;
56403: LD_ADDR_VAR 0 8
56407: PUSH
56408: LD_VAR 0 1
56412: PUSH
56413: LD_VAR 0 3
56417: MINUS
56418: ST_TO_ADDR
// if y - r < 0 then
56419: LD_VAR 0 2
56423: PUSH
56424: LD_VAR 0 3
56428: MINUS
56429: PUSH
56430: LD_INT 0
56432: LESS
56433: IFFALSE 56445
// min_y := 0 else
56435: LD_ADDR_VAR 0 7
56439: PUSH
56440: LD_INT 0
56442: ST_TO_ADDR
56443: GO 56461
// min_y := y - r ;
56445: LD_ADDR_VAR 0 7
56449: PUSH
56450: LD_VAR 0 2
56454: PUSH
56455: LD_VAR 0 3
56459: MINUS
56460: ST_TO_ADDR
// max_x := x + r ;
56461: LD_ADDR_VAR 0 9
56465: PUSH
56466: LD_VAR 0 1
56470: PUSH
56471: LD_VAR 0 3
56475: PLUS
56476: ST_TO_ADDR
// max_y := y + r ;
56477: LD_ADDR_VAR 0 10
56481: PUSH
56482: LD_VAR 0 2
56486: PUSH
56487: LD_VAR 0 3
56491: PLUS
56492: ST_TO_ADDR
// for _x = min_x to max_x do
56493: LD_ADDR_VAR 0 5
56497: PUSH
56498: DOUBLE
56499: LD_VAR 0 8
56503: DEC
56504: ST_TO_ADDR
56505: LD_VAR 0 9
56509: PUSH
56510: FOR_TO
56511: IFFALSE 56612
// for _y = min_y to max_y do
56513: LD_ADDR_VAR 0 6
56517: PUSH
56518: DOUBLE
56519: LD_VAR 0 7
56523: DEC
56524: ST_TO_ADDR
56525: LD_VAR 0 10
56529: PUSH
56530: FOR_TO
56531: IFFALSE 56608
// begin if not ValidHex ( _x , _y ) then
56533: LD_VAR 0 5
56537: PPUSH
56538: LD_VAR 0 6
56542: PPUSH
56543: CALL_OW 488
56547: NOT
56548: IFFALSE 56552
// continue ;
56550: GO 56530
// if GetResourceTypeXY ( _x , _y ) then
56552: LD_VAR 0 5
56556: PPUSH
56557: LD_VAR 0 6
56561: PPUSH
56562: CALL_OW 283
56566: IFFALSE 56606
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56568: LD_ADDR_VAR 0 4
56572: PUSH
56573: LD_VAR 0 4
56577: PPUSH
56578: LD_VAR 0 4
56582: PUSH
56583: LD_INT 1
56585: PLUS
56586: PPUSH
56587: LD_VAR 0 5
56591: PUSH
56592: LD_VAR 0 6
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PPUSH
56601: CALL_OW 1
56605: ST_TO_ADDR
// end ;
56606: GO 56530
56608: POP
56609: POP
56610: GO 56510
56612: POP
56613: POP
// end ;
56614: LD_VAR 0 4
56618: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56619: LD_INT 0
56621: PPUSH
56622: PPUSH
56623: PPUSH
56624: PPUSH
56625: PPUSH
56626: PPUSH
56627: PPUSH
56628: PPUSH
// if not units then
56629: LD_VAR 0 1
56633: NOT
56634: IFFALSE 56638
// exit ;
56636: GO 57170
// result := UnitFilter ( units , [ f_ok ] ) ;
56638: LD_ADDR_VAR 0 3
56642: PUSH
56643: LD_VAR 0 1
56647: PPUSH
56648: LD_INT 50
56650: PUSH
56651: EMPTY
56652: LIST
56653: PPUSH
56654: CALL_OW 72
56658: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56659: LD_ADDR_VAR 0 8
56663: PUSH
56664: LD_VAR 0 1
56668: PUSH
56669: LD_INT 1
56671: ARRAY
56672: PPUSH
56673: CALL_OW 255
56677: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56678: LD_ADDR_VAR 0 10
56682: PUSH
56683: LD_INT 29
56685: PUSH
56686: LD_INT 91
56688: PUSH
56689: LD_INT 49
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: ST_TO_ADDR
// if not result then
56697: LD_VAR 0 3
56701: NOT
56702: IFFALSE 56706
// exit ;
56704: GO 57170
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56706: LD_ADDR_VAR 0 5
56710: PUSH
56711: LD_INT 81
56713: PUSH
56714: LD_VAR 0 8
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PPUSH
56723: CALL_OW 69
56727: ST_TO_ADDR
// for i in result do
56728: LD_ADDR_VAR 0 4
56732: PUSH
56733: LD_VAR 0 3
56737: PUSH
56738: FOR_IN
56739: IFFALSE 57168
// begin tag := GetTag ( i ) + 1 ;
56741: LD_ADDR_VAR 0 9
56745: PUSH
56746: LD_VAR 0 4
56750: PPUSH
56751: CALL_OW 110
56755: PUSH
56756: LD_INT 1
56758: PLUS
56759: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56760: LD_ADDR_VAR 0 7
56764: PUSH
56765: LD_VAR 0 4
56769: PPUSH
56770: CALL_OW 250
56774: PPUSH
56775: LD_VAR 0 4
56779: PPUSH
56780: CALL_OW 251
56784: PPUSH
56785: LD_INT 4
56787: PPUSH
56788: CALL 56361 0 3
56792: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56793: LD_VAR 0 4
56797: PPUSH
56798: CALL_OW 247
56802: PUSH
56803: LD_INT 2
56805: EQUAL
56806: IFFALSE 56818
56808: PUSH
56809: LD_VAR 0 7
56813: PUSH
56814: LD_INT 2
56816: GREATER
56817: AND
56818: IFFALSE 56838
56820: PUSH
56821: LD_VAR 0 4
56825: PPUSH
56826: CALL_OW 264
56830: PUSH
56831: LD_VAR 0 10
56835: IN
56836: NOT
56837: AND
56838: IFFALSE 56877
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56840: LD_VAR 0 4
56844: PPUSH
56845: LD_VAR 0 7
56849: PUSH
56850: LD_INT 1
56852: ARRAY
56853: PUSH
56854: LD_INT 1
56856: ARRAY
56857: PPUSH
56858: LD_VAR 0 7
56862: PUSH
56863: LD_INT 1
56865: ARRAY
56866: PUSH
56867: LD_INT 2
56869: ARRAY
56870: PPUSH
56871: CALL_OW 116
56875: GO 57166
// if path > tag then
56877: LD_VAR 0 2
56881: PUSH
56882: LD_VAR 0 9
56886: GREATER
56887: IFFALSE 57095
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56889: LD_ADDR_VAR 0 6
56893: PUSH
56894: LD_VAR 0 5
56898: PPUSH
56899: LD_INT 91
56901: PUSH
56902: LD_VAR 0 4
56906: PUSH
56907: LD_INT 8
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: PPUSH
56915: CALL_OW 72
56919: ST_TO_ADDR
// if nearEnemy then
56920: LD_VAR 0 6
56924: IFFALSE 56993
// begin if GetWeapon ( i ) = ru_time_lapser then
56926: LD_VAR 0 4
56930: PPUSH
56931: CALL_OW 264
56935: PUSH
56936: LD_INT 49
56938: EQUAL
56939: IFFALSE 56967
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56941: LD_VAR 0 4
56945: PPUSH
56946: LD_VAR 0 6
56950: PPUSH
56951: LD_VAR 0 4
56955: PPUSH
56956: CALL_OW 74
56960: PPUSH
56961: CALL_OW 112
56965: GO 56991
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56967: LD_VAR 0 4
56971: PPUSH
56972: LD_VAR 0 6
56976: PPUSH
56977: LD_VAR 0 4
56981: PPUSH
56982: CALL_OW 74
56986: PPUSH
56987: CALL 58251 0 2
// end else
56991: GO 57093
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56993: LD_VAR 0 4
56997: PPUSH
56998: LD_VAR 0 2
57002: PUSH
57003: LD_VAR 0 9
57007: ARRAY
57008: PUSH
57009: LD_INT 1
57011: ARRAY
57012: PPUSH
57013: LD_VAR 0 2
57017: PUSH
57018: LD_VAR 0 9
57022: ARRAY
57023: PUSH
57024: LD_INT 2
57026: ARRAY
57027: PPUSH
57028: CALL_OW 297
57032: PUSH
57033: LD_INT 6
57035: GREATER
57036: IFFALSE 57079
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57038: LD_VAR 0 4
57042: PPUSH
57043: LD_VAR 0 2
57047: PUSH
57048: LD_VAR 0 9
57052: ARRAY
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_VAR 0 9
57067: ARRAY
57068: PUSH
57069: LD_INT 2
57071: ARRAY
57072: PPUSH
57073: CALL_OW 114
57077: GO 57093
// SetTag ( i , tag ) ;
57079: LD_VAR 0 4
57083: PPUSH
57084: LD_VAR 0 9
57088: PPUSH
57089: CALL_OW 109
// end else
57093: GO 57166
// if enemy then
57095: LD_VAR 0 5
57099: IFFALSE 57166
// begin if GetWeapon ( i ) = ru_time_lapser then
57101: LD_VAR 0 4
57105: PPUSH
57106: CALL_OW 264
57110: PUSH
57111: LD_INT 49
57113: EQUAL
57114: IFFALSE 57142
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57116: LD_VAR 0 4
57120: PPUSH
57121: LD_VAR 0 5
57125: PPUSH
57126: LD_VAR 0 4
57130: PPUSH
57131: CALL_OW 74
57135: PPUSH
57136: CALL_OW 112
57140: GO 57166
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57142: LD_VAR 0 4
57146: PPUSH
57147: LD_VAR 0 5
57151: PPUSH
57152: LD_VAR 0 4
57156: PPUSH
57157: CALL_OW 74
57161: PPUSH
57162: CALL 58251 0 2
// end ; end ;
57166: GO 56738
57168: POP
57169: POP
// end ;
57170: LD_VAR 0 3
57174: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57175: LD_INT 0
57177: PPUSH
57178: PPUSH
57179: PPUSH
// if not unit or IsInUnit ( unit ) then
57180: LD_VAR 0 1
57184: NOT
57185: IFTRUE 57198
57187: PUSH
57188: LD_VAR 0 1
57192: PPUSH
57193: CALL_OW 310
57197: OR
57198: IFFALSE 57202
// exit ;
57200: GO 57293
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57202: LD_ADDR_VAR 0 4
57206: PUSH
57207: LD_VAR 0 1
57211: PPUSH
57212: CALL_OW 250
57216: PPUSH
57217: LD_VAR 0 2
57221: PPUSH
57222: LD_INT 1
57224: PPUSH
57225: CALL_OW 272
57229: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57230: LD_ADDR_VAR 0 5
57234: PUSH
57235: LD_VAR 0 1
57239: PPUSH
57240: CALL_OW 251
57244: PPUSH
57245: LD_VAR 0 2
57249: PPUSH
57250: LD_INT 1
57252: PPUSH
57253: CALL_OW 273
57257: ST_TO_ADDR
// if ValidHex ( x , y ) then
57258: LD_VAR 0 4
57262: PPUSH
57263: LD_VAR 0 5
57267: PPUSH
57268: CALL_OW 488
57272: IFFALSE 57293
// ComTurnXY ( unit , x , y ) ;
57274: LD_VAR 0 1
57278: PPUSH
57279: LD_VAR 0 4
57283: PPUSH
57284: LD_VAR 0 5
57288: PPUSH
57289: CALL_OW 118
// end ;
57293: LD_VAR 0 3
57297: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57298: LD_INT 0
57300: PPUSH
57301: PPUSH
// result := false ;
57302: LD_ADDR_VAR 0 3
57306: PUSH
57307: LD_INT 0
57309: ST_TO_ADDR
// if not units then
57310: LD_VAR 0 2
57314: NOT
57315: IFFALSE 57319
// exit ;
57317: GO 57364
// for i in units do
57319: LD_ADDR_VAR 0 4
57323: PUSH
57324: LD_VAR 0 2
57328: PUSH
57329: FOR_IN
57330: IFFALSE 57362
// if See ( side , i ) then
57332: LD_VAR 0 1
57336: PPUSH
57337: LD_VAR 0 4
57341: PPUSH
57342: CALL_OW 292
57346: IFFALSE 57360
// begin result := true ;
57348: LD_ADDR_VAR 0 3
57352: PUSH
57353: LD_INT 1
57355: ST_TO_ADDR
// exit ;
57356: POP
57357: POP
57358: GO 57364
// end ;
57360: GO 57329
57362: POP
57363: POP
// end ;
57364: LD_VAR 0 3
57368: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57369: LD_INT 0
57371: PPUSH
57372: PPUSH
57373: PPUSH
57374: PPUSH
// if not unit or not points then
57375: LD_VAR 0 1
57379: NOT
57380: IFTRUE 57389
57382: PUSH
57383: LD_VAR 0 2
57387: NOT
57388: OR
57389: IFFALSE 57393
// exit ;
57391: GO 57483
// dist := 99999 ;
57393: LD_ADDR_VAR 0 5
57397: PUSH
57398: LD_INT 99999
57400: ST_TO_ADDR
// for i in points do
57401: LD_ADDR_VAR 0 4
57405: PUSH
57406: LD_VAR 0 2
57410: PUSH
57411: FOR_IN
57412: IFFALSE 57481
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57414: LD_ADDR_VAR 0 6
57418: PUSH
57419: LD_VAR 0 1
57423: PPUSH
57424: LD_VAR 0 4
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: LD_VAR 0 4
57437: PUSH
57438: LD_INT 2
57440: ARRAY
57441: PPUSH
57442: CALL_OW 297
57446: ST_TO_ADDR
// if tmpDist < dist then
57447: LD_VAR 0 6
57451: PUSH
57452: LD_VAR 0 5
57456: LESS
57457: IFFALSE 57479
// begin result := i ;
57459: LD_ADDR_VAR 0 3
57463: PUSH
57464: LD_VAR 0 4
57468: ST_TO_ADDR
// dist := tmpDist ;
57469: LD_ADDR_VAR 0 5
57473: PUSH
57474: LD_VAR 0 6
57478: ST_TO_ADDR
// end ; end ;
57479: GO 57411
57481: POP
57482: POP
// end ;
57483: LD_VAR 0 3
57487: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57488: LD_INT 0
57490: PPUSH
// uc_side := side ;
57491: LD_ADDR_OWVAR 20
57495: PUSH
57496: LD_VAR 0 1
57500: ST_TO_ADDR
// uc_nation := 3 ;
57501: LD_ADDR_OWVAR 21
57505: PUSH
57506: LD_INT 3
57508: ST_TO_ADDR
// vc_chassis := 25 ;
57509: LD_ADDR_OWVAR 37
57513: PUSH
57514: LD_INT 25
57516: ST_TO_ADDR
// vc_engine := engine_siberite ;
57517: LD_ADDR_OWVAR 39
57521: PUSH
57522: LD_INT 3
57524: ST_TO_ADDR
// vc_control := control_computer ;
57525: LD_ADDR_OWVAR 38
57529: PUSH
57530: LD_INT 3
57532: ST_TO_ADDR
// vc_weapon := 59 ;
57533: LD_ADDR_OWVAR 40
57537: PUSH
57538: LD_INT 59
57540: ST_TO_ADDR
// result := CreateVehicle ;
57541: LD_ADDR_VAR 0 5
57545: PUSH
57546: CALL_OW 45
57550: ST_TO_ADDR
// SetDir ( result , d ) ;
57551: LD_VAR 0 5
57555: PPUSH
57556: LD_VAR 0 4
57560: PPUSH
57561: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57565: LD_VAR 0 5
57569: PPUSH
57570: LD_VAR 0 2
57574: PPUSH
57575: LD_VAR 0 3
57579: PPUSH
57580: LD_INT 0
57582: PPUSH
57583: CALL_OW 48
// end ;
57587: LD_VAR 0 5
57591: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57592: LD_INT 0
57594: PPUSH
57595: PPUSH
57596: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57597: LD_ADDR_VAR 0 2
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57620: LD_VAR 0 1
57624: NOT
57625: IFTRUE 57658
57627: PUSH
57628: LD_VAR 0 1
57632: PPUSH
57633: CALL_OW 264
57637: PUSH
57638: LD_INT 12
57640: PUSH
57641: LD_INT 51
57643: PUSH
57644: LD_INT 32
57646: PUSH
57647: LD_INT 89
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: IN
57656: NOT
57657: OR
57658: IFFALSE 57662
// exit ;
57660: GO 57760
// for i := 1 to 3 do
57662: LD_ADDR_VAR 0 3
57666: PUSH
57667: DOUBLE
57668: LD_INT 1
57670: DEC
57671: ST_TO_ADDR
57672: LD_INT 3
57674: PUSH
57675: FOR_TO
57676: IFFALSE 57758
// begin tmp := GetCargo ( cargo , i ) ;
57678: LD_ADDR_VAR 0 4
57682: PUSH
57683: LD_VAR 0 1
57687: PPUSH
57688: LD_VAR 0 3
57692: PPUSH
57693: CALL_OW 289
57697: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57698: LD_ADDR_VAR 0 2
57702: PUSH
57703: LD_VAR 0 2
57707: PPUSH
57708: LD_VAR 0 3
57712: PPUSH
57713: LD_VAR 0 4
57717: PPUSH
57718: CALL_OW 1
57722: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57723: LD_ADDR_VAR 0 2
57727: PUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: LD_INT 4
57735: PPUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_INT 4
57743: ARRAY
57744: PUSH
57745: LD_VAR 0 4
57749: PLUS
57750: PPUSH
57751: CALL_OW 1
57755: ST_TO_ADDR
// end ;
57756: GO 57675
57758: POP
57759: POP
// end ;
57760: LD_VAR 0 2
57764: RET
// export function Length ( array ) ; begin
57765: LD_INT 0
57767: PPUSH
// result := array + 0 ;
57768: LD_ADDR_VAR 0 2
57772: PUSH
57773: LD_VAR 0 1
57777: PUSH
57778: LD_INT 0
57780: PLUS
57781: ST_TO_ADDR
// end ;
57782: LD_VAR 0 2
57786: RET
// export function PrepareArray ( array ) ; begin
57787: LD_INT 0
57789: PPUSH
// result := array diff 0 ;
57790: LD_ADDR_VAR 0 2
57794: PUSH
57795: LD_VAR 0 1
57799: PUSH
57800: LD_INT 0
57802: DIFF
57803: ST_TO_ADDR
// if not result [ 1 ] then
57804: LD_VAR 0 2
57808: PUSH
57809: LD_INT 1
57811: ARRAY
57812: NOT
57813: IFFALSE 57833
// result := Delete ( result , 1 ) ;
57815: LD_ADDR_VAR 0 2
57819: PUSH
57820: LD_VAR 0 2
57824: PPUSH
57825: LD_INT 1
57827: PPUSH
57828: CALL_OW 3
57832: ST_TO_ADDR
// end ;
57833: LD_VAR 0 2
57837: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57838: LD_INT 0
57840: PPUSH
57841: PPUSH
57842: PPUSH
57843: PPUSH
// sibRocketRange := 25 ;
57844: LD_ADDR_VAR 0 6
57848: PUSH
57849: LD_INT 25
57851: ST_TO_ADDR
// result := false ;
57852: LD_ADDR_VAR 0 4
57856: PUSH
57857: LD_INT 0
57859: ST_TO_ADDR
// for i := 0 to 5 do
57860: LD_ADDR_VAR 0 5
57864: PUSH
57865: DOUBLE
57866: LD_INT 0
57868: DEC
57869: ST_TO_ADDR
57870: LD_INT 5
57872: PUSH
57873: FOR_TO
57874: IFFALSE 57941
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57876: LD_VAR 0 1
57880: PPUSH
57881: LD_VAR 0 5
57885: PPUSH
57886: LD_VAR 0 6
57890: PPUSH
57891: CALL_OW 272
57895: PPUSH
57896: LD_VAR 0 2
57900: PPUSH
57901: LD_VAR 0 5
57905: PPUSH
57906: LD_VAR 0 6
57910: PPUSH
57911: CALL_OW 273
57915: PPUSH
57916: LD_VAR 0 3
57920: PPUSH
57921: CALL_OW 309
57925: IFFALSE 57939
// begin result := true ;
57927: LD_ADDR_VAR 0 4
57931: PUSH
57932: LD_INT 1
57934: ST_TO_ADDR
// exit ;
57935: POP
57936: POP
57937: GO 57943
// end ;
57939: GO 57873
57941: POP
57942: POP
// end ;
57943: LD_VAR 0 4
57947: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57948: LD_INT 0
57950: PPUSH
57951: PPUSH
57952: PPUSH
// if btype = b_depot then
57953: LD_VAR 0 2
57957: PUSH
57958: LD_INT 0
57960: EQUAL
57961: IFFALSE 57973
// begin result := true ;
57963: LD_ADDR_VAR 0 3
57967: PUSH
57968: LD_INT 1
57970: ST_TO_ADDR
// exit ;
57971: GO 58093
// end ; pom := GetBase ( depot ) ;
57973: LD_ADDR_VAR 0 4
57977: PUSH
57978: LD_VAR 0 1
57982: PPUSH
57983: CALL_OW 274
57987: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57988: LD_ADDR_VAR 0 5
57992: PUSH
57993: LD_VAR 0 2
57997: PPUSH
57998: LD_VAR 0 1
58002: PPUSH
58003: CALL_OW 248
58007: PPUSH
58008: CALL_OW 450
58012: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58013: LD_ADDR_VAR 0 3
58017: PUSH
58018: LD_VAR 0 4
58022: PPUSH
58023: LD_INT 1
58025: PPUSH
58026: CALL_OW 275
58030: PUSH
58031: LD_VAR 0 5
58035: PUSH
58036: LD_INT 1
58038: ARRAY
58039: GREATEREQUAL
58040: IFFALSE 58066
58042: PUSH
58043: LD_VAR 0 4
58047: PPUSH
58048: LD_INT 2
58050: PPUSH
58051: CALL_OW 275
58055: PUSH
58056: LD_VAR 0 5
58060: PUSH
58061: LD_INT 2
58063: ARRAY
58064: GREATEREQUAL
58065: AND
58066: IFFALSE 58092
58068: PUSH
58069: LD_VAR 0 4
58073: PPUSH
58074: LD_INT 3
58076: PPUSH
58077: CALL_OW 275
58081: PUSH
58082: LD_VAR 0 5
58086: PUSH
58087: LD_INT 3
58089: ARRAY
58090: GREATEREQUAL
58091: AND
58092: ST_TO_ADDR
// end ;
58093: LD_VAR 0 3
58097: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58098: LD_INT 0
58100: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58101: LD_VAR 0 1
58105: PPUSH
58106: LD_VAR 0 2
58110: PPUSH
58111: LD_INT 0
58113: PPUSH
58114: LD_INT 0
58116: PPUSH
58117: LD_INT 1
58119: PPUSH
58120: LD_INT 0
58122: PPUSH
58123: CALL_OW 587
// end ;
58127: LD_VAR 0 3
58131: RET
// export function CenterOnNow ( unit ) ; begin
58132: LD_INT 0
58134: PPUSH
// result := IsInUnit ( unit ) ;
58135: LD_ADDR_VAR 0 2
58139: PUSH
58140: LD_VAR 0 1
58144: PPUSH
58145: CALL_OW 310
58149: ST_TO_ADDR
// if not result then
58150: LD_VAR 0 2
58154: NOT
58155: IFFALSE 58167
// result := unit ;
58157: LD_ADDR_VAR 0 2
58161: PUSH
58162: LD_VAR 0 1
58166: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58167: LD_VAR 0 1
58171: PPUSH
58172: CALL_OW 87
// end ;
58176: LD_VAR 0 2
58180: RET
// export function ComMoveHex ( unit , hex ) ; begin
58181: LD_INT 0
58183: PPUSH
// if not hex then
58184: LD_VAR 0 2
58188: NOT
58189: IFFALSE 58193
// exit ;
58191: GO 58246
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58193: LD_VAR 0 2
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PPUSH
58202: LD_VAR 0 2
58206: PUSH
58207: LD_INT 2
58209: ARRAY
58210: PPUSH
58211: CALL_OW 428
58215: IFFALSE 58219
// exit ;
58217: GO 58246
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58219: LD_VAR 0 1
58223: PPUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 1
58231: ARRAY
58232: PPUSH
58233: LD_VAR 0 2
58237: PUSH
58238: LD_INT 2
58240: ARRAY
58241: PPUSH
58242: CALL_OW 111
// end ;
58246: LD_VAR 0 3
58250: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58251: LD_INT 0
58253: PPUSH
58254: PPUSH
58255: PPUSH
// if not unit or not enemy then
58256: LD_VAR 0 1
58260: NOT
58261: IFTRUE 58270
58263: PUSH
58264: LD_VAR 0 2
58268: NOT
58269: OR
58270: IFFALSE 58274
// exit ;
58272: GO 58400
// x := GetX ( enemy ) ;
58274: LD_ADDR_VAR 0 4
58278: PUSH
58279: LD_VAR 0 2
58283: PPUSH
58284: CALL_OW 250
58288: ST_TO_ADDR
// y := GetY ( enemy ) ;
58289: LD_ADDR_VAR 0 5
58293: PUSH
58294: LD_VAR 0 2
58298: PPUSH
58299: CALL_OW 251
58303: ST_TO_ADDR
// if ValidHex ( x , y ) then
58304: LD_VAR 0 4
58308: PPUSH
58309: LD_VAR 0 5
58313: PPUSH
58314: CALL_OW 488
58318: IFFALSE 58400
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58320: LD_VAR 0 2
58324: PPUSH
58325: CALL_OW 247
58329: PUSH
58330: LD_INT 3
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: IN
58340: IFTRUE 58363
58342: PUSH
58343: LD_VAR 0 1
58347: PPUSH
58348: CALL_OW 255
58352: PPUSH
58353: LD_VAR 0 2
58357: PPUSH
58358: CALL_OW 292
58362: OR
58363: IFFALSE 58381
// ComAttackUnit ( unit , enemy ) else
58365: LD_VAR 0 1
58369: PPUSH
58370: LD_VAR 0 2
58374: PPUSH
58375: CALL_OW 115
58379: GO 58400
// ComAgressiveMove ( unit , x , y ) ;
58381: LD_VAR 0 1
58385: PPUSH
58386: LD_VAR 0 4
58390: PPUSH
58391: LD_VAR 0 5
58395: PPUSH
58396: CALL_OW 114
// end ;
58400: LD_VAR 0 3
58404: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58405: LD_INT 0
58407: PPUSH
58408: PPUSH
58409: PPUSH
// list := AreaToList ( area , 0 ) ;
58410: LD_ADDR_VAR 0 5
58414: PUSH
58415: LD_VAR 0 1
58419: PPUSH
58420: LD_INT 0
58422: PPUSH
58423: CALL_OW 517
58427: ST_TO_ADDR
// if not list then
58428: LD_VAR 0 5
58432: NOT
58433: IFFALSE 58437
// exit ;
58435: GO 58567
// if all then
58437: LD_VAR 0 2
58441: IFFALSE 58529
// begin for i := 1 to list [ 1 ] do
58443: LD_ADDR_VAR 0 4
58447: PUSH
58448: DOUBLE
58449: LD_INT 1
58451: DEC
58452: ST_TO_ADDR
58453: LD_VAR 0 5
58457: PUSH
58458: LD_INT 1
58460: ARRAY
58461: PUSH
58462: FOR_TO
58463: IFFALSE 58525
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58465: LD_ADDR_VAR 0 3
58469: PUSH
58470: LD_VAR 0 3
58474: PPUSH
58475: LD_VAR 0 3
58479: PUSH
58480: LD_INT 1
58482: PLUS
58483: PPUSH
58484: LD_VAR 0 5
58488: PUSH
58489: LD_INT 1
58491: ARRAY
58492: PUSH
58493: LD_VAR 0 4
58497: ARRAY
58498: PUSH
58499: LD_VAR 0 5
58503: PUSH
58504: LD_INT 2
58506: ARRAY
58507: PUSH
58508: LD_VAR 0 4
58512: ARRAY
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PPUSH
58518: CALL_OW 1
58522: ST_TO_ADDR
58523: GO 58462
58525: POP
58526: POP
// exit ;
58527: GO 58567
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58529: LD_ADDR_VAR 0 3
58533: PUSH
58534: LD_VAR 0 5
58538: PUSH
58539: LD_INT 1
58541: ARRAY
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PUSH
58547: LD_VAR 0 5
58551: PUSH
58552: LD_INT 2
58554: ARRAY
58555: PUSH
58556: LD_INT 1
58558: ARRAY
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: EMPTY
58565: LIST
58566: ST_TO_ADDR
// end ;
58567: LD_VAR 0 3
58571: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
// list := AreaToList ( area , 0 ) ;
58576: LD_ADDR_VAR 0 4
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: LD_INT 0
58588: PPUSH
58589: CALL_OW 517
58593: ST_TO_ADDR
// if not list then
58594: LD_VAR 0 4
58598: NOT
58599: IFFALSE 58603
// exit ;
58601: GO 58644
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58603: LD_ADDR_VAR 0 3
58607: PUSH
58608: LD_VAR 0 4
58612: PUSH
58613: LD_INT 1
58615: ARRAY
58616: PUSH
58617: LD_INT 1
58619: ARRAY
58620: PUSH
58621: LD_VAR 0 4
58625: PUSH
58626: LD_INT 2
58628: ARRAY
58629: PUSH
58630: LD_INT 1
58632: ARRAY
58633: PUSH
58634: LD_VAR 0 2
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// end ;
58644: LD_VAR 0 3
58648: RET
// export function First ( array ) ; begin
58649: LD_INT 0
58651: PPUSH
// if not array then
58652: LD_VAR 0 1
58656: NOT
58657: IFFALSE 58661
// exit ;
58659: GO 58675
// result := array [ 1 ] ;
58661: LD_ADDR_VAR 0 2
58665: PUSH
58666: LD_VAR 0 1
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: ST_TO_ADDR
// end ;
58675: LD_VAR 0 2
58679: RET
// export function Last ( array ) ; begin
58680: LD_INT 0
58682: PPUSH
// if not array then
58683: LD_VAR 0 1
58687: NOT
58688: IFFALSE 58692
// exit ;
58690: GO 58708
// result := array [ array ] ;
58692: LD_ADDR_VAR 0 2
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_VAR 0 1
58706: ARRAY
58707: ST_TO_ADDR
// end ;
58708: LD_VAR 0 2
58712: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58713: LD_INT 0
58715: PPUSH
58716: PPUSH
// result := [ ] ;
58717: LD_ADDR_VAR 0 5
58721: PUSH
58722: EMPTY
58723: ST_TO_ADDR
// if not array then
58724: LD_VAR 0 1
58728: NOT
58729: IFFALSE 58733
// exit ;
58731: GO 58845
// for i := 1 to array do
58733: LD_ADDR_VAR 0 6
58737: PUSH
58738: DOUBLE
58739: LD_INT 1
58741: DEC
58742: ST_TO_ADDR
58743: LD_VAR 0 1
58747: PUSH
58748: FOR_TO
58749: IFFALSE 58843
// if array [ i ] [ index ] = value then
58751: LD_VAR 0 1
58755: PUSH
58756: LD_VAR 0 6
58760: ARRAY
58761: PUSH
58762: LD_VAR 0 2
58766: ARRAY
58767: PUSH
58768: LD_VAR 0 3
58772: EQUAL
58773: IFFALSE 58841
// begin if indexColumn then
58775: LD_VAR 0 4
58779: IFFALSE 58815
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58781: LD_ADDR_VAR 0 5
58785: PUSH
58786: LD_VAR 0 5
58790: PPUSH
58791: LD_VAR 0 1
58795: PUSH
58796: LD_VAR 0 6
58800: ARRAY
58801: PUSH
58802: LD_VAR 0 4
58806: ARRAY
58807: PPUSH
58808: CALL 53853 0 2
58812: ST_TO_ADDR
58813: GO 58841
// result := Join ( result , array [ i ] ) ;
58815: LD_ADDR_VAR 0 5
58819: PUSH
58820: LD_VAR 0 5
58824: PPUSH
58825: LD_VAR 0 1
58829: PUSH
58830: LD_VAR 0 6
58834: ARRAY
58835: PPUSH
58836: CALL 53853 0 2
58840: ST_TO_ADDR
// end ;
58841: GO 58748
58843: POP
58844: POP
// end ;
58845: LD_VAR 0 5
58849: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58850: LD_INT 0
58852: PPUSH
// if not vehicles or not parkingPoint then
58853: LD_VAR 0 1
58857: NOT
58858: IFTRUE 58867
58860: PUSH
58861: LD_VAR 0 2
58865: NOT
58866: OR
58867: IFFALSE 58871
// exit ;
58869: GO 58969
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58871: LD_ADDR_VAR 0 1
58875: PUSH
58876: LD_VAR 0 1
58880: PPUSH
58881: LD_INT 50
58883: PUSH
58884: EMPTY
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 92
58892: PUSH
58893: LD_VAR 0 2
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: PUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_INT 2
58909: ARRAY
58910: PUSH
58911: LD_INT 8
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PPUSH
58928: CALL_OW 72
58932: ST_TO_ADDR
// if not vehicles then
58933: LD_VAR 0 1
58937: NOT
58938: IFFALSE 58942
// exit ;
58940: GO 58969
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58942: LD_VAR 0 1
58946: PPUSH
58947: LD_VAR 0 2
58951: PUSH
58952: LD_INT 1
58954: ARRAY
58955: PPUSH
58956: LD_VAR 0 2
58960: PUSH
58961: LD_INT 2
58963: ARRAY
58964: PPUSH
58965: CALL_OW 111
// end ;
58969: LD_VAR 0 3
58973: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58974: LD_INT 0
58976: PPUSH
58977: PPUSH
58978: PPUSH
// if not side or not area then
58979: LD_VAR 0 1
58983: NOT
58984: IFTRUE 58993
58986: PUSH
58987: LD_VAR 0 2
58991: NOT
58992: OR
58993: IFFALSE 58997
// exit ;
58995: GO 59116
// tmp := AreaToList ( area , 0 ) ;
58997: LD_ADDR_VAR 0 5
59001: PUSH
59002: LD_VAR 0 2
59006: PPUSH
59007: LD_INT 0
59009: PPUSH
59010: CALL_OW 517
59014: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59015: LD_ADDR_VAR 0 4
59019: PUSH
59020: DOUBLE
59021: LD_INT 1
59023: DEC
59024: ST_TO_ADDR
59025: LD_VAR 0 5
59029: PUSH
59030: LD_INT 1
59032: ARRAY
59033: PUSH
59034: FOR_TO
59035: IFFALSE 59114
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59037: LD_VAR 0 5
59041: PUSH
59042: LD_INT 1
59044: ARRAY
59045: PUSH
59046: LD_VAR 0 4
59050: ARRAY
59051: PPUSH
59052: LD_VAR 0 5
59056: PUSH
59057: LD_INT 2
59059: ARRAY
59060: PUSH
59061: LD_VAR 0 4
59065: ARRAY
59066: PPUSH
59067: CALL_OW 351
59071: IFFALSE 59112
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59073: LD_VAR 0 5
59077: PUSH
59078: LD_INT 1
59080: ARRAY
59081: PUSH
59082: LD_VAR 0 4
59086: ARRAY
59087: PPUSH
59088: LD_VAR 0 5
59092: PUSH
59093: LD_INT 2
59095: ARRAY
59096: PUSH
59097: LD_VAR 0 4
59101: ARRAY
59102: PPUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL_OW 244
// end ;
59112: GO 59034
59114: POP
59115: POP
// end ;
59116: LD_VAR 0 3
59120: RET
// export function UniqueArray ( array ) ; var i ; begin
59121: LD_INT 0
59123: PPUSH
59124: PPUSH
// result := [ ] ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: EMPTY
59131: ST_TO_ADDR
// if not array then
59132: LD_VAR 0 1
59136: NOT
59137: IFFALSE 59141
// exit ;
59139: GO 59202
// for i := 1 to array do
59141: LD_ADDR_VAR 0 3
59145: PUSH
59146: DOUBLE
59147: LD_INT 1
59149: DEC
59150: ST_TO_ADDR
59151: LD_VAR 0 1
59155: PUSH
59156: FOR_TO
59157: IFFALSE 59200
// if not array [ i ] in result then
59159: LD_VAR 0 1
59163: PUSH
59164: LD_VAR 0 3
59168: ARRAY
59169: PUSH
59170: LD_VAR 0 2
59174: IN
59175: NOT
59176: IFFALSE 59198
// result := Join ( result , i ) ;
59178: LD_ADDR_VAR 0 2
59182: PUSH
59183: LD_VAR 0 2
59187: PPUSH
59188: LD_VAR 0 3
59192: PPUSH
59193: CALL 53853 0 2
59197: ST_TO_ADDR
59198: GO 59156
59200: POP
59201: POP
// end ; end_of_file
59202: LD_VAR 0 2
59206: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59207: LD_VAR 0 1
59211: PUSH
59212: LD_INT 200
59214: DOUBLE
59215: GREATEREQUAL
59216: IFFALSE 59224
59218: LD_INT 299
59220: DOUBLE
59221: LESSEQUAL
59222: IFTRUE 59226
59224: GO 59258
59226: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59227: LD_VAR 0 1
59231: PPUSH
59232: LD_VAR 0 2
59236: PPUSH
59237: LD_VAR 0 3
59241: PPUSH
59242: LD_VAR 0 4
59246: PPUSH
59247: LD_VAR 0 5
59251: PPUSH
59252: CALL 60120 0 5
59256: GO 59335
59258: LD_INT 300
59260: DOUBLE
59261: GREATEREQUAL
59262: IFFALSE 59270
59264: LD_INT 399
59266: DOUBLE
59267: LESSEQUAL
59268: IFTRUE 59272
59270: GO 59334
59272: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59273: LD_VAR 0 1
59277: PPUSH
59278: LD_VAR 0 2
59282: PPUSH
59283: LD_VAR 0 3
59287: PPUSH
59288: LD_VAR 0 4
59292: PPUSH
59293: LD_VAR 0 5
59297: PPUSH
59298: LD_VAR 0 6
59302: PPUSH
59303: LD_VAR 0 7
59307: PPUSH
59308: LD_VAR 0 8
59312: PPUSH
59313: LD_VAR 0 9
59317: PPUSH
59318: LD_VAR 0 10
59322: PPUSH
59323: LD_VAR 0 11
59327: PPUSH
59328: CALL 66441 0 11
59332: GO 59335
59334: POP
// end ;
59335: PPOPN 11
59337: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59338: LD_VAR 0 1
59342: PPUSH
59343: LD_VAR 0 2
59347: PPUSH
59348: LD_VAR 0 3
59352: PPUSH
59353: LD_VAR 0 4
59357: PPUSH
59358: LD_VAR 0 5
59362: PPUSH
59363: CALL 59420 0 5
// end ; end_of_file
59367: PPOPN 5
59369: END
// export function SOS_UnitDestroyed ( un ) ; begin
59370: LD_INT 0
59372: PPUSH
// ComRadiation ( un ) ;
59373: LD_VAR 0 1
59377: PPUSH
59378: CALL 60540 0 1
// end ;
59382: LD_VAR 0 2
59386: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59387: LD_INT 0
59389: PPUSH
// ComRadiation ( un ) ;
59390: LD_VAR 0 1
59394: PPUSH
59395: CALL 60540 0 1
// end ;
59399: LD_VAR 0 2
59403: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59404: LD_INT 0
59406: PPUSH
// end ;
59407: LD_VAR 0 4
59411: RET
// export function SOS_Command ( cmd ) ; begin
59412: LD_INT 0
59414: PPUSH
// end ;
59415: LD_VAR 0 2
59419: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59420: LD_INT 0
59422: PPUSH
// end ;
59423: LD_VAR 0 6
59427: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59428: LD_INT 0
59430: PPUSH
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
// if not vehicle or not factory then
59435: LD_VAR 0 1
59439: NOT
59440: IFTRUE 59449
59442: PUSH
59443: LD_VAR 0 2
59447: NOT
59448: OR
59449: IFFALSE 59453
// exit ;
59451: GO 60115
// weapon := GetWeapon ( vehicle ) ;
59453: LD_ADDR_VAR 0 7
59457: PUSH
59458: LD_VAR 0 1
59462: PPUSH
59463: CALL_OW 264
59467: ST_TO_ADDR
// if weapon = ar_miner then
59468: LD_VAR 0 7
59472: PUSH
59473: LD_INT 81
59475: EQUAL
59476: IFFALSE 59533
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59478: LD_ADDR_EXP 57
59482: PUSH
59483: LD_EXP 57
59487: PPUSH
59488: LD_EXP 57
59492: PUSH
59493: LD_INT 1
59495: PLUS
59496: PPUSH
59497: LD_VAR 0 1
59501: PPUSH
59502: CALL_OW 1
59506: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59507: LD_ADDR_EXP 58
59511: PUSH
59512: LD_EXP 58
59516: PPUSH
59517: LD_EXP 58
59521: PUSH
59522: LD_INT 1
59524: PLUS
59525: PPUSH
59526: EMPTY
59527: PPUSH
59528: CALL_OW 1
59532: ST_TO_ADDR
// end ; if not factoryWaypoints then
59533: LD_EXP 60
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 60115
// for i := 1 to Count ( factoryWaypoints ) do
59542: LD_ADDR_VAR 0 4
59546: PUSH
59547: DOUBLE
59548: LD_INT 1
59550: DEC
59551: ST_TO_ADDR
59552: LD_EXP 60
59556: PPUSH
59557: CALL 17887 0 1
59561: PUSH
59562: FOR_TO
59563: IFFALSE 60113
// if factoryWaypoints [ i ] [ 2 ] = factory then
59565: LD_EXP 60
59569: PUSH
59570: LD_VAR 0 4
59574: ARRAY
59575: PUSH
59576: LD_INT 2
59578: ARRAY
59579: PUSH
59580: LD_VAR 0 2
59584: EQUAL
59585: IFFALSE 60111
// begin if GetControl ( vehicle ) = control_manual then
59587: LD_VAR 0 1
59591: PPUSH
59592: CALL_OW 263
59596: PUSH
59597: LD_INT 1
59599: EQUAL
59600: IFFALSE 59964
// begin driver := IsDrivenBy ( vehicle ) ;
59602: LD_ADDR_VAR 0 5
59606: PUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: CALL_OW 311
59616: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59617: LD_VAR 0 5
59621: PUSH
59622: LD_EXP 61
59626: IN
59627: IFTRUE 59641
59629: PUSH
59630: LD_VAR 0 1
59634: PUSH
59635: LD_EXP 61
59639: IN
59640: OR
59641: IFFALSE 59647
// exit ;
59643: POP
59644: POP
59645: GO 60115
// if not HasTask ( driver ) then
59647: LD_VAR 0 5
59651: PPUSH
59652: CALL_OW 314
59656: NOT
59657: IFFALSE 59962
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59659: LD_ADDR_EXP 61
59663: PUSH
59664: LD_EXP 61
59668: PPUSH
59669: LD_VAR 0 5
59673: PPUSH
59674: CALL 53853 0 2
59678: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59679: LD_ADDR_EXP 61
59683: PUSH
59684: LD_EXP 61
59688: PPUSH
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL 53853 0 2
59698: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59699: LD_ADDR_VAR 0 6
59703: PUSH
59704: LD_EXP 60
59708: PUSH
59709: LD_VAR 0 4
59713: ARRAY
59714: PUSH
59715: LD_INT 3
59717: ARRAY
59718: PPUSH
59719: LD_EXP 60
59723: PUSH
59724: LD_VAR 0 4
59728: ARRAY
59729: PUSH
59730: LD_INT 4
59732: ARRAY
59733: PPUSH
59734: CALL_OW 428
59738: ST_TO_ADDR
// if hex then
59739: LD_VAR 0 6
59743: IFFALSE 59761
// ComMoveUnit ( driver , hex ) else
59745: LD_VAR 0 5
59749: PPUSH
59750: LD_VAR 0 6
59754: PPUSH
59755: CALL_OW 112
59759: GO 59845
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59761: LD_VAR 0 1
59765: PPUSH
59766: LD_EXP 60
59770: PUSH
59771: LD_VAR 0 4
59775: ARRAY
59776: PUSH
59777: LD_INT 3
59779: ARRAY
59780: PPUSH
59781: LD_EXP 60
59785: PUSH
59786: LD_VAR 0 4
59790: ARRAY
59791: PUSH
59792: LD_INT 4
59794: ARRAY
59795: PPUSH
59796: CALL_OW 297
59800: PUSH
59801: LD_INT 0
59803: GREATER
59804: IFFALSE 59845
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59806: LD_VAR 0 5
59810: PPUSH
59811: LD_EXP 60
59815: PUSH
59816: LD_VAR 0 4
59820: ARRAY
59821: PUSH
59822: LD_INT 3
59824: ARRAY
59825: PPUSH
59826: LD_EXP 60
59830: PUSH
59831: LD_VAR 0 4
59835: ARRAY
59836: PUSH
59837: LD_INT 4
59839: ARRAY
59840: PPUSH
59841: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59845: LD_VAR 0 5
59849: PPUSH
59850: CALL_OW 181
// if Multiplayer then
59854: LD_OWVAR 4
59858: IFFALSE 59907
// begin repeat wait ( 10 ) ;
59860: LD_INT 10
59862: PPUSH
59863: CALL_OW 67
// until not IsInUnit ( driver ) ;
59867: LD_VAR 0 5
59871: PPUSH
59872: CALL_OW 310
59876: NOT
59877: IFFALSE 59860
// if not HasTask ( driver ) then
59879: LD_VAR 0 5
59883: PPUSH
59884: CALL_OW 314
59888: NOT
59889: IFFALSE 59905
// ComEnterUnit ( driver , factory ) ;
59891: LD_VAR 0 5
59895: PPUSH
59896: LD_VAR 0 2
59900: PPUSH
59901: CALL_OW 120
// end else
59905: GO 59921
// AddComEnterUnit ( driver , factory ) ;
59907: LD_VAR 0 5
59911: PPUSH
59912: LD_VAR 0 2
59916: PPUSH
59917: CALL_OW 180
// wait ( 0 0$1 ) ;
59921: LD_INT 35
59923: PPUSH
59924: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59928: LD_ADDR_EXP 61
59932: PUSH
59933: LD_EXP 61
59937: PUSH
59938: LD_VAR 0 5
59942: DIFF
59943: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59944: LD_ADDR_EXP 61
59948: PUSH
59949: LD_EXP 61
59953: PUSH
59954: LD_VAR 0 1
59958: DIFF
59959: ST_TO_ADDR
// break ;
59960: GO 60113
// end ; end else
59962: GO 60111
// if GetControl ( vehicle ) = control_remote then
59964: LD_VAR 0 1
59968: PPUSH
59969: CALL_OW 263
59973: PUSH
59974: LD_INT 2
59976: EQUAL
59977: IFFALSE 60063
// begin wait ( 0 0$2 ) ;
59979: LD_INT 70
59981: PPUSH
59982: CALL_OW 67
// repeat wait ( 10 ) ;
59986: LD_INT 10
59988: PPUSH
59989: CALL_OW 67
// Connect ( vehicle ) ;
59993: LD_VAR 0 1
59997: PPUSH
59998: CALL 24165 0 1
// until IsControledBy ( vehicle ) ;
60002: LD_VAR 0 1
60006: PPUSH
60007: CALL_OW 312
60011: IFFALSE 59986
// wait ( 10 ) ;
60013: LD_INT 10
60015: PPUSH
60016: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60020: LD_VAR 0 1
60024: PPUSH
60025: LD_EXP 60
60029: PUSH
60030: LD_VAR 0 4
60034: ARRAY
60035: PUSH
60036: LD_INT 3
60038: ARRAY
60039: PPUSH
60040: LD_EXP 60
60044: PUSH
60045: LD_VAR 0 4
60049: ARRAY
60050: PUSH
60051: LD_INT 4
60053: ARRAY
60054: PPUSH
60055: CALL_OW 111
// break ;
60059: GO 60113
// end else
60061: GO 60111
// begin wait ( 0 0$3 ) ;
60063: LD_INT 105
60065: PPUSH
60066: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60070: LD_VAR 0 1
60074: PPUSH
60075: LD_EXP 60
60079: PUSH
60080: LD_VAR 0 4
60084: ARRAY
60085: PUSH
60086: LD_INT 3
60088: ARRAY
60089: PPUSH
60090: LD_EXP 60
60094: PUSH
60095: LD_VAR 0 4
60099: ARRAY
60100: PUSH
60101: LD_INT 4
60103: ARRAY
60104: PPUSH
60105: CALL_OW 111
// break ;
60109: GO 60113
// end ; end ;
60111: GO 59562
60113: POP
60114: POP
// end ;
60115: LD_VAR 0 3
60119: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60120: LD_INT 0
60122: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60123: LD_VAR 0 1
60127: PUSH
60128: LD_INT 250
60130: EQUAL
60131: IFFALSE 60148
60133: PUSH
60134: LD_VAR 0 2
60138: PPUSH
60139: CALL_OW 264
60143: PUSH
60144: LD_INT 81
60146: EQUAL
60147: AND
60148: IFFALSE 60169
// MinerPlaceMine ( unit , x , y ) ;
60150: LD_VAR 0 2
60154: PPUSH
60155: LD_VAR 0 4
60159: PPUSH
60160: LD_VAR 0 5
60164: PPUSH
60165: CALL 63450 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60169: LD_VAR 0 1
60173: PUSH
60174: LD_INT 251
60176: EQUAL
60177: IFFALSE 60194
60179: PUSH
60180: LD_VAR 0 2
60184: PPUSH
60185: CALL_OW 264
60189: PUSH
60190: LD_INT 81
60192: EQUAL
60193: AND
60194: IFFALSE 60215
// MinerDetonateMine ( unit , x , y ) ;
60196: LD_VAR 0 2
60200: PPUSH
60201: LD_VAR 0 4
60205: PPUSH
60206: LD_VAR 0 5
60210: PPUSH
60211: CALL 63857 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60215: LD_VAR 0 1
60219: PUSH
60220: LD_INT 252
60222: EQUAL
60223: IFFALSE 60240
60225: PUSH
60226: LD_VAR 0 2
60230: PPUSH
60231: CALL_OW 264
60235: PUSH
60236: LD_INT 81
60238: EQUAL
60239: AND
60240: IFFALSE 60261
// MinerCreateMinefield ( unit , x , y ) ;
60242: LD_VAR 0 2
60246: PPUSH
60247: LD_VAR 0 4
60251: PPUSH
60252: LD_VAR 0 5
60256: PPUSH
60257: CALL 64089 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60261: LD_VAR 0 1
60265: PUSH
60266: LD_INT 253
60268: EQUAL
60269: IFFALSE 60286
60271: PUSH
60272: LD_VAR 0 2
60276: PPUSH
60277: CALL_OW 257
60281: PUSH
60282: LD_INT 5
60284: EQUAL
60285: AND
60286: IFFALSE 60307
// ComBinocular ( unit , x , y ) ;
60288: LD_VAR 0 2
60292: PPUSH
60293: LD_VAR 0 4
60297: PPUSH
60298: LD_VAR 0 5
60302: PPUSH
60303: CALL 64464 0 3
// if selectedUnit then
60307: LD_VAR 0 3
60311: IFFALSE 60371
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60313: LD_VAR 0 1
60317: PUSH
60318: LD_INT 254
60320: EQUAL
60321: IFFALSE 60338
60323: PUSH
60324: LD_VAR 0 2
60328: PPUSH
60329: CALL_OW 264
60333: PUSH
60334: LD_INT 99
60336: EQUAL
60337: AND
60338: IFFALSE 60355
60340: PUSH
60341: LD_VAR 0 3
60345: PPUSH
60346: CALL_OW 263
60350: PUSH
60351: LD_INT 3
60353: EQUAL
60354: AND
60355: IFFALSE 60371
// HackDestroyVehicle ( unit , selectedUnit ) ;
60357: LD_VAR 0 2
60361: PPUSH
60362: LD_VAR 0 3
60366: PPUSH
60367: CALL 62661 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60371: LD_VAR 0 1
60375: PUSH
60376: LD_INT 255
60378: EQUAL
60379: IFFALSE 60403
60381: PUSH
60382: LD_VAR 0 2
60386: PPUSH
60387: CALL_OW 264
60391: PUSH
60392: LD_INT 14
60394: PUSH
60395: LD_INT 53
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: IN
60402: AND
60403: IFFALSE 60421
60405: PUSH
60406: LD_VAR 0 4
60410: PPUSH
60411: LD_VAR 0 5
60415: PPUSH
60416: CALL_OW 488
60420: AND
60421: IFFALSE 60445
// CutTreeXYR ( unit , x , y , 12 ) ;
60423: LD_VAR 0 2
60427: PPUSH
60428: LD_VAR 0 4
60432: PPUSH
60433: LD_VAR 0 5
60437: PPUSH
60438: LD_INT 12
60440: PPUSH
60441: CALL 60636 0 4
// if cmd = 256 then
60445: LD_VAR 0 1
60449: PUSH
60450: LD_INT 256
60452: EQUAL
60453: IFFALSE 60474
// SetFactoryWaypoint ( unit , x , y ) ;
60455: LD_VAR 0 2
60459: PPUSH
60460: LD_VAR 0 4
60464: PPUSH
60465: LD_VAR 0 5
60469: PPUSH
60470: CALL 66449 0 3
// if cmd = 257 then
60474: LD_VAR 0 1
60478: PUSH
60479: LD_INT 257
60481: EQUAL
60482: IFFALSE 60503
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60484: LD_VAR 0 2
60488: PPUSH
60489: LD_VAR 0 4
60493: PPUSH
60494: LD_VAR 0 5
60498: PPUSH
60499: CALL 66945 0 3
// if cmd = 258 then
60503: LD_VAR 0 1
60507: PUSH
60508: LD_INT 258
60510: EQUAL
60511: IFFALSE 60535
// BurnTreeXYR ( unit , x , y , 8 ) ;
60513: LD_VAR 0 2
60517: PPUSH
60518: LD_VAR 0 4
60522: PPUSH
60523: LD_VAR 0 5
60527: PPUSH
60528: LD_INT 8
60530: PPUSH
60531: CALL 61036 0 4
// end ;
60535: LD_VAR 0 6
60539: RET
// export function ComRadiation ( un ) ; var eff ; begin
60540: LD_INT 0
60542: PPUSH
60543: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60544: LD_VAR 0 1
60548: PPUSH
60549: CALL_OW 264
60553: PUSH
60554: LD_INT 91
60556: NONEQUAL
60557: IFFALSE 60561
// exit ;
60559: GO 60631
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60561: LD_INT 68
60563: PPUSH
60564: LD_VAR 0 1
60568: PPUSH
60569: CALL_OW 255
60573: PPUSH
60574: CALL_OW 321
60578: PUSH
60579: LD_INT 2
60581: EQUAL
60582: IFFALSE 60594
// eff := 50 else
60584: LD_ADDR_VAR 0 3
60588: PUSH
60589: LD_INT 50
60591: ST_TO_ADDR
60592: GO 60602
// eff := 25 ;
60594: LD_ADDR_VAR 0 3
60598: PUSH
60599: LD_INT 25
60601: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60602: LD_VAR 0 1
60606: PPUSH
60607: CALL_OW 250
60611: PPUSH
60612: LD_VAR 0 1
60616: PPUSH
60617: CALL_OW 251
60621: PPUSH
60622: LD_VAR 0 3
60626: PPUSH
60627: CALL_OW 495
// end ;
60631: LD_VAR 0 2
60635: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60636: LD_INT 0
60638: PPUSH
60639: PPUSH
60640: PPUSH
60641: PPUSH
60642: PPUSH
60643: PPUSH
60644: PPUSH
60645: PPUSH
60646: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60647: LD_VAR 0 1
60651: PPUSH
60652: CALL_OW 302
60656: NOT
60657: IFTRUE 60676
60659: PUSH
60660: LD_VAR 0 2
60664: PPUSH
60665: LD_VAR 0 3
60669: PPUSH
60670: CALL_OW 488
60674: NOT
60675: OR
60676: IFTRUE 60685
60678: PUSH
60679: LD_VAR 0 4
60683: NOT
60684: OR
60685: IFFALSE 60689
// exit ;
60687: GO 61031
// list := [ ] ;
60689: LD_ADDR_VAR 0 13
60693: PUSH
60694: EMPTY
60695: ST_TO_ADDR
// if x - r < 0 then
60696: LD_VAR 0 2
60700: PUSH
60701: LD_VAR 0 4
60705: MINUS
60706: PUSH
60707: LD_INT 0
60709: LESS
60710: IFFALSE 60722
// min_x := 0 else
60712: LD_ADDR_VAR 0 7
60716: PUSH
60717: LD_INT 0
60719: ST_TO_ADDR
60720: GO 60738
// min_x := x - r ;
60722: LD_ADDR_VAR 0 7
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: LD_VAR 0 4
60736: MINUS
60737: ST_TO_ADDR
// if y - r < 0 then
60738: LD_VAR 0 3
60742: PUSH
60743: LD_VAR 0 4
60747: MINUS
60748: PUSH
60749: LD_INT 0
60751: LESS
60752: IFFALSE 60764
// min_y := 0 else
60754: LD_ADDR_VAR 0 8
60758: PUSH
60759: LD_INT 0
60761: ST_TO_ADDR
60762: GO 60780
// min_y := y - r ;
60764: LD_ADDR_VAR 0 8
60768: PUSH
60769: LD_VAR 0 3
60773: PUSH
60774: LD_VAR 0 4
60778: MINUS
60779: ST_TO_ADDR
// max_x := x + r ;
60780: LD_ADDR_VAR 0 9
60784: PUSH
60785: LD_VAR 0 2
60789: PUSH
60790: LD_VAR 0 4
60794: PLUS
60795: ST_TO_ADDR
// max_y := y + r ;
60796: LD_ADDR_VAR 0 10
60800: PUSH
60801: LD_VAR 0 3
60805: PUSH
60806: LD_VAR 0 4
60810: PLUS
60811: ST_TO_ADDR
// for _x = min_x to max_x do
60812: LD_ADDR_VAR 0 11
60816: PUSH
60817: DOUBLE
60818: LD_VAR 0 7
60822: DEC
60823: ST_TO_ADDR
60824: LD_VAR 0 9
60828: PUSH
60829: FOR_TO
60830: IFFALSE 60949
// for _y = min_y to max_y do
60832: LD_ADDR_VAR 0 12
60836: PUSH
60837: DOUBLE
60838: LD_VAR 0 8
60842: DEC
60843: ST_TO_ADDR
60844: LD_VAR 0 10
60848: PUSH
60849: FOR_TO
60850: IFFALSE 60945
// begin if not ValidHex ( _x , _y ) then
60852: LD_VAR 0 11
60856: PPUSH
60857: LD_VAR 0 12
60861: PPUSH
60862: CALL_OW 488
60866: NOT
60867: IFFALSE 60871
// continue ;
60869: GO 60849
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60871: LD_VAR 0 11
60875: PPUSH
60876: LD_VAR 0 12
60880: PPUSH
60881: CALL_OW 351
60885: IFFALSE 60903
60887: PUSH
60888: LD_VAR 0 11
60892: PPUSH
60893: LD_VAR 0 12
60897: PPUSH
60898: CALL_OW 554
60902: AND
60903: IFFALSE 60943
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60905: LD_ADDR_VAR 0 13
60909: PUSH
60910: LD_VAR 0 13
60914: PPUSH
60915: LD_VAR 0 13
60919: PUSH
60920: LD_INT 1
60922: PLUS
60923: PPUSH
60924: LD_VAR 0 11
60928: PUSH
60929: LD_VAR 0 12
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PPUSH
60938: CALL_OW 2
60942: ST_TO_ADDR
// end ;
60943: GO 60849
60945: POP
60946: POP
60947: GO 60829
60949: POP
60950: POP
// if not list then
60951: LD_VAR 0 13
60955: NOT
60956: IFFALSE 60960
// exit ;
60958: GO 61031
// for i in list do
60960: LD_ADDR_VAR 0 6
60964: PUSH
60965: LD_VAR 0 13
60969: PUSH
60970: FOR_IN
60971: IFFALSE 61029
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60973: LD_VAR 0 1
60977: PPUSH
60978: LD_STRING M
60980: PUSH
60981: LD_VAR 0 6
60985: PUSH
60986: LD_INT 1
60988: ARRAY
60989: PUSH
60990: LD_VAR 0 6
60994: PUSH
60995: LD_INT 2
60997: ARRAY
60998: PUSH
60999: LD_INT 0
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: PUSH
61020: EMPTY
61021: LIST
61022: PPUSH
61023: CALL_OW 447
61027: GO 60970
61029: POP
61030: POP
// end ;
61031: LD_VAR 0 5
61035: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61036: LD_INT 0
61038: PPUSH
61039: PPUSH
61040: PPUSH
61041: PPUSH
61042: PPUSH
61043: PPUSH
61044: PPUSH
61045: PPUSH
61046: PPUSH
61047: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61048: LD_VAR 0 1
61052: PPUSH
61053: CALL_OW 302
61057: NOT
61058: IFTRUE 61077
61060: PUSH
61061: LD_VAR 0 2
61065: PPUSH
61066: LD_VAR 0 3
61070: PPUSH
61071: CALL_OW 488
61075: NOT
61076: OR
61077: IFTRUE 61086
61079: PUSH
61080: LD_VAR 0 4
61084: NOT
61085: OR
61086: IFFALSE 61090
// exit ;
61088: GO 61607
// list := [ ] ;
61090: LD_ADDR_VAR 0 13
61094: PUSH
61095: EMPTY
61096: ST_TO_ADDR
// if x - r < 0 then
61097: LD_VAR 0 2
61101: PUSH
61102: LD_VAR 0 4
61106: MINUS
61107: PUSH
61108: LD_INT 0
61110: LESS
61111: IFFALSE 61123
// min_x := 0 else
61113: LD_ADDR_VAR 0 7
61117: PUSH
61118: LD_INT 0
61120: ST_TO_ADDR
61121: GO 61139
// min_x := x - r ;
61123: LD_ADDR_VAR 0 7
61127: PUSH
61128: LD_VAR 0 2
61132: PUSH
61133: LD_VAR 0 4
61137: MINUS
61138: ST_TO_ADDR
// if y - r < 0 then
61139: LD_VAR 0 3
61143: PUSH
61144: LD_VAR 0 4
61148: MINUS
61149: PUSH
61150: LD_INT 0
61152: LESS
61153: IFFALSE 61165
// min_y := 0 else
61155: LD_ADDR_VAR 0 8
61159: PUSH
61160: LD_INT 0
61162: ST_TO_ADDR
61163: GO 61181
// min_y := y - r ;
61165: LD_ADDR_VAR 0 8
61169: PUSH
61170: LD_VAR 0 3
61174: PUSH
61175: LD_VAR 0 4
61179: MINUS
61180: ST_TO_ADDR
// max_x := x + r ;
61181: LD_ADDR_VAR 0 9
61185: PUSH
61186: LD_VAR 0 2
61190: PUSH
61191: LD_VAR 0 4
61195: PLUS
61196: ST_TO_ADDR
// max_y := y + r ;
61197: LD_ADDR_VAR 0 10
61201: PUSH
61202: LD_VAR 0 3
61206: PUSH
61207: LD_VAR 0 4
61211: PLUS
61212: ST_TO_ADDR
// for _x = min_x to max_x do
61213: LD_ADDR_VAR 0 11
61217: PUSH
61218: DOUBLE
61219: LD_VAR 0 7
61223: DEC
61224: ST_TO_ADDR
61225: LD_VAR 0 9
61229: PUSH
61230: FOR_TO
61231: IFFALSE 61350
// for _y = min_y to max_y do
61233: LD_ADDR_VAR 0 12
61237: PUSH
61238: DOUBLE
61239: LD_VAR 0 8
61243: DEC
61244: ST_TO_ADDR
61245: LD_VAR 0 10
61249: PUSH
61250: FOR_TO
61251: IFFALSE 61346
// begin if not ValidHex ( _x , _y ) then
61253: LD_VAR 0 11
61257: PPUSH
61258: LD_VAR 0 12
61262: PPUSH
61263: CALL_OW 488
61267: NOT
61268: IFFALSE 61272
// continue ;
61270: GO 61250
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61272: LD_VAR 0 11
61276: PPUSH
61277: LD_VAR 0 12
61281: PPUSH
61282: CALL_OW 351
61286: IFFALSE 61304
61288: PUSH
61289: LD_VAR 0 11
61293: PPUSH
61294: LD_VAR 0 12
61298: PPUSH
61299: CALL_OW 554
61303: AND
61304: IFFALSE 61344
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61306: LD_ADDR_VAR 0 13
61310: PUSH
61311: LD_VAR 0 13
61315: PPUSH
61316: LD_VAR 0 13
61320: PUSH
61321: LD_INT 1
61323: PLUS
61324: PPUSH
61325: LD_VAR 0 11
61329: PUSH
61330: LD_VAR 0 12
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PPUSH
61339: CALL_OW 2
61343: ST_TO_ADDR
// end ;
61344: GO 61250
61346: POP
61347: POP
61348: GO 61230
61350: POP
61351: POP
// if not list then
61352: LD_VAR 0 13
61356: NOT
61357: IFFALSE 61361
// exit ;
61359: GO 61607
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61361: LD_ADDR_VAR 0 13
61365: PUSH
61366: LD_VAR 0 1
61370: PPUSH
61371: LD_VAR 0 13
61375: PPUSH
61376: LD_INT 1
61378: PPUSH
61379: LD_INT 1
61381: PPUSH
61382: CALL 21293 0 4
61386: ST_TO_ADDR
// ComStop ( flame ) ;
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 141
// for i in list do
61396: LD_ADDR_VAR 0 6
61400: PUSH
61401: LD_VAR 0 13
61405: PUSH
61406: FOR_IN
61407: IFFALSE 61438
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61409: LD_VAR 0 1
61413: PPUSH
61414: LD_VAR 0 6
61418: PUSH
61419: LD_INT 1
61421: ARRAY
61422: PPUSH
61423: LD_VAR 0 6
61427: PUSH
61428: LD_INT 2
61430: ARRAY
61431: PPUSH
61432: CALL_OW 176
61436: GO 61406
61438: POP
61439: POP
// repeat wait ( 0 0$1 ) ;
61440: LD_INT 35
61442: PPUSH
61443: CALL_OW 67
// task := GetTaskList ( flame ) ;
61447: LD_ADDR_VAR 0 14
61451: PUSH
61452: LD_VAR 0 1
61456: PPUSH
61457: CALL_OW 437
61461: ST_TO_ADDR
// if not task then
61462: LD_VAR 0 14
61466: NOT
61467: IFFALSE 61471
// exit ;
61469: GO 61607
// if task [ 1 ] [ 1 ] <> | then
61471: LD_VAR 0 14
61475: PUSH
61476: LD_INT 1
61478: ARRAY
61479: PUSH
61480: LD_INT 1
61482: ARRAY
61483: PUSH
61484: LD_STRING |
61486: NONEQUAL
61487: IFFALSE 61491
// exit ;
61489: GO 61607
// _x := task [ 1 ] [ 2 ] ;
61491: LD_ADDR_VAR 0 11
61495: PUSH
61496: LD_VAR 0 14
61500: PUSH
61501: LD_INT 1
61503: ARRAY
61504: PUSH
61505: LD_INT 2
61507: ARRAY
61508: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61509: LD_ADDR_VAR 0 12
61513: PUSH
61514: LD_VAR 0 14
61518: PUSH
61519: LD_INT 1
61521: ARRAY
61522: PUSH
61523: LD_INT 3
61525: ARRAY
61526: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61527: LD_VAR 0 11
61531: PPUSH
61532: LD_VAR 0 12
61536: PPUSH
61537: CALL_OW 351
61541: NOT
61542: IFTRUE 61561
61544: PUSH
61545: LD_VAR 0 11
61549: PPUSH
61550: LD_VAR 0 12
61554: PPUSH
61555: CALL_OW 554
61559: NOT
61560: OR
61561: IFFALSE 61595
// begin task := Delete ( task , 1 ) ;
61563: LD_ADDR_VAR 0 14
61567: PUSH
61568: LD_VAR 0 14
61572: PPUSH
61573: LD_INT 1
61575: PPUSH
61576: CALL_OW 3
61580: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61581: LD_VAR 0 1
61585: PPUSH
61586: LD_VAR 0 14
61590: PPUSH
61591: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61595: LD_VAR 0 1
61599: PPUSH
61600: CALL_OW 314
61604: NOT
61605: IFFALSE 61440
// end ;
61607: LD_VAR 0 5
61611: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61612: LD_EXP 50
61616: NOT
61617: IFFALSE 61667
61619: GO 61621
61621: DISABLE
// begin initHack := true ;
61622: LD_ADDR_EXP 50
61626: PUSH
61627: LD_INT 1
61629: ST_TO_ADDR
// hackTanks := [ ] ;
61630: LD_ADDR_EXP 51
61634: PUSH
61635: EMPTY
61636: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61637: LD_ADDR_EXP 52
61641: PUSH
61642: EMPTY
61643: ST_TO_ADDR
// hackLimit := 3 ;
61644: LD_ADDR_EXP 53
61648: PUSH
61649: LD_INT 3
61651: ST_TO_ADDR
// hackDist := 12 ;
61652: LD_ADDR_EXP 54
61656: PUSH
61657: LD_INT 12
61659: ST_TO_ADDR
// hackCounter := [ ] ;
61660: LD_ADDR_EXP 55
61664: PUSH
61665: EMPTY
61666: ST_TO_ADDR
// end ;
61667: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61668: LD_EXP 50
61672: IFFALSE 61690
61674: PUSH
61675: LD_INT 34
61677: PUSH
61678: LD_INT 99
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PPUSH
61685: CALL_OW 69
61689: AND
61690: IFFALSE 61943
61692: GO 61694
61694: DISABLE
61695: LD_INT 0
61697: PPUSH
61698: PPUSH
// begin enable ;
61699: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61700: LD_ADDR_VAR 0 1
61704: PUSH
61705: LD_INT 34
61707: PUSH
61708: LD_INT 99
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PPUSH
61715: CALL_OW 69
61719: PUSH
61720: FOR_IN
61721: IFFALSE 61941
// begin if not i in hackTanks then
61723: LD_VAR 0 1
61727: PUSH
61728: LD_EXP 51
61732: IN
61733: NOT
61734: IFFALSE 61817
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61736: LD_ADDR_EXP 51
61740: PUSH
61741: LD_EXP 51
61745: PPUSH
61746: LD_EXP 51
61750: PUSH
61751: LD_INT 1
61753: PLUS
61754: PPUSH
61755: LD_VAR 0 1
61759: PPUSH
61760: CALL_OW 1
61764: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61765: LD_ADDR_EXP 52
61769: PUSH
61770: LD_EXP 52
61774: PPUSH
61775: LD_EXP 52
61779: PUSH
61780: LD_INT 1
61782: PLUS
61783: PPUSH
61784: EMPTY
61785: PPUSH
61786: CALL_OW 1
61790: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61791: LD_ADDR_EXP 55
61795: PUSH
61796: LD_EXP 55
61800: PPUSH
61801: LD_EXP 55
61805: PUSH
61806: LD_INT 1
61808: PLUS
61809: PPUSH
61810: EMPTY
61811: PPUSH
61812: CALL_OW 1
61816: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61817: LD_VAR 0 1
61821: PPUSH
61822: CALL_OW 302
61826: NOT
61827: IFFALSE 61840
// begin HackUnlinkAll ( i ) ;
61829: LD_VAR 0 1
61833: PPUSH
61834: CALL 61946 0 1
// continue ;
61838: GO 61720
// end ; HackCheckCapturedStatus ( i ) ;
61840: LD_VAR 0 1
61844: PPUSH
61845: CALL 62391 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61849: LD_ADDR_VAR 0 2
61853: PUSH
61854: LD_INT 81
61856: PUSH
61857: LD_VAR 0 1
61861: PPUSH
61862: CALL_OW 255
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 33
61873: PUSH
61874: LD_INT 3
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 91
61883: PUSH
61884: LD_VAR 0 1
61888: PUSH
61889: LD_EXP 54
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 50
61901: PUSH
61902: EMPTY
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: PPUSH
61911: CALL_OW 69
61915: ST_TO_ADDR
// if not tmp then
61916: LD_VAR 0 2
61920: NOT
61921: IFFALSE 61925
// continue ;
61923: GO 61720
// HackLink ( i , tmp ) ;
61925: LD_VAR 0 1
61929: PPUSH
61930: LD_VAR 0 2
61934: PPUSH
61935: CALL 62082 0 2
// end ;
61939: GO 61720
61941: POP
61942: POP
// end ;
61943: PPOPN 2
61945: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61946: LD_INT 0
61948: PPUSH
61949: PPUSH
61950: PPUSH
// if not hack in hackTanks then
61951: LD_VAR 0 1
61955: PUSH
61956: LD_EXP 51
61960: IN
61961: NOT
61962: IFFALSE 61966
// exit ;
61964: GO 62077
// index := GetElementIndex ( hackTanks , hack ) ;
61966: LD_ADDR_VAR 0 4
61970: PUSH
61971: LD_EXP 51
61975: PPUSH
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL 20588 0 2
61985: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61986: LD_EXP 52
61990: PUSH
61991: LD_VAR 0 4
61995: ARRAY
61996: IFFALSE 62077
// begin for i in hackTanksCaptured [ index ] do
61998: LD_ADDR_VAR 0 3
62002: PUSH
62003: LD_EXP 52
62007: PUSH
62008: LD_VAR 0 4
62012: ARRAY
62013: PUSH
62014: FOR_IN
62015: IFFALSE 62041
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62017: LD_VAR 0 3
62021: PUSH
62022: LD_INT 1
62024: ARRAY
62025: PPUSH
62026: LD_VAR 0 3
62030: PUSH
62031: LD_INT 2
62033: ARRAY
62034: PPUSH
62035: CALL_OW 235
62039: GO 62014
62041: POP
62042: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62043: LD_ADDR_EXP 52
62047: PUSH
62048: LD_EXP 52
62052: PPUSH
62053: LD_VAR 0 4
62057: PPUSH
62058: EMPTY
62059: PPUSH
62060: CALL_OW 1
62064: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62065: LD_VAR 0 1
62069: PPUSH
62070: LD_INT 0
62072: PPUSH
62073: CALL_OW 505
// end ; end ;
62077: LD_VAR 0 2
62081: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62082: LD_INT 0
62084: PPUSH
62085: PPUSH
62086: PPUSH
// if not hack in hackTanks or not vehicles then
62087: LD_VAR 0 1
62091: PUSH
62092: LD_EXP 51
62096: IN
62097: NOT
62098: IFTRUE 62107
62100: PUSH
62101: LD_VAR 0 2
62105: NOT
62106: OR
62107: IFFALSE 62111
// exit ;
62109: GO 62386
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62111: LD_ADDR_VAR 0 2
62115: PUSH
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_VAR 0 2
62125: PPUSH
62126: LD_INT 1
62128: PPUSH
62129: LD_INT 1
62131: PPUSH
62132: CALL 21240 0 4
62136: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62137: LD_ADDR_VAR 0 5
62141: PUSH
62142: LD_EXP 51
62146: PPUSH
62147: LD_VAR 0 1
62151: PPUSH
62152: CALL 20588 0 2
62156: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62157: LD_EXP 52
62161: PUSH
62162: LD_VAR 0 5
62166: ARRAY
62167: PUSH
62168: LD_EXP 53
62172: LESS
62173: IFFALSE 62362
// begin for i := 1 to vehicles do
62175: LD_ADDR_VAR 0 4
62179: PUSH
62180: DOUBLE
62181: LD_INT 1
62183: DEC
62184: ST_TO_ADDR
62185: LD_VAR 0 2
62189: PUSH
62190: FOR_TO
62191: IFFALSE 62360
// begin if hackTanksCaptured [ index ] = hackLimit then
62193: LD_EXP 52
62197: PUSH
62198: LD_VAR 0 5
62202: ARRAY
62203: PUSH
62204: LD_EXP 53
62208: EQUAL
62209: IFFALSE 62213
// break ;
62211: GO 62360
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62213: LD_ADDR_EXP 55
62217: PUSH
62218: LD_EXP 55
62222: PPUSH
62223: LD_VAR 0 5
62227: PPUSH
62228: LD_EXP 55
62232: PUSH
62233: LD_VAR 0 5
62237: ARRAY
62238: PUSH
62239: LD_INT 1
62241: PLUS
62242: PPUSH
62243: CALL_OW 1
62247: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62248: LD_ADDR_EXP 52
62252: PUSH
62253: LD_EXP 52
62257: PPUSH
62258: LD_VAR 0 5
62262: PUSH
62263: LD_EXP 52
62267: PUSH
62268: LD_VAR 0 5
62272: ARRAY
62273: PUSH
62274: LD_INT 1
62276: PLUS
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PPUSH
62282: LD_VAR 0 2
62286: PUSH
62287: LD_VAR 0 4
62291: ARRAY
62292: PUSH
62293: LD_VAR 0 2
62297: PUSH
62298: LD_VAR 0 4
62302: ARRAY
62303: PPUSH
62304: CALL_OW 255
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PPUSH
62313: CALL 20805 0 3
62317: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62318: LD_VAR 0 2
62322: PUSH
62323: LD_VAR 0 4
62327: ARRAY
62328: PPUSH
62329: LD_VAR 0 1
62333: PPUSH
62334: CALL_OW 255
62338: PPUSH
62339: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62343: LD_VAR 0 2
62347: PUSH
62348: LD_VAR 0 4
62352: ARRAY
62353: PPUSH
62354: CALL_OW 141
// end ;
62358: GO 62190
62360: POP
62361: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62362: LD_VAR 0 1
62366: PPUSH
62367: LD_EXP 52
62371: PUSH
62372: LD_VAR 0 5
62376: ARRAY
62377: PUSH
62378: LD_INT 0
62380: PLUS
62381: PPUSH
62382: CALL_OW 505
// end ;
62386: LD_VAR 0 3
62390: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
// if not hack in hackTanks then
62397: LD_VAR 0 1
62401: PUSH
62402: LD_EXP 51
62406: IN
62407: NOT
62408: IFFALSE 62412
// exit ;
62410: GO 62656
// index := GetElementIndex ( hackTanks , hack ) ;
62412: LD_ADDR_VAR 0 4
62416: PUSH
62417: LD_EXP 51
62421: PPUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: CALL 20588 0 2
62431: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62432: LD_ADDR_VAR 0 3
62436: PUSH
62437: DOUBLE
62438: LD_EXP 52
62442: PUSH
62443: LD_VAR 0 4
62447: ARRAY
62448: INC
62449: ST_TO_ADDR
62450: LD_INT 1
62452: PUSH
62453: FOR_DOWNTO
62454: IFFALSE 62630
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62456: LD_ADDR_VAR 0 5
62460: PUSH
62461: LD_EXP 52
62465: PUSH
62466: LD_VAR 0 4
62470: ARRAY
62471: PUSH
62472: LD_VAR 0 3
62476: ARRAY
62477: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62478: LD_VAR 0 5
62482: PUSH
62483: LD_INT 1
62485: ARRAY
62486: PPUSH
62487: CALL_OW 302
62491: NOT
62492: IFTRUE 62520
62494: PUSH
62495: LD_VAR 0 5
62499: PUSH
62500: LD_INT 1
62502: ARRAY
62503: PPUSH
62504: CALL_OW 255
62508: PUSH
62509: LD_VAR 0 1
62513: PPUSH
62514: CALL_OW 255
62518: NONEQUAL
62519: OR
62520: IFFALSE 62628
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62522: LD_VAR 0 5
62526: PUSH
62527: LD_INT 1
62529: ARRAY
62530: PPUSH
62531: CALL_OW 305
62535: IFFALSE 62563
62537: PUSH
62538: LD_VAR 0 5
62542: PUSH
62543: LD_INT 1
62545: ARRAY
62546: PPUSH
62547: CALL_OW 255
62551: PUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: CALL_OW 255
62561: EQUAL
62562: AND
62563: IFFALSE 62587
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62565: LD_VAR 0 5
62569: PUSH
62570: LD_INT 1
62572: ARRAY
62573: PPUSH
62574: LD_VAR 0 5
62578: PUSH
62579: LD_INT 2
62581: ARRAY
62582: PPUSH
62583: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62587: LD_ADDR_EXP 52
62591: PUSH
62592: LD_EXP 52
62596: PPUSH
62597: LD_VAR 0 4
62601: PPUSH
62602: LD_EXP 52
62606: PUSH
62607: LD_VAR 0 4
62611: ARRAY
62612: PPUSH
62613: LD_VAR 0 3
62617: PPUSH
62618: CALL_OW 3
62622: PPUSH
62623: CALL_OW 1
62627: ST_TO_ADDR
// end ; end ;
62628: GO 62453
62630: POP
62631: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62632: LD_VAR 0 1
62636: PPUSH
62637: LD_EXP 52
62641: PUSH
62642: LD_VAR 0 4
62646: ARRAY
62647: PUSH
62648: LD_INT 0
62650: PLUS
62651: PPUSH
62652: CALL_OW 505
// end ;
62656: LD_VAR 0 2
62660: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62661: LD_INT 0
62663: PPUSH
62664: PPUSH
62665: PPUSH
62666: PPUSH
// if not hack in hackTanks then
62667: LD_VAR 0 1
62671: PUSH
62672: LD_EXP 51
62676: IN
62677: NOT
62678: IFFALSE 62682
// exit ;
62680: GO 62767
// index := GetElementIndex ( hackTanks , hack ) ;
62682: LD_ADDR_VAR 0 5
62686: PUSH
62687: LD_EXP 51
62691: PPUSH
62692: LD_VAR 0 1
62696: PPUSH
62697: CALL 20588 0 2
62701: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62702: LD_ADDR_VAR 0 4
62706: PUSH
62707: DOUBLE
62708: LD_INT 1
62710: DEC
62711: ST_TO_ADDR
62712: LD_EXP 52
62716: PUSH
62717: LD_VAR 0 5
62721: ARRAY
62722: PUSH
62723: FOR_TO
62724: IFFALSE 62765
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62726: LD_EXP 52
62730: PUSH
62731: LD_VAR 0 5
62735: ARRAY
62736: PUSH
62737: LD_VAR 0 4
62741: ARRAY
62742: PUSH
62743: LD_INT 1
62745: ARRAY
62746: PUSH
62747: LD_VAR 0 2
62751: EQUAL
62752: IFFALSE 62763
// KillUnit ( vehicle ) ;
62754: LD_VAR 0 2
62758: PPUSH
62759: CALL_OW 66
62763: GO 62723
62765: POP
62766: POP
// end ;
62767: LD_VAR 0 3
62771: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
62772: LD_EXP 56
62776: NOT
62777: IFFALSE 62910
62779: GO 62781
62781: DISABLE
62782: LD_INT 0
62784: PPUSH
// begin initMiner := true ;
62785: LD_ADDR_EXP 56
62789: PUSH
62790: LD_INT 1
62792: ST_TO_ADDR
// minersList := [ ] ;
62793: LD_ADDR_EXP 57
62797: PUSH
62798: EMPTY
62799: ST_TO_ADDR
// minerMinesList := [ ] ;
62800: LD_ADDR_EXP 58
62804: PUSH
62805: EMPTY
62806: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
62807: LD_ADDR_EXP 59
62811: PUSH
62812: LD_INT 6
62814: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62815: LD_ADDR_VAR 0 1
62819: PUSH
62820: LD_INT 34
62822: PUSH
62823: LD_INT 81
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PPUSH
62830: CALL_OW 69
62834: PUSH
62835: FOR_IN
62836: IFFALSE 62908
// begin if not i in minersList then
62838: LD_VAR 0 1
62842: PUSH
62843: LD_EXP 57
62847: IN
62848: NOT
62849: IFFALSE 62906
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62851: LD_ADDR_EXP 57
62855: PUSH
62856: LD_EXP 57
62860: PPUSH
62861: LD_EXP 57
62865: PUSH
62866: LD_INT 1
62868: PLUS
62869: PPUSH
62870: LD_VAR 0 1
62874: PPUSH
62875: CALL_OW 1
62879: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62880: LD_ADDR_EXP 58
62884: PUSH
62885: LD_EXP 58
62889: PPUSH
62890: LD_EXP 58
62894: PUSH
62895: LD_INT 1
62897: PLUS
62898: PPUSH
62899: EMPTY
62900: PPUSH
62901: CALL_OW 1
62905: ST_TO_ADDR
// end end ;
62906: GO 62835
62908: POP
62909: POP
// end ;
62910: PPOPN 1
62912: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
62913: LD_EXP 56
62917: IFFALSE 62948
62919: PUSH
62920: LD_EXP 58
62924: PPUSH
62925: CALL 17887 0 1
62929: IFTRUE 62947
62931: PUSH
62932: LD_INT 34
62934: PUSH
62935: LD_INT 81
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PPUSH
62942: CALL_OW 69
62946: OR
62947: AND
62948: IFFALSE 63447
62950: GO 62952
62952: DISABLE
62953: LD_INT 0
62955: PPUSH
62956: PPUSH
62957: PPUSH
62958: PPUSH
// begin enable ;
62959: ENABLE
// for i := minerMinesList downto 1 do
62960: LD_ADDR_VAR 0 1
62964: PUSH
62965: DOUBLE
62966: LD_EXP 58
62970: INC
62971: ST_TO_ADDR
62972: LD_INT 1
62974: PUSH
62975: FOR_DOWNTO
62976: IFFALSE 63445
// begin if IsLive ( minersList [ i ] ) then
62978: LD_EXP 57
62982: PUSH
62983: LD_VAR 0 1
62987: ARRAY
62988: PPUSH
62989: CALL_OW 300
62993: IFFALSE 63026
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
62995: LD_EXP 57
62999: PUSH
63000: LD_VAR 0 1
63004: ARRAY
63005: PPUSH
63006: LD_EXP 58
63010: PUSH
63011: LD_VAR 0 1
63015: ARRAY
63016: PPUSH
63017: CALL 17887 0 1
63021: PPUSH
63022: CALL_OW 505
// if not minerMinesList [ i ] then
63026: LD_EXP 58
63030: PUSH
63031: LD_VAR 0 1
63035: ARRAY
63036: NOT
63037: IFFALSE 63041
// continue ;
63039: GO 62975
// for j := minerMinesList [ i ] downto 1 do
63041: LD_ADDR_VAR 0 2
63045: PUSH
63046: DOUBLE
63047: LD_EXP 58
63051: PUSH
63052: LD_VAR 0 1
63056: ARRAY
63057: INC
63058: ST_TO_ADDR
63059: LD_INT 1
63061: PUSH
63062: FOR_DOWNTO
63063: IFFALSE 63441
// begin side := GetSide ( minersList [ i ] ) ;
63065: LD_ADDR_VAR 0 3
63069: PUSH
63070: LD_EXP 57
63074: PUSH
63075: LD_VAR 0 1
63079: ARRAY
63080: PPUSH
63081: CALL_OW 255
63085: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63086: LD_EXP 57
63090: PUSH
63091: LD_VAR 0 1
63095: ARRAY
63096: PPUSH
63097: CALL_OW 301
63101: IFTRUE 63121
63103: PUSH
63104: LD_EXP 57
63108: PUSH
63109: LD_VAR 0 1
63113: ARRAY
63114: PPUSH
63115: CALL_OW 305
63119: NOT
63120: OR
63121: IFFALSE 63212
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63123: LD_EXP 58
63127: PUSH
63128: LD_VAR 0 1
63132: ARRAY
63133: PUSH
63134: LD_VAR 0 2
63138: ARRAY
63139: PUSH
63140: LD_INT 1
63142: ARRAY
63143: PPUSH
63144: LD_EXP 58
63148: PUSH
63149: LD_VAR 0 1
63153: ARRAY
63154: PUSH
63155: LD_VAR 0 2
63159: ARRAY
63160: PUSH
63161: LD_INT 2
63163: ARRAY
63164: PPUSH
63165: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63169: LD_ADDR_EXP 58
63173: PUSH
63174: LD_EXP 58
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: LD_EXP 58
63188: PUSH
63189: LD_VAR 0 1
63193: ARRAY
63194: PPUSH
63195: LD_VAR 0 2
63199: PPUSH
63200: CALL_OW 3
63204: PPUSH
63205: CALL_OW 1
63209: ST_TO_ADDR
// continue ;
63210: GO 63062
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63212: LD_ADDR_VAR 0 4
63216: PUSH
63217: LD_EXP 58
63221: PUSH
63222: LD_VAR 0 1
63226: ARRAY
63227: PUSH
63228: LD_VAR 0 2
63232: ARRAY
63233: PUSH
63234: LD_INT 1
63236: ARRAY
63237: PPUSH
63238: LD_EXP 58
63242: PUSH
63243: LD_VAR 0 1
63247: ARRAY
63248: PUSH
63249: LD_VAR 0 2
63253: ARRAY
63254: PUSH
63255: LD_INT 2
63257: ARRAY
63258: PPUSH
63259: CALL_OW 428
63263: ST_TO_ADDR
// if not tmp then
63264: LD_VAR 0 4
63268: NOT
63269: IFFALSE 63273
// continue ;
63271: GO 63062
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63273: LD_VAR 0 4
63277: PUSH
63278: LD_INT 81
63280: PUSH
63281: LD_VAR 0 3
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PPUSH
63290: CALL_OW 69
63294: IN
63295: IFFALSE 63345
63297: PUSH
63298: LD_EXP 58
63302: PUSH
63303: LD_VAR 0 1
63307: ARRAY
63308: PUSH
63309: LD_VAR 0 2
63313: ARRAY
63314: PUSH
63315: LD_INT 1
63317: ARRAY
63318: PPUSH
63319: LD_EXP 58
63323: PUSH
63324: LD_VAR 0 1
63328: ARRAY
63329: PUSH
63330: LD_VAR 0 2
63334: ARRAY
63335: PUSH
63336: LD_INT 2
63338: ARRAY
63339: PPUSH
63340: CALL_OW 458
63344: AND
63345: IFFALSE 63439
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63347: LD_EXP 58
63351: PUSH
63352: LD_VAR 0 1
63356: ARRAY
63357: PUSH
63358: LD_VAR 0 2
63362: ARRAY
63363: PUSH
63364: LD_INT 1
63366: ARRAY
63367: PPUSH
63368: LD_EXP 58
63372: PUSH
63373: LD_VAR 0 1
63377: ARRAY
63378: PUSH
63379: LD_VAR 0 2
63383: ARRAY
63384: PUSH
63385: LD_INT 2
63387: ARRAY
63388: PPUSH
63389: LD_VAR 0 3
63393: PPUSH
63394: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63398: LD_ADDR_EXP 58
63402: PUSH
63403: LD_EXP 58
63407: PPUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: LD_EXP 58
63417: PUSH
63418: LD_VAR 0 1
63422: ARRAY
63423: PPUSH
63424: LD_VAR 0 2
63428: PPUSH
63429: CALL_OW 3
63433: PPUSH
63434: CALL_OW 1
63438: ST_TO_ADDR
// end ; end ;
63439: GO 63062
63441: POP
63442: POP
// end ;
63443: GO 62975
63445: POP
63446: POP
// end ;
63447: PPOPN 4
63449: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63450: LD_INT 0
63452: PPUSH
63453: PPUSH
63454: PPUSH
63455: PPUSH
// result := false ;
63456: LD_ADDR_VAR 0 4
63460: PUSH
63461: LD_INT 0
63463: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63464: LD_VAR 0 1
63468: PPUSH
63469: CALL_OW 264
63473: PUSH
63474: LD_INT 81
63476: EQUAL
63477: NOT
63478: IFFALSE 63482
// exit ;
63480: GO 63852
// side := GetSide ( unit ) ;
63482: LD_ADDR_VAR 0 6
63486: PUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: CALL_OW 255
63496: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63497: LD_ADDR_VAR 0 5
63501: PUSH
63502: LD_EXP 57
63506: PPUSH
63507: LD_VAR 0 1
63511: PPUSH
63512: CALL 20588 0 2
63516: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63517: LD_EXP 58
63521: PUSH
63522: LD_VAR 0 5
63526: ARRAY
63527: PUSH
63528: LD_EXP 59
63532: GREATEREQUAL
63533: IFFALSE 63537
// exit ;
63535: GO 63852
// ComMoveXY ( unit , x , y ) ;
63537: LD_VAR 0 1
63541: PPUSH
63542: LD_VAR 0 2
63546: PPUSH
63547: LD_VAR 0 3
63551: PPUSH
63552: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63556: LD_INT 35
63558: PPUSH
63559: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63563: LD_VAR 0 1
63567: PPUSH
63568: LD_VAR 0 2
63572: PPUSH
63573: LD_VAR 0 3
63577: PPUSH
63578: CALL 52634 0 3
63582: NOT
63583: IFFALSE 63596
63585: PUSH
63586: LD_VAR 0 1
63590: PPUSH
63591: CALL_OW 314
63595: AND
63596: IFFALSE 63600
// exit ;
63598: GO 63852
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63600: LD_VAR 0 2
63604: PPUSH
63605: LD_VAR 0 3
63609: PPUSH
63610: CALL_OW 428
63614: PUSH
63615: LD_VAR 0 1
63619: EQUAL
63620: IFFALSE 63634
63622: PUSH
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 314
63632: NOT
63633: AND
63634: IFFALSE 63556
// if MineAtPos ( x , y ) then
63636: LD_VAR 0 2
63640: PPUSH
63641: LD_VAR 0 3
63645: PPUSH
63646: CALL_OW 458
63650: IFFALSE 63654
// exit ;
63652: GO 63852
// if your_side = side then
63654: LD_OWVAR 2
63658: PUSH
63659: LD_VAR 0 6
63663: EQUAL
63664: IFFALSE 63683
// PlaySoundXY ( x , y , PlantMine ) ;
63666: LD_VAR 0 2
63670: PPUSH
63671: LD_VAR 0 3
63675: PPUSH
63676: LD_STRING PlantMine
63678: PPUSH
63679: CALL_OW 366
// repeat wait ( 1 ) ;
63683: LD_INT 1
63685: PPUSH
63686: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
63690: LD_VAR 0 2
63694: PPUSH
63695: LD_VAR 0 3
63699: PPUSH
63700: LD_VAR 0 6
63704: PPUSH
63705: LD_INT 0
63707: PPUSH
63708: CALL_OW 454
63712: IFFALSE 63683
// if MineAtPos ( x , y ) then
63714: LD_VAR 0 2
63718: PPUSH
63719: LD_VAR 0 3
63723: PPUSH
63724: CALL_OW 458
63728: IFFALSE 63844
// begin for i in minerMinesList [ index ] do
63730: LD_ADDR_VAR 0 7
63734: PUSH
63735: LD_EXP 58
63739: PUSH
63740: LD_VAR 0 5
63744: ARRAY
63745: PUSH
63746: FOR_IN
63747: IFFALSE 63789
// if i [ 1 ] = x and i [ 2 ] = y then
63749: LD_VAR 0 7
63753: PUSH
63754: LD_INT 1
63756: ARRAY
63757: PUSH
63758: LD_VAR 0 2
63762: EQUAL
63763: IFFALSE 63781
63765: PUSH
63766: LD_VAR 0 7
63770: PUSH
63771: LD_INT 2
63773: ARRAY
63774: PUSH
63775: LD_VAR 0 3
63779: EQUAL
63780: AND
63781: IFFALSE 63787
// exit ;
63783: POP
63784: POP
63785: GO 63852
63787: GO 63746
63789: POP
63790: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63791: LD_ADDR_EXP 58
63795: PUSH
63796: LD_EXP 58
63800: PPUSH
63801: LD_VAR 0 5
63805: PUSH
63806: LD_EXP 58
63810: PUSH
63811: LD_VAR 0 5
63815: ARRAY
63816: PUSH
63817: LD_INT 1
63819: PLUS
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PPUSH
63825: LD_VAR 0 2
63829: PUSH
63830: LD_VAR 0 3
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PPUSH
63839: CALL 20805 0 3
63843: ST_TO_ADDR
// end ; result := true ;
63844: LD_ADDR_VAR 0 4
63848: PUSH
63849: LD_INT 1
63851: ST_TO_ADDR
// end ;
63852: LD_VAR 0 4
63856: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63857: LD_INT 0
63859: PPUSH
63860: PPUSH
63861: PPUSH
// if not unit in minersList then
63862: LD_VAR 0 1
63866: PUSH
63867: LD_EXP 57
63871: IN
63872: NOT
63873: IFFALSE 63877
// exit ;
63875: GO 64084
// index := GetElementIndex ( minersList , unit ) ;
63877: LD_ADDR_VAR 0 6
63881: PUSH
63882: LD_EXP 57
63886: PPUSH
63887: LD_VAR 0 1
63891: PPUSH
63892: CALL 20588 0 2
63896: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63897: LD_ADDR_VAR 0 5
63901: PUSH
63902: DOUBLE
63903: LD_EXP 58
63907: PUSH
63908: LD_VAR 0 6
63912: ARRAY
63913: INC
63914: ST_TO_ADDR
63915: LD_INT 1
63917: PUSH
63918: FOR_DOWNTO
63919: IFFALSE 64082
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63921: LD_EXP 58
63925: PUSH
63926: LD_VAR 0 6
63930: ARRAY
63931: PUSH
63932: LD_VAR 0 5
63936: ARRAY
63937: PUSH
63938: LD_INT 1
63940: ARRAY
63941: PPUSH
63942: LD_EXP 58
63946: PUSH
63947: LD_VAR 0 6
63951: ARRAY
63952: PUSH
63953: LD_VAR 0 5
63957: ARRAY
63958: PUSH
63959: LD_INT 2
63961: ARRAY
63962: PPUSH
63963: LD_VAR 0 2
63967: PPUSH
63968: LD_VAR 0 3
63972: PPUSH
63973: CALL_OW 298
63977: PUSH
63978: LD_INT 6
63980: LESS
63981: IFFALSE 64080
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63983: LD_EXP 58
63987: PUSH
63988: LD_VAR 0 6
63992: ARRAY
63993: PUSH
63994: LD_VAR 0 5
63998: ARRAY
63999: PUSH
64000: LD_INT 1
64002: ARRAY
64003: PPUSH
64004: LD_EXP 58
64008: PUSH
64009: LD_VAR 0 6
64013: ARRAY
64014: PUSH
64015: LD_VAR 0 5
64019: ARRAY
64020: PUSH
64021: LD_INT 2
64023: ARRAY
64024: PPUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 255
64034: PPUSH
64035: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64039: LD_ADDR_EXP 58
64043: PUSH
64044: LD_EXP 58
64048: PPUSH
64049: LD_VAR 0 6
64053: PPUSH
64054: LD_EXP 58
64058: PUSH
64059: LD_VAR 0 6
64063: ARRAY
64064: PPUSH
64065: LD_VAR 0 5
64069: PPUSH
64070: CALL_OW 3
64074: PPUSH
64075: CALL_OW 1
64079: ST_TO_ADDR
// end ; end ;
64080: GO 63918
64082: POP
64083: POP
// end ;
64084: LD_VAR 0 4
64088: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64089: LD_INT 0
64091: PPUSH
64092: PPUSH
64093: PPUSH
64094: PPUSH
64095: PPUSH
64096: PPUSH
64097: PPUSH
64098: PPUSH
64099: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64100: LD_VAR 0 1
64104: PPUSH
64105: CALL_OW 264
64109: PUSH
64110: LD_INT 81
64112: EQUAL
64113: NOT
64114: IFTRUE 64129
64116: PUSH
64117: LD_VAR 0 1
64121: PUSH
64122: LD_EXP 57
64126: IN
64127: NOT
64128: OR
64129: IFFALSE 64133
// exit ;
64131: GO 64459
// index := GetElementIndex ( minersList , unit ) ;
64133: LD_ADDR_VAR 0 6
64137: PUSH
64138: LD_EXP 57
64142: PPUSH
64143: LD_VAR 0 1
64147: PPUSH
64148: CALL 20588 0 2
64152: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64153: LD_ADDR_VAR 0 8
64157: PUSH
64158: LD_EXP 59
64162: PUSH
64163: LD_EXP 58
64167: PUSH
64168: LD_VAR 0 6
64172: ARRAY
64173: MINUS
64174: ST_TO_ADDR
// if not minesFreeAmount then
64175: LD_VAR 0 8
64179: NOT
64180: IFFALSE 64184
// exit ;
64182: GO 64459
// tmp := [ ] ;
64184: LD_ADDR_VAR 0 7
64188: PUSH
64189: EMPTY
64190: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64191: LD_ADDR_VAR 0 5
64195: PUSH
64196: DOUBLE
64197: LD_INT 1
64199: DEC
64200: ST_TO_ADDR
64201: LD_VAR 0 8
64205: PUSH
64206: FOR_TO
64207: IFFALSE 64406
// begin _d := rand ( 0 , 5 ) ;
64209: LD_ADDR_VAR 0 11
64213: PUSH
64214: LD_INT 0
64216: PPUSH
64217: LD_INT 5
64219: PPUSH
64220: CALL_OW 12
64224: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64225: LD_ADDR_VAR 0 12
64229: PUSH
64230: LD_INT 2
64232: PPUSH
64233: LD_INT 6
64235: PPUSH
64236: CALL_OW 12
64240: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64241: LD_ADDR_VAR 0 9
64245: PUSH
64246: LD_VAR 0 2
64250: PPUSH
64251: LD_VAR 0 11
64255: PPUSH
64256: LD_VAR 0 12
64260: PPUSH
64261: CALL_OW 272
64265: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64266: LD_ADDR_VAR 0 10
64270: PUSH
64271: LD_VAR 0 3
64275: PPUSH
64276: LD_VAR 0 11
64280: PPUSH
64281: LD_VAR 0 12
64285: PPUSH
64286: CALL_OW 273
64290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64291: LD_VAR 0 9
64295: PPUSH
64296: LD_VAR 0 10
64300: PPUSH
64301: CALL_OW 488
64305: IFFALSE 64329
64307: PUSH
64308: LD_VAR 0 9
64312: PUSH
64313: LD_VAR 0 10
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_VAR 0 7
64326: IN
64327: NOT
64328: AND
64329: IFFALSE 64348
64331: PUSH
64332: LD_VAR 0 9
64336: PPUSH
64337: LD_VAR 0 10
64341: PPUSH
64342: CALL_OW 458
64346: NOT
64347: AND
64348: IFFALSE 64390
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64350: LD_ADDR_VAR 0 7
64354: PUSH
64355: LD_VAR 0 7
64359: PPUSH
64360: LD_VAR 0 7
64364: PUSH
64365: LD_INT 1
64367: PLUS
64368: PPUSH
64369: LD_VAR 0 9
64373: PUSH
64374: LD_VAR 0 10
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PPUSH
64383: CALL_OW 1
64387: ST_TO_ADDR
64388: GO 64404
// i := i - 1 ;
64390: LD_ADDR_VAR 0 5
64394: PUSH
64395: LD_VAR 0 5
64399: PUSH
64400: LD_INT 1
64402: MINUS
64403: ST_TO_ADDR
// end ;
64404: GO 64206
64406: POP
64407: POP
// for i in tmp do
64408: LD_ADDR_VAR 0 5
64412: PUSH
64413: LD_VAR 0 7
64417: PUSH
64418: FOR_IN
64419: IFFALSE 64457
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_VAR 0 5
64430: PUSH
64431: LD_INT 1
64433: ARRAY
64434: PPUSH
64435: LD_VAR 0 5
64439: PUSH
64440: LD_INT 2
64442: ARRAY
64443: PPUSH
64444: CALL 63450 0 3
64448: NOT
64449: IFFALSE 64455
// exit ;
64451: POP
64452: POP
64453: GO 64459
64455: GO 64418
64457: POP
64458: POP
// end ;
64459: LD_VAR 0 4
64463: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64464: LD_INT 0
64466: PPUSH
64467: PPUSH
64468: PPUSH
64469: PPUSH
64470: PPUSH
64471: PPUSH
64472: PPUSH
64473: PPUSH
64474: PPUSH
// if GetClass ( unit ) <> class_sniper then
64475: LD_VAR 0 1
64479: PPUSH
64480: CALL_OW 257
64484: PUSH
64485: LD_INT 5
64487: NONEQUAL
64488: IFFALSE 64492
// exit ;
64490: GO 64962
// dist := 8 ;
64492: LD_ADDR_VAR 0 5
64496: PUSH
64497: LD_INT 8
64499: ST_TO_ADDR
// viewRange := 12 ;
64500: LD_ADDR_VAR 0 8
64504: PUSH
64505: LD_INT 12
64507: ST_TO_ADDR
// side := GetSide ( unit ) ;
64508: LD_ADDR_VAR 0 6
64512: PUSH
64513: LD_VAR 0 1
64517: PPUSH
64518: CALL_OW 255
64522: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64523: LD_INT 61
64525: PPUSH
64526: LD_VAR 0 6
64530: PPUSH
64531: CALL_OW 321
64535: PUSH
64536: LD_INT 2
64538: EQUAL
64539: IFFALSE 64549
// viewRange := 16 ;
64541: LD_ADDR_VAR 0 8
64545: PUSH
64546: LD_INT 16
64548: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64549: LD_VAR 0 1
64553: PPUSH
64554: LD_VAR 0 2
64558: PPUSH
64559: LD_VAR 0 3
64563: PPUSH
64564: CALL_OW 297
64568: PUSH
64569: LD_VAR 0 5
64573: GREATER
64574: IFFALSE 64653
// begin ComMoveXY ( unit , x , y ) ;
64576: LD_VAR 0 1
64580: PPUSH
64581: LD_VAR 0 2
64585: PPUSH
64586: LD_VAR 0 3
64590: PPUSH
64591: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64595: LD_INT 35
64597: PPUSH
64598: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64602: LD_VAR 0 1
64606: PPUSH
64607: LD_VAR 0 2
64611: PPUSH
64612: LD_VAR 0 3
64616: PPUSH
64617: CALL 52634 0 3
64621: NOT
64622: IFFALSE 64626
// exit ;
64624: GO 64962
// until GetDistUnitXY ( unit , x , y ) < dist ;
64626: LD_VAR 0 1
64630: PPUSH
64631: LD_VAR 0 2
64635: PPUSH
64636: LD_VAR 0 3
64640: PPUSH
64641: CALL_OW 297
64645: PUSH
64646: LD_VAR 0 5
64650: LESS
64651: IFFALSE 64595
// end ; ComTurnXY ( unit , x , y ) ;
64653: LD_VAR 0 1
64657: PPUSH
64658: LD_VAR 0 2
64662: PPUSH
64663: LD_VAR 0 3
64667: PPUSH
64668: CALL_OW 118
// repeat if Multiplayer then
64672: LD_OWVAR 4
64676: IFFALSE 64687
// wait ( 35 ) else
64678: LD_INT 35
64680: PPUSH
64681: CALL_OW 67
64685: GO 64694
// wait ( 5 ) ;
64687: LD_INT 5
64689: PPUSH
64690: CALL_OW 67
// _d := GetDir ( unit ) ;
64694: LD_ADDR_VAR 0 11
64698: PUSH
64699: LD_VAR 0 1
64703: PPUSH
64704: CALL_OW 254
64708: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64709: LD_ADDR_VAR 0 7
64713: PUSH
64714: LD_VAR 0 1
64718: PPUSH
64719: CALL_OW 250
64723: PPUSH
64724: LD_VAR 0 1
64728: PPUSH
64729: CALL_OW 251
64733: PPUSH
64734: LD_VAR 0 2
64738: PPUSH
64739: LD_VAR 0 3
64743: PPUSH
64744: CALL 55270 0 4
64748: ST_TO_ADDR
// until dir = _d ;
64749: LD_VAR 0 7
64753: PUSH
64754: LD_VAR 0 11
64758: EQUAL
64759: IFFALSE 64672
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64761: LD_ADDR_VAR 0 9
64765: PUSH
64766: LD_VAR 0 1
64770: PPUSH
64771: CALL_OW 250
64775: PPUSH
64776: LD_VAR 0 7
64780: PPUSH
64781: LD_VAR 0 5
64785: PPUSH
64786: CALL_OW 272
64790: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64791: LD_ADDR_VAR 0 10
64795: PUSH
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL_OW 251
64805: PPUSH
64806: LD_VAR 0 7
64810: PPUSH
64811: LD_VAR 0 5
64815: PPUSH
64816: CALL_OW 273
64820: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64821: LD_VAR 0 9
64825: PPUSH
64826: LD_VAR 0 10
64830: PPUSH
64831: CALL_OW 488
64835: NOT
64836: IFFALSE 64840
// exit ;
64838: GO 64962
// ComAnimCustom ( unit , 1 ) ;
64840: LD_VAR 0 1
64844: PPUSH
64845: LD_INT 1
64847: PPUSH
64848: CALL_OW 592
// p := 0 ;
64852: LD_ADDR_VAR 0 12
64856: PUSH
64857: LD_INT 0
64859: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64860: LD_VAR 0 9
64864: PPUSH
64865: LD_VAR 0 10
64869: PPUSH
64870: LD_VAR 0 6
64874: PPUSH
64875: LD_VAR 0 8
64879: PPUSH
64880: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64884: LD_INT 35
64886: PPUSH
64887: CALL_OW 67
// p := Inc ( p ) ;
64891: LD_ADDR_VAR 0 12
64895: PUSH
64896: LD_VAR 0 12
64900: PPUSH
64901: CALL 55226 0 1
64905: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64906: LD_VAR 0 12
64910: PUSH
64911: LD_INT 3
64913: EQUAL
64914: IFTRUE 64928
64916: PUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 302
64926: NOT
64927: OR
64928: IFTRUE 64941
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 301
64940: OR
64941: IFFALSE 64884
// RemoveSeeing ( _x , _y , side ) ;
64943: LD_VAR 0 9
64947: PPUSH
64948: LD_VAR 0 10
64952: PPUSH
64953: LD_VAR 0 6
64957: PPUSH
64958: CALL_OW 331
// end ;
64962: LD_VAR 0 4
64966: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
64967: LD_INT 0
64969: PPUSH
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
64977: PPUSH
64978: PPUSH
64979: PPUSH
// if not unit then
64980: LD_VAR 0 1
64984: NOT
64985: IFFALSE 64989
// exit ;
64987: GO 65260
// side := GetSide ( unit ) ;
64989: LD_ADDR_VAR 0 3
64993: PUSH
64994: LD_VAR 0 1
64998: PPUSH
64999: CALL_OW 255
65003: ST_TO_ADDR
// x := GetX ( unit ) ;
65004: LD_ADDR_VAR 0 5
65008: PUSH
65009: LD_VAR 0 1
65013: PPUSH
65014: CALL_OW 250
65018: ST_TO_ADDR
// y := GetY ( unit ) ;
65019: LD_ADDR_VAR 0 6
65023: PUSH
65024: LD_VAR 0 1
65028: PPUSH
65029: CALL_OW 251
65033: ST_TO_ADDR
// r := 8 ;
65034: LD_ADDR_VAR 0 4
65038: PUSH
65039: LD_INT 8
65041: ST_TO_ADDR
// if x - r < 0 then
65042: LD_VAR 0 5
65046: PUSH
65047: LD_VAR 0 4
65051: MINUS
65052: PUSH
65053: LD_INT 0
65055: LESS
65056: IFFALSE 65068
// min_x := 0 else
65058: LD_ADDR_VAR 0 7
65062: PUSH
65063: LD_INT 0
65065: ST_TO_ADDR
65066: GO 65084
// min_x := x - r ;
65068: LD_ADDR_VAR 0 7
65072: PUSH
65073: LD_VAR 0 5
65077: PUSH
65078: LD_VAR 0 4
65082: MINUS
65083: ST_TO_ADDR
// if y - r < 0 then
65084: LD_VAR 0 6
65088: PUSH
65089: LD_VAR 0 4
65093: MINUS
65094: PUSH
65095: LD_INT 0
65097: LESS
65098: IFFALSE 65110
// min_y := 0 else
65100: LD_ADDR_VAR 0 8
65104: PUSH
65105: LD_INT 0
65107: ST_TO_ADDR
65108: GO 65126
// min_y := y - r ;
65110: LD_ADDR_VAR 0 8
65114: PUSH
65115: LD_VAR 0 6
65119: PUSH
65120: LD_VAR 0 4
65124: MINUS
65125: ST_TO_ADDR
// max_x := x + r ;
65126: LD_ADDR_VAR 0 9
65130: PUSH
65131: LD_VAR 0 5
65135: PUSH
65136: LD_VAR 0 4
65140: PLUS
65141: ST_TO_ADDR
// max_y := y + r ;
65142: LD_ADDR_VAR 0 10
65146: PUSH
65147: LD_VAR 0 6
65151: PUSH
65152: LD_VAR 0 4
65156: PLUS
65157: ST_TO_ADDR
// for _x = min_x to max_x do
65158: LD_ADDR_VAR 0 11
65162: PUSH
65163: DOUBLE
65164: LD_VAR 0 7
65168: DEC
65169: ST_TO_ADDR
65170: LD_VAR 0 9
65174: PUSH
65175: FOR_TO
65176: IFFALSE 65258
// for _y = min_y to max_y do
65178: LD_ADDR_VAR 0 12
65182: PUSH
65183: DOUBLE
65184: LD_VAR 0 8
65188: DEC
65189: ST_TO_ADDR
65190: LD_VAR 0 10
65194: PUSH
65195: FOR_TO
65196: IFFALSE 65254
// begin if not ValidHex ( _x , _y ) then
65198: LD_VAR 0 11
65202: PPUSH
65203: LD_VAR 0 12
65207: PPUSH
65208: CALL_OW 488
65212: NOT
65213: IFFALSE 65217
// continue ;
65215: GO 65195
// if MineAtPos ( _x , _y ) then
65217: LD_VAR 0 11
65221: PPUSH
65222: LD_VAR 0 12
65226: PPUSH
65227: CALL_OW 458
65231: IFFALSE 65252
// ViewMineAtPos ( _x , _y , side ) ;
65233: LD_VAR 0 11
65237: PPUSH
65238: LD_VAR 0 12
65242: PPUSH
65243: LD_VAR 0 3
65247: PPUSH
65248: CALL_OW 457
// end ;
65252: GO 65195
65254: POP
65255: POP
65256: GO 65175
65258: POP
65259: POP
// end ;
65260: LD_VAR 0 2
65264: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
65265: LD_INT 0
65267: PPUSH
65268: PPUSH
65269: PPUSH
65270: PPUSH
65271: PPUSH
65272: PPUSH
// if not units then
65273: LD_VAR 0 1
65277: NOT
65278: IFFALSE 65282
// exit ;
65280: GO 65712
// scaners := [ ] ;
65282: LD_ADDR_VAR 0 6
65286: PUSH
65287: EMPTY
65288: ST_TO_ADDR
// for i in units do
65289: LD_ADDR_VAR 0 3
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: FOR_IN
65300: IFFALSE 65457
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65302: LD_VAR 0 3
65306: PPUSH
65307: CALL_OW 264
65311: PUSH
65312: LD_INT 11
65314: NONEQUAL
65315: IFTRUE 65329
65317: PUSH
65318: LD_VAR 0 3
65322: PPUSH
65323: CALL_OW 302
65327: NOT
65328: OR
65329: IFTRUE 65346
65331: PUSH
65332: LD_VAR 0 3
65336: PPUSH
65337: CALL_OW 110
65341: PUSH
65342: LD_INT 502
65344: EQUAL
65345: OR
65346: IFFALSE 65350
// continue ;
65348: GO 65299
// ComStop ( i ) ;
65350: LD_VAR 0 3
65354: PPUSH
65355: CALL_OW 141
// x := GetX ( i ) ;
65359: LD_ADDR_VAR 0 4
65363: PUSH
65364: LD_VAR 0 3
65368: PPUSH
65369: CALL_OW 250
65373: ST_TO_ADDR
// y := GetY ( i ) ;
65374: LD_ADDR_VAR 0 5
65378: PUSH
65379: LD_VAR 0 3
65383: PPUSH
65384: CALL_OW 251
65388: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65389: LD_VAR 0 3
65393: PPUSH
65394: CALL_OW 255
65398: PUSH
65399: LD_OWVAR 2
65403: EQUAL
65404: IFFALSE 65423
// PlaySoundXY ( x , y , mineDetector ) ;
65406: LD_VAR 0 4
65410: PPUSH
65411: LD_VAR 0 5
65415: PPUSH
65416: LD_STRING mineDetector
65418: PPUSH
65419: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65423: LD_ADDR_VAR 0 6
65427: PUSH
65428: LD_VAR 0 6
65432: PPUSH
65433: LD_VAR 0 3
65437: PPUSH
65438: CALL 53853 0 2
65442: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65443: LD_VAR 0 3
65447: PPUSH
65448: LD_INT 502
65450: PPUSH
65451: CALL_OW 109
// end ;
65455: GO 65299
65457: POP
65458: POP
// if not scaners then
65459: LD_VAR 0 6
65463: NOT
65464: IFFALSE 65468
// exit ;
65466: GO 65712
// wait ( 3 ) ;
65468: LD_INT 3
65470: PPUSH
65471: CALL_OW 67
// timer := 6 ;
65475: LD_ADDR_VAR 0 7
65479: PUSH
65480: LD_INT 6
65482: ST_TO_ADDR
// repeat for i in scaners do
65483: LD_ADDR_VAR 0 3
65487: PUSH
65488: LD_VAR 0 6
65492: PUSH
65493: FOR_IN
65494: IFFALSE 65610
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65496: LD_VAR 0 3
65500: PPUSH
65501: CALL_OW 302
65505: NOT
65506: IFTRUE 65519
65508: PUSH
65509: LD_VAR 0 3
65513: PPUSH
65514: CALL_OW 314
65518: OR
65519: IFTRUE 65550
65521: PUSH
65522: LD_VAR 0 3
65526: PPUSH
65527: CALL_OW 263
65531: PUSH
65532: LD_INT 1
65534: EQUAL
65535: IFFALSE 65549
65537: PUSH
65538: LD_VAR 0 3
65542: PPUSH
65543: CALL_OW 311
65547: NOT
65548: AND
65549: OR
65550: IFFALSE 65594
// begin SetUnitDisplayNumber ( i , 0 ) ;
65552: LD_VAR 0 3
65556: PPUSH
65557: LD_INT 0
65559: PPUSH
65560: CALL_OW 505
// SetTag ( i , 0 ) ;
65564: LD_VAR 0 3
65568: PPUSH
65569: LD_INT 0
65571: PPUSH
65572: CALL_OW 109
// scaners := scaners diff i ;
65576: LD_ADDR_VAR 0 6
65580: PUSH
65581: LD_VAR 0 6
65585: PUSH
65586: LD_VAR 0 3
65590: DIFF
65591: ST_TO_ADDR
// continue ;
65592: GO 65493
// end ; SetUnitDisplayNumber ( i , timer ) ;
65594: LD_VAR 0 3
65598: PPUSH
65599: LD_VAR 0 7
65603: PPUSH
65604: CALL_OW 505
// end ;
65608: GO 65493
65610: POP
65611: POP
// if not scaners then
65612: LD_VAR 0 6
65616: NOT
65617: IFFALSE 65621
// exit ;
65619: GO 65712
// timer := Dec ( timer ) ;
65621: LD_ADDR_VAR 0 7
65625: PUSH
65626: LD_VAR 0 7
65630: PPUSH
65631: CALL 55248 0 1
65635: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65636: LD_INT 35
65638: PPUSH
65639: CALL_OW 67
// until timer = 0 ;
65643: LD_VAR 0 7
65647: PUSH
65648: LD_INT 0
65650: EQUAL
65651: IFFALSE 65483
// if not scaners then
65653: LD_VAR 0 6
65657: NOT
65658: IFFALSE 65662
// exit ;
65660: GO 65712
// for i in scaners do
65662: LD_ADDR_VAR 0 3
65666: PUSH
65667: LD_VAR 0 6
65671: PUSH
65672: FOR_IN
65673: IFFALSE 65710
// begin SetUnitDisplayNumber ( i , 0 ) ;
65675: LD_VAR 0 3
65679: PPUSH
65680: LD_INT 0
65682: PPUSH
65683: CALL_OW 505
// SetTag ( i , 0 ) ;
65687: LD_VAR 0 3
65691: PPUSH
65692: LD_INT 0
65694: PPUSH
65695: CALL_OW 109
// RevealDetectorMine ( i ) ;
65699: LD_VAR 0 3
65703: PPUSH
65704: CALL 64967 0 1
// end ;
65708: GO 65672
65710: POP
65711: POP
// end ;
65712: LD_VAR 0 2
65716: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
65717: LD_INT 0
65719: PPUSH
// if p1 = mine_detector_mode then
65720: LD_VAR 0 2
65724: PUSH
65725: LD_INT 103
65727: EQUAL
65728: IFFALSE 65739
// DetectMine ( units ) ;
65730: LD_VAR 0 1
65734: PPUSH
65735: CALL 65265 0 1
// end ; end_of_file
65739: LD_VAR 0 7
65743: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65744: PPOPN 6
65746: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65747: LD_INT 0
65749: PPUSH
// begin if not units then
65750: LD_VAR 0 1
65754: NOT
65755: IFFALSE 65759
// exit ;
65757: GO 65793
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
65759: LD_VAR 0 1
65763: PPUSH
65764: LD_VAR 0 2
65768: PPUSH
65769: LD_VAR 0 3
65773: PPUSH
65774: LD_VAR 0 4
65778: PPUSH
65779: LD_VAR 0 5
65783: PPUSH
65784: LD_VAR 0 6
65788: PPUSH
65789: CALL 65717 0 6
// end ;
65793: PPOPN 7
65795: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65796: LD_EXP 3
65800: PUSH
65801: LD_INT 4
65803: EQUAL
65804: IFFALSE 65840
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65806: LD_STRING setGameDifficulty(
65808: PUSH
65809: LD_OWVAR 67
65813: STR
65814: PUSH
65815: LD_STRING )
65817: STR
65818: PPUSH
65819: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65823: LD_STRING displayDifficulty(
65825: PUSH
65826: LD_OWVAR 67
65830: STR
65831: PUSH
65832: LD_STRING )
65834: STR
65835: PPUSH
65836: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65840: CALL 65869 0 0
// end ; end_of_file
65844: PPOPN 1
65846: END
// every 0 0$1 do
65847: GO 65849
65849: DISABLE
// begin enable ;
65850: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65851: LD_STRING updateTimer(
65853: PUSH
65854: LD_OWVAR 1
65858: STR
65859: PUSH
65860: LD_STRING );
65862: STR
65863: PPUSH
65864: CALL_OW 559
// end ;
65868: END
// export function SOS_MapStart ( ) ; begin
65869: LD_INT 0
65871: PPUSH
// UpdateFactoryWaypoints ( ) ;
65872: CALL 66803 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65876: CALL 67055 0 0
// ParseMultiDataToLua ( ) ;
65880: CALL 67202 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
65884: LD_STRING setSpecLogoNumber(
65886: PUSH
65887: LD_INT 2
65889: STR
65890: PUSH
65891: LD_STRING ,
65893: STR
65894: PUSH
65895: LD_INT 1
65897: STR
65898: PUSH
65899: LD_STRING )
65901: STR
65902: PPUSH
65903: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
65907: LD_STRING setSpecLogoNumber(
65909: PUSH
65910: LD_INT 3
65912: STR
65913: PUSH
65914: LD_STRING ,
65916: STR
65917: PUSH
65918: LD_INT 2
65920: STR
65921: PUSH
65922: LD_STRING )
65924: STR
65925: PPUSH
65926: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
65930: LD_STRING setSpecLogoNumber(
65932: PUSH
65933: LD_INT 4
65935: STR
65936: PUSH
65937: LD_STRING ,
65939: STR
65940: PUSH
65941: LD_INT 3
65943: STR
65944: PUSH
65945: LD_STRING )
65947: STR
65948: PPUSH
65949: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
65953: LD_STRING setSpecLogoNumber(
65955: PUSH
65956: LD_INT 5
65958: STR
65959: PUSH
65960: LD_STRING ,
65962: STR
65963: PUSH
65964: LD_INT 4
65966: STR
65967: PUSH
65968: LD_STRING )
65970: STR
65971: PPUSH
65972: CALL_OW 559
// end ;
65976: LD_VAR 0 1
65980: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
65981: LD_INT 0
65983: PPUSH
65984: PPUSH
65985: PPUSH
65986: PPUSH
65987: PPUSH
65988: PPUSH
65989: PPUSH
65990: PPUSH
65991: PPUSH
// for i := 1 to 8 do
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: DOUBLE
65998: LD_INT 1
66000: DEC
66001: ST_TO_ADDR
66002: LD_INT 8
66004: PUSH
66005: FOR_TO
66006: IFFALSE 66391
// begin if mpSidePositions [ i ] then
66008: LD_EXP 7
66012: PUSH
66013: LD_VAR 0 2
66017: ARRAY
66018: IFFALSE 66389
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
66020: LD_ADDR_VAR 0 7
66024: PUSH
66025: LD_INT 22
66027: PUSH
66028: LD_VAR 0 2
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 21
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PPUSH
66051: CALL_OW 69
66055: PPUSH
66056: CALL 17887 0 1
66060: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66061: LD_ADDR_VAR 0 9
66065: PUSH
66066: LD_INT 22
66068: PUSH
66069: LD_VAR 0 2
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: LD_INT 30
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: LD_INT 30
66093: PUSH
66094: LD_INT 1
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PPUSH
66110: CALL_OW 69
66114: ST_TO_ADDR
// crates := 0 ;
66115: LD_ADDR_VAR 0 4
66119: PUSH
66120: LD_INT 0
66122: ST_TO_ADDR
// oil := 0 ;
66123: LD_ADDR_VAR 0 5
66127: PUSH
66128: LD_INT 0
66130: ST_TO_ADDR
// sib := 0 ;
66131: LD_ADDR_VAR 0 6
66135: PUSH
66136: LD_INT 0
66138: ST_TO_ADDR
// if bases then
66139: LD_VAR 0 9
66143: IFFALSE 66249
// begin for j in bases do
66145: LD_ADDR_VAR 0 3
66149: PUSH
66150: LD_VAR 0 9
66154: PUSH
66155: FOR_IN
66156: IFFALSE 66247
// begin base := GetBase ( j ) ;
66158: LD_ADDR_VAR 0 8
66162: PUSH
66163: LD_VAR 0 3
66167: PPUSH
66168: CALL_OW 274
66172: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66173: LD_ADDR_VAR 0 4
66177: PUSH
66178: LD_VAR 0 4
66182: PUSH
66183: LD_VAR 0 8
66187: PPUSH
66188: LD_INT 1
66190: PPUSH
66191: CALL_OW 275
66195: PLUS
66196: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66197: LD_ADDR_VAR 0 5
66201: PUSH
66202: LD_VAR 0 5
66206: PUSH
66207: LD_VAR 0 8
66211: PPUSH
66212: LD_INT 2
66214: PPUSH
66215: CALL_OW 275
66219: PLUS
66220: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66221: LD_ADDR_VAR 0 6
66225: PUSH
66226: LD_VAR 0 6
66230: PUSH
66231: LD_VAR 0 8
66235: PPUSH
66236: LD_INT 3
66238: PPUSH
66239: CALL_OW 275
66243: PLUS
66244: ST_TO_ADDR
// end ;
66245: GO 66155
66247: POP
66248: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66249: LD_STRING setSpecText(
66251: PUSH
66252: LD_VAR 0 2
66256: STR
66257: PUSH
66258: LD_STRING ,
66260: STR
66261: PUSH
66262: LD_INT 2
66264: STR
66265: PUSH
66266: LD_STRING ,
66268: STR
66269: PUSH
66270: LD_VAR 0 4
66274: STR
66275: PUSH
66276: LD_STRING )
66278: STR
66279: PPUSH
66280: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66284: LD_STRING setSpecText(
66286: PUSH
66287: LD_VAR 0 2
66291: STR
66292: PUSH
66293: LD_STRING ,
66295: STR
66296: PUSH
66297: LD_INT 3
66299: STR
66300: PUSH
66301: LD_STRING ,
66303: STR
66304: PUSH
66305: LD_VAR 0 5
66309: STR
66310: PUSH
66311: LD_STRING )
66313: STR
66314: PPUSH
66315: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
66319: LD_STRING setSpecText(
66321: PUSH
66322: LD_VAR 0 2
66326: STR
66327: PUSH
66328: LD_STRING ,
66330: STR
66331: PUSH
66332: LD_INT 4
66334: STR
66335: PUSH
66336: LD_STRING ,
66338: STR
66339: PUSH
66340: LD_VAR 0 6
66344: STR
66345: PUSH
66346: LD_STRING )
66348: STR
66349: PPUSH
66350: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
66354: LD_STRING setSpecText(
66356: PUSH
66357: LD_VAR 0 2
66361: STR
66362: PUSH
66363: LD_STRING ,
66365: STR
66366: PUSH
66367: LD_INT 5
66369: STR
66370: PUSH
66371: LD_STRING ,
66373: STR
66374: PUSH
66375: LD_VAR 0 7
66379: STR
66380: PUSH
66381: LD_STRING )
66383: STR
66384: PPUSH
66385: CALL_OW 559
// end ; end ;
66389: GO 66005
66391: POP
66392: POP
// end ;
66393: LD_VAR 0 1
66397: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
66398: LD_INT 2
66400: PUSH
66401: LD_INT 30
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 30
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: PPUSH
66426: CALL_OW 69
66430: IFFALSE 66440
66432: GO 66434
66434: DISABLE
// begin enable ;
66435: ENABLE
// UpdateSpectatorBar ;
66436: CALL 65981 0 0
// end ;
66440: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66441: LD_INT 0
66443: PPUSH
// end ;
66444: LD_VAR 0 12
66448: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66449: LD_INT 0
66451: PPUSH
66452: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66453: LD_VAR 0 1
66457: NOT
66458: IFTRUE 66477
66460: PUSH
66461: LD_VAR 0 2
66465: PPUSH
66466: LD_VAR 0 3
66470: PPUSH
66471: CALL_OW 488
66475: NOT
66476: OR
66477: IFTRUE 66512
66479: PUSH
66480: LD_VAR 0 1
66484: PPUSH
66485: CALL_OW 266
66489: PUSH
66490: LD_INT 3
66492: NONEQUAL
66493: IFFALSE 66511
66495: PUSH
66496: LD_VAR 0 1
66500: PPUSH
66501: CALL_OW 247
66505: PUSH
66506: LD_INT 1
66508: EQUAL
66509: NOT
66510: AND
66511: OR
66512: IFFALSE 66516
// exit ;
66514: GO 66798
// if GetType ( factory ) = unit_human then
66516: LD_VAR 0 1
66520: PPUSH
66521: CALL_OW 247
66525: PUSH
66526: LD_INT 1
66528: EQUAL
66529: IFFALSE 66546
// factory := IsInUnit ( factory ) ;
66531: LD_ADDR_VAR 0 1
66535: PUSH
66536: LD_VAR 0 1
66540: PPUSH
66541: CALL_OW 310
66545: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66546: LD_VAR 0 1
66550: PPUSH
66551: CALL_OW 266
66555: PUSH
66556: LD_INT 3
66558: NONEQUAL
66559: IFFALSE 66563
// exit ;
66561: GO 66798
// for i := 1 to Count ( factoryWaypoints ) do
66563: LD_ADDR_VAR 0 5
66567: PUSH
66568: DOUBLE
66569: LD_INT 1
66571: DEC
66572: ST_TO_ADDR
66573: LD_EXP 60
66577: PPUSH
66578: CALL 17887 0 1
66582: PUSH
66583: FOR_TO
66584: IFFALSE 66746
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
66586: LD_VAR 0 2
66590: PPUSH
66591: LD_VAR 0 3
66595: PPUSH
66596: CALL_OW 428
66600: PUSH
66601: LD_EXP 60
66605: PUSH
66606: LD_VAR 0 5
66610: ARRAY
66611: PUSH
66612: LD_INT 2
66614: ARRAY
66615: EQUAL
66616: IFFALSE 66648
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66618: LD_ADDR_EXP 60
66622: PUSH
66623: LD_EXP 60
66627: PPUSH
66628: LD_VAR 0 5
66632: PPUSH
66633: CALL_OW 3
66637: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66638: CALL 66803 0 0
// exit ;
66642: POP
66643: POP
66644: GO 66798
// end else
66646: GO 66744
// if factory = factoryWaypoints [ i ] [ 2 ] then
66648: LD_VAR 0 1
66652: PUSH
66653: LD_EXP 60
66657: PUSH
66658: LD_VAR 0 5
66662: ARRAY
66663: PUSH
66664: LD_INT 2
66666: ARRAY
66667: EQUAL
66668: IFFALSE 66744
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66670: LD_ADDR_EXP 60
66674: PUSH
66675: LD_EXP 60
66679: PPUSH
66680: LD_VAR 0 5
66684: PPUSH
66685: CALL_OW 3
66689: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66690: LD_ADDR_EXP 60
66694: PUSH
66695: LD_EXP 60
66699: PPUSH
66700: LD_VAR 0 1
66704: PPUSH
66705: CALL_OW 255
66709: PUSH
66710: LD_VAR 0 1
66714: PUSH
66715: LD_VAR 0 2
66719: PUSH
66720: LD_VAR 0 3
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: PPUSH
66731: CALL 53853 0 2
66735: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66736: CALL 66803 0 0
// exit ;
66740: POP
66741: POP
66742: GO 66798
// end ; end ;
66744: GO 66583
66746: POP
66747: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66748: LD_ADDR_EXP 60
66752: PUSH
66753: LD_EXP 60
66757: PPUSH
66758: LD_VAR 0 1
66762: PPUSH
66763: CALL_OW 255
66767: PUSH
66768: LD_VAR 0 1
66772: PUSH
66773: LD_VAR 0 2
66777: PUSH
66778: LD_VAR 0 3
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: PPUSH
66789: CALL 53853 0 2
66793: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66794: CALL 66803 0 0
// end ;
66798: LD_VAR 0 4
66802: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66803: LD_INT 0
66805: PPUSH
66806: PPUSH
66807: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66808: LD_STRING resetFactoryWaypoint();
66810: PPUSH
66811: CALL_OW 559
// if factoryWaypoints then
66815: LD_EXP 60
66819: IFFALSE 66940
// begin list := factoryWaypoints ;
66821: LD_ADDR_VAR 0 3
66825: PUSH
66826: LD_EXP 60
66830: ST_TO_ADDR
// for i := 1 to list do
66831: LD_ADDR_VAR 0 2
66835: PUSH
66836: DOUBLE
66837: LD_INT 1
66839: DEC
66840: ST_TO_ADDR
66841: LD_VAR 0 3
66845: PUSH
66846: FOR_TO
66847: IFFALSE 66938
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66849: LD_STRING setFactoryWaypointXY(
66851: PUSH
66852: LD_VAR 0 3
66856: PUSH
66857: LD_VAR 0 2
66861: ARRAY
66862: PUSH
66863: LD_INT 1
66865: ARRAY
66866: STR
66867: PUSH
66868: LD_STRING ,
66870: STR
66871: PUSH
66872: LD_VAR 0 3
66876: PUSH
66877: LD_VAR 0 2
66881: ARRAY
66882: PUSH
66883: LD_INT 2
66885: ARRAY
66886: STR
66887: PUSH
66888: LD_STRING ,
66890: STR
66891: PUSH
66892: LD_VAR 0 3
66896: PUSH
66897: LD_VAR 0 2
66901: ARRAY
66902: PUSH
66903: LD_INT 3
66905: ARRAY
66906: STR
66907: PUSH
66908: LD_STRING ,
66910: STR
66911: PUSH
66912: LD_VAR 0 3
66916: PUSH
66917: LD_VAR 0 2
66921: ARRAY
66922: PUSH
66923: LD_INT 4
66925: ARRAY
66926: STR
66927: PUSH
66928: LD_STRING )
66930: STR
66931: PPUSH
66932: CALL_OW 559
66936: GO 66846
66938: POP
66939: POP
// end ; end ;
66940: LD_VAR 0 1
66944: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66945: LD_INT 0
66947: PPUSH
// if HexInfo ( x , y ) = warehouse then
66948: LD_VAR 0 2
66952: PPUSH
66953: LD_VAR 0 3
66957: PPUSH
66958: CALL_OW 428
66962: PUSH
66963: LD_VAR 0 1
66967: EQUAL
66968: IFFALSE 66995
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66970: LD_ADDR_EXP 62
66974: PUSH
66975: LD_EXP 62
66979: PPUSH
66980: LD_VAR 0 1
66984: PPUSH
66985: LD_INT 0
66987: PPUSH
66988: CALL_OW 1
66992: ST_TO_ADDR
66993: GO 67046
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66995: LD_ADDR_EXP 62
66999: PUSH
67000: LD_EXP 62
67004: PPUSH
67005: LD_VAR 0 1
67009: PPUSH
67010: LD_VAR 0 1
67014: PPUSH
67015: CALL_OW 255
67019: PUSH
67020: LD_VAR 0 1
67024: PUSH
67025: LD_VAR 0 2
67029: PUSH
67030: LD_VAR 0 3
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: PPUSH
67041: CALL_OW 1
67045: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67046: CALL 67055 0 0
// end ;
67050: LD_VAR 0 4
67054: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67055: LD_INT 0
67057: PPUSH
67058: PPUSH
67059: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67060: LD_STRING resetWarehouseGatheringPoints();
67062: PPUSH
67063: CALL_OW 559
// if warehouseGatheringPoints then
67067: LD_EXP 62
67071: IFFALSE 67197
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: LD_EXP 62
67082: PPUSH
67083: CALL 57787 0 1
67087: ST_TO_ADDR
// for i := 1 to list do
67088: LD_ADDR_VAR 0 2
67092: PUSH
67093: DOUBLE
67094: LD_INT 1
67096: DEC
67097: ST_TO_ADDR
67098: LD_VAR 0 3
67102: PUSH
67103: FOR_TO
67104: IFFALSE 67195
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67106: LD_STRING setWarehouseGatheringPointXY(
67108: PUSH
67109: LD_VAR 0 3
67113: PUSH
67114: LD_VAR 0 2
67118: ARRAY
67119: PUSH
67120: LD_INT 1
67122: ARRAY
67123: STR
67124: PUSH
67125: LD_STRING ,
67127: STR
67128: PUSH
67129: LD_VAR 0 3
67133: PUSH
67134: LD_VAR 0 2
67138: ARRAY
67139: PUSH
67140: LD_INT 2
67142: ARRAY
67143: STR
67144: PUSH
67145: LD_STRING ,
67147: STR
67148: PUSH
67149: LD_VAR 0 3
67153: PUSH
67154: LD_VAR 0 2
67158: ARRAY
67159: PUSH
67160: LD_INT 3
67162: ARRAY
67163: STR
67164: PUSH
67165: LD_STRING ,
67167: STR
67168: PUSH
67169: LD_VAR 0 3
67173: PUSH
67174: LD_VAR 0 2
67178: ARRAY
67179: PUSH
67180: LD_INT 4
67182: ARRAY
67183: STR
67184: PUSH
67185: LD_STRING )
67187: STR
67188: PPUSH
67189: CALL_OW 559
67193: GO 67103
67195: POP
67196: POP
// end ; end ;
67197: LD_VAR 0 1
67201: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67202: LD_INT 0
67204: PPUSH
67205: PPUSH
// if not mpSidePositions then
67206: LD_EXP 7
67210: NOT
67211: IFFALSE 67215
// exit ;
67213: GO 67286
// result :=  ;
67215: LD_ADDR_VAR 0 1
67219: PUSH
67220: LD_STRING 
67222: ST_TO_ADDR
// for i := 1 to 8 do
67223: LD_ADDR_VAR 0 2
67227: PUSH
67228: DOUBLE
67229: LD_INT 1
67231: DEC
67232: ST_TO_ADDR
67233: LD_INT 8
67235: PUSH
67236: FOR_TO
67237: IFFALSE 67267
// begin result := result & mpSidePositions [ i ] & ; ;
67239: LD_ADDR_VAR 0 1
67243: PUSH
67244: LD_VAR 0 1
67248: PUSH
67249: LD_EXP 7
67253: PUSH
67254: LD_VAR 0 2
67258: ARRAY
67259: STR
67260: PUSH
67261: LD_STRING ;
67263: STR
67264: ST_TO_ADDR
// end ;
67265: GO 67236
67267: POP
67268: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67269: LD_STRING setMultiplayerRealPosition("
67271: PUSH
67272: LD_VAR 0 1
67276: STR
67277: PUSH
67278: LD_STRING ");
67280: STR
67281: PPUSH
67282: CALL_OW 559
// end ;
67286: LD_VAR 0 1
67290: RET
