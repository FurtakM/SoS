// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 4628 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 5051 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 , 0 , 1 , 1 , ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 0
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 0
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 0
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: LD_INT 1
  90: PUSH
  91: EMPTY
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: LIST
 114: ST_TO_ADDR
// mpGameSettingsValues := [ [ ] , [ 9 , 12 , 15 , 24 ] , [ 3 , 5 , 7 , 9 ] , [ [ 0 , 0 , 0 ] , [ 1000 , 300 , 0 ] , [ 2000 , 750 , 100 ] , [ 3000 , 1500 , 300 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ ] , [ ] , [ ] , [ 0 , 1 ] , [ ] , [ ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 5 5$0 , 10 10$0 , 15 15$0 , 20 20$0 ] , [ 60 60$0 , 90 90$0 , 120 120$0 ] , ] ;
 115: LD_ADDR_EXP 5
 119: PUSH
 120: EMPTY
 121: PUSH
 122: LD_INT 9
 124: PUSH
 125: LD_INT 12
 127: PUSH
 128: LD_INT 15
 130: PUSH
 131: LD_INT 24
 133: PUSH
 134: EMPTY
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: PUSH
 140: LD_INT 3
 142: PUSH
 143: LD_INT 5
 145: PUSH
 146: LD_INT 7
 148: PUSH
 149: LD_INT 9
 151: PUSH
 152: EMPTY
 153: LIST
 154: LIST
 155: LIST
 156: LIST
 157: PUSH
 158: LD_INT 0
 160: PUSH
 161: LD_INT 0
 163: PUSH
 164: LD_INT 0
 166: PUSH
 167: EMPTY
 168: LIST
 169: LIST
 170: LIST
 171: PUSH
 172: LD_INT 1000
 174: PUSH
 175: LD_INT 300
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: PUSH
 186: LD_INT 2000
 188: PUSH
 189: LD_INT 750
 191: PUSH
 192: LD_INT 100
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_INT 3000
 202: PUSH
 203: LD_INT 1500
 205: PUSH
 206: LD_INT 300
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: PUSH
 220: LD_INT 1
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 3
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 0
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: LD_INT 2
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_INT 0
 254: PUSH
 255: LD_INT 1
 257: PUSH
 258: LD_INT 2
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: EMPTY
 267: PUSH
 268: EMPTY
 269: PUSH
 270: EMPTY
 271: PUSH
 272: LD_INT 0
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: EMPTY
 283: PUSH
 284: EMPTY
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: LD_INT 13650
 291: PUSH
 292: LD_INT 7350
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 2
 305: PUSH
 306: LD_INT 4
 308: PUSH
 309: LD_INT 6
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: PUSH
 320: EMPTY
 321: PUSH
 322: LD_INT 0
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: LD_INT 31500
 330: PUSH
 331: LD_INT 52500
 333: PUSH
 334: LD_INT 63000
 336: PUSH
 337: LD_INT 94500
 339: PUSH
 340: LD_INT 126000
 342: PUSH
 343: LD_INT 189000
 345: PUSH
 346: LD_INT 210000
 348: PUSH
 349: LD_INT 252000
 351: PUSH
 352: LD_INT 378000
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: PUSH
 368: EMPTY
 369: PUSH
 370: EMPTY
 371: PUSH
 372: LD_INT 10500
 374: PUSH
 375: LD_INT 21000
 377: PUSH
 378: LD_INT 31500
 380: PUSH
 381: LD_INT 42000
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: LIST
 389: PUSH
 390: LD_INT 126000
 392: PUSH
 393: LD_INT 189000
 395: PUSH
 396: LD_INT 252000
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: LIST
 418: LIST
 419: LIST
 420: LIST
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: LIST
 426: LIST
 427: ST_TO_ADDR
// mpGameSettings := [ 0 , 24 , 4 , [ 1000 , 300 , 0 ] , 3 , 1 , 2 , 0 , 0 , 0 , 1 , - 1 , 0 , 0 0$20 , 3 , 0 , 0 , 0 , 0 , 0 , 3 3$0 , 60 60$0 ] ;
 428: LD_ADDR_EXP 6
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 24
 438: PUSH
 439: LD_INT 4
 441: PUSH
 442: LD_INT 1000
 444: PUSH
 445: LD_INT 300
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 1
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 1
 479: NEG
 480: PUSH
 481: LD_INT 0
 483: PUSH
 484: LD_INT 700
 486: PUSH
 487: LD_INT 3
 489: PUSH
 490: LD_INT 0
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: LD_INT 0
 501: PUSH
 502: LD_INT 0
 504: PUSH
 505: LD_INT 6300
 507: PUSH
 508: LD_INT 126000
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: ST_TO_ADDR
// mpGameType := GameTypeArmsRace ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_INT 6
 542: ST_TO_ADDR
// your_side := 3 ;
 543: LD_ADDR_OWVAR 2
 547: PUSH
 548: LD_INT 3
 550: ST_TO_ADDR
// mpSidePositions := [ 3 , 2 , 1 , 4 , 5 , 6 , 7 , 8 ] ;
 551: LD_ADDR_EXP 7
 555: PUSH
 556: LD_INT 3
 558: PUSH
 559: LD_INT 2
 561: PUSH
 562: LD_INT 1
 564: PUSH
 565: LD_INT 4
 567: PUSH
 568: LD_INT 5
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 7
 576: PUSH
 577: LD_INT 8
 579: PUSH
 580: EMPTY
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: ST_TO_ADDR
// mpSideTeams := [ 2 , 1 , 1 , 2 , 2 , 2 , 2 , 2 ] ;
 590: LD_ADDR_EXP 8
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: LD_INT 2
 606: PUSH
 607: LD_INT 2
 609: PUSH
 610: LD_INT 2
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 2
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: ST_TO_ADDR
// mpSideNations := [ 3 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 629: LD_ADDR_EXP 9
 633: PUSH
 634: LD_INT 3
 636: PUSH
 637: LD_INT 2
 639: PUSH
 640: LD_INT 3
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: LD_INT 2
 648: PUSH
 649: LD_INT 3
 651: PUSH
 652: LD_INT 1
 654: PUSH
 655: LD_INT 2
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: LIST
 666: LIST
 667: ST_TO_ADDR
// mpTeams := [ [ 3 , 2 ] , [ 1 , 4 , 5 , 6 , 7 , 8 ] ] ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 1
 685: PUSH
 686: LD_INT 4
 688: PUSH
 689: LD_INT 5
 691: PUSH
 692: LD_INT 6
 694: PUSH
 695: LD_INT 7
 697: PUSH
 698: LD_INT 8
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: ST_TO_ADDR
// mpTeamGame := true ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// mpMapSize := [ 140 , 250 ] ;
 721: LD_ADDR_EXP 29
 725: PUSH
 726: LD_INT 140
 728: PUSH
 729: LD_INT 250
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: ST_TO_ADDR
// end ;
 736: LD_VAR 0 1
 740: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 741: LD_INT 0
 743: PPUSH
 744: PPUSH
 745: PPUSH
 746: PPUSH
 747: PPUSH
 748: PPUSH
 749: PPUSH
// mpBuildUpAreas := [ buildUpNorthArea , buildUpNorthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea , buildUpSouthArea ] ;
 750: LD_ADDR_EXP 19
 754: PUSH
 755: LD_INT 1
 757: PUSH
 758: LD_INT 1
 760: PUSH
 761: LD_INT 2
 763: PUSH
 764: LD_INT 2
 766: PUSH
 767: LD_INT 2
 769: PUSH
 770: LD_INT 2
 772: PUSH
 773: LD_INT 2
 775: PUSH
 776: LD_INT 2
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: LIST
 785: LIST
 786: LIST
 787: LIST
 788: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 789: LD_ADDR_EXP 18
 793: PUSH
 794: EMPTY
 795: PUSH
 796: LD_EXP 19
 800: UNION
 801: ST_TO_ADDR
// if gameType in [ GameTypeSurvival , GameTypeArmsRace ] then
 802: LD_VAR 0 1
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 6
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: IN
 817: IFFALSE 829
// baseLevel := 1 else
 819: LD_ADDR_VAR 0 7
 823: PUSH
 824: LD_INT 1
 826: ST_TO_ADDR
 827: GO 843
// baseLevel := mpGameSettings [ 1 ] ;
 829: LD_ADDR_VAR 0 7
 833: PUSH
 834: LD_EXP 6
 838: PUSH
 839: LD_INT 1
 841: ARRAY
 842: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 843: LD_ADDR_EXP 24
 847: PUSH
 848: LD_EXP 6
 852: PUSH
 853: LD_INT 2
 855: ARRAY
 856: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 857: LD_ADDR_EXP 25
 861: PUSH
 862: LD_EXP 6
 866: PUSH
 867: LD_INT 3
 869: ARRAY
 870: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 871: LD_ADDR_EXP 15
 875: PUSH
 876: LD_EXP 6
 880: PUSH
 881: LD_INT 4
 883: ARRAY
 884: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 885: LD_ADDR_EXP 27
 889: PUSH
 890: LD_EXP 6
 894: PUSH
 895: LD_INT 5
 897: ARRAY
 898: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 899: LD_ADDR_VAR 0 5
 903: PUSH
 904: LD_EXP 6
 908: PUSH
 909: LD_INT 6
 911: ARRAY
 912: PUSH
 913: LD_INT 0
 915: GREATER
 916: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 917: LD_ADDR_VAR 0 6
 921: PUSH
 922: LD_EXP 6
 926: PUSH
 927: LD_INT 7
 929: ARRAY
 930: PUSH
 931: LD_INT 0
 933: GREATER
 934: ST_TO_ADDR
// kingCamArea := 0 ;
 935: LD_ADDR_EXP 2
 939: PUSH
 940: LD_INT 0
 942: ST_TO_ADDR
// kingArea := 0 ;
 943: LD_ADDR_EXP 1
 947: PUSH
 948: LD_INT 0
 950: ST_TO_ADDR
// if gameType = GameTypeKing then
 951: LD_VAR 0 1
 955: PUSH
 956: LD_INT 3
 958: EQUAL
 959: IFFALSE 999
// begin mpKingArea := 0 ;
 961: LD_ADDR_EXP 34
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
 969: LD_ADDR_EXP 35
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 8
 981: ARRAY
 982: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
 983: LD_ADDR_EXP 37
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 10
 995: ARRAY
 996: ST_TO_ADDR
// end else
 997: GO 1023
// begin mpKingArea := 0 ;
 999: LD_ADDR_EXP 34
1003: PUSH
1004: LD_INT 0
1006: ST_TO_ADDR
// mpPoints := 0 ;
1007: LD_ADDR_EXP 35
1011: PUSH
1012: LD_INT 0
1014: ST_TO_ADDR
// mpEmissions := 0 ;
1015: LD_ADDR_EXP 37
1019: PUSH
1020: LD_INT 0
1022: ST_TO_ADDR
// end ; mpVehicles := [ [ [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_manual , us_heavy_gun ] , [ us_morphling , engine_siberite , control_computer , us_cargo_bay ] ] , [ [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] ] , [ [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_siberite , control_manual , ru_heavy_gun ] , [ ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay ] ] ] ;
1023: LD_ADDR_EXP 36
1027: PUSH
1028: LD_INT 5
1030: PUSH
1031: LD_INT 3
1033: PUSH
1034: LD_INT 1
1036: PUSH
1037: LD_INT 6
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: LD_INT 3
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 6
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 5
1066: PUSH
1067: LD_INT 3
1069: PUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: PUSH
1087: LD_INT 14
1089: PUSH
1090: LD_INT 3
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: LD_INT 27
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_INT 14
1107: PUSH
1108: LD_INT 3
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: LD_INT 27
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_INT 14
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 5
1131: PUSH
1132: LD_INT 32
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 23
1148: PUSH
1149: LD_INT 3
1151: PUSH
1152: LD_INT 1
1154: PUSH
1155: LD_INT 46
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_INT 23
1166: PUSH
1167: LD_INT 3
1169: PUSH
1170: LD_INT 1
1172: PUSH
1173: LD_INT 46
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_INT 21
1184: PUSH
1185: LD_INT 3
1187: PUSH
1188: LD_INT 3
1190: PUSH
1191: LD_INT 51
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: ST_TO_ADDR
// mpSharedVision := mpGameSettings [ 11 ] ;
1210: LD_ADDR_EXP 16
1214: PUSH
1215: LD_EXP 6
1219: PUSH
1220: LD_INT 11
1222: ARRAY
1223: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1224: LD_ADDR_EXP 22
1228: PUSH
1229: LD_EXP 6
1233: PUSH
1234: LD_INT 12
1236: ARRAY
1237: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1238: LD_ADDR_EXP 26
1242: PUSH
1243: LD_EXP 6
1247: PUSH
1248: LD_INT 13
1250: ARRAY
1251: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1252: LD_ADDR_EXP 33
1256: PUSH
1257: LD_EXP 6
1261: PUSH
1262: LD_INT 14
1264: ARRAY
1265: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1266: LD_ADDR_EXP 30
1270: PUSH
1271: LD_EXP 6
1275: PUSH
1276: LD_INT 15
1278: ARRAY
1279: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1280: LD_ADDR_EXP 28
1284: PUSH
1285: LD_EXP 6
1289: PUSH
1290: LD_INT 18
1292: ARRAY
1293: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_EXP 6
1303: PUSH
1304: LD_INT 21
1306: ARRAY
1307: ST_TO_ADDR
// mpTimeToWin := mpGameSettings [ 22 ] ;
1308: LD_ADDR_EXP 46
1312: PUSH
1313: LD_EXP 6
1317: PUSH
1318: LD_INT 22
1320: ARRAY
1321: ST_TO_ADDR
// mpApemansArea := [ base1ApeArea , base2ApeArea , base3ApeArea , base4ApeArea , base5ApeArea , base6ApeArea , base7ApeArea , base8ApeArea ] ;
1322: LD_ADDR_EXP 31
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 5
1332: PUSH
1333: LD_INT 6
1335: PUSH
1336: LD_INT 7
1338: PUSH
1339: LD_INT 8
1341: PUSH
1342: LD_INT 9
1344: PUSH
1345: LD_INT 10
1347: PUSH
1348: LD_INT 11
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 1 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 4 ) ] ;
1361: LD_ADDR_VAR 0 8
1365: PUSH
1366: LD_INT 12
1368: PPUSH
1369: LD_INT 2
1371: PPUSH
1372: CALL 59250 0 2
1376: PUSH
1377: LD_INT 13
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: CALL 59250 0 2
1387: PUSH
1388: LD_INT 14
1390: PPUSH
1391: LD_INT 0
1393: PPUSH
1394: CALL 59250 0 2
1398: PUSH
1399: LD_INT 15
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL 59250 0 2
1409: PUSH
1410: LD_INT 16
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: CALL 59250 0 2
1420: PUSH
1421: LD_INT 17
1423: PPUSH
1424: LD_INT 5
1426: PPUSH
1427: CALL 59250 0 2
1431: PUSH
1432: LD_INT 18
1434: PPUSH
1435: LD_INT 5
1437: PPUSH
1438: CALL 59250 0 2
1442: PUSH
1443: LD_INT 19
1445: PPUSH
1446: LD_INT 4
1448: PPUSH
1449: CALL 59250 0 2
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1464: LD_ADDR_VAR 0 3
1468: PUSH
1469: DOUBLE
1470: LD_INT 1
1472: DEC
1473: ST_TO_ADDR
1474: LD_VAR 0 8
1478: PPUSH
1479: CALL 18555 0 1
1483: PUSH
1484: FOR_TO
1485: IFFALSE 1589
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1487: LD_ADDR_EXP 21
1491: PUSH
1492: LD_EXP 21
1496: PPUSH
1497: LD_VAR 0 3
1501: PPUSH
1502: LD_VAR 0 8
1506: PUSH
1507: LD_VAR 0 3
1511: ARRAY
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: PPUSH
1517: LD_VAR 0 8
1521: PUSH
1522: LD_VAR 0 3
1526: ARRAY
1527: PUSH
1528: LD_INT 3
1530: ARRAY
1531: PPUSH
1532: LD_INT 10
1534: PPUSH
1535: CALL_OW 272
1539: PUSH
1540: LD_VAR 0 8
1544: PUSH
1545: LD_VAR 0 3
1549: ARRAY
1550: PUSH
1551: LD_INT 2
1553: ARRAY
1554: PPUSH
1555: LD_VAR 0 8
1559: PUSH
1560: LD_VAR 0 3
1564: ARRAY
1565: PUSH
1566: LD_INT 3
1568: ARRAY
1569: PPUSH
1570: LD_INT 10
1572: PPUSH
1573: CALL_OW 273
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 1
1586: ST_TO_ADDR
1587: GO 1484
1589: POP
1590: POP
// if hasOil then
1591: LD_VAR 0 5
1595: IFFALSE 1734
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1597: LD_ADDR_VAR 0 4
1601: PUSH
1602: LD_EXP 6
1606: PUSH
1607: LD_INT 6
1609: ARRAY
1610: PUSH
1611: LD_INT 2
1613: EQUAL
1614: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1615: LD_ADDR_EXP 12
1619: PUSH
1620: LD_INT 20
1622: PPUSH
1623: LD_VAR 0 4
1627: PPUSH
1628: CALL 59083 0 2
1632: PUSH
1633: LD_INT 21
1635: PPUSH
1636: LD_VAR 0 4
1640: PPUSH
1641: CALL 59083 0 2
1645: PUSH
1646: LD_INT 24
1648: PPUSH
1649: LD_VAR 0 4
1653: PPUSH
1654: CALL 59083 0 2
1658: PUSH
1659: LD_INT 26
1661: PPUSH
1662: LD_VAR 0 4
1666: PPUSH
1667: CALL 59083 0 2
1671: PUSH
1672: LD_INT 28
1674: PPUSH
1675: LD_VAR 0 4
1679: PPUSH
1680: CALL 59083 0 2
1684: PUSH
1685: LD_INT 30
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 59083 0 2
1697: PUSH
1698: LD_INT 32
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 59083 0 2
1710: PUSH
1711: LD_INT 34
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 59083 0 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
// end ; if hasSib then
1734: LD_VAR 0 6
1738: IFFALSE 1877
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1740: LD_ADDR_VAR 0 4
1744: PUSH
1745: LD_EXP 6
1749: PUSH
1750: LD_INT 7
1752: ARRAY
1753: PUSH
1754: LD_INT 2
1756: EQUAL
1757: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1758: LD_ADDR_EXP 13
1762: PUSH
1763: LD_INT 22
1765: PPUSH
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL 59083 0 2
1775: PUSH
1776: LD_INT 23
1778: PPUSH
1779: LD_VAR 0 4
1783: PPUSH
1784: CALL 59083 0 2
1788: PUSH
1789: LD_INT 25
1791: PPUSH
1792: LD_VAR 0 4
1796: PPUSH
1797: CALL 59083 0 2
1801: PUSH
1802: LD_INT 27
1804: PPUSH
1805: LD_VAR 0 4
1809: PPUSH
1810: CALL 59083 0 2
1814: PUSH
1815: LD_INT 29
1817: PPUSH
1818: LD_VAR 0 4
1822: PPUSH
1823: CALL 59083 0 2
1827: PUSH
1828: LD_INT 31
1830: PPUSH
1831: LD_VAR 0 4
1835: PPUSH
1836: CALL 59083 0 2
1840: PUSH
1841: LD_INT 33
1843: PPUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: CALL 59083 0 2
1853: PUSH
1854: LD_INT 35
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: CALL 59083 0 2
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1877: LD_VAR 0 7
1881: PUSH
1882: LD_INT 1
1884: GREATEREQUAL
1885: IFFALSE 1897
// mpDepots := startPos ;
1887: LD_ADDR_EXP 14
1891: PUSH
1892: LD_VAR 0 8
1896: ST_TO_ADDR
// end ;
1897: LD_VAR 0 2
1901: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
1902: GO 1904
1904: DISABLE
1905: LD_INT 0
1907: PPUSH
1908: PPUSH
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
// begin if not mpShipments then
1915: LD_EXP 27
1919: NOT
1920: IFFALSE 1924
// exit ;
1922: GO 2403
// case mpShipments of 1 :
1924: LD_EXP 27
1928: PUSH
1929: LD_INT 1
1931: DOUBLE
1932: EQUAL
1933: IFTRUE 1937
1935: GO 1972
1937: POP
// begin time := 0 0$30 ;
1938: LD_ADDR_VAR 0 5
1942: PUSH
1943: LD_INT 1050
1945: ST_TO_ADDR
// normalTime := 0 0$30 ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_INT 1050
1953: ST_TO_ADDR
// maxTime := 1 1$20 ;
1954: LD_ADDR_VAR 0 8
1958: PUSH
1959: LD_INT 2800
1961: ST_TO_ADDR
// delayTime := 0 0$5 ;
1962: LD_ADDR_VAR 0 7
1966: PUSH
1967: LD_INT 175
1969: ST_TO_ADDR
// end ; 2 :
1970: GO 2102
1972: LD_INT 2
1974: DOUBLE
1975: EQUAL
1976: IFTRUE 1980
1978: GO 2015
1980: POP
// begin time := 0 0$25 ;
1981: LD_ADDR_VAR 0 5
1985: PUSH
1986: LD_INT 875
1988: ST_TO_ADDR
// normalTime := 0 0$25 ;
1989: LD_ADDR_VAR 0 6
1993: PUSH
1994: LD_INT 875
1996: ST_TO_ADDR
// maxTime := 1 1$10 ;
1997: LD_ADDR_VAR 0 8
2001: PUSH
2002: LD_INT 2450
2004: ST_TO_ADDR
// delayTime := 0 0$4 ;
2005: LD_ADDR_VAR 0 7
2009: PUSH
2010: LD_INT 140
2012: ST_TO_ADDR
// end ; 3 :
2013: GO 2102
2015: LD_INT 3
2017: DOUBLE
2018: EQUAL
2019: IFTRUE 2023
2021: GO 2058
2023: POP
// begin time := 0 0$20 ;
2024: LD_ADDR_VAR 0 5
2028: PUSH
2029: LD_INT 700
2031: ST_TO_ADDR
// normalTime := 0 0$20 ;
2032: LD_ADDR_VAR 0 6
2036: PUSH
2037: LD_INT 700
2039: ST_TO_ADDR
// maxTime := 1 1$00 ;
2040: LD_ADDR_VAR 0 8
2044: PUSH
2045: LD_INT 2100
2047: ST_TO_ADDR
// delayTime := 0 0$3 ;
2048: LD_ADDR_VAR 0 7
2052: PUSH
2053: LD_INT 105
2055: ST_TO_ADDR
// end ; 4 :
2056: GO 2102
2058: LD_INT 4
2060: DOUBLE
2061: EQUAL
2062: IFTRUE 2066
2064: GO 2101
2066: POP
// begin time := 0 0$15 ;
2067: LD_ADDR_VAR 0 5
2071: PUSH
2072: LD_INT 525
2074: ST_TO_ADDR
// normalTime := 0 0$15 ;
2075: LD_ADDR_VAR 0 6
2079: PUSH
2080: LD_INT 525
2082: ST_TO_ADDR
// maxTime := 0 0$55 ;
2083: LD_ADDR_VAR 0 8
2087: PUSH
2088: LD_INT 1925
2090: ST_TO_ADDR
// delayTime := 0 0$2 ;
2091: LD_ADDR_VAR 0 7
2095: PUSH
2096: LD_INT 70
2098: ST_TO_ADDR
// end ; end ;
2099: GO 2102
2101: POP
// areas := [ cratesArea1 , cratesArea2 , cratesArea3 , cratesArea4 , cratesArea5 , cratesArea6 ] ;
2102: LD_ADDR_VAR 0 4
2106: PUSH
2107: LD_INT 36
2109: PUSH
2110: LD_INT 37
2112: PUSH
2113: LD_INT 38
2115: PUSH
2116: LD_INT 39
2118: PUSH
2119: LD_INT 40
2121: PUSH
2122: LD_INT 41
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: ST_TO_ADDR
// tmp := [ 0 , 0 , playerCratesArea3 , playerCratesArea4 , playerCratesArea5 , playerCratesArea6 , playerCratesArea7 , playerCratesArea8 ] ;
2133: LD_ADDR_VAR 0 3
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 0
2143: PUSH
2144: LD_INT 42
2146: PUSH
2147: LD_INT 43
2149: PUSH
2150: LD_INT 44
2152: PUSH
2153: LD_INT 45
2155: PUSH
2156: LD_INT 46
2158: PUSH
2159: LD_INT 47
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2257
// begin if not mpSidePositions [ i ] or tmp [ mpSidePositions [ i ] ] = 0 then
2188: LD_EXP 7
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFTRUE 2223
2201: PUSH
2202: LD_VAR 0 3
2206: PUSH
2207: LD_EXP 7
2211: PUSH
2212: LD_VAR 0 1
2216: ARRAY
2217: ARRAY
2218: PUSH
2219: LD_INT 0
2221: EQUAL
2222: OR
2223: IFFALSE 2227
// continue ;
2225: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2227: LD_ADDR_VAR 0 4
2231: PUSH
2232: LD_VAR 0 4
2236: PUSH
2237: LD_VAR 0 3
2241: PUSH
2242: LD_EXP 7
2246: PUSH
2247: LD_VAR 0 1
2251: ARRAY
2252: ARRAY
2253: ADD
2254: ST_TO_ADDR
// end ;
2255: GO 2185
2257: POP
2258: POP
// x := 1 ;
2259: LD_ADDR_VAR 0 2
2263: PUSH
2264: LD_INT 1
2266: ST_TO_ADDR
// repeat wait ( time ) ;
2267: LD_VAR 0 5
2271: PPUSH
2272: CALL_OW 67
// x := Inc ( x ) ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PPUSH
2286: CALL 55904 0 1
2290: ST_TO_ADDR
// if x > 5 then
2291: LD_VAR 0 2
2295: PUSH
2296: LD_INT 5
2298: GREATER
2299: IFFALSE 2309
// x := 1 ;
2301: LD_ADDR_VAR 0 2
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// for i in areas do
2309: LD_ADDR_VAR 0 1
2313: PUSH
2314: LD_VAR 0 4
2318: PUSH
2319: FOR_IN
2320: IFFALSE 2359
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2322: LD_VAR 0 1
2326: PPUSH
2327: LD_INT 1
2329: PPUSH
2330: CALL_OW 287
2334: PUSH
2335: LD_INT 30
2337: LESS
2338: IFFALSE 2357
// begin CreateCratesArea ( x , i , true ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_VAR 0 1
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: CALL_OW 55
// end ; end ;
2357: GO 2319
2359: POP
2360: POP
// time := time + delayTime ;
2361: LD_ADDR_VAR 0 5
2365: PUSH
2366: LD_VAR 0 5
2370: PUSH
2371: LD_VAR 0 7
2375: PLUS
2376: ST_TO_ADDR
// if time > maxTime then
2377: LD_VAR 0 5
2381: PUSH
2382: LD_VAR 0 8
2386: GREATER
2387: IFFALSE 2399
// time := normalTime ;
2389: LD_ADDR_VAR 0 5
2393: PUSH
2394: LD_VAR 0 6
2398: ST_TO_ADDR
// until false ;
2399: LD_INT 0
2401: IFFALSE 2267
// end ;
2403: PPOPN 8
2405: END
// export function PrepareArmsRaceVehiclesList ( pos , side , nation ) ; var i , j ; begin
2406: LD_INT 0
2408: PPUSH
2409: PPUSH
2410: PPUSH
// if nation = nation_american then
2411: LD_VAR 0 3
2415: PUSH
2416: LD_INT 1
2418: EQUAL
2419: IFFALSE 2565
// begin uc_nation := nation_american ;
2421: LD_ADDR_OWVAR 21
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// for j := 1 to 2 do
2429: LD_ADDR_VAR 0 6
2433: PUSH
2434: DOUBLE
2435: LD_INT 1
2437: DEC
2438: ST_TO_ADDR
2439: LD_INT 2
2441: PUSH
2442: FOR_TO
2443: IFFALSE 2495
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_autoloader , 100 ) ;
2445: LD_INT 5
2447: PPUSH
2448: LD_INT 3
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 96
2456: PPUSH
2457: LD_INT 100
2459: PPUSH
2460: CALL 21351 0 5
// uc_direction := 2 ;
2464: LD_ADDR_OWVAR 24
2468: PUSH
2469: LD_INT 2
2471: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , 76 , 18 , 10 , false ) ;
2472: CALL_OW 45
2476: PPUSH
2477: LD_INT 76
2479: PPUSH
2480: LD_INT 18
2482: PPUSH
2483: LD_INT 10
2485: PPUSH
2486: LD_INT 0
2488: PPUSH
2489: CALL_OW 50
// end ;
2493: GO 2442
2495: POP
2496: POP
// for j := 1 to 3 do
2497: LD_ADDR_VAR 0 6
2501: PUSH
2502: DOUBLE
2503: LD_INT 1
2505: DEC
2506: ST_TO_ADDR
2507: LD_INT 3
2509: PUSH
2510: FOR_TO
2511: IFFALSE 2563
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_double_laser , 100 ) ;
2513: LD_INT 5
2515: PPUSH
2516: LD_INT 3
2518: PPUSH
2519: LD_INT 3
2521: PPUSH
2522: LD_INT 10
2524: PPUSH
2525: LD_INT 100
2527: PPUSH
2528: CALL 21351 0 5
// uc_direction := 2 ;
2532: LD_ADDR_OWVAR 24
2536: PUSH
2537: LD_INT 2
2539: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , 76 , 18 , 10 , false ) ;
2540: CALL_OW 45
2544: PPUSH
2545: LD_INT 76
2547: PPUSH
2548: LD_INT 18
2550: PPUSH
2551: LD_INT 10
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 50
// end ;
2561: GO 2510
2563: POP
2564: POP
// end ; if nation = nation_russian then
2565: LD_VAR 0 3
2569: PUSH
2570: LD_INT 3
2572: EQUAL
2573: IFFALSE 2651
// begin uc_nation := nation_russian ;
2575: LD_ADDR_OWVAR 21
2579: PUSH
2580: LD_INT 3
2582: ST_TO_ADDR
// PrepareVehicle ( ru_behemoth , engine_siberite , control_computer , ru_behemoth , 100 ) ;
2583: LD_INT 25
2585: PPUSH
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 25
2594: PPUSH
2595: LD_INT 100
2597: PPUSH
2598: CALL 21351 0 5
// uc_direction := 2 ;
2602: LD_ADDR_OWVAR 24
2606: PUSH
2607: LD_INT 2
2609: ST_TO_ADDR
// for j := 1 to 2 do
2610: LD_ADDR_VAR 0 6
2614: PUSH
2615: DOUBLE
2616: LD_INT 1
2618: DEC
2619: ST_TO_ADDR
2620: LD_INT 2
2622: PUSH
2623: FOR_TO
2624: IFFALSE 2649
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 10 , false ) ;
2626: CALL_OW 45
2630: PPUSH
2631: LD_INT 104
2633: PPUSH
2634: LD_INT 59
2636: PPUSH
2637: LD_INT 10
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: CALL_OW 50
2647: GO 2623
2649: POP
2650: POP
// end ; if nation = nation_arabian then
2651: LD_VAR 0 3
2655: PUSH
2656: LD_INT 2
2658: EQUAL
2659: IFFALSE 2737
// begin uc_nation := nation_arabian ;
2661: LD_ADDR_OWVAR 21
2665: PUSH
2666: LD_INT 2
2668: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_miner , 100 ) ;
2669: LD_INT 14
2671: PPUSH
2672: LD_INT 3
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: LD_INT 81
2680: PPUSH
2681: LD_INT 100
2683: PPUSH
2684: CALL 21351 0 5
// uc_direction := 2 ;
2688: LD_ADDR_OWVAR 24
2692: PUSH
2693: LD_INT 2
2695: ST_TO_ADDR
// for j := 1 to 3 do
2696: LD_ADDR_VAR 0 6
2700: PUSH
2701: DOUBLE
2702: LD_INT 1
2704: DEC
2705: ST_TO_ADDR
2706: LD_INT 3
2708: PUSH
2709: FOR_TO
2710: IFFALSE 2735
// PlaceUnitXYR ( CreateVehicle , 81 , 30 , 8 , false ) ;
2712: CALL_OW 45
2716: PPUSH
2717: LD_INT 81
2719: PPUSH
2720: LD_INT 30
2722: PPUSH
2723: LD_INT 8
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 50
2733: GO 2709
2735: POP
2736: POP
// end ; uc_nation := nation ;
2737: LD_ADDR_OWVAR 21
2741: PUSH
2742: LD_VAR 0 3
2746: ST_TO_ADDR
// uc_direction := 2 ;
2747: LD_ADDR_OWVAR 24
2751: PUSH
2752: LD_INT 2
2754: ST_TO_ADDR
// case nation of 1 :
2755: LD_VAR 0 3
2759: PUSH
2760: LD_INT 1
2762: DOUBLE
2763: EQUAL
2764: IFTRUE 2768
2766: GO 2891
2768: POP
// begin PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2769: LD_INT 5
2771: PPUSH
2772: LD_INT 3
2774: PPUSH
2775: LD_INT 3
2777: PPUSH
2778: LD_INT 13
2780: PPUSH
2781: LD_INT 100
2783: PPUSH
2784: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2788: CALL_OW 45
2792: PPUSH
2793: LD_INT 104
2795: PPUSH
2796: LD_INT 59
2798: PPUSH
2799: LD_INT 6
2801: PPUSH
2802: LD_INT 0
2804: PPUSH
2805: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_crane , 100 ) ;
2809: LD_INT 5
2811: PPUSH
2812: LD_INT 3
2814: PPUSH
2815: LD_INT 3
2817: PPUSH
2818: LD_INT 13
2820: PPUSH
2821: LD_INT 100
2823: PPUSH
2824: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2828: CALL_OW 45
2832: PPUSH
2833: LD_INT 104
2835: PPUSH
2836: LD_INT 59
2838: PPUSH
2839: LD_INT 6
2841: PPUSH
2842: LD_INT 0
2844: PPUSH
2845: CALL_OW 50
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_radar , 100 ) ;
2849: LD_INT 5
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: LD_INT 3
2857: PPUSH
2858: LD_INT 11
2860: PPUSH
2861: LD_INT 100
2863: PPUSH
2864: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2868: CALL_OW 45
2872: PPUSH
2873: LD_INT 104
2875: PPUSH
2876: LD_INT 59
2878: PPUSH
2879: LD_INT 6
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 50
// end ; 2 :
2889: GO 3154
2891: LD_INT 2
2893: DOUBLE
2894: EQUAL
2895: IFTRUE 2899
2897: GO 3022
2899: POP
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 5
2908: PPUSH
2909: LD_INT 88
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2919: CALL_OW 45
2923: PPUSH
2924: LD_INT 104
2926: PPUSH
2927: LD_INT 59
2929: PPUSH
2930: LD_INT 6
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_crane , 100 ) ;
2940: LD_INT 14
2942: PPUSH
2943: LD_INT 3
2945: PPUSH
2946: LD_INT 5
2948: PPUSH
2949: LD_INT 88
2951: PPUSH
2952: LD_INT 100
2954: PPUSH
2955: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2959: CALL_OW 45
2963: PPUSH
2964: LD_INT 104
2966: PPUSH
2967: LD_INT 59
2969: PPUSH
2970: LD_INT 6
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 50
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , ar_radar , 100 ) ;
2980: LD_INT 14
2982: PPUSH
2983: LD_INT 3
2985: PPUSH
2986: LD_INT 5
2988: PPUSH
2989: LD_INT 30
2991: PPUSH
2992: LD_INT 100
2994: PPUSH
2995: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
2999: CALL_OW 45
3003: PPUSH
3004: LD_INT 104
3006: PPUSH
3007: LD_INT 59
3009: PPUSH
3010: LD_INT 6
3012: PPUSH
3013: LD_INT 0
3015: PPUSH
3016: CALL_OW 50
// end ; 3 :
3020: GO 3154
3022: LD_INT 3
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3153
3030: POP
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
3031: LD_INT 22
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 52
3042: PPUSH
3043: LD_INT 100
3045: PPUSH
3046: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
3050: CALL_OW 45
3054: PPUSH
3055: LD_INT 104
3057: PPUSH
3058: LD_INT 59
3060: PPUSH
3061: LD_INT 6
3063: PPUSH
3064: LD_INT 0
3066: PPUSH
3067: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_crane , 100 ) ;
3071: LD_INT 22
3073: PPUSH
3074: LD_INT 3
3076: PPUSH
3077: LD_INT 3
3079: PPUSH
3080: LD_INT 52
3082: PPUSH
3083: LD_INT 100
3085: PPUSH
3086: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
3090: CALL_OW 45
3094: PPUSH
3095: LD_INT 104
3097: PPUSH
3098: LD_INT 59
3100: PPUSH
3101: LD_INT 6
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL_OW 50
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_radar , 100 ) ;
3111: LD_INT 22
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 3
3119: PPUSH
3120: LD_INT 98
3122: PPUSH
3123: LD_INT 100
3125: PPUSH
3126: CALL 21351 0 5
// PlaceUnitXYR ( CreateVehicle , 104 , 59 , 6 , false ) ;
3130: CALL_OW 45
3134: PPUSH
3135: LD_INT 104
3137: PPUSH
3138: LD_INT 59
3140: PPUSH
3141: LD_INT 6
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL_OW 50
// end ; end ;
3151: GO 3154
3153: POP
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
3154: LD_ADDR_VAR 0 5
3158: PUSH
3159: LD_INT 34
3161: PUSH
3162: LD_INT 81
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PPUSH
3169: CALL_OW 69
3173: PUSH
3174: FOR_IN
3175: IFFALSE 3247
// begin if not i in minersList then
3177: LD_VAR 0 5
3181: PUSH
3182: LD_EXP 58
3186: IN
3187: NOT
3188: IFFALSE 3245
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
3190: LD_ADDR_EXP 58
3194: PUSH
3195: LD_EXP 58
3199: PPUSH
3200: LD_EXP 58
3204: PUSH
3205: LD_INT 1
3207: PLUS
3208: PPUSH
3209: LD_VAR 0 5
3213: PPUSH
3214: CALL_OW 1
3218: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
3219: LD_ADDR_EXP 59
3223: PUSH
3224: LD_EXP 59
3228: PPUSH
3229: LD_EXP 59
3233: PUSH
3234: LD_INT 1
3236: PLUS
3237: PPUSH
3238: EMPTY
3239: PPUSH
3240: CALL_OW 1
3244: ST_TO_ADDR
// end end ;
3245: GO 3174
3247: POP
3248: POP
// end ;
3249: LD_VAR 0 4
3253: RET
// export function GetArmsRaceBuildingsList ( pos ) ; begin
3254: LD_INT 0
3256: PPUSH
// case pos of 1 :
3257: LD_VAR 0 1
3261: PUSH
3262: LD_INT 1
3264: DOUBLE
3265: EQUAL
3266: IFTRUE 3270
3268: GO 3862
3270: POP
// begin result := [ b_depot ^ GetBuildingFromArea ( dep1Area1 , 2 ) , b_depot ^ GetBuildingFromArea ( dep2Area1 , 2 ) , b_depot ^ GetBuildingFromArea ( dep3Area1 , 2 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area1 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area1 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm2Area1 , 0 ) , b_lab ^ GetBuildingFromArea ( lab1Area1 , 4 ) , b_factory ^ GetBuildingFromArea ( fac1Area1 , 1 ) , b_bunker ^ GetBuildingFromArea ( tw1Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area1 , 0 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area1 , 0 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area1 , 0 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
3271: LD_ADDR_VAR 0 2
3275: PUSH
3276: LD_INT 0
3278: PUSH
3279: LD_INT 67
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: CALL 59250 0 2
3289: ADD
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: LD_INT 81
3296: PPUSH
3297: LD_INT 2
3299: PPUSH
3300: CALL 59250 0 2
3304: ADD
3305: PUSH
3306: LD_INT 0
3308: PUSH
3309: LD_INT 94
3311: PPUSH
3312: LD_INT 2
3314: PPUSH
3315: CALL 59250 0 2
3319: ADD
3320: PUSH
3321: LD_INT 28
3323: PUSH
3324: LD_INT 56
3326: PPUSH
3327: LD_INT 5
3329: PPUSH
3330: CALL 59250 0 2
3334: ADD
3335: PUSH
3336: LD_INT 28
3338: PUSH
3339: LD_INT 57
3341: PPUSH
3342: LD_INT 5
3344: PPUSH
3345: CALL 59250 0 2
3349: ADD
3350: PUSH
3351: LD_INT 28
3353: PUSH
3354: LD_INT 58
3356: PPUSH
3357: LD_INT 5
3359: PPUSH
3360: CALL 59250 0 2
3364: ADD
3365: PUSH
3366: LD_INT 28
3368: PUSH
3369: LD_INT 71
3371: PPUSH
3372: LD_INT 5
3374: PPUSH
3375: CALL 59250 0 2
3379: ADD
3380: PUSH
3381: LD_INT 28
3383: PUSH
3384: LD_INT 83
3386: PPUSH
3387: LD_INT 5
3389: PPUSH
3390: CALL 59250 0 2
3394: ADD
3395: PUSH
3396: LD_INT 28
3398: PUSH
3399: LD_INT 96
3401: PPUSH
3402: LD_INT 5
3404: PPUSH
3405: CALL 59250 0 2
3409: ADD
3410: PUSH
3411: LD_INT 5
3413: PUSH
3414: LD_INT 48
3416: PPUSH
3417: LD_INT 5
3419: PPUSH
3420: CALL 59250 0 2
3424: ADD
3425: PUSH
3426: LD_INT 5
3428: PUSH
3429: LD_INT 69
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL 59250 0 2
3439: ADD
3440: PUSH
3441: LD_INT 6
3443: PUSH
3444: LD_INT 60
3446: PPUSH
3447: LD_INT 4
3449: PPUSH
3450: CALL 59250 0 2
3454: ADD
3455: PUSH
3456: LD_INT 3
3458: PUSH
3459: LD_INT 59
3461: PPUSH
3462: LD_INT 1
3464: PPUSH
3465: CALL 59250 0 2
3469: ADD
3470: PUSH
3471: LD_INT 32
3473: PUSH
3474: LD_INT 49
3476: PPUSH
3477: LD_INT 0
3479: PPUSH
3480: CALL 59250 0 2
3484: ADD
3485: PUSH
3486: LD_INT 7
3488: PUSH
3489: LD_INT 28
3491: PUSH
3492: LD_INT 45
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: ADD
3503: PUSH
3504: LD_INT 32
3506: PUSH
3507: LD_INT 50
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: CALL 59250 0 2
3517: ADD
3518: PUSH
3519: LD_INT 9
3521: PUSH
3522: LD_INT 27
3524: PUSH
3525: LD_INT 46
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: ADD
3536: PUSH
3537: LD_INT 32
3539: PUSH
3540: LD_INT 51
3542: PPUSH
3543: LD_INT 0
3545: PPUSH
3546: CALL 59250 0 2
3550: ADD
3551: PUSH
3552: LD_INT 7
3554: PUSH
3555: LD_INT 28
3557: PUSH
3558: LD_INT 45
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: PUSH
3566: EMPTY
3567: LIST
3568: ADD
3569: PUSH
3570: LD_INT 32
3572: PUSH
3573: LD_INT 73
3575: PPUSH
3576: LD_INT 0
3578: PPUSH
3579: CALL 59250 0 2
3583: ADD
3584: PUSH
3585: LD_INT 7
3587: PUSH
3588: LD_INT 28
3590: PUSH
3591: LD_INT 45
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: ADD
3602: PUSH
3603: LD_INT 32
3605: PUSH
3606: LD_INT 74
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL 59250 0 2
3616: ADD
3617: PUSH
3618: LD_INT 9
3620: PUSH
3621: LD_INT 27
3623: PUSH
3624: LD_INT 46
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PUSH
3632: EMPTY
3633: LIST
3634: ADD
3635: PUSH
3636: LD_INT 32
3638: PUSH
3639: LD_INT 75
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL 59250 0 2
3649: ADD
3650: PUSH
3651: LD_INT 9
3653: PUSH
3654: LD_INT 27
3656: PUSH
3657: LD_INT 46
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: EMPTY
3666: LIST
3667: ADD
3668: PUSH
3669: LD_INT 32
3671: PUSH
3672: LD_INT 76
3674: PPUSH
3675: LD_INT 0
3677: PPUSH
3678: CALL 59250 0 2
3682: ADD
3683: PUSH
3684: LD_INT 9
3686: PUSH
3687: LD_INT 27
3689: PUSH
3690: LD_INT 46
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: EMPTY
3699: LIST
3700: ADD
3701: PUSH
3702: LD_INT 32
3704: PUSH
3705: LD_INT 85
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL 59250 0 2
3715: ADD
3716: PUSH
3717: LD_INT 9
3719: PUSH
3720: LD_INT 27
3722: PUSH
3723: LD_INT 46
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: EMPTY
3732: LIST
3733: ADD
3734: PUSH
3735: LD_INT 32
3737: PUSH
3738: LD_INT 86
3740: PPUSH
3741: LD_INT 0
3743: PPUSH
3744: CALL 59250 0 2
3748: ADD
3749: PUSH
3750: LD_INT 7
3752: PUSH
3753: LD_INT 28
3755: PUSH
3756: LD_INT 45
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: EMPTY
3765: LIST
3766: ADD
3767: PUSH
3768: LD_INT 32
3770: PUSH
3771: LD_INT 87
3773: PPUSH
3774: LD_INT 0
3776: PPUSH
3777: CALL 59250 0 2
3781: ADD
3782: PUSH
3783: LD_INT 7
3785: PUSH
3786: LD_INT 28
3788: PUSH
3789: LD_INT 45
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: EMPTY
3798: LIST
3799: ADD
3800: PUSH
3801: LD_INT 32
3803: PUSH
3804: LD_INT 88
3806: PPUSH
3807: LD_INT 0
3809: PPUSH
3810: CALL 59250 0 2
3814: ADD
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: LD_INT 43
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: ADD
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: ST_TO_ADDR
// end ; 2 :
3860: GO 4463
3862: LD_INT 2
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 4462
3870: POP
// begin result := [ b_depot ^ GetBuildingFromArea ( dep1Area2 , 3 ) , b_depot ^ GetBuildingFromArea ( dep2Area2 , 2 ) , b_depot ^ GetBuildingFromArea ( dep3Area2 , 3 ) , b_siberite_power ^ GetBuildingFromArea ( pw1Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw2Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw3Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw4Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw5Area2 , 5 ) , b_siberite_power ^ GetBuildingFromArea ( pw6Area2 , 5 ) , b_barracks ^ GetBuildingFromArea ( arm1Area2 , 0 ) , b_barracks ^ GetBuildingFromArea ( arm2Area2 , 5 ) , b_lab ^ GetBuildingFromArea ( lab1Area2 , 1 ) , b_factory ^ GetBuildingFromArea ( fac1Area2 , 4 ) , b_bunker ^ GetBuildingFromArea ( tw1Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw2Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw3Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw4Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw5Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw6Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw7Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw8Area2 , 5 ) ^ [ [ us_laser , ar_gun , ru_heavy_gun ] ] , b_bunker ^ GetBuildingFromArea ( tw9Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw10Area2 , 5 ) ^ [ [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] ] , b_bunker ^ GetBuildingFromArea ( tw11Area2 , 5 ) ^ [ [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] ] ] ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_INT 0
3878: PUSH
3879: LD_INT 68
3881: PPUSH
3882: LD_INT 3
3884: PPUSH
3885: CALL 59250 0 2
3889: ADD
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: LD_INT 82
3896: PPUSH
3897: LD_INT 2
3899: PPUSH
3900: CALL 59250 0 2
3904: ADD
3905: PUSH
3906: LD_INT 0
3908: PUSH
3909: LD_INT 95
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: CALL 59250 0 2
3919: ADD
3920: PUSH
3921: LD_INT 28
3923: PUSH
3924: LD_INT 62
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: CALL 59250 0 2
3934: ADD
3935: PUSH
3936: LD_INT 28
3938: PUSH
3939: LD_INT 63
3941: PPUSH
3942: LD_INT 5
3944: PPUSH
3945: CALL 59250 0 2
3949: ADD
3950: PUSH
3951: LD_INT 28
3953: PUSH
3954: LD_INT 64
3956: PPUSH
3957: LD_INT 5
3959: PPUSH
3960: CALL 59250 0 2
3964: ADD
3965: PUSH
3966: LD_INT 28
3968: PUSH
3969: LD_INT 72
3971: PPUSH
3972: LD_INT 5
3974: PPUSH
3975: CALL 59250 0 2
3979: ADD
3980: PUSH
3981: LD_INT 28
3983: PUSH
3984: LD_INT 84
3986: PPUSH
3987: LD_INT 5
3989: PPUSH
3990: CALL 59250 0 2
3994: ADD
3995: PUSH
3996: LD_INT 28
3998: PUSH
3999: LD_INT 97
4001: PPUSH
4002: LD_INT 5
4004: PPUSH
4005: CALL 59250 0 2
4009: ADD
4010: PUSH
4011: LD_INT 5
4013: PUSH
4014: LD_INT 52
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: CALL 59250 0 2
4024: ADD
4025: PUSH
4026: LD_INT 5
4028: PUSH
4029: LD_INT 70
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: CALL 59250 0 2
4039: ADD
4040: PUSH
4041: LD_INT 6
4043: PUSH
4044: LD_INT 65
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: CALL 59250 0 2
4054: ADD
4055: PUSH
4056: LD_INT 3
4058: PUSH
4059: LD_INT 61
4061: PPUSH
4062: LD_INT 4
4064: PPUSH
4065: CALL 59250 0 2
4069: ADD
4070: PUSH
4071: LD_INT 32
4073: PUSH
4074: LD_INT 53
4076: PPUSH
4077: LD_INT 5
4079: PPUSH
4080: CALL 59250 0 2
4084: ADD
4085: PUSH
4086: LD_INT 7
4088: PUSH
4089: LD_INT 28
4091: PUSH
4092: LD_INT 45
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: ADD
4103: PUSH
4104: LD_INT 32
4106: PUSH
4107: LD_INT 54
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: CALL 59250 0 2
4117: ADD
4118: PUSH
4119: LD_INT 9
4121: PUSH
4122: LD_INT 27
4124: PUSH
4125: LD_INT 46
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: ADD
4136: PUSH
4137: LD_INT 32
4139: PUSH
4140: LD_INT 55
4142: PPUSH
4143: LD_INT 5
4145: PPUSH
4146: CALL 59250 0 2
4150: ADD
4151: PUSH
4152: LD_INT 7
4154: PUSH
4155: LD_INT 28
4157: PUSH
4158: LD_INT 45
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: EMPTY
4167: LIST
4168: ADD
4169: PUSH
4170: LD_INT 32
4172: PUSH
4173: LD_INT 77
4175: PPUSH
4176: LD_INT 5
4178: PPUSH
4179: CALL 59250 0 2
4183: ADD
4184: PUSH
4185: LD_INT 7
4187: PUSH
4188: LD_INT 28
4190: PUSH
4191: LD_INT 45
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: EMPTY
4200: LIST
4201: ADD
4202: PUSH
4203: LD_INT 32
4205: PUSH
4206: LD_INT 78
4208: PPUSH
4209: LD_INT 5
4211: PPUSH
4212: CALL 59250 0 2
4216: ADD
4217: PUSH
4218: LD_INT 9
4220: PUSH
4221: LD_INT 27
4223: PUSH
4224: LD_INT 46
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: ADD
4235: PUSH
4236: LD_INT 32
4238: PUSH
4239: LD_INT 79
4241: PPUSH
4242: LD_INT 5
4244: PPUSH
4245: CALL 59250 0 2
4249: ADD
4250: PUSH
4251: LD_INT 9
4253: PUSH
4254: LD_INT 27
4256: PUSH
4257: LD_INT 46
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: EMPTY
4266: LIST
4267: ADD
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: LD_INT 80
4274: PPUSH
4275: LD_INT 5
4277: PPUSH
4278: CALL 59250 0 2
4282: ADD
4283: PUSH
4284: LD_INT 9
4286: PUSH
4287: LD_INT 27
4289: PUSH
4290: LD_INT 46
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: PUSH
4298: EMPTY
4299: LIST
4300: ADD
4301: PUSH
4302: LD_INT 32
4304: PUSH
4305: LD_INT 90
4307: PPUSH
4308: LD_INT 5
4310: PPUSH
4311: CALL 59250 0 2
4315: ADD
4316: PUSH
4317: LD_INT 9
4319: PUSH
4320: LD_INT 27
4322: PUSH
4323: LD_INT 46
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: ADD
4334: PUSH
4335: LD_INT 32
4337: PUSH
4338: LD_INT 91
4340: PPUSH
4341: LD_INT 5
4343: PPUSH
4344: CALL 59250 0 2
4348: ADD
4349: PUSH
4350: LD_INT 7
4352: PUSH
4353: LD_INT 28
4355: PUSH
4356: LD_INT 45
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: ADD
4367: PUSH
4368: LD_INT 32
4370: PUSH
4371: LD_INT 92
4373: PPUSH
4374: LD_INT 5
4376: PPUSH
4377: CALL 59250 0 2
4381: ADD
4382: PUSH
4383: LD_INT 7
4385: PUSH
4386: LD_INT 28
4388: PUSH
4389: LD_INT 45
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: ADD
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 93
4406: PPUSH
4407: LD_INT 5
4409: PPUSH
4410: CALL 59250 0 2
4414: ADD
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: LD_INT 25
4421: PUSH
4422: LD_INT 43
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: EMPTY
4431: LIST
4432: ADD
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: ST_TO_ADDR
// end ; end ;
4460: GO 4463
4462: POP
// end ; end_of_file
4463: LD_VAR 0 2
4467: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
4468: LD_VAR 0 1
4472: PPUSH
4473: CALL 60048 0 1
// Multiplayer_UnitDestroyed ( un ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: CALL 10174 0 1
// end ;
4486: PPOPN 1
4488: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: CALL 60065 0 1
// end ;
4498: PPOPN 1
4500: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL 11227 0 1
4510: PPOPN 1
4512: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_VAR 0 2
4522: PPUSH
4523: CALL 60106 0 2
4527: PPOPN 2
4529: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
4530: LD_VAR 0 1
4534: PPUSH
4535: LD_VAR 0 2
4539: PPUSH
4540: CALL 10980 0 2
4544: PPOPN 2
4546: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
4547: LD_VAR 0 1
4551: PPUSH
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_VAR 0 3
4561: PPUSH
4562: CALL 11280 0 3
4566: PPOPN 3
4568: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
4569: LD_VAR 0 1
4573: PPUSH
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_VAR 0 3
4583: PPUSH
4584: LD_VAR 0 4
4588: PPUSH
4589: LD_VAR 0 5
4593: PPUSH
4594: CALL 11964 0 5
4598: PPOPN 5
4600: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
4601: LD_VAR 0 1
4605: PPUSH
4606: LD_VAR 0 2
4610: PPUSH
4611: LD_VAR 0 3
4615: PPUSH
4616: LD_VAR 0 4
4620: PPUSH
4621: CALL 12067 0 4
4625: PPOPN 4
4627: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
4628: LD_INT 0
4630: PPUSH
4631: PPUSH
// disable ( mpActive ) ;
4632: LD_INT 100
4634: DISABLE_MARKED
// disable ( mpWin ) ;
4635: LD_INT 101
4637: DISABLE_MARKED
// disable ( mpLose ) ;
4638: LD_INT 102
4640: DISABLE_MARKED
// mpGameType := 0 ;
4641: LD_ADDR_EXP 3
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// mpGameSettings := [ ] ;
4649: LD_ADDR_EXP 6
4653: PUSH
4654: EMPTY
4655: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
4656: LD_ADDR_EXP 4
4660: PUSH
4661: EMPTY
4662: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
4663: LD_ADDR_EXP 5
4667: PUSH
4668: EMPTY
4669: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
4670: LD_ADDR_EXP 29
4674: PUSH
4675: LD_INT 2
4677: PUSH
4678: LD_INT 2
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: ST_TO_ADDR
// mpOilDeposits := [ ] ;
4685: LD_ADDR_EXP 12
4689: PUSH
4690: EMPTY
4691: ST_TO_ADDR
// mpSibDeposits := [ ] ;
4692: LD_ADDR_EXP 13
4696: PUSH
4697: EMPTY
4698: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
4699: LD_ADDR_EXP 42
4703: PUSH
4704: EMPTY
4705: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
4706: LD_ADDR_EXP 43
4710: PUSH
4711: EMPTY
4712: ST_TO_ADDR
// mpDepots := [ ] ;
4713: LD_ADDR_EXP 14
4717: PUSH
4718: EMPTY
4719: ST_TO_ADDR
// mpBuildings := [ ] ;
4720: LD_ADDR_EXP 17
4724: PUSH
4725: EMPTY
4726: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
4727: LD_ADDR_EXP 18
4731: PUSH
4732: EMPTY
4733: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
4734: LD_ADDR_EXP 19
4738: PUSH
4739: EMPTY
4740: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
4741: LD_ADDR_EXP 20
4745: PUSH
4746: EMPTY
4747: ST_TO_ADDR
// mpStartingResources := [ ] ;
4748: LD_ADDR_EXP 15
4752: PUSH
4753: EMPTY
4754: ST_TO_ADDR
// mpStartPos := [ ] ;
4755: LD_ADDR_EXP 21
4759: PUSH
4760: EMPTY
4761: ST_TO_ADDR
// mpBattleFlag := - 1 ;
4762: LD_ADDR_EXP 22
4766: PUSH
4767: LD_INT 1
4769: NEG
4770: ST_TO_ADDR
// mpBattleFlags := [ ] ;
4771: LD_ADDR_EXP 23
4775: PUSH
4776: EMPTY
4777: ST_TO_ADDR
// mpApemans := [ ] ;
4778: LD_ADDR_EXP 30
4782: PUSH
4783: EMPTY
4784: ST_TO_ADDR
// mpApemansArea := [ ] ;
4785: LD_ADDR_EXP 31
4789: PUSH
4790: EMPTY
4791: ST_TO_ADDR
// mpRespawn := [ ] ;
4792: LD_ADDR_EXP 33
4796: PUSH
4797: EMPTY
4798: ST_TO_ADDR
// mpKingArea := 0 ;
4799: LD_ADDR_EXP 34
4803: PUSH
4804: LD_INT 0
4806: ST_TO_ADDR
// mpPoints := [ ] ;
4807: LD_ADDR_EXP 35
4811: PUSH
4812: EMPTY
4813: ST_TO_ADDR
// mpVehicles := 0 ;
4814: LD_ADDR_EXP 36
4818: PUSH
4819: LD_INT 0
4821: ST_TO_ADDR
// mpShipments := 0 ;
4822: LD_ADDR_EXP 27
4826: PUSH
4827: LD_INT 0
4829: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4830: LD_ADDR_EXP 40
4834: PUSH
4835: EMPTY
4836: PUSH
4837: EMPTY
4838: PUSH
4839: EMPTY
4840: PUSH
4841: EMPTY
4842: PUSH
4843: EMPTY
4844: PUSH
4845: EMPTY
4846: PUSH
4847: EMPTY
4848: PUSH
4849: EMPTY
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4861: LD_ADDR_EXP 32
4865: PUSH
4866: EMPTY
4867: PUSH
4868: EMPTY
4869: PUSH
4870: EMPTY
4871: PUSH
4872: EMPTY
4873: PUSH
4874: EMPTY
4875: PUSH
4876: EMPTY
4877: PUSH
4878: EMPTY
4879: PUSH
4880: EMPTY
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4892: LD_ADDR_EXP 41
4896: PUSH
4897: LD_INT 0
4899: PUSH
4900: LD_INT 0
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: LD_INT 0
4908: PUSH
4909: LD_INT 0
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_INT 0
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: ST_TO_ADDR
// mpEmissions := 0 ;
4931: LD_ADDR_EXP 37
4935: PUSH
4936: LD_INT 0
4938: ST_TO_ADDR
// mpTeleports := 0 ;
4939: LD_ADDR_EXP 44
4943: PUSH
4944: LD_INT 0
4946: ST_TO_ADDR
// mpArtifacts := 0 ;
4947: LD_ADDR_EXP 45
4951: PUSH
4952: LD_INT 0
4954: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
4955: LD_ADDR_EXP 46
4959: PUSH
4960: LD_INT 0
4962: ST_TO_ADDR
// mpPeopleSkill := 3 ;
4963: LD_ADDR_EXP 25
4967: PUSH
4968: LD_INT 3
4970: ST_TO_ADDR
// mpPeopleAmount := 15 ;
4971: LD_ADDR_EXP 24
4975: PUSH
4976: LD_INT 15
4978: ST_TO_ADDR
// mpDisplayStrings := 0 ;
4979: LD_ADDR_EXP 38
4983: PUSH
4984: LD_INT 0
4986: ST_TO_ADDR
// mpGameActive := false ;
4987: LD_ADDR_EXP 39
4991: PUSH
4992: LD_INT 0
4994: ST_TO_ADDR
// mpBlockRespThread := false ;
4995: LD_ADDR_EXP 47
4999: PUSH
5000: LD_INT 0
5002: ST_TO_ADDR
// for i := 1 to 32 do
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: DOUBLE
5009: LD_INT 1
5011: DEC
5012: ST_TO_ADDR
5013: LD_INT 32
5015: PUSH
5016: FOR_TO
5017: IFFALSE 5044
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
5019: LD_ADDR_EXP 6
5023: PUSH
5024: LD_EXP 6
5028: PPUSH
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_INT 0
5036: PPUSH
5037: CALL_OW 1
5041: ST_TO_ADDR
5042: GO 5016
5044: POP
5045: POP
// end ;
5046: LD_VAR 0 1
5050: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
5051: LD_INT 0
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
5057: PPUSH
5058: PPUSH
5059: PPUSH
5060: PPUSH
5061: PPUSH
5062: PPUSH
5063: PPUSH
5064: PPUSH
5065: PPUSH
5066: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
5067: LD_ADDR_VAR 0 14
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: LD_INT 2
5077: PUSH
5078: LD_INT 3
5080: PUSH
5081: LD_INT 5
5083: PUSH
5084: LD_INT 6
5086: PUSH
5087: LD_INT 7
5089: PUSH
5090: LD_INT 8
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: ST_TO_ADDR
// for i in gameTypes do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 14
5111: PUSH
5112: FOR_IN
5113: IFFALSE 5122
// disable ( i ) ;
5115: LD_VAR 0 2
5119: DISABLE_MARKED
5120: GO 5112
5122: POP
5123: POP
// if Multiplayer then
5124: LD_OWVAR 4
5128: IFFALSE 5312
// begin mpGameType := mp_game_type ;
5130: LD_ADDR_EXP 3
5134: PUSH
5135: LD_OWVAR 6
5139: ST_TO_ADDR
// your_side := mp_player_side ;
5140: LD_ADDR_OWVAR 2
5144: PUSH
5145: LD_OWVAR 7
5149: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
5150: LD_ADDR_EXP 7
5154: PUSH
5155: LD_OWVAR 17
5159: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
5160: LD_ADDR_EXP 8
5164: PUSH
5165: LD_OWVAR 15
5169: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
5170: LD_ADDR_EXP 9
5174: PUSH
5175: LD_OWVAR 16
5179: ST_TO_ADDR
// mpTeams := mp_teams ;
5180: LD_ADDR_EXP 10
5184: PUSH
5185: LD_OWVAR 12
5189: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_EXP 4
5204: PPUSH
5205: CALL 18555 0 1
5209: PUSH
5210: FOR_TO
5211: IFFALSE 5287
// begin setting := mpGameSettingsKeys [ i ] ;
5213: LD_ADDR_VAR 0 12
5217: PUSH
5218: LD_EXP 4
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: ST_TO_ADDR
// if setting then
5229: LD_VAR 0 12
5233: IFFALSE 5285
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
5235: LD_ADDR_EXP 6
5239: PUSH
5240: LD_EXP 6
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: LD_EXP 5
5254: PUSH
5255: LD_VAR 0 2
5259: ARRAY
5260: PUSH
5261: LD_VAR 0 2
5265: PUSH
5266: LD_INT 1
5268: MINUS
5269: PPUSH
5270: CALL_OW 426
5274: PUSH
5275: LD_INT 1
5277: PLUS
5278: ARRAY
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// end ;
5285: GO 5210
5287: POP
5288: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
5289: LD_ADDR_EXP 11
5293: PUSH
5294: LD_EXP 8
5298: PUSH
5299: LD_INT 0
5301: PUSH
5302: EMPTY
5303: LIST
5304: DIFF
5305: PUSH
5306: LD_INT 1
5308: GREATER
5309: ST_TO_ADDR
// end else
5310: GO 5312
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
5312: LD_EXP 3
5316: PPUSH
5317: CALL 741 0 1
// if Count ( mpMarkedAreas ) then
5321: LD_EXP 18
5325: PPUSH
5326: CALL 18555 0 1
5330: IFFALSE 5361
// begin for i in mpMarkedAreas do
5332: LD_ADDR_VAR 0 2
5336: PUSH
5337: LD_EXP 18
5341: PUSH
5342: FOR_IN
5343: IFFALSE 5359
// SetAreaMapShow ( i , 0 ) ;
5345: LD_VAR 0 2
5349: PPUSH
5350: LD_INT 0
5352: PPUSH
5353: CALL_OW 424
5357: GO 5342
5359: POP
5360: POP
// end ; for i := 1 to 8 do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 8
5373: PUSH
5374: FOR_TO
5375: IFFALSE 6834
// begin if not mpSidePositions [ i ] then
5377: LD_EXP 7
5381: PUSH
5382: LD_VAR 0 2
5386: ARRAY
5387: NOT
5388: IFFALSE 5392
// continue ;
5390: GO 5374
// side := i ;
5392: LD_ADDR_VAR 0 7
5396: PUSH
5397: LD_VAR 0 2
5401: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
5402: LD_ADDR_VAR 0 9
5406: PUSH
5407: LD_EXP 9
5411: PUSH
5412: LD_VAR 0 2
5416: ARRAY
5417: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
5418: LD_ADDR_VAR 0 8
5422: PUSH
5423: LD_EXP 7
5427: PUSH
5428: LD_VAR 0 2
5432: ARRAY
5433: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
5434: LD_EXP 12
5438: PPUSH
5439: CALL 18555 0 1
5443: IFFALSE 5520
// begin for j in mpOilDeposits [ pos ] do
5445: LD_ADDR_VAR 0 3
5449: PUSH
5450: LD_EXP 12
5454: PUSH
5455: LD_VAR 0 8
5459: ARRAY
5460: PUSH
5461: FOR_IN
5462: IFFALSE 5518
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
5464: LD_VAR 0 3
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 3
5477: PUSH
5478: LD_INT 2
5480: ARRAY
5481: PPUSH
5482: LD_INT 2
5484: PPUSH
5485: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 1
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 3
5502: PUSH
5503: LD_INT 2
5505: ARRAY
5506: PPUSH
5507: LD_VAR 0 7
5511: PPUSH
5512: CALL_OW 441
// end ;
5516: GO 5461
5518: POP
5519: POP
// end ; if Count ( mpSibDeposits ) then
5520: LD_EXP 13
5524: PPUSH
5525: CALL 18555 0 1
5529: IFFALSE 5606
// begin for j in mpSibDeposits [ pos ] do
5531: LD_ADDR_VAR 0 3
5535: PUSH
5536: LD_EXP 13
5540: PUSH
5541: LD_VAR 0 8
5545: ARRAY
5546: PUSH
5547: FOR_IN
5548: IFFALSE 5604
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
5550: LD_VAR 0 3
5554: PUSH
5555: LD_INT 1
5557: ARRAY
5558: PPUSH
5559: LD_VAR 0 3
5563: PUSH
5564: LD_INT 2
5566: ARRAY
5567: PPUSH
5568: LD_INT 3
5570: PPUSH
5571: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
5575: LD_VAR 0 3
5579: PUSH
5580: LD_INT 1
5582: ARRAY
5583: PPUSH
5584: LD_VAR 0 3
5588: PUSH
5589: LD_INT 2
5591: ARRAY
5592: PPUSH
5593: LD_VAR 0 7
5597: PPUSH
5598: CALL_OW 441
// end ;
5602: GO 5547
5604: POP
5605: POP
// end ; InitBc ;
5606: CALL_OW 21
// InitUc ;
5610: CALL_OW 18
// uc_side := side ;
5614: LD_ADDR_OWVAR 20
5618: PUSH
5619: LD_VAR 0 7
5623: ST_TO_ADDR
// uc_nation := nation ;
5624: LD_ADDR_OWVAR 21
5628: PUSH
5629: LD_VAR 0 9
5633: ST_TO_ADDR
// if mpBattleFlag > - 1 then
5634: LD_EXP 22
5638: PUSH
5639: LD_INT 1
5641: NEG
5642: GREATER
5643: IFFALSE 5802
// begin x := mpStartPos [ pos ] [ 1 ] ;
5645: LD_ADDR_VAR 0 5
5649: PUSH
5650: LD_EXP 21
5654: PUSH
5655: LD_VAR 0 8
5659: ARRAY
5660: PUSH
5661: LD_INT 1
5663: ARRAY
5664: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
5665: LD_ADDR_VAR 0 6
5669: PUSH
5670: LD_EXP 21
5674: PUSH
5675: LD_VAR 0 8
5679: ARRAY
5680: PUSH
5681: LD_INT 2
5683: ARRAY
5684: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
5685: LD_VAR 0 5
5689: PPUSH
5690: LD_VAR 0 6
5694: PPUSH
5695: LD_INT 12
5697: PPUSH
5698: LD_INT 2
5700: PPUSH
5701: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
5705: LD_ADDR_EXP 23
5709: PUSH
5710: LD_EXP 23
5714: PPUSH
5715: LD_VAR 0 7
5719: PPUSH
5720: LD_VAR 0 7
5724: PPUSH
5725: LD_VAR 0 5
5729: PPUSH
5730: LD_VAR 0 6
5734: PPUSH
5735: LD_INT 1
5737: PUSH
5738: LD_INT 100
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 2
5747: PUSH
5748: LD_INT 70
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: PUSH
5755: LD_INT 3
5757: PUSH
5758: LD_INT 40
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 10
5767: PUSH
5768: LD_INT 25
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 20
5777: PUSH
5778: LD_INT 100
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 418
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
5802: LD_EXP 14
5806: PPUSH
5807: CALL 18555 0 1
5811: IFFALSE 6010
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
5813: LD_EXP 3
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: LD_INT 8
5823: PUSH
5824: LD_INT 6
5826: PUSH
5827: LD_INT 7
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: IN
5836: IFFALSE 5856
// begin bc_level := 10 ;
5838: LD_ADDR_OWVAR 43
5842: PUSH
5843: LD_INT 10
5845: ST_TO_ADDR
// bc_type := b_warehouse ;
5846: LD_ADDR_OWVAR 42
5850: PUSH
5851: LD_INT 1
5853: ST_TO_ADDR
// end else
5854: GO 5872
// begin bc_level := 0 ;
5856: LD_ADDR_OWVAR 43
5860: PUSH
5861: LD_INT 0
5863: ST_TO_ADDR
// bc_type := b_depot ;
5864: LD_ADDR_OWVAR 42
5868: PUSH
5869: LD_INT 0
5871: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
5872: LD_ADDR_VAR 0 4
5876: PUSH
5877: LD_EXP 14
5881: PUSH
5882: LD_VAR 0 8
5886: ARRAY
5887: PUSH
5888: LD_INT 1
5890: ARRAY
5891: PPUSH
5892: LD_EXP 14
5896: PUSH
5897: LD_VAR 0 8
5901: ARRAY
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PPUSH
5907: LD_EXP 14
5911: PUSH
5912: LD_VAR 0 8
5916: ARRAY
5917: PUSH
5918: LD_INT 3
5920: ARRAY
5921: PPUSH
5922: CALL_OW 47
5926: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
5927: LD_VAR 0 4
5931: PPUSH
5932: LD_STRING @
5934: PUSH
5935: LD_VAR 0 7
5939: STR
5940: PPUSH
5941: CALL_OW 500
// if Count ( mpStartingResources ) then
5945: LD_EXP 15
5949: PPUSH
5950: CALL 18555 0 1
5954: IFFALSE 6008
// begin for j := 1 to mpStartingResources do
5956: LD_ADDR_VAR 0 3
5960: PUSH
5961: DOUBLE
5962: LD_INT 1
5964: DEC
5965: ST_TO_ADDR
5966: LD_EXP 15
5970: PUSH
5971: FOR_TO
5972: IFFALSE 6006
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
5974: LD_VAR 0 4
5978: PPUSH
5979: CALL_OW 274
5983: PPUSH
5984: LD_VAR 0 3
5988: PPUSH
5989: LD_EXP 15
5993: PUSH
5994: LD_VAR 0 3
5998: ARRAY
5999: PPUSH
6000: CALL_OW 277
6004: GO 5971
6006: POP
6007: POP
// end ; end else
6008: GO 6217
// if Count ( mpStartingResources ) then
6010: LD_EXP 15
6014: PPUSH
6015: CALL 18555 0 1
6019: IFFALSE 6217
// begin x := mpStartPos [ pos ] [ 1 ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_EXP 21
6030: PUSH
6031: LD_VAR 0 8
6035: ARRAY
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
6041: LD_ADDR_VAR 0 6
6045: PUSH
6046: LD_EXP 21
6050: PUSH
6051: LD_VAR 0 8
6055: ARRAY
6056: PUSH
6057: LD_INT 2
6059: ARRAY
6060: ST_TO_ADDR
// for j := 1 to mpStartingResources do
6061: LD_ADDR_VAR 0 3
6065: PUSH
6066: DOUBLE
6067: LD_INT 1
6069: DEC
6070: ST_TO_ADDR
6071: LD_EXP 15
6075: PUSH
6076: FOR_TO
6077: IFFALSE 6215
// begin resources := mpStartingResources [ j ] ;
6079: LD_ADDR_VAR 0 13
6083: PUSH
6084: LD_EXP 15
6088: PUSH
6089: LD_VAR 0 3
6093: ARRAY
6094: ST_TO_ADDR
// if resources = 0 then
6095: LD_VAR 0 13
6099: PUSH
6100: LD_INT 0
6102: EQUAL
6103: IFFALSE 6107
// continue ;
6105: GO 6076
// repeat if resources >= 50 then
6107: LD_VAR 0 13
6111: PUSH
6112: LD_INT 50
6114: GREATEREQUAL
6115: IFFALSE 6161
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
6117: LD_VAR 0 3
6121: PPUSH
6122: LD_INT 5
6124: PPUSH
6125: LD_VAR 0 5
6129: PPUSH
6130: LD_VAR 0 6
6134: PPUSH
6135: LD_INT 6
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 60
// resources := resources - 50 ;
6145: LD_ADDR_VAR 0 13
6149: PUSH
6150: LD_VAR 0 13
6154: PUSH
6155: LD_INT 50
6157: MINUS
6158: ST_TO_ADDR
// end else
6159: GO 6203
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
6161: LD_VAR 0 3
6165: PPUSH
6166: LD_VAR 0 13
6170: PUSH
6171: LD_INT 10
6173: DIV
6174: PPUSH
6175: LD_VAR 0 5
6179: PPUSH
6180: LD_VAR 0 6
6184: PPUSH
6185: LD_INT 6
6187: PPUSH
6188: LD_INT 0
6190: PPUSH
6191: CALL_OW 60
// resources := 0 ;
6195: LD_ADDR_VAR 0 13
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// end ; until resources <= 0 ;
6203: LD_VAR 0 13
6207: PUSH
6208: LD_INT 0
6210: LESSEQUAL
6211: IFFALSE 6107
// end ;
6213: GO 6076
6215: POP
6216: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
6217: LD_EXP 17
6221: PPUSH
6222: CALL 18555 0 1
6226: IFFALSE 6246
6228: PUSH
6229: LD_EXP 3
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: LD_INT 8
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: IN
6244: NOT
6245: AND
6246: IFFALSE 6324
// begin for j in mpBuildings [ pos ] do
6248: LD_ADDR_VAR 0 3
6252: PUSH
6253: LD_EXP 17
6257: PUSH
6258: LD_VAR 0 8
6262: ARRAY
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6322
// begin bc_level := 0 ;
6267: LD_ADDR_OWVAR 43
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// bc_type := j [ 1 ] ;
6275: LD_ADDR_OWVAR 42
6279: PUSH
6280: LD_VAR 0 3
6284: PUSH
6285: LD_INT 1
6287: ARRAY
6288: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
6289: LD_VAR 0 3
6293: PUSH
6294: LD_INT 2
6296: ARRAY
6297: PPUSH
6298: LD_VAR 0 3
6302: PUSH
6303: LD_INT 3
6305: ARRAY
6306: PPUSH
6307: LD_VAR 0 3
6311: PUSH
6312: LD_INT 4
6314: ARRAY
6315: PPUSH
6316: CALL_OW 47
// end ;
6320: GO 6264
6322: POP
6323: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
6324: LD_EXP 26
6328: IFFALSE 6348
6330: PUSH
6331: LD_INT 20
6333: PPUSH
6334: LD_VAR 0 7
6338: PPUSH
6339: CALL_OW 321
6343: PUSH
6344: LD_INT 1
6346: EQUAL
6347: AND
6348: IFFALSE 6365
// SetTech ( tech_SibDet , side , state_researched ) ;
6350: LD_INT 20
6352: PPUSH
6353: LD_VAR 0 7
6357: PPUSH
6358: LD_INT 2
6360: PPUSH
6361: CALL_OW 322
// if not mpArtifacts then
6365: LD_EXP 45
6369: NOT
6370: IFFALSE 6387
// SetTech ( tech_artifact , side , state_disabled ) ;
6372: LD_INT 24
6374: PPUSH
6375: LD_VAR 0 7
6379: PPUSH
6380: LD_INT 0
6382: PPUSH
6383: CALL_OW 322
// if mpSibBomb = 1 then
6387: LD_EXP 28
6391: PUSH
6392: LD_INT 1
6394: EQUAL
6395: IFFALSE 6414
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
6397: LD_INT 25
6399: PPUSH
6400: LD_VAR 0 7
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL_OW 322
// end else
6412: GO 6429
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
6414: LD_INT 25
6416: PPUSH
6417: LD_VAR 0 7
6421: PPUSH
6422: LD_INT 0
6424: PPUSH
6425: CALL_OW 322
// end ; if mpVehicles then
6429: LD_EXP 36
6433: IFFALSE 6532
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
6435: LD_ADDR_VAR 0 3
6439: PUSH
6440: LD_VAR 0 7
6444: PPUSH
6445: LD_VAR 0 9
6449: PPUSH
6450: LD_EXP 36
6454: PPUSH
6455: CALL 7791 0 3
6459: PUSH
6460: FOR_IN
6461: IFFALSE 6530
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
6463: LD_VAR 0 3
6467: PPUSH
6468: LD_INT 0
6470: PPUSH
6471: LD_INT 5
6473: PPUSH
6474: CALL_OW 12
6478: PPUSH
6479: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6483: LD_VAR 0 3
6487: PPUSH
6488: LD_EXP 21
6492: PUSH
6493: LD_VAR 0 8
6497: ARRAY
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_EXP 21
6507: PUSH
6508: LD_VAR 0 8
6512: ARRAY
6513: PUSH
6514: LD_INT 2
6516: ARRAY
6517: PPUSH
6518: LD_INT 12
6520: PPUSH
6521: LD_INT 0
6523: PPUSH
6524: CALL_OW 50
// end ;
6528: GO 6460
6530: POP
6531: POP
// end ; uc_nation := nation ;
6532: LD_ADDR_OWVAR 21
6536: PUSH
6537: LD_VAR 0 9
6541: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
6542: LD_EXP 3
6546: PUSH
6547: LD_INT 6
6549: PUSH
6550: LD_INT 7
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: IN
6557: IFFALSE 6582
6559: PUSH
6560: LD_EXP 7
6564: PUSH
6565: LD_VAR 0 2
6569: ARRAY
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: IN
6581: AND
6582: IFFALSE 6630
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
6584: LD_ADDR_VAR 0 11
6588: PUSH
6589: LD_VAR 0 7
6593: PPUSH
6594: LD_VAR 0 9
6598: PPUSH
6599: LD_EXP 24
6603: PUSH
6604: LD_EXP 24
6608: PUSH
6609: LD_INT 2
6611: DIV
6612: PLUS
6613: PPUSH
6614: LD_EXP 25
6618: PUSH
6619: LD_INT 1
6621: PLUS
6622: PPUSH
6623: CALL 7246 0 4
6627: ST_TO_ADDR
6628: GO 6660
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
6630: LD_ADDR_VAR 0 11
6634: PUSH
6635: LD_VAR 0 7
6639: PPUSH
6640: LD_VAR 0 9
6644: PPUSH
6645: LD_EXP 24
6649: PPUSH
6650: LD_EXP 25
6654: PPUSH
6655: CALL 7246 0 4
6659: ST_TO_ADDR
// for j in team do
6660: LD_ADDR_VAR 0 3
6664: PUSH
6665: LD_VAR 0 11
6669: PUSH
6670: FOR_IN
6671: IFFALSE 6720
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
6673: LD_VAR 0 3
6677: PPUSH
6678: LD_EXP 21
6682: PUSH
6683: LD_VAR 0 8
6687: ARRAY
6688: PUSH
6689: LD_INT 1
6691: ARRAY
6692: PPUSH
6693: LD_EXP 21
6697: PUSH
6698: LD_VAR 0 8
6702: ARRAY
6703: PUSH
6704: LD_INT 2
6706: ARRAY
6707: PPUSH
6708: LD_INT 12
6710: PPUSH
6711: LD_INT 0
6713: PPUSH
6714: CALL_OW 50
6718: GO 6670
6720: POP
6721: POP
// if mpApemans then
6722: LD_EXP 30
6726: IFFALSE 6832
// begin for j := 1 to mpApemans do
6728: LD_ADDR_VAR 0 3
6732: PUSH
6733: DOUBLE
6734: LD_INT 1
6736: DEC
6737: ST_TO_ADDR
6738: LD_EXP 30
6742: PUSH
6743: FOR_TO
6744: IFFALSE 6830
// begin PrepareApeman ( - 5 ) ;
6746: LD_INT 5
6748: NEG
6749: PPUSH
6750: CALL 50658 0 1
// ape := CreateHuman ;
6754: LD_ADDR_VAR 0 10
6758: PUSH
6759: CALL_OW 44
6763: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
6764: LD_ADDR_EXP 32
6768: PUSH
6769: LD_EXP 32
6773: PPUSH
6774: LD_VAR 0 8
6778: PPUSH
6779: LD_EXP 32
6783: PUSH
6784: LD_VAR 0 8
6788: ARRAY
6789: PPUSH
6790: LD_VAR 0 10
6794: PPUSH
6795: CALL 54531 0 2
6799: PPUSH
6800: CALL_OW 1
6804: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
6805: LD_VAR 0 10
6809: PPUSH
6810: LD_EXP 31
6814: PUSH
6815: LD_VAR 0 8
6819: ARRAY
6820: PPUSH
6821: LD_INT 0
6823: PPUSH
6824: CALL_OW 49
// end ;
6828: GO 6743
6830: POP
6831: POP
// end ; end ;
6832: GO 5374
6834: POP
6835: POP
// if not mpTeamGame then
6836: LD_EXP 11
6840: NOT
6841: IFFALSE 6939
// begin for i := 1 to 8 do
6843: LD_ADDR_VAR 0 2
6847: PUSH
6848: DOUBLE
6849: LD_INT 1
6851: DEC
6852: ST_TO_ADDR
6853: LD_INT 8
6855: PUSH
6856: FOR_TO
6857: IFFALSE 6935
// for j := 1 to 8 do
6859: LD_ADDR_VAR 0 3
6863: PUSH
6864: DOUBLE
6865: LD_INT 1
6867: DEC
6868: ST_TO_ADDR
6869: LD_INT 8
6871: PUSH
6872: FOR_TO
6873: IFFALSE 6931
// if i <> j then
6875: LD_VAR 0 2
6879: PUSH
6880: LD_VAR 0 3
6884: NONEQUAL
6885: IFFALSE 6909
// SetAttitude ( i , j , att_neutral , true ) else
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_INT 0
6899: PPUSH
6900: LD_INT 1
6902: PPUSH
6903: CALL_OW 80
6907: GO 6929
// SetAttitude ( i , j , att_friend , true ) ;
6909: LD_VAR 0 2
6913: PPUSH
6914: LD_VAR 0 3
6918: PPUSH
6919: LD_INT 1
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL_OW 80
6929: GO 6872
6931: POP
6932: POP
6933: GO 6856
6935: POP
6936: POP
// end else
6937: GO 7114
// begin if mpSharedVision then
6939: LD_EXP 16
6943: IFFALSE 7008
// begin for i in mpTeams do
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_EXP 10
6954: PUSH
6955: FOR_IN
6956: IFFALSE 7006
// for j := 2 to i do
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: DOUBLE
6964: LD_INT 2
6966: DEC
6967: ST_TO_ADDR
6968: LD_VAR 0 2
6972: PUSH
6973: FOR_TO
6974: IFFALSE 7002
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
6976: LD_VAR 0 2
6980: PUSH
6981: LD_VAR 0 3
6985: ARRAY
6986: PPUSH
6987: LD_VAR 0 2
6991: PUSH
6992: LD_INT 1
6994: ARRAY
6995: PPUSH
6996: CALL_OW 343
7000: GO 6973
7002: POP
7003: POP
7004: GO 6955
7006: POP
7007: POP
// end ; for i := 1 to 8 do
7008: LD_ADDR_VAR 0 2
7012: PUSH
7013: DOUBLE
7014: LD_INT 1
7016: DEC
7017: ST_TO_ADDR
7018: LD_INT 8
7020: PUSH
7021: FOR_TO
7022: IFFALSE 7112
// for j := 1 to 8 do
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: DOUBLE
7030: LD_INT 1
7032: DEC
7033: ST_TO_ADDR
7034: LD_INT 8
7036: PUSH
7037: FOR_TO
7038: IFFALSE 7108
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
7040: LD_EXP 8
7044: PUSH
7045: LD_VAR 0 2
7049: ARRAY
7050: PUSH
7051: LD_EXP 8
7055: PUSH
7056: LD_VAR 0 3
7060: ARRAY
7061: EQUAL
7062: IFFALSE 7086
// SetAttitude ( i , j , att_friend , true ) else
7064: LD_VAR 0 2
7068: PPUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 1
7076: PPUSH
7077: LD_INT 1
7079: PPUSH
7080: CALL_OW 80
7084: GO 7106
// SetAttitude ( i , j , att_enemy , true ) ;
7086: LD_VAR 0 2
7090: PPUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 2
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: CALL_OW 80
7106: GO 7037
7108: POP
7109: POP
7110: GO 7021
7112: POP
7113: POP
// end ; music_nat := mpSideNations [ your_side ] ;
7114: LD_ADDR_OWVAR 71
7118: PUSH
7119: LD_EXP 9
7123: PUSH
7124: LD_OWVAR 2
7128: ARRAY
7129: ST_TO_ADDR
// if IAmSpec then
7130: CALL_OW 531
7134: IFFALSE 7175
// begin FogOff ( true ) ;
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
7143: LD_EXP 29
7147: PUSH
7148: LD_INT 1
7150: ARRAY
7151: PUSH
7152: LD_INT 2
7154: DIV
7155: PPUSH
7156: LD_EXP 29
7160: PUSH
7161: LD_INT 2
7163: ARRAY
7164: PUSH
7165: LD_INT 2
7167: DIV
7168: PPUSH
7169: CALL_OW 86
// end else
7173: GO 7221
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
7175: LD_EXP 21
7179: PUSH
7180: LD_EXP 7
7184: PUSH
7185: LD_OWVAR 2
7189: ARRAY
7190: ARRAY
7191: PUSH
7192: LD_INT 1
7194: ARRAY
7195: PPUSH
7196: LD_EXP 21
7200: PUSH
7201: LD_EXP 7
7205: PUSH
7206: LD_OWVAR 2
7210: ARRAY
7211: ARRAY
7212: PUSH
7213: LD_INT 2
7215: ARRAY
7216: PPUSH
7217: CALL_OW 86
// end ; BeginBuildUp ;
7221: CALL 8324 0 0
// enable ( mpActive ) ;
7225: LD_INT 100
7227: ENABLE_MARKED
// enable ( mpGameType ) ;
7228: LD_EXP 3
7232: ENABLE_MARKED
// mpGameActive := true ;
7233: LD_ADDR_EXP 39
7237: PUSH
7238: LD_INT 1
7240: ST_TO_ADDR
// end ;
7241: LD_VAR 0 1
7245: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
7246: LD_INT 0
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// result := [ ] ;
7253: LD_ADDR_VAR 0 5
7257: PUSH
7258: EMPTY
7259: ST_TO_ADDR
// class := class_soldier ;
7260: LD_ADDR_VAR 0 8
7264: PUSH
7265: LD_INT 1
7267: ST_TO_ADDR
// uc_side := side ;
7268: LD_ADDR_OWVAR 20
7272: PUSH
7273: LD_VAR 0 1
7277: ST_TO_ADDR
// uc_nation := nation ;
7278: LD_ADDR_OWVAR 21
7282: PUSH
7283: LD_VAR 0 2
7287: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
7288: LD_ADDR_OWVAR 26
7292: PUSH
7293: LD_OWVAR 19
7297: PUSH
7298: LD_VAR 0 1
7302: ARRAY
7303: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
7304: LD_INT 1
7306: PPUSH
7307: LD_INT 2
7309: PPUSH
7310: CALL_OW 12
7314: PPUSH
7315: LD_VAR 0 8
7319: PPUSH
7320: LD_VAR 0 4
7324: PUSH
7325: LD_INT 2
7327: PLUS
7328: PPUSH
7329: CALL_OW 380
// hc_importance := 105 ;
7333: LD_ADDR_OWVAR 32
7337: PUSH
7338: LD_INT 105
7340: ST_TO_ADDR
// if Multiplayer then
7341: LD_OWVAR 4
7345: IFFALSE 7385
// begin hc_gallery := MULTIAVATARS ;
7347: LD_ADDR_OWVAR 33
7351: PUSH
7352: LD_STRING MULTIAVATARS
7354: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
7355: LD_ADDR_OWVAR 34
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 525
7369: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
7370: LD_ADDR_OWVAR 27
7374: PUSH
7375: LD_VAR 0 1
7379: PPUSH
7380: CALL_OW 526
7384: ST_TO_ADDR
// end ; commander := CreateHuman ;
7385: LD_ADDR_VAR 0 9
7389: PUSH
7390: CALL_OW 44
7394: ST_TO_ADDR
// result := Join ( result , commander ) ;
7395: LD_ADDR_VAR 0 5
7399: PUSH
7400: LD_VAR 0 5
7404: PPUSH
7405: LD_VAR 0 9
7409: PPUSH
7410: CALL 54531 0 2
7414: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
7415: LD_ADDR_EXP 41
7419: PUSH
7420: LD_EXP 41
7424: PPUSH
7425: LD_VAR 0 1
7429: PPUSH
7430: LD_VAR 0 9
7434: PPUSH
7435: CALL_OW 1
7439: ST_TO_ADDR
// if mpTeamPreset then
7440: LD_LOC 1
7444: IFFALSE 7540
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
7446: LD_LOC 1
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_VAR 0 5
7459: PUSH
7460: LD_VAR 0 5
7464: ARRAY
7465: PPUSH
7466: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
7470: LD_VAR 0 5
7474: PUSH
7475: LD_VAR 0 5
7479: ARRAY
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: LD_LOC 1
7488: PUSH
7489: LD_INT 1
7491: ARRAY
7492: PPUSH
7493: LD_INT 1
7495: PPUSH
7496: CALL_OW 260
7500: PPUSH
7501: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
7505: LD_VAR 0 5
7509: PUSH
7510: LD_VAR 0 5
7514: ARRAY
7515: PPUSH
7516: LD_INT 2
7518: PPUSH
7519: LD_LOC 1
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: CALL_OW 260
7535: PPUSH
7536: CALL_OW 239
// end ; InitHc_All ( ) ;
7540: CALL_OW 584
// class := 2 ;
7544: LD_ADDR_VAR 0 8
7548: PUSH
7549: LD_INT 2
7551: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: DOUBLE
7558: LD_INT 1
7560: DEC
7561: ST_TO_ADDR
7562: LD_VAR 0 3
7566: PUSH
7567: LD_INT 1
7569: MINUS
7570: PUSH
7571: FOR_TO
7572: IFFALSE 7767
// begin PrepareHuman ( false , class , skill ) ;
7574: LD_INT 0
7576: PPUSH
7577: LD_VAR 0 8
7581: PPUSH
7582: LD_VAR 0 4
7586: PPUSH
7587: CALL_OW 380
// un := CreateHuman ;
7591: LD_ADDR_VAR 0 7
7595: PUSH
7596: CALL_OW 44
7600: ST_TO_ADDR
// result := Join ( result , un ) ;
7601: LD_ADDR_VAR 0 5
7605: PUSH
7606: LD_VAR 0 5
7610: PPUSH
7611: LD_VAR 0 7
7615: PPUSH
7616: CALL 54531 0 2
7620: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
7621: LD_LOC 1
7625: PPUSH
7626: CALL 18555 0 1
7630: PUSH
7631: LD_VAR 0 3
7635: GREATEREQUAL
7636: IFFALSE 7732
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
7638: LD_LOC 1
7642: PUSH
7643: LD_VAR 0 6
7647: PUSH
7648: LD_INT 1
7650: PLUS
7651: ARRAY
7652: PPUSH
7653: LD_VAR 0 7
7657: PPUSH
7658: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
7662: LD_VAR 0 7
7666: PPUSH
7667: LD_INT 1
7669: PPUSH
7670: LD_LOC 1
7674: PUSH
7675: LD_VAR 0 6
7679: PUSH
7680: LD_INT 1
7682: PLUS
7683: ARRAY
7684: PPUSH
7685: LD_INT 1
7687: PPUSH
7688: CALL_OW 260
7692: PPUSH
7693: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
7697: LD_VAR 0 7
7701: PPUSH
7702: LD_INT 2
7704: PPUSH
7705: LD_LOC 1
7709: PUSH
7710: LD_VAR 0 6
7714: PUSH
7715: LD_INT 1
7717: PLUS
7718: ARRAY
7719: PPUSH
7720: LD_INT 2
7722: PPUSH
7723: CALL_OW 260
7727: PPUSH
7728: CALL_OW 239
// end ; class := Inc ( class ) ;
7732: LD_ADDR_VAR 0 8
7736: PUSH
7737: LD_VAR 0 8
7741: PPUSH
7742: CALL 55904 0 1
7746: ST_TO_ADDR
// if class = 5 then
7747: LD_VAR 0 8
7751: PUSH
7752: LD_INT 5
7754: EQUAL
7755: IFFALSE 7765
// class := 1 ;
7757: LD_ADDR_VAR 0 8
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// end ;
7765: GO 7571
7767: POP
7768: POP
// if not mpTeamPreset then
7769: LD_LOC 1
7773: NOT
7774: IFFALSE 7786
// mpTeamPreset := result ;
7776: LD_ADDR_LOC 1
7780: PUSH
7781: LD_VAR 0 5
7785: ST_TO_ADDR
// end ;
7786: LD_VAR 0 5
7790: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
7791: LD_INT 0
7793: PPUSH
7794: PPUSH
// result := [ ] ;
7795: LD_ADDR_VAR 0 4
7799: PUSH
7800: EMPTY
7801: ST_TO_ADDR
// if not vehicles then
7802: LD_VAR 0 3
7806: NOT
7807: IFFALSE 7811
// exit ;
7809: GO 8025
// for i := 1 to vehicles [ nation ] do
7811: LD_ADDR_VAR 0 5
7815: PUSH
7816: DOUBLE
7817: LD_INT 1
7819: DEC
7820: ST_TO_ADDR
7821: LD_VAR 0 3
7825: PUSH
7826: LD_VAR 0 2
7830: ARRAY
7831: PUSH
7832: FOR_TO
7833: IFFALSE 8023
// begin uc_side := side ;
7835: LD_ADDR_OWVAR 20
7839: PUSH
7840: LD_VAR 0 1
7844: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_VAR 0 2
7854: ARRAY
7855: PUSH
7856: LD_VAR 0 5
7860: ARRAY
7861: PPUSH
7862: CALL 18555 0 1
7866: PUSH
7867: LD_INT 4
7869: GREATER
7870: IFFALSE 7900
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
7872: LD_ADDR_OWVAR 21
7876: PUSH
7877: LD_VAR 0 3
7881: PUSH
7882: LD_VAR 0 2
7886: ARRAY
7887: PUSH
7888: LD_VAR 0 5
7892: ARRAY
7893: PUSH
7894: LD_INT 5
7896: ARRAY
7897: ST_TO_ADDR
7898: GO 7910
// uc_nation := nation ;
7900: LD_ADDR_OWVAR 21
7904: PUSH
7905: LD_VAR 0 2
7909: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
7910: LD_VAR 0 3
7914: PUSH
7915: LD_VAR 0 2
7919: ARRAY
7920: PUSH
7921: LD_VAR 0 5
7925: ARRAY
7926: PUSH
7927: LD_INT 1
7929: ARRAY
7930: PPUSH
7931: LD_VAR 0 3
7935: PUSH
7936: LD_VAR 0 2
7940: ARRAY
7941: PUSH
7942: LD_VAR 0 5
7946: ARRAY
7947: PUSH
7948: LD_INT 2
7950: ARRAY
7951: PPUSH
7952: LD_VAR 0 3
7956: PUSH
7957: LD_VAR 0 2
7961: ARRAY
7962: PUSH
7963: LD_VAR 0 5
7967: ARRAY
7968: PUSH
7969: LD_INT 3
7971: ARRAY
7972: PPUSH
7973: LD_VAR 0 3
7977: PUSH
7978: LD_VAR 0 2
7982: ARRAY
7983: PUSH
7984: LD_VAR 0 5
7988: ARRAY
7989: PUSH
7990: LD_INT 4
7992: ARRAY
7993: PPUSH
7994: LD_INT 80
7996: PPUSH
7997: CALL 21351 0 5
// result := Join ( result , CreateVehicle ) ;
8001: LD_ADDR_VAR 0 4
8005: PUSH
8006: LD_VAR 0 4
8010: PPUSH
8011: CALL_OW 45
8015: PPUSH
8016: CALL 54531 0 2
8020: ST_TO_ADDR
// end ;
8021: GO 7832
8023: POP
8024: POP
// end ;
8025: LD_VAR 0 4
8029: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
8030: LD_INT 0
8032: PPUSH
8033: PPUSH
// for i in mpBattleFlags do
8034: LD_ADDR_VAR 0 3
8038: PUSH
8039: LD_EXP 23
8043: PUSH
8044: FOR_IN
8045: IFFALSE 8122
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
8047: LD_VAR 0 3
8051: PPUSH
8052: LD_INT 1
8054: PUSH
8055: LD_VAR 0 1
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_VAR 0 1
8071: PUSH
8072: LD_REAL  7.00000000000000E-0001
8075: MUL
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 3
8083: PUSH
8084: LD_VAR 0 1
8088: PUSH
8089: LD_REAL  4.00000000000000E-0001
8092: MUL
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 20
8100: PUSH
8101: LD_VAR 0 1
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 423
8120: GO 8044
8122: POP
8123: POP
// end ;
8124: LD_VAR 0 2
8128: RET
// every 0 0$1 trigger mpActive do var i , strength ;
8129: LD_INT 100
8131: IFFALSE 8226
8133: GO 8135
8135: DISABLE
8136: LD_INT 0
8138: PPUSH
8139: PPUSH
// begin if mpBattleFlag <= 0 then
8140: LD_EXP 22
8144: PUSH
8145: LD_INT 0
8147: LESSEQUAL
8148: IFFALSE 8152
// exit ;
8150: GO 8226
// strength := 100 ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 100
8159: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
8160: LD_EXP 22
8164: PPUSH
8165: CALL_OW 67
// strength := Dec ( strength ) ;
8169: LD_ADDR_VAR 0 2
8173: PUSH
8174: LD_VAR 0 2
8178: PPUSH
8179: CALL 55926 0 1
8183: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
8184: LD_VAR 0 2
8188: PPUSH
8189: CALL 8030 0 1
// until not strength ;
8193: LD_VAR 0 2
8197: NOT
8198: IFFALSE 8160
// for i in mpBattleFlags do
8200: LD_ADDR_VAR 0 1
8204: PUSH
8205: LD_EXP 23
8209: PUSH
8210: FOR_IN
8211: IFFALSE 8224
// KillBattleFlag ( i ) ;
8213: LD_VAR 0 1
8217: PPUSH
8218: CALL_OW 419
8222: GO 8210
8224: POP
8225: POP
// end ;
8226: PPOPN 2
8228: END
// every 0 0$1 marked mpActive do var side , tmp ;
8229: GO 8231
8231: DISABLE
8232: LD_INT 0
8234: PPUSH
8235: PPUSH
// begin if mpSibBomb <= 1 then
8236: LD_EXP 28
8240: PUSH
8241: LD_INT 1
8243: LESSEQUAL
8244: IFFALSE 8248
// exit ;
8246: GO 8321
// tmp := mpSibBomb ;
8248: LD_ADDR_VAR 0 2
8252: PUSH
8253: LD_EXP 28
8257: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8258: LD_INT 35
8260: PPUSH
8261: CALL_OW 67
// tmp := tmp - 0 0$1 ;
8265: LD_ADDR_VAR 0 2
8269: PUSH
8270: LD_VAR 0 2
8274: PUSH
8275: LD_INT 35
8277: MINUS
8278: ST_TO_ADDR
// until not tmp ;
8279: LD_VAR 0 2
8283: NOT
8284: IFFALSE 8258
// for side := 1 to 8 do
8286: LD_ADDR_VAR 0 1
8290: PUSH
8291: DOUBLE
8292: LD_INT 1
8294: DEC
8295: ST_TO_ADDR
8296: LD_INT 8
8298: PUSH
8299: FOR_TO
8300: IFFALSE 8319
// SetTech ( tech_SibFiss , side , state_enabled ) ;
8302: LD_INT 25
8304: PPUSH
8305: LD_VAR 0 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: CALL_OW 322
8317: GO 8299
8319: POP
8320: POP
// end ;
8321: PPOPN 2
8323: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
8324: LD_INT 0
8326: PPUSH
8327: PPUSH
8328: PPUSH
// mpBuildUpTimeDelay := 0 ;
8329: LD_ADDR_EXP 48
8333: PUSH
8334: LD_INT 0
8336: ST_TO_ADDR
// if not mpBuildUpTime then
8337: LD_EXP 20
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8535
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
8346: LD_ADDR_EXP 48
8350: PUSH
8351: LD_INT 8400
8353: PUSH
8354: LD_INT 2100
8356: PUSH
8357: LD_EXP 20
8361: MUL
8362: PLUS
8363: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
8364: LD_ADDR_EXP 49
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// for i := 1 to 8 do
8372: LD_ADDR_VAR 0 2
8376: PUSH
8377: DOUBLE
8378: LD_INT 1
8380: DEC
8381: ST_TO_ADDR
8382: LD_INT 8
8384: PUSH
8385: FOR_TO
8386: IFFALSE 8533
// if mpSidePositions [ i ] then
8388: LD_EXP 7
8392: PUSH
8393: LD_VAR 0 2
8397: ARRAY
8398: IFFALSE 8531
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
8400: LD_EXP 19
8404: PUSH
8405: LD_EXP 7
8409: PUSH
8410: LD_VAR 0 2
8414: ARRAY
8415: ARRAY
8416: PPUSH
8417: LD_INT 5
8419: PPUSH
8420: CALL_OW 424
// for j := 1 to 8 do
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: DOUBLE
8430: LD_INT 1
8432: DEC
8433: ST_TO_ADDR
8434: LD_INT 8
8436: PUSH
8437: FOR_TO
8438: IFFALSE 8529
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8440: LD_EXP 7
8444: PUSH
8445: LD_VAR 0 3
8449: ARRAY
8450: IFFALSE 8499
8452: PUSH
8453: LD_EXP 8
8457: PUSH
8458: LD_VAR 0 2
8462: ARRAY
8463: PUSH
8464: LD_EXP 8
8468: PUSH
8469: LD_VAR 0 3
8473: ARRAY
8474: NONEQUAL
8475: IFTRUE 8498
8477: PUSH
8478: LD_EXP 11
8482: NOT
8483: IFFALSE 8497
8485: PUSH
8486: LD_VAR 0 2
8490: PUSH
8491: LD_VAR 0 3
8495: NONEQUAL
8496: AND
8497: OR
8498: AND
8499: IFFALSE 8527
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8501: LD_VAR 0 3
8505: PPUSH
8506: LD_EXP 19
8510: PUSH
8511: LD_EXP 7
8515: PUSH
8516: LD_VAR 0 2
8520: ARRAY
8521: ARRAY
8522: PPUSH
8523: CALL_OW 333
8527: GO 8437
8529: POP
8530: POP
// end ;
8531: GO 8385
8533: POP
8534: POP
// end ;
8535: LD_VAR 0 1
8539: RET
// function EndBuildUp ; var i , j ; begin
8540: LD_INT 0
8542: PPUSH
8543: PPUSH
8544: PPUSH
// mpBuildUpTimeActive := false ;
8545: LD_ADDR_EXP 49
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// for i := 1 to 8 do
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: DOUBLE
8559: LD_INT 1
8561: DEC
8562: ST_TO_ADDR
8563: LD_INT 8
8565: PUSH
8566: FOR_TO
8567: IFFALSE 8714
// if mpSidePositions [ i ] then
8569: LD_EXP 7
8573: PUSH
8574: LD_VAR 0 2
8578: ARRAY
8579: IFFALSE 8712
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
8581: LD_EXP 19
8585: PUSH
8586: LD_EXP 7
8590: PUSH
8591: LD_VAR 0 2
8595: ARRAY
8596: ARRAY
8597: PPUSH
8598: LD_INT 0
8600: PPUSH
8601: CALL_OW 424
// for j := 1 to 8 do
8605: LD_ADDR_VAR 0 3
8609: PUSH
8610: DOUBLE
8611: LD_INT 1
8613: DEC
8614: ST_TO_ADDR
8615: LD_INT 8
8617: PUSH
8618: FOR_TO
8619: IFFALSE 8710
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
8621: LD_EXP 7
8625: PUSH
8626: LD_VAR 0 3
8630: ARRAY
8631: IFFALSE 8680
8633: PUSH
8634: LD_EXP 8
8638: PUSH
8639: LD_VAR 0 2
8643: ARRAY
8644: PUSH
8645: LD_EXP 8
8649: PUSH
8650: LD_VAR 0 3
8654: ARRAY
8655: NONEQUAL
8656: IFTRUE 8679
8658: PUSH
8659: LD_EXP 11
8663: NOT
8664: IFFALSE 8678
8666: PUSH
8667: LD_VAR 0 2
8671: PUSH
8672: LD_VAR 0 3
8676: NONEQUAL
8677: AND
8678: OR
8679: AND
8680: IFFALSE 8708
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_EXP 19
8691: PUSH
8692: LD_EXP 7
8696: PUSH
8697: LD_VAR 0 2
8701: ARRAY
8702: ARRAY
8703: PPUSH
8704: CALL_OW 334
8708: GO 8618
8710: POP
8711: POP
// end ;
8712: GO 8566
8714: POP
8715: POP
// end ;
8716: LD_VAR 0 1
8720: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
8721: LD_EXP 49
8725: IFFALSE 8904
8727: GO 8729
8729: DISABLE
8730: LD_INT 0
8732: PPUSH
8733: PPUSH
// begin for i := 1 to 8 do
8734: LD_ADDR_VAR 0 1
8738: PUSH
8739: DOUBLE
8740: LD_INT 1
8742: DEC
8743: ST_TO_ADDR
8744: LD_INT 8
8746: PUSH
8747: FOR_TO
8748: IFFALSE 8901
// if mpSidePositions [ i ] then
8750: LD_EXP 7
8754: PUSH
8755: LD_VAR 0 1
8759: ARRAY
8760: IFFALSE 8899
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
8762: LD_ADDR_VAR 0 2
8766: PUSH
8767: LD_EXP 19
8771: PUSH
8772: LD_EXP 7
8776: PUSH
8777: LD_VAR 0 1
8781: ARRAY
8782: ARRAY
8783: PPUSH
8784: LD_INT 2
8786: PUSH
8787: LD_INT 21
8789: PUSH
8790: LD_INT 1
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: PUSH
8797: LD_INT 21
8799: PUSH
8800: LD_INT 2
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 22
8814: PUSH
8815: LD_OWVAR 2
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 70
8832: PUSH
8833: FOR_IN
8834: IFFALSE 8897
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
8836: LD_EXP 8
8840: PUSH
8841: LD_VAR 0 1
8845: ARRAY
8846: PUSH
8847: LD_EXP 8
8851: PUSH
8852: LD_OWVAR 2
8856: ARRAY
8857: NONEQUAL
8858: IFTRUE 8881
8860: PUSH
8861: LD_EXP 11
8865: NOT
8866: IFFALSE 8880
8868: PUSH
8869: LD_VAR 0 1
8873: PUSH
8874: LD_OWVAR 2
8878: NONEQUAL
8879: AND
8880: OR
8881: IFFALSE 8895
// ComMoveToArea ( un , BuildUpEscape ) ;
8883: LD_VAR 0 2
8887: PPUSH
8888: LD_INT 3
8890: PPUSH
8891: CALL_OW 113
8895: GO 8833
8897: POP
8898: POP
8899: GO 8747
8901: POP
8902: POP
// enable ;
8903: ENABLE
// end ;
8904: PPOPN 2
8906: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
8907: LD_EXP 20
8911: IFFALSE 8961
8913: GO 8915
8915: DISABLE
8916: LD_INT 0
8918: PPUSH
// begin tmp := mpBuildUpTime ;
8919: LD_ADDR_VAR 0 1
8923: PUSH
8924: LD_EXP 20
8928: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8929: LD_INT 35
8931: PPUSH
8932: CALL_OW 67
// tmp := tmp - 0 0$1 ;
8936: LD_ADDR_VAR 0 1
8940: PUSH
8941: LD_VAR 0 1
8945: PUSH
8946: LD_INT 35
8948: MINUS
8949: ST_TO_ADDR
// until not tmp ;
8950: LD_VAR 0 1
8954: NOT
8955: IFFALSE 8929
// EndBuildUp ;
8957: CALL 8540 0 0
// end ;
8961: PPOPN 1
8963: END
// every 0 0$1 trigger mpActive marked mpWin do
8964: LD_INT 100
8966: IFFALSE 9000
8968: GO 8970
8970: DISABLE
// begin if IAmServer then
8971: CALL_OW 518
8975: IFFALSE 8984
// wait ( 0 0$3 ) ;
8977: LD_INT 105
8979: PPUSH
8980: CALL_OW 67
// if Multiplayer then
8984: LD_OWVAR 4
8988: IFFALSE 8996
// YouWinInMultiplayer else
8990: CALL_OW 106
8994: GO 9000
// YouWin ;
8996: CALL_OW 103
// end ;
9000: END
// export function HasPowerByGameType ( gameType , side ) ; begin
9001: LD_INT 0
9003: PPUSH
// result := false ;
9004: LD_ADDR_VAR 0 3
9008: PUSH
9009: LD_INT 0
9011: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
9012: LD_VAR 0 1
9016: PUSH
9017: LD_INT 1
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9043
9023: LD_INT 5
9025: DOUBLE
9026: EQUAL
9027: IFTRUE 9043
9029: LD_INT 6
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9043
9035: LD_INT 7
9037: DOUBLE
9038: EQUAL
9039: IFTRUE 9043
9041: GO 9116
9043: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 22
9051: PUSH
9052: LD_VAR 0 2
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 2
9063: PUSH
9064: LD_INT 21
9066: PUSH
9067: LD_INT 1
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 33
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 33
9086: PUSH
9087: LD_INT 5
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PPUSH
9104: CALL_OW 69
9108: PPUSH
9109: CALL 18555 0 1
9113: ST_TO_ADDR
// end ; GameTypeSurvival :
9114: GO 9512
9116: LD_INT 2
9118: DOUBLE
9119: EQUAL
9120: IFTRUE 9124
9122: GO 9254
9124: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
9125: LD_ADDR_VAR 0 3
9129: PUSH
9130: LD_INT 22
9132: PUSH
9133: LD_VAR 0 2
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 2
9144: PUSH
9145: LD_INT 30
9147: PUSH
9148: LD_INT 0
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 30
9157: PUSH
9158: LD_INT 1
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PPUSH
9174: CALL_OW 69
9178: PPUSH
9179: CALL 18555 0 1
9183: IFFALSE 9251
9185: PUSH
9186: LD_INT 22
9188: PUSH
9189: LD_VAR 0 2
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 2
9200: PUSH
9201: LD_INT 21
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 33
9213: PUSH
9214: LD_INT 3
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 33
9223: PUSH
9224: LD_INT 5
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PPUSH
9241: CALL_OW 69
9245: PPUSH
9246: CALL 18555 0 1
9250: AND
9251: ST_TO_ADDR
// end ; GameTypeSurvivalH :
9252: GO 9512
9254: LD_INT 8
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9411
9262: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
9263: LD_ADDR_VAR 0 3
9267: PUSH
9268: LD_EXP 41
9272: PUSH
9273: LD_VAR 0 2
9277: ARRAY
9278: PPUSH
9279: CALL_OW 300
9283: IFFALSE 9340
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_VAR 0 2
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 2
9300: PUSH
9301: LD_INT 30
9303: PUSH
9304: LD_INT 0
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 30
9313: PUSH
9314: LD_INT 1
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 69
9334: PPUSH
9335: CALL 18555 0 1
9339: AND
9340: IFFALSE 9408
9342: PUSH
9343: LD_INT 22
9345: PUSH
9346: LD_VAR 0 2
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 2
9357: PUSH
9358: LD_INT 21
9360: PUSH
9361: LD_INT 1
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: PUSH
9368: LD_INT 33
9370: PUSH
9371: LD_INT 3
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 33
9380: PUSH
9381: LD_INT 5
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: PPUSH
9398: CALL_OW 69
9402: PPUSH
9403: CALL 18555 0 1
9407: AND
9408: ST_TO_ADDR
// end ; GameTypeKing :
9409: GO 9512
9411: LD_INT 3
9413: DOUBLE
9414: EQUAL
9415: IFTRUE 9419
9417: GO 9511
9419: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
9420: LD_ADDR_VAR 0 3
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_VAR 0 2
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 2
9439: PUSH
9440: LD_INT 21
9442: PUSH
9443: LD_INT 1
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 33
9452: PUSH
9453: LD_INT 3
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 33
9462: PUSH
9463: LD_INT 5
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 69
9484: PPUSH
9485: CALL 18555 0 1
9489: IFFALSE 9508
9491: PUSH
9492: LD_VAR 0 2
9496: PPUSH
9497: CALL 15671 0 1
9501: PUSH
9502: LD_EXP 35
9506: LESS
9507: AND
9508: ST_TO_ADDR
// end ; end ;
9509: GO 9512
9511: POP
// end ;
9512: LD_VAR 0 3
9516: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
9517: LD_INT 100
9519: IFFALSE 9749
9521: GO 9523
9523: DISABLE
9524: LD_INT 0
9526: PPUSH
9527: PPUSH
// begin if Multiplayer then
9528: LD_OWVAR 4
9532: IFFALSE 9540
// SetPlayerSpectator ( ) else
9534: CALL_OW 572
9538: GO 9549
// FogOff ( your_side ) ;
9540: LD_OWVAR 2
9544: PPUSH
9545: CALL_OW 344
// repeat gameIsOn := false ;
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: LD_INT 0
9556: ST_TO_ADDR
// for i := 1 to 8 do
9557: LD_ADDR_VAR 0 2
9561: PUSH
9562: DOUBLE
9563: LD_INT 1
9565: DEC
9566: ST_TO_ADDR
9567: LD_INT 8
9569: PUSH
9570: FOR_TO
9571: IFFALSE 9701
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9573: LD_EXP 7
9577: PUSH
9578: LD_VAR 0 2
9582: ARRAY
9583: IFFALSE 9596
9585: PUSH
9586: LD_VAR 0 2
9590: PPUSH
9591: CALL_OW 108
9595: AND
9596: IFFALSE 9610
9598: PUSH
9599: LD_VAR 0 2
9603: PUSH
9604: LD_OWVAR 2
9608: NONEQUAL
9609: AND
9610: IFFALSE 9699
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9612: LD_EXP 8
9616: PUSH
9617: LD_VAR 0 2
9621: ARRAY
9622: NOT
9623: IFTRUE 9671
9625: PUSH
9626: LD_EXP 8
9630: PUSH
9631: LD_VAR 0 2
9635: ARRAY
9636: PUSH
9637: LD_EXP 8
9641: PUSH
9642: LD_OWVAR 2
9646: ARRAY
9647: NONEQUAL
9648: IFFALSE 9670
9650: PUSH
9651: LD_OWVAR 2
9655: PPUSH
9656: LD_VAR 0 2
9660: PPUSH
9661: CALL_OW 81
9665: PUSH
9666: LD_INT 1
9668: NONEQUAL
9669: AND
9670: OR
9671: IFFALSE 9699
// if HasPowerByGameType ( mpGameType , i ) then
9673: LD_EXP 3
9677: PPUSH
9678: LD_VAR 0 2
9682: PPUSH
9683: CALL 9001 0 2
9687: IFFALSE 9699
// begin gameIsOn := true ;
9689: LD_ADDR_VAR 0 1
9693: PUSH
9694: LD_INT 1
9696: ST_TO_ADDR
// break ;
9697: GO 9701
// end ;
9699: GO 9570
9701: POP
9702: POP
// wait ( 100 ) ;
9703: LD_INT 100
9705: PPUSH
9706: CALL_OW 67
// until not gameIsOn ;
9710: LD_VAR 0 1
9714: NOT
9715: IFFALSE 9549
// if IAmServer then
9717: CALL_OW 518
9721: IFFALSE 9730
// wait ( 0 0$3 ) ;
9723: LD_INT 105
9725: PPUSH
9726: CALL_OW 67
// if Multiplayer then
9730: LD_OWVAR 4
9734: IFFALSE 9742
// YouLostInMultiplayer else
9736: CALL_OW 107
9740: GO 9749
// YouLost (  ) ;
9742: LD_STRING 
9744: PPUSH
9745: CALL_OW 104
// end ;
9749: PPOPN 2
9751: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
9752: LD_EXP 33
9756: IFFALSE 10140
9758: GO 9760
9760: DISABLE
9761: LD_INT 0
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
9768: LD_ADDR_VAR 0 5
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 3
9781: PUSH
9782: LD_INT 4
9784: PUSH
9785: LD_INT 5
9787: PUSH
9788: LD_INT 6
9790: PUSH
9791: LD_INT 7
9793: PUSH
9794: LD_INT 8
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
9807: LD_INT 350
9809: PPUSH
9810: CALL_OW 67
// for i := 1 to 8 do
9814: LD_ADDR_VAR 0 1
9818: PUSH
9819: DOUBLE
9820: LD_INT 1
9822: DEC
9823: ST_TO_ADDR
9824: LD_INT 8
9826: PUSH
9827: FOR_TO
9828: IFFALSE 10110
// begin j := sides [ i ] ;
9830: LD_ADDR_VAR 0 2
9834: PUSH
9835: LD_VAR 0 5
9839: PUSH
9840: LD_VAR 0 1
9844: ARRAY
9845: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
9846: LD_EXP 40
9850: PUSH
9851: LD_VAR 0 2
9855: ARRAY
9856: PPUSH
9857: CALL 18555 0 1
9861: IFFALSE 9874
9863: PUSH
9864: LD_VAR 0 2
9868: PPUSH
9869: CALL_OW 108
9873: AND
9874: IFFALSE 9892
9876: PUSH
9877: LD_EXP 3
9881: PPUSH
9882: LD_VAR 0 2
9886: PPUSH
9887: CALL 9001 0 2
9891: AND
9892: IFFALSE 10108
// begin wait ( mpRespawn div 2 ) ;
9894: LD_EXP 33
9898: PUSH
9899: LD_INT 2
9901: DIV
9902: PPUSH
9903: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
9907: LD_ADDR_VAR 0 3
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_VAR 0 2
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 50
9926: PUSH
9927: EMPTY
9928: LIST
9929: PUSH
9930: LD_INT 2
9932: PUSH
9933: LD_INT 30
9935: PUSH
9936: LD_INT 0
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 30
9945: PUSH
9946: LD_INT 1
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: PPUSH
9963: CALL_OW 69
9967: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
9968: LD_VAR 0 3
9972: NOT
9973: IFTRUE 9987
9975: PUSH
9976: LD_VAR 0 2
9980: PPUSH
9981: CALL_OW 108
9985: NOT
9986: OR
9987: IFTRUE 10006
9989: PUSH
9990: LD_EXP 3
9994: PPUSH
9995: LD_VAR 0 2
9999: PPUSH
10000: CALL 9001 0 2
10004: NOT
10005: OR
10006: IFFALSE 10010
// continue ;
10008: GO 9827
// spawn := tmp [ 1 ] ;
10010: LD_ADDR_VAR 0 4
10014: PUSH
10015: LD_VAR 0 3
10019: PUSH
10020: LD_INT 1
10022: ARRAY
10023: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
10024: LD_EXP 40
10028: PUSH
10029: LD_VAR 0 2
10033: ARRAY
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: LD_VAR 0 4
10043: PPUSH
10044: CALL_OW 250
10048: PPUSH
10049: LD_VAR 0 4
10053: PPUSH
10054: CALL_OW 251
10058: PPUSH
10059: LD_INT 32
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
10069: LD_ADDR_EXP 40
10073: PUSH
10074: LD_EXP 40
10078: PPUSH
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_EXP 40
10088: PUSH
10089: LD_VAR 0 2
10093: ARRAY
10094: PPUSH
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 3
10102: PPUSH
10103: CALL_OW 1
10107: ST_TO_ADDR
// end ; end ;
10108: GO 9827
10110: POP
10111: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
10112: LD_ADDR_VAR 0 5
10116: PUSH
10117: LD_VAR 0 5
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: LD_INT 8
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL 20881 0 4
10135: ST_TO_ADDR
// until false ;
10136: LD_INT 0
10138: IFFALSE 9807
// end ;
10140: PPOPN 5
10142: END
// every 0 0$1 marked mpActive do
10143: GO 10145
10145: DISABLE
// begin enable ;
10146: ENABLE
// if not mpDisplayStrings then
10147: LD_EXP 38
10151: NOT
10152: IFFALSE 10163
// begin display_strings := [ ] ;
10154: LD_ADDR_OWVAR 47
10158: PUSH
10159: EMPTY
10160: ST_TO_ADDR
// exit ;
10161: GO 10173
// end ; display_strings := mpDisplayStrings ;
10163: LD_ADDR_OWVAR 47
10167: PUSH
10168: LD_EXP 38
10172: ST_TO_ADDR
// end ; end_of_file
10173: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
10174: LD_INT 0
10176: PPUSH
10177: PPUSH
10178: PPUSH
10179: PPUSH
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// if GetType ( un ) = unit_vehicle then
10185: LD_VAR 0 1
10189: PPUSH
10190: CALL_OW 247
10194: PUSH
10195: LD_INT 2
10197: EQUAL
10198: IFFALSE 10202
// exit ;
10200: GO 10975
// side := GetSide ( un ) ;
10202: LD_ADDR_VAR 0 9
10206: PUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: CALL_OW 255
10216: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
10217: LD_EXP 3
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: LD_INT 8
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: IN
10232: IFFALSE 10326
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
10234: LD_VAR 0 1
10238: PPUSH
10239: CALL_OW 266
10243: PUSH
10244: LD_INT 0
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: IN
10254: IFFALSE 10326
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
10256: LD_ADDR_VAR 0 3
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_VAR 0 9
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 2
10275: PUSH
10276: LD_INT 21
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 33
10288: PUSH
10289: LD_INT 3
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PPUSH
10305: CALL_OW 69
10309: PUSH
10310: FOR_IN
10311: IFFALSE 10324
// KillUnit ( i ) ;
10313: LD_VAR 0 3
10317: PPUSH
10318: CALL_OW 66
10322: GO 10310
10324: POP
10325: POP
// end ; if mpGameType = GameTypeSurvivalH then
10326: LD_EXP 3
10330: PUSH
10331: LD_INT 8
10333: EQUAL
10334: IFFALSE 10418
// if un in mpCommanders then
10336: LD_VAR 0 1
10340: PUSH
10341: LD_EXP 41
10345: IN
10346: IFFALSE 10418
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
10348: LD_ADDR_VAR 0 3
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_VAR 0 9
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 2
10367: PUSH
10368: LD_INT 21
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 33
10380: PUSH
10381: LD_INT 3
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PUSH
10402: FOR_IN
10403: IFFALSE 10416
// KillUnit ( i ) ;
10405: LD_VAR 0 3
10409: PPUSH
10410: CALL_OW 66
10414: GO 10402
10416: POP
10417: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 257
10427: PUSH
10428: LD_INT 12
10430: PUSH
10431: LD_INT 17
10433: PUSH
10434: LD_INT 15
10436: PUSH
10437: LD_INT 16
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: IN
10446: IFTRUE 10463
10448: PUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 263
10458: PUSH
10459: LD_INT 5
10461: EQUAL
10462: OR
10463: IFFALSE 10700
// begin tag := 0 ;
10465: LD_ADDR_VAR 0 5
10469: PUSH
10470: LD_INT 0
10472: ST_TO_ADDR
// for i := 1 to 8 do
10473: LD_ADDR_VAR 0 3
10477: PUSH
10478: DOUBLE
10479: LD_INT 1
10481: DEC
10482: ST_TO_ADDR
10483: LD_INT 8
10485: PUSH
10486: FOR_TO
10487: IFFALSE 10521
// if un in mpApePosIndex [ i ] then
10489: LD_VAR 0 1
10493: PUSH
10494: LD_EXP 32
10498: PUSH
10499: LD_VAR 0 3
10503: ARRAY
10504: IN
10505: IFFALSE 10519
// begin tag := i ;
10507: LD_ADDR_VAR 0 5
10511: PUSH
10512: LD_VAR 0 3
10516: ST_TO_ADDR
// break ;
10517: GO 10521
// end ;
10519: GO 10486
10521: POP
10522: POP
// if not tag then
10523: LD_VAR 0 5
10527: NOT
10528: IFFALSE 10532
// exit ;
10530: GO 10975
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
10532: LD_ADDR_VAR 0 7
10536: PUSH
10537: LD_EXP 31
10541: PUSH
10542: LD_EXP 7
10546: PUSH
10547: LD_VAR 0 5
10551: ARRAY
10552: ARRAY
10553: ST_TO_ADDR
// if not area then
10554: LD_VAR 0 7
10558: NOT
10559: IFFALSE 10563
// exit ;
10561: GO 10975
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
10563: LD_INT 14700
10565: PUSH
10566: LD_VAR 0 1
10570: PUSH
10571: LD_INT 5
10573: MOD
10574: PUSH
10575: LD_INT 1
10577: PLUS
10578: PUSH
10579: LD_INT 700
10581: MUL
10582: PLUS
10583: PPUSH
10584: CALL_OW 67
// repeat wait ( 10 ) ;
10588: LD_INT 10
10590: PPUSH
10591: CALL_OW 67
// until not mpBlockRespThread ;
10595: LD_EXP 47
10599: NOT
10600: IFFALSE 10588
// mpBlockRespThread := true ;
10602: LD_ADDR_EXP 47
10606: PUSH
10607: LD_INT 1
10609: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
10610: LD_INT 0
10612: PPUSH
10613: CALL 50658 0 1
// ape := CreateHuman ;
10617: LD_ADDR_VAR 0 4
10621: PUSH
10622: CALL_OW 44
10626: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
10627: LD_ADDR_EXP 32
10631: PUSH
10632: LD_EXP 32
10636: PPUSH
10637: LD_VAR 0 5
10641: PPUSH
10642: LD_EXP 32
10646: PUSH
10647: LD_VAR 0 5
10651: ARRAY
10652: PPUSH
10653: LD_VAR 0 4
10657: PPUSH
10658: CALL 54531 0 2
10662: PPUSH
10663: CALL_OW 1
10667: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10668: LD_VAR 0 4
10672: PPUSH
10673: LD_VAR 0 7
10677: PPUSH
10678: LD_INT 0
10680: PPUSH
10681: CALL_OW 49
// wait ( 10 ) ;
10685: LD_INT 10
10687: PPUSH
10688: CALL_OW 67
// mpBlockRespThread := false ;
10692: LD_ADDR_EXP 47
10696: PUSH
10697: LD_INT 0
10699: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
10700: LD_VAR 0 1
10704: PPUSH
10705: CALL_OW 247
10709: PUSH
10710: LD_INT 1
10712: EQUAL
10713: IFFALSE 10730
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: CALL_OW 248
10725: PUSH
10726: LD_INT 0
10728: GREATER
10729: AND
10730: IFFALSE 10975
// begin if not mpRespawn then
10732: LD_EXP 33
10736: NOT
10737: IFFALSE 10741
// exit ;
10739: GO 10975
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
10741: LD_VAR 0 9
10745: PPUSH
10746: CALL_OW 108
10750: NOT
10751: IFFALSE 10770
10753: PUSH
10754: LD_EXP 3
10758: PPUSH
10759: LD_VAR 0 9
10763: PPUSH
10764: CALL 9001 0 2
10768: NOT
10769: AND
10770: IFFALSE 10774
// exit ;
10772: GO 10975
// side := GetSide ( un ) ;
10774: LD_ADDR_VAR 0 9
10778: PUSH
10779: LD_VAR 0 1
10783: PPUSH
10784: CALL_OW 255
10788: ST_TO_ADDR
// nation := GetNation ( un ) ;
10789: LD_ADDR_VAR 0 8
10793: PUSH
10794: LD_VAR 0 1
10798: PPUSH
10799: CALL_OW 248
10803: ST_TO_ADDR
// class := GetClass ( un ) ;
10804: LD_ADDR_VAR 0 6
10808: PUSH
10809: LD_VAR 0 1
10813: PPUSH
10814: CALL_OW 257
10818: ST_TO_ADDR
// if class > 4 then
10819: LD_VAR 0 6
10823: PUSH
10824: LD_INT 4
10826: GREATER
10827: IFFALSE 10837
// class := 1 ;
10829: LD_ADDR_VAR 0 6
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// repeat wait ( 10 ) ;
10837: LD_INT 10
10839: PPUSH
10840: CALL_OW 67
// until not mpBlockRespThread ;
10844: LD_EXP 47
10848: NOT
10849: IFFALSE 10837
// mpBlockRespThread := true ;
10851: LD_ADDR_EXP 47
10855: PUSH
10856: LD_INT 1
10858: ST_TO_ADDR
// uc_side := side ;
10859: LD_ADDR_OWVAR 20
10863: PUSH
10864: LD_VAR 0 9
10868: ST_TO_ADDR
// uc_nation := nation ;
10869: LD_ADDR_OWVAR 21
10873: PUSH
10874: LD_VAR 0 8
10878: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
10879: LD_INT 0
10881: PPUSH
10882: LD_VAR 0 6
10886: PPUSH
10887: LD_INT 2
10889: PPUSH
10890: CALL_OW 380
// un := CreateHuman ;
10894: LD_ADDR_VAR 0 1
10898: PUSH
10899: CALL_OW 44
10903: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
10904: LD_ADDR_EXP 40
10908: PUSH
10909: LD_EXP 40
10913: PPUSH
10914: LD_VAR 0 9
10918: PPUSH
10919: LD_EXP 40
10923: PUSH
10924: LD_VAR 0 9
10928: ARRAY
10929: PPUSH
10930: LD_EXP 40
10934: PUSH
10935: LD_VAR 0 9
10939: ARRAY
10940: PUSH
10941: LD_INT 1
10943: PLUS
10944: PPUSH
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 1
10954: PPUSH
10955: CALL_OW 1
10959: ST_TO_ADDR
// wait ( 10 ) ;
10960: LD_INT 10
10962: PPUSH
10963: CALL_OW 67
// mpBlockRespThread := false ;
10967: LD_ADDR_EXP 47
10971: PUSH
10972: LD_INT 0
10974: ST_TO_ADDR
// end ; end ;
10975: LD_VAR 0 2
10979: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
10980: LD_INT 0
10982: PPUSH
10983: PPUSH
10984: PPUSH
10985: PPUSH
10986: PPUSH
// tag := 0 ;
10987: LD_ADDR_VAR 0 5
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// for i := 1 to 8 do
10995: LD_ADDR_VAR 0 4
10999: PUSH
11000: DOUBLE
11001: LD_INT 1
11003: DEC
11004: ST_TO_ADDR
11005: LD_INT 8
11007: PUSH
11008: FOR_TO
11009: IFFALSE 11043
// if un in mpApePosIndex [ i ] then
11011: LD_VAR 0 2
11015: PUSH
11016: LD_EXP 32
11020: PUSH
11021: LD_VAR 0 4
11025: ARRAY
11026: IN
11027: IFFALSE 11041
// begin tag := i ;
11029: LD_ADDR_VAR 0 5
11033: PUSH
11034: LD_VAR 0 4
11038: ST_TO_ADDR
// break ;
11039: GO 11043
// end ;
11041: GO 11008
11043: POP
11044: POP
// if not tag then
11045: LD_VAR 0 5
11049: NOT
11050: IFFALSE 11054
// exit ;
11052: GO 11222
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
11054: LD_ADDR_VAR 0 6
11058: PUSH
11059: LD_EXP 31
11063: PUSH
11064: LD_EXP 7
11068: PUSH
11069: LD_VAR 0 5
11073: ARRAY
11074: ARRAY
11075: ST_TO_ADDR
// if not area then
11076: LD_VAR 0 6
11080: NOT
11081: IFFALSE 11085
// exit ;
11083: GO 11222
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
11085: LD_INT 14700
11087: PUSH
11088: LD_VAR 0 2
11092: PUSH
11093: LD_INT 5
11095: MOD
11096: PUSH
11097: LD_INT 1
11099: PLUS
11100: PUSH
11101: LD_INT 700
11103: MUL
11104: PLUS
11105: PPUSH
11106: CALL_OW 67
// repeat wait ( 10 ) ;
11110: LD_INT 10
11112: PPUSH
11113: CALL_OW 67
// until not mpBlockRespThread ;
11117: LD_EXP 47
11121: NOT
11122: IFFALSE 11110
// mpBlockRespThread := true ;
11124: LD_ADDR_EXP 47
11128: PUSH
11129: LD_INT 1
11131: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
11132: LD_INT 0
11134: PPUSH
11135: CALL 50658 0 1
// ape := CreateHuman ;
11139: LD_ADDR_VAR 0 7
11143: PUSH
11144: CALL_OW 44
11148: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
11149: LD_ADDR_EXP 32
11153: PUSH
11154: LD_EXP 32
11158: PPUSH
11159: LD_VAR 0 5
11163: PPUSH
11164: LD_EXP 32
11168: PUSH
11169: LD_VAR 0 5
11173: ARRAY
11174: PPUSH
11175: LD_VAR 0 7
11179: PPUSH
11180: CALL 54531 0 2
11184: PPUSH
11185: CALL_OW 1
11189: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
11190: LD_VAR 0 7
11194: PPUSH
11195: LD_VAR 0 6
11199: PPUSH
11200: LD_INT 0
11202: PPUSH
11203: CALL_OW 49
// wait ( 10 ) ;
11207: LD_INT 10
11209: PPUSH
11210: CALL_OW 67
// mpBlockRespThread := false ;
11214: LD_ADDR_EXP 47
11218: PUSH
11219: LD_INT 0
11221: ST_TO_ADDR
// end ;
11222: LD_VAR 0 3
11226: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
11227: LD_INT 0
11229: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 266
11239: PUSH
11240: LD_INT 0
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: IN
11250: IFFALSE 11275
// SetBName ( building , @ & GetSide ( building ) ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_STRING @
11259: PUSH
11260: LD_VAR 0 1
11264: PPUSH
11265: CALL_OW 255
11269: STR
11270: PPUSH
11271: CALL_OW 500
// end ;
11275: LD_VAR 0 2
11279: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
11280: LD_INT 0
11282: PPUSH
11283: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
11284: LD_EXP 3
11288: PUSH
11289: LD_INT 2
11291: PUSH
11292: LD_INT 8
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: IN
11299: IFFALSE 11323
11301: PUSH
11302: LD_VAR 0 1
11306: PPUSH
11307: CALL_OW 266
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: IN
11322: AND
11323: IFFALSE 11402
// begin SetSide ( building , oldSide ) ;
11325: LD_VAR 0 1
11329: PPUSH
11330: LD_VAR 0 2
11334: PPUSH
11335: CALL_OW 235
// KillUnit ( building ) ;
11339: LD_VAR 0 1
11343: PPUSH
11344: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
11348: LD_ADDR_VAR 0 5
11352: PUSH
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11398
// KillUnit ( i ) ;
11387: LD_VAR 0 5
11391: PPUSH
11392: CALL_OW 66
11396: GO 11384
11398: POP
11399: POP
// exit ;
11400: GO 11447
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
11402: LD_VAR 0 1
11406: PPUSH
11407: CALL_OW 266
11411: PUSH
11412: LD_INT 0
11414: PUSH
11415: LD_INT 1
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: IN
11422: IFFALSE 11447
// SetBName ( building , @ & GetSide ( building ) ) ;
11424: LD_VAR 0 1
11428: PPUSH
11429: LD_STRING @
11431: PUSH
11432: LD_VAR 0 1
11436: PPUSH
11437: CALL_OW 255
11441: STR
11442: PPUSH
11443: CALL_OW 500
// end ;
11447: LD_VAR 0 4
11451: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
11452: LD_INT 0
11454: PPUSH
11455: PPUSH
11456: PPUSH
// if mpGameType <> GameTypeFamine then
11457: LD_EXP 3
11461: PUSH
11462: LD_INT 5
11464: NONEQUAL
11465: IFFALSE 11469
// exit ;
11467: GO 11703
// for i := 1 to mpGlobalOilDeposits do
11469: LD_ADDR_VAR 0 6
11473: PUSH
11474: DOUBLE
11475: LD_INT 1
11477: DEC
11478: ST_TO_ADDR
11479: LD_EXP 42
11483: PUSH
11484: FOR_TO
11485: IFFALSE 11701
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
11487: LD_EXP 42
11491: PUSH
11492: LD_VAR 0 6
11496: ARRAY
11497: PUSH
11498: LD_INT 1
11500: ARRAY
11501: PPUSH
11502: LD_EXP 42
11506: PUSH
11507: LD_VAR 0 6
11511: ARRAY
11512: PUSH
11513: LD_INT 2
11515: ARRAY
11516: PPUSH
11517: CALL_OW 428
11521: PUSH
11522: LD_VAR 0 1
11526: EQUAL
11527: IFFALSE 11699
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
11529: LD_ADDR_VAR 0 7
11533: PUSH
11534: LD_EXP 42
11538: PUSH
11539: LD_VAR 0 6
11543: ARRAY
11544: PUSH
11545: LD_INT 3
11547: ARRAY
11548: ST_TO_ADDR
// value := value - amount ;
11549: LD_ADDR_VAR 0 7
11553: PUSH
11554: LD_VAR 0 7
11558: PUSH
11559: LD_VAR 0 4
11563: MINUS
11564: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
11565: LD_ADDR_EXP 42
11569: PUSH
11570: LD_EXP 42
11574: PPUSH
11575: LD_VAR 0 6
11579: PPUSH
11580: LD_EXP 42
11584: PUSH
11585: LD_VAR 0 6
11589: ARRAY
11590: PPUSH
11591: LD_INT 3
11593: PPUSH
11594: LD_VAR 0 7
11598: PPUSH
11599: CALL_OW 1
11603: PPUSH
11604: CALL_OW 1
11608: ST_TO_ADDR
// if side in [ your_side , 9 ] then
11609: LD_VAR 0 2
11613: PUSH
11614: LD_OWVAR 2
11618: PUSH
11619: LD_INT 9
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: IN
11626: IFFALSE 11642
// SetUnitDisplayNumber ( building , value ) ;
11628: LD_VAR 0 1
11632: PPUSH
11633: LD_VAR 0 7
11637: PPUSH
11638: CALL_OW 505
// if value <= 0 then
11642: LD_VAR 0 7
11646: PUSH
11647: LD_INT 0
11649: LESSEQUAL
11650: IFFALSE 11699
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
11652: LD_EXP 42
11656: PUSH
11657: LD_VAR 0 6
11661: ARRAY
11662: PUSH
11663: LD_INT 1
11665: ARRAY
11666: PPUSH
11667: LD_EXP 42
11671: PUSH
11672: LD_VAR 0 6
11676: ARRAY
11677: PUSH
11678: LD_INT 2
11680: ARRAY
11681: PPUSH
11682: CALL_OW 63
// KillUnit ( building ) ;
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 66
// exit ;
11695: POP
11696: POP
11697: GO 11703
// end ; end ; end ;
11699: GO 11484
11701: POP
11702: POP
// end ;
11703: LD_VAR 0 5
11707: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
11708: LD_INT 0
11710: PPUSH
11711: PPUSH
11712: PPUSH
// if mpGameType <> GameTypeFamine then
11713: LD_EXP 3
11717: PUSH
11718: LD_INT 5
11720: NONEQUAL
11721: IFFALSE 11725
// exit ;
11723: GO 11959
// for i := 1 to mpGlobalSibDeposits do
11725: LD_ADDR_VAR 0 6
11729: PUSH
11730: DOUBLE
11731: LD_INT 1
11733: DEC
11734: ST_TO_ADDR
11735: LD_EXP 43
11739: PUSH
11740: FOR_TO
11741: IFFALSE 11957
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
11743: LD_EXP 43
11747: PUSH
11748: LD_VAR 0 6
11752: ARRAY
11753: PUSH
11754: LD_INT 1
11756: ARRAY
11757: PPUSH
11758: LD_EXP 43
11762: PUSH
11763: LD_VAR 0 6
11767: ARRAY
11768: PUSH
11769: LD_INT 2
11771: ARRAY
11772: PPUSH
11773: CALL_OW 428
11777: PUSH
11778: LD_VAR 0 1
11782: EQUAL
11783: IFFALSE 11955
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
11785: LD_ADDR_VAR 0 7
11789: PUSH
11790: LD_EXP 43
11794: PUSH
11795: LD_VAR 0 6
11799: ARRAY
11800: PUSH
11801: LD_INT 3
11803: ARRAY
11804: ST_TO_ADDR
// value := value - amount ;
11805: LD_ADDR_VAR 0 7
11809: PUSH
11810: LD_VAR 0 7
11814: PUSH
11815: LD_VAR 0 4
11819: MINUS
11820: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
11821: LD_ADDR_EXP 43
11825: PUSH
11826: LD_EXP 43
11830: PPUSH
11831: LD_VAR 0 6
11835: PPUSH
11836: LD_EXP 43
11840: PUSH
11841: LD_VAR 0 6
11845: ARRAY
11846: PPUSH
11847: LD_INT 3
11849: PPUSH
11850: LD_VAR 0 7
11854: PPUSH
11855: CALL_OW 1
11859: PPUSH
11860: CALL_OW 1
11864: ST_TO_ADDR
// if side in [ your_side , 9 ] then
11865: LD_VAR 0 2
11869: PUSH
11870: LD_OWVAR 2
11874: PUSH
11875: LD_INT 9
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: IN
11882: IFFALSE 11898
// SetUnitDisplayNumber ( building , value ) ;
11884: LD_VAR 0 1
11888: PPUSH
11889: LD_VAR 0 7
11893: PPUSH
11894: CALL_OW 505
// if value <= 0 then
11898: LD_VAR 0 7
11902: PUSH
11903: LD_INT 0
11905: LESSEQUAL
11906: IFFALSE 11955
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
11908: LD_EXP 43
11912: PUSH
11913: LD_VAR 0 6
11917: ARRAY
11918: PUSH
11919: LD_INT 1
11921: ARRAY
11922: PPUSH
11923: LD_EXP 43
11927: PUSH
11928: LD_VAR 0 6
11932: ARRAY
11933: PUSH
11934: LD_INT 2
11936: ARRAY
11937: PPUSH
11938: CALL_OW 63
// KillUnit ( building ) ;
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 66
// exit ;
11951: POP
11952: POP
11953: GO 11959
// end ; end ; end ;
11955: GO 11740
11957: POP
11958: POP
// end ;
11959: LD_VAR 0 5
11963: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
11964: LD_INT 0
11966: PPUSH
11967: PPUSH
// side := GetSide ( factory ) ;
11968: LD_ADDR_VAR 0 7
11972: PUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 255
11982: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
11983: LD_VAR 0 5
11987: PUSH
11988: LD_INT 81
11990: EQUAL
11991: IFFALSE 12029
11993: PUSH
11994: LD_INT 22
11996: PUSH
11997: LD_VAR 0 7
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 34
12008: PUSH
12009: LD_INT 81
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 69
12024: PUSH
12025: LD_INT 0
12027: GREATER
12028: AND
12029: IFFALSE 12062
// begin ComCancel ( factory ) ;
12031: LD_VAR 0 1
12035: PPUSH
12036: CALL_OW 127
// if side = your_side then
12040: LD_VAR 0 7
12044: PUSH
12045: LD_OWVAR 2
12049: EQUAL
12050: IFFALSE 12062
// HintSpec ( VehLimit , 2 ) ;
12052: LD_STRING VehLimit
12054: PPUSH
12055: LD_INT 2
12057: PPUSH
12058: CALL_OW 338
// end ; end ;
12062: LD_VAR 0 6
12066: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
12071: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
12072: LD_VAR 0 1
12076: PPUSH
12077: CALL_OW 264
12081: PUSH
12082: LD_INT 81
12084: EQUAL
12085: IFFALSE 12102
12087: PUSH
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 263
12097: PUSH
12098: LD_INT 1
12100: EQUAL
12101: AND
12102: IFFALSE 12382
// begin for i := 1 to Count ( minersList ) do
12104: LD_ADDR_VAR 0 6
12108: PUSH
12109: DOUBLE
12110: LD_INT 1
12112: DEC
12113: ST_TO_ADDR
12114: LD_EXP 58
12118: PPUSH
12119: CALL 18555 0 1
12123: PUSH
12124: FOR_TO
12125: IFFALSE 12243
// begin if minersList [ i ] = oldId then
12127: LD_EXP 58
12131: PUSH
12132: LD_VAR 0 6
12136: ARRAY
12137: PUSH
12138: LD_VAR 0 2
12142: EQUAL
12143: IFFALSE 12241
// begin for j := 1 to minerMinesList [ i ] do
12145: LD_ADDR_VAR 0 7
12149: PUSH
12150: DOUBLE
12151: LD_INT 1
12153: DEC
12154: ST_TO_ADDR
12155: LD_EXP 59
12159: PUSH
12160: LD_VAR 0 6
12164: ARRAY
12165: PUSH
12166: FOR_TO
12167: IFFALSE 12217
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12169: LD_EXP 59
12173: PUSH
12174: LD_VAR 0 6
12178: ARRAY
12179: PUSH
12180: LD_VAR 0 7
12184: ARRAY
12185: PUSH
12186: LD_INT 1
12188: ARRAY
12189: PPUSH
12190: LD_EXP 59
12194: PUSH
12195: LD_VAR 0 6
12199: ARRAY
12200: PUSH
12201: LD_VAR 0 7
12205: ARRAY
12206: PUSH
12207: LD_INT 2
12209: ARRAY
12210: PPUSH
12211: CALL_OW 612
12215: GO 12166
12217: POP
12218: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
12219: LD_ADDR_EXP 59
12223: PUSH
12224: LD_EXP 59
12228: PPUSH
12229: LD_VAR 0 6
12233: PPUSH
12234: CALL_OW 3
12238: ST_TO_ADDR
// break ;
12239: GO 12243
// end ; end ;
12241: GO 12124
12243: POP
12244: POP
// minersList := minersList diff oldId ;
12245: LD_ADDR_EXP 58
12249: PUSH
12250: LD_EXP 58
12254: PUSH
12255: LD_VAR 0 2
12259: DIFF
12260: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
12261: LD_INT 22
12263: PUSH
12264: LD_VAR 0 4
12268: PPUSH
12269: CALL_OW 255
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 34
12280: PUSH
12281: LD_INT 81
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PPUSH
12292: CALL_OW 69
12296: PUSH
12297: LD_INT 1
12299: GREATER
12300: IFFALSE 12327
// begin ComExit ( unit ) ;
12302: LD_VAR 0 4
12306: PPUSH
12307: CALL 54929 0 1
// SetSide ( newId , oldSide ) ;
12311: LD_VAR 0 1
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: CALL_OW 235
// exit ;
12325: GO 12382
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
12327: LD_ADDR_EXP 58
12331: PUSH
12332: LD_EXP 58
12336: PPUSH
12337: LD_EXP 58
12341: PUSH
12342: LD_INT 1
12344: PLUS
12345: PPUSH
12346: LD_VAR 0 1
12350: PPUSH
12351: CALL_OW 1
12355: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12356: LD_ADDR_EXP 59
12360: PUSH
12361: LD_EXP 59
12365: PPUSH
12366: LD_EXP 59
12370: PUSH
12371: LD_INT 1
12373: PLUS
12374: PPUSH
12375: EMPTY
12376: PPUSH
12377: CALL_OW 1
12381: ST_TO_ADDR
// end ; end ; end_of_file
12382: LD_VAR 0 5
12386: RET
// every 0 0$1 trigger mpGameActive marked GameTypeArmsRace do var i , j , k , techs , hasCameras , cameras , resource , depot , b , un , type , buildings , side , nation ;
12387: LD_EXP 39
12391: IFFALSE 13533
12393: GO 12395
12395: DISABLE
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
12400: PPUSH
12401: PPUSH
12402: PPUSH
12403: PPUSH
12404: PPUSH
12405: PPUSH
12406: PPUSH
12407: PPUSH
12408: PPUSH
12409: PPUSH
12410: PPUSH
12411: PPUSH
// begin for i := 1 to 8 do
12412: LD_ADDR_VAR 0 1
12416: PUSH
12417: DOUBLE
12418: LD_INT 1
12420: DEC
12421: ST_TO_ADDR
12422: LD_INT 8
12424: PUSH
12425: FOR_TO
12426: IFFALSE 13327
// begin hasCameras := false ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: LD_INT 0
12435: ST_TO_ADDR
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
12436: LD_EXP 8
12440: PUSH
12441: LD_VAR 0 1
12445: ARRAY
12446: PUSH
12447: LD_INT 1
12449: EQUAL
12450: IFFALSE 12464
12452: PUSH
12453: LD_EXP 7
12457: PUSH
12458: LD_VAR 0 1
12462: ARRAY
12463: AND
12464: IFFALSE 13325
// begin side := i ;
12466: LD_ADDR_VAR 0 13
12470: PUSH
12471: LD_VAR 0 1
12475: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
12476: LD_ADDR_VAR 0 14
12480: PUSH
12481: LD_EXP 9
12485: PUSH
12486: LD_VAR 0 1
12490: ARRAY
12491: ST_TO_ADDR
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
12492: LD_ADDR_VAR 0 8
12496: PUSH
12497: LD_INT 22
12499: PUSH
12500: LD_VAR 0 13
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 30
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PPUSH
12523: CALL_OW 69
12527: ST_TO_ADDR
// for j := 1 to mpStartingResources do
12528: LD_ADDR_VAR 0 2
12532: PUSH
12533: DOUBLE
12534: LD_INT 1
12536: DEC
12537: ST_TO_ADDR
12538: LD_EXP 15
12542: PUSH
12543: FOR_TO
12544: IFFALSE 12611
// begin resource := mpStartingResources [ j ] ;
12546: LD_ADDR_VAR 0 7
12550: PUSH
12551: LD_EXP 15
12555: PUSH
12556: LD_VAR 0 2
12560: ARRAY
12561: ST_TO_ADDR
// if not resource then
12562: LD_VAR 0 7
12566: NOT
12567: IFFALSE 12577
// resource := 30 ;
12569: LD_ADDR_VAR 0 7
12573: PUSH
12574: LD_INT 30
12576: ST_TO_ADDR
// SetResourceType ( GetBase ( depot [ 1 ] ) , j , resource * 2 ) ;
12577: LD_VAR 0 8
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: CALL_OW 274
12590: PPUSH
12591: LD_VAR 0 2
12595: PPUSH
12596: LD_VAR 0 7
12600: PUSH
12601: LD_INT 2
12603: MUL
12604: PPUSH
12605: CALL_OW 277
// end ;
12609: GO 12543
12611: POP
12612: POP
// uc_side := side ;
12613: LD_ADDR_OWVAR 20
12617: PUSH
12618: LD_VAR 0 13
12622: ST_TO_ADDR
// PlaceSeeing ( 1 , 1 , side , - 32793 ) ;
12623: LD_INT 1
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: LD_VAR 0 13
12633: PPUSH
12634: LD_INT 32793
12636: NEG
12637: PPUSH
12638: CALL_OW 330
// RemoveSeeing ( 1 , 1 , side ) ;
12642: LD_INT 1
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: LD_VAR 0 13
12652: PPUSH
12653: CALL_OW 331
// if nation = nation_arabian and not hasCameras then
12657: LD_VAR 0 14
12661: PUSH
12662: LD_INT 2
12664: EQUAL
12665: IFFALSE 12674
12667: PUSH
12668: LD_VAR 0 5
12672: NOT
12673: AND
12674: IFFALSE 12696
// begin hasCameras := true ;
12676: LD_ADDR_VAR 0 5
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , camsArea ) ;
12684: LD_VAR 0 13
12688: PPUSH
12689: LD_INT 66
12691: PPUSH
12692: CALL 59652 0 2
// end ; techs := GetTechNation ( side , nation , - 1 ) diff [ tech_bio3 , tech_bio2 , tech_bio1 , tech_comp3 , tech_comp2 , tech_comp1 , tech_opto3 , tech_opto2 , tech_sib3 , tech_sib2 , tech_weap3 , tech_weap2 , tech_radmat , tech_artillery , tech_sibimplosion , tech_behemoth , tech_sibfiss ] ;
12696: LD_ADDR_VAR 0 4
12700: PUSH
12701: LD_VAR 0 13
12705: PPUSH
12706: LD_VAR 0 14
12710: PPUSH
12711: LD_INT 1
12713: NEG
12714: PPUSH
12715: CALL 16478 0 3
12719: PUSH
12720: LD_INT 68
12722: PUSH
12723: LD_INT 67
12725: PUSH
12726: LD_INT 66
12728: PUSH
12729: LD_INT 59
12731: PUSH
12732: LD_INT 58
12734: PUSH
12735: LD_INT 57
12737: PUSH
12738: LD_INT 62
12740: PUSH
12741: LD_INT 61
12743: PUSH
12744: LD_INT 56
12746: PUSH
12747: LD_INT 55
12749: PUSH
12750: LD_INT 53
12752: PUSH
12753: LD_INT 52
12755: PUSH
12756: LD_INT 81
12758: PUSH
12759: LD_INT 80
12761: PUSH
12762: LD_INT 72
12764: PUSH
12765: LD_INT 23
12767: PUSH
12768: LD_INT 25
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: DIFF
12790: ST_TO_ADDR
// for j in techs do
12791: LD_ADDR_VAR 0 2
12795: PUSH
12796: LD_VAR 0 4
12800: PUSH
12801: FOR_IN
12802: IFFALSE 12823
// SetTech ( j , side , state_researched ) ;
12804: LD_VAR 0 2
12808: PPUSH
12809: LD_VAR 0 13
12813: PPUSH
12814: LD_INT 2
12816: PPUSH
12817: CALL_OW 322
12821: GO 12801
12823: POP
12824: POP
// PrepareArmsRaceVehiclesList ( mpSidePositions [ i ] , side , nation ) ;
12825: LD_EXP 7
12829: PUSH
12830: LD_VAR 0 1
12834: ARRAY
12835: PPUSH
12836: LD_VAR 0 13
12840: PPUSH
12841: LD_VAR 0 14
12845: PPUSH
12846: CALL 2406 0 3
// buildings := GetArmsRaceBuildingsList ( mpSidePositions [ i ] ) ;
12850: LD_ADDR_VAR 0 12
12854: PUSH
12855: LD_EXP 7
12859: PUSH
12860: LD_VAR 0 1
12864: ARRAY
12865: PPUSH
12866: CALL 3254 0 1
12870: ST_TO_ADDR
// for j in buildings do
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_VAR 0 12
12880: PUSH
12881: FOR_IN
12882: IFFALSE 13321
// begin uc_nation := nation ;
12884: LD_ADDR_OWVAR 21
12888: PUSH
12889: LD_VAR 0 14
12893: ST_TO_ADDR
// if j [ 1 ] = b_bunker and nation in [ nation_american , nation_russian ] then
12894: LD_VAR 0 2
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PUSH
12903: LD_INT 32
12905: EQUAL
12906: IFFALSE 12925
12908: PUSH
12909: LD_VAR 0 14
12913: PUSH
12914: LD_INT 1
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: IN
12924: AND
12925: IFFALSE 12937
// type := b_turret else
12927: LD_ADDR_VAR 0 11
12931: PUSH
12932: LD_INT 33
12934: ST_TO_ADDR
12935: GO 12975
// if j [ 1 ] = b_lab then
12937: LD_VAR 0 2
12941: PUSH
12942: LD_INT 1
12944: ARRAY
12945: PUSH
12946: LD_INT 6
12948: EQUAL
12949: IFFALSE 12961
// type := b_lab_full else
12951: LD_ADDR_VAR 0 11
12955: PUSH
12956: LD_INT 8
12958: ST_TO_ADDR
12959: GO 12975
// type := j [ 1 ] ;
12961: LD_ADDR_VAR 0 11
12965: PUSH
12966: LD_VAR 0 2
12970: PUSH
12971: LD_INT 1
12973: ARRAY
12974: ST_TO_ADDR
// bc_level := 10 ;
12975: LD_ADDR_OWVAR 43
12979: PUSH
12980: LD_INT 10
12982: ST_TO_ADDR
// bc_type := type ;
12983: LD_ADDR_OWVAR 42
12987: PUSH
12988: LD_VAR 0 11
12992: ST_TO_ADDR
// bc_kind1 := - 1 ;
12993: LD_ADDR_OWVAR 44
12997: PUSH
12998: LD_INT 1
13000: NEG
13001: ST_TO_ADDR
// bc_kind2 := - 1 ;
13002: LD_ADDR_OWVAR 45
13006: PUSH
13007: LD_INT 1
13009: NEG
13010: ST_TO_ADDR
// if j [ 1 ] = b_lab then
13011: LD_VAR 0 2
13015: PUSH
13016: LD_INT 1
13018: ARRAY
13019: PUSH
13020: LD_INT 6
13022: EQUAL
13023: IFFALSE 13041
// begin bc_kind1 := b_lab_weapon ;
13025: LD_ADDR_OWVAR 44
13029: PUSH
13030: LD_INT 10
13032: ST_TO_ADDR
// bc_kind2 := b_lab_siberium ;
13033: LD_ADDR_OWVAR 45
13037: PUSH
13038: LD_INT 11
13040: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
13041: LD_ADDR_VAR 0 9
13045: PUSH
13046: LD_VAR 0 2
13050: PUSH
13051: LD_INT 2
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 2
13059: PUSH
13060: LD_INT 3
13062: ARRAY
13063: PPUSH
13064: LD_VAR 0 2
13068: PUSH
13069: LD_INT 4
13071: ARRAY
13072: PPUSH
13073: CALL_OW 47
13077: ST_TO_ADDR
// if j [ 1 ] = b_depot then
13078: LD_VAR 0 2
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PUSH
13087: LD_INT 0
13089: EQUAL
13090: IFFALSE 13220
// begin SetBName ( b , @ & side ) ;
13092: LD_VAR 0 9
13096: PPUSH
13097: LD_STRING @
13099: PUSH
13100: LD_VAR 0 13
13104: STR
13105: PPUSH
13106: CALL_OW 500
// for k := 1 to 2 do
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_INT 2
13122: PUSH
13123: FOR_TO
13124: IFFALSE 13146
// begin PrepareApemanEngineer ( ) ;
13126: CALL 50556 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
13130: CALL_OW 44
13134: PPUSH
13135: LD_VAR 0 9
13139: PPUSH
13140: CALL_OW 52
// end ;
13144: GO 13123
13146: POP
13147: POP
// for k := 1 to mpStartingResources do
13148: LD_ADDR_VAR 0 3
13152: PUSH
13153: DOUBLE
13154: LD_INT 1
13156: DEC
13157: ST_TO_ADDR
13158: LD_EXP 15
13162: PUSH
13163: FOR_TO
13164: IFFALSE 13218
// begin resource := mpStartingResources [ k ] ;
13166: LD_ADDR_VAR 0 7
13170: PUSH
13171: LD_EXP 15
13175: PUSH
13176: LD_VAR 0 3
13180: ARRAY
13181: ST_TO_ADDR
// if resource then
13182: LD_VAR 0 7
13186: IFFALSE 13216
// SetResourceType ( GetBase ( b ) , k , resource div 2 ) ;
13188: LD_VAR 0 9
13192: PPUSH
13193: CALL_OW 274
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_VAR 0 7
13207: PUSH
13208: LD_INT 2
13210: DIV
13211: PPUSH
13212: CALL_OW 277
// end ;
13216: GO 13163
13218: POP
13219: POP
// end ; if j [ 1 ] = b_bunker and nation = nation_arabian then
13220: LD_VAR 0 2
13224: PUSH
13225: LD_INT 1
13227: ARRAY
13228: PUSH
13229: LD_INT 32
13231: EQUAL
13232: IFFALSE 13244
13234: PUSH
13235: LD_VAR 0 14
13239: PUSH
13240: LD_INT 2
13242: EQUAL
13243: AND
13244: IFFALSE 13264
// begin PrepareApemanSoldier ( ) ;
13246: CALL 50454 0 0
// PlaceHumanInUnit ( CreateHuman , b ) ;
13250: CALL_OW 44
13254: PPUSH
13255: LD_VAR 0 9
13259: PPUSH
13260: CALL_OW 52
// end ; if Count ( j ) > 4 and j [ 1 ] = b_bunker then
13264: LD_VAR 0 2
13268: PPUSH
13269: CALL 18555 0 1
13273: PUSH
13274: LD_INT 4
13276: GREATER
13277: IFFALSE 13293
13279: PUSH
13280: LD_VAR 0 2
13284: PUSH
13285: LD_INT 1
13287: ARRAY
13288: PUSH
13289: LD_INT 32
13291: EQUAL
13292: AND
13293: IFFALSE 13319
// PlaceWeaponTurret ( b , j [ 5 ] [ nation ] ) ;
13295: LD_VAR 0 9
13299: PPUSH
13300: LD_VAR 0 2
13304: PUSH
13305: LD_INT 5
13307: ARRAY
13308: PUSH
13309: LD_VAR 0 14
13313: ARRAY
13314: PPUSH
13315: CALL_OW 431
// end ;
13319: GO 12881
13321: POP
13322: POP
// end else
13323: GO 13325
// end ;
13325: GO 12425
13327: POP
13328: POP
// repeat mpDisplayStrings := [ #TimeToWin , ( mpBuildUpTime + mpTimeToWin ) - tick ] ;
13329: LD_ADDR_EXP 38
13333: PUSH
13334: LD_STRING #TimeToWin
13336: PUSH
13337: LD_EXP 20
13341: PUSH
13342: LD_EXP 46
13346: PLUS
13347: PUSH
13348: LD_OWVAR 1
13352: MINUS
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: ST_TO_ADDR
// if mpBuildUpTime > tick then
13358: LD_EXP 20
13362: PUSH
13363: LD_OWVAR 1
13367: GREATER
13368: IFFALSE 13399
// mpDisplayStrings := mpDisplayStrings ^ [ #PrepareTime , mpBuildUpTime - tick ] ;
13370: LD_ADDR_EXP 38
13374: PUSH
13375: LD_EXP 38
13379: PUSH
13380: LD_STRING #PrepareTime
13382: PUSH
13383: LD_EXP 20
13387: PUSH
13388: LD_OWVAR 1
13392: MINUS
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: ADD
13398: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13399: LD_INT 35
13401: PPUSH
13402: CALL_OW 67
// if ( ( 30 30$0 + mpBuildUpTime ) = tick ) then
13406: LD_INT 63000
13408: PUSH
13409: LD_EXP 20
13413: PLUS
13414: PUSH
13415: LD_OWVAR 1
13419: EQUAL
13420: IFFALSE 13487
// begin for i := 1 to 8 do
13422: LD_ADDR_VAR 0 1
13426: PUSH
13427: DOUBLE
13428: LD_INT 1
13430: DEC
13431: ST_TO_ADDR
13432: LD_INT 8
13434: PUSH
13435: FOR_TO
13436: IFFALSE 13485
// if mpSideTeams [ i ] = 1 and mpSidePositions [ i ] then
13438: LD_EXP 8
13442: PUSH
13443: LD_VAR 0 1
13447: ARRAY
13448: PUSH
13449: LD_INT 1
13451: EQUAL
13452: IFFALSE 13466
13454: PUSH
13455: LD_EXP 7
13459: PUSH
13460: LD_VAR 0 1
13464: ARRAY
13465: AND
13466: IFFALSE 13483
// SetTech ( tech_SibFiss , i , state_enabled ) ;
13468: LD_INT 25
13470: PPUSH
13471: LD_VAR 0 1
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: CALL_OW 322
13483: GO 13435
13485: POP
13486: POP
// end ; until ( mpBuildUpTime + mpTimeToWin ) <= tick ;
13487: LD_EXP 20
13491: PUSH
13492: LD_EXP 46
13496: PLUS
13497: PUSH
13498: LD_OWVAR 1
13502: LESSEQUAL
13503: IFFALSE 13329
// if mpSideTeams [ your_side ] = 1 then
13505: LD_EXP 8
13509: PUSH
13510: LD_OWVAR 2
13514: ARRAY
13515: PUSH
13516: LD_INT 1
13518: EQUAL
13519: IFFALSE 13526
// enable ( mpWin ) else
13521: LD_INT 101
13523: ENABLE_MARKED
13524: GO 13533
// begin Multiplayer_Loose_Message ;
13526: CALL_OW 521
// enable ( mpLose ) ;
13530: LD_INT 102
13532: ENABLE_MARKED
// end ; end ;
13533: PPOPN 14
13535: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeArmsRace do var i , canWin ;
13536: LD_EXP 39
13540: IFFALSE 13548
13542: PUSH
13543: CALL 13758 0 0
13547: AND
13548: IFFALSE 13556
13550: PUSH
13551: LD_OWVAR 4
13555: AND
13556: IFFALSE 13755
13558: GO 13560
13560: DISABLE
13561: LD_INT 0
13563: PPUSH
13564: PPUSH
// begin canWin := false ;
13565: LD_ADDR_VAR 0 2
13569: PUSH
13570: LD_INT 0
13572: ST_TO_ADDR
// if not HasPower ( your_side ) then
13573: LD_OWVAR 2
13577: PPUSH
13578: CALL 13800 0 1
13582: NOT
13583: IFFALSE 13594
// begin Multiplayer_Loose_Message ;
13585: CALL_OW 521
// enable ( mpLose ) ;
13589: LD_INT 102
13591: ENABLE_MARKED
// end else
13592: GO 13755
// begin canWin := true ;
13594: LD_ADDR_VAR 0 2
13598: PUSH
13599: LD_INT 1
13601: ST_TO_ADDR
// for i := 1 to 8 do
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: DOUBLE
13608: LD_INT 1
13610: DEC
13611: ST_TO_ADDR
13612: LD_INT 8
13614: PUSH
13615: FOR_TO
13616: IFFALSE 13741
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13618: LD_EXP 7
13622: PUSH
13623: LD_VAR 0 1
13627: ARRAY
13628: IFFALSE 13641
13630: PUSH
13631: LD_VAR 0 1
13635: PPUSH
13636: CALL_OW 108
13640: AND
13641: IFFALSE 13655
13643: PUSH
13644: LD_VAR 0 1
13648: PUSH
13649: LD_OWVAR 2
13653: NONEQUAL
13654: AND
13655: IFFALSE 13739
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13657: LD_EXP 8
13661: PUSH
13662: LD_VAR 0 1
13666: ARRAY
13667: NOT
13668: IFTRUE 13716
13670: PUSH
13671: LD_EXP 8
13675: PUSH
13676: LD_VAR 0 1
13680: ARRAY
13681: PUSH
13682: LD_EXP 8
13686: PUSH
13687: LD_OWVAR 2
13691: ARRAY
13692: NONEQUAL
13693: IFFALSE 13715
13695: PUSH
13696: LD_OWVAR 2
13700: PPUSH
13701: LD_VAR 0 1
13705: PPUSH
13706: CALL_OW 81
13710: PUSH
13711: LD_INT 1
13713: NONEQUAL
13714: AND
13715: OR
13716: IFFALSE 13739
// if HasPower ( i ) then
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL 13800 0 1
13727: IFFALSE 13739
// begin canWin := false ;
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_INT 0
13736: ST_TO_ADDR
// break ;
13737: GO 13741
// end ;
13739: GO 13615
13741: POP
13742: POP
// if canWin then
13743: LD_VAR 0 2
13747: IFFALSE 13754
// enable ( mpWin ) else
13749: LD_INT 101
13751: ENABLE_MARKED
13752: GO 13755
// enable ;
13754: ENABLE
// end ; end ;
13755: PPOPN 2
13757: END
// function CanWinLoose ; begin
13758: LD_INT 0
13760: PPUSH
// result := true ;
13761: LD_ADDR_VAR 0 1
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13769: CALL_OW 531
13773: IFFALSE 13785
13775: PUSH
13776: CALL_OW 519
13780: PUSH
13781: LD_INT 1
13783: GREATER
13784: AND
13785: IFFALSE 13795
// result := false ;
13787: LD_ADDR_VAR 0 1
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// end ;
13795: LD_VAR 0 1
13799: RET
// function HasPower ( i ) ; begin
13800: LD_INT 0
13802: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
13803: LD_ADDR_VAR 0 2
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_VAR 0 1
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: LD_INT 21
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 33
13835: PUSH
13836: LD_INT 3
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 33
13845: PUSH
13846: LD_INT 5
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// end ; end_of_file
13868: LD_VAR 0 2
13872: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
13873: LD_EXP 39
13877: IFFALSE 13885
13879: PUSH
13880: CALL 14095 0 0
13884: AND
13885: IFFALSE 13893
13887: PUSH
13888: LD_OWVAR 4
13892: AND
13893: IFFALSE 14092
13895: GO 13897
13897: DISABLE
13898: LD_INT 0
13900: PPUSH
13901: PPUSH
// begin canWin := false ;
13902: LD_ADDR_VAR 0 2
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// if not HasPower ( your_side ) then
13910: LD_OWVAR 2
13914: PPUSH
13915: CALL 14137 0 1
13919: NOT
13920: IFFALSE 13931
// begin Multiplayer_Loose_Message ;
13922: CALL_OW 521
// enable ( mpLose ) ;
13926: LD_INT 102
13928: ENABLE_MARKED
// end else
13929: GO 14092
// begin canWin := true ;
13931: LD_ADDR_VAR 0 2
13935: PUSH
13936: LD_INT 1
13938: ST_TO_ADDR
// for i := 1 to 8 do
13939: LD_ADDR_VAR 0 1
13943: PUSH
13944: DOUBLE
13945: LD_INT 1
13947: DEC
13948: ST_TO_ADDR
13949: LD_INT 8
13951: PUSH
13952: FOR_TO
13953: IFFALSE 14078
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
13955: LD_EXP 7
13959: PUSH
13960: LD_VAR 0 1
13964: ARRAY
13965: IFFALSE 13978
13967: PUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 108
13977: AND
13978: IFFALSE 13992
13980: PUSH
13981: LD_VAR 0 1
13985: PUSH
13986: LD_OWVAR 2
13990: NONEQUAL
13991: AND
13992: IFFALSE 14076
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
13994: LD_EXP 8
13998: PUSH
13999: LD_VAR 0 1
14003: ARRAY
14004: NOT
14005: IFTRUE 14053
14007: PUSH
14008: LD_EXP 8
14012: PUSH
14013: LD_VAR 0 1
14017: ARRAY
14018: PUSH
14019: LD_EXP 8
14023: PUSH
14024: LD_OWVAR 2
14028: ARRAY
14029: NONEQUAL
14030: IFFALSE 14052
14032: PUSH
14033: LD_OWVAR 2
14037: PPUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 81
14047: PUSH
14048: LD_INT 1
14050: NONEQUAL
14051: AND
14052: OR
14053: IFFALSE 14076
// if HasPower ( i ) then
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL 14137 0 1
14064: IFFALSE 14076
// begin canWin := false ;
14066: LD_ADDR_VAR 0 2
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// break ;
14074: GO 14078
// end ;
14076: GO 13952
14078: POP
14079: POP
// if canWin then
14080: LD_VAR 0 2
14084: IFFALSE 14091
// enable ( mpWin ) else
14086: LD_INT 101
14088: ENABLE_MARKED
14089: GO 14092
// enable ;
14091: ENABLE
// end ; end ;
14092: PPOPN 2
14094: END
// function CanWinLoose ; begin
14095: LD_INT 0
14097: PPUSH
// result := true ;
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: LD_INT 1
14105: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14106: CALL_OW 531
14110: IFFALSE 14122
14112: PUSH
14113: CALL_OW 519
14117: PUSH
14118: LD_INT 1
14120: GREATER
14121: AND
14122: IFFALSE 14132
// result := false ;
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: LD_INT 0
14131: ST_TO_ADDR
// end ;
14132: LD_VAR 0 1
14136: RET
// function HasPower ( i ) ; begin
14137: LD_INT 0
14139: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14140: LD_ADDR_VAR 0 2
14144: PUSH
14145: LD_INT 22
14147: PUSH
14148: LD_VAR 0 1
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: LD_INT 21
14162: PUSH
14163: LD_INT 1
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 33
14172: PUSH
14173: LD_INT 3
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 33
14182: PUSH
14183: LD_INT 5
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 69
14204: ST_TO_ADDR
// end ; end_of_file
14205: LD_VAR 0 2
14209: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
14210: LD_EXP 39
14214: IFFALSE 14257
14216: GO 14218
14218: DISABLE
14219: LD_INT 0
14221: PPUSH
// begin for i := 1 to 8 do
14222: LD_ADDR_VAR 0 1
14226: PUSH
14227: DOUBLE
14228: LD_INT 1
14230: DEC
14231: ST_TO_ADDR
14232: LD_INT 8
14234: PUSH
14235: FOR_TO
14236: IFFALSE 14255
// SetRestrict ( b_depot , i , state_disabled ) ;
14238: LD_INT 0
14240: PPUSH
14241: LD_VAR 0 1
14245: PPUSH
14246: LD_INT 0
14248: PPUSH
14249: CALL_OW 324
14253: GO 14235
14255: POP
14256: POP
// end ;
14257: PPOPN 1
14259: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
14260: LD_EXP 39
14264: IFFALSE 14272
14266: PUSH
14267: CALL 14482 0 0
14271: AND
14272: IFFALSE 14280
14274: PUSH
14275: LD_OWVAR 4
14279: AND
14280: IFFALSE 14479
14282: GO 14284
14284: DISABLE
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
// begin canWin := false ;
14289: LD_ADDR_VAR 0 2
14293: PUSH
14294: LD_INT 0
14296: ST_TO_ADDR
// if not HasPower ( your_side ) then
14297: LD_OWVAR 2
14301: PPUSH
14302: CALL 14524 0 1
14306: NOT
14307: IFFALSE 14318
// begin Multiplayer_Loose_Message ;
14309: CALL_OW 521
// enable ( mpLose ) ;
14313: LD_INT 102
14315: ENABLE_MARKED
// end else
14316: GO 14479
// begin canWin := true ;
14318: LD_ADDR_VAR 0 2
14322: PUSH
14323: LD_INT 1
14325: ST_TO_ADDR
// for i := 1 to 8 do
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: DOUBLE
14332: LD_INT 1
14334: DEC
14335: ST_TO_ADDR
14336: LD_INT 8
14338: PUSH
14339: FOR_TO
14340: IFFALSE 14465
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
14342: LD_EXP 7
14346: PUSH
14347: LD_VAR 0 1
14351: ARRAY
14352: IFFALSE 14365
14354: PUSH
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL_OW 108
14364: AND
14365: IFFALSE 14379
14367: PUSH
14368: LD_VAR 0 1
14372: PUSH
14373: LD_OWVAR 2
14377: NONEQUAL
14378: AND
14379: IFFALSE 14463
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14381: LD_EXP 8
14385: PUSH
14386: LD_VAR 0 1
14390: ARRAY
14391: NOT
14392: IFTRUE 14440
14394: PUSH
14395: LD_EXP 8
14399: PUSH
14400: LD_VAR 0 1
14404: ARRAY
14405: PUSH
14406: LD_EXP 8
14410: PUSH
14411: LD_OWVAR 2
14415: ARRAY
14416: NONEQUAL
14417: IFFALSE 14439
14419: PUSH
14420: LD_OWVAR 2
14424: PPUSH
14425: LD_VAR 0 1
14429: PPUSH
14430: CALL_OW 81
14434: PUSH
14435: LD_INT 1
14437: NONEQUAL
14438: AND
14439: OR
14440: IFFALSE 14463
// if HasPower ( i ) then
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL 14524 0 1
14451: IFFALSE 14463
// begin canWin := false ;
14453: LD_ADDR_VAR 0 2
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// break ;
14461: GO 14465
// end ;
14463: GO 14339
14465: POP
14466: POP
// if canWin then
14467: LD_VAR 0 2
14471: IFFALSE 14478
// enable ( mpWin ) else
14473: LD_INT 101
14475: ENABLE_MARKED
14476: GO 14479
// enable ;
14478: ENABLE
// end ; end ;
14479: PPOPN 2
14481: END
// function CanWinLoose ; begin
14482: LD_INT 0
14484: PPUSH
// result := true ;
14485: LD_ADDR_VAR 0 1
14489: PUSH
14490: LD_INT 1
14492: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14493: CALL_OW 531
14497: IFFALSE 14509
14499: PUSH
14500: CALL_OW 519
14504: PUSH
14505: LD_INT 1
14507: GREATER
14508: AND
14509: IFFALSE 14519
// result := false ;
14511: LD_ADDR_VAR 0 1
14515: PUSH
14516: LD_INT 0
14518: ST_TO_ADDR
// end ;
14519: LD_VAR 0 1
14523: RET
// function HasPower ( i ) ; begin
14524: LD_INT 0
14526: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
14527: LD_INT 22
14529: PUSH
14530: LD_VAR 0 1
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: LD_INT 30
14544: PUSH
14545: LD_INT 0
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 30
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 69
14575: NOT
14576: IFFALSE 14580
// exit ;
14578: GO 14645
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14580: LD_ADDR_VAR 0 2
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_VAR 0 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 2
14599: PUSH
14600: LD_INT 21
14602: PUSH
14603: LD_INT 1
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 33
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 33
14622: PUSH
14623: LD_INT 5
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 69
14644: ST_TO_ADDR
// end ; end_of_file
14645: LD_VAR 0 2
14649: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
14650: LD_EXP 39
14654: IFFALSE 14995
14656: GO 14658
14658: DISABLE
14659: LD_INT 0
14661: PPUSH
14662: PPUSH
14663: PPUSH
// begin mpKingPoints := [ ] ;
14664: LD_ADDR_EXP 50
14668: PUSH
14669: EMPTY
14670: ST_TO_ADDR
// if mpTeamGame then
14671: LD_EXP 11
14675: IFFALSE 14729
// begin for i := 1 to Count ( mpTeams ) do
14677: LD_ADDR_VAR 0 1
14681: PUSH
14682: DOUBLE
14683: LD_INT 1
14685: DEC
14686: ST_TO_ADDR
14687: LD_EXP 10
14691: PPUSH
14692: CALL 18555 0 1
14696: PUSH
14697: FOR_TO
14698: IFFALSE 14725
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14700: LD_ADDR_EXP 50
14704: PUSH
14705: LD_EXP 50
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_INT 0
14717: PPUSH
14718: CALL_OW 1
14722: ST_TO_ADDR
14723: GO 14697
14725: POP
14726: POP
// end else
14727: GO 14772
// begin for i := 1 to 8 do
14729: LD_ADDR_VAR 0 1
14733: PUSH
14734: DOUBLE
14735: LD_INT 1
14737: DEC
14738: ST_TO_ADDR
14739: LD_INT 8
14741: PUSH
14742: FOR_TO
14743: IFFALSE 14770
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14745: LD_ADDR_EXP 50
14749: PUSH
14750: LD_EXP 50
14754: PPUSH
14755: LD_VAR 0 1
14759: PPUSH
14760: LD_INT 0
14762: PPUSH
14763: CALL_OW 1
14767: ST_TO_ADDR
14768: GO 14742
14770: POP
14771: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
14772: LD_ADDR_VAR 0 3
14776: PUSH
14777: LD_EXP 2
14781: PPUSH
14782: LD_INT 0
14784: PPUSH
14785: CALL_OW 517
14789: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14790: LD_ADDR_VAR 0 1
14794: PUSH
14795: DOUBLE
14796: LD_INT 1
14798: DEC
14799: ST_TO_ADDR
14800: LD_VAR 0 3
14804: PUSH
14805: LD_INT 1
14807: ARRAY
14808: PUSH
14809: FOR_TO
14810: IFFALSE 14877
// for j := 1 to 8 do
14812: LD_ADDR_VAR 0 2
14816: PUSH
14817: DOUBLE
14818: LD_INT 1
14820: DEC
14821: ST_TO_ADDR
14822: LD_INT 8
14824: PUSH
14825: FOR_TO
14826: IFFALSE 14873
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
14828: LD_VAR 0 3
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PUSH
14837: LD_VAR 0 1
14841: ARRAY
14842: PPUSH
14843: LD_VAR 0 3
14847: PUSH
14848: LD_INT 2
14850: ARRAY
14851: PUSH
14852: LD_VAR 0 1
14856: ARRAY
14857: PPUSH
14858: LD_VAR 0 2
14862: PPUSH
14863: LD_INT 12
14865: NEG
14866: PPUSH
14867: CALL_OW 330
14871: GO 14825
14873: POP
14874: POP
14875: GO 14809
14877: POP
14878: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
14879: LD_EXP 34
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 424
// UpdateCounter ;
14891: CALL 15501 0 0
// repeat wait ( 0 0$1 ) ;
14895: LD_INT 35
14897: PPUSH
14898: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14902: LD_ADDR_VAR 0 3
14906: PUSH
14907: LD_EXP 34
14911: PPUSH
14912: LD_INT 3
14914: PUSH
14915: LD_INT 57
14917: PUSH
14918: EMPTY
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 50
14927: PUSH
14928: EMPTY
14929: LIST
14930: PUSH
14931: LD_INT 2
14933: PUSH
14934: LD_INT 30
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 30
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 70
14968: ST_TO_ADDR
// if not tmp then
14969: LD_VAR 0 3
14973: NOT
14974: IFFALSE 14978
// continue ;
14976: GO 14895
// AddPoints ( tmp ) ;
14978: LD_VAR 0 3
14982: PPUSH
14983: CALL 15179 0 1
// UpdateCounter ;
14987: CALL 15501 0 0
// until false ;
14991: LD_INT 0
14993: IFFALSE 14895
// end ;
14995: PPOPN 3
14997: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14998: LD_EXP 39
15002: IFFALSE 15010
15004: PUSH
15005: LD_EXP 37
15009: AND
15010: IFFALSE 15176
15012: GO 15014
15014: DISABLE
15015: LD_INT 0
15017: PPUSH
15018: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
15019: LD_ADDR_VAR 0 2
15023: PUSH
15024: LD_EXP 2
15028: PPUSH
15029: LD_INT 0
15031: PPUSH
15032: CALL_OW 517
15036: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
15037: LD_ADDR_VAR 0 1
15041: PUSH
15042: DOUBLE
15043: LD_INT 1
15045: DEC
15046: ST_TO_ADDR
15047: LD_VAR 0 2
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15098
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
15059: LD_VAR 0 2
15063: PUSH
15064: LD_INT 1
15066: ARRAY
15067: PUSH
15068: LD_VAR 0 1
15072: ARRAY
15073: PPUSH
15074: LD_VAR 0 2
15078: PUSH
15079: LD_INT 2
15081: ARRAY
15082: PUSH
15083: LD_VAR 0 1
15087: ARRAY
15088: PPUSH
15089: LD_INT 125
15091: PPUSH
15092: CALL_OW 495
15096: GO 15056
15098: POP
15099: POP
// repeat wait ( mpEmissions ) ;
15100: LD_EXP 37
15104: PPUSH
15105: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
15109: LD_ADDR_VAR 0 1
15113: PUSH
15114: DOUBLE
15115: LD_INT 1
15117: DEC
15118: ST_TO_ADDR
15119: LD_VAR 0 2
15123: PUSH
15124: LD_INT 1
15126: ARRAY
15127: PUSH
15128: FOR_TO
15129: IFFALSE 15170
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
15131: LD_VAR 0 2
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PUSH
15140: LD_VAR 0 1
15144: ARRAY
15145: PPUSH
15146: LD_VAR 0 2
15150: PUSH
15151: LD_INT 2
15153: ARRAY
15154: PUSH
15155: LD_VAR 0 1
15159: ARRAY
15160: PPUSH
15161: LD_INT 15
15163: PPUSH
15164: CALL_OW 495
15168: GO 15128
15170: POP
15171: POP
// until false ;
15172: LD_INT 0
15174: IFFALSE 15100
// end ;
15176: PPOPN 2
15178: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
15179: LD_INT 0
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
// if mpTeamGame then
15186: LD_EXP 11
15190: IFFALSE 15387
// begin first := depots [ 1 ] ;
15192: LD_ADDR_VAR 0 4
15196: PUSH
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 1
15204: ARRAY
15205: ST_TO_ADDR
// side := GetSide ( first ) ;
15206: LD_ADDR_VAR 0 6
15210: PUSH
15211: LD_VAR 0 4
15215: PPUSH
15216: CALL_OW 255
15220: ST_TO_ADDR
// for i := 1 to mpTeams do
15221: LD_ADDR_VAR 0 3
15225: PUSH
15226: DOUBLE
15227: LD_INT 1
15229: DEC
15230: ST_TO_ADDR
15231: LD_EXP 10
15235: PUSH
15236: FOR_TO
15237: IFFALSE 15271
// if side in mpTeams [ i ] then
15239: LD_VAR 0 6
15243: PUSH
15244: LD_EXP 10
15248: PUSH
15249: LD_VAR 0 3
15253: ARRAY
15254: IN
15255: IFFALSE 15269
// begin team := i ;
15257: LD_ADDR_VAR 0 5
15261: PUSH
15262: LD_VAR 0 3
15266: ST_TO_ADDR
// break ;
15267: GO 15271
// end ;
15269: GO 15236
15271: POP
15272: POP
// if not team then
15273: LD_VAR 0 5
15277: NOT
15278: IFFALSE 15282
// exit ;
15280: GO 15496
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15282: LD_EXP 34
15286: PPUSH
15287: LD_INT 81
15289: PUSH
15290: LD_VAR 0 6
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PPUSH
15299: CALL_OW 70
15303: IFFALSE 15307
// exit ;
15305: GO 15496
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
15307: LD_ADDR_EXP 50
15311: PUSH
15312: LD_EXP 50
15316: PPUSH
15317: LD_VAR 0 5
15321: PPUSH
15322: LD_EXP 50
15326: PUSH
15327: LD_VAR 0 5
15331: ARRAY
15332: PUSH
15333: LD_INT 1
15335: PLUS
15336: PPUSH
15337: CALL_OW 1
15341: ST_TO_ADDR
// for i in mpTeams [ team ] do
15342: LD_ADDR_VAR 0 3
15346: PUSH
15347: LD_EXP 10
15351: PUSH
15352: LD_VAR 0 5
15356: ARRAY
15357: PUSH
15358: FOR_IN
15359: IFFALSE 15383
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
15361: LD_VAR 0 3
15365: PPUSH
15366: LD_EXP 50
15370: PUSH
15371: LD_VAR 0 5
15375: ARRAY
15376: PPUSH
15377: CALL_OW 506
15381: GO 15358
15383: POP
15384: POP
// end else
15385: GO 15496
// begin first := depots [ 1 ] ;
15387: LD_ADDR_VAR 0 4
15391: PUSH
15392: LD_VAR 0 1
15396: PUSH
15397: LD_INT 1
15399: ARRAY
15400: ST_TO_ADDR
// side := GetSide ( first ) ;
15401: LD_ADDR_VAR 0 6
15405: PUSH
15406: LD_VAR 0 4
15410: PPUSH
15411: CALL_OW 255
15415: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15416: LD_EXP 34
15420: PPUSH
15421: LD_INT 81
15423: PUSH
15424: LD_VAR 0 6
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PPUSH
15433: CALL_OW 70
15437: IFFALSE 15441
// exit ;
15439: GO 15496
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
15441: LD_ADDR_EXP 50
15445: PUSH
15446: LD_EXP 50
15450: PPUSH
15451: LD_VAR 0 6
15455: PPUSH
15456: LD_EXP 50
15460: PUSH
15461: LD_VAR 0 6
15465: ARRAY
15466: PUSH
15467: LD_INT 1
15469: PLUS
15470: PPUSH
15471: CALL_OW 1
15475: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
15476: LD_VAR 0 6
15480: PPUSH
15481: LD_EXP 50
15485: PUSH
15486: LD_VAR 0 6
15490: ARRAY
15491: PPUSH
15492: CALL_OW 506
// end ; end ;
15496: LD_VAR 0 2
15500: RET
// function UpdateCounter ; var i ; begin
15501: LD_INT 0
15503: PPUSH
15504: PPUSH
// result := [ ] ;
15505: LD_ADDR_VAR 0 1
15509: PUSH
15510: EMPTY
15511: ST_TO_ADDR
// if mpTeamGame then
15512: LD_EXP 11
15516: IFFALSE 15583
// begin for i := 1 to mpTeams do
15518: LD_ADDR_VAR 0 2
15522: PUSH
15523: DOUBLE
15524: LD_INT 1
15526: DEC
15527: ST_TO_ADDR
15528: LD_EXP 10
15532: PUSH
15533: FOR_TO
15534: IFFALSE 15579
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
15536: LD_ADDR_VAR 0 1
15540: PUSH
15541: LD_VAR 0 1
15545: PUSH
15546: LD_STRING #KingoftheHill-Team
15548: PUSH
15549: LD_VAR 0 2
15553: PUSH
15554: LD_EXP 50
15558: PUSH
15559: LD_VAR 0 2
15563: ARRAY
15564: PUSH
15565: LD_EXP 35
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: ADD
15576: ST_TO_ADDR
15577: GO 15533
15579: POP
15580: POP
// end else
15581: GO 15656
// begin for i := 1 to 8 do
15583: LD_ADDR_VAR 0 2
15587: PUSH
15588: DOUBLE
15589: LD_INT 1
15591: DEC
15592: ST_TO_ADDR
15593: LD_INT 8
15595: PUSH
15596: FOR_TO
15597: IFFALSE 15654
// if mpSidePositions [ i ] then
15599: LD_EXP 7
15603: PUSH
15604: LD_VAR 0 2
15608: ARRAY
15609: IFFALSE 15652
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
15611: LD_ADDR_VAR 0 1
15615: PUSH
15616: LD_VAR 0 1
15620: PUSH
15621: LD_STRING #KingoftheHill-Player
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: LD_EXP 50
15633: PUSH
15634: LD_VAR 0 2
15638: ARRAY
15639: PUSH
15640: LD_EXP 35
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: ADD
15651: ST_TO_ADDR
15652: GO 15596
15654: POP
15655: POP
// end ; mpDisplayStrings := result ;
15656: LD_ADDR_EXP 38
15660: PUSH
15661: LD_VAR 0 1
15665: ST_TO_ADDR
// end ;
15666: LD_VAR 0 1
15670: RET
// export function HowMuchPointsKing ( side ) ; begin
15671: LD_INT 0
15673: PPUSH
// result := HowMuchPoints ( side ) ;
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_VAR 0 1
15683: PPUSH
15684: CALL 15694 0 1
15688: ST_TO_ADDR
// end ;
15689: LD_VAR 0 2
15693: RET
// function HowMuchPoints ( side ) ; var i ; begin
15694: LD_INT 0
15696: PPUSH
15697: PPUSH
// if mpTeamGame then
15698: LD_EXP 11
15702: IFFALSE 15771
// begin for i := 1 to Count ( mpTeams ) do
15704: LD_ADDR_VAR 0 3
15708: PUSH
15709: DOUBLE
15710: LD_INT 1
15712: DEC
15713: ST_TO_ADDR
15714: LD_EXP 10
15718: PPUSH
15719: CALL 18555 0 1
15723: PUSH
15724: FOR_TO
15725: IFFALSE 15767
// begin if side in mpTeams [ i ] then
15727: LD_VAR 0 1
15731: PUSH
15732: LD_EXP 10
15736: PUSH
15737: LD_VAR 0 3
15741: ARRAY
15742: IN
15743: IFFALSE 15765
// begin result := mpKingPoints [ i ] ;
15745: LD_ADDR_VAR 0 2
15749: PUSH
15750: LD_EXP 50
15754: PUSH
15755: LD_VAR 0 3
15759: ARRAY
15760: ST_TO_ADDR
// exit ;
15761: POP
15762: POP
15763: GO 15787
// end ; end ;
15765: GO 15724
15767: POP
15768: POP
// end else
15769: GO 15787
// result := mpKingPoints [ side ] ;
15771: LD_ADDR_VAR 0 2
15775: PUSH
15776: LD_EXP 50
15780: PUSH
15781: LD_VAR 0 1
15785: ARRAY
15786: ST_TO_ADDR
// end ;
15787: LD_VAR 0 2
15791: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
15792: LD_EXP 39
15796: IFFALSE 15804
15798: PUSH
15799: CALL 16216 0 0
15803: AND
15804: IFFALSE 15812
15806: PUSH
15807: LD_OWVAR 4
15811: AND
15812: IFFALSE 16065
15814: GO 15816
15816: DISABLE
15817: LD_INT 0
15819: PPUSH
15820: PPUSH
// begin canWin := false ;
15821: LD_ADDR_VAR 0 2
15825: PUSH
15826: LD_INT 0
15828: ST_TO_ADDR
// if not HasPower ( your_side ) then
15829: LD_OWVAR 2
15833: PPUSH
15834: CALL 16258 0 1
15838: NOT
15839: IFFALSE 15850
// begin Multiplayer_Loose_Message ;
15841: CALL_OW 521
// enable ( mpLose ) ;
15845: LD_INT 102
15847: ENABLE_MARKED
// end else
15848: GO 16065
// begin if not EnemiesInGame then
15850: CALL 16068 0 0
15854: NOT
15855: IFFALSE 15862
// begin enable ( mpWin ) ;
15857: LD_INT 101
15859: ENABLE_MARKED
// exit ;
15860: GO 16065
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
15862: LD_ADDR_VAR 0 2
15866: PUSH
15867: LD_OWVAR 2
15871: PPUSH
15872: CALL 15694 0 1
15876: PUSH
15877: LD_EXP 35
15881: GREATEREQUAL
15882: IFFALSE 15895
15884: PUSH
15885: LD_OWVAR 2
15889: PPUSH
15890: CALL 16258 0 1
15894: AND
15895: ST_TO_ADDR
// for i := 1 to 8 do
15896: LD_ADDR_VAR 0 1
15900: PUSH
15901: DOUBLE
15902: LD_INT 1
15904: DEC
15905: ST_TO_ADDR
15906: LD_INT 8
15908: PUSH
15909: FOR_TO
15910: IFFALSE 16051
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15912: LD_EXP 7
15916: PUSH
15917: LD_VAR 0 1
15921: ARRAY
15922: IFFALSE 15935
15924: PUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 108
15934: AND
15935: IFFALSE 15949
15937: PUSH
15938: LD_VAR 0 1
15942: PUSH
15943: LD_OWVAR 2
15947: NONEQUAL
15948: AND
15949: IFFALSE 16049
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15951: LD_EXP 8
15955: PUSH
15956: LD_VAR 0 1
15960: ARRAY
15961: NOT
15962: IFTRUE 16010
15964: PUSH
15965: LD_EXP 8
15969: PUSH
15970: LD_VAR 0 1
15974: ARRAY
15975: PUSH
15976: LD_EXP 8
15980: PUSH
15981: LD_OWVAR 2
15985: ARRAY
15986: NONEQUAL
15987: IFFALSE 16009
15989: PUSH
15990: LD_OWVAR 2
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 81
16004: PUSH
16005: LD_INT 1
16007: NONEQUAL
16008: AND
16009: OR
16010: IFFALSE 16049
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL 15694 0 1
16021: PUSH
16022: LD_EXP 35
16026: GREATEREQUAL
16027: IFFALSE 16040
16029: PUSH
16030: LD_VAR 0 1
16034: PPUSH
16035: CALL 16258 0 1
16039: AND
16040: IFFALSE 16049
// begin enable ( mpLose ) ;
16042: LD_INT 102
16044: ENABLE_MARKED
// exit ;
16045: POP
16046: POP
16047: GO 16065
// end ;
16049: GO 15909
16051: POP
16052: POP
// if canWin then
16053: LD_VAR 0 2
16057: IFFALSE 16064
// enable ( mpWin ) else
16059: LD_INT 101
16061: ENABLE_MARKED
16062: GO 16065
// enable ;
16064: ENABLE
// end ; end ;
16065: PPOPN 2
16067: END
// function EnemiesInGame ; var i ; begin
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
// result := false ;
16072: LD_ADDR_VAR 0 1
16076: PUSH
16077: LD_INT 0
16079: ST_TO_ADDR
// for i := 1 to 8 do
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: DOUBLE
16086: LD_INT 1
16088: DEC
16089: ST_TO_ADDR
16090: LD_INT 8
16092: PUSH
16093: FOR_TO
16094: IFFALSE 16209
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
16096: LD_VAR 0 2
16100: PUSH
16101: LD_OWVAR 2
16105: NONEQUAL
16106: IFFALSE 16119
16108: PUSH
16109: LD_VAR 0 2
16113: PPUSH
16114: CALL 16258 0 1
16118: AND
16119: IFFALSE 16132
16121: PUSH
16122: LD_VAR 0 2
16126: PPUSH
16127: CALL_OW 108
16131: AND
16132: IFFALSE 16207
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
16134: LD_EXP 8
16138: PUSH
16139: LD_VAR 0 2
16143: ARRAY
16144: NOT
16145: IFTRUE 16193
16147: PUSH
16148: LD_EXP 8
16152: PUSH
16153: LD_VAR 0 2
16157: ARRAY
16158: PUSH
16159: LD_EXP 8
16163: PUSH
16164: LD_OWVAR 2
16168: ARRAY
16169: NONEQUAL
16170: IFFALSE 16192
16172: PUSH
16173: LD_OWVAR 2
16177: PPUSH
16178: LD_VAR 0 2
16182: PPUSH
16183: CALL_OW 81
16187: PUSH
16188: LD_INT 1
16190: NONEQUAL
16191: AND
16192: OR
16193: IFFALSE 16207
// begin result := true ;
16195: LD_ADDR_VAR 0 1
16199: PUSH
16200: LD_INT 1
16202: ST_TO_ADDR
// exit ;
16203: POP
16204: POP
16205: GO 16211
// end ;
16207: GO 16093
16209: POP
16210: POP
// end ;
16211: LD_VAR 0 1
16215: RET
// function CanWinLoose ; begin
16216: LD_INT 0
16218: PPUSH
// result := true ;
16219: LD_ADDR_VAR 0 1
16223: PUSH
16224: LD_INT 1
16226: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
16227: CALL_OW 531
16231: IFFALSE 16243
16233: PUSH
16234: CALL_OW 519
16238: PUSH
16239: LD_INT 1
16241: GREATER
16242: AND
16243: IFFALSE 16253
// result := false ;
16245: LD_ADDR_VAR 0 1
16249: PUSH
16250: LD_INT 0
16252: ST_TO_ADDR
// end ;
16253: LD_VAR 0 1
16257: RET
// function HasPower ( i ) ; begin
16258: LD_INT 0
16260: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
16261: LD_ADDR_VAR 0 2
16265: PUSH
16266: LD_INT 22
16268: PUSH
16269: LD_VAR 0 1
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 2
16280: PUSH
16281: LD_INT 21
16283: PUSH
16284: LD_INT 1
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 33
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 33
16303: PUSH
16304: LD_INT 5
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: ST_TO_ADDR
// end ; end_of_file
16326: LD_VAR 0 2
16330: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16331: LD_INT 0
16333: PPUSH
16334: PPUSH
// if exist_mode then
16335: LD_VAR 0 2
16339: IFFALSE 16385
// begin unit := CreateCharacter ( prefix & ident ) ;
16341: LD_ADDR_VAR 0 5
16345: PUSH
16346: LD_VAR 0 3
16350: PUSH
16351: LD_VAR 0 1
16355: STR
16356: PPUSH
16357: CALL_OW 34
16361: ST_TO_ADDR
// if unit then
16362: LD_VAR 0 5
16366: IFFALSE 16383
// DeleteCharacters ( prefix & ident ) ;
16368: LD_VAR 0 3
16372: PUSH
16373: LD_VAR 0 1
16377: STR
16378: PPUSH
16379: CALL_OW 40
// end else
16383: GO 16400
// unit := NewCharacter ( ident ) ;
16385: LD_ADDR_VAR 0 5
16389: PUSH
16390: LD_VAR 0 1
16394: PPUSH
16395: CALL_OW 25
16399: ST_TO_ADDR
// result := unit ;
16400: LD_ADDR_VAR 0 4
16404: PUSH
16405: LD_VAR 0 5
16409: ST_TO_ADDR
// end ;
16410: LD_VAR 0 4
16414: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
16415: LD_INT 0
16417: PPUSH
16418: PPUSH
// if exist_mode then
16419: LD_VAR 0 2
16423: IFFALSE 16448
// unit := CreateCharacter ( prefix & ident ) else
16425: LD_ADDR_VAR 0 5
16429: PUSH
16430: LD_VAR 0 3
16434: PUSH
16435: LD_VAR 0 1
16439: STR
16440: PPUSH
16441: CALL_OW 34
16445: ST_TO_ADDR
16446: GO 16463
// unit := NewCharacter ( ident ) ;
16448: LD_ADDR_VAR 0 5
16452: PUSH
16453: LD_VAR 0 1
16457: PPUSH
16458: CALL_OW 25
16462: ST_TO_ADDR
// result := unit ;
16463: LD_ADDR_VAR 0 4
16467: PUSH
16468: LD_VAR 0 5
16472: ST_TO_ADDR
// end ;
16473: LD_VAR 0 4
16477: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16478: LD_INT 0
16480: PPUSH
16481: PPUSH
// if not side or not nation then
16482: LD_VAR 0 1
16486: NOT
16487: IFTRUE 16496
16489: PUSH
16490: LD_VAR 0 2
16494: NOT
16495: OR
16496: IFFALSE 16500
// exit ;
16498: GO 17294
// case nation of nation_american :
16500: LD_VAR 0 2
16504: PUSH
16505: LD_INT 1
16507: DOUBLE
16508: EQUAL
16509: IFTRUE 16513
16511: GO 16735
16513: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
16514: LD_ADDR_VAR 0 4
16518: PUSH
16519: LD_INT 35
16521: PUSH
16522: LD_INT 45
16524: PUSH
16525: LD_INT 46
16527: PUSH
16528: LD_INT 47
16530: PUSH
16531: LD_INT 82
16533: PUSH
16534: LD_INT 83
16536: PUSH
16537: LD_INT 84
16539: PUSH
16540: LD_INT 85
16542: PUSH
16543: LD_INT 86
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: LD_INT 2
16551: PUSH
16552: LD_INT 6
16554: PUSH
16555: LD_INT 15
16557: PUSH
16558: LD_INT 16
16560: PUSH
16561: LD_INT 7
16563: PUSH
16564: LD_INT 12
16566: PUSH
16567: LD_INT 13
16569: PUSH
16570: LD_INT 10
16572: PUSH
16573: LD_INT 14
16575: PUSH
16576: LD_INT 20
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 22
16584: PUSH
16585: LD_INT 25
16587: PUSH
16588: LD_INT 32
16590: PUSH
16591: LD_INT 27
16593: PUSH
16594: LD_INT 36
16596: PUSH
16597: LD_INT 69
16599: PUSH
16600: LD_INT 39
16602: PUSH
16603: LD_INT 34
16605: PUSH
16606: LD_INT 40
16608: PUSH
16609: LD_INT 48
16611: PUSH
16612: LD_INT 49
16614: PUSH
16615: LD_INT 50
16617: PUSH
16618: LD_INT 51
16620: PUSH
16621: LD_INT 52
16623: PUSH
16624: LD_INT 53
16626: PUSH
16627: LD_INT 54
16629: PUSH
16630: LD_INT 55
16632: PUSH
16633: LD_INT 56
16635: PUSH
16636: LD_INT 57
16638: PUSH
16639: LD_INT 58
16641: PUSH
16642: LD_INT 59
16644: PUSH
16645: LD_INT 60
16647: PUSH
16648: LD_INT 61
16650: PUSH
16651: LD_INT 62
16653: PUSH
16654: LD_INT 80
16656: PUSH
16657: LD_INT 82
16659: PUSH
16660: LD_INT 83
16662: PUSH
16663: LD_INT 84
16665: PUSH
16666: LD_INT 85
16668: PUSH
16669: LD_INT 86
16671: PUSH
16672: LD_INT 90
16674: PUSH
16675: LD_INT 93
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: ST_TO_ADDR
16733: GO 17216
16735: LD_INT 2
16737: DOUBLE
16738: EQUAL
16739: IFTRUE 16743
16741: GO 16977
16743: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16744: LD_ADDR_VAR 0 4
16748: PUSH
16749: LD_INT 35
16751: PUSH
16752: LD_INT 45
16754: PUSH
16755: LD_INT 46
16757: PUSH
16758: LD_INT 47
16760: PUSH
16761: LD_INT 82
16763: PUSH
16764: LD_INT 83
16766: PUSH
16767: LD_INT 84
16769: PUSH
16770: LD_INT 85
16772: PUSH
16773: LD_INT 87
16775: PUSH
16776: LD_INT 70
16778: PUSH
16779: LD_INT 1
16781: PUSH
16782: LD_INT 11
16784: PUSH
16785: LD_INT 3
16787: PUSH
16788: LD_INT 4
16790: PUSH
16791: LD_INT 5
16793: PUSH
16794: LD_INT 6
16796: PUSH
16797: LD_INT 15
16799: PUSH
16800: LD_INT 18
16802: PUSH
16803: LD_INT 7
16805: PUSH
16806: LD_INT 17
16808: PUSH
16809: LD_INT 8
16811: PUSH
16812: LD_INT 20
16814: PUSH
16815: LD_INT 21
16817: PUSH
16818: LD_INT 22
16820: PUSH
16821: LD_INT 72
16823: PUSH
16824: LD_INT 26
16826: PUSH
16827: LD_INT 69
16829: PUSH
16830: LD_INT 39
16832: PUSH
16833: LD_INT 40
16835: PUSH
16836: LD_INT 41
16838: PUSH
16839: LD_INT 42
16841: PUSH
16842: LD_INT 43
16844: PUSH
16845: LD_INT 48
16847: PUSH
16848: LD_INT 49
16850: PUSH
16851: LD_INT 50
16853: PUSH
16854: LD_INT 51
16856: PUSH
16857: LD_INT 52
16859: PUSH
16860: LD_INT 53
16862: PUSH
16863: LD_INT 54
16865: PUSH
16866: LD_INT 55
16868: PUSH
16869: LD_INT 56
16871: PUSH
16872: LD_INT 60
16874: PUSH
16875: LD_INT 61
16877: PUSH
16878: LD_INT 62
16880: PUSH
16881: LD_INT 66
16883: PUSH
16884: LD_INT 67
16886: PUSH
16887: LD_INT 68
16889: PUSH
16890: LD_INT 81
16892: PUSH
16893: LD_INT 82
16895: PUSH
16896: LD_INT 83
16898: PUSH
16899: LD_INT 84
16901: PUSH
16902: LD_INT 85
16904: PUSH
16905: LD_INT 87
16907: PUSH
16908: LD_INT 88
16910: PUSH
16911: LD_INT 92
16913: PUSH
16914: LD_INT 94
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: ST_TO_ADDR
16975: GO 17216
16977: LD_INT 3
16979: DOUBLE
16980: EQUAL
16981: IFTRUE 16985
16983: GO 17215
16985: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16986: LD_ADDR_VAR 0 4
16990: PUSH
16991: LD_INT 46
16993: PUSH
16994: LD_INT 47
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 82
17005: PUSH
17006: LD_INT 83
17008: PUSH
17009: LD_INT 84
17011: PUSH
17012: LD_INT 85
17014: PUSH
17015: LD_INT 86
17017: PUSH
17018: LD_INT 11
17020: PUSH
17021: LD_INT 9
17023: PUSH
17024: LD_INT 20
17026: PUSH
17027: LD_INT 19
17029: PUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 24
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_INT 25
17041: PUSH
17042: LD_INT 28
17044: PUSH
17045: LD_INT 29
17047: PUSH
17048: LD_INT 30
17050: PUSH
17051: LD_INT 31
17053: PUSH
17054: LD_INT 37
17056: PUSH
17057: LD_INT 38
17059: PUSH
17060: LD_INT 32
17062: PUSH
17063: LD_INT 27
17065: PUSH
17066: LD_INT 33
17068: PUSH
17069: LD_INT 69
17071: PUSH
17072: LD_INT 39
17074: PUSH
17075: LD_INT 34
17077: PUSH
17078: LD_INT 40
17080: PUSH
17081: LD_INT 71
17083: PUSH
17084: LD_INT 23
17086: PUSH
17087: LD_INT 44
17089: PUSH
17090: LD_INT 48
17092: PUSH
17093: LD_INT 49
17095: PUSH
17096: LD_INT 50
17098: PUSH
17099: LD_INT 51
17101: PUSH
17102: LD_INT 52
17104: PUSH
17105: LD_INT 53
17107: PUSH
17108: LD_INT 54
17110: PUSH
17111: LD_INT 55
17113: PUSH
17114: LD_INT 56
17116: PUSH
17117: LD_INT 57
17119: PUSH
17120: LD_INT 58
17122: PUSH
17123: LD_INT 59
17125: PUSH
17126: LD_INT 63
17128: PUSH
17129: LD_INT 64
17131: PUSH
17132: LD_INT 65
17134: PUSH
17135: LD_INT 82
17137: PUSH
17138: LD_INT 83
17140: PUSH
17141: LD_INT 84
17143: PUSH
17144: LD_INT 85
17146: PUSH
17147: LD_INT 86
17149: PUSH
17150: LD_INT 89
17152: PUSH
17153: LD_INT 91
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: ST_TO_ADDR
17213: GO 17216
17215: POP
// if state > - 1 and state < 3 then
17216: LD_VAR 0 3
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: GREATER
17225: IFFALSE 17237
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_INT 3
17235: LESS
17236: AND
17237: IFFALSE 17294
// for i in result do
17239: LD_ADDR_VAR 0 5
17243: PUSH
17244: LD_VAR 0 4
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17292
// if GetTech ( i , side ) <> state then
17252: LD_VAR 0 5
17256: PPUSH
17257: LD_VAR 0 1
17261: PPUSH
17262: CALL_OW 321
17266: PUSH
17267: LD_VAR 0 3
17271: NONEQUAL
17272: IFFALSE 17290
// result := result diff i ;
17274: LD_ADDR_VAR 0 4
17278: PUSH
17279: LD_VAR 0 4
17283: PUSH
17284: LD_VAR 0 5
17288: DIFF
17289: ST_TO_ADDR
17290: GO 17249
17292: POP
17293: POP
// end ;
17294: LD_VAR 0 4
17298: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17299: LD_INT 0
17301: PPUSH
17302: PPUSH
17303: PPUSH
// result := true ;
17304: LD_ADDR_VAR 0 3
17308: PUSH
17309: LD_INT 1
17311: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17312: LD_ADDR_VAR 0 5
17316: PUSH
17317: LD_VAR 0 2
17321: PPUSH
17322: CALL_OW 480
17326: ST_TO_ADDR
// if not tmp then
17327: LD_VAR 0 5
17331: NOT
17332: IFFALSE 17336
// exit ;
17334: GO 17385
// for i in tmp do
17336: LD_ADDR_VAR 0 4
17340: PUSH
17341: LD_VAR 0 5
17345: PUSH
17346: FOR_IN
17347: IFFALSE 17383
// if GetTech ( i , side ) <> state_researched then
17349: LD_VAR 0 4
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 321
17363: PUSH
17364: LD_INT 2
17366: NONEQUAL
17367: IFFALSE 17381
// begin result := false ;
17369: LD_ADDR_VAR 0 3
17373: PUSH
17374: LD_INT 0
17376: ST_TO_ADDR
// exit ;
17377: POP
17378: POP
17379: GO 17385
// end ;
17381: GO 17346
17383: POP
17384: POP
// end ;
17385: LD_VAR 0 3
17389: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
17398: PPUSH
17399: PPUSH
17400: PPUSH
17401: PPUSH
17402: PPUSH
17403: PPUSH
17404: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17405: LD_VAR 0 1
17409: NOT
17410: IFTRUE 17427
17412: PUSH
17413: LD_VAR 0 1
17417: PPUSH
17418: CALL_OW 257
17422: PUSH
17423: LD_INT 9
17425: NONEQUAL
17426: OR
17427: IFFALSE 17431
// exit ;
17429: GO 18010
// side := GetSide ( unit ) ;
17431: LD_ADDR_VAR 0 9
17435: PUSH
17436: LD_VAR 0 1
17440: PPUSH
17441: CALL_OW 255
17445: ST_TO_ADDR
// tech_space := tech_spacanom ;
17446: LD_ADDR_VAR 0 12
17450: PUSH
17451: LD_INT 29
17453: ST_TO_ADDR
// tech_time := tech_taurad ;
17454: LD_ADDR_VAR 0 13
17458: PUSH
17459: LD_INT 28
17461: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17462: LD_ADDR_VAR 0 11
17466: PUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 310
17476: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17477: LD_VAR 0 11
17481: PPUSH
17482: CALL_OW 247
17486: PUSH
17487: LD_INT 2
17489: EQUAL
17490: IFFALSE 17494
// exit ;
17492: GO 18010
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17494: LD_ADDR_VAR 0 8
17498: PUSH
17499: LD_INT 81
17501: PUSH
17502: LD_VAR 0 9
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 3
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// if not tmp then
17537: LD_VAR 0 8
17541: NOT
17542: IFFALSE 17546
// exit ;
17544: GO 18010
// if in_unit then
17546: LD_VAR 0 11
17550: IFFALSE 17574
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17552: LD_ADDR_VAR 0 10
17556: PUSH
17557: LD_VAR 0 8
17561: PPUSH
17562: LD_VAR 0 11
17566: PPUSH
17567: CALL_OW 74
17571: ST_TO_ADDR
17572: GO 17594
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17574: LD_ADDR_VAR 0 10
17578: PUSH
17579: LD_VAR 0 8
17583: PPUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 74
17593: ST_TO_ADDR
// if not enemy then
17594: LD_VAR 0 10
17598: NOT
17599: IFFALSE 17603
// exit ;
17601: GO 18010
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17603: LD_VAR 0 11
17607: IFFALSE 17629
17609: PUSH
17610: LD_VAR 0 11
17614: PPUSH
17615: LD_VAR 0 10
17619: PPUSH
17620: CALL_OW 296
17624: PUSH
17625: LD_INT 13
17627: GREATER
17628: AND
17629: IFTRUE 17651
17631: PUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: LD_VAR 0 10
17641: PPUSH
17642: CALL_OW 296
17646: PUSH
17647: LD_INT 12
17649: GREATER
17650: OR
17651: IFFALSE 17655
// exit ;
17653: GO 18010
// missile := [ 1 ] ;
17655: LD_ADDR_VAR 0 14
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17666: LD_VAR 0 9
17670: PPUSH
17671: LD_VAR 0 12
17675: PPUSH
17676: CALL_OW 325
17680: IFFALSE 17709
// missile := Replace ( missile , missile + 1 , 2 ) ;
17682: LD_ADDR_VAR 0 14
17686: PUSH
17687: LD_VAR 0 14
17691: PPUSH
17692: LD_VAR 0 14
17696: PUSH
17697: LD_INT 1
17699: PLUS
17700: PPUSH
17701: LD_INT 2
17703: PPUSH
17704: CALL_OW 1
17708: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17709: LD_VAR 0 9
17713: PPUSH
17714: LD_VAR 0 13
17718: PPUSH
17719: CALL_OW 325
17723: IFFALSE 17747
17725: PUSH
17726: LD_VAR 0 10
17730: PPUSH
17731: CALL_OW 255
17735: PPUSH
17736: LD_VAR 0 13
17740: PPUSH
17741: CALL_OW 325
17745: NOT
17746: AND
17747: IFFALSE 17776
// missile := Replace ( missile , missile + 1 , 3 ) ;
17749: LD_ADDR_VAR 0 14
17753: PUSH
17754: LD_VAR 0 14
17758: PPUSH
17759: LD_VAR 0 14
17763: PUSH
17764: LD_INT 1
17766: PLUS
17767: PPUSH
17768: LD_INT 3
17770: PPUSH
17771: CALL_OW 1
17775: ST_TO_ADDR
// if missile < 2 then
17776: LD_VAR 0 14
17780: PUSH
17781: LD_INT 2
17783: LESS
17784: IFFALSE 17788
// exit ;
17786: GO 18010
// x := GetX ( enemy ) ;
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_VAR 0 10
17797: PPUSH
17798: CALL_OW 250
17802: ST_TO_ADDR
// y := GetY ( enemy ) ;
17803: LD_ADDR_VAR 0 5
17807: PUSH
17808: LD_VAR 0 10
17812: PPUSH
17813: CALL_OW 251
17817: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17818: LD_ADDR_VAR 0 6
17822: PUSH
17823: LD_VAR 0 4
17827: PUSH
17828: LD_INT 1
17830: NEG
17831: PPUSH
17832: LD_INT 1
17834: PPUSH
17835: CALL_OW 12
17839: PLUS
17840: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17841: LD_ADDR_VAR 0 7
17845: PUSH
17846: LD_VAR 0 5
17850: PUSH
17851: LD_INT 1
17853: NEG
17854: PPUSH
17855: LD_INT 1
17857: PPUSH
17858: CALL_OW 12
17862: PLUS
17863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17864: LD_VAR 0 6
17868: PPUSH
17869: LD_VAR 0 7
17873: PPUSH
17874: CALL_OW 488
17878: NOT
17879: IFFALSE 17901
// begin _x := x ;
17881: LD_ADDR_VAR 0 6
17885: PUSH
17886: LD_VAR 0 4
17890: ST_TO_ADDR
// _y := y ;
17891: LD_ADDR_VAR 0 7
17895: PUSH
17896: LD_VAR 0 5
17900: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17901: LD_ADDR_VAR 0 3
17905: PUSH
17906: LD_INT 1
17908: PPUSH
17909: LD_VAR 0 14
17913: PPUSH
17914: CALL_OW 12
17918: ST_TO_ADDR
// case i of 1 :
17919: LD_VAR 0 3
17923: PUSH
17924: LD_INT 1
17926: DOUBLE
17927: EQUAL
17928: IFTRUE 17932
17930: GO 17949
17932: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17933: LD_VAR 0 1
17937: PPUSH
17938: LD_VAR 0 10
17942: PPUSH
17943: CALL_OW 115
17947: GO 18010
17949: LD_INT 2
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 17979
17957: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_VAR 0 6
17967: PPUSH
17968: LD_VAR 0 7
17972: PPUSH
17973: CALL_OW 153
17977: GO 18010
17979: LD_INT 3
17981: DOUBLE
17982: EQUAL
17983: IFTRUE 17987
17985: GO 18009
17987: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17988: LD_VAR 0 1
17992: PPUSH
17993: LD_VAR 0 6
17997: PPUSH
17998: LD_VAR 0 7
18002: PPUSH
18003: CALL_OW 154
18007: GO 18010
18009: POP
// end ;
18010: LD_VAR 0 2
18014: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18015: LD_INT 0
18017: PPUSH
18018: PPUSH
18019: PPUSH
18020: PPUSH
18021: PPUSH
18022: PPUSH
// if not unit or not building then
18023: LD_VAR 0 1
18027: NOT
18028: IFTRUE 18037
18030: PUSH
18031: LD_VAR 0 2
18035: NOT
18036: OR
18037: IFFALSE 18041
// exit ;
18039: GO 18199
// x := GetX ( building ) ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_VAR 0 2
18050: PPUSH
18051: CALL_OW 250
18055: ST_TO_ADDR
// y := GetY ( building ) ;
18056: LD_ADDR_VAR 0 6
18060: PUSH
18061: LD_VAR 0 2
18065: PPUSH
18066: CALL_OW 251
18070: ST_TO_ADDR
// for i := 0 to 5 do
18071: LD_ADDR_VAR 0 4
18075: PUSH
18076: DOUBLE
18077: LD_INT 0
18079: DEC
18080: ST_TO_ADDR
18081: LD_INT 5
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18197
// begin _x := ShiftX ( x , i , 3 ) ;
18087: LD_ADDR_VAR 0 7
18091: PUSH
18092: LD_VAR 0 5
18096: PPUSH
18097: LD_VAR 0 4
18101: PPUSH
18102: LD_INT 3
18104: PPUSH
18105: CALL_OW 272
18109: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18110: LD_ADDR_VAR 0 8
18114: PUSH
18115: LD_VAR 0 6
18119: PPUSH
18120: LD_VAR 0 4
18124: PPUSH
18125: LD_INT 3
18127: PPUSH
18128: CALL_OW 273
18132: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18133: LD_VAR 0 7
18137: PPUSH
18138: LD_VAR 0 8
18142: PPUSH
18143: CALL_OW 488
18147: NOT
18148: IFFALSE 18152
// continue ;
18150: GO 18084
// if HexInfo ( _x , _y ) = 0 then
18152: LD_VAR 0 7
18156: PPUSH
18157: LD_VAR 0 8
18161: PPUSH
18162: CALL_OW 428
18166: PUSH
18167: LD_INT 0
18169: EQUAL
18170: IFFALSE 18195
// begin ComMoveXY ( unit , _x , _y ) ;
18172: LD_VAR 0 1
18176: PPUSH
18177: LD_VAR 0 7
18181: PPUSH
18182: LD_VAR 0 8
18186: PPUSH
18187: CALL_OW 111
// exit ;
18191: POP
18192: POP
18193: GO 18199
// end ; end ;
18195: GO 18084
18197: POP
18198: POP
// end ;
18199: LD_VAR 0 3
18203: RET
// export function ScanBase ( side , base_area ) ; begin
18204: LD_INT 0
18206: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18207: LD_ADDR_VAR 0 3
18211: PUSH
18212: LD_VAR 0 2
18216: PPUSH
18217: LD_INT 81
18219: PUSH
18220: LD_VAR 0 1
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 70
18233: ST_TO_ADDR
// end ;
18234: LD_VAR 0 3
18238: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
// result := false ;
18245: LD_ADDR_VAR 0 2
18249: PUSH
18250: LD_INT 0
18252: ST_TO_ADDR
// side := GetSide ( unit ) ;
18253: LD_ADDR_VAR 0 3
18257: PUSH
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 255
18267: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18268: LD_ADDR_VAR 0 4
18272: PUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 248
18282: ST_TO_ADDR
// case nat of 1 :
18283: LD_VAR 0 4
18287: PUSH
18288: LD_INT 1
18290: DOUBLE
18291: EQUAL
18292: IFTRUE 18296
18294: GO 18307
18296: POP
// tech := tech_lassight ; 2 :
18297: LD_ADDR_VAR 0 5
18301: PUSH
18302: LD_INT 12
18304: ST_TO_ADDR
18305: GO 18346
18307: LD_INT 2
18309: DOUBLE
18310: EQUAL
18311: IFTRUE 18315
18313: GO 18326
18315: POP
// tech := tech_mortar ; 3 :
18316: LD_ADDR_VAR 0 5
18320: PUSH
18321: LD_INT 41
18323: ST_TO_ADDR
18324: GO 18346
18326: LD_INT 3
18328: DOUBLE
18329: EQUAL
18330: IFTRUE 18334
18332: GO 18345
18334: POP
// tech := tech_bazooka ; end ;
18335: LD_ADDR_VAR 0 5
18339: PUSH
18340: LD_INT 44
18342: ST_TO_ADDR
18343: GO 18346
18345: POP
// if Researched ( side , tech ) then
18346: LD_VAR 0 3
18350: PPUSH
18351: LD_VAR 0 5
18355: PPUSH
18356: CALL_OW 325
18360: IFFALSE 18387
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18362: LD_ADDR_VAR 0 2
18366: PUSH
18367: LD_INT 5
18369: PUSH
18370: LD_INT 8
18372: PUSH
18373: LD_INT 9
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: LIST
18380: PUSH
18381: LD_VAR 0 4
18385: ARRAY
18386: ST_TO_ADDR
// end ;
18387: LD_VAR 0 2
18391: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18392: LD_INT 0
18394: PPUSH
18395: PPUSH
18396: PPUSH
// if not mines then
18397: LD_VAR 0 2
18401: NOT
18402: IFFALSE 18406
// exit ;
18404: GO 18550
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18406: LD_ADDR_VAR 0 5
18410: PUSH
18411: LD_INT 81
18413: PUSH
18414: LD_VAR 0 1
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 3
18425: PUSH
18426: LD_INT 21
18428: PUSH
18429: LD_INT 3
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PPUSH
18444: CALL_OW 69
18448: ST_TO_ADDR
// for i in mines do
18449: LD_ADDR_VAR 0 4
18453: PUSH
18454: LD_VAR 0 2
18458: PUSH
18459: FOR_IN
18460: IFFALSE 18548
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18462: LD_VAR 0 4
18466: PUSH
18467: LD_INT 1
18469: ARRAY
18470: PPUSH
18471: LD_VAR 0 4
18475: PUSH
18476: LD_INT 2
18478: ARRAY
18479: PPUSH
18480: CALL_OW 458
18484: NOT
18485: IFFALSE 18489
// continue ;
18487: GO 18459
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18489: LD_VAR 0 4
18493: PUSH
18494: LD_INT 1
18496: ARRAY
18497: PPUSH
18498: LD_VAR 0 4
18502: PUSH
18503: LD_INT 2
18505: ARRAY
18506: PPUSH
18507: CALL_OW 428
18511: PUSH
18512: LD_VAR 0 5
18516: IN
18517: IFFALSE 18546
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18519: LD_VAR 0 4
18523: PUSH
18524: LD_INT 1
18526: ARRAY
18527: PPUSH
18528: LD_VAR 0 4
18532: PUSH
18533: LD_INT 2
18535: ARRAY
18536: PPUSH
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL_OW 456
// end ;
18546: GO 18459
18548: POP
18549: POP
// end ;
18550: LD_VAR 0 3
18554: RET
// export function Count ( array ) ; begin
18555: LD_INT 0
18557: PPUSH
// result := array + 0 ;
18558: LD_ADDR_VAR 0 2
18562: PUSH
18563: LD_VAR 0 1
18567: PUSH
18568: LD_INT 0
18570: PLUS
18571: ST_TO_ADDR
// end ;
18572: LD_VAR 0 2
18576: RET
// export function IsEmpty ( building ) ; begin
18577: LD_INT 0
18579: PPUSH
// if not building then
18580: LD_VAR 0 1
18584: NOT
18585: IFFALSE 18589
// exit ;
18587: GO 18632
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_VAR 0 1
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_VAR 0 1
18606: PPUSH
18607: CALL_OW 255
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 58
18618: PUSH
18619: EMPTY
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: IN
18631: ST_TO_ADDR
// end ;
18632: LD_VAR 0 2
18636: RET
// export function IsNotFull ( building ) ; var places ; begin
18637: LD_INT 0
18639: PPUSH
18640: PPUSH
// if not building then
18641: LD_VAR 0 1
18645: NOT
18646: IFFALSE 18650
// exit ;
18648: GO 18678
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18650: LD_ADDR_VAR 0 2
18654: PUSH
18655: LD_VAR 0 1
18659: PPUSH
18660: LD_INT 3
18662: PUSH
18663: LD_INT 62
18665: PUSH
18666: EMPTY
18667: LIST
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PPUSH
18673: CALL_OW 72
18677: ST_TO_ADDR
// end ;
18678: LD_VAR 0 2
18682: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18683: LD_INT 0
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
// tmp := [ ] ;
18689: LD_ADDR_VAR 0 3
18693: PUSH
18694: EMPTY
18695: ST_TO_ADDR
// list := [ ] ;
18696: LD_ADDR_VAR 0 5
18700: PUSH
18701: EMPTY
18702: ST_TO_ADDR
// for i = 16 to 25 do
18703: LD_ADDR_VAR 0 4
18707: PUSH
18708: DOUBLE
18709: LD_INT 16
18711: DEC
18712: ST_TO_ADDR
18713: LD_INT 25
18715: PUSH
18716: FOR_TO
18717: IFFALSE 18790
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18719: LD_ADDR_VAR 0 3
18723: PUSH
18724: LD_VAR 0 3
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 255
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 91
18748: PUSH
18749: LD_VAR 0 1
18753: PUSH
18754: LD_INT 6
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: LD_VAR 0 4
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: ADD
18787: ST_TO_ADDR
18788: GO 18716
18790: POP
18791: POP
// for i = 1 to tmp do
18792: LD_ADDR_VAR 0 4
18796: PUSH
18797: DOUBLE
18798: LD_INT 1
18800: DEC
18801: ST_TO_ADDR
18802: LD_VAR 0 3
18806: PUSH
18807: FOR_TO
18808: IFFALSE 18896
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18810: LD_ADDR_VAR 0 5
18814: PUSH
18815: LD_VAR 0 5
18819: PUSH
18820: LD_VAR 0 3
18824: PUSH
18825: LD_VAR 0 4
18829: ARRAY
18830: PPUSH
18831: CALL_OW 266
18835: PUSH
18836: LD_VAR 0 3
18840: PUSH
18841: LD_VAR 0 4
18845: ARRAY
18846: PPUSH
18847: CALL_OW 250
18851: PUSH
18852: LD_VAR 0 3
18856: PUSH
18857: LD_VAR 0 4
18861: ARRAY
18862: PPUSH
18863: CALL_OW 251
18867: PUSH
18868: LD_VAR 0 3
18872: PUSH
18873: LD_VAR 0 4
18877: ARRAY
18878: PPUSH
18879: CALL_OW 254
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: PUSH
18890: EMPTY
18891: LIST
18892: ADD
18893: ST_TO_ADDR
18894: GO 18807
18896: POP
18897: POP
// result := list ;
18898: LD_ADDR_VAR 0 2
18902: PUSH
18903: LD_VAR 0 5
18907: ST_TO_ADDR
// end ;
18908: LD_VAR 0 2
18912: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18913: LD_INT 0
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
18921: PPUSH
// if not factory then
18922: LD_VAR 0 1
18926: NOT
18927: IFFALSE 18931
// exit ;
18929: GO 19534
// if control = control_apeman then
18931: LD_VAR 0 4
18935: PUSH
18936: LD_INT 5
18938: EQUAL
18939: IFFALSE 19048
// begin tmp := UnitsInside ( factory ) ;
18941: LD_ADDR_VAR 0 8
18945: PUSH
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 313
18955: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18956: LD_VAR 0 8
18960: PPUSH
18961: LD_INT 25
18963: PUSH
18964: LD_INT 12
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PPUSH
18971: CALL_OW 72
18975: NOT
18976: IFFALSE 18986
// control := control_manual ;
18978: LD_ADDR_VAR 0 4
18982: PUSH
18983: LD_INT 1
18985: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18986: LD_ADDR_VAR 0 8
18990: PUSH
18991: LD_VAR 0 1
18995: PPUSH
18996: CALL 18683 0 1
19000: ST_TO_ADDR
// if tmp then
19001: LD_VAR 0 8
19005: IFFALSE 19048
// begin for i in tmp do
19007: LD_ADDR_VAR 0 7
19011: PUSH
19012: LD_VAR 0 8
19016: PUSH
19017: FOR_IN
19018: IFFALSE 19046
// if i [ 1 ] = b_ext_radio then
19020: LD_VAR 0 7
19024: PUSH
19025: LD_INT 1
19027: ARRAY
19028: PUSH
19029: LD_INT 22
19031: EQUAL
19032: IFFALSE 19044
// begin control := control_remote ;
19034: LD_ADDR_VAR 0 4
19038: PUSH
19039: LD_INT 2
19041: ST_TO_ADDR
// break ;
19042: GO 19046
// end ;
19044: GO 19017
19046: POP
19047: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19048: LD_VAR 0 1
19052: PPUSH
19053: LD_VAR 0 2
19057: PPUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: LD_VAR 0 4
19067: PPUSH
19068: LD_VAR 0 5
19072: PPUSH
19073: CALL_OW 448
19077: IFFALSE 19112
// begin result := [ chassis , engine , control , weapon ] ;
19079: LD_ADDR_VAR 0 6
19083: PUSH
19084: LD_VAR 0 2
19088: PUSH
19089: LD_VAR 0 3
19093: PUSH
19094: LD_VAR 0 4
19098: PUSH
19099: LD_VAR 0 5
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: ST_TO_ADDR
// exit ;
19110: GO 19534
// end ; _chassis := AvailableChassisList ( factory ) ;
19112: LD_ADDR_VAR 0 9
19116: PUSH
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL_OW 475
19126: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19127: LD_ADDR_VAR 0 11
19131: PUSH
19132: LD_VAR 0 1
19136: PPUSH
19137: CALL_OW 476
19141: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19142: LD_ADDR_VAR 0 12
19146: PUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: CALL_OW 477
19156: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19157: LD_ADDR_VAR 0 10
19161: PUSH
19162: LD_VAR 0 1
19166: PPUSH
19167: CALL_OW 478
19171: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19172: LD_VAR 0 9
19176: NOT
19177: IFTRUE 19186
19179: PUSH
19180: LD_VAR 0 11
19184: NOT
19185: OR
19186: IFTRUE 19195
19188: PUSH
19189: LD_VAR 0 12
19193: NOT
19194: OR
19195: IFTRUE 19204
19197: PUSH
19198: LD_VAR 0 10
19202: NOT
19203: OR
19204: IFFALSE 19239
// begin result := [ chassis , engine , control , weapon ] ;
19206: LD_ADDR_VAR 0 6
19210: PUSH
19211: LD_VAR 0 2
19215: PUSH
19216: LD_VAR 0 3
19220: PUSH
19221: LD_VAR 0 4
19225: PUSH
19226: LD_VAR 0 5
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: ST_TO_ADDR
// exit ;
19237: GO 19534
// end ; if not chassis in _chassis then
19239: LD_VAR 0 2
19243: PUSH
19244: LD_VAR 0 9
19248: IN
19249: NOT
19250: IFFALSE 19276
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19252: LD_ADDR_VAR 0 2
19256: PUSH
19257: LD_VAR 0 9
19261: PUSH
19262: LD_INT 1
19264: PPUSH
19265: LD_VAR 0 9
19269: PPUSH
19270: CALL_OW 12
19274: ARRAY
19275: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19276: LD_VAR 0 2
19280: PPUSH
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL 19539 0 2
19290: NOT
19291: IFFALSE 19352
// repeat engine := _engine [ 1 ] ;
19293: LD_ADDR_VAR 0 3
19297: PUSH
19298: LD_VAR 0 11
19302: PUSH
19303: LD_INT 1
19305: ARRAY
19306: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19307: LD_ADDR_VAR 0 11
19311: PUSH
19312: LD_VAR 0 11
19316: PPUSH
19317: LD_INT 1
19319: PPUSH
19320: CALL_OW 3
19324: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: CALL 19539 0 2
19339: IFTRUE 19350
19341: PUSH
19342: LD_VAR 0 11
19346: PUSH
19347: EMPTY
19348: EQUAL
19349: OR
19350: IFFALSE 19293
// if not control in _control then
19352: LD_VAR 0 4
19356: PUSH
19357: LD_VAR 0 12
19361: IN
19362: NOT
19363: IFFALSE 19389
// control := _control [ rand ( 1 , _control ) ] ;
19365: LD_ADDR_VAR 0 4
19369: PUSH
19370: LD_VAR 0 12
19374: PUSH
19375: LD_INT 1
19377: PPUSH
19378: LD_VAR 0 12
19382: PPUSH
19383: CALL_OW 12
19387: ARRAY
19388: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19389: LD_VAR 0 2
19393: PPUSH
19394: LD_VAR 0 5
19398: PPUSH
19399: CALL 19761 0 2
19403: NOT
19404: IFFALSE 19465
// repeat weapon := _weapon [ 1 ] ;
19406: LD_ADDR_VAR 0 5
19410: PUSH
19411: LD_VAR 0 10
19415: PUSH
19416: LD_INT 1
19418: ARRAY
19419: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19420: LD_ADDR_VAR 0 10
19424: PUSH
19425: LD_VAR 0 10
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: CALL_OW 3
19437: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19438: LD_VAR 0 2
19442: PPUSH
19443: LD_VAR 0 5
19447: PPUSH
19448: CALL 19761 0 2
19452: IFTRUE 19463
19454: PUSH
19455: LD_VAR 0 10
19459: PUSH
19460: EMPTY
19461: EQUAL
19462: OR
19463: IFFALSE 19406
// result := [ ] ;
19465: LD_ADDR_VAR 0 6
19469: PUSH
19470: EMPTY
19471: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19472: LD_VAR 0 1
19476: PPUSH
19477: LD_VAR 0 2
19481: PPUSH
19482: LD_VAR 0 3
19486: PPUSH
19487: LD_VAR 0 4
19491: PPUSH
19492: LD_VAR 0 5
19496: PPUSH
19497: CALL_OW 448
19501: IFFALSE 19534
// result := [ chassis , engine , control , weapon ] ;
19503: LD_ADDR_VAR 0 6
19507: PUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_VAR 0 3
19517: PUSH
19518: LD_VAR 0 4
19522: PUSH
19523: LD_VAR 0 5
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: ST_TO_ADDR
// end ;
19534: LD_VAR 0 6
19538: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19539: LD_INT 0
19541: PPUSH
// if not chassis or not engine then
19542: LD_VAR 0 1
19546: NOT
19547: IFTRUE 19556
19549: PUSH
19550: LD_VAR 0 2
19554: NOT
19555: OR
19556: IFFALSE 19560
// exit ;
19558: GO 19756
// case engine of engine_solar :
19560: LD_VAR 0 2
19564: PUSH
19565: LD_INT 2
19567: DOUBLE
19568: EQUAL
19569: IFTRUE 19573
19571: GO 19611
19573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19574: LD_ADDR_VAR 0 3
19578: PUSH
19579: LD_INT 11
19581: PUSH
19582: LD_INT 12
19584: PUSH
19585: LD_INT 13
19587: PUSH
19588: LD_INT 14
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: LD_INT 2
19596: PUSH
19597: LD_INT 3
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: ST_TO_ADDR
19609: GO 19740
19611: LD_INT 1
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19681
19619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19620: LD_ADDR_VAR 0 3
19624: PUSH
19625: LD_INT 11
19627: PUSH
19628: LD_INT 12
19630: PUSH
19631: LD_INT 13
19633: PUSH
19634: LD_INT 14
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: LD_INT 21
19654: PUSH
19655: LD_INT 23
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_INT 24
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
19679: GO 19740
19681: LD_INT 3
19683: DOUBLE
19684: EQUAL
19685: IFTRUE 19689
19687: GO 19739
19689: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19690: LD_ADDR_VAR 0 3
19694: PUSH
19695: LD_INT 13
19697: PUSH
19698: LD_INT 14
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 3
19706: PUSH
19707: LD_INT 4
19709: PUSH
19710: LD_INT 5
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 22
19718: PUSH
19719: LD_INT 23
19721: PUSH
19722: LD_INT 24
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: ST_TO_ADDR
19737: GO 19740
19739: POP
// result := ( chassis in result ) ;
19740: LD_ADDR_VAR 0 3
19744: PUSH
19745: LD_VAR 0 1
19749: PUSH
19750: LD_VAR 0 3
19754: IN
19755: ST_TO_ADDR
// end ;
19756: LD_VAR 0 3
19760: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19761: LD_INT 0
19763: PPUSH
// if not chassis or not weapon then
19764: LD_VAR 0 1
19768: NOT
19769: IFTRUE 19778
19771: PUSH
19772: LD_VAR 0 2
19776: NOT
19777: OR
19778: IFFALSE 19782
// exit ;
19780: GO 20876
// case weapon of us_machine_gun :
19782: LD_VAR 0 2
19786: PUSH
19787: LD_INT 2
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 19825
19795: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19796: LD_ADDR_VAR 0 3
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 3
19809: PUSH
19810: LD_INT 4
19812: PUSH
19813: LD_INT 5
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: ST_TO_ADDR
19823: GO 20860
19825: LD_INT 3
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19863
19833: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19834: LD_ADDR_VAR 0 3
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 3
19847: PUSH
19848: LD_INT 4
19850: PUSH
19851: LD_INT 5
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: ST_TO_ADDR
19861: GO 20860
19863: LD_INT 11
19865: DOUBLE
19866: EQUAL
19867: IFTRUE 19871
19869: GO 19901
19871: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19872: LD_ADDR_VAR 0 3
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: LD_INT 2
19882: PUSH
19883: LD_INT 3
19885: PUSH
19886: LD_INT 4
19888: PUSH
19889: LD_INT 5
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: ST_TO_ADDR
19899: GO 20860
19901: LD_INT 4
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 19935
19909: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_INT 2
19917: PUSH
19918: LD_INT 3
19920: PUSH
19921: LD_INT 4
19923: PUSH
19924: LD_INT 5
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
19933: GO 20860
19935: LD_INT 5
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19969
19943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 3
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
19967: GO 20860
19969: LD_INT 9
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 20003
19977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19978: LD_ADDR_VAR 0 3
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: LD_INT 4
19991: PUSH
19992: LD_INT 5
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: ST_TO_ADDR
20001: GO 20860
20003: LD_INT 7
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20037
20011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: LD_INT 4
20025: PUSH
20026: LD_INT 5
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: ST_TO_ADDR
20035: GO 20860
20037: LD_INT 12
20039: DOUBLE
20040: EQUAL
20041: IFTRUE 20045
20043: GO 20071
20045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_INT 2
20053: PUSH
20054: LD_INT 3
20056: PUSH
20057: LD_INT 4
20059: PUSH
20060: LD_INT 5
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: ST_TO_ADDR
20069: GO 20860
20071: LD_INT 13
20073: DOUBLE
20074: EQUAL
20075: IFTRUE 20079
20077: GO 20105
20079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20080: LD_ADDR_VAR 0 3
20084: PUSH
20085: LD_INT 2
20087: PUSH
20088: LD_INT 3
20090: PUSH
20091: LD_INT 4
20093: PUSH
20094: LD_INT 5
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: ST_TO_ADDR
20103: GO 20860
20105: LD_INT 14
20107: DOUBLE
20108: EQUAL
20109: IFTRUE 20113
20111: GO 20131
20113: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20114: LD_ADDR_VAR 0 3
20118: PUSH
20119: LD_INT 4
20121: PUSH
20122: LD_INT 5
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: ST_TO_ADDR
20129: GO 20860
20131: LD_INT 6
20133: DOUBLE
20134: EQUAL
20135: IFTRUE 20139
20137: GO 20157
20139: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20140: LD_ADDR_VAR 0 3
20144: PUSH
20145: LD_INT 4
20147: PUSH
20148: LD_INT 5
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: ST_TO_ADDR
20155: GO 20860
20157: LD_INT 10
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20183
20165: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_INT 4
20173: PUSH
20174: LD_INT 5
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: ST_TO_ADDR
20181: GO 20860
20183: LD_INT 22
20185: DOUBLE
20186: EQUAL
20187: IFTRUE 20191
20189: GO 20217
20191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20192: LD_ADDR_VAR 0 3
20196: PUSH
20197: LD_INT 11
20199: PUSH
20200: LD_INT 12
20202: PUSH
20203: LD_INT 13
20205: PUSH
20206: LD_INT 14
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: ST_TO_ADDR
20215: GO 20860
20217: LD_INT 23
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20251
20225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_INT 11
20233: PUSH
20234: LD_INT 12
20236: PUSH
20237: LD_INT 13
20239: PUSH
20240: LD_INT 14
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: ST_TO_ADDR
20249: GO 20860
20251: LD_INT 24
20253: DOUBLE
20254: EQUAL
20255: IFTRUE 20259
20257: GO 20285
20259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20260: LD_ADDR_VAR 0 3
20264: PUSH
20265: LD_INT 11
20267: PUSH
20268: LD_INT 12
20270: PUSH
20271: LD_INT 13
20273: PUSH
20274: LD_INT 14
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: ST_TO_ADDR
20283: GO 20860
20285: LD_INT 30
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20319
20293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20294: LD_ADDR_VAR 0 3
20298: PUSH
20299: LD_INT 11
20301: PUSH
20302: LD_INT 12
20304: PUSH
20305: LD_INT 13
20307: PUSH
20308: LD_INT 14
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: ST_TO_ADDR
20317: GO 20860
20319: LD_INT 25
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20345
20327: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_INT 13
20335: PUSH
20336: LD_INT 14
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: ST_TO_ADDR
20343: GO 20860
20345: LD_INT 27
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20371
20353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20354: LD_ADDR_VAR 0 3
20358: PUSH
20359: LD_INT 13
20361: PUSH
20362: LD_INT 14
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: ST_TO_ADDR
20369: GO 20860
20371: LD_INT 92
20373: DOUBLE
20374: EQUAL
20375: IFTRUE 20379
20377: GO 20405
20379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_INT 11
20387: PUSH
20388: LD_INT 12
20390: PUSH
20391: LD_INT 13
20393: PUSH
20394: LD_INT 14
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: ST_TO_ADDR
20403: GO 20860
20405: LD_INT 28
20407: DOUBLE
20408: EQUAL
20409: IFTRUE 20413
20411: GO 20431
20413: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20414: LD_ADDR_VAR 0 3
20418: PUSH
20419: LD_INT 13
20421: PUSH
20422: LD_INT 14
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: ST_TO_ADDR
20429: GO 20860
20431: LD_INT 29
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20457
20439: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_INT 13
20447: PUSH
20448: LD_INT 14
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: ST_TO_ADDR
20455: GO 20860
20457: LD_INT 31
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20483
20465: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20466: LD_ADDR_VAR 0 3
20470: PUSH
20471: LD_INT 13
20473: PUSH
20474: LD_INT 14
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: ST_TO_ADDR
20481: GO 20860
20483: LD_INT 26
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20509
20491: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20492: LD_ADDR_VAR 0 3
20496: PUSH
20497: LD_INT 13
20499: PUSH
20500: LD_INT 14
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: ST_TO_ADDR
20507: GO 20860
20509: LD_INT 42
20511: DOUBLE
20512: EQUAL
20513: IFTRUE 20517
20515: GO 20543
20517: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20518: LD_ADDR_VAR 0 3
20522: PUSH
20523: LD_INT 21
20525: PUSH
20526: LD_INT 22
20528: PUSH
20529: LD_INT 23
20531: PUSH
20532: LD_INT 24
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: ST_TO_ADDR
20541: GO 20860
20543: LD_INT 43
20545: DOUBLE
20546: EQUAL
20547: IFTRUE 20551
20549: GO 20577
20551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20552: LD_ADDR_VAR 0 3
20556: PUSH
20557: LD_INT 21
20559: PUSH
20560: LD_INT 22
20562: PUSH
20563: LD_INT 23
20565: PUSH
20566: LD_INT 24
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: ST_TO_ADDR
20575: GO 20860
20577: LD_INT 44
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 20611
20585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: LD_INT 21
20593: PUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 23
20599: PUSH
20600: LD_INT 24
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: ST_TO_ADDR
20609: GO 20860
20611: LD_INT 45
20613: DOUBLE
20614: EQUAL
20615: IFTRUE 20619
20617: GO 20645
20619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20620: LD_ADDR_VAR 0 3
20624: PUSH
20625: LD_INT 21
20627: PUSH
20628: LD_INT 22
20630: PUSH
20631: LD_INT 23
20633: PUSH
20634: LD_INT 24
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: ST_TO_ADDR
20643: GO 20860
20645: LD_INT 49
20647: DOUBLE
20648: EQUAL
20649: IFTRUE 20653
20651: GO 20679
20653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20654: LD_ADDR_VAR 0 3
20658: PUSH
20659: LD_INT 21
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_INT 23
20667: PUSH
20668: LD_INT 24
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: ST_TO_ADDR
20677: GO 20860
20679: LD_INT 51
20681: DOUBLE
20682: EQUAL
20683: IFTRUE 20687
20685: GO 20713
20687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 23
20701: PUSH
20702: LD_INT 24
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: ST_TO_ADDR
20711: GO 20860
20713: LD_INT 52
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20747
20721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20722: LD_ADDR_VAR 0 3
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_INT 23
20735: PUSH
20736: LD_INT 24
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: ST_TO_ADDR
20745: GO 20860
20747: LD_INT 53
20749: DOUBLE
20750: EQUAL
20751: IFTRUE 20755
20753: GO 20773
20755: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20756: LD_ADDR_VAR 0 3
20760: PUSH
20761: LD_INT 23
20763: PUSH
20764: LD_INT 24
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: ST_TO_ADDR
20771: GO 20860
20773: LD_INT 46
20775: DOUBLE
20776: EQUAL
20777: IFTRUE 20781
20779: GO 20799
20781: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: LD_INT 23
20789: PUSH
20790: LD_INT 24
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: ST_TO_ADDR
20797: GO 20860
20799: LD_INT 47
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 20825
20807: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20808: LD_ADDR_VAR 0 3
20812: PUSH
20813: LD_INT 23
20815: PUSH
20816: LD_INT 24
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: ST_TO_ADDR
20823: GO 20860
20825: LD_INT 98
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20859
20833: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20834: LD_ADDR_VAR 0 3
20838: PUSH
20839: LD_INT 21
20841: PUSH
20842: LD_INT 22
20844: PUSH
20845: LD_INT 23
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
20857: GO 20860
20859: POP
// result := ( chassis in result ) ;
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_VAR 0 1
20869: PUSH
20870: LD_VAR 0 3
20874: IN
20875: ST_TO_ADDR
// end ;
20876: LD_VAR 0 3
20880: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20881: LD_INT 0
20883: PPUSH
20884: PPUSH
20885: PPUSH
20886: PPUSH
20887: PPUSH
20888: PPUSH
20889: PPUSH
// result := array ;
20890: LD_ADDR_VAR 0 5
20894: PUSH
20895: LD_VAR 0 1
20899: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20900: LD_VAR 0 1
20904: NOT
20905: IFTRUE 20914
20907: PUSH
20908: LD_VAR 0 2
20912: NOT
20913: OR
20914: IFTRUE 20923
20916: PUSH
20917: LD_VAR 0 3
20921: NOT
20922: OR
20923: IFTRUE 20937
20925: PUSH
20926: LD_VAR 0 2
20930: PUSH
20931: LD_VAR 0 1
20935: GREATER
20936: OR
20937: IFTRUE 20951
20939: PUSH
20940: LD_VAR 0 3
20944: PUSH
20945: LD_VAR 0 1
20949: GREATER
20950: OR
20951: IFFALSE 20955
// exit ;
20953: GO 21251
// if direction then
20955: LD_VAR 0 4
20959: IFFALSE 21023
// begin d := 1 ;
20961: LD_ADDR_VAR 0 9
20965: PUSH
20966: LD_INT 1
20968: ST_TO_ADDR
// if i_from > i_to then
20969: LD_VAR 0 2
20973: PUSH
20974: LD_VAR 0 3
20978: GREATER
20979: IFFALSE 21005
// length := ( array - i_from ) + i_to else
20981: LD_ADDR_VAR 0 11
20985: PUSH
20986: LD_VAR 0 1
20990: PUSH
20991: LD_VAR 0 2
20995: MINUS
20996: PUSH
20997: LD_VAR 0 3
21001: PLUS
21002: ST_TO_ADDR
21003: GO 21021
// length := i_to - i_from ;
21005: LD_ADDR_VAR 0 11
21009: PUSH
21010: LD_VAR 0 3
21014: PUSH
21015: LD_VAR 0 2
21019: MINUS
21020: ST_TO_ADDR
// end else
21021: GO 21084
// begin d := - 1 ;
21023: LD_ADDR_VAR 0 9
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: ST_TO_ADDR
// if i_from > i_to then
21032: LD_VAR 0 2
21036: PUSH
21037: LD_VAR 0 3
21041: GREATER
21042: IFFALSE 21062
// length := i_from - i_to else
21044: LD_ADDR_VAR 0 11
21048: PUSH
21049: LD_VAR 0 2
21053: PUSH
21054: LD_VAR 0 3
21058: MINUS
21059: ST_TO_ADDR
21060: GO 21084
// length := ( array - i_to ) + i_from ;
21062: LD_ADDR_VAR 0 11
21066: PUSH
21067: LD_VAR 0 1
21071: PUSH
21072: LD_VAR 0 3
21076: MINUS
21077: PUSH
21078: LD_VAR 0 2
21082: PLUS
21083: ST_TO_ADDR
// end ; if not length then
21084: LD_VAR 0 11
21088: NOT
21089: IFFALSE 21093
// exit ;
21091: GO 21251
// tmp := array ;
21093: LD_ADDR_VAR 0 10
21097: PUSH
21098: LD_VAR 0 1
21102: ST_TO_ADDR
// for i = 1 to length do
21103: LD_ADDR_VAR 0 6
21107: PUSH
21108: DOUBLE
21109: LD_INT 1
21111: DEC
21112: ST_TO_ADDR
21113: LD_VAR 0 11
21117: PUSH
21118: FOR_TO
21119: IFFALSE 21239
// begin for j = 1 to array do
21121: LD_ADDR_VAR 0 7
21125: PUSH
21126: DOUBLE
21127: LD_INT 1
21129: DEC
21130: ST_TO_ADDR
21131: LD_VAR 0 1
21135: PUSH
21136: FOR_TO
21137: IFFALSE 21225
// begin k := j + d ;
21139: LD_ADDR_VAR 0 8
21143: PUSH
21144: LD_VAR 0 7
21148: PUSH
21149: LD_VAR 0 9
21153: PLUS
21154: ST_TO_ADDR
// if k > array then
21155: LD_VAR 0 8
21159: PUSH
21160: LD_VAR 0 1
21164: GREATER
21165: IFFALSE 21175
// k := 1 ;
21167: LD_ADDR_VAR 0 8
21171: PUSH
21172: LD_INT 1
21174: ST_TO_ADDR
// if not k then
21175: LD_VAR 0 8
21179: NOT
21180: IFFALSE 21192
// k := array ;
21182: LD_ADDR_VAR 0 8
21186: PUSH
21187: LD_VAR 0 1
21191: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21192: LD_ADDR_VAR 0 10
21196: PUSH
21197: LD_VAR 0 10
21201: PPUSH
21202: LD_VAR 0 8
21206: PPUSH
21207: LD_VAR 0 1
21211: PUSH
21212: LD_VAR 0 7
21216: ARRAY
21217: PPUSH
21218: CALL_OW 1
21222: ST_TO_ADDR
// end ;
21223: GO 21136
21225: POP
21226: POP
// array := tmp ;
21227: LD_ADDR_VAR 0 1
21231: PUSH
21232: LD_VAR 0 10
21236: ST_TO_ADDR
// end ;
21237: GO 21118
21239: POP
21240: POP
// result := array ;
21241: LD_ADDR_VAR 0 5
21245: PUSH
21246: LD_VAR 0 1
21250: ST_TO_ADDR
// end ;
21251: LD_VAR 0 5
21255: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21256: LD_INT 0
21258: PPUSH
21259: PPUSH
// result := 0 ;
21260: LD_ADDR_VAR 0 3
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// if not array or not value in array then
21268: LD_VAR 0 1
21272: NOT
21273: IFTRUE 21288
21275: PUSH
21276: LD_VAR 0 2
21280: PUSH
21281: LD_VAR 0 1
21285: IN
21286: NOT
21287: OR
21288: IFFALSE 21292
// exit ;
21290: GO 21346
// for i = 1 to array do
21292: LD_ADDR_VAR 0 4
21296: PUSH
21297: DOUBLE
21298: LD_INT 1
21300: DEC
21301: ST_TO_ADDR
21302: LD_VAR 0 1
21306: PUSH
21307: FOR_TO
21308: IFFALSE 21344
// if value = array [ i ] then
21310: LD_VAR 0 2
21314: PUSH
21315: LD_VAR 0 1
21319: PUSH
21320: LD_VAR 0 4
21324: ARRAY
21325: EQUAL
21326: IFFALSE 21342
// begin result := i ;
21328: LD_ADDR_VAR 0 3
21332: PUSH
21333: LD_VAR 0 4
21337: ST_TO_ADDR
// exit ;
21338: POP
21339: POP
21340: GO 21346
// end ;
21342: GO 21307
21344: POP
21345: POP
// end ;
21346: LD_VAR 0 3
21350: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21351: LD_INT 0
21353: PPUSH
// vc_chassis := chassis ;
21354: LD_ADDR_OWVAR 37
21358: PUSH
21359: LD_VAR 0 1
21363: ST_TO_ADDR
// vc_engine := engine ;
21364: LD_ADDR_OWVAR 39
21368: PUSH
21369: LD_VAR 0 2
21373: ST_TO_ADDR
// vc_control := control ;
21374: LD_ADDR_OWVAR 38
21378: PUSH
21379: LD_VAR 0 3
21383: ST_TO_ADDR
// vc_weapon := weapon ;
21384: LD_ADDR_OWVAR 40
21388: PUSH
21389: LD_VAR 0 4
21393: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21394: LD_ADDR_OWVAR 41
21398: PUSH
21399: LD_VAR 0 5
21403: ST_TO_ADDR
// end ;
21404: LD_VAR 0 6
21408: RET
// export function WantPlant ( unit ) ; var task ; begin
21409: LD_INT 0
21411: PPUSH
21412: PPUSH
// result := false ;
21413: LD_ADDR_VAR 0 2
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21421: LD_ADDR_VAR 0 3
21425: PUSH
21426: LD_VAR 0 1
21430: PPUSH
21431: CALL_OW 437
21435: ST_TO_ADDR
// if task then
21436: LD_VAR 0 3
21440: IFFALSE 21468
// if task [ 1 ] [ 1 ] = p then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 1
21449: ARRAY
21450: PUSH
21451: LD_INT 1
21453: ARRAY
21454: PUSH
21455: LD_STRING p
21457: EQUAL
21458: IFFALSE 21468
// result := true ;
21460: LD_ADDR_VAR 0 2
21464: PUSH
21465: LD_INT 1
21467: ST_TO_ADDR
// end ;
21468: LD_VAR 0 2
21472: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21473: LD_INT 0
21475: PPUSH
21476: PPUSH
21477: PPUSH
21478: PPUSH
// if pos < 1 then
21479: LD_VAR 0 2
21483: PUSH
21484: LD_INT 1
21486: LESS
21487: IFFALSE 21491
// exit ;
21489: GO 21794
// if pos = 1 then
21491: LD_VAR 0 2
21495: PUSH
21496: LD_INT 1
21498: EQUAL
21499: IFFALSE 21532
// result := Replace ( arr , pos [ 1 ] , value ) else
21501: LD_ADDR_VAR 0 4
21505: PUSH
21506: LD_VAR 0 1
21510: PPUSH
21511: LD_VAR 0 2
21515: PUSH
21516: LD_INT 1
21518: ARRAY
21519: PPUSH
21520: LD_VAR 0 3
21524: PPUSH
21525: CALL_OW 1
21529: ST_TO_ADDR
21530: GO 21794
// begin tmp := arr ;
21532: LD_ADDR_VAR 0 6
21536: PUSH
21537: LD_VAR 0 1
21541: ST_TO_ADDR
// s_arr := [ tmp ] ;
21542: LD_ADDR_VAR 0 7
21546: PUSH
21547: LD_VAR 0 6
21551: PUSH
21552: EMPTY
21553: LIST
21554: ST_TO_ADDR
// for i = 1 to pos - 1 do
21555: LD_ADDR_VAR 0 5
21559: PUSH
21560: DOUBLE
21561: LD_INT 1
21563: DEC
21564: ST_TO_ADDR
21565: LD_VAR 0 2
21569: PUSH
21570: LD_INT 1
21572: MINUS
21573: PUSH
21574: FOR_TO
21575: IFFALSE 21620
// begin tmp := tmp [ pos [ i ] ] ;
21577: LD_ADDR_VAR 0 6
21581: PUSH
21582: LD_VAR 0 6
21586: PUSH
21587: LD_VAR 0 2
21591: PUSH
21592: LD_VAR 0 5
21596: ARRAY
21597: ARRAY
21598: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21599: LD_ADDR_VAR 0 7
21603: PUSH
21604: LD_VAR 0 7
21608: PUSH
21609: LD_VAR 0 6
21613: PUSH
21614: EMPTY
21615: LIST
21616: ADD
21617: ST_TO_ADDR
// end ;
21618: GO 21574
21620: POP
21621: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21622: LD_ADDR_VAR 0 6
21626: PUSH
21627: LD_VAR 0 6
21631: PPUSH
21632: LD_VAR 0 2
21636: PUSH
21637: LD_VAR 0 2
21641: ARRAY
21642: PPUSH
21643: LD_VAR 0 3
21647: PPUSH
21648: CALL_OW 1
21652: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21653: LD_ADDR_VAR 0 7
21657: PUSH
21658: LD_VAR 0 7
21662: PPUSH
21663: LD_VAR 0 7
21667: PPUSH
21668: LD_VAR 0 6
21672: PPUSH
21673: CALL_OW 1
21677: ST_TO_ADDR
// for i = s_arr downto 2 do
21678: LD_ADDR_VAR 0 5
21682: PUSH
21683: DOUBLE
21684: LD_VAR 0 7
21688: INC
21689: ST_TO_ADDR
21690: LD_INT 2
21692: PUSH
21693: FOR_DOWNTO
21694: IFFALSE 21778
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21696: LD_ADDR_VAR 0 6
21700: PUSH
21701: LD_VAR 0 7
21705: PUSH
21706: LD_VAR 0 5
21710: PUSH
21711: LD_INT 1
21713: MINUS
21714: ARRAY
21715: PPUSH
21716: LD_VAR 0 2
21720: PUSH
21721: LD_VAR 0 5
21725: PUSH
21726: LD_INT 1
21728: MINUS
21729: ARRAY
21730: PPUSH
21731: LD_VAR 0 7
21735: PUSH
21736: LD_VAR 0 5
21740: ARRAY
21741: PPUSH
21742: CALL_OW 1
21746: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21747: LD_ADDR_VAR 0 7
21751: PUSH
21752: LD_VAR 0 7
21756: PPUSH
21757: LD_VAR 0 5
21761: PUSH
21762: LD_INT 1
21764: MINUS
21765: PPUSH
21766: LD_VAR 0 6
21770: PPUSH
21771: CALL_OW 1
21775: ST_TO_ADDR
// end ;
21776: GO 21693
21778: POP
21779: POP
// result := s_arr [ 1 ] ;
21780: LD_ADDR_VAR 0 4
21784: PUSH
21785: LD_VAR 0 7
21789: PUSH
21790: LD_INT 1
21792: ARRAY
21793: ST_TO_ADDR
// end ; end ;
21794: LD_VAR 0 4
21798: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21799: LD_INT 0
21801: PPUSH
21802: PPUSH
// if not list then
21803: LD_VAR 0 1
21807: NOT
21808: IFFALSE 21812
// exit ;
21810: GO 21903
// i := list [ pos1 ] ;
21812: LD_ADDR_VAR 0 5
21816: PUSH
21817: LD_VAR 0 1
21821: PUSH
21822: LD_VAR 0 2
21826: ARRAY
21827: ST_TO_ADDR
// if not i then
21828: LD_VAR 0 5
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21903
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 1
21846: PPUSH
21847: LD_VAR 0 2
21851: PPUSH
21852: LD_VAR 0 1
21856: PUSH
21857: LD_VAR 0 3
21861: ARRAY
21862: PPUSH
21863: CALL_OW 1
21867: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21868: LD_ADDR_VAR 0 1
21872: PUSH
21873: LD_VAR 0 1
21877: PPUSH
21878: LD_VAR 0 3
21882: PPUSH
21883: LD_VAR 0 5
21887: PPUSH
21888: CALL_OW 1
21892: ST_TO_ADDR
// result := list ;
21893: LD_ADDR_VAR 0 4
21897: PUSH
21898: LD_VAR 0 1
21902: ST_TO_ADDR
// end ;
21903: LD_VAR 0 4
21907: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21908: LD_INT 0
21910: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21911: LD_ADDR_VAR 0 5
21915: PUSH
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL_OW 250
21925: PPUSH
21926: LD_VAR 0 1
21930: PPUSH
21931: CALL_OW 251
21935: PPUSH
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: LD_VAR 0 4
21950: PPUSH
21951: CALL 22333 0 5
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 5
21960: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
// if not list or not unit then
21967: LD_VAR 0 2
21971: NOT
21972: IFTRUE 21981
21974: PUSH
21975: LD_VAR 0 1
21979: NOT
21980: OR
21981: IFFALSE 21985
// exit ;
21983: GO 22328
// result := [ ] ;
21985: LD_ADDR_VAR 0 5
21989: PUSH
21990: EMPTY
21991: ST_TO_ADDR
// for i in list do
21992: LD_ADDR_VAR 0 6
21996: PUSH
21997: LD_VAR 0 2
22001: PUSH
22002: FOR_IN
22003: IFFALSE 22221
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22005: LD_ADDR_VAR 0 8
22009: PUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_VAR 0 6
22019: PUSH
22020: LD_INT 1
22022: ARRAY
22023: PPUSH
22024: LD_VAR 0 6
22028: PUSH
22029: LD_INT 2
22031: ARRAY
22032: PPUSH
22033: CALL_OW 297
22037: ST_TO_ADDR
// if not Count ( result ) then
22038: LD_VAR 0 5
22042: PPUSH
22043: CALL 18555 0 1
22047: NOT
22048: IFFALSE 22081
// begin result := Join ( result , [ i , tmp ] ) ;
22050: LD_ADDR_VAR 0 5
22054: PUSH
22055: LD_VAR 0 5
22059: PPUSH
22060: LD_VAR 0 6
22064: PUSH
22065: LD_VAR 0 8
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PPUSH
22074: CALL 54531 0 2
22078: ST_TO_ADDR
// continue ;
22079: GO 22002
// end ; if result [ result ] [ 2 ] <= tmp then
22081: LD_VAR 0 5
22085: PUSH
22086: LD_VAR 0 5
22090: ARRAY
22091: PUSH
22092: LD_INT 2
22094: ARRAY
22095: PUSH
22096: LD_VAR 0 8
22100: LESSEQUAL
22101: IFFALSE 22134
// result := Join ( result , [ i , tmp ] ) else
22103: LD_ADDR_VAR 0 5
22107: PUSH
22108: LD_VAR 0 5
22112: PPUSH
22113: LD_VAR 0 6
22117: PUSH
22118: LD_VAR 0 8
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PPUSH
22127: CALL 54531 0 2
22131: ST_TO_ADDR
22132: GO 22219
// begin for j := 1 to Count ( result ) do
22134: LD_ADDR_VAR 0 7
22138: PUSH
22139: DOUBLE
22140: LD_INT 1
22142: DEC
22143: ST_TO_ADDR
22144: LD_VAR 0 5
22148: PPUSH
22149: CALL 18555 0 1
22153: PUSH
22154: FOR_TO
22155: IFFALSE 22217
// begin if tmp < result [ j ] [ 2 ] then
22157: LD_VAR 0 8
22161: PUSH
22162: LD_VAR 0 5
22166: PUSH
22167: LD_VAR 0 7
22171: ARRAY
22172: PUSH
22173: LD_INT 2
22175: ARRAY
22176: LESS
22177: IFFALSE 22215
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22179: LD_ADDR_VAR 0 5
22183: PUSH
22184: LD_VAR 0 5
22188: PPUSH
22189: LD_VAR 0 7
22193: PPUSH
22194: LD_VAR 0 6
22198: PUSH
22199: LD_VAR 0 8
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 2
22212: ST_TO_ADDR
// break ;
22213: GO 22217
// end ; end ;
22215: GO 22154
22217: POP
22218: POP
// end ; end ;
22219: GO 22002
22221: POP
22222: POP
// if result and not asc then
22223: LD_VAR 0 5
22227: IFFALSE 22236
22229: PUSH
22230: LD_VAR 0 3
22234: NOT
22235: AND
22236: IFFALSE 22253
// result := ReverseArray ( result ) ;
22238: LD_ADDR_VAR 0 5
22242: PUSH
22243: LD_VAR 0 5
22247: PPUSH
22248: CALL 49611 0 1
22252: ST_TO_ADDR
// tmp := [ ] ;
22253: LD_ADDR_VAR 0 8
22257: PUSH
22258: EMPTY
22259: ST_TO_ADDR
// if mode then
22260: LD_VAR 0 4
22264: IFFALSE 22328
// begin for i := 1 to result do
22266: LD_ADDR_VAR 0 6
22270: PUSH
22271: DOUBLE
22272: LD_INT 1
22274: DEC
22275: ST_TO_ADDR
22276: LD_VAR 0 5
22280: PUSH
22281: FOR_TO
22282: IFFALSE 22316
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22284: LD_ADDR_VAR 0 8
22288: PUSH
22289: LD_VAR 0 8
22293: PPUSH
22294: LD_VAR 0 5
22298: PUSH
22299: LD_VAR 0 6
22303: ARRAY
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: PPUSH
22309: CALL 54531 0 2
22313: ST_TO_ADDR
22314: GO 22281
22316: POP
22317: POP
// result := tmp ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_VAR 0 8
22327: ST_TO_ADDR
// end ; end ;
22328: LD_VAR 0 5
22332: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22333: LD_INT 0
22335: PPUSH
22336: PPUSH
22337: PPUSH
22338: PPUSH
// if not list then
22339: LD_VAR 0 3
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22738
// result := [ ] ;
22348: LD_ADDR_VAR 0 6
22352: PUSH
22353: EMPTY
22354: ST_TO_ADDR
// for i in list do
22355: LD_ADDR_VAR 0 7
22359: PUSH
22360: LD_VAR 0 3
22364: PUSH
22365: FOR_IN
22366: IFFALSE 22568
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22368: LD_ADDR_VAR 0 9
22372: PUSH
22373: LD_VAR 0 7
22377: PPUSH
22378: LD_VAR 0 1
22382: PPUSH
22383: LD_VAR 0 2
22387: PPUSH
22388: CALL_OW 297
22392: ST_TO_ADDR
// if not result then
22393: LD_VAR 0 6
22397: NOT
22398: IFFALSE 22424
// result := [ [ i , tmp ] ] else
22400: LD_ADDR_VAR 0 6
22404: PUSH
22405: LD_VAR 0 7
22409: PUSH
22410: LD_VAR 0 9
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: ST_TO_ADDR
22422: GO 22566
// begin if result [ result ] [ 2 ] <= tmp then
22424: LD_VAR 0 6
22428: PUSH
22429: LD_VAR 0 6
22433: ARRAY
22434: PUSH
22435: LD_INT 2
22437: ARRAY
22438: PUSH
22439: LD_VAR 0 9
22443: LESSEQUAL
22444: IFFALSE 22486
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22446: LD_ADDR_VAR 0 6
22450: PUSH
22451: LD_VAR 0 6
22455: PPUSH
22456: LD_VAR 0 6
22460: PUSH
22461: LD_INT 1
22463: PLUS
22464: PPUSH
22465: LD_VAR 0 7
22469: PUSH
22470: LD_VAR 0 9
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PPUSH
22479: CALL_OW 2
22483: ST_TO_ADDR
22484: GO 22566
// for j := 1 to result do
22486: LD_ADDR_VAR 0 8
22490: PUSH
22491: DOUBLE
22492: LD_INT 1
22494: DEC
22495: ST_TO_ADDR
22496: LD_VAR 0 6
22500: PUSH
22501: FOR_TO
22502: IFFALSE 22564
// begin if tmp < result [ j ] [ 2 ] then
22504: LD_VAR 0 9
22508: PUSH
22509: LD_VAR 0 6
22513: PUSH
22514: LD_VAR 0 8
22518: ARRAY
22519: PUSH
22520: LD_INT 2
22522: ARRAY
22523: LESS
22524: IFFALSE 22562
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22526: LD_ADDR_VAR 0 6
22530: PUSH
22531: LD_VAR 0 6
22535: PPUSH
22536: LD_VAR 0 8
22540: PPUSH
22541: LD_VAR 0 7
22545: PUSH
22546: LD_VAR 0 9
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PPUSH
22555: CALL_OW 2
22559: ST_TO_ADDR
// break ;
22560: GO 22564
// end ; end ;
22562: GO 22501
22564: POP
22565: POP
// end ; end ;
22566: GO 22365
22568: POP
22569: POP
// if result and not asc then
22570: LD_VAR 0 6
22574: IFFALSE 22583
22576: PUSH
22577: LD_VAR 0 4
22581: NOT
22582: AND
22583: IFFALSE 22658
// begin tmp := result ;
22585: LD_ADDR_VAR 0 9
22589: PUSH
22590: LD_VAR 0 6
22594: ST_TO_ADDR
// for i = tmp downto 1 do
22595: LD_ADDR_VAR 0 7
22599: PUSH
22600: DOUBLE
22601: LD_VAR 0 9
22605: INC
22606: ST_TO_ADDR
22607: LD_INT 1
22609: PUSH
22610: FOR_DOWNTO
22611: IFFALSE 22656
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22613: LD_ADDR_VAR 0 6
22617: PUSH
22618: LD_VAR 0 6
22622: PPUSH
22623: LD_VAR 0 9
22627: PUSH
22628: LD_VAR 0 7
22632: MINUS
22633: PUSH
22634: LD_INT 1
22636: PLUS
22637: PPUSH
22638: LD_VAR 0 9
22642: PUSH
22643: LD_VAR 0 7
22647: ARRAY
22648: PPUSH
22649: CALL_OW 1
22653: ST_TO_ADDR
22654: GO 22610
22656: POP
22657: POP
// end ; tmp := [ ] ;
22658: LD_ADDR_VAR 0 9
22662: PUSH
22663: EMPTY
22664: ST_TO_ADDR
// if mode then
22665: LD_VAR 0 5
22669: IFFALSE 22738
// begin for i = 1 to result do
22671: LD_ADDR_VAR 0 7
22675: PUSH
22676: DOUBLE
22677: LD_INT 1
22679: DEC
22680: ST_TO_ADDR
22681: LD_VAR 0 6
22685: PUSH
22686: FOR_TO
22687: IFFALSE 22726
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22689: LD_ADDR_VAR 0 9
22693: PUSH
22694: LD_VAR 0 9
22698: PPUSH
22699: LD_VAR 0 7
22703: PPUSH
22704: LD_VAR 0 6
22708: PUSH
22709: LD_VAR 0 7
22713: ARRAY
22714: PUSH
22715: LD_INT 1
22717: ARRAY
22718: PPUSH
22719: CALL_OW 1
22723: ST_TO_ADDR
22724: GO 22686
22726: POP
22727: POP
// result := tmp ;
22728: LD_ADDR_VAR 0 6
22732: PUSH
22733: LD_VAR 0 9
22737: ST_TO_ADDR
// end ; end ;
22738: LD_VAR 0 6
22742: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22743: LD_INT 0
22745: PPUSH
22746: PPUSH
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22751: LD_ADDR_VAR 0 5
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: LD_INT 0
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: EMPTY
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: ST_TO_ADDR
// if not x or not y then
22773: LD_VAR 0 2
22777: NOT
22778: IFTRUE 22787
22780: PUSH
22781: LD_VAR 0 3
22785: NOT
22786: OR
22787: IFFALSE 22791
// exit ;
22789: GO 24447
// if not range then
22791: LD_VAR 0 4
22795: NOT
22796: IFFALSE 22806
// range := 10 ;
22798: LD_ADDR_VAR 0 4
22802: PUSH
22803: LD_INT 10
22805: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22806: LD_ADDR_VAR 0 8
22810: PUSH
22811: LD_INT 81
22813: PUSH
22814: LD_VAR 0 1
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 92
22825: PUSH
22826: LD_VAR 0 2
22830: PUSH
22831: LD_VAR 0 3
22835: PUSH
22836: LD_VAR 0 4
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: LD_INT 21
22852: PUSH
22853: LD_INT 3
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: PPUSH
22869: CALL_OW 69
22873: ST_TO_ADDR
// if not tmp then
22874: LD_VAR 0 8
22878: NOT
22879: IFFALSE 22883
// exit ;
22881: GO 24447
// for i in tmp do
22883: LD_ADDR_VAR 0 6
22887: PUSH
22888: LD_VAR 0 8
22892: PUSH
22893: FOR_IN
22894: IFFALSE 24422
// begin points := [ 0 , 0 , 0 ] ;
22896: LD_ADDR_VAR 0 9
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: ST_TO_ADDR
// bpoints := 1 ;
22915: LD_ADDR_VAR 0 10
22919: PUSH
22920: LD_INT 1
22922: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22923: LD_VAR 0 6
22927: PPUSH
22928: CALL_OW 247
22932: PUSH
22933: LD_INT 1
22935: DOUBLE
22936: EQUAL
22937: IFTRUE 22941
22939: GO 23523
22941: POP
// begin if GetClass ( i ) = 1 then
22942: LD_VAR 0 6
22946: PPUSH
22947: CALL_OW 257
22951: PUSH
22952: LD_INT 1
22954: EQUAL
22955: IFFALSE 22976
// points := [ 10 , 5 , 3 ] ;
22957: LD_ADDR_VAR 0 9
22961: PUSH
22962: LD_INT 10
22964: PUSH
22965: LD_INT 5
22967: PUSH
22968: LD_INT 3
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22976: LD_VAR 0 6
22980: PPUSH
22981: CALL_OW 257
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: LD_INT 4
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: IN
23000: IFFALSE 23021
// points := [ 3 , 2 , 1 ] ;
23002: LD_ADDR_VAR 0 9
23006: PUSH
23007: LD_INT 3
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23021: LD_VAR 0 6
23025: PPUSH
23026: CALL_OW 257
23030: PUSH
23031: LD_INT 5
23033: EQUAL
23034: IFFALSE 23055
// points := [ 130 , 5 , 2 ] ;
23036: LD_ADDR_VAR 0 9
23040: PUSH
23041: LD_INT 130
23043: PUSH
23044: LD_INT 5
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23055: LD_VAR 0 6
23059: PPUSH
23060: CALL_OW 257
23064: PUSH
23065: LD_INT 8
23067: EQUAL
23068: IFFALSE 23089
// points := [ 35 , 35 , 30 ] ;
23070: LD_ADDR_VAR 0 9
23074: PUSH
23075: LD_INT 35
23077: PUSH
23078: LD_INT 35
23080: PUSH
23081: LD_INT 30
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: LIST
23088: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23089: LD_VAR 0 6
23093: PPUSH
23094: CALL_OW 257
23098: PUSH
23099: LD_INT 9
23101: EQUAL
23102: IFFALSE 23123
// points := [ 20 , 55 , 40 ] ;
23104: LD_ADDR_VAR 0 9
23108: PUSH
23109: LD_INT 20
23111: PUSH
23112: LD_INT 55
23114: PUSH
23115: LD_INT 40
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23123: LD_VAR 0 6
23127: PPUSH
23128: CALL_OW 257
23132: PUSH
23133: LD_INT 12
23135: PUSH
23136: LD_INT 16
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: IN
23143: IFFALSE 23164
// points := [ 5 , 3 , 2 ] ;
23145: LD_ADDR_VAR 0 9
23149: PUSH
23150: LD_INT 5
23152: PUSH
23153: LD_INT 3
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23164: LD_VAR 0 6
23168: PPUSH
23169: CALL_OW 257
23173: PUSH
23174: LD_INT 17
23176: EQUAL
23177: IFFALSE 23198
// points := [ 100 , 50 , 75 ] ;
23179: LD_ADDR_VAR 0 9
23183: PUSH
23184: LD_INT 100
23186: PUSH
23187: LD_INT 50
23189: PUSH
23190: LD_INT 75
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23198: LD_VAR 0 6
23202: PPUSH
23203: CALL_OW 257
23207: PUSH
23208: LD_INT 15
23210: EQUAL
23211: IFFALSE 23232
// points := [ 10 , 5 , 3 ] ;
23213: LD_ADDR_VAR 0 9
23217: PUSH
23218: LD_INT 10
23220: PUSH
23221: LD_INT 5
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23232: LD_VAR 0 6
23236: PPUSH
23237: CALL_OW 257
23241: PUSH
23242: LD_INT 14
23244: EQUAL
23245: IFFALSE 23266
// points := [ 10 , 0 , 0 ] ;
23247: LD_ADDR_VAR 0 9
23251: PUSH
23252: LD_INT 10
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 0
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23266: LD_VAR 0 6
23270: PPUSH
23271: CALL_OW 257
23275: PUSH
23276: LD_INT 11
23278: EQUAL
23279: IFFALSE 23300
// points := [ 30 , 10 , 5 ] ;
23281: LD_ADDR_VAR 0 9
23285: PUSH
23286: LD_INT 30
23288: PUSH
23289: LD_INT 10
23291: PUSH
23292: LD_INT 5
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_INT 5
23307: PPUSH
23308: CALL_OW 321
23312: PUSH
23313: LD_INT 2
23315: EQUAL
23316: IFFALSE 23333
// bpoints := bpoints * 1.8 ;
23318: LD_ADDR_VAR 0 10
23322: PUSH
23323: LD_VAR 0 10
23327: PUSH
23328: LD_REAL  1.80000000000000E+0000
23331: MUL
23332: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23333: LD_VAR 0 6
23337: PPUSH
23338: CALL_OW 257
23342: PUSH
23343: LD_INT 1
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: LD_INT 4
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: IN
23361: IFFALSE 23381
23363: PUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: LD_INT 51
23371: PPUSH
23372: CALL_OW 321
23376: PUSH
23377: LD_INT 2
23379: EQUAL
23380: AND
23381: IFFALSE 23398
// bpoints := bpoints * 1.2 ;
23383: LD_ADDR_VAR 0 10
23387: PUSH
23388: LD_VAR 0 10
23392: PUSH
23393: LD_REAL  1.20000000000000E+0000
23396: MUL
23397: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23398: LD_VAR 0 6
23402: PPUSH
23403: CALL_OW 257
23407: PUSH
23408: LD_INT 5
23410: PUSH
23411: LD_INT 7
23413: PUSH
23414: LD_INT 9
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: IN
23422: IFFALSE 23442
23424: PUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: LD_INT 52
23432: PPUSH
23433: CALL_OW 321
23437: PUSH
23438: LD_INT 2
23440: EQUAL
23441: AND
23442: IFFALSE 23459
// bpoints := bpoints * 1.5 ;
23444: LD_ADDR_VAR 0 10
23448: PUSH
23449: LD_VAR 0 10
23453: PUSH
23454: LD_REAL  1.50000000000000E+0000
23457: MUL
23458: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23459: LD_VAR 0 1
23463: PPUSH
23464: LD_INT 66
23466: PPUSH
23467: CALL_OW 321
23471: PUSH
23472: LD_INT 2
23474: EQUAL
23475: IFFALSE 23492
// bpoints := bpoints * 1.1 ;
23477: LD_ADDR_VAR 0 10
23481: PUSH
23482: LD_VAR 0 10
23486: PUSH
23487: LD_REAL  1.10000000000000E+0000
23490: MUL
23491: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23492: LD_ADDR_VAR 0 10
23496: PUSH
23497: LD_VAR 0 10
23501: PUSH
23502: LD_VAR 0 6
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 259
23514: PUSH
23515: LD_REAL  1.15000000000000E+0000
23518: MUL
23519: MUL
23520: ST_TO_ADDR
// end ; unit_vehicle :
23521: GO 24351
23523: LD_INT 2
23525: DOUBLE
23526: EQUAL
23527: IFTRUE 23531
23529: GO 24339
23531: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23532: LD_VAR 0 6
23536: PPUSH
23537: CALL_OW 264
23541: PUSH
23542: LD_INT 2
23544: PUSH
23545: LD_INT 42
23547: PUSH
23548: LD_INT 24
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: LIST
23555: IN
23556: IFFALSE 23577
// points := [ 25 , 5 , 3 ] ;
23558: LD_ADDR_VAR 0 9
23562: PUSH
23563: LD_INT 25
23565: PUSH
23566: LD_INT 5
23568: PUSH
23569: LD_INT 3
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23577: LD_VAR 0 6
23581: PPUSH
23582: CALL_OW 264
23586: PUSH
23587: LD_INT 4
23589: PUSH
23590: LD_INT 43
23592: PUSH
23593: LD_INT 25
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: IN
23601: IFFALSE 23622
// points := [ 40 , 15 , 5 ] ;
23603: LD_ADDR_VAR 0 9
23607: PUSH
23608: LD_INT 40
23610: PUSH
23611: LD_INT 15
23613: PUSH
23614: LD_INT 5
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: LIST
23621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23622: LD_VAR 0 6
23626: PPUSH
23627: CALL_OW 264
23631: PUSH
23632: LD_INT 3
23634: PUSH
23635: LD_INT 23
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: IN
23642: IFFALSE 23663
// points := [ 7 , 25 , 8 ] ;
23644: LD_ADDR_VAR 0 9
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 25
23654: PUSH
23655: LD_INT 8
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23663: LD_VAR 0 6
23667: PPUSH
23668: CALL_OW 264
23672: PUSH
23673: LD_INT 5
23675: PUSH
23676: LD_INT 27
23678: PUSH
23679: LD_INT 44
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: IN
23687: IFFALSE 23708
// points := [ 14 , 50 , 16 ] ;
23689: LD_ADDR_VAR 0 9
23693: PUSH
23694: LD_INT 14
23696: PUSH
23697: LD_INT 50
23699: PUSH
23700: LD_INT 16
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: LIST
23707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23708: LD_VAR 0 6
23712: PPUSH
23713: CALL_OW 264
23717: PUSH
23718: LD_INT 6
23720: PUSH
23721: LD_INT 46
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: IN
23728: IFFALSE 23749
// points := [ 32 , 120 , 70 ] ;
23730: LD_ADDR_VAR 0 9
23734: PUSH
23735: LD_INT 32
23737: PUSH
23738: LD_INT 120
23740: PUSH
23741: LD_INT 70
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23749: LD_VAR 0 6
23753: PPUSH
23754: CALL_OW 264
23758: PUSH
23759: LD_INT 7
23761: PUSH
23762: LD_INT 28
23764: PUSH
23765: LD_INT 45
23767: PUSH
23768: LD_INT 92
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: IN
23777: IFFALSE 23798
// points := [ 35 , 20 , 45 ] ;
23779: LD_ADDR_VAR 0 9
23783: PUSH
23784: LD_INT 35
23786: PUSH
23787: LD_INT 20
23789: PUSH
23790: LD_INT 45
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: LIST
23797: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23798: LD_VAR 0 6
23802: PPUSH
23803: CALL_OW 264
23807: PUSH
23808: LD_INT 47
23810: PUSH
23811: EMPTY
23812: LIST
23813: IN
23814: IFFALSE 23835
// points := [ 67 , 45 , 75 ] ;
23816: LD_ADDR_VAR 0 9
23820: PUSH
23821: LD_INT 67
23823: PUSH
23824: LD_INT 45
23826: PUSH
23827: LD_INT 75
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: LIST
23834: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23835: LD_VAR 0 6
23839: PPUSH
23840: CALL_OW 264
23844: PUSH
23845: LD_INT 26
23847: PUSH
23848: EMPTY
23849: LIST
23850: IN
23851: IFFALSE 23872
// points := [ 120 , 30 , 80 ] ;
23853: LD_ADDR_VAR 0 9
23857: PUSH
23858: LD_INT 120
23860: PUSH
23861: LD_INT 30
23863: PUSH
23864: LD_INT 80
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23872: LD_VAR 0 6
23876: PPUSH
23877: CALL_OW 264
23881: PUSH
23882: LD_INT 22
23884: PUSH
23885: EMPTY
23886: LIST
23887: IN
23888: IFFALSE 23909
// points := [ 40 , 1 , 1 ] ;
23890: LD_ADDR_VAR 0 9
23894: PUSH
23895: LD_INT 40
23897: PUSH
23898: LD_INT 1
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: LIST
23908: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23909: LD_VAR 0 6
23913: PPUSH
23914: CALL_OW 264
23918: PUSH
23919: LD_INT 29
23921: PUSH
23922: EMPTY
23923: LIST
23924: IN
23925: IFFALSE 23946
// points := [ 70 , 200 , 400 ] ;
23927: LD_ADDR_VAR 0 9
23931: PUSH
23932: LD_INT 70
23934: PUSH
23935: LD_INT 200
23937: PUSH
23938: LD_INT 400
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23946: LD_VAR 0 6
23950: PPUSH
23951: CALL_OW 264
23955: PUSH
23956: LD_INT 14
23958: PUSH
23959: LD_INT 53
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: IN
23966: IFFALSE 23987
// points := [ 40 , 10 , 20 ] ;
23968: LD_ADDR_VAR 0 9
23972: PUSH
23973: LD_INT 40
23975: PUSH
23976: LD_INT 10
23978: PUSH
23979: LD_INT 20
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23987: LD_VAR 0 6
23991: PPUSH
23992: CALL_OW 264
23996: PUSH
23997: LD_INT 9
23999: PUSH
24000: EMPTY
24001: LIST
24002: IN
24003: IFFALSE 24024
// points := [ 5 , 70 , 20 ] ;
24005: LD_ADDR_VAR 0 9
24009: PUSH
24010: LD_INT 5
24012: PUSH
24013: LD_INT 70
24015: PUSH
24016: LD_INT 20
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24024: LD_VAR 0 6
24028: PPUSH
24029: CALL_OW 264
24033: PUSH
24034: LD_INT 10
24036: PUSH
24037: EMPTY
24038: LIST
24039: IN
24040: IFFALSE 24061
// points := [ 35 , 110 , 70 ] ;
24042: LD_ADDR_VAR 0 9
24046: PUSH
24047: LD_INT 35
24049: PUSH
24050: LD_INT 110
24052: PUSH
24053: LD_INT 70
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24061: LD_VAR 0 6
24065: PPUSH
24066: CALL_OW 265
24070: PUSH
24071: LD_INT 25
24073: EQUAL
24074: IFFALSE 24095
// points := [ 80 , 65 , 100 ] ;
24076: LD_ADDR_VAR 0 9
24080: PUSH
24081: LD_INT 80
24083: PUSH
24084: LD_INT 65
24086: PUSH
24087: LD_INT 100
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24095: LD_VAR 0 6
24099: PPUSH
24100: CALL_OW 263
24104: PUSH
24105: LD_INT 1
24107: EQUAL
24108: IFFALSE 24143
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24110: LD_ADDR_VAR 0 10
24114: PUSH
24115: LD_VAR 0 10
24119: PUSH
24120: LD_VAR 0 6
24124: PPUSH
24125: CALL_OW 311
24129: PPUSH
24130: LD_INT 3
24132: PPUSH
24133: CALL_OW 259
24137: PUSH
24138: LD_INT 4
24140: MUL
24141: MUL
24142: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24143: LD_VAR 0 6
24147: PPUSH
24148: CALL_OW 263
24152: PUSH
24153: LD_INT 2
24155: EQUAL
24156: IFFALSE 24207
// begin j := IsControledBy ( i ) ;
24158: LD_ADDR_VAR 0 7
24162: PUSH
24163: LD_VAR 0 6
24167: PPUSH
24168: CALL_OW 312
24172: ST_TO_ADDR
// if j then
24173: LD_VAR 0 7
24177: IFFALSE 24207
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24179: LD_ADDR_VAR 0 10
24183: PUSH
24184: LD_VAR 0 10
24188: PUSH
24189: LD_VAR 0 7
24193: PPUSH
24194: LD_INT 3
24196: PPUSH
24197: CALL_OW 259
24201: PUSH
24202: LD_INT 3
24204: MUL
24205: MUL
24206: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24207: LD_VAR 0 6
24211: PPUSH
24212: CALL_OW 264
24216: PUSH
24217: LD_INT 5
24219: PUSH
24220: LD_INT 6
24222: PUSH
24223: LD_INT 46
24225: PUSH
24226: LD_INT 44
24228: PUSH
24229: LD_INT 47
24231: PUSH
24232: LD_INT 45
24234: PUSH
24235: LD_INT 28
24237: PUSH
24238: LD_INT 7
24240: PUSH
24241: LD_INT 27
24243: PUSH
24244: LD_INT 29
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: IN
24259: IFFALSE 24279
24261: PUSH
24262: LD_VAR 0 1
24266: PPUSH
24267: LD_INT 52
24269: PPUSH
24270: CALL_OW 321
24274: PUSH
24275: LD_INT 2
24277: EQUAL
24278: AND
24279: IFFALSE 24296
// bpoints := bpoints * 1.2 ;
24281: LD_ADDR_VAR 0 10
24285: PUSH
24286: LD_VAR 0 10
24290: PUSH
24291: LD_REAL  1.20000000000000E+0000
24294: MUL
24295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24296: LD_VAR 0 6
24300: PPUSH
24301: CALL_OW 264
24305: PUSH
24306: LD_INT 6
24308: PUSH
24309: LD_INT 46
24311: PUSH
24312: LD_INT 47
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: LIST
24319: IN
24320: IFFALSE 24337
// bpoints := bpoints * 1.2 ;
24322: LD_ADDR_VAR 0 10
24326: PUSH
24327: LD_VAR 0 10
24331: PUSH
24332: LD_REAL  1.20000000000000E+0000
24335: MUL
24336: ST_TO_ADDR
// end ; unit_building :
24337: GO 24351
24339: LD_INT 3
24341: DOUBLE
24342: EQUAL
24343: IFTRUE 24347
24345: GO 24350
24347: POP
// ; end ;
24348: GO 24351
24350: POP
// for j = 1 to 3 do
24351: LD_ADDR_VAR 0 7
24355: PUSH
24356: DOUBLE
24357: LD_INT 1
24359: DEC
24360: ST_TO_ADDR
24361: LD_INT 3
24363: PUSH
24364: FOR_TO
24365: IFFALSE 24418
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24367: LD_ADDR_VAR 0 5
24371: PUSH
24372: LD_VAR 0 5
24376: PPUSH
24377: LD_VAR 0 7
24381: PPUSH
24382: LD_VAR 0 5
24386: PUSH
24387: LD_VAR 0 7
24391: ARRAY
24392: PUSH
24393: LD_VAR 0 9
24397: PUSH
24398: LD_VAR 0 7
24402: ARRAY
24403: PUSH
24404: LD_VAR 0 10
24408: MUL
24409: PLUS
24410: PPUSH
24411: CALL_OW 1
24415: ST_TO_ADDR
24416: GO 24364
24418: POP
24419: POP
// end ;
24420: GO 22893
24422: POP
24423: POP
// result := Replace ( result , 4 , tmp ) ;
24424: LD_ADDR_VAR 0 5
24428: PUSH
24429: LD_VAR 0 5
24433: PPUSH
24434: LD_INT 4
24436: PPUSH
24437: LD_VAR 0 8
24441: PPUSH
24442: CALL_OW 1
24446: ST_TO_ADDR
// end ;
24447: LD_VAR 0 5
24451: RET
// export function DangerAtRange ( unit , range ) ; begin
24452: LD_INT 0
24454: PPUSH
// if not unit then
24455: LD_VAR 0 1
24459: NOT
24460: IFFALSE 24464
// exit ;
24462: GO 24509
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24464: LD_ADDR_VAR 0 3
24468: PUSH
24469: LD_VAR 0 1
24473: PPUSH
24474: CALL_OW 255
24478: PPUSH
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 250
24488: PPUSH
24489: LD_VAR 0 1
24493: PPUSH
24494: CALL_OW 251
24498: PPUSH
24499: LD_VAR 0 2
24503: PPUSH
24504: CALL 22743 0 4
24508: ST_TO_ADDR
// end ;
24509: LD_VAR 0 3
24513: RET
// export function DangerInArea ( side , area ) ; begin
24514: LD_INT 0
24516: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24517: LD_ADDR_VAR 0 3
24521: PUSH
24522: LD_VAR 0 2
24526: PPUSH
24527: LD_INT 81
24529: PUSH
24530: LD_VAR 0 1
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PPUSH
24539: CALL_OW 70
24543: ST_TO_ADDR
// end ;
24544: LD_VAR 0 3
24548: RET
// export function IsExtension ( b ) ; begin
24549: LD_INT 0
24551: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24552: LD_ADDR_VAR 0 2
24556: PUSH
24557: LD_VAR 0 1
24561: PUSH
24562: LD_INT 23
24564: PUSH
24565: LD_INT 20
24567: PUSH
24568: LD_INT 22
24570: PUSH
24571: LD_INT 17
24573: PUSH
24574: LD_INT 24
24576: PUSH
24577: LD_INT 21
24579: PUSH
24580: LD_INT 19
24582: PUSH
24583: LD_INT 16
24585: PUSH
24586: LD_INT 25
24588: PUSH
24589: LD_INT 18
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: IN
24604: ST_TO_ADDR
// end ;
24605: LD_VAR 0 2
24609: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
24614: PPUSH
// result := [ ] ;
24615: LD_ADDR_VAR 0 4
24619: PUSH
24620: EMPTY
24621: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24622: LD_ADDR_VAR 0 5
24626: PUSH
24627: LD_VAR 0 2
24631: PPUSH
24632: LD_INT 21
24634: PUSH
24635: LD_INT 3
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PPUSH
24642: CALL_OW 70
24646: ST_TO_ADDR
// if not tmp then
24647: LD_VAR 0 5
24651: NOT
24652: IFFALSE 24656
// exit ;
24654: GO 24720
// if checkLink then
24656: LD_VAR 0 3
24660: IFFALSE 24710
// begin for i in tmp do
24662: LD_ADDR_VAR 0 6
24666: PUSH
24667: LD_VAR 0 5
24671: PUSH
24672: FOR_IN
24673: IFFALSE 24708
// if GetBase ( i ) <> base then
24675: LD_VAR 0 6
24679: PPUSH
24680: CALL_OW 274
24684: PUSH
24685: LD_VAR 0 1
24689: NONEQUAL
24690: IFFALSE 24706
// ComLinkToBase ( base , i ) ;
24692: LD_VAR 0 1
24696: PPUSH
24697: LD_VAR 0 6
24701: PPUSH
24702: CALL_OW 169
24706: GO 24672
24708: POP
24709: POP
// end ; result := tmp ;
24710: LD_ADDR_VAR 0 4
24714: PUSH
24715: LD_VAR 0 5
24719: ST_TO_ADDR
// end ;
24720: LD_VAR 0 4
24724: RET
// export function ComComplete ( units , b ) ; var i ; begin
24725: LD_INT 0
24727: PPUSH
24728: PPUSH
// if not units then
24729: LD_VAR 0 1
24733: NOT
24734: IFFALSE 24738
// exit ;
24736: GO 24828
// for i in units do
24738: LD_ADDR_VAR 0 4
24742: PUSH
24743: LD_VAR 0 1
24747: PUSH
24748: FOR_IN
24749: IFFALSE 24826
// if BuildingStatus ( b ) = bs_build then
24751: LD_VAR 0 2
24755: PPUSH
24756: CALL_OW 461
24760: PUSH
24761: LD_INT 1
24763: EQUAL
24764: IFFALSE 24824
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24766: LD_VAR 0 4
24770: PPUSH
24771: LD_STRING h
24773: PUSH
24774: LD_VAR 0 2
24778: PPUSH
24779: CALL_OW 250
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 251
24793: PUSH
24794: LD_VAR 0 2
24798: PUSH
24799: LD_INT 0
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: PUSH
24817: EMPTY
24818: LIST
24819: PPUSH
24820: CALL_OW 446
24824: GO 24748
24826: POP
24827: POP
// end ;
24828: LD_VAR 0 3
24832: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24833: LD_INT 0
24835: PPUSH
24836: PPUSH
24837: PPUSH
24838: PPUSH
24839: PPUSH
24840: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24841: LD_VAR 0 1
24845: NOT
24846: IFTRUE 24863
24848: PUSH
24849: LD_VAR 0 1
24853: PPUSH
24854: CALL_OW 263
24858: PUSH
24859: LD_INT 2
24861: NONEQUAL
24862: OR
24863: IFFALSE 24867
// exit ;
24865: GO 25183
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24867: LD_ADDR_VAR 0 6
24871: PUSH
24872: LD_INT 22
24874: PUSH
24875: LD_VAR 0 1
24879: PPUSH
24880: CALL_OW 255
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: LD_INT 30
24894: PUSH
24895: LD_INT 36
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 34
24904: PUSH
24905: LD_INT 31
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PPUSH
24921: CALL_OW 69
24925: ST_TO_ADDR
// if not tmp then
24926: LD_VAR 0 6
24930: NOT
24931: IFFALSE 24935
// exit ;
24933: GO 25183
// result := [ ] ;
24935: LD_ADDR_VAR 0 2
24939: PUSH
24940: EMPTY
24941: ST_TO_ADDR
// for i in tmp do
24942: LD_ADDR_VAR 0 3
24946: PUSH
24947: LD_VAR 0 6
24951: PUSH
24952: FOR_IN
24953: IFFALSE 25024
// begin t := UnitsInside ( i ) ;
24955: LD_ADDR_VAR 0 4
24959: PUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: CALL_OW 313
24969: ST_TO_ADDR
// if t then
24970: LD_VAR 0 4
24974: IFFALSE 25022
// for j in t do
24976: LD_ADDR_VAR 0 7
24980: PUSH
24981: LD_VAR 0 4
24985: PUSH
24986: FOR_IN
24987: IFFALSE 25020
// result := Replace ( result , result + 1 , j ) ;
24989: LD_ADDR_VAR 0 2
24993: PUSH
24994: LD_VAR 0 2
24998: PPUSH
24999: LD_VAR 0 2
25003: PUSH
25004: LD_INT 1
25006: PLUS
25007: PPUSH
25008: LD_VAR 0 7
25012: PPUSH
25013: CALL_OW 1
25017: ST_TO_ADDR
25018: GO 24986
25020: POP
25021: POP
// end ;
25022: GO 24952
25024: POP
25025: POP
// if not result then
25026: LD_VAR 0 2
25030: NOT
25031: IFFALSE 25035
// exit ;
25033: GO 25183
// mech := result [ 1 ] ;
25035: LD_ADDR_VAR 0 5
25039: PUSH
25040: LD_VAR 0 2
25044: PUSH
25045: LD_INT 1
25047: ARRAY
25048: ST_TO_ADDR
// if result > 1 then
25049: LD_VAR 0 2
25053: PUSH
25054: LD_INT 1
25056: GREATER
25057: IFFALSE 25169
// begin for i = 2 to result do
25059: LD_ADDR_VAR 0 3
25063: PUSH
25064: DOUBLE
25065: LD_INT 2
25067: DEC
25068: ST_TO_ADDR
25069: LD_VAR 0 2
25073: PUSH
25074: FOR_TO
25075: IFFALSE 25167
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25077: LD_ADDR_VAR 0 4
25081: PUSH
25082: LD_VAR 0 2
25086: PUSH
25087: LD_VAR 0 3
25091: ARRAY
25092: PPUSH
25093: LD_INT 3
25095: PPUSH
25096: CALL_OW 259
25100: PUSH
25101: LD_VAR 0 2
25105: PUSH
25106: LD_VAR 0 3
25110: ARRAY
25111: PPUSH
25112: CALL_OW 432
25116: MINUS
25117: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25118: LD_VAR 0 4
25122: PUSH
25123: LD_VAR 0 5
25127: PPUSH
25128: LD_INT 3
25130: PPUSH
25131: CALL_OW 259
25135: PUSH
25136: LD_VAR 0 5
25140: PPUSH
25141: CALL_OW 432
25145: MINUS
25146: GREATEREQUAL
25147: IFFALSE 25165
// mech := result [ i ] ;
25149: LD_ADDR_VAR 0 5
25153: PUSH
25154: LD_VAR 0 2
25158: PUSH
25159: LD_VAR 0 3
25163: ARRAY
25164: ST_TO_ADDR
// end ;
25165: GO 25074
25167: POP
25168: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25169: LD_VAR 0 1
25173: PPUSH
25174: LD_VAR 0 5
25178: PPUSH
25179: CALL_OW 135
// end ;
25183: LD_VAR 0 2
25187: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25188: LD_INT 0
25190: PPUSH
25191: PPUSH
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
// result := [ ] ;
25203: LD_ADDR_VAR 0 7
25207: PUSH
25208: EMPTY
25209: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL_OW 266
25219: PUSH
25220: LD_INT 0
25222: PUSH
25223: LD_INT 1
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: IN
25230: NOT
25231: IFFALSE 25235
// exit ;
25233: GO 26875
// if name then
25235: LD_VAR 0 3
25239: IFFALSE 25255
// SetBName ( base_dep , name ) ;
25241: LD_VAR 0 1
25245: PPUSH
25246: LD_VAR 0 3
25250: PPUSH
25251: CALL_OW 500
// base := GetBase ( base_dep ) ;
25255: LD_ADDR_VAR 0 15
25259: PUSH
25260: LD_VAR 0 1
25264: PPUSH
25265: CALL_OW 274
25269: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25270: LD_ADDR_VAR 0 16
25274: PUSH
25275: LD_VAR 0 1
25279: PPUSH
25280: CALL_OW 255
25284: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25285: LD_ADDR_VAR 0 17
25289: PUSH
25290: LD_VAR 0 1
25294: PPUSH
25295: CALL_OW 248
25299: ST_TO_ADDR
// if sources then
25300: LD_VAR 0 5
25304: IFFALSE 25351
// for i = 1 to 3 do
25306: LD_ADDR_VAR 0 8
25310: PUSH
25311: DOUBLE
25312: LD_INT 1
25314: DEC
25315: ST_TO_ADDR
25316: LD_INT 3
25318: PUSH
25319: FOR_TO
25320: IFFALSE 25349
// AddResourceType ( base , i , sources [ i ] ) ;
25322: LD_VAR 0 15
25326: PPUSH
25327: LD_VAR 0 8
25331: PPUSH
25332: LD_VAR 0 5
25336: PUSH
25337: LD_VAR 0 8
25341: ARRAY
25342: PPUSH
25343: CALL_OW 276
25347: GO 25319
25349: POP
25350: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25351: LD_ADDR_VAR 0 18
25355: PUSH
25356: LD_VAR 0 15
25360: PPUSH
25361: LD_VAR 0 2
25365: PPUSH
25366: LD_INT 1
25368: PPUSH
25369: CALL 24610 0 3
25373: ST_TO_ADDR
// InitHc ;
25374: CALL_OW 19
// InitUc ;
25378: CALL_OW 18
// uc_side := side ;
25382: LD_ADDR_OWVAR 20
25386: PUSH
25387: LD_VAR 0 16
25391: ST_TO_ADDR
// uc_nation := nation ;
25392: LD_ADDR_OWVAR 21
25396: PUSH
25397: LD_VAR 0 17
25401: ST_TO_ADDR
// if buildings then
25402: LD_VAR 0 18
25406: IFFALSE 26734
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25408: LD_ADDR_VAR 0 19
25412: PUSH
25413: LD_VAR 0 18
25417: PPUSH
25418: LD_INT 2
25420: PUSH
25421: LD_INT 30
25423: PUSH
25424: LD_INT 29
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 30
25433: PUSH
25434: LD_INT 30
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: PPUSH
25446: CALL_OW 72
25450: ST_TO_ADDR
// if tmp then
25451: LD_VAR 0 19
25455: IFFALSE 25503
// for i in tmp do
25457: LD_ADDR_VAR 0 8
25461: PUSH
25462: LD_VAR 0 19
25466: PUSH
25467: FOR_IN
25468: IFFALSE 25501
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25470: LD_VAR 0 8
25474: PPUSH
25475: CALL_OW 250
25479: PPUSH
25480: LD_VAR 0 8
25484: PPUSH
25485: CALL_OW 251
25489: PPUSH
25490: LD_VAR 0 16
25494: PPUSH
25495: CALL_OW 441
25499: GO 25467
25501: POP
25502: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25503: LD_VAR 0 18
25507: PPUSH
25508: LD_INT 2
25510: PUSH
25511: LD_INT 30
25513: PUSH
25514: LD_INT 32
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 30
25523: PUSH
25524: LD_INT 33
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 72
25540: IFFALSE 25628
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25542: LD_ADDR_VAR 0 8
25546: PUSH
25547: LD_VAR 0 18
25551: PPUSH
25552: LD_INT 2
25554: PUSH
25555: LD_INT 30
25557: PUSH
25558: LD_INT 32
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 30
25567: PUSH
25568: LD_INT 33
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: LIST
25579: PPUSH
25580: CALL_OW 72
25584: PUSH
25585: FOR_IN
25586: IFFALSE 25626
// begin if not GetBWeapon ( i ) then
25588: LD_VAR 0 8
25592: PPUSH
25593: CALL_OW 269
25597: NOT
25598: IFFALSE 25624
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25600: LD_VAR 0 8
25604: PPUSH
25605: LD_VAR 0 8
25609: PPUSH
25610: LD_VAR 0 2
25614: PPUSH
25615: CALL 26880 0 2
25619: PPUSH
25620: CALL_OW 431
// end ;
25624: GO 25585
25626: POP
25627: POP
// end ; for i = 1 to personel do
25628: LD_ADDR_VAR 0 8
25632: PUSH
25633: DOUBLE
25634: LD_INT 1
25636: DEC
25637: ST_TO_ADDR
25638: LD_VAR 0 6
25642: PUSH
25643: FOR_TO
25644: IFFALSE 26714
// begin if i > 4 then
25646: LD_VAR 0 8
25650: PUSH
25651: LD_INT 4
25653: GREATER
25654: IFFALSE 25658
// break ;
25656: GO 26714
// case i of 1 :
25658: LD_VAR 0 8
25662: PUSH
25663: LD_INT 1
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25751
25671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25672: LD_ADDR_VAR 0 12
25676: PUSH
25677: LD_VAR 0 18
25681: PPUSH
25682: LD_INT 22
25684: PUSH
25685: LD_VAR 0 16
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 58
25696: PUSH
25697: EMPTY
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: LD_INT 30
25705: PUSH
25706: LD_INT 32
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 30
25715: PUSH
25716: LD_INT 4
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 30
25725: PUSH
25726: LD_INT 5
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 72
25748: ST_TO_ADDR
25749: GO 25973
25751: LD_INT 2
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25821
25759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25760: LD_ADDR_VAR 0 12
25764: PUSH
25765: LD_VAR 0 18
25769: PPUSH
25770: LD_INT 22
25772: PUSH
25773: LD_VAR 0 16
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: PUSH
25785: LD_INT 30
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 30
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 72
25818: ST_TO_ADDR
25819: GO 25973
25821: LD_INT 3
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25891
25829: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25830: LD_ADDR_VAR 0 12
25834: PUSH
25835: LD_VAR 0 18
25839: PPUSH
25840: LD_INT 22
25842: PUSH
25843: LD_VAR 0 16
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 2
25854: PUSH
25855: LD_INT 30
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 30
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 72
25888: ST_TO_ADDR
25889: GO 25973
25891: LD_INT 4
25893: DOUBLE
25894: EQUAL
25895: IFTRUE 25899
25897: GO 25972
25899: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25900: LD_ADDR_VAR 0 12
25904: PUSH
25905: LD_VAR 0 18
25909: PPUSH
25910: LD_INT 22
25912: PUSH
25913: LD_VAR 0 16
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: LD_INT 30
25927: PUSH
25928: LD_INT 6
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 30
25937: PUSH
25938: LD_INT 7
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 30
25947: PUSH
25948: LD_INT 8
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PPUSH
25965: CALL_OW 72
25969: ST_TO_ADDR
25970: GO 25973
25972: POP
// if i = 1 then
25973: LD_VAR 0 8
25977: PUSH
25978: LD_INT 1
25980: EQUAL
25981: IFFALSE 26092
// begin tmp := [ ] ;
25983: LD_ADDR_VAR 0 19
25987: PUSH
25988: EMPTY
25989: ST_TO_ADDR
// for j in f do
25990: LD_ADDR_VAR 0 9
25994: PUSH
25995: LD_VAR 0 12
25999: PUSH
26000: FOR_IN
26001: IFFALSE 26074
// if GetBType ( j ) = b_bunker then
26003: LD_VAR 0 9
26007: PPUSH
26008: CALL_OW 266
26012: PUSH
26013: LD_INT 32
26015: EQUAL
26016: IFFALSE 26043
// tmp := Insert ( tmp , 1 , j ) else
26018: LD_ADDR_VAR 0 19
26022: PUSH
26023: LD_VAR 0 19
26027: PPUSH
26028: LD_INT 1
26030: PPUSH
26031: LD_VAR 0 9
26035: PPUSH
26036: CALL_OW 2
26040: ST_TO_ADDR
26041: GO 26072
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26043: LD_ADDR_VAR 0 19
26047: PUSH
26048: LD_VAR 0 19
26052: PPUSH
26053: LD_VAR 0 19
26057: PUSH
26058: LD_INT 1
26060: PLUS
26061: PPUSH
26062: LD_VAR 0 9
26066: PPUSH
26067: CALL_OW 2
26071: ST_TO_ADDR
26072: GO 26000
26074: POP
26075: POP
// if tmp then
26076: LD_VAR 0 19
26080: IFFALSE 26092
// f := tmp ;
26082: LD_ADDR_VAR 0 12
26086: PUSH
26087: LD_VAR 0 19
26091: ST_TO_ADDR
// end ; x := personel [ i ] ;
26092: LD_ADDR_VAR 0 13
26096: PUSH
26097: LD_VAR 0 6
26101: PUSH
26102: LD_VAR 0 8
26106: ARRAY
26107: ST_TO_ADDR
// if x = - 1 then
26108: LD_VAR 0 13
26112: PUSH
26113: LD_INT 1
26115: NEG
26116: EQUAL
26117: IFFALSE 26328
// begin for j in f do
26119: LD_ADDR_VAR 0 9
26123: PUSH
26124: LD_VAR 0 12
26128: PUSH
26129: FOR_IN
26130: IFFALSE 26324
// repeat InitHc ;
26132: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26136: LD_VAR 0 9
26140: PPUSH
26141: CALL_OW 266
26145: PUSH
26146: LD_INT 5
26148: EQUAL
26149: IFFALSE 26219
// begin if UnitsInside ( j ) < 3 then
26151: LD_VAR 0 9
26155: PPUSH
26156: CALL_OW 313
26160: PUSH
26161: LD_INT 3
26163: LESS
26164: IFFALSE 26200
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26166: LD_INT 0
26168: PPUSH
26169: LD_INT 5
26171: PUSH
26172: LD_INT 8
26174: PUSH
26175: LD_INT 9
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: PUSH
26183: LD_VAR 0 17
26187: ARRAY
26188: PPUSH
26189: LD_VAR 0 4
26193: PPUSH
26194: CALL_OW 380
26198: GO 26217
// PrepareHuman ( false , i , skill ) ;
26200: LD_INT 0
26202: PPUSH
26203: LD_VAR 0 8
26207: PPUSH
26208: LD_VAR 0 4
26212: PPUSH
26213: CALL_OW 380
// end else
26217: GO 26236
// PrepareHuman ( false , i , skill ) ;
26219: LD_INT 0
26221: PPUSH
26222: LD_VAR 0 8
26226: PPUSH
26227: LD_VAR 0 4
26231: PPUSH
26232: CALL_OW 380
// un := CreateHuman ;
26236: LD_ADDR_VAR 0 14
26240: PUSH
26241: CALL_OW 44
26245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26246: LD_ADDR_VAR 0 7
26250: PUSH
26251: LD_VAR 0 7
26255: PPUSH
26256: LD_INT 1
26258: PPUSH
26259: LD_VAR 0 14
26263: PPUSH
26264: CALL_OW 2
26268: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26269: LD_VAR 0 14
26273: PPUSH
26274: LD_VAR 0 9
26278: PPUSH
26279: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26283: LD_VAR 0 9
26287: PPUSH
26288: CALL_OW 313
26292: PUSH
26293: LD_INT 6
26295: EQUAL
26296: IFTRUE 26320
26298: PUSH
26299: LD_VAR 0 9
26303: PPUSH
26304: CALL_OW 266
26308: PUSH
26309: LD_INT 32
26311: PUSH
26312: LD_INT 31
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: IN
26319: OR
26320: IFFALSE 26132
26322: GO 26129
26324: POP
26325: POP
// end else
26326: GO 26712
// for j = 1 to x do
26328: LD_ADDR_VAR 0 9
26332: PUSH
26333: DOUBLE
26334: LD_INT 1
26336: DEC
26337: ST_TO_ADDR
26338: LD_VAR 0 13
26342: PUSH
26343: FOR_TO
26344: IFFALSE 26710
// begin InitHc ;
26346: CALL_OW 19
// if not f then
26350: LD_VAR 0 12
26354: NOT
26355: IFFALSE 26444
// begin PrepareHuman ( false , i , skill ) ;
26357: LD_INT 0
26359: PPUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: LD_VAR 0 4
26369: PPUSH
26370: CALL_OW 380
// un := CreateHuman ;
26374: LD_ADDR_VAR 0 14
26378: PUSH
26379: CALL_OW 44
26383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26384: LD_ADDR_VAR 0 7
26388: PUSH
26389: LD_VAR 0 7
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_VAR 0 14
26401: PPUSH
26402: CALL_OW 2
26406: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26407: LD_VAR 0 14
26411: PPUSH
26412: LD_VAR 0 1
26416: PPUSH
26417: CALL_OW 250
26421: PPUSH
26422: LD_VAR 0 1
26426: PPUSH
26427: CALL_OW 251
26431: PPUSH
26432: LD_INT 10
26434: PPUSH
26435: LD_INT 0
26437: PPUSH
26438: CALL_OW 50
// continue ;
26442: GO 26343
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26444: LD_VAR 0 12
26448: PUSH
26449: LD_INT 1
26451: ARRAY
26452: PPUSH
26453: CALL_OW 313
26457: IFFALSE 26485
26459: PUSH
26460: LD_VAR 0 12
26464: PUSH
26465: LD_INT 1
26467: ARRAY
26468: PPUSH
26469: CALL_OW 266
26473: PUSH
26474: LD_INT 32
26476: PUSH
26477: LD_INT 31
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: IN
26484: AND
26485: IFTRUE 26506
26487: PUSH
26488: LD_VAR 0 12
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PPUSH
26497: CALL_OW 313
26501: PUSH
26502: LD_INT 6
26504: EQUAL
26505: OR
26506: IFFALSE 26526
// f := Delete ( f , 1 ) ;
26508: LD_ADDR_VAR 0 12
26512: PUSH
26513: LD_VAR 0 12
26517: PPUSH
26518: LD_INT 1
26520: PPUSH
26521: CALL_OW 3
26525: ST_TO_ADDR
// if not f then
26526: LD_VAR 0 12
26530: NOT
26531: IFFALSE 26549
// begin x := x + 2 ;
26533: LD_ADDR_VAR 0 13
26537: PUSH
26538: LD_VAR 0 13
26542: PUSH
26543: LD_INT 2
26545: PLUS
26546: ST_TO_ADDR
// continue ;
26547: GO 26343
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26549: LD_VAR 0 12
26553: PUSH
26554: LD_INT 1
26556: ARRAY
26557: PPUSH
26558: CALL_OW 266
26562: PUSH
26563: LD_INT 5
26565: EQUAL
26566: IFFALSE 26640
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26568: LD_VAR 0 12
26572: PUSH
26573: LD_INT 1
26575: ARRAY
26576: PPUSH
26577: CALL_OW 313
26581: PUSH
26582: LD_INT 3
26584: LESS
26585: IFFALSE 26621
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26587: LD_INT 0
26589: PPUSH
26590: LD_INT 5
26592: PUSH
26593: LD_INT 8
26595: PUSH
26596: LD_INT 9
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: PUSH
26604: LD_VAR 0 17
26608: ARRAY
26609: PPUSH
26610: LD_VAR 0 4
26614: PPUSH
26615: CALL_OW 380
26619: GO 26638
// PrepareHuman ( false , i , skill ) ;
26621: LD_INT 0
26623: PPUSH
26624: LD_VAR 0 8
26628: PPUSH
26629: LD_VAR 0 4
26633: PPUSH
26634: CALL_OW 380
// end else
26638: GO 26657
// PrepareHuman ( false , i , skill ) ;
26640: LD_INT 0
26642: PPUSH
26643: LD_VAR 0 8
26647: PPUSH
26648: LD_VAR 0 4
26652: PPUSH
26653: CALL_OW 380
// un := CreateHuman ;
26657: LD_ADDR_VAR 0 14
26661: PUSH
26662: CALL_OW 44
26666: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26667: LD_ADDR_VAR 0 7
26671: PUSH
26672: LD_VAR 0 7
26676: PPUSH
26677: LD_INT 1
26679: PPUSH
26680: LD_VAR 0 14
26684: PPUSH
26685: CALL_OW 2
26689: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26690: LD_VAR 0 14
26694: PPUSH
26695: LD_VAR 0 12
26699: PUSH
26700: LD_INT 1
26702: ARRAY
26703: PPUSH
26704: CALL_OW 52
// end ;
26708: GO 26343
26710: POP
26711: POP
// end ;
26712: GO 25643
26714: POP
26715: POP
// result := result ^ buildings ;
26716: LD_ADDR_VAR 0 7
26720: PUSH
26721: LD_VAR 0 7
26725: PUSH
26726: LD_VAR 0 18
26730: ADD
26731: ST_TO_ADDR
// end else
26732: GO 26875
// begin for i = 1 to personel do
26734: LD_ADDR_VAR 0 8
26738: PUSH
26739: DOUBLE
26740: LD_INT 1
26742: DEC
26743: ST_TO_ADDR
26744: LD_VAR 0 6
26748: PUSH
26749: FOR_TO
26750: IFFALSE 26873
// begin if i > 4 then
26752: LD_VAR 0 8
26756: PUSH
26757: LD_INT 4
26759: GREATER
26760: IFFALSE 26764
// break ;
26762: GO 26873
// x := personel [ i ] ;
26764: LD_ADDR_VAR 0 13
26768: PUSH
26769: LD_VAR 0 6
26773: PUSH
26774: LD_VAR 0 8
26778: ARRAY
26779: ST_TO_ADDR
// if x = - 1 then
26780: LD_VAR 0 13
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: EQUAL
26789: IFFALSE 26793
// continue ;
26791: GO 26749
// PrepareHuman ( false , i , skill ) ;
26793: LD_INT 0
26795: PPUSH
26796: LD_VAR 0 8
26800: PPUSH
26801: LD_VAR 0 4
26805: PPUSH
26806: CALL_OW 380
// un := CreateHuman ;
26810: LD_ADDR_VAR 0 14
26814: PUSH
26815: CALL_OW 44
26819: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26820: LD_VAR 0 14
26824: PPUSH
26825: LD_VAR 0 1
26829: PPUSH
26830: CALL_OW 250
26834: PPUSH
26835: LD_VAR 0 1
26839: PPUSH
26840: CALL_OW 251
26844: PPUSH
26845: LD_INT 10
26847: PPUSH
26848: LD_INT 0
26850: PPUSH
26851: CALL_OW 50
// result := result ^ un ;
26855: LD_ADDR_VAR 0 7
26859: PUSH
26860: LD_VAR 0 7
26864: PUSH
26865: LD_VAR 0 14
26869: ADD
26870: ST_TO_ADDR
// end ;
26871: GO 26749
26873: POP
26874: POP
// end ; end ;
26875: LD_VAR 0 7
26879: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26880: LD_INT 0
26882: PPUSH
26883: PPUSH
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
26894: PPUSH
26895: PPUSH
26896: PPUSH
26897: PPUSH
// result := false ;
26898: LD_ADDR_VAR 0 3
26902: PUSH
26903: LD_INT 0
26905: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26906: LD_VAR 0 1
26910: NOT
26911: IFTRUE 26936
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 266
26923: PUSH
26924: LD_INT 32
26926: PUSH
26927: LD_INT 33
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: IN
26934: NOT
26935: OR
26936: IFFALSE 26940
// exit ;
26938: GO 28075
// nat := GetNation ( tower ) ;
26940: LD_ADDR_VAR 0 12
26944: PUSH
26945: LD_VAR 0 1
26949: PPUSH
26950: CALL_OW 248
26954: ST_TO_ADDR
// side := GetSide ( tower ) ;
26955: LD_ADDR_VAR 0 16
26959: PUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 255
26969: ST_TO_ADDR
// x := GetX ( tower ) ;
26970: LD_ADDR_VAR 0 10
26974: PUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 250
26984: ST_TO_ADDR
// y := GetY ( tower ) ;
26985: LD_ADDR_VAR 0 11
26989: PUSH
26990: LD_VAR 0 1
26994: PPUSH
26995: CALL_OW 251
26999: ST_TO_ADDR
// if not x or not y then
27000: LD_VAR 0 10
27004: NOT
27005: IFTRUE 27014
27007: PUSH
27008: LD_VAR 0 11
27012: NOT
27013: OR
27014: IFFALSE 27018
// exit ;
27016: GO 28075
// weapon := 0 ;
27018: LD_ADDR_VAR 0 18
27022: PUSH
27023: LD_INT 0
27025: ST_TO_ADDR
// fac_list := [ ] ;
27026: LD_ADDR_VAR 0 17
27030: PUSH
27031: EMPTY
27032: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27033: LD_ADDR_VAR 0 6
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 274
27047: PPUSH
27048: LD_VAR 0 2
27052: PPUSH
27053: LD_INT 0
27055: PPUSH
27056: CALL 24610 0 3
27060: PPUSH
27061: LD_INT 30
27063: PUSH
27064: LD_INT 3
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PPUSH
27071: CALL_OW 72
27075: ST_TO_ADDR
// if not factories then
27076: LD_VAR 0 6
27080: NOT
27081: IFFALSE 27085
// exit ;
27083: GO 28075
// for i in factories do
27085: LD_ADDR_VAR 0 8
27089: PUSH
27090: LD_VAR 0 6
27094: PUSH
27095: FOR_IN
27096: IFFALSE 27121
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27098: LD_ADDR_VAR 0 17
27102: PUSH
27103: LD_VAR 0 17
27107: PUSH
27108: LD_VAR 0 8
27112: PPUSH
27113: CALL_OW 478
27117: UNION
27118: ST_TO_ADDR
27119: GO 27095
27121: POP
27122: POP
// if not fac_list then
27123: LD_VAR 0 17
27127: NOT
27128: IFFALSE 27132
// exit ;
27130: GO 28075
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27132: LD_ADDR_VAR 0 5
27136: PUSH
27137: LD_INT 4
27139: PUSH
27140: LD_INT 5
27142: PUSH
27143: LD_INT 9
27145: PUSH
27146: LD_INT 10
27148: PUSH
27149: LD_INT 6
27151: PUSH
27152: LD_INT 7
27154: PUSH
27155: LD_INT 11
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 27
27169: PUSH
27170: LD_INT 28
27172: PUSH
27173: LD_INT 26
27175: PUSH
27176: LD_INT 30
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 43
27187: PUSH
27188: LD_INT 44
27190: PUSH
27191: LD_INT 46
27193: PUSH
27194: LD_INT 45
27196: PUSH
27197: LD_INT 47
27199: PUSH
27200: LD_INT 49
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: PUSH
27216: LD_VAR 0 12
27220: ARRAY
27221: ST_TO_ADDR
// list := list isect fac_list ;
27222: LD_ADDR_VAR 0 5
27226: PUSH
27227: LD_VAR 0 5
27231: PUSH
27232: LD_VAR 0 17
27236: ISECT
27237: ST_TO_ADDR
// if not list then
27238: LD_VAR 0 5
27242: NOT
27243: IFFALSE 27247
// exit ;
27245: GO 28075
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27247: LD_VAR 0 12
27251: PUSH
27252: LD_INT 3
27254: EQUAL
27255: IFFALSE 27267
27257: PUSH
27258: LD_INT 49
27260: PUSH
27261: LD_VAR 0 5
27265: IN
27266: AND
27267: IFFALSE 27287
27269: PUSH
27270: LD_INT 31
27272: PPUSH
27273: LD_VAR 0 16
27277: PPUSH
27278: CALL_OW 321
27282: PUSH
27283: LD_INT 2
27285: EQUAL
27286: AND
27287: IFFALSE 27347
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27289: LD_INT 22
27291: PUSH
27292: LD_VAR 0 16
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 35
27303: PUSH
27304: LD_INT 49
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 91
27313: PUSH
27314: LD_VAR 0 1
27318: PUSH
27319: LD_INT 10
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: PPUSH
27332: CALL_OW 69
27336: NOT
27337: IFFALSE 27347
// weapon := ru_time_lapser ;
27339: LD_ADDR_VAR 0 18
27343: PUSH
27344: LD_INT 49
27346: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27347: LD_VAR 0 12
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: IN
27362: IFFALSE 27386
27364: PUSH
27365: LD_INT 11
27367: PUSH
27368: LD_VAR 0 5
27372: IN
27373: IFTRUE 27385
27375: PUSH
27376: LD_INT 30
27378: PUSH
27379: LD_VAR 0 5
27383: IN
27384: OR
27385: AND
27386: IFFALSE 27406
27388: PUSH
27389: LD_INT 6
27391: PPUSH
27392: LD_VAR 0 16
27396: PPUSH
27397: CALL_OW 321
27401: PUSH
27402: LD_INT 2
27404: EQUAL
27405: AND
27406: IFFALSE 27573
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27408: LD_INT 22
27410: PUSH
27411: LD_VAR 0 16
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: LD_INT 35
27425: PUSH
27426: LD_INT 11
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 35
27435: PUSH
27436: LD_INT 30
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 91
27450: PUSH
27451: LD_VAR 0 1
27455: PUSH
27456: LD_INT 18
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: PPUSH
27469: CALL_OW 69
27473: NOT
27474: IFFALSE 27550
27476: PUSH
27477: LD_INT 22
27479: PUSH
27480: LD_VAR 0 16
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: LD_INT 30
27494: PUSH
27495: LD_INT 32
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 30
27504: PUSH
27505: LD_INT 33
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 91
27519: PUSH
27520: LD_VAR 0 1
27524: PUSH
27525: LD_INT 12
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: PPUSH
27541: CALL_OW 69
27545: PUSH
27546: LD_INT 2
27548: GREATER
27549: AND
27550: IFFALSE 27573
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27552: LD_ADDR_VAR 0 18
27556: PUSH
27557: LD_INT 11
27559: PUSH
27560: LD_INT 30
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_VAR 0 12
27571: ARRAY
27572: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27573: LD_VAR 0 18
27577: NOT
27578: IFFALSE 27598
27580: PUSH
27581: LD_INT 40
27583: PPUSH
27584: LD_VAR 0 16
27588: PPUSH
27589: CALL_OW 321
27593: PUSH
27594: LD_INT 2
27596: EQUAL
27597: AND
27598: IFFALSE 27634
27600: PUSH
27601: LD_INT 7
27603: PUSH
27604: LD_VAR 0 5
27608: IN
27609: IFTRUE 27621
27611: PUSH
27612: LD_INT 28
27614: PUSH
27615: LD_VAR 0 5
27619: IN
27620: OR
27621: IFTRUE 27633
27623: PUSH
27624: LD_INT 45
27626: PUSH
27627: LD_VAR 0 5
27631: IN
27632: OR
27633: AND
27634: IFFALSE 27888
// begin hex := GetHexInfo ( x , y ) ;
27636: LD_ADDR_VAR 0 4
27640: PUSH
27641: LD_VAR 0 10
27645: PPUSH
27646: LD_VAR 0 11
27650: PPUSH
27651: CALL_OW 546
27655: ST_TO_ADDR
// if hex [ 1 ] then
27656: LD_VAR 0 4
27660: PUSH
27661: LD_INT 1
27663: ARRAY
27664: IFFALSE 27668
// exit ;
27666: GO 28075
// height := hex [ 2 ] ;
27668: LD_ADDR_VAR 0 15
27672: PUSH
27673: LD_VAR 0 4
27677: PUSH
27678: LD_INT 2
27680: ARRAY
27681: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27682: LD_ADDR_VAR 0 14
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: LD_INT 3
27695: PUSH
27696: LD_INT 5
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: ST_TO_ADDR
// for i in tmp do
27705: LD_ADDR_VAR 0 8
27709: PUSH
27710: LD_VAR 0 14
27714: PUSH
27715: FOR_IN
27716: IFFALSE 27886
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27718: LD_ADDR_VAR 0 9
27722: PUSH
27723: LD_VAR 0 10
27727: PPUSH
27728: LD_VAR 0 8
27732: PPUSH
27733: LD_INT 5
27735: PPUSH
27736: CALL_OW 272
27740: PUSH
27741: LD_VAR 0 11
27745: PPUSH
27746: LD_VAR 0 8
27750: PPUSH
27751: LD_INT 5
27753: PPUSH
27754: CALL_OW 273
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27763: LD_VAR 0 9
27767: PUSH
27768: LD_INT 1
27770: ARRAY
27771: PPUSH
27772: LD_VAR 0 9
27776: PUSH
27777: LD_INT 2
27779: ARRAY
27780: PPUSH
27781: CALL_OW 488
27785: IFFALSE 27884
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27787: LD_ADDR_VAR 0 4
27791: PUSH
27792: LD_VAR 0 9
27796: PUSH
27797: LD_INT 1
27799: ARRAY
27800: PPUSH
27801: LD_VAR 0 9
27805: PUSH
27806: LD_INT 2
27808: ARRAY
27809: PPUSH
27810: CALL_OW 546
27814: ST_TO_ADDR
// if hex [ 1 ] then
27815: LD_VAR 0 4
27819: PUSH
27820: LD_INT 1
27822: ARRAY
27823: IFFALSE 27827
// continue ;
27825: GO 27715
// h := hex [ 2 ] ;
27827: LD_ADDR_VAR 0 13
27831: PUSH
27832: LD_VAR 0 4
27836: PUSH
27837: LD_INT 2
27839: ARRAY
27840: ST_TO_ADDR
// if h + 7 < height then
27841: LD_VAR 0 13
27845: PUSH
27846: LD_INT 7
27848: PLUS
27849: PUSH
27850: LD_VAR 0 15
27854: LESS
27855: IFFALSE 27884
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27857: LD_ADDR_VAR 0 18
27861: PUSH
27862: LD_INT 7
27864: PUSH
27865: LD_INT 28
27867: PUSH
27868: LD_INT 45
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: PUSH
27876: LD_VAR 0 12
27880: ARRAY
27881: ST_TO_ADDR
// break ;
27882: GO 27886
// end ; end ; end ;
27884: GO 27715
27886: POP
27887: POP
// end ; if not weapon then
27888: LD_VAR 0 18
27892: NOT
27893: IFFALSE 27953
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27895: LD_ADDR_VAR 0 5
27899: PUSH
27900: LD_VAR 0 5
27904: PUSH
27905: LD_INT 11
27907: PUSH
27908: LD_INT 30
27910: PUSH
27911: LD_INT 49
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: LIST
27918: DIFF
27919: ST_TO_ADDR
// if not list then
27920: LD_VAR 0 5
27924: NOT
27925: IFFALSE 27929
// exit ;
27927: GO 28075
// weapon := list [ rand ( 1 , list ) ] ;
27929: LD_ADDR_VAR 0 18
27933: PUSH
27934: LD_VAR 0 5
27938: PUSH
27939: LD_INT 1
27941: PPUSH
27942: LD_VAR 0 5
27946: PPUSH
27947: CALL_OW 12
27951: ARRAY
27952: ST_TO_ADDR
// end ; if weapon then
27953: LD_VAR 0 18
27957: IFFALSE 28075
// begin tmp := CostOfWeapon ( weapon ) ;
27959: LD_ADDR_VAR 0 14
27963: PUSH
27964: LD_VAR 0 18
27968: PPUSH
27969: CALL_OW 451
27973: ST_TO_ADDR
// j := GetBase ( tower ) ;
27974: LD_ADDR_VAR 0 9
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 274
27988: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27989: LD_VAR 0 9
27993: PPUSH
27994: LD_INT 1
27996: PPUSH
27997: CALL_OW 275
28001: PUSH
28002: LD_VAR 0 14
28006: PUSH
28007: LD_INT 1
28009: ARRAY
28010: GREATEREQUAL
28011: IFFALSE 28037
28013: PUSH
28014: LD_VAR 0 9
28018: PPUSH
28019: LD_INT 2
28021: PPUSH
28022: CALL_OW 275
28026: PUSH
28027: LD_VAR 0 14
28031: PUSH
28032: LD_INT 2
28034: ARRAY
28035: GREATEREQUAL
28036: AND
28037: IFFALSE 28063
28039: PUSH
28040: LD_VAR 0 9
28044: PPUSH
28045: LD_INT 3
28047: PPUSH
28048: CALL_OW 275
28052: PUSH
28053: LD_VAR 0 14
28057: PUSH
28058: LD_INT 3
28060: ARRAY
28061: GREATEREQUAL
28062: AND
28063: IFFALSE 28075
// result := weapon ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_VAR 0 18
28074: ST_TO_ADDR
// end ; end ;
28075: LD_VAR 0 3
28079: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28080: LD_INT 0
28082: PPUSH
28083: PPUSH
// result := true ;
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_INT 1
28091: ST_TO_ADDR
// if array1 = array2 then
28092: LD_VAR 0 1
28096: PUSH
28097: LD_VAR 0 2
28101: EQUAL
28102: IFFALSE 28162
// begin for i = 1 to array1 do
28104: LD_ADDR_VAR 0 4
28108: PUSH
28109: DOUBLE
28110: LD_INT 1
28112: DEC
28113: ST_TO_ADDR
28114: LD_VAR 0 1
28118: PUSH
28119: FOR_TO
28120: IFFALSE 28158
// if array1 [ i ] <> array2 [ i ] then
28122: LD_VAR 0 1
28126: PUSH
28127: LD_VAR 0 4
28131: ARRAY
28132: PUSH
28133: LD_VAR 0 2
28137: PUSH
28138: LD_VAR 0 4
28142: ARRAY
28143: NONEQUAL
28144: IFFALSE 28156
// begin result := false ;
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 0
28153: ST_TO_ADDR
// break ;
28154: GO 28158
// end ;
28156: GO 28119
28158: POP
28159: POP
// end else
28160: GO 28170
// result := false ;
28162: LD_ADDR_VAR 0 3
28166: PUSH
28167: LD_INT 0
28169: ST_TO_ADDR
// end ;
28170: LD_VAR 0 3
28174: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28175: LD_INT 0
28177: PPUSH
28178: PPUSH
// if not array1 or not array2 then
28179: LD_VAR 0 1
28183: NOT
28184: IFTRUE 28193
28186: PUSH
28187: LD_VAR 0 2
28191: NOT
28192: OR
28193: IFFALSE 28197
// exit ;
28195: GO 28261
// result := true ;
28197: LD_ADDR_VAR 0 3
28201: PUSH
28202: LD_INT 1
28204: ST_TO_ADDR
// for i = 1 to array1 do
28205: LD_ADDR_VAR 0 4
28209: PUSH
28210: DOUBLE
28211: LD_INT 1
28213: DEC
28214: ST_TO_ADDR
28215: LD_VAR 0 1
28219: PUSH
28220: FOR_TO
28221: IFFALSE 28259
// if array1 [ i ] <> array2 [ i ] then
28223: LD_VAR 0 1
28227: PUSH
28228: LD_VAR 0 4
28232: ARRAY
28233: PUSH
28234: LD_VAR 0 2
28238: PUSH
28239: LD_VAR 0 4
28243: ARRAY
28244: NONEQUAL
28245: IFFALSE 28257
// begin result := false ;
28247: LD_ADDR_VAR 0 3
28251: PUSH
28252: LD_INT 0
28254: ST_TO_ADDR
// break ;
28255: GO 28259
// end ;
28257: GO 28220
28259: POP
28260: POP
// end ;
28261: LD_VAR 0 3
28265: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28266: LD_INT 0
28268: PPUSH
28269: PPUSH
28270: PPUSH
// pom := GetBase ( fac ) ;
28271: LD_ADDR_VAR 0 5
28275: PUSH
28276: LD_VAR 0 1
28280: PPUSH
28281: CALL_OW 274
28285: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28286: LD_ADDR_VAR 0 4
28290: PUSH
28291: LD_VAR 0 2
28295: PUSH
28296: LD_INT 1
28298: ARRAY
28299: PPUSH
28300: LD_VAR 0 2
28304: PUSH
28305: LD_INT 2
28307: ARRAY
28308: PPUSH
28309: LD_VAR 0 2
28313: PUSH
28314: LD_INT 3
28316: ARRAY
28317: PPUSH
28318: LD_VAR 0 2
28322: PUSH
28323: LD_INT 4
28325: ARRAY
28326: PPUSH
28327: CALL_OW 449
28331: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28332: LD_ADDR_VAR 0 3
28336: PUSH
28337: LD_VAR 0 5
28341: PPUSH
28342: LD_INT 1
28344: PPUSH
28345: CALL_OW 275
28349: PUSH
28350: LD_VAR 0 4
28354: PUSH
28355: LD_INT 1
28357: ARRAY
28358: GREATEREQUAL
28359: IFFALSE 28385
28361: PUSH
28362: LD_VAR 0 5
28366: PPUSH
28367: LD_INT 2
28369: PPUSH
28370: CALL_OW 275
28374: PUSH
28375: LD_VAR 0 4
28379: PUSH
28380: LD_INT 2
28382: ARRAY
28383: GREATEREQUAL
28384: AND
28385: IFFALSE 28411
28387: PUSH
28388: LD_VAR 0 5
28392: PPUSH
28393: LD_INT 3
28395: PPUSH
28396: CALL_OW 275
28400: PUSH
28401: LD_VAR 0 4
28405: PUSH
28406: LD_INT 3
28408: ARRAY
28409: GREATEREQUAL
28410: AND
28411: ST_TO_ADDR
// end ;
28412: LD_VAR 0 3
28416: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28417: LD_INT 0
28419: PPUSH
28420: PPUSH
28421: PPUSH
28422: PPUSH
// pom := GetBase ( building ) ;
28423: LD_ADDR_VAR 0 3
28427: PUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 274
28437: ST_TO_ADDR
// if not pom then
28438: LD_VAR 0 3
28442: NOT
28443: IFFALSE 28447
// exit ;
28445: GO 28621
// btype := GetBType ( building ) ;
28447: LD_ADDR_VAR 0 5
28451: PUSH
28452: LD_VAR 0 1
28456: PPUSH
28457: CALL_OW 266
28461: ST_TO_ADDR
// if btype = b_armoury then
28462: LD_VAR 0 5
28466: PUSH
28467: LD_INT 4
28469: EQUAL
28470: IFFALSE 28480
// btype := b_barracks ;
28472: LD_ADDR_VAR 0 5
28476: PUSH
28477: LD_INT 5
28479: ST_TO_ADDR
// if btype = b_depot then
28480: LD_VAR 0 5
28484: PUSH
28485: LD_INT 0
28487: EQUAL
28488: IFFALSE 28498
// btype := b_warehouse ;
28490: LD_ADDR_VAR 0 5
28494: PUSH
28495: LD_INT 1
28497: ST_TO_ADDR
// if btype = b_workshop then
28498: LD_VAR 0 5
28502: PUSH
28503: LD_INT 2
28505: EQUAL
28506: IFFALSE 28516
// btype := b_factory ;
28508: LD_ADDR_VAR 0 5
28512: PUSH
28513: LD_INT 3
28515: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28516: LD_ADDR_VAR 0 4
28520: PUSH
28521: LD_VAR 0 5
28525: PPUSH
28526: LD_VAR 0 1
28530: PPUSH
28531: CALL_OW 248
28535: PPUSH
28536: CALL_OW 450
28540: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28541: LD_ADDR_VAR 0 2
28545: PUSH
28546: LD_VAR 0 3
28550: PPUSH
28551: LD_INT 1
28553: PPUSH
28554: CALL_OW 275
28558: PUSH
28559: LD_VAR 0 4
28563: PUSH
28564: LD_INT 1
28566: ARRAY
28567: GREATEREQUAL
28568: IFFALSE 28594
28570: PUSH
28571: LD_VAR 0 3
28575: PPUSH
28576: LD_INT 2
28578: PPUSH
28579: CALL_OW 275
28583: PUSH
28584: LD_VAR 0 4
28588: PUSH
28589: LD_INT 2
28591: ARRAY
28592: GREATEREQUAL
28593: AND
28594: IFFALSE 28620
28596: PUSH
28597: LD_VAR 0 3
28601: PPUSH
28602: LD_INT 3
28604: PPUSH
28605: CALL_OW 275
28609: PUSH
28610: LD_VAR 0 4
28614: PUSH
28615: LD_INT 3
28617: ARRAY
28618: GREATEREQUAL
28619: AND
28620: ST_TO_ADDR
// end ;
28621: LD_VAR 0 2
28625: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28626: LD_INT 0
28628: PPUSH
28629: PPUSH
28630: PPUSH
// pom := GetBase ( building ) ;
28631: LD_ADDR_VAR 0 4
28635: PUSH
28636: LD_VAR 0 1
28640: PPUSH
28641: CALL_OW 274
28645: ST_TO_ADDR
// if not pom then
28646: LD_VAR 0 4
28650: NOT
28651: IFFALSE 28655
// exit ;
28653: GO 28760
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28655: LD_ADDR_VAR 0 5
28659: PUSH
28660: LD_VAR 0 2
28664: PPUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 248
28674: PPUSH
28675: CALL_OW 450
28679: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: LD_INT 1
28692: PPUSH
28693: CALL_OW 275
28697: PUSH
28698: LD_VAR 0 5
28702: PUSH
28703: LD_INT 1
28705: ARRAY
28706: GREATEREQUAL
28707: IFFALSE 28733
28709: PUSH
28710: LD_VAR 0 4
28714: PPUSH
28715: LD_INT 2
28717: PPUSH
28718: CALL_OW 275
28722: PUSH
28723: LD_VAR 0 5
28727: PUSH
28728: LD_INT 2
28730: ARRAY
28731: GREATEREQUAL
28732: AND
28733: IFFALSE 28759
28735: PUSH
28736: LD_VAR 0 4
28740: PPUSH
28741: LD_INT 3
28743: PPUSH
28744: CALL_OW 275
28748: PUSH
28749: LD_VAR 0 5
28753: PUSH
28754: LD_INT 3
28756: ARRAY
28757: GREATEREQUAL
28758: AND
28759: ST_TO_ADDR
// end ;
28760: LD_VAR 0 3
28764: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28765: LD_INT 0
28767: PPUSH
28768: PPUSH
28769: PPUSH
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
// result := false ;
28778: LD_ADDR_VAR 0 8
28782: PUSH
28783: LD_INT 0
28785: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28786: LD_VAR 0 5
28790: NOT
28791: IFTRUE 28800
28793: PUSH
28794: LD_VAR 0 1
28798: NOT
28799: OR
28800: IFTRUE 28809
28802: PUSH
28803: LD_VAR 0 2
28807: NOT
28808: OR
28809: IFTRUE 28818
28811: PUSH
28812: LD_VAR 0 3
28816: NOT
28817: OR
28818: IFFALSE 28822
// exit ;
28820: GO 29648
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28822: LD_ADDR_VAR 0 14
28826: PUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: LD_VAR 0 2
28836: PPUSH
28837: LD_VAR 0 3
28841: PPUSH
28842: LD_VAR 0 4
28846: PPUSH
28847: LD_VAR 0 5
28851: PUSH
28852: LD_INT 1
28854: ARRAY
28855: PPUSH
28856: CALL_OW 248
28860: PPUSH
28861: LD_INT 0
28863: PPUSH
28864: CALL 30929 0 6
28868: ST_TO_ADDR
// if not hexes then
28869: LD_VAR 0 14
28873: NOT
28874: IFFALSE 28878
// exit ;
28876: GO 29648
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28878: LD_ADDR_VAR 0 17
28882: PUSH
28883: LD_VAR 0 5
28887: PPUSH
28888: LD_INT 22
28890: PUSH
28891: LD_VAR 0 13
28895: PPUSH
28896: CALL_OW 255
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: LD_INT 30
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 30
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PPUSH
28937: CALL_OW 72
28941: ST_TO_ADDR
// for i = 1 to hexes do
28942: LD_ADDR_VAR 0 9
28946: PUSH
28947: DOUBLE
28948: LD_INT 1
28950: DEC
28951: ST_TO_ADDR
28952: LD_VAR 0 14
28956: PUSH
28957: FOR_TO
28958: IFFALSE 29646
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28960: LD_ADDR_VAR 0 13
28964: PUSH
28965: LD_VAR 0 14
28969: PUSH
28970: LD_VAR 0 9
28974: ARRAY
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: LD_VAR 0 14
28984: PUSH
28985: LD_VAR 0 9
28989: ARRAY
28990: PUSH
28991: LD_INT 2
28993: ARRAY
28994: PPUSH
28995: CALL_OW 428
28999: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29000: LD_VAR 0 14
29004: PUSH
29005: LD_VAR 0 9
29009: ARRAY
29010: PUSH
29011: LD_INT 1
29013: ARRAY
29014: PPUSH
29015: LD_VAR 0 14
29019: PUSH
29020: LD_VAR 0 9
29024: ARRAY
29025: PUSH
29026: LD_INT 2
29028: ARRAY
29029: PPUSH
29030: CALL_OW 351
29034: IFTRUE 29073
29036: PUSH
29037: LD_VAR 0 14
29041: PUSH
29042: LD_VAR 0 9
29046: ARRAY
29047: PUSH
29048: LD_INT 1
29050: ARRAY
29051: PPUSH
29052: LD_VAR 0 14
29056: PUSH
29057: LD_VAR 0 9
29061: ARRAY
29062: PUSH
29063: LD_INT 2
29065: ARRAY
29066: PPUSH
29067: CALL_OW 488
29071: NOT
29072: OR
29073: IFTRUE 29090
29075: PUSH
29076: LD_VAR 0 13
29080: PPUSH
29081: CALL_OW 247
29085: PUSH
29086: LD_INT 3
29088: EQUAL
29089: OR
29090: IFFALSE 29096
// exit ;
29092: POP
29093: POP
29094: GO 29648
// if not tmp then
29096: LD_VAR 0 13
29100: NOT
29101: IFFALSE 29105
// continue ;
29103: GO 28957
// result := true ;
29105: LD_ADDR_VAR 0 8
29109: PUSH
29110: LD_INT 1
29112: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29113: LD_VAR 0 6
29117: IFFALSE 29134
29119: PUSH
29120: LD_VAR 0 13
29124: PPUSH
29125: CALL_OW 247
29129: PUSH
29130: LD_INT 2
29132: EQUAL
29133: AND
29134: IFFALSE 29151
29136: PUSH
29137: LD_VAR 0 13
29141: PPUSH
29142: CALL_OW 263
29146: PUSH
29147: LD_INT 1
29149: EQUAL
29150: AND
29151: IFFALSE 29315
// begin if IsDrivenBy ( tmp ) then
29153: LD_VAR 0 13
29157: PPUSH
29158: CALL_OW 311
29162: IFFALSE 29166
// continue ;
29164: GO 28957
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29166: LD_VAR 0 6
29170: PPUSH
29171: LD_INT 3
29173: PUSH
29174: LD_INT 60
29176: PUSH
29177: EMPTY
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 55
29189: PUSH
29190: EMPTY
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PPUSH
29201: CALL_OW 72
29205: IFFALSE 29313
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29207: LD_ADDR_VAR 0 18
29211: PUSH
29212: LD_VAR 0 6
29216: PPUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 60
29222: PUSH
29223: EMPTY
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 3
29232: PUSH
29233: LD_INT 55
29235: PUSH
29236: EMPTY
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PPUSH
29247: CALL_OW 72
29251: PUSH
29252: LD_INT 1
29254: ARRAY
29255: ST_TO_ADDR
// if IsInUnit ( driver ) then
29256: LD_VAR 0 18
29260: PPUSH
29261: CALL_OW 310
29265: IFFALSE 29276
// ComExit ( driver ) ;
29267: LD_VAR 0 18
29271: PPUSH
29272: CALL 54929 0 1
// AddComEnterUnit ( driver , tmp ) ;
29276: LD_VAR 0 18
29280: PPUSH
29281: LD_VAR 0 13
29285: PPUSH
29286: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29290: LD_VAR 0 18
29294: PPUSH
29295: LD_VAR 0 7
29299: PPUSH
29300: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29304: LD_VAR 0 18
29308: PPUSH
29309: CALL_OW 181
// end ; continue ;
29313: GO 28957
// end ; if not cleaners or not tmp in cleaners then
29315: LD_VAR 0 6
29319: NOT
29320: IFTRUE 29335
29322: PUSH
29323: LD_VAR 0 13
29327: PUSH
29328: LD_VAR 0 6
29332: IN
29333: NOT
29334: OR
29335: IFFALSE 29644
// begin if dep then
29337: LD_VAR 0 17
29341: IFFALSE 29477
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29343: LD_ADDR_VAR 0 16
29347: PUSH
29348: LD_VAR 0 17
29352: PUSH
29353: LD_INT 1
29355: ARRAY
29356: PPUSH
29357: CALL_OW 250
29361: PPUSH
29362: LD_VAR 0 17
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: CALL_OW 254
29375: PPUSH
29376: LD_INT 5
29378: PPUSH
29379: CALL_OW 272
29383: PUSH
29384: LD_VAR 0 17
29388: PUSH
29389: LD_INT 1
29391: ARRAY
29392: PPUSH
29393: CALL_OW 251
29397: PPUSH
29398: LD_VAR 0 17
29402: PUSH
29403: LD_INT 1
29405: ARRAY
29406: PPUSH
29407: CALL_OW 254
29411: PPUSH
29412: LD_INT 5
29414: PPUSH
29415: CALL_OW 273
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29424: LD_VAR 0 16
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 16
29437: PUSH
29438: LD_INT 2
29440: ARRAY
29441: PPUSH
29442: CALL_OW 488
29446: IFFALSE 29477
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29448: LD_VAR 0 13
29452: PPUSH
29453: LD_VAR 0 16
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PPUSH
29462: LD_VAR 0 16
29466: PUSH
29467: LD_INT 2
29469: ARRAY
29470: PPUSH
29471: CALL_OW 111
// continue ;
29475: GO 28957
// end ; end ; r := GetDir ( tmp ) ;
29477: LD_ADDR_VAR 0 15
29481: PUSH
29482: LD_VAR 0 13
29486: PPUSH
29487: CALL_OW 254
29491: ST_TO_ADDR
// if r = 5 then
29492: LD_VAR 0 15
29496: PUSH
29497: LD_INT 5
29499: EQUAL
29500: IFFALSE 29510
// r := 0 ;
29502: LD_ADDR_VAR 0 15
29506: PUSH
29507: LD_INT 0
29509: ST_TO_ADDR
// for j = r to 5 do
29510: LD_ADDR_VAR 0 10
29514: PUSH
29515: DOUBLE
29516: LD_VAR 0 15
29520: DEC
29521: ST_TO_ADDR
29522: LD_INT 5
29524: PUSH
29525: FOR_TO
29526: IFFALSE 29642
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29528: LD_ADDR_VAR 0 11
29532: PUSH
29533: LD_VAR 0 13
29537: PPUSH
29538: CALL_OW 250
29542: PPUSH
29543: LD_VAR 0 10
29547: PPUSH
29548: LD_INT 2
29550: PPUSH
29551: CALL_OW 272
29555: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29556: LD_ADDR_VAR 0 12
29560: PUSH
29561: LD_VAR 0 13
29565: PPUSH
29566: CALL_OW 251
29570: PPUSH
29571: LD_VAR 0 10
29575: PPUSH
29576: LD_INT 2
29578: PPUSH
29579: CALL_OW 273
29583: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29584: LD_VAR 0 11
29588: PPUSH
29589: LD_VAR 0 12
29593: PPUSH
29594: CALL_OW 488
29598: IFFALSE 29617
29600: PUSH
29601: LD_VAR 0 11
29605: PPUSH
29606: LD_VAR 0 12
29610: PPUSH
29611: CALL_OW 428
29615: NOT
29616: AND
29617: IFFALSE 29640
// begin ComMoveXY ( tmp , _x , _y ) ;
29619: LD_VAR 0 13
29623: PPUSH
29624: LD_VAR 0 11
29628: PPUSH
29629: LD_VAR 0 12
29633: PPUSH
29634: CALL_OW 111
// break ;
29638: GO 29642
// end ; end ;
29640: GO 29525
29642: POP
29643: POP
// end ; end ;
29644: GO 28957
29646: POP
29647: POP
// end ;
29648: LD_VAR 0 8
29652: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29653: LD_INT 0
29655: PPUSH
// result := true ;
29656: LD_ADDR_VAR 0 3
29660: PUSH
29661: LD_INT 1
29663: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29664: LD_VAR 0 2
29668: PUSH
29669: LD_INT 24
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29683
29675: LD_INT 33
29677: DOUBLE
29678: EQUAL
29679: IFTRUE 29683
29681: GO 29708
29683: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29684: LD_ADDR_VAR 0 3
29688: PUSH
29689: LD_INT 32
29691: PPUSH
29692: LD_VAR 0 1
29696: PPUSH
29697: CALL_OW 321
29701: PUSH
29702: LD_INT 2
29704: EQUAL
29705: ST_TO_ADDR
29706: GO 30024
29708: LD_INT 20
29710: DOUBLE
29711: EQUAL
29712: IFTRUE 29716
29714: GO 29741
29716: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: LD_INT 6
29724: PPUSH
29725: LD_VAR 0 1
29729: PPUSH
29730: CALL_OW 321
29734: PUSH
29735: LD_INT 2
29737: EQUAL
29738: ST_TO_ADDR
29739: GO 30024
29741: LD_INT 22
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29755
29747: LD_INT 36
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 29780
29755: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29756: LD_ADDR_VAR 0 3
29760: PUSH
29761: LD_INT 15
29763: PPUSH
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 321
29773: PUSH
29774: LD_INT 2
29776: EQUAL
29777: ST_TO_ADDR
29778: GO 30024
29780: LD_INT 30
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29813
29788: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29789: LD_ADDR_VAR 0 3
29793: PUSH
29794: LD_INT 20
29796: PPUSH
29797: LD_VAR 0 1
29801: PPUSH
29802: CALL_OW 321
29806: PUSH
29807: LD_INT 2
29809: EQUAL
29810: ST_TO_ADDR
29811: GO 30024
29813: LD_INT 28
29815: DOUBLE
29816: EQUAL
29817: IFTRUE 29827
29819: LD_INT 21
29821: DOUBLE
29822: EQUAL
29823: IFTRUE 29827
29825: GO 29852
29827: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29828: LD_ADDR_VAR 0 3
29832: PUSH
29833: LD_INT 21
29835: PPUSH
29836: LD_VAR 0 1
29840: PPUSH
29841: CALL_OW 321
29845: PUSH
29846: LD_INT 2
29848: EQUAL
29849: ST_TO_ADDR
29850: GO 30024
29852: LD_INT 16
29854: DOUBLE
29855: EQUAL
29856: IFTRUE 29860
29858: GO 29885
29860: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29861: LD_ADDR_VAR 0 3
29865: PUSH
29866: LD_INT 84
29868: PPUSH
29869: LD_VAR 0 1
29873: PPUSH
29874: CALL_OW 321
29878: PUSH
29879: LD_INT 2
29881: EQUAL
29882: ST_TO_ADDR
29883: GO 30024
29885: LD_INT 19
29887: DOUBLE
29888: EQUAL
29889: IFTRUE 29899
29891: LD_INT 23
29893: DOUBLE
29894: EQUAL
29895: IFTRUE 29899
29897: GO 29924
29899: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29900: LD_ADDR_VAR 0 3
29904: PUSH
29905: LD_INT 83
29907: PPUSH
29908: LD_VAR 0 1
29912: PPUSH
29913: CALL_OW 321
29917: PUSH
29918: LD_INT 2
29920: EQUAL
29921: ST_TO_ADDR
29922: GO 30024
29924: LD_INT 17
29926: DOUBLE
29927: EQUAL
29928: IFTRUE 29932
29930: GO 29957
29932: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29933: LD_ADDR_VAR 0 3
29937: PUSH
29938: LD_INT 39
29940: PPUSH
29941: LD_VAR 0 1
29945: PPUSH
29946: CALL_OW 321
29950: PUSH
29951: LD_INT 2
29953: EQUAL
29954: ST_TO_ADDR
29955: GO 30024
29957: LD_INT 18
29959: DOUBLE
29960: EQUAL
29961: IFTRUE 29965
29963: GO 29990
29965: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: LD_INT 40
29973: PPUSH
29974: LD_VAR 0 1
29978: PPUSH
29979: CALL_OW 321
29983: PUSH
29984: LD_INT 2
29986: EQUAL
29987: ST_TO_ADDR
29988: GO 30024
29990: LD_INT 27
29992: DOUBLE
29993: EQUAL
29994: IFTRUE 29998
29996: GO 30023
29998: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29999: LD_ADDR_VAR 0 3
30003: PUSH
30004: LD_INT 35
30006: PPUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 321
30016: PUSH
30017: LD_INT 2
30019: EQUAL
30020: ST_TO_ADDR
30021: GO 30024
30023: POP
// end ;
30024: LD_VAR 0 3
30028: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30029: LD_INT 0
30031: PPUSH
30032: PPUSH
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
30040: PPUSH
30041: PPUSH
// result := false ;
30042: LD_ADDR_VAR 0 6
30046: PUSH
30047: LD_INT 0
30049: ST_TO_ADDR
// if btype = b_depot then
30050: LD_VAR 0 2
30054: PUSH
30055: LD_INT 0
30057: EQUAL
30058: IFFALSE 30070
// begin result := true ;
30060: LD_ADDR_VAR 0 6
30064: PUSH
30065: LD_INT 1
30067: ST_TO_ADDR
// exit ;
30068: GO 30924
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30070: LD_VAR 0 1
30074: NOT
30075: IFTRUE 30100
30077: PUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 266
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: IN
30098: NOT
30099: OR
30100: IFTRUE 30109
30102: PUSH
30103: LD_VAR 0 2
30107: NOT
30108: OR
30109: IFTRUE 30145
30111: PUSH
30112: LD_VAR 0 5
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 3
30128: PUSH
30129: LD_INT 4
30131: PUSH
30132: LD_INT 5
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: IN
30143: NOT
30144: OR
30145: IFTRUE 30164
30147: PUSH
30148: LD_VAR 0 3
30152: PPUSH
30153: LD_VAR 0 4
30157: PPUSH
30158: CALL_OW 488
30162: NOT
30163: OR
30164: IFFALSE 30168
// exit ;
30166: GO 30924
// side := GetSide ( depot ) ;
30168: LD_ADDR_VAR 0 9
30172: PUSH
30173: LD_VAR 0 1
30177: PPUSH
30178: CALL_OW 255
30182: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30183: LD_VAR 0 9
30187: PPUSH
30188: LD_VAR 0 2
30192: PPUSH
30193: CALL 29653 0 2
30197: NOT
30198: IFFALSE 30202
// exit ;
30200: GO 30924
// pom := GetBase ( depot ) ;
30202: LD_ADDR_VAR 0 10
30206: PUSH
30207: LD_VAR 0 1
30211: PPUSH
30212: CALL_OW 274
30216: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30217: LD_ADDR_VAR 0 11
30221: PUSH
30222: LD_VAR 0 2
30226: PPUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 248
30236: PPUSH
30237: CALL_OW 450
30241: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30242: LD_VAR 0 10
30246: PPUSH
30247: LD_INT 1
30249: PPUSH
30250: CALL_OW 275
30254: PUSH
30255: LD_VAR 0 11
30259: PUSH
30260: LD_INT 1
30262: ARRAY
30263: GREATEREQUAL
30264: IFFALSE 30290
30266: PUSH
30267: LD_VAR 0 10
30271: PPUSH
30272: LD_INT 2
30274: PPUSH
30275: CALL_OW 275
30279: PUSH
30280: LD_VAR 0 11
30284: PUSH
30285: LD_INT 2
30287: ARRAY
30288: GREATEREQUAL
30289: AND
30290: IFFALSE 30316
30292: PUSH
30293: LD_VAR 0 10
30297: PPUSH
30298: LD_INT 3
30300: PPUSH
30301: CALL_OW 275
30305: PUSH
30306: LD_VAR 0 11
30310: PUSH
30311: LD_INT 3
30313: ARRAY
30314: GREATEREQUAL
30315: AND
30316: NOT
30317: IFFALSE 30321
// exit ;
30319: GO 30924
// if GetBType ( depot ) = b_depot then
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 266
30330: PUSH
30331: LD_INT 0
30333: EQUAL
30334: IFFALSE 30346
// dist := 28 else
30336: LD_ADDR_VAR 0 14
30340: PUSH
30341: LD_INT 28
30343: ST_TO_ADDR
30344: GO 30354
// dist := 36 ;
30346: LD_ADDR_VAR 0 14
30350: PUSH
30351: LD_INT 36
30353: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30354: LD_VAR 0 1
30358: PPUSH
30359: LD_VAR 0 3
30363: PPUSH
30364: LD_VAR 0 4
30368: PPUSH
30369: CALL_OW 297
30373: PUSH
30374: LD_VAR 0 14
30378: GREATER
30379: IFFALSE 30383
// exit ;
30381: GO 30924
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30383: LD_ADDR_VAR 0 12
30387: PUSH
30388: LD_VAR 0 2
30392: PPUSH
30393: LD_VAR 0 3
30397: PPUSH
30398: LD_VAR 0 4
30402: PPUSH
30403: LD_VAR 0 5
30407: PPUSH
30408: LD_VAR 0 1
30412: PPUSH
30413: CALL_OW 248
30417: PPUSH
30418: LD_INT 0
30420: PPUSH
30421: CALL 30929 0 6
30425: ST_TO_ADDR
// if not hexes then
30426: LD_VAR 0 12
30430: NOT
30431: IFFALSE 30435
// exit ;
30433: GO 30924
// hex := GetHexInfo ( x , y ) ;
30435: LD_ADDR_VAR 0 15
30439: PUSH
30440: LD_VAR 0 3
30444: PPUSH
30445: LD_VAR 0 4
30449: PPUSH
30450: CALL_OW 546
30454: ST_TO_ADDR
// if hex [ 1 ] then
30455: LD_VAR 0 15
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: IFFALSE 30467
// exit ;
30465: GO 30924
// height := hex [ 2 ] ;
30467: LD_ADDR_VAR 0 13
30471: PUSH
30472: LD_VAR 0 15
30476: PUSH
30477: LD_INT 2
30479: ARRAY
30480: ST_TO_ADDR
// for i = 1 to hexes do
30481: LD_ADDR_VAR 0 7
30485: PUSH
30486: DOUBLE
30487: LD_INT 1
30489: DEC
30490: ST_TO_ADDR
30491: LD_VAR 0 12
30495: PUSH
30496: FOR_TO
30497: IFFALSE 30841
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30499: LD_VAR 0 12
30503: PUSH
30504: LD_VAR 0 7
30508: ARRAY
30509: PUSH
30510: LD_INT 1
30512: ARRAY
30513: PPUSH
30514: LD_VAR 0 12
30518: PUSH
30519: LD_VAR 0 7
30523: ARRAY
30524: PUSH
30525: LD_INT 2
30527: ARRAY
30528: PPUSH
30529: CALL_OW 488
30533: NOT
30534: IFTRUE 30576
30536: PUSH
30537: LD_VAR 0 12
30541: PUSH
30542: LD_VAR 0 7
30546: ARRAY
30547: PUSH
30548: LD_INT 1
30550: ARRAY
30551: PPUSH
30552: LD_VAR 0 12
30556: PUSH
30557: LD_VAR 0 7
30561: ARRAY
30562: PUSH
30563: LD_INT 2
30565: ARRAY
30566: PPUSH
30567: CALL_OW 428
30571: PUSH
30572: LD_INT 0
30574: GREATER
30575: OR
30576: IFTRUE 30614
30578: PUSH
30579: LD_VAR 0 12
30583: PUSH
30584: LD_VAR 0 7
30588: ARRAY
30589: PUSH
30590: LD_INT 1
30592: ARRAY
30593: PPUSH
30594: LD_VAR 0 12
30598: PUSH
30599: LD_VAR 0 7
30603: ARRAY
30604: PUSH
30605: LD_INT 2
30607: ARRAY
30608: PPUSH
30609: CALL_OW 351
30613: OR
30614: IFFALSE 30620
// exit ;
30616: POP
30617: POP
30618: GO 30924
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30620: LD_ADDR_VAR 0 8
30624: PUSH
30625: LD_VAR 0 12
30629: PUSH
30630: LD_VAR 0 7
30634: ARRAY
30635: PUSH
30636: LD_INT 1
30638: ARRAY
30639: PPUSH
30640: LD_VAR 0 12
30644: PUSH
30645: LD_VAR 0 7
30649: ARRAY
30650: PUSH
30651: LD_INT 2
30653: ARRAY
30654: PPUSH
30655: CALL_OW 546
30659: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30660: LD_VAR 0 8
30664: PUSH
30665: LD_INT 1
30667: ARRAY
30668: IFTRUE 30690
30670: PUSH
30671: LD_VAR 0 8
30675: PUSH
30676: LD_INT 2
30678: ARRAY
30679: PUSH
30680: LD_VAR 0 13
30684: PUSH
30685: LD_INT 2
30687: PLUS
30688: GREATER
30689: OR
30690: IFTRUE 30712
30692: PUSH
30693: LD_VAR 0 8
30697: PUSH
30698: LD_INT 2
30700: ARRAY
30701: PUSH
30702: LD_VAR 0 13
30706: PUSH
30707: LD_INT 2
30709: MINUS
30710: LESS
30711: OR
30712: IFTRUE 30780
30714: PUSH
30715: LD_VAR 0 8
30719: PUSH
30720: LD_INT 3
30722: ARRAY
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: LD_INT 8
30729: PUSH
30730: LD_INT 9
30732: PUSH
30733: LD_INT 10
30735: PUSH
30736: LD_INT 11
30738: PUSH
30739: LD_INT 12
30741: PUSH
30742: LD_INT 13
30744: PUSH
30745: LD_INT 16
30747: PUSH
30748: LD_INT 17
30750: PUSH
30751: LD_INT 18
30753: PUSH
30754: LD_INT 19
30756: PUSH
30757: LD_INT 20
30759: PUSH
30760: LD_INT 21
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: IN
30778: NOT
30779: OR
30780: IFTRUE 30793
30782: PUSH
30783: LD_VAR 0 8
30787: PUSH
30788: LD_INT 5
30790: ARRAY
30791: NOT
30792: OR
30793: IFTRUE 30833
30795: PUSH
30796: LD_VAR 0 8
30800: PUSH
30801: LD_INT 6
30803: ARRAY
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 2
30810: PUSH
30811: LD_INT 7
30813: PUSH
30814: LD_INT 9
30816: PUSH
30817: LD_INT 10
30819: PUSH
30820: LD_INT 11
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: IN
30831: NOT
30832: OR
30833: IFFALSE 30839
// exit ;
30835: POP
30836: POP
30837: GO 30924
// end ;
30839: GO 30496
30841: POP
30842: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30843: LD_VAR 0 9
30847: PPUSH
30848: LD_VAR 0 3
30852: PPUSH
30853: LD_VAR 0 4
30857: PPUSH
30858: LD_INT 20
30860: PPUSH
30861: CALL 22743 0 4
30865: PUSH
30866: LD_INT 4
30868: ARRAY
30869: IFFALSE 30873
// exit ;
30871: GO 30924
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30873: LD_VAR 0 2
30877: PUSH
30878: LD_INT 29
30880: PUSH
30881: LD_INT 30
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: IN
30888: IFFALSE 30912
30890: PUSH
30891: LD_VAR 0 3
30895: PPUSH
30896: LD_VAR 0 4
30900: PPUSH
30901: LD_VAR 0 9
30905: PPUSH
30906: CALL_OW 440
30910: NOT
30911: AND
30912: IFFALSE 30916
// exit ;
30914: GO 30924
// result := true ;
30916: LD_ADDR_VAR 0 6
30920: PUSH
30921: LD_INT 1
30923: ST_TO_ADDR
// end ;
30924: LD_VAR 0 6
30928: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30929: LD_INT 0
30931: PPUSH
30932: PPUSH
30933: PPUSH
30934: PPUSH
30935: PPUSH
30936: PPUSH
30937: PPUSH
30938: PPUSH
30939: PPUSH
30940: PPUSH
30941: PPUSH
30942: PPUSH
30943: PPUSH
30944: PPUSH
30945: PPUSH
30946: PPUSH
30947: PPUSH
30948: PPUSH
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
// result = [ ] ;
30989: LD_ADDR_VAR 0 7
30993: PUSH
30994: EMPTY
30995: ST_TO_ADDR
// temp_list = [ ] ;
30996: LD_ADDR_VAR 0 9
31000: PUSH
31001: EMPTY
31002: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31003: LD_VAR 0 4
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: LD_INT 3
31019: PUSH
31020: LD_INT 4
31022: PUSH
31023: LD_INT 5
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: IN
31034: NOT
31035: IFTRUE 31078
31037: PUSH
31038: LD_VAR 0 1
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: IN
31053: IFFALSE 31077
31055: PUSH
31056: LD_VAR 0 5
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: IN
31075: NOT
31076: AND
31077: OR
31078: IFFALSE 31082
// exit ;
31080: GO 49481
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31082: LD_VAR 0 1
31086: PUSH
31087: LD_INT 6
31089: PUSH
31090: LD_INT 7
31092: PUSH
31093: LD_INT 8
31095: PUSH
31096: LD_INT 13
31098: PUSH
31099: LD_INT 12
31101: PUSH
31102: LD_INT 15
31104: PUSH
31105: LD_INT 11
31107: PUSH
31108: LD_INT 14
31110: PUSH
31111: LD_INT 10
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: IN
31125: IFFALSE 31135
// btype = b_lab ;
31127: LD_ADDR_VAR 0 1
31131: PUSH
31132: LD_INT 6
31134: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31135: LD_VAR 0 6
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: IN
31154: NOT
31155: IFTRUE 31223
31157: PUSH
31158: LD_VAR 0 1
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: LD_INT 6
31177: PUSH
31178: LD_INT 36
31180: PUSH
31181: LD_INT 4
31183: PUSH
31184: LD_INT 5
31186: PUSH
31187: LD_INT 31
31189: PUSH
31190: LD_INT 32
31192: PUSH
31193: LD_INT 33
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: IN
31209: NOT
31210: IFFALSE 31222
31212: PUSH
31213: LD_VAR 0 6
31217: PUSH
31218: LD_INT 1
31220: EQUAL
31221: AND
31222: OR
31223: IFTRUE 31255
31225: PUSH
31226: LD_VAR 0 1
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: LD_INT 3
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: IN
31241: NOT
31242: IFFALSE 31254
31244: PUSH
31245: LD_VAR 0 6
31249: PUSH
31250: LD_INT 2
31252: EQUAL
31253: AND
31254: OR
31255: IFFALSE 31265
// mode = 0 ;
31257: LD_ADDR_VAR 0 6
31261: PUSH
31262: LD_INT 0
31264: ST_TO_ADDR
// case mode of 0 :
31265: LD_VAR 0 6
31269: PUSH
31270: LD_INT 0
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 42731
31278: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31279: LD_ADDR_VAR 0 11
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: LD_INT 1
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 2
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 3
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31472: LD_ADDR_VAR 0 12
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 0
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: NEG
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 2
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: NEG
31596: PUSH
31597: LD_INT 0
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 3
31629: NEG
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 3
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31668: LD_ADDR_VAR 0 13
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: LD_INT 0
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: LD_INT 0
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 1
31737: NEG
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: NEG
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 3
31839: NEG
31840: PUSH
31841: LD_INT 3
31843: NEG
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31867: LD_ADDR_VAR 0 14
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: LD_INT 2
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: LD_INT 3
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32063: LD_ADDR_VAR 0 15
32067: PUSH
32068: LD_INT 0
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 1
32132: NEG
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 2
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 2
32186: NEG
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 3
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 3
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32256: LD_ADDR_VAR 0 16
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: NEG
32338: PUSH
32339: LD_INT 2
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 3
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32449: LD_ADDR_VAR 0 17
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 0
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: NEG
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 1
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: NEG
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32679: LD_ADDR_VAR 0 18
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 0
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 2
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 2
32866: NEG
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 2
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32909: LD_ADDR_VAR 0 19
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 2
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: NEG
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 2
33112: NEG
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33139: LD_ADDR_VAR 0 20
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: NEG
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: LD_INT 2
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 2
33315: NEG
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: NEG
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 2
33338: NEG
33339: PUSH
33340: LD_INT 2
33342: NEG
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33369: LD_ADDR_VAR 0 21
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 1
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 0
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: LD_INT 0
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 2
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 2
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: NEG
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 2
33568: NEG
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33599: LD_ADDR_VAR 0 22
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: NEG
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33829: LD_ADDR_VAR 0 23
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 1
33910: NEG
33911: PUSH
33912: LD_INT 2
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: LD_INT 2
33925: NEG
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 2
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 2
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 2
34028: NEG
34029: PUSH
34030: LD_INT 2
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: LD_INT 3
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: LD_INT 3
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 2
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34109: LD_ADDR_VAR 0 24
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 0
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 0
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: NEG
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 0
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 2
34296: NEG
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 2
34308: NEG
34309: PUSH
34310: LD_INT 2
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 2
34323: NEG
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34385: LD_ADDR_VAR 0 25
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 1
34466: NEG
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: NEG
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: NEG
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 3
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 3
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34659: LD_ADDR_VAR 0 26
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 2
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 3
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34935: LD_ADDR_VAR 0 27
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: LD_INT 2
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 2
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 1
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: LD_INT 0
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: NEG
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 2
35122: NEG
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: NEG
35158: PUSH
35159: LD_INT 1
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 3
35168: NEG
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 3
35180: NEG
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35215: LD_ADDR_VAR 0 28
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 1
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 1
35296: NEG
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 2
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 2
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 2
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 2
35391: NEG
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 2
35414: NEG
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: NEG
35427: PUSH
35428: LD_INT 3
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 3
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 3
35450: NEG
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 3
35462: NEG
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35497: LD_ADDR_VAR 0 29
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: LD_INT 0
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: NEG
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: LD_INT 1
35604: NEG
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: NEG
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: NEG
35676: PUSH
35677: LD_INT 2
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: LD_INT 3
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 3
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 3
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 3
35741: NEG
35742: PUSH
35743: LD_INT 2
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35776: LD_ADDR_VAR 0 30
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 2
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 2
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 3
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 3
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 3
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: NEG
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 3
36019: NEG
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36054: LD_ADDR_VAR 0 31
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: LD_INT 0
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: NEG
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 2
36219: NEG
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: NEG
36232: PUSH
36233: LD_INT 2
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: LD_INT 3
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 2
36255: PUSH
36256: LD_INT 1
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 3
36297: NEG
36298: PUSH
36299: LD_INT 2
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36332: LD_ADDR_VAR 0 32
36336: PUSH
36337: LD_INT 0
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: NEG
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: LD_INT 3
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 2
36536: NEG
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 3
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: LD_INT 3
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: NEG
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 3
36575: NEG
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36610: LD_ADDR_VAR 0 33
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 3
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: LD_INT 1
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 3
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: LD_INT 2
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 3
36854: NEG
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36889: LD_ADDR_VAR 0 34
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 1
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: NEG
37069: PUSH
37070: LD_INT 2
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 3
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 3
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 3
37134: NEG
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37169: LD_ADDR_VAR 0 35
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: NEG
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37281: LD_ADDR_VAR 0 36
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 0
37298: PUSH
37299: LD_INT 1
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 1
37350: NEG
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 2
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37393: LD_ADDR_VAR 0 37
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 0
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37505: LD_ADDR_VAR 0 38
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 0
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37617: LD_ADDR_VAR 0 39
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37729: LD_ADDR_VAR 0 40
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 1
37821: NEG
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37841: LD_ADDR_VAR 0 41
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 0
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 0
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 1
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 1
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 1
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: NEG
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 3
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: NEG
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: NEG
38139: PUSH
38140: LD_INT 2
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 3
38150: NEG
38151: PUSH
38152: LD_INT 3
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38191: LD_ADDR_VAR 0 42
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: NEG
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: NEG
38382: PUSH
38383: LD_INT 3
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 3
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 3
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: LD_INT 2
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 3
38500: NEG
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38541: LD_ADDR_VAR 0 43
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 1
38561: NEG
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: LD_INT 2
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 2
38707: NEG
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: LD_INT 3
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 0
38742: PUSH
38743: LD_INT 3
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 3
38775: PUSH
38776: LD_INT 0
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 3
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 3
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38889: LD_ADDR_VAR 0 44
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: NEG
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 2
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 2
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 3
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 3
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 3
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 3
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 3
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39239: LD_ADDR_VAR 0 45
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 0
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 2
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 3
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 3
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 3
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 3
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 3
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 3
39548: NEG
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39589: LD_ADDR_VAR 0 46
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: NEG
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: LD_INT 1
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 0
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 3
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 3
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 2
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 2
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 3
39885: NEG
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 3
39896: NEG
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39937: LD_ADDR_VAR 0 47
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 0
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: NEG
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: NEG
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40088: LD_ADDR_VAR 0 48
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: NEG
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 1
40157: NEG
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 2
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40235: LD_ADDR_VAR 0 49
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 0
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 1
40293: NEG
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40379: LD_ADDR_VAR 0 50
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 1
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 2
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40523: LD_ADDR_VAR 0 51
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40670: LD_ADDR_VAR 0 52
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40821: LD_ADDR_VAR 0 53
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41051: LD_ADDR_VAR 0 54
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 2
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41281: LD_ADDR_VAR 0 55
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 0
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 2
41480: NEG
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41511: LD_ADDR_VAR 0 56
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 2
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 2
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 2
41710: NEG
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41741: LD_ADDR_VAR 0 57
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 2
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: NEG
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41971: LD_ADDR_VAR 0 58
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 2
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42201: LD_ADDR_VAR 0 59
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 1
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42289: LD_ADDR_VAR 0 60
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42377: LD_ADDR_VAR 0 61
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42465: LD_ADDR_VAR 0 62
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42553: LD_ADDR_VAR 0 63
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42641: LD_ADDR_VAR 0 64
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: ST_TO_ADDR
// end ; 1 :
42729: GO 48626
42731: LD_INT 1
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42739
42737: GO 45362
42739: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42740: LD_ADDR_VAR 0 11
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 3
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42784: LD_ADDR_VAR 0 12
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42825: LD_ADDR_VAR 0 13
42829: PUSH
42830: LD_INT 3
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42865: LD_ADDR_VAR 0 14
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42906: LD_ADDR_VAR 0 15
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 1
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 3
42924: NEG
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 3
42935: NEG
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42950: LD_ADDR_VAR 0 16
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: LD_INT 3
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42996: LD_ADDR_VAR 0 17
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43040: LD_ADDR_VAR 0 18
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43081: LD_ADDR_VAR 0 19
43085: PUSH
43086: LD_INT 3
43088: PUSH
43089: LD_INT 2
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 3
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43121: LD_ADDR_VAR 0 20
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43162: LD_ADDR_VAR 0 21
43166: PUSH
43167: LD_INT 2
43169: NEG
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: NEG
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: LIST
43205: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43206: LD_ADDR_VAR 0 22
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: LD_INT 3
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 3
43237: NEG
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: LIST
43251: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43252: LD_ADDR_VAR 0 23
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 3
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 4
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 3
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43296: LD_ADDR_VAR 0 24
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 3
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 4
43324: PUSH
43325: LD_INT 1
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43337: LD_ADDR_VAR 0 25
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 4
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 4
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: LIST
43376: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43377: LD_ADDR_VAR 0 26
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 4
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 3
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43418: LD_ADDR_VAR 0 27
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 4
43447: NEG
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: LIST
43461: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43462: LD_ADDR_VAR 0 28
43466: PUSH
43467: LD_INT 3
43469: NEG
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 3
43481: NEG
43482: PUSH
43483: LD_INT 4
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 4
43493: NEG
43494: PUSH
43495: LD_INT 3
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: LIST
43507: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43508: LD_ADDR_VAR 0 29
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 3
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 4
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: LD_INT 4
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 3
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 5
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 5
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 4
43609: NEG
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 6
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: LD_INT 6
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: LD_INT 5
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43663: LD_ADDR_VAR 0 30
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 3
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 3
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 4
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 4
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 4
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 5
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 5
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 5
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 6
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 6
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43806: LD_ADDR_VAR 0 31
43810: PUSH
43811: LD_INT 3
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 4
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 4
43853: PUSH
43854: LD_INT 4
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: LD_INT 4
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 5
43873: PUSH
43874: LD_INT 4
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 5
43883: PUSH
43884: LD_INT 5
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 4
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 6
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 6
43913: PUSH
43914: LD_INT 6
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 5
43923: PUSH
43924: LD_INT 6
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43945: LD_ADDR_VAR 0 32
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 3
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 4
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 4
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 3
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 5
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 5
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 4
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 6
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 6
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: LD_INT 5
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44088: LD_ADDR_VAR 0 33
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 3
44117: NEG
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 3
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 4
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 4
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 4
44163: NEG
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 5
44174: NEG
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 5
44185: NEG
44186: PUSH
44187: LD_INT 1
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 5
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 6
44208: NEG
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 6
44219: NEG
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44243: LD_ADDR_VAR 0 34
44247: PUSH
44248: LD_INT 2
44250: NEG
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 3
44262: NEG
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 3
44274: NEG
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: NEG
44287: PUSH
44288: LD_INT 4
44290: NEG
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 4
44298: NEG
44299: PUSH
44300: LD_INT 3
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 4
44310: NEG
44311: PUSH
44312: LD_INT 4
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 4
44322: NEG
44323: PUSH
44324: LD_INT 5
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 5
44334: NEG
44335: PUSH
44336: LD_INT 4
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 5
44346: NEG
44347: PUSH
44348: LD_INT 5
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 5
44358: NEG
44359: PUSH
44360: LD_INT 6
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 6
44370: NEG
44371: PUSH
44372: LD_INT 5
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 6
44382: NEG
44383: PUSH
44384: LD_INT 6
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44406: LD_ADDR_VAR 0 41
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44450: LD_ADDR_VAR 0 42
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: LIST
44490: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44491: LD_ADDR_VAR 0 43
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44531: LD_ADDR_VAR 0 44
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44572: LD_ADDR_VAR 0 45
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: LIST
44615: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44616: LD_ADDR_VAR 0 46
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 3
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44662: LD_ADDR_VAR 0 47
44666: PUSH
44667: LD_INT 2
44669: NEG
44670: PUSH
44671: LD_INT 3
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44695: LD_ADDR_VAR 0 48
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44726: LD_ADDR_VAR 0 49
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 3
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44755: LD_ADDR_VAR 0 50
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 3
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44784: LD_ADDR_VAR 0 51
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44815: LD_ADDR_VAR 0 52
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 3
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44848: LD_ADDR_VAR 0 53
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: LD_INT 3
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44892: LD_ADDR_VAR 0 54
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 1
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44933: LD_ADDR_VAR 0 55
44937: PUSH
44938: LD_INT 3
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 3
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: LIST
44972: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44973: LD_ADDR_VAR 0 56
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45014: LD_ADDR_VAR 0 57
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45058: LD_ADDR_VAR 0 58
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 3
45089: NEG
45090: PUSH
45091: LD_INT 3
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45104: LD_ADDR_VAR 0 59
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45148: LD_ADDR_VAR 0 60
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45189: LD_ADDR_VAR 0 61
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45229: LD_ADDR_VAR 0 62
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45270: LD_ADDR_VAR 0 63
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45314: LD_ADDR_VAR 0 64
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: LIST
45359: ST_TO_ADDR
// end ; 2 :
45360: GO 48626
45362: LD_INT 2
45364: DOUBLE
45365: EQUAL
45366: IFTRUE 45370
45368: GO 48625
45370: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45371: LD_ADDR_VAR 0 29
45375: PUSH
45376: LD_INT 4
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 4
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 5
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 5
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 4
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 3
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 3
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 5
45461: PUSH
45462: LD_INT 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 3
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 3
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 4
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 4
45501: PUSH
45502: LD_INT 4
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 4
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 4
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 4
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 4
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 4
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 5
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 5
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 4
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 3
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 5
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 2
45677: NEG
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 3
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 4
45710: NEG
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 4
45721: NEG
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 4
45733: NEG
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 4
45756: NEG
45757: PUSH
45758: LD_INT 4
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 4
45768: NEG
45769: PUSH
45770: LD_INT 5
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: LD_INT 4
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 3
45792: NEG
45793: PUSH
45794: LD_INT 3
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 4
45804: NEG
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 5
45816: NEG
45817: PUSH
45818: LD_INT 4
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 5
45828: NEG
45829: PUSH
45830: LD_INT 5
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: LD_INT 5
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 5
45852: NEG
45853: PUSH
45854: LD_INT 3
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45909: LD_ADDR_VAR 0 30
45913: PUSH
45914: LD_INT 4
45916: PUSH
45917: LD_INT 4
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 4
45926: PUSH
45927: LD_INT 3
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 5
45936: PUSH
45937: LD_INT 4
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: PUSH
45947: LD_INT 5
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 4
45956: PUSH
45957: LD_INT 5
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 3
45966: PUSH
45967: LD_INT 4
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 3
45976: PUSH
45977: LD_INT 3
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 5
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: LD_INT 5
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 4
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: LD_INT 4
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: LD_INT 3
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: NEG
46068: PUSH
46069: LD_INT 2
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: LD_INT 4
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: NEG
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 4
46110: NEG
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 3
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 3
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 4
46144: NEG
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 5
46155: NEG
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 5
46166: NEG
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 5
46178: NEG
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: NEG
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 4
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 3
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: NEG
46250: PUSH
46251: LD_INT 2
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 4
46261: NEG
46262: PUSH
46263: LD_INT 3
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 4
46273: NEG
46274: PUSH
46275: LD_INT 4
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 4
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 4
46297: NEG
46298: PUSH
46299: LD_INT 2
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 4
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 5
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 4
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 3
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 4
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 5
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: PUSH
46389: LD_INT 3
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 5
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46456: LD_ADDR_VAR 0 31
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 4
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 4
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: LD_INT 5
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: LD_INT 5
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 4
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: LD_INT 3
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 5
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: NEG
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 4
46612: NEG
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 4
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 4
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 4
46658: NEG
46659: PUSH
46660: LD_INT 4
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 4
46670: NEG
46671: PUSH
46672: LD_INT 5
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: LD_INT 4
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 4
46706: NEG
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 5
46718: NEG
46719: PUSH
46720: LD_INT 4
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 5
46730: NEG
46731: PUSH
46732: LD_INT 5
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 5
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 5
46754: NEG
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 3
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 4
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 3
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 4
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 4
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 4
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 4
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 5
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 4
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 5
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47006: LD_ADDR_VAR 0 32
47010: PUSH
47011: LD_INT 4
47013: NEG
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 4
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 4
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 5
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 5
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 5
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 3
47115: NEG
47116: PUSH
47117: LD_INT 3
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: NEG
47128: PUSH
47129: LD_INT 4
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 4
47175: NEG
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 4
47187: NEG
47188: PUSH
47189: LD_INT 4
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 4
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 4
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 4
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 5
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 3
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 4
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 5
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 3
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: LD_INT 5
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 4
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 2
47400: NEG
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 4
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: PUSH
47419: LD_INT 4
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 4
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 5
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 5
47448: PUSH
47449: LD_INT 5
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 4
47458: PUSH
47459: LD_INT 5
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 3
47468: PUSH
47469: LD_INT 4
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 5
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 3
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47553: LD_ADDR_VAR 0 33
47557: PUSH
47558: LD_INT 4
47560: NEG
47561: PUSH
47562: LD_INT 4
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: NEG
47573: PUSH
47574: LD_INT 5
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: LD_INT 4
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: NEG
47597: PUSH
47598: LD_INT 3
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 4
47608: NEG
47609: PUSH
47610: LD_INT 3
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 5
47620: NEG
47621: PUSH
47622: LD_INT 4
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 5
47632: NEG
47633: PUSH
47634: LD_INT 5
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: NEG
47645: PUSH
47646: LD_INT 5
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 5
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: LD_INT 4
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 4
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: NEG
47759: PUSH
47760: LD_INT 4
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 4
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 4
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 5
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 5
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 4
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 1
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 3
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 5
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 4
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 4
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 4
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 4
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 4
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 4
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 5
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 5
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 4
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 5
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48091: LD_ADDR_VAR 0 34
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 4
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 5
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 4
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 3
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 3
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 4
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: LD_INT 5
48169: NEG
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: LD_INT 5
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 3
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 4
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 4
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 4
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: LD_INT 4
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 5
48323: PUSH
48324: LD_INT 5
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: LD_INT 5
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 5
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: LD_INT 5
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 4
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 4
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 4
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 4
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 4
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 5
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 5
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 5
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// end ; end ;
48623: GO 48626
48625: POP
// case btype of b_depot , b_warehouse :
48626: LD_VAR 0 1
48630: PUSH
48631: LD_INT 0
48633: DOUBLE
48634: EQUAL
48635: IFTRUE 48645
48637: LD_INT 1
48639: DOUBLE
48640: EQUAL
48641: IFTRUE 48645
48643: GO 48846
48645: POP
// case nation of nation_american :
48646: LD_VAR 0 5
48650: PUSH
48651: LD_INT 1
48653: DOUBLE
48654: EQUAL
48655: IFTRUE 48659
48657: GO 48715
48659: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48660: LD_ADDR_VAR 0 9
48664: PUSH
48665: LD_VAR 0 11
48669: PUSH
48670: LD_VAR 0 12
48674: PUSH
48675: LD_VAR 0 13
48679: PUSH
48680: LD_VAR 0 14
48684: PUSH
48685: LD_VAR 0 15
48689: PUSH
48690: LD_VAR 0 16
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: PUSH
48703: LD_VAR 0 4
48707: PUSH
48708: LD_INT 1
48710: PLUS
48711: ARRAY
48712: ST_TO_ADDR
48713: GO 48844
48715: LD_INT 2
48717: DOUBLE
48718: EQUAL
48719: IFTRUE 48723
48721: GO 48779
48723: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48724: LD_ADDR_VAR 0 9
48728: PUSH
48729: LD_VAR 0 17
48733: PUSH
48734: LD_VAR 0 18
48738: PUSH
48739: LD_VAR 0 19
48743: PUSH
48744: LD_VAR 0 20
48748: PUSH
48749: LD_VAR 0 21
48753: PUSH
48754: LD_VAR 0 22
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: PUSH
48767: LD_VAR 0 4
48771: PUSH
48772: LD_INT 1
48774: PLUS
48775: ARRAY
48776: ST_TO_ADDR
48777: GO 48844
48779: LD_INT 3
48781: DOUBLE
48782: EQUAL
48783: IFTRUE 48787
48785: GO 48843
48787: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48788: LD_ADDR_VAR 0 9
48792: PUSH
48793: LD_VAR 0 23
48797: PUSH
48798: LD_VAR 0 24
48802: PUSH
48803: LD_VAR 0 25
48807: PUSH
48808: LD_VAR 0 26
48812: PUSH
48813: LD_VAR 0 27
48817: PUSH
48818: LD_VAR 0 28
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: PUSH
48831: LD_VAR 0 4
48835: PUSH
48836: LD_INT 1
48838: PLUS
48839: ARRAY
48840: ST_TO_ADDR
48841: GO 48844
48843: POP
48844: GO 49399
48846: LD_INT 2
48848: DOUBLE
48849: EQUAL
48850: IFTRUE 48860
48852: LD_INT 3
48854: DOUBLE
48855: EQUAL
48856: IFTRUE 48860
48858: GO 48916
48860: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48861: LD_ADDR_VAR 0 9
48865: PUSH
48866: LD_VAR 0 29
48870: PUSH
48871: LD_VAR 0 30
48875: PUSH
48876: LD_VAR 0 31
48880: PUSH
48881: LD_VAR 0 32
48885: PUSH
48886: LD_VAR 0 33
48890: PUSH
48891: LD_VAR 0 34
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: PUSH
48904: LD_VAR 0 4
48908: PUSH
48909: LD_INT 1
48911: PLUS
48912: ARRAY
48913: ST_TO_ADDR
48914: GO 49399
48916: LD_INT 16
48918: DOUBLE
48919: EQUAL
48920: IFTRUE 48978
48922: LD_INT 17
48924: DOUBLE
48925: EQUAL
48926: IFTRUE 48978
48928: LD_INT 18
48930: DOUBLE
48931: EQUAL
48932: IFTRUE 48978
48934: LD_INT 19
48936: DOUBLE
48937: EQUAL
48938: IFTRUE 48978
48940: LD_INT 22
48942: DOUBLE
48943: EQUAL
48944: IFTRUE 48978
48946: LD_INT 20
48948: DOUBLE
48949: EQUAL
48950: IFTRUE 48978
48952: LD_INT 21
48954: DOUBLE
48955: EQUAL
48956: IFTRUE 48978
48958: LD_INT 23
48960: DOUBLE
48961: EQUAL
48962: IFTRUE 48978
48964: LD_INT 24
48966: DOUBLE
48967: EQUAL
48968: IFTRUE 48978
48970: LD_INT 25
48972: DOUBLE
48973: EQUAL
48974: IFTRUE 48978
48976: GO 49034
48978: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48979: LD_ADDR_VAR 0 9
48983: PUSH
48984: LD_VAR 0 35
48988: PUSH
48989: LD_VAR 0 36
48993: PUSH
48994: LD_VAR 0 37
48998: PUSH
48999: LD_VAR 0 38
49003: PUSH
49004: LD_VAR 0 39
49008: PUSH
49009: LD_VAR 0 40
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: PUSH
49022: LD_VAR 0 4
49026: PUSH
49027: LD_INT 1
49029: PLUS
49030: ARRAY
49031: ST_TO_ADDR
49032: GO 49399
49034: LD_INT 6
49036: DOUBLE
49037: EQUAL
49038: IFTRUE 49090
49040: LD_INT 7
49042: DOUBLE
49043: EQUAL
49044: IFTRUE 49090
49046: LD_INT 8
49048: DOUBLE
49049: EQUAL
49050: IFTRUE 49090
49052: LD_INT 13
49054: DOUBLE
49055: EQUAL
49056: IFTRUE 49090
49058: LD_INT 12
49060: DOUBLE
49061: EQUAL
49062: IFTRUE 49090
49064: LD_INT 15
49066: DOUBLE
49067: EQUAL
49068: IFTRUE 49090
49070: LD_INT 11
49072: DOUBLE
49073: EQUAL
49074: IFTRUE 49090
49076: LD_INT 14
49078: DOUBLE
49079: EQUAL
49080: IFTRUE 49090
49082: LD_INT 10
49084: DOUBLE
49085: EQUAL
49086: IFTRUE 49090
49088: GO 49146
49090: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49091: LD_ADDR_VAR 0 9
49095: PUSH
49096: LD_VAR 0 41
49100: PUSH
49101: LD_VAR 0 42
49105: PUSH
49106: LD_VAR 0 43
49110: PUSH
49111: LD_VAR 0 44
49115: PUSH
49116: LD_VAR 0 45
49120: PUSH
49121: LD_VAR 0 46
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: PUSH
49134: LD_VAR 0 4
49138: PUSH
49139: LD_INT 1
49141: PLUS
49142: ARRAY
49143: ST_TO_ADDR
49144: GO 49399
49146: LD_INT 36
49148: DOUBLE
49149: EQUAL
49150: IFTRUE 49154
49152: GO 49210
49154: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49155: LD_ADDR_VAR 0 9
49159: PUSH
49160: LD_VAR 0 47
49164: PUSH
49165: LD_VAR 0 48
49169: PUSH
49170: LD_VAR 0 49
49174: PUSH
49175: LD_VAR 0 50
49179: PUSH
49180: LD_VAR 0 51
49184: PUSH
49185: LD_VAR 0 52
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: PUSH
49198: LD_VAR 0 4
49202: PUSH
49203: LD_INT 1
49205: PLUS
49206: ARRAY
49207: ST_TO_ADDR
49208: GO 49399
49210: LD_INT 4
49212: DOUBLE
49213: EQUAL
49214: IFTRUE 49236
49216: LD_INT 5
49218: DOUBLE
49219: EQUAL
49220: IFTRUE 49236
49222: LD_INT 34
49224: DOUBLE
49225: EQUAL
49226: IFTRUE 49236
49228: LD_INT 37
49230: DOUBLE
49231: EQUAL
49232: IFTRUE 49236
49234: GO 49292
49236: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49237: LD_ADDR_VAR 0 9
49241: PUSH
49242: LD_VAR 0 53
49246: PUSH
49247: LD_VAR 0 54
49251: PUSH
49252: LD_VAR 0 55
49256: PUSH
49257: LD_VAR 0 56
49261: PUSH
49262: LD_VAR 0 57
49266: PUSH
49267: LD_VAR 0 58
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: PUSH
49280: LD_VAR 0 4
49284: PUSH
49285: LD_INT 1
49287: PLUS
49288: ARRAY
49289: ST_TO_ADDR
49290: GO 49399
49292: LD_INT 31
49294: DOUBLE
49295: EQUAL
49296: IFTRUE 49342
49298: LD_INT 32
49300: DOUBLE
49301: EQUAL
49302: IFTRUE 49342
49304: LD_INT 33
49306: DOUBLE
49307: EQUAL
49308: IFTRUE 49342
49310: LD_INT 27
49312: DOUBLE
49313: EQUAL
49314: IFTRUE 49342
49316: LD_INT 26
49318: DOUBLE
49319: EQUAL
49320: IFTRUE 49342
49322: LD_INT 28
49324: DOUBLE
49325: EQUAL
49326: IFTRUE 49342
49328: LD_INT 29
49330: DOUBLE
49331: EQUAL
49332: IFTRUE 49342
49334: LD_INT 30
49336: DOUBLE
49337: EQUAL
49338: IFTRUE 49342
49340: GO 49398
49342: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49343: LD_ADDR_VAR 0 9
49347: PUSH
49348: LD_VAR 0 59
49352: PUSH
49353: LD_VAR 0 60
49357: PUSH
49358: LD_VAR 0 61
49362: PUSH
49363: LD_VAR 0 62
49367: PUSH
49368: LD_VAR 0 63
49372: PUSH
49373: LD_VAR 0 64
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: PUSH
49386: LD_VAR 0 4
49390: PUSH
49391: LD_INT 1
49393: PLUS
49394: ARRAY
49395: ST_TO_ADDR
49396: GO 49399
49398: POP
// temp_list2 = [ ] ;
49399: LD_ADDR_VAR 0 10
49403: PUSH
49404: EMPTY
49405: ST_TO_ADDR
// for i in temp_list do
49406: LD_ADDR_VAR 0 8
49410: PUSH
49411: LD_VAR 0 9
49415: PUSH
49416: FOR_IN
49417: IFFALSE 49469
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49419: LD_ADDR_VAR 0 10
49423: PUSH
49424: LD_VAR 0 10
49428: PUSH
49429: LD_VAR 0 8
49433: PUSH
49434: LD_INT 1
49436: ARRAY
49437: PUSH
49438: LD_VAR 0 2
49442: PLUS
49443: PUSH
49444: LD_VAR 0 8
49448: PUSH
49449: LD_INT 2
49451: ARRAY
49452: PUSH
49453: LD_VAR 0 3
49457: PLUS
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: ADD
49466: ST_TO_ADDR
49467: GO 49416
49469: POP
49470: POP
// result = temp_list2 ;
49471: LD_ADDR_VAR 0 7
49475: PUSH
49476: LD_VAR 0 10
49480: ST_TO_ADDR
// end ;
49481: LD_VAR 0 7
49485: RET
// export function EnemyInRange ( unit , dist ) ; begin
49486: LD_INT 0
49488: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49489: LD_ADDR_VAR 0 3
49493: PUSH
49494: LD_VAR 0 1
49498: PPUSH
49499: CALL_OW 255
49503: PPUSH
49504: LD_VAR 0 1
49508: PPUSH
49509: CALL_OW 250
49513: PPUSH
49514: LD_VAR 0 1
49518: PPUSH
49519: CALL_OW 251
49523: PPUSH
49524: LD_VAR 0 2
49528: PPUSH
49529: CALL 22743 0 4
49533: PUSH
49534: LD_INT 4
49536: ARRAY
49537: ST_TO_ADDR
// end ;
49538: LD_VAR 0 3
49542: RET
// export function PlayerSeeMe ( unit ) ; begin
49543: LD_INT 0
49545: PPUSH
// result := See ( your_side , unit ) ;
49546: LD_ADDR_VAR 0 2
49550: PUSH
49551: LD_OWVAR 2
49555: PPUSH
49556: LD_VAR 0 1
49560: PPUSH
49561: CALL_OW 292
49565: ST_TO_ADDR
// end ;
49566: LD_VAR 0 2
49570: RET
// export function ReverseDir ( unit ) ; begin
49571: LD_INT 0
49573: PPUSH
// if not unit then
49574: LD_VAR 0 1
49578: NOT
49579: IFFALSE 49583
// exit ;
49581: GO 49606
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49583: LD_ADDR_VAR 0 2
49587: PUSH
49588: LD_VAR 0 1
49592: PPUSH
49593: CALL_OW 254
49597: PUSH
49598: LD_INT 3
49600: PLUS
49601: PUSH
49602: LD_INT 6
49604: MOD
49605: ST_TO_ADDR
// end ;
49606: LD_VAR 0 2
49610: RET
// export function ReverseArray ( array ) ; var i ; begin
49611: LD_INT 0
49613: PPUSH
49614: PPUSH
// if not array then
49615: LD_VAR 0 1
49619: NOT
49620: IFFALSE 49624
// exit ;
49622: GO 49679
// result := [ ] ;
49624: LD_ADDR_VAR 0 2
49628: PUSH
49629: EMPTY
49630: ST_TO_ADDR
// for i := array downto 1 do
49631: LD_ADDR_VAR 0 3
49635: PUSH
49636: DOUBLE
49637: LD_VAR 0 1
49641: INC
49642: ST_TO_ADDR
49643: LD_INT 1
49645: PUSH
49646: FOR_DOWNTO
49647: IFFALSE 49677
// result := Join ( result , array [ i ] ) ;
49649: LD_ADDR_VAR 0 2
49653: PUSH
49654: LD_VAR 0 2
49658: PPUSH
49659: LD_VAR 0 1
49663: PUSH
49664: LD_VAR 0 3
49668: ARRAY
49669: PPUSH
49670: CALL 54531 0 2
49674: ST_TO_ADDR
49675: GO 49646
49677: POP
49678: POP
// end ;
49679: LD_VAR 0 2
49683: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49684: LD_INT 0
49686: PPUSH
49687: PPUSH
49688: PPUSH
49689: PPUSH
49690: PPUSH
49691: PPUSH
// if not unit or not hexes then
49692: LD_VAR 0 1
49696: NOT
49697: IFTRUE 49706
49699: PUSH
49700: LD_VAR 0 2
49704: NOT
49705: OR
49706: IFFALSE 49710
// exit ;
49708: GO 49833
// dist := 9999 ;
49710: LD_ADDR_VAR 0 5
49714: PUSH
49715: LD_INT 9999
49717: ST_TO_ADDR
// for i = 1 to hexes do
49718: LD_ADDR_VAR 0 4
49722: PUSH
49723: DOUBLE
49724: LD_INT 1
49726: DEC
49727: ST_TO_ADDR
49728: LD_VAR 0 2
49732: PUSH
49733: FOR_TO
49734: IFFALSE 49821
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49736: LD_ADDR_VAR 0 6
49740: PUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: LD_VAR 0 2
49750: PUSH
49751: LD_VAR 0 4
49755: ARRAY
49756: PUSH
49757: LD_INT 1
49759: ARRAY
49760: PPUSH
49761: LD_VAR 0 2
49765: PUSH
49766: LD_VAR 0 4
49770: ARRAY
49771: PUSH
49772: LD_INT 2
49774: ARRAY
49775: PPUSH
49776: CALL_OW 297
49780: ST_TO_ADDR
// if tdist < dist then
49781: LD_VAR 0 6
49785: PUSH
49786: LD_VAR 0 5
49790: LESS
49791: IFFALSE 49819
// begin hex := hexes [ i ] ;
49793: LD_ADDR_VAR 0 8
49797: PUSH
49798: LD_VAR 0 2
49802: PUSH
49803: LD_VAR 0 4
49807: ARRAY
49808: ST_TO_ADDR
// dist := tdist ;
49809: LD_ADDR_VAR 0 5
49813: PUSH
49814: LD_VAR 0 6
49818: ST_TO_ADDR
// end ; end ;
49819: GO 49733
49821: POP
49822: POP
// result := hex ;
49823: LD_ADDR_VAR 0 3
49827: PUSH
49828: LD_VAR 0 8
49832: ST_TO_ADDR
// end ;
49833: LD_VAR 0 3
49837: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49838: LD_INT 0
49840: PPUSH
49841: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49842: LD_VAR 0 1
49846: NOT
49847: IFTRUE 49886
49849: PUSH
49850: LD_VAR 0 1
49854: PUSH
49855: LD_INT 21
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 23
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PPUSH
49879: CALL_OW 69
49883: IN
49884: NOT
49885: OR
49886: IFFALSE 49890
// exit ;
49888: GO 49937
// for i = 1 to 3 do
49890: LD_ADDR_VAR 0 3
49894: PUSH
49895: DOUBLE
49896: LD_INT 1
49898: DEC
49899: ST_TO_ADDR
49900: LD_INT 3
49902: PUSH
49903: FOR_TO
49904: IFFALSE 49935
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49906: LD_VAR 0 1
49910: PPUSH
49911: CALL_OW 250
49915: PPUSH
49916: LD_VAR 0 1
49920: PPUSH
49921: CALL_OW 251
49925: PPUSH
49926: LD_INT 1
49928: PPUSH
49929: CALL_OW 453
49933: GO 49903
49935: POP
49936: POP
// end ;
49937: LD_VAR 0 2
49941: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49942: LD_INT 0
49944: PPUSH
49945: PPUSH
49946: PPUSH
49947: PPUSH
49948: PPUSH
49949: PPUSH
// if not unit or not enemy_unit then
49950: LD_VAR 0 1
49954: NOT
49955: IFTRUE 49964
49957: PUSH
49958: LD_VAR 0 2
49962: NOT
49963: OR
49964: IFFALSE 49968
// exit ;
49966: GO 50449
// if GetLives ( i ) < 250 then
49968: LD_VAR 0 4
49972: PPUSH
49973: CALL_OW 256
49977: PUSH
49978: LD_INT 250
49980: LESS
49981: IFFALSE 49994
// begin ComAutodestruct ( i ) ;
49983: LD_VAR 0 4
49987: PPUSH
49988: CALL 49838 0 1
// exit ;
49992: GO 50449
// end ; x := GetX ( enemy_unit ) ;
49994: LD_ADDR_VAR 0 7
49998: PUSH
49999: LD_VAR 0 2
50003: PPUSH
50004: CALL_OW 250
50008: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50009: LD_ADDR_VAR 0 8
50013: PUSH
50014: LD_VAR 0 2
50018: PPUSH
50019: CALL_OW 251
50023: ST_TO_ADDR
// if not x or not y then
50024: LD_VAR 0 7
50028: NOT
50029: IFTRUE 50038
50031: PUSH
50032: LD_VAR 0 8
50036: NOT
50037: OR
50038: IFFALSE 50042
// exit ;
50040: GO 50449
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50042: LD_ADDR_VAR 0 6
50046: PUSH
50047: LD_VAR 0 7
50051: PPUSH
50052: LD_INT 0
50054: PPUSH
50055: LD_INT 4
50057: PPUSH
50058: CALL_OW 272
50062: PUSH
50063: LD_VAR 0 8
50067: PPUSH
50068: LD_INT 0
50070: PPUSH
50071: LD_INT 4
50073: PPUSH
50074: CALL_OW 273
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_VAR 0 7
50087: PPUSH
50088: LD_INT 1
50090: PPUSH
50091: LD_INT 4
50093: PPUSH
50094: CALL_OW 272
50098: PUSH
50099: LD_VAR 0 8
50103: PPUSH
50104: LD_INT 1
50106: PPUSH
50107: LD_INT 4
50109: PPUSH
50110: CALL_OW 273
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_VAR 0 7
50123: PPUSH
50124: LD_INT 2
50126: PPUSH
50127: LD_INT 4
50129: PPUSH
50130: CALL_OW 272
50134: PUSH
50135: LD_VAR 0 8
50139: PPUSH
50140: LD_INT 2
50142: PPUSH
50143: LD_INT 4
50145: PPUSH
50146: CALL_OW 273
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_VAR 0 7
50159: PPUSH
50160: LD_INT 3
50162: PPUSH
50163: LD_INT 4
50165: PPUSH
50166: CALL_OW 272
50170: PUSH
50171: LD_VAR 0 8
50175: PPUSH
50176: LD_INT 3
50178: PPUSH
50179: LD_INT 4
50181: PPUSH
50182: CALL_OW 273
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_VAR 0 7
50195: PPUSH
50196: LD_INT 4
50198: PPUSH
50199: LD_INT 4
50201: PPUSH
50202: CALL_OW 272
50206: PUSH
50207: LD_VAR 0 8
50211: PPUSH
50212: LD_INT 4
50214: PPUSH
50215: LD_INT 4
50217: PPUSH
50218: CALL_OW 273
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_VAR 0 7
50231: PPUSH
50232: LD_INT 5
50234: PPUSH
50235: LD_INT 4
50237: PPUSH
50238: CALL_OW 272
50242: PUSH
50243: LD_VAR 0 8
50247: PPUSH
50248: LD_INT 5
50250: PPUSH
50251: LD_INT 4
50253: PPUSH
50254: CALL_OW 273
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: ST_TO_ADDR
// for i = tmp downto 1 do
50271: LD_ADDR_VAR 0 4
50275: PUSH
50276: DOUBLE
50277: LD_VAR 0 6
50281: INC
50282: ST_TO_ADDR
50283: LD_INT 1
50285: PUSH
50286: FOR_DOWNTO
50287: IFFALSE 50390
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50289: LD_VAR 0 6
50293: PUSH
50294: LD_VAR 0 4
50298: ARRAY
50299: PUSH
50300: LD_INT 1
50302: ARRAY
50303: PPUSH
50304: LD_VAR 0 6
50308: PUSH
50309: LD_VAR 0 4
50313: ARRAY
50314: PUSH
50315: LD_INT 2
50317: ARRAY
50318: PPUSH
50319: CALL_OW 488
50323: NOT
50324: IFTRUE 50366
50326: PUSH
50327: LD_VAR 0 6
50331: PUSH
50332: LD_VAR 0 4
50336: ARRAY
50337: PUSH
50338: LD_INT 1
50340: ARRAY
50341: PPUSH
50342: LD_VAR 0 6
50346: PUSH
50347: LD_VAR 0 4
50351: ARRAY
50352: PUSH
50353: LD_INT 2
50355: ARRAY
50356: PPUSH
50357: CALL_OW 428
50361: PUSH
50362: LD_INT 0
50364: NONEQUAL
50365: OR
50366: IFFALSE 50388
// tmp := Delete ( tmp , i ) ;
50368: LD_ADDR_VAR 0 6
50372: PUSH
50373: LD_VAR 0 6
50377: PPUSH
50378: LD_VAR 0 4
50382: PPUSH
50383: CALL_OW 3
50387: ST_TO_ADDR
50388: GO 50286
50390: POP
50391: POP
// j := GetClosestHex ( unit , tmp ) ;
50392: LD_ADDR_VAR 0 5
50396: PUSH
50397: LD_VAR 0 1
50401: PPUSH
50402: LD_VAR 0 6
50406: PPUSH
50407: CALL 49684 0 2
50411: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50412: LD_VAR 0 1
50416: PPUSH
50417: LD_VAR 0 5
50421: PUSH
50422: LD_INT 1
50424: ARRAY
50425: PPUSH
50426: LD_VAR 0 5
50430: PUSH
50431: LD_INT 2
50433: ARRAY
50434: PPUSH
50435: CALL_OW 111
// result := j ;
50439: LD_ADDR_VAR 0 3
50443: PUSH
50444: LD_VAR 0 5
50448: ST_TO_ADDR
// end ;
50449: LD_VAR 0 3
50453: RET
// export function PrepareApemanSoldier ( ) ; begin
50454: LD_INT 0
50456: PPUSH
// uc_nation := 0 ;
50457: LD_ADDR_OWVAR 21
50461: PUSH
50462: LD_INT 0
50464: ST_TO_ADDR
// hc_sex := sex_male ;
50465: LD_ADDR_OWVAR 27
50469: PUSH
50470: LD_INT 1
50472: ST_TO_ADDR
// hc_name :=  ;
50473: LD_ADDR_OWVAR 26
50477: PUSH
50478: LD_STRING 
50480: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50481: LD_ADDR_OWVAR 28
50485: PUSH
50486: LD_INT 15
50488: ST_TO_ADDR
// hc_gallery :=  ;
50489: LD_ADDR_OWVAR 33
50493: PUSH
50494: LD_STRING 
50496: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50497: LD_ADDR_OWVAR 31
50501: PUSH
50502: LD_INT 0
50504: PPUSH
50505: LD_INT 3
50507: PPUSH
50508: CALL_OW 12
50512: PUSH
50513: LD_INT 0
50515: PPUSH
50516: LD_INT 3
50518: PPUSH
50519: CALL_OW 12
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50536: LD_ADDR_OWVAR 29
50540: PUSH
50541: LD_INT 10
50543: PUSH
50544: LD_INT 12
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// end ;
50551: LD_VAR 0 1
50555: RET
// export function PrepareApemanEngineer ( ) ; begin
50556: LD_INT 0
50558: PPUSH
// uc_nation := 0 ;
50559: LD_ADDR_OWVAR 21
50563: PUSH
50564: LD_INT 0
50566: ST_TO_ADDR
// hc_sex := sex_male ;
50567: LD_ADDR_OWVAR 27
50571: PUSH
50572: LD_INT 1
50574: ST_TO_ADDR
// hc_name :=  ;
50575: LD_ADDR_OWVAR 26
50579: PUSH
50580: LD_STRING 
50582: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50583: LD_ADDR_OWVAR 28
50587: PUSH
50588: LD_INT 16
50590: ST_TO_ADDR
// hc_gallery :=  ;
50591: LD_ADDR_OWVAR 33
50595: PUSH
50596: LD_STRING 
50598: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50599: LD_ADDR_OWVAR 31
50603: PUSH
50604: LD_INT 0
50606: PPUSH
50607: LD_INT 3
50609: PPUSH
50610: CALL_OW 12
50614: PUSH
50615: LD_INT 0
50617: PPUSH
50618: LD_INT 3
50620: PPUSH
50621: CALL_OW 12
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50638: LD_ADDR_OWVAR 29
50642: PUSH
50643: LD_INT 10
50645: PUSH
50646: LD_INT 12
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: ST_TO_ADDR
// end ;
50653: LD_VAR 0 1
50657: RET
// export function PrepareApeman ( agressivity ) ; begin
50658: LD_INT 0
50660: PPUSH
// uc_side := 0 ;
50661: LD_ADDR_OWVAR 20
50665: PUSH
50666: LD_INT 0
50668: ST_TO_ADDR
// uc_nation := 0 ;
50669: LD_ADDR_OWVAR 21
50673: PUSH
50674: LD_INT 0
50676: ST_TO_ADDR
// hc_sex := sex_male ;
50677: LD_ADDR_OWVAR 27
50681: PUSH
50682: LD_INT 1
50684: ST_TO_ADDR
// hc_class := class_apeman ;
50685: LD_ADDR_OWVAR 28
50689: PUSH
50690: LD_INT 12
50692: ST_TO_ADDR
// hc_gallery :=  ;
50693: LD_ADDR_OWVAR 33
50697: PUSH
50698: LD_STRING 
50700: ST_TO_ADDR
// hc_name :=  ;
50701: LD_ADDR_OWVAR 26
50705: PUSH
50706: LD_STRING 
50708: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50709: LD_ADDR_OWVAR 29
50713: PUSH
50714: LD_INT 10
50716: PUSH
50717: LD_INT 12
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// if agressivity = 0 then
50724: LD_VAR 0 1
50728: PUSH
50729: LD_INT 0
50731: EQUAL
50732: IFFALSE 50744
// hc_agressivity := 0 else
50734: LD_ADDR_OWVAR 35
50738: PUSH
50739: LD_INT 0
50741: ST_TO_ADDR
50742: GO 50765
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50744: LD_ADDR_OWVAR 35
50748: PUSH
50749: LD_VAR 0 1
50753: NEG
50754: PPUSH
50755: LD_VAR 0 1
50759: PPUSH
50760: CALL_OW 12
50764: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50765: LD_ADDR_OWVAR 31
50769: PUSH
50770: LD_INT 0
50772: PPUSH
50773: LD_INT 3
50775: PPUSH
50776: CALL_OW 12
50780: PUSH
50781: LD_INT 0
50783: PPUSH
50784: LD_INT 3
50786: PPUSH
50787: CALL_OW 12
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// end ;
50804: LD_VAR 0 2
50808: RET
// export function PrepareTiger ( agressivity ) ; begin
50809: LD_INT 0
50811: PPUSH
// uc_side := 0 ;
50812: LD_ADDR_OWVAR 20
50816: PUSH
50817: LD_INT 0
50819: ST_TO_ADDR
// uc_nation := 0 ;
50820: LD_ADDR_OWVAR 21
50824: PUSH
50825: LD_INT 0
50827: ST_TO_ADDR
// InitHc ;
50828: CALL_OW 19
// hc_class := class_tiger ;
50832: LD_ADDR_OWVAR 28
50836: PUSH
50837: LD_INT 14
50839: ST_TO_ADDR
// hc_gallery :=  ;
50840: LD_ADDR_OWVAR 33
50844: PUSH
50845: LD_STRING 
50847: ST_TO_ADDR
// hc_name :=  ;
50848: LD_ADDR_OWVAR 26
50852: PUSH
50853: LD_STRING 
50855: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50856: LD_ADDR_OWVAR 35
50860: PUSH
50861: LD_VAR 0 1
50865: NEG
50866: PPUSH
50867: LD_VAR 0 1
50871: PPUSH
50872: CALL_OW 12
50876: ST_TO_ADDR
// end ;
50877: LD_VAR 0 2
50881: RET
// export function PrepareEnchidna ( ) ; begin
50882: LD_INT 0
50884: PPUSH
// uc_side := 0 ;
50885: LD_ADDR_OWVAR 20
50889: PUSH
50890: LD_INT 0
50892: ST_TO_ADDR
// uc_nation := 0 ;
50893: LD_ADDR_OWVAR 21
50897: PUSH
50898: LD_INT 0
50900: ST_TO_ADDR
// InitHc ;
50901: CALL_OW 19
// hc_class := class_baggie ;
50905: LD_ADDR_OWVAR 28
50909: PUSH
50910: LD_INT 13
50912: ST_TO_ADDR
// hc_gallery :=  ;
50913: LD_ADDR_OWVAR 33
50917: PUSH
50918: LD_STRING 
50920: ST_TO_ADDR
// hc_name :=  ;
50921: LD_ADDR_OWVAR 26
50925: PUSH
50926: LD_STRING 
50928: ST_TO_ADDR
// end ;
50929: LD_VAR 0 1
50933: RET
// export function PrepareFrog ( ) ; begin
50934: LD_INT 0
50936: PPUSH
// uc_side := 0 ;
50937: LD_ADDR_OWVAR 20
50941: PUSH
50942: LD_INT 0
50944: ST_TO_ADDR
// uc_nation := 0 ;
50945: LD_ADDR_OWVAR 21
50949: PUSH
50950: LD_INT 0
50952: ST_TO_ADDR
// InitHc ;
50953: CALL_OW 19
// hc_class := class_frog ;
50957: LD_ADDR_OWVAR 28
50961: PUSH
50962: LD_INT 19
50964: ST_TO_ADDR
// hc_gallery :=  ;
50965: LD_ADDR_OWVAR 33
50969: PUSH
50970: LD_STRING 
50972: ST_TO_ADDR
// hc_name :=  ;
50973: LD_ADDR_OWVAR 26
50977: PUSH
50978: LD_STRING 
50980: ST_TO_ADDR
// end ;
50981: LD_VAR 0 1
50985: RET
// export function PrepareFish ( ) ; begin
50986: LD_INT 0
50988: PPUSH
// uc_side := 0 ;
50989: LD_ADDR_OWVAR 20
50993: PUSH
50994: LD_INT 0
50996: ST_TO_ADDR
// uc_nation := 0 ;
50997: LD_ADDR_OWVAR 21
51001: PUSH
51002: LD_INT 0
51004: ST_TO_ADDR
// InitHc ;
51005: CALL_OW 19
// hc_class := class_fish ;
51009: LD_ADDR_OWVAR 28
51013: PUSH
51014: LD_INT 20
51016: ST_TO_ADDR
// hc_gallery :=  ;
51017: LD_ADDR_OWVAR 33
51021: PUSH
51022: LD_STRING 
51024: ST_TO_ADDR
// hc_name :=  ;
51025: LD_ADDR_OWVAR 26
51029: PUSH
51030: LD_STRING 
51032: ST_TO_ADDR
// end ;
51033: LD_VAR 0 1
51037: RET
// export function PrepareBird ( ) ; begin
51038: LD_INT 0
51040: PPUSH
// uc_side := 0 ;
51041: LD_ADDR_OWVAR 20
51045: PUSH
51046: LD_INT 0
51048: ST_TO_ADDR
// uc_nation := 0 ;
51049: LD_ADDR_OWVAR 21
51053: PUSH
51054: LD_INT 0
51056: ST_TO_ADDR
// InitHc ;
51057: CALL_OW 19
// hc_class := class_phororhacos ;
51061: LD_ADDR_OWVAR 28
51065: PUSH
51066: LD_INT 18
51068: ST_TO_ADDR
// hc_gallery :=  ;
51069: LD_ADDR_OWVAR 33
51073: PUSH
51074: LD_STRING 
51076: ST_TO_ADDR
// hc_name :=  ;
51077: LD_ADDR_OWVAR 26
51081: PUSH
51082: LD_STRING 
51084: ST_TO_ADDR
// end ;
51085: LD_VAR 0 1
51089: RET
// export function PrepareHorse ( ) ; begin
51090: LD_INT 0
51092: PPUSH
// uc_side := 0 ;
51093: LD_ADDR_OWVAR 20
51097: PUSH
51098: LD_INT 0
51100: ST_TO_ADDR
// uc_nation := 0 ;
51101: LD_ADDR_OWVAR 21
51105: PUSH
51106: LD_INT 0
51108: ST_TO_ADDR
// InitHc ;
51109: CALL_OW 19
// hc_class := class_horse ;
51113: LD_ADDR_OWVAR 28
51117: PUSH
51118: LD_INT 21
51120: ST_TO_ADDR
// hc_gallery :=  ;
51121: LD_ADDR_OWVAR 33
51125: PUSH
51126: LD_STRING 
51128: ST_TO_ADDR
// hc_name :=  ;
51129: LD_ADDR_OWVAR 26
51133: PUSH
51134: LD_STRING 
51136: ST_TO_ADDR
// end ;
51137: LD_VAR 0 1
51141: RET
// export function PrepareMastodont ( ) ; begin
51142: LD_INT 0
51144: PPUSH
// uc_side := 0 ;
51145: LD_ADDR_OWVAR 20
51149: PUSH
51150: LD_INT 0
51152: ST_TO_ADDR
// uc_nation := 0 ;
51153: LD_ADDR_OWVAR 21
51157: PUSH
51158: LD_INT 0
51160: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51161: LD_ADDR_OWVAR 37
51165: PUSH
51166: LD_INT 31
51168: ST_TO_ADDR
// vc_control := control_rider ;
51169: LD_ADDR_OWVAR 38
51173: PUSH
51174: LD_INT 4
51176: ST_TO_ADDR
// end ;
51177: LD_VAR 0 1
51181: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51182: LD_INT 0
51184: PPUSH
51185: PPUSH
51186: PPUSH
// uc_side = 0 ;
51187: LD_ADDR_OWVAR 20
51191: PUSH
51192: LD_INT 0
51194: ST_TO_ADDR
// uc_nation = 0 ;
51195: LD_ADDR_OWVAR 21
51199: PUSH
51200: LD_INT 0
51202: ST_TO_ADDR
// InitHc_All ( ) ;
51203: CALL_OW 584
// InitVc ;
51207: CALL_OW 20
// if mastodonts then
51211: LD_VAR 0 6
51215: IFFALSE 51282
// for i = 1 to mastodonts do
51217: LD_ADDR_VAR 0 11
51221: PUSH
51222: DOUBLE
51223: LD_INT 1
51225: DEC
51226: ST_TO_ADDR
51227: LD_VAR 0 6
51231: PUSH
51232: FOR_TO
51233: IFFALSE 51280
// begin vc_chassis := 31 ;
51235: LD_ADDR_OWVAR 37
51239: PUSH
51240: LD_INT 31
51242: ST_TO_ADDR
// vc_control := control_rider ;
51243: LD_ADDR_OWVAR 38
51247: PUSH
51248: LD_INT 4
51250: ST_TO_ADDR
// animal := CreateVehicle ;
51251: LD_ADDR_VAR 0 12
51255: PUSH
51256: CALL_OW 45
51260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51261: LD_VAR 0 12
51265: PPUSH
51266: LD_VAR 0 8
51270: PPUSH
51271: LD_INT 0
51273: PPUSH
51274: CALL 53424 0 3
// end ;
51278: GO 51232
51280: POP
51281: POP
// if horses then
51282: LD_VAR 0 5
51286: IFFALSE 51353
// for i = 1 to horses do
51288: LD_ADDR_VAR 0 11
51292: PUSH
51293: DOUBLE
51294: LD_INT 1
51296: DEC
51297: ST_TO_ADDR
51298: LD_VAR 0 5
51302: PUSH
51303: FOR_TO
51304: IFFALSE 51351
// begin hc_class := 21 ;
51306: LD_ADDR_OWVAR 28
51310: PUSH
51311: LD_INT 21
51313: ST_TO_ADDR
// hc_gallery :=  ;
51314: LD_ADDR_OWVAR 33
51318: PUSH
51319: LD_STRING 
51321: ST_TO_ADDR
// animal := CreateHuman ;
51322: LD_ADDR_VAR 0 12
51326: PUSH
51327: CALL_OW 44
51331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51332: LD_VAR 0 12
51336: PPUSH
51337: LD_VAR 0 8
51341: PPUSH
51342: LD_INT 0
51344: PPUSH
51345: CALL 53424 0 3
// end ;
51349: GO 51303
51351: POP
51352: POP
// if birds then
51353: LD_VAR 0 1
51357: IFFALSE 51424
// for i = 1 to birds do
51359: LD_ADDR_VAR 0 11
51363: PUSH
51364: DOUBLE
51365: LD_INT 1
51367: DEC
51368: ST_TO_ADDR
51369: LD_VAR 0 1
51373: PUSH
51374: FOR_TO
51375: IFFALSE 51422
// begin hc_class := 18 ;
51377: LD_ADDR_OWVAR 28
51381: PUSH
51382: LD_INT 18
51384: ST_TO_ADDR
// hc_gallery =  ;
51385: LD_ADDR_OWVAR 33
51389: PUSH
51390: LD_STRING 
51392: ST_TO_ADDR
// animal := CreateHuman ;
51393: LD_ADDR_VAR 0 12
51397: PUSH
51398: CALL_OW 44
51402: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51403: LD_VAR 0 12
51407: PPUSH
51408: LD_VAR 0 8
51412: PPUSH
51413: LD_INT 0
51415: PPUSH
51416: CALL 53424 0 3
// end ;
51420: GO 51374
51422: POP
51423: POP
// if tigers then
51424: LD_VAR 0 2
51428: IFFALSE 51512
// for i = 1 to tigers do
51430: LD_ADDR_VAR 0 11
51434: PUSH
51435: DOUBLE
51436: LD_INT 1
51438: DEC
51439: ST_TO_ADDR
51440: LD_VAR 0 2
51444: PUSH
51445: FOR_TO
51446: IFFALSE 51510
// begin hc_class = class_tiger ;
51448: LD_ADDR_OWVAR 28
51452: PUSH
51453: LD_INT 14
51455: ST_TO_ADDR
// hc_gallery =  ;
51456: LD_ADDR_OWVAR 33
51460: PUSH
51461: LD_STRING 
51463: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51464: LD_ADDR_OWVAR 35
51468: PUSH
51469: LD_INT 7
51471: NEG
51472: PPUSH
51473: LD_INT 7
51475: PPUSH
51476: CALL_OW 12
51480: ST_TO_ADDR
// animal := CreateHuman ;
51481: LD_ADDR_VAR 0 12
51485: PUSH
51486: CALL_OW 44
51490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51491: LD_VAR 0 12
51495: PPUSH
51496: LD_VAR 0 8
51500: PPUSH
51501: LD_INT 0
51503: PPUSH
51504: CALL 53424 0 3
// end ;
51508: GO 51445
51510: POP
51511: POP
// if apemans then
51512: LD_VAR 0 3
51516: IFFALSE 51639
// for i = 1 to apemans do
51518: LD_ADDR_VAR 0 11
51522: PUSH
51523: DOUBLE
51524: LD_INT 1
51526: DEC
51527: ST_TO_ADDR
51528: LD_VAR 0 3
51532: PUSH
51533: FOR_TO
51534: IFFALSE 51637
// begin hc_class = class_apeman ;
51536: LD_ADDR_OWVAR 28
51540: PUSH
51541: LD_INT 12
51543: ST_TO_ADDR
// hc_gallery =  ;
51544: LD_ADDR_OWVAR 33
51548: PUSH
51549: LD_STRING 
51551: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51552: LD_ADDR_OWVAR 35
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PPUSH
51561: LD_INT 2
51563: PPUSH
51564: CALL_OW 12
51568: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51569: LD_ADDR_OWVAR 31
51573: PUSH
51574: LD_INT 1
51576: PPUSH
51577: LD_INT 3
51579: PPUSH
51580: CALL_OW 12
51584: PUSH
51585: LD_INT 1
51587: PPUSH
51588: LD_INT 3
51590: PPUSH
51591: CALL_OW 12
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: ST_TO_ADDR
// animal := CreateHuman ;
51608: LD_ADDR_VAR 0 12
51612: PUSH
51613: CALL_OW 44
51617: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51618: LD_VAR 0 12
51622: PPUSH
51623: LD_VAR 0 8
51627: PPUSH
51628: LD_INT 0
51630: PPUSH
51631: CALL 53424 0 3
// end ;
51635: GO 51533
51637: POP
51638: POP
// if enchidnas then
51639: LD_VAR 0 4
51643: IFFALSE 51710
// for i = 1 to enchidnas do
51645: LD_ADDR_VAR 0 11
51649: PUSH
51650: DOUBLE
51651: LD_INT 1
51653: DEC
51654: ST_TO_ADDR
51655: LD_VAR 0 4
51659: PUSH
51660: FOR_TO
51661: IFFALSE 51708
// begin hc_class = 13 ;
51663: LD_ADDR_OWVAR 28
51667: PUSH
51668: LD_INT 13
51670: ST_TO_ADDR
// hc_gallery =  ;
51671: LD_ADDR_OWVAR 33
51675: PUSH
51676: LD_STRING 
51678: ST_TO_ADDR
// animal := CreateHuman ;
51679: LD_ADDR_VAR 0 12
51683: PUSH
51684: CALL_OW 44
51688: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51689: LD_VAR 0 12
51693: PPUSH
51694: LD_VAR 0 8
51698: PPUSH
51699: LD_INT 0
51701: PPUSH
51702: CALL 53424 0 3
// end ;
51706: GO 51660
51708: POP
51709: POP
// if fishes then
51710: LD_VAR 0 7
51714: IFFALSE 51781
// for i = 1 to fishes do
51716: LD_ADDR_VAR 0 11
51720: PUSH
51721: DOUBLE
51722: LD_INT 1
51724: DEC
51725: ST_TO_ADDR
51726: LD_VAR 0 7
51730: PUSH
51731: FOR_TO
51732: IFFALSE 51779
// begin hc_class = 20 ;
51734: LD_ADDR_OWVAR 28
51738: PUSH
51739: LD_INT 20
51741: ST_TO_ADDR
// hc_gallery =  ;
51742: LD_ADDR_OWVAR 33
51746: PUSH
51747: LD_STRING 
51749: ST_TO_ADDR
// animal := CreateHuman ;
51750: LD_ADDR_VAR 0 12
51754: PUSH
51755: CALL_OW 44
51759: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51760: LD_VAR 0 12
51764: PPUSH
51765: LD_VAR 0 9
51769: PPUSH
51770: LD_INT 0
51772: PPUSH
51773: CALL 53424 0 3
// end ;
51777: GO 51731
51779: POP
51780: POP
// end ;
51781: LD_VAR 0 10
51785: RET
// export function WantHeal ( sci , unit ) ; begin
51786: LD_INT 0
51788: PPUSH
// if GetTaskList ( sci ) > 0 then
51789: LD_VAR 0 1
51793: PPUSH
51794: CALL_OW 437
51798: PUSH
51799: LD_INT 0
51801: GREATER
51802: IFFALSE 51874
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51804: LD_VAR 0 1
51808: PPUSH
51809: CALL_OW 437
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: PUSH
51818: LD_INT 1
51820: ARRAY
51821: PUSH
51822: LD_STRING l
51824: EQUAL
51825: IFFALSE 51852
51827: PUSH
51828: LD_VAR 0 1
51832: PPUSH
51833: CALL_OW 437
51837: PUSH
51838: LD_INT 1
51840: ARRAY
51841: PUSH
51842: LD_INT 4
51844: ARRAY
51845: PUSH
51846: LD_VAR 0 2
51850: EQUAL
51851: AND
51852: IFFALSE 51864
// result := true else
51854: LD_ADDR_VAR 0 3
51858: PUSH
51859: LD_INT 1
51861: ST_TO_ADDR
51862: GO 51872
// result := false ;
51864: LD_ADDR_VAR 0 3
51868: PUSH
51869: LD_INT 0
51871: ST_TO_ADDR
// end else
51872: GO 51882
// result := false ;
51874: LD_ADDR_VAR 0 3
51878: PUSH
51879: LD_INT 0
51881: ST_TO_ADDR
// end ;
51882: LD_VAR 0 3
51886: RET
// export function HealTarget ( sci ) ; begin
51887: LD_INT 0
51889: PPUSH
// if not sci then
51890: LD_VAR 0 1
51894: NOT
51895: IFFALSE 51899
// exit ;
51897: GO 51964
// result := 0 ;
51899: LD_ADDR_VAR 0 2
51903: PUSH
51904: LD_INT 0
51906: ST_TO_ADDR
// if GetTaskList ( sci ) then
51907: LD_VAR 0 1
51911: PPUSH
51912: CALL_OW 437
51916: IFFALSE 51964
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51918: LD_VAR 0 1
51922: PPUSH
51923: CALL_OW 437
51927: PUSH
51928: LD_INT 1
51930: ARRAY
51931: PUSH
51932: LD_INT 1
51934: ARRAY
51935: PUSH
51936: LD_STRING l
51938: EQUAL
51939: IFFALSE 51964
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51941: LD_ADDR_VAR 0 2
51945: PUSH
51946: LD_VAR 0 1
51950: PPUSH
51951: CALL_OW 437
51955: PUSH
51956: LD_INT 1
51958: ARRAY
51959: PUSH
51960: LD_INT 4
51962: ARRAY
51963: ST_TO_ADDR
// end ;
51964: LD_VAR 0 2
51968: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51969: LD_INT 0
51971: PPUSH
51972: PPUSH
51973: PPUSH
51974: PPUSH
// if not base_units then
51975: LD_VAR 0 1
51979: NOT
51980: IFFALSE 51984
// exit ;
51982: GO 52071
// result := false ;
51984: LD_ADDR_VAR 0 2
51988: PUSH
51989: LD_INT 0
51991: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51992: LD_ADDR_VAR 0 5
51996: PUSH
51997: LD_VAR 0 1
52001: PPUSH
52002: LD_INT 21
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PPUSH
52012: CALL_OW 72
52016: ST_TO_ADDR
// if not tmp then
52017: LD_VAR 0 5
52021: NOT
52022: IFFALSE 52026
// exit ;
52024: GO 52071
// for i in tmp do
52026: LD_ADDR_VAR 0 3
52030: PUSH
52031: LD_VAR 0 5
52035: PUSH
52036: FOR_IN
52037: IFFALSE 52069
// begin result := EnemyInRange ( i , 22 ) ;
52039: LD_ADDR_VAR 0 2
52043: PUSH
52044: LD_VAR 0 3
52048: PPUSH
52049: LD_INT 22
52051: PPUSH
52052: CALL 49486 0 2
52056: ST_TO_ADDR
// if result then
52057: LD_VAR 0 2
52061: IFFALSE 52067
// exit ;
52063: POP
52064: POP
52065: GO 52071
// end ;
52067: GO 52036
52069: POP
52070: POP
// end ;
52071: LD_VAR 0 2
52075: RET
// export function FilterByTag ( units , tag ) ; begin
52076: LD_INT 0
52078: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52079: LD_ADDR_VAR 0 3
52083: PUSH
52084: LD_VAR 0 1
52088: PPUSH
52089: LD_INT 120
52091: PUSH
52092: LD_VAR 0 2
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PPUSH
52101: CALL_OW 72
52105: ST_TO_ADDR
// end ;
52106: LD_VAR 0 3
52110: RET
// export function IsDriver ( un ) ; begin
52111: LD_INT 0
52113: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52114: LD_ADDR_VAR 0 2
52118: PUSH
52119: LD_VAR 0 1
52123: PUSH
52124: LD_INT 55
52126: PUSH
52127: EMPTY
52128: LIST
52129: PPUSH
52130: CALL_OW 69
52134: IN
52135: ST_TO_ADDR
// end ;
52136: LD_VAR 0 2
52140: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52141: LD_INT 0
52143: PPUSH
52144: PPUSH
// list := [ ] ;
52145: LD_ADDR_VAR 0 5
52149: PUSH
52150: EMPTY
52151: ST_TO_ADDR
// case d of 0 :
52152: LD_VAR 0 3
52156: PUSH
52157: LD_INT 0
52159: DOUBLE
52160: EQUAL
52161: IFTRUE 52165
52163: GO 52298
52165: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52166: LD_ADDR_VAR 0 5
52170: PUSH
52171: LD_VAR 0 1
52175: PUSH
52176: LD_INT 4
52178: MINUS
52179: PUSH
52180: LD_VAR 0 2
52184: PUSH
52185: LD_INT 4
52187: MINUS
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: LIST
52196: PUSH
52197: LD_VAR 0 1
52201: PUSH
52202: LD_INT 3
52204: MINUS
52205: PUSH
52206: LD_VAR 0 2
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: PUSH
52219: LD_VAR 0 1
52223: PUSH
52224: LD_INT 4
52226: PLUS
52227: PUSH
52228: LD_VAR 0 2
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: LD_VAR 0 1
52245: PUSH
52246: LD_INT 3
52248: PLUS
52249: PUSH
52250: LD_VAR 0 2
52254: PUSH
52255: LD_INT 3
52257: PLUS
52258: PUSH
52259: LD_INT 5
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: LD_VAR 0 1
52271: PUSH
52272: LD_VAR 0 2
52276: PUSH
52277: LD_INT 4
52279: PLUS
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// end ; 1 :
52296: GO 52996
52298: LD_INT 1
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52306
52304: GO 52439
52306: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52307: LD_ADDR_VAR 0 5
52311: PUSH
52312: LD_VAR 0 1
52316: PUSH
52317: LD_VAR 0 2
52321: PUSH
52322: LD_INT 4
52324: MINUS
52325: PUSH
52326: LD_INT 3
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_VAR 0 1
52338: PUSH
52339: LD_INT 3
52341: MINUS
52342: PUSH
52343: LD_VAR 0 2
52347: PUSH
52348: LD_INT 3
52350: MINUS
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: LIST
52359: PUSH
52360: LD_VAR 0 1
52364: PUSH
52365: LD_INT 4
52367: MINUS
52368: PUSH
52369: LD_VAR 0 2
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: PUSH
52382: LD_VAR 0 1
52386: PUSH
52387: LD_VAR 0 2
52391: PUSH
52392: LD_INT 3
52394: PLUS
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: PUSH
52404: LD_VAR 0 1
52408: PUSH
52409: LD_INT 4
52411: PLUS
52412: PUSH
52413: LD_VAR 0 2
52417: PUSH
52418: LD_INT 4
52420: PLUS
52421: PUSH
52422: LD_INT 5
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: ST_TO_ADDR
// end ; 2 :
52437: GO 52996
52439: LD_INT 2
52441: DOUBLE
52442: EQUAL
52443: IFTRUE 52447
52445: GO 52576
52447: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52448: LD_ADDR_VAR 0 5
52452: PUSH
52453: LD_VAR 0 1
52457: PUSH
52458: LD_VAR 0 2
52462: PUSH
52463: LD_INT 3
52465: MINUS
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: PUSH
52475: LD_VAR 0 1
52479: PUSH
52480: LD_INT 4
52482: PLUS
52483: PUSH
52484: LD_VAR 0 2
52488: PUSH
52489: LD_INT 4
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: LIST
52496: PUSH
52497: LD_VAR 0 1
52501: PUSH
52502: LD_VAR 0 2
52506: PUSH
52507: LD_INT 4
52509: PLUS
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: LIST
52518: PUSH
52519: LD_VAR 0 1
52523: PUSH
52524: LD_INT 3
52526: MINUS
52527: PUSH
52528: LD_VAR 0 2
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: PUSH
52541: LD_VAR 0 1
52545: PUSH
52546: LD_INT 4
52548: MINUS
52549: PUSH
52550: LD_VAR 0 2
52554: PUSH
52555: LD_INT 4
52557: MINUS
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// end ; 3 :
52574: GO 52996
52576: LD_INT 3
52578: DOUBLE
52579: EQUAL
52580: IFTRUE 52584
52582: GO 52717
52584: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52585: LD_ADDR_VAR 0 5
52589: PUSH
52590: LD_VAR 0 1
52594: PUSH
52595: LD_INT 3
52597: PLUS
52598: PUSH
52599: LD_VAR 0 2
52603: PUSH
52604: LD_INT 4
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: PUSH
52612: LD_VAR 0 1
52616: PUSH
52617: LD_INT 4
52619: PLUS
52620: PUSH
52621: LD_VAR 0 2
52625: PUSH
52626: LD_INT 4
52628: PLUS
52629: PUSH
52630: LD_INT 5
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: PUSH
52638: LD_VAR 0 1
52642: PUSH
52643: LD_INT 4
52645: MINUS
52646: PUSH
52647: LD_VAR 0 2
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: PUSH
52660: LD_VAR 0 1
52664: PUSH
52665: LD_VAR 0 2
52669: PUSH
52670: LD_INT 4
52672: MINUS
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: LIST
52681: PUSH
52682: LD_VAR 0 1
52686: PUSH
52687: LD_INT 3
52689: MINUS
52690: PUSH
52691: LD_VAR 0 2
52695: PUSH
52696: LD_INT 3
52698: MINUS
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// end ; 4 :
52715: GO 52996
52717: LD_INT 4
52719: DOUBLE
52720: EQUAL
52721: IFTRUE 52725
52723: GO 52858
52725: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52726: LD_ADDR_VAR 0 5
52730: PUSH
52731: LD_VAR 0 1
52735: PUSH
52736: LD_VAR 0 2
52740: PUSH
52741: LD_INT 4
52743: PLUS
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: PUSH
52753: LD_VAR 0 1
52757: PUSH
52758: LD_INT 3
52760: PLUS
52761: PUSH
52762: LD_VAR 0 2
52766: PUSH
52767: LD_INT 3
52769: PLUS
52770: PUSH
52771: LD_INT 5
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: LIST
52778: PUSH
52779: LD_VAR 0 1
52783: PUSH
52784: LD_INT 4
52786: PLUS
52787: PUSH
52788: LD_VAR 0 2
52792: PUSH
52793: LD_INT 4
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: LIST
52800: PUSH
52801: LD_VAR 0 1
52805: PUSH
52806: LD_VAR 0 2
52810: PUSH
52811: LD_INT 3
52813: MINUS
52814: PUSH
52815: LD_INT 3
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: PUSH
52823: LD_VAR 0 1
52827: PUSH
52828: LD_INT 4
52830: MINUS
52831: PUSH
52832: LD_VAR 0 2
52836: PUSH
52837: LD_INT 4
52839: MINUS
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: LIST
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// end ; 5 :
52856: GO 52996
52858: LD_INT 5
52860: DOUBLE
52861: EQUAL
52862: IFTRUE 52866
52864: GO 52995
52866: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52867: LD_ADDR_VAR 0 5
52871: PUSH
52872: LD_VAR 0 1
52876: PUSH
52877: LD_INT 4
52879: MINUS
52880: PUSH
52881: LD_VAR 0 2
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: PUSH
52894: LD_VAR 0 1
52898: PUSH
52899: LD_VAR 0 2
52903: PUSH
52904: LD_INT 4
52906: MINUS
52907: PUSH
52908: LD_INT 3
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: PUSH
52916: LD_VAR 0 1
52920: PUSH
52921: LD_INT 4
52923: PLUS
52924: PUSH
52925: LD_VAR 0 2
52929: PUSH
52930: LD_INT 4
52932: PLUS
52933: PUSH
52934: LD_INT 5
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: LIST
52941: PUSH
52942: LD_VAR 0 1
52946: PUSH
52947: LD_INT 3
52949: PLUS
52950: PUSH
52951: LD_VAR 0 2
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: LIST
52963: PUSH
52964: LD_VAR 0 1
52968: PUSH
52969: LD_VAR 0 2
52973: PUSH
52974: LD_INT 3
52976: PLUS
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: LIST
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: ST_TO_ADDR
// end ; end ;
52993: GO 52996
52995: POP
// result := list ;
52996: LD_ADDR_VAR 0 4
53000: PUSH
53001: LD_VAR 0 5
53005: ST_TO_ADDR
// end ;
53006: LD_VAR 0 4
53010: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53011: LD_INT 0
53013: PPUSH
53014: PPUSH
53015: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53016: LD_VAR 0 1
53020: NOT
53021: IFTRUE 53049
53023: PUSH
53024: LD_VAR 0 2
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 3
53037: PUSH
53038: LD_INT 4
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: IN
53047: NOT
53048: OR
53049: IFFALSE 53053
// exit ;
53051: GO 53136
// tmp := [ ] ;
53053: LD_ADDR_VAR 0 5
53057: PUSH
53058: EMPTY
53059: ST_TO_ADDR
// for i in units do
53060: LD_ADDR_VAR 0 4
53064: PUSH
53065: LD_VAR 0 1
53069: PUSH
53070: FOR_IN
53071: IFFALSE 53105
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53073: LD_ADDR_VAR 0 5
53077: PUSH
53078: LD_VAR 0 5
53082: PPUSH
53083: LD_VAR 0 4
53087: PPUSH
53088: LD_VAR 0 2
53092: PPUSH
53093: CALL_OW 259
53097: PPUSH
53098: CALL 54531 0 2
53102: ST_TO_ADDR
53103: GO 53070
53105: POP
53106: POP
// if not tmp then
53107: LD_VAR 0 5
53111: NOT
53112: IFFALSE 53116
// exit ;
53114: GO 53136
// result := SortListByListDesc ( units , tmp ) ;
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_VAR 0 1
53125: PPUSH
53126: LD_VAR 0 5
53130: PPUSH
53131: CALL_OW 77
53135: ST_TO_ADDR
// end ;
53136: LD_VAR 0 3
53140: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53141: LD_INT 0
53143: PPUSH
53144: PPUSH
53145: PPUSH
// result := false ;
53146: LD_ADDR_VAR 0 3
53150: PUSH
53151: LD_INT 0
53153: ST_TO_ADDR
// if not building then
53154: LD_VAR 0 2
53158: NOT
53159: IFFALSE 53163
// exit ;
53161: GO 53307
// x := GetX ( building ) ;
53163: LD_ADDR_VAR 0 4
53167: PUSH
53168: LD_VAR 0 2
53172: PPUSH
53173: CALL_OW 250
53177: ST_TO_ADDR
// y := GetY ( building ) ;
53178: LD_ADDR_VAR 0 5
53182: PUSH
53183: LD_VAR 0 2
53187: PPUSH
53188: CALL_OW 251
53192: ST_TO_ADDR
// if not x or not y then
53193: LD_VAR 0 4
53197: NOT
53198: IFTRUE 53207
53200: PUSH
53201: LD_VAR 0 5
53205: NOT
53206: OR
53207: IFFALSE 53211
// exit ;
53209: GO 53307
// if GetTaskList ( unit ) then
53211: LD_VAR 0 1
53215: PPUSH
53216: CALL_OW 437
53220: IFFALSE 53307
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53222: LD_STRING e
53224: PUSH
53225: LD_VAR 0 1
53229: PPUSH
53230: CALL_OW 437
53234: PUSH
53235: LD_INT 1
53237: ARRAY
53238: PUSH
53239: LD_INT 1
53241: ARRAY
53242: EQUAL
53243: IFFALSE 53270
53245: PUSH
53246: LD_VAR 0 4
53250: PUSH
53251: LD_VAR 0 1
53255: PPUSH
53256: CALL_OW 437
53260: PUSH
53261: LD_INT 1
53263: ARRAY
53264: PUSH
53265: LD_INT 2
53267: ARRAY
53268: EQUAL
53269: AND
53270: IFFALSE 53297
53272: PUSH
53273: LD_VAR 0 5
53277: PUSH
53278: LD_VAR 0 1
53282: PPUSH
53283: CALL_OW 437
53287: PUSH
53288: LD_INT 1
53290: ARRAY
53291: PUSH
53292: LD_INT 3
53294: ARRAY
53295: EQUAL
53296: AND
53297: IFFALSE 53307
// result := true end ;
53299: LD_ADDR_VAR 0 3
53303: PUSH
53304: LD_INT 1
53306: ST_TO_ADDR
// end ;
53307: LD_VAR 0 3
53311: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53312: LD_INT 0
53314: PPUSH
// result := false ;
53315: LD_ADDR_VAR 0 4
53319: PUSH
53320: LD_INT 0
53322: ST_TO_ADDR
// if GetTaskList ( unit ) then
53323: LD_VAR 0 1
53327: PPUSH
53328: CALL_OW 437
53332: IFFALSE 53419
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53334: LD_STRING M
53336: PUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 437
53346: PUSH
53347: LD_INT 1
53349: ARRAY
53350: PUSH
53351: LD_INT 1
53353: ARRAY
53354: EQUAL
53355: IFFALSE 53382
53357: PUSH
53358: LD_VAR 0 2
53362: PUSH
53363: LD_VAR 0 1
53367: PPUSH
53368: CALL_OW 437
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PUSH
53377: LD_INT 2
53379: ARRAY
53380: EQUAL
53381: AND
53382: IFFALSE 53409
53384: PUSH
53385: LD_VAR 0 3
53389: PUSH
53390: LD_VAR 0 1
53394: PPUSH
53395: CALL_OW 437
53399: PUSH
53400: LD_INT 1
53402: ARRAY
53403: PUSH
53404: LD_INT 3
53406: ARRAY
53407: EQUAL
53408: AND
53409: IFFALSE 53419
// result := true ;
53411: LD_ADDR_VAR 0 4
53415: PUSH
53416: LD_INT 1
53418: ST_TO_ADDR
// end ; end ;
53419: LD_VAR 0 4
53423: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53424: LD_INT 0
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
// if not unit or not area then
53430: LD_VAR 0 1
53434: NOT
53435: IFTRUE 53444
53437: PUSH
53438: LD_VAR 0 2
53442: NOT
53443: OR
53444: IFFALSE 53448
// exit ;
53446: GO 53624
// tmp := AreaToList ( area , i ) ;
53448: LD_ADDR_VAR 0 6
53452: PUSH
53453: LD_VAR 0 2
53457: PPUSH
53458: LD_VAR 0 5
53462: PPUSH
53463: CALL_OW 517
53467: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53468: LD_ADDR_VAR 0 5
53472: PUSH
53473: DOUBLE
53474: LD_INT 1
53476: DEC
53477: ST_TO_ADDR
53478: LD_VAR 0 6
53482: PUSH
53483: LD_INT 1
53485: ARRAY
53486: PUSH
53487: FOR_TO
53488: IFFALSE 53622
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53490: LD_ADDR_VAR 0 7
53494: PUSH
53495: LD_VAR 0 6
53499: PUSH
53500: LD_INT 1
53502: ARRAY
53503: PUSH
53504: LD_VAR 0 5
53508: ARRAY
53509: PUSH
53510: LD_VAR 0 6
53514: PUSH
53515: LD_INT 2
53517: ARRAY
53518: PUSH
53519: LD_VAR 0 5
53523: ARRAY
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53529: LD_INT 92
53531: PUSH
53532: LD_VAR 0 7
53536: PUSH
53537: LD_INT 1
53539: ARRAY
53540: PUSH
53541: LD_VAR 0 7
53545: PUSH
53546: LD_INT 2
53548: ARRAY
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: PPUSH
53559: CALL_OW 69
53563: PUSH
53564: LD_INT 0
53566: EQUAL
53567: IFFALSE 53620
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53569: LD_VAR 0 1
53573: PPUSH
53574: LD_VAR 0 7
53578: PUSH
53579: LD_INT 1
53581: ARRAY
53582: PPUSH
53583: LD_VAR 0 7
53587: PUSH
53588: LD_INT 2
53590: ARRAY
53591: PPUSH
53592: LD_VAR 0 3
53596: PPUSH
53597: CALL_OW 48
// result := IsPlaced ( unit ) ;
53601: LD_ADDR_VAR 0 4
53605: PUSH
53606: LD_VAR 0 1
53610: PPUSH
53611: CALL_OW 305
53615: ST_TO_ADDR
// exit ;
53616: POP
53617: POP
53618: GO 53624
// end ; end ;
53620: GO 53487
53622: POP
53623: POP
// end ;
53624: LD_VAR 0 4
53628: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53629: LD_INT 0
53631: PPUSH
53632: PPUSH
53633: PPUSH
// if not side or side > 8 then
53634: LD_VAR 0 1
53638: NOT
53639: IFTRUE 53651
53641: PUSH
53642: LD_VAR 0 1
53646: PUSH
53647: LD_INT 8
53649: GREATER
53650: OR
53651: IFFALSE 53655
// exit ;
53653: GO 53842
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53655: LD_ADDR_VAR 0 4
53659: PUSH
53660: LD_INT 22
53662: PUSH
53663: LD_VAR 0 1
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 21
53674: PUSH
53675: LD_INT 3
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PPUSH
53686: CALL_OW 69
53690: ST_TO_ADDR
// if not tmp then
53691: LD_VAR 0 4
53695: NOT
53696: IFFALSE 53700
// exit ;
53698: GO 53842
// enable_addtolog := true ;
53700: LD_ADDR_OWVAR 81
53704: PUSH
53705: LD_INT 1
53707: ST_TO_ADDR
// AddToLog ( [ ) ;
53708: LD_STRING [
53710: PPUSH
53711: CALL_OW 561
// for i in tmp do
53715: LD_ADDR_VAR 0 3
53719: PUSH
53720: LD_VAR 0 4
53724: PUSH
53725: FOR_IN
53726: IFFALSE 53833
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53728: LD_STRING [
53730: PUSH
53731: LD_VAR 0 3
53735: PPUSH
53736: CALL_OW 266
53740: STR
53741: PUSH
53742: LD_STRING , 
53744: STR
53745: PUSH
53746: LD_VAR 0 3
53750: PPUSH
53751: CALL_OW 250
53755: STR
53756: PUSH
53757: LD_STRING , 
53759: STR
53760: PUSH
53761: LD_VAR 0 3
53765: PPUSH
53766: CALL_OW 251
53770: STR
53771: PUSH
53772: LD_STRING , 
53774: STR
53775: PUSH
53776: LD_VAR 0 3
53780: PPUSH
53781: CALL_OW 254
53785: STR
53786: PUSH
53787: LD_STRING , 
53789: STR
53790: PUSH
53791: LD_VAR 0 3
53795: PPUSH
53796: LD_INT 1
53798: PPUSH
53799: CALL_OW 268
53803: STR
53804: PUSH
53805: LD_STRING , 
53807: STR
53808: PUSH
53809: LD_VAR 0 3
53813: PPUSH
53814: LD_INT 2
53816: PPUSH
53817: CALL_OW 268
53821: STR
53822: PUSH
53823: LD_STRING ],
53825: STR
53826: PPUSH
53827: CALL_OW 561
// end ;
53831: GO 53725
53833: POP
53834: POP
// AddToLog ( ]; ) ;
53835: LD_STRING ];
53837: PPUSH
53838: CALL_OW 561
// end ;
53842: LD_VAR 0 2
53846: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53847: LD_INT 0
53849: PPUSH
53850: PPUSH
53851: PPUSH
53852: PPUSH
53853: PPUSH
// if not area or not rate or not max then
53854: LD_VAR 0 1
53858: NOT
53859: IFTRUE 53868
53861: PUSH
53862: LD_VAR 0 2
53866: NOT
53867: OR
53868: IFTRUE 53877
53870: PUSH
53871: LD_VAR 0 4
53875: NOT
53876: OR
53877: IFFALSE 53881
// exit ;
53879: GO 54070
// while 1 do
53881: LD_INT 1
53883: IFFALSE 54070
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53885: LD_ADDR_VAR 0 9
53889: PUSH
53890: LD_VAR 0 1
53894: PPUSH
53895: LD_INT 1
53897: PPUSH
53898: CALL_OW 287
53902: PUSH
53903: LD_INT 10
53905: MUL
53906: ST_TO_ADDR
// r := rate / 10 ;
53907: LD_ADDR_VAR 0 7
53911: PUSH
53912: LD_VAR 0 2
53916: PUSH
53917: LD_INT 10
53919: DIVREAL
53920: ST_TO_ADDR
// time := 1 1$00 ;
53921: LD_ADDR_VAR 0 8
53925: PUSH
53926: LD_INT 2100
53928: ST_TO_ADDR
// if amount < min then
53929: LD_VAR 0 9
53933: PUSH
53934: LD_VAR 0 3
53938: LESS
53939: IFFALSE 53957
// r := r * 2 else
53941: LD_ADDR_VAR 0 7
53945: PUSH
53946: LD_VAR 0 7
53950: PUSH
53951: LD_INT 2
53953: MUL
53954: ST_TO_ADDR
53955: GO 53983
// if amount > max then
53957: LD_VAR 0 9
53961: PUSH
53962: LD_VAR 0 4
53966: GREATER
53967: IFFALSE 53983
// r := r / 2 ;
53969: LD_ADDR_VAR 0 7
53973: PUSH
53974: LD_VAR 0 7
53978: PUSH
53979: LD_INT 2
53981: DIVREAL
53982: ST_TO_ADDR
// time := time / r ;
53983: LD_ADDR_VAR 0 8
53987: PUSH
53988: LD_VAR 0 8
53992: PUSH
53993: LD_VAR 0 7
53997: DIVREAL
53998: ST_TO_ADDR
// if time < 0 then
53999: LD_VAR 0 8
54003: PUSH
54004: LD_INT 0
54006: LESS
54007: IFFALSE 54024
// time := time * - 1 ;
54009: LD_ADDR_VAR 0 8
54013: PUSH
54014: LD_VAR 0 8
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: MUL
54023: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54024: LD_VAR 0 8
54028: PUSH
54029: LD_INT 35
54031: PPUSH
54032: LD_INT 875
54034: PPUSH
54035: CALL_OW 12
54039: PLUS
54040: PPUSH
54041: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54045: LD_INT 1
54047: PPUSH
54048: LD_INT 5
54050: PPUSH
54051: CALL_OW 12
54055: PPUSH
54056: LD_VAR 0 1
54060: PPUSH
54061: LD_INT 1
54063: PPUSH
54064: CALL_OW 55
// end ;
54068: GO 53881
// end ;
54070: LD_VAR 0 5
54074: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54075: LD_INT 0
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
// if not turrets or not factories then
54085: LD_VAR 0 1
54089: NOT
54090: IFTRUE 54099
54092: PUSH
54093: LD_VAR 0 2
54097: NOT
54098: OR
54099: IFFALSE 54103
// exit ;
54101: GO 54410
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54103: LD_ADDR_VAR 0 10
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: LD_INT 6
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 4
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: LD_INT 5
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 24
54145: PUSH
54146: LD_INT 25
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 23
54155: PUSH
54156: LD_INT 27
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 42
54169: PUSH
54170: LD_INT 43
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 44
54179: PUSH
54180: LD_INT 46
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 45
54189: PUSH
54190: LD_INT 47
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: ST_TO_ADDR
// result := [ ] ;
54207: LD_ADDR_VAR 0 3
54211: PUSH
54212: EMPTY
54213: ST_TO_ADDR
// for i in turrets do
54214: LD_ADDR_VAR 0 4
54218: PUSH
54219: LD_VAR 0 1
54223: PUSH
54224: FOR_IN
54225: IFFALSE 54408
// begin nat := GetNation ( i ) ;
54227: LD_ADDR_VAR 0 7
54231: PUSH
54232: LD_VAR 0 4
54236: PPUSH
54237: CALL_OW 248
54241: ST_TO_ADDR
// weapon := 0 ;
54242: LD_ADDR_VAR 0 8
54246: PUSH
54247: LD_INT 0
54249: ST_TO_ADDR
// if not nat then
54250: LD_VAR 0 7
54254: NOT
54255: IFFALSE 54259
// continue ;
54257: GO 54224
// for j in list [ nat ] do
54259: LD_ADDR_VAR 0 5
54263: PUSH
54264: LD_VAR 0 10
54268: PUSH
54269: LD_VAR 0 7
54273: ARRAY
54274: PUSH
54275: FOR_IN
54276: IFFALSE 54317
// if GetBWeapon ( i ) = j [ 1 ] then
54278: LD_VAR 0 4
54282: PPUSH
54283: CALL_OW 269
54287: PUSH
54288: LD_VAR 0 5
54292: PUSH
54293: LD_INT 1
54295: ARRAY
54296: EQUAL
54297: IFFALSE 54315
// begin weapon := j [ 2 ] ;
54299: LD_ADDR_VAR 0 8
54303: PUSH
54304: LD_VAR 0 5
54308: PUSH
54309: LD_INT 2
54311: ARRAY
54312: ST_TO_ADDR
// break ;
54313: GO 54317
// end ;
54315: GO 54275
54317: POP
54318: POP
// if not weapon then
54319: LD_VAR 0 8
54323: NOT
54324: IFFALSE 54328
// continue ;
54326: GO 54224
// for k in factories do
54328: LD_ADDR_VAR 0 6
54332: PUSH
54333: LD_VAR 0 2
54337: PUSH
54338: FOR_IN
54339: IFFALSE 54404
// begin weapons := AvailableWeaponList ( k ) ;
54341: LD_ADDR_VAR 0 9
54345: PUSH
54346: LD_VAR 0 6
54350: PPUSH
54351: CALL_OW 478
54355: ST_TO_ADDR
// if not weapons then
54356: LD_VAR 0 9
54360: NOT
54361: IFFALSE 54365
// continue ;
54363: GO 54338
// if weapon in weapons then
54365: LD_VAR 0 8
54369: PUSH
54370: LD_VAR 0 9
54374: IN
54375: IFFALSE 54402
// begin result := [ i , weapon ] ;
54377: LD_ADDR_VAR 0 3
54381: PUSH
54382: LD_VAR 0 4
54386: PUSH
54387: LD_VAR 0 8
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: ST_TO_ADDR
// exit ;
54396: POP
54397: POP
54398: POP
54399: POP
54400: GO 54410
// end ; end ;
54402: GO 54338
54404: POP
54405: POP
// end ;
54406: GO 54224
54408: POP
54409: POP
// end ;
54410: LD_VAR 0 3
54414: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54415: LD_INT 0
54417: PPUSH
// if not side or side > 8 then
54418: LD_VAR 0 3
54422: NOT
54423: IFTRUE 54435
54425: PUSH
54426: LD_VAR 0 3
54430: PUSH
54431: LD_INT 8
54433: GREATER
54434: OR
54435: IFFALSE 54439
// exit ;
54437: GO 54498
// if not range then
54439: LD_VAR 0 4
54443: NOT
54444: IFFALSE 54455
// range := - 12 ;
54446: LD_ADDR_VAR 0 4
54450: PUSH
54451: LD_INT 12
54453: NEG
54454: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54455: LD_VAR 0 1
54459: PPUSH
54460: LD_VAR 0 2
54464: PPUSH
54465: LD_VAR 0 3
54469: PPUSH
54470: LD_VAR 0 4
54474: PPUSH
54475: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54479: LD_VAR 0 1
54483: PPUSH
54484: LD_VAR 0 2
54488: PPUSH
54489: LD_VAR 0 3
54493: PPUSH
54494: CALL_OW 331
// end ;
54498: LD_VAR 0 5
54502: RET
// export function Video ( mode ) ; begin
54503: LD_INT 0
54505: PPUSH
// ingame_video = mode ;
54506: LD_ADDR_OWVAR 52
54510: PUSH
54511: LD_VAR 0 1
54515: ST_TO_ADDR
// interface_hidden = mode ;
54516: LD_ADDR_OWVAR 54
54520: PUSH
54521: LD_VAR 0 1
54525: ST_TO_ADDR
// end ;
54526: LD_VAR 0 2
54530: RET
// export function Join ( array , element ) ; begin
54531: LD_INT 0
54533: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54534: LD_ADDR_VAR 0 3
54538: PUSH
54539: LD_VAR 0 1
54543: PPUSH
54544: LD_VAR 0 1
54548: PUSH
54549: LD_INT 1
54551: PLUS
54552: PPUSH
54553: LD_VAR 0 2
54557: PPUSH
54558: CALL_OW 1
54562: ST_TO_ADDR
// end ;
54563: LD_VAR 0 3
54567: RET
// export function JoinUnion ( array , element ) ; begin
54568: LD_INT 0
54570: PPUSH
// result := array union element ;
54571: LD_ADDR_VAR 0 3
54575: PUSH
54576: LD_VAR 0 1
54580: PUSH
54581: LD_VAR 0 2
54585: UNION
54586: ST_TO_ADDR
// end ;
54587: LD_VAR 0 3
54591: RET
// export function GetBehemoths ( side ) ; begin
54592: LD_INT 0
54594: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54595: LD_ADDR_VAR 0 2
54599: PUSH
54600: LD_INT 22
54602: PUSH
54603: LD_VAR 0 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 31
54614: PUSH
54615: LD_INT 25
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PPUSH
54626: CALL_OW 69
54630: ST_TO_ADDR
// end ;
54631: LD_VAR 0 2
54635: RET
// export function Shuffle ( array ) ; var i , index ; begin
54636: LD_INT 0
54638: PPUSH
54639: PPUSH
54640: PPUSH
// result := [ ] ;
54641: LD_ADDR_VAR 0 2
54645: PUSH
54646: EMPTY
54647: ST_TO_ADDR
// if not array then
54648: LD_VAR 0 1
54652: NOT
54653: IFFALSE 54657
// exit ;
54655: GO 54756
// Randomize ;
54657: CALL_OW 10
// for i = array downto 1 do
54661: LD_ADDR_VAR 0 3
54665: PUSH
54666: DOUBLE
54667: LD_VAR 0 1
54671: INC
54672: ST_TO_ADDR
54673: LD_INT 1
54675: PUSH
54676: FOR_DOWNTO
54677: IFFALSE 54754
// begin index := rand ( 1 , array ) ;
54679: LD_ADDR_VAR 0 4
54683: PUSH
54684: LD_INT 1
54686: PPUSH
54687: LD_VAR 0 1
54691: PPUSH
54692: CALL_OW 12
54696: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54697: LD_ADDR_VAR 0 2
54701: PUSH
54702: LD_VAR 0 2
54706: PPUSH
54707: LD_VAR 0 2
54711: PUSH
54712: LD_INT 1
54714: PLUS
54715: PPUSH
54716: LD_VAR 0 1
54720: PUSH
54721: LD_VAR 0 4
54725: ARRAY
54726: PPUSH
54727: CALL_OW 2
54731: ST_TO_ADDR
// array := Delete ( array , index ) ;
54732: LD_ADDR_VAR 0 1
54736: PUSH
54737: LD_VAR 0 1
54741: PPUSH
54742: LD_VAR 0 4
54746: PPUSH
54747: CALL_OW 3
54751: ST_TO_ADDR
// end ;
54752: GO 54676
54754: POP
54755: POP
// end ;
54756: LD_VAR 0 2
54760: RET
// export function GetBaseMaterials ( base ) ; begin
54761: LD_INT 0
54763: PPUSH
// result := [ 0 , 0 , 0 ] ;
54764: LD_ADDR_VAR 0 2
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: ST_TO_ADDR
// if not base then
54783: LD_VAR 0 1
54787: NOT
54788: IFFALSE 54792
// exit ;
54790: GO 54841
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54792: LD_ADDR_VAR 0 2
54796: PUSH
54797: LD_VAR 0 1
54801: PPUSH
54802: LD_INT 1
54804: PPUSH
54805: CALL_OW 275
54809: PUSH
54810: LD_VAR 0 1
54814: PPUSH
54815: LD_INT 2
54817: PPUSH
54818: CALL_OW 275
54822: PUSH
54823: LD_VAR 0 1
54827: PPUSH
54828: LD_INT 3
54830: PPUSH
54831: CALL_OW 275
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: LIST
54840: ST_TO_ADDR
// end ;
54841: LD_VAR 0 2
54845: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54846: LD_INT 0
54848: PPUSH
54849: PPUSH
// result := array ;
54850: LD_ADDR_VAR 0 3
54854: PUSH
54855: LD_VAR 0 1
54859: ST_TO_ADDR
// if size >= result then
54860: LD_VAR 0 2
54864: PUSH
54865: LD_VAR 0 3
54869: GREATEREQUAL
54870: IFFALSE 54874
// exit ;
54872: GO 54924
// if size then
54874: LD_VAR 0 2
54878: IFFALSE 54924
// for i := array downto size do
54880: LD_ADDR_VAR 0 4
54884: PUSH
54885: DOUBLE
54886: LD_VAR 0 1
54890: INC
54891: ST_TO_ADDR
54892: LD_VAR 0 2
54896: PUSH
54897: FOR_DOWNTO
54898: IFFALSE 54922
// result := Delete ( result , result ) ;
54900: LD_ADDR_VAR 0 3
54904: PUSH
54905: LD_VAR 0 3
54909: PPUSH
54910: LD_VAR 0 3
54914: PPUSH
54915: CALL_OW 3
54919: ST_TO_ADDR
54920: GO 54897
54922: POP
54923: POP
// end ;
54924: LD_VAR 0 3
54928: RET
// export function ComExit ( unit ) ; var tmp ; begin
54929: LD_INT 0
54931: PPUSH
54932: PPUSH
// if not IsInUnit ( unit ) then
54933: LD_VAR 0 1
54937: PPUSH
54938: CALL_OW 310
54942: NOT
54943: IFFALSE 54947
// exit ;
54945: GO 55007
// tmp := IsInUnit ( unit ) ;
54947: LD_ADDR_VAR 0 3
54951: PUSH
54952: LD_VAR 0 1
54956: PPUSH
54957: CALL_OW 310
54961: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54962: LD_VAR 0 3
54966: PPUSH
54967: CALL_OW 247
54971: PUSH
54972: LD_INT 2
54974: EQUAL
54975: IFFALSE 54988
// ComExitVehicle ( unit ) else
54977: LD_VAR 0 1
54981: PPUSH
54982: CALL_OW 121
54986: GO 54997
// ComExitBuilding ( unit ) ;
54988: LD_VAR 0 1
54992: PPUSH
54993: CALL_OW 122
// result := tmp ;
54997: LD_ADDR_VAR 0 2
55001: PUSH
55002: LD_VAR 0 3
55006: ST_TO_ADDR
// end ;
55007: LD_VAR 0 2
55011: RET
// export function ComExitAll ( units ) ; var i ; begin
55012: LD_INT 0
55014: PPUSH
55015: PPUSH
// if not units then
55016: LD_VAR 0 1
55020: NOT
55021: IFFALSE 55025
// exit ;
55023: GO 55051
// for i in units do
55025: LD_ADDR_VAR 0 3
55029: PUSH
55030: LD_VAR 0 1
55034: PUSH
55035: FOR_IN
55036: IFFALSE 55049
// ComExit ( i ) ;
55038: LD_VAR 0 3
55042: PPUSH
55043: CALL 54929 0 1
55047: GO 55035
55049: POP
55050: POP
// end ;
55051: LD_VAR 0 2
55055: RET
// export function ResetHc ; begin
55056: LD_INT 0
55058: PPUSH
// InitHc ;
55059: CALL_OW 19
// hc_importance := 0 ;
55063: LD_ADDR_OWVAR 32
55067: PUSH
55068: LD_INT 0
55070: ST_TO_ADDR
// end ;
55071: LD_VAR 0 1
55075: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55076: LD_INT 0
55078: PPUSH
55079: PPUSH
55080: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55081: LD_ADDR_VAR 0 6
55085: PUSH
55086: LD_VAR 0 1
55090: PUSH
55091: LD_VAR 0 3
55095: PLUS
55096: PUSH
55097: LD_INT 2
55099: DIV
55100: ST_TO_ADDR
// if _x < 0 then
55101: LD_VAR 0 6
55105: PUSH
55106: LD_INT 0
55108: LESS
55109: IFFALSE 55126
// _x := _x * - 1 ;
55111: LD_ADDR_VAR 0 6
55115: PUSH
55116: LD_VAR 0 6
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: MUL
55125: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55126: LD_ADDR_VAR 0 7
55130: PUSH
55131: LD_VAR 0 2
55135: PUSH
55136: LD_VAR 0 4
55140: PLUS
55141: PUSH
55142: LD_INT 2
55144: DIV
55145: ST_TO_ADDR
// if _y < 0 then
55146: LD_VAR 0 7
55150: PUSH
55151: LD_INT 0
55153: LESS
55154: IFFALSE 55171
// _y := _y * - 1 ;
55156: LD_ADDR_VAR 0 7
55160: PUSH
55161: LD_VAR 0 7
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: MUL
55170: ST_TO_ADDR
// result := [ _x , _y ] ;
55171: LD_ADDR_VAR 0 5
55175: PUSH
55176: LD_VAR 0 6
55180: PUSH
55181: LD_VAR 0 7
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// end ;
55190: LD_VAR 0 5
55194: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55195: LD_INT 0
55197: PPUSH
55198: PPUSH
55199: PPUSH
55200: PPUSH
// task := GetTaskList ( unit ) ;
55201: LD_ADDR_VAR 0 7
55205: PUSH
55206: LD_VAR 0 1
55210: PPUSH
55211: CALL_OW 437
55215: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55216: LD_VAR 0 7
55220: NOT
55221: IFFALSE 55240
55223: PUSH
55224: LD_VAR 0 1
55228: PPUSH
55229: LD_VAR 0 2
55233: PPUSH
55234: CALL_OW 308
55238: NOT
55239: AND
55240: IFFALSE 55244
// exit ;
55242: GO 55362
// if IsInArea ( unit , area ) then
55244: LD_VAR 0 1
55248: PPUSH
55249: LD_VAR 0 2
55253: PPUSH
55254: CALL_OW 308
55258: IFFALSE 55276
// begin ComMoveToArea ( unit , goAway ) ;
55260: LD_VAR 0 1
55264: PPUSH
55265: LD_VAR 0 3
55269: PPUSH
55270: CALL_OW 113
// exit ;
55274: GO 55362
// end ; if task [ 1 ] [ 1 ] <> M then
55276: LD_VAR 0 7
55280: PUSH
55281: LD_INT 1
55283: ARRAY
55284: PUSH
55285: LD_INT 1
55287: ARRAY
55288: PUSH
55289: LD_STRING M
55291: NONEQUAL
55292: IFFALSE 55296
// exit ;
55294: GO 55362
// x := task [ 1 ] [ 2 ] ;
55296: LD_ADDR_VAR 0 5
55300: PUSH
55301: LD_VAR 0 7
55305: PUSH
55306: LD_INT 1
55308: ARRAY
55309: PUSH
55310: LD_INT 2
55312: ARRAY
55313: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55314: LD_ADDR_VAR 0 6
55318: PUSH
55319: LD_VAR 0 7
55323: PUSH
55324: LD_INT 1
55326: ARRAY
55327: PUSH
55328: LD_INT 3
55330: ARRAY
55331: ST_TO_ADDR
// if InArea ( x , y , area ) then
55332: LD_VAR 0 5
55336: PPUSH
55337: LD_VAR 0 6
55341: PPUSH
55342: LD_VAR 0 2
55346: PPUSH
55347: CALL_OW 309
55351: IFFALSE 55362
// ComStop ( unit ) ;
55353: LD_VAR 0 1
55357: PPUSH
55358: CALL_OW 141
// end ;
55362: LD_VAR 0 4
55366: RET
// export function Abs ( value ) ; begin
55367: LD_INT 0
55369: PPUSH
// result := value ;
55370: LD_ADDR_VAR 0 2
55374: PUSH
55375: LD_VAR 0 1
55379: ST_TO_ADDR
// if value < 0 then
55380: LD_VAR 0 1
55384: PUSH
55385: LD_INT 0
55387: LESS
55388: IFFALSE 55405
// result := value * - 1 ;
55390: LD_ADDR_VAR 0 2
55394: PUSH
55395: LD_VAR 0 1
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: MUL
55404: ST_TO_ADDR
// end ;
55405: LD_VAR 0 2
55409: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55410: LD_INT 0
55412: PPUSH
55413: PPUSH
55414: PPUSH
55415: PPUSH
55416: PPUSH
55417: PPUSH
55418: PPUSH
55419: PPUSH
// if not unit or not building then
55420: LD_VAR 0 1
55424: NOT
55425: IFTRUE 55434
55427: PUSH
55428: LD_VAR 0 2
55432: NOT
55433: OR
55434: IFFALSE 55438
// exit ;
55436: GO 55666
// x := GetX ( building ) ;
55438: LD_ADDR_VAR 0 4
55442: PUSH
55443: LD_VAR 0 2
55447: PPUSH
55448: CALL_OW 250
55452: ST_TO_ADDR
// y := GetY ( building ) ;
55453: LD_ADDR_VAR 0 6
55457: PUSH
55458: LD_VAR 0 2
55462: PPUSH
55463: CALL_OW 251
55467: ST_TO_ADDR
// d := GetDir ( building ) ;
55468: LD_ADDR_VAR 0 8
55472: PUSH
55473: LD_VAR 0 2
55477: PPUSH
55478: CALL_OW 254
55482: ST_TO_ADDR
// r := 4 ;
55483: LD_ADDR_VAR 0 9
55487: PUSH
55488: LD_INT 4
55490: ST_TO_ADDR
// for i := 1 to 5 do
55491: LD_ADDR_VAR 0 10
55495: PUSH
55496: DOUBLE
55497: LD_INT 1
55499: DEC
55500: ST_TO_ADDR
55501: LD_INT 5
55503: PUSH
55504: FOR_TO
55505: IFFALSE 55664
// begin _x := ShiftX ( x , d , r + i ) ;
55507: LD_ADDR_VAR 0 5
55511: PUSH
55512: LD_VAR 0 4
55516: PPUSH
55517: LD_VAR 0 8
55521: PPUSH
55522: LD_VAR 0 9
55526: PUSH
55527: LD_VAR 0 10
55531: PLUS
55532: PPUSH
55533: CALL_OW 272
55537: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55538: LD_ADDR_VAR 0 7
55542: PUSH
55543: LD_VAR 0 6
55547: PPUSH
55548: LD_VAR 0 8
55552: PPUSH
55553: LD_VAR 0 9
55557: PUSH
55558: LD_VAR 0 10
55562: PLUS
55563: PPUSH
55564: CALL_OW 273
55568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55569: LD_VAR 0 5
55573: PPUSH
55574: LD_VAR 0 7
55578: PPUSH
55579: CALL_OW 488
55583: IFFALSE 55618
55585: PUSH
55586: LD_VAR 0 5
55590: PPUSH
55591: LD_VAR 0 7
55595: PPUSH
55596: CALL_OW 428
55600: PPUSH
55601: CALL_OW 247
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: IN
55616: NOT
55617: AND
55618: IFFALSE 55662
// begin ComMoveXY ( unit , _x , _y ) ;
55620: LD_VAR 0 1
55624: PPUSH
55625: LD_VAR 0 5
55629: PPUSH
55630: LD_VAR 0 7
55634: PPUSH
55635: CALL_OW 111
// result := [ _x , _y ] ;
55639: LD_ADDR_VAR 0 3
55643: PUSH
55644: LD_VAR 0 5
55648: PUSH
55649: LD_VAR 0 7
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: ST_TO_ADDR
// exit ;
55658: POP
55659: POP
55660: GO 55666
// end ; end ;
55662: GO 55504
55664: POP
55665: POP
// end ;
55666: LD_VAR 0 3
55670: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55671: LD_INT 0
55673: PPUSH
55674: PPUSH
55675: PPUSH
// result := 0 ;
55676: LD_ADDR_VAR 0 3
55680: PUSH
55681: LD_INT 0
55683: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55684: LD_VAR 0 1
55688: PUSH
55689: LD_INT 0
55691: LESS
55692: IFTRUE 55704
55694: PUSH
55695: LD_VAR 0 1
55699: PUSH
55700: LD_INT 8
55702: GREATER
55703: OR
55704: IFTRUE 55716
55706: PUSH
55707: LD_VAR 0 2
55711: PUSH
55712: LD_INT 0
55714: LESS
55715: OR
55716: IFTRUE 55728
55718: PUSH
55719: LD_VAR 0 2
55723: PUSH
55724: LD_INT 8
55726: GREATER
55727: OR
55728: IFFALSE 55732
// exit ;
55730: GO 55807
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55732: LD_ADDR_VAR 0 4
55736: PUSH
55737: LD_INT 22
55739: PUSH
55740: LD_VAR 0 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PPUSH
55749: CALL_OW 69
55753: PUSH
55754: FOR_IN
55755: IFFALSE 55805
// begin un := UnitShoot ( i ) ;
55757: LD_ADDR_VAR 0 5
55761: PUSH
55762: LD_VAR 0 4
55766: PPUSH
55767: CALL_OW 504
55771: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55772: LD_VAR 0 5
55776: PPUSH
55777: CALL_OW 255
55781: PUSH
55782: LD_VAR 0 1
55786: EQUAL
55787: IFFALSE 55803
// begin result := un ;
55789: LD_ADDR_VAR 0 3
55793: PUSH
55794: LD_VAR 0 5
55798: ST_TO_ADDR
// exit ;
55799: POP
55800: POP
55801: GO 55807
// end ; end ;
55803: GO 55754
55805: POP
55806: POP
// end ;
55807: LD_VAR 0 3
55811: RET
// export function GetCargoBay ( units ) ; begin
55812: LD_INT 0
55814: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55815: LD_ADDR_VAR 0 2
55819: PUSH
55820: LD_VAR 0 1
55824: PPUSH
55825: LD_INT 2
55827: PUSH
55828: LD_INT 34
55830: PUSH
55831: LD_INT 12
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 34
55840: PUSH
55841: LD_INT 51
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 34
55850: PUSH
55851: LD_INT 32
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 34
55860: PUSH
55861: LD_INT 89
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: PPUSH
55875: CALL_OW 72
55879: ST_TO_ADDR
// end ;
55880: LD_VAR 0 2
55884: RET
// export function Negate ( value ) ; begin
55885: LD_INT 0
55887: PPUSH
// result := not value ;
55888: LD_ADDR_VAR 0 2
55892: PUSH
55893: LD_VAR 0 1
55897: NOT
55898: ST_TO_ADDR
// end ;
55899: LD_VAR 0 2
55903: RET
// export function Inc ( value ) ; begin
55904: LD_INT 0
55906: PPUSH
// result := value + 1 ;
55907: LD_ADDR_VAR 0 2
55911: PUSH
55912: LD_VAR 0 1
55916: PUSH
55917: LD_INT 1
55919: PLUS
55920: ST_TO_ADDR
// end ;
55921: LD_VAR 0 2
55925: RET
// export function Dec ( value ) ; begin
55926: LD_INT 0
55928: PPUSH
// result := value - 1 ;
55929: LD_ADDR_VAR 0 2
55933: PUSH
55934: LD_VAR 0 1
55938: PUSH
55939: LD_INT 1
55941: MINUS
55942: ST_TO_ADDR
// end ;
55943: LD_VAR 0 2
55947: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55948: LD_INT 0
55950: PPUSH
55951: PPUSH
55952: PPUSH
55953: PPUSH
55954: PPUSH
55955: PPUSH
55956: PPUSH
55957: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55958: LD_VAR 0 1
55962: PPUSH
55963: LD_VAR 0 2
55967: PPUSH
55968: CALL_OW 488
55972: NOT
55973: IFTRUE 55992
55975: PUSH
55976: LD_VAR 0 3
55980: PPUSH
55981: LD_VAR 0 4
55985: PPUSH
55986: CALL_OW 488
55990: NOT
55991: OR
55992: IFFALSE 56005
// begin result := - 1 ;
55994: LD_ADDR_VAR 0 5
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: ST_TO_ADDR
// exit ;
56003: GO 56240
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56005: LD_ADDR_VAR 0 12
56009: PUSH
56010: LD_VAR 0 1
56014: PPUSH
56015: LD_VAR 0 2
56019: PPUSH
56020: LD_VAR 0 3
56024: PPUSH
56025: LD_VAR 0 4
56029: PPUSH
56030: CALL 55076 0 4
56034: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56035: LD_ADDR_VAR 0 11
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: LD_VAR 0 2
56049: PPUSH
56050: LD_VAR 0 12
56054: PUSH
56055: LD_INT 1
56057: ARRAY
56058: PPUSH
56059: LD_VAR 0 12
56063: PUSH
56064: LD_INT 2
56066: ARRAY
56067: PPUSH
56068: CALL_OW 298
56072: ST_TO_ADDR
// distance := 9999 ;
56073: LD_ADDR_VAR 0 10
56077: PUSH
56078: LD_INT 9999
56080: ST_TO_ADDR
// for i := 0 to 5 do
56081: LD_ADDR_VAR 0 6
56085: PUSH
56086: DOUBLE
56087: LD_INT 0
56089: DEC
56090: ST_TO_ADDR
56091: LD_INT 5
56093: PUSH
56094: FOR_TO
56095: IFFALSE 56238
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56097: LD_ADDR_VAR 0 7
56101: PUSH
56102: LD_VAR 0 1
56106: PPUSH
56107: LD_VAR 0 6
56111: PPUSH
56112: LD_VAR 0 11
56116: PPUSH
56117: CALL_OW 272
56121: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56122: LD_ADDR_VAR 0 8
56126: PUSH
56127: LD_VAR 0 2
56131: PPUSH
56132: LD_VAR 0 6
56136: PPUSH
56137: LD_VAR 0 11
56141: PPUSH
56142: CALL_OW 273
56146: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56147: LD_VAR 0 7
56151: PPUSH
56152: LD_VAR 0 8
56156: PPUSH
56157: CALL_OW 488
56161: NOT
56162: IFFALSE 56166
// continue ;
56164: GO 56094
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56166: LD_ADDR_VAR 0 9
56170: PUSH
56171: LD_VAR 0 12
56175: PUSH
56176: LD_INT 1
56178: ARRAY
56179: PPUSH
56180: LD_VAR 0 12
56184: PUSH
56185: LD_INT 2
56187: ARRAY
56188: PPUSH
56189: LD_VAR 0 7
56193: PPUSH
56194: LD_VAR 0 8
56198: PPUSH
56199: CALL_OW 298
56203: ST_TO_ADDR
// if tmp < distance then
56204: LD_VAR 0 9
56208: PUSH
56209: LD_VAR 0 10
56213: LESS
56214: IFFALSE 56236
// begin result := i ;
56216: LD_ADDR_VAR 0 5
56220: PUSH
56221: LD_VAR 0 6
56225: ST_TO_ADDR
// distance := tmp ;
56226: LD_ADDR_VAR 0 10
56230: PUSH
56231: LD_VAR 0 9
56235: ST_TO_ADDR
// end ; end ;
56236: GO 56094
56238: POP
56239: POP
// end ;
56240: LD_VAR 0 5
56244: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56245: LD_INT 0
56247: PPUSH
56248: PPUSH
// if not driver or not IsInUnit ( driver ) then
56249: LD_VAR 0 1
56253: NOT
56254: IFTRUE 56268
56256: PUSH
56257: LD_VAR 0 1
56261: PPUSH
56262: CALL_OW 310
56266: NOT
56267: OR
56268: IFFALSE 56272
// exit ;
56270: GO 56362
// vehicle := IsInUnit ( driver ) ;
56272: LD_ADDR_VAR 0 3
56276: PUSH
56277: LD_VAR 0 1
56281: PPUSH
56282: CALL_OW 310
56286: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56287: LD_VAR 0 1
56291: PPUSH
56292: LD_STRING \
56294: PUSH
56295: LD_INT 0
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: LD_STRING E
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_VAR 0 3
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PPUSH
56358: CALL_OW 446
// end ;
56362: LD_VAR 0 2
56366: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56367: LD_INT 0
56369: PPUSH
56370: PPUSH
// if not driver or not IsInUnit ( driver ) then
56371: LD_VAR 0 1
56375: NOT
56376: IFTRUE 56390
56378: PUSH
56379: LD_VAR 0 1
56383: PPUSH
56384: CALL_OW 310
56388: NOT
56389: OR
56390: IFFALSE 56394
// exit ;
56392: GO 56484
// vehicle := IsInUnit ( driver ) ;
56394: LD_ADDR_VAR 0 3
56398: PUSH
56399: LD_VAR 0 1
56403: PPUSH
56404: CALL_OW 310
56408: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56409: LD_VAR 0 1
56413: PPUSH
56414: LD_STRING \
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: PUSH
56444: LD_STRING E
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_VAR 0 3
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PPUSH
56480: CALL_OW 447
// end ;
56484: LD_VAR 0 2
56488: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56489: LD_INT 0
56491: PPUSH
56492: PPUSH
56493: PPUSH
// tmp := [ ] ;
56494: LD_ADDR_VAR 0 5
56498: PUSH
56499: EMPTY
56500: ST_TO_ADDR
// for i in units do
56501: LD_ADDR_VAR 0 4
56505: PUSH
56506: LD_VAR 0 1
56510: PUSH
56511: FOR_IN
56512: IFFALSE 56550
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56514: LD_ADDR_VAR 0 5
56518: PUSH
56519: LD_VAR 0 5
56523: PPUSH
56524: LD_VAR 0 5
56528: PUSH
56529: LD_INT 1
56531: PLUS
56532: PPUSH
56533: LD_VAR 0 4
56537: PPUSH
56538: CALL_OW 256
56542: PPUSH
56543: CALL_OW 2
56547: ST_TO_ADDR
56548: GO 56511
56550: POP
56551: POP
// if not tmp then
56552: LD_VAR 0 5
56556: NOT
56557: IFFALSE 56561
// exit ;
56559: GO 56609
// if asc then
56561: LD_VAR 0 2
56565: IFFALSE 56589
// result := SortListByListAsc ( units , tmp ) else
56567: LD_ADDR_VAR 0 3
56571: PUSH
56572: LD_VAR 0 1
56576: PPUSH
56577: LD_VAR 0 5
56581: PPUSH
56582: CALL_OW 76
56586: ST_TO_ADDR
56587: GO 56609
// result := SortListByListDesc ( units , tmp ) ;
56589: LD_ADDR_VAR 0 3
56593: PUSH
56594: LD_VAR 0 1
56598: PPUSH
56599: LD_VAR 0 5
56603: PPUSH
56604: CALL_OW 77
56608: ST_TO_ADDR
// end ;
56609: LD_VAR 0 3
56613: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56614: LD_INT 0
56616: PPUSH
56617: PPUSH
// task := GetTaskList ( mech ) ;
56618: LD_ADDR_VAR 0 4
56622: PUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: CALL_OW 437
56632: ST_TO_ADDR
// if not task then
56633: LD_VAR 0 4
56637: NOT
56638: IFFALSE 56642
// exit ;
56640: GO 56686
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56642: LD_ADDR_VAR 0 3
56646: PUSH
56647: LD_VAR 0 4
56651: PUSH
56652: LD_INT 1
56654: ARRAY
56655: PUSH
56656: LD_INT 1
56658: ARRAY
56659: PUSH
56660: LD_STRING r
56662: EQUAL
56663: IFFALSE 56685
56665: PUSH
56666: LD_VAR 0 4
56670: PUSH
56671: LD_INT 1
56673: ARRAY
56674: PUSH
56675: LD_INT 4
56677: ARRAY
56678: PUSH
56679: LD_VAR 0 2
56683: EQUAL
56684: AND
56685: ST_TO_ADDR
// end ;
56686: LD_VAR 0 3
56690: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56691: LD_INT 0
56693: PPUSH
// SetDir ( unit , d ) ;
56694: LD_VAR 0 1
56698: PPUSH
56699: LD_VAR 0 4
56703: PPUSH
56704: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56708: LD_ADDR_VAR 0 6
56712: PUSH
56713: LD_VAR 0 1
56717: PPUSH
56718: LD_VAR 0 2
56722: PPUSH
56723: LD_VAR 0 3
56727: PPUSH
56728: LD_VAR 0 5
56732: PPUSH
56733: CALL_OW 48
56737: ST_TO_ADDR
// end ;
56738: LD_VAR 0 6
56742: RET
// export function ToNaturalNumber ( number ) ; begin
56743: LD_INT 0
56745: PPUSH
// result := number div 1 ;
56746: LD_ADDR_VAR 0 2
56750: PUSH
56751: LD_VAR 0 1
56755: PUSH
56756: LD_INT 1
56758: DIV
56759: ST_TO_ADDR
// if number < 0 then
56760: LD_VAR 0 1
56764: PUSH
56765: LD_INT 0
56767: LESS
56768: IFFALSE 56778
// result := 0 ;
56770: LD_ADDR_VAR 0 2
56774: PUSH
56775: LD_INT 0
56777: ST_TO_ADDR
// end ;
56778: LD_VAR 0 2
56782: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56783: LD_INT 0
56785: PPUSH
56786: PPUSH
56787: PPUSH
// if not buildings then
56788: LD_VAR 0 1
56792: NOT
56793: IFFALSE 56797
// exit ;
56795: GO 56912
// tmp := [ ] ;
56797: LD_ADDR_VAR 0 5
56801: PUSH
56802: EMPTY
56803: ST_TO_ADDR
// for b in buildings do
56804: LD_ADDR_VAR 0 4
56808: PUSH
56809: LD_VAR 0 1
56813: PUSH
56814: FOR_IN
56815: IFFALSE 56853
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56817: LD_ADDR_VAR 0 5
56821: PUSH
56822: LD_VAR 0 5
56826: PPUSH
56827: LD_VAR 0 5
56831: PUSH
56832: LD_INT 1
56834: PLUS
56835: PPUSH
56836: LD_VAR 0 4
56840: PPUSH
56841: CALL_OW 266
56845: PPUSH
56846: CALL_OW 1
56850: ST_TO_ADDR
56851: GO 56814
56853: POP
56854: POP
// if not tmp then
56855: LD_VAR 0 5
56859: NOT
56860: IFFALSE 56864
// exit ;
56862: GO 56912
// if asc then
56864: LD_VAR 0 2
56868: IFFALSE 56892
// result := SortListByListAsc ( buildings , tmp ) else
56870: LD_ADDR_VAR 0 3
56874: PUSH
56875: LD_VAR 0 1
56879: PPUSH
56880: LD_VAR 0 5
56884: PPUSH
56885: CALL_OW 76
56889: ST_TO_ADDR
56890: GO 56912
// result := SortListByListDesc ( buildings , tmp ) ;
56892: LD_ADDR_VAR 0 3
56896: PUSH
56897: LD_VAR 0 1
56901: PPUSH
56902: LD_VAR 0 5
56906: PPUSH
56907: CALL_OW 77
56911: ST_TO_ADDR
// end ;
56912: LD_VAR 0 3
56916: RET
// export function SortByClass ( units , class ) ; var un ; begin
56917: LD_INT 0
56919: PPUSH
56920: PPUSH
// if not units or not class then
56921: LD_VAR 0 1
56925: NOT
56926: IFTRUE 56935
56928: PUSH
56929: LD_VAR 0 2
56933: NOT
56934: OR
56935: IFFALSE 56939
// exit ;
56937: GO 57034
// result := [ ] ;
56939: LD_ADDR_VAR 0 3
56943: PUSH
56944: EMPTY
56945: ST_TO_ADDR
// for un in units do
56946: LD_ADDR_VAR 0 4
56950: PUSH
56951: LD_VAR 0 1
56955: PUSH
56956: FOR_IN
56957: IFFALSE 57032
// if GetClass ( un ) = class then
56959: LD_VAR 0 4
56963: PPUSH
56964: CALL_OW 257
56968: PUSH
56969: LD_VAR 0 2
56973: EQUAL
56974: IFFALSE 57001
// result := Insert ( result , 1 , un ) else
56976: LD_ADDR_VAR 0 3
56980: PUSH
56981: LD_VAR 0 3
56985: PPUSH
56986: LD_INT 1
56988: PPUSH
56989: LD_VAR 0 4
56993: PPUSH
56994: CALL_OW 2
56998: ST_TO_ADDR
56999: GO 57030
// result := Replace ( result , result + 1 , un ) ;
57001: LD_ADDR_VAR 0 3
57005: PUSH
57006: LD_VAR 0 3
57010: PPUSH
57011: LD_VAR 0 3
57015: PUSH
57016: LD_INT 1
57018: PLUS
57019: PPUSH
57020: LD_VAR 0 4
57024: PPUSH
57025: CALL_OW 1
57029: ST_TO_ADDR
57030: GO 56956
57032: POP
57033: POP
// end ;
57034: LD_VAR 0 3
57038: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57039: LD_INT 0
57041: PPUSH
57042: PPUSH
57043: PPUSH
57044: PPUSH
57045: PPUSH
57046: PPUSH
57047: PPUSH
// result := [ ] ;
57048: LD_ADDR_VAR 0 4
57052: PUSH
57053: EMPTY
57054: ST_TO_ADDR
// if x - r < 0 then
57055: LD_VAR 0 1
57059: PUSH
57060: LD_VAR 0 3
57064: MINUS
57065: PUSH
57066: LD_INT 0
57068: LESS
57069: IFFALSE 57081
// min_x := 0 else
57071: LD_ADDR_VAR 0 8
57075: PUSH
57076: LD_INT 0
57078: ST_TO_ADDR
57079: GO 57097
// min_x := x - r ;
57081: LD_ADDR_VAR 0 8
57085: PUSH
57086: LD_VAR 0 1
57090: PUSH
57091: LD_VAR 0 3
57095: MINUS
57096: ST_TO_ADDR
// if y - r < 0 then
57097: LD_VAR 0 2
57101: PUSH
57102: LD_VAR 0 3
57106: MINUS
57107: PUSH
57108: LD_INT 0
57110: LESS
57111: IFFALSE 57123
// min_y := 0 else
57113: LD_ADDR_VAR 0 7
57117: PUSH
57118: LD_INT 0
57120: ST_TO_ADDR
57121: GO 57139
// min_y := y - r ;
57123: LD_ADDR_VAR 0 7
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: LD_VAR 0 3
57137: MINUS
57138: ST_TO_ADDR
// max_x := x + r ;
57139: LD_ADDR_VAR 0 9
57143: PUSH
57144: LD_VAR 0 1
57148: PUSH
57149: LD_VAR 0 3
57153: PLUS
57154: ST_TO_ADDR
// max_y := y + r ;
57155: LD_ADDR_VAR 0 10
57159: PUSH
57160: LD_VAR 0 2
57164: PUSH
57165: LD_VAR 0 3
57169: PLUS
57170: ST_TO_ADDR
// for _x = min_x to max_x do
57171: LD_ADDR_VAR 0 5
57175: PUSH
57176: DOUBLE
57177: LD_VAR 0 8
57181: DEC
57182: ST_TO_ADDR
57183: LD_VAR 0 9
57187: PUSH
57188: FOR_TO
57189: IFFALSE 57290
// for _y = min_y to max_y do
57191: LD_ADDR_VAR 0 6
57195: PUSH
57196: DOUBLE
57197: LD_VAR 0 7
57201: DEC
57202: ST_TO_ADDR
57203: LD_VAR 0 10
57207: PUSH
57208: FOR_TO
57209: IFFALSE 57286
// begin if not ValidHex ( _x , _y ) then
57211: LD_VAR 0 5
57215: PPUSH
57216: LD_VAR 0 6
57220: PPUSH
57221: CALL_OW 488
57225: NOT
57226: IFFALSE 57230
// continue ;
57228: GO 57208
// if GetResourceTypeXY ( _x , _y ) then
57230: LD_VAR 0 5
57234: PPUSH
57235: LD_VAR 0 6
57239: PPUSH
57240: CALL_OW 283
57244: IFFALSE 57284
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57246: LD_ADDR_VAR 0 4
57250: PUSH
57251: LD_VAR 0 4
57255: PPUSH
57256: LD_VAR 0 4
57260: PUSH
57261: LD_INT 1
57263: PLUS
57264: PPUSH
57265: LD_VAR 0 5
57269: PUSH
57270: LD_VAR 0 6
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PPUSH
57279: CALL_OW 1
57283: ST_TO_ADDR
// end ;
57284: GO 57208
57286: POP
57287: POP
57288: GO 57188
57290: POP
57291: POP
// end ;
57292: LD_VAR 0 4
57296: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57297: LD_INT 0
57299: PPUSH
57300: PPUSH
57301: PPUSH
57302: PPUSH
57303: PPUSH
57304: PPUSH
57305: PPUSH
57306: PPUSH
// if not units then
57307: LD_VAR 0 1
57311: NOT
57312: IFFALSE 57316
// exit ;
57314: GO 57848
// result := UnitFilter ( units , [ f_ok ] ) ;
57316: LD_ADDR_VAR 0 3
57320: PUSH
57321: LD_VAR 0 1
57325: PPUSH
57326: LD_INT 50
57328: PUSH
57329: EMPTY
57330: LIST
57331: PPUSH
57332: CALL_OW 72
57336: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57337: LD_ADDR_VAR 0 8
57341: PUSH
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 1
57349: ARRAY
57350: PPUSH
57351: CALL_OW 255
57355: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57356: LD_ADDR_VAR 0 10
57360: PUSH
57361: LD_INT 29
57363: PUSH
57364: LD_INT 91
57366: PUSH
57367: LD_INT 49
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: ST_TO_ADDR
// if not result then
57375: LD_VAR 0 3
57379: NOT
57380: IFFALSE 57384
// exit ;
57382: GO 57848
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57384: LD_ADDR_VAR 0 5
57388: PUSH
57389: LD_INT 81
57391: PUSH
57392: LD_VAR 0 8
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PPUSH
57401: CALL_OW 69
57405: ST_TO_ADDR
// for i in result do
57406: LD_ADDR_VAR 0 4
57410: PUSH
57411: LD_VAR 0 3
57415: PUSH
57416: FOR_IN
57417: IFFALSE 57846
// begin tag := GetTag ( i ) + 1 ;
57419: LD_ADDR_VAR 0 9
57423: PUSH
57424: LD_VAR 0 4
57428: PPUSH
57429: CALL_OW 110
57433: PUSH
57434: LD_INT 1
57436: PLUS
57437: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
57438: LD_ADDR_VAR 0 7
57442: PUSH
57443: LD_VAR 0 4
57447: PPUSH
57448: CALL_OW 250
57452: PPUSH
57453: LD_VAR 0 4
57457: PPUSH
57458: CALL_OW 251
57462: PPUSH
57463: LD_INT 4
57465: PPUSH
57466: CALL 57039 0 3
57470: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
57471: LD_VAR 0 4
57475: PPUSH
57476: CALL_OW 247
57480: PUSH
57481: LD_INT 2
57483: EQUAL
57484: IFFALSE 57496
57486: PUSH
57487: LD_VAR 0 7
57491: PUSH
57492: LD_INT 2
57494: GREATER
57495: AND
57496: IFFALSE 57516
57498: PUSH
57499: LD_VAR 0 4
57503: PPUSH
57504: CALL_OW 264
57508: PUSH
57509: LD_VAR 0 10
57513: IN
57514: NOT
57515: AND
57516: IFFALSE 57555
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57518: LD_VAR 0 4
57522: PPUSH
57523: LD_VAR 0 7
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PUSH
57532: LD_INT 1
57534: ARRAY
57535: PPUSH
57536: LD_VAR 0 7
57540: PUSH
57541: LD_INT 1
57543: ARRAY
57544: PUSH
57545: LD_INT 2
57547: ARRAY
57548: PPUSH
57549: CALL_OW 116
57553: GO 57844
// if path > tag then
57555: LD_VAR 0 2
57559: PUSH
57560: LD_VAR 0 9
57564: GREATER
57565: IFFALSE 57773
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57567: LD_ADDR_VAR 0 6
57571: PUSH
57572: LD_VAR 0 5
57576: PPUSH
57577: LD_INT 91
57579: PUSH
57580: LD_VAR 0 4
57584: PUSH
57585: LD_INT 8
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: PPUSH
57593: CALL_OW 72
57597: ST_TO_ADDR
// if nearEnemy then
57598: LD_VAR 0 6
57602: IFFALSE 57671
// begin if GetWeapon ( i ) = ru_time_lapser then
57604: LD_VAR 0 4
57608: PPUSH
57609: CALL_OW 264
57613: PUSH
57614: LD_INT 49
57616: EQUAL
57617: IFFALSE 57645
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57619: LD_VAR 0 4
57623: PPUSH
57624: LD_VAR 0 6
57628: PPUSH
57629: LD_VAR 0 4
57633: PPUSH
57634: CALL_OW 74
57638: PPUSH
57639: CALL_OW 112
57643: GO 57669
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57645: LD_VAR 0 4
57649: PPUSH
57650: LD_VAR 0 6
57654: PPUSH
57655: LD_VAR 0 4
57659: PPUSH
57660: CALL_OW 74
57664: PPUSH
57665: CALL 58929 0 2
// end else
57669: GO 57771
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57671: LD_VAR 0 4
57675: PPUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_VAR 0 9
57685: ARRAY
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PPUSH
57691: LD_VAR 0 2
57695: PUSH
57696: LD_VAR 0 9
57700: ARRAY
57701: PUSH
57702: LD_INT 2
57704: ARRAY
57705: PPUSH
57706: CALL_OW 297
57710: PUSH
57711: LD_INT 6
57713: GREATER
57714: IFFALSE 57757
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57716: LD_VAR 0 4
57720: PPUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_VAR 0 9
57730: ARRAY
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PPUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_VAR 0 9
57745: ARRAY
57746: PUSH
57747: LD_INT 2
57749: ARRAY
57750: PPUSH
57751: CALL_OW 114
57755: GO 57771
// SetTag ( i , tag ) ;
57757: LD_VAR 0 4
57761: PPUSH
57762: LD_VAR 0 9
57766: PPUSH
57767: CALL_OW 109
// end else
57771: GO 57844
// if enemy then
57773: LD_VAR 0 5
57777: IFFALSE 57844
// begin if GetWeapon ( i ) = ru_time_lapser then
57779: LD_VAR 0 4
57783: PPUSH
57784: CALL_OW 264
57788: PUSH
57789: LD_INT 49
57791: EQUAL
57792: IFFALSE 57820
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57794: LD_VAR 0 4
57798: PPUSH
57799: LD_VAR 0 5
57803: PPUSH
57804: LD_VAR 0 4
57808: PPUSH
57809: CALL_OW 74
57813: PPUSH
57814: CALL_OW 112
57818: GO 57844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57820: LD_VAR 0 4
57824: PPUSH
57825: LD_VAR 0 5
57829: PPUSH
57830: LD_VAR 0 4
57834: PPUSH
57835: CALL_OW 74
57839: PPUSH
57840: CALL 58929 0 2
// end ; end ;
57844: GO 57416
57846: POP
57847: POP
// end ;
57848: LD_VAR 0 3
57852: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57853: LD_INT 0
57855: PPUSH
57856: PPUSH
57857: PPUSH
// if not unit or IsInUnit ( unit ) then
57858: LD_VAR 0 1
57862: NOT
57863: IFTRUE 57876
57865: PUSH
57866: LD_VAR 0 1
57870: PPUSH
57871: CALL_OW 310
57875: OR
57876: IFFALSE 57880
// exit ;
57878: GO 57971
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57880: LD_ADDR_VAR 0 4
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 250
57894: PPUSH
57895: LD_VAR 0 2
57899: PPUSH
57900: LD_INT 1
57902: PPUSH
57903: CALL_OW 272
57907: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57908: LD_ADDR_VAR 0 5
57912: PUSH
57913: LD_VAR 0 1
57917: PPUSH
57918: CALL_OW 251
57922: PPUSH
57923: LD_VAR 0 2
57927: PPUSH
57928: LD_INT 1
57930: PPUSH
57931: CALL_OW 273
57935: ST_TO_ADDR
// if ValidHex ( x , y ) then
57936: LD_VAR 0 4
57940: PPUSH
57941: LD_VAR 0 5
57945: PPUSH
57946: CALL_OW 488
57950: IFFALSE 57971
// ComTurnXY ( unit , x , y ) ;
57952: LD_VAR 0 1
57956: PPUSH
57957: LD_VAR 0 4
57961: PPUSH
57962: LD_VAR 0 5
57966: PPUSH
57967: CALL_OW 118
// end ;
57971: LD_VAR 0 3
57975: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57976: LD_INT 0
57978: PPUSH
57979: PPUSH
// result := false ;
57980: LD_ADDR_VAR 0 3
57984: PUSH
57985: LD_INT 0
57987: ST_TO_ADDR
// if not units then
57988: LD_VAR 0 2
57992: NOT
57993: IFFALSE 57997
// exit ;
57995: GO 58042
// for i in units do
57997: LD_ADDR_VAR 0 4
58001: PUSH
58002: LD_VAR 0 2
58006: PUSH
58007: FOR_IN
58008: IFFALSE 58040
// if See ( side , i ) then
58010: LD_VAR 0 1
58014: PPUSH
58015: LD_VAR 0 4
58019: PPUSH
58020: CALL_OW 292
58024: IFFALSE 58038
// begin result := true ;
58026: LD_ADDR_VAR 0 3
58030: PUSH
58031: LD_INT 1
58033: ST_TO_ADDR
// exit ;
58034: POP
58035: POP
58036: GO 58042
// end ;
58038: GO 58007
58040: POP
58041: POP
// end ;
58042: LD_VAR 0 3
58046: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58047: LD_INT 0
58049: PPUSH
58050: PPUSH
58051: PPUSH
58052: PPUSH
// if not unit or not points then
58053: LD_VAR 0 1
58057: NOT
58058: IFTRUE 58067
58060: PUSH
58061: LD_VAR 0 2
58065: NOT
58066: OR
58067: IFFALSE 58071
// exit ;
58069: GO 58161
// dist := 99999 ;
58071: LD_ADDR_VAR 0 5
58075: PUSH
58076: LD_INT 99999
58078: ST_TO_ADDR
// for i in points do
58079: LD_ADDR_VAR 0 4
58083: PUSH
58084: LD_VAR 0 2
58088: PUSH
58089: FOR_IN
58090: IFFALSE 58159
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58092: LD_ADDR_VAR 0 6
58096: PUSH
58097: LD_VAR 0 1
58101: PPUSH
58102: LD_VAR 0 4
58106: PUSH
58107: LD_INT 1
58109: ARRAY
58110: PPUSH
58111: LD_VAR 0 4
58115: PUSH
58116: LD_INT 2
58118: ARRAY
58119: PPUSH
58120: CALL_OW 297
58124: ST_TO_ADDR
// if tmpDist < dist then
58125: LD_VAR 0 6
58129: PUSH
58130: LD_VAR 0 5
58134: LESS
58135: IFFALSE 58157
// begin result := i ;
58137: LD_ADDR_VAR 0 3
58141: PUSH
58142: LD_VAR 0 4
58146: ST_TO_ADDR
// dist := tmpDist ;
58147: LD_ADDR_VAR 0 5
58151: PUSH
58152: LD_VAR 0 6
58156: ST_TO_ADDR
// end ; end ;
58157: GO 58089
58159: POP
58160: POP
// end ;
58161: LD_VAR 0 3
58165: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58166: LD_INT 0
58168: PPUSH
// uc_side := side ;
58169: LD_ADDR_OWVAR 20
58173: PUSH
58174: LD_VAR 0 1
58178: ST_TO_ADDR
// uc_nation := 3 ;
58179: LD_ADDR_OWVAR 21
58183: PUSH
58184: LD_INT 3
58186: ST_TO_ADDR
// vc_chassis := 25 ;
58187: LD_ADDR_OWVAR 37
58191: PUSH
58192: LD_INT 25
58194: ST_TO_ADDR
// vc_engine := engine_siberite ;
58195: LD_ADDR_OWVAR 39
58199: PUSH
58200: LD_INT 3
58202: ST_TO_ADDR
// vc_control := control_computer ;
58203: LD_ADDR_OWVAR 38
58207: PUSH
58208: LD_INT 3
58210: ST_TO_ADDR
// vc_weapon := 59 ;
58211: LD_ADDR_OWVAR 40
58215: PUSH
58216: LD_INT 59
58218: ST_TO_ADDR
// result := CreateVehicle ;
58219: LD_ADDR_VAR 0 5
58223: PUSH
58224: CALL_OW 45
58228: ST_TO_ADDR
// SetDir ( result , d ) ;
58229: LD_VAR 0 5
58233: PPUSH
58234: LD_VAR 0 4
58238: PPUSH
58239: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58243: LD_VAR 0 5
58247: PPUSH
58248: LD_VAR 0 2
58252: PPUSH
58253: LD_VAR 0 3
58257: PPUSH
58258: LD_INT 0
58260: PPUSH
58261: CALL_OW 48
// end ;
58265: LD_VAR 0 5
58269: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58270: LD_INT 0
58272: PPUSH
58273: PPUSH
58274: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58275: LD_ADDR_VAR 0 2
58279: PUSH
58280: LD_INT 0
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 0
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58298: LD_VAR 0 1
58302: NOT
58303: IFTRUE 58336
58305: PUSH
58306: LD_VAR 0 1
58310: PPUSH
58311: CALL_OW 264
58315: PUSH
58316: LD_INT 12
58318: PUSH
58319: LD_INT 51
58321: PUSH
58322: LD_INT 32
58324: PUSH
58325: LD_INT 89
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: IN
58334: NOT
58335: OR
58336: IFFALSE 58340
// exit ;
58338: GO 58438
// for i := 1 to 3 do
58340: LD_ADDR_VAR 0 3
58344: PUSH
58345: DOUBLE
58346: LD_INT 1
58348: DEC
58349: ST_TO_ADDR
58350: LD_INT 3
58352: PUSH
58353: FOR_TO
58354: IFFALSE 58436
// begin tmp := GetCargo ( cargo , i ) ;
58356: LD_ADDR_VAR 0 4
58360: PUSH
58361: LD_VAR 0 1
58365: PPUSH
58366: LD_VAR 0 3
58370: PPUSH
58371: CALL_OW 289
58375: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58376: LD_ADDR_VAR 0 2
58380: PUSH
58381: LD_VAR 0 2
58385: PPUSH
58386: LD_VAR 0 3
58390: PPUSH
58391: LD_VAR 0 4
58395: PPUSH
58396: CALL_OW 1
58400: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58401: LD_ADDR_VAR 0 2
58405: PUSH
58406: LD_VAR 0 2
58410: PPUSH
58411: LD_INT 4
58413: PPUSH
58414: LD_VAR 0 2
58418: PUSH
58419: LD_INT 4
58421: ARRAY
58422: PUSH
58423: LD_VAR 0 4
58427: PLUS
58428: PPUSH
58429: CALL_OW 1
58433: ST_TO_ADDR
// end ;
58434: GO 58353
58436: POP
58437: POP
// end ;
58438: LD_VAR 0 2
58442: RET
// export function Length ( array ) ; begin
58443: LD_INT 0
58445: PPUSH
// result := array + 0 ;
58446: LD_ADDR_VAR 0 2
58450: PUSH
58451: LD_VAR 0 1
58455: PUSH
58456: LD_INT 0
58458: PLUS
58459: ST_TO_ADDR
// end ;
58460: LD_VAR 0 2
58464: RET
// export function PrepareArray ( array ) ; begin
58465: LD_INT 0
58467: PPUSH
// result := array diff 0 ;
58468: LD_ADDR_VAR 0 2
58472: PUSH
58473: LD_VAR 0 1
58477: PUSH
58478: LD_INT 0
58480: DIFF
58481: ST_TO_ADDR
// if not result [ 1 ] then
58482: LD_VAR 0 2
58486: PUSH
58487: LD_INT 1
58489: ARRAY
58490: NOT
58491: IFFALSE 58511
// result := Delete ( result , 1 ) ;
58493: LD_ADDR_VAR 0 2
58497: PUSH
58498: LD_VAR 0 2
58502: PPUSH
58503: LD_INT 1
58505: PPUSH
58506: CALL_OW 3
58510: ST_TO_ADDR
// end ;
58511: LD_VAR 0 2
58515: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58516: LD_INT 0
58518: PPUSH
58519: PPUSH
58520: PPUSH
58521: PPUSH
// sibRocketRange := 25 ;
58522: LD_ADDR_VAR 0 6
58526: PUSH
58527: LD_INT 25
58529: ST_TO_ADDR
// result := false ;
58530: LD_ADDR_VAR 0 4
58534: PUSH
58535: LD_INT 0
58537: ST_TO_ADDR
// for i := 0 to 5 do
58538: LD_ADDR_VAR 0 5
58542: PUSH
58543: DOUBLE
58544: LD_INT 0
58546: DEC
58547: ST_TO_ADDR
58548: LD_INT 5
58550: PUSH
58551: FOR_TO
58552: IFFALSE 58619
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58554: LD_VAR 0 1
58558: PPUSH
58559: LD_VAR 0 5
58563: PPUSH
58564: LD_VAR 0 6
58568: PPUSH
58569: CALL_OW 272
58573: PPUSH
58574: LD_VAR 0 2
58578: PPUSH
58579: LD_VAR 0 5
58583: PPUSH
58584: LD_VAR 0 6
58588: PPUSH
58589: CALL_OW 273
58593: PPUSH
58594: LD_VAR 0 3
58598: PPUSH
58599: CALL_OW 309
58603: IFFALSE 58617
// begin result := true ;
58605: LD_ADDR_VAR 0 4
58609: PUSH
58610: LD_INT 1
58612: ST_TO_ADDR
// exit ;
58613: POP
58614: POP
58615: GO 58621
// end ;
58617: GO 58551
58619: POP
58620: POP
// end ;
58621: LD_VAR 0 4
58625: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58626: LD_INT 0
58628: PPUSH
58629: PPUSH
58630: PPUSH
// if btype = b_depot then
58631: LD_VAR 0 2
58635: PUSH
58636: LD_INT 0
58638: EQUAL
58639: IFFALSE 58651
// begin result := true ;
58641: LD_ADDR_VAR 0 3
58645: PUSH
58646: LD_INT 1
58648: ST_TO_ADDR
// exit ;
58649: GO 58771
// end ; pom := GetBase ( depot ) ;
58651: LD_ADDR_VAR 0 4
58655: PUSH
58656: LD_VAR 0 1
58660: PPUSH
58661: CALL_OW 274
58665: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58666: LD_ADDR_VAR 0 5
58670: PUSH
58671: LD_VAR 0 2
58675: PPUSH
58676: LD_VAR 0 1
58680: PPUSH
58681: CALL_OW 248
58685: PPUSH
58686: CALL_OW 450
58690: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58691: LD_ADDR_VAR 0 3
58695: PUSH
58696: LD_VAR 0 4
58700: PPUSH
58701: LD_INT 1
58703: PPUSH
58704: CALL_OW 275
58708: PUSH
58709: LD_VAR 0 5
58713: PUSH
58714: LD_INT 1
58716: ARRAY
58717: GREATEREQUAL
58718: IFFALSE 58744
58720: PUSH
58721: LD_VAR 0 4
58725: PPUSH
58726: LD_INT 2
58728: PPUSH
58729: CALL_OW 275
58733: PUSH
58734: LD_VAR 0 5
58738: PUSH
58739: LD_INT 2
58741: ARRAY
58742: GREATEREQUAL
58743: AND
58744: IFFALSE 58770
58746: PUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: LD_INT 3
58754: PPUSH
58755: CALL_OW 275
58759: PUSH
58760: LD_VAR 0 5
58764: PUSH
58765: LD_INT 3
58767: ARRAY
58768: GREATEREQUAL
58769: AND
58770: ST_TO_ADDR
// end ;
58771: LD_VAR 0 3
58775: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58776: LD_INT 0
58778: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58779: LD_VAR 0 1
58783: PPUSH
58784: LD_VAR 0 2
58788: PPUSH
58789: LD_INT 0
58791: PPUSH
58792: LD_INT 0
58794: PPUSH
58795: LD_INT 1
58797: PPUSH
58798: LD_INT 0
58800: PPUSH
58801: CALL_OW 587
// end ;
58805: LD_VAR 0 3
58809: RET
// export function CenterOnNow ( unit ) ; begin
58810: LD_INT 0
58812: PPUSH
// result := IsInUnit ( unit ) ;
58813: LD_ADDR_VAR 0 2
58817: PUSH
58818: LD_VAR 0 1
58822: PPUSH
58823: CALL_OW 310
58827: ST_TO_ADDR
// if not result then
58828: LD_VAR 0 2
58832: NOT
58833: IFFALSE 58845
// result := unit ;
58835: LD_ADDR_VAR 0 2
58839: PUSH
58840: LD_VAR 0 1
58844: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 87
// end ;
58854: LD_VAR 0 2
58858: RET
// export function ComMoveHex ( unit , hex ) ; begin
58859: LD_INT 0
58861: PPUSH
// if not hex then
58862: LD_VAR 0 2
58866: NOT
58867: IFFALSE 58871
// exit ;
58869: GO 58924
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58871: LD_VAR 0 2
58875: PUSH
58876: LD_INT 1
58878: ARRAY
58879: PPUSH
58880: LD_VAR 0 2
58884: PUSH
58885: LD_INT 2
58887: ARRAY
58888: PPUSH
58889: CALL_OW 428
58893: IFFALSE 58897
// exit ;
58895: GO 58924
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58897: LD_VAR 0 1
58901: PPUSH
58902: LD_VAR 0 2
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PPUSH
58911: LD_VAR 0 2
58915: PUSH
58916: LD_INT 2
58918: ARRAY
58919: PPUSH
58920: CALL_OW 111
// end ;
58924: LD_VAR 0 3
58928: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58929: LD_INT 0
58931: PPUSH
58932: PPUSH
58933: PPUSH
// if not unit or not enemy then
58934: LD_VAR 0 1
58938: NOT
58939: IFTRUE 58948
58941: PUSH
58942: LD_VAR 0 2
58946: NOT
58947: OR
58948: IFFALSE 58952
// exit ;
58950: GO 59078
// x := GetX ( enemy ) ;
58952: LD_ADDR_VAR 0 4
58956: PUSH
58957: LD_VAR 0 2
58961: PPUSH
58962: CALL_OW 250
58966: ST_TO_ADDR
// y := GetY ( enemy ) ;
58967: LD_ADDR_VAR 0 5
58971: PUSH
58972: LD_VAR 0 2
58976: PPUSH
58977: CALL_OW 251
58981: ST_TO_ADDR
// if ValidHex ( x , y ) then
58982: LD_VAR 0 4
58986: PPUSH
58987: LD_VAR 0 5
58991: PPUSH
58992: CALL_OW 488
58996: IFFALSE 59078
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58998: LD_VAR 0 2
59002: PPUSH
59003: CALL_OW 247
59007: PUSH
59008: LD_INT 3
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: IN
59018: IFTRUE 59041
59020: PUSH
59021: LD_VAR 0 1
59025: PPUSH
59026: CALL_OW 255
59030: PPUSH
59031: LD_VAR 0 2
59035: PPUSH
59036: CALL_OW 292
59040: OR
59041: IFFALSE 59059
// ComAttackUnit ( unit , enemy ) else
59043: LD_VAR 0 1
59047: PPUSH
59048: LD_VAR 0 2
59052: PPUSH
59053: CALL_OW 115
59057: GO 59078
// ComAgressiveMove ( unit , x , y ) ;
59059: LD_VAR 0 1
59063: PPUSH
59064: LD_VAR 0 4
59068: PPUSH
59069: LD_VAR 0 5
59073: PPUSH
59074: CALL_OW 114
// end ;
59078: LD_VAR 0 3
59082: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
59083: LD_INT 0
59085: PPUSH
59086: PPUSH
59087: PPUSH
// list := AreaToList ( area , 0 ) ;
59088: LD_ADDR_VAR 0 5
59092: PUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: LD_INT 0
59100: PPUSH
59101: CALL_OW 517
59105: ST_TO_ADDR
// if not list then
59106: LD_VAR 0 5
59110: NOT
59111: IFFALSE 59115
// exit ;
59113: GO 59245
// if all then
59115: LD_VAR 0 2
59119: IFFALSE 59207
// begin for i := 1 to list [ 1 ] do
59121: LD_ADDR_VAR 0 4
59125: PUSH
59126: DOUBLE
59127: LD_INT 1
59129: DEC
59130: ST_TO_ADDR
59131: LD_VAR 0 5
59135: PUSH
59136: LD_INT 1
59138: ARRAY
59139: PUSH
59140: FOR_TO
59141: IFFALSE 59203
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_VAR 0 3
59152: PPUSH
59153: LD_VAR 0 3
59157: PUSH
59158: LD_INT 1
59160: PLUS
59161: PPUSH
59162: LD_VAR 0 5
59166: PUSH
59167: LD_INT 1
59169: ARRAY
59170: PUSH
59171: LD_VAR 0 4
59175: ARRAY
59176: PUSH
59177: LD_VAR 0 5
59181: PUSH
59182: LD_INT 2
59184: ARRAY
59185: PUSH
59186: LD_VAR 0 4
59190: ARRAY
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PPUSH
59196: CALL_OW 1
59200: ST_TO_ADDR
59201: GO 59140
59203: POP
59204: POP
// exit ;
59205: GO 59245
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59207: LD_ADDR_VAR 0 3
59211: PUSH
59212: LD_VAR 0 5
59216: PUSH
59217: LD_INT 1
59219: ARRAY
59220: PUSH
59221: LD_INT 1
59223: ARRAY
59224: PUSH
59225: LD_VAR 0 5
59229: PUSH
59230: LD_INT 2
59232: ARRAY
59233: PUSH
59234: LD_INT 1
59236: ARRAY
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: ST_TO_ADDR
// end ;
59245: LD_VAR 0 3
59249: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59250: LD_INT 0
59252: PPUSH
59253: PPUSH
// list := AreaToList ( area , 0 ) ;
59254: LD_ADDR_VAR 0 4
59258: PUSH
59259: LD_VAR 0 1
59263: PPUSH
59264: LD_INT 0
59266: PPUSH
59267: CALL_OW 517
59271: ST_TO_ADDR
// if not list then
59272: LD_VAR 0 4
59276: NOT
59277: IFFALSE 59281
// exit ;
59279: GO 59322
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59281: LD_ADDR_VAR 0 3
59285: PUSH
59286: LD_VAR 0 4
59290: PUSH
59291: LD_INT 1
59293: ARRAY
59294: PUSH
59295: LD_INT 1
59297: ARRAY
59298: PUSH
59299: LD_VAR 0 4
59303: PUSH
59304: LD_INT 2
59306: ARRAY
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_VAR 0 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: LIST
59321: ST_TO_ADDR
// end ;
59322: LD_VAR 0 3
59326: RET
// export function First ( array ) ; begin
59327: LD_INT 0
59329: PPUSH
// if not array then
59330: LD_VAR 0 1
59334: NOT
59335: IFFALSE 59339
// exit ;
59337: GO 59353
// result := array [ 1 ] ;
59339: LD_ADDR_VAR 0 2
59343: PUSH
59344: LD_VAR 0 1
59348: PUSH
59349: LD_INT 1
59351: ARRAY
59352: ST_TO_ADDR
// end ;
59353: LD_VAR 0 2
59357: RET
// export function Last ( array ) ; begin
59358: LD_INT 0
59360: PPUSH
// if not array then
59361: LD_VAR 0 1
59365: NOT
59366: IFFALSE 59370
// exit ;
59368: GO 59386
// result := array [ array ] ;
59370: LD_ADDR_VAR 0 2
59374: PUSH
59375: LD_VAR 0 1
59379: PUSH
59380: LD_VAR 0 1
59384: ARRAY
59385: ST_TO_ADDR
// end ;
59386: LD_VAR 0 2
59390: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59391: LD_INT 0
59393: PPUSH
59394: PPUSH
// result := [ ] ;
59395: LD_ADDR_VAR 0 5
59399: PUSH
59400: EMPTY
59401: ST_TO_ADDR
// if not array then
59402: LD_VAR 0 1
59406: NOT
59407: IFFALSE 59411
// exit ;
59409: GO 59523
// for i := 1 to array do
59411: LD_ADDR_VAR 0 6
59415: PUSH
59416: DOUBLE
59417: LD_INT 1
59419: DEC
59420: ST_TO_ADDR
59421: LD_VAR 0 1
59425: PUSH
59426: FOR_TO
59427: IFFALSE 59521
// if array [ i ] [ index ] = value then
59429: LD_VAR 0 1
59433: PUSH
59434: LD_VAR 0 6
59438: ARRAY
59439: PUSH
59440: LD_VAR 0 2
59444: ARRAY
59445: PUSH
59446: LD_VAR 0 3
59450: EQUAL
59451: IFFALSE 59519
// begin if indexColumn then
59453: LD_VAR 0 4
59457: IFFALSE 59493
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59459: LD_ADDR_VAR 0 5
59463: PUSH
59464: LD_VAR 0 5
59468: PPUSH
59469: LD_VAR 0 1
59473: PUSH
59474: LD_VAR 0 6
59478: ARRAY
59479: PUSH
59480: LD_VAR 0 4
59484: ARRAY
59485: PPUSH
59486: CALL 54531 0 2
59490: ST_TO_ADDR
59491: GO 59519
// result := Join ( result , array [ i ] ) ;
59493: LD_ADDR_VAR 0 5
59497: PUSH
59498: LD_VAR 0 5
59502: PPUSH
59503: LD_VAR 0 1
59507: PUSH
59508: LD_VAR 0 6
59512: ARRAY
59513: PPUSH
59514: CALL 54531 0 2
59518: ST_TO_ADDR
// end ;
59519: GO 59426
59521: POP
59522: POP
// end ;
59523: LD_VAR 0 5
59527: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59528: LD_INT 0
59530: PPUSH
// if not vehicles or not parkingPoint then
59531: LD_VAR 0 1
59535: NOT
59536: IFTRUE 59545
59538: PUSH
59539: LD_VAR 0 2
59543: NOT
59544: OR
59545: IFFALSE 59549
// exit ;
59547: GO 59647
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59549: LD_ADDR_VAR 0 1
59553: PUSH
59554: LD_VAR 0 1
59558: PPUSH
59559: LD_INT 50
59561: PUSH
59562: EMPTY
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 92
59570: PUSH
59571: LD_VAR 0 2
59575: PUSH
59576: LD_INT 1
59578: ARRAY
59579: PUSH
59580: LD_VAR 0 2
59584: PUSH
59585: LD_INT 2
59587: ARRAY
59588: PUSH
59589: LD_INT 8
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PPUSH
59606: CALL_OW 72
59610: ST_TO_ADDR
// if not vehicles then
59611: LD_VAR 0 1
59615: NOT
59616: IFFALSE 59620
// exit ;
59618: GO 59647
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59620: LD_VAR 0 1
59624: PPUSH
59625: LD_VAR 0 2
59629: PUSH
59630: LD_INT 1
59632: ARRAY
59633: PPUSH
59634: LD_VAR 0 2
59638: PUSH
59639: LD_INT 2
59641: ARRAY
59642: PPUSH
59643: CALL_OW 111
// end ;
59647: LD_VAR 0 3
59651: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
59656: PPUSH
// if not side or not area then
59657: LD_VAR 0 1
59661: NOT
59662: IFTRUE 59671
59664: PUSH
59665: LD_VAR 0 2
59669: NOT
59670: OR
59671: IFFALSE 59675
// exit ;
59673: GO 59794
// tmp := AreaToList ( area , 0 ) ;
59675: LD_ADDR_VAR 0 5
59679: PUSH
59680: LD_VAR 0 2
59684: PPUSH
59685: LD_INT 0
59687: PPUSH
59688: CALL_OW 517
59692: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59693: LD_ADDR_VAR 0 4
59697: PUSH
59698: DOUBLE
59699: LD_INT 1
59701: DEC
59702: ST_TO_ADDR
59703: LD_VAR 0 5
59707: PUSH
59708: LD_INT 1
59710: ARRAY
59711: PUSH
59712: FOR_TO
59713: IFFALSE 59792
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59715: LD_VAR 0 5
59719: PUSH
59720: LD_INT 1
59722: ARRAY
59723: PUSH
59724: LD_VAR 0 4
59728: ARRAY
59729: PPUSH
59730: LD_VAR 0 5
59734: PUSH
59735: LD_INT 2
59737: ARRAY
59738: PUSH
59739: LD_VAR 0 4
59743: ARRAY
59744: PPUSH
59745: CALL_OW 351
59749: IFFALSE 59790
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59751: LD_VAR 0 5
59755: PUSH
59756: LD_INT 1
59758: ARRAY
59759: PUSH
59760: LD_VAR 0 4
59764: ARRAY
59765: PPUSH
59766: LD_VAR 0 5
59770: PUSH
59771: LD_INT 2
59773: ARRAY
59774: PUSH
59775: LD_VAR 0 4
59779: ARRAY
59780: PPUSH
59781: LD_VAR 0 1
59785: PPUSH
59786: CALL_OW 244
// end ;
59790: GO 59712
59792: POP
59793: POP
// end ;
59794: LD_VAR 0 3
59798: RET
// export function UniqueArray ( array ) ; var i ; begin
59799: LD_INT 0
59801: PPUSH
59802: PPUSH
// result := [ ] ;
59803: LD_ADDR_VAR 0 2
59807: PUSH
59808: EMPTY
59809: ST_TO_ADDR
// if not array then
59810: LD_VAR 0 1
59814: NOT
59815: IFFALSE 59819
// exit ;
59817: GO 59880
// for i := 1 to array do
59819: LD_ADDR_VAR 0 3
59823: PUSH
59824: DOUBLE
59825: LD_INT 1
59827: DEC
59828: ST_TO_ADDR
59829: LD_VAR 0 1
59833: PUSH
59834: FOR_TO
59835: IFFALSE 59878
// if not array [ i ] in result then
59837: LD_VAR 0 1
59841: PUSH
59842: LD_VAR 0 3
59846: ARRAY
59847: PUSH
59848: LD_VAR 0 2
59852: IN
59853: NOT
59854: IFFALSE 59876
// result := Join ( result , i ) ;
59856: LD_ADDR_VAR 0 2
59860: PUSH
59861: LD_VAR 0 2
59865: PPUSH
59866: LD_VAR 0 3
59870: PPUSH
59871: CALL 54531 0 2
59875: ST_TO_ADDR
59876: GO 59834
59878: POP
59879: POP
// end ; end_of_file
59880: LD_VAR 0 2
59884: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59885: LD_VAR 0 1
59889: PUSH
59890: LD_INT 200
59892: DOUBLE
59893: GREATEREQUAL
59894: IFFALSE 59902
59896: LD_INT 299
59898: DOUBLE
59899: LESSEQUAL
59900: IFTRUE 59904
59902: GO 59936
59904: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_VAR 0 2
59914: PPUSH
59915: LD_VAR 0 3
59919: PPUSH
59920: LD_VAR 0 4
59924: PPUSH
59925: LD_VAR 0 5
59929: PPUSH
59930: CALL 60798 0 5
59934: GO 60013
59936: LD_INT 300
59938: DOUBLE
59939: GREATEREQUAL
59940: IFFALSE 59948
59942: LD_INT 399
59944: DOUBLE
59945: LESSEQUAL
59946: IFTRUE 59950
59948: GO 60012
59950: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59951: LD_VAR 0 1
59955: PPUSH
59956: LD_VAR 0 2
59960: PPUSH
59961: LD_VAR 0 3
59965: PPUSH
59966: LD_VAR 0 4
59970: PPUSH
59971: LD_VAR 0 5
59975: PPUSH
59976: LD_VAR 0 6
59980: PPUSH
59981: LD_VAR 0 7
59985: PPUSH
59986: LD_VAR 0 8
59990: PPUSH
59991: LD_VAR 0 9
59995: PPUSH
59996: LD_VAR 0 10
60000: PPUSH
60001: LD_VAR 0 11
60005: PPUSH
60006: CALL 67219 0 11
60010: GO 60013
60012: POP
// end ;
60013: PPOPN 11
60015: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60016: LD_VAR 0 1
60020: PPUSH
60021: LD_VAR 0 2
60025: PPUSH
60026: LD_VAR 0 3
60030: PPUSH
60031: LD_VAR 0 4
60035: PPUSH
60036: LD_VAR 0 5
60040: PPUSH
60041: CALL 60098 0 5
// end ; end_of_file
60045: PPOPN 5
60047: END
// export function SOS_UnitDestroyed ( un ) ; begin
60048: LD_INT 0
60050: PPUSH
// ComRadiation ( un ) ;
60051: LD_VAR 0 1
60055: PPUSH
60056: CALL 61218 0 1
// end ;
60060: LD_VAR 0 2
60064: RET
// export function SOS_UnitKamikazed ( un ) ; begin
60065: LD_INT 0
60067: PPUSH
// ComRadiation ( un ) ;
60068: LD_VAR 0 1
60072: PPUSH
60073: CALL 61218 0 1
// end ;
60077: LD_VAR 0 2
60081: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
60082: LD_INT 0
60084: PPUSH
// end ;
60085: LD_VAR 0 4
60089: RET
// export function SOS_Command ( cmd ) ; begin
60090: LD_INT 0
60092: PPUSH
// end ;
60093: LD_VAR 0 2
60097: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
60098: LD_INT 0
60100: PPUSH
// end ;
60101: LD_VAR 0 6
60105: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
60106: LD_INT 0
60108: PPUSH
60109: PPUSH
60110: PPUSH
60111: PPUSH
60112: PPUSH
// if not vehicle or not factory then
60113: LD_VAR 0 1
60117: NOT
60118: IFTRUE 60127
60120: PUSH
60121: LD_VAR 0 2
60125: NOT
60126: OR
60127: IFFALSE 60131
// exit ;
60129: GO 60793
// weapon := GetWeapon ( vehicle ) ;
60131: LD_ADDR_VAR 0 7
60135: PUSH
60136: LD_VAR 0 1
60140: PPUSH
60141: CALL_OW 264
60145: ST_TO_ADDR
// if weapon = ar_miner then
60146: LD_VAR 0 7
60150: PUSH
60151: LD_INT 81
60153: EQUAL
60154: IFFALSE 60211
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
60156: LD_ADDR_EXP 58
60160: PUSH
60161: LD_EXP 58
60165: PPUSH
60166: LD_EXP 58
60170: PUSH
60171: LD_INT 1
60173: PLUS
60174: PPUSH
60175: LD_VAR 0 1
60179: PPUSH
60180: CALL_OW 1
60184: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60185: LD_ADDR_EXP 59
60189: PUSH
60190: LD_EXP 59
60194: PPUSH
60195: LD_EXP 59
60199: PUSH
60200: LD_INT 1
60202: PLUS
60203: PPUSH
60204: EMPTY
60205: PPUSH
60206: CALL_OW 1
60210: ST_TO_ADDR
// end ; if not factoryWaypoints then
60211: LD_EXP 61
60215: NOT
60216: IFFALSE 60220
// exit ;
60218: GO 60793
// for i := 1 to Count ( factoryWaypoints ) do
60220: LD_ADDR_VAR 0 4
60224: PUSH
60225: DOUBLE
60226: LD_INT 1
60228: DEC
60229: ST_TO_ADDR
60230: LD_EXP 61
60234: PPUSH
60235: CALL 18555 0 1
60239: PUSH
60240: FOR_TO
60241: IFFALSE 60791
// if factoryWaypoints [ i ] [ 2 ] = factory then
60243: LD_EXP 61
60247: PUSH
60248: LD_VAR 0 4
60252: ARRAY
60253: PUSH
60254: LD_INT 2
60256: ARRAY
60257: PUSH
60258: LD_VAR 0 2
60262: EQUAL
60263: IFFALSE 60789
// begin if GetControl ( vehicle ) = control_manual then
60265: LD_VAR 0 1
60269: PPUSH
60270: CALL_OW 263
60274: PUSH
60275: LD_INT 1
60277: EQUAL
60278: IFFALSE 60642
// begin driver := IsDrivenBy ( vehicle ) ;
60280: LD_ADDR_VAR 0 5
60284: PUSH
60285: LD_VAR 0 1
60289: PPUSH
60290: CALL_OW 311
60294: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
60295: LD_VAR 0 5
60299: PUSH
60300: LD_EXP 62
60304: IN
60305: IFTRUE 60319
60307: PUSH
60308: LD_VAR 0 1
60312: PUSH
60313: LD_EXP 62
60317: IN
60318: OR
60319: IFFALSE 60325
// exit ;
60321: POP
60322: POP
60323: GO 60793
// if not HasTask ( driver ) then
60325: LD_VAR 0 5
60329: PPUSH
60330: CALL_OW 314
60334: NOT
60335: IFFALSE 60640
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
60337: LD_ADDR_EXP 62
60341: PUSH
60342: LD_EXP 62
60346: PPUSH
60347: LD_VAR 0 5
60351: PPUSH
60352: CALL 54531 0 2
60356: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
60357: LD_ADDR_EXP 62
60361: PUSH
60362: LD_EXP 62
60366: PPUSH
60367: LD_VAR 0 1
60371: PPUSH
60372: CALL 54531 0 2
60376: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60377: LD_ADDR_VAR 0 6
60381: PUSH
60382: LD_EXP 61
60386: PUSH
60387: LD_VAR 0 4
60391: ARRAY
60392: PUSH
60393: LD_INT 3
60395: ARRAY
60396: PPUSH
60397: LD_EXP 61
60401: PUSH
60402: LD_VAR 0 4
60406: ARRAY
60407: PUSH
60408: LD_INT 4
60410: ARRAY
60411: PPUSH
60412: CALL_OW 428
60416: ST_TO_ADDR
// if hex then
60417: LD_VAR 0 6
60421: IFFALSE 60439
// ComMoveUnit ( driver , hex ) else
60423: LD_VAR 0 5
60427: PPUSH
60428: LD_VAR 0 6
60432: PPUSH
60433: CALL_OW 112
60437: GO 60523
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
60439: LD_VAR 0 1
60443: PPUSH
60444: LD_EXP 61
60448: PUSH
60449: LD_VAR 0 4
60453: ARRAY
60454: PUSH
60455: LD_INT 3
60457: ARRAY
60458: PPUSH
60459: LD_EXP 61
60463: PUSH
60464: LD_VAR 0 4
60468: ARRAY
60469: PUSH
60470: LD_INT 4
60472: ARRAY
60473: PPUSH
60474: CALL_OW 297
60478: PUSH
60479: LD_INT 0
60481: GREATER
60482: IFFALSE 60523
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60484: LD_VAR 0 5
60488: PPUSH
60489: LD_EXP 61
60493: PUSH
60494: LD_VAR 0 4
60498: ARRAY
60499: PUSH
60500: LD_INT 3
60502: ARRAY
60503: PPUSH
60504: LD_EXP 61
60508: PUSH
60509: LD_VAR 0 4
60513: ARRAY
60514: PUSH
60515: LD_INT 4
60517: ARRAY
60518: PPUSH
60519: CALL_OW 111
// AddComExitVehicle ( driver ) ;
60523: LD_VAR 0 5
60527: PPUSH
60528: CALL_OW 181
// if Multiplayer then
60532: LD_OWVAR 4
60536: IFFALSE 60585
// begin repeat wait ( 10 ) ;
60538: LD_INT 10
60540: PPUSH
60541: CALL_OW 67
// until not IsInUnit ( driver ) ;
60545: LD_VAR 0 5
60549: PPUSH
60550: CALL_OW 310
60554: NOT
60555: IFFALSE 60538
// if not HasTask ( driver ) then
60557: LD_VAR 0 5
60561: PPUSH
60562: CALL_OW 314
60566: NOT
60567: IFFALSE 60583
// ComEnterUnit ( driver , factory ) ;
60569: LD_VAR 0 5
60573: PPUSH
60574: LD_VAR 0 2
60578: PPUSH
60579: CALL_OW 120
// end else
60583: GO 60599
// AddComEnterUnit ( driver , factory ) ;
60585: LD_VAR 0 5
60589: PPUSH
60590: LD_VAR 0 2
60594: PPUSH
60595: CALL_OW 180
// wait ( 0 0$1 ) ;
60599: LD_INT 35
60601: PPUSH
60602: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
60606: LD_ADDR_EXP 62
60610: PUSH
60611: LD_EXP 62
60615: PUSH
60616: LD_VAR 0 5
60620: DIFF
60621: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
60622: LD_ADDR_EXP 62
60626: PUSH
60627: LD_EXP 62
60631: PUSH
60632: LD_VAR 0 1
60636: DIFF
60637: ST_TO_ADDR
// break ;
60638: GO 60791
// end ; end else
60640: GO 60789
// if GetControl ( vehicle ) = control_remote then
60642: LD_VAR 0 1
60646: PPUSH
60647: CALL_OW 263
60651: PUSH
60652: LD_INT 2
60654: EQUAL
60655: IFFALSE 60741
// begin wait ( 0 0$2 ) ;
60657: LD_INT 70
60659: PPUSH
60660: CALL_OW 67
// repeat wait ( 10 ) ;
60664: LD_INT 10
60666: PPUSH
60667: CALL_OW 67
// Connect ( vehicle ) ;
60671: LD_VAR 0 1
60675: PPUSH
60676: CALL 24833 0 1
// until IsControledBy ( vehicle ) ;
60680: LD_VAR 0 1
60684: PPUSH
60685: CALL_OW 312
60689: IFFALSE 60664
// wait ( 10 ) ;
60691: LD_INT 10
60693: PPUSH
60694: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60698: LD_VAR 0 1
60702: PPUSH
60703: LD_EXP 61
60707: PUSH
60708: LD_VAR 0 4
60712: ARRAY
60713: PUSH
60714: LD_INT 3
60716: ARRAY
60717: PPUSH
60718: LD_EXP 61
60722: PUSH
60723: LD_VAR 0 4
60727: ARRAY
60728: PUSH
60729: LD_INT 4
60731: ARRAY
60732: PPUSH
60733: CALL_OW 111
// break ;
60737: GO 60791
// end else
60739: GO 60789
// begin wait ( 0 0$3 ) ;
60741: LD_INT 105
60743: PPUSH
60744: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
60748: LD_VAR 0 1
60752: PPUSH
60753: LD_EXP 61
60757: PUSH
60758: LD_VAR 0 4
60762: ARRAY
60763: PUSH
60764: LD_INT 3
60766: ARRAY
60767: PPUSH
60768: LD_EXP 61
60772: PUSH
60773: LD_VAR 0 4
60777: ARRAY
60778: PUSH
60779: LD_INT 4
60781: ARRAY
60782: PPUSH
60783: CALL_OW 111
// break ;
60787: GO 60791
// end ; end ;
60789: GO 60240
60791: POP
60792: POP
// end ;
60793: LD_VAR 0 3
60797: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60798: LD_INT 0
60800: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60801: LD_VAR 0 1
60805: PUSH
60806: LD_INT 250
60808: EQUAL
60809: IFFALSE 60826
60811: PUSH
60812: LD_VAR 0 2
60816: PPUSH
60817: CALL_OW 264
60821: PUSH
60822: LD_INT 81
60824: EQUAL
60825: AND
60826: IFFALSE 60847
// MinerPlaceMine ( unit , x , y ) ;
60828: LD_VAR 0 2
60832: PPUSH
60833: LD_VAR 0 4
60837: PPUSH
60838: LD_VAR 0 5
60842: PPUSH
60843: CALL 64193 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60847: LD_VAR 0 1
60851: PUSH
60852: LD_INT 251
60854: EQUAL
60855: IFFALSE 60872
60857: PUSH
60858: LD_VAR 0 2
60862: PPUSH
60863: CALL_OW 264
60867: PUSH
60868: LD_INT 81
60870: EQUAL
60871: AND
60872: IFFALSE 60893
// MinerDetonateMine ( unit , x , y ) ;
60874: LD_VAR 0 2
60878: PPUSH
60879: LD_VAR 0 4
60883: PPUSH
60884: LD_VAR 0 5
60888: PPUSH
60889: CALL 64600 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60893: LD_VAR 0 1
60897: PUSH
60898: LD_INT 252
60900: EQUAL
60901: IFFALSE 60918
60903: PUSH
60904: LD_VAR 0 2
60908: PPUSH
60909: CALL_OW 264
60913: PUSH
60914: LD_INT 81
60916: EQUAL
60917: AND
60918: IFFALSE 60939
// MinerCreateMinefield ( unit , x , y ) ;
60920: LD_VAR 0 2
60924: PPUSH
60925: LD_VAR 0 4
60929: PPUSH
60930: LD_VAR 0 5
60934: PPUSH
60935: CALL 64832 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60939: LD_VAR 0 1
60943: PUSH
60944: LD_INT 253
60946: EQUAL
60947: IFFALSE 60964
60949: PUSH
60950: LD_VAR 0 2
60954: PPUSH
60955: CALL_OW 257
60959: PUSH
60960: LD_INT 5
60962: EQUAL
60963: AND
60964: IFFALSE 60985
// ComBinocular ( unit , x , y ) ;
60966: LD_VAR 0 2
60970: PPUSH
60971: LD_VAR 0 4
60975: PPUSH
60976: LD_VAR 0 5
60980: PPUSH
60981: CALL 65207 0 3
// if selectedUnit then
60985: LD_VAR 0 3
60989: IFFALSE 61049
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60991: LD_VAR 0 1
60995: PUSH
60996: LD_INT 254
60998: EQUAL
60999: IFFALSE 61016
61001: PUSH
61002: LD_VAR 0 2
61006: PPUSH
61007: CALL_OW 264
61011: PUSH
61012: LD_INT 99
61014: EQUAL
61015: AND
61016: IFFALSE 61033
61018: PUSH
61019: LD_VAR 0 3
61023: PPUSH
61024: CALL_OW 263
61028: PUSH
61029: LD_INT 3
61031: EQUAL
61032: AND
61033: IFFALSE 61049
// HackDestroyVehicle ( unit , selectedUnit ) ;
61035: LD_VAR 0 2
61039: PPUSH
61040: LD_VAR 0 3
61044: PPUSH
61045: CALL 63383 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
61049: LD_VAR 0 1
61053: PUSH
61054: LD_INT 255
61056: EQUAL
61057: IFFALSE 61081
61059: PUSH
61060: LD_VAR 0 2
61064: PPUSH
61065: CALL_OW 264
61069: PUSH
61070: LD_INT 14
61072: PUSH
61073: LD_INT 53
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: IN
61080: AND
61081: IFFALSE 61099
61083: PUSH
61084: LD_VAR 0 4
61088: PPUSH
61089: LD_VAR 0 5
61093: PPUSH
61094: CALL_OW 488
61098: AND
61099: IFFALSE 61123
// CutTreeXYR ( unit , x , y , 12 ) ;
61101: LD_VAR 0 2
61105: PPUSH
61106: LD_VAR 0 4
61110: PPUSH
61111: LD_VAR 0 5
61115: PPUSH
61116: LD_INT 12
61118: PPUSH
61119: CALL 61314 0 4
// if cmd = 256 then
61123: LD_VAR 0 1
61127: PUSH
61128: LD_INT 256
61130: EQUAL
61131: IFFALSE 61152
// SetFactoryWaypoint ( unit , x , y ) ;
61133: LD_VAR 0 2
61137: PPUSH
61138: LD_VAR 0 4
61142: PPUSH
61143: LD_VAR 0 5
61147: PPUSH
61148: CALL 67227 0 3
// if cmd = 257 then
61152: LD_VAR 0 1
61156: PUSH
61157: LD_INT 257
61159: EQUAL
61160: IFFALSE 61181
// SetWarehouseGatheringPoint ( unit , x , y ) ;
61162: LD_VAR 0 2
61166: PPUSH
61167: LD_VAR 0 4
61171: PPUSH
61172: LD_VAR 0 5
61176: PPUSH
61177: CALL 67723 0 3
// if cmd = 258 then
61181: LD_VAR 0 1
61185: PUSH
61186: LD_INT 258
61188: EQUAL
61189: IFFALSE 61213
// BurnTreeXYR ( unit , x , y , 8 ) ;
61191: LD_VAR 0 2
61195: PPUSH
61196: LD_VAR 0 4
61200: PPUSH
61201: LD_VAR 0 5
61205: PPUSH
61206: LD_INT 8
61208: PPUSH
61209: CALL 61736 0 4
// end ;
61213: LD_VAR 0 6
61217: RET
// export function ComRadiation ( un ) ; var eff ; begin
61218: LD_INT 0
61220: PPUSH
61221: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
61222: LD_VAR 0 1
61226: PPUSH
61227: CALL_OW 264
61231: PUSH
61232: LD_INT 91
61234: NONEQUAL
61235: IFFALSE 61239
// exit ;
61237: GO 61309
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61239: LD_INT 68
61241: PPUSH
61242: LD_VAR 0 1
61246: PPUSH
61247: CALL_OW 255
61251: PPUSH
61252: CALL_OW 321
61256: PUSH
61257: LD_INT 2
61259: EQUAL
61260: IFFALSE 61272
// eff := 50 else
61262: LD_ADDR_VAR 0 3
61266: PUSH
61267: LD_INT 50
61269: ST_TO_ADDR
61270: GO 61280
// eff := 25 ;
61272: LD_ADDR_VAR 0 3
61276: PUSH
61277: LD_INT 25
61279: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61280: LD_VAR 0 1
61284: PPUSH
61285: CALL_OW 250
61289: PPUSH
61290: LD_VAR 0 1
61294: PPUSH
61295: CALL_OW 251
61299: PPUSH
61300: LD_VAR 0 3
61304: PPUSH
61305: CALL_OW 495
// end ;
61309: LD_VAR 0 2
61313: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
61314: LD_INT 0
61316: PPUSH
61317: PPUSH
61318: PPUSH
61319: PPUSH
61320: PPUSH
61321: PPUSH
61322: PPUSH
61323: PPUSH
61324: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
61325: LD_VAR 0 1
61329: PPUSH
61330: CALL_OW 302
61334: NOT
61335: IFTRUE 61354
61337: PUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: LD_VAR 0 3
61347: PPUSH
61348: CALL_OW 488
61352: NOT
61353: OR
61354: IFTRUE 61363
61356: PUSH
61357: LD_VAR 0 4
61361: NOT
61362: OR
61363: IFFALSE 61367
// exit ;
61365: GO 61731
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
61367: LD_VAR 0 1
61371: PPUSH
61372: CALL_OW 437
61376: PPUSH
61377: CALL 18555 0 1
61381: PUSH
61382: LD_INT 10
61384: GREATER
61385: IFFALSE 61389
// exit ;
61387: GO 61731
// list := [ ] ;
61389: LD_ADDR_VAR 0 13
61393: PUSH
61394: EMPTY
61395: ST_TO_ADDR
// if x - r < 0 then
61396: LD_VAR 0 2
61400: PUSH
61401: LD_VAR 0 4
61405: MINUS
61406: PUSH
61407: LD_INT 0
61409: LESS
61410: IFFALSE 61422
// min_x := 0 else
61412: LD_ADDR_VAR 0 7
61416: PUSH
61417: LD_INT 0
61419: ST_TO_ADDR
61420: GO 61438
// min_x := x - r ;
61422: LD_ADDR_VAR 0 7
61426: PUSH
61427: LD_VAR 0 2
61431: PUSH
61432: LD_VAR 0 4
61436: MINUS
61437: ST_TO_ADDR
// if y - r < 0 then
61438: LD_VAR 0 3
61442: PUSH
61443: LD_VAR 0 4
61447: MINUS
61448: PUSH
61449: LD_INT 0
61451: LESS
61452: IFFALSE 61464
// min_y := 0 else
61454: LD_ADDR_VAR 0 8
61458: PUSH
61459: LD_INT 0
61461: ST_TO_ADDR
61462: GO 61480
// min_y := y - r ;
61464: LD_ADDR_VAR 0 8
61468: PUSH
61469: LD_VAR 0 3
61473: PUSH
61474: LD_VAR 0 4
61478: MINUS
61479: ST_TO_ADDR
// max_x := x + r ;
61480: LD_ADDR_VAR 0 9
61484: PUSH
61485: LD_VAR 0 2
61489: PUSH
61490: LD_VAR 0 4
61494: PLUS
61495: ST_TO_ADDR
// max_y := y + r ;
61496: LD_ADDR_VAR 0 10
61500: PUSH
61501: LD_VAR 0 3
61505: PUSH
61506: LD_VAR 0 4
61510: PLUS
61511: ST_TO_ADDR
// for _x = min_x to max_x do
61512: LD_ADDR_VAR 0 11
61516: PUSH
61517: DOUBLE
61518: LD_VAR 0 7
61522: DEC
61523: ST_TO_ADDR
61524: LD_VAR 0 9
61528: PUSH
61529: FOR_TO
61530: IFFALSE 61649
// for _y = min_y to max_y do
61532: LD_ADDR_VAR 0 12
61536: PUSH
61537: DOUBLE
61538: LD_VAR 0 8
61542: DEC
61543: ST_TO_ADDR
61544: LD_VAR 0 10
61548: PUSH
61549: FOR_TO
61550: IFFALSE 61645
// begin if not ValidHex ( _x , _y ) then
61552: LD_VAR 0 11
61556: PPUSH
61557: LD_VAR 0 12
61561: PPUSH
61562: CALL_OW 488
61566: NOT
61567: IFFALSE 61571
// continue ;
61569: GO 61549
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61571: LD_VAR 0 11
61575: PPUSH
61576: LD_VAR 0 12
61580: PPUSH
61581: CALL_OW 351
61585: IFFALSE 61603
61587: PUSH
61588: LD_VAR 0 11
61592: PPUSH
61593: LD_VAR 0 12
61597: PPUSH
61598: CALL_OW 554
61602: AND
61603: IFFALSE 61643
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61605: LD_ADDR_VAR 0 13
61609: PUSH
61610: LD_VAR 0 13
61614: PPUSH
61615: LD_VAR 0 13
61619: PUSH
61620: LD_INT 1
61622: PLUS
61623: PPUSH
61624: LD_VAR 0 11
61628: PUSH
61629: LD_VAR 0 12
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PPUSH
61638: CALL_OW 2
61642: ST_TO_ADDR
// end ;
61643: GO 61549
61645: POP
61646: POP
61647: GO 61529
61649: POP
61650: POP
// if not list then
61651: LD_VAR 0 13
61655: NOT
61656: IFFALSE 61660
// exit ;
61658: GO 61731
// for i in list do
61660: LD_ADDR_VAR 0 6
61664: PUSH
61665: LD_VAR 0 13
61669: PUSH
61670: FOR_IN
61671: IFFALSE 61729
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
61673: LD_VAR 0 1
61677: PPUSH
61678: LD_STRING M
61680: PUSH
61681: LD_VAR 0 6
61685: PUSH
61686: LD_INT 1
61688: ARRAY
61689: PUSH
61690: LD_VAR 0 6
61694: PUSH
61695: LD_INT 2
61697: ARRAY
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: PPUSH
61723: CALL_OW 447
61727: GO 61670
61729: POP
61730: POP
// end ;
61731: LD_VAR 0 5
61735: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
61736: LD_INT 0
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
61746: PPUSH
61747: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
61748: LD_VAR 0 1
61752: PPUSH
61753: CALL_OW 302
61757: NOT
61758: IFTRUE 61777
61760: PUSH
61761: LD_VAR 0 2
61765: PPUSH
61766: LD_VAR 0 3
61770: PPUSH
61771: CALL_OW 488
61775: NOT
61776: OR
61777: IFTRUE 61786
61779: PUSH
61780: LD_VAR 0 4
61784: NOT
61785: OR
61786: IFFALSE 61790
// exit ;
61788: GO 62329
// if Count ( GetTaskList ( flame ) ) > 10 then
61790: LD_VAR 0 1
61794: PPUSH
61795: CALL_OW 437
61799: PPUSH
61800: CALL 18555 0 1
61804: PUSH
61805: LD_INT 10
61807: GREATER
61808: IFFALSE 61812
// exit ;
61810: GO 62329
// list := [ ] ;
61812: LD_ADDR_VAR 0 13
61816: PUSH
61817: EMPTY
61818: ST_TO_ADDR
// if x - r < 0 then
61819: LD_VAR 0 2
61823: PUSH
61824: LD_VAR 0 4
61828: MINUS
61829: PUSH
61830: LD_INT 0
61832: LESS
61833: IFFALSE 61845
// min_x := 0 else
61835: LD_ADDR_VAR 0 7
61839: PUSH
61840: LD_INT 0
61842: ST_TO_ADDR
61843: GO 61861
// min_x := x - r ;
61845: LD_ADDR_VAR 0 7
61849: PUSH
61850: LD_VAR 0 2
61854: PUSH
61855: LD_VAR 0 4
61859: MINUS
61860: ST_TO_ADDR
// if y - r < 0 then
61861: LD_VAR 0 3
61865: PUSH
61866: LD_VAR 0 4
61870: MINUS
61871: PUSH
61872: LD_INT 0
61874: LESS
61875: IFFALSE 61887
// min_y := 0 else
61877: LD_ADDR_VAR 0 8
61881: PUSH
61882: LD_INT 0
61884: ST_TO_ADDR
61885: GO 61903
// min_y := y - r ;
61887: LD_ADDR_VAR 0 8
61891: PUSH
61892: LD_VAR 0 3
61896: PUSH
61897: LD_VAR 0 4
61901: MINUS
61902: ST_TO_ADDR
// max_x := x + r ;
61903: LD_ADDR_VAR 0 9
61907: PUSH
61908: LD_VAR 0 2
61912: PUSH
61913: LD_VAR 0 4
61917: PLUS
61918: ST_TO_ADDR
// max_y := y + r ;
61919: LD_ADDR_VAR 0 10
61923: PUSH
61924: LD_VAR 0 3
61928: PUSH
61929: LD_VAR 0 4
61933: PLUS
61934: ST_TO_ADDR
// for _x = min_x to max_x do
61935: LD_ADDR_VAR 0 11
61939: PUSH
61940: DOUBLE
61941: LD_VAR 0 7
61945: DEC
61946: ST_TO_ADDR
61947: LD_VAR 0 9
61951: PUSH
61952: FOR_TO
61953: IFFALSE 62072
// for _y = min_y to max_y do
61955: LD_ADDR_VAR 0 12
61959: PUSH
61960: DOUBLE
61961: LD_VAR 0 8
61965: DEC
61966: ST_TO_ADDR
61967: LD_VAR 0 10
61971: PUSH
61972: FOR_TO
61973: IFFALSE 62068
// begin if not ValidHex ( _x , _y ) then
61975: LD_VAR 0 11
61979: PPUSH
61980: LD_VAR 0 12
61984: PPUSH
61985: CALL_OW 488
61989: NOT
61990: IFFALSE 61994
// continue ;
61992: GO 61972
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61994: LD_VAR 0 11
61998: PPUSH
61999: LD_VAR 0 12
62003: PPUSH
62004: CALL_OW 351
62008: IFFALSE 62026
62010: PUSH
62011: LD_VAR 0 11
62015: PPUSH
62016: LD_VAR 0 12
62020: PPUSH
62021: CALL_OW 554
62025: AND
62026: IFFALSE 62066
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
62028: LD_ADDR_VAR 0 13
62032: PUSH
62033: LD_VAR 0 13
62037: PPUSH
62038: LD_VAR 0 13
62042: PUSH
62043: LD_INT 1
62045: PLUS
62046: PPUSH
62047: LD_VAR 0 11
62051: PUSH
62052: LD_VAR 0 12
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PPUSH
62061: CALL_OW 2
62065: ST_TO_ADDR
// end ;
62066: GO 61972
62068: POP
62069: POP
62070: GO 61952
62072: POP
62073: POP
// if not list then
62074: LD_VAR 0 13
62078: NOT
62079: IFFALSE 62083
// exit ;
62081: GO 62329
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
62083: LD_ADDR_VAR 0 13
62087: PUSH
62088: LD_VAR 0 1
62092: PPUSH
62093: LD_VAR 0 13
62097: PPUSH
62098: LD_INT 1
62100: PPUSH
62101: LD_INT 1
62103: PPUSH
62104: CALL 21961 0 4
62108: ST_TO_ADDR
// ComStop ( flame ) ;
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 141
// for i in list do
62118: LD_ADDR_VAR 0 6
62122: PUSH
62123: LD_VAR 0 13
62127: PUSH
62128: FOR_IN
62129: IFFALSE 62160
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
62131: LD_VAR 0 1
62135: PPUSH
62136: LD_VAR 0 6
62140: PUSH
62141: LD_INT 1
62143: ARRAY
62144: PPUSH
62145: LD_VAR 0 6
62149: PUSH
62150: LD_INT 2
62152: ARRAY
62153: PPUSH
62154: CALL_OW 176
62158: GO 62128
62160: POP
62161: POP
// repeat wait ( 0 0$1 ) ;
62162: LD_INT 35
62164: PPUSH
62165: CALL_OW 67
// task := GetTaskList ( flame ) ;
62169: LD_ADDR_VAR 0 14
62173: PUSH
62174: LD_VAR 0 1
62178: PPUSH
62179: CALL_OW 437
62183: ST_TO_ADDR
// if not task then
62184: LD_VAR 0 14
62188: NOT
62189: IFFALSE 62193
// exit ;
62191: GO 62329
// if task [ 1 ] [ 1 ] <> | then
62193: LD_VAR 0 14
62197: PUSH
62198: LD_INT 1
62200: ARRAY
62201: PUSH
62202: LD_INT 1
62204: ARRAY
62205: PUSH
62206: LD_STRING |
62208: NONEQUAL
62209: IFFALSE 62213
// exit ;
62211: GO 62329
// _x := task [ 1 ] [ 2 ] ;
62213: LD_ADDR_VAR 0 11
62217: PUSH
62218: LD_VAR 0 14
62222: PUSH
62223: LD_INT 1
62225: ARRAY
62226: PUSH
62227: LD_INT 2
62229: ARRAY
62230: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
62231: LD_ADDR_VAR 0 12
62235: PUSH
62236: LD_VAR 0 14
62240: PUSH
62241: LD_INT 1
62243: ARRAY
62244: PUSH
62245: LD_INT 3
62247: ARRAY
62248: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
62249: LD_VAR 0 11
62253: PPUSH
62254: LD_VAR 0 12
62258: PPUSH
62259: CALL_OW 351
62263: NOT
62264: IFTRUE 62283
62266: PUSH
62267: LD_VAR 0 11
62271: PPUSH
62272: LD_VAR 0 12
62276: PPUSH
62277: CALL_OW 554
62281: NOT
62282: OR
62283: IFFALSE 62317
// begin task := Delete ( task , 1 ) ;
62285: LD_ADDR_VAR 0 14
62289: PUSH
62290: LD_VAR 0 14
62294: PPUSH
62295: LD_INT 1
62297: PPUSH
62298: CALL_OW 3
62302: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
62303: LD_VAR 0 1
62307: PPUSH
62308: LD_VAR 0 14
62312: PPUSH
62313: CALL_OW 446
// end ; until not HasTask ( flame ) ;
62317: LD_VAR 0 1
62321: PPUSH
62322: CALL_OW 314
62326: NOT
62327: IFFALSE 62162
// end ;
62329: LD_VAR 0 5
62333: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
62334: LD_EXP 51
62338: NOT
62339: IFFALSE 62389
62341: GO 62343
62343: DISABLE
// begin initHack := true ;
62344: LD_ADDR_EXP 51
62348: PUSH
62349: LD_INT 1
62351: ST_TO_ADDR
// hackTanks := [ ] ;
62352: LD_ADDR_EXP 52
62356: PUSH
62357: EMPTY
62358: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
62359: LD_ADDR_EXP 53
62363: PUSH
62364: EMPTY
62365: ST_TO_ADDR
// hackLimit := 3 ;
62366: LD_ADDR_EXP 54
62370: PUSH
62371: LD_INT 3
62373: ST_TO_ADDR
// hackDist := 12 ;
62374: LD_ADDR_EXP 55
62378: PUSH
62379: LD_INT 12
62381: ST_TO_ADDR
// hackCounter := [ ] ;
62382: LD_ADDR_EXP 56
62386: PUSH
62387: EMPTY
62388: ST_TO_ADDR
// end ;
62389: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
62390: LD_EXP 51
62394: IFFALSE 62412
62396: PUSH
62397: LD_INT 34
62399: PUSH
62400: LD_INT 99
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PPUSH
62407: CALL_OW 69
62411: AND
62412: IFFALSE 62665
62414: GO 62416
62416: DISABLE
62417: LD_INT 0
62419: PPUSH
62420: PPUSH
// begin enable ;
62421: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
62422: LD_ADDR_VAR 0 1
62426: PUSH
62427: LD_INT 34
62429: PUSH
62430: LD_INT 99
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PPUSH
62437: CALL_OW 69
62441: PUSH
62442: FOR_IN
62443: IFFALSE 62663
// begin if not i in hackTanks then
62445: LD_VAR 0 1
62449: PUSH
62450: LD_EXP 52
62454: IN
62455: NOT
62456: IFFALSE 62539
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
62458: LD_ADDR_EXP 52
62462: PUSH
62463: LD_EXP 52
62467: PPUSH
62468: LD_EXP 52
62472: PUSH
62473: LD_INT 1
62475: PLUS
62476: PPUSH
62477: LD_VAR 0 1
62481: PPUSH
62482: CALL_OW 1
62486: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
62487: LD_ADDR_EXP 53
62491: PUSH
62492: LD_EXP 53
62496: PPUSH
62497: LD_EXP 53
62501: PUSH
62502: LD_INT 1
62504: PLUS
62505: PPUSH
62506: EMPTY
62507: PPUSH
62508: CALL_OW 1
62512: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
62513: LD_ADDR_EXP 56
62517: PUSH
62518: LD_EXP 56
62522: PPUSH
62523: LD_EXP 56
62527: PUSH
62528: LD_INT 1
62530: PLUS
62531: PPUSH
62532: EMPTY
62533: PPUSH
62534: CALL_OW 1
62538: ST_TO_ADDR
// end ; if not IsOk ( i ) then
62539: LD_VAR 0 1
62543: PPUSH
62544: CALL_OW 302
62548: NOT
62549: IFFALSE 62562
// begin HackUnlinkAll ( i ) ;
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL 62668 0 1
// continue ;
62560: GO 62442
// end ; HackCheckCapturedStatus ( i ) ;
62562: LD_VAR 0 1
62566: PPUSH
62567: CALL 63113 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
62571: LD_ADDR_VAR 0 2
62575: PUSH
62576: LD_INT 81
62578: PUSH
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 255
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 33
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 91
62605: PUSH
62606: LD_VAR 0 1
62610: PUSH
62611: LD_EXP 55
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 50
62623: PUSH
62624: EMPTY
62625: LIST
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: PPUSH
62633: CALL_OW 69
62637: ST_TO_ADDR
// if not tmp then
62638: LD_VAR 0 2
62642: NOT
62643: IFFALSE 62647
// continue ;
62645: GO 62442
// HackLink ( i , tmp ) ;
62647: LD_VAR 0 1
62651: PPUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: CALL 62804 0 2
// end ;
62661: GO 62442
62663: POP
62664: POP
// end ;
62665: PPOPN 2
62667: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
62668: LD_INT 0
62670: PPUSH
62671: PPUSH
62672: PPUSH
// if not hack in hackTanks then
62673: LD_VAR 0 1
62677: PUSH
62678: LD_EXP 52
62682: IN
62683: NOT
62684: IFFALSE 62688
// exit ;
62686: GO 62799
// index := GetElementIndex ( hackTanks , hack ) ;
62688: LD_ADDR_VAR 0 4
62692: PUSH
62693: LD_EXP 52
62697: PPUSH
62698: LD_VAR 0 1
62702: PPUSH
62703: CALL 21256 0 2
62707: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
62708: LD_EXP 53
62712: PUSH
62713: LD_VAR 0 4
62717: ARRAY
62718: IFFALSE 62799
// begin for i in hackTanksCaptured [ index ] do
62720: LD_ADDR_VAR 0 3
62724: PUSH
62725: LD_EXP 53
62729: PUSH
62730: LD_VAR 0 4
62734: ARRAY
62735: PUSH
62736: FOR_IN
62737: IFFALSE 62763
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
62739: LD_VAR 0 3
62743: PUSH
62744: LD_INT 1
62746: ARRAY
62747: PPUSH
62748: LD_VAR 0 3
62752: PUSH
62753: LD_INT 2
62755: ARRAY
62756: PPUSH
62757: CALL_OW 235
62761: GO 62736
62763: POP
62764: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
62765: LD_ADDR_EXP 53
62769: PUSH
62770: LD_EXP 53
62774: PPUSH
62775: LD_VAR 0 4
62779: PPUSH
62780: EMPTY
62781: PPUSH
62782: CALL_OW 1
62786: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62787: LD_VAR 0 1
62791: PPUSH
62792: LD_INT 0
62794: PPUSH
62795: CALL_OW 505
// end ; end ;
62799: LD_VAR 0 2
62803: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62804: LD_INT 0
62806: PPUSH
62807: PPUSH
62808: PPUSH
// if not hack in hackTanks or not vehicles then
62809: LD_VAR 0 1
62813: PUSH
62814: LD_EXP 52
62818: IN
62819: NOT
62820: IFTRUE 62829
62822: PUSH
62823: LD_VAR 0 2
62827: NOT
62828: OR
62829: IFFALSE 62833
// exit ;
62831: GO 63108
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62833: LD_ADDR_VAR 0 2
62837: PUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: LD_VAR 0 2
62847: PPUSH
62848: LD_INT 1
62850: PPUSH
62851: LD_INT 1
62853: PPUSH
62854: CALL 21908 0 4
62858: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62859: LD_ADDR_VAR 0 5
62863: PUSH
62864: LD_EXP 52
62868: PPUSH
62869: LD_VAR 0 1
62873: PPUSH
62874: CALL 21256 0 2
62878: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62879: LD_EXP 53
62883: PUSH
62884: LD_VAR 0 5
62888: ARRAY
62889: PUSH
62890: LD_EXP 54
62894: LESS
62895: IFFALSE 63084
// begin for i := 1 to vehicles do
62897: LD_ADDR_VAR 0 4
62901: PUSH
62902: DOUBLE
62903: LD_INT 1
62905: DEC
62906: ST_TO_ADDR
62907: LD_VAR 0 2
62911: PUSH
62912: FOR_TO
62913: IFFALSE 63082
// begin if hackTanksCaptured [ index ] = hackLimit then
62915: LD_EXP 53
62919: PUSH
62920: LD_VAR 0 5
62924: ARRAY
62925: PUSH
62926: LD_EXP 54
62930: EQUAL
62931: IFFALSE 62935
// break ;
62933: GO 63082
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62935: LD_ADDR_EXP 56
62939: PUSH
62940: LD_EXP 56
62944: PPUSH
62945: LD_VAR 0 5
62949: PPUSH
62950: LD_EXP 56
62954: PUSH
62955: LD_VAR 0 5
62959: ARRAY
62960: PUSH
62961: LD_INT 1
62963: PLUS
62964: PPUSH
62965: CALL_OW 1
62969: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62970: LD_ADDR_EXP 53
62974: PUSH
62975: LD_EXP 53
62979: PPUSH
62980: LD_VAR 0 5
62984: PUSH
62985: LD_EXP 53
62989: PUSH
62990: LD_VAR 0 5
62994: ARRAY
62995: PUSH
62996: LD_INT 1
62998: PLUS
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PPUSH
63004: LD_VAR 0 2
63008: PUSH
63009: LD_VAR 0 4
63013: ARRAY
63014: PUSH
63015: LD_VAR 0 2
63019: PUSH
63020: LD_VAR 0 4
63024: ARRAY
63025: PPUSH
63026: CALL_OW 255
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PPUSH
63035: CALL 21473 0 3
63039: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63040: LD_VAR 0 2
63044: PUSH
63045: LD_VAR 0 4
63049: ARRAY
63050: PPUSH
63051: LD_VAR 0 1
63055: PPUSH
63056: CALL_OW 255
63060: PPUSH
63061: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63065: LD_VAR 0 2
63069: PUSH
63070: LD_VAR 0 4
63074: ARRAY
63075: PPUSH
63076: CALL_OW 141
// end ;
63080: GO 62912
63082: POP
63083: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63084: LD_VAR 0 1
63088: PPUSH
63089: LD_EXP 53
63093: PUSH
63094: LD_VAR 0 5
63098: ARRAY
63099: PUSH
63100: LD_INT 0
63102: PLUS
63103: PPUSH
63104: CALL_OW 505
// end ;
63108: LD_VAR 0 3
63112: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
63113: LD_INT 0
63115: PPUSH
63116: PPUSH
63117: PPUSH
63118: PPUSH
// if not hack in hackTanks then
63119: LD_VAR 0 1
63123: PUSH
63124: LD_EXP 52
63128: IN
63129: NOT
63130: IFFALSE 63134
// exit ;
63132: GO 63378
// index := GetElementIndex ( hackTanks , hack ) ;
63134: LD_ADDR_VAR 0 4
63138: PUSH
63139: LD_EXP 52
63143: PPUSH
63144: LD_VAR 0 1
63148: PPUSH
63149: CALL 21256 0 2
63153: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
63154: LD_ADDR_VAR 0 3
63158: PUSH
63159: DOUBLE
63160: LD_EXP 53
63164: PUSH
63165: LD_VAR 0 4
63169: ARRAY
63170: INC
63171: ST_TO_ADDR
63172: LD_INT 1
63174: PUSH
63175: FOR_DOWNTO
63176: IFFALSE 63352
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
63178: LD_ADDR_VAR 0 5
63182: PUSH
63183: LD_EXP 53
63187: PUSH
63188: LD_VAR 0 4
63192: ARRAY
63193: PUSH
63194: LD_VAR 0 3
63198: ARRAY
63199: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
63200: LD_VAR 0 5
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PPUSH
63209: CALL_OW 302
63213: NOT
63214: IFTRUE 63242
63216: PUSH
63217: LD_VAR 0 5
63221: PUSH
63222: LD_INT 1
63224: ARRAY
63225: PPUSH
63226: CALL_OW 255
63230: PUSH
63231: LD_VAR 0 1
63235: PPUSH
63236: CALL_OW 255
63240: NONEQUAL
63241: OR
63242: IFFALSE 63350
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
63244: LD_VAR 0 5
63248: PUSH
63249: LD_INT 1
63251: ARRAY
63252: PPUSH
63253: CALL_OW 305
63257: IFFALSE 63285
63259: PUSH
63260: LD_VAR 0 5
63264: PUSH
63265: LD_INT 1
63267: ARRAY
63268: PPUSH
63269: CALL_OW 255
63273: PUSH
63274: LD_VAR 0 1
63278: PPUSH
63279: CALL_OW 255
63283: EQUAL
63284: AND
63285: IFFALSE 63309
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
63287: LD_VAR 0 5
63291: PUSH
63292: LD_INT 1
63294: ARRAY
63295: PPUSH
63296: LD_VAR 0 5
63300: PUSH
63301: LD_INT 2
63303: ARRAY
63304: PPUSH
63305: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
63309: LD_ADDR_EXP 53
63313: PUSH
63314: LD_EXP 53
63318: PPUSH
63319: LD_VAR 0 4
63323: PPUSH
63324: LD_EXP 53
63328: PUSH
63329: LD_VAR 0 4
63333: ARRAY
63334: PPUSH
63335: LD_VAR 0 3
63339: PPUSH
63340: CALL_OW 3
63344: PPUSH
63345: CALL_OW 1
63349: ST_TO_ADDR
// end ; end ;
63350: GO 63175
63352: POP
63353: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
63354: LD_VAR 0 1
63358: PPUSH
63359: LD_EXP 53
63363: PUSH
63364: LD_VAR 0 4
63368: ARRAY
63369: PUSH
63370: LD_INT 0
63372: PLUS
63373: PPUSH
63374: CALL_OW 505
// end ;
63378: LD_VAR 0 2
63382: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
63383: LD_INT 0
63385: PPUSH
63386: PPUSH
63387: PPUSH
63388: PPUSH
// if not hack in hackTanks then
63389: LD_VAR 0 1
63393: PUSH
63394: LD_EXP 52
63398: IN
63399: NOT
63400: IFFALSE 63404
// exit ;
63402: GO 63489
// index := GetElementIndex ( hackTanks , hack ) ;
63404: LD_ADDR_VAR 0 5
63408: PUSH
63409: LD_EXP 52
63413: PPUSH
63414: LD_VAR 0 1
63418: PPUSH
63419: CALL 21256 0 2
63423: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
63424: LD_ADDR_VAR 0 4
63428: PUSH
63429: DOUBLE
63430: LD_INT 1
63432: DEC
63433: ST_TO_ADDR
63434: LD_EXP 53
63438: PUSH
63439: LD_VAR 0 5
63443: ARRAY
63444: PUSH
63445: FOR_TO
63446: IFFALSE 63487
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
63448: LD_EXP 53
63452: PUSH
63453: LD_VAR 0 5
63457: ARRAY
63458: PUSH
63459: LD_VAR 0 4
63463: ARRAY
63464: PUSH
63465: LD_INT 1
63467: ARRAY
63468: PUSH
63469: LD_VAR 0 2
63473: EQUAL
63474: IFFALSE 63485
// KillUnit ( vehicle ) ;
63476: LD_VAR 0 2
63480: PPUSH
63481: CALL_OW 66
63485: GO 63445
63487: POP
63488: POP
// end ;
63489: LD_VAR 0 3
63493: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
63494: LD_EXP 57
63498: NOT
63499: IFFALSE 63632
63501: GO 63503
63503: DISABLE
63504: LD_INT 0
63506: PPUSH
// begin initMiner := true ;
63507: LD_ADDR_EXP 57
63511: PUSH
63512: LD_INT 1
63514: ST_TO_ADDR
// minersList := [ ] ;
63515: LD_ADDR_EXP 58
63519: PUSH
63520: EMPTY
63521: ST_TO_ADDR
// minerMinesList := [ ] ;
63522: LD_ADDR_EXP 59
63526: PUSH
63527: EMPTY
63528: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
63529: LD_ADDR_EXP 60
63533: PUSH
63534: LD_INT 10
63536: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
63537: LD_ADDR_VAR 0 1
63541: PUSH
63542: LD_INT 34
63544: PUSH
63545: LD_INT 81
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PPUSH
63552: CALL_OW 69
63556: PUSH
63557: FOR_IN
63558: IFFALSE 63630
// begin if not i in minersList then
63560: LD_VAR 0 1
63564: PUSH
63565: LD_EXP 58
63569: IN
63570: NOT
63571: IFFALSE 63628
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
63573: LD_ADDR_EXP 58
63577: PUSH
63578: LD_EXP 58
63582: PPUSH
63583: LD_EXP 58
63587: PUSH
63588: LD_INT 1
63590: PLUS
63591: PPUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: CALL_OW 1
63601: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
63602: LD_ADDR_EXP 59
63606: PUSH
63607: LD_EXP 59
63611: PPUSH
63612: LD_EXP 59
63616: PUSH
63617: LD_INT 1
63619: PLUS
63620: PPUSH
63621: EMPTY
63622: PPUSH
63623: CALL_OW 1
63627: ST_TO_ADDR
// end end ;
63628: GO 63557
63630: POP
63631: POP
// end ;
63632: PPOPN 1
63634: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
63635: LD_EXP 57
63639: IFFALSE 63670
63641: PUSH
63642: LD_EXP 59
63646: PPUSH
63647: CALL 18555 0 1
63651: IFTRUE 63669
63653: PUSH
63654: LD_INT 34
63656: PUSH
63657: LD_INT 81
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PPUSH
63664: CALL_OW 69
63668: OR
63669: AND
63670: IFFALSE 64190
63672: GO 63674
63674: DISABLE
63675: LD_INT 0
63677: PPUSH
63678: PPUSH
63679: PPUSH
63680: PPUSH
// begin enable ;
63681: ENABLE
// for i := minerMinesList downto 1 do
63682: LD_ADDR_VAR 0 1
63686: PUSH
63687: DOUBLE
63688: LD_EXP 59
63692: INC
63693: ST_TO_ADDR
63694: LD_INT 1
63696: PUSH
63697: FOR_DOWNTO
63698: IFFALSE 64188
// begin side := GetSide ( minersList [ i ] ) ;
63700: LD_ADDR_VAR 0 3
63704: PUSH
63705: LD_EXP 58
63709: PUSH
63710: LD_VAR 0 1
63714: ARRAY
63715: PPUSH
63716: CALL_OW 255
63720: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
63721: LD_EXP 58
63725: PUSH
63726: LD_VAR 0 1
63730: ARRAY
63731: PPUSH
63732: CALL_OW 300
63736: IFFALSE 63757
63738: PUSH
63739: LD_VAR 0 3
63743: PUSH
63744: LD_OWVAR 2
63748: PUSH
63749: LD_INT 9
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: IN
63756: AND
63757: IFFALSE 63790
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
63759: LD_EXP 58
63763: PUSH
63764: LD_VAR 0 1
63768: ARRAY
63769: PPUSH
63770: LD_EXP 59
63774: PUSH
63775: LD_VAR 0 1
63779: ARRAY
63780: PPUSH
63781: CALL 18555 0 1
63785: PPUSH
63786: CALL_OW 505
// if not minerMinesList [ i ] then
63790: LD_EXP 59
63794: PUSH
63795: LD_VAR 0 1
63799: ARRAY
63800: NOT
63801: IFFALSE 63805
// continue ;
63803: GO 63697
// for j := minerMinesList [ i ] downto 1 do
63805: LD_ADDR_VAR 0 2
63809: PUSH
63810: DOUBLE
63811: LD_EXP 59
63815: PUSH
63816: LD_VAR 0 1
63820: ARRAY
63821: INC
63822: ST_TO_ADDR
63823: LD_INT 1
63825: PUSH
63826: FOR_DOWNTO
63827: IFFALSE 64184
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63829: LD_EXP 58
63833: PUSH
63834: LD_VAR 0 1
63838: ARRAY
63839: PPUSH
63840: CALL_OW 301
63844: IFTRUE 63864
63846: PUSH
63847: LD_EXP 58
63851: PUSH
63852: LD_VAR 0 1
63856: ARRAY
63857: PPUSH
63858: CALL_OW 305
63862: NOT
63863: OR
63864: IFFALSE 63955
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63866: LD_EXP 59
63870: PUSH
63871: LD_VAR 0 1
63875: ARRAY
63876: PUSH
63877: LD_VAR 0 2
63881: ARRAY
63882: PUSH
63883: LD_INT 1
63885: ARRAY
63886: PPUSH
63887: LD_EXP 59
63891: PUSH
63892: LD_VAR 0 1
63896: ARRAY
63897: PUSH
63898: LD_VAR 0 2
63902: ARRAY
63903: PUSH
63904: LD_INT 2
63906: ARRAY
63907: PPUSH
63908: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63912: LD_ADDR_EXP 59
63916: PUSH
63917: LD_EXP 59
63921: PPUSH
63922: LD_VAR 0 1
63926: PPUSH
63927: LD_EXP 59
63931: PUSH
63932: LD_VAR 0 1
63936: ARRAY
63937: PPUSH
63938: LD_VAR 0 2
63942: PPUSH
63943: CALL_OW 3
63947: PPUSH
63948: CALL_OW 1
63952: ST_TO_ADDR
// continue ;
63953: GO 63826
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63955: LD_ADDR_VAR 0 4
63959: PUSH
63960: LD_EXP 59
63964: PUSH
63965: LD_VAR 0 1
63969: ARRAY
63970: PUSH
63971: LD_VAR 0 2
63975: ARRAY
63976: PUSH
63977: LD_INT 1
63979: ARRAY
63980: PPUSH
63981: LD_EXP 59
63985: PUSH
63986: LD_VAR 0 1
63990: ARRAY
63991: PUSH
63992: LD_VAR 0 2
63996: ARRAY
63997: PUSH
63998: LD_INT 2
64000: ARRAY
64001: PPUSH
64002: CALL_OW 428
64006: ST_TO_ADDR
// if not tmp then
64007: LD_VAR 0 4
64011: NOT
64012: IFFALSE 64016
// continue ;
64014: GO 63826
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64016: LD_VAR 0 4
64020: PUSH
64021: LD_INT 81
64023: PUSH
64024: LD_VAR 0 3
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PPUSH
64033: CALL_OW 69
64037: IN
64038: IFFALSE 64088
64040: PUSH
64041: LD_EXP 59
64045: PUSH
64046: LD_VAR 0 1
64050: ARRAY
64051: PUSH
64052: LD_VAR 0 2
64056: ARRAY
64057: PUSH
64058: LD_INT 1
64060: ARRAY
64061: PPUSH
64062: LD_EXP 59
64066: PUSH
64067: LD_VAR 0 1
64071: ARRAY
64072: PUSH
64073: LD_VAR 0 2
64077: ARRAY
64078: PUSH
64079: LD_INT 2
64081: ARRAY
64082: PPUSH
64083: CALL_OW 458
64087: AND
64088: IFFALSE 64182
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64090: LD_EXP 59
64094: PUSH
64095: LD_VAR 0 1
64099: ARRAY
64100: PUSH
64101: LD_VAR 0 2
64105: ARRAY
64106: PUSH
64107: LD_INT 1
64109: ARRAY
64110: PPUSH
64111: LD_EXP 59
64115: PUSH
64116: LD_VAR 0 1
64120: ARRAY
64121: PUSH
64122: LD_VAR 0 2
64126: ARRAY
64127: PUSH
64128: LD_INT 2
64130: ARRAY
64131: PPUSH
64132: LD_VAR 0 3
64136: PPUSH
64137: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64141: LD_ADDR_EXP 59
64145: PUSH
64146: LD_EXP 59
64150: PPUSH
64151: LD_VAR 0 1
64155: PPUSH
64156: LD_EXP 59
64160: PUSH
64161: LD_VAR 0 1
64165: ARRAY
64166: PPUSH
64167: LD_VAR 0 2
64171: PPUSH
64172: CALL_OW 3
64176: PPUSH
64177: CALL_OW 1
64181: ST_TO_ADDR
// end ; end ;
64182: GO 63826
64184: POP
64185: POP
// end ;
64186: GO 63697
64188: POP
64189: POP
// end ;
64190: PPOPN 4
64192: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
64193: LD_INT 0
64195: PPUSH
64196: PPUSH
64197: PPUSH
64198: PPUSH
// result := false ;
64199: LD_ADDR_VAR 0 4
64203: PUSH
64204: LD_INT 0
64206: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64207: LD_VAR 0 1
64211: PPUSH
64212: CALL_OW 264
64216: PUSH
64217: LD_INT 81
64219: EQUAL
64220: NOT
64221: IFFALSE 64225
// exit ;
64223: GO 64595
// side := GetSide ( unit ) ;
64225: LD_ADDR_VAR 0 6
64229: PUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 255
64239: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
64240: LD_ADDR_VAR 0 5
64244: PUSH
64245: LD_EXP 58
64249: PPUSH
64250: LD_VAR 0 1
64254: PPUSH
64255: CALL 21256 0 2
64259: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64260: LD_EXP 59
64264: PUSH
64265: LD_VAR 0 5
64269: ARRAY
64270: PUSH
64271: LD_EXP 60
64275: GREATEREQUAL
64276: IFFALSE 64280
// exit ;
64278: GO 64595
// ComMoveXY ( unit , x , y ) ;
64280: LD_VAR 0 1
64284: PPUSH
64285: LD_VAR 0 2
64289: PPUSH
64290: LD_VAR 0 3
64294: PPUSH
64295: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64299: LD_INT 35
64301: PPUSH
64302: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_VAR 0 2
64315: PPUSH
64316: LD_VAR 0 3
64320: PPUSH
64321: CALL 53312 0 3
64325: NOT
64326: IFFALSE 64339
64328: PUSH
64329: LD_VAR 0 1
64333: PPUSH
64334: CALL_OW 314
64338: AND
64339: IFFALSE 64343
// exit ;
64341: GO 64595
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
64343: LD_VAR 0 2
64347: PPUSH
64348: LD_VAR 0 3
64352: PPUSH
64353: CALL_OW 428
64357: PUSH
64358: LD_VAR 0 1
64362: EQUAL
64363: IFFALSE 64377
64365: PUSH
64366: LD_VAR 0 1
64370: PPUSH
64371: CALL_OW 314
64375: NOT
64376: AND
64377: IFFALSE 64299
// if MineAtPos ( x , y ) then
64379: LD_VAR 0 2
64383: PPUSH
64384: LD_VAR 0 3
64388: PPUSH
64389: CALL_OW 458
64393: IFFALSE 64397
// exit ;
64395: GO 64595
// if your_side = side then
64397: LD_OWVAR 2
64401: PUSH
64402: LD_VAR 0 6
64406: EQUAL
64407: IFFALSE 64426
// PlaySoundXY ( x , y , PlantMine ) ;
64409: LD_VAR 0 2
64413: PPUSH
64414: LD_VAR 0 3
64418: PPUSH
64419: LD_STRING PlantMine
64421: PPUSH
64422: CALL_OW 366
// repeat wait ( 1 ) ;
64426: LD_INT 1
64428: PPUSH
64429: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
64433: LD_VAR 0 2
64437: PPUSH
64438: LD_VAR 0 3
64442: PPUSH
64443: LD_VAR 0 6
64447: PPUSH
64448: LD_INT 0
64450: PPUSH
64451: CALL_OW 454
64455: IFFALSE 64426
// if MineAtPos ( x , y ) then
64457: LD_VAR 0 2
64461: PPUSH
64462: LD_VAR 0 3
64466: PPUSH
64467: CALL_OW 458
64471: IFFALSE 64587
// begin for i in minerMinesList [ index ] do
64473: LD_ADDR_VAR 0 7
64477: PUSH
64478: LD_EXP 59
64482: PUSH
64483: LD_VAR 0 5
64487: ARRAY
64488: PUSH
64489: FOR_IN
64490: IFFALSE 64532
// if i [ 1 ] = x and i [ 2 ] = y then
64492: LD_VAR 0 7
64496: PUSH
64497: LD_INT 1
64499: ARRAY
64500: PUSH
64501: LD_VAR 0 2
64505: EQUAL
64506: IFFALSE 64524
64508: PUSH
64509: LD_VAR 0 7
64513: PUSH
64514: LD_INT 2
64516: ARRAY
64517: PUSH
64518: LD_VAR 0 3
64522: EQUAL
64523: AND
64524: IFFALSE 64530
// exit ;
64526: POP
64527: POP
64528: GO 64595
64530: GO 64489
64532: POP
64533: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
64534: LD_ADDR_EXP 59
64538: PUSH
64539: LD_EXP 59
64543: PPUSH
64544: LD_VAR 0 5
64548: PUSH
64549: LD_EXP 59
64553: PUSH
64554: LD_VAR 0 5
64558: ARRAY
64559: PUSH
64560: LD_INT 1
64562: PLUS
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PPUSH
64568: LD_VAR 0 2
64572: PUSH
64573: LD_VAR 0 3
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PPUSH
64582: CALL 21473 0 3
64586: ST_TO_ADDR
// end ; result := true ;
64587: LD_ADDR_VAR 0 4
64591: PUSH
64592: LD_INT 1
64594: ST_TO_ADDR
// end ;
64595: LD_VAR 0 4
64599: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
64600: LD_INT 0
64602: PPUSH
64603: PPUSH
64604: PPUSH
// if not unit in minersList then
64605: LD_VAR 0 1
64609: PUSH
64610: LD_EXP 58
64614: IN
64615: NOT
64616: IFFALSE 64620
// exit ;
64618: GO 64827
// index := GetElementIndex ( minersList , unit ) ;
64620: LD_ADDR_VAR 0 6
64624: PUSH
64625: LD_EXP 58
64629: PPUSH
64630: LD_VAR 0 1
64634: PPUSH
64635: CALL 21256 0 2
64639: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
64640: LD_ADDR_VAR 0 5
64644: PUSH
64645: DOUBLE
64646: LD_EXP 59
64650: PUSH
64651: LD_VAR 0 6
64655: ARRAY
64656: INC
64657: ST_TO_ADDR
64658: LD_INT 1
64660: PUSH
64661: FOR_DOWNTO
64662: IFFALSE 64825
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
64664: LD_EXP 59
64668: PUSH
64669: LD_VAR 0 6
64673: ARRAY
64674: PUSH
64675: LD_VAR 0 5
64679: ARRAY
64680: PUSH
64681: LD_INT 1
64683: ARRAY
64684: PPUSH
64685: LD_EXP 59
64689: PUSH
64690: LD_VAR 0 6
64694: ARRAY
64695: PUSH
64696: LD_VAR 0 5
64700: ARRAY
64701: PUSH
64702: LD_INT 2
64704: ARRAY
64705: PPUSH
64706: LD_VAR 0 2
64710: PPUSH
64711: LD_VAR 0 3
64715: PPUSH
64716: CALL_OW 298
64720: PUSH
64721: LD_INT 6
64723: LESS
64724: IFFALSE 64823
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
64726: LD_EXP 59
64730: PUSH
64731: LD_VAR 0 6
64735: ARRAY
64736: PUSH
64737: LD_VAR 0 5
64741: ARRAY
64742: PUSH
64743: LD_INT 1
64745: ARRAY
64746: PPUSH
64747: LD_EXP 59
64751: PUSH
64752: LD_VAR 0 6
64756: ARRAY
64757: PUSH
64758: LD_VAR 0 5
64762: ARRAY
64763: PUSH
64764: LD_INT 2
64766: ARRAY
64767: PPUSH
64768: LD_VAR 0 1
64772: PPUSH
64773: CALL_OW 255
64777: PPUSH
64778: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64782: LD_ADDR_EXP 59
64786: PUSH
64787: LD_EXP 59
64791: PPUSH
64792: LD_VAR 0 6
64796: PPUSH
64797: LD_EXP 59
64801: PUSH
64802: LD_VAR 0 6
64806: ARRAY
64807: PPUSH
64808: LD_VAR 0 5
64812: PPUSH
64813: CALL_OW 3
64817: PPUSH
64818: CALL_OW 1
64822: ST_TO_ADDR
// end ; end ;
64823: GO 64661
64825: POP
64826: POP
// end ;
64827: LD_VAR 0 4
64831: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64832: LD_INT 0
64834: PPUSH
64835: PPUSH
64836: PPUSH
64837: PPUSH
64838: PPUSH
64839: PPUSH
64840: PPUSH
64841: PPUSH
64842: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64843: LD_VAR 0 1
64847: PPUSH
64848: CALL_OW 264
64852: PUSH
64853: LD_INT 81
64855: EQUAL
64856: NOT
64857: IFTRUE 64872
64859: PUSH
64860: LD_VAR 0 1
64864: PUSH
64865: LD_EXP 58
64869: IN
64870: NOT
64871: OR
64872: IFFALSE 64876
// exit ;
64874: GO 65202
// index := GetElementIndex ( minersList , unit ) ;
64876: LD_ADDR_VAR 0 6
64880: PUSH
64881: LD_EXP 58
64885: PPUSH
64886: LD_VAR 0 1
64890: PPUSH
64891: CALL 21256 0 2
64895: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64896: LD_ADDR_VAR 0 8
64900: PUSH
64901: LD_EXP 60
64905: PUSH
64906: LD_EXP 59
64910: PUSH
64911: LD_VAR 0 6
64915: ARRAY
64916: MINUS
64917: ST_TO_ADDR
// if not minesFreeAmount then
64918: LD_VAR 0 8
64922: NOT
64923: IFFALSE 64927
// exit ;
64925: GO 65202
// tmp := [ ] ;
64927: LD_ADDR_VAR 0 7
64931: PUSH
64932: EMPTY
64933: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64934: LD_ADDR_VAR 0 5
64938: PUSH
64939: DOUBLE
64940: LD_INT 1
64942: DEC
64943: ST_TO_ADDR
64944: LD_VAR 0 8
64948: PUSH
64949: FOR_TO
64950: IFFALSE 65149
// begin _d := rand ( 0 , 5 ) ;
64952: LD_ADDR_VAR 0 11
64956: PUSH
64957: LD_INT 0
64959: PPUSH
64960: LD_INT 5
64962: PPUSH
64963: CALL_OW 12
64967: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64968: LD_ADDR_VAR 0 12
64972: PUSH
64973: LD_INT 2
64975: PPUSH
64976: LD_INT 6
64978: PPUSH
64979: CALL_OW 12
64983: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64984: LD_ADDR_VAR 0 9
64988: PUSH
64989: LD_VAR 0 2
64993: PPUSH
64994: LD_VAR 0 11
64998: PPUSH
64999: LD_VAR 0 12
65003: PPUSH
65004: CALL_OW 272
65008: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65009: LD_ADDR_VAR 0 10
65013: PUSH
65014: LD_VAR 0 3
65018: PPUSH
65019: LD_VAR 0 11
65023: PPUSH
65024: LD_VAR 0 12
65028: PPUSH
65029: CALL_OW 273
65033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65034: LD_VAR 0 9
65038: PPUSH
65039: LD_VAR 0 10
65043: PPUSH
65044: CALL_OW 488
65048: IFFALSE 65072
65050: PUSH
65051: LD_VAR 0 9
65055: PUSH
65056: LD_VAR 0 10
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_VAR 0 7
65069: IN
65070: NOT
65071: AND
65072: IFFALSE 65091
65074: PUSH
65075: LD_VAR 0 9
65079: PPUSH
65080: LD_VAR 0 10
65084: PPUSH
65085: CALL_OW 458
65089: NOT
65090: AND
65091: IFFALSE 65133
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65093: LD_ADDR_VAR 0 7
65097: PUSH
65098: LD_VAR 0 7
65102: PPUSH
65103: LD_VAR 0 7
65107: PUSH
65108: LD_INT 1
65110: PLUS
65111: PPUSH
65112: LD_VAR 0 9
65116: PUSH
65117: LD_VAR 0 10
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PPUSH
65126: CALL_OW 1
65130: ST_TO_ADDR
65131: GO 65147
// i := i - 1 ;
65133: LD_ADDR_VAR 0 5
65137: PUSH
65138: LD_VAR 0 5
65142: PUSH
65143: LD_INT 1
65145: MINUS
65146: ST_TO_ADDR
// end ;
65147: GO 64949
65149: POP
65150: POP
// for i in tmp do
65151: LD_ADDR_VAR 0 5
65155: PUSH
65156: LD_VAR 0 7
65160: PUSH
65161: FOR_IN
65162: IFFALSE 65200
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65164: LD_VAR 0 1
65168: PPUSH
65169: LD_VAR 0 5
65173: PUSH
65174: LD_INT 1
65176: ARRAY
65177: PPUSH
65178: LD_VAR 0 5
65182: PUSH
65183: LD_INT 2
65185: ARRAY
65186: PPUSH
65187: CALL 64193 0 3
65191: NOT
65192: IFFALSE 65198
// exit ;
65194: POP
65195: POP
65196: GO 65202
65198: GO 65161
65200: POP
65201: POP
// end ;
65202: LD_VAR 0 4
65206: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
65207: LD_INT 0
65209: PPUSH
65210: PPUSH
65211: PPUSH
65212: PPUSH
65213: PPUSH
65214: PPUSH
65215: PPUSH
65216: PPUSH
65217: PPUSH
// if GetClass ( unit ) <> class_sniper then
65218: LD_VAR 0 1
65222: PPUSH
65223: CALL_OW 257
65227: PUSH
65228: LD_INT 5
65230: NONEQUAL
65231: IFFALSE 65235
// exit ;
65233: GO 65705
// dist := 8 ;
65235: LD_ADDR_VAR 0 5
65239: PUSH
65240: LD_INT 8
65242: ST_TO_ADDR
// viewRange := 12 ;
65243: LD_ADDR_VAR 0 8
65247: PUSH
65248: LD_INT 12
65250: ST_TO_ADDR
// side := GetSide ( unit ) ;
65251: LD_ADDR_VAR 0 6
65255: PUSH
65256: LD_VAR 0 1
65260: PPUSH
65261: CALL_OW 255
65265: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
65266: LD_INT 61
65268: PPUSH
65269: LD_VAR 0 6
65273: PPUSH
65274: CALL_OW 321
65278: PUSH
65279: LD_INT 2
65281: EQUAL
65282: IFFALSE 65292
// viewRange := 16 ;
65284: LD_ADDR_VAR 0 8
65288: PUSH
65289: LD_INT 16
65291: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
65292: LD_VAR 0 1
65296: PPUSH
65297: LD_VAR 0 2
65301: PPUSH
65302: LD_VAR 0 3
65306: PPUSH
65307: CALL_OW 297
65311: PUSH
65312: LD_VAR 0 5
65316: GREATER
65317: IFFALSE 65396
// begin ComMoveXY ( unit , x , y ) ;
65319: LD_VAR 0 1
65323: PPUSH
65324: LD_VAR 0 2
65328: PPUSH
65329: LD_VAR 0 3
65333: PPUSH
65334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65338: LD_INT 35
65340: PPUSH
65341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
65345: LD_VAR 0 1
65349: PPUSH
65350: LD_VAR 0 2
65354: PPUSH
65355: LD_VAR 0 3
65359: PPUSH
65360: CALL 53312 0 3
65364: NOT
65365: IFFALSE 65369
// exit ;
65367: GO 65705
// until GetDistUnitXY ( unit , x , y ) < dist ;
65369: LD_VAR 0 1
65373: PPUSH
65374: LD_VAR 0 2
65378: PPUSH
65379: LD_VAR 0 3
65383: PPUSH
65384: CALL_OW 297
65388: PUSH
65389: LD_VAR 0 5
65393: LESS
65394: IFFALSE 65338
// end ; ComTurnXY ( unit , x , y ) ;
65396: LD_VAR 0 1
65400: PPUSH
65401: LD_VAR 0 2
65405: PPUSH
65406: LD_VAR 0 3
65410: PPUSH
65411: CALL_OW 118
// repeat if Multiplayer then
65415: LD_OWVAR 4
65419: IFFALSE 65430
// wait ( 35 ) else
65421: LD_INT 35
65423: PPUSH
65424: CALL_OW 67
65428: GO 65437
// wait ( 5 ) ;
65430: LD_INT 5
65432: PPUSH
65433: CALL_OW 67
// _d := GetDir ( unit ) ;
65437: LD_ADDR_VAR 0 11
65441: PUSH
65442: LD_VAR 0 1
65446: PPUSH
65447: CALL_OW 254
65451: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
65452: LD_ADDR_VAR 0 7
65456: PUSH
65457: LD_VAR 0 1
65461: PPUSH
65462: CALL_OW 250
65466: PPUSH
65467: LD_VAR 0 1
65471: PPUSH
65472: CALL_OW 251
65476: PPUSH
65477: LD_VAR 0 2
65481: PPUSH
65482: LD_VAR 0 3
65486: PPUSH
65487: CALL 55948 0 4
65491: ST_TO_ADDR
// until dir = _d ;
65492: LD_VAR 0 7
65496: PUSH
65497: LD_VAR 0 11
65501: EQUAL
65502: IFFALSE 65415
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
65504: LD_ADDR_VAR 0 9
65508: PUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: CALL_OW 250
65518: PPUSH
65519: LD_VAR 0 7
65523: PPUSH
65524: LD_VAR 0 5
65528: PPUSH
65529: CALL_OW 272
65533: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
65534: LD_ADDR_VAR 0 10
65538: PUSH
65539: LD_VAR 0 1
65543: PPUSH
65544: CALL_OW 251
65548: PPUSH
65549: LD_VAR 0 7
65553: PPUSH
65554: LD_VAR 0 5
65558: PPUSH
65559: CALL_OW 273
65563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65564: LD_VAR 0 9
65568: PPUSH
65569: LD_VAR 0 10
65573: PPUSH
65574: CALL_OW 488
65578: NOT
65579: IFFALSE 65583
// exit ;
65581: GO 65705
// ComAnimCustom ( unit , 1 ) ;
65583: LD_VAR 0 1
65587: PPUSH
65588: LD_INT 1
65590: PPUSH
65591: CALL_OW 592
// p := 0 ;
65595: LD_ADDR_VAR 0 12
65599: PUSH
65600: LD_INT 0
65602: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
65603: LD_VAR 0 9
65607: PPUSH
65608: LD_VAR 0 10
65612: PPUSH
65613: LD_VAR 0 6
65617: PPUSH
65618: LD_VAR 0 8
65622: PPUSH
65623: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
65627: LD_INT 35
65629: PPUSH
65630: CALL_OW 67
// p := Inc ( p ) ;
65634: LD_ADDR_VAR 0 12
65638: PUSH
65639: LD_VAR 0 12
65643: PPUSH
65644: CALL 55904 0 1
65648: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
65649: LD_VAR 0 12
65653: PUSH
65654: LD_INT 3
65656: EQUAL
65657: IFTRUE 65671
65659: PUSH
65660: LD_VAR 0 1
65664: PPUSH
65665: CALL_OW 302
65669: NOT
65670: OR
65671: IFTRUE 65684
65673: PUSH
65674: LD_VAR 0 1
65678: PPUSH
65679: CALL_OW 301
65683: OR
65684: IFFALSE 65627
// RemoveSeeing ( _x , _y , side ) ;
65686: LD_VAR 0 9
65690: PPUSH
65691: LD_VAR 0 10
65695: PPUSH
65696: LD_VAR 0 6
65700: PPUSH
65701: CALL_OW 331
// end ;
65705: LD_VAR 0 4
65709: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
65710: LD_INT 0
65712: PPUSH
65713: PPUSH
65714: PPUSH
65715: PPUSH
65716: PPUSH
65717: PPUSH
65718: PPUSH
65719: PPUSH
65720: PPUSH
65721: PPUSH
65722: PPUSH
// if not unit then
65723: LD_VAR 0 1
65727: NOT
65728: IFFALSE 65732
// exit ;
65730: GO 66003
// side := GetSide ( unit ) ;
65732: LD_ADDR_VAR 0 3
65736: PUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 255
65746: ST_TO_ADDR
// x := GetX ( unit ) ;
65747: LD_ADDR_VAR 0 5
65751: PUSH
65752: LD_VAR 0 1
65756: PPUSH
65757: CALL_OW 250
65761: ST_TO_ADDR
// y := GetY ( unit ) ;
65762: LD_ADDR_VAR 0 6
65766: PUSH
65767: LD_VAR 0 1
65771: PPUSH
65772: CALL_OW 251
65776: ST_TO_ADDR
// r := 8 ;
65777: LD_ADDR_VAR 0 4
65781: PUSH
65782: LD_INT 8
65784: ST_TO_ADDR
// if x - r < 0 then
65785: LD_VAR 0 5
65789: PUSH
65790: LD_VAR 0 4
65794: MINUS
65795: PUSH
65796: LD_INT 0
65798: LESS
65799: IFFALSE 65811
// min_x := 0 else
65801: LD_ADDR_VAR 0 7
65805: PUSH
65806: LD_INT 0
65808: ST_TO_ADDR
65809: GO 65827
// min_x := x - r ;
65811: LD_ADDR_VAR 0 7
65815: PUSH
65816: LD_VAR 0 5
65820: PUSH
65821: LD_VAR 0 4
65825: MINUS
65826: ST_TO_ADDR
// if y - r < 0 then
65827: LD_VAR 0 6
65831: PUSH
65832: LD_VAR 0 4
65836: MINUS
65837: PUSH
65838: LD_INT 0
65840: LESS
65841: IFFALSE 65853
// min_y := 0 else
65843: LD_ADDR_VAR 0 8
65847: PUSH
65848: LD_INT 0
65850: ST_TO_ADDR
65851: GO 65869
// min_y := y - r ;
65853: LD_ADDR_VAR 0 8
65857: PUSH
65858: LD_VAR 0 6
65862: PUSH
65863: LD_VAR 0 4
65867: MINUS
65868: ST_TO_ADDR
// max_x := x + r ;
65869: LD_ADDR_VAR 0 9
65873: PUSH
65874: LD_VAR 0 5
65878: PUSH
65879: LD_VAR 0 4
65883: PLUS
65884: ST_TO_ADDR
// max_y := y + r ;
65885: LD_ADDR_VAR 0 10
65889: PUSH
65890: LD_VAR 0 6
65894: PUSH
65895: LD_VAR 0 4
65899: PLUS
65900: ST_TO_ADDR
// for _x = min_x to max_x do
65901: LD_ADDR_VAR 0 11
65905: PUSH
65906: DOUBLE
65907: LD_VAR 0 7
65911: DEC
65912: ST_TO_ADDR
65913: LD_VAR 0 9
65917: PUSH
65918: FOR_TO
65919: IFFALSE 66001
// for _y = min_y to max_y do
65921: LD_ADDR_VAR 0 12
65925: PUSH
65926: DOUBLE
65927: LD_VAR 0 8
65931: DEC
65932: ST_TO_ADDR
65933: LD_VAR 0 10
65937: PUSH
65938: FOR_TO
65939: IFFALSE 65997
// begin if not ValidHex ( _x , _y ) then
65941: LD_VAR 0 11
65945: PPUSH
65946: LD_VAR 0 12
65950: PPUSH
65951: CALL_OW 488
65955: NOT
65956: IFFALSE 65960
// continue ;
65958: GO 65938
// if MineAtPos ( _x , _y ) then
65960: LD_VAR 0 11
65964: PPUSH
65965: LD_VAR 0 12
65969: PPUSH
65970: CALL_OW 458
65974: IFFALSE 65995
// ViewMineAtPos ( _x , _y , side ) ;
65976: LD_VAR 0 11
65980: PPUSH
65981: LD_VAR 0 12
65985: PPUSH
65986: LD_VAR 0 3
65990: PPUSH
65991: CALL_OW 457
// end ;
65995: GO 65938
65997: POP
65998: POP
65999: GO 65918
66001: POP
66002: POP
// end ;
66003: LD_VAR 0 2
66007: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
66008: LD_INT 0
66010: PPUSH
66011: PPUSH
66012: PPUSH
66013: PPUSH
66014: PPUSH
66015: PPUSH
66016: PPUSH
// if not units then
66017: LD_VAR 0 1
66021: NOT
66022: IFFALSE 66026
// exit ;
66024: GO 66490
// scaners := [ ] ;
66026: LD_ADDR_VAR 0 6
66030: PUSH
66031: EMPTY
66032: ST_TO_ADDR
// for i in units do
66033: LD_ADDR_VAR 0 3
66037: PUSH
66038: LD_VAR 0 1
66042: PUSH
66043: FOR_IN
66044: IFFALSE 66201
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
66046: LD_VAR 0 3
66050: PPUSH
66051: CALL_OW 264
66055: PUSH
66056: LD_INT 11
66058: NONEQUAL
66059: IFTRUE 66073
66061: PUSH
66062: LD_VAR 0 3
66066: PPUSH
66067: CALL_OW 302
66071: NOT
66072: OR
66073: IFTRUE 66090
66075: PUSH
66076: LD_VAR 0 3
66080: PPUSH
66081: CALL_OW 110
66085: PUSH
66086: LD_INT 502
66088: EQUAL
66089: OR
66090: IFFALSE 66094
// continue ;
66092: GO 66043
// ComStop ( i ) ;
66094: LD_VAR 0 3
66098: PPUSH
66099: CALL_OW 141
// x := GetX ( i ) ;
66103: LD_ADDR_VAR 0 4
66107: PUSH
66108: LD_VAR 0 3
66112: PPUSH
66113: CALL_OW 250
66117: ST_TO_ADDR
// y := GetY ( i ) ;
66118: LD_ADDR_VAR 0 5
66122: PUSH
66123: LD_VAR 0 3
66127: PPUSH
66128: CALL_OW 251
66132: ST_TO_ADDR
// if GetSide ( i ) = your_side then
66133: LD_VAR 0 3
66137: PPUSH
66138: CALL_OW 255
66142: PUSH
66143: LD_OWVAR 2
66147: EQUAL
66148: IFFALSE 66167
// PlaySoundXY ( x , y , mineDetector ) ;
66150: LD_VAR 0 4
66154: PPUSH
66155: LD_VAR 0 5
66159: PPUSH
66160: LD_STRING mineDetector
66162: PPUSH
66163: CALL_OW 366
// scaners := Join ( scaners , i ) ;
66167: LD_ADDR_VAR 0 6
66171: PUSH
66172: LD_VAR 0 6
66176: PPUSH
66177: LD_VAR 0 3
66181: PPUSH
66182: CALL 54531 0 2
66186: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
66187: LD_VAR 0 3
66191: PPUSH
66192: LD_INT 502
66194: PPUSH
66195: CALL_OW 109
// end ;
66199: GO 66043
66201: POP
66202: POP
// if not scaners then
66203: LD_VAR 0 6
66207: NOT
66208: IFFALSE 66212
// exit ;
66210: GO 66490
// wait ( 3 ) ;
66212: LD_INT 3
66214: PPUSH
66215: CALL_OW 67
// timer := 6 ;
66219: LD_ADDR_VAR 0 7
66223: PUSH
66224: LD_INT 6
66226: ST_TO_ADDR
// repeat for i in scaners do
66227: LD_ADDR_VAR 0 3
66231: PUSH
66232: LD_VAR 0 6
66236: PUSH
66237: FOR_IN
66238: IFFALSE 66388
// begin side := GetSide ( i ) ;
66240: LD_ADDR_VAR 0 8
66244: PUSH
66245: LD_VAR 0 3
66249: PPUSH
66250: CALL_OW 255
66254: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
66255: LD_VAR 0 3
66259: PPUSH
66260: CALL_OW 302
66264: NOT
66265: IFTRUE 66278
66267: PUSH
66268: LD_VAR 0 3
66272: PPUSH
66273: CALL_OW 314
66277: OR
66278: IFTRUE 66309
66280: PUSH
66281: LD_VAR 0 3
66285: PPUSH
66286: CALL_OW 263
66290: PUSH
66291: LD_INT 1
66293: EQUAL
66294: IFFALSE 66308
66296: PUSH
66297: LD_VAR 0 3
66301: PPUSH
66302: CALL_OW 311
66306: NOT
66307: AND
66308: OR
66309: IFFALSE 66353
// begin SetUnitDisplayNumber ( i , 0 ) ;
66311: LD_VAR 0 3
66315: PPUSH
66316: LD_INT 0
66318: PPUSH
66319: CALL_OW 505
// SetTag ( i , 0 ) ;
66323: LD_VAR 0 3
66327: PPUSH
66328: LD_INT 0
66330: PPUSH
66331: CALL_OW 109
// scaners := scaners diff i ;
66335: LD_ADDR_VAR 0 6
66339: PUSH
66340: LD_VAR 0 6
66344: PUSH
66345: LD_VAR 0 3
66349: DIFF
66350: ST_TO_ADDR
// continue ;
66351: GO 66237
// end ; if side in [ your_side , 9 ] then
66353: LD_VAR 0 8
66357: PUSH
66358: LD_OWVAR 2
66362: PUSH
66363: LD_INT 9
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: IN
66370: IFFALSE 66386
// SetUnitDisplayNumber ( i , timer ) ;
66372: LD_VAR 0 3
66376: PPUSH
66377: LD_VAR 0 7
66381: PPUSH
66382: CALL_OW 505
// end ;
66386: GO 66237
66388: POP
66389: POP
// if not scaners then
66390: LD_VAR 0 6
66394: NOT
66395: IFFALSE 66399
// exit ;
66397: GO 66490
// timer := Dec ( timer ) ;
66399: LD_ADDR_VAR 0 7
66403: PUSH
66404: LD_VAR 0 7
66408: PPUSH
66409: CALL 55926 0 1
66413: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66414: LD_INT 35
66416: PPUSH
66417: CALL_OW 67
// until timer = 0 ;
66421: LD_VAR 0 7
66425: PUSH
66426: LD_INT 0
66428: EQUAL
66429: IFFALSE 66227
// if not scaners then
66431: LD_VAR 0 6
66435: NOT
66436: IFFALSE 66440
// exit ;
66438: GO 66490
// for i in scaners do
66440: LD_ADDR_VAR 0 3
66444: PUSH
66445: LD_VAR 0 6
66449: PUSH
66450: FOR_IN
66451: IFFALSE 66488
// begin SetUnitDisplayNumber ( i , 0 ) ;
66453: LD_VAR 0 3
66457: PPUSH
66458: LD_INT 0
66460: PPUSH
66461: CALL_OW 505
// SetTag ( i , 0 ) ;
66465: LD_VAR 0 3
66469: PPUSH
66470: LD_INT 0
66472: PPUSH
66473: CALL_OW 109
// RevealDetectorMine ( i ) ;
66477: LD_VAR 0 3
66481: PPUSH
66482: CALL 65710 0 1
// end ;
66486: GO 66450
66488: POP
66489: POP
// end ;
66490: LD_VAR 0 2
66494: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
66495: LD_INT 0
66497: PPUSH
// if p1 = mine_detector_mode then
66498: LD_VAR 0 2
66502: PUSH
66503: LD_INT 103
66505: EQUAL
66506: IFFALSE 66517
// DetectMine ( units ) ;
66508: LD_VAR 0 1
66512: PPUSH
66513: CALL 66008 0 1
// end ; end_of_file
66517: LD_VAR 0 7
66521: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
66522: PPOPN 6
66524: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66525: LD_INT 0
66527: PPUSH
// begin if not units then
66528: LD_VAR 0 1
66532: NOT
66533: IFFALSE 66537
// exit ;
66535: GO 66571
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
66537: LD_VAR 0 1
66541: PPUSH
66542: LD_VAR 0 2
66546: PPUSH
66547: LD_VAR 0 3
66551: PPUSH
66552: LD_VAR 0 4
66556: PPUSH
66557: LD_VAR 0 5
66561: PPUSH
66562: LD_VAR 0 6
66566: PPUSH
66567: CALL 66495 0 6
// end ;
66571: PPOPN 7
66573: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
66574: LD_EXP 3
66578: PUSH
66579: LD_INT 4
66581: EQUAL
66582: IFFALSE 66618
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66584: LD_STRING setGameDifficulty(
66586: PUSH
66587: LD_OWVAR 67
66591: STR
66592: PUSH
66593: LD_STRING )
66595: STR
66596: PPUSH
66597: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
66601: LD_STRING displayDifficulty(
66603: PUSH
66604: LD_OWVAR 67
66608: STR
66609: PUSH
66610: LD_STRING )
66612: STR
66613: PPUSH
66614: CALL_OW 559
// end ; SOS_MapStart ( ) ;
66618: CALL 66647 0 0
// end ; end_of_file
66622: PPOPN 1
66624: END
// every 0 0$1 do
66625: GO 66627
66627: DISABLE
// begin enable ;
66628: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66629: LD_STRING updateTimer(
66631: PUSH
66632: LD_OWVAR 1
66636: STR
66637: PUSH
66638: LD_STRING );
66640: STR
66641: PPUSH
66642: CALL_OW 559
// end ;
66646: END
// export function SOS_MapStart ( ) ; begin
66647: LD_INT 0
66649: PPUSH
// UpdateFactoryWaypoints ( ) ;
66650: CALL 67581 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66654: CALL 67833 0 0
// ParseMultiDataToLua ( ) ;
66658: CALL 67980 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
66662: LD_STRING setSpecLogoNumber(
66664: PUSH
66665: LD_INT 2
66667: STR
66668: PUSH
66669: LD_STRING ,
66671: STR
66672: PUSH
66673: LD_INT 1
66675: STR
66676: PUSH
66677: LD_STRING )
66679: STR
66680: PPUSH
66681: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
66685: LD_STRING setSpecLogoNumber(
66687: PUSH
66688: LD_INT 3
66690: STR
66691: PUSH
66692: LD_STRING ,
66694: STR
66695: PUSH
66696: LD_INT 2
66698: STR
66699: PUSH
66700: LD_STRING )
66702: STR
66703: PPUSH
66704: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
66708: LD_STRING setSpecLogoNumber(
66710: PUSH
66711: LD_INT 4
66713: STR
66714: PUSH
66715: LD_STRING ,
66717: STR
66718: PUSH
66719: LD_INT 3
66721: STR
66722: PUSH
66723: LD_STRING )
66725: STR
66726: PPUSH
66727: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
66731: LD_STRING setSpecLogoNumber(
66733: PUSH
66734: LD_INT 5
66736: STR
66737: PUSH
66738: LD_STRING ,
66740: STR
66741: PUSH
66742: LD_INT 4
66744: STR
66745: PUSH
66746: LD_STRING )
66748: STR
66749: PPUSH
66750: CALL_OW 559
// end ;
66754: LD_VAR 0 1
66758: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
66763: PPUSH
66764: PPUSH
66765: PPUSH
66766: PPUSH
66767: PPUSH
66768: PPUSH
66769: PPUSH
// for i := 1 to 8 do
66770: LD_ADDR_VAR 0 2
66774: PUSH
66775: DOUBLE
66776: LD_INT 1
66778: DEC
66779: ST_TO_ADDR
66780: LD_INT 8
66782: PUSH
66783: FOR_TO
66784: IFFALSE 67169
// begin if mpSidePositions [ i ] then
66786: LD_EXP 7
66790: PUSH
66791: LD_VAR 0 2
66795: ARRAY
66796: IFFALSE 67167
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
66798: LD_ADDR_VAR 0 7
66802: PUSH
66803: LD_INT 22
66805: PUSH
66806: LD_VAR 0 2
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PUSH
66815: LD_INT 21
66817: PUSH
66818: LD_INT 1
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PPUSH
66829: CALL_OW 69
66833: PPUSH
66834: CALL 18555 0 1
66838: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66839: LD_ADDR_VAR 0 9
66843: PUSH
66844: LD_INT 22
66846: PUSH
66847: LD_VAR 0 2
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 2
66858: PUSH
66859: LD_INT 30
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 30
66871: PUSH
66872: LD_INT 1
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: LIST
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PPUSH
66888: CALL_OW 69
66892: ST_TO_ADDR
// crates := 0 ;
66893: LD_ADDR_VAR 0 4
66897: PUSH
66898: LD_INT 0
66900: ST_TO_ADDR
// oil := 0 ;
66901: LD_ADDR_VAR 0 5
66905: PUSH
66906: LD_INT 0
66908: ST_TO_ADDR
// sib := 0 ;
66909: LD_ADDR_VAR 0 6
66913: PUSH
66914: LD_INT 0
66916: ST_TO_ADDR
// if bases then
66917: LD_VAR 0 9
66921: IFFALSE 67027
// begin for j in bases do
66923: LD_ADDR_VAR 0 3
66927: PUSH
66928: LD_VAR 0 9
66932: PUSH
66933: FOR_IN
66934: IFFALSE 67025
// begin base := GetBase ( j ) ;
66936: LD_ADDR_VAR 0 8
66940: PUSH
66941: LD_VAR 0 3
66945: PPUSH
66946: CALL_OW 274
66950: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66951: LD_ADDR_VAR 0 4
66955: PUSH
66956: LD_VAR 0 4
66960: PUSH
66961: LD_VAR 0 8
66965: PPUSH
66966: LD_INT 1
66968: PPUSH
66969: CALL_OW 275
66973: PLUS
66974: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66975: LD_ADDR_VAR 0 5
66979: PUSH
66980: LD_VAR 0 5
66984: PUSH
66985: LD_VAR 0 8
66989: PPUSH
66990: LD_INT 2
66992: PPUSH
66993: CALL_OW 275
66997: PLUS
66998: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66999: LD_ADDR_VAR 0 6
67003: PUSH
67004: LD_VAR 0 6
67008: PUSH
67009: LD_VAR 0 8
67013: PPUSH
67014: LD_INT 3
67016: PPUSH
67017: CALL_OW 275
67021: PLUS
67022: ST_TO_ADDR
// end ;
67023: GO 66933
67025: POP
67026: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
67027: LD_STRING setSpecText(
67029: PUSH
67030: LD_VAR 0 2
67034: STR
67035: PUSH
67036: LD_STRING ,
67038: STR
67039: PUSH
67040: LD_INT 2
67042: STR
67043: PUSH
67044: LD_STRING ,
67046: STR
67047: PUSH
67048: LD_VAR 0 4
67052: STR
67053: PUSH
67054: LD_STRING )
67056: STR
67057: PPUSH
67058: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
67062: LD_STRING setSpecText(
67064: PUSH
67065: LD_VAR 0 2
67069: STR
67070: PUSH
67071: LD_STRING ,
67073: STR
67074: PUSH
67075: LD_INT 3
67077: STR
67078: PUSH
67079: LD_STRING ,
67081: STR
67082: PUSH
67083: LD_VAR 0 5
67087: STR
67088: PUSH
67089: LD_STRING )
67091: STR
67092: PPUSH
67093: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
67097: LD_STRING setSpecText(
67099: PUSH
67100: LD_VAR 0 2
67104: STR
67105: PUSH
67106: LD_STRING ,
67108: STR
67109: PUSH
67110: LD_INT 4
67112: STR
67113: PUSH
67114: LD_STRING ,
67116: STR
67117: PUSH
67118: LD_VAR 0 6
67122: STR
67123: PUSH
67124: LD_STRING )
67126: STR
67127: PPUSH
67128: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
67132: LD_STRING setSpecText(
67134: PUSH
67135: LD_VAR 0 2
67139: STR
67140: PUSH
67141: LD_STRING ,
67143: STR
67144: PUSH
67145: LD_INT 5
67147: STR
67148: PUSH
67149: LD_STRING ,
67151: STR
67152: PUSH
67153: LD_VAR 0 7
67157: STR
67158: PUSH
67159: LD_STRING )
67161: STR
67162: PPUSH
67163: CALL_OW 559
// end ; end ;
67167: GO 66783
67169: POP
67170: POP
// end ;
67171: LD_VAR 0 1
67175: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
67176: LD_INT 2
67178: PUSH
67179: LD_INT 30
67181: PUSH
67182: LD_INT 0
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 30
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: LIST
67203: PPUSH
67204: CALL_OW 69
67208: IFFALSE 67218
67210: GO 67212
67212: DISABLE
// begin enable ;
67213: ENABLE
// UpdateSpectatorBar ;
67214: CALL 66759 0 0
// end ;
67218: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67219: LD_INT 0
67221: PPUSH
// end ;
67222: LD_VAR 0 12
67226: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67227: LD_INT 0
67229: PPUSH
67230: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67231: LD_VAR 0 1
67235: NOT
67236: IFTRUE 67255
67238: PUSH
67239: LD_VAR 0 2
67243: PPUSH
67244: LD_VAR 0 3
67248: PPUSH
67249: CALL_OW 488
67253: NOT
67254: OR
67255: IFTRUE 67290
67257: PUSH
67258: LD_VAR 0 1
67262: PPUSH
67263: CALL_OW 266
67267: PUSH
67268: LD_INT 3
67270: NONEQUAL
67271: IFFALSE 67289
67273: PUSH
67274: LD_VAR 0 1
67278: PPUSH
67279: CALL_OW 247
67283: PUSH
67284: LD_INT 1
67286: EQUAL
67287: NOT
67288: AND
67289: OR
67290: IFFALSE 67294
// exit ;
67292: GO 67576
// if GetType ( factory ) = unit_human then
67294: LD_VAR 0 1
67298: PPUSH
67299: CALL_OW 247
67303: PUSH
67304: LD_INT 1
67306: EQUAL
67307: IFFALSE 67324
// factory := IsInUnit ( factory ) ;
67309: LD_ADDR_VAR 0 1
67313: PUSH
67314: LD_VAR 0 1
67318: PPUSH
67319: CALL_OW 310
67323: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67324: LD_VAR 0 1
67328: PPUSH
67329: CALL_OW 266
67333: PUSH
67334: LD_INT 3
67336: NONEQUAL
67337: IFFALSE 67341
// exit ;
67339: GO 67576
// for i := 1 to Count ( factoryWaypoints ) do
67341: LD_ADDR_VAR 0 5
67345: PUSH
67346: DOUBLE
67347: LD_INT 1
67349: DEC
67350: ST_TO_ADDR
67351: LD_EXP 61
67355: PPUSH
67356: CALL 18555 0 1
67360: PUSH
67361: FOR_TO
67362: IFFALSE 67524
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67364: LD_VAR 0 2
67368: PPUSH
67369: LD_VAR 0 3
67373: PPUSH
67374: CALL_OW 428
67378: PUSH
67379: LD_EXP 61
67383: PUSH
67384: LD_VAR 0 5
67388: ARRAY
67389: PUSH
67390: LD_INT 2
67392: ARRAY
67393: EQUAL
67394: IFFALSE 67426
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67396: LD_ADDR_EXP 61
67400: PUSH
67401: LD_EXP 61
67405: PPUSH
67406: LD_VAR 0 5
67410: PPUSH
67411: CALL_OW 3
67415: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67416: CALL 67581 0 0
// exit ;
67420: POP
67421: POP
67422: GO 67576
// end else
67424: GO 67522
// if factory = factoryWaypoints [ i ] [ 2 ] then
67426: LD_VAR 0 1
67430: PUSH
67431: LD_EXP 61
67435: PUSH
67436: LD_VAR 0 5
67440: ARRAY
67441: PUSH
67442: LD_INT 2
67444: ARRAY
67445: EQUAL
67446: IFFALSE 67522
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67448: LD_ADDR_EXP 61
67452: PUSH
67453: LD_EXP 61
67457: PPUSH
67458: LD_VAR 0 5
67462: PPUSH
67463: CALL_OW 3
67467: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67468: LD_ADDR_EXP 61
67472: PUSH
67473: LD_EXP 61
67477: PPUSH
67478: LD_VAR 0 1
67482: PPUSH
67483: CALL_OW 255
67487: PUSH
67488: LD_VAR 0 1
67492: PUSH
67493: LD_VAR 0 2
67497: PUSH
67498: LD_VAR 0 3
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: PPUSH
67509: CALL 54531 0 2
67513: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67514: CALL 67581 0 0
// exit ;
67518: POP
67519: POP
67520: GO 67576
// end ; end ;
67522: GO 67361
67524: POP
67525: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67526: LD_ADDR_EXP 61
67530: PUSH
67531: LD_EXP 61
67535: PPUSH
67536: LD_VAR 0 1
67540: PPUSH
67541: CALL_OW 255
67545: PUSH
67546: LD_VAR 0 1
67550: PUSH
67551: LD_VAR 0 2
67555: PUSH
67556: LD_VAR 0 3
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: LIST
67565: LIST
67566: PPUSH
67567: CALL 54531 0 2
67571: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67572: CALL 67581 0 0
// end ;
67576: LD_VAR 0 4
67580: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67581: LD_INT 0
67583: PPUSH
67584: PPUSH
67585: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67586: LD_STRING resetFactoryWaypoint();
67588: PPUSH
67589: CALL_OW 559
// if factoryWaypoints then
67593: LD_EXP 61
67597: IFFALSE 67718
// begin list := factoryWaypoints ;
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: LD_EXP 61
67608: ST_TO_ADDR
// for i := 1 to list do
67609: LD_ADDR_VAR 0 2
67613: PUSH
67614: DOUBLE
67615: LD_INT 1
67617: DEC
67618: ST_TO_ADDR
67619: LD_VAR 0 3
67623: PUSH
67624: FOR_TO
67625: IFFALSE 67716
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67627: LD_STRING setFactoryWaypointXY(
67629: PUSH
67630: LD_VAR 0 3
67634: PUSH
67635: LD_VAR 0 2
67639: ARRAY
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: STR
67645: PUSH
67646: LD_STRING ,
67648: STR
67649: PUSH
67650: LD_VAR 0 3
67654: PUSH
67655: LD_VAR 0 2
67659: ARRAY
67660: PUSH
67661: LD_INT 2
67663: ARRAY
67664: STR
67665: PUSH
67666: LD_STRING ,
67668: STR
67669: PUSH
67670: LD_VAR 0 3
67674: PUSH
67675: LD_VAR 0 2
67679: ARRAY
67680: PUSH
67681: LD_INT 3
67683: ARRAY
67684: STR
67685: PUSH
67686: LD_STRING ,
67688: STR
67689: PUSH
67690: LD_VAR 0 3
67694: PUSH
67695: LD_VAR 0 2
67699: ARRAY
67700: PUSH
67701: LD_INT 4
67703: ARRAY
67704: STR
67705: PUSH
67706: LD_STRING )
67708: STR
67709: PPUSH
67710: CALL_OW 559
67714: GO 67624
67716: POP
67717: POP
// end ; end ;
67718: LD_VAR 0 1
67722: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
67723: LD_INT 0
67725: PPUSH
// if HexInfo ( x , y ) = warehouse then
67726: LD_VAR 0 2
67730: PPUSH
67731: LD_VAR 0 3
67735: PPUSH
67736: CALL_OW 428
67740: PUSH
67741: LD_VAR 0 1
67745: EQUAL
67746: IFFALSE 67773
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
67748: LD_ADDR_EXP 63
67752: PUSH
67753: LD_EXP 63
67757: PPUSH
67758: LD_VAR 0 1
67762: PPUSH
67763: LD_INT 0
67765: PPUSH
67766: CALL_OW 1
67770: ST_TO_ADDR
67771: GO 67824
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
67773: LD_ADDR_EXP 63
67777: PUSH
67778: LD_EXP 63
67782: PPUSH
67783: LD_VAR 0 1
67787: PPUSH
67788: LD_VAR 0 1
67792: PPUSH
67793: CALL_OW 255
67797: PUSH
67798: LD_VAR 0 1
67802: PUSH
67803: LD_VAR 0 2
67807: PUSH
67808: LD_VAR 0 3
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: PPUSH
67819: CALL_OW 1
67823: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67824: CALL 67833 0 0
// end ;
67828: LD_VAR 0 4
67832: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67833: LD_INT 0
67835: PPUSH
67836: PPUSH
67837: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67838: LD_STRING resetWarehouseGatheringPoints();
67840: PPUSH
67841: CALL_OW 559
// if warehouseGatheringPoints then
67845: LD_EXP 63
67849: IFFALSE 67975
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67851: LD_ADDR_VAR 0 3
67855: PUSH
67856: LD_EXP 63
67860: PPUSH
67861: CALL 58465 0 1
67865: ST_TO_ADDR
// for i := 1 to list do
67866: LD_ADDR_VAR 0 2
67870: PUSH
67871: DOUBLE
67872: LD_INT 1
67874: DEC
67875: ST_TO_ADDR
67876: LD_VAR 0 3
67880: PUSH
67881: FOR_TO
67882: IFFALSE 67973
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67884: LD_STRING setWarehouseGatheringPointXY(
67886: PUSH
67887: LD_VAR 0 3
67891: PUSH
67892: LD_VAR 0 2
67896: ARRAY
67897: PUSH
67898: LD_INT 1
67900: ARRAY
67901: STR
67902: PUSH
67903: LD_STRING ,
67905: STR
67906: PUSH
67907: LD_VAR 0 3
67911: PUSH
67912: LD_VAR 0 2
67916: ARRAY
67917: PUSH
67918: LD_INT 2
67920: ARRAY
67921: STR
67922: PUSH
67923: LD_STRING ,
67925: STR
67926: PUSH
67927: LD_VAR 0 3
67931: PUSH
67932: LD_VAR 0 2
67936: ARRAY
67937: PUSH
67938: LD_INT 3
67940: ARRAY
67941: STR
67942: PUSH
67943: LD_STRING ,
67945: STR
67946: PUSH
67947: LD_VAR 0 3
67951: PUSH
67952: LD_VAR 0 2
67956: ARRAY
67957: PUSH
67958: LD_INT 4
67960: ARRAY
67961: STR
67962: PUSH
67963: LD_STRING )
67965: STR
67966: PPUSH
67967: CALL_OW 559
67971: GO 67881
67973: POP
67974: POP
// end ; end ;
67975: LD_VAR 0 1
67979: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67980: LD_INT 0
67982: PPUSH
67983: PPUSH
// if not mpSidePositions then
67984: LD_EXP 7
67988: NOT
67989: IFFALSE 67993
// exit ;
67991: GO 68064
// result :=  ;
67993: LD_ADDR_VAR 0 1
67997: PUSH
67998: LD_STRING 
68000: ST_TO_ADDR
// for i := 1 to 8 do
68001: LD_ADDR_VAR 0 2
68005: PUSH
68006: DOUBLE
68007: LD_INT 1
68009: DEC
68010: ST_TO_ADDR
68011: LD_INT 8
68013: PUSH
68014: FOR_TO
68015: IFFALSE 68045
// begin result := result & mpSidePositions [ i ] & ; ;
68017: LD_ADDR_VAR 0 1
68021: PUSH
68022: LD_VAR 0 1
68026: PUSH
68027: LD_EXP 7
68031: PUSH
68032: LD_VAR 0 2
68036: ARRAY
68037: STR
68038: PUSH
68039: LD_STRING ;
68041: STR
68042: ST_TO_ADDR
// end ;
68043: GO 68014
68045: POP
68046: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
68047: LD_STRING setMultiplayerRealPosition("
68049: PUSH
68050: LD_VAR 0 1
68054: STR
68055: PUSH
68056: LD_STRING ");
68058: STR
68059: PPUSH
68060: CALL_OW 559
// end ;
68064: LD_VAR 0 1
68068: RET
