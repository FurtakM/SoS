// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2832 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3208 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 2
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 3
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// mpTeamGame := true ;
 802: LD_ADDR_EXP 13
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 810: LD_ADDR_EXP 31
 814: PUSH
 815: LD_INT 100
 817: PUSH
 818: LD_INT 120
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// end ;
 825: LD_VAR 0 1
 829: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
 838: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 839: LD_ADDR_EXP 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 5
 852: PUSH
 853: LD_INT 4
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 20
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 21
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 8
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 26
 913: PUSH
 914: LD_EXP 8
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 27
 927: PUSH
 928: LD_EXP 8
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 17
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 29
 955: PUSH
 956: LD_EXP 8
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 8
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// mpKingArea := 0 ;
1001: LD_ADDR_EXP 36
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// mpPoints := 0 ;
1009: LD_ADDR_EXP 37
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpEmissions := 0 ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// kingArea := 0 ;
1025: LD_ADDR_EXP 1
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingCamArea := 0 ;
1033: LD_ADDR_EXP 2
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 9
1048: ARRAY
1049: IFFALSE 1181
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1051: LD_ADDR_EXP 38
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 2
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 3
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 24
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 12
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 23
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 42
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 42
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1181: LD_ADDR_EXP 18
1185: PUSH
1186: LD_EXP 8
1190: PUSH
1191: LD_INT 11
1193: ARRAY
1194: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1195: LD_ADDR_EXP 24
1199: PUSH
1200: LD_EXP 8
1204: PUSH
1205: LD_INT 12
1207: ARRAY
1208: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1209: LD_ADDR_EXP 28
1213: PUSH
1214: LD_EXP 8
1218: PUSH
1219: LD_INT 13
1221: ARRAY
1222: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1223: LD_ADDR_EXP 35
1227: PUSH
1228: LD_EXP 8
1232: PUSH
1233: LD_INT 14
1235: ARRAY
1236: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1237: LD_ADDR_EXP 32
1241: PUSH
1242: LD_EXP 8
1246: PUSH
1247: LD_INT 15
1249: ARRAY
1250: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1251: LD_ADDR_EXP 30
1255: PUSH
1256: LD_EXP 8
1260: PUSH
1261: LD_INT 18
1263: ARRAY
1264: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1265: LD_ADDR_EXP 3
1269: PUSH
1270: LD_EXP 8
1274: PUSH
1275: LD_INT 20
1277: ARRAY
1278: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1279: LD_ADDR_EXP 22
1283: PUSH
1284: LD_EXP 8
1288: PUSH
1289: LD_INT 21
1291: ARRAY
1292: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1293: LD_ADDR_EXP 33
1297: PUSH
1298: LD_INT 7
1300: PUSH
1301: LD_INT 9
1303: PUSH
1304: LD_INT 8
1306: PUSH
1307: LD_INT 10
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1316: LD_ADDR_VAR 0 8
1320: PUSH
1321: LD_INT 11
1323: PPUSH
1324: LD_INT 2
1326: PPUSH
1327: CALL 52969 0 2
1331: PUSH
1332: LD_INT 12
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL 52969 0 2
1342: PUSH
1343: LD_INT 13
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL 52969 0 2
1353: PUSH
1354: LD_INT 14
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: CALL 52969 0 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_VAR 0 8
1385: PPUSH
1386: CALL 12318 0 1
1390: PUSH
1391: FOR_TO
1392: IFFALSE 1496
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1394: LD_ADDR_EXP 23
1398: PUSH
1399: LD_EXP 23
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 8
1413: PUSH
1414: LD_VAR 0 3
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 3
1437: ARRAY
1438: PPUSH
1439: LD_INT 10
1441: PPUSH
1442: CALL_OW 272
1446: PUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 2
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 273
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
1494: GO 1391
1496: POP
1497: POP
// if hasOil then
1498: LD_VAR 0 5
1502: IFFALSE 1585
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 8
1513: PUSH
1514: LD_INT 6
1516: ARRAY
1517: PUSH
1518: LD_INT 2
1520: EQUAL
1521: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1522: LD_ADDR_EXP 14
1526: PUSH
1527: LD_INT 15
1529: PPUSH
1530: LD_VAR 0 4
1534: PPUSH
1535: CALL 52802 0 2
1539: PUSH
1540: LD_INT 17
1542: PPUSH
1543: LD_VAR 0 4
1547: PPUSH
1548: CALL 52802 0 2
1552: PUSH
1553: LD_INT 19
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 52802 0 2
1565: PUSH
1566: LD_INT 21
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 52802 0 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// end ; if hasSib then
1585: LD_VAR 0 6
1589: IFFALSE 1672
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1591: LD_ADDR_VAR 0 4
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: LD_INT 7
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1609: LD_ADDR_EXP 15
1613: PUSH
1614: LD_INT 16
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 52802 0 2
1626: PUSH
1627: LD_INT 18
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 52802 0 2
1639: PUSH
1640: LD_INT 20
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 52802 0 2
1652: PUSH
1653: LD_INT 22
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 52802 0 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: GREATEREQUAL
1680: IFFALSE 1692
// mpDepots := startPos ;
1682: LD_ADDR_EXP 16
1686: PUSH
1687: LD_VAR 0 8
1691: ST_TO_ADDR
// if baseLevel >= 2 then
1692: LD_VAR 0 7
1696: PUSH
1697: LD_INT 2
1699: GREATEREQUAL
1700: IFFALSE 1913
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 2 ) ] ] ;
1702: LD_ADDR_EXP 19
1706: PUSH
1707: LD_INT 31
1709: PUSH
1710: LD_INT 23
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL 52969 0 2
1720: ADD
1721: PUSH
1722: LD_INT 31
1724: PUSH
1725: LD_INT 24
1727: PPUSH
1728: LD_INT 5
1730: PPUSH
1731: CALL 52969 0 2
1735: ADD
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 25
1742: PPUSH
1743: LD_INT 4
1745: PPUSH
1746: CALL 52969 0 2
1750: ADD
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 31
1759: PUSH
1760: LD_INT 26
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL 52969 0 2
1770: ADD
1771: PUSH
1772: LD_INT 31
1774: PUSH
1775: LD_INT 27
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL 52969 0 2
1785: ADD
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 28
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL 52969 0 2
1800: ADD
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 31
1809: PUSH
1810: LD_INT 29
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 52969 0 2
1820: ADD
1821: PUSH
1822: LD_INT 31
1824: PUSH
1825: LD_INT 31
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 52969 0 2
1835: ADD
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 52969 0 2
1850: ADD
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: LD_INT 32
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 52969 0 2
1870: ADD
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: LD_INT 33
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 52969 0 2
1885: ADD
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 34
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL 52969 0 2
1900: ADD
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: ST_TO_ADDR
// end ; if mpTree then
1913: LD_EXP 3
1917: IFFALSE 1929
// SetAreaMapShow ( TreeArea , 1 ) ;
1919: LD_INT 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 424
// end ;
1929: LD_VAR 0 2
1933: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// begin if not mpShipments then
1947: LD_EXP 29
1951: NOT
1952: IFFALSE 1956
// exit ;
1954: GO 2463
// case mpShipments of 1 :
1956: LD_EXP 29
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 2004
1969: POP
// begin time := 0 0$30 ;
1970: LD_ADDR_VAR 0 4
1974: PUSH
1975: LD_INT 1050
1977: ST_TO_ADDR
// normalTime := 0 0$30 ;
1978: LD_ADDR_VAR 0 6
1982: PUSH
1983: LD_INT 1050
1985: ST_TO_ADDR
// maxTime := 1 1$20 ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 2800
1993: ST_TO_ADDR
// delayTime := 0 0$5 ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 175
2001: ST_TO_ADDR
// end ; 2 :
2002: GO 2134
2004: LD_INT 2
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2047
2012: POP
// begin time := 0 0$25 ;
2013: LD_ADDR_VAR 0 4
2017: PUSH
2018: LD_INT 875
2020: ST_TO_ADDR
// normalTime := 0 0$25 ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 875
2028: ST_TO_ADDR
// maxTime := 1 1$10 ;
2029: LD_ADDR_VAR 0 8
2033: PUSH
2034: LD_INT 2450
2036: ST_TO_ADDR
// delayTime := 0 0$4 ;
2037: LD_ADDR_VAR 0 7
2041: PUSH
2042: LD_INT 140
2044: ST_TO_ADDR
// end ; 3 :
2045: GO 2134
2047: LD_INT 3
2049: DOUBLE
2050: EQUAL
2051: IFTRUE 2055
2053: GO 2090
2055: POP
// begin time := 0 0$20 ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 700
2063: ST_TO_ADDR
// normalTime := 0 0$20 ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 700
2071: ST_TO_ADDR
// maxTime := 1 1$00 ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_INT 2100
2079: ST_TO_ADDR
// delayTime := 0 0$3 ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 105
2087: ST_TO_ADDR
// end ; 4 :
2088: GO 2134
2090: LD_INT 4
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2133
2098: POP
// begin time := 0 0$15 ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: LD_INT 525
2106: ST_TO_ADDR
// normalTime := 0 0$15 ;
2107: LD_ADDR_VAR 0 6
2111: PUSH
2112: LD_INT 525
2114: ST_TO_ADDR
// maxTime := 0 0$55 ;
2115: LD_ADDR_VAR 0 8
2119: PUSH
2120: LD_INT 1925
2122: ST_TO_ADDR
// delayTime := 0 0$2 ;
2123: LD_ADDR_VAR 0 7
2127: PUSH
2128: LD_INT 70
2130: ST_TO_ADDR
// end ; end ;
2131: GO 2134
2133: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2157: LD_ADDR_VAR 0 5
2161: PUSH
2162: LD_INT 36
2164: PUSH
2165: LD_INT 35
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2233
// begin if not mpSidePositions [ i ] then
2188: LD_EXP 9
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFFALSE 2203
// continue ;
2201: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_EXP 9
2222: PUSH
2223: LD_VAR 0 1
2227: ARRAY
2228: ARRAY
2229: ADD
2230: ST_TO_ADDR
// end ;
2231: GO 2185
2233: POP
2234: POP
// x := 1 ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// repeat wait ( time ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL_OW 67
// x := Inc ( x ) ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_VAR 0 2
2261: PPUSH
2262: CALL 49623 0 1
2266: ST_TO_ADDR
// if x > 5 then
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 5
2274: GREATER
2275: IFFALSE 2285
// x := 1 ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// for i in areas do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2335
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_INT 1
2305: PPUSH
2306: CALL_OW 287
2310: PUSH
2311: LD_INT 20
2313: LESS
2314: IFFALSE 2333
// begin CreateCratesArea ( x , i , true ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: CALL_OW 55
// end ; end ;
2333: GO 2295
2335: POP
2336: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2337: LD_INT 37
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 287
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2390
// begin for i := 1 to 3 do
2353: LD_ADDR_VAR 0 1
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 3
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2386
// CreateCratesArea ( x , CenterArea , true ) ;
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_INT 37
2376: PPUSH
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 55
2384: GO 2366
2386: POP
2387: POP
// end else
2388: GO 2421
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2390: LD_INT 37
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL_OW 287
2400: PUSH
2401: LD_INT 30
2403: LESS
2404: IFFALSE 2421
// CreateCratesArea ( x , CenterArea , true ) ;
2406: LD_VAR 0 2
2410: PPUSH
2411: LD_INT 37
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 55
// time := time + delayTime ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 4
2430: PUSH
2431: LD_VAR 0 7
2435: PLUS
2436: ST_TO_ADDR
// if time > maxTime then
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 8
2446: GREATER
2447: IFFALSE 2459
// time := normalTime ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: LD_VAR 0 6
2458: ST_TO_ADDR
// until false ;
2459: LD_INT 0
2461: IFFALSE 2243
// end ;
2463: PPOPN 8
2465: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , power , bonus ;
2466: LD_EXP 3
2470: IFFALSE 2745
2472: GO 2474
2474: DISABLE
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
// begin treeVisited := [ ] ;
2481: LD_ADDR_EXP 4
2485: PUSH
2486: EMPTY
2487: ST_TO_ADDR
// power := 1 ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: LD_INT 1
2495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2503: LD_OWVAR 1
2507: PUSH
2508: LD_INT 42000
2510: PUSH
2511: LD_EXP 3
2515: DIV
2516: PPUSH
2517: CALL_OW 574
2521: MOD
2522: PUSH
2523: LD_INT 0
2525: EQUAL
2526: IFFALSE 2543
// power := Inc ( power ) ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: LD_VAR 0 3
2537: PPUSH
2538: CALL 49623 0 1
2542: ST_TO_ADDR
// if power > 10 then
2543: LD_VAR 0 3
2547: PUSH
2548: LD_INT 10
2550: GREATER
2551: IFFALSE 2561
// power := 10 ;
2553: LD_ADDR_VAR 0 3
2557: PUSH
2558: LD_INT 10
2560: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2561: LD_ADDR_VAR 0 2
2565: PUSH
2566: LD_INT 95
2568: PUSH
2569: LD_INT 1
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 21
2578: PUSH
2579: LD_INT 1
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: LD_INT 23
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: PUSH
2613: LD_EXP 4
2617: DIFF
2618: ST_TO_ADDR
// if tmp then
2619: LD_VAR 0 2
2623: IFFALSE 2741
// begin for i in tmp do
2625: LD_ADDR_VAR 0 1
2629: PUSH
2630: LD_VAR 0 2
2634: PUSH
2635: FOR_IN
2636: IFFALSE 2739
// begin treeVisited := Join ( treeVisited , i ) ;
2638: LD_ADDR_EXP 4
2642: PUSH
2643: LD_EXP 4
2647: PPUSH
2648: LD_VAR 0 1
2652: PPUSH
2653: CALL 48250 0 2
2657: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_VAR 0 1
2672: PUSH
2673: LD_INT 4
2675: MOD
2676: PUSH
2677: LD_INT 1
2679: PLUS
2680: PPUSH
2681: CALL_OW 259
2685: PUSH
2686: LD_VAR 0 3
2690: PLUS
2691: ST_TO_ADDR
// if bonus > 10 then
2692: LD_VAR 0 4
2696: PUSH
2697: LD_INT 10
2699: GREATER
2700: IFFALSE 2710
// bonus := 10 ;
2702: LD_ADDR_VAR 0 4
2706: PUSH
2707: LD_INT 10
2709: ST_TO_ADDR
// SetSkill ( i , i mod 4 + 1 , bonus ) ;
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_VAR 0 1
2719: PUSH
2720: LD_INT 4
2722: MOD
2723: PUSH
2724: LD_INT 1
2726: PLUS
2727: PPUSH
2728: LD_VAR 0 4
2732: PPUSH
2733: CALL_OW 237
// end ;
2737: GO 2635
2739: POP
2740: POP
// end ; until false ;
2741: LD_INT 0
2743: IFFALSE 2496
// end ; end_of_file
2745: PPOPN 4
2747: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL 53767 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 7980 0 1
// end ;
2766: PPOPN 1
2768: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: CALL 53784 0 1
// end ;
2778: PPOPN 1
2780: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2781: LD_VAR 0 1
2785: PPUSH
2786: CALL 8651 0 1
2790: PPOPN 1
2792: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL 53825 0 2
2807: PPOPN 2
2809: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2810: LD_VAR 0 1
2814: PPUSH
2815: LD_VAR 0 2
2819: PPUSH
2820: LD_VAR 0 3
2824: PPUSH
2825: CALL 8704 0 3
2829: PPOPN 3
2831: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2832: LD_INT 0
2834: PPUSH
2835: PPUSH
// disable ( mpActive ) ;
2836: LD_INT 100
2838: DISABLE_MARKED
// disable ( mpWin ) ;
2839: LD_INT 101
2841: DISABLE_MARKED
// disable ( mpLose ) ;
2842: LD_INT 102
2844: DISABLE_MARKED
// mpGameType := 0 ;
2845: LD_ADDR_EXP 5
2849: PUSH
2850: LD_INT 0
2852: ST_TO_ADDR
// mpGameSettings := [ ] ;
2853: LD_ADDR_EXP 8
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2860: LD_ADDR_EXP 6
2864: PUSH
2865: EMPTY
2866: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2867: LD_ADDR_EXP 7
2871: PUSH
2872: EMPTY
2873: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2874: LD_ADDR_EXP 31
2878: PUSH
2879: LD_INT 2
2881: PUSH
2882: LD_INT 2
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2889: LD_ADDR_EXP 14
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2896: LD_ADDR_EXP 15
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2903: LD_ADDR_EXP 43
2907: PUSH
2908: EMPTY
2909: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2910: LD_ADDR_EXP 44
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpDepots := [ ] ;
2917: LD_ADDR_EXP 16
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpBuildings := [ ] ;
2924: LD_ADDR_EXP 19
2928: PUSH
2929: EMPTY
2930: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2931: LD_ADDR_EXP 20
2935: PUSH
2936: EMPTY
2937: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2938: LD_ADDR_EXP 21
2942: PUSH
2943: EMPTY
2944: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2945: LD_ADDR_EXP 22
2949: PUSH
2950: EMPTY
2951: ST_TO_ADDR
// mpStartingResources := [ ] ;
2952: LD_ADDR_EXP 17
2956: PUSH
2957: EMPTY
2958: ST_TO_ADDR
// mpStartPos := [ ] ;
2959: LD_ADDR_EXP 23
2963: PUSH
2964: EMPTY
2965: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2966: LD_ADDR_EXP 24
2970: PUSH
2971: LD_INT 1
2973: NEG
2974: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2975: LD_ADDR_EXP 25
2979: PUSH
2980: EMPTY
2981: ST_TO_ADDR
// mpApemans := [ ] ;
2982: LD_ADDR_EXP 32
2986: PUSH
2987: EMPTY
2988: ST_TO_ADDR
// mpApemansArea := [ ] ;
2989: LD_ADDR_EXP 33
2993: PUSH
2994: EMPTY
2995: ST_TO_ADDR
// mpRespawn := [ ] ;
2996: LD_ADDR_EXP 35
3000: PUSH
3001: EMPTY
3002: ST_TO_ADDR
// mpKingArea := 0 ;
3003: LD_ADDR_EXP 36
3007: PUSH
3008: LD_INT 0
3010: ST_TO_ADDR
// mpPoints := [ ] ;
3011: LD_ADDR_EXP 37
3015: PUSH
3016: EMPTY
3017: ST_TO_ADDR
// mpVehicles := 0 ;
3018: LD_ADDR_EXP 38
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpShipments := 0 ;
3026: LD_ADDR_EXP 29
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3034: LD_ADDR_EXP 42
3038: PUSH
3039: EMPTY
3040: PUSH
3041: EMPTY
3042: PUSH
3043: EMPTY
3044: PUSH
3045: EMPTY
3046: PUSH
3047: EMPTY
3048: PUSH
3049: EMPTY
3050: PUSH
3051: EMPTY
3052: PUSH
3053: EMPTY
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3065: LD_ADDR_EXP 34
3069: PUSH
3070: EMPTY
3071: PUSH
3072: EMPTY
3073: PUSH
3074: EMPTY
3075: PUSH
3076: EMPTY
3077: PUSH
3078: EMPTY
3079: PUSH
3080: EMPTY
3081: PUSH
3082: EMPTY
3083: PUSH
3084: EMPTY
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: ST_TO_ADDR
// mpEmissions := 0 ;
3096: LD_ADDR_EXP 39
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// mpTeleports := 0 ;
3104: LD_ADDR_EXP 45
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// mpArtifacts := 0 ;
3112: LD_ADDR_EXP 46
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3120: LD_ADDR_EXP 27
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3128: LD_ADDR_EXP 26
3132: PUSH
3133: LD_INT 15
3135: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3136: LD_ADDR_EXP 40
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// mpGameActive := false ;
3144: LD_ADDR_EXP 41
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// mpBlockRespThread := false ;
3152: LD_ADDR_EXP 47
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// for i := 1 to 32 do
3160: LD_ADDR_VAR 0 2
3164: PUSH
3165: DOUBLE
3166: LD_INT 1
3168: DEC
3169: ST_TO_ADDR
3170: LD_INT 32
3172: PUSH
3173: FOR_TO
3174: IFFALSE 3201
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3176: LD_ADDR_EXP 8
3180: PUSH
3181: LD_EXP 8
3185: PPUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 1
3198: ST_TO_ADDR
3199: GO 3173
3201: POP
3202: POP
// end ;
3203: LD_VAR 0 1
3207: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3208: LD_INT 0
3210: PPUSH
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
3215: PPUSH
3216: PPUSH
3217: PPUSH
3218: PPUSH
3219: PPUSH
3220: PPUSH
3221: PPUSH
3222: PPUSH
3223: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3224: LD_ADDR_VAR 0 14
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: LD_INT 5
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: ST_TO_ADDR
// for i in gameTypes do
3247: LD_ADDR_VAR 0 2
3251: PUSH
3252: LD_VAR 0 14
3256: PUSH
3257: FOR_IN
3258: IFFALSE 3267
// disable ( i ) ;
3260: LD_VAR 0 2
3264: DISABLE_MARKED
3265: GO 3257
3267: POP
3268: POP
// if Multiplayer then
3269: LD_OWVAR 4
3273: IFFALSE 3457
// begin mpGameType := mp_game_type ;
3275: LD_ADDR_EXP 5
3279: PUSH
3280: LD_OWVAR 6
3284: ST_TO_ADDR
// your_side := mp_player_side ;
3285: LD_ADDR_OWVAR 2
3289: PUSH
3290: LD_OWVAR 7
3294: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3295: LD_ADDR_EXP 9
3299: PUSH
3300: LD_OWVAR 17
3304: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3305: LD_ADDR_EXP 10
3309: PUSH
3310: LD_OWVAR 15
3314: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3315: LD_ADDR_EXP 11
3319: PUSH
3320: LD_OWVAR 16
3324: ST_TO_ADDR
// mpTeams := mp_teams ;
3325: LD_ADDR_EXP 12
3329: PUSH
3330: LD_OWVAR 12
3334: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_EXP 6
3349: PPUSH
3350: CALL 12318 0 1
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3432
// begin setting := mpGameSettingsKeys [ i ] ;
3358: LD_ADDR_VAR 0 12
3362: PUSH
3363: LD_EXP 6
3367: PUSH
3368: LD_VAR 0 2
3372: ARRAY
3373: ST_TO_ADDR
// if setting then
3374: LD_VAR 0 12
3378: IFFALSE 3430
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3380: LD_ADDR_EXP 8
3384: PUSH
3385: LD_EXP 8
3389: PPUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: LD_EXP 7
3399: PUSH
3400: LD_VAR 0 2
3404: ARRAY
3405: PUSH
3406: LD_VAR 0 2
3410: PUSH
3411: LD_INT 1
3413: MINUS
3414: PPUSH
3415: CALL_OW 426
3419: PUSH
3420: LD_INT 1
3422: PLUS
3423: ARRAY
3424: PPUSH
3425: CALL_OW 1
3429: ST_TO_ADDR
// end ;
3430: GO 3355
3432: POP
3433: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3434: LD_ADDR_EXP 13
3438: PUSH
3439: LD_EXP 10
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: EMPTY
3448: LIST
3449: DIFF
3450: PUSH
3451: LD_INT 1
3453: GREATER
3454: ST_TO_ADDR
// end else
3455: GO 3457
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3457: LD_EXP 5
3461: PPUSH
3462: CALL 830 0 1
// if Count ( mpMarkedAreas ) then
3466: LD_EXP 20
3470: PPUSH
3471: CALL 12318 0 1
3475: IFFALSE 3506
// begin for i in mpMarkedAreas do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_EXP 20
3486: PUSH
3487: FOR_IN
3488: IFFALSE 3504
// SetAreaMapShow ( i , 0 ) ;
3490: LD_VAR 0 2
3494: PPUSH
3495: LD_INT 0
3497: PPUSH
3498: CALL_OW 424
3502: GO 3487
3504: POP
3505: POP
// end ; for i := 1 to 8 do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: DOUBLE
3512: LD_INT 1
3514: DEC
3515: ST_TO_ADDR
3516: LD_INT 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 4856
// begin if not mpSidePositions [ i ] then
3522: LD_EXP 9
3526: PUSH
3527: LD_VAR 0 2
3531: ARRAY
3532: NOT
3533: IFFALSE 3537
// continue ;
3535: GO 3519
// side := i ;
3537: LD_ADDR_VAR 0 7
3541: PUSH
3542: LD_VAR 0 2
3546: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3547: LD_ADDR_VAR 0 9
3551: PUSH
3552: LD_EXP 11
3556: PUSH
3557: LD_VAR 0 2
3561: ARRAY
3562: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3563: LD_ADDR_VAR 0 8
3567: PUSH
3568: LD_EXP 9
3572: PUSH
3573: LD_VAR 0 2
3577: ARRAY
3578: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3579: LD_EXP 14
3583: PPUSH
3584: CALL 12318 0 1
3588: IFFALSE 3665
// begin for j in mpOilDeposits [ pos ] do
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_EXP 14
3599: PUSH
3600: LD_VAR 0 8
3604: ARRAY
3605: PUSH
3606: FOR_IN
3607: IFFALSE 3663
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: LD_INT 2
3629: PPUSH
3630: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3634: LD_VAR 0 3
3638: PUSH
3639: LD_INT 1
3641: ARRAY
3642: PPUSH
3643: LD_VAR 0 3
3647: PUSH
3648: LD_INT 2
3650: ARRAY
3651: PPUSH
3652: LD_VAR 0 7
3656: PPUSH
3657: CALL_OW 441
// end ;
3661: GO 3606
3663: POP
3664: POP
// end ; if Count ( mpSibDeposits ) then
3665: LD_EXP 15
3669: PPUSH
3670: CALL 12318 0 1
3674: IFFALSE 3751
// begin for j in mpSibDeposits [ pos ] do
3676: LD_ADDR_VAR 0 3
3680: PUSH
3681: LD_EXP 15
3685: PUSH
3686: LD_VAR 0 8
3690: ARRAY
3691: PUSH
3692: FOR_IN
3693: IFFALSE 3749
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3695: LD_VAR 0 3
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 2
3711: ARRAY
3712: PPUSH
3713: LD_INT 3
3715: PPUSH
3716: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3720: LD_VAR 0 3
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_VAR 0 3
3733: PUSH
3734: LD_INT 2
3736: ARRAY
3737: PPUSH
3738: LD_VAR 0 7
3742: PPUSH
3743: CALL_OW 441
// end ;
3747: GO 3692
3749: POP
3750: POP
// end ; InitBc ;
3751: CALL_OW 21
// InitUc ;
3755: CALL_OW 18
// uc_side := side ;
3759: LD_ADDR_OWVAR 20
3763: PUSH
3764: LD_VAR 0 7
3768: ST_TO_ADDR
// uc_nation := nation ;
3769: LD_ADDR_OWVAR 21
3773: PUSH
3774: LD_VAR 0 9
3778: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3779: LD_EXP 24
3783: PUSH
3784: LD_INT 1
3786: NEG
3787: GREATER
3788: IFFALSE 3947
// begin x := mpStartPos [ pos ] [ 1 ] ;
3790: LD_ADDR_VAR 0 5
3794: PUSH
3795: LD_EXP 23
3799: PUSH
3800: LD_VAR 0 8
3804: ARRAY
3805: PUSH
3806: LD_INT 1
3808: ARRAY
3809: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3810: LD_ADDR_VAR 0 6
3814: PUSH
3815: LD_EXP 23
3819: PUSH
3820: LD_VAR 0 8
3824: ARRAY
3825: PUSH
3826: LD_INT 2
3828: ARRAY
3829: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3830: LD_VAR 0 5
3834: PPUSH
3835: LD_VAR 0 6
3839: PPUSH
3840: LD_INT 12
3842: PPUSH
3843: LD_INT 2
3845: PPUSH
3846: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3850: LD_ADDR_EXP 25
3854: PUSH
3855: LD_EXP 25
3859: PPUSH
3860: LD_VAR 0 7
3864: PPUSH
3865: LD_VAR 0 7
3869: PPUSH
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_VAR 0 6
3879: PPUSH
3880: LD_INT 1
3882: PUSH
3883: LD_INT 100
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PUSH
3890: LD_INT 2
3892: PUSH
3893: LD_INT 70
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: PUSH
3900: LD_INT 3
3902: PUSH
3903: LD_INT 40
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 10
3912: PUSH
3913: LD_INT 25
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 20
3922: PUSH
3923: LD_INT 100
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: PPUSH
3937: CALL_OW 418
3941: PPUSH
3942: CALL_OW 1
3946: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3947: LD_EXP 16
3951: PPUSH
3952: CALL 12318 0 1
3956: IFFALSE 4140
// begin if mpGameType = GameTypeSurvival then
3958: LD_EXP 5
3962: PUSH
3963: LD_INT 2
3965: EQUAL
3966: IFFALSE 3986
// begin bc_level := 10 ;
3968: LD_ADDR_OWVAR 43
3972: PUSH
3973: LD_INT 10
3975: ST_TO_ADDR
// bc_type := b_warehouse ;
3976: LD_ADDR_OWVAR 42
3980: PUSH
3981: LD_INT 1
3983: ST_TO_ADDR
// end else
3984: GO 4002
// begin bc_level := 0 ;
3986: LD_ADDR_OWVAR 43
3990: PUSH
3991: LD_INT 0
3993: ST_TO_ADDR
// bc_type := b_depot ;
3994: LD_ADDR_OWVAR 42
3998: PUSH
3999: LD_INT 0
4001: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4002: LD_ADDR_VAR 0 4
4006: PUSH
4007: LD_EXP 16
4011: PUSH
4012: LD_VAR 0 8
4016: ARRAY
4017: PUSH
4018: LD_INT 1
4020: ARRAY
4021: PPUSH
4022: LD_EXP 16
4026: PUSH
4027: LD_VAR 0 8
4031: ARRAY
4032: PUSH
4033: LD_INT 2
4035: ARRAY
4036: PPUSH
4037: LD_EXP 16
4041: PUSH
4042: LD_VAR 0 8
4046: ARRAY
4047: PUSH
4048: LD_INT 3
4050: ARRAY
4051: PPUSH
4052: CALL_OW 47
4056: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4057: LD_VAR 0 4
4061: PPUSH
4062: LD_STRING @
4064: PUSH
4065: LD_VAR 0 7
4069: STR
4070: PPUSH
4071: CALL_OW 500
// if Count ( mpStartingResources ) then
4075: LD_EXP 17
4079: PPUSH
4080: CALL 12318 0 1
4084: IFFALSE 4138
// begin for j := 1 to mpStartingResources do
4086: LD_ADDR_VAR 0 3
4090: PUSH
4091: DOUBLE
4092: LD_INT 1
4094: DEC
4095: ST_TO_ADDR
4096: LD_EXP 17
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4136
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4104: LD_VAR 0 4
4108: PPUSH
4109: CALL_OW 274
4113: PPUSH
4114: LD_VAR 0 3
4118: PPUSH
4119: LD_EXP 17
4123: PUSH
4124: LD_VAR 0 3
4128: ARRAY
4129: PPUSH
4130: CALL_OW 277
4134: GO 4101
4136: POP
4137: POP
// end ; end else
4138: GO 4347
// if Count ( mpStartingResources ) then
4140: LD_EXP 17
4144: PPUSH
4145: CALL 12318 0 1
4149: IFFALSE 4347
// begin x := mpStartPos [ pos ] [ 1 ] ;
4151: LD_ADDR_VAR 0 5
4155: PUSH
4156: LD_EXP 23
4160: PUSH
4161: LD_VAR 0 8
4165: ARRAY
4166: PUSH
4167: LD_INT 1
4169: ARRAY
4170: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4171: LD_ADDR_VAR 0 6
4175: PUSH
4176: LD_EXP 23
4180: PUSH
4181: LD_VAR 0 8
4185: ARRAY
4186: PUSH
4187: LD_INT 2
4189: ARRAY
4190: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4191: LD_ADDR_VAR 0 3
4195: PUSH
4196: DOUBLE
4197: LD_INT 1
4199: DEC
4200: ST_TO_ADDR
4201: LD_EXP 17
4205: PUSH
4206: FOR_TO
4207: IFFALSE 4345
// begin resources := mpStartingResources [ j ] ;
4209: LD_ADDR_VAR 0 13
4213: PUSH
4214: LD_EXP 17
4218: PUSH
4219: LD_VAR 0 3
4223: ARRAY
4224: ST_TO_ADDR
// if resources = 0 then
4225: LD_VAR 0 13
4229: PUSH
4230: LD_INT 0
4232: EQUAL
4233: IFFALSE 4237
// continue ;
4235: GO 4206
// repeat if resources >= 50 then
4237: LD_VAR 0 13
4241: PUSH
4242: LD_INT 50
4244: GREATEREQUAL
4245: IFFALSE 4291
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: LD_VAR 0 5
4259: PPUSH
4260: LD_VAR 0 6
4264: PPUSH
4265: LD_INT 6
4267: PPUSH
4268: LD_INT 0
4270: PPUSH
4271: CALL_OW 60
// resources := resources - 50 ;
4275: LD_ADDR_VAR 0 13
4279: PUSH
4280: LD_VAR 0 13
4284: PUSH
4285: LD_INT 50
4287: MINUS
4288: ST_TO_ADDR
// end else
4289: GO 4333
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4291: LD_VAR 0 3
4295: PPUSH
4296: LD_VAR 0 13
4300: PUSH
4301: LD_INT 10
4303: DIV
4304: PPUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_VAR 0 6
4314: PPUSH
4315: LD_INT 6
4317: PPUSH
4318: LD_INT 0
4320: PPUSH
4321: CALL_OW 60
// resources := 0 ;
4325: LD_ADDR_VAR 0 13
4329: PUSH
4330: LD_INT 0
4332: ST_TO_ADDR
// end ; until resources <= 0 ;
4333: LD_VAR 0 13
4337: PUSH
4338: LD_INT 0
4340: LESSEQUAL
4341: IFFALSE 4237
// end ;
4343: GO 4206
4345: POP
4346: POP
// end ; if Count ( mpBuildings ) then
4347: LD_EXP 19
4351: PPUSH
4352: CALL 12318 0 1
4356: IFFALSE 4434
// begin for j in mpBuildings [ pos ] do
4358: LD_ADDR_VAR 0 3
4362: PUSH
4363: LD_EXP 19
4367: PUSH
4368: LD_VAR 0 8
4372: ARRAY
4373: PUSH
4374: FOR_IN
4375: IFFALSE 4432
// begin bc_level := 0 ;
4377: LD_ADDR_OWVAR 43
4381: PUSH
4382: LD_INT 0
4384: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4385: LD_ADDR_OWVAR 42
4389: PUSH
4390: LD_VAR 0 3
4394: PUSH
4395: LD_INT 1
4397: ARRAY
4398: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4399: LD_VAR 0 3
4403: PUSH
4404: LD_INT 2
4406: ARRAY
4407: PPUSH
4408: LD_VAR 0 3
4412: PUSH
4413: LD_INT 3
4415: ARRAY
4416: PPUSH
4417: LD_VAR 0 3
4421: PUSH
4422: LD_INT 4
4424: ARRAY
4425: PPUSH
4426: CALL_OW 47
// end ;
4430: GO 4374
4432: POP
4433: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4434: LD_EXP 28
4438: IFFALSE 4458
4440: PUSH
4441: LD_INT 20
4443: PPUSH
4444: LD_VAR 0 7
4448: PPUSH
4449: CALL_OW 321
4453: PUSH
4454: LD_INT 1
4456: EQUAL
4457: AND
4458: IFFALSE 4475
// SetTech ( tech_SibDet , side , state_researched ) ;
4460: LD_INT 20
4462: PPUSH
4463: LD_VAR 0 7
4467: PPUSH
4468: LD_INT 2
4470: PPUSH
4471: CALL_OW 322
// if not mpArtifacts then
4475: LD_EXP 46
4479: NOT
4480: IFFALSE 4497
// SetTech ( tech_artifact , side , state_disabled ) ;
4482: LD_INT 24
4484: PPUSH
4485: LD_VAR 0 7
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: CALL_OW 322
// if mpSibBomb = 1 then
4497: LD_EXP 30
4501: PUSH
4502: LD_INT 1
4504: EQUAL
4505: IFFALSE 4524
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4507: LD_INT 25
4509: PPUSH
4510: LD_VAR 0 7
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: CALL_OW 322
// end else
4522: GO 4539
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4524: LD_INT 25
4526: PPUSH
4527: LD_VAR 0 7
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 322
// end ; if mpVehicles then
4539: LD_EXP 38
4543: IFFALSE 4642
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4545: LD_ADDR_VAR 0 3
4549: PUSH
4550: LD_VAR 0 7
4554: PPUSH
4555: LD_VAR 0 9
4559: PPUSH
4560: LD_EXP 38
4564: PPUSH
4565: CALL 5766 0 3
4569: PUSH
4570: FOR_IN
4571: IFFALSE 4640
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4573: LD_VAR 0 3
4577: PPUSH
4578: LD_INT 0
4580: PPUSH
4581: LD_INT 5
4583: PPUSH
4584: CALL_OW 12
4588: PPUSH
4589: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4593: LD_VAR 0 3
4597: PPUSH
4598: LD_EXP 23
4602: PUSH
4603: LD_VAR 0 8
4607: ARRAY
4608: PUSH
4609: LD_INT 1
4611: ARRAY
4612: PPUSH
4613: LD_EXP 23
4617: PUSH
4618: LD_VAR 0 8
4622: ARRAY
4623: PUSH
4624: LD_INT 2
4626: ARRAY
4627: PPUSH
4628: LD_INT 12
4630: PPUSH
4631: LD_INT 0
4633: PPUSH
4634: CALL_OW 50
// end ;
4638: GO 4570
4640: POP
4641: POP
// end ; uc_nation := nation ;
4642: LD_ADDR_OWVAR 21
4646: PUSH
4647: LD_VAR 0 9
4651: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4652: LD_ADDR_VAR 0 11
4656: PUSH
4657: LD_VAR 0 7
4661: PPUSH
4662: LD_VAR 0 9
4666: PPUSH
4667: LD_EXP 26
4671: PPUSH
4672: LD_EXP 27
4676: PPUSH
4677: CALL 5268 0 4
4681: ST_TO_ADDR
// for j in team do
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 11
4691: PUSH
4692: FOR_IN
4693: IFFALSE 4742
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4695: LD_VAR 0 3
4699: PPUSH
4700: LD_EXP 23
4704: PUSH
4705: LD_VAR 0 8
4709: ARRAY
4710: PUSH
4711: LD_INT 1
4713: ARRAY
4714: PPUSH
4715: LD_EXP 23
4719: PUSH
4720: LD_VAR 0 8
4724: ARRAY
4725: PUSH
4726: LD_INT 2
4728: ARRAY
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 0
4735: PPUSH
4736: CALL_OW 50
4740: GO 4692
4742: POP
4743: POP
// if mpApemans then
4744: LD_EXP 32
4748: IFFALSE 4854
// begin for j := 1 to mpApemans do
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: DOUBLE
4756: LD_INT 1
4758: DEC
4759: ST_TO_ADDR
4760: LD_EXP 32
4764: PUSH
4765: FOR_TO
4766: IFFALSE 4852
// begin PrepareApeman ( - 5 ) ;
4768: LD_INT 5
4770: NEG
4771: PPUSH
4772: CALL 44377 0 1
// ape := CreateHuman ;
4776: LD_ADDR_VAR 0 10
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4786: LD_ADDR_EXP 34
4790: PUSH
4791: LD_EXP 34
4795: PPUSH
4796: LD_VAR 0 8
4800: PPUSH
4801: LD_EXP 34
4805: PUSH
4806: LD_VAR 0 8
4810: ARRAY
4811: PPUSH
4812: LD_VAR 0 10
4816: PPUSH
4817: CALL 48250 0 2
4821: PPUSH
4822: CALL_OW 1
4826: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4827: LD_VAR 0 10
4831: PPUSH
4832: LD_EXP 33
4836: PUSH
4837: LD_VAR 0 8
4841: ARRAY
4842: PPUSH
4843: LD_INT 0
4845: PPUSH
4846: CALL_OW 49
// end ;
4850: GO 4765
4852: POP
4853: POP
// end ; end ;
4854: GO 3519
4856: POP
4857: POP
// if not mpTeamGame then
4858: LD_EXP 13
4862: NOT
4863: IFFALSE 4961
// begin for i := 1 to 8 do
4865: LD_ADDR_VAR 0 2
4869: PUSH
4870: DOUBLE
4871: LD_INT 1
4873: DEC
4874: ST_TO_ADDR
4875: LD_INT 8
4877: PUSH
4878: FOR_TO
4879: IFFALSE 4957
// for j := 1 to 8 do
4881: LD_ADDR_VAR 0 3
4885: PUSH
4886: DOUBLE
4887: LD_INT 1
4889: DEC
4890: ST_TO_ADDR
4891: LD_INT 8
4893: PUSH
4894: FOR_TO
4895: IFFALSE 4953
// if i <> j then
4897: LD_VAR 0 2
4901: PUSH
4902: LD_VAR 0 3
4906: NONEQUAL
4907: IFFALSE 4931
// SetAttitude ( i , j , att_neutral , true ) else
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_VAR 0 3
4918: PPUSH
4919: LD_INT 0
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: CALL_OW 80
4929: GO 4951
// SetAttitude ( i , j , att_friend , true ) ;
4931: LD_VAR 0 2
4935: PPUSH
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 80
4951: GO 4894
4953: POP
4954: POP
4955: GO 4878
4957: POP
4958: POP
// end else
4959: GO 5136
// begin if mpSharedVision then
4961: LD_EXP 18
4965: IFFALSE 5030
// begin for i in mpTeams do
4967: LD_ADDR_VAR 0 2
4971: PUSH
4972: LD_EXP 12
4976: PUSH
4977: FOR_IN
4978: IFFALSE 5028
// for j := 2 to i do
4980: LD_ADDR_VAR 0 3
4984: PUSH
4985: DOUBLE
4986: LD_INT 2
4988: DEC
4989: ST_TO_ADDR
4990: LD_VAR 0 2
4994: PUSH
4995: FOR_TO
4996: IFFALSE 5024
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4998: LD_VAR 0 2
5002: PUSH
5003: LD_VAR 0 3
5007: ARRAY
5008: PPUSH
5009: LD_VAR 0 2
5013: PUSH
5014: LD_INT 1
5016: ARRAY
5017: PPUSH
5018: CALL_OW 343
5022: GO 4995
5024: POP
5025: POP
5026: GO 4977
5028: POP
5029: POP
// end ; for i := 1 to 8 do
5030: LD_ADDR_VAR 0 2
5034: PUSH
5035: DOUBLE
5036: LD_INT 1
5038: DEC
5039: ST_TO_ADDR
5040: LD_INT 8
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5134
// for j := 1 to 8 do
5046: LD_ADDR_VAR 0 3
5050: PUSH
5051: DOUBLE
5052: LD_INT 1
5054: DEC
5055: ST_TO_ADDR
5056: LD_INT 8
5058: PUSH
5059: FOR_TO
5060: IFFALSE 5130
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5062: LD_EXP 10
5066: PUSH
5067: LD_VAR 0 2
5071: ARRAY
5072: PUSH
5073: LD_EXP 10
5077: PUSH
5078: LD_VAR 0 3
5082: ARRAY
5083: EQUAL
5084: IFFALSE 5108
// SetAttitude ( i , j , att_friend , true ) else
5086: LD_VAR 0 2
5090: PPUSH
5091: LD_VAR 0 3
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_INT 1
5101: PPUSH
5102: CALL_OW 80
5106: GO 5128
// SetAttitude ( i , j , att_enemy , true ) ;
5108: LD_VAR 0 2
5112: PPUSH
5113: LD_VAR 0 3
5117: PPUSH
5118: LD_INT 2
5120: PPUSH
5121: LD_INT 1
5123: PPUSH
5124: CALL_OW 80
5128: GO 5059
5130: POP
5131: POP
5132: GO 5043
5134: POP
5135: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5136: LD_ADDR_OWVAR 71
5140: PUSH
5141: LD_EXP 11
5145: PUSH
5146: LD_OWVAR 2
5150: ARRAY
5151: ST_TO_ADDR
// if IAmSpec then
5152: CALL_OW 531
5156: IFFALSE 5197
// begin FogOff ( true ) ;
5158: LD_INT 1
5160: PPUSH
5161: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5165: LD_EXP 31
5169: PUSH
5170: LD_INT 1
5172: ARRAY
5173: PUSH
5174: LD_INT 2
5176: DIV
5177: PPUSH
5178: LD_EXP 31
5182: PUSH
5183: LD_INT 2
5185: ARRAY
5186: PUSH
5187: LD_INT 2
5189: DIV
5190: PPUSH
5191: CALL_OW 86
// end else
5195: GO 5243
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5197: LD_EXP 23
5201: PUSH
5202: LD_EXP 9
5206: PUSH
5207: LD_OWVAR 2
5211: ARRAY
5212: ARRAY
5213: PUSH
5214: LD_INT 1
5216: ARRAY
5217: PPUSH
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 9
5227: PUSH
5228: LD_OWVAR 2
5232: ARRAY
5233: ARRAY
5234: PUSH
5235: LD_INT 2
5237: ARRAY
5238: PPUSH
5239: CALL_OW 86
// end ; BeginBuildUp ;
5243: CALL 6299 0 0
// enable ( mpActive ) ;
5247: LD_INT 100
5249: ENABLE_MARKED
// enable ( mpGameType ) ;
5250: LD_EXP 5
5254: ENABLE_MARKED
// mpGameActive := true ;
5255: LD_ADDR_EXP 41
5259: PUSH
5260: LD_INT 1
5262: ST_TO_ADDR
// end ;
5263: LD_VAR 0 1
5267: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
// result := [ ] ;
5274: LD_ADDR_VAR 0 5
5278: PUSH
5279: EMPTY
5280: ST_TO_ADDR
// class := class_soldier ;
5281: LD_ADDR_VAR 0 8
5285: PUSH
5286: LD_INT 1
5288: ST_TO_ADDR
// uc_side := side ;
5289: LD_ADDR_OWVAR 20
5293: PUSH
5294: LD_VAR 0 1
5298: ST_TO_ADDR
// uc_nation := nation ;
5299: LD_ADDR_OWVAR 21
5303: PUSH
5304: LD_VAR 0 2
5308: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5309: LD_ADDR_OWVAR 26
5313: PUSH
5314: LD_OWVAR 19
5318: PUSH
5319: LD_VAR 0 1
5323: ARRAY
5324: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5325: LD_INT 1
5327: PPUSH
5328: LD_INT 2
5330: PPUSH
5331: CALL_OW 12
5335: PPUSH
5336: LD_VAR 0 8
5340: PPUSH
5341: LD_VAR 0 4
5345: PUSH
5346: LD_INT 2
5348: PLUS
5349: PPUSH
5350: CALL_OW 380
// hc_importance := 105 ;
5354: LD_ADDR_OWVAR 32
5358: PUSH
5359: LD_INT 105
5361: ST_TO_ADDR
// if Multiplayer then
5362: LD_OWVAR 4
5366: IFFALSE 5406
// begin hc_gallery := MULTIAVATARS ;
5368: LD_ADDR_OWVAR 33
5372: PUSH
5373: LD_STRING MULTIAVATARS
5375: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5376: LD_ADDR_OWVAR 34
5380: PUSH
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 525
5390: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5391: LD_ADDR_OWVAR 27
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 526
5405: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5406: LD_ADDR_VAR 0 5
5410: PUSH
5411: LD_VAR 0 5
5415: PPUSH
5416: CALL_OW 44
5420: PPUSH
5421: CALL 48250 0 2
5425: ST_TO_ADDR
// if mpTeamPreset then
5426: LD_LOC 1
5430: IFFALSE 5526
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5432: LD_LOC 1
5436: PUSH
5437: LD_INT 1
5439: ARRAY
5440: PPUSH
5441: LD_VAR 0 5
5445: PUSH
5446: LD_VAR 0 5
5450: ARRAY
5451: PPUSH
5452: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5456: LD_VAR 0 5
5460: PUSH
5461: LD_VAR 0 5
5465: ARRAY
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_LOC 1
5474: PUSH
5475: LD_INT 1
5477: ARRAY
5478: PPUSH
5479: LD_INT 1
5481: PPUSH
5482: CALL_OW 260
5486: PPUSH
5487: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5491: LD_VAR 0 5
5495: PUSH
5496: LD_VAR 0 5
5500: ARRAY
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: LD_LOC 1
5509: PUSH
5510: LD_INT 1
5512: ARRAY
5513: PPUSH
5514: LD_INT 2
5516: PPUSH
5517: CALL_OW 260
5521: PPUSH
5522: CALL_OW 239
// end ; InitHc_All ( ) ;
5526: CALL_OW 584
// class := 2 ;
5530: LD_ADDR_VAR 0 8
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5538: LD_ADDR_VAR 0 6
5542: PUSH
5543: DOUBLE
5544: LD_INT 1
5546: DEC
5547: ST_TO_ADDR
5548: LD_VAR 0 3
5552: PUSH
5553: LD_INT 1
5555: MINUS
5556: PUSH
5557: FOR_TO
5558: IFFALSE 5742
// begin PrepareHuman ( false , class , skill ) ;
5560: LD_INT 0
5562: PPUSH
5563: LD_VAR 0 8
5567: PPUSH
5568: LD_VAR 0 4
5572: PPUSH
5573: CALL_OW 380
// un := CreateHuman ;
5577: LD_ADDR_VAR 0 7
5581: PUSH
5582: CALL_OW 44
5586: ST_TO_ADDR
// result := Join ( result , un ) ;
5587: LD_ADDR_VAR 0 5
5591: PUSH
5592: LD_VAR 0 5
5596: PPUSH
5597: LD_VAR 0 7
5601: PPUSH
5602: CALL 48250 0 2
5606: ST_TO_ADDR
// if mpTeamPreset then
5607: LD_LOC 1
5611: IFFALSE 5707
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5613: LD_LOC 1
5617: PUSH
5618: LD_VAR 0 6
5622: PUSH
5623: LD_INT 1
5625: PLUS
5626: ARRAY
5627: PPUSH
5628: LD_VAR 0 7
5632: PPUSH
5633: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5637: LD_VAR 0 7
5641: PPUSH
5642: LD_INT 1
5644: PPUSH
5645: LD_LOC 1
5649: PUSH
5650: LD_VAR 0 6
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: ARRAY
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 260
5667: PPUSH
5668: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5672: LD_VAR 0 7
5676: PPUSH
5677: LD_INT 2
5679: PPUSH
5680: LD_LOC 1
5684: PUSH
5685: LD_VAR 0 6
5689: PUSH
5690: LD_INT 1
5692: PLUS
5693: ARRAY
5694: PPUSH
5695: LD_INT 2
5697: PPUSH
5698: CALL_OW 260
5702: PPUSH
5703: CALL_OW 239
// end ; class := Inc ( class ) ;
5707: LD_ADDR_VAR 0 8
5711: PUSH
5712: LD_VAR 0 8
5716: PPUSH
5717: CALL 49623 0 1
5721: ST_TO_ADDR
// if class = 5 then
5722: LD_VAR 0 8
5726: PUSH
5727: LD_INT 5
5729: EQUAL
5730: IFFALSE 5740
// class := 1 ;
5732: LD_ADDR_VAR 0 8
5736: PUSH
5737: LD_INT 1
5739: ST_TO_ADDR
// end ;
5740: GO 5557
5742: POP
5743: POP
// if not mpTeamPreset then
5744: LD_LOC 1
5748: NOT
5749: IFFALSE 5761
// mpTeamPreset := result ;
5751: LD_ADDR_LOC 1
5755: PUSH
5756: LD_VAR 0 5
5760: ST_TO_ADDR
// end ;
5761: LD_VAR 0 5
5765: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5766: LD_INT 0
5768: PPUSH
5769: PPUSH
// result := [ ] ;
5770: LD_ADDR_VAR 0 4
5774: PUSH
5775: EMPTY
5776: ST_TO_ADDR
// if not vehicles then
5777: LD_VAR 0 3
5781: NOT
5782: IFFALSE 5786
// exit ;
5784: GO 6000
// for i := 1 to vehicles [ nation ] do
5786: LD_ADDR_VAR 0 5
5790: PUSH
5791: DOUBLE
5792: LD_INT 1
5794: DEC
5795: ST_TO_ADDR
5796: LD_VAR 0 3
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5998
// begin uc_side := side ;
5810: LD_ADDR_OWVAR 20
5814: PUSH
5815: LD_VAR 0 1
5819: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5820: LD_VAR 0 3
5824: PUSH
5825: LD_VAR 0 2
5829: ARRAY
5830: PUSH
5831: LD_VAR 0 5
5835: ARRAY
5836: PPUSH
5837: CALL 12318 0 1
5841: PUSH
5842: LD_INT 4
5844: GREATER
5845: IFFALSE 5875
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5847: LD_ADDR_OWVAR 21
5851: PUSH
5852: LD_VAR 0 3
5856: PUSH
5857: LD_VAR 0 2
5861: ARRAY
5862: PUSH
5863: LD_VAR 0 5
5867: ARRAY
5868: PUSH
5869: LD_INT 5
5871: ARRAY
5872: ST_TO_ADDR
5873: GO 5885
// uc_nation := nation ;
5875: LD_ADDR_OWVAR 21
5879: PUSH
5880: LD_VAR 0 2
5884: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5885: LD_VAR 0 3
5889: PUSH
5890: LD_VAR 0 2
5894: ARRAY
5895: PUSH
5896: LD_VAR 0 5
5900: ARRAY
5901: PUSH
5902: LD_INT 1
5904: ARRAY
5905: PPUSH
5906: LD_VAR 0 3
5910: PUSH
5911: LD_VAR 0 2
5915: ARRAY
5916: PUSH
5917: LD_VAR 0 5
5921: ARRAY
5922: PUSH
5923: LD_INT 2
5925: ARRAY
5926: PPUSH
5927: LD_VAR 0 3
5931: PUSH
5932: LD_VAR 0 2
5936: ARRAY
5937: PUSH
5938: LD_VAR 0 5
5942: ARRAY
5943: PUSH
5944: LD_INT 3
5946: ARRAY
5947: PPUSH
5948: LD_VAR 0 3
5952: PUSH
5953: LD_VAR 0 2
5957: ARRAY
5958: PUSH
5959: LD_VAR 0 5
5963: ARRAY
5964: PUSH
5965: LD_INT 4
5967: ARRAY
5968: PPUSH
5969: LD_INT 80
5971: PPUSH
5972: CALL 15080 0 5
// result := Join ( result , CreateVehicle ) ;
5976: LD_ADDR_VAR 0 4
5980: PUSH
5981: LD_VAR 0 4
5985: PPUSH
5986: CALL_OW 45
5990: PPUSH
5991: CALL 48250 0 2
5995: ST_TO_ADDR
// end ;
5996: GO 5807
5998: POP
5999: POP
// end ;
6000: LD_VAR 0 4
6004: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6005: LD_INT 0
6007: PPUSH
6008: PPUSH
// for i in mpBattleFlags do
6009: LD_ADDR_VAR 0 3
6013: PUSH
6014: LD_EXP 25
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6097
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6022: LD_VAR 0 3
6026: PPUSH
6027: LD_INT 1
6029: PUSH
6030: LD_VAR 0 1
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_VAR 0 1
6046: PUSH
6047: LD_REAL  7.00000000000000E-0001
6050: MUL
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_VAR 0 1
6063: PUSH
6064: LD_REAL  4.00000000000000E-0001
6067: MUL
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 20
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PPUSH
6091: CALL_OW 423
6095: GO 6019
6097: POP
6098: POP
// end ;
6099: LD_VAR 0 2
6103: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6104: LD_INT 100
6106: IFFALSE 6201
6108: GO 6110
6110: DISABLE
6111: LD_INT 0
6113: PPUSH
6114: PPUSH
// begin if mpBattleFlag <= 0 then
6115: LD_EXP 24
6119: PUSH
6120: LD_INT 0
6122: LESSEQUAL
6123: IFFALSE 6127
// exit ;
6125: GO 6201
// strength := 100 ;
6127: LD_ADDR_VAR 0 2
6131: PUSH
6132: LD_INT 100
6134: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6135: LD_EXP 24
6139: PPUSH
6140: CALL_OW 67
// strength := Dec ( strength ) ;
6144: LD_ADDR_VAR 0 2
6148: PUSH
6149: LD_VAR 0 2
6153: PPUSH
6154: CALL 49645 0 1
6158: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6159: LD_VAR 0 2
6163: PPUSH
6164: CALL 6005 0 1
// until not strength ;
6168: LD_VAR 0 2
6172: NOT
6173: IFFALSE 6135
// for i in mpBattleFlags do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_EXP 25
6184: PUSH
6185: FOR_IN
6186: IFFALSE 6199
// KillBattleFlag ( i ) ;
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL_OW 419
6197: GO 6185
6199: POP
6200: POP
// end ;
6201: PPOPN 2
6203: END
// every 0 0$1 marked mpActive do var side , tmp ;
6204: GO 6206
6206: DISABLE
6207: LD_INT 0
6209: PPUSH
6210: PPUSH
// begin if mpSibBomb <= 1 then
6211: LD_EXP 30
6215: PUSH
6216: LD_INT 1
6218: LESSEQUAL
6219: IFFALSE 6223
// exit ;
6221: GO 6296
// tmp := mpSibBomb ;
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: LD_EXP 30
6232: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6233: LD_INT 35
6235: PPUSH
6236: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_VAR 0 2
6249: PUSH
6250: LD_INT 35
6252: MINUS
6253: ST_TO_ADDR
// until not tmp ;
6254: LD_VAR 0 2
6258: NOT
6259: IFFALSE 6233
// for side := 1 to 8 do
6261: LD_ADDR_VAR 0 1
6265: PUSH
6266: DOUBLE
6267: LD_INT 1
6269: DEC
6270: ST_TO_ADDR
6271: LD_INT 8
6273: PUSH
6274: FOR_TO
6275: IFFALSE 6294
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6277: LD_INT 25
6279: PPUSH
6280: LD_VAR 0 1
6284: PPUSH
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 322
6292: GO 6274
6294: POP
6295: POP
// end ;
6296: PPOPN 2
6298: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6299: LD_INT 0
6301: PPUSH
6302: PPUSH
6303: PPUSH
// mpBuildUpTimeDelay := 0 ;
6304: LD_ADDR_EXP 48
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// if not mpBuildUpTime then
6312: LD_EXP 22
6316: NOT
6317: IFFALSE 6321
// exit ;
6319: GO 6510
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6321: LD_ADDR_EXP 48
6325: PUSH
6326: LD_INT 8400
6328: PUSH
6329: LD_INT 2100
6331: PUSH
6332: LD_EXP 22
6336: MUL
6337: PLUS
6338: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6339: LD_ADDR_EXP 49
6343: PUSH
6344: LD_INT 1
6346: ST_TO_ADDR
// for i := 1 to 8 do
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: DOUBLE
6353: LD_INT 1
6355: DEC
6356: ST_TO_ADDR
6357: LD_INT 8
6359: PUSH
6360: FOR_TO
6361: IFFALSE 6508
// if mpSidePositions [ i ] then
6363: LD_EXP 9
6367: PUSH
6368: LD_VAR 0 2
6372: ARRAY
6373: IFFALSE 6506
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6375: LD_EXP 21
6379: PUSH
6380: LD_EXP 9
6384: PUSH
6385: LD_VAR 0 2
6389: ARRAY
6390: ARRAY
6391: PPUSH
6392: LD_INT 5
6394: PPUSH
6395: CALL_OW 424
// for j := 1 to 8 do
6399: LD_ADDR_VAR 0 3
6403: PUSH
6404: DOUBLE
6405: LD_INT 1
6407: DEC
6408: ST_TO_ADDR
6409: LD_INT 8
6411: PUSH
6412: FOR_TO
6413: IFFALSE 6504
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6415: LD_EXP 9
6419: PUSH
6420: LD_VAR 0 3
6424: ARRAY
6425: IFFALSE 6474
6427: PUSH
6428: LD_EXP 10
6432: PUSH
6433: LD_VAR 0 2
6437: ARRAY
6438: PUSH
6439: LD_EXP 10
6443: PUSH
6444: LD_VAR 0 3
6448: ARRAY
6449: NONEQUAL
6450: IFTRUE 6473
6452: PUSH
6453: LD_EXP 13
6457: NOT
6458: IFFALSE 6472
6460: PUSH
6461: LD_VAR 0 2
6465: PUSH
6466: LD_VAR 0 3
6470: NONEQUAL
6471: AND
6472: OR
6473: AND
6474: IFFALSE 6502
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6476: LD_VAR 0 3
6480: PPUSH
6481: LD_EXP 21
6485: PUSH
6486: LD_EXP 9
6490: PUSH
6491: LD_VAR 0 2
6495: ARRAY
6496: ARRAY
6497: PPUSH
6498: CALL_OW 333
6502: GO 6412
6504: POP
6505: POP
// end ;
6506: GO 6360
6508: POP
6509: POP
// end ;
6510: LD_VAR 0 1
6514: RET
// function EndBuildUp ; var i , j ; begin
6515: LD_INT 0
6517: PPUSH
6518: PPUSH
6519: PPUSH
// mpBuildUpTimeActive := false ;
6520: LD_ADDR_EXP 49
6524: PUSH
6525: LD_INT 0
6527: ST_TO_ADDR
// for i := 1 to 8 do
6528: LD_ADDR_VAR 0 2
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_INT 8
6540: PUSH
6541: FOR_TO
6542: IFFALSE 6689
// if mpSidePositions [ i ] then
6544: LD_EXP 9
6548: PUSH
6549: LD_VAR 0 2
6553: ARRAY
6554: IFFALSE 6687
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6556: LD_EXP 21
6560: PUSH
6561: LD_EXP 9
6565: PUSH
6566: LD_VAR 0 2
6570: ARRAY
6571: ARRAY
6572: PPUSH
6573: LD_INT 0
6575: PPUSH
6576: CALL_OW 424
// for j := 1 to 8 do
6580: LD_ADDR_VAR 0 3
6584: PUSH
6585: DOUBLE
6586: LD_INT 1
6588: DEC
6589: ST_TO_ADDR
6590: LD_INT 8
6592: PUSH
6593: FOR_TO
6594: IFFALSE 6685
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6596: LD_EXP 9
6600: PUSH
6601: LD_VAR 0 3
6605: ARRAY
6606: IFFALSE 6655
6608: PUSH
6609: LD_EXP 10
6613: PUSH
6614: LD_VAR 0 2
6618: ARRAY
6619: PUSH
6620: LD_EXP 10
6624: PUSH
6625: LD_VAR 0 3
6629: ARRAY
6630: NONEQUAL
6631: IFTRUE 6654
6633: PUSH
6634: LD_EXP 13
6638: NOT
6639: IFFALSE 6653
6641: PUSH
6642: LD_VAR 0 2
6646: PUSH
6647: LD_VAR 0 3
6651: NONEQUAL
6652: AND
6653: OR
6654: AND
6655: IFFALSE 6683
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_EXP 21
6666: PUSH
6667: LD_EXP 9
6671: PUSH
6672: LD_VAR 0 2
6676: ARRAY
6677: ARRAY
6678: PPUSH
6679: CALL_OW 334
6683: GO 6593
6685: POP
6686: POP
// end ;
6687: GO 6541
6689: POP
6690: POP
// end ;
6691: LD_VAR 0 1
6695: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6696: LD_EXP 49
6700: IFFALSE 6879
6702: GO 6704
6704: DISABLE
6705: LD_INT 0
6707: PPUSH
6708: PPUSH
// begin for i := 1 to 8 do
6709: LD_ADDR_VAR 0 1
6713: PUSH
6714: DOUBLE
6715: LD_INT 1
6717: DEC
6718: ST_TO_ADDR
6719: LD_INT 8
6721: PUSH
6722: FOR_TO
6723: IFFALSE 6876
// if mpSidePositions [ i ] then
6725: LD_EXP 9
6729: PUSH
6730: LD_VAR 0 1
6734: ARRAY
6735: IFFALSE 6874
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6737: LD_ADDR_VAR 0 2
6741: PUSH
6742: LD_EXP 21
6746: PUSH
6747: LD_EXP 9
6751: PUSH
6752: LD_VAR 0 1
6756: ARRAY
6757: ARRAY
6758: PPUSH
6759: LD_INT 2
6761: PUSH
6762: LD_INT 21
6764: PUSH
6765: LD_INT 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 21
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 22
6789: PUSH
6790: LD_OWVAR 2
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 70
6807: PUSH
6808: FOR_IN
6809: IFFALSE 6872
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6811: LD_EXP 10
6815: PUSH
6816: LD_VAR 0 1
6820: ARRAY
6821: PUSH
6822: LD_EXP 10
6826: PUSH
6827: LD_OWVAR 2
6831: ARRAY
6832: NONEQUAL
6833: IFTRUE 6856
6835: PUSH
6836: LD_EXP 13
6840: NOT
6841: IFFALSE 6855
6843: PUSH
6844: LD_VAR 0 1
6848: PUSH
6849: LD_OWVAR 2
6853: NONEQUAL
6854: AND
6855: OR
6856: IFFALSE 6870
// ComMoveToArea ( un , BuildUpEscape ) ;
6858: LD_VAR 0 2
6862: PPUSH
6863: LD_INT 6
6865: PPUSH
6866: CALL_OW 113
6870: GO 6808
6872: POP
6873: POP
6874: GO 6722
6876: POP
6877: POP
// enable ;
6878: ENABLE
// end ;
6879: PPOPN 2
6881: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6882: LD_EXP 22
6886: IFFALSE 6936
6888: GO 6890
6890: DISABLE
6891: LD_INT 0
6893: PPUSH
// begin tmp := mpBuildUpTime ;
6894: LD_ADDR_VAR 0 1
6898: PUSH
6899: LD_EXP 22
6903: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6904: LD_INT 35
6906: PPUSH
6907: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6911: LD_ADDR_VAR 0 1
6915: PUSH
6916: LD_VAR 0 1
6920: PUSH
6921: LD_INT 35
6923: MINUS
6924: ST_TO_ADDR
// until not tmp ;
6925: LD_VAR 0 1
6929: NOT
6930: IFFALSE 6904
// EndBuildUp ;
6932: CALL 6515 0 0
// end ;
6936: PPOPN 1
6938: END
// every 0 0$1 trigger mpActive marked mpWin do
6939: LD_INT 100
6941: IFFALSE 6975
6943: GO 6945
6945: DISABLE
// begin if IAmServer then
6946: CALL_OW 518
6950: IFFALSE 6959
// wait ( 0 0$3 ) ;
6952: LD_INT 105
6954: PPUSH
6955: CALL_OW 67
// if Multiplayer then
6959: LD_OWVAR 4
6963: IFFALSE 6971
// YouWinInMultiplayer else
6965: CALL_OW 106
6969: GO 6975
// YouWin ;
6971: CALL_OW 103
// end ;
6975: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6976: LD_INT 0
6978: PPUSH
// result := false ;
6979: LD_ADDR_VAR 0 3
6983: PUSH
6984: LD_INT 0
6986: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6987: LD_VAR 0 1
6991: PUSH
6992: LD_INT 1
6994: DOUBLE
6995: EQUAL
6996: IFTRUE 7006
6998: LD_INT 5
7000: DOUBLE
7001: EQUAL
7002: IFTRUE 7006
7004: GO 7079
7006: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7007: LD_ADDR_VAR 0 3
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_VAR 0 2
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 2
7026: PUSH
7027: LD_INT 21
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 33
7039: PUSH
7040: LD_INT 3
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 33
7049: PUSH
7050: LD_INT 5
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PPUSH
7067: CALL_OW 69
7071: PPUSH
7072: CALL 12318 0 1
7076: ST_TO_ADDR
// end ; GameTypeSurvival :
7077: GO 7318
7079: LD_INT 2
7081: DOUBLE
7082: EQUAL
7083: IFTRUE 7087
7085: GO 7217
7087: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7088: LD_ADDR_VAR 0 3
7092: PUSH
7093: LD_INT 22
7095: PUSH
7096: LD_VAR 0 2
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 2
7107: PUSH
7108: LD_INT 30
7110: PUSH
7111: LD_INT 0
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 30
7120: PUSH
7121: LD_INT 1
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: PPUSH
7142: CALL 12318 0 1
7146: IFFALSE 7214
7148: PUSH
7149: LD_INT 22
7151: PUSH
7152: LD_VAR 0 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 2
7163: PUSH
7164: LD_INT 21
7166: PUSH
7167: LD_INT 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 33
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 33
7186: PUSH
7187: LD_INT 5
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: PPUSH
7209: CALL 12318 0 1
7213: AND
7214: ST_TO_ADDR
// end ; GameTypeKing :
7215: GO 7318
7217: LD_INT 3
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7317
7225: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7226: LD_ADDR_VAR 0 3
7230: PUSH
7231: LD_INT 22
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 33
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 33
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 69
7290: PPUSH
7291: CALL 12318 0 1
7295: IFFALSE 7314
7297: PUSH
7298: LD_VAR 0 2
7302: PPUSH
7303: CALL 60214 0 1
7307: PUSH
7308: LD_EXP 37
7312: LESS
7313: AND
7314: ST_TO_ADDR
// end ; end ;
7315: GO 7318
7317: POP
// end ;
7318: LD_VAR 0 3
7322: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7323: LD_INT 100
7325: IFFALSE 7555
7327: GO 7329
7329: DISABLE
7330: LD_INT 0
7332: PPUSH
7333: PPUSH
// begin if Multiplayer then
7334: LD_OWVAR 4
7338: IFFALSE 7346
// SetPlayerSpectator ( ) else
7340: CALL_OW 572
7344: GO 7355
// FogOff ( your_side ) ;
7346: LD_OWVAR 2
7350: PPUSH
7351: CALL_OW 344
// repeat gameIsOn := false ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// for i := 1 to 8 do
7363: LD_ADDR_VAR 0 2
7367: PUSH
7368: DOUBLE
7369: LD_INT 1
7371: DEC
7372: ST_TO_ADDR
7373: LD_INT 8
7375: PUSH
7376: FOR_TO
7377: IFFALSE 7507
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7379: LD_EXP 9
7383: PUSH
7384: LD_VAR 0 2
7388: ARRAY
7389: IFFALSE 7402
7391: PUSH
7392: LD_VAR 0 2
7396: PPUSH
7397: CALL_OW 108
7401: AND
7402: IFFALSE 7416
7404: PUSH
7405: LD_VAR 0 2
7409: PUSH
7410: LD_OWVAR 2
7414: NONEQUAL
7415: AND
7416: IFFALSE 7505
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7418: LD_EXP 10
7422: PUSH
7423: LD_VAR 0 2
7427: ARRAY
7428: NOT
7429: IFTRUE 7477
7431: PUSH
7432: LD_EXP 10
7436: PUSH
7437: LD_VAR 0 2
7441: ARRAY
7442: PUSH
7443: LD_EXP 10
7447: PUSH
7448: LD_OWVAR 2
7452: ARRAY
7453: NONEQUAL
7454: IFFALSE 7476
7456: PUSH
7457: LD_OWVAR 2
7461: PPUSH
7462: LD_VAR 0 2
7466: PPUSH
7467: CALL_OW 81
7471: PUSH
7472: LD_INT 1
7474: NONEQUAL
7475: AND
7476: OR
7477: IFFALSE 7505
// if HasPowerByGameType ( mpGameType , i ) then
7479: LD_EXP 5
7483: PPUSH
7484: LD_VAR 0 2
7488: PPUSH
7489: CALL 6976 0 2
7493: IFFALSE 7505
// begin gameIsOn := true ;
7495: LD_ADDR_VAR 0 1
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// break ;
7503: GO 7507
// end ;
7505: GO 7376
7507: POP
7508: POP
// wait ( 100 ) ;
7509: LD_INT 100
7511: PPUSH
7512: CALL_OW 67
// until not gameIsOn ;
7516: LD_VAR 0 1
7520: NOT
7521: IFFALSE 7355
// if IAmServer then
7523: CALL_OW 518
7527: IFFALSE 7536
// wait ( 0 0$3 ) ;
7529: LD_INT 105
7531: PPUSH
7532: CALL_OW 67
// if Multiplayer then
7536: LD_OWVAR 4
7540: IFFALSE 7548
// YouLostInMultiplayer else
7542: CALL_OW 107
7546: GO 7555
// YouLost (  ) ;
7548: LD_STRING 
7550: PPUSH
7551: CALL_OW 104
// end ;
7555: PPOPN 2
7557: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7558: LD_EXP 35
7562: IFFALSE 7946
7564: GO 7566
7566: DISABLE
7567: LD_INT 0
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7574: LD_ADDR_VAR 0 5
7578: PUSH
7579: LD_INT 1
7581: PUSH
7582: LD_INT 2
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: LD_INT 4
7590: PUSH
7591: LD_INT 5
7593: PUSH
7594: LD_INT 6
7596: PUSH
7597: LD_INT 7
7599: PUSH
7600: LD_INT 8
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7613: LD_INT 350
7615: PPUSH
7616: CALL_OW 67
// for i := 1 to 8 do
7620: LD_ADDR_VAR 0 1
7624: PUSH
7625: DOUBLE
7626: LD_INT 1
7628: DEC
7629: ST_TO_ADDR
7630: LD_INT 8
7632: PUSH
7633: FOR_TO
7634: IFFALSE 7916
// begin j := sides [ i ] ;
7636: LD_ADDR_VAR 0 2
7640: PUSH
7641: LD_VAR 0 5
7645: PUSH
7646: LD_VAR 0 1
7650: ARRAY
7651: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7652: LD_EXP 42
7656: PUSH
7657: LD_VAR 0 2
7661: ARRAY
7662: PPUSH
7663: CALL 12318 0 1
7667: IFFALSE 7680
7669: PUSH
7670: LD_VAR 0 2
7674: PPUSH
7675: CALL_OW 108
7679: AND
7680: IFFALSE 7698
7682: PUSH
7683: LD_EXP 5
7687: PPUSH
7688: LD_VAR 0 2
7692: PPUSH
7693: CALL 6976 0 2
7697: AND
7698: IFFALSE 7914
// begin wait ( mpRespawn div 3 ) ;
7700: LD_EXP 35
7704: PUSH
7705: LD_INT 3
7707: DIV
7708: PPUSH
7709: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7713: LD_ADDR_VAR 0 3
7717: PUSH
7718: LD_INT 22
7720: PUSH
7721: LD_VAR 0 2
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 50
7732: PUSH
7733: EMPTY
7734: LIST
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: LD_INT 0
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 30
7751: PUSH
7752: LD_INT 1
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: PPUSH
7769: CALL_OW 69
7773: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7774: LD_VAR 0 3
7778: NOT
7779: IFTRUE 7793
7781: PUSH
7782: LD_VAR 0 2
7786: PPUSH
7787: CALL_OW 108
7791: NOT
7792: OR
7793: IFTRUE 7812
7795: PUSH
7796: LD_EXP 5
7800: PPUSH
7801: LD_VAR 0 2
7805: PPUSH
7806: CALL 6976 0 2
7810: NOT
7811: OR
7812: IFFALSE 7816
// continue ;
7814: GO 7633
// spawn := tmp [ 1 ] ;
7816: LD_ADDR_VAR 0 4
7820: PUSH
7821: LD_VAR 0 3
7825: PUSH
7826: LD_INT 1
7828: ARRAY
7829: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7830: LD_EXP 42
7834: PUSH
7835: LD_VAR 0 2
7839: ARRAY
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 4
7849: PPUSH
7850: CALL_OW 250
7854: PPUSH
7855: LD_VAR 0 4
7859: PPUSH
7860: CALL_OW 251
7864: PPUSH
7865: LD_INT 32
7867: PPUSH
7868: LD_INT 1
7870: PPUSH
7871: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7875: LD_ADDR_EXP 42
7879: PUSH
7880: LD_EXP 42
7884: PPUSH
7885: LD_VAR 0 2
7889: PPUSH
7890: LD_EXP 42
7894: PUSH
7895: LD_VAR 0 2
7899: ARRAY
7900: PPUSH
7901: LD_INT 1
7903: PPUSH
7904: CALL_OW 3
7908: PPUSH
7909: CALL_OW 1
7913: ST_TO_ADDR
// end ; end ;
7914: GO 7633
7916: POP
7917: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7918: LD_ADDR_VAR 0 5
7922: PUSH
7923: LD_VAR 0 5
7927: PPUSH
7928: LD_INT 1
7930: PPUSH
7931: LD_INT 8
7933: PPUSH
7934: LD_INT 1
7936: PPUSH
7937: CALL 14610 0 4
7941: ST_TO_ADDR
// until false ;
7942: LD_INT 0
7944: IFFALSE 7613
// end ;
7946: PPOPN 5
7948: END
// every 0 0$1 marked mpActive do
7949: GO 7951
7951: DISABLE
// begin enable ;
7952: ENABLE
// if not mpDisplayStrings then
7953: LD_EXP 40
7957: NOT
7958: IFFALSE 7969
// begin display_strings := [ ] ;
7960: LD_ADDR_OWVAR 47
7964: PUSH
7965: EMPTY
7966: ST_TO_ADDR
// exit ;
7967: GO 7979
// end ; display_strings := mpDisplayStrings ;
7969: LD_ADDR_OWVAR 47
7973: PUSH
7974: LD_EXP 40
7978: ST_TO_ADDR
// end ; end_of_file
7979: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7980: LD_INT 0
7982: PPUSH
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
7988: PPUSH
7989: PPUSH
7990: PPUSH
// if GetType ( un ) = unit_vehicle then
7991: LD_VAR 0 1
7995: PPUSH
7996: CALL_OW 247
8000: PUSH
8001: LD_INT 2
8003: EQUAL
8004: IFFALSE 8008
// exit ;
8006: GO 8646
// side := GetSide ( un ) ;
8008: LD_ADDR_VAR 0 9
8012: PUSH
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 255
8022: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
8023: LD_EXP 5
8027: PUSH
8028: LD_INT 2
8030: EQUAL
8031: IFFALSE 8107
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 266
8042: PUSH
8043: LD_INT 0
8045: PUSH
8046: LD_INT 1
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: IN
8053: IFFALSE 8107
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
8055: LD_ADDR_VAR 0 3
8059: PUSH
8060: LD_INT 22
8062: PUSH
8063: LD_VAR 0 9
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 21
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PPUSH
8086: CALL_OW 69
8090: PUSH
8091: FOR_IN
8092: IFFALSE 8105
// KillUnit ( i ) ;
8094: LD_VAR 0 3
8098: PPUSH
8099: CALL_OW 66
8103: GO 8091
8105: POP
8106: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8107: LD_VAR 0 1
8111: PPUSH
8112: CALL_OW 257
8116: PUSH
8117: LD_INT 12
8119: PUSH
8120: LD_INT 17
8122: PUSH
8123: LD_INT 15
8125: PUSH
8126: LD_INT 16
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: IN
8135: IFTRUE 8152
8137: PUSH
8138: LD_VAR 0 1
8142: PPUSH
8143: CALL_OW 263
8147: PUSH
8148: LD_INT 5
8150: EQUAL
8151: OR
8152: IFFALSE 8371
// begin tag := 0 ;
8154: LD_ADDR_VAR 0 5
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// for i := 1 to 8 do
8162: LD_ADDR_VAR 0 3
8166: PUSH
8167: DOUBLE
8168: LD_INT 1
8170: DEC
8171: ST_TO_ADDR
8172: LD_INT 8
8174: PUSH
8175: FOR_TO
8176: IFFALSE 8210
// if un in mpApePosIndex [ i ] then
8178: LD_VAR 0 1
8182: PUSH
8183: LD_EXP 34
8187: PUSH
8188: LD_VAR 0 3
8192: ARRAY
8193: IN
8194: IFFALSE 8208
// begin tag := i ;
8196: LD_ADDR_VAR 0 5
8200: PUSH
8201: LD_VAR 0 3
8205: ST_TO_ADDR
// break ;
8206: GO 8210
// end ;
8208: GO 8175
8210: POP
8211: POP
// if not tag then
8212: LD_VAR 0 5
8216: NOT
8217: IFFALSE 8221
// exit ;
8219: GO 8646
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8221: LD_ADDR_VAR 0 7
8225: PUSH
8226: LD_EXP 33
8230: PUSH
8231: LD_EXP 9
8235: PUSH
8236: LD_VAR 0 5
8240: ARRAY
8241: ARRAY
8242: ST_TO_ADDR
// if not area then
8243: LD_VAR 0 7
8247: NOT
8248: IFFALSE 8252
// exit ;
8250: GO 8646
// wait ( 4 4$00 ) ;
8252: LD_INT 8400
8254: PPUSH
8255: CALL_OW 67
// repeat wait ( 10 ) ;
8259: LD_INT 10
8261: PPUSH
8262: CALL_OW 67
// until not mpBlockRespThread ;
8266: LD_EXP 47
8270: NOT
8271: IFFALSE 8259
// mpBlockRespThread := true ;
8273: LD_ADDR_EXP 47
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8281: LD_INT 0
8283: PPUSH
8284: CALL 44377 0 1
// ape := CreateHuman ;
8288: LD_ADDR_VAR 0 4
8292: PUSH
8293: CALL_OW 44
8297: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8298: LD_ADDR_EXP 34
8302: PUSH
8303: LD_EXP 34
8307: PPUSH
8308: LD_VAR 0 5
8312: PPUSH
8313: LD_EXP 34
8317: PUSH
8318: LD_VAR 0 5
8322: ARRAY
8323: PPUSH
8324: LD_VAR 0 4
8328: PPUSH
8329: CALL 48250 0 2
8333: PPUSH
8334: CALL_OW 1
8338: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_VAR 0 7
8348: PPUSH
8349: LD_INT 0
8351: PPUSH
8352: CALL_OW 49
// wait ( 10 ) ;
8356: LD_INT 10
8358: PPUSH
8359: CALL_OW 67
// mpBlockRespThread := false ;
8363: LD_ADDR_EXP 47
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8371: LD_VAR 0 1
8375: PPUSH
8376: CALL_OW 247
8380: PUSH
8381: LD_INT 1
8383: EQUAL
8384: IFFALSE 8401
8386: PUSH
8387: LD_VAR 0 1
8391: PPUSH
8392: CALL_OW 248
8396: PUSH
8397: LD_INT 0
8399: GREATER
8400: AND
8401: IFFALSE 8646
// begin if not mpRespawn then
8403: LD_EXP 35
8407: NOT
8408: IFFALSE 8412
// exit ;
8410: GO 8646
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8412: LD_VAR 0 9
8416: PPUSH
8417: CALL_OW 108
8421: NOT
8422: IFFALSE 8441
8424: PUSH
8425: LD_EXP 5
8429: PPUSH
8430: LD_VAR 0 9
8434: PPUSH
8435: CALL 6976 0 2
8439: NOT
8440: AND
8441: IFFALSE 8445
// exit ;
8443: GO 8646
// side := GetSide ( un ) ;
8445: LD_ADDR_VAR 0 9
8449: PUSH
8450: LD_VAR 0 1
8454: PPUSH
8455: CALL_OW 255
8459: ST_TO_ADDR
// nation := GetNation ( un ) ;
8460: LD_ADDR_VAR 0 8
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 248
8474: ST_TO_ADDR
// class := GetClass ( un ) ;
8475: LD_ADDR_VAR 0 6
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 257
8489: ST_TO_ADDR
// if class > 4 then
8490: LD_VAR 0 6
8494: PUSH
8495: LD_INT 4
8497: GREATER
8498: IFFALSE 8508
// class := 1 ;
8500: LD_ADDR_VAR 0 6
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// repeat wait ( 10 ) ;
8508: LD_INT 10
8510: PPUSH
8511: CALL_OW 67
// until not mpBlockRespThread ;
8515: LD_EXP 47
8519: NOT
8520: IFFALSE 8508
// mpBlockRespThread := true ;
8522: LD_ADDR_EXP 47
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// uc_side := side ;
8530: LD_ADDR_OWVAR 20
8534: PUSH
8535: LD_VAR 0 9
8539: ST_TO_ADDR
// uc_nation := nation ;
8540: LD_ADDR_OWVAR 21
8544: PUSH
8545: LD_VAR 0 8
8549: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8550: LD_INT 0
8552: PPUSH
8553: LD_VAR 0 6
8557: PPUSH
8558: LD_INT 2
8560: PPUSH
8561: CALL_OW 380
// un := CreateHuman ;
8565: LD_ADDR_VAR 0 1
8569: PUSH
8570: CALL_OW 44
8574: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8575: LD_ADDR_EXP 42
8579: PUSH
8580: LD_EXP 42
8584: PPUSH
8585: LD_VAR 0 9
8589: PPUSH
8590: LD_EXP 42
8594: PUSH
8595: LD_VAR 0 9
8599: ARRAY
8600: PPUSH
8601: LD_EXP 42
8605: PUSH
8606: LD_VAR 0 9
8610: ARRAY
8611: PUSH
8612: LD_INT 1
8614: PLUS
8615: PPUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 1
8625: PPUSH
8626: CALL_OW 1
8630: ST_TO_ADDR
// wait ( 10 ) ;
8631: LD_INT 10
8633: PPUSH
8634: CALL_OW 67
// mpBlockRespThread := false ;
8638: LD_ADDR_EXP 47
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// end ; end ;
8646: LD_VAR 0 2
8650: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8651: LD_INT 0
8653: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 266
8663: PUSH
8664: LD_INT 0
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: IN
8674: IFFALSE 8699
// SetBName ( building , @ & GetSide ( building ) ) ;
8676: LD_VAR 0 1
8680: PPUSH
8681: LD_STRING @
8683: PUSH
8684: LD_VAR 0 1
8688: PPUSH
8689: CALL_OW 255
8693: STR
8694: PPUSH
8695: CALL_OW 500
// end ;
8699: LD_VAR 0 2
8703: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8704: LD_INT 0
8706: PPUSH
8707: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8708: LD_EXP 5
8712: PUSH
8713: LD_INT 2
8715: EQUAL
8716: IFFALSE 8740
8718: PUSH
8719: LD_VAR 0 1
8723: PPUSH
8724: CALL_OW 266
8728: PUSH
8729: LD_INT 0
8731: PUSH
8732: LD_INT 1
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: IN
8739: AND
8740: IFFALSE 8819
// begin SetSide ( building , oldSide ) ;
8742: LD_VAR 0 1
8746: PPUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: CALL_OW 235
// KillUnit ( building ) ;
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_INT 22
8772: PUSH
8773: LD_VAR 0 2
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 21
8784: PUSH
8785: LD_INT 1
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PPUSH
8796: CALL_OW 69
8800: PUSH
8801: FOR_IN
8802: IFFALSE 8815
// KillUnit ( i ) ;
8804: LD_VAR 0 5
8808: PPUSH
8809: CALL_OW 66
8813: GO 8801
8815: POP
8816: POP
// exit ;
8817: GO 8864
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 266
8828: PUSH
8829: LD_INT 0
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: IN
8839: IFFALSE 8864
// SetBName ( building , @ & GetSide ( building ) ) ;
8841: LD_VAR 0 1
8845: PPUSH
8846: LD_STRING @
8848: PUSH
8849: LD_VAR 0 1
8853: PPUSH
8854: CALL_OW 255
8858: STR
8859: PPUSH
8860: CALL_OW 500
// end ;
8864: LD_VAR 0 4
8868: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8869: LD_INT 0
8871: PPUSH
8872: PPUSH
8873: PPUSH
// if mpGameType <> GameTypeFamine then
8874: LD_EXP 5
8878: PUSH
8879: LD_INT 5
8881: NONEQUAL
8882: IFFALSE 8886
// exit ;
8884: GO 9100
// for i := 1 to mpGlobalOilDeposits do
8886: LD_ADDR_VAR 0 6
8890: PUSH
8891: DOUBLE
8892: LD_INT 1
8894: DEC
8895: ST_TO_ADDR
8896: LD_EXP 43
8900: PUSH
8901: FOR_TO
8902: IFFALSE 9098
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8904: LD_EXP 43
8908: PUSH
8909: LD_VAR 0 6
8913: ARRAY
8914: PUSH
8915: LD_INT 1
8917: ARRAY
8918: PPUSH
8919: LD_EXP 43
8923: PUSH
8924: LD_VAR 0 6
8928: ARRAY
8929: PUSH
8930: LD_INT 2
8932: ARRAY
8933: PPUSH
8934: CALL_OW 428
8938: PUSH
8939: LD_VAR 0 1
8943: EQUAL
8944: IFFALSE 9096
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8946: LD_ADDR_VAR 0 7
8950: PUSH
8951: LD_EXP 43
8955: PUSH
8956: LD_VAR 0 6
8960: ARRAY
8961: PUSH
8962: LD_INT 3
8964: ARRAY
8965: ST_TO_ADDR
// value := Dec ( value ) ;
8966: LD_ADDR_VAR 0 7
8970: PUSH
8971: LD_VAR 0 7
8975: PPUSH
8976: CALL 49645 0 1
8980: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8981: LD_ADDR_EXP 43
8985: PUSH
8986: LD_EXP 43
8990: PPUSH
8991: LD_VAR 0 6
8995: PPUSH
8996: LD_EXP 43
9000: PUSH
9001: LD_VAR 0 6
9005: ARRAY
9006: PPUSH
9007: LD_INT 3
9009: PPUSH
9010: LD_VAR 0 7
9014: PPUSH
9015: CALL_OW 1
9019: PPUSH
9020: CALL_OW 1
9024: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9025: LD_VAR 0 1
9029: PPUSH
9030: LD_VAR 0 7
9034: PPUSH
9035: CALL_OW 505
// if value = 0 then
9039: LD_VAR 0 7
9043: PUSH
9044: LD_INT 0
9046: EQUAL
9047: IFFALSE 9096
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9049: LD_EXP 43
9053: PUSH
9054: LD_VAR 0 6
9058: ARRAY
9059: PUSH
9060: LD_INT 1
9062: ARRAY
9063: PPUSH
9064: LD_EXP 43
9068: PUSH
9069: LD_VAR 0 6
9073: ARRAY
9074: PUSH
9075: LD_INT 2
9077: ARRAY
9078: PPUSH
9079: CALL_OW 63
// KillUnit ( building ) ;
9083: LD_VAR 0 1
9087: PPUSH
9088: CALL_OW 66
// exit ;
9092: POP
9093: POP
9094: GO 9100
// end ; end ; end ;
9096: GO 8901
9098: POP
9099: POP
// end ;
9100: LD_VAR 0 5
9104: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9105: LD_INT 0
9107: PPUSH
9108: PPUSH
9109: PPUSH
// if mpGameType <> GameTypeFamine then
9110: LD_EXP 5
9114: PUSH
9115: LD_INT 5
9117: NONEQUAL
9118: IFFALSE 9122
// exit ;
9120: GO 9336
// for i := 1 to mpGlobalSibDeposits do
9122: LD_ADDR_VAR 0 6
9126: PUSH
9127: DOUBLE
9128: LD_INT 1
9130: DEC
9131: ST_TO_ADDR
9132: LD_EXP 44
9136: PUSH
9137: FOR_TO
9138: IFFALSE 9334
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9140: LD_EXP 44
9144: PUSH
9145: LD_VAR 0 6
9149: ARRAY
9150: PUSH
9151: LD_INT 1
9153: ARRAY
9154: PPUSH
9155: LD_EXP 44
9159: PUSH
9160: LD_VAR 0 6
9164: ARRAY
9165: PUSH
9166: LD_INT 2
9168: ARRAY
9169: PPUSH
9170: CALL_OW 428
9174: PUSH
9175: LD_VAR 0 1
9179: EQUAL
9180: IFFALSE 9332
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9182: LD_ADDR_VAR 0 7
9186: PUSH
9187: LD_EXP 44
9191: PUSH
9192: LD_VAR 0 6
9196: ARRAY
9197: PUSH
9198: LD_INT 3
9200: ARRAY
9201: ST_TO_ADDR
// value := Dec ( value ) ;
9202: LD_ADDR_VAR 0 7
9206: PUSH
9207: LD_VAR 0 7
9211: PPUSH
9212: CALL 49645 0 1
9216: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9217: LD_ADDR_EXP 44
9221: PUSH
9222: LD_EXP 44
9226: PPUSH
9227: LD_VAR 0 6
9231: PPUSH
9232: LD_EXP 44
9236: PUSH
9237: LD_VAR 0 6
9241: ARRAY
9242: PPUSH
9243: LD_INT 3
9245: PPUSH
9246: LD_VAR 0 7
9250: PPUSH
9251: CALL_OW 1
9255: PPUSH
9256: CALL_OW 1
9260: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_VAR 0 7
9270: PPUSH
9271: CALL_OW 505
// if value = 0 then
9275: LD_VAR 0 7
9279: PUSH
9280: LD_INT 0
9282: EQUAL
9283: IFFALSE 9332
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9285: LD_EXP 44
9289: PUSH
9290: LD_VAR 0 6
9294: ARRAY
9295: PUSH
9296: LD_INT 1
9298: ARRAY
9299: PPUSH
9300: LD_EXP 44
9304: PUSH
9305: LD_VAR 0 6
9309: ARRAY
9310: PUSH
9311: LD_INT 2
9313: ARRAY
9314: PPUSH
9315: CALL_OW 63
// KillUnit ( building ) ;
9319: LD_VAR 0 1
9323: PPUSH
9324: CALL_OW 66
// exit ;
9328: POP
9329: POP
9330: GO 9336
// end ; end ; end ;
9332: GO 9137
9334: POP
9335: POP
// end ; end_of_file
9336: LD_VAR 0 5
9340: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9341: LD_EXP 41
9345: IFFALSE 9353
9347: PUSH
9348: CALL 9563 0 0
9352: AND
9353: IFFALSE 9361
9355: PUSH
9356: LD_OWVAR 4
9360: AND
9361: IFFALSE 9560
9363: GO 9365
9365: DISABLE
9366: LD_INT 0
9368: PPUSH
9369: PPUSH
// begin canWin := false ;
9370: LD_ADDR_VAR 0 2
9374: PUSH
9375: LD_INT 0
9377: ST_TO_ADDR
// if not HasPower ( your_side ) then
9378: LD_OWVAR 2
9382: PPUSH
9383: CALL 9605 0 1
9387: NOT
9388: IFFALSE 9399
// begin Multiplayer_Loose_Message ;
9390: CALL_OW 521
// enable ( mpLose ) ;
9394: LD_INT 102
9396: ENABLE_MARKED
// end else
9397: GO 9560
// begin canWin := true ;
9399: LD_ADDR_VAR 0 2
9403: PUSH
9404: LD_INT 1
9406: ST_TO_ADDR
// for i := 1 to 8 do
9407: LD_ADDR_VAR 0 1
9411: PUSH
9412: DOUBLE
9413: LD_INT 1
9415: DEC
9416: ST_TO_ADDR
9417: LD_INT 8
9419: PUSH
9420: FOR_TO
9421: IFFALSE 9546
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9423: LD_EXP 9
9427: PUSH
9428: LD_VAR 0 1
9432: ARRAY
9433: IFFALSE 9446
9435: PUSH
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 108
9445: AND
9446: IFFALSE 9460
9448: PUSH
9449: LD_VAR 0 1
9453: PUSH
9454: LD_OWVAR 2
9458: NONEQUAL
9459: AND
9460: IFFALSE 9544
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9462: LD_EXP 10
9466: PUSH
9467: LD_VAR 0 1
9471: ARRAY
9472: NOT
9473: IFTRUE 9521
9475: PUSH
9476: LD_EXP 10
9480: PUSH
9481: LD_VAR 0 1
9485: ARRAY
9486: PUSH
9487: LD_EXP 10
9491: PUSH
9492: LD_OWVAR 2
9496: ARRAY
9497: NONEQUAL
9498: IFFALSE 9520
9500: PUSH
9501: LD_OWVAR 2
9505: PPUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: CALL_OW 81
9515: PUSH
9516: LD_INT 1
9518: NONEQUAL
9519: AND
9520: OR
9521: IFFALSE 9544
// if HasPower ( i ) then
9523: LD_VAR 0 1
9527: PPUSH
9528: CALL 9605 0 1
9532: IFFALSE 9544
// begin canWin := false ;
9534: LD_ADDR_VAR 0 2
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// break ;
9542: GO 9546
// end ;
9544: GO 9420
9546: POP
9547: POP
// if canWin then
9548: LD_VAR 0 2
9552: IFFALSE 9559
// enable ( mpWin ) else
9554: LD_INT 101
9556: ENABLE_MARKED
9557: GO 9560
// enable ;
9559: ENABLE
// end ; end ;
9560: PPOPN 2
9562: END
// function CanWinLoose ; begin
9563: LD_INT 0
9565: PPUSH
// result := true ;
9566: LD_ADDR_VAR 0 1
9570: PUSH
9571: LD_INT 1
9573: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9574: CALL_OW 531
9578: IFFALSE 9590
9580: PUSH
9581: CALL_OW 519
9585: PUSH
9586: LD_INT 1
9588: GREATER
9589: AND
9590: IFFALSE 9600
// result := false ;
9592: LD_ADDR_VAR 0 1
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// end ;
9600: LD_VAR 0 1
9604: RET
// function HasPower ( i ) ; begin
9605: LD_INT 0
9607: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9608: LD_ADDR_VAR 0 2
9612: PUSH
9613: LD_INT 22
9615: PUSH
9616: LD_VAR 0 1
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 2
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 33
9640: PUSH
9641: LD_INT 3
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 33
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PPUSH
9668: CALL_OW 69
9672: ST_TO_ADDR
// end ; end_of_file
9673: LD_VAR 0 2
9677: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9678: LD_EXP 41
9682: IFFALSE 9725
9684: GO 9686
9686: DISABLE
9687: LD_INT 0
9689: PPUSH
// begin for i := 1 to 8 do
9690: LD_ADDR_VAR 0 1
9694: PUSH
9695: DOUBLE
9696: LD_INT 1
9698: DEC
9699: ST_TO_ADDR
9700: LD_INT 8
9702: PUSH
9703: FOR_TO
9704: IFFALSE 9723
// SetRestrict ( b_depot , i , state_disabled ) ;
9706: LD_INT 0
9708: PPUSH
9709: LD_VAR 0 1
9713: PPUSH
9714: LD_INT 0
9716: PPUSH
9717: CALL_OW 324
9721: GO 9703
9723: POP
9724: POP
// end ;
9725: PPOPN 1
9727: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9728: LD_EXP 41
9732: IFFALSE 9740
9734: PUSH
9735: CALL 9950 0 0
9739: AND
9740: IFFALSE 9748
9742: PUSH
9743: LD_OWVAR 4
9747: AND
9748: IFFALSE 9947
9750: GO 9752
9752: DISABLE
9753: LD_INT 0
9755: PPUSH
9756: PPUSH
// begin canWin := false ;
9757: LD_ADDR_VAR 0 2
9761: PUSH
9762: LD_INT 0
9764: ST_TO_ADDR
// if not HasPower ( your_side ) then
9765: LD_OWVAR 2
9769: PPUSH
9770: CALL 9992 0 1
9774: NOT
9775: IFFALSE 9786
// begin Multiplayer_Loose_Message ;
9777: CALL_OW 521
// enable ( mpLose ) ;
9781: LD_INT 102
9783: ENABLE_MARKED
// end else
9784: GO 9947
// begin canWin := true ;
9786: LD_ADDR_VAR 0 2
9790: PUSH
9791: LD_INT 1
9793: ST_TO_ADDR
// for i := 1 to 8 do
9794: LD_ADDR_VAR 0 1
9798: PUSH
9799: DOUBLE
9800: LD_INT 1
9802: DEC
9803: ST_TO_ADDR
9804: LD_INT 8
9806: PUSH
9807: FOR_TO
9808: IFFALSE 9933
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9810: LD_EXP 9
9814: PUSH
9815: LD_VAR 0 1
9819: ARRAY
9820: IFFALSE 9833
9822: PUSH
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL_OW 108
9832: AND
9833: IFFALSE 9847
9835: PUSH
9836: LD_VAR 0 1
9840: PUSH
9841: LD_OWVAR 2
9845: NONEQUAL
9846: AND
9847: IFFALSE 9931
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9849: LD_EXP 10
9853: PUSH
9854: LD_VAR 0 1
9858: ARRAY
9859: NOT
9860: IFTRUE 9908
9862: PUSH
9863: LD_EXP 10
9867: PUSH
9868: LD_VAR 0 1
9872: ARRAY
9873: PUSH
9874: LD_EXP 10
9878: PUSH
9879: LD_OWVAR 2
9883: ARRAY
9884: NONEQUAL
9885: IFFALSE 9907
9887: PUSH
9888: LD_OWVAR 2
9892: PPUSH
9893: LD_VAR 0 1
9897: PPUSH
9898: CALL_OW 81
9902: PUSH
9903: LD_INT 1
9905: NONEQUAL
9906: AND
9907: OR
9908: IFFALSE 9931
// if HasPower ( i ) then
9910: LD_VAR 0 1
9914: PPUSH
9915: CALL 9992 0 1
9919: IFFALSE 9931
// begin canWin := false ;
9921: LD_ADDR_VAR 0 2
9925: PUSH
9926: LD_INT 0
9928: ST_TO_ADDR
// break ;
9929: GO 9933
// end ;
9931: GO 9807
9933: POP
9934: POP
// if canWin then
9935: LD_VAR 0 2
9939: IFFALSE 9946
// enable ( mpWin ) else
9941: LD_INT 101
9943: ENABLE_MARKED
9944: GO 9947
// enable ;
9946: ENABLE
// end ; end ;
9947: PPOPN 2
9949: END
// function CanWinLoose ; begin
9950: LD_INT 0
9952: PPUSH
// result := true ;
9953: LD_ADDR_VAR 0 1
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9961: CALL_OW 531
9965: IFFALSE 9977
9967: PUSH
9968: CALL_OW 519
9972: PUSH
9973: LD_INT 1
9975: GREATER
9976: AND
9977: IFFALSE 9987
// result := false ;
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_INT 0
9986: ST_TO_ADDR
// end ;
9987: LD_VAR 0 1
9991: RET
// function HasPower ( i ) ; begin
9992: LD_INT 0
9994: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9995: LD_INT 22
9997: PUSH
9998: LD_VAR 0 1
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 30
10012: PUSH
10013: LD_INT 0
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 30
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PPUSH
10039: CALL_OW 69
10043: NOT
10044: IFFALSE 10048
// exit ;
10046: GO 10113
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10048: LD_ADDR_VAR 0 2
10052: PUSH
10053: LD_INT 22
10055: PUSH
10056: LD_VAR 0 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 2
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 33
10080: PUSH
10081: LD_INT 3
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 33
10090: PUSH
10091: LD_INT 5
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 69
10112: ST_TO_ADDR
// end ; end_of_file
10113: LD_VAR 0 2
10117: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10118: LD_INT 0
10120: PPUSH
10121: PPUSH
// if exist_mode then
10122: LD_VAR 0 2
10126: IFFALSE 10172
// begin unit := CreateCharacter ( prefix & ident ) ;
10128: LD_ADDR_VAR 0 5
10132: PUSH
10133: LD_VAR 0 3
10137: PUSH
10138: LD_VAR 0 1
10142: STR
10143: PPUSH
10144: CALL_OW 34
10148: ST_TO_ADDR
// if unit then
10149: LD_VAR 0 5
10153: IFFALSE 10170
// DeleteCharacters ( prefix & ident ) ;
10155: LD_VAR 0 3
10159: PUSH
10160: LD_VAR 0 1
10164: STR
10165: PPUSH
10166: CALL_OW 40
// end else
10170: GO 10187
// unit := NewCharacter ( ident ) ;
10172: LD_ADDR_VAR 0 5
10176: PUSH
10177: LD_VAR 0 1
10181: PPUSH
10182: CALL_OW 25
10186: ST_TO_ADDR
// result := unit ;
10187: LD_ADDR_VAR 0 4
10191: PUSH
10192: LD_VAR 0 5
10196: ST_TO_ADDR
// end ;
10197: LD_VAR 0 4
10201: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10202: LD_INT 0
10204: PPUSH
10205: PPUSH
// if exist_mode then
10206: LD_VAR 0 2
10210: IFFALSE 10235
// unit := CreateCharacter ( prefix & ident ) else
10212: LD_ADDR_VAR 0 5
10216: PUSH
10217: LD_VAR 0 3
10221: PUSH
10222: LD_VAR 0 1
10226: STR
10227: PPUSH
10228: CALL_OW 34
10232: ST_TO_ADDR
10233: GO 10250
// unit := NewCharacter ( ident ) ;
10235: LD_ADDR_VAR 0 5
10239: PUSH
10240: LD_VAR 0 1
10244: PPUSH
10245: CALL_OW 25
10249: ST_TO_ADDR
// result := unit ;
10250: LD_ADDR_VAR 0 4
10254: PUSH
10255: LD_VAR 0 5
10259: ST_TO_ADDR
// end ;
10260: LD_VAR 0 4
10264: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
// if not side or not nation then
10269: LD_VAR 0 1
10273: NOT
10274: IFTRUE 10283
10276: PUSH
10277: LD_VAR 0 2
10281: NOT
10282: OR
10283: IFFALSE 10287
// exit ;
10285: GO 11057
// case nation of nation_american :
10287: LD_VAR 0 2
10291: PUSH
10292: LD_INT 1
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10514
10300: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10301: LD_ADDR_VAR 0 4
10305: PUSH
10306: LD_INT 35
10308: PUSH
10309: LD_INT 45
10311: PUSH
10312: LD_INT 46
10314: PUSH
10315: LD_INT 47
10317: PUSH
10318: LD_INT 82
10320: PUSH
10321: LD_INT 83
10323: PUSH
10324: LD_INT 84
10326: PUSH
10327: LD_INT 85
10329: PUSH
10330: LD_INT 86
10332: PUSH
10333: LD_INT 1
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: LD_INT 6
10341: PUSH
10342: LD_INT 15
10344: PUSH
10345: LD_INT 16
10347: PUSH
10348: LD_INT 7
10350: PUSH
10351: LD_INT 12
10353: PUSH
10354: LD_INT 13
10356: PUSH
10357: LD_INT 10
10359: PUSH
10360: LD_INT 14
10362: PUSH
10363: LD_INT 20
10365: PUSH
10366: LD_INT 21
10368: PUSH
10369: LD_INT 22
10371: PUSH
10372: LD_INT 25
10374: PUSH
10375: LD_INT 32
10377: PUSH
10378: LD_INT 27
10380: PUSH
10381: LD_INT 36
10383: PUSH
10384: LD_INT 69
10386: PUSH
10387: LD_INT 39
10389: PUSH
10390: LD_INT 34
10392: PUSH
10393: LD_INT 40
10395: PUSH
10396: LD_INT 48
10398: PUSH
10399: LD_INT 49
10401: PUSH
10402: LD_INT 50
10404: PUSH
10405: LD_INT 51
10407: PUSH
10408: LD_INT 52
10410: PUSH
10411: LD_INT 53
10413: PUSH
10414: LD_INT 54
10416: PUSH
10417: LD_INT 55
10419: PUSH
10420: LD_INT 56
10422: PUSH
10423: LD_INT 57
10425: PUSH
10426: LD_INT 58
10428: PUSH
10429: LD_INT 59
10431: PUSH
10432: LD_INT 60
10434: PUSH
10435: LD_INT 61
10437: PUSH
10438: LD_INT 62
10440: PUSH
10441: LD_INT 80
10443: PUSH
10444: LD_INT 82
10446: PUSH
10447: LD_INT 83
10449: PUSH
10450: LD_INT 84
10452: PUSH
10453: LD_INT 85
10455: PUSH
10456: LD_INT 86
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: ST_TO_ADDR
10512: GO 10979
10514: LD_INT 2
10516: DOUBLE
10517: EQUAL
10518: IFTRUE 10522
10520: GO 10748
10522: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10523: LD_ADDR_VAR 0 4
10527: PUSH
10528: LD_INT 35
10530: PUSH
10531: LD_INT 45
10533: PUSH
10534: LD_INT 46
10536: PUSH
10537: LD_INT 47
10539: PUSH
10540: LD_INT 82
10542: PUSH
10543: LD_INT 83
10545: PUSH
10546: LD_INT 84
10548: PUSH
10549: LD_INT 85
10551: PUSH
10552: LD_INT 87
10554: PUSH
10555: LD_INT 70
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: LD_INT 11
10563: PUSH
10564: LD_INT 3
10566: PUSH
10567: LD_INT 4
10569: PUSH
10570: LD_INT 5
10572: PUSH
10573: LD_INT 6
10575: PUSH
10576: LD_INT 15
10578: PUSH
10579: LD_INT 18
10581: PUSH
10582: LD_INT 7
10584: PUSH
10585: LD_INT 17
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: LD_INT 20
10593: PUSH
10594: LD_INT 21
10596: PUSH
10597: LD_INT 22
10599: PUSH
10600: LD_INT 72
10602: PUSH
10603: LD_INT 26
10605: PUSH
10606: LD_INT 69
10608: PUSH
10609: LD_INT 39
10611: PUSH
10612: LD_INT 40
10614: PUSH
10615: LD_INT 41
10617: PUSH
10618: LD_INT 42
10620: PUSH
10621: LD_INT 43
10623: PUSH
10624: LD_INT 48
10626: PUSH
10627: LD_INT 49
10629: PUSH
10630: LD_INT 50
10632: PUSH
10633: LD_INT 51
10635: PUSH
10636: LD_INT 52
10638: PUSH
10639: LD_INT 53
10641: PUSH
10642: LD_INT 54
10644: PUSH
10645: LD_INT 55
10647: PUSH
10648: LD_INT 56
10650: PUSH
10651: LD_INT 60
10653: PUSH
10654: LD_INT 61
10656: PUSH
10657: LD_INT 62
10659: PUSH
10660: LD_INT 66
10662: PUSH
10663: LD_INT 67
10665: PUSH
10666: LD_INT 68
10668: PUSH
10669: LD_INT 81
10671: PUSH
10672: LD_INT 82
10674: PUSH
10675: LD_INT 83
10677: PUSH
10678: LD_INT 84
10680: PUSH
10681: LD_INT 85
10683: PUSH
10684: LD_INT 87
10686: PUSH
10687: LD_INT 88
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: ST_TO_ADDR
10746: GO 10979
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10978
10756: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10757: LD_ADDR_VAR 0 4
10761: PUSH
10762: LD_INT 46
10764: PUSH
10765: LD_INT 47
10767: PUSH
10768: LD_INT 1
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 82
10776: PUSH
10777: LD_INT 83
10779: PUSH
10780: LD_INT 84
10782: PUSH
10783: LD_INT 85
10785: PUSH
10786: LD_INT 86
10788: PUSH
10789: LD_INT 11
10791: PUSH
10792: LD_INT 9
10794: PUSH
10795: LD_INT 20
10797: PUSH
10798: LD_INT 19
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: LD_INT 24
10806: PUSH
10807: LD_INT 22
10809: PUSH
10810: LD_INT 25
10812: PUSH
10813: LD_INT 28
10815: PUSH
10816: LD_INT 29
10818: PUSH
10819: LD_INT 30
10821: PUSH
10822: LD_INT 31
10824: PUSH
10825: LD_INT 37
10827: PUSH
10828: LD_INT 38
10830: PUSH
10831: LD_INT 32
10833: PUSH
10834: LD_INT 27
10836: PUSH
10837: LD_INT 33
10839: PUSH
10840: LD_INT 69
10842: PUSH
10843: LD_INT 39
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 40
10851: PUSH
10852: LD_INT 71
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 44
10860: PUSH
10861: LD_INT 48
10863: PUSH
10864: LD_INT 49
10866: PUSH
10867: LD_INT 50
10869: PUSH
10870: LD_INT 51
10872: PUSH
10873: LD_INT 52
10875: PUSH
10876: LD_INT 53
10878: PUSH
10879: LD_INT 54
10881: PUSH
10882: LD_INT 55
10884: PUSH
10885: LD_INT 56
10887: PUSH
10888: LD_INT 57
10890: PUSH
10891: LD_INT 58
10893: PUSH
10894: LD_INT 59
10896: PUSH
10897: LD_INT 63
10899: PUSH
10900: LD_INT 64
10902: PUSH
10903: LD_INT 65
10905: PUSH
10906: LD_INT 82
10908: PUSH
10909: LD_INT 83
10911: PUSH
10912: LD_INT 84
10914: PUSH
10915: LD_INT 85
10917: PUSH
10918: LD_INT 86
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: ST_TO_ADDR
10976: GO 10979
10978: POP
// if state > - 1 and state < 3 then
10979: LD_VAR 0 3
10983: PUSH
10984: LD_INT 1
10986: NEG
10987: GREATER
10988: IFFALSE 11000
10990: PUSH
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 3
10998: LESS
10999: AND
11000: IFFALSE 11057
// for i in result do
11002: LD_ADDR_VAR 0 5
11006: PUSH
11007: LD_VAR 0 4
11011: PUSH
11012: FOR_IN
11013: IFFALSE 11055
// if GetTech ( i , side ) <> state then
11015: LD_VAR 0 5
11019: PPUSH
11020: LD_VAR 0 1
11024: PPUSH
11025: CALL_OW 321
11029: PUSH
11030: LD_VAR 0 3
11034: NONEQUAL
11035: IFFALSE 11053
// result := result diff i ;
11037: LD_ADDR_VAR 0 4
11041: PUSH
11042: LD_VAR 0 4
11046: PUSH
11047: LD_VAR 0 5
11051: DIFF
11052: ST_TO_ADDR
11053: GO 11012
11055: POP
11056: POP
// end ;
11057: LD_VAR 0 4
11061: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11062: LD_INT 0
11064: PPUSH
11065: PPUSH
11066: PPUSH
// result := true ;
11067: LD_ADDR_VAR 0 3
11071: PUSH
11072: LD_INT 1
11074: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11075: LD_ADDR_VAR 0 5
11079: PUSH
11080: LD_VAR 0 2
11084: PPUSH
11085: CALL_OW 480
11089: ST_TO_ADDR
// if not tmp then
11090: LD_VAR 0 5
11094: NOT
11095: IFFALSE 11099
// exit ;
11097: GO 11148
// for i in tmp do
11099: LD_ADDR_VAR 0 4
11103: PUSH
11104: LD_VAR 0 5
11108: PUSH
11109: FOR_IN
11110: IFFALSE 11146
// if GetTech ( i , side ) <> state_researched then
11112: LD_VAR 0 4
11116: PPUSH
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 321
11126: PUSH
11127: LD_INT 2
11129: NONEQUAL
11130: IFFALSE 11144
// begin result := false ;
11132: LD_ADDR_VAR 0 3
11136: PUSH
11137: LD_INT 0
11139: ST_TO_ADDR
// exit ;
11140: POP
11141: POP
11142: GO 11148
// end ;
11144: GO 11109
11146: POP
11147: POP
// end ;
11148: LD_VAR 0 3
11152: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11153: LD_INT 0
11155: PPUSH
11156: PPUSH
11157: PPUSH
11158: PPUSH
11159: PPUSH
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
11167: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11168: LD_VAR 0 1
11172: NOT
11173: IFTRUE 11190
11175: PUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: CALL_OW 257
11185: PUSH
11186: LD_INT 9
11188: NONEQUAL
11189: OR
11190: IFFALSE 11194
// exit ;
11192: GO 11773
// side := GetSide ( unit ) ;
11194: LD_ADDR_VAR 0 9
11198: PUSH
11199: LD_VAR 0 1
11203: PPUSH
11204: CALL_OW 255
11208: ST_TO_ADDR
// tech_space := tech_spacanom ;
11209: LD_ADDR_VAR 0 12
11213: PUSH
11214: LD_INT 29
11216: ST_TO_ADDR
// tech_time := tech_taurad ;
11217: LD_ADDR_VAR 0 13
11221: PUSH
11222: LD_INT 28
11224: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11225: LD_ADDR_VAR 0 11
11229: PUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 310
11239: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11240: LD_VAR 0 11
11244: PPUSH
11245: CALL_OW 247
11249: PUSH
11250: LD_INT 2
11252: EQUAL
11253: IFFALSE 11257
// exit ;
11255: GO 11773
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11257: LD_ADDR_VAR 0 8
11261: PUSH
11262: LD_INT 81
11264: PUSH
11265: LD_VAR 0 9
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 3
11276: PUSH
11277: LD_INT 21
11279: PUSH
11280: LD_INT 3
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PPUSH
11295: CALL_OW 69
11299: ST_TO_ADDR
// if not tmp then
11300: LD_VAR 0 8
11304: NOT
11305: IFFALSE 11309
// exit ;
11307: GO 11773
// if in_unit then
11309: LD_VAR 0 11
11313: IFFALSE 11337
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11315: LD_ADDR_VAR 0 10
11319: PUSH
11320: LD_VAR 0 8
11324: PPUSH
11325: LD_VAR 0 11
11329: PPUSH
11330: CALL_OW 74
11334: ST_TO_ADDR
11335: GO 11357
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11337: LD_ADDR_VAR 0 10
11341: PUSH
11342: LD_VAR 0 8
11346: PPUSH
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 74
11356: ST_TO_ADDR
// if not enemy then
11357: LD_VAR 0 10
11361: NOT
11362: IFFALSE 11366
// exit ;
11364: GO 11773
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11366: LD_VAR 0 11
11370: IFFALSE 11392
11372: PUSH
11373: LD_VAR 0 11
11377: PPUSH
11378: LD_VAR 0 10
11382: PPUSH
11383: CALL_OW 296
11387: PUSH
11388: LD_INT 13
11390: GREATER
11391: AND
11392: IFTRUE 11414
11394: PUSH
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_VAR 0 10
11404: PPUSH
11405: CALL_OW 296
11409: PUSH
11410: LD_INT 12
11412: GREATER
11413: OR
11414: IFFALSE 11418
// exit ;
11416: GO 11773
// missile := [ 1 ] ;
11418: LD_ADDR_VAR 0 14
11422: PUSH
11423: LD_INT 1
11425: PUSH
11426: EMPTY
11427: LIST
11428: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11429: LD_VAR 0 9
11433: PPUSH
11434: LD_VAR 0 12
11438: PPUSH
11439: CALL_OW 325
11443: IFFALSE 11472
// missile := Replace ( missile , missile + 1 , 2 ) ;
11445: LD_ADDR_VAR 0 14
11449: PUSH
11450: LD_VAR 0 14
11454: PPUSH
11455: LD_VAR 0 14
11459: PUSH
11460: LD_INT 1
11462: PLUS
11463: PPUSH
11464: LD_INT 2
11466: PPUSH
11467: CALL_OW 1
11471: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11472: LD_VAR 0 9
11476: PPUSH
11477: LD_VAR 0 13
11481: PPUSH
11482: CALL_OW 325
11486: IFFALSE 11510
11488: PUSH
11489: LD_VAR 0 10
11493: PPUSH
11494: CALL_OW 255
11498: PPUSH
11499: LD_VAR 0 13
11503: PPUSH
11504: CALL_OW 325
11508: NOT
11509: AND
11510: IFFALSE 11539
// missile := Replace ( missile , missile + 1 , 3 ) ;
11512: LD_ADDR_VAR 0 14
11516: PUSH
11517: LD_VAR 0 14
11521: PPUSH
11522: LD_VAR 0 14
11526: PUSH
11527: LD_INT 1
11529: PLUS
11530: PPUSH
11531: LD_INT 3
11533: PPUSH
11534: CALL_OW 1
11538: ST_TO_ADDR
// if missile < 2 then
11539: LD_VAR 0 14
11543: PUSH
11544: LD_INT 2
11546: LESS
11547: IFFALSE 11551
// exit ;
11549: GO 11773
// x := GetX ( enemy ) ;
11551: LD_ADDR_VAR 0 4
11555: PUSH
11556: LD_VAR 0 10
11560: PPUSH
11561: CALL_OW 250
11565: ST_TO_ADDR
// y := GetY ( enemy ) ;
11566: LD_ADDR_VAR 0 5
11570: PUSH
11571: LD_VAR 0 10
11575: PPUSH
11576: CALL_OW 251
11580: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11581: LD_ADDR_VAR 0 6
11585: PUSH
11586: LD_VAR 0 4
11590: PUSH
11591: LD_INT 1
11593: NEG
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 12
11602: PLUS
11603: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11604: LD_ADDR_VAR 0 7
11608: PUSH
11609: LD_VAR 0 5
11613: PUSH
11614: LD_INT 1
11616: NEG
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 12
11625: PLUS
11626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11627: LD_VAR 0 6
11631: PPUSH
11632: LD_VAR 0 7
11636: PPUSH
11637: CALL_OW 488
11641: NOT
11642: IFFALSE 11664
// begin _x := x ;
11644: LD_ADDR_VAR 0 6
11648: PUSH
11649: LD_VAR 0 4
11653: ST_TO_ADDR
// _y := y ;
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_VAR 0 5
11663: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11664: LD_ADDR_VAR 0 3
11668: PUSH
11669: LD_INT 1
11671: PPUSH
11672: LD_VAR 0 14
11676: PPUSH
11677: CALL_OW 12
11681: ST_TO_ADDR
// case i of 1 :
11682: LD_VAR 0 3
11686: PUSH
11687: LD_INT 1
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11712
11695: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11696: LD_VAR 0 1
11700: PPUSH
11701: LD_VAR 0 10
11705: PPUSH
11706: CALL_OW 115
11710: GO 11773
11712: LD_INT 2
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11742
11720: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11721: LD_VAR 0 1
11725: PPUSH
11726: LD_VAR 0 6
11730: PPUSH
11731: LD_VAR 0 7
11735: PPUSH
11736: CALL_OW 153
11740: GO 11773
11742: LD_INT 3
11744: DOUBLE
11745: EQUAL
11746: IFTRUE 11750
11748: GO 11772
11750: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11751: LD_VAR 0 1
11755: PPUSH
11756: LD_VAR 0 6
11760: PPUSH
11761: LD_VAR 0 7
11765: PPUSH
11766: CALL_OW 154
11770: GO 11773
11772: POP
// end ;
11773: LD_VAR 0 2
11777: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11778: LD_INT 0
11780: PPUSH
11781: PPUSH
11782: PPUSH
11783: PPUSH
11784: PPUSH
11785: PPUSH
// if not unit or not building then
11786: LD_VAR 0 1
11790: NOT
11791: IFTRUE 11800
11793: PUSH
11794: LD_VAR 0 2
11798: NOT
11799: OR
11800: IFFALSE 11804
// exit ;
11802: GO 11962
// x := GetX ( building ) ;
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_VAR 0 2
11813: PPUSH
11814: CALL_OW 250
11818: ST_TO_ADDR
// y := GetY ( building ) ;
11819: LD_ADDR_VAR 0 6
11823: PUSH
11824: LD_VAR 0 2
11828: PPUSH
11829: CALL_OW 251
11833: ST_TO_ADDR
// for i := 0 to 5 do
11834: LD_ADDR_VAR 0 4
11838: PUSH
11839: DOUBLE
11840: LD_INT 0
11842: DEC
11843: ST_TO_ADDR
11844: LD_INT 5
11846: PUSH
11847: FOR_TO
11848: IFFALSE 11960
// begin _x := ShiftX ( x , i , 3 ) ;
11850: LD_ADDR_VAR 0 7
11854: PUSH
11855: LD_VAR 0 5
11859: PPUSH
11860: LD_VAR 0 4
11864: PPUSH
11865: LD_INT 3
11867: PPUSH
11868: CALL_OW 272
11872: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11873: LD_ADDR_VAR 0 8
11877: PUSH
11878: LD_VAR 0 6
11882: PPUSH
11883: LD_VAR 0 4
11887: PPUSH
11888: LD_INT 3
11890: PPUSH
11891: CALL_OW 273
11895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11896: LD_VAR 0 7
11900: PPUSH
11901: LD_VAR 0 8
11905: PPUSH
11906: CALL_OW 488
11910: NOT
11911: IFFALSE 11915
// continue ;
11913: GO 11847
// if HexInfo ( _x , _y ) = 0 then
11915: LD_VAR 0 7
11919: PPUSH
11920: LD_VAR 0 8
11924: PPUSH
11925: CALL_OW 428
11929: PUSH
11930: LD_INT 0
11932: EQUAL
11933: IFFALSE 11958
// begin ComMoveXY ( unit , _x , _y ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_VAR 0 7
11944: PPUSH
11945: LD_VAR 0 8
11949: PPUSH
11950: CALL_OW 111
// exit ;
11954: POP
11955: POP
11956: GO 11962
// end ; end ;
11958: GO 11847
11960: POP
11961: POP
// end ;
11962: LD_VAR 0 3
11966: RET
// export function ScanBase ( side , base_area ) ; begin
11967: LD_INT 0
11969: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11970: LD_ADDR_VAR 0 3
11974: PUSH
11975: LD_VAR 0 2
11979: PPUSH
11980: LD_INT 81
11982: PUSH
11983: LD_VAR 0 1
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PPUSH
11992: CALL_OW 70
11996: ST_TO_ADDR
// end ;
11997: LD_VAR 0 3
12001: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12002: LD_INT 0
12004: PPUSH
12005: PPUSH
12006: PPUSH
12007: PPUSH
// result := false ;
12008: LD_ADDR_VAR 0 2
12012: PUSH
12013: LD_INT 0
12015: ST_TO_ADDR
// side := GetSide ( unit ) ;
12016: LD_ADDR_VAR 0 3
12020: PUSH
12021: LD_VAR 0 1
12025: PPUSH
12026: CALL_OW 255
12030: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12031: LD_ADDR_VAR 0 4
12035: PUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 248
12045: ST_TO_ADDR
// case nat of 1 :
12046: LD_VAR 0 4
12050: PUSH
12051: LD_INT 1
12053: DOUBLE
12054: EQUAL
12055: IFTRUE 12059
12057: GO 12070
12059: POP
// tech := tech_lassight ; 2 :
12060: LD_ADDR_VAR 0 5
12064: PUSH
12065: LD_INT 12
12067: ST_TO_ADDR
12068: GO 12109
12070: LD_INT 2
12072: DOUBLE
12073: EQUAL
12074: IFTRUE 12078
12076: GO 12089
12078: POP
// tech := tech_mortar ; 3 :
12079: LD_ADDR_VAR 0 5
12083: PUSH
12084: LD_INT 41
12086: ST_TO_ADDR
12087: GO 12109
12089: LD_INT 3
12091: DOUBLE
12092: EQUAL
12093: IFTRUE 12097
12095: GO 12108
12097: POP
// tech := tech_bazooka ; end ;
12098: LD_ADDR_VAR 0 5
12102: PUSH
12103: LD_INT 44
12105: ST_TO_ADDR
12106: GO 12109
12108: POP
// if Researched ( side , tech ) then
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_VAR 0 5
12118: PPUSH
12119: CALL_OW 325
12123: IFFALSE 12150
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_INT 5
12132: PUSH
12133: LD_INT 8
12135: PUSH
12136: LD_INT 9
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: LD_VAR 0 4
12148: ARRAY
12149: ST_TO_ADDR
// end ;
12150: LD_VAR 0 2
12154: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
12159: PPUSH
// if not mines then
12160: LD_VAR 0 2
12164: NOT
12165: IFFALSE 12169
// exit ;
12167: GO 12313
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: LD_INT 81
12176: PUSH
12177: LD_VAR 0 1
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 3
12188: PUSH
12189: LD_INT 21
12191: PUSH
12192: LD_INT 3
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PPUSH
12207: CALL_OW 69
12211: ST_TO_ADDR
// for i in mines do
12212: LD_ADDR_VAR 0 4
12216: PUSH
12217: LD_VAR 0 2
12221: PUSH
12222: FOR_IN
12223: IFFALSE 12311
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12225: LD_VAR 0 4
12229: PUSH
12230: LD_INT 1
12232: ARRAY
12233: PPUSH
12234: LD_VAR 0 4
12238: PUSH
12239: LD_INT 2
12241: ARRAY
12242: PPUSH
12243: CALL_OW 458
12247: NOT
12248: IFFALSE 12252
// continue ;
12250: GO 12222
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12252: LD_VAR 0 4
12256: PUSH
12257: LD_INT 1
12259: ARRAY
12260: PPUSH
12261: LD_VAR 0 4
12265: PUSH
12266: LD_INT 2
12268: ARRAY
12269: PPUSH
12270: CALL_OW 428
12274: PUSH
12275: LD_VAR 0 5
12279: IN
12280: IFFALSE 12309
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12282: LD_VAR 0 4
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_VAR 0 4
12295: PUSH
12296: LD_INT 2
12298: ARRAY
12299: PPUSH
12300: LD_VAR 0 1
12304: PPUSH
12305: CALL_OW 456
// end ;
12309: GO 12222
12311: POP
12312: POP
// end ;
12313: LD_VAR 0 3
12317: RET
// export function Count ( array ) ; begin
12318: LD_INT 0
12320: PPUSH
// result := array + 0 ;
12321: LD_ADDR_VAR 0 2
12325: PUSH
12326: LD_VAR 0 1
12330: PUSH
12331: LD_INT 0
12333: PLUS
12334: ST_TO_ADDR
// end ;
12335: LD_VAR 0 2
12339: RET
// export function IsEmpty ( building ) ; begin
12340: LD_INT 0
12342: PPUSH
// if not building then
12343: LD_VAR 0 1
12347: NOT
12348: IFFALSE 12352
// exit ;
12350: GO 12395
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12352: LD_ADDR_VAR 0 2
12356: PUSH
12357: LD_VAR 0 1
12361: PUSH
12362: LD_INT 22
12364: PUSH
12365: LD_VAR 0 1
12369: PPUSH
12370: CALL_OW 255
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 58
12381: PUSH
12382: EMPTY
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 69
12393: IN
12394: ST_TO_ADDR
// end ;
12395: LD_VAR 0 2
12399: RET
// export function IsNotFull ( building ) ; var places ; begin
12400: LD_INT 0
12402: PPUSH
12403: PPUSH
// if not building then
12404: LD_VAR 0 1
12408: NOT
12409: IFFALSE 12413
// exit ;
12411: GO 12441
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12413: LD_ADDR_VAR 0 2
12417: PUSH
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_INT 3
12425: PUSH
12426: LD_INT 62
12428: PUSH
12429: EMPTY
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 72
12440: ST_TO_ADDR
// end ;
12441: LD_VAR 0 2
12445: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
12450: PPUSH
12451: PPUSH
// tmp := [ ] ;
12452: LD_ADDR_VAR 0 3
12456: PUSH
12457: EMPTY
12458: ST_TO_ADDR
// list := [ ] ;
12459: LD_ADDR_VAR 0 5
12463: PUSH
12464: EMPTY
12465: ST_TO_ADDR
// for i = 16 to 25 do
12466: LD_ADDR_VAR 0 4
12470: PUSH
12471: DOUBLE
12472: LD_INT 16
12474: DEC
12475: ST_TO_ADDR
12476: LD_INT 25
12478: PUSH
12479: FOR_TO
12480: IFFALSE 12553
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12482: LD_ADDR_VAR 0 3
12486: PUSH
12487: LD_VAR 0 3
12491: PUSH
12492: LD_INT 22
12494: PUSH
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 255
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 91
12511: PUSH
12512: LD_VAR 0 1
12516: PUSH
12517: LD_INT 6
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 30
12527: PUSH
12528: LD_VAR 0 4
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: PPUSH
12545: CALL_OW 69
12549: ADD
12550: ST_TO_ADDR
12551: GO 12479
12553: POP
12554: POP
// for i = 1 to tmp do
12555: LD_ADDR_VAR 0 4
12559: PUSH
12560: DOUBLE
12561: LD_INT 1
12563: DEC
12564: ST_TO_ADDR
12565: LD_VAR 0 3
12569: PUSH
12570: FOR_TO
12571: IFFALSE 12659
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12573: LD_ADDR_VAR 0 5
12577: PUSH
12578: LD_VAR 0 5
12582: PUSH
12583: LD_VAR 0 3
12587: PUSH
12588: LD_VAR 0 4
12592: ARRAY
12593: PPUSH
12594: CALL_OW 266
12598: PUSH
12599: LD_VAR 0 3
12603: PUSH
12604: LD_VAR 0 4
12608: ARRAY
12609: PPUSH
12610: CALL_OW 250
12614: PUSH
12615: LD_VAR 0 3
12619: PUSH
12620: LD_VAR 0 4
12624: ARRAY
12625: PPUSH
12626: CALL_OW 251
12630: PUSH
12631: LD_VAR 0 3
12635: PUSH
12636: LD_VAR 0 4
12640: ARRAY
12641: PPUSH
12642: CALL_OW 254
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: ADD
12656: ST_TO_ADDR
12657: GO 12570
12659: POP
12660: POP
// result := list ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_VAR 0 5
12670: ST_TO_ADDR
// end ;
12671: LD_VAR 0 2
12675: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12676: LD_INT 0
12678: PPUSH
12679: PPUSH
12680: PPUSH
12681: PPUSH
12682: PPUSH
12683: PPUSH
12684: PPUSH
// if not factory then
12685: LD_VAR 0 1
12689: NOT
12690: IFFALSE 12694
// exit ;
12692: GO 13297
// if control = control_apeman then
12694: LD_VAR 0 4
12698: PUSH
12699: LD_INT 5
12701: EQUAL
12702: IFFALSE 12811
// begin tmp := UnitsInside ( factory ) ;
12704: LD_ADDR_VAR 0 8
12708: PUSH
12709: LD_VAR 0 1
12713: PPUSH
12714: CALL_OW 313
12718: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12719: LD_VAR 0 8
12723: PPUSH
12724: LD_INT 25
12726: PUSH
12727: LD_INT 12
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 72
12738: NOT
12739: IFFALSE 12749
// control := control_manual ;
12741: LD_ADDR_VAR 0 4
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12749: LD_ADDR_VAR 0 8
12753: PUSH
12754: LD_VAR 0 1
12758: PPUSH
12759: CALL 12446 0 1
12763: ST_TO_ADDR
// if tmp then
12764: LD_VAR 0 8
12768: IFFALSE 12811
// begin for i in tmp do
12770: LD_ADDR_VAR 0 7
12774: PUSH
12775: LD_VAR 0 8
12779: PUSH
12780: FOR_IN
12781: IFFALSE 12809
// if i [ 1 ] = b_ext_radio then
12783: LD_VAR 0 7
12787: PUSH
12788: LD_INT 1
12790: ARRAY
12791: PUSH
12792: LD_INT 22
12794: EQUAL
12795: IFFALSE 12807
// begin control := control_remote ;
12797: LD_ADDR_VAR 0 4
12801: PUSH
12802: LD_INT 2
12804: ST_TO_ADDR
// break ;
12805: GO 12809
// end ;
12807: GO 12780
12809: POP
12810: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12811: LD_VAR 0 1
12815: PPUSH
12816: LD_VAR 0 2
12820: PPUSH
12821: LD_VAR 0 3
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 448
12840: IFFALSE 12875
// begin result := [ chassis , engine , control , weapon ] ;
12842: LD_ADDR_VAR 0 6
12846: PUSH
12847: LD_VAR 0 2
12851: PUSH
12852: LD_VAR 0 3
12856: PUSH
12857: LD_VAR 0 4
12861: PUSH
12862: LD_VAR 0 5
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: ST_TO_ADDR
// exit ;
12873: GO 13297
// end ; _chassis := AvailableChassisList ( factory ) ;
12875: LD_ADDR_VAR 0 9
12879: PUSH
12880: LD_VAR 0 1
12884: PPUSH
12885: CALL_OW 475
12889: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12890: LD_ADDR_VAR 0 11
12894: PUSH
12895: LD_VAR 0 1
12899: PPUSH
12900: CALL_OW 476
12904: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12905: LD_ADDR_VAR 0 12
12909: PUSH
12910: LD_VAR 0 1
12914: PPUSH
12915: CALL_OW 477
12919: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12920: LD_ADDR_VAR 0 10
12924: PUSH
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 478
12934: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12935: LD_VAR 0 9
12939: NOT
12940: IFTRUE 12949
12942: PUSH
12943: LD_VAR 0 11
12947: NOT
12948: OR
12949: IFTRUE 12958
12951: PUSH
12952: LD_VAR 0 12
12956: NOT
12957: OR
12958: IFTRUE 12967
12960: PUSH
12961: LD_VAR 0 10
12965: NOT
12966: OR
12967: IFFALSE 13002
// begin result := [ chassis , engine , control , weapon ] ;
12969: LD_ADDR_VAR 0 6
12973: PUSH
12974: LD_VAR 0 2
12978: PUSH
12979: LD_VAR 0 3
12983: PUSH
12984: LD_VAR 0 4
12988: PUSH
12989: LD_VAR 0 5
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: ST_TO_ADDR
// exit ;
13000: GO 13297
// end ; if not chassis in _chassis then
13002: LD_VAR 0 2
13006: PUSH
13007: LD_VAR 0 9
13011: IN
13012: NOT
13013: IFFALSE 13039
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13015: LD_ADDR_VAR 0 2
13019: PUSH
13020: LD_VAR 0 9
13024: PUSH
13025: LD_INT 1
13027: PPUSH
13028: LD_VAR 0 9
13032: PPUSH
13033: CALL_OW 12
13037: ARRAY
13038: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13039: LD_VAR 0 2
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: CALL 13302 0 2
13053: NOT
13054: IFFALSE 13115
// repeat engine := _engine [ 1 ] ;
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_VAR 0 11
13065: PUSH
13066: LD_INT 1
13068: ARRAY
13069: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13070: LD_ADDR_VAR 0 11
13074: PUSH
13075: LD_VAR 0 11
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 3
13087: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13088: LD_VAR 0 2
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: CALL 13302 0 2
13102: IFTRUE 13113
13104: PUSH
13105: LD_VAR 0 11
13109: PUSH
13110: EMPTY
13111: EQUAL
13112: OR
13113: IFFALSE 13056
// if not control in _control then
13115: LD_VAR 0 4
13119: PUSH
13120: LD_VAR 0 12
13124: IN
13125: NOT
13126: IFFALSE 13152
// control := _control [ rand ( 1 , _control ) ] ;
13128: LD_ADDR_VAR 0 4
13132: PUSH
13133: LD_VAR 0 12
13137: PUSH
13138: LD_INT 1
13140: PPUSH
13141: LD_VAR 0 12
13145: PPUSH
13146: CALL_OW 12
13150: ARRAY
13151: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13152: LD_VAR 0 2
13156: PPUSH
13157: LD_VAR 0 5
13161: PPUSH
13162: CALL 13524 0 2
13166: NOT
13167: IFFALSE 13228
// repeat weapon := _weapon [ 1 ] ;
13169: LD_ADDR_VAR 0 5
13173: PUSH
13174: LD_VAR 0 10
13178: PUSH
13179: LD_INT 1
13181: ARRAY
13182: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13183: LD_ADDR_VAR 0 10
13187: PUSH
13188: LD_VAR 0 10
13192: PPUSH
13193: LD_INT 1
13195: PPUSH
13196: CALL_OW 3
13200: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13201: LD_VAR 0 2
13205: PPUSH
13206: LD_VAR 0 5
13210: PPUSH
13211: CALL 13524 0 2
13215: IFTRUE 13226
13217: PUSH
13218: LD_VAR 0 10
13222: PUSH
13223: EMPTY
13224: EQUAL
13225: OR
13226: IFFALSE 13169
// result := [ ] ;
13228: LD_ADDR_VAR 0 6
13232: PUSH
13233: EMPTY
13234: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_VAR 0 2
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_VAR 0 4
13254: PPUSH
13255: LD_VAR 0 5
13259: PPUSH
13260: CALL_OW 448
13264: IFFALSE 13297
// result := [ chassis , engine , control , weapon ] ;
13266: LD_ADDR_VAR 0 6
13270: PUSH
13271: LD_VAR 0 2
13275: PUSH
13276: LD_VAR 0 3
13280: PUSH
13281: LD_VAR 0 4
13285: PUSH
13286: LD_VAR 0 5
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: ST_TO_ADDR
// end ;
13297: LD_VAR 0 6
13301: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13302: LD_INT 0
13304: PPUSH
// if not chassis or not engine then
13305: LD_VAR 0 1
13309: NOT
13310: IFTRUE 13319
13312: PUSH
13313: LD_VAR 0 2
13317: NOT
13318: OR
13319: IFFALSE 13323
// exit ;
13321: GO 13519
// case engine of engine_solar :
13323: LD_VAR 0 2
13327: PUSH
13328: LD_INT 2
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13374
13336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13337: LD_ADDR_VAR 0 3
13341: PUSH
13342: LD_INT 11
13344: PUSH
13345: LD_INT 12
13347: PUSH
13348: LD_INT 13
13350: PUSH
13351: LD_INT 14
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: ST_TO_ADDR
13372: GO 13503
13374: LD_INT 1
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13444
13382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_INT 11
13390: PUSH
13391: LD_INT 12
13393: PUSH
13394: LD_INT 13
13396: PUSH
13397: LD_INT 14
13399: PUSH
13400: LD_INT 1
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_INT 3
13408: PUSH
13409: LD_INT 4
13411: PUSH
13412: LD_INT 5
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 23
13420: PUSH
13421: LD_INT 22
13423: PUSH
13424: LD_INT 24
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: ST_TO_ADDR
13442: GO 13503
13444: LD_INT 3
13446: DOUBLE
13447: EQUAL
13448: IFTRUE 13452
13450: GO 13502
13452: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13453: LD_ADDR_VAR 0 3
13457: PUSH
13458: LD_INT 13
13460: PUSH
13461: LD_INT 14
13463: PUSH
13464: LD_INT 2
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: LD_INT 4
13472: PUSH
13473: LD_INT 5
13475: PUSH
13476: LD_INT 21
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_INT 23
13484: PUSH
13485: LD_INT 24
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: ST_TO_ADDR
13500: GO 13503
13502: POP
// result := ( chassis in result ) ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_VAR 0 1
13512: PUSH
13513: LD_VAR 0 3
13517: IN
13518: ST_TO_ADDR
// end ;
13519: LD_VAR 0 3
13523: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13524: LD_INT 0
13526: PPUSH
// if not chassis or not weapon then
13527: LD_VAR 0 1
13531: NOT
13532: IFTRUE 13541
13534: PUSH
13535: LD_VAR 0 2
13539: NOT
13540: OR
13541: IFFALSE 13545
// exit ;
13543: GO 14605
// case weapon of us_machine_gun :
13545: LD_VAR 0 2
13549: PUSH
13550: LD_INT 2
13552: DOUBLE
13553: EQUAL
13554: IFTRUE 13558
13556: GO 13588
13558: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13559: LD_ADDR_VAR 0 3
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: LD_INT 5
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: ST_TO_ADDR
13586: GO 14589
13588: LD_INT 3
13590: DOUBLE
13591: EQUAL
13592: IFTRUE 13596
13594: GO 13626
13596: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13597: LD_ADDR_VAR 0 3
13601: PUSH
13602: LD_INT 1
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 3
13610: PUSH
13611: LD_INT 4
13613: PUSH
13614: LD_INT 5
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: ST_TO_ADDR
13624: GO 14589
13626: LD_INT 11
13628: DOUBLE
13629: EQUAL
13630: IFTRUE 13634
13632: GO 13664
13634: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13635: LD_ADDR_VAR 0 3
13639: PUSH
13640: LD_INT 1
13642: PUSH
13643: LD_INT 2
13645: PUSH
13646: LD_INT 3
13648: PUSH
13649: LD_INT 4
13651: PUSH
13652: LD_INT 5
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: ST_TO_ADDR
13662: GO 14589
13664: LD_INT 4
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13672
13670: GO 13698
13672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13673: LD_ADDR_VAR 0 3
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: LD_INT 3
13683: PUSH
13684: LD_INT 4
13686: PUSH
13687: LD_INT 5
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 14589
13698: LD_INT 5
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13732
13706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: LD_INT 4
13720: PUSH
13721: LD_INT 5
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
13730: GO 14589
13732: LD_INT 9
13734: DOUBLE
13735: EQUAL
13736: IFTRUE 13740
13738: GO 13766
13740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: LD_INT 3
13751: PUSH
13752: LD_INT 4
13754: PUSH
13755: LD_INT 5
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: ST_TO_ADDR
13764: GO 14589
13766: LD_INT 7
13768: DOUBLE
13769: EQUAL
13770: IFTRUE 13774
13772: GO 13800
13774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_INT 2
13782: PUSH
13783: LD_INT 3
13785: PUSH
13786: LD_INT 4
13788: PUSH
13789: LD_INT 5
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 14589
13800: LD_INT 12
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13834
13808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 2
13816: PUSH
13817: LD_INT 3
13819: PUSH
13820: LD_INT 4
13822: PUSH
13823: LD_INT 5
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 14589
13834: LD_INT 13
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13868
13842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13843: LD_ADDR_VAR 0 3
13847: PUSH
13848: LD_INT 2
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: LD_INT 4
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: ST_TO_ADDR
13866: GO 14589
13868: LD_INT 14
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13894
13876: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13877: LD_ADDR_VAR 0 3
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: LD_INT 5
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: ST_TO_ADDR
13892: GO 14589
13894: LD_INT 6
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 13920
13902: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13903: LD_ADDR_VAR 0 3
13907: PUSH
13908: LD_INT 4
13910: PUSH
13911: LD_INT 5
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: ST_TO_ADDR
13918: GO 14589
13920: LD_INT 10
13922: DOUBLE
13923: EQUAL
13924: IFTRUE 13928
13926: GO 13946
13928: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13929: LD_ADDR_VAR 0 3
13933: PUSH
13934: LD_INT 4
13936: PUSH
13937: LD_INT 5
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: ST_TO_ADDR
13944: GO 14589
13946: LD_INT 22
13948: DOUBLE
13949: EQUAL
13950: IFTRUE 13954
13952: GO 13980
13954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13955: LD_ADDR_VAR 0 3
13959: PUSH
13960: LD_INT 11
13962: PUSH
13963: LD_INT 12
13965: PUSH
13966: LD_INT 13
13968: PUSH
13969: LD_INT 14
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: ST_TO_ADDR
13978: GO 14589
13980: LD_INT 23
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14014
13988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_INT 11
13996: PUSH
13997: LD_INT 12
13999: PUSH
14000: LD_INT 13
14002: PUSH
14003: LD_INT 14
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: ST_TO_ADDR
14012: GO 14589
14014: LD_INT 24
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 14048
14022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14023: LD_ADDR_VAR 0 3
14027: PUSH
14028: LD_INT 11
14030: PUSH
14031: LD_INT 12
14033: PUSH
14034: LD_INT 13
14036: PUSH
14037: LD_INT 14
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: ST_TO_ADDR
14046: GO 14589
14048: LD_INT 30
14050: DOUBLE
14051: EQUAL
14052: IFTRUE 14056
14054: GO 14082
14056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14057: LD_ADDR_VAR 0 3
14061: PUSH
14062: LD_INT 11
14064: PUSH
14065: LD_INT 12
14067: PUSH
14068: LD_INT 13
14070: PUSH
14071: LD_INT 14
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: ST_TO_ADDR
14080: GO 14589
14082: LD_INT 25
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14108
14090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14091: LD_ADDR_VAR 0 3
14095: PUSH
14096: LD_INT 13
14098: PUSH
14099: LD_INT 14
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: ST_TO_ADDR
14106: GO 14589
14108: LD_INT 27
14110: DOUBLE
14111: EQUAL
14112: IFTRUE 14116
14114: GO 14134
14116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14117: LD_ADDR_VAR 0 3
14121: PUSH
14122: LD_INT 13
14124: PUSH
14125: LD_INT 14
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: ST_TO_ADDR
14132: GO 14589
14134: LD_INT 92
14136: DOUBLE
14137: EQUAL
14138: IFTRUE 14142
14140: GO 14168
14142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14143: LD_ADDR_VAR 0 3
14147: PUSH
14148: LD_INT 11
14150: PUSH
14151: LD_INT 12
14153: PUSH
14154: LD_INT 13
14156: PUSH
14157: LD_INT 14
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: ST_TO_ADDR
14166: GO 14589
14168: LD_INT 28
14170: DOUBLE
14171: EQUAL
14172: IFTRUE 14176
14174: GO 14194
14176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14177: LD_ADDR_VAR 0 3
14181: PUSH
14182: LD_INT 13
14184: PUSH
14185: LD_INT 14
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: ST_TO_ADDR
14192: GO 14589
14194: LD_INT 29
14196: DOUBLE
14197: EQUAL
14198: IFTRUE 14202
14200: GO 14220
14202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_INT 13
14210: PUSH
14211: LD_INT 14
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
14218: GO 14589
14220: LD_INT 31
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14246
14228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14229: LD_ADDR_VAR 0 3
14233: PUSH
14234: LD_INT 13
14236: PUSH
14237: LD_INT 14
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: ST_TO_ADDR
14244: GO 14589
14246: LD_INT 26
14248: DOUBLE
14249: EQUAL
14250: IFTRUE 14254
14252: GO 14272
14254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14255: LD_ADDR_VAR 0 3
14259: PUSH
14260: LD_INT 13
14262: PUSH
14263: LD_INT 14
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: ST_TO_ADDR
14270: GO 14589
14272: LD_INT 42
14274: DOUBLE
14275: EQUAL
14276: IFTRUE 14280
14278: GO 14306
14280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14281: LD_ADDR_VAR 0 3
14285: PUSH
14286: LD_INT 21
14288: PUSH
14289: LD_INT 22
14291: PUSH
14292: LD_INT 23
14294: PUSH
14295: LD_INT 24
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: ST_TO_ADDR
14304: GO 14589
14306: LD_INT 43
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14340
14314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: LD_INT 21
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 23
14328: PUSH
14329: LD_INT 24
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: ST_TO_ADDR
14338: GO 14589
14340: LD_INT 44
14342: DOUBLE
14343: EQUAL
14344: IFTRUE 14348
14346: GO 14374
14348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14349: LD_ADDR_VAR 0 3
14353: PUSH
14354: LD_INT 21
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_INT 23
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: ST_TO_ADDR
14372: GO 14589
14374: LD_INT 45
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14408
14382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14383: LD_ADDR_VAR 0 3
14387: PUSH
14388: LD_INT 21
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_INT 23
14396: PUSH
14397: LD_INT 24
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: ST_TO_ADDR
14406: GO 14589
14408: LD_INT 49
14410: DOUBLE
14411: EQUAL
14412: IFTRUE 14416
14414: GO 14442
14416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 23
14430: PUSH
14431: LD_INT 24
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: ST_TO_ADDR
14440: GO 14589
14442: LD_INT 51
14444: DOUBLE
14445: EQUAL
14446: IFTRUE 14450
14448: GO 14476
14450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: LD_INT 21
14458: PUSH
14459: LD_INT 22
14461: PUSH
14462: LD_INT 23
14464: PUSH
14465: LD_INT 24
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: ST_TO_ADDR
14474: GO 14589
14476: LD_INT 52
14478: DOUBLE
14479: EQUAL
14480: IFTRUE 14484
14482: GO 14510
14484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14485: LD_ADDR_VAR 0 3
14489: PUSH
14490: LD_INT 21
14492: PUSH
14493: LD_INT 22
14495: PUSH
14496: LD_INT 23
14498: PUSH
14499: LD_INT 24
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: ST_TO_ADDR
14508: GO 14589
14510: LD_INT 53
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14536
14518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 23
14526: PUSH
14527: LD_INT 24
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: ST_TO_ADDR
14534: GO 14589
14536: LD_INT 46
14538: DOUBLE
14539: EQUAL
14540: IFTRUE 14544
14542: GO 14562
14544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14545: LD_ADDR_VAR 0 3
14549: PUSH
14550: LD_INT 23
14552: PUSH
14553: LD_INT 24
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: ST_TO_ADDR
14560: GO 14589
14562: LD_INT 47
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 14588
14570: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14571: LD_ADDR_VAR 0 3
14575: PUSH
14576: LD_INT 23
14578: PUSH
14579: LD_INT 24
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: ST_TO_ADDR
14586: GO 14589
14588: POP
// result := ( chassis in result ) ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_VAR 0 1
14598: PUSH
14599: LD_VAR 0 3
14603: IN
14604: ST_TO_ADDR
// end ;
14605: LD_VAR 0 3
14609: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14610: LD_INT 0
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
// result := array ;
14619: LD_ADDR_VAR 0 5
14623: PUSH
14624: LD_VAR 0 1
14628: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14629: LD_VAR 0 1
14633: NOT
14634: IFTRUE 14643
14636: PUSH
14637: LD_VAR 0 2
14641: NOT
14642: OR
14643: IFTRUE 14652
14645: PUSH
14646: LD_VAR 0 3
14650: NOT
14651: OR
14652: IFTRUE 14666
14654: PUSH
14655: LD_VAR 0 2
14659: PUSH
14660: LD_VAR 0 1
14664: GREATER
14665: OR
14666: IFTRUE 14680
14668: PUSH
14669: LD_VAR 0 3
14673: PUSH
14674: LD_VAR 0 1
14678: GREATER
14679: OR
14680: IFFALSE 14684
// exit ;
14682: GO 14980
// if direction then
14684: LD_VAR 0 4
14688: IFFALSE 14752
// begin d := 1 ;
14690: LD_ADDR_VAR 0 9
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// if i_from > i_to then
14698: LD_VAR 0 2
14702: PUSH
14703: LD_VAR 0 3
14707: GREATER
14708: IFFALSE 14734
// length := ( array - i_from ) + i_to else
14710: LD_ADDR_VAR 0 11
14714: PUSH
14715: LD_VAR 0 1
14719: PUSH
14720: LD_VAR 0 2
14724: MINUS
14725: PUSH
14726: LD_VAR 0 3
14730: PLUS
14731: ST_TO_ADDR
14732: GO 14750
// length := i_to - i_from ;
14734: LD_ADDR_VAR 0 11
14738: PUSH
14739: LD_VAR 0 3
14743: PUSH
14744: LD_VAR 0 2
14748: MINUS
14749: ST_TO_ADDR
// end else
14750: GO 14813
// begin d := - 1 ;
14752: LD_ADDR_VAR 0 9
14756: PUSH
14757: LD_INT 1
14759: NEG
14760: ST_TO_ADDR
// if i_from > i_to then
14761: LD_VAR 0 2
14765: PUSH
14766: LD_VAR 0 3
14770: GREATER
14771: IFFALSE 14791
// length := i_from - i_to else
14773: LD_ADDR_VAR 0 11
14777: PUSH
14778: LD_VAR 0 2
14782: PUSH
14783: LD_VAR 0 3
14787: MINUS
14788: ST_TO_ADDR
14789: GO 14813
// length := ( array - i_to ) + i_from ;
14791: LD_ADDR_VAR 0 11
14795: PUSH
14796: LD_VAR 0 1
14800: PUSH
14801: LD_VAR 0 3
14805: MINUS
14806: PUSH
14807: LD_VAR 0 2
14811: PLUS
14812: ST_TO_ADDR
// end ; if not length then
14813: LD_VAR 0 11
14817: NOT
14818: IFFALSE 14822
// exit ;
14820: GO 14980
// tmp := array ;
14822: LD_ADDR_VAR 0 10
14826: PUSH
14827: LD_VAR 0 1
14831: ST_TO_ADDR
// for i = 1 to length do
14832: LD_ADDR_VAR 0 6
14836: PUSH
14837: DOUBLE
14838: LD_INT 1
14840: DEC
14841: ST_TO_ADDR
14842: LD_VAR 0 11
14846: PUSH
14847: FOR_TO
14848: IFFALSE 14968
// begin for j = 1 to array do
14850: LD_ADDR_VAR 0 7
14854: PUSH
14855: DOUBLE
14856: LD_INT 1
14858: DEC
14859: ST_TO_ADDR
14860: LD_VAR 0 1
14864: PUSH
14865: FOR_TO
14866: IFFALSE 14954
// begin k := j + d ;
14868: LD_ADDR_VAR 0 8
14872: PUSH
14873: LD_VAR 0 7
14877: PUSH
14878: LD_VAR 0 9
14882: PLUS
14883: ST_TO_ADDR
// if k > array then
14884: LD_VAR 0 8
14888: PUSH
14889: LD_VAR 0 1
14893: GREATER
14894: IFFALSE 14904
// k := 1 ;
14896: LD_ADDR_VAR 0 8
14900: PUSH
14901: LD_INT 1
14903: ST_TO_ADDR
// if not k then
14904: LD_VAR 0 8
14908: NOT
14909: IFFALSE 14921
// k := array ;
14911: LD_ADDR_VAR 0 8
14915: PUSH
14916: LD_VAR 0 1
14920: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14921: LD_ADDR_VAR 0 10
14925: PUSH
14926: LD_VAR 0 10
14930: PPUSH
14931: LD_VAR 0 8
14935: PPUSH
14936: LD_VAR 0 1
14940: PUSH
14941: LD_VAR 0 7
14945: ARRAY
14946: PPUSH
14947: CALL_OW 1
14951: ST_TO_ADDR
// end ;
14952: GO 14865
14954: POP
14955: POP
// array := tmp ;
14956: LD_ADDR_VAR 0 1
14960: PUSH
14961: LD_VAR 0 10
14965: ST_TO_ADDR
// end ;
14966: GO 14847
14968: POP
14969: POP
// result := array ;
14970: LD_ADDR_VAR 0 5
14974: PUSH
14975: LD_VAR 0 1
14979: ST_TO_ADDR
// end ;
14980: LD_VAR 0 5
14984: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14985: LD_INT 0
14987: PPUSH
14988: PPUSH
// result := 0 ;
14989: LD_ADDR_VAR 0 3
14993: PUSH
14994: LD_INT 0
14996: ST_TO_ADDR
// if not array or not value in array then
14997: LD_VAR 0 1
15001: NOT
15002: IFTRUE 15017
15004: PUSH
15005: LD_VAR 0 2
15009: PUSH
15010: LD_VAR 0 1
15014: IN
15015: NOT
15016: OR
15017: IFFALSE 15021
// exit ;
15019: GO 15075
// for i = 1 to array do
15021: LD_ADDR_VAR 0 4
15025: PUSH
15026: DOUBLE
15027: LD_INT 1
15029: DEC
15030: ST_TO_ADDR
15031: LD_VAR 0 1
15035: PUSH
15036: FOR_TO
15037: IFFALSE 15073
// if value = array [ i ] then
15039: LD_VAR 0 2
15043: PUSH
15044: LD_VAR 0 1
15048: PUSH
15049: LD_VAR 0 4
15053: ARRAY
15054: EQUAL
15055: IFFALSE 15071
// begin result := i ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_VAR 0 4
15066: ST_TO_ADDR
// exit ;
15067: POP
15068: POP
15069: GO 15075
// end ;
15071: GO 15036
15073: POP
15074: POP
// end ;
15075: LD_VAR 0 3
15079: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15080: LD_INT 0
15082: PPUSH
// vc_chassis := chassis ;
15083: LD_ADDR_OWVAR 37
15087: PUSH
15088: LD_VAR 0 1
15092: ST_TO_ADDR
// vc_engine := engine ;
15093: LD_ADDR_OWVAR 39
15097: PUSH
15098: LD_VAR 0 2
15102: ST_TO_ADDR
// vc_control := control ;
15103: LD_ADDR_OWVAR 38
15107: PUSH
15108: LD_VAR 0 3
15112: ST_TO_ADDR
// vc_weapon := weapon ;
15113: LD_ADDR_OWVAR 40
15117: PUSH
15118: LD_VAR 0 4
15122: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15123: LD_ADDR_OWVAR 41
15127: PUSH
15128: LD_VAR 0 5
15132: ST_TO_ADDR
// end ;
15133: LD_VAR 0 6
15137: RET
// export function WantPlant ( unit ) ; var task ; begin
15138: LD_INT 0
15140: PPUSH
15141: PPUSH
// result := false ;
15142: LD_ADDR_VAR 0 2
15146: PUSH
15147: LD_INT 0
15149: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15150: LD_ADDR_VAR 0 3
15154: PUSH
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 437
15164: ST_TO_ADDR
// if task then
15165: LD_VAR 0 3
15169: IFFALSE 15197
// if task [ 1 ] [ 1 ] = p then
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PUSH
15180: LD_INT 1
15182: ARRAY
15183: PUSH
15184: LD_STRING p
15186: EQUAL
15187: IFFALSE 15197
// result := true ;
15189: LD_ADDR_VAR 0 2
15193: PUSH
15194: LD_INT 1
15196: ST_TO_ADDR
// end ;
15197: LD_VAR 0 2
15201: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15202: LD_INT 0
15204: PPUSH
15205: PPUSH
15206: PPUSH
15207: PPUSH
// if pos < 1 then
15208: LD_VAR 0 2
15212: PUSH
15213: LD_INT 1
15215: LESS
15216: IFFALSE 15220
// exit ;
15218: GO 15523
// if pos = 1 then
15220: LD_VAR 0 2
15224: PUSH
15225: LD_INT 1
15227: EQUAL
15228: IFFALSE 15261
// result := Replace ( arr , pos [ 1 ] , value ) else
15230: LD_ADDR_VAR 0 4
15234: PUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: LD_VAR 0 2
15244: PUSH
15245: LD_INT 1
15247: ARRAY
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: CALL_OW 1
15258: ST_TO_ADDR
15259: GO 15523
// begin tmp := arr ;
15261: LD_ADDR_VAR 0 6
15265: PUSH
15266: LD_VAR 0 1
15270: ST_TO_ADDR
// s_arr := [ tmp ] ;
15271: LD_ADDR_VAR 0 7
15275: PUSH
15276: LD_VAR 0 6
15280: PUSH
15281: EMPTY
15282: LIST
15283: ST_TO_ADDR
// for i = 1 to pos - 1 do
15284: LD_ADDR_VAR 0 5
15288: PUSH
15289: DOUBLE
15290: LD_INT 1
15292: DEC
15293: ST_TO_ADDR
15294: LD_VAR 0 2
15298: PUSH
15299: LD_INT 1
15301: MINUS
15302: PUSH
15303: FOR_TO
15304: IFFALSE 15349
// begin tmp := tmp [ pos [ i ] ] ;
15306: LD_ADDR_VAR 0 6
15310: PUSH
15311: LD_VAR 0 6
15315: PUSH
15316: LD_VAR 0 2
15320: PUSH
15321: LD_VAR 0 5
15325: ARRAY
15326: ARRAY
15327: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15328: LD_ADDR_VAR 0 7
15332: PUSH
15333: LD_VAR 0 7
15337: PUSH
15338: LD_VAR 0 6
15342: PUSH
15343: EMPTY
15344: LIST
15345: ADD
15346: ST_TO_ADDR
// end ;
15347: GO 15303
15349: POP
15350: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15351: LD_ADDR_VAR 0 6
15355: PUSH
15356: LD_VAR 0 6
15360: PPUSH
15361: LD_VAR 0 2
15365: PUSH
15366: LD_VAR 0 2
15370: ARRAY
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: CALL_OW 1
15381: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15382: LD_ADDR_VAR 0 7
15386: PUSH
15387: LD_VAR 0 7
15391: PPUSH
15392: LD_VAR 0 7
15396: PPUSH
15397: LD_VAR 0 6
15401: PPUSH
15402: CALL_OW 1
15406: ST_TO_ADDR
// for i = s_arr downto 2 do
15407: LD_ADDR_VAR 0 5
15411: PUSH
15412: DOUBLE
15413: LD_VAR 0 7
15417: INC
15418: ST_TO_ADDR
15419: LD_INT 2
15421: PUSH
15422: FOR_DOWNTO
15423: IFFALSE 15507
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15425: LD_ADDR_VAR 0 6
15429: PUSH
15430: LD_VAR 0 7
15434: PUSH
15435: LD_VAR 0 5
15439: PUSH
15440: LD_INT 1
15442: MINUS
15443: ARRAY
15444: PPUSH
15445: LD_VAR 0 2
15449: PUSH
15450: LD_VAR 0 5
15454: PUSH
15455: LD_INT 1
15457: MINUS
15458: ARRAY
15459: PPUSH
15460: LD_VAR 0 7
15464: PUSH
15465: LD_VAR 0 5
15469: ARRAY
15470: PPUSH
15471: CALL_OW 1
15475: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15476: LD_ADDR_VAR 0 7
15480: PUSH
15481: LD_VAR 0 7
15485: PPUSH
15486: LD_VAR 0 5
15490: PUSH
15491: LD_INT 1
15493: MINUS
15494: PPUSH
15495: LD_VAR 0 6
15499: PPUSH
15500: CALL_OW 1
15504: ST_TO_ADDR
// end ;
15505: GO 15422
15507: POP
15508: POP
// result := s_arr [ 1 ] ;
15509: LD_ADDR_VAR 0 4
15513: PUSH
15514: LD_VAR 0 7
15518: PUSH
15519: LD_INT 1
15521: ARRAY
15522: ST_TO_ADDR
// end ; end ;
15523: LD_VAR 0 4
15527: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15528: LD_INT 0
15530: PPUSH
15531: PPUSH
// if not list then
15532: LD_VAR 0 1
15536: NOT
15537: IFFALSE 15541
// exit ;
15539: GO 15632
// i := list [ pos1 ] ;
15541: LD_ADDR_VAR 0 5
15545: PUSH
15546: LD_VAR 0 1
15550: PUSH
15551: LD_VAR 0 2
15555: ARRAY
15556: ST_TO_ADDR
// if not i then
15557: LD_VAR 0 5
15561: NOT
15562: IFFALSE 15566
// exit ;
15564: GO 15632
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15566: LD_ADDR_VAR 0 1
15570: PUSH
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 1
15585: PUSH
15586: LD_VAR 0 3
15590: ARRAY
15591: PPUSH
15592: CALL_OW 1
15596: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15597: LD_ADDR_VAR 0 1
15601: PUSH
15602: LD_VAR 0 1
15606: PPUSH
15607: LD_VAR 0 3
15611: PPUSH
15612: LD_VAR 0 5
15616: PPUSH
15617: CALL_OW 1
15621: ST_TO_ADDR
// result := list ;
15622: LD_ADDR_VAR 0 4
15626: PUSH
15627: LD_VAR 0 1
15631: ST_TO_ADDR
// end ;
15632: LD_VAR 0 4
15636: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15637: LD_INT 0
15639: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15640: LD_ADDR_VAR 0 5
15644: PUSH
15645: LD_VAR 0 1
15649: PPUSH
15650: CALL_OW 250
15654: PPUSH
15655: LD_VAR 0 1
15659: PPUSH
15660: CALL_OW 251
15664: PPUSH
15665: LD_VAR 0 2
15669: PPUSH
15670: LD_VAR 0 3
15674: PPUSH
15675: LD_VAR 0 4
15679: PPUSH
15680: CALL 16062 0 5
15684: ST_TO_ADDR
// end ;
15685: LD_VAR 0 5
15689: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15690: LD_INT 0
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
// if not list or not unit then
15696: LD_VAR 0 2
15700: NOT
15701: IFTRUE 15710
15703: PUSH
15704: LD_VAR 0 1
15708: NOT
15709: OR
15710: IFFALSE 15714
// exit ;
15712: GO 16057
// result := [ ] ;
15714: LD_ADDR_VAR 0 5
15718: PUSH
15719: EMPTY
15720: ST_TO_ADDR
// for i in list do
15721: LD_ADDR_VAR 0 6
15725: PUSH
15726: LD_VAR 0 2
15730: PUSH
15731: FOR_IN
15732: IFFALSE 15950
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15734: LD_ADDR_VAR 0 8
15738: PUSH
15739: LD_VAR 0 1
15743: PPUSH
15744: LD_VAR 0 6
15748: PUSH
15749: LD_INT 1
15751: ARRAY
15752: PPUSH
15753: LD_VAR 0 6
15757: PUSH
15758: LD_INT 2
15760: ARRAY
15761: PPUSH
15762: CALL_OW 297
15766: ST_TO_ADDR
// if not Count ( result ) then
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL 12318 0 1
15776: NOT
15777: IFFALSE 15810
// begin result := Join ( result , [ i , tmp ] ) ;
15779: LD_ADDR_VAR 0 5
15783: PUSH
15784: LD_VAR 0 5
15788: PPUSH
15789: LD_VAR 0 6
15793: PUSH
15794: LD_VAR 0 8
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PPUSH
15803: CALL 48250 0 2
15807: ST_TO_ADDR
// continue ;
15808: GO 15731
// end ; if result [ result ] [ 2 ] <= tmp then
15810: LD_VAR 0 5
15814: PUSH
15815: LD_VAR 0 5
15819: ARRAY
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PUSH
15825: LD_VAR 0 8
15829: LESSEQUAL
15830: IFFALSE 15863
// result := Join ( result , [ i , tmp ] ) else
15832: LD_ADDR_VAR 0 5
15836: PUSH
15837: LD_VAR 0 5
15841: PPUSH
15842: LD_VAR 0 6
15846: PUSH
15847: LD_VAR 0 8
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL 48250 0 2
15860: ST_TO_ADDR
15861: GO 15948
// begin for j := 1 to Count ( result ) do
15863: LD_ADDR_VAR 0 7
15867: PUSH
15868: DOUBLE
15869: LD_INT 1
15871: DEC
15872: ST_TO_ADDR
15873: LD_VAR 0 5
15877: PPUSH
15878: CALL 12318 0 1
15882: PUSH
15883: FOR_TO
15884: IFFALSE 15946
// begin if tmp < result [ j ] [ 2 ] then
15886: LD_VAR 0 8
15890: PUSH
15891: LD_VAR 0 5
15895: PUSH
15896: LD_VAR 0 7
15900: ARRAY
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: LESS
15906: IFFALSE 15944
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15908: LD_ADDR_VAR 0 5
15912: PUSH
15913: LD_VAR 0 5
15917: PPUSH
15918: LD_VAR 0 7
15922: PPUSH
15923: LD_VAR 0 6
15927: PUSH
15928: LD_VAR 0 8
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 2
15941: ST_TO_ADDR
// break ;
15942: GO 15946
// end ; end ;
15944: GO 15883
15946: POP
15947: POP
// end ; end ;
15948: GO 15731
15950: POP
15951: POP
// if result and not asc then
15952: LD_VAR 0 5
15956: IFFALSE 15965
15958: PUSH
15959: LD_VAR 0 3
15963: NOT
15964: AND
15965: IFFALSE 15982
// result := ReverseArray ( result ) ;
15967: LD_ADDR_VAR 0 5
15971: PUSH
15972: LD_VAR 0 5
15976: PPUSH
15977: CALL 43340 0 1
15981: ST_TO_ADDR
// tmp := [ ] ;
15982: LD_ADDR_VAR 0 8
15986: PUSH
15987: EMPTY
15988: ST_TO_ADDR
// if mode then
15989: LD_VAR 0 4
15993: IFFALSE 16057
// begin for i := 1 to result do
15995: LD_ADDR_VAR 0 6
15999: PUSH
16000: DOUBLE
16001: LD_INT 1
16003: DEC
16004: ST_TO_ADDR
16005: LD_VAR 0 5
16009: PUSH
16010: FOR_TO
16011: IFFALSE 16045
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16013: LD_ADDR_VAR 0 8
16017: PUSH
16018: LD_VAR 0 8
16022: PPUSH
16023: LD_VAR 0 5
16027: PUSH
16028: LD_VAR 0 6
16032: ARRAY
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: PPUSH
16038: CALL 48250 0 2
16042: ST_TO_ADDR
16043: GO 16010
16045: POP
16046: POP
// result := tmp ;
16047: LD_ADDR_VAR 0 5
16051: PUSH
16052: LD_VAR 0 8
16056: ST_TO_ADDR
// end ; end ;
16057: LD_VAR 0 5
16061: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16062: LD_INT 0
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
// if not list then
16068: LD_VAR 0 3
16072: NOT
16073: IFFALSE 16077
// exit ;
16075: GO 16467
// result := [ ] ;
16077: LD_ADDR_VAR 0 6
16081: PUSH
16082: EMPTY
16083: ST_TO_ADDR
// for i in list do
16084: LD_ADDR_VAR 0 7
16088: PUSH
16089: LD_VAR 0 3
16093: PUSH
16094: FOR_IN
16095: IFFALSE 16297
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16097: LD_ADDR_VAR 0 9
16101: PUSH
16102: LD_VAR 0 7
16106: PPUSH
16107: LD_VAR 0 1
16111: PPUSH
16112: LD_VAR 0 2
16116: PPUSH
16117: CALL_OW 297
16121: ST_TO_ADDR
// if not result then
16122: LD_VAR 0 6
16126: NOT
16127: IFFALSE 16153
// result := [ [ i , tmp ] ] else
16129: LD_ADDR_VAR 0 6
16133: PUSH
16134: LD_VAR 0 7
16138: PUSH
16139: LD_VAR 0 9
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: ST_TO_ADDR
16151: GO 16295
// begin if result [ result ] [ 2 ] <= tmp then
16153: LD_VAR 0 6
16157: PUSH
16158: LD_VAR 0 6
16162: ARRAY
16163: PUSH
16164: LD_INT 2
16166: ARRAY
16167: PUSH
16168: LD_VAR 0 9
16172: LESSEQUAL
16173: IFFALSE 16215
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16175: LD_ADDR_VAR 0 6
16179: PUSH
16180: LD_VAR 0 6
16184: PPUSH
16185: LD_VAR 0 6
16189: PUSH
16190: LD_INT 1
16192: PLUS
16193: PPUSH
16194: LD_VAR 0 7
16198: PUSH
16199: LD_VAR 0 9
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PPUSH
16208: CALL_OW 2
16212: ST_TO_ADDR
16213: GO 16295
// for j := 1 to result do
16215: LD_ADDR_VAR 0 8
16219: PUSH
16220: DOUBLE
16221: LD_INT 1
16223: DEC
16224: ST_TO_ADDR
16225: LD_VAR 0 6
16229: PUSH
16230: FOR_TO
16231: IFFALSE 16293
// begin if tmp < result [ j ] [ 2 ] then
16233: LD_VAR 0 9
16237: PUSH
16238: LD_VAR 0 6
16242: PUSH
16243: LD_VAR 0 8
16247: ARRAY
16248: PUSH
16249: LD_INT 2
16251: ARRAY
16252: LESS
16253: IFFALSE 16291
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16255: LD_ADDR_VAR 0 6
16259: PUSH
16260: LD_VAR 0 6
16264: PPUSH
16265: LD_VAR 0 8
16269: PPUSH
16270: LD_VAR 0 7
16274: PUSH
16275: LD_VAR 0 9
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PPUSH
16284: CALL_OW 2
16288: ST_TO_ADDR
// break ;
16289: GO 16293
// end ; end ;
16291: GO 16230
16293: POP
16294: POP
// end ; end ;
16295: GO 16094
16297: POP
16298: POP
// if result and not asc then
16299: LD_VAR 0 6
16303: IFFALSE 16312
16305: PUSH
16306: LD_VAR 0 4
16310: NOT
16311: AND
16312: IFFALSE 16387
// begin tmp := result ;
16314: LD_ADDR_VAR 0 9
16318: PUSH
16319: LD_VAR 0 6
16323: ST_TO_ADDR
// for i = tmp downto 1 do
16324: LD_ADDR_VAR 0 7
16328: PUSH
16329: DOUBLE
16330: LD_VAR 0 9
16334: INC
16335: ST_TO_ADDR
16336: LD_INT 1
16338: PUSH
16339: FOR_DOWNTO
16340: IFFALSE 16385
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16342: LD_ADDR_VAR 0 6
16346: PUSH
16347: LD_VAR 0 6
16351: PPUSH
16352: LD_VAR 0 9
16356: PUSH
16357: LD_VAR 0 7
16361: MINUS
16362: PUSH
16363: LD_INT 1
16365: PLUS
16366: PPUSH
16367: LD_VAR 0 9
16371: PUSH
16372: LD_VAR 0 7
16376: ARRAY
16377: PPUSH
16378: CALL_OW 1
16382: ST_TO_ADDR
16383: GO 16339
16385: POP
16386: POP
// end ; tmp := [ ] ;
16387: LD_ADDR_VAR 0 9
16391: PUSH
16392: EMPTY
16393: ST_TO_ADDR
// if mode then
16394: LD_VAR 0 5
16398: IFFALSE 16467
// begin for i = 1 to result do
16400: LD_ADDR_VAR 0 7
16404: PUSH
16405: DOUBLE
16406: LD_INT 1
16408: DEC
16409: ST_TO_ADDR
16410: LD_VAR 0 6
16414: PUSH
16415: FOR_TO
16416: IFFALSE 16455
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16418: LD_ADDR_VAR 0 9
16422: PUSH
16423: LD_VAR 0 9
16427: PPUSH
16428: LD_VAR 0 7
16432: PPUSH
16433: LD_VAR 0 6
16437: PUSH
16438: LD_VAR 0 7
16442: ARRAY
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: CALL_OW 1
16452: ST_TO_ADDR
16453: GO 16415
16455: POP
16456: POP
// result := tmp ;
16457: LD_ADDR_VAR 0 6
16461: PUSH
16462: LD_VAR 0 9
16466: ST_TO_ADDR
// end ; end ;
16467: LD_VAR 0 6
16471: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16472: LD_INT 0
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
16478: PPUSH
16479: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16480: LD_ADDR_VAR 0 5
16484: PUSH
16485: LD_INT 0
16487: PUSH
16488: LD_INT 0
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: ST_TO_ADDR
// if not x or not y then
16502: LD_VAR 0 2
16506: NOT
16507: IFTRUE 16516
16509: PUSH
16510: LD_VAR 0 3
16514: NOT
16515: OR
16516: IFFALSE 16520
// exit ;
16518: GO 18176
// if not range then
16520: LD_VAR 0 4
16524: NOT
16525: IFFALSE 16535
// range := 10 ;
16527: LD_ADDR_VAR 0 4
16531: PUSH
16532: LD_INT 10
16534: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16535: LD_ADDR_VAR 0 8
16539: PUSH
16540: LD_INT 81
16542: PUSH
16543: LD_VAR 0 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 92
16554: PUSH
16555: LD_VAR 0 2
16559: PUSH
16560: LD_VAR 0 3
16564: PUSH
16565: LD_VAR 0 4
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 3
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: LIST
16597: PPUSH
16598: CALL_OW 69
16602: ST_TO_ADDR
// if not tmp then
16603: LD_VAR 0 8
16607: NOT
16608: IFFALSE 16612
// exit ;
16610: GO 18176
// for i in tmp do
16612: LD_ADDR_VAR 0 6
16616: PUSH
16617: LD_VAR 0 8
16621: PUSH
16622: FOR_IN
16623: IFFALSE 18151
// begin points := [ 0 , 0 , 0 ] ;
16625: LD_ADDR_VAR 0 9
16629: PUSH
16630: LD_INT 0
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: LD_INT 0
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: ST_TO_ADDR
// bpoints := 1 ;
16644: LD_ADDR_VAR 0 10
16648: PUSH
16649: LD_INT 1
16651: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16652: LD_VAR 0 6
16656: PPUSH
16657: CALL_OW 247
16661: PUSH
16662: LD_INT 1
16664: DOUBLE
16665: EQUAL
16666: IFTRUE 16670
16668: GO 17252
16670: POP
// begin if GetClass ( i ) = 1 then
16671: LD_VAR 0 6
16675: PPUSH
16676: CALL_OW 257
16680: PUSH
16681: LD_INT 1
16683: EQUAL
16684: IFFALSE 16705
// points := [ 10 , 5 , 3 ] ;
16686: LD_ADDR_VAR 0 9
16690: PUSH
16691: LD_INT 10
16693: PUSH
16694: LD_INT 5
16696: PUSH
16697: LD_INT 3
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16705: LD_VAR 0 6
16709: PPUSH
16710: CALL_OW 257
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: LD_INT 4
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: IN
16729: IFFALSE 16750
// points := [ 3 , 2 , 1 ] ;
16731: LD_ADDR_VAR 0 9
16735: PUSH
16736: LD_INT 3
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16750: LD_VAR 0 6
16754: PPUSH
16755: CALL_OW 257
16759: PUSH
16760: LD_INT 5
16762: EQUAL
16763: IFFALSE 16784
// points := [ 130 , 5 , 2 ] ;
16765: LD_ADDR_VAR 0 9
16769: PUSH
16770: LD_INT 130
16772: PUSH
16773: LD_INT 5
16775: PUSH
16776: LD_INT 2
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16784: LD_VAR 0 6
16788: PPUSH
16789: CALL_OW 257
16793: PUSH
16794: LD_INT 8
16796: EQUAL
16797: IFFALSE 16818
// points := [ 35 , 35 , 30 ] ;
16799: LD_ADDR_VAR 0 9
16803: PUSH
16804: LD_INT 35
16806: PUSH
16807: LD_INT 35
16809: PUSH
16810: LD_INT 30
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16818: LD_VAR 0 6
16822: PPUSH
16823: CALL_OW 257
16827: PUSH
16828: LD_INT 9
16830: EQUAL
16831: IFFALSE 16852
// points := [ 20 , 55 , 40 ] ;
16833: LD_ADDR_VAR 0 9
16837: PUSH
16838: LD_INT 20
16840: PUSH
16841: LD_INT 55
16843: PUSH
16844: LD_INT 40
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16852: LD_VAR 0 6
16856: PPUSH
16857: CALL_OW 257
16861: PUSH
16862: LD_INT 12
16864: PUSH
16865: LD_INT 16
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: IN
16872: IFFALSE 16893
// points := [ 5 , 3 , 2 ] ;
16874: LD_ADDR_VAR 0 9
16878: PUSH
16879: LD_INT 5
16881: PUSH
16882: LD_INT 3
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16893: LD_VAR 0 6
16897: PPUSH
16898: CALL_OW 257
16902: PUSH
16903: LD_INT 17
16905: EQUAL
16906: IFFALSE 16927
// points := [ 100 , 50 , 75 ] ;
16908: LD_ADDR_VAR 0 9
16912: PUSH
16913: LD_INT 100
16915: PUSH
16916: LD_INT 50
16918: PUSH
16919: LD_INT 75
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16927: LD_VAR 0 6
16931: PPUSH
16932: CALL_OW 257
16936: PUSH
16937: LD_INT 15
16939: EQUAL
16940: IFFALSE 16961
// points := [ 10 , 5 , 3 ] ;
16942: LD_ADDR_VAR 0 9
16946: PUSH
16947: LD_INT 10
16949: PUSH
16950: LD_INT 5
16952: PUSH
16953: LD_INT 3
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16961: LD_VAR 0 6
16965: PPUSH
16966: CALL_OW 257
16970: PUSH
16971: LD_INT 14
16973: EQUAL
16974: IFFALSE 16995
// points := [ 10 , 0 , 0 ] ;
16976: LD_ADDR_VAR 0 9
16980: PUSH
16981: LD_INT 10
16983: PUSH
16984: LD_INT 0
16986: PUSH
16987: LD_INT 0
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: LIST
16994: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16995: LD_VAR 0 6
16999: PPUSH
17000: CALL_OW 257
17004: PUSH
17005: LD_INT 11
17007: EQUAL
17008: IFFALSE 17029
// points := [ 30 , 10 , 5 ] ;
17010: LD_ADDR_VAR 0 9
17014: PUSH
17015: LD_INT 30
17017: PUSH
17018: LD_INT 10
17020: PUSH
17021: LD_INT 5
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17029: LD_VAR 0 1
17033: PPUSH
17034: LD_INT 5
17036: PPUSH
17037: CALL_OW 321
17041: PUSH
17042: LD_INT 2
17044: EQUAL
17045: IFFALSE 17062
// bpoints := bpoints * 1.8 ;
17047: LD_ADDR_VAR 0 10
17051: PUSH
17052: LD_VAR 0 10
17056: PUSH
17057: LD_REAL  1.80000000000000E+0000
17060: MUL
17061: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17062: LD_VAR 0 6
17066: PPUSH
17067: CALL_OW 257
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: LD_INT 4
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: IN
17090: IFFALSE 17110
17092: PUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_INT 51
17100: PPUSH
17101: CALL_OW 321
17105: PUSH
17106: LD_INT 2
17108: EQUAL
17109: AND
17110: IFFALSE 17127
// bpoints := bpoints * 1.2 ;
17112: LD_ADDR_VAR 0 10
17116: PUSH
17117: LD_VAR 0 10
17121: PUSH
17122: LD_REAL  1.20000000000000E+0000
17125: MUL
17126: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17127: LD_VAR 0 6
17131: PPUSH
17132: CALL_OW 257
17136: PUSH
17137: LD_INT 5
17139: PUSH
17140: LD_INT 7
17142: PUSH
17143: LD_INT 9
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: IN
17151: IFFALSE 17171
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: LD_INT 52
17161: PPUSH
17162: CALL_OW 321
17166: PUSH
17167: LD_INT 2
17169: EQUAL
17170: AND
17171: IFFALSE 17188
// bpoints := bpoints * 1.5 ;
17173: LD_ADDR_VAR 0 10
17177: PUSH
17178: LD_VAR 0 10
17182: PUSH
17183: LD_REAL  1.50000000000000E+0000
17186: MUL
17187: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17188: LD_VAR 0 1
17192: PPUSH
17193: LD_INT 66
17195: PPUSH
17196: CALL_OW 321
17200: PUSH
17201: LD_INT 2
17203: EQUAL
17204: IFFALSE 17221
// bpoints := bpoints * 1.1 ;
17206: LD_ADDR_VAR 0 10
17210: PUSH
17211: LD_VAR 0 10
17215: PUSH
17216: LD_REAL  1.10000000000000E+0000
17219: MUL
17220: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17221: LD_ADDR_VAR 0 10
17225: PUSH
17226: LD_VAR 0 10
17230: PUSH
17231: LD_VAR 0 6
17235: PPUSH
17236: LD_INT 1
17238: PPUSH
17239: CALL_OW 259
17243: PUSH
17244: LD_REAL  1.15000000000000E+0000
17247: MUL
17248: MUL
17249: ST_TO_ADDR
// end ; unit_vehicle :
17250: GO 18080
17252: LD_INT 2
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17260
17258: GO 18068
17260: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17261: LD_VAR 0 6
17265: PPUSH
17266: CALL_OW 264
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: LD_INT 42
17276: PUSH
17277: LD_INT 24
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: IN
17285: IFFALSE 17306
// points := [ 25 , 5 , 3 ] ;
17287: LD_ADDR_VAR 0 9
17291: PUSH
17292: LD_INT 25
17294: PUSH
17295: LD_INT 5
17297: PUSH
17298: LD_INT 3
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: LIST
17305: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17306: LD_VAR 0 6
17310: PPUSH
17311: CALL_OW 264
17315: PUSH
17316: LD_INT 4
17318: PUSH
17319: LD_INT 43
17321: PUSH
17322: LD_INT 25
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: IN
17330: IFFALSE 17351
// points := [ 40 , 15 , 5 ] ;
17332: LD_ADDR_VAR 0 9
17336: PUSH
17337: LD_INT 40
17339: PUSH
17340: LD_INT 15
17342: PUSH
17343: LD_INT 5
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17351: LD_VAR 0 6
17355: PPUSH
17356: CALL_OW 264
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: LD_INT 23
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: IN
17371: IFFALSE 17392
// points := [ 7 , 25 , 8 ] ;
17373: LD_ADDR_VAR 0 9
17377: PUSH
17378: LD_INT 7
17380: PUSH
17381: LD_INT 25
17383: PUSH
17384: LD_INT 8
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17392: LD_VAR 0 6
17396: PPUSH
17397: CALL_OW 264
17401: PUSH
17402: LD_INT 5
17404: PUSH
17405: LD_INT 27
17407: PUSH
17408: LD_INT 44
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: IN
17416: IFFALSE 17437
// points := [ 14 , 50 , 16 ] ;
17418: LD_ADDR_VAR 0 9
17422: PUSH
17423: LD_INT 14
17425: PUSH
17426: LD_INT 50
17428: PUSH
17429: LD_INT 16
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17437: LD_VAR 0 6
17441: PPUSH
17442: CALL_OW 264
17446: PUSH
17447: LD_INT 6
17449: PUSH
17450: LD_INT 46
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: IN
17457: IFFALSE 17478
// points := [ 32 , 120 , 70 ] ;
17459: LD_ADDR_VAR 0 9
17463: PUSH
17464: LD_INT 32
17466: PUSH
17467: LD_INT 120
17469: PUSH
17470: LD_INT 70
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17478: LD_VAR 0 6
17482: PPUSH
17483: CALL_OW 264
17487: PUSH
17488: LD_INT 7
17490: PUSH
17491: LD_INT 28
17493: PUSH
17494: LD_INT 45
17496: PUSH
17497: LD_INT 92
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: IN
17506: IFFALSE 17527
// points := [ 35 , 20 , 45 ] ;
17508: LD_ADDR_VAR 0 9
17512: PUSH
17513: LD_INT 35
17515: PUSH
17516: LD_INT 20
17518: PUSH
17519: LD_INT 45
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17527: LD_VAR 0 6
17531: PPUSH
17532: CALL_OW 264
17536: PUSH
17537: LD_INT 47
17539: PUSH
17540: EMPTY
17541: LIST
17542: IN
17543: IFFALSE 17564
// points := [ 67 , 45 , 75 ] ;
17545: LD_ADDR_VAR 0 9
17549: PUSH
17550: LD_INT 67
17552: PUSH
17553: LD_INT 45
17555: PUSH
17556: LD_INT 75
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17564: LD_VAR 0 6
17568: PPUSH
17569: CALL_OW 264
17573: PUSH
17574: LD_INT 26
17576: PUSH
17577: EMPTY
17578: LIST
17579: IN
17580: IFFALSE 17601
// points := [ 120 , 30 , 80 ] ;
17582: LD_ADDR_VAR 0 9
17586: PUSH
17587: LD_INT 120
17589: PUSH
17590: LD_INT 30
17592: PUSH
17593: LD_INT 80
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17601: LD_VAR 0 6
17605: PPUSH
17606: CALL_OW 264
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: EMPTY
17615: LIST
17616: IN
17617: IFFALSE 17638
// points := [ 40 , 1 , 1 ] ;
17619: LD_ADDR_VAR 0 9
17623: PUSH
17624: LD_INT 40
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17638: LD_VAR 0 6
17642: PPUSH
17643: CALL_OW 264
17647: PUSH
17648: LD_INT 29
17650: PUSH
17651: EMPTY
17652: LIST
17653: IN
17654: IFFALSE 17675
// points := [ 70 , 200 , 400 ] ;
17656: LD_ADDR_VAR 0 9
17660: PUSH
17661: LD_INT 70
17663: PUSH
17664: LD_INT 200
17666: PUSH
17667: LD_INT 400
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17675: LD_VAR 0 6
17679: PPUSH
17680: CALL_OW 264
17684: PUSH
17685: LD_INT 14
17687: PUSH
17688: LD_INT 53
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: IN
17695: IFFALSE 17716
// points := [ 40 , 10 , 20 ] ;
17697: LD_ADDR_VAR 0 9
17701: PUSH
17702: LD_INT 40
17704: PUSH
17705: LD_INT 10
17707: PUSH
17708: LD_INT 20
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: LIST
17715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17716: LD_VAR 0 6
17720: PPUSH
17721: CALL_OW 264
17725: PUSH
17726: LD_INT 9
17728: PUSH
17729: EMPTY
17730: LIST
17731: IN
17732: IFFALSE 17753
// points := [ 5 , 70 , 20 ] ;
17734: LD_ADDR_VAR 0 9
17738: PUSH
17739: LD_INT 5
17741: PUSH
17742: LD_INT 70
17744: PUSH
17745: LD_INT 20
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17753: LD_VAR 0 6
17757: PPUSH
17758: CALL_OW 264
17762: PUSH
17763: LD_INT 10
17765: PUSH
17766: EMPTY
17767: LIST
17768: IN
17769: IFFALSE 17790
// points := [ 35 , 110 , 70 ] ;
17771: LD_ADDR_VAR 0 9
17775: PUSH
17776: LD_INT 35
17778: PUSH
17779: LD_INT 110
17781: PUSH
17782: LD_INT 70
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17790: LD_VAR 0 6
17794: PPUSH
17795: CALL_OW 265
17799: PUSH
17800: LD_INT 25
17802: EQUAL
17803: IFFALSE 17824
// points := [ 80 , 65 , 100 ] ;
17805: LD_ADDR_VAR 0 9
17809: PUSH
17810: LD_INT 80
17812: PUSH
17813: LD_INT 65
17815: PUSH
17816: LD_INT 100
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: LIST
17823: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17824: LD_VAR 0 6
17828: PPUSH
17829: CALL_OW 263
17833: PUSH
17834: LD_INT 1
17836: EQUAL
17837: IFFALSE 17872
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17839: LD_ADDR_VAR 0 10
17843: PUSH
17844: LD_VAR 0 10
17848: PUSH
17849: LD_VAR 0 6
17853: PPUSH
17854: CALL_OW 311
17858: PPUSH
17859: LD_INT 3
17861: PPUSH
17862: CALL_OW 259
17866: PUSH
17867: LD_INT 4
17869: MUL
17870: MUL
17871: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17872: LD_VAR 0 6
17876: PPUSH
17877: CALL_OW 263
17881: PUSH
17882: LD_INT 2
17884: EQUAL
17885: IFFALSE 17936
// begin j := IsControledBy ( i ) ;
17887: LD_ADDR_VAR 0 7
17891: PUSH
17892: LD_VAR 0 6
17896: PPUSH
17897: CALL_OW 312
17901: ST_TO_ADDR
// if j then
17902: LD_VAR 0 7
17906: IFFALSE 17936
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17908: LD_ADDR_VAR 0 10
17912: PUSH
17913: LD_VAR 0 10
17917: PUSH
17918: LD_VAR 0 7
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: CALL_OW 259
17930: PUSH
17931: LD_INT 3
17933: MUL
17934: MUL
17935: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17936: LD_VAR 0 6
17940: PPUSH
17941: CALL_OW 264
17945: PUSH
17946: LD_INT 5
17948: PUSH
17949: LD_INT 6
17951: PUSH
17952: LD_INT 46
17954: PUSH
17955: LD_INT 44
17957: PUSH
17958: LD_INT 47
17960: PUSH
17961: LD_INT 45
17963: PUSH
17964: LD_INT 28
17966: PUSH
17967: LD_INT 7
17969: PUSH
17970: LD_INT 27
17972: PUSH
17973: LD_INT 29
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: IN
17988: IFFALSE 18008
17990: PUSH
17991: LD_VAR 0 1
17995: PPUSH
17996: LD_INT 52
17998: PPUSH
17999: CALL_OW 321
18003: PUSH
18004: LD_INT 2
18006: EQUAL
18007: AND
18008: IFFALSE 18025
// bpoints := bpoints * 1.2 ;
18010: LD_ADDR_VAR 0 10
18014: PUSH
18015: LD_VAR 0 10
18019: PUSH
18020: LD_REAL  1.20000000000000E+0000
18023: MUL
18024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18025: LD_VAR 0 6
18029: PPUSH
18030: CALL_OW 264
18034: PUSH
18035: LD_INT 6
18037: PUSH
18038: LD_INT 46
18040: PUSH
18041: LD_INT 47
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: IN
18049: IFFALSE 18066
// bpoints := bpoints * 1.2 ;
18051: LD_ADDR_VAR 0 10
18055: PUSH
18056: LD_VAR 0 10
18060: PUSH
18061: LD_REAL  1.20000000000000E+0000
18064: MUL
18065: ST_TO_ADDR
// end ; unit_building :
18066: GO 18080
18068: LD_INT 3
18070: DOUBLE
18071: EQUAL
18072: IFTRUE 18076
18074: GO 18079
18076: POP
// ; end ;
18077: GO 18080
18079: POP
// for j = 1 to 3 do
18080: LD_ADDR_VAR 0 7
18084: PUSH
18085: DOUBLE
18086: LD_INT 1
18088: DEC
18089: ST_TO_ADDR
18090: LD_INT 3
18092: PUSH
18093: FOR_TO
18094: IFFALSE 18147
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18096: LD_ADDR_VAR 0 5
18100: PUSH
18101: LD_VAR 0 5
18105: PPUSH
18106: LD_VAR 0 7
18110: PPUSH
18111: LD_VAR 0 5
18115: PUSH
18116: LD_VAR 0 7
18120: ARRAY
18121: PUSH
18122: LD_VAR 0 9
18126: PUSH
18127: LD_VAR 0 7
18131: ARRAY
18132: PUSH
18133: LD_VAR 0 10
18137: MUL
18138: PLUS
18139: PPUSH
18140: CALL_OW 1
18144: ST_TO_ADDR
18145: GO 18093
18147: POP
18148: POP
// end ;
18149: GO 16622
18151: POP
18152: POP
// result := Replace ( result , 4 , tmp ) ;
18153: LD_ADDR_VAR 0 5
18157: PUSH
18158: LD_VAR 0 5
18162: PPUSH
18163: LD_INT 4
18165: PPUSH
18166: LD_VAR 0 8
18170: PPUSH
18171: CALL_OW 1
18175: ST_TO_ADDR
// end ;
18176: LD_VAR 0 5
18180: RET
// export function DangerAtRange ( unit , range ) ; begin
18181: LD_INT 0
18183: PPUSH
// if not unit then
18184: LD_VAR 0 1
18188: NOT
18189: IFFALSE 18193
// exit ;
18191: GO 18238
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18193: LD_ADDR_VAR 0 3
18197: PUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: CALL_OW 255
18207: PPUSH
18208: LD_VAR 0 1
18212: PPUSH
18213: CALL_OW 250
18217: PPUSH
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 251
18227: PPUSH
18228: LD_VAR 0 2
18232: PPUSH
18233: CALL 16472 0 4
18237: ST_TO_ADDR
// end ;
18238: LD_VAR 0 3
18242: RET
// export function DangerInArea ( side , area ) ; begin
18243: LD_INT 0
18245: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18246: LD_ADDR_VAR 0 3
18250: PUSH
18251: LD_VAR 0 2
18255: PPUSH
18256: LD_INT 81
18258: PUSH
18259: LD_VAR 0 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 70
18272: ST_TO_ADDR
// end ;
18273: LD_VAR 0 3
18277: RET
// export function IsExtension ( b ) ; begin
18278: LD_INT 0
18280: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: LD_VAR 0 1
18290: PUSH
18291: LD_INT 23
18293: PUSH
18294: LD_INT 20
18296: PUSH
18297: LD_INT 22
18299: PUSH
18300: LD_INT 17
18302: PUSH
18303: LD_INT 24
18305: PUSH
18306: LD_INT 21
18308: PUSH
18309: LD_INT 19
18311: PUSH
18312: LD_INT 16
18314: PUSH
18315: LD_INT 25
18317: PUSH
18318: LD_INT 18
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: IN
18333: ST_TO_ADDR
// end ;
18334: LD_VAR 0 2
18338: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18339: LD_INT 0
18341: PPUSH
18342: PPUSH
18343: PPUSH
// result := [ ] ;
18344: LD_ADDR_VAR 0 4
18348: PUSH
18349: EMPTY
18350: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_INT 21
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PPUSH
18371: CALL_OW 70
18375: ST_TO_ADDR
// if not tmp then
18376: LD_VAR 0 5
18380: NOT
18381: IFFALSE 18385
// exit ;
18383: GO 18449
// if checkLink then
18385: LD_VAR 0 3
18389: IFFALSE 18439
// begin for i in tmp do
18391: LD_ADDR_VAR 0 6
18395: PUSH
18396: LD_VAR 0 5
18400: PUSH
18401: FOR_IN
18402: IFFALSE 18437
// if GetBase ( i ) <> base then
18404: LD_VAR 0 6
18408: PPUSH
18409: CALL_OW 274
18413: PUSH
18414: LD_VAR 0 1
18418: NONEQUAL
18419: IFFALSE 18435
// ComLinkToBase ( base , i ) ;
18421: LD_VAR 0 1
18425: PPUSH
18426: LD_VAR 0 6
18430: PPUSH
18431: CALL_OW 169
18435: GO 18401
18437: POP
18438: POP
// end ; result := tmp ;
18439: LD_ADDR_VAR 0 4
18443: PUSH
18444: LD_VAR 0 5
18448: ST_TO_ADDR
// end ;
18449: LD_VAR 0 4
18453: RET
// export function ComComplete ( units , b ) ; var i ; begin
18454: LD_INT 0
18456: PPUSH
18457: PPUSH
// if not units then
18458: LD_VAR 0 1
18462: NOT
18463: IFFALSE 18467
// exit ;
18465: GO 18557
// for i in units do
18467: LD_ADDR_VAR 0 4
18471: PUSH
18472: LD_VAR 0 1
18476: PUSH
18477: FOR_IN
18478: IFFALSE 18555
// if BuildingStatus ( b ) = bs_build then
18480: LD_VAR 0 2
18484: PPUSH
18485: CALL_OW 461
18489: PUSH
18490: LD_INT 1
18492: EQUAL
18493: IFFALSE 18553
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18495: LD_VAR 0 4
18499: PPUSH
18500: LD_STRING h
18502: PUSH
18503: LD_VAR 0 2
18507: PPUSH
18508: CALL_OW 250
18512: PUSH
18513: LD_VAR 0 2
18517: PPUSH
18518: CALL_OW 251
18522: PUSH
18523: LD_VAR 0 2
18527: PUSH
18528: LD_INT 0
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: PPUSH
18549: CALL_OW 446
18553: GO 18477
18555: POP
18556: POP
// end ;
18557: LD_VAR 0 3
18561: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18562: LD_INT 0
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18570: LD_VAR 0 1
18574: NOT
18575: IFTRUE 18592
18577: PUSH
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 263
18587: PUSH
18588: LD_INT 2
18590: NONEQUAL
18591: OR
18592: IFFALSE 18596
// exit ;
18594: GO 18912
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18596: LD_ADDR_VAR 0 6
18600: PUSH
18601: LD_INT 22
18603: PUSH
18604: LD_VAR 0 1
18608: PPUSH
18609: CALL_OW 255
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: LD_INT 30
18623: PUSH
18624: LD_INT 36
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 34
18633: PUSH
18634: LD_INT 31
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 6
18659: NOT
18660: IFFALSE 18664
// exit ;
18662: GO 18912
// result := [ ] ;
18664: LD_ADDR_VAR 0 2
18668: PUSH
18669: EMPTY
18670: ST_TO_ADDR
// for i in tmp do
18671: LD_ADDR_VAR 0 3
18675: PUSH
18676: LD_VAR 0 6
18680: PUSH
18681: FOR_IN
18682: IFFALSE 18753
// begin t := UnitsInside ( i ) ;
18684: LD_ADDR_VAR 0 4
18688: PUSH
18689: LD_VAR 0 3
18693: PPUSH
18694: CALL_OW 313
18698: ST_TO_ADDR
// if t then
18699: LD_VAR 0 4
18703: IFFALSE 18751
// for j in t do
18705: LD_ADDR_VAR 0 7
18709: PUSH
18710: LD_VAR 0 4
18714: PUSH
18715: FOR_IN
18716: IFFALSE 18749
// result := Replace ( result , result + 1 , j ) ;
18718: LD_ADDR_VAR 0 2
18722: PUSH
18723: LD_VAR 0 2
18727: PPUSH
18728: LD_VAR 0 2
18732: PUSH
18733: LD_INT 1
18735: PLUS
18736: PPUSH
18737: LD_VAR 0 7
18741: PPUSH
18742: CALL_OW 1
18746: ST_TO_ADDR
18747: GO 18715
18749: POP
18750: POP
// end ;
18751: GO 18681
18753: POP
18754: POP
// if not result then
18755: LD_VAR 0 2
18759: NOT
18760: IFFALSE 18764
// exit ;
18762: GO 18912
// mech := result [ 1 ] ;
18764: LD_ADDR_VAR 0 5
18768: PUSH
18769: LD_VAR 0 2
18773: PUSH
18774: LD_INT 1
18776: ARRAY
18777: ST_TO_ADDR
// if result > 1 then
18778: LD_VAR 0 2
18782: PUSH
18783: LD_INT 1
18785: GREATER
18786: IFFALSE 18898
// begin for i = 2 to result do
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: DOUBLE
18794: LD_INT 2
18796: DEC
18797: ST_TO_ADDR
18798: LD_VAR 0 2
18802: PUSH
18803: FOR_TO
18804: IFFALSE 18896
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18806: LD_ADDR_VAR 0 4
18810: PUSH
18811: LD_VAR 0 2
18815: PUSH
18816: LD_VAR 0 3
18820: ARRAY
18821: PPUSH
18822: LD_INT 3
18824: PPUSH
18825: CALL_OW 259
18829: PUSH
18830: LD_VAR 0 2
18834: PUSH
18835: LD_VAR 0 3
18839: ARRAY
18840: PPUSH
18841: CALL_OW 432
18845: MINUS
18846: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18847: LD_VAR 0 4
18851: PUSH
18852: LD_VAR 0 5
18856: PPUSH
18857: LD_INT 3
18859: PPUSH
18860: CALL_OW 259
18864: PUSH
18865: LD_VAR 0 5
18869: PPUSH
18870: CALL_OW 432
18874: MINUS
18875: GREATEREQUAL
18876: IFFALSE 18894
// mech := result [ i ] ;
18878: LD_ADDR_VAR 0 5
18882: PUSH
18883: LD_VAR 0 2
18887: PUSH
18888: LD_VAR 0 3
18892: ARRAY
18893: ST_TO_ADDR
// end ;
18894: GO 18803
18896: POP
18897: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: LD_VAR 0 5
18907: PPUSH
18908: CALL_OW 135
// end ;
18912: LD_VAR 0 2
18916: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18917: LD_INT 0
18919: PPUSH
18920: PPUSH
18921: PPUSH
18922: PPUSH
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
// result := [ ] ;
18932: LD_ADDR_VAR 0 7
18936: PUSH
18937: EMPTY
18938: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 266
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: IN
18959: NOT
18960: IFFALSE 18964
// exit ;
18962: GO 20604
// if name then
18964: LD_VAR 0 3
18968: IFFALSE 18984
// SetBName ( base_dep , name ) ;
18970: LD_VAR 0 1
18974: PPUSH
18975: LD_VAR 0 3
18979: PPUSH
18980: CALL_OW 500
// base := GetBase ( base_dep ) ;
18984: LD_ADDR_VAR 0 15
18988: PUSH
18989: LD_VAR 0 1
18993: PPUSH
18994: CALL_OW 274
18998: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18999: LD_ADDR_VAR 0 16
19003: PUSH
19004: LD_VAR 0 1
19008: PPUSH
19009: CALL_OW 255
19013: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19014: LD_ADDR_VAR 0 17
19018: PUSH
19019: LD_VAR 0 1
19023: PPUSH
19024: CALL_OW 248
19028: ST_TO_ADDR
// if sources then
19029: LD_VAR 0 5
19033: IFFALSE 19080
// for i = 1 to 3 do
19035: LD_ADDR_VAR 0 8
19039: PUSH
19040: DOUBLE
19041: LD_INT 1
19043: DEC
19044: ST_TO_ADDR
19045: LD_INT 3
19047: PUSH
19048: FOR_TO
19049: IFFALSE 19078
// AddResourceType ( base , i , sources [ i ] ) ;
19051: LD_VAR 0 15
19055: PPUSH
19056: LD_VAR 0 8
19060: PPUSH
19061: LD_VAR 0 5
19065: PUSH
19066: LD_VAR 0 8
19070: ARRAY
19071: PPUSH
19072: CALL_OW 276
19076: GO 19048
19078: POP
19079: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19080: LD_ADDR_VAR 0 18
19084: PUSH
19085: LD_VAR 0 15
19089: PPUSH
19090: LD_VAR 0 2
19094: PPUSH
19095: LD_INT 1
19097: PPUSH
19098: CALL 18339 0 3
19102: ST_TO_ADDR
// InitHc ;
19103: CALL_OW 19
// InitUc ;
19107: CALL_OW 18
// uc_side := side ;
19111: LD_ADDR_OWVAR 20
19115: PUSH
19116: LD_VAR 0 16
19120: ST_TO_ADDR
// uc_nation := nation ;
19121: LD_ADDR_OWVAR 21
19125: PUSH
19126: LD_VAR 0 17
19130: ST_TO_ADDR
// if buildings then
19131: LD_VAR 0 18
19135: IFFALSE 20463
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19137: LD_ADDR_VAR 0 19
19141: PUSH
19142: LD_VAR 0 18
19146: PPUSH
19147: LD_INT 2
19149: PUSH
19150: LD_INT 30
19152: PUSH
19153: LD_INT 29
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 30
19162: PUSH
19163: LD_INT 30
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 72
19179: ST_TO_ADDR
// if tmp then
19180: LD_VAR 0 19
19184: IFFALSE 19232
// for i in tmp do
19186: LD_ADDR_VAR 0 8
19190: PUSH
19191: LD_VAR 0 19
19195: PUSH
19196: FOR_IN
19197: IFFALSE 19230
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19199: LD_VAR 0 8
19203: PPUSH
19204: CALL_OW 250
19208: PPUSH
19209: LD_VAR 0 8
19213: PPUSH
19214: CALL_OW 251
19218: PPUSH
19219: LD_VAR 0 16
19223: PPUSH
19224: CALL_OW 441
19228: GO 19196
19230: POP
19231: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19232: LD_VAR 0 18
19236: PPUSH
19237: LD_INT 2
19239: PUSH
19240: LD_INT 30
19242: PUSH
19243: LD_INT 32
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 30
19252: PUSH
19253: LD_INT 33
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: PPUSH
19265: CALL_OW 72
19269: IFFALSE 19357
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19271: LD_ADDR_VAR 0 8
19275: PUSH
19276: LD_VAR 0 18
19280: PPUSH
19281: LD_INT 2
19283: PUSH
19284: LD_INT 30
19286: PUSH
19287: LD_INT 32
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 30
19296: PUSH
19297: LD_INT 33
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 72
19313: PUSH
19314: FOR_IN
19315: IFFALSE 19355
// begin if not GetBWeapon ( i ) then
19317: LD_VAR 0 8
19321: PPUSH
19322: CALL_OW 269
19326: NOT
19327: IFFALSE 19353
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19329: LD_VAR 0 8
19333: PPUSH
19334: LD_VAR 0 8
19338: PPUSH
19339: LD_VAR 0 2
19343: PPUSH
19344: CALL 20609 0 2
19348: PPUSH
19349: CALL_OW 431
// end ;
19353: GO 19314
19355: POP
19356: POP
// end ; for i = 1 to personel do
19357: LD_ADDR_VAR 0 8
19361: PUSH
19362: DOUBLE
19363: LD_INT 1
19365: DEC
19366: ST_TO_ADDR
19367: LD_VAR 0 6
19371: PUSH
19372: FOR_TO
19373: IFFALSE 20443
// begin if i > 4 then
19375: LD_VAR 0 8
19379: PUSH
19380: LD_INT 4
19382: GREATER
19383: IFFALSE 19387
// break ;
19385: GO 20443
// case i of 1 :
19387: LD_VAR 0 8
19391: PUSH
19392: LD_INT 1
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19480
19400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19401: LD_ADDR_VAR 0 12
19405: PUSH
19406: LD_VAR 0 18
19410: PPUSH
19411: LD_INT 22
19413: PUSH
19414: LD_VAR 0 16
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 58
19425: PUSH
19426: EMPTY
19427: LIST
19428: PUSH
19429: LD_INT 2
19431: PUSH
19432: LD_INT 30
19434: PUSH
19435: LD_INT 32
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 30
19444: PUSH
19445: LD_INT 4
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 30
19454: PUSH
19455: LD_INT 5
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 72
19477: ST_TO_ADDR
19478: GO 19702
19480: LD_INT 2
19482: DOUBLE
19483: EQUAL
19484: IFTRUE 19488
19486: GO 19550
19488: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19489: LD_ADDR_VAR 0 12
19493: PUSH
19494: LD_VAR 0 18
19498: PPUSH
19499: LD_INT 22
19501: PUSH
19502: LD_VAR 0 16
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 2
19513: PUSH
19514: LD_INT 30
19516: PUSH
19517: LD_INT 0
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 30
19526: PUSH
19527: LD_INT 1
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PPUSH
19543: CALL_OW 72
19547: ST_TO_ADDR
19548: GO 19702
19550: LD_INT 3
19552: DOUBLE
19553: EQUAL
19554: IFTRUE 19558
19556: GO 19620
19558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19559: LD_ADDR_VAR 0 12
19563: PUSH
19564: LD_VAR 0 18
19568: PPUSH
19569: LD_INT 22
19571: PUSH
19572: LD_VAR 0 16
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 30
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 30
19596: PUSH
19597: LD_INT 3
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 72
19617: ST_TO_ADDR
19618: GO 19702
19620: LD_INT 4
19622: DOUBLE
19623: EQUAL
19624: IFTRUE 19628
19626: GO 19701
19628: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19629: LD_ADDR_VAR 0 12
19633: PUSH
19634: LD_VAR 0 18
19638: PPUSH
19639: LD_INT 22
19641: PUSH
19642: LD_VAR 0 16
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: LD_INT 30
19656: PUSH
19657: LD_INT 6
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 30
19666: PUSH
19667: LD_INT 7
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 30
19676: PUSH
19677: LD_INT 8
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PPUSH
19694: CALL_OW 72
19698: ST_TO_ADDR
19699: GO 19702
19701: POP
// if i = 1 then
19702: LD_VAR 0 8
19706: PUSH
19707: LD_INT 1
19709: EQUAL
19710: IFFALSE 19821
// begin tmp := [ ] ;
19712: LD_ADDR_VAR 0 19
19716: PUSH
19717: EMPTY
19718: ST_TO_ADDR
// for j in f do
19719: LD_ADDR_VAR 0 9
19723: PUSH
19724: LD_VAR 0 12
19728: PUSH
19729: FOR_IN
19730: IFFALSE 19803
// if GetBType ( j ) = b_bunker then
19732: LD_VAR 0 9
19736: PPUSH
19737: CALL_OW 266
19741: PUSH
19742: LD_INT 32
19744: EQUAL
19745: IFFALSE 19772
// tmp := Insert ( tmp , 1 , j ) else
19747: LD_ADDR_VAR 0 19
19751: PUSH
19752: LD_VAR 0 19
19756: PPUSH
19757: LD_INT 1
19759: PPUSH
19760: LD_VAR 0 9
19764: PPUSH
19765: CALL_OW 2
19769: ST_TO_ADDR
19770: GO 19801
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19772: LD_ADDR_VAR 0 19
19776: PUSH
19777: LD_VAR 0 19
19781: PPUSH
19782: LD_VAR 0 19
19786: PUSH
19787: LD_INT 1
19789: PLUS
19790: PPUSH
19791: LD_VAR 0 9
19795: PPUSH
19796: CALL_OW 2
19800: ST_TO_ADDR
19801: GO 19729
19803: POP
19804: POP
// if tmp then
19805: LD_VAR 0 19
19809: IFFALSE 19821
// f := tmp ;
19811: LD_ADDR_VAR 0 12
19815: PUSH
19816: LD_VAR 0 19
19820: ST_TO_ADDR
// end ; x := personel [ i ] ;
19821: LD_ADDR_VAR 0 13
19825: PUSH
19826: LD_VAR 0 6
19830: PUSH
19831: LD_VAR 0 8
19835: ARRAY
19836: ST_TO_ADDR
// if x = - 1 then
19837: LD_VAR 0 13
19841: PUSH
19842: LD_INT 1
19844: NEG
19845: EQUAL
19846: IFFALSE 20057
// begin for j in f do
19848: LD_ADDR_VAR 0 9
19852: PUSH
19853: LD_VAR 0 12
19857: PUSH
19858: FOR_IN
19859: IFFALSE 20053
// repeat InitHc ;
19861: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19865: LD_VAR 0 9
19869: PPUSH
19870: CALL_OW 266
19874: PUSH
19875: LD_INT 5
19877: EQUAL
19878: IFFALSE 19948
// begin if UnitsInside ( j ) < 3 then
19880: LD_VAR 0 9
19884: PPUSH
19885: CALL_OW 313
19889: PUSH
19890: LD_INT 3
19892: LESS
19893: IFFALSE 19929
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19895: LD_INT 0
19897: PPUSH
19898: LD_INT 5
19900: PUSH
19901: LD_INT 8
19903: PUSH
19904: LD_INT 9
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: LD_VAR 0 17
19916: ARRAY
19917: PPUSH
19918: LD_VAR 0 4
19922: PPUSH
19923: CALL_OW 380
19927: GO 19946
// PrepareHuman ( false , i , skill ) ;
19929: LD_INT 0
19931: PPUSH
19932: LD_VAR 0 8
19936: PPUSH
19937: LD_VAR 0 4
19941: PPUSH
19942: CALL_OW 380
// end else
19946: GO 19965
// PrepareHuman ( false , i , skill ) ;
19948: LD_INT 0
19950: PPUSH
19951: LD_VAR 0 8
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: CALL_OW 380
// un := CreateHuman ;
19965: LD_ADDR_VAR 0 14
19969: PUSH
19970: CALL_OW 44
19974: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19975: LD_ADDR_VAR 0 7
19979: PUSH
19980: LD_VAR 0 7
19984: PPUSH
19985: LD_INT 1
19987: PPUSH
19988: LD_VAR 0 14
19992: PPUSH
19993: CALL_OW 2
19997: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19998: LD_VAR 0 14
20002: PPUSH
20003: LD_VAR 0 9
20007: PPUSH
20008: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20012: LD_VAR 0 9
20016: PPUSH
20017: CALL_OW 313
20021: PUSH
20022: LD_INT 6
20024: EQUAL
20025: IFTRUE 20049
20027: PUSH
20028: LD_VAR 0 9
20032: PPUSH
20033: CALL_OW 266
20037: PUSH
20038: LD_INT 32
20040: PUSH
20041: LD_INT 31
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: IN
20048: OR
20049: IFFALSE 19861
20051: GO 19858
20053: POP
20054: POP
// end else
20055: GO 20441
// for j = 1 to x do
20057: LD_ADDR_VAR 0 9
20061: PUSH
20062: DOUBLE
20063: LD_INT 1
20065: DEC
20066: ST_TO_ADDR
20067: LD_VAR 0 13
20071: PUSH
20072: FOR_TO
20073: IFFALSE 20439
// begin InitHc ;
20075: CALL_OW 19
// if not f then
20079: LD_VAR 0 12
20083: NOT
20084: IFFALSE 20173
// begin PrepareHuman ( false , i , skill ) ;
20086: LD_INT 0
20088: PPUSH
20089: LD_VAR 0 8
20093: PPUSH
20094: LD_VAR 0 4
20098: PPUSH
20099: CALL_OW 380
// un := CreateHuman ;
20103: LD_ADDR_VAR 0 14
20107: PUSH
20108: CALL_OW 44
20112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20113: LD_ADDR_VAR 0 7
20117: PUSH
20118: LD_VAR 0 7
20122: PPUSH
20123: LD_INT 1
20125: PPUSH
20126: LD_VAR 0 14
20130: PPUSH
20131: CALL_OW 2
20135: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20136: LD_VAR 0 14
20140: PPUSH
20141: LD_VAR 0 1
20145: PPUSH
20146: CALL_OW 250
20150: PPUSH
20151: LD_VAR 0 1
20155: PPUSH
20156: CALL_OW 251
20160: PPUSH
20161: LD_INT 10
20163: PPUSH
20164: LD_INT 0
20166: PPUSH
20167: CALL_OW 50
// continue ;
20171: GO 20072
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20173: LD_VAR 0 12
20177: PUSH
20178: LD_INT 1
20180: ARRAY
20181: PPUSH
20182: CALL_OW 313
20186: IFFALSE 20214
20188: PUSH
20189: LD_VAR 0 12
20193: PUSH
20194: LD_INT 1
20196: ARRAY
20197: PPUSH
20198: CALL_OW 266
20202: PUSH
20203: LD_INT 32
20205: PUSH
20206: LD_INT 31
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: IN
20213: AND
20214: IFTRUE 20235
20216: PUSH
20217: LD_VAR 0 12
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PPUSH
20226: CALL_OW 313
20230: PUSH
20231: LD_INT 6
20233: EQUAL
20234: OR
20235: IFFALSE 20255
// f := Delete ( f , 1 ) ;
20237: LD_ADDR_VAR 0 12
20241: PUSH
20242: LD_VAR 0 12
20246: PPUSH
20247: LD_INT 1
20249: PPUSH
20250: CALL_OW 3
20254: ST_TO_ADDR
// if not f then
20255: LD_VAR 0 12
20259: NOT
20260: IFFALSE 20278
// begin x := x + 2 ;
20262: LD_ADDR_VAR 0 13
20266: PUSH
20267: LD_VAR 0 13
20271: PUSH
20272: LD_INT 2
20274: PLUS
20275: ST_TO_ADDR
// continue ;
20276: GO 20072
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20278: LD_VAR 0 12
20282: PUSH
20283: LD_INT 1
20285: ARRAY
20286: PPUSH
20287: CALL_OW 266
20291: PUSH
20292: LD_INT 5
20294: EQUAL
20295: IFFALSE 20369
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20297: LD_VAR 0 12
20301: PUSH
20302: LD_INT 1
20304: ARRAY
20305: PPUSH
20306: CALL_OW 313
20310: PUSH
20311: LD_INT 3
20313: LESS
20314: IFFALSE 20350
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20316: LD_INT 0
20318: PPUSH
20319: LD_INT 5
20321: PUSH
20322: LD_INT 8
20324: PUSH
20325: LD_INT 9
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: PUSH
20333: LD_VAR 0 17
20337: ARRAY
20338: PPUSH
20339: LD_VAR 0 4
20343: PPUSH
20344: CALL_OW 380
20348: GO 20367
// PrepareHuman ( false , i , skill ) ;
20350: LD_INT 0
20352: PPUSH
20353: LD_VAR 0 8
20357: PPUSH
20358: LD_VAR 0 4
20362: PPUSH
20363: CALL_OW 380
// end else
20367: GO 20386
// PrepareHuman ( false , i , skill ) ;
20369: LD_INT 0
20371: PPUSH
20372: LD_VAR 0 8
20376: PPUSH
20377: LD_VAR 0 4
20381: PPUSH
20382: CALL_OW 380
// un := CreateHuman ;
20386: LD_ADDR_VAR 0 14
20390: PUSH
20391: CALL_OW 44
20395: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20396: LD_ADDR_VAR 0 7
20400: PUSH
20401: LD_VAR 0 7
20405: PPUSH
20406: LD_INT 1
20408: PPUSH
20409: LD_VAR 0 14
20413: PPUSH
20414: CALL_OW 2
20418: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20419: LD_VAR 0 14
20423: PPUSH
20424: LD_VAR 0 12
20428: PUSH
20429: LD_INT 1
20431: ARRAY
20432: PPUSH
20433: CALL_OW 52
// end ;
20437: GO 20072
20439: POP
20440: POP
// end ;
20441: GO 19372
20443: POP
20444: POP
// result := result ^ buildings ;
20445: LD_ADDR_VAR 0 7
20449: PUSH
20450: LD_VAR 0 7
20454: PUSH
20455: LD_VAR 0 18
20459: ADD
20460: ST_TO_ADDR
// end else
20461: GO 20604
// begin for i = 1 to personel do
20463: LD_ADDR_VAR 0 8
20467: PUSH
20468: DOUBLE
20469: LD_INT 1
20471: DEC
20472: ST_TO_ADDR
20473: LD_VAR 0 6
20477: PUSH
20478: FOR_TO
20479: IFFALSE 20602
// begin if i > 4 then
20481: LD_VAR 0 8
20485: PUSH
20486: LD_INT 4
20488: GREATER
20489: IFFALSE 20493
// break ;
20491: GO 20602
// x := personel [ i ] ;
20493: LD_ADDR_VAR 0 13
20497: PUSH
20498: LD_VAR 0 6
20502: PUSH
20503: LD_VAR 0 8
20507: ARRAY
20508: ST_TO_ADDR
// if x = - 1 then
20509: LD_VAR 0 13
20513: PUSH
20514: LD_INT 1
20516: NEG
20517: EQUAL
20518: IFFALSE 20522
// continue ;
20520: GO 20478
// PrepareHuman ( false , i , skill ) ;
20522: LD_INT 0
20524: PPUSH
20525: LD_VAR 0 8
20529: PPUSH
20530: LD_VAR 0 4
20534: PPUSH
20535: CALL_OW 380
// un := CreateHuman ;
20539: LD_ADDR_VAR 0 14
20543: PUSH
20544: CALL_OW 44
20548: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20549: LD_VAR 0 14
20553: PPUSH
20554: LD_VAR 0 1
20558: PPUSH
20559: CALL_OW 250
20563: PPUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 251
20573: PPUSH
20574: LD_INT 10
20576: PPUSH
20577: LD_INT 0
20579: PPUSH
20580: CALL_OW 50
// result := result ^ un ;
20584: LD_ADDR_VAR 0 7
20588: PUSH
20589: LD_VAR 0 7
20593: PUSH
20594: LD_VAR 0 14
20598: ADD
20599: ST_TO_ADDR
// end ;
20600: GO 20478
20602: POP
20603: POP
// end ; end ;
20604: LD_VAR 0 7
20608: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20609: LD_INT 0
20611: PPUSH
20612: PPUSH
20613: PPUSH
20614: PPUSH
20615: PPUSH
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
20626: PPUSH
// result := false ;
20627: LD_ADDR_VAR 0 3
20631: PUSH
20632: LD_INT 0
20634: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20635: LD_VAR 0 1
20639: NOT
20640: IFTRUE 20665
20642: PUSH
20643: LD_VAR 0 1
20647: PPUSH
20648: CALL_OW 266
20652: PUSH
20653: LD_INT 32
20655: PUSH
20656: LD_INT 33
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: IN
20663: NOT
20664: OR
20665: IFFALSE 20669
// exit ;
20667: GO 21804
// nat := GetNation ( tower ) ;
20669: LD_ADDR_VAR 0 12
20673: PUSH
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 248
20683: ST_TO_ADDR
// side := GetSide ( tower ) ;
20684: LD_ADDR_VAR 0 16
20688: PUSH
20689: LD_VAR 0 1
20693: PPUSH
20694: CALL_OW 255
20698: ST_TO_ADDR
// x := GetX ( tower ) ;
20699: LD_ADDR_VAR 0 10
20703: PUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 250
20713: ST_TO_ADDR
// y := GetY ( tower ) ;
20714: LD_ADDR_VAR 0 11
20718: PUSH
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 251
20728: ST_TO_ADDR
// if not x or not y then
20729: LD_VAR 0 10
20733: NOT
20734: IFTRUE 20743
20736: PUSH
20737: LD_VAR 0 11
20741: NOT
20742: OR
20743: IFFALSE 20747
// exit ;
20745: GO 21804
// weapon := 0 ;
20747: LD_ADDR_VAR 0 18
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// fac_list := [ ] ;
20755: LD_ADDR_VAR 0 17
20759: PUSH
20760: EMPTY
20761: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20762: LD_ADDR_VAR 0 6
20766: PUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: CALL_OW 274
20776: PPUSH
20777: LD_VAR 0 2
20781: PPUSH
20782: LD_INT 0
20784: PPUSH
20785: CALL 18339 0 3
20789: PPUSH
20790: LD_INT 30
20792: PUSH
20793: LD_INT 3
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PPUSH
20800: CALL_OW 72
20804: ST_TO_ADDR
// if not factories then
20805: LD_VAR 0 6
20809: NOT
20810: IFFALSE 20814
// exit ;
20812: GO 21804
// for i in factories do
20814: LD_ADDR_VAR 0 8
20818: PUSH
20819: LD_VAR 0 6
20823: PUSH
20824: FOR_IN
20825: IFFALSE 20850
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20827: LD_ADDR_VAR 0 17
20831: PUSH
20832: LD_VAR 0 17
20836: PUSH
20837: LD_VAR 0 8
20841: PPUSH
20842: CALL_OW 478
20846: UNION
20847: ST_TO_ADDR
20848: GO 20824
20850: POP
20851: POP
// if not fac_list then
20852: LD_VAR 0 17
20856: NOT
20857: IFFALSE 20861
// exit ;
20859: GO 21804
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20861: LD_ADDR_VAR 0 5
20865: PUSH
20866: LD_INT 4
20868: PUSH
20869: LD_INT 5
20871: PUSH
20872: LD_INT 9
20874: PUSH
20875: LD_INT 10
20877: PUSH
20878: LD_INT 6
20880: PUSH
20881: LD_INT 7
20883: PUSH
20884: LD_INT 11
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 27
20898: PUSH
20899: LD_INT 28
20901: PUSH
20902: LD_INT 26
20904: PUSH
20905: LD_INT 30
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 43
20916: PUSH
20917: LD_INT 44
20919: PUSH
20920: LD_INT 46
20922: PUSH
20923: LD_INT 45
20925: PUSH
20926: LD_INT 47
20928: PUSH
20929: LD_INT 49
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: PUSH
20945: LD_VAR 0 12
20949: ARRAY
20950: ST_TO_ADDR
// list := list isect fac_list ;
20951: LD_ADDR_VAR 0 5
20955: PUSH
20956: LD_VAR 0 5
20960: PUSH
20961: LD_VAR 0 17
20965: ISECT
20966: ST_TO_ADDR
// if not list then
20967: LD_VAR 0 5
20971: NOT
20972: IFFALSE 20976
// exit ;
20974: GO 21804
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20976: LD_VAR 0 12
20980: PUSH
20981: LD_INT 3
20983: EQUAL
20984: IFFALSE 20996
20986: PUSH
20987: LD_INT 49
20989: PUSH
20990: LD_VAR 0 5
20994: IN
20995: AND
20996: IFFALSE 21016
20998: PUSH
20999: LD_INT 31
21001: PPUSH
21002: LD_VAR 0 16
21006: PPUSH
21007: CALL_OW 321
21011: PUSH
21012: LD_INT 2
21014: EQUAL
21015: AND
21016: IFFALSE 21076
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21018: LD_INT 22
21020: PUSH
21021: LD_VAR 0 16
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 35
21032: PUSH
21033: LD_INT 49
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 91
21042: PUSH
21043: LD_VAR 0 1
21047: PUSH
21048: LD_INT 10
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: LIST
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: PPUSH
21061: CALL_OW 69
21065: NOT
21066: IFFALSE 21076
// weapon := ru_time_lapser ;
21068: LD_ADDR_VAR 0 18
21072: PUSH
21073: LD_INT 49
21075: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21076: LD_VAR 0 12
21080: PUSH
21081: LD_INT 1
21083: PUSH
21084: LD_INT 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: IN
21091: IFFALSE 21115
21093: PUSH
21094: LD_INT 11
21096: PUSH
21097: LD_VAR 0 5
21101: IN
21102: IFTRUE 21114
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_VAR 0 5
21112: IN
21113: OR
21114: AND
21115: IFFALSE 21135
21117: PUSH
21118: LD_INT 6
21120: PPUSH
21121: LD_VAR 0 16
21125: PPUSH
21126: CALL_OW 321
21130: PUSH
21131: LD_INT 2
21133: EQUAL
21134: AND
21135: IFFALSE 21302
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21137: LD_INT 22
21139: PUSH
21140: LD_VAR 0 16
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 2
21151: PUSH
21152: LD_INT 35
21154: PUSH
21155: LD_INT 11
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 35
21164: PUSH
21165: LD_INT 30
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 91
21179: PUSH
21180: LD_VAR 0 1
21184: PUSH
21185: LD_INT 18
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 69
21202: NOT
21203: IFFALSE 21279
21205: PUSH
21206: LD_INT 22
21208: PUSH
21209: LD_VAR 0 16
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: LD_INT 32
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 30
21233: PUSH
21234: LD_INT 33
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 91
21248: PUSH
21249: LD_VAR 0 1
21253: PUSH
21254: LD_INT 12
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: PUSH
21267: EMPTY
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: PUSH
21275: LD_INT 2
21277: GREATER
21278: AND
21279: IFFALSE 21302
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21281: LD_ADDR_VAR 0 18
21285: PUSH
21286: LD_INT 11
21288: PUSH
21289: LD_INT 30
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_VAR 0 12
21300: ARRAY
21301: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21302: LD_VAR 0 18
21306: NOT
21307: IFFALSE 21327
21309: PUSH
21310: LD_INT 40
21312: PPUSH
21313: LD_VAR 0 16
21317: PPUSH
21318: CALL_OW 321
21322: PUSH
21323: LD_INT 2
21325: EQUAL
21326: AND
21327: IFFALSE 21363
21329: PUSH
21330: LD_INT 7
21332: PUSH
21333: LD_VAR 0 5
21337: IN
21338: IFTRUE 21350
21340: PUSH
21341: LD_INT 28
21343: PUSH
21344: LD_VAR 0 5
21348: IN
21349: OR
21350: IFTRUE 21362
21352: PUSH
21353: LD_INT 45
21355: PUSH
21356: LD_VAR 0 5
21360: IN
21361: OR
21362: AND
21363: IFFALSE 21617
// begin hex := GetHexInfo ( x , y ) ;
21365: LD_ADDR_VAR 0 4
21369: PUSH
21370: LD_VAR 0 10
21374: PPUSH
21375: LD_VAR 0 11
21379: PPUSH
21380: CALL_OW 546
21384: ST_TO_ADDR
// if hex [ 1 ] then
21385: LD_VAR 0 4
21389: PUSH
21390: LD_INT 1
21392: ARRAY
21393: IFFALSE 21397
// exit ;
21395: GO 21804
// height := hex [ 2 ] ;
21397: LD_ADDR_VAR 0 15
21401: PUSH
21402: LD_VAR 0 4
21406: PUSH
21407: LD_INT 2
21409: ARRAY
21410: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21411: LD_ADDR_VAR 0 14
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 3
21424: PUSH
21425: LD_INT 5
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// for i in tmp do
21434: LD_ADDR_VAR 0 8
21438: PUSH
21439: LD_VAR 0 14
21443: PUSH
21444: FOR_IN
21445: IFFALSE 21615
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21447: LD_ADDR_VAR 0 9
21451: PUSH
21452: LD_VAR 0 10
21456: PPUSH
21457: LD_VAR 0 8
21461: PPUSH
21462: LD_INT 5
21464: PPUSH
21465: CALL_OW 272
21469: PUSH
21470: LD_VAR 0 11
21474: PPUSH
21475: LD_VAR 0 8
21479: PPUSH
21480: LD_INT 5
21482: PPUSH
21483: CALL_OW 273
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21492: LD_VAR 0 9
21496: PUSH
21497: LD_INT 1
21499: ARRAY
21500: PPUSH
21501: LD_VAR 0 9
21505: PUSH
21506: LD_INT 2
21508: ARRAY
21509: PPUSH
21510: CALL_OW 488
21514: IFFALSE 21613
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21516: LD_ADDR_VAR 0 4
21520: PUSH
21521: LD_VAR 0 9
21525: PUSH
21526: LD_INT 1
21528: ARRAY
21529: PPUSH
21530: LD_VAR 0 9
21534: PUSH
21535: LD_INT 2
21537: ARRAY
21538: PPUSH
21539: CALL_OW 546
21543: ST_TO_ADDR
// if hex [ 1 ] then
21544: LD_VAR 0 4
21548: PUSH
21549: LD_INT 1
21551: ARRAY
21552: IFFALSE 21556
// continue ;
21554: GO 21444
// h := hex [ 2 ] ;
21556: LD_ADDR_VAR 0 13
21560: PUSH
21561: LD_VAR 0 4
21565: PUSH
21566: LD_INT 2
21568: ARRAY
21569: ST_TO_ADDR
// if h + 7 < height then
21570: LD_VAR 0 13
21574: PUSH
21575: LD_INT 7
21577: PLUS
21578: PUSH
21579: LD_VAR 0 15
21583: LESS
21584: IFFALSE 21613
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21586: LD_ADDR_VAR 0 18
21590: PUSH
21591: LD_INT 7
21593: PUSH
21594: LD_INT 28
21596: PUSH
21597: LD_INT 45
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: PUSH
21605: LD_VAR 0 12
21609: ARRAY
21610: ST_TO_ADDR
// break ;
21611: GO 21615
// end ; end ; end ;
21613: GO 21444
21615: POP
21616: POP
// end ; if not weapon then
21617: LD_VAR 0 18
21621: NOT
21622: IFFALSE 21682
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21624: LD_ADDR_VAR 0 5
21628: PUSH
21629: LD_VAR 0 5
21633: PUSH
21634: LD_INT 11
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 49
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: DIFF
21648: ST_TO_ADDR
// if not list then
21649: LD_VAR 0 5
21653: NOT
21654: IFFALSE 21658
// exit ;
21656: GO 21804
// weapon := list [ rand ( 1 , list ) ] ;
21658: LD_ADDR_VAR 0 18
21662: PUSH
21663: LD_VAR 0 5
21667: PUSH
21668: LD_INT 1
21670: PPUSH
21671: LD_VAR 0 5
21675: PPUSH
21676: CALL_OW 12
21680: ARRAY
21681: ST_TO_ADDR
// end ; if weapon then
21682: LD_VAR 0 18
21686: IFFALSE 21804
// begin tmp := CostOfWeapon ( weapon ) ;
21688: LD_ADDR_VAR 0 14
21692: PUSH
21693: LD_VAR 0 18
21697: PPUSH
21698: CALL_OW 451
21702: ST_TO_ADDR
// j := GetBase ( tower ) ;
21703: LD_ADDR_VAR 0 9
21707: PUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 274
21717: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21718: LD_VAR 0 9
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: CALL_OW 275
21730: PUSH
21731: LD_VAR 0 14
21735: PUSH
21736: LD_INT 1
21738: ARRAY
21739: GREATEREQUAL
21740: IFFALSE 21766
21742: PUSH
21743: LD_VAR 0 9
21747: PPUSH
21748: LD_INT 2
21750: PPUSH
21751: CALL_OW 275
21755: PUSH
21756: LD_VAR 0 14
21760: PUSH
21761: LD_INT 2
21763: ARRAY
21764: GREATEREQUAL
21765: AND
21766: IFFALSE 21792
21768: PUSH
21769: LD_VAR 0 9
21773: PPUSH
21774: LD_INT 3
21776: PPUSH
21777: CALL_OW 275
21781: PUSH
21782: LD_VAR 0 14
21786: PUSH
21787: LD_INT 3
21789: ARRAY
21790: GREATEREQUAL
21791: AND
21792: IFFALSE 21804
// result := weapon ;
21794: LD_ADDR_VAR 0 3
21798: PUSH
21799: LD_VAR 0 18
21803: ST_TO_ADDR
// end ; end ;
21804: LD_VAR 0 3
21808: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21809: LD_INT 0
21811: PPUSH
21812: PPUSH
// result := true ;
21813: LD_ADDR_VAR 0 3
21817: PUSH
21818: LD_INT 1
21820: ST_TO_ADDR
// if array1 = array2 then
21821: LD_VAR 0 1
21825: PUSH
21826: LD_VAR 0 2
21830: EQUAL
21831: IFFALSE 21891
// begin for i = 1 to array1 do
21833: LD_ADDR_VAR 0 4
21837: PUSH
21838: DOUBLE
21839: LD_INT 1
21841: DEC
21842: ST_TO_ADDR
21843: LD_VAR 0 1
21847: PUSH
21848: FOR_TO
21849: IFFALSE 21887
// if array1 [ i ] <> array2 [ i ] then
21851: LD_VAR 0 1
21855: PUSH
21856: LD_VAR 0 4
21860: ARRAY
21861: PUSH
21862: LD_VAR 0 2
21866: PUSH
21867: LD_VAR 0 4
21871: ARRAY
21872: NONEQUAL
21873: IFFALSE 21885
// begin result := false ;
21875: LD_ADDR_VAR 0 3
21879: PUSH
21880: LD_INT 0
21882: ST_TO_ADDR
// break ;
21883: GO 21887
// end ;
21885: GO 21848
21887: POP
21888: POP
// end else
21889: GO 21899
// result := false ;
21891: LD_ADDR_VAR 0 3
21895: PUSH
21896: LD_INT 0
21898: ST_TO_ADDR
// end ;
21899: LD_VAR 0 3
21903: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
// if not array1 or not array2 then
21908: LD_VAR 0 1
21912: NOT
21913: IFTRUE 21922
21915: PUSH
21916: LD_VAR 0 2
21920: NOT
21921: OR
21922: IFFALSE 21926
// exit ;
21924: GO 21990
// result := true ;
21926: LD_ADDR_VAR 0 3
21930: PUSH
21931: LD_INT 1
21933: ST_TO_ADDR
// for i = 1 to array1 do
21934: LD_ADDR_VAR 0 4
21938: PUSH
21939: DOUBLE
21940: LD_INT 1
21942: DEC
21943: ST_TO_ADDR
21944: LD_VAR 0 1
21948: PUSH
21949: FOR_TO
21950: IFFALSE 21988
// if array1 [ i ] <> array2 [ i ] then
21952: LD_VAR 0 1
21956: PUSH
21957: LD_VAR 0 4
21961: ARRAY
21962: PUSH
21963: LD_VAR 0 2
21967: PUSH
21968: LD_VAR 0 4
21972: ARRAY
21973: NONEQUAL
21974: IFFALSE 21986
// begin result := false ;
21976: LD_ADDR_VAR 0 3
21980: PUSH
21981: LD_INT 0
21983: ST_TO_ADDR
// break ;
21984: GO 21988
// end ;
21986: GO 21949
21988: POP
21989: POP
// end ;
21990: LD_VAR 0 3
21994: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21995: LD_INT 0
21997: PPUSH
21998: PPUSH
21999: PPUSH
// pom := GetBase ( fac ) ;
22000: LD_ADDR_VAR 0 5
22004: PUSH
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL_OW 274
22014: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22015: LD_ADDR_VAR 0 4
22019: PUSH
22020: LD_VAR 0 2
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: PPUSH
22029: LD_VAR 0 2
22033: PUSH
22034: LD_INT 2
22036: ARRAY
22037: PPUSH
22038: LD_VAR 0 2
22042: PUSH
22043: LD_INT 3
22045: ARRAY
22046: PPUSH
22047: LD_VAR 0 2
22051: PUSH
22052: LD_INT 4
22054: ARRAY
22055: PPUSH
22056: CALL_OW 449
22060: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_VAR 0 5
22070: PPUSH
22071: LD_INT 1
22073: PPUSH
22074: CALL_OW 275
22078: PUSH
22079: LD_VAR 0 4
22083: PUSH
22084: LD_INT 1
22086: ARRAY
22087: GREATEREQUAL
22088: IFFALSE 22114
22090: PUSH
22091: LD_VAR 0 5
22095: PPUSH
22096: LD_INT 2
22098: PPUSH
22099: CALL_OW 275
22103: PUSH
22104: LD_VAR 0 4
22108: PUSH
22109: LD_INT 2
22111: ARRAY
22112: GREATEREQUAL
22113: AND
22114: IFFALSE 22140
22116: PUSH
22117: LD_VAR 0 5
22121: PPUSH
22122: LD_INT 3
22124: PPUSH
22125: CALL_OW 275
22129: PUSH
22130: LD_VAR 0 4
22134: PUSH
22135: LD_INT 3
22137: ARRAY
22138: GREATEREQUAL
22139: AND
22140: ST_TO_ADDR
// end ;
22141: LD_VAR 0 3
22145: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
22150: PPUSH
22151: PPUSH
// pom := GetBase ( building ) ;
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 274
22166: ST_TO_ADDR
// if not pom then
22167: LD_VAR 0 3
22171: NOT
22172: IFFALSE 22176
// exit ;
22174: GO 22350
// btype := GetBType ( building ) ;
22176: LD_ADDR_VAR 0 5
22180: PUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: CALL_OW 266
22190: ST_TO_ADDR
// if btype = b_armoury then
22191: LD_VAR 0 5
22195: PUSH
22196: LD_INT 4
22198: EQUAL
22199: IFFALSE 22209
// btype := b_barracks ;
22201: LD_ADDR_VAR 0 5
22205: PUSH
22206: LD_INT 5
22208: ST_TO_ADDR
// if btype = b_depot then
22209: LD_VAR 0 5
22213: PUSH
22214: LD_INT 0
22216: EQUAL
22217: IFFALSE 22227
// btype := b_warehouse ;
22219: LD_ADDR_VAR 0 5
22223: PUSH
22224: LD_INT 1
22226: ST_TO_ADDR
// if btype = b_workshop then
22227: LD_VAR 0 5
22231: PUSH
22232: LD_INT 2
22234: EQUAL
22235: IFFALSE 22245
// btype := b_factory ;
22237: LD_ADDR_VAR 0 5
22241: PUSH
22242: LD_INT 3
22244: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22245: LD_ADDR_VAR 0 4
22249: PUSH
22250: LD_VAR 0 5
22254: PPUSH
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL_OW 248
22264: PPUSH
22265: CALL_OW 450
22269: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22270: LD_ADDR_VAR 0 2
22274: PUSH
22275: LD_VAR 0 3
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: CALL_OW 275
22287: PUSH
22288: LD_VAR 0 4
22292: PUSH
22293: LD_INT 1
22295: ARRAY
22296: GREATEREQUAL
22297: IFFALSE 22323
22299: PUSH
22300: LD_VAR 0 3
22304: PPUSH
22305: LD_INT 2
22307: PPUSH
22308: CALL_OW 275
22312: PUSH
22313: LD_VAR 0 4
22317: PUSH
22318: LD_INT 2
22320: ARRAY
22321: GREATEREQUAL
22322: AND
22323: IFFALSE 22349
22325: PUSH
22326: LD_VAR 0 3
22330: PPUSH
22331: LD_INT 3
22333: PPUSH
22334: CALL_OW 275
22338: PUSH
22339: LD_VAR 0 4
22343: PUSH
22344: LD_INT 3
22346: ARRAY
22347: GREATEREQUAL
22348: AND
22349: ST_TO_ADDR
// end ;
22350: LD_VAR 0 2
22354: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22355: LD_INT 0
22357: PPUSH
22358: PPUSH
22359: PPUSH
// pom := GetBase ( building ) ;
22360: LD_ADDR_VAR 0 4
22364: PUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 274
22374: ST_TO_ADDR
// if not pom then
22375: LD_VAR 0 4
22379: NOT
22380: IFFALSE 22384
// exit ;
22382: GO 22489
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22384: LD_ADDR_VAR 0 5
22388: PUSH
22389: LD_VAR 0 2
22393: PPUSH
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 248
22403: PPUSH
22404: CALL_OW 450
22408: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22409: LD_ADDR_VAR 0 3
22413: PUSH
22414: LD_VAR 0 4
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 275
22426: PUSH
22427: LD_VAR 0 5
22431: PUSH
22432: LD_INT 1
22434: ARRAY
22435: GREATEREQUAL
22436: IFFALSE 22462
22438: PUSH
22439: LD_VAR 0 4
22443: PPUSH
22444: LD_INT 2
22446: PPUSH
22447: CALL_OW 275
22451: PUSH
22452: LD_VAR 0 5
22456: PUSH
22457: LD_INT 2
22459: ARRAY
22460: GREATEREQUAL
22461: AND
22462: IFFALSE 22488
22464: PUSH
22465: LD_VAR 0 4
22469: PPUSH
22470: LD_INT 3
22472: PPUSH
22473: CALL_OW 275
22477: PUSH
22478: LD_VAR 0 5
22482: PUSH
22483: LD_INT 3
22485: ARRAY
22486: GREATEREQUAL
22487: AND
22488: ST_TO_ADDR
// end ;
22489: LD_VAR 0 3
22493: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22494: LD_INT 0
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
22500: PPUSH
22501: PPUSH
22502: PPUSH
22503: PPUSH
22504: PPUSH
22505: PPUSH
22506: PPUSH
// result := false ;
22507: LD_ADDR_VAR 0 8
22511: PUSH
22512: LD_INT 0
22514: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22515: LD_VAR 0 5
22519: NOT
22520: IFTRUE 22529
22522: PUSH
22523: LD_VAR 0 1
22527: NOT
22528: OR
22529: IFTRUE 22538
22531: PUSH
22532: LD_VAR 0 2
22536: NOT
22537: OR
22538: IFTRUE 22547
22540: PUSH
22541: LD_VAR 0 3
22545: NOT
22546: OR
22547: IFFALSE 22551
// exit ;
22549: GO 23377
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22551: LD_ADDR_VAR 0 14
22555: PUSH
22556: LD_VAR 0 1
22560: PPUSH
22561: LD_VAR 0 2
22565: PPUSH
22566: LD_VAR 0 3
22570: PPUSH
22571: LD_VAR 0 4
22575: PPUSH
22576: LD_VAR 0 5
22580: PUSH
22581: LD_INT 1
22583: ARRAY
22584: PPUSH
22585: CALL_OW 248
22589: PPUSH
22590: LD_INT 0
22592: PPUSH
22593: CALL 24658 0 6
22597: ST_TO_ADDR
// if not hexes then
22598: LD_VAR 0 14
22602: NOT
22603: IFFALSE 22607
// exit ;
22605: GO 23377
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22607: LD_ADDR_VAR 0 17
22611: PUSH
22612: LD_VAR 0 5
22616: PPUSH
22617: LD_INT 22
22619: PUSH
22620: LD_VAR 0 13
22624: PPUSH
22625: CALL_OW 255
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 30
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 30
22649: PUSH
22650: LD_INT 1
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: LIST
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PPUSH
22666: CALL_OW 72
22670: ST_TO_ADDR
// for i = 1 to hexes do
22671: LD_ADDR_VAR 0 9
22675: PUSH
22676: DOUBLE
22677: LD_INT 1
22679: DEC
22680: ST_TO_ADDR
22681: LD_VAR 0 14
22685: PUSH
22686: FOR_TO
22687: IFFALSE 23375
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22689: LD_ADDR_VAR 0 13
22693: PUSH
22694: LD_VAR 0 14
22698: PUSH
22699: LD_VAR 0 9
22703: ARRAY
22704: PUSH
22705: LD_INT 1
22707: ARRAY
22708: PPUSH
22709: LD_VAR 0 14
22713: PUSH
22714: LD_VAR 0 9
22718: ARRAY
22719: PUSH
22720: LD_INT 2
22722: ARRAY
22723: PPUSH
22724: CALL_OW 428
22728: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22729: LD_VAR 0 14
22733: PUSH
22734: LD_VAR 0 9
22738: ARRAY
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: LD_VAR 0 14
22748: PUSH
22749: LD_VAR 0 9
22753: ARRAY
22754: PUSH
22755: LD_INT 2
22757: ARRAY
22758: PPUSH
22759: CALL_OW 351
22763: IFTRUE 22802
22765: PUSH
22766: LD_VAR 0 14
22770: PUSH
22771: LD_VAR 0 9
22775: ARRAY
22776: PUSH
22777: LD_INT 1
22779: ARRAY
22780: PPUSH
22781: LD_VAR 0 14
22785: PUSH
22786: LD_VAR 0 9
22790: ARRAY
22791: PUSH
22792: LD_INT 2
22794: ARRAY
22795: PPUSH
22796: CALL_OW 488
22800: NOT
22801: OR
22802: IFTRUE 22819
22804: PUSH
22805: LD_VAR 0 13
22809: PPUSH
22810: CALL_OW 247
22814: PUSH
22815: LD_INT 3
22817: EQUAL
22818: OR
22819: IFFALSE 22825
// exit ;
22821: POP
22822: POP
22823: GO 23377
// if not tmp then
22825: LD_VAR 0 13
22829: NOT
22830: IFFALSE 22834
// continue ;
22832: GO 22686
// result := true ;
22834: LD_ADDR_VAR 0 8
22838: PUSH
22839: LD_INT 1
22841: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22842: LD_VAR 0 6
22846: IFFALSE 22863
22848: PUSH
22849: LD_VAR 0 13
22853: PPUSH
22854: CALL_OW 247
22858: PUSH
22859: LD_INT 2
22861: EQUAL
22862: AND
22863: IFFALSE 22880
22865: PUSH
22866: LD_VAR 0 13
22870: PPUSH
22871: CALL_OW 263
22875: PUSH
22876: LD_INT 1
22878: EQUAL
22879: AND
22880: IFFALSE 23044
// begin if IsDrivenBy ( tmp ) then
22882: LD_VAR 0 13
22886: PPUSH
22887: CALL_OW 311
22891: IFFALSE 22895
// continue ;
22893: GO 22686
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22895: LD_VAR 0 6
22899: PPUSH
22900: LD_INT 3
22902: PUSH
22903: LD_INT 60
22905: PUSH
22906: EMPTY
22907: LIST
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 3
22915: PUSH
22916: LD_INT 55
22918: PUSH
22919: EMPTY
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 72
22934: IFFALSE 23042
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22936: LD_ADDR_VAR 0 18
22940: PUSH
22941: LD_VAR 0 6
22945: PPUSH
22946: LD_INT 3
22948: PUSH
22949: LD_INT 60
22951: PUSH
22952: EMPTY
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 3
22961: PUSH
22962: LD_INT 55
22964: PUSH
22965: EMPTY
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PPUSH
22976: CALL_OW 72
22980: PUSH
22981: LD_INT 1
22983: ARRAY
22984: ST_TO_ADDR
// if IsInUnit ( driver ) then
22985: LD_VAR 0 18
22989: PPUSH
22990: CALL_OW 310
22994: IFFALSE 23005
// ComExit ( driver ) ;
22996: LD_VAR 0 18
23000: PPUSH
23001: CALL 48648 0 1
// AddComEnterUnit ( driver , tmp ) ;
23005: LD_VAR 0 18
23009: PPUSH
23010: LD_VAR 0 13
23014: PPUSH
23015: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23019: LD_VAR 0 18
23023: PPUSH
23024: LD_VAR 0 7
23028: PPUSH
23029: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23033: LD_VAR 0 18
23037: PPUSH
23038: CALL_OW 181
// end ; continue ;
23042: GO 22686
// end ; if not cleaners or not tmp in cleaners then
23044: LD_VAR 0 6
23048: NOT
23049: IFTRUE 23064
23051: PUSH
23052: LD_VAR 0 13
23056: PUSH
23057: LD_VAR 0 6
23061: IN
23062: NOT
23063: OR
23064: IFFALSE 23373
// begin if dep then
23066: LD_VAR 0 17
23070: IFFALSE 23206
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23072: LD_ADDR_VAR 0 16
23076: PUSH
23077: LD_VAR 0 17
23081: PUSH
23082: LD_INT 1
23084: ARRAY
23085: PPUSH
23086: CALL_OW 250
23090: PPUSH
23091: LD_VAR 0 17
23095: PUSH
23096: LD_INT 1
23098: ARRAY
23099: PPUSH
23100: CALL_OW 254
23104: PPUSH
23105: LD_INT 5
23107: PPUSH
23108: CALL_OW 272
23112: PUSH
23113: LD_VAR 0 17
23117: PUSH
23118: LD_INT 1
23120: ARRAY
23121: PPUSH
23122: CALL_OW 251
23126: PPUSH
23127: LD_VAR 0 17
23131: PUSH
23132: LD_INT 1
23134: ARRAY
23135: PPUSH
23136: CALL_OW 254
23140: PPUSH
23141: LD_INT 5
23143: PPUSH
23144: CALL_OW 273
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23153: LD_VAR 0 16
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: LD_VAR 0 16
23166: PUSH
23167: LD_INT 2
23169: ARRAY
23170: PPUSH
23171: CALL_OW 488
23175: IFFALSE 23206
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23177: LD_VAR 0 13
23181: PPUSH
23182: LD_VAR 0 16
23186: PUSH
23187: LD_INT 1
23189: ARRAY
23190: PPUSH
23191: LD_VAR 0 16
23195: PUSH
23196: LD_INT 2
23198: ARRAY
23199: PPUSH
23200: CALL_OW 111
// continue ;
23204: GO 22686
// end ; end ; r := GetDir ( tmp ) ;
23206: LD_ADDR_VAR 0 15
23210: PUSH
23211: LD_VAR 0 13
23215: PPUSH
23216: CALL_OW 254
23220: ST_TO_ADDR
// if r = 5 then
23221: LD_VAR 0 15
23225: PUSH
23226: LD_INT 5
23228: EQUAL
23229: IFFALSE 23239
// r := 0 ;
23231: LD_ADDR_VAR 0 15
23235: PUSH
23236: LD_INT 0
23238: ST_TO_ADDR
// for j = r to 5 do
23239: LD_ADDR_VAR 0 10
23243: PUSH
23244: DOUBLE
23245: LD_VAR 0 15
23249: DEC
23250: ST_TO_ADDR
23251: LD_INT 5
23253: PUSH
23254: FOR_TO
23255: IFFALSE 23371
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23257: LD_ADDR_VAR 0 11
23261: PUSH
23262: LD_VAR 0 13
23266: PPUSH
23267: CALL_OW 250
23271: PPUSH
23272: LD_VAR 0 10
23276: PPUSH
23277: LD_INT 2
23279: PPUSH
23280: CALL_OW 272
23284: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23285: LD_ADDR_VAR 0 12
23289: PUSH
23290: LD_VAR 0 13
23294: PPUSH
23295: CALL_OW 251
23299: PPUSH
23300: LD_VAR 0 10
23304: PPUSH
23305: LD_INT 2
23307: PPUSH
23308: CALL_OW 273
23312: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23313: LD_VAR 0 11
23317: PPUSH
23318: LD_VAR 0 12
23322: PPUSH
23323: CALL_OW 488
23327: IFFALSE 23346
23329: PUSH
23330: LD_VAR 0 11
23334: PPUSH
23335: LD_VAR 0 12
23339: PPUSH
23340: CALL_OW 428
23344: NOT
23345: AND
23346: IFFALSE 23369
// begin ComMoveXY ( tmp , _x , _y ) ;
23348: LD_VAR 0 13
23352: PPUSH
23353: LD_VAR 0 11
23357: PPUSH
23358: LD_VAR 0 12
23362: PPUSH
23363: CALL_OW 111
// break ;
23367: GO 23371
// end ; end ;
23369: GO 23254
23371: POP
23372: POP
// end ; end ;
23373: GO 22686
23375: POP
23376: POP
// end ;
23377: LD_VAR 0 8
23381: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23382: LD_INT 0
23384: PPUSH
// result := true ;
23385: LD_ADDR_VAR 0 3
23389: PUSH
23390: LD_INT 1
23392: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23393: LD_VAR 0 2
23397: PUSH
23398: LD_INT 24
23400: DOUBLE
23401: EQUAL
23402: IFTRUE 23412
23404: LD_INT 33
23406: DOUBLE
23407: EQUAL
23408: IFTRUE 23412
23410: GO 23437
23412: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23413: LD_ADDR_VAR 0 3
23417: PUSH
23418: LD_INT 32
23420: PPUSH
23421: LD_VAR 0 1
23425: PPUSH
23426: CALL_OW 321
23430: PUSH
23431: LD_INT 2
23433: EQUAL
23434: ST_TO_ADDR
23435: GO 23753
23437: LD_INT 20
23439: DOUBLE
23440: EQUAL
23441: IFTRUE 23445
23443: GO 23470
23445: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23446: LD_ADDR_VAR 0 3
23450: PUSH
23451: LD_INT 6
23453: PPUSH
23454: LD_VAR 0 1
23458: PPUSH
23459: CALL_OW 321
23463: PUSH
23464: LD_INT 2
23466: EQUAL
23467: ST_TO_ADDR
23468: GO 23753
23470: LD_INT 22
23472: DOUBLE
23473: EQUAL
23474: IFTRUE 23484
23476: LD_INT 36
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23509
23484: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 15
23492: PPUSH
23493: LD_VAR 0 1
23497: PPUSH
23498: CALL_OW 321
23502: PUSH
23503: LD_INT 2
23505: EQUAL
23506: ST_TO_ADDR
23507: GO 23753
23509: LD_INT 30
23511: DOUBLE
23512: EQUAL
23513: IFTRUE 23517
23515: GO 23542
23517: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23518: LD_ADDR_VAR 0 3
23522: PUSH
23523: LD_INT 20
23525: PPUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 321
23535: PUSH
23536: LD_INT 2
23538: EQUAL
23539: ST_TO_ADDR
23540: GO 23753
23542: LD_INT 28
23544: DOUBLE
23545: EQUAL
23546: IFTRUE 23556
23548: LD_INT 21
23550: DOUBLE
23551: EQUAL
23552: IFTRUE 23556
23554: GO 23581
23556: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23557: LD_ADDR_VAR 0 3
23561: PUSH
23562: LD_INT 21
23564: PPUSH
23565: LD_VAR 0 1
23569: PPUSH
23570: CALL_OW 321
23574: PUSH
23575: LD_INT 2
23577: EQUAL
23578: ST_TO_ADDR
23579: GO 23753
23581: LD_INT 16
23583: DOUBLE
23584: EQUAL
23585: IFTRUE 23589
23587: GO 23614
23589: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23590: LD_ADDR_VAR 0 3
23594: PUSH
23595: LD_INT 84
23597: PPUSH
23598: LD_VAR 0 1
23602: PPUSH
23603: CALL_OW 321
23607: PUSH
23608: LD_INT 2
23610: EQUAL
23611: ST_TO_ADDR
23612: GO 23753
23614: LD_INT 19
23616: DOUBLE
23617: EQUAL
23618: IFTRUE 23628
23620: LD_INT 23
23622: DOUBLE
23623: EQUAL
23624: IFTRUE 23628
23626: GO 23653
23628: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: LD_INT 83
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 321
23646: PUSH
23647: LD_INT 2
23649: EQUAL
23650: ST_TO_ADDR
23651: GO 23753
23653: LD_INT 17
23655: DOUBLE
23656: EQUAL
23657: IFTRUE 23661
23659: GO 23686
23661: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23662: LD_ADDR_VAR 0 3
23666: PUSH
23667: LD_INT 39
23669: PPUSH
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 321
23679: PUSH
23680: LD_INT 2
23682: EQUAL
23683: ST_TO_ADDR
23684: GO 23753
23686: LD_INT 18
23688: DOUBLE
23689: EQUAL
23690: IFTRUE 23694
23692: GO 23719
23694: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23695: LD_ADDR_VAR 0 3
23699: PUSH
23700: LD_INT 40
23702: PPUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 321
23712: PUSH
23713: LD_INT 2
23715: EQUAL
23716: ST_TO_ADDR
23717: GO 23753
23719: LD_INT 27
23721: DOUBLE
23722: EQUAL
23723: IFTRUE 23727
23725: GO 23752
23727: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23728: LD_ADDR_VAR 0 3
23732: PUSH
23733: LD_INT 35
23735: PPUSH
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 321
23745: PUSH
23746: LD_INT 2
23748: EQUAL
23749: ST_TO_ADDR
23750: GO 23753
23752: POP
// end ;
23753: LD_VAR 0 3
23757: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23758: LD_INT 0
23760: PPUSH
23761: PPUSH
23762: PPUSH
23763: PPUSH
23764: PPUSH
23765: PPUSH
23766: PPUSH
23767: PPUSH
23768: PPUSH
23769: PPUSH
23770: PPUSH
// result := false ;
23771: LD_ADDR_VAR 0 6
23775: PUSH
23776: LD_INT 0
23778: ST_TO_ADDR
// if btype = b_depot then
23779: LD_VAR 0 2
23783: PUSH
23784: LD_INT 0
23786: EQUAL
23787: IFFALSE 23799
// begin result := true ;
23789: LD_ADDR_VAR 0 6
23793: PUSH
23794: LD_INT 1
23796: ST_TO_ADDR
// exit ;
23797: GO 24653
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23799: LD_VAR 0 1
23803: NOT
23804: IFTRUE 23829
23806: PUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL_OW 266
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: IN
23827: NOT
23828: OR
23829: IFTRUE 23838
23831: PUSH
23832: LD_VAR 0 2
23836: NOT
23837: OR
23838: IFTRUE 23874
23840: PUSH
23841: LD_VAR 0 5
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 4
23860: PUSH
23861: LD_INT 5
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: IN
23872: NOT
23873: OR
23874: IFTRUE 23893
23876: PUSH
23877: LD_VAR 0 3
23881: PPUSH
23882: LD_VAR 0 4
23886: PPUSH
23887: CALL_OW 488
23891: NOT
23892: OR
23893: IFFALSE 23897
// exit ;
23895: GO 24653
// side := GetSide ( depot ) ;
23897: LD_ADDR_VAR 0 9
23901: PUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 255
23911: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23912: LD_VAR 0 9
23916: PPUSH
23917: LD_VAR 0 2
23921: PPUSH
23922: CALL 23382 0 2
23926: NOT
23927: IFFALSE 23931
// exit ;
23929: GO 24653
// pom := GetBase ( depot ) ;
23931: LD_ADDR_VAR 0 10
23935: PUSH
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 274
23945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23946: LD_ADDR_VAR 0 11
23950: PUSH
23951: LD_VAR 0 2
23955: PPUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 248
23965: PPUSH
23966: CALL_OW 450
23970: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23971: LD_VAR 0 10
23975: PPUSH
23976: LD_INT 1
23978: PPUSH
23979: CALL_OW 275
23983: PUSH
23984: LD_VAR 0 11
23988: PUSH
23989: LD_INT 1
23991: ARRAY
23992: GREATEREQUAL
23993: IFFALSE 24019
23995: PUSH
23996: LD_VAR 0 10
24000: PPUSH
24001: LD_INT 2
24003: PPUSH
24004: CALL_OW 275
24008: PUSH
24009: LD_VAR 0 11
24013: PUSH
24014: LD_INT 2
24016: ARRAY
24017: GREATEREQUAL
24018: AND
24019: IFFALSE 24045
24021: PUSH
24022: LD_VAR 0 10
24026: PPUSH
24027: LD_INT 3
24029: PPUSH
24030: CALL_OW 275
24034: PUSH
24035: LD_VAR 0 11
24039: PUSH
24040: LD_INT 3
24042: ARRAY
24043: GREATEREQUAL
24044: AND
24045: NOT
24046: IFFALSE 24050
// exit ;
24048: GO 24653
// if GetBType ( depot ) = b_depot then
24050: LD_VAR 0 1
24054: PPUSH
24055: CALL_OW 266
24059: PUSH
24060: LD_INT 0
24062: EQUAL
24063: IFFALSE 24075
// dist := 28 else
24065: LD_ADDR_VAR 0 14
24069: PUSH
24070: LD_INT 28
24072: ST_TO_ADDR
24073: GO 24083
// dist := 36 ;
24075: LD_ADDR_VAR 0 14
24079: PUSH
24080: LD_INT 36
24082: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24083: LD_VAR 0 1
24087: PPUSH
24088: LD_VAR 0 3
24092: PPUSH
24093: LD_VAR 0 4
24097: PPUSH
24098: CALL_OW 297
24102: PUSH
24103: LD_VAR 0 14
24107: GREATER
24108: IFFALSE 24112
// exit ;
24110: GO 24653
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24112: LD_ADDR_VAR 0 12
24116: PUSH
24117: LD_VAR 0 2
24121: PPUSH
24122: LD_VAR 0 3
24126: PPUSH
24127: LD_VAR 0 4
24131: PPUSH
24132: LD_VAR 0 5
24136: PPUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 248
24146: PPUSH
24147: LD_INT 0
24149: PPUSH
24150: CALL 24658 0 6
24154: ST_TO_ADDR
// if not hexes then
24155: LD_VAR 0 12
24159: NOT
24160: IFFALSE 24164
// exit ;
24162: GO 24653
// hex := GetHexInfo ( x , y ) ;
24164: LD_ADDR_VAR 0 15
24168: PUSH
24169: LD_VAR 0 3
24173: PPUSH
24174: LD_VAR 0 4
24178: PPUSH
24179: CALL_OW 546
24183: ST_TO_ADDR
// if hex [ 1 ] then
24184: LD_VAR 0 15
24188: PUSH
24189: LD_INT 1
24191: ARRAY
24192: IFFALSE 24196
// exit ;
24194: GO 24653
// height := hex [ 2 ] ;
24196: LD_ADDR_VAR 0 13
24200: PUSH
24201: LD_VAR 0 15
24205: PUSH
24206: LD_INT 2
24208: ARRAY
24209: ST_TO_ADDR
// for i = 1 to hexes do
24210: LD_ADDR_VAR 0 7
24214: PUSH
24215: DOUBLE
24216: LD_INT 1
24218: DEC
24219: ST_TO_ADDR
24220: LD_VAR 0 12
24224: PUSH
24225: FOR_TO
24226: IFFALSE 24570
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24228: LD_VAR 0 12
24232: PUSH
24233: LD_VAR 0 7
24237: ARRAY
24238: PUSH
24239: LD_INT 1
24241: ARRAY
24242: PPUSH
24243: LD_VAR 0 12
24247: PUSH
24248: LD_VAR 0 7
24252: ARRAY
24253: PUSH
24254: LD_INT 2
24256: ARRAY
24257: PPUSH
24258: CALL_OW 488
24262: NOT
24263: IFTRUE 24305
24265: PUSH
24266: LD_VAR 0 12
24270: PUSH
24271: LD_VAR 0 7
24275: ARRAY
24276: PUSH
24277: LD_INT 1
24279: ARRAY
24280: PPUSH
24281: LD_VAR 0 12
24285: PUSH
24286: LD_VAR 0 7
24290: ARRAY
24291: PUSH
24292: LD_INT 2
24294: ARRAY
24295: PPUSH
24296: CALL_OW 428
24300: PUSH
24301: LD_INT 0
24303: GREATER
24304: OR
24305: IFTRUE 24343
24307: PUSH
24308: LD_VAR 0 12
24312: PUSH
24313: LD_VAR 0 7
24317: ARRAY
24318: PUSH
24319: LD_INT 1
24321: ARRAY
24322: PPUSH
24323: LD_VAR 0 12
24327: PUSH
24328: LD_VAR 0 7
24332: ARRAY
24333: PUSH
24334: LD_INT 2
24336: ARRAY
24337: PPUSH
24338: CALL_OW 351
24342: OR
24343: IFFALSE 24349
// exit ;
24345: POP
24346: POP
24347: GO 24653
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24349: LD_ADDR_VAR 0 8
24353: PUSH
24354: LD_VAR 0 12
24358: PUSH
24359: LD_VAR 0 7
24363: ARRAY
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: PPUSH
24369: LD_VAR 0 12
24373: PUSH
24374: LD_VAR 0 7
24378: ARRAY
24379: PUSH
24380: LD_INT 2
24382: ARRAY
24383: PPUSH
24384: CALL_OW 546
24388: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24389: LD_VAR 0 8
24393: PUSH
24394: LD_INT 1
24396: ARRAY
24397: IFTRUE 24419
24399: PUSH
24400: LD_VAR 0 8
24404: PUSH
24405: LD_INT 2
24407: ARRAY
24408: PUSH
24409: LD_VAR 0 13
24413: PUSH
24414: LD_INT 2
24416: PLUS
24417: GREATER
24418: OR
24419: IFTRUE 24441
24421: PUSH
24422: LD_VAR 0 8
24426: PUSH
24427: LD_INT 2
24429: ARRAY
24430: PUSH
24431: LD_VAR 0 13
24435: PUSH
24436: LD_INT 2
24438: MINUS
24439: LESS
24440: OR
24441: IFTRUE 24509
24443: PUSH
24444: LD_VAR 0 8
24448: PUSH
24449: LD_INT 3
24451: ARRAY
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 8
24458: PUSH
24459: LD_INT 9
24461: PUSH
24462: LD_INT 10
24464: PUSH
24465: LD_INT 11
24467: PUSH
24468: LD_INT 12
24470: PUSH
24471: LD_INT 13
24473: PUSH
24474: LD_INT 16
24476: PUSH
24477: LD_INT 17
24479: PUSH
24480: LD_INT 18
24482: PUSH
24483: LD_INT 19
24485: PUSH
24486: LD_INT 20
24488: PUSH
24489: LD_INT 21
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: IN
24507: NOT
24508: OR
24509: IFTRUE 24522
24511: PUSH
24512: LD_VAR 0 8
24516: PUSH
24517: LD_INT 5
24519: ARRAY
24520: NOT
24521: OR
24522: IFTRUE 24562
24524: PUSH
24525: LD_VAR 0 8
24529: PUSH
24530: LD_INT 6
24532: ARRAY
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: LD_INT 2
24539: PUSH
24540: LD_INT 7
24542: PUSH
24543: LD_INT 9
24545: PUSH
24546: LD_INT 10
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: IN
24560: NOT
24561: OR
24562: IFFALSE 24568
// exit ;
24564: POP
24565: POP
24566: GO 24653
// end ;
24568: GO 24225
24570: POP
24571: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24572: LD_VAR 0 9
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: LD_VAR 0 4
24586: PPUSH
24587: LD_INT 20
24589: PPUSH
24590: CALL 16472 0 4
24594: PUSH
24595: LD_INT 4
24597: ARRAY
24598: IFFALSE 24602
// exit ;
24600: GO 24653
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24602: LD_VAR 0 2
24606: PUSH
24607: LD_INT 29
24609: PUSH
24610: LD_INT 30
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: IN
24617: IFFALSE 24641
24619: PUSH
24620: LD_VAR 0 3
24624: PPUSH
24625: LD_VAR 0 4
24629: PPUSH
24630: LD_VAR 0 9
24634: PPUSH
24635: CALL_OW 440
24639: NOT
24640: AND
24641: IFFALSE 24645
// exit ;
24643: GO 24653
// result := true ;
24645: LD_ADDR_VAR 0 6
24649: PUSH
24650: LD_INT 1
24652: ST_TO_ADDR
// end ;
24653: LD_VAR 0 6
24657: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24658: LD_INT 0
24660: PPUSH
24661: PPUSH
24662: PPUSH
24663: PPUSH
24664: PPUSH
24665: PPUSH
24666: PPUSH
24667: PPUSH
24668: PPUSH
24669: PPUSH
24670: PPUSH
24671: PPUSH
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
24676: PPUSH
24677: PPUSH
24678: PPUSH
24679: PPUSH
24680: PPUSH
24681: PPUSH
24682: PPUSH
24683: PPUSH
24684: PPUSH
24685: PPUSH
24686: PPUSH
24687: PPUSH
24688: PPUSH
24689: PPUSH
24690: PPUSH
24691: PPUSH
24692: PPUSH
24693: PPUSH
24694: PPUSH
24695: PPUSH
24696: PPUSH
24697: PPUSH
24698: PPUSH
24699: PPUSH
24700: PPUSH
24701: PPUSH
24702: PPUSH
24703: PPUSH
24704: PPUSH
24705: PPUSH
24706: PPUSH
24707: PPUSH
24708: PPUSH
24709: PPUSH
24710: PPUSH
24711: PPUSH
24712: PPUSH
24713: PPUSH
24714: PPUSH
24715: PPUSH
24716: PPUSH
24717: PPUSH
// result = [ ] ;
24718: LD_ADDR_VAR 0 7
24722: PUSH
24723: EMPTY
24724: ST_TO_ADDR
// temp_list = [ ] ;
24725: LD_ADDR_VAR 0 9
24729: PUSH
24730: EMPTY
24731: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24732: LD_VAR 0 4
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 3
24748: PUSH
24749: LD_INT 4
24751: PUSH
24752: LD_INT 5
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: IN
24763: NOT
24764: IFTRUE 24807
24766: PUSH
24767: LD_VAR 0 1
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: IN
24782: IFFALSE 24806
24784: PUSH
24785: LD_VAR 0 5
24789: PUSH
24790: LD_INT 1
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: LD_INT 3
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: IN
24804: NOT
24805: AND
24806: OR
24807: IFFALSE 24811
// exit ;
24809: GO 43210
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24811: LD_VAR 0 1
24815: PUSH
24816: LD_INT 6
24818: PUSH
24819: LD_INT 7
24821: PUSH
24822: LD_INT 8
24824: PUSH
24825: LD_INT 13
24827: PUSH
24828: LD_INT 12
24830: PUSH
24831: LD_INT 15
24833: PUSH
24834: LD_INT 11
24836: PUSH
24837: LD_INT 14
24839: PUSH
24840: LD_INT 10
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: IN
24854: IFFALSE 24864
// btype = b_lab ;
24856: LD_ADDR_VAR 0 1
24860: PUSH
24861: LD_INT 6
24863: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24864: LD_VAR 0 6
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: IN
24883: NOT
24884: IFTRUE 24952
24886: PUSH
24887: LD_VAR 0 1
24891: PUSH
24892: LD_INT 0
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 2
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 6
24906: PUSH
24907: LD_INT 36
24909: PUSH
24910: LD_INT 4
24912: PUSH
24913: LD_INT 5
24915: PUSH
24916: LD_INT 31
24918: PUSH
24919: LD_INT 32
24921: PUSH
24922: LD_INT 33
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: IN
24938: NOT
24939: IFFALSE 24951
24941: PUSH
24942: LD_VAR 0 6
24946: PUSH
24947: LD_INT 1
24949: EQUAL
24950: AND
24951: OR
24952: IFTRUE 24984
24954: PUSH
24955: LD_VAR 0 1
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: IN
24970: NOT
24971: IFFALSE 24983
24973: PUSH
24974: LD_VAR 0 6
24978: PUSH
24979: LD_INT 2
24981: EQUAL
24982: AND
24983: OR
24984: IFFALSE 24994
// mode = 0 ;
24986: LD_ADDR_VAR 0 6
24990: PUSH
24991: LD_INT 0
24993: ST_TO_ADDR
// case mode of 0 :
24994: LD_VAR 0 6
24998: PUSH
24999: LD_INT 0
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 36460
25007: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25008: LD_ADDR_VAR 0 11
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 0
25025: PUSH
25026: LD_INT 1
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 0
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: LD_INT 1
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 2
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: LD_INT 3
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25201: LD_ADDR_VAR 0 12
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 1
25259: NEG
25260: PUSH
25261: LD_INT 0
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 2
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 2
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 2
25324: NEG
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 2
25335: NEG
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 2
25347: NEG
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 3
25358: NEG
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 3
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25397: LD_ADDR_VAR 0 13
25401: PUSH
25402: LD_INT 0
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 1
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 1
25510: PUSH
25511: LD_INT 2
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: LD_INT 2
25536: NEG
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: NEG
25545: PUSH
25546: LD_INT 3
25548: NEG
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 3
25556: NEG
25557: PUSH
25558: LD_INT 2
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 3
25568: NEG
25569: PUSH
25570: LD_INT 3
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25596: LD_ADDR_VAR 0 14
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 1
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 1
25665: NEG
25666: PUSH
25667: LD_INT 1
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: NEG
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 2
25692: NEG
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: LD_INT 1
25703: NEG
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: LD_INT 3
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 3
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: LD_INT 2
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25792: LD_ADDR_VAR 0 15
25796: PUSH
25797: LD_INT 0
25799: PUSH
25800: LD_INT 0
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 0
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 1
25820: PUSH
25821: LD_INT 0
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 1
25850: NEG
25851: PUSH
25852: LD_INT 0
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: LD_INT 1
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: LD_INT 1
25876: NEG
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 2
25926: NEG
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 2
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 3
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 3
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25985: LD_ADDR_VAR 0 16
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 1
26043: NEG
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 1
26066: NEG
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 2
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 1
26098: PUSH
26099: LD_INT 2
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: NEG
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 2
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 3
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 2
26152: PUSH
26153: LD_INT 3
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26178: LD_ADDR_VAR 0 17
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: LD_INT 0
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 1
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: NEG
26248: PUSH
26249: LD_INT 1
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 2
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: LD_INT 2
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: NEG
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: NEG
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26408: LD_ADDR_VAR 0 18
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 0
26425: PUSH
26426: LD_INT 1
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 0
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: NEG
26490: PUSH
26491: LD_INT 2
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 2
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 2
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 1
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: LD_INT 1
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 2
26607: NEG
26608: PUSH
26609: LD_INT 2
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26638: LD_ADDR_VAR 0 19
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 0
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 1
26707: NEG
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 0
26731: PUSH
26732: LD_INT 2
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: LD_INT 2
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26868: LD_ADDR_VAR 0 20
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PUSH
26935: LD_INT 1
26937: NEG
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: LD_INT 2
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27098: LD_ADDR_VAR 0 21
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 0
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: LD_INT 1
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: LD_INT 2
27183: NEG
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: LD_INT 2
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 2
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: LD_INT 2
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 2
27297: NEG
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27328: LD_ADDR_VAR 0 22
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 0
27421: PUSH
27422: LD_INT 2
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 2
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 2
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 2
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 2
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 2
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 2
27527: NEG
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27558: LD_ADDR_VAR 0 23
27562: PUSH
27563: LD_INT 0
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 1
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 0
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: LD_INT 1
27631: NEG
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 2
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 0
27651: PUSH
27652: LD_INT 2
27654: NEG
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PUSH
27681: LD_INT 2
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 2
27734: NEG
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: NEG
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 2
27769: NEG
27770: PUSH
27771: LD_INT 3
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 3
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27838: LD_ADDR_VAR 0 24
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 0
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: LD_INT 1
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: NEG
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: LD_INT 2
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: NEG
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: NEG
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 2
28052: NEG
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 3
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 3
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28114: LD_ADDR_VAR 0 25
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 0
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: LD_INT 2
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 1
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 0
28269: PUSH
28270: LD_INT 2
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: NEG
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: NEG
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 3
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28388: LD_ADDR_VAR 0 26
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 0
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: NEG
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 2
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: NEG
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 2
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: NEG
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 3
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28664: LD_ADDR_VAR 0 27
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 2
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 3
28897: NEG
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 3
28909: NEG
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28944: LD_ADDR_VAR 0 28
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: NEG
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: NEG
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 2
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: LD_INT 2
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: NEG
29144: PUSH
29145: LD_INT 2
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: LD_INT 3
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: LD_INT 3
29171: NEG
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 3
29179: NEG
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 3
29191: NEG
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29226: LD_ADDR_VAR 0 29
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 1
29307: NEG
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: NEG
29417: PUSH
29418: LD_INT 3
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 1
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 3
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 3
29470: NEG
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29505: LD_ADDR_VAR 0 30
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 1
29525: NEG
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 0
29553: PUSH
29554: LD_INT 1
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: NEG
29575: PUSH
29576: LD_INT 1
29578: NEG
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 1
29586: NEG
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: LD_INT 1
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: PUSH
29651: LD_INT 2
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: LD_INT 2
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: NEG
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 3
29748: NEG
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29783: LD_ADDR_VAR 0 31
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 0
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 1
29879: NEG
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 2
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: LD_INT 2
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 2
29972: NEG
29973: PUSH
29974: LD_INT 3
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 3
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 2
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 3
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30061: LD_ADDR_VAR 0 32
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 1
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 0
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: LD_INT 1
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 2
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 2
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: LD_INT 2
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: LD_INT 1
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: LD_INT 3
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: LD_INT 2
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 3
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30339: LD_ADDR_VAR 0 33
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 2
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 3
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: LD_INT 3
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30618: LD_ADDR_VAR 0 34
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: PUSH
30744: LD_INT 2
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 3
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30898: LD_ADDR_VAR 0 35
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 0
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: NEG
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: NEG
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31010: LD_ADDR_VAR 0 36
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: NEG
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 2
31095: NEG
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31122: LD_ADDR_VAR 0 37
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 0
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 1
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: NEG
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31234: LD_ADDR_VAR 0 38
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: NEG
31304: PUSH
31305: LD_INT 1
31307: NEG
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: LD_INT 1
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 2
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31346: LD_ADDR_VAR 0 39
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: LD_INT 1
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31458: LD_ADDR_VAR 0 40
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 0
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 0
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: LD_INT 0
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: NEG
31551: PUSH
31552: LD_INT 1
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31570: LD_ADDR_VAR 0 41
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 1
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: LD_INT 2
31655: NEG
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: PUSH
31695: LD_INT 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: LD_INT 1
31740: NEG
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: LD_INT 2
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: NEG
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 3
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 2
31833: NEG
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 3
31844: NEG
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 3
31855: NEG
31856: PUSH
31857: LD_INT 1
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 3
31867: NEG
31868: PUSH
31869: LD_INT 2
31871: NEG
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 3
31879: NEG
31880: PUSH
31881: LD_INT 3
31883: NEG
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31920: LD_ADDR_VAR 0 42
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 2
32005: NEG
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 2
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 2
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: LD_INT 3
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 3
32156: PUSH
32157: LD_INT 2
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: LD_INT 3
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: LD_INT 3
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 3
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 3
32229: NEG
32230: PUSH
32231: LD_INT 3
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32270: LD_ADDR_VAR 0 43
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 1
32290: NEG
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 1
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 1
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 2
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 2
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: LD_INT 1
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: NEG
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 3
32577: NEG
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32618: LD_ADDR_VAR 0 44
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 2
32796: NEG
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: NEG
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 3
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 3
32915: NEG
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: LD_INT 3
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32968: LD_ADDR_VAR 0 45
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 1
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 1
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 2
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: LD_INT 1
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 3
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: LD_INT 2
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 3
33214: PUSH
33215: LD_INT 3
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: LD_INT 3
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: LD_INT 3
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: LD_INT 3
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: NEG
33255: PUSH
33256: LD_INT 2
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 3
33277: NEG
33278: PUSH
33279: LD_INT 3
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33318: LD_ADDR_VAR 0 46
33322: PUSH
33323: LD_INT 0
33325: PUSH
33326: LD_INT 0
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 0
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 3
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 3
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 3
33625: NEG
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33666: LD_ADDR_VAR 0 47
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 0
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: NEG
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33817: LD_ADDR_VAR 0 48
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 0
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: NEG
33899: PUSH
33900: LD_INT 2
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: LD_INT 2
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33964: LD_ADDR_VAR 0 49
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: LD_INT 1
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 0
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: NEG
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34108: LD_ADDR_VAR 0 50
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 0
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34252: LD_ADDR_VAR 0 51
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 2
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 1
34353: NEG
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34399: LD_ADDR_VAR 0 52
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: LD_INT 1
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: NEG
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: LD_INT 2
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: LD_INT 2
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34550: LD_ADDR_VAR 0 53
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34780: LD_ADDR_VAR 0 54
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: LD_INT 2
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 2
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: NEG
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35010: LD_ADDR_VAR 0 55
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35240: LD_ADDR_VAR 0 56
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 1
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: NEG
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35470: LD_ADDR_VAR 0 57
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 0
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 1
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: NEG
35552: PUSH
35553: LD_INT 2
35555: NEG
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 2
35646: NEG
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 2
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35700: LD_ADDR_VAR 0 58
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: NEG
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35930: LD_ADDR_VAR 0 59
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36018: LD_ADDR_VAR 0 60
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36106: LD_ADDR_VAR 0 61
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36194: LD_ADDR_VAR 0 62
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36282: LD_ADDR_VAR 0 63
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 0
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36370: LD_ADDR_VAR 0 64
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 1
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// end ; 1 :
36458: GO 42355
36460: LD_INT 1
36462: DOUBLE
36463: EQUAL
36464: IFTRUE 36468
36466: GO 39091
36468: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36469: LD_ADDR_VAR 0 11
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 3
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: LD_INT 3
36491: NEG
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36513: LD_ADDR_VAR 0 12
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36554: LD_ADDR_VAR 0 13
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 3
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36594: LD_ADDR_VAR 0 14
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: LD_INT 3
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 3
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36635: LD_ADDR_VAR 0 15
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: NEG
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 3
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36679: LD_ADDR_VAR 0 16
36683: PUSH
36684: LD_INT 2
36686: NEG
36687: PUSH
36688: LD_INT 3
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 3
36698: NEG
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 3
36710: NEG
36711: PUSH
36712: LD_INT 3
36714: NEG
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: LIST
36724: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36725: LD_ADDR_VAR 0 17
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 3
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 3
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 2
36758: NEG
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36769: LD_ADDR_VAR 0 18
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 3
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: LIST
36809: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36810: LD_ADDR_VAR 0 19
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: LD_INT 3
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: LD_INT 3
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36850: LD_ADDR_VAR 0 20
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: LD_INT 3
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 3
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36891: LD_ADDR_VAR 0 21
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 3
36909: NEG
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 3
36920: NEG
36921: PUSH
36922: LD_INT 1
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36935: LD_ADDR_VAR 0 22
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: LD_INT 3
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 3
36954: NEG
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 3
36966: NEG
36967: PUSH
36968: LD_INT 3
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36981: LD_ADDR_VAR 0 23
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 4
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 3
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37025: LD_ADDR_VAR 0 24
37029: PUSH
37030: LD_INT 3
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 3
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 4
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37066: LD_ADDR_VAR 0 25
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 3
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 4
37083: PUSH
37084: LD_INT 3
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 3
37093: PUSH
37094: LD_INT 4
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37106: LD_ADDR_VAR 0 26
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 4
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 3
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37147: LD_ADDR_VAR 0 27
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 4
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37191: LD_ADDR_VAR 0 28
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: LD_INT 3
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: LD_INT 4
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 4
37222: NEG
37223: PUSH
37224: LD_INT 3
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37237: LD_ADDR_VAR 0 29
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: LD_INT 3
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 3
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: LD_INT 4
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 4
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 3
37304: NEG
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 1
37312: NEG
37313: PUSH
37314: LD_INT 5
37316: NEG
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 5
37327: NEG
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: LD_INT 4
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: LD_INT 6
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: LD_INT 6
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 5
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37392: LD_ADDR_VAR 0 30
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 3
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 3
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 4
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 4
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 4
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 5
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 5
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 5
37492: PUSH
37493: LD_INT 1
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 6
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 6
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37535: LD_ADDR_VAR 0 31
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 3
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: PUSH
37563: LD_INT 3
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 4
37582: PUSH
37583: LD_INT 4
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: LD_INT 4
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 5
37602: PUSH
37603: LD_INT 4
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 5
37612: PUSH
37613: LD_INT 5
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 4
37622: PUSH
37623: LD_INT 5
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 6
37632: PUSH
37633: LD_INT 5
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 6
37642: PUSH
37643: LD_INT 6
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 5
37652: PUSH
37653: LD_INT 6
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37674: LD_ADDR_VAR 0 32
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: LD_INT 3
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 1
37701: NEG
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: LD_INT 4
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 4
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: NEG
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: LD_INT 5
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 5
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 4
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 6
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 6
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: LD_INT 5
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37817: LD_ADDR_VAR 0 33
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 3
37858: NEG
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 4
37869: NEG
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 4
37880: NEG
37881: PUSH
37882: LD_INT 1
37884: NEG
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 4
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 5
37903: NEG
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 5
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 5
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 6
37937: NEG
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 6
37948: NEG
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37972: LD_ADDR_VAR 0 34
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: LD_INT 3
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 3
37991: NEG
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: NEG
38004: PUSH
38005: LD_INT 3
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 3
38015: NEG
38016: PUSH
38017: LD_INT 4
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 4
38027: NEG
38028: PUSH
38029: LD_INT 3
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 4
38039: NEG
38040: PUSH
38041: LD_INT 4
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 4
38051: NEG
38052: PUSH
38053: LD_INT 5
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 5
38063: NEG
38064: PUSH
38065: LD_INT 4
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 5
38075: NEG
38076: PUSH
38077: LD_INT 5
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 5
38087: NEG
38088: PUSH
38089: LD_INT 6
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 6
38099: NEG
38100: PUSH
38101: LD_INT 5
38103: NEG
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 6
38111: NEG
38112: PUSH
38113: LD_INT 6
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38135: LD_ADDR_VAR 0 41
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 3
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38179: LD_ADDR_VAR 0 42
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 3
38207: PUSH
38208: LD_INT 1
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38220: LD_ADDR_VAR 0 43
38224: PUSH
38225: LD_INT 2
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 3
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38260: LD_ADDR_VAR 0 44
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: LD_INT 3
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38301: LD_ADDR_VAR 0 45
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: LD_INT 0
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38345: LD_ADDR_VAR 0 46
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 2
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: LD_INT 2
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38391: LD_ADDR_VAR 0 47
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 3
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38424: LD_ADDR_VAR 0 48
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38455: LD_ADDR_VAR 0 49
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: LD_INT 2
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38484: LD_ADDR_VAR 0 50
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 3
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38513: LD_ADDR_VAR 0 51
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38544: LD_ADDR_VAR 0 52
38548: PUSH
38549: LD_INT 3
38551: NEG
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: LD_INT 2
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38577: LD_ADDR_VAR 0 53
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: LD_INT 3
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 3
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 2
38610: NEG
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38621: LD_ADDR_VAR 0 54
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 3
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38662: LD_ADDR_VAR 0 55
38666: PUSH
38667: LD_INT 3
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38702: LD_ADDR_VAR 0 56
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: LIST
38742: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38743: LD_ADDR_VAR 0 57
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 3
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38787: LD_ADDR_VAR 0 58
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: LD_INT 3
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 3
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: LD_INT 3
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38833: LD_ADDR_VAR 0 59
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38877: LD_ADDR_VAR 0 60
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 1
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 2
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 2
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38918: LD_ADDR_VAR 0 61
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38958: LD_ADDR_VAR 0 62
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38999: LD_ADDR_VAR 0 63
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 2
39017: NEG
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39043: LD_ADDR_VAR 0 64
39047: PUSH
39048: LD_INT 1
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// end ; 2 :
39089: GO 42355
39091: LD_INT 2
39093: DOUBLE
39094: EQUAL
39095: IFTRUE 39099
39097: GO 42354
39099: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39100: LD_ADDR_VAR 0 29
39104: PUSH
39105: LD_INT 4
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 4
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 5
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 5
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 4
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 3
39158: PUSH
39159: LD_INT 0
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 3
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: LD_INT 2
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 5
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: LD_INT 3
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 3
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: LD_INT 3
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 4
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 3
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 4
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: PUSH
39281: LD_INT 4
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 4
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 4
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 5
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 0
39330: PUSH
39331: LD_INT 5
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 4
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 3
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: PUSH
39363: LD_INT 5
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 3
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 4
39439: NEG
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 4
39462: NEG
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 4
39485: NEG
39486: PUSH
39487: LD_INT 4
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 4
39497: NEG
39498: PUSH
39499: LD_INT 5
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: LD_INT 4
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: LD_INT 3
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 4
39533: NEG
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 5
39545: NEG
39546: PUSH
39547: LD_INT 4
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 5
39557: NEG
39558: PUSH
39559: LD_INT 5
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: NEG
39570: PUSH
39571: LD_INT 5
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 5
39581: NEG
39582: PUSH
39583: LD_INT 3
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39638: LD_ADDR_VAR 0 30
39642: PUSH
39643: LD_INT 4
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 4
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 4
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 5
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 4
39685: PUSH
39686: LD_INT 5
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 3
39695: PUSH
39696: LD_INT 4
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 3
39705: PUSH
39706: LD_INT 3
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 5
39715: PUSH
39716: LD_INT 3
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 5
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: LD_INT 3
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: LD_INT 2
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 1
39755: PUSH
39756: LD_INT 3
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 4
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 4
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 3
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: PUSH
39808: LD_INT 4
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 4
39828: NEG
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 4
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 3
39851: NEG
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 4
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 5
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 5
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 5
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: NEG
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 3
39930: NEG
39931: PUSH
39932: LD_INT 3
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 3
39942: NEG
39943: PUSH
39944: LD_INT 4
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 3
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 3
39978: NEG
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 4
39990: NEG
39991: PUSH
39992: LD_INT 3
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 4
40002: NEG
40003: PUSH
40004: LD_INT 4
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: NEG
40015: PUSH
40016: LD_INT 4
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 4
40026: NEG
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: LD_INT 4
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 5
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 4
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: PUSH
40072: LD_INT 3
40074: NEG
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 3
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 4
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 5
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: LD_INT 3
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 2
40128: NEG
40129: PUSH
40130: LD_INT 5
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40185: LD_ADDR_VAR 0 31
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: LD_INT 4
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 3
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 4
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 5
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 5
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: LD_INT 4
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 3
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 5
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: NEG
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 3
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 3
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 4
40352: NEG
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 4
40364: NEG
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 4
40387: NEG
40388: PUSH
40389: LD_INT 4
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 4
40399: NEG
40400: PUSH
40401: LD_INT 5
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 3
40411: NEG
40412: PUSH
40413: LD_INT 4
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 3
40423: NEG
40424: PUSH
40425: LD_INT 3
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 4
40435: NEG
40436: PUSH
40437: LD_INT 3
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 5
40447: NEG
40448: PUSH
40449: LD_INT 4
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 5
40459: NEG
40460: PUSH
40461: LD_INT 5
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 3
40471: NEG
40472: PUSH
40473: LD_INT 5
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 5
40483: NEG
40484: PUSH
40485: LD_INT 3
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 3
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 4
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: LD_INT 4
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 4
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 4
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 4
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 5
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 5
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 4
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 3
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 5
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40735: LD_ADDR_VAR 0 32
40739: PUSH
40740: LD_INT 4
40742: NEG
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 4
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 4
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 5
40798: NEG
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 5
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 5
40821: NEG
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 3
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 3
40844: NEG
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: LD_INT 4
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 3
40892: NEG
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 4
40904: NEG
40905: PUSH
40906: LD_INT 3
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 4
40916: NEG
40917: PUSH
40918: LD_INT 4
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 4
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 4
40940: NEG
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: LD_INT 4
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 5
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 4
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 3
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 3
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 4
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: LD_INT 5
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: LD_INT 5
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 3
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: LD_INT 1
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 4
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 4
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 4
41147: PUSH
41148: LD_INT 4
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 4
41157: PUSH
41158: LD_INT 3
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 5
41167: PUSH
41168: LD_INT 4
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 5
41177: PUSH
41178: LD_INT 5
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 4
41187: PUSH
41188: LD_INT 5
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 5
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 3
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41282: LD_ADDR_VAR 0 33
41286: PUSH
41287: LD_INT 4
41289: NEG
41290: PUSH
41291: LD_INT 4
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 4
41301: NEG
41302: PUSH
41303: LD_INT 5
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: LD_INT 4
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: LD_INT 3
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 4
41337: NEG
41338: PUSH
41339: LD_INT 3
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 5
41349: NEG
41350: PUSH
41351: LD_INT 4
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 5
41361: NEG
41362: PUSH
41363: LD_INT 5
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 3
41373: NEG
41374: PUSH
41375: LD_INT 5
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 5
41385: NEG
41386: PUSH
41387: LD_INT 3
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 4
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 2
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 4
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 2
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: LD_INT 4
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 4
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 4
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 5
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 5
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 4
41540: PUSH
41541: LD_INT 1
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 3
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 3
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 5
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 3
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 3
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: LD_INT 3
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 4
41622: PUSH
41623: LD_INT 4
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 4
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 4
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 4
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 3
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 4
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 5
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 5
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 4
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: LD_INT 5
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41820: LD_ADDR_VAR 0 34
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 4
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 5
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: PUSH
41850: LD_INT 4
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 4
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 5
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: LD_INT 5
41921: NEG
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 4
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 4
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 4
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 4
42022: PUSH
42023: LD_INT 4
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 4
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 5
42042: PUSH
42043: LD_INT 4
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: LD_INT 5
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 4
42062: PUSH
42063: LD_INT 5
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 4
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 5
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: LD_INT 5
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 4
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 2
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 4
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 4
42205: NEG
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 4
42216: NEG
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: NEG
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 4
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 5
42261: NEG
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 5
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 5
42284: NEG
42285: PUSH
42286: LD_INT 2
42288: NEG
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 3
42296: NEG
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: ST_TO_ADDR
// end ; end ;
42352: GO 42355
42354: POP
// case btype of b_depot , b_warehouse :
42355: LD_VAR 0 1
42359: PUSH
42360: LD_INT 0
42362: DOUBLE
42363: EQUAL
42364: IFTRUE 42374
42366: LD_INT 1
42368: DOUBLE
42369: EQUAL
42370: IFTRUE 42374
42372: GO 42575
42374: POP
// case nation of nation_american :
42375: LD_VAR 0 5
42379: PUSH
42380: LD_INT 1
42382: DOUBLE
42383: EQUAL
42384: IFTRUE 42388
42386: GO 42444
42388: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42389: LD_ADDR_VAR 0 9
42393: PUSH
42394: LD_VAR 0 11
42398: PUSH
42399: LD_VAR 0 12
42403: PUSH
42404: LD_VAR 0 13
42408: PUSH
42409: LD_VAR 0 14
42413: PUSH
42414: LD_VAR 0 15
42418: PUSH
42419: LD_VAR 0 16
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: PUSH
42432: LD_VAR 0 4
42436: PUSH
42437: LD_INT 1
42439: PLUS
42440: ARRAY
42441: ST_TO_ADDR
42442: GO 42573
42444: LD_INT 2
42446: DOUBLE
42447: EQUAL
42448: IFTRUE 42452
42450: GO 42508
42452: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42453: LD_ADDR_VAR 0 9
42457: PUSH
42458: LD_VAR 0 17
42462: PUSH
42463: LD_VAR 0 18
42467: PUSH
42468: LD_VAR 0 19
42472: PUSH
42473: LD_VAR 0 20
42477: PUSH
42478: LD_VAR 0 21
42482: PUSH
42483: LD_VAR 0 22
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: PUSH
42496: LD_VAR 0 4
42500: PUSH
42501: LD_INT 1
42503: PLUS
42504: ARRAY
42505: ST_TO_ADDR
42506: GO 42573
42508: LD_INT 3
42510: DOUBLE
42511: EQUAL
42512: IFTRUE 42516
42514: GO 42572
42516: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42517: LD_ADDR_VAR 0 9
42521: PUSH
42522: LD_VAR 0 23
42526: PUSH
42527: LD_VAR 0 24
42531: PUSH
42532: LD_VAR 0 25
42536: PUSH
42537: LD_VAR 0 26
42541: PUSH
42542: LD_VAR 0 27
42546: PUSH
42547: LD_VAR 0 28
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: LD_VAR 0 4
42564: PUSH
42565: LD_INT 1
42567: PLUS
42568: ARRAY
42569: ST_TO_ADDR
42570: GO 42573
42572: POP
42573: GO 43128
42575: LD_INT 2
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42589
42581: LD_INT 3
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42589
42587: GO 42645
42589: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42590: LD_ADDR_VAR 0 9
42594: PUSH
42595: LD_VAR 0 29
42599: PUSH
42600: LD_VAR 0 30
42604: PUSH
42605: LD_VAR 0 31
42609: PUSH
42610: LD_VAR 0 32
42614: PUSH
42615: LD_VAR 0 33
42619: PUSH
42620: LD_VAR 0 34
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: PUSH
42633: LD_VAR 0 4
42637: PUSH
42638: LD_INT 1
42640: PLUS
42641: ARRAY
42642: ST_TO_ADDR
42643: GO 43128
42645: LD_INT 16
42647: DOUBLE
42648: EQUAL
42649: IFTRUE 42707
42651: LD_INT 17
42653: DOUBLE
42654: EQUAL
42655: IFTRUE 42707
42657: LD_INT 18
42659: DOUBLE
42660: EQUAL
42661: IFTRUE 42707
42663: LD_INT 19
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42707
42669: LD_INT 22
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42707
42675: LD_INT 20
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42707
42681: LD_INT 21
42683: DOUBLE
42684: EQUAL
42685: IFTRUE 42707
42687: LD_INT 23
42689: DOUBLE
42690: EQUAL
42691: IFTRUE 42707
42693: LD_INT 24
42695: DOUBLE
42696: EQUAL
42697: IFTRUE 42707
42699: LD_INT 25
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42707
42705: GO 42763
42707: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42708: LD_ADDR_VAR 0 9
42712: PUSH
42713: LD_VAR 0 35
42717: PUSH
42718: LD_VAR 0 36
42722: PUSH
42723: LD_VAR 0 37
42727: PUSH
42728: LD_VAR 0 38
42732: PUSH
42733: LD_VAR 0 39
42737: PUSH
42738: LD_VAR 0 40
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: PUSH
42751: LD_VAR 0 4
42755: PUSH
42756: LD_INT 1
42758: PLUS
42759: ARRAY
42760: ST_TO_ADDR
42761: GO 43128
42763: LD_INT 6
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42819
42769: LD_INT 7
42771: DOUBLE
42772: EQUAL
42773: IFTRUE 42819
42775: LD_INT 8
42777: DOUBLE
42778: EQUAL
42779: IFTRUE 42819
42781: LD_INT 13
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42819
42787: LD_INT 12
42789: DOUBLE
42790: EQUAL
42791: IFTRUE 42819
42793: LD_INT 15
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42819
42799: LD_INT 11
42801: DOUBLE
42802: EQUAL
42803: IFTRUE 42819
42805: LD_INT 14
42807: DOUBLE
42808: EQUAL
42809: IFTRUE 42819
42811: LD_INT 10
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 42875
42819: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42820: LD_ADDR_VAR 0 9
42824: PUSH
42825: LD_VAR 0 41
42829: PUSH
42830: LD_VAR 0 42
42834: PUSH
42835: LD_VAR 0 43
42839: PUSH
42840: LD_VAR 0 44
42844: PUSH
42845: LD_VAR 0 45
42849: PUSH
42850: LD_VAR 0 46
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: PUSH
42863: LD_VAR 0 4
42867: PUSH
42868: LD_INT 1
42870: PLUS
42871: ARRAY
42872: ST_TO_ADDR
42873: GO 43128
42875: LD_INT 36
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42883
42881: GO 42939
42883: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42884: LD_ADDR_VAR 0 9
42888: PUSH
42889: LD_VAR 0 47
42893: PUSH
42894: LD_VAR 0 48
42898: PUSH
42899: LD_VAR 0 49
42903: PUSH
42904: LD_VAR 0 50
42908: PUSH
42909: LD_VAR 0 51
42913: PUSH
42914: LD_VAR 0 52
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: PUSH
42927: LD_VAR 0 4
42931: PUSH
42932: LD_INT 1
42934: PLUS
42935: ARRAY
42936: ST_TO_ADDR
42937: GO 43128
42939: LD_INT 4
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42965
42945: LD_INT 5
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42965
42951: LD_INT 34
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42965
42957: LD_INT 37
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 43021
42965: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42966: LD_ADDR_VAR 0 9
42970: PUSH
42971: LD_VAR 0 53
42975: PUSH
42976: LD_VAR 0 54
42980: PUSH
42981: LD_VAR 0 55
42985: PUSH
42986: LD_VAR 0 56
42990: PUSH
42991: LD_VAR 0 57
42995: PUSH
42996: LD_VAR 0 58
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: PUSH
43009: LD_VAR 0 4
43013: PUSH
43014: LD_INT 1
43016: PLUS
43017: ARRAY
43018: ST_TO_ADDR
43019: GO 43128
43021: LD_INT 31
43023: DOUBLE
43024: EQUAL
43025: IFTRUE 43071
43027: LD_INT 32
43029: DOUBLE
43030: EQUAL
43031: IFTRUE 43071
43033: LD_INT 33
43035: DOUBLE
43036: EQUAL
43037: IFTRUE 43071
43039: LD_INT 27
43041: DOUBLE
43042: EQUAL
43043: IFTRUE 43071
43045: LD_INT 26
43047: DOUBLE
43048: EQUAL
43049: IFTRUE 43071
43051: LD_INT 28
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43071
43057: LD_INT 29
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43071
43063: LD_INT 30
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43071
43069: GO 43127
43071: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43072: LD_ADDR_VAR 0 9
43076: PUSH
43077: LD_VAR 0 59
43081: PUSH
43082: LD_VAR 0 60
43086: PUSH
43087: LD_VAR 0 61
43091: PUSH
43092: LD_VAR 0 62
43096: PUSH
43097: LD_VAR 0 63
43101: PUSH
43102: LD_VAR 0 64
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: PUSH
43115: LD_VAR 0 4
43119: PUSH
43120: LD_INT 1
43122: PLUS
43123: ARRAY
43124: ST_TO_ADDR
43125: GO 43128
43127: POP
// temp_list2 = [ ] ;
43128: LD_ADDR_VAR 0 10
43132: PUSH
43133: EMPTY
43134: ST_TO_ADDR
// for i in temp_list do
43135: LD_ADDR_VAR 0 8
43139: PUSH
43140: LD_VAR 0 9
43144: PUSH
43145: FOR_IN
43146: IFFALSE 43198
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43148: LD_ADDR_VAR 0 10
43152: PUSH
43153: LD_VAR 0 10
43157: PUSH
43158: LD_VAR 0 8
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PUSH
43167: LD_VAR 0 2
43171: PLUS
43172: PUSH
43173: LD_VAR 0 8
43177: PUSH
43178: LD_INT 2
43180: ARRAY
43181: PUSH
43182: LD_VAR 0 3
43186: PLUS
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: ADD
43195: ST_TO_ADDR
43196: GO 43145
43198: POP
43199: POP
// result = temp_list2 ;
43200: LD_ADDR_VAR 0 7
43204: PUSH
43205: LD_VAR 0 10
43209: ST_TO_ADDR
// end ;
43210: LD_VAR 0 7
43214: RET
// export function EnemyInRange ( unit , dist ) ; begin
43215: LD_INT 0
43217: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43218: LD_ADDR_VAR 0 3
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: CALL_OW 255
43232: PPUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 250
43242: PPUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 251
43252: PPUSH
43253: LD_VAR 0 2
43257: PPUSH
43258: CALL 16472 0 4
43262: PUSH
43263: LD_INT 4
43265: ARRAY
43266: ST_TO_ADDR
// end ;
43267: LD_VAR 0 3
43271: RET
// export function PlayerSeeMe ( unit ) ; begin
43272: LD_INT 0
43274: PPUSH
// result := See ( your_side , unit ) ;
43275: LD_ADDR_VAR 0 2
43279: PUSH
43280: LD_OWVAR 2
43284: PPUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: CALL_OW 292
43294: ST_TO_ADDR
// end ;
43295: LD_VAR 0 2
43299: RET
// export function ReverseDir ( unit ) ; begin
43300: LD_INT 0
43302: PPUSH
// if not unit then
43303: LD_VAR 0 1
43307: NOT
43308: IFFALSE 43312
// exit ;
43310: GO 43335
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43312: LD_ADDR_VAR 0 2
43316: PUSH
43317: LD_VAR 0 1
43321: PPUSH
43322: CALL_OW 254
43326: PUSH
43327: LD_INT 3
43329: PLUS
43330: PUSH
43331: LD_INT 6
43333: MOD
43334: ST_TO_ADDR
// end ;
43335: LD_VAR 0 2
43339: RET
// export function ReverseArray ( array ) ; var i ; begin
43340: LD_INT 0
43342: PPUSH
43343: PPUSH
// if not array then
43344: LD_VAR 0 1
43348: NOT
43349: IFFALSE 43353
// exit ;
43351: GO 43408
// result := [ ] ;
43353: LD_ADDR_VAR 0 2
43357: PUSH
43358: EMPTY
43359: ST_TO_ADDR
// for i := array downto 1 do
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: DOUBLE
43366: LD_VAR 0 1
43370: INC
43371: ST_TO_ADDR
43372: LD_INT 1
43374: PUSH
43375: FOR_DOWNTO
43376: IFFALSE 43406
// result := Join ( result , array [ i ] ) ;
43378: LD_ADDR_VAR 0 2
43382: PUSH
43383: LD_VAR 0 2
43387: PPUSH
43388: LD_VAR 0 1
43392: PUSH
43393: LD_VAR 0 3
43397: ARRAY
43398: PPUSH
43399: CALL 48250 0 2
43403: ST_TO_ADDR
43404: GO 43375
43406: POP
43407: POP
// end ;
43408: LD_VAR 0 2
43412: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43413: LD_INT 0
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
// if not unit or not hexes then
43421: LD_VAR 0 1
43425: NOT
43426: IFTRUE 43435
43428: PUSH
43429: LD_VAR 0 2
43433: NOT
43434: OR
43435: IFFALSE 43439
// exit ;
43437: GO 43562
// dist := 9999 ;
43439: LD_ADDR_VAR 0 5
43443: PUSH
43444: LD_INT 9999
43446: ST_TO_ADDR
// for i = 1 to hexes do
43447: LD_ADDR_VAR 0 4
43451: PUSH
43452: DOUBLE
43453: LD_INT 1
43455: DEC
43456: ST_TO_ADDR
43457: LD_VAR 0 2
43461: PUSH
43462: FOR_TO
43463: IFFALSE 43550
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43465: LD_ADDR_VAR 0 6
43469: PUSH
43470: LD_VAR 0 1
43474: PPUSH
43475: LD_VAR 0 2
43479: PUSH
43480: LD_VAR 0 4
43484: ARRAY
43485: PUSH
43486: LD_INT 1
43488: ARRAY
43489: PPUSH
43490: LD_VAR 0 2
43494: PUSH
43495: LD_VAR 0 4
43499: ARRAY
43500: PUSH
43501: LD_INT 2
43503: ARRAY
43504: PPUSH
43505: CALL_OW 297
43509: ST_TO_ADDR
// if tdist < dist then
43510: LD_VAR 0 6
43514: PUSH
43515: LD_VAR 0 5
43519: LESS
43520: IFFALSE 43548
// begin hex := hexes [ i ] ;
43522: LD_ADDR_VAR 0 8
43526: PUSH
43527: LD_VAR 0 2
43531: PUSH
43532: LD_VAR 0 4
43536: ARRAY
43537: ST_TO_ADDR
// dist := tdist ;
43538: LD_ADDR_VAR 0 5
43542: PUSH
43543: LD_VAR 0 6
43547: ST_TO_ADDR
// end ; end ;
43548: GO 43462
43550: POP
43551: POP
// result := hex ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_VAR 0 8
43561: ST_TO_ADDR
// end ;
43562: LD_VAR 0 3
43566: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43567: LD_INT 0
43569: PPUSH
43570: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43571: LD_VAR 0 1
43575: NOT
43576: IFTRUE 43615
43578: PUSH
43579: LD_VAR 0 1
43583: PUSH
43584: LD_INT 21
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 23
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PPUSH
43608: CALL_OW 69
43612: IN
43613: NOT
43614: OR
43615: IFFALSE 43619
// exit ;
43617: GO 43666
// for i = 1 to 3 do
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: DOUBLE
43625: LD_INT 1
43627: DEC
43628: ST_TO_ADDR
43629: LD_INT 3
43631: PUSH
43632: FOR_TO
43633: IFFALSE 43664
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43635: LD_VAR 0 1
43639: PPUSH
43640: CALL_OW 250
43644: PPUSH
43645: LD_VAR 0 1
43649: PPUSH
43650: CALL_OW 251
43654: PPUSH
43655: LD_INT 1
43657: PPUSH
43658: CALL_OW 453
43662: GO 43632
43664: POP
43665: POP
// end ;
43666: LD_VAR 0 2
43670: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43671: LD_INT 0
43673: PPUSH
43674: PPUSH
43675: PPUSH
43676: PPUSH
43677: PPUSH
43678: PPUSH
// if not unit or not enemy_unit then
43679: LD_VAR 0 1
43683: NOT
43684: IFTRUE 43693
43686: PUSH
43687: LD_VAR 0 2
43691: NOT
43692: OR
43693: IFFALSE 43697
// exit ;
43695: GO 44168
// if GetLives ( i ) < 250 then
43697: LD_VAR 0 4
43701: PPUSH
43702: CALL_OW 256
43706: PUSH
43707: LD_INT 250
43709: LESS
43710: IFFALSE 43723
// begin ComAutodestruct ( i ) ;
43712: LD_VAR 0 4
43716: PPUSH
43717: CALL 43567 0 1
// exit ;
43721: GO 44168
// end ; x := GetX ( enemy_unit ) ;
43723: LD_ADDR_VAR 0 7
43727: PUSH
43728: LD_VAR 0 2
43732: PPUSH
43733: CALL_OW 250
43737: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43738: LD_ADDR_VAR 0 8
43742: PUSH
43743: LD_VAR 0 2
43747: PPUSH
43748: CALL_OW 251
43752: ST_TO_ADDR
// if not x or not y then
43753: LD_VAR 0 7
43757: NOT
43758: IFTRUE 43767
43760: PUSH
43761: LD_VAR 0 8
43765: NOT
43766: OR
43767: IFFALSE 43771
// exit ;
43769: GO 44168
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43771: LD_ADDR_VAR 0 6
43775: PUSH
43776: LD_VAR 0 7
43780: PPUSH
43781: LD_INT 0
43783: PPUSH
43784: LD_INT 4
43786: PPUSH
43787: CALL_OW 272
43791: PUSH
43792: LD_VAR 0 8
43796: PPUSH
43797: LD_INT 0
43799: PPUSH
43800: LD_INT 4
43802: PPUSH
43803: CALL_OW 273
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_VAR 0 7
43816: PPUSH
43817: LD_INT 1
43819: PPUSH
43820: LD_INT 4
43822: PPUSH
43823: CALL_OW 272
43827: PUSH
43828: LD_VAR 0 8
43832: PPUSH
43833: LD_INT 1
43835: PPUSH
43836: LD_INT 4
43838: PPUSH
43839: CALL_OW 273
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_VAR 0 7
43852: PPUSH
43853: LD_INT 2
43855: PPUSH
43856: LD_INT 4
43858: PPUSH
43859: CALL_OW 272
43863: PUSH
43864: LD_VAR 0 8
43868: PPUSH
43869: LD_INT 2
43871: PPUSH
43872: LD_INT 4
43874: PPUSH
43875: CALL_OW 273
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_VAR 0 7
43888: PPUSH
43889: LD_INT 3
43891: PPUSH
43892: LD_INT 4
43894: PPUSH
43895: CALL_OW 272
43899: PUSH
43900: LD_VAR 0 8
43904: PPUSH
43905: LD_INT 3
43907: PPUSH
43908: LD_INT 4
43910: PPUSH
43911: CALL_OW 273
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_VAR 0 7
43924: PPUSH
43925: LD_INT 4
43927: PPUSH
43928: LD_INT 4
43930: PPUSH
43931: CALL_OW 272
43935: PUSH
43936: LD_VAR 0 8
43940: PPUSH
43941: LD_INT 4
43943: PPUSH
43944: LD_INT 4
43946: PPUSH
43947: CALL_OW 273
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_VAR 0 7
43960: PPUSH
43961: LD_INT 5
43963: PPUSH
43964: LD_INT 4
43966: PPUSH
43967: CALL_OW 272
43971: PUSH
43972: LD_VAR 0 8
43976: PPUSH
43977: LD_INT 5
43979: PPUSH
43980: LD_INT 4
43982: PPUSH
43983: CALL_OW 273
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// for i = tmp downto 1 do
44000: LD_ADDR_VAR 0 4
44004: PUSH
44005: DOUBLE
44006: LD_VAR 0 6
44010: INC
44011: ST_TO_ADDR
44012: LD_INT 1
44014: PUSH
44015: FOR_DOWNTO
44016: IFFALSE 44119
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44018: LD_VAR 0 6
44022: PUSH
44023: LD_VAR 0 4
44027: ARRAY
44028: PUSH
44029: LD_INT 1
44031: ARRAY
44032: PPUSH
44033: LD_VAR 0 6
44037: PUSH
44038: LD_VAR 0 4
44042: ARRAY
44043: PUSH
44044: LD_INT 2
44046: ARRAY
44047: PPUSH
44048: CALL_OW 488
44052: NOT
44053: IFTRUE 44095
44055: PUSH
44056: LD_VAR 0 6
44060: PUSH
44061: LD_VAR 0 4
44065: ARRAY
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: PPUSH
44071: LD_VAR 0 6
44075: PUSH
44076: LD_VAR 0 4
44080: ARRAY
44081: PUSH
44082: LD_INT 2
44084: ARRAY
44085: PPUSH
44086: CALL_OW 428
44090: PUSH
44091: LD_INT 0
44093: NONEQUAL
44094: OR
44095: IFFALSE 44117
// tmp := Delete ( tmp , i ) ;
44097: LD_ADDR_VAR 0 6
44101: PUSH
44102: LD_VAR 0 6
44106: PPUSH
44107: LD_VAR 0 4
44111: PPUSH
44112: CALL_OW 3
44116: ST_TO_ADDR
44117: GO 44015
44119: POP
44120: POP
// j := GetClosestHex ( unit , tmp ) ;
44121: LD_ADDR_VAR 0 5
44125: PUSH
44126: LD_VAR 0 1
44130: PPUSH
44131: LD_VAR 0 6
44135: PPUSH
44136: CALL 43413 0 2
44140: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44141: LD_VAR 0 1
44145: PPUSH
44146: LD_VAR 0 5
44150: PUSH
44151: LD_INT 1
44153: ARRAY
44154: PPUSH
44155: LD_VAR 0 5
44159: PUSH
44160: LD_INT 2
44162: ARRAY
44163: PPUSH
44164: CALL_OW 111
// end ;
44168: LD_VAR 0 3
44172: RET
// export function PrepareApemanSoldier ( ) ; begin
44173: LD_INT 0
44175: PPUSH
// uc_nation := 0 ;
44176: LD_ADDR_OWVAR 21
44180: PUSH
44181: LD_INT 0
44183: ST_TO_ADDR
// hc_sex := sex_male ;
44184: LD_ADDR_OWVAR 27
44188: PUSH
44189: LD_INT 1
44191: ST_TO_ADDR
// hc_name :=  ;
44192: LD_ADDR_OWVAR 26
44196: PUSH
44197: LD_STRING 
44199: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44200: LD_ADDR_OWVAR 28
44204: PUSH
44205: LD_INT 15
44207: ST_TO_ADDR
// hc_gallery :=  ;
44208: LD_ADDR_OWVAR 33
44212: PUSH
44213: LD_STRING 
44215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44216: LD_ADDR_OWVAR 31
44220: PUSH
44221: LD_INT 0
44223: PPUSH
44224: LD_INT 3
44226: PPUSH
44227: CALL_OW 12
44231: PUSH
44232: LD_INT 0
44234: PPUSH
44235: LD_INT 3
44237: PPUSH
44238: CALL_OW 12
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44255: LD_ADDR_OWVAR 29
44259: PUSH
44260: LD_INT 12
44262: PUSH
44263: LD_INT 12
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: ST_TO_ADDR
// end ;
44270: LD_VAR 0 1
44274: RET
// export function PrepareApemanEngineer ( ) ; begin
44275: LD_INT 0
44277: PPUSH
// uc_nation := 0 ;
44278: LD_ADDR_OWVAR 21
44282: PUSH
44283: LD_INT 0
44285: ST_TO_ADDR
// hc_sex := sex_male ;
44286: LD_ADDR_OWVAR 27
44290: PUSH
44291: LD_INT 1
44293: ST_TO_ADDR
// hc_name :=  ;
44294: LD_ADDR_OWVAR 26
44298: PUSH
44299: LD_STRING 
44301: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44302: LD_ADDR_OWVAR 28
44306: PUSH
44307: LD_INT 16
44309: ST_TO_ADDR
// hc_gallery :=  ;
44310: LD_ADDR_OWVAR 33
44314: PUSH
44315: LD_STRING 
44317: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44318: LD_ADDR_OWVAR 31
44322: PUSH
44323: LD_INT 0
44325: PPUSH
44326: LD_INT 3
44328: PPUSH
44329: CALL_OW 12
44333: PUSH
44334: LD_INT 0
44336: PPUSH
44337: LD_INT 3
44339: PPUSH
44340: CALL_OW 12
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44357: LD_ADDR_OWVAR 29
44361: PUSH
44362: LD_INT 12
44364: PUSH
44365: LD_INT 12
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: ST_TO_ADDR
// end ;
44372: LD_VAR 0 1
44376: RET
// export function PrepareApeman ( agressivity ) ; begin
44377: LD_INT 0
44379: PPUSH
// uc_side := 0 ;
44380: LD_ADDR_OWVAR 20
44384: PUSH
44385: LD_INT 0
44387: ST_TO_ADDR
// uc_nation := 0 ;
44388: LD_ADDR_OWVAR 21
44392: PUSH
44393: LD_INT 0
44395: ST_TO_ADDR
// hc_sex := sex_male ;
44396: LD_ADDR_OWVAR 27
44400: PUSH
44401: LD_INT 1
44403: ST_TO_ADDR
// hc_class := class_apeman ;
44404: LD_ADDR_OWVAR 28
44408: PUSH
44409: LD_INT 12
44411: ST_TO_ADDR
// hc_gallery :=  ;
44412: LD_ADDR_OWVAR 33
44416: PUSH
44417: LD_STRING 
44419: ST_TO_ADDR
// hc_name :=  ;
44420: LD_ADDR_OWVAR 26
44424: PUSH
44425: LD_STRING 
44427: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44428: LD_ADDR_OWVAR 29
44432: PUSH
44433: LD_INT 12
44435: PUSH
44436: LD_INT 12
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// if agressivity = 0 then
44443: LD_VAR 0 1
44447: PUSH
44448: LD_INT 0
44450: EQUAL
44451: IFFALSE 44463
// hc_agressivity := 0 else
44453: LD_ADDR_OWVAR 35
44457: PUSH
44458: LD_INT 0
44460: ST_TO_ADDR
44461: GO 44484
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44463: LD_ADDR_OWVAR 35
44467: PUSH
44468: LD_VAR 0 1
44472: NEG
44473: PPUSH
44474: LD_VAR 0 1
44478: PPUSH
44479: CALL_OW 12
44483: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44484: LD_ADDR_OWVAR 31
44488: PUSH
44489: LD_INT 0
44491: PPUSH
44492: LD_INT 3
44494: PPUSH
44495: CALL_OW 12
44499: PUSH
44500: LD_INT 0
44502: PPUSH
44503: LD_INT 3
44505: PPUSH
44506: CALL_OW 12
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: ST_TO_ADDR
// end ;
44523: LD_VAR 0 2
44527: RET
// export function PrepareTiger ( agressivity ) ; begin
44528: LD_INT 0
44530: PPUSH
// uc_side := 0 ;
44531: LD_ADDR_OWVAR 20
44535: PUSH
44536: LD_INT 0
44538: ST_TO_ADDR
// uc_nation := 0 ;
44539: LD_ADDR_OWVAR 21
44543: PUSH
44544: LD_INT 0
44546: ST_TO_ADDR
// InitHc ;
44547: CALL_OW 19
// hc_class := class_tiger ;
44551: LD_ADDR_OWVAR 28
44555: PUSH
44556: LD_INT 14
44558: ST_TO_ADDR
// hc_gallery :=  ;
44559: LD_ADDR_OWVAR 33
44563: PUSH
44564: LD_STRING 
44566: ST_TO_ADDR
// hc_name :=  ;
44567: LD_ADDR_OWVAR 26
44571: PUSH
44572: LD_STRING 
44574: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44575: LD_ADDR_OWVAR 35
44579: PUSH
44580: LD_VAR 0 1
44584: NEG
44585: PPUSH
44586: LD_VAR 0 1
44590: PPUSH
44591: CALL_OW 12
44595: ST_TO_ADDR
// end ;
44596: LD_VAR 0 2
44600: RET
// export function PrepareEnchidna ( ) ; begin
44601: LD_INT 0
44603: PPUSH
// uc_side := 0 ;
44604: LD_ADDR_OWVAR 20
44608: PUSH
44609: LD_INT 0
44611: ST_TO_ADDR
// uc_nation := 0 ;
44612: LD_ADDR_OWVAR 21
44616: PUSH
44617: LD_INT 0
44619: ST_TO_ADDR
// InitHc ;
44620: CALL_OW 19
// hc_class := class_baggie ;
44624: LD_ADDR_OWVAR 28
44628: PUSH
44629: LD_INT 13
44631: ST_TO_ADDR
// hc_gallery :=  ;
44632: LD_ADDR_OWVAR 33
44636: PUSH
44637: LD_STRING 
44639: ST_TO_ADDR
// hc_name :=  ;
44640: LD_ADDR_OWVAR 26
44644: PUSH
44645: LD_STRING 
44647: ST_TO_ADDR
// end ;
44648: LD_VAR 0 1
44652: RET
// export function PrepareFrog ( ) ; begin
44653: LD_INT 0
44655: PPUSH
// uc_side := 0 ;
44656: LD_ADDR_OWVAR 20
44660: PUSH
44661: LD_INT 0
44663: ST_TO_ADDR
// uc_nation := 0 ;
44664: LD_ADDR_OWVAR 21
44668: PUSH
44669: LD_INT 0
44671: ST_TO_ADDR
// InitHc ;
44672: CALL_OW 19
// hc_class := class_frog ;
44676: LD_ADDR_OWVAR 28
44680: PUSH
44681: LD_INT 19
44683: ST_TO_ADDR
// hc_gallery :=  ;
44684: LD_ADDR_OWVAR 33
44688: PUSH
44689: LD_STRING 
44691: ST_TO_ADDR
// hc_name :=  ;
44692: LD_ADDR_OWVAR 26
44696: PUSH
44697: LD_STRING 
44699: ST_TO_ADDR
// end ;
44700: LD_VAR 0 1
44704: RET
// export function PrepareFish ( ) ; begin
44705: LD_INT 0
44707: PPUSH
// uc_side := 0 ;
44708: LD_ADDR_OWVAR 20
44712: PUSH
44713: LD_INT 0
44715: ST_TO_ADDR
// uc_nation := 0 ;
44716: LD_ADDR_OWVAR 21
44720: PUSH
44721: LD_INT 0
44723: ST_TO_ADDR
// InitHc ;
44724: CALL_OW 19
// hc_class := class_fish ;
44728: LD_ADDR_OWVAR 28
44732: PUSH
44733: LD_INT 20
44735: ST_TO_ADDR
// hc_gallery :=  ;
44736: LD_ADDR_OWVAR 33
44740: PUSH
44741: LD_STRING 
44743: ST_TO_ADDR
// hc_name :=  ;
44744: LD_ADDR_OWVAR 26
44748: PUSH
44749: LD_STRING 
44751: ST_TO_ADDR
// end ;
44752: LD_VAR 0 1
44756: RET
// export function PrepareBird ( ) ; begin
44757: LD_INT 0
44759: PPUSH
// uc_side := 0 ;
44760: LD_ADDR_OWVAR 20
44764: PUSH
44765: LD_INT 0
44767: ST_TO_ADDR
// uc_nation := 0 ;
44768: LD_ADDR_OWVAR 21
44772: PUSH
44773: LD_INT 0
44775: ST_TO_ADDR
// InitHc ;
44776: CALL_OW 19
// hc_class := class_phororhacos ;
44780: LD_ADDR_OWVAR 28
44784: PUSH
44785: LD_INT 18
44787: ST_TO_ADDR
// hc_gallery :=  ;
44788: LD_ADDR_OWVAR 33
44792: PUSH
44793: LD_STRING 
44795: ST_TO_ADDR
// hc_name :=  ;
44796: LD_ADDR_OWVAR 26
44800: PUSH
44801: LD_STRING 
44803: ST_TO_ADDR
// end ;
44804: LD_VAR 0 1
44808: RET
// export function PrepareHorse ( ) ; begin
44809: LD_INT 0
44811: PPUSH
// uc_side := 0 ;
44812: LD_ADDR_OWVAR 20
44816: PUSH
44817: LD_INT 0
44819: ST_TO_ADDR
// uc_nation := 0 ;
44820: LD_ADDR_OWVAR 21
44824: PUSH
44825: LD_INT 0
44827: ST_TO_ADDR
// InitHc ;
44828: CALL_OW 19
// hc_class := class_horse ;
44832: LD_ADDR_OWVAR 28
44836: PUSH
44837: LD_INT 21
44839: ST_TO_ADDR
// hc_gallery :=  ;
44840: LD_ADDR_OWVAR 33
44844: PUSH
44845: LD_STRING 
44847: ST_TO_ADDR
// hc_name :=  ;
44848: LD_ADDR_OWVAR 26
44852: PUSH
44853: LD_STRING 
44855: ST_TO_ADDR
// end ;
44856: LD_VAR 0 1
44860: RET
// export function PrepareMastodont ( ) ; begin
44861: LD_INT 0
44863: PPUSH
// uc_side := 0 ;
44864: LD_ADDR_OWVAR 20
44868: PUSH
44869: LD_INT 0
44871: ST_TO_ADDR
// uc_nation := 0 ;
44872: LD_ADDR_OWVAR 21
44876: PUSH
44877: LD_INT 0
44879: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44880: LD_ADDR_OWVAR 37
44884: PUSH
44885: LD_INT 31
44887: ST_TO_ADDR
// vc_control := control_rider ;
44888: LD_ADDR_OWVAR 38
44892: PUSH
44893: LD_INT 4
44895: ST_TO_ADDR
// end ;
44896: LD_VAR 0 1
44900: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44901: LD_INT 0
44903: PPUSH
44904: PPUSH
44905: PPUSH
// uc_side = 0 ;
44906: LD_ADDR_OWVAR 20
44910: PUSH
44911: LD_INT 0
44913: ST_TO_ADDR
// uc_nation = 0 ;
44914: LD_ADDR_OWVAR 21
44918: PUSH
44919: LD_INT 0
44921: ST_TO_ADDR
// InitHc_All ( ) ;
44922: CALL_OW 584
// InitVc ;
44926: CALL_OW 20
// if mastodonts then
44930: LD_VAR 0 6
44934: IFFALSE 45001
// for i = 1 to mastodonts do
44936: LD_ADDR_VAR 0 11
44940: PUSH
44941: DOUBLE
44942: LD_INT 1
44944: DEC
44945: ST_TO_ADDR
44946: LD_VAR 0 6
44950: PUSH
44951: FOR_TO
44952: IFFALSE 44999
// begin vc_chassis := 31 ;
44954: LD_ADDR_OWVAR 37
44958: PUSH
44959: LD_INT 31
44961: ST_TO_ADDR
// vc_control := control_rider ;
44962: LD_ADDR_OWVAR 38
44966: PUSH
44967: LD_INT 4
44969: ST_TO_ADDR
// animal := CreateVehicle ;
44970: LD_ADDR_VAR 0 12
44974: PUSH
44975: CALL_OW 45
44979: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44980: LD_VAR 0 12
44984: PPUSH
44985: LD_VAR 0 8
44989: PPUSH
44990: LD_INT 0
44992: PPUSH
44993: CALL 47143 0 3
// end ;
44997: GO 44951
44999: POP
45000: POP
// if horses then
45001: LD_VAR 0 5
45005: IFFALSE 45072
// for i = 1 to horses do
45007: LD_ADDR_VAR 0 11
45011: PUSH
45012: DOUBLE
45013: LD_INT 1
45015: DEC
45016: ST_TO_ADDR
45017: LD_VAR 0 5
45021: PUSH
45022: FOR_TO
45023: IFFALSE 45070
// begin hc_class := 21 ;
45025: LD_ADDR_OWVAR 28
45029: PUSH
45030: LD_INT 21
45032: ST_TO_ADDR
// hc_gallery :=  ;
45033: LD_ADDR_OWVAR 33
45037: PUSH
45038: LD_STRING 
45040: ST_TO_ADDR
// animal := CreateHuman ;
45041: LD_ADDR_VAR 0 12
45045: PUSH
45046: CALL_OW 44
45050: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45051: LD_VAR 0 12
45055: PPUSH
45056: LD_VAR 0 8
45060: PPUSH
45061: LD_INT 0
45063: PPUSH
45064: CALL 47143 0 3
// end ;
45068: GO 45022
45070: POP
45071: POP
// if birds then
45072: LD_VAR 0 1
45076: IFFALSE 45143
// for i = 1 to birds do
45078: LD_ADDR_VAR 0 11
45082: PUSH
45083: DOUBLE
45084: LD_INT 1
45086: DEC
45087: ST_TO_ADDR
45088: LD_VAR 0 1
45092: PUSH
45093: FOR_TO
45094: IFFALSE 45141
// begin hc_class := 18 ;
45096: LD_ADDR_OWVAR 28
45100: PUSH
45101: LD_INT 18
45103: ST_TO_ADDR
// hc_gallery =  ;
45104: LD_ADDR_OWVAR 33
45108: PUSH
45109: LD_STRING 
45111: ST_TO_ADDR
// animal := CreateHuman ;
45112: LD_ADDR_VAR 0 12
45116: PUSH
45117: CALL_OW 44
45121: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45122: LD_VAR 0 12
45126: PPUSH
45127: LD_VAR 0 8
45131: PPUSH
45132: LD_INT 0
45134: PPUSH
45135: CALL 47143 0 3
// end ;
45139: GO 45093
45141: POP
45142: POP
// if tigers then
45143: LD_VAR 0 2
45147: IFFALSE 45231
// for i = 1 to tigers do
45149: LD_ADDR_VAR 0 11
45153: PUSH
45154: DOUBLE
45155: LD_INT 1
45157: DEC
45158: ST_TO_ADDR
45159: LD_VAR 0 2
45163: PUSH
45164: FOR_TO
45165: IFFALSE 45229
// begin hc_class = class_tiger ;
45167: LD_ADDR_OWVAR 28
45171: PUSH
45172: LD_INT 14
45174: ST_TO_ADDR
// hc_gallery =  ;
45175: LD_ADDR_OWVAR 33
45179: PUSH
45180: LD_STRING 
45182: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45183: LD_ADDR_OWVAR 35
45187: PUSH
45188: LD_INT 7
45190: NEG
45191: PPUSH
45192: LD_INT 7
45194: PPUSH
45195: CALL_OW 12
45199: ST_TO_ADDR
// animal := CreateHuman ;
45200: LD_ADDR_VAR 0 12
45204: PUSH
45205: CALL_OW 44
45209: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45210: LD_VAR 0 12
45214: PPUSH
45215: LD_VAR 0 8
45219: PPUSH
45220: LD_INT 0
45222: PPUSH
45223: CALL 47143 0 3
// end ;
45227: GO 45164
45229: POP
45230: POP
// if apemans then
45231: LD_VAR 0 3
45235: IFFALSE 45358
// for i = 1 to apemans do
45237: LD_ADDR_VAR 0 11
45241: PUSH
45242: DOUBLE
45243: LD_INT 1
45245: DEC
45246: ST_TO_ADDR
45247: LD_VAR 0 3
45251: PUSH
45252: FOR_TO
45253: IFFALSE 45356
// begin hc_class = class_apeman ;
45255: LD_ADDR_OWVAR 28
45259: PUSH
45260: LD_INT 12
45262: ST_TO_ADDR
// hc_gallery =  ;
45263: LD_ADDR_OWVAR 33
45267: PUSH
45268: LD_STRING 
45270: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45271: LD_ADDR_OWVAR 35
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PPUSH
45280: LD_INT 2
45282: PPUSH
45283: CALL_OW 12
45287: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45288: LD_ADDR_OWVAR 31
45292: PUSH
45293: LD_INT 1
45295: PPUSH
45296: LD_INT 3
45298: PPUSH
45299: CALL_OW 12
45303: PUSH
45304: LD_INT 1
45306: PPUSH
45307: LD_INT 3
45309: PPUSH
45310: CALL_OW 12
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
// animal := CreateHuman ;
45327: LD_ADDR_VAR 0 12
45331: PUSH
45332: CALL_OW 44
45336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45337: LD_VAR 0 12
45341: PPUSH
45342: LD_VAR 0 8
45346: PPUSH
45347: LD_INT 0
45349: PPUSH
45350: CALL 47143 0 3
// end ;
45354: GO 45252
45356: POP
45357: POP
// if enchidnas then
45358: LD_VAR 0 4
45362: IFFALSE 45429
// for i = 1 to enchidnas do
45364: LD_ADDR_VAR 0 11
45368: PUSH
45369: DOUBLE
45370: LD_INT 1
45372: DEC
45373: ST_TO_ADDR
45374: LD_VAR 0 4
45378: PUSH
45379: FOR_TO
45380: IFFALSE 45427
// begin hc_class = 13 ;
45382: LD_ADDR_OWVAR 28
45386: PUSH
45387: LD_INT 13
45389: ST_TO_ADDR
// hc_gallery =  ;
45390: LD_ADDR_OWVAR 33
45394: PUSH
45395: LD_STRING 
45397: ST_TO_ADDR
// animal := CreateHuman ;
45398: LD_ADDR_VAR 0 12
45402: PUSH
45403: CALL_OW 44
45407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45408: LD_VAR 0 12
45412: PPUSH
45413: LD_VAR 0 8
45417: PPUSH
45418: LD_INT 0
45420: PPUSH
45421: CALL 47143 0 3
// end ;
45425: GO 45379
45427: POP
45428: POP
// if fishes then
45429: LD_VAR 0 7
45433: IFFALSE 45500
// for i = 1 to fishes do
45435: LD_ADDR_VAR 0 11
45439: PUSH
45440: DOUBLE
45441: LD_INT 1
45443: DEC
45444: ST_TO_ADDR
45445: LD_VAR 0 7
45449: PUSH
45450: FOR_TO
45451: IFFALSE 45498
// begin hc_class = 20 ;
45453: LD_ADDR_OWVAR 28
45457: PUSH
45458: LD_INT 20
45460: ST_TO_ADDR
// hc_gallery =  ;
45461: LD_ADDR_OWVAR 33
45465: PUSH
45466: LD_STRING 
45468: ST_TO_ADDR
// animal := CreateHuman ;
45469: LD_ADDR_VAR 0 12
45473: PUSH
45474: CALL_OW 44
45478: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45479: LD_VAR 0 12
45483: PPUSH
45484: LD_VAR 0 9
45488: PPUSH
45489: LD_INT 0
45491: PPUSH
45492: CALL 47143 0 3
// end ;
45496: GO 45450
45498: POP
45499: POP
// end ;
45500: LD_VAR 0 10
45504: RET
// export function WantHeal ( sci , unit ) ; begin
45505: LD_INT 0
45507: PPUSH
// if GetTaskList ( sci ) > 0 then
45508: LD_VAR 0 1
45512: PPUSH
45513: CALL_OW 437
45517: PUSH
45518: LD_INT 0
45520: GREATER
45521: IFFALSE 45593
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45523: LD_VAR 0 1
45527: PPUSH
45528: CALL_OW 437
45532: PUSH
45533: LD_INT 1
45535: ARRAY
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PUSH
45541: LD_STRING l
45543: EQUAL
45544: IFFALSE 45571
45546: PUSH
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 437
45556: PUSH
45557: LD_INT 1
45559: ARRAY
45560: PUSH
45561: LD_INT 4
45563: ARRAY
45564: PUSH
45565: LD_VAR 0 2
45569: EQUAL
45570: AND
45571: IFFALSE 45583
// result := true else
45573: LD_ADDR_VAR 0 3
45577: PUSH
45578: LD_INT 1
45580: ST_TO_ADDR
45581: GO 45591
// result := false ;
45583: LD_ADDR_VAR 0 3
45587: PUSH
45588: LD_INT 0
45590: ST_TO_ADDR
// end else
45591: GO 45601
// result := false ;
45593: LD_ADDR_VAR 0 3
45597: PUSH
45598: LD_INT 0
45600: ST_TO_ADDR
// end ;
45601: LD_VAR 0 3
45605: RET
// export function HealTarget ( sci ) ; begin
45606: LD_INT 0
45608: PPUSH
// if not sci then
45609: LD_VAR 0 1
45613: NOT
45614: IFFALSE 45618
// exit ;
45616: GO 45683
// result := 0 ;
45618: LD_ADDR_VAR 0 2
45622: PUSH
45623: LD_INT 0
45625: ST_TO_ADDR
// if GetTaskList ( sci ) then
45626: LD_VAR 0 1
45630: PPUSH
45631: CALL_OW 437
45635: IFFALSE 45683
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45637: LD_VAR 0 1
45641: PPUSH
45642: CALL_OW 437
45646: PUSH
45647: LD_INT 1
45649: ARRAY
45650: PUSH
45651: LD_INT 1
45653: ARRAY
45654: PUSH
45655: LD_STRING l
45657: EQUAL
45658: IFFALSE 45683
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45660: LD_ADDR_VAR 0 2
45664: PUSH
45665: LD_VAR 0 1
45669: PPUSH
45670: CALL_OW 437
45674: PUSH
45675: LD_INT 1
45677: ARRAY
45678: PUSH
45679: LD_INT 4
45681: ARRAY
45682: ST_TO_ADDR
// end ;
45683: LD_VAR 0 2
45687: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45688: LD_INT 0
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
// if not base_units then
45694: LD_VAR 0 1
45698: NOT
45699: IFFALSE 45703
// exit ;
45701: GO 45790
// result := false ;
45703: LD_ADDR_VAR 0 2
45707: PUSH
45708: LD_INT 0
45710: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45711: LD_ADDR_VAR 0 5
45715: PUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: LD_INT 21
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PPUSH
45731: CALL_OW 72
45735: ST_TO_ADDR
// if not tmp then
45736: LD_VAR 0 5
45740: NOT
45741: IFFALSE 45745
// exit ;
45743: GO 45790
// for i in tmp do
45745: LD_ADDR_VAR 0 3
45749: PUSH
45750: LD_VAR 0 5
45754: PUSH
45755: FOR_IN
45756: IFFALSE 45788
// begin result := EnemyInRange ( i , 22 ) ;
45758: LD_ADDR_VAR 0 2
45762: PUSH
45763: LD_VAR 0 3
45767: PPUSH
45768: LD_INT 22
45770: PPUSH
45771: CALL 43215 0 2
45775: ST_TO_ADDR
// if result then
45776: LD_VAR 0 2
45780: IFFALSE 45786
// exit ;
45782: POP
45783: POP
45784: GO 45790
// end ;
45786: GO 45755
45788: POP
45789: POP
// end ;
45790: LD_VAR 0 2
45794: RET
// export function FilterByTag ( units , tag ) ; begin
45795: LD_INT 0
45797: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45798: LD_ADDR_VAR 0 3
45802: PUSH
45803: LD_VAR 0 1
45807: PPUSH
45808: LD_INT 120
45810: PUSH
45811: LD_VAR 0 2
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PPUSH
45820: CALL_OW 72
45824: ST_TO_ADDR
// end ;
45825: LD_VAR 0 3
45829: RET
// export function IsDriver ( un ) ; begin
45830: LD_INT 0
45832: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45833: LD_ADDR_VAR 0 2
45837: PUSH
45838: LD_VAR 0 1
45842: PUSH
45843: LD_INT 55
45845: PUSH
45846: EMPTY
45847: LIST
45848: PPUSH
45849: CALL_OW 69
45853: IN
45854: ST_TO_ADDR
// end ;
45855: LD_VAR 0 2
45859: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45860: LD_INT 0
45862: PPUSH
45863: PPUSH
// list := [ ] ;
45864: LD_ADDR_VAR 0 5
45868: PUSH
45869: EMPTY
45870: ST_TO_ADDR
// case d of 0 :
45871: LD_VAR 0 3
45875: PUSH
45876: LD_INT 0
45878: DOUBLE
45879: EQUAL
45880: IFTRUE 45884
45882: GO 46017
45884: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45885: LD_ADDR_VAR 0 5
45889: PUSH
45890: LD_VAR 0 1
45894: PUSH
45895: LD_INT 4
45897: MINUS
45898: PUSH
45899: LD_VAR 0 2
45903: PUSH
45904: LD_INT 4
45906: MINUS
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: PUSH
45916: LD_VAR 0 1
45920: PUSH
45921: LD_INT 3
45923: MINUS
45924: PUSH
45925: LD_VAR 0 2
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: LIST
45937: PUSH
45938: LD_VAR 0 1
45942: PUSH
45943: LD_INT 4
45945: PLUS
45946: PUSH
45947: LD_VAR 0 2
45951: PUSH
45952: LD_INT 4
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: PUSH
45960: LD_VAR 0 1
45964: PUSH
45965: LD_INT 3
45967: PLUS
45968: PUSH
45969: LD_VAR 0 2
45973: PUSH
45974: LD_INT 3
45976: PLUS
45977: PUSH
45978: LD_INT 5
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: PUSH
45986: LD_VAR 0 1
45990: PUSH
45991: LD_VAR 0 2
45995: PUSH
45996: LD_INT 4
45998: PLUS
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: ST_TO_ADDR
// end ; 1 :
46015: GO 46715
46017: LD_INT 1
46019: DOUBLE
46020: EQUAL
46021: IFTRUE 46025
46023: GO 46158
46025: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46026: LD_ADDR_VAR 0 5
46030: PUSH
46031: LD_VAR 0 1
46035: PUSH
46036: LD_VAR 0 2
46040: PUSH
46041: LD_INT 4
46043: MINUS
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: LIST
46052: PUSH
46053: LD_VAR 0 1
46057: PUSH
46058: LD_INT 3
46060: MINUS
46061: PUSH
46062: LD_VAR 0 2
46066: PUSH
46067: LD_INT 3
46069: MINUS
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: PUSH
46079: LD_VAR 0 1
46083: PUSH
46084: LD_INT 4
46086: MINUS
46087: PUSH
46088: LD_VAR 0 2
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: LIST
46100: PUSH
46101: LD_VAR 0 1
46105: PUSH
46106: LD_VAR 0 2
46110: PUSH
46111: LD_INT 3
46113: PLUS
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: PUSH
46123: LD_VAR 0 1
46127: PUSH
46128: LD_INT 4
46130: PLUS
46131: PUSH
46132: LD_VAR 0 2
46136: PUSH
46137: LD_INT 4
46139: PLUS
46140: PUSH
46141: LD_INT 5
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: ST_TO_ADDR
// end ; 2 :
46156: GO 46715
46158: LD_INT 2
46160: DOUBLE
46161: EQUAL
46162: IFTRUE 46166
46164: GO 46295
46166: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46167: LD_ADDR_VAR 0 5
46171: PUSH
46172: LD_VAR 0 1
46176: PUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_INT 3
46184: MINUS
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: LIST
46193: PUSH
46194: LD_VAR 0 1
46198: PUSH
46199: LD_INT 4
46201: PLUS
46202: PUSH
46203: LD_VAR 0 2
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: PUSH
46216: LD_VAR 0 1
46220: PUSH
46221: LD_VAR 0 2
46225: PUSH
46226: LD_INT 4
46228: PLUS
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: PUSH
46238: LD_VAR 0 1
46242: PUSH
46243: LD_INT 3
46245: MINUS
46246: PUSH
46247: LD_VAR 0 2
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: LIST
46259: PUSH
46260: LD_VAR 0 1
46264: PUSH
46265: LD_INT 4
46267: MINUS
46268: PUSH
46269: LD_VAR 0 2
46273: PUSH
46274: LD_INT 4
46276: MINUS
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// end ; 3 :
46293: GO 46715
46295: LD_INT 3
46297: DOUBLE
46298: EQUAL
46299: IFTRUE 46303
46301: GO 46436
46303: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46304: LD_ADDR_VAR 0 5
46308: PUSH
46309: LD_VAR 0 1
46313: PUSH
46314: LD_INT 3
46316: PLUS
46317: PUSH
46318: LD_VAR 0 2
46322: PUSH
46323: LD_INT 4
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: PUSH
46331: LD_VAR 0 1
46335: PUSH
46336: LD_INT 4
46338: PLUS
46339: PUSH
46340: LD_VAR 0 2
46344: PUSH
46345: LD_INT 4
46347: PLUS
46348: PUSH
46349: LD_INT 5
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: PUSH
46357: LD_VAR 0 1
46361: PUSH
46362: LD_INT 4
46364: MINUS
46365: PUSH
46366: LD_VAR 0 2
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: LIST
46378: PUSH
46379: LD_VAR 0 1
46383: PUSH
46384: LD_VAR 0 2
46388: PUSH
46389: LD_INT 4
46391: MINUS
46392: PUSH
46393: LD_INT 3
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: PUSH
46401: LD_VAR 0 1
46405: PUSH
46406: LD_INT 3
46408: MINUS
46409: PUSH
46410: LD_VAR 0 2
46414: PUSH
46415: LD_INT 3
46417: MINUS
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: ST_TO_ADDR
// end ; 4 :
46434: GO 46715
46436: LD_INT 4
46438: DOUBLE
46439: EQUAL
46440: IFTRUE 46444
46442: GO 46577
46444: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46445: LD_ADDR_VAR 0 5
46449: PUSH
46450: LD_VAR 0 1
46454: PUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 4
46462: PLUS
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: PUSH
46472: LD_VAR 0 1
46476: PUSH
46477: LD_INT 3
46479: PLUS
46480: PUSH
46481: LD_VAR 0 2
46485: PUSH
46486: LD_INT 3
46488: PLUS
46489: PUSH
46490: LD_INT 5
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: LIST
46497: PUSH
46498: LD_VAR 0 1
46502: PUSH
46503: LD_INT 4
46505: PLUS
46506: PUSH
46507: LD_VAR 0 2
46511: PUSH
46512: LD_INT 4
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: LIST
46519: PUSH
46520: LD_VAR 0 1
46524: PUSH
46525: LD_VAR 0 2
46529: PUSH
46530: LD_INT 3
46532: MINUS
46533: PUSH
46534: LD_INT 3
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: LIST
46541: PUSH
46542: LD_VAR 0 1
46546: PUSH
46547: LD_INT 4
46549: MINUS
46550: PUSH
46551: LD_VAR 0 2
46555: PUSH
46556: LD_INT 4
46558: MINUS
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: LIST
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: ST_TO_ADDR
// end ; 5 :
46575: GO 46715
46577: LD_INT 5
46579: DOUBLE
46580: EQUAL
46581: IFTRUE 46585
46583: GO 46714
46585: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46586: LD_ADDR_VAR 0 5
46590: PUSH
46591: LD_VAR 0 1
46595: PUSH
46596: LD_INT 4
46598: MINUS
46599: PUSH
46600: LD_VAR 0 2
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: PUSH
46613: LD_VAR 0 1
46617: PUSH
46618: LD_VAR 0 2
46622: PUSH
46623: LD_INT 4
46625: MINUS
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: PUSH
46635: LD_VAR 0 1
46639: PUSH
46640: LD_INT 4
46642: PLUS
46643: PUSH
46644: LD_VAR 0 2
46648: PUSH
46649: LD_INT 4
46651: PLUS
46652: PUSH
46653: LD_INT 5
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: PUSH
46661: LD_VAR 0 1
46665: PUSH
46666: LD_INT 3
46668: PLUS
46669: PUSH
46670: LD_VAR 0 2
46674: PUSH
46675: LD_INT 4
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: PUSH
46683: LD_VAR 0 1
46687: PUSH
46688: LD_VAR 0 2
46692: PUSH
46693: LD_INT 3
46695: PLUS
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// end ; end ;
46712: GO 46715
46714: POP
// result := list ;
46715: LD_ADDR_VAR 0 4
46719: PUSH
46720: LD_VAR 0 5
46724: ST_TO_ADDR
// end ;
46725: LD_VAR 0 4
46729: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46730: LD_INT 0
46732: PPUSH
46733: PPUSH
46734: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46735: LD_VAR 0 1
46739: NOT
46740: IFTRUE 46768
46742: PUSH
46743: LD_VAR 0 2
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: LD_INT 4
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: IN
46766: NOT
46767: OR
46768: IFFALSE 46772
// exit ;
46770: GO 46855
// tmp := [ ] ;
46772: LD_ADDR_VAR 0 5
46776: PUSH
46777: EMPTY
46778: ST_TO_ADDR
// for i in units do
46779: LD_ADDR_VAR 0 4
46783: PUSH
46784: LD_VAR 0 1
46788: PUSH
46789: FOR_IN
46790: IFFALSE 46824
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46792: LD_ADDR_VAR 0 5
46796: PUSH
46797: LD_VAR 0 5
46801: PPUSH
46802: LD_VAR 0 4
46806: PPUSH
46807: LD_VAR 0 2
46811: PPUSH
46812: CALL_OW 259
46816: PPUSH
46817: CALL 48250 0 2
46821: ST_TO_ADDR
46822: GO 46789
46824: POP
46825: POP
// if not tmp then
46826: LD_VAR 0 5
46830: NOT
46831: IFFALSE 46835
// exit ;
46833: GO 46855
// result := SortListByListDesc ( units , tmp ) ;
46835: LD_ADDR_VAR 0 3
46839: PUSH
46840: LD_VAR 0 1
46844: PPUSH
46845: LD_VAR 0 5
46849: PPUSH
46850: CALL_OW 77
46854: ST_TO_ADDR
// end ;
46855: LD_VAR 0 3
46859: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46860: LD_INT 0
46862: PPUSH
46863: PPUSH
46864: PPUSH
// result := false ;
46865: LD_ADDR_VAR 0 3
46869: PUSH
46870: LD_INT 0
46872: ST_TO_ADDR
// if not building then
46873: LD_VAR 0 2
46877: NOT
46878: IFFALSE 46882
// exit ;
46880: GO 47026
// x := GetX ( building ) ;
46882: LD_ADDR_VAR 0 4
46886: PUSH
46887: LD_VAR 0 2
46891: PPUSH
46892: CALL_OW 250
46896: ST_TO_ADDR
// y := GetY ( building ) ;
46897: LD_ADDR_VAR 0 5
46901: PUSH
46902: LD_VAR 0 2
46906: PPUSH
46907: CALL_OW 251
46911: ST_TO_ADDR
// if not x or not y then
46912: LD_VAR 0 4
46916: NOT
46917: IFTRUE 46926
46919: PUSH
46920: LD_VAR 0 5
46924: NOT
46925: OR
46926: IFFALSE 46930
// exit ;
46928: GO 47026
// if GetTaskList ( unit ) then
46930: LD_VAR 0 1
46934: PPUSH
46935: CALL_OW 437
46939: IFFALSE 47026
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46941: LD_STRING e
46943: PUSH
46944: LD_VAR 0 1
46948: PPUSH
46949: CALL_OW 437
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: EQUAL
46962: IFFALSE 46989
46964: PUSH
46965: LD_VAR 0 4
46969: PUSH
46970: LD_VAR 0 1
46974: PPUSH
46975: CALL_OW 437
46979: PUSH
46980: LD_INT 1
46982: ARRAY
46983: PUSH
46984: LD_INT 2
46986: ARRAY
46987: EQUAL
46988: AND
46989: IFFALSE 47016
46991: PUSH
46992: LD_VAR 0 5
46996: PUSH
46997: LD_VAR 0 1
47001: PPUSH
47002: CALL_OW 437
47006: PUSH
47007: LD_INT 1
47009: ARRAY
47010: PUSH
47011: LD_INT 3
47013: ARRAY
47014: EQUAL
47015: AND
47016: IFFALSE 47026
// result := true end ;
47018: LD_ADDR_VAR 0 3
47022: PUSH
47023: LD_INT 1
47025: ST_TO_ADDR
// end ;
47026: LD_VAR 0 3
47030: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47031: LD_INT 0
47033: PPUSH
// result := false ;
47034: LD_ADDR_VAR 0 4
47038: PUSH
47039: LD_INT 0
47041: ST_TO_ADDR
// if GetTaskList ( unit ) then
47042: LD_VAR 0 1
47046: PPUSH
47047: CALL_OW 437
47051: IFFALSE 47138
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47053: LD_STRING M
47055: PUSH
47056: LD_VAR 0 1
47060: PPUSH
47061: CALL_OW 437
47065: PUSH
47066: LD_INT 1
47068: ARRAY
47069: PUSH
47070: LD_INT 1
47072: ARRAY
47073: EQUAL
47074: IFFALSE 47101
47076: PUSH
47077: LD_VAR 0 2
47081: PUSH
47082: LD_VAR 0 1
47086: PPUSH
47087: CALL_OW 437
47091: PUSH
47092: LD_INT 1
47094: ARRAY
47095: PUSH
47096: LD_INT 2
47098: ARRAY
47099: EQUAL
47100: AND
47101: IFFALSE 47128
47103: PUSH
47104: LD_VAR 0 3
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: CALL_OW 437
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: PUSH
47123: LD_INT 3
47125: ARRAY
47126: EQUAL
47127: AND
47128: IFFALSE 47138
// result := true ;
47130: LD_ADDR_VAR 0 4
47134: PUSH
47135: LD_INT 1
47137: ST_TO_ADDR
// end ; end ;
47138: LD_VAR 0 4
47142: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47143: LD_INT 0
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
// if not unit or not area then
47149: LD_VAR 0 1
47153: NOT
47154: IFTRUE 47163
47156: PUSH
47157: LD_VAR 0 2
47161: NOT
47162: OR
47163: IFFALSE 47167
// exit ;
47165: GO 47343
// tmp := AreaToList ( area , i ) ;
47167: LD_ADDR_VAR 0 6
47171: PUSH
47172: LD_VAR 0 2
47176: PPUSH
47177: LD_VAR 0 5
47181: PPUSH
47182: CALL_OW 517
47186: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47187: LD_ADDR_VAR 0 5
47191: PUSH
47192: DOUBLE
47193: LD_INT 1
47195: DEC
47196: ST_TO_ADDR
47197: LD_VAR 0 6
47201: PUSH
47202: LD_INT 1
47204: ARRAY
47205: PUSH
47206: FOR_TO
47207: IFFALSE 47341
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47209: LD_ADDR_VAR 0 7
47213: PUSH
47214: LD_VAR 0 6
47218: PUSH
47219: LD_INT 1
47221: ARRAY
47222: PUSH
47223: LD_VAR 0 5
47227: ARRAY
47228: PUSH
47229: LD_VAR 0 6
47233: PUSH
47234: LD_INT 2
47236: ARRAY
47237: PUSH
47238: LD_VAR 0 5
47242: ARRAY
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47248: LD_INT 92
47250: PUSH
47251: LD_VAR 0 7
47255: PUSH
47256: LD_INT 1
47258: ARRAY
47259: PUSH
47260: LD_VAR 0 7
47264: PUSH
47265: LD_INT 2
47267: ARRAY
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: PPUSH
47278: CALL_OW 69
47282: PUSH
47283: LD_INT 0
47285: EQUAL
47286: IFFALSE 47339
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47288: LD_VAR 0 1
47292: PPUSH
47293: LD_VAR 0 7
47297: PUSH
47298: LD_INT 1
47300: ARRAY
47301: PPUSH
47302: LD_VAR 0 7
47306: PUSH
47307: LD_INT 2
47309: ARRAY
47310: PPUSH
47311: LD_VAR 0 3
47315: PPUSH
47316: CALL_OW 48
// result := IsPlaced ( unit ) ;
47320: LD_ADDR_VAR 0 4
47324: PUSH
47325: LD_VAR 0 1
47329: PPUSH
47330: CALL_OW 305
47334: ST_TO_ADDR
// exit ;
47335: POP
47336: POP
47337: GO 47343
// end ; end ;
47339: GO 47206
47341: POP
47342: POP
// end ;
47343: LD_VAR 0 4
47347: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47348: LD_INT 0
47350: PPUSH
47351: PPUSH
47352: PPUSH
// if not side or side > 8 then
47353: LD_VAR 0 1
47357: NOT
47358: IFTRUE 47370
47360: PUSH
47361: LD_VAR 0 1
47365: PUSH
47366: LD_INT 8
47368: GREATER
47369: OR
47370: IFFALSE 47374
// exit ;
47372: GO 47561
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47374: LD_ADDR_VAR 0 4
47378: PUSH
47379: LD_INT 22
47381: PUSH
47382: LD_VAR 0 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 21
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PPUSH
47405: CALL_OW 69
47409: ST_TO_ADDR
// if not tmp then
47410: LD_VAR 0 4
47414: NOT
47415: IFFALSE 47419
// exit ;
47417: GO 47561
// enable_addtolog := true ;
47419: LD_ADDR_OWVAR 81
47423: PUSH
47424: LD_INT 1
47426: ST_TO_ADDR
// AddToLog ( [ ) ;
47427: LD_STRING [
47429: PPUSH
47430: CALL_OW 561
// for i in tmp do
47434: LD_ADDR_VAR 0 3
47438: PUSH
47439: LD_VAR 0 4
47443: PUSH
47444: FOR_IN
47445: IFFALSE 47552
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47447: LD_STRING [
47449: PUSH
47450: LD_VAR 0 3
47454: PPUSH
47455: CALL_OW 266
47459: STR
47460: PUSH
47461: LD_STRING , 
47463: STR
47464: PUSH
47465: LD_VAR 0 3
47469: PPUSH
47470: CALL_OW 250
47474: STR
47475: PUSH
47476: LD_STRING , 
47478: STR
47479: PUSH
47480: LD_VAR 0 3
47484: PPUSH
47485: CALL_OW 251
47489: STR
47490: PUSH
47491: LD_STRING , 
47493: STR
47494: PUSH
47495: LD_VAR 0 3
47499: PPUSH
47500: CALL_OW 254
47504: STR
47505: PUSH
47506: LD_STRING , 
47508: STR
47509: PUSH
47510: LD_VAR 0 3
47514: PPUSH
47515: LD_INT 1
47517: PPUSH
47518: CALL_OW 268
47522: STR
47523: PUSH
47524: LD_STRING , 
47526: STR
47527: PUSH
47528: LD_VAR 0 3
47532: PPUSH
47533: LD_INT 2
47535: PPUSH
47536: CALL_OW 268
47540: STR
47541: PUSH
47542: LD_STRING ],
47544: STR
47545: PPUSH
47546: CALL_OW 561
// end ;
47550: GO 47444
47552: POP
47553: POP
// AddToLog ( ]; ) ;
47554: LD_STRING ];
47556: PPUSH
47557: CALL_OW 561
// end ;
47561: LD_VAR 0 2
47565: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47566: LD_INT 0
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
// if not area or not rate or not max then
47573: LD_VAR 0 1
47577: NOT
47578: IFTRUE 47587
47580: PUSH
47581: LD_VAR 0 2
47585: NOT
47586: OR
47587: IFTRUE 47596
47589: PUSH
47590: LD_VAR 0 4
47594: NOT
47595: OR
47596: IFFALSE 47600
// exit ;
47598: GO 47789
// while 1 do
47600: LD_INT 1
47602: IFFALSE 47789
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47604: LD_ADDR_VAR 0 9
47608: PUSH
47609: LD_VAR 0 1
47613: PPUSH
47614: LD_INT 1
47616: PPUSH
47617: CALL_OW 287
47621: PUSH
47622: LD_INT 10
47624: MUL
47625: ST_TO_ADDR
// r := rate / 10 ;
47626: LD_ADDR_VAR 0 7
47630: PUSH
47631: LD_VAR 0 2
47635: PUSH
47636: LD_INT 10
47638: DIVREAL
47639: ST_TO_ADDR
// time := 1 1$00 ;
47640: LD_ADDR_VAR 0 8
47644: PUSH
47645: LD_INT 2100
47647: ST_TO_ADDR
// if amount < min then
47648: LD_VAR 0 9
47652: PUSH
47653: LD_VAR 0 3
47657: LESS
47658: IFFALSE 47676
// r := r * 2 else
47660: LD_ADDR_VAR 0 7
47664: PUSH
47665: LD_VAR 0 7
47669: PUSH
47670: LD_INT 2
47672: MUL
47673: ST_TO_ADDR
47674: GO 47702
// if amount > max then
47676: LD_VAR 0 9
47680: PUSH
47681: LD_VAR 0 4
47685: GREATER
47686: IFFALSE 47702
// r := r / 2 ;
47688: LD_ADDR_VAR 0 7
47692: PUSH
47693: LD_VAR 0 7
47697: PUSH
47698: LD_INT 2
47700: DIVREAL
47701: ST_TO_ADDR
// time := time / r ;
47702: LD_ADDR_VAR 0 8
47706: PUSH
47707: LD_VAR 0 8
47711: PUSH
47712: LD_VAR 0 7
47716: DIVREAL
47717: ST_TO_ADDR
// if time < 0 then
47718: LD_VAR 0 8
47722: PUSH
47723: LD_INT 0
47725: LESS
47726: IFFALSE 47743
// time := time * - 1 ;
47728: LD_ADDR_VAR 0 8
47732: PUSH
47733: LD_VAR 0 8
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: MUL
47742: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47743: LD_VAR 0 8
47747: PUSH
47748: LD_INT 35
47750: PPUSH
47751: LD_INT 875
47753: PPUSH
47754: CALL_OW 12
47758: PLUS
47759: PPUSH
47760: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47764: LD_INT 1
47766: PPUSH
47767: LD_INT 5
47769: PPUSH
47770: CALL_OW 12
47774: PPUSH
47775: LD_VAR 0 1
47779: PPUSH
47780: LD_INT 1
47782: PPUSH
47783: CALL_OW 55
// end ;
47787: GO 47600
// end ;
47789: LD_VAR 0 5
47793: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47794: LD_INT 0
47796: PPUSH
47797: PPUSH
47798: PPUSH
47799: PPUSH
47800: PPUSH
47801: PPUSH
47802: PPUSH
47803: PPUSH
// if not turrets or not factories then
47804: LD_VAR 0 1
47808: NOT
47809: IFTRUE 47818
47811: PUSH
47812: LD_VAR 0 2
47816: NOT
47817: OR
47818: IFFALSE 47822
// exit ;
47820: GO 48129
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47822: LD_ADDR_VAR 0 10
47826: PUSH
47827: LD_INT 5
47829: PUSH
47830: LD_INT 6
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 2
47839: PUSH
47840: LD_INT 4
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: PUSH
47850: LD_INT 5
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 24
47864: PUSH
47865: LD_INT 25
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 23
47874: PUSH
47875: LD_INT 27
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 42
47888: PUSH
47889: LD_INT 43
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 44
47898: PUSH
47899: LD_INT 46
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 45
47908: PUSH
47909: LD_INT 47
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: ST_TO_ADDR
// result := [ ] ;
47926: LD_ADDR_VAR 0 3
47930: PUSH
47931: EMPTY
47932: ST_TO_ADDR
// for i in turrets do
47933: LD_ADDR_VAR 0 4
47937: PUSH
47938: LD_VAR 0 1
47942: PUSH
47943: FOR_IN
47944: IFFALSE 48127
// begin nat := GetNation ( i ) ;
47946: LD_ADDR_VAR 0 7
47950: PUSH
47951: LD_VAR 0 4
47955: PPUSH
47956: CALL_OW 248
47960: ST_TO_ADDR
// weapon := 0 ;
47961: LD_ADDR_VAR 0 8
47965: PUSH
47966: LD_INT 0
47968: ST_TO_ADDR
// if not nat then
47969: LD_VAR 0 7
47973: NOT
47974: IFFALSE 47978
// continue ;
47976: GO 47943
// for j in list [ nat ] do
47978: LD_ADDR_VAR 0 5
47982: PUSH
47983: LD_VAR 0 10
47987: PUSH
47988: LD_VAR 0 7
47992: ARRAY
47993: PUSH
47994: FOR_IN
47995: IFFALSE 48036
// if GetBWeapon ( i ) = j [ 1 ] then
47997: LD_VAR 0 4
48001: PPUSH
48002: CALL_OW 269
48006: PUSH
48007: LD_VAR 0 5
48011: PUSH
48012: LD_INT 1
48014: ARRAY
48015: EQUAL
48016: IFFALSE 48034
// begin weapon := j [ 2 ] ;
48018: LD_ADDR_VAR 0 8
48022: PUSH
48023: LD_VAR 0 5
48027: PUSH
48028: LD_INT 2
48030: ARRAY
48031: ST_TO_ADDR
// break ;
48032: GO 48036
// end ;
48034: GO 47994
48036: POP
48037: POP
// if not weapon then
48038: LD_VAR 0 8
48042: NOT
48043: IFFALSE 48047
// continue ;
48045: GO 47943
// for k in factories do
48047: LD_ADDR_VAR 0 6
48051: PUSH
48052: LD_VAR 0 2
48056: PUSH
48057: FOR_IN
48058: IFFALSE 48123
// begin weapons := AvailableWeaponList ( k ) ;
48060: LD_ADDR_VAR 0 9
48064: PUSH
48065: LD_VAR 0 6
48069: PPUSH
48070: CALL_OW 478
48074: ST_TO_ADDR
// if not weapons then
48075: LD_VAR 0 9
48079: NOT
48080: IFFALSE 48084
// continue ;
48082: GO 48057
// if weapon in weapons then
48084: LD_VAR 0 8
48088: PUSH
48089: LD_VAR 0 9
48093: IN
48094: IFFALSE 48121
// begin result := [ i , weapon ] ;
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_VAR 0 4
48105: PUSH
48106: LD_VAR 0 8
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// exit ;
48115: POP
48116: POP
48117: POP
48118: POP
48119: GO 48129
// end ; end ;
48121: GO 48057
48123: POP
48124: POP
// end ;
48125: GO 47943
48127: POP
48128: POP
// end ;
48129: LD_VAR 0 3
48133: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48134: LD_INT 0
48136: PPUSH
// if not side or side > 8 then
48137: LD_VAR 0 3
48141: NOT
48142: IFTRUE 48154
48144: PUSH
48145: LD_VAR 0 3
48149: PUSH
48150: LD_INT 8
48152: GREATER
48153: OR
48154: IFFALSE 48158
// exit ;
48156: GO 48217
// if not range then
48158: LD_VAR 0 4
48162: NOT
48163: IFFALSE 48174
// range := - 12 ;
48165: LD_ADDR_VAR 0 4
48169: PUSH
48170: LD_INT 12
48172: NEG
48173: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48174: LD_VAR 0 1
48178: PPUSH
48179: LD_VAR 0 2
48183: PPUSH
48184: LD_VAR 0 3
48188: PPUSH
48189: LD_VAR 0 4
48193: PPUSH
48194: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48198: LD_VAR 0 1
48202: PPUSH
48203: LD_VAR 0 2
48207: PPUSH
48208: LD_VAR 0 3
48212: PPUSH
48213: CALL_OW 331
// end ;
48217: LD_VAR 0 5
48221: RET
// export function Video ( mode ) ; begin
48222: LD_INT 0
48224: PPUSH
// ingame_video = mode ;
48225: LD_ADDR_OWVAR 52
48229: PUSH
48230: LD_VAR 0 1
48234: ST_TO_ADDR
// interface_hidden = mode ;
48235: LD_ADDR_OWVAR 54
48239: PUSH
48240: LD_VAR 0 1
48244: ST_TO_ADDR
// end ;
48245: LD_VAR 0 2
48249: RET
// export function Join ( array , element ) ; begin
48250: LD_INT 0
48252: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48253: LD_ADDR_VAR 0 3
48257: PUSH
48258: LD_VAR 0 1
48262: PPUSH
48263: LD_VAR 0 1
48267: PUSH
48268: LD_INT 1
48270: PLUS
48271: PPUSH
48272: LD_VAR 0 2
48276: PPUSH
48277: CALL_OW 1
48281: ST_TO_ADDR
// end ;
48282: LD_VAR 0 3
48286: RET
// export function JoinUnion ( array , element ) ; begin
48287: LD_INT 0
48289: PPUSH
// result := array union element ;
48290: LD_ADDR_VAR 0 3
48294: PUSH
48295: LD_VAR 0 1
48299: PUSH
48300: LD_VAR 0 2
48304: UNION
48305: ST_TO_ADDR
// end ;
48306: LD_VAR 0 3
48310: RET
// export function GetBehemoths ( side ) ; begin
48311: LD_INT 0
48313: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48314: LD_ADDR_VAR 0 2
48318: PUSH
48319: LD_INT 22
48321: PUSH
48322: LD_VAR 0 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 31
48333: PUSH
48334: LD_INT 25
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PPUSH
48345: CALL_OW 69
48349: ST_TO_ADDR
// end ;
48350: LD_VAR 0 2
48354: RET
// export function Shuffle ( array ) ; var i , index ; begin
48355: LD_INT 0
48357: PPUSH
48358: PPUSH
48359: PPUSH
// result := [ ] ;
48360: LD_ADDR_VAR 0 2
48364: PUSH
48365: EMPTY
48366: ST_TO_ADDR
// if not array then
48367: LD_VAR 0 1
48371: NOT
48372: IFFALSE 48376
// exit ;
48374: GO 48475
// Randomize ;
48376: CALL_OW 10
// for i = array downto 1 do
48380: LD_ADDR_VAR 0 3
48384: PUSH
48385: DOUBLE
48386: LD_VAR 0 1
48390: INC
48391: ST_TO_ADDR
48392: LD_INT 1
48394: PUSH
48395: FOR_DOWNTO
48396: IFFALSE 48473
// begin index := rand ( 1 , array ) ;
48398: LD_ADDR_VAR 0 4
48402: PUSH
48403: LD_INT 1
48405: PPUSH
48406: LD_VAR 0 1
48410: PPUSH
48411: CALL_OW 12
48415: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48416: LD_ADDR_VAR 0 2
48420: PUSH
48421: LD_VAR 0 2
48425: PPUSH
48426: LD_VAR 0 2
48430: PUSH
48431: LD_INT 1
48433: PLUS
48434: PPUSH
48435: LD_VAR 0 1
48439: PUSH
48440: LD_VAR 0 4
48444: ARRAY
48445: PPUSH
48446: CALL_OW 2
48450: ST_TO_ADDR
// array := Delete ( array , index ) ;
48451: LD_ADDR_VAR 0 1
48455: PUSH
48456: LD_VAR 0 1
48460: PPUSH
48461: LD_VAR 0 4
48465: PPUSH
48466: CALL_OW 3
48470: ST_TO_ADDR
// end ;
48471: GO 48395
48473: POP
48474: POP
// end ;
48475: LD_VAR 0 2
48479: RET
// export function GetBaseMaterials ( base ) ; begin
48480: LD_INT 0
48482: PPUSH
// result := [ 0 , 0 , 0 ] ;
48483: LD_ADDR_VAR 0 2
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: ST_TO_ADDR
// if not base then
48502: LD_VAR 0 1
48506: NOT
48507: IFFALSE 48511
// exit ;
48509: GO 48560
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48511: LD_ADDR_VAR 0 2
48515: PUSH
48516: LD_VAR 0 1
48520: PPUSH
48521: LD_INT 1
48523: PPUSH
48524: CALL_OW 275
48528: PUSH
48529: LD_VAR 0 1
48533: PPUSH
48534: LD_INT 2
48536: PPUSH
48537: CALL_OW 275
48541: PUSH
48542: LD_VAR 0 1
48546: PPUSH
48547: LD_INT 3
48549: PPUSH
48550: CALL_OW 275
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// end ;
48560: LD_VAR 0 2
48564: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48565: LD_INT 0
48567: PPUSH
48568: PPUSH
// result := array ;
48569: LD_ADDR_VAR 0 3
48573: PUSH
48574: LD_VAR 0 1
48578: ST_TO_ADDR
// if size >= result then
48579: LD_VAR 0 2
48583: PUSH
48584: LD_VAR 0 3
48588: GREATEREQUAL
48589: IFFALSE 48593
// exit ;
48591: GO 48643
// if size then
48593: LD_VAR 0 2
48597: IFFALSE 48643
// for i := array downto size do
48599: LD_ADDR_VAR 0 4
48603: PUSH
48604: DOUBLE
48605: LD_VAR 0 1
48609: INC
48610: ST_TO_ADDR
48611: LD_VAR 0 2
48615: PUSH
48616: FOR_DOWNTO
48617: IFFALSE 48641
// result := Delete ( result , result ) ;
48619: LD_ADDR_VAR 0 3
48623: PUSH
48624: LD_VAR 0 3
48628: PPUSH
48629: LD_VAR 0 3
48633: PPUSH
48634: CALL_OW 3
48638: ST_TO_ADDR
48639: GO 48616
48641: POP
48642: POP
// end ;
48643: LD_VAR 0 3
48647: RET
// export function ComExit ( unit ) ; var tmp ; begin
48648: LD_INT 0
48650: PPUSH
48651: PPUSH
// if not IsInUnit ( unit ) then
48652: LD_VAR 0 1
48656: PPUSH
48657: CALL_OW 310
48661: NOT
48662: IFFALSE 48666
// exit ;
48664: GO 48726
// tmp := IsInUnit ( unit ) ;
48666: LD_ADDR_VAR 0 3
48670: PUSH
48671: LD_VAR 0 1
48675: PPUSH
48676: CALL_OW 310
48680: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48681: LD_VAR 0 3
48685: PPUSH
48686: CALL_OW 247
48690: PUSH
48691: LD_INT 2
48693: EQUAL
48694: IFFALSE 48707
// ComExitVehicle ( unit ) else
48696: LD_VAR 0 1
48700: PPUSH
48701: CALL_OW 121
48705: GO 48716
// ComExitBuilding ( unit ) ;
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 122
// result := tmp ;
48716: LD_ADDR_VAR 0 2
48720: PUSH
48721: LD_VAR 0 3
48725: ST_TO_ADDR
// end ;
48726: LD_VAR 0 2
48730: RET
// export function ComExitAll ( units ) ; var i ; begin
48731: LD_INT 0
48733: PPUSH
48734: PPUSH
// if not units then
48735: LD_VAR 0 1
48739: NOT
48740: IFFALSE 48744
// exit ;
48742: GO 48770
// for i in units do
48744: LD_ADDR_VAR 0 3
48748: PUSH
48749: LD_VAR 0 1
48753: PUSH
48754: FOR_IN
48755: IFFALSE 48768
// ComExit ( i ) ;
48757: LD_VAR 0 3
48761: PPUSH
48762: CALL 48648 0 1
48766: GO 48754
48768: POP
48769: POP
// end ;
48770: LD_VAR 0 2
48774: RET
// export function ResetHc ; begin
48775: LD_INT 0
48777: PPUSH
// InitHc ;
48778: CALL_OW 19
// hc_importance := 0 ;
48782: LD_ADDR_OWVAR 32
48786: PUSH
48787: LD_INT 0
48789: ST_TO_ADDR
// end ;
48790: LD_VAR 0 1
48794: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48795: LD_INT 0
48797: PPUSH
48798: PPUSH
48799: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48800: LD_ADDR_VAR 0 6
48804: PUSH
48805: LD_VAR 0 1
48809: PUSH
48810: LD_VAR 0 3
48814: PLUS
48815: PUSH
48816: LD_INT 2
48818: DIV
48819: ST_TO_ADDR
// if _x < 0 then
48820: LD_VAR 0 6
48824: PUSH
48825: LD_INT 0
48827: LESS
48828: IFFALSE 48845
// _x := _x * - 1 ;
48830: LD_ADDR_VAR 0 6
48834: PUSH
48835: LD_VAR 0 6
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: MUL
48844: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48845: LD_ADDR_VAR 0 7
48849: PUSH
48850: LD_VAR 0 2
48854: PUSH
48855: LD_VAR 0 4
48859: PLUS
48860: PUSH
48861: LD_INT 2
48863: DIV
48864: ST_TO_ADDR
// if _y < 0 then
48865: LD_VAR 0 7
48869: PUSH
48870: LD_INT 0
48872: LESS
48873: IFFALSE 48890
// _y := _y * - 1 ;
48875: LD_ADDR_VAR 0 7
48879: PUSH
48880: LD_VAR 0 7
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: MUL
48889: ST_TO_ADDR
// result := [ _x , _y ] ;
48890: LD_ADDR_VAR 0 5
48894: PUSH
48895: LD_VAR 0 6
48899: PUSH
48900: LD_VAR 0 7
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// end ;
48909: LD_VAR 0 5
48913: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48914: LD_INT 0
48916: PPUSH
48917: PPUSH
48918: PPUSH
48919: PPUSH
// task := GetTaskList ( unit ) ;
48920: LD_ADDR_VAR 0 7
48924: PUSH
48925: LD_VAR 0 1
48929: PPUSH
48930: CALL_OW 437
48934: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48935: LD_VAR 0 7
48939: NOT
48940: IFFALSE 48959
48942: PUSH
48943: LD_VAR 0 1
48947: PPUSH
48948: LD_VAR 0 2
48952: PPUSH
48953: CALL_OW 308
48957: NOT
48958: AND
48959: IFFALSE 48963
// exit ;
48961: GO 49081
// if IsInArea ( unit , area ) then
48963: LD_VAR 0 1
48967: PPUSH
48968: LD_VAR 0 2
48972: PPUSH
48973: CALL_OW 308
48977: IFFALSE 48995
// begin ComMoveToArea ( unit , goAway ) ;
48979: LD_VAR 0 1
48983: PPUSH
48984: LD_VAR 0 3
48988: PPUSH
48989: CALL_OW 113
// exit ;
48993: GO 49081
// end ; if task [ 1 ] [ 1 ] <> M then
48995: LD_VAR 0 7
48999: PUSH
49000: LD_INT 1
49002: ARRAY
49003: PUSH
49004: LD_INT 1
49006: ARRAY
49007: PUSH
49008: LD_STRING M
49010: NONEQUAL
49011: IFFALSE 49015
// exit ;
49013: GO 49081
// x := task [ 1 ] [ 2 ] ;
49015: LD_ADDR_VAR 0 5
49019: PUSH
49020: LD_VAR 0 7
49024: PUSH
49025: LD_INT 1
49027: ARRAY
49028: PUSH
49029: LD_INT 2
49031: ARRAY
49032: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49033: LD_ADDR_VAR 0 6
49037: PUSH
49038: LD_VAR 0 7
49042: PUSH
49043: LD_INT 1
49045: ARRAY
49046: PUSH
49047: LD_INT 3
49049: ARRAY
49050: ST_TO_ADDR
// if InArea ( x , y , area ) then
49051: LD_VAR 0 5
49055: PPUSH
49056: LD_VAR 0 6
49060: PPUSH
49061: LD_VAR 0 2
49065: PPUSH
49066: CALL_OW 309
49070: IFFALSE 49081
// ComStop ( unit ) ;
49072: LD_VAR 0 1
49076: PPUSH
49077: CALL_OW 141
// end ;
49081: LD_VAR 0 4
49085: RET
// export function Abs ( value ) ; begin
49086: LD_INT 0
49088: PPUSH
// result := value ;
49089: LD_ADDR_VAR 0 2
49093: PUSH
49094: LD_VAR 0 1
49098: ST_TO_ADDR
// if value < 0 then
49099: LD_VAR 0 1
49103: PUSH
49104: LD_INT 0
49106: LESS
49107: IFFALSE 49124
// result := value * - 1 ;
49109: LD_ADDR_VAR 0 2
49113: PUSH
49114: LD_VAR 0 1
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: MUL
49123: ST_TO_ADDR
// end ;
49124: LD_VAR 0 2
49128: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49129: LD_INT 0
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
49136: PPUSH
49137: PPUSH
49138: PPUSH
// if not unit or not building then
49139: LD_VAR 0 1
49143: NOT
49144: IFTRUE 49153
49146: PUSH
49147: LD_VAR 0 2
49151: NOT
49152: OR
49153: IFFALSE 49157
// exit ;
49155: GO 49385
// x := GetX ( building ) ;
49157: LD_ADDR_VAR 0 4
49161: PUSH
49162: LD_VAR 0 2
49166: PPUSH
49167: CALL_OW 250
49171: ST_TO_ADDR
// y := GetY ( building ) ;
49172: LD_ADDR_VAR 0 6
49176: PUSH
49177: LD_VAR 0 2
49181: PPUSH
49182: CALL_OW 251
49186: ST_TO_ADDR
// d := GetDir ( building ) ;
49187: LD_ADDR_VAR 0 8
49191: PUSH
49192: LD_VAR 0 2
49196: PPUSH
49197: CALL_OW 254
49201: ST_TO_ADDR
// r := 4 ;
49202: LD_ADDR_VAR 0 9
49206: PUSH
49207: LD_INT 4
49209: ST_TO_ADDR
// for i := 1 to 5 do
49210: LD_ADDR_VAR 0 10
49214: PUSH
49215: DOUBLE
49216: LD_INT 1
49218: DEC
49219: ST_TO_ADDR
49220: LD_INT 5
49222: PUSH
49223: FOR_TO
49224: IFFALSE 49383
// begin _x := ShiftX ( x , d , r + i ) ;
49226: LD_ADDR_VAR 0 5
49230: PUSH
49231: LD_VAR 0 4
49235: PPUSH
49236: LD_VAR 0 8
49240: PPUSH
49241: LD_VAR 0 9
49245: PUSH
49246: LD_VAR 0 10
49250: PLUS
49251: PPUSH
49252: CALL_OW 272
49256: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49257: LD_ADDR_VAR 0 7
49261: PUSH
49262: LD_VAR 0 6
49266: PPUSH
49267: LD_VAR 0 8
49271: PPUSH
49272: LD_VAR 0 9
49276: PUSH
49277: LD_VAR 0 10
49281: PLUS
49282: PPUSH
49283: CALL_OW 273
49287: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49288: LD_VAR 0 5
49292: PPUSH
49293: LD_VAR 0 7
49297: PPUSH
49298: CALL_OW 488
49302: IFFALSE 49337
49304: PUSH
49305: LD_VAR 0 5
49309: PPUSH
49310: LD_VAR 0 7
49314: PPUSH
49315: CALL_OW 428
49319: PPUSH
49320: CALL_OW 247
49324: PUSH
49325: LD_INT 3
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: IN
49335: NOT
49336: AND
49337: IFFALSE 49381
// begin ComMoveXY ( unit , _x , _y ) ;
49339: LD_VAR 0 1
49343: PPUSH
49344: LD_VAR 0 5
49348: PPUSH
49349: LD_VAR 0 7
49353: PPUSH
49354: CALL_OW 111
// result := [ _x , _y ] ;
49358: LD_ADDR_VAR 0 3
49362: PUSH
49363: LD_VAR 0 5
49367: PUSH
49368: LD_VAR 0 7
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: ST_TO_ADDR
// exit ;
49377: POP
49378: POP
49379: GO 49385
// end ; end ;
49381: GO 49223
49383: POP
49384: POP
// end ;
49385: LD_VAR 0 3
49389: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49390: LD_INT 0
49392: PPUSH
49393: PPUSH
49394: PPUSH
// result := 0 ;
49395: LD_ADDR_VAR 0 3
49399: PUSH
49400: LD_INT 0
49402: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49403: LD_VAR 0 1
49407: PUSH
49408: LD_INT 0
49410: LESS
49411: IFTRUE 49423
49413: PUSH
49414: LD_VAR 0 1
49418: PUSH
49419: LD_INT 8
49421: GREATER
49422: OR
49423: IFTRUE 49435
49425: PUSH
49426: LD_VAR 0 2
49430: PUSH
49431: LD_INT 0
49433: LESS
49434: OR
49435: IFTRUE 49447
49437: PUSH
49438: LD_VAR 0 2
49442: PUSH
49443: LD_INT 8
49445: GREATER
49446: OR
49447: IFFALSE 49451
// exit ;
49449: GO 49526
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49451: LD_ADDR_VAR 0 4
49455: PUSH
49456: LD_INT 22
49458: PUSH
49459: LD_VAR 0 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PPUSH
49468: CALL_OW 69
49472: PUSH
49473: FOR_IN
49474: IFFALSE 49524
// begin un := UnitShoot ( i ) ;
49476: LD_ADDR_VAR 0 5
49480: PUSH
49481: LD_VAR 0 4
49485: PPUSH
49486: CALL_OW 504
49490: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49491: LD_VAR 0 5
49495: PPUSH
49496: CALL_OW 255
49500: PUSH
49501: LD_VAR 0 1
49505: EQUAL
49506: IFFALSE 49522
// begin result := un ;
49508: LD_ADDR_VAR 0 3
49512: PUSH
49513: LD_VAR 0 5
49517: ST_TO_ADDR
// exit ;
49518: POP
49519: POP
49520: GO 49526
// end ; end ;
49522: GO 49473
49524: POP
49525: POP
// end ;
49526: LD_VAR 0 3
49530: RET
// export function GetCargoBay ( units ) ; begin
49531: LD_INT 0
49533: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49534: LD_ADDR_VAR 0 2
49538: PUSH
49539: LD_VAR 0 1
49543: PPUSH
49544: LD_INT 2
49546: PUSH
49547: LD_INT 34
49549: PUSH
49550: LD_INT 12
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 34
49559: PUSH
49560: LD_INT 51
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 34
49569: PUSH
49570: LD_INT 32
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 34
49579: PUSH
49580: LD_INT 89
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: PPUSH
49594: CALL_OW 72
49598: ST_TO_ADDR
// end ;
49599: LD_VAR 0 2
49603: RET
// export function Negate ( value ) ; begin
49604: LD_INT 0
49606: PPUSH
// result := not value ;
49607: LD_ADDR_VAR 0 2
49611: PUSH
49612: LD_VAR 0 1
49616: NOT
49617: ST_TO_ADDR
// end ;
49618: LD_VAR 0 2
49622: RET
// export function Inc ( value ) ; begin
49623: LD_INT 0
49625: PPUSH
// result := value + 1 ;
49626: LD_ADDR_VAR 0 2
49630: PUSH
49631: LD_VAR 0 1
49635: PUSH
49636: LD_INT 1
49638: PLUS
49639: ST_TO_ADDR
// end ;
49640: LD_VAR 0 2
49644: RET
// export function Dec ( value ) ; begin
49645: LD_INT 0
49647: PPUSH
// result := value - 1 ;
49648: LD_ADDR_VAR 0 2
49652: PUSH
49653: LD_VAR 0 1
49657: PUSH
49658: LD_INT 1
49660: MINUS
49661: ST_TO_ADDR
// end ;
49662: LD_VAR 0 2
49666: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49667: LD_INT 0
49669: PPUSH
49670: PPUSH
49671: PPUSH
49672: PPUSH
49673: PPUSH
49674: PPUSH
49675: PPUSH
49676: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49677: LD_VAR 0 1
49681: PPUSH
49682: LD_VAR 0 2
49686: PPUSH
49687: CALL_OW 488
49691: NOT
49692: IFTRUE 49711
49694: PUSH
49695: LD_VAR 0 3
49699: PPUSH
49700: LD_VAR 0 4
49704: PPUSH
49705: CALL_OW 488
49709: NOT
49710: OR
49711: IFFALSE 49724
// begin result := - 1 ;
49713: LD_ADDR_VAR 0 5
49717: PUSH
49718: LD_INT 1
49720: NEG
49721: ST_TO_ADDR
// exit ;
49722: GO 49959
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49724: LD_ADDR_VAR 0 12
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: LD_VAR 0 2
49738: PPUSH
49739: LD_VAR 0 3
49743: PPUSH
49744: LD_VAR 0 4
49748: PPUSH
49749: CALL 48795 0 4
49753: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49754: LD_ADDR_VAR 0 11
49758: PUSH
49759: LD_VAR 0 1
49763: PPUSH
49764: LD_VAR 0 2
49768: PPUSH
49769: LD_VAR 0 12
49773: PUSH
49774: LD_INT 1
49776: ARRAY
49777: PPUSH
49778: LD_VAR 0 12
49782: PUSH
49783: LD_INT 2
49785: ARRAY
49786: PPUSH
49787: CALL_OW 298
49791: ST_TO_ADDR
// distance := 9999 ;
49792: LD_ADDR_VAR 0 10
49796: PUSH
49797: LD_INT 9999
49799: ST_TO_ADDR
// for i := 0 to 5 do
49800: LD_ADDR_VAR 0 6
49804: PUSH
49805: DOUBLE
49806: LD_INT 0
49808: DEC
49809: ST_TO_ADDR
49810: LD_INT 5
49812: PUSH
49813: FOR_TO
49814: IFFALSE 49957
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49816: LD_ADDR_VAR 0 7
49820: PUSH
49821: LD_VAR 0 1
49825: PPUSH
49826: LD_VAR 0 6
49830: PPUSH
49831: LD_VAR 0 11
49835: PPUSH
49836: CALL_OW 272
49840: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49841: LD_ADDR_VAR 0 8
49845: PUSH
49846: LD_VAR 0 2
49850: PPUSH
49851: LD_VAR 0 6
49855: PPUSH
49856: LD_VAR 0 11
49860: PPUSH
49861: CALL_OW 273
49865: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49866: LD_VAR 0 7
49870: PPUSH
49871: LD_VAR 0 8
49875: PPUSH
49876: CALL_OW 488
49880: NOT
49881: IFFALSE 49885
// continue ;
49883: GO 49813
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49885: LD_ADDR_VAR 0 9
49889: PUSH
49890: LD_VAR 0 12
49894: PUSH
49895: LD_INT 1
49897: ARRAY
49898: PPUSH
49899: LD_VAR 0 12
49903: PUSH
49904: LD_INT 2
49906: ARRAY
49907: PPUSH
49908: LD_VAR 0 7
49912: PPUSH
49913: LD_VAR 0 8
49917: PPUSH
49918: CALL_OW 298
49922: ST_TO_ADDR
// if tmp < distance then
49923: LD_VAR 0 9
49927: PUSH
49928: LD_VAR 0 10
49932: LESS
49933: IFFALSE 49955
// begin result := i ;
49935: LD_ADDR_VAR 0 5
49939: PUSH
49940: LD_VAR 0 6
49944: ST_TO_ADDR
// distance := tmp ;
49945: LD_ADDR_VAR 0 10
49949: PUSH
49950: LD_VAR 0 9
49954: ST_TO_ADDR
// end ; end ;
49955: GO 49813
49957: POP
49958: POP
// end ;
49959: LD_VAR 0 5
49963: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49964: LD_INT 0
49966: PPUSH
49967: PPUSH
// if not driver or not IsInUnit ( driver ) then
49968: LD_VAR 0 1
49972: NOT
49973: IFTRUE 49987
49975: PUSH
49976: LD_VAR 0 1
49980: PPUSH
49981: CALL_OW 310
49985: NOT
49986: OR
49987: IFFALSE 49991
// exit ;
49989: GO 50081
// vehicle := IsInUnit ( driver ) ;
49991: LD_ADDR_VAR 0 3
49995: PUSH
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 310
50005: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50006: LD_VAR 0 1
50010: PPUSH
50011: LD_STRING \
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: PUSH
50041: LD_STRING E
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_VAR 0 3
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PPUSH
50077: CALL_OW 446
// end ;
50081: LD_VAR 0 2
50085: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50086: LD_INT 0
50088: PPUSH
50089: PPUSH
// if not driver or not IsInUnit ( driver ) then
50090: LD_VAR 0 1
50094: NOT
50095: IFTRUE 50109
50097: PUSH
50098: LD_VAR 0 1
50102: PPUSH
50103: CALL_OW 310
50107: NOT
50108: OR
50109: IFFALSE 50113
// exit ;
50111: GO 50203
// vehicle := IsInUnit ( driver ) ;
50113: LD_ADDR_VAR 0 3
50117: PUSH
50118: LD_VAR 0 1
50122: PPUSH
50123: CALL_OW 310
50127: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50128: LD_VAR 0 1
50132: PPUSH
50133: LD_STRING \
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: PUSH
50163: LD_STRING E
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_VAR 0 3
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PPUSH
50199: CALL_OW 447
// end ;
50203: LD_VAR 0 2
50207: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50208: LD_INT 0
50210: PPUSH
50211: PPUSH
50212: PPUSH
// tmp := [ ] ;
50213: LD_ADDR_VAR 0 5
50217: PUSH
50218: EMPTY
50219: ST_TO_ADDR
// for i in units do
50220: LD_ADDR_VAR 0 4
50224: PUSH
50225: LD_VAR 0 1
50229: PUSH
50230: FOR_IN
50231: IFFALSE 50269
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50233: LD_ADDR_VAR 0 5
50237: PUSH
50238: LD_VAR 0 5
50242: PPUSH
50243: LD_VAR 0 5
50247: PUSH
50248: LD_INT 1
50250: PLUS
50251: PPUSH
50252: LD_VAR 0 4
50256: PPUSH
50257: CALL_OW 256
50261: PPUSH
50262: CALL_OW 2
50266: ST_TO_ADDR
50267: GO 50230
50269: POP
50270: POP
// if not tmp then
50271: LD_VAR 0 5
50275: NOT
50276: IFFALSE 50280
// exit ;
50278: GO 50328
// if asc then
50280: LD_VAR 0 2
50284: IFFALSE 50308
// result := SortListByListAsc ( units , tmp ) else
50286: LD_ADDR_VAR 0 3
50290: PUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: LD_VAR 0 5
50300: PPUSH
50301: CALL_OW 76
50305: ST_TO_ADDR
50306: GO 50328
// result := SortListByListDesc ( units , tmp ) ;
50308: LD_ADDR_VAR 0 3
50312: PUSH
50313: LD_VAR 0 1
50317: PPUSH
50318: LD_VAR 0 5
50322: PPUSH
50323: CALL_OW 77
50327: ST_TO_ADDR
// end ;
50328: LD_VAR 0 3
50332: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50333: LD_INT 0
50335: PPUSH
50336: PPUSH
// task := GetTaskList ( mech ) ;
50337: LD_ADDR_VAR 0 4
50341: PUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 437
50351: ST_TO_ADDR
// if not task then
50352: LD_VAR 0 4
50356: NOT
50357: IFFALSE 50361
// exit ;
50359: GO 50405
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50361: LD_ADDR_VAR 0 3
50365: PUSH
50366: LD_VAR 0 4
50370: PUSH
50371: LD_INT 1
50373: ARRAY
50374: PUSH
50375: LD_INT 1
50377: ARRAY
50378: PUSH
50379: LD_STRING r
50381: EQUAL
50382: IFFALSE 50404
50384: PUSH
50385: LD_VAR 0 4
50389: PUSH
50390: LD_INT 1
50392: ARRAY
50393: PUSH
50394: LD_INT 4
50396: ARRAY
50397: PUSH
50398: LD_VAR 0 2
50402: EQUAL
50403: AND
50404: ST_TO_ADDR
// end ;
50405: LD_VAR 0 3
50409: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50410: LD_INT 0
50412: PPUSH
// SetDir ( unit , d ) ;
50413: LD_VAR 0 1
50417: PPUSH
50418: LD_VAR 0 4
50422: PPUSH
50423: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50427: LD_ADDR_VAR 0 6
50431: PUSH
50432: LD_VAR 0 1
50436: PPUSH
50437: LD_VAR 0 2
50441: PPUSH
50442: LD_VAR 0 3
50446: PPUSH
50447: LD_VAR 0 5
50451: PPUSH
50452: CALL_OW 48
50456: ST_TO_ADDR
// end ;
50457: LD_VAR 0 6
50461: RET
// export function ToNaturalNumber ( number ) ; begin
50462: LD_INT 0
50464: PPUSH
// result := number div 1 ;
50465: LD_ADDR_VAR 0 2
50469: PUSH
50470: LD_VAR 0 1
50474: PUSH
50475: LD_INT 1
50477: DIV
50478: ST_TO_ADDR
// if number < 0 then
50479: LD_VAR 0 1
50483: PUSH
50484: LD_INT 0
50486: LESS
50487: IFFALSE 50497
// result := 0 ;
50489: LD_ADDR_VAR 0 2
50493: PUSH
50494: LD_INT 0
50496: ST_TO_ADDR
// end ;
50497: LD_VAR 0 2
50501: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50502: LD_INT 0
50504: PPUSH
50505: PPUSH
50506: PPUSH
// if not buildings then
50507: LD_VAR 0 1
50511: NOT
50512: IFFALSE 50516
// exit ;
50514: GO 50631
// tmp := [ ] ;
50516: LD_ADDR_VAR 0 5
50520: PUSH
50521: EMPTY
50522: ST_TO_ADDR
// for b in buildings do
50523: LD_ADDR_VAR 0 4
50527: PUSH
50528: LD_VAR 0 1
50532: PUSH
50533: FOR_IN
50534: IFFALSE 50572
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50536: LD_ADDR_VAR 0 5
50540: PUSH
50541: LD_VAR 0 5
50545: PPUSH
50546: LD_VAR 0 5
50550: PUSH
50551: LD_INT 1
50553: PLUS
50554: PPUSH
50555: LD_VAR 0 4
50559: PPUSH
50560: CALL_OW 266
50564: PPUSH
50565: CALL_OW 1
50569: ST_TO_ADDR
50570: GO 50533
50572: POP
50573: POP
// if not tmp then
50574: LD_VAR 0 5
50578: NOT
50579: IFFALSE 50583
// exit ;
50581: GO 50631
// if asc then
50583: LD_VAR 0 2
50587: IFFALSE 50611
// result := SortListByListAsc ( buildings , tmp ) else
50589: LD_ADDR_VAR 0 3
50593: PUSH
50594: LD_VAR 0 1
50598: PPUSH
50599: LD_VAR 0 5
50603: PPUSH
50604: CALL_OW 76
50608: ST_TO_ADDR
50609: GO 50631
// result := SortListByListDesc ( buildings , tmp ) ;
50611: LD_ADDR_VAR 0 3
50615: PUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: LD_VAR 0 5
50625: PPUSH
50626: CALL_OW 77
50630: ST_TO_ADDR
// end ;
50631: LD_VAR 0 3
50635: RET
// export function SortByClass ( units , class ) ; var un ; begin
50636: LD_INT 0
50638: PPUSH
50639: PPUSH
// if not units or not class then
50640: LD_VAR 0 1
50644: NOT
50645: IFTRUE 50654
50647: PUSH
50648: LD_VAR 0 2
50652: NOT
50653: OR
50654: IFFALSE 50658
// exit ;
50656: GO 50753
// result := [ ] ;
50658: LD_ADDR_VAR 0 3
50662: PUSH
50663: EMPTY
50664: ST_TO_ADDR
// for un in units do
50665: LD_ADDR_VAR 0 4
50669: PUSH
50670: LD_VAR 0 1
50674: PUSH
50675: FOR_IN
50676: IFFALSE 50751
// if GetClass ( un ) = class then
50678: LD_VAR 0 4
50682: PPUSH
50683: CALL_OW 257
50687: PUSH
50688: LD_VAR 0 2
50692: EQUAL
50693: IFFALSE 50720
// result := Insert ( result , 1 , un ) else
50695: LD_ADDR_VAR 0 3
50699: PUSH
50700: LD_VAR 0 3
50704: PPUSH
50705: LD_INT 1
50707: PPUSH
50708: LD_VAR 0 4
50712: PPUSH
50713: CALL_OW 2
50717: ST_TO_ADDR
50718: GO 50749
// result := Replace ( result , result + 1 , un ) ;
50720: LD_ADDR_VAR 0 3
50724: PUSH
50725: LD_VAR 0 3
50729: PPUSH
50730: LD_VAR 0 3
50734: PUSH
50735: LD_INT 1
50737: PLUS
50738: PPUSH
50739: LD_VAR 0 4
50743: PPUSH
50744: CALL_OW 1
50748: ST_TO_ADDR
50749: GO 50675
50751: POP
50752: POP
// end ;
50753: LD_VAR 0 3
50757: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50758: LD_INT 0
50760: PPUSH
50761: PPUSH
50762: PPUSH
50763: PPUSH
50764: PPUSH
50765: PPUSH
50766: PPUSH
// result := [ ] ;
50767: LD_ADDR_VAR 0 4
50771: PUSH
50772: EMPTY
50773: ST_TO_ADDR
// if x - r < 0 then
50774: LD_VAR 0 1
50778: PUSH
50779: LD_VAR 0 3
50783: MINUS
50784: PUSH
50785: LD_INT 0
50787: LESS
50788: IFFALSE 50800
// min_x := 0 else
50790: LD_ADDR_VAR 0 8
50794: PUSH
50795: LD_INT 0
50797: ST_TO_ADDR
50798: GO 50816
// min_x := x - r ;
50800: LD_ADDR_VAR 0 8
50804: PUSH
50805: LD_VAR 0 1
50809: PUSH
50810: LD_VAR 0 3
50814: MINUS
50815: ST_TO_ADDR
// if y - r < 0 then
50816: LD_VAR 0 2
50820: PUSH
50821: LD_VAR 0 3
50825: MINUS
50826: PUSH
50827: LD_INT 0
50829: LESS
50830: IFFALSE 50842
// min_y := 0 else
50832: LD_ADDR_VAR 0 7
50836: PUSH
50837: LD_INT 0
50839: ST_TO_ADDR
50840: GO 50858
// min_y := y - r ;
50842: LD_ADDR_VAR 0 7
50846: PUSH
50847: LD_VAR 0 2
50851: PUSH
50852: LD_VAR 0 3
50856: MINUS
50857: ST_TO_ADDR
// max_x := x + r ;
50858: LD_ADDR_VAR 0 9
50862: PUSH
50863: LD_VAR 0 1
50867: PUSH
50868: LD_VAR 0 3
50872: PLUS
50873: ST_TO_ADDR
// max_y := y + r ;
50874: LD_ADDR_VAR 0 10
50878: PUSH
50879: LD_VAR 0 2
50883: PUSH
50884: LD_VAR 0 3
50888: PLUS
50889: ST_TO_ADDR
// for _x = min_x to max_x do
50890: LD_ADDR_VAR 0 5
50894: PUSH
50895: DOUBLE
50896: LD_VAR 0 8
50900: DEC
50901: ST_TO_ADDR
50902: LD_VAR 0 9
50906: PUSH
50907: FOR_TO
50908: IFFALSE 51009
// for _y = min_y to max_y do
50910: LD_ADDR_VAR 0 6
50914: PUSH
50915: DOUBLE
50916: LD_VAR 0 7
50920: DEC
50921: ST_TO_ADDR
50922: LD_VAR 0 10
50926: PUSH
50927: FOR_TO
50928: IFFALSE 51005
// begin if not ValidHex ( _x , _y ) then
50930: LD_VAR 0 5
50934: PPUSH
50935: LD_VAR 0 6
50939: PPUSH
50940: CALL_OW 488
50944: NOT
50945: IFFALSE 50949
// continue ;
50947: GO 50927
// if GetResourceTypeXY ( _x , _y ) then
50949: LD_VAR 0 5
50953: PPUSH
50954: LD_VAR 0 6
50958: PPUSH
50959: CALL_OW 283
50963: IFFALSE 51003
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50965: LD_ADDR_VAR 0 4
50969: PUSH
50970: LD_VAR 0 4
50974: PPUSH
50975: LD_VAR 0 4
50979: PUSH
50980: LD_INT 1
50982: PLUS
50983: PPUSH
50984: LD_VAR 0 5
50988: PUSH
50989: LD_VAR 0 6
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PPUSH
50998: CALL_OW 1
51002: ST_TO_ADDR
// end ;
51003: GO 50927
51005: POP
51006: POP
51007: GO 50907
51009: POP
51010: POP
// end ;
51011: LD_VAR 0 4
51015: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51016: LD_INT 0
51018: PPUSH
51019: PPUSH
51020: PPUSH
51021: PPUSH
51022: PPUSH
51023: PPUSH
51024: PPUSH
51025: PPUSH
// if not units then
51026: LD_VAR 0 1
51030: NOT
51031: IFFALSE 51035
// exit ;
51033: GO 51567
// result := UnitFilter ( units , [ f_ok ] ) ;
51035: LD_ADDR_VAR 0 3
51039: PUSH
51040: LD_VAR 0 1
51044: PPUSH
51045: LD_INT 50
51047: PUSH
51048: EMPTY
51049: LIST
51050: PPUSH
51051: CALL_OW 72
51055: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51056: LD_ADDR_VAR 0 8
51060: PUSH
51061: LD_VAR 0 1
51065: PUSH
51066: LD_INT 1
51068: ARRAY
51069: PPUSH
51070: CALL_OW 255
51074: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51075: LD_ADDR_VAR 0 10
51079: PUSH
51080: LD_INT 29
51082: PUSH
51083: LD_INT 91
51085: PUSH
51086: LD_INT 49
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// if not result then
51094: LD_VAR 0 3
51098: NOT
51099: IFFALSE 51103
// exit ;
51101: GO 51567
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51103: LD_ADDR_VAR 0 5
51107: PUSH
51108: LD_INT 81
51110: PUSH
51111: LD_VAR 0 8
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PPUSH
51120: CALL_OW 69
51124: ST_TO_ADDR
// for i in result do
51125: LD_ADDR_VAR 0 4
51129: PUSH
51130: LD_VAR 0 3
51134: PUSH
51135: FOR_IN
51136: IFFALSE 51565
// begin tag := GetTag ( i ) + 1 ;
51138: LD_ADDR_VAR 0 9
51142: PUSH
51143: LD_VAR 0 4
51147: PPUSH
51148: CALL_OW 110
51152: PUSH
51153: LD_INT 1
51155: PLUS
51156: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51157: LD_ADDR_VAR 0 7
51161: PUSH
51162: LD_VAR 0 4
51166: PPUSH
51167: CALL_OW 250
51171: PPUSH
51172: LD_VAR 0 4
51176: PPUSH
51177: CALL_OW 251
51181: PPUSH
51182: LD_INT 4
51184: PPUSH
51185: CALL 50758 0 3
51189: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51190: LD_VAR 0 4
51194: PPUSH
51195: CALL_OW 247
51199: PUSH
51200: LD_INT 2
51202: EQUAL
51203: IFFALSE 51215
51205: PUSH
51206: LD_VAR 0 7
51210: PUSH
51211: LD_INT 2
51213: GREATER
51214: AND
51215: IFFALSE 51235
51217: PUSH
51218: LD_VAR 0 4
51222: PPUSH
51223: CALL_OW 264
51227: PUSH
51228: LD_VAR 0 10
51232: IN
51233: NOT
51234: AND
51235: IFFALSE 51274
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51237: LD_VAR 0 4
51241: PPUSH
51242: LD_VAR 0 7
51246: PUSH
51247: LD_INT 1
51249: ARRAY
51250: PUSH
51251: LD_INT 1
51253: ARRAY
51254: PPUSH
51255: LD_VAR 0 7
51259: PUSH
51260: LD_INT 1
51262: ARRAY
51263: PUSH
51264: LD_INT 2
51266: ARRAY
51267: PPUSH
51268: CALL_OW 116
51272: GO 51563
// if path > tag then
51274: LD_VAR 0 2
51278: PUSH
51279: LD_VAR 0 9
51283: GREATER
51284: IFFALSE 51492
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51286: LD_ADDR_VAR 0 6
51290: PUSH
51291: LD_VAR 0 5
51295: PPUSH
51296: LD_INT 91
51298: PUSH
51299: LD_VAR 0 4
51303: PUSH
51304: LD_INT 8
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: LIST
51311: PPUSH
51312: CALL_OW 72
51316: ST_TO_ADDR
// if nearEnemy then
51317: LD_VAR 0 6
51321: IFFALSE 51390
// begin if GetWeapon ( i ) = ru_time_lapser then
51323: LD_VAR 0 4
51327: PPUSH
51328: CALL_OW 264
51332: PUSH
51333: LD_INT 49
51335: EQUAL
51336: IFFALSE 51364
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51338: LD_VAR 0 4
51342: PPUSH
51343: LD_VAR 0 6
51347: PPUSH
51348: LD_VAR 0 4
51352: PPUSH
51353: CALL_OW 74
51357: PPUSH
51358: CALL_OW 112
51362: GO 51388
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51364: LD_VAR 0 4
51368: PPUSH
51369: LD_VAR 0 6
51373: PPUSH
51374: LD_VAR 0 4
51378: PPUSH
51379: CALL_OW 74
51383: PPUSH
51384: CALL 52648 0 2
// end else
51388: GO 51490
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51390: LD_VAR 0 4
51394: PPUSH
51395: LD_VAR 0 2
51399: PUSH
51400: LD_VAR 0 9
51404: ARRAY
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: PPUSH
51410: LD_VAR 0 2
51414: PUSH
51415: LD_VAR 0 9
51419: ARRAY
51420: PUSH
51421: LD_INT 2
51423: ARRAY
51424: PPUSH
51425: CALL_OW 297
51429: PUSH
51430: LD_INT 6
51432: GREATER
51433: IFFALSE 51476
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51435: LD_VAR 0 4
51439: PPUSH
51440: LD_VAR 0 2
51444: PUSH
51445: LD_VAR 0 9
51449: ARRAY
51450: PUSH
51451: LD_INT 1
51453: ARRAY
51454: PPUSH
51455: LD_VAR 0 2
51459: PUSH
51460: LD_VAR 0 9
51464: ARRAY
51465: PUSH
51466: LD_INT 2
51468: ARRAY
51469: PPUSH
51470: CALL_OW 114
51474: GO 51490
// SetTag ( i , tag ) ;
51476: LD_VAR 0 4
51480: PPUSH
51481: LD_VAR 0 9
51485: PPUSH
51486: CALL_OW 109
// end else
51490: GO 51563
// if enemy then
51492: LD_VAR 0 5
51496: IFFALSE 51563
// begin if GetWeapon ( i ) = ru_time_lapser then
51498: LD_VAR 0 4
51502: PPUSH
51503: CALL_OW 264
51507: PUSH
51508: LD_INT 49
51510: EQUAL
51511: IFFALSE 51539
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51513: LD_VAR 0 4
51517: PPUSH
51518: LD_VAR 0 5
51522: PPUSH
51523: LD_VAR 0 4
51527: PPUSH
51528: CALL_OW 74
51532: PPUSH
51533: CALL_OW 112
51537: GO 51563
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51539: LD_VAR 0 4
51543: PPUSH
51544: LD_VAR 0 5
51548: PPUSH
51549: LD_VAR 0 4
51553: PPUSH
51554: CALL_OW 74
51558: PPUSH
51559: CALL 52648 0 2
// end ; end ;
51563: GO 51135
51565: POP
51566: POP
// end ;
51567: LD_VAR 0 3
51571: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51572: LD_INT 0
51574: PPUSH
51575: PPUSH
51576: PPUSH
// if not unit or IsInUnit ( unit ) then
51577: LD_VAR 0 1
51581: NOT
51582: IFTRUE 51595
51584: PUSH
51585: LD_VAR 0 1
51589: PPUSH
51590: CALL_OW 310
51594: OR
51595: IFFALSE 51599
// exit ;
51597: GO 51690
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51599: LD_ADDR_VAR 0 4
51603: PUSH
51604: LD_VAR 0 1
51608: PPUSH
51609: CALL_OW 250
51613: PPUSH
51614: LD_VAR 0 2
51618: PPUSH
51619: LD_INT 1
51621: PPUSH
51622: CALL_OW 272
51626: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51627: LD_ADDR_VAR 0 5
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 251
51641: PPUSH
51642: LD_VAR 0 2
51646: PPUSH
51647: LD_INT 1
51649: PPUSH
51650: CALL_OW 273
51654: ST_TO_ADDR
// if ValidHex ( x , y ) then
51655: LD_VAR 0 4
51659: PPUSH
51660: LD_VAR 0 5
51664: PPUSH
51665: CALL_OW 488
51669: IFFALSE 51690
// ComTurnXY ( unit , x , y ) ;
51671: LD_VAR 0 1
51675: PPUSH
51676: LD_VAR 0 4
51680: PPUSH
51681: LD_VAR 0 5
51685: PPUSH
51686: CALL_OW 118
// end ;
51690: LD_VAR 0 3
51694: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51695: LD_INT 0
51697: PPUSH
51698: PPUSH
// result := false ;
51699: LD_ADDR_VAR 0 3
51703: PUSH
51704: LD_INT 0
51706: ST_TO_ADDR
// if not units then
51707: LD_VAR 0 2
51711: NOT
51712: IFFALSE 51716
// exit ;
51714: GO 51761
// for i in units do
51716: LD_ADDR_VAR 0 4
51720: PUSH
51721: LD_VAR 0 2
51725: PUSH
51726: FOR_IN
51727: IFFALSE 51759
// if See ( side , i ) then
51729: LD_VAR 0 1
51733: PPUSH
51734: LD_VAR 0 4
51738: PPUSH
51739: CALL_OW 292
51743: IFFALSE 51757
// begin result := true ;
51745: LD_ADDR_VAR 0 3
51749: PUSH
51750: LD_INT 1
51752: ST_TO_ADDR
// exit ;
51753: POP
51754: POP
51755: GO 51761
// end ;
51757: GO 51726
51759: POP
51760: POP
// end ;
51761: LD_VAR 0 3
51765: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51766: LD_INT 0
51768: PPUSH
51769: PPUSH
51770: PPUSH
51771: PPUSH
// if not unit or not points then
51772: LD_VAR 0 1
51776: NOT
51777: IFTRUE 51786
51779: PUSH
51780: LD_VAR 0 2
51784: NOT
51785: OR
51786: IFFALSE 51790
// exit ;
51788: GO 51880
// dist := 99999 ;
51790: LD_ADDR_VAR 0 5
51794: PUSH
51795: LD_INT 99999
51797: ST_TO_ADDR
// for i in points do
51798: LD_ADDR_VAR 0 4
51802: PUSH
51803: LD_VAR 0 2
51807: PUSH
51808: FOR_IN
51809: IFFALSE 51878
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51811: LD_ADDR_VAR 0 6
51815: PUSH
51816: LD_VAR 0 1
51820: PPUSH
51821: LD_VAR 0 4
51825: PUSH
51826: LD_INT 1
51828: ARRAY
51829: PPUSH
51830: LD_VAR 0 4
51834: PUSH
51835: LD_INT 2
51837: ARRAY
51838: PPUSH
51839: CALL_OW 297
51843: ST_TO_ADDR
// if tmpDist < dist then
51844: LD_VAR 0 6
51848: PUSH
51849: LD_VAR 0 5
51853: LESS
51854: IFFALSE 51876
// begin result := i ;
51856: LD_ADDR_VAR 0 3
51860: PUSH
51861: LD_VAR 0 4
51865: ST_TO_ADDR
// dist := tmpDist ;
51866: LD_ADDR_VAR 0 5
51870: PUSH
51871: LD_VAR 0 6
51875: ST_TO_ADDR
// end ; end ;
51876: GO 51808
51878: POP
51879: POP
// end ;
51880: LD_VAR 0 3
51884: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51885: LD_INT 0
51887: PPUSH
// uc_side := side ;
51888: LD_ADDR_OWVAR 20
51892: PUSH
51893: LD_VAR 0 1
51897: ST_TO_ADDR
// uc_nation := 3 ;
51898: LD_ADDR_OWVAR 21
51902: PUSH
51903: LD_INT 3
51905: ST_TO_ADDR
// vc_chassis := 25 ;
51906: LD_ADDR_OWVAR 37
51910: PUSH
51911: LD_INT 25
51913: ST_TO_ADDR
// vc_engine := engine_siberite ;
51914: LD_ADDR_OWVAR 39
51918: PUSH
51919: LD_INT 3
51921: ST_TO_ADDR
// vc_control := control_computer ;
51922: LD_ADDR_OWVAR 38
51926: PUSH
51927: LD_INT 3
51929: ST_TO_ADDR
// vc_weapon := 59 ;
51930: LD_ADDR_OWVAR 40
51934: PUSH
51935: LD_INT 59
51937: ST_TO_ADDR
// result := CreateVehicle ;
51938: LD_ADDR_VAR 0 5
51942: PUSH
51943: CALL_OW 45
51947: ST_TO_ADDR
// SetDir ( result , d ) ;
51948: LD_VAR 0 5
51952: PPUSH
51953: LD_VAR 0 4
51957: PPUSH
51958: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51962: LD_VAR 0 5
51966: PPUSH
51967: LD_VAR 0 2
51971: PPUSH
51972: LD_VAR 0 3
51976: PPUSH
51977: LD_INT 0
51979: PPUSH
51980: CALL_OW 48
// end ;
51984: LD_VAR 0 5
51988: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51989: LD_INT 0
51991: PPUSH
51992: PPUSH
51993: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51994: LD_ADDR_VAR 0 2
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52017: LD_VAR 0 1
52021: NOT
52022: IFTRUE 52055
52024: PUSH
52025: LD_VAR 0 1
52029: PPUSH
52030: CALL_OW 264
52034: PUSH
52035: LD_INT 12
52037: PUSH
52038: LD_INT 51
52040: PUSH
52041: LD_INT 32
52043: PUSH
52044: LD_INT 89
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: IN
52053: NOT
52054: OR
52055: IFFALSE 52059
// exit ;
52057: GO 52157
// for i := 1 to 3 do
52059: LD_ADDR_VAR 0 3
52063: PUSH
52064: DOUBLE
52065: LD_INT 1
52067: DEC
52068: ST_TO_ADDR
52069: LD_INT 3
52071: PUSH
52072: FOR_TO
52073: IFFALSE 52155
// begin tmp := GetCargo ( cargo , i ) ;
52075: LD_ADDR_VAR 0 4
52079: PUSH
52080: LD_VAR 0 1
52084: PPUSH
52085: LD_VAR 0 3
52089: PPUSH
52090: CALL_OW 289
52094: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52095: LD_ADDR_VAR 0 2
52099: PUSH
52100: LD_VAR 0 2
52104: PPUSH
52105: LD_VAR 0 3
52109: PPUSH
52110: LD_VAR 0 4
52114: PPUSH
52115: CALL_OW 1
52119: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52120: LD_ADDR_VAR 0 2
52124: PUSH
52125: LD_VAR 0 2
52129: PPUSH
52130: LD_INT 4
52132: PPUSH
52133: LD_VAR 0 2
52137: PUSH
52138: LD_INT 4
52140: ARRAY
52141: PUSH
52142: LD_VAR 0 4
52146: PLUS
52147: PPUSH
52148: CALL_OW 1
52152: ST_TO_ADDR
// end ;
52153: GO 52072
52155: POP
52156: POP
// end ;
52157: LD_VAR 0 2
52161: RET
// export function Length ( array ) ; begin
52162: LD_INT 0
52164: PPUSH
// result := array + 0 ;
52165: LD_ADDR_VAR 0 2
52169: PUSH
52170: LD_VAR 0 1
52174: PUSH
52175: LD_INT 0
52177: PLUS
52178: ST_TO_ADDR
// end ;
52179: LD_VAR 0 2
52183: RET
// export function PrepareArray ( array ) ; begin
52184: LD_INT 0
52186: PPUSH
// result := array diff 0 ;
52187: LD_ADDR_VAR 0 2
52191: PUSH
52192: LD_VAR 0 1
52196: PUSH
52197: LD_INT 0
52199: DIFF
52200: ST_TO_ADDR
// if not result [ 1 ] then
52201: LD_VAR 0 2
52205: PUSH
52206: LD_INT 1
52208: ARRAY
52209: NOT
52210: IFFALSE 52230
// result := Delete ( result , 1 ) ;
52212: LD_ADDR_VAR 0 2
52216: PUSH
52217: LD_VAR 0 2
52221: PPUSH
52222: LD_INT 1
52224: PPUSH
52225: CALL_OW 3
52229: ST_TO_ADDR
// end ;
52230: LD_VAR 0 2
52234: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52235: LD_INT 0
52237: PPUSH
52238: PPUSH
52239: PPUSH
52240: PPUSH
// sibRocketRange := 25 ;
52241: LD_ADDR_VAR 0 6
52245: PUSH
52246: LD_INT 25
52248: ST_TO_ADDR
// result := false ;
52249: LD_ADDR_VAR 0 4
52253: PUSH
52254: LD_INT 0
52256: ST_TO_ADDR
// for i := 0 to 5 do
52257: LD_ADDR_VAR 0 5
52261: PUSH
52262: DOUBLE
52263: LD_INT 0
52265: DEC
52266: ST_TO_ADDR
52267: LD_INT 5
52269: PUSH
52270: FOR_TO
52271: IFFALSE 52338
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52273: LD_VAR 0 1
52277: PPUSH
52278: LD_VAR 0 5
52282: PPUSH
52283: LD_VAR 0 6
52287: PPUSH
52288: CALL_OW 272
52292: PPUSH
52293: LD_VAR 0 2
52297: PPUSH
52298: LD_VAR 0 5
52302: PPUSH
52303: LD_VAR 0 6
52307: PPUSH
52308: CALL_OW 273
52312: PPUSH
52313: LD_VAR 0 3
52317: PPUSH
52318: CALL_OW 309
52322: IFFALSE 52336
// begin result := true ;
52324: LD_ADDR_VAR 0 4
52328: PUSH
52329: LD_INT 1
52331: ST_TO_ADDR
// exit ;
52332: POP
52333: POP
52334: GO 52340
// end ;
52336: GO 52270
52338: POP
52339: POP
// end ;
52340: LD_VAR 0 4
52344: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52345: LD_INT 0
52347: PPUSH
52348: PPUSH
52349: PPUSH
// if btype = b_depot then
52350: LD_VAR 0 2
52354: PUSH
52355: LD_INT 0
52357: EQUAL
52358: IFFALSE 52370
// begin result := true ;
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_INT 1
52367: ST_TO_ADDR
// exit ;
52368: GO 52490
// end ; pom := GetBase ( depot ) ;
52370: LD_ADDR_VAR 0 4
52374: PUSH
52375: LD_VAR 0 1
52379: PPUSH
52380: CALL_OW 274
52384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52385: LD_ADDR_VAR 0 5
52389: PUSH
52390: LD_VAR 0 2
52394: PPUSH
52395: LD_VAR 0 1
52399: PPUSH
52400: CALL_OW 248
52404: PPUSH
52405: CALL_OW 450
52409: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52410: LD_ADDR_VAR 0 3
52414: PUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: LD_INT 1
52422: PPUSH
52423: CALL_OW 275
52427: PUSH
52428: LD_VAR 0 5
52432: PUSH
52433: LD_INT 1
52435: ARRAY
52436: GREATEREQUAL
52437: IFFALSE 52463
52439: PUSH
52440: LD_VAR 0 4
52444: PPUSH
52445: LD_INT 2
52447: PPUSH
52448: CALL_OW 275
52452: PUSH
52453: LD_VAR 0 5
52457: PUSH
52458: LD_INT 2
52460: ARRAY
52461: GREATEREQUAL
52462: AND
52463: IFFALSE 52489
52465: PUSH
52466: LD_VAR 0 4
52470: PPUSH
52471: LD_INT 3
52473: PPUSH
52474: CALL_OW 275
52478: PUSH
52479: LD_VAR 0 5
52483: PUSH
52484: LD_INT 3
52486: ARRAY
52487: GREATEREQUAL
52488: AND
52489: ST_TO_ADDR
// end ;
52490: LD_VAR 0 3
52494: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52495: LD_INT 0
52497: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52498: LD_VAR 0 1
52502: PPUSH
52503: LD_VAR 0 2
52507: PPUSH
52508: LD_INT 0
52510: PPUSH
52511: LD_INT 0
52513: PPUSH
52514: LD_INT 1
52516: PPUSH
52517: LD_INT 0
52519: PPUSH
52520: CALL_OW 587
// end ;
52524: LD_VAR 0 3
52528: RET
// export function CenterOnNow ( unit ) ; begin
52529: LD_INT 0
52531: PPUSH
// result := IsInUnit ( unit ) ;
52532: LD_ADDR_VAR 0 2
52536: PUSH
52537: LD_VAR 0 1
52541: PPUSH
52542: CALL_OW 310
52546: ST_TO_ADDR
// if not result then
52547: LD_VAR 0 2
52551: NOT
52552: IFFALSE 52564
// result := unit ;
52554: LD_ADDR_VAR 0 2
52558: PUSH
52559: LD_VAR 0 1
52563: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52564: LD_VAR 0 1
52568: PPUSH
52569: CALL_OW 87
// end ;
52573: LD_VAR 0 2
52577: RET
// export function ComMoveHex ( unit , hex ) ; begin
52578: LD_INT 0
52580: PPUSH
// if not hex then
52581: LD_VAR 0 2
52585: NOT
52586: IFFALSE 52590
// exit ;
52588: GO 52643
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52590: LD_VAR 0 2
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PPUSH
52599: LD_VAR 0 2
52603: PUSH
52604: LD_INT 2
52606: ARRAY
52607: PPUSH
52608: CALL_OW 428
52612: IFFALSE 52616
// exit ;
52614: GO 52643
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52616: LD_VAR 0 1
52620: PPUSH
52621: LD_VAR 0 2
52625: PUSH
52626: LD_INT 1
52628: ARRAY
52629: PPUSH
52630: LD_VAR 0 2
52634: PUSH
52635: LD_INT 2
52637: ARRAY
52638: PPUSH
52639: CALL_OW 111
// end ;
52643: LD_VAR 0 3
52647: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52648: LD_INT 0
52650: PPUSH
52651: PPUSH
52652: PPUSH
// if not unit or not enemy then
52653: LD_VAR 0 1
52657: NOT
52658: IFTRUE 52667
52660: PUSH
52661: LD_VAR 0 2
52665: NOT
52666: OR
52667: IFFALSE 52671
// exit ;
52669: GO 52797
// x := GetX ( enemy ) ;
52671: LD_ADDR_VAR 0 4
52675: PUSH
52676: LD_VAR 0 2
52680: PPUSH
52681: CALL_OW 250
52685: ST_TO_ADDR
// y := GetY ( enemy ) ;
52686: LD_ADDR_VAR 0 5
52690: PUSH
52691: LD_VAR 0 2
52695: PPUSH
52696: CALL_OW 251
52700: ST_TO_ADDR
// if ValidHex ( x , y ) then
52701: LD_VAR 0 4
52705: PPUSH
52706: LD_VAR 0 5
52710: PPUSH
52711: CALL_OW 488
52715: IFFALSE 52797
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52717: LD_VAR 0 2
52721: PPUSH
52722: CALL_OW 247
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 2
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: IN
52737: IFTRUE 52760
52739: PUSH
52740: LD_VAR 0 1
52744: PPUSH
52745: CALL_OW 255
52749: PPUSH
52750: LD_VAR 0 2
52754: PPUSH
52755: CALL_OW 292
52759: OR
52760: IFFALSE 52778
// ComAttackUnit ( unit , enemy ) else
52762: LD_VAR 0 1
52766: PPUSH
52767: LD_VAR 0 2
52771: PPUSH
52772: CALL_OW 115
52776: GO 52797
// ComAgressiveMove ( unit , x , y ) ;
52778: LD_VAR 0 1
52782: PPUSH
52783: LD_VAR 0 4
52787: PPUSH
52788: LD_VAR 0 5
52792: PPUSH
52793: CALL_OW 114
// end ;
52797: LD_VAR 0 3
52801: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52802: LD_INT 0
52804: PPUSH
52805: PPUSH
52806: PPUSH
// list := AreaToList ( area , 0 ) ;
52807: LD_ADDR_VAR 0 5
52811: PUSH
52812: LD_VAR 0 1
52816: PPUSH
52817: LD_INT 0
52819: PPUSH
52820: CALL_OW 517
52824: ST_TO_ADDR
// if not list then
52825: LD_VAR 0 5
52829: NOT
52830: IFFALSE 52834
// exit ;
52832: GO 52964
// if all then
52834: LD_VAR 0 2
52838: IFFALSE 52926
// begin for i := 1 to list [ 1 ] do
52840: LD_ADDR_VAR 0 4
52844: PUSH
52845: DOUBLE
52846: LD_INT 1
52848: DEC
52849: ST_TO_ADDR
52850: LD_VAR 0 5
52854: PUSH
52855: LD_INT 1
52857: ARRAY
52858: PUSH
52859: FOR_TO
52860: IFFALSE 52922
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52862: LD_ADDR_VAR 0 3
52866: PUSH
52867: LD_VAR 0 3
52871: PPUSH
52872: LD_VAR 0 3
52876: PUSH
52877: LD_INT 1
52879: PLUS
52880: PPUSH
52881: LD_VAR 0 5
52885: PUSH
52886: LD_INT 1
52888: ARRAY
52889: PUSH
52890: LD_VAR 0 4
52894: ARRAY
52895: PUSH
52896: LD_VAR 0 5
52900: PUSH
52901: LD_INT 2
52903: ARRAY
52904: PUSH
52905: LD_VAR 0 4
52909: ARRAY
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PPUSH
52915: CALL_OW 1
52919: ST_TO_ADDR
52920: GO 52859
52922: POP
52923: POP
// exit ;
52924: GO 52964
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52926: LD_ADDR_VAR 0 3
52930: PUSH
52931: LD_VAR 0 5
52935: PUSH
52936: LD_INT 1
52938: ARRAY
52939: PUSH
52940: LD_INT 1
52942: ARRAY
52943: PUSH
52944: LD_VAR 0 5
52948: PUSH
52949: LD_INT 2
52951: ARRAY
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: ST_TO_ADDR
// end ;
52964: LD_VAR 0 3
52968: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52969: LD_INT 0
52971: PPUSH
52972: PPUSH
// list := AreaToList ( area , 0 ) ;
52973: LD_ADDR_VAR 0 4
52977: PUSH
52978: LD_VAR 0 1
52982: PPUSH
52983: LD_INT 0
52985: PPUSH
52986: CALL_OW 517
52990: ST_TO_ADDR
// if not list then
52991: LD_VAR 0 4
52995: NOT
52996: IFFALSE 53000
// exit ;
52998: GO 53041
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53000: LD_ADDR_VAR 0 3
53004: PUSH
53005: LD_VAR 0 4
53009: PUSH
53010: LD_INT 1
53012: ARRAY
53013: PUSH
53014: LD_INT 1
53016: ARRAY
53017: PUSH
53018: LD_VAR 0 4
53022: PUSH
53023: LD_INT 2
53025: ARRAY
53026: PUSH
53027: LD_INT 1
53029: ARRAY
53030: PUSH
53031: LD_VAR 0 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// end ;
53041: LD_VAR 0 3
53045: RET
// export function First ( array ) ; begin
53046: LD_INT 0
53048: PPUSH
// if not array then
53049: LD_VAR 0 1
53053: NOT
53054: IFFALSE 53058
// exit ;
53056: GO 53072
// result := array [ 1 ] ;
53058: LD_ADDR_VAR 0 2
53062: PUSH
53063: LD_VAR 0 1
53067: PUSH
53068: LD_INT 1
53070: ARRAY
53071: ST_TO_ADDR
// end ;
53072: LD_VAR 0 2
53076: RET
// export function Last ( array ) ; begin
53077: LD_INT 0
53079: PPUSH
// if not array then
53080: LD_VAR 0 1
53084: NOT
53085: IFFALSE 53089
// exit ;
53087: GO 53105
// result := array [ array ] ;
53089: LD_ADDR_VAR 0 2
53093: PUSH
53094: LD_VAR 0 1
53098: PUSH
53099: LD_VAR 0 1
53103: ARRAY
53104: ST_TO_ADDR
// end ;
53105: LD_VAR 0 2
53109: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53110: LD_INT 0
53112: PPUSH
53113: PPUSH
// result := [ ] ;
53114: LD_ADDR_VAR 0 5
53118: PUSH
53119: EMPTY
53120: ST_TO_ADDR
// if not array then
53121: LD_VAR 0 1
53125: NOT
53126: IFFALSE 53130
// exit ;
53128: GO 53242
// for i := 1 to array do
53130: LD_ADDR_VAR 0 6
53134: PUSH
53135: DOUBLE
53136: LD_INT 1
53138: DEC
53139: ST_TO_ADDR
53140: LD_VAR 0 1
53144: PUSH
53145: FOR_TO
53146: IFFALSE 53240
// if array [ i ] [ index ] = value then
53148: LD_VAR 0 1
53152: PUSH
53153: LD_VAR 0 6
53157: ARRAY
53158: PUSH
53159: LD_VAR 0 2
53163: ARRAY
53164: PUSH
53165: LD_VAR 0 3
53169: EQUAL
53170: IFFALSE 53238
// begin if indexColumn then
53172: LD_VAR 0 4
53176: IFFALSE 53212
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53178: LD_ADDR_VAR 0 5
53182: PUSH
53183: LD_VAR 0 5
53187: PPUSH
53188: LD_VAR 0 1
53192: PUSH
53193: LD_VAR 0 6
53197: ARRAY
53198: PUSH
53199: LD_VAR 0 4
53203: ARRAY
53204: PPUSH
53205: CALL 48250 0 2
53209: ST_TO_ADDR
53210: GO 53238
// result := Join ( result , array [ i ] ) ;
53212: LD_ADDR_VAR 0 5
53216: PUSH
53217: LD_VAR 0 5
53221: PPUSH
53222: LD_VAR 0 1
53226: PUSH
53227: LD_VAR 0 6
53231: ARRAY
53232: PPUSH
53233: CALL 48250 0 2
53237: ST_TO_ADDR
// end ;
53238: GO 53145
53240: POP
53241: POP
// end ;
53242: LD_VAR 0 5
53246: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53247: LD_INT 0
53249: PPUSH
// if not vehicles or not parkingPoint then
53250: LD_VAR 0 1
53254: NOT
53255: IFTRUE 53264
53257: PUSH
53258: LD_VAR 0 2
53262: NOT
53263: OR
53264: IFFALSE 53268
// exit ;
53266: GO 53366
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53268: LD_ADDR_VAR 0 1
53272: PUSH
53273: LD_VAR 0 1
53277: PPUSH
53278: LD_INT 50
53280: PUSH
53281: EMPTY
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: PUSH
53287: LD_INT 92
53289: PUSH
53290: LD_VAR 0 2
53294: PUSH
53295: LD_INT 1
53297: ARRAY
53298: PUSH
53299: LD_VAR 0 2
53303: PUSH
53304: LD_INT 2
53306: ARRAY
53307: PUSH
53308: LD_INT 8
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PPUSH
53325: CALL_OW 72
53329: ST_TO_ADDR
// if not vehicles then
53330: LD_VAR 0 1
53334: NOT
53335: IFFALSE 53339
// exit ;
53337: GO 53366
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53339: LD_VAR 0 1
53343: PPUSH
53344: LD_VAR 0 2
53348: PUSH
53349: LD_INT 1
53351: ARRAY
53352: PPUSH
53353: LD_VAR 0 2
53357: PUSH
53358: LD_INT 2
53360: ARRAY
53361: PPUSH
53362: CALL_OW 111
// end ;
53366: LD_VAR 0 3
53370: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53371: LD_INT 0
53373: PPUSH
53374: PPUSH
53375: PPUSH
// if not side or not area then
53376: LD_VAR 0 1
53380: NOT
53381: IFTRUE 53390
53383: PUSH
53384: LD_VAR 0 2
53388: NOT
53389: OR
53390: IFFALSE 53394
// exit ;
53392: GO 53513
// tmp := AreaToList ( area , 0 ) ;
53394: LD_ADDR_VAR 0 5
53398: PUSH
53399: LD_VAR 0 2
53403: PPUSH
53404: LD_INT 0
53406: PPUSH
53407: CALL_OW 517
53411: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53412: LD_ADDR_VAR 0 4
53416: PUSH
53417: DOUBLE
53418: LD_INT 1
53420: DEC
53421: ST_TO_ADDR
53422: LD_VAR 0 5
53426: PUSH
53427: LD_INT 1
53429: ARRAY
53430: PUSH
53431: FOR_TO
53432: IFFALSE 53511
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53434: LD_VAR 0 5
53438: PUSH
53439: LD_INT 1
53441: ARRAY
53442: PUSH
53443: LD_VAR 0 4
53447: ARRAY
53448: PPUSH
53449: LD_VAR 0 5
53453: PUSH
53454: LD_INT 2
53456: ARRAY
53457: PUSH
53458: LD_VAR 0 4
53462: ARRAY
53463: PPUSH
53464: CALL_OW 351
53468: IFFALSE 53509
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53470: LD_VAR 0 5
53474: PUSH
53475: LD_INT 1
53477: ARRAY
53478: PUSH
53479: LD_VAR 0 4
53483: ARRAY
53484: PPUSH
53485: LD_VAR 0 5
53489: PUSH
53490: LD_INT 2
53492: ARRAY
53493: PUSH
53494: LD_VAR 0 4
53498: ARRAY
53499: PPUSH
53500: LD_VAR 0 1
53504: PPUSH
53505: CALL_OW 244
// end ;
53509: GO 53431
53511: POP
53512: POP
// end ;
53513: LD_VAR 0 3
53517: RET
// export function UniqueArray ( array ) ; var i ; begin
53518: LD_INT 0
53520: PPUSH
53521: PPUSH
// result := [ ] ;
53522: LD_ADDR_VAR 0 2
53526: PUSH
53527: EMPTY
53528: ST_TO_ADDR
// if not array then
53529: LD_VAR 0 1
53533: NOT
53534: IFFALSE 53538
// exit ;
53536: GO 53599
// for i := 1 to array do
53538: LD_ADDR_VAR 0 3
53542: PUSH
53543: DOUBLE
53544: LD_INT 1
53546: DEC
53547: ST_TO_ADDR
53548: LD_VAR 0 1
53552: PUSH
53553: FOR_TO
53554: IFFALSE 53597
// if not array [ i ] in result then
53556: LD_VAR 0 1
53560: PUSH
53561: LD_VAR 0 3
53565: ARRAY
53566: PUSH
53567: LD_VAR 0 2
53571: IN
53572: NOT
53573: IFFALSE 53595
// result := Join ( result , i ) ;
53575: LD_ADDR_VAR 0 2
53579: PUSH
53580: LD_VAR 0 2
53584: PPUSH
53585: LD_VAR 0 3
53589: PPUSH
53590: CALL 48250 0 2
53594: ST_TO_ADDR
53595: GO 53553
53597: POP
53598: POP
// end ; end_of_file
53599: LD_VAR 0 2
53603: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53604: LD_VAR 0 1
53608: PUSH
53609: LD_INT 200
53611: DOUBLE
53612: GREATEREQUAL
53613: IFFALSE 53621
53615: LD_INT 299
53617: DOUBLE
53618: LESSEQUAL
53619: IFTRUE 53623
53621: GO 53655
53623: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53624: LD_VAR 0 1
53628: PPUSH
53629: LD_VAR 0 2
53633: PPUSH
53634: LD_VAR 0 3
53638: PPUSH
53639: LD_VAR 0 4
53643: PPUSH
53644: LD_VAR 0 5
53648: PPUSH
53649: CALL 54436 0 5
53653: GO 53732
53655: LD_INT 300
53657: DOUBLE
53658: GREATEREQUAL
53659: IFFALSE 53667
53661: LD_INT 399
53663: DOUBLE
53664: LESSEQUAL
53665: IFTRUE 53669
53667: GO 53731
53669: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53670: LD_VAR 0 1
53674: PPUSH
53675: LD_VAR 0 2
53679: PPUSH
53680: LD_VAR 0 3
53684: PPUSH
53685: LD_VAR 0 4
53689: PPUSH
53690: LD_VAR 0 5
53694: PPUSH
53695: LD_VAR 0 6
53699: PPUSH
53700: LD_VAR 0 7
53704: PPUSH
53705: LD_VAR 0 8
53709: PPUSH
53710: LD_VAR 0 9
53714: PPUSH
53715: LD_VAR 0 10
53719: PPUSH
53720: LD_VAR 0 11
53724: PPUSH
53725: CALL 61445 0 11
53729: GO 53732
53731: POP
// end ;
53732: PPOPN 11
53734: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53735: LD_VAR 0 1
53739: PPUSH
53740: LD_VAR 0 2
53744: PPUSH
53745: LD_VAR 0 3
53749: PPUSH
53750: LD_VAR 0 4
53754: PPUSH
53755: LD_VAR 0 5
53759: PPUSH
53760: CALL 53817 0 5
// end ; end_of_file
53764: PPOPN 5
53766: END
// export function SOS_UnitDestroyed ( un ) ; begin
53767: LD_INT 0
53769: PPUSH
// ComRadiation ( un ) ;
53770: LD_VAR 0 1
53774: PPUSH
53775: CALL 54856 0 1
// end ;
53779: LD_VAR 0 2
53783: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53784: LD_INT 0
53786: PPUSH
// ComRadiation ( un ) ;
53787: LD_VAR 0 1
53791: PPUSH
53792: CALL 54856 0 1
// end ;
53796: LD_VAR 0 2
53800: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53801: LD_INT 0
53803: PPUSH
// end ;
53804: LD_VAR 0 4
53808: RET
// export function SOS_Command ( cmd ) ; begin
53809: LD_INT 0
53811: PPUSH
// end ;
53812: LD_VAR 0 2
53816: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53817: LD_INT 0
53819: PPUSH
// end ;
53820: LD_VAR 0 6
53824: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53825: LD_INT 0
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
// if not vehicle or not factory then
53831: LD_VAR 0 1
53835: NOT
53836: IFTRUE 53845
53838: PUSH
53839: LD_VAR 0 2
53843: NOT
53844: OR
53845: IFFALSE 53849
// exit ;
53847: GO 54431
// if not factoryWaypoints then
53849: LD_EXP 61
53853: NOT
53854: IFFALSE 53858
// exit ;
53856: GO 54431
// for i := 1 to Count ( factoryWaypoints ) do
53858: LD_ADDR_VAR 0 4
53862: PUSH
53863: DOUBLE
53864: LD_INT 1
53866: DEC
53867: ST_TO_ADDR
53868: LD_EXP 61
53872: PPUSH
53873: CALL 12318 0 1
53877: PUSH
53878: FOR_TO
53879: IFFALSE 54429
// if factoryWaypoints [ i ] [ 2 ] = factory then
53881: LD_EXP 61
53885: PUSH
53886: LD_VAR 0 4
53890: ARRAY
53891: PUSH
53892: LD_INT 2
53894: ARRAY
53895: PUSH
53896: LD_VAR 0 2
53900: EQUAL
53901: IFFALSE 54427
// begin if GetControl ( vehicle ) = control_manual then
53903: LD_VAR 0 1
53907: PPUSH
53908: CALL_OW 263
53912: PUSH
53913: LD_INT 1
53915: EQUAL
53916: IFFALSE 54280
// begin driver := IsDrivenBy ( vehicle ) ;
53918: LD_ADDR_VAR 0 5
53922: PUSH
53923: LD_VAR 0 1
53927: PPUSH
53928: CALL_OW 311
53932: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53933: LD_VAR 0 5
53937: PUSH
53938: LD_EXP 62
53942: IN
53943: IFTRUE 53957
53945: PUSH
53946: LD_VAR 0 1
53950: PUSH
53951: LD_EXP 62
53955: IN
53956: OR
53957: IFFALSE 53963
// exit ;
53959: POP
53960: POP
53961: GO 54431
// if not HasTask ( driver ) then
53963: LD_VAR 0 5
53967: PPUSH
53968: CALL_OW 314
53972: NOT
53973: IFFALSE 54278
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53975: LD_ADDR_EXP 62
53979: PUSH
53980: LD_EXP 62
53984: PPUSH
53985: LD_VAR 0 5
53989: PPUSH
53990: CALL 48250 0 2
53994: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53995: LD_ADDR_EXP 62
53999: PUSH
54000: LD_EXP 62
54004: PPUSH
54005: LD_VAR 0 1
54009: PPUSH
54010: CALL 48250 0 2
54014: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54015: LD_ADDR_VAR 0 6
54019: PUSH
54020: LD_EXP 61
54024: PUSH
54025: LD_VAR 0 4
54029: ARRAY
54030: PUSH
54031: LD_INT 3
54033: ARRAY
54034: PPUSH
54035: LD_EXP 61
54039: PUSH
54040: LD_VAR 0 4
54044: ARRAY
54045: PUSH
54046: LD_INT 4
54048: ARRAY
54049: PPUSH
54050: CALL_OW 428
54054: ST_TO_ADDR
// if hex then
54055: LD_VAR 0 6
54059: IFFALSE 54077
// ComMoveUnit ( driver , hex ) else
54061: LD_VAR 0 5
54065: PPUSH
54066: LD_VAR 0 6
54070: PPUSH
54071: CALL_OW 112
54075: GO 54161
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54077: LD_VAR 0 1
54081: PPUSH
54082: LD_EXP 61
54086: PUSH
54087: LD_VAR 0 4
54091: ARRAY
54092: PUSH
54093: LD_INT 3
54095: ARRAY
54096: PPUSH
54097: LD_EXP 61
54101: PUSH
54102: LD_VAR 0 4
54106: ARRAY
54107: PUSH
54108: LD_INT 4
54110: ARRAY
54111: PPUSH
54112: CALL_OW 297
54116: PUSH
54117: LD_INT 0
54119: GREATER
54120: IFFALSE 54161
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54122: LD_VAR 0 5
54126: PPUSH
54127: LD_EXP 61
54131: PUSH
54132: LD_VAR 0 4
54136: ARRAY
54137: PUSH
54138: LD_INT 3
54140: ARRAY
54141: PPUSH
54142: LD_EXP 61
54146: PUSH
54147: LD_VAR 0 4
54151: ARRAY
54152: PUSH
54153: LD_INT 4
54155: ARRAY
54156: PPUSH
54157: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54161: LD_VAR 0 5
54165: PPUSH
54166: CALL_OW 181
// if Multiplayer then
54170: LD_OWVAR 4
54174: IFFALSE 54223
// begin repeat wait ( 10 ) ;
54176: LD_INT 10
54178: PPUSH
54179: CALL_OW 67
// until not IsInUnit ( driver ) ;
54183: LD_VAR 0 5
54187: PPUSH
54188: CALL_OW 310
54192: NOT
54193: IFFALSE 54176
// if not HasTask ( driver ) then
54195: LD_VAR 0 5
54199: PPUSH
54200: CALL_OW 314
54204: NOT
54205: IFFALSE 54221
// ComEnterUnit ( driver , factory ) ;
54207: LD_VAR 0 5
54211: PPUSH
54212: LD_VAR 0 2
54216: PPUSH
54217: CALL_OW 120
// end else
54221: GO 54237
// AddComEnterUnit ( driver , factory ) ;
54223: LD_VAR 0 5
54227: PPUSH
54228: LD_VAR 0 2
54232: PPUSH
54233: CALL_OW 180
// wait ( 0 0$1 ) ;
54237: LD_INT 35
54239: PPUSH
54240: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54244: LD_ADDR_EXP 62
54248: PUSH
54249: LD_EXP 62
54253: PUSH
54254: LD_VAR 0 5
54258: DIFF
54259: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54260: LD_ADDR_EXP 62
54264: PUSH
54265: LD_EXP 62
54269: PUSH
54270: LD_VAR 0 1
54274: DIFF
54275: ST_TO_ADDR
// break ;
54276: GO 54429
// end ; end else
54278: GO 54427
// if GetControl ( vehicle ) = control_remote then
54280: LD_VAR 0 1
54284: PPUSH
54285: CALL_OW 263
54289: PUSH
54290: LD_INT 2
54292: EQUAL
54293: IFFALSE 54379
// begin wait ( 0 0$2 ) ;
54295: LD_INT 70
54297: PPUSH
54298: CALL_OW 67
// repeat wait ( 10 ) ;
54302: LD_INT 10
54304: PPUSH
54305: CALL_OW 67
// Connect ( vehicle ) ;
54309: LD_VAR 0 1
54313: PPUSH
54314: CALL 18562 0 1
// until IsControledBy ( vehicle ) ;
54318: LD_VAR 0 1
54322: PPUSH
54323: CALL_OW 312
54327: IFFALSE 54302
// wait ( 10 ) ;
54329: LD_INT 10
54331: PPUSH
54332: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54336: LD_VAR 0 1
54340: PPUSH
54341: LD_EXP 61
54345: PUSH
54346: LD_VAR 0 4
54350: ARRAY
54351: PUSH
54352: LD_INT 3
54354: ARRAY
54355: PPUSH
54356: LD_EXP 61
54360: PUSH
54361: LD_VAR 0 4
54365: ARRAY
54366: PUSH
54367: LD_INT 4
54369: ARRAY
54370: PPUSH
54371: CALL_OW 111
// break ;
54375: GO 54429
// end else
54377: GO 54427
// begin wait ( 0 0$3 ) ;
54379: LD_INT 105
54381: PPUSH
54382: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54386: LD_VAR 0 1
54390: PPUSH
54391: LD_EXP 61
54395: PUSH
54396: LD_VAR 0 4
54400: ARRAY
54401: PUSH
54402: LD_INT 3
54404: ARRAY
54405: PPUSH
54406: LD_EXP 61
54410: PUSH
54411: LD_VAR 0 4
54415: ARRAY
54416: PUSH
54417: LD_INT 4
54419: ARRAY
54420: PPUSH
54421: CALL_OW 111
// break ;
54425: GO 54429
// end ; end ;
54427: GO 53878
54429: POP
54430: POP
// end ;
54431: LD_VAR 0 3
54435: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54436: LD_INT 0
54438: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54439: LD_VAR 0 1
54443: PUSH
54444: LD_INT 250
54446: EQUAL
54447: IFFALSE 54464
54449: PUSH
54450: LD_VAR 0 2
54454: PPUSH
54455: CALL_OW 264
54459: PUSH
54460: LD_INT 81
54462: EQUAL
54463: AND
54464: IFFALSE 54485
// MinerPlaceMine ( unit , x , y ) ;
54466: LD_VAR 0 2
54470: PPUSH
54471: LD_VAR 0 4
54475: PPUSH
54476: LD_VAR 0 5
54480: PPUSH
54481: CALL 57617 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54485: LD_VAR 0 1
54489: PUSH
54490: LD_INT 251
54492: EQUAL
54493: IFFALSE 54510
54495: PUSH
54496: LD_VAR 0 2
54500: PPUSH
54501: CALL_OW 264
54505: PUSH
54506: LD_INT 81
54508: EQUAL
54509: AND
54510: IFFALSE 54531
// MinerDetonateMine ( unit , x , y ) ;
54512: LD_VAR 0 2
54516: PPUSH
54517: LD_VAR 0 4
54521: PPUSH
54522: LD_VAR 0 5
54526: PPUSH
54527: CALL 57896 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54531: LD_VAR 0 1
54535: PUSH
54536: LD_INT 252
54538: EQUAL
54539: IFFALSE 54556
54541: PUSH
54542: LD_VAR 0 2
54546: PPUSH
54547: CALL_OW 264
54551: PUSH
54552: LD_INT 81
54554: EQUAL
54555: AND
54556: IFFALSE 54577
// MinerCreateMinefield ( unit , x , y ) ;
54558: LD_VAR 0 2
54562: PPUSH
54563: LD_VAR 0 4
54567: PPUSH
54568: LD_VAR 0 5
54572: PPUSH
54573: CALL 58315 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54577: LD_VAR 0 1
54581: PUSH
54582: LD_INT 253
54584: EQUAL
54585: IFFALSE 54602
54587: PUSH
54588: LD_VAR 0 2
54592: PPUSH
54593: CALL_OW 257
54597: PUSH
54598: LD_INT 5
54600: EQUAL
54601: AND
54602: IFFALSE 54623
// ComBinocular ( unit , x , y ) ;
54604: LD_VAR 0 2
54608: PPUSH
54609: LD_VAR 0 4
54613: PPUSH
54614: LD_VAR 0 5
54618: PPUSH
54619: CALL 58690 0 3
// if selectedUnit then
54623: LD_VAR 0 3
54627: IFFALSE 54687
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54629: LD_VAR 0 1
54633: PUSH
54634: LD_INT 254
54636: EQUAL
54637: IFFALSE 54654
54639: PUSH
54640: LD_VAR 0 2
54644: PPUSH
54645: CALL_OW 264
54649: PUSH
54650: LD_INT 99
54652: EQUAL
54653: AND
54654: IFFALSE 54671
54656: PUSH
54657: LD_VAR 0 3
54661: PPUSH
54662: CALL_OW 263
54666: PUSH
54667: LD_INT 3
54669: EQUAL
54670: AND
54671: IFFALSE 54687
// HackDestroyVehicle ( unit , selectedUnit ) ;
54673: LD_VAR 0 2
54677: PPUSH
54678: LD_VAR 0 3
54682: PPUSH
54683: CALL 56977 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54687: LD_VAR 0 1
54691: PUSH
54692: LD_INT 255
54694: EQUAL
54695: IFFALSE 54719
54697: PUSH
54698: LD_VAR 0 2
54702: PPUSH
54703: CALL_OW 264
54707: PUSH
54708: LD_INT 14
54710: PUSH
54711: LD_INT 53
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: IN
54718: AND
54719: IFFALSE 54737
54721: PUSH
54722: LD_VAR 0 4
54726: PPUSH
54727: LD_VAR 0 5
54731: PPUSH
54732: CALL_OW 488
54736: AND
54737: IFFALSE 54761
// CutTreeXYR ( unit , x , y , 12 ) ;
54739: LD_VAR 0 2
54743: PPUSH
54744: LD_VAR 0 4
54748: PPUSH
54749: LD_VAR 0 5
54753: PPUSH
54754: LD_INT 12
54756: PPUSH
54757: CALL 54952 0 4
// if cmd = 256 then
54761: LD_VAR 0 1
54765: PUSH
54766: LD_INT 256
54768: EQUAL
54769: IFFALSE 54790
// SetFactoryWaypoint ( unit , x , y ) ;
54771: LD_VAR 0 2
54775: PPUSH
54776: LD_VAR 0 4
54780: PPUSH
54781: LD_VAR 0 5
54785: PPUSH
54786: CALL 61453 0 3
// if cmd = 257 then
54790: LD_VAR 0 1
54794: PUSH
54795: LD_INT 257
54797: EQUAL
54798: IFFALSE 54819
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54800: LD_VAR 0 2
54804: PPUSH
54805: LD_VAR 0 4
54809: PPUSH
54810: LD_VAR 0 5
54814: PPUSH
54815: CALL 61949 0 3
// if cmd = 258 then
54819: LD_VAR 0 1
54823: PUSH
54824: LD_INT 258
54826: EQUAL
54827: IFFALSE 54851
// BurnTreeXYR ( unit , x , y , 8 ) ;
54829: LD_VAR 0 2
54833: PPUSH
54834: LD_VAR 0 4
54838: PPUSH
54839: LD_VAR 0 5
54843: PPUSH
54844: LD_INT 8
54846: PPUSH
54847: CALL 55352 0 4
// end ;
54851: LD_VAR 0 6
54855: RET
// export function ComRadiation ( un ) ; var eff ; begin
54856: LD_INT 0
54858: PPUSH
54859: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 264
54869: PUSH
54870: LD_INT 91
54872: NONEQUAL
54873: IFFALSE 54877
// exit ;
54875: GO 54947
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54877: LD_INT 68
54879: PPUSH
54880: LD_VAR 0 1
54884: PPUSH
54885: CALL_OW 255
54889: PPUSH
54890: CALL_OW 321
54894: PUSH
54895: LD_INT 2
54897: EQUAL
54898: IFFALSE 54910
// eff := 50 else
54900: LD_ADDR_VAR 0 3
54904: PUSH
54905: LD_INT 50
54907: ST_TO_ADDR
54908: GO 54918
// eff := 25 ;
54910: LD_ADDR_VAR 0 3
54914: PUSH
54915: LD_INT 25
54917: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54918: LD_VAR 0 1
54922: PPUSH
54923: CALL_OW 250
54927: PPUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: CALL_OW 251
54937: PPUSH
54938: LD_VAR 0 3
54942: PPUSH
54943: CALL_OW 495
// end ;
54947: LD_VAR 0 2
54951: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54952: LD_INT 0
54954: PPUSH
54955: PPUSH
54956: PPUSH
54957: PPUSH
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
54962: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54963: LD_VAR 0 1
54967: PPUSH
54968: CALL_OW 302
54972: NOT
54973: IFTRUE 54992
54975: PUSH
54976: LD_VAR 0 2
54980: PPUSH
54981: LD_VAR 0 3
54985: PPUSH
54986: CALL_OW 488
54990: NOT
54991: OR
54992: IFTRUE 55001
54994: PUSH
54995: LD_VAR 0 4
54999: NOT
55000: OR
55001: IFFALSE 55005
// exit ;
55003: GO 55347
// list := [ ] ;
55005: LD_ADDR_VAR 0 13
55009: PUSH
55010: EMPTY
55011: ST_TO_ADDR
// if x - r < 0 then
55012: LD_VAR 0 2
55016: PUSH
55017: LD_VAR 0 4
55021: MINUS
55022: PUSH
55023: LD_INT 0
55025: LESS
55026: IFFALSE 55038
// min_x := 0 else
55028: LD_ADDR_VAR 0 7
55032: PUSH
55033: LD_INT 0
55035: ST_TO_ADDR
55036: GO 55054
// min_x := x - r ;
55038: LD_ADDR_VAR 0 7
55042: PUSH
55043: LD_VAR 0 2
55047: PUSH
55048: LD_VAR 0 4
55052: MINUS
55053: ST_TO_ADDR
// if y - r < 0 then
55054: LD_VAR 0 3
55058: PUSH
55059: LD_VAR 0 4
55063: MINUS
55064: PUSH
55065: LD_INT 0
55067: LESS
55068: IFFALSE 55080
// min_y := 0 else
55070: LD_ADDR_VAR 0 8
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
55078: GO 55096
// min_y := y - r ;
55080: LD_ADDR_VAR 0 8
55084: PUSH
55085: LD_VAR 0 3
55089: PUSH
55090: LD_VAR 0 4
55094: MINUS
55095: ST_TO_ADDR
// max_x := x + r ;
55096: LD_ADDR_VAR 0 9
55100: PUSH
55101: LD_VAR 0 2
55105: PUSH
55106: LD_VAR 0 4
55110: PLUS
55111: ST_TO_ADDR
// max_y := y + r ;
55112: LD_ADDR_VAR 0 10
55116: PUSH
55117: LD_VAR 0 3
55121: PUSH
55122: LD_VAR 0 4
55126: PLUS
55127: ST_TO_ADDR
// for _x = min_x to max_x do
55128: LD_ADDR_VAR 0 11
55132: PUSH
55133: DOUBLE
55134: LD_VAR 0 7
55138: DEC
55139: ST_TO_ADDR
55140: LD_VAR 0 9
55144: PUSH
55145: FOR_TO
55146: IFFALSE 55265
// for _y = min_y to max_y do
55148: LD_ADDR_VAR 0 12
55152: PUSH
55153: DOUBLE
55154: LD_VAR 0 8
55158: DEC
55159: ST_TO_ADDR
55160: LD_VAR 0 10
55164: PUSH
55165: FOR_TO
55166: IFFALSE 55261
// begin if not ValidHex ( _x , _y ) then
55168: LD_VAR 0 11
55172: PPUSH
55173: LD_VAR 0 12
55177: PPUSH
55178: CALL_OW 488
55182: NOT
55183: IFFALSE 55187
// continue ;
55185: GO 55165
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55187: LD_VAR 0 11
55191: PPUSH
55192: LD_VAR 0 12
55196: PPUSH
55197: CALL_OW 351
55201: IFFALSE 55219
55203: PUSH
55204: LD_VAR 0 11
55208: PPUSH
55209: LD_VAR 0 12
55213: PPUSH
55214: CALL_OW 554
55218: AND
55219: IFFALSE 55259
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55221: LD_ADDR_VAR 0 13
55225: PUSH
55226: LD_VAR 0 13
55230: PPUSH
55231: LD_VAR 0 13
55235: PUSH
55236: LD_INT 1
55238: PLUS
55239: PPUSH
55240: LD_VAR 0 11
55244: PUSH
55245: LD_VAR 0 12
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PPUSH
55254: CALL_OW 2
55258: ST_TO_ADDR
// end ;
55259: GO 55165
55261: POP
55262: POP
55263: GO 55145
55265: POP
55266: POP
// if not list then
55267: LD_VAR 0 13
55271: NOT
55272: IFFALSE 55276
// exit ;
55274: GO 55347
// for i in list do
55276: LD_ADDR_VAR 0 6
55280: PUSH
55281: LD_VAR 0 13
55285: PUSH
55286: FOR_IN
55287: IFFALSE 55345
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55289: LD_VAR 0 1
55293: PPUSH
55294: LD_STRING M
55296: PUSH
55297: LD_VAR 0 6
55301: PUSH
55302: LD_INT 1
55304: ARRAY
55305: PUSH
55306: LD_VAR 0 6
55310: PUSH
55311: LD_INT 2
55313: ARRAY
55314: PUSH
55315: LD_INT 0
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: PUSH
55336: EMPTY
55337: LIST
55338: PPUSH
55339: CALL_OW 447
55343: GO 55286
55345: POP
55346: POP
// end ;
55347: LD_VAR 0 5
55351: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55352: LD_INT 0
55354: PPUSH
55355: PPUSH
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
55360: PPUSH
55361: PPUSH
55362: PPUSH
55363: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55364: LD_VAR 0 1
55368: PPUSH
55369: CALL_OW 302
55373: NOT
55374: IFTRUE 55393
55376: PUSH
55377: LD_VAR 0 2
55381: PPUSH
55382: LD_VAR 0 3
55386: PPUSH
55387: CALL_OW 488
55391: NOT
55392: OR
55393: IFTRUE 55402
55395: PUSH
55396: LD_VAR 0 4
55400: NOT
55401: OR
55402: IFFALSE 55406
// exit ;
55404: GO 55923
// list := [ ] ;
55406: LD_ADDR_VAR 0 13
55410: PUSH
55411: EMPTY
55412: ST_TO_ADDR
// if x - r < 0 then
55413: LD_VAR 0 2
55417: PUSH
55418: LD_VAR 0 4
55422: MINUS
55423: PUSH
55424: LD_INT 0
55426: LESS
55427: IFFALSE 55439
// min_x := 0 else
55429: LD_ADDR_VAR 0 7
55433: PUSH
55434: LD_INT 0
55436: ST_TO_ADDR
55437: GO 55455
// min_x := x - r ;
55439: LD_ADDR_VAR 0 7
55443: PUSH
55444: LD_VAR 0 2
55448: PUSH
55449: LD_VAR 0 4
55453: MINUS
55454: ST_TO_ADDR
// if y - r < 0 then
55455: LD_VAR 0 3
55459: PUSH
55460: LD_VAR 0 4
55464: MINUS
55465: PUSH
55466: LD_INT 0
55468: LESS
55469: IFFALSE 55481
// min_y := 0 else
55471: LD_ADDR_VAR 0 8
55475: PUSH
55476: LD_INT 0
55478: ST_TO_ADDR
55479: GO 55497
// min_y := y - r ;
55481: LD_ADDR_VAR 0 8
55485: PUSH
55486: LD_VAR 0 3
55490: PUSH
55491: LD_VAR 0 4
55495: MINUS
55496: ST_TO_ADDR
// max_x := x + r ;
55497: LD_ADDR_VAR 0 9
55501: PUSH
55502: LD_VAR 0 2
55506: PUSH
55507: LD_VAR 0 4
55511: PLUS
55512: ST_TO_ADDR
// max_y := y + r ;
55513: LD_ADDR_VAR 0 10
55517: PUSH
55518: LD_VAR 0 3
55522: PUSH
55523: LD_VAR 0 4
55527: PLUS
55528: ST_TO_ADDR
// for _x = min_x to max_x do
55529: LD_ADDR_VAR 0 11
55533: PUSH
55534: DOUBLE
55535: LD_VAR 0 7
55539: DEC
55540: ST_TO_ADDR
55541: LD_VAR 0 9
55545: PUSH
55546: FOR_TO
55547: IFFALSE 55666
// for _y = min_y to max_y do
55549: LD_ADDR_VAR 0 12
55553: PUSH
55554: DOUBLE
55555: LD_VAR 0 8
55559: DEC
55560: ST_TO_ADDR
55561: LD_VAR 0 10
55565: PUSH
55566: FOR_TO
55567: IFFALSE 55662
// begin if not ValidHex ( _x , _y ) then
55569: LD_VAR 0 11
55573: PPUSH
55574: LD_VAR 0 12
55578: PPUSH
55579: CALL_OW 488
55583: NOT
55584: IFFALSE 55588
// continue ;
55586: GO 55566
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55588: LD_VAR 0 11
55592: PPUSH
55593: LD_VAR 0 12
55597: PPUSH
55598: CALL_OW 351
55602: IFFALSE 55620
55604: PUSH
55605: LD_VAR 0 11
55609: PPUSH
55610: LD_VAR 0 12
55614: PPUSH
55615: CALL_OW 554
55619: AND
55620: IFFALSE 55660
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55622: LD_ADDR_VAR 0 13
55626: PUSH
55627: LD_VAR 0 13
55631: PPUSH
55632: LD_VAR 0 13
55636: PUSH
55637: LD_INT 1
55639: PLUS
55640: PPUSH
55641: LD_VAR 0 11
55645: PUSH
55646: LD_VAR 0 12
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PPUSH
55655: CALL_OW 2
55659: ST_TO_ADDR
// end ;
55660: GO 55566
55662: POP
55663: POP
55664: GO 55546
55666: POP
55667: POP
// if not list then
55668: LD_VAR 0 13
55672: NOT
55673: IFFALSE 55677
// exit ;
55675: GO 55923
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55677: LD_ADDR_VAR 0 13
55681: PUSH
55682: LD_VAR 0 1
55686: PPUSH
55687: LD_VAR 0 13
55691: PPUSH
55692: LD_INT 1
55694: PPUSH
55695: LD_INT 1
55697: PPUSH
55698: CALL 15690 0 4
55702: ST_TO_ADDR
// ComStop ( flame ) ;
55703: LD_VAR 0 1
55707: PPUSH
55708: CALL_OW 141
// for i in list do
55712: LD_ADDR_VAR 0 6
55716: PUSH
55717: LD_VAR 0 13
55721: PUSH
55722: FOR_IN
55723: IFFALSE 55754
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55725: LD_VAR 0 1
55729: PPUSH
55730: LD_VAR 0 6
55734: PUSH
55735: LD_INT 1
55737: ARRAY
55738: PPUSH
55739: LD_VAR 0 6
55743: PUSH
55744: LD_INT 2
55746: ARRAY
55747: PPUSH
55748: CALL_OW 176
55752: GO 55722
55754: POP
55755: POP
// repeat wait ( 0 0$1 ) ;
55756: LD_INT 35
55758: PPUSH
55759: CALL_OW 67
// task := GetTaskList ( flame ) ;
55763: LD_ADDR_VAR 0 14
55767: PUSH
55768: LD_VAR 0 1
55772: PPUSH
55773: CALL_OW 437
55777: ST_TO_ADDR
// if not task then
55778: LD_VAR 0 14
55782: NOT
55783: IFFALSE 55787
// exit ;
55785: GO 55923
// if task [ 1 ] [ 1 ] <> | then
55787: LD_VAR 0 14
55791: PUSH
55792: LD_INT 1
55794: ARRAY
55795: PUSH
55796: LD_INT 1
55798: ARRAY
55799: PUSH
55800: LD_STRING |
55802: NONEQUAL
55803: IFFALSE 55807
// exit ;
55805: GO 55923
// _x := task [ 1 ] [ 2 ] ;
55807: LD_ADDR_VAR 0 11
55811: PUSH
55812: LD_VAR 0 14
55816: PUSH
55817: LD_INT 1
55819: ARRAY
55820: PUSH
55821: LD_INT 2
55823: ARRAY
55824: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55825: LD_ADDR_VAR 0 12
55829: PUSH
55830: LD_VAR 0 14
55834: PUSH
55835: LD_INT 1
55837: ARRAY
55838: PUSH
55839: LD_INT 3
55841: ARRAY
55842: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55843: LD_VAR 0 11
55847: PPUSH
55848: LD_VAR 0 12
55852: PPUSH
55853: CALL_OW 351
55857: NOT
55858: IFTRUE 55877
55860: PUSH
55861: LD_VAR 0 11
55865: PPUSH
55866: LD_VAR 0 12
55870: PPUSH
55871: CALL_OW 554
55875: NOT
55876: OR
55877: IFFALSE 55911
// begin task := Delete ( task , 1 ) ;
55879: LD_ADDR_VAR 0 14
55883: PUSH
55884: LD_VAR 0 14
55888: PPUSH
55889: LD_INT 1
55891: PPUSH
55892: CALL_OW 3
55896: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 14
55906: PPUSH
55907: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55911: LD_VAR 0 1
55915: PPUSH
55916: CALL_OW 314
55920: NOT
55921: IFFALSE 55756
// end ;
55923: LD_VAR 0 5
55927: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55928: LD_EXP 50
55932: NOT
55933: IFFALSE 55983
55935: GO 55937
55937: DISABLE
// begin initHack := true ;
55938: LD_ADDR_EXP 50
55942: PUSH
55943: LD_INT 1
55945: ST_TO_ADDR
// hackTanks := [ ] ;
55946: LD_ADDR_EXP 51
55950: PUSH
55951: EMPTY
55952: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55953: LD_ADDR_EXP 52
55957: PUSH
55958: EMPTY
55959: ST_TO_ADDR
// hackLimit := 3 ;
55960: LD_ADDR_EXP 53
55964: PUSH
55965: LD_INT 3
55967: ST_TO_ADDR
// hackDist := 12 ;
55968: LD_ADDR_EXP 54
55972: PUSH
55973: LD_INT 12
55975: ST_TO_ADDR
// hackCounter := [ ] ;
55976: LD_ADDR_EXP 55
55980: PUSH
55981: EMPTY
55982: ST_TO_ADDR
// end ;
55983: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55984: LD_EXP 50
55988: IFFALSE 56006
55990: PUSH
55991: LD_INT 34
55993: PUSH
55994: LD_INT 99
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PPUSH
56001: CALL_OW 69
56005: AND
56006: IFFALSE 56259
56008: GO 56010
56010: DISABLE
56011: LD_INT 0
56013: PPUSH
56014: PPUSH
// begin enable ;
56015: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56016: LD_ADDR_VAR 0 1
56020: PUSH
56021: LD_INT 34
56023: PUSH
56024: LD_INT 99
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PPUSH
56031: CALL_OW 69
56035: PUSH
56036: FOR_IN
56037: IFFALSE 56257
// begin if not i in hackTanks then
56039: LD_VAR 0 1
56043: PUSH
56044: LD_EXP 51
56048: IN
56049: NOT
56050: IFFALSE 56133
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56052: LD_ADDR_EXP 51
56056: PUSH
56057: LD_EXP 51
56061: PPUSH
56062: LD_EXP 51
56066: PUSH
56067: LD_INT 1
56069: PLUS
56070: PPUSH
56071: LD_VAR 0 1
56075: PPUSH
56076: CALL_OW 1
56080: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56081: LD_ADDR_EXP 52
56085: PUSH
56086: LD_EXP 52
56090: PPUSH
56091: LD_EXP 52
56095: PUSH
56096: LD_INT 1
56098: PLUS
56099: PPUSH
56100: EMPTY
56101: PPUSH
56102: CALL_OW 1
56106: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56107: LD_ADDR_EXP 55
56111: PUSH
56112: LD_EXP 55
56116: PPUSH
56117: LD_EXP 55
56121: PUSH
56122: LD_INT 1
56124: PLUS
56125: PPUSH
56126: EMPTY
56127: PPUSH
56128: CALL_OW 1
56132: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56133: LD_VAR 0 1
56137: PPUSH
56138: CALL_OW 302
56142: NOT
56143: IFFALSE 56156
// begin HackUnlinkAll ( i ) ;
56145: LD_VAR 0 1
56149: PPUSH
56150: CALL 56262 0 1
// continue ;
56154: GO 56036
// end ; HackCheckCapturedStatus ( i ) ;
56156: LD_VAR 0 1
56160: PPUSH
56161: CALL 56707 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56165: LD_ADDR_VAR 0 2
56169: PUSH
56170: LD_INT 81
56172: PUSH
56173: LD_VAR 0 1
56177: PPUSH
56178: CALL_OW 255
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 33
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 91
56199: PUSH
56200: LD_VAR 0 1
56204: PUSH
56205: LD_EXP 54
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 50
56217: PUSH
56218: EMPTY
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: PPUSH
56227: CALL_OW 69
56231: ST_TO_ADDR
// if not tmp then
56232: LD_VAR 0 2
56236: NOT
56237: IFFALSE 56241
// continue ;
56239: GO 56036
// HackLink ( i , tmp ) ;
56241: LD_VAR 0 1
56245: PPUSH
56246: LD_VAR 0 2
56250: PPUSH
56251: CALL 56398 0 2
// end ;
56255: GO 56036
56257: POP
56258: POP
// end ;
56259: PPOPN 2
56261: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56262: LD_INT 0
56264: PPUSH
56265: PPUSH
56266: PPUSH
// if not hack in hackTanks then
56267: LD_VAR 0 1
56271: PUSH
56272: LD_EXP 51
56276: IN
56277: NOT
56278: IFFALSE 56282
// exit ;
56280: GO 56393
// index := GetElementIndex ( hackTanks , hack ) ;
56282: LD_ADDR_VAR 0 4
56286: PUSH
56287: LD_EXP 51
56291: PPUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: CALL 14985 0 2
56301: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56302: LD_EXP 52
56306: PUSH
56307: LD_VAR 0 4
56311: ARRAY
56312: IFFALSE 56393
// begin for i in hackTanksCaptured [ index ] do
56314: LD_ADDR_VAR 0 3
56318: PUSH
56319: LD_EXP 52
56323: PUSH
56324: LD_VAR 0 4
56328: ARRAY
56329: PUSH
56330: FOR_IN
56331: IFFALSE 56357
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56333: LD_VAR 0 3
56337: PUSH
56338: LD_INT 1
56340: ARRAY
56341: PPUSH
56342: LD_VAR 0 3
56346: PUSH
56347: LD_INT 2
56349: ARRAY
56350: PPUSH
56351: CALL_OW 235
56355: GO 56330
56357: POP
56358: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56359: LD_ADDR_EXP 52
56363: PUSH
56364: LD_EXP 52
56368: PPUSH
56369: LD_VAR 0 4
56373: PPUSH
56374: EMPTY
56375: PPUSH
56376: CALL_OW 1
56380: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56381: LD_VAR 0 1
56385: PPUSH
56386: LD_INT 0
56388: PPUSH
56389: CALL_OW 505
// end ; end ;
56393: LD_VAR 0 2
56397: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56398: LD_INT 0
56400: PPUSH
56401: PPUSH
56402: PPUSH
// if not hack in hackTanks or not vehicles then
56403: LD_VAR 0 1
56407: PUSH
56408: LD_EXP 51
56412: IN
56413: NOT
56414: IFTRUE 56423
56416: PUSH
56417: LD_VAR 0 2
56421: NOT
56422: OR
56423: IFFALSE 56427
// exit ;
56425: GO 56702
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56427: LD_ADDR_VAR 0 2
56431: PUSH
56432: LD_VAR 0 1
56436: PPUSH
56437: LD_VAR 0 2
56441: PPUSH
56442: LD_INT 1
56444: PPUSH
56445: LD_INT 1
56447: PPUSH
56448: CALL 15637 0 4
56452: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56453: LD_ADDR_VAR 0 5
56457: PUSH
56458: LD_EXP 51
56462: PPUSH
56463: LD_VAR 0 1
56467: PPUSH
56468: CALL 14985 0 2
56472: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56473: LD_EXP 52
56477: PUSH
56478: LD_VAR 0 5
56482: ARRAY
56483: PUSH
56484: LD_EXP 53
56488: LESS
56489: IFFALSE 56678
// begin for i := 1 to vehicles do
56491: LD_ADDR_VAR 0 4
56495: PUSH
56496: DOUBLE
56497: LD_INT 1
56499: DEC
56500: ST_TO_ADDR
56501: LD_VAR 0 2
56505: PUSH
56506: FOR_TO
56507: IFFALSE 56676
// begin if hackTanksCaptured [ index ] = hackLimit then
56509: LD_EXP 52
56513: PUSH
56514: LD_VAR 0 5
56518: ARRAY
56519: PUSH
56520: LD_EXP 53
56524: EQUAL
56525: IFFALSE 56529
// break ;
56527: GO 56676
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56529: LD_ADDR_EXP 55
56533: PUSH
56534: LD_EXP 55
56538: PPUSH
56539: LD_VAR 0 5
56543: PPUSH
56544: LD_EXP 55
56548: PUSH
56549: LD_VAR 0 5
56553: ARRAY
56554: PUSH
56555: LD_INT 1
56557: PLUS
56558: PPUSH
56559: CALL_OW 1
56563: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56564: LD_ADDR_EXP 52
56568: PUSH
56569: LD_EXP 52
56573: PPUSH
56574: LD_VAR 0 5
56578: PUSH
56579: LD_EXP 52
56583: PUSH
56584: LD_VAR 0 5
56588: ARRAY
56589: PUSH
56590: LD_INT 1
56592: PLUS
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PPUSH
56598: LD_VAR 0 2
56602: PUSH
56603: LD_VAR 0 4
56607: ARRAY
56608: PUSH
56609: LD_VAR 0 2
56613: PUSH
56614: LD_VAR 0 4
56618: ARRAY
56619: PPUSH
56620: CALL_OW 255
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PPUSH
56629: CALL 15202 0 3
56633: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56634: LD_VAR 0 2
56638: PUSH
56639: LD_VAR 0 4
56643: ARRAY
56644: PPUSH
56645: LD_VAR 0 1
56649: PPUSH
56650: CALL_OW 255
56654: PPUSH
56655: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56659: LD_VAR 0 2
56663: PUSH
56664: LD_VAR 0 4
56668: ARRAY
56669: PPUSH
56670: CALL_OW 141
// end ;
56674: GO 56506
56676: POP
56677: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56678: LD_VAR 0 1
56682: PPUSH
56683: LD_EXP 52
56687: PUSH
56688: LD_VAR 0 5
56692: ARRAY
56693: PUSH
56694: LD_INT 0
56696: PLUS
56697: PPUSH
56698: CALL_OW 505
// end ;
56702: LD_VAR 0 3
56706: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56707: LD_INT 0
56709: PPUSH
56710: PPUSH
56711: PPUSH
56712: PPUSH
// if not hack in hackTanks then
56713: LD_VAR 0 1
56717: PUSH
56718: LD_EXP 51
56722: IN
56723: NOT
56724: IFFALSE 56728
// exit ;
56726: GO 56972
// index := GetElementIndex ( hackTanks , hack ) ;
56728: LD_ADDR_VAR 0 4
56732: PUSH
56733: LD_EXP 51
56737: PPUSH
56738: LD_VAR 0 1
56742: PPUSH
56743: CALL 14985 0 2
56747: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56748: LD_ADDR_VAR 0 3
56752: PUSH
56753: DOUBLE
56754: LD_EXP 52
56758: PUSH
56759: LD_VAR 0 4
56763: ARRAY
56764: INC
56765: ST_TO_ADDR
56766: LD_INT 1
56768: PUSH
56769: FOR_DOWNTO
56770: IFFALSE 56946
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56772: LD_ADDR_VAR 0 5
56776: PUSH
56777: LD_EXP 52
56781: PUSH
56782: LD_VAR 0 4
56786: ARRAY
56787: PUSH
56788: LD_VAR 0 3
56792: ARRAY
56793: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56794: LD_VAR 0 5
56798: PUSH
56799: LD_INT 1
56801: ARRAY
56802: PPUSH
56803: CALL_OW 302
56807: NOT
56808: IFTRUE 56836
56810: PUSH
56811: LD_VAR 0 5
56815: PUSH
56816: LD_INT 1
56818: ARRAY
56819: PPUSH
56820: CALL_OW 255
56824: PUSH
56825: LD_VAR 0 1
56829: PPUSH
56830: CALL_OW 255
56834: NONEQUAL
56835: OR
56836: IFFALSE 56944
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56838: LD_VAR 0 5
56842: PUSH
56843: LD_INT 1
56845: ARRAY
56846: PPUSH
56847: CALL_OW 305
56851: IFFALSE 56879
56853: PUSH
56854: LD_VAR 0 5
56858: PUSH
56859: LD_INT 1
56861: ARRAY
56862: PPUSH
56863: CALL_OW 255
56867: PUSH
56868: LD_VAR 0 1
56872: PPUSH
56873: CALL_OW 255
56877: EQUAL
56878: AND
56879: IFFALSE 56903
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56881: LD_VAR 0 5
56885: PUSH
56886: LD_INT 1
56888: ARRAY
56889: PPUSH
56890: LD_VAR 0 5
56894: PUSH
56895: LD_INT 2
56897: ARRAY
56898: PPUSH
56899: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56903: LD_ADDR_EXP 52
56907: PUSH
56908: LD_EXP 52
56912: PPUSH
56913: LD_VAR 0 4
56917: PPUSH
56918: LD_EXP 52
56922: PUSH
56923: LD_VAR 0 4
56927: ARRAY
56928: PPUSH
56929: LD_VAR 0 3
56933: PPUSH
56934: CALL_OW 3
56938: PPUSH
56939: CALL_OW 1
56943: ST_TO_ADDR
// end ; end ;
56944: GO 56769
56946: POP
56947: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56948: LD_VAR 0 1
56952: PPUSH
56953: LD_EXP 52
56957: PUSH
56958: LD_VAR 0 4
56962: ARRAY
56963: PUSH
56964: LD_INT 0
56966: PLUS
56967: PPUSH
56968: CALL_OW 505
// end ;
56972: LD_VAR 0 2
56976: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56977: LD_INT 0
56979: PPUSH
56980: PPUSH
56981: PPUSH
56982: PPUSH
// if not hack in hackTanks then
56983: LD_VAR 0 1
56987: PUSH
56988: LD_EXP 51
56992: IN
56993: NOT
56994: IFFALSE 56998
// exit ;
56996: GO 57083
// index := GetElementIndex ( hackTanks , hack ) ;
56998: LD_ADDR_VAR 0 5
57002: PUSH
57003: LD_EXP 51
57007: PPUSH
57008: LD_VAR 0 1
57012: PPUSH
57013: CALL 14985 0 2
57017: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57018: LD_ADDR_VAR 0 4
57022: PUSH
57023: DOUBLE
57024: LD_INT 1
57026: DEC
57027: ST_TO_ADDR
57028: LD_EXP 52
57032: PUSH
57033: LD_VAR 0 5
57037: ARRAY
57038: PUSH
57039: FOR_TO
57040: IFFALSE 57081
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57042: LD_EXP 52
57046: PUSH
57047: LD_VAR 0 5
57051: ARRAY
57052: PUSH
57053: LD_VAR 0 4
57057: ARRAY
57058: PUSH
57059: LD_INT 1
57061: ARRAY
57062: PUSH
57063: LD_VAR 0 2
57067: EQUAL
57068: IFFALSE 57079
// KillUnit ( vehicle ) ;
57070: LD_VAR 0 2
57074: PPUSH
57075: CALL_OW 66
57079: GO 57039
57081: POP
57082: POP
// end ;
57083: LD_VAR 0 3
57087: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
57088: LD_EXP 56
57092: NOT
57093: IFFALSE 57128
57095: GO 57097
57097: DISABLE
// begin initMiner := true ;
57098: LD_ADDR_EXP 56
57102: PUSH
57103: LD_INT 1
57105: ST_TO_ADDR
// minersList := [ ] ;
57106: LD_ADDR_EXP 57
57110: PUSH
57111: EMPTY
57112: ST_TO_ADDR
// minerMinesList := [ ] ;
57113: LD_ADDR_EXP 58
57117: PUSH
57118: EMPTY
57119: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
57120: LD_ADDR_EXP 59
57124: PUSH
57125: LD_INT 5
57127: ST_TO_ADDR
// end ;
57128: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
57129: LD_EXP 56
57133: IFFALSE 57151
57135: PUSH
57136: LD_INT 34
57138: PUSH
57139: LD_INT 81
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PPUSH
57146: CALL_OW 69
57150: AND
57151: IFFALSE 57614
57153: GO 57155
57155: DISABLE
57156: LD_INT 0
57158: PPUSH
57159: PPUSH
57160: PPUSH
57161: PPUSH
// begin enable ;
57162: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57163: LD_ADDR_VAR 0 1
57167: PUSH
57168: LD_INT 34
57170: PUSH
57171: LD_INT 81
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PPUSH
57178: CALL_OW 69
57182: PUSH
57183: FOR_IN
57184: IFFALSE 57256
// begin if not i in minersList then
57186: LD_VAR 0 1
57190: PUSH
57191: LD_EXP 57
57195: IN
57196: NOT
57197: IFFALSE 57254
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57199: LD_ADDR_EXP 57
57203: PUSH
57204: LD_EXP 57
57208: PPUSH
57209: LD_EXP 57
57213: PUSH
57214: LD_INT 1
57216: PLUS
57217: PPUSH
57218: LD_VAR 0 1
57222: PPUSH
57223: CALL_OW 1
57227: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57228: LD_ADDR_EXP 58
57232: PUSH
57233: LD_EXP 58
57237: PPUSH
57238: LD_EXP 58
57242: PUSH
57243: LD_INT 1
57245: PLUS
57246: PPUSH
57247: EMPTY
57248: PPUSH
57249: CALL_OW 1
57253: ST_TO_ADDR
// end end ;
57254: GO 57183
57256: POP
57257: POP
// for i := minerMinesList downto 1 do
57258: LD_ADDR_VAR 0 1
57262: PUSH
57263: DOUBLE
57264: LD_EXP 58
57268: INC
57269: ST_TO_ADDR
57270: LD_INT 1
57272: PUSH
57273: FOR_DOWNTO
57274: IFFALSE 57612
// begin if IsLive ( minersList [ i ] ) then
57276: LD_EXP 57
57280: PUSH
57281: LD_VAR 0 1
57285: ARRAY
57286: PPUSH
57287: CALL_OW 300
57291: IFFALSE 57319
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
57293: LD_EXP 57
57297: PUSH
57298: LD_VAR 0 1
57302: ARRAY
57303: PPUSH
57304: LD_EXP 58
57308: PUSH
57309: LD_VAR 0 1
57313: ARRAY
57314: PPUSH
57315: CALL_OW 505
// if not minerMinesList [ i ] then
57319: LD_EXP 58
57323: PUSH
57324: LD_VAR 0 1
57328: ARRAY
57329: NOT
57330: IFFALSE 57334
// continue ;
57332: GO 57273
// for j := minerMinesList [ i ] downto 1 do
57334: LD_ADDR_VAR 0 2
57338: PUSH
57339: DOUBLE
57340: LD_EXP 58
57344: PUSH
57345: LD_VAR 0 1
57349: ARRAY
57350: INC
57351: ST_TO_ADDR
57352: LD_INT 1
57354: PUSH
57355: FOR_DOWNTO
57356: IFFALSE 57608
// begin side := GetSide ( minersList [ i ] ) ;
57358: LD_ADDR_VAR 0 3
57362: PUSH
57363: LD_EXP 57
57367: PUSH
57368: LD_VAR 0 1
57372: ARRAY
57373: PPUSH
57374: CALL_OW 255
57378: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57379: LD_ADDR_VAR 0 4
57383: PUSH
57384: LD_EXP 58
57388: PUSH
57389: LD_VAR 0 1
57393: ARRAY
57394: PUSH
57395: LD_VAR 0 2
57399: ARRAY
57400: PUSH
57401: LD_INT 1
57403: ARRAY
57404: PPUSH
57405: LD_EXP 58
57409: PUSH
57410: LD_VAR 0 1
57414: ARRAY
57415: PUSH
57416: LD_VAR 0 2
57420: ARRAY
57421: PUSH
57422: LD_INT 2
57424: ARRAY
57425: PPUSH
57426: CALL_OW 428
57430: ST_TO_ADDR
// if not tmp then
57431: LD_VAR 0 4
57435: NOT
57436: IFFALSE 57440
// continue ;
57438: GO 57355
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57440: LD_VAR 0 4
57444: PUSH
57445: LD_INT 81
57447: PUSH
57448: LD_VAR 0 3
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PPUSH
57457: CALL_OW 69
57461: IN
57462: IFFALSE 57512
57464: PUSH
57465: LD_EXP 58
57469: PUSH
57470: LD_VAR 0 1
57474: ARRAY
57475: PUSH
57476: LD_VAR 0 2
57480: ARRAY
57481: PUSH
57482: LD_INT 1
57484: ARRAY
57485: PPUSH
57486: LD_EXP 58
57490: PUSH
57491: LD_VAR 0 1
57495: ARRAY
57496: PUSH
57497: LD_VAR 0 2
57501: ARRAY
57502: PUSH
57503: LD_INT 2
57505: ARRAY
57506: PPUSH
57507: CALL_OW 458
57511: AND
57512: IFFALSE 57606
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57514: LD_EXP 58
57518: PUSH
57519: LD_VAR 0 1
57523: ARRAY
57524: PUSH
57525: LD_VAR 0 2
57529: ARRAY
57530: PUSH
57531: LD_INT 1
57533: ARRAY
57534: PPUSH
57535: LD_EXP 58
57539: PUSH
57540: LD_VAR 0 1
57544: ARRAY
57545: PUSH
57546: LD_VAR 0 2
57550: ARRAY
57551: PUSH
57552: LD_INT 2
57554: ARRAY
57555: PPUSH
57556: LD_VAR 0 3
57560: PPUSH
57561: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57565: LD_ADDR_EXP 58
57569: PUSH
57570: LD_EXP 58
57574: PPUSH
57575: LD_VAR 0 1
57579: PPUSH
57580: LD_EXP 58
57584: PUSH
57585: LD_VAR 0 1
57589: ARRAY
57590: PPUSH
57591: LD_VAR 0 2
57595: PPUSH
57596: CALL_OW 3
57600: PPUSH
57601: CALL_OW 1
57605: ST_TO_ADDR
// end ; end ;
57606: GO 57355
57608: POP
57609: POP
// end ;
57610: GO 57273
57612: POP
57613: POP
// end ;
57614: PPOPN 4
57616: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57617: LD_INT 0
57619: PPUSH
57620: PPUSH
// result := false ;
57621: LD_ADDR_VAR 0 4
57625: PUSH
57626: LD_INT 0
57628: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57629: LD_VAR 0 1
57633: PPUSH
57634: CALL_OW 264
57638: PUSH
57639: LD_INT 81
57641: EQUAL
57642: NOT
57643: IFFALSE 57647
// exit ;
57645: GO 57891
// index := GetElementIndex ( minersList , unit ) ;
57647: LD_ADDR_VAR 0 5
57651: PUSH
57652: LD_EXP 57
57656: PPUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: CALL 14985 0 2
57666: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57667: LD_EXP 58
57671: PUSH
57672: LD_VAR 0 5
57676: ARRAY
57677: PUSH
57678: LD_EXP 59
57682: GREATEREQUAL
57683: IFFALSE 57687
// exit ;
57685: GO 57891
// ComMoveXY ( unit , x , y ) ;
57687: LD_VAR 0 1
57691: PPUSH
57692: LD_VAR 0 2
57696: PPUSH
57697: LD_VAR 0 3
57701: PPUSH
57702: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57706: LD_INT 35
57708: PPUSH
57709: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57713: LD_VAR 0 1
57717: PPUSH
57718: LD_VAR 0 2
57722: PPUSH
57723: LD_VAR 0 3
57727: PPUSH
57728: CALL 47031 0 3
57732: NOT
57733: IFFALSE 57746
57735: PUSH
57736: LD_VAR 0 1
57740: PPUSH
57741: CALL_OW 314
57745: AND
57746: IFFALSE 57750
// exit ;
57748: GO 57891
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57750: LD_VAR 0 2
57754: PPUSH
57755: LD_VAR 0 3
57759: PPUSH
57760: CALL_OW 428
57764: PUSH
57765: LD_VAR 0 1
57769: EQUAL
57770: IFFALSE 57784
57772: PUSH
57773: LD_VAR 0 1
57777: PPUSH
57778: CALL_OW 314
57782: NOT
57783: AND
57784: IFFALSE 57706
// PlaySoundXY ( x , y , PlantMine ) ;
57786: LD_VAR 0 2
57790: PPUSH
57791: LD_VAR 0 3
57795: PPUSH
57796: LD_STRING PlantMine
57798: PPUSH
57799: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57803: LD_VAR 0 2
57807: PPUSH
57808: LD_VAR 0 3
57812: PPUSH
57813: LD_VAR 0 1
57817: PPUSH
57818: CALL_OW 255
57822: PPUSH
57823: LD_INT 0
57825: PPUSH
57826: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57830: LD_ADDR_EXP 58
57834: PUSH
57835: LD_EXP 58
57839: PPUSH
57840: LD_VAR 0 5
57844: PUSH
57845: LD_EXP 58
57849: PUSH
57850: LD_VAR 0 5
57854: ARRAY
57855: PUSH
57856: LD_INT 1
57858: PLUS
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PPUSH
57864: LD_VAR 0 2
57868: PUSH
57869: LD_VAR 0 3
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PPUSH
57878: CALL 15202 0 3
57882: ST_TO_ADDR
// result := true ;
57883: LD_ADDR_VAR 0 4
57887: PUSH
57888: LD_INT 1
57890: ST_TO_ADDR
// end ;
57891: LD_VAR 0 4
57895: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57896: LD_INT 0
57898: PPUSH
57899: PPUSH
57900: PPUSH
// if not unit in minersList then
57901: LD_VAR 0 1
57905: PUSH
57906: LD_EXP 57
57910: IN
57911: NOT
57912: IFFALSE 57916
// exit ;
57914: GO 58310
// index := GetElementIndex ( minersList , unit ) ;
57916: LD_ADDR_VAR 0 6
57920: PUSH
57921: LD_EXP 57
57925: PPUSH
57926: LD_VAR 0 1
57930: PPUSH
57931: CALL 14985 0 2
57935: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57936: LD_ADDR_VAR 0 5
57940: PUSH
57941: DOUBLE
57942: LD_EXP 58
57946: PUSH
57947: LD_VAR 0 6
57951: ARRAY
57952: INC
57953: ST_TO_ADDR
57954: LD_INT 1
57956: PUSH
57957: FOR_DOWNTO
57958: IFFALSE 58121
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57960: LD_EXP 58
57964: PUSH
57965: LD_VAR 0 6
57969: ARRAY
57970: PUSH
57971: LD_VAR 0 5
57975: ARRAY
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PUSH
57981: LD_VAR 0 2
57985: EQUAL
57986: IFFALSE 58016
57988: PUSH
57989: LD_EXP 58
57993: PUSH
57994: LD_VAR 0 6
57998: ARRAY
57999: PUSH
58000: LD_VAR 0 5
58004: ARRAY
58005: PUSH
58006: LD_INT 2
58008: ARRAY
58009: PUSH
58010: LD_VAR 0 3
58014: EQUAL
58015: AND
58016: IFFALSE 58119
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58018: LD_EXP 58
58022: PUSH
58023: LD_VAR 0 6
58027: ARRAY
58028: PUSH
58029: LD_VAR 0 5
58033: ARRAY
58034: PUSH
58035: LD_INT 1
58037: ARRAY
58038: PPUSH
58039: LD_EXP 58
58043: PUSH
58044: LD_VAR 0 6
58048: ARRAY
58049: PUSH
58050: LD_VAR 0 5
58054: ARRAY
58055: PUSH
58056: LD_INT 2
58058: ARRAY
58059: PPUSH
58060: LD_VAR 0 1
58064: PPUSH
58065: CALL_OW 255
58069: PPUSH
58070: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58074: LD_ADDR_EXP 58
58078: PUSH
58079: LD_EXP 58
58083: PPUSH
58084: LD_VAR 0 6
58088: PPUSH
58089: LD_EXP 58
58093: PUSH
58094: LD_VAR 0 6
58098: ARRAY
58099: PPUSH
58100: LD_VAR 0 5
58104: PPUSH
58105: CALL_OW 3
58109: PPUSH
58110: CALL_OW 1
58114: ST_TO_ADDR
// exit ;
58115: POP
58116: POP
58117: GO 58310
// end ; end ;
58119: GO 57957
58121: POP
58122: POP
// for i := minerMinesList [ index ] downto 1 do
58123: LD_ADDR_VAR 0 5
58127: PUSH
58128: DOUBLE
58129: LD_EXP 58
58133: PUSH
58134: LD_VAR 0 6
58138: ARRAY
58139: INC
58140: ST_TO_ADDR
58141: LD_INT 1
58143: PUSH
58144: FOR_DOWNTO
58145: IFFALSE 58308
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58147: LD_EXP 58
58151: PUSH
58152: LD_VAR 0 6
58156: ARRAY
58157: PUSH
58158: LD_VAR 0 5
58162: ARRAY
58163: PUSH
58164: LD_INT 1
58166: ARRAY
58167: PPUSH
58168: LD_EXP 58
58172: PUSH
58173: LD_VAR 0 6
58177: ARRAY
58178: PUSH
58179: LD_VAR 0 5
58183: ARRAY
58184: PUSH
58185: LD_INT 2
58187: ARRAY
58188: PPUSH
58189: LD_VAR 0 2
58193: PPUSH
58194: LD_VAR 0 3
58198: PPUSH
58199: CALL_OW 298
58203: PUSH
58204: LD_INT 6
58206: LESS
58207: IFFALSE 58306
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58209: LD_EXP 58
58213: PUSH
58214: LD_VAR 0 6
58218: ARRAY
58219: PUSH
58220: LD_VAR 0 5
58224: ARRAY
58225: PUSH
58226: LD_INT 1
58228: ARRAY
58229: PPUSH
58230: LD_EXP 58
58234: PUSH
58235: LD_VAR 0 6
58239: ARRAY
58240: PUSH
58241: LD_VAR 0 5
58245: ARRAY
58246: PUSH
58247: LD_INT 2
58249: ARRAY
58250: PPUSH
58251: LD_VAR 0 1
58255: PPUSH
58256: CALL_OW 255
58260: PPUSH
58261: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58265: LD_ADDR_EXP 58
58269: PUSH
58270: LD_EXP 58
58274: PPUSH
58275: LD_VAR 0 6
58279: PPUSH
58280: LD_EXP 58
58284: PUSH
58285: LD_VAR 0 6
58289: ARRAY
58290: PPUSH
58291: LD_VAR 0 5
58295: PPUSH
58296: CALL_OW 3
58300: PPUSH
58301: CALL_OW 1
58305: ST_TO_ADDR
// end ; end ;
58306: GO 58144
58308: POP
58309: POP
// end ;
58310: LD_VAR 0 4
58314: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58315: LD_INT 0
58317: PPUSH
58318: PPUSH
58319: PPUSH
58320: PPUSH
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58326: LD_VAR 0 1
58330: PPUSH
58331: CALL_OW 264
58335: PUSH
58336: LD_INT 81
58338: EQUAL
58339: NOT
58340: IFTRUE 58355
58342: PUSH
58343: LD_VAR 0 1
58347: PUSH
58348: LD_EXP 57
58352: IN
58353: NOT
58354: OR
58355: IFFALSE 58359
// exit ;
58357: GO 58685
// index := GetElementIndex ( minersList , unit ) ;
58359: LD_ADDR_VAR 0 6
58363: PUSH
58364: LD_EXP 57
58368: PPUSH
58369: LD_VAR 0 1
58373: PPUSH
58374: CALL 14985 0 2
58378: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58379: LD_ADDR_VAR 0 8
58383: PUSH
58384: LD_EXP 59
58388: PUSH
58389: LD_EXP 58
58393: PUSH
58394: LD_VAR 0 6
58398: ARRAY
58399: MINUS
58400: ST_TO_ADDR
// if not minesFreeAmount then
58401: LD_VAR 0 8
58405: NOT
58406: IFFALSE 58410
// exit ;
58408: GO 58685
// tmp := [ ] ;
58410: LD_ADDR_VAR 0 7
58414: PUSH
58415: EMPTY
58416: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58417: LD_ADDR_VAR 0 5
58421: PUSH
58422: DOUBLE
58423: LD_INT 1
58425: DEC
58426: ST_TO_ADDR
58427: LD_VAR 0 8
58431: PUSH
58432: FOR_TO
58433: IFFALSE 58632
// begin _d := rand ( 0 , 5 ) ;
58435: LD_ADDR_VAR 0 11
58439: PUSH
58440: LD_INT 0
58442: PPUSH
58443: LD_INT 5
58445: PPUSH
58446: CALL_OW 12
58450: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58451: LD_ADDR_VAR 0 12
58455: PUSH
58456: LD_INT 2
58458: PPUSH
58459: LD_INT 6
58461: PPUSH
58462: CALL_OW 12
58466: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58467: LD_ADDR_VAR 0 9
58471: PUSH
58472: LD_VAR 0 2
58476: PPUSH
58477: LD_VAR 0 11
58481: PPUSH
58482: LD_VAR 0 12
58486: PPUSH
58487: CALL_OW 272
58491: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58492: LD_ADDR_VAR 0 10
58496: PUSH
58497: LD_VAR 0 3
58501: PPUSH
58502: LD_VAR 0 11
58506: PPUSH
58507: LD_VAR 0 12
58511: PPUSH
58512: CALL_OW 273
58516: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58517: LD_VAR 0 9
58521: PPUSH
58522: LD_VAR 0 10
58526: PPUSH
58527: CALL_OW 488
58531: IFFALSE 58555
58533: PUSH
58534: LD_VAR 0 9
58538: PUSH
58539: LD_VAR 0 10
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_VAR 0 7
58552: IN
58553: NOT
58554: AND
58555: IFFALSE 58574
58557: PUSH
58558: LD_VAR 0 9
58562: PPUSH
58563: LD_VAR 0 10
58567: PPUSH
58568: CALL_OW 458
58572: NOT
58573: AND
58574: IFFALSE 58616
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58576: LD_ADDR_VAR 0 7
58580: PUSH
58581: LD_VAR 0 7
58585: PPUSH
58586: LD_VAR 0 7
58590: PUSH
58591: LD_INT 1
58593: PLUS
58594: PPUSH
58595: LD_VAR 0 9
58599: PUSH
58600: LD_VAR 0 10
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PPUSH
58609: CALL_OW 1
58613: ST_TO_ADDR
58614: GO 58630
// i := i - 1 ;
58616: LD_ADDR_VAR 0 5
58620: PUSH
58621: LD_VAR 0 5
58625: PUSH
58626: LD_INT 1
58628: MINUS
58629: ST_TO_ADDR
// end ;
58630: GO 58432
58632: POP
58633: POP
// for i in tmp do
58634: LD_ADDR_VAR 0 5
58638: PUSH
58639: LD_VAR 0 7
58643: PUSH
58644: FOR_IN
58645: IFFALSE 58683
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58647: LD_VAR 0 1
58651: PPUSH
58652: LD_VAR 0 5
58656: PUSH
58657: LD_INT 1
58659: ARRAY
58660: PPUSH
58661: LD_VAR 0 5
58665: PUSH
58666: LD_INT 2
58668: ARRAY
58669: PPUSH
58670: CALL 57617 0 3
58674: NOT
58675: IFFALSE 58681
// exit ;
58677: POP
58678: POP
58679: GO 58685
58681: GO 58644
58683: POP
58684: POP
// end ;
58685: LD_VAR 0 4
58689: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58690: LD_INT 0
58692: PPUSH
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
58697: PPUSH
58698: PPUSH
58699: PPUSH
58700: PPUSH
// if GetClass ( unit ) <> class_sniper then
58701: LD_VAR 0 1
58705: PPUSH
58706: CALL_OW 257
58710: PUSH
58711: LD_INT 5
58713: NONEQUAL
58714: IFFALSE 58718
// exit ;
58716: GO 59188
// dist := 8 ;
58718: LD_ADDR_VAR 0 5
58722: PUSH
58723: LD_INT 8
58725: ST_TO_ADDR
// viewRange := 12 ;
58726: LD_ADDR_VAR 0 8
58730: PUSH
58731: LD_INT 12
58733: ST_TO_ADDR
// side := GetSide ( unit ) ;
58734: LD_ADDR_VAR 0 6
58738: PUSH
58739: LD_VAR 0 1
58743: PPUSH
58744: CALL_OW 255
58748: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58749: LD_INT 61
58751: PPUSH
58752: LD_VAR 0 6
58756: PPUSH
58757: CALL_OW 321
58761: PUSH
58762: LD_INT 2
58764: EQUAL
58765: IFFALSE 58775
// viewRange := 16 ;
58767: LD_ADDR_VAR 0 8
58771: PUSH
58772: LD_INT 16
58774: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_VAR 0 2
58784: PPUSH
58785: LD_VAR 0 3
58789: PPUSH
58790: CALL_OW 297
58794: PUSH
58795: LD_VAR 0 5
58799: GREATER
58800: IFFALSE 58879
// begin ComMoveXY ( unit , x , y ) ;
58802: LD_VAR 0 1
58806: PPUSH
58807: LD_VAR 0 2
58811: PPUSH
58812: LD_VAR 0 3
58816: PPUSH
58817: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58821: LD_INT 35
58823: PPUSH
58824: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58828: LD_VAR 0 1
58832: PPUSH
58833: LD_VAR 0 2
58837: PPUSH
58838: LD_VAR 0 3
58842: PPUSH
58843: CALL 47031 0 3
58847: NOT
58848: IFFALSE 58852
// exit ;
58850: GO 59188
// until GetDistUnitXY ( unit , x , y ) < dist ;
58852: LD_VAR 0 1
58856: PPUSH
58857: LD_VAR 0 2
58861: PPUSH
58862: LD_VAR 0 3
58866: PPUSH
58867: CALL_OW 297
58871: PUSH
58872: LD_VAR 0 5
58876: LESS
58877: IFFALSE 58821
// end ; ComTurnXY ( unit , x , y ) ;
58879: LD_VAR 0 1
58883: PPUSH
58884: LD_VAR 0 2
58888: PPUSH
58889: LD_VAR 0 3
58893: PPUSH
58894: CALL_OW 118
// repeat if Multiplayer then
58898: LD_OWVAR 4
58902: IFFALSE 58913
// wait ( 35 ) else
58904: LD_INT 35
58906: PPUSH
58907: CALL_OW 67
58911: GO 58920
// wait ( 5 ) ;
58913: LD_INT 5
58915: PPUSH
58916: CALL_OW 67
// _d := GetDir ( unit ) ;
58920: LD_ADDR_VAR 0 11
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 254
58934: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58935: LD_ADDR_VAR 0 7
58939: PUSH
58940: LD_VAR 0 1
58944: PPUSH
58945: CALL_OW 250
58949: PPUSH
58950: LD_VAR 0 1
58954: PPUSH
58955: CALL_OW 251
58959: PPUSH
58960: LD_VAR 0 2
58964: PPUSH
58965: LD_VAR 0 3
58969: PPUSH
58970: CALL 49667 0 4
58974: ST_TO_ADDR
// until dir = _d ;
58975: LD_VAR 0 7
58979: PUSH
58980: LD_VAR 0 11
58984: EQUAL
58985: IFFALSE 58898
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58987: LD_ADDR_VAR 0 9
58991: PUSH
58992: LD_VAR 0 1
58996: PPUSH
58997: CALL_OW 250
59001: PPUSH
59002: LD_VAR 0 7
59006: PPUSH
59007: LD_VAR 0 5
59011: PPUSH
59012: CALL_OW 272
59016: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59017: LD_ADDR_VAR 0 10
59021: PUSH
59022: LD_VAR 0 1
59026: PPUSH
59027: CALL_OW 251
59031: PPUSH
59032: LD_VAR 0 7
59036: PPUSH
59037: LD_VAR 0 5
59041: PPUSH
59042: CALL_OW 273
59046: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59047: LD_VAR 0 9
59051: PPUSH
59052: LD_VAR 0 10
59056: PPUSH
59057: CALL_OW 488
59061: NOT
59062: IFFALSE 59066
// exit ;
59064: GO 59188
// ComAnimCustom ( unit , 1 ) ;
59066: LD_VAR 0 1
59070: PPUSH
59071: LD_INT 1
59073: PPUSH
59074: CALL_OW 592
// p := 0 ;
59078: LD_ADDR_VAR 0 12
59082: PUSH
59083: LD_INT 0
59085: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59086: LD_VAR 0 9
59090: PPUSH
59091: LD_VAR 0 10
59095: PPUSH
59096: LD_VAR 0 6
59100: PPUSH
59101: LD_VAR 0 8
59105: PPUSH
59106: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59110: LD_INT 35
59112: PPUSH
59113: CALL_OW 67
// p := Inc ( p ) ;
59117: LD_ADDR_VAR 0 12
59121: PUSH
59122: LD_VAR 0 12
59126: PPUSH
59127: CALL 49623 0 1
59131: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59132: LD_VAR 0 12
59136: PUSH
59137: LD_INT 3
59139: EQUAL
59140: IFTRUE 59154
59142: PUSH
59143: LD_VAR 0 1
59147: PPUSH
59148: CALL_OW 302
59152: NOT
59153: OR
59154: IFTRUE 59167
59156: PUSH
59157: LD_VAR 0 1
59161: PPUSH
59162: CALL_OW 301
59166: OR
59167: IFFALSE 59110
// RemoveSeeing ( _x , _y , side ) ;
59169: LD_VAR 0 9
59173: PPUSH
59174: LD_VAR 0 10
59178: PPUSH
59179: LD_VAR 0 6
59183: PPUSH
59184: CALL_OW 331
// end ; end_of_file
59188: LD_VAR 0 4
59192: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
59193: LD_EXP 41
59197: IFFALSE 59538
59199: GO 59201
59201: DISABLE
59202: LD_INT 0
59204: PPUSH
59205: PPUSH
59206: PPUSH
// begin mpKingPoints := [ ] ;
59207: LD_ADDR_EXP 60
59211: PUSH
59212: EMPTY
59213: ST_TO_ADDR
// if mpTeamGame then
59214: LD_EXP 13
59218: IFFALSE 59272
// begin for i := 1 to Count ( mpTeams ) do
59220: LD_ADDR_VAR 0 1
59224: PUSH
59225: DOUBLE
59226: LD_INT 1
59228: DEC
59229: ST_TO_ADDR
59230: LD_EXP 12
59234: PPUSH
59235: CALL 12318 0 1
59239: PUSH
59240: FOR_TO
59241: IFFALSE 59268
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59243: LD_ADDR_EXP 60
59247: PUSH
59248: LD_EXP 60
59252: PPUSH
59253: LD_VAR 0 1
59257: PPUSH
59258: LD_INT 0
59260: PPUSH
59261: CALL_OW 1
59265: ST_TO_ADDR
59266: GO 59240
59268: POP
59269: POP
// end else
59270: GO 59315
// begin for i := 1 to 8 do
59272: LD_ADDR_VAR 0 1
59276: PUSH
59277: DOUBLE
59278: LD_INT 1
59280: DEC
59281: ST_TO_ADDR
59282: LD_INT 8
59284: PUSH
59285: FOR_TO
59286: IFFALSE 59313
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
59288: LD_ADDR_EXP 60
59292: PUSH
59293: LD_EXP 60
59297: PPUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: LD_INT 0
59305: PPUSH
59306: CALL_OW 1
59310: ST_TO_ADDR
59311: GO 59285
59313: POP
59314: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
59315: LD_ADDR_VAR 0 3
59319: PUSH
59320: LD_EXP 2
59324: PPUSH
59325: LD_INT 0
59327: PPUSH
59328: CALL_OW 517
59332: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59333: LD_ADDR_VAR 0 1
59337: PUSH
59338: DOUBLE
59339: LD_INT 1
59341: DEC
59342: ST_TO_ADDR
59343: LD_VAR 0 3
59347: PUSH
59348: LD_INT 1
59350: ARRAY
59351: PUSH
59352: FOR_TO
59353: IFFALSE 59420
// for j := 1 to 8 do
59355: LD_ADDR_VAR 0 2
59359: PUSH
59360: DOUBLE
59361: LD_INT 1
59363: DEC
59364: ST_TO_ADDR
59365: LD_INT 8
59367: PUSH
59368: FOR_TO
59369: IFFALSE 59416
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
59371: LD_VAR 0 3
59375: PUSH
59376: LD_INT 1
59378: ARRAY
59379: PUSH
59380: LD_VAR 0 1
59384: ARRAY
59385: PPUSH
59386: LD_VAR 0 3
59390: PUSH
59391: LD_INT 2
59393: ARRAY
59394: PUSH
59395: LD_VAR 0 1
59399: ARRAY
59400: PPUSH
59401: LD_VAR 0 2
59405: PPUSH
59406: LD_INT 12
59408: NEG
59409: PPUSH
59410: CALL_OW 330
59414: GO 59368
59416: POP
59417: POP
59418: GO 59352
59420: POP
59421: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59422: LD_EXP 36
59426: PPUSH
59427: LD_INT 1
59429: PPUSH
59430: CALL_OW 424
// UpdateCounter ;
59434: CALL 60044 0 0
// repeat wait ( 0 0$1 ) ;
59438: LD_INT 35
59440: PPUSH
59441: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59445: LD_ADDR_VAR 0 3
59449: PUSH
59450: LD_EXP 36
59454: PPUSH
59455: LD_INT 3
59457: PUSH
59458: LD_INT 57
59460: PUSH
59461: EMPTY
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 50
59470: PUSH
59471: EMPTY
59472: LIST
59473: PUSH
59474: LD_INT 2
59476: PUSH
59477: LD_INT 30
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 30
59489: PUSH
59490: LD_INT 1
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: PPUSH
59507: CALL_OW 70
59511: ST_TO_ADDR
// if not tmp then
59512: LD_VAR 0 3
59516: NOT
59517: IFFALSE 59521
// continue ;
59519: GO 59438
// AddPoints ( tmp ) ;
59521: LD_VAR 0 3
59525: PPUSH
59526: CALL 59722 0 1
// UpdateCounter ;
59530: CALL 60044 0 0
// until false ;
59534: LD_INT 0
59536: IFFALSE 59438
// end ;
59538: PPOPN 3
59540: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59541: LD_EXP 41
59545: IFFALSE 59553
59547: PUSH
59548: LD_EXP 39
59552: AND
59553: IFFALSE 59719
59555: GO 59557
59557: DISABLE
59558: LD_INT 0
59560: PPUSH
59561: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59562: LD_ADDR_VAR 0 2
59566: PUSH
59567: LD_EXP 2
59571: PPUSH
59572: LD_INT 0
59574: PPUSH
59575: CALL_OW 517
59579: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59580: LD_ADDR_VAR 0 1
59584: PUSH
59585: DOUBLE
59586: LD_INT 1
59588: DEC
59589: ST_TO_ADDR
59590: LD_VAR 0 2
59594: PUSH
59595: LD_INT 1
59597: ARRAY
59598: PUSH
59599: FOR_TO
59600: IFFALSE 59641
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59602: LD_VAR 0 2
59606: PUSH
59607: LD_INT 1
59609: ARRAY
59610: PUSH
59611: LD_VAR 0 1
59615: ARRAY
59616: PPUSH
59617: LD_VAR 0 2
59621: PUSH
59622: LD_INT 2
59624: ARRAY
59625: PUSH
59626: LD_VAR 0 1
59630: ARRAY
59631: PPUSH
59632: LD_INT 125
59634: PPUSH
59635: CALL_OW 495
59639: GO 59599
59641: POP
59642: POP
// repeat wait ( mpEmissions ) ;
59643: LD_EXP 39
59647: PPUSH
59648: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59652: LD_ADDR_VAR 0 1
59656: PUSH
59657: DOUBLE
59658: LD_INT 1
59660: DEC
59661: ST_TO_ADDR
59662: LD_VAR 0 2
59666: PUSH
59667: LD_INT 1
59669: ARRAY
59670: PUSH
59671: FOR_TO
59672: IFFALSE 59713
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59674: LD_VAR 0 2
59678: PUSH
59679: LD_INT 1
59681: ARRAY
59682: PUSH
59683: LD_VAR 0 1
59687: ARRAY
59688: PPUSH
59689: LD_VAR 0 2
59693: PUSH
59694: LD_INT 2
59696: ARRAY
59697: PUSH
59698: LD_VAR 0 1
59702: ARRAY
59703: PPUSH
59704: LD_INT 15
59706: PPUSH
59707: CALL_OW 495
59711: GO 59671
59713: POP
59714: POP
// until false ;
59715: LD_INT 0
59717: IFFALSE 59643
// end ;
59719: PPOPN 2
59721: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59722: LD_INT 0
59724: PPUSH
59725: PPUSH
59726: PPUSH
59727: PPUSH
59728: PPUSH
// if mpTeamGame then
59729: LD_EXP 13
59733: IFFALSE 59930
// begin first := depots [ 1 ] ;
59735: LD_ADDR_VAR 0 4
59739: PUSH
59740: LD_VAR 0 1
59744: PUSH
59745: LD_INT 1
59747: ARRAY
59748: ST_TO_ADDR
// side := GetSide ( first ) ;
59749: LD_ADDR_VAR 0 6
59753: PUSH
59754: LD_VAR 0 4
59758: PPUSH
59759: CALL_OW 255
59763: ST_TO_ADDR
// for i := 1 to mpTeams do
59764: LD_ADDR_VAR 0 3
59768: PUSH
59769: DOUBLE
59770: LD_INT 1
59772: DEC
59773: ST_TO_ADDR
59774: LD_EXP 12
59778: PUSH
59779: FOR_TO
59780: IFFALSE 59814
// if side in mpTeams [ i ] then
59782: LD_VAR 0 6
59786: PUSH
59787: LD_EXP 12
59791: PUSH
59792: LD_VAR 0 3
59796: ARRAY
59797: IN
59798: IFFALSE 59812
// begin team := i ;
59800: LD_ADDR_VAR 0 5
59804: PUSH
59805: LD_VAR 0 3
59809: ST_TO_ADDR
// break ;
59810: GO 59814
// end ;
59812: GO 59779
59814: POP
59815: POP
// if not team then
59816: LD_VAR 0 5
59820: NOT
59821: IFFALSE 59825
// exit ;
59823: GO 60039
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59825: LD_EXP 36
59829: PPUSH
59830: LD_INT 81
59832: PUSH
59833: LD_VAR 0 6
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PPUSH
59842: CALL_OW 70
59846: IFFALSE 59850
// exit ;
59848: GO 60039
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59850: LD_ADDR_EXP 60
59854: PUSH
59855: LD_EXP 60
59859: PPUSH
59860: LD_VAR 0 5
59864: PPUSH
59865: LD_EXP 60
59869: PUSH
59870: LD_VAR 0 5
59874: ARRAY
59875: PUSH
59876: LD_INT 1
59878: PLUS
59879: PPUSH
59880: CALL_OW 1
59884: ST_TO_ADDR
// for i in mpTeams [ team ] do
59885: LD_ADDR_VAR 0 3
59889: PUSH
59890: LD_EXP 12
59894: PUSH
59895: LD_VAR 0 5
59899: ARRAY
59900: PUSH
59901: FOR_IN
59902: IFFALSE 59926
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59904: LD_VAR 0 3
59908: PPUSH
59909: LD_EXP 60
59913: PUSH
59914: LD_VAR 0 5
59918: ARRAY
59919: PPUSH
59920: CALL_OW 506
59924: GO 59901
59926: POP
59927: POP
// end else
59928: GO 60039
// begin first := depots [ 1 ] ;
59930: LD_ADDR_VAR 0 4
59934: PUSH
59935: LD_VAR 0 1
59939: PUSH
59940: LD_INT 1
59942: ARRAY
59943: ST_TO_ADDR
// side := GetSide ( first ) ;
59944: LD_ADDR_VAR 0 6
59948: PUSH
59949: LD_VAR 0 4
59953: PPUSH
59954: CALL_OW 255
59958: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59959: LD_EXP 36
59963: PPUSH
59964: LD_INT 81
59966: PUSH
59967: LD_VAR 0 6
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PPUSH
59976: CALL_OW 70
59980: IFFALSE 59984
// exit ;
59982: GO 60039
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59984: LD_ADDR_EXP 60
59988: PUSH
59989: LD_EXP 60
59993: PPUSH
59994: LD_VAR 0 6
59998: PPUSH
59999: LD_EXP 60
60003: PUSH
60004: LD_VAR 0 6
60008: ARRAY
60009: PUSH
60010: LD_INT 1
60012: PLUS
60013: PPUSH
60014: CALL_OW 1
60018: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
60019: LD_VAR 0 6
60023: PPUSH
60024: LD_EXP 60
60028: PUSH
60029: LD_VAR 0 6
60033: ARRAY
60034: PPUSH
60035: CALL_OW 506
// end ; end ;
60039: LD_VAR 0 2
60043: RET
// function UpdateCounter ; var i ; begin
60044: LD_INT 0
60046: PPUSH
60047: PPUSH
// result := [ ] ;
60048: LD_ADDR_VAR 0 1
60052: PUSH
60053: EMPTY
60054: ST_TO_ADDR
// if mpTeamGame then
60055: LD_EXP 13
60059: IFFALSE 60126
// begin for i := 1 to mpTeams do
60061: LD_ADDR_VAR 0 2
60065: PUSH
60066: DOUBLE
60067: LD_INT 1
60069: DEC
60070: ST_TO_ADDR
60071: LD_EXP 12
60075: PUSH
60076: FOR_TO
60077: IFFALSE 60122
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
60079: LD_ADDR_VAR 0 1
60083: PUSH
60084: LD_VAR 0 1
60088: PUSH
60089: LD_STRING #KingoftheHill-Team
60091: PUSH
60092: LD_VAR 0 2
60096: PUSH
60097: LD_EXP 60
60101: PUSH
60102: LD_VAR 0 2
60106: ARRAY
60107: PUSH
60108: LD_EXP 37
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: ADD
60119: ST_TO_ADDR
60120: GO 60076
60122: POP
60123: POP
// end else
60124: GO 60199
// begin for i := 1 to 8 do
60126: LD_ADDR_VAR 0 2
60130: PUSH
60131: DOUBLE
60132: LD_INT 1
60134: DEC
60135: ST_TO_ADDR
60136: LD_INT 8
60138: PUSH
60139: FOR_TO
60140: IFFALSE 60197
// if mpSidePositions [ i ] then
60142: LD_EXP 9
60146: PUSH
60147: LD_VAR 0 2
60151: ARRAY
60152: IFFALSE 60195
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
60154: LD_ADDR_VAR 0 1
60158: PUSH
60159: LD_VAR 0 1
60163: PUSH
60164: LD_STRING #KingoftheHill-Player
60166: PUSH
60167: LD_VAR 0 2
60171: PUSH
60172: LD_EXP 60
60176: PUSH
60177: LD_VAR 0 2
60181: ARRAY
60182: PUSH
60183: LD_EXP 37
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: ADD
60194: ST_TO_ADDR
60195: GO 60139
60197: POP
60198: POP
// end ; mpDisplayStrings := result ;
60199: LD_ADDR_EXP 40
60203: PUSH
60204: LD_VAR 0 1
60208: ST_TO_ADDR
// end ;
60209: LD_VAR 0 1
60213: RET
// export function HowMuchPointsKing ( side ) ; begin
60214: LD_INT 0
60216: PPUSH
// result := HowMuchPoints ( side ) ;
60217: LD_ADDR_VAR 0 2
60221: PUSH
60222: LD_VAR 0 1
60226: PPUSH
60227: CALL 60237 0 1
60231: ST_TO_ADDR
// end ;
60232: LD_VAR 0 2
60236: RET
// function HowMuchPoints ( side ) ; var i ; begin
60237: LD_INT 0
60239: PPUSH
60240: PPUSH
// if mpTeamGame then
60241: LD_EXP 13
60245: IFFALSE 60314
// begin for i := 1 to Count ( mpTeams ) do
60247: LD_ADDR_VAR 0 3
60251: PUSH
60252: DOUBLE
60253: LD_INT 1
60255: DEC
60256: ST_TO_ADDR
60257: LD_EXP 12
60261: PPUSH
60262: CALL 12318 0 1
60266: PUSH
60267: FOR_TO
60268: IFFALSE 60310
// begin if side in mpTeams [ i ] then
60270: LD_VAR 0 1
60274: PUSH
60275: LD_EXP 12
60279: PUSH
60280: LD_VAR 0 3
60284: ARRAY
60285: IN
60286: IFFALSE 60308
// begin result := mpKingPoints [ i ] ;
60288: LD_ADDR_VAR 0 2
60292: PUSH
60293: LD_EXP 60
60297: PUSH
60298: LD_VAR 0 3
60302: ARRAY
60303: ST_TO_ADDR
// exit ;
60304: POP
60305: POP
60306: GO 60330
// end ; end ;
60308: GO 60267
60310: POP
60311: POP
// end else
60312: GO 60330
// result := mpKingPoints [ side ] ;
60314: LD_ADDR_VAR 0 2
60318: PUSH
60319: LD_EXP 60
60323: PUSH
60324: LD_VAR 0 1
60328: ARRAY
60329: ST_TO_ADDR
// end ;
60330: LD_VAR 0 2
60334: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
60335: LD_EXP 41
60339: IFFALSE 60347
60341: PUSH
60342: CALL 60682 0 0
60346: AND
60347: IFFALSE 60355
60349: PUSH
60350: LD_OWVAR 4
60354: AND
60355: IFFALSE 60605
60357: GO 60359
60359: DISABLE
60360: LD_INT 0
60362: PPUSH
60363: PPUSH
// begin canWin := false ;
60364: LD_ADDR_VAR 0 2
60368: PUSH
60369: LD_INT 0
60371: ST_TO_ADDR
// if not HasPower ( your_side ) then
60372: LD_OWVAR 2
60376: PPUSH
60377: CALL 60724 0 1
60381: NOT
60382: IFFALSE 60393
// begin Multiplayer_Loose_Message ;
60384: CALL_OW 521
// enable ( mpLose ) ;
60388: LD_INT 102
60390: ENABLE_MARKED
// end else
60391: GO 60605
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
60393: LD_ADDR_VAR 0 2
60397: PUSH
60398: LD_OWVAR 2
60402: PPUSH
60403: CALL 60237 0 1
60407: PUSH
60408: LD_EXP 37
60412: GREATEREQUAL
60413: IFFALSE 60426
60415: PUSH
60416: LD_OWVAR 2
60420: PPUSH
60421: CALL 60724 0 1
60425: AND
60426: IFTRUE 60435
60428: PUSH
60429: CALL 60608 0 0
60433: NOT
60434: OR
60435: ST_TO_ADDR
// for i := 1 to 8 do
60436: LD_ADDR_VAR 0 1
60440: PUSH
60441: DOUBLE
60442: LD_INT 1
60444: DEC
60445: ST_TO_ADDR
60446: LD_INT 8
60448: PUSH
60449: FOR_TO
60450: IFFALSE 60591
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60452: LD_EXP 9
60456: PUSH
60457: LD_VAR 0 1
60461: ARRAY
60462: IFFALSE 60475
60464: PUSH
60465: LD_VAR 0 1
60469: PPUSH
60470: CALL_OW 108
60474: AND
60475: IFFALSE 60489
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_OWVAR 2
60487: NONEQUAL
60488: AND
60489: IFFALSE 60589
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60491: LD_EXP 10
60495: PUSH
60496: LD_VAR 0 1
60500: ARRAY
60501: NOT
60502: IFTRUE 60550
60504: PUSH
60505: LD_EXP 10
60509: PUSH
60510: LD_VAR 0 1
60514: ARRAY
60515: PUSH
60516: LD_EXP 10
60520: PUSH
60521: LD_OWVAR 2
60525: ARRAY
60526: NONEQUAL
60527: IFFALSE 60549
60529: PUSH
60530: LD_OWVAR 2
60534: PPUSH
60535: LD_VAR 0 1
60539: PPUSH
60540: CALL_OW 81
60544: PUSH
60545: LD_INT 1
60547: NONEQUAL
60548: AND
60549: OR
60550: IFFALSE 60589
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60552: LD_VAR 0 1
60556: PPUSH
60557: CALL 60237 0 1
60561: PUSH
60562: LD_EXP 37
60566: GREATEREQUAL
60567: IFFALSE 60580
60569: PUSH
60570: LD_VAR 0 1
60574: PPUSH
60575: CALL 60724 0 1
60579: AND
60580: IFFALSE 60589
// begin enable ( mpLose ) ;
60582: LD_INT 102
60584: ENABLE_MARKED
// exit ;
60585: POP
60586: POP
60587: GO 60605
// end ;
60589: GO 60449
60591: POP
60592: POP
// if canWin then
60593: LD_VAR 0 2
60597: IFFALSE 60604
// enable ( mpWin ) else
60599: LD_INT 101
60601: ENABLE_MARKED
60602: GO 60605
// enable ;
60604: ENABLE
// end ; end ;
60605: PPOPN 2
60607: END
// function EnemiesInGame ; var i ; begin
60608: LD_INT 0
60610: PPUSH
60611: PPUSH
// result := false ;
60612: LD_ADDR_VAR 0 1
60616: PUSH
60617: LD_INT 0
60619: ST_TO_ADDR
// for i := 1 to 8 do
60620: LD_ADDR_VAR 0 2
60624: PUSH
60625: DOUBLE
60626: LD_INT 1
60628: DEC
60629: ST_TO_ADDR
60630: LD_INT 8
60632: PUSH
60633: FOR_TO
60634: IFFALSE 60675
// if i <> your_side and HasPower ( i ) then
60636: LD_VAR 0 2
60640: PUSH
60641: LD_OWVAR 2
60645: NONEQUAL
60646: IFFALSE 60659
60648: PUSH
60649: LD_VAR 0 2
60653: PPUSH
60654: CALL 60724 0 1
60658: AND
60659: IFFALSE 60673
// begin result := true ;
60661: LD_ADDR_VAR 0 1
60665: PUSH
60666: LD_INT 1
60668: ST_TO_ADDR
// exit ;
60669: POP
60670: POP
60671: GO 60677
// end ;
60673: GO 60633
60675: POP
60676: POP
// end ;
60677: LD_VAR 0 1
60681: RET
// function CanWinLoose ; begin
60682: LD_INT 0
60684: PPUSH
// result := true ;
60685: LD_ADDR_VAR 0 1
60689: PUSH
60690: LD_INT 1
60692: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60693: CALL_OW 531
60697: IFFALSE 60709
60699: PUSH
60700: CALL_OW 519
60704: PUSH
60705: LD_INT 1
60707: GREATER
60708: AND
60709: IFFALSE 60719
// result := false ;
60711: LD_ADDR_VAR 0 1
60715: PUSH
60716: LD_INT 0
60718: ST_TO_ADDR
// end ;
60719: LD_VAR 0 1
60723: RET
// function HasPower ( i ) ; begin
60724: LD_INT 0
60726: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60727: LD_ADDR_VAR 0 2
60731: PUSH
60732: LD_INT 22
60734: PUSH
60735: LD_VAR 0 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: LD_INT 21
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 33
60759: PUSH
60760: LD_INT 3
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 33
60769: PUSH
60770: LD_INT 5
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PPUSH
60787: CALL_OW 69
60791: ST_TO_ADDR
// end ; end_of_file
60792: LD_VAR 0 2
60796: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60797: PPOPN 6
60799: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60800: LD_EXP 5
60804: PUSH
60805: LD_INT 4
60807: EQUAL
60808: IFFALSE 60844
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60810: LD_STRING setGameDifficulty(
60812: PUSH
60813: LD_OWVAR 67
60817: STR
60818: PUSH
60819: LD_STRING )
60821: STR
60822: PPUSH
60823: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60827: LD_STRING displayDifficulty(
60829: PUSH
60830: LD_OWVAR 67
60834: STR
60835: PUSH
60836: LD_STRING )
60838: STR
60839: PPUSH
60840: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60844: CALL 60873 0 0
// end ; end_of_file
60848: PPOPN 1
60850: END
// every 0 0$1 do
60851: GO 60853
60853: DISABLE
// begin enable ;
60854: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60855: LD_STRING updateTimer(
60857: PUSH
60858: LD_OWVAR 1
60862: STR
60863: PUSH
60864: LD_STRING );
60866: STR
60867: PPUSH
60868: CALL_OW 559
// end ;
60872: END
// export function SOS_MapStart ( ) ; begin
60873: LD_INT 0
60875: PPUSH
// UpdateFactoryWaypoints ( ) ;
60876: CALL 61807 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60880: CALL 62059 0 0
// ParseMultiDataToLua ( ) ;
60884: CALL 62206 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60888: LD_STRING setSpecLogoNumber(
60890: PUSH
60891: LD_INT 2
60893: STR
60894: PUSH
60895: LD_STRING ,
60897: STR
60898: PUSH
60899: LD_INT 1
60901: STR
60902: PUSH
60903: LD_STRING )
60905: STR
60906: PPUSH
60907: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60911: LD_STRING setSpecLogoNumber(
60913: PUSH
60914: LD_INT 3
60916: STR
60917: PUSH
60918: LD_STRING ,
60920: STR
60921: PUSH
60922: LD_INT 2
60924: STR
60925: PUSH
60926: LD_STRING )
60928: STR
60929: PPUSH
60930: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60934: LD_STRING setSpecLogoNumber(
60936: PUSH
60937: LD_INT 4
60939: STR
60940: PUSH
60941: LD_STRING ,
60943: STR
60944: PUSH
60945: LD_INT 3
60947: STR
60948: PUSH
60949: LD_STRING )
60951: STR
60952: PPUSH
60953: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60957: LD_STRING setSpecLogoNumber(
60959: PUSH
60960: LD_INT 5
60962: STR
60963: PUSH
60964: LD_STRING ,
60966: STR
60967: PUSH
60968: LD_INT 4
60970: STR
60971: PUSH
60972: LD_STRING )
60974: STR
60975: PPUSH
60976: CALL_OW 559
// end ;
60980: LD_VAR 0 1
60984: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60985: LD_INT 0
60987: PPUSH
60988: PPUSH
60989: PPUSH
60990: PPUSH
60991: PPUSH
60992: PPUSH
60993: PPUSH
60994: PPUSH
60995: PPUSH
// for i := 1 to 8 do
60996: LD_ADDR_VAR 0 2
61000: PUSH
61001: DOUBLE
61002: LD_INT 1
61004: DEC
61005: ST_TO_ADDR
61006: LD_INT 8
61008: PUSH
61009: FOR_TO
61010: IFFALSE 61395
// begin if mpSidePositions [ i ] then
61012: LD_EXP 9
61016: PUSH
61017: LD_VAR 0 2
61021: ARRAY
61022: IFFALSE 61393
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61024: LD_ADDR_VAR 0 7
61028: PUSH
61029: LD_INT 22
61031: PUSH
61032: LD_VAR 0 2
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 21
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PPUSH
61055: CALL_OW 69
61059: PPUSH
61060: CALL 12318 0 1
61064: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61065: LD_ADDR_VAR 0 9
61069: PUSH
61070: LD_INT 22
61072: PUSH
61073: LD_VAR 0 2
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 30
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 30
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PPUSH
61114: CALL_OW 69
61118: ST_TO_ADDR
// crates := 0 ;
61119: LD_ADDR_VAR 0 4
61123: PUSH
61124: LD_INT 0
61126: ST_TO_ADDR
// oil := 0 ;
61127: LD_ADDR_VAR 0 5
61131: PUSH
61132: LD_INT 0
61134: ST_TO_ADDR
// sib := 0 ;
61135: LD_ADDR_VAR 0 6
61139: PUSH
61140: LD_INT 0
61142: ST_TO_ADDR
// if bases then
61143: LD_VAR 0 9
61147: IFFALSE 61253
// begin for j in bases do
61149: LD_ADDR_VAR 0 3
61153: PUSH
61154: LD_VAR 0 9
61158: PUSH
61159: FOR_IN
61160: IFFALSE 61251
// begin base := GetBase ( j ) ;
61162: LD_ADDR_VAR 0 8
61166: PUSH
61167: LD_VAR 0 3
61171: PPUSH
61172: CALL_OW 274
61176: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61177: LD_ADDR_VAR 0 4
61181: PUSH
61182: LD_VAR 0 4
61186: PUSH
61187: LD_VAR 0 8
61191: PPUSH
61192: LD_INT 1
61194: PPUSH
61195: CALL_OW 275
61199: PLUS
61200: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61201: LD_ADDR_VAR 0 5
61205: PUSH
61206: LD_VAR 0 5
61210: PUSH
61211: LD_VAR 0 8
61215: PPUSH
61216: LD_INT 2
61218: PPUSH
61219: CALL_OW 275
61223: PLUS
61224: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61225: LD_ADDR_VAR 0 6
61229: PUSH
61230: LD_VAR 0 6
61234: PUSH
61235: LD_VAR 0 8
61239: PPUSH
61240: LD_INT 3
61242: PPUSH
61243: CALL_OW 275
61247: PLUS
61248: ST_TO_ADDR
// end ;
61249: GO 61159
61251: POP
61252: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61253: LD_STRING setSpecText(
61255: PUSH
61256: LD_VAR 0 2
61260: STR
61261: PUSH
61262: LD_STRING ,
61264: STR
61265: PUSH
61266: LD_INT 2
61268: STR
61269: PUSH
61270: LD_STRING ,
61272: STR
61273: PUSH
61274: LD_VAR 0 4
61278: STR
61279: PUSH
61280: LD_STRING )
61282: STR
61283: PPUSH
61284: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61288: LD_STRING setSpecText(
61290: PUSH
61291: LD_VAR 0 2
61295: STR
61296: PUSH
61297: LD_STRING ,
61299: STR
61300: PUSH
61301: LD_INT 3
61303: STR
61304: PUSH
61305: LD_STRING ,
61307: STR
61308: PUSH
61309: LD_VAR 0 5
61313: STR
61314: PUSH
61315: LD_STRING )
61317: STR
61318: PPUSH
61319: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61323: LD_STRING setSpecText(
61325: PUSH
61326: LD_VAR 0 2
61330: STR
61331: PUSH
61332: LD_STRING ,
61334: STR
61335: PUSH
61336: LD_INT 4
61338: STR
61339: PUSH
61340: LD_STRING ,
61342: STR
61343: PUSH
61344: LD_VAR 0 6
61348: STR
61349: PUSH
61350: LD_STRING )
61352: STR
61353: PPUSH
61354: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61358: LD_STRING setSpecText(
61360: PUSH
61361: LD_VAR 0 2
61365: STR
61366: PUSH
61367: LD_STRING ,
61369: STR
61370: PUSH
61371: LD_INT 5
61373: STR
61374: PUSH
61375: LD_STRING ,
61377: STR
61378: PUSH
61379: LD_VAR 0 7
61383: STR
61384: PUSH
61385: LD_STRING )
61387: STR
61388: PPUSH
61389: CALL_OW 559
// end ; end ;
61393: GO 61009
61395: POP
61396: POP
// end ;
61397: LD_VAR 0 1
61401: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61402: LD_INT 2
61404: PUSH
61405: LD_INT 30
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 30
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: PPUSH
61430: CALL_OW 69
61434: IFFALSE 61444
61436: GO 61438
61438: DISABLE
// begin enable ;
61439: ENABLE
// UpdateSpectatorBar ;
61440: CALL 60985 0 0
// end ;
61444: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61445: LD_INT 0
61447: PPUSH
// end ;
61448: LD_VAR 0 12
61452: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61453: LD_INT 0
61455: PPUSH
61456: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61457: LD_VAR 0 1
61461: NOT
61462: IFTRUE 61481
61464: PUSH
61465: LD_VAR 0 2
61469: PPUSH
61470: LD_VAR 0 3
61474: PPUSH
61475: CALL_OW 488
61479: NOT
61480: OR
61481: IFTRUE 61516
61483: PUSH
61484: LD_VAR 0 1
61488: PPUSH
61489: CALL_OW 266
61493: PUSH
61494: LD_INT 3
61496: NONEQUAL
61497: IFFALSE 61515
61499: PUSH
61500: LD_VAR 0 1
61504: PPUSH
61505: CALL_OW 247
61509: PUSH
61510: LD_INT 1
61512: EQUAL
61513: NOT
61514: AND
61515: OR
61516: IFFALSE 61520
// exit ;
61518: GO 61802
// if GetType ( factory ) = unit_human then
61520: LD_VAR 0 1
61524: PPUSH
61525: CALL_OW 247
61529: PUSH
61530: LD_INT 1
61532: EQUAL
61533: IFFALSE 61550
// factory := IsInUnit ( factory ) ;
61535: LD_ADDR_VAR 0 1
61539: PUSH
61540: LD_VAR 0 1
61544: PPUSH
61545: CALL_OW 310
61549: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61550: LD_VAR 0 1
61554: PPUSH
61555: CALL_OW 266
61559: PUSH
61560: LD_INT 3
61562: NONEQUAL
61563: IFFALSE 61567
// exit ;
61565: GO 61802
// for i := 1 to Count ( factoryWaypoints ) do
61567: LD_ADDR_VAR 0 5
61571: PUSH
61572: DOUBLE
61573: LD_INT 1
61575: DEC
61576: ST_TO_ADDR
61577: LD_EXP 61
61581: PPUSH
61582: CALL 12318 0 1
61586: PUSH
61587: FOR_TO
61588: IFFALSE 61750
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61590: LD_VAR 0 2
61594: PPUSH
61595: LD_VAR 0 3
61599: PPUSH
61600: CALL_OW 428
61604: PUSH
61605: LD_EXP 61
61609: PUSH
61610: LD_VAR 0 5
61614: ARRAY
61615: PUSH
61616: LD_INT 2
61618: ARRAY
61619: EQUAL
61620: IFFALSE 61652
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61622: LD_ADDR_EXP 61
61626: PUSH
61627: LD_EXP 61
61631: PPUSH
61632: LD_VAR 0 5
61636: PPUSH
61637: CALL_OW 3
61641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61642: CALL 61807 0 0
// exit ;
61646: POP
61647: POP
61648: GO 61802
// end else
61650: GO 61748
// if factory = factoryWaypoints [ i ] [ 2 ] then
61652: LD_VAR 0 1
61656: PUSH
61657: LD_EXP 61
61661: PUSH
61662: LD_VAR 0 5
61666: ARRAY
61667: PUSH
61668: LD_INT 2
61670: ARRAY
61671: EQUAL
61672: IFFALSE 61748
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61674: LD_ADDR_EXP 61
61678: PUSH
61679: LD_EXP 61
61683: PPUSH
61684: LD_VAR 0 5
61688: PPUSH
61689: CALL_OW 3
61693: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61694: LD_ADDR_EXP 61
61698: PUSH
61699: LD_EXP 61
61703: PPUSH
61704: LD_VAR 0 1
61708: PPUSH
61709: CALL_OW 255
61713: PUSH
61714: LD_VAR 0 1
61718: PUSH
61719: LD_VAR 0 2
61723: PUSH
61724: LD_VAR 0 3
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: PPUSH
61735: CALL 48250 0 2
61739: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61740: CALL 61807 0 0
// exit ;
61744: POP
61745: POP
61746: GO 61802
// end ; end ;
61748: GO 61587
61750: POP
61751: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61752: LD_ADDR_EXP 61
61756: PUSH
61757: LD_EXP 61
61761: PPUSH
61762: LD_VAR 0 1
61766: PPUSH
61767: CALL_OW 255
61771: PUSH
61772: LD_VAR 0 1
61776: PUSH
61777: LD_VAR 0 2
61781: PUSH
61782: LD_VAR 0 3
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: PPUSH
61793: CALL 48250 0 2
61797: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61798: CALL 61807 0 0
// end ;
61802: LD_VAR 0 4
61806: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61807: LD_INT 0
61809: PPUSH
61810: PPUSH
61811: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61812: LD_STRING resetFactoryWaypoint();
61814: PPUSH
61815: CALL_OW 559
// if factoryWaypoints then
61819: LD_EXP 61
61823: IFFALSE 61944
// begin list := factoryWaypoints ;
61825: LD_ADDR_VAR 0 3
61829: PUSH
61830: LD_EXP 61
61834: ST_TO_ADDR
// for i := 1 to list do
61835: LD_ADDR_VAR 0 2
61839: PUSH
61840: DOUBLE
61841: LD_INT 1
61843: DEC
61844: ST_TO_ADDR
61845: LD_VAR 0 3
61849: PUSH
61850: FOR_TO
61851: IFFALSE 61942
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61853: LD_STRING setFactoryWaypointXY(
61855: PUSH
61856: LD_VAR 0 3
61860: PUSH
61861: LD_VAR 0 2
61865: ARRAY
61866: PUSH
61867: LD_INT 1
61869: ARRAY
61870: STR
61871: PUSH
61872: LD_STRING ,
61874: STR
61875: PUSH
61876: LD_VAR 0 3
61880: PUSH
61881: LD_VAR 0 2
61885: ARRAY
61886: PUSH
61887: LD_INT 2
61889: ARRAY
61890: STR
61891: PUSH
61892: LD_STRING ,
61894: STR
61895: PUSH
61896: LD_VAR 0 3
61900: PUSH
61901: LD_VAR 0 2
61905: ARRAY
61906: PUSH
61907: LD_INT 3
61909: ARRAY
61910: STR
61911: PUSH
61912: LD_STRING ,
61914: STR
61915: PUSH
61916: LD_VAR 0 3
61920: PUSH
61921: LD_VAR 0 2
61925: ARRAY
61926: PUSH
61927: LD_INT 4
61929: ARRAY
61930: STR
61931: PUSH
61932: LD_STRING )
61934: STR
61935: PPUSH
61936: CALL_OW 559
61940: GO 61850
61942: POP
61943: POP
// end ; end ;
61944: LD_VAR 0 1
61948: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61949: LD_INT 0
61951: PPUSH
// if HexInfo ( x , y ) = warehouse then
61952: LD_VAR 0 2
61956: PPUSH
61957: LD_VAR 0 3
61961: PPUSH
61962: CALL_OW 428
61966: PUSH
61967: LD_VAR 0 1
61971: EQUAL
61972: IFFALSE 61999
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61974: LD_ADDR_EXP 63
61978: PUSH
61979: LD_EXP 63
61983: PPUSH
61984: LD_VAR 0 1
61988: PPUSH
61989: LD_INT 0
61991: PPUSH
61992: CALL_OW 1
61996: ST_TO_ADDR
61997: GO 62050
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61999: LD_ADDR_EXP 63
62003: PUSH
62004: LD_EXP 63
62008: PPUSH
62009: LD_VAR 0 1
62013: PPUSH
62014: LD_VAR 0 1
62018: PPUSH
62019: CALL_OW 255
62023: PUSH
62024: LD_VAR 0 1
62028: PUSH
62029: LD_VAR 0 2
62033: PUSH
62034: LD_VAR 0 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: PPUSH
62045: CALL_OW 1
62049: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62050: CALL 62059 0 0
// end ;
62054: LD_VAR 0 4
62058: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62059: LD_INT 0
62061: PPUSH
62062: PPUSH
62063: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62064: LD_STRING resetWarehouseGatheringPoints();
62066: PPUSH
62067: CALL_OW 559
// if warehouseGatheringPoints then
62071: LD_EXP 63
62075: IFFALSE 62201
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62077: LD_ADDR_VAR 0 3
62081: PUSH
62082: LD_EXP 63
62086: PPUSH
62087: CALL 52184 0 1
62091: ST_TO_ADDR
// for i := 1 to list do
62092: LD_ADDR_VAR 0 2
62096: PUSH
62097: DOUBLE
62098: LD_INT 1
62100: DEC
62101: ST_TO_ADDR
62102: LD_VAR 0 3
62106: PUSH
62107: FOR_TO
62108: IFFALSE 62199
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62110: LD_STRING setWarehouseGatheringPointXY(
62112: PUSH
62113: LD_VAR 0 3
62117: PUSH
62118: LD_VAR 0 2
62122: ARRAY
62123: PUSH
62124: LD_INT 1
62126: ARRAY
62127: STR
62128: PUSH
62129: LD_STRING ,
62131: STR
62132: PUSH
62133: LD_VAR 0 3
62137: PUSH
62138: LD_VAR 0 2
62142: ARRAY
62143: PUSH
62144: LD_INT 2
62146: ARRAY
62147: STR
62148: PUSH
62149: LD_STRING ,
62151: STR
62152: PUSH
62153: LD_VAR 0 3
62157: PUSH
62158: LD_VAR 0 2
62162: ARRAY
62163: PUSH
62164: LD_INT 3
62166: ARRAY
62167: STR
62168: PUSH
62169: LD_STRING ,
62171: STR
62172: PUSH
62173: LD_VAR 0 3
62177: PUSH
62178: LD_VAR 0 2
62182: ARRAY
62183: PUSH
62184: LD_INT 4
62186: ARRAY
62187: STR
62188: PUSH
62189: LD_STRING )
62191: STR
62192: PPUSH
62193: CALL_OW 559
62197: GO 62107
62199: POP
62200: POP
// end ; end ;
62201: LD_VAR 0 1
62205: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62206: LD_INT 0
62208: PPUSH
62209: PPUSH
// if not mpSidePositions then
62210: LD_EXP 9
62214: NOT
62215: IFFALSE 62219
// exit ;
62217: GO 62290
// result :=  ;
62219: LD_ADDR_VAR 0 1
62223: PUSH
62224: LD_STRING 
62226: ST_TO_ADDR
// for i := 1 to 8 do
62227: LD_ADDR_VAR 0 2
62231: PUSH
62232: DOUBLE
62233: LD_INT 1
62235: DEC
62236: ST_TO_ADDR
62237: LD_INT 8
62239: PUSH
62240: FOR_TO
62241: IFFALSE 62271
// begin result := result & mpSidePositions [ i ] & ; ;
62243: LD_ADDR_VAR 0 1
62247: PUSH
62248: LD_VAR 0 1
62252: PUSH
62253: LD_EXP 9
62257: PUSH
62258: LD_VAR 0 2
62262: ARRAY
62263: STR
62264: PUSH
62265: LD_STRING ;
62267: STR
62268: ST_TO_ADDR
// end ;
62269: GO 62240
62271: POP
62272: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62273: LD_STRING setMultiplayerRealPosition("
62275: PUSH
62276: LD_VAR 0 1
62280: STR
62281: PUSH
62282: LD_STRING ");
62284: STR
62285: PPUSH
62286: CALL_OW 559
// end ;
62290: LD_VAR 0 1
62294: RET
