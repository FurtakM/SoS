// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2832 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3208 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 4 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 4
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 0 , 0 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 2
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 1 , 1 , 2 , 2 , 0 , 0 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 1
 741: PUSH
 742: LD_INT 1
 744: PUSH
 745: LD_INT 2
 747: PUSH
 748: LD_INT 2
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 3 , 4 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 3
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: ST_TO_ADDR
// mpTeamGame := true ;
 802: LD_ADDR_EXP 13
 806: PUSH
 807: LD_INT 1
 809: ST_TO_ADDR
// mpMapSize := [ 100 , 120 ] ;
 810: LD_ADDR_EXP 31
 814: PUSH
 815: LD_INT 100
 817: PUSH
 818: LD_INT 120
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: ST_TO_ADDR
// end ;
 825: LD_VAR 0 1
 829: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
 838: PPUSH
// mpBuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
 839: LD_ADDR_EXP 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: LD_INT 5
 852: PUSH
 853: LD_INT 4
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: ST_TO_ADDR
// mpMarkedAreas := [ ] union mpBuildUpAreas ;
 862: LD_ADDR_EXP 20
 866: PUSH
 867: EMPTY
 868: PUSH
 869: LD_EXP 21
 873: UNION
 874: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 875: LD_VAR 0 1
 879: PUSH
 880: LD_INT 2
 882: EQUAL
 883: IFFALSE 895
// baseLevel := 1 else
 885: LD_ADDR_VAR 0 7
 889: PUSH
 890: LD_INT 1
 892: ST_TO_ADDR
 893: GO 909
// baseLevel := mpGameSettings [ 1 ] ;
 895: LD_ADDR_VAR 0 7
 899: PUSH
 900: LD_EXP 8
 904: PUSH
 905: LD_INT 1
 907: ARRAY
 908: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 909: LD_ADDR_EXP 26
 913: PUSH
 914: LD_EXP 8
 918: PUSH
 919: LD_INT 2
 921: ARRAY
 922: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 923: LD_ADDR_EXP 27
 927: PUSH
 928: LD_EXP 8
 932: PUSH
 933: LD_INT 3
 935: ARRAY
 936: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 937: LD_ADDR_EXP 17
 941: PUSH
 942: LD_EXP 8
 946: PUSH
 947: LD_INT 4
 949: ARRAY
 950: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 951: LD_ADDR_EXP 29
 955: PUSH
 956: LD_EXP 8
 960: PUSH
 961: LD_INT 5
 963: ARRAY
 964: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 965: LD_ADDR_VAR 0 5
 969: PUSH
 970: LD_EXP 8
 974: PUSH
 975: LD_INT 6
 977: ARRAY
 978: PUSH
 979: LD_INT 0
 981: GREATER
 982: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 983: LD_ADDR_VAR 0 6
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 7
 995: ARRAY
 996: PUSH
 997: LD_INT 0
 999: GREATER
1000: ST_TO_ADDR
// mpKingArea := 0 ;
1001: LD_ADDR_EXP 36
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// mpPoints := 0 ;
1009: LD_ADDR_EXP 37
1013: PUSH
1014: LD_INT 0
1016: ST_TO_ADDR
// mpEmissions := 0 ;
1017: LD_ADDR_EXP 39
1021: PUSH
1022: LD_INT 0
1024: ST_TO_ADDR
// kingArea := 0 ;
1025: LD_ADDR_EXP 1
1029: PUSH
1030: LD_INT 0
1032: ST_TO_ADDR
// kingCamArea := 0 ;
1033: LD_ADDR_EXP 2
1037: PUSH
1038: LD_INT 0
1040: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1041: LD_EXP 8
1045: PUSH
1046: LD_INT 9
1048: ARRAY
1049: IFFALSE 1181
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1051: LD_ADDR_EXP 38
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 2
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 1
1076: PUSH
1077: LD_INT 1
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 3
1085: PUSH
1086: EMPTY
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: LD_INT 12
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 24
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_INT 12
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 23
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: LIST
1130: LIST
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 21
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 1
1144: PUSH
1145: LD_INT 42
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: PUSH
1154: LD_INT 21
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: LD_INT 42
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1181: LD_ADDR_EXP 18
1185: PUSH
1186: LD_EXP 8
1190: PUSH
1191: LD_INT 11
1193: ARRAY
1194: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1195: LD_ADDR_EXP 24
1199: PUSH
1200: LD_EXP 8
1204: PUSH
1205: LD_INT 12
1207: ARRAY
1208: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1209: LD_ADDR_EXP 28
1213: PUSH
1214: LD_EXP 8
1218: PUSH
1219: LD_INT 13
1221: ARRAY
1222: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1223: LD_ADDR_EXP 35
1227: PUSH
1228: LD_EXP 8
1232: PUSH
1233: LD_INT 14
1235: ARRAY
1236: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1237: LD_ADDR_EXP 32
1241: PUSH
1242: LD_EXP 8
1246: PUSH
1247: LD_INT 15
1249: ARRAY
1250: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1251: LD_ADDR_EXP 30
1255: PUSH
1256: LD_EXP 8
1260: PUSH
1261: LD_INT 18
1263: ARRAY
1264: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1265: LD_ADDR_EXP 3
1269: PUSH
1270: LD_EXP 8
1274: PUSH
1275: LD_INT 20
1277: ARRAY
1278: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1279: LD_ADDR_EXP 22
1283: PUSH
1284: LD_EXP 8
1288: PUSH
1289: LD_INT 21
1291: ARRAY
1292: ST_TO_ADDR
// mpApemansArea := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 ] ;
1293: LD_ADDR_EXP 33
1297: PUSH
1298: LD_INT 7
1300: PUSH
1301: LD_INT 9
1303: PUSH
1304: LD_INT 8
1306: PUSH
1307: LD_INT 10
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( DepotArea1 , 2 ) , GetBuildingFromArea ( DepotArea2 , 0 ) , GetBuildingFromArea ( DepotArea3 , 3 ) , GetBuildingFromArea ( DepotArea4 , 5 ) ] ;
1316: LD_ADDR_VAR 0 8
1320: PUSH
1321: LD_INT 11
1323: PPUSH
1324: LD_INT 2
1326: PPUSH
1327: CALL 52245 0 2
1331: PUSH
1332: LD_INT 12
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL 52245 0 2
1342: PUSH
1343: LD_INT 13
1345: PPUSH
1346: LD_INT 3
1348: PPUSH
1349: CALL 52245 0 2
1353: PUSH
1354: LD_INT 14
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: CALL 52245 0 2
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_VAR 0 8
1385: PPUSH
1386: CALL 12091 0 1
1390: PUSH
1391: FOR_TO
1392: IFFALSE 1496
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1394: LD_ADDR_EXP 23
1398: PUSH
1399: LD_EXP 23
1403: PPUSH
1404: LD_VAR 0 3
1408: PPUSH
1409: LD_VAR 0 8
1413: PUSH
1414: LD_VAR 0 3
1418: ARRAY
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_VAR 0 8
1428: PUSH
1429: LD_VAR 0 3
1433: ARRAY
1434: PUSH
1435: LD_INT 3
1437: ARRAY
1438: PPUSH
1439: LD_INT 10
1441: PPUSH
1442: CALL_OW 272
1446: PUSH
1447: LD_VAR 0 8
1451: PUSH
1452: LD_VAR 0 3
1456: ARRAY
1457: PUSH
1458: LD_INT 2
1460: ARRAY
1461: PPUSH
1462: LD_VAR 0 8
1466: PUSH
1467: LD_VAR 0 3
1471: ARRAY
1472: PUSH
1473: LD_INT 3
1475: ARRAY
1476: PPUSH
1477: LD_INT 10
1479: PPUSH
1480: CALL_OW 273
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PPUSH
1489: CALL_OW 1
1493: ST_TO_ADDR
1494: GO 1391
1496: POP
1497: POP
// if hasOil then
1498: LD_VAR 0 5
1502: IFFALSE 1585
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1504: LD_ADDR_VAR 0 4
1508: PUSH
1509: LD_EXP 8
1513: PUSH
1514: LD_INT 6
1516: ARRAY
1517: PUSH
1518: LD_INT 2
1520: EQUAL
1521: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( OilArea1 , all ) , GetSourcesFromArea ( OilArea2 , all ) , GetSourcesFromArea ( OilArea3 , all ) , GetSourcesFromArea ( OilArea4 , all ) ] ;
1522: LD_ADDR_EXP 14
1526: PUSH
1527: LD_INT 15
1529: PPUSH
1530: LD_VAR 0 4
1534: PPUSH
1535: CALL 52078 0 2
1539: PUSH
1540: LD_INT 17
1542: PPUSH
1543: LD_VAR 0 4
1547: PPUSH
1548: CALL 52078 0 2
1552: PUSH
1553: LD_INT 19
1555: PPUSH
1556: LD_VAR 0 4
1560: PPUSH
1561: CALL 52078 0 2
1565: PUSH
1566: LD_INT 21
1568: PPUSH
1569: LD_VAR 0 4
1573: PPUSH
1574: CALL 52078 0 2
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// end ; if hasSib then
1585: LD_VAR 0 6
1589: IFFALSE 1672
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1591: LD_ADDR_VAR 0 4
1595: PUSH
1596: LD_EXP 8
1600: PUSH
1601: LD_INT 7
1603: ARRAY
1604: PUSH
1605: LD_INT 2
1607: EQUAL
1608: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( SibArea1 , all ) , GetSourcesFromArea ( SibArea2 , all ) , GetSourcesFromArea ( SibArea3 , all ) , GetSourcesFromArea ( SibArea4 , all ) ] ;
1609: LD_ADDR_EXP 15
1613: PUSH
1614: LD_INT 16
1616: PPUSH
1617: LD_VAR 0 4
1621: PPUSH
1622: CALL 52078 0 2
1626: PUSH
1627: LD_INT 18
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL 52078 0 2
1639: PUSH
1640: LD_INT 20
1642: PPUSH
1643: LD_VAR 0 4
1647: PPUSH
1648: CALL 52078 0 2
1652: PUSH
1653: LD_INT 22
1655: PPUSH
1656: LD_VAR 0 4
1660: PPUSH
1661: CALL 52078 0 2
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1672: LD_VAR 0 7
1676: PUSH
1677: LD_INT 1
1679: GREATEREQUAL
1680: IFFALSE 1692
// mpDepots := startPos ;
1682: LD_ADDR_EXP 16
1686: PUSH
1687: LD_VAR 0 8
1691: ST_TO_ADDR
// if baseLevel >= 2 then
1692: LD_VAR 0 7
1696: PUSH
1697: LD_INT 2
1699: GREATEREQUAL
1700: IFFALSE 1913
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( BunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( BunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( ArmArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( BunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( ArmArea2 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea3a , 1 ) , b_breastwork ^ GetBuildingFromArea ( BunArea3b , 0 ) , b_armoury ^ GetBuildingFromArea ( ArmArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( BunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( BunArea4b , 1 ) , b_armoury ^ GetBuildingFromArea ( ArmArea4 , 2 ) ] ] ;
1702: LD_ADDR_EXP 19
1706: PUSH
1707: LD_INT 31
1709: PUSH
1710: LD_INT 23
1712: PPUSH
1713: LD_INT 5
1715: PPUSH
1716: CALL 52245 0 2
1720: ADD
1721: PUSH
1722: LD_INT 31
1724: PUSH
1725: LD_INT 24
1727: PPUSH
1728: LD_INT 5
1730: PPUSH
1731: CALL 52245 0 2
1735: ADD
1736: PUSH
1737: LD_INT 4
1739: PUSH
1740: LD_INT 25
1742: PPUSH
1743: LD_INT 4
1745: PPUSH
1746: CALL 52245 0 2
1750: ADD
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 31
1759: PUSH
1760: LD_INT 26
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: CALL 52245 0 2
1770: ADD
1771: PUSH
1772: LD_INT 31
1774: PUSH
1775: LD_INT 27
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: CALL 52245 0 2
1785: ADD
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 28
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL 52245 0 2
1800: ADD
1801: PUSH
1802: EMPTY
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 31
1809: PUSH
1810: LD_INT 29
1812: PPUSH
1813: LD_INT 1
1815: PPUSH
1816: CALL 52245 0 2
1820: ADD
1821: PUSH
1822: LD_INT 31
1824: PUSH
1825: LD_INT 31
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL 52245 0 2
1835: ADD
1836: PUSH
1837: LD_INT 4
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 52245 0 2
1850: ADD
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: LD_INT 32
1862: PPUSH
1863: LD_INT 2
1865: PPUSH
1866: CALL 52245 0 2
1870: ADD
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: LD_INT 33
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: CALL 52245 0 2
1885: ADD
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 34
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL 52245 0 2
1900: ADD
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: LIST
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: ST_TO_ADDR
// end ; if mpTree then
1913: LD_EXP 3
1917: IFFALSE 1929
// SetAreaMapShow ( TreeArea , 1 ) ;
1919: LD_INT 1
1921: PPUSH
1922: LD_INT 1
1924: PPUSH
1925: CALL_OW 424
// end ;
1929: LD_VAR 0 2
1933: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
1941: PPUSH
1942: PPUSH
1943: PPUSH
1944: PPUSH
1945: PPUSH
1946: PPUSH
// begin if not mpShipments then
1947: LD_EXP 29
1951: NOT
1952: IFFALSE 1956
// exit ;
1954: GO 2463
// case mpShipments of 1 :
1956: LD_EXP 29
1960: PUSH
1961: LD_INT 1
1963: DOUBLE
1964: EQUAL
1965: IFTRUE 1969
1967: GO 2004
1969: POP
// begin time := 0 0$30 ;
1970: LD_ADDR_VAR 0 4
1974: PUSH
1975: LD_INT 1050
1977: ST_TO_ADDR
// normalTime := 0 0$30 ;
1978: LD_ADDR_VAR 0 6
1982: PUSH
1983: LD_INT 1050
1985: ST_TO_ADDR
// maxTime := 1 1$20 ;
1986: LD_ADDR_VAR 0 8
1990: PUSH
1991: LD_INT 2800
1993: ST_TO_ADDR
// delayTime := 0 0$5 ;
1994: LD_ADDR_VAR 0 7
1998: PUSH
1999: LD_INT 175
2001: ST_TO_ADDR
// end ; 2 :
2002: GO 2134
2004: LD_INT 2
2006: DOUBLE
2007: EQUAL
2008: IFTRUE 2012
2010: GO 2047
2012: POP
// begin time := 0 0$25 ;
2013: LD_ADDR_VAR 0 4
2017: PUSH
2018: LD_INT 875
2020: ST_TO_ADDR
// normalTime := 0 0$25 ;
2021: LD_ADDR_VAR 0 6
2025: PUSH
2026: LD_INT 875
2028: ST_TO_ADDR
// maxTime := 1 1$10 ;
2029: LD_ADDR_VAR 0 8
2033: PUSH
2034: LD_INT 2450
2036: ST_TO_ADDR
// delayTime := 0 0$4 ;
2037: LD_ADDR_VAR 0 7
2041: PUSH
2042: LD_INT 140
2044: ST_TO_ADDR
// end ; 3 :
2045: GO 2134
2047: LD_INT 3
2049: DOUBLE
2050: EQUAL
2051: IFTRUE 2055
2053: GO 2090
2055: POP
// begin time := 0 0$20 ;
2056: LD_ADDR_VAR 0 4
2060: PUSH
2061: LD_INT 700
2063: ST_TO_ADDR
// normalTime := 0 0$20 ;
2064: LD_ADDR_VAR 0 6
2068: PUSH
2069: LD_INT 700
2071: ST_TO_ADDR
// maxTime := 1 1$00 ;
2072: LD_ADDR_VAR 0 8
2076: PUSH
2077: LD_INT 2100
2079: ST_TO_ADDR
// delayTime := 0 0$3 ;
2080: LD_ADDR_VAR 0 7
2084: PUSH
2085: LD_INT 105
2087: ST_TO_ADDR
// end ; 4 :
2088: GO 2134
2090: LD_INT 4
2092: DOUBLE
2093: EQUAL
2094: IFTRUE 2098
2096: GO 2133
2098: POP
// begin time := 0 0$15 ;
2099: LD_ADDR_VAR 0 4
2103: PUSH
2104: LD_INT 525
2106: ST_TO_ADDR
// normalTime := 0 0$15 ;
2107: LD_ADDR_VAR 0 6
2111: PUSH
2112: LD_INT 525
2114: ST_TO_ADDR
// maxTime := 0 0$55 ;
2115: LD_ADDR_VAR 0 8
2119: PUSH
2120: LD_INT 1925
2122: ST_TO_ADDR
// delayTime := 0 0$2 ;
2123: LD_ADDR_VAR 0 7
2127: PUSH
2128: LD_INT 70
2130: ST_TO_ADDR
// end ; end ;
2131: GO 2134
2133: POP
// tmp := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 ] ;
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 5
2147: PUSH
2148: LD_INT 4
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: ST_TO_ADDR
// areas := [ Center1 , Center2 ] ;
2157: LD_ADDR_VAR 0 5
2161: PUSH
2162: LD_INT 36
2164: PUSH
2165: LD_INT 35
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// for i := 1 to 8 do
2172: LD_ADDR_VAR 0 1
2176: PUSH
2177: DOUBLE
2178: LD_INT 1
2180: DEC
2181: ST_TO_ADDR
2182: LD_INT 8
2184: PUSH
2185: FOR_TO
2186: IFFALSE 2233
// begin if not mpSidePositions [ i ] then
2188: LD_EXP 9
2192: PUSH
2193: LD_VAR 0 1
2197: ARRAY
2198: NOT
2199: IFFALSE 2203
// continue ;
2201: GO 2185
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2203: LD_ADDR_VAR 0 5
2207: PUSH
2208: LD_VAR 0 5
2212: PUSH
2213: LD_VAR 0 3
2217: PUSH
2218: LD_EXP 9
2222: PUSH
2223: LD_VAR 0 1
2227: ARRAY
2228: ARRAY
2229: ADD
2230: ST_TO_ADDR
// end ;
2231: GO 2185
2233: POP
2234: POP
// x := 1 ;
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_INT 1
2242: ST_TO_ADDR
// repeat wait ( time ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL_OW 67
// x := Inc ( x ) ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: LD_VAR 0 2
2261: PPUSH
2262: CALL 49061 0 1
2266: ST_TO_ADDR
// if x > 5 then
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 5
2274: GREATER
2275: IFFALSE 2285
// x := 1 ;
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// for i in areas do
2285: LD_ADDR_VAR 0 1
2289: PUSH
2290: LD_VAR 0 5
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2335
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2298: LD_VAR 0 1
2302: PPUSH
2303: LD_INT 1
2305: PPUSH
2306: CALL_OW 287
2310: PUSH
2311: LD_INT 20
2313: LESS
2314: IFFALSE 2333
// begin CreateCratesArea ( x , i , true ) ;
2316: LD_VAR 0 2
2320: PPUSH
2321: LD_VAR 0 1
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: CALL_OW 55
// end ; end ;
2333: GO 2295
2335: POP
2336: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2337: LD_INT 37
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL_OW 287
2347: PUSH
2348: LD_INT 0
2350: EQUAL
2351: IFFALSE 2390
// begin for i := 1 to 3 do
2353: LD_ADDR_VAR 0 1
2357: PUSH
2358: DOUBLE
2359: LD_INT 1
2361: DEC
2362: ST_TO_ADDR
2363: LD_INT 3
2365: PUSH
2366: FOR_TO
2367: IFFALSE 2386
// CreateCratesArea ( x , CenterArea , true ) ;
2369: LD_VAR 0 2
2373: PPUSH
2374: LD_INT 37
2376: PPUSH
2377: LD_INT 1
2379: PPUSH
2380: CALL_OW 55
2384: GO 2366
2386: POP
2387: POP
// end else
2388: GO 2421
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2390: LD_INT 37
2392: PPUSH
2393: LD_INT 1
2395: PPUSH
2396: CALL_OW 287
2400: PUSH
2401: LD_INT 30
2403: LESS
2404: IFFALSE 2421
// CreateCratesArea ( x , CenterArea , true ) ;
2406: LD_VAR 0 2
2410: PPUSH
2411: LD_INT 37
2413: PPUSH
2414: LD_INT 1
2416: PPUSH
2417: CALL_OW 55
// time := time + delayTime ;
2421: LD_ADDR_VAR 0 4
2425: PUSH
2426: LD_VAR 0 4
2430: PUSH
2431: LD_VAR 0 7
2435: PLUS
2436: ST_TO_ADDR
// if time > maxTime then
2437: LD_VAR 0 4
2441: PUSH
2442: LD_VAR 0 8
2446: GREATER
2447: IFFALSE 2459
// time := normalTime ;
2449: LD_ADDR_VAR 0 4
2453: PUSH
2454: LD_VAR 0 6
2458: ST_TO_ADDR
// until false ;
2459: LD_INT 0
2461: IFFALSE 2243
// end ;
2463: PPOPN 8
2465: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , power , bonus ;
2466: LD_EXP 3
2470: IFFALSE 2745
2472: GO 2474
2474: DISABLE
2475: LD_INT 0
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
// begin treeVisited := [ ] ;
2481: LD_ADDR_EXP 4
2485: PUSH
2486: EMPTY
2487: ST_TO_ADDR
// power := 1 ;
2488: LD_ADDR_VAR 0 3
2492: PUSH
2493: LD_INT 1
2495: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2496: LD_INT 35
2498: PPUSH
2499: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2503: LD_OWVAR 1
2507: PUSH
2508: LD_INT 42000
2510: PUSH
2511: LD_EXP 3
2515: DIV
2516: PPUSH
2517: CALL_OW 574
2521: MOD
2522: PUSH
2523: LD_INT 0
2525: EQUAL
2526: IFFALSE 2543
// power := Inc ( power ) ;
2528: LD_ADDR_VAR 0 3
2532: PUSH
2533: LD_VAR 0 3
2537: PPUSH
2538: CALL 49061 0 1
2542: ST_TO_ADDR
// if power > 10 then
2543: LD_VAR 0 3
2547: PUSH
2548: LD_INT 10
2550: GREATER
2551: IFFALSE 2561
// power := 10 ;
2553: LD_ADDR_VAR 0 3
2557: PUSH
2558: LD_INT 10
2560: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2561: LD_ADDR_VAR 0 2
2565: PUSH
2566: LD_INT 95
2568: PUSH
2569: LD_INT 1
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 21
2578: PUSH
2579: LD_INT 1
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 3
2588: PUSH
2589: LD_INT 23
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: PUSH
2613: LD_EXP 4
2617: DIFF
2618: ST_TO_ADDR
// if tmp then
2619: LD_VAR 0 2
2623: IFFALSE 2741
// begin for i in tmp do
2625: LD_ADDR_VAR 0 1
2629: PUSH
2630: LD_VAR 0 2
2634: PUSH
2635: FOR_IN
2636: IFFALSE 2739
// begin treeVisited := Join ( treeVisited , i ) ;
2638: LD_ADDR_EXP 4
2642: PUSH
2643: LD_EXP 4
2647: PPUSH
2648: LD_VAR 0 1
2652: PPUSH
2653: CALL 47700 0 2
2657: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2658: LD_ADDR_VAR 0 4
2662: PUSH
2663: LD_VAR 0 1
2667: PPUSH
2668: LD_VAR 0 1
2672: PUSH
2673: LD_INT 4
2675: MOD
2676: PUSH
2677: LD_INT 1
2679: PLUS
2680: PPUSH
2681: CALL_OW 259
2685: PUSH
2686: LD_VAR 0 3
2690: PLUS
2691: ST_TO_ADDR
// if bonus > 10 then
2692: LD_VAR 0 4
2696: PUSH
2697: LD_INT 10
2699: GREATER
2700: IFFALSE 2710
// bonus := 10 ;
2702: LD_ADDR_VAR 0 4
2706: PUSH
2707: LD_INT 10
2709: ST_TO_ADDR
// SetSkill ( i , i mod 4 + 1 , bonus ) ;
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_VAR 0 1
2719: PUSH
2720: LD_INT 4
2722: MOD
2723: PUSH
2724: LD_INT 1
2726: PLUS
2727: PPUSH
2728: LD_VAR 0 4
2732: PPUSH
2733: CALL_OW 237
// end ;
2737: GO 2635
2739: POP
2740: POP
// end ; until false ;
2741: LD_INT 0
2743: IFFALSE 2496
// end ; end_of_file
2745: PPOPN 4
2747: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2748: LD_VAR 0 1
2752: PPUSH
2753: CALL 52953 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2757: LD_VAR 0 1
2761: PPUSH
2762: CALL 7817 0 1
// end ;
2766: PPOPN 1
2768: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: CALL 52970 0 1
// end ;
2778: PPOPN 1
2780: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2781: LD_VAR 0 1
2785: PPUSH
2786: CALL 8482 0 1
2790: PPOPN 1
2792: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL 53011 0 2
2807: PPOPN 2
2809: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2810: LD_VAR 0 1
2814: PPUSH
2815: LD_VAR 0 2
2819: PPUSH
2820: LD_VAR 0 3
2824: PPUSH
2825: CALL 8535 0 3
2829: PPOPN 3
2831: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2832: LD_INT 0
2834: PPUSH
2835: PPUSH
// disable ( mpActive ) ;
2836: LD_INT 100
2838: DISABLE_MARKED
// disable ( mpWin ) ;
2839: LD_INT 101
2841: DISABLE_MARKED
// disable ( mpLose ) ;
2842: LD_INT 102
2844: DISABLE_MARKED
// mpGameType := 0 ;
2845: LD_ADDR_EXP 5
2849: PUSH
2850: LD_INT 0
2852: ST_TO_ADDR
// mpGameSettings := [ ] ;
2853: LD_ADDR_EXP 8
2857: PUSH
2858: EMPTY
2859: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2860: LD_ADDR_EXP 6
2864: PUSH
2865: EMPTY
2866: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2867: LD_ADDR_EXP 7
2871: PUSH
2872: EMPTY
2873: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2874: LD_ADDR_EXP 31
2878: PUSH
2879: LD_INT 2
2881: PUSH
2882: LD_INT 2
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2889: LD_ADDR_EXP 14
2893: PUSH
2894: EMPTY
2895: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2896: LD_ADDR_EXP 15
2900: PUSH
2901: EMPTY
2902: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2903: LD_ADDR_EXP 43
2907: PUSH
2908: EMPTY
2909: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2910: LD_ADDR_EXP 44
2914: PUSH
2915: EMPTY
2916: ST_TO_ADDR
// mpDepots := [ ] ;
2917: LD_ADDR_EXP 16
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// mpBuildings := [ ] ;
2924: LD_ADDR_EXP 19
2928: PUSH
2929: EMPTY
2930: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2931: LD_ADDR_EXP 20
2935: PUSH
2936: EMPTY
2937: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2938: LD_ADDR_EXP 21
2942: PUSH
2943: EMPTY
2944: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2945: LD_ADDR_EXP 22
2949: PUSH
2950: EMPTY
2951: ST_TO_ADDR
// mpStartingResources := [ ] ;
2952: LD_ADDR_EXP 17
2956: PUSH
2957: EMPTY
2958: ST_TO_ADDR
// mpStartPos := [ ] ;
2959: LD_ADDR_EXP 23
2963: PUSH
2964: EMPTY
2965: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2966: LD_ADDR_EXP 24
2970: PUSH
2971: LD_INT 1
2973: NEG
2974: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2975: LD_ADDR_EXP 25
2979: PUSH
2980: EMPTY
2981: ST_TO_ADDR
// mpApemans := [ ] ;
2982: LD_ADDR_EXP 32
2986: PUSH
2987: EMPTY
2988: ST_TO_ADDR
// mpApemansArea := [ ] ;
2989: LD_ADDR_EXP 33
2993: PUSH
2994: EMPTY
2995: ST_TO_ADDR
// mpRespawn := [ ] ;
2996: LD_ADDR_EXP 35
3000: PUSH
3001: EMPTY
3002: ST_TO_ADDR
// mpKingArea := 0 ;
3003: LD_ADDR_EXP 36
3007: PUSH
3008: LD_INT 0
3010: ST_TO_ADDR
// mpPoints := [ ] ;
3011: LD_ADDR_EXP 37
3015: PUSH
3016: EMPTY
3017: ST_TO_ADDR
// mpVehicles := 0 ;
3018: LD_ADDR_EXP 38
3022: PUSH
3023: LD_INT 0
3025: ST_TO_ADDR
// mpShipments := 0 ;
3026: LD_ADDR_EXP 29
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3034: LD_ADDR_EXP 42
3038: PUSH
3039: EMPTY
3040: PUSH
3041: EMPTY
3042: PUSH
3043: EMPTY
3044: PUSH
3045: EMPTY
3046: PUSH
3047: EMPTY
3048: PUSH
3049: EMPTY
3050: PUSH
3051: EMPTY
3052: PUSH
3053: EMPTY
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3065: LD_ADDR_EXP 34
3069: PUSH
3070: EMPTY
3071: PUSH
3072: EMPTY
3073: PUSH
3074: EMPTY
3075: PUSH
3076: EMPTY
3077: PUSH
3078: EMPTY
3079: PUSH
3080: EMPTY
3081: PUSH
3082: EMPTY
3083: PUSH
3084: EMPTY
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: ST_TO_ADDR
// mpEmissions := 0 ;
3096: LD_ADDR_EXP 39
3100: PUSH
3101: LD_INT 0
3103: ST_TO_ADDR
// mpTeleports := 0 ;
3104: LD_ADDR_EXP 45
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// mpArtifacts := 0 ;
3112: LD_ADDR_EXP 46
3116: PUSH
3117: LD_INT 0
3119: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3120: LD_ADDR_EXP 27
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3128: LD_ADDR_EXP 26
3132: PUSH
3133: LD_INT 15
3135: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3136: LD_ADDR_EXP 40
3140: PUSH
3141: LD_INT 0
3143: ST_TO_ADDR
// mpGameActive := false ;
3144: LD_ADDR_EXP 41
3148: PUSH
3149: LD_INT 0
3151: ST_TO_ADDR
// mpBlockRespThread := false ;
3152: LD_ADDR_EXP 47
3156: PUSH
3157: LD_INT 0
3159: ST_TO_ADDR
// for i := 1 to 32 do
3160: LD_ADDR_VAR 0 2
3164: PUSH
3165: DOUBLE
3166: LD_INT 1
3168: DEC
3169: ST_TO_ADDR
3170: LD_INT 32
3172: PUSH
3173: FOR_TO
3174: IFFALSE 3201
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3176: LD_ADDR_EXP 8
3180: PUSH
3181: LD_EXP 8
3185: PPUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_INT 0
3193: PPUSH
3194: CALL_OW 1
3198: ST_TO_ADDR
3199: GO 3173
3201: POP
3202: POP
// end ;
3203: LD_VAR 0 1
3207: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3208: LD_INT 0
3210: PPUSH
3211: PPUSH
3212: PPUSH
3213: PPUSH
3214: PPUSH
3215: PPUSH
3216: PPUSH
3217: PPUSH
3218: PPUSH
3219: PPUSH
3220: PPUSH
3221: PPUSH
3222: PPUSH
3223: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
3224: LD_ADDR_VAR 0 14
3228: PUSH
3229: LD_INT 1
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 3
3237: PUSH
3238: LD_INT 5
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: ST_TO_ADDR
// for i in gameTypes do
3247: LD_ADDR_VAR 0 2
3251: PUSH
3252: LD_VAR 0 14
3256: PUSH
3257: FOR_IN
3258: IFFALSE 3267
// disable ( i ) ;
3260: LD_VAR 0 2
3264: DISABLE_MARKED
3265: GO 3257
3267: POP
3268: POP
// if Multiplayer then
3269: LD_OWVAR 4
3273: IFFALSE 3457
// begin mpGameType := mp_game_type ;
3275: LD_ADDR_EXP 5
3279: PUSH
3280: LD_OWVAR 6
3284: ST_TO_ADDR
// your_side := mp_player_side ;
3285: LD_ADDR_OWVAR 2
3289: PUSH
3290: LD_OWVAR 7
3294: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3295: LD_ADDR_EXP 9
3299: PUSH
3300: LD_OWVAR 17
3304: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3305: LD_ADDR_EXP 10
3309: PUSH
3310: LD_OWVAR 15
3314: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3315: LD_ADDR_EXP 11
3319: PUSH
3320: LD_OWVAR 16
3324: ST_TO_ADDR
// mpTeams := mp_teams ;
3325: LD_ADDR_EXP 12
3329: PUSH
3330: LD_OWVAR 12
3334: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_EXP 6
3349: PPUSH
3350: CALL 12091 0 1
3354: PUSH
3355: FOR_TO
3356: IFFALSE 3432
// begin setting := mpGameSettingsKeys [ i ] ;
3358: LD_ADDR_VAR 0 12
3362: PUSH
3363: LD_EXP 6
3367: PUSH
3368: LD_VAR 0 2
3372: ARRAY
3373: ST_TO_ADDR
// if setting then
3374: LD_VAR 0 12
3378: IFFALSE 3430
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3380: LD_ADDR_EXP 8
3384: PUSH
3385: LD_EXP 8
3389: PPUSH
3390: LD_VAR 0 2
3394: PPUSH
3395: LD_EXP 7
3399: PUSH
3400: LD_VAR 0 2
3404: ARRAY
3405: PUSH
3406: LD_VAR 0 2
3410: PUSH
3411: LD_INT 1
3413: MINUS
3414: PPUSH
3415: CALL_OW 426
3419: PUSH
3420: LD_INT 1
3422: PLUS
3423: ARRAY
3424: PPUSH
3425: CALL_OW 1
3429: ST_TO_ADDR
// end ;
3430: GO 3355
3432: POP
3433: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3434: LD_ADDR_EXP 13
3438: PUSH
3439: LD_EXP 10
3443: PUSH
3444: LD_INT 0
3446: PUSH
3447: EMPTY
3448: LIST
3449: DIFF
3450: PUSH
3451: LD_INT 1
3453: GREATER
3454: ST_TO_ADDR
// end else
3455: GO 3457
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3457: LD_EXP 5
3461: PPUSH
3462: CALL 830 0 1
// if Count ( mpMarkedAreas ) then
3466: LD_EXP 20
3470: PPUSH
3471: CALL 12091 0 1
3475: IFFALSE 3506
// begin for i in mpMarkedAreas do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_EXP 20
3486: PUSH
3487: FOR_IN
3488: IFFALSE 3504
// SetAreaMapShow ( i , 0 ) ;
3490: LD_VAR 0 2
3494: PPUSH
3495: LD_INT 0
3497: PPUSH
3498: CALL_OW 424
3502: GO 3487
3504: POP
3505: POP
// end ; for i := 1 to 8 do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: DOUBLE
3512: LD_INT 1
3514: DEC
3515: ST_TO_ADDR
3516: LD_INT 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 4784
// begin if not mpSidePositions [ i ] then
3522: LD_EXP 9
3526: PUSH
3527: LD_VAR 0 2
3531: ARRAY
3532: NOT
3533: IFFALSE 3537
// continue ;
3535: GO 3519
// side := i ;
3537: LD_ADDR_VAR 0 7
3541: PUSH
3542: LD_VAR 0 2
3546: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3547: LD_ADDR_VAR 0 9
3551: PUSH
3552: LD_EXP 11
3556: PUSH
3557: LD_VAR 0 2
3561: ARRAY
3562: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3563: LD_ADDR_VAR 0 8
3567: PUSH
3568: LD_EXP 9
3572: PUSH
3573: LD_VAR 0 2
3577: ARRAY
3578: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3579: LD_EXP 14
3583: PPUSH
3584: CALL 12091 0 1
3588: IFFALSE 3665
// begin for j in mpOilDeposits [ pos ] do
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_EXP 14
3599: PUSH
3600: LD_VAR 0 8
3604: ARRAY
3605: PUSH
3606: FOR_IN
3607: IFFALSE 3663
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3609: LD_VAR 0 3
3613: PUSH
3614: LD_INT 1
3616: ARRAY
3617: PPUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_INT 2
3625: ARRAY
3626: PPUSH
3627: LD_INT 2
3629: PPUSH
3630: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3634: LD_VAR 0 3
3638: PUSH
3639: LD_INT 1
3641: ARRAY
3642: PPUSH
3643: LD_VAR 0 3
3647: PUSH
3648: LD_INT 2
3650: ARRAY
3651: PPUSH
3652: LD_VAR 0 7
3656: PPUSH
3657: CALL_OW 441
// end ;
3661: GO 3606
3663: POP
3664: POP
// end ; if Count ( mpSibDeposits ) then
3665: LD_EXP 15
3669: PPUSH
3670: CALL 12091 0 1
3674: IFFALSE 3751
// begin for j in mpSibDeposits [ pos ] do
3676: LD_ADDR_VAR 0 3
3680: PUSH
3681: LD_EXP 15
3685: PUSH
3686: LD_VAR 0 8
3690: ARRAY
3691: PUSH
3692: FOR_IN
3693: IFFALSE 3749
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3695: LD_VAR 0 3
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 2
3711: ARRAY
3712: PPUSH
3713: LD_INT 3
3715: PPUSH
3716: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3720: LD_VAR 0 3
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: LD_VAR 0 3
3733: PUSH
3734: LD_INT 2
3736: ARRAY
3737: PPUSH
3738: LD_VAR 0 7
3742: PPUSH
3743: CALL_OW 441
// end ;
3747: GO 3692
3749: POP
3750: POP
// end ; InitBc ;
3751: CALL_OW 21
// InitUc ;
3755: CALL_OW 18
// uc_side := side ;
3759: LD_ADDR_OWVAR 20
3763: PUSH
3764: LD_VAR 0 7
3768: ST_TO_ADDR
// uc_nation := nation ;
3769: LD_ADDR_OWVAR 21
3773: PUSH
3774: LD_VAR 0 9
3778: ST_TO_ADDR
// if Count ( mpDepots ) then
3779: LD_EXP 16
3783: PPUSH
3784: CALL 12091 0 1
3788: IFFALSE 3972
// begin if mpGameType = GameTypeSurvival then
3790: LD_EXP 5
3794: PUSH
3795: LD_INT 2
3797: EQUAL
3798: IFFALSE 3818
// begin bc_level := 10 ;
3800: LD_ADDR_OWVAR 43
3804: PUSH
3805: LD_INT 10
3807: ST_TO_ADDR
// bc_type := b_warehouse ;
3808: LD_ADDR_OWVAR 42
3812: PUSH
3813: LD_INT 1
3815: ST_TO_ADDR
// end else
3816: GO 3834
// begin bc_level := 0 ;
3818: LD_ADDR_OWVAR 43
3822: PUSH
3823: LD_INT 0
3825: ST_TO_ADDR
// bc_type := b_depot ;
3826: LD_ADDR_OWVAR 42
3830: PUSH
3831: LD_INT 0
3833: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3834: LD_ADDR_VAR 0 4
3838: PUSH
3839: LD_EXP 16
3843: PUSH
3844: LD_VAR 0 8
3848: ARRAY
3849: PUSH
3850: LD_INT 1
3852: ARRAY
3853: PPUSH
3854: LD_EXP 16
3858: PUSH
3859: LD_VAR 0 8
3863: ARRAY
3864: PUSH
3865: LD_INT 2
3867: ARRAY
3868: PPUSH
3869: LD_EXP 16
3873: PUSH
3874: LD_VAR 0 8
3878: ARRAY
3879: PUSH
3880: LD_INT 3
3882: ARRAY
3883: PPUSH
3884: CALL_OW 47
3888: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3889: LD_VAR 0 4
3893: PPUSH
3894: LD_STRING @
3896: PUSH
3897: LD_VAR 0 7
3901: STR
3902: PPUSH
3903: CALL_OW 500
// if Count ( mpStartingResources ) then
3907: LD_EXP 17
3911: PPUSH
3912: CALL 12091 0 1
3916: IFFALSE 3970
// begin for j := 1 to mpStartingResources do
3918: LD_ADDR_VAR 0 3
3922: PUSH
3923: DOUBLE
3924: LD_INT 1
3926: DEC
3927: ST_TO_ADDR
3928: LD_EXP 17
3932: PUSH
3933: FOR_TO
3934: IFFALSE 3968
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: CALL_OW 274
3945: PPUSH
3946: LD_VAR 0 3
3950: PPUSH
3951: LD_EXP 17
3955: PUSH
3956: LD_VAR 0 3
3960: ARRAY
3961: PPUSH
3962: CALL_OW 277
3966: GO 3933
3968: POP
3969: POP
// end ; end else
3970: GO 4119
// if Count ( mpStartingResources ) then
3972: LD_EXP 17
3976: PPUSH
3977: CALL 12091 0 1
3981: IFFALSE 4119
// begin for j := 1 to mpStartingResources do
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_EXP 17
3997: PUSH
3998: FOR_TO
3999: IFFALSE 4117
// begin resources := mpStartingResources [ j ] ;
4001: LD_ADDR_VAR 0 13
4005: PUSH
4006: LD_EXP 17
4010: PUSH
4011: LD_VAR 0 3
4015: ARRAY
4016: ST_TO_ADDR
// repeat if resources >= 50 then
4017: LD_VAR 0 13
4021: PUSH
4022: LD_INT 50
4024: GREATEREQUAL
4025: IFFALSE 4071
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
4027: LD_VAR 0 3
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: LD_VAR 0 5
4039: PPUSH
4040: LD_VAR 0 6
4044: PPUSH
4045: LD_INT 4
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 60
// resources := resources - 50 ;
4055: LD_ADDR_VAR 0 13
4059: PUSH
4060: LD_VAR 0 13
4064: PUSH
4065: LD_INT 50
4067: MINUS
4068: ST_TO_ADDR
// end else
4069: GO 4105
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
4071: LD_VAR 0 3
4075: PPUSH
4076: LD_VAR 0 13
4080: PUSH
4081: LD_INT 10
4083: DIV
4084: PPUSH
4085: LD_VAR 0 5
4089: PPUSH
4090: LD_VAR 0 6
4094: PPUSH
4095: LD_INT 4
4097: PPUSH
4098: LD_INT 0
4100: PPUSH
4101: CALL_OW 60
// until resources <= 0 ;
4105: LD_VAR 0 13
4109: PUSH
4110: LD_INT 0
4112: LESSEQUAL
4113: IFFALSE 4017
// end ;
4115: GO 3998
4117: POP
4118: POP
// end ; if Count ( mpBuildings ) then
4119: LD_EXP 19
4123: PPUSH
4124: CALL 12091 0 1
4128: IFFALSE 4206
// begin for j in mpBuildings [ pos ] do
4130: LD_ADDR_VAR 0 3
4134: PUSH
4135: LD_EXP 19
4139: PUSH
4140: LD_VAR 0 8
4144: ARRAY
4145: PUSH
4146: FOR_IN
4147: IFFALSE 4204
// begin bc_level := 0 ;
4149: LD_ADDR_OWVAR 43
4153: PUSH
4154: LD_INT 0
4156: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_VAR 0 3
4166: PUSH
4167: LD_INT 1
4169: ARRAY
4170: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4171: LD_VAR 0 3
4175: PUSH
4176: LD_INT 2
4178: ARRAY
4179: PPUSH
4180: LD_VAR 0 3
4184: PUSH
4185: LD_INT 3
4187: ARRAY
4188: PPUSH
4189: LD_VAR 0 3
4193: PUSH
4194: LD_INT 4
4196: ARRAY
4197: PPUSH
4198: CALL_OW 47
// end ;
4202: GO 4146
4204: POP
4205: POP
// end ; if mpBattleFlag > - 1 then
4206: LD_EXP 24
4210: PUSH
4211: LD_INT 1
4213: NEG
4214: GREATER
4215: IFFALSE 4374
// begin x := mpStartPos [ pos ] [ 1 ] ;
4217: LD_ADDR_VAR 0 5
4221: PUSH
4222: LD_EXP 23
4226: PUSH
4227: LD_VAR 0 8
4231: ARRAY
4232: PUSH
4233: LD_INT 1
4235: ARRAY
4236: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4237: LD_ADDR_VAR 0 6
4241: PUSH
4242: LD_EXP 23
4246: PUSH
4247: LD_VAR 0 8
4251: ARRAY
4252: PUSH
4253: LD_INT 2
4255: ARRAY
4256: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4257: LD_VAR 0 5
4261: PPUSH
4262: LD_VAR 0 6
4266: PPUSH
4267: LD_INT 12
4269: PPUSH
4270: LD_INT 2
4272: PPUSH
4273: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4277: LD_ADDR_EXP 25
4281: PUSH
4282: LD_EXP 25
4286: PPUSH
4287: LD_VAR 0 7
4291: PPUSH
4292: LD_VAR 0 7
4296: PPUSH
4297: LD_VAR 0 5
4301: PPUSH
4302: LD_VAR 0 6
4306: PPUSH
4307: LD_INT 1
4309: PUSH
4310: LD_INT 100
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 2
4319: PUSH
4320: LD_INT 70
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: LD_INT 3
4329: PUSH
4330: LD_INT 40
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: PUSH
4337: LD_INT 10
4339: PUSH
4340: LD_INT 25
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 20
4349: PUSH
4350: LD_INT 100
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 418
4368: PPUSH
4369: CALL_OW 1
4373: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4374: LD_EXP 28
4378: PUSH
4379: LD_INT 20
4381: PPUSH
4382: LD_VAR 0 7
4386: PPUSH
4387: CALL_OW 321
4391: PUSH
4392: LD_INT 1
4394: EQUAL
4395: AND
4396: IFFALSE 4413
// SetTech ( tech_SibDet , side , state_researched ) ;
4398: LD_INT 20
4400: PPUSH
4401: LD_VAR 0 7
4405: PPUSH
4406: LD_INT 2
4408: PPUSH
4409: CALL_OW 322
// if not mpArtifacts then
4413: LD_EXP 46
4417: NOT
4418: IFFALSE 4435
// SetTech ( tech_artifact , side , state_disabled ) ;
4420: LD_INT 24
4422: PPUSH
4423: LD_VAR 0 7
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 322
// if mpSibBomb = 1 then
4435: LD_EXP 30
4439: PUSH
4440: LD_INT 1
4442: EQUAL
4443: IFFALSE 4462
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4445: LD_INT 25
4447: PPUSH
4448: LD_VAR 0 7
4452: PPUSH
4453: LD_INT 1
4455: PPUSH
4456: CALL_OW 322
// end else
4460: GO 4477
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4462: LD_INT 25
4464: PPUSH
4465: LD_VAR 0 7
4469: PPUSH
4470: LD_INT 0
4472: PPUSH
4473: CALL_OW 322
// end ; if mpVehicles then
4477: LD_EXP 38
4481: IFFALSE 4580
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4483: LD_ADDR_VAR 0 3
4487: PUSH
4488: LD_VAR 0 7
4492: PPUSH
4493: LD_VAR 0 9
4497: PPUSH
4498: LD_EXP 38
4502: PPUSH
4503: CALL 5694 0 3
4507: PUSH
4508: FOR_IN
4509: IFFALSE 4578
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4511: LD_VAR 0 3
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: LD_INT 5
4521: PPUSH
4522: CALL_OW 12
4526: PPUSH
4527: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_EXP 23
4540: PUSH
4541: LD_VAR 0 8
4545: ARRAY
4546: PUSH
4547: LD_INT 1
4549: ARRAY
4550: PPUSH
4551: LD_EXP 23
4555: PUSH
4556: LD_VAR 0 8
4560: ARRAY
4561: PUSH
4562: LD_INT 2
4564: ARRAY
4565: PPUSH
4566: LD_INT 12
4568: PPUSH
4569: LD_INT 0
4571: PPUSH
4572: CALL_OW 50
// end ;
4576: GO 4508
4578: POP
4579: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4580: LD_ADDR_VAR 0 11
4584: PUSH
4585: LD_VAR 0 7
4589: PPUSH
4590: LD_VAR 0 9
4594: PPUSH
4595: LD_EXP 26
4599: PPUSH
4600: LD_EXP 27
4604: PPUSH
4605: CALL 5196 0 4
4609: ST_TO_ADDR
// for j in team do
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_VAR 0 11
4619: PUSH
4620: FOR_IN
4621: IFFALSE 4670
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4623: LD_VAR 0 3
4627: PPUSH
4628: LD_EXP 23
4632: PUSH
4633: LD_VAR 0 8
4637: ARRAY
4638: PUSH
4639: LD_INT 1
4641: ARRAY
4642: PPUSH
4643: LD_EXP 23
4647: PUSH
4648: LD_VAR 0 8
4652: ARRAY
4653: PUSH
4654: LD_INT 2
4656: ARRAY
4657: PPUSH
4658: LD_INT 12
4660: PPUSH
4661: LD_INT 0
4663: PPUSH
4664: CALL_OW 50
4668: GO 4620
4670: POP
4671: POP
// if mpApemans then
4672: LD_EXP 32
4676: IFFALSE 4782
// begin for j := 1 to mpApemans do
4678: LD_ADDR_VAR 0 3
4682: PUSH
4683: DOUBLE
4684: LD_INT 1
4686: DEC
4687: ST_TO_ADDR
4688: LD_EXP 32
4692: PUSH
4693: FOR_TO
4694: IFFALSE 4780
// begin PrepareApeman ( - 5 ) ;
4696: LD_INT 5
4698: NEG
4699: PPUSH
4700: CALL 43948 0 1
// ape := CreateHuman ;
4704: LD_ADDR_VAR 0 10
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4714: LD_ADDR_EXP 34
4718: PUSH
4719: LD_EXP 34
4723: PPUSH
4724: LD_VAR 0 8
4728: PPUSH
4729: LD_EXP 34
4733: PUSH
4734: LD_VAR 0 8
4738: ARRAY
4739: PPUSH
4740: LD_VAR 0 10
4744: PPUSH
4745: CALL 47700 0 2
4749: PPUSH
4750: CALL_OW 1
4754: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4755: LD_VAR 0 10
4759: PPUSH
4760: LD_EXP 33
4764: PUSH
4765: LD_VAR 0 8
4769: ARRAY
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// end ;
4778: GO 4693
4780: POP
4781: POP
// end ; end ;
4782: GO 3519
4784: POP
4785: POP
// if not mpTeamGame then
4786: LD_EXP 13
4790: NOT
4791: IFFALSE 4889
// begin for i := 1 to 8 do
4793: LD_ADDR_VAR 0 2
4797: PUSH
4798: DOUBLE
4799: LD_INT 1
4801: DEC
4802: ST_TO_ADDR
4803: LD_INT 8
4805: PUSH
4806: FOR_TO
4807: IFFALSE 4885
// for j := 1 to 8 do
4809: LD_ADDR_VAR 0 3
4813: PUSH
4814: DOUBLE
4815: LD_INT 1
4817: DEC
4818: ST_TO_ADDR
4819: LD_INT 8
4821: PUSH
4822: FOR_TO
4823: IFFALSE 4881
// if i <> j then
4825: LD_VAR 0 2
4829: PUSH
4830: LD_VAR 0 3
4834: NONEQUAL
4835: IFFALSE 4859
// SetAttitude ( i , j , att_neutral , true ) else
4837: LD_VAR 0 2
4841: PPUSH
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 0
4849: PPUSH
4850: LD_INT 1
4852: PPUSH
4853: CALL_OW 80
4857: GO 4879
// SetAttitude ( i , j , att_friend , true ) ;
4859: LD_VAR 0 2
4863: PPUSH
4864: LD_VAR 0 3
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: LD_INT 1
4874: PPUSH
4875: CALL_OW 80
4879: GO 4822
4881: POP
4882: POP
4883: GO 4806
4885: POP
4886: POP
// end else
4887: GO 5064
// begin if mpSharedVision then
4889: LD_EXP 18
4893: IFFALSE 4958
// begin for i in mpTeams do
4895: LD_ADDR_VAR 0 2
4899: PUSH
4900: LD_EXP 12
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4956
// for j := 2 to i do
4908: LD_ADDR_VAR 0 3
4912: PUSH
4913: DOUBLE
4914: LD_INT 2
4916: DEC
4917: ST_TO_ADDR
4918: LD_VAR 0 2
4922: PUSH
4923: FOR_TO
4924: IFFALSE 4952
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4926: LD_VAR 0 2
4930: PUSH
4931: LD_VAR 0 3
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 2
4941: PUSH
4942: LD_INT 1
4944: ARRAY
4945: PPUSH
4946: CALL_OW 343
4950: GO 4923
4952: POP
4953: POP
4954: GO 4905
4956: POP
4957: POP
// end ; for i := 1 to 8 do
4958: LD_ADDR_VAR 0 2
4962: PUSH
4963: DOUBLE
4964: LD_INT 1
4966: DEC
4967: ST_TO_ADDR
4968: LD_INT 8
4970: PUSH
4971: FOR_TO
4972: IFFALSE 5062
// for j := 1 to 8 do
4974: LD_ADDR_VAR 0 3
4978: PUSH
4979: DOUBLE
4980: LD_INT 1
4982: DEC
4983: ST_TO_ADDR
4984: LD_INT 8
4986: PUSH
4987: FOR_TO
4988: IFFALSE 5058
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4990: LD_EXP 10
4994: PUSH
4995: LD_VAR 0 2
4999: ARRAY
5000: PUSH
5001: LD_EXP 10
5005: PUSH
5006: LD_VAR 0 3
5010: ARRAY
5011: EQUAL
5012: IFFALSE 5036
// SetAttitude ( i , j , att_friend , true ) else
5014: LD_VAR 0 2
5018: PPUSH
5019: LD_VAR 0 3
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: LD_INT 1
5029: PPUSH
5030: CALL_OW 80
5034: GO 5056
// SetAttitude ( i , j , att_enemy , true ) ;
5036: LD_VAR 0 2
5040: PPUSH
5041: LD_VAR 0 3
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: LD_INT 1
5051: PPUSH
5052: CALL_OW 80
5056: GO 4987
5058: POP
5059: POP
5060: GO 4971
5062: POP
5063: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5064: LD_ADDR_OWVAR 71
5068: PUSH
5069: LD_EXP 11
5073: PUSH
5074: LD_OWVAR 2
5078: ARRAY
5079: ST_TO_ADDR
// if IAmSpec then
5080: CALL_OW 531
5084: IFFALSE 5125
// begin FogOff ( true ) ;
5086: LD_INT 1
5088: PPUSH
5089: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5093: LD_EXP 31
5097: PUSH
5098: LD_INT 1
5100: ARRAY
5101: PUSH
5102: LD_INT 2
5104: DIV
5105: PPUSH
5106: LD_EXP 31
5110: PUSH
5111: LD_INT 2
5113: ARRAY
5114: PUSH
5115: LD_INT 2
5117: DIV
5118: PPUSH
5119: CALL_OW 86
// end else
5123: GO 5171
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5125: LD_EXP 23
5129: PUSH
5130: LD_EXP 9
5134: PUSH
5135: LD_OWVAR 2
5139: ARRAY
5140: ARRAY
5141: PUSH
5142: LD_INT 1
5144: ARRAY
5145: PPUSH
5146: LD_EXP 23
5150: PUSH
5151: LD_EXP 9
5155: PUSH
5156: LD_OWVAR 2
5160: ARRAY
5161: ARRAY
5162: PUSH
5163: LD_INT 2
5165: ARRAY
5166: PPUSH
5167: CALL_OW 86
// end ; BeginBuildUp ;
5171: CALL 6172 0 0
// enable ( mpActive ) ;
5175: LD_INT 100
5177: ENABLE_MARKED
// enable ( mpGameType ) ;
5178: LD_EXP 5
5182: ENABLE_MARKED
// mpGameActive := true ;
5183: LD_ADDR_EXP 41
5187: PUSH
5188: LD_INT 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 1
5195: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
5200: PPUSH
5201: PPUSH
// result := [ ] ;
5202: LD_ADDR_VAR 0 5
5206: PUSH
5207: EMPTY
5208: ST_TO_ADDR
// class := class_soldier ;
5209: LD_ADDR_VAR 0 8
5213: PUSH
5214: LD_INT 1
5216: ST_TO_ADDR
// uc_side := side ;
5217: LD_ADDR_OWVAR 20
5221: PUSH
5222: LD_VAR 0 1
5226: ST_TO_ADDR
// uc_nation := nation ;
5227: LD_ADDR_OWVAR 21
5231: PUSH
5232: LD_VAR 0 2
5236: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5237: LD_ADDR_OWVAR 26
5241: PUSH
5242: LD_OWVAR 19
5246: PUSH
5247: LD_VAR 0 1
5251: ARRAY
5252: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5253: LD_INT 1
5255: PPUSH
5256: LD_INT 2
5258: PPUSH
5259: CALL_OW 12
5263: PPUSH
5264: LD_VAR 0 8
5268: PPUSH
5269: LD_VAR 0 4
5273: PUSH
5274: LD_INT 2
5276: PLUS
5277: PPUSH
5278: CALL_OW 380
// hc_importance := 105 ;
5282: LD_ADDR_OWVAR 32
5286: PUSH
5287: LD_INT 105
5289: ST_TO_ADDR
// if Multiplayer then
5290: LD_OWVAR 4
5294: IFFALSE 5334
// begin hc_gallery := MULTIAVATARS ;
5296: LD_ADDR_OWVAR 33
5300: PUSH
5301: LD_STRING MULTIAVATARS
5303: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5304: LD_ADDR_OWVAR 34
5308: PUSH
5309: LD_VAR 0 1
5313: PPUSH
5314: CALL_OW 525
5318: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5319: LD_ADDR_OWVAR 27
5323: PUSH
5324: LD_VAR 0 1
5328: PPUSH
5329: CALL_OW 526
5333: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5334: LD_ADDR_VAR 0 5
5338: PUSH
5339: LD_VAR 0 5
5343: PPUSH
5344: CALL_OW 44
5348: PPUSH
5349: CALL 47700 0 2
5353: ST_TO_ADDR
// if mpTeamPreset then
5354: LD_LOC 1
5358: IFFALSE 5454
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5360: LD_LOC 1
5364: PUSH
5365: LD_INT 1
5367: ARRAY
5368: PPUSH
5369: LD_VAR 0 5
5373: PUSH
5374: LD_VAR 0 5
5378: ARRAY
5379: PPUSH
5380: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5384: LD_VAR 0 5
5388: PUSH
5389: LD_VAR 0 5
5393: ARRAY
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_LOC 1
5402: PUSH
5403: LD_INT 1
5405: ARRAY
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: CALL_OW 260
5414: PPUSH
5415: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5419: LD_VAR 0 5
5423: PUSH
5424: LD_VAR 0 5
5428: ARRAY
5429: PPUSH
5430: LD_INT 2
5432: PPUSH
5433: LD_LOC 1
5437: PUSH
5438: LD_INT 1
5440: ARRAY
5441: PPUSH
5442: LD_INT 2
5444: PPUSH
5445: CALL_OW 260
5449: PPUSH
5450: CALL_OW 239
// end ; InitHc_All ( ) ;
5454: CALL_OW 584
// class := 2 ;
5458: LD_ADDR_VAR 0 8
5462: PUSH
5463: LD_INT 2
5465: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5466: LD_ADDR_VAR 0 6
5470: PUSH
5471: DOUBLE
5472: LD_INT 1
5474: DEC
5475: ST_TO_ADDR
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 1
5483: MINUS
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5670
// begin PrepareHuman ( false , class , skill ) ;
5488: LD_INT 0
5490: PPUSH
5491: LD_VAR 0 8
5495: PPUSH
5496: LD_VAR 0 4
5500: PPUSH
5501: CALL_OW 380
// un := CreateHuman ;
5505: LD_ADDR_VAR 0 7
5509: PUSH
5510: CALL_OW 44
5514: ST_TO_ADDR
// result := Join ( result , un ) ;
5515: LD_ADDR_VAR 0 5
5519: PUSH
5520: LD_VAR 0 5
5524: PPUSH
5525: LD_VAR 0 7
5529: PPUSH
5530: CALL 47700 0 2
5534: ST_TO_ADDR
// if mpTeamPreset then
5535: LD_LOC 1
5539: IFFALSE 5635
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5541: LD_LOC 1
5545: PUSH
5546: LD_VAR 0 6
5550: PUSH
5551: LD_INT 1
5553: PLUS
5554: ARRAY
5555: PPUSH
5556: LD_VAR 0 7
5560: PPUSH
5561: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5565: LD_VAR 0 7
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_LOC 1
5577: PUSH
5578: LD_VAR 0 6
5582: PUSH
5583: LD_INT 1
5585: PLUS
5586: ARRAY
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: CALL_OW 260
5595: PPUSH
5596: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5600: LD_VAR 0 7
5604: PPUSH
5605: LD_INT 2
5607: PPUSH
5608: LD_LOC 1
5612: PUSH
5613: LD_VAR 0 6
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: ARRAY
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 260
5630: PPUSH
5631: CALL_OW 239
// end ; class := Inc ( class ) ;
5635: LD_ADDR_VAR 0 8
5639: PUSH
5640: LD_VAR 0 8
5644: PPUSH
5645: CALL 49061 0 1
5649: ST_TO_ADDR
// if class = 5 then
5650: LD_VAR 0 8
5654: PUSH
5655: LD_INT 5
5657: EQUAL
5658: IFFALSE 5668
// class := 1 ;
5660: LD_ADDR_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: ST_TO_ADDR
// end ;
5668: GO 5485
5670: POP
5671: POP
// if not mpTeamPreset then
5672: LD_LOC 1
5676: NOT
5677: IFFALSE 5689
// mpTeamPreset := result ;
5679: LD_ADDR_LOC 1
5683: PUSH
5684: LD_VAR 0 5
5688: ST_TO_ADDR
// end ;
5689: LD_VAR 0 5
5693: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5694: LD_INT 0
5696: PPUSH
5697: PPUSH
// result := [ ] ;
5698: LD_ADDR_VAR 0 4
5702: PUSH
5703: EMPTY
5704: ST_TO_ADDR
// if not vehicles then
5705: LD_VAR 0 3
5709: NOT
5710: IFFALSE 5714
// exit ;
5712: GO 5873
// for i := 1 to vehicles [ nation ] do
5714: LD_ADDR_VAR 0 5
5718: PUSH
5719: DOUBLE
5720: LD_INT 1
5722: DEC
5723: ST_TO_ADDR
5724: LD_VAR 0 3
5728: PUSH
5729: LD_VAR 0 2
5733: ARRAY
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5871
// begin uc_side := side ;
5738: LD_ADDR_OWVAR 20
5742: PUSH
5743: LD_VAR 0 1
5747: ST_TO_ADDR
// uc_nation := nation ;
5748: LD_ADDR_OWVAR 21
5752: PUSH
5753: LD_VAR 0 2
5757: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5758: LD_VAR 0 3
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_VAR 0 5
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: LD_VAR 0 3
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: LD_VAR 0 5
5794: ARRAY
5795: PUSH
5796: LD_INT 2
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 3
5804: PUSH
5805: LD_VAR 0 2
5809: ARRAY
5810: PUSH
5811: LD_VAR 0 5
5815: ARRAY
5816: PUSH
5817: LD_INT 3
5819: ARRAY
5820: PPUSH
5821: LD_VAR 0 3
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: ARRAY
5837: PUSH
5838: LD_INT 4
5840: ARRAY
5841: PPUSH
5842: LD_INT 80
5844: PPUSH
5845: CALL 14829 0 5
// result := Join ( result , CreateVehicle ) ;
5849: LD_ADDR_VAR 0 4
5853: PUSH
5854: LD_VAR 0 4
5858: PPUSH
5859: CALL_OW 45
5863: PPUSH
5864: CALL 47700 0 2
5868: ST_TO_ADDR
// end ;
5869: GO 5735
5871: POP
5872: POP
// end ;
5873: LD_VAR 0 4
5877: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5878: LD_INT 0
5880: PPUSH
5881: PPUSH
// for i in mpBattleFlags do
5882: LD_ADDR_VAR 0 3
5886: PUSH
5887: LD_EXP 25
5891: PUSH
5892: FOR_IN
5893: IFFALSE 5970
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5895: LD_VAR 0 3
5899: PPUSH
5900: LD_INT 1
5902: PUSH
5903: LD_VAR 0 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 2
5914: PUSH
5915: LD_VAR 0 1
5919: PUSH
5920: LD_REAL  7.00000000000000E-0001
5923: MUL
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PUSH
5929: LD_INT 3
5931: PUSH
5932: LD_VAR 0 1
5936: PUSH
5937: LD_REAL  4.00000000000000E-0001
5940: MUL
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 20
5948: PUSH
5949: LD_VAR 0 1
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: PPUSH
5964: CALL_OW 423
5968: GO 5892
5970: POP
5971: POP
// end ;
5972: LD_VAR 0 2
5976: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5977: LD_INT 100
5979: IFFALSE 6074
5981: GO 5983
5983: DISABLE
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
// begin if mpBattleFlag <= 0 then
5988: LD_EXP 24
5992: PUSH
5993: LD_INT 0
5995: LESSEQUAL
5996: IFFALSE 6000
// exit ;
5998: GO 6074
// strength := 100 ;
6000: LD_ADDR_VAR 0 2
6004: PUSH
6005: LD_INT 100
6007: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6008: LD_EXP 24
6012: PPUSH
6013: CALL_OW 67
// strength := Dec ( strength ) ;
6017: LD_ADDR_VAR 0 2
6021: PUSH
6022: LD_VAR 0 2
6026: PPUSH
6027: CALL 49083 0 1
6031: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6032: LD_VAR 0 2
6036: PPUSH
6037: CALL 5878 0 1
// until not strength ;
6041: LD_VAR 0 2
6045: NOT
6046: IFFALSE 6008
// for i in mpBattleFlags do
6048: LD_ADDR_VAR 0 1
6052: PUSH
6053: LD_EXP 25
6057: PUSH
6058: FOR_IN
6059: IFFALSE 6072
// KillBattleFlag ( i ) ;
6061: LD_VAR 0 1
6065: PPUSH
6066: CALL_OW 419
6070: GO 6058
6072: POP
6073: POP
// end ;
6074: PPOPN 2
6076: END
// every 0 0$1 marked mpActive do var side , tmp ;
6077: GO 6079
6079: DISABLE
6080: LD_INT 0
6082: PPUSH
6083: PPUSH
// begin if mpSibBomb <= 1 then
6084: LD_EXP 30
6088: PUSH
6089: LD_INT 1
6091: LESSEQUAL
6092: IFFALSE 6096
// exit ;
6094: GO 6169
// tmp := mpSibBomb ;
6096: LD_ADDR_VAR 0 2
6100: PUSH
6101: LD_EXP 30
6105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6106: LD_INT 35
6108: PPUSH
6109: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6113: LD_ADDR_VAR 0 2
6117: PUSH
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 35
6125: MINUS
6126: ST_TO_ADDR
// until not tmp ;
6127: LD_VAR 0 2
6131: NOT
6132: IFFALSE 6106
// for side := 1 to 8 do
6134: LD_ADDR_VAR 0 1
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_INT 8
6146: PUSH
6147: FOR_TO
6148: IFFALSE 6167
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6150: LD_INT 25
6152: PPUSH
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: CALL_OW 322
6165: GO 6147
6167: POP
6168: POP
// end ;
6169: PPOPN 2
6171: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6172: LD_INT 0
6174: PPUSH
6175: PPUSH
6176: PPUSH
// mpBuildUpTimeDelay := 0 ;
6177: LD_ADDR_EXP 48
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// if not mpBuildUpTime then
6185: LD_EXP 22
6189: NOT
6190: IFFALSE 6194
// exit ;
6192: GO 6377
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6194: LD_ADDR_EXP 48
6198: PUSH
6199: LD_INT 8400
6201: PUSH
6202: LD_INT 2100
6204: PUSH
6205: LD_EXP 22
6209: MUL
6210: PLUS
6211: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6212: LD_ADDR_EXP 49
6216: PUSH
6217: LD_INT 1
6219: ST_TO_ADDR
// for i := 1 to 8 do
6220: LD_ADDR_VAR 0 2
6224: PUSH
6225: DOUBLE
6226: LD_INT 1
6228: DEC
6229: ST_TO_ADDR
6230: LD_INT 8
6232: PUSH
6233: FOR_TO
6234: IFFALSE 6375
// if mpSidePositions [ i ] then
6236: LD_EXP 9
6240: PUSH
6241: LD_VAR 0 2
6245: ARRAY
6246: IFFALSE 6373
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6248: LD_EXP 21
6252: PUSH
6253: LD_EXP 9
6257: PUSH
6258: LD_VAR 0 2
6262: ARRAY
6263: ARRAY
6264: PPUSH
6265: LD_INT 5
6267: PPUSH
6268: CALL_OW 424
// for j := 1 to 8 do
6272: LD_ADDR_VAR 0 3
6276: PUSH
6277: DOUBLE
6278: LD_INT 1
6280: DEC
6281: ST_TO_ADDR
6282: LD_INT 8
6284: PUSH
6285: FOR_TO
6286: IFFALSE 6371
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6288: LD_EXP 9
6292: PUSH
6293: LD_VAR 0 3
6297: ARRAY
6298: PUSH
6299: LD_EXP 10
6303: PUSH
6304: LD_VAR 0 2
6308: ARRAY
6309: PUSH
6310: LD_EXP 10
6314: PUSH
6315: LD_VAR 0 3
6319: ARRAY
6320: NONEQUAL
6321: PUSH
6322: LD_EXP 13
6326: NOT
6327: PUSH
6328: LD_VAR 0 2
6332: PUSH
6333: LD_VAR 0 3
6337: NONEQUAL
6338: AND
6339: OR
6340: AND
6341: IFFALSE 6369
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6343: LD_VAR 0 3
6347: PPUSH
6348: LD_EXP 21
6352: PUSH
6353: LD_EXP 9
6357: PUSH
6358: LD_VAR 0 2
6362: ARRAY
6363: ARRAY
6364: PPUSH
6365: CALL_OW 333
6369: GO 6285
6371: POP
6372: POP
// end ;
6373: GO 6233
6375: POP
6376: POP
// end ;
6377: LD_VAR 0 1
6381: RET
// function EndBuildUp ; var i , j ; begin
6382: LD_INT 0
6384: PPUSH
6385: PPUSH
6386: PPUSH
// mpBuildUpTimeActive := false ;
6387: LD_ADDR_EXP 49
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// for i := 1 to 8 do
6395: LD_ADDR_VAR 0 2
6399: PUSH
6400: DOUBLE
6401: LD_INT 1
6403: DEC
6404: ST_TO_ADDR
6405: LD_INT 8
6407: PUSH
6408: FOR_TO
6409: IFFALSE 6550
// if mpSidePositions [ i ] then
6411: LD_EXP 9
6415: PUSH
6416: LD_VAR 0 2
6420: ARRAY
6421: IFFALSE 6548
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6423: LD_EXP 21
6427: PUSH
6428: LD_EXP 9
6432: PUSH
6433: LD_VAR 0 2
6437: ARRAY
6438: ARRAY
6439: PPUSH
6440: LD_INT 0
6442: PPUSH
6443: CALL_OW 424
// for j := 1 to 8 do
6447: LD_ADDR_VAR 0 3
6451: PUSH
6452: DOUBLE
6453: LD_INT 1
6455: DEC
6456: ST_TO_ADDR
6457: LD_INT 8
6459: PUSH
6460: FOR_TO
6461: IFFALSE 6546
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6463: LD_EXP 9
6467: PUSH
6468: LD_VAR 0 3
6472: ARRAY
6473: PUSH
6474: LD_EXP 10
6478: PUSH
6479: LD_VAR 0 2
6483: ARRAY
6484: PUSH
6485: LD_EXP 10
6489: PUSH
6490: LD_VAR 0 3
6494: ARRAY
6495: NONEQUAL
6496: PUSH
6497: LD_EXP 13
6501: NOT
6502: PUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_VAR 0 3
6512: NONEQUAL
6513: AND
6514: OR
6515: AND
6516: IFFALSE 6544
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6518: LD_VAR 0 3
6522: PPUSH
6523: LD_EXP 21
6527: PUSH
6528: LD_EXP 9
6532: PUSH
6533: LD_VAR 0 2
6537: ARRAY
6538: ARRAY
6539: PPUSH
6540: CALL_OW 334
6544: GO 6460
6546: POP
6547: POP
// end ;
6548: GO 6408
6550: POP
6551: POP
// end ;
6552: LD_VAR 0 1
6556: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6557: LD_EXP 49
6561: IFFALSE 6736
6563: GO 6565
6565: DISABLE
6566: LD_INT 0
6568: PPUSH
6569: PPUSH
// begin for i := 1 to 8 do
6570: LD_ADDR_VAR 0 1
6574: PUSH
6575: DOUBLE
6576: LD_INT 1
6578: DEC
6579: ST_TO_ADDR
6580: LD_INT 8
6582: PUSH
6583: FOR_TO
6584: IFFALSE 6733
// if mpSidePositions [ i ] then
6586: LD_EXP 9
6590: PUSH
6591: LD_VAR 0 1
6595: ARRAY
6596: IFFALSE 6731
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: LD_EXP 21
6607: PUSH
6608: LD_EXP 9
6612: PUSH
6613: LD_VAR 0 1
6617: ARRAY
6618: ARRAY
6619: PPUSH
6620: LD_INT 2
6622: PUSH
6623: LD_INT 21
6625: PUSH
6626: LD_INT 1
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 21
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 22
6650: PUSH
6651: LD_OWVAR 2
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PPUSH
6664: CALL_OW 70
6668: PUSH
6669: FOR_IN
6670: IFFALSE 6729
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6672: LD_EXP 10
6676: PUSH
6677: LD_VAR 0 1
6681: ARRAY
6682: PUSH
6683: LD_EXP 10
6687: PUSH
6688: LD_OWVAR 2
6692: ARRAY
6693: NONEQUAL
6694: PUSH
6695: LD_EXP 13
6699: NOT
6700: PUSH
6701: LD_VAR 0 1
6705: PUSH
6706: LD_OWVAR 2
6710: NONEQUAL
6711: AND
6712: OR
6713: IFFALSE 6727
// ComMoveToArea ( un , BuildUpEscape ) ;
6715: LD_VAR 0 2
6719: PPUSH
6720: LD_INT 6
6722: PPUSH
6723: CALL_OW 113
6727: GO 6669
6729: POP
6730: POP
6731: GO 6583
6733: POP
6734: POP
// enable ;
6735: ENABLE
// end ;
6736: PPOPN 2
6738: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6739: LD_EXP 22
6743: IFFALSE 6793
6745: GO 6747
6747: DISABLE
6748: LD_INT 0
6750: PPUSH
// begin tmp := mpBuildUpTime ;
6751: LD_ADDR_VAR 0 1
6755: PUSH
6756: LD_EXP 22
6760: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6761: LD_INT 35
6763: PPUSH
6764: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6768: LD_ADDR_VAR 0 1
6772: PUSH
6773: LD_VAR 0 1
6777: PUSH
6778: LD_INT 35
6780: MINUS
6781: ST_TO_ADDR
// until not tmp ;
6782: LD_VAR 0 1
6786: NOT
6787: IFFALSE 6761
// EndBuildUp ;
6789: CALL 6382 0 0
// end ;
6793: PPOPN 1
6795: END
// every 0 0$1 trigger mpActive marked mpWin do
6796: LD_INT 100
6798: IFFALSE 6832
6800: GO 6802
6802: DISABLE
// begin if IAmServer then
6803: CALL_OW 518
6807: IFFALSE 6816
// wait ( 0 0$3 ) ;
6809: LD_INT 105
6811: PPUSH
6812: CALL_OW 67
// if Multiplayer then
6816: LD_OWVAR 4
6820: IFFALSE 6828
// YouWinInMultiplayer else
6822: CALL_OW 106
6826: GO 6832
// YouWin ;
6828: CALL_OW 103
// end ;
6832: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6833: LD_INT 0
6835: PPUSH
// result := false ;
6836: LD_ADDR_VAR 0 3
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6844: LD_VAR 0 1
6848: PUSH
6849: LD_INT 1
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6863
6855: LD_INT 5
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 6936
6863: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: LD_INT 22
6871: PUSH
6872: LD_VAR 0 2
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 2
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 33
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 33
6906: PUSH
6907: LD_INT 5
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PPUSH
6924: CALL_OW 69
6928: PPUSH
6929: CALL 12091 0 1
6933: ST_TO_ADDR
// end ; GameTypeSurvival :
6934: GO 7171
6936: LD_INT 2
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 7072
6944: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6945: LD_ADDR_VAR 0 3
6949: PUSH
6950: LD_INT 22
6952: PUSH
6953: LD_VAR 0 2
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 2
6964: PUSH
6965: LD_INT 30
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 30
6977: PUSH
6978: LD_INT 1
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: PPUSH
6999: CALL 12091 0 1
7003: PUSH
7004: LD_INT 22
7006: PUSH
7007: LD_VAR 0 2
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 2
7018: PUSH
7019: LD_INT 21
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 33
7031: PUSH
7032: LD_INT 3
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 33
7041: PUSH
7042: LD_INT 5
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 69
7063: PPUSH
7064: CALL 12091 0 1
7068: AND
7069: ST_TO_ADDR
// end ; GameTypeKing :
7070: GO 7171
7072: LD_INT 3
7074: DOUBLE
7075: EQUAL
7076: IFTRUE 7080
7078: GO 7170
7080: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7081: LD_ADDR_VAR 0 3
7085: PUSH
7086: LD_INT 22
7088: PUSH
7089: LD_VAR 0 2
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 2
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: LD_INT 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 33
7113: PUSH
7114: LD_INT 3
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 33
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PPUSH
7141: CALL_OW 69
7145: PPUSH
7146: CALL 12091 0 1
7150: PUSH
7151: LD_VAR 0 2
7155: PPUSH
7156: CALL 59336 0 1
7160: PUSH
7161: LD_EXP 37
7165: LESS
7166: AND
7167: ST_TO_ADDR
// end ; end ;
7168: GO 7171
7170: POP
// end ;
7171: LD_VAR 0 3
7175: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7176: LD_INT 100
7178: IFFALSE 7400
7180: GO 7182
7182: DISABLE
7183: LD_INT 0
7185: PPUSH
7186: PPUSH
// begin if Multiplayer then
7187: LD_OWVAR 4
7191: IFFALSE 7199
// SetPlayerSpectator ( ) else
7193: CALL_OW 572
7197: GO 7208
// FogOff ( your_side ) ;
7199: LD_OWVAR 2
7203: PPUSH
7204: CALL_OW 344
// repeat gameIsOn := false ;
7208: LD_ADDR_VAR 0 1
7212: PUSH
7213: LD_INT 0
7215: ST_TO_ADDR
// for i := 1 to 8 do
7216: LD_ADDR_VAR 0 2
7220: PUSH
7221: DOUBLE
7222: LD_INT 1
7224: DEC
7225: ST_TO_ADDR
7226: LD_INT 8
7228: PUSH
7229: FOR_TO
7230: IFFALSE 7352
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7232: LD_EXP 9
7236: PUSH
7237: LD_VAR 0 2
7241: ARRAY
7242: PUSH
7243: LD_VAR 0 2
7247: PPUSH
7248: CALL_OW 108
7252: AND
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: LD_OWVAR 2
7263: NONEQUAL
7264: AND
7265: IFFALSE 7350
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7267: LD_EXP 10
7271: PUSH
7272: LD_VAR 0 2
7276: ARRAY
7277: NOT
7278: PUSH
7279: LD_EXP 10
7283: PUSH
7284: LD_VAR 0 2
7288: ARRAY
7289: PUSH
7290: LD_EXP 10
7294: PUSH
7295: LD_OWVAR 2
7299: ARRAY
7300: NONEQUAL
7301: PUSH
7302: LD_OWVAR 2
7306: PPUSH
7307: LD_VAR 0 2
7311: PPUSH
7312: CALL_OW 81
7316: PUSH
7317: LD_INT 1
7319: NONEQUAL
7320: AND
7321: OR
7322: IFFALSE 7350
// if HasPowerByGameType ( mpGameType , i ) then
7324: LD_EXP 5
7328: PPUSH
7329: LD_VAR 0 2
7333: PPUSH
7334: CALL 6833 0 2
7338: IFFALSE 7350
// begin gameIsOn := true ;
7340: LD_ADDR_VAR 0 1
7344: PUSH
7345: LD_INT 1
7347: ST_TO_ADDR
// break ;
7348: GO 7352
// end ;
7350: GO 7229
7352: POP
7353: POP
// wait ( 100 ) ;
7354: LD_INT 100
7356: PPUSH
7357: CALL_OW 67
// until not gameIsOn ;
7361: LD_VAR 0 1
7365: NOT
7366: IFFALSE 7208
// if IAmServer then
7368: CALL_OW 518
7372: IFFALSE 7381
// wait ( 0 0$3 ) ;
7374: LD_INT 105
7376: PPUSH
7377: CALL_OW 67
// if Multiplayer then
7381: LD_OWVAR 4
7385: IFFALSE 7393
// YouLostInMultiplayer else
7387: CALL_OW 107
7391: GO 7400
// YouLost (  ) ;
7393: LD_STRING 
7395: PPUSH
7396: CALL_OW 104
// end ;
7400: PPOPN 2
7402: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7403: LD_EXP 35
7407: IFFALSE 7783
7409: GO 7411
7411: DISABLE
7412: LD_INT 0
7414: PPUSH
7415: PPUSH
7416: PPUSH
7417: PPUSH
7418: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7419: LD_ADDR_VAR 0 5
7423: PUSH
7424: LD_INT 1
7426: PUSH
7427: LD_INT 2
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: LD_INT 4
7435: PUSH
7436: LD_INT 5
7438: PUSH
7439: LD_INT 6
7441: PUSH
7442: LD_INT 7
7444: PUSH
7445: LD_INT 8
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7458: LD_INT 350
7460: PPUSH
7461: CALL_OW 67
// for i := 1 to 8 do
7465: LD_ADDR_VAR 0 1
7469: PUSH
7470: DOUBLE
7471: LD_INT 1
7473: DEC
7474: ST_TO_ADDR
7475: LD_INT 8
7477: PUSH
7478: FOR_TO
7479: IFFALSE 7753
// begin j := sides [ i ] ;
7481: LD_ADDR_VAR 0 2
7485: PUSH
7486: LD_VAR 0 5
7490: PUSH
7491: LD_VAR 0 1
7495: ARRAY
7496: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7497: LD_EXP 42
7501: PUSH
7502: LD_VAR 0 2
7506: ARRAY
7507: PPUSH
7508: CALL 12091 0 1
7512: PUSH
7513: LD_VAR 0 2
7517: PPUSH
7518: CALL_OW 108
7522: AND
7523: PUSH
7524: LD_EXP 5
7528: PPUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL 6833 0 2
7538: AND
7539: IFFALSE 7751
// begin wait ( mpRespawn div 3 ) ;
7541: LD_EXP 35
7545: PUSH
7546: LD_INT 3
7548: DIV
7549: PPUSH
7550: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7554: LD_ADDR_VAR 0 3
7558: PUSH
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 2
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 50
7573: PUSH
7574: EMPTY
7575: LIST
7576: PUSH
7577: LD_INT 2
7579: PUSH
7580: LD_INT 30
7582: PUSH
7583: LD_INT 0
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 30
7592: PUSH
7593: LD_INT 1
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7615: LD_VAR 0 3
7619: NOT
7620: PUSH
7621: LD_VAR 0 2
7625: PPUSH
7626: CALL_OW 108
7630: NOT
7631: OR
7632: PUSH
7633: LD_EXP 5
7637: PPUSH
7638: LD_VAR 0 2
7642: PPUSH
7643: CALL 6833 0 2
7647: NOT
7648: OR
7649: IFFALSE 7653
// continue ;
7651: GO 7478
// spawn := tmp [ 1 ] ;
7653: LD_ADDR_VAR 0 4
7657: PUSH
7658: LD_VAR 0 3
7662: PUSH
7663: LD_INT 1
7665: ARRAY
7666: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7667: LD_EXP 42
7671: PUSH
7672: LD_VAR 0 2
7676: ARRAY
7677: PUSH
7678: LD_INT 1
7680: ARRAY
7681: PPUSH
7682: LD_VAR 0 4
7686: PPUSH
7687: CALL_OW 250
7691: PPUSH
7692: LD_VAR 0 4
7696: PPUSH
7697: CALL_OW 251
7701: PPUSH
7702: LD_INT 32
7704: PPUSH
7705: LD_INT 1
7707: PPUSH
7708: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7712: LD_ADDR_EXP 42
7716: PUSH
7717: LD_EXP 42
7721: PPUSH
7722: LD_VAR 0 2
7726: PPUSH
7727: LD_EXP 42
7731: PUSH
7732: LD_VAR 0 2
7736: ARRAY
7737: PPUSH
7738: LD_INT 1
7740: PPUSH
7741: CALL_OW 3
7745: PPUSH
7746: CALL_OW 1
7750: ST_TO_ADDR
// end ; end ;
7751: GO 7478
7753: POP
7754: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7755: LD_ADDR_VAR 0 5
7759: PUSH
7760: LD_VAR 0 5
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: LD_INT 8
7770: PPUSH
7771: LD_INT 1
7773: PPUSH
7774: CALL 14369 0 4
7778: ST_TO_ADDR
// until false ;
7779: LD_INT 0
7781: IFFALSE 7458
// end ;
7783: PPOPN 5
7785: END
// every 0 0$1 marked mpActive do
7786: GO 7788
7788: DISABLE
// begin enable ;
7789: ENABLE
// if not mpDisplayStrings then
7790: LD_EXP 40
7794: NOT
7795: IFFALSE 7806
// begin display_strings := [ ] ;
7797: LD_ADDR_OWVAR 47
7801: PUSH
7802: EMPTY
7803: ST_TO_ADDR
// exit ;
7804: GO 7816
// end ; display_strings := mpDisplayStrings ;
7806: LD_ADDR_OWVAR 47
7810: PUSH
7811: LD_EXP 40
7815: ST_TO_ADDR
// end ; end_of_file
7816: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7817: LD_INT 0
7819: PPUSH
7820: PPUSH
7821: PPUSH
7822: PPUSH
7823: PPUSH
7824: PPUSH
7825: PPUSH
7826: PPUSH
7827: PPUSH
// if GetType ( un ) = unit_vehicle then
7828: LD_VAR 0 1
7832: PPUSH
7833: CALL_OW 247
7837: PUSH
7838: LD_INT 2
7840: EQUAL
7841: IFFALSE 7845
// exit ;
7843: GO 8477
// side := GetSide ( un ) ;
7845: LD_ADDR_VAR 0 9
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 255
7859: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7860: LD_EXP 5
7864: PUSH
7865: LD_INT 2
7867: EQUAL
7868: IFFALSE 7944
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 266
7879: PUSH
7880: LD_INT 0
7882: PUSH
7883: LD_INT 1
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: IN
7890: IFFALSE 7944
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
7892: LD_ADDR_VAR 0 3
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_VAR 0 9
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 21
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: PPUSH
7923: CALL_OW 69
7927: PUSH
7928: FOR_IN
7929: IFFALSE 7942
// KillUnit ( i ) ;
7931: LD_VAR 0 3
7935: PPUSH
7936: CALL_OW 66
7940: GO 7928
7942: POP
7943: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 257
7953: PUSH
7954: LD_INT 12
7956: PUSH
7957: LD_INT 17
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: LD_INT 16
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: IN
7972: PUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 263
7982: PUSH
7983: LD_INT 5
7985: EQUAL
7986: OR
7987: IFFALSE 8206
// begin tag := 0 ;
7989: LD_ADDR_VAR 0 5
7993: PUSH
7994: LD_INT 0
7996: ST_TO_ADDR
// for i := 1 to 8 do
7997: LD_ADDR_VAR 0 3
8001: PUSH
8002: DOUBLE
8003: LD_INT 1
8005: DEC
8006: ST_TO_ADDR
8007: LD_INT 8
8009: PUSH
8010: FOR_TO
8011: IFFALSE 8045
// if un in mpApePosIndex [ i ] then
8013: LD_VAR 0 1
8017: PUSH
8018: LD_EXP 34
8022: PUSH
8023: LD_VAR 0 3
8027: ARRAY
8028: IN
8029: IFFALSE 8043
// begin tag := i ;
8031: LD_ADDR_VAR 0 5
8035: PUSH
8036: LD_VAR 0 3
8040: ST_TO_ADDR
// break ;
8041: GO 8045
// end ;
8043: GO 8010
8045: POP
8046: POP
// if not tag then
8047: LD_VAR 0 5
8051: NOT
8052: IFFALSE 8056
// exit ;
8054: GO 8477
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8056: LD_ADDR_VAR 0 7
8060: PUSH
8061: LD_EXP 33
8065: PUSH
8066: LD_EXP 9
8070: PUSH
8071: LD_VAR 0 5
8075: ARRAY
8076: ARRAY
8077: ST_TO_ADDR
// if not area then
8078: LD_VAR 0 7
8082: NOT
8083: IFFALSE 8087
// exit ;
8085: GO 8477
// wait ( 4 4$00 ) ;
8087: LD_INT 8400
8089: PPUSH
8090: CALL_OW 67
// repeat wait ( 10 ) ;
8094: LD_INT 10
8096: PPUSH
8097: CALL_OW 67
// until not mpBlockRespThread ;
8101: LD_EXP 47
8105: NOT
8106: IFFALSE 8094
// mpBlockRespThread := true ;
8108: LD_ADDR_EXP 47
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8116: LD_INT 0
8118: PPUSH
8119: CALL 43948 0 1
// ape := CreateHuman ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: CALL_OW 44
8132: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8133: LD_ADDR_EXP 34
8137: PUSH
8138: LD_EXP 34
8142: PPUSH
8143: LD_VAR 0 5
8147: PPUSH
8148: LD_EXP 34
8152: PUSH
8153: LD_VAR 0 5
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 4
8163: PPUSH
8164: CALL 47700 0 2
8168: PPUSH
8169: CALL_OW 1
8173: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8174: LD_VAR 0 4
8178: PPUSH
8179: LD_VAR 0 7
8183: PPUSH
8184: LD_INT 0
8186: PPUSH
8187: CALL_OW 49
// wait ( 10 ) ;
8191: LD_INT 10
8193: PPUSH
8194: CALL_OW 67
// mpBlockRespThread := false ;
8198: LD_ADDR_EXP 47
8202: PUSH
8203: LD_INT 0
8205: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 247
8215: PUSH
8216: LD_INT 1
8218: EQUAL
8219: PUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 248
8229: PUSH
8230: LD_INT 0
8232: GREATER
8233: AND
8234: IFFALSE 8477
// begin if not mpRespawn then
8236: LD_EXP 35
8240: NOT
8241: IFFALSE 8245
// exit ;
8243: GO 8477
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8245: LD_VAR 0 9
8249: PPUSH
8250: CALL_OW 108
8254: NOT
8255: PUSH
8256: LD_EXP 5
8260: PPUSH
8261: LD_VAR 0 9
8265: PPUSH
8266: CALL 6833 0 2
8270: NOT
8271: AND
8272: IFFALSE 8276
// exit ;
8274: GO 8477
// side := GetSide ( un ) ;
8276: LD_ADDR_VAR 0 9
8280: PUSH
8281: LD_VAR 0 1
8285: PPUSH
8286: CALL_OW 255
8290: ST_TO_ADDR
// nation := GetNation ( un ) ;
8291: LD_ADDR_VAR 0 8
8295: PUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 248
8305: ST_TO_ADDR
// class := GetClass ( un ) ;
8306: LD_ADDR_VAR 0 6
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 257
8320: ST_TO_ADDR
// if class > 4 then
8321: LD_VAR 0 6
8325: PUSH
8326: LD_INT 4
8328: GREATER
8329: IFFALSE 8339
// class := 1 ;
8331: LD_ADDR_VAR 0 6
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// repeat wait ( 10 ) ;
8339: LD_INT 10
8341: PPUSH
8342: CALL_OW 67
// until not mpBlockRespThread ;
8346: LD_EXP 47
8350: NOT
8351: IFFALSE 8339
// mpBlockRespThread := true ;
8353: LD_ADDR_EXP 47
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// uc_side := side ;
8361: LD_ADDR_OWVAR 20
8365: PUSH
8366: LD_VAR 0 9
8370: ST_TO_ADDR
// uc_nation := nation ;
8371: LD_ADDR_OWVAR 21
8375: PUSH
8376: LD_VAR 0 8
8380: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8381: LD_INT 0
8383: PPUSH
8384: LD_VAR 0 6
8388: PPUSH
8389: LD_INT 2
8391: PPUSH
8392: CALL_OW 380
// un := CreateHuman ;
8396: LD_ADDR_VAR 0 1
8400: PUSH
8401: CALL_OW 44
8405: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8406: LD_ADDR_EXP 42
8410: PUSH
8411: LD_EXP 42
8415: PPUSH
8416: LD_VAR 0 9
8420: PPUSH
8421: LD_EXP 42
8425: PUSH
8426: LD_VAR 0 9
8430: ARRAY
8431: PPUSH
8432: LD_EXP 42
8436: PUSH
8437: LD_VAR 0 9
8441: ARRAY
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: PPUSH
8447: LD_VAR 0 1
8451: PPUSH
8452: CALL_OW 1
8456: PPUSH
8457: CALL_OW 1
8461: ST_TO_ADDR
// wait ( 10 ) ;
8462: LD_INT 10
8464: PPUSH
8465: CALL_OW 67
// mpBlockRespThread := false ;
8469: LD_ADDR_EXP 47
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// end ; end ;
8477: LD_VAR 0 2
8481: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8482: LD_INT 0
8484: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 266
8494: PUSH
8495: LD_INT 0
8497: PUSH
8498: LD_INT 1
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: IN
8505: IFFALSE 8530
// SetBName ( building , @ & GetSide ( building ) ) ;
8507: LD_VAR 0 1
8511: PPUSH
8512: LD_STRING @
8514: PUSH
8515: LD_VAR 0 1
8519: PPUSH
8520: CALL_OW 255
8524: STR
8525: PPUSH
8526: CALL_OW 500
// end ;
8530: LD_VAR 0 2
8534: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8535: LD_INT 0
8537: PPUSH
8538: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8539: LD_EXP 5
8543: PUSH
8544: LD_INT 2
8546: EQUAL
8547: PUSH
8548: LD_VAR 0 1
8552: PPUSH
8553: CALL_OW 266
8557: PUSH
8558: LD_INT 0
8560: PUSH
8561: LD_INT 1
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: IN
8568: AND
8569: IFFALSE 8634
// begin KillUnit ( building ) ;
8571: LD_VAR 0 1
8575: PPUSH
8576: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8580: LD_ADDR_VAR 0 5
8584: PUSH
8585: LD_INT 22
8587: PUSH
8588: LD_VAR 0 2
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 21
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: PPUSH
8611: CALL_OW 69
8615: PUSH
8616: FOR_IN
8617: IFFALSE 8630
// KillUnit ( i ) ;
8619: LD_VAR 0 5
8623: PPUSH
8624: CALL_OW 66
8628: GO 8616
8630: POP
8631: POP
// exit ;
8632: GO 8679
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8634: LD_VAR 0 1
8638: PPUSH
8639: CALL_OW 266
8643: PUSH
8644: LD_INT 0
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: IN
8654: IFFALSE 8679
// SetBName ( building , @ & GetSide ( building ) ) ;
8656: LD_VAR 0 1
8660: PPUSH
8661: LD_STRING @
8663: PUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 255
8673: STR
8674: PPUSH
8675: CALL_OW 500
// end ;
8679: LD_VAR 0 4
8683: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8684: LD_INT 0
8686: PPUSH
8687: PPUSH
8688: PPUSH
// if mpGameType <> GameTypeFamine then
8689: LD_EXP 5
8693: PUSH
8694: LD_INT 5
8696: NONEQUAL
8697: IFFALSE 8701
// exit ;
8699: GO 8915
// for i := 1 to mpGlobalOilDeposits do
8701: LD_ADDR_VAR 0 6
8705: PUSH
8706: DOUBLE
8707: LD_INT 1
8709: DEC
8710: ST_TO_ADDR
8711: LD_EXP 43
8715: PUSH
8716: FOR_TO
8717: IFFALSE 8913
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8719: LD_EXP 43
8723: PUSH
8724: LD_VAR 0 6
8728: ARRAY
8729: PUSH
8730: LD_INT 1
8732: ARRAY
8733: PPUSH
8734: LD_EXP 43
8738: PUSH
8739: LD_VAR 0 6
8743: ARRAY
8744: PUSH
8745: LD_INT 2
8747: ARRAY
8748: PPUSH
8749: CALL_OW 428
8753: PUSH
8754: LD_VAR 0 1
8758: EQUAL
8759: IFFALSE 8911
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8761: LD_ADDR_VAR 0 7
8765: PUSH
8766: LD_EXP 43
8770: PUSH
8771: LD_VAR 0 6
8775: ARRAY
8776: PUSH
8777: LD_INT 3
8779: ARRAY
8780: ST_TO_ADDR
// value := Dec ( value ) ;
8781: LD_ADDR_VAR 0 7
8785: PUSH
8786: LD_VAR 0 7
8790: PPUSH
8791: CALL 49083 0 1
8795: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8796: LD_ADDR_EXP 43
8800: PUSH
8801: LD_EXP 43
8805: PPUSH
8806: LD_VAR 0 6
8810: PPUSH
8811: LD_EXP 43
8815: PUSH
8816: LD_VAR 0 6
8820: ARRAY
8821: PPUSH
8822: LD_INT 3
8824: PPUSH
8825: LD_VAR 0 7
8829: PPUSH
8830: CALL_OW 1
8834: PPUSH
8835: CALL_OW 1
8839: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8840: LD_VAR 0 1
8844: PPUSH
8845: LD_VAR 0 7
8849: PPUSH
8850: CALL_OW 505
// if value = 0 then
8854: LD_VAR 0 7
8858: PUSH
8859: LD_INT 0
8861: EQUAL
8862: IFFALSE 8911
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8864: LD_EXP 43
8868: PUSH
8869: LD_VAR 0 6
8873: ARRAY
8874: PUSH
8875: LD_INT 1
8877: ARRAY
8878: PPUSH
8879: LD_EXP 43
8883: PUSH
8884: LD_VAR 0 6
8888: ARRAY
8889: PUSH
8890: LD_INT 2
8892: ARRAY
8893: PPUSH
8894: CALL_OW 63
// KillUnit ( building ) ;
8898: LD_VAR 0 1
8902: PPUSH
8903: CALL_OW 66
// exit ;
8907: POP
8908: POP
8909: GO 8915
// end ; end ; end ;
8911: GO 8716
8913: POP
8914: POP
// end ;
8915: LD_VAR 0 5
8919: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
8924: PPUSH
// if mpGameType <> GameTypeFamine then
8925: LD_EXP 5
8929: PUSH
8930: LD_INT 5
8932: NONEQUAL
8933: IFFALSE 8937
// exit ;
8935: GO 9151
// for i := 1 to mpGlobalSibDeposits do
8937: LD_ADDR_VAR 0 6
8941: PUSH
8942: DOUBLE
8943: LD_INT 1
8945: DEC
8946: ST_TO_ADDR
8947: LD_EXP 44
8951: PUSH
8952: FOR_TO
8953: IFFALSE 9149
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8955: LD_EXP 44
8959: PUSH
8960: LD_VAR 0 6
8964: ARRAY
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: LD_EXP 44
8974: PUSH
8975: LD_VAR 0 6
8979: ARRAY
8980: PUSH
8981: LD_INT 2
8983: ARRAY
8984: PPUSH
8985: CALL_OW 428
8989: PUSH
8990: LD_VAR 0 1
8994: EQUAL
8995: IFFALSE 9147
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8997: LD_ADDR_VAR 0 7
9001: PUSH
9002: LD_EXP 44
9006: PUSH
9007: LD_VAR 0 6
9011: ARRAY
9012: PUSH
9013: LD_INT 3
9015: ARRAY
9016: ST_TO_ADDR
// value := Dec ( value ) ;
9017: LD_ADDR_VAR 0 7
9021: PUSH
9022: LD_VAR 0 7
9026: PPUSH
9027: CALL 49083 0 1
9031: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9032: LD_ADDR_EXP 44
9036: PUSH
9037: LD_EXP 44
9041: PPUSH
9042: LD_VAR 0 6
9046: PPUSH
9047: LD_EXP 44
9051: PUSH
9052: LD_VAR 0 6
9056: ARRAY
9057: PPUSH
9058: LD_INT 3
9060: PPUSH
9061: LD_VAR 0 7
9065: PPUSH
9066: CALL_OW 1
9070: PPUSH
9071: CALL_OW 1
9075: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_VAR 0 7
9085: PPUSH
9086: CALL_OW 505
// if value = 0 then
9090: LD_VAR 0 7
9094: PUSH
9095: LD_INT 0
9097: EQUAL
9098: IFFALSE 9147
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9100: LD_EXP 44
9104: PUSH
9105: LD_VAR 0 6
9109: ARRAY
9110: PUSH
9111: LD_INT 1
9113: ARRAY
9114: PPUSH
9115: LD_EXP 44
9119: PUSH
9120: LD_VAR 0 6
9124: ARRAY
9125: PUSH
9126: LD_INT 2
9128: ARRAY
9129: PPUSH
9130: CALL_OW 63
// KillUnit ( building ) ;
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 66
// exit ;
9143: POP
9144: POP
9145: GO 9151
// end ; end ; end ;
9147: GO 8952
9149: POP
9150: POP
// end ; end_of_file
9151: LD_VAR 0 5
9155: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9156: LD_EXP 41
9160: PUSH
9161: CALL 9366 0 0
9165: AND
9166: PUSH
9167: LD_OWVAR 4
9171: AND
9172: IFFALSE 9363
9174: GO 9176
9176: DISABLE
9177: LD_INT 0
9179: PPUSH
9180: PPUSH
// begin canWin := false ;
9181: LD_ADDR_VAR 0 2
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
// if not HasPower ( your_side ) then
9189: LD_OWVAR 2
9193: PPUSH
9194: CALL 9406 0 1
9198: NOT
9199: IFFALSE 9210
// begin Multiplayer_Loose_Message ;
9201: CALL_OW 521
// enable ( mpLose ) ;
9205: LD_INT 102
9207: ENABLE_MARKED
// end else
9208: GO 9363
// begin canWin := true ;
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// for i := 1 to 8 do
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: DOUBLE
9224: LD_INT 1
9226: DEC
9227: ST_TO_ADDR
9228: LD_INT 8
9230: PUSH
9231: FOR_TO
9232: IFFALSE 9349
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9234: LD_EXP 9
9238: PUSH
9239: LD_VAR 0 1
9243: ARRAY
9244: PUSH
9245: LD_VAR 0 1
9249: PPUSH
9250: CALL_OW 108
9254: AND
9255: PUSH
9256: LD_VAR 0 1
9260: PUSH
9261: LD_OWVAR 2
9265: NONEQUAL
9266: AND
9267: IFFALSE 9347
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9269: LD_EXP 10
9273: PUSH
9274: LD_VAR 0 1
9278: ARRAY
9279: NOT
9280: PUSH
9281: LD_EXP 10
9285: PUSH
9286: LD_VAR 0 1
9290: ARRAY
9291: PUSH
9292: LD_EXP 10
9296: PUSH
9297: LD_OWVAR 2
9301: ARRAY
9302: NONEQUAL
9303: PUSH
9304: LD_OWVAR 2
9308: PPUSH
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 81
9318: PUSH
9319: LD_INT 1
9321: NONEQUAL
9322: AND
9323: OR
9324: IFFALSE 9347
// if HasPower ( i ) then
9326: LD_VAR 0 1
9330: PPUSH
9331: CALL 9406 0 1
9335: IFFALSE 9347
// begin canWin := false ;
9337: LD_ADDR_VAR 0 2
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// break ;
9345: GO 9349
// end ;
9347: GO 9231
9349: POP
9350: POP
// if canWin then
9351: LD_VAR 0 2
9355: IFFALSE 9362
// enable ( mpWin ) else
9357: LD_INT 101
9359: ENABLE_MARKED
9360: GO 9363
// enable ;
9362: ENABLE
// end ; end ;
9363: PPOPN 2
9365: END
// function CanWinLoose ; begin
9366: LD_INT 0
9368: PPUSH
// result := true ;
9369: LD_ADDR_VAR 0 1
9373: PUSH
9374: LD_INT 1
9376: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9377: CALL_OW 531
9381: PUSH
9382: CALL_OW 519
9386: PUSH
9387: LD_INT 1
9389: GREATER
9390: AND
9391: IFFALSE 9401
// result := false ;
9393: LD_ADDR_VAR 0 1
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
// end ;
9401: LD_VAR 0 1
9405: RET
// function HasPower ( i ) ; begin
9406: LD_INT 0
9408: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9409: LD_ADDR_VAR 0 2
9413: PUSH
9414: LD_INT 22
9416: PUSH
9417: LD_VAR 0 1
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 2
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: LD_INT 1
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 33
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 33
9451: PUSH
9452: LD_INT 5
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PPUSH
9469: CALL_OW 69
9473: ST_TO_ADDR
// end ; end_of_file
9474: LD_VAR 0 2
9478: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9479: LD_EXP 41
9483: IFFALSE 9526
9485: GO 9487
9487: DISABLE
9488: LD_INT 0
9490: PPUSH
// begin for i := 1 to 8 do
9491: LD_ADDR_VAR 0 1
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_INT 8
9503: PUSH
9504: FOR_TO
9505: IFFALSE 9524
// SetRestrict ( b_depot , i , state_disabled ) ;
9507: LD_INT 0
9509: PPUSH
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 0
9517: PPUSH
9518: CALL_OW 324
9522: GO 9504
9524: POP
9525: POP
// end ;
9526: PPOPN 1
9528: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9529: LD_EXP 41
9533: PUSH
9534: CALL 9739 0 0
9538: AND
9539: PUSH
9540: LD_OWVAR 4
9544: AND
9545: IFFALSE 9736
9547: GO 9549
9549: DISABLE
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// begin canWin := false ;
9554: LD_ADDR_VAR 0 2
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// if not HasPower ( your_side ) then
9562: LD_OWVAR 2
9566: PPUSH
9567: CALL 9779 0 1
9571: NOT
9572: IFFALSE 9583
// begin Multiplayer_Loose_Message ;
9574: CALL_OW 521
// enable ( mpLose ) ;
9578: LD_INT 102
9580: ENABLE_MARKED
// end else
9581: GO 9736
// begin canWin := true ;
9583: LD_ADDR_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// for i := 1 to 8 do
9591: LD_ADDR_VAR 0 1
9595: PUSH
9596: DOUBLE
9597: LD_INT 1
9599: DEC
9600: ST_TO_ADDR
9601: LD_INT 8
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9722
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9607: LD_EXP 9
9611: PUSH
9612: LD_VAR 0 1
9616: ARRAY
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 108
9627: AND
9628: PUSH
9629: LD_VAR 0 1
9633: PUSH
9634: LD_OWVAR 2
9638: NONEQUAL
9639: AND
9640: IFFALSE 9720
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9642: LD_EXP 10
9646: PUSH
9647: LD_VAR 0 1
9651: ARRAY
9652: NOT
9653: PUSH
9654: LD_EXP 10
9658: PUSH
9659: LD_VAR 0 1
9663: ARRAY
9664: PUSH
9665: LD_EXP 10
9669: PUSH
9670: LD_OWVAR 2
9674: ARRAY
9675: NONEQUAL
9676: PUSH
9677: LD_OWVAR 2
9681: PPUSH
9682: LD_VAR 0 1
9686: PPUSH
9687: CALL_OW 81
9691: PUSH
9692: LD_INT 1
9694: NONEQUAL
9695: AND
9696: OR
9697: IFFALSE 9720
// if HasPower ( i ) then
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL 9779 0 1
9708: IFFALSE 9720
// begin canWin := false ;
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: LD_INT 0
9717: ST_TO_ADDR
// break ;
9718: GO 9722
// end ;
9720: GO 9604
9722: POP
9723: POP
// if canWin then
9724: LD_VAR 0 2
9728: IFFALSE 9735
// enable ( mpWin ) else
9730: LD_INT 101
9732: ENABLE_MARKED
9733: GO 9736
// enable ;
9735: ENABLE
// end ; end ;
9736: PPOPN 2
9738: END
// function CanWinLoose ; begin
9739: LD_INT 0
9741: PPUSH
// result := true ;
9742: LD_ADDR_VAR 0 1
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9750: CALL_OW 531
9754: PUSH
9755: CALL_OW 519
9759: PUSH
9760: LD_INT 1
9762: GREATER
9763: AND
9764: IFFALSE 9774
// result := false ;
9766: LD_ADDR_VAR 0 1
9770: PUSH
9771: LD_INT 0
9773: ST_TO_ADDR
// end ;
9774: LD_VAR 0 1
9778: RET
// function HasPower ( i ) ; begin
9779: LD_INT 0
9781: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9782: LD_INT 22
9784: PUSH
9785: LD_VAR 0 1
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 30
9799: PUSH
9800: LD_INT 0
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 30
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 69
9830: NOT
9831: IFFALSE 9835
// exit ;
9833: GO 9900
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: LD_INT 22
9842: PUSH
9843: LD_VAR 0 1
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 2
9854: PUSH
9855: LD_INT 21
9857: PUSH
9858: LD_INT 1
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 33
9867: PUSH
9868: LD_INT 3
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 33
9877: PUSH
9878: LD_INT 5
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: PPUSH
9895: CALL_OW 69
9899: ST_TO_ADDR
// end ; end_of_file
9900: LD_VAR 0 2
9904: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// if exist_mode then
9909: LD_VAR 0 2
9913: IFFALSE 9959
// begin unit := CreateCharacter ( prefix & ident ) ;
9915: LD_ADDR_VAR 0 5
9919: PUSH
9920: LD_VAR 0 3
9924: PUSH
9925: LD_VAR 0 1
9929: STR
9930: PPUSH
9931: CALL_OW 34
9935: ST_TO_ADDR
// if unit then
9936: LD_VAR 0 5
9940: IFFALSE 9957
// DeleteCharacters ( prefix & ident ) ;
9942: LD_VAR 0 3
9946: PUSH
9947: LD_VAR 0 1
9951: STR
9952: PPUSH
9953: CALL_OW 40
// end else
9957: GO 9974
// unit := NewCharacter ( ident ) ;
9959: LD_ADDR_VAR 0 5
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 25
9973: ST_TO_ADDR
// result := unit ;
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_VAR 0 5
9983: ST_TO_ADDR
// end ;
9984: LD_VAR 0 4
9988: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// if exist_mode then
9993: LD_VAR 0 2
9997: IFFALSE 10022
// unit := CreateCharacter ( prefix & ident ) else
9999: LD_ADDR_VAR 0 5
10003: PUSH
10004: LD_VAR 0 3
10008: PUSH
10009: LD_VAR 0 1
10013: STR
10014: PPUSH
10015: CALL_OW 34
10019: ST_TO_ADDR
10020: GO 10037
// unit := NewCharacter ( ident ) ;
10022: LD_ADDR_VAR 0 5
10026: PUSH
10027: LD_VAR 0 1
10031: PPUSH
10032: CALL_OW 25
10036: ST_TO_ADDR
// result := unit ;
10037: LD_ADDR_VAR 0 4
10041: PUSH
10042: LD_VAR 0 5
10046: ST_TO_ADDR
// end ;
10047: LD_VAR 0 4
10051: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10052: LD_INT 0
10054: PPUSH
10055: PPUSH
// if not side or not nation then
10056: LD_VAR 0 1
10060: NOT
10061: PUSH
10062: LD_VAR 0 2
10066: NOT
10067: OR
10068: IFFALSE 10072
// exit ;
10070: GO 10840
// case nation of nation_american :
10072: LD_VAR 0 2
10076: PUSH
10077: LD_INT 1
10079: DOUBLE
10080: EQUAL
10081: IFTRUE 10085
10083: GO 10299
10085: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10086: LD_ADDR_VAR 0 4
10090: PUSH
10091: LD_INT 35
10093: PUSH
10094: LD_INT 45
10096: PUSH
10097: LD_INT 46
10099: PUSH
10100: LD_INT 47
10102: PUSH
10103: LD_INT 82
10105: PUSH
10106: LD_INT 83
10108: PUSH
10109: LD_INT 84
10111: PUSH
10112: LD_INT 85
10114: PUSH
10115: LD_INT 86
10117: PUSH
10118: LD_INT 1
10120: PUSH
10121: LD_INT 2
10123: PUSH
10124: LD_INT 6
10126: PUSH
10127: LD_INT 15
10129: PUSH
10130: LD_INT 16
10132: PUSH
10133: LD_INT 7
10135: PUSH
10136: LD_INT 12
10138: PUSH
10139: LD_INT 13
10141: PUSH
10142: LD_INT 10
10144: PUSH
10145: LD_INT 14
10147: PUSH
10148: LD_INT 20
10150: PUSH
10151: LD_INT 21
10153: PUSH
10154: LD_INT 22
10156: PUSH
10157: LD_INT 25
10159: PUSH
10160: LD_INT 32
10162: PUSH
10163: LD_INT 27
10165: PUSH
10166: LD_INT 36
10168: PUSH
10169: LD_INT 69
10171: PUSH
10172: LD_INT 39
10174: PUSH
10175: LD_INT 34
10177: PUSH
10178: LD_INT 40
10180: PUSH
10181: LD_INT 48
10183: PUSH
10184: LD_INT 49
10186: PUSH
10187: LD_INT 50
10189: PUSH
10190: LD_INT 51
10192: PUSH
10193: LD_INT 52
10195: PUSH
10196: LD_INT 53
10198: PUSH
10199: LD_INT 54
10201: PUSH
10202: LD_INT 55
10204: PUSH
10205: LD_INT 56
10207: PUSH
10208: LD_INT 57
10210: PUSH
10211: LD_INT 58
10213: PUSH
10214: LD_INT 59
10216: PUSH
10217: LD_INT 60
10219: PUSH
10220: LD_INT 61
10222: PUSH
10223: LD_INT 62
10225: PUSH
10226: LD_INT 80
10228: PUSH
10229: LD_INT 82
10231: PUSH
10232: LD_INT 83
10234: PUSH
10235: LD_INT 84
10237: PUSH
10238: LD_INT 85
10240: PUSH
10241: LD_INT 86
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: ST_TO_ADDR
10297: GO 10764
10299: LD_INT 2
10301: DOUBLE
10302: EQUAL
10303: IFTRUE 10307
10305: GO 10533
10307: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10308: LD_ADDR_VAR 0 4
10312: PUSH
10313: LD_INT 35
10315: PUSH
10316: LD_INT 45
10318: PUSH
10319: LD_INT 46
10321: PUSH
10322: LD_INT 47
10324: PUSH
10325: LD_INT 82
10327: PUSH
10328: LD_INT 83
10330: PUSH
10331: LD_INT 84
10333: PUSH
10334: LD_INT 85
10336: PUSH
10337: LD_INT 87
10339: PUSH
10340: LD_INT 70
10342: PUSH
10343: LD_INT 1
10345: PUSH
10346: LD_INT 11
10348: PUSH
10349: LD_INT 3
10351: PUSH
10352: LD_INT 4
10354: PUSH
10355: LD_INT 5
10357: PUSH
10358: LD_INT 6
10360: PUSH
10361: LD_INT 15
10363: PUSH
10364: LD_INT 18
10366: PUSH
10367: LD_INT 7
10369: PUSH
10370: LD_INT 17
10372: PUSH
10373: LD_INT 8
10375: PUSH
10376: LD_INT 20
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_INT 72
10387: PUSH
10388: LD_INT 26
10390: PUSH
10391: LD_INT 69
10393: PUSH
10394: LD_INT 39
10396: PUSH
10397: LD_INT 40
10399: PUSH
10400: LD_INT 41
10402: PUSH
10403: LD_INT 42
10405: PUSH
10406: LD_INT 43
10408: PUSH
10409: LD_INT 48
10411: PUSH
10412: LD_INT 49
10414: PUSH
10415: LD_INT 50
10417: PUSH
10418: LD_INT 51
10420: PUSH
10421: LD_INT 52
10423: PUSH
10424: LD_INT 53
10426: PUSH
10427: LD_INT 54
10429: PUSH
10430: LD_INT 55
10432: PUSH
10433: LD_INT 56
10435: PUSH
10436: LD_INT 60
10438: PUSH
10439: LD_INT 61
10441: PUSH
10442: LD_INT 62
10444: PUSH
10445: LD_INT 66
10447: PUSH
10448: LD_INT 67
10450: PUSH
10451: LD_INT 68
10453: PUSH
10454: LD_INT 81
10456: PUSH
10457: LD_INT 82
10459: PUSH
10460: LD_INT 83
10462: PUSH
10463: LD_INT 84
10465: PUSH
10466: LD_INT 85
10468: PUSH
10469: LD_INT 87
10471: PUSH
10472: LD_INT 88
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: ST_TO_ADDR
10531: GO 10764
10533: LD_INT 3
10535: DOUBLE
10536: EQUAL
10537: IFTRUE 10541
10539: GO 10763
10541: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10542: LD_ADDR_VAR 0 4
10546: PUSH
10547: LD_INT 46
10549: PUSH
10550: LD_INT 47
10552: PUSH
10553: LD_INT 1
10555: PUSH
10556: LD_INT 2
10558: PUSH
10559: LD_INT 82
10561: PUSH
10562: LD_INT 83
10564: PUSH
10565: LD_INT 84
10567: PUSH
10568: LD_INT 85
10570: PUSH
10571: LD_INT 86
10573: PUSH
10574: LD_INT 11
10576: PUSH
10577: LD_INT 9
10579: PUSH
10580: LD_INT 20
10582: PUSH
10583: LD_INT 19
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 24
10591: PUSH
10592: LD_INT 22
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 28
10600: PUSH
10601: LD_INT 29
10603: PUSH
10604: LD_INT 30
10606: PUSH
10607: LD_INT 31
10609: PUSH
10610: LD_INT 37
10612: PUSH
10613: LD_INT 38
10615: PUSH
10616: LD_INT 32
10618: PUSH
10619: LD_INT 27
10621: PUSH
10622: LD_INT 33
10624: PUSH
10625: LD_INT 69
10627: PUSH
10628: LD_INT 39
10630: PUSH
10631: LD_INT 34
10633: PUSH
10634: LD_INT 40
10636: PUSH
10637: LD_INT 71
10639: PUSH
10640: LD_INT 23
10642: PUSH
10643: LD_INT 44
10645: PUSH
10646: LD_INT 48
10648: PUSH
10649: LD_INT 49
10651: PUSH
10652: LD_INT 50
10654: PUSH
10655: LD_INT 51
10657: PUSH
10658: LD_INT 52
10660: PUSH
10661: LD_INT 53
10663: PUSH
10664: LD_INT 54
10666: PUSH
10667: LD_INT 55
10669: PUSH
10670: LD_INT 56
10672: PUSH
10673: LD_INT 57
10675: PUSH
10676: LD_INT 58
10678: PUSH
10679: LD_INT 59
10681: PUSH
10682: LD_INT 63
10684: PUSH
10685: LD_INT 64
10687: PUSH
10688: LD_INT 65
10690: PUSH
10691: LD_INT 82
10693: PUSH
10694: LD_INT 83
10696: PUSH
10697: LD_INT 84
10699: PUSH
10700: LD_INT 85
10702: PUSH
10703: LD_INT 86
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: ST_TO_ADDR
10761: GO 10764
10763: POP
// if state > - 1 and state < 3 then
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 1
10771: NEG
10772: GREATER
10773: PUSH
10774: LD_VAR 0 3
10778: PUSH
10779: LD_INT 3
10781: LESS
10782: AND
10783: IFFALSE 10840
// for i in result do
10785: LD_ADDR_VAR 0 5
10789: PUSH
10790: LD_VAR 0 4
10794: PUSH
10795: FOR_IN
10796: IFFALSE 10838
// if GetTech ( i , side ) <> state then
10798: LD_VAR 0 5
10802: PPUSH
10803: LD_VAR 0 1
10807: PPUSH
10808: CALL_OW 321
10812: PUSH
10813: LD_VAR 0 3
10817: NONEQUAL
10818: IFFALSE 10836
// result := result diff i ;
10820: LD_ADDR_VAR 0 4
10824: PUSH
10825: LD_VAR 0 4
10829: PUSH
10830: LD_VAR 0 5
10834: DIFF
10835: ST_TO_ADDR
10836: GO 10795
10838: POP
10839: POP
// end ;
10840: LD_VAR 0 4
10844: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10845: LD_INT 0
10847: PPUSH
10848: PPUSH
10849: PPUSH
// result := true ;
10850: LD_ADDR_VAR 0 3
10854: PUSH
10855: LD_INT 1
10857: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10858: LD_ADDR_VAR 0 5
10862: PUSH
10863: LD_VAR 0 2
10867: PPUSH
10868: CALL_OW 480
10872: ST_TO_ADDR
// if not tmp then
10873: LD_VAR 0 5
10877: NOT
10878: IFFALSE 10882
// exit ;
10880: GO 10931
// for i in tmp do
10882: LD_ADDR_VAR 0 4
10886: PUSH
10887: LD_VAR 0 5
10891: PUSH
10892: FOR_IN
10893: IFFALSE 10929
// if GetTech ( i , side ) <> state_researched then
10895: LD_VAR 0 4
10899: PPUSH
10900: LD_VAR 0 1
10904: PPUSH
10905: CALL_OW 321
10909: PUSH
10910: LD_INT 2
10912: NONEQUAL
10913: IFFALSE 10927
// begin result := false ;
10915: LD_ADDR_VAR 0 3
10919: PUSH
10920: LD_INT 0
10922: ST_TO_ADDR
// exit ;
10923: POP
10924: POP
10925: GO 10931
// end ;
10927: GO 10892
10929: POP
10930: POP
// end ;
10931: LD_VAR 0 3
10935: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10936: LD_INT 0
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
10942: PPUSH
10943: PPUSH
10944: PPUSH
10945: PPUSH
10946: PPUSH
10947: PPUSH
10948: PPUSH
10949: PPUSH
10950: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10951: LD_VAR 0 1
10955: NOT
10956: PUSH
10957: LD_VAR 0 1
10961: PPUSH
10962: CALL_OW 257
10966: PUSH
10967: LD_INT 9
10969: NONEQUAL
10970: OR
10971: IFFALSE 10975
// exit ;
10973: GO 11548
// side := GetSide ( unit ) ;
10975: LD_ADDR_VAR 0 9
10979: PUSH
10980: LD_VAR 0 1
10984: PPUSH
10985: CALL_OW 255
10989: ST_TO_ADDR
// tech_space := tech_spacanom ;
10990: LD_ADDR_VAR 0 12
10994: PUSH
10995: LD_INT 29
10997: ST_TO_ADDR
// tech_time := tech_taurad ;
10998: LD_ADDR_VAR 0 13
11002: PUSH
11003: LD_INT 28
11005: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11006: LD_ADDR_VAR 0 11
11010: PUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 310
11020: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11021: LD_VAR 0 11
11025: PPUSH
11026: CALL_OW 247
11030: PUSH
11031: LD_INT 2
11033: EQUAL
11034: IFFALSE 11038
// exit ;
11036: GO 11548
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11038: LD_ADDR_VAR 0 8
11042: PUSH
11043: LD_INT 81
11045: PUSH
11046: LD_VAR 0 9
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: LD_INT 3
11057: PUSH
11058: LD_INT 21
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PPUSH
11076: CALL_OW 69
11080: ST_TO_ADDR
// if not tmp then
11081: LD_VAR 0 8
11085: NOT
11086: IFFALSE 11090
// exit ;
11088: GO 11548
// if in_unit then
11090: LD_VAR 0 11
11094: IFFALSE 11118
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11096: LD_ADDR_VAR 0 10
11100: PUSH
11101: LD_VAR 0 8
11105: PPUSH
11106: LD_VAR 0 11
11110: PPUSH
11111: CALL_OW 74
11115: ST_TO_ADDR
11116: GO 11138
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11118: LD_ADDR_VAR 0 10
11122: PUSH
11123: LD_VAR 0 8
11127: PPUSH
11128: LD_VAR 0 1
11132: PPUSH
11133: CALL_OW 74
11137: ST_TO_ADDR
// if not enemy then
11138: LD_VAR 0 10
11142: NOT
11143: IFFALSE 11147
// exit ;
11145: GO 11548
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11147: LD_VAR 0 11
11151: PUSH
11152: LD_VAR 0 11
11156: PPUSH
11157: LD_VAR 0 10
11161: PPUSH
11162: CALL_OW 296
11166: PUSH
11167: LD_INT 13
11169: GREATER
11170: AND
11171: PUSH
11172: LD_VAR 0 1
11176: PPUSH
11177: LD_VAR 0 10
11181: PPUSH
11182: CALL_OW 296
11186: PUSH
11187: LD_INT 12
11189: GREATER
11190: OR
11191: IFFALSE 11195
// exit ;
11193: GO 11548
// missile := [ 1 ] ;
11195: LD_ADDR_VAR 0 14
11199: PUSH
11200: LD_INT 1
11202: PUSH
11203: EMPTY
11204: LIST
11205: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11206: LD_VAR 0 9
11210: PPUSH
11211: LD_VAR 0 12
11215: PPUSH
11216: CALL_OW 325
11220: IFFALSE 11249
// missile := Replace ( missile , missile + 1 , 2 ) ;
11222: LD_ADDR_VAR 0 14
11226: PUSH
11227: LD_VAR 0 14
11231: PPUSH
11232: LD_VAR 0 14
11236: PUSH
11237: LD_INT 1
11239: PLUS
11240: PPUSH
11241: LD_INT 2
11243: PPUSH
11244: CALL_OW 1
11248: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11249: LD_VAR 0 9
11253: PPUSH
11254: LD_VAR 0 13
11258: PPUSH
11259: CALL_OW 325
11263: PUSH
11264: LD_VAR 0 10
11268: PPUSH
11269: CALL_OW 255
11273: PPUSH
11274: LD_VAR 0 13
11278: PPUSH
11279: CALL_OW 325
11283: NOT
11284: AND
11285: IFFALSE 11314
// missile := Replace ( missile , missile + 1 , 3 ) ;
11287: LD_ADDR_VAR 0 14
11291: PUSH
11292: LD_VAR 0 14
11296: PPUSH
11297: LD_VAR 0 14
11301: PUSH
11302: LD_INT 1
11304: PLUS
11305: PPUSH
11306: LD_INT 3
11308: PPUSH
11309: CALL_OW 1
11313: ST_TO_ADDR
// if missile < 2 then
11314: LD_VAR 0 14
11318: PUSH
11319: LD_INT 2
11321: LESS
11322: IFFALSE 11326
// exit ;
11324: GO 11548
// x := GetX ( enemy ) ;
11326: LD_ADDR_VAR 0 4
11330: PUSH
11331: LD_VAR 0 10
11335: PPUSH
11336: CALL_OW 250
11340: ST_TO_ADDR
// y := GetY ( enemy ) ;
11341: LD_ADDR_VAR 0 5
11345: PUSH
11346: LD_VAR 0 10
11350: PPUSH
11351: CALL_OW 251
11355: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11356: LD_ADDR_VAR 0 6
11360: PUSH
11361: LD_VAR 0 4
11365: PUSH
11366: LD_INT 1
11368: NEG
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 12
11377: PLUS
11378: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11379: LD_ADDR_VAR 0 7
11383: PUSH
11384: LD_VAR 0 5
11388: PUSH
11389: LD_INT 1
11391: NEG
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 12
11400: PLUS
11401: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11402: LD_VAR 0 6
11406: PPUSH
11407: LD_VAR 0 7
11411: PPUSH
11412: CALL_OW 488
11416: NOT
11417: IFFALSE 11439
// begin _x := x ;
11419: LD_ADDR_VAR 0 6
11423: PUSH
11424: LD_VAR 0 4
11428: ST_TO_ADDR
// _y := y ;
11429: LD_ADDR_VAR 0 7
11433: PUSH
11434: LD_VAR 0 5
11438: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11439: LD_ADDR_VAR 0 3
11443: PUSH
11444: LD_INT 1
11446: PPUSH
11447: LD_VAR 0 14
11451: PPUSH
11452: CALL_OW 12
11456: ST_TO_ADDR
// case i of 1 :
11457: LD_VAR 0 3
11461: PUSH
11462: LD_INT 1
11464: DOUBLE
11465: EQUAL
11466: IFTRUE 11470
11468: GO 11487
11470: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11471: LD_VAR 0 1
11475: PPUSH
11476: LD_VAR 0 10
11480: PPUSH
11481: CALL_OW 115
11485: GO 11548
11487: LD_INT 2
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11495
11493: GO 11517
11495: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11496: LD_VAR 0 1
11500: PPUSH
11501: LD_VAR 0 6
11505: PPUSH
11506: LD_VAR 0 7
11510: PPUSH
11511: CALL_OW 153
11515: GO 11548
11517: LD_INT 3
11519: DOUBLE
11520: EQUAL
11521: IFTRUE 11525
11523: GO 11547
11525: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11526: LD_VAR 0 1
11530: PPUSH
11531: LD_VAR 0 6
11535: PPUSH
11536: LD_VAR 0 7
11540: PPUSH
11541: CALL_OW 154
11545: GO 11548
11547: POP
// end ;
11548: LD_VAR 0 2
11552: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11553: LD_INT 0
11555: PPUSH
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
// if not unit or not building then
11561: LD_VAR 0 1
11565: NOT
11566: PUSH
11567: LD_VAR 0 2
11571: NOT
11572: OR
11573: IFFALSE 11577
// exit ;
11575: GO 11735
// x := GetX ( building ) ;
11577: LD_ADDR_VAR 0 5
11581: PUSH
11582: LD_VAR 0 2
11586: PPUSH
11587: CALL_OW 250
11591: ST_TO_ADDR
// y := GetY ( building ) ;
11592: LD_ADDR_VAR 0 6
11596: PUSH
11597: LD_VAR 0 2
11601: PPUSH
11602: CALL_OW 251
11606: ST_TO_ADDR
// for i = 0 to 5 do
11607: LD_ADDR_VAR 0 4
11611: PUSH
11612: DOUBLE
11613: LD_INT 0
11615: DEC
11616: ST_TO_ADDR
11617: LD_INT 5
11619: PUSH
11620: FOR_TO
11621: IFFALSE 11733
// begin _x := ShiftX ( x , i , 3 ) ;
11623: LD_ADDR_VAR 0 7
11627: PUSH
11628: LD_VAR 0 5
11632: PPUSH
11633: LD_VAR 0 4
11637: PPUSH
11638: LD_INT 3
11640: PPUSH
11641: CALL_OW 272
11645: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11646: LD_ADDR_VAR 0 8
11650: PUSH
11651: LD_VAR 0 6
11655: PPUSH
11656: LD_VAR 0 4
11660: PPUSH
11661: LD_INT 3
11663: PPUSH
11664: CALL_OW 273
11668: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11669: LD_VAR 0 7
11673: PPUSH
11674: LD_VAR 0 8
11678: PPUSH
11679: CALL_OW 488
11683: NOT
11684: IFFALSE 11688
// continue ;
11686: GO 11620
// if HexInfo ( _x , _y ) = 0 then
11688: LD_VAR 0 7
11692: PPUSH
11693: LD_VAR 0 8
11697: PPUSH
11698: CALL_OW 428
11702: PUSH
11703: LD_INT 0
11705: EQUAL
11706: IFFALSE 11731
// begin ComMoveXY ( unit , _x , _y ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_VAR 0 7
11717: PPUSH
11718: LD_VAR 0 8
11722: PPUSH
11723: CALL_OW 111
// exit ;
11727: POP
11728: POP
11729: GO 11735
// end ; end ;
11731: GO 11620
11733: POP
11734: POP
// end ;
11735: LD_VAR 0 3
11739: RET
// export function ScanBase ( side , base_area ) ; begin
11740: LD_INT 0
11742: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11743: LD_ADDR_VAR 0 3
11747: PUSH
11748: LD_VAR 0 2
11752: PPUSH
11753: LD_INT 81
11755: PUSH
11756: LD_VAR 0 1
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PPUSH
11765: CALL_OW 70
11769: ST_TO_ADDR
// end ;
11770: LD_VAR 0 3
11774: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11775: LD_INT 0
11777: PPUSH
11778: PPUSH
11779: PPUSH
11780: PPUSH
// result := false ;
11781: LD_ADDR_VAR 0 2
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// side := GetSide ( unit ) ;
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_VAR 0 1
11798: PPUSH
11799: CALL_OW 255
11803: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11804: LD_ADDR_VAR 0 4
11808: PUSH
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL_OW 248
11818: ST_TO_ADDR
// case nat of 1 :
11819: LD_VAR 0 4
11823: PUSH
11824: LD_INT 1
11826: DOUBLE
11827: EQUAL
11828: IFTRUE 11832
11830: GO 11843
11832: POP
// tech := tech_lassight ; 2 :
11833: LD_ADDR_VAR 0 5
11837: PUSH
11838: LD_INT 12
11840: ST_TO_ADDR
11841: GO 11882
11843: LD_INT 2
11845: DOUBLE
11846: EQUAL
11847: IFTRUE 11851
11849: GO 11862
11851: POP
// tech := tech_mortar ; 3 :
11852: LD_ADDR_VAR 0 5
11856: PUSH
11857: LD_INT 41
11859: ST_TO_ADDR
11860: GO 11882
11862: LD_INT 3
11864: DOUBLE
11865: EQUAL
11866: IFTRUE 11870
11868: GO 11881
11870: POP
// tech := tech_bazooka ; end ;
11871: LD_ADDR_VAR 0 5
11875: PUSH
11876: LD_INT 44
11878: ST_TO_ADDR
11879: GO 11882
11881: POP
// if Researched ( side , tech ) then
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_VAR 0 5
11891: PPUSH
11892: CALL_OW 325
11896: IFFALSE 11923
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11898: LD_ADDR_VAR 0 2
11902: PUSH
11903: LD_INT 5
11905: PUSH
11906: LD_INT 8
11908: PUSH
11909: LD_INT 9
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: PUSH
11917: LD_VAR 0 4
11921: ARRAY
11922: ST_TO_ADDR
// end ;
11923: LD_VAR 0 2
11927: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11928: LD_INT 0
11930: PPUSH
11931: PPUSH
11932: PPUSH
// if not mines then
11933: LD_VAR 0 2
11937: NOT
11938: IFFALSE 11942
// exit ;
11940: GO 12086
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11942: LD_ADDR_VAR 0 5
11946: PUSH
11947: LD_INT 81
11949: PUSH
11950: LD_VAR 0 1
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 3
11961: PUSH
11962: LD_INT 21
11964: PUSH
11965: LD_INT 3
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PPUSH
11980: CALL_OW 69
11984: ST_TO_ADDR
// for i in mines do
11985: LD_ADDR_VAR 0 4
11989: PUSH
11990: LD_VAR 0 2
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12084
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11998: LD_VAR 0 4
12002: PUSH
12003: LD_INT 1
12005: ARRAY
12006: PPUSH
12007: LD_VAR 0 4
12011: PUSH
12012: LD_INT 2
12014: ARRAY
12015: PPUSH
12016: CALL_OW 458
12020: NOT
12021: IFFALSE 12025
// continue ;
12023: GO 11995
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12025: LD_VAR 0 4
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 4
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 428
12047: PUSH
12048: LD_VAR 0 5
12052: IN
12053: IFFALSE 12082
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12055: LD_VAR 0 4
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: LD_VAR 0 4
12068: PUSH
12069: LD_INT 2
12071: ARRAY
12072: PPUSH
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 456
// end ;
12082: GO 11995
12084: POP
12085: POP
// end ;
12086: LD_VAR 0 3
12090: RET
// export function Count ( array ) ; begin
12091: LD_INT 0
12093: PPUSH
// result := array + 0 ;
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: LD_VAR 0 1
12103: PUSH
12104: LD_INT 0
12106: PLUS
12107: ST_TO_ADDR
// end ;
12108: LD_VAR 0 2
12112: RET
// export function IsEmpty ( building ) ; begin
12113: LD_INT 0
12115: PPUSH
// if not building then
12116: LD_VAR 0 1
12120: NOT
12121: IFFALSE 12125
// exit ;
12123: GO 12168
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_VAR 0 1
12134: PUSH
12135: LD_INT 22
12137: PUSH
12138: LD_VAR 0 1
12142: PPUSH
12143: CALL_OW 255
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 58
12154: PUSH
12155: EMPTY
12156: LIST
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PPUSH
12162: CALL_OW 69
12166: IN
12167: ST_TO_ADDR
// end ;
12168: LD_VAR 0 2
12172: RET
// export function IsNotFull ( building ) ; var places ; begin
12173: LD_INT 0
12175: PPUSH
12176: PPUSH
// if not building then
12177: LD_VAR 0 1
12181: NOT
12182: IFFALSE 12186
// exit ;
12184: GO 12214
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12186: LD_ADDR_VAR 0 2
12190: PUSH
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_INT 3
12198: PUSH
12199: LD_INT 62
12201: PUSH
12202: EMPTY
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PPUSH
12209: CALL_OW 72
12213: ST_TO_ADDR
// end ;
12214: LD_VAR 0 2
12218: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
12224: PPUSH
// tmp := [ ] ;
12225: LD_ADDR_VAR 0 3
12229: PUSH
12230: EMPTY
12231: ST_TO_ADDR
// list := [ ] ;
12232: LD_ADDR_VAR 0 5
12236: PUSH
12237: EMPTY
12238: ST_TO_ADDR
// for i = 16 to 25 do
12239: LD_ADDR_VAR 0 4
12243: PUSH
12244: DOUBLE
12245: LD_INT 16
12247: DEC
12248: ST_TO_ADDR
12249: LD_INT 25
12251: PUSH
12252: FOR_TO
12253: IFFALSE 12326
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12255: LD_ADDR_VAR 0 3
12259: PUSH
12260: LD_VAR 0 3
12264: PUSH
12265: LD_INT 22
12267: PUSH
12268: LD_VAR 0 1
12272: PPUSH
12273: CALL_OW 255
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 91
12284: PUSH
12285: LD_VAR 0 1
12289: PUSH
12290: LD_INT 6
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 30
12300: PUSH
12301: LD_VAR 0 4
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: PPUSH
12318: CALL_OW 69
12322: ADD
12323: ST_TO_ADDR
12324: GO 12252
12326: POP
12327: POP
// for i = 1 to tmp do
12328: LD_ADDR_VAR 0 4
12332: PUSH
12333: DOUBLE
12334: LD_INT 1
12336: DEC
12337: ST_TO_ADDR
12338: LD_VAR 0 3
12342: PUSH
12343: FOR_TO
12344: IFFALSE 12432
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12346: LD_ADDR_VAR 0 5
12350: PUSH
12351: LD_VAR 0 5
12355: PUSH
12356: LD_VAR 0 3
12360: PUSH
12361: LD_VAR 0 4
12365: ARRAY
12366: PPUSH
12367: CALL_OW 266
12371: PUSH
12372: LD_VAR 0 3
12376: PUSH
12377: LD_VAR 0 4
12381: ARRAY
12382: PPUSH
12383: CALL_OW 250
12387: PUSH
12388: LD_VAR 0 3
12392: PUSH
12393: LD_VAR 0 4
12397: ARRAY
12398: PPUSH
12399: CALL_OW 251
12403: PUSH
12404: LD_VAR 0 3
12408: PUSH
12409: LD_VAR 0 4
12413: ARRAY
12414: PPUSH
12415: CALL_OW 254
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: EMPTY
12427: LIST
12428: ADD
12429: ST_TO_ADDR
12430: GO 12343
12432: POP
12433: POP
// result := list ;
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_VAR 0 5
12443: ST_TO_ADDR
// end ;
12444: LD_VAR 0 2
12448: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12449: LD_INT 0
12451: PPUSH
12452: PPUSH
12453: PPUSH
12454: PPUSH
12455: PPUSH
12456: PPUSH
12457: PPUSH
// if not factory then
12458: LD_VAR 0 1
12462: NOT
12463: IFFALSE 12467
// exit ;
12465: GO 13060
// if control = control_apeman then
12467: LD_VAR 0 4
12471: PUSH
12472: LD_INT 5
12474: EQUAL
12475: IFFALSE 12584
// begin tmp := UnitsInside ( factory ) ;
12477: LD_ADDR_VAR 0 8
12481: PUSH
12482: LD_VAR 0 1
12486: PPUSH
12487: CALL_OW 313
12491: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12492: LD_VAR 0 8
12496: PPUSH
12497: LD_INT 25
12499: PUSH
12500: LD_INT 12
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 72
12511: NOT
12512: IFFALSE 12522
// control := control_manual ;
12514: LD_ADDR_VAR 0 4
12518: PUSH
12519: LD_INT 1
12521: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12522: LD_ADDR_VAR 0 8
12526: PUSH
12527: LD_VAR 0 1
12531: PPUSH
12532: CALL 12219 0 1
12536: ST_TO_ADDR
// if tmp then
12537: LD_VAR 0 8
12541: IFFALSE 12584
// begin for i in tmp do
12543: LD_ADDR_VAR 0 7
12547: PUSH
12548: LD_VAR 0 8
12552: PUSH
12553: FOR_IN
12554: IFFALSE 12582
// if i [ 1 ] = b_ext_radio then
12556: LD_VAR 0 7
12560: PUSH
12561: LD_INT 1
12563: ARRAY
12564: PUSH
12565: LD_INT 22
12567: EQUAL
12568: IFFALSE 12580
// begin control := control_remote ;
12570: LD_ADDR_VAR 0 4
12574: PUSH
12575: LD_INT 2
12577: ST_TO_ADDR
// break ;
12578: GO 12582
// end ;
12580: GO 12553
12582: POP
12583: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12584: LD_VAR 0 1
12588: PPUSH
12589: LD_VAR 0 2
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_VAR 0 4
12603: PPUSH
12604: LD_VAR 0 5
12608: PPUSH
12609: CALL_OW 448
12613: IFFALSE 12648
// begin result := [ chassis , engine , control , weapon ] ;
12615: LD_ADDR_VAR 0 6
12619: PUSH
12620: LD_VAR 0 2
12624: PUSH
12625: LD_VAR 0 3
12629: PUSH
12630: LD_VAR 0 4
12634: PUSH
12635: LD_VAR 0 5
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: ST_TO_ADDR
// exit ;
12646: GO 13060
// end ; _chassis := AvailableChassisList ( factory ) ;
12648: LD_ADDR_VAR 0 9
12652: PUSH
12653: LD_VAR 0 1
12657: PPUSH
12658: CALL_OW 475
12662: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12663: LD_ADDR_VAR 0 11
12667: PUSH
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 476
12677: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12678: LD_ADDR_VAR 0 12
12682: PUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: CALL_OW 477
12692: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12693: LD_ADDR_VAR 0 10
12697: PUSH
12698: LD_VAR 0 1
12702: PPUSH
12703: CALL_OW 478
12707: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12708: LD_VAR 0 9
12712: NOT
12713: PUSH
12714: LD_VAR 0 11
12718: NOT
12719: OR
12720: PUSH
12721: LD_VAR 0 12
12725: NOT
12726: OR
12727: PUSH
12728: LD_VAR 0 10
12732: NOT
12733: OR
12734: IFFALSE 12769
// begin result := [ chassis , engine , control , weapon ] ;
12736: LD_ADDR_VAR 0 6
12740: PUSH
12741: LD_VAR 0 2
12745: PUSH
12746: LD_VAR 0 3
12750: PUSH
12751: LD_VAR 0 4
12755: PUSH
12756: LD_VAR 0 5
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: ST_TO_ADDR
// exit ;
12767: GO 13060
// end ; if not chassis in _chassis then
12769: LD_VAR 0 2
12773: PUSH
12774: LD_VAR 0 9
12778: IN
12779: NOT
12780: IFFALSE 12806
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12782: LD_ADDR_VAR 0 2
12786: PUSH
12787: LD_VAR 0 9
12791: PUSH
12792: LD_INT 1
12794: PPUSH
12795: LD_VAR 0 9
12799: PPUSH
12800: CALL_OW 12
12804: ARRAY
12805: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12806: LD_VAR 0 2
12810: PPUSH
12811: LD_VAR 0 3
12815: PPUSH
12816: CALL 13065 0 2
12820: NOT
12821: IFFALSE 12880
// repeat engine := _engine [ 1 ] ;
12823: LD_ADDR_VAR 0 3
12827: PUSH
12828: LD_VAR 0 11
12832: PUSH
12833: LD_INT 1
12835: ARRAY
12836: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12837: LD_ADDR_VAR 0 11
12841: PUSH
12842: LD_VAR 0 11
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 3
12854: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12855: LD_VAR 0 2
12859: PPUSH
12860: LD_VAR 0 3
12864: PPUSH
12865: CALL 13065 0 2
12869: PUSH
12870: LD_VAR 0 11
12874: PUSH
12875: EMPTY
12876: EQUAL
12877: OR
12878: IFFALSE 12823
// if not control in _control then
12880: LD_VAR 0 4
12884: PUSH
12885: LD_VAR 0 12
12889: IN
12890: NOT
12891: IFFALSE 12917
// control := _control [ rand ( 1 , _control ) ] ;
12893: LD_ADDR_VAR 0 4
12897: PUSH
12898: LD_VAR 0 12
12902: PUSH
12903: LD_INT 1
12905: PPUSH
12906: LD_VAR 0 12
12910: PPUSH
12911: CALL_OW 12
12915: ARRAY
12916: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12917: LD_VAR 0 2
12921: PPUSH
12922: LD_VAR 0 5
12926: PPUSH
12927: CALL 13285 0 2
12931: NOT
12932: IFFALSE 12991
// repeat weapon := _weapon [ 1 ] ;
12934: LD_ADDR_VAR 0 5
12938: PUSH
12939: LD_VAR 0 10
12943: PUSH
12944: LD_INT 1
12946: ARRAY
12947: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12948: LD_ADDR_VAR 0 10
12952: PUSH
12953: LD_VAR 0 10
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: CALL_OW 3
12965: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12966: LD_VAR 0 2
12970: PPUSH
12971: LD_VAR 0 5
12975: PPUSH
12976: CALL 13285 0 2
12980: PUSH
12981: LD_VAR 0 10
12985: PUSH
12986: EMPTY
12987: EQUAL
12988: OR
12989: IFFALSE 12934
// result := [ ] ;
12991: LD_ADDR_VAR 0 6
12995: PUSH
12996: EMPTY
12997: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12998: LD_VAR 0 1
13002: PPUSH
13003: LD_VAR 0 2
13007: PPUSH
13008: LD_VAR 0 3
13012: PPUSH
13013: LD_VAR 0 4
13017: PPUSH
13018: LD_VAR 0 5
13022: PPUSH
13023: CALL_OW 448
13027: IFFALSE 13060
// result := [ chassis , engine , control , weapon ] ;
13029: LD_ADDR_VAR 0 6
13033: PUSH
13034: LD_VAR 0 2
13038: PUSH
13039: LD_VAR 0 3
13043: PUSH
13044: LD_VAR 0 4
13048: PUSH
13049: LD_VAR 0 5
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: ST_TO_ADDR
// end ;
13060: LD_VAR 0 6
13064: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13065: LD_INT 0
13067: PPUSH
// if not chassis or not engine then
13068: LD_VAR 0 1
13072: NOT
13073: PUSH
13074: LD_VAR 0 2
13078: NOT
13079: OR
13080: IFFALSE 13084
// exit ;
13082: GO 13280
// case engine of engine_solar :
13084: LD_VAR 0 2
13088: PUSH
13089: LD_INT 2
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13135
13097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 11
13105: PUSH
13106: LD_INT 12
13108: PUSH
13109: LD_INT 13
13111: PUSH
13112: LD_INT 14
13114: PUSH
13115: LD_INT 1
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 3
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: ST_TO_ADDR
13133: GO 13264
13135: LD_INT 1
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13205
13143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: LD_INT 11
13151: PUSH
13152: LD_INT 12
13154: PUSH
13155: LD_INT 13
13157: PUSH
13158: LD_INT 14
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: LD_INT 2
13166: PUSH
13167: LD_INT 3
13169: PUSH
13170: LD_INT 4
13172: PUSH
13173: LD_INT 5
13175: PUSH
13176: LD_INT 21
13178: PUSH
13179: LD_INT 23
13181: PUSH
13182: LD_INT 22
13184: PUSH
13185: LD_INT 24
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: ST_TO_ADDR
13203: GO 13264
13205: LD_INT 3
13207: DOUBLE
13208: EQUAL
13209: IFTRUE 13213
13211: GO 13263
13213: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13214: LD_ADDR_VAR 0 3
13218: PUSH
13219: LD_INT 13
13221: PUSH
13222: LD_INT 14
13224: PUSH
13225: LD_INT 2
13227: PUSH
13228: LD_INT 3
13230: PUSH
13231: LD_INT 4
13233: PUSH
13234: LD_INT 5
13236: PUSH
13237: LD_INT 21
13239: PUSH
13240: LD_INT 22
13242: PUSH
13243: LD_INT 23
13245: PUSH
13246: LD_INT 24
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: ST_TO_ADDR
13261: GO 13264
13263: POP
// result := ( chassis in result ) ;
13264: LD_ADDR_VAR 0 3
13268: PUSH
13269: LD_VAR 0 1
13273: PUSH
13274: LD_VAR 0 3
13278: IN
13279: ST_TO_ADDR
// end ;
13280: LD_VAR 0 3
13284: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13285: LD_INT 0
13287: PPUSH
// if not chassis or not weapon then
13288: LD_VAR 0 1
13292: NOT
13293: PUSH
13294: LD_VAR 0 2
13298: NOT
13299: OR
13300: IFFALSE 13304
// exit ;
13302: GO 14364
// case weapon of us_machine_gun :
13304: LD_VAR 0 2
13308: PUSH
13309: LD_INT 2
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13347
13317: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: LD_INT 2
13328: PUSH
13329: LD_INT 3
13331: PUSH
13332: LD_INT 4
13334: PUSH
13335: LD_INT 5
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: ST_TO_ADDR
13345: GO 14348
13347: LD_INT 3
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13385
13355: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13356: LD_ADDR_VAR 0 3
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: LD_INT 2
13366: PUSH
13367: LD_INT 3
13369: PUSH
13370: LD_INT 4
13372: PUSH
13373: LD_INT 5
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: ST_TO_ADDR
13383: GO 14348
13385: LD_INT 11
13387: DOUBLE
13388: EQUAL
13389: IFTRUE 13393
13391: GO 13423
13393: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: LD_INT 1
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 3
13407: PUSH
13408: LD_INT 4
13410: PUSH
13411: LD_INT 5
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: ST_TO_ADDR
13421: GO 14348
13423: LD_INT 4
13425: DOUBLE
13426: EQUAL
13427: IFTRUE 13431
13429: GO 13457
13431: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_INT 2
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: LD_INT 4
13445: PUSH
13446: LD_INT 5
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: ST_TO_ADDR
13455: GO 14348
13457: LD_INT 5
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13491
13465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 2
13473: PUSH
13474: LD_INT 3
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: LD_INT 5
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: ST_TO_ADDR
13489: GO 14348
13491: LD_INT 9
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13525
13499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13500: LD_ADDR_VAR 0 3
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 3
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: LD_INT 5
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: ST_TO_ADDR
13523: GO 14348
13525: LD_INT 7
13527: DOUBLE
13528: EQUAL
13529: IFTRUE 13533
13531: GO 13559
13533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13534: LD_ADDR_VAR 0 3
13538: PUSH
13539: LD_INT 2
13541: PUSH
13542: LD_INT 3
13544: PUSH
13545: LD_INT 4
13547: PUSH
13548: LD_INT 5
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: ST_TO_ADDR
13557: GO 14348
13559: LD_INT 12
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13593
13567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13568: LD_ADDR_VAR 0 3
13572: PUSH
13573: LD_INT 2
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: LD_INT 4
13581: PUSH
13582: LD_INT 5
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: ST_TO_ADDR
13591: GO 14348
13593: LD_INT 13
13595: DOUBLE
13596: EQUAL
13597: IFTRUE 13601
13599: GO 13627
13601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13602: LD_ADDR_VAR 0 3
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 3
13612: PUSH
13613: LD_INT 4
13615: PUSH
13616: LD_INT 5
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: ST_TO_ADDR
13625: GO 14348
13627: LD_INT 14
13629: DOUBLE
13630: EQUAL
13631: IFTRUE 13635
13633: GO 13653
13635: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13636: LD_ADDR_VAR 0 3
13640: PUSH
13641: LD_INT 4
13643: PUSH
13644: LD_INT 5
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: ST_TO_ADDR
13651: GO 14348
13653: LD_INT 6
13655: DOUBLE
13656: EQUAL
13657: IFTRUE 13661
13659: GO 13679
13661: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13662: LD_ADDR_VAR 0 3
13666: PUSH
13667: LD_INT 4
13669: PUSH
13670: LD_INT 5
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: ST_TO_ADDR
13677: GO 14348
13679: LD_INT 10
13681: DOUBLE
13682: EQUAL
13683: IFTRUE 13687
13685: GO 13705
13687: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13688: LD_ADDR_VAR 0 3
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: LD_INT 5
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: ST_TO_ADDR
13703: GO 14348
13705: LD_INT 22
13707: DOUBLE
13708: EQUAL
13709: IFTRUE 13713
13711: GO 13739
13713: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13714: LD_ADDR_VAR 0 3
13718: PUSH
13719: LD_INT 11
13721: PUSH
13722: LD_INT 12
13724: PUSH
13725: LD_INT 13
13727: PUSH
13728: LD_INT 14
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: ST_TO_ADDR
13737: GO 14348
13739: LD_INT 23
13741: DOUBLE
13742: EQUAL
13743: IFTRUE 13747
13745: GO 13773
13747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13748: LD_ADDR_VAR 0 3
13752: PUSH
13753: LD_INT 11
13755: PUSH
13756: LD_INT 12
13758: PUSH
13759: LD_INT 13
13761: PUSH
13762: LD_INT 14
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: ST_TO_ADDR
13771: GO 14348
13773: LD_INT 24
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13807
13781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13782: LD_ADDR_VAR 0 3
13786: PUSH
13787: LD_INT 11
13789: PUSH
13790: LD_INT 12
13792: PUSH
13793: LD_INT 13
13795: PUSH
13796: LD_INT 14
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: ST_TO_ADDR
13805: GO 14348
13807: LD_INT 30
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 13841
13815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13816: LD_ADDR_VAR 0 3
13820: PUSH
13821: LD_INT 11
13823: PUSH
13824: LD_INT 12
13826: PUSH
13827: LD_INT 13
13829: PUSH
13830: LD_INT 14
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: ST_TO_ADDR
13839: GO 14348
13841: LD_INT 25
13843: DOUBLE
13844: EQUAL
13845: IFTRUE 13849
13847: GO 13867
13849: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: LD_INT 13
13857: PUSH
13858: LD_INT 14
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: ST_TO_ADDR
13865: GO 14348
13867: LD_INT 27
13869: DOUBLE
13870: EQUAL
13871: IFTRUE 13875
13873: GO 13893
13875: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13876: LD_ADDR_VAR 0 3
13880: PUSH
13881: LD_INT 13
13883: PUSH
13884: LD_INT 14
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: ST_TO_ADDR
13891: GO 14348
13893: LD_INT 92
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13927
13901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13902: LD_ADDR_VAR 0 3
13906: PUSH
13907: LD_INT 11
13909: PUSH
13910: LD_INT 12
13912: PUSH
13913: LD_INT 13
13915: PUSH
13916: LD_INT 14
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: ST_TO_ADDR
13925: GO 14348
13927: LD_INT 28
13929: DOUBLE
13930: EQUAL
13931: IFTRUE 13935
13933: GO 13953
13935: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13936: LD_ADDR_VAR 0 3
13940: PUSH
13941: LD_INT 13
13943: PUSH
13944: LD_INT 14
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: ST_TO_ADDR
13951: GO 14348
13953: LD_INT 29
13955: DOUBLE
13956: EQUAL
13957: IFTRUE 13961
13959: GO 13979
13961: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13962: LD_ADDR_VAR 0 3
13966: PUSH
13967: LD_INT 13
13969: PUSH
13970: LD_INT 14
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: ST_TO_ADDR
13977: GO 14348
13979: LD_INT 31
13981: DOUBLE
13982: EQUAL
13983: IFTRUE 13987
13985: GO 14005
13987: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13988: LD_ADDR_VAR 0 3
13992: PUSH
13993: LD_INT 13
13995: PUSH
13996: LD_INT 14
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: ST_TO_ADDR
14003: GO 14348
14005: LD_INT 26
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14031
14013: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14014: LD_ADDR_VAR 0 3
14018: PUSH
14019: LD_INT 13
14021: PUSH
14022: LD_INT 14
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: ST_TO_ADDR
14029: GO 14348
14031: LD_INT 42
14033: DOUBLE
14034: EQUAL
14035: IFTRUE 14039
14037: GO 14065
14039: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14040: LD_ADDR_VAR 0 3
14044: PUSH
14045: LD_INT 21
14047: PUSH
14048: LD_INT 22
14050: PUSH
14051: LD_INT 23
14053: PUSH
14054: LD_INT 24
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: ST_TO_ADDR
14063: GO 14348
14065: LD_INT 43
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14099
14073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14074: LD_ADDR_VAR 0 3
14078: PUSH
14079: LD_INT 21
14081: PUSH
14082: LD_INT 22
14084: PUSH
14085: LD_INT 23
14087: PUSH
14088: LD_INT 24
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: ST_TO_ADDR
14097: GO 14348
14099: LD_INT 44
14101: DOUBLE
14102: EQUAL
14103: IFTRUE 14107
14105: GO 14133
14107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14108: LD_ADDR_VAR 0 3
14112: PUSH
14113: LD_INT 21
14115: PUSH
14116: LD_INT 22
14118: PUSH
14119: LD_INT 23
14121: PUSH
14122: LD_INT 24
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: ST_TO_ADDR
14131: GO 14348
14133: LD_INT 45
14135: DOUBLE
14136: EQUAL
14137: IFTRUE 14141
14139: GO 14167
14141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14142: LD_ADDR_VAR 0 3
14146: PUSH
14147: LD_INT 21
14149: PUSH
14150: LD_INT 22
14152: PUSH
14153: LD_INT 23
14155: PUSH
14156: LD_INT 24
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: ST_TO_ADDR
14165: GO 14348
14167: LD_INT 49
14169: DOUBLE
14170: EQUAL
14171: IFTRUE 14175
14173: GO 14201
14175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_INT 21
14183: PUSH
14184: LD_INT 22
14186: PUSH
14187: LD_INT 23
14189: PUSH
14190: LD_INT 24
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: ST_TO_ADDR
14199: GO 14348
14201: LD_INT 51
14203: DOUBLE
14204: EQUAL
14205: IFTRUE 14209
14207: GO 14235
14209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14210: LD_ADDR_VAR 0 3
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 22
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 24
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: ST_TO_ADDR
14233: GO 14348
14235: LD_INT 52
14237: DOUBLE
14238: EQUAL
14239: IFTRUE 14243
14241: GO 14269
14243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14244: LD_ADDR_VAR 0 3
14248: PUSH
14249: LD_INT 21
14251: PUSH
14252: LD_INT 22
14254: PUSH
14255: LD_INT 23
14257: PUSH
14258: LD_INT 24
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: ST_TO_ADDR
14267: GO 14348
14269: LD_INT 53
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14295
14277: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: LD_INT 23
14285: PUSH
14286: LD_INT 24
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: ST_TO_ADDR
14293: GO 14348
14295: LD_INT 46
14297: DOUBLE
14298: EQUAL
14299: IFTRUE 14303
14301: GO 14321
14303: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14304: LD_ADDR_VAR 0 3
14308: PUSH
14309: LD_INT 23
14311: PUSH
14312: LD_INT 24
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: ST_TO_ADDR
14319: GO 14348
14321: LD_INT 47
14323: DOUBLE
14324: EQUAL
14325: IFTRUE 14329
14327: GO 14347
14329: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14330: LD_ADDR_VAR 0 3
14334: PUSH
14335: LD_INT 23
14337: PUSH
14338: LD_INT 24
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: ST_TO_ADDR
14345: GO 14348
14347: POP
// result := ( chassis in result ) ;
14348: LD_ADDR_VAR 0 3
14352: PUSH
14353: LD_VAR 0 1
14357: PUSH
14358: LD_VAR 0 3
14362: IN
14363: ST_TO_ADDR
// end ;
14364: LD_VAR 0 3
14368: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14369: LD_INT 0
14371: PPUSH
14372: PPUSH
14373: PPUSH
14374: PPUSH
14375: PPUSH
14376: PPUSH
14377: PPUSH
// result := array ;
14378: LD_ADDR_VAR 0 5
14382: PUSH
14383: LD_VAR 0 1
14387: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14388: LD_VAR 0 1
14392: NOT
14393: PUSH
14394: LD_VAR 0 2
14398: NOT
14399: OR
14400: PUSH
14401: LD_VAR 0 3
14405: NOT
14406: OR
14407: PUSH
14408: LD_VAR 0 2
14412: PUSH
14413: LD_VAR 0 1
14417: GREATER
14418: OR
14419: PUSH
14420: LD_VAR 0 3
14424: PUSH
14425: LD_VAR 0 1
14429: GREATER
14430: OR
14431: IFFALSE 14435
// exit ;
14433: GO 14731
// if direction then
14435: LD_VAR 0 4
14439: IFFALSE 14503
// begin d := 1 ;
14441: LD_ADDR_VAR 0 9
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// if i_from > i_to then
14449: LD_VAR 0 2
14453: PUSH
14454: LD_VAR 0 3
14458: GREATER
14459: IFFALSE 14485
// length := ( array - i_from ) + i_to else
14461: LD_ADDR_VAR 0 11
14465: PUSH
14466: LD_VAR 0 1
14470: PUSH
14471: LD_VAR 0 2
14475: MINUS
14476: PUSH
14477: LD_VAR 0 3
14481: PLUS
14482: ST_TO_ADDR
14483: GO 14501
// length := i_to - i_from ;
14485: LD_ADDR_VAR 0 11
14489: PUSH
14490: LD_VAR 0 3
14494: PUSH
14495: LD_VAR 0 2
14499: MINUS
14500: ST_TO_ADDR
// end else
14501: GO 14564
// begin d := - 1 ;
14503: LD_ADDR_VAR 0 9
14507: PUSH
14508: LD_INT 1
14510: NEG
14511: ST_TO_ADDR
// if i_from > i_to then
14512: LD_VAR 0 2
14516: PUSH
14517: LD_VAR 0 3
14521: GREATER
14522: IFFALSE 14542
// length := i_from - i_to else
14524: LD_ADDR_VAR 0 11
14528: PUSH
14529: LD_VAR 0 2
14533: PUSH
14534: LD_VAR 0 3
14538: MINUS
14539: ST_TO_ADDR
14540: GO 14564
// length := ( array - i_to ) + i_from ;
14542: LD_ADDR_VAR 0 11
14546: PUSH
14547: LD_VAR 0 1
14551: PUSH
14552: LD_VAR 0 3
14556: MINUS
14557: PUSH
14558: LD_VAR 0 2
14562: PLUS
14563: ST_TO_ADDR
// end ; if not length then
14564: LD_VAR 0 11
14568: NOT
14569: IFFALSE 14573
// exit ;
14571: GO 14731
// tmp := array ;
14573: LD_ADDR_VAR 0 10
14577: PUSH
14578: LD_VAR 0 1
14582: ST_TO_ADDR
// for i = 1 to length do
14583: LD_ADDR_VAR 0 6
14587: PUSH
14588: DOUBLE
14589: LD_INT 1
14591: DEC
14592: ST_TO_ADDR
14593: LD_VAR 0 11
14597: PUSH
14598: FOR_TO
14599: IFFALSE 14719
// begin for j = 1 to array do
14601: LD_ADDR_VAR 0 7
14605: PUSH
14606: DOUBLE
14607: LD_INT 1
14609: DEC
14610: ST_TO_ADDR
14611: LD_VAR 0 1
14615: PUSH
14616: FOR_TO
14617: IFFALSE 14705
// begin k := j + d ;
14619: LD_ADDR_VAR 0 8
14623: PUSH
14624: LD_VAR 0 7
14628: PUSH
14629: LD_VAR 0 9
14633: PLUS
14634: ST_TO_ADDR
// if k > array then
14635: LD_VAR 0 8
14639: PUSH
14640: LD_VAR 0 1
14644: GREATER
14645: IFFALSE 14655
// k := 1 ;
14647: LD_ADDR_VAR 0 8
14651: PUSH
14652: LD_INT 1
14654: ST_TO_ADDR
// if not k then
14655: LD_VAR 0 8
14659: NOT
14660: IFFALSE 14672
// k := array ;
14662: LD_ADDR_VAR 0 8
14666: PUSH
14667: LD_VAR 0 1
14671: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14672: LD_ADDR_VAR 0 10
14676: PUSH
14677: LD_VAR 0 10
14681: PPUSH
14682: LD_VAR 0 8
14686: PPUSH
14687: LD_VAR 0 1
14691: PUSH
14692: LD_VAR 0 7
14696: ARRAY
14697: PPUSH
14698: CALL_OW 1
14702: ST_TO_ADDR
// end ;
14703: GO 14616
14705: POP
14706: POP
// array := tmp ;
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_VAR 0 10
14716: ST_TO_ADDR
// end ;
14717: GO 14598
14719: POP
14720: POP
// result := array ;
14721: LD_ADDR_VAR 0 5
14725: PUSH
14726: LD_VAR 0 1
14730: ST_TO_ADDR
// end ;
14731: LD_VAR 0 5
14735: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14736: LD_INT 0
14738: PPUSH
14739: PPUSH
// result := 0 ;
14740: LD_ADDR_VAR 0 3
14744: PUSH
14745: LD_INT 0
14747: ST_TO_ADDR
// if not array or not value in array then
14748: LD_VAR 0 1
14752: NOT
14753: PUSH
14754: LD_VAR 0 2
14758: PUSH
14759: LD_VAR 0 1
14763: IN
14764: NOT
14765: OR
14766: IFFALSE 14770
// exit ;
14768: GO 14824
// for i = 1 to array do
14770: LD_ADDR_VAR 0 4
14774: PUSH
14775: DOUBLE
14776: LD_INT 1
14778: DEC
14779: ST_TO_ADDR
14780: LD_VAR 0 1
14784: PUSH
14785: FOR_TO
14786: IFFALSE 14822
// if value = array [ i ] then
14788: LD_VAR 0 2
14792: PUSH
14793: LD_VAR 0 1
14797: PUSH
14798: LD_VAR 0 4
14802: ARRAY
14803: EQUAL
14804: IFFALSE 14820
// begin result := i ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_VAR 0 4
14815: ST_TO_ADDR
// exit ;
14816: POP
14817: POP
14818: GO 14824
// end ;
14820: GO 14785
14822: POP
14823: POP
// end ;
14824: LD_VAR 0 3
14828: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14829: LD_INT 0
14831: PPUSH
// vc_chassis := chassis ;
14832: LD_ADDR_OWVAR 37
14836: PUSH
14837: LD_VAR 0 1
14841: ST_TO_ADDR
// vc_engine := engine ;
14842: LD_ADDR_OWVAR 39
14846: PUSH
14847: LD_VAR 0 2
14851: ST_TO_ADDR
// vc_control := control ;
14852: LD_ADDR_OWVAR 38
14856: PUSH
14857: LD_VAR 0 3
14861: ST_TO_ADDR
// vc_weapon := weapon ;
14862: LD_ADDR_OWVAR 40
14866: PUSH
14867: LD_VAR 0 4
14871: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14872: LD_ADDR_OWVAR 41
14876: PUSH
14877: LD_VAR 0 5
14881: ST_TO_ADDR
// end ;
14882: LD_VAR 0 6
14886: RET
// export function WantPlant ( unit ) ; var task ; begin
14887: LD_INT 0
14889: PPUSH
14890: PPUSH
// result := false ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_INT 0
14898: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_VAR 0 1
14908: PPUSH
14909: CALL_OW 437
14913: ST_TO_ADDR
// if task then
14914: LD_VAR 0 3
14918: IFFALSE 14946
// if task [ 1 ] [ 1 ] = p then
14920: LD_VAR 0 3
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: PUSH
14933: LD_STRING p
14935: EQUAL
14936: IFFALSE 14946
// result := true ;
14938: LD_ADDR_VAR 0 2
14942: PUSH
14943: LD_INT 1
14945: ST_TO_ADDR
// end ;
14946: LD_VAR 0 2
14950: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
14955: PPUSH
14956: PPUSH
// if pos < 1 then
14957: LD_VAR 0 2
14961: PUSH
14962: LD_INT 1
14964: LESS
14965: IFFALSE 14969
// exit ;
14967: GO 15272
// if pos = 1 then
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: EQUAL
14977: IFFALSE 15010
// result := Replace ( arr , pos [ 1 ] , value ) else
14979: LD_ADDR_VAR 0 4
14983: PUSH
14984: LD_VAR 0 1
14988: PPUSH
14989: LD_VAR 0 2
14993: PUSH
14994: LD_INT 1
14996: ARRAY
14997: PPUSH
14998: LD_VAR 0 3
15002: PPUSH
15003: CALL_OW 1
15007: ST_TO_ADDR
15008: GO 15272
// begin tmp := arr ;
15010: LD_ADDR_VAR 0 6
15014: PUSH
15015: LD_VAR 0 1
15019: ST_TO_ADDR
// s_arr := [ tmp ] ;
15020: LD_ADDR_VAR 0 7
15024: PUSH
15025: LD_VAR 0 6
15029: PUSH
15030: EMPTY
15031: LIST
15032: ST_TO_ADDR
// for i = 1 to pos - 1 do
15033: LD_ADDR_VAR 0 5
15037: PUSH
15038: DOUBLE
15039: LD_INT 1
15041: DEC
15042: ST_TO_ADDR
15043: LD_VAR 0 2
15047: PUSH
15048: LD_INT 1
15050: MINUS
15051: PUSH
15052: FOR_TO
15053: IFFALSE 15098
// begin tmp := tmp [ pos [ i ] ] ;
15055: LD_ADDR_VAR 0 6
15059: PUSH
15060: LD_VAR 0 6
15064: PUSH
15065: LD_VAR 0 2
15069: PUSH
15070: LD_VAR 0 5
15074: ARRAY
15075: ARRAY
15076: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15077: LD_ADDR_VAR 0 7
15081: PUSH
15082: LD_VAR 0 7
15086: PUSH
15087: LD_VAR 0 6
15091: PUSH
15092: EMPTY
15093: LIST
15094: ADD
15095: ST_TO_ADDR
// end ;
15096: GO 15052
15098: POP
15099: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15100: LD_ADDR_VAR 0 6
15104: PUSH
15105: LD_VAR 0 6
15109: PPUSH
15110: LD_VAR 0 2
15114: PUSH
15115: LD_VAR 0 2
15119: ARRAY
15120: PPUSH
15121: LD_VAR 0 3
15125: PPUSH
15126: CALL_OW 1
15130: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15131: LD_ADDR_VAR 0 7
15135: PUSH
15136: LD_VAR 0 7
15140: PPUSH
15141: LD_VAR 0 7
15145: PPUSH
15146: LD_VAR 0 6
15150: PPUSH
15151: CALL_OW 1
15155: ST_TO_ADDR
// for i = s_arr downto 2 do
15156: LD_ADDR_VAR 0 5
15160: PUSH
15161: DOUBLE
15162: LD_VAR 0 7
15166: INC
15167: ST_TO_ADDR
15168: LD_INT 2
15170: PUSH
15171: FOR_DOWNTO
15172: IFFALSE 15256
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15174: LD_ADDR_VAR 0 6
15178: PUSH
15179: LD_VAR 0 7
15183: PUSH
15184: LD_VAR 0 5
15188: PUSH
15189: LD_INT 1
15191: MINUS
15192: ARRAY
15193: PPUSH
15194: LD_VAR 0 2
15198: PUSH
15199: LD_VAR 0 5
15203: PUSH
15204: LD_INT 1
15206: MINUS
15207: ARRAY
15208: PPUSH
15209: LD_VAR 0 7
15213: PUSH
15214: LD_VAR 0 5
15218: ARRAY
15219: PPUSH
15220: CALL_OW 1
15224: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15225: LD_ADDR_VAR 0 7
15229: PUSH
15230: LD_VAR 0 7
15234: PPUSH
15235: LD_VAR 0 5
15239: PUSH
15240: LD_INT 1
15242: MINUS
15243: PPUSH
15244: LD_VAR 0 6
15248: PPUSH
15249: CALL_OW 1
15253: ST_TO_ADDR
// end ;
15254: GO 15171
15256: POP
15257: POP
// result := s_arr [ 1 ] ;
15258: LD_ADDR_VAR 0 4
15262: PUSH
15263: LD_VAR 0 7
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: ST_TO_ADDR
// end ; end ;
15272: LD_VAR 0 4
15276: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15277: LD_INT 0
15279: PPUSH
15280: PPUSH
// if not list then
15281: LD_VAR 0 1
15285: NOT
15286: IFFALSE 15290
// exit ;
15288: GO 15381
// i := list [ pos1 ] ;
15290: LD_ADDR_VAR 0 5
15294: PUSH
15295: LD_VAR 0 1
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
// if not i then
15306: LD_VAR 0 5
15310: NOT
15311: IFFALSE 15315
// exit ;
15313: GO 15381
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15315: LD_ADDR_VAR 0 1
15319: PUSH
15320: LD_VAR 0 1
15324: PPUSH
15325: LD_VAR 0 2
15329: PPUSH
15330: LD_VAR 0 1
15334: PUSH
15335: LD_VAR 0 3
15339: ARRAY
15340: PPUSH
15341: CALL_OW 1
15345: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15346: LD_ADDR_VAR 0 1
15350: PUSH
15351: LD_VAR 0 1
15355: PPUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: LD_VAR 0 5
15365: PPUSH
15366: CALL_OW 1
15370: ST_TO_ADDR
// result := list ;
15371: LD_ADDR_VAR 0 4
15375: PUSH
15376: LD_VAR 0 1
15380: ST_TO_ADDR
// end ;
15381: LD_VAR 0 4
15385: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15386: LD_INT 0
15388: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15389: LD_ADDR_VAR 0 5
15393: PUSH
15394: LD_VAR 0 1
15398: PPUSH
15399: CALL_OW 250
15403: PPUSH
15404: LD_VAR 0 1
15408: PPUSH
15409: CALL_OW 251
15413: PPUSH
15414: LD_VAR 0 2
15418: PPUSH
15419: LD_VAR 0 3
15423: PPUSH
15424: LD_VAR 0 4
15428: PPUSH
15429: CALL 15807 0 5
15433: ST_TO_ADDR
// end ;
15434: LD_VAR 0 5
15438: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15439: LD_INT 0
15441: PPUSH
15442: PPUSH
15443: PPUSH
15444: PPUSH
// if not list or not unit then
15445: LD_VAR 0 2
15449: NOT
15450: PUSH
15451: LD_VAR 0 1
15455: NOT
15456: OR
15457: IFFALSE 15461
// exit ;
15459: GO 15802
// result := [ ] ;
15461: LD_ADDR_VAR 0 5
15465: PUSH
15466: EMPTY
15467: ST_TO_ADDR
// for i in list do
15468: LD_ADDR_VAR 0 6
15472: PUSH
15473: LD_VAR 0 2
15477: PUSH
15478: FOR_IN
15479: IFFALSE 15697
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15481: LD_ADDR_VAR 0 8
15485: PUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: LD_VAR 0 6
15495: PUSH
15496: LD_INT 1
15498: ARRAY
15499: PPUSH
15500: LD_VAR 0 6
15504: PUSH
15505: LD_INT 2
15507: ARRAY
15508: PPUSH
15509: CALL_OW 297
15513: ST_TO_ADDR
// if not Count ( result ) then
15514: LD_VAR 0 5
15518: PPUSH
15519: CALL 12091 0 1
15523: NOT
15524: IFFALSE 15557
// begin result := Join ( result , [ i , tmp ] ) ;
15526: LD_ADDR_VAR 0 5
15530: PUSH
15531: LD_VAR 0 5
15535: PPUSH
15536: LD_VAR 0 6
15540: PUSH
15541: LD_VAR 0 8
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL 47700 0 2
15554: ST_TO_ADDR
// continue ;
15555: GO 15478
// end ; if result [ result ] [ 2 ] <= tmp then
15557: LD_VAR 0 5
15561: PUSH
15562: LD_VAR 0 5
15566: ARRAY
15567: PUSH
15568: LD_INT 2
15570: ARRAY
15571: PUSH
15572: LD_VAR 0 8
15576: LESSEQUAL
15577: IFFALSE 15610
// result := Join ( result , [ i , tmp ] ) else
15579: LD_ADDR_VAR 0 5
15583: PUSH
15584: LD_VAR 0 5
15588: PPUSH
15589: LD_VAR 0 6
15593: PUSH
15594: LD_VAR 0 8
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PPUSH
15603: CALL 47700 0 2
15607: ST_TO_ADDR
15608: GO 15695
// begin for j := 1 to Count ( result ) do
15610: LD_ADDR_VAR 0 7
15614: PUSH
15615: DOUBLE
15616: LD_INT 1
15618: DEC
15619: ST_TO_ADDR
15620: LD_VAR 0 5
15624: PPUSH
15625: CALL 12091 0 1
15629: PUSH
15630: FOR_TO
15631: IFFALSE 15693
// begin if tmp < result [ j ] [ 2 ] then
15633: LD_VAR 0 8
15637: PUSH
15638: LD_VAR 0 5
15642: PUSH
15643: LD_VAR 0 7
15647: ARRAY
15648: PUSH
15649: LD_INT 2
15651: ARRAY
15652: LESS
15653: IFFALSE 15691
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15655: LD_ADDR_VAR 0 5
15659: PUSH
15660: LD_VAR 0 5
15664: PPUSH
15665: LD_VAR 0 7
15669: PPUSH
15670: LD_VAR 0 6
15674: PUSH
15675: LD_VAR 0 8
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 2
15688: ST_TO_ADDR
// break ;
15689: GO 15693
// end ; end ;
15691: GO 15630
15693: POP
15694: POP
// end ; end ;
15695: GO 15478
15697: POP
15698: POP
// if result and not asc then
15699: LD_VAR 0 5
15703: PUSH
15704: LD_VAR 0 3
15708: NOT
15709: AND
15710: IFFALSE 15727
// result := ReverseArray ( result ) ;
15712: LD_ADDR_VAR 0 5
15716: PUSH
15717: LD_VAR 0 5
15721: PPUSH
15722: CALL 42967 0 1
15726: ST_TO_ADDR
// tmp := [ ] ;
15727: LD_ADDR_VAR 0 8
15731: PUSH
15732: EMPTY
15733: ST_TO_ADDR
// if mode then
15734: LD_VAR 0 4
15738: IFFALSE 15802
// begin for i := 1 to result do
15740: LD_ADDR_VAR 0 6
15744: PUSH
15745: DOUBLE
15746: LD_INT 1
15748: DEC
15749: ST_TO_ADDR
15750: LD_VAR 0 5
15754: PUSH
15755: FOR_TO
15756: IFFALSE 15790
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15758: LD_ADDR_VAR 0 8
15762: PUSH
15763: LD_VAR 0 8
15767: PPUSH
15768: LD_VAR 0 5
15772: PUSH
15773: LD_VAR 0 6
15777: ARRAY
15778: PUSH
15779: LD_INT 1
15781: ARRAY
15782: PPUSH
15783: CALL 47700 0 2
15787: ST_TO_ADDR
15788: GO 15755
15790: POP
15791: POP
// result := tmp ;
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_VAR 0 8
15801: ST_TO_ADDR
// end ; end ;
15802: LD_VAR 0 5
15806: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15807: LD_INT 0
15809: PPUSH
15810: PPUSH
15811: PPUSH
15812: PPUSH
// if not list then
15813: LD_VAR 0 3
15817: NOT
15818: IFFALSE 15822
// exit ;
15820: GO 16210
// result := [ ] ;
15822: LD_ADDR_VAR 0 6
15826: PUSH
15827: EMPTY
15828: ST_TO_ADDR
// for i in list do
15829: LD_ADDR_VAR 0 7
15833: PUSH
15834: LD_VAR 0 3
15838: PUSH
15839: FOR_IN
15840: IFFALSE 16042
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15842: LD_ADDR_VAR 0 9
15846: PUSH
15847: LD_VAR 0 7
15851: PPUSH
15852: LD_VAR 0 1
15856: PPUSH
15857: LD_VAR 0 2
15861: PPUSH
15862: CALL_OW 297
15866: ST_TO_ADDR
// if not result then
15867: LD_VAR 0 6
15871: NOT
15872: IFFALSE 15898
// result := [ [ i , tmp ] ] else
15874: LD_ADDR_VAR 0 6
15878: PUSH
15879: LD_VAR 0 7
15883: PUSH
15884: LD_VAR 0 9
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: EMPTY
15894: LIST
15895: ST_TO_ADDR
15896: GO 16040
// begin if result [ result ] [ 2 ] <= tmp then
15898: LD_VAR 0 6
15902: PUSH
15903: LD_VAR 0 6
15907: ARRAY
15908: PUSH
15909: LD_INT 2
15911: ARRAY
15912: PUSH
15913: LD_VAR 0 9
15917: LESSEQUAL
15918: IFFALSE 15960
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15920: LD_ADDR_VAR 0 6
15924: PUSH
15925: LD_VAR 0 6
15929: PPUSH
15930: LD_VAR 0 6
15934: PUSH
15935: LD_INT 1
15937: PLUS
15938: PPUSH
15939: LD_VAR 0 7
15943: PUSH
15944: LD_VAR 0 9
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PPUSH
15953: CALL_OW 2
15957: ST_TO_ADDR
15958: GO 16040
// for j := 1 to result do
15960: LD_ADDR_VAR 0 8
15964: PUSH
15965: DOUBLE
15966: LD_INT 1
15968: DEC
15969: ST_TO_ADDR
15970: LD_VAR 0 6
15974: PUSH
15975: FOR_TO
15976: IFFALSE 16038
// begin if tmp < result [ j ] [ 2 ] then
15978: LD_VAR 0 9
15982: PUSH
15983: LD_VAR 0 6
15987: PUSH
15988: LD_VAR 0 8
15992: ARRAY
15993: PUSH
15994: LD_INT 2
15996: ARRAY
15997: LESS
15998: IFFALSE 16036
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16000: LD_ADDR_VAR 0 6
16004: PUSH
16005: LD_VAR 0 6
16009: PPUSH
16010: LD_VAR 0 8
16014: PPUSH
16015: LD_VAR 0 7
16019: PUSH
16020: LD_VAR 0 9
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PPUSH
16029: CALL_OW 2
16033: ST_TO_ADDR
// break ;
16034: GO 16038
// end ; end ;
16036: GO 15975
16038: POP
16039: POP
// end ; end ;
16040: GO 15839
16042: POP
16043: POP
// if result and not asc then
16044: LD_VAR 0 6
16048: PUSH
16049: LD_VAR 0 4
16053: NOT
16054: AND
16055: IFFALSE 16130
// begin tmp := result ;
16057: LD_ADDR_VAR 0 9
16061: PUSH
16062: LD_VAR 0 6
16066: ST_TO_ADDR
// for i = tmp downto 1 do
16067: LD_ADDR_VAR 0 7
16071: PUSH
16072: DOUBLE
16073: LD_VAR 0 9
16077: INC
16078: ST_TO_ADDR
16079: LD_INT 1
16081: PUSH
16082: FOR_DOWNTO
16083: IFFALSE 16128
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16085: LD_ADDR_VAR 0 6
16089: PUSH
16090: LD_VAR 0 6
16094: PPUSH
16095: LD_VAR 0 9
16099: PUSH
16100: LD_VAR 0 7
16104: MINUS
16105: PUSH
16106: LD_INT 1
16108: PLUS
16109: PPUSH
16110: LD_VAR 0 9
16114: PUSH
16115: LD_VAR 0 7
16119: ARRAY
16120: PPUSH
16121: CALL_OW 1
16125: ST_TO_ADDR
16126: GO 16082
16128: POP
16129: POP
// end ; tmp := [ ] ;
16130: LD_ADDR_VAR 0 9
16134: PUSH
16135: EMPTY
16136: ST_TO_ADDR
// if mode then
16137: LD_VAR 0 5
16141: IFFALSE 16210
// begin for i = 1 to result do
16143: LD_ADDR_VAR 0 7
16147: PUSH
16148: DOUBLE
16149: LD_INT 1
16151: DEC
16152: ST_TO_ADDR
16153: LD_VAR 0 6
16157: PUSH
16158: FOR_TO
16159: IFFALSE 16198
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16161: LD_ADDR_VAR 0 9
16165: PUSH
16166: LD_VAR 0 9
16170: PPUSH
16171: LD_VAR 0 7
16175: PPUSH
16176: LD_VAR 0 6
16180: PUSH
16181: LD_VAR 0 7
16185: ARRAY
16186: PUSH
16187: LD_INT 1
16189: ARRAY
16190: PPUSH
16191: CALL_OW 1
16195: ST_TO_ADDR
16196: GO 16158
16198: POP
16199: POP
// result := tmp ;
16200: LD_ADDR_VAR 0 6
16204: PUSH
16205: LD_VAR 0 9
16209: ST_TO_ADDR
// end ; end ;
16210: LD_VAR 0 6
16214: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16215: LD_INT 0
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16223: LD_ADDR_VAR 0 5
16227: PUSH
16228: LD_INT 0
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: LD_INT 0
16236: PUSH
16237: EMPTY
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: ST_TO_ADDR
// if not x or not y then
16245: LD_VAR 0 2
16249: NOT
16250: PUSH
16251: LD_VAR 0 3
16255: NOT
16256: OR
16257: IFFALSE 16261
// exit ;
16259: GO 17911
// if not range then
16261: LD_VAR 0 4
16265: NOT
16266: IFFALSE 16276
// range := 10 ;
16268: LD_ADDR_VAR 0 4
16272: PUSH
16273: LD_INT 10
16275: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16276: LD_ADDR_VAR 0 8
16280: PUSH
16281: LD_INT 81
16283: PUSH
16284: LD_VAR 0 1
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 92
16295: PUSH
16296: LD_VAR 0 2
16300: PUSH
16301: LD_VAR 0 3
16305: PUSH
16306: LD_VAR 0 4
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 21
16322: PUSH
16323: LD_INT 3
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 69
16343: ST_TO_ADDR
// if not tmp then
16344: LD_VAR 0 8
16348: NOT
16349: IFFALSE 16353
// exit ;
16351: GO 17911
// for i in tmp do
16353: LD_ADDR_VAR 0 6
16357: PUSH
16358: LD_VAR 0 8
16362: PUSH
16363: FOR_IN
16364: IFFALSE 17886
// begin points := [ 0 , 0 , 0 ] ;
16366: LD_ADDR_VAR 0 9
16370: PUSH
16371: LD_INT 0
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: LD_INT 0
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: ST_TO_ADDR
// bpoints := 1 ;
16385: LD_ADDR_VAR 0 10
16389: PUSH
16390: LD_INT 1
16392: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16393: LD_VAR 0 6
16397: PPUSH
16398: CALL_OW 247
16402: PUSH
16403: LD_INT 1
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16989
16411: POP
// begin if GetClass ( i ) = 1 then
16412: LD_VAR 0 6
16416: PPUSH
16417: CALL_OW 257
16421: PUSH
16422: LD_INT 1
16424: EQUAL
16425: IFFALSE 16446
// points := [ 10 , 5 , 3 ] ;
16427: LD_ADDR_VAR 0 9
16431: PUSH
16432: LD_INT 10
16434: PUSH
16435: LD_INT 5
16437: PUSH
16438: LD_INT 3
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16446: LD_VAR 0 6
16450: PPUSH
16451: CALL_OW 257
16455: PUSH
16456: LD_INT 2
16458: PUSH
16459: LD_INT 3
16461: PUSH
16462: LD_INT 4
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: IN
16470: IFFALSE 16491
// points := [ 3 , 2 , 1 ] ;
16472: LD_ADDR_VAR 0 9
16476: PUSH
16477: LD_INT 3
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 1
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16491: LD_VAR 0 6
16495: PPUSH
16496: CALL_OW 257
16500: PUSH
16501: LD_INT 5
16503: EQUAL
16504: IFFALSE 16525
// points := [ 130 , 5 , 2 ] ;
16506: LD_ADDR_VAR 0 9
16510: PUSH
16511: LD_INT 130
16513: PUSH
16514: LD_INT 5
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16525: LD_VAR 0 6
16529: PPUSH
16530: CALL_OW 257
16534: PUSH
16535: LD_INT 8
16537: EQUAL
16538: IFFALSE 16559
// points := [ 35 , 35 , 30 ] ;
16540: LD_ADDR_VAR 0 9
16544: PUSH
16545: LD_INT 35
16547: PUSH
16548: LD_INT 35
16550: PUSH
16551: LD_INT 30
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: LIST
16558: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16559: LD_VAR 0 6
16563: PPUSH
16564: CALL_OW 257
16568: PUSH
16569: LD_INT 9
16571: EQUAL
16572: IFFALSE 16593
// points := [ 20 , 55 , 40 ] ;
16574: LD_ADDR_VAR 0 9
16578: PUSH
16579: LD_INT 20
16581: PUSH
16582: LD_INT 55
16584: PUSH
16585: LD_INT 40
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: LIST
16592: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16593: LD_VAR 0 6
16597: PPUSH
16598: CALL_OW 257
16602: PUSH
16603: LD_INT 12
16605: PUSH
16606: LD_INT 16
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: IN
16613: IFFALSE 16634
// points := [ 5 , 3 , 2 ] ;
16615: LD_ADDR_VAR 0 9
16619: PUSH
16620: LD_INT 5
16622: PUSH
16623: LD_INT 3
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16634: LD_VAR 0 6
16638: PPUSH
16639: CALL_OW 257
16643: PUSH
16644: LD_INT 17
16646: EQUAL
16647: IFFALSE 16668
// points := [ 100 , 50 , 75 ] ;
16649: LD_ADDR_VAR 0 9
16653: PUSH
16654: LD_INT 100
16656: PUSH
16657: LD_INT 50
16659: PUSH
16660: LD_INT 75
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16668: LD_VAR 0 6
16672: PPUSH
16673: CALL_OW 257
16677: PUSH
16678: LD_INT 15
16680: EQUAL
16681: IFFALSE 16702
// points := [ 10 , 5 , 3 ] ;
16683: LD_ADDR_VAR 0 9
16687: PUSH
16688: LD_INT 10
16690: PUSH
16691: LD_INT 5
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16702: LD_VAR 0 6
16706: PPUSH
16707: CALL_OW 257
16711: PUSH
16712: LD_INT 14
16714: EQUAL
16715: IFFALSE 16736
// points := [ 10 , 0 , 0 ] ;
16717: LD_ADDR_VAR 0 9
16721: PUSH
16722: LD_INT 10
16724: PUSH
16725: LD_INT 0
16727: PUSH
16728: LD_INT 0
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16736: LD_VAR 0 6
16740: PPUSH
16741: CALL_OW 257
16745: PUSH
16746: LD_INT 11
16748: EQUAL
16749: IFFALSE 16770
// points := [ 30 , 10 , 5 ] ;
16751: LD_ADDR_VAR 0 9
16755: PUSH
16756: LD_INT 30
16758: PUSH
16759: LD_INT 10
16761: PUSH
16762: LD_INT 5
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16770: LD_VAR 0 1
16774: PPUSH
16775: LD_INT 5
16777: PPUSH
16778: CALL_OW 321
16782: PUSH
16783: LD_INT 2
16785: EQUAL
16786: IFFALSE 16803
// bpoints := bpoints * 1.8 ;
16788: LD_ADDR_VAR 0 10
16792: PUSH
16793: LD_VAR 0 10
16797: PUSH
16798: LD_REAL  1.80000000000000E+0000
16801: MUL
16802: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16803: LD_VAR 0 6
16807: PPUSH
16808: CALL_OW 257
16812: PUSH
16813: LD_INT 1
16815: PUSH
16816: LD_INT 2
16818: PUSH
16819: LD_INT 3
16821: PUSH
16822: LD_INT 4
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: IN
16831: PUSH
16832: LD_VAR 0 1
16836: PPUSH
16837: LD_INT 51
16839: PPUSH
16840: CALL_OW 321
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: AND
16849: IFFALSE 16866
// bpoints := bpoints * 1.2 ;
16851: LD_ADDR_VAR 0 10
16855: PUSH
16856: LD_VAR 0 10
16860: PUSH
16861: LD_REAL  1.20000000000000E+0000
16864: MUL
16865: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16866: LD_VAR 0 6
16870: PPUSH
16871: CALL_OW 257
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: LD_INT 7
16881: PUSH
16882: LD_INT 9
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: LIST
16889: IN
16890: PUSH
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 52
16898: PPUSH
16899: CALL_OW 321
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: AND
16908: IFFALSE 16925
// bpoints := bpoints * 1.5 ;
16910: LD_ADDR_VAR 0 10
16914: PUSH
16915: LD_VAR 0 10
16919: PUSH
16920: LD_REAL  1.50000000000000E+0000
16923: MUL
16924: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16925: LD_VAR 0 1
16929: PPUSH
16930: LD_INT 66
16932: PPUSH
16933: CALL_OW 321
16937: PUSH
16938: LD_INT 2
16940: EQUAL
16941: IFFALSE 16958
// bpoints := bpoints * 1.1 ;
16943: LD_ADDR_VAR 0 10
16947: PUSH
16948: LD_VAR 0 10
16952: PUSH
16953: LD_REAL  1.10000000000000E+0000
16956: MUL
16957: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16958: LD_ADDR_VAR 0 10
16962: PUSH
16963: LD_VAR 0 10
16967: PUSH
16968: LD_VAR 0 6
16972: PPUSH
16973: LD_INT 1
16975: PPUSH
16976: CALL_OW 259
16980: PUSH
16981: LD_REAL  1.15000000000000E+0000
16984: MUL
16985: MUL
16986: ST_TO_ADDR
// end ; unit_vehicle :
16987: GO 17815
16989: LD_INT 2
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17803
16997: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16998: LD_VAR 0 6
17002: PPUSH
17003: CALL_OW 264
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 42
17013: PUSH
17014: LD_INT 24
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: IN
17022: IFFALSE 17043
// points := [ 25 , 5 , 3 ] ;
17024: LD_ADDR_VAR 0 9
17028: PUSH
17029: LD_INT 25
17031: PUSH
17032: LD_INT 5
17034: PUSH
17035: LD_INT 3
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17043: LD_VAR 0 6
17047: PPUSH
17048: CALL_OW 264
17052: PUSH
17053: LD_INT 4
17055: PUSH
17056: LD_INT 43
17058: PUSH
17059: LD_INT 25
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: LIST
17066: IN
17067: IFFALSE 17088
// points := [ 40 , 15 , 5 ] ;
17069: LD_ADDR_VAR 0 9
17073: PUSH
17074: LD_INT 40
17076: PUSH
17077: LD_INT 15
17079: PUSH
17080: LD_INT 5
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17088: LD_VAR 0 6
17092: PPUSH
17093: CALL_OW 264
17097: PUSH
17098: LD_INT 3
17100: PUSH
17101: LD_INT 23
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: IN
17108: IFFALSE 17129
// points := [ 7 , 25 , 8 ] ;
17110: LD_ADDR_VAR 0 9
17114: PUSH
17115: LD_INT 7
17117: PUSH
17118: LD_INT 25
17120: PUSH
17121: LD_INT 8
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17129: LD_VAR 0 6
17133: PPUSH
17134: CALL_OW 264
17138: PUSH
17139: LD_INT 5
17141: PUSH
17142: LD_INT 27
17144: PUSH
17145: LD_INT 44
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: LIST
17152: IN
17153: IFFALSE 17174
// points := [ 14 , 50 , 16 ] ;
17155: LD_ADDR_VAR 0 9
17159: PUSH
17160: LD_INT 14
17162: PUSH
17163: LD_INT 50
17165: PUSH
17166: LD_INT 16
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17174: LD_VAR 0 6
17178: PPUSH
17179: CALL_OW 264
17183: PUSH
17184: LD_INT 6
17186: PUSH
17187: LD_INT 46
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: IN
17194: IFFALSE 17215
// points := [ 32 , 120 , 70 ] ;
17196: LD_ADDR_VAR 0 9
17200: PUSH
17201: LD_INT 32
17203: PUSH
17204: LD_INT 120
17206: PUSH
17207: LD_INT 70
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17215: LD_VAR 0 6
17219: PPUSH
17220: CALL_OW 264
17224: PUSH
17225: LD_INT 7
17227: PUSH
17228: LD_INT 28
17230: PUSH
17231: LD_INT 45
17233: PUSH
17234: LD_INT 92
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: IN
17243: IFFALSE 17264
// points := [ 35 , 20 , 45 ] ;
17245: LD_ADDR_VAR 0 9
17249: PUSH
17250: LD_INT 35
17252: PUSH
17253: LD_INT 20
17255: PUSH
17256: LD_INT 45
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17264: LD_VAR 0 6
17268: PPUSH
17269: CALL_OW 264
17273: PUSH
17274: LD_INT 47
17276: PUSH
17277: EMPTY
17278: LIST
17279: IN
17280: IFFALSE 17301
// points := [ 67 , 45 , 75 ] ;
17282: LD_ADDR_VAR 0 9
17286: PUSH
17287: LD_INT 67
17289: PUSH
17290: LD_INT 45
17292: PUSH
17293: LD_INT 75
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: LIST
17300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17301: LD_VAR 0 6
17305: PPUSH
17306: CALL_OW 264
17310: PUSH
17311: LD_INT 26
17313: PUSH
17314: EMPTY
17315: LIST
17316: IN
17317: IFFALSE 17338
// points := [ 120 , 30 , 80 ] ;
17319: LD_ADDR_VAR 0 9
17323: PUSH
17324: LD_INT 120
17326: PUSH
17327: LD_INT 30
17329: PUSH
17330: LD_INT 80
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17338: LD_VAR 0 6
17342: PPUSH
17343: CALL_OW 264
17347: PUSH
17348: LD_INT 22
17350: PUSH
17351: EMPTY
17352: LIST
17353: IN
17354: IFFALSE 17375
// points := [ 40 , 1 , 1 ] ;
17356: LD_ADDR_VAR 0 9
17360: PUSH
17361: LD_INT 40
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17375: LD_VAR 0 6
17379: PPUSH
17380: CALL_OW 264
17384: PUSH
17385: LD_INT 29
17387: PUSH
17388: EMPTY
17389: LIST
17390: IN
17391: IFFALSE 17412
// points := [ 70 , 200 , 400 ] ;
17393: LD_ADDR_VAR 0 9
17397: PUSH
17398: LD_INT 70
17400: PUSH
17401: LD_INT 200
17403: PUSH
17404: LD_INT 400
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17412: LD_VAR 0 6
17416: PPUSH
17417: CALL_OW 264
17421: PUSH
17422: LD_INT 14
17424: PUSH
17425: LD_INT 53
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: IN
17432: IFFALSE 17453
// points := [ 40 , 10 , 20 ] ;
17434: LD_ADDR_VAR 0 9
17438: PUSH
17439: LD_INT 40
17441: PUSH
17442: LD_INT 10
17444: PUSH
17445: LD_INT 20
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17453: LD_VAR 0 6
17457: PPUSH
17458: CALL_OW 264
17462: PUSH
17463: LD_INT 9
17465: PUSH
17466: EMPTY
17467: LIST
17468: IN
17469: IFFALSE 17490
// points := [ 5 , 70 , 20 ] ;
17471: LD_ADDR_VAR 0 9
17475: PUSH
17476: LD_INT 5
17478: PUSH
17479: LD_INT 70
17481: PUSH
17482: LD_INT 20
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17490: LD_VAR 0 6
17494: PPUSH
17495: CALL_OW 264
17499: PUSH
17500: LD_INT 10
17502: PUSH
17503: EMPTY
17504: LIST
17505: IN
17506: IFFALSE 17527
// points := [ 35 , 110 , 70 ] ;
17508: LD_ADDR_VAR 0 9
17512: PUSH
17513: LD_INT 35
17515: PUSH
17516: LD_INT 110
17518: PUSH
17519: LD_INT 70
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17527: LD_VAR 0 6
17531: PPUSH
17532: CALL_OW 265
17536: PUSH
17537: LD_INT 25
17539: EQUAL
17540: IFFALSE 17561
// points := [ 80 , 65 , 100 ] ;
17542: LD_ADDR_VAR 0 9
17546: PUSH
17547: LD_INT 80
17549: PUSH
17550: LD_INT 65
17552: PUSH
17553: LD_INT 100
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17561: LD_VAR 0 6
17565: PPUSH
17566: CALL_OW 263
17570: PUSH
17571: LD_INT 1
17573: EQUAL
17574: IFFALSE 17609
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17576: LD_ADDR_VAR 0 10
17580: PUSH
17581: LD_VAR 0 10
17585: PUSH
17586: LD_VAR 0 6
17590: PPUSH
17591: CALL_OW 311
17595: PPUSH
17596: LD_INT 3
17598: PPUSH
17599: CALL_OW 259
17603: PUSH
17604: LD_INT 4
17606: MUL
17607: MUL
17608: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17609: LD_VAR 0 6
17613: PPUSH
17614: CALL_OW 263
17618: PUSH
17619: LD_INT 2
17621: EQUAL
17622: IFFALSE 17673
// begin j := IsControledBy ( i ) ;
17624: LD_ADDR_VAR 0 7
17628: PUSH
17629: LD_VAR 0 6
17633: PPUSH
17634: CALL_OW 312
17638: ST_TO_ADDR
// if j then
17639: LD_VAR 0 7
17643: IFFALSE 17673
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17645: LD_ADDR_VAR 0 10
17649: PUSH
17650: LD_VAR 0 10
17654: PUSH
17655: LD_VAR 0 7
17659: PPUSH
17660: LD_INT 3
17662: PPUSH
17663: CALL_OW 259
17667: PUSH
17668: LD_INT 3
17670: MUL
17671: MUL
17672: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17673: LD_VAR 0 6
17677: PPUSH
17678: CALL_OW 264
17682: PUSH
17683: LD_INT 5
17685: PUSH
17686: LD_INT 6
17688: PUSH
17689: LD_INT 46
17691: PUSH
17692: LD_INT 44
17694: PUSH
17695: LD_INT 47
17697: PUSH
17698: LD_INT 45
17700: PUSH
17701: LD_INT 28
17703: PUSH
17704: LD_INT 7
17706: PUSH
17707: LD_INT 27
17709: PUSH
17710: LD_INT 29
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: IN
17725: PUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: LD_INT 52
17733: PPUSH
17734: CALL_OW 321
17738: PUSH
17739: LD_INT 2
17741: EQUAL
17742: AND
17743: IFFALSE 17760
// bpoints := bpoints * 1.2 ;
17745: LD_ADDR_VAR 0 10
17749: PUSH
17750: LD_VAR 0 10
17754: PUSH
17755: LD_REAL  1.20000000000000E+0000
17758: MUL
17759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17760: LD_VAR 0 6
17764: PPUSH
17765: CALL_OW 264
17769: PUSH
17770: LD_INT 6
17772: PUSH
17773: LD_INT 46
17775: PUSH
17776: LD_INT 47
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: IN
17784: IFFALSE 17801
// bpoints := bpoints * 1.2 ;
17786: LD_ADDR_VAR 0 10
17790: PUSH
17791: LD_VAR 0 10
17795: PUSH
17796: LD_REAL  1.20000000000000E+0000
17799: MUL
17800: ST_TO_ADDR
// end ; unit_building :
17801: GO 17815
17803: LD_INT 3
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17814
17811: POP
// ; end ;
17812: GO 17815
17814: POP
// for j = 1 to 3 do
17815: LD_ADDR_VAR 0 7
17819: PUSH
17820: DOUBLE
17821: LD_INT 1
17823: DEC
17824: ST_TO_ADDR
17825: LD_INT 3
17827: PUSH
17828: FOR_TO
17829: IFFALSE 17882
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17831: LD_ADDR_VAR 0 5
17835: PUSH
17836: LD_VAR 0 5
17840: PPUSH
17841: LD_VAR 0 7
17845: PPUSH
17846: LD_VAR 0 5
17850: PUSH
17851: LD_VAR 0 7
17855: ARRAY
17856: PUSH
17857: LD_VAR 0 9
17861: PUSH
17862: LD_VAR 0 7
17866: ARRAY
17867: PUSH
17868: LD_VAR 0 10
17872: MUL
17873: PLUS
17874: PPUSH
17875: CALL_OW 1
17879: ST_TO_ADDR
17880: GO 17828
17882: POP
17883: POP
// end ;
17884: GO 16363
17886: POP
17887: POP
// result := Replace ( result , 4 , tmp ) ;
17888: LD_ADDR_VAR 0 5
17892: PUSH
17893: LD_VAR 0 5
17897: PPUSH
17898: LD_INT 4
17900: PPUSH
17901: LD_VAR 0 8
17905: PPUSH
17906: CALL_OW 1
17910: ST_TO_ADDR
// end ;
17911: LD_VAR 0 5
17915: RET
// export function DangerAtRange ( unit , range ) ; begin
17916: LD_INT 0
17918: PPUSH
// if not unit then
17919: LD_VAR 0 1
17923: NOT
17924: IFFALSE 17928
// exit ;
17926: GO 17973
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17928: LD_ADDR_VAR 0 3
17932: PUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 255
17942: PPUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 250
17952: PPUSH
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 251
17962: PPUSH
17963: LD_VAR 0 2
17967: PPUSH
17968: CALL 16215 0 4
17972: ST_TO_ADDR
// end ;
17973: LD_VAR 0 3
17977: RET
// export function DangerInArea ( side , area ) ; begin
17978: LD_INT 0
17980: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17981: LD_ADDR_VAR 0 3
17985: PUSH
17986: LD_VAR 0 2
17990: PPUSH
17991: LD_INT 81
17993: PUSH
17994: LD_VAR 0 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 70
18007: ST_TO_ADDR
// end ;
18008: LD_VAR 0 3
18012: RET
// export function IsExtension ( b ) ; begin
18013: LD_INT 0
18015: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18016: LD_ADDR_VAR 0 2
18020: PUSH
18021: LD_VAR 0 1
18025: PUSH
18026: LD_INT 23
18028: PUSH
18029: LD_INT 20
18031: PUSH
18032: LD_INT 22
18034: PUSH
18035: LD_INT 17
18037: PUSH
18038: LD_INT 24
18040: PUSH
18041: LD_INT 21
18043: PUSH
18044: LD_INT 19
18046: PUSH
18047: LD_INT 16
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 18
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: IN
18068: ST_TO_ADDR
// end ;
18069: LD_VAR 0 2
18073: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18074: LD_INT 0
18076: PPUSH
18077: PPUSH
18078: PPUSH
// result := [ ] ;
18079: LD_ADDR_VAR 0 4
18083: PUSH
18084: EMPTY
18085: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18086: LD_ADDR_VAR 0 5
18090: PUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_INT 21
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 70
18110: ST_TO_ADDR
// if not tmp then
18111: LD_VAR 0 5
18115: NOT
18116: IFFALSE 18120
// exit ;
18118: GO 18184
// if checkLink then
18120: LD_VAR 0 3
18124: IFFALSE 18174
// begin for i in tmp do
18126: LD_ADDR_VAR 0 6
18130: PUSH
18131: LD_VAR 0 5
18135: PUSH
18136: FOR_IN
18137: IFFALSE 18172
// if GetBase ( i ) <> base then
18139: LD_VAR 0 6
18143: PPUSH
18144: CALL_OW 274
18148: PUSH
18149: LD_VAR 0 1
18153: NONEQUAL
18154: IFFALSE 18170
// ComLinkToBase ( base , i ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_VAR 0 6
18165: PPUSH
18166: CALL_OW 169
18170: GO 18136
18172: POP
18173: POP
// end ; result := tmp ;
18174: LD_ADDR_VAR 0 4
18178: PUSH
18179: LD_VAR 0 5
18183: ST_TO_ADDR
// end ;
18184: LD_VAR 0 4
18188: RET
// export function ComComplete ( units , b ) ; var i ; begin
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
// if not units then
18193: LD_VAR 0 1
18197: NOT
18198: IFFALSE 18202
// exit ;
18200: GO 18292
// for i in units do
18202: LD_ADDR_VAR 0 4
18206: PUSH
18207: LD_VAR 0 1
18211: PUSH
18212: FOR_IN
18213: IFFALSE 18290
// if BuildingStatus ( b ) = bs_build then
18215: LD_VAR 0 2
18219: PPUSH
18220: CALL_OW 461
18224: PUSH
18225: LD_INT 1
18227: EQUAL
18228: IFFALSE 18288
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18230: LD_VAR 0 4
18234: PPUSH
18235: LD_STRING h
18237: PUSH
18238: LD_VAR 0 2
18242: PPUSH
18243: CALL_OW 250
18247: PUSH
18248: LD_VAR 0 2
18252: PPUSH
18253: CALL_OW 251
18257: PUSH
18258: LD_VAR 0 2
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 0
18268: PUSH
18269: LD_INT 0
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: PUSH
18281: EMPTY
18282: LIST
18283: PPUSH
18284: CALL_OW 446
18288: GO 18212
18290: POP
18291: POP
// end ;
18292: LD_VAR 0 3
18296: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18297: LD_INT 0
18299: PPUSH
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18305: LD_VAR 0 1
18309: NOT
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 263
18320: PUSH
18321: LD_INT 2
18323: NONEQUAL
18324: OR
18325: IFFALSE 18329
// exit ;
18327: GO 18645
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18329: LD_ADDR_VAR 0 6
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_VAR 0 1
18341: PPUSH
18342: CALL_OW 255
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 2
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 36
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 34
18366: PUSH
18367: LD_INT 31
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 69
18387: ST_TO_ADDR
// if not tmp then
18388: LD_VAR 0 6
18392: NOT
18393: IFFALSE 18397
// exit ;
18395: GO 18645
// result := [ ] ;
18397: LD_ADDR_VAR 0 2
18401: PUSH
18402: EMPTY
18403: ST_TO_ADDR
// for i in tmp do
18404: LD_ADDR_VAR 0 3
18408: PUSH
18409: LD_VAR 0 6
18413: PUSH
18414: FOR_IN
18415: IFFALSE 18486
// begin t := UnitsInside ( i ) ;
18417: LD_ADDR_VAR 0 4
18421: PUSH
18422: LD_VAR 0 3
18426: PPUSH
18427: CALL_OW 313
18431: ST_TO_ADDR
// if t then
18432: LD_VAR 0 4
18436: IFFALSE 18484
// for j in t do
18438: LD_ADDR_VAR 0 7
18442: PUSH
18443: LD_VAR 0 4
18447: PUSH
18448: FOR_IN
18449: IFFALSE 18482
// result := Replace ( result , result + 1 , j ) ;
18451: LD_ADDR_VAR 0 2
18455: PUSH
18456: LD_VAR 0 2
18460: PPUSH
18461: LD_VAR 0 2
18465: PUSH
18466: LD_INT 1
18468: PLUS
18469: PPUSH
18470: LD_VAR 0 7
18474: PPUSH
18475: CALL_OW 1
18479: ST_TO_ADDR
18480: GO 18448
18482: POP
18483: POP
// end ;
18484: GO 18414
18486: POP
18487: POP
// if not result then
18488: LD_VAR 0 2
18492: NOT
18493: IFFALSE 18497
// exit ;
18495: GO 18645
// mech := result [ 1 ] ;
18497: LD_ADDR_VAR 0 5
18501: PUSH
18502: LD_VAR 0 2
18506: PUSH
18507: LD_INT 1
18509: ARRAY
18510: ST_TO_ADDR
// if result > 1 then
18511: LD_VAR 0 2
18515: PUSH
18516: LD_INT 1
18518: GREATER
18519: IFFALSE 18631
// begin for i = 2 to result do
18521: LD_ADDR_VAR 0 3
18525: PUSH
18526: DOUBLE
18527: LD_INT 2
18529: DEC
18530: ST_TO_ADDR
18531: LD_VAR 0 2
18535: PUSH
18536: FOR_TO
18537: IFFALSE 18629
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18539: LD_ADDR_VAR 0 4
18543: PUSH
18544: LD_VAR 0 2
18548: PUSH
18549: LD_VAR 0 3
18553: ARRAY
18554: PPUSH
18555: LD_INT 3
18557: PPUSH
18558: CALL_OW 259
18562: PUSH
18563: LD_VAR 0 2
18567: PUSH
18568: LD_VAR 0 3
18572: ARRAY
18573: PPUSH
18574: CALL_OW 432
18578: MINUS
18579: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18580: LD_VAR 0 4
18584: PUSH
18585: LD_VAR 0 5
18589: PPUSH
18590: LD_INT 3
18592: PPUSH
18593: CALL_OW 259
18597: PUSH
18598: LD_VAR 0 5
18602: PPUSH
18603: CALL_OW 432
18607: MINUS
18608: GREATEREQUAL
18609: IFFALSE 18627
// mech := result [ i ] ;
18611: LD_ADDR_VAR 0 5
18615: PUSH
18616: LD_VAR 0 2
18620: PUSH
18621: LD_VAR 0 3
18625: ARRAY
18626: ST_TO_ADDR
// end ;
18627: GO 18536
18629: POP
18630: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18631: LD_VAR 0 1
18635: PPUSH
18636: LD_VAR 0 5
18640: PPUSH
18641: CALL_OW 135
// end ;
18645: LD_VAR 0 2
18649: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18650: LD_INT 0
18652: PPUSH
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
18657: PPUSH
18658: PPUSH
18659: PPUSH
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
// result := [ ] ;
18665: LD_ADDR_VAR 0 7
18669: PUSH
18670: EMPTY
18671: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 266
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: IN
18692: NOT
18693: IFFALSE 18697
// exit ;
18695: GO 20331
// if name then
18697: LD_VAR 0 3
18701: IFFALSE 18717
// SetBName ( base_dep , name ) ;
18703: LD_VAR 0 1
18707: PPUSH
18708: LD_VAR 0 3
18712: PPUSH
18713: CALL_OW 500
// base := GetBase ( base_dep ) ;
18717: LD_ADDR_VAR 0 15
18721: PUSH
18722: LD_VAR 0 1
18726: PPUSH
18727: CALL_OW 274
18731: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18732: LD_ADDR_VAR 0 16
18736: PUSH
18737: LD_VAR 0 1
18741: PPUSH
18742: CALL_OW 255
18746: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18747: LD_ADDR_VAR 0 17
18751: PUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 248
18761: ST_TO_ADDR
// if sources then
18762: LD_VAR 0 5
18766: IFFALSE 18813
// for i = 1 to 3 do
18768: LD_ADDR_VAR 0 8
18772: PUSH
18773: DOUBLE
18774: LD_INT 1
18776: DEC
18777: ST_TO_ADDR
18778: LD_INT 3
18780: PUSH
18781: FOR_TO
18782: IFFALSE 18811
// AddResourceType ( base , i , sources [ i ] ) ;
18784: LD_VAR 0 15
18788: PPUSH
18789: LD_VAR 0 8
18793: PPUSH
18794: LD_VAR 0 5
18798: PUSH
18799: LD_VAR 0 8
18803: ARRAY
18804: PPUSH
18805: CALL_OW 276
18809: GO 18781
18811: POP
18812: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18813: LD_ADDR_VAR 0 18
18817: PUSH
18818: LD_VAR 0 15
18822: PPUSH
18823: LD_VAR 0 2
18827: PPUSH
18828: LD_INT 1
18830: PPUSH
18831: CALL 18074 0 3
18835: ST_TO_ADDR
// InitHc ;
18836: CALL_OW 19
// InitUc ;
18840: CALL_OW 18
// uc_side := side ;
18844: LD_ADDR_OWVAR 20
18848: PUSH
18849: LD_VAR 0 16
18853: ST_TO_ADDR
// uc_nation := nation ;
18854: LD_ADDR_OWVAR 21
18858: PUSH
18859: LD_VAR 0 17
18863: ST_TO_ADDR
// if buildings then
18864: LD_VAR 0 18
18868: IFFALSE 20190
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18870: LD_ADDR_VAR 0 19
18874: PUSH
18875: LD_VAR 0 18
18879: PPUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 30
18885: PUSH
18886: LD_INT 29
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 30
18895: PUSH
18896: LD_INT 30
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: PPUSH
18908: CALL_OW 72
18912: ST_TO_ADDR
// if tmp then
18913: LD_VAR 0 19
18917: IFFALSE 18965
// for i in tmp do
18919: LD_ADDR_VAR 0 8
18923: PUSH
18924: LD_VAR 0 19
18928: PUSH
18929: FOR_IN
18930: IFFALSE 18963
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18932: LD_VAR 0 8
18936: PPUSH
18937: CALL_OW 250
18941: PPUSH
18942: LD_VAR 0 8
18946: PPUSH
18947: CALL_OW 251
18951: PPUSH
18952: LD_VAR 0 16
18956: PPUSH
18957: CALL_OW 441
18961: GO 18929
18963: POP
18964: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18965: LD_VAR 0 18
18969: PPUSH
18970: LD_INT 2
18972: PUSH
18973: LD_INT 30
18975: PUSH
18976: LD_INT 32
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 30
18985: PUSH
18986: LD_INT 33
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 72
19002: IFFALSE 19090
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19004: LD_ADDR_VAR 0 8
19008: PUSH
19009: LD_VAR 0 18
19013: PPUSH
19014: LD_INT 2
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: LD_INT 32
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 30
19029: PUSH
19030: LD_INT 33
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: PPUSH
19042: CALL_OW 72
19046: PUSH
19047: FOR_IN
19048: IFFALSE 19088
// begin if not GetBWeapon ( i ) then
19050: LD_VAR 0 8
19054: PPUSH
19055: CALL_OW 269
19059: NOT
19060: IFFALSE 19086
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19062: LD_VAR 0 8
19066: PPUSH
19067: LD_VAR 0 8
19071: PPUSH
19072: LD_VAR 0 2
19076: PPUSH
19077: CALL 20336 0 2
19081: PPUSH
19082: CALL_OW 431
// end ;
19086: GO 19047
19088: POP
19089: POP
// end ; for i = 1 to personel do
19090: LD_ADDR_VAR 0 8
19094: PUSH
19095: DOUBLE
19096: LD_INT 1
19098: DEC
19099: ST_TO_ADDR
19100: LD_VAR 0 6
19104: PUSH
19105: FOR_TO
19106: IFFALSE 20170
// begin if i > 4 then
19108: LD_VAR 0 8
19112: PUSH
19113: LD_INT 4
19115: GREATER
19116: IFFALSE 19120
// break ;
19118: GO 20170
// case i of 1 :
19120: LD_VAR 0 8
19124: PUSH
19125: LD_INT 1
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19133
19131: GO 19213
19133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19134: LD_ADDR_VAR 0 12
19138: PUSH
19139: LD_VAR 0 18
19143: PPUSH
19144: LD_INT 22
19146: PUSH
19147: LD_VAR 0 16
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 58
19158: PUSH
19159: EMPTY
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: LD_INT 30
19167: PUSH
19168: LD_INT 32
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 30
19177: PUSH
19178: LD_INT 4
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 30
19187: PUSH
19188: LD_INT 5
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 72
19210: ST_TO_ADDR
19211: GO 19435
19213: LD_INT 2
19215: DOUBLE
19216: EQUAL
19217: IFTRUE 19221
19219: GO 19283
19221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19222: LD_ADDR_VAR 0 12
19226: PUSH
19227: LD_VAR 0 18
19231: PPUSH
19232: LD_INT 22
19234: PUSH
19235: LD_VAR 0 16
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: LD_INT 30
19249: PUSH
19250: LD_INT 0
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 30
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: LIST
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PPUSH
19276: CALL_OW 72
19280: ST_TO_ADDR
19281: GO 19435
19283: LD_INT 3
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19353
19291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19292: LD_ADDR_VAR 0 12
19296: PUSH
19297: LD_VAR 0 18
19301: PPUSH
19302: LD_INT 22
19304: PUSH
19305: LD_VAR 0 16
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: LD_INT 30
19319: PUSH
19320: LD_INT 2
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 30
19329: PUSH
19330: LD_INT 3
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: LIST
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 72
19350: ST_TO_ADDR
19351: GO 19435
19353: LD_INT 4
19355: DOUBLE
19356: EQUAL
19357: IFTRUE 19361
19359: GO 19434
19361: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19362: LD_ADDR_VAR 0 12
19366: PUSH
19367: LD_VAR 0 18
19371: PPUSH
19372: LD_INT 22
19374: PUSH
19375: LD_VAR 0 16
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 2
19386: PUSH
19387: LD_INT 30
19389: PUSH
19390: LD_INT 6
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 30
19399: PUSH
19400: LD_INT 7
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 30
19409: PUSH
19410: LD_INT 8
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 72
19431: ST_TO_ADDR
19432: GO 19435
19434: POP
// if i = 1 then
19435: LD_VAR 0 8
19439: PUSH
19440: LD_INT 1
19442: EQUAL
19443: IFFALSE 19554
// begin tmp := [ ] ;
19445: LD_ADDR_VAR 0 19
19449: PUSH
19450: EMPTY
19451: ST_TO_ADDR
// for j in f do
19452: LD_ADDR_VAR 0 9
19456: PUSH
19457: LD_VAR 0 12
19461: PUSH
19462: FOR_IN
19463: IFFALSE 19536
// if GetBType ( j ) = b_bunker then
19465: LD_VAR 0 9
19469: PPUSH
19470: CALL_OW 266
19474: PUSH
19475: LD_INT 32
19477: EQUAL
19478: IFFALSE 19505
// tmp := Insert ( tmp , 1 , j ) else
19480: LD_ADDR_VAR 0 19
19484: PUSH
19485: LD_VAR 0 19
19489: PPUSH
19490: LD_INT 1
19492: PPUSH
19493: LD_VAR 0 9
19497: PPUSH
19498: CALL_OW 2
19502: ST_TO_ADDR
19503: GO 19534
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19505: LD_ADDR_VAR 0 19
19509: PUSH
19510: LD_VAR 0 19
19514: PPUSH
19515: LD_VAR 0 19
19519: PUSH
19520: LD_INT 1
19522: PLUS
19523: PPUSH
19524: LD_VAR 0 9
19528: PPUSH
19529: CALL_OW 2
19533: ST_TO_ADDR
19534: GO 19462
19536: POP
19537: POP
// if tmp then
19538: LD_VAR 0 19
19542: IFFALSE 19554
// f := tmp ;
19544: LD_ADDR_VAR 0 12
19548: PUSH
19549: LD_VAR 0 19
19553: ST_TO_ADDR
// end ; x := personel [ i ] ;
19554: LD_ADDR_VAR 0 13
19558: PUSH
19559: LD_VAR 0 6
19563: PUSH
19564: LD_VAR 0 8
19568: ARRAY
19569: ST_TO_ADDR
// if x = - 1 then
19570: LD_VAR 0 13
19574: PUSH
19575: LD_INT 1
19577: NEG
19578: EQUAL
19579: IFFALSE 19788
// begin for j in f do
19581: LD_ADDR_VAR 0 9
19585: PUSH
19586: LD_VAR 0 12
19590: PUSH
19591: FOR_IN
19592: IFFALSE 19784
// repeat InitHc ;
19594: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19598: LD_VAR 0 9
19602: PPUSH
19603: CALL_OW 266
19607: PUSH
19608: LD_INT 5
19610: EQUAL
19611: IFFALSE 19681
// begin if UnitsInside ( j ) < 3 then
19613: LD_VAR 0 9
19617: PPUSH
19618: CALL_OW 313
19622: PUSH
19623: LD_INT 3
19625: LESS
19626: IFFALSE 19662
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19628: LD_INT 0
19630: PPUSH
19631: LD_INT 5
19633: PUSH
19634: LD_INT 8
19636: PUSH
19637: LD_INT 9
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: LIST
19644: PUSH
19645: LD_VAR 0 17
19649: ARRAY
19650: PPUSH
19651: LD_VAR 0 4
19655: PPUSH
19656: CALL_OW 380
19660: GO 19679
// PrepareHuman ( false , i , skill ) ;
19662: LD_INT 0
19664: PPUSH
19665: LD_VAR 0 8
19669: PPUSH
19670: LD_VAR 0 4
19674: PPUSH
19675: CALL_OW 380
// end else
19679: GO 19698
// PrepareHuman ( false , i , skill ) ;
19681: LD_INT 0
19683: PPUSH
19684: LD_VAR 0 8
19688: PPUSH
19689: LD_VAR 0 4
19693: PPUSH
19694: CALL_OW 380
// un := CreateHuman ;
19698: LD_ADDR_VAR 0 14
19702: PUSH
19703: CALL_OW 44
19707: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19708: LD_ADDR_VAR 0 7
19712: PUSH
19713: LD_VAR 0 7
19717: PPUSH
19718: LD_INT 1
19720: PPUSH
19721: LD_VAR 0 14
19725: PPUSH
19726: CALL_OW 2
19730: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19731: LD_VAR 0 14
19735: PPUSH
19736: LD_VAR 0 9
19740: PPUSH
19741: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19745: LD_VAR 0 9
19749: PPUSH
19750: CALL_OW 313
19754: PUSH
19755: LD_INT 6
19757: EQUAL
19758: PUSH
19759: LD_VAR 0 9
19763: PPUSH
19764: CALL_OW 266
19768: PUSH
19769: LD_INT 32
19771: PUSH
19772: LD_INT 31
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: IN
19779: OR
19780: IFFALSE 19594
19782: GO 19591
19784: POP
19785: POP
// end else
19786: GO 20168
// for j = 1 to x do
19788: LD_ADDR_VAR 0 9
19792: PUSH
19793: DOUBLE
19794: LD_INT 1
19796: DEC
19797: ST_TO_ADDR
19798: LD_VAR 0 13
19802: PUSH
19803: FOR_TO
19804: IFFALSE 20166
// begin InitHc ;
19806: CALL_OW 19
// if not f then
19810: LD_VAR 0 12
19814: NOT
19815: IFFALSE 19904
// begin PrepareHuman ( false , i , skill ) ;
19817: LD_INT 0
19819: PPUSH
19820: LD_VAR 0 8
19824: PPUSH
19825: LD_VAR 0 4
19829: PPUSH
19830: CALL_OW 380
// un := CreateHuman ;
19834: LD_ADDR_VAR 0 14
19838: PUSH
19839: CALL_OW 44
19843: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19844: LD_ADDR_VAR 0 7
19848: PUSH
19849: LD_VAR 0 7
19853: PPUSH
19854: LD_INT 1
19856: PPUSH
19857: LD_VAR 0 14
19861: PPUSH
19862: CALL_OW 2
19866: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19867: LD_VAR 0 14
19871: PPUSH
19872: LD_VAR 0 1
19876: PPUSH
19877: CALL_OW 250
19881: PPUSH
19882: LD_VAR 0 1
19886: PPUSH
19887: CALL_OW 251
19891: PPUSH
19892: LD_INT 10
19894: PPUSH
19895: LD_INT 0
19897: PPUSH
19898: CALL_OW 50
// continue ;
19902: GO 19803
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19904: LD_VAR 0 12
19908: PUSH
19909: LD_INT 1
19911: ARRAY
19912: PPUSH
19913: CALL_OW 313
19917: PUSH
19918: LD_VAR 0 12
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PPUSH
19927: CALL_OW 266
19931: PUSH
19932: LD_INT 32
19934: PUSH
19935: LD_INT 31
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: IN
19942: AND
19943: PUSH
19944: LD_VAR 0 12
19948: PUSH
19949: LD_INT 1
19951: ARRAY
19952: PPUSH
19953: CALL_OW 313
19957: PUSH
19958: LD_INT 6
19960: EQUAL
19961: OR
19962: IFFALSE 19982
// f := Delete ( f , 1 ) ;
19964: LD_ADDR_VAR 0 12
19968: PUSH
19969: LD_VAR 0 12
19973: PPUSH
19974: LD_INT 1
19976: PPUSH
19977: CALL_OW 3
19981: ST_TO_ADDR
// if not f then
19982: LD_VAR 0 12
19986: NOT
19987: IFFALSE 20005
// begin x := x + 2 ;
19989: LD_ADDR_VAR 0 13
19993: PUSH
19994: LD_VAR 0 13
19998: PUSH
19999: LD_INT 2
20001: PLUS
20002: ST_TO_ADDR
// continue ;
20003: GO 19803
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20005: LD_VAR 0 12
20009: PUSH
20010: LD_INT 1
20012: ARRAY
20013: PPUSH
20014: CALL_OW 266
20018: PUSH
20019: LD_INT 5
20021: EQUAL
20022: IFFALSE 20096
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20024: LD_VAR 0 12
20028: PUSH
20029: LD_INT 1
20031: ARRAY
20032: PPUSH
20033: CALL_OW 313
20037: PUSH
20038: LD_INT 3
20040: LESS
20041: IFFALSE 20077
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20043: LD_INT 0
20045: PPUSH
20046: LD_INT 5
20048: PUSH
20049: LD_INT 8
20051: PUSH
20052: LD_INT 9
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: LIST
20059: PUSH
20060: LD_VAR 0 17
20064: ARRAY
20065: PPUSH
20066: LD_VAR 0 4
20070: PPUSH
20071: CALL_OW 380
20075: GO 20094
// PrepareHuman ( false , i , skill ) ;
20077: LD_INT 0
20079: PPUSH
20080: LD_VAR 0 8
20084: PPUSH
20085: LD_VAR 0 4
20089: PPUSH
20090: CALL_OW 380
// end else
20094: GO 20113
// PrepareHuman ( false , i , skill ) ;
20096: LD_INT 0
20098: PPUSH
20099: LD_VAR 0 8
20103: PPUSH
20104: LD_VAR 0 4
20108: PPUSH
20109: CALL_OW 380
// un := CreateHuman ;
20113: LD_ADDR_VAR 0 14
20117: PUSH
20118: CALL_OW 44
20122: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20123: LD_ADDR_VAR 0 7
20127: PUSH
20128: LD_VAR 0 7
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: LD_VAR 0 14
20140: PPUSH
20141: CALL_OW 2
20145: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20146: LD_VAR 0 14
20150: PPUSH
20151: LD_VAR 0 12
20155: PUSH
20156: LD_INT 1
20158: ARRAY
20159: PPUSH
20160: CALL_OW 52
// end ;
20164: GO 19803
20166: POP
20167: POP
// end ;
20168: GO 19105
20170: POP
20171: POP
// result := result ^ buildings ;
20172: LD_ADDR_VAR 0 7
20176: PUSH
20177: LD_VAR 0 7
20181: PUSH
20182: LD_VAR 0 18
20186: ADD
20187: ST_TO_ADDR
// end else
20188: GO 20331
// begin for i = 1 to personel do
20190: LD_ADDR_VAR 0 8
20194: PUSH
20195: DOUBLE
20196: LD_INT 1
20198: DEC
20199: ST_TO_ADDR
20200: LD_VAR 0 6
20204: PUSH
20205: FOR_TO
20206: IFFALSE 20329
// begin if i > 4 then
20208: LD_VAR 0 8
20212: PUSH
20213: LD_INT 4
20215: GREATER
20216: IFFALSE 20220
// break ;
20218: GO 20329
// x := personel [ i ] ;
20220: LD_ADDR_VAR 0 13
20224: PUSH
20225: LD_VAR 0 6
20229: PUSH
20230: LD_VAR 0 8
20234: ARRAY
20235: ST_TO_ADDR
// if x = - 1 then
20236: LD_VAR 0 13
20240: PUSH
20241: LD_INT 1
20243: NEG
20244: EQUAL
20245: IFFALSE 20249
// continue ;
20247: GO 20205
// PrepareHuman ( false , i , skill ) ;
20249: LD_INT 0
20251: PPUSH
20252: LD_VAR 0 8
20256: PPUSH
20257: LD_VAR 0 4
20261: PPUSH
20262: CALL_OW 380
// un := CreateHuman ;
20266: LD_ADDR_VAR 0 14
20270: PUSH
20271: CALL_OW 44
20275: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20276: LD_VAR 0 14
20280: PPUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 250
20290: PPUSH
20291: LD_VAR 0 1
20295: PPUSH
20296: CALL_OW 251
20300: PPUSH
20301: LD_INT 10
20303: PPUSH
20304: LD_INT 0
20306: PPUSH
20307: CALL_OW 50
// result := result ^ un ;
20311: LD_ADDR_VAR 0 7
20315: PUSH
20316: LD_VAR 0 7
20320: PUSH
20321: LD_VAR 0 14
20325: ADD
20326: ST_TO_ADDR
// end ;
20327: GO 20205
20329: POP
20330: POP
// end ; end ;
20331: LD_VAR 0 7
20335: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20336: LD_INT 0
20338: PPUSH
20339: PPUSH
20340: PPUSH
20341: PPUSH
20342: PPUSH
20343: PPUSH
20344: PPUSH
20345: PPUSH
20346: PPUSH
20347: PPUSH
20348: PPUSH
20349: PPUSH
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
// result := false ;
20354: LD_ADDR_VAR 0 3
20358: PUSH
20359: LD_INT 0
20361: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20362: LD_VAR 0 1
20366: NOT
20367: PUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 266
20377: PUSH
20378: LD_INT 32
20380: PUSH
20381: LD_INT 33
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: IN
20388: NOT
20389: OR
20390: IFFALSE 20394
// exit ;
20392: GO 21503
// nat := GetNation ( tower ) ;
20394: LD_ADDR_VAR 0 12
20398: PUSH
20399: LD_VAR 0 1
20403: PPUSH
20404: CALL_OW 248
20408: ST_TO_ADDR
// side := GetSide ( tower ) ;
20409: LD_ADDR_VAR 0 16
20413: PUSH
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 255
20423: ST_TO_ADDR
// x := GetX ( tower ) ;
20424: LD_ADDR_VAR 0 10
20428: PUSH
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 250
20438: ST_TO_ADDR
// y := GetY ( tower ) ;
20439: LD_ADDR_VAR 0 11
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 251
20453: ST_TO_ADDR
// if not x or not y then
20454: LD_VAR 0 10
20458: NOT
20459: PUSH
20460: LD_VAR 0 11
20464: NOT
20465: OR
20466: IFFALSE 20470
// exit ;
20468: GO 21503
// weapon := 0 ;
20470: LD_ADDR_VAR 0 18
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// fac_list := [ ] ;
20478: LD_ADDR_VAR 0 17
20482: PUSH
20483: EMPTY
20484: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20485: LD_ADDR_VAR 0 6
20489: PUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 274
20499: PPUSH
20500: LD_VAR 0 2
20504: PPUSH
20505: LD_INT 0
20507: PPUSH
20508: CALL 18074 0 3
20512: PPUSH
20513: LD_INT 30
20515: PUSH
20516: LD_INT 3
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PPUSH
20523: CALL_OW 72
20527: ST_TO_ADDR
// if not factories then
20528: LD_VAR 0 6
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 21503
// for i in factories do
20537: LD_ADDR_VAR 0 8
20541: PUSH
20542: LD_VAR 0 6
20546: PUSH
20547: FOR_IN
20548: IFFALSE 20573
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20550: LD_ADDR_VAR 0 17
20554: PUSH
20555: LD_VAR 0 17
20559: PUSH
20560: LD_VAR 0 8
20564: PPUSH
20565: CALL_OW 478
20569: UNION
20570: ST_TO_ADDR
20571: GO 20547
20573: POP
20574: POP
// if not fac_list then
20575: LD_VAR 0 17
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 21503
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20584: LD_ADDR_VAR 0 5
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: LD_INT 5
20594: PUSH
20595: LD_INT 9
20597: PUSH
20598: LD_INT 10
20600: PUSH
20601: LD_INT 6
20603: PUSH
20604: LD_INT 7
20606: PUSH
20607: LD_INT 11
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: PUSH
20619: LD_INT 27
20621: PUSH
20622: LD_INT 28
20624: PUSH
20625: LD_INT 26
20627: PUSH
20628: LD_INT 30
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 43
20639: PUSH
20640: LD_INT 44
20642: PUSH
20643: LD_INT 46
20645: PUSH
20646: LD_INT 45
20648: PUSH
20649: LD_INT 47
20651: PUSH
20652: LD_INT 49
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: PUSH
20663: EMPTY
20664: LIST
20665: LIST
20666: LIST
20667: PUSH
20668: LD_VAR 0 12
20672: ARRAY
20673: ST_TO_ADDR
// list := list isect fac_list ;
20674: LD_ADDR_VAR 0 5
20678: PUSH
20679: LD_VAR 0 5
20683: PUSH
20684: LD_VAR 0 17
20688: ISECT
20689: ST_TO_ADDR
// if not list then
20690: LD_VAR 0 5
20694: NOT
20695: IFFALSE 20699
// exit ;
20697: GO 21503
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20699: LD_VAR 0 12
20703: PUSH
20704: LD_INT 3
20706: EQUAL
20707: PUSH
20708: LD_INT 49
20710: PUSH
20711: LD_VAR 0 5
20715: IN
20716: AND
20717: PUSH
20718: LD_INT 31
20720: PPUSH
20721: LD_VAR 0 16
20725: PPUSH
20726: CALL_OW 321
20730: PUSH
20731: LD_INT 2
20733: EQUAL
20734: AND
20735: IFFALSE 20795
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20737: LD_INT 22
20739: PUSH
20740: LD_VAR 0 16
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 35
20751: PUSH
20752: LD_INT 49
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 91
20761: PUSH
20762: LD_VAR 0 1
20766: PUSH
20767: LD_INT 10
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: LIST
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: PPUSH
20780: CALL_OW 69
20784: NOT
20785: IFFALSE 20795
// weapon := ru_time_lapser ;
20787: LD_ADDR_VAR 0 18
20791: PUSH
20792: LD_INT 49
20794: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20795: LD_VAR 0 12
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: IN
20810: PUSH
20811: LD_INT 11
20813: PUSH
20814: LD_VAR 0 5
20818: IN
20819: PUSH
20820: LD_INT 30
20822: PUSH
20823: LD_VAR 0 5
20827: IN
20828: OR
20829: AND
20830: PUSH
20831: LD_INT 6
20833: PPUSH
20834: LD_VAR 0 16
20838: PPUSH
20839: CALL_OW 321
20843: PUSH
20844: LD_INT 2
20846: EQUAL
20847: AND
20848: IFFALSE 21013
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20850: LD_INT 22
20852: PUSH
20853: LD_VAR 0 16
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 35
20867: PUSH
20868: LD_INT 11
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 35
20877: PUSH
20878: LD_INT 30
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 91
20892: PUSH
20893: LD_VAR 0 1
20897: PUSH
20898: LD_INT 18
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: NOT
20916: PUSH
20917: LD_INT 22
20919: PUSH
20920: LD_VAR 0 16
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: LD_INT 30
20934: PUSH
20935: LD_INT 32
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 30
20944: PUSH
20945: LD_INT 33
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 91
20959: PUSH
20960: LD_VAR 0 1
20964: PUSH
20965: LD_INT 12
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: PUSH
20978: EMPTY
20979: LIST
20980: PPUSH
20981: CALL_OW 69
20985: PUSH
20986: LD_INT 2
20988: GREATER
20989: AND
20990: IFFALSE 21013
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20992: LD_ADDR_VAR 0 18
20996: PUSH
20997: LD_INT 11
20999: PUSH
21000: LD_INT 30
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_VAR 0 12
21011: ARRAY
21012: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21013: LD_VAR 0 18
21017: NOT
21018: PUSH
21019: LD_INT 40
21021: PPUSH
21022: LD_VAR 0 16
21026: PPUSH
21027: CALL_OW 321
21031: PUSH
21032: LD_INT 2
21034: EQUAL
21035: AND
21036: PUSH
21037: LD_INT 7
21039: PUSH
21040: LD_VAR 0 5
21044: IN
21045: PUSH
21046: LD_INT 28
21048: PUSH
21049: LD_VAR 0 5
21053: IN
21054: OR
21055: PUSH
21056: LD_INT 45
21058: PUSH
21059: LD_VAR 0 5
21063: IN
21064: OR
21065: AND
21066: IFFALSE 21320
// begin hex := GetHexInfo ( x , y ) ;
21068: LD_ADDR_VAR 0 4
21072: PUSH
21073: LD_VAR 0 10
21077: PPUSH
21078: LD_VAR 0 11
21082: PPUSH
21083: CALL_OW 546
21087: ST_TO_ADDR
// if hex [ 1 ] then
21088: LD_VAR 0 4
21092: PUSH
21093: LD_INT 1
21095: ARRAY
21096: IFFALSE 21100
// exit ;
21098: GO 21503
// height := hex [ 2 ] ;
21100: LD_ADDR_VAR 0 15
21104: PUSH
21105: LD_VAR 0 4
21109: PUSH
21110: LD_INT 2
21112: ARRAY
21113: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21114: LD_ADDR_VAR 0 14
21118: PUSH
21119: LD_INT 0
21121: PUSH
21122: LD_INT 2
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: LD_INT 5
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: ST_TO_ADDR
// for i in tmp do
21137: LD_ADDR_VAR 0 8
21141: PUSH
21142: LD_VAR 0 14
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21318
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21150: LD_ADDR_VAR 0 9
21154: PUSH
21155: LD_VAR 0 10
21159: PPUSH
21160: LD_VAR 0 8
21164: PPUSH
21165: LD_INT 5
21167: PPUSH
21168: CALL_OW 272
21172: PUSH
21173: LD_VAR 0 11
21177: PPUSH
21178: LD_VAR 0 8
21182: PPUSH
21183: LD_INT 5
21185: PPUSH
21186: CALL_OW 273
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21195: LD_VAR 0 9
21199: PUSH
21200: LD_INT 1
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 9
21208: PUSH
21209: LD_INT 2
21211: ARRAY
21212: PPUSH
21213: CALL_OW 488
21217: IFFALSE 21316
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21219: LD_ADDR_VAR 0 4
21223: PUSH
21224: LD_VAR 0 9
21228: PUSH
21229: LD_INT 1
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 9
21237: PUSH
21238: LD_INT 2
21240: ARRAY
21241: PPUSH
21242: CALL_OW 546
21246: ST_TO_ADDR
// if hex [ 1 ] then
21247: LD_VAR 0 4
21251: PUSH
21252: LD_INT 1
21254: ARRAY
21255: IFFALSE 21259
// continue ;
21257: GO 21147
// h := hex [ 2 ] ;
21259: LD_ADDR_VAR 0 13
21263: PUSH
21264: LD_VAR 0 4
21268: PUSH
21269: LD_INT 2
21271: ARRAY
21272: ST_TO_ADDR
// if h + 7 < height then
21273: LD_VAR 0 13
21277: PUSH
21278: LD_INT 7
21280: PLUS
21281: PUSH
21282: LD_VAR 0 15
21286: LESS
21287: IFFALSE 21316
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21289: LD_ADDR_VAR 0 18
21293: PUSH
21294: LD_INT 7
21296: PUSH
21297: LD_INT 28
21299: PUSH
21300: LD_INT 45
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: LD_VAR 0 12
21312: ARRAY
21313: ST_TO_ADDR
// break ;
21314: GO 21318
// end ; end ; end ;
21316: GO 21147
21318: POP
21319: POP
// end ; if not weapon then
21320: LD_VAR 0 18
21324: NOT
21325: IFFALSE 21385
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21327: LD_ADDR_VAR 0 5
21331: PUSH
21332: LD_VAR 0 5
21336: PUSH
21337: LD_INT 11
21339: PUSH
21340: LD_INT 30
21342: PUSH
21343: LD_INT 49
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: LIST
21350: DIFF
21351: ST_TO_ADDR
// if not list then
21352: LD_VAR 0 5
21356: NOT
21357: IFFALSE 21361
// exit ;
21359: GO 21503
// weapon := list [ rand ( 1 , list ) ] ;
21361: LD_ADDR_VAR 0 18
21365: PUSH
21366: LD_VAR 0 5
21370: PUSH
21371: LD_INT 1
21373: PPUSH
21374: LD_VAR 0 5
21378: PPUSH
21379: CALL_OW 12
21383: ARRAY
21384: ST_TO_ADDR
// end ; if weapon then
21385: LD_VAR 0 18
21389: IFFALSE 21503
// begin tmp := CostOfWeapon ( weapon ) ;
21391: LD_ADDR_VAR 0 14
21395: PUSH
21396: LD_VAR 0 18
21400: PPUSH
21401: CALL_OW 451
21405: ST_TO_ADDR
// j := GetBase ( tower ) ;
21406: LD_ADDR_VAR 0 9
21410: PUSH
21411: LD_VAR 0 1
21415: PPUSH
21416: CALL_OW 274
21420: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21421: LD_VAR 0 9
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: CALL_OW 275
21433: PUSH
21434: LD_VAR 0 14
21438: PUSH
21439: LD_INT 1
21441: ARRAY
21442: GREATEREQUAL
21443: PUSH
21444: LD_VAR 0 9
21448: PPUSH
21449: LD_INT 2
21451: PPUSH
21452: CALL_OW 275
21456: PUSH
21457: LD_VAR 0 14
21461: PUSH
21462: LD_INT 2
21464: ARRAY
21465: GREATEREQUAL
21466: AND
21467: PUSH
21468: LD_VAR 0 9
21472: PPUSH
21473: LD_INT 3
21475: PPUSH
21476: CALL_OW 275
21480: PUSH
21481: LD_VAR 0 14
21485: PUSH
21486: LD_INT 3
21488: ARRAY
21489: GREATEREQUAL
21490: AND
21491: IFFALSE 21503
// result := weapon ;
21493: LD_ADDR_VAR 0 3
21497: PUSH
21498: LD_VAR 0 18
21502: ST_TO_ADDR
// end ; end ;
21503: LD_VAR 0 3
21507: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21508: LD_INT 0
21510: PPUSH
21511: PPUSH
// result := true ;
21512: LD_ADDR_VAR 0 3
21516: PUSH
21517: LD_INT 1
21519: ST_TO_ADDR
// if array1 = array2 then
21520: LD_VAR 0 1
21524: PUSH
21525: LD_VAR 0 2
21529: EQUAL
21530: IFFALSE 21590
// begin for i = 1 to array1 do
21532: LD_ADDR_VAR 0 4
21536: PUSH
21537: DOUBLE
21538: LD_INT 1
21540: DEC
21541: ST_TO_ADDR
21542: LD_VAR 0 1
21546: PUSH
21547: FOR_TO
21548: IFFALSE 21586
// if array1 [ i ] <> array2 [ i ] then
21550: LD_VAR 0 1
21554: PUSH
21555: LD_VAR 0 4
21559: ARRAY
21560: PUSH
21561: LD_VAR 0 2
21565: PUSH
21566: LD_VAR 0 4
21570: ARRAY
21571: NONEQUAL
21572: IFFALSE 21584
// begin result := false ;
21574: LD_ADDR_VAR 0 3
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// break ;
21582: GO 21586
// end ;
21584: GO 21547
21586: POP
21587: POP
// end else
21588: GO 21598
// result := false ;
21590: LD_ADDR_VAR 0 3
21594: PUSH
21595: LD_INT 0
21597: ST_TO_ADDR
// end ;
21598: LD_VAR 0 3
21602: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
// if not array1 or not array2 then
21607: LD_VAR 0 1
21611: NOT
21612: PUSH
21613: LD_VAR 0 2
21617: NOT
21618: OR
21619: IFFALSE 21623
// exit ;
21621: GO 21687
// result := true ;
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: LD_INT 1
21630: ST_TO_ADDR
// for i = 1 to array1 do
21631: LD_ADDR_VAR 0 4
21635: PUSH
21636: DOUBLE
21637: LD_INT 1
21639: DEC
21640: ST_TO_ADDR
21641: LD_VAR 0 1
21645: PUSH
21646: FOR_TO
21647: IFFALSE 21685
// if array1 [ i ] <> array2 [ i ] then
21649: LD_VAR 0 1
21653: PUSH
21654: LD_VAR 0 4
21658: ARRAY
21659: PUSH
21660: LD_VAR 0 2
21664: PUSH
21665: LD_VAR 0 4
21669: ARRAY
21670: NONEQUAL
21671: IFFALSE 21683
// begin result := false ;
21673: LD_ADDR_VAR 0 3
21677: PUSH
21678: LD_INT 0
21680: ST_TO_ADDR
// break ;
21681: GO 21685
// end ;
21683: GO 21646
21685: POP
21686: POP
// end ;
21687: LD_VAR 0 3
21691: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21692: LD_INT 0
21694: PPUSH
21695: PPUSH
21696: PPUSH
// pom := GetBase ( fac ) ;
21697: LD_ADDR_VAR 0 5
21701: PUSH
21702: LD_VAR 0 1
21706: PPUSH
21707: CALL_OW 274
21711: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21712: LD_ADDR_VAR 0 4
21716: PUSH
21717: LD_VAR 0 2
21721: PUSH
21722: LD_INT 1
21724: ARRAY
21725: PPUSH
21726: LD_VAR 0 2
21730: PUSH
21731: LD_INT 2
21733: ARRAY
21734: PPUSH
21735: LD_VAR 0 2
21739: PUSH
21740: LD_INT 3
21742: ARRAY
21743: PPUSH
21744: LD_VAR 0 2
21748: PUSH
21749: LD_INT 4
21751: ARRAY
21752: PPUSH
21753: CALL_OW 449
21757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21758: LD_ADDR_VAR 0 3
21762: PUSH
21763: LD_VAR 0 5
21767: PPUSH
21768: LD_INT 1
21770: PPUSH
21771: CALL_OW 275
21775: PUSH
21776: LD_VAR 0 4
21780: PUSH
21781: LD_INT 1
21783: ARRAY
21784: GREATEREQUAL
21785: PUSH
21786: LD_VAR 0 5
21790: PPUSH
21791: LD_INT 2
21793: PPUSH
21794: CALL_OW 275
21798: PUSH
21799: LD_VAR 0 4
21803: PUSH
21804: LD_INT 2
21806: ARRAY
21807: GREATEREQUAL
21808: AND
21809: PUSH
21810: LD_VAR 0 5
21814: PPUSH
21815: LD_INT 3
21817: PPUSH
21818: CALL_OW 275
21822: PUSH
21823: LD_VAR 0 4
21827: PUSH
21828: LD_INT 3
21830: ARRAY
21831: GREATEREQUAL
21832: AND
21833: ST_TO_ADDR
// end ;
21834: LD_VAR 0 3
21838: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21839: LD_INT 0
21841: PPUSH
21842: PPUSH
21843: PPUSH
21844: PPUSH
// pom := GetBase ( building ) ;
21845: LD_ADDR_VAR 0 3
21849: PUSH
21850: LD_VAR 0 1
21854: PPUSH
21855: CALL_OW 274
21859: ST_TO_ADDR
// if not pom then
21860: LD_VAR 0 3
21864: NOT
21865: IFFALSE 21869
// exit ;
21867: GO 22039
// btype := GetBType ( building ) ;
21869: LD_ADDR_VAR 0 5
21873: PUSH
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL_OW 266
21883: ST_TO_ADDR
// if btype = b_armoury then
21884: LD_VAR 0 5
21888: PUSH
21889: LD_INT 4
21891: EQUAL
21892: IFFALSE 21902
// btype := b_barracks ;
21894: LD_ADDR_VAR 0 5
21898: PUSH
21899: LD_INT 5
21901: ST_TO_ADDR
// if btype = b_depot then
21902: LD_VAR 0 5
21906: PUSH
21907: LD_INT 0
21909: EQUAL
21910: IFFALSE 21920
// btype := b_warehouse ;
21912: LD_ADDR_VAR 0 5
21916: PUSH
21917: LD_INT 1
21919: ST_TO_ADDR
// if btype = b_workshop then
21920: LD_VAR 0 5
21924: PUSH
21925: LD_INT 2
21927: EQUAL
21928: IFFALSE 21938
// btype := b_factory ;
21930: LD_ADDR_VAR 0 5
21934: PUSH
21935: LD_INT 3
21937: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21938: LD_ADDR_VAR 0 4
21942: PUSH
21943: LD_VAR 0 5
21947: PPUSH
21948: LD_VAR 0 1
21952: PPUSH
21953: CALL_OW 248
21957: PPUSH
21958: CALL_OW 450
21962: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21963: LD_ADDR_VAR 0 2
21967: PUSH
21968: LD_VAR 0 3
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 275
21980: PUSH
21981: LD_VAR 0 4
21985: PUSH
21986: LD_INT 1
21988: ARRAY
21989: GREATEREQUAL
21990: PUSH
21991: LD_VAR 0 3
21995: PPUSH
21996: LD_INT 2
21998: PPUSH
21999: CALL_OW 275
22003: PUSH
22004: LD_VAR 0 4
22008: PUSH
22009: LD_INT 2
22011: ARRAY
22012: GREATEREQUAL
22013: AND
22014: PUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: LD_INT 3
22022: PPUSH
22023: CALL_OW 275
22027: PUSH
22028: LD_VAR 0 4
22032: PUSH
22033: LD_INT 3
22035: ARRAY
22036: GREATEREQUAL
22037: AND
22038: ST_TO_ADDR
// end ;
22039: LD_VAR 0 2
22043: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22044: LD_INT 0
22046: PPUSH
22047: PPUSH
22048: PPUSH
// pom := GetBase ( building ) ;
22049: LD_ADDR_VAR 0 4
22053: PUSH
22054: LD_VAR 0 1
22058: PPUSH
22059: CALL_OW 274
22063: ST_TO_ADDR
// if not pom then
22064: LD_VAR 0 4
22068: NOT
22069: IFFALSE 22073
// exit ;
22071: GO 22174
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22073: LD_ADDR_VAR 0 5
22077: PUSH
22078: LD_VAR 0 2
22082: PPUSH
22083: LD_VAR 0 1
22087: PPUSH
22088: CALL_OW 248
22092: PPUSH
22093: CALL_OW 450
22097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22098: LD_ADDR_VAR 0 3
22102: PUSH
22103: LD_VAR 0 4
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 275
22115: PUSH
22116: LD_VAR 0 5
22120: PUSH
22121: LD_INT 1
22123: ARRAY
22124: GREATEREQUAL
22125: PUSH
22126: LD_VAR 0 4
22130: PPUSH
22131: LD_INT 2
22133: PPUSH
22134: CALL_OW 275
22138: PUSH
22139: LD_VAR 0 5
22143: PUSH
22144: LD_INT 2
22146: ARRAY
22147: GREATEREQUAL
22148: AND
22149: PUSH
22150: LD_VAR 0 4
22154: PPUSH
22155: LD_INT 3
22157: PPUSH
22158: CALL_OW 275
22162: PUSH
22163: LD_VAR 0 5
22167: PUSH
22168: LD_INT 3
22170: ARRAY
22171: GREATEREQUAL
22172: AND
22173: ST_TO_ADDR
// end ;
22174: LD_VAR 0 3
22178: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
22185: PPUSH
22186: PPUSH
22187: PPUSH
22188: PPUSH
22189: PPUSH
22190: PPUSH
22191: PPUSH
// result := false ;
22192: LD_ADDR_VAR 0 8
22196: PUSH
22197: LD_INT 0
22199: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22200: LD_VAR 0 5
22204: NOT
22205: PUSH
22206: LD_VAR 0 1
22210: NOT
22211: OR
22212: PUSH
22213: LD_VAR 0 2
22217: NOT
22218: OR
22219: PUSH
22220: LD_VAR 0 3
22224: NOT
22225: OR
22226: IFFALSE 22230
// exit ;
22228: GO 23044
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22230: LD_ADDR_VAR 0 14
22234: PUSH
22235: LD_VAR 0 1
22239: PPUSH
22240: LD_VAR 0 2
22244: PPUSH
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_VAR 0 4
22254: PPUSH
22255: LD_VAR 0 5
22259: PUSH
22260: LD_INT 1
22262: ARRAY
22263: PPUSH
22264: CALL_OW 248
22268: PPUSH
22269: LD_INT 0
22271: PPUSH
22272: CALL 24297 0 6
22276: ST_TO_ADDR
// if not hexes then
22277: LD_VAR 0 14
22281: NOT
22282: IFFALSE 22286
// exit ;
22284: GO 23044
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22286: LD_ADDR_VAR 0 17
22290: PUSH
22291: LD_VAR 0 5
22295: PPUSH
22296: LD_INT 22
22298: PUSH
22299: LD_VAR 0 13
22303: PPUSH
22304: CALL_OW 255
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: LD_INT 30
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 30
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: LIST
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 72
22349: ST_TO_ADDR
// for i = 1 to hexes do
22350: LD_ADDR_VAR 0 9
22354: PUSH
22355: DOUBLE
22356: LD_INT 1
22358: DEC
22359: ST_TO_ADDR
22360: LD_VAR 0 14
22364: PUSH
22365: FOR_TO
22366: IFFALSE 23042
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22368: LD_ADDR_VAR 0 13
22372: PUSH
22373: LD_VAR 0 14
22377: PUSH
22378: LD_VAR 0 9
22382: ARRAY
22383: PUSH
22384: LD_INT 1
22386: ARRAY
22387: PPUSH
22388: LD_VAR 0 14
22392: PUSH
22393: LD_VAR 0 9
22397: ARRAY
22398: PUSH
22399: LD_INT 2
22401: ARRAY
22402: PPUSH
22403: CALL_OW 428
22407: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22408: LD_VAR 0 14
22412: PUSH
22413: LD_VAR 0 9
22417: ARRAY
22418: PUSH
22419: LD_INT 1
22421: ARRAY
22422: PPUSH
22423: LD_VAR 0 14
22427: PUSH
22428: LD_VAR 0 9
22432: ARRAY
22433: PUSH
22434: LD_INT 2
22436: ARRAY
22437: PPUSH
22438: CALL_OW 351
22442: PUSH
22443: LD_VAR 0 14
22447: PUSH
22448: LD_VAR 0 9
22452: ARRAY
22453: PUSH
22454: LD_INT 1
22456: ARRAY
22457: PPUSH
22458: LD_VAR 0 14
22462: PUSH
22463: LD_VAR 0 9
22467: ARRAY
22468: PUSH
22469: LD_INT 2
22471: ARRAY
22472: PPUSH
22473: CALL_OW 488
22477: NOT
22478: OR
22479: PUSH
22480: LD_VAR 0 13
22484: PPUSH
22485: CALL_OW 247
22489: PUSH
22490: LD_INT 3
22492: EQUAL
22493: OR
22494: IFFALSE 22500
// exit ;
22496: POP
22497: POP
22498: GO 23044
// if not tmp then
22500: LD_VAR 0 13
22504: NOT
22505: IFFALSE 22509
// continue ;
22507: GO 22365
// result := true ;
22509: LD_ADDR_VAR 0 8
22513: PUSH
22514: LD_INT 1
22516: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22517: LD_VAR 0 6
22521: PUSH
22522: LD_VAR 0 13
22526: PPUSH
22527: CALL_OW 247
22531: PUSH
22532: LD_INT 2
22534: EQUAL
22535: AND
22536: PUSH
22537: LD_VAR 0 13
22541: PPUSH
22542: CALL_OW 263
22546: PUSH
22547: LD_INT 1
22549: EQUAL
22550: AND
22551: IFFALSE 22715
// begin if IsDrivenBy ( tmp ) then
22553: LD_VAR 0 13
22557: PPUSH
22558: CALL_OW 311
22562: IFFALSE 22566
// continue ;
22564: GO 22365
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22566: LD_VAR 0 6
22570: PPUSH
22571: LD_INT 3
22573: PUSH
22574: LD_INT 60
22576: PUSH
22577: EMPTY
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 3
22586: PUSH
22587: LD_INT 55
22589: PUSH
22590: EMPTY
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 72
22605: IFFALSE 22713
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22607: LD_ADDR_VAR 0 18
22611: PUSH
22612: LD_VAR 0 6
22616: PPUSH
22617: LD_INT 3
22619: PUSH
22620: LD_INT 60
22622: PUSH
22623: EMPTY
22624: LIST
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 55
22635: PUSH
22636: EMPTY
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL_OW 72
22651: PUSH
22652: LD_INT 1
22654: ARRAY
22655: ST_TO_ADDR
// if IsInUnit ( driver ) then
22656: LD_VAR 0 18
22660: PPUSH
22661: CALL_OW 310
22665: IFFALSE 22676
// ComExit ( driver ) ;
22667: LD_VAR 0 18
22671: PPUSH
22672: CALL 48098 0 1
// AddComEnterUnit ( driver , tmp ) ;
22676: LD_VAR 0 18
22680: PPUSH
22681: LD_VAR 0 13
22685: PPUSH
22686: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22690: LD_VAR 0 18
22694: PPUSH
22695: LD_VAR 0 7
22699: PPUSH
22700: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22704: LD_VAR 0 18
22708: PPUSH
22709: CALL_OW 181
// end ; continue ;
22713: GO 22365
// end ; if not cleaners or not tmp in cleaners then
22715: LD_VAR 0 6
22719: NOT
22720: PUSH
22721: LD_VAR 0 13
22725: PUSH
22726: LD_VAR 0 6
22730: IN
22731: NOT
22732: OR
22733: IFFALSE 23040
// begin if dep then
22735: LD_VAR 0 17
22739: IFFALSE 22875
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22741: LD_ADDR_VAR 0 16
22745: PUSH
22746: LD_VAR 0 17
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: PPUSH
22755: CALL_OW 250
22759: PPUSH
22760: LD_VAR 0 17
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: PPUSH
22769: CALL_OW 254
22773: PPUSH
22774: LD_INT 5
22776: PPUSH
22777: CALL_OW 272
22781: PUSH
22782: LD_VAR 0 17
22786: PUSH
22787: LD_INT 1
22789: ARRAY
22790: PPUSH
22791: CALL_OW 251
22795: PPUSH
22796: LD_VAR 0 17
22800: PUSH
22801: LD_INT 1
22803: ARRAY
22804: PPUSH
22805: CALL_OW 254
22809: PPUSH
22810: LD_INT 5
22812: PPUSH
22813: CALL_OW 273
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22822: LD_VAR 0 16
22826: PUSH
22827: LD_INT 1
22829: ARRAY
22830: PPUSH
22831: LD_VAR 0 16
22835: PUSH
22836: LD_INT 2
22838: ARRAY
22839: PPUSH
22840: CALL_OW 488
22844: IFFALSE 22875
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22846: LD_VAR 0 13
22850: PPUSH
22851: LD_VAR 0 16
22855: PUSH
22856: LD_INT 1
22858: ARRAY
22859: PPUSH
22860: LD_VAR 0 16
22864: PUSH
22865: LD_INT 2
22867: ARRAY
22868: PPUSH
22869: CALL_OW 111
// continue ;
22873: GO 22365
// end ; end ; r := GetDir ( tmp ) ;
22875: LD_ADDR_VAR 0 15
22879: PUSH
22880: LD_VAR 0 13
22884: PPUSH
22885: CALL_OW 254
22889: ST_TO_ADDR
// if r = 5 then
22890: LD_VAR 0 15
22894: PUSH
22895: LD_INT 5
22897: EQUAL
22898: IFFALSE 22908
// r := 0 ;
22900: LD_ADDR_VAR 0 15
22904: PUSH
22905: LD_INT 0
22907: ST_TO_ADDR
// for j = r to 5 do
22908: LD_ADDR_VAR 0 10
22912: PUSH
22913: DOUBLE
22914: LD_VAR 0 15
22918: DEC
22919: ST_TO_ADDR
22920: LD_INT 5
22922: PUSH
22923: FOR_TO
22924: IFFALSE 23038
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22926: LD_ADDR_VAR 0 11
22930: PUSH
22931: LD_VAR 0 13
22935: PPUSH
22936: CALL_OW 250
22940: PPUSH
22941: LD_VAR 0 10
22945: PPUSH
22946: LD_INT 2
22948: PPUSH
22949: CALL_OW 272
22953: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22954: LD_ADDR_VAR 0 12
22958: PUSH
22959: LD_VAR 0 13
22963: PPUSH
22964: CALL_OW 251
22968: PPUSH
22969: LD_VAR 0 10
22973: PPUSH
22974: LD_INT 2
22976: PPUSH
22977: CALL_OW 273
22981: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22982: LD_VAR 0 11
22986: PPUSH
22987: LD_VAR 0 12
22991: PPUSH
22992: CALL_OW 488
22996: PUSH
22997: LD_VAR 0 11
23001: PPUSH
23002: LD_VAR 0 12
23006: PPUSH
23007: CALL_OW 428
23011: NOT
23012: AND
23013: IFFALSE 23036
// begin ComMoveXY ( tmp , _x , _y ) ;
23015: LD_VAR 0 13
23019: PPUSH
23020: LD_VAR 0 11
23024: PPUSH
23025: LD_VAR 0 12
23029: PPUSH
23030: CALL_OW 111
// break ;
23034: GO 23038
// end ; end ;
23036: GO 22923
23038: POP
23039: POP
// end ; end ;
23040: GO 22365
23042: POP
23043: POP
// end ;
23044: LD_VAR 0 8
23048: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23049: LD_INT 0
23051: PPUSH
// result := true ;
23052: LD_ADDR_VAR 0 3
23056: PUSH
23057: LD_INT 1
23059: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23060: LD_VAR 0 2
23064: PUSH
23065: LD_INT 24
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23079
23071: LD_INT 33
23073: DOUBLE
23074: EQUAL
23075: IFTRUE 23079
23077: GO 23104
23079: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_INT 32
23087: PPUSH
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 321
23097: PUSH
23098: LD_INT 2
23100: EQUAL
23101: ST_TO_ADDR
23102: GO 23420
23104: LD_INT 20
23106: DOUBLE
23107: EQUAL
23108: IFTRUE 23112
23110: GO 23137
23112: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23113: LD_ADDR_VAR 0 3
23117: PUSH
23118: LD_INT 6
23120: PPUSH
23121: LD_VAR 0 1
23125: PPUSH
23126: CALL_OW 321
23130: PUSH
23131: LD_INT 2
23133: EQUAL
23134: ST_TO_ADDR
23135: GO 23420
23137: LD_INT 22
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23151
23143: LD_INT 36
23145: DOUBLE
23146: EQUAL
23147: IFTRUE 23151
23149: GO 23176
23151: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: LD_INT 15
23159: PPUSH
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 321
23169: PUSH
23170: LD_INT 2
23172: EQUAL
23173: ST_TO_ADDR
23174: GO 23420
23176: LD_INT 30
23178: DOUBLE
23179: EQUAL
23180: IFTRUE 23184
23182: GO 23209
23184: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23185: LD_ADDR_VAR 0 3
23189: PUSH
23190: LD_INT 20
23192: PPUSH
23193: LD_VAR 0 1
23197: PPUSH
23198: CALL_OW 321
23202: PUSH
23203: LD_INT 2
23205: EQUAL
23206: ST_TO_ADDR
23207: GO 23420
23209: LD_INT 28
23211: DOUBLE
23212: EQUAL
23213: IFTRUE 23223
23215: LD_INT 21
23217: DOUBLE
23218: EQUAL
23219: IFTRUE 23223
23221: GO 23248
23223: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23224: LD_ADDR_VAR 0 3
23228: PUSH
23229: LD_INT 21
23231: PPUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: CALL_OW 321
23241: PUSH
23242: LD_INT 2
23244: EQUAL
23245: ST_TO_ADDR
23246: GO 23420
23248: LD_INT 16
23250: DOUBLE
23251: EQUAL
23252: IFTRUE 23256
23254: GO 23281
23256: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_INT 84
23264: PPUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 321
23274: PUSH
23275: LD_INT 2
23277: EQUAL
23278: ST_TO_ADDR
23279: GO 23420
23281: LD_INT 19
23283: DOUBLE
23284: EQUAL
23285: IFTRUE 23295
23287: LD_INT 23
23289: DOUBLE
23290: EQUAL
23291: IFTRUE 23295
23293: GO 23320
23295: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23296: LD_ADDR_VAR 0 3
23300: PUSH
23301: LD_INT 83
23303: PPUSH
23304: LD_VAR 0 1
23308: PPUSH
23309: CALL_OW 321
23313: PUSH
23314: LD_INT 2
23316: EQUAL
23317: ST_TO_ADDR
23318: GO 23420
23320: LD_INT 17
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 23353
23328: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23329: LD_ADDR_VAR 0 3
23333: PUSH
23334: LD_INT 39
23336: PPUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL_OW 321
23346: PUSH
23347: LD_INT 2
23349: EQUAL
23350: ST_TO_ADDR
23351: GO 23420
23353: LD_INT 18
23355: DOUBLE
23356: EQUAL
23357: IFTRUE 23361
23359: GO 23386
23361: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23362: LD_ADDR_VAR 0 3
23366: PUSH
23367: LD_INT 40
23369: PPUSH
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 321
23379: PUSH
23380: LD_INT 2
23382: EQUAL
23383: ST_TO_ADDR
23384: GO 23420
23386: LD_INT 27
23388: DOUBLE
23389: EQUAL
23390: IFTRUE 23394
23392: GO 23419
23394: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23395: LD_ADDR_VAR 0 3
23399: PUSH
23400: LD_INT 35
23402: PPUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 321
23412: PUSH
23413: LD_INT 2
23415: EQUAL
23416: ST_TO_ADDR
23417: GO 23420
23419: POP
// end ;
23420: LD_VAR 0 3
23424: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23425: LD_INT 0
23427: PPUSH
23428: PPUSH
23429: PPUSH
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
// result := false ;
23438: LD_ADDR_VAR 0 6
23442: PUSH
23443: LD_INT 0
23445: ST_TO_ADDR
// if btype = b_depot then
23446: LD_VAR 0 2
23450: PUSH
23451: LD_INT 0
23453: EQUAL
23454: IFFALSE 23466
// begin result := true ;
23456: LD_ADDR_VAR 0 6
23460: PUSH
23461: LD_INT 1
23463: ST_TO_ADDR
// exit ;
23464: GO 24292
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23466: LD_VAR 0 1
23470: NOT
23471: PUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 266
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: IN
23492: NOT
23493: OR
23494: PUSH
23495: LD_VAR 0 2
23499: NOT
23500: OR
23501: PUSH
23502: LD_VAR 0 5
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: LD_INT 4
23521: PUSH
23522: LD_INT 5
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: IN
23533: NOT
23534: OR
23535: PUSH
23536: LD_VAR 0 3
23540: PPUSH
23541: LD_VAR 0 4
23545: PPUSH
23546: CALL_OW 488
23550: NOT
23551: OR
23552: IFFALSE 23556
// exit ;
23554: GO 24292
// side := GetSide ( depot ) ;
23556: LD_ADDR_VAR 0 9
23560: PUSH
23561: LD_VAR 0 1
23565: PPUSH
23566: CALL_OW 255
23570: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23571: LD_VAR 0 9
23575: PPUSH
23576: LD_VAR 0 2
23580: PPUSH
23581: CALL 23049 0 2
23585: NOT
23586: IFFALSE 23590
// exit ;
23588: GO 24292
// pom := GetBase ( depot ) ;
23590: LD_ADDR_VAR 0 10
23594: PUSH
23595: LD_VAR 0 1
23599: PPUSH
23600: CALL_OW 274
23604: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23605: LD_ADDR_VAR 0 11
23609: PUSH
23610: LD_VAR 0 2
23614: PPUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 248
23624: PPUSH
23625: CALL_OW 450
23629: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23630: LD_VAR 0 10
23634: PPUSH
23635: LD_INT 1
23637: PPUSH
23638: CALL_OW 275
23642: PUSH
23643: LD_VAR 0 11
23647: PUSH
23648: LD_INT 1
23650: ARRAY
23651: GREATEREQUAL
23652: PUSH
23653: LD_VAR 0 10
23657: PPUSH
23658: LD_INT 2
23660: PPUSH
23661: CALL_OW 275
23665: PUSH
23666: LD_VAR 0 11
23670: PUSH
23671: LD_INT 2
23673: ARRAY
23674: GREATEREQUAL
23675: AND
23676: PUSH
23677: LD_VAR 0 10
23681: PPUSH
23682: LD_INT 3
23684: PPUSH
23685: CALL_OW 275
23689: PUSH
23690: LD_VAR 0 11
23694: PUSH
23695: LD_INT 3
23697: ARRAY
23698: GREATEREQUAL
23699: AND
23700: NOT
23701: IFFALSE 23705
// exit ;
23703: GO 24292
// if GetBType ( depot ) = b_depot then
23705: LD_VAR 0 1
23709: PPUSH
23710: CALL_OW 266
23714: PUSH
23715: LD_INT 0
23717: EQUAL
23718: IFFALSE 23730
// dist := 28 else
23720: LD_ADDR_VAR 0 14
23724: PUSH
23725: LD_INT 28
23727: ST_TO_ADDR
23728: GO 23738
// dist := 36 ;
23730: LD_ADDR_VAR 0 14
23734: PUSH
23735: LD_INT 36
23737: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23738: LD_VAR 0 1
23742: PPUSH
23743: LD_VAR 0 3
23747: PPUSH
23748: LD_VAR 0 4
23752: PPUSH
23753: CALL_OW 297
23757: PUSH
23758: LD_VAR 0 14
23762: GREATER
23763: IFFALSE 23767
// exit ;
23765: GO 24292
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23767: LD_ADDR_VAR 0 12
23771: PUSH
23772: LD_VAR 0 2
23776: PPUSH
23777: LD_VAR 0 3
23781: PPUSH
23782: LD_VAR 0 4
23786: PPUSH
23787: LD_VAR 0 5
23791: PPUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 248
23801: PPUSH
23802: LD_INT 0
23804: PPUSH
23805: CALL 24297 0 6
23809: ST_TO_ADDR
// if not hexes then
23810: LD_VAR 0 12
23814: NOT
23815: IFFALSE 23819
// exit ;
23817: GO 24292
// hex := GetHexInfo ( x , y ) ;
23819: LD_ADDR_VAR 0 15
23823: PUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: LD_VAR 0 4
23833: PPUSH
23834: CALL_OW 546
23838: ST_TO_ADDR
// if hex [ 1 ] then
23839: LD_VAR 0 15
23843: PUSH
23844: LD_INT 1
23846: ARRAY
23847: IFFALSE 23851
// exit ;
23849: GO 24292
// height := hex [ 2 ] ;
23851: LD_ADDR_VAR 0 13
23855: PUSH
23856: LD_VAR 0 15
23860: PUSH
23861: LD_INT 2
23863: ARRAY
23864: ST_TO_ADDR
// for i = 1 to hexes do
23865: LD_ADDR_VAR 0 7
23869: PUSH
23870: DOUBLE
23871: LD_INT 1
23873: DEC
23874: ST_TO_ADDR
23875: LD_VAR 0 12
23879: PUSH
23880: FOR_TO
23881: IFFALSE 24211
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23883: LD_VAR 0 12
23887: PUSH
23888: LD_VAR 0 7
23892: ARRAY
23893: PUSH
23894: LD_INT 1
23896: ARRAY
23897: PPUSH
23898: LD_VAR 0 12
23902: PUSH
23903: LD_VAR 0 7
23907: ARRAY
23908: PUSH
23909: LD_INT 2
23911: ARRAY
23912: PPUSH
23913: CALL_OW 488
23917: NOT
23918: PUSH
23919: LD_VAR 0 12
23923: PUSH
23924: LD_VAR 0 7
23928: ARRAY
23929: PUSH
23930: LD_INT 1
23932: ARRAY
23933: PPUSH
23934: LD_VAR 0 12
23938: PUSH
23939: LD_VAR 0 7
23943: ARRAY
23944: PUSH
23945: LD_INT 2
23947: ARRAY
23948: PPUSH
23949: CALL_OW 428
23953: PUSH
23954: LD_INT 0
23956: GREATER
23957: OR
23958: PUSH
23959: LD_VAR 0 12
23963: PUSH
23964: LD_VAR 0 7
23968: ARRAY
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: LD_VAR 0 12
23978: PUSH
23979: LD_VAR 0 7
23983: ARRAY
23984: PUSH
23985: LD_INT 2
23987: ARRAY
23988: PPUSH
23989: CALL_OW 351
23993: OR
23994: IFFALSE 24000
// exit ;
23996: POP
23997: POP
23998: GO 24292
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24000: LD_ADDR_VAR 0 8
24004: PUSH
24005: LD_VAR 0 12
24009: PUSH
24010: LD_VAR 0 7
24014: ARRAY
24015: PUSH
24016: LD_INT 1
24018: ARRAY
24019: PPUSH
24020: LD_VAR 0 12
24024: PUSH
24025: LD_VAR 0 7
24029: ARRAY
24030: PUSH
24031: LD_INT 2
24033: ARRAY
24034: PPUSH
24035: CALL_OW 546
24039: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24040: LD_VAR 0 8
24044: PUSH
24045: LD_INT 1
24047: ARRAY
24048: PUSH
24049: LD_VAR 0 8
24053: PUSH
24054: LD_INT 2
24056: ARRAY
24057: PUSH
24058: LD_VAR 0 13
24062: PUSH
24063: LD_INT 2
24065: PLUS
24066: GREATER
24067: OR
24068: PUSH
24069: LD_VAR 0 8
24073: PUSH
24074: LD_INT 2
24076: ARRAY
24077: PUSH
24078: LD_VAR 0 13
24082: PUSH
24083: LD_INT 2
24085: MINUS
24086: LESS
24087: OR
24088: PUSH
24089: LD_VAR 0 8
24093: PUSH
24094: LD_INT 3
24096: ARRAY
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: LD_INT 8
24103: PUSH
24104: LD_INT 9
24106: PUSH
24107: LD_INT 10
24109: PUSH
24110: LD_INT 11
24112: PUSH
24113: LD_INT 12
24115: PUSH
24116: LD_INT 13
24118: PUSH
24119: LD_INT 16
24121: PUSH
24122: LD_INT 17
24124: PUSH
24125: LD_INT 18
24127: PUSH
24128: LD_INT 19
24130: PUSH
24131: LD_INT 20
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: IN
24152: NOT
24153: OR
24154: PUSH
24155: LD_VAR 0 8
24159: PUSH
24160: LD_INT 5
24162: ARRAY
24163: NOT
24164: OR
24165: PUSH
24166: LD_VAR 0 8
24170: PUSH
24171: LD_INT 6
24173: ARRAY
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 7
24183: PUSH
24184: LD_INT 9
24186: PUSH
24187: LD_INT 10
24189: PUSH
24190: LD_INT 11
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: IN
24201: NOT
24202: OR
24203: IFFALSE 24209
// exit ;
24205: POP
24206: POP
24207: GO 24292
// end ;
24209: GO 23880
24211: POP
24212: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24213: LD_VAR 0 9
24217: PPUSH
24218: LD_VAR 0 3
24222: PPUSH
24223: LD_VAR 0 4
24227: PPUSH
24228: LD_INT 20
24230: PPUSH
24231: CALL 16215 0 4
24235: PUSH
24236: LD_INT 4
24238: ARRAY
24239: IFFALSE 24243
// exit ;
24241: GO 24292
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24243: LD_VAR 0 2
24247: PUSH
24248: LD_INT 29
24250: PUSH
24251: LD_INT 30
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: IN
24258: PUSH
24259: LD_VAR 0 3
24263: PPUSH
24264: LD_VAR 0 4
24268: PPUSH
24269: LD_VAR 0 9
24273: PPUSH
24274: CALL_OW 440
24278: NOT
24279: AND
24280: IFFALSE 24284
// exit ;
24282: GO 24292
// result := true ;
24284: LD_ADDR_VAR 0 6
24288: PUSH
24289: LD_INT 1
24291: ST_TO_ADDR
// end ;
24292: LD_VAR 0 6
24296: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24297: LD_INT 0
24299: PPUSH
24300: PPUSH
24301: PPUSH
24302: PPUSH
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
24307: PPUSH
24308: PPUSH
24309: PPUSH
24310: PPUSH
24311: PPUSH
24312: PPUSH
24313: PPUSH
24314: PPUSH
24315: PPUSH
24316: PPUSH
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
24326: PPUSH
24327: PPUSH
24328: PPUSH
24329: PPUSH
24330: PPUSH
24331: PPUSH
24332: PPUSH
24333: PPUSH
24334: PPUSH
24335: PPUSH
24336: PPUSH
24337: PPUSH
24338: PPUSH
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
24344: PPUSH
24345: PPUSH
24346: PPUSH
24347: PPUSH
24348: PPUSH
24349: PPUSH
24350: PPUSH
24351: PPUSH
24352: PPUSH
24353: PPUSH
24354: PPUSH
24355: PPUSH
24356: PPUSH
// result = [ ] ;
24357: LD_ADDR_VAR 0 7
24361: PUSH
24362: EMPTY
24363: ST_TO_ADDR
// temp_list = [ ] ;
24364: LD_ADDR_VAR 0 9
24368: PUSH
24369: EMPTY
24370: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24371: LD_VAR 0 4
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: LD_INT 2
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: IN
24402: NOT
24403: PUSH
24404: LD_VAR 0 1
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 1
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: IN
24419: PUSH
24420: LD_VAR 0 5
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: LD_INT 3
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: IN
24439: NOT
24440: AND
24441: OR
24442: IFFALSE 24446
// exit ;
24444: GO 42837
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24446: LD_VAR 0 1
24450: PUSH
24451: LD_INT 6
24453: PUSH
24454: LD_INT 7
24456: PUSH
24457: LD_INT 8
24459: PUSH
24460: LD_INT 13
24462: PUSH
24463: LD_INT 12
24465: PUSH
24466: LD_INT 15
24468: PUSH
24469: LD_INT 11
24471: PUSH
24472: LD_INT 14
24474: PUSH
24475: LD_INT 10
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: IN
24489: IFFALSE 24499
// btype = b_lab ;
24491: LD_ADDR_VAR 0 1
24495: PUSH
24496: LD_INT 6
24498: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24499: LD_VAR 0 6
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: LD_INT 1
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: LIST
24517: IN
24518: NOT
24519: PUSH
24520: LD_VAR 0 1
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 3
24536: PUSH
24537: LD_INT 6
24539: PUSH
24540: LD_INT 36
24542: PUSH
24543: LD_INT 4
24545: PUSH
24546: LD_INT 5
24548: PUSH
24549: LD_INT 31
24551: PUSH
24552: LD_INT 32
24554: PUSH
24555: LD_INT 33
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: IN
24571: NOT
24572: PUSH
24573: LD_VAR 0 6
24577: PUSH
24578: LD_INT 1
24580: EQUAL
24581: AND
24582: OR
24583: PUSH
24584: LD_VAR 0 1
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: IN
24599: NOT
24600: PUSH
24601: LD_VAR 0 6
24605: PUSH
24606: LD_INT 2
24608: EQUAL
24609: AND
24610: OR
24611: IFFALSE 24621
// mode = 0 ;
24613: LD_ADDR_VAR 0 6
24617: PUSH
24618: LD_INT 0
24620: ST_TO_ADDR
// case mode of 0 :
24621: LD_VAR 0 6
24625: PUSH
24626: LD_INT 0
24628: DOUBLE
24629: EQUAL
24630: IFTRUE 24634
24632: GO 36087
24634: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24635: LD_ADDR_VAR 0 11
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 0
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: LD_INT 1
24708: NEG
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: LD_INT 2
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 2
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 2
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: NEG
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: LD_INT 3
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: LD_INT 3
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24828: LD_ADDR_VAR 0 12
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 1
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: LD_INT 0
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 2
24930: PUSH
24931: LD_INT 1
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 2
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: LD_INT 1
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 3
24985: NEG
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 3
24996: NEG
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25024: LD_ADDR_VAR 0 13
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 0
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: LD_INT 2
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 2
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: LD_INT 2
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: NEG
25148: PUSH
25149: LD_INT 1
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: NEG
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 2
25171: NEG
25172: PUSH
25173: LD_INT 3
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 3
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 3
25195: NEG
25196: PUSH
25197: LD_INT 3
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25223: LD_ADDR_VAR 0 14
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 1
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 1
25281: NEG
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: LD_INT 1
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: NEG
25305: PUSH
25306: LD_INT 2
25308: NEG
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: LD_INT 3
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 0
25381: PUSH
25382: LD_INT 3
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25419: LD_ADDR_VAR 0 15
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 1
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 2
25542: NEG
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 2
25553: NEG
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 3
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 3
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25612: LD_ADDR_VAR 0 16
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: LD_INT 0
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: NEG
25694: PUSH
25695: LD_INT 2
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 2
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: LD_INT 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 3
25769: PUSH
25770: LD_INT 3
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 2
25779: PUSH
25780: LD_INT 3
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25805: LD_ADDR_VAR 0 17
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: LD_INT 2
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 2
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: NEG
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 2
25992: NEG
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: NEG
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26035: LD_ADDR_VAR 0 18
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 1
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: NEG
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: LD_INT 2
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 2
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: LD_INT 2
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26265: LD_ADDR_VAR 0 19
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: LD_INT 1
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: LD_INT 2
26350: NEG
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: LD_INT 1
26372: NEG
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 2
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 2
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 2
26400: PUSH
26401: LD_INT 2
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 2
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: NEG
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26495: LD_ADDR_VAR 0 20
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: LD_INT 2
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 2
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: LD_INT 2
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 1
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: LD_INT 1
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26725: LD_ADDR_VAR 0 21
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: NEG
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 2
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: NEG
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: NEG
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 2
26924: NEG
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26955: LD_ADDR_VAR 0 22
26959: PUSH
26960: LD_INT 0
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 1
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 0
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: NEG
27025: PUSH
27026: LD_INT 1
27028: NEG
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: LD_INT 2
27040: NEG
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: PUSH
27060: LD_INT 1
27062: NEG
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: NEG
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 2
27154: NEG
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27185: LD_ADDR_VAR 0 23
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: LD_INT 2
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: LD_INT 1
27292: NEG
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: LD_INT 2
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: NEG
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 2
27372: NEG
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 2
27384: NEG
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: LD_INT 3
27400: NEG
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: NEG
27409: PUSH
27410: LD_INT 3
27412: NEG
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27465: LD_ADDR_VAR 0 24
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: LD_INT 1
27485: NEG
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 0
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: NEG
27524: PUSH
27525: LD_INT 0
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 1
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: LD_INT 2
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: PUSH
27601: LD_INT 2
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 2
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 2
27641: NEG
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: NEG
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: LD_INT 1
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 3
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27741: LD_ADDR_VAR 0 25
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: LD_INT 0
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: LD_INT 2
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: LD_INT 2
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: NEG
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: NEG
27941: PUSH
27942: LD_INT 2
27944: NEG
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 3
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 3
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28015: LD_ADDR_VAR 0 26
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 0
28032: PUSH
28033: LD_INT 1
28035: NEG
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: PUSH
28044: LD_INT 0
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: LD_INT 1
28088: NEG
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 2
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 2
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 1
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 2
28191: NEG
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: NEG
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: LD_INT 2
28218: NEG
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 2
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28291: LD_ADDR_VAR 0 27
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 1
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: LD_INT 1
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: NEG
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: NEG
28361: PUSH
28362: LD_INT 1
28364: NEG
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 2
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 2
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: LD_INT 2
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 2
28478: NEG
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: NEG
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 3
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 3
28536: NEG
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: LIST
28569: LIST
28570: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28571: LD_ADDR_VAR 0 28
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 0
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: LD_INT 1
28591: NEG
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 0
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: LD_INT 1
28678: NEG
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: LD_INT 1
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: LD_INT 0
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 2
28758: NEG
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: NEG
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 2
28782: NEG
28783: PUSH
28784: LD_INT 3
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 3
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 3
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 3
28818: NEG
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28853: LD_ADDR_VAR 0 29
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 0
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 1
28873: NEG
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 1
28911: NEG
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: LD_INT 2
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 0
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: LD_INT 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: LD_INT 2
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: NEG
29044: PUSH
29045: LD_INT 3
29047: NEG
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: LD_INT 3
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: LD_INT 2
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 3
29097: NEG
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29132: LD_ADDR_VAR 0 30
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: LD_INT 1
29152: NEG
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 1
29190: NEG
29191: PUSH
29192: LD_INT 0
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 2
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 2
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: LD_INT 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 2
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: NEG
29322: PUSH
29323: LD_INT 3
29325: NEG
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 2
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 3
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: NEG
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 3
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29410: LD_ADDR_VAR 0 31
29414: PUSH
29415: LD_INT 0
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 1
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 1
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: NEG
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 1
29491: NEG
29492: PUSH
29493: LD_INT 2
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: LD_INT 1
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: LD_INT 1
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 1
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: NEG
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 2
29575: NEG
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 2
29587: NEG
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: LD_INT 3
29603: NEG
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 3
29653: NEG
29654: PUSH
29655: LD_INT 2
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29688: LD_ADDR_VAR 0 32
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 1
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 1
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 1
29843: NEG
29844: PUSH
29845: LD_INT 1
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 2
29854: NEG
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: NEG
29878: PUSH
29879: LD_INT 3
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 2
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: LD_INT 3
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: NEG
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 3
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29966: LD_ADDR_VAR 0 33
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 1
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 0
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: LD_INT 1
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 2
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 0
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 2
30132: NEG
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 2
30144: NEG
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: LD_INT 3
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 2
30168: PUSH
30169: LD_INT 1
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 3
30179: PUSH
30180: LD_INT 1
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 3
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: NEG
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: LD_INT 2
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30245: LD_ADDR_VAR 0 34
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 0
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 1
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: LD_INT 1
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 2
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: LD_INT 2
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: NEG
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: LD_INT 3
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 3
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 2
30469: PUSH
30470: LD_INT 3
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30525: LD_ADDR_VAR 0 35
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 0
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 2
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30637: LD_ADDR_VAR 0 36
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: LD_INT 1
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 1
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: NEG
30719: PUSH
30720: LD_INT 2
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30749: LD_ADDR_VAR 0 37
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30861: LD_ADDR_VAR 0 38
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 1
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30973: LD_ADDR_VAR 0 39
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: PUSH
30988: LD_INT 0
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: LD_INT 1
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: NEG
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: NEG
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: LD_INT 2
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31085: LD_ADDR_VAR 0 40
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 1
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: NEG
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31197: LD_ADDR_VAR 0 41
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 1
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: LD_INT 1
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: LD_INT 1
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 2
31311: PUSH
31312: LD_INT 1
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 2
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 3
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 2
31460: NEG
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 3
31482: NEG
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 3
31494: NEG
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 3
31506: NEG
31507: PUSH
31508: LD_INT 3
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31547: LD_ADDR_VAR 0 42
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: LD_INT 1
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 2
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 2
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 2
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: NEG
31714: PUSH
31715: LD_INT 1
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: LD_INT 2
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 3
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 2
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 3
31793: PUSH
31794: LD_INT 3
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 0
31823: PUSH
31824: LD_INT 3
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 3
31844: NEG
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: LD_INT 3
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31897: LD_ADDR_VAR 0 43
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 2
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 1
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: LD_INT 3
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: LD_INT 3
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: LD_INT 1
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32245: LD_ADDR_VAR 0 44
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 0
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 0
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 2
32359: PUSH
32360: LD_INT 1
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: NEG
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: NEG
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 2
32411: NEG
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: LD_INT 3
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 3
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 3
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: LD_INT 3
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 2
32508: NEG
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 3
32519: NEG
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 3
32530: NEG
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: NEG
32543: PUSH
32544: LD_INT 2
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 3
32554: NEG
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32595: LD_ADDR_VAR 0 45
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 0
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: LD_INT 0
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: LD_INT 0
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: NEG
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: LD_INT 3
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: LD_INT 0
32809: PUSH
32810: LD_INT 3
32812: NEG
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: LD_INT 2
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: LD_INT 3
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 3
32892: NEG
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 3
32904: NEG
32905: PUSH
32906: LD_INT 3
32908: NEG
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32945: LD_ADDR_VAR 0 46
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: NEG
33027: PUSH
33028: LD_INT 2
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: LD_INT 2
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: LD_INT 0
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 2
33122: NEG
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: LD_INT 3
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 3
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 2
33160: NEG
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: LD_INT 0
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: LD_INT 3
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 0
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: LD_INT 2
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 2
33230: NEG
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: NEG
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33293: LD_ADDR_VAR 0 47
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 0
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 1
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 0
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: LD_INT 1
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 2
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: LD_INT 2
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33444: LD_ADDR_VAR 0 48
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 2
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 2
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 2
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33591: LD_ADDR_VAR 0 49
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: NEG
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33735: LD_ADDR_VAR 0 50
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 2
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33879: LD_ADDR_VAR 0 51
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 1
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: NEG
33949: PUSH
33950: LD_INT 1
33952: NEG
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: LD_INT 2
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 1
33980: NEG
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34026: LD_ADDR_VAR 0 52
34030: PUSH
34031: LD_INT 0
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 0
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 1
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 1
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: NEG
34131: PUSH
34132: LD_INT 0
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: NEG
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34177: LD_ADDR_VAR 0 53
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: NEG
34259: PUSH
34260: LD_INT 2
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34407: LD_ADDR_VAR 0 54
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 0
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 1
34488: NEG
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 1
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: NEG
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34637: LD_ADDR_VAR 0 55
34641: PUSH
34642: LD_INT 0
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 0
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: LD_INT 1
34710: NEG
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 2
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 0
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: LD_INT 2
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34867: LD_ADDR_VAR 0 56
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35097: LD_ADDR_VAR 0 57
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 2
35273: NEG
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: NEG
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: NEG
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35327: LD_ADDR_VAR 0 58
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 0
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 1
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: LD_INT 2
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 2
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 2
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35557: LD_ADDR_VAR 0 59
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35645: LD_ADDR_VAR 0 60
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35733: LD_ADDR_VAR 0 61
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35821: LD_ADDR_VAR 0 62
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35909: LD_ADDR_VAR 0 63
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35997: LD_ADDR_VAR 0 64
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 0
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// end ; 1 :
36085: GO 41982
36087: LD_INT 1
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36095
36093: GO 38718
36095: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36096: LD_ADDR_VAR 0 11
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 3
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 3
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36140: LD_ADDR_VAR 0 12
36144: PUSH
36145: LD_INT 2
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 3
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36181: LD_ADDR_VAR 0 13
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 3
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 3
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36221: LD_ADDR_VAR 0 14
36225: PUSH
36226: LD_INT 1
36228: PUSH
36229: LD_INT 3
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 3
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 1
36248: NEG
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36262: LD_ADDR_VAR 0 15
36266: PUSH
36267: LD_INT 2
36269: NEG
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 3
36280: NEG
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 3
36291: NEG
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36306: LD_ADDR_VAR 0 16
36310: PUSH
36311: LD_INT 2
36313: NEG
36314: PUSH
36315: LD_INT 3
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 3
36325: NEG
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 3
36337: NEG
36338: PUSH
36339: LD_INT 3
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36352: LD_ADDR_VAR 0 17
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 3
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: LD_INT 3
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 2
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36396: LD_ADDR_VAR 0 18
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36437: LD_ADDR_VAR 0 19
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36477: LD_ADDR_VAR 0 20
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 3
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 3
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36518: LD_ADDR_VAR 0 21
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 3
36536: NEG
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 3
36547: NEG
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: LIST
36561: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36562: LD_ADDR_VAR 0 22
36566: PUSH
36567: LD_INT 2
36569: NEG
36570: PUSH
36571: LD_INT 3
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 3
36581: NEG
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 3
36593: NEG
36594: PUSH
36595: LD_INT 3
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: LIST
36607: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36608: LD_ADDR_VAR 0 23
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: LD_INT 3
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 4
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: LIST
36651: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36652: LD_ADDR_VAR 0 24
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 3
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 4
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36693: LD_ADDR_VAR 0 25
36697: PUSH
36698: LD_INT 3
36700: PUSH
36701: LD_INT 3
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: LD_INT 3
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 3
36720: PUSH
36721: LD_INT 4
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: LIST
36732: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36733: LD_ADDR_VAR 0 26
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 3
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: LD_INT 4
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36774: LD_ADDR_VAR 0 27
36778: PUSH
36779: LD_INT 3
36781: NEG
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 3
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 4
36803: NEG
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36818: LD_ADDR_VAR 0 28
36822: PUSH
36823: LD_INT 3
36825: NEG
36826: PUSH
36827: LD_INT 3
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 3
36837: NEG
36838: PUSH
36839: LD_INT 4
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 4
36849: NEG
36850: PUSH
36851: LD_INT 3
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36864: LD_ADDR_VAR 0 29
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 3
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 2
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: LD_INT 4
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 4
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 3
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: LD_INT 5
36943: NEG
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: LD_INT 5
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: LD_INT 4
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 6
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 6
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 5
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37019: LD_ADDR_VAR 0 30
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 4
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 4
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 4
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 5
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 5
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 5
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 6
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 6
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37162: LD_ADDR_VAR 0 31
37166: PUSH
37167: LD_INT 3
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 3
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 3
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 4
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 4
37209: PUSH
37210: LD_INT 4
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 3
37219: PUSH
37220: LD_INT 4
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 5
37229: PUSH
37230: LD_INT 4
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 5
37239: PUSH
37240: LD_INT 5
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 4
37249: PUSH
37250: LD_INT 5
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 6
37259: PUSH
37260: LD_INT 5
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 6
37269: PUSH
37270: LD_INT 6
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 5
37279: PUSH
37280: LD_INT 6
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37301: LD_ADDR_VAR 0 32
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: LD_INT 3
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 4
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 4
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: NEG
37360: PUSH
37361: LD_INT 3
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 5
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: LD_INT 5
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: LD_INT 4
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 6
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 6
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 5
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37444: LD_ADDR_VAR 0 33
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 3
37462: NEG
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 3
37473: NEG
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 4
37496: NEG
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 4
37507: NEG
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 4
37519: NEG
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 5
37530: NEG
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 5
37541: NEG
37542: PUSH
37543: LD_INT 1
37545: NEG
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 5
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 6
37564: NEG
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 6
37575: NEG
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37599: LD_ADDR_VAR 0 34
37603: PUSH
37604: LD_INT 2
37606: NEG
37607: PUSH
37608: LD_INT 3
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 3
37618: NEG
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 3
37630: NEG
37631: PUSH
37632: LD_INT 3
37634: NEG
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 3
37642: NEG
37643: PUSH
37644: LD_INT 4
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 4
37654: NEG
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 4
37666: NEG
37667: PUSH
37668: LD_INT 4
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 4
37678: NEG
37679: PUSH
37680: LD_INT 5
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 5
37690: NEG
37691: PUSH
37692: LD_INT 4
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 5
37702: NEG
37703: PUSH
37704: LD_INT 5
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 5
37714: NEG
37715: PUSH
37716: LD_INT 6
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 6
37726: NEG
37727: PUSH
37728: LD_INT 5
37730: NEG
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 6
37738: NEG
37739: PUSH
37740: LD_INT 6
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37762: LD_ADDR_VAR 0 41
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: NEG
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37806: LD_ADDR_VAR 0 42
37810: PUSH
37811: LD_INT 2
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 2
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37847: LD_ADDR_VAR 0 43
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: LD_INT 2
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: LD_INT 2
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: LD_INT 3
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37887: LD_ADDR_VAR 0 44
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37928: LD_ADDR_VAR 0 45
37932: PUSH
37933: LD_INT 2
37935: NEG
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 3
37957: NEG
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: LIST
37971: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37972: LD_ADDR_VAR 0 46
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: LD_INT 3
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: NEG
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38018: LD_ADDR_VAR 0 47
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38051: LD_ADDR_VAR 0 48
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38082: LD_ADDR_VAR 0 49
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38111: LD_ADDR_VAR 0 50
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 3
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38140: LD_ADDR_VAR 0 51
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 2
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 2
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38171: LD_ADDR_VAR 0 52
38175: PUSH
38176: LD_INT 3
38178: NEG
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 3
38190: NEG
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38204: LD_ADDR_VAR 0 53
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38248: LD_ADDR_VAR 0 54
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 3
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 3
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: LIST
38288: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38289: LD_ADDR_VAR 0 55
38293: PUSH
38294: LD_INT 3
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: LD_INT 3
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 3
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38329: LD_ADDR_VAR 0 56
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38370: LD_ADDR_VAR 0 57
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 3
38388: NEG
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: NEG
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38414: LD_ADDR_VAR 0 58
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 3
38433: NEG
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: LD_INT 3
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: LIST
38459: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38460: LD_ADDR_VAR 0 59
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38504: LD_ADDR_VAR 0 60
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38545: LD_ADDR_VAR 0 61
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 2
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 2
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38585: LD_ADDR_VAR 0 62
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: LIST
38625: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38626: LD_ADDR_VAR 0 63
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38670: LD_ADDR_VAR 0 64
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// end ; 2 :
38716: GO 41982
38718: LD_INT 2
38720: DOUBLE
38721: EQUAL
38722: IFTRUE 38726
38724: GO 41981
38726: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38727: LD_ADDR_VAR 0 29
38731: PUSH
38732: LD_INT 4
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 4
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 5
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 5
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 4
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 3
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 3
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 2
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 5
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 4
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 4
38857: PUSH
38858: LD_INT 4
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 4
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 4
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 3
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: LD_INT 4
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 5
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 5
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: LD_INT 4
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 2
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 3
39021: NEG
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: NEG
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 3
39055: NEG
39056: PUSH
39057: LD_INT 1
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 4
39066: NEG
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 4
39077: NEG
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 4
39089: NEG
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 2
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 4
39112: NEG
39113: PUSH
39114: LD_INT 4
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 4
39124: NEG
39125: PUSH
39126: LD_INT 5
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: LD_INT 4
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 3
39148: NEG
39149: PUSH
39150: LD_INT 3
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 4
39160: NEG
39161: PUSH
39162: LD_INT 3
39164: NEG
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 5
39172: NEG
39173: PUSH
39174: LD_INT 4
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 5
39184: NEG
39185: PUSH
39186: LD_INT 5
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: NEG
39197: PUSH
39198: LD_INT 5
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 5
39208: NEG
39209: PUSH
39210: LD_INT 3
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39265: LD_ADDR_VAR 0 30
39269: PUSH
39270: LD_INT 4
39272: PUSH
39273: LD_INT 4
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 4
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 5
39292: PUSH
39293: LD_INT 4
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 5
39302: PUSH
39303: LD_INT 5
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 4
39312: PUSH
39313: LD_INT 5
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 3
39322: PUSH
39323: LD_INT 4
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 3
39332: PUSH
39333: LD_INT 3
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 5
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 3
39352: PUSH
39353: LD_INT 5
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 3
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 3
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: PUSH
39393: LD_INT 4
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: LD_INT 4
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 4
39455: NEG
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 4
39466: NEG
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: NEG
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 4
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 5
39511: NEG
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 5
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 5
39534: NEG
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: NEG
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: NEG
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: NEG
39570: PUSH
39571: LD_INT 4
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: LD_INT 3
39585: NEG
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: NEG
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 4
39617: NEG
39618: PUSH
39619: LD_INT 3
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 4
39629: NEG
39630: PUSH
39631: LD_INT 4
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: LD_INT 4
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 4
39653: NEG
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 4
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: LD_INT 5
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: LD_INT 4
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 3
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 3
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 4
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: LD_INT 5
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 3
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 5
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39812: LD_ADDR_VAR 0 31
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 4
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 4
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: LD_INT 5
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: LD_INT 5
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: LD_INT 5
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 2
39901: NEG
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 3
39912: NEG
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 3
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 2
39935: NEG
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 3
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 4
39968: NEG
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 4
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 4
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: NEG
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 4
40014: NEG
40015: PUSH
40016: LD_INT 4
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 4
40026: NEG
40027: PUSH
40028: LD_INT 5
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 3
40038: NEG
40039: PUSH
40040: LD_INT 4
40042: NEG
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 3
40050: NEG
40051: PUSH
40052: LD_INT 3
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 4
40062: NEG
40063: PUSH
40064: LD_INT 3
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 5
40074: NEG
40075: PUSH
40076: LD_INT 4
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 5
40086: NEG
40087: PUSH
40088: LD_INT 5
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 3
40098: NEG
40099: PUSH
40100: LD_INT 5
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 5
40110: NEG
40111: PUSH
40112: LD_INT 3
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 3
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 4
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 3
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 2
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 3
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 4
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 4
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 4
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 4
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 5
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 5
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 4
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: LD_INT 2
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 5
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40362: LD_ADDR_VAR 0 32
40366: PUSH
40367: LD_INT 4
40369: NEG
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 4
40380: NEG
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 3
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 4
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 5
40425: NEG
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 5
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 5
40448: NEG
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 3
40471: NEG
40472: PUSH
40473: LD_INT 3
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 3
40483: NEG
40484: PUSH
40485: LD_INT 4
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: LD_INT 3
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: LD_INT 2
40511: NEG
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 3
40519: NEG
40520: PUSH
40521: LD_INT 2
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 4
40531: NEG
40532: PUSH
40533: LD_INT 3
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 4
40543: NEG
40544: PUSH
40545: LD_INT 4
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: NEG
40556: PUSH
40557: LD_INT 4
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 4
40567: NEG
40568: PUSH
40569: LD_INT 2
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 4
40582: NEG
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 5
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 4
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 3
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: LD_INT 4
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: LD_INT 5
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: LD_INT 5
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 3
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 4
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 4
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 4
40764: PUSH
40765: LD_INT 2
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 4
40774: PUSH
40775: LD_INT 4
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 4
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 5
40794: PUSH
40795: LD_INT 4
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 5
40804: PUSH
40805: LD_INT 5
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 4
40814: PUSH
40815: LD_INT 5
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: LD_INT 4
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: PUSH
40835: LD_INT 3
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 5
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40909: LD_ADDR_VAR 0 33
40913: PUSH
40914: LD_INT 4
40916: NEG
40917: PUSH
40918: LD_INT 4
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 4
40928: NEG
40929: PUSH
40930: LD_INT 5
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 3
40940: NEG
40941: PUSH
40942: LD_INT 4
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 3
40952: NEG
40953: PUSH
40954: LD_INT 3
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 4
40964: NEG
40965: PUSH
40966: LD_INT 3
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 5
40976: NEG
40977: PUSH
40978: LD_INT 4
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 5
40988: NEG
40989: PUSH
40990: LD_INT 5
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 3
41000: NEG
41001: PUSH
41002: LD_INT 5
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 5
41012: NEG
41013: PUSH
41014: LD_INT 3
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 3
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 4
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 4
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 4
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 4
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 4
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 5
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 5
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 4
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 3
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 3
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 3
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 5
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 3
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 4
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 4
41249: PUSH
41250: LD_INT 4
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 3
41259: PUSH
41260: LD_INT 4
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 3
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 4
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: LD_INT 4
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 4
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: LD_INT 4
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 5
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 5
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: LD_INT 4
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 5
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: LD_INT 3
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41447: LD_ADDR_VAR 0 34
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 4
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 5
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 4
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 3
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 4
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 5
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: LD_INT 3
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: LD_INT 5
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 3
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 3
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 4
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 4
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: LD_INT 2
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 4
41639: PUSH
41640: LD_INT 2
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 4
41649: PUSH
41650: LD_INT 4
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 4
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 5
41669: PUSH
41670: LD_INT 4
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 5
41679: PUSH
41680: LD_INT 5
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 4
41689: PUSH
41690: LD_INT 5
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 3
41699: PUSH
41700: LD_INT 4
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 5
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: LD_INT 5
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 3
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 4
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 4
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 4
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: NEG
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 4
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 4
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 3
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 4
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 5
41888: NEG
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 5
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 5
41911: NEG
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// end ; end ;
41979: GO 41982
41981: POP
// case btype of b_depot , b_warehouse :
41982: LD_VAR 0 1
41986: PUSH
41987: LD_INT 0
41989: DOUBLE
41990: EQUAL
41991: IFTRUE 42001
41993: LD_INT 1
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 42202
42001: POP
// case nation of nation_american :
42002: LD_VAR 0 5
42006: PUSH
42007: LD_INT 1
42009: DOUBLE
42010: EQUAL
42011: IFTRUE 42015
42013: GO 42071
42015: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42016: LD_ADDR_VAR 0 9
42020: PUSH
42021: LD_VAR 0 11
42025: PUSH
42026: LD_VAR 0 12
42030: PUSH
42031: LD_VAR 0 13
42035: PUSH
42036: LD_VAR 0 14
42040: PUSH
42041: LD_VAR 0 15
42045: PUSH
42046: LD_VAR 0 16
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: PUSH
42059: LD_VAR 0 4
42063: PUSH
42064: LD_INT 1
42066: PLUS
42067: ARRAY
42068: ST_TO_ADDR
42069: GO 42200
42071: LD_INT 2
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42135
42079: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42080: LD_ADDR_VAR 0 9
42084: PUSH
42085: LD_VAR 0 17
42089: PUSH
42090: LD_VAR 0 18
42094: PUSH
42095: LD_VAR 0 19
42099: PUSH
42100: LD_VAR 0 20
42104: PUSH
42105: LD_VAR 0 21
42109: PUSH
42110: LD_VAR 0 22
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: PUSH
42123: LD_VAR 0 4
42127: PUSH
42128: LD_INT 1
42130: PLUS
42131: ARRAY
42132: ST_TO_ADDR
42133: GO 42200
42135: LD_INT 3
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42143
42141: GO 42199
42143: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42144: LD_ADDR_VAR 0 9
42148: PUSH
42149: LD_VAR 0 23
42153: PUSH
42154: LD_VAR 0 24
42158: PUSH
42159: LD_VAR 0 25
42163: PUSH
42164: LD_VAR 0 26
42168: PUSH
42169: LD_VAR 0 27
42173: PUSH
42174: LD_VAR 0 28
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: PUSH
42187: LD_VAR 0 4
42191: PUSH
42192: LD_INT 1
42194: PLUS
42195: ARRAY
42196: ST_TO_ADDR
42197: GO 42200
42199: POP
42200: GO 42755
42202: LD_INT 2
42204: DOUBLE
42205: EQUAL
42206: IFTRUE 42216
42208: LD_INT 3
42210: DOUBLE
42211: EQUAL
42212: IFTRUE 42216
42214: GO 42272
42216: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42217: LD_ADDR_VAR 0 9
42221: PUSH
42222: LD_VAR 0 29
42226: PUSH
42227: LD_VAR 0 30
42231: PUSH
42232: LD_VAR 0 31
42236: PUSH
42237: LD_VAR 0 32
42241: PUSH
42242: LD_VAR 0 33
42246: PUSH
42247: LD_VAR 0 34
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: PUSH
42260: LD_VAR 0 4
42264: PUSH
42265: LD_INT 1
42267: PLUS
42268: ARRAY
42269: ST_TO_ADDR
42270: GO 42755
42272: LD_INT 16
42274: DOUBLE
42275: EQUAL
42276: IFTRUE 42334
42278: LD_INT 17
42280: DOUBLE
42281: EQUAL
42282: IFTRUE 42334
42284: LD_INT 18
42286: DOUBLE
42287: EQUAL
42288: IFTRUE 42334
42290: LD_INT 19
42292: DOUBLE
42293: EQUAL
42294: IFTRUE 42334
42296: LD_INT 22
42298: DOUBLE
42299: EQUAL
42300: IFTRUE 42334
42302: LD_INT 20
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42334
42308: LD_INT 21
42310: DOUBLE
42311: EQUAL
42312: IFTRUE 42334
42314: LD_INT 23
42316: DOUBLE
42317: EQUAL
42318: IFTRUE 42334
42320: LD_INT 24
42322: DOUBLE
42323: EQUAL
42324: IFTRUE 42334
42326: LD_INT 25
42328: DOUBLE
42329: EQUAL
42330: IFTRUE 42334
42332: GO 42390
42334: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42335: LD_ADDR_VAR 0 9
42339: PUSH
42340: LD_VAR 0 35
42344: PUSH
42345: LD_VAR 0 36
42349: PUSH
42350: LD_VAR 0 37
42354: PUSH
42355: LD_VAR 0 38
42359: PUSH
42360: LD_VAR 0 39
42364: PUSH
42365: LD_VAR 0 40
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: PUSH
42378: LD_VAR 0 4
42382: PUSH
42383: LD_INT 1
42385: PLUS
42386: ARRAY
42387: ST_TO_ADDR
42388: GO 42755
42390: LD_INT 6
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42446
42396: LD_INT 7
42398: DOUBLE
42399: EQUAL
42400: IFTRUE 42446
42402: LD_INT 8
42404: DOUBLE
42405: EQUAL
42406: IFTRUE 42446
42408: LD_INT 13
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42446
42414: LD_INT 12
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42446
42420: LD_INT 15
42422: DOUBLE
42423: EQUAL
42424: IFTRUE 42446
42426: LD_INT 11
42428: DOUBLE
42429: EQUAL
42430: IFTRUE 42446
42432: LD_INT 14
42434: DOUBLE
42435: EQUAL
42436: IFTRUE 42446
42438: LD_INT 10
42440: DOUBLE
42441: EQUAL
42442: IFTRUE 42446
42444: GO 42502
42446: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42447: LD_ADDR_VAR 0 9
42451: PUSH
42452: LD_VAR 0 41
42456: PUSH
42457: LD_VAR 0 42
42461: PUSH
42462: LD_VAR 0 43
42466: PUSH
42467: LD_VAR 0 44
42471: PUSH
42472: LD_VAR 0 45
42476: PUSH
42477: LD_VAR 0 46
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: PUSH
42490: LD_VAR 0 4
42494: PUSH
42495: LD_INT 1
42497: PLUS
42498: ARRAY
42499: ST_TO_ADDR
42500: GO 42755
42502: LD_INT 36
42504: DOUBLE
42505: EQUAL
42506: IFTRUE 42510
42508: GO 42566
42510: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42511: LD_ADDR_VAR 0 9
42515: PUSH
42516: LD_VAR 0 47
42520: PUSH
42521: LD_VAR 0 48
42525: PUSH
42526: LD_VAR 0 49
42530: PUSH
42531: LD_VAR 0 50
42535: PUSH
42536: LD_VAR 0 51
42540: PUSH
42541: LD_VAR 0 52
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: PUSH
42554: LD_VAR 0 4
42558: PUSH
42559: LD_INT 1
42561: PLUS
42562: ARRAY
42563: ST_TO_ADDR
42564: GO 42755
42566: LD_INT 4
42568: DOUBLE
42569: EQUAL
42570: IFTRUE 42592
42572: LD_INT 5
42574: DOUBLE
42575: EQUAL
42576: IFTRUE 42592
42578: LD_INT 34
42580: DOUBLE
42581: EQUAL
42582: IFTRUE 42592
42584: LD_INT 37
42586: DOUBLE
42587: EQUAL
42588: IFTRUE 42592
42590: GO 42648
42592: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42593: LD_ADDR_VAR 0 9
42597: PUSH
42598: LD_VAR 0 53
42602: PUSH
42603: LD_VAR 0 54
42607: PUSH
42608: LD_VAR 0 55
42612: PUSH
42613: LD_VAR 0 56
42617: PUSH
42618: LD_VAR 0 57
42622: PUSH
42623: LD_VAR 0 58
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: PUSH
42636: LD_VAR 0 4
42640: PUSH
42641: LD_INT 1
42643: PLUS
42644: ARRAY
42645: ST_TO_ADDR
42646: GO 42755
42648: LD_INT 31
42650: DOUBLE
42651: EQUAL
42652: IFTRUE 42698
42654: LD_INT 32
42656: DOUBLE
42657: EQUAL
42658: IFTRUE 42698
42660: LD_INT 33
42662: DOUBLE
42663: EQUAL
42664: IFTRUE 42698
42666: LD_INT 27
42668: DOUBLE
42669: EQUAL
42670: IFTRUE 42698
42672: LD_INT 26
42674: DOUBLE
42675: EQUAL
42676: IFTRUE 42698
42678: LD_INT 28
42680: DOUBLE
42681: EQUAL
42682: IFTRUE 42698
42684: LD_INT 29
42686: DOUBLE
42687: EQUAL
42688: IFTRUE 42698
42690: LD_INT 30
42692: DOUBLE
42693: EQUAL
42694: IFTRUE 42698
42696: GO 42754
42698: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42699: LD_ADDR_VAR 0 9
42703: PUSH
42704: LD_VAR 0 59
42708: PUSH
42709: LD_VAR 0 60
42713: PUSH
42714: LD_VAR 0 61
42718: PUSH
42719: LD_VAR 0 62
42723: PUSH
42724: LD_VAR 0 63
42728: PUSH
42729: LD_VAR 0 64
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: PUSH
42742: LD_VAR 0 4
42746: PUSH
42747: LD_INT 1
42749: PLUS
42750: ARRAY
42751: ST_TO_ADDR
42752: GO 42755
42754: POP
// temp_list2 = [ ] ;
42755: LD_ADDR_VAR 0 10
42759: PUSH
42760: EMPTY
42761: ST_TO_ADDR
// for i in temp_list do
42762: LD_ADDR_VAR 0 8
42766: PUSH
42767: LD_VAR 0 9
42771: PUSH
42772: FOR_IN
42773: IFFALSE 42825
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42775: LD_ADDR_VAR 0 10
42779: PUSH
42780: LD_VAR 0 10
42784: PUSH
42785: LD_VAR 0 8
42789: PUSH
42790: LD_INT 1
42792: ARRAY
42793: PUSH
42794: LD_VAR 0 2
42798: PLUS
42799: PUSH
42800: LD_VAR 0 8
42804: PUSH
42805: LD_INT 2
42807: ARRAY
42808: PUSH
42809: LD_VAR 0 3
42813: PLUS
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: EMPTY
42820: LIST
42821: ADD
42822: ST_TO_ADDR
42823: GO 42772
42825: POP
42826: POP
// result = temp_list2 ;
42827: LD_ADDR_VAR 0 7
42831: PUSH
42832: LD_VAR 0 10
42836: ST_TO_ADDR
// end ;
42837: LD_VAR 0 7
42841: RET
// export function EnemyInRange ( unit , dist ) ; begin
42842: LD_INT 0
42844: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42845: LD_ADDR_VAR 0 3
42849: PUSH
42850: LD_VAR 0 1
42854: PPUSH
42855: CALL_OW 255
42859: PPUSH
42860: LD_VAR 0 1
42864: PPUSH
42865: CALL_OW 250
42869: PPUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 251
42879: PPUSH
42880: LD_VAR 0 2
42884: PPUSH
42885: CALL 16215 0 4
42889: PUSH
42890: LD_INT 4
42892: ARRAY
42893: ST_TO_ADDR
// end ;
42894: LD_VAR 0 3
42898: RET
// export function PlayerSeeMe ( unit ) ; begin
42899: LD_INT 0
42901: PPUSH
// result := See ( your_side , unit ) ;
42902: LD_ADDR_VAR 0 2
42906: PUSH
42907: LD_OWVAR 2
42911: PPUSH
42912: LD_VAR 0 1
42916: PPUSH
42917: CALL_OW 292
42921: ST_TO_ADDR
// end ;
42922: LD_VAR 0 2
42926: RET
// export function ReverseDir ( unit ) ; begin
42927: LD_INT 0
42929: PPUSH
// if not unit then
42930: LD_VAR 0 1
42934: NOT
42935: IFFALSE 42939
// exit ;
42937: GO 42962
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42939: LD_ADDR_VAR 0 2
42943: PUSH
42944: LD_VAR 0 1
42948: PPUSH
42949: CALL_OW 254
42953: PUSH
42954: LD_INT 3
42956: PLUS
42957: PUSH
42958: LD_INT 6
42960: MOD
42961: ST_TO_ADDR
// end ;
42962: LD_VAR 0 2
42966: RET
// export function ReverseArray ( array ) ; var i ; begin
42967: LD_INT 0
42969: PPUSH
42970: PPUSH
// if not array then
42971: LD_VAR 0 1
42975: NOT
42976: IFFALSE 42980
// exit ;
42978: GO 43035
// result := [ ] ;
42980: LD_ADDR_VAR 0 2
42984: PUSH
42985: EMPTY
42986: ST_TO_ADDR
// for i := array downto 1 do
42987: LD_ADDR_VAR 0 3
42991: PUSH
42992: DOUBLE
42993: LD_VAR 0 1
42997: INC
42998: ST_TO_ADDR
42999: LD_INT 1
43001: PUSH
43002: FOR_DOWNTO
43003: IFFALSE 43033
// result := Join ( result , array [ i ] ) ;
43005: LD_ADDR_VAR 0 2
43009: PUSH
43010: LD_VAR 0 2
43014: PPUSH
43015: LD_VAR 0 1
43019: PUSH
43020: LD_VAR 0 3
43024: ARRAY
43025: PPUSH
43026: CALL 47700 0 2
43030: ST_TO_ADDR
43031: GO 43002
43033: POP
43034: POP
// end ;
43035: LD_VAR 0 2
43039: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43040: LD_INT 0
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
// if not unit or not hexes then
43048: LD_VAR 0 1
43052: NOT
43053: PUSH
43054: LD_VAR 0 2
43058: NOT
43059: OR
43060: IFFALSE 43064
// exit ;
43062: GO 43187
// dist := 9999 ;
43064: LD_ADDR_VAR 0 5
43068: PUSH
43069: LD_INT 9999
43071: ST_TO_ADDR
// for i = 1 to hexes do
43072: LD_ADDR_VAR 0 4
43076: PUSH
43077: DOUBLE
43078: LD_INT 1
43080: DEC
43081: ST_TO_ADDR
43082: LD_VAR 0 2
43086: PUSH
43087: FOR_TO
43088: IFFALSE 43175
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43090: LD_ADDR_VAR 0 6
43094: PUSH
43095: LD_VAR 0 1
43099: PPUSH
43100: LD_VAR 0 2
43104: PUSH
43105: LD_VAR 0 4
43109: ARRAY
43110: PUSH
43111: LD_INT 1
43113: ARRAY
43114: PPUSH
43115: LD_VAR 0 2
43119: PUSH
43120: LD_VAR 0 4
43124: ARRAY
43125: PUSH
43126: LD_INT 2
43128: ARRAY
43129: PPUSH
43130: CALL_OW 297
43134: ST_TO_ADDR
// if tdist < dist then
43135: LD_VAR 0 6
43139: PUSH
43140: LD_VAR 0 5
43144: LESS
43145: IFFALSE 43173
// begin hex := hexes [ i ] ;
43147: LD_ADDR_VAR 0 8
43151: PUSH
43152: LD_VAR 0 2
43156: PUSH
43157: LD_VAR 0 4
43161: ARRAY
43162: ST_TO_ADDR
// dist := tdist ;
43163: LD_ADDR_VAR 0 5
43167: PUSH
43168: LD_VAR 0 6
43172: ST_TO_ADDR
// end ; end ;
43173: GO 43087
43175: POP
43176: POP
// result := hex ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_VAR 0 8
43186: ST_TO_ADDR
// end ;
43187: LD_VAR 0 3
43191: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43192: LD_INT 0
43194: PPUSH
43195: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43196: LD_VAR 0 1
43200: NOT
43201: PUSH
43202: LD_VAR 0 1
43206: PUSH
43207: LD_INT 21
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 23
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PPUSH
43231: CALL_OW 69
43235: IN
43236: NOT
43237: OR
43238: IFFALSE 43242
// exit ;
43240: GO 43289
// for i = 1 to 3 do
43242: LD_ADDR_VAR 0 3
43246: PUSH
43247: DOUBLE
43248: LD_INT 1
43250: DEC
43251: ST_TO_ADDR
43252: LD_INT 3
43254: PUSH
43255: FOR_TO
43256: IFFALSE 43287
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43258: LD_VAR 0 1
43262: PPUSH
43263: CALL_OW 250
43267: PPUSH
43268: LD_VAR 0 1
43272: PPUSH
43273: CALL_OW 251
43277: PPUSH
43278: LD_INT 1
43280: PPUSH
43281: CALL_OW 453
43285: GO 43255
43287: POP
43288: POP
// end ;
43289: LD_VAR 0 2
43293: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43294: LD_INT 0
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
// if not unit or not enemy_unit then
43302: LD_VAR 0 1
43306: NOT
43307: PUSH
43308: LD_VAR 0 2
43312: NOT
43313: OR
43314: IFFALSE 43318
// exit ;
43316: GO 43785
// if GetLives ( i ) < 250 then
43318: LD_VAR 0 4
43322: PPUSH
43323: CALL_OW 256
43327: PUSH
43328: LD_INT 250
43330: LESS
43331: IFFALSE 43344
// begin ComAutodestruct ( i ) ;
43333: LD_VAR 0 4
43337: PPUSH
43338: CALL 43192 0 1
// exit ;
43342: GO 43785
// end ; x := GetX ( enemy_unit ) ;
43344: LD_ADDR_VAR 0 7
43348: PUSH
43349: LD_VAR 0 2
43353: PPUSH
43354: CALL_OW 250
43358: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43359: LD_ADDR_VAR 0 8
43363: PUSH
43364: LD_VAR 0 2
43368: PPUSH
43369: CALL_OW 251
43373: ST_TO_ADDR
// if not x or not y then
43374: LD_VAR 0 7
43378: NOT
43379: PUSH
43380: LD_VAR 0 8
43384: NOT
43385: OR
43386: IFFALSE 43390
// exit ;
43388: GO 43785
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43390: LD_ADDR_VAR 0 6
43394: PUSH
43395: LD_VAR 0 7
43399: PPUSH
43400: LD_INT 0
43402: PPUSH
43403: LD_INT 4
43405: PPUSH
43406: CALL_OW 272
43410: PUSH
43411: LD_VAR 0 8
43415: PPUSH
43416: LD_INT 0
43418: PPUSH
43419: LD_INT 4
43421: PPUSH
43422: CALL_OW 273
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_VAR 0 7
43435: PPUSH
43436: LD_INT 1
43438: PPUSH
43439: LD_INT 4
43441: PPUSH
43442: CALL_OW 272
43446: PUSH
43447: LD_VAR 0 8
43451: PPUSH
43452: LD_INT 1
43454: PPUSH
43455: LD_INT 4
43457: PPUSH
43458: CALL_OW 273
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_VAR 0 7
43471: PPUSH
43472: LD_INT 2
43474: PPUSH
43475: LD_INT 4
43477: PPUSH
43478: CALL_OW 272
43482: PUSH
43483: LD_VAR 0 8
43487: PPUSH
43488: LD_INT 2
43490: PPUSH
43491: LD_INT 4
43493: PPUSH
43494: CALL_OW 273
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_VAR 0 7
43507: PPUSH
43508: LD_INT 3
43510: PPUSH
43511: LD_INT 4
43513: PPUSH
43514: CALL_OW 272
43518: PUSH
43519: LD_VAR 0 8
43523: PPUSH
43524: LD_INT 3
43526: PPUSH
43527: LD_INT 4
43529: PPUSH
43530: CALL_OW 273
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_VAR 0 7
43543: PPUSH
43544: LD_INT 4
43546: PPUSH
43547: LD_INT 4
43549: PPUSH
43550: CALL_OW 272
43554: PUSH
43555: LD_VAR 0 8
43559: PPUSH
43560: LD_INT 4
43562: PPUSH
43563: LD_INT 4
43565: PPUSH
43566: CALL_OW 273
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_VAR 0 7
43579: PPUSH
43580: LD_INT 5
43582: PPUSH
43583: LD_INT 4
43585: PPUSH
43586: CALL_OW 272
43590: PUSH
43591: LD_VAR 0 8
43595: PPUSH
43596: LD_INT 5
43598: PPUSH
43599: LD_INT 4
43601: PPUSH
43602: CALL_OW 273
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// for i = tmp downto 1 do
43619: LD_ADDR_VAR 0 4
43623: PUSH
43624: DOUBLE
43625: LD_VAR 0 6
43629: INC
43630: ST_TO_ADDR
43631: LD_INT 1
43633: PUSH
43634: FOR_DOWNTO
43635: IFFALSE 43736
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43637: LD_VAR 0 6
43641: PUSH
43642: LD_VAR 0 4
43646: ARRAY
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PPUSH
43652: LD_VAR 0 6
43656: PUSH
43657: LD_VAR 0 4
43661: ARRAY
43662: PUSH
43663: LD_INT 2
43665: ARRAY
43666: PPUSH
43667: CALL_OW 488
43671: NOT
43672: PUSH
43673: LD_VAR 0 6
43677: PUSH
43678: LD_VAR 0 4
43682: ARRAY
43683: PUSH
43684: LD_INT 1
43686: ARRAY
43687: PPUSH
43688: LD_VAR 0 6
43692: PUSH
43693: LD_VAR 0 4
43697: ARRAY
43698: PUSH
43699: LD_INT 2
43701: ARRAY
43702: PPUSH
43703: CALL_OW 428
43707: PUSH
43708: LD_INT 0
43710: NONEQUAL
43711: OR
43712: IFFALSE 43734
// tmp := Delete ( tmp , i ) ;
43714: LD_ADDR_VAR 0 6
43718: PUSH
43719: LD_VAR 0 6
43723: PPUSH
43724: LD_VAR 0 4
43728: PPUSH
43729: CALL_OW 3
43733: ST_TO_ADDR
43734: GO 43634
43736: POP
43737: POP
// j := GetClosestHex ( unit , tmp ) ;
43738: LD_ADDR_VAR 0 5
43742: PUSH
43743: LD_VAR 0 1
43747: PPUSH
43748: LD_VAR 0 6
43752: PPUSH
43753: CALL 43040 0 2
43757: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43758: LD_VAR 0 1
43762: PPUSH
43763: LD_VAR 0 5
43767: PUSH
43768: LD_INT 1
43770: ARRAY
43771: PPUSH
43772: LD_VAR 0 5
43776: PUSH
43777: LD_INT 2
43779: ARRAY
43780: PPUSH
43781: CALL_OW 111
// end ;
43785: LD_VAR 0 3
43789: RET
// export function PrepareApemanSoldier ( ) ; begin
43790: LD_INT 0
43792: PPUSH
// uc_nation := 0 ;
43793: LD_ADDR_OWVAR 21
43797: PUSH
43798: LD_INT 0
43800: ST_TO_ADDR
// hc_sex := sex_male ;
43801: LD_ADDR_OWVAR 27
43805: PUSH
43806: LD_INT 1
43808: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43809: LD_ADDR_OWVAR 28
43813: PUSH
43814: LD_INT 15
43816: ST_TO_ADDR
// hc_gallery :=  ;
43817: LD_ADDR_OWVAR 33
43821: PUSH
43822: LD_STRING 
43824: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43825: LD_ADDR_OWVAR 31
43829: PUSH
43830: LD_INT 0
43832: PPUSH
43833: LD_INT 3
43835: PPUSH
43836: CALL_OW 12
43840: PUSH
43841: LD_INT 0
43843: PPUSH
43844: LD_INT 3
43846: PPUSH
43847: CALL_OW 12
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: ST_TO_ADDR
// end ;
43864: LD_VAR 0 1
43868: RET
// export function PrepareApemanEngineer ( ) ; begin
43869: LD_INT 0
43871: PPUSH
// uc_nation := 0 ;
43872: LD_ADDR_OWVAR 21
43876: PUSH
43877: LD_INT 0
43879: ST_TO_ADDR
// hc_sex := sex_male ;
43880: LD_ADDR_OWVAR 27
43884: PUSH
43885: LD_INT 1
43887: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43888: LD_ADDR_OWVAR 28
43892: PUSH
43893: LD_INT 16
43895: ST_TO_ADDR
// hc_gallery :=  ;
43896: LD_ADDR_OWVAR 33
43900: PUSH
43901: LD_STRING 
43903: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43904: LD_ADDR_OWVAR 31
43908: PUSH
43909: LD_INT 0
43911: PPUSH
43912: LD_INT 3
43914: PPUSH
43915: CALL_OW 12
43919: PUSH
43920: LD_INT 0
43922: PPUSH
43923: LD_INT 3
43925: PPUSH
43926: CALL_OW 12
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// end ;
43943: LD_VAR 0 1
43947: RET
// export function PrepareApeman ( agressivity ) ; begin
43948: LD_INT 0
43950: PPUSH
// uc_side := 0 ;
43951: LD_ADDR_OWVAR 20
43955: PUSH
43956: LD_INT 0
43958: ST_TO_ADDR
// uc_nation := 0 ;
43959: LD_ADDR_OWVAR 21
43963: PUSH
43964: LD_INT 0
43966: ST_TO_ADDR
// hc_sex := sex_male ;
43967: LD_ADDR_OWVAR 27
43971: PUSH
43972: LD_INT 1
43974: ST_TO_ADDR
// hc_class := class_apeman ;
43975: LD_ADDR_OWVAR 28
43979: PUSH
43980: LD_INT 12
43982: ST_TO_ADDR
// hc_gallery :=  ;
43983: LD_ADDR_OWVAR 33
43987: PUSH
43988: LD_STRING 
43990: ST_TO_ADDR
// if agressivity = 0 then
43991: LD_VAR 0 1
43995: PUSH
43996: LD_INT 0
43998: EQUAL
43999: IFFALSE 44011
// hc_agressivity := 0 else
44001: LD_ADDR_OWVAR 35
44005: PUSH
44006: LD_INT 0
44008: ST_TO_ADDR
44009: GO 44032
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44011: LD_ADDR_OWVAR 35
44015: PUSH
44016: LD_VAR 0 1
44020: NEG
44021: PPUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: CALL_OW 12
44031: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44032: LD_ADDR_OWVAR 31
44036: PUSH
44037: LD_INT 0
44039: PPUSH
44040: LD_INT 3
44042: PPUSH
44043: CALL_OW 12
44047: PUSH
44048: LD_INT 0
44050: PPUSH
44051: LD_INT 3
44053: PPUSH
44054: CALL_OW 12
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: ST_TO_ADDR
// end ;
44071: LD_VAR 0 2
44075: RET
// export function PrepareTiger ( agressivity ) ; begin
44076: LD_INT 0
44078: PPUSH
// uc_side := 0 ;
44079: LD_ADDR_OWVAR 20
44083: PUSH
44084: LD_INT 0
44086: ST_TO_ADDR
// uc_nation := 0 ;
44087: LD_ADDR_OWVAR 21
44091: PUSH
44092: LD_INT 0
44094: ST_TO_ADDR
// hc_class := class_tiger ;
44095: LD_ADDR_OWVAR 28
44099: PUSH
44100: LD_INT 14
44102: ST_TO_ADDR
// hc_gallery :=  ;
44103: LD_ADDR_OWVAR 33
44107: PUSH
44108: LD_STRING 
44110: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44111: LD_ADDR_OWVAR 35
44115: PUSH
44116: LD_VAR 0 1
44120: NEG
44121: PPUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: CALL_OW 12
44131: ST_TO_ADDR
// end ;
44132: LD_VAR 0 2
44136: RET
// export function PrepareEnchidna ( ) ; begin
44137: LD_INT 0
44139: PPUSH
// uc_side := 0 ;
44140: LD_ADDR_OWVAR 20
44144: PUSH
44145: LD_INT 0
44147: ST_TO_ADDR
// uc_nation := 0 ;
44148: LD_ADDR_OWVAR 21
44152: PUSH
44153: LD_INT 0
44155: ST_TO_ADDR
// hc_class := class_baggie ;
44156: LD_ADDR_OWVAR 28
44160: PUSH
44161: LD_INT 13
44163: ST_TO_ADDR
// hc_gallery :=  ;
44164: LD_ADDR_OWVAR 33
44168: PUSH
44169: LD_STRING 
44171: ST_TO_ADDR
// end ;
44172: LD_VAR 0 1
44176: RET
// export function PrepareFrog ( ) ; begin
44177: LD_INT 0
44179: PPUSH
// uc_side := 0 ;
44180: LD_ADDR_OWVAR 20
44184: PUSH
44185: LD_INT 0
44187: ST_TO_ADDR
// uc_nation := 0 ;
44188: LD_ADDR_OWVAR 21
44192: PUSH
44193: LD_INT 0
44195: ST_TO_ADDR
// hc_class := class_frog ;
44196: LD_ADDR_OWVAR 28
44200: PUSH
44201: LD_INT 19
44203: ST_TO_ADDR
// hc_gallery :=  ;
44204: LD_ADDR_OWVAR 33
44208: PUSH
44209: LD_STRING 
44211: ST_TO_ADDR
// end ;
44212: LD_VAR 0 1
44216: RET
// export function PrepareFish ( ) ; begin
44217: LD_INT 0
44219: PPUSH
// uc_side := 0 ;
44220: LD_ADDR_OWVAR 20
44224: PUSH
44225: LD_INT 0
44227: ST_TO_ADDR
// uc_nation := 0 ;
44228: LD_ADDR_OWVAR 21
44232: PUSH
44233: LD_INT 0
44235: ST_TO_ADDR
// hc_class := class_fish ;
44236: LD_ADDR_OWVAR 28
44240: PUSH
44241: LD_INT 20
44243: ST_TO_ADDR
// hc_gallery :=  ;
44244: LD_ADDR_OWVAR 33
44248: PUSH
44249: LD_STRING 
44251: ST_TO_ADDR
// end ;
44252: LD_VAR 0 1
44256: RET
// export function PrepareBird ( ) ; begin
44257: LD_INT 0
44259: PPUSH
// uc_side := 0 ;
44260: LD_ADDR_OWVAR 20
44264: PUSH
44265: LD_INT 0
44267: ST_TO_ADDR
// uc_nation := 0 ;
44268: LD_ADDR_OWVAR 21
44272: PUSH
44273: LD_INT 0
44275: ST_TO_ADDR
// hc_class := class_phororhacos ;
44276: LD_ADDR_OWVAR 28
44280: PUSH
44281: LD_INT 18
44283: ST_TO_ADDR
// hc_gallery :=  ;
44284: LD_ADDR_OWVAR 33
44288: PUSH
44289: LD_STRING 
44291: ST_TO_ADDR
// end ;
44292: LD_VAR 0 1
44296: RET
// export function PrepareHorse ( ) ; begin
44297: LD_INT 0
44299: PPUSH
// uc_side := 0 ;
44300: LD_ADDR_OWVAR 20
44304: PUSH
44305: LD_INT 0
44307: ST_TO_ADDR
// uc_nation := 0 ;
44308: LD_ADDR_OWVAR 21
44312: PUSH
44313: LD_INT 0
44315: ST_TO_ADDR
// hc_class := class_horse ;
44316: LD_ADDR_OWVAR 28
44320: PUSH
44321: LD_INT 21
44323: ST_TO_ADDR
// hc_gallery :=  ;
44324: LD_ADDR_OWVAR 33
44328: PUSH
44329: LD_STRING 
44331: ST_TO_ADDR
// end ;
44332: LD_VAR 0 1
44336: RET
// export function PrepareMastodont ( ) ; begin
44337: LD_INT 0
44339: PPUSH
// uc_side := 0 ;
44340: LD_ADDR_OWVAR 20
44344: PUSH
44345: LD_INT 0
44347: ST_TO_ADDR
// uc_nation := 0 ;
44348: LD_ADDR_OWVAR 21
44352: PUSH
44353: LD_INT 0
44355: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44356: LD_ADDR_OWVAR 37
44360: PUSH
44361: LD_INT 31
44363: ST_TO_ADDR
// vc_control := control_rider ;
44364: LD_ADDR_OWVAR 38
44368: PUSH
44369: LD_INT 4
44371: ST_TO_ADDR
// end ;
44372: LD_VAR 0 1
44376: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44377: LD_INT 0
44379: PPUSH
44380: PPUSH
44381: PPUSH
// uc_side = 0 ;
44382: LD_ADDR_OWVAR 20
44386: PUSH
44387: LD_INT 0
44389: ST_TO_ADDR
// uc_nation = 0 ;
44390: LD_ADDR_OWVAR 21
44394: PUSH
44395: LD_INT 0
44397: ST_TO_ADDR
// InitHc_All ( ) ;
44398: CALL_OW 584
// InitVc ;
44402: CALL_OW 20
// if mastodonts then
44406: LD_VAR 0 6
44410: IFFALSE 44477
// for i = 1 to mastodonts do
44412: LD_ADDR_VAR 0 11
44416: PUSH
44417: DOUBLE
44418: LD_INT 1
44420: DEC
44421: ST_TO_ADDR
44422: LD_VAR 0 6
44426: PUSH
44427: FOR_TO
44428: IFFALSE 44475
// begin vc_chassis := 31 ;
44430: LD_ADDR_OWVAR 37
44434: PUSH
44435: LD_INT 31
44437: ST_TO_ADDR
// vc_control := control_rider ;
44438: LD_ADDR_OWVAR 38
44442: PUSH
44443: LD_INT 4
44445: ST_TO_ADDR
// animal := CreateVehicle ;
44446: LD_ADDR_VAR 0 12
44450: PUSH
44451: CALL_OW 45
44455: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44456: LD_VAR 0 12
44460: PPUSH
44461: LD_VAR 0 8
44465: PPUSH
44466: LD_INT 0
44468: PPUSH
44469: CALL 46605 0 3
// end ;
44473: GO 44427
44475: POP
44476: POP
// if horses then
44477: LD_VAR 0 5
44481: IFFALSE 44548
// for i = 1 to horses do
44483: LD_ADDR_VAR 0 11
44487: PUSH
44488: DOUBLE
44489: LD_INT 1
44491: DEC
44492: ST_TO_ADDR
44493: LD_VAR 0 5
44497: PUSH
44498: FOR_TO
44499: IFFALSE 44546
// begin hc_class := 21 ;
44501: LD_ADDR_OWVAR 28
44505: PUSH
44506: LD_INT 21
44508: ST_TO_ADDR
// hc_gallery :=  ;
44509: LD_ADDR_OWVAR 33
44513: PUSH
44514: LD_STRING 
44516: ST_TO_ADDR
// animal := CreateHuman ;
44517: LD_ADDR_VAR 0 12
44521: PUSH
44522: CALL_OW 44
44526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44527: LD_VAR 0 12
44531: PPUSH
44532: LD_VAR 0 8
44536: PPUSH
44537: LD_INT 0
44539: PPUSH
44540: CALL 46605 0 3
// end ;
44544: GO 44498
44546: POP
44547: POP
// if birds then
44548: LD_VAR 0 1
44552: IFFALSE 44619
// for i = 1 to birds do
44554: LD_ADDR_VAR 0 11
44558: PUSH
44559: DOUBLE
44560: LD_INT 1
44562: DEC
44563: ST_TO_ADDR
44564: LD_VAR 0 1
44568: PUSH
44569: FOR_TO
44570: IFFALSE 44617
// begin hc_class := 18 ;
44572: LD_ADDR_OWVAR 28
44576: PUSH
44577: LD_INT 18
44579: ST_TO_ADDR
// hc_gallery =  ;
44580: LD_ADDR_OWVAR 33
44584: PUSH
44585: LD_STRING 
44587: ST_TO_ADDR
// animal := CreateHuman ;
44588: LD_ADDR_VAR 0 12
44592: PUSH
44593: CALL_OW 44
44597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44598: LD_VAR 0 12
44602: PPUSH
44603: LD_VAR 0 8
44607: PPUSH
44608: LD_INT 0
44610: PPUSH
44611: CALL 46605 0 3
// end ;
44615: GO 44569
44617: POP
44618: POP
// if tigers then
44619: LD_VAR 0 2
44623: IFFALSE 44707
// for i = 1 to tigers do
44625: LD_ADDR_VAR 0 11
44629: PUSH
44630: DOUBLE
44631: LD_INT 1
44633: DEC
44634: ST_TO_ADDR
44635: LD_VAR 0 2
44639: PUSH
44640: FOR_TO
44641: IFFALSE 44705
// begin hc_class = class_tiger ;
44643: LD_ADDR_OWVAR 28
44647: PUSH
44648: LD_INT 14
44650: ST_TO_ADDR
// hc_gallery =  ;
44651: LD_ADDR_OWVAR 33
44655: PUSH
44656: LD_STRING 
44658: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44659: LD_ADDR_OWVAR 35
44663: PUSH
44664: LD_INT 7
44666: NEG
44667: PPUSH
44668: LD_INT 7
44670: PPUSH
44671: CALL_OW 12
44675: ST_TO_ADDR
// animal := CreateHuman ;
44676: LD_ADDR_VAR 0 12
44680: PUSH
44681: CALL_OW 44
44685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44686: LD_VAR 0 12
44690: PPUSH
44691: LD_VAR 0 8
44695: PPUSH
44696: LD_INT 0
44698: PPUSH
44699: CALL 46605 0 3
// end ;
44703: GO 44640
44705: POP
44706: POP
// if apemans then
44707: LD_VAR 0 3
44711: IFFALSE 44834
// for i = 1 to apemans do
44713: LD_ADDR_VAR 0 11
44717: PUSH
44718: DOUBLE
44719: LD_INT 1
44721: DEC
44722: ST_TO_ADDR
44723: LD_VAR 0 3
44727: PUSH
44728: FOR_TO
44729: IFFALSE 44832
// begin hc_class = class_apeman ;
44731: LD_ADDR_OWVAR 28
44735: PUSH
44736: LD_INT 12
44738: ST_TO_ADDR
// hc_gallery =  ;
44739: LD_ADDR_OWVAR 33
44743: PUSH
44744: LD_STRING 
44746: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44747: LD_ADDR_OWVAR 35
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PPUSH
44756: LD_INT 2
44758: PPUSH
44759: CALL_OW 12
44763: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44764: LD_ADDR_OWVAR 31
44768: PUSH
44769: LD_INT 1
44771: PPUSH
44772: LD_INT 3
44774: PPUSH
44775: CALL_OW 12
44779: PUSH
44780: LD_INT 1
44782: PPUSH
44783: LD_INT 3
44785: PPUSH
44786: CALL_OW 12
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// animal := CreateHuman ;
44803: LD_ADDR_VAR 0 12
44807: PUSH
44808: CALL_OW 44
44812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44813: LD_VAR 0 12
44817: PPUSH
44818: LD_VAR 0 8
44822: PPUSH
44823: LD_INT 0
44825: PPUSH
44826: CALL 46605 0 3
// end ;
44830: GO 44728
44832: POP
44833: POP
// if enchidnas then
44834: LD_VAR 0 4
44838: IFFALSE 44905
// for i = 1 to enchidnas do
44840: LD_ADDR_VAR 0 11
44844: PUSH
44845: DOUBLE
44846: LD_INT 1
44848: DEC
44849: ST_TO_ADDR
44850: LD_VAR 0 4
44854: PUSH
44855: FOR_TO
44856: IFFALSE 44903
// begin hc_class = 13 ;
44858: LD_ADDR_OWVAR 28
44862: PUSH
44863: LD_INT 13
44865: ST_TO_ADDR
// hc_gallery =  ;
44866: LD_ADDR_OWVAR 33
44870: PUSH
44871: LD_STRING 
44873: ST_TO_ADDR
// animal := CreateHuman ;
44874: LD_ADDR_VAR 0 12
44878: PUSH
44879: CALL_OW 44
44883: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44884: LD_VAR 0 12
44888: PPUSH
44889: LD_VAR 0 8
44893: PPUSH
44894: LD_INT 0
44896: PPUSH
44897: CALL 46605 0 3
// end ;
44901: GO 44855
44903: POP
44904: POP
// if fishes then
44905: LD_VAR 0 7
44909: IFFALSE 44976
// for i = 1 to fishes do
44911: LD_ADDR_VAR 0 11
44915: PUSH
44916: DOUBLE
44917: LD_INT 1
44919: DEC
44920: ST_TO_ADDR
44921: LD_VAR 0 7
44925: PUSH
44926: FOR_TO
44927: IFFALSE 44974
// begin hc_class = 20 ;
44929: LD_ADDR_OWVAR 28
44933: PUSH
44934: LD_INT 20
44936: ST_TO_ADDR
// hc_gallery =  ;
44937: LD_ADDR_OWVAR 33
44941: PUSH
44942: LD_STRING 
44944: ST_TO_ADDR
// animal := CreateHuman ;
44945: LD_ADDR_VAR 0 12
44949: PUSH
44950: CALL_OW 44
44954: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44955: LD_VAR 0 12
44959: PPUSH
44960: LD_VAR 0 9
44964: PPUSH
44965: LD_INT 0
44967: PPUSH
44968: CALL 46605 0 3
// end ;
44972: GO 44926
44974: POP
44975: POP
// end ;
44976: LD_VAR 0 10
44980: RET
// export function WantHeal ( sci , unit ) ; begin
44981: LD_INT 0
44983: PPUSH
// if GetTaskList ( sci ) > 0 then
44984: LD_VAR 0 1
44988: PPUSH
44989: CALL_OW 437
44993: PUSH
44994: LD_INT 0
44996: GREATER
44997: IFFALSE 45067
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44999: LD_VAR 0 1
45003: PPUSH
45004: CALL_OW 437
45008: PUSH
45009: LD_INT 1
45011: ARRAY
45012: PUSH
45013: LD_INT 1
45015: ARRAY
45016: PUSH
45017: LD_STRING l
45019: EQUAL
45020: PUSH
45021: LD_VAR 0 1
45025: PPUSH
45026: CALL_OW 437
45030: PUSH
45031: LD_INT 1
45033: ARRAY
45034: PUSH
45035: LD_INT 4
45037: ARRAY
45038: PUSH
45039: LD_VAR 0 2
45043: EQUAL
45044: AND
45045: IFFALSE 45057
// result := true else
45047: LD_ADDR_VAR 0 3
45051: PUSH
45052: LD_INT 1
45054: ST_TO_ADDR
45055: GO 45065
// result := false ;
45057: LD_ADDR_VAR 0 3
45061: PUSH
45062: LD_INT 0
45064: ST_TO_ADDR
// end else
45065: GO 45075
// result := false ;
45067: LD_ADDR_VAR 0 3
45071: PUSH
45072: LD_INT 0
45074: ST_TO_ADDR
// end ;
45075: LD_VAR 0 3
45079: RET
// export function HealTarget ( sci ) ; begin
45080: LD_INT 0
45082: PPUSH
// if not sci then
45083: LD_VAR 0 1
45087: NOT
45088: IFFALSE 45092
// exit ;
45090: GO 45157
// result := 0 ;
45092: LD_ADDR_VAR 0 2
45096: PUSH
45097: LD_INT 0
45099: ST_TO_ADDR
// if GetTaskList ( sci ) then
45100: LD_VAR 0 1
45104: PPUSH
45105: CALL_OW 437
45109: IFFALSE 45157
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45111: LD_VAR 0 1
45115: PPUSH
45116: CALL_OW 437
45120: PUSH
45121: LD_INT 1
45123: ARRAY
45124: PUSH
45125: LD_INT 1
45127: ARRAY
45128: PUSH
45129: LD_STRING l
45131: EQUAL
45132: IFFALSE 45157
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45134: LD_ADDR_VAR 0 2
45138: PUSH
45139: LD_VAR 0 1
45143: PPUSH
45144: CALL_OW 437
45148: PUSH
45149: LD_INT 1
45151: ARRAY
45152: PUSH
45153: LD_INT 4
45155: ARRAY
45156: ST_TO_ADDR
// end ;
45157: LD_VAR 0 2
45161: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45162: LD_INT 0
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
// if not base_units then
45168: LD_VAR 0 1
45172: NOT
45173: IFFALSE 45177
// exit ;
45175: GO 45264
// result := false ;
45177: LD_ADDR_VAR 0 2
45181: PUSH
45182: LD_INT 0
45184: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45185: LD_ADDR_VAR 0 5
45189: PUSH
45190: LD_VAR 0 1
45194: PPUSH
45195: LD_INT 21
45197: PUSH
45198: LD_INT 3
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PPUSH
45205: CALL_OW 72
45209: ST_TO_ADDR
// if not tmp then
45210: LD_VAR 0 5
45214: NOT
45215: IFFALSE 45219
// exit ;
45217: GO 45264
// for i in tmp do
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_VAR 0 5
45228: PUSH
45229: FOR_IN
45230: IFFALSE 45262
// begin result := EnemyInRange ( i , 22 ) ;
45232: LD_ADDR_VAR 0 2
45236: PUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: LD_INT 22
45244: PPUSH
45245: CALL 42842 0 2
45249: ST_TO_ADDR
// if result then
45250: LD_VAR 0 2
45254: IFFALSE 45260
// exit ;
45256: POP
45257: POP
45258: GO 45264
// end ;
45260: GO 45229
45262: POP
45263: POP
// end ;
45264: LD_VAR 0 2
45268: RET
// export function FilterByTag ( units , tag ) ; begin
45269: LD_INT 0
45271: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45272: LD_ADDR_VAR 0 3
45276: PUSH
45277: LD_VAR 0 1
45281: PPUSH
45282: LD_INT 120
45284: PUSH
45285: LD_VAR 0 2
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PPUSH
45294: CALL_OW 72
45298: ST_TO_ADDR
// end ;
45299: LD_VAR 0 3
45303: RET
// export function IsDriver ( un ) ; begin
45304: LD_INT 0
45306: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45307: LD_ADDR_VAR 0 2
45311: PUSH
45312: LD_VAR 0 1
45316: PUSH
45317: LD_INT 55
45319: PUSH
45320: EMPTY
45321: LIST
45322: PPUSH
45323: CALL_OW 69
45327: IN
45328: ST_TO_ADDR
// end ;
45329: LD_VAR 0 2
45333: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45334: LD_INT 0
45336: PPUSH
45337: PPUSH
// list := [ ] ;
45338: LD_ADDR_VAR 0 5
45342: PUSH
45343: EMPTY
45344: ST_TO_ADDR
// case d of 0 :
45345: LD_VAR 0 3
45349: PUSH
45350: LD_INT 0
45352: DOUBLE
45353: EQUAL
45354: IFTRUE 45358
45356: GO 45491
45358: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45359: LD_ADDR_VAR 0 5
45363: PUSH
45364: LD_VAR 0 1
45368: PUSH
45369: LD_INT 4
45371: MINUS
45372: PUSH
45373: LD_VAR 0 2
45377: PUSH
45378: LD_INT 4
45380: MINUS
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: PUSH
45390: LD_VAR 0 1
45394: PUSH
45395: LD_INT 3
45397: MINUS
45398: PUSH
45399: LD_VAR 0 2
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: PUSH
45412: LD_VAR 0 1
45416: PUSH
45417: LD_INT 4
45419: PLUS
45420: PUSH
45421: LD_VAR 0 2
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: PUSH
45434: LD_VAR 0 1
45438: PUSH
45439: LD_INT 3
45441: PLUS
45442: PUSH
45443: LD_VAR 0 2
45447: PUSH
45448: LD_INT 3
45450: PLUS
45451: PUSH
45452: LD_INT 5
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: PUSH
45460: LD_VAR 0 1
45464: PUSH
45465: LD_VAR 0 2
45469: PUSH
45470: LD_INT 4
45472: PLUS
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: ST_TO_ADDR
// end ; 1 :
45489: GO 46189
45491: LD_INT 1
45493: DOUBLE
45494: EQUAL
45495: IFTRUE 45499
45497: GO 45632
45499: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45500: LD_ADDR_VAR 0 5
45504: PUSH
45505: LD_VAR 0 1
45509: PUSH
45510: LD_VAR 0 2
45514: PUSH
45515: LD_INT 4
45517: MINUS
45518: PUSH
45519: LD_INT 3
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: LIST
45526: PUSH
45527: LD_VAR 0 1
45531: PUSH
45532: LD_INT 3
45534: MINUS
45535: PUSH
45536: LD_VAR 0 2
45540: PUSH
45541: LD_INT 3
45543: MINUS
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: PUSH
45553: LD_VAR 0 1
45557: PUSH
45558: LD_INT 4
45560: MINUS
45561: PUSH
45562: LD_VAR 0 2
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: LIST
45574: PUSH
45575: LD_VAR 0 1
45579: PUSH
45580: LD_VAR 0 2
45584: PUSH
45585: LD_INT 3
45587: PLUS
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: PUSH
45597: LD_VAR 0 1
45601: PUSH
45602: LD_INT 4
45604: PLUS
45605: PUSH
45606: LD_VAR 0 2
45610: PUSH
45611: LD_INT 4
45613: PLUS
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// end ; 2 :
45630: GO 46189
45632: LD_INT 2
45634: DOUBLE
45635: EQUAL
45636: IFTRUE 45640
45638: GO 45769
45640: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45641: LD_ADDR_VAR 0 5
45645: PUSH
45646: LD_VAR 0 1
45650: PUSH
45651: LD_VAR 0 2
45655: PUSH
45656: LD_INT 3
45658: MINUS
45659: PUSH
45660: LD_INT 3
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: PUSH
45668: LD_VAR 0 1
45672: PUSH
45673: LD_INT 4
45675: PLUS
45676: PUSH
45677: LD_VAR 0 2
45681: PUSH
45682: LD_INT 4
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: PUSH
45690: LD_VAR 0 1
45694: PUSH
45695: LD_VAR 0 2
45699: PUSH
45700: LD_INT 4
45702: PLUS
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: PUSH
45712: LD_VAR 0 1
45716: PUSH
45717: LD_INT 3
45719: MINUS
45720: PUSH
45721: LD_VAR 0 2
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: PUSH
45734: LD_VAR 0 1
45738: PUSH
45739: LD_INT 4
45741: MINUS
45742: PUSH
45743: LD_VAR 0 2
45747: PUSH
45748: LD_INT 4
45750: MINUS
45751: PUSH
45752: LD_INT 2
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: ST_TO_ADDR
// end ; 3 :
45767: GO 46189
45769: LD_INT 3
45771: DOUBLE
45772: EQUAL
45773: IFTRUE 45777
45775: GO 45910
45777: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45778: LD_ADDR_VAR 0 5
45782: PUSH
45783: LD_VAR 0 1
45787: PUSH
45788: LD_INT 3
45790: PLUS
45791: PUSH
45792: LD_VAR 0 2
45796: PUSH
45797: LD_INT 4
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: PUSH
45805: LD_VAR 0 1
45809: PUSH
45810: LD_INT 4
45812: PLUS
45813: PUSH
45814: LD_VAR 0 2
45818: PUSH
45819: LD_INT 4
45821: PLUS
45822: PUSH
45823: LD_INT 5
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: PUSH
45831: LD_VAR 0 1
45835: PUSH
45836: LD_INT 4
45838: MINUS
45839: PUSH
45840: LD_VAR 0 2
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: PUSH
45853: LD_VAR 0 1
45857: PUSH
45858: LD_VAR 0 2
45862: PUSH
45863: LD_INT 4
45865: MINUS
45866: PUSH
45867: LD_INT 3
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: PUSH
45875: LD_VAR 0 1
45879: PUSH
45880: LD_INT 3
45882: MINUS
45883: PUSH
45884: LD_VAR 0 2
45888: PUSH
45889: LD_INT 3
45891: MINUS
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: ST_TO_ADDR
// end ; 4 :
45908: GO 46189
45910: LD_INT 4
45912: DOUBLE
45913: EQUAL
45914: IFTRUE 45918
45916: GO 46051
45918: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45919: LD_ADDR_VAR 0 5
45923: PUSH
45924: LD_VAR 0 1
45928: PUSH
45929: LD_VAR 0 2
45933: PUSH
45934: LD_INT 4
45936: PLUS
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: PUSH
45946: LD_VAR 0 1
45950: PUSH
45951: LD_INT 3
45953: PLUS
45954: PUSH
45955: LD_VAR 0 2
45959: PUSH
45960: LD_INT 3
45962: PLUS
45963: PUSH
45964: LD_INT 5
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: PUSH
45972: LD_VAR 0 1
45976: PUSH
45977: LD_INT 4
45979: PLUS
45980: PUSH
45981: LD_VAR 0 2
45985: PUSH
45986: LD_INT 4
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: PUSH
45994: LD_VAR 0 1
45998: PUSH
45999: LD_VAR 0 2
46003: PUSH
46004: LD_INT 3
46006: MINUS
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: PUSH
46016: LD_VAR 0 1
46020: PUSH
46021: LD_INT 4
46023: MINUS
46024: PUSH
46025: LD_VAR 0 2
46029: PUSH
46030: LD_INT 4
46032: MINUS
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: ST_TO_ADDR
// end ; 5 :
46049: GO 46189
46051: LD_INT 5
46053: DOUBLE
46054: EQUAL
46055: IFTRUE 46059
46057: GO 46188
46059: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46060: LD_ADDR_VAR 0 5
46064: PUSH
46065: LD_VAR 0 1
46069: PUSH
46070: LD_INT 4
46072: MINUS
46073: PUSH
46074: LD_VAR 0 2
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: LIST
46086: PUSH
46087: LD_VAR 0 1
46091: PUSH
46092: LD_VAR 0 2
46096: PUSH
46097: LD_INT 4
46099: MINUS
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: LIST
46108: PUSH
46109: LD_VAR 0 1
46113: PUSH
46114: LD_INT 4
46116: PLUS
46117: PUSH
46118: LD_VAR 0 2
46122: PUSH
46123: LD_INT 4
46125: PLUS
46126: PUSH
46127: LD_INT 5
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: PUSH
46135: LD_VAR 0 1
46139: PUSH
46140: LD_INT 3
46142: PLUS
46143: PUSH
46144: LD_VAR 0 2
46148: PUSH
46149: LD_INT 4
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: PUSH
46157: LD_VAR 0 1
46161: PUSH
46162: LD_VAR 0 2
46166: PUSH
46167: LD_INT 3
46169: PLUS
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: ST_TO_ADDR
// end ; end ;
46186: GO 46189
46188: POP
// result := list ;
46189: LD_ADDR_VAR 0 4
46193: PUSH
46194: LD_VAR 0 5
46198: ST_TO_ADDR
// end ;
46199: LD_VAR 0 4
46203: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46204: LD_INT 0
46206: PPUSH
46207: PPUSH
46208: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46209: LD_VAR 0 1
46213: NOT
46214: PUSH
46215: LD_VAR 0 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: LD_INT 4
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: IN
46238: NOT
46239: OR
46240: IFFALSE 46244
// exit ;
46242: GO 46327
// tmp := [ ] ;
46244: LD_ADDR_VAR 0 5
46248: PUSH
46249: EMPTY
46250: ST_TO_ADDR
// for i in units do
46251: LD_ADDR_VAR 0 4
46255: PUSH
46256: LD_VAR 0 1
46260: PUSH
46261: FOR_IN
46262: IFFALSE 46296
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46264: LD_ADDR_VAR 0 5
46268: PUSH
46269: LD_VAR 0 5
46273: PPUSH
46274: LD_VAR 0 4
46278: PPUSH
46279: LD_VAR 0 2
46283: PPUSH
46284: CALL_OW 259
46288: PPUSH
46289: CALL 47700 0 2
46293: ST_TO_ADDR
46294: GO 46261
46296: POP
46297: POP
// if not tmp then
46298: LD_VAR 0 5
46302: NOT
46303: IFFALSE 46307
// exit ;
46305: GO 46327
// result := SortListByListDesc ( units , tmp ) ;
46307: LD_ADDR_VAR 0 3
46311: PUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: LD_VAR 0 5
46321: PPUSH
46322: CALL_OW 77
46326: ST_TO_ADDR
// end ;
46327: LD_VAR 0 3
46331: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46332: LD_INT 0
46334: PPUSH
46335: PPUSH
46336: PPUSH
// result := false ;
46337: LD_ADDR_VAR 0 3
46341: PUSH
46342: LD_INT 0
46344: ST_TO_ADDR
// if not building then
46345: LD_VAR 0 2
46349: NOT
46350: IFFALSE 46354
// exit ;
46352: GO 46492
// x := GetX ( building ) ;
46354: LD_ADDR_VAR 0 4
46358: PUSH
46359: LD_VAR 0 2
46363: PPUSH
46364: CALL_OW 250
46368: ST_TO_ADDR
// y := GetY ( building ) ;
46369: LD_ADDR_VAR 0 5
46373: PUSH
46374: LD_VAR 0 2
46378: PPUSH
46379: CALL_OW 251
46383: ST_TO_ADDR
// if not x or not y then
46384: LD_VAR 0 4
46388: NOT
46389: PUSH
46390: LD_VAR 0 5
46394: NOT
46395: OR
46396: IFFALSE 46400
// exit ;
46398: GO 46492
// if GetTaskList ( unit ) then
46400: LD_VAR 0 1
46404: PPUSH
46405: CALL_OW 437
46409: IFFALSE 46492
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46411: LD_STRING e
46413: PUSH
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 437
46423: PUSH
46424: LD_INT 1
46426: ARRAY
46427: PUSH
46428: LD_INT 1
46430: ARRAY
46431: EQUAL
46432: PUSH
46433: LD_VAR 0 4
46437: PUSH
46438: LD_VAR 0 1
46442: PPUSH
46443: CALL_OW 437
46447: PUSH
46448: LD_INT 1
46450: ARRAY
46451: PUSH
46452: LD_INT 2
46454: ARRAY
46455: EQUAL
46456: AND
46457: PUSH
46458: LD_VAR 0 5
46462: PUSH
46463: LD_VAR 0 1
46467: PPUSH
46468: CALL_OW 437
46472: PUSH
46473: LD_INT 1
46475: ARRAY
46476: PUSH
46477: LD_INT 3
46479: ARRAY
46480: EQUAL
46481: AND
46482: IFFALSE 46492
// result := true end ;
46484: LD_ADDR_VAR 0 3
46488: PUSH
46489: LD_INT 1
46491: ST_TO_ADDR
// end ;
46492: LD_VAR 0 3
46496: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46497: LD_INT 0
46499: PPUSH
// result := false ;
46500: LD_ADDR_VAR 0 4
46504: PUSH
46505: LD_INT 0
46507: ST_TO_ADDR
// if GetTaskList ( unit ) then
46508: LD_VAR 0 1
46512: PPUSH
46513: CALL_OW 437
46517: IFFALSE 46600
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46519: LD_STRING M
46521: PUSH
46522: LD_VAR 0 1
46526: PPUSH
46527: CALL_OW 437
46531: PUSH
46532: LD_INT 1
46534: ARRAY
46535: PUSH
46536: LD_INT 1
46538: ARRAY
46539: EQUAL
46540: PUSH
46541: LD_VAR 0 2
46545: PUSH
46546: LD_VAR 0 1
46550: PPUSH
46551: CALL_OW 437
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: PUSH
46560: LD_INT 2
46562: ARRAY
46563: EQUAL
46564: AND
46565: PUSH
46566: LD_VAR 0 3
46570: PUSH
46571: LD_VAR 0 1
46575: PPUSH
46576: CALL_OW 437
46580: PUSH
46581: LD_INT 1
46583: ARRAY
46584: PUSH
46585: LD_INT 3
46587: ARRAY
46588: EQUAL
46589: AND
46590: IFFALSE 46600
// result := true ;
46592: LD_ADDR_VAR 0 4
46596: PUSH
46597: LD_INT 1
46599: ST_TO_ADDR
// end ; end ;
46600: LD_VAR 0 4
46604: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46605: LD_INT 0
46607: PPUSH
46608: PPUSH
46609: PPUSH
46610: PPUSH
// if not unit or not area then
46611: LD_VAR 0 1
46615: NOT
46616: PUSH
46617: LD_VAR 0 2
46621: NOT
46622: OR
46623: IFFALSE 46627
// exit ;
46625: GO 46803
// tmp := AreaToList ( area , i ) ;
46627: LD_ADDR_VAR 0 6
46631: PUSH
46632: LD_VAR 0 2
46636: PPUSH
46637: LD_VAR 0 5
46641: PPUSH
46642: CALL_OW 517
46646: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46647: LD_ADDR_VAR 0 5
46651: PUSH
46652: DOUBLE
46653: LD_INT 1
46655: DEC
46656: ST_TO_ADDR
46657: LD_VAR 0 6
46661: PUSH
46662: LD_INT 1
46664: ARRAY
46665: PUSH
46666: FOR_TO
46667: IFFALSE 46801
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46669: LD_ADDR_VAR 0 7
46673: PUSH
46674: LD_VAR 0 6
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: PUSH
46683: LD_VAR 0 5
46687: ARRAY
46688: PUSH
46689: LD_VAR 0 6
46693: PUSH
46694: LD_INT 2
46696: ARRAY
46697: PUSH
46698: LD_VAR 0 5
46702: ARRAY
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46708: LD_INT 92
46710: PUSH
46711: LD_VAR 0 7
46715: PUSH
46716: LD_INT 1
46718: ARRAY
46719: PUSH
46720: LD_VAR 0 7
46724: PUSH
46725: LD_INT 2
46727: ARRAY
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: PPUSH
46738: CALL_OW 69
46742: PUSH
46743: LD_INT 0
46745: EQUAL
46746: IFFALSE 46799
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46748: LD_VAR 0 1
46752: PPUSH
46753: LD_VAR 0 7
46757: PUSH
46758: LD_INT 1
46760: ARRAY
46761: PPUSH
46762: LD_VAR 0 7
46766: PUSH
46767: LD_INT 2
46769: ARRAY
46770: PPUSH
46771: LD_VAR 0 3
46775: PPUSH
46776: CALL_OW 48
// result := IsPlaced ( unit ) ;
46780: LD_ADDR_VAR 0 4
46784: PUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: CALL_OW 305
46794: ST_TO_ADDR
// exit ;
46795: POP
46796: POP
46797: GO 46803
// end ; end ;
46799: GO 46666
46801: POP
46802: POP
// end ;
46803: LD_VAR 0 4
46807: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46808: LD_INT 0
46810: PPUSH
46811: PPUSH
46812: PPUSH
// if not side or side > 8 then
46813: LD_VAR 0 1
46817: NOT
46818: PUSH
46819: LD_VAR 0 1
46823: PUSH
46824: LD_INT 8
46826: GREATER
46827: OR
46828: IFFALSE 46832
// exit ;
46830: GO 47019
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46832: LD_ADDR_VAR 0 4
46836: PUSH
46837: LD_INT 22
46839: PUSH
46840: LD_VAR 0 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 21
46851: PUSH
46852: LD_INT 3
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PPUSH
46863: CALL_OW 69
46867: ST_TO_ADDR
// if not tmp then
46868: LD_VAR 0 4
46872: NOT
46873: IFFALSE 46877
// exit ;
46875: GO 47019
// enable_addtolog := true ;
46877: LD_ADDR_OWVAR 81
46881: PUSH
46882: LD_INT 1
46884: ST_TO_ADDR
// AddToLog ( [ ) ;
46885: LD_STRING [
46887: PPUSH
46888: CALL_OW 561
// for i in tmp do
46892: LD_ADDR_VAR 0 3
46896: PUSH
46897: LD_VAR 0 4
46901: PUSH
46902: FOR_IN
46903: IFFALSE 47010
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46905: LD_STRING [
46907: PUSH
46908: LD_VAR 0 3
46912: PPUSH
46913: CALL_OW 266
46917: STR
46918: PUSH
46919: LD_STRING , 
46921: STR
46922: PUSH
46923: LD_VAR 0 3
46927: PPUSH
46928: CALL_OW 250
46932: STR
46933: PUSH
46934: LD_STRING , 
46936: STR
46937: PUSH
46938: LD_VAR 0 3
46942: PPUSH
46943: CALL_OW 251
46947: STR
46948: PUSH
46949: LD_STRING , 
46951: STR
46952: PUSH
46953: LD_VAR 0 3
46957: PPUSH
46958: CALL_OW 254
46962: STR
46963: PUSH
46964: LD_STRING , 
46966: STR
46967: PUSH
46968: LD_VAR 0 3
46972: PPUSH
46973: LD_INT 1
46975: PPUSH
46976: CALL_OW 268
46980: STR
46981: PUSH
46982: LD_STRING , 
46984: STR
46985: PUSH
46986: LD_VAR 0 3
46990: PPUSH
46991: LD_INT 2
46993: PPUSH
46994: CALL_OW 268
46998: STR
46999: PUSH
47000: LD_STRING ],
47002: STR
47003: PPUSH
47004: CALL_OW 561
// end ;
47008: GO 46902
47010: POP
47011: POP
// AddToLog ( ]; ) ;
47012: LD_STRING ];
47014: PPUSH
47015: CALL_OW 561
// end ;
47019: LD_VAR 0 2
47023: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47024: LD_INT 0
47026: PPUSH
47027: PPUSH
47028: PPUSH
47029: PPUSH
47030: PPUSH
// if not area or not rate or not max then
47031: LD_VAR 0 1
47035: NOT
47036: PUSH
47037: LD_VAR 0 2
47041: NOT
47042: OR
47043: PUSH
47044: LD_VAR 0 4
47048: NOT
47049: OR
47050: IFFALSE 47054
// exit ;
47052: GO 47243
// while 1 do
47054: LD_INT 1
47056: IFFALSE 47243
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47058: LD_ADDR_VAR 0 9
47062: PUSH
47063: LD_VAR 0 1
47067: PPUSH
47068: LD_INT 1
47070: PPUSH
47071: CALL_OW 287
47075: PUSH
47076: LD_INT 10
47078: MUL
47079: ST_TO_ADDR
// r := rate / 10 ;
47080: LD_ADDR_VAR 0 7
47084: PUSH
47085: LD_VAR 0 2
47089: PUSH
47090: LD_INT 10
47092: DIVREAL
47093: ST_TO_ADDR
// time := 1 1$00 ;
47094: LD_ADDR_VAR 0 8
47098: PUSH
47099: LD_INT 2100
47101: ST_TO_ADDR
// if amount < min then
47102: LD_VAR 0 9
47106: PUSH
47107: LD_VAR 0 3
47111: LESS
47112: IFFALSE 47130
// r := r * 2 else
47114: LD_ADDR_VAR 0 7
47118: PUSH
47119: LD_VAR 0 7
47123: PUSH
47124: LD_INT 2
47126: MUL
47127: ST_TO_ADDR
47128: GO 47156
// if amount > max then
47130: LD_VAR 0 9
47134: PUSH
47135: LD_VAR 0 4
47139: GREATER
47140: IFFALSE 47156
// r := r / 2 ;
47142: LD_ADDR_VAR 0 7
47146: PUSH
47147: LD_VAR 0 7
47151: PUSH
47152: LD_INT 2
47154: DIVREAL
47155: ST_TO_ADDR
// time := time / r ;
47156: LD_ADDR_VAR 0 8
47160: PUSH
47161: LD_VAR 0 8
47165: PUSH
47166: LD_VAR 0 7
47170: DIVREAL
47171: ST_TO_ADDR
// if time < 0 then
47172: LD_VAR 0 8
47176: PUSH
47177: LD_INT 0
47179: LESS
47180: IFFALSE 47197
// time := time * - 1 ;
47182: LD_ADDR_VAR 0 8
47186: PUSH
47187: LD_VAR 0 8
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: MUL
47196: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47197: LD_VAR 0 8
47201: PUSH
47202: LD_INT 35
47204: PPUSH
47205: LD_INT 875
47207: PPUSH
47208: CALL_OW 12
47212: PLUS
47213: PPUSH
47214: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47218: LD_INT 1
47220: PPUSH
47221: LD_INT 5
47223: PPUSH
47224: CALL_OW 12
47228: PPUSH
47229: LD_VAR 0 1
47233: PPUSH
47234: LD_INT 1
47236: PPUSH
47237: CALL_OW 55
// end ;
47241: GO 47054
// end ;
47243: LD_VAR 0 5
47247: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47248: LD_INT 0
47250: PPUSH
47251: PPUSH
47252: PPUSH
47253: PPUSH
47254: PPUSH
47255: PPUSH
47256: PPUSH
47257: PPUSH
// if not turrets or not factories then
47258: LD_VAR 0 1
47262: NOT
47263: PUSH
47264: LD_VAR 0 2
47268: NOT
47269: OR
47270: IFFALSE 47274
// exit ;
47272: GO 47581
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47274: LD_ADDR_VAR 0 10
47278: PUSH
47279: LD_INT 5
47281: PUSH
47282: LD_INT 6
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 4
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 5
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 24
47316: PUSH
47317: LD_INT 25
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 23
47326: PUSH
47327: LD_INT 27
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 42
47340: PUSH
47341: LD_INT 43
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 44
47350: PUSH
47351: LD_INT 46
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 45
47360: PUSH
47361: LD_INT 47
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// result := [ ] ;
47378: LD_ADDR_VAR 0 3
47382: PUSH
47383: EMPTY
47384: ST_TO_ADDR
// for i in turrets do
47385: LD_ADDR_VAR 0 4
47389: PUSH
47390: LD_VAR 0 1
47394: PUSH
47395: FOR_IN
47396: IFFALSE 47579
// begin nat := GetNation ( i ) ;
47398: LD_ADDR_VAR 0 7
47402: PUSH
47403: LD_VAR 0 4
47407: PPUSH
47408: CALL_OW 248
47412: ST_TO_ADDR
// weapon := 0 ;
47413: LD_ADDR_VAR 0 8
47417: PUSH
47418: LD_INT 0
47420: ST_TO_ADDR
// if not nat then
47421: LD_VAR 0 7
47425: NOT
47426: IFFALSE 47430
// continue ;
47428: GO 47395
// for j in list [ nat ] do
47430: LD_ADDR_VAR 0 5
47434: PUSH
47435: LD_VAR 0 10
47439: PUSH
47440: LD_VAR 0 7
47444: ARRAY
47445: PUSH
47446: FOR_IN
47447: IFFALSE 47488
// if GetBWeapon ( i ) = j [ 1 ] then
47449: LD_VAR 0 4
47453: PPUSH
47454: CALL_OW 269
47458: PUSH
47459: LD_VAR 0 5
47463: PUSH
47464: LD_INT 1
47466: ARRAY
47467: EQUAL
47468: IFFALSE 47486
// begin weapon := j [ 2 ] ;
47470: LD_ADDR_VAR 0 8
47474: PUSH
47475: LD_VAR 0 5
47479: PUSH
47480: LD_INT 2
47482: ARRAY
47483: ST_TO_ADDR
// break ;
47484: GO 47488
// end ;
47486: GO 47446
47488: POP
47489: POP
// if not weapon then
47490: LD_VAR 0 8
47494: NOT
47495: IFFALSE 47499
// continue ;
47497: GO 47395
// for k in factories do
47499: LD_ADDR_VAR 0 6
47503: PUSH
47504: LD_VAR 0 2
47508: PUSH
47509: FOR_IN
47510: IFFALSE 47575
// begin weapons := AvailableWeaponList ( k ) ;
47512: LD_ADDR_VAR 0 9
47516: PUSH
47517: LD_VAR 0 6
47521: PPUSH
47522: CALL_OW 478
47526: ST_TO_ADDR
// if not weapons then
47527: LD_VAR 0 9
47531: NOT
47532: IFFALSE 47536
// continue ;
47534: GO 47509
// if weapon in weapons then
47536: LD_VAR 0 8
47540: PUSH
47541: LD_VAR 0 9
47545: IN
47546: IFFALSE 47573
// begin result := [ i , weapon ] ;
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: LD_VAR 0 4
47557: PUSH
47558: LD_VAR 0 8
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// exit ;
47567: POP
47568: POP
47569: POP
47570: POP
47571: GO 47581
// end ; end ;
47573: GO 47509
47575: POP
47576: POP
// end ;
47577: GO 47395
47579: POP
47580: POP
// end ;
47581: LD_VAR 0 3
47585: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47586: LD_INT 0
47588: PPUSH
// if not side or side > 8 then
47589: LD_VAR 0 3
47593: NOT
47594: PUSH
47595: LD_VAR 0 3
47599: PUSH
47600: LD_INT 8
47602: GREATER
47603: OR
47604: IFFALSE 47608
// exit ;
47606: GO 47667
// if not range then
47608: LD_VAR 0 4
47612: NOT
47613: IFFALSE 47624
// range := - 12 ;
47615: LD_ADDR_VAR 0 4
47619: PUSH
47620: LD_INT 12
47622: NEG
47623: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47624: LD_VAR 0 1
47628: PPUSH
47629: LD_VAR 0 2
47633: PPUSH
47634: LD_VAR 0 3
47638: PPUSH
47639: LD_VAR 0 4
47643: PPUSH
47644: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47648: LD_VAR 0 1
47652: PPUSH
47653: LD_VAR 0 2
47657: PPUSH
47658: LD_VAR 0 3
47662: PPUSH
47663: CALL_OW 331
// end ;
47667: LD_VAR 0 5
47671: RET
// export function Video ( mode ) ; begin
47672: LD_INT 0
47674: PPUSH
// ingame_video = mode ;
47675: LD_ADDR_OWVAR 52
47679: PUSH
47680: LD_VAR 0 1
47684: ST_TO_ADDR
// interface_hidden = mode ;
47685: LD_ADDR_OWVAR 54
47689: PUSH
47690: LD_VAR 0 1
47694: ST_TO_ADDR
// end ;
47695: LD_VAR 0 2
47699: RET
// export function Join ( array , element ) ; begin
47700: LD_INT 0
47702: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47703: LD_ADDR_VAR 0 3
47707: PUSH
47708: LD_VAR 0 1
47712: PPUSH
47713: LD_VAR 0 1
47717: PUSH
47718: LD_INT 1
47720: PLUS
47721: PPUSH
47722: LD_VAR 0 2
47726: PPUSH
47727: CALL_OW 1
47731: ST_TO_ADDR
// end ;
47732: LD_VAR 0 3
47736: RET
// export function JoinUnion ( array , element ) ; begin
47737: LD_INT 0
47739: PPUSH
// result := array union element ;
47740: LD_ADDR_VAR 0 3
47744: PUSH
47745: LD_VAR 0 1
47749: PUSH
47750: LD_VAR 0 2
47754: UNION
47755: ST_TO_ADDR
// end ;
47756: LD_VAR 0 3
47760: RET
// export function GetBehemoths ( side ) ; begin
47761: LD_INT 0
47763: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47764: LD_ADDR_VAR 0 2
47768: PUSH
47769: LD_INT 22
47771: PUSH
47772: LD_VAR 0 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 31
47783: PUSH
47784: LD_INT 25
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PPUSH
47795: CALL_OW 69
47799: ST_TO_ADDR
// end ;
47800: LD_VAR 0 2
47804: RET
// export function Shuffle ( array ) ; var i , index ; begin
47805: LD_INT 0
47807: PPUSH
47808: PPUSH
47809: PPUSH
// result := [ ] ;
47810: LD_ADDR_VAR 0 2
47814: PUSH
47815: EMPTY
47816: ST_TO_ADDR
// if not array then
47817: LD_VAR 0 1
47821: NOT
47822: IFFALSE 47826
// exit ;
47824: GO 47925
// Randomize ;
47826: CALL_OW 10
// for i = array downto 1 do
47830: LD_ADDR_VAR 0 3
47834: PUSH
47835: DOUBLE
47836: LD_VAR 0 1
47840: INC
47841: ST_TO_ADDR
47842: LD_INT 1
47844: PUSH
47845: FOR_DOWNTO
47846: IFFALSE 47923
// begin index := rand ( 1 , array ) ;
47848: LD_ADDR_VAR 0 4
47852: PUSH
47853: LD_INT 1
47855: PPUSH
47856: LD_VAR 0 1
47860: PPUSH
47861: CALL_OW 12
47865: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47866: LD_ADDR_VAR 0 2
47870: PUSH
47871: LD_VAR 0 2
47875: PPUSH
47876: LD_VAR 0 2
47880: PUSH
47881: LD_INT 1
47883: PLUS
47884: PPUSH
47885: LD_VAR 0 1
47889: PUSH
47890: LD_VAR 0 4
47894: ARRAY
47895: PPUSH
47896: CALL_OW 2
47900: ST_TO_ADDR
// array := Delete ( array , index ) ;
47901: LD_ADDR_VAR 0 1
47905: PUSH
47906: LD_VAR 0 1
47910: PPUSH
47911: LD_VAR 0 4
47915: PPUSH
47916: CALL_OW 3
47920: ST_TO_ADDR
// end ;
47921: GO 47845
47923: POP
47924: POP
// end ;
47925: LD_VAR 0 2
47929: RET
// export function GetBaseMaterials ( base ) ; begin
47930: LD_INT 0
47932: PPUSH
// result := [ 0 , 0 , 0 ] ;
47933: LD_ADDR_VAR 0 2
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: ST_TO_ADDR
// if not base then
47952: LD_VAR 0 1
47956: NOT
47957: IFFALSE 47961
// exit ;
47959: GO 48010
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47961: LD_ADDR_VAR 0 2
47965: PUSH
47966: LD_VAR 0 1
47970: PPUSH
47971: LD_INT 1
47973: PPUSH
47974: CALL_OW 275
47978: PUSH
47979: LD_VAR 0 1
47983: PPUSH
47984: LD_INT 2
47986: PPUSH
47987: CALL_OW 275
47991: PUSH
47992: LD_VAR 0 1
47996: PPUSH
47997: LD_INT 3
47999: PPUSH
48000: CALL_OW 275
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: ST_TO_ADDR
// end ;
48010: LD_VAR 0 2
48014: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48015: LD_INT 0
48017: PPUSH
48018: PPUSH
// result := array ;
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_VAR 0 1
48028: ST_TO_ADDR
// if size >= result then
48029: LD_VAR 0 2
48033: PUSH
48034: LD_VAR 0 3
48038: GREATEREQUAL
48039: IFFALSE 48043
// exit ;
48041: GO 48093
// if size then
48043: LD_VAR 0 2
48047: IFFALSE 48093
// for i := array downto size do
48049: LD_ADDR_VAR 0 4
48053: PUSH
48054: DOUBLE
48055: LD_VAR 0 1
48059: INC
48060: ST_TO_ADDR
48061: LD_VAR 0 2
48065: PUSH
48066: FOR_DOWNTO
48067: IFFALSE 48091
// result := Delete ( result , result ) ;
48069: LD_ADDR_VAR 0 3
48073: PUSH
48074: LD_VAR 0 3
48078: PPUSH
48079: LD_VAR 0 3
48083: PPUSH
48084: CALL_OW 3
48088: ST_TO_ADDR
48089: GO 48066
48091: POP
48092: POP
// end ;
48093: LD_VAR 0 3
48097: RET
// export function ComExit ( unit ) ; var tmp ; begin
48098: LD_INT 0
48100: PPUSH
48101: PPUSH
// if not IsInUnit ( unit ) then
48102: LD_VAR 0 1
48106: PPUSH
48107: CALL_OW 310
48111: NOT
48112: IFFALSE 48116
// exit ;
48114: GO 48176
// tmp := IsInUnit ( unit ) ;
48116: LD_ADDR_VAR 0 3
48120: PUSH
48121: LD_VAR 0 1
48125: PPUSH
48126: CALL_OW 310
48130: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48131: LD_VAR 0 3
48135: PPUSH
48136: CALL_OW 247
48140: PUSH
48141: LD_INT 2
48143: EQUAL
48144: IFFALSE 48157
// ComExitVehicle ( unit ) else
48146: LD_VAR 0 1
48150: PPUSH
48151: CALL_OW 121
48155: GO 48166
// ComExitBuilding ( unit ) ;
48157: LD_VAR 0 1
48161: PPUSH
48162: CALL_OW 122
// result := tmp ;
48166: LD_ADDR_VAR 0 2
48170: PUSH
48171: LD_VAR 0 3
48175: ST_TO_ADDR
// end ;
48176: LD_VAR 0 2
48180: RET
// export function ComExitAll ( units ) ; var i ; begin
48181: LD_INT 0
48183: PPUSH
48184: PPUSH
// if not units then
48185: LD_VAR 0 1
48189: NOT
48190: IFFALSE 48194
// exit ;
48192: GO 48220
// for i in units do
48194: LD_ADDR_VAR 0 3
48198: PUSH
48199: LD_VAR 0 1
48203: PUSH
48204: FOR_IN
48205: IFFALSE 48218
// ComExit ( i ) ;
48207: LD_VAR 0 3
48211: PPUSH
48212: CALL 48098 0 1
48216: GO 48204
48218: POP
48219: POP
// end ;
48220: LD_VAR 0 2
48224: RET
// export function ResetHc ; begin
48225: LD_INT 0
48227: PPUSH
// InitHc ;
48228: CALL_OW 19
// hc_importance := 0 ;
48232: LD_ADDR_OWVAR 32
48236: PUSH
48237: LD_INT 0
48239: ST_TO_ADDR
// end ;
48240: LD_VAR 0 1
48244: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48245: LD_INT 0
48247: PPUSH
48248: PPUSH
48249: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48250: LD_ADDR_VAR 0 6
48254: PUSH
48255: LD_VAR 0 1
48259: PUSH
48260: LD_VAR 0 3
48264: PLUS
48265: PUSH
48266: LD_INT 2
48268: DIV
48269: ST_TO_ADDR
// if _x < 0 then
48270: LD_VAR 0 6
48274: PUSH
48275: LD_INT 0
48277: LESS
48278: IFFALSE 48295
// _x := _x * - 1 ;
48280: LD_ADDR_VAR 0 6
48284: PUSH
48285: LD_VAR 0 6
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: MUL
48294: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48295: LD_ADDR_VAR 0 7
48299: PUSH
48300: LD_VAR 0 2
48304: PUSH
48305: LD_VAR 0 4
48309: PLUS
48310: PUSH
48311: LD_INT 2
48313: DIV
48314: ST_TO_ADDR
// if _y < 0 then
48315: LD_VAR 0 7
48319: PUSH
48320: LD_INT 0
48322: LESS
48323: IFFALSE 48340
// _y := _y * - 1 ;
48325: LD_ADDR_VAR 0 7
48329: PUSH
48330: LD_VAR 0 7
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: MUL
48339: ST_TO_ADDR
// result := [ _x , _y ] ;
48340: LD_ADDR_VAR 0 5
48344: PUSH
48345: LD_VAR 0 6
48349: PUSH
48350: LD_VAR 0 7
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// end ;
48359: LD_VAR 0 5
48363: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48364: LD_INT 0
48366: PPUSH
48367: PPUSH
48368: PPUSH
48369: PPUSH
// task := GetTaskList ( unit ) ;
48370: LD_ADDR_VAR 0 7
48374: PUSH
48375: LD_VAR 0 1
48379: PPUSH
48380: CALL_OW 437
48384: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48385: LD_VAR 0 7
48389: NOT
48390: PUSH
48391: LD_VAR 0 1
48395: PPUSH
48396: LD_VAR 0 2
48400: PPUSH
48401: CALL_OW 308
48405: NOT
48406: AND
48407: IFFALSE 48411
// exit ;
48409: GO 48529
// if IsInArea ( unit , area ) then
48411: LD_VAR 0 1
48415: PPUSH
48416: LD_VAR 0 2
48420: PPUSH
48421: CALL_OW 308
48425: IFFALSE 48443
// begin ComMoveToArea ( unit , goAway ) ;
48427: LD_VAR 0 1
48431: PPUSH
48432: LD_VAR 0 3
48436: PPUSH
48437: CALL_OW 113
// exit ;
48441: GO 48529
// end ; if task [ 1 ] [ 1 ] <> M then
48443: LD_VAR 0 7
48447: PUSH
48448: LD_INT 1
48450: ARRAY
48451: PUSH
48452: LD_INT 1
48454: ARRAY
48455: PUSH
48456: LD_STRING M
48458: NONEQUAL
48459: IFFALSE 48463
// exit ;
48461: GO 48529
// x := task [ 1 ] [ 2 ] ;
48463: LD_ADDR_VAR 0 5
48467: PUSH
48468: LD_VAR 0 7
48472: PUSH
48473: LD_INT 1
48475: ARRAY
48476: PUSH
48477: LD_INT 2
48479: ARRAY
48480: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48481: LD_ADDR_VAR 0 6
48485: PUSH
48486: LD_VAR 0 7
48490: PUSH
48491: LD_INT 1
48493: ARRAY
48494: PUSH
48495: LD_INT 3
48497: ARRAY
48498: ST_TO_ADDR
// if InArea ( x , y , area ) then
48499: LD_VAR 0 5
48503: PPUSH
48504: LD_VAR 0 6
48508: PPUSH
48509: LD_VAR 0 2
48513: PPUSH
48514: CALL_OW 309
48518: IFFALSE 48529
// ComStop ( unit ) ;
48520: LD_VAR 0 1
48524: PPUSH
48525: CALL_OW 141
// end ;
48529: LD_VAR 0 4
48533: RET
// export function Abs ( value ) ; begin
48534: LD_INT 0
48536: PPUSH
// result := value ;
48537: LD_ADDR_VAR 0 2
48541: PUSH
48542: LD_VAR 0 1
48546: ST_TO_ADDR
// if value < 0 then
48547: LD_VAR 0 1
48551: PUSH
48552: LD_INT 0
48554: LESS
48555: IFFALSE 48572
// result := value * - 1 ;
48557: LD_ADDR_VAR 0 2
48561: PUSH
48562: LD_VAR 0 1
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: MUL
48571: ST_TO_ADDR
// end ;
48572: LD_VAR 0 2
48576: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48577: LD_INT 0
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
48586: PPUSH
// if not unit or not building then
48587: LD_VAR 0 1
48591: NOT
48592: PUSH
48593: LD_VAR 0 2
48597: NOT
48598: OR
48599: IFFALSE 48603
// exit ;
48601: GO 48829
// x := GetX ( building ) ;
48603: LD_ADDR_VAR 0 4
48607: PUSH
48608: LD_VAR 0 2
48612: PPUSH
48613: CALL_OW 250
48617: ST_TO_ADDR
// y := GetY ( building ) ;
48618: LD_ADDR_VAR 0 6
48622: PUSH
48623: LD_VAR 0 2
48627: PPUSH
48628: CALL_OW 251
48632: ST_TO_ADDR
// d := GetDir ( building ) ;
48633: LD_ADDR_VAR 0 8
48637: PUSH
48638: LD_VAR 0 2
48642: PPUSH
48643: CALL_OW 254
48647: ST_TO_ADDR
// r := 4 ;
48648: LD_ADDR_VAR 0 9
48652: PUSH
48653: LD_INT 4
48655: ST_TO_ADDR
// for i := 1 to 5 do
48656: LD_ADDR_VAR 0 10
48660: PUSH
48661: DOUBLE
48662: LD_INT 1
48664: DEC
48665: ST_TO_ADDR
48666: LD_INT 5
48668: PUSH
48669: FOR_TO
48670: IFFALSE 48827
// begin _x := ShiftX ( x , d , r + i ) ;
48672: LD_ADDR_VAR 0 5
48676: PUSH
48677: LD_VAR 0 4
48681: PPUSH
48682: LD_VAR 0 8
48686: PPUSH
48687: LD_VAR 0 9
48691: PUSH
48692: LD_VAR 0 10
48696: PLUS
48697: PPUSH
48698: CALL_OW 272
48702: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48703: LD_ADDR_VAR 0 7
48707: PUSH
48708: LD_VAR 0 6
48712: PPUSH
48713: LD_VAR 0 8
48717: PPUSH
48718: LD_VAR 0 9
48722: PUSH
48723: LD_VAR 0 10
48727: PLUS
48728: PPUSH
48729: CALL_OW 273
48733: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48734: LD_VAR 0 5
48738: PPUSH
48739: LD_VAR 0 7
48743: PPUSH
48744: CALL_OW 488
48748: PUSH
48749: LD_VAR 0 5
48753: PPUSH
48754: LD_VAR 0 7
48758: PPUSH
48759: CALL_OW 428
48763: PPUSH
48764: CALL_OW 247
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: IN
48779: NOT
48780: AND
48781: IFFALSE 48825
// begin ComMoveXY ( unit , _x , _y ) ;
48783: LD_VAR 0 1
48787: PPUSH
48788: LD_VAR 0 5
48792: PPUSH
48793: LD_VAR 0 7
48797: PPUSH
48798: CALL_OW 111
// result := [ _x , _y ] ;
48802: LD_ADDR_VAR 0 3
48806: PUSH
48807: LD_VAR 0 5
48811: PUSH
48812: LD_VAR 0 7
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: ST_TO_ADDR
// exit ;
48821: POP
48822: POP
48823: GO 48829
// end ; end ;
48825: GO 48669
48827: POP
48828: POP
// end ;
48829: LD_VAR 0 3
48833: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48834: LD_INT 0
48836: PPUSH
48837: PPUSH
48838: PPUSH
// result := 0 ;
48839: LD_ADDR_VAR 0 3
48843: PUSH
48844: LD_INT 0
48846: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48847: LD_VAR 0 1
48851: PUSH
48852: LD_INT 0
48854: LESS
48855: PUSH
48856: LD_VAR 0 1
48860: PUSH
48861: LD_INT 8
48863: GREATER
48864: OR
48865: PUSH
48866: LD_VAR 0 2
48870: PUSH
48871: LD_INT 0
48873: LESS
48874: OR
48875: PUSH
48876: LD_VAR 0 2
48880: PUSH
48881: LD_INT 8
48883: GREATER
48884: OR
48885: IFFALSE 48889
// exit ;
48887: GO 48964
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48889: LD_ADDR_VAR 0 4
48893: PUSH
48894: LD_INT 22
48896: PUSH
48897: LD_VAR 0 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PPUSH
48906: CALL_OW 69
48910: PUSH
48911: FOR_IN
48912: IFFALSE 48962
// begin un := UnitShoot ( i ) ;
48914: LD_ADDR_VAR 0 5
48918: PUSH
48919: LD_VAR 0 4
48923: PPUSH
48924: CALL_OW 504
48928: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48929: LD_VAR 0 5
48933: PPUSH
48934: CALL_OW 255
48938: PUSH
48939: LD_VAR 0 1
48943: EQUAL
48944: IFFALSE 48960
// begin result := un ;
48946: LD_ADDR_VAR 0 3
48950: PUSH
48951: LD_VAR 0 5
48955: ST_TO_ADDR
// exit ;
48956: POP
48957: POP
48958: GO 48964
// end ; end ;
48960: GO 48911
48962: POP
48963: POP
// end ;
48964: LD_VAR 0 3
48968: RET
// export function GetCargoBay ( units ) ; begin
48969: LD_INT 0
48971: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48972: LD_ADDR_VAR 0 2
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 34
48987: PUSH
48988: LD_INT 12
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 34
48997: PUSH
48998: LD_INT 51
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 34
49007: PUSH
49008: LD_INT 32
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 34
49017: PUSH
49018: LD_INT 89
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: PPUSH
49032: CALL_OW 72
49036: ST_TO_ADDR
// end ;
49037: LD_VAR 0 2
49041: RET
// export function Negate ( value ) ; begin
49042: LD_INT 0
49044: PPUSH
// result := not value ;
49045: LD_ADDR_VAR 0 2
49049: PUSH
49050: LD_VAR 0 1
49054: NOT
49055: ST_TO_ADDR
// end ;
49056: LD_VAR 0 2
49060: RET
// export function Inc ( value ) ; begin
49061: LD_INT 0
49063: PPUSH
// result := value + 1 ;
49064: LD_ADDR_VAR 0 2
49068: PUSH
49069: LD_VAR 0 1
49073: PUSH
49074: LD_INT 1
49076: PLUS
49077: ST_TO_ADDR
// end ;
49078: LD_VAR 0 2
49082: RET
// export function Dec ( value ) ; begin
49083: LD_INT 0
49085: PPUSH
// result := value - 1 ;
49086: LD_ADDR_VAR 0 2
49090: PUSH
49091: LD_VAR 0 1
49095: PUSH
49096: LD_INT 1
49098: MINUS
49099: ST_TO_ADDR
// end ;
49100: LD_VAR 0 2
49104: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49105: LD_INT 0
49107: PPUSH
49108: PPUSH
49109: PPUSH
49110: PPUSH
49111: PPUSH
49112: PPUSH
49113: PPUSH
49114: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49115: LD_VAR 0 1
49119: PPUSH
49120: LD_VAR 0 2
49124: PPUSH
49125: CALL_OW 488
49129: NOT
49130: PUSH
49131: LD_VAR 0 3
49135: PPUSH
49136: LD_VAR 0 4
49140: PPUSH
49141: CALL_OW 488
49145: NOT
49146: OR
49147: IFFALSE 49160
// begin result := - 1 ;
49149: LD_ADDR_VAR 0 5
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: ST_TO_ADDR
// exit ;
49158: GO 49395
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49160: LD_ADDR_VAR 0 12
49164: PUSH
49165: LD_VAR 0 1
49169: PPUSH
49170: LD_VAR 0 2
49174: PPUSH
49175: LD_VAR 0 3
49179: PPUSH
49180: LD_VAR 0 4
49184: PPUSH
49185: CALL 48245 0 4
49189: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49190: LD_ADDR_VAR 0 11
49194: PUSH
49195: LD_VAR 0 1
49199: PPUSH
49200: LD_VAR 0 2
49204: PPUSH
49205: LD_VAR 0 12
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: PPUSH
49214: LD_VAR 0 12
49218: PUSH
49219: LD_INT 2
49221: ARRAY
49222: PPUSH
49223: CALL_OW 298
49227: ST_TO_ADDR
// distance := 9999 ;
49228: LD_ADDR_VAR 0 10
49232: PUSH
49233: LD_INT 9999
49235: ST_TO_ADDR
// for i := 0 to 5 do
49236: LD_ADDR_VAR 0 6
49240: PUSH
49241: DOUBLE
49242: LD_INT 0
49244: DEC
49245: ST_TO_ADDR
49246: LD_INT 5
49248: PUSH
49249: FOR_TO
49250: IFFALSE 49393
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49252: LD_ADDR_VAR 0 7
49256: PUSH
49257: LD_VAR 0 1
49261: PPUSH
49262: LD_VAR 0 6
49266: PPUSH
49267: LD_VAR 0 11
49271: PPUSH
49272: CALL_OW 272
49276: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49277: LD_ADDR_VAR 0 8
49281: PUSH
49282: LD_VAR 0 2
49286: PPUSH
49287: LD_VAR 0 6
49291: PPUSH
49292: LD_VAR 0 11
49296: PPUSH
49297: CALL_OW 273
49301: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49302: LD_VAR 0 7
49306: PPUSH
49307: LD_VAR 0 8
49311: PPUSH
49312: CALL_OW 488
49316: NOT
49317: IFFALSE 49321
// continue ;
49319: GO 49249
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49321: LD_ADDR_VAR 0 9
49325: PUSH
49326: LD_VAR 0 12
49330: PUSH
49331: LD_INT 1
49333: ARRAY
49334: PPUSH
49335: LD_VAR 0 12
49339: PUSH
49340: LD_INT 2
49342: ARRAY
49343: PPUSH
49344: LD_VAR 0 7
49348: PPUSH
49349: LD_VAR 0 8
49353: PPUSH
49354: CALL_OW 298
49358: ST_TO_ADDR
// if tmp < distance then
49359: LD_VAR 0 9
49363: PUSH
49364: LD_VAR 0 10
49368: LESS
49369: IFFALSE 49391
// begin result := i ;
49371: LD_ADDR_VAR 0 5
49375: PUSH
49376: LD_VAR 0 6
49380: ST_TO_ADDR
// distance := tmp ;
49381: LD_ADDR_VAR 0 10
49385: PUSH
49386: LD_VAR 0 9
49390: ST_TO_ADDR
// end ; end ;
49391: GO 49249
49393: POP
49394: POP
// end ;
49395: LD_VAR 0 5
49399: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49400: LD_INT 0
49402: PPUSH
49403: PPUSH
// if not driver or not IsInUnit ( driver ) then
49404: LD_VAR 0 1
49408: NOT
49409: PUSH
49410: LD_VAR 0 1
49414: PPUSH
49415: CALL_OW 310
49419: NOT
49420: OR
49421: IFFALSE 49425
// exit ;
49423: GO 49515
// vehicle := IsInUnit ( driver ) ;
49425: LD_ADDR_VAR 0 3
49429: PUSH
49430: LD_VAR 0 1
49434: PPUSH
49435: CALL_OW 310
49439: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49440: LD_VAR 0 1
49444: PPUSH
49445: LD_STRING \
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: PUSH
49475: LD_STRING E
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_VAR 0 3
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PPUSH
49511: CALL_OW 446
// end ;
49515: LD_VAR 0 2
49519: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49520: LD_INT 0
49522: PPUSH
49523: PPUSH
// if not driver or not IsInUnit ( driver ) then
49524: LD_VAR 0 1
49528: NOT
49529: PUSH
49530: LD_VAR 0 1
49534: PPUSH
49535: CALL_OW 310
49539: NOT
49540: OR
49541: IFFALSE 49545
// exit ;
49543: GO 49635
// vehicle := IsInUnit ( driver ) ;
49545: LD_ADDR_VAR 0 3
49549: PUSH
49550: LD_VAR 0 1
49554: PPUSH
49555: CALL_OW 310
49559: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49560: LD_VAR 0 1
49564: PPUSH
49565: LD_STRING \
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: PUSH
49595: LD_STRING E
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_VAR 0 3
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PPUSH
49631: CALL_OW 447
// end ;
49635: LD_VAR 0 2
49639: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49640: LD_INT 0
49642: PPUSH
49643: PPUSH
49644: PPUSH
// tmp := [ ] ;
49645: LD_ADDR_VAR 0 5
49649: PUSH
49650: EMPTY
49651: ST_TO_ADDR
// for i in units do
49652: LD_ADDR_VAR 0 4
49656: PUSH
49657: LD_VAR 0 1
49661: PUSH
49662: FOR_IN
49663: IFFALSE 49701
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49665: LD_ADDR_VAR 0 5
49669: PUSH
49670: LD_VAR 0 5
49674: PPUSH
49675: LD_VAR 0 5
49679: PUSH
49680: LD_INT 1
49682: PLUS
49683: PPUSH
49684: LD_VAR 0 4
49688: PPUSH
49689: CALL_OW 256
49693: PPUSH
49694: CALL_OW 2
49698: ST_TO_ADDR
49699: GO 49662
49701: POP
49702: POP
// if not tmp then
49703: LD_VAR 0 5
49707: NOT
49708: IFFALSE 49712
// exit ;
49710: GO 49760
// if asc then
49712: LD_VAR 0 2
49716: IFFALSE 49740
// result := SortListByListAsc ( units , tmp ) else
49718: LD_ADDR_VAR 0 3
49722: PUSH
49723: LD_VAR 0 1
49727: PPUSH
49728: LD_VAR 0 5
49732: PPUSH
49733: CALL_OW 76
49737: ST_TO_ADDR
49738: GO 49760
// result := SortListByListDesc ( units , tmp ) ;
49740: LD_ADDR_VAR 0 3
49744: PUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: LD_VAR 0 5
49754: PPUSH
49755: CALL_OW 77
49759: ST_TO_ADDR
// end ;
49760: LD_VAR 0 3
49764: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49765: LD_INT 0
49767: PPUSH
49768: PPUSH
// task := GetTaskList ( mech ) ;
49769: LD_ADDR_VAR 0 4
49773: PUSH
49774: LD_VAR 0 1
49778: PPUSH
49779: CALL_OW 437
49783: ST_TO_ADDR
// if not task then
49784: LD_VAR 0 4
49788: NOT
49789: IFFALSE 49793
// exit ;
49791: GO 49835
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49793: LD_ADDR_VAR 0 3
49797: PUSH
49798: LD_VAR 0 4
49802: PUSH
49803: LD_INT 1
49805: ARRAY
49806: PUSH
49807: LD_INT 1
49809: ARRAY
49810: PUSH
49811: LD_STRING r
49813: EQUAL
49814: PUSH
49815: LD_VAR 0 4
49819: PUSH
49820: LD_INT 1
49822: ARRAY
49823: PUSH
49824: LD_INT 4
49826: ARRAY
49827: PUSH
49828: LD_VAR 0 2
49832: EQUAL
49833: AND
49834: ST_TO_ADDR
// end ;
49835: LD_VAR 0 3
49839: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49840: LD_INT 0
49842: PPUSH
// SetDir ( unit , d ) ;
49843: LD_VAR 0 1
49847: PPUSH
49848: LD_VAR 0 4
49852: PPUSH
49853: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
49857: LD_ADDR_VAR 0 6
49861: PUSH
49862: LD_VAR 0 1
49866: PPUSH
49867: LD_VAR 0 2
49871: PPUSH
49872: LD_VAR 0 3
49876: PPUSH
49877: LD_VAR 0 5
49881: PPUSH
49882: CALL_OW 48
49886: ST_TO_ADDR
// end ;
49887: LD_VAR 0 6
49891: RET
// export function ToNaturalNumber ( number ) ; begin
49892: LD_INT 0
49894: PPUSH
// result := number div 1 ;
49895: LD_ADDR_VAR 0 2
49899: PUSH
49900: LD_VAR 0 1
49904: PUSH
49905: LD_INT 1
49907: DIV
49908: ST_TO_ADDR
// if number < 0 then
49909: LD_VAR 0 1
49913: PUSH
49914: LD_INT 0
49916: LESS
49917: IFFALSE 49927
// result := 0 ;
49919: LD_ADDR_VAR 0 2
49923: PUSH
49924: LD_INT 0
49926: ST_TO_ADDR
// end ;
49927: LD_VAR 0 2
49931: RET
// export function SortByClass ( units , class ) ; var un ; begin
49932: LD_INT 0
49934: PPUSH
49935: PPUSH
// if not units or not class then
49936: LD_VAR 0 1
49940: NOT
49941: PUSH
49942: LD_VAR 0 2
49946: NOT
49947: OR
49948: IFFALSE 49952
// exit ;
49950: GO 50047
// result := [ ] ;
49952: LD_ADDR_VAR 0 3
49956: PUSH
49957: EMPTY
49958: ST_TO_ADDR
// for un in units do
49959: LD_ADDR_VAR 0 4
49963: PUSH
49964: LD_VAR 0 1
49968: PUSH
49969: FOR_IN
49970: IFFALSE 50045
// if GetClass ( un ) = class then
49972: LD_VAR 0 4
49976: PPUSH
49977: CALL_OW 257
49981: PUSH
49982: LD_VAR 0 2
49986: EQUAL
49987: IFFALSE 50014
// result := Insert ( result , 1 , un ) else
49989: LD_ADDR_VAR 0 3
49993: PUSH
49994: LD_VAR 0 3
49998: PPUSH
49999: LD_INT 1
50001: PPUSH
50002: LD_VAR 0 4
50006: PPUSH
50007: CALL_OW 2
50011: ST_TO_ADDR
50012: GO 50043
// result := Replace ( result , result + 1 , un ) ;
50014: LD_ADDR_VAR 0 3
50018: PUSH
50019: LD_VAR 0 3
50023: PPUSH
50024: LD_VAR 0 3
50028: PUSH
50029: LD_INT 1
50031: PLUS
50032: PPUSH
50033: LD_VAR 0 4
50037: PPUSH
50038: CALL_OW 1
50042: ST_TO_ADDR
50043: GO 49969
50045: POP
50046: POP
// end ;
50047: LD_VAR 0 3
50051: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50052: LD_INT 0
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
// result := [ ] ;
50061: LD_ADDR_VAR 0 4
50065: PUSH
50066: EMPTY
50067: ST_TO_ADDR
// if x - r < 0 then
50068: LD_VAR 0 1
50072: PUSH
50073: LD_VAR 0 3
50077: MINUS
50078: PUSH
50079: LD_INT 0
50081: LESS
50082: IFFALSE 50094
// min_x := 0 else
50084: LD_ADDR_VAR 0 8
50088: PUSH
50089: LD_INT 0
50091: ST_TO_ADDR
50092: GO 50110
// min_x := x - r ;
50094: LD_ADDR_VAR 0 8
50098: PUSH
50099: LD_VAR 0 1
50103: PUSH
50104: LD_VAR 0 3
50108: MINUS
50109: ST_TO_ADDR
// if y - r < 0 then
50110: LD_VAR 0 2
50114: PUSH
50115: LD_VAR 0 3
50119: MINUS
50120: PUSH
50121: LD_INT 0
50123: LESS
50124: IFFALSE 50136
// min_y := 0 else
50126: LD_ADDR_VAR 0 7
50130: PUSH
50131: LD_INT 0
50133: ST_TO_ADDR
50134: GO 50152
// min_y := y - r ;
50136: LD_ADDR_VAR 0 7
50140: PUSH
50141: LD_VAR 0 2
50145: PUSH
50146: LD_VAR 0 3
50150: MINUS
50151: ST_TO_ADDR
// max_x := x + r ;
50152: LD_ADDR_VAR 0 9
50156: PUSH
50157: LD_VAR 0 1
50161: PUSH
50162: LD_VAR 0 3
50166: PLUS
50167: ST_TO_ADDR
// max_y := y + r ;
50168: LD_ADDR_VAR 0 10
50172: PUSH
50173: LD_VAR 0 2
50177: PUSH
50178: LD_VAR 0 3
50182: PLUS
50183: ST_TO_ADDR
// for _x = min_x to max_x do
50184: LD_ADDR_VAR 0 5
50188: PUSH
50189: DOUBLE
50190: LD_VAR 0 8
50194: DEC
50195: ST_TO_ADDR
50196: LD_VAR 0 9
50200: PUSH
50201: FOR_TO
50202: IFFALSE 50303
// for _y = min_y to max_y do
50204: LD_ADDR_VAR 0 6
50208: PUSH
50209: DOUBLE
50210: LD_VAR 0 7
50214: DEC
50215: ST_TO_ADDR
50216: LD_VAR 0 10
50220: PUSH
50221: FOR_TO
50222: IFFALSE 50299
// begin if not ValidHex ( _x , _y ) then
50224: LD_VAR 0 5
50228: PPUSH
50229: LD_VAR 0 6
50233: PPUSH
50234: CALL_OW 488
50238: NOT
50239: IFFALSE 50243
// continue ;
50241: GO 50221
// if GetResourceTypeXY ( _x , _y ) then
50243: LD_VAR 0 5
50247: PPUSH
50248: LD_VAR 0 6
50252: PPUSH
50253: CALL_OW 283
50257: IFFALSE 50297
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50259: LD_ADDR_VAR 0 4
50263: PUSH
50264: LD_VAR 0 4
50268: PPUSH
50269: LD_VAR 0 4
50273: PUSH
50274: LD_INT 1
50276: PLUS
50277: PPUSH
50278: LD_VAR 0 5
50282: PUSH
50283: LD_VAR 0 6
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PPUSH
50292: CALL_OW 1
50296: ST_TO_ADDR
// end ;
50297: GO 50221
50299: POP
50300: POP
50301: GO 50201
50303: POP
50304: POP
// end ;
50305: LD_VAR 0 4
50309: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50310: LD_INT 0
50312: PPUSH
50313: PPUSH
50314: PPUSH
50315: PPUSH
50316: PPUSH
50317: PPUSH
50318: PPUSH
50319: PPUSH
// if not units then
50320: LD_VAR 0 1
50324: NOT
50325: IFFALSE 50329
// exit ;
50327: GO 50857
// result := UnitFilter ( units , [ f_ok ] ) ;
50329: LD_ADDR_VAR 0 3
50333: PUSH
50334: LD_VAR 0 1
50338: PPUSH
50339: LD_INT 50
50341: PUSH
50342: EMPTY
50343: LIST
50344: PPUSH
50345: CALL_OW 72
50349: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50350: LD_ADDR_VAR 0 8
50354: PUSH
50355: LD_VAR 0 1
50359: PUSH
50360: LD_INT 1
50362: ARRAY
50363: PPUSH
50364: CALL_OW 255
50368: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50369: LD_ADDR_VAR 0 10
50373: PUSH
50374: LD_INT 29
50376: PUSH
50377: LD_INT 91
50379: PUSH
50380: LD_INT 49
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: LIST
50387: ST_TO_ADDR
// if not result then
50388: LD_VAR 0 3
50392: NOT
50393: IFFALSE 50397
// exit ;
50395: GO 50857
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50397: LD_ADDR_VAR 0 5
50401: PUSH
50402: LD_INT 81
50404: PUSH
50405: LD_VAR 0 8
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PPUSH
50414: CALL_OW 69
50418: ST_TO_ADDR
// for i in result do
50419: LD_ADDR_VAR 0 4
50423: PUSH
50424: LD_VAR 0 3
50428: PUSH
50429: FOR_IN
50430: IFFALSE 50855
// begin tag := GetTag ( i ) + 1 ;
50432: LD_ADDR_VAR 0 9
50436: PUSH
50437: LD_VAR 0 4
50441: PPUSH
50442: CALL_OW 110
50446: PUSH
50447: LD_INT 1
50449: PLUS
50450: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50451: LD_ADDR_VAR 0 7
50455: PUSH
50456: LD_VAR 0 4
50460: PPUSH
50461: CALL_OW 250
50465: PPUSH
50466: LD_VAR 0 4
50470: PPUSH
50471: CALL_OW 251
50475: PPUSH
50476: LD_INT 4
50478: PPUSH
50479: CALL 50052 0 3
50483: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50484: LD_VAR 0 4
50488: PPUSH
50489: CALL_OW 247
50493: PUSH
50494: LD_INT 2
50496: EQUAL
50497: PUSH
50498: LD_VAR 0 7
50502: PUSH
50503: LD_INT 2
50505: GREATER
50506: AND
50507: PUSH
50508: LD_VAR 0 4
50512: PPUSH
50513: CALL_OW 264
50517: PUSH
50518: LD_VAR 0 10
50522: IN
50523: NOT
50524: AND
50525: IFFALSE 50564
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50527: LD_VAR 0 4
50531: PPUSH
50532: LD_VAR 0 7
50536: PUSH
50537: LD_INT 1
50539: ARRAY
50540: PUSH
50541: LD_INT 1
50543: ARRAY
50544: PPUSH
50545: LD_VAR 0 7
50549: PUSH
50550: LD_INT 1
50552: ARRAY
50553: PUSH
50554: LD_INT 2
50556: ARRAY
50557: PPUSH
50558: CALL_OW 116
50562: GO 50853
// if path > tag then
50564: LD_VAR 0 2
50568: PUSH
50569: LD_VAR 0 9
50573: GREATER
50574: IFFALSE 50782
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50576: LD_ADDR_VAR 0 6
50580: PUSH
50581: LD_VAR 0 5
50585: PPUSH
50586: LD_INT 91
50588: PUSH
50589: LD_VAR 0 4
50593: PUSH
50594: LD_INT 8
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: LIST
50601: PPUSH
50602: CALL_OW 72
50606: ST_TO_ADDR
// if nearEnemy then
50607: LD_VAR 0 6
50611: IFFALSE 50680
// begin if GetWeapon ( i ) = ru_time_lapser then
50613: LD_VAR 0 4
50617: PPUSH
50618: CALL_OW 264
50622: PUSH
50623: LD_INT 49
50625: EQUAL
50626: IFFALSE 50654
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50628: LD_VAR 0 4
50632: PPUSH
50633: LD_VAR 0 6
50637: PPUSH
50638: LD_VAR 0 4
50642: PPUSH
50643: CALL_OW 74
50647: PPUSH
50648: CALL_OW 112
50652: GO 50678
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50654: LD_VAR 0 4
50658: PPUSH
50659: LD_VAR 0 6
50663: PPUSH
50664: LD_VAR 0 4
50668: PPUSH
50669: CALL_OW 74
50673: PPUSH
50674: CALL 51928 0 2
// end else
50678: GO 50780
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50680: LD_VAR 0 4
50684: PPUSH
50685: LD_VAR 0 2
50689: PUSH
50690: LD_VAR 0 9
50694: ARRAY
50695: PUSH
50696: LD_INT 1
50698: ARRAY
50699: PPUSH
50700: LD_VAR 0 2
50704: PUSH
50705: LD_VAR 0 9
50709: ARRAY
50710: PUSH
50711: LD_INT 2
50713: ARRAY
50714: PPUSH
50715: CALL_OW 297
50719: PUSH
50720: LD_INT 6
50722: GREATER
50723: IFFALSE 50766
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50725: LD_VAR 0 4
50729: PPUSH
50730: LD_VAR 0 2
50734: PUSH
50735: LD_VAR 0 9
50739: ARRAY
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: PPUSH
50745: LD_VAR 0 2
50749: PUSH
50750: LD_VAR 0 9
50754: ARRAY
50755: PUSH
50756: LD_INT 2
50758: ARRAY
50759: PPUSH
50760: CALL_OW 114
50764: GO 50780
// SetTag ( i , tag ) ;
50766: LD_VAR 0 4
50770: PPUSH
50771: LD_VAR 0 9
50775: PPUSH
50776: CALL_OW 109
// end else
50780: GO 50853
// if enemy then
50782: LD_VAR 0 5
50786: IFFALSE 50853
// begin if GetWeapon ( i ) = ru_time_lapser then
50788: LD_VAR 0 4
50792: PPUSH
50793: CALL_OW 264
50797: PUSH
50798: LD_INT 49
50800: EQUAL
50801: IFFALSE 50829
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50803: LD_VAR 0 4
50807: PPUSH
50808: LD_VAR 0 5
50812: PPUSH
50813: LD_VAR 0 4
50817: PPUSH
50818: CALL_OW 74
50822: PPUSH
50823: CALL_OW 112
50827: GO 50853
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50829: LD_VAR 0 4
50833: PPUSH
50834: LD_VAR 0 5
50838: PPUSH
50839: LD_VAR 0 4
50843: PPUSH
50844: CALL_OW 74
50848: PPUSH
50849: CALL 51928 0 2
// end ; end ;
50853: GO 50429
50855: POP
50856: POP
// end ;
50857: LD_VAR 0 3
50861: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50862: LD_INT 0
50864: PPUSH
50865: PPUSH
50866: PPUSH
// if not unit or IsInUnit ( unit ) then
50867: LD_VAR 0 1
50871: NOT
50872: PUSH
50873: LD_VAR 0 1
50877: PPUSH
50878: CALL_OW 310
50882: OR
50883: IFFALSE 50887
// exit ;
50885: GO 50978
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50887: LD_ADDR_VAR 0 4
50891: PUSH
50892: LD_VAR 0 1
50896: PPUSH
50897: CALL_OW 250
50901: PPUSH
50902: LD_VAR 0 2
50906: PPUSH
50907: LD_INT 1
50909: PPUSH
50910: CALL_OW 272
50914: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50915: LD_ADDR_VAR 0 5
50919: PUSH
50920: LD_VAR 0 1
50924: PPUSH
50925: CALL_OW 251
50929: PPUSH
50930: LD_VAR 0 2
50934: PPUSH
50935: LD_INT 1
50937: PPUSH
50938: CALL_OW 273
50942: ST_TO_ADDR
// if ValidHex ( x , y ) then
50943: LD_VAR 0 4
50947: PPUSH
50948: LD_VAR 0 5
50952: PPUSH
50953: CALL_OW 488
50957: IFFALSE 50978
// ComTurnXY ( unit , x , y ) ;
50959: LD_VAR 0 1
50963: PPUSH
50964: LD_VAR 0 4
50968: PPUSH
50969: LD_VAR 0 5
50973: PPUSH
50974: CALL_OW 118
// end ;
50978: LD_VAR 0 3
50982: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50983: LD_INT 0
50985: PPUSH
50986: PPUSH
// result := false ;
50987: LD_ADDR_VAR 0 3
50991: PUSH
50992: LD_INT 0
50994: ST_TO_ADDR
// if not units then
50995: LD_VAR 0 2
50999: NOT
51000: IFFALSE 51004
// exit ;
51002: GO 51049
// for i in units do
51004: LD_ADDR_VAR 0 4
51008: PUSH
51009: LD_VAR 0 2
51013: PUSH
51014: FOR_IN
51015: IFFALSE 51047
// if See ( side , i ) then
51017: LD_VAR 0 1
51021: PPUSH
51022: LD_VAR 0 4
51026: PPUSH
51027: CALL_OW 292
51031: IFFALSE 51045
// begin result := true ;
51033: LD_ADDR_VAR 0 3
51037: PUSH
51038: LD_INT 1
51040: ST_TO_ADDR
// exit ;
51041: POP
51042: POP
51043: GO 51049
// end ;
51045: GO 51014
51047: POP
51048: POP
// end ;
51049: LD_VAR 0 3
51053: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51054: LD_INT 0
51056: PPUSH
51057: PPUSH
51058: PPUSH
51059: PPUSH
// if not unit or not points then
51060: LD_VAR 0 1
51064: NOT
51065: PUSH
51066: LD_VAR 0 2
51070: NOT
51071: OR
51072: IFFALSE 51076
// exit ;
51074: GO 51166
// dist := 99999 ;
51076: LD_ADDR_VAR 0 5
51080: PUSH
51081: LD_INT 99999
51083: ST_TO_ADDR
// for i in points do
51084: LD_ADDR_VAR 0 4
51088: PUSH
51089: LD_VAR 0 2
51093: PUSH
51094: FOR_IN
51095: IFFALSE 51164
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51097: LD_ADDR_VAR 0 6
51101: PUSH
51102: LD_VAR 0 1
51106: PPUSH
51107: LD_VAR 0 4
51111: PUSH
51112: LD_INT 1
51114: ARRAY
51115: PPUSH
51116: LD_VAR 0 4
51120: PUSH
51121: LD_INT 2
51123: ARRAY
51124: PPUSH
51125: CALL_OW 297
51129: ST_TO_ADDR
// if tmpDist < dist then
51130: LD_VAR 0 6
51134: PUSH
51135: LD_VAR 0 5
51139: LESS
51140: IFFALSE 51162
// begin result := i ;
51142: LD_ADDR_VAR 0 3
51146: PUSH
51147: LD_VAR 0 4
51151: ST_TO_ADDR
// dist := tmpDist ;
51152: LD_ADDR_VAR 0 5
51156: PUSH
51157: LD_VAR 0 6
51161: ST_TO_ADDR
// end ; end ;
51162: GO 51094
51164: POP
51165: POP
// end ;
51166: LD_VAR 0 3
51170: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51171: LD_INT 0
51173: PPUSH
// uc_side := side ;
51174: LD_ADDR_OWVAR 20
51178: PUSH
51179: LD_VAR 0 1
51183: ST_TO_ADDR
// uc_nation := 3 ;
51184: LD_ADDR_OWVAR 21
51188: PUSH
51189: LD_INT 3
51191: ST_TO_ADDR
// vc_chassis := 25 ;
51192: LD_ADDR_OWVAR 37
51196: PUSH
51197: LD_INT 25
51199: ST_TO_ADDR
// vc_engine := engine_siberite ;
51200: LD_ADDR_OWVAR 39
51204: PUSH
51205: LD_INT 3
51207: ST_TO_ADDR
// vc_control := control_computer ;
51208: LD_ADDR_OWVAR 38
51212: PUSH
51213: LD_INT 3
51215: ST_TO_ADDR
// vc_weapon := 59 ;
51216: LD_ADDR_OWVAR 40
51220: PUSH
51221: LD_INT 59
51223: ST_TO_ADDR
// result := CreateVehicle ;
51224: LD_ADDR_VAR 0 5
51228: PUSH
51229: CALL_OW 45
51233: ST_TO_ADDR
// SetDir ( result , d ) ;
51234: LD_VAR 0 5
51238: PPUSH
51239: LD_VAR 0 4
51243: PPUSH
51244: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51248: LD_VAR 0 5
51252: PPUSH
51253: LD_VAR 0 2
51257: PPUSH
51258: LD_VAR 0 3
51262: PPUSH
51263: LD_INT 0
51265: PPUSH
51266: CALL_OW 48
// end ;
51270: LD_VAR 0 5
51274: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51275: LD_INT 0
51277: PPUSH
51278: PPUSH
51279: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51280: LD_ADDR_VAR 0 2
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51303: LD_VAR 0 1
51307: NOT
51308: PUSH
51309: LD_VAR 0 1
51313: PPUSH
51314: CALL_OW 264
51318: PUSH
51319: LD_INT 12
51321: PUSH
51322: LD_INT 51
51324: PUSH
51325: LD_INT 32
51327: PUSH
51328: LD_INT 89
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: IN
51337: NOT
51338: OR
51339: IFFALSE 51343
// exit ;
51341: GO 51441
// for i := 1 to 3 do
51343: LD_ADDR_VAR 0 3
51347: PUSH
51348: DOUBLE
51349: LD_INT 1
51351: DEC
51352: ST_TO_ADDR
51353: LD_INT 3
51355: PUSH
51356: FOR_TO
51357: IFFALSE 51439
// begin tmp := GetCargo ( cargo , i ) ;
51359: LD_ADDR_VAR 0 4
51363: PUSH
51364: LD_VAR 0 1
51368: PPUSH
51369: LD_VAR 0 3
51373: PPUSH
51374: CALL_OW 289
51378: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51379: LD_ADDR_VAR 0 2
51383: PUSH
51384: LD_VAR 0 2
51388: PPUSH
51389: LD_VAR 0 3
51393: PPUSH
51394: LD_VAR 0 4
51398: PPUSH
51399: CALL_OW 1
51403: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51404: LD_ADDR_VAR 0 2
51408: PUSH
51409: LD_VAR 0 2
51413: PPUSH
51414: LD_INT 4
51416: PPUSH
51417: LD_VAR 0 2
51421: PUSH
51422: LD_INT 4
51424: ARRAY
51425: PUSH
51426: LD_VAR 0 4
51430: PLUS
51431: PPUSH
51432: CALL_OW 1
51436: ST_TO_ADDR
// end ;
51437: GO 51356
51439: POP
51440: POP
// end ;
51441: LD_VAR 0 2
51445: RET
// export function Length ( array ) ; begin
51446: LD_INT 0
51448: PPUSH
// result := array + 0 ;
51449: LD_ADDR_VAR 0 2
51453: PUSH
51454: LD_VAR 0 1
51458: PUSH
51459: LD_INT 0
51461: PLUS
51462: ST_TO_ADDR
// end ;
51463: LD_VAR 0 2
51467: RET
// export function PrepareArray ( array ) ; begin
51468: LD_INT 0
51470: PPUSH
// result := array diff 0 ;
51471: LD_ADDR_VAR 0 2
51475: PUSH
51476: LD_VAR 0 1
51480: PUSH
51481: LD_INT 0
51483: DIFF
51484: ST_TO_ADDR
// if not result [ 1 ] then
51485: LD_VAR 0 2
51489: PUSH
51490: LD_INT 1
51492: ARRAY
51493: NOT
51494: IFFALSE 51514
// result := Delete ( result , 1 ) ;
51496: LD_ADDR_VAR 0 2
51500: PUSH
51501: LD_VAR 0 2
51505: PPUSH
51506: LD_INT 1
51508: PPUSH
51509: CALL_OW 3
51513: ST_TO_ADDR
// end ;
51514: LD_VAR 0 2
51518: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51519: LD_INT 0
51521: PPUSH
51522: PPUSH
51523: PPUSH
51524: PPUSH
// sibRocketRange := 25 ;
51525: LD_ADDR_VAR 0 6
51529: PUSH
51530: LD_INT 25
51532: ST_TO_ADDR
// result := false ;
51533: LD_ADDR_VAR 0 4
51537: PUSH
51538: LD_INT 0
51540: ST_TO_ADDR
// for i := 0 to 5 do
51541: LD_ADDR_VAR 0 5
51545: PUSH
51546: DOUBLE
51547: LD_INT 0
51549: DEC
51550: ST_TO_ADDR
51551: LD_INT 5
51553: PUSH
51554: FOR_TO
51555: IFFALSE 51622
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51557: LD_VAR 0 1
51561: PPUSH
51562: LD_VAR 0 5
51566: PPUSH
51567: LD_VAR 0 6
51571: PPUSH
51572: CALL_OW 272
51576: PPUSH
51577: LD_VAR 0 2
51581: PPUSH
51582: LD_VAR 0 5
51586: PPUSH
51587: LD_VAR 0 6
51591: PPUSH
51592: CALL_OW 273
51596: PPUSH
51597: LD_VAR 0 3
51601: PPUSH
51602: CALL_OW 309
51606: IFFALSE 51620
// begin result := true ;
51608: LD_ADDR_VAR 0 4
51612: PUSH
51613: LD_INT 1
51615: ST_TO_ADDR
// exit ;
51616: POP
51617: POP
51618: GO 51624
// end ;
51620: GO 51554
51622: POP
51623: POP
// end ;
51624: LD_VAR 0 4
51628: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51629: LD_INT 0
51631: PPUSH
51632: PPUSH
51633: PPUSH
// if btype = b_depot then
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 0
51641: EQUAL
51642: IFFALSE 51654
// begin result := true ;
51644: LD_ADDR_VAR 0 3
51648: PUSH
51649: LD_INT 1
51651: ST_TO_ADDR
// exit ;
51652: GO 51770
// end ; pom := GetBase ( depot ) ;
51654: LD_ADDR_VAR 0 4
51658: PUSH
51659: LD_VAR 0 1
51663: PPUSH
51664: CALL_OW 274
51668: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51669: LD_ADDR_VAR 0 5
51673: PUSH
51674: LD_VAR 0 2
51678: PPUSH
51679: LD_VAR 0 1
51683: PPUSH
51684: CALL_OW 248
51688: PPUSH
51689: CALL_OW 450
51693: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51694: LD_ADDR_VAR 0 3
51698: PUSH
51699: LD_VAR 0 4
51703: PPUSH
51704: LD_INT 1
51706: PPUSH
51707: CALL_OW 275
51711: PUSH
51712: LD_VAR 0 5
51716: PUSH
51717: LD_INT 1
51719: ARRAY
51720: GREATEREQUAL
51721: PUSH
51722: LD_VAR 0 4
51726: PPUSH
51727: LD_INT 2
51729: PPUSH
51730: CALL_OW 275
51734: PUSH
51735: LD_VAR 0 5
51739: PUSH
51740: LD_INT 2
51742: ARRAY
51743: GREATEREQUAL
51744: AND
51745: PUSH
51746: LD_VAR 0 4
51750: PPUSH
51751: LD_INT 3
51753: PPUSH
51754: CALL_OW 275
51758: PUSH
51759: LD_VAR 0 5
51763: PUSH
51764: LD_INT 3
51766: ARRAY
51767: GREATEREQUAL
51768: AND
51769: ST_TO_ADDR
// end ;
51770: LD_VAR 0 3
51774: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
51775: LD_INT 0
51777: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
51778: LD_VAR 0 1
51782: PPUSH
51783: LD_VAR 0 2
51787: PPUSH
51788: LD_INT 0
51790: PPUSH
51791: LD_INT 0
51793: PPUSH
51794: LD_INT 1
51796: PPUSH
51797: LD_INT 0
51799: PPUSH
51800: CALL_OW 587
// end ;
51804: LD_VAR 0 3
51808: RET
// export function CenterOnNow ( unit ) ; begin
51809: LD_INT 0
51811: PPUSH
// result := IsInUnit ( unit ) ;
51812: LD_ADDR_VAR 0 2
51816: PUSH
51817: LD_VAR 0 1
51821: PPUSH
51822: CALL_OW 310
51826: ST_TO_ADDR
// if not result then
51827: LD_VAR 0 2
51831: NOT
51832: IFFALSE 51844
// result := unit ;
51834: LD_ADDR_VAR 0 2
51838: PUSH
51839: LD_VAR 0 1
51843: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
51844: LD_VAR 0 1
51848: PPUSH
51849: CALL_OW 87
// end ;
51853: LD_VAR 0 2
51857: RET
// export function ComMoveHex ( unit , hex ) ; begin
51858: LD_INT 0
51860: PPUSH
// if not hex then
51861: LD_VAR 0 2
51865: NOT
51866: IFFALSE 51870
// exit ;
51868: GO 51923
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
51870: LD_VAR 0 2
51874: PUSH
51875: LD_INT 1
51877: ARRAY
51878: PPUSH
51879: LD_VAR 0 2
51883: PUSH
51884: LD_INT 2
51886: ARRAY
51887: PPUSH
51888: CALL_OW 428
51892: IFFALSE 51896
// exit ;
51894: GO 51923
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
51896: LD_VAR 0 1
51900: PPUSH
51901: LD_VAR 0 2
51905: PUSH
51906: LD_INT 1
51908: ARRAY
51909: PPUSH
51910: LD_VAR 0 2
51914: PUSH
51915: LD_INT 2
51917: ARRAY
51918: PPUSH
51919: CALL_OW 111
// end ;
51923: LD_VAR 0 3
51927: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
51928: LD_INT 0
51930: PPUSH
51931: PPUSH
51932: PPUSH
// if not unit or not enemy then
51933: LD_VAR 0 1
51937: NOT
51938: PUSH
51939: LD_VAR 0 2
51943: NOT
51944: OR
51945: IFFALSE 51949
// exit ;
51947: GO 52073
// x := GetX ( enemy ) ;
51949: LD_ADDR_VAR 0 4
51953: PUSH
51954: LD_VAR 0 2
51958: PPUSH
51959: CALL_OW 250
51963: ST_TO_ADDR
// y := GetY ( enemy ) ;
51964: LD_ADDR_VAR 0 5
51968: PUSH
51969: LD_VAR 0 2
51973: PPUSH
51974: CALL_OW 251
51978: ST_TO_ADDR
// if ValidHex ( x , y ) then
51979: LD_VAR 0 4
51983: PPUSH
51984: LD_VAR 0 5
51988: PPUSH
51989: CALL_OW 488
51993: IFFALSE 52073
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
51995: LD_VAR 0 2
51999: PPUSH
52000: CALL_OW 247
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 2
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: IN
52015: PUSH
52016: LD_VAR 0 1
52020: PPUSH
52021: CALL_OW 255
52025: PPUSH
52026: LD_VAR 0 2
52030: PPUSH
52031: CALL_OW 292
52035: OR
52036: IFFALSE 52054
// ComAttackUnit ( unit , enemy ) else
52038: LD_VAR 0 1
52042: PPUSH
52043: LD_VAR 0 2
52047: PPUSH
52048: CALL_OW 115
52052: GO 52073
// ComAgressiveMove ( unit , x , y ) ;
52054: LD_VAR 0 1
52058: PPUSH
52059: LD_VAR 0 4
52063: PPUSH
52064: LD_VAR 0 5
52068: PPUSH
52069: CALL_OW 114
// end ;
52073: LD_VAR 0 3
52077: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52078: LD_INT 0
52080: PPUSH
52081: PPUSH
52082: PPUSH
// list := AreaToList ( area , 0 ) ;
52083: LD_ADDR_VAR 0 5
52087: PUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: LD_INT 0
52095: PPUSH
52096: CALL_OW 517
52100: ST_TO_ADDR
// if not list then
52101: LD_VAR 0 5
52105: NOT
52106: IFFALSE 52110
// exit ;
52108: GO 52240
// if all then
52110: LD_VAR 0 2
52114: IFFALSE 52202
// begin for i := 1 to list [ 1 ] do
52116: LD_ADDR_VAR 0 4
52120: PUSH
52121: DOUBLE
52122: LD_INT 1
52124: DEC
52125: ST_TO_ADDR
52126: LD_VAR 0 5
52130: PUSH
52131: LD_INT 1
52133: ARRAY
52134: PUSH
52135: FOR_TO
52136: IFFALSE 52198
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52138: LD_ADDR_VAR 0 3
52142: PUSH
52143: LD_VAR 0 3
52147: PPUSH
52148: LD_VAR 0 3
52152: PUSH
52153: LD_INT 1
52155: PLUS
52156: PPUSH
52157: LD_VAR 0 5
52161: PUSH
52162: LD_INT 1
52164: ARRAY
52165: PUSH
52166: LD_VAR 0 4
52170: ARRAY
52171: PUSH
52172: LD_VAR 0 5
52176: PUSH
52177: LD_INT 2
52179: ARRAY
52180: PUSH
52181: LD_VAR 0 4
52185: ARRAY
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PPUSH
52191: CALL_OW 1
52195: ST_TO_ADDR
52196: GO 52135
52198: POP
52199: POP
// exit ;
52200: GO 52240
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52202: LD_ADDR_VAR 0 3
52206: PUSH
52207: LD_VAR 0 5
52211: PUSH
52212: LD_INT 1
52214: ARRAY
52215: PUSH
52216: LD_INT 1
52218: ARRAY
52219: PUSH
52220: LD_VAR 0 5
52224: PUSH
52225: LD_INT 2
52227: ARRAY
52228: PUSH
52229: LD_INT 1
52231: ARRAY
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: EMPTY
52238: LIST
52239: ST_TO_ADDR
// end ;
52240: LD_VAR 0 3
52244: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52245: LD_INT 0
52247: PPUSH
52248: PPUSH
// list := AreaToList ( area , 0 ) ;
52249: LD_ADDR_VAR 0 4
52253: PUSH
52254: LD_VAR 0 1
52258: PPUSH
52259: LD_INT 0
52261: PPUSH
52262: CALL_OW 517
52266: ST_TO_ADDR
// if not list then
52267: LD_VAR 0 4
52271: NOT
52272: IFFALSE 52276
// exit ;
52274: GO 52317
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52276: LD_ADDR_VAR 0 3
52280: PUSH
52281: LD_VAR 0 4
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: PUSH
52290: LD_INT 1
52292: ARRAY
52293: PUSH
52294: LD_VAR 0 4
52298: PUSH
52299: LD_INT 2
52301: ARRAY
52302: PUSH
52303: LD_INT 1
52305: ARRAY
52306: PUSH
52307: LD_VAR 0 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: ST_TO_ADDR
// end ;
52317: LD_VAR 0 3
52321: RET
// export function First ( array ) ; begin
52322: LD_INT 0
52324: PPUSH
// if not array then
52325: LD_VAR 0 1
52329: NOT
52330: IFFALSE 52334
// exit ;
52332: GO 52348
// result := array [ 1 ] ;
52334: LD_ADDR_VAR 0 2
52338: PUSH
52339: LD_VAR 0 1
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: ST_TO_ADDR
// end ;
52348: LD_VAR 0 2
52352: RET
// export function Last ( array ) ; begin
52353: LD_INT 0
52355: PPUSH
// if not array then
52356: LD_VAR 0 1
52360: NOT
52361: IFFALSE 52365
// exit ;
52363: GO 52381
// result := array [ array ] ;
52365: LD_ADDR_VAR 0 2
52369: PUSH
52370: LD_VAR 0 1
52374: PUSH
52375: LD_VAR 0 1
52379: ARRAY
52380: ST_TO_ADDR
// end ;
52381: LD_VAR 0 2
52385: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52386: LD_INT 0
52388: PPUSH
52389: PPUSH
// result := [ ] ;
52390: LD_ADDR_VAR 0 5
52394: PUSH
52395: EMPTY
52396: ST_TO_ADDR
// if not array then
52397: LD_VAR 0 1
52401: NOT
52402: IFFALSE 52406
// exit ;
52404: GO 52518
// for i := 1 to array do
52406: LD_ADDR_VAR 0 6
52410: PUSH
52411: DOUBLE
52412: LD_INT 1
52414: DEC
52415: ST_TO_ADDR
52416: LD_VAR 0 1
52420: PUSH
52421: FOR_TO
52422: IFFALSE 52516
// if array [ i ] [ index ] = value then
52424: LD_VAR 0 1
52428: PUSH
52429: LD_VAR 0 6
52433: ARRAY
52434: PUSH
52435: LD_VAR 0 2
52439: ARRAY
52440: PUSH
52441: LD_VAR 0 3
52445: EQUAL
52446: IFFALSE 52514
// begin if indexColumn then
52448: LD_VAR 0 4
52452: IFFALSE 52488
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52454: LD_ADDR_VAR 0 5
52458: PUSH
52459: LD_VAR 0 5
52463: PPUSH
52464: LD_VAR 0 1
52468: PUSH
52469: LD_VAR 0 6
52473: ARRAY
52474: PUSH
52475: LD_VAR 0 4
52479: ARRAY
52480: PPUSH
52481: CALL 47700 0 2
52485: ST_TO_ADDR
52486: GO 52514
// result := Join ( result , array [ i ] ) ;
52488: LD_ADDR_VAR 0 5
52492: PUSH
52493: LD_VAR 0 5
52497: PPUSH
52498: LD_VAR 0 1
52502: PUSH
52503: LD_VAR 0 6
52507: ARRAY
52508: PPUSH
52509: CALL 47700 0 2
52513: ST_TO_ADDR
// end ;
52514: GO 52421
52516: POP
52517: POP
// end ;
52518: LD_VAR 0 5
52522: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52523: LD_INT 0
52525: PPUSH
// if not vehicles or not parkingPoint then
52526: LD_VAR 0 1
52530: NOT
52531: PUSH
52532: LD_VAR 0 2
52536: NOT
52537: OR
52538: IFFALSE 52542
// exit ;
52540: GO 52640
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52542: LD_ADDR_VAR 0 1
52546: PUSH
52547: LD_VAR 0 1
52551: PPUSH
52552: LD_INT 50
52554: PUSH
52555: EMPTY
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: PUSH
52561: LD_INT 92
52563: PUSH
52564: LD_VAR 0 2
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: PUSH
52573: LD_VAR 0 2
52577: PUSH
52578: LD_INT 2
52580: ARRAY
52581: PUSH
52582: LD_INT 8
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PPUSH
52599: CALL_OW 72
52603: ST_TO_ADDR
// if not vehicles then
52604: LD_VAR 0 1
52608: NOT
52609: IFFALSE 52613
// exit ;
52611: GO 52640
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52613: LD_VAR 0 1
52617: PPUSH
52618: LD_VAR 0 2
52622: PUSH
52623: LD_INT 1
52625: ARRAY
52626: PPUSH
52627: LD_VAR 0 2
52631: PUSH
52632: LD_INT 2
52634: ARRAY
52635: PPUSH
52636: CALL_OW 111
// end ;
52640: LD_VAR 0 3
52644: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52645: LD_INT 0
52647: PPUSH
52648: PPUSH
52649: PPUSH
// if not side or not area then
52650: LD_VAR 0 1
52654: NOT
52655: PUSH
52656: LD_VAR 0 2
52660: NOT
52661: OR
52662: IFFALSE 52666
// exit ;
52664: GO 52785
// tmp := AreaToList ( area , 0 ) ;
52666: LD_ADDR_VAR 0 5
52670: PUSH
52671: LD_VAR 0 2
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: CALL_OW 517
52683: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52684: LD_ADDR_VAR 0 4
52688: PUSH
52689: DOUBLE
52690: LD_INT 1
52692: DEC
52693: ST_TO_ADDR
52694: LD_VAR 0 5
52698: PUSH
52699: LD_INT 1
52701: ARRAY
52702: PUSH
52703: FOR_TO
52704: IFFALSE 52783
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52706: LD_VAR 0 5
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PUSH
52715: LD_VAR 0 4
52719: ARRAY
52720: PPUSH
52721: LD_VAR 0 5
52725: PUSH
52726: LD_INT 2
52728: ARRAY
52729: PUSH
52730: LD_VAR 0 4
52734: ARRAY
52735: PPUSH
52736: CALL_OW 351
52740: IFFALSE 52781
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52742: LD_VAR 0 5
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PUSH
52751: LD_VAR 0 4
52755: ARRAY
52756: PPUSH
52757: LD_VAR 0 5
52761: PUSH
52762: LD_INT 2
52764: ARRAY
52765: PUSH
52766: LD_VAR 0 4
52770: ARRAY
52771: PPUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 244
// end ;
52781: GO 52703
52783: POP
52784: POP
// end ; end_of_file
52785: LD_VAR 0 3
52789: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
52790: LD_VAR 0 1
52794: PUSH
52795: LD_INT 200
52797: DOUBLE
52798: GREATEREQUAL
52799: IFFALSE 52807
52801: LD_INT 299
52803: DOUBLE
52804: LESSEQUAL
52805: IFTRUE 52809
52807: GO 52841
52809: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
52810: LD_VAR 0 1
52814: PPUSH
52815: LD_VAR 0 2
52819: PPUSH
52820: LD_VAR 0 3
52824: PPUSH
52825: LD_VAR 0 4
52829: PPUSH
52830: LD_VAR 0 5
52834: PPUSH
52835: CALL 53618 0 5
52839: GO 52918
52841: LD_INT 300
52843: DOUBLE
52844: GREATEREQUAL
52845: IFFALSE 52853
52847: LD_INT 399
52849: DOUBLE
52850: LESSEQUAL
52851: IFTRUE 52855
52853: GO 52917
52855: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
52856: LD_VAR 0 1
52860: PPUSH
52861: LD_VAR 0 2
52865: PPUSH
52866: LD_VAR 0 3
52870: PPUSH
52871: LD_VAR 0 4
52875: PPUSH
52876: LD_VAR 0 5
52880: PPUSH
52881: LD_VAR 0 6
52885: PPUSH
52886: LD_VAR 0 7
52890: PPUSH
52891: LD_VAR 0 8
52895: PPUSH
52896: LD_VAR 0 9
52900: PPUSH
52901: LD_VAR 0 10
52905: PPUSH
52906: LD_VAR 0 11
52910: PPUSH
52911: CALL 60545 0 11
52915: GO 52918
52917: POP
// end ;
52918: PPOPN 11
52920: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
52921: LD_VAR 0 1
52925: PPUSH
52926: LD_VAR 0 2
52930: PPUSH
52931: LD_VAR 0 3
52935: PPUSH
52936: LD_VAR 0 4
52940: PPUSH
52941: LD_VAR 0 5
52945: PPUSH
52946: CALL 53003 0 5
// end ; end_of_file
52950: PPOPN 5
52952: END
// export function SOS_UnitDestroyed ( un ) ; begin
52953: LD_INT 0
52955: PPUSH
// ComRadiation ( un ) ;
52956: LD_VAR 0 1
52960: PPUSH
52961: CALL 54022 0 1
// end ;
52965: LD_VAR 0 2
52969: RET
// export function SOS_UnitKamikazed ( un ) ; begin
52970: LD_INT 0
52972: PPUSH
// ComRadiation ( un ) ;
52973: LD_VAR 0 1
52977: PPUSH
52978: CALL 54022 0 1
// end ;
52982: LD_VAR 0 2
52986: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
52987: LD_INT 0
52989: PPUSH
// end ;
52990: LD_VAR 0 4
52994: RET
// export function SOS_Command ( cmd ) ; begin
52995: LD_INT 0
52997: PPUSH
// end ;
52998: LD_VAR 0 2
53002: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53003: LD_INT 0
53005: PPUSH
// end ;
53006: LD_VAR 0 6
53010: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53011: LD_INT 0
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
// if not vehicle or not factory then
53017: LD_VAR 0 1
53021: NOT
53022: PUSH
53023: LD_VAR 0 2
53027: NOT
53028: OR
53029: IFFALSE 53033
// exit ;
53031: GO 53613
// if not factoryWaypoints then
53033: LD_EXP 61
53037: NOT
53038: IFFALSE 53042
// exit ;
53040: GO 53613
// for i := 1 to Count ( factoryWaypoints ) do
53042: LD_ADDR_VAR 0 4
53046: PUSH
53047: DOUBLE
53048: LD_INT 1
53050: DEC
53051: ST_TO_ADDR
53052: LD_EXP 61
53056: PPUSH
53057: CALL 12091 0 1
53061: PUSH
53062: FOR_TO
53063: IFFALSE 53611
// if factoryWaypoints [ i ] [ 2 ] = factory then
53065: LD_EXP 61
53069: PUSH
53070: LD_VAR 0 4
53074: ARRAY
53075: PUSH
53076: LD_INT 2
53078: ARRAY
53079: PUSH
53080: LD_VAR 0 2
53084: EQUAL
53085: IFFALSE 53609
// begin if GetControl ( vehicle ) = control_manual then
53087: LD_VAR 0 1
53091: PPUSH
53092: CALL_OW 263
53096: PUSH
53097: LD_INT 1
53099: EQUAL
53100: IFFALSE 53462
// begin driver := IsDrivenBy ( vehicle ) ;
53102: LD_ADDR_VAR 0 5
53106: PUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 311
53116: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53117: LD_VAR 0 5
53121: PUSH
53122: LD_EXP 62
53126: IN
53127: PUSH
53128: LD_VAR 0 1
53132: PUSH
53133: LD_EXP 62
53137: IN
53138: OR
53139: IFFALSE 53145
// exit ;
53141: POP
53142: POP
53143: GO 53613
// if not HasTask ( driver ) then
53145: LD_VAR 0 5
53149: PPUSH
53150: CALL_OW 314
53154: NOT
53155: IFFALSE 53460
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53157: LD_ADDR_EXP 62
53161: PUSH
53162: LD_EXP 62
53166: PPUSH
53167: LD_VAR 0 5
53171: PPUSH
53172: CALL 47700 0 2
53176: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53177: LD_ADDR_EXP 62
53181: PUSH
53182: LD_EXP 62
53186: PPUSH
53187: LD_VAR 0 1
53191: PPUSH
53192: CALL 47700 0 2
53196: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53197: LD_ADDR_VAR 0 6
53201: PUSH
53202: LD_EXP 61
53206: PUSH
53207: LD_VAR 0 4
53211: ARRAY
53212: PUSH
53213: LD_INT 3
53215: ARRAY
53216: PPUSH
53217: LD_EXP 61
53221: PUSH
53222: LD_VAR 0 4
53226: ARRAY
53227: PUSH
53228: LD_INT 4
53230: ARRAY
53231: PPUSH
53232: CALL_OW 428
53236: ST_TO_ADDR
// if hex then
53237: LD_VAR 0 6
53241: IFFALSE 53259
// ComMoveUnit ( driver , hex ) else
53243: LD_VAR 0 5
53247: PPUSH
53248: LD_VAR 0 6
53252: PPUSH
53253: CALL_OW 112
53257: GO 53343
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53259: LD_VAR 0 1
53263: PPUSH
53264: LD_EXP 61
53268: PUSH
53269: LD_VAR 0 4
53273: ARRAY
53274: PUSH
53275: LD_INT 3
53277: ARRAY
53278: PPUSH
53279: LD_EXP 61
53283: PUSH
53284: LD_VAR 0 4
53288: ARRAY
53289: PUSH
53290: LD_INT 4
53292: ARRAY
53293: PPUSH
53294: CALL_OW 297
53298: PUSH
53299: LD_INT 0
53301: GREATER
53302: IFFALSE 53343
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53304: LD_VAR 0 5
53308: PPUSH
53309: LD_EXP 61
53313: PUSH
53314: LD_VAR 0 4
53318: ARRAY
53319: PUSH
53320: LD_INT 3
53322: ARRAY
53323: PPUSH
53324: LD_EXP 61
53328: PUSH
53329: LD_VAR 0 4
53333: ARRAY
53334: PUSH
53335: LD_INT 4
53337: ARRAY
53338: PPUSH
53339: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53343: LD_VAR 0 5
53347: PPUSH
53348: CALL_OW 181
// if Multiplayer then
53352: LD_OWVAR 4
53356: IFFALSE 53405
// begin repeat wait ( 10 ) ;
53358: LD_INT 10
53360: PPUSH
53361: CALL_OW 67
// until not IsInUnit ( driver ) ;
53365: LD_VAR 0 5
53369: PPUSH
53370: CALL_OW 310
53374: NOT
53375: IFFALSE 53358
// if not HasTask ( driver ) then
53377: LD_VAR 0 5
53381: PPUSH
53382: CALL_OW 314
53386: NOT
53387: IFFALSE 53403
// ComEnterUnit ( driver , factory ) ;
53389: LD_VAR 0 5
53393: PPUSH
53394: LD_VAR 0 2
53398: PPUSH
53399: CALL_OW 120
// end else
53403: GO 53419
// AddComEnterUnit ( driver , factory ) ;
53405: LD_VAR 0 5
53409: PPUSH
53410: LD_VAR 0 2
53414: PPUSH
53415: CALL_OW 180
// wait ( 0 0$1 ) ;
53419: LD_INT 35
53421: PPUSH
53422: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53426: LD_ADDR_EXP 62
53430: PUSH
53431: LD_EXP 62
53435: PUSH
53436: LD_VAR 0 5
53440: DIFF
53441: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53442: LD_ADDR_EXP 62
53446: PUSH
53447: LD_EXP 62
53451: PUSH
53452: LD_VAR 0 1
53456: DIFF
53457: ST_TO_ADDR
// break ;
53458: GO 53611
// end ; end else
53460: GO 53609
// if GetControl ( vehicle ) = control_remote then
53462: LD_VAR 0 1
53466: PPUSH
53467: CALL_OW 263
53471: PUSH
53472: LD_INT 2
53474: EQUAL
53475: IFFALSE 53561
// begin wait ( 0 0$2 ) ;
53477: LD_INT 70
53479: PPUSH
53480: CALL_OW 67
// repeat wait ( 10 ) ;
53484: LD_INT 10
53486: PPUSH
53487: CALL_OW 67
// Connect ( vehicle ) ;
53491: LD_VAR 0 1
53495: PPUSH
53496: CALL 18297 0 1
// until IsControledBy ( vehicle ) ;
53500: LD_VAR 0 1
53504: PPUSH
53505: CALL_OW 312
53509: IFFALSE 53484
// wait ( 10 ) ;
53511: LD_INT 10
53513: PPUSH
53514: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53518: LD_VAR 0 1
53522: PPUSH
53523: LD_EXP 61
53527: PUSH
53528: LD_VAR 0 4
53532: ARRAY
53533: PUSH
53534: LD_INT 3
53536: ARRAY
53537: PPUSH
53538: LD_EXP 61
53542: PUSH
53543: LD_VAR 0 4
53547: ARRAY
53548: PUSH
53549: LD_INT 4
53551: ARRAY
53552: PPUSH
53553: CALL_OW 111
// break ;
53557: GO 53611
// end else
53559: GO 53609
// begin wait ( 0 0$3 ) ;
53561: LD_INT 105
53563: PPUSH
53564: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53568: LD_VAR 0 1
53572: PPUSH
53573: LD_EXP 61
53577: PUSH
53578: LD_VAR 0 4
53582: ARRAY
53583: PUSH
53584: LD_INT 3
53586: ARRAY
53587: PPUSH
53588: LD_EXP 61
53592: PUSH
53593: LD_VAR 0 4
53597: ARRAY
53598: PUSH
53599: LD_INT 4
53601: ARRAY
53602: PPUSH
53603: CALL_OW 111
// break ;
53607: GO 53611
// end ; end ;
53609: GO 53062
53611: POP
53612: POP
// end ;
53613: LD_VAR 0 3
53617: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
53618: LD_INT 0
53620: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
53621: LD_VAR 0 1
53625: PUSH
53626: LD_INT 250
53628: EQUAL
53629: PUSH
53630: LD_VAR 0 2
53634: PPUSH
53635: CALL_OW 264
53639: PUSH
53640: LD_INT 81
53642: EQUAL
53643: AND
53644: IFFALSE 53665
// MinerPlaceMine ( unit , x , y ) ;
53646: LD_VAR 0 2
53650: PPUSH
53651: LD_VAR 0 4
53655: PPUSH
53656: LD_VAR 0 5
53660: PPUSH
53661: CALL 56757 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
53665: LD_VAR 0 1
53669: PUSH
53670: LD_INT 251
53672: EQUAL
53673: PUSH
53674: LD_VAR 0 2
53678: PPUSH
53679: CALL_OW 264
53683: PUSH
53684: LD_INT 81
53686: EQUAL
53687: AND
53688: IFFALSE 53709
// MinerDetonateMine ( unit , x , y ) ;
53690: LD_VAR 0 2
53694: PPUSH
53695: LD_VAR 0 4
53699: PPUSH
53700: LD_VAR 0 5
53704: PPUSH
53705: CALL 57032 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
53709: LD_VAR 0 1
53713: PUSH
53714: LD_INT 252
53716: EQUAL
53717: PUSH
53718: LD_VAR 0 2
53722: PPUSH
53723: CALL_OW 264
53727: PUSH
53728: LD_INT 81
53730: EQUAL
53731: AND
53732: IFFALSE 53753
// MinerCreateMinefield ( unit , x , y ) ;
53734: LD_VAR 0 2
53738: PPUSH
53739: LD_VAR 0 4
53743: PPUSH
53744: LD_VAR 0 5
53748: PPUSH
53749: CALL 57449 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
53753: LD_VAR 0 1
53757: PUSH
53758: LD_INT 253
53760: EQUAL
53761: PUSH
53762: LD_VAR 0 2
53766: PPUSH
53767: CALL_OW 257
53771: PUSH
53772: LD_INT 5
53774: EQUAL
53775: AND
53776: IFFALSE 53797
// ComBinocular ( unit , x , y ) ;
53778: LD_VAR 0 2
53782: PPUSH
53783: LD_VAR 0 4
53787: PPUSH
53788: LD_VAR 0 5
53792: PPUSH
53793: CALL 57818 0 3
// if selectedUnit then
53797: LD_VAR 0 3
53801: IFFALSE 53857
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
53803: LD_VAR 0 1
53807: PUSH
53808: LD_INT 254
53810: EQUAL
53811: PUSH
53812: LD_VAR 0 2
53816: PPUSH
53817: CALL_OW 264
53821: PUSH
53822: LD_INT 99
53824: EQUAL
53825: AND
53826: PUSH
53827: LD_VAR 0 3
53831: PPUSH
53832: CALL_OW 263
53836: PUSH
53837: LD_INT 3
53839: EQUAL
53840: AND
53841: IFFALSE 53857
// HackDestroyVehicle ( unit , selectedUnit ) ;
53843: LD_VAR 0 2
53847: PPUSH
53848: LD_VAR 0 3
53852: PPUSH
53853: CALL 56121 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
53857: LD_VAR 0 1
53861: PUSH
53862: LD_INT 255
53864: EQUAL
53865: PUSH
53866: LD_VAR 0 2
53870: PPUSH
53871: CALL_OW 264
53875: PUSH
53876: LD_INT 14
53878: PUSH
53879: LD_INT 53
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: IN
53886: AND
53887: PUSH
53888: LD_VAR 0 4
53892: PPUSH
53893: LD_VAR 0 5
53897: PPUSH
53898: CALL_OW 488
53902: AND
53903: IFFALSE 53927
// CutTreeXYR ( unit , x , y , 12 ) ;
53905: LD_VAR 0 2
53909: PPUSH
53910: LD_VAR 0 4
53914: PPUSH
53915: LD_VAR 0 5
53919: PPUSH
53920: LD_INT 12
53922: PPUSH
53923: CALL 54118 0 4
// if cmd = 256 then
53927: LD_VAR 0 1
53931: PUSH
53932: LD_INT 256
53934: EQUAL
53935: IFFALSE 53956
// SetFactoryWaypoint ( unit , x , y ) ;
53937: LD_VAR 0 2
53941: PPUSH
53942: LD_VAR 0 4
53946: PPUSH
53947: LD_VAR 0 5
53951: PPUSH
53952: CALL 60553 0 3
// if cmd = 257 then
53956: LD_VAR 0 1
53960: PUSH
53961: LD_INT 257
53963: EQUAL
53964: IFFALSE 53985
// SetWarehouseGatheringPoint ( unit , x , y ) ;
53966: LD_VAR 0 2
53970: PPUSH
53971: LD_VAR 0 4
53975: PPUSH
53976: LD_VAR 0 5
53980: PPUSH
53981: CALL 61043 0 3
// if cmd = 258 then
53985: LD_VAR 0 1
53989: PUSH
53990: LD_INT 258
53992: EQUAL
53993: IFFALSE 54017
// BurnTreeXYR ( unit , x , y , 8 ) ;
53995: LD_VAR 0 2
53999: PPUSH
54000: LD_VAR 0 4
54004: PPUSH
54005: LD_VAR 0 5
54009: PPUSH
54010: LD_INT 8
54012: PPUSH
54013: CALL 54512 0 4
// end ;
54017: LD_VAR 0 6
54021: RET
// export function ComRadiation ( un ) ; var eff ; begin
54022: LD_INT 0
54024: PPUSH
54025: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54026: LD_VAR 0 1
54030: PPUSH
54031: CALL_OW 264
54035: PUSH
54036: LD_INT 91
54038: NONEQUAL
54039: IFFALSE 54043
// exit ;
54041: GO 54113
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54043: LD_INT 68
54045: PPUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 255
54055: PPUSH
54056: CALL_OW 321
54060: PUSH
54061: LD_INT 2
54063: EQUAL
54064: IFFALSE 54076
// eff := 50 else
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: LD_INT 50
54073: ST_TO_ADDR
54074: GO 54084
// eff := 25 ;
54076: LD_ADDR_VAR 0 3
54080: PUSH
54081: LD_INT 25
54083: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54084: LD_VAR 0 1
54088: PPUSH
54089: CALL_OW 250
54093: PPUSH
54094: LD_VAR 0 1
54098: PPUSH
54099: CALL_OW 251
54103: PPUSH
54104: LD_VAR 0 3
54108: PPUSH
54109: CALL_OW 495
// end ;
54113: LD_VAR 0 2
54117: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54118: LD_INT 0
54120: PPUSH
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54129: LD_VAR 0 1
54133: PPUSH
54134: CALL_OW 302
54138: NOT
54139: PUSH
54140: LD_VAR 0 2
54144: PPUSH
54145: LD_VAR 0 3
54149: PPUSH
54150: CALL_OW 488
54154: NOT
54155: OR
54156: PUSH
54157: LD_VAR 0 4
54161: NOT
54162: OR
54163: IFFALSE 54167
// exit ;
54165: GO 54507
// list := [ ] ;
54167: LD_ADDR_VAR 0 13
54171: PUSH
54172: EMPTY
54173: ST_TO_ADDR
// if x - r < 0 then
54174: LD_VAR 0 2
54178: PUSH
54179: LD_VAR 0 4
54183: MINUS
54184: PUSH
54185: LD_INT 0
54187: LESS
54188: IFFALSE 54200
// min_x := 0 else
54190: LD_ADDR_VAR 0 7
54194: PUSH
54195: LD_INT 0
54197: ST_TO_ADDR
54198: GO 54216
// min_x := x - r ;
54200: LD_ADDR_VAR 0 7
54204: PUSH
54205: LD_VAR 0 2
54209: PUSH
54210: LD_VAR 0 4
54214: MINUS
54215: ST_TO_ADDR
// if y - r < 0 then
54216: LD_VAR 0 3
54220: PUSH
54221: LD_VAR 0 4
54225: MINUS
54226: PUSH
54227: LD_INT 0
54229: LESS
54230: IFFALSE 54242
// min_y := 0 else
54232: LD_ADDR_VAR 0 8
54236: PUSH
54237: LD_INT 0
54239: ST_TO_ADDR
54240: GO 54258
// min_y := y - r ;
54242: LD_ADDR_VAR 0 8
54246: PUSH
54247: LD_VAR 0 3
54251: PUSH
54252: LD_VAR 0 4
54256: MINUS
54257: ST_TO_ADDR
// max_x := x + r ;
54258: LD_ADDR_VAR 0 9
54262: PUSH
54263: LD_VAR 0 2
54267: PUSH
54268: LD_VAR 0 4
54272: PLUS
54273: ST_TO_ADDR
// max_y := y + r ;
54274: LD_ADDR_VAR 0 10
54278: PUSH
54279: LD_VAR 0 3
54283: PUSH
54284: LD_VAR 0 4
54288: PLUS
54289: ST_TO_ADDR
// for _x = min_x to max_x do
54290: LD_ADDR_VAR 0 11
54294: PUSH
54295: DOUBLE
54296: LD_VAR 0 7
54300: DEC
54301: ST_TO_ADDR
54302: LD_VAR 0 9
54306: PUSH
54307: FOR_TO
54308: IFFALSE 54425
// for _y = min_y to max_y do
54310: LD_ADDR_VAR 0 12
54314: PUSH
54315: DOUBLE
54316: LD_VAR 0 8
54320: DEC
54321: ST_TO_ADDR
54322: LD_VAR 0 10
54326: PUSH
54327: FOR_TO
54328: IFFALSE 54421
// begin if not ValidHex ( _x , _y ) then
54330: LD_VAR 0 11
54334: PPUSH
54335: LD_VAR 0 12
54339: PPUSH
54340: CALL_OW 488
54344: NOT
54345: IFFALSE 54349
// continue ;
54347: GO 54327
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54349: LD_VAR 0 11
54353: PPUSH
54354: LD_VAR 0 12
54358: PPUSH
54359: CALL_OW 351
54363: PUSH
54364: LD_VAR 0 11
54368: PPUSH
54369: LD_VAR 0 12
54373: PPUSH
54374: CALL_OW 554
54378: AND
54379: IFFALSE 54419
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54381: LD_ADDR_VAR 0 13
54385: PUSH
54386: LD_VAR 0 13
54390: PPUSH
54391: LD_VAR 0 13
54395: PUSH
54396: LD_INT 1
54398: PLUS
54399: PPUSH
54400: LD_VAR 0 11
54404: PUSH
54405: LD_VAR 0 12
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PPUSH
54414: CALL_OW 2
54418: ST_TO_ADDR
// end ;
54419: GO 54327
54421: POP
54422: POP
54423: GO 54307
54425: POP
54426: POP
// if not list then
54427: LD_VAR 0 13
54431: NOT
54432: IFFALSE 54436
// exit ;
54434: GO 54507
// for i in list do
54436: LD_ADDR_VAR 0 6
54440: PUSH
54441: LD_VAR 0 13
54445: PUSH
54446: FOR_IN
54447: IFFALSE 54505
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54449: LD_VAR 0 1
54453: PPUSH
54454: LD_STRING M
54456: PUSH
54457: LD_VAR 0 6
54461: PUSH
54462: LD_INT 1
54464: ARRAY
54465: PUSH
54466: LD_VAR 0 6
54470: PUSH
54471: LD_INT 2
54473: ARRAY
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: PUSH
54496: EMPTY
54497: LIST
54498: PPUSH
54499: CALL_OW 447
54503: GO 54446
54505: POP
54506: POP
// end ;
54507: LD_VAR 0 5
54511: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
54512: LD_INT 0
54514: PPUSH
54515: PPUSH
54516: PPUSH
54517: PPUSH
54518: PPUSH
54519: PPUSH
54520: PPUSH
54521: PPUSH
54522: PPUSH
54523: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
54524: LD_VAR 0 1
54528: PPUSH
54529: CALL_OW 302
54533: NOT
54534: PUSH
54535: LD_VAR 0 2
54539: PPUSH
54540: LD_VAR 0 3
54544: PPUSH
54545: CALL_OW 488
54549: NOT
54550: OR
54551: PUSH
54552: LD_VAR 0 4
54556: NOT
54557: OR
54558: IFFALSE 54562
// exit ;
54560: GO 55075
// list := [ ] ;
54562: LD_ADDR_VAR 0 13
54566: PUSH
54567: EMPTY
54568: ST_TO_ADDR
// if x - r < 0 then
54569: LD_VAR 0 2
54573: PUSH
54574: LD_VAR 0 4
54578: MINUS
54579: PUSH
54580: LD_INT 0
54582: LESS
54583: IFFALSE 54595
// min_x := 0 else
54585: LD_ADDR_VAR 0 7
54589: PUSH
54590: LD_INT 0
54592: ST_TO_ADDR
54593: GO 54611
// min_x := x - r ;
54595: LD_ADDR_VAR 0 7
54599: PUSH
54600: LD_VAR 0 2
54604: PUSH
54605: LD_VAR 0 4
54609: MINUS
54610: ST_TO_ADDR
// if y - r < 0 then
54611: LD_VAR 0 3
54615: PUSH
54616: LD_VAR 0 4
54620: MINUS
54621: PUSH
54622: LD_INT 0
54624: LESS
54625: IFFALSE 54637
// min_y := 0 else
54627: LD_ADDR_VAR 0 8
54631: PUSH
54632: LD_INT 0
54634: ST_TO_ADDR
54635: GO 54653
// min_y := y - r ;
54637: LD_ADDR_VAR 0 8
54641: PUSH
54642: LD_VAR 0 3
54646: PUSH
54647: LD_VAR 0 4
54651: MINUS
54652: ST_TO_ADDR
// max_x := x + r ;
54653: LD_ADDR_VAR 0 9
54657: PUSH
54658: LD_VAR 0 2
54662: PUSH
54663: LD_VAR 0 4
54667: PLUS
54668: ST_TO_ADDR
// max_y := y + r ;
54669: LD_ADDR_VAR 0 10
54673: PUSH
54674: LD_VAR 0 3
54678: PUSH
54679: LD_VAR 0 4
54683: PLUS
54684: ST_TO_ADDR
// for _x = min_x to max_x do
54685: LD_ADDR_VAR 0 11
54689: PUSH
54690: DOUBLE
54691: LD_VAR 0 7
54695: DEC
54696: ST_TO_ADDR
54697: LD_VAR 0 9
54701: PUSH
54702: FOR_TO
54703: IFFALSE 54820
// for _y = min_y to max_y do
54705: LD_ADDR_VAR 0 12
54709: PUSH
54710: DOUBLE
54711: LD_VAR 0 8
54715: DEC
54716: ST_TO_ADDR
54717: LD_VAR 0 10
54721: PUSH
54722: FOR_TO
54723: IFFALSE 54816
// begin if not ValidHex ( _x , _y ) then
54725: LD_VAR 0 11
54729: PPUSH
54730: LD_VAR 0 12
54734: PPUSH
54735: CALL_OW 488
54739: NOT
54740: IFFALSE 54744
// continue ;
54742: GO 54722
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54744: LD_VAR 0 11
54748: PPUSH
54749: LD_VAR 0 12
54753: PPUSH
54754: CALL_OW 351
54758: PUSH
54759: LD_VAR 0 11
54763: PPUSH
54764: LD_VAR 0 12
54768: PPUSH
54769: CALL_OW 554
54773: AND
54774: IFFALSE 54814
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54776: LD_ADDR_VAR 0 13
54780: PUSH
54781: LD_VAR 0 13
54785: PPUSH
54786: LD_VAR 0 13
54790: PUSH
54791: LD_INT 1
54793: PLUS
54794: PPUSH
54795: LD_VAR 0 11
54799: PUSH
54800: LD_VAR 0 12
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PPUSH
54809: CALL_OW 2
54813: ST_TO_ADDR
// end ;
54814: GO 54722
54816: POP
54817: POP
54818: GO 54702
54820: POP
54821: POP
// if not list then
54822: LD_VAR 0 13
54826: NOT
54827: IFFALSE 54831
// exit ;
54829: GO 55075
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
54831: LD_ADDR_VAR 0 13
54835: PUSH
54836: LD_VAR 0 1
54840: PPUSH
54841: LD_VAR 0 13
54845: PPUSH
54846: LD_INT 1
54848: PPUSH
54849: LD_INT 1
54851: PPUSH
54852: CALL 15439 0 4
54856: ST_TO_ADDR
// ComStop ( flame ) ;
54857: LD_VAR 0 1
54861: PPUSH
54862: CALL_OW 141
// for i in list do
54866: LD_ADDR_VAR 0 6
54870: PUSH
54871: LD_VAR 0 13
54875: PUSH
54876: FOR_IN
54877: IFFALSE 54908
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
54879: LD_VAR 0 1
54883: PPUSH
54884: LD_VAR 0 6
54888: PUSH
54889: LD_INT 1
54891: ARRAY
54892: PPUSH
54893: LD_VAR 0 6
54897: PUSH
54898: LD_INT 2
54900: ARRAY
54901: PPUSH
54902: CALL_OW 176
54906: GO 54876
54908: POP
54909: POP
// repeat wait ( 0 0$1 ) ;
54910: LD_INT 35
54912: PPUSH
54913: CALL_OW 67
// task := GetTaskList ( flame ) ;
54917: LD_ADDR_VAR 0 14
54921: PUSH
54922: LD_VAR 0 1
54926: PPUSH
54927: CALL_OW 437
54931: ST_TO_ADDR
// if not task then
54932: LD_VAR 0 14
54936: NOT
54937: IFFALSE 54941
// exit ;
54939: GO 55075
// if task [ 1 ] [ 1 ] <> | then
54941: LD_VAR 0 14
54945: PUSH
54946: LD_INT 1
54948: ARRAY
54949: PUSH
54950: LD_INT 1
54952: ARRAY
54953: PUSH
54954: LD_STRING |
54956: NONEQUAL
54957: IFFALSE 54961
// exit ;
54959: GO 55075
// _x := task [ 1 ] [ 2 ] ;
54961: LD_ADDR_VAR 0 11
54965: PUSH
54966: LD_VAR 0 14
54970: PUSH
54971: LD_INT 1
54973: ARRAY
54974: PUSH
54975: LD_INT 2
54977: ARRAY
54978: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
54979: LD_ADDR_VAR 0 12
54983: PUSH
54984: LD_VAR 0 14
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: PUSH
54993: LD_INT 3
54995: ARRAY
54996: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
54997: LD_VAR 0 11
55001: PPUSH
55002: LD_VAR 0 12
55006: PPUSH
55007: CALL_OW 351
55011: NOT
55012: PUSH
55013: LD_VAR 0 11
55017: PPUSH
55018: LD_VAR 0 12
55022: PPUSH
55023: CALL_OW 554
55027: NOT
55028: OR
55029: IFFALSE 55063
// begin task := Delete ( task , 1 ) ;
55031: LD_ADDR_VAR 0 14
55035: PUSH
55036: LD_VAR 0 14
55040: PPUSH
55041: LD_INT 1
55043: PPUSH
55044: CALL_OW 3
55048: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55049: LD_VAR 0 1
55053: PPUSH
55054: LD_VAR 0 14
55058: PPUSH
55059: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55063: LD_VAR 0 1
55067: PPUSH
55068: CALL_OW 314
55072: NOT
55073: IFFALSE 54910
// end ;
55075: LD_VAR 0 5
55079: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55080: LD_EXP 50
55084: NOT
55085: IFFALSE 55135
55087: GO 55089
55089: DISABLE
// begin initHack := true ;
55090: LD_ADDR_EXP 50
55094: PUSH
55095: LD_INT 1
55097: ST_TO_ADDR
// hackTanks := [ ] ;
55098: LD_ADDR_EXP 51
55102: PUSH
55103: EMPTY
55104: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55105: LD_ADDR_EXP 52
55109: PUSH
55110: EMPTY
55111: ST_TO_ADDR
// hackLimit := 3 ;
55112: LD_ADDR_EXP 53
55116: PUSH
55117: LD_INT 3
55119: ST_TO_ADDR
// hackDist := 12 ;
55120: LD_ADDR_EXP 54
55124: PUSH
55125: LD_INT 12
55127: ST_TO_ADDR
// hackCounter := [ ] ;
55128: LD_ADDR_EXP 55
55132: PUSH
55133: EMPTY
55134: ST_TO_ADDR
// end ;
55135: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55136: LD_EXP 50
55140: PUSH
55141: LD_INT 34
55143: PUSH
55144: LD_INT 99
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PPUSH
55151: CALL_OW 69
55155: AND
55156: IFFALSE 55409
55158: GO 55160
55160: DISABLE
55161: LD_INT 0
55163: PPUSH
55164: PPUSH
// begin enable ;
55165: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55166: LD_ADDR_VAR 0 1
55170: PUSH
55171: LD_INT 34
55173: PUSH
55174: LD_INT 99
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PPUSH
55181: CALL_OW 69
55185: PUSH
55186: FOR_IN
55187: IFFALSE 55407
// begin if not i in hackTanks then
55189: LD_VAR 0 1
55193: PUSH
55194: LD_EXP 51
55198: IN
55199: NOT
55200: IFFALSE 55283
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55202: LD_ADDR_EXP 51
55206: PUSH
55207: LD_EXP 51
55211: PPUSH
55212: LD_EXP 51
55216: PUSH
55217: LD_INT 1
55219: PLUS
55220: PPUSH
55221: LD_VAR 0 1
55225: PPUSH
55226: CALL_OW 1
55230: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55231: LD_ADDR_EXP 52
55235: PUSH
55236: LD_EXP 52
55240: PPUSH
55241: LD_EXP 52
55245: PUSH
55246: LD_INT 1
55248: PLUS
55249: PPUSH
55250: EMPTY
55251: PPUSH
55252: CALL_OW 1
55256: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55257: LD_ADDR_EXP 55
55261: PUSH
55262: LD_EXP 55
55266: PPUSH
55267: LD_EXP 55
55271: PUSH
55272: LD_INT 1
55274: PLUS
55275: PPUSH
55276: EMPTY
55277: PPUSH
55278: CALL_OW 1
55282: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55283: LD_VAR 0 1
55287: PPUSH
55288: CALL_OW 302
55292: NOT
55293: IFFALSE 55306
// begin HackUnlinkAll ( i ) ;
55295: LD_VAR 0 1
55299: PPUSH
55300: CALL 55412 0 1
// continue ;
55304: GO 55186
// end ; HackCheckCapturedStatus ( i ) ;
55306: LD_VAR 0 1
55310: PPUSH
55311: CALL 55855 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55315: LD_ADDR_VAR 0 2
55319: PUSH
55320: LD_INT 81
55322: PUSH
55323: LD_VAR 0 1
55327: PPUSH
55328: CALL_OW 255
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 33
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 91
55349: PUSH
55350: LD_VAR 0 1
55354: PUSH
55355: LD_EXP 54
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 50
55367: PUSH
55368: EMPTY
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: PPUSH
55377: CALL_OW 69
55381: ST_TO_ADDR
// if not tmp then
55382: LD_VAR 0 2
55386: NOT
55387: IFFALSE 55391
// continue ;
55389: GO 55186
// HackLink ( i , tmp ) ;
55391: LD_VAR 0 1
55395: PPUSH
55396: LD_VAR 0 2
55400: PPUSH
55401: CALL 55548 0 2
// end ;
55405: GO 55186
55407: POP
55408: POP
// end ;
55409: PPOPN 2
55411: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55412: LD_INT 0
55414: PPUSH
55415: PPUSH
55416: PPUSH
// if not hack in hackTanks then
55417: LD_VAR 0 1
55421: PUSH
55422: LD_EXP 51
55426: IN
55427: NOT
55428: IFFALSE 55432
// exit ;
55430: GO 55543
// index := GetElementIndex ( hackTanks , hack ) ;
55432: LD_ADDR_VAR 0 4
55436: PUSH
55437: LD_EXP 51
55441: PPUSH
55442: LD_VAR 0 1
55446: PPUSH
55447: CALL 14736 0 2
55451: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55452: LD_EXP 52
55456: PUSH
55457: LD_VAR 0 4
55461: ARRAY
55462: IFFALSE 55543
// begin for i in hackTanksCaptured [ index ] do
55464: LD_ADDR_VAR 0 3
55468: PUSH
55469: LD_EXP 52
55473: PUSH
55474: LD_VAR 0 4
55478: ARRAY
55479: PUSH
55480: FOR_IN
55481: IFFALSE 55507
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55483: LD_VAR 0 3
55487: PUSH
55488: LD_INT 1
55490: ARRAY
55491: PPUSH
55492: LD_VAR 0 3
55496: PUSH
55497: LD_INT 2
55499: ARRAY
55500: PPUSH
55501: CALL_OW 235
55505: GO 55480
55507: POP
55508: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
55509: LD_ADDR_EXP 52
55513: PUSH
55514: LD_EXP 52
55518: PPUSH
55519: LD_VAR 0 4
55523: PPUSH
55524: EMPTY
55525: PPUSH
55526: CALL_OW 1
55530: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
55531: LD_VAR 0 1
55535: PPUSH
55536: LD_INT 0
55538: PPUSH
55539: CALL_OW 505
// end ; end ;
55543: LD_VAR 0 2
55547: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
55548: LD_INT 0
55550: PPUSH
55551: PPUSH
55552: PPUSH
// if not hack in hackTanks or not vehicles then
55553: LD_VAR 0 1
55557: PUSH
55558: LD_EXP 51
55562: IN
55563: NOT
55564: PUSH
55565: LD_VAR 0 2
55569: NOT
55570: OR
55571: IFFALSE 55575
// exit ;
55573: GO 55850
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
55575: LD_ADDR_VAR 0 2
55579: PUSH
55580: LD_VAR 0 1
55584: PPUSH
55585: LD_VAR 0 2
55589: PPUSH
55590: LD_INT 1
55592: PPUSH
55593: LD_INT 1
55595: PPUSH
55596: CALL 15386 0 4
55600: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
55601: LD_ADDR_VAR 0 5
55605: PUSH
55606: LD_EXP 51
55610: PPUSH
55611: LD_VAR 0 1
55615: PPUSH
55616: CALL 14736 0 2
55620: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
55621: LD_EXP 52
55625: PUSH
55626: LD_VAR 0 5
55630: ARRAY
55631: PUSH
55632: LD_EXP 53
55636: LESS
55637: IFFALSE 55826
// begin for i := 1 to vehicles do
55639: LD_ADDR_VAR 0 4
55643: PUSH
55644: DOUBLE
55645: LD_INT 1
55647: DEC
55648: ST_TO_ADDR
55649: LD_VAR 0 2
55653: PUSH
55654: FOR_TO
55655: IFFALSE 55824
// begin if hackTanksCaptured [ index ] = hackLimit then
55657: LD_EXP 52
55661: PUSH
55662: LD_VAR 0 5
55666: ARRAY
55667: PUSH
55668: LD_EXP 53
55672: EQUAL
55673: IFFALSE 55677
// break ;
55675: GO 55824
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
55677: LD_ADDR_EXP 55
55681: PUSH
55682: LD_EXP 55
55686: PPUSH
55687: LD_VAR 0 5
55691: PPUSH
55692: LD_EXP 55
55696: PUSH
55697: LD_VAR 0 5
55701: ARRAY
55702: PUSH
55703: LD_INT 1
55705: PLUS
55706: PPUSH
55707: CALL_OW 1
55711: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
55712: LD_ADDR_EXP 52
55716: PUSH
55717: LD_EXP 52
55721: PPUSH
55722: LD_VAR 0 5
55726: PUSH
55727: LD_EXP 52
55731: PUSH
55732: LD_VAR 0 5
55736: ARRAY
55737: PUSH
55738: LD_INT 1
55740: PLUS
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PPUSH
55746: LD_VAR 0 2
55750: PUSH
55751: LD_VAR 0 4
55755: ARRAY
55756: PUSH
55757: LD_VAR 0 2
55761: PUSH
55762: LD_VAR 0 4
55766: ARRAY
55767: PPUSH
55768: CALL_OW 255
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PPUSH
55777: CALL 14951 0 3
55781: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
55782: LD_VAR 0 2
55786: PUSH
55787: LD_VAR 0 4
55791: ARRAY
55792: PPUSH
55793: LD_VAR 0 1
55797: PPUSH
55798: CALL_OW 255
55802: PPUSH
55803: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
55807: LD_VAR 0 2
55811: PUSH
55812: LD_VAR 0 4
55816: ARRAY
55817: PPUSH
55818: CALL_OW 141
// end ;
55822: GO 55654
55824: POP
55825: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
55826: LD_VAR 0 1
55830: PPUSH
55831: LD_EXP 52
55835: PUSH
55836: LD_VAR 0 5
55840: ARRAY
55841: PUSH
55842: LD_INT 0
55844: PLUS
55845: PPUSH
55846: CALL_OW 505
// end ;
55850: LD_VAR 0 3
55854: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
55855: LD_INT 0
55857: PPUSH
55858: PPUSH
55859: PPUSH
55860: PPUSH
// if not hack in hackTanks then
55861: LD_VAR 0 1
55865: PUSH
55866: LD_EXP 51
55870: IN
55871: NOT
55872: IFFALSE 55876
// exit ;
55874: GO 56116
// index := GetElementIndex ( hackTanks , hack ) ;
55876: LD_ADDR_VAR 0 4
55880: PUSH
55881: LD_EXP 51
55885: PPUSH
55886: LD_VAR 0 1
55890: PPUSH
55891: CALL 14736 0 2
55895: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
55896: LD_ADDR_VAR 0 3
55900: PUSH
55901: DOUBLE
55902: LD_EXP 52
55906: PUSH
55907: LD_VAR 0 4
55911: ARRAY
55912: INC
55913: ST_TO_ADDR
55914: LD_INT 1
55916: PUSH
55917: FOR_DOWNTO
55918: IFFALSE 56090
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
55920: LD_ADDR_VAR 0 5
55924: PUSH
55925: LD_EXP 52
55929: PUSH
55930: LD_VAR 0 4
55934: ARRAY
55935: PUSH
55936: LD_VAR 0 3
55940: ARRAY
55941: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
55942: LD_VAR 0 5
55946: PUSH
55947: LD_INT 1
55949: ARRAY
55950: PPUSH
55951: CALL_OW 302
55955: NOT
55956: PUSH
55957: LD_VAR 0 5
55961: PUSH
55962: LD_INT 1
55964: ARRAY
55965: PPUSH
55966: CALL_OW 255
55970: PUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: CALL_OW 255
55980: NONEQUAL
55981: OR
55982: IFFALSE 56088
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
55984: LD_VAR 0 5
55988: PUSH
55989: LD_INT 1
55991: ARRAY
55992: PPUSH
55993: CALL_OW 305
55997: PUSH
55998: LD_VAR 0 5
56002: PUSH
56003: LD_INT 1
56005: ARRAY
56006: PPUSH
56007: CALL_OW 255
56011: PUSH
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 255
56021: EQUAL
56022: AND
56023: IFFALSE 56047
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56025: LD_VAR 0 5
56029: PUSH
56030: LD_INT 1
56032: ARRAY
56033: PPUSH
56034: LD_VAR 0 5
56038: PUSH
56039: LD_INT 2
56041: ARRAY
56042: PPUSH
56043: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56047: LD_ADDR_EXP 52
56051: PUSH
56052: LD_EXP 52
56056: PPUSH
56057: LD_VAR 0 4
56061: PPUSH
56062: LD_EXP 52
56066: PUSH
56067: LD_VAR 0 4
56071: ARRAY
56072: PPUSH
56073: LD_VAR 0 3
56077: PPUSH
56078: CALL_OW 3
56082: PPUSH
56083: CALL_OW 1
56087: ST_TO_ADDR
// end ; end ;
56088: GO 55917
56090: POP
56091: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56092: LD_VAR 0 1
56096: PPUSH
56097: LD_EXP 52
56101: PUSH
56102: LD_VAR 0 4
56106: ARRAY
56107: PUSH
56108: LD_INT 0
56110: PLUS
56111: PPUSH
56112: CALL_OW 505
// end ;
56116: LD_VAR 0 2
56120: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56121: LD_INT 0
56123: PPUSH
56124: PPUSH
56125: PPUSH
56126: PPUSH
// if not hack in hackTanks then
56127: LD_VAR 0 1
56131: PUSH
56132: LD_EXP 51
56136: IN
56137: NOT
56138: IFFALSE 56142
// exit ;
56140: GO 56227
// index := GetElementIndex ( hackTanks , hack ) ;
56142: LD_ADDR_VAR 0 5
56146: PUSH
56147: LD_EXP 51
56151: PPUSH
56152: LD_VAR 0 1
56156: PPUSH
56157: CALL 14736 0 2
56161: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56162: LD_ADDR_VAR 0 4
56166: PUSH
56167: DOUBLE
56168: LD_INT 1
56170: DEC
56171: ST_TO_ADDR
56172: LD_EXP 52
56176: PUSH
56177: LD_VAR 0 5
56181: ARRAY
56182: PUSH
56183: FOR_TO
56184: IFFALSE 56225
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56186: LD_EXP 52
56190: PUSH
56191: LD_VAR 0 5
56195: ARRAY
56196: PUSH
56197: LD_VAR 0 4
56201: ARRAY
56202: PUSH
56203: LD_INT 1
56205: ARRAY
56206: PUSH
56207: LD_VAR 0 2
56211: EQUAL
56212: IFFALSE 56223
// KillUnit ( vehicle ) ;
56214: LD_VAR 0 2
56218: PPUSH
56219: CALL_OW 66
56223: GO 56183
56225: POP
56226: POP
// end ;
56227: LD_VAR 0 3
56231: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56232: LD_EXP 56
56236: NOT
56237: IFFALSE 56272
56239: GO 56241
56241: DISABLE
// begin initMiner := true ;
56242: LD_ADDR_EXP 56
56246: PUSH
56247: LD_INT 1
56249: ST_TO_ADDR
// minersList := [ ] ;
56250: LD_ADDR_EXP 57
56254: PUSH
56255: EMPTY
56256: ST_TO_ADDR
// minerMinesList := [ ] ;
56257: LD_ADDR_EXP 58
56261: PUSH
56262: EMPTY
56263: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56264: LD_ADDR_EXP 59
56268: PUSH
56269: LD_INT 5
56271: ST_TO_ADDR
// end ;
56272: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56273: LD_EXP 56
56277: PUSH
56278: LD_INT 34
56280: PUSH
56281: LD_INT 81
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PPUSH
56288: CALL_OW 69
56292: AND
56293: IFFALSE 56754
56295: GO 56297
56297: DISABLE
56298: LD_INT 0
56300: PPUSH
56301: PPUSH
56302: PPUSH
56303: PPUSH
// begin enable ;
56304: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56305: LD_ADDR_VAR 0 1
56309: PUSH
56310: LD_INT 34
56312: PUSH
56313: LD_INT 81
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PPUSH
56320: CALL_OW 69
56324: PUSH
56325: FOR_IN
56326: IFFALSE 56398
// begin if not i in minersList then
56328: LD_VAR 0 1
56332: PUSH
56333: LD_EXP 57
56337: IN
56338: NOT
56339: IFFALSE 56396
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56341: LD_ADDR_EXP 57
56345: PUSH
56346: LD_EXP 57
56350: PPUSH
56351: LD_EXP 57
56355: PUSH
56356: LD_INT 1
56358: PLUS
56359: PPUSH
56360: LD_VAR 0 1
56364: PPUSH
56365: CALL_OW 1
56369: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56370: LD_ADDR_EXP 58
56374: PUSH
56375: LD_EXP 58
56379: PPUSH
56380: LD_EXP 58
56384: PUSH
56385: LD_INT 1
56387: PLUS
56388: PPUSH
56389: EMPTY
56390: PPUSH
56391: CALL_OW 1
56395: ST_TO_ADDR
// end end ;
56396: GO 56325
56398: POP
56399: POP
// for i := minerMinesList downto 1 do
56400: LD_ADDR_VAR 0 1
56404: PUSH
56405: DOUBLE
56406: LD_EXP 58
56410: INC
56411: ST_TO_ADDR
56412: LD_INT 1
56414: PUSH
56415: FOR_DOWNTO
56416: IFFALSE 56752
// begin if IsLive ( minersList [ i ] ) then
56418: LD_EXP 57
56422: PUSH
56423: LD_VAR 0 1
56427: ARRAY
56428: PPUSH
56429: CALL_OW 300
56433: IFFALSE 56461
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56435: LD_EXP 57
56439: PUSH
56440: LD_VAR 0 1
56444: ARRAY
56445: PPUSH
56446: LD_EXP 58
56450: PUSH
56451: LD_VAR 0 1
56455: ARRAY
56456: PPUSH
56457: CALL_OW 505
// if not minerMinesList [ i ] then
56461: LD_EXP 58
56465: PUSH
56466: LD_VAR 0 1
56470: ARRAY
56471: NOT
56472: IFFALSE 56476
// continue ;
56474: GO 56415
// for j := minerMinesList [ i ] downto 1 do
56476: LD_ADDR_VAR 0 2
56480: PUSH
56481: DOUBLE
56482: LD_EXP 58
56486: PUSH
56487: LD_VAR 0 1
56491: ARRAY
56492: INC
56493: ST_TO_ADDR
56494: LD_INT 1
56496: PUSH
56497: FOR_DOWNTO
56498: IFFALSE 56748
// begin side := GetSide ( minersList [ i ] ) ;
56500: LD_ADDR_VAR 0 3
56504: PUSH
56505: LD_EXP 57
56509: PUSH
56510: LD_VAR 0 1
56514: ARRAY
56515: PPUSH
56516: CALL_OW 255
56520: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
56521: LD_ADDR_VAR 0 4
56525: PUSH
56526: LD_EXP 58
56530: PUSH
56531: LD_VAR 0 1
56535: ARRAY
56536: PUSH
56537: LD_VAR 0 2
56541: ARRAY
56542: PUSH
56543: LD_INT 1
56545: ARRAY
56546: PPUSH
56547: LD_EXP 58
56551: PUSH
56552: LD_VAR 0 1
56556: ARRAY
56557: PUSH
56558: LD_VAR 0 2
56562: ARRAY
56563: PUSH
56564: LD_INT 2
56566: ARRAY
56567: PPUSH
56568: CALL_OW 428
56572: ST_TO_ADDR
// if not tmp then
56573: LD_VAR 0 4
56577: NOT
56578: IFFALSE 56582
// continue ;
56580: GO 56497
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
56582: LD_VAR 0 4
56586: PUSH
56587: LD_INT 81
56589: PUSH
56590: LD_VAR 0 3
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PPUSH
56599: CALL_OW 69
56603: IN
56604: PUSH
56605: LD_EXP 58
56609: PUSH
56610: LD_VAR 0 1
56614: ARRAY
56615: PUSH
56616: LD_VAR 0 2
56620: ARRAY
56621: PUSH
56622: LD_INT 1
56624: ARRAY
56625: PPUSH
56626: LD_EXP 58
56630: PUSH
56631: LD_VAR 0 1
56635: ARRAY
56636: PUSH
56637: LD_VAR 0 2
56641: ARRAY
56642: PUSH
56643: LD_INT 2
56645: ARRAY
56646: PPUSH
56647: CALL_OW 458
56651: AND
56652: IFFALSE 56746
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
56654: LD_EXP 58
56658: PUSH
56659: LD_VAR 0 1
56663: ARRAY
56664: PUSH
56665: LD_VAR 0 2
56669: ARRAY
56670: PUSH
56671: LD_INT 1
56673: ARRAY
56674: PPUSH
56675: LD_EXP 58
56679: PUSH
56680: LD_VAR 0 1
56684: ARRAY
56685: PUSH
56686: LD_VAR 0 2
56690: ARRAY
56691: PUSH
56692: LD_INT 2
56694: ARRAY
56695: PPUSH
56696: LD_VAR 0 3
56700: PPUSH
56701: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
56705: LD_ADDR_EXP 58
56709: PUSH
56710: LD_EXP 58
56714: PPUSH
56715: LD_VAR 0 1
56719: PPUSH
56720: LD_EXP 58
56724: PUSH
56725: LD_VAR 0 1
56729: ARRAY
56730: PPUSH
56731: LD_VAR 0 2
56735: PPUSH
56736: CALL_OW 3
56740: PPUSH
56741: CALL_OW 1
56745: ST_TO_ADDR
// end ; end ;
56746: GO 56497
56748: POP
56749: POP
// end ;
56750: GO 56415
56752: POP
56753: POP
// end ;
56754: PPOPN 4
56756: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
56757: LD_INT 0
56759: PPUSH
56760: PPUSH
// result := false ;
56761: LD_ADDR_VAR 0 4
56765: PUSH
56766: LD_INT 0
56768: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
56769: LD_VAR 0 1
56773: PPUSH
56774: CALL_OW 264
56778: PUSH
56779: LD_INT 81
56781: EQUAL
56782: NOT
56783: IFFALSE 56787
// exit ;
56785: GO 57027
// index := GetElementIndex ( minersList , unit ) ;
56787: LD_ADDR_VAR 0 5
56791: PUSH
56792: LD_EXP 57
56796: PPUSH
56797: LD_VAR 0 1
56801: PPUSH
56802: CALL 14736 0 2
56806: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
56807: LD_EXP 58
56811: PUSH
56812: LD_VAR 0 5
56816: ARRAY
56817: PUSH
56818: LD_EXP 59
56822: GREATEREQUAL
56823: IFFALSE 56827
// exit ;
56825: GO 57027
// ComMoveXY ( unit , x , y ) ;
56827: LD_VAR 0 1
56831: PPUSH
56832: LD_VAR 0 2
56836: PPUSH
56837: LD_VAR 0 3
56841: PPUSH
56842: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
56846: LD_INT 35
56848: PPUSH
56849: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
56853: LD_VAR 0 1
56857: PPUSH
56858: LD_VAR 0 2
56862: PPUSH
56863: LD_VAR 0 3
56867: PPUSH
56868: CALL 46497 0 3
56872: NOT
56873: PUSH
56874: LD_VAR 0 1
56878: PPUSH
56879: CALL_OW 314
56883: AND
56884: IFFALSE 56888
// exit ;
56886: GO 57027
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
56888: LD_VAR 0 2
56892: PPUSH
56893: LD_VAR 0 3
56897: PPUSH
56898: CALL_OW 428
56902: PUSH
56903: LD_VAR 0 1
56907: EQUAL
56908: PUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: CALL_OW 314
56918: NOT
56919: AND
56920: IFFALSE 56846
// PlaySoundXY ( x , y , PlantMine ) ;
56922: LD_VAR 0 2
56926: PPUSH
56927: LD_VAR 0 3
56931: PPUSH
56932: LD_STRING PlantMine
56934: PPUSH
56935: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
56939: LD_VAR 0 2
56943: PPUSH
56944: LD_VAR 0 3
56948: PPUSH
56949: LD_VAR 0 1
56953: PPUSH
56954: CALL_OW 255
56958: PPUSH
56959: LD_INT 0
56961: PPUSH
56962: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
56966: LD_ADDR_EXP 58
56970: PUSH
56971: LD_EXP 58
56975: PPUSH
56976: LD_VAR 0 5
56980: PUSH
56981: LD_EXP 58
56985: PUSH
56986: LD_VAR 0 5
56990: ARRAY
56991: PUSH
56992: LD_INT 1
56994: PLUS
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PPUSH
57000: LD_VAR 0 2
57004: PUSH
57005: LD_VAR 0 3
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PPUSH
57014: CALL 14951 0 3
57018: ST_TO_ADDR
// result := true ;
57019: LD_ADDR_VAR 0 4
57023: PUSH
57024: LD_INT 1
57026: ST_TO_ADDR
// end ;
57027: LD_VAR 0 4
57031: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57032: LD_INT 0
57034: PPUSH
57035: PPUSH
57036: PPUSH
// if not unit in minersList then
57037: LD_VAR 0 1
57041: PUSH
57042: LD_EXP 57
57046: IN
57047: NOT
57048: IFFALSE 57052
// exit ;
57050: GO 57444
// index := GetElementIndex ( minersList , unit ) ;
57052: LD_ADDR_VAR 0 6
57056: PUSH
57057: LD_EXP 57
57061: PPUSH
57062: LD_VAR 0 1
57066: PPUSH
57067: CALL 14736 0 2
57071: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57072: LD_ADDR_VAR 0 5
57076: PUSH
57077: DOUBLE
57078: LD_EXP 58
57082: PUSH
57083: LD_VAR 0 6
57087: ARRAY
57088: INC
57089: ST_TO_ADDR
57090: LD_INT 1
57092: PUSH
57093: FOR_DOWNTO
57094: IFFALSE 57255
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57096: LD_EXP 58
57100: PUSH
57101: LD_VAR 0 6
57105: ARRAY
57106: PUSH
57107: LD_VAR 0 5
57111: ARRAY
57112: PUSH
57113: LD_INT 1
57115: ARRAY
57116: PUSH
57117: LD_VAR 0 2
57121: EQUAL
57122: PUSH
57123: LD_EXP 58
57127: PUSH
57128: LD_VAR 0 6
57132: ARRAY
57133: PUSH
57134: LD_VAR 0 5
57138: ARRAY
57139: PUSH
57140: LD_INT 2
57142: ARRAY
57143: PUSH
57144: LD_VAR 0 3
57148: EQUAL
57149: AND
57150: IFFALSE 57253
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57152: LD_EXP 58
57156: PUSH
57157: LD_VAR 0 6
57161: ARRAY
57162: PUSH
57163: LD_VAR 0 5
57167: ARRAY
57168: PUSH
57169: LD_INT 1
57171: ARRAY
57172: PPUSH
57173: LD_EXP 58
57177: PUSH
57178: LD_VAR 0 6
57182: ARRAY
57183: PUSH
57184: LD_VAR 0 5
57188: ARRAY
57189: PUSH
57190: LD_INT 2
57192: ARRAY
57193: PPUSH
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL_OW 255
57203: PPUSH
57204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57208: LD_ADDR_EXP 58
57212: PUSH
57213: LD_EXP 58
57217: PPUSH
57218: LD_VAR 0 6
57222: PPUSH
57223: LD_EXP 58
57227: PUSH
57228: LD_VAR 0 6
57232: ARRAY
57233: PPUSH
57234: LD_VAR 0 5
57238: PPUSH
57239: CALL_OW 3
57243: PPUSH
57244: CALL_OW 1
57248: ST_TO_ADDR
// exit ;
57249: POP
57250: POP
57251: GO 57444
// end ; end ;
57253: GO 57093
57255: POP
57256: POP
// for i := minerMinesList [ index ] downto 1 do
57257: LD_ADDR_VAR 0 5
57261: PUSH
57262: DOUBLE
57263: LD_EXP 58
57267: PUSH
57268: LD_VAR 0 6
57272: ARRAY
57273: INC
57274: ST_TO_ADDR
57275: LD_INT 1
57277: PUSH
57278: FOR_DOWNTO
57279: IFFALSE 57442
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57281: LD_EXP 58
57285: PUSH
57286: LD_VAR 0 6
57290: ARRAY
57291: PUSH
57292: LD_VAR 0 5
57296: ARRAY
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: PPUSH
57302: LD_EXP 58
57306: PUSH
57307: LD_VAR 0 6
57311: ARRAY
57312: PUSH
57313: LD_VAR 0 5
57317: ARRAY
57318: PUSH
57319: LD_INT 2
57321: ARRAY
57322: PPUSH
57323: LD_VAR 0 2
57327: PPUSH
57328: LD_VAR 0 3
57332: PPUSH
57333: CALL_OW 298
57337: PUSH
57338: LD_INT 6
57340: LESS
57341: IFFALSE 57440
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57343: LD_EXP 58
57347: PUSH
57348: LD_VAR 0 6
57352: ARRAY
57353: PUSH
57354: LD_VAR 0 5
57358: ARRAY
57359: PUSH
57360: LD_INT 1
57362: ARRAY
57363: PPUSH
57364: LD_EXP 58
57368: PUSH
57369: LD_VAR 0 6
57373: ARRAY
57374: PUSH
57375: LD_VAR 0 5
57379: ARRAY
57380: PUSH
57381: LD_INT 2
57383: ARRAY
57384: PPUSH
57385: LD_VAR 0 1
57389: PPUSH
57390: CALL_OW 255
57394: PPUSH
57395: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57399: LD_ADDR_EXP 58
57403: PUSH
57404: LD_EXP 58
57408: PPUSH
57409: LD_VAR 0 6
57413: PPUSH
57414: LD_EXP 58
57418: PUSH
57419: LD_VAR 0 6
57423: ARRAY
57424: PPUSH
57425: LD_VAR 0 5
57429: PPUSH
57430: CALL_OW 3
57434: PPUSH
57435: CALL_OW 1
57439: ST_TO_ADDR
// end ; end ;
57440: GO 57278
57442: POP
57443: POP
// end ;
57444: LD_VAR 0 4
57448: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57449: LD_INT 0
57451: PPUSH
57452: PPUSH
57453: PPUSH
57454: PPUSH
57455: PPUSH
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57460: LD_VAR 0 1
57464: PPUSH
57465: CALL_OW 264
57469: PUSH
57470: LD_INT 81
57472: EQUAL
57473: NOT
57474: PUSH
57475: LD_VAR 0 1
57479: PUSH
57480: LD_EXP 57
57484: IN
57485: NOT
57486: OR
57487: IFFALSE 57491
// exit ;
57489: GO 57813
// index := GetElementIndex ( minersList , unit ) ;
57491: LD_ADDR_VAR 0 6
57495: PUSH
57496: LD_EXP 57
57500: PPUSH
57501: LD_VAR 0 1
57505: PPUSH
57506: CALL 14736 0 2
57510: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
57511: LD_ADDR_VAR 0 8
57515: PUSH
57516: LD_EXP 59
57520: PUSH
57521: LD_EXP 58
57525: PUSH
57526: LD_VAR 0 6
57530: ARRAY
57531: MINUS
57532: ST_TO_ADDR
// if not minesFreeAmount then
57533: LD_VAR 0 8
57537: NOT
57538: IFFALSE 57542
// exit ;
57540: GO 57813
// tmp := [ ] ;
57542: LD_ADDR_VAR 0 7
57546: PUSH
57547: EMPTY
57548: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
57549: LD_ADDR_VAR 0 5
57553: PUSH
57554: DOUBLE
57555: LD_INT 1
57557: DEC
57558: ST_TO_ADDR
57559: LD_VAR 0 8
57563: PUSH
57564: FOR_TO
57565: IFFALSE 57760
// begin _d := rand ( 0 , 5 ) ;
57567: LD_ADDR_VAR 0 11
57571: PUSH
57572: LD_INT 0
57574: PPUSH
57575: LD_INT 5
57577: PPUSH
57578: CALL_OW 12
57582: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
57583: LD_ADDR_VAR 0 12
57587: PUSH
57588: LD_INT 2
57590: PPUSH
57591: LD_INT 6
57593: PPUSH
57594: CALL_OW 12
57598: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
57599: LD_ADDR_VAR 0 9
57603: PUSH
57604: LD_VAR 0 2
57608: PPUSH
57609: LD_VAR 0 11
57613: PPUSH
57614: LD_VAR 0 12
57618: PPUSH
57619: CALL_OW 272
57623: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
57624: LD_ADDR_VAR 0 10
57628: PUSH
57629: LD_VAR 0 3
57633: PPUSH
57634: LD_VAR 0 11
57638: PPUSH
57639: LD_VAR 0 12
57643: PPUSH
57644: CALL_OW 273
57648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
57649: LD_VAR 0 9
57653: PPUSH
57654: LD_VAR 0 10
57658: PPUSH
57659: CALL_OW 488
57663: PUSH
57664: LD_VAR 0 9
57668: PUSH
57669: LD_VAR 0 10
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_VAR 0 7
57682: IN
57683: NOT
57684: AND
57685: PUSH
57686: LD_VAR 0 9
57690: PPUSH
57691: LD_VAR 0 10
57695: PPUSH
57696: CALL_OW 458
57700: NOT
57701: AND
57702: IFFALSE 57744
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
57704: LD_ADDR_VAR 0 7
57708: PUSH
57709: LD_VAR 0 7
57713: PPUSH
57714: LD_VAR 0 7
57718: PUSH
57719: LD_INT 1
57721: PLUS
57722: PPUSH
57723: LD_VAR 0 9
57727: PUSH
57728: LD_VAR 0 10
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PPUSH
57737: CALL_OW 1
57741: ST_TO_ADDR
57742: GO 57758
// i := i - 1 ;
57744: LD_ADDR_VAR 0 5
57748: PUSH
57749: LD_VAR 0 5
57753: PUSH
57754: LD_INT 1
57756: MINUS
57757: ST_TO_ADDR
// end ;
57758: GO 57564
57760: POP
57761: POP
// for i in tmp do
57762: LD_ADDR_VAR 0 5
57766: PUSH
57767: LD_VAR 0 7
57771: PUSH
57772: FOR_IN
57773: IFFALSE 57811
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
57775: LD_VAR 0 1
57779: PPUSH
57780: LD_VAR 0 5
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PPUSH
57789: LD_VAR 0 5
57793: PUSH
57794: LD_INT 2
57796: ARRAY
57797: PPUSH
57798: CALL 56757 0 3
57802: NOT
57803: IFFALSE 57809
// exit ;
57805: POP
57806: POP
57807: GO 57813
57809: GO 57772
57811: POP
57812: POP
// end ;
57813: LD_VAR 0 4
57817: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
57818: LD_INT 0
57820: PPUSH
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
57828: PPUSH
// if GetClass ( unit ) <> class_sniper then
57829: LD_VAR 0 1
57833: PPUSH
57834: CALL_OW 257
57838: PUSH
57839: LD_INT 5
57841: NONEQUAL
57842: IFFALSE 57846
// exit ;
57844: GO 58312
// dist := 8 ;
57846: LD_ADDR_VAR 0 5
57850: PUSH
57851: LD_INT 8
57853: ST_TO_ADDR
// viewRange := 12 ;
57854: LD_ADDR_VAR 0 8
57858: PUSH
57859: LD_INT 12
57861: ST_TO_ADDR
// side := GetSide ( unit ) ;
57862: LD_ADDR_VAR 0 6
57866: PUSH
57867: LD_VAR 0 1
57871: PPUSH
57872: CALL_OW 255
57876: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
57877: LD_INT 61
57879: PPUSH
57880: LD_VAR 0 6
57884: PPUSH
57885: CALL_OW 321
57889: PUSH
57890: LD_INT 2
57892: EQUAL
57893: IFFALSE 57903
// viewRange := 16 ;
57895: LD_ADDR_VAR 0 8
57899: PUSH
57900: LD_INT 16
57902: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
57903: LD_VAR 0 1
57907: PPUSH
57908: LD_VAR 0 2
57912: PPUSH
57913: LD_VAR 0 3
57917: PPUSH
57918: CALL_OW 297
57922: PUSH
57923: LD_VAR 0 5
57927: GREATER
57928: IFFALSE 58007
// begin ComMoveXY ( unit , x , y ) ;
57930: LD_VAR 0 1
57934: PPUSH
57935: LD_VAR 0 2
57939: PPUSH
57940: LD_VAR 0 3
57944: PPUSH
57945: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57949: LD_INT 35
57951: PPUSH
57952: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
57956: LD_VAR 0 1
57960: PPUSH
57961: LD_VAR 0 2
57965: PPUSH
57966: LD_VAR 0 3
57970: PPUSH
57971: CALL 46497 0 3
57975: NOT
57976: IFFALSE 57980
// exit ;
57978: GO 58312
// until GetDistUnitXY ( unit , x , y ) < dist ;
57980: LD_VAR 0 1
57984: PPUSH
57985: LD_VAR 0 2
57989: PPUSH
57990: LD_VAR 0 3
57994: PPUSH
57995: CALL_OW 297
57999: PUSH
58000: LD_VAR 0 5
58004: LESS
58005: IFFALSE 57949
// end ; ComTurnXY ( unit , x , y ) ;
58007: LD_VAR 0 1
58011: PPUSH
58012: LD_VAR 0 2
58016: PPUSH
58017: LD_VAR 0 3
58021: PPUSH
58022: CALL_OW 118
// repeat if Multiplayer then
58026: LD_OWVAR 4
58030: IFFALSE 58041
// wait ( 35 ) else
58032: LD_INT 35
58034: PPUSH
58035: CALL_OW 67
58039: GO 58048
// wait ( 5 ) ;
58041: LD_INT 5
58043: PPUSH
58044: CALL_OW 67
// _d := GetDir ( unit ) ;
58048: LD_ADDR_VAR 0 11
58052: PUSH
58053: LD_VAR 0 1
58057: PPUSH
58058: CALL_OW 254
58062: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58063: LD_ADDR_VAR 0 7
58067: PUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: CALL_OW 250
58077: PPUSH
58078: LD_VAR 0 1
58082: PPUSH
58083: CALL_OW 251
58087: PPUSH
58088: LD_VAR 0 2
58092: PPUSH
58093: LD_VAR 0 3
58097: PPUSH
58098: CALL 49105 0 4
58102: ST_TO_ADDR
// until dir = _d ;
58103: LD_VAR 0 7
58107: PUSH
58108: LD_VAR 0 11
58112: EQUAL
58113: IFFALSE 58026
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58115: LD_ADDR_VAR 0 9
58119: PUSH
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 250
58129: PPUSH
58130: LD_VAR 0 7
58134: PPUSH
58135: LD_VAR 0 5
58139: PPUSH
58140: CALL_OW 272
58144: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58145: LD_ADDR_VAR 0 10
58149: PUSH
58150: LD_VAR 0 1
58154: PPUSH
58155: CALL_OW 251
58159: PPUSH
58160: LD_VAR 0 7
58164: PPUSH
58165: LD_VAR 0 5
58169: PPUSH
58170: CALL_OW 273
58174: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58175: LD_VAR 0 9
58179: PPUSH
58180: LD_VAR 0 10
58184: PPUSH
58185: CALL_OW 488
58189: NOT
58190: IFFALSE 58194
// exit ;
58192: GO 58312
// ComAnimCustom ( unit , 1 ) ;
58194: LD_VAR 0 1
58198: PPUSH
58199: LD_INT 1
58201: PPUSH
58202: CALL_OW 592
// p := 0 ;
58206: LD_ADDR_VAR 0 12
58210: PUSH
58211: LD_INT 0
58213: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58214: LD_VAR 0 9
58218: PPUSH
58219: LD_VAR 0 10
58223: PPUSH
58224: LD_VAR 0 6
58228: PPUSH
58229: LD_VAR 0 8
58233: PPUSH
58234: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58238: LD_INT 35
58240: PPUSH
58241: CALL_OW 67
// p := Inc ( p ) ;
58245: LD_ADDR_VAR 0 12
58249: PUSH
58250: LD_VAR 0 12
58254: PPUSH
58255: CALL 49061 0 1
58259: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58260: LD_VAR 0 12
58264: PUSH
58265: LD_INT 3
58267: EQUAL
58268: PUSH
58269: LD_VAR 0 1
58273: PPUSH
58274: CALL_OW 302
58278: NOT
58279: OR
58280: PUSH
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL_OW 301
58290: OR
58291: IFFALSE 58238
// RemoveSeeing ( _x , _y , side ) ;
58293: LD_VAR 0 9
58297: PPUSH
58298: LD_VAR 0 10
58302: PPUSH
58303: LD_VAR 0 6
58307: PPUSH
58308: CALL_OW 331
// end ; end_of_file
58312: LD_VAR 0 4
58316: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58317: LD_EXP 41
58321: IFFALSE 58662
58323: GO 58325
58325: DISABLE
58326: LD_INT 0
58328: PPUSH
58329: PPUSH
58330: PPUSH
// begin mpKingPoints := [ ] ;
58331: LD_ADDR_EXP 60
58335: PUSH
58336: EMPTY
58337: ST_TO_ADDR
// if mpTeamGame then
58338: LD_EXP 13
58342: IFFALSE 58396
// begin for i := 1 to Count ( mpTeams ) do
58344: LD_ADDR_VAR 0 1
58348: PUSH
58349: DOUBLE
58350: LD_INT 1
58352: DEC
58353: ST_TO_ADDR
58354: LD_EXP 12
58358: PPUSH
58359: CALL 12091 0 1
58363: PUSH
58364: FOR_TO
58365: IFFALSE 58392
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58367: LD_ADDR_EXP 60
58371: PUSH
58372: LD_EXP 60
58376: PPUSH
58377: LD_VAR 0 1
58381: PPUSH
58382: LD_INT 0
58384: PPUSH
58385: CALL_OW 1
58389: ST_TO_ADDR
58390: GO 58364
58392: POP
58393: POP
// end else
58394: GO 58439
// begin for i := 1 to 8 do
58396: LD_ADDR_VAR 0 1
58400: PUSH
58401: DOUBLE
58402: LD_INT 1
58404: DEC
58405: ST_TO_ADDR
58406: LD_INT 8
58408: PUSH
58409: FOR_TO
58410: IFFALSE 58437
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58412: LD_ADDR_EXP 60
58416: PUSH
58417: LD_EXP 60
58421: PPUSH
58422: LD_VAR 0 1
58426: PPUSH
58427: LD_INT 0
58429: PPUSH
58430: CALL_OW 1
58434: ST_TO_ADDR
58435: GO 58409
58437: POP
58438: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: LD_EXP 2
58448: PPUSH
58449: LD_INT 0
58451: PPUSH
58452: CALL_OW 517
58456: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58457: LD_ADDR_VAR 0 1
58461: PUSH
58462: DOUBLE
58463: LD_INT 1
58465: DEC
58466: ST_TO_ADDR
58467: LD_VAR 0 3
58471: PUSH
58472: LD_INT 1
58474: ARRAY
58475: PUSH
58476: FOR_TO
58477: IFFALSE 58544
// for j := 1 to 8 do
58479: LD_ADDR_VAR 0 2
58483: PUSH
58484: DOUBLE
58485: LD_INT 1
58487: DEC
58488: ST_TO_ADDR
58489: LD_INT 8
58491: PUSH
58492: FOR_TO
58493: IFFALSE 58540
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
58495: LD_VAR 0 3
58499: PUSH
58500: LD_INT 1
58502: ARRAY
58503: PUSH
58504: LD_VAR 0 1
58508: ARRAY
58509: PPUSH
58510: LD_VAR 0 3
58514: PUSH
58515: LD_INT 2
58517: ARRAY
58518: PUSH
58519: LD_VAR 0 1
58523: ARRAY
58524: PPUSH
58525: LD_VAR 0 2
58529: PPUSH
58530: LD_INT 12
58532: NEG
58533: PPUSH
58534: CALL_OW 330
58538: GO 58492
58540: POP
58541: POP
58542: GO 58476
58544: POP
58545: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
58546: LD_EXP 36
58550: PPUSH
58551: LD_INT 1
58553: PPUSH
58554: CALL_OW 424
// UpdateCounter ;
58558: CALL 59166 0 0
// repeat wait ( 0 0$1 ) ;
58562: LD_INT 35
58564: PPUSH
58565: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58569: LD_ADDR_VAR 0 3
58573: PUSH
58574: LD_EXP 36
58578: PPUSH
58579: LD_INT 3
58581: PUSH
58582: LD_INT 57
58584: PUSH
58585: EMPTY
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 50
58594: PUSH
58595: EMPTY
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 30
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 30
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: LIST
58630: PPUSH
58631: CALL_OW 70
58635: ST_TO_ADDR
// if not tmp then
58636: LD_VAR 0 3
58640: NOT
58641: IFFALSE 58645
// continue ;
58643: GO 58562
// AddPoints ( tmp ) ;
58645: LD_VAR 0 3
58649: PPUSH
58650: CALL 58844 0 1
// UpdateCounter ;
58654: CALL 59166 0 0
// until false ;
58658: LD_INT 0
58660: IFFALSE 58562
// end ;
58662: PPOPN 3
58664: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
58665: LD_EXP 41
58669: PUSH
58670: LD_EXP 39
58674: AND
58675: IFFALSE 58841
58677: GO 58679
58679: DISABLE
58680: LD_INT 0
58682: PPUSH
58683: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
58684: LD_ADDR_VAR 0 2
58688: PUSH
58689: LD_EXP 2
58693: PPUSH
58694: LD_INT 0
58696: PPUSH
58697: CALL_OW 517
58701: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58702: LD_ADDR_VAR 0 1
58706: PUSH
58707: DOUBLE
58708: LD_INT 1
58710: DEC
58711: ST_TO_ADDR
58712: LD_VAR 0 2
58716: PUSH
58717: LD_INT 1
58719: ARRAY
58720: PUSH
58721: FOR_TO
58722: IFFALSE 58763
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
58724: LD_VAR 0 2
58728: PUSH
58729: LD_INT 1
58731: ARRAY
58732: PUSH
58733: LD_VAR 0 1
58737: ARRAY
58738: PPUSH
58739: LD_VAR 0 2
58743: PUSH
58744: LD_INT 2
58746: ARRAY
58747: PUSH
58748: LD_VAR 0 1
58752: ARRAY
58753: PPUSH
58754: LD_INT 125
58756: PPUSH
58757: CALL_OW 495
58761: GO 58721
58763: POP
58764: POP
// repeat wait ( mpEmissions ) ;
58765: LD_EXP 39
58769: PPUSH
58770: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
58774: LD_ADDR_VAR 0 1
58778: PUSH
58779: DOUBLE
58780: LD_INT 1
58782: DEC
58783: ST_TO_ADDR
58784: LD_VAR 0 2
58788: PUSH
58789: LD_INT 1
58791: ARRAY
58792: PUSH
58793: FOR_TO
58794: IFFALSE 58835
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
58796: LD_VAR 0 2
58800: PUSH
58801: LD_INT 1
58803: ARRAY
58804: PUSH
58805: LD_VAR 0 1
58809: ARRAY
58810: PPUSH
58811: LD_VAR 0 2
58815: PUSH
58816: LD_INT 2
58818: ARRAY
58819: PUSH
58820: LD_VAR 0 1
58824: ARRAY
58825: PPUSH
58826: LD_INT 15
58828: PPUSH
58829: CALL_OW 495
58833: GO 58793
58835: POP
58836: POP
// until false ;
58837: LD_INT 0
58839: IFFALSE 58765
// end ;
58841: PPOPN 2
58843: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
58844: LD_INT 0
58846: PPUSH
58847: PPUSH
58848: PPUSH
58849: PPUSH
58850: PPUSH
// if mpTeamGame then
58851: LD_EXP 13
58855: IFFALSE 59052
// begin first := depots [ 1 ] ;
58857: LD_ADDR_VAR 0 4
58861: PUSH
58862: LD_VAR 0 1
58866: PUSH
58867: LD_INT 1
58869: ARRAY
58870: ST_TO_ADDR
// side := GetSide ( first ) ;
58871: LD_ADDR_VAR 0 6
58875: PUSH
58876: LD_VAR 0 4
58880: PPUSH
58881: CALL_OW 255
58885: ST_TO_ADDR
// for i := 1 to mpTeams do
58886: LD_ADDR_VAR 0 3
58890: PUSH
58891: DOUBLE
58892: LD_INT 1
58894: DEC
58895: ST_TO_ADDR
58896: LD_EXP 12
58900: PUSH
58901: FOR_TO
58902: IFFALSE 58936
// if side in mpTeams [ i ] then
58904: LD_VAR 0 6
58908: PUSH
58909: LD_EXP 12
58913: PUSH
58914: LD_VAR 0 3
58918: ARRAY
58919: IN
58920: IFFALSE 58934
// begin team := i ;
58922: LD_ADDR_VAR 0 5
58926: PUSH
58927: LD_VAR 0 3
58931: ST_TO_ADDR
// break ;
58932: GO 58936
// end ;
58934: GO 58901
58936: POP
58937: POP
// if not team then
58938: LD_VAR 0 5
58942: NOT
58943: IFFALSE 58947
// exit ;
58945: GO 59161
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
58947: LD_EXP 36
58951: PPUSH
58952: LD_INT 81
58954: PUSH
58955: LD_VAR 0 6
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PPUSH
58964: CALL_OW 70
58968: IFFALSE 58972
// exit ;
58970: GO 59161
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
58972: LD_ADDR_EXP 60
58976: PUSH
58977: LD_EXP 60
58981: PPUSH
58982: LD_VAR 0 5
58986: PPUSH
58987: LD_EXP 60
58991: PUSH
58992: LD_VAR 0 5
58996: ARRAY
58997: PUSH
58998: LD_INT 1
59000: PLUS
59001: PPUSH
59002: CALL_OW 1
59006: ST_TO_ADDR
// for i in mpTeams [ team ] do
59007: LD_ADDR_VAR 0 3
59011: PUSH
59012: LD_EXP 12
59016: PUSH
59017: LD_VAR 0 5
59021: ARRAY
59022: PUSH
59023: FOR_IN
59024: IFFALSE 59048
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59026: LD_VAR 0 3
59030: PPUSH
59031: LD_EXP 60
59035: PUSH
59036: LD_VAR 0 5
59040: ARRAY
59041: PPUSH
59042: CALL_OW 506
59046: GO 59023
59048: POP
59049: POP
// end else
59050: GO 59161
// begin first := depots [ 1 ] ;
59052: LD_ADDR_VAR 0 4
59056: PUSH
59057: LD_VAR 0 1
59061: PUSH
59062: LD_INT 1
59064: ARRAY
59065: ST_TO_ADDR
// side := GetSide ( first ) ;
59066: LD_ADDR_VAR 0 6
59070: PUSH
59071: LD_VAR 0 4
59075: PPUSH
59076: CALL_OW 255
59080: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59081: LD_EXP 36
59085: PPUSH
59086: LD_INT 81
59088: PUSH
59089: LD_VAR 0 6
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PPUSH
59098: CALL_OW 70
59102: IFFALSE 59106
// exit ;
59104: GO 59161
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59106: LD_ADDR_EXP 60
59110: PUSH
59111: LD_EXP 60
59115: PPUSH
59116: LD_VAR 0 6
59120: PPUSH
59121: LD_EXP 60
59125: PUSH
59126: LD_VAR 0 6
59130: ARRAY
59131: PUSH
59132: LD_INT 1
59134: PLUS
59135: PPUSH
59136: CALL_OW 1
59140: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59141: LD_VAR 0 6
59145: PPUSH
59146: LD_EXP 60
59150: PUSH
59151: LD_VAR 0 6
59155: ARRAY
59156: PPUSH
59157: CALL_OW 506
// end ; end ;
59161: LD_VAR 0 2
59165: RET
// function UpdateCounter ; var i ; begin
59166: LD_INT 0
59168: PPUSH
59169: PPUSH
// result := [ ] ;
59170: LD_ADDR_VAR 0 1
59174: PUSH
59175: EMPTY
59176: ST_TO_ADDR
// if mpTeamGame then
59177: LD_EXP 13
59181: IFFALSE 59248
// begin for i := 1 to mpTeams do
59183: LD_ADDR_VAR 0 2
59187: PUSH
59188: DOUBLE
59189: LD_INT 1
59191: DEC
59192: ST_TO_ADDR
59193: LD_EXP 12
59197: PUSH
59198: FOR_TO
59199: IFFALSE 59244
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59201: LD_ADDR_VAR 0 1
59205: PUSH
59206: LD_VAR 0 1
59210: PUSH
59211: LD_STRING #KingoftheHill-Team
59213: PUSH
59214: LD_VAR 0 2
59218: PUSH
59219: LD_EXP 60
59223: PUSH
59224: LD_VAR 0 2
59228: ARRAY
59229: PUSH
59230: LD_EXP 37
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: ADD
59241: ST_TO_ADDR
59242: GO 59198
59244: POP
59245: POP
// end else
59246: GO 59321
// begin for i := 1 to 8 do
59248: LD_ADDR_VAR 0 2
59252: PUSH
59253: DOUBLE
59254: LD_INT 1
59256: DEC
59257: ST_TO_ADDR
59258: LD_INT 8
59260: PUSH
59261: FOR_TO
59262: IFFALSE 59319
// if mpSidePositions [ i ] then
59264: LD_EXP 9
59268: PUSH
59269: LD_VAR 0 2
59273: ARRAY
59274: IFFALSE 59317
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59276: LD_ADDR_VAR 0 1
59280: PUSH
59281: LD_VAR 0 1
59285: PUSH
59286: LD_STRING #KingoftheHill-Player
59288: PUSH
59289: LD_VAR 0 2
59293: PUSH
59294: LD_EXP 60
59298: PUSH
59299: LD_VAR 0 2
59303: ARRAY
59304: PUSH
59305: LD_EXP 37
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ADD
59316: ST_TO_ADDR
59317: GO 59261
59319: POP
59320: POP
// end ; mpDisplayStrings := result ;
59321: LD_ADDR_EXP 40
59325: PUSH
59326: LD_VAR 0 1
59330: ST_TO_ADDR
// end ;
59331: LD_VAR 0 1
59335: RET
// export function HowMuchPointsKing ( side ) ; begin
59336: LD_INT 0
59338: PPUSH
// result := HowMuchPoints ( side ) ;
59339: LD_ADDR_VAR 0 2
59343: PUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: CALL 59359 0 1
59353: ST_TO_ADDR
// end ;
59354: LD_VAR 0 2
59358: RET
// function HowMuchPoints ( side ) ; var i ; begin
59359: LD_INT 0
59361: PPUSH
59362: PPUSH
// if mpTeamGame then
59363: LD_EXP 13
59367: IFFALSE 59436
// begin for i := 1 to Count ( mpTeams ) do
59369: LD_ADDR_VAR 0 3
59373: PUSH
59374: DOUBLE
59375: LD_INT 1
59377: DEC
59378: ST_TO_ADDR
59379: LD_EXP 12
59383: PPUSH
59384: CALL 12091 0 1
59388: PUSH
59389: FOR_TO
59390: IFFALSE 59432
// begin if side in mpTeams [ i ] then
59392: LD_VAR 0 1
59396: PUSH
59397: LD_EXP 12
59401: PUSH
59402: LD_VAR 0 3
59406: ARRAY
59407: IN
59408: IFFALSE 59430
// begin result := mpKingPoints [ i ] ;
59410: LD_ADDR_VAR 0 2
59414: PUSH
59415: LD_EXP 60
59419: PUSH
59420: LD_VAR 0 3
59424: ARRAY
59425: ST_TO_ADDR
// exit ;
59426: POP
59427: POP
59428: GO 59452
// end ; end ;
59430: GO 59389
59432: POP
59433: POP
// end else
59434: GO 59452
// result := mpKingPoints [ side ] ;
59436: LD_ADDR_VAR 0 2
59440: PUSH
59441: LD_EXP 60
59445: PUSH
59446: LD_VAR 0 1
59450: ARRAY
59451: ST_TO_ADDR
// end ;
59452: LD_VAR 0 2
59456: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
59457: LD_EXP 41
59461: PUSH
59462: CALL 59784 0 0
59466: AND
59467: PUSH
59468: LD_OWVAR 4
59472: AND
59473: IFFALSE 59709
59475: GO 59477
59477: DISABLE
59478: LD_INT 0
59480: PPUSH
59481: PPUSH
// begin canWin := false ;
59482: LD_ADDR_VAR 0 2
59486: PUSH
59487: LD_INT 0
59489: ST_TO_ADDR
// if not HasPower ( your_side ) then
59490: LD_OWVAR 2
59494: PPUSH
59495: CALL 59824 0 1
59499: NOT
59500: IFFALSE 59511
// begin Multiplayer_Loose_Message ;
59502: CALL_OW 521
// enable ( mpLose ) ;
59506: LD_INT 102
59508: ENABLE_MARKED
// end else
59509: GO 59709
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
59511: LD_ADDR_VAR 0 2
59515: PUSH
59516: LD_OWVAR 2
59520: PPUSH
59521: CALL 59359 0 1
59525: PUSH
59526: LD_EXP 37
59530: GREATEREQUAL
59531: PUSH
59532: LD_OWVAR 2
59536: PPUSH
59537: CALL 59824 0 1
59541: AND
59542: PUSH
59543: CALL 59712 0 0
59547: NOT
59548: OR
59549: ST_TO_ADDR
// for i := 1 to 8 do
59550: LD_ADDR_VAR 0 1
59554: PUSH
59555: DOUBLE
59556: LD_INT 1
59558: DEC
59559: ST_TO_ADDR
59560: LD_INT 8
59562: PUSH
59563: FOR_TO
59564: IFFALSE 59695
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
59566: LD_EXP 9
59570: PUSH
59571: LD_VAR 0 1
59575: ARRAY
59576: PUSH
59577: LD_VAR 0 1
59581: PPUSH
59582: CALL_OW 108
59586: AND
59587: PUSH
59588: LD_VAR 0 1
59592: PUSH
59593: LD_OWVAR 2
59597: NONEQUAL
59598: AND
59599: IFFALSE 59693
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
59601: LD_EXP 10
59605: PUSH
59606: LD_VAR 0 1
59610: ARRAY
59611: NOT
59612: PUSH
59613: LD_EXP 10
59617: PUSH
59618: LD_VAR 0 1
59622: ARRAY
59623: PUSH
59624: LD_EXP 10
59628: PUSH
59629: LD_OWVAR 2
59633: ARRAY
59634: NONEQUAL
59635: PUSH
59636: LD_OWVAR 2
59640: PPUSH
59641: LD_VAR 0 1
59645: PPUSH
59646: CALL_OW 81
59650: PUSH
59651: LD_INT 1
59653: NONEQUAL
59654: AND
59655: OR
59656: IFFALSE 59693
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
59658: LD_VAR 0 1
59662: PPUSH
59663: CALL 59359 0 1
59667: PUSH
59668: LD_EXP 37
59672: GREATEREQUAL
59673: PUSH
59674: LD_VAR 0 1
59678: PPUSH
59679: CALL 59824 0 1
59683: AND
59684: IFFALSE 59693
// begin enable ( mpLose ) ;
59686: LD_INT 102
59688: ENABLE_MARKED
// exit ;
59689: POP
59690: POP
59691: GO 59709
// end ;
59693: GO 59563
59695: POP
59696: POP
// if canWin then
59697: LD_VAR 0 2
59701: IFFALSE 59708
// enable ( mpWin ) else
59703: LD_INT 101
59705: ENABLE_MARKED
59706: GO 59709
// enable ;
59708: ENABLE
// end ; end ;
59709: PPOPN 2
59711: END
// function EnemiesInGame ; var i ; begin
59712: LD_INT 0
59714: PPUSH
59715: PPUSH
// result := false ;
59716: LD_ADDR_VAR 0 1
59720: PUSH
59721: LD_INT 0
59723: ST_TO_ADDR
// for i := 1 to 8 do
59724: LD_ADDR_VAR 0 2
59728: PUSH
59729: DOUBLE
59730: LD_INT 1
59732: DEC
59733: ST_TO_ADDR
59734: LD_INT 8
59736: PUSH
59737: FOR_TO
59738: IFFALSE 59777
// if i <> your_side and HasPower ( i ) then
59740: LD_VAR 0 2
59744: PUSH
59745: LD_OWVAR 2
59749: NONEQUAL
59750: PUSH
59751: LD_VAR 0 2
59755: PPUSH
59756: CALL 59824 0 1
59760: AND
59761: IFFALSE 59775
// begin result := true ;
59763: LD_ADDR_VAR 0 1
59767: PUSH
59768: LD_INT 1
59770: ST_TO_ADDR
// exit ;
59771: POP
59772: POP
59773: GO 59779
// end ;
59775: GO 59737
59777: POP
59778: POP
// end ;
59779: LD_VAR 0 1
59783: RET
// function CanWinLoose ; begin
59784: LD_INT 0
59786: PPUSH
// result := true ;
59787: LD_ADDR_VAR 0 1
59791: PUSH
59792: LD_INT 1
59794: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
59795: CALL_OW 531
59799: PUSH
59800: CALL_OW 519
59804: PUSH
59805: LD_INT 1
59807: GREATER
59808: AND
59809: IFFALSE 59819
// result := false ;
59811: LD_ADDR_VAR 0 1
59815: PUSH
59816: LD_INT 0
59818: ST_TO_ADDR
// end ;
59819: LD_VAR 0 1
59823: RET
// function HasPower ( i ) ; begin
59824: LD_INT 0
59826: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
59827: LD_ADDR_VAR 0 2
59831: PUSH
59832: LD_INT 22
59834: PUSH
59835: LD_VAR 0 1
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: LD_INT 21
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 33
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 33
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PPUSH
59887: CALL_OW 69
59891: ST_TO_ADDR
// end ; end_of_file
59892: LD_VAR 0 2
59896: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
59897: PPOPN 6
59899: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
59900: LD_EXP 5
59904: PUSH
59905: LD_INT 4
59907: EQUAL
59908: IFFALSE 59944
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59910: LD_STRING setGameDifficulty(
59912: PUSH
59913: LD_OWVAR 67
59917: STR
59918: PUSH
59919: LD_STRING )
59921: STR
59922: PPUSH
59923: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59927: LD_STRING displayDifficulty(
59929: PUSH
59930: LD_OWVAR 67
59934: STR
59935: PUSH
59936: LD_STRING )
59938: STR
59939: PPUSH
59940: CALL_OW 559
// end ; SOS_MapStart ( ) ;
59944: CALL 59973 0 0
// end ; end_of_file
59948: PPOPN 1
59950: END
// every 0 0$1 do
59951: GO 59953
59953: DISABLE
// begin enable ;
59954: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59955: LD_STRING updateTimer(
59957: PUSH
59958: LD_OWVAR 1
59962: STR
59963: PUSH
59964: LD_STRING );
59966: STR
59967: PPUSH
59968: CALL_OW 559
// end ;
59972: END
// export function SOS_MapStart ( ) ; begin
59973: LD_INT 0
59975: PPUSH
// UpdateFactoryWaypoints ( ) ;
59976: CALL 60901 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59980: CALL 61153 0 0
// ParseMultiDataToLua ( ) ;
59984: CALL 61300 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
59988: LD_STRING setSpecLogoNumber(
59990: PUSH
59991: LD_INT 2
59993: STR
59994: PUSH
59995: LD_STRING ,
59997: STR
59998: PUSH
59999: LD_INT 1
60001: STR
60002: PUSH
60003: LD_STRING )
60005: STR
60006: PPUSH
60007: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60011: LD_STRING setSpecLogoNumber(
60013: PUSH
60014: LD_INT 3
60016: STR
60017: PUSH
60018: LD_STRING ,
60020: STR
60021: PUSH
60022: LD_INT 2
60024: STR
60025: PUSH
60026: LD_STRING )
60028: STR
60029: PPUSH
60030: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60034: LD_STRING setSpecLogoNumber(
60036: PUSH
60037: LD_INT 4
60039: STR
60040: PUSH
60041: LD_STRING ,
60043: STR
60044: PUSH
60045: LD_INT 3
60047: STR
60048: PUSH
60049: LD_STRING )
60051: STR
60052: PPUSH
60053: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60057: LD_STRING setSpecLogoNumber(
60059: PUSH
60060: LD_INT 5
60062: STR
60063: PUSH
60064: LD_STRING ,
60066: STR
60067: PUSH
60068: LD_INT 4
60070: STR
60071: PUSH
60072: LD_STRING )
60074: STR
60075: PPUSH
60076: CALL_OW 559
// end ;
60080: LD_VAR 0 1
60084: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60085: LD_INT 0
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
// for i := 1 to 8 do
60096: LD_ADDR_VAR 0 2
60100: PUSH
60101: DOUBLE
60102: LD_INT 1
60104: DEC
60105: ST_TO_ADDR
60106: LD_INT 8
60108: PUSH
60109: FOR_TO
60110: IFFALSE 60495
// begin if mpSidePositions [ i ] then
60112: LD_EXP 9
60116: PUSH
60117: LD_VAR 0 2
60121: ARRAY
60122: IFFALSE 60493
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60124: LD_ADDR_VAR 0 7
60128: PUSH
60129: LD_INT 22
60131: PUSH
60132: LD_VAR 0 2
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 21
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PPUSH
60155: CALL_OW 69
60159: PPUSH
60160: CALL 12091 0 1
60164: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60165: LD_ADDR_VAR 0 9
60169: PUSH
60170: LD_INT 22
60172: PUSH
60173: LD_VAR 0 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 30
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 30
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PPUSH
60214: CALL_OW 69
60218: ST_TO_ADDR
// crates := 0 ;
60219: LD_ADDR_VAR 0 4
60223: PUSH
60224: LD_INT 0
60226: ST_TO_ADDR
// oil := 0 ;
60227: LD_ADDR_VAR 0 5
60231: PUSH
60232: LD_INT 0
60234: ST_TO_ADDR
// sib := 0 ;
60235: LD_ADDR_VAR 0 6
60239: PUSH
60240: LD_INT 0
60242: ST_TO_ADDR
// if bases then
60243: LD_VAR 0 9
60247: IFFALSE 60353
// begin for j in bases do
60249: LD_ADDR_VAR 0 3
60253: PUSH
60254: LD_VAR 0 9
60258: PUSH
60259: FOR_IN
60260: IFFALSE 60351
// begin base := GetBase ( j ) ;
60262: LD_ADDR_VAR 0 8
60266: PUSH
60267: LD_VAR 0 3
60271: PPUSH
60272: CALL_OW 274
60276: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60277: LD_ADDR_VAR 0 4
60281: PUSH
60282: LD_VAR 0 4
60286: PUSH
60287: LD_VAR 0 8
60291: PPUSH
60292: LD_INT 1
60294: PPUSH
60295: CALL_OW 275
60299: PLUS
60300: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
60301: LD_ADDR_VAR 0 5
60305: PUSH
60306: LD_VAR 0 5
60310: PUSH
60311: LD_VAR 0 8
60315: PPUSH
60316: LD_INT 2
60318: PPUSH
60319: CALL_OW 275
60323: PLUS
60324: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
60325: LD_ADDR_VAR 0 6
60329: PUSH
60330: LD_VAR 0 6
60334: PUSH
60335: LD_VAR 0 8
60339: PPUSH
60340: LD_INT 3
60342: PPUSH
60343: CALL_OW 275
60347: PLUS
60348: ST_TO_ADDR
// end ;
60349: GO 60259
60351: POP
60352: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
60353: LD_STRING setSpecText(
60355: PUSH
60356: LD_VAR 0 2
60360: STR
60361: PUSH
60362: LD_STRING ,
60364: STR
60365: PUSH
60366: LD_INT 2
60368: STR
60369: PUSH
60370: LD_STRING ,
60372: STR
60373: PUSH
60374: LD_VAR 0 4
60378: STR
60379: PUSH
60380: LD_STRING )
60382: STR
60383: PPUSH
60384: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60388: LD_STRING setSpecText(
60390: PUSH
60391: LD_VAR 0 2
60395: STR
60396: PUSH
60397: LD_STRING ,
60399: STR
60400: PUSH
60401: LD_INT 3
60403: STR
60404: PUSH
60405: LD_STRING ,
60407: STR
60408: PUSH
60409: LD_VAR 0 5
60413: STR
60414: PUSH
60415: LD_STRING )
60417: STR
60418: PPUSH
60419: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
60423: LD_STRING setSpecText(
60425: PUSH
60426: LD_VAR 0 2
60430: STR
60431: PUSH
60432: LD_STRING ,
60434: STR
60435: PUSH
60436: LD_INT 4
60438: STR
60439: PUSH
60440: LD_STRING ,
60442: STR
60443: PUSH
60444: LD_VAR 0 6
60448: STR
60449: PUSH
60450: LD_STRING )
60452: STR
60453: PPUSH
60454: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
60458: LD_STRING setSpecText(
60460: PUSH
60461: LD_VAR 0 2
60465: STR
60466: PUSH
60467: LD_STRING ,
60469: STR
60470: PUSH
60471: LD_INT 5
60473: STR
60474: PUSH
60475: LD_STRING ,
60477: STR
60478: PUSH
60479: LD_VAR 0 7
60483: STR
60484: PUSH
60485: LD_STRING )
60487: STR
60488: PPUSH
60489: CALL_OW 559
// end ; end ;
60493: GO 60109
60495: POP
60496: POP
// end ;
60497: LD_VAR 0 1
60501: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
60502: LD_INT 2
60504: PUSH
60505: LD_INT 30
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 30
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: PPUSH
60530: CALL_OW 69
60534: IFFALSE 60544
60536: GO 60538
60538: DISABLE
// begin enable ;
60539: ENABLE
// UpdateSpectatorBar ;
60540: CALL 60085 0 0
// end ;
60544: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60545: LD_INT 0
60547: PPUSH
// end ;
60548: LD_VAR 0 12
60552: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
60553: LD_INT 0
60555: PPUSH
60556: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
60557: LD_VAR 0 1
60561: NOT
60562: PUSH
60563: LD_VAR 0 2
60567: PPUSH
60568: LD_VAR 0 3
60572: PPUSH
60573: CALL_OW 488
60577: NOT
60578: OR
60579: PUSH
60580: LD_VAR 0 1
60584: PPUSH
60585: CALL_OW 266
60589: PUSH
60590: LD_INT 3
60592: NONEQUAL
60593: PUSH
60594: LD_VAR 0 1
60598: PPUSH
60599: CALL_OW 247
60603: PUSH
60604: LD_INT 1
60606: EQUAL
60607: NOT
60608: AND
60609: OR
60610: IFFALSE 60614
// exit ;
60612: GO 60896
// if GetType ( factory ) = unit_human then
60614: LD_VAR 0 1
60618: PPUSH
60619: CALL_OW 247
60623: PUSH
60624: LD_INT 1
60626: EQUAL
60627: IFFALSE 60644
// factory := IsInUnit ( factory ) ;
60629: LD_ADDR_VAR 0 1
60633: PUSH
60634: LD_VAR 0 1
60638: PPUSH
60639: CALL_OW 310
60643: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60644: LD_VAR 0 1
60648: PPUSH
60649: CALL_OW 266
60653: PUSH
60654: LD_INT 3
60656: NONEQUAL
60657: IFFALSE 60661
// exit ;
60659: GO 60896
// for i := 1 to Count ( factoryWaypoints ) do
60661: LD_ADDR_VAR 0 5
60665: PUSH
60666: DOUBLE
60667: LD_INT 1
60669: DEC
60670: ST_TO_ADDR
60671: LD_EXP 61
60675: PPUSH
60676: CALL 12091 0 1
60680: PUSH
60681: FOR_TO
60682: IFFALSE 60844
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
60684: LD_VAR 0 2
60688: PPUSH
60689: LD_VAR 0 3
60693: PPUSH
60694: CALL_OW 428
60698: PUSH
60699: LD_EXP 61
60703: PUSH
60704: LD_VAR 0 5
60708: ARRAY
60709: PUSH
60710: LD_INT 2
60712: ARRAY
60713: EQUAL
60714: IFFALSE 60746
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60716: LD_ADDR_EXP 61
60720: PUSH
60721: LD_EXP 61
60725: PPUSH
60726: LD_VAR 0 5
60730: PPUSH
60731: CALL_OW 3
60735: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60736: CALL 60901 0 0
// exit ;
60740: POP
60741: POP
60742: GO 60896
// end else
60744: GO 60842
// if factory = factoryWaypoints [ i ] [ 2 ] then
60746: LD_VAR 0 1
60750: PUSH
60751: LD_EXP 61
60755: PUSH
60756: LD_VAR 0 5
60760: ARRAY
60761: PUSH
60762: LD_INT 2
60764: ARRAY
60765: EQUAL
60766: IFFALSE 60842
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
60768: LD_ADDR_EXP 61
60772: PUSH
60773: LD_EXP 61
60777: PPUSH
60778: LD_VAR 0 5
60782: PPUSH
60783: CALL_OW 3
60787: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60788: LD_ADDR_EXP 61
60792: PUSH
60793: LD_EXP 61
60797: PPUSH
60798: LD_VAR 0 1
60802: PPUSH
60803: CALL_OW 255
60807: PUSH
60808: LD_VAR 0 1
60812: PUSH
60813: LD_VAR 0 2
60817: PUSH
60818: LD_VAR 0 3
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: PPUSH
60829: CALL 47700 0 2
60833: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60834: CALL 60901 0 0
// exit ;
60838: POP
60839: POP
60840: GO 60896
// end ; end ;
60842: GO 60681
60844: POP
60845: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
60846: LD_ADDR_EXP 61
60850: PUSH
60851: LD_EXP 61
60855: PPUSH
60856: LD_VAR 0 1
60860: PPUSH
60861: CALL_OW 255
60865: PUSH
60866: LD_VAR 0 1
60870: PUSH
60871: LD_VAR 0 2
60875: PUSH
60876: LD_VAR 0 3
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: PPUSH
60887: CALL 47700 0 2
60891: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60892: CALL 60901 0 0
// end ;
60896: LD_VAR 0 4
60900: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
60901: LD_INT 0
60903: PPUSH
60904: PPUSH
60905: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60906: LD_STRING resetFactoryWaypoint();
60908: PPUSH
60909: CALL_OW 559
// if factoryWaypoints then
60913: LD_EXP 61
60917: IFFALSE 61038
// begin list := factoryWaypoints ;
60919: LD_ADDR_VAR 0 3
60923: PUSH
60924: LD_EXP 61
60928: ST_TO_ADDR
// for i := 1 to list do
60929: LD_ADDR_VAR 0 2
60933: PUSH
60934: DOUBLE
60935: LD_INT 1
60937: DEC
60938: ST_TO_ADDR
60939: LD_VAR 0 3
60943: PUSH
60944: FOR_TO
60945: IFFALSE 61036
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
60947: LD_STRING setFactoryWaypointXY(
60949: PUSH
60950: LD_VAR 0 3
60954: PUSH
60955: LD_VAR 0 2
60959: ARRAY
60960: PUSH
60961: LD_INT 1
60963: ARRAY
60964: STR
60965: PUSH
60966: LD_STRING ,
60968: STR
60969: PUSH
60970: LD_VAR 0 3
60974: PUSH
60975: LD_VAR 0 2
60979: ARRAY
60980: PUSH
60981: LD_INT 2
60983: ARRAY
60984: STR
60985: PUSH
60986: LD_STRING ,
60988: STR
60989: PUSH
60990: LD_VAR 0 3
60994: PUSH
60995: LD_VAR 0 2
60999: ARRAY
61000: PUSH
61001: LD_INT 3
61003: ARRAY
61004: STR
61005: PUSH
61006: LD_STRING ,
61008: STR
61009: PUSH
61010: LD_VAR 0 3
61014: PUSH
61015: LD_VAR 0 2
61019: ARRAY
61020: PUSH
61021: LD_INT 4
61023: ARRAY
61024: STR
61025: PUSH
61026: LD_STRING )
61028: STR
61029: PPUSH
61030: CALL_OW 559
61034: GO 60944
61036: POP
61037: POP
// end ; end ;
61038: LD_VAR 0 1
61042: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61043: LD_INT 0
61045: PPUSH
// if HexInfo ( x , y ) = warehouse then
61046: LD_VAR 0 2
61050: PPUSH
61051: LD_VAR 0 3
61055: PPUSH
61056: CALL_OW 428
61060: PUSH
61061: LD_VAR 0 1
61065: EQUAL
61066: IFFALSE 61093
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61068: LD_ADDR_EXP 63
61072: PUSH
61073: LD_EXP 63
61077: PPUSH
61078: LD_VAR 0 1
61082: PPUSH
61083: LD_INT 0
61085: PPUSH
61086: CALL_OW 1
61090: ST_TO_ADDR
61091: GO 61144
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61093: LD_ADDR_EXP 63
61097: PUSH
61098: LD_EXP 63
61102: PPUSH
61103: LD_VAR 0 1
61107: PPUSH
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 255
61117: PUSH
61118: LD_VAR 0 1
61122: PUSH
61123: LD_VAR 0 2
61127: PUSH
61128: LD_VAR 0 3
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: PPUSH
61139: CALL_OW 1
61143: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61144: CALL 61153 0 0
// end ;
61148: LD_VAR 0 4
61152: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61153: LD_INT 0
61155: PPUSH
61156: PPUSH
61157: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61158: LD_STRING resetWarehouseGatheringPoints();
61160: PPUSH
61161: CALL_OW 559
// if warehouseGatheringPoints then
61165: LD_EXP 63
61169: IFFALSE 61295
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61171: LD_ADDR_VAR 0 3
61175: PUSH
61176: LD_EXP 63
61180: PPUSH
61181: CALL 51468 0 1
61185: ST_TO_ADDR
// for i := 1 to list do
61186: LD_ADDR_VAR 0 2
61190: PUSH
61191: DOUBLE
61192: LD_INT 1
61194: DEC
61195: ST_TO_ADDR
61196: LD_VAR 0 3
61200: PUSH
61201: FOR_TO
61202: IFFALSE 61293
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61204: LD_STRING setWarehouseGatheringPointXY(
61206: PUSH
61207: LD_VAR 0 3
61211: PUSH
61212: LD_VAR 0 2
61216: ARRAY
61217: PUSH
61218: LD_INT 1
61220: ARRAY
61221: STR
61222: PUSH
61223: LD_STRING ,
61225: STR
61226: PUSH
61227: LD_VAR 0 3
61231: PUSH
61232: LD_VAR 0 2
61236: ARRAY
61237: PUSH
61238: LD_INT 2
61240: ARRAY
61241: STR
61242: PUSH
61243: LD_STRING ,
61245: STR
61246: PUSH
61247: LD_VAR 0 3
61251: PUSH
61252: LD_VAR 0 2
61256: ARRAY
61257: PUSH
61258: LD_INT 3
61260: ARRAY
61261: STR
61262: PUSH
61263: LD_STRING ,
61265: STR
61266: PUSH
61267: LD_VAR 0 3
61271: PUSH
61272: LD_VAR 0 2
61276: ARRAY
61277: PUSH
61278: LD_INT 4
61280: ARRAY
61281: STR
61282: PUSH
61283: LD_STRING )
61285: STR
61286: PPUSH
61287: CALL_OW 559
61291: GO 61201
61293: POP
61294: POP
// end ; end ;
61295: LD_VAR 0 1
61299: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
// if not mpSidePositions then
61304: LD_EXP 9
61308: NOT
61309: IFFALSE 61313
// exit ;
61311: GO 61384
// result :=  ;
61313: LD_ADDR_VAR 0 1
61317: PUSH
61318: LD_STRING 
61320: ST_TO_ADDR
// for i := 1 to 8 do
61321: LD_ADDR_VAR 0 2
61325: PUSH
61326: DOUBLE
61327: LD_INT 1
61329: DEC
61330: ST_TO_ADDR
61331: LD_INT 8
61333: PUSH
61334: FOR_TO
61335: IFFALSE 61365
// begin result := result & mpSidePositions [ i ] & ; ;
61337: LD_ADDR_VAR 0 1
61341: PUSH
61342: LD_VAR 0 1
61346: PUSH
61347: LD_EXP 9
61351: PUSH
61352: LD_VAR 0 2
61356: ARRAY
61357: STR
61358: PUSH
61359: LD_STRING ;
61361: STR
61362: ST_TO_ADDR
// end ;
61363: GO 61334
61365: POP
61366: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
61367: LD_STRING setMultiplayerRealPosition("
61369: PUSH
61370: LD_VAR 0 1
61374: STR
61375: PUSH
61376: LD_STRING ");
61378: STR
61379: PPUSH
61380: CALL_OW 559
// end ;
61384: LD_VAR 0 1
61388: RET
