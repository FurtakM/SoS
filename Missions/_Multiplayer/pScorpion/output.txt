// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2404 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2780 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 1 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 1
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 ] , [ 2 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: ST_TO_ADDR
// mpTeamGame := true ;
 778: LD_ADDR_EXP 11
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// mpMapSize := [ 90 , 120 ] ;
 786: LD_ADDR_EXP 29
 790: PUSH
 791: LD_INT 90
 793: PUSH
 794: LD_INT 120
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// end ;
 801: LD_VAR 0 1
 805: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 806: LD_INT 0
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
 813: PPUSH
 814: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 830: LD_ADDR_EXP 18
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 5
 840: PUSH
 841: LD_INT 6
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 8
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: LD_EXP 19
 861: UNION
 862: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 863: LD_VAR 0 1
 867: PUSH
 868: LD_INT 2
 870: EQUAL
 871: IFFALSE 883
// baseLevel := 1 else
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
 881: GO 897
// baseLevel := mpGameSettings [ 1 ] ;
 883: LD_ADDR_VAR 0 7
 887: PUSH
 888: LD_EXP 6
 892: PUSH
 893: LD_INT 1
 895: ARRAY
 896: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 897: LD_ADDR_EXP 24
 901: PUSH
 902: LD_EXP 6
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 911: LD_ADDR_EXP 25
 915: PUSH
 916: LD_EXP 6
 920: PUSH
 921: LD_INT 3
 923: ARRAY
 924: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_EXP 6
 934: PUSH
 935: LD_INT 4
 937: ARRAY
 938: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 939: LD_ADDR_EXP 27
 943: PUSH
 944: LD_EXP 6
 948: PUSH
 949: LD_INT 5
 951: ARRAY
 952: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 953: LD_ADDR_VAR 0 5
 957: PUSH
 958: LD_EXP 6
 962: PUSH
 963: LD_INT 6
 965: ARRAY
 966: PUSH
 967: LD_INT 0
 969: GREATER
 970: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 971: LD_ADDR_VAR 0 6
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 7
 983: ARRAY
 984: PUSH
 985: LD_INT 0
 987: GREATER
 988: ST_TO_ADDR
// mpKingArea := 0 ;
 989: LD_ADDR_EXP 34
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// mpPoints := 0 ;
 997: LD_ADDR_EXP 35
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// mpEmissions := 0 ;
1005: LD_ADDR_EXP 37
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// kingArea := 0 ;
1013: LD_ADDR_EXP 1
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// kingCamArea := 0 ;
1021: LD_ADDR_EXP 2
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1029: LD_EXP 6
1033: PUSH
1034: LD_INT 9
1036: ARRAY
1037: IFFALSE 1169
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1039: LD_ADDR_EXP 36
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: LD_INT 2
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 12
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 24
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 23
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 42
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 21
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 42
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_EXP 6
1178: PUSH
1179: LD_INT 11
1181: ARRAY
1182: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1183: LD_ADDR_EXP 22
1187: PUSH
1188: LD_EXP 6
1192: PUSH
1193: LD_INT 12
1195: ARRAY
1196: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1197: LD_ADDR_EXP 26
1201: PUSH
1202: LD_EXP 6
1206: PUSH
1207: LD_INT 13
1209: ARRAY
1210: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1211: LD_ADDR_EXP 33
1215: PUSH
1216: LD_EXP 6
1220: PUSH
1221: LD_INT 14
1223: ARRAY
1224: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1225: LD_ADDR_EXP 30
1229: PUSH
1230: LD_EXP 6
1234: PUSH
1235: LD_INT 15
1237: ARRAY
1238: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1239: LD_ADDR_EXP 28
1243: PUSH
1244: LD_EXP 6
1248: PUSH
1249: LD_INT 18
1251: ARRAY
1252: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1253: LD_ADDR_EXP 20
1257: PUSH
1258: LD_EXP 6
1262: PUSH
1263: LD_INT 21
1265: ARRAY
1266: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea ] ;
1267: LD_ADDR_EXP 31
1271: PUSH
1272: LD_INT 15
1274: PUSH
1275: LD_INT 16
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 0 ) ] ;
1282: LD_ADDR_VAR 0 8
1286: PUSH
1287: LD_INT 9
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL 52577 0 2
1297: PUSH
1298: LD_INT 17
1300: PPUSH
1301: LD_INT 0
1303: PPUSH
1304: CALL 52577 0 2
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_VAR 0 8
1327: PPUSH
1328: CALL 11926 0 1
1332: PUSH
1333: FOR_TO
1334: IFFALSE 1438
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1336: LD_ADDR_EXP 21
1340: PUSH
1341: LD_EXP 21
1345: PPUSH
1346: LD_VAR 0 3
1350: PPUSH
1351: LD_VAR 0 8
1355: PUSH
1356: LD_VAR 0 3
1360: ARRAY
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: LD_VAR 0 8
1370: PUSH
1371: LD_VAR 0 3
1375: ARRAY
1376: PUSH
1377: LD_INT 3
1379: ARRAY
1380: PPUSH
1381: LD_INT 10
1383: PPUSH
1384: CALL_OW 272
1388: PUSH
1389: LD_VAR 0 8
1393: PUSH
1394: LD_VAR 0 3
1398: ARRAY
1399: PUSH
1400: LD_INT 2
1402: ARRAY
1403: PPUSH
1404: LD_VAR 0 8
1408: PUSH
1409: LD_VAR 0 3
1413: ARRAY
1414: PUSH
1415: LD_INT 3
1417: ARRAY
1418: PPUSH
1419: LD_INT 10
1421: PPUSH
1422: CALL_OW 273
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 1
1435: ST_TO_ADDR
1436: GO 1333
1438: POP
1439: POP
// if hasOil then
1440: LD_VAR 0 5
1444: IFFALSE 1542
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1446: LD_ADDR_VAR 0 4
1450: PUSH
1451: LD_EXP 6
1455: PUSH
1456: LD_INT 6
1458: ARRAY
1459: PUSH
1460: LD_INT 2
1462: EQUAL
1463: ST_TO_ADDR
// if all then
1464: LD_VAR 0 4
1468: IFFALSE 1507
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) ] else
1470: LD_ADDR_EXP 12
1474: PUSH
1475: LD_INT 13
1477: PPUSH
1478: LD_VAR 0 4
1482: PPUSH
1483: CALL 52410 0 2
1487: PUSH
1488: LD_INT 21
1490: PPUSH
1491: LD_VAR 0 4
1495: PPUSH
1496: CALL 52410 0 2
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: ST_TO_ADDR
1505: GO 1542
// mpOilDeposits := [ [ [ 49 , 3 ] ] , [ [ 108 , 117 ] ] ] ;
1507: LD_ADDR_EXP 12
1511: PUSH
1512: LD_INT 49
1514: PUSH
1515: LD_INT 3
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: PUSH
1525: LD_INT 108
1527: PUSH
1528: LD_INT 117
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: ST_TO_ADDR
// end ; if hasSib then
1542: LD_VAR 0 6
1546: IFFALSE 1644
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1548: LD_ADDR_VAR 0 4
1552: PUSH
1553: LD_EXP 6
1557: PUSH
1558: LD_INT 7
1560: ARRAY
1561: PUSH
1562: LD_INT 2
1564: EQUAL
1565: ST_TO_ADDR
// if all then
1566: LD_VAR 0 4
1570: IFFALSE 1609
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) ] else
1572: LD_ADDR_EXP 13
1576: PUSH
1577: LD_INT 14
1579: PPUSH
1580: LD_VAR 0 4
1584: PPUSH
1585: CALL 52410 0 2
1589: PUSH
1590: LD_INT 22
1592: PPUSH
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL 52410 0 2
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
1607: GO 1644
// mpSibDeposits := [ [ [ 52 , 2 ] ] , [ [ 110 , 115 ] ] ] ;
1609: LD_ADDR_EXP 13
1613: PUSH
1614: LD_INT 52
1616: PUSH
1617: LD_INT 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: EMPTY
1625: LIST
1626: PUSH
1627: LD_INT 110
1629: PUSH
1630: LD_INT 115
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1644: LD_VAR 0 7
1648: PUSH
1649: LD_INT 1
1651: GREATEREQUAL
1652: IFFALSE 1664
// mpDepots := startPos ;
1654: LD_ADDR_EXP 14
1658: PUSH
1659: LD_VAR 0 8
1663: ST_TO_ADDR
// if baseLevel >= 2 then
1664: LD_VAR 0 7
1668: PUSH
1669: LD_INT 2
1671: GREATEREQUAL
1672: IFFALSE 1783
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 2 ) ] ] ;
1674: LD_ADDR_EXP 17
1678: PUSH
1679: LD_INT 31
1681: PUSH
1682: LD_INT 11
1684: PPUSH
1685: LD_INT 5
1687: PPUSH
1688: CALL 52577 0 2
1692: ADD
1693: PUSH
1694: LD_INT 31
1696: PUSH
1697: LD_INT 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL 52577 0 2
1707: ADD
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 10
1714: PPUSH
1715: LD_INT 5
1717: PPUSH
1718: CALL 52577 0 2
1722: ADD
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 31
1731: PUSH
1732: LD_INT 19
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL 52577 0 2
1742: ADD
1743: PUSH
1744: LD_INT 31
1746: PUSH
1747: LD_INT 20
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL 52577 0 2
1757: ADD
1758: PUSH
1759: LD_INT 4
1761: PUSH
1762: LD_INT 18
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL 52577 0 2
1772: ADD
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// end ; end ;
1783: LD_VAR 0 2
1787: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1788: GO 1790
1790: DISABLE
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
// begin if not mpShipments then
1801: LD_EXP 27
1805: NOT
1806: IFFALSE 1810
// exit ;
1808: GO 2317
// case mpShipments of 1 :
1810: LD_EXP 27
1814: PUSH
1815: LD_INT 1
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1858
1823: POP
// begin time := 0 0$30 ;
1824: LD_ADDR_VAR 0 4
1828: PUSH
1829: LD_INT 1050
1831: ST_TO_ADDR
// normalTime := 0 0$30 ;
1832: LD_ADDR_VAR 0 6
1836: PUSH
1837: LD_INT 1050
1839: ST_TO_ADDR
// maxTime := 1 1$20 ;
1840: LD_ADDR_VAR 0 8
1844: PUSH
1845: LD_INT 2800
1847: ST_TO_ADDR
// delayTime := 0 0$5 ;
1848: LD_ADDR_VAR 0 7
1852: PUSH
1853: LD_INT 175
1855: ST_TO_ADDR
// end ; 2 :
1856: GO 1988
1858: LD_INT 2
1860: DOUBLE
1861: EQUAL
1862: IFTRUE 1866
1864: GO 1901
1866: POP
// begin time := 0 0$25 ;
1867: LD_ADDR_VAR 0 4
1871: PUSH
1872: LD_INT 875
1874: ST_TO_ADDR
// normalTime := 0 0$25 ;
1875: LD_ADDR_VAR 0 6
1879: PUSH
1880: LD_INT 875
1882: ST_TO_ADDR
// maxTime := 1 1$10 ;
1883: LD_ADDR_VAR 0 8
1887: PUSH
1888: LD_INT 2450
1890: ST_TO_ADDR
// delayTime := 0 0$4 ;
1891: LD_ADDR_VAR 0 7
1895: PUSH
1896: LD_INT 140
1898: ST_TO_ADDR
// end ; 3 :
1899: GO 1988
1901: LD_INT 3
1903: DOUBLE
1904: EQUAL
1905: IFTRUE 1909
1907: GO 1944
1909: POP
// begin time := 0 0$20 ;
1910: LD_ADDR_VAR 0 4
1914: PUSH
1915: LD_INT 700
1917: ST_TO_ADDR
// normalTime := 0 0$20 ;
1918: LD_ADDR_VAR 0 6
1922: PUSH
1923: LD_INT 700
1925: ST_TO_ADDR
// maxTime := 1 1$00 ;
1926: LD_ADDR_VAR 0 8
1930: PUSH
1931: LD_INT 2100
1933: ST_TO_ADDR
// delayTime := 0 0$3 ;
1934: LD_ADDR_VAR 0 7
1938: PUSH
1939: LD_INT 105
1941: ST_TO_ADDR
// end ; 4 :
1942: GO 1988
1944: LD_INT 4
1946: DOUBLE
1947: EQUAL
1948: IFTRUE 1952
1950: GO 1987
1952: POP
// begin time := 0 0$15 ;
1953: LD_ADDR_VAR 0 4
1957: PUSH
1958: LD_INT 525
1960: ST_TO_ADDR
// normalTime := 0 0$15 ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 525
1968: ST_TO_ADDR
// maxTime := 0 0$55 ;
1969: LD_ADDR_VAR 0 8
1973: PUSH
1974: LD_INT 1925
1976: ST_TO_ADDR
// delayTime := 0 0$2 ;
1977: LD_ADDR_VAR 0 7
1981: PUSH
1982: LD_INT 70
1984: ST_TO_ADDR
// end ; end ;
1985: GO 1988
1987: POP
// tmp := [ buildUpTime1 , buildUpTime2 ] ;
1988: LD_ADDR_VAR 0 3
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 5
2013: PUSH
2014: LD_INT 6
2016: PUSH
2017: LD_INT 7
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: ST_TO_ADDR
// for i := 1 to 8 do
2026: LD_ADDR_VAR 0 1
2030: PUSH
2031: DOUBLE
2032: LD_INT 1
2034: DEC
2035: ST_TO_ADDR
2036: LD_INT 8
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2087
// begin if not mpSidePositions [ i ] then
2042: LD_EXP 7
2046: PUSH
2047: LD_VAR 0 1
2051: ARRAY
2052: NOT
2053: IFFALSE 2057
// continue ;
2055: GO 2039
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2057: LD_ADDR_VAR 0 5
2061: PUSH
2062: LD_VAR 0 5
2066: PUSH
2067: LD_VAR 0 3
2071: PUSH
2072: LD_EXP 7
2076: PUSH
2077: LD_VAR 0 1
2081: ARRAY
2082: ARRAY
2083: ADD
2084: ST_TO_ADDR
// end ;
2085: GO 2039
2087: POP
2088: POP
// x := 1 ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 1
2096: ST_TO_ADDR
// repeat wait ( time ) ;
2097: LD_VAR 0 4
2101: PPUSH
2102: CALL_OW 67
// x := Inc ( x ) ;
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 2
2115: PPUSH
2116: CALL 49231 0 1
2120: ST_TO_ADDR
// if x > 5 then
2121: LD_VAR 0 2
2125: PUSH
2126: LD_INT 5
2128: GREATER
2129: IFFALSE 2139
// x := 1 ;
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// for i in areas do
2139: LD_ADDR_VAR 0 1
2143: PUSH
2144: LD_VAR 0 5
2148: PUSH
2149: FOR_IN
2150: IFFALSE 2189
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2152: LD_VAR 0 1
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 287
2164: PUSH
2165: LD_INT 20
2167: LESS
2168: IFFALSE 2187
// begin CreateCratesArea ( x , i , true ) ;
2170: LD_VAR 0 2
2174: PPUSH
2175: LD_VAR 0 1
2179: PPUSH
2180: LD_INT 1
2182: PPUSH
2183: CALL_OW 55
// end ; end ;
2187: GO 2149
2189: POP
2190: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 287
2201: PUSH
2202: LD_INT 0
2204: EQUAL
2205: IFFALSE 2244
// begin for i := 1 to 3 do
2207: LD_ADDR_VAR 0 1
2211: PUSH
2212: DOUBLE
2213: LD_INT 1
2215: DEC
2216: ST_TO_ADDR
2217: LD_INT 3
2219: PUSH
2220: FOR_TO
2221: IFFALSE 2240
// CreateCratesArea ( x , CenterArea , true ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 8
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: CALL_OW 55
2238: GO 2220
2240: POP
2241: POP
// end else
2242: GO 2275
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2244: LD_INT 8
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL_OW 287
2254: PUSH
2255: LD_INT 30
2257: LESS
2258: IFFALSE 2275
// CreateCratesArea ( x , CenterArea , true ) ;
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_INT 8
2267: PPUSH
2268: LD_INT 1
2270: PPUSH
2271: CALL_OW 55
// time := time + delayTime ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_VAR 0 7
2289: PLUS
2290: ST_TO_ADDR
// if time > maxTime then
2291: LD_VAR 0 4
2295: PUSH
2296: LD_VAR 0 8
2300: GREATER
2301: IFFALSE 2313
// time := normalTime ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: LD_VAR 0 6
2312: ST_TO_ADDR
// until false ;
2313: LD_INT 0
2315: IFFALSE 2097
// end ; end_of_file
2317: PPOPN 8
2319: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL 53375 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2329: LD_VAR 0 1
2333: PPUSH
2334: CALL 7552 0 1
// end ;
2338: PPOPN 1
2340: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: CALL 53392 0 1
// end ;
2350: PPOPN 1
2352: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2353: LD_VAR 0 1
2357: PPUSH
2358: CALL 8259 0 1
2362: PPOPN 1
2364: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL 53433 0 2
2379: PPOPN 2
2381: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_VAR 0 2
2391: PPUSH
2392: LD_VAR 0 3
2396: PPUSH
2397: CALL 8312 0 3
2401: PPOPN 3
2403: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2404: LD_INT 0
2406: PPUSH
2407: PPUSH
// disable ( mpActive ) ;
2408: LD_INT 100
2410: DISABLE_MARKED
// disable ( mpWin ) ;
2411: LD_INT 101
2413: DISABLE_MARKED
// disable ( mpLose ) ;
2414: LD_INT 102
2416: DISABLE_MARKED
// mpGameType := 0 ;
2417: LD_ADDR_EXP 3
2421: PUSH
2422: LD_INT 0
2424: ST_TO_ADDR
// mpGameSettings := [ ] ;
2425: LD_ADDR_EXP 6
2429: PUSH
2430: EMPTY
2431: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2432: LD_ADDR_EXP 4
2436: PUSH
2437: EMPTY
2438: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2439: LD_ADDR_EXP 5
2443: PUSH
2444: EMPTY
2445: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2446: LD_ADDR_EXP 29
2450: PUSH
2451: LD_INT 2
2453: PUSH
2454: LD_INT 2
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2461: LD_ADDR_EXP 12
2465: PUSH
2466: EMPTY
2467: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2468: LD_ADDR_EXP 13
2472: PUSH
2473: EMPTY
2474: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2475: LD_ADDR_EXP 41
2479: PUSH
2480: EMPTY
2481: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2482: LD_ADDR_EXP 42
2486: PUSH
2487: EMPTY
2488: ST_TO_ADDR
// mpDepots := [ ] ;
2489: LD_ADDR_EXP 14
2493: PUSH
2494: EMPTY
2495: ST_TO_ADDR
// mpBuildings := [ ] ;
2496: LD_ADDR_EXP 17
2500: PUSH
2501: EMPTY
2502: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2503: LD_ADDR_EXP 18
2507: PUSH
2508: EMPTY
2509: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2510: LD_ADDR_EXP 19
2514: PUSH
2515: EMPTY
2516: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2517: LD_ADDR_EXP 20
2521: PUSH
2522: EMPTY
2523: ST_TO_ADDR
// mpStartingResources := [ ] ;
2524: LD_ADDR_EXP 15
2528: PUSH
2529: EMPTY
2530: ST_TO_ADDR
// mpStartPos := [ ] ;
2531: LD_ADDR_EXP 21
2535: PUSH
2536: EMPTY
2537: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2538: LD_ADDR_EXP 22
2542: PUSH
2543: LD_INT 1
2545: NEG
2546: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2547: LD_ADDR_EXP 23
2551: PUSH
2552: EMPTY
2553: ST_TO_ADDR
// mpApemans := [ ] ;
2554: LD_ADDR_EXP 30
2558: PUSH
2559: EMPTY
2560: ST_TO_ADDR
// mpApemansArea := [ ] ;
2561: LD_ADDR_EXP 31
2565: PUSH
2566: EMPTY
2567: ST_TO_ADDR
// mpRespawn := [ ] ;
2568: LD_ADDR_EXP 33
2572: PUSH
2573: EMPTY
2574: ST_TO_ADDR
// mpKingArea := 0 ;
2575: LD_ADDR_EXP 34
2579: PUSH
2580: LD_INT 0
2582: ST_TO_ADDR
// mpPoints := [ ] ;
2583: LD_ADDR_EXP 35
2587: PUSH
2588: EMPTY
2589: ST_TO_ADDR
// mpVehicles := 0 ;
2590: LD_ADDR_EXP 36
2594: PUSH
2595: LD_INT 0
2597: ST_TO_ADDR
// mpShipments := 0 ;
2598: LD_ADDR_EXP 27
2602: PUSH
2603: LD_INT 0
2605: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2606: LD_ADDR_EXP 40
2610: PUSH
2611: EMPTY
2612: PUSH
2613: EMPTY
2614: PUSH
2615: EMPTY
2616: PUSH
2617: EMPTY
2618: PUSH
2619: EMPTY
2620: PUSH
2621: EMPTY
2622: PUSH
2623: EMPTY
2624: PUSH
2625: EMPTY
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2637: LD_ADDR_EXP 32
2641: PUSH
2642: EMPTY
2643: PUSH
2644: EMPTY
2645: PUSH
2646: EMPTY
2647: PUSH
2648: EMPTY
2649: PUSH
2650: EMPTY
2651: PUSH
2652: EMPTY
2653: PUSH
2654: EMPTY
2655: PUSH
2656: EMPTY
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: ST_TO_ADDR
// mpEmissions := 0 ;
2668: LD_ADDR_EXP 37
2672: PUSH
2673: LD_INT 0
2675: ST_TO_ADDR
// mpTeleports := 0 ;
2676: LD_ADDR_EXP 43
2680: PUSH
2681: LD_INT 0
2683: ST_TO_ADDR
// mpArtifacts := 0 ;
2684: LD_ADDR_EXP 44
2688: PUSH
2689: LD_INT 0
2691: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2692: LD_ADDR_EXP 25
2696: PUSH
2697: LD_INT 3
2699: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2700: LD_ADDR_EXP 24
2704: PUSH
2705: LD_INT 15
2707: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2708: LD_ADDR_EXP 38
2712: PUSH
2713: LD_INT 0
2715: ST_TO_ADDR
// mpGameActive := false ;
2716: LD_ADDR_EXP 39
2720: PUSH
2721: LD_INT 0
2723: ST_TO_ADDR
// mpBlockRespThread := false ;
2724: LD_ADDR_EXP 45
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// for i := 1 to 32 do
2732: LD_ADDR_VAR 0 2
2736: PUSH
2737: DOUBLE
2738: LD_INT 1
2740: DEC
2741: ST_TO_ADDR
2742: LD_INT 32
2744: PUSH
2745: FOR_TO
2746: IFFALSE 2773
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2748: LD_ADDR_EXP 6
2752: PUSH
2753: LD_EXP 6
2757: PPUSH
2758: LD_VAR 0 2
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 1
2770: ST_TO_ADDR
2771: GO 2745
2773: POP
2774: POP
// end ;
2775: LD_VAR 0 1
2779: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
2790: PPUSH
2791: PPUSH
2792: PPUSH
2793: PPUSH
2794: PPUSH
2795: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
2796: LD_ADDR_VAR 0 14
2800: PUSH
2801: LD_INT 1
2803: PUSH
2804: LD_INT 2
2806: PUSH
2807: LD_INT 3
2809: PUSH
2810: LD_INT 5
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: LIST
2818: ST_TO_ADDR
// for i in gameTypes do
2819: LD_ADDR_VAR 0 2
2823: PUSH
2824: LD_VAR 0 14
2828: PUSH
2829: FOR_IN
2830: IFFALSE 2839
// disable ( i ) ;
2832: LD_VAR 0 2
2836: DISABLE_MARKED
2837: GO 2829
2839: POP
2840: POP
// if Multiplayer then
2841: LD_OWVAR 4
2845: IFFALSE 3029
// begin mpGameType := mp_game_type ;
2847: LD_ADDR_EXP 3
2851: PUSH
2852: LD_OWVAR 6
2856: ST_TO_ADDR
// your_side := mp_player_side ;
2857: LD_ADDR_OWVAR 2
2861: PUSH
2862: LD_OWVAR 7
2866: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2867: LD_ADDR_EXP 7
2871: PUSH
2872: LD_OWVAR 17
2876: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2877: LD_ADDR_EXP 8
2881: PUSH
2882: LD_OWVAR 15
2886: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2887: LD_ADDR_EXP 9
2891: PUSH
2892: LD_OWVAR 16
2896: ST_TO_ADDR
// mpTeams := mp_teams ;
2897: LD_ADDR_EXP 10
2901: PUSH
2902: LD_OWVAR 12
2906: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2907: LD_ADDR_VAR 0 2
2911: PUSH
2912: DOUBLE
2913: LD_INT 1
2915: DEC
2916: ST_TO_ADDR
2917: LD_EXP 4
2921: PPUSH
2922: CALL 11926 0 1
2926: PUSH
2927: FOR_TO
2928: IFFALSE 3004
// begin setting := mpGameSettingsKeys [ i ] ;
2930: LD_ADDR_VAR 0 12
2934: PUSH
2935: LD_EXP 4
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: ST_TO_ADDR
// if setting then
2946: LD_VAR 0 12
2950: IFFALSE 3002
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
2952: LD_ADDR_EXP 6
2956: PUSH
2957: LD_EXP 6
2961: PPUSH
2962: LD_VAR 0 2
2966: PPUSH
2967: LD_EXP 5
2971: PUSH
2972: LD_VAR 0 2
2976: ARRAY
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: LD_INT 1
2985: MINUS
2986: PPUSH
2987: CALL_OW 426
2991: PUSH
2992: LD_INT 1
2994: PLUS
2995: ARRAY
2996: PPUSH
2997: CALL_OW 1
3001: ST_TO_ADDR
// end ;
3002: GO 2927
3004: POP
3005: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3006: LD_ADDR_EXP 11
3010: PUSH
3011: LD_EXP 8
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: EMPTY
3020: LIST
3021: DIFF
3022: PUSH
3023: LD_INT 1
3025: GREATER
3026: ST_TO_ADDR
// end else
3027: GO 3029
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3029: LD_EXP 3
3033: PPUSH
3034: CALL 806 0 1
// if Count ( mpMarkedAreas ) then
3038: LD_EXP 18
3042: PPUSH
3043: CALL 11926 0 1
3047: IFFALSE 3078
// begin for i in mpMarkedAreas do
3049: LD_ADDR_VAR 0 2
3053: PUSH
3054: LD_EXP 18
3058: PUSH
3059: FOR_IN
3060: IFFALSE 3076
// SetAreaMapShow ( i , 0 ) ;
3062: LD_VAR 0 2
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL_OW 424
3074: GO 3059
3076: POP
3077: POP
// end ; for i := 1 to 8 do
3078: LD_ADDR_VAR 0 2
3082: PUSH
3083: DOUBLE
3084: LD_INT 1
3086: DEC
3087: ST_TO_ADDR
3088: LD_INT 8
3090: PUSH
3091: FOR_TO
3092: IFFALSE 4428
// begin if not mpSidePositions [ i ] then
3094: LD_EXP 7
3098: PUSH
3099: LD_VAR 0 2
3103: ARRAY
3104: NOT
3105: IFFALSE 3109
// continue ;
3107: GO 3091
// side := i ;
3109: LD_ADDR_VAR 0 7
3113: PUSH
3114: LD_VAR 0 2
3118: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3119: LD_ADDR_VAR 0 9
3123: PUSH
3124: LD_EXP 9
3128: PUSH
3129: LD_VAR 0 2
3133: ARRAY
3134: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3135: LD_ADDR_VAR 0 8
3139: PUSH
3140: LD_EXP 7
3144: PUSH
3145: LD_VAR 0 2
3149: ARRAY
3150: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3151: LD_EXP 12
3155: PPUSH
3156: CALL 11926 0 1
3160: IFFALSE 3237
// begin for j in mpOilDeposits [ pos ] do
3162: LD_ADDR_VAR 0 3
3166: PUSH
3167: LD_EXP 12
3171: PUSH
3172: LD_VAR 0 8
3176: ARRAY
3177: PUSH
3178: FOR_IN
3179: IFFALSE 3235
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3181: LD_VAR 0 3
3185: PUSH
3186: LD_INT 1
3188: ARRAY
3189: PPUSH
3190: LD_VAR 0 3
3194: PUSH
3195: LD_INT 2
3197: ARRAY
3198: PPUSH
3199: LD_INT 2
3201: PPUSH
3202: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3206: LD_VAR 0 3
3210: PUSH
3211: LD_INT 1
3213: ARRAY
3214: PPUSH
3215: LD_VAR 0 3
3219: PUSH
3220: LD_INT 2
3222: ARRAY
3223: PPUSH
3224: LD_VAR 0 7
3228: PPUSH
3229: CALL_OW 441
// end ;
3233: GO 3178
3235: POP
3236: POP
// end ; if Count ( mpSibDeposits ) then
3237: LD_EXP 13
3241: PPUSH
3242: CALL 11926 0 1
3246: IFFALSE 3323
// begin for j in mpSibDeposits [ pos ] do
3248: LD_ADDR_VAR 0 3
3252: PUSH
3253: LD_EXP 13
3257: PUSH
3258: LD_VAR 0 8
3262: ARRAY
3263: PUSH
3264: FOR_IN
3265: IFFALSE 3321
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3267: LD_VAR 0 3
3271: PUSH
3272: LD_INT 1
3274: ARRAY
3275: PPUSH
3276: LD_VAR 0 3
3280: PUSH
3281: LD_INT 2
3283: ARRAY
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3292: LD_VAR 0 3
3296: PUSH
3297: LD_INT 1
3299: ARRAY
3300: PPUSH
3301: LD_VAR 0 3
3305: PUSH
3306: LD_INT 2
3308: ARRAY
3309: PPUSH
3310: LD_VAR 0 7
3314: PPUSH
3315: CALL_OW 441
// end ;
3319: GO 3264
3321: POP
3322: POP
// end ; InitBc ;
3323: CALL_OW 21
// InitUc ;
3327: CALL_OW 18
// uc_side := side ;
3331: LD_ADDR_OWVAR 20
3335: PUSH
3336: LD_VAR 0 7
3340: ST_TO_ADDR
// uc_nation := nation ;
3341: LD_ADDR_OWVAR 21
3345: PUSH
3346: LD_VAR 0 9
3350: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3351: LD_EXP 22
3355: PUSH
3356: LD_INT 1
3358: NEG
3359: GREATER
3360: IFFALSE 3519
// begin x := mpStartPos [ pos ] [ 1 ] ;
3362: LD_ADDR_VAR 0 5
3366: PUSH
3367: LD_EXP 21
3371: PUSH
3372: LD_VAR 0 8
3376: ARRAY
3377: PUSH
3378: LD_INT 1
3380: ARRAY
3381: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3382: LD_ADDR_VAR 0 6
3386: PUSH
3387: LD_EXP 21
3391: PUSH
3392: LD_VAR 0 8
3396: ARRAY
3397: PUSH
3398: LD_INT 2
3400: ARRAY
3401: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3402: LD_VAR 0 5
3406: PPUSH
3407: LD_VAR 0 6
3411: PPUSH
3412: LD_INT 12
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3422: LD_ADDR_EXP 23
3426: PUSH
3427: LD_EXP 23
3431: PPUSH
3432: LD_VAR 0 7
3436: PPUSH
3437: LD_VAR 0 7
3441: PPUSH
3442: LD_VAR 0 5
3446: PPUSH
3447: LD_VAR 0 6
3451: PPUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 100
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: LD_INT 70
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 40
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 10
3484: PUSH
3485: LD_INT 25
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 20
3494: PUSH
3495: LD_INT 100
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 418
3513: PPUSH
3514: CALL_OW 1
3518: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3519: LD_EXP 14
3523: PPUSH
3524: CALL 11926 0 1
3528: IFFALSE 3712
// begin if mpGameType = GameTypeSurvival then
3530: LD_EXP 3
3534: PUSH
3535: LD_INT 2
3537: EQUAL
3538: IFFALSE 3558
// begin bc_level := 10 ;
3540: LD_ADDR_OWVAR 43
3544: PUSH
3545: LD_INT 10
3547: ST_TO_ADDR
// bc_type := b_warehouse ;
3548: LD_ADDR_OWVAR 42
3552: PUSH
3553: LD_INT 1
3555: ST_TO_ADDR
// end else
3556: GO 3574
// begin bc_level := 0 ;
3558: LD_ADDR_OWVAR 43
3562: PUSH
3563: LD_INT 0
3565: ST_TO_ADDR
// bc_type := b_depot ;
3566: LD_ADDR_OWVAR 42
3570: PUSH
3571: LD_INT 0
3573: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3574: LD_ADDR_VAR 0 4
3578: PUSH
3579: LD_EXP 14
3583: PUSH
3584: LD_VAR 0 8
3588: ARRAY
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: LD_EXP 14
3598: PUSH
3599: LD_VAR 0 8
3603: ARRAY
3604: PUSH
3605: LD_INT 2
3607: ARRAY
3608: PPUSH
3609: LD_EXP 14
3613: PUSH
3614: LD_VAR 0 8
3618: ARRAY
3619: PUSH
3620: LD_INT 3
3622: ARRAY
3623: PPUSH
3624: CALL_OW 47
3628: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_STRING @
3636: PUSH
3637: LD_VAR 0 7
3641: STR
3642: PPUSH
3643: CALL_OW 500
// if Count ( mpStartingResources ) then
3647: LD_EXP 15
3651: PPUSH
3652: CALL 11926 0 1
3656: IFFALSE 3710
// begin for j := 1 to mpStartingResources do
3658: LD_ADDR_VAR 0 3
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_EXP 15
3672: PUSH
3673: FOR_TO
3674: IFFALSE 3708
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3676: LD_VAR 0 4
3680: PPUSH
3681: CALL_OW 274
3685: PPUSH
3686: LD_VAR 0 3
3690: PPUSH
3691: LD_EXP 15
3695: PUSH
3696: LD_VAR 0 3
3700: ARRAY
3701: PPUSH
3702: CALL_OW 277
3706: GO 3673
3708: POP
3709: POP
// end ; end else
3710: GO 3919
// if Count ( mpStartingResources ) then
3712: LD_EXP 15
3716: PPUSH
3717: CALL 11926 0 1
3721: IFFALSE 3919
// begin x := mpStartPos [ pos ] [ 1 ] ;
3723: LD_ADDR_VAR 0 5
3727: PUSH
3728: LD_EXP 21
3732: PUSH
3733: LD_VAR 0 8
3737: ARRAY
3738: PUSH
3739: LD_INT 1
3741: ARRAY
3742: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3743: LD_ADDR_VAR 0 6
3747: PUSH
3748: LD_EXP 21
3752: PUSH
3753: LD_VAR 0 8
3757: ARRAY
3758: PUSH
3759: LD_INT 2
3761: ARRAY
3762: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3763: LD_ADDR_VAR 0 3
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_EXP 15
3777: PUSH
3778: FOR_TO
3779: IFFALSE 3917
// begin resources := mpStartingResources [ j ] ;
3781: LD_ADDR_VAR 0 13
3785: PUSH
3786: LD_EXP 15
3790: PUSH
3791: LD_VAR 0 3
3795: ARRAY
3796: ST_TO_ADDR
// if resources = 0 then
3797: LD_VAR 0 13
3801: PUSH
3802: LD_INT 0
3804: EQUAL
3805: IFFALSE 3809
// continue ;
3807: GO 3778
// repeat if resources >= 50 then
3809: LD_VAR 0 13
3813: PUSH
3814: LD_INT 50
3816: GREATEREQUAL
3817: IFFALSE 3863
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3819: LD_VAR 0 3
3823: PPUSH
3824: LD_INT 5
3826: PPUSH
3827: LD_VAR 0 5
3831: PPUSH
3832: LD_VAR 0 6
3836: PPUSH
3837: LD_INT 6
3839: PPUSH
3840: LD_INT 0
3842: PPUSH
3843: CALL_OW 60
// resources := resources - 50 ;
3847: LD_ADDR_VAR 0 13
3851: PUSH
3852: LD_VAR 0 13
3856: PUSH
3857: LD_INT 50
3859: MINUS
3860: ST_TO_ADDR
// end else
3861: GO 3905
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3863: LD_VAR 0 3
3867: PPUSH
3868: LD_VAR 0 13
3872: PUSH
3873: LD_INT 10
3875: DIV
3876: PPUSH
3877: LD_VAR 0 5
3881: PPUSH
3882: LD_VAR 0 6
3886: PPUSH
3887: LD_INT 6
3889: PPUSH
3890: LD_INT 0
3892: PPUSH
3893: CALL_OW 60
// resources := 0 ;
3897: LD_ADDR_VAR 0 13
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
// end ; until resources <= 0 ;
3905: LD_VAR 0 13
3909: PUSH
3910: LD_INT 0
3912: LESSEQUAL
3913: IFFALSE 3809
// end ;
3915: GO 3778
3917: POP
3918: POP
// end ; if Count ( mpBuildings ) then
3919: LD_EXP 17
3923: PPUSH
3924: CALL 11926 0 1
3928: IFFALSE 4006
// begin for j in mpBuildings [ pos ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: LD_EXP 17
3939: PUSH
3940: LD_VAR 0 8
3944: ARRAY
3945: PUSH
3946: FOR_IN
3947: IFFALSE 4004
// begin bc_level := 0 ;
3949: LD_ADDR_OWVAR 43
3953: PUSH
3954: LD_INT 0
3956: ST_TO_ADDR
// bc_type := j [ 1 ] ;
3957: LD_ADDR_OWVAR 42
3961: PUSH
3962: LD_VAR 0 3
3966: PUSH
3967: LD_INT 1
3969: ARRAY
3970: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
3971: LD_VAR 0 3
3975: PUSH
3976: LD_INT 2
3978: ARRAY
3979: PPUSH
3980: LD_VAR 0 3
3984: PUSH
3985: LD_INT 3
3987: ARRAY
3988: PPUSH
3989: LD_VAR 0 3
3993: PUSH
3994: LD_INT 4
3996: ARRAY
3997: PPUSH
3998: CALL_OW 47
// end ;
4002: GO 3946
4004: POP
4005: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4006: LD_EXP 26
4010: IFFALSE 4030
4012: PUSH
4013: LD_INT 20
4015: PPUSH
4016: LD_VAR 0 7
4020: PPUSH
4021: CALL_OW 321
4025: PUSH
4026: LD_INT 1
4028: EQUAL
4029: AND
4030: IFFALSE 4047
// SetTech ( tech_SibDet , side , state_researched ) ;
4032: LD_INT 20
4034: PPUSH
4035: LD_VAR 0 7
4039: PPUSH
4040: LD_INT 2
4042: PPUSH
4043: CALL_OW 322
// if not mpArtifacts then
4047: LD_EXP 44
4051: NOT
4052: IFFALSE 4069
// SetTech ( tech_artifact , side , state_disabled ) ;
4054: LD_INT 24
4056: PPUSH
4057: LD_VAR 0 7
4061: PPUSH
4062: LD_INT 0
4064: PPUSH
4065: CALL_OW 322
// if mpSibBomb = 1 then
4069: LD_EXP 28
4073: PUSH
4074: LD_INT 1
4076: EQUAL
4077: IFFALSE 4096
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4079: LD_INT 25
4081: PPUSH
4082: LD_VAR 0 7
4086: PPUSH
4087: LD_INT 1
4089: PPUSH
4090: CALL_OW 322
// end else
4094: GO 4111
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4096: LD_INT 25
4098: PPUSH
4099: LD_VAR 0 7
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 322
// end ; if mpVehicles then
4111: LD_EXP 36
4115: IFFALSE 4214
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4117: LD_ADDR_VAR 0 3
4121: PUSH
4122: LD_VAR 0 7
4126: PPUSH
4127: LD_VAR 0 9
4131: PPUSH
4132: LD_EXP 36
4136: PPUSH
4137: CALL 5338 0 3
4141: PUSH
4142: FOR_IN
4143: IFFALSE 4212
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4145: LD_VAR 0 3
4149: PPUSH
4150: LD_INT 0
4152: PPUSH
4153: LD_INT 5
4155: PPUSH
4156: CALL_OW 12
4160: PPUSH
4161: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_EXP 21
4174: PUSH
4175: LD_VAR 0 8
4179: ARRAY
4180: PUSH
4181: LD_INT 1
4183: ARRAY
4184: PPUSH
4185: LD_EXP 21
4189: PUSH
4190: LD_VAR 0 8
4194: ARRAY
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_INT 12
4202: PPUSH
4203: LD_INT 0
4205: PPUSH
4206: CALL_OW 50
// end ;
4210: GO 4142
4212: POP
4213: POP
// end ; uc_nation := nation ;
4214: LD_ADDR_OWVAR 21
4218: PUSH
4219: LD_VAR 0 9
4223: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4224: LD_ADDR_VAR 0 11
4228: PUSH
4229: LD_VAR 0 7
4233: PPUSH
4234: LD_VAR 0 9
4238: PPUSH
4239: LD_EXP 24
4243: PPUSH
4244: LD_EXP 25
4248: PPUSH
4249: CALL 4840 0 4
4253: ST_TO_ADDR
// for j in team do
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: LD_VAR 0 11
4263: PUSH
4264: FOR_IN
4265: IFFALSE 4314
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4267: LD_VAR 0 3
4271: PPUSH
4272: LD_EXP 21
4276: PUSH
4277: LD_VAR 0 8
4281: ARRAY
4282: PUSH
4283: LD_INT 1
4285: ARRAY
4286: PPUSH
4287: LD_EXP 21
4291: PUSH
4292: LD_VAR 0 8
4296: ARRAY
4297: PUSH
4298: LD_INT 2
4300: ARRAY
4301: PPUSH
4302: LD_INT 12
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 50
4312: GO 4264
4314: POP
4315: POP
// if mpApemans then
4316: LD_EXP 30
4320: IFFALSE 4426
// begin for j := 1 to mpApemans do
4322: LD_ADDR_VAR 0 3
4326: PUSH
4327: DOUBLE
4328: LD_INT 1
4330: DEC
4331: ST_TO_ADDR
4332: LD_EXP 30
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4424
// begin PrepareApeman ( - 5 ) ;
4340: LD_INT 5
4342: NEG
4343: PPUSH
4344: CALL 43985 0 1
// ape := CreateHuman ;
4348: LD_ADDR_VAR 0 10
4352: PUSH
4353: CALL_OW 44
4357: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4358: LD_ADDR_EXP 32
4362: PUSH
4363: LD_EXP 32
4367: PPUSH
4368: LD_VAR 0 8
4372: PPUSH
4373: LD_EXP 32
4377: PUSH
4378: LD_VAR 0 8
4382: ARRAY
4383: PPUSH
4384: LD_VAR 0 10
4388: PPUSH
4389: CALL 47858 0 2
4393: PPUSH
4394: CALL_OW 1
4398: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4399: LD_VAR 0 10
4403: PPUSH
4404: LD_EXP 31
4408: PUSH
4409: LD_VAR 0 8
4413: ARRAY
4414: PPUSH
4415: LD_INT 0
4417: PPUSH
4418: CALL_OW 49
// end ;
4422: GO 4337
4424: POP
4425: POP
// end ; end ;
4426: GO 3091
4428: POP
4429: POP
// if not mpTeamGame then
4430: LD_EXP 11
4434: NOT
4435: IFFALSE 4533
// begin for i := 1 to 8 do
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: DOUBLE
4443: LD_INT 1
4445: DEC
4446: ST_TO_ADDR
4447: LD_INT 8
4449: PUSH
4450: FOR_TO
4451: IFFALSE 4529
// for j := 1 to 8 do
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: DOUBLE
4459: LD_INT 1
4461: DEC
4462: ST_TO_ADDR
4463: LD_INT 8
4465: PUSH
4466: FOR_TO
4467: IFFALSE 4525
// if i <> j then
4469: LD_VAR 0 2
4473: PUSH
4474: LD_VAR 0 3
4478: NONEQUAL
4479: IFFALSE 4503
// SetAttitude ( i , j , att_neutral , true ) else
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_VAR 0 3
4490: PPUSH
4491: LD_INT 0
4493: PPUSH
4494: LD_INT 1
4496: PPUSH
4497: CALL_OW 80
4501: GO 4523
// SetAttitude ( i , j , att_friend , true ) ;
4503: LD_VAR 0 2
4507: PPUSH
4508: LD_VAR 0 3
4512: PPUSH
4513: LD_INT 1
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: CALL_OW 80
4523: GO 4466
4525: POP
4526: POP
4527: GO 4450
4529: POP
4530: POP
// end else
4531: GO 4708
// begin if mpSharedVision then
4533: LD_EXP 16
4537: IFFALSE 4602
// begin for i in mpTeams do
4539: LD_ADDR_VAR 0 2
4543: PUSH
4544: LD_EXP 10
4548: PUSH
4549: FOR_IN
4550: IFFALSE 4600
// for j := 2 to i do
4552: LD_ADDR_VAR 0 3
4556: PUSH
4557: DOUBLE
4558: LD_INT 2
4560: DEC
4561: ST_TO_ADDR
4562: LD_VAR 0 2
4566: PUSH
4567: FOR_TO
4568: IFFALSE 4596
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4570: LD_VAR 0 2
4574: PUSH
4575: LD_VAR 0 3
4579: ARRAY
4580: PPUSH
4581: LD_VAR 0 2
4585: PUSH
4586: LD_INT 1
4588: ARRAY
4589: PPUSH
4590: CALL_OW 343
4594: GO 4567
4596: POP
4597: POP
4598: GO 4549
4600: POP
4601: POP
// end ; for i := 1 to 8 do
4602: LD_ADDR_VAR 0 2
4606: PUSH
4607: DOUBLE
4608: LD_INT 1
4610: DEC
4611: ST_TO_ADDR
4612: LD_INT 8
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4706
// for j := 1 to 8 do
4618: LD_ADDR_VAR 0 3
4622: PUSH
4623: DOUBLE
4624: LD_INT 1
4626: DEC
4627: ST_TO_ADDR
4628: LD_INT 8
4630: PUSH
4631: FOR_TO
4632: IFFALSE 4702
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4634: LD_EXP 8
4638: PUSH
4639: LD_VAR 0 2
4643: ARRAY
4644: PUSH
4645: LD_EXP 8
4649: PUSH
4650: LD_VAR 0 3
4654: ARRAY
4655: EQUAL
4656: IFFALSE 4680
// SetAttitude ( i , j , att_friend , true ) else
4658: LD_VAR 0 2
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 80
4678: GO 4700
// SetAttitude ( i , j , att_enemy , true ) ;
4680: LD_VAR 0 2
4684: PPUSH
4685: LD_VAR 0 3
4689: PPUSH
4690: LD_INT 2
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 80
4700: GO 4631
4702: POP
4703: POP
4704: GO 4615
4706: POP
4707: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4708: LD_ADDR_OWVAR 71
4712: PUSH
4713: LD_EXP 9
4717: PUSH
4718: LD_OWVAR 2
4722: ARRAY
4723: ST_TO_ADDR
// if IAmSpec then
4724: CALL_OW 531
4728: IFFALSE 4769
// begin FogOff ( true ) ;
4730: LD_INT 1
4732: PPUSH
4733: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4737: LD_EXP 29
4741: PUSH
4742: LD_INT 1
4744: ARRAY
4745: PUSH
4746: LD_INT 2
4748: DIV
4749: PPUSH
4750: LD_EXP 29
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PUSH
4759: LD_INT 2
4761: DIV
4762: PPUSH
4763: CALL_OW 86
// end else
4767: GO 4815
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4769: LD_EXP 21
4773: PUSH
4774: LD_EXP 7
4778: PUSH
4779: LD_OWVAR 2
4783: ARRAY
4784: ARRAY
4785: PUSH
4786: LD_INT 1
4788: ARRAY
4789: PPUSH
4790: LD_EXP 21
4794: PUSH
4795: LD_EXP 7
4799: PUSH
4800: LD_OWVAR 2
4804: ARRAY
4805: ARRAY
4806: PUSH
4807: LD_INT 2
4809: ARRAY
4810: PPUSH
4811: CALL_OW 86
// end ; BeginBuildUp ;
4815: CALL 5871 0 0
// enable ( mpActive ) ;
4819: LD_INT 100
4821: ENABLE_MARKED
// enable ( mpGameType ) ;
4822: LD_EXP 3
4826: ENABLE_MARKED
// mpGameActive := true ;
4827: LD_ADDR_EXP 39
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// end ;
4835: LD_VAR 0 1
4839: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
4840: LD_INT 0
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
// result := [ ] ;
4846: LD_ADDR_VAR 0 5
4850: PUSH
4851: EMPTY
4852: ST_TO_ADDR
// class := class_soldier ;
4853: LD_ADDR_VAR 0 8
4857: PUSH
4858: LD_INT 1
4860: ST_TO_ADDR
// uc_side := side ;
4861: LD_ADDR_OWVAR 20
4865: PUSH
4866: LD_VAR 0 1
4870: ST_TO_ADDR
// uc_nation := nation ;
4871: LD_ADDR_OWVAR 21
4875: PUSH
4876: LD_VAR 0 2
4880: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
4881: LD_ADDR_OWVAR 26
4885: PUSH
4886: LD_OWVAR 19
4890: PUSH
4891: LD_VAR 0 1
4895: ARRAY
4896: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
4897: LD_INT 1
4899: PPUSH
4900: LD_INT 2
4902: PPUSH
4903: CALL_OW 12
4907: PPUSH
4908: LD_VAR 0 8
4912: PPUSH
4913: LD_VAR 0 4
4917: PUSH
4918: LD_INT 2
4920: PLUS
4921: PPUSH
4922: CALL_OW 380
// hc_importance := 105 ;
4926: LD_ADDR_OWVAR 32
4930: PUSH
4931: LD_INT 105
4933: ST_TO_ADDR
// if Multiplayer then
4934: LD_OWVAR 4
4938: IFFALSE 4978
// begin hc_gallery := MULTIAVATARS ;
4940: LD_ADDR_OWVAR 33
4944: PUSH
4945: LD_STRING MULTIAVATARS
4947: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
4948: LD_ADDR_OWVAR 34
4952: PUSH
4953: LD_VAR 0 1
4957: PPUSH
4958: CALL_OW 525
4962: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
4963: LD_ADDR_OWVAR 27
4967: PUSH
4968: LD_VAR 0 1
4972: PPUSH
4973: CALL_OW 526
4977: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
4978: LD_ADDR_VAR 0 5
4982: PUSH
4983: LD_VAR 0 5
4987: PPUSH
4988: CALL_OW 44
4992: PPUSH
4993: CALL 47858 0 2
4997: ST_TO_ADDR
// if mpTeamPreset then
4998: LD_LOC 1
5002: IFFALSE 5098
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5004: LD_LOC 1
5008: PUSH
5009: LD_INT 1
5011: ARRAY
5012: PPUSH
5013: LD_VAR 0 5
5017: PUSH
5018: LD_VAR 0 5
5022: ARRAY
5023: PPUSH
5024: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5028: LD_VAR 0 5
5032: PUSH
5033: LD_VAR 0 5
5037: ARRAY
5038: PPUSH
5039: LD_INT 1
5041: PPUSH
5042: LD_LOC 1
5046: PUSH
5047: LD_INT 1
5049: ARRAY
5050: PPUSH
5051: LD_INT 1
5053: PPUSH
5054: CALL_OW 260
5058: PPUSH
5059: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5063: LD_VAR 0 5
5067: PUSH
5068: LD_VAR 0 5
5072: ARRAY
5073: PPUSH
5074: LD_INT 2
5076: PPUSH
5077: LD_LOC 1
5081: PUSH
5082: LD_INT 1
5084: ARRAY
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 260
5093: PPUSH
5094: CALL_OW 239
// end ; InitHc_All ( ) ;
5098: CALL_OW 584
// class := 2 ;
5102: LD_ADDR_VAR 0 8
5106: PUSH
5107: LD_INT 2
5109: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5110: LD_ADDR_VAR 0 6
5114: PUSH
5115: DOUBLE
5116: LD_INT 1
5118: DEC
5119: ST_TO_ADDR
5120: LD_VAR 0 3
5124: PUSH
5125: LD_INT 1
5127: MINUS
5128: PUSH
5129: FOR_TO
5130: IFFALSE 5314
// begin PrepareHuman ( false , class , skill ) ;
5132: LD_INT 0
5134: PPUSH
5135: LD_VAR 0 8
5139: PPUSH
5140: LD_VAR 0 4
5144: PPUSH
5145: CALL_OW 380
// un := CreateHuman ;
5149: LD_ADDR_VAR 0 7
5153: PUSH
5154: CALL_OW 44
5158: ST_TO_ADDR
// result := Join ( result , un ) ;
5159: LD_ADDR_VAR 0 5
5163: PUSH
5164: LD_VAR 0 5
5168: PPUSH
5169: LD_VAR 0 7
5173: PPUSH
5174: CALL 47858 0 2
5178: ST_TO_ADDR
// if mpTeamPreset then
5179: LD_LOC 1
5183: IFFALSE 5279
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5185: LD_LOC 1
5189: PUSH
5190: LD_VAR 0 6
5194: PUSH
5195: LD_INT 1
5197: PLUS
5198: ARRAY
5199: PPUSH
5200: LD_VAR 0 7
5204: PPUSH
5205: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5209: LD_VAR 0 7
5213: PPUSH
5214: LD_INT 1
5216: PPUSH
5217: LD_LOC 1
5221: PUSH
5222: LD_VAR 0 6
5226: PUSH
5227: LD_INT 1
5229: PLUS
5230: ARRAY
5231: PPUSH
5232: LD_INT 1
5234: PPUSH
5235: CALL_OW 260
5239: PPUSH
5240: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5244: LD_VAR 0 7
5248: PPUSH
5249: LD_INT 2
5251: PPUSH
5252: LD_LOC 1
5256: PUSH
5257: LD_VAR 0 6
5261: PUSH
5262: LD_INT 1
5264: PLUS
5265: ARRAY
5266: PPUSH
5267: LD_INT 2
5269: PPUSH
5270: CALL_OW 260
5274: PPUSH
5275: CALL_OW 239
// end ; class := Inc ( class ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 8
5288: PPUSH
5289: CALL 49231 0 1
5293: ST_TO_ADDR
// if class = 5 then
5294: LD_VAR 0 8
5298: PUSH
5299: LD_INT 5
5301: EQUAL
5302: IFFALSE 5312
// class := 1 ;
5304: LD_ADDR_VAR 0 8
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// end ;
5312: GO 5129
5314: POP
5315: POP
// if not mpTeamPreset then
5316: LD_LOC 1
5320: NOT
5321: IFFALSE 5333
// mpTeamPreset := result ;
5323: LD_ADDR_LOC 1
5327: PUSH
5328: LD_VAR 0 5
5332: ST_TO_ADDR
// end ;
5333: LD_VAR 0 5
5337: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5338: LD_INT 0
5340: PPUSH
5341: PPUSH
// result := [ ] ;
5342: LD_ADDR_VAR 0 4
5346: PUSH
5347: EMPTY
5348: ST_TO_ADDR
// if not vehicles then
5349: LD_VAR 0 3
5353: NOT
5354: IFFALSE 5358
// exit ;
5356: GO 5572
// for i := 1 to vehicles [ nation ] do
5358: LD_ADDR_VAR 0 5
5362: PUSH
5363: DOUBLE
5364: LD_INT 1
5366: DEC
5367: ST_TO_ADDR
5368: LD_VAR 0 3
5372: PUSH
5373: LD_VAR 0 2
5377: ARRAY
5378: PUSH
5379: FOR_TO
5380: IFFALSE 5570
// begin uc_side := side ;
5382: LD_ADDR_OWVAR 20
5386: PUSH
5387: LD_VAR 0 1
5391: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5392: LD_VAR 0 3
5396: PUSH
5397: LD_VAR 0 2
5401: ARRAY
5402: PUSH
5403: LD_VAR 0 5
5407: ARRAY
5408: PPUSH
5409: CALL 11926 0 1
5413: PUSH
5414: LD_INT 4
5416: GREATER
5417: IFFALSE 5447
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5419: LD_ADDR_OWVAR 21
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: LD_VAR 0 2
5433: ARRAY
5434: PUSH
5435: LD_VAR 0 5
5439: ARRAY
5440: PUSH
5441: LD_INT 5
5443: ARRAY
5444: ST_TO_ADDR
5445: GO 5457
// uc_nation := nation ;
5447: LD_ADDR_OWVAR 21
5451: PUSH
5452: LD_VAR 0 2
5456: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5457: LD_VAR 0 3
5461: PUSH
5462: LD_VAR 0 2
5466: ARRAY
5467: PUSH
5468: LD_VAR 0 5
5472: ARRAY
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_VAR 0 3
5482: PUSH
5483: LD_VAR 0 2
5487: ARRAY
5488: PUSH
5489: LD_VAR 0 5
5493: ARRAY
5494: PUSH
5495: LD_INT 2
5497: ARRAY
5498: PPUSH
5499: LD_VAR 0 3
5503: PUSH
5504: LD_VAR 0 2
5508: ARRAY
5509: PUSH
5510: LD_VAR 0 5
5514: ARRAY
5515: PUSH
5516: LD_INT 3
5518: ARRAY
5519: PPUSH
5520: LD_VAR 0 3
5524: PUSH
5525: LD_VAR 0 2
5529: ARRAY
5530: PUSH
5531: LD_VAR 0 5
5535: ARRAY
5536: PUSH
5537: LD_INT 4
5539: ARRAY
5540: PPUSH
5541: LD_INT 80
5543: PPUSH
5544: CALL 14688 0 5
// result := Join ( result , CreateVehicle ) ;
5548: LD_ADDR_VAR 0 4
5552: PUSH
5553: LD_VAR 0 4
5557: PPUSH
5558: CALL_OW 45
5562: PPUSH
5563: CALL 47858 0 2
5567: ST_TO_ADDR
// end ;
5568: GO 5379
5570: POP
5571: POP
// end ;
5572: LD_VAR 0 4
5576: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5577: LD_INT 0
5579: PPUSH
5580: PPUSH
// for i in mpBattleFlags do
5581: LD_ADDR_VAR 0 3
5585: PUSH
5586: LD_EXP 23
5590: PUSH
5591: FOR_IN
5592: IFFALSE 5669
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5594: LD_VAR 0 3
5598: PPUSH
5599: LD_INT 1
5601: PUSH
5602: LD_VAR 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 2
5613: PUSH
5614: LD_VAR 0 1
5618: PUSH
5619: LD_REAL  7.00000000000000E-0001
5622: MUL
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: LD_VAR 0 1
5635: PUSH
5636: LD_REAL  4.00000000000000E-0001
5639: MUL
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PUSH
5645: LD_INT 20
5647: PUSH
5648: LD_VAR 0 1
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: PPUSH
5663: CALL_OW 423
5667: GO 5591
5669: POP
5670: POP
// end ;
5671: LD_VAR 0 2
5675: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5676: LD_INT 100
5678: IFFALSE 5773
5680: GO 5682
5682: DISABLE
5683: LD_INT 0
5685: PPUSH
5686: PPUSH
// begin if mpBattleFlag <= 0 then
5687: LD_EXP 22
5691: PUSH
5692: LD_INT 0
5694: LESSEQUAL
5695: IFFALSE 5699
// exit ;
5697: GO 5773
// strength := 100 ;
5699: LD_ADDR_VAR 0 2
5703: PUSH
5704: LD_INT 100
5706: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5707: LD_EXP 22
5711: PPUSH
5712: CALL_OW 67
// strength := Dec ( strength ) ;
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: LD_VAR 0 2
5725: PPUSH
5726: CALL 49253 0 1
5730: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5731: LD_VAR 0 2
5735: PPUSH
5736: CALL 5577 0 1
// until not strength ;
5740: LD_VAR 0 2
5744: NOT
5745: IFFALSE 5707
// for i in mpBattleFlags do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_EXP 23
5756: PUSH
5757: FOR_IN
5758: IFFALSE 5771
// KillBattleFlag ( i ) ;
5760: LD_VAR 0 1
5764: PPUSH
5765: CALL_OW 419
5769: GO 5757
5771: POP
5772: POP
// end ;
5773: PPOPN 2
5775: END
// every 0 0$1 marked mpActive do var side , tmp ;
5776: GO 5778
5778: DISABLE
5779: LD_INT 0
5781: PPUSH
5782: PPUSH
// begin if mpSibBomb <= 1 then
5783: LD_EXP 28
5787: PUSH
5788: LD_INT 1
5790: LESSEQUAL
5791: IFFALSE 5795
// exit ;
5793: GO 5868
// tmp := mpSibBomb ;
5795: LD_ADDR_VAR 0 2
5799: PUSH
5800: LD_EXP 28
5804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5805: LD_INT 35
5807: PPUSH
5808: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5812: LD_ADDR_VAR 0 2
5816: PUSH
5817: LD_VAR 0 2
5821: PUSH
5822: LD_INT 35
5824: MINUS
5825: ST_TO_ADDR
// until not tmp ;
5826: LD_VAR 0 2
5830: NOT
5831: IFFALSE 5805
// for side := 1 to 8 do
5833: LD_ADDR_VAR 0 1
5837: PUSH
5838: DOUBLE
5839: LD_INT 1
5841: DEC
5842: ST_TO_ADDR
5843: LD_INT 8
5845: PUSH
5846: FOR_TO
5847: IFFALSE 5866
// SetTech ( tech_SibFiss , side , state_enabled ) ;
5849: LD_INT 25
5851: PPUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_INT 1
5859: PPUSH
5860: CALL_OW 322
5864: GO 5846
5866: POP
5867: POP
// end ;
5868: PPOPN 2
5870: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
5871: LD_INT 0
5873: PPUSH
5874: PPUSH
5875: PPUSH
// mpBuildUpTimeDelay := 0 ;
5876: LD_ADDR_EXP 46
5880: PUSH
5881: LD_INT 0
5883: ST_TO_ADDR
// if not mpBuildUpTime then
5884: LD_EXP 20
5888: NOT
5889: IFFALSE 5893
// exit ;
5891: GO 6082
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
5893: LD_ADDR_EXP 46
5897: PUSH
5898: LD_INT 8400
5900: PUSH
5901: LD_INT 2100
5903: PUSH
5904: LD_EXP 20
5908: MUL
5909: PLUS
5910: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
5911: LD_ADDR_EXP 47
5915: PUSH
5916: LD_INT 1
5918: ST_TO_ADDR
// for i := 1 to 8 do
5919: LD_ADDR_VAR 0 2
5923: PUSH
5924: DOUBLE
5925: LD_INT 1
5927: DEC
5928: ST_TO_ADDR
5929: LD_INT 8
5931: PUSH
5932: FOR_TO
5933: IFFALSE 6080
// if mpSidePositions [ i ] then
5935: LD_EXP 7
5939: PUSH
5940: LD_VAR 0 2
5944: ARRAY
5945: IFFALSE 6078
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
5947: LD_EXP 19
5951: PUSH
5952: LD_EXP 7
5956: PUSH
5957: LD_VAR 0 2
5961: ARRAY
5962: ARRAY
5963: PPUSH
5964: LD_INT 5
5966: PPUSH
5967: CALL_OW 424
// for j := 1 to 8 do
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: DOUBLE
5977: LD_INT 1
5979: DEC
5980: ST_TO_ADDR
5981: LD_INT 8
5983: PUSH
5984: FOR_TO
5985: IFFALSE 6076
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
5987: LD_EXP 7
5991: PUSH
5992: LD_VAR 0 3
5996: ARRAY
5997: IFFALSE 6046
5999: PUSH
6000: LD_EXP 8
6004: PUSH
6005: LD_VAR 0 2
6009: ARRAY
6010: PUSH
6011: LD_EXP 8
6015: PUSH
6016: LD_VAR 0 3
6020: ARRAY
6021: NONEQUAL
6022: IFTRUE 6045
6024: PUSH
6025: LD_EXP 11
6029: NOT
6030: IFFALSE 6044
6032: PUSH
6033: LD_VAR 0 2
6037: PUSH
6038: LD_VAR 0 3
6042: NONEQUAL
6043: AND
6044: OR
6045: AND
6046: IFFALSE 6074
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6048: LD_VAR 0 3
6052: PPUSH
6053: LD_EXP 19
6057: PUSH
6058: LD_EXP 7
6062: PUSH
6063: LD_VAR 0 2
6067: ARRAY
6068: ARRAY
6069: PPUSH
6070: CALL_OW 333
6074: GO 5984
6076: POP
6077: POP
// end ;
6078: GO 5932
6080: POP
6081: POP
// end ;
6082: LD_VAR 0 1
6086: RET
// function EndBuildUp ; var i , j ; begin
6087: LD_INT 0
6089: PPUSH
6090: PPUSH
6091: PPUSH
// mpBuildUpTimeActive := false ;
6092: LD_ADDR_EXP 47
6096: PUSH
6097: LD_INT 0
6099: ST_TO_ADDR
// for i := 1 to 8 do
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: DOUBLE
6106: LD_INT 1
6108: DEC
6109: ST_TO_ADDR
6110: LD_INT 8
6112: PUSH
6113: FOR_TO
6114: IFFALSE 6261
// if mpSidePositions [ i ] then
6116: LD_EXP 7
6120: PUSH
6121: LD_VAR 0 2
6125: ARRAY
6126: IFFALSE 6259
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6128: LD_EXP 19
6132: PUSH
6133: LD_EXP 7
6137: PUSH
6138: LD_VAR 0 2
6142: ARRAY
6143: ARRAY
6144: PPUSH
6145: LD_INT 0
6147: PPUSH
6148: CALL_OW 424
// for j := 1 to 8 do
6152: LD_ADDR_VAR 0 3
6156: PUSH
6157: DOUBLE
6158: LD_INT 1
6160: DEC
6161: ST_TO_ADDR
6162: LD_INT 8
6164: PUSH
6165: FOR_TO
6166: IFFALSE 6257
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6168: LD_EXP 7
6172: PUSH
6173: LD_VAR 0 3
6177: ARRAY
6178: IFFALSE 6227
6180: PUSH
6181: LD_EXP 8
6185: PUSH
6186: LD_VAR 0 2
6190: ARRAY
6191: PUSH
6192: LD_EXP 8
6196: PUSH
6197: LD_VAR 0 3
6201: ARRAY
6202: NONEQUAL
6203: IFTRUE 6226
6205: PUSH
6206: LD_EXP 11
6210: NOT
6211: IFFALSE 6225
6213: PUSH
6214: LD_VAR 0 2
6218: PUSH
6219: LD_VAR 0 3
6223: NONEQUAL
6224: AND
6225: OR
6226: AND
6227: IFFALSE 6255
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6229: LD_VAR 0 3
6233: PPUSH
6234: LD_EXP 19
6238: PUSH
6239: LD_EXP 7
6243: PUSH
6244: LD_VAR 0 2
6248: ARRAY
6249: ARRAY
6250: PPUSH
6251: CALL_OW 334
6255: GO 6165
6257: POP
6258: POP
// end ;
6259: GO 6113
6261: POP
6262: POP
// end ;
6263: LD_VAR 0 1
6267: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6268: LD_EXP 47
6272: IFFALSE 6451
6274: GO 6276
6276: DISABLE
6277: LD_INT 0
6279: PPUSH
6280: PPUSH
// begin for i := 1 to 8 do
6281: LD_ADDR_VAR 0 1
6285: PUSH
6286: DOUBLE
6287: LD_INT 1
6289: DEC
6290: ST_TO_ADDR
6291: LD_INT 8
6293: PUSH
6294: FOR_TO
6295: IFFALSE 6448
// if mpSidePositions [ i ] then
6297: LD_EXP 7
6301: PUSH
6302: LD_VAR 0 1
6306: ARRAY
6307: IFFALSE 6446
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6309: LD_ADDR_VAR 0 2
6313: PUSH
6314: LD_EXP 19
6318: PUSH
6319: LD_EXP 7
6323: PUSH
6324: LD_VAR 0 1
6328: ARRAY
6329: ARRAY
6330: PPUSH
6331: LD_INT 2
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 21
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 22
6361: PUSH
6362: LD_OWVAR 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PPUSH
6375: CALL_OW 70
6379: PUSH
6380: FOR_IN
6381: IFFALSE 6444
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6383: LD_EXP 8
6387: PUSH
6388: LD_VAR 0 1
6392: ARRAY
6393: PUSH
6394: LD_EXP 8
6398: PUSH
6399: LD_OWVAR 2
6403: ARRAY
6404: NONEQUAL
6405: IFTRUE 6428
6407: PUSH
6408: LD_EXP 11
6412: NOT
6413: IFFALSE 6427
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: LD_OWVAR 2
6425: NONEQUAL
6426: AND
6427: OR
6428: IFFALSE 6442
// ComMoveToArea ( un , BuildUpEscape ) ;
6430: LD_VAR 0 2
6434: PPUSH
6435: LD_INT 3
6437: PPUSH
6438: CALL_OW 113
6442: GO 6380
6444: POP
6445: POP
6446: GO 6294
6448: POP
6449: POP
// enable ;
6450: ENABLE
// end ;
6451: PPOPN 2
6453: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6454: LD_EXP 20
6458: IFFALSE 6508
6460: GO 6462
6462: DISABLE
6463: LD_INT 0
6465: PPUSH
// begin tmp := mpBuildUpTime ;
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_EXP 20
6475: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6476: LD_INT 35
6478: PPUSH
6479: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6483: LD_ADDR_VAR 0 1
6487: PUSH
6488: LD_VAR 0 1
6492: PUSH
6493: LD_INT 35
6495: MINUS
6496: ST_TO_ADDR
// until not tmp ;
6497: LD_VAR 0 1
6501: NOT
6502: IFFALSE 6476
// EndBuildUp ;
6504: CALL 6087 0 0
// end ;
6508: PPOPN 1
6510: END
// every 0 0$1 trigger mpActive marked mpWin do
6511: LD_INT 100
6513: IFFALSE 6547
6515: GO 6517
6517: DISABLE
// begin if IAmServer then
6518: CALL_OW 518
6522: IFFALSE 6531
// wait ( 0 0$3 ) ;
6524: LD_INT 105
6526: PPUSH
6527: CALL_OW 67
// if Multiplayer then
6531: LD_OWVAR 4
6535: IFFALSE 6543
// YouWinInMultiplayer else
6537: CALL_OW 106
6541: GO 6547
// YouWin ;
6543: CALL_OW 103
// end ;
6547: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6548: LD_INT 0
6550: PPUSH
// result := false ;
6551: LD_ADDR_VAR 0 3
6555: PUSH
6556: LD_INT 0
6558: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
6559: LD_VAR 0 1
6563: PUSH
6564: LD_INT 1
6566: DOUBLE
6567: EQUAL
6568: IFTRUE 6578
6570: LD_INT 5
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6578
6576: GO 6651
6578: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6579: LD_ADDR_VAR 0 3
6583: PUSH
6584: LD_INT 22
6586: PUSH
6587: LD_VAR 0 2
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 21
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 33
6611: PUSH
6612: LD_INT 3
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 33
6621: PUSH
6622: LD_INT 5
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: PPUSH
6644: CALL 11926 0 1
6648: ST_TO_ADDR
// end ; GameTypeSurvival :
6649: GO 6890
6651: LD_INT 2
6653: DOUBLE
6654: EQUAL
6655: IFTRUE 6659
6657: GO 6789
6659: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6660: LD_ADDR_VAR 0 3
6664: PUSH
6665: LD_INT 22
6667: PUSH
6668: LD_VAR 0 2
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 2
6679: PUSH
6680: LD_INT 30
6682: PUSH
6683: LD_INT 0
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 30
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 69
6713: PPUSH
6714: CALL 11926 0 1
6718: IFFALSE 6786
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_VAR 0 2
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PUSH
6733: LD_INT 2
6735: PUSH
6736: LD_INT 21
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 33
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 33
6758: PUSH
6759: LD_INT 5
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PPUSH
6776: CALL_OW 69
6780: PPUSH
6781: CALL 11926 0 1
6785: AND
6786: ST_TO_ADDR
// end ; GameTypeKing :
6787: GO 6890
6789: LD_INT 3
6791: DOUBLE
6792: EQUAL
6793: IFTRUE 6797
6795: GO 6889
6797: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_VAR 0 2
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 2
6817: PUSH
6818: LD_INT 21
6820: PUSH
6821: LD_INT 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 33
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 33
6840: PUSH
6841: LD_INT 5
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: PPUSH
6863: CALL 11926 0 1
6867: IFFALSE 6886
6869: PUSH
6870: LD_VAR 0 2
6874: PPUSH
6875: CALL 59822 0 1
6879: PUSH
6880: LD_EXP 35
6884: LESS
6885: AND
6886: ST_TO_ADDR
// end ; end ;
6887: GO 6890
6889: POP
// end ;
6890: LD_VAR 0 3
6894: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
6895: LD_INT 100
6897: IFFALSE 7127
6899: GO 6901
6901: DISABLE
6902: LD_INT 0
6904: PPUSH
6905: PPUSH
// begin if Multiplayer then
6906: LD_OWVAR 4
6910: IFFALSE 6918
// SetPlayerSpectator ( ) else
6912: CALL_OW 572
6916: GO 6927
// FogOff ( your_side ) ;
6918: LD_OWVAR 2
6922: PPUSH
6923: CALL_OW 344
// repeat gameIsOn := false ;
6927: LD_ADDR_VAR 0 1
6931: PUSH
6932: LD_INT 0
6934: ST_TO_ADDR
// for i := 1 to 8 do
6935: LD_ADDR_VAR 0 2
6939: PUSH
6940: DOUBLE
6941: LD_INT 1
6943: DEC
6944: ST_TO_ADDR
6945: LD_INT 8
6947: PUSH
6948: FOR_TO
6949: IFFALSE 7079
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6951: LD_EXP 7
6955: PUSH
6956: LD_VAR 0 2
6960: ARRAY
6961: IFFALSE 6974
6963: PUSH
6964: LD_VAR 0 2
6968: PPUSH
6969: CALL_OW 108
6973: AND
6974: IFFALSE 6988
6976: PUSH
6977: LD_VAR 0 2
6981: PUSH
6982: LD_OWVAR 2
6986: NONEQUAL
6987: AND
6988: IFFALSE 7077
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
6990: LD_EXP 8
6994: PUSH
6995: LD_VAR 0 2
6999: ARRAY
7000: NOT
7001: IFTRUE 7049
7003: PUSH
7004: LD_EXP 8
7008: PUSH
7009: LD_VAR 0 2
7013: ARRAY
7014: PUSH
7015: LD_EXP 8
7019: PUSH
7020: LD_OWVAR 2
7024: ARRAY
7025: NONEQUAL
7026: IFFALSE 7048
7028: PUSH
7029: LD_OWVAR 2
7033: PPUSH
7034: LD_VAR 0 2
7038: PPUSH
7039: CALL_OW 81
7043: PUSH
7044: LD_INT 1
7046: NONEQUAL
7047: AND
7048: OR
7049: IFFALSE 7077
// if HasPowerByGameType ( mpGameType , i ) then
7051: LD_EXP 3
7055: PPUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL 6548 0 2
7065: IFFALSE 7077
// begin gameIsOn := true ;
7067: LD_ADDR_VAR 0 1
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// break ;
7075: GO 7079
// end ;
7077: GO 6948
7079: POP
7080: POP
// wait ( 100 ) ;
7081: LD_INT 100
7083: PPUSH
7084: CALL_OW 67
// until not gameIsOn ;
7088: LD_VAR 0 1
7092: NOT
7093: IFFALSE 6927
// if IAmServer then
7095: CALL_OW 518
7099: IFFALSE 7108
// wait ( 0 0$3 ) ;
7101: LD_INT 105
7103: PPUSH
7104: CALL_OW 67
// if Multiplayer then
7108: LD_OWVAR 4
7112: IFFALSE 7120
// YouLostInMultiplayer else
7114: CALL_OW 107
7118: GO 7127
// YouLost (  ) ;
7120: LD_STRING 
7122: PPUSH
7123: CALL_OW 104
// end ;
7127: PPOPN 2
7129: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7130: LD_EXP 33
7134: IFFALSE 7518
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
7145: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7146: LD_ADDR_VAR 0 5
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: LD_INT 3
7159: PUSH
7160: LD_INT 4
7162: PUSH
7163: LD_INT 5
7165: PUSH
7166: LD_INT 6
7168: PUSH
7169: LD_INT 7
7171: PUSH
7172: LD_INT 8
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7185: LD_INT 350
7187: PPUSH
7188: CALL_OW 67
// for i := 1 to 8 do
7192: LD_ADDR_VAR 0 1
7196: PUSH
7197: DOUBLE
7198: LD_INT 1
7200: DEC
7201: ST_TO_ADDR
7202: LD_INT 8
7204: PUSH
7205: FOR_TO
7206: IFFALSE 7488
// begin j := sides [ i ] ;
7208: LD_ADDR_VAR 0 2
7212: PUSH
7213: LD_VAR 0 5
7217: PUSH
7218: LD_VAR 0 1
7222: ARRAY
7223: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7224: LD_EXP 40
7228: PUSH
7229: LD_VAR 0 2
7233: ARRAY
7234: PPUSH
7235: CALL 11926 0 1
7239: IFFALSE 7252
7241: PUSH
7242: LD_VAR 0 2
7246: PPUSH
7247: CALL_OW 108
7251: AND
7252: IFFALSE 7270
7254: PUSH
7255: LD_EXP 3
7259: PPUSH
7260: LD_VAR 0 2
7264: PPUSH
7265: CALL 6548 0 2
7269: AND
7270: IFFALSE 7486
// begin wait ( mpRespawn div 2 ) ;
7272: LD_EXP 33
7276: PUSH
7277: LD_INT 2
7279: DIV
7280: PPUSH
7281: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7285: LD_ADDR_VAR 0 3
7289: PUSH
7290: LD_INT 22
7292: PUSH
7293: LD_VAR 0 2
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 50
7304: PUSH
7305: EMPTY
7306: LIST
7307: PUSH
7308: LD_INT 2
7310: PUSH
7311: LD_INT 30
7313: PUSH
7314: LD_INT 0
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 30
7323: PUSH
7324: LD_INT 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: LIST
7340: PPUSH
7341: CALL_OW 69
7345: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7346: LD_VAR 0 3
7350: NOT
7351: IFTRUE 7365
7353: PUSH
7354: LD_VAR 0 2
7358: PPUSH
7359: CALL_OW 108
7363: NOT
7364: OR
7365: IFTRUE 7384
7367: PUSH
7368: LD_EXP 3
7372: PPUSH
7373: LD_VAR 0 2
7377: PPUSH
7378: CALL 6548 0 2
7382: NOT
7383: OR
7384: IFFALSE 7388
// continue ;
7386: GO 7205
// spawn := tmp [ 1 ] ;
7388: LD_ADDR_VAR 0 4
7392: PUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_INT 1
7400: ARRAY
7401: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7402: LD_EXP 40
7406: PUSH
7407: LD_VAR 0 2
7411: ARRAY
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: PPUSH
7417: LD_VAR 0 4
7421: PPUSH
7422: CALL_OW 250
7426: PPUSH
7427: LD_VAR 0 4
7431: PPUSH
7432: CALL_OW 251
7436: PPUSH
7437: LD_INT 32
7439: PPUSH
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7447: LD_ADDR_EXP 40
7451: PUSH
7452: LD_EXP 40
7456: PPUSH
7457: LD_VAR 0 2
7461: PPUSH
7462: LD_EXP 40
7466: PUSH
7467: LD_VAR 0 2
7471: ARRAY
7472: PPUSH
7473: LD_INT 1
7475: PPUSH
7476: CALL_OW 3
7480: PPUSH
7481: CALL_OW 1
7485: ST_TO_ADDR
// end ; end ;
7486: GO 7205
7488: POP
7489: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7490: LD_ADDR_VAR 0 5
7494: PUSH
7495: LD_VAR 0 5
7499: PPUSH
7500: LD_INT 1
7502: PPUSH
7503: LD_INT 8
7505: PPUSH
7506: LD_INT 1
7508: PPUSH
7509: CALL 14218 0 4
7513: ST_TO_ADDR
// until false ;
7514: LD_INT 0
7516: IFFALSE 7185
// end ;
7518: PPOPN 5
7520: END
// every 0 0$1 marked mpActive do
7521: GO 7523
7523: DISABLE
// begin enable ;
7524: ENABLE
// if not mpDisplayStrings then
7525: LD_EXP 38
7529: NOT
7530: IFFALSE 7541
// begin display_strings := [ ] ;
7532: LD_ADDR_OWVAR 47
7536: PUSH
7537: EMPTY
7538: ST_TO_ADDR
// exit ;
7539: GO 7551
// end ; display_strings := mpDisplayStrings ;
7541: LD_ADDR_OWVAR 47
7545: PUSH
7546: LD_EXP 38
7550: ST_TO_ADDR
// end ; end_of_file
7551: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
// if GetType ( un ) = unit_vehicle then
7563: LD_VAR 0 1
7567: PPUSH
7568: CALL_OW 247
7572: PUSH
7573: LD_INT 2
7575: EQUAL
7576: IFFALSE 7580
// exit ;
7578: GO 8254
// side := GetSide ( un ) ;
7580: LD_ADDR_VAR 0 9
7584: PUSH
7585: LD_VAR 0 1
7589: PPUSH
7590: CALL_OW 255
7594: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7595: LD_EXP 3
7599: PUSH
7600: LD_INT 2
7602: EQUAL
7603: IFFALSE 7697
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7605: LD_VAR 0 1
7609: PPUSH
7610: CALL_OW 266
7614: PUSH
7615: LD_INT 0
7617: PUSH
7618: LD_INT 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: IN
7625: IFFALSE 7697
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7627: LD_ADDR_VAR 0 3
7631: PUSH
7632: LD_INT 22
7634: PUSH
7635: LD_VAR 0 9
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: LD_INT 21
7649: PUSH
7650: LD_INT 1
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PUSH
7657: LD_INT 33
7659: PUSH
7660: LD_INT 3
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: FOR_IN
7682: IFFALSE 7695
// KillUnit ( i ) ;
7684: LD_VAR 0 3
7688: PPUSH
7689: CALL_OW 66
7693: GO 7681
7695: POP
7696: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 257
7706: PUSH
7707: LD_INT 12
7709: PUSH
7710: LD_INT 17
7712: PUSH
7713: LD_INT 15
7715: PUSH
7716: LD_INT 16
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: IN
7725: IFTRUE 7742
7727: PUSH
7728: LD_VAR 0 1
7732: PPUSH
7733: CALL_OW 263
7737: PUSH
7738: LD_INT 5
7740: EQUAL
7741: OR
7742: IFFALSE 7979
// begin tag := 0 ;
7744: LD_ADDR_VAR 0 5
7748: PUSH
7749: LD_INT 0
7751: ST_TO_ADDR
// for i := 1 to 8 do
7752: LD_ADDR_VAR 0 3
7756: PUSH
7757: DOUBLE
7758: LD_INT 1
7760: DEC
7761: ST_TO_ADDR
7762: LD_INT 8
7764: PUSH
7765: FOR_TO
7766: IFFALSE 7800
// if un in mpApePosIndex [ i ] then
7768: LD_VAR 0 1
7772: PUSH
7773: LD_EXP 32
7777: PUSH
7778: LD_VAR 0 3
7782: ARRAY
7783: IN
7784: IFFALSE 7798
// begin tag := i ;
7786: LD_ADDR_VAR 0 5
7790: PUSH
7791: LD_VAR 0 3
7795: ST_TO_ADDR
// break ;
7796: GO 7800
// end ;
7798: GO 7765
7800: POP
7801: POP
// if not tag then
7802: LD_VAR 0 5
7806: NOT
7807: IFFALSE 7811
// exit ;
7809: GO 8254
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
7811: LD_ADDR_VAR 0 7
7815: PUSH
7816: LD_EXP 31
7820: PUSH
7821: LD_EXP 7
7825: PUSH
7826: LD_VAR 0 5
7830: ARRAY
7831: ARRAY
7832: ST_TO_ADDR
// if not area then
7833: LD_VAR 0 7
7837: NOT
7838: IFFALSE 7842
// exit ;
7840: GO 8254
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
7842: LD_INT 14700
7844: PUSH
7845: LD_VAR 0 1
7849: PUSH
7850: LD_INT 5
7852: MOD
7853: PUSH
7854: LD_INT 1
7856: PLUS
7857: PUSH
7858: LD_INT 700
7860: MUL
7861: PLUS
7862: PPUSH
7863: CALL_OW 67
// repeat wait ( 10 ) ;
7867: LD_INT 10
7869: PPUSH
7870: CALL_OW 67
// until not mpBlockRespThread ;
7874: LD_EXP 45
7878: NOT
7879: IFFALSE 7867
// mpBlockRespThread := true ;
7881: LD_ADDR_EXP 45
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
7889: LD_INT 0
7891: PPUSH
7892: CALL 43985 0 1
// ape := CreateHuman ;
7896: LD_ADDR_VAR 0 4
7900: PUSH
7901: CALL_OW 44
7905: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
7906: LD_ADDR_EXP 32
7910: PUSH
7911: LD_EXP 32
7915: PPUSH
7916: LD_VAR 0 5
7920: PPUSH
7921: LD_EXP 32
7925: PUSH
7926: LD_VAR 0 5
7930: ARRAY
7931: PPUSH
7932: LD_VAR 0 4
7936: PPUSH
7937: CALL 47858 0 2
7941: PPUSH
7942: CALL_OW 1
7946: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
7947: LD_VAR 0 4
7951: PPUSH
7952: LD_VAR 0 7
7956: PPUSH
7957: LD_INT 0
7959: PPUSH
7960: CALL_OW 49
// wait ( 10 ) ;
7964: LD_INT 10
7966: PPUSH
7967: CALL_OW 67
// mpBlockRespThread := false ;
7971: LD_ADDR_EXP 45
7975: PUSH
7976: LD_INT 0
7978: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
7979: LD_VAR 0 1
7983: PPUSH
7984: CALL_OW 247
7988: PUSH
7989: LD_INT 1
7991: EQUAL
7992: IFFALSE 8009
7994: PUSH
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 248
8004: PUSH
8005: LD_INT 0
8007: GREATER
8008: AND
8009: IFFALSE 8254
// begin if not mpRespawn then
8011: LD_EXP 33
8015: NOT
8016: IFFALSE 8020
// exit ;
8018: GO 8254
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8020: LD_VAR 0 9
8024: PPUSH
8025: CALL_OW 108
8029: NOT
8030: IFFALSE 8049
8032: PUSH
8033: LD_EXP 3
8037: PPUSH
8038: LD_VAR 0 9
8042: PPUSH
8043: CALL 6548 0 2
8047: NOT
8048: AND
8049: IFFALSE 8053
// exit ;
8051: GO 8254
// side := GetSide ( un ) ;
8053: LD_ADDR_VAR 0 9
8057: PUSH
8058: LD_VAR 0 1
8062: PPUSH
8063: CALL_OW 255
8067: ST_TO_ADDR
// nation := GetNation ( un ) ;
8068: LD_ADDR_VAR 0 8
8072: PUSH
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 248
8082: ST_TO_ADDR
// class := GetClass ( un ) ;
8083: LD_ADDR_VAR 0 6
8087: PUSH
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 257
8097: ST_TO_ADDR
// if class > 4 then
8098: LD_VAR 0 6
8102: PUSH
8103: LD_INT 4
8105: GREATER
8106: IFFALSE 8116
// class := 1 ;
8108: LD_ADDR_VAR 0 6
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// repeat wait ( 10 ) ;
8116: LD_INT 10
8118: PPUSH
8119: CALL_OW 67
// until not mpBlockRespThread ;
8123: LD_EXP 45
8127: NOT
8128: IFFALSE 8116
// mpBlockRespThread := true ;
8130: LD_ADDR_EXP 45
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// uc_side := side ;
8138: LD_ADDR_OWVAR 20
8142: PUSH
8143: LD_VAR 0 9
8147: ST_TO_ADDR
// uc_nation := nation ;
8148: LD_ADDR_OWVAR 21
8152: PUSH
8153: LD_VAR 0 8
8157: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8158: LD_INT 0
8160: PPUSH
8161: LD_VAR 0 6
8165: PPUSH
8166: LD_INT 2
8168: PPUSH
8169: CALL_OW 380
// un := CreateHuman ;
8173: LD_ADDR_VAR 0 1
8177: PUSH
8178: CALL_OW 44
8182: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8183: LD_ADDR_EXP 40
8187: PUSH
8188: LD_EXP 40
8192: PPUSH
8193: LD_VAR 0 9
8197: PPUSH
8198: LD_EXP 40
8202: PUSH
8203: LD_VAR 0 9
8207: ARRAY
8208: PPUSH
8209: LD_EXP 40
8213: PUSH
8214: LD_VAR 0 9
8218: ARRAY
8219: PUSH
8220: LD_INT 1
8222: PLUS
8223: PPUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 1
8233: PPUSH
8234: CALL_OW 1
8238: ST_TO_ADDR
// wait ( 10 ) ;
8239: LD_INT 10
8241: PPUSH
8242: CALL_OW 67
// mpBlockRespThread := false ;
8246: LD_ADDR_EXP 45
8250: PUSH
8251: LD_INT 0
8253: ST_TO_ADDR
// end ; end ;
8254: LD_VAR 0 2
8258: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8259: LD_INT 0
8261: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8262: LD_VAR 0 1
8266: PPUSH
8267: CALL_OW 266
8271: PUSH
8272: LD_INT 0
8274: PUSH
8275: LD_INT 1
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: IN
8282: IFFALSE 8307
// SetBName ( building , @ & GetSide ( building ) ) ;
8284: LD_VAR 0 1
8288: PPUSH
8289: LD_STRING @
8291: PUSH
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 255
8301: STR
8302: PPUSH
8303: CALL_OW 500
// end ;
8307: LD_VAR 0 2
8311: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8312: LD_INT 0
8314: PPUSH
8315: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8316: LD_EXP 3
8320: PUSH
8321: LD_INT 2
8323: EQUAL
8324: IFFALSE 8348
8326: PUSH
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 266
8336: PUSH
8337: LD_INT 0
8339: PUSH
8340: LD_INT 1
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: IN
8347: AND
8348: IFFALSE 8427
// begin SetSide ( building , oldSide ) ;
8350: LD_VAR 0 1
8354: PPUSH
8355: LD_VAR 0 2
8359: PPUSH
8360: CALL_OW 235
// KillUnit ( building ) ;
8364: LD_VAR 0 1
8368: PPUSH
8369: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8373: LD_ADDR_VAR 0 5
8377: PUSH
8378: LD_INT 22
8380: PUSH
8381: LD_VAR 0 2
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: PUSH
8409: FOR_IN
8410: IFFALSE 8423
// KillUnit ( i ) ;
8412: LD_VAR 0 5
8416: PPUSH
8417: CALL_OW 66
8421: GO 8409
8423: POP
8424: POP
// exit ;
8425: GO 8472
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8427: LD_VAR 0 1
8431: PPUSH
8432: CALL_OW 266
8436: PUSH
8437: LD_INT 0
8439: PUSH
8440: LD_INT 1
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: IN
8447: IFFALSE 8472
// SetBName ( building , @ & GetSide ( building ) ) ;
8449: LD_VAR 0 1
8453: PPUSH
8454: LD_STRING @
8456: PUSH
8457: LD_VAR 0 1
8461: PPUSH
8462: CALL_OW 255
8466: STR
8467: PPUSH
8468: CALL_OW 500
// end ;
8472: LD_VAR 0 4
8476: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
8481: PPUSH
// if mpGameType <> GameTypeFamine then
8482: LD_EXP 3
8486: PUSH
8487: LD_INT 5
8489: NONEQUAL
8490: IFFALSE 8494
// exit ;
8492: GO 8708
// for i := 1 to mpGlobalOilDeposits do
8494: LD_ADDR_VAR 0 6
8498: PUSH
8499: DOUBLE
8500: LD_INT 1
8502: DEC
8503: ST_TO_ADDR
8504: LD_EXP 41
8508: PUSH
8509: FOR_TO
8510: IFFALSE 8706
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8512: LD_EXP 41
8516: PUSH
8517: LD_VAR 0 6
8521: ARRAY
8522: PUSH
8523: LD_INT 1
8525: ARRAY
8526: PPUSH
8527: LD_EXP 41
8531: PUSH
8532: LD_VAR 0 6
8536: ARRAY
8537: PUSH
8538: LD_INT 2
8540: ARRAY
8541: PPUSH
8542: CALL_OW 428
8546: PUSH
8547: LD_VAR 0 1
8551: EQUAL
8552: IFFALSE 8704
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: LD_EXP 41
8563: PUSH
8564: LD_VAR 0 6
8568: ARRAY
8569: PUSH
8570: LD_INT 3
8572: ARRAY
8573: ST_TO_ADDR
// value := Dec ( value ) ;
8574: LD_ADDR_VAR 0 7
8578: PUSH
8579: LD_VAR 0 7
8583: PPUSH
8584: CALL 49253 0 1
8588: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8589: LD_ADDR_EXP 41
8593: PUSH
8594: LD_EXP 41
8598: PPUSH
8599: LD_VAR 0 6
8603: PPUSH
8604: LD_EXP 41
8608: PUSH
8609: LD_VAR 0 6
8613: ARRAY
8614: PPUSH
8615: LD_INT 3
8617: PPUSH
8618: LD_VAR 0 7
8622: PPUSH
8623: CALL_OW 1
8627: PPUSH
8628: CALL_OW 1
8632: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8633: LD_VAR 0 1
8637: PPUSH
8638: LD_VAR 0 7
8642: PPUSH
8643: CALL_OW 505
// if value = 0 then
8647: LD_VAR 0 7
8651: PUSH
8652: LD_INT 0
8654: EQUAL
8655: IFFALSE 8704
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8657: LD_EXP 41
8661: PUSH
8662: LD_VAR 0 6
8666: ARRAY
8667: PUSH
8668: LD_INT 1
8670: ARRAY
8671: PPUSH
8672: LD_EXP 41
8676: PUSH
8677: LD_VAR 0 6
8681: ARRAY
8682: PUSH
8683: LD_INT 2
8685: ARRAY
8686: PPUSH
8687: CALL_OW 63
// KillUnit ( building ) ;
8691: LD_VAR 0 1
8695: PPUSH
8696: CALL_OW 66
// exit ;
8700: POP
8701: POP
8702: GO 8708
// end ; end ; end ;
8704: GO 8509
8706: POP
8707: POP
// end ;
8708: LD_VAR 0 5
8712: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
// if mpGameType <> GameTypeFamine then
8718: LD_EXP 3
8722: PUSH
8723: LD_INT 5
8725: NONEQUAL
8726: IFFALSE 8730
// exit ;
8728: GO 8944
// for i := 1 to mpGlobalSibDeposits do
8730: LD_ADDR_VAR 0 6
8734: PUSH
8735: DOUBLE
8736: LD_INT 1
8738: DEC
8739: ST_TO_ADDR
8740: LD_EXP 42
8744: PUSH
8745: FOR_TO
8746: IFFALSE 8942
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8748: LD_EXP 42
8752: PUSH
8753: LD_VAR 0 6
8757: ARRAY
8758: PUSH
8759: LD_INT 1
8761: ARRAY
8762: PPUSH
8763: LD_EXP 42
8767: PUSH
8768: LD_VAR 0 6
8772: ARRAY
8773: PUSH
8774: LD_INT 2
8776: ARRAY
8777: PPUSH
8778: CALL_OW 428
8782: PUSH
8783: LD_VAR 0 1
8787: EQUAL
8788: IFFALSE 8940
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8790: LD_ADDR_VAR 0 7
8794: PUSH
8795: LD_EXP 42
8799: PUSH
8800: LD_VAR 0 6
8804: ARRAY
8805: PUSH
8806: LD_INT 3
8808: ARRAY
8809: ST_TO_ADDR
// value := Dec ( value ) ;
8810: LD_ADDR_VAR 0 7
8814: PUSH
8815: LD_VAR 0 7
8819: PPUSH
8820: CALL 49253 0 1
8824: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
8825: LD_ADDR_EXP 42
8829: PUSH
8830: LD_EXP 42
8834: PPUSH
8835: LD_VAR 0 6
8839: PPUSH
8840: LD_EXP 42
8844: PUSH
8845: LD_VAR 0 6
8849: ARRAY
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: LD_VAR 0 7
8858: PPUSH
8859: CALL_OW 1
8863: PPUSH
8864: CALL_OW 1
8868: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 7
8878: PPUSH
8879: CALL_OW 505
// if value = 0 then
8883: LD_VAR 0 7
8887: PUSH
8888: LD_INT 0
8890: EQUAL
8891: IFFALSE 8940
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
8893: LD_EXP 42
8897: PUSH
8898: LD_VAR 0 6
8902: ARRAY
8903: PUSH
8904: LD_INT 1
8906: ARRAY
8907: PPUSH
8908: LD_EXP 42
8912: PUSH
8913: LD_VAR 0 6
8917: ARRAY
8918: PUSH
8919: LD_INT 2
8921: ARRAY
8922: PPUSH
8923: CALL_OW 63
// KillUnit ( building ) ;
8927: LD_VAR 0 1
8931: PPUSH
8932: CALL_OW 66
// exit ;
8936: POP
8937: POP
8938: GO 8944
// end ; end ; end ;
8940: GO 8745
8942: POP
8943: POP
// end ; end_of_file
8944: LD_VAR 0 5
8948: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
8949: LD_EXP 39
8953: IFFALSE 8961
8955: PUSH
8956: CALL 9171 0 0
8960: AND
8961: IFFALSE 8969
8963: PUSH
8964: LD_OWVAR 4
8968: AND
8969: IFFALSE 9168
8971: GO 8973
8973: DISABLE
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
// begin canWin := false ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// if not HasPower ( your_side ) then
8986: LD_OWVAR 2
8990: PPUSH
8991: CALL 9213 0 1
8995: NOT
8996: IFFALSE 9007
// begin Multiplayer_Loose_Message ;
8998: CALL_OW 521
// enable ( mpLose ) ;
9002: LD_INT 102
9004: ENABLE_MARKED
// end else
9005: GO 9168
// begin canWin := true ;
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 1
9014: ST_TO_ADDR
// for i := 1 to 8 do
9015: LD_ADDR_VAR 0 1
9019: PUSH
9020: DOUBLE
9021: LD_INT 1
9023: DEC
9024: ST_TO_ADDR
9025: LD_INT 8
9027: PUSH
9028: FOR_TO
9029: IFFALSE 9154
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9031: LD_EXP 7
9035: PUSH
9036: LD_VAR 0 1
9040: ARRAY
9041: IFFALSE 9054
9043: PUSH
9044: LD_VAR 0 1
9048: PPUSH
9049: CALL_OW 108
9053: AND
9054: IFFALSE 9068
9056: PUSH
9057: LD_VAR 0 1
9061: PUSH
9062: LD_OWVAR 2
9066: NONEQUAL
9067: AND
9068: IFFALSE 9152
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9070: LD_EXP 8
9074: PUSH
9075: LD_VAR 0 1
9079: ARRAY
9080: NOT
9081: IFTRUE 9129
9083: PUSH
9084: LD_EXP 8
9088: PUSH
9089: LD_VAR 0 1
9093: ARRAY
9094: PUSH
9095: LD_EXP 8
9099: PUSH
9100: LD_OWVAR 2
9104: ARRAY
9105: NONEQUAL
9106: IFFALSE 9128
9108: PUSH
9109: LD_OWVAR 2
9113: PPUSH
9114: LD_VAR 0 1
9118: PPUSH
9119: CALL_OW 81
9123: PUSH
9124: LD_INT 1
9126: NONEQUAL
9127: AND
9128: OR
9129: IFFALSE 9152
// if HasPower ( i ) then
9131: LD_VAR 0 1
9135: PPUSH
9136: CALL 9213 0 1
9140: IFFALSE 9152
// begin canWin := false ;
9142: LD_ADDR_VAR 0 2
9146: PUSH
9147: LD_INT 0
9149: ST_TO_ADDR
// break ;
9150: GO 9154
// end ;
9152: GO 9028
9154: POP
9155: POP
// if canWin then
9156: LD_VAR 0 2
9160: IFFALSE 9167
// enable ( mpWin ) else
9162: LD_INT 101
9164: ENABLE_MARKED
9165: GO 9168
// enable ;
9167: ENABLE
// end ; end ;
9168: PPOPN 2
9170: END
// function CanWinLoose ; begin
9171: LD_INT 0
9173: PPUSH
// result := true ;
9174: LD_ADDR_VAR 0 1
9178: PUSH
9179: LD_INT 1
9181: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9182: CALL_OW 531
9186: IFFALSE 9198
9188: PUSH
9189: CALL_OW 519
9193: PUSH
9194: LD_INT 1
9196: GREATER
9197: AND
9198: IFFALSE 9208
// result := false ;
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_INT 0
9207: ST_TO_ADDR
// end ;
9208: LD_VAR 0 1
9212: RET
// function HasPower ( i ) ; begin
9213: LD_INT 0
9215: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9216: LD_ADDR_VAR 0 2
9220: PUSH
9221: LD_INT 22
9223: PUSH
9224: LD_VAR 0 1
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 2
9235: PUSH
9236: LD_INT 21
9238: PUSH
9239: LD_INT 1
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 33
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 33
9258: PUSH
9259: LD_INT 5
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PPUSH
9276: CALL_OW 69
9280: ST_TO_ADDR
// end ; end_of_file
9281: LD_VAR 0 2
9285: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9286: LD_EXP 39
9290: IFFALSE 9333
9292: GO 9294
9294: DISABLE
9295: LD_INT 0
9297: PPUSH
// begin for i := 1 to 8 do
9298: LD_ADDR_VAR 0 1
9302: PUSH
9303: DOUBLE
9304: LD_INT 1
9306: DEC
9307: ST_TO_ADDR
9308: LD_INT 8
9310: PUSH
9311: FOR_TO
9312: IFFALSE 9331
// SetRestrict ( b_depot , i , state_disabled ) ;
9314: LD_INT 0
9316: PPUSH
9317: LD_VAR 0 1
9321: PPUSH
9322: LD_INT 0
9324: PPUSH
9325: CALL_OW 324
9329: GO 9311
9331: POP
9332: POP
// end ;
9333: PPOPN 1
9335: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9336: LD_EXP 39
9340: IFFALSE 9348
9342: PUSH
9343: CALL 9558 0 0
9347: AND
9348: IFFALSE 9356
9350: PUSH
9351: LD_OWVAR 4
9355: AND
9356: IFFALSE 9555
9358: GO 9360
9360: DISABLE
9361: LD_INT 0
9363: PPUSH
9364: PPUSH
// begin canWin := false ;
9365: LD_ADDR_VAR 0 2
9369: PUSH
9370: LD_INT 0
9372: ST_TO_ADDR
// if not HasPower ( your_side ) then
9373: LD_OWVAR 2
9377: PPUSH
9378: CALL 9600 0 1
9382: NOT
9383: IFFALSE 9394
// begin Multiplayer_Loose_Message ;
9385: CALL_OW 521
// enable ( mpLose ) ;
9389: LD_INT 102
9391: ENABLE_MARKED
// end else
9392: GO 9555
// begin canWin := true ;
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: LD_INT 1
9401: ST_TO_ADDR
// for i := 1 to 8 do
9402: LD_ADDR_VAR 0 1
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_INT 8
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9541
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9418: LD_EXP 7
9422: PUSH
9423: LD_VAR 0 1
9427: ARRAY
9428: IFFALSE 9441
9430: PUSH
9431: LD_VAR 0 1
9435: PPUSH
9436: CALL_OW 108
9440: AND
9441: IFFALSE 9455
9443: PUSH
9444: LD_VAR 0 1
9448: PUSH
9449: LD_OWVAR 2
9453: NONEQUAL
9454: AND
9455: IFFALSE 9539
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9457: LD_EXP 8
9461: PUSH
9462: LD_VAR 0 1
9466: ARRAY
9467: NOT
9468: IFTRUE 9516
9470: PUSH
9471: LD_EXP 8
9475: PUSH
9476: LD_VAR 0 1
9480: ARRAY
9481: PUSH
9482: LD_EXP 8
9486: PUSH
9487: LD_OWVAR 2
9491: ARRAY
9492: NONEQUAL
9493: IFFALSE 9515
9495: PUSH
9496: LD_OWVAR 2
9500: PPUSH
9501: LD_VAR 0 1
9505: PPUSH
9506: CALL_OW 81
9510: PUSH
9511: LD_INT 1
9513: NONEQUAL
9514: AND
9515: OR
9516: IFFALSE 9539
// if HasPower ( i ) then
9518: LD_VAR 0 1
9522: PPUSH
9523: CALL 9600 0 1
9527: IFFALSE 9539
// begin canWin := false ;
9529: LD_ADDR_VAR 0 2
9533: PUSH
9534: LD_INT 0
9536: ST_TO_ADDR
// break ;
9537: GO 9541
// end ;
9539: GO 9415
9541: POP
9542: POP
// if canWin then
9543: LD_VAR 0 2
9547: IFFALSE 9554
// enable ( mpWin ) else
9549: LD_INT 101
9551: ENABLE_MARKED
9552: GO 9555
// enable ;
9554: ENABLE
// end ; end ;
9555: PPOPN 2
9557: END
// function CanWinLoose ; begin
9558: LD_INT 0
9560: PPUSH
// result := true ;
9561: LD_ADDR_VAR 0 1
9565: PUSH
9566: LD_INT 1
9568: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9569: CALL_OW 531
9573: IFFALSE 9585
9575: PUSH
9576: CALL_OW 519
9580: PUSH
9581: LD_INT 1
9583: GREATER
9584: AND
9585: IFFALSE 9595
// result := false ;
9587: LD_ADDR_VAR 0 1
9591: PUSH
9592: LD_INT 0
9594: ST_TO_ADDR
// end ;
9595: LD_VAR 0 1
9599: RET
// function HasPower ( i ) ; begin
9600: LD_INT 0
9602: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
9603: LD_INT 22
9605: PUSH
9606: LD_VAR 0 1
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: PUSH
9615: LD_INT 2
9617: PUSH
9618: LD_INT 30
9620: PUSH
9621: LD_INT 0
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 30
9630: PUSH
9631: LD_INT 1
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: CALL_OW 69
9651: NOT
9652: IFFALSE 9656
// exit ;
9654: GO 9721
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9656: LD_ADDR_VAR 0 2
9660: PUSH
9661: LD_INT 22
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 2
9675: PUSH
9676: LD_INT 21
9678: PUSH
9679: LD_INT 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 33
9688: PUSH
9689: LD_INT 3
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 33
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: ST_TO_ADDR
// end ; end_of_file
9721: LD_VAR 0 2
9725: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9726: LD_INT 0
9728: PPUSH
9729: PPUSH
// if exist_mode then
9730: LD_VAR 0 2
9734: IFFALSE 9780
// begin unit := CreateCharacter ( prefix & ident ) ;
9736: LD_ADDR_VAR 0 5
9740: PUSH
9741: LD_VAR 0 3
9745: PUSH
9746: LD_VAR 0 1
9750: STR
9751: PPUSH
9752: CALL_OW 34
9756: ST_TO_ADDR
// if unit then
9757: LD_VAR 0 5
9761: IFFALSE 9778
// DeleteCharacters ( prefix & ident ) ;
9763: LD_VAR 0 3
9767: PUSH
9768: LD_VAR 0 1
9772: STR
9773: PPUSH
9774: CALL_OW 40
// end else
9778: GO 9795
// unit := NewCharacter ( ident ) ;
9780: LD_ADDR_VAR 0 5
9784: PUSH
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 25
9794: ST_TO_ADDR
// result := unit ;
9795: LD_ADDR_VAR 0 4
9799: PUSH
9800: LD_VAR 0 5
9804: ST_TO_ADDR
// end ;
9805: LD_VAR 0 4
9809: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
9810: LD_INT 0
9812: PPUSH
9813: PPUSH
// if exist_mode then
9814: LD_VAR 0 2
9818: IFFALSE 9843
// unit := CreateCharacter ( prefix & ident ) else
9820: LD_ADDR_VAR 0 5
9824: PUSH
9825: LD_VAR 0 3
9829: PUSH
9830: LD_VAR 0 1
9834: STR
9835: PPUSH
9836: CALL_OW 34
9840: ST_TO_ADDR
9841: GO 9858
// unit := NewCharacter ( ident ) ;
9843: LD_ADDR_VAR 0 5
9847: PUSH
9848: LD_VAR 0 1
9852: PPUSH
9853: CALL_OW 25
9857: ST_TO_ADDR
// result := unit ;
9858: LD_ADDR_VAR 0 4
9862: PUSH
9863: LD_VAR 0 5
9867: ST_TO_ADDR
// end ;
9868: LD_VAR 0 4
9872: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9873: LD_INT 0
9875: PPUSH
9876: PPUSH
// if not side or not nation then
9877: LD_VAR 0 1
9881: NOT
9882: IFTRUE 9891
9884: PUSH
9885: LD_VAR 0 2
9889: NOT
9890: OR
9891: IFFALSE 9895
// exit ;
9893: GO 10665
// case nation of nation_american :
9895: LD_VAR 0 2
9899: PUSH
9900: LD_INT 1
9902: DOUBLE
9903: EQUAL
9904: IFTRUE 9908
9906: GO 10122
9908: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9909: LD_ADDR_VAR 0 4
9913: PUSH
9914: LD_INT 35
9916: PUSH
9917: LD_INT 45
9919: PUSH
9920: LD_INT 46
9922: PUSH
9923: LD_INT 47
9925: PUSH
9926: LD_INT 82
9928: PUSH
9929: LD_INT 83
9931: PUSH
9932: LD_INT 84
9934: PUSH
9935: LD_INT 85
9937: PUSH
9938: LD_INT 86
9940: PUSH
9941: LD_INT 1
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: LD_INT 6
9949: PUSH
9950: LD_INT 15
9952: PUSH
9953: LD_INT 16
9955: PUSH
9956: LD_INT 7
9958: PUSH
9959: LD_INT 12
9961: PUSH
9962: LD_INT 13
9964: PUSH
9965: LD_INT 10
9967: PUSH
9968: LD_INT 14
9970: PUSH
9971: LD_INT 20
9973: PUSH
9974: LD_INT 21
9976: PUSH
9977: LD_INT 22
9979: PUSH
9980: LD_INT 25
9982: PUSH
9983: LD_INT 32
9985: PUSH
9986: LD_INT 27
9988: PUSH
9989: LD_INT 36
9991: PUSH
9992: LD_INT 69
9994: PUSH
9995: LD_INT 39
9997: PUSH
9998: LD_INT 34
10000: PUSH
10001: LD_INT 40
10003: PUSH
10004: LD_INT 48
10006: PUSH
10007: LD_INT 49
10009: PUSH
10010: LD_INT 50
10012: PUSH
10013: LD_INT 51
10015: PUSH
10016: LD_INT 52
10018: PUSH
10019: LD_INT 53
10021: PUSH
10022: LD_INT 54
10024: PUSH
10025: LD_INT 55
10027: PUSH
10028: LD_INT 56
10030: PUSH
10031: LD_INT 57
10033: PUSH
10034: LD_INT 58
10036: PUSH
10037: LD_INT 59
10039: PUSH
10040: LD_INT 60
10042: PUSH
10043: LD_INT 61
10045: PUSH
10046: LD_INT 62
10048: PUSH
10049: LD_INT 80
10051: PUSH
10052: LD_INT 82
10054: PUSH
10055: LD_INT 83
10057: PUSH
10058: LD_INT 84
10060: PUSH
10061: LD_INT 85
10063: PUSH
10064: LD_INT 86
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 10587
10122: LD_INT 2
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10356
10130: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10131: LD_ADDR_VAR 0 4
10135: PUSH
10136: LD_INT 35
10138: PUSH
10139: LD_INT 45
10141: PUSH
10142: LD_INT 46
10144: PUSH
10145: LD_INT 47
10147: PUSH
10148: LD_INT 82
10150: PUSH
10151: LD_INT 83
10153: PUSH
10154: LD_INT 84
10156: PUSH
10157: LD_INT 85
10159: PUSH
10160: LD_INT 87
10162: PUSH
10163: LD_INT 70
10165: PUSH
10166: LD_INT 1
10168: PUSH
10169: LD_INT 11
10171: PUSH
10172: LD_INT 3
10174: PUSH
10175: LD_INT 4
10177: PUSH
10178: LD_INT 5
10180: PUSH
10181: LD_INT 6
10183: PUSH
10184: LD_INT 15
10186: PUSH
10187: LD_INT 18
10189: PUSH
10190: LD_INT 7
10192: PUSH
10193: LD_INT 17
10195: PUSH
10196: LD_INT 8
10198: PUSH
10199: LD_INT 20
10201: PUSH
10202: LD_INT 21
10204: PUSH
10205: LD_INT 22
10207: PUSH
10208: LD_INT 72
10210: PUSH
10211: LD_INT 26
10213: PUSH
10214: LD_INT 69
10216: PUSH
10217: LD_INT 39
10219: PUSH
10220: LD_INT 40
10222: PUSH
10223: LD_INT 41
10225: PUSH
10226: LD_INT 42
10228: PUSH
10229: LD_INT 43
10231: PUSH
10232: LD_INT 48
10234: PUSH
10235: LD_INT 49
10237: PUSH
10238: LD_INT 50
10240: PUSH
10241: LD_INT 51
10243: PUSH
10244: LD_INT 52
10246: PUSH
10247: LD_INT 53
10249: PUSH
10250: LD_INT 54
10252: PUSH
10253: LD_INT 55
10255: PUSH
10256: LD_INT 56
10258: PUSH
10259: LD_INT 60
10261: PUSH
10262: LD_INT 61
10264: PUSH
10265: LD_INT 62
10267: PUSH
10268: LD_INT 66
10270: PUSH
10271: LD_INT 67
10273: PUSH
10274: LD_INT 68
10276: PUSH
10277: LD_INT 81
10279: PUSH
10280: LD_INT 82
10282: PUSH
10283: LD_INT 83
10285: PUSH
10286: LD_INT 84
10288: PUSH
10289: LD_INT 85
10291: PUSH
10292: LD_INT 87
10294: PUSH
10295: LD_INT 88
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: ST_TO_ADDR
10354: GO 10587
10356: LD_INT 3
10358: DOUBLE
10359: EQUAL
10360: IFTRUE 10364
10362: GO 10586
10364: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10365: LD_ADDR_VAR 0 4
10369: PUSH
10370: LD_INT 46
10372: PUSH
10373: LD_INT 47
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: LD_INT 82
10384: PUSH
10385: LD_INT 83
10387: PUSH
10388: LD_INT 84
10390: PUSH
10391: LD_INT 85
10393: PUSH
10394: LD_INT 86
10396: PUSH
10397: LD_INT 11
10399: PUSH
10400: LD_INT 9
10402: PUSH
10403: LD_INT 20
10405: PUSH
10406: LD_INT 19
10408: PUSH
10409: LD_INT 21
10411: PUSH
10412: LD_INT 24
10414: PUSH
10415: LD_INT 22
10417: PUSH
10418: LD_INT 25
10420: PUSH
10421: LD_INT 28
10423: PUSH
10424: LD_INT 29
10426: PUSH
10427: LD_INT 30
10429: PUSH
10430: LD_INT 31
10432: PUSH
10433: LD_INT 37
10435: PUSH
10436: LD_INT 38
10438: PUSH
10439: LD_INT 32
10441: PUSH
10442: LD_INT 27
10444: PUSH
10445: LD_INT 33
10447: PUSH
10448: LD_INT 69
10450: PUSH
10451: LD_INT 39
10453: PUSH
10454: LD_INT 34
10456: PUSH
10457: LD_INT 40
10459: PUSH
10460: LD_INT 71
10462: PUSH
10463: LD_INT 23
10465: PUSH
10466: LD_INT 44
10468: PUSH
10469: LD_INT 48
10471: PUSH
10472: LD_INT 49
10474: PUSH
10475: LD_INT 50
10477: PUSH
10478: LD_INT 51
10480: PUSH
10481: LD_INT 52
10483: PUSH
10484: LD_INT 53
10486: PUSH
10487: LD_INT 54
10489: PUSH
10490: LD_INT 55
10492: PUSH
10493: LD_INT 56
10495: PUSH
10496: LD_INT 57
10498: PUSH
10499: LD_INT 58
10501: PUSH
10502: LD_INT 59
10504: PUSH
10505: LD_INT 63
10507: PUSH
10508: LD_INT 64
10510: PUSH
10511: LD_INT 65
10513: PUSH
10514: LD_INT 82
10516: PUSH
10517: LD_INT 83
10519: PUSH
10520: LD_INT 84
10522: PUSH
10523: LD_INT 85
10525: PUSH
10526: LD_INT 86
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: ST_TO_ADDR
10584: GO 10587
10586: POP
// if state > - 1 and state < 3 then
10587: LD_VAR 0 3
10591: PUSH
10592: LD_INT 1
10594: NEG
10595: GREATER
10596: IFFALSE 10608
10598: PUSH
10599: LD_VAR 0 3
10603: PUSH
10604: LD_INT 3
10606: LESS
10607: AND
10608: IFFALSE 10665
// for i in result do
10610: LD_ADDR_VAR 0 5
10614: PUSH
10615: LD_VAR 0 4
10619: PUSH
10620: FOR_IN
10621: IFFALSE 10663
// if GetTech ( i , side ) <> state then
10623: LD_VAR 0 5
10627: PPUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: CALL_OW 321
10637: PUSH
10638: LD_VAR 0 3
10642: NONEQUAL
10643: IFFALSE 10661
// result := result diff i ;
10645: LD_ADDR_VAR 0 4
10649: PUSH
10650: LD_VAR 0 4
10654: PUSH
10655: LD_VAR 0 5
10659: DIFF
10660: ST_TO_ADDR
10661: GO 10620
10663: POP
10664: POP
// end ;
10665: LD_VAR 0 4
10669: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10670: LD_INT 0
10672: PPUSH
10673: PPUSH
10674: PPUSH
// result := true ;
10675: LD_ADDR_VAR 0 3
10679: PUSH
10680: LD_INT 1
10682: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10683: LD_ADDR_VAR 0 5
10687: PUSH
10688: LD_VAR 0 2
10692: PPUSH
10693: CALL_OW 480
10697: ST_TO_ADDR
// if not tmp then
10698: LD_VAR 0 5
10702: NOT
10703: IFFALSE 10707
// exit ;
10705: GO 10756
// for i in tmp do
10707: LD_ADDR_VAR 0 4
10711: PUSH
10712: LD_VAR 0 5
10716: PUSH
10717: FOR_IN
10718: IFFALSE 10754
// if GetTech ( i , side ) <> state_researched then
10720: LD_VAR 0 4
10724: PPUSH
10725: LD_VAR 0 1
10729: PPUSH
10730: CALL_OW 321
10734: PUSH
10735: LD_INT 2
10737: NONEQUAL
10738: IFFALSE 10752
// begin result := false ;
10740: LD_ADDR_VAR 0 3
10744: PUSH
10745: LD_INT 0
10747: ST_TO_ADDR
// exit ;
10748: POP
10749: POP
10750: GO 10756
// end ;
10752: GO 10717
10754: POP
10755: POP
// end ;
10756: LD_VAR 0 3
10760: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10761: LD_INT 0
10763: PPUSH
10764: PPUSH
10765: PPUSH
10766: PPUSH
10767: PPUSH
10768: PPUSH
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
10774: PPUSH
10775: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10776: LD_VAR 0 1
10780: NOT
10781: IFTRUE 10798
10783: PUSH
10784: LD_VAR 0 1
10788: PPUSH
10789: CALL_OW 257
10793: PUSH
10794: LD_INT 9
10796: NONEQUAL
10797: OR
10798: IFFALSE 10802
// exit ;
10800: GO 11381
// side := GetSide ( unit ) ;
10802: LD_ADDR_VAR 0 9
10806: PUSH
10807: LD_VAR 0 1
10811: PPUSH
10812: CALL_OW 255
10816: ST_TO_ADDR
// tech_space := tech_spacanom ;
10817: LD_ADDR_VAR 0 12
10821: PUSH
10822: LD_INT 29
10824: ST_TO_ADDR
// tech_time := tech_taurad ;
10825: LD_ADDR_VAR 0 13
10829: PUSH
10830: LD_INT 28
10832: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10833: LD_ADDR_VAR 0 11
10837: PUSH
10838: LD_VAR 0 1
10842: PPUSH
10843: CALL_OW 310
10847: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10848: LD_VAR 0 11
10852: PPUSH
10853: CALL_OW 247
10857: PUSH
10858: LD_INT 2
10860: EQUAL
10861: IFFALSE 10865
// exit ;
10863: GO 11381
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10865: LD_ADDR_VAR 0 8
10869: PUSH
10870: LD_INT 81
10872: PUSH
10873: LD_VAR 0 9
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: LD_INT 21
10887: PUSH
10888: LD_INT 3
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 69
10907: ST_TO_ADDR
// if not tmp then
10908: LD_VAR 0 8
10912: NOT
10913: IFFALSE 10917
// exit ;
10915: GO 11381
// if in_unit then
10917: LD_VAR 0 11
10921: IFFALSE 10945
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10923: LD_ADDR_VAR 0 10
10927: PUSH
10928: LD_VAR 0 8
10932: PPUSH
10933: LD_VAR 0 11
10937: PPUSH
10938: CALL_OW 74
10942: ST_TO_ADDR
10943: GO 10965
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10945: LD_ADDR_VAR 0 10
10949: PUSH
10950: LD_VAR 0 8
10954: PPUSH
10955: LD_VAR 0 1
10959: PPUSH
10960: CALL_OW 74
10964: ST_TO_ADDR
// if not enemy then
10965: LD_VAR 0 10
10969: NOT
10970: IFFALSE 10974
// exit ;
10972: GO 11381
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10974: LD_VAR 0 11
10978: IFFALSE 11000
10980: PUSH
10981: LD_VAR 0 11
10985: PPUSH
10986: LD_VAR 0 10
10990: PPUSH
10991: CALL_OW 296
10995: PUSH
10996: LD_INT 13
10998: GREATER
10999: AND
11000: IFTRUE 11022
11002: PUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: LD_VAR 0 10
11012: PPUSH
11013: CALL_OW 296
11017: PUSH
11018: LD_INT 12
11020: GREATER
11021: OR
11022: IFFALSE 11026
// exit ;
11024: GO 11381
// missile := [ 1 ] ;
11026: LD_ADDR_VAR 0 14
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11037: LD_VAR 0 9
11041: PPUSH
11042: LD_VAR 0 12
11046: PPUSH
11047: CALL_OW 325
11051: IFFALSE 11080
// missile := Replace ( missile , missile + 1 , 2 ) ;
11053: LD_ADDR_VAR 0 14
11057: PUSH
11058: LD_VAR 0 14
11062: PPUSH
11063: LD_VAR 0 14
11067: PUSH
11068: LD_INT 1
11070: PLUS
11071: PPUSH
11072: LD_INT 2
11074: PPUSH
11075: CALL_OW 1
11079: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11080: LD_VAR 0 9
11084: PPUSH
11085: LD_VAR 0 13
11089: PPUSH
11090: CALL_OW 325
11094: IFFALSE 11118
11096: PUSH
11097: LD_VAR 0 10
11101: PPUSH
11102: CALL_OW 255
11106: PPUSH
11107: LD_VAR 0 13
11111: PPUSH
11112: CALL_OW 325
11116: NOT
11117: AND
11118: IFFALSE 11147
// missile := Replace ( missile , missile + 1 , 3 ) ;
11120: LD_ADDR_VAR 0 14
11124: PUSH
11125: LD_VAR 0 14
11129: PPUSH
11130: LD_VAR 0 14
11134: PUSH
11135: LD_INT 1
11137: PLUS
11138: PPUSH
11139: LD_INT 3
11141: PPUSH
11142: CALL_OW 1
11146: ST_TO_ADDR
// if missile < 2 then
11147: LD_VAR 0 14
11151: PUSH
11152: LD_INT 2
11154: LESS
11155: IFFALSE 11159
// exit ;
11157: GO 11381
// x := GetX ( enemy ) ;
11159: LD_ADDR_VAR 0 4
11163: PUSH
11164: LD_VAR 0 10
11168: PPUSH
11169: CALL_OW 250
11173: ST_TO_ADDR
// y := GetY ( enemy ) ;
11174: LD_ADDR_VAR 0 5
11178: PUSH
11179: LD_VAR 0 10
11183: PPUSH
11184: CALL_OW 251
11188: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11189: LD_ADDR_VAR 0 6
11193: PUSH
11194: LD_VAR 0 4
11198: PUSH
11199: LD_INT 1
11201: NEG
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 12
11210: PLUS
11211: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11212: LD_ADDR_VAR 0 7
11216: PUSH
11217: LD_VAR 0 5
11221: PUSH
11222: LD_INT 1
11224: NEG
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 12
11233: PLUS
11234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11235: LD_VAR 0 6
11239: PPUSH
11240: LD_VAR 0 7
11244: PPUSH
11245: CALL_OW 488
11249: NOT
11250: IFFALSE 11272
// begin _x := x ;
11252: LD_ADDR_VAR 0 6
11256: PUSH
11257: LD_VAR 0 4
11261: ST_TO_ADDR
// _y := y ;
11262: LD_ADDR_VAR 0 7
11266: PUSH
11267: LD_VAR 0 5
11271: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11272: LD_ADDR_VAR 0 3
11276: PUSH
11277: LD_INT 1
11279: PPUSH
11280: LD_VAR 0 14
11284: PPUSH
11285: CALL_OW 12
11289: ST_TO_ADDR
// case i of 1 :
11290: LD_VAR 0 3
11294: PUSH
11295: LD_INT 1
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11320
11303: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11304: LD_VAR 0 1
11308: PPUSH
11309: LD_VAR 0 10
11313: PPUSH
11314: CALL_OW 115
11318: GO 11381
11320: LD_INT 2
11322: DOUBLE
11323: EQUAL
11324: IFTRUE 11328
11326: GO 11350
11328: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11329: LD_VAR 0 1
11333: PPUSH
11334: LD_VAR 0 6
11338: PPUSH
11339: LD_VAR 0 7
11343: PPUSH
11344: CALL_OW 153
11348: GO 11381
11350: LD_INT 3
11352: DOUBLE
11353: EQUAL
11354: IFTRUE 11358
11356: GO 11380
11358: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11359: LD_VAR 0 1
11363: PPUSH
11364: LD_VAR 0 6
11368: PPUSH
11369: LD_VAR 0 7
11373: PPUSH
11374: CALL_OW 154
11378: GO 11381
11380: POP
// end ;
11381: LD_VAR 0 2
11385: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
// if not unit or not building then
11394: LD_VAR 0 1
11398: NOT
11399: IFTRUE 11408
11401: PUSH
11402: LD_VAR 0 2
11406: NOT
11407: OR
11408: IFFALSE 11412
// exit ;
11410: GO 11570
// x := GetX ( building ) ;
11412: LD_ADDR_VAR 0 5
11416: PUSH
11417: LD_VAR 0 2
11421: PPUSH
11422: CALL_OW 250
11426: ST_TO_ADDR
// y := GetY ( building ) ;
11427: LD_ADDR_VAR 0 6
11431: PUSH
11432: LD_VAR 0 2
11436: PPUSH
11437: CALL_OW 251
11441: ST_TO_ADDR
// for i := 0 to 5 do
11442: LD_ADDR_VAR 0 4
11446: PUSH
11447: DOUBLE
11448: LD_INT 0
11450: DEC
11451: ST_TO_ADDR
11452: LD_INT 5
11454: PUSH
11455: FOR_TO
11456: IFFALSE 11568
// begin _x := ShiftX ( x , i , 3 ) ;
11458: LD_ADDR_VAR 0 7
11462: PUSH
11463: LD_VAR 0 5
11467: PPUSH
11468: LD_VAR 0 4
11472: PPUSH
11473: LD_INT 3
11475: PPUSH
11476: CALL_OW 272
11480: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11481: LD_ADDR_VAR 0 8
11485: PUSH
11486: LD_VAR 0 6
11490: PPUSH
11491: LD_VAR 0 4
11495: PPUSH
11496: LD_INT 3
11498: PPUSH
11499: CALL_OW 273
11503: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11504: LD_VAR 0 7
11508: PPUSH
11509: LD_VAR 0 8
11513: PPUSH
11514: CALL_OW 488
11518: NOT
11519: IFFALSE 11523
// continue ;
11521: GO 11455
// if HexInfo ( _x , _y ) = 0 then
11523: LD_VAR 0 7
11527: PPUSH
11528: LD_VAR 0 8
11532: PPUSH
11533: CALL_OW 428
11537: PUSH
11538: LD_INT 0
11540: EQUAL
11541: IFFALSE 11566
// begin ComMoveXY ( unit , _x , _y ) ;
11543: LD_VAR 0 1
11547: PPUSH
11548: LD_VAR 0 7
11552: PPUSH
11553: LD_VAR 0 8
11557: PPUSH
11558: CALL_OW 111
// exit ;
11562: POP
11563: POP
11564: GO 11570
// end ; end ;
11566: GO 11455
11568: POP
11569: POP
// end ;
11570: LD_VAR 0 3
11574: RET
// export function ScanBase ( side , base_area ) ; begin
11575: LD_INT 0
11577: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11578: LD_ADDR_VAR 0 3
11582: PUSH
11583: LD_VAR 0 2
11587: PPUSH
11588: LD_INT 81
11590: PUSH
11591: LD_VAR 0 1
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 70
11604: ST_TO_ADDR
// end ;
11605: LD_VAR 0 3
11609: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
// result := false ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_INT 0
11623: ST_TO_ADDR
// side := GetSide ( unit ) ;
11624: LD_ADDR_VAR 0 3
11628: PUSH
11629: LD_VAR 0 1
11633: PPUSH
11634: CALL_OW 255
11638: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11639: LD_ADDR_VAR 0 4
11643: PUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 248
11653: ST_TO_ADDR
// case nat of 1 :
11654: LD_VAR 0 4
11658: PUSH
11659: LD_INT 1
11661: DOUBLE
11662: EQUAL
11663: IFTRUE 11667
11665: GO 11678
11667: POP
// tech := tech_lassight ; 2 :
11668: LD_ADDR_VAR 0 5
11672: PUSH
11673: LD_INT 12
11675: ST_TO_ADDR
11676: GO 11717
11678: LD_INT 2
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11697
11686: POP
// tech := tech_mortar ; 3 :
11687: LD_ADDR_VAR 0 5
11691: PUSH
11692: LD_INT 41
11694: ST_TO_ADDR
11695: GO 11717
11697: LD_INT 3
11699: DOUBLE
11700: EQUAL
11701: IFTRUE 11705
11703: GO 11716
11705: POP
// tech := tech_bazooka ; end ;
11706: LD_ADDR_VAR 0 5
11710: PUSH
11711: LD_INT 44
11713: ST_TO_ADDR
11714: GO 11717
11716: POP
// if Researched ( side , tech ) then
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_VAR 0 5
11726: PPUSH
11727: CALL_OW 325
11731: IFFALSE 11758
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11733: LD_ADDR_VAR 0 2
11737: PUSH
11738: LD_INT 5
11740: PUSH
11741: LD_INT 8
11743: PUSH
11744: LD_INT 9
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: PUSH
11752: LD_VAR 0 4
11756: ARRAY
11757: ST_TO_ADDR
// end ;
11758: LD_VAR 0 2
11762: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11763: LD_INT 0
11765: PPUSH
11766: PPUSH
11767: PPUSH
// if not mines then
11768: LD_VAR 0 2
11772: NOT
11773: IFFALSE 11777
// exit ;
11775: GO 11921
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11777: LD_ADDR_VAR 0 5
11781: PUSH
11782: LD_INT 81
11784: PUSH
11785: LD_VAR 0 1
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: LD_INT 21
11799: PUSH
11800: LD_INT 3
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PPUSH
11815: CALL_OW 69
11819: ST_TO_ADDR
// for i in mines do
11820: LD_ADDR_VAR 0 4
11824: PUSH
11825: LD_VAR 0 2
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11919
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11833: LD_VAR 0 4
11837: PUSH
11838: LD_INT 1
11840: ARRAY
11841: PPUSH
11842: LD_VAR 0 4
11846: PUSH
11847: LD_INT 2
11849: ARRAY
11850: PPUSH
11851: CALL_OW 458
11855: NOT
11856: IFFALSE 11860
// continue ;
11858: GO 11830
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11860: LD_VAR 0 4
11864: PUSH
11865: LD_INT 1
11867: ARRAY
11868: PPUSH
11869: LD_VAR 0 4
11873: PUSH
11874: LD_INT 2
11876: ARRAY
11877: PPUSH
11878: CALL_OW 428
11882: PUSH
11883: LD_VAR 0 5
11887: IN
11888: IFFALSE 11917
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11890: LD_VAR 0 4
11894: PUSH
11895: LD_INT 1
11897: ARRAY
11898: PPUSH
11899: LD_VAR 0 4
11903: PUSH
11904: LD_INT 2
11906: ARRAY
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 456
// end ;
11917: GO 11830
11919: POP
11920: POP
// end ;
11921: LD_VAR 0 3
11925: RET
// export function Count ( array ) ; begin
11926: LD_INT 0
11928: PPUSH
// result := array + 0 ;
11929: LD_ADDR_VAR 0 2
11933: PUSH
11934: LD_VAR 0 1
11938: PUSH
11939: LD_INT 0
11941: PLUS
11942: ST_TO_ADDR
// end ;
11943: LD_VAR 0 2
11947: RET
// export function IsEmpty ( building ) ; begin
11948: LD_INT 0
11950: PPUSH
// if not building then
11951: LD_VAR 0 1
11955: NOT
11956: IFFALSE 11960
// exit ;
11958: GO 12003
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 1
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: LD_VAR 0 1
11977: PPUSH
11978: CALL_OW 255
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: PUSH
11987: LD_INT 58
11989: PUSH
11990: EMPTY
11991: LIST
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 69
12001: IN
12002: ST_TO_ADDR
// end ;
12003: LD_VAR 0 2
12007: RET
// export function IsNotFull ( building ) ; var places ; begin
12008: LD_INT 0
12010: PPUSH
12011: PPUSH
// if not building then
12012: LD_VAR 0 1
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12049
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12021: LD_ADDR_VAR 0 2
12025: PUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: LD_INT 3
12033: PUSH
12034: LD_INT 62
12036: PUSH
12037: EMPTY
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PPUSH
12044: CALL_OW 72
12048: ST_TO_ADDR
// end ;
12049: LD_VAR 0 2
12053: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12054: LD_INT 0
12056: PPUSH
12057: PPUSH
12058: PPUSH
12059: PPUSH
// tmp := [ ] ;
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: EMPTY
12066: ST_TO_ADDR
// list := [ ] ;
12067: LD_ADDR_VAR 0 5
12071: PUSH
12072: EMPTY
12073: ST_TO_ADDR
// for i = 16 to 25 do
12074: LD_ADDR_VAR 0 4
12078: PUSH
12079: DOUBLE
12080: LD_INT 16
12082: DEC
12083: ST_TO_ADDR
12084: LD_INT 25
12086: PUSH
12087: FOR_TO
12088: IFFALSE 12161
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12090: LD_ADDR_VAR 0 3
12094: PUSH
12095: LD_VAR 0 3
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_VAR 0 1
12107: PPUSH
12108: CALL_OW 255
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 91
12119: PUSH
12120: LD_VAR 0 1
12124: PUSH
12125: LD_INT 6
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 30
12135: PUSH
12136: LD_VAR 0 4
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: EMPTY
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: ADD
12158: ST_TO_ADDR
12159: GO 12087
12161: POP
12162: POP
// for i = 1 to tmp do
12163: LD_ADDR_VAR 0 4
12167: PUSH
12168: DOUBLE
12169: LD_INT 1
12171: DEC
12172: ST_TO_ADDR
12173: LD_VAR 0 3
12177: PUSH
12178: FOR_TO
12179: IFFALSE 12267
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12181: LD_ADDR_VAR 0 5
12185: PUSH
12186: LD_VAR 0 5
12190: PUSH
12191: LD_VAR 0 3
12195: PUSH
12196: LD_VAR 0 4
12200: ARRAY
12201: PPUSH
12202: CALL_OW 266
12206: PUSH
12207: LD_VAR 0 3
12211: PUSH
12212: LD_VAR 0 4
12216: ARRAY
12217: PPUSH
12218: CALL_OW 250
12222: PUSH
12223: LD_VAR 0 3
12227: PUSH
12228: LD_VAR 0 4
12232: ARRAY
12233: PPUSH
12234: CALL_OW 251
12238: PUSH
12239: LD_VAR 0 3
12243: PUSH
12244: LD_VAR 0 4
12248: ARRAY
12249: PPUSH
12250: CALL_OW 254
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: ADD
12264: ST_TO_ADDR
12265: GO 12178
12267: POP
12268: POP
// result := list ;
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 5
12278: ST_TO_ADDR
// end ;
12279: LD_VAR 0 2
12283: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12284: LD_INT 0
12286: PPUSH
12287: PPUSH
12288: PPUSH
12289: PPUSH
12290: PPUSH
12291: PPUSH
12292: PPUSH
// if not factory then
12293: LD_VAR 0 1
12297: NOT
12298: IFFALSE 12302
// exit ;
12300: GO 12905
// if control = control_apeman then
12302: LD_VAR 0 4
12306: PUSH
12307: LD_INT 5
12309: EQUAL
12310: IFFALSE 12419
// begin tmp := UnitsInside ( factory ) ;
12312: LD_ADDR_VAR 0 8
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 313
12326: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12327: LD_VAR 0 8
12331: PPUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 12
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 72
12346: NOT
12347: IFFALSE 12357
// control := control_manual ;
12349: LD_ADDR_VAR 0 4
12353: PUSH
12354: LD_INT 1
12356: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12357: LD_ADDR_VAR 0 8
12361: PUSH
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL 12054 0 1
12371: ST_TO_ADDR
// if tmp then
12372: LD_VAR 0 8
12376: IFFALSE 12419
// begin for i in tmp do
12378: LD_ADDR_VAR 0 7
12382: PUSH
12383: LD_VAR 0 8
12387: PUSH
12388: FOR_IN
12389: IFFALSE 12417
// if i [ 1 ] = b_ext_radio then
12391: LD_VAR 0 7
12395: PUSH
12396: LD_INT 1
12398: ARRAY
12399: PUSH
12400: LD_INT 22
12402: EQUAL
12403: IFFALSE 12415
// begin control := control_remote ;
12405: LD_ADDR_VAR 0 4
12409: PUSH
12410: LD_INT 2
12412: ST_TO_ADDR
// break ;
12413: GO 12417
// end ;
12415: GO 12388
12417: POP
12418: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12419: LD_VAR 0 1
12423: PPUSH
12424: LD_VAR 0 2
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_VAR 0 4
12438: PPUSH
12439: LD_VAR 0 5
12443: PPUSH
12444: CALL_OW 448
12448: IFFALSE 12483
// begin result := [ chassis , engine , control , weapon ] ;
12450: LD_ADDR_VAR 0 6
12454: PUSH
12455: LD_VAR 0 2
12459: PUSH
12460: LD_VAR 0 3
12464: PUSH
12465: LD_VAR 0 4
12469: PUSH
12470: LD_VAR 0 5
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: ST_TO_ADDR
// exit ;
12481: GO 12905
// end ; _chassis := AvailableChassisList ( factory ) ;
12483: LD_ADDR_VAR 0 9
12487: PUSH
12488: LD_VAR 0 1
12492: PPUSH
12493: CALL_OW 475
12497: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12498: LD_ADDR_VAR 0 11
12502: PUSH
12503: LD_VAR 0 1
12507: PPUSH
12508: CALL_OW 476
12512: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12513: LD_ADDR_VAR 0 12
12517: PUSH
12518: LD_VAR 0 1
12522: PPUSH
12523: CALL_OW 477
12527: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12528: LD_ADDR_VAR 0 10
12532: PUSH
12533: LD_VAR 0 1
12537: PPUSH
12538: CALL_OW 478
12542: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12543: LD_VAR 0 9
12547: NOT
12548: IFTRUE 12557
12550: PUSH
12551: LD_VAR 0 11
12555: NOT
12556: OR
12557: IFTRUE 12566
12559: PUSH
12560: LD_VAR 0 12
12564: NOT
12565: OR
12566: IFTRUE 12575
12568: PUSH
12569: LD_VAR 0 10
12573: NOT
12574: OR
12575: IFFALSE 12610
// begin result := [ chassis , engine , control , weapon ] ;
12577: LD_ADDR_VAR 0 6
12581: PUSH
12582: LD_VAR 0 2
12586: PUSH
12587: LD_VAR 0 3
12591: PUSH
12592: LD_VAR 0 4
12596: PUSH
12597: LD_VAR 0 5
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: ST_TO_ADDR
// exit ;
12608: GO 12905
// end ; if not chassis in _chassis then
12610: LD_VAR 0 2
12614: PUSH
12615: LD_VAR 0 9
12619: IN
12620: NOT
12621: IFFALSE 12647
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: LD_VAR 0 9
12632: PUSH
12633: LD_INT 1
12635: PPUSH
12636: LD_VAR 0 9
12640: PPUSH
12641: CALL_OW 12
12645: ARRAY
12646: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12647: LD_VAR 0 2
12651: PPUSH
12652: LD_VAR 0 3
12656: PPUSH
12657: CALL 12910 0 2
12661: NOT
12662: IFFALSE 12723
// repeat engine := _engine [ 1 ] ;
12664: LD_ADDR_VAR 0 3
12668: PUSH
12669: LD_VAR 0 11
12673: PUSH
12674: LD_INT 1
12676: ARRAY
12677: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12678: LD_ADDR_VAR 0 11
12682: PUSH
12683: LD_VAR 0 11
12687: PPUSH
12688: LD_INT 1
12690: PPUSH
12691: CALL_OW 3
12695: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12696: LD_VAR 0 2
12700: PPUSH
12701: LD_VAR 0 3
12705: PPUSH
12706: CALL 12910 0 2
12710: IFTRUE 12721
12712: PUSH
12713: LD_VAR 0 11
12717: PUSH
12718: EMPTY
12719: EQUAL
12720: OR
12721: IFFALSE 12664
// if not control in _control then
12723: LD_VAR 0 4
12727: PUSH
12728: LD_VAR 0 12
12732: IN
12733: NOT
12734: IFFALSE 12760
// control := _control [ rand ( 1 , _control ) ] ;
12736: LD_ADDR_VAR 0 4
12740: PUSH
12741: LD_VAR 0 12
12745: PUSH
12746: LD_INT 1
12748: PPUSH
12749: LD_VAR 0 12
12753: PPUSH
12754: CALL_OW 12
12758: ARRAY
12759: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12760: LD_VAR 0 2
12764: PPUSH
12765: LD_VAR 0 5
12769: PPUSH
12770: CALL 13132 0 2
12774: NOT
12775: IFFALSE 12836
// repeat weapon := _weapon [ 1 ] ;
12777: LD_ADDR_VAR 0 5
12781: PUSH
12782: LD_VAR 0 10
12786: PUSH
12787: LD_INT 1
12789: ARRAY
12790: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12791: LD_ADDR_VAR 0 10
12795: PUSH
12796: LD_VAR 0 10
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 3
12808: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12809: LD_VAR 0 2
12813: PPUSH
12814: LD_VAR 0 5
12818: PPUSH
12819: CALL 13132 0 2
12823: IFTRUE 12834
12825: PUSH
12826: LD_VAR 0 10
12830: PUSH
12831: EMPTY
12832: EQUAL
12833: OR
12834: IFFALSE 12777
// result := [ ] ;
12836: LD_ADDR_VAR 0 6
12840: PUSH
12841: EMPTY
12842: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12843: LD_VAR 0 1
12847: PPUSH
12848: LD_VAR 0 2
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_VAR 0 4
12862: PPUSH
12863: LD_VAR 0 5
12867: PPUSH
12868: CALL_OW 448
12872: IFFALSE 12905
// result := [ chassis , engine , control , weapon ] ;
12874: LD_ADDR_VAR 0 6
12878: PUSH
12879: LD_VAR 0 2
12883: PUSH
12884: LD_VAR 0 3
12888: PUSH
12889: LD_VAR 0 4
12893: PUSH
12894: LD_VAR 0 5
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: ST_TO_ADDR
// end ;
12905: LD_VAR 0 6
12909: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12910: LD_INT 0
12912: PPUSH
// if not chassis or not engine then
12913: LD_VAR 0 1
12917: NOT
12918: IFTRUE 12927
12920: PUSH
12921: LD_VAR 0 2
12925: NOT
12926: OR
12927: IFFALSE 12931
// exit ;
12929: GO 13127
// case engine of engine_solar :
12931: LD_VAR 0 2
12935: PUSH
12936: LD_INT 2
12938: DOUBLE
12939: EQUAL
12940: IFTRUE 12944
12942: GO 12982
12944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: LD_INT 11
12952: PUSH
12953: LD_INT 12
12955: PUSH
12956: LD_INT 13
12958: PUSH
12959: LD_INT 14
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: LD_INT 2
12967: PUSH
12968: LD_INT 3
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: ST_TO_ADDR
12980: GO 13111
12982: LD_INT 1
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 13052
12990: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12991: LD_ADDR_VAR 0 3
12995: PUSH
12996: LD_INT 11
12998: PUSH
12999: LD_INT 12
13001: PUSH
13002: LD_INT 13
13004: PUSH
13005: LD_INT 14
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: LD_INT 2
13013: PUSH
13014: LD_INT 3
13016: PUSH
13017: LD_INT 4
13019: PUSH
13020: LD_INT 5
13022: PUSH
13023: LD_INT 21
13025: PUSH
13026: LD_INT 23
13028: PUSH
13029: LD_INT 22
13031: PUSH
13032: LD_INT 24
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: ST_TO_ADDR
13050: GO 13111
13052: LD_INT 3
13054: DOUBLE
13055: EQUAL
13056: IFTRUE 13060
13058: GO 13110
13060: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13061: LD_ADDR_VAR 0 3
13065: PUSH
13066: LD_INT 13
13068: PUSH
13069: LD_INT 14
13071: PUSH
13072: LD_INT 2
13074: PUSH
13075: LD_INT 3
13077: PUSH
13078: LD_INT 4
13080: PUSH
13081: LD_INT 5
13083: PUSH
13084: LD_INT 21
13086: PUSH
13087: LD_INT 22
13089: PUSH
13090: LD_INT 23
13092: PUSH
13093: LD_INT 24
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: ST_TO_ADDR
13108: GO 13111
13110: POP
// result := ( chassis in result ) ;
13111: LD_ADDR_VAR 0 3
13115: PUSH
13116: LD_VAR 0 1
13120: PUSH
13121: LD_VAR 0 3
13125: IN
13126: ST_TO_ADDR
// end ;
13127: LD_VAR 0 3
13131: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13132: LD_INT 0
13134: PPUSH
// if not chassis or not weapon then
13135: LD_VAR 0 1
13139: NOT
13140: IFTRUE 13149
13142: PUSH
13143: LD_VAR 0 2
13147: NOT
13148: OR
13149: IFFALSE 13153
// exit ;
13151: GO 14213
// case weapon of us_machine_gun :
13153: LD_VAR 0 2
13157: PUSH
13158: LD_INT 2
13160: DOUBLE
13161: EQUAL
13162: IFTRUE 13166
13164: GO 13196
13166: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13167: LD_ADDR_VAR 0 3
13171: PUSH
13172: LD_INT 1
13174: PUSH
13175: LD_INT 2
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: LD_INT 4
13183: PUSH
13184: LD_INT 5
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: ST_TO_ADDR
13194: GO 14197
13196: LD_INT 3
13198: DOUBLE
13199: EQUAL
13200: IFTRUE 13204
13202: GO 13234
13204: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13205: LD_ADDR_VAR 0 3
13209: PUSH
13210: LD_INT 1
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: LD_INT 4
13221: PUSH
13222: LD_INT 5
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: ST_TO_ADDR
13232: GO 14197
13234: LD_INT 11
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13272
13242: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 2
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 4
13259: PUSH
13260: LD_INT 5
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: ST_TO_ADDR
13270: GO 14197
13272: LD_INT 4
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13306
13280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13281: LD_ADDR_VAR 0 3
13285: PUSH
13286: LD_INT 2
13288: PUSH
13289: LD_INT 3
13291: PUSH
13292: LD_INT 4
13294: PUSH
13295: LD_INT 5
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: ST_TO_ADDR
13304: GO 14197
13306: LD_INT 5
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13340
13314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13315: LD_ADDR_VAR 0 3
13319: PUSH
13320: LD_INT 2
13322: PUSH
13323: LD_INT 3
13325: PUSH
13326: LD_INT 4
13328: PUSH
13329: LD_INT 5
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 14197
13340: LD_INT 9
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13374
13348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13349: LD_ADDR_VAR 0 3
13353: PUSH
13354: LD_INT 2
13356: PUSH
13357: LD_INT 3
13359: PUSH
13360: LD_INT 4
13362: PUSH
13363: LD_INT 5
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: ST_TO_ADDR
13372: GO 14197
13374: LD_INT 7
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13408
13382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_INT 2
13390: PUSH
13391: LD_INT 3
13393: PUSH
13394: LD_INT 4
13396: PUSH
13397: LD_INT 5
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: ST_TO_ADDR
13406: GO 14197
13408: LD_INT 12
13410: DOUBLE
13411: EQUAL
13412: IFTRUE 13416
13414: GO 13442
13416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13417: LD_ADDR_VAR 0 3
13421: PUSH
13422: LD_INT 2
13424: PUSH
13425: LD_INT 3
13427: PUSH
13428: LD_INT 4
13430: PUSH
13431: LD_INT 5
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: ST_TO_ADDR
13440: GO 14197
13442: LD_INT 13
13444: DOUBLE
13445: EQUAL
13446: IFTRUE 13450
13448: GO 13476
13450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_INT 2
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: LD_INT 4
13464: PUSH
13465: LD_INT 5
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: ST_TO_ADDR
13474: GO 14197
13476: LD_INT 14
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13502
13484: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13485: LD_ADDR_VAR 0 3
13489: PUSH
13490: LD_INT 4
13492: PUSH
13493: LD_INT 5
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: ST_TO_ADDR
13500: GO 14197
13502: LD_INT 6
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13528
13510: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13511: LD_ADDR_VAR 0 3
13515: PUSH
13516: LD_INT 4
13518: PUSH
13519: LD_INT 5
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: ST_TO_ADDR
13526: GO 14197
13528: LD_INT 10
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13554
13536: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13537: LD_ADDR_VAR 0 3
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: ST_TO_ADDR
13552: GO 14197
13554: LD_INT 22
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13588
13562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13563: LD_ADDR_VAR 0 3
13567: PUSH
13568: LD_INT 11
13570: PUSH
13571: LD_INT 12
13573: PUSH
13574: LD_INT 13
13576: PUSH
13577: LD_INT 14
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: ST_TO_ADDR
13586: GO 14197
13588: LD_INT 23
13590: DOUBLE
13591: EQUAL
13592: IFTRUE 13596
13594: GO 13622
13596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13597: LD_ADDR_VAR 0 3
13601: PUSH
13602: LD_INT 11
13604: PUSH
13605: LD_INT 12
13607: PUSH
13608: LD_INT 13
13610: PUSH
13611: LD_INT 14
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: ST_TO_ADDR
13620: GO 14197
13622: LD_INT 24
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13656
13630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_INT 11
13638: PUSH
13639: LD_INT 12
13641: PUSH
13642: LD_INT 13
13644: PUSH
13645: LD_INT 14
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: ST_TO_ADDR
13654: GO 14197
13656: LD_INT 30
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13690
13664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13665: LD_ADDR_VAR 0 3
13669: PUSH
13670: LD_INT 11
13672: PUSH
13673: LD_INT 12
13675: PUSH
13676: LD_INT 13
13678: PUSH
13679: LD_INT 14
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: ST_TO_ADDR
13688: GO 14197
13690: LD_INT 25
13692: DOUBLE
13693: EQUAL
13694: IFTRUE 13698
13696: GO 13716
13698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13699: LD_ADDR_VAR 0 3
13703: PUSH
13704: LD_INT 13
13706: PUSH
13707: LD_INT 14
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: ST_TO_ADDR
13714: GO 14197
13716: LD_INT 27
13718: DOUBLE
13719: EQUAL
13720: IFTRUE 13724
13722: GO 13742
13724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13725: LD_ADDR_VAR 0 3
13729: PUSH
13730: LD_INT 13
13732: PUSH
13733: LD_INT 14
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: ST_TO_ADDR
13740: GO 14197
13742: LD_INT 92
13744: DOUBLE
13745: EQUAL
13746: IFTRUE 13750
13748: GO 13776
13750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13751: LD_ADDR_VAR 0 3
13755: PUSH
13756: LD_INT 11
13758: PUSH
13759: LD_INT 12
13761: PUSH
13762: LD_INT 13
13764: PUSH
13765: LD_INT 14
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
13774: GO 14197
13776: LD_INT 28
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 13802
13784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_INT 13
13792: PUSH
13793: LD_INT 14
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: ST_TO_ADDR
13800: GO 14197
13802: LD_INT 29
13804: DOUBLE
13805: EQUAL
13806: IFTRUE 13810
13808: GO 13828
13810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13811: LD_ADDR_VAR 0 3
13815: PUSH
13816: LD_INT 13
13818: PUSH
13819: LD_INT 14
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: ST_TO_ADDR
13826: GO 14197
13828: LD_INT 31
13830: DOUBLE
13831: EQUAL
13832: IFTRUE 13836
13834: GO 13854
13836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: LD_INT 13
13844: PUSH
13845: LD_INT 14
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: ST_TO_ADDR
13852: GO 14197
13854: LD_INT 26
13856: DOUBLE
13857: EQUAL
13858: IFTRUE 13862
13860: GO 13880
13862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13863: LD_ADDR_VAR 0 3
13867: PUSH
13868: LD_INT 13
13870: PUSH
13871: LD_INT 14
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: ST_TO_ADDR
13878: GO 14197
13880: LD_INT 42
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13914
13888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13889: LD_ADDR_VAR 0 3
13893: PUSH
13894: LD_INT 21
13896: PUSH
13897: LD_INT 22
13899: PUSH
13900: LD_INT 23
13902: PUSH
13903: LD_INT 24
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: ST_TO_ADDR
13912: GO 14197
13914: LD_INT 43
13916: DOUBLE
13917: EQUAL
13918: IFTRUE 13922
13920: GO 13948
13922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13923: LD_ADDR_VAR 0 3
13927: PUSH
13928: LD_INT 21
13930: PUSH
13931: LD_INT 22
13933: PUSH
13934: LD_INT 23
13936: PUSH
13937: LD_INT 24
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: ST_TO_ADDR
13946: GO 14197
13948: LD_INT 44
13950: DOUBLE
13951: EQUAL
13952: IFTRUE 13956
13954: GO 13982
13956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13957: LD_ADDR_VAR 0 3
13961: PUSH
13962: LD_INT 21
13964: PUSH
13965: LD_INT 22
13967: PUSH
13968: LD_INT 23
13970: PUSH
13971: LD_INT 24
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: ST_TO_ADDR
13980: GO 14197
13982: LD_INT 45
13984: DOUBLE
13985: EQUAL
13986: IFTRUE 13990
13988: GO 14016
13990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13991: LD_ADDR_VAR 0 3
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 22
14001: PUSH
14002: LD_INT 23
14004: PUSH
14005: LD_INT 24
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: ST_TO_ADDR
14014: GO 14197
14016: LD_INT 49
14018: DOUBLE
14019: EQUAL
14020: IFTRUE 14024
14022: GO 14050
14024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14025: LD_ADDR_VAR 0 3
14029: PUSH
14030: LD_INT 21
14032: PUSH
14033: LD_INT 22
14035: PUSH
14036: LD_INT 23
14038: PUSH
14039: LD_INT 24
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: ST_TO_ADDR
14048: GO 14197
14050: LD_INT 51
14052: DOUBLE
14053: EQUAL
14054: IFTRUE 14058
14056: GO 14084
14058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14059: LD_ADDR_VAR 0 3
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 22
14069: PUSH
14070: LD_INT 23
14072: PUSH
14073: LD_INT 24
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: ST_TO_ADDR
14082: GO 14197
14084: LD_INT 52
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14118
14092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14093: LD_ADDR_VAR 0 3
14097: PUSH
14098: LD_INT 21
14100: PUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 23
14106: PUSH
14107: LD_INT 24
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: ST_TO_ADDR
14116: GO 14197
14118: LD_INT 53
14120: DOUBLE
14121: EQUAL
14122: IFTRUE 14126
14124: GO 14144
14126: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14127: LD_ADDR_VAR 0 3
14131: PUSH
14132: LD_INT 23
14134: PUSH
14135: LD_INT 24
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: ST_TO_ADDR
14142: GO 14197
14144: LD_INT 46
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14170
14152: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14153: LD_ADDR_VAR 0 3
14157: PUSH
14158: LD_INT 23
14160: PUSH
14161: LD_INT 24
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: ST_TO_ADDR
14168: GO 14197
14170: LD_INT 47
14172: DOUBLE
14173: EQUAL
14174: IFTRUE 14178
14176: GO 14196
14178: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14179: LD_ADDR_VAR 0 3
14183: PUSH
14184: LD_INT 23
14186: PUSH
14187: LD_INT 24
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: ST_TO_ADDR
14194: GO 14197
14196: POP
// result := ( chassis in result ) ;
14197: LD_ADDR_VAR 0 3
14201: PUSH
14202: LD_VAR 0 1
14206: PUSH
14207: LD_VAR 0 3
14211: IN
14212: ST_TO_ADDR
// end ;
14213: LD_VAR 0 3
14217: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14218: LD_INT 0
14220: PPUSH
14221: PPUSH
14222: PPUSH
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
// result := array ;
14227: LD_ADDR_VAR 0 5
14231: PUSH
14232: LD_VAR 0 1
14236: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14237: LD_VAR 0 1
14241: NOT
14242: IFTRUE 14251
14244: PUSH
14245: LD_VAR 0 2
14249: NOT
14250: OR
14251: IFTRUE 14260
14253: PUSH
14254: LD_VAR 0 3
14258: NOT
14259: OR
14260: IFTRUE 14274
14262: PUSH
14263: LD_VAR 0 2
14267: PUSH
14268: LD_VAR 0 1
14272: GREATER
14273: OR
14274: IFTRUE 14288
14276: PUSH
14277: LD_VAR 0 3
14281: PUSH
14282: LD_VAR 0 1
14286: GREATER
14287: OR
14288: IFFALSE 14292
// exit ;
14290: GO 14588
// if direction then
14292: LD_VAR 0 4
14296: IFFALSE 14360
// begin d := 1 ;
14298: LD_ADDR_VAR 0 9
14302: PUSH
14303: LD_INT 1
14305: ST_TO_ADDR
// if i_from > i_to then
14306: LD_VAR 0 2
14310: PUSH
14311: LD_VAR 0 3
14315: GREATER
14316: IFFALSE 14342
// length := ( array - i_from ) + i_to else
14318: LD_ADDR_VAR 0 11
14322: PUSH
14323: LD_VAR 0 1
14327: PUSH
14328: LD_VAR 0 2
14332: MINUS
14333: PUSH
14334: LD_VAR 0 3
14338: PLUS
14339: ST_TO_ADDR
14340: GO 14358
// length := i_to - i_from ;
14342: LD_ADDR_VAR 0 11
14346: PUSH
14347: LD_VAR 0 3
14351: PUSH
14352: LD_VAR 0 2
14356: MINUS
14357: ST_TO_ADDR
// end else
14358: GO 14421
// begin d := - 1 ;
14360: LD_ADDR_VAR 0 9
14364: PUSH
14365: LD_INT 1
14367: NEG
14368: ST_TO_ADDR
// if i_from > i_to then
14369: LD_VAR 0 2
14373: PUSH
14374: LD_VAR 0 3
14378: GREATER
14379: IFFALSE 14399
// length := i_from - i_to else
14381: LD_ADDR_VAR 0 11
14385: PUSH
14386: LD_VAR 0 2
14390: PUSH
14391: LD_VAR 0 3
14395: MINUS
14396: ST_TO_ADDR
14397: GO 14421
// length := ( array - i_to ) + i_from ;
14399: LD_ADDR_VAR 0 11
14403: PUSH
14404: LD_VAR 0 1
14408: PUSH
14409: LD_VAR 0 3
14413: MINUS
14414: PUSH
14415: LD_VAR 0 2
14419: PLUS
14420: ST_TO_ADDR
// end ; if not length then
14421: LD_VAR 0 11
14425: NOT
14426: IFFALSE 14430
// exit ;
14428: GO 14588
// tmp := array ;
14430: LD_ADDR_VAR 0 10
14434: PUSH
14435: LD_VAR 0 1
14439: ST_TO_ADDR
// for i = 1 to length do
14440: LD_ADDR_VAR 0 6
14444: PUSH
14445: DOUBLE
14446: LD_INT 1
14448: DEC
14449: ST_TO_ADDR
14450: LD_VAR 0 11
14454: PUSH
14455: FOR_TO
14456: IFFALSE 14576
// begin for j = 1 to array do
14458: LD_ADDR_VAR 0 7
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_VAR 0 1
14472: PUSH
14473: FOR_TO
14474: IFFALSE 14562
// begin k := j + d ;
14476: LD_ADDR_VAR 0 8
14480: PUSH
14481: LD_VAR 0 7
14485: PUSH
14486: LD_VAR 0 9
14490: PLUS
14491: ST_TO_ADDR
// if k > array then
14492: LD_VAR 0 8
14496: PUSH
14497: LD_VAR 0 1
14501: GREATER
14502: IFFALSE 14512
// k := 1 ;
14504: LD_ADDR_VAR 0 8
14508: PUSH
14509: LD_INT 1
14511: ST_TO_ADDR
// if not k then
14512: LD_VAR 0 8
14516: NOT
14517: IFFALSE 14529
// k := array ;
14519: LD_ADDR_VAR 0 8
14523: PUSH
14524: LD_VAR 0 1
14528: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14529: LD_ADDR_VAR 0 10
14533: PUSH
14534: LD_VAR 0 10
14538: PPUSH
14539: LD_VAR 0 8
14543: PPUSH
14544: LD_VAR 0 1
14548: PUSH
14549: LD_VAR 0 7
14553: ARRAY
14554: PPUSH
14555: CALL_OW 1
14559: ST_TO_ADDR
// end ;
14560: GO 14473
14562: POP
14563: POP
// array := tmp ;
14564: LD_ADDR_VAR 0 1
14568: PUSH
14569: LD_VAR 0 10
14573: ST_TO_ADDR
// end ;
14574: GO 14455
14576: POP
14577: POP
// result := array ;
14578: LD_ADDR_VAR 0 5
14582: PUSH
14583: LD_VAR 0 1
14587: ST_TO_ADDR
// end ;
14588: LD_VAR 0 5
14592: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14593: LD_INT 0
14595: PPUSH
14596: PPUSH
// result := 0 ;
14597: LD_ADDR_VAR 0 3
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// if not array or not value in array then
14605: LD_VAR 0 1
14609: NOT
14610: IFTRUE 14625
14612: PUSH
14613: LD_VAR 0 2
14617: PUSH
14618: LD_VAR 0 1
14622: IN
14623: NOT
14624: OR
14625: IFFALSE 14629
// exit ;
14627: GO 14683
// for i = 1 to array do
14629: LD_ADDR_VAR 0 4
14633: PUSH
14634: DOUBLE
14635: LD_INT 1
14637: DEC
14638: ST_TO_ADDR
14639: LD_VAR 0 1
14643: PUSH
14644: FOR_TO
14645: IFFALSE 14681
// if value = array [ i ] then
14647: LD_VAR 0 2
14651: PUSH
14652: LD_VAR 0 1
14656: PUSH
14657: LD_VAR 0 4
14661: ARRAY
14662: EQUAL
14663: IFFALSE 14679
// begin result := i ;
14665: LD_ADDR_VAR 0 3
14669: PUSH
14670: LD_VAR 0 4
14674: ST_TO_ADDR
// exit ;
14675: POP
14676: POP
14677: GO 14683
// end ;
14679: GO 14644
14681: POP
14682: POP
// end ;
14683: LD_VAR 0 3
14687: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14688: LD_INT 0
14690: PPUSH
// vc_chassis := chassis ;
14691: LD_ADDR_OWVAR 37
14695: PUSH
14696: LD_VAR 0 1
14700: ST_TO_ADDR
// vc_engine := engine ;
14701: LD_ADDR_OWVAR 39
14705: PUSH
14706: LD_VAR 0 2
14710: ST_TO_ADDR
// vc_control := control ;
14711: LD_ADDR_OWVAR 38
14715: PUSH
14716: LD_VAR 0 3
14720: ST_TO_ADDR
// vc_weapon := weapon ;
14721: LD_ADDR_OWVAR 40
14725: PUSH
14726: LD_VAR 0 4
14730: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14731: LD_ADDR_OWVAR 41
14735: PUSH
14736: LD_VAR 0 5
14740: ST_TO_ADDR
// end ;
14741: LD_VAR 0 6
14745: RET
// export function WantPlant ( unit ) ; var task ; begin
14746: LD_INT 0
14748: PPUSH
14749: PPUSH
// result := false ;
14750: LD_ADDR_VAR 0 2
14754: PUSH
14755: LD_INT 0
14757: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14758: LD_ADDR_VAR 0 3
14762: PUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 437
14772: ST_TO_ADDR
// if task then
14773: LD_VAR 0 3
14777: IFFALSE 14805
// if task [ 1 ] [ 1 ] = p then
14779: LD_VAR 0 3
14783: PUSH
14784: LD_INT 1
14786: ARRAY
14787: PUSH
14788: LD_INT 1
14790: ARRAY
14791: PUSH
14792: LD_STRING p
14794: EQUAL
14795: IFFALSE 14805
// result := true ;
14797: LD_ADDR_VAR 0 2
14801: PUSH
14802: LD_INT 1
14804: ST_TO_ADDR
// end ;
14805: LD_VAR 0 2
14809: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14810: LD_INT 0
14812: PPUSH
14813: PPUSH
14814: PPUSH
14815: PPUSH
// if pos < 1 then
14816: LD_VAR 0 2
14820: PUSH
14821: LD_INT 1
14823: LESS
14824: IFFALSE 14828
// exit ;
14826: GO 15131
// if pos = 1 then
14828: LD_VAR 0 2
14832: PUSH
14833: LD_INT 1
14835: EQUAL
14836: IFFALSE 14869
// result := Replace ( arr , pos [ 1 ] , value ) else
14838: LD_ADDR_VAR 0 4
14842: PUSH
14843: LD_VAR 0 1
14847: PPUSH
14848: LD_VAR 0 2
14852: PUSH
14853: LD_INT 1
14855: ARRAY
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: CALL_OW 1
14866: ST_TO_ADDR
14867: GO 15131
// begin tmp := arr ;
14869: LD_ADDR_VAR 0 6
14873: PUSH
14874: LD_VAR 0 1
14878: ST_TO_ADDR
// s_arr := [ tmp ] ;
14879: LD_ADDR_VAR 0 7
14883: PUSH
14884: LD_VAR 0 6
14888: PUSH
14889: EMPTY
14890: LIST
14891: ST_TO_ADDR
// for i = 1 to pos - 1 do
14892: LD_ADDR_VAR 0 5
14896: PUSH
14897: DOUBLE
14898: LD_INT 1
14900: DEC
14901: ST_TO_ADDR
14902: LD_VAR 0 2
14906: PUSH
14907: LD_INT 1
14909: MINUS
14910: PUSH
14911: FOR_TO
14912: IFFALSE 14957
// begin tmp := tmp [ pos [ i ] ] ;
14914: LD_ADDR_VAR 0 6
14918: PUSH
14919: LD_VAR 0 6
14923: PUSH
14924: LD_VAR 0 2
14928: PUSH
14929: LD_VAR 0 5
14933: ARRAY
14934: ARRAY
14935: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14936: LD_ADDR_VAR 0 7
14940: PUSH
14941: LD_VAR 0 7
14945: PUSH
14946: LD_VAR 0 6
14950: PUSH
14951: EMPTY
14952: LIST
14953: ADD
14954: ST_TO_ADDR
// end ;
14955: GO 14911
14957: POP
14958: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14959: LD_ADDR_VAR 0 6
14963: PUSH
14964: LD_VAR 0 6
14968: PPUSH
14969: LD_VAR 0 2
14973: PUSH
14974: LD_VAR 0 2
14978: ARRAY
14979: PPUSH
14980: LD_VAR 0 3
14984: PPUSH
14985: CALL_OW 1
14989: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14990: LD_ADDR_VAR 0 7
14994: PUSH
14995: LD_VAR 0 7
14999: PPUSH
15000: LD_VAR 0 7
15004: PPUSH
15005: LD_VAR 0 6
15009: PPUSH
15010: CALL_OW 1
15014: ST_TO_ADDR
// for i = s_arr downto 2 do
15015: LD_ADDR_VAR 0 5
15019: PUSH
15020: DOUBLE
15021: LD_VAR 0 7
15025: INC
15026: ST_TO_ADDR
15027: LD_INT 2
15029: PUSH
15030: FOR_DOWNTO
15031: IFFALSE 15115
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15033: LD_ADDR_VAR 0 6
15037: PUSH
15038: LD_VAR 0 7
15042: PUSH
15043: LD_VAR 0 5
15047: PUSH
15048: LD_INT 1
15050: MINUS
15051: ARRAY
15052: PPUSH
15053: LD_VAR 0 2
15057: PUSH
15058: LD_VAR 0 5
15062: PUSH
15063: LD_INT 1
15065: MINUS
15066: ARRAY
15067: PPUSH
15068: LD_VAR 0 7
15072: PUSH
15073: LD_VAR 0 5
15077: ARRAY
15078: PPUSH
15079: CALL_OW 1
15083: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15084: LD_ADDR_VAR 0 7
15088: PUSH
15089: LD_VAR 0 7
15093: PPUSH
15094: LD_VAR 0 5
15098: PUSH
15099: LD_INT 1
15101: MINUS
15102: PPUSH
15103: LD_VAR 0 6
15107: PPUSH
15108: CALL_OW 1
15112: ST_TO_ADDR
// end ;
15113: GO 15030
15115: POP
15116: POP
// result := s_arr [ 1 ] ;
15117: LD_ADDR_VAR 0 4
15121: PUSH
15122: LD_VAR 0 7
15126: PUSH
15127: LD_INT 1
15129: ARRAY
15130: ST_TO_ADDR
// end ; end ;
15131: LD_VAR 0 4
15135: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15136: LD_INT 0
15138: PPUSH
15139: PPUSH
// if not list then
15140: LD_VAR 0 1
15144: NOT
15145: IFFALSE 15149
// exit ;
15147: GO 15240
// i := list [ pos1 ] ;
15149: LD_ADDR_VAR 0 5
15153: PUSH
15154: LD_VAR 0 1
15158: PUSH
15159: LD_VAR 0 2
15163: ARRAY
15164: ST_TO_ADDR
// if not i then
15165: LD_VAR 0 5
15169: NOT
15170: IFFALSE 15174
// exit ;
15172: GO 15240
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15174: LD_ADDR_VAR 0 1
15178: PUSH
15179: LD_VAR 0 1
15183: PPUSH
15184: LD_VAR 0 2
15188: PPUSH
15189: LD_VAR 0 1
15193: PUSH
15194: LD_VAR 0 3
15198: ARRAY
15199: PPUSH
15200: CALL_OW 1
15204: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15205: LD_ADDR_VAR 0 1
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: LD_VAR 0 3
15219: PPUSH
15220: LD_VAR 0 5
15224: PPUSH
15225: CALL_OW 1
15229: ST_TO_ADDR
// result := list ;
15230: LD_ADDR_VAR 0 4
15234: PUSH
15235: LD_VAR 0 1
15239: ST_TO_ADDR
// end ;
15240: LD_VAR 0 4
15244: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15245: LD_INT 0
15247: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15248: LD_ADDR_VAR 0 5
15252: PUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 250
15262: PPUSH
15263: LD_VAR 0 1
15267: PPUSH
15268: CALL_OW 251
15272: PPUSH
15273: LD_VAR 0 2
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: LD_VAR 0 4
15287: PPUSH
15288: CALL 15670 0 5
15292: ST_TO_ADDR
// end ;
15293: LD_VAR 0 5
15297: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15298: LD_INT 0
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
// if not list or not unit then
15304: LD_VAR 0 2
15308: NOT
15309: IFTRUE 15318
15311: PUSH
15312: LD_VAR 0 1
15316: NOT
15317: OR
15318: IFFALSE 15322
// exit ;
15320: GO 15665
// result := [ ] ;
15322: LD_ADDR_VAR 0 5
15326: PUSH
15327: EMPTY
15328: ST_TO_ADDR
// for i in list do
15329: LD_ADDR_VAR 0 6
15333: PUSH
15334: LD_VAR 0 2
15338: PUSH
15339: FOR_IN
15340: IFFALSE 15558
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15342: LD_ADDR_VAR 0 8
15346: PUSH
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_VAR 0 6
15356: PUSH
15357: LD_INT 1
15359: ARRAY
15360: PPUSH
15361: LD_VAR 0 6
15365: PUSH
15366: LD_INT 2
15368: ARRAY
15369: PPUSH
15370: CALL_OW 297
15374: ST_TO_ADDR
// if not Count ( result ) then
15375: LD_VAR 0 5
15379: PPUSH
15380: CALL 11926 0 1
15384: NOT
15385: IFFALSE 15418
// begin result := Join ( result , [ i , tmp ] ) ;
15387: LD_ADDR_VAR 0 5
15391: PUSH
15392: LD_VAR 0 5
15396: PPUSH
15397: LD_VAR 0 6
15401: PUSH
15402: LD_VAR 0 8
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL 47858 0 2
15415: ST_TO_ADDR
// continue ;
15416: GO 15339
// end ; if result [ result ] [ 2 ] <= tmp then
15418: LD_VAR 0 5
15422: PUSH
15423: LD_VAR 0 5
15427: ARRAY
15428: PUSH
15429: LD_INT 2
15431: ARRAY
15432: PUSH
15433: LD_VAR 0 8
15437: LESSEQUAL
15438: IFFALSE 15471
// result := Join ( result , [ i , tmp ] ) else
15440: LD_ADDR_VAR 0 5
15444: PUSH
15445: LD_VAR 0 5
15449: PPUSH
15450: LD_VAR 0 6
15454: PUSH
15455: LD_VAR 0 8
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL 47858 0 2
15468: ST_TO_ADDR
15469: GO 15556
// begin for j := 1 to Count ( result ) do
15471: LD_ADDR_VAR 0 7
15475: PUSH
15476: DOUBLE
15477: LD_INT 1
15479: DEC
15480: ST_TO_ADDR
15481: LD_VAR 0 5
15485: PPUSH
15486: CALL 11926 0 1
15490: PUSH
15491: FOR_TO
15492: IFFALSE 15554
// begin if tmp < result [ j ] [ 2 ] then
15494: LD_VAR 0 8
15498: PUSH
15499: LD_VAR 0 5
15503: PUSH
15504: LD_VAR 0 7
15508: ARRAY
15509: PUSH
15510: LD_INT 2
15512: ARRAY
15513: LESS
15514: IFFALSE 15552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15516: LD_ADDR_VAR 0 5
15520: PUSH
15521: LD_VAR 0 5
15525: PPUSH
15526: LD_VAR 0 7
15530: PPUSH
15531: LD_VAR 0 6
15535: PUSH
15536: LD_VAR 0 8
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PPUSH
15545: CALL_OW 2
15549: ST_TO_ADDR
// break ;
15550: GO 15554
// end ; end ;
15552: GO 15491
15554: POP
15555: POP
// end ; end ;
15556: GO 15339
15558: POP
15559: POP
// if result and not asc then
15560: LD_VAR 0 5
15564: IFFALSE 15573
15566: PUSH
15567: LD_VAR 0 3
15571: NOT
15572: AND
15573: IFFALSE 15590
// result := ReverseArray ( result ) ;
15575: LD_ADDR_VAR 0 5
15579: PUSH
15580: LD_VAR 0 5
15584: PPUSH
15585: CALL 42948 0 1
15589: ST_TO_ADDR
// tmp := [ ] ;
15590: LD_ADDR_VAR 0 8
15594: PUSH
15595: EMPTY
15596: ST_TO_ADDR
// if mode then
15597: LD_VAR 0 4
15601: IFFALSE 15665
// begin for i := 1 to result do
15603: LD_ADDR_VAR 0 6
15607: PUSH
15608: DOUBLE
15609: LD_INT 1
15611: DEC
15612: ST_TO_ADDR
15613: LD_VAR 0 5
15617: PUSH
15618: FOR_TO
15619: IFFALSE 15653
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15621: LD_ADDR_VAR 0 8
15625: PUSH
15626: LD_VAR 0 8
15630: PPUSH
15631: LD_VAR 0 5
15635: PUSH
15636: LD_VAR 0 6
15640: ARRAY
15641: PUSH
15642: LD_INT 1
15644: ARRAY
15645: PPUSH
15646: CALL 47858 0 2
15650: ST_TO_ADDR
15651: GO 15618
15653: POP
15654: POP
// result := tmp ;
15655: LD_ADDR_VAR 0 5
15659: PUSH
15660: LD_VAR 0 8
15664: ST_TO_ADDR
// end ; end ;
15665: LD_VAR 0 5
15669: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
15674: PPUSH
15675: PPUSH
// if not list then
15676: LD_VAR 0 3
15680: NOT
15681: IFFALSE 15685
// exit ;
15683: GO 16075
// result := [ ] ;
15685: LD_ADDR_VAR 0 6
15689: PUSH
15690: EMPTY
15691: ST_TO_ADDR
// for i in list do
15692: LD_ADDR_VAR 0 7
15696: PUSH
15697: LD_VAR 0 3
15701: PUSH
15702: FOR_IN
15703: IFFALSE 15905
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15705: LD_ADDR_VAR 0 9
15709: PUSH
15710: LD_VAR 0 7
15714: PPUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: LD_VAR 0 2
15724: PPUSH
15725: CALL_OW 297
15729: ST_TO_ADDR
// if not result then
15730: LD_VAR 0 6
15734: NOT
15735: IFFALSE 15761
// result := [ [ i , tmp ] ] else
15737: LD_ADDR_VAR 0 6
15741: PUSH
15742: LD_VAR 0 7
15746: PUSH
15747: LD_VAR 0 9
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PUSH
15756: EMPTY
15757: LIST
15758: ST_TO_ADDR
15759: GO 15903
// begin if result [ result ] [ 2 ] <= tmp then
15761: LD_VAR 0 6
15765: PUSH
15766: LD_VAR 0 6
15770: ARRAY
15771: PUSH
15772: LD_INT 2
15774: ARRAY
15775: PUSH
15776: LD_VAR 0 9
15780: LESSEQUAL
15781: IFFALSE 15823
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15783: LD_ADDR_VAR 0 6
15787: PUSH
15788: LD_VAR 0 6
15792: PPUSH
15793: LD_VAR 0 6
15797: PUSH
15798: LD_INT 1
15800: PLUS
15801: PPUSH
15802: LD_VAR 0 7
15806: PUSH
15807: LD_VAR 0 9
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PPUSH
15816: CALL_OW 2
15820: ST_TO_ADDR
15821: GO 15903
// for j := 1 to result do
15823: LD_ADDR_VAR 0 8
15827: PUSH
15828: DOUBLE
15829: LD_INT 1
15831: DEC
15832: ST_TO_ADDR
15833: LD_VAR 0 6
15837: PUSH
15838: FOR_TO
15839: IFFALSE 15901
// begin if tmp < result [ j ] [ 2 ] then
15841: LD_VAR 0 9
15845: PUSH
15846: LD_VAR 0 6
15850: PUSH
15851: LD_VAR 0 8
15855: ARRAY
15856: PUSH
15857: LD_INT 2
15859: ARRAY
15860: LESS
15861: IFFALSE 15899
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15863: LD_ADDR_VAR 0 6
15867: PUSH
15868: LD_VAR 0 6
15872: PPUSH
15873: LD_VAR 0 8
15877: PPUSH
15878: LD_VAR 0 7
15882: PUSH
15883: LD_VAR 0 9
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 2
15896: ST_TO_ADDR
// break ;
15897: GO 15901
// end ; end ;
15899: GO 15838
15901: POP
15902: POP
// end ; end ;
15903: GO 15702
15905: POP
15906: POP
// if result and not asc then
15907: LD_VAR 0 6
15911: IFFALSE 15920
15913: PUSH
15914: LD_VAR 0 4
15918: NOT
15919: AND
15920: IFFALSE 15995
// begin tmp := result ;
15922: LD_ADDR_VAR 0 9
15926: PUSH
15927: LD_VAR 0 6
15931: ST_TO_ADDR
// for i = tmp downto 1 do
15932: LD_ADDR_VAR 0 7
15936: PUSH
15937: DOUBLE
15938: LD_VAR 0 9
15942: INC
15943: ST_TO_ADDR
15944: LD_INT 1
15946: PUSH
15947: FOR_DOWNTO
15948: IFFALSE 15993
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15950: LD_ADDR_VAR 0 6
15954: PUSH
15955: LD_VAR 0 6
15959: PPUSH
15960: LD_VAR 0 9
15964: PUSH
15965: LD_VAR 0 7
15969: MINUS
15970: PUSH
15971: LD_INT 1
15973: PLUS
15974: PPUSH
15975: LD_VAR 0 9
15979: PUSH
15980: LD_VAR 0 7
15984: ARRAY
15985: PPUSH
15986: CALL_OW 1
15990: ST_TO_ADDR
15991: GO 15947
15993: POP
15994: POP
// end ; tmp := [ ] ;
15995: LD_ADDR_VAR 0 9
15999: PUSH
16000: EMPTY
16001: ST_TO_ADDR
// if mode then
16002: LD_VAR 0 5
16006: IFFALSE 16075
// begin for i = 1 to result do
16008: LD_ADDR_VAR 0 7
16012: PUSH
16013: DOUBLE
16014: LD_INT 1
16016: DEC
16017: ST_TO_ADDR
16018: LD_VAR 0 6
16022: PUSH
16023: FOR_TO
16024: IFFALSE 16063
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16026: LD_ADDR_VAR 0 9
16030: PUSH
16031: LD_VAR 0 9
16035: PPUSH
16036: LD_VAR 0 7
16040: PPUSH
16041: LD_VAR 0 6
16045: PUSH
16046: LD_VAR 0 7
16050: ARRAY
16051: PUSH
16052: LD_INT 1
16054: ARRAY
16055: PPUSH
16056: CALL_OW 1
16060: ST_TO_ADDR
16061: GO 16023
16063: POP
16064: POP
// result := tmp ;
16065: LD_ADDR_VAR 0 6
16069: PUSH
16070: LD_VAR 0 9
16074: ST_TO_ADDR
// end ; end ;
16075: LD_VAR 0 6
16079: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16080: LD_INT 0
16082: PPUSH
16083: PPUSH
16084: PPUSH
16085: PPUSH
16086: PPUSH
16087: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16088: LD_ADDR_VAR 0 5
16092: PUSH
16093: LD_INT 0
16095: PUSH
16096: LD_INT 0
16098: PUSH
16099: LD_INT 0
16101: PUSH
16102: EMPTY
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: ST_TO_ADDR
// if not x or not y then
16110: LD_VAR 0 2
16114: NOT
16115: IFTRUE 16124
16117: PUSH
16118: LD_VAR 0 3
16122: NOT
16123: OR
16124: IFFALSE 16128
// exit ;
16126: GO 17784
// if not range then
16128: LD_VAR 0 4
16132: NOT
16133: IFFALSE 16143
// range := 10 ;
16135: LD_ADDR_VAR 0 4
16139: PUSH
16140: LD_INT 10
16142: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16143: LD_ADDR_VAR 0 8
16147: PUSH
16148: LD_INT 81
16150: PUSH
16151: LD_VAR 0 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 92
16162: PUSH
16163: LD_VAR 0 2
16167: PUSH
16168: LD_VAR 0 3
16172: PUSH
16173: LD_VAR 0 4
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 3
16186: PUSH
16187: LD_INT 21
16189: PUSH
16190: LD_INT 3
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 69
16210: ST_TO_ADDR
// if not tmp then
16211: LD_VAR 0 8
16215: NOT
16216: IFFALSE 16220
// exit ;
16218: GO 17784
// for i in tmp do
16220: LD_ADDR_VAR 0 6
16224: PUSH
16225: LD_VAR 0 8
16229: PUSH
16230: FOR_IN
16231: IFFALSE 17759
// begin points := [ 0 , 0 , 0 ] ;
16233: LD_ADDR_VAR 0 9
16237: PUSH
16238: LD_INT 0
16240: PUSH
16241: LD_INT 0
16243: PUSH
16244: LD_INT 0
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: ST_TO_ADDR
// bpoints := 1 ;
16252: LD_ADDR_VAR 0 10
16256: PUSH
16257: LD_INT 1
16259: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16260: LD_VAR 0 6
16264: PPUSH
16265: CALL_OW 247
16269: PUSH
16270: LD_INT 1
16272: DOUBLE
16273: EQUAL
16274: IFTRUE 16278
16276: GO 16860
16278: POP
// begin if GetClass ( i ) = 1 then
16279: LD_VAR 0 6
16283: PPUSH
16284: CALL_OW 257
16288: PUSH
16289: LD_INT 1
16291: EQUAL
16292: IFFALSE 16313
// points := [ 10 , 5 , 3 ] ;
16294: LD_ADDR_VAR 0 9
16298: PUSH
16299: LD_INT 10
16301: PUSH
16302: LD_INT 5
16304: PUSH
16305: LD_INT 3
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: LIST
16312: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16313: LD_VAR 0 6
16317: PPUSH
16318: CALL_OW 257
16322: PUSH
16323: LD_INT 2
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: LD_INT 4
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: IN
16337: IFFALSE 16358
// points := [ 3 , 2 , 1 ] ;
16339: LD_ADDR_VAR 0 9
16343: PUSH
16344: LD_INT 3
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16358: LD_VAR 0 6
16362: PPUSH
16363: CALL_OW 257
16367: PUSH
16368: LD_INT 5
16370: EQUAL
16371: IFFALSE 16392
// points := [ 130 , 5 , 2 ] ;
16373: LD_ADDR_VAR 0 9
16377: PUSH
16378: LD_INT 130
16380: PUSH
16381: LD_INT 5
16383: PUSH
16384: LD_INT 2
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: LIST
16391: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16392: LD_VAR 0 6
16396: PPUSH
16397: CALL_OW 257
16401: PUSH
16402: LD_INT 8
16404: EQUAL
16405: IFFALSE 16426
// points := [ 35 , 35 , 30 ] ;
16407: LD_ADDR_VAR 0 9
16411: PUSH
16412: LD_INT 35
16414: PUSH
16415: LD_INT 35
16417: PUSH
16418: LD_INT 30
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16426: LD_VAR 0 6
16430: PPUSH
16431: CALL_OW 257
16435: PUSH
16436: LD_INT 9
16438: EQUAL
16439: IFFALSE 16460
// points := [ 20 , 55 , 40 ] ;
16441: LD_ADDR_VAR 0 9
16445: PUSH
16446: LD_INT 20
16448: PUSH
16449: LD_INT 55
16451: PUSH
16452: LD_INT 40
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16460: LD_VAR 0 6
16464: PPUSH
16465: CALL_OW 257
16469: PUSH
16470: LD_INT 12
16472: PUSH
16473: LD_INT 16
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: IN
16480: IFFALSE 16501
// points := [ 5 , 3 , 2 ] ;
16482: LD_ADDR_VAR 0 9
16486: PUSH
16487: LD_INT 5
16489: PUSH
16490: LD_INT 3
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16501: LD_VAR 0 6
16505: PPUSH
16506: CALL_OW 257
16510: PUSH
16511: LD_INT 17
16513: EQUAL
16514: IFFALSE 16535
// points := [ 100 , 50 , 75 ] ;
16516: LD_ADDR_VAR 0 9
16520: PUSH
16521: LD_INT 100
16523: PUSH
16524: LD_INT 50
16526: PUSH
16527: LD_INT 75
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16535: LD_VAR 0 6
16539: PPUSH
16540: CALL_OW 257
16544: PUSH
16545: LD_INT 15
16547: EQUAL
16548: IFFALSE 16569
// points := [ 10 , 5 , 3 ] ;
16550: LD_ADDR_VAR 0 9
16554: PUSH
16555: LD_INT 10
16557: PUSH
16558: LD_INT 5
16560: PUSH
16561: LD_INT 3
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: LIST
16568: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16569: LD_VAR 0 6
16573: PPUSH
16574: CALL_OW 257
16578: PUSH
16579: LD_INT 14
16581: EQUAL
16582: IFFALSE 16603
// points := [ 10 , 0 , 0 ] ;
16584: LD_ADDR_VAR 0 9
16588: PUSH
16589: LD_INT 10
16591: PUSH
16592: LD_INT 0
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16603: LD_VAR 0 6
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 11
16615: EQUAL
16616: IFFALSE 16637
// points := [ 30 , 10 , 5 ] ;
16618: LD_ADDR_VAR 0 9
16622: PUSH
16623: LD_INT 30
16625: PUSH
16626: LD_INT 10
16628: PUSH
16629: LD_INT 5
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: LIST
16636: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16637: LD_VAR 0 1
16641: PPUSH
16642: LD_INT 5
16644: PPUSH
16645: CALL_OW 321
16649: PUSH
16650: LD_INT 2
16652: EQUAL
16653: IFFALSE 16670
// bpoints := bpoints * 1.8 ;
16655: LD_ADDR_VAR 0 10
16659: PUSH
16660: LD_VAR 0 10
16664: PUSH
16665: LD_REAL  1.80000000000000E+0000
16668: MUL
16669: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16670: LD_VAR 0 6
16674: PPUSH
16675: CALL_OW 257
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: LD_INT 3
16688: PUSH
16689: LD_INT 4
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: IN
16698: IFFALSE 16718
16700: PUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: LD_INT 51
16708: PPUSH
16709: CALL_OW 321
16713: PUSH
16714: LD_INT 2
16716: EQUAL
16717: AND
16718: IFFALSE 16735
// bpoints := bpoints * 1.2 ;
16720: LD_ADDR_VAR 0 10
16724: PUSH
16725: LD_VAR 0 10
16729: PUSH
16730: LD_REAL  1.20000000000000E+0000
16733: MUL
16734: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16735: LD_VAR 0 6
16739: PPUSH
16740: CALL_OW 257
16744: PUSH
16745: LD_INT 5
16747: PUSH
16748: LD_INT 7
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: IN
16759: IFFALSE 16779
16761: PUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: LD_INT 52
16769: PPUSH
16770: CALL_OW 321
16774: PUSH
16775: LD_INT 2
16777: EQUAL
16778: AND
16779: IFFALSE 16796
// bpoints := bpoints * 1.5 ;
16781: LD_ADDR_VAR 0 10
16785: PUSH
16786: LD_VAR 0 10
16790: PUSH
16791: LD_REAL  1.50000000000000E+0000
16794: MUL
16795: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16796: LD_VAR 0 1
16800: PPUSH
16801: LD_INT 66
16803: PPUSH
16804: CALL_OW 321
16808: PUSH
16809: LD_INT 2
16811: EQUAL
16812: IFFALSE 16829
// bpoints := bpoints * 1.1 ;
16814: LD_ADDR_VAR 0 10
16818: PUSH
16819: LD_VAR 0 10
16823: PUSH
16824: LD_REAL  1.10000000000000E+0000
16827: MUL
16828: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16829: LD_ADDR_VAR 0 10
16833: PUSH
16834: LD_VAR 0 10
16838: PUSH
16839: LD_VAR 0 6
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: CALL_OW 259
16851: PUSH
16852: LD_REAL  1.15000000000000E+0000
16855: MUL
16856: MUL
16857: ST_TO_ADDR
// end ; unit_vehicle :
16858: GO 17688
16860: LD_INT 2
16862: DOUBLE
16863: EQUAL
16864: IFTRUE 16868
16866: GO 17676
16868: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16869: LD_VAR 0 6
16873: PPUSH
16874: CALL_OW 264
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: LD_INT 42
16884: PUSH
16885: LD_INT 24
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: IN
16893: IFFALSE 16914
// points := [ 25 , 5 , 3 ] ;
16895: LD_ADDR_VAR 0 9
16899: PUSH
16900: LD_INT 25
16902: PUSH
16903: LD_INT 5
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16914: LD_VAR 0 6
16918: PPUSH
16919: CALL_OW 264
16923: PUSH
16924: LD_INT 4
16926: PUSH
16927: LD_INT 43
16929: PUSH
16930: LD_INT 25
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: IN
16938: IFFALSE 16959
// points := [ 40 , 15 , 5 ] ;
16940: LD_ADDR_VAR 0 9
16944: PUSH
16945: LD_INT 40
16947: PUSH
16948: LD_INT 15
16950: PUSH
16951: LD_INT 5
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16959: LD_VAR 0 6
16963: PPUSH
16964: CALL_OW 264
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: LD_INT 23
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: IN
16979: IFFALSE 17000
// points := [ 7 , 25 , 8 ] ;
16981: LD_ADDR_VAR 0 9
16985: PUSH
16986: LD_INT 7
16988: PUSH
16989: LD_INT 25
16991: PUSH
16992: LD_INT 8
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: LIST
16999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17000: LD_VAR 0 6
17004: PPUSH
17005: CALL_OW 264
17009: PUSH
17010: LD_INT 5
17012: PUSH
17013: LD_INT 27
17015: PUSH
17016: LD_INT 44
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: IN
17024: IFFALSE 17045
// points := [ 14 , 50 , 16 ] ;
17026: LD_ADDR_VAR 0 9
17030: PUSH
17031: LD_INT 14
17033: PUSH
17034: LD_INT 50
17036: PUSH
17037: LD_INT 16
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: LIST
17044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17045: LD_VAR 0 6
17049: PPUSH
17050: CALL_OW 264
17054: PUSH
17055: LD_INT 6
17057: PUSH
17058: LD_INT 46
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: IN
17065: IFFALSE 17086
// points := [ 32 , 120 , 70 ] ;
17067: LD_ADDR_VAR 0 9
17071: PUSH
17072: LD_INT 32
17074: PUSH
17075: LD_INT 120
17077: PUSH
17078: LD_INT 70
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: LIST
17085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17086: LD_VAR 0 6
17090: PPUSH
17091: CALL_OW 264
17095: PUSH
17096: LD_INT 7
17098: PUSH
17099: LD_INT 28
17101: PUSH
17102: LD_INT 45
17104: PUSH
17105: LD_INT 92
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: IN
17114: IFFALSE 17135
// points := [ 35 , 20 , 45 ] ;
17116: LD_ADDR_VAR 0 9
17120: PUSH
17121: LD_INT 35
17123: PUSH
17124: LD_INT 20
17126: PUSH
17127: LD_INT 45
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17135: LD_VAR 0 6
17139: PPUSH
17140: CALL_OW 264
17144: PUSH
17145: LD_INT 47
17147: PUSH
17148: EMPTY
17149: LIST
17150: IN
17151: IFFALSE 17172
// points := [ 67 , 45 , 75 ] ;
17153: LD_ADDR_VAR 0 9
17157: PUSH
17158: LD_INT 67
17160: PUSH
17161: LD_INT 45
17163: PUSH
17164: LD_INT 75
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17172: LD_VAR 0 6
17176: PPUSH
17177: CALL_OW 264
17181: PUSH
17182: LD_INT 26
17184: PUSH
17185: EMPTY
17186: LIST
17187: IN
17188: IFFALSE 17209
// points := [ 120 , 30 , 80 ] ;
17190: LD_ADDR_VAR 0 9
17194: PUSH
17195: LD_INT 120
17197: PUSH
17198: LD_INT 30
17200: PUSH
17201: LD_INT 80
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17209: LD_VAR 0 6
17213: PPUSH
17214: CALL_OW 264
17218: PUSH
17219: LD_INT 22
17221: PUSH
17222: EMPTY
17223: LIST
17224: IN
17225: IFFALSE 17246
// points := [ 40 , 1 , 1 ] ;
17227: LD_ADDR_VAR 0 9
17231: PUSH
17232: LD_INT 40
17234: PUSH
17235: LD_INT 1
17237: PUSH
17238: LD_INT 1
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: LIST
17245: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17246: LD_VAR 0 6
17250: PPUSH
17251: CALL_OW 264
17255: PUSH
17256: LD_INT 29
17258: PUSH
17259: EMPTY
17260: LIST
17261: IN
17262: IFFALSE 17283
// points := [ 70 , 200 , 400 ] ;
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: LD_INT 70
17271: PUSH
17272: LD_INT 200
17274: PUSH
17275: LD_INT 400
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17283: LD_VAR 0 6
17287: PPUSH
17288: CALL_OW 264
17292: PUSH
17293: LD_INT 14
17295: PUSH
17296: LD_INT 53
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: IN
17303: IFFALSE 17324
// points := [ 40 , 10 , 20 ] ;
17305: LD_ADDR_VAR 0 9
17309: PUSH
17310: LD_INT 40
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 20
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17324: LD_VAR 0 6
17328: PPUSH
17329: CALL_OW 264
17333: PUSH
17334: LD_INT 9
17336: PUSH
17337: EMPTY
17338: LIST
17339: IN
17340: IFFALSE 17361
// points := [ 5 , 70 , 20 ] ;
17342: LD_ADDR_VAR 0 9
17346: PUSH
17347: LD_INT 5
17349: PUSH
17350: LD_INT 70
17352: PUSH
17353: LD_INT 20
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17361: LD_VAR 0 6
17365: PPUSH
17366: CALL_OW 264
17370: PUSH
17371: LD_INT 10
17373: PUSH
17374: EMPTY
17375: LIST
17376: IN
17377: IFFALSE 17398
// points := [ 35 , 110 , 70 ] ;
17379: LD_ADDR_VAR 0 9
17383: PUSH
17384: LD_INT 35
17386: PUSH
17387: LD_INT 110
17389: PUSH
17390: LD_INT 70
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17398: LD_VAR 0 6
17402: PPUSH
17403: CALL_OW 265
17407: PUSH
17408: LD_INT 25
17410: EQUAL
17411: IFFALSE 17432
// points := [ 80 , 65 , 100 ] ;
17413: LD_ADDR_VAR 0 9
17417: PUSH
17418: LD_INT 80
17420: PUSH
17421: LD_INT 65
17423: PUSH
17424: LD_INT 100
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17432: LD_VAR 0 6
17436: PPUSH
17437: CALL_OW 263
17441: PUSH
17442: LD_INT 1
17444: EQUAL
17445: IFFALSE 17480
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17447: LD_ADDR_VAR 0 10
17451: PUSH
17452: LD_VAR 0 10
17456: PUSH
17457: LD_VAR 0 6
17461: PPUSH
17462: CALL_OW 311
17466: PPUSH
17467: LD_INT 3
17469: PPUSH
17470: CALL_OW 259
17474: PUSH
17475: LD_INT 4
17477: MUL
17478: MUL
17479: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17480: LD_VAR 0 6
17484: PPUSH
17485: CALL_OW 263
17489: PUSH
17490: LD_INT 2
17492: EQUAL
17493: IFFALSE 17544
// begin j := IsControledBy ( i ) ;
17495: LD_ADDR_VAR 0 7
17499: PUSH
17500: LD_VAR 0 6
17504: PPUSH
17505: CALL_OW 312
17509: ST_TO_ADDR
// if j then
17510: LD_VAR 0 7
17514: IFFALSE 17544
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17516: LD_ADDR_VAR 0 10
17520: PUSH
17521: LD_VAR 0 10
17525: PUSH
17526: LD_VAR 0 7
17530: PPUSH
17531: LD_INT 3
17533: PPUSH
17534: CALL_OW 259
17538: PUSH
17539: LD_INT 3
17541: MUL
17542: MUL
17543: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17544: LD_VAR 0 6
17548: PPUSH
17549: CALL_OW 264
17553: PUSH
17554: LD_INT 5
17556: PUSH
17557: LD_INT 6
17559: PUSH
17560: LD_INT 46
17562: PUSH
17563: LD_INT 44
17565: PUSH
17566: LD_INT 47
17568: PUSH
17569: LD_INT 45
17571: PUSH
17572: LD_INT 28
17574: PUSH
17575: LD_INT 7
17577: PUSH
17578: LD_INT 27
17580: PUSH
17581: LD_INT 29
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: IN
17596: IFFALSE 17616
17598: PUSH
17599: LD_VAR 0 1
17603: PPUSH
17604: LD_INT 52
17606: PPUSH
17607: CALL_OW 321
17611: PUSH
17612: LD_INT 2
17614: EQUAL
17615: AND
17616: IFFALSE 17633
// bpoints := bpoints * 1.2 ;
17618: LD_ADDR_VAR 0 10
17622: PUSH
17623: LD_VAR 0 10
17627: PUSH
17628: LD_REAL  1.20000000000000E+0000
17631: MUL
17632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17633: LD_VAR 0 6
17637: PPUSH
17638: CALL_OW 264
17642: PUSH
17643: LD_INT 6
17645: PUSH
17646: LD_INT 46
17648: PUSH
17649: LD_INT 47
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: IN
17657: IFFALSE 17674
// bpoints := bpoints * 1.2 ;
17659: LD_ADDR_VAR 0 10
17663: PUSH
17664: LD_VAR 0 10
17668: PUSH
17669: LD_REAL  1.20000000000000E+0000
17672: MUL
17673: ST_TO_ADDR
// end ; unit_building :
17674: GO 17688
17676: LD_INT 3
17678: DOUBLE
17679: EQUAL
17680: IFTRUE 17684
17682: GO 17687
17684: POP
// ; end ;
17685: GO 17688
17687: POP
// for j = 1 to 3 do
17688: LD_ADDR_VAR 0 7
17692: PUSH
17693: DOUBLE
17694: LD_INT 1
17696: DEC
17697: ST_TO_ADDR
17698: LD_INT 3
17700: PUSH
17701: FOR_TO
17702: IFFALSE 17755
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17704: LD_ADDR_VAR 0 5
17708: PUSH
17709: LD_VAR 0 5
17713: PPUSH
17714: LD_VAR 0 7
17718: PPUSH
17719: LD_VAR 0 5
17723: PUSH
17724: LD_VAR 0 7
17728: ARRAY
17729: PUSH
17730: LD_VAR 0 9
17734: PUSH
17735: LD_VAR 0 7
17739: ARRAY
17740: PUSH
17741: LD_VAR 0 10
17745: MUL
17746: PLUS
17747: PPUSH
17748: CALL_OW 1
17752: ST_TO_ADDR
17753: GO 17701
17755: POP
17756: POP
// end ;
17757: GO 16230
17759: POP
17760: POP
// result := Replace ( result , 4 , tmp ) ;
17761: LD_ADDR_VAR 0 5
17765: PUSH
17766: LD_VAR 0 5
17770: PPUSH
17771: LD_INT 4
17773: PPUSH
17774: LD_VAR 0 8
17778: PPUSH
17779: CALL_OW 1
17783: ST_TO_ADDR
// end ;
17784: LD_VAR 0 5
17788: RET
// export function DangerAtRange ( unit , range ) ; begin
17789: LD_INT 0
17791: PPUSH
// if not unit then
17792: LD_VAR 0 1
17796: NOT
17797: IFFALSE 17801
// exit ;
17799: GO 17846
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17801: LD_ADDR_VAR 0 3
17805: PUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: CALL_OW 255
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 250
17825: PPUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 251
17835: PPUSH
17836: LD_VAR 0 2
17840: PPUSH
17841: CALL 16080 0 4
17845: ST_TO_ADDR
// end ;
17846: LD_VAR 0 3
17850: RET
// export function DangerInArea ( side , area ) ; begin
17851: LD_INT 0
17853: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17854: LD_ADDR_VAR 0 3
17858: PUSH
17859: LD_VAR 0 2
17863: PPUSH
17864: LD_INT 81
17866: PUSH
17867: LD_VAR 0 1
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL_OW 70
17880: ST_TO_ADDR
// end ;
17881: LD_VAR 0 3
17885: RET
// export function IsExtension ( b ) ; begin
17886: LD_INT 0
17888: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17889: LD_ADDR_VAR 0 2
17893: PUSH
17894: LD_VAR 0 1
17898: PUSH
17899: LD_INT 23
17901: PUSH
17902: LD_INT 20
17904: PUSH
17905: LD_INT 22
17907: PUSH
17908: LD_INT 17
17910: PUSH
17911: LD_INT 24
17913: PUSH
17914: LD_INT 21
17916: PUSH
17917: LD_INT 19
17919: PUSH
17920: LD_INT 16
17922: PUSH
17923: LD_INT 25
17925: PUSH
17926: LD_INT 18
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: IN
17941: ST_TO_ADDR
// end ;
17942: LD_VAR 0 2
17946: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17947: LD_INT 0
17949: PPUSH
17950: PPUSH
17951: PPUSH
// result := [ ] ;
17952: LD_ADDR_VAR 0 4
17956: PUSH
17957: EMPTY
17958: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17959: LD_ADDR_VAR 0 5
17963: PUSH
17964: LD_VAR 0 2
17968: PPUSH
17969: LD_INT 21
17971: PUSH
17972: LD_INT 3
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 70
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 5
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18057
// if checkLink then
17993: LD_VAR 0 3
17997: IFFALSE 18047
// begin for i in tmp do
17999: LD_ADDR_VAR 0 6
18003: PUSH
18004: LD_VAR 0 5
18008: PUSH
18009: FOR_IN
18010: IFFALSE 18045
// if GetBase ( i ) <> base then
18012: LD_VAR 0 6
18016: PPUSH
18017: CALL_OW 274
18021: PUSH
18022: LD_VAR 0 1
18026: NONEQUAL
18027: IFFALSE 18043
// ComLinkToBase ( base , i ) ;
18029: LD_VAR 0 1
18033: PPUSH
18034: LD_VAR 0 6
18038: PPUSH
18039: CALL_OW 169
18043: GO 18009
18045: POP
18046: POP
// end ; result := tmp ;
18047: LD_ADDR_VAR 0 4
18051: PUSH
18052: LD_VAR 0 5
18056: ST_TO_ADDR
// end ;
18057: LD_VAR 0 4
18061: RET
// export function ComComplete ( units , b ) ; var i ; begin
18062: LD_INT 0
18064: PPUSH
18065: PPUSH
// if not units then
18066: LD_VAR 0 1
18070: NOT
18071: IFFALSE 18075
// exit ;
18073: GO 18165
// for i in units do
18075: LD_ADDR_VAR 0 4
18079: PUSH
18080: LD_VAR 0 1
18084: PUSH
18085: FOR_IN
18086: IFFALSE 18163
// if BuildingStatus ( b ) = bs_build then
18088: LD_VAR 0 2
18092: PPUSH
18093: CALL_OW 461
18097: PUSH
18098: LD_INT 1
18100: EQUAL
18101: IFFALSE 18161
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18103: LD_VAR 0 4
18107: PPUSH
18108: LD_STRING h
18110: PUSH
18111: LD_VAR 0 2
18115: PPUSH
18116: CALL_OW 250
18120: PUSH
18121: LD_VAR 0 2
18125: PPUSH
18126: CALL_OW 251
18130: PUSH
18131: LD_VAR 0 2
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: LD_INT 0
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: PUSH
18154: EMPTY
18155: LIST
18156: PPUSH
18157: CALL_OW 446
18161: GO 18085
18163: POP
18164: POP
// end ;
18165: LD_VAR 0 3
18169: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18170: LD_INT 0
18172: PPUSH
18173: PPUSH
18174: PPUSH
18175: PPUSH
18176: PPUSH
18177: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18178: LD_VAR 0 1
18182: NOT
18183: IFTRUE 18200
18185: PUSH
18186: LD_VAR 0 1
18190: PPUSH
18191: CALL_OW 263
18195: PUSH
18196: LD_INT 2
18198: NONEQUAL
18199: OR
18200: IFFALSE 18204
// exit ;
18202: GO 18520
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18204: LD_ADDR_VAR 0 6
18208: PUSH
18209: LD_INT 22
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: CALL_OW 255
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 30
18231: PUSH
18232: LD_INT 36
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 34
18241: PUSH
18242: LD_INT 31
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: ST_TO_ADDR
// if not tmp then
18263: LD_VAR 0 6
18267: NOT
18268: IFFALSE 18272
// exit ;
18270: GO 18520
// result := [ ] ;
18272: LD_ADDR_VAR 0 2
18276: PUSH
18277: EMPTY
18278: ST_TO_ADDR
// for i in tmp do
18279: LD_ADDR_VAR 0 3
18283: PUSH
18284: LD_VAR 0 6
18288: PUSH
18289: FOR_IN
18290: IFFALSE 18361
// begin t := UnitsInside ( i ) ;
18292: LD_ADDR_VAR 0 4
18296: PUSH
18297: LD_VAR 0 3
18301: PPUSH
18302: CALL_OW 313
18306: ST_TO_ADDR
// if t then
18307: LD_VAR 0 4
18311: IFFALSE 18359
// for j in t do
18313: LD_ADDR_VAR 0 7
18317: PUSH
18318: LD_VAR 0 4
18322: PUSH
18323: FOR_IN
18324: IFFALSE 18357
// result := Replace ( result , result + 1 , j ) ;
18326: LD_ADDR_VAR 0 2
18330: PUSH
18331: LD_VAR 0 2
18335: PPUSH
18336: LD_VAR 0 2
18340: PUSH
18341: LD_INT 1
18343: PLUS
18344: PPUSH
18345: LD_VAR 0 7
18349: PPUSH
18350: CALL_OW 1
18354: ST_TO_ADDR
18355: GO 18323
18357: POP
18358: POP
// end ;
18359: GO 18289
18361: POP
18362: POP
// if not result then
18363: LD_VAR 0 2
18367: NOT
18368: IFFALSE 18372
// exit ;
18370: GO 18520
// mech := result [ 1 ] ;
18372: LD_ADDR_VAR 0 5
18376: PUSH
18377: LD_VAR 0 2
18381: PUSH
18382: LD_INT 1
18384: ARRAY
18385: ST_TO_ADDR
// if result > 1 then
18386: LD_VAR 0 2
18390: PUSH
18391: LD_INT 1
18393: GREATER
18394: IFFALSE 18506
// begin for i = 2 to result do
18396: LD_ADDR_VAR 0 3
18400: PUSH
18401: DOUBLE
18402: LD_INT 2
18404: DEC
18405: ST_TO_ADDR
18406: LD_VAR 0 2
18410: PUSH
18411: FOR_TO
18412: IFFALSE 18504
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18414: LD_ADDR_VAR 0 4
18418: PUSH
18419: LD_VAR 0 2
18423: PUSH
18424: LD_VAR 0 3
18428: ARRAY
18429: PPUSH
18430: LD_INT 3
18432: PPUSH
18433: CALL_OW 259
18437: PUSH
18438: LD_VAR 0 2
18442: PUSH
18443: LD_VAR 0 3
18447: ARRAY
18448: PPUSH
18449: CALL_OW 432
18453: MINUS
18454: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18455: LD_VAR 0 4
18459: PUSH
18460: LD_VAR 0 5
18464: PPUSH
18465: LD_INT 3
18467: PPUSH
18468: CALL_OW 259
18472: PUSH
18473: LD_VAR 0 5
18477: PPUSH
18478: CALL_OW 432
18482: MINUS
18483: GREATEREQUAL
18484: IFFALSE 18502
// mech := result [ i ] ;
18486: LD_ADDR_VAR 0 5
18490: PUSH
18491: LD_VAR 0 2
18495: PUSH
18496: LD_VAR 0 3
18500: ARRAY
18501: ST_TO_ADDR
// end ;
18502: GO 18411
18504: POP
18505: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18506: LD_VAR 0 1
18510: PPUSH
18511: LD_VAR 0 5
18515: PPUSH
18516: CALL_OW 135
// end ;
18520: LD_VAR 0 2
18524: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18525: LD_INT 0
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
18531: PPUSH
18532: PPUSH
18533: PPUSH
18534: PPUSH
18535: PPUSH
18536: PPUSH
18537: PPUSH
18538: PPUSH
18539: PPUSH
// result := [ ] ;
18540: LD_ADDR_VAR 0 7
18544: PUSH
18545: EMPTY
18546: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 266
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: IN
18567: NOT
18568: IFFALSE 18572
// exit ;
18570: GO 20212
// if name then
18572: LD_VAR 0 3
18576: IFFALSE 18592
// SetBName ( base_dep , name ) ;
18578: LD_VAR 0 1
18582: PPUSH
18583: LD_VAR 0 3
18587: PPUSH
18588: CALL_OW 500
// base := GetBase ( base_dep ) ;
18592: LD_ADDR_VAR 0 15
18596: PUSH
18597: LD_VAR 0 1
18601: PPUSH
18602: CALL_OW 274
18606: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18607: LD_ADDR_VAR 0 16
18611: PUSH
18612: LD_VAR 0 1
18616: PPUSH
18617: CALL_OW 255
18621: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18622: LD_ADDR_VAR 0 17
18626: PUSH
18627: LD_VAR 0 1
18631: PPUSH
18632: CALL_OW 248
18636: ST_TO_ADDR
// if sources then
18637: LD_VAR 0 5
18641: IFFALSE 18688
// for i = 1 to 3 do
18643: LD_ADDR_VAR 0 8
18647: PUSH
18648: DOUBLE
18649: LD_INT 1
18651: DEC
18652: ST_TO_ADDR
18653: LD_INT 3
18655: PUSH
18656: FOR_TO
18657: IFFALSE 18686
// AddResourceType ( base , i , sources [ i ] ) ;
18659: LD_VAR 0 15
18663: PPUSH
18664: LD_VAR 0 8
18668: PPUSH
18669: LD_VAR 0 5
18673: PUSH
18674: LD_VAR 0 8
18678: ARRAY
18679: PPUSH
18680: CALL_OW 276
18684: GO 18656
18686: POP
18687: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18688: LD_ADDR_VAR 0 18
18692: PUSH
18693: LD_VAR 0 15
18697: PPUSH
18698: LD_VAR 0 2
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL 17947 0 3
18710: ST_TO_ADDR
// InitHc ;
18711: CALL_OW 19
// InitUc ;
18715: CALL_OW 18
// uc_side := side ;
18719: LD_ADDR_OWVAR 20
18723: PUSH
18724: LD_VAR 0 16
18728: ST_TO_ADDR
// uc_nation := nation ;
18729: LD_ADDR_OWVAR 21
18733: PUSH
18734: LD_VAR 0 17
18738: ST_TO_ADDR
// if buildings then
18739: LD_VAR 0 18
18743: IFFALSE 20071
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18745: LD_ADDR_VAR 0 19
18749: PUSH
18750: LD_VAR 0 18
18754: PPUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 30
18760: PUSH
18761: LD_INT 29
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 30
18770: PUSH
18771: LD_INT 30
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 72
18787: ST_TO_ADDR
// if tmp then
18788: LD_VAR 0 19
18792: IFFALSE 18840
// for i in tmp do
18794: LD_ADDR_VAR 0 8
18798: PUSH
18799: LD_VAR 0 19
18803: PUSH
18804: FOR_IN
18805: IFFALSE 18838
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18807: LD_VAR 0 8
18811: PPUSH
18812: CALL_OW 250
18816: PPUSH
18817: LD_VAR 0 8
18821: PPUSH
18822: CALL_OW 251
18826: PPUSH
18827: LD_VAR 0 16
18831: PPUSH
18832: CALL_OW 441
18836: GO 18804
18838: POP
18839: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18840: LD_VAR 0 18
18844: PPUSH
18845: LD_INT 2
18847: PUSH
18848: LD_INT 30
18850: PUSH
18851: LD_INT 32
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 30
18860: PUSH
18861: LD_INT 33
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 72
18877: IFFALSE 18965
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18879: LD_ADDR_VAR 0 8
18883: PUSH
18884: LD_VAR 0 18
18888: PPUSH
18889: LD_INT 2
18891: PUSH
18892: LD_INT 30
18894: PUSH
18895: LD_INT 32
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 30
18904: PUSH
18905: LD_INT 33
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL_OW 72
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18963
// begin if not GetBWeapon ( i ) then
18925: LD_VAR 0 8
18929: PPUSH
18930: CALL_OW 269
18934: NOT
18935: IFFALSE 18961
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18937: LD_VAR 0 8
18941: PPUSH
18942: LD_VAR 0 8
18946: PPUSH
18947: LD_VAR 0 2
18951: PPUSH
18952: CALL 20217 0 2
18956: PPUSH
18957: CALL_OW 431
// end ;
18961: GO 18922
18963: POP
18964: POP
// end ; for i = 1 to personel do
18965: LD_ADDR_VAR 0 8
18969: PUSH
18970: DOUBLE
18971: LD_INT 1
18973: DEC
18974: ST_TO_ADDR
18975: LD_VAR 0 6
18979: PUSH
18980: FOR_TO
18981: IFFALSE 20051
// begin if i > 4 then
18983: LD_VAR 0 8
18987: PUSH
18988: LD_INT 4
18990: GREATER
18991: IFFALSE 18995
// break ;
18993: GO 20051
// case i of 1 :
18995: LD_VAR 0 8
18999: PUSH
19000: LD_INT 1
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19088
19008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19009: LD_ADDR_VAR 0 12
19013: PUSH
19014: LD_VAR 0 18
19018: PPUSH
19019: LD_INT 22
19021: PUSH
19022: LD_VAR 0 16
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 58
19033: PUSH
19034: EMPTY
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 30
19042: PUSH
19043: LD_INT 32
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 30
19052: PUSH
19053: LD_INT 4
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 72
19085: ST_TO_ADDR
19086: GO 19310
19088: LD_INT 2
19090: DOUBLE
19091: EQUAL
19092: IFTRUE 19096
19094: GO 19158
19096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19097: LD_ADDR_VAR 0 12
19101: PUSH
19102: LD_VAR 0 18
19106: PPUSH
19107: LD_INT 22
19109: PUSH
19110: LD_VAR 0 16
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 2
19121: PUSH
19122: LD_INT 30
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 30
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PPUSH
19151: CALL_OW 72
19155: ST_TO_ADDR
19156: GO 19310
19158: LD_INT 3
19160: DOUBLE
19161: EQUAL
19162: IFTRUE 19166
19164: GO 19228
19166: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19167: LD_ADDR_VAR 0 12
19171: PUSH
19172: LD_VAR 0 18
19176: PPUSH
19177: LD_INT 22
19179: PUSH
19180: LD_VAR 0 16
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 30
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 30
19204: PUSH
19205: LD_INT 3
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PPUSH
19221: CALL_OW 72
19225: ST_TO_ADDR
19226: GO 19310
19228: LD_INT 4
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19309
19236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19237: LD_ADDR_VAR 0 12
19241: PUSH
19242: LD_VAR 0 18
19246: PPUSH
19247: LD_INT 22
19249: PUSH
19250: LD_VAR 0 16
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 2
19261: PUSH
19262: LD_INT 30
19264: PUSH
19265: LD_INT 6
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 30
19274: PUSH
19275: LD_INT 7
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 30
19284: PUSH
19285: LD_INT 8
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PPUSH
19302: CALL_OW 72
19306: ST_TO_ADDR
19307: GO 19310
19309: POP
// if i = 1 then
19310: LD_VAR 0 8
19314: PUSH
19315: LD_INT 1
19317: EQUAL
19318: IFFALSE 19429
// begin tmp := [ ] ;
19320: LD_ADDR_VAR 0 19
19324: PUSH
19325: EMPTY
19326: ST_TO_ADDR
// for j in f do
19327: LD_ADDR_VAR 0 9
19331: PUSH
19332: LD_VAR 0 12
19336: PUSH
19337: FOR_IN
19338: IFFALSE 19411
// if GetBType ( j ) = b_bunker then
19340: LD_VAR 0 9
19344: PPUSH
19345: CALL_OW 266
19349: PUSH
19350: LD_INT 32
19352: EQUAL
19353: IFFALSE 19380
// tmp := Insert ( tmp , 1 , j ) else
19355: LD_ADDR_VAR 0 19
19359: PUSH
19360: LD_VAR 0 19
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: LD_VAR 0 9
19372: PPUSH
19373: CALL_OW 2
19377: ST_TO_ADDR
19378: GO 19409
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19380: LD_ADDR_VAR 0 19
19384: PUSH
19385: LD_VAR 0 19
19389: PPUSH
19390: LD_VAR 0 19
19394: PUSH
19395: LD_INT 1
19397: PLUS
19398: PPUSH
19399: LD_VAR 0 9
19403: PPUSH
19404: CALL_OW 2
19408: ST_TO_ADDR
19409: GO 19337
19411: POP
19412: POP
// if tmp then
19413: LD_VAR 0 19
19417: IFFALSE 19429
// f := tmp ;
19419: LD_ADDR_VAR 0 12
19423: PUSH
19424: LD_VAR 0 19
19428: ST_TO_ADDR
// end ; x := personel [ i ] ;
19429: LD_ADDR_VAR 0 13
19433: PUSH
19434: LD_VAR 0 6
19438: PUSH
19439: LD_VAR 0 8
19443: ARRAY
19444: ST_TO_ADDR
// if x = - 1 then
19445: LD_VAR 0 13
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: EQUAL
19454: IFFALSE 19665
// begin for j in f do
19456: LD_ADDR_VAR 0 9
19460: PUSH
19461: LD_VAR 0 12
19465: PUSH
19466: FOR_IN
19467: IFFALSE 19661
// repeat InitHc ;
19469: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19473: LD_VAR 0 9
19477: PPUSH
19478: CALL_OW 266
19482: PUSH
19483: LD_INT 5
19485: EQUAL
19486: IFFALSE 19556
// begin if UnitsInside ( j ) < 3 then
19488: LD_VAR 0 9
19492: PPUSH
19493: CALL_OW 313
19497: PUSH
19498: LD_INT 3
19500: LESS
19501: IFFALSE 19537
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19503: LD_INT 0
19505: PPUSH
19506: LD_INT 5
19508: PUSH
19509: LD_INT 8
19511: PUSH
19512: LD_INT 9
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: PUSH
19520: LD_VAR 0 17
19524: ARRAY
19525: PPUSH
19526: LD_VAR 0 4
19530: PPUSH
19531: CALL_OW 380
19535: GO 19554
// PrepareHuman ( false , i , skill ) ;
19537: LD_INT 0
19539: PPUSH
19540: LD_VAR 0 8
19544: PPUSH
19545: LD_VAR 0 4
19549: PPUSH
19550: CALL_OW 380
// end else
19554: GO 19573
// PrepareHuman ( false , i , skill ) ;
19556: LD_INT 0
19558: PPUSH
19559: LD_VAR 0 8
19563: PPUSH
19564: LD_VAR 0 4
19568: PPUSH
19569: CALL_OW 380
// un := CreateHuman ;
19573: LD_ADDR_VAR 0 14
19577: PUSH
19578: CALL_OW 44
19582: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19583: LD_ADDR_VAR 0 7
19587: PUSH
19588: LD_VAR 0 7
19592: PPUSH
19593: LD_INT 1
19595: PPUSH
19596: LD_VAR 0 14
19600: PPUSH
19601: CALL_OW 2
19605: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19606: LD_VAR 0 14
19610: PPUSH
19611: LD_VAR 0 9
19615: PPUSH
19616: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19620: LD_VAR 0 9
19624: PPUSH
19625: CALL_OW 313
19629: PUSH
19630: LD_INT 6
19632: EQUAL
19633: IFTRUE 19657
19635: PUSH
19636: LD_VAR 0 9
19640: PPUSH
19641: CALL_OW 266
19645: PUSH
19646: LD_INT 32
19648: PUSH
19649: LD_INT 31
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: IN
19656: OR
19657: IFFALSE 19469
19659: GO 19466
19661: POP
19662: POP
// end else
19663: GO 20049
// for j = 1 to x do
19665: LD_ADDR_VAR 0 9
19669: PUSH
19670: DOUBLE
19671: LD_INT 1
19673: DEC
19674: ST_TO_ADDR
19675: LD_VAR 0 13
19679: PUSH
19680: FOR_TO
19681: IFFALSE 20047
// begin InitHc ;
19683: CALL_OW 19
// if not f then
19687: LD_VAR 0 12
19691: NOT
19692: IFFALSE 19781
// begin PrepareHuman ( false , i , skill ) ;
19694: LD_INT 0
19696: PPUSH
19697: LD_VAR 0 8
19701: PPUSH
19702: LD_VAR 0 4
19706: PPUSH
19707: CALL_OW 380
// un := CreateHuman ;
19711: LD_ADDR_VAR 0 14
19715: PUSH
19716: CALL_OW 44
19720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19721: LD_ADDR_VAR 0 7
19725: PUSH
19726: LD_VAR 0 7
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: LD_VAR 0 14
19738: PPUSH
19739: CALL_OW 2
19743: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19744: LD_VAR 0 14
19748: PPUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL_OW 250
19758: PPUSH
19759: LD_VAR 0 1
19763: PPUSH
19764: CALL_OW 251
19768: PPUSH
19769: LD_INT 10
19771: PPUSH
19772: LD_INT 0
19774: PPUSH
19775: CALL_OW 50
// continue ;
19779: GO 19680
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19781: LD_VAR 0 12
19785: PUSH
19786: LD_INT 1
19788: ARRAY
19789: PPUSH
19790: CALL_OW 313
19794: IFFALSE 19822
19796: PUSH
19797: LD_VAR 0 12
19801: PUSH
19802: LD_INT 1
19804: ARRAY
19805: PPUSH
19806: CALL_OW 266
19810: PUSH
19811: LD_INT 32
19813: PUSH
19814: LD_INT 31
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: IN
19821: AND
19822: IFTRUE 19843
19824: PUSH
19825: LD_VAR 0 12
19829: PUSH
19830: LD_INT 1
19832: ARRAY
19833: PPUSH
19834: CALL_OW 313
19838: PUSH
19839: LD_INT 6
19841: EQUAL
19842: OR
19843: IFFALSE 19863
// f := Delete ( f , 1 ) ;
19845: LD_ADDR_VAR 0 12
19849: PUSH
19850: LD_VAR 0 12
19854: PPUSH
19855: LD_INT 1
19857: PPUSH
19858: CALL_OW 3
19862: ST_TO_ADDR
// if not f then
19863: LD_VAR 0 12
19867: NOT
19868: IFFALSE 19886
// begin x := x + 2 ;
19870: LD_ADDR_VAR 0 13
19874: PUSH
19875: LD_VAR 0 13
19879: PUSH
19880: LD_INT 2
19882: PLUS
19883: ST_TO_ADDR
// continue ;
19884: GO 19680
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19886: LD_VAR 0 12
19890: PUSH
19891: LD_INT 1
19893: ARRAY
19894: PPUSH
19895: CALL_OW 266
19899: PUSH
19900: LD_INT 5
19902: EQUAL
19903: IFFALSE 19977
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19905: LD_VAR 0 12
19909: PUSH
19910: LD_INT 1
19912: ARRAY
19913: PPUSH
19914: CALL_OW 313
19918: PUSH
19919: LD_INT 3
19921: LESS
19922: IFFALSE 19958
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19924: LD_INT 0
19926: PPUSH
19927: LD_INT 5
19929: PUSH
19930: LD_INT 8
19932: PUSH
19933: LD_INT 9
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: PUSH
19941: LD_VAR 0 17
19945: ARRAY
19946: PPUSH
19947: LD_VAR 0 4
19951: PPUSH
19952: CALL_OW 380
19956: GO 19975
// PrepareHuman ( false , i , skill ) ;
19958: LD_INT 0
19960: PPUSH
19961: LD_VAR 0 8
19965: PPUSH
19966: LD_VAR 0 4
19970: PPUSH
19971: CALL_OW 380
// end else
19975: GO 19994
// PrepareHuman ( false , i , skill ) ;
19977: LD_INT 0
19979: PPUSH
19980: LD_VAR 0 8
19984: PPUSH
19985: LD_VAR 0 4
19989: PPUSH
19990: CALL_OW 380
// un := CreateHuman ;
19994: LD_ADDR_VAR 0 14
19998: PUSH
19999: CALL_OW 44
20003: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20004: LD_ADDR_VAR 0 7
20008: PUSH
20009: LD_VAR 0 7
20013: PPUSH
20014: LD_INT 1
20016: PPUSH
20017: LD_VAR 0 14
20021: PPUSH
20022: CALL_OW 2
20026: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20027: LD_VAR 0 14
20031: PPUSH
20032: LD_VAR 0 12
20036: PUSH
20037: LD_INT 1
20039: ARRAY
20040: PPUSH
20041: CALL_OW 52
// end ;
20045: GO 19680
20047: POP
20048: POP
// end ;
20049: GO 18980
20051: POP
20052: POP
// result := result ^ buildings ;
20053: LD_ADDR_VAR 0 7
20057: PUSH
20058: LD_VAR 0 7
20062: PUSH
20063: LD_VAR 0 18
20067: ADD
20068: ST_TO_ADDR
// end else
20069: GO 20212
// begin for i = 1 to personel do
20071: LD_ADDR_VAR 0 8
20075: PUSH
20076: DOUBLE
20077: LD_INT 1
20079: DEC
20080: ST_TO_ADDR
20081: LD_VAR 0 6
20085: PUSH
20086: FOR_TO
20087: IFFALSE 20210
// begin if i > 4 then
20089: LD_VAR 0 8
20093: PUSH
20094: LD_INT 4
20096: GREATER
20097: IFFALSE 20101
// break ;
20099: GO 20210
// x := personel [ i ] ;
20101: LD_ADDR_VAR 0 13
20105: PUSH
20106: LD_VAR 0 6
20110: PUSH
20111: LD_VAR 0 8
20115: ARRAY
20116: ST_TO_ADDR
// if x = - 1 then
20117: LD_VAR 0 13
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: EQUAL
20126: IFFALSE 20130
// continue ;
20128: GO 20086
// PrepareHuman ( false , i , skill ) ;
20130: LD_INT 0
20132: PPUSH
20133: LD_VAR 0 8
20137: PPUSH
20138: LD_VAR 0 4
20142: PPUSH
20143: CALL_OW 380
// un := CreateHuman ;
20147: LD_ADDR_VAR 0 14
20151: PUSH
20152: CALL_OW 44
20156: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20157: LD_VAR 0 14
20161: PPUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 250
20171: PPUSH
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 251
20181: PPUSH
20182: LD_INT 10
20184: PPUSH
20185: LD_INT 0
20187: PPUSH
20188: CALL_OW 50
// result := result ^ un ;
20192: LD_ADDR_VAR 0 7
20196: PUSH
20197: LD_VAR 0 7
20201: PUSH
20202: LD_VAR 0 14
20206: ADD
20207: ST_TO_ADDR
// end ;
20208: GO 20086
20210: POP
20211: POP
// end ; end ;
20212: LD_VAR 0 7
20216: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20217: LD_INT 0
20219: PPUSH
20220: PPUSH
20221: PPUSH
20222: PPUSH
20223: PPUSH
20224: PPUSH
20225: PPUSH
20226: PPUSH
20227: PPUSH
20228: PPUSH
20229: PPUSH
20230: PPUSH
20231: PPUSH
20232: PPUSH
20233: PPUSH
20234: PPUSH
// result := false ;
20235: LD_ADDR_VAR 0 3
20239: PUSH
20240: LD_INT 0
20242: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20243: LD_VAR 0 1
20247: NOT
20248: IFTRUE 20273
20250: PUSH
20251: LD_VAR 0 1
20255: PPUSH
20256: CALL_OW 266
20260: PUSH
20261: LD_INT 32
20263: PUSH
20264: LD_INT 33
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: IN
20271: NOT
20272: OR
20273: IFFALSE 20277
// exit ;
20275: GO 21412
// nat := GetNation ( tower ) ;
20277: LD_ADDR_VAR 0 12
20281: PUSH
20282: LD_VAR 0 1
20286: PPUSH
20287: CALL_OW 248
20291: ST_TO_ADDR
// side := GetSide ( tower ) ;
20292: LD_ADDR_VAR 0 16
20296: PUSH
20297: LD_VAR 0 1
20301: PPUSH
20302: CALL_OW 255
20306: ST_TO_ADDR
// x := GetX ( tower ) ;
20307: LD_ADDR_VAR 0 10
20311: PUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 250
20321: ST_TO_ADDR
// y := GetY ( tower ) ;
20322: LD_ADDR_VAR 0 11
20326: PUSH
20327: LD_VAR 0 1
20331: PPUSH
20332: CALL_OW 251
20336: ST_TO_ADDR
// if not x or not y then
20337: LD_VAR 0 10
20341: NOT
20342: IFTRUE 20351
20344: PUSH
20345: LD_VAR 0 11
20349: NOT
20350: OR
20351: IFFALSE 20355
// exit ;
20353: GO 21412
// weapon := 0 ;
20355: LD_ADDR_VAR 0 18
20359: PUSH
20360: LD_INT 0
20362: ST_TO_ADDR
// fac_list := [ ] ;
20363: LD_ADDR_VAR 0 17
20367: PUSH
20368: EMPTY
20369: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20370: LD_ADDR_VAR 0 6
20374: PUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: CALL_OW 274
20384: PPUSH
20385: LD_VAR 0 2
20389: PPUSH
20390: LD_INT 0
20392: PPUSH
20393: CALL 17947 0 3
20397: PPUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 3
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PPUSH
20408: CALL_OW 72
20412: ST_TO_ADDR
// if not factories then
20413: LD_VAR 0 6
20417: NOT
20418: IFFALSE 20422
// exit ;
20420: GO 21412
// for i in factories do
20422: LD_ADDR_VAR 0 8
20426: PUSH
20427: LD_VAR 0 6
20431: PUSH
20432: FOR_IN
20433: IFFALSE 20458
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20435: LD_ADDR_VAR 0 17
20439: PUSH
20440: LD_VAR 0 17
20444: PUSH
20445: LD_VAR 0 8
20449: PPUSH
20450: CALL_OW 478
20454: UNION
20455: ST_TO_ADDR
20456: GO 20432
20458: POP
20459: POP
// if not fac_list then
20460: LD_VAR 0 17
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 21412
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20469: LD_ADDR_VAR 0 5
20473: PUSH
20474: LD_INT 4
20476: PUSH
20477: LD_INT 5
20479: PUSH
20480: LD_INT 9
20482: PUSH
20483: LD_INT 10
20485: PUSH
20486: LD_INT 6
20488: PUSH
20489: LD_INT 7
20491: PUSH
20492: LD_INT 11
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 27
20506: PUSH
20507: LD_INT 28
20509: PUSH
20510: LD_INT 26
20512: PUSH
20513: LD_INT 30
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 43
20524: PUSH
20525: LD_INT 44
20527: PUSH
20528: LD_INT 46
20530: PUSH
20531: LD_INT 45
20533: PUSH
20534: LD_INT 47
20536: PUSH
20537: LD_INT 49
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: PUSH
20553: LD_VAR 0 12
20557: ARRAY
20558: ST_TO_ADDR
// list := list isect fac_list ;
20559: LD_ADDR_VAR 0 5
20563: PUSH
20564: LD_VAR 0 5
20568: PUSH
20569: LD_VAR 0 17
20573: ISECT
20574: ST_TO_ADDR
// if not list then
20575: LD_VAR 0 5
20579: NOT
20580: IFFALSE 20584
// exit ;
20582: GO 21412
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20584: LD_VAR 0 12
20588: PUSH
20589: LD_INT 3
20591: EQUAL
20592: IFFALSE 20604
20594: PUSH
20595: LD_INT 49
20597: PUSH
20598: LD_VAR 0 5
20602: IN
20603: AND
20604: IFFALSE 20624
20606: PUSH
20607: LD_INT 31
20609: PPUSH
20610: LD_VAR 0 16
20614: PPUSH
20615: CALL_OW 321
20619: PUSH
20620: LD_INT 2
20622: EQUAL
20623: AND
20624: IFFALSE 20684
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20626: LD_INT 22
20628: PUSH
20629: LD_VAR 0 16
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 35
20640: PUSH
20641: LD_INT 49
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 91
20650: PUSH
20651: LD_VAR 0 1
20655: PUSH
20656: LD_INT 10
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 69
20673: NOT
20674: IFFALSE 20684
// weapon := ru_time_lapser ;
20676: LD_ADDR_VAR 0 18
20680: PUSH
20681: LD_INT 49
20683: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20684: LD_VAR 0 12
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: IN
20699: IFFALSE 20723
20701: PUSH
20702: LD_INT 11
20704: PUSH
20705: LD_VAR 0 5
20709: IN
20710: IFTRUE 20722
20712: PUSH
20713: LD_INT 30
20715: PUSH
20716: LD_VAR 0 5
20720: IN
20721: OR
20722: AND
20723: IFFALSE 20743
20725: PUSH
20726: LD_INT 6
20728: PPUSH
20729: LD_VAR 0 16
20733: PPUSH
20734: CALL_OW 321
20738: PUSH
20739: LD_INT 2
20741: EQUAL
20742: AND
20743: IFFALSE 20910
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20745: LD_INT 22
20747: PUSH
20748: LD_VAR 0 16
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: PUSH
20760: LD_INT 35
20762: PUSH
20763: LD_INT 11
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 35
20772: PUSH
20773: LD_INT 30
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 91
20787: PUSH
20788: LD_VAR 0 1
20792: PUSH
20793: LD_INT 18
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: PPUSH
20806: CALL_OW 69
20810: NOT
20811: IFFALSE 20887
20813: PUSH
20814: LD_INT 22
20816: PUSH
20817: LD_VAR 0 16
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 30
20831: PUSH
20832: LD_INT 32
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 30
20841: PUSH
20842: LD_INT 33
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 91
20856: PUSH
20857: LD_VAR 0 1
20861: PUSH
20862: LD_INT 12
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: PPUSH
20878: CALL_OW 69
20882: PUSH
20883: LD_INT 2
20885: GREATER
20886: AND
20887: IFFALSE 20910
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20889: LD_ADDR_VAR 0 18
20893: PUSH
20894: LD_INT 11
20896: PUSH
20897: LD_INT 30
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_VAR 0 12
20908: ARRAY
20909: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20910: LD_VAR 0 18
20914: NOT
20915: IFFALSE 20935
20917: PUSH
20918: LD_INT 40
20920: PPUSH
20921: LD_VAR 0 16
20925: PPUSH
20926: CALL_OW 321
20930: PUSH
20931: LD_INT 2
20933: EQUAL
20934: AND
20935: IFFALSE 20971
20937: PUSH
20938: LD_INT 7
20940: PUSH
20941: LD_VAR 0 5
20945: IN
20946: IFTRUE 20958
20948: PUSH
20949: LD_INT 28
20951: PUSH
20952: LD_VAR 0 5
20956: IN
20957: OR
20958: IFTRUE 20970
20960: PUSH
20961: LD_INT 45
20963: PUSH
20964: LD_VAR 0 5
20968: IN
20969: OR
20970: AND
20971: IFFALSE 21225
// begin hex := GetHexInfo ( x , y ) ;
20973: LD_ADDR_VAR 0 4
20977: PUSH
20978: LD_VAR 0 10
20982: PPUSH
20983: LD_VAR 0 11
20987: PPUSH
20988: CALL_OW 546
20992: ST_TO_ADDR
// if hex [ 1 ] then
20993: LD_VAR 0 4
20997: PUSH
20998: LD_INT 1
21000: ARRAY
21001: IFFALSE 21005
// exit ;
21003: GO 21412
// height := hex [ 2 ] ;
21005: LD_ADDR_VAR 0 15
21009: PUSH
21010: LD_VAR 0 4
21014: PUSH
21015: LD_INT 2
21017: ARRAY
21018: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21019: LD_ADDR_VAR 0 14
21023: PUSH
21024: LD_INT 0
21026: PUSH
21027: LD_INT 2
21029: PUSH
21030: LD_INT 3
21032: PUSH
21033: LD_INT 5
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: ST_TO_ADDR
// for i in tmp do
21042: LD_ADDR_VAR 0 8
21046: PUSH
21047: LD_VAR 0 14
21051: PUSH
21052: FOR_IN
21053: IFFALSE 21223
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21055: LD_ADDR_VAR 0 9
21059: PUSH
21060: LD_VAR 0 10
21064: PPUSH
21065: LD_VAR 0 8
21069: PPUSH
21070: LD_INT 5
21072: PPUSH
21073: CALL_OW 272
21077: PUSH
21078: LD_VAR 0 11
21082: PPUSH
21083: LD_VAR 0 8
21087: PPUSH
21088: LD_INT 5
21090: PPUSH
21091: CALL_OW 273
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21100: LD_VAR 0 9
21104: PUSH
21105: LD_INT 1
21107: ARRAY
21108: PPUSH
21109: LD_VAR 0 9
21113: PUSH
21114: LD_INT 2
21116: ARRAY
21117: PPUSH
21118: CALL_OW 488
21122: IFFALSE 21221
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21124: LD_ADDR_VAR 0 4
21128: PUSH
21129: LD_VAR 0 9
21133: PUSH
21134: LD_INT 1
21136: ARRAY
21137: PPUSH
21138: LD_VAR 0 9
21142: PUSH
21143: LD_INT 2
21145: ARRAY
21146: PPUSH
21147: CALL_OW 546
21151: ST_TO_ADDR
// if hex [ 1 ] then
21152: LD_VAR 0 4
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: IFFALSE 21164
// continue ;
21162: GO 21052
// h := hex [ 2 ] ;
21164: LD_ADDR_VAR 0 13
21168: PUSH
21169: LD_VAR 0 4
21173: PUSH
21174: LD_INT 2
21176: ARRAY
21177: ST_TO_ADDR
// if h + 7 < height then
21178: LD_VAR 0 13
21182: PUSH
21183: LD_INT 7
21185: PLUS
21186: PUSH
21187: LD_VAR 0 15
21191: LESS
21192: IFFALSE 21221
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21194: LD_ADDR_VAR 0 18
21198: PUSH
21199: LD_INT 7
21201: PUSH
21202: LD_INT 28
21204: PUSH
21205: LD_INT 45
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: LD_VAR 0 12
21217: ARRAY
21218: ST_TO_ADDR
// break ;
21219: GO 21223
// end ; end ; end ;
21221: GO 21052
21223: POP
21224: POP
// end ; if not weapon then
21225: LD_VAR 0 18
21229: NOT
21230: IFFALSE 21290
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21232: LD_ADDR_VAR 0 5
21236: PUSH
21237: LD_VAR 0 5
21241: PUSH
21242: LD_INT 11
21244: PUSH
21245: LD_INT 30
21247: PUSH
21248: LD_INT 49
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: DIFF
21256: ST_TO_ADDR
// if not list then
21257: LD_VAR 0 5
21261: NOT
21262: IFFALSE 21266
// exit ;
21264: GO 21412
// weapon := list [ rand ( 1 , list ) ] ;
21266: LD_ADDR_VAR 0 18
21270: PUSH
21271: LD_VAR 0 5
21275: PUSH
21276: LD_INT 1
21278: PPUSH
21279: LD_VAR 0 5
21283: PPUSH
21284: CALL_OW 12
21288: ARRAY
21289: ST_TO_ADDR
// end ; if weapon then
21290: LD_VAR 0 18
21294: IFFALSE 21412
// begin tmp := CostOfWeapon ( weapon ) ;
21296: LD_ADDR_VAR 0 14
21300: PUSH
21301: LD_VAR 0 18
21305: PPUSH
21306: CALL_OW 451
21310: ST_TO_ADDR
// j := GetBase ( tower ) ;
21311: LD_ADDR_VAR 0 9
21315: PUSH
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 274
21325: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21326: LD_VAR 0 9
21330: PPUSH
21331: LD_INT 1
21333: PPUSH
21334: CALL_OW 275
21338: PUSH
21339: LD_VAR 0 14
21343: PUSH
21344: LD_INT 1
21346: ARRAY
21347: GREATEREQUAL
21348: IFFALSE 21374
21350: PUSH
21351: LD_VAR 0 9
21355: PPUSH
21356: LD_INT 2
21358: PPUSH
21359: CALL_OW 275
21363: PUSH
21364: LD_VAR 0 14
21368: PUSH
21369: LD_INT 2
21371: ARRAY
21372: GREATEREQUAL
21373: AND
21374: IFFALSE 21400
21376: PUSH
21377: LD_VAR 0 9
21381: PPUSH
21382: LD_INT 3
21384: PPUSH
21385: CALL_OW 275
21389: PUSH
21390: LD_VAR 0 14
21394: PUSH
21395: LD_INT 3
21397: ARRAY
21398: GREATEREQUAL
21399: AND
21400: IFFALSE 21412
// result := weapon ;
21402: LD_ADDR_VAR 0 3
21406: PUSH
21407: LD_VAR 0 18
21411: ST_TO_ADDR
// end ; end ;
21412: LD_VAR 0 3
21416: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21417: LD_INT 0
21419: PPUSH
21420: PPUSH
// result := true ;
21421: LD_ADDR_VAR 0 3
21425: PUSH
21426: LD_INT 1
21428: ST_TO_ADDR
// if array1 = array2 then
21429: LD_VAR 0 1
21433: PUSH
21434: LD_VAR 0 2
21438: EQUAL
21439: IFFALSE 21499
// begin for i = 1 to array1 do
21441: LD_ADDR_VAR 0 4
21445: PUSH
21446: DOUBLE
21447: LD_INT 1
21449: DEC
21450: ST_TO_ADDR
21451: LD_VAR 0 1
21455: PUSH
21456: FOR_TO
21457: IFFALSE 21495
// if array1 [ i ] <> array2 [ i ] then
21459: LD_VAR 0 1
21463: PUSH
21464: LD_VAR 0 4
21468: ARRAY
21469: PUSH
21470: LD_VAR 0 2
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: NONEQUAL
21481: IFFALSE 21493
// begin result := false ;
21483: LD_ADDR_VAR 0 3
21487: PUSH
21488: LD_INT 0
21490: ST_TO_ADDR
// break ;
21491: GO 21495
// end ;
21493: GO 21456
21495: POP
21496: POP
// end else
21497: GO 21507
// result := false ;
21499: LD_ADDR_VAR 0 3
21503: PUSH
21504: LD_INT 0
21506: ST_TO_ADDR
// end ;
21507: LD_VAR 0 3
21511: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
// if not array1 or not array2 then
21516: LD_VAR 0 1
21520: NOT
21521: IFTRUE 21530
21523: PUSH
21524: LD_VAR 0 2
21528: NOT
21529: OR
21530: IFFALSE 21534
// exit ;
21532: GO 21598
// result := true ;
21534: LD_ADDR_VAR 0 3
21538: PUSH
21539: LD_INT 1
21541: ST_TO_ADDR
// for i = 1 to array1 do
21542: LD_ADDR_VAR 0 4
21546: PUSH
21547: DOUBLE
21548: LD_INT 1
21550: DEC
21551: ST_TO_ADDR
21552: LD_VAR 0 1
21556: PUSH
21557: FOR_TO
21558: IFFALSE 21596
// if array1 [ i ] <> array2 [ i ] then
21560: LD_VAR 0 1
21564: PUSH
21565: LD_VAR 0 4
21569: ARRAY
21570: PUSH
21571: LD_VAR 0 2
21575: PUSH
21576: LD_VAR 0 4
21580: ARRAY
21581: NONEQUAL
21582: IFFALSE 21594
// begin result := false ;
21584: LD_ADDR_VAR 0 3
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// break ;
21592: GO 21596
// end ;
21594: GO 21557
21596: POP
21597: POP
// end ;
21598: LD_VAR 0 3
21602: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
// pom := GetBase ( fac ) ;
21608: LD_ADDR_VAR 0 5
21612: PUSH
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 274
21622: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21623: LD_ADDR_VAR 0 4
21627: PUSH
21628: LD_VAR 0 2
21632: PUSH
21633: LD_INT 1
21635: ARRAY
21636: PPUSH
21637: LD_VAR 0 2
21641: PUSH
21642: LD_INT 2
21644: ARRAY
21645: PPUSH
21646: LD_VAR 0 2
21650: PUSH
21651: LD_INT 3
21653: ARRAY
21654: PPUSH
21655: LD_VAR 0 2
21659: PUSH
21660: LD_INT 4
21662: ARRAY
21663: PPUSH
21664: CALL_OW 449
21668: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21669: LD_ADDR_VAR 0 3
21673: PUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: CALL_OW 275
21686: PUSH
21687: LD_VAR 0 4
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: GREATEREQUAL
21696: IFFALSE 21722
21698: PUSH
21699: LD_VAR 0 5
21703: PPUSH
21704: LD_INT 2
21706: PPUSH
21707: CALL_OW 275
21711: PUSH
21712: LD_VAR 0 4
21716: PUSH
21717: LD_INT 2
21719: ARRAY
21720: GREATEREQUAL
21721: AND
21722: IFFALSE 21748
21724: PUSH
21725: LD_VAR 0 5
21729: PPUSH
21730: LD_INT 3
21732: PPUSH
21733: CALL_OW 275
21737: PUSH
21738: LD_VAR 0 4
21742: PUSH
21743: LD_INT 3
21745: ARRAY
21746: GREATEREQUAL
21747: AND
21748: ST_TO_ADDR
// end ;
21749: LD_VAR 0 3
21753: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21754: LD_INT 0
21756: PPUSH
21757: PPUSH
21758: PPUSH
21759: PPUSH
// pom := GetBase ( building ) ;
21760: LD_ADDR_VAR 0 3
21764: PUSH
21765: LD_VAR 0 1
21769: PPUSH
21770: CALL_OW 274
21774: ST_TO_ADDR
// if not pom then
21775: LD_VAR 0 3
21779: NOT
21780: IFFALSE 21784
// exit ;
21782: GO 21958
// btype := GetBType ( building ) ;
21784: LD_ADDR_VAR 0 5
21788: PUSH
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 266
21798: ST_TO_ADDR
// if btype = b_armoury then
21799: LD_VAR 0 5
21803: PUSH
21804: LD_INT 4
21806: EQUAL
21807: IFFALSE 21817
// btype := b_barracks ;
21809: LD_ADDR_VAR 0 5
21813: PUSH
21814: LD_INT 5
21816: ST_TO_ADDR
// if btype = b_depot then
21817: LD_VAR 0 5
21821: PUSH
21822: LD_INT 0
21824: EQUAL
21825: IFFALSE 21835
// btype := b_warehouse ;
21827: LD_ADDR_VAR 0 5
21831: PUSH
21832: LD_INT 1
21834: ST_TO_ADDR
// if btype = b_workshop then
21835: LD_VAR 0 5
21839: PUSH
21840: LD_INT 2
21842: EQUAL
21843: IFFALSE 21853
// btype := b_factory ;
21845: LD_ADDR_VAR 0 5
21849: PUSH
21850: LD_INT 3
21852: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21853: LD_ADDR_VAR 0 4
21857: PUSH
21858: LD_VAR 0 5
21862: PPUSH
21863: LD_VAR 0 1
21867: PPUSH
21868: CALL_OW 248
21872: PPUSH
21873: CALL_OW 450
21877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: LD_VAR 0 3
21887: PPUSH
21888: LD_INT 1
21890: PPUSH
21891: CALL_OW 275
21895: PUSH
21896: LD_VAR 0 4
21900: PUSH
21901: LD_INT 1
21903: ARRAY
21904: GREATEREQUAL
21905: IFFALSE 21931
21907: PUSH
21908: LD_VAR 0 3
21912: PPUSH
21913: LD_INT 2
21915: PPUSH
21916: CALL_OW 275
21920: PUSH
21921: LD_VAR 0 4
21925: PUSH
21926: LD_INT 2
21928: ARRAY
21929: GREATEREQUAL
21930: AND
21931: IFFALSE 21957
21933: PUSH
21934: LD_VAR 0 3
21938: PPUSH
21939: LD_INT 3
21941: PPUSH
21942: CALL_OW 275
21946: PUSH
21947: LD_VAR 0 4
21951: PUSH
21952: LD_INT 3
21954: ARRAY
21955: GREATEREQUAL
21956: AND
21957: ST_TO_ADDR
// end ;
21958: LD_VAR 0 2
21962: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21963: LD_INT 0
21965: PPUSH
21966: PPUSH
21967: PPUSH
// pom := GetBase ( building ) ;
21968: LD_ADDR_VAR 0 4
21972: PUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 274
21982: ST_TO_ADDR
// if not pom then
21983: LD_VAR 0 4
21987: NOT
21988: IFFALSE 21992
// exit ;
21990: GO 22097
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21992: LD_ADDR_VAR 0 5
21996: PUSH
21997: LD_VAR 0 2
22001: PPUSH
22002: LD_VAR 0 1
22006: PPUSH
22007: CALL_OW 248
22011: PPUSH
22012: CALL_OW 450
22016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22017: LD_ADDR_VAR 0 3
22021: PUSH
22022: LD_VAR 0 4
22026: PPUSH
22027: LD_INT 1
22029: PPUSH
22030: CALL_OW 275
22034: PUSH
22035: LD_VAR 0 5
22039: PUSH
22040: LD_INT 1
22042: ARRAY
22043: GREATEREQUAL
22044: IFFALSE 22070
22046: PUSH
22047: LD_VAR 0 4
22051: PPUSH
22052: LD_INT 2
22054: PPUSH
22055: CALL_OW 275
22059: PUSH
22060: LD_VAR 0 5
22064: PUSH
22065: LD_INT 2
22067: ARRAY
22068: GREATEREQUAL
22069: AND
22070: IFFALSE 22096
22072: PUSH
22073: LD_VAR 0 4
22077: PPUSH
22078: LD_INT 3
22080: PPUSH
22081: CALL_OW 275
22085: PUSH
22086: LD_VAR 0 5
22090: PUSH
22091: LD_INT 3
22093: ARRAY
22094: GREATEREQUAL
22095: AND
22096: ST_TO_ADDR
// end ;
22097: LD_VAR 0 3
22101: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22102: LD_INT 0
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
22108: PPUSH
22109: PPUSH
22110: PPUSH
22111: PPUSH
22112: PPUSH
22113: PPUSH
22114: PPUSH
// result := false ;
22115: LD_ADDR_VAR 0 8
22119: PUSH
22120: LD_INT 0
22122: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22123: LD_VAR 0 5
22127: NOT
22128: IFTRUE 22137
22130: PUSH
22131: LD_VAR 0 1
22135: NOT
22136: OR
22137: IFTRUE 22146
22139: PUSH
22140: LD_VAR 0 2
22144: NOT
22145: OR
22146: IFTRUE 22155
22148: PUSH
22149: LD_VAR 0 3
22153: NOT
22154: OR
22155: IFFALSE 22159
// exit ;
22157: GO 22985
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22159: LD_ADDR_VAR 0 14
22163: PUSH
22164: LD_VAR 0 1
22168: PPUSH
22169: LD_VAR 0 2
22173: PPUSH
22174: LD_VAR 0 3
22178: PPUSH
22179: LD_VAR 0 4
22183: PPUSH
22184: LD_VAR 0 5
22188: PUSH
22189: LD_INT 1
22191: ARRAY
22192: PPUSH
22193: CALL_OW 248
22197: PPUSH
22198: LD_INT 0
22200: PPUSH
22201: CALL 24266 0 6
22205: ST_TO_ADDR
// if not hexes then
22206: LD_VAR 0 14
22210: NOT
22211: IFFALSE 22215
// exit ;
22213: GO 22985
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22215: LD_ADDR_VAR 0 17
22219: PUSH
22220: LD_VAR 0 5
22224: PPUSH
22225: LD_INT 22
22227: PUSH
22228: LD_VAR 0 13
22232: PPUSH
22233: CALL_OW 255
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 2
22244: PUSH
22245: LD_INT 30
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 30
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PPUSH
22274: CALL_OW 72
22278: ST_TO_ADDR
// for i = 1 to hexes do
22279: LD_ADDR_VAR 0 9
22283: PUSH
22284: DOUBLE
22285: LD_INT 1
22287: DEC
22288: ST_TO_ADDR
22289: LD_VAR 0 14
22293: PUSH
22294: FOR_TO
22295: IFFALSE 22983
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22297: LD_ADDR_VAR 0 13
22301: PUSH
22302: LD_VAR 0 14
22306: PUSH
22307: LD_VAR 0 9
22311: ARRAY
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: LD_VAR 0 14
22321: PUSH
22322: LD_VAR 0 9
22326: ARRAY
22327: PUSH
22328: LD_INT 2
22330: ARRAY
22331: PPUSH
22332: CALL_OW 428
22336: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22337: LD_VAR 0 14
22341: PUSH
22342: LD_VAR 0 9
22346: ARRAY
22347: PUSH
22348: LD_INT 1
22350: ARRAY
22351: PPUSH
22352: LD_VAR 0 14
22356: PUSH
22357: LD_VAR 0 9
22361: ARRAY
22362: PUSH
22363: LD_INT 2
22365: ARRAY
22366: PPUSH
22367: CALL_OW 351
22371: IFTRUE 22410
22373: PUSH
22374: LD_VAR 0 14
22378: PUSH
22379: LD_VAR 0 9
22383: ARRAY
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PPUSH
22389: LD_VAR 0 14
22393: PUSH
22394: LD_VAR 0 9
22398: ARRAY
22399: PUSH
22400: LD_INT 2
22402: ARRAY
22403: PPUSH
22404: CALL_OW 488
22408: NOT
22409: OR
22410: IFTRUE 22427
22412: PUSH
22413: LD_VAR 0 13
22417: PPUSH
22418: CALL_OW 247
22422: PUSH
22423: LD_INT 3
22425: EQUAL
22426: OR
22427: IFFALSE 22433
// exit ;
22429: POP
22430: POP
22431: GO 22985
// if not tmp then
22433: LD_VAR 0 13
22437: NOT
22438: IFFALSE 22442
// continue ;
22440: GO 22294
// result := true ;
22442: LD_ADDR_VAR 0 8
22446: PUSH
22447: LD_INT 1
22449: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22450: LD_VAR 0 6
22454: IFFALSE 22471
22456: PUSH
22457: LD_VAR 0 13
22461: PPUSH
22462: CALL_OW 247
22466: PUSH
22467: LD_INT 2
22469: EQUAL
22470: AND
22471: IFFALSE 22488
22473: PUSH
22474: LD_VAR 0 13
22478: PPUSH
22479: CALL_OW 263
22483: PUSH
22484: LD_INT 1
22486: EQUAL
22487: AND
22488: IFFALSE 22652
// begin if IsDrivenBy ( tmp ) then
22490: LD_VAR 0 13
22494: PPUSH
22495: CALL_OW 311
22499: IFFALSE 22503
// continue ;
22501: GO 22294
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22503: LD_VAR 0 6
22507: PPUSH
22508: LD_INT 3
22510: PUSH
22511: LD_INT 60
22513: PUSH
22514: EMPTY
22515: LIST
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 3
22523: PUSH
22524: LD_INT 55
22526: PUSH
22527: EMPTY
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PPUSH
22538: CALL_OW 72
22542: IFFALSE 22650
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22544: LD_ADDR_VAR 0 18
22548: PUSH
22549: LD_VAR 0 6
22553: PPUSH
22554: LD_INT 3
22556: PUSH
22557: LD_INT 60
22559: PUSH
22560: EMPTY
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 3
22569: PUSH
22570: LD_INT 55
22572: PUSH
22573: EMPTY
22574: LIST
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PPUSH
22584: CALL_OW 72
22588: PUSH
22589: LD_INT 1
22591: ARRAY
22592: ST_TO_ADDR
// if IsInUnit ( driver ) then
22593: LD_VAR 0 18
22597: PPUSH
22598: CALL_OW 310
22602: IFFALSE 22613
// ComExit ( driver ) ;
22604: LD_VAR 0 18
22608: PPUSH
22609: CALL 48256 0 1
// AddComEnterUnit ( driver , tmp ) ;
22613: LD_VAR 0 18
22617: PPUSH
22618: LD_VAR 0 13
22622: PPUSH
22623: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22627: LD_VAR 0 18
22631: PPUSH
22632: LD_VAR 0 7
22636: PPUSH
22637: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22641: LD_VAR 0 18
22645: PPUSH
22646: CALL_OW 181
// end ; continue ;
22650: GO 22294
// end ; if not cleaners or not tmp in cleaners then
22652: LD_VAR 0 6
22656: NOT
22657: IFTRUE 22672
22659: PUSH
22660: LD_VAR 0 13
22664: PUSH
22665: LD_VAR 0 6
22669: IN
22670: NOT
22671: OR
22672: IFFALSE 22981
// begin if dep then
22674: LD_VAR 0 17
22678: IFFALSE 22814
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22680: LD_ADDR_VAR 0 16
22684: PUSH
22685: LD_VAR 0 17
22689: PUSH
22690: LD_INT 1
22692: ARRAY
22693: PPUSH
22694: CALL_OW 250
22698: PPUSH
22699: LD_VAR 0 17
22703: PUSH
22704: LD_INT 1
22706: ARRAY
22707: PPUSH
22708: CALL_OW 254
22712: PPUSH
22713: LD_INT 5
22715: PPUSH
22716: CALL_OW 272
22720: PUSH
22721: LD_VAR 0 17
22725: PUSH
22726: LD_INT 1
22728: ARRAY
22729: PPUSH
22730: CALL_OW 251
22734: PPUSH
22735: LD_VAR 0 17
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: CALL_OW 254
22748: PPUSH
22749: LD_INT 5
22751: PPUSH
22752: CALL_OW 273
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22761: LD_VAR 0 16
22765: PUSH
22766: LD_INT 1
22768: ARRAY
22769: PPUSH
22770: LD_VAR 0 16
22774: PUSH
22775: LD_INT 2
22777: ARRAY
22778: PPUSH
22779: CALL_OW 488
22783: IFFALSE 22814
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22785: LD_VAR 0 13
22789: PPUSH
22790: LD_VAR 0 16
22794: PUSH
22795: LD_INT 1
22797: ARRAY
22798: PPUSH
22799: LD_VAR 0 16
22803: PUSH
22804: LD_INT 2
22806: ARRAY
22807: PPUSH
22808: CALL_OW 111
// continue ;
22812: GO 22294
// end ; end ; r := GetDir ( tmp ) ;
22814: LD_ADDR_VAR 0 15
22818: PUSH
22819: LD_VAR 0 13
22823: PPUSH
22824: CALL_OW 254
22828: ST_TO_ADDR
// if r = 5 then
22829: LD_VAR 0 15
22833: PUSH
22834: LD_INT 5
22836: EQUAL
22837: IFFALSE 22847
// r := 0 ;
22839: LD_ADDR_VAR 0 15
22843: PUSH
22844: LD_INT 0
22846: ST_TO_ADDR
// for j = r to 5 do
22847: LD_ADDR_VAR 0 10
22851: PUSH
22852: DOUBLE
22853: LD_VAR 0 15
22857: DEC
22858: ST_TO_ADDR
22859: LD_INT 5
22861: PUSH
22862: FOR_TO
22863: IFFALSE 22979
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22865: LD_ADDR_VAR 0 11
22869: PUSH
22870: LD_VAR 0 13
22874: PPUSH
22875: CALL_OW 250
22879: PPUSH
22880: LD_VAR 0 10
22884: PPUSH
22885: LD_INT 2
22887: PPUSH
22888: CALL_OW 272
22892: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22893: LD_ADDR_VAR 0 12
22897: PUSH
22898: LD_VAR 0 13
22902: PPUSH
22903: CALL_OW 251
22907: PPUSH
22908: LD_VAR 0 10
22912: PPUSH
22913: LD_INT 2
22915: PPUSH
22916: CALL_OW 273
22920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22921: LD_VAR 0 11
22925: PPUSH
22926: LD_VAR 0 12
22930: PPUSH
22931: CALL_OW 488
22935: IFFALSE 22954
22937: PUSH
22938: LD_VAR 0 11
22942: PPUSH
22943: LD_VAR 0 12
22947: PPUSH
22948: CALL_OW 428
22952: NOT
22953: AND
22954: IFFALSE 22977
// begin ComMoveXY ( tmp , _x , _y ) ;
22956: LD_VAR 0 13
22960: PPUSH
22961: LD_VAR 0 11
22965: PPUSH
22966: LD_VAR 0 12
22970: PPUSH
22971: CALL_OW 111
// break ;
22975: GO 22979
// end ; end ;
22977: GO 22862
22979: POP
22980: POP
// end ; end ;
22981: GO 22294
22983: POP
22984: POP
// end ;
22985: LD_VAR 0 8
22989: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22990: LD_INT 0
22992: PPUSH
// result := true ;
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: LD_INT 1
23000: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23001: LD_VAR 0 2
23005: PUSH
23006: LD_INT 24
23008: DOUBLE
23009: EQUAL
23010: IFTRUE 23020
23012: LD_INT 33
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23045
23020: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23021: LD_ADDR_VAR 0 3
23025: PUSH
23026: LD_INT 32
23028: PPUSH
23029: LD_VAR 0 1
23033: PPUSH
23034: CALL_OW 321
23038: PUSH
23039: LD_INT 2
23041: EQUAL
23042: ST_TO_ADDR
23043: GO 23361
23045: LD_INT 20
23047: DOUBLE
23048: EQUAL
23049: IFTRUE 23053
23051: GO 23078
23053: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23054: LD_ADDR_VAR 0 3
23058: PUSH
23059: LD_INT 6
23061: PPUSH
23062: LD_VAR 0 1
23066: PPUSH
23067: CALL_OW 321
23071: PUSH
23072: LD_INT 2
23074: EQUAL
23075: ST_TO_ADDR
23076: GO 23361
23078: LD_INT 22
23080: DOUBLE
23081: EQUAL
23082: IFTRUE 23092
23084: LD_INT 36
23086: DOUBLE
23087: EQUAL
23088: IFTRUE 23092
23090: GO 23117
23092: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_INT 15
23100: PPUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 321
23110: PUSH
23111: LD_INT 2
23113: EQUAL
23114: ST_TO_ADDR
23115: GO 23361
23117: LD_INT 30
23119: DOUBLE
23120: EQUAL
23121: IFTRUE 23125
23123: GO 23150
23125: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23126: LD_ADDR_VAR 0 3
23130: PUSH
23131: LD_INT 20
23133: PPUSH
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 321
23143: PUSH
23144: LD_INT 2
23146: EQUAL
23147: ST_TO_ADDR
23148: GO 23361
23150: LD_INT 28
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23164
23156: LD_INT 21
23158: DOUBLE
23159: EQUAL
23160: IFTRUE 23164
23162: GO 23189
23164: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23165: LD_ADDR_VAR 0 3
23169: PUSH
23170: LD_INT 21
23172: PPUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 321
23182: PUSH
23183: LD_INT 2
23185: EQUAL
23186: ST_TO_ADDR
23187: GO 23361
23189: LD_INT 16
23191: DOUBLE
23192: EQUAL
23193: IFTRUE 23197
23195: GO 23222
23197: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23198: LD_ADDR_VAR 0 3
23202: PUSH
23203: LD_INT 84
23205: PPUSH
23206: LD_VAR 0 1
23210: PPUSH
23211: CALL_OW 321
23215: PUSH
23216: LD_INT 2
23218: EQUAL
23219: ST_TO_ADDR
23220: GO 23361
23222: LD_INT 19
23224: DOUBLE
23225: EQUAL
23226: IFTRUE 23236
23228: LD_INT 23
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23261
23236: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: LD_INT 83
23244: PPUSH
23245: LD_VAR 0 1
23249: PPUSH
23250: CALL_OW 321
23254: PUSH
23255: LD_INT 2
23257: EQUAL
23258: ST_TO_ADDR
23259: GO 23361
23261: LD_INT 17
23263: DOUBLE
23264: EQUAL
23265: IFTRUE 23269
23267: GO 23294
23269: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23270: LD_ADDR_VAR 0 3
23274: PUSH
23275: LD_INT 39
23277: PPUSH
23278: LD_VAR 0 1
23282: PPUSH
23283: CALL_OW 321
23287: PUSH
23288: LD_INT 2
23290: EQUAL
23291: ST_TO_ADDR
23292: GO 23361
23294: LD_INT 18
23296: DOUBLE
23297: EQUAL
23298: IFTRUE 23302
23300: GO 23327
23302: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23303: LD_ADDR_VAR 0 3
23307: PUSH
23308: LD_INT 40
23310: PPUSH
23311: LD_VAR 0 1
23315: PPUSH
23316: CALL_OW 321
23320: PUSH
23321: LD_INT 2
23323: EQUAL
23324: ST_TO_ADDR
23325: GO 23361
23327: LD_INT 27
23329: DOUBLE
23330: EQUAL
23331: IFTRUE 23335
23333: GO 23360
23335: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23336: LD_ADDR_VAR 0 3
23340: PUSH
23341: LD_INT 35
23343: PPUSH
23344: LD_VAR 0 1
23348: PPUSH
23349: CALL_OW 321
23353: PUSH
23354: LD_INT 2
23356: EQUAL
23357: ST_TO_ADDR
23358: GO 23361
23360: POP
// end ;
23361: LD_VAR 0 3
23365: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23366: LD_INT 0
23368: PPUSH
23369: PPUSH
23370: PPUSH
23371: PPUSH
23372: PPUSH
23373: PPUSH
23374: PPUSH
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
// result := false ;
23379: LD_ADDR_VAR 0 6
23383: PUSH
23384: LD_INT 0
23386: ST_TO_ADDR
// if btype = b_depot then
23387: LD_VAR 0 2
23391: PUSH
23392: LD_INT 0
23394: EQUAL
23395: IFFALSE 23407
// begin result := true ;
23397: LD_ADDR_VAR 0 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// exit ;
23405: GO 24261
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23407: LD_VAR 0 1
23411: NOT
23412: IFTRUE 23437
23414: PUSH
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 266
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: LD_INT 1
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: IN
23435: NOT
23436: OR
23437: IFTRUE 23446
23439: PUSH
23440: LD_VAR 0 2
23444: NOT
23445: OR
23446: IFTRUE 23482
23448: PUSH
23449: LD_VAR 0 5
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: LD_INT 2
23462: PUSH
23463: LD_INT 3
23465: PUSH
23466: LD_INT 4
23468: PUSH
23469: LD_INT 5
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: IN
23480: NOT
23481: OR
23482: IFTRUE 23501
23484: PUSH
23485: LD_VAR 0 3
23489: PPUSH
23490: LD_VAR 0 4
23494: PPUSH
23495: CALL_OW 488
23499: NOT
23500: OR
23501: IFFALSE 23505
// exit ;
23503: GO 24261
// side := GetSide ( depot ) ;
23505: LD_ADDR_VAR 0 9
23509: PUSH
23510: LD_VAR 0 1
23514: PPUSH
23515: CALL_OW 255
23519: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23520: LD_VAR 0 9
23524: PPUSH
23525: LD_VAR 0 2
23529: PPUSH
23530: CALL 22990 0 2
23534: NOT
23535: IFFALSE 23539
// exit ;
23537: GO 24261
// pom := GetBase ( depot ) ;
23539: LD_ADDR_VAR 0 10
23543: PUSH
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 274
23553: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23554: LD_ADDR_VAR 0 11
23558: PUSH
23559: LD_VAR 0 2
23563: PPUSH
23564: LD_VAR 0 1
23568: PPUSH
23569: CALL_OW 248
23573: PPUSH
23574: CALL_OW 450
23578: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23579: LD_VAR 0 10
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: CALL_OW 275
23591: PUSH
23592: LD_VAR 0 11
23596: PUSH
23597: LD_INT 1
23599: ARRAY
23600: GREATEREQUAL
23601: IFFALSE 23627
23603: PUSH
23604: LD_VAR 0 10
23608: PPUSH
23609: LD_INT 2
23611: PPUSH
23612: CALL_OW 275
23616: PUSH
23617: LD_VAR 0 11
23621: PUSH
23622: LD_INT 2
23624: ARRAY
23625: GREATEREQUAL
23626: AND
23627: IFFALSE 23653
23629: PUSH
23630: LD_VAR 0 10
23634: PPUSH
23635: LD_INT 3
23637: PPUSH
23638: CALL_OW 275
23642: PUSH
23643: LD_VAR 0 11
23647: PUSH
23648: LD_INT 3
23650: ARRAY
23651: GREATEREQUAL
23652: AND
23653: NOT
23654: IFFALSE 23658
// exit ;
23656: GO 24261
// if GetBType ( depot ) = b_depot then
23658: LD_VAR 0 1
23662: PPUSH
23663: CALL_OW 266
23667: PUSH
23668: LD_INT 0
23670: EQUAL
23671: IFFALSE 23683
// dist := 28 else
23673: LD_ADDR_VAR 0 14
23677: PUSH
23678: LD_INT 28
23680: ST_TO_ADDR
23681: GO 23691
// dist := 36 ;
23683: LD_ADDR_VAR 0 14
23687: PUSH
23688: LD_INT 36
23690: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23691: LD_VAR 0 1
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: LD_VAR 0 4
23705: PPUSH
23706: CALL_OW 297
23710: PUSH
23711: LD_VAR 0 14
23715: GREATER
23716: IFFALSE 23720
// exit ;
23718: GO 24261
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23720: LD_ADDR_VAR 0 12
23724: PUSH
23725: LD_VAR 0 2
23729: PPUSH
23730: LD_VAR 0 3
23734: PPUSH
23735: LD_VAR 0 4
23739: PPUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 248
23754: PPUSH
23755: LD_INT 0
23757: PPUSH
23758: CALL 24266 0 6
23762: ST_TO_ADDR
// if not hexes then
23763: LD_VAR 0 12
23767: NOT
23768: IFFALSE 23772
// exit ;
23770: GO 24261
// hex := GetHexInfo ( x , y ) ;
23772: LD_ADDR_VAR 0 15
23776: PUSH
23777: LD_VAR 0 3
23781: PPUSH
23782: LD_VAR 0 4
23786: PPUSH
23787: CALL_OW 546
23791: ST_TO_ADDR
// if hex [ 1 ] then
23792: LD_VAR 0 15
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: IFFALSE 23804
// exit ;
23802: GO 24261
// height := hex [ 2 ] ;
23804: LD_ADDR_VAR 0 13
23808: PUSH
23809: LD_VAR 0 15
23813: PUSH
23814: LD_INT 2
23816: ARRAY
23817: ST_TO_ADDR
// for i = 1 to hexes do
23818: LD_ADDR_VAR 0 7
23822: PUSH
23823: DOUBLE
23824: LD_INT 1
23826: DEC
23827: ST_TO_ADDR
23828: LD_VAR 0 12
23832: PUSH
23833: FOR_TO
23834: IFFALSE 24178
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23836: LD_VAR 0 12
23840: PUSH
23841: LD_VAR 0 7
23845: ARRAY
23846: PUSH
23847: LD_INT 1
23849: ARRAY
23850: PPUSH
23851: LD_VAR 0 12
23855: PUSH
23856: LD_VAR 0 7
23860: ARRAY
23861: PUSH
23862: LD_INT 2
23864: ARRAY
23865: PPUSH
23866: CALL_OW 488
23870: NOT
23871: IFTRUE 23913
23873: PUSH
23874: LD_VAR 0 12
23878: PUSH
23879: LD_VAR 0 7
23883: ARRAY
23884: PUSH
23885: LD_INT 1
23887: ARRAY
23888: PPUSH
23889: LD_VAR 0 12
23893: PUSH
23894: LD_VAR 0 7
23898: ARRAY
23899: PUSH
23900: LD_INT 2
23902: ARRAY
23903: PPUSH
23904: CALL_OW 428
23908: PUSH
23909: LD_INT 0
23911: GREATER
23912: OR
23913: IFTRUE 23951
23915: PUSH
23916: LD_VAR 0 12
23920: PUSH
23921: LD_VAR 0 7
23925: ARRAY
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PPUSH
23931: LD_VAR 0 12
23935: PUSH
23936: LD_VAR 0 7
23940: ARRAY
23941: PUSH
23942: LD_INT 2
23944: ARRAY
23945: PPUSH
23946: CALL_OW 351
23950: OR
23951: IFFALSE 23957
// exit ;
23953: POP
23954: POP
23955: GO 24261
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23957: LD_ADDR_VAR 0 8
23961: PUSH
23962: LD_VAR 0 12
23966: PUSH
23967: LD_VAR 0 7
23971: ARRAY
23972: PUSH
23973: LD_INT 1
23975: ARRAY
23976: PPUSH
23977: LD_VAR 0 12
23981: PUSH
23982: LD_VAR 0 7
23986: ARRAY
23987: PUSH
23988: LD_INT 2
23990: ARRAY
23991: PPUSH
23992: CALL_OW 546
23996: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23997: LD_VAR 0 8
24001: PUSH
24002: LD_INT 1
24004: ARRAY
24005: IFTRUE 24027
24007: PUSH
24008: LD_VAR 0 8
24012: PUSH
24013: LD_INT 2
24015: ARRAY
24016: PUSH
24017: LD_VAR 0 13
24021: PUSH
24022: LD_INT 2
24024: PLUS
24025: GREATER
24026: OR
24027: IFTRUE 24049
24029: PUSH
24030: LD_VAR 0 8
24034: PUSH
24035: LD_INT 2
24037: ARRAY
24038: PUSH
24039: LD_VAR 0 13
24043: PUSH
24044: LD_INT 2
24046: MINUS
24047: LESS
24048: OR
24049: IFTRUE 24117
24051: PUSH
24052: LD_VAR 0 8
24056: PUSH
24057: LD_INT 3
24059: ARRAY
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: LD_INT 8
24066: PUSH
24067: LD_INT 9
24069: PUSH
24070: LD_INT 10
24072: PUSH
24073: LD_INT 11
24075: PUSH
24076: LD_INT 12
24078: PUSH
24079: LD_INT 13
24081: PUSH
24082: LD_INT 16
24084: PUSH
24085: LD_INT 17
24087: PUSH
24088: LD_INT 18
24090: PUSH
24091: LD_INT 19
24093: PUSH
24094: LD_INT 20
24096: PUSH
24097: LD_INT 21
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: IN
24115: NOT
24116: OR
24117: IFTRUE 24130
24119: PUSH
24120: LD_VAR 0 8
24124: PUSH
24125: LD_INT 5
24127: ARRAY
24128: NOT
24129: OR
24130: IFTRUE 24170
24132: PUSH
24133: LD_VAR 0 8
24137: PUSH
24138: LD_INT 6
24140: ARRAY
24141: PUSH
24142: LD_INT 1
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 7
24150: PUSH
24151: LD_INT 9
24153: PUSH
24154: LD_INT 10
24156: PUSH
24157: LD_INT 11
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: IN
24168: NOT
24169: OR
24170: IFFALSE 24176
// exit ;
24172: POP
24173: POP
24174: GO 24261
// end ;
24176: GO 23833
24178: POP
24179: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24180: LD_VAR 0 9
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: LD_VAR 0 4
24194: PPUSH
24195: LD_INT 20
24197: PPUSH
24198: CALL 16080 0 4
24202: PUSH
24203: LD_INT 4
24205: ARRAY
24206: IFFALSE 24210
// exit ;
24208: GO 24261
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24210: LD_VAR 0 2
24214: PUSH
24215: LD_INT 29
24217: PUSH
24218: LD_INT 30
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: IN
24225: IFFALSE 24249
24227: PUSH
24228: LD_VAR 0 3
24232: PPUSH
24233: LD_VAR 0 4
24237: PPUSH
24238: LD_VAR 0 9
24242: PPUSH
24243: CALL_OW 440
24247: NOT
24248: AND
24249: IFFALSE 24253
// exit ;
24251: GO 24261
// result := true ;
24253: LD_ADDR_VAR 0 6
24257: PUSH
24258: LD_INT 1
24260: ST_TO_ADDR
// end ;
24261: LD_VAR 0 6
24265: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24266: LD_INT 0
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
24273: PPUSH
24274: PPUSH
24275: PPUSH
24276: PPUSH
24277: PPUSH
24278: PPUSH
24279: PPUSH
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
24290: PPUSH
24291: PPUSH
24292: PPUSH
24293: PPUSH
24294: PPUSH
24295: PPUSH
24296: PPUSH
24297: PPUSH
24298: PPUSH
24299: PPUSH
24300: PPUSH
24301: PPUSH
24302: PPUSH
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
24307: PPUSH
24308: PPUSH
24309: PPUSH
24310: PPUSH
24311: PPUSH
24312: PPUSH
24313: PPUSH
24314: PPUSH
24315: PPUSH
24316: PPUSH
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
// result = [ ] ;
24326: LD_ADDR_VAR 0 7
24330: PUSH
24331: EMPTY
24332: ST_TO_ADDR
// temp_list = [ ] ;
24333: LD_ADDR_VAR 0 9
24337: PUSH
24338: EMPTY
24339: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24340: LD_VAR 0 4
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: LD_INT 4
24359: PUSH
24360: LD_INT 5
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: IN
24371: NOT
24372: IFTRUE 24415
24374: PUSH
24375: LD_VAR 0 1
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: IN
24390: IFFALSE 24414
24392: PUSH
24393: LD_VAR 0 5
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: LD_INT 2
24403: PUSH
24404: LD_INT 3
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: IN
24412: NOT
24413: AND
24414: OR
24415: IFFALSE 24419
// exit ;
24417: GO 42818
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24419: LD_VAR 0 1
24423: PUSH
24424: LD_INT 6
24426: PUSH
24427: LD_INT 7
24429: PUSH
24430: LD_INT 8
24432: PUSH
24433: LD_INT 13
24435: PUSH
24436: LD_INT 12
24438: PUSH
24439: LD_INT 15
24441: PUSH
24442: LD_INT 11
24444: PUSH
24445: LD_INT 14
24447: PUSH
24448: LD_INT 10
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: IN
24462: IFFALSE 24472
// btype = b_lab ;
24464: LD_ADDR_VAR 0 1
24468: PUSH
24469: LD_INT 6
24471: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24472: LD_VAR 0 6
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: IN
24491: NOT
24492: IFTRUE 24560
24494: PUSH
24495: LD_VAR 0 1
24499: PUSH
24500: LD_INT 0
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 3
24511: PUSH
24512: LD_INT 6
24514: PUSH
24515: LD_INT 36
24517: PUSH
24518: LD_INT 4
24520: PUSH
24521: LD_INT 5
24523: PUSH
24524: LD_INT 31
24526: PUSH
24527: LD_INT 32
24529: PUSH
24530: LD_INT 33
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: IN
24546: NOT
24547: IFFALSE 24559
24549: PUSH
24550: LD_VAR 0 6
24554: PUSH
24555: LD_INT 1
24557: EQUAL
24558: AND
24559: OR
24560: IFTRUE 24592
24562: PUSH
24563: LD_VAR 0 1
24567: PUSH
24568: LD_INT 2
24570: PUSH
24571: LD_INT 3
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: IN
24578: NOT
24579: IFFALSE 24591
24581: PUSH
24582: LD_VAR 0 6
24586: PUSH
24587: LD_INT 2
24589: EQUAL
24590: AND
24591: OR
24592: IFFALSE 24602
// mode = 0 ;
24594: LD_ADDR_VAR 0 6
24598: PUSH
24599: LD_INT 0
24601: ST_TO_ADDR
// case mode of 0 :
24602: LD_VAR 0 6
24606: PUSH
24607: LD_INT 0
24609: DOUBLE
24610: EQUAL
24611: IFTRUE 24615
24613: GO 36068
24615: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24616: LD_ADDR_VAR 0 11
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 0
24709: PUSH
24710: LD_INT 2
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24809: LD_ADDR_VAR 0 12
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: LD_INT 0
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 0
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: NEG
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 1
24893: NEG
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 0
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 2
24932: NEG
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 3
24966: NEG
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 3
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25005: LD_ADDR_VAR 0 13
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: LD_INT 0
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 0
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 1
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 1
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: NEG
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 2
25090: NEG
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 2
25128: NEG
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 2
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 3
25156: NEG
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 3
25164: NEG
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 3
25176: NEG
25177: PUSH
25178: LD_INT 3
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25204: LD_ADDR_VAR 0 14
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 1
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 0
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: NEG
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 2
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 1
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 0
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: NEG
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: NEG
25351: PUSH
25352: LD_INT 3
25354: NEG
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 3
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25400: LD_ADDR_VAR 0 15
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 0
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: LD_INT 1
25420: NEG
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 0
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: NEG
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: LD_INT 1
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: LD_INT 1
25484: NEG
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 2
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 2
25523: NEG
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 3
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 3
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25593: LD_ADDR_VAR 0 16
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 0
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 0
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: LD_INT 0
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 2
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 2
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 3
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: LD_INT 3
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 3
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25786: LD_ADDR_VAR 0 17
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 0
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: LD_INT 1
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: LD_INT 0
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: LD_INT 1
25859: NEG
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 2
25871: NEG
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 2
25882: NEG
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: LD_INT 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: LD_INT 2
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 2
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 1
25951: NEG
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: NEG
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: LD_INT 2
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26016: LD_ADDR_VAR 0 18
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 0
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 2
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 2
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 0
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 2
26203: NEG
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: NEG
26216: PUSH
26217: LD_INT 2
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26246: LD_ADDR_VAR 0 19
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: LD_INT 1
26266: NEG
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 2
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: LD_INT 1
26437: NEG
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 2
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26476: LD_ADDR_VAR 0 20
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 2
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: NEG
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26706: LD_ADDR_VAR 0 21
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 0
26723: PUSH
26724: LD_INT 1
26726: NEG
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 0
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 0
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: NEG
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 2
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26936: LD_ADDR_VAR 0 22
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 0
26953: PUSH
26954: LD_INT 1
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 0
26984: PUSH
26985: LD_INT 1
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 1
27005: NEG
27006: PUSH
27007: LD_INT 1
27009: NEG
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 2
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 2
27112: NEG
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 2
27135: NEG
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27166: LD_ADDR_VAR 0 23
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 1
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: LD_INT 1
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: LD_INT 0
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: NEG
27236: PUSH
27237: LD_INT 1
27239: NEG
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 2
27342: NEG
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 2
27353: NEG
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: NEG
27366: PUSH
27367: LD_INT 2
27369: NEG
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 2
27377: NEG
27378: PUSH
27379: LD_INT 3
27381: NEG
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 3
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 2
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27446: LD_ADDR_VAR 0 24
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 1
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 1
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: NEG
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 2
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 2
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 2
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 2
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 2
27645: NEG
27646: PUSH
27647: LD_INT 2
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 2
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: LD_INT 2
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27722: LD_ADDR_VAR 0 25
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 0
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 0
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: LD_INT 1
27795: NEG
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 2
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 1
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: LD_INT 2
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: LD_INT 2
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 2
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27996: LD_ADDR_VAR 0 26
28000: PUSH
28001: LD_INT 0
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: LD_INT 1
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: LD_INT 0
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: LD_INT 2
28081: NEG
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 1
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: NEG
28173: PUSH
28174: LD_INT 0
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 2
28183: NEG
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 2
28195: NEG
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 3
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 2
28238: NEG
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28272: LD_ADDR_VAR 0 27
28276: PUSH
28277: LD_INT 0
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 1
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 0
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 0
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: NEG
28331: PUSH
28332: LD_INT 0
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: NEG
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 2
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 2
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 0
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: NEG
28438: PUSH
28439: LD_INT 1
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 2
28459: NEG
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 3
28517: NEG
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28552: LD_ADDR_VAR 0 28
28556: PUSH
28557: LD_INT 0
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 1
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 2
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 1
28717: NEG
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 2
28728: NEG
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: LD_INT 2
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 2
28763: NEG
28764: PUSH
28765: LD_INT 3
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: LD_INT 3
28779: NEG
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 3
28787: NEG
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28834: LD_ADDR_VAR 0 29
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 1
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 2
28919: NEG
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 2
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 2
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 2
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: NEG
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 2
29024: NEG
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 2
29036: PUSH
29037: LD_INT 1
29039: NEG
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 3
29078: NEG
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29113: LD_ADDR_VAR 0 30
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: NEG
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 1
29294: NEG
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: LD_INT 3
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: NEG
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29391: LD_ADDR_VAR 0 31
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 0
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: NEG
29450: PUSH
29451: LD_INT 0
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: LD_INT 2
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: LD_INT 1
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 2
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: LD_INT 2
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: LD_INT 2
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 2
29556: NEG
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: LD_INT 3
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: NEG
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 3
29634: NEG
29635: PUSH
29636: LD_INT 2
29638: NEG
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29669: LD_ADDR_VAR 0 32
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 3
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 3
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 3
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 2
29901: NEG
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 3
29912: NEG
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29947: LD_ADDR_VAR 0 33
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 0
29964: PUSH
29965: LD_INT 1
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 1
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 1
30028: NEG
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 2
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 2
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 3
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 3
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 3
30191: NEG
30192: PUSH
30193: LD_INT 2
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30226: LD_ADDR_VAR 0 34
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 0
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: LD_INT 2
30311: NEG
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: LD_INT 0
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 2
30405: NEG
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 3
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 3
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 3
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 2
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: LD_INT 1
30475: NEG
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30506: LD_ADDR_VAR 0 35
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: LD_INT 1
30601: NEG
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30618: LD_ADDR_VAR 0 36
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 0
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 1
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30730: LD_ADDR_VAR 0 37
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 0
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30842: LD_ADDR_VAR 0 38
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: LD_INT 1
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: LD_INT 1
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 1
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: NEG
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30954: LD_ADDR_VAR 0 39
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 2
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 1
31047: PUSH
31048: LD_INT 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31066: LD_ADDR_VAR 0 40
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31178: LD_ADDR_VAR 0 41
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 0
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: PUSH
31207: LD_INT 0
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 1
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 2
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 1
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: LD_INT 3
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 3
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 3
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: LD_INT 3
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: LD_INT 2
31431: PUSH
31432: LD_INT 3
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 3
31452: NEG
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 3
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 3
31475: NEG
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 3
31487: NEG
31488: PUSH
31489: LD_INT 3
31491: NEG
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31528: LD_ADDR_VAR 0 42
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 0
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: LD_INT 2
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: LD_INT 2
31624: NEG
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 2
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 2
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 2
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 2
31706: NEG
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: LD_INT 3
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 3
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 2
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 3
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: LD_INT 3
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: LD_INT 3
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: LD_INT 3
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PUSH
31823: LD_INT 3
31825: NEG
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: NEG
31838: PUSH
31839: LD_INT 3
31841: NEG
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31878: LD_ADDR_VAR 0 43
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 0
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: NEG
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 1
31947: NEG
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: NEG
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: NEG
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: LD_INT 3
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: LD_INT 3
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 2
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 2
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 3
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: LD_INT 3
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 2
32163: NEG
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 3
32174: NEG
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32226: LD_ADDR_VAR 0 44
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 2
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 1
32370: NEG
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 2
32416: NEG
32417: PUSH
32418: LD_INT 3
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: LD_INT 2
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: LD_INT 3
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 3
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 3
32500: NEG
32501: PUSH
32502: LD_INT 0
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 3
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: LD_INT 2
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 3
32535: NEG
32536: PUSH
32537: LD_INT 3
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32576: LD_ADDR_VAR 0 45
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 1
32596: NEG
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 1
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: LD_INT 1
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 1
32657: NEG
32658: PUSH
32659: LD_INT 2
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 2
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 2
32754: NEG
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 3
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: LD_INT 3
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 0
32790: PUSH
32791: LD_INT 3
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 2
32804: NEG
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 3
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 3
32822: PUSH
32823: LD_INT 3
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: LD_INT 3
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 3
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 3
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: LD_INT 2
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: LD_INT 3
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32926: LD_ADDR_VAR 0 46
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: NEG
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 2
33022: NEG
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 1
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: LD_INT 3
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 3
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 3
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 3
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 3
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 0
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: NEG
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 3
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33274: LD_ADDR_VAR 0 47
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: NEG
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: LD_INT 2
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 2
33370: NEG
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 1
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 2
33389: NEG
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33425: LD_ADDR_VAR 0 48
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 0
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 0
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: NEG
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 2
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: LD_INT 2
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33572: LD_ADDR_VAR 0 49
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: LD_INT 1
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 1
33641: NEG
33642: PUSH
33643: LD_INT 1
33645: NEG
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 2
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33716: LD_ADDR_VAR 0 50
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 0
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: NEG
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33860: LD_ADDR_VAR 0 51
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 2
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34007: LD_ADDR_VAR 0 52
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 1
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: LD_INT 2
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 2
34111: NEG
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34158: LD_ADDR_VAR 0 53
34162: PUSH
34163: LD_INT 0
34165: PUSH
34166: LD_INT 0
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 1
34196: PUSH
34197: LD_INT 1
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 1
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 1
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: LD_INT 2
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 2
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: NEG
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: NEG
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 2
34357: NEG
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34388: LD_ADDR_VAR 0 54
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 0
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 1
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: NEG
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: LD_INT 2
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 2
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 0
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: NEG
34576: PUSH
34577: LD_INT 1
34579: NEG
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: LD_INT 2
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34618: LD_ADDR_VAR 0 55
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: LD_INT 0
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: LD_INT 1
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: LD_INT 2
34714: NEG
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 2
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: LD_INT 2
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 1
34783: NEG
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: NEG
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34848: LD_ADDR_VAR 0 56
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: NEG
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: NEG
35036: PUSH
35037: LD_INT 1
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 2
35047: NEG
35048: PUSH
35049: LD_INT 2
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35078: LD_ADDR_VAR 0 57
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35308: LD_ADDR_VAR 0 58
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 2
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 2
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: NEG
35508: PUSH
35509: LD_INT 2
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35538: LD_ADDR_VAR 0 59
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 1
35558: NEG
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 1
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35626: LD_ADDR_VAR 0 60
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35714: LD_ADDR_VAR 0 61
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35802: LD_ADDR_VAR 0 62
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 1
35822: NEG
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35890: LD_ADDR_VAR 0 63
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35978: LD_ADDR_VAR 0 64
35982: PUSH
35983: LD_INT 0
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: ST_TO_ADDR
// end ; 1 :
36066: GO 41963
36068: LD_INT 1
36070: DOUBLE
36071: EQUAL
36072: IFTRUE 36076
36074: GO 38699
36076: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36077: LD_ADDR_VAR 0 11
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: LD_INT 3
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 3
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: LD_INT 2
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: LIST
36120: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36121: LD_ADDR_VAR 0 12
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 3
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 3
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36162: LD_ADDR_VAR 0 13
36166: PUSH
36167: LD_INT 3
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: LD_INT 3
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: LD_INT 3
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36202: LD_ADDR_VAR 0 14
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 3
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 3
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: LIST
36242: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36243: LD_ADDR_VAR 0 15
36247: PUSH
36248: LD_INT 2
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 3
36261: NEG
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 3
36272: NEG
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36287: LD_ADDR_VAR 0 16
36291: PUSH
36292: LD_INT 2
36294: NEG
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 3
36306: NEG
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 3
36318: NEG
36319: PUSH
36320: LD_INT 3
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36333: LD_ADDR_VAR 0 17
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 3
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 3
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36377: LD_ADDR_VAR 0 18
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 3
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 3
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36418: LD_ADDR_VAR 0 19
36422: PUSH
36423: LD_INT 3
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 3
36435: PUSH
36436: LD_INT 3
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: LIST
36457: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36458: LD_ADDR_VAR 0 20
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 3
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36499: LD_ADDR_VAR 0 21
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 3
36528: NEG
36529: PUSH
36530: LD_INT 1
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: LIST
36542: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36543: LD_ADDR_VAR 0 22
36547: PUSH
36548: LD_INT 2
36550: NEG
36551: PUSH
36552: LD_INT 3
36554: NEG
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 3
36562: NEG
36563: PUSH
36564: LD_INT 2
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 3
36574: NEG
36575: PUSH
36576: LD_INT 3
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36589: LD_ADDR_VAR 0 23
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 3
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: LD_INT 4
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 3
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36633: LD_ADDR_VAR 0 24
36637: PUSH
36638: LD_INT 3
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 4
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36674: LD_ADDR_VAR 0 25
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 4
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 3
36701: PUSH
36702: LD_INT 4
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36714: LD_ADDR_VAR 0 26
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: LD_INT 3
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: LD_INT 4
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36755: LD_ADDR_VAR 0 27
36759: PUSH
36760: LD_INT 3
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 3
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 4
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36799: LD_ADDR_VAR 0 28
36803: PUSH
36804: LD_INT 3
36806: NEG
36807: PUSH
36808: LD_INT 3
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: LD_INT 4
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 4
36830: NEG
36831: PUSH
36832: LD_INT 3
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: LIST
36844: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36845: LD_ADDR_VAR 0 29
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: LD_INT 3
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 3
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: LD_INT 4
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 4
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: LD_INT 3
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: LD_INT 5
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 5
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 4
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: LD_INT 6
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: LD_INT 6
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: LD_INT 5
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37000: LD_ADDR_VAR 0 30
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 1
37010: NEG
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 4
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 4
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 4
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 5
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 5
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 5
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 6
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 6
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37143: LD_ADDR_VAR 0 31
37147: PUSH
37148: LD_INT 3
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 3
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 4
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 4
37190: PUSH
37191: LD_INT 4
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 3
37200: PUSH
37201: LD_INT 4
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 5
37210: PUSH
37211: LD_INT 4
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 5
37220: PUSH
37221: LD_INT 5
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 4
37230: PUSH
37231: LD_INT 5
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 6
37240: PUSH
37241: LD_INT 5
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 6
37250: PUSH
37251: LD_INT 6
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 5
37260: PUSH
37261: LD_INT 6
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37282: LD_ADDR_VAR 0 32
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: LD_INT 3
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: LD_INT 2
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 4
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 4
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 3
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 5
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 5
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 4
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 6
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 6
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: LD_INT 5
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37425: LD_ADDR_VAR 0 33
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: LD_INT 1
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 3
37443: NEG
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: NEG
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 3
37466: NEG
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 4
37477: NEG
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 4
37488: NEG
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 4
37500: NEG
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 5
37511: NEG
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 5
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 5
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 6
37545: NEG
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 6
37556: NEG
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37580: LD_ADDR_VAR 0 34
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: LD_INT 3
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 3
37599: NEG
37600: PUSH
37601: LD_INT 2
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 3
37611: NEG
37612: PUSH
37613: LD_INT 3
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 3
37623: NEG
37624: PUSH
37625: LD_INT 4
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 4
37635: NEG
37636: PUSH
37637: LD_INT 3
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 4
37647: NEG
37648: PUSH
37649: LD_INT 4
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 4
37659: NEG
37660: PUSH
37661: LD_INT 5
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 5
37671: NEG
37672: PUSH
37673: LD_INT 4
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 5
37683: NEG
37684: PUSH
37685: LD_INT 5
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 5
37695: NEG
37696: PUSH
37697: LD_INT 6
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 6
37707: NEG
37708: PUSH
37709: LD_INT 5
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 6
37719: NEG
37720: PUSH
37721: LD_INT 6
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37743: LD_ADDR_VAR 0 41
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: LD_INT 3
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37787: LD_ADDR_VAR 0 42
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 3
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: LIST
37827: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37828: LD_ADDR_VAR 0 43
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 3
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37868: LD_ADDR_VAR 0 44
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: NEG
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37909: LD_ADDR_VAR 0 45
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: LD_INT 0
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37953: LD_ADDR_VAR 0 46
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: LD_INT 2
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 3
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 3
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37999: LD_ADDR_VAR 0 47
38003: PUSH
38004: LD_INT 2
38006: NEG
38007: PUSH
38008: LD_INT 3
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38032: LD_ADDR_VAR 0 48
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 1
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38063: LD_ADDR_VAR 0 49
38067: PUSH
38068: LD_INT 3
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 3
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38092: LD_ADDR_VAR 0 50
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: LD_INT 3
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PUSH
38110: LD_INT 3
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38121: LD_ADDR_VAR 0 51
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38152: LD_ADDR_VAR 0 52
38156: PUSH
38157: LD_INT 3
38159: NEG
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 3
38171: NEG
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38185: LD_ADDR_VAR 0 53
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 3
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 0
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: LIST
38228: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38229: LD_ADDR_VAR 0 54
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 3
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38270: LD_ADDR_VAR 0 55
38274: PUSH
38275: LD_INT 3
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 3
38287: PUSH
38288: LD_INT 3
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38310: LD_ADDR_VAR 0 56
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38351: LD_ADDR_VAR 0 57
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 3
38369: NEG
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 3
38380: NEG
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38395: LD_ADDR_VAR 0 58
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: LD_INT 3
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: LD_INT 2
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: LD_INT 3
38430: NEG
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38441: LD_ADDR_VAR 0 59
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: LIST
38484: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38485: LD_ADDR_VAR 0 60
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38526: LD_ADDR_VAR 0 61
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: LIST
38565: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38566: LD_ADDR_VAR 0 62
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: LD_INT 2
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38607: LD_ADDR_VAR 0 63
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: LD_INT 1
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: LD_INT 0
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: LIST
38650: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38651: LD_ADDR_VAR 0 64
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// end ; 2 :
38697: GO 41963
38699: LD_INT 2
38701: DOUBLE
38702: EQUAL
38703: IFTRUE 38707
38705: GO 41962
38707: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38708: LD_ADDR_VAR 0 29
38712: PUSH
38713: LD_INT 4
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 4
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 5
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 5
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 4
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 5
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 2
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 4
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 4
38838: PUSH
38839: LD_INT 4
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 3
38848: PUSH
38849: LD_INT 4
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 4
38878: PUSH
38879: LD_INT 2
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 4
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 4
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: LD_INT 4
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 5
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 5
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: NEG
38949: PUSH
38950: LD_INT 4
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 5
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: NEG
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 3
38991: NEG
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 3
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 3
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 4
39047: NEG
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 4
39058: NEG
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 4
39070: NEG
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 4
39093: NEG
39094: PUSH
39095: LD_INT 4
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 4
39105: NEG
39106: PUSH
39107: LD_INT 5
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 3
39117: NEG
39118: PUSH
39119: LD_INT 4
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: NEG
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 4
39141: NEG
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 5
39153: NEG
39154: PUSH
39155: LD_INT 4
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 5
39165: NEG
39166: PUSH
39167: LD_INT 5
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 3
39177: NEG
39178: PUSH
39179: LD_INT 5
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 5
39189: NEG
39190: PUSH
39191: LD_INT 3
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39246: LD_ADDR_VAR 0 30
39250: PUSH
39251: LD_INT 4
39253: PUSH
39254: LD_INT 4
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 4
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 5
39273: PUSH
39274: LD_INT 4
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: LD_INT 5
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 4
39293: PUSH
39294: LD_INT 5
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: LD_INT 4
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: LD_INT 3
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 5
39323: PUSH
39324: LD_INT 3
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 3
39333: PUSH
39334: LD_INT 5
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 3
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 3
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: LD_INT 4
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 4
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 3
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: LD_INT 4
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 4
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 4
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: NEG
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 4
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 5
39492: NEG
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 5
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 5
39515: NEG
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 3
39538: NEG
39539: PUSH
39540: LD_INT 3
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 3
39550: NEG
39551: PUSH
39552: LD_INT 4
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: NEG
39563: PUSH
39564: LD_INT 3
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 3
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 4
39598: NEG
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 4
39610: NEG
39611: PUSH
39612: LD_INT 4
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 2
39622: NEG
39623: PUSH
39624: LD_INT 4
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 4
39634: NEG
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 4
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: LD_INT 5
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 4
39671: NEG
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: LD_INT 3
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 4
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: NEG
39714: PUSH
39715: LD_INT 5
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 3
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: NEG
39737: PUSH
39738: LD_INT 5
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39793: LD_ADDR_VAR 0 31
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 4
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 4
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 5
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 5
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: NEG
39851: PUSH
39852: LD_INT 4
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 5
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: NEG
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 3
39904: NEG
39905: PUSH
39906: LD_INT 1
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 3
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 4
39949: NEG
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 4
39960: NEG
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 4
39972: NEG
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 4
39995: NEG
39996: PUSH
39997: LD_INT 4
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 4
40007: NEG
40008: PUSH
40009: LD_INT 5
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: LD_INT 4
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: NEG
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 4
40043: NEG
40044: PUSH
40045: LD_INT 3
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 5
40055: NEG
40056: PUSH
40057: LD_INT 4
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 5
40067: NEG
40068: PUSH
40069: LD_INT 5
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 3
40079: NEG
40080: PUSH
40081: LD_INT 5
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 5
40091: NEG
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 3
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: LD_INT 4
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: PUSH
40126: LD_INT 3
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 2
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 3
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 4
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: LD_INT 4
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 4
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 4
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 5
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 5
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 4
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 3
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 3
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 5
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40343: LD_ADDR_VAR 0 32
40347: PUSH
40348: LD_INT 4
40350: NEG
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 4
40361: NEG
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 4
40395: NEG
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 5
40406: NEG
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 5
40417: NEG
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 5
40429: NEG
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 3
40441: NEG
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 3
40452: NEG
40453: PUSH
40454: LD_INT 3
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: NEG
40465: PUSH
40466: LD_INT 4
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: NEG
40477: PUSH
40478: LD_INT 3
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 4
40512: NEG
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 4
40524: NEG
40525: PUSH
40526: LD_INT 4
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: LD_INT 4
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 4
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 4
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 5
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 4
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 3
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 4
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 5
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 3
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 5
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 3
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 3
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 4
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 4
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: PUSH
40735: LD_INT 2
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 4
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 4
40755: PUSH
40756: LD_INT 4
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 4
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 5
40775: PUSH
40776: LD_INT 4
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 5
40785: PUSH
40786: LD_INT 5
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 4
40795: PUSH
40796: LD_INT 5
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: LD_INT 4
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 5
40825: PUSH
40826: LD_INT 3
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 3
40835: PUSH
40836: LD_INT 5
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40890: LD_ADDR_VAR 0 33
40894: PUSH
40895: LD_INT 4
40897: NEG
40898: PUSH
40899: LD_INT 4
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 4
40909: NEG
40910: PUSH
40911: LD_INT 5
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: LD_INT 4
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 4
40945: NEG
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 5
40957: NEG
40958: PUSH
40959: LD_INT 4
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 5
40969: NEG
40970: PUSH
40971: LD_INT 5
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 3
40981: NEG
40982: PUSH
40983: LD_INT 5
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 5
40993: NEG
40994: PUSH
40995: LD_INT 3
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 3
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 4
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 4
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 4
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 4
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 4
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 5
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 5
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 4
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 3
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 3
41179: PUSH
41180: LD_INT 2
41182: NEG
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 5
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 4
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 4
41230: PUSH
41231: LD_INT 4
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 3
41240: PUSH
41241: LD_INT 4
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 3
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 4
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: PUSH
41281: LD_INT 4
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 4
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 5
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 5
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 4
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 3
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 5
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41428: LD_ADDR_VAR 0 34
41432: PUSH
41433: LD_INT 0
41435: PUSH
41436: LD_INT 4
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: LD_INT 5
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 4
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 3
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 3
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: LD_INT 4
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 5
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: NEG
41526: PUSH
41527: LD_INT 5
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 3
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 4
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 4
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 2
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 2
41609: PUSH
41610: LD_INT 2
41612: NEG
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 4
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 4
41630: PUSH
41631: LD_INT 4
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 4
41640: PUSH
41641: LD_INT 3
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 5
41650: PUSH
41651: LD_INT 4
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 5
41660: PUSH
41661: LD_INT 5
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 4
41670: PUSH
41671: LD_INT 5
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: LD_INT 4
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 3
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 5
41700: PUSH
41701: LD_INT 3
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: LD_INT 5
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 2
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 4
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 3
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: NEG
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: PUSH
41793: LD_INT 4
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: NEG
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 4
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 4
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 3
41836: NEG
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 3
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 4
41858: NEG
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 5
41869: NEG
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 5
41880: NEG
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 5
41892: NEG
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// end ; end ;
41960: GO 41963
41962: POP
// case btype of b_depot , b_warehouse :
41963: LD_VAR 0 1
41967: PUSH
41968: LD_INT 0
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41982
41974: LD_INT 1
41976: DOUBLE
41977: EQUAL
41978: IFTRUE 41982
41980: GO 42183
41982: POP
// case nation of nation_american :
41983: LD_VAR 0 5
41987: PUSH
41988: LD_INT 1
41990: DOUBLE
41991: EQUAL
41992: IFTRUE 41996
41994: GO 42052
41996: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41997: LD_ADDR_VAR 0 9
42001: PUSH
42002: LD_VAR 0 11
42006: PUSH
42007: LD_VAR 0 12
42011: PUSH
42012: LD_VAR 0 13
42016: PUSH
42017: LD_VAR 0 14
42021: PUSH
42022: LD_VAR 0 15
42026: PUSH
42027: LD_VAR 0 16
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: PUSH
42040: LD_VAR 0 4
42044: PUSH
42045: LD_INT 1
42047: PLUS
42048: ARRAY
42049: ST_TO_ADDR
42050: GO 42181
42052: LD_INT 2
42054: DOUBLE
42055: EQUAL
42056: IFTRUE 42060
42058: GO 42116
42060: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42061: LD_ADDR_VAR 0 9
42065: PUSH
42066: LD_VAR 0 17
42070: PUSH
42071: LD_VAR 0 18
42075: PUSH
42076: LD_VAR 0 19
42080: PUSH
42081: LD_VAR 0 20
42085: PUSH
42086: LD_VAR 0 21
42090: PUSH
42091: LD_VAR 0 22
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: LD_VAR 0 4
42108: PUSH
42109: LD_INT 1
42111: PLUS
42112: ARRAY
42113: ST_TO_ADDR
42114: GO 42181
42116: LD_INT 3
42118: DOUBLE
42119: EQUAL
42120: IFTRUE 42124
42122: GO 42180
42124: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42125: LD_ADDR_VAR 0 9
42129: PUSH
42130: LD_VAR 0 23
42134: PUSH
42135: LD_VAR 0 24
42139: PUSH
42140: LD_VAR 0 25
42144: PUSH
42145: LD_VAR 0 26
42149: PUSH
42150: LD_VAR 0 27
42154: PUSH
42155: LD_VAR 0 28
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: PUSH
42168: LD_VAR 0 4
42172: PUSH
42173: LD_INT 1
42175: PLUS
42176: ARRAY
42177: ST_TO_ADDR
42178: GO 42181
42180: POP
42181: GO 42736
42183: LD_INT 2
42185: DOUBLE
42186: EQUAL
42187: IFTRUE 42197
42189: LD_INT 3
42191: DOUBLE
42192: EQUAL
42193: IFTRUE 42197
42195: GO 42253
42197: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42198: LD_ADDR_VAR 0 9
42202: PUSH
42203: LD_VAR 0 29
42207: PUSH
42208: LD_VAR 0 30
42212: PUSH
42213: LD_VAR 0 31
42217: PUSH
42218: LD_VAR 0 32
42222: PUSH
42223: LD_VAR 0 33
42227: PUSH
42228: LD_VAR 0 34
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: PUSH
42241: LD_VAR 0 4
42245: PUSH
42246: LD_INT 1
42248: PLUS
42249: ARRAY
42250: ST_TO_ADDR
42251: GO 42736
42253: LD_INT 16
42255: DOUBLE
42256: EQUAL
42257: IFTRUE 42315
42259: LD_INT 17
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42315
42265: LD_INT 18
42267: DOUBLE
42268: EQUAL
42269: IFTRUE 42315
42271: LD_INT 19
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42315
42277: LD_INT 22
42279: DOUBLE
42280: EQUAL
42281: IFTRUE 42315
42283: LD_INT 20
42285: DOUBLE
42286: EQUAL
42287: IFTRUE 42315
42289: LD_INT 21
42291: DOUBLE
42292: EQUAL
42293: IFTRUE 42315
42295: LD_INT 23
42297: DOUBLE
42298: EQUAL
42299: IFTRUE 42315
42301: LD_INT 24
42303: DOUBLE
42304: EQUAL
42305: IFTRUE 42315
42307: LD_INT 25
42309: DOUBLE
42310: EQUAL
42311: IFTRUE 42315
42313: GO 42371
42315: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42316: LD_ADDR_VAR 0 9
42320: PUSH
42321: LD_VAR 0 35
42325: PUSH
42326: LD_VAR 0 36
42330: PUSH
42331: LD_VAR 0 37
42335: PUSH
42336: LD_VAR 0 38
42340: PUSH
42341: LD_VAR 0 39
42345: PUSH
42346: LD_VAR 0 40
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: PUSH
42359: LD_VAR 0 4
42363: PUSH
42364: LD_INT 1
42366: PLUS
42367: ARRAY
42368: ST_TO_ADDR
42369: GO 42736
42371: LD_INT 6
42373: DOUBLE
42374: EQUAL
42375: IFTRUE 42427
42377: LD_INT 7
42379: DOUBLE
42380: EQUAL
42381: IFTRUE 42427
42383: LD_INT 8
42385: DOUBLE
42386: EQUAL
42387: IFTRUE 42427
42389: LD_INT 13
42391: DOUBLE
42392: EQUAL
42393: IFTRUE 42427
42395: LD_INT 12
42397: DOUBLE
42398: EQUAL
42399: IFTRUE 42427
42401: LD_INT 15
42403: DOUBLE
42404: EQUAL
42405: IFTRUE 42427
42407: LD_INT 11
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42427
42413: LD_INT 14
42415: DOUBLE
42416: EQUAL
42417: IFTRUE 42427
42419: LD_INT 10
42421: DOUBLE
42422: EQUAL
42423: IFTRUE 42427
42425: GO 42483
42427: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42428: LD_ADDR_VAR 0 9
42432: PUSH
42433: LD_VAR 0 41
42437: PUSH
42438: LD_VAR 0 42
42442: PUSH
42443: LD_VAR 0 43
42447: PUSH
42448: LD_VAR 0 44
42452: PUSH
42453: LD_VAR 0 45
42457: PUSH
42458: LD_VAR 0 46
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: PUSH
42471: LD_VAR 0 4
42475: PUSH
42476: LD_INT 1
42478: PLUS
42479: ARRAY
42480: ST_TO_ADDR
42481: GO 42736
42483: LD_INT 36
42485: DOUBLE
42486: EQUAL
42487: IFTRUE 42491
42489: GO 42547
42491: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42492: LD_ADDR_VAR 0 9
42496: PUSH
42497: LD_VAR 0 47
42501: PUSH
42502: LD_VAR 0 48
42506: PUSH
42507: LD_VAR 0 49
42511: PUSH
42512: LD_VAR 0 50
42516: PUSH
42517: LD_VAR 0 51
42521: PUSH
42522: LD_VAR 0 52
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: PUSH
42535: LD_VAR 0 4
42539: PUSH
42540: LD_INT 1
42542: PLUS
42543: ARRAY
42544: ST_TO_ADDR
42545: GO 42736
42547: LD_INT 4
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42573
42553: LD_INT 5
42555: DOUBLE
42556: EQUAL
42557: IFTRUE 42573
42559: LD_INT 34
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42573
42565: LD_INT 37
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42573
42571: GO 42629
42573: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42574: LD_ADDR_VAR 0 9
42578: PUSH
42579: LD_VAR 0 53
42583: PUSH
42584: LD_VAR 0 54
42588: PUSH
42589: LD_VAR 0 55
42593: PUSH
42594: LD_VAR 0 56
42598: PUSH
42599: LD_VAR 0 57
42603: PUSH
42604: LD_VAR 0 58
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: PUSH
42617: LD_VAR 0 4
42621: PUSH
42622: LD_INT 1
42624: PLUS
42625: ARRAY
42626: ST_TO_ADDR
42627: GO 42736
42629: LD_INT 31
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42679
42635: LD_INT 32
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42679
42641: LD_INT 33
42643: DOUBLE
42644: EQUAL
42645: IFTRUE 42679
42647: LD_INT 27
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42679
42653: LD_INT 26
42655: DOUBLE
42656: EQUAL
42657: IFTRUE 42679
42659: LD_INT 28
42661: DOUBLE
42662: EQUAL
42663: IFTRUE 42679
42665: LD_INT 29
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42679
42671: LD_INT 30
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42679
42677: GO 42735
42679: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42680: LD_ADDR_VAR 0 9
42684: PUSH
42685: LD_VAR 0 59
42689: PUSH
42690: LD_VAR 0 60
42694: PUSH
42695: LD_VAR 0 61
42699: PUSH
42700: LD_VAR 0 62
42704: PUSH
42705: LD_VAR 0 63
42709: PUSH
42710: LD_VAR 0 64
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: PUSH
42723: LD_VAR 0 4
42727: PUSH
42728: LD_INT 1
42730: PLUS
42731: ARRAY
42732: ST_TO_ADDR
42733: GO 42736
42735: POP
// temp_list2 = [ ] ;
42736: LD_ADDR_VAR 0 10
42740: PUSH
42741: EMPTY
42742: ST_TO_ADDR
// for i in temp_list do
42743: LD_ADDR_VAR 0 8
42747: PUSH
42748: LD_VAR 0 9
42752: PUSH
42753: FOR_IN
42754: IFFALSE 42806
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42756: LD_ADDR_VAR 0 10
42760: PUSH
42761: LD_VAR 0 10
42765: PUSH
42766: LD_VAR 0 8
42770: PUSH
42771: LD_INT 1
42773: ARRAY
42774: PUSH
42775: LD_VAR 0 2
42779: PLUS
42780: PUSH
42781: LD_VAR 0 8
42785: PUSH
42786: LD_INT 2
42788: ARRAY
42789: PUSH
42790: LD_VAR 0 3
42794: PLUS
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: EMPTY
42801: LIST
42802: ADD
42803: ST_TO_ADDR
42804: GO 42753
42806: POP
42807: POP
// result = temp_list2 ;
42808: LD_ADDR_VAR 0 7
42812: PUSH
42813: LD_VAR 0 10
42817: ST_TO_ADDR
// end ;
42818: LD_VAR 0 7
42822: RET
// export function EnemyInRange ( unit , dist ) ; begin
42823: LD_INT 0
42825: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42826: LD_ADDR_VAR 0 3
42830: PUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 255
42840: PPUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 250
42850: PPUSH
42851: LD_VAR 0 1
42855: PPUSH
42856: CALL_OW 251
42860: PPUSH
42861: LD_VAR 0 2
42865: PPUSH
42866: CALL 16080 0 4
42870: PUSH
42871: LD_INT 4
42873: ARRAY
42874: ST_TO_ADDR
// end ;
42875: LD_VAR 0 3
42879: RET
// export function PlayerSeeMe ( unit ) ; begin
42880: LD_INT 0
42882: PPUSH
// result := See ( your_side , unit ) ;
42883: LD_ADDR_VAR 0 2
42887: PUSH
42888: LD_OWVAR 2
42892: PPUSH
42893: LD_VAR 0 1
42897: PPUSH
42898: CALL_OW 292
42902: ST_TO_ADDR
// end ;
42903: LD_VAR 0 2
42907: RET
// export function ReverseDir ( unit ) ; begin
42908: LD_INT 0
42910: PPUSH
// if not unit then
42911: LD_VAR 0 1
42915: NOT
42916: IFFALSE 42920
// exit ;
42918: GO 42943
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42920: LD_ADDR_VAR 0 2
42924: PUSH
42925: LD_VAR 0 1
42929: PPUSH
42930: CALL_OW 254
42934: PUSH
42935: LD_INT 3
42937: PLUS
42938: PUSH
42939: LD_INT 6
42941: MOD
42942: ST_TO_ADDR
// end ;
42943: LD_VAR 0 2
42947: RET
// export function ReverseArray ( array ) ; var i ; begin
42948: LD_INT 0
42950: PPUSH
42951: PPUSH
// if not array then
42952: LD_VAR 0 1
42956: NOT
42957: IFFALSE 42961
// exit ;
42959: GO 43016
// result := [ ] ;
42961: LD_ADDR_VAR 0 2
42965: PUSH
42966: EMPTY
42967: ST_TO_ADDR
// for i := array downto 1 do
42968: LD_ADDR_VAR 0 3
42972: PUSH
42973: DOUBLE
42974: LD_VAR 0 1
42978: INC
42979: ST_TO_ADDR
42980: LD_INT 1
42982: PUSH
42983: FOR_DOWNTO
42984: IFFALSE 43014
// result := Join ( result , array [ i ] ) ;
42986: LD_ADDR_VAR 0 2
42990: PUSH
42991: LD_VAR 0 2
42995: PPUSH
42996: LD_VAR 0 1
43000: PUSH
43001: LD_VAR 0 3
43005: ARRAY
43006: PPUSH
43007: CALL 47858 0 2
43011: ST_TO_ADDR
43012: GO 42983
43014: POP
43015: POP
// end ;
43016: LD_VAR 0 2
43020: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43021: LD_INT 0
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
43027: PPUSH
43028: PPUSH
// if not unit or not hexes then
43029: LD_VAR 0 1
43033: NOT
43034: IFTRUE 43043
43036: PUSH
43037: LD_VAR 0 2
43041: NOT
43042: OR
43043: IFFALSE 43047
// exit ;
43045: GO 43170
// dist := 9999 ;
43047: LD_ADDR_VAR 0 5
43051: PUSH
43052: LD_INT 9999
43054: ST_TO_ADDR
// for i = 1 to hexes do
43055: LD_ADDR_VAR 0 4
43059: PUSH
43060: DOUBLE
43061: LD_INT 1
43063: DEC
43064: ST_TO_ADDR
43065: LD_VAR 0 2
43069: PUSH
43070: FOR_TO
43071: IFFALSE 43158
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43073: LD_ADDR_VAR 0 6
43077: PUSH
43078: LD_VAR 0 1
43082: PPUSH
43083: LD_VAR 0 2
43087: PUSH
43088: LD_VAR 0 4
43092: ARRAY
43093: PUSH
43094: LD_INT 1
43096: ARRAY
43097: PPUSH
43098: LD_VAR 0 2
43102: PUSH
43103: LD_VAR 0 4
43107: ARRAY
43108: PUSH
43109: LD_INT 2
43111: ARRAY
43112: PPUSH
43113: CALL_OW 297
43117: ST_TO_ADDR
// if tdist < dist then
43118: LD_VAR 0 6
43122: PUSH
43123: LD_VAR 0 5
43127: LESS
43128: IFFALSE 43156
// begin hex := hexes [ i ] ;
43130: LD_ADDR_VAR 0 8
43134: PUSH
43135: LD_VAR 0 2
43139: PUSH
43140: LD_VAR 0 4
43144: ARRAY
43145: ST_TO_ADDR
// dist := tdist ;
43146: LD_ADDR_VAR 0 5
43150: PUSH
43151: LD_VAR 0 6
43155: ST_TO_ADDR
// end ; end ;
43156: GO 43070
43158: POP
43159: POP
// result := hex ;
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_VAR 0 8
43169: ST_TO_ADDR
// end ;
43170: LD_VAR 0 3
43174: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43175: LD_INT 0
43177: PPUSH
43178: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43179: LD_VAR 0 1
43183: NOT
43184: IFTRUE 43223
43186: PUSH
43187: LD_VAR 0 1
43191: PUSH
43192: LD_INT 21
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 23
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PPUSH
43216: CALL_OW 69
43220: IN
43221: NOT
43222: OR
43223: IFFALSE 43227
// exit ;
43225: GO 43274
// for i = 1 to 3 do
43227: LD_ADDR_VAR 0 3
43231: PUSH
43232: DOUBLE
43233: LD_INT 1
43235: DEC
43236: ST_TO_ADDR
43237: LD_INT 3
43239: PUSH
43240: FOR_TO
43241: IFFALSE 43272
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 250
43252: PPUSH
43253: LD_VAR 0 1
43257: PPUSH
43258: CALL_OW 251
43262: PPUSH
43263: LD_INT 1
43265: PPUSH
43266: CALL_OW 453
43270: GO 43240
43272: POP
43273: POP
// end ;
43274: LD_VAR 0 2
43278: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43279: LD_INT 0
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
// if not unit or not enemy_unit then
43287: LD_VAR 0 1
43291: NOT
43292: IFTRUE 43301
43294: PUSH
43295: LD_VAR 0 2
43299: NOT
43300: OR
43301: IFFALSE 43305
// exit ;
43303: GO 43776
// if GetLives ( i ) < 250 then
43305: LD_VAR 0 4
43309: PPUSH
43310: CALL_OW 256
43314: PUSH
43315: LD_INT 250
43317: LESS
43318: IFFALSE 43331
// begin ComAutodestruct ( i ) ;
43320: LD_VAR 0 4
43324: PPUSH
43325: CALL 43175 0 1
// exit ;
43329: GO 43776
// end ; x := GetX ( enemy_unit ) ;
43331: LD_ADDR_VAR 0 7
43335: PUSH
43336: LD_VAR 0 2
43340: PPUSH
43341: CALL_OW 250
43345: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43346: LD_ADDR_VAR 0 8
43350: PUSH
43351: LD_VAR 0 2
43355: PPUSH
43356: CALL_OW 251
43360: ST_TO_ADDR
// if not x or not y then
43361: LD_VAR 0 7
43365: NOT
43366: IFTRUE 43375
43368: PUSH
43369: LD_VAR 0 8
43373: NOT
43374: OR
43375: IFFALSE 43379
// exit ;
43377: GO 43776
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43379: LD_ADDR_VAR 0 6
43383: PUSH
43384: LD_VAR 0 7
43388: PPUSH
43389: LD_INT 0
43391: PPUSH
43392: LD_INT 4
43394: PPUSH
43395: CALL_OW 272
43399: PUSH
43400: LD_VAR 0 8
43404: PPUSH
43405: LD_INT 0
43407: PPUSH
43408: LD_INT 4
43410: PPUSH
43411: CALL_OW 273
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_VAR 0 7
43424: PPUSH
43425: LD_INT 1
43427: PPUSH
43428: LD_INT 4
43430: PPUSH
43431: CALL_OW 272
43435: PUSH
43436: LD_VAR 0 8
43440: PPUSH
43441: LD_INT 1
43443: PPUSH
43444: LD_INT 4
43446: PPUSH
43447: CALL_OW 273
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_VAR 0 7
43460: PPUSH
43461: LD_INT 2
43463: PPUSH
43464: LD_INT 4
43466: PPUSH
43467: CALL_OW 272
43471: PUSH
43472: LD_VAR 0 8
43476: PPUSH
43477: LD_INT 2
43479: PPUSH
43480: LD_INT 4
43482: PPUSH
43483: CALL_OW 273
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_VAR 0 7
43496: PPUSH
43497: LD_INT 3
43499: PPUSH
43500: LD_INT 4
43502: PPUSH
43503: CALL_OW 272
43507: PUSH
43508: LD_VAR 0 8
43512: PPUSH
43513: LD_INT 3
43515: PPUSH
43516: LD_INT 4
43518: PPUSH
43519: CALL_OW 273
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_VAR 0 7
43532: PPUSH
43533: LD_INT 4
43535: PPUSH
43536: LD_INT 4
43538: PPUSH
43539: CALL_OW 272
43543: PUSH
43544: LD_VAR 0 8
43548: PPUSH
43549: LD_INT 4
43551: PPUSH
43552: LD_INT 4
43554: PPUSH
43555: CALL_OW 273
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_VAR 0 7
43568: PPUSH
43569: LD_INT 5
43571: PPUSH
43572: LD_INT 4
43574: PPUSH
43575: CALL_OW 272
43579: PUSH
43580: LD_VAR 0 8
43584: PPUSH
43585: LD_INT 5
43587: PPUSH
43588: LD_INT 4
43590: PPUSH
43591: CALL_OW 273
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// for i = tmp downto 1 do
43608: LD_ADDR_VAR 0 4
43612: PUSH
43613: DOUBLE
43614: LD_VAR 0 6
43618: INC
43619: ST_TO_ADDR
43620: LD_INT 1
43622: PUSH
43623: FOR_DOWNTO
43624: IFFALSE 43727
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43626: LD_VAR 0 6
43630: PUSH
43631: LD_VAR 0 4
43635: ARRAY
43636: PUSH
43637: LD_INT 1
43639: ARRAY
43640: PPUSH
43641: LD_VAR 0 6
43645: PUSH
43646: LD_VAR 0 4
43650: ARRAY
43651: PUSH
43652: LD_INT 2
43654: ARRAY
43655: PPUSH
43656: CALL_OW 488
43660: NOT
43661: IFTRUE 43703
43663: PUSH
43664: LD_VAR 0 6
43668: PUSH
43669: LD_VAR 0 4
43673: ARRAY
43674: PUSH
43675: LD_INT 1
43677: ARRAY
43678: PPUSH
43679: LD_VAR 0 6
43683: PUSH
43684: LD_VAR 0 4
43688: ARRAY
43689: PUSH
43690: LD_INT 2
43692: ARRAY
43693: PPUSH
43694: CALL_OW 428
43698: PUSH
43699: LD_INT 0
43701: NONEQUAL
43702: OR
43703: IFFALSE 43725
// tmp := Delete ( tmp , i ) ;
43705: LD_ADDR_VAR 0 6
43709: PUSH
43710: LD_VAR 0 6
43714: PPUSH
43715: LD_VAR 0 4
43719: PPUSH
43720: CALL_OW 3
43724: ST_TO_ADDR
43725: GO 43623
43727: POP
43728: POP
// j := GetClosestHex ( unit , tmp ) ;
43729: LD_ADDR_VAR 0 5
43733: PUSH
43734: LD_VAR 0 1
43738: PPUSH
43739: LD_VAR 0 6
43743: PPUSH
43744: CALL 43021 0 2
43748: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43749: LD_VAR 0 1
43753: PPUSH
43754: LD_VAR 0 5
43758: PUSH
43759: LD_INT 1
43761: ARRAY
43762: PPUSH
43763: LD_VAR 0 5
43767: PUSH
43768: LD_INT 2
43770: ARRAY
43771: PPUSH
43772: CALL_OW 111
// end ;
43776: LD_VAR 0 3
43780: RET
// export function PrepareApemanSoldier ( ) ; begin
43781: LD_INT 0
43783: PPUSH
// uc_nation := 0 ;
43784: LD_ADDR_OWVAR 21
43788: PUSH
43789: LD_INT 0
43791: ST_TO_ADDR
// hc_sex := sex_male ;
43792: LD_ADDR_OWVAR 27
43796: PUSH
43797: LD_INT 1
43799: ST_TO_ADDR
// hc_name :=  ;
43800: LD_ADDR_OWVAR 26
43804: PUSH
43805: LD_STRING 
43807: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43808: LD_ADDR_OWVAR 28
43812: PUSH
43813: LD_INT 15
43815: ST_TO_ADDR
// hc_gallery :=  ;
43816: LD_ADDR_OWVAR 33
43820: PUSH
43821: LD_STRING 
43823: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43824: LD_ADDR_OWVAR 31
43828: PUSH
43829: LD_INT 0
43831: PPUSH
43832: LD_INT 3
43834: PPUSH
43835: CALL_OW 12
43839: PUSH
43840: LD_INT 0
43842: PPUSH
43843: LD_INT 3
43845: PPUSH
43846: CALL_OW 12
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
43863: LD_ADDR_OWVAR 29
43867: PUSH
43868: LD_INT 12
43870: PUSH
43871: LD_INT 12
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: ST_TO_ADDR
// end ;
43878: LD_VAR 0 1
43882: RET
// export function PrepareApemanEngineer ( ) ; begin
43883: LD_INT 0
43885: PPUSH
// uc_nation := 0 ;
43886: LD_ADDR_OWVAR 21
43890: PUSH
43891: LD_INT 0
43893: ST_TO_ADDR
// hc_sex := sex_male ;
43894: LD_ADDR_OWVAR 27
43898: PUSH
43899: LD_INT 1
43901: ST_TO_ADDR
// hc_name :=  ;
43902: LD_ADDR_OWVAR 26
43906: PUSH
43907: LD_STRING 
43909: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43910: LD_ADDR_OWVAR 28
43914: PUSH
43915: LD_INT 16
43917: ST_TO_ADDR
// hc_gallery :=  ;
43918: LD_ADDR_OWVAR 33
43922: PUSH
43923: LD_STRING 
43925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43926: LD_ADDR_OWVAR 31
43930: PUSH
43931: LD_INT 0
43933: PPUSH
43934: LD_INT 3
43936: PPUSH
43937: CALL_OW 12
43941: PUSH
43942: LD_INT 0
43944: PPUSH
43945: LD_INT 3
43947: PPUSH
43948: CALL_OW 12
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
43965: LD_ADDR_OWVAR 29
43969: PUSH
43970: LD_INT 12
43972: PUSH
43973: LD_INT 12
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// end ;
43980: LD_VAR 0 1
43984: RET
// export function PrepareApeman ( agressivity ) ; begin
43985: LD_INT 0
43987: PPUSH
// uc_side := 0 ;
43988: LD_ADDR_OWVAR 20
43992: PUSH
43993: LD_INT 0
43995: ST_TO_ADDR
// uc_nation := 0 ;
43996: LD_ADDR_OWVAR 21
44000: PUSH
44001: LD_INT 0
44003: ST_TO_ADDR
// hc_sex := sex_male ;
44004: LD_ADDR_OWVAR 27
44008: PUSH
44009: LD_INT 1
44011: ST_TO_ADDR
// hc_class := class_apeman ;
44012: LD_ADDR_OWVAR 28
44016: PUSH
44017: LD_INT 12
44019: ST_TO_ADDR
// hc_gallery :=  ;
44020: LD_ADDR_OWVAR 33
44024: PUSH
44025: LD_STRING 
44027: ST_TO_ADDR
// hc_name :=  ;
44028: LD_ADDR_OWVAR 26
44032: PUSH
44033: LD_STRING 
44035: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44036: LD_ADDR_OWVAR 29
44040: PUSH
44041: LD_INT 12
44043: PUSH
44044: LD_INT 12
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// if agressivity = 0 then
44051: LD_VAR 0 1
44055: PUSH
44056: LD_INT 0
44058: EQUAL
44059: IFFALSE 44071
// hc_agressivity := 0 else
44061: LD_ADDR_OWVAR 35
44065: PUSH
44066: LD_INT 0
44068: ST_TO_ADDR
44069: GO 44092
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44071: LD_ADDR_OWVAR 35
44075: PUSH
44076: LD_VAR 0 1
44080: NEG
44081: PPUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 12
44091: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44092: LD_ADDR_OWVAR 31
44096: PUSH
44097: LD_INT 0
44099: PPUSH
44100: LD_INT 3
44102: PPUSH
44103: CALL_OW 12
44107: PUSH
44108: LD_INT 0
44110: PPUSH
44111: LD_INT 3
44113: PPUSH
44114: CALL_OW 12
44118: PUSH
44119: LD_INT 0
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: ST_TO_ADDR
// end ;
44131: LD_VAR 0 2
44135: RET
// export function PrepareTiger ( agressivity ) ; begin
44136: LD_INT 0
44138: PPUSH
// uc_side := 0 ;
44139: LD_ADDR_OWVAR 20
44143: PUSH
44144: LD_INT 0
44146: ST_TO_ADDR
// uc_nation := 0 ;
44147: LD_ADDR_OWVAR 21
44151: PUSH
44152: LD_INT 0
44154: ST_TO_ADDR
// InitHc ;
44155: CALL_OW 19
// hc_class := class_tiger ;
44159: LD_ADDR_OWVAR 28
44163: PUSH
44164: LD_INT 14
44166: ST_TO_ADDR
// hc_gallery :=  ;
44167: LD_ADDR_OWVAR 33
44171: PUSH
44172: LD_STRING 
44174: ST_TO_ADDR
// hc_name :=  ;
44175: LD_ADDR_OWVAR 26
44179: PUSH
44180: LD_STRING 
44182: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44183: LD_ADDR_OWVAR 35
44187: PUSH
44188: LD_VAR 0 1
44192: NEG
44193: PPUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 12
44203: ST_TO_ADDR
// end ;
44204: LD_VAR 0 2
44208: RET
// export function PrepareEnchidna ( ) ; begin
44209: LD_INT 0
44211: PPUSH
// uc_side := 0 ;
44212: LD_ADDR_OWVAR 20
44216: PUSH
44217: LD_INT 0
44219: ST_TO_ADDR
// uc_nation := 0 ;
44220: LD_ADDR_OWVAR 21
44224: PUSH
44225: LD_INT 0
44227: ST_TO_ADDR
// InitHc ;
44228: CALL_OW 19
// hc_class := class_baggie ;
44232: LD_ADDR_OWVAR 28
44236: PUSH
44237: LD_INT 13
44239: ST_TO_ADDR
// hc_gallery :=  ;
44240: LD_ADDR_OWVAR 33
44244: PUSH
44245: LD_STRING 
44247: ST_TO_ADDR
// hc_name :=  ;
44248: LD_ADDR_OWVAR 26
44252: PUSH
44253: LD_STRING 
44255: ST_TO_ADDR
// end ;
44256: LD_VAR 0 1
44260: RET
// export function PrepareFrog ( ) ; begin
44261: LD_INT 0
44263: PPUSH
// uc_side := 0 ;
44264: LD_ADDR_OWVAR 20
44268: PUSH
44269: LD_INT 0
44271: ST_TO_ADDR
// uc_nation := 0 ;
44272: LD_ADDR_OWVAR 21
44276: PUSH
44277: LD_INT 0
44279: ST_TO_ADDR
// InitHc ;
44280: CALL_OW 19
// hc_class := class_frog ;
44284: LD_ADDR_OWVAR 28
44288: PUSH
44289: LD_INT 19
44291: ST_TO_ADDR
// hc_gallery :=  ;
44292: LD_ADDR_OWVAR 33
44296: PUSH
44297: LD_STRING 
44299: ST_TO_ADDR
// hc_name :=  ;
44300: LD_ADDR_OWVAR 26
44304: PUSH
44305: LD_STRING 
44307: ST_TO_ADDR
// end ;
44308: LD_VAR 0 1
44312: RET
// export function PrepareFish ( ) ; begin
44313: LD_INT 0
44315: PPUSH
// uc_side := 0 ;
44316: LD_ADDR_OWVAR 20
44320: PUSH
44321: LD_INT 0
44323: ST_TO_ADDR
// uc_nation := 0 ;
44324: LD_ADDR_OWVAR 21
44328: PUSH
44329: LD_INT 0
44331: ST_TO_ADDR
// InitHc ;
44332: CALL_OW 19
// hc_class := class_fish ;
44336: LD_ADDR_OWVAR 28
44340: PUSH
44341: LD_INT 20
44343: ST_TO_ADDR
// hc_gallery :=  ;
44344: LD_ADDR_OWVAR 33
44348: PUSH
44349: LD_STRING 
44351: ST_TO_ADDR
// hc_name :=  ;
44352: LD_ADDR_OWVAR 26
44356: PUSH
44357: LD_STRING 
44359: ST_TO_ADDR
// end ;
44360: LD_VAR 0 1
44364: RET
// export function PrepareBird ( ) ; begin
44365: LD_INT 0
44367: PPUSH
// uc_side := 0 ;
44368: LD_ADDR_OWVAR 20
44372: PUSH
44373: LD_INT 0
44375: ST_TO_ADDR
// uc_nation := 0 ;
44376: LD_ADDR_OWVAR 21
44380: PUSH
44381: LD_INT 0
44383: ST_TO_ADDR
// InitHc ;
44384: CALL_OW 19
// hc_class := class_phororhacos ;
44388: LD_ADDR_OWVAR 28
44392: PUSH
44393: LD_INT 18
44395: ST_TO_ADDR
// hc_gallery :=  ;
44396: LD_ADDR_OWVAR 33
44400: PUSH
44401: LD_STRING 
44403: ST_TO_ADDR
// hc_name :=  ;
44404: LD_ADDR_OWVAR 26
44408: PUSH
44409: LD_STRING 
44411: ST_TO_ADDR
// end ;
44412: LD_VAR 0 1
44416: RET
// export function PrepareHorse ( ) ; begin
44417: LD_INT 0
44419: PPUSH
// uc_side := 0 ;
44420: LD_ADDR_OWVAR 20
44424: PUSH
44425: LD_INT 0
44427: ST_TO_ADDR
// uc_nation := 0 ;
44428: LD_ADDR_OWVAR 21
44432: PUSH
44433: LD_INT 0
44435: ST_TO_ADDR
// InitHc ;
44436: CALL_OW 19
// hc_class := class_horse ;
44440: LD_ADDR_OWVAR 28
44444: PUSH
44445: LD_INT 21
44447: ST_TO_ADDR
// hc_gallery :=  ;
44448: LD_ADDR_OWVAR 33
44452: PUSH
44453: LD_STRING 
44455: ST_TO_ADDR
// hc_name :=  ;
44456: LD_ADDR_OWVAR 26
44460: PUSH
44461: LD_STRING 
44463: ST_TO_ADDR
// end ;
44464: LD_VAR 0 1
44468: RET
// export function PrepareMastodont ( ) ; begin
44469: LD_INT 0
44471: PPUSH
// uc_side := 0 ;
44472: LD_ADDR_OWVAR 20
44476: PUSH
44477: LD_INT 0
44479: ST_TO_ADDR
// uc_nation := 0 ;
44480: LD_ADDR_OWVAR 21
44484: PUSH
44485: LD_INT 0
44487: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44488: LD_ADDR_OWVAR 37
44492: PUSH
44493: LD_INT 31
44495: ST_TO_ADDR
// vc_control := control_rider ;
44496: LD_ADDR_OWVAR 38
44500: PUSH
44501: LD_INT 4
44503: ST_TO_ADDR
// end ;
44504: LD_VAR 0 1
44508: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44509: LD_INT 0
44511: PPUSH
44512: PPUSH
44513: PPUSH
// uc_side = 0 ;
44514: LD_ADDR_OWVAR 20
44518: PUSH
44519: LD_INT 0
44521: ST_TO_ADDR
// uc_nation = 0 ;
44522: LD_ADDR_OWVAR 21
44526: PUSH
44527: LD_INT 0
44529: ST_TO_ADDR
// InitHc_All ( ) ;
44530: CALL_OW 584
// InitVc ;
44534: CALL_OW 20
// if mastodonts then
44538: LD_VAR 0 6
44542: IFFALSE 44609
// for i = 1 to mastodonts do
44544: LD_ADDR_VAR 0 11
44548: PUSH
44549: DOUBLE
44550: LD_INT 1
44552: DEC
44553: ST_TO_ADDR
44554: LD_VAR 0 6
44558: PUSH
44559: FOR_TO
44560: IFFALSE 44607
// begin vc_chassis := 31 ;
44562: LD_ADDR_OWVAR 37
44566: PUSH
44567: LD_INT 31
44569: ST_TO_ADDR
// vc_control := control_rider ;
44570: LD_ADDR_OWVAR 38
44574: PUSH
44575: LD_INT 4
44577: ST_TO_ADDR
// animal := CreateVehicle ;
44578: LD_ADDR_VAR 0 12
44582: PUSH
44583: CALL_OW 45
44587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44588: LD_VAR 0 12
44592: PPUSH
44593: LD_VAR 0 8
44597: PPUSH
44598: LD_INT 0
44600: PPUSH
44601: CALL 46751 0 3
// end ;
44605: GO 44559
44607: POP
44608: POP
// if horses then
44609: LD_VAR 0 5
44613: IFFALSE 44680
// for i = 1 to horses do
44615: LD_ADDR_VAR 0 11
44619: PUSH
44620: DOUBLE
44621: LD_INT 1
44623: DEC
44624: ST_TO_ADDR
44625: LD_VAR 0 5
44629: PUSH
44630: FOR_TO
44631: IFFALSE 44678
// begin hc_class := 21 ;
44633: LD_ADDR_OWVAR 28
44637: PUSH
44638: LD_INT 21
44640: ST_TO_ADDR
// hc_gallery :=  ;
44641: LD_ADDR_OWVAR 33
44645: PUSH
44646: LD_STRING 
44648: ST_TO_ADDR
// animal := CreateHuman ;
44649: LD_ADDR_VAR 0 12
44653: PUSH
44654: CALL_OW 44
44658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44659: LD_VAR 0 12
44663: PPUSH
44664: LD_VAR 0 8
44668: PPUSH
44669: LD_INT 0
44671: PPUSH
44672: CALL 46751 0 3
// end ;
44676: GO 44630
44678: POP
44679: POP
// if birds then
44680: LD_VAR 0 1
44684: IFFALSE 44751
// for i = 1 to birds do
44686: LD_ADDR_VAR 0 11
44690: PUSH
44691: DOUBLE
44692: LD_INT 1
44694: DEC
44695: ST_TO_ADDR
44696: LD_VAR 0 1
44700: PUSH
44701: FOR_TO
44702: IFFALSE 44749
// begin hc_class := 18 ;
44704: LD_ADDR_OWVAR 28
44708: PUSH
44709: LD_INT 18
44711: ST_TO_ADDR
// hc_gallery =  ;
44712: LD_ADDR_OWVAR 33
44716: PUSH
44717: LD_STRING 
44719: ST_TO_ADDR
// animal := CreateHuman ;
44720: LD_ADDR_VAR 0 12
44724: PUSH
44725: CALL_OW 44
44729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44730: LD_VAR 0 12
44734: PPUSH
44735: LD_VAR 0 8
44739: PPUSH
44740: LD_INT 0
44742: PPUSH
44743: CALL 46751 0 3
// end ;
44747: GO 44701
44749: POP
44750: POP
// if tigers then
44751: LD_VAR 0 2
44755: IFFALSE 44839
// for i = 1 to tigers do
44757: LD_ADDR_VAR 0 11
44761: PUSH
44762: DOUBLE
44763: LD_INT 1
44765: DEC
44766: ST_TO_ADDR
44767: LD_VAR 0 2
44771: PUSH
44772: FOR_TO
44773: IFFALSE 44837
// begin hc_class = class_tiger ;
44775: LD_ADDR_OWVAR 28
44779: PUSH
44780: LD_INT 14
44782: ST_TO_ADDR
// hc_gallery =  ;
44783: LD_ADDR_OWVAR 33
44787: PUSH
44788: LD_STRING 
44790: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44791: LD_ADDR_OWVAR 35
44795: PUSH
44796: LD_INT 7
44798: NEG
44799: PPUSH
44800: LD_INT 7
44802: PPUSH
44803: CALL_OW 12
44807: ST_TO_ADDR
// animal := CreateHuman ;
44808: LD_ADDR_VAR 0 12
44812: PUSH
44813: CALL_OW 44
44817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44818: LD_VAR 0 12
44822: PPUSH
44823: LD_VAR 0 8
44827: PPUSH
44828: LD_INT 0
44830: PPUSH
44831: CALL 46751 0 3
// end ;
44835: GO 44772
44837: POP
44838: POP
// if apemans then
44839: LD_VAR 0 3
44843: IFFALSE 44966
// for i = 1 to apemans do
44845: LD_ADDR_VAR 0 11
44849: PUSH
44850: DOUBLE
44851: LD_INT 1
44853: DEC
44854: ST_TO_ADDR
44855: LD_VAR 0 3
44859: PUSH
44860: FOR_TO
44861: IFFALSE 44964
// begin hc_class = class_apeman ;
44863: LD_ADDR_OWVAR 28
44867: PUSH
44868: LD_INT 12
44870: ST_TO_ADDR
// hc_gallery =  ;
44871: LD_ADDR_OWVAR 33
44875: PUSH
44876: LD_STRING 
44878: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44879: LD_ADDR_OWVAR 35
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PPUSH
44888: LD_INT 2
44890: PPUSH
44891: CALL_OW 12
44895: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44896: LD_ADDR_OWVAR 31
44900: PUSH
44901: LD_INT 1
44903: PPUSH
44904: LD_INT 3
44906: PPUSH
44907: CALL_OW 12
44911: PUSH
44912: LD_INT 1
44914: PPUSH
44915: LD_INT 3
44917: PPUSH
44918: CALL_OW 12
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: ST_TO_ADDR
// animal := CreateHuman ;
44935: LD_ADDR_VAR 0 12
44939: PUSH
44940: CALL_OW 44
44944: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44945: LD_VAR 0 12
44949: PPUSH
44950: LD_VAR 0 8
44954: PPUSH
44955: LD_INT 0
44957: PPUSH
44958: CALL 46751 0 3
// end ;
44962: GO 44860
44964: POP
44965: POP
// if enchidnas then
44966: LD_VAR 0 4
44970: IFFALSE 45037
// for i = 1 to enchidnas do
44972: LD_ADDR_VAR 0 11
44976: PUSH
44977: DOUBLE
44978: LD_INT 1
44980: DEC
44981: ST_TO_ADDR
44982: LD_VAR 0 4
44986: PUSH
44987: FOR_TO
44988: IFFALSE 45035
// begin hc_class = 13 ;
44990: LD_ADDR_OWVAR 28
44994: PUSH
44995: LD_INT 13
44997: ST_TO_ADDR
// hc_gallery =  ;
44998: LD_ADDR_OWVAR 33
45002: PUSH
45003: LD_STRING 
45005: ST_TO_ADDR
// animal := CreateHuman ;
45006: LD_ADDR_VAR 0 12
45010: PUSH
45011: CALL_OW 44
45015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45016: LD_VAR 0 12
45020: PPUSH
45021: LD_VAR 0 8
45025: PPUSH
45026: LD_INT 0
45028: PPUSH
45029: CALL 46751 0 3
// end ;
45033: GO 44987
45035: POP
45036: POP
// if fishes then
45037: LD_VAR 0 7
45041: IFFALSE 45108
// for i = 1 to fishes do
45043: LD_ADDR_VAR 0 11
45047: PUSH
45048: DOUBLE
45049: LD_INT 1
45051: DEC
45052: ST_TO_ADDR
45053: LD_VAR 0 7
45057: PUSH
45058: FOR_TO
45059: IFFALSE 45106
// begin hc_class = 20 ;
45061: LD_ADDR_OWVAR 28
45065: PUSH
45066: LD_INT 20
45068: ST_TO_ADDR
// hc_gallery =  ;
45069: LD_ADDR_OWVAR 33
45073: PUSH
45074: LD_STRING 
45076: ST_TO_ADDR
// animal := CreateHuman ;
45077: LD_ADDR_VAR 0 12
45081: PUSH
45082: CALL_OW 44
45086: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45087: LD_VAR 0 12
45091: PPUSH
45092: LD_VAR 0 9
45096: PPUSH
45097: LD_INT 0
45099: PPUSH
45100: CALL 46751 0 3
// end ;
45104: GO 45058
45106: POP
45107: POP
// end ;
45108: LD_VAR 0 10
45112: RET
// export function WantHeal ( sci , unit ) ; begin
45113: LD_INT 0
45115: PPUSH
// if GetTaskList ( sci ) > 0 then
45116: LD_VAR 0 1
45120: PPUSH
45121: CALL_OW 437
45125: PUSH
45126: LD_INT 0
45128: GREATER
45129: IFFALSE 45201
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 437
45140: PUSH
45141: LD_INT 1
45143: ARRAY
45144: PUSH
45145: LD_INT 1
45147: ARRAY
45148: PUSH
45149: LD_STRING l
45151: EQUAL
45152: IFFALSE 45179
45154: PUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL_OW 437
45164: PUSH
45165: LD_INT 1
45167: ARRAY
45168: PUSH
45169: LD_INT 4
45171: ARRAY
45172: PUSH
45173: LD_VAR 0 2
45177: EQUAL
45178: AND
45179: IFFALSE 45191
// result := true else
45181: LD_ADDR_VAR 0 3
45185: PUSH
45186: LD_INT 1
45188: ST_TO_ADDR
45189: GO 45199
// result := false ;
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_INT 0
45198: ST_TO_ADDR
// end else
45199: GO 45209
// result := false ;
45201: LD_ADDR_VAR 0 3
45205: PUSH
45206: LD_INT 0
45208: ST_TO_ADDR
// end ;
45209: LD_VAR 0 3
45213: RET
// export function HealTarget ( sci ) ; begin
45214: LD_INT 0
45216: PPUSH
// if not sci then
45217: LD_VAR 0 1
45221: NOT
45222: IFFALSE 45226
// exit ;
45224: GO 45291
// result := 0 ;
45226: LD_ADDR_VAR 0 2
45230: PUSH
45231: LD_INT 0
45233: ST_TO_ADDR
// if GetTaskList ( sci ) then
45234: LD_VAR 0 1
45238: PPUSH
45239: CALL_OW 437
45243: IFFALSE 45291
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45245: LD_VAR 0 1
45249: PPUSH
45250: CALL_OW 437
45254: PUSH
45255: LD_INT 1
45257: ARRAY
45258: PUSH
45259: LD_INT 1
45261: ARRAY
45262: PUSH
45263: LD_STRING l
45265: EQUAL
45266: IFFALSE 45291
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45268: LD_ADDR_VAR 0 2
45272: PUSH
45273: LD_VAR 0 1
45277: PPUSH
45278: CALL_OW 437
45282: PUSH
45283: LD_INT 1
45285: ARRAY
45286: PUSH
45287: LD_INT 4
45289: ARRAY
45290: ST_TO_ADDR
// end ;
45291: LD_VAR 0 2
45295: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45296: LD_INT 0
45298: PPUSH
45299: PPUSH
45300: PPUSH
45301: PPUSH
// if not base_units then
45302: LD_VAR 0 1
45306: NOT
45307: IFFALSE 45311
// exit ;
45309: GO 45398
// result := false ;
45311: LD_ADDR_VAR 0 2
45315: PUSH
45316: LD_INT 0
45318: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45319: LD_ADDR_VAR 0 5
45323: PUSH
45324: LD_VAR 0 1
45328: PPUSH
45329: LD_INT 21
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PPUSH
45339: CALL_OW 72
45343: ST_TO_ADDR
// if not tmp then
45344: LD_VAR 0 5
45348: NOT
45349: IFFALSE 45353
// exit ;
45351: GO 45398
// for i in tmp do
45353: LD_ADDR_VAR 0 3
45357: PUSH
45358: LD_VAR 0 5
45362: PUSH
45363: FOR_IN
45364: IFFALSE 45396
// begin result := EnemyInRange ( i , 22 ) ;
45366: LD_ADDR_VAR 0 2
45370: PUSH
45371: LD_VAR 0 3
45375: PPUSH
45376: LD_INT 22
45378: PPUSH
45379: CALL 42823 0 2
45383: ST_TO_ADDR
// if result then
45384: LD_VAR 0 2
45388: IFFALSE 45394
// exit ;
45390: POP
45391: POP
45392: GO 45398
// end ;
45394: GO 45363
45396: POP
45397: POP
// end ;
45398: LD_VAR 0 2
45402: RET
// export function FilterByTag ( units , tag ) ; begin
45403: LD_INT 0
45405: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45406: LD_ADDR_VAR 0 3
45410: PUSH
45411: LD_VAR 0 1
45415: PPUSH
45416: LD_INT 120
45418: PUSH
45419: LD_VAR 0 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PPUSH
45428: CALL_OW 72
45432: ST_TO_ADDR
// end ;
45433: LD_VAR 0 3
45437: RET
// export function IsDriver ( un ) ; begin
45438: LD_INT 0
45440: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45441: LD_ADDR_VAR 0 2
45445: PUSH
45446: LD_VAR 0 1
45450: PUSH
45451: LD_INT 55
45453: PUSH
45454: EMPTY
45455: LIST
45456: PPUSH
45457: CALL_OW 69
45461: IN
45462: ST_TO_ADDR
// end ;
45463: LD_VAR 0 2
45467: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45468: LD_INT 0
45470: PPUSH
45471: PPUSH
// list := [ ] ;
45472: LD_ADDR_VAR 0 5
45476: PUSH
45477: EMPTY
45478: ST_TO_ADDR
// case d of 0 :
45479: LD_VAR 0 3
45483: PUSH
45484: LD_INT 0
45486: DOUBLE
45487: EQUAL
45488: IFTRUE 45492
45490: GO 45625
45492: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45493: LD_ADDR_VAR 0 5
45497: PUSH
45498: LD_VAR 0 1
45502: PUSH
45503: LD_INT 4
45505: MINUS
45506: PUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_INT 4
45514: MINUS
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: PUSH
45524: LD_VAR 0 1
45528: PUSH
45529: LD_INT 3
45531: MINUS
45532: PUSH
45533: LD_VAR 0 2
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: LIST
45545: PUSH
45546: LD_VAR 0 1
45550: PUSH
45551: LD_INT 4
45553: PLUS
45554: PUSH
45555: LD_VAR 0 2
45559: PUSH
45560: LD_INT 4
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: PUSH
45568: LD_VAR 0 1
45572: PUSH
45573: LD_INT 3
45575: PLUS
45576: PUSH
45577: LD_VAR 0 2
45581: PUSH
45582: LD_INT 3
45584: PLUS
45585: PUSH
45586: LD_INT 5
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: PUSH
45594: LD_VAR 0 1
45598: PUSH
45599: LD_VAR 0 2
45603: PUSH
45604: LD_INT 4
45606: PLUS
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// end ; 1 :
45623: GO 46323
45625: LD_INT 1
45627: DOUBLE
45628: EQUAL
45629: IFTRUE 45633
45631: GO 45766
45633: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45634: LD_ADDR_VAR 0 5
45638: PUSH
45639: LD_VAR 0 1
45643: PUSH
45644: LD_VAR 0 2
45648: PUSH
45649: LD_INT 4
45651: MINUS
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: PUSH
45661: LD_VAR 0 1
45665: PUSH
45666: LD_INT 3
45668: MINUS
45669: PUSH
45670: LD_VAR 0 2
45674: PUSH
45675: LD_INT 3
45677: MINUS
45678: PUSH
45679: LD_INT 2
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: PUSH
45687: LD_VAR 0 1
45691: PUSH
45692: LD_INT 4
45694: MINUS
45695: PUSH
45696: LD_VAR 0 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: PUSH
45709: LD_VAR 0 1
45713: PUSH
45714: LD_VAR 0 2
45718: PUSH
45719: LD_INT 3
45721: PLUS
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: PUSH
45731: LD_VAR 0 1
45735: PUSH
45736: LD_INT 4
45738: PLUS
45739: PUSH
45740: LD_VAR 0 2
45744: PUSH
45745: LD_INT 4
45747: PLUS
45748: PUSH
45749: LD_INT 5
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: ST_TO_ADDR
// end ; 2 :
45764: GO 46323
45766: LD_INT 2
45768: DOUBLE
45769: EQUAL
45770: IFTRUE 45774
45772: GO 45903
45774: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45775: LD_ADDR_VAR 0 5
45779: PUSH
45780: LD_VAR 0 1
45784: PUSH
45785: LD_VAR 0 2
45789: PUSH
45790: LD_INT 3
45792: MINUS
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: LIST
45801: PUSH
45802: LD_VAR 0 1
45806: PUSH
45807: LD_INT 4
45809: PLUS
45810: PUSH
45811: LD_VAR 0 2
45815: PUSH
45816: LD_INT 4
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: LIST
45823: PUSH
45824: LD_VAR 0 1
45828: PUSH
45829: LD_VAR 0 2
45833: PUSH
45834: LD_INT 4
45836: PLUS
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: LIST
45845: PUSH
45846: LD_VAR 0 1
45850: PUSH
45851: LD_INT 3
45853: MINUS
45854: PUSH
45855: LD_VAR 0 2
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: PUSH
45868: LD_VAR 0 1
45872: PUSH
45873: LD_INT 4
45875: MINUS
45876: PUSH
45877: LD_VAR 0 2
45881: PUSH
45882: LD_INT 4
45884: MINUS
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// end ; 3 :
45901: GO 46323
45903: LD_INT 3
45905: DOUBLE
45906: EQUAL
45907: IFTRUE 45911
45909: GO 46044
45911: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45912: LD_ADDR_VAR 0 5
45916: PUSH
45917: LD_VAR 0 1
45921: PUSH
45922: LD_INT 3
45924: PLUS
45925: PUSH
45926: LD_VAR 0 2
45930: PUSH
45931: LD_INT 4
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: LIST
45938: PUSH
45939: LD_VAR 0 1
45943: PUSH
45944: LD_INT 4
45946: PLUS
45947: PUSH
45948: LD_VAR 0 2
45952: PUSH
45953: LD_INT 4
45955: PLUS
45956: PUSH
45957: LD_INT 5
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: PUSH
45965: LD_VAR 0 1
45969: PUSH
45970: LD_INT 4
45972: MINUS
45973: PUSH
45974: LD_VAR 0 2
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: PUSH
45987: LD_VAR 0 1
45991: PUSH
45992: LD_VAR 0 2
45996: PUSH
45997: LD_INT 4
45999: MINUS
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: PUSH
46009: LD_VAR 0 1
46013: PUSH
46014: LD_INT 3
46016: MINUS
46017: PUSH
46018: LD_VAR 0 2
46022: PUSH
46023: LD_INT 3
46025: MINUS
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: LIST
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// end ; 4 :
46042: GO 46323
46044: LD_INT 4
46046: DOUBLE
46047: EQUAL
46048: IFTRUE 46052
46050: GO 46185
46052: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46053: LD_ADDR_VAR 0 5
46057: PUSH
46058: LD_VAR 0 1
46062: PUSH
46063: LD_VAR 0 2
46067: PUSH
46068: LD_INT 4
46070: PLUS
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: PUSH
46080: LD_VAR 0 1
46084: PUSH
46085: LD_INT 3
46087: PLUS
46088: PUSH
46089: LD_VAR 0 2
46093: PUSH
46094: LD_INT 3
46096: PLUS
46097: PUSH
46098: LD_INT 5
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: LIST
46105: PUSH
46106: LD_VAR 0 1
46110: PUSH
46111: LD_INT 4
46113: PLUS
46114: PUSH
46115: LD_VAR 0 2
46119: PUSH
46120: LD_INT 4
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: LIST
46127: PUSH
46128: LD_VAR 0 1
46132: PUSH
46133: LD_VAR 0 2
46137: PUSH
46138: LD_INT 3
46140: MINUS
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: PUSH
46150: LD_VAR 0 1
46154: PUSH
46155: LD_INT 4
46157: MINUS
46158: PUSH
46159: LD_VAR 0 2
46163: PUSH
46164: LD_INT 4
46166: MINUS
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// end ; 5 :
46183: GO 46323
46185: LD_INT 5
46187: DOUBLE
46188: EQUAL
46189: IFTRUE 46193
46191: GO 46322
46193: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46194: LD_ADDR_VAR 0 5
46198: PUSH
46199: LD_VAR 0 1
46203: PUSH
46204: LD_INT 4
46206: MINUS
46207: PUSH
46208: LD_VAR 0 2
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: PUSH
46221: LD_VAR 0 1
46225: PUSH
46226: LD_VAR 0 2
46230: PUSH
46231: LD_INT 4
46233: MINUS
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: PUSH
46243: LD_VAR 0 1
46247: PUSH
46248: LD_INT 4
46250: PLUS
46251: PUSH
46252: LD_VAR 0 2
46256: PUSH
46257: LD_INT 4
46259: PLUS
46260: PUSH
46261: LD_INT 5
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: PUSH
46269: LD_VAR 0 1
46273: PUSH
46274: LD_INT 3
46276: PLUS
46277: PUSH
46278: LD_VAR 0 2
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: LIST
46290: PUSH
46291: LD_VAR 0 1
46295: PUSH
46296: LD_VAR 0 2
46300: PUSH
46301: LD_INT 3
46303: PLUS
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: ST_TO_ADDR
// end ; end ;
46320: GO 46323
46322: POP
// result := list ;
46323: LD_ADDR_VAR 0 4
46327: PUSH
46328: LD_VAR 0 5
46332: ST_TO_ADDR
// end ;
46333: LD_VAR 0 4
46337: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46338: LD_INT 0
46340: PPUSH
46341: PPUSH
46342: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46343: LD_VAR 0 1
46347: NOT
46348: IFTRUE 46376
46350: PUSH
46351: LD_VAR 0 2
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: LD_INT 4
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: IN
46374: NOT
46375: OR
46376: IFFALSE 46380
// exit ;
46378: GO 46463
// tmp := [ ] ;
46380: LD_ADDR_VAR 0 5
46384: PUSH
46385: EMPTY
46386: ST_TO_ADDR
// for i in units do
46387: LD_ADDR_VAR 0 4
46391: PUSH
46392: LD_VAR 0 1
46396: PUSH
46397: FOR_IN
46398: IFFALSE 46432
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46400: LD_ADDR_VAR 0 5
46404: PUSH
46405: LD_VAR 0 5
46409: PPUSH
46410: LD_VAR 0 4
46414: PPUSH
46415: LD_VAR 0 2
46419: PPUSH
46420: CALL_OW 259
46424: PPUSH
46425: CALL 47858 0 2
46429: ST_TO_ADDR
46430: GO 46397
46432: POP
46433: POP
// if not tmp then
46434: LD_VAR 0 5
46438: NOT
46439: IFFALSE 46443
// exit ;
46441: GO 46463
// result := SortListByListDesc ( units , tmp ) ;
46443: LD_ADDR_VAR 0 3
46447: PUSH
46448: LD_VAR 0 1
46452: PPUSH
46453: LD_VAR 0 5
46457: PPUSH
46458: CALL_OW 77
46462: ST_TO_ADDR
// end ;
46463: LD_VAR 0 3
46467: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46468: LD_INT 0
46470: PPUSH
46471: PPUSH
46472: PPUSH
// result := false ;
46473: LD_ADDR_VAR 0 3
46477: PUSH
46478: LD_INT 0
46480: ST_TO_ADDR
// if not building then
46481: LD_VAR 0 2
46485: NOT
46486: IFFALSE 46490
// exit ;
46488: GO 46634
// x := GetX ( building ) ;
46490: LD_ADDR_VAR 0 4
46494: PUSH
46495: LD_VAR 0 2
46499: PPUSH
46500: CALL_OW 250
46504: ST_TO_ADDR
// y := GetY ( building ) ;
46505: LD_ADDR_VAR 0 5
46509: PUSH
46510: LD_VAR 0 2
46514: PPUSH
46515: CALL_OW 251
46519: ST_TO_ADDR
// if not x or not y then
46520: LD_VAR 0 4
46524: NOT
46525: IFTRUE 46534
46527: PUSH
46528: LD_VAR 0 5
46532: NOT
46533: OR
46534: IFFALSE 46538
// exit ;
46536: GO 46634
// if GetTaskList ( unit ) then
46538: LD_VAR 0 1
46542: PPUSH
46543: CALL_OW 437
46547: IFFALSE 46634
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46549: LD_STRING e
46551: PUSH
46552: LD_VAR 0 1
46556: PPUSH
46557: CALL_OW 437
46561: PUSH
46562: LD_INT 1
46564: ARRAY
46565: PUSH
46566: LD_INT 1
46568: ARRAY
46569: EQUAL
46570: IFFALSE 46597
46572: PUSH
46573: LD_VAR 0 4
46577: PUSH
46578: LD_VAR 0 1
46582: PPUSH
46583: CALL_OW 437
46587: PUSH
46588: LD_INT 1
46590: ARRAY
46591: PUSH
46592: LD_INT 2
46594: ARRAY
46595: EQUAL
46596: AND
46597: IFFALSE 46624
46599: PUSH
46600: LD_VAR 0 5
46604: PUSH
46605: LD_VAR 0 1
46609: PPUSH
46610: CALL_OW 437
46614: PUSH
46615: LD_INT 1
46617: ARRAY
46618: PUSH
46619: LD_INT 3
46621: ARRAY
46622: EQUAL
46623: AND
46624: IFFALSE 46634
// result := true end ;
46626: LD_ADDR_VAR 0 3
46630: PUSH
46631: LD_INT 1
46633: ST_TO_ADDR
// end ;
46634: LD_VAR 0 3
46638: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46639: LD_INT 0
46641: PPUSH
// result := false ;
46642: LD_ADDR_VAR 0 4
46646: PUSH
46647: LD_INT 0
46649: ST_TO_ADDR
// if GetTaskList ( unit ) then
46650: LD_VAR 0 1
46654: PPUSH
46655: CALL_OW 437
46659: IFFALSE 46746
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46661: LD_STRING M
46663: PUSH
46664: LD_VAR 0 1
46668: PPUSH
46669: CALL_OW 437
46673: PUSH
46674: LD_INT 1
46676: ARRAY
46677: PUSH
46678: LD_INT 1
46680: ARRAY
46681: EQUAL
46682: IFFALSE 46709
46684: PUSH
46685: LD_VAR 0 2
46689: PUSH
46690: LD_VAR 0 1
46694: PPUSH
46695: CALL_OW 437
46699: PUSH
46700: LD_INT 1
46702: ARRAY
46703: PUSH
46704: LD_INT 2
46706: ARRAY
46707: EQUAL
46708: AND
46709: IFFALSE 46736
46711: PUSH
46712: LD_VAR 0 3
46716: PUSH
46717: LD_VAR 0 1
46721: PPUSH
46722: CALL_OW 437
46726: PUSH
46727: LD_INT 1
46729: ARRAY
46730: PUSH
46731: LD_INT 3
46733: ARRAY
46734: EQUAL
46735: AND
46736: IFFALSE 46746
// result := true ;
46738: LD_ADDR_VAR 0 4
46742: PUSH
46743: LD_INT 1
46745: ST_TO_ADDR
// end ; end ;
46746: LD_VAR 0 4
46750: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46751: LD_INT 0
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
// if not unit or not area then
46757: LD_VAR 0 1
46761: NOT
46762: IFTRUE 46771
46764: PUSH
46765: LD_VAR 0 2
46769: NOT
46770: OR
46771: IFFALSE 46775
// exit ;
46773: GO 46951
// tmp := AreaToList ( area , i ) ;
46775: LD_ADDR_VAR 0 6
46779: PUSH
46780: LD_VAR 0 2
46784: PPUSH
46785: LD_VAR 0 5
46789: PPUSH
46790: CALL_OW 517
46794: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46795: LD_ADDR_VAR 0 5
46799: PUSH
46800: DOUBLE
46801: LD_INT 1
46803: DEC
46804: ST_TO_ADDR
46805: LD_VAR 0 6
46809: PUSH
46810: LD_INT 1
46812: ARRAY
46813: PUSH
46814: FOR_TO
46815: IFFALSE 46949
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46817: LD_ADDR_VAR 0 7
46821: PUSH
46822: LD_VAR 0 6
46826: PUSH
46827: LD_INT 1
46829: ARRAY
46830: PUSH
46831: LD_VAR 0 5
46835: ARRAY
46836: PUSH
46837: LD_VAR 0 6
46841: PUSH
46842: LD_INT 2
46844: ARRAY
46845: PUSH
46846: LD_VAR 0 5
46850: ARRAY
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46856: LD_INT 92
46858: PUSH
46859: LD_VAR 0 7
46863: PUSH
46864: LD_INT 1
46866: ARRAY
46867: PUSH
46868: LD_VAR 0 7
46872: PUSH
46873: LD_INT 2
46875: ARRAY
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: PPUSH
46886: CALL_OW 69
46890: PUSH
46891: LD_INT 0
46893: EQUAL
46894: IFFALSE 46947
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46896: LD_VAR 0 1
46900: PPUSH
46901: LD_VAR 0 7
46905: PUSH
46906: LD_INT 1
46908: ARRAY
46909: PPUSH
46910: LD_VAR 0 7
46914: PUSH
46915: LD_INT 2
46917: ARRAY
46918: PPUSH
46919: LD_VAR 0 3
46923: PPUSH
46924: CALL_OW 48
// result := IsPlaced ( unit ) ;
46928: LD_ADDR_VAR 0 4
46932: PUSH
46933: LD_VAR 0 1
46937: PPUSH
46938: CALL_OW 305
46942: ST_TO_ADDR
// exit ;
46943: POP
46944: POP
46945: GO 46951
// end ; end ;
46947: GO 46814
46949: POP
46950: POP
// end ;
46951: LD_VAR 0 4
46955: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46956: LD_INT 0
46958: PPUSH
46959: PPUSH
46960: PPUSH
// if not side or side > 8 then
46961: LD_VAR 0 1
46965: NOT
46966: IFTRUE 46978
46968: PUSH
46969: LD_VAR 0 1
46973: PUSH
46974: LD_INT 8
46976: GREATER
46977: OR
46978: IFFALSE 46982
// exit ;
46980: GO 47169
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46982: LD_ADDR_VAR 0 4
46986: PUSH
46987: LD_INT 22
46989: PUSH
46990: LD_VAR 0 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 21
47001: PUSH
47002: LD_INT 3
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PPUSH
47013: CALL_OW 69
47017: ST_TO_ADDR
// if not tmp then
47018: LD_VAR 0 4
47022: NOT
47023: IFFALSE 47027
// exit ;
47025: GO 47169
// enable_addtolog := true ;
47027: LD_ADDR_OWVAR 81
47031: PUSH
47032: LD_INT 1
47034: ST_TO_ADDR
// AddToLog ( [ ) ;
47035: LD_STRING [
47037: PPUSH
47038: CALL_OW 561
// for i in tmp do
47042: LD_ADDR_VAR 0 3
47046: PUSH
47047: LD_VAR 0 4
47051: PUSH
47052: FOR_IN
47053: IFFALSE 47160
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47055: LD_STRING [
47057: PUSH
47058: LD_VAR 0 3
47062: PPUSH
47063: CALL_OW 266
47067: STR
47068: PUSH
47069: LD_STRING , 
47071: STR
47072: PUSH
47073: LD_VAR 0 3
47077: PPUSH
47078: CALL_OW 250
47082: STR
47083: PUSH
47084: LD_STRING , 
47086: STR
47087: PUSH
47088: LD_VAR 0 3
47092: PPUSH
47093: CALL_OW 251
47097: STR
47098: PUSH
47099: LD_STRING , 
47101: STR
47102: PUSH
47103: LD_VAR 0 3
47107: PPUSH
47108: CALL_OW 254
47112: STR
47113: PUSH
47114: LD_STRING , 
47116: STR
47117: PUSH
47118: LD_VAR 0 3
47122: PPUSH
47123: LD_INT 1
47125: PPUSH
47126: CALL_OW 268
47130: STR
47131: PUSH
47132: LD_STRING , 
47134: STR
47135: PUSH
47136: LD_VAR 0 3
47140: PPUSH
47141: LD_INT 2
47143: PPUSH
47144: CALL_OW 268
47148: STR
47149: PUSH
47150: LD_STRING ],
47152: STR
47153: PPUSH
47154: CALL_OW 561
// end ;
47158: GO 47052
47160: POP
47161: POP
// AddToLog ( ]; ) ;
47162: LD_STRING ];
47164: PPUSH
47165: CALL_OW 561
// end ;
47169: LD_VAR 0 2
47173: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47174: LD_INT 0
47176: PPUSH
47177: PPUSH
47178: PPUSH
47179: PPUSH
47180: PPUSH
// if not area or not rate or not max then
47181: LD_VAR 0 1
47185: NOT
47186: IFTRUE 47195
47188: PUSH
47189: LD_VAR 0 2
47193: NOT
47194: OR
47195: IFTRUE 47204
47197: PUSH
47198: LD_VAR 0 4
47202: NOT
47203: OR
47204: IFFALSE 47208
// exit ;
47206: GO 47397
// while 1 do
47208: LD_INT 1
47210: IFFALSE 47397
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47212: LD_ADDR_VAR 0 9
47216: PUSH
47217: LD_VAR 0 1
47221: PPUSH
47222: LD_INT 1
47224: PPUSH
47225: CALL_OW 287
47229: PUSH
47230: LD_INT 10
47232: MUL
47233: ST_TO_ADDR
// r := rate / 10 ;
47234: LD_ADDR_VAR 0 7
47238: PUSH
47239: LD_VAR 0 2
47243: PUSH
47244: LD_INT 10
47246: DIVREAL
47247: ST_TO_ADDR
// time := 1 1$00 ;
47248: LD_ADDR_VAR 0 8
47252: PUSH
47253: LD_INT 2100
47255: ST_TO_ADDR
// if amount < min then
47256: LD_VAR 0 9
47260: PUSH
47261: LD_VAR 0 3
47265: LESS
47266: IFFALSE 47284
// r := r * 2 else
47268: LD_ADDR_VAR 0 7
47272: PUSH
47273: LD_VAR 0 7
47277: PUSH
47278: LD_INT 2
47280: MUL
47281: ST_TO_ADDR
47282: GO 47310
// if amount > max then
47284: LD_VAR 0 9
47288: PUSH
47289: LD_VAR 0 4
47293: GREATER
47294: IFFALSE 47310
// r := r / 2 ;
47296: LD_ADDR_VAR 0 7
47300: PUSH
47301: LD_VAR 0 7
47305: PUSH
47306: LD_INT 2
47308: DIVREAL
47309: ST_TO_ADDR
// time := time / r ;
47310: LD_ADDR_VAR 0 8
47314: PUSH
47315: LD_VAR 0 8
47319: PUSH
47320: LD_VAR 0 7
47324: DIVREAL
47325: ST_TO_ADDR
// if time < 0 then
47326: LD_VAR 0 8
47330: PUSH
47331: LD_INT 0
47333: LESS
47334: IFFALSE 47351
// time := time * - 1 ;
47336: LD_ADDR_VAR 0 8
47340: PUSH
47341: LD_VAR 0 8
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: MUL
47350: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47351: LD_VAR 0 8
47355: PUSH
47356: LD_INT 35
47358: PPUSH
47359: LD_INT 875
47361: PPUSH
47362: CALL_OW 12
47366: PLUS
47367: PPUSH
47368: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47372: LD_INT 1
47374: PPUSH
47375: LD_INT 5
47377: PPUSH
47378: CALL_OW 12
47382: PPUSH
47383: LD_VAR 0 1
47387: PPUSH
47388: LD_INT 1
47390: PPUSH
47391: CALL_OW 55
// end ;
47395: GO 47208
// end ;
47397: LD_VAR 0 5
47401: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47402: LD_INT 0
47404: PPUSH
47405: PPUSH
47406: PPUSH
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
// if not turrets or not factories then
47412: LD_VAR 0 1
47416: NOT
47417: IFTRUE 47426
47419: PUSH
47420: LD_VAR 0 2
47424: NOT
47425: OR
47426: IFFALSE 47430
// exit ;
47428: GO 47737
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47430: LD_ADDR_VAR 0 10
47434: PUSH
47435: LD_INT 5
47437: PUSH
47438: LD_INT 6
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 4
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: LD_INT 5
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 24
47472: PUSH
47473: LD_INT 25
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 23
47482: PUSH
47483: LD_INT 27
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 42
47496: PUSH
47497: LD_INT 43
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 44
47506: PUSH
47507: LD_INT 46
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 45
47516: PUSH
47517: LD_INT 47
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// result := [ ] ;
47534: LD_ADDR_VAR 0 3
47538: PUSH
47539: EMPTY
47540: ST_TO_ADDR
// for i in turrets do
47541: LD_ADDR_VAR 0 4
47545: PUSH
47546: LD_VAR 0 1
47550: PUSH
47551: FOR_IN
47552: IFFALSE 47735
// begin nat := GetNation ( i ) ;
47554: LD_ADDR_VAR 0 7
47558: PUSH
47559: LD_VAR 0 4
47563: PPUSH
47564: CALL_OW 248
47568: ST_TO_ADDR
// weapon := 0 ;
47569: LD_ADDR_VAR 0 8
47573: PUSH
47574: LD_INT 0
47576: ST_TO_ADDR
// if not nat then
47577: LD_VAR 0 7
47581: NOT
47582: IFFALSE 47586
// continue ;
47584: GO 47551
// for j in list [ nat ] do
47586: LD_ADDR_VAR 0 5
47590: PUSH
47591: LD_VAR 0 10
47595: PUSH
47596: LD_VAR 0 7
47600: ARRAY
47601: PUSH
47602: FOR_IN
47603: IFFALSE 47644
// if GetBWeapon ( i ) = j [ 1 ] then
47605: LD_VAR 0 4
47609: PPUSH
47610: CALL_OW 269
47614: PUSH
47615: LD_VAR 0 5
47619: PUSH
47620: LD_INT 1
47622: ARRAY
47623: EQUAL
47624: IFFALSE 47642
// begin weapon := j [ 2 ] ;
47626: LD_ADDR_VAR 0 8
47630: PUSH
47631: LD_VAR 0 5
47635: PUSH
47636: LD_INT 2
47638: ARRAY
47639: ST_TO_ADDR
// break ;
47640: GO 47644
// end ;
47642: GO 47602
47644: POP
47645: POP
// if not weapon then
47646: LD_VAR 0 8
47650: NOT
47651: IFFALSE 47655
// continue ;
47653: GO 47551
// for k in factories do
47655: LD_ADDR_VAR 0 6
47659: PUSH
47660: LD_VAR 0 2
47664: PUSH
47665: FOR_IN
47666: IFFALSE 47731
// begin weapons := AvailableWeaponList ( k ) ;
47668: LD_ADDR_VAR 0 9
47672: PUSH
47673: LD_VAR 0 6
47677: PPUSH
47678: CALL_OW 478
47682: ST_TO_ADDR
// if not weapons then
47683: LD_VAR 0 9
47687: NOT
47688: IFFALSE 47692
// continue ;
47690: GO 47665
// if weapon in weapons then
47692: LD_VAR 0 8
47696: PUSH
47697: LD_VAR 0 9
47701: IN
47702: IFFALSE 47729
// begin result := [ i , weapon ] ;
47704: LD_ADDR_VAR 0 3
47708: PUSH
47709: LD_VAR 0 4
47713: PUSH
47714: LD_VAR 0 8
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: ST_TO_ADDR
// exit ;
47723: POP
47724: POP
47725: POP
47726: POP
47727: GO 47737
// end ; end ;
47729: GO 47665
47731: POP
47732: POP
// end ;
47733: GO 47551
47735: POP
47736: POP
// end ;
47737: LD_VAR 0 3
47741: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47742: LD_INT 0
47744: PPUSH
// if not side or side > 8 then
47745: LD_VAR 0 3
47749: NOT
47750: IFTRUE 47762
47752: PUSH
47753: LD_VAR 0 3
47757: PUSH
47758: LD_INT 8
47760: GREATER
47761: OR
47762: IFFALSE 47766
// exit ;
47764: GO 47825
// if not range then
47766: LD_VAR 0 4
47770: NOT
47771: IFFALSE 47782
// range := - 12 ;
47773: LD_ADDR_VAR 0 4
47777: PUSH
47778: LD_INT 12
47780: NEG
47781: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47782: LD_VAR 0 1
47786: PPUSH
47787: LD_VAR 0 2
47791: PPUSH
47792: LD_VAR 0 3
47796: PPUSH
47797: LD_VAR 0 4
47801: PPUSH
47802: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_VAR 0 2
47815: PPUSH
47816: LD_VAR 0 3
47820: PPUSH
47821: CALL_OW 331
// end ;
47825: LD_VAR 0 5
47829: RET
// export function Video ( mode ) ; begin
47830: LD_INT 0
47832: PPUSH
// ingame_video = mode ;
47833: LD_ADDR_OWVAR 52
47837: PUSH
47838: LD_VAR 0 1
47842: ST_TO_ADDR
// interface_hidden = mode ;
47843: LD_ADDR_OWVAR 54
47847: PUSH
47848: LD_VAR 0 1
47852: ST_TO_ADDR
// end ;
47853: LD_VAR 0 2
47857: RET
// export function Join ( array , element ) ; begin
47858: LD_INT 0
47860: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47861: LD_ADDR_VAR 0 3
47865: PUSH
47866: LD_VAR 0 1
47870: PPUSH
47871: LD_VAR 0 1
47875: PUSH
47876: LD_INT 1
47878: PLUS
47879: PPUSH
47880: LD_VAR 0 2
47884: PPUSH
47885: CALL_OW 1
47889: ST_TO_ADDR
// end ;
47890: LD_VAR 0 3
47894: RET
// export function JoinUnion ( array , element ) ; begin
47895: LD_INT 0
47897: PPUSH
// result := array union element ;
47898: LD_ADDR_VAR 0 3
47902: PUSH
47903: LD_VAR 0 1
47907: PUSH
47908: LD_VAR 0 2
47912: UNION
47913: ST_TO_ADDR
// end ;
47914: LD_VAR 0 3
47918: RET
// export function GetBehemoths ( side ) ; begin
47919: LD_INT 0
47921: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
47922: LD_ADDR_VAR 0 2
47926: PUSH
47927: LD_INT 22
47929: PUSH
47930: LD_VAR 0 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 31
47941: PUSH
47942: LD_INT 25
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PPUSH
47953: CALL_OW 69
47957: ST_TO_ADDR
// end ;
47958: LD_VAR 0 2
47962: RET
// export function Shuffle ( array ) ; var i , index ; begin
47963: LD_INT 0
47965: PPUSH
47966: PPUSH
47967: PPUSH
// result := [ ] ;
47968: LD_ADDR_VAR 0 2
47972: PUSH
47973: EMPTY
47974: ST_TO_ADDR
// if not array then
47975: LD_VAR 0 1
47979: NOT
47980: IFFALSE 47984
// exit ;
47982: GO 48083
// Randomize ;
47984: CALL_OW 10
// for i = array downto 1 do
47988: LD_ADDR_VAR 0 3
47992: PUSH
47993: DOUBLE
47994: LD_VAR 0 1
47998: INC
47999: ST_TO_ADDR
48000: LD_INT 1
48002: PUSH
48003: FOR_DOWNTO
48004: IFFALSE 48081
// begin index := rand ( 1 , array ) ;
48006: LD_ADDR_VAR 0 4
48010: PUSH
48011: LD_INT 1
48013: PPUSH
48014: LD_VAR 0 1
48018: PPUSH
48019: CALL_OW 12
48023: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48024: LD_ADDR_VAR 0 2
48028: PUSH
48029: LD_VAR 0 2
48033: PPUSH
48034: LD_VAR 0 2
48038: PUSH
48039: LD_INT 1
48041: PLUS
48042: PPUSH
48043: LD_VAR 0 1
48047: PUSH
48048: LD_VAR 0 4
48052: ARRAY
48053: PPUSH
48054: CALL_OW 2
48058: ST_TO_ADDR
// array := Delete ( array , index ) ;
48059: LD_ADDR_VAR 0 1
48063: PUSH
48064: LD_VAR 0 1
48068: PPUSH
48069: LD_VAR 0 4
48073: PPUSH
48074: CALL_OW 3
48078: ST_TO_ADDR
// end ;
48079: GO 48003
48081: POP
48082: POP
// end ;
48083: LD_VAR 0 2
48087: RET
// export function GetBaseMaterials ( base ) ; begin
48088: LD_INT 0
48090: PPUSH
// result := [ 0 , 0 , 0 ] ;
48091: LD_ADDR_VAR 0 2
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// if not base then
48110: LD_VAR 0 1
48114: NOT
48115: IFFALSE 48119
// exit ;
48117: GO 48168
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48119: LD_ADDR_VAR 0 2
48123: PUSH
48124: LD_VAR 0 1
48128: PPUSH
48129: LD_INT 1
48131: PPUSH
48132: CALL_OW 275
48136: PUSH
48137: LD_VAR 0 1
48141: PPUSH
48142: LD_INT 2
48144: PPUSH
48145: CALL_OW 275
48149: PUSH
48150: LD_VAR 0 1
48154: PPUSH
48155: LD_INT 3
48157: PPUSH
48158: CALL_OW 275
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: LIST
48167: ST_TO_ADDR
// end ;
48168: LD_VAR 0 2
48172: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48173: LD_INT 0
48175: PPUSH
48176: PPUSH
// result := array ;
48177: LD_ADDR_VAR 0 3
48181: PUSH
48182: LD_VAR 0 1
48186: ST_TO_ADDR
// if size >= result then
48187: LD_VAR 0 2
48191: PUSH
48192: LD_VAR 0 3
48196: GREATEREQUAL
48197: IFFALSE 48201
// exit ;
48199: GO 48251
// if size then
48201: LD_VAR 0 2
48205: IFFALSE 48251
// for i := array downto size do
48207: LD_ADDR_VAR 0 4
48211: PUSH
48212: DOUBLE
48213: LD_VAR 0 1
48217: INC
48218: ST_TO_ADDR
48219: LD_VAR 0 2
48223: PUSH
48224: FOR_DOWNTO
48225: IFFALSE 48249
// result := Delete ( result , result ) ;
48227: LD_ADDR_VAR 0 3
48231: PUSH
48232: LD_VAR 0 3
48236: PPUSH
48237: LD_VAR 0 3
48241: PPUSH
48242: CALL_OW 3
48246: ST_TO_ADDR
48247: GO 48224
48249: POP
48250: POP
// end ;
48251: LD_VAR 0 3
48255: RET
// export function ComExit ( unit ) ; var tmp ; begin
48256: LD_INT 0
48258: PPUSH
48259: PPUSH
// if not IsInUnit ( unit ) then
48260: LD_VAR 0 1
48264: PPUSH
48265: CALL_OW 310
48269: NOT
48270: IFFALSE 48274
// exit ;
48272: GO 48334
// tmp := IsInUnit ( unit ) ;
48274: LD_ADDR_VAR 0 3
48278: PUSH
48279: LD_VAR 0 1
48283: PPUSH
48284: CALL_OW 310
48288: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48289: LD_VAR 0 3
48293: PPUSH
48294: CALL_OW 247
48298: PUSH
48299: LD_INT 2
48301: EQUAL
48302: IFFALSE 48315
// ComExitVehicle ( unit ) else
48304: LD_VAR 0 1
48308: PPUSH
48309: CALL_OW 121
48313: GO 48324
// ComExitBuilding ( unit ) ;
48315: LD_VAR 0 1
48319: PPUSH
48320: CALL_OW 122
// result := tmp ;
48324: LD_ADDR_VAR 0 2
48328: PUSH
48329: LD_VAR 0 3
48333: ST_TO_ADDR
// end ;
48334: LD_VAR 0 2
48338: RET
// export function ComExitAll ( units ) ; var i ; begin
48339: LD_INT 0
48341: PPUSH
48342: PPUSH
// if not units then
48343: LD_VAR 0 1
48347: NOT
48348: IFFALSE 48352
// exit ;
48350: GO 48378
// for i in units do
48352: LD_ADDR_VAR 0 3
48356: PUSH
48357: LD_VAR 0 1
48361: PUSH
48362: FOR_IN
48363: IFFALSE 48376
// ComExit ( i ) ;
48365: LD_VAR 0 3
48369: PPUSH
48370: CALL 48256 0 1
48374: GO 48362
48376: POP
48377: POP
// end ;
48378: LD_VAR 0 2
48382: RET
// export function ResetHc ; begin
48383: LD_INT 0
48385: PPUSH
// InitHc ;
48386: CALL_OW 19
// hc_importance := 0 ;
48390: LD_ADDR_OWVAR 32
48394: PUSH
48395: LD_INT 0
48397: ST_TO_ADDR
// end ;
48398: LD_VAR 0 1
48402: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48403: LD_INT 0
48405: PPUSH
48406: PPUSH
48407: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48408: LD_ADDR_VAR 0 6
48412: PUSH
48413: LD_VAR 0 1
48417: PUSH
48418: LD_VAR 0 3
48422: PLUS
48423: PUSH
48424: LD_INT 2
48426: DIV
48427: ST_TO_ADDR
// if _x < 0 then
48428: LD_VAR 0 6
48432: PUSH
48433: LD_INT 0
48435: LESS
48436: IFFALSE 48453
// _x := _x * - 1 ;
48438: LD_ADDR_VAR 0 6
48442: PUSH
48443: LD_VAR 0 6
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: MUL
48452: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48453: LD_ADDR_VAR 0 7
48457: PUSH
48458: LD_VAR 0 2
48462: PUSH
48463: LD_VAR 0 4
48467: PLUS
48468: PUSH
48469: LD_INT 2
48471: DIV
48472: ST_TO_ADDR
// if _y < 0 then
48473: LD_VAR 0 7
48477: PUSH
48478: LD_INT 0
48480: LESS
48481: IFFALSE 48498
// _y := _y * - 1 ;
48483: LD_ADDR_VAR 0 7
48487: PUSH
48488: LD_VAR 0 7
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: MUL
48497: ST_TO_ADDR
// result := [ _x , _y ] ;
48498: LD_ADDR_VAR 0 5
48502: PUSH
48503: LD_VAR 0 6
48507: PUSH
48508: LD_VAR 0 7
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: ST_TO_ADDR
// end ;
48517: LD_VAR 0 5
48521: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48522: LD_INT 0
48524: PPUSH
48525: PPUSH
48526: PPUSH
48527: PPUSH
// task := GetTaskList ( unit ) ;
48528: LD_ADDR_VAR 0 7
48532: PUSH
48533: LD_VAR 0 1
48537: PPUSH
48538: CALL_OW 437
48542: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48543: LD_VAR 0 7
48547: NOT
48548: IFFALSE 48567
48550: PUSH
48551: LD_VAR 0 1
48555: PPUSH
48556: LD_VAR 0 2
48560: PPUSH
48561: CALL_OW 308
48565: NOT
48566: AND
48567: IFFALSE 48571
// exit ;
48569: GO 48689
// if IsInArea ( unit , area ) then
48571: LD_VAR 0 1
48575: PPUSH
48576: LD_VAR 0 2
48580: PPUSH
48581: CALL_OW 308
48585: IFFALSE 48603
// begin ComMoveToArea ( unit , goAway ) ;
48587: LD_VAR 0 1
48591: PPUSH
48592: LD_VAR 0 3
48596: PPUSH
48597: CALL_OW 113
// exit ;
48601: GO 48689
// end ; if task [ 1 ] [ 1 ] <> M then
48603: LD_VAR 0 7
48607: PUSH
48608: LD_INT 1
48610: ARRAY
48611: PUSH
48612: LD_INT 1
48614: ARRAY
48615: PUSH
48616: LD_STRING M
48618: NONEQUAL
48619: IFFALSE 48623
// exit ;
48621: GO 48689
// x := task [ 1 ] [ 2 ] ;
48623: LD_ADDR_VAR 0 5
48627: PUSH
48628: LD_VAR 0 7
48632: PUSH
48633: LD_INT 1
48635: ARRAY
48636: PUSH
48637: LD_INT 2
48639: ARRAY
48640: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48641: LD_ADDR_VAR 0 6
48645: PUSH
48646: LD_VAR 0 7
48650: PUSH
48651: LD_INT 1
48653: ARRAY
48654: PUSH
48655: LD_INT 3
48657: ARRAY
48658: ST_TO_ADDR
// if InArea ( x , y , area ) then
48659: LD_VAR 0 5
48663: PPUSH
48664: LD_VAR 0 6
48668: PPUSH
48669: LD_VAR 0 2
48673: PPUSH
48674: CALL_OW 309
48678: IFFALSE 48689
// ComStop ( unit ) ;
48680: LD_VAR 0 1
48684: PPUSH
48685: CALL_OW 141
// end ;
48689: LD_VAR 0 4
48693: RET
// export function Abs ( value ) ; begin
48694: LD_INT 0
48696: PPUSH
// result := value ;
48697: LD_ADDR_VAR 0 2
48701: PUSH
48702: LD_VAR 0 1
48706: ST_TO_ADDR
// if value < 0 then
48707: LD_VAR 0 1
48711: PUSH
48712: LD_INT 0
48714: LESS
48715: IFFALSE 48732
// result := value * - 1 ;
48717: LD_ADDR_VAR 0 2
48721: PUSH
48722: LD_VAR 0 1
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: MUL
48731: ST_TO_ADDR
// end ;
48732: LD_VAR 0 2
48736: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48737: LD_INT 0
48739: PPUSH
48740: PPUSH
48741: PPUSH
48742: PPUSH
48743: PPUSH
48744: PPUSH
48745: PPUSH
48746: PPUSH
// if not unit or not building then
48747: LD_VAR 0 1
48751: NOT
48752: IFTRUE 48761
48754: PUSH
48755: LD_VAR 0 2
48759: NOT
48760: OR
48761: IFFALSE 48765
// exit ;
48763: GO 48993
// x := GetX ( building ) ;
48765: LD_ADDR_VAR 0 4
48769: PUSH
48770: LD_VAR 0 2
48774: PPUSH
48775: CALL_OW 250
48779: ST_TO_ADDR
// y := GetY ( building ) ;
48780: LD_ADDR_VAR 0 6
48784: PUSH
48785: LD_VAR 0 2
48789: PPUSH
48790: CALL_OW 251
48794: ST_TO_ADDR
// d := GetDir ( building ) ;
48795: LD_ADDR_VAR 0 8
48799: PUSH
48800: LD_VAR 0 2
48804: PPUSH
48805: CALL_OW 254
48809: ST_TO_ADDR
// r := 4 ;
48810: LD_ADDR_VAR 0 9
48814: PUSH
48815: LD_INT 4
48817: ST_TO_ADDR
// for i := 1 to 5 do
48818: LD_ADDR_VAR 0 10
48822: PUSH
48823: DOUBLE
48824: LD_INT 1
48826: DEC
48827: ST_TO_ADDR
48828: LD_INT 5
48830: PUSH
48831: FOR_TO
48832: IFFALSE 48991
// begin _x := ShiftX ( x , d , r + i ) ;
48834: LD_ADDR_VAR 0 5
48838: PUSH
48839: LD_VAR 0 4
48843: PPUSH
48844: LD_VAR 0 8
48848: PPUSH
48849: LD_VAR 0 9
48853: PUSH
48854: LD_VAR 0 10
48858: PLUS
48859: PPUSH
48860: CALL_OW 272
48864: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48865: LD_ADDR_VAR 0 7
48869: PUSH
48870: LD_VAR 0 6
48874: PPUSH
48875: LD_VAR 0 8
48879: PPUSH
48880: LD_VAR 0 9
48884: PUSH
48885: LD_VAR 0 10
48889: PLUS
48890: PPUSH
48891: CALL_OW 273
48895: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48896: LD_VAR 0 5
48900: PPUSH
48901: LD_VAR 0 7
48905: PPUSH
48906: CALL_OW 488
48910: IFFALSE 48945
48912: PUSH
48913: LD_VAR 0 5
48917: PPUSH
48918: LD_VAR 0 7
48922: PPUSH
48923: CALL_OW 428
48927: PPUSH
48928: CALL_OW 247
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: IN
48943: NOT
48944: AND
48945: IFFALSE 48989
// begin ComMoveXY ( unit , _x , _y ) ;
48947: LD_VAR 0 1
48951: PPUSH
48952: LD_VAR 0 5
48956: PPUSH
48957: LD_VAR 0 7
48961: PPUSH
48962: CALL_OW 111
// result := [ _x , _y ] ;
48966: LD_ADDR_VAR 0 3
48970: PUSH
48971: LD_VAR 0 5
48975: PUSH
48976: LD_VAR 0 7
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// exit ;
48985: POP
48986: POP
48987: GO 48993
// end ; end ;
48989: GO 48831
48991: POP
48992: POP
// end ;
48993: LD_VAR 0 3
48997: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48998: LD_INT 0
49000: PPUSH
49001: PPUSH
49002: PPUSH
// result := 0 ;
49003: LD_ADDR_VAR 0 3
49007: PUSH
49008: LD_INT 0
49010: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49011: LD_VAR 0 1
49015: PUSH
49016: LD_INT 0
49018: LESS
49019: IFTRUE 49031
49021: PUSH
49022: LD_VAR 0 1
49026: PUSH
49027: LD_INT 8
49029: GREATER
49030: OR
49031: IFTRUE 49043
49033: PUSH
49034: LD_VAR 0 2
49038: PUSH
49039: LD_INT 0
49041: LESS
49042: OR
49043: IFTRUE 49055
49045: PUSH
49046: LD_VAR 0 2
49050: PUSH
49051: LD_INT 8
49053: GREATER
49054: OR
49055: IFFALSE 49059
// exit ;
49057: GO 49134
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49059: LD_ADDR_VAR 0 4
49063: PUSH
49064: LD_INT 22
49066: PUSH
49067: LD_VAR 0 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PPUSH
49076: CALL_OW 69
49080: PUSH
49081: FOR_IN
49082: IFFALSE 49132
// begin un := UnitShoot ( i ) ;
49084: LD_ADDR_VAR 0 5
49088: PUSH
49089: LD_VAR 0 4
49093: PPUSH
49094: CALL_OW 504
49098: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49099: LD_VAR 0 5
49103: PPUSH
49104: CALL_OW 255
49108: PUSH
49109: LD_VAR 0 1
49113: EQUAL
49114: IFFALSE 49130
// begin result := un ;
49116: LD_ADDR_VAR 0 3
49120: PUSH
49121: LD_VAR 0 5
49125: ST_TO_ADDR
// exit ;
49126: POP
49127: POP
49128: GO 49134
// end ; end ;
49130: GO 49081
49132: POP
49133: POP
// end ;
49134: LD_VAR 0 3
49138: RET
// export function GetCargoBay ( units ) ; begin
49139: LD_INT 0
49141: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49142: LD_ADDR_VAR 0 2
49146: PUSH
49147: LD_VAR 0 1
49151: PPUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 34
49157: PUSH
49158: LD_INT 12
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 34
49167: PUSH
49168: LD_INT 51
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 34
49177: PUSH
49178: LD_INT 32
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 34
49187: PUSH
49188: LD_INT 89
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: PPUSH
49202: CALL_OW 72
49206: ST_TO_ADDR
// end ;
49207: LD_VAR 0 2
49211: RET
// export function Negate ( value ) ; begin
49212: LD_INT 0
49214: PPUSH
// result := not value ;
49215: LD_ADDR_VAR 0 2
49219: PUSH
49220: LD_VAR 0 1
49224: NOT
49225: ST_TO_ADDR
// end ;
49226: LD_VAR 0 2
49230: RET
// export function Inc ( value ) ; begin
49231: LD_INT 0
49233: PPUSH
// result := value + 1 ;
49234: LD_ADDR_VAR 0 2
49238: PUSH
49239: LD_VAR 0 1
49243: PUSH
49244: LD_INT 1
49246: PLUS
49247: ST_TO_ADDR
// end ;
49248: LD_VAR 0 2
49252: RET
// export function Dec ( value ) ; begin
49253: LD_INT 0
49255: PPUSH
// result := value - 1 ;
49256: LD_ADDR_VAR 0 2
49260: PUSH
49261: LD_VAR 0 1
49265: PUSH
49266: LD_INT 1
49268: MINUS
49269: ST_TO_ADDR
// end ;
49270: LD_VAR 0 2
49274: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49275: LD_INT 0
49277: PPUSH
49278: PPUSH
49279: PPUSH
49280: PPUSH
49281: PPUSH
49282: PPUSH
49283: PPUSH
49284: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49285: LD_VAR 0 1
49289: PPUSH
49290: LD_VAR 0 2
49294: PPUSH
49295: CALL_OW 488
49299: NOT
49300: IFTRUE 49319
49302: PUSH
49303: LD_VAR 0 3
49307: PPUSH
49308: LD_VAR 0 4
49312: PPUSH
49313: CALL_OW 488
49317: NOT
49318: OR
49319: IFFALSE 49332
// begin result := - 1 ;
49321: LD_ADDR_VAR 0 5
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: ST_TO_ADDR
// exit ;
49330: GO 49567
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49332: LD_ADDR_VAR 0 12
49336: PUSH
49337: LD_VAR 0 1
49341: PPUSH
49342: LD_VAR 0 2
49346: PPUSH
49347: LD_VAR 0 3
49351: PPUSH
49352: LD_VAR 0 4
49356: PPUSH
49357: CALL 48403 0 4
49361: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49362: LD_ADDR_VAR 0 11
49366: PUSH
49367: LD_VAR 0 1
49371: PPUSH
49372: LD_VAR 0 2
49376: PPUSH
49377: LD_VAR 0 12
49381: PUSH
49382: LD_INT 1
49384: ARRAY
49385: PPUSH
49386: LD_VAR 0 12
49390: PUSH
49391: LD_INT 2
49393: ARRAY
49394: PPUSH
49395: CALL_OW 298
49399: ST_TO_ADDR
// distance := 9999 ;
49400: LD_ADDR_VAR 0 10
49404: PUSH
49405: LD_INT 9999
49407: ST_TO_ADDR
// for i := 0 to 5 do
49408: LD_ADDR_VAR 0 6
49412: PUSH
49413: DOUBLE
49414: LD_INT 0
49416: DEC
49417: ST_TO_ADDR
49418: LD_INT 5
49420: PUSH
49421: FOR_TO
49422: IFFALSE 49565
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49424: LD_ADDR_VAR 0 7
49428: PUSH
49429: LD_VAR 0 1
49433: PPUSH
49434: LD_VAR 0 6
49438: PPUSH
49439: LD_VAR 0 11
49443: PPUSH
49444: CALL_OW 272
49448: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49449: LD_ADDR_VAR 0 8
49453: PUSH
49454: LD_VAR 0 2
49458: PPUSH
49459: LD_VAR 0 6
49463: PPUSH
49464: LD_VAR 0 11
49468: PPUSH
49469: CALL_OW 273
49473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49474: LD_VAR 0 7
49478: PPUSH
49479: LD_VAR 0 8
49483: PPUSH
49484: CALL_OW 488
49488: NOT
49489: IFFALSE 49493
// continue ;
49491: GO 49421
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49493: LD_ADDR_VAR 0 9
49497: PUSH
49498: LD_VAR 0 12
49502: PUSH
49503: LD_INT 1
49505: ARRAY
49506: PPUSH
49507: LD_VAR 0 12
49511: PUSH
49512: LD_INT 2
49514: ARRAY
49515: PPUSH
49516: LD_VAR 0 7
49520: PPUSH
49521: LD_VAR 0 8
49525: PPUSH
49526: CALL_OW 298
49530: ST_TO_ADDR
// if tmp < distance then
49531: LD_VAR 0 9
49535: PUSH
49536: LD_VAR 0 10
49540: LESS
49541: IFFALSE 49563
// begin result := i ;
49543: LD_ADDR_VAR 0 5
49547: PUSH
49548: LD_VAR 0 6
49552: ST_TO_ADDR
// distance := tmp ;
49553: LD_ADDR_VAR 0 10
49557: PUSH
49558: LD_VAR 0 9
49562: ST_TO_ADDR
// end ; end ;
49563: GO 49421
49565: POP
49566: POP
// end ;
49567: LD_VAR 0 5
49571: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49572: LD_INT 0
49574: PPUSH
49575: PPUSH
// if not driver or not IsInUnit ( driver ) then
49576: LD_VAR 0 1
49580: NOT
49581: IFTRUE 49595
49583: PUSH
49584: LD_VAR 0 1
49588: PPUSH
49589: CALL_OW 310
49593: NOT
49594: OR
49595: IFFALSE 49599
// exit ;
49597: GO 49689
// vehicle := IsInUnit ( driver ) ;
49599: LD_ADDR_VAR 0 3
49603: PUSH
49604: LD_VAR 0 1
49608: PPUSH
49609: CALL_OW 310
49613: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49614: LD_VAR 0 1
49618: PPUSH
49619: LD_STRING \
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: PUSH
49649: LD_STRING E
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_VAR 0 3
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PPUSH
49685: CALL_OW 446
// end ;
49689: LD_VAR 0 2
49693: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49694: LD_INT 0
49696: PPUSH
49697: PPUSH
// if not driver or not IsInUnit ( driver ) then
49698: LD_VAR 0 1
49702: NOT
49703: IFTRUE 49717
49705: PUSH
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 310
49715: NOT
49716: OR
49717: IFFALSE 49721
// exit ;
49719: GO 49811
// vehicle := IsInUnit ( driver ) ;
49721: LD_ADDR_VAR 0 3
49725: PUSH
49726: LD_VAR 0 1
49730: PPUSH
49731: CALL_OW 310
49735: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49736: LD_VAR 0 1
49740: PPUSH
49741: LD_STRING \
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: PUSH
49771: LD_STRING E
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_VAR 0 3
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PPUSH
49807: CALL_OW 447
// end ;
49811: LD_VAR 0 2
49815: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49816: LD_INT 0
49818: PPUSH
49819: PPUSH
49820: PPUSH
// tmp := [ ] ;
49821: LD_ADDR_VAR 0 5
49825: PUSH
49826: EMPTY
49827: ST_TO_ADDR
// for i in units do
49828: LD_ADDR_VAR 0 4
49832: PUSH
49833: LD_VAR 0 1
49837: PUSH
49838: FOR_IN
49839: IFFALSE 49877
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49841: LD_ADDR_VAR 0 5
49845: PUSH
49846: LD_VAR 0 5
49850: PPUSH
49851: LD_VAR 0 5
49855: PUSH
49856: LD_INT 1
49858: PLUS
49859: PPUSH
49860: LD_VAR 0 4
49864: PPUSH
49865: CALL_OW 256
49869: PPUSH
49870: CALL_OW 2
49874: ST_TO_ADDR
49875: GO 49838
49877: POP
49878: POP
// if not tmp then
49879: LD_VAR 0 5
49883: NOT
49884: IFFALSE 49888
// exit ;
49886: GO 49936
// if asc then
49888: LD_VAR 0 2
49892: IFFALSE 49916
// result := SortListByListAsc ( units , tmp ) else
49894: LD_ADDR_VAR 0 3
49898: PUSH
49899: LD_VAR 0 1
49903: PPUSH
49904: LD_VAR 0 5
49908: PPUSH
49909: CALL_OW 76
49913: ST_TO_ADDR
49914: GO 49936
// result := SortListByListDesc ( units , tmp ) ;
49916: LD_ADDR_VAR 0 3
49920: PUSH
49921: LD_VAR 0 1
49925: PPUSH
49926: LD_VAR 0 5
49930: PPUSH
49931: CALL_OW 77
49935: ST_TO_ADDR
// end ;
49936: LD_VAR 0 3
49940: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49941: LD_INT 0
49943: PPUSH
49944: PPUSH
// task := GetTaskList ( mech ) ;
49945: LD_ADDR_VAR 0 4
49949: PUSH
49950: LD_VAR 0 1
49954: PPUSH
49955: CALL_OW 437
49959: ST_TO_ADDR
// if not task then
49960: LD_VAR 0 4
49964: NOT
49965: IFFALSE 49969
// exit ;
49967: GO 50013
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49969: LD_ADDR_VAR 0 3
49973: PUSH
49974: LD_VAR 0 4
49978: PUSH
49979: LD_INT 1
49981: ARRAY
49982: PUSH
49983: LD_INT 1
49985: ARRAY
49986: PUSH
49987: LD_STRING r
49989: EQUAL
49990: IFFALSE 50012
49992: PUSH
49993: LD_VAR 0 4
49997: PUSH
49998: LD_INT 1
50000: ARRAY
50001: PUSH
50002: LD_INT 4
50004: ARRAY
50005: PUSH
50006: LD_VAR 0 2
50010: EQUAL
50011: AND
50012: ST_TO_ADDR
// end ;
50013: LD_VAR 0 3
50017: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50018: LD_INT 0
50020: PPUSH
// SetDir ( unit , d ) ;
50021: LD_VAR 0 1
50025: PPUSH
50026: LD_VAR 0 4
50030: PPUSH
50031: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50035: LD_ADDR_VAR 0 6
50039: PUSH
50040: LD_VAR 0 1
50044: PPUSH
50045: LD_VAR 0 2
50049: PPUSH
50050: LD_VAR 0 3
50054: PPUSH
50055: LD_VAR 0 5
50059: PPUSH
50060: CALL_OW 48
50064: ST_TO_ADDR
// end ;
50065: LD_VAR 0 6
50069: RET
// export function ToNaturalNumber ( number ) ; begin
50070: LD_INT 0
50072: PPUSH
// result := number div 1 ;
50073: LD_ADDR_VAR 0 2
50077: PUSH
50078: LD_VAR 0 1
50082: PUSH
50083: LD_INT 1
50085: DIV
50086: ST_TO_ADDR
// if number < 0 then
50087: LD_VAR 0 1
50091: PUSH
50092: LD_INT 0
50094: LESS
50095: IFFALSE 50105
// result := 0 ;
50097: LD_ADDR_VAR 0 2
50101: PUSH
50102: LD_INT 0
50104: ST_TO_ADDR
// end ;
50105: LD_VAR 0 2
50109: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50110: LD_INT 0
50112: PPUSH
50113: PPUSH
50114: PPUSH
// if not buildings then
50115: LD_VAR 0 1
50119: NOT
50120: IFFALSE 50124
// exit ;
50122: GO 50239
// tmp := [ ] ;
50124: LD_ADDR_VAR 0 5
50128: PUSH
50129: EMPTY
50130: ST_TO_ADDR
// for b in buildings do
50131: LD_ADDR_VAR 0 4
50135: PUSH
50136: LD_VAR 0 1
50140: PUSH
50141: FOR_IN
50142: IFFALSE 50180
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50144: LD_ADDR_VAR 0 5
50148: PUSH
50149: LD_VAR 0 5
50153: PPUSH
50154: LD_VAR 0 5
50158: PUSH
50159: LD_INT 1
50161: PLUS
50162: PPUSH
50163: LD_VAR 0 4
50167: PPUSH
50168: CALL_OW 266
50172: PPUSH
50173: CALL_OW 1
50177: ST_TO_ADDR
50178: GO 50141
50180: POP
50181: POP
// if not tmp then
50182: LD_VAR 0 5
50186: NOT
50187: IFFALSE 50191
// exit ;
50189: GO 50239
// if asc then
50191: LD_VAR 0 2
50195: IFFALSE 50219
// result := SortListByListAsc ( buildings , tmp ) else
50197: LD_ADDR_VAR 0 3
50201: PUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: LD_VAR 0 5
50211: PPUSH
50212: CALL_OW 76
50216: ST_TO_ADDR
50217: GO 50239
// result := SortListByListDesc ( buildings , tmp ) ;
50219: LD_ADDR_VAR 0 3
50223: PUSH
50224: LD_VAR 0 1
50228: PPUSH
50229: LD_VAR 0 5
50233: PPUSH
50234: CALL_OW 77
50238: ST_TO_ADDR
// end ;
50239: LD_VAR 0 3
50243: RET
// export function SortByClass ( units , class ) ; var un ; begin
50244: LD_INT 0
50246: PPUSH
50247: PPUSH
// if not units or not class then
50248: LD_VAR 0 1
50252: NOT
50253: IFTRUE 50262
50255: PUSH
50256: LD_VAR 0 2
50260: NOT
50261: OR
50262: IFFALSE 50266
// exit ;
50264: GO 50361
// result := [ ] ;
50266: LD_ADDR_VAR 0 3
50270: PUSH
50271: EMPTY
50272: ST_TO_ADDR
// for un in units do
50273: LD_ADDR_VAR 0 4
50277: PUSH
50278: LD_VAR 0 1
50282: PUSH
50283: FOR_IN
50284: IFFALSE 50359
// if GetClass ( un ) = class then
50286: LD_VAR 0 4
50290: PPUSH
50291: CALL_OW 257
50295: PUSH
50296: LD_VAR 0 2
50300: EQUAL
50301: IFFALSE 50328
// result := Insert ( result , 1 , un ) else
50303: LD_ADDR_VAR 0 3
50307: PUSH
50308: LD_VAR 0 3
50312: PPUSH
50313: LD_INT 1
50315: PPUSH
50316: LD_VAR 0 4
50320: PPUSH
50321: CALL_OW 2
50325: ST_TO_ADDR
50326: GO 50357
// result := Replace ( result , result + 1 , un ) ;
50328: LD_ADDR_VAR 0 3
50332: PUSH
50333: LD_VAR 0 3
50337: PPUSH
50338: LD_VAR 0 3
50342: PUSH
50343: LD_INT 1
50345: PLUS
50346: PPUSH
50347: LD_VAR 0 4
50351: PPUSH
50352: CALL_OW 1
50356: ST_TO_ADDR
50357: GO 50283
50359: POP
50360: POP
// end ;
50361: LD_VAR 0 3
50365: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50366: LD_INT 0
50368: PPUSH
50369: PPUSH
50370: PPUSH
50371: PPUSH
50372: PPUSH
50373: PPUSH
50374: PPUSH
// result := [ ] ;
50375: LD_ADDR_VAR 0 4
50379: PUSH
50380: EMPTY
50381: ST_TO_ADDR
// if x - r < 0 then
50382: LD_VAR 0 1
50386: PUSH
50387: LD_VAR 0 3
50391: MINUS
50392: PUSH
50393: LD_INT 0
50395: LESS
50396: IFFALSE 50408
// min_x := 0 else
50398: LD_ADDR_VAR 0 8
50402: PUSH
50403: LD_INT 0
50405: ST_TO_ADDR
50406: GO 50424
// min_x := x - r ;
50408: LD_ADDR_VAR 0 8
50412: PUSH
50413: LD_VAR 0 1
50417: PUSH
50418: LD_VAR 0 3
50422: MINUS
50423: ST_TO_ADDR
// if y - r < 0 then
50424: LD_VAR 0 2
50428: PUSH
50429: LD_VAR 0 3
50433: MINUS
50434: PUSH
50435: LD_INT 0
50437: LESS
50438: IFFALSE 50450
// min_y := 0 else
50440: LD_ADDR_VAR 0 7
50444: PUSH
50445: LD_INT 0
50447: ST_TO_ADDR
50448: GO 50466
// min_y := y - r ;
50450: LD_ADDR_VAR 0 7
50454: PUSH
50455: LD_VAR 0 2
50459: PUSH
50460: LD_VAR 0 3
50464: MINUS
50465: ST_TO_ADDR
// max_x := x + r ;
50466: LD_ADDR_VAR 0 9
50470: PUSH
50471: LD_VAR 0 1
50475: PUSH
50476: LD_VAR 0 3
50480: PLUS
50481: ST_TO_ADDR
// max_y := y + r ;
50482: LD_ADDR_VAR 0 10
50486: PUSH
50487: LD_VAR 0 2
50491: PUSH
50492: LD_VAR 0 3
50496: PLUS
50497: ST_TO_ADDR
// for _x = min_x to max_x do
50498: LD_ADDR_VAR 0 5
50502: PUSH
50503: DOUBLE
50504: LD_VAR 0 8
50508: DEC
50509: ST_TO_ADDR
50510: LD_VAR 0 9
50514: PUSH
50515: FOR_TO
50516: IFFALSE 50617
// for _y = min_y to max_y do
50518: LD_ADDR_VAR 0 6
50522: PUSH
50523: DOUBLE
50524: LD_VAR 0 7
50528: DEC
50529: ST_TO_ADDR
50530: LD_VAR 0 10
50534: PUSH
50535: FOR_TO
50536: IFFALSE 50613
// begin if not ValidHex ( _x , _y ) then
50538: LD_VAR 0 5
50542: PPUSH
50543: LD_VAR 0 6
50547: PPUSH
50548: CALL_OW 488
50552: NOT
50553: IFFALSE 50557
// continue ;
50555: GO 50535
// if GetResourceTypeXY ( _x , _y ) then
50557: LD_VAR 0 5
50561: PPUSH
50562: LD_VAR 0 6
50566: PPUSH
50567: CALL_OW 283
50571: IFFALSE 50611
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50573: LD_ADDR_VAR 0 4
50577: PUSH
50578: LD_VAR 0 4
50582: PPUSH
50583: LD_VAR 0 4
50587: PUSH
50588: LD_INT 1
50590: PLUS
50591: PPUSH
50592: LD_VAR 0 5
50596: PUSH
50597: LD_VAR 0 6
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PPUSH
50606: CALL_OW 1
50610: ST_TO_ADDR
// end ;
50611: GO 50535
50613: POP
50614: POP
50615: GO 50515
50617: POP
50618: POP
// end ;
50619: LD_VAR 0 4
50623: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50624: LD_INT 0
50626: PPUSH
50627: PPUSH
50628: PPUSH
50629: PPUSH
50630: PPUSH
50631: PPUSH
50632: PPUSH
50633: PPUSH
// if not units then
50634: LD_VAR 0 1
50638: NOT
50639: IFFALSE 50643
// exit ;
50641: GO 51175
// result := UnitFilter ( units , [ f_ok ] ) ;
50643: LD_ADDR_VAR 0 3
50647: PUSH
50648: LD_VAR 0 1
50652: PPUSH
50653: LD_INT 50
50655: PUSH
50656: EMPTY
50657: LIST
50658: PPUSH
50659: CALL_OW 72
50663: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50664: LD_ADDR_VAR 0 8
50668: PUSH
50669: LD_VAR 0 1
50673: PUSH
50674: LD_INT 1
50676: ARRAY
50677: PPUSH
50678: CALL_OW 255
50682: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50683: LD_ADDR_VAR 0 10
50687: PUSH
50688: LD_INT 29
50690: PUSH
50691: LD_INT 91
50693: PUSH
50694: LD_INT 49
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: LIST
50701: ST_TO_ADDR
// if not result then
50702: LD_VAR 0 3
50706: NOT
50707: IFFALSE 50711
// exit ;
50709: GO 51175
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50711: LD_ADDR_VAR 0 5
50715: PUSH
50716: LD_INT 81
50718: PUSH
50719: LD_VAR 0 8
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PPUSH
50728: CALL_OW 69
50732: ST_TO_ADDR
// for i in result do
50733: LD_ADDR_VAR 0 4
50737: PUSH
50738: LD_VAR 0 3
50742: PUSH
50743: FOR_IN
50744: IFFALSE 51173
// begin tag := GetTag ( i ) + 1 ;
50746: LD_ADDR_VAR 0 9
50750: PUSH
50751: LD_VAR 0 4
50755: PPUSH
50756: CALL_OW 110
50760: PUSH
50761: LD_INT 1
50763: PLUS
50764: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50765: LD_ADDR_VAR 0 7
50769: PUSH
50770: LD_VAR 0 4
50774: PPUSH
50775: CALL_OW 250
50779: PPUSH
50780: LD_VAR 0 4
50784: PPUSH
50785: CALL_OW 251
50789: PPUSH
50790: LD_INT 4
50792: PPUSH
50793: CALL 50366 0 3
50797: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50798: LD_VAR 0 4
50802: PPUSH
50803: CALL_OW 247
50807: PUSH
50808: LD_INT 2
50810: EQUAL
50811: IFFALSE 50823
50813: PUSH
50814: LD_VAR 0 7
50818: PUSH
50819: LD_INT 2
50821: GREATER
50822: AND
50823: IFFALSE 50843
50825: PUSH
50826: LD_VAR 0 4
50830: PPUSH
50831: CALL_OW 264
50835: PUSH
50836: LD_VAR 0 10
50840: IN
50841: NOT
50842: AND
50843: IFFALSE 50882
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50845: LD_VAR 0 4
50849: PPUSH
50850: LD_VAR 0 7
50854: PUSH
50855: LD_INT 1
50857: ARRAY
50858: PUSH
50859: LD_INT 1
50861: ARRAY
50862: PPUSH
50863: LD_VAR 0 7
50867: PUSH
50868: LD_INT 1
50870: ARRAY
50871: PUSH
50872: LD_INT 2
50874: ARRAY
50875: PPUSH
50876: CALL_OW 116
50880: GO 51171
// if path > tag then
50882: LD_VAR 0 2
50886: PUSH
50887: LD_VAR 0 9
50891: GREATER
50892: IFFALSE 51100
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50894: LD_ADDR_VAR 0 6
50898: PUSH
50899: LD_VAR 0 5
50903: PPUSH
50904: LD_INT 91
50906: PUSH
50907: LD_VAR 0 4
50911: PUSH
50912: LD_INT 8
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: PPUSH
50920: CALL_OW 72
50924: ST_TO_ADDR
// if nearEnemy then
50925: LD_VAR 0 6
50929: IFFALSE 50998
// begin if GetWeapon ( i ) = ru_time_lapser then
50931: LD_VAR 0 4
50935: PPUSH
50936: CALL_OW 264
50940: PUSH
50941: LD_INT 49
50943: EQUAL
50944: IFFALSE 50972
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50946: LD_VAR 0 4
50950: PPUSH
50951: LD_VAR 0 6
50955: PPUSH
50956: LD_VAR 0 4
50960: PPUSH
50961: CALL_OW 74
50965: PPUSH
50966: CALL_OW 112
50970: GO 50996
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50972: LD_VAR 0 4
50976: PPUSH
50977: LD_VAR 0 6
50981: PPUSH
50982: LD_VAR 0 4
50986: PPUSH
50987: CALL_OW 74
50991: PPUSH
50992: CALL 52256 0 2
// end else
50996: GO 51098
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50998: LD_VAR 0 4
51002: PPUSH
51003: LD_VAR 0 2
51007: PUSH
51008: LD_VAR 0 9
51012: ARRAY
51013: PUSH
51014: LD_INT 1
51016: ARRAY
51017: PPUSH
51018: LD_VAR 0 2
51022: PUSH
51023: LD_VAR 0 9
51027: ARRAY
51028: PUSH
51029: LD_INT 2
51031: ARRAY
51032: PPUSH
51033: CALL_OW 297
51037: PUSH
51038: LD_INT 6
51040: GREATER
51041: IFFALSE 51084
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51043: LD_VAR 0 4
51047: PPUSH
51048: LD_VAR 0 2
51052: PUSH
51053: LD_VAR 0 9
51057: ARRAY
51058: PUSH
51059: LD_INT 1
51061: ARRAY
51062: PPUSH
51063: LD_VAR 0 2
51067: PUSH
51068: LD_VAR 0 9
51072: ARRAY
51073: PUSH
51074: LD_INT 2
51076: ARRAY
51077: PPUSH
51078: CALL_OW 114
51082: GO 51098
// SetTag ( i , tag ) ;
51084: LD_VAR 0 4
51088: PPUSH
51089: LD_VAR 0 9
51093: PPUSH
51094: CALL_OW 109
// end else
51098: GO 51171
// if enemy then
51100: LD_VAR 0 5
51104: IFFALSE 51171
// begin if GetWeapon ( i ) = ru_time_lapser then
51106: LD_VAR 0 4
51110: PPUSH
51111: CALL_OW 264
51115: PUSH
51116: LD_INT 49
51118: EQUAL
51119: IFFALSE 51147
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51121: LD_VAR 0 4
51125: PPUSH
51126: LD_VAR 0 5
51130: PPUSH
51131: LD_VAR 0 4
51135: PPUSH
51136: CALL_OW 74
51140: PPUSH
51141: CALL_OW 112
51145: GO 51171
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51147: LD_VAR 0 4
51151: PPUSH
51152: LD_VAR 0 5
51156: PPUSH
51157: LD_VAR 0 4
51161: PPUSH
51162: CALL_OW 74
51166: PPUSH
51167: CALL 52256 0 2
// end ; end ;
51171: GO 50743
51173: POP
51174: POP
// end ;
51175: LD_VAR 0 3
51179: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51180: LD_INT 0
51182: PPUSH
51183: PPUSH
51184: PPUSH
// if not unit or IsInUnit ( unit ) then
51185: LD_VAR 0 1
51189: NOT
51190: IFTRUE 51203
51192: PUSH
51193: LD_VAR 0 1
51197: PPUSH
51198: CALL_OW 310
51202: OR
51203: IFFALSE 51207
// exit ;
51205: GO 51298
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51207: LD_ADDR_VAR 0 4
51211: PUSH
51212: LD_VAR 0 1
51216: PPUSH
51217: CALL_OW 250
51221: PPUSH
51222: LD_VAR 0 2
51226: PPUSH
51227: LD_INT 1
51229: PPUSH
51230: CALL_OW 272
51234: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51235: LD_ADDR_VAR 0 5
51239: PUSH
51240: LD_VAR 0 1
51244: PPUSH
51245: CALL_OW 251
51249: PPUSH
51250: LD_VAR 0 2
51254: PPUSH
51255: LD_INT 1
51257: PPUSH
51258: CALL_OW 273
51262: ST_TO_ADDR
// if ValidHex ( x , y ) then
51263: LD_VAR 0 4
51267: PPUSH
51268: LD_VAR 0 5
51272: PPUSH
51273: CALL_OW 488
51277: IFFALSE 51298
// ComTurnXY ( unit , x , y ) ;
51279: LD_VAR 0 1
51283: PPUSH
51284: LD_VAR 0 4
51288: PPUSH
51289: LD_VAR 0 5
51293: PPUSH
51294: CALL_OW 118
// end ;
51298: LD_VAR 0 3
51302: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51303: LD_INT 0
51305: PPUSH
51306: PPUSH
// result := false ;
51307: LD_ADDR_VAR 0 3
51311: PUSH
51312: LD_INT 0
51314: ST_TO_ADDR
// if not units then
51315: LD_VAR 0 2
51319: NOT
51320: IFFALSE 51324
// exit ;
51322: GO 51369
// for i in units do
51324: LD_ADDR_VAR 0 4
51328: PUSH
51329: LD_VAR 0 2
51333: PUSH
51334: FOR_IN
51335: IFFALSE 51367
// if See ( side , i ) then
51337: LD_VAR 0 1
51341: PPUSH
51342: LD_VAR 0 4
51346: PPUSH
51347: CALL_OW 292
51351: IFFALSE 51365
// begin result := true ;
51353: LD_ADDR_VAR 0 3
51357: PUSH
51358: LD_INT 1
51360: ST_TO_ADDR
// exit ;
51361: POP
51362: POP
51363: GO 51369
// end ;
51365: GO 51334
51367: POP
51368: POP
// end ;
51369: LD_VAR 0 3
51373: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51374: LD_INT 0
51376: PPUSH
51377: PPUSH
51378: PPUSH
51379: PPUSH
// if not unit or not points then
51380: LD_VAR 0 1
51384: NOT
51385: IFTRUE 51394
51387: PUSH
51388: LD_VAR 0 2
51392: NOT
51393: OR
51394: IFFALSE 51398
// exit ;
51396: GO 51488
// dist := 99999 ;
51398: LD_ADDR_VAR 0 5
51402: PUSH
51403: LD_INT 99999
51405: ST_TO_ADDR
// for i in points do
51406: LD_ADDR_VAR 0 4
51410: PUSH
51411: LD_VAR 0 2
51415: PUSH
51416: FOR_IN
51417: IFFALSE 51486
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51419: LD_ADDR_VAR 0 6
51423: PUSH
51424: LD_VAR 0 1
51428: PPUSH
51429: LD_VAR 0 4
51433: PUSH
51434: LD_INT 1
51436: ARRAY
51437: PPUSH
51438: LD_VAR 0 4
51442: PUSH
51443: LD_INT 2
51445: ARRAY
51446: PPUSH
51447: CALL_OW 297
51451: ST_TO_ADDR
// if tmpDist < dist then
51452: LD_VAR 0 6
51456: PUSH
51457: LD_VAR 0 5
51461: LESS
51462: IFFALSE 51484
// begin result := i ;
51464: LD_ADDR_VAR 0 3
51468: PUSH
51469: LD_VAR 0 4
51473: ST_TO_ADDR
// dist := tmpDist ;
51474: LD_ADDR_VAR 0 5
51478: PUSH
51479: LD_VAR 0 6
51483: ST_TO_ADDR
// end ; end ;
51484: GO 51416
51486: POP
51487: POP
// end ;
51488: LD_VAR 0 3
51492: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51493: LD_INT 0
51495: PPUSH
// uc_side := side ;
51496: LD_ADDR_OWVAR 20
51500: PUSH
51501: LD_VAR 0 1
51505: ST_TO_ADDR
// uc_nation := 3 ;
51506: LD_ADDR_OWVAR 21
51510: PUSH
51511: LD_INT 3
51513: ST_TO_ADDR
// vc_chassis := 25 ;
51514: LD_ADDR_OWVAR 37
51518: PUSH
51519: LD_INT 25
51521: ST_TO_ADDR
// vc_engine := engine_siberite ;
51522: LD_ADDR_OWVAR 39
51526: PUSH
51527: LD_INT 3
51529: ST_TO_ADDR
// vc_control := control_computer ;
51530: LD_ADDR_OWVAR 38
51534: PUSH
51535: LD_INT 3
51537: ST_TO_ADDR
// vc_weapon := 59 ;
51538: LD_ADDR_OWVAR 40
51542: PUSH
51543: LD_INT 59
51545: ST_TO_ADDR
// result := CreateVehicle ;
51546: LD_ADDR_VAR 0 5
51550: PUSH
51551: CALL_OW 45
51555: ST_TO_ADDR
// SetDir ( result , d ) ;
51556: LD_VAR 0 5
51560: PPUSH
51561: LD_VAR 0 4
51565: PPUSH
51566: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51570: LD_VAR 0 5
51574: PPUSH
51575: LD_VAR 0 2
51579: PPUSH
51580: LD_VAR 0 3
51584: PPUSH
51585: LD_INT 0
51587: PPUSH
51588: CALL_OW 48
// end ;
51592: LD_VAR 0 5
51596: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51597: LD_INT 0
51599: PPUSH
51600: PPUSH
51601: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51602: LD_ADDR_VAR 0 2
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51625: LD_VAR 0 1
51629: NOT
51630: IFTRUE 51663
51632: PUSH
51633: LD_VAR 0 1
51637: PPUSH
51638: CALL_OW 264
51642: PUSH
51643: LD_INT 12
51645: PUSH
51646: LD_INT 51
51648: PUSH
51649: LD_INT 32
51651: PUSH
51652: LD_INT 89
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: IN
51661: NOT
51662: OR
51663: IFFALSE 51667
// exit ;
51665: GO 51765
// for i := 1 to 3 do
51667: LD_ADDR_VAR 0 3
51671: PUSH
51672: DOUBLE
51673: LD_INT 1
51675: DEC
51676: ST_TO_ADDR
51677: LD_INT 3
51679: PUSH
51680: FOR_TO
51681: IFFALSE 51763
// begin tmp := GetCargo ( cargo , i ) ;
51683: LD_ADDR_VAR 0 4
51687: PUSH
51688: LD_VAR 0 1
51692: PPUSH
51693: LD_VAR 0 3
51697: PPUSH
51698: CALL_OW 289
51702: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51703: LD_ADDR_VAR 0 2
51707: PUSH
51708: LD_VAR 0 2
51712: PPUSH
51713: LD_VAR 0 3
51717: PPUSH
51718: LD_VAR 0 4
51722: PPUSH
51723: CALL_OW 1
51727: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51728: LD_ADDR_VAR 0 2
51732: PUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: LD_INT 4
51740: PPUSH
51741: LD_VAR 0 2
51745: PUSH
51746: LD_INT 4
51748: ARRAY
51749: PUSH
51750: LD_VAR 0 4
51754: PLUS
51755: PPUSH
51756: CALL_OW 1
51760: ST_TO_ADDR
// end ;
51761: GO 51680
51763: POP
51764: POP
// end ;
51765: LD_VAR 0 2
51769: RET
// export function Length ( array ) ; begin
51770: LD_INT 0
51772: PPUSH
// result := array + 0 ;
51773: LD_ADDR_VAR 0 2
51777: PUSH
51778: LD_VAR 0 1
51782: PUSH
51783: LD_INT 0
51785: PLUS
51786: ST_TO_ADDR
// end ;
51787: LD_VAR 0 2
51791: RET
// export function PrepareArray ( array ) ; begin
51792: LD_INT 0
51794: PPUSH
// result := array diff 0 ;
51795: LD_ADDR_VAR 0 2
51799: PUSH
51800: LD_VAR 0 1
51804: PUSH
51805: LD_INT 0
51807: DIFF
51808: ST_TO_ADDR
// if not result [ 1 ] then
51809: LD_VAR 0 2
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: NOT
51818: IFFALSE 51838
// result := Delete ( result , 1 ) ;
51820: LD_ADDR_VAR 0 2
51824: PUSH
51825: LD_VAR 0 2
51829: PPUSH
51830: LD_INT 1
51832: PPUSH
51833: CALL_OW 3
51837: ST_TO_ADDR
// end ;
51838: LD_VAR 0 2
51842: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51843: LD_INT 0
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
// sibRocketRange := 25 ;
51849: LD_ADDR_VAR 0 6
51853: PUSH
51854: LD_INT 25
51856: ST_TO_ADDR
// result := false ;
51857: LD_ADDR_VAR 0 4
51861: PUSH
51862: LD_INT 0
51864: ST_TO_ADDR
// for i := 0 to 5 do
51865: LD_ADDR_VAR 0 5
51869: PUSH
51870: DOUBLE
51871: LD_INT 0
51873: DEC
51874: ST_TO_ADDR
51875: LD_INT 5
51877: PUSH
51878: FOR_TO
51879: IFFALSE 51946
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51881: LD_VAR 0 1
51885: PPUSH
51886: LD_VAR 0 5
51890: PPUSH
51891: LD_VAR 0 6
51895: PPUSH
51896: CALL_OW 272
51900: PPUSH
51901: LD_VAR 0 2
51905: PPUSH
51906: LD_VAR 0 5
51910: PPUSH
51911: LD_VAR 0 6
51915: PPUSH
51916: CALL_OW 273
51920: PPUSH
51921: LD_VAR 0 3
51925: PPUSH
51926: CALL_OW 309
51930: IFFALSE 51944
// begin result := true ;
51932: LD_ADDR_VAR 0 4
51936: PUSH
51937: LD_INT 1
51939: ST_TO_ADDR
// exit ;
51940: POP
51941: POP
51942: GO 51948
// end ;
51944: GO 51878
51946: POP
51947: POP
// end ;
51948: LD_VAR 0 4
51952: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51953: LD_INT 0
51955: PPUSH
51956: PPUSH
51957: PPUSH
// if btype = b_depot then
51958: LD_VAR 0 2
51962: PUSH
51963: LD_INT 0
51965: EQUAL
51966: IFFALSE 51978
// begin result := true ;
51968: LD_ADDR_VAR 0 3
51972: PUSH
51973: LD_INT 1
51975: ST_TO_ADDR
// exit ;
51976: GO 52098
// end ; pom := GetBase ( depot ) ;
51978: LD_ADDR_VAR 0 4
51982: PUSH
51983: LD_VAR 0 1
51987: PPUSH
51988: CALL_OW 274
51992: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51993: LD_ADDR_VAR 0 5
51997: PUSH
51998: LD_VAR 0 2
52002: PPUSH
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 248
52012: PPUSH
52013: CALL_OW 450
52017: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52018: LD_ADDR_VAR 0 3
52022: PUSH
52023: LD_VAR 0 4
52027: PPUSH
52028: LD_INT 1
52030: PPUSH
52031: CALL_OW 275
52035: PUSH
52036: LD_VAR 0 5
52040: PUSH
52041: LD_INT 1
52043: ARRAY
52044: GREATEREQUAL
52045: IFFALSE 52071
52047: PUSH
52048: LD_VAR 0 4
52052: PPUSH
52053: LD_INT 2
52055: PPUSH
52056: CALL_OW 275
52060: PUSH
52061: LD_VAR 0 5
52065: PUSH
52066: LD_INT 2
52068: ARRAY
52069: GREATEREQUAL
52070: AND
52071: IFFALSE 52097
52073: PUSH
52074: LD_VAR 0 4
52078: PPUSH
52079: LD_INT 3
52081: PPUSH
52082: CALL_OW 275
52086: PUSH
52087: LD_VAR 0 5
52091: PUSH
52092: LD_INT 3
52094: ARRAY
52095: GREATEREQUAL
52096: AND
52097: ST_TO_ADDR
// end ;
52098: LD_VAR 0 3
52102: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52103: LD_INT 0
52105: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52106: LD_VAR 0 1
52110: PPUSH
52111: LD_VAR 0 2
52115: PPUSH
52116: LD_INT 0
52118: PPUSH
52119: LD_INT 0
52121: PPUSH
52122: LD_INT 1
52124: PPUSH
52125: LD_INT 0
52127: PPUSH
52128: CALL_OW 587
// end ;
52132: LD_VAR 0 3
52136: RET
// export function CenterOnNow ( unit ) ; begin
52137: LD_INT 0
52139: PPUSH
// result := IsInUnit ( unit ) ;
52140: LD_ADDR_VAR 0 2
52144: PUSH
52145: LD_VAR 0 1
52149: PPUSH
52150: CALL_OW 310
52154: ST_TO_ADDR
// if not result then
52155: LD_VAR 0 2
52159: NOT
52160: IFFALSE 52172
// result := unit ;
52162: LD_ADDR_VAR 0 2
52166: PUSH
52167: LD_VAR 0 1
52171: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52172: LD_VAR 0 1
52176: PPUSH
52177: CALL_OW 87
// end ;
52181: LD_VAR 0 2
52185: RET
// export function ComMoveHex ( unit , hex ) ; begin
52186: LD_INT 0
52188: PPUSH
// if not hex then
52189: LD_VAR 0 2
52193: NOT
52194: IFFALSE 52198
// exit ;
52196: GO 52251
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52198: LD_VAR 0 2
52202: PUSH
52203: LD_INT 1
52205: ARRAY
52206: PPUSH
52207: LD_VAR 0 2
52211: PUSH
52212: LD_INT 2
52214: ARRAY
52215: PPUSH
52216: CALL_OW 428
52220: IFFALSE 52224
// exit ;
52222: GO 52251
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52224: LD_VAR 0 1
52228: PPUSH
52229: LD_VAR 0 2
52233: PUSH
52234: LD_INT 1
52236: ARRAY
52237: PPUSH
52238: LD_VAR 0 2
52242: PUSH
52243: LD_INT 2
52245: ARRAY
52246: PPUSH
52247: CALL_OW 111
// end ;
52251: LD_VAR 0 3
52255: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52256: LD_INT 0
52258: PPUSH
52259: PPUSH
52260: PPUSH
// if not unit or not enemy then
52261: LD_VAR 0 1
52265: NOT
52266: IFTRUE 52275
52268: PUSH
52269: LD_VAR 0 2
52273: NOT
52274: OR
52275: IFFALSE 52279
// exit ;
52277: GO 52405
// x := GetX ( enemy ) ;
52279: LD_ADDR_VAR 0 4
52283: PUSH
52284: LD_VAR 0 2
52288: PPUSH
52289: CALL_OW 250
52293: ST_TO_ADDR
// y := GetY ( enemy ) ;
52294: LD_ADDR_VAR 0 5
52298: PUSH
52299: LD_VAR 0 2
52303: PPUSH
52304: CALL_OW 251
52308: ST_TO_ADDR
// if ValidHex ( x , y ) then
52309: LD_VAR 0 4
52313: PPUSH
52314: LD_VAR 0 5
52318: PPUSH
52319: CALL_OW 488
52323: IFFALSE 52405
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52325: LD_VAR 0 2
52329: PPUSH
52330: CALL_OW 247
52334: PUSH
52335: LD_INT 3
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: IN
52345: IFTRUE 52368
52347: PUSH
52348: LD_VAR 0 1
52352: PPUSH
52353: CALL_OW 255
52357: PPUSH
52358: LD_VAR 0 2
52362: PPUSH
52363: CALL_OW 292
52367: OR
52368: IFFALSE 52386
// ComAttackUnit ( unit , enemy ) else
52370: LD_VAR 0 1
52374: PPUSH
52375: LD_VAR 0 2
52379: PPUSH
52380: CALL_OW 115
52384: GO 52405
// ComAgressiveMove ( unit , x , y ) ;
52386: LD_VAR 0 1
52390: PPUSH
52391: LD_VAR 0 4
52395: PPUSH
52396: LD_VAR 0 5
52400: PPUSH
52401: CALL_OW 114
// end ;
52405: LD_VAR 0 3
52409: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52410: LD_INT 0
52412: PPUSH
52413: PPUSH
52414: PPUSH
// list := AreaToList ( area , 0 ) ;
52415: LD_ADDR_VAR 0 5
52419: PUSH
52420: LD_VAR 0 1
52424: PPUSH
52425: LD_INT 0
52427: PPUSH
52428: CALL_OW 517
52432: ST_TO_ADDR
// if not list then
52433: LD_VAR 0 5
52437: NOT
52438: IFFALSE 52442
// exit ;
52440: GO 52572
// if all then
52442: LD_VAR 0 2
52446: IFFALSE 52534
// begin for i := 1 to list [ 1 ] do
52448: LD_ADDR_VAR 0 4
52452: PUSH
52453: DOUBLE
52454: LD_INT 1
52456: DEC
52457: ST_TO_ADDR
52458: LD_VAR 0 5
52462: PUSH
52463: LD_INT 1
52465: ARRAY
52466: PUSH
52467: FOR_TO
52468: IFFALSE 52530
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52470: LD_ADDR_VAR 0 3
52474: PUSH
52475: LD_VAR 0 3
52479: PPUSH
52480: LD_VAR 0 3
52484: PUSH
52485: LD_INT 1
52487: PLUS
52488: PPUSH
52489: LD_VAR 0 5
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: PUSH
52498: LD_VAR 0 4
52502: ARRAY
52503: PUSH
52504: LD_VAR 0 5
52508: PUSH
52509: LD_INT 2
52511: ARRAY
52512: PUSH
52513: LD_VAR 0 4
52517: ARRAY
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PPUSH
52523: CALL_OW 1
52527: ST_TO_ADDR
52528: GO 52467
52530: POP
52531: POP
// exit ;
52532: GO 52572
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52534: LD_ADDR_VAR 0 3
52538: PUSH
52539: LD_VAR 0 5
52543: PUSH
52544: LD_INT 1
52546: ARRAY
52547: PUSH
52548: LD_INT 1
52550: ARRAY
52551: PUSH
52552: LD_VAR 0 5
52556: PUSH
52557: LD_INT 2
52559: ARRAY
52560: PUSH
52561: LD_INT 1
52563: ARRAY
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: ST_TO_ADDR
// end ;
52572: LD_VAR 0 3
52576: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52577: LD_INT 0
52579: PPUSH
52580: PPUSH
// list := AreaToList ( area , 0 ) ;
52581: LD_ADDR_VAR 0 4
52585: PUSH
52586: LD_VAR 0 1
52590: PPUSH
52591: LD_INT 0
52593: PPUSH
52594: CALL_OW 517
52598: ST_TO_ADDR
// if not list then
52599: LD_VAR 0 4
52603: NOT
52604: IFFALSE 52608
// exit ;
52606: GO 52649
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52608: LD_ADDR_VAR 0 3
52612: PUSH
52613: LD_VAR 0 4
52617: PUSH
52618: LD_INT 1
52620: ARRAY
52621: PUSH
52622: LD_INT 1
52624: ARRAY
52625: PUSH
52626: LD_VAR 0 4
52630: PUSH
52631: LD_INT 2
52633: ARRAY
52634: PUSH
52635: LD_INT 1
52637: ARRAY
52638: PUSH
52639: LD_VAR 0 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: ST_TO_ADDR
// end ;
52649: LD_VAR 0 3
52653: RET
// export function First ( array ) ; begin
52654: LD_INT 0
52656: PPUSH
// if not array then
52657: LD_VAR 0 1
52661: NOT
52662: IFFALSE 52666
// exit ;
52664: GO 52680
// result := array [ 1 ] ;
52666: LD_ADDR_VAR 0 2
52670: PUSH
52671: LD_VAR 0 1
52675: PUSH
52676: LD_INT 1
52678: ARRAY
52679: ST_TO_ADDR
// end ;
52680: LD_VAR 0 2
52684: RET
// export function Last ( array ) ; begin
52685: LD_INT 0
52687: PPUSH
// if not array then
52688: LD_VAR 0 1
52692: NOT
52693: IFFALSE 52697
// exit ;
52695: GO 52713
// result := array [ array ] ;
52697: LD_ADDR_VAR 0 2
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_VAR 0 1
52711: ARRAY
52712: ST_TO_ADDR
// end ;
52713: LD_VAR 0 2
52717: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52718: LD_INT 0
52720: PPUSH
52721: PPUSH
// result := [ ] ;
52722: LD_ADDR_VAR 0 5
52726: PUSH
52727: EMPTY
52728: ST_TO_ADDR
// if not array then
52729: LD_VAR 0 1
52733: NOT
52734: IFFALSE 52738
// exit ;
52736: GO 52850
// for i := 1 to array do
52738: LD_ADDR_VAR 0 6
52742: PUSH
52743: DOUBLE
52744: LD_INT 1
52746: DEC
52747: ST_TO_ADDR
52748: LD_VAR 0 1
52752: PUSH
52753: FOR_TO
52754: IFFALSE 52848
// if array [ i ] [ index ] = value then
52756: LD_VAR 0 1
52760: PUSH
52761: LD_VAR 0 6
52765: ARRAY
52766: PUSH
52767: LD_VAR 0 2
52771: ARRAY
52772: PUSH
52773: LD_VAR 0 3
52777: EQUAL
52778: IFFALSE 52846
// begin if indexColumn then
52780: LD_VAR 0 4
52784: IFFALSE 52820
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52786: LD_ADDR_VAR 0 5
52790: PUSH
52791: LD_VAR 0 5
52795: PPUSH
52796: LD_VAR 0 1
52800: PUSH
52801: LD_VAR 0 6
52805: ARRAY
52806: PUSH
52807: LD_VAR 0 4
52811: ARRAY
52812: PPUSH
52813: CALL 47858 0 2
52817: ST_TO_ADDR
52818: GO 52846
// result := Join ( result , array [ i ] ) ;
52820: LD_ADDR_VAR 0 5
52824: PUSH
52825: LD_VAR 0 5
52829: PPUSH
52830: LD_VAR 0 1
52834: PUSH
52835: LD_VAR 0 6
52839: ARRAY
52840: PPUSH
52841: CALL 47858 0 2
52845: ST_TO_ADDR
// end ;
52846: GO 52753
52848: POP
52849: POP
// end ;
52850: LD_VAR 0 5
52854: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52855: LD_INT 0
52857: PPUSH
// if not vehicles or not parkingPoint then
52858: LD_VAR 0 1
52862: NOT
52863: IFTRUE 52872
52865: PUSH
52866: LD_VAR 0 2
52870: NOT
52871: OR
52872: IFFALSE 52876
// exit ;
52874: GO 52974
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52876: LD_ADDR_VAR 0 1
52880: PUSH
52881: LD_VAR 0 1
52885: PPUSH
52886: LD_INT 50
52888: PUSH
52889: EMPTY
52890: LIST
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: LD_INT 92
52897: PUSH
52898: LD_VAR 0 2
52902: PUSH
52903: LD_INT 1
52905: ARRAY
52906: PUSH
52907: LD_VAR 0 2
52911: PUSH
52912: LD_INT 2
52914: ARRAY
52915: PUSH
52916: LD_INT 8
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PPUSH
52933: CALL_OW 72
52937: ST_TO_ADDR
// if not vehicles then
52938: LD_VAR 0 1
52942: NOT
52943: IFFALSE 52947
// exit ;
52945: GO 52974
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52947: LD_VAR 0 1
52951: PPUSH
52952: LD_VAR 0 2
52956: PUSH
52957: LD_INT 1
52959: ARRAY
52960: PPUSH
52961: LD_VAR 0 2
52965: PUSH
52966: LD_INT 2
52968: ARRAY
52969: PPUSH
52970: CALL_OW 111
// end ;
52974: LD_VAR 0 3
52978: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52979: LD_INT 0
52981: PPUSH
52982: PPUSH
52983: PPUSH
// if not side or not area then
52984: LD_VAR 0 1
52988: NOT
52989: IFTRUE 52998
52991: PUSH
52992: LD_VAR 0 2
52996: NOT
52997: OR
52998: IFFALSE 53002
// exit ;
53000: GO 53121
// tmp := AreaToList ( area , 0 ) ;
53002: LD_ADDR_VAR 0 5
53006: PUSH
53007: LD_VAR 0 2
53011: PPUSH
53012: LD_INT 0
53014: PPUSH
53015: CALL_OW 517
53019: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53020: LD_ADDR_VAR 0 4
53024: PUSH
53025: DOUBLE
53026: LD_INT 1
53028: DEC
53029: ST_TO_ADDR
53030: LD_VAR 0 5
53034: PUSH
53035: LD_INT 1
53037: ARRAY
53038: PUSH
53039: FOR_TO
53040: IFFALSE 53119
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53042: LD_VAR 0 5
53046: PUSH
53047: LD_INT 1
53049: ARRAY
53050: PUSH
53051: LD_VAR 0 4
53055: ARRAY
53056: PPUSH
53057: LD_VAR 0 5
53061: PUSH
53062: LD_INT 2
53064: ARRAY
53065: PUSH
53066: LD_VAR 0 4
53070: ARRAY
53071: PPUSH
53072: CALL_OW 351
53076: IFFALSE 53117
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53078: LD_VAR 0 5
53082: PUSH
53083: LD_INT 1
53085: ARRAY
53086: PUSH
53087: LD_VAR 0 4
53091: ARRAY
53092: PPUSH
53093: LD_VAR 0 5
53097: PUSH
53098: LD_INT 2
53100: ARRAY
53101: PUSH
53102: LD_VAR 0 4
53106: ARRAY
53107: PPUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: CALL_OW 244
// end ;
53117: GO 53039
53119: POP
53120: POP
// end ;
53121: LD_VAR 0 3
53125: RET
// export function UniqueArray ( array ) ; var i ; begin
53126: LD_INT 0
53128: PPUSH
53129: PPUSH
// result := [ ] ;
53130: LD_ADDR_VAR 0 2
53134: PUSH
53135: EMPTY
53136: ST_TO_ADDR
// if not array then
53137: LD_VAR 0 1
53141: NOT
53142: IFFALSE 53146
// exit ;
53144: GO 53207
// for i := 1 to array do
53146: LD_ADDR_VAR 0 3
53150: PUSH
53151: DOUBLE
53152: LD_INT 1
53154: DEC
53155: ST_TO_ADDR
53156: LD_VAR 0 1
53160: PUSH
53161: FOR_TO
53162: IFFALSE 53205
// if not array [ i ] in result then
53164: LD_VAR 0 1
53168: PUSH
53169: LD_VAR 0 3
53173: ARRAY
53174: PUSH
53175: LD_VAR 0 2
53179: IN
53180: NOT
53181: IFFALSE 53203
// result := Join ( result , i ) ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_VAR 0 2
53192: PPUSH
53193: LD_VAR 0 3
53197: PPUSH
53198: CALL 47858 0 2
53202: ST_TO_ADDR
53203: GO 53161
53205: POP
53206: POP
// end ; end_of_file
53207: LD_VAR 0 2
53211: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53212: LD_VAR 0 1
53216: PUSH
53217: LD_INT 200
53219: DOUBLE
53220: GREATEREQUAL
53221: IFFALSE 53229
53223: LD_INT 299
53225: DOUBLE
53226: LESSEQUAL
53227: IFTRUE 53231
53229: GO 53263
53231: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53232: LD_VAR 0 1
53236: PPUSH
53237: LD_VAR 0 2
53241: PPUSH
53242: LD_VAR 0 3
53246: PPUSH
53247: LD_VAR 0 4
53251: PPUSH
53252: LD_VAR 0 5
53256: PPUSH
53257: CALL 54044 0 5
53261: GO 53340
53263: LD_INT 300
53265: DOUBLE
53266: GREATEREQUAL
53267: IFFALSE 53275
53269: LD_INT 399
53271: DOUBLE
53272: LESSEQUAL
53273: IFTRUE 53277
53275: GO 53339
53277: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53278: LD_VAR 0 1
53282: PPUSH
53283: LD_VAR 0 2
53287: PPUSH
53288: LD_VAR 0 3
53292: PPUSH
53293: LD_VAR 0 4
53297: PPUSH
53298: LD_VAR 0 5
53302: PPUSH
53303: LD_VAR 0 6
53307: PPUSH
53308: LD_VAR 0 7
53312: PPUSH
53313: LD_VAR 0 8
53317: PPUSH
53318: LD_VAR 0 9
53322: PPUSH
53323: LD_VAR 0 10
53327: PPUSH
53328: LD_VAR 0 11
53332: PPUSH
53333: CALL 61130 0 11
53337: GO 53340
53339: POP
// end ;
53340: PPOPN 11
53342: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
53343: LD_VAR 0 1
53347: PPUSH
53348: LD_VAR 0 2
53352: PPUSH
53353: LD_VAR 0 3
53357: PPUSH
53358: LD_VAR 0 4
53362: PPUSH
53363: LD_VAR 0 5
53367: PPUSH
53368: CALL 53425 0 5
// end ; end_of_file
53372: PPOPN 5
53374: END
// export function SOS_UnitDestroyed ( un ) ; begin
53375: LD_INT 0
53377: PPUSH
// ComRadiation ( un ) ;
53378: LD_VAR 0 1
53382: PPUSH
53383: CALL 54464 0 1
// end ;
53387: LD_VAR 0 2
53391: RET
// export function SOS_UnitKamikazed ( un ) ; begin
53392: LD_INT 0
53394: PPUSH
// ComRadiation ( un ) ;
53395: LD_VAR 0 1
53399: PPUSH
53400: CALL 54464 0 1
// end ;
53404: LD_VAR 0 2
53408: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
53409: LD_INT 0
53411: PPUSH
// end ;
53412: LD_VAR 0 4
53416: RET
// export function SOS_Command ( cmd ) ; begin
53417: LD_INT 0
53419: PPUSH
// end ;
53420: LD_VAR 0 2
53424: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
53425: LD_INT 0
53427: PPUSH
// end ;
53428: LD_VAR 0 6
53432: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
53433: LD_INT 0
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
// if not vehicle or not factory then
53439: LD_VAR 0 1
53443: NOT
53444: IFTRUE 53453
53446: PUSH
53447: LD_VAR 0 2
53451: NOT
53452: OR
53453: IFFALSE 53457
// exit ;
53455: GO 54039
// if not factoryWaypoints then
53457: LD_EXP 59
53461: NOT
53462: IFFALSE 53466
// exit ;
53464: GO 54039
// for i := 1 to Count ( factoryWaypoints ) do
53466: LD_ADDR_VAR 0 4
53470: PUSH
53471: DOUBLE
53472: LD_INT 1
53474: DEC
53475: ST_TO_ADDR
53476: LD_EXP 59
53480: PPUSH
53481: CALL 11926 0 1
53485: PUSH
53486: FOR_TO
53487: IFFALSE 54037
// if factoryWaypoints [ i ] [ 2 ] = factory then
53489: LD_EXP 59
53493: PUSH
53494: LD_VAR 0 4
53498: ARRAY
53499: PUSH
53500: LD_INT 2
53502: ARRAY
53503: PUSH
53504: LD_VAR 0 2
53508: EQUAL
53509: IFFALSE 54035
// begin if GetControl ( vehicle ) = control_manual then
53511: LD_VAR 0 1
53515: PPUSH
53516: CALL_OW 263
53520: PUSH
53521: LD_INT 1
53523: EQUAL
53524: IFFALSE 53888
// begin driver := IsDrivenBy ( vehicle ) ;
53526: LD_ADDR_VAR 0 5
53530: PUSH
53531: LD_VAR 0 1
53535: PPUSH
53536: CALL_OW 311
53540: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
53541: LD_VAR 0 5
53545: PUSH
53546: LD_EXP 60
53550: IN
53551: IFTRUE 53565
53553: PUSH
53554: LD_VAR 0 1
53558: PUSH
53559: LD_EXP 60
53563: IN
53564: OR
53565: IFFALSE 53571
// exit ;
53567: POP
53568: POP
53569: GO 54039
// if not HasTask ( driver ) then
53571: LD_VAR 0 5
53575: PPUSH
53576: CALL_OW 314
53580: NOT
53581: IFFALSE 53886
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
53583: LD_ADDR_EXP 60
53587: PUSH
53588: LD_EXP 60
53592: PPUSH
53593: LD_VAR 0 5
53597: PPUSH
53598: CALL 47858 0 2
53602: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
53603: LD_ADDR_EXP 60
53607: PUSH
53608: LD_EXP 60
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL 47858 0 2
53622: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53623: LD_ADDR_VAR 0 6
53627: PUSH
53628: LD_EXP 59
53632: PUSH
53633: LD_VAR 0 4
53637: ARRAY
53638: PUSH
53639: LD_INT 3
53641: ARRAY
53642: PPUSH
53643: LD_EXP 59
53647: PUSH
53648: LD_VAR 0 4
53652: ARRAY
53653: PUSH
53654: LD_INT 4
53656: ARRAY
53657: PPUSH
53658: CALL_OW 428
53662: ST_TO_ADDR
// if hex then
53663: LD_VAR 0 6
53667: IFFALSE 53685
// ComMoveUnit ( driver , hex ) else
53669: LD_VAR 0 5
53673: PPUSH
53674: LD_VAR 0 6
53678: PPUSH
53679: CALL_OW 112
53683: GO 53769
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
53685: LD_VAR 0 1
53689: PPUSH
53690: LD_EXP 59
53694: PUSH
53695: LD_VAR 0 4
53699: ARRAY
53700: PUSH
53701: LD_INT 3
53703: ARRAY
53704: PPUSH
53705: LD_EXP 59
53709: PUSH
53710: LD_VAR 0 4
53714: ARRAY
53715: PUSH
53716: LD_INT 4
53718: ARRAY
53719: PPUSH
53720: CALL_OW 297
53724: PUSH
53725: LD_INT 0
53727: GREATER
53728: IFFALSE 53769
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53730: LD_VAR 0 5
53734: PPUSH
53735: LD_EXP 59
53739: PUSH
53740: LD_VAR 0 4
53744: ARRAY
53745: PUSH
53746: LD_INT 3
53748: ARRAY
53749: PPUSH
53750: LD_EXP 59
53754: PUSH
53755: LD_VAR 0 4
53759: ARRAY
53760: PUSH
53761: LD_INT 4
53763: ARRAY
53764: PPUSH
53765: CALL_OW 111
// AddComExitVehicle ( driver ) ;
53769: LD_VAR 0 5
53773: PPUSH
53774: CALL_OW 181
// if Multiplayer then
53778: LD_OWVAR 4
53782: IFFALSE 53831
// begin repeat wait ( 10 ) ;
53784: LD_INT 10
53786: PPUSH
53787: CALL_OW 67
// until not IsInUnit ( driver ) ;
53791: LD_VAR 0 5
53795: PPUSH
53796: CALL_OW 310
53800: NOT
53801: IFFALSE 53784
// if not HasTask ( driver ) then
53803: LD_VAR 0 5
53807: PPUSH
53808: CALL_OW 314
53812: NOT
53813: IFFALSE 53829
// ComEnterUnit ( driver , factory ) ;
53815: LD_VAR 0 5
53819: PPUSH
53820: LD_VAR 0 2
53824: PPUSH
53825: CALL_OW 120
// end else
53829: GO 53845
// AddComEnterUnit ( driver , factory ) ;
53831: LD_VAR 0 5
53835: PPUSH
53836: LD_VAR 0 2
53840: PPUSH
53841: CALL_OW 180
// wait ( 0 0$1 ) ;
53845: LD_INT 35
53847: PPUSH
53848: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
53852: LD_ADDR_EXP 60
53856: PUSH
53857: LD_EXP 60
53861: PUSH
53862: LD_VAR 0 5
53866: DIFF
53867: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
53868: LD_ADDR_EXP 60
53872: PUSH
53873: LD_EXP 60
53877: PUSH
53878: LD_VAR 0 1
53882: DIFF
53883: ST_TO_ADDR
// break ;
53884: GO 54037
// end ; end else
53886: GO 54035
// if GetControl ( vehicle ) = control_remote then
53888: LD_VAR 0 1
53892: PPUSH
53893: CALL_OW 263
53897: PUSH
53898: LD_INT 2
53900: EQUAL
53901: IFFALSE 53987
// begin wait ( 0 0$2 ) ;
53903: LD_INT 70
53905: PPUSH
53906: CALL_OW 67
// repeat wait ( 10 ) ;
53910: LD_INT 10
53912: PPUSH
53913: CALL_OW 67
// Connect ( vehicle ) ;
53917: LD_VAR 0 1
53921: PPUSH
53922: CALL 18170 0 1
// until IsControledBy ( vehicle ) ;
53926: LD_VAR 0 1
53930: PPUSH
53931: CALL_OW 312
53935: IFFALSE 53910
// wait ( 10 ) ;
53937: LD_INT 10
53939: PPUSH
53940: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53944: LD_VAR 0 1
53948: PPUSH
53949: LD_EXP 59
53953: PUSH
53954: LD_VAR 0 4
53958: ARRAY
53959: PUSH
53960: LD_INT 3
53962: ARRAY
53963: PPUSH
53964: LD_EXP 59
53968: PUSH
53969: LD_VAR 0 4
53973: ARRAY
53974: PUSH
53975: LD_INT 4
53977: ARRAY
53978: PPUSH
53979: CALL_OW 111
// break ;
53983: GO 54037
// end else
53985: GO 54035
// begin wait ( 0 0$3 ) ;
53987: LD_INT 105
53989: PPUSH
53990: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
53994: LD_VAR 0 1
53998: PPUSH
53999: LD_EXP 59
54003: PUSH
54004: LD_VAR 0 4
54008: ARRAY
54009: PUSH
54010: LD_INT 3
54012: ARRAY
54013: PPUSH
54014: LD_EXP 59
54018: PUSH
54019: LD_VAR 0 4
54023: ARRAY
54024: PUSH
54025: LD_INT 4
54027: ARRAY
54028: PPUSH
54029: CALL_OW 111
// break ;
54033: GO 54037
// end ; end ;
54035: GO 53486
54037: POP
54038: POP
// end ;
54039: LD_VAR 0 3
54043: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54044: LD_INT 0
54046: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54047: LD_VAR 0 1
54051: PUSH
54052: LD_INT 250
54054: EQUAL
54055: IFFALSE 54072
54057: PUSH
54058: LD_VAR 0 2
54062: PPUSH
54063: CALL_OW 264
54067: PUSH
54068: LD_INT 81
54070: EQUAL
54071: AND
54072: IFFALSE 54093
// MinerPlaceMine ( unit , x , y ) ;
54074: LD_VAR 0 2
54078: PPUSH
54079: LD_VAR 0 4
54083: PPUSH
54084: LD_VAR 0 5
54088: PPUSH
54089: CALL 57225 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54093: LD_VAR 0 1
54097: PUSH
54098: LD_INT 251
54100: EQUAL
54101: IFFALSE 54118
54103: PUSH
54104: LD_VAR 0 2
54108: PPUSH
54109: CALL_OW 264
54113: PUSH
54114: LD_INT 81
54116: EQUAL
54117: AND
54118: IFFALSE 54139
// MinerDetonateMine ( unit , x , y ) ;
54120: LD_VAR 0 2
54124: PPUSH
54125: LD_VAR 0 4
54129: PPUSH
54130: LD_VAR 0 5
54134: PPUSH
54135: CALL 57504 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54139: LD_VAR 0 1
54143: PUSH
54144: LD_INT 252
54146: EQUAL
54147: IFFALSE 54164
54149: PUSH
54150: LD_VAR 0 2
54154: PPUSH
54155: CALL_OW 264
54159: PUSH
54160: LD_INT 81
54162: EQUAL
54163: AND
54164: IFFALSE 54185
// MinerCreateMinefield ( unit , x , y ) ;
54166: LD_VAR 0 2
54170: PPUSH
54171: LD_VAR 0 4
54175: PPUSH
54176: LD_VAR 0 5
54180: PPUSH
54181: CALL 57923 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54185: LD_VAR 0 1
54189: PUSH
54190: LD_INT 253
54192: EQUAL
54193: IFFALSE 54210
54195: PUSH
54196: LD_VAR 0 2
54200: PPUSH
54201: CALL_OW 257
54205: PUSH
54206: LD_INT 5
54208: EQUAL
54209: AND
54210: IFFALSE 54231
// ComBinocular ( unit , x , y ) ;
54212: LD_VAR 0 2
54216: PPUSH
54217: LD_VAR 0 4
54221: PPUSH
54222: LD_VAR 0 5
54226: PPUSH
54227: CALL 58298 0 3
// if selectedUnit then
54231: LD_VAR 0 3
54235: IFFALSE 54295
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54237: LD_VAR 0 1
54241: PUSH
54242: LD_INT 254
54244: EQUAL
54245: IFFALSE 54262
54247: PUSH
54248: LD_VAR 0 2
54252: PPUSH
54253: CALL_OW 264
54257: PUSH
54258: LD_INT 99
54260: EQUAL
54261: AND
54262: IFFALSE 54279
54264: PUSH
54265: LD_VAR 0 3
54269: PPUSH
54270: CALL_OW 263
54274: PUSH
54275: LD_INT 3
54277: EQUAL
54278: AND
54279: IFFALSE 54295
// HackDestroyVehicle ( unit , selectedUnit ) ;
54281: LD_VAR 0 2
54285: PPUSH
54286: LD_VAR 0 3
54290: PPUSH
54291: CALL 56585 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
54295: LD_VAR 0 1
54299: PUSH
54300: LD_INT 255
54302: EQUAL
54303: IFFALSE 54327
54305: PUSH
54306: LD_VAR 0 2
54310: PPUSH
54311: CALL_OW 264
54315: PUSH
54316: LD_INT 14
54318: PUSH
54319: LD_INT 53
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: IN
54326: AND
54327: IFFALSE 54345
54329: PUSH
54330: LD_VAR 0 4
54334: PPUSH
54335: LD_VAR 0 5
54339: PPUSH
54340: CALL_OW 488
54344: AND
54345: IFFALSE 54369
// CutTreeXYR ( unit , x , y , 12 ) ;
54347: LD_VAR 0 2
54351: PPUSH
54352: LD_VAR 0 4
54356: PPUSH
54357: LD_VAR 0 5
54361: PPUSH
54362: LD_INT 12
54364: PPUSH
54365: CALL 54560 0 4
// if cmd = 256 then
54369: LD_VAR 0 1
54373: PUSH
54374: LD_INT 256
54376: EQUAL
54377: IFFALSE 54398
// SetFactoryWaypoint ( unit , x , y ) ;
54379: LD_VAR 0 2
54383: PPUSH
54384: LD_VAR 0 4
54388: PPUSH
54389: LD_VAR 0 5
54393: PPUSH
54394: CALL 61138 0 3
// if cmd = 257 then
54398: LD_VAR 0 1
54402: PUSH
54403: LD_INT 257
54405: EQUAL
54406: IFFALSE 54427
// SetWarehouseGatheringPoint ( unit , x , y ) ;
54408: LD_VAR 0 2
54412: PPUSH
54413: LD_VAR 0 4
54417: PPUSH
54418: LD_VAR 0 5
54422: PPUSH
54423: CALL 61634 0 3
// if cmd = 258 then
54427: LD_VAR 0 1
54431: PUSH
54432: LD_INT 258
54434: EQUAL
54435: IFFALSE 54459
// BurnTreeXYR ( unit , x , y , 8 ) ;
54437: LD_VAR 0 2
54441: PPUSH
54442: LD_VAR 0 4
54446: PPUSH
54447: LD_VAR 0 5
54451: PPUSH
54452: LD_INT 8
54454: PPUSH
54455: CALL 54960 0 4
// end ;
54459: LD_VAR 0 6
54463: RET
// export function ComRadiation ( un ) ; var eff ; begin
54464: LD_INT 0
54466: PPUSH
54467: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
54468: LD_VAR 0 1
54472: PPUSH
54473: CALL_OW 264
54477: PUSH
54478: LD_INT 91
54480: NONEQUAL
54481: IFFALSE 54485
// exit ;
54483: GO 54555
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
54485: LD_INT 68
54487: PPUSH
54488: LD_VAR 0 1
54492: PPUSH
54493: CALL_OW 255
54497: PPUSH
54498: CALL_OW 321
54502: PUSH
54503: LD_INT 2
54505: EQUAL
54506: IFFALSE 54518
// eff := 50 else
54508: LD_ADDR_VAR 0 3
54512: PUSH
54513: LD_INT 50
54515: ST_TO_ADDR
54516: GO 54526
// eff := 25 ;
54518: LD_ADDR_VAR 0 3
54522: PUSH
54523: LD_INT 25
54525: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
54526: LD_VAR 0 1
54530: PPUSH
54531: CALL_OW 250
54535: PPUSH
54536: LD_VAR 0 1
54540: PPUSH
54541: CALL_OW 251
54545: PPUSH
54546: LD_VAR 0 3
54550: PPUSH
54551: CALL_OW 495
// end ;
54555: LD_VAR 0 2
54559: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
54560: LD_INT 0
54562: PPUSH
54563: PPUSH
54564: PPUSH
54565: PPUSH
54566: PPUSH
54567: PPUSH
54568: PPUSH
54569: PPUSH
54570: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
54571: LD_VAR 0 1
54575: PPUSH
54576: CALL_OW 302
54580: NOT
54581: IFTRUE 54600
54583: PUSH
54584: LD_VAR 0 2
54588: PPUSH
54589: LD_VAR 0 3
54593: PPUSH
54594: CALL_OW 488
54598: NOT
54599: OR
54600: IFTRUE 54609
54602: PUSH
54603: LD_VAR 0 4
54607: NOT
54608: OR
54609: IFFALSE 54613
// exit ;
54611: GO 54955
// list := [ ] ;
54613: LD_ADDR_VAR 0 13
54617: PUSH
54618: EMPTY
54619: ST_TO_ADDR
// if x - r < 0 then
54620: LD_VAR 0 2
54624: PUSH
54625: LD_VAR 0 4
54629: MINUS
54630: PUSH
54631: LD_INT 0
54633: LESS
54634: IFFALSE 54646
// min_x := 0 else
54636: LD_ADDR_VAR 0 7
54640: PUSH
54641: LD_INT 0
54643: ST_TO_ADDR
54644: GO 54662
// min_x := x - r ;
54646: LD_ADDR_VAR 0 7
54650: PUSH
54651: LD_VAR 0 2
54655: PUSH
54656: LD_VAR 0 4
54660: MINUS
54661: ST_TO_ADDR
// if y - r < 0 then
54662: LD_VAR 0 3
54666: PUSH
54667: LD_VAR 0 4
54671: MINUS
54672: PUSH
54673: LD_INT 0
54675: LESS
54676: IFFALSE 54688
// min_y := 0 else
54678: LD_ADDR_VAR 0 8
54682: PUSH
54683: LD_INT 0
54685: ST_TO_ADDR
54686: GO 54704
// min_y := y - r ;
54688: LD_ADDR_VAR 0 8
54692: PUSH
54693: LD_VAR 0 3
54697: PUSH
54698: LD_VAR 0 4
54702: MINUS
54703: ST_TO_ADDR
// max_x := x + r ;
54704: LD_ADDR_VAR 0 9
54708: PUSH
54709: LD_VAR 0 2
54713: PUSH
54714: LD_VAR 0 4
54718: PLUS
54719: ST_TO_ADDR
// max_y := y + r ;
54720: LD_ADDR_VAR 0 10
54724: PUSH
54725: LD_VAR 0 3
54729: PUSH
54730: LD_VAR 0 4
54734: PLUS
54735: ST_TO_ADDR
// for _x = min_x to max_x do
54736: LD_ADDR_VAR 0 11
54740: PUSH
54741: DOUBLE
54742: LD_VAR 0 7
54746: DEC
54747: ST_TO_ADDR
54748: LD_VAR 0 9
54752: PUSH
54753: FOR_TO
54754: IFFALSE 54873
// for _y = min_y to max_y do
54756: LD_ADDR_VAR 0 12
54760: PUSH
54761: DOUBLE
54762: LD_VAR 0 8
54766: DEC
54767: ST_TO_ADDR
54768: LD_VAR 0 10
54772: PUSH
54773: FOR_TO
54774: IFFALSE 54869
// begin if not ValidHex ( _x , _y ) then
54776: LD_VAR 0 11
54780: PPUSH
54781: LD_VAR 0 12
54785: PPUSH
54786: CALL_OW 488
54790: NOT
54791: IFFALSE 54795
// continue ;
54793: GO 54773
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
54795: LD_VAR 0 11
54799: PPUSH
54800: LD_VAR 0 12
54804: PPUSH
54805: CALL_OW 351
54809: IFFALSE 54827
54811: PUSH
54812: LD_VAR 0 11
54816: PPUSH
54817: LD_VAR 0 12
54821: PPUSH
54822: CALL_OW 554
54826: AND
54827: IFFALSE 54867
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
54829: LD_ADDR_VAR 0 13
54833: PUSH
54834: LD_VAR 0 13
54838: PPUSH
54839: LD_VAR 0 13
54843: PUSH
54844: LD_INT 1
54846: PLUS
54847: PPUSH
54848: LD_VAR 0 11
54852: PUSH
54853: LD_VAR 0 12
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PPUSH
54862: CALL_OW 2
54866: ST_TO_ADDR
// end ;
54867: GO 54773
54869: POP
54870: POP
54871: GO 54753
54873: POP
54874: POP
// if not list then
54875: LD_VAR 0 13
54879: NOT
54880: IFFALSE 54884
// exit ;
54882: GO 54955
// for i in list do
54884: LD_ADDR_VAR 0 6
54888: PUSH
54889: LD_VAR 0 13
54893: PUSH
54894: FOR_IN
54895: IFFALSE 54953
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
54897: LD_VAR 0 1
54901: PPUSH
54902: LD_STRING M
54904: PUSH
54905: LD_VAR 0 6
54909: PUSH
54910: LD_INT 1
54912: ARRAY
54913: PUSH
54914: LD_VAR 0 6
54918: PUSH
54919: LD_INT 2
54921: ARRAY
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: PPUSH
54947: CALL_OW 447
54951: GO 54894
54953: POP
54954: POP
// end ;
54955: LD_VAR 0 5
54959: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
54960: LD_INT 0
54962: PPUSH
54963: PPUSH
54964: PPUSH
54965: PPUSH
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
54970: PPUSH
54971: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
54972: LD_VAR 0 1
54976: PPUSH
54977: CALL_OW 302
54981: NOT
54982: IFTRUE 55001
54984: PUSH
54985: LD_VAR 0 2
54989: PPUSH
54990: LD_VAR 0 3
54994: PPUSH
54995: CALL_OW 488
54999: NOT
55000: OR
55001: IFTRUE 55010
55003: PUSH
55004: LD_VAR 0 4
55008: NOT
55009: OR
55010: IFFALSE 55014
// exit ;
55012: GO 55531
// list := [ ] ;
55014: LD_ADDR_VAR 0 13
55018: PUSH
55019: EMPTY
55020: ST_TO_ADDR
// if x - r < 0 then
55021: LD_VAR 0 2
55025: PUSH
55026: LD_VAR 0 4
55030: MINUS
55031: PUSH
55032: LD_INT 0
55034: LESS
55035: IFFALSE 55047
// min_x := 0 else
55037: LD_ADDR_VAR 0 7
55041: PUSH
55042: LD_INT 0
55044: ST_TO_ADDR
55045: GO 55063
// min_x := x - r ;
55047: LD_ADDR_VAR 0 7
55051: PUSH
55052: LD_VAR 0 2
55056: PUSH
55057: LD_VAR 0 4
55061: MINUS
55062: ST_TO_ADDR
// if y - r < 0 then
55063: LD_VAR 0 3
55067: PUSH
55068: LD_VAR 0 4
55072: MINUS
55073: PUSH
55074: LD_INT 0
55076: LESS
55077: IFFALSE 55089
// min_y := 0 else
55079: LD_ADDR_VAR 0 8
55083: PUSH
55084: LD_INT 0
55086: ST_TO_ADDR
55087: GO 55105
// min_y := y - r ;
55089: LD_ADDR_VAR 0 8
55093: PUSH
55094: LD_VAR 0 3
55098: PUSH
55099: LD_VAR 0 4
55103: MINUS
55104: ST_TO_ADDR
// max_x := x + r ;
55105: LD_ADDR_VAR 0 9
55109: PUSH
55110: LD_VAR 0 2
55114: PUSH
55115: LD_VAR 0 4
55119: PLUS
55120: ST_TO_ADDR
// max_y := y + r ;
55121: LD_ADDR_VAR 0 10
55125: PUSH
55126: LD_VAR 0 3
55130: PUSH
55131: LD_VAR 0 4
55135: PLUS
55136: ST_TO_ADDR
// for _x = min_x to max_x do
55137: LD_ADDR_VAR 0 11
55141: PUSH
55142: DOUBLE
55143: LD_VAR 0 7
55147: DEC
55148: ST_TO_ADDR
55149: LD_VAR 0 9
55153: PUSH
55154: FOR_TO
55155: IFFALSE 55274
// for _y = min_y to max_y do
55157: LD_ADDR_VAR 0 12
55161: PUSH
55162: DOUBLE
55163: LD_VAR 0 8
55167: DEC
55168: ST_TO_ADDR
55169: LD_VAR 0 10
55173: PUSH
55174: FOR_TO
55175: IFFALSE 55270
// begin if not ValidHex ( _x , _y ) then
55177: LD_VAR 0 11
55181: PPUSH
55182: LD_VAR 0 12
55186: PPUSH
55187: CALL_OW 488
55191: NOT
55192: IFFALSE 55196
// continue ;
55194: GO 55174
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55196: LD_VAR 0 11
55200: PPUSH
55201: LD_VAR 0 12
55205: PPUSH
55206: CALL_OW 351
55210: IFFALSE 55228
55212: PUSH
55213: LD_VAR 0 11
55217: PPUSH
55218: LD_VAR 0 12
55222: PPUSH
55223: CALL_OW 554
55227: AND
55228: IFFALSE 55268
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55230: LD_ADDR_VAR 0 13
55234: PUSH
55235: LD_VAR 0 13
55239: PPUSH
55240: LD_VAR 0 13
55244: PUSH
55245: LD_INT 1
55247: PLUS
55248: PPUSH
55249: LD_VAR 0 11
55253: PUSH
55254: LD_VAR 0 12
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PPUSH
55263: CALL_OW 2
55267: ST_TO_ADDR
// end ;
55268: GO 55174
55270: POP
55271: POP
55272: GO 55154
55274: POP
55275: POP
// if not list then
55276: LD_VAR 0 13
55280: NOT
55281: IFFALSE 55285
// exit ;
55283: GO 55531
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
55285: LD_ADDR_VAR 0 13
55289: PUSH
55290: LD_VAR 0 1
55294: PPUSH
55295: LD_VAR 0 13
55299: PPUSH
55300: LD_INT 1
55302: PPUSH
55303: LD_INT 1
55305: PPUSH
55306: CALL 15298 0 4
55310: ST_TO_ADDR
// ComStop ( flame ) ;
55311: LD_VAR 0 1
55315: PPUSH
55316: CALL_OW 141
// for i in list do
55320: LD_ADDR_VAR 0 6
55324: PUSH
55325: LD_VAR 0 13
55329: PUSH
55330: FOR_IN
55331: IFFALSE 55362
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
55333: LD_VAR 0 1
55337: PPUSH
55338: LD_VAR 0 6
55342: PUSH
55343: LD_INT 1
55345: ARRAY
55346: PPUSH
55347: LD_VAR 0 6
55351: PUSH
55352: LD_INT 2
55354: ARRAY
55355: PPUSH
55356: CALL_OW 176
55360: GO 55330
55362: POP
55363: POP
// repeat wait ( 0 0$1 ) ;
55364: LD_INT 35
55366: PPUSH
55367: CALL_OW 67
// task := GetTaskList ( flame ) ;
55371: LD_ADDR_VAR 0 14
55375: PUSH
55376: LD_VAR 0 1
55380: PPUSH
55381: CALL_OW 437
55385: ST_TO_ADDR
// if not task then
55386: LD_VAR 0 14
55390: NOT
55391: IFFALSE 55395
// exit ;
55393: GO 55531
// if task [ 1 ] [ 1 ] <> | then
55395: LD_VAR 0 14
55399: PUSH
55400: LD_INT 1
55402: ARRAY
55403: PUSH
55404: LD_INT 1
55406: ARRAY
55407: PUSH
55408: LD_STRING |
55410: NONEQUAL
55411: IFFALSE 55415
// exit ;
55413: GO 55531
// _x := task [ 1 ] [ 2 ] ;
55415: LD_ADDR_VAR 0 11
55419: PUSH
55420: LD_VAR 0 14
55424: PUSH
55425: LD_INT 1
55427: ARRAY
55428: PUSH
55429: LD_INT 2
55431: ARRAY
55432: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
55433: LD_ADDR_VAR 0 12
55437: PUSH
55438: LD_VAR 0 14
55442: PUSH
55443: LD_INT 1
55445: ARRAY
55446: PUSH
55447: LD_INT 3
55449: ARRAY
55450: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
55451: LD_VAR 0 11
55455: PPUSH
55456: LD_VAR 0 12
55460: PPUSH
55461: CALL_OW 351
55465: NOT
55466: IFTRUE 55485
55468: PUSH
55469: LD_VAR 0 11
55473: PPUSH
55474: LD_VAR 0 12
55478: PPUSH
55479: CALL_OW 554
55483: NOT
55484: OR
55485: IFFALSE 55519
// begin task := Delete ( task , 1 ) ;
55487: LD_ADDR_VAR 0 14
55491: PUSH
55492: LD_VAR 0 14
55496: PPUSH
55497: LD_INT 1
55499: PPUSH
55500: CALL_OW 3
55504: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
55505: LD_VAR 0 1
55509: PPUSH
55510: LD_VAR 0 14
55514: PPUSH
55515: CALL_OW 446
// end ; until not HasTask ( flame ) ;
55519: LD_VAR 0 1
55523: PPUSH
55524: CALL_OW 314
55528: NOT
55529: IFFALSE 55364
// end ;
55531: LD_VAR 0 5
55535: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
55536: LD_EXP 48
55540: NOT
55541: IFFALSE 55591
55543: GO 55545
55545: DISABLE
// begin initHack := true ;
55546: LD_ADDR_EXP 48
55550: PUSH
55551: LD_INT 1
55553: ST_TO_ADDR
// hackTanks := [ ] ;
55554: LD_ADDR_EXP 49
55558: PUSH
55559: EMPTY
55560: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
55561: LD_ADDR_EXP 50
55565: PUSH
55566: EMPTY
55567: ST_TO_ADDR
// hackLimit := 3 ;
55568: LD_ADDR_EXP 51
55572: PUSH
55573: LD_INT 3
55575: ST_TO_ADDR
// hackDist := 12 ;
55576: LD_ADDR_EXP 52
55580: PUSH
55581: LD_INT 12
55583: ST_TO_ADDR
// hackCounter := [ ] ;
55584: LD_ADDR_EXP 53
55588: PUSH
55589: EMPTY
55590: ST_TO_ADDR
// end ;
55591: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
55592: LD_EXP 48
55596: IFFALSE 55614
55598: PUSH
55599: LD_INT 34
55601: PUSH
55602: LD_INT 99
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PPUSH
55609: CALL_OW 69
55613: AND
55614: IFFALSE 55867
55616: GO 55618
55618: DISABLE
55619: LD_INT 0
55621: PPUSH
55622: PPUSH
// begin enable ;
55623: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
55624: LD_ADDR_VAR 0 1
55628: PUSH
55629: LD_INT 34
55631: PUSH
55632: LD_INT 99
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PPUSH
55639: CALL_OW 69
55643: PUSH
55644: FOR_IN
55645: IFFALSE 55865
// begin if not i in hackTanks then
55647: LD_VAR 0 1
55651: PUSH
55652: LD_EXP 49
55656: IN
55657: NOT
55658: IFFALSE 55741
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
55660: LD_ADDR_EXP 49
55664: PUSH
55665: LD_EXP 49
55669: PPUSH
55670: LD_EXP 49
55674: PUSH
55675: LD_INT 1
55677: PLUS
55678: PPUSH
55679: LD_VAR 0 1
55683: PPUSH
55684: CALL_OW 1
55688: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
55689: LD_ADDR_EXP 50
55693: PUSH
55694: LD_EXP 50
55698: PPUSH
55699: LD_EXP 50
55703: PUSH
55704: LD_INT 1
55706: PLUS
55707: PPUSH
55708: EMPTY
55709: PPUSH
55710: CALL_OW 1
55714: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
55715: LD_ADDR_EXP 53
55719: PUSH
55720: LD_EXP 53
55724: PPUSH
55725: LD_EXP 53
55729: PUSH
55730: LD_INT 1
55732: PLUS
55733: PPUSH
55734: EMPTY
55735: PPUSH
55736: CALL_OW 1
55740: ST_TO_ADDR
// end ; if not IsOk ( i ) then
55741: LD_VAR 0 1
55745: PPUSH
55746: CALL_OW 302
55750: NOT
55751: IFFALSE 55764
// begin HackUnlinkAll ( i ) ;
55753: LD_VAR 0 1
55757: PPUSH
55758: CALL 55870 0 1
// continue ;
55762: GO 55644
// end ; HackCheckCapturedStatus ( i ) ;
55764: LD_VAR 0 1
55768: PPUSH
55769: CALL 56315 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
55773: LD_ADDR_VAR 0 2
55777: PUSH
55778: LD_INT 81
55780: PUSH
55781: LD_VAR 0 1
55785: PPUSH
55786: CALL_OW 255
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 33
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 91
55807: PUSH
55808: LD_VAR 0 1
55812: PUSH
55813: LD_EXP 52
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 50
55825: PUSH
55826: EMPTY
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: PPUSH
55835: CALL_OW 69
55839: ST_TO_ADDR
// if not tmp then
55840: LD_VAR 0 2
55844: NOT
55845: IFFALSE 55849
// continue ;
55847: GO 55644
// HackLink ( i , tmp ) ;
55849: LD_VAR 0 1
55853: PPUSH
55854: LD_VAR 0 2
55858: PPUSH
55859: CALL 56006 0 2
// end ;
55863: GO 55644
55865: POP
55866: POP
// end ;
55867: PPOPN 2
55869: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
55870: LD_INT 0
55872: PPUSH
55873: PPUSH
55874: PPUSH
// if not hack in hackTanks then
55875: LD_VAR 0 1
55879: PUSH
55880: LD_EXP 49
55884: IN
55885: NOT
55886: IFFALSE 55890
// exit ;
55888: GO 56001
// index := GetElementIndex ( hackTanks , hack ) ;
55890: LD_ADDR_VAR 0 4
55894: PUSH
55895: LD_EXP 49
55899: PPUSH
55900: LD_VAR 0 1
55904: PPUSH
55905: CALL 14593 0 2
55909: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
55910: LD_EXP 50
55914: PUSH
55915: LD_VAR 0 4
55919: ARRAY
55920: IFFALSE 56001
// begin for i in hackTanksCaptured [ index ] do
55922: LD_ADDR_VAR 0 3
55926: PUSH
55927: LD_EXP 50
55931: PUSH
55932: LD_VAR 0 4
55936: ARRAY
55937: PUSH
55938: FOR_IN
55939: IFFALSE 55965
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
55941: LD_VAR 0 3
55945: PUSH
55946: LD_INT 1
55948: ARRAY
55949: PPUSH
55950: LD_VAR 0 3
55954: PUSH
55955: LD_INT 2
55957: ARRAY
55958: PPUSH
55959: CALL_OW 235
55963: GO 55938
55965: POP
55966: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
55967: LD_ADDR_EXP 50
55971: PUSH
55972: LD_EXP 50
55976: PPUSH
55977: LD_VAR 0 4
55981: PPUSH
55982: EMPTY
55983: PPUSH
55984: CALL_OW 1
55988: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
55989: LD_VAR 0 1
55993: PPUSH
55994: LD_INT 0
55996: PPUSH
55997: CALL_OW 505
// end ; end ;
56001: LD_VAR 0 2
56005: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56006: LD_INT 0
56008: PPUSH
56009: PPUSH
56010: PPUSH
// if not hack in hackTanks or not vehicles then
56011: LD_VAR 0 1
56015: PUSH
56016: LD_EXP 49
56020: IN
56021: NOT
56022: IFTRUE 56031
56024: PUSH
56025: LD_VAR 0 2
56029: NOT
56030: OR
56031: IFFALSE 56035
// exit ;
56033: GO 56310
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56035: LD_ADDR_VAR 0 2
56039: PUSH
56040: LD_VAR 0 1
56044: PPUSH
56045: LD_VAR 0 2
56049: PPUSH
56050: LD_INT 1
56052: PPUSH
56053: LD_INT 1
56055: PPUSH
56056: CALL 15245 0 4
56060: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56061: LD_ADDR_VAR 0 5
56065: PUSH
56066: LD_EXP 49
56070: PPUSH
56071: LD_VAR 0 1
56075: PPUSH
56076: CALL 14593 0 2
56080: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56081: LD_EXP 50
56085: PUSH
56086: LD_VAR 0 5
56090: ARRAY
56091: PUSH
56092: LD_EXP 51
56096: LESS
56097: IFFALSE 56286
// begin for i := 1 to vehicles do
56099: LD_ADDR_VAR 0 4
56103: PUSH
56104: DOUBLE
56105: LD_INT 1
56107: DEC
56108: ST_TO_ADDR
56109: LD_VAR 0 2
56113: PUSH
56114: FOR_TO
56115: IFFALSE 56284
// begin if hackTanksCaptured [ index ] = hackLimit then
56117: LD_EXP 50
56121: PUSH
56122: LD_VAR 0 5
56126: ARRAY
56127: PUSH
56128: LD_EXP 51
56132: EQUAL
56133: IFFALSE 56137
// break ;
56135: GO 56284
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56137: LD_ADDR_EXP 53
56141: PUSH
56142: LD_EXP 53
56146: PPUSH
56147: LD_VAR 0 5
56151: PPUSH
56152: LD_EXP 53
56156: PUSH
56157: LD_VAR 0 5
56161: ARRAY
56162: PUSH
56163: LD_INT 1
56165: PLUS
56166: PPUSH
56167: CALL_OW 1
56171: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56172: LD_ADDR_EXP 50
56176: PUSH
56177: LD_EXP 50
56181: PPUSH
56182: LD_VAR 0 5
56186: PUSH
56187: LD_EXP 50
56191: PUSH
56192: LD_VAR 0 5
56196: ARRAY
56197: PUSH
56198: LD_INT 1
56200: PLUS
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PPUSH
56206: LD_VAR 0 2
56210: PUSH
56211: LD_VAR 0 4
56215: ARRAY
56216: PUSH
56217: LD_VAR 0 2
56221: PUSH
56222: LD_VAR 0 4
56226: ARRAY
56227: PPUSH
56228: CALL_OW 255
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PPUSH
56237: CALL 14810 0 3
56241: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
56242: LD_VAR 0 2
56246: PUSH
56247: LD_VAR 0 4
56251: ARRAY
56252: PPUSH
56253: LD_VAR 0 1
56257: PPUSH
56258: CALL_OW 255
56262: PPUSH
56263: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
56267: LD_VAR 0 2
56271: PUSH
56272: LD_VAR 0 4
56276: ARRAY
56277: PPUSH
56278: CALL_OW 141
// end ;
56282: GO 56114
56284: POP
56285: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56286: LD_VAR 0 1
56290: PPUSH
56291: LD_EXP 50
56295: PUSH
56296: LD_VAR 0 5
56300: ARRAY
56301: PUSH
56302: LD_INT 0
56304: PLUS
56305: PPUSH
56306: CALL_OW 505
// end ;
56310: LD_VAR 0 3
56314: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
56315: LD_INT 0
56317: PPUSH
56318: PPUSH
56319: PPUSH
56320: PPUSH
// if not hack in hackTanks then
56321: LD_VAR 0 1
56325: PUSH
56326: LD_EXP 49
56330: IN
56331: NOT
56332: IFFALSE 56336
// exit ;
56334: GO 56580
// index := GetElementIndex ( hackTanks , hack ) ;
56336: LD_ADDR_VAR 0 4
56340: PUSH
56341: LD_EXP 49
56345: PPUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: CALL 14593 0 2
56355: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
56356: LD_ADDR_VAR 0 3
56360: PUSH
56361: DOUBLE
56362: LD_EXP 50
56366: PUSH
56367: LD_VAR 0 4
56371: ARRAY
56372: INC
56373: ST_TO_ADDR
56374: LD_INT 1
56376: PUSH
56377: FOR_DOWNTO
56378: IFFALSE 56554
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
56380: LD_ADDR_VAR 0 5
56384: PUSH
56385: LD_EXP 50
56389: PUSH
56390: LD_VAR 0 4
56394: ARRAY
56395: PUSH
56396: LD_VAR 0 3
56400: ARRAY
56401: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
56402: LD_VAR 0 5
56406: PUSH
56407: LD_INT 1
56409: ARRAY
56410: PPUSH
56411: CALL_OW 302
56415: NOT
56416: IFTRUE 56444
56418: PUSH
56419: LD_VAR 0 5
56423: PUSH
56424: LD_INT 1
56426: ARRAY
56427: PPUSH
56428: CALL_OW 255
56432: PUSH
56433: LD_VAR 0 1
56437: PPUSH
56438: CALL_OW 255
56442: NONEQUAL
56443: OR
56444: IFFALSE 56552
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
56446: LD_VAR 0 5
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PPUSH
56455: CALL_OW 305
56459: IFFALSE 56487
56461: PUSH
56462: LD_VAR 0 5
56466: PUSH
56467: LD_INT 1
56469: ARRAY
56470: PPUSH
56471: CALL_OW 255
56475: PUSH
56476: LD_VAR 0 1
56480: PPUSH
56481: CALL_OW 255
56485: EQUAL
56486: AND
56487: IFFALSE 56511
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
56489: LD_VAR 0 5
56493: PUSH
56494: LD_INT 1
56496: ARRAY
56497: PPUSH
56498: LD_VAR 0 5
56502: PUSH
56503: LD_INT 2
56505: ARRAY
56506: PPUSH
56507: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
56511: LD_ADDR_EXP 50
56515: PUSH
56516: LD_EXP 50
56520: PPUSH
56521: LD_VAR 0 4
56525: PPUSH
56526: LD_EXP 50
56530: PUSH
56531: LD_VAR 0 4
56535: ARRAY
56536: PPUSH
56537: LD_VAR 0 3
56541: PPUSH
56542: CALL_OW 3
56546: PPUSH
56547: CALL_OW 1
56551: ST_TO_ADDR
// end ; end ;
56552: GO 56377
56554: POP
56555: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
56556: LD_VAR 0 1
56560: PPUSH
56561: LD_EXP 50
56565: PUSH
56566: LD_VAR 0 4
56570: ARRAY
56571: PUSH
56572: LD_INT 0
56574: PLUS
56575: PPUSH
56576: CALL_OW 505
// end ;
56580: LD_VAR 0 2
56584: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
56585: LD_INT 0
56587: PPUSH
56588: PPUSH
56589: PPUSH
56590: PPUSH
// if not hack in hackTanks then
56591: LD_VAR 0 1
56595: PUSH
56596: LD_EXP 49
56600: IN
56601: NOT
56602: IFFALSE 56606
// exit ;
56604: GO 56691
// index := GetElementIndex ( hackTanks , hack ) ;
56606: LD_ADDR_VAR 0 5
56610: PUSH
56611: LD_EXP 49
56615: PPUSH
56616: LD_VAR 0 1
56620: PPUSH
56621: CALL 14593 0 2
56625: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
56626: LD_ADDR_VAR 0 4
56630: PUSH
56631: DOUBLE
56632: LD_INT 1
56634: DEC
56635: ST_TO_ADDR
56636: LD_EXP 50
56640: PUSH
56641: LD_VAR 0 5
56645: ARRAY
56646: PUSH
56647: FOR_TO
56648: IFFALSE 56689
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
56650: LD_EXP 50
56654: PUSH
56655: LD_VAR 0 5
56659: ARRAY
56660: PUSH
56661: LD_VAR 0 4
56665: ARRAY
56666: PUSH
56667: LD_INT 1
56669: ARRAY
56670: PUSH
56671: LD_VAR 0 2
56675: EQUAL
56676: IFFALSE 56687
// KillUnit ( vehicle ) ;
56678: LD_VAR 0 2
56682: PPUSH
56683: CALL_OW 66
56687: GO 56647
56689: POP
56690: POP
// end ;
56691: LD_VAR 0 3
56695: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
56696: LD_EXP 54
56700: NOT
56701: IFFALSE 56736
56703: GO 56705
56705: DISABLE
// begin initMiner := true ;
56706: LD_ADDR_EXP 54
56710: PUSH
56711: LD_INT 1
56713: ST_TO_ADDR
// minersList := [ ] ;
56714: LD_ADDR_EXP 55
56718: PUSH
56719: EMPTY
56720: ST_TO_ADDR
// minerMinesList := [ ] ;
56721: LD_ADDR_EXP 56
56725: PUSH
56726: EMPTY
56727: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
56728: LD_ADDR_EXP 57
56732: PUSH
56733: LD_INT 5
56735: ST_TO_ADDR
// end ;
56736: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
56737: LD_EXP 54
56741: IFFALSE 56759
56743: PUSH
56744: LD_INT 34
56746: PUSH
56747: LD_INT 81
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PPUSH
56754: CALL_OW 69
56758: AND
56759: IFFALSE 57222
56761: GO 56763
56763: DISABLE
56764: LD_INT 0
56766: PPUSH
56767: PPUSH
56768: PPUSH
56769: PPUSH
// begin enable ;
56770: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
56771: LD_ADDR_VAR 0 1
56775: PUSH
56776: LD_INT 34
56778: PUSH
56779: LD_INT 81
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PPUSH
56786: CALL_OW 69
56790: PUSH
56791: FOR_IN
56792: IFFALSE 56864
// begin if not i in minersList then
56794: LD_VAR 0 1
56798: PUSH
56799: LD_EXP 55
56803: IN
56804: NOT
56805: IFFALSE 56862
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
56807: LD_ADDR_EXP 55
56811: PUSH
56812: LD_EXP 55
56816: PPUSH
56817: LD_EXP 55
56821: PUSH
56822: LD_INT 1
56824: PLUS
56825: PPUSH
56826: LD_VAR 0 1
56830: PPUSH
56831: CALL_OW 1
56835: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56836: LD_ADDR_EXP 56
56840: PUSH
56841: LD_EXP 56
56845: PPUSH
56846: LD_EXP 56
56850: PUSH
56851: LD_INT 1
56853: PLUS
56854: PPUSH
56855: EMPTY
56856: PPUSH
56857: CALL_OW 1
56861: ST_TO_ADDR
// end end ;
56862: GO 56791
56864: POP
56865: POP
// for i := minerMinesList downto 1 do
56866: LD_ADDR_VAR 0 1
56870: PUSH
56871: DOUBLE
56872: LD_EXP 56
56876: INC
56877: ST_TO_ADDR
56878: LD_INT 1
56880: PUSH
56881: FOR_DOWNTO
56882: IFFALSE 57220
// begin if IsLive ( minersList [ i ] ) then
56884: LD_EXP 55
56888: PUSH
56889: LD_VAR 0 1
56893: ARRAY
56894: PPUSH
56895: CALL_OW 300
56899: IFFALSE 56927
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
56901: LD_EXP 55
56905: PUSH
56906: LD_VAR 0 1
56910: ARRAY
56911: PPUSH
56912: LD_EXP 56
56916: PUSH
56917: LD_VAR 0 1
56921: ARRAY
56922: PPUSH
56923: CALL_OW 505
// if not minerMinesList [ i ] then
56927: LD_EXP 56
56931: PUSH
56932: LD_VAR 0 1
56936: ARRAY
56937: NOT
56938: IFFALSE 56942
// continue ;
56940: GO 56881
// for j := minerMinesList [ i ] downto 1 do
56942: LD_ADDR_VAR 0 2
56946: PUSH
56947: DOUBLE
56948: LD_EXP 56
56952: PUSH
56953: LD_VAR 0 1
56957: ARRAY
56958: INC
56959: ST_TO_ADDR
56960: LD_INT 1
56962: PUSH
56963: FOR_DOWNTO
56964: IFFALSE 57216
// begin side := GetSide ( minersList [ i ] ) ;
56966: LD_ADDR_VAR 0 3
56970: PUSH
56971: LD_EXP 55
56975: PUSH
56976: LD_VAR 0 1
56980: ARRAY
56981: PPUSH
56982: CALL_OW 255
56986: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
56987: LD_ADDR_VAR 0 4
56991: PUSH
56992: LD_EXP 56
56996: PUSH
56997: LD_VAR 0 1
57001: ARRAY
57002: PUSH
57003: LD_VAR 0 2
57007: ARRAY
57008: PUSH
57009: LD_INT 1
57011: ARRAY
57012: PPUSH
57013: LD_EXP 56
57017: PUSH
57018: LD_VAR 0 1
57022: ARRAY
57023: PUSH
57024: LD_VAR 0 2
57028: ARRAY
57029: PUSH
57030: LD_INT 2
57032: ARRAY
57033: PPUSH
57034: CALL_OW 428
57038: ST_TO_ADDR
// if not tmp then
57039: LD_VAR 0 4
57043: NOT
57044: IFFALSE 57048
// continue ;
57046: GO 56963
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57048: LD_VAR 0 4
57052: PUSH
57053: LD_INT 81
57055: PUSH
57056: LD_VAR 0 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PPUSH
57065: CALL_OW 69
57069: IN
57070: IFFALSE 57120
57072: PUSH
57073: LD_EXP 56
57077: PUSH
57078: LD_VAR 0 1
57082: ARRAY
57083: PUSH
57084: LD_VAR 0 2
57088: ARRAY
57089: PUSH
57090: LD_INT 1
57092: ARRAY
57093: PPUSH
57094: LD_EXP 56
57098: PUSH
57099: LD_VAR 0 1
57103: ARRAY
57104: PUSH
57105: LD_VAR 0 2
57109: ARRAY
57110: PUSH
57111: LD_INT 2
57113: ARRAY
57114: PPUSH
57115: CALL_OW 458
57119: AND
57120: IFFALSE 57214
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
57122: LD_EXP 56
57126: PUSH
57127: LD_VAR 0 1
57131: ARRAY
57132: PUSH
57133: LD_VAR 0 2
57137: ARRAY
57138: PUSH
57139: LD_INT 1
57141: ARRAY
57142: PPUSH
57143: LD_EXP 56
57147: PUSH
57148: LD_VAR 0 1
57152: ARRAY
57153: PUSH
57154: LD_VAR 0 2
57158: ARRAY
57159: PUSH
57160: LD_INT 2
57162: ARRAY
57163: PPUSH
57164: LD_VAR 0 3
57168: PPUSH
57169: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57173: LD_ADDR_EXP 56
57177: PUSH
57178: LD_EXP 56
57182: PPUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: LD_EXP 56
57192: PUSH
57193: LD_VAR 0 1
57197: ARRAY
57198: PPUSH
57199: LD_VAR 0 2
57203: PPUSH
57204: CALL_OW 3
57208: PPUSH
57209: CALL_OW 1
57213: ST_TO_ADDR
// end ; end ;
57214: GO 56963
57216: POP
57217: POP
// end ;
57218: GO 56881
57220: POP
57221: POP
// end ;
57222: PPOPN 4
57224: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
57225: LD_INT 0
57227: PPUSH
57228: PPUSH
// result := false ;
57229: LD_ADDR_VAR 0 4
57233: PUSH
57234: LD_INT 0
57236: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
57237: LD_VAR 0 1
57241: PPUSH
57242: CALL_OW 264
57246: PUSH
57247: LD_INT 81
57249: EQUAL
57250: NOT
57251: IFFALSE 57255
// exit ;
57253: GO 57499
// index := GetElementIndex ( minersList , unit ) ;
57255: LD_ADDR_VAR 0 5
57259: PUSH
57260: LD_EXP 55
57264: PPUSH
57265: LD_VAR 0 1
57269: PPUSH
57270: CALL 14593 0 2
57274: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
57275: LD_EXP 56
57279: PUSH
57280: LD_VAR 0 5
57284: ARRAY
57285: PUSH
57286: LD_EXP 57
57290: GREATEREQUAL
57291: IFFALSE 57295
// exit ;
57293: GO 57499
// ComMoveXY ( unit , x , y ) ;
57295: LD_VAR 0 1
57299: PPUSH
57300: LD_VAR 0 2
57304: PPUSH
57305: LD_VAR 0 3
57309: PPUSH
57310: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
57314: LD_INT 35
57316: PPUSH
57317: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
57321: LD_VAR 0 1
57325: PPUSH
57326: LD_VAR 0 2
57330: PPUSH
57331: LD_VAR 0 3
57335: PPUSH
57336: CALL 46639 0 3
57340: NOT
57341: IFFALSE 57354
57343: PUSH
57344: LD_VAR 0 1
57348: PPUSH
57349: CALL_OW 314
57353: AND
57354: IFFALSE 57358
// exit ;
57356: GO 57499
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
57358: LD_VAR 0 2
57362: PPUSH
57363: LD_VAR 0 3
57367: PPUSH
57368: CALL_OW 428
57372: PUSH
57373: LD_VAR 0 1
57377: EQUAL
57378: IFFALSE 57392
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: CALL_OW 314
57390: NOT
57391: AND
57392: IFFALSE 57314
// PlaySoundXY ( x , y , PlantMine ) ;
57394: LD_VAR 0 2
57398: PPUSH
57399: LD_VAR 0 3
57403: PPUSH
57404: LD_STRING PlantMine
57406: PPUSH
57407: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
57411: LD_VAR 0 2
57415: PPUSH
57416: LD_VAR 0 3
57420: PPUSH
57421: LD_VAR 0 1
57425: PPUSH
57426: CALL_OW 255
57430: PPUSH
57431: LD_INT 0
57433: PPUSH
57434: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
57438: LD_ADDR_EXP 56
57442: PUSH
57443: LD_EXP 56
57447: PPUSH
57448: LD_VAR 0 5
57452: PUSH
57453: LD_EXP 56
57457: PUSH
57458: LD_VAR 0 5
57462: ARRAY
57463: PUSH
57464: LD_INT 1
57466: PLUS
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PPUSH
57472: LD_VAR 0 2
57476: PUSH
57477: LD_VAR 0 3
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PPUSH
57486: CALL 14810 0 3
57490: ST_TO_ADDR
// result := true ;
57491: LD_ADDR_VAR 0 4
57495: PUSH
57496: LD_INT 1
57498: ST_TO_ADDR
// end ;
57499: LD_VAR 0 4
57503: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
57504: LD_INT 0
57506: PPUSH
57507: PPUSH
57508: PPUSH
// if not unit in minersList then
57509: LD_VAR 0 1
57513: PUSH
57514: LD_EXP 55
57518: IN
57519: NOT
57520: IFFALSE 57524
// exit ;
57522: GO 57918
// index := GetElementIndex ( minersList , unit ) ;
57524: LD_ADDR_VAR 0 6
57528: PUSH
57529: LD_EXP 55
57533: PPUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: CALL 14593 0 2
57543: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
57544: LD_ADDR_VAR 0 5
57548: PUSH
57549: DOUBLE
57550: LD_EXP 56
57554: PUSH
57555: LD_VAR 0 6
57559: ARRAY
57560: INC
57561: ST_TO_ADDR
57562: LD_INT 1
57564: PUSH
57565: FOR_DOWNTO
57566: IFFALSE 57729
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
57568: LD_EXP 56
57572: PUSH
57573: LD_VAR 0 6
57577: ARRAY
57578: PUSH
57579: LD_VAR 0 5
57583: ARRAY
57584: PUSH
57585: LD_INT 1
57587: ARRAY
57588: PUSH
57589: LD_VAR 0 2
57593: EQUAL
57594: IFFALSE 57624
57596: PUSH
57597: LD_EXP 56
57601: PUSH
57602: LD_VAR 0 6
57606: ARRAY
57607: PUSH
57608: LD_VAR 0 5
57612: ARRAY
57613: PUSH
57614: LD_INT 2
57616: ARRAY
57617: PUSH
57618: LD_VAR 0 3
57622: EQUAL
57623: AND
57624: IFFALSE 57727
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57626: LD_EXP 56
57630: PUSH
57631: LD_VAR 0 6
57635: ARRAY
57636: PUSH
57637: LD_VAR 0 5
57641: ARRAY
57642: PUSH
57643: LD_INT 1
57645: ARRAY
57646: PPUSH
57647: LD_EXP 56
57651: PUSH
57652: LD_VAR 0 6
57656: ARRAY
57657: PUSH
57658: LD_VAR 0 5
57662: ARRAY
57663: PUSH
57664: LD_INT 2
57666: ARRAY
57667: PPUSH
57668: LD_VAR 0 1
57672: PPUSH
57673: CALL_OW 255
57677: PPUSH
57678: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57682: LD_ADDR_EXP 56
57686: PUSH
57687: LD_EXP 56
57691: PPUSH
57692: LD_VAR 0 6
57696: PPUSH
57697: LD_EXP 56
57701: PUSH
57702: LD_VAR 0 6
57706: ARRAY
57707: PPUSH
57708: LD_VAR 0 5
57712: PPUSH
57713: CALL_OW 3
57717: PPUSH
57718: CALL_OW 1
57722: ST_TO_ADDR
// exit ;
57723: POP
57724: POP
57725: GO 57918
// end ; end ;
57727: GO 57565
57729: POP
57730: POP
// for i := minerMinesList [ index ] downto 1 do
57731: LD_ADDR_VAR 0 5
57735: PUSH
57736: DOUBLE
57737: LD_EXP 56
57741: PUSH
57742: LD_VAR 0 6
57746: ARRAY
57747: INC
57748: ST_TO_ADDR
57749: LD_INT 1
57751: PUSH
57752: FOR_DOWNTO
57753: IFFALSE 57916
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
57755: LD_EXP 56
57759: PUSH
57760: LD_VAR 0 6
57764: ARRAY
57765: PUSH
57766: LD_VAR 0 5
57770: ARRAY
57771: PUSH
57772: LD_INT 1
57774: ARRAY
57775: PPUSH
57776: LD_EXP 56
57780: PUSH
57781: LD_VAR 0 6
57785: ARRAY
57786: PUSH
57787: LD_VAR 0 5
57791: ARRAY
57792: PUSH
57793: LD_INT 2
57795: ARRAY
57796: PPUSH
57797: LD_VAR 0 2
57801: PPUSH
57802: LD_VAR 0 3
57806: PPUSH
57807: CALL_OW 298
57811: PUSH
57812: LD_INT 6
57814: LESS
57815: IFFALSE 57914
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
57817: LD_EXP 56
57821: PUSH
57822: LD_VAR 0 6
57826: ARRAY
57827: PUSH
57828: LD_VAR 0 5
57832: ARRAY
57833: PUSH
57834: LD_INT 1
57836: ARRAY
57837: PPUSH
57838: LD_EXP 56
57842: PUSH
57843: LD_VAR 0 6
57847: ARRAY
57848: PUSH
57849: LD_VAR 0 5
57853: ARRAY
57854: PUSH
57855: LD_INT 2
57857: ARRAY
57858: PPUSH
57859: LD_VAR 0 1
57863: PPUSH
57864: CALL_OW 255
57868: PPUSH
57869: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
57873: LD_ADDR_EXP 56
57877: PUSH
57878: LD_EXP 56
57882: PPUSH
57883: LD_VAR 0 6
57887: PPUSH
57888: LD_EXP 56
57892: PUSH
57893: LD_VAR 0 6
57897: ARRAY
57898: PPUSH
57899: LD_VAR 0 5
57903: PPUSH
57904: CALL_OW 3
57908: PPUSH
57909: CALL_OW 1
57913: ST_TO_ADDR
// end ; end ;
57914: GO 57752
57916: POP
57917: POP
// end ;
57918: LD_VAR 0 4
57922: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
57923: LD_INT 0
57925: PPUSH
57926: PPUSH
57927: PPUSH
57928: PPUSH
57929: PPUSH
57930: PPUSH
57931: PPUSH
57932: PPUSH
57933: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
57934: LD_VAR 0 1
57938: PPUSH
57939: CALL_OW 264
57943: PUSH
57944: LD_INT 81
57946: EQUAL
57947: NOT
57948: IFTRUE 57963
57950: PUSH
57951: LD_VAR 0 1
57955: PUSH
57956: LD_EXP 55
57960: IN
57961: NOT
57962: OR
57963: IFFALSE 57967
// exit ;
57965: GO 58293
// index := GetElementIndex ( minersList , unit ) ;
57967: LD_ADDR_VAR 0 6
57971: PUSH
57972: LD_EXP 55
57976: PPUSH
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL 14593 0 2
57986: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
57987: LD_ADDR_VAR 0 8
57991: PUSH
57992: LD_EXP 57
57996: PUSH
57997: LD_EXP 56
58001: PUSH
58002: LD_VAR 0 6
58006: ARRAY
58007: MINUS
58008: ST_TO_ADDR
// if not minesFreeAmount then
58009: LD_VAR 0 8
58013: NOT
58014: IFFALSE 58018
// exit ;
58016: GO 58293
// tmp := [ ] ;
58018: LD_ADDR_VAR 0 7
58022: PUSH
58023: EMPTY
58024: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58025: LD_ADDR_VAR 0 5
58029: PUSH
58030: DOUBLE
58031: LD_INT 1
58033: DEC
58034: ST_TO_ADDR
58035: LD_VAR 0 8
58039: PUSH
58040: FOR_TO
58041: IFFALSE 58240
// begin _d := rand ( 0 , 5 ) ;
58043: LD_ADDR_VAR 0 11
58047: PUSH
58048: LD_INT 0
58050: PPUSH
58051: LD_INT 5
58053: PPUSH
58054: CALL_OW 12
58058: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58059: LD_ADDR_VAR 0 12
58063: PUSH
58064: LD_INT 2
58066: PPUSH
58067: LD_INT 6
58069: PPUSH
58070: CALL_OW 12
58074: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58075: LD_ADDR_VAR 0 9
58079: PUSH
58080: LD_VAR 0 2
58084: PPUSH
58085: LD_VAR 0 11
58089: PPUSH
58090: LD_VAR 0 12
58094: PPUSH
58095: CALL_OW 272
58099: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58100: LD_ADDR_VAR 0 10
58104: PUSH
58105: LD_VAR 0 3
58109: PPUSH
58110: LD_VAR 0 11
58114: PPUSH
58115: LD_VAR 0 12
58119: PPUSH
58120: CALL_OW 273
58124: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58125: LD_VAR 0 9
58129: PPUSH
58130: LD_VAR 0 10
58134: PPUSH
58135: CALL_OW 488
58139: IFFALSE 58163
58141: PUSH
58142: LD_VAR 0 9
58146: PUSH
58147: LD_VAR 0 10
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_VAR 0 7
58160: IN
58161: NOT
58162: AND
58163: IFFALSE 58182
58165: PUSH
58166: LD_VAR 0 9
58170: PPUSH
58171: LD_VAR 0 10
58175: PPUSH
58176: CALL_OW 458
58180: NOT
58181: AND
58182: IFFALSE 58224
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
58184: LD_ADDR_VAR 0 7
58188: PUSH
58189: LD_VAR 0 7
58193: PPUSH
58194: LD_VAR 0 7
58198: PUSH
58199: LD_INT 1
58201: PLUS
58202: PPUSH
58203: LD_VAR 0 9
58207: PUSH
58208: LD_VAR 0 10
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PPUSH
58217: CALL_OW 1
58221: ST_TO_ADDR
58222: GO 58238
// i := i - 1 ;
58224: LD_ADDR_VAR 0 5
58228: PUSH
58229: LD_VAR 0 5
58233: PUSH
58234: LD_INT 1
58236: MINUS
58237: ST_TO_ADDR
// end ;
58238: GO 58040
58240: POP
58241: POP
// for i in tmp do
58242: LD_ADDR_VAR 0 5
58246: PUSH
58247: LD_VAR 0 7
58251: PUSH
58252: FOR_IN
58253: IFFALSE 58291
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
58255: LD_VAR 0 1
58259: PPUSH
58260: LD_VAR 0 5
58264: PUSH
58265: LD_INT 1
58267: ARRAY
58268: PPUSH
58269: LD_VAR 0 5
58273: PUSH
58274: LD_INT 2
58276: ARRAY
58277: PPUSH
58278: CALL 57225 0 3
58282: NOT
58283: IFFALSE 58289
// exit ;
58285: POP
58286: POP
58287: GO 58293
58289: GO 58252
58291: POP
58292: POP
// end ;
58293: LD_VAR 0 4
58297: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
58298: LD_INT 0
58300: PPUSH
58301: PPUSH
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
// if GetClass ( unit ) <> class_sniper then
58309: LD_VAR 0 1
58313: PPUSH
58314: CALL_OW 257
58318: PUSH
58319: LD_INT 5
58321: NONEQUAL
58322: IFFALSE 58326
// exit ;
58324: GO 58796
// dist := 8 ;
58326: LD_ADDR_VAR 0 5
58330: PUSH
58331: LD_INT 8
58333: ST_TO_ADDR
// viewRange := 12 ;
58334: LD_ADDR_VAR 0 8
58338: PUSH
58339: LD_INT 12
58341: ST_TO_ADDR
// side := GetSide ( unit ) ;
58342: LD_ADDR_VAR 0 6
58346: PUSH
58347: LD_VAR 0 1
58351: PPUSH
58352: CALL_OW 255
58356: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
58357: LD_INT 61
58359: PPUSH
58360: LD_VAR 0 6
58364: PPUSH
58365: CALL_OW 321
58369: PUSH
58370: LD_INT 2
58372: EQUAL
58373: IFFALSE 58383
// viewRange := 16 ;
58375: LD_ADDR_VAR 0 8
58379: PUSH
58380: LD_INT 16
58382: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
58383: LD_VAR 0 1
58387: PPUSH
58388: LD_VAR 0 2
58392: PPUSH
58393: LD_VAR 0 3
58397: PPUSH
58398: CALL_OW 297
58402: PUSH
58403: LD_VAR 0 5
58407: GREATER
58408: IFFALSE 58487
// begin ComMoveXY ( unit , x , y ) ;
58410: LD_VAR 0 1
58414: PPUSH
58415: LD_VAR 0 2
58419: PPUSH
58420: LD_VAR 0 3
58424: PPUSH
58425: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58429: LD_INT 35
58431: PPUSH
58432: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
58436: LD_VAR 0 1
58440: PPUSH
58441: LD_VAR 0 2
58445: PPUSH
58446: LD_VAR 0 3
58450: PPUSH
58451: CALL 46639 0 3
58455: NOT
58456: IFFALSE 58460
// exit ;
58458: GO 58796
// until GetDistUnitXY ( unit , x , y ) < dist ;
58460: LD_VAR 0 1
58464: PPUSH
58465: LD_VAR 0 2
58469: PPUSH
58470: LD_VAR 0 3
58474: PPUSH
58475: CALL_OW 297
58479: PUSH
58480: LD_VAR 0 5
58484: LESS
58485: IFFALSE 58429
// end ; ComTurnXY ( unit , x , y ) ;
58487: LD_VAR 0 1
58491: PPUSH
58492: LD_VAR 0 2
58496: PPUSH
58497: LD_VAR 0 3
58501: PPUSH
58502: CALL_OW 118
// repeat if Multiplayer then
58506: LD_OWVAR 4
58510: IFFALSE 58521
// wait ( 35 ) else
58512: LD_INT 35
58514: PPUSH
58515: CALL_OW 67
58519: GO 58528
// wait ( 5 ) ;
58521: LD_INT 5
58523: PPUSH
58524: CALL_OW 67
// _d := GetDir ( unit ) ;
58528: LD_ADDR_VAR 0 11
58532: PUSH
58533: LD_VAR 0 1
58537: PPUSH
58538: CALL_OW 254
58542: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
58543: LD_ADDR_VAR 0 7
58547: PUSH
58548: LD_VAR 0 1
58552: PPUSH
58553: CALL_OW 250
58557: PPUSH
58558: LD_VAR 0 1
58562: PPUSH
58563: CALL_OW 251
58567: PPUSH
58568: LD_VAR 0 2
58572: PPUSH
58573: LD_VAR 0 3
58577: PPUSH
58578: CALL 49275 0 4
58582: ST_TO_ADDR
// until dir = _d ;
58583: LD_VAR 0 7
58587: PUSH
58588: LD_VAR 0 11
58592: EQUAL
58593: IFFALSE 58506
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
58595: LD_ADDR_VAR 0 9
58599: PUSH
58600: LD_VAR 0 1
58604: PPUSH
58605: CALL_OW 250
58609: PPUSH
58610: LD_VAR 0 7
58614: PPUSH
58615: LD_VAR 0 5
58619: PPUSH
58620: CALL_OW 272
58624: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
58625: LD_ADDR_VAR 0 10
58629: PUSH
58630: LD_VAR 0 1
58634: PPUSH
58635: CALL_OW 251
58639: PPUSH
58640: LD_VAR 0 7
58644: PPUSH
58645: LD_VAR 0 5
58649: PPUSH
58650: CALL_OW 273
58654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58655: LD_VAR 0 9
58659: PPUSH
58660: LD_VAR 0 10
58664: PPUSH
58665: CALL_OW 488
58669: NOT
58670: IFFALSE 58674
// exit ;
58672: GO 58796
// ComAnimCustom ( unit , 1 ) ;
58674: LD_VAR 0 1
58678: PPUSH
58679: LD_INT 1
58681: PPUSH
58682: CALL_OW 592
// p := 0 ;
58686: LD_ADDR_VAR 0 12
58690: PUSH
58691: LD_INT 0
58693: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
58694: LD_VAR 0 9
58698: PPUSH
58699: LD_VAR 0 10
58703: PPUSH
58704: LD_VAR 0 6
58708: PPUSH
58709: LD_VAR 0 8
58713: PPUSH
58714: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
58718: LD_INT 35
58720: PPUSH
58721: CALL_OW 67
// p := Inc ( p ) ;
58725: LD_ADDR_VAR 0 12
58729: PUSH
58730: LD_VAR 0 12
58734: PPUSH
58735: CALL 49231 0 1
58739: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
58740: LD_VAR 0 12
58744: PUSH
58745: LD_INT 3
58747: EQUAL
58748: IFTRUE 58762
58750: PUSH
58751: LD_VAR 0 1
58755: PPUSH
58756: CALL_OW 302
58760: NOT
58761: OR
58762: IFTRUE 58775
58764: PUSH
58765: LD_VAR 0 1
58769: PPUSH
58770: CALL_OW 301
58774: OR
58775: IFFALSE 58718
// RemoveSeeing ( _x , _y , side ) ;
58777: LD_VAR 0 9
58781: PPUSH
58782: LD_VAR 0 10
58786: PPUSH
58787: LD_VAR 0 6
58791: PPUSH
58792: CALL_OW 331
// end ; end_of_file
58796: LD_VAR 0 4
58800: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
58801: LD_EXP 39
58805: IFFALSE 59146
58807: GO 58809
58809: DISABLE
58810: LD_INT 0
58812: PPUSH
58813: PPUSH
58814: PPUSH
// begin mpKingPoints := [ ] ;
58815: LD_ADDR_EXP 58
58819: PUSH
58820: EMPTY
58821: ST_TO_ADDR
// if mpTeamGame then
58822: LD_EXP 11
58826: IFFALSE 58880
// begin for i := 1 to Count ( mpTeams ) do
58828: LD_ADDR_VAR 0 1
58832: PUSH
58833: DOUBLE
58834: LD_INT 1
58836: DEC
58837: ST_TO_ADDR
58838: LD_EXP 10
58842: PPUSH
58843: CALL 11926 0 1
58847: PUSH
58848: FOR_TO
58849: IFFALSE 58876
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58851: LD_ADDR_EXP 58
58855: PUSH
58856: LD_EXP 58
58860: PPUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_INT 0
58868: PPUSH
58869: CALL_OW 1
58873: ST_TO_ADDR
58874: GO 58848
58876: POP
58877: POP
// end else
58878: GO 58923
// begin for i := 1 to 8 do
58880: LD_ADDR_VAR 0 1
58884: PUSH
58885: DOUBLE
58886: LD_INT 1
58888: DEC
58889: ST_TO_ADDR
58890: LD_INT 8
58892: PUSH
58893: FOR_TO
58894: IFFALSE 58921
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
58896: LD_ADDR_EXP 58
58900: PUSH
58901: LD_EXP 58
58905: PPUSH
58906: LD_VAR 0 1
58910: PPUSH
58911: LD_INT 0
58913: PPUSH
58914: CALL_OW 1
58918: ST_TO_ADDR
58919: GO 58893
58921: POP
58922: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
58923: LD_ADDR_VAR 0 3
58927: PUSH
58928: LD_EXP 2
58932: PPUSH
58933: LD_INT 0
58935: PPUSH
58936: CALL_OW 517
58940: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58941: LD_ADDR_VAR 0 1
58945: PUSH
58946: DOUBLE
58947: LD_INT 1
58949: DEC
58950: ST_TO_ADDR
58951: LD_VAR 0 3
58955: PUSH
58956: LD_INT 1
58958: ARRAY
58959: PUSH
58960: FOR_TO
58961: IFFALSE 59028
// for j := 1 to 8 do
58963: LD_ADDR_VAR 0 2
58967: PUSH
58968: DOUBLE
58969: LD_INT 1
58971: DEC
58972: ST_TO_ADDR
58973: LD_INT 8
58975: PUSH
58976: FOR_TO
58977: IFFALSE 59024
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
58979: LD_VAR 0 3
58983: PUSH
58984: LD_INT 1
58986: ARRAY
58987: PUSH
58988: LD_VAR 0 1
58992: ARRAY
58993: PPUSH
58994: LD_VAR 0 3
58998: PUSH
58999: LD_INT 2
59001: ARRAY
59002: PUSH
59003: LD_VAR 0 1
59007: ARRAY
59008: PPUSH
59009: LD_VAR 0 2
59013: PPUSH
59014: LD_INT 12
59016: NEG
59017: PPUSH
59018: CALL_OW 330
59022: GO 58976
59024: POP
59025: POP
59026: GO 58960
59028: POP
59029: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
59030: LD_EXP 34
59034: PPUSH
59035: LD_INT 1
59037: PPUSH
59038: CALL_OW 424
// UpdateCounter ;
59042: CALL 59652 0 0
// repeat wait ( 0 0$1 ) ;
59046: LD_INT 35
59048: PPUSH
59049: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59053: LD_ADDR_VAR 0 3
59057: PUSH
59058: LD_EXP 34
59062: PPUSH
59063: LD_INT 3
59065: PUSH
59066: LD_INT 57
59068: PUSH
59069: EMPTY
59070: LIST
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 50
59078: PUSH
59079: EMPTY
59080: LIST
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: LD_INT 30
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 30
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: LIST
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: PPUSH
59115: CALL_OW 70
59119: ST_TO_ADDR
// if not tmp then
59120: LD_VAR 0 3
59124: NOT
59125: IFFALSE 59129
// continue ;
59127: GO 59046
// AddPoints ( tmp ) ;
59129: LD_VAR 0 3
59133: PPUSH
59134: CALL 59330 0 1
// UpdateCounter ;
59138: CALL 59652 0 0
// until false ;
59142: LD_INT 0
59144: IFFALSE 59046
// end ;
59146: PPOPN 3
59148: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
59149: LD_EXP 39
59153: IFFALSE 59161
59155: PUSH
59156: LD_EXP 37
59160: AND
59161: IFFALSE 59327
59163: GO 59165
59165: DISABLE
59166: LD_INT 0
59168: PPUSH
59169: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
59170: LD_ADDR_VAR 0 2
59174: PUSH
59175: LD_EXP 2
59179: PPUSH
59180: LD_INT 0
59182: PPUSH
59183: CALL_OW 517
59187: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59188: LD_ADDR_VAR 0 1
59192: PUSH
59193: DOUBLE
59194: LD_INT 1
59196: DEC
59197: ST_TO_ADDR
59198: LD_VAR 0 2
59202: PUSH
59203: LD_INT 1
59205: ARRAY
59206: PUSH
59207: FOR_TO
59208: IFFALSE 59249
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
59210: LD_VAR 0 2
59214: PUSH
59215: LD_INT 1
59217: ARRAY
59218: PUSH
59219: LD_VAR 0 1
59223: ARRAY
59224: PPUSH
59225: LD_VAR 0 2
59229: PUSH
59230: LD_INT 2
59232: ARRAY
59233: PUSH
59234: LD_VAR 0 1
59238: ARRAY
59239: PPUSH
59240: LD_INT 125
59242: PPUSH
59243: CALL_OW 495
59247: GO 59207
59249: POP
59250: POP
// repeat wait ( mpEmissions ) ;
59251: LD_EXP 37
59255: PPUSH
59256: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
59260: LD_ADDR_VAR 0 1
59264: PUSH
59265: DOUBLE
59266: LD_INT 1
59268: DEC
59269: ST_TO_ADDR
59270: LD_VAR 0 2
59274: PUSH
59275: LD_INT 1
59277: ARRAY
59278: PUSH
59279: FOR_TO
59280: IFFALSE 59321
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
59282: LD_VAR 0 2
59286: PUSH
59287: LD_INT 1
59289: ARRAY
59290: PUSH
59291: LD_VAR 0 1
59295: ARRAY
59296: PPUSH
59297: LD_VAR 0 2
59301: PUSH
59302: LD_INT 2
59304: ARRAY
59305: PUSH
59306: LD_VAR 0 1
59310: ARRAY
59311: PPUSH
59312: LD_INT 15
59314: PPUSH
59315: CALL_OW 495
59319: GO 59279
59321: POP
59322: POP
// until false ;
59323: LD_INT 0
59325: IFFALSE 59251
// end ;
59327: PPOPN 2
59329: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
59330: LD_INT 0
59332: PPUSH
59333: PPUSH
59334: PPUSH
59335: PPUSH
59336: PPUSH
// if mpTeamGame then
59337: LD_EXP 11
59341: IFFALSE 59538
// begin first := depots [ 1 ] ;
59343: LD_ADDR_VAR 0 4
59347: PUSH
59348: LD_VAR 0 1
59352: PUSH
59353: LD_INT 1
59355: ARRAY
59356: ST_TO_ADDR
// side := GetSide ( first ) ;
59357: LD_ADDR_VAR 0 6
59361: PUSH
59362: LD_VAR 0 4
59366: PPUSH
59367: CALL_OW 255
59371: ST_TO_ADDR
// for i := 1 to mpTeams do
59372: LD_ADDR_VAR 0 3
59376: PUSH
59377: DOUBLE
59378: LD_INT 1
59380: DEC
59381: ST_TO_ADDR
59382: LD_EXP 10
59386: PUSH
59387: FOR_TO
59388: IFFALSE 59422
// if side in mpTeams [ i ] then
59390: LD_VAR 0 6
59394: PUSH
59395: LD_EXP 10
59399: PUSH
59400: LD_VAR 0 3
59404: ARRAY
59405: IN
59406: IFFALSE 59420
// begin team := i ;
59408: LD_ADDR_VAR 0 5
59412: PUSH
59413: LD_VAR 0 3
59417: ST_TO_ADDR
// break ;
59418: GO 59422
// end ;
59420: GO 59387
59422: POP
59423: POP
// if not team then
59424: LD_VAR 0 5
59428: NOT
59429: IFFALSE 59433
// exit ;
59431: GO 59647
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59433: LD_EXP 34
59437: PPUSH
59438: LD_INT 81
59440: PUSH
59441: LD_VAR 0 6
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PPUSH
59450: CALL_OW 70
59454: IFFALSE 59458
// exit ;
59456: GO 59647
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
59458: LD_ADDR_EXP 58
59462: PUSH
59463: LD_EXP 58
59467: PPUSH
59468: LD_VAR 0 5
59472: PPUSH
59473: LD_EXP 58
59477: PUSH
59478: LD_VAR 0 5
59482: ARRAY
59483: PUSH
59484: LD_INT 1
59486: PLUS
59487: PPUSH
59488: CALL_OW 1
59492: ST_TO_ADDR
// for i in mpTeams [ team ] do
59493: LD_ADDR_VAR 0 3
59497: PUSH
59498: LD_EXP 10
59502: PUSH
59503: LD_VAR 0 5
59507: ARRAY
59508: PUSH
59509: FOR_IN
59510: IFFALSE 59534
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
59512: LD_VAR 0 3
59516: PPUSH
59517: LD_EXP 58
59521: PUSH
59522: LD_VAR 0 5
59526: ARRAY
59527: PPUSH
59528: CALL_OW 506
59532: GO 59509
59534: POP
59535: POP
// end else
59536: GO 59647
// begin first := depots [ 1 ] ;
59538: LD_ADDR_VAR 0 4
59542: PUSH
59543: LD_VAR 0 1
59547: PUSH
59548: LD_INT 1
59550: ARRAY
59551: ST_TO_ADDR
// side := GetSide ( first ) ;
59552: LD_ADDR_VAR 0 6
59556: PUSH
59557: LD_VAR 0 4
59561: PPUSH
59562: CALL_OW 255
59566: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
59567: LD_EXP 34
59571: PPUSH
59572: LD_INT 81
59574: PUSH
59575: LD_VAR 0 6
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PPUSH
59584: CALL_OW 70
59588: IFFALSE 59592
// exit ;
59590: GO 59647
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
59592: LD_ADDR_EXP 58
59596: PUSH
59597: LD_EXP 58
59601: PPUSH
59602: LD_VAR 0 6
59606: PPUSH
59607: LD_EXP 58
59611: PUSH
59612: LD_VAR 0 6
59616: ARRAY
59617: PUSH
59618: LD_INT 1
59620: PLUS
59621: PPUSH
59622: CALL_OW 1
59626: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
59627: LD_VAR 0 6
59631: PPUSH
59632: LD_EXP 58
59636: PUSH
59637: LD_VAR 0 6
59641: ARRAY
59642: PPUSH
59643: CALL_OW 506
// end ; end ;
59647: LD_VAR 0 2
59651: RET
// function UpdateCounter ; var i ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
// result := [ ] ;
59656: LD_ADDR_VAR 0 1
59660: PUSH
59661: EMPTY
59662: ST_TO_ADDR
// if mpTeamGame then
59663: LD_EXP 11
59667: IFFALSE 59734
// begin for i := 1 to mpTeams do
59669: LD_ADDR_VAR 0 2
59673: PUSH
59674: DOUBLE
59675: LD_INT 1
59677: DEC
59678: ST_TO_ADDR
59679: LD_EXP 10
59683: PUSH
59684: FOR_TO
59685: IFFALSE 59730
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
59687: LD_ADDR_VAR 0 1
59691: PUSH
59692: LD_VAR 0 1
59696: PUSH
59697: LD_STRING #KingoftheHill-Team
59699: PUSH
59700: LD_VAR 0 2
59704: PUSH
59705: LD_EXP 58
59709: PUSH
59710: LD_VAR 0 2
59714: ARRAY
59715: PUSH
59716: LD_EXP 35
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: ADD
59727: ST_TO_ADDR
59728: GO 59684
59730: POP
59731: POP
// end else
59732: GO 59807
// begin for i := 1 to 8 do
59734: LD_ADDR_VAR 0 2
59738: PUSH
59739: DOUBLE
59740: LD_INT 1
59742: DEC
59743: ST_TO_ADDR
59744: LD_INT 8
59746: PUSH
59747: FOR_TO
59748: IFFALSE 59805
// if mpSidePositions [ i ] then
59750: LD_EXP 7
59754: PUSH
59755: LD_VAR 0 2
59759: ARRAY
59760: IFFALSE 59803
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
59762: LD_ADDR_VAR 0 1
59766: PUSH
59767: LD_VAR 0 1
59771: PUSH
59772: LD_STRING #KingoftheHill-Player
59774: PUSH
59775: LD_VAR 0 2
59779: PUSH
59780: LD_EXP 58
59784: PUSH
59785: LD_VAR 0 2
59789: ARRAY
59790: PUSH
59791: LD_EXP 35
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: ADD
59802: ST_TO_ADDR
59803: GO 59747
59805: POP
59806: POP
// end ; mpDisplayStrings := result ;
59807: LD_ADDR_EXP 38
59811: PUSH
59812: LD_VAR 0 1
59816: ST_TO_ADDR
// end ;
59817: LD_VAR 0 1
59821: RET
// export function HowMuchPointsKing ( side ) ; begin
59822: LD_INT 0
59824: PPUSH
// result := HowMuchPoints ( side ) ;
59825: LD_ADDR_VAR 0 2
59829: PUSH
59830: LD_VAR 0 1
59834: PPUSH
59835: CALL 59845 0 1
59839: ST_TO_ADDR
// end ;
59840: LD_VAR 0 2
59844: RET
// function HowMuchPoints ( side ) ; var i ; begin
59845: LD_INT 0
59847: PPUSH
59848: PPUSH
// if mpTeamGame then
59849: LD_EXP 11
59853: IFFALSE 59922
// begin for i := 1 to Count ( mpTeams ) do
59855: LD_ADDR_VAR 0 3
59859: PUSH
59860: DOUBLE
59861: LD_INT 1
59863: DEC
59864: ST_TO_ADDR
59865: LD_EXP 10
59869: PPUSH
59870: CALL 11926 0 1
59874: PUSH
59875: FOR_TO
59876: IFFALSE 59918
// begin if side in mpTeams [ i ] then
59878: LD_VAR 0 1
59882: PUSH
59883: LD_EXP 10
59887: PUSH
59888: LD_VAR 0 3
59892: ARRAY
59893: IN
59894: IFFALSE 59916
// begin result := mpKingPoints [ i ] ;
59896: LD_ADDR_VAR 0 2
59900: PUSH
59901: LD_EXP 58
59905: PUSH
59906: LD_VAR 0 3
59910: ARRAY
59911: ST_TO_ADDR
// exit ;
59912: POP
59913: POP
59914: GO 59938
// end ; end ;
59916: GO 59875
59918: POP
59919: POP
// end else
59920: GO 59938
// result := mpKingPoints [ side ] ;
59922: LD_ADDR_VAR 0 2
59926: PUSH
59927: LD_EXP 58
59931: PUSH
59932: LD_VAR 0 1
59936: ARRAY
59937: ST_TO_ADDR
// end ;
59938: LD_VAR 0 2
59942: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
59943: LD_EXP 39
59947: IFFALSE 59955
59949: PUSH
59950: CALL 60367 0 0
59954: AND
59955: IFFALSE 59963
59957: PUSH
59958: LD_OWVAR 4
59962: AND
59963: IFFALSE 60216
59965: GO 59967
59967: DISABLE
59968: LD_INT 0
59970: PPUSH
59971: PPUSH
// begin canWin := false ;
59972: LD_ADDR_VAR 0 2
59976: PUSH
59977: LD_INT 0
59979: ST_TO_ADDR
// if not HasPower ( your_side ) then
59980: LD_OWVAR 2
59984: PPUSH
59985: CALL 60409 0 1
59989: NOT
59990: IFFALSE 60001
// begin Multiplayer_Loose_Message ;
59992: CALL_OW 521
// enable ( mpLose ) ;
59996: LD_INT 102
59998: ENABLE_MARKED
// end else
59999: GO 60216
// begin if not EnemiesInGame then
60001: CALL 60219 0 0
60005: NOT
60006: IFFALSE 60013
// begin enable ( mpWin ) ;
60008: LD_INT 101
60010: ENABLE_MARKED
// exit ;
60011: GO 60216
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
60013: LD_ADDR_VAR 0 2
60017: PUSH
60018: LD_OWVAR 2
60022: PPUSH
60023: CALL 59845 0 1
60027: PUSH
60028: LD_EXP 35
60032: GREATEREQUAL
60033: IFFALSE 60046
60035: PUSH
60036: LD_OWVAR 2
60040: PPUSH
60041: CALL 60409 0 1
60045: AND
60046: ST_TO_ADDR
// for i := 1 to 8 do
60047: LD_ADDR_VAR 0 1
60051: PUSH
60052: DOUBLE
60053: LD_INT 1
60055: DEC
60056: ST_TO_ADDR
60057: LD_INT 8
60059: PUSH
60060: FOR_TO
60061: IFFALSE 60202
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
60063: LD_EXP 7
60067: PUSH
60068: LD_VAR 0 1
60072: ARRAY
60073: IFFALSE 60086
60075: PUSH
60076: LD_VAR 0 1
60080: PPUSH
60081: CALL_OW 108
60085: AND
60086: IFFALSE 60100
60088: PUSH
60089: LD_VAR 0 1
60093: PUSH
60094: LD_OWVAR 2
60098: NONEQUAL
60099: AND
60100: IFFALSE 60200
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60102: LD_EXP 8
60106: PUSH
60107: LD_VAR 0 1
60111: ARRAY
60112: NOT
60113: IFTRUE 60161
60115: PUSH
60116: LD_EXP 8
60120: PUSH
60121: LD_VAR 0 1
60125: ARRAY
60126: PUSH
60127: LD_EXP 8
60131: PUSH
60132: LD_OWVAR 2
60136: ARRAY
60137: NONEQUAL
60138: IFFALSE 60160
60140: PUSH
60141: LD_OWVAR 2
60145: PPUSH
60146: LD_VAR 0 1
60150: PPUSH
60151: CALL_OW 81
60155: PUSH
60156: LD_INT 1
60158: NONEQUAL
60159: AND
60160: OR
60161: IFFALSE 60200
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
60163: LD_VAR 0 1
60167: PPUSH
60168: CALL 59845 0 1
60172: PUSH
60173: LD_EXP 35
60177: GREATEREQUAL
60178: IFFALSE 60191
60180: PUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL 60409 0 1
60190: AND
60191: IFFALSE 60200
// begin enable ( mpLose ) ;
60193: LD_INT 102
60195: ENABLE_MARKED
// exit ;
60196: POP
60197: POP
60198: GO 60216
// end ;
60200: GO 60060
60202: POP
60203: POP
// if canWin then
60204: LD_VAR 0 2
60208: IFFALSE 60215
// enable ( mpWin ) else
60210: LD_INT 101
60212: ENABLE_MARKED
60213: GO 60216
// enable ;
60215: ENABLE
// end ; end ;
60216: PPOPN 2
60218: END
// function EnemiesInGame ; var i ; begin
60219: LD_INT 0
60221: PPUSH
60222: PPUSH
// result := false ;
60223: LD_ADDR_VAR 0 1
60227: PUSH
60228: LD_INT 0
60230: ST_TO_ADDR
// for i := 1 to 8 do
60231: LD_ADDR_VAR 0 2
60235: PUSH
60236: DOUBLE
60237: LD_INT 1
60239: DEC
60240: ST_TO_ADDR
60241: LD_INT 8
60243: PUSH
60244: FOR_TO
60245: IFFALSE 60360
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
60247: LD_VAR 0 2
60251: PUSH
60252: LD_OWVAR 2
60256: NONEQUAL
60257: IFFALSE 60270
60259: PUSH
60260: LD_VAR 0 2
60264: PPUSH
60265: CALL 60409 0 1
60269: AND
60270: IFFALSE 60283
60272: PUSH
60273: LD_VAR 0 2
60277: PPUSH
60278: CALL_OW 108
60282: AND
60283: IFFALSE 60358
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
60285: LD_EXP 8
60289: PUSH
60290: LD_VAR 0 2
60294: ARRAY
60295: NOT
60296: IFTRUE 60344
60298: PUSH
60299: LD_EXP 8
60303: PUSH
60304: LD_VAR 0 2
60308: ARRAY
60309: PUSH
60310: LD_EXP 8
60314: PUSH
60315: LD_OWVAR 2
60319: ARRAY
60320: NONEQUAL
60321: IFFALSE 60343
60323: PUSH
60324: LD_OWVAR 2
60328: PPUSH
60329: LD_VAR 0 2
60333: PPUSH
60334: CALL_OW 81
60338: PUSH
60339: LD_INT 1
60341: NONEQUAL
60342: AND
60343: OR
60344: IFFALSE 60358
// begin result := true ;
60346: LD_ADDR_VAR 0 1
60350: PUSH
60351: LD_INT 1
60353: ST_TO_ADDR
// exit ;
60354: POP
60355: POP
60356: GO 60362
// end ;
60358: GO 60244
60360: POP
60361: POP
// end ;
60362: LD_VAR 0 1
60366: RET
// function CanWinLoose ; begin
60367: LD_INT 0
60369: PPUSH
// result := true ;
60370: LD_ADDR_VAR 0 1
60374: PUSH
60375: LD_INT 1
60377: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
60378: CALL_OW 531
60382: IFFALSE 60394
60384: PUSH
60385: CALL_OW 519
60389: PUSH
60390: LD_INT 1
60392: GREATER
60393: AND
60394: IFFALSE 60404
// result := false ;
60396: LD_ADDR_VAR 0 1
60400: PUSH
60401: LD_INT 0
60403: ST_TO_ADDR
// end ;
60404: LD_VAR 0 1
60408: RET
// function HasPower ( i ) ; begin
60409: LD_INT 0
60411: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
60412: LD_ADDR_VAR 0 2
60416: PUSH
60417: LD_INT 22
60419: PUSH
60420: LD_VAR 0 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 21
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 33
60444: PUSH
60445: LD_INT 3
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 33
60454: PUSH
60455: LD_INT 5
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PPUSH
60472: CALL_OW 69
60476: ST_TO_ADDR
// end ; end_of_file
60477: LD_VAR 0 2
60481: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
60482: PPOPN 6
60484: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
60485: LD_EXP 3
60489: PUSH
60490: LD_INT 4
60492: EQUAL
60493: IFFALSE 60529
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
60495: LD_STRING setGameDifficulty(
60497: PUSH
60498: LD_OWVAR 67
60502: STR
60503: PUSH
60504: LD_STRING )
60506: STR
60507: PPUSH
60508: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
60512: LD_STRING displayDifficulty(
60514: PUSH
60515: LD_OWVAR 67
60519: STR
60520: PUSH
60521: LD_STRING )
60523: STR
60524: PPUSH
60525: CALL_OW 559
// end ; SOS_MapStart ( ) ;
60529: CALL 60558 0 0
// end ; end_of_file
60533: PPOPN 1
60535: END
// every 0 0$1 do
60536: GO 60538
60538: DISABLE
// begin enable ;
60539: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60540: LD_STRING updateTimer(
60542: PUSH
60543: LD_OWVAR 1
60547: STR
60548: PUSH
60549: LD_STRING );
60551: STR
60552: PPUSH
60553: CALL_OW 559
// end ;
60557: END
// export function SOS_MapStart ( ) ; begin
60558: LD_INT 0
60560: PPUSH
// UpdateFactoryWaypoints ( ) ;
60561: CALL 61492 0 0
// UpdateWarehouseGatheringPoints ( ) ;
60565: CALL 61744 0 0
// ParseMultiDataToLua ( ) ;
60569: CALL 61891 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
60573: LD_STRING setSpecLogoNumber(
60575: PUSH
60576: LD_INT 2
60578: STR
60579: PUSH
60580: LD_STRING ,
60582: STR
60583: PUSH
60584: LD_INT 1
60586: STR
60587: PUSH
60588: LD_STRING )
60590: STR
60591: PPUSH
60592: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
60596: LD_STRING setSpecLogoNumber(
60598: PUSH
60599: LD_INT 3
60601: STR
60602: PUSH
60603: LD_STRING ,
60605: STR
60606: PUSH
60607: LD_INT 2
60609: STR
60610: PUSH
60611: LD_STRING )
60613: STR
60614: PPUSH
60615: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
60619: LD_STRING setSpecLogoNumber(
60621: PUSH
60622: LD_INT 4
60624: STR
60625: PUSH
60626: LD_STRING ,
60628: STR
60629: PUSH
60630: LD_INT 3
60632: STR
60633: PUSH
60634: LD_STRING )
60636: STR
60637: PPUSH
60638: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
60642: LD_STRING setSpecLogoNumber(
60644: PUSH
60645: LD_INT 5
60647: STR
60648: PUSH
60649: LD_STRING ,
60651: STR
60652: PUSH
60653: LD_INT 4
60655: STR
60656: PUSH
60657: LD_STRING )
60659: STR
60660: PPUSH
60661: CALL_OW 559
// end ;
60665: LD_VAR 0 1
60669: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
60670: LD_INT 0
60672: PPUSH
60673: PPUSH
60674: PPUSH
60675: PPUSH
60676: PPUSH
60677: PPUSH
60678: PPUSH
60679: PPUSH
60680: PPUSH
// for i := 1 to 8 do
60681: LD_ADDR_VAR 0 2
60685: PUSH
60686: DOUBLE
60687: LD_INT 1
60689: DEC
60690: ST_TO_ADDR
60691: LD_INT 8
60693: PUSH
60694: FOR_TO
60695: IFFALSE 61080
// begin if mpSidePositions [ i ] then
60697: LD_EXP 7
60701: PUSH
60702: LD_VAR 0 2
60706: ARRAY
60707: IFFALSE 61078
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
60709: LD_ADDR_VAR 0 7
60713: PUSH
60714: LD_INT 22
60716: PUSH
60717: LD_VAR 0 2
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 21
60728: PUSH
60729: LD_INT 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PPUSH
60740: CALL_OW 69
60744: PPUSH
60745: CALL 11926 0 1
60749: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60750: LD_ADDR_VAR 0 9
60754: PUSH
60755: LD_INT 22
60757: PUSH
60758: LD_VAR 0 2
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: PUSH
60770: LD_INT 30
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 30
60782: PUSH
60783: LD_INT 1
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: LIST
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PPUSH
60799: CALL_OW 69
60803: ST_TO_ADDR
// crates := 0 ;
60804: LD_ADDR_VAR 0 4
60808: PUSH
60809: LD_INT 0
60811: ST_TO_ADDR
// oil := 0 ;
60812: LD_ADDR_VAR 0 5
60816: PUSH
60817: LD_INT 0
60819: ST_TO_ADDR
// sib := 0 ;
60820: LD_ADDR_VAR 0 6
60824: PUSH
60825: LD_INT 0
60827: ST_TO_ADDR
// if bases then
60828: LD_VAR 0 9
60832: IFFALSE 60938
// begin for j in bases do
60834: LD_ADDR_VAR 0 3
60838: PUSH
60839: LD_VAR 0 9
60843: PUSH
60844: FOR_IN
60845: IFFALSE 60936
// begin base := GetBase ( j ) ;
60847: LD_ADDR_VAR 0 8
60851: PUSH
60852: LD_VAR 0 3
60856: PPUSH
60857: CALL_OW 274
60861: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
60862: LD_ADDR_VAR 0 4
60866: PUSH
60867: LD_VAR 0 4
60871: PUSH
60872: LD_VAR 0 8
60876: PPUSH
60877: LD_INT 1
60879: PPUSH
60880: CALL_OW 275
60884: PLUS
60885: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
60886: LD_ADDR_VAR 0 5
60890: PUSH
60891: LD_VAR 0 5
60895: PUSH
60896: LD_VAR 0 8
60900: PPUSH
60901: LD_INT 2
60903: PPUSH
60904: CALL_OW 275
60908: PLUS
60909: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
60910: LD_ADDR_VAR 0 6
60914: PUSH
60915: LD_VAR 0 6
60919: PUSH
60920: LD_VAR 0 8
60924: PPUSH
60925: LD_INT 3
60927: PPUSH
60928: CALL_OW 275
60932: PLUS
60933: ST_TO_ADDR
// end ;
60934: GO 60844
60936: POP
60937: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
60938: LD_STRING setSpecText(
60940: PUSH
60941: LD_VAR 0 2
60945: STR
60946: PUSH
60947: LD_STRING ,
60949: STR
60950: PUSH
60951: LD_INT 2
60953: STR
60954: PUSH
60955: LD_STRING ,
60957: STR
60958: PUSH
60959: LD_VAR 0 4
60963: STR
60964: PUSH
60965: LD_STRING )
60967: STR
60968: PPUSH
60969: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
60973: LD_STRING setSpecText(
60975: PUSH
60976: LD_VAR 0 2
60980: STR
60981: PUSH
60982: LD_STRING ,
60984: STR
60985: PUSH
60986: LD_INT 3
60988: STR
60989: PUSH
60990: LD_STRING ,
60992: STR
60993: PUSH
60994: LD_VAR 0 5
60998: STR
60999: PUSH
61000: LD_STRING )
61002: STR
61003: PPUSH
61004: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61008: LD_STRING setSpecText(
61010: PUSH
61011: LD_VAR 0 2
61015: STR
61016: PUSH
61017: LD_STRING ,
61019: STR
61020: PUSH
61021: LD_INT 4
61023: STR
61024: PUSH
61025: LD_STRING ,
61027: STR
61028: PUSH
61029: LD_VAR 0 6
61033: STR
61034: PUSH
61035: LD_STRING )
61037: STR
61038: PPUSH
61039: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61043: LD_STRING setSpecText(
61045: PUSH
61046: LD_VAR 0 2
61050: STR
61051: PUSH
61052: LD_STRING ,
61054: STR
61055: PUSH
61056: LD_INT 5
61058: STR
61059: PUSH
61060: LD_STRING ,
61062: STR
61063: PUSH
61064: LD_VAR 0 7
61068: STR
61069: PUSH
61070: LD_STRING )
61072: STR
61073: PPUSH
61074: CALL_OW 559
// end ; end ;
61078: GO 60694
61080: POP
61081: POP
// end ;
61082: LD_VAR 0 1
61086: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61087: LD_INT 2
61089: PUSH
61090: LD_INT 30
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 30
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: PPUSH
61115: CALL_OW 69
61119: IFFALSE 61129
61121: GO 61123
61123: DISABLE
// begin enable ;
61124: ENABLE
// UpdateSpectatorBar ;
61125: CALL 60670 0 0
// end ;
61129: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61130: LD_INT 0
61132: PPUSH
// end ;
61133: LD_VAR 0 12
61137: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61138: LD_INT 0
61140: PPUSH
61141: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61142: LD_VAR 0 1
61146: NOT
61147: IFTRUE 61166
61149: PUSH
61150: LD_VAR 0 2
61154: PPUSH
61155: LD_VAR 0 3
61159: PPUSH
61160: CALL_OW 488
61164: NOT
61165: OR
61166: IFTRUE 61201
61168: PUSH
61169: LD_VAR 0 1
61173: PPUSH
61174: CALL_OW 266
61178: PUSH
61179: LD_INT 3
61181: NONEQUAL
61182: IFFALSE 61200
61184: PUSH
61185: LD_VAR 0 1
61189: PPUSH
61190: CALL_OW 247
61194: PUSH
61195: LD_INT 1
61197: EQUAL
61198: NOT
61199: AND
61200: OR
61201: IFFALSE 61205
// exit ;
61203: GO 61487
// if GetType ( factory ) = unit_human then
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 247
61214: PUSH
61215: LD_INT 1
61217: EQUAL
61218: IFFALSE 61235
// factory := IsInUnit ( factory ) ;
61220: LD_ADDR_VAR 0 1
61224: PUSH
61225: LD_VAR 0 1
61229: PPUSH
61230: CALL_OW 310
61234: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61235: LD_VAR 0 1
61239: PPUSH
61240: CALL_OW 266
61244: PUSH
61245: LD_INT 3
61247: NONEQUAL
61248: IFFALSE 61252
// exit ;
61250: GO 61487
// for i := 1 to Count ( factoryWaypoints ) do
61252: LD_ADDR_VAR 0 5
61256: PUSH
61257: DOUBLE
61258: LD_INT 1
61260: DEC
61261: ST_TO_ADDR
61262: LD_EXP 59
61266: PPUSH
61267: CALL 11926 0 1
61271: PUSH
61272: FOR_TO
61273: IFFALSE 61435
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61275: LD_VAR 0 2
61279: PPUSH
61280: LD_VAR 0 3
61284: PPUSH
61285: CALL_OW 428
61289: PUSH
61290: LD_EXP 59
61294: PUSH
61295: LD_VAR 0 5
61299: ARRAY
61300: PUSH
61301: LD_INT 2
61303: ARRAY
61304: EQUAL
61305: IFFALSE 61337
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61307: LD_ADDR_EXP 59
61311: PUSH
61312: LD_EXP 59
61316: PPUSH
61317: LD_VAR 0 5
61321: PPUSH
61322: CALL_OW 3
61326: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61327: CALL 61492 0 0
// exit ;
61331: POP
61332: POP
61333: GO 61487
// end else
61335: GO 61433
// if factory = factoryWaypoints [ i ] [ 2 ] then
61337: LD_VAR 0 1
61341: PUSH
61342: LD_EXP 59
61346: PUSH
61347: LD_VAR 0 5
61351: ARRAY
61352: PUSH
61353: LD_INT 2
61355: ARRAY
61356: EQUAL
61357: IFFALSE 61433
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61359: LD_ADDR_EXP 59
61363: PUSH
61364: LD_EXP 59
61368: PPUSH
61369: LD_VAR 0 5
61373: PPUSH
61374: CALL_OW 3
61378: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61379: LD_ADDR_EXP 59
61383: PUSH
61384: LD_EXP 59
61388: PPUSH
61389: LD_VAR 0 1
61393: PPUSH
61394: CALL_OW 255
61398: PUSH
61399: LD_VAR 0 1
61403: PUSH
61404: LD_VAR 0 2
61408: PUSH
61409: LD_VAR 0 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: PPUSH
61420: CALL 47858 0 2
61424: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61425: CALL 61492 0 0
// exit ;
61429: POP
61430: POP
61431: GO 61487
// end ; end ;
61433: GO 61272
61435: POP
61436: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61437: LD_ADDR_EXP 59
61441: PUSH
61442: LD_EXP 59
61446: PPUSH
61447: LD_VAR 0 1
61451: PPUSH
61452: CALL_OW 255
61456: PUSH
61457: LD_VAR 0 1
61461: PUSH
61462: LD_VAR 0 2
61466: PUSH
61467: LD_VAR 0 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: PPUSH
61478: CALL 47858 0 2
61482: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61483: CALL 61492 0 0
// end ;
61487: LD_VAR 0 4
61491: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
61492: LD_INT 0
61494: PPUSH
61495: PPUSH
61496: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
61497: LD_STRING resetFactoryWaypoint();
61499: PPUSH
61500: CALL_OW 559
// if factoryWaypoints then
61504: LD_EXP 59
61508: IFFALSE 61629
// begin list := factoryWaypoints ;
61510: LD_ADDR_VAR 0 3
61514: PUSH
61515: LD_EXP 59
61519: ST_TO_ADDR
// for i := 1 to list do
61520: LD_ADDR_VAR 0 2
61524: PUSH
61525: DOUBLE
61526: LD_INT 1
61528: DEC
61529: ST_TO_ADDR
61530: LD_VAR 0 3
61534: PUSH
61535: FOR_TO
61536: IFFALSE 61627
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61538: LD_STRING setFactoryWaypointXY(
61540: PUSH
61541: LD_VAR 0 3
61545: PUSH
61546: LD_VAR 0 2
61550: ARRAY
61551: PUSH
61552: LD_INT 1
61554: ARRAY
61555: STR
61556: PUSH
61557: LD_STRING ,
61559: STR
61560: PUSH
61561: LD_VAR 0 3
61565: PUSH
61566: LD_VAR 0 2
61570: ARRAY
61571: PUSH
61572: LD_INT 2
61574: ARRAY
61575: STR
61576: PUSH
61577: LD_STRING ,
61579: STR
61580: PUSH
61581: LD_VAR 0 3
61585: PUSH
61586: LD_VAR 0 2
61590: ARRAY
61591: PUSH
61592: LD_INT 3
61594: ARRAY
61595: STR
61596: PUSH
61597: LD_STRING ,
61599: STR
61600: PUSH
61601: LD_VAR 0 3
61605: PUSH
61606: LD_VAR 0 2
61610: ARRAY
61611: PUSH
61612: LD_INT 4
61614: ARRAY
61615: STR
61616: PUSH
61617: LD_STRING )
61619: STR
61620: PPUSH
61621: CALL_OW 559
61625: GO 61535
61627: POP
61628: POP
// end ; end ;
61629: LD_VAR 0 1
61633: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
61634: LD_INT 0
61636: PPUSH
// if HexInfo ( x , y ) = warehouse then
61637: LD_VAR 0 2
61641: PPUSH
61642: LD_VAR 0 3
61646: PPUSH
61647: CALL_OW 428
61651: PUSH
61652: LD_VAR 0 1
61656: EQUAL
61657: IFFALSE 61684
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
61659: LD_ADDR_EXP 61
61663: PUSH
61664: LD_EXP 61
61668: PPUSH
61669: LD_VAR 0 1
61673: PPUSH
61674: LD_INT 0
61676: PPUSH
61677: CALL_OW 1
61681: ST_TO_ADDR
61682: GO 61735
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
61684: LD_ADDR_EXP 61
61688: PUSH
61689: LD_EXP 61
61693: PPUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: LD_VAR 0 1
61703: PPUSH
61704: CALL_OW 255
61708: PUSH
61709: LD_VAR 0 1
61713: PUSH
61714: LD_VAR 0 2
61718: PUSH
61719: LD_VAR 0 3
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: PPUSH
61730: CALL_OW 1
61734: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
61735: CALL 61744 0 0
// end ;
61739: LD_VAR 0 4
61743: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
61744: LD_INT 0
61746: PPUSH
61747: PPUSH
61748: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
61749: LD_STRING resetWarehouseGatheringPoints();
61751: PPUSH
61752: CALL_OW 559
// if warehouseGatheringPoints then
61756: LD_EXP 61
61760: IFFALSE 61886
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
61762: LD_ADDR_VAR 0 3
61766: PUSH
61767: LD_EXP 61
61771: PPUSH
61772: CALL 51792 0 1
61776: ST_TO_ADDR
// for i := 1 to list do
61777: LD_ADDR_VAR 0 2
61781: PUSH
61782: DOUBLE
61783: LD_INT 1
61785: DEC
61786: ST_TO_ADDR
61787: LD_VAR 0 3
61791: PUSH
61792: FOR_TO
61793: IFFALSE 61884
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
61795: LD_STRING setWarehouseGatheringPointXY(
61797: PUSH
61798: LD_VAR 0 3
61802: PUSH
61803: LD_VAR 0 2
61807: ARRAY
61808: PUSH
61809: LD_INT 1
61811: ARRAY
61812: STR
61813: PUSH
61814: LD_STRING ,
61816: STR
61817: PUSH
61818: LD_VAR 0 3
61822: PUSH
61823: LD_VAR 0 2
61827: ARRAY
61828: PUSH
61829: LD_INT 2
61831: ARRAY
61832: STR
61833: PUSH
61834: LD_STRING ,
61836: STR
61837: PUSH
61838: LD_VAR 0 3
61842: PUSH
61843: LD_VAR 0 2
61847: ARRAY
61848: PUSH
61849: LD_INT 3
61851: ARRAY
61852: STR
61853: PUSH
61854: LD_STRING ,
61856: STR
61857: PUSH
61858: LD_VAR 0 3
61862: PUSH
61863: LD_VAR 0 2
61867: ARRAY
61868: PUSH
61869: LD_INT 4
61871: ARRAY
61872: STR
61873: PUSH
61874: LD_STRING )
61876: STR
61877: PPUSH
61878: CALL_OW 559
61882: GO 61792
61884: POP
61885: POP
// end ; end ;
61886: LD_VAR 0 1
61890: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
61891: LD_INT 0
61893: PPUSH
61894: PPUSH
// if not mpSidePositions then
61895: LD_EXP 7
61899: NOT
61900: IFFALSE 61904
// exit ;
61902: GO 61975
// result :=  ;
61904: LD_ADDR_VAR 0 1
61908: PUSH
61909: LD_STRING 
61911: ST_TO_ADDR
// for i := 1 to 8 do
61912: LD_ADDR_VAR 0 2
61916: PUSH
61917: DOUBLE
61918: LD_INT 1
61920: DEC
61921: ST_TO_ADDR
61922: LD_INT 8
61924: PUSH
61925: FOR_TO
61926: IFFALSE 61956
// begin result := result & mpSidePositions [ i ] & ; ;
61928: LD_ADDR_VAR 0 1
61932: PUSH
61933: LD_VAR 0 1
61937: PUSH
61938: LD_EXP 7
61942: PUSH
61943: LD_VAR 0 2
61947: ARRAY
61948: STR
61949: PUSH
61950: LD_STRING ;
61952: STR
61953: ST_TO_ADDR
// end ;
61954: GO 61925
61956: POP
61957: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
61958: LD_STRING setMultiplayerRealPosition("
61960: PUSH
61961: LD_VAR 0 1
61965: STR
61966: PUSH
61967: LD_STRING ");
61969: STR
61970: PPUSH
61971: CALL_OW 559
// end ;
61975: LD_VAR 0 1
61979: RET
