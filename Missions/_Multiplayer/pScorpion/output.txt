// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2463 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2847 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 1 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 1
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 ] , [ 2 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: ST_TO_ADDR
// mpTeamGame := true ;
 778: LD_ADDR_EXP 11
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// mpMapSize := [ 90 , 120 ] ;
 786: LD_ADDR_EXP 29
 790: PUSH
 791: LD_INT 90
 793: PUSH
 794: LD_INT 120
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// end ;
 801: LD_VAR 0 1
 805: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 806: LD_INT 0
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
 813: PPUSH
 814: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 830: LD_ADDR_EXP 18
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 5
 840: PUSH
 841: LD_INT 6
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 8
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: LD_EXP 19
 861: UNION
 862: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 863: LD_VAR 0 1
 867: PUSH
 868: LD_INT 2
 870: EQUAL
 871: IFFALSE 883
// baseLevel := 1 else
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
 881: GO 897
// baseLevel := mpGameSettings [ 1 ] ;
 883: LD_ADDR_VAR 0 7
 887: PUSH
 888: LD_EXP 6
 892: PUSH
 893: LD_INT 1
 895: ARRAY
 896: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 897: LD_ADDR_EXP 24
 901: PUSH
 902: LD_EXP 6
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 911: LD_ADDR_EXP 25
 915: PUSH
 916: LD_EXP 6
 920: PUSH
 921: LD_INT 3
 923: ARRAY
 924: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_EXP 6
 934: PUSH
 935: LD_INT 4
 937: ARRAY
 938: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 939: LD_ADDR_EXP 27
 943: PUSH
 944: LD_EXP 6
 948: PUSH
 949: LD_INT 5
 951: ARRAY
 952: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 953: LD_ADDR_VAR 0 5
 957: PUSH
 958: LD_EXP 6
 962: PUSH
 963: LD_INT 6
 965: ARRAY
 966: PUSH
 967: LD_INT 0
 969: GREATER
 970: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 971: LD_ADDR_VAR 0 6
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 7
 983: ARRAY
 984: PUSH
 985: LD_INT 0
 987: GREATER
 988: ST_TO_ADDR
// mpKingArea := 0 ;
 989: LD_ADDR_EXP 34
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// mpPoints := 0 ;
 997: LD_ADDR_EXP 35
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// mpEmissions := 0 ;
1005: LD_ADDR_EXP 37
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// kingArea := 0 ;
1013: LD_ADDR_EXP 1
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// kingCamArea := 0 ;
1021: LD_ADDR_EXP 2
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1029: LD_EXP 6
1033: PUSH
1034: LD_INT 9
1036: ARRAY
1037: IFFALSE 1169
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1039: LD_ADDR_EXP 36
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: LD_INT 2
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 12
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 24
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 23
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 42
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 21
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 42
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_EXP 6
1178: PUSH
1179: LD_INT 11
1181: ARRAY
1182: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1183: LD_ADDR_EXP 22
1187: PUSH
1188: LD_EXP 6
1192: PUSH
1193: LD_INT 12
1195: ARRAY
1196: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1197: LD_ADDR_EXP 26
1201: PUSH
1202: LD_EXP 6
1206: PUSH
1207: LD_INT 13
1209: ARRAY
1210: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1211: LD_ADDR_EXP 33
1215: PUSH
1216: LD_EXP 6
1220: PUSH
1221: LD_INT 14
1223: ARRAY
1224: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1225: LD_ADDR_EXP 30
1229: PUSH
1230: LD_EXP 6
1234: PUSH
1235: LD_INT 15
1237: ARRAY
1238: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1239: LD_ADDR_EXP 28
1243: PUSH
1244: LD_EXP 6
1248: PUSH
1249: LD_INT 18
1251: ARRAY
1252: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1253: LD_ADDR_EXP 20
1257: PUSH
1258: LD_EXP 6
1262: PUSH
1263: LD_INT 21
1265: ARRAY
1266: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea ] ;
1267: LD_ADDR_EXP 31
1271: PUSH
1272: LD_INT 15
1274: PUSH
1275: LD_INT 16
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 0 ) ] ;
1282: LD_ADDR_VAR 0 8
1286: PUSH
1287: LD_INT 9
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL 53257 0 2
1297: PUSH
1298: LD_INT 17
1300: PPUSH
1301: LD_INT 0
1303: PPUSH
1304: CALL 53257 0 2
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_VAR 0 8
1327: PPUSH
1328: CALL 12572 0 1
1332: PUSH
1333: FOR_TO
1334: IFFALSE 1438
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1336: LD_ADDR_EXP 21
1340: PUSH
1341: LD_EXP 21
1345: PPUSH
1346: LD_VAR 0 3
1350: PPUSH
1351: LD_VAR 0 8
1355: PUSH
1356: LD_VAR 0 3
1360: ARRAY
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: LD_VAR 0 8
1370: PUSH
1371: LD_VAR 0 3
1375: ARRAY
1376: PUSH
1377: LD_INT 3
1379: ARRAY
1380: PPUSH
1381: LD_INT 10
1383: PPUSH
1384: CALL_OW 272
1388: PUSH
1389: LD_VAR 0 8
1393: PUSH
1394: LD_VAR 0 3
1398: ARRAY
1399: PUSH
1400: LD_INT 2
1402: ARRAY
1403: PPUSH
1404: LD_VAR 0 8
1408: PUSH
1409: LD_VAR 0 3
1413: ARRAY
1414: PUSH
1415: LD_INT 3
1417: ARRAY
1418: PPUSH
1419: LD_INT 10
1421: PPUSH
1422: CALL_OW 273
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 1
1435: ST_TO_ADDR
1436: GO 1333
1438: POP
1439: POP
// if hasOil then
1440: LD_VAR 0 5
1444: IFFALSE 1542
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1446: LD_ADDR_VAR 0 4
1450: PUSH
1451: LD_EXP 6
1455: PUSH
1456: LD_INT 6
1458: ARRAY
1459: PUSH
1460: LD_INT 2
1462: EQUAL
1463: ST_TO_ADDR
// if all then
1464: LD_VAR 0 4
1468: IFFALSE 1507
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) ] else
1470: LD_ADDR_EXP 12
1474: PUSH
1475: LD_INT 13
1477: PPUSH
1478: LD_VAR 0 4
1482: PPUSH
1483: CALL 53090 0 2
1487: PUSH
1488: LD_INT 21
1490: PPUSH
1491: LD_VAR 0 4
1495: PPUSH
1496: CALL 53090 0 2
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: ST_TO_ADDR
1505: GO 1542
// mpOilDeposits := [ [ [ 49 , 3 ] ] , [ [ 108 , 117 ] ] ] ;
1507: LD_ADDR_EXP 12
1511: PUSH
1512: LD_INT 49
1514: PUSH
1515: LD_INT 3
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: PUSH
1525: LD_INT 108
1527: PUSH
1528: LD_INT 117
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: ST_TO_ADDR
// end ; if hasSib then
1542: LD_VAR 0 6
1546: IFFALSE 1644
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1548: LD_ADDR_VAR 0 4
1552: PUSH
1553: LD_EXP 6
1557: PUSH
1558: LD_INT 7
1560: ARRAY
1561: PUSH
1562: LD_INT 2
1564: EQUAL
1565: ST_TO_ADDR
// if all then
1566: LD_VAR 0 4
1570: IFFALSE 1609
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) ] else
1572: LD_ADDR_EXP 13
1576: PUSH
1577: LD_INT 14
1579: PPUSH
1580: LD_VAR 0 4
1584: PPUSH
1585: CALL 53090 0 2
1589: PUSH
1590: LD_INT 22
1592: PPUSH
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL 53090 0 2
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
1607: GO 1644
// mpSibDeposits := [ [ [ 52 , 2 ] ] , [ [ 110 , 115 ] ] ] ;
1609: LD_ADDR_EXP 13
1613: PUSH
1614: LD_INT 52
1616: PUSH
1617: LD_INT 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: EMPTY
1625: LIST
1626: PUSH
1627: LD_INT 110
1629: PUSH
1630: LD_INT 115
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1644: LD_VAR 0 7
1648: PUSH
1649: LD_INT 1
1651: GREATEREQUAL
1652: IFFALSE 1664
// mpDepots := startPos ;
1654: LD_ADDR_EXP 14
1658: PUSH
1659: LD_VAR 0 8
1663: ST_TO_ADDR
// if baseLevel >= 2 then
1664: LD_VAR 0 7
1668: PUSH
1669: LD_INT 2
1671: GREATEREQUAL
1672: IFFALSE 1783
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 2 ) ] ] ;
1674: LD_ADDR_EXP 17
1678: PUSH
1679: LD_INT 31
1681: PUSH
1682: LD_INT 11
1684: PPUSH
1685: LD_INT 5
1687: PPUSH
1688: CALL 53257 0 2
1692: ADD
1693: PUSH
1694: LD_INT 31
1696: PUSH
1697: LD_INT 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL 53257 0 2
1707: ADD
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 10
1714: PPUSH
1715: LD_INT 5
1717: PPUSH
1718: CALL 53257 0 2
1722: ADD
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 31
1731: PUSH
1732: LD_INT 19
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL 53257 0 2
1742: ADD
1743: PUSH
1744: LD_INT 31
1746: PUSH
1747: LD_INT 20
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL 53257 0 2
1757: ADD
1758: PUSH
1759: LD_INT 4
1761: PUSH
1762: LD_INT 18
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL 53257 0 2
1772: ADD
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// end ; end ;
1783: LD_VAR 0 2
1787: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1788: GO 1790
1790: DISABLE
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
// begin if not mpShipments then
1801: LD_EXP 27
1805: NOT
1806: IFFALSE 1810
// exit ;
1808: GO 2317
// case mpShipments of 1 :
1810: LD_EXP 27
1814: PUSH
1815: LD_INT 1
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1858
1823: POP
// begin time := 0 0$30 ;
1824: LD_ADDR_VAR 0 4
1828: PUSH
1829: LD_INT 1050
1831: ST_TO_ADDR
// normalTime := 0 0$30 ;
1832: LD_ADDR_VAR 0 6
1836: PUSH
1837: LD_INT 1050
1839: ST_TO_ADDR
// maxTime := 1 1$20 ;
1840: LD_ADDR_VAR 0 8
1844: PUSH
1845: LD_INT 2800
1847: ST_TO_ADDR
// delayTime := 0 0$5 ;
1848: LD_ADDR_VAR 0 7
1852: PUSH
1853: LD_INT 175
1855: ST_TO_ADDR
// end ; 2 :
1856: GO 1988
1858: LD_INT 2
1860: DOUBLE
1861: EQUAL
1862: IFTRUE 1866
1864: GO 1901
1866: POP
// begin time := 0 0$25 ;
1867: LD_ADDR_VAR 0 4
1871: PUSH
1872: LD_INT 875
1874: ST_TO_ADDR
// normalTime := 0 0$25 ;
1875: LD_ADDR_VAR 0 6
1879: PUSH
1880: LD_INT 875
1882: ST_TO_ADDR
// maxTime := 1 1$10 ;
1883: LD_ADDR_VAR 0 8
1887: PUSH
1888: LD_INT 2450
1890: ST_TO_ADDR
// delayTime := 0 0$4 ;
1891: LD_ADDR_VAR 0 7
1895: PUSH
1896: LD_INT 140
1898: ST_TO_ADDR
// end ; 3 :
1899: GO 1988
1901: LD_INT 3
1903: DOUBLE
1904: EQUAL
1905: IFTRUE 1909
1907: GO 1944
1909: POP
// begin time := 0 0$20 ;
1910: LD_ADDR_VAR 0 4
1914: PUSH
1915: LD_INT 700
1917: ST_TO_ADDR
// normalTime := 0 0$20 ;
1918: LD_ADDR_VAR 0 6
1922: PUSH
1923: LD_INT 700
1925: ST_TO_ADDR
// maxTime := 1 1$00 ;
1926: LD_ADDR_VAR 0 8
1930: PUSH
1931: LD_INT 2100
1933: ST_TO_ADDR
// delayTime := 0 0$3 ;
1934: LD_ADDR_VAR 0 7
1938: PUSH
1939: LD_INT 105
1941: ST_TO_ADDR
// end ; 4 :
1942: GO 1988
1944: LD_INT 4
1946: DOUBLE
1947: EQUAL
1948: IFTRUE 1952
1950: GO 1987
1952: POP
// begin time := 0 0$15 ;
1953: LD_ADDR_VAR 0 4
1957: PUSH
1958: LD_INT 525
1960: ST_TO_ADDR
// normalTime := 0 0$15 ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 525
1968: ST_TO_ADDR
// maxTime := 0 0$55 ;
1969: LD_ADDR_VAR 0 8
1973: PUSH
1974: LD_INT 1925
1976: ST_TO_ADDR
// delayTime := 0 0$2 ;
1977: LD_ADDR_VAR 0 7
1981: PUSH
1982: LD_INT 70
1984: ST_TO_ADDR
// end ; end ;
1985: GO 1988
1987: POP
// tmp := [ buildUpTime1 , buildUpTime2 ] ;
1988: LD_ADDR_VAR 0 3
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 5
2013: PUSH
2014: LD_INT 6
2016: PUSH
2017: LD_INT 7
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: ST_TO_ADDR
// for i := 1 to 8 do
2026: LD_ADDR_VAR 0 1
2030: PUSH
2031: DOUBLE
2032: LD_INT 1
2034: DEC
2035: ST_TO_ADDR
2036: LD_INT 8
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2087
// begin if not mpSidePositions [ i ] then
2042: LD_EXP 7
2046: PUSH
2047: LD_VAR 0 1
2051: ARRAY
2052: NOT
2053: IFFALSE 2057
// continue ;
2055: GO 2039
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2057: LD_ADDR_VAR 0 5
2061: PUSH
2062: LD_VAR 0 5
2066: PUSH
2067: LD_VAR 0 3
2071: PUSH
2072: LD_EXP 7
2076: PUSH
2077: LD_VAR 0 1
2081: ARRAY
2082: ARRAY
2083: ADD
2084: ST_TO_ADDR
// end ;
2085: GO 2039
2087: POP
2088: POP
// x := 1 ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 1
2096: ST_TO_ADDR
// repeat wait ( time ) ;
2097: LD_VAR 0 4
2101: PPUSH
2102: CALL_OW 67
// x := Inc ( x ) ;
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 2
2115: PPUSH
2116: CALL 49911 0 1
2120: ST_TO_ADDR
// if x > 5 then
2121: LD_VAR 0 2
2125: PUSH
2126: LD_INT 5
2128: GREATER
2129: IFFALSE 2139
// x := 1 ;
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// for i in areas do
2139: LD_ADDR_VAR 0 1
2143: PUSH
2144: LD_VAR 0 5
2148: PUSH
2149: FOR_IN
2150: IFFALSE 2189
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2152: LD_VAR 0 1
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 287
2164: PUSH
2165: LD_INT 20
2167: LESS
2168: IFFALSE 2187
// begin CreateCratesArea ( x , i , true ) ;
2170: LD_VAR 0 2
2174: PPUSH
2175: LD_VAR 0 1
2179: PPUSH
2180: LD_INT 1
2182: PPUSH
2183: CALL_OW 55
// end ; end ;
2187: GO 2149
2189: POP
2190: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 287
2201: PUSH
2202: LD_INT 0
2204: EQUAL
2205: IFFALSE 2244
// begin for i := 1 to 3 do
2207: LD_ADDR_VAR 0 1
2211: PUSH
2212: DOUBLE
2213: LD_INT 1
2215: DEC
2216: ST_TO_ADDR
2217: LD_INT 3
2219: PUSH
2220: FOR_TO
2221: IFFALSE 2240
// CreateCratesArea ( x , CenterArea , true ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 8
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: CALL_OW 55
2238: GO 2220
2240: POP
2241: POP
// end else
2242: GO 2275
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2244: LD_INT 8
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL_OW 287
2254: PUSH
2255: LD_INT 30
2257: LESS
2258: IFFALSE 2275
// CreateCratesArea ( x , CenterArea , true ) ;
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_INT 8
2267: PPUSH
2268: LD_INT 1
2270: PPUSH
2271: CALL_OW 55
// time := time + delayTime ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_VAR 0 7
2289: PLUS
2290: ST_TO_ADDR
// if time > maxTime then
2291: LD_VAR 0 4
2295: PUSH
2296: LD_VAR 0 8
2300: GREATER
2301: IFFALSE 2313
// time := normalTime ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: LD_VAR 0 6
2312: ST_TO_ADDR
// until false ;
2313: LD_INT 0
2315: IFFALSE 2097
// end ; end_of_file
2317: PPOPN 8
2319: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL 54055 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2329: LD_VAR 0 1
2333: PPUSH
2334: CALL 7749 0 1
// end ;
2338: PPOPN 1
2340: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: CALL 54072 0 1
// end ;
2350: PPOPN 1
2352: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2353: LD_VAR 0 1
2357: PPUSH
2358: CALL 8456 0 1
2362: PPOPN 1
2364: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL 54113 0 2
2379: PPOPN 2
2381: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_VAR 0 2
2391: PPUSH
2392: LD_VAR 0 3
2396: PPUSH
2397: CALL 8509 0 3
2401: PPOPN 3
2403: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2404: LD_VAR 0 1
2408: PPUSH
2409: LD_VAR 0 2
2413: PPUSH
2414: LD_VAR 0 3
2418: PPUSH
2419: LD_VAR 0 4
2423: PPUSH
2424: LD_VAR 0 5
2428: PPUSH
2429: CALL 9148 0 5
2433: PPOPN 5
2435: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2436: LD_VAR 0 1
2440: PPUSH
2441: LD_VAR 0 2
2445: PPUSH
2446: LD_VAR 0 3
2450: PPUSH
2451: LD_VAR 0 4
2455: PPUSH
2456: CALL 9251 0 4
2460: PPOPN 4
2462: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2463: LD_INT 0
2465: PPUSH
2466: PPUSH
// disable ( mpActive ) ;
2467: LD_INT 100
2469: DISABLE_MARKED
// disable ( mpWin ) ;
2470: LD_INT 101
2472: DISABLE_MARKED
// disable ( mpLose ) ;
2473: LD_INT 102
2475: DISABLE_MARKED
// mpGameType := 0 ;
2476: LD_ADDR_EXP 3
2480: PUSH
2481: LD_INT 0
2483: ST_TO_ADDR
// mpGameSettings := [ ] ;
2484: LD_ADDR_EXP 6
2488: PUSH
2489: EMPTY
2490: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2491: LD_ADDR_EXP 4
2495: PUSH
2496: EMPTY
2497: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2498: LD_ADDR_EXP 5
2502: PUSH
2503: EMPTY
2504: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2505: LD_ADDR_EXP 29
2509: PUSH
2510: LD_INT 2
2512: PUSH
2513: LD_INT 2
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2520: LD_ADDR_EXP 12
2524: PUSH
2525: EMPTY
2526: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2527: LD_ADDR_EXP 13
2531: PUSH
2532: EMPTY
2533: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2534: LD_ADDR_EXP 41
2538: PUSH
2539: EMPTY
2540: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2541: LD_ADDR_EXP 42
2545: PUSH
2546: EMPTY
2547: ST_TO_ADDR
// mpDepots := [ ] ;
2548: LD_ADDR_EXP 14
2552: PUSH
2553: EMPTY
2554: ST_TO_ADDR
// mpBuildings := [ ] ;
2555: LD_ADDR_EXP 17
2559: PUSH
2560: EMPTY
2561: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2562: LD_ADDR_EXP 18
2566: PUSH
2567: EMPTY
2568: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2569: LD_ADDR_EXP 19
2573: PUSH
2574: EMPTY
2575: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2576: LD_ADDR_EXP 20
2580: PUSH
2581: EMPTY
2582: ST_TO_ADDR
// mpStartingResources := [ ] ;
2583: LD_ADDR_EXP 15
2587: PUSH
2588: EMPTY
2589: ST_TO_ADDR
// mpStartPos := [ ] ;
2590: LD_ADDR_EXP 21
2594: PUSH
2595: EMPTY
2596: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2597: LD_ADDR_EXP 22
2601: PUSH
2602: LD_INT 1
2604: NEG
2605: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2606: LD_ADDR_EXP 23
2610: PUSH
2611: EMPTY
2612: ST_TO_ADDR
// mpApemans := [ ] ;
2613: LD_ADDR_EXP 30
2617: PUSH
2618: EMPTY
2619: ST_TO_ADDR
// mpApemansArea := [ ] ;
2620: LD_ADDR_EXP 31
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// mpRespawn := [ ] ;
2627: LD_ADDR_EXP 33
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// mpKingArea := 0 ;
2634: LD_ADDR_EXP 34
2638: PUSH
2639: LD_INT 0
2641: ST_TO_ADDR
// mpPoints := [ ] ;
2642: LD_ADDR_EXP 35
2646: PUSH
2647: EMPTY
2648: ST_TO_ADDR
// mpVehicles := 0 ;
2649: LD_ADDR_EXP 36
2653: PUSH
2654: LD_INT 0
2656: ST_TO_ADDR
// mpShipments := 0 ;
2657: LD_ADDR_EXP 27
2661: PUSH
2662: LD_INT 0
2664: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2665: LD_ADDR_EXP 40
2669: PUSH
2670: EMPTY
2671: PUSH
2672: EMPTY
2673: PUSH
2674: EMPTY
2675: PUSH
2676: EMPTY
2677: PUSH
2678: EMPTY
2679: PUSH
2680: EMPTY
2681: PUSH
2682: EMPTY
2683: PUSH
2684: EMPTY
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: LIST
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2696: LD_ADDR_EXP 32
2700: PUSH
2701: EMPTY
2702: PUSH
2703: EMPTY
2704: PUSH
2705: EMPTY
2706: PUSH
2707: EMPTY
2708: PUSH
2709: EMPTY
2710: PUSH
2711: EMPTY
2712: PUSH
2713: EMPTY
2714: PUSH
2715: EMPTY
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: ST_TO_ADDR
// mpEmissions := 0 ;
2727: LD_ADDR_EXP 37
2731: PUSH
2732: LD_INT 0
2734: ST_TO_ADDR
// mpTeleports := 0 ;
2735: LD_ADDR_EXP 43
2739: PUSH
2740: LD_INT 0
2742: ST_TO_ADDR
// mpArtifacts := 0 ;
2743: LD_ADDR_EXP 44
2747: PUSH
2748: LD_INT 0
2750: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2751: LD_ADDR_EXP 45
2755: PUSH
2756: LD_INT 0
2758: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2759: LD_ADDR_EXP 25
2763: PUSH
2764: LD_INT 3
2766: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2767: LD_ADDR_EXP 24
2771: PUSH
2772: LD_INT 15
2774: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2775: LD_ADDR_EXP 38
2779: PUSH
2780: LD_INT 0
2782: ST_TO_ADDR
// mpGameActive := false ;
2783: LD_ADDR_EXP 39
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// mpBlockRespThread := false ;
2791: LD_ADDR_EXP 46
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// for i := 1 to 32 do
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: DOUBLE
2805: LD_INT 1
2807: DEC
2808: ST_TO_ADDR
2809: LD_INT 32
2811: PUSH
2812: FOR_TO
2813: IFFALSE 2840
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2815: LD_ADDR_EXP 6
2819: PUSH
2820: LD_EXP 6
2824: PPUSH
2825: LD_VAR 0 2
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 1
2837: ST_TO_ADDR
2838: GO 2812
2840: POP
2841: POP
// end ;
2842: LD_VAR 0 1
2846: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2847: LD_INT 0
2849: PPUSH
2850: PPUSH
2851: PPUSH
2852: PPUSH
2853: PPUSH
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
2858: PPUSH
2859: PPUSH
2860: PPUSH
2861: PPUSH
2862: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
2863: LD_ADDR_VAR 0 14
2867: PUSH
2868: LD_INT 1
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: LD_INT 3
2876: PUSH
2877: LD_INT 5
2879: PUSH
2880: LD_INT 6
2882: PUSH
2883: LD_INT 7
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: ST_TO_ADDR
// for i in gameTypes do
2894: LD_ADDR_VAR 0 2
2898: PUSH
2899: LD_VAR 0 14
2903: PUSH
2904: FOR_IN
2905: IFFALSE 2914
// disable ( i ) ;
2907: LD_VAR 0 2
2911: DISABLE_MARKED
2912: GO 2904
2914: POP
2915: POP
// if Multiplayer then
2916: LD_OWVAR 4
2920: IFFALSE 3104
// begin mpGameType := mp_game_type ;
2922: LD_ADDR_EXP 3
2926: PUSH
2927: LD_OWVAR 6
2931: ST_TO_ADDR
// your_side := mp_player_side ;
2932: LD_ADDR_OWVAR 2
2936: PUSH
2937: LD_OWVAR 7
2941: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
2942: LD_ADDR_EXP 7
2946: PUSH
2947: LD_OWVAR 17
2951: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
2952: LD_ADDR_EXP 8
2956: PUSH
2957: LD_OWVAR 15
2961: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
2962: LD_ADDR_EXP 9
2966: PUSH
2967: LD_OWVAR 16
2971: ST_TO_ADDR
// mpTeams := mp_teams ;
2972: LD_ADDR_EXP 10
2976: PUSH
2977: LD_OWVAR 12
2981: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
2982: LD_ADDR_VAR 0 2
2986: PUSH
2987: DOUBLE
2988: LD_INT 1
2990: DEC
2991: ST_TO_ADDR
2992: LD_EXP 4
2996: PPUSH
2997: CALL 12572 0 1
3001: PUSH
3002: FOR_TO
3003: IFFALSE 3079
// begin setting := mpGameSettingsKeys [ i ] ;
3005: LD_ADDR_VAR 0 12
3009: PUSH
3010: LD_EXP 4
3014: PUSH
3015: LD_VAR 0 2
3019: ARRAY
3020: ST_TO_ADDR
// if setting then
3021: LD_VAR 0 12
3025: IFFALSE 3077
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3027: LD_ADDR_EXP 6
3031: PUSH
3032: LD_EXP 6
3036: PPUSH
3037: LD_VAR 0 2
3041: PPUSH
3042: LD_EXP 5
3046: PUSH
3047: LD_VAR 0 2
3051: ARRAY
3052: PUSH
3053: LD_VAR 0 2
3057: PUSH
3058: LD_INT 1
3060: MINUS
3061: PPUSH
3062: CALL_OW 426
3066: PUSH
3067: LD_INT 1
3069: PLUS
3070: ARRAY
3071: PPUSH
3072: CALL_OW 1
3076: ST_TO_ADDR
// end ;
3077: GO 3002
3079: POP
3080: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3081: LD_ADDR_EXP 11
3085: PUSH
3086: LD_EXP 8
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: EMPTY
3095: LIST
3096: DIFF
3097: PUSH
3098: LD_INT 1
3100: GREATER
3101: ST_TO_ADDR
// end else
3102: GO 3104
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3104: LD_EXP 3
3108: PPUSH
3109: CALL 806 0 1
// if Count ( mpMarkedAreas ) then
3113: LD_EXP 18
3117: PPUSH
3118: CALL 12572 0 1
3122: IFFALSE 3153
// begin for i in mpMarkedAreas do
3124: LD_ADDR_VAR 0 2
3128: PUSH
3129: LD_EXP 18
3133: PUSH
3134: FOR_IN
3135: IFFALSE 3151
// SetAreaMapShow ( i , 0 ) ;
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_INT 0
3144: PPUSH
3145: CALL_OW 424
3149: GO 3134
3151: POP
3152: POP
// end ; for i := 1 to 8 do
3153: LD_ADDR_VAR 0 2
3157: PUSH
3158: DOUBLE
3159: LD_INT 1
3161: DEC
3162: ST_TO_ADDR
3163: LD_INT 8
3165: PUSH
3166: FOR_TO
3167: IFFALSE 4602
// begin if not mpSidePositions [ i ] then
3169: LD_EXP 7
3173: PUSH
3174: LD_VAR 0 2
3178: ARRAY
3179: NOT
3180: IFFALSE 3184
// continue ;
3182: GO 3166
// side := i ;
3184: LD_ADDR_VAR 0 7
3188: PUSH
3189: LD_VAR 0 2
3193: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3194: LD_ADDR_VAR 0 9
3198: PUSH
3199: LD_EXP 9
3203: PUSH
3204: LD_VAR 0 2
3208: ARRAY
3209: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3210: LD_ADDR_VAR 0 8
3214: PUSH
3215: LD_EXP 7
3219: PUSH
3220: LD_VAR 0 2
3224: ARRAY
3225: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3226: LD_EXP 12
3230: PPUSH
3231: CALL 12572 0 1
3235: IFFALSE 3312
// begin for j in mpOilDeposits [ pos ] do
3237: LD_ADDR_VAR 0 3
3241: PUSH
3242: LD_EXP 12
3246: PUSH
3247: LD_VAR 0 8
3251: ARRAY
3252: PUSH
3253: FOR_IN
3254: IFFALSE 3310
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3256: LD_VAR 0 3
3260: PUSH
3261: LD_INT 1
3263: ARRAY
3264: PPUSH
3265: LD_VAR 0 3
3269: PUSH
3270: LD_INT 2
3272: ARRAY
3273: PPUSH
3274: LD_INT 2
3276: PPUSH
3277: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3281: LD_VAR 0 3
3285: PUSH
3286: LD_INT 1
3288: ARRAY
3289: PPUSH
3290: LD_VAR 0 3
3294: PUSH
3295: LD_INT 2
3297: ARRAY
3298: PPUSH
3299: LD_VAR 0 7
3303: PPUSH
3304: CALL_OW 441
// end ;
3308: GO 3253
3310: POP
3311: POP
// end ; if Count ( mpSibDeposits ) then
3312: LD_EXP 13
3316: PPUSH
3317: CALL 12572 0 1
3321: IFFALSE 3398
// begin for j in mpSibDeposits [ pos ] do
3323: LD_ADDR_VAR 0 3
3327: PUSH
3328: LD_EXP 13
3332: PUSH
3333: LD_VAR 0 8
3337: ARRAY
3338: PUSH
3339: FOR_IN
3340: IFFALSE 3396
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3342: LD_VAR 0 3
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PPUSH
3351: LD_VAR 0 3
3355: PUSH
3356: LD_INT 2
3358: ARRAY
3359: PPUSH
3360: LD_INT 3
3362: PPUSH
3363: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3367: LD_VAR 0 3
3371: PUSH
3372: LD_INT 1
3374: ARRAY
3375: PPUSH
3376: LD_VAR 0 3
3380: PUSH
3381: LD_INT 2
3383: ARRAY
3384: PPUSH
3385: LD_VAR 0 7
3389: PPUSH
3390: CALL_OW 441
// end ;
3394: GO 3339
3396: POP
3397: POP
// end ; InitBc ;
3398: CALL_OW 21
// InitUc ;
3402: CALL_OW 18
// uc_side := side ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_VAR 0 7
3415: ST_TO_ADDR
// uc_nation := nation ;
3416: LD_ADDR_OWVAR 21
3420: PUSH
3421: LD_VAR 0 9
3425: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3426: LD_EXP 22
3430: PUSH
3431: LD_INT 1
3433: NEG
3434: GREATER
3435: IFFALSE 3594
// begin x := mpStartPos [ pos ] [ 1 ] ;
3437: LD_ADDR_VAR 0 5
3441: PUSH
3442: LD_EXP 21
3446: PUSH
3447: LD_VAR 0 8
3451: ARRAY
3452: PUSH
3453: LD_INT 1
3455: ARRAY
3456: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3457: LD_ADDR_VAR 0 6
3461: PUSH
3462: LD_EXP 21
3466: PUSH
3467: LD_VAR 0 8
3471: ARRAY
3472: PUSH
3473: LD_INT 2
3475: ARRAY
3476: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3477: LD_VAR 0 5
3481: PPUSH
3482: LD_VAR 0 6
3486: PPUSH
3487: LD_INT 12
3489: PPUSH
3490: LD_INT 2
3492: PPUSH
3493: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3497: LD_ADDR_EXP 23
3501: PUSH
3502: LD_EXP 23
3506: PPUSH
3507: LD_VAR 0 7
3511: PPUSH
3512: LD_VAR 0 7
3516: PPUSH
3517: LD_VAR 0 5
3521: PPUSH
3522: LD_VAR 0 6
3526: PPUSH
3527: LD_INT 1
3529: PUSH
3530: LD_INT 100
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 70
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 3
3549: PUSH
3550: LD_INT 40
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 10
3559: PUSH
3560: LD_INT 25
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 20
3569: PUSH
3570: LD_INT 100
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PPUSH
3584: CALL_OW 418
3588: PPUSH
3589: CALL_OW 1
3593: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3594: LD_EXP 14
3598: PPUSH
3599: CALL 12572 0 1
3603: IFFALSE 3798
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
3605: LD_EXP 3
3609: PUSH
3610: LD_INT 2
3612: PUSH
3613: LD_INT 6
3615: PUSH
3616: LD_INT 7
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: IN
3624: IFFALSE 3644
// begin bc_level := 10 ;
3626: LD_ADDR_OWVAR 43
3630: PUSH
3631: LD_INT 10
3633: ST_TO_ADDR
// bc_type := b_warehouse ;
3634: LD_ADDR_OWVAR 42
3638: PUSH
3639: LD_INT 1
3641: ST_TO_ADDR
// end else
3642: GO 3660
// begin bc_level := 0 ;
3644: LD_ADDR_OWVAR 43
3648: PUSH
3649: LD_INT 0
3651: ST_TO_ADDR
// bc_type := b_depot ;
3652: LD_ADDR_OWVAR 42
3656: PUSH
3657: LD_INT 0
3659: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3660: LD_ADDR_VAR 0 4
3664: PUSH
3665: LD_EXP 14
3669: PUSH
3670: LD_VAR 0 8
3674: ARRAY
3675: PUSH
3676: LD_INT 1
3678: ARRAY
3679: PPUSH
3680: LD_EXP 14
3684: PUSH
3685: LD_VAR 0 8
3689: ARRAY
3690: PUSH
3691: LD_INT 2
3693: ARRAY
3694: PPUSH
3695: LD_EXP 14
3699: PUSH
3700: LD_VAR 0 8
3704: ARRAY
3705: PUSH
3706: LD_INT 3
3708: ARRAY
3709: PPUSH
3710: CALL_OW 47
3714: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3715: LD_VAR 0 4
3719: PPUSH
3720: LD_STRING @
3722: PUSH
3723: LD_VAR 0 7
3727: STR
3728: PPUSH
3729: CALL_OW 500
// if Count ( mpStartingResources ) then
3733: LD_EXP 15
3737: PPUSH
3738: CALL 12572 0 1
3742: IFFALSE 3796
// begin for j := 1 to mpStartingResources do
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_EXP 15
3758: PUSH
3759: FOR_TO
3760: IFFALSE 3794
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3762: LD_VAR 0 4
3766: PPUSH
3767: CALL_OW 274
3771: PPUSH
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_EXP 15
3781: PUSH
3782: LD_VAR 0 3
3786: ARRAY
3787: PPUSH
3788: CALL_OW 277
3792: GO 3759
3794: POP
3795: POP
// end ; end else
3796: GO 4005
// if Count ( mpStartingResources ) then
3798: LD_EXP 15
3802: PPUSH
3803: CALL 12572 0 1
3807: IFFALSE 4005
// begin x := mpStartPos [ pos ] [ 1 ] ;
3809: LD_ADDR_VAR 0 5
3813: PUSH
3814: LD_EXP 21
3818: PUSH
3819: LD_VAR 0 8
3823: ARRAY
3824: PUSH
3825: LD_INT 1
3827: ARRAY
3828: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3829: LD_ADDR_VAR 0 6
3833: PUSH
3834: LD_EXP 21
3838: PUSH
3839: LD_VAR 0 8
3843: ARRAY
3844: PUSH
3845: LD_INT 2
3847: ARRAY
3848: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3849: LD_ADDR_VAR 0 3
3853: PUSH
3854: DOUBLE
3855: LD_INT 1
3857: DEC
3858: ST_TO_ADDR
3859: LD_EXP 15
3863: PUSH
3864: FOR_TO
3865: IFFALSE 4003
// begin resources := mpStartingResources [ j ] ;
3867: LD_ADDR_VAR 0 13
3871: PUSH
3872: LD_EXP 15
3876: PUSH
3877: LD_VAR 0 3
3881: ARRAY
3882: ST_TO_ADDR
// if resources = 0 then
3883: LD_VAR 0 13
3887: PUSH
3888: LD_INT 0
3890: EQUAL
3891: IFFALSE 3895
// continue ;
3893: GO 3864
// repeat if resources >= 50 then
3895: LD_VAR 0 13
3899: PUSH
3900: LD_INT 50
3902: GREATEREQUAL
3903: IFFALSE 3949
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3905: LD_VAR 0 3
3909: PPUSH
3910: LD_INT 5
3912: PPUSH
3913: LD_VAR 0 5
3917: PPUSH
3918: LD_VAR 0 6
3922: PPUSH
3923: LD_INT 6
3925: PPUSH
3926: LD_INT 0
3928: PPUSH
3929: CALL_OW 60
// resources := resources - 50 ;
3933: LD_ADDR_VAR 0 13
3937: PUSH
3938: LD_VAR 0 13
3942: PUSH
3943: LD_INT 50
3945: MINUS
3946: ST_TO_ADDR
// end else
3947: GO 3991
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
3949: LD_VAR 0 3
3953: PPUSH
3954: LD_VAR 0 13
3958: PUSH
3959: LD_INT 10
3961: DIV
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_VAR 0 6
3972: PPUSH
3973: LD_INT 6
3975: PPUSH
3976: LD_INT 0
3978: PPUSH
3979: CALL_OW 60
// resources := 0 ;
3983: LD_ADDR_VAR 0 13
3987: PUSH
3988: LD_INT 0
3990: ST_TO_ADDR
// end ; until resources <= 0 ;
3991: LD_VAR 0 13
3995: PUSH
3996: LD_INT 0
3998: LESSEQUAL
3999: IFFALSE 3895
// end ;
4001: GO 3864
4003: POP
4004: POP
// end ; if Count ( mpBuildings ) then
4005: LD_EXP 17
4009: PPUSH
4010: CALL 12572 0 1
4014: IFFALSE 4092
// begin for j in mpBuildings [ pos ] do
4016: LD_ADDR_VAR 0 3
4020: PUSH
4021: LD_EXP 17
4025: PUSH
4026: LD_VAR 0 8
4030: ARRAY
4031: PUSH
4032: FOR_IN
4033: IFFALSE 4090
// begin bc_level := 0 ;
4035: LD_ADDR_OWVAR 43
4039: PUSH
4040: LD_INT 0
4042: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4043: LD_ADDR_OWVAR 42
4047: PUSH
4048: LD_VAR 0 3
4052: PUSH
4053: LD_INT 1
4055: ARRAY
4056: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4057: LD_VAR 0 3
4061: PUSH
4062: LD_INT 2
4064: ARRAY
4065: PPUSH
4066: LD_VAR 0 3
4070: PUSH
4071: LD_INT 3
4073: ARRAY
4074: PPUSH
4075: LD_VAR 0 3
4079: PUSH
4080: LD_INT 4
4082: ARRAY
4083: PPUSH
4084: CALL_OW 47
// end ;
4088: GO 4032
4090: POP
4091: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4092: LD_EXP 26
4096: IFFALSE 4116
4098: PUSH
4099: LD_INT 20
4101: PPUSH
4102: LD_VAR 0 7
4106: PPUSH
4107: CALL_OW 321
4111: PUSH
4112: LD_INT 1
4114: EQUAL
4115: AND
4116: IFFALSE 4133
// SetTech ( tech_SibDet , side , state_researched ) ;
4118: LD_INT 20
4120: PPUSH
4121: LD_VAR 0 7
4125: PPUSH
4126: LD_INT 2
4128: PPUSH
4129: CALL_OW 322
// if not mpArtifacts then
4133: LD_EXP 44
4137: NOT
4138: IFFALSE 4155
// SetTech ( tech_artifact , side , state_disabled ) ;
4140: LD_INT 24
4142: PPUSH
4143: LD_VAR 0 7
4147: PPUSH
4148: LD_INT 0
4150: PPUSH
4151: CALL_OW 322
// if mpSibBomb = 1 then
4155: LD_EXP 28
4159: PUSH
4160: LD_INT 1
4162: EQUAL
4163: IFFALSE 4182
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4165: LD_INT 25
4167: PPUSH
4168: LD_VAR 0 7
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: CALL_OW 322
// end else
4180: GO 4197
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4182: LD_INT 25
4184: PPUSH
4185: LD_VAR 0 7
4189: PPUSH
4190: LD_INT 0
4192: PPUSH
4193: CALL_OW 322
// end ; if mpVehicles then
4197: LD_EXP 36
4201: IFFALSE 4300
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4203: LD_ADDR_VAR 0 3
4207: PUSH
4208: LD_VAR 0 7
4212: PPUSH
4213: LD_VAR 0 9
4217: PPUSH
4218: LD_EXP 36
4222: PPUSH
4223: CALL 5523 0 3
4227: PUSH
4228: FOR_IN
4229: IFFALSE 4298
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4231: LD_VAR 0 3
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: LD_INT 5
4241: PPUSH
4242: CALL_OW 12
4246: PPUSH
4247: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4251: LD_VAR 0 3
4255: PPUSH
4256: LD_EXP 21
4260: PUSH
4261: LD_VAR 0 8
4265: ARRAY
4266: PUSH
4267: LD_INT 1
4269: ARRAY
4270: PPUSH
4271: LD_EXP 21
4275: PUSH
4276: LD_VAR 0 8
4280: ARRAY
4281: PUSH
4282: LD_INT 2
4284: ARRAY
4285: PPUSH
4286: LD_INT 12
4288: PPUSH
4289: LD_INT 0
4291: PPUSH
4292: CALL_OW 50
// end ;
4296: GO 4228
4298: POP
4299: POP
// end ; uc_nation := nation ;
4300: LD_ADDR_OWVAR 21
4304: PUSH
4305: LD_VAR 0 9
4309: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4310: LD_EXP 3
4314: PUSH
4315: LD_INT 6
4317: PUSH
4318: LD_INT 7
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: IN
4325: IFFALSE 4350
4327: PUSH
4328: LD_EXP 7
4332: PUSH
4333: LD_VAR 0 2
4337: ARRAY
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: LD_INT 2
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: IN
4349: AND
4350: IFFALSE 4398
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4352: LD_ADDR_VAR 0 11
4356: PUSH
4357: LD_VAR 0 7
4361: PPUSH
4362: LD_VAR 0 9
4366: PPUSH
4367: LD_EXP 24
4371: PUSH
4372: LD_EXP 24
4376: PUSH
4377: LD_INT 2
4379: DIV
4380: PLUS
4381: PPUSH
4382: LD_EXP 25
4386: PUSH
4387: LD_INT 1
4389: PLUS
4390: PPUSH
4391: CALL 5014 0 4
4395: ST_TO_ADDR
4396: GO 4428
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4398: LD_ADDR_VAR 0 11
4402: PUSH
4403: LD_VAR 0 7
4407: PPUSH
4408: LD_VAR 0 9
4412: PPUSH
4413: LD_EXP 24
4417: PPUSH
4418: LD_EXP 25
4422: PPUSH
4423: CALL 5014 0 4
4427: ST_TO_ADDR
// for j in team do
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: LD_VAR 0 11
4437: PUSH
4438: FOR_IN
4439: IFFALSE 4488
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4441: LD_VAR 0 3
4445: PPUSH
4446: LD_EXP 21
4450: PUSH
4451: LD_VAR 0 8
4455: ARRAY
4456: PUSH
4457: LD_INT 1
4459: ARRAY
4460: PPUSH
4461: LD_EXP 21
4465: PUSH
4466: LD_VAR 0 8
4470: ARRAY
4471: PUSH
4472: LD_INT 2
4474: ARRAY
4475: PPUSH
4476: LD_INT 12
4478: PPUSH
4479: LD_INT 0
4481: PPUSH
4482: CALL_OW 50
4486: GO 4438
4488: POP
4489: POP
// if mpApemans then
4490: LD_EXP 30
4494: IFFALSE 4600
// begin for j := 1 to mpApemans do
4496: LD_ADDR_VAR 0 3
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_EXP 30
4510: PUSH
4511: FOR_TO
4512: IFFALSE 4598
// begin PrepareApeman ( - 5 ) ;
4514: LD_INT 5
4516: NEG
4517: PPUSH
4518: CALL 44665 0 1
// ape := CreateHuman ;
4522: LD_ADDR_VAR 0 10
4526: PUSH
4527: CALL_OW 44
4531: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4532: LD_ADDR_EXP 32
4536: PUSH
4537: LD_EXP 32
4541: PPUSH
4542: LD_VAR 0 8
4546: PPUSH
4547: LD_EXP 32
4551: PUSH
4552: LD_VAR 0 8
4556: ARRAY
4557: PPUSH
4558: LD_VAR 0 10
4562: PPUSH
4563: CALL 48538 0 2
4567: PPUSH
4568: CALL_OW 1
4572: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4573: LD_VAR 0 10
4577: PPUSH
4578: LD_EXP 31
4582: PUSH
4583: LD_VAR 0 8
4587: ARRAY
4588: PPUSH
4589: LD_INT 0
4591: PPUSH
4592: CALL_OW 49
// end ;
4596: GO 4511
4598: POP
4599: POP
// end ; end ;
4600: GO 3166
4602: POP
4603: POP
// if not mpTeamGame then
4604: LD_EXP 11
4608: NOT
4609: IFFALSE 4707
// begin for i := 1 to 8 do
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: DOUBLE
4617: LD_INT 1
4619: DEC
4620: ST_TO_ADDR
4621: LD_INT 8
4623: PUSH
4624: FOR_TO
4625: IFFALSE 4703
// for j := 1 to 8 do
4627: LD_ADDR_VAR 0 3
4631: PUSH
4632: DOUBLE
4633: LD_INT 1
4635: DEC
4636: ST_TO_ADDR
4637: LD_INT 8
4639: PUSH
4640: FOR_TO
4641: IFFALSE 4699
// if i <> j then
4643: LD_VAR 0 2
4647: PUSH
4648: LD_VAR 0 3
4652: NONEQUAL
4653: IFFALSE 4677
// SetAttitude ( i , j , att_neutral , true ) else
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: LD_INT 0
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: CALL_OW 80
4675: GO 4697
// SetAttitude ( i , j , att_friend , true ) ;
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_VAR 0 3
4686: PPUSH
4687: LD_INT 1
4689: PPUSH
4690: LD_INT 1
4692: PPUSH
4693: CALL_OW 80
4697: GO 4640
4699: POP
4700: POP
4701: GO 4624
4703: POP
4704: POP
// end else
4705: GO 4882
// begin if mpSharedVision then
4707: LD_EXP 16
4711: IFFALSE 4776
// begin for i in mpTeams do
4713: LD_ADDR_VAR 0 2
4717: PUSH
4718: LD_EXP 10
4722: PUSH
4723: FOR_IN
4724: IFFALSE 4774
// for j := 2 to i do
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: DOUBLE
4732: LD_INT 2
4734: DEC
4735: ST_TO_ADDR
4736: LD_VAR 0 2
4740: PUSH
4741: FOR_TO
4742: IFFALSE 4770
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4744: LD_VAR 0 2
4748: PUSH
4749: LD_VAR 0 3
4753: ARRAY
4754: PPUSH
4755: LD_VAR 0 2
4759: PUSH
4760: LD_INT 1
4762: ARRAY
4763: PPUSH
4764: CALL_OW 343
4768: GO 4741
4770: POP
4771: POP
4772: GO 4723
4774: POP
4775: POP
// end ; for i := 1 to 8 do
4776: LD_ADDR_VAR 0 2
4780: PUSH
4781: DOUBLE
4782: LD_INT 1
4784: DEC
4785: ST_TO_ADDR
4786: LD_INT 8
4788: PUSH
4789: FOR_TO
4790: IFFALSE 4880
// for j := 1 to 8 do
4792: LD_ADDR_VAR 0 3
4796: PUSH
4797: DOUBLE
4798: LD_INT 1
4800: DEC
4801: ST_TO_ADDR
4802: LD_INT 8
4804: PUSH
4805: FOR_TO
4806: IFFALSE 4876
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4808: LD_EXP 8
4812: PUSH
4813: LD_VAR 0 2
4817: ARRAY
4818: PUSH
4819: LD_EXP 8
4823: PUSH
4824: LD_VAR 0 3
4828: ARRAY
4829: EQUAL
4830: IFFALSE 4854
// SetAttitude ( i , j , att_friend , true ) else
4832: LD_VAR 0 2
4836: PPUSH
4837: LD_VAR 0 3
4841: PPUSH
4842: LD_INT 1
4844: PPUSH
4845: LD_INT 1
4847: PPUSH
4848: CALL_OW 80
4852: GO 4874
// SetAttitude ( i , j , att_enemy , true ) ;
4854: LD_VAR 0 2
4858: PPUSH
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: CALL_OW 80
4874: GO 4805
4876: POP
4877: POP
4878: GO 4789
4880: POP
4881: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4882: LD_ADDR_OWVAR 71
4886: PUSH
4887: LD_EXP 9
4891: PUSH
4892: LD_OWVAR 2
4896: ARRAY
4897: ST_TO_ADDR
// if IAmSpec then
4898: CALL_OW 531
4902: IFFALSE 4943
// begin FogOff ( true ) ;
4904: LD_INT 1
4906: PPUSH
4907: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4911: LD_EXP 29
4915: PUSH
4916: LD_INT 1
4918: ARRAY
4919: PUSH
4920: LD_INT 2
4922: DIV
4923: PPUSH
4924: LD_EXP 29
4928: PUSH
4929: LD_INT 2
4931: ARRAY
4932: PUSH
4933: LD_INT 2
4935: DIV
4936: PPUSH
4937: CALL_OW 86
// end else
4941: GO 4989
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
4943: LD_EXP 21
4947: PUSH
4948: LD_EXP 7
4952: PUSH
4953: LD_OWVAR 2
4957: ARRAY
4958: ARRAY
4959: PUSH
4960: LD_INT 1
4962: ARRAY
4963: PPUSH
4964: LD_EXP 21
4968: PUSH
4969: LD_EXP 7
4973: PUSH
4974: LD_OWVAR 2
4978: ARRAY
4979: ARRAY
4980: PUSH
4981: LD_INT 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 86
// end ; BeginBuildUp ;
4989: CALL 6056 0 0
// enable ( mpActive ) ;
4993: LD_INT 100
4995: ENABLE_MARKED
// enable ( mpGameType ) ;
4996: LD_EXP 3
5000: ENABLE_MARKED
// mpGameActive := true ;
5001: LD_ADDR_EXP 39
5005: PUSH
5006: LD_INT 1
5008: ST_TO_ADDR
// end ;
5009: LD_VAR 0 1
5013: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
5014: LD_INT 0
5016: PPUSH
5017: PPUSH
5018: PPUSH
5019: PPUSH
// result := [ ] ;
5020: LD_ADDR_VAR 0 5
5024: PUSH
5025: EMPTY
5026: ST_TO_ADDR
// class := class_soldier ;
5027: LD_ADDR_VAR 0 8
5031: PUSH
5032: LD_INT 1
5034: ST_TO_ADDR
// uc_side := side ;
5035: LD_ADDR_OWVAR 20
5039: PUSH
5040: LD_VAR 0 1
5044: ST_TO_ADDR
// uc_nation := nation ;
5045: LD_ADDR_OWVAR 21
5049: PUSH
5050: LD_VAR 0 2
5054: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5055: LD_ADDR_OWVAR 26
5059: PUSH
5060: LD_OWVAR 19
5064: PUSH
5065: LD_VAR 0 1
5069: ARRAY
5070: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5071: LD_INT 1
5073: PPUSH
5074: LD_INT 2
5076: PPUSH
5077: CALL_OW 12
5081: PPUSH
5082: LD_VAR 0 8
5086: PPUSH
5087: LD_VAR 0 4
5091: PUSH
5092: LD_INT 2
5094: PLUS
5095: PPUSH
5096: CALL_OW 380
// hc_importance := 105 ;
5100: LD_ADDR_OWVAR 32
5104: PUSH
5105: LD_INT 105
5107: ST_TO_ADDR
// if Multiplayer then
5108: LD_OWVAR 4
5112: IFFALSE 5152
// begin hc_gallery := MULTIAVATARS ;
5114: LD_ADDR_OWVAR 33
5118: PUSH
5119: LD_STRING MULTIAVATARS
5121: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5122: LD_ADDR_OWVAR 34
5126: PUSH
5127: LD_VAR 0 1
5131: PPUSH
5132: CALL_OW 525
5136: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5137: LD_ADDR_OWVAR 27
5141: PUSH
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 526
5151: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
5152: LD_ADDR_VAR 0 5
5156: PUSH
5157: LD_VAR 0 5
5161: PPUSH
5162: CALL_OW 44
5166: PPUSH
5167: CALL 48538 0 2
5171: ST_TO_ADDR
// if mpTeamPreset then
5172: LD_LOC 1
5176: IFFALSE 5272
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5178: LD_LOC 1
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PPUSH
5187: LD_VAR 0 5
5191: PUSH
5192: LD_VAR 0 5
5196: ARRAY
5197: PPUSH
5198: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5202: LD_VAR 0 5
5206: PUSH
5207: LD_VAR 0 5
5211: ARRAY
5212: PPUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_LOC 1
5220: PUSH
5221: LD_INT 1
5223: ARRAY
5224: PPUSH
5225: LD_INT 1
5227: PPUSH
5228: CALL_OW 260
5232: PPUSH
5233: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5237: LD_VAR 0 5
5241: PUSH
5242: LD_VAR 0 5
5246: ARRAY
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_LOC 1
5255: PUSH
5256: LD_INT 1
5258: ARRAY
5259: PPUSH
5260: LD_INT 2
5262: PPUSH
5263: CALL_OW 260
5267: PPUSH
5268: CALL_OW 239
// end ; InitHc_All ( ) ;
5272: CALL_OW 584
// class := 2 ;
5276: LD_ADDR_VAR 0 8
5280: PUSH
5281: LD_INT 2
5283: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5284: LD_ADDR_VAR 0 6
5288: PUSH
5289: DOUBLE
5290: LD_INT 1
5292: DEC
5293: ST_TO_ADDR
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 1
5301: MINUS
5302: PUSH
5303: FOR_TO
5304: IFFALSE 5499
// begin PrepareHuman ( false , class , skill ) ;
5306: LD_INT 0
5308: PPUSH
5309: LD_VAR 0 8
5313: PPUSH
5314: LD_VAR 0 4
5318: PPUSH
5319: CALL_OW 380
// un := CreateHuman ;
5323: LD_ADDR_VAR 0 7
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// result := Join ( result , un ) ;
5333: LD_ADDR_VAR 0 5
5337: PUSH
5338: LD_VAR 0 5
5342: PPUSH
5343: LD_VAR 0 7
5347: PPUSH
5348: CALL 48538 0 2
5352: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5353: LD_LOC 1
5357: PPUSH
5358: CALL 12572 0 1
5362: PUSH
5363: LD_VAR 0 3
5367: GREATEREQUAL
5368: IFFALSE 5464
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5370: LD_LOC 1
5374: PUSH
5375: LD_VAR 0 6
5379: PUSH
5380: LD_INT 1
5382: PLUS
5383: ARRAY
5384: PPUSH
5385: LD_VAR 0 7
5389: PPUSH
5390: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5394: LD_VAR 0 7
5398: PPUSH
5399: LD_INT 1
5401: PPUSH
5402: LD_LOC 1
5406: PUSH
5407: LD_VAR 0 6
5411: PUSH
5412: LD_INT 1
5414: PLUS
5415: ARRAY
5416: PPUSH
5417: LD_INT 1
5419: PPUSH
5420: CALL_OW 260
5424: PPUSH
5425: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5429: LD_VAR 0 7
5433: PPUSH
5434: LD_INT 2
5436: PPUSH
5437: LD_LOC 1
5441: PUSH
5442: LD_VAR 0 6
5446: PUSH
5447: LD_INT 1
5449: PLUS
5450: ARRAY
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: CALL_OW 260
5459: PPUSH
5460: CALL_OW 239
// end ; class := Inc ( class ) ;
5464: LD_ADDR_VAR 0 8
5468: PUSH
5469: LD_VAR 0 8
5473: PPUSH
5474: CALL 49911 0 1
5478: ST_TO_ADDR
// if class = 5 then
5479: LD_VAR 0 8
5483: PUSH
5484: LD_INT 5
5486: EQUAL
5487: IFFALSE 5497
// class := 1 ;
5489: LD_ADDR_VAR 0 8
5493: PUSH
5494: LD_INT 1
5496: ST_TO_ADDR
// end ;
5497: GO 5303
5499: POP
5500: POP
// if not mpTeamPreset then
5501: LD_LOC 1
5505: NOT
5506: IFFALSE 5518
// mpTeamPreset := result ;
5508: LD_ADDR_LOC 1
5512: PUSH
5513: LD_VAR 0 5
5517: ST_TO_ADDR
// end ;
5518: LD_VAR 0 5
5522: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5523: LD_INT 0
5525: PPUSH
5526: PPUSH
// result := [ ] ;
5527: LD_ADDR_VAR 0 4
5531: PUSH
5532: EMPTY
5533: ST_TO_ADDR
// if not vehicles then
5534: LD_VAR 0 3
5538: NOT
5539: IFFALSE 5543
// exit ;
5541: GO 5757
// for i := 1 to vehicles [ nation ] do
5543: LD_ADDR_VAR 0 5
5547: PUSH
5548: DOUBLE
5549: LD_INT 1
5551: DEC
5552: ST_TO_ADDR
5553: LD_VAR 0 3
5557: PUSH
5558: LD_VAR 0 2
5562: ARRAY
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5755
// begin uc_side := side ;
5567: LD_ADDR_OWVAR 20
5571: PUSH
5572: LD_VAR 0 1
5576: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5577: LD_VAR 0 3
5581: PUSH
5582: LD_VAR 0 2
5586: ARRAY
5587: PUSH
5588: LD_VAR 0 5
5592: ARRAY
5593: PPUSH
5594: CALL 12572 0 1
5598: PUSH
5599: LD_INT 4
5601: GREATER
5602: IFFALSE 5632
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5604: LD_ADDR_OWVAR 21
5608: PUSH
5609: LD_VAR 0 3
5613: PUSH
5614: LD_VAR 0 2
5618: ARRAY
5619: PUSH
5620: LD_VAR 0 5
5624: ARRAY
5625: PUSH
5626: LD_INT 5
5628: ARRAY
5629: ST_TO_ADDR
5630: GO 5642
// uc_nation := nation ;
5632: LD_ADDR_OWVAR 21
5636: PUSH
5637: LD_VAR 0 2
5641: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5642: LD_VAR 0 3
5646: PUSH
5647: LD_VAR 0 2
5651: ARRAY
5652: PUSH
5653: LD_VAR 0 5
5657: ARRAY
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PPUSH
5663: LD_VAR 0 3
5667: PUSH
5668: LD_VAR 0 2
5672: ARRAY
5673: PUSH
5674: LD_VAR 0 5
5678: ARRAY
5679: PUSH
5680: LD_INT 2
5682: ARRAY
5683: PPUSH
5684: LD_VAR 0 3
5688: PUSH
5689: LD_VAR 0 2
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 5
5699: ARRAY
5700: PUSH
5701: LD_INT 3
5703: ARRAY
5704: PPUSH
5705: LD_VAR 0 3
5709: PUSH
5710: LD_VAR 0 2
5714: ARRAY
5715: PUSH
5716: LD_VAR 0 5
5720: ARRAY
5721: PUSH
5722: LD_INT 4
5724: ARRAY
5725: PPUSH
5726: LD_INT 80
5728: PPUSH
5729: CALL 15368 0 5
// result := Join ( result , CreateVehicle ) ;
5733: LD_ADDR_VAR 0 4
5737: PUSH
5738: LD_VAR 0 4
5742: PPUSH
5743: CALL_OW 45
5747: PPUSH
5748: CALL 48538 0 2
5752: ST_TO_ADDR
// end ;
5753: GO 5564
5755: POP
5756: POP
// end ;
5757: LD_VAR 0 4
5761: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5762: LD_INT 0
5764: PPUSH
5765: PPUSH
// for i in mpBattleFlags do
5766: LD_ADDR_VAR 0 3
5770: PUSH
5771: LD_EXP 23
5775: PUSH
5776: FOR_IN
5777: IFFALSE 5854
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5779: LD_VAR 0 3
5783: PPUSH
5784: LD_INT 1
5786: PUSH
5787: LD_VAR 0 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 2
5798: PUSH
5799: LD_VAR 0 1
5803: PUSH
5804: LD_REAL  7.00000000000000E-0001
5807: MUL
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: LD_VAR 0 1
5820: PUSH
5821: LD_REAL  4.00000000000000E-0001
5824: MUL
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 20
5832: PUSH
5833: LD_VAR 0 1
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PPUSH
5848: CALL_OW 423
5852: GO 5776
5854: POP
5855: POP
// end ;
5856: LD_VAR 0 2
5860: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5861: LD_INT 100
5863: IFFALSE 5958
5865: GO 5867
5867: DISABLE
5868: LD_INT 0
5870: PPUSH
5871: PPUSH
// begin if mpBattleFlag <= 0 then
5872: LD_EXP 22
5876: PUSH
5877: LD_INT 0
5879: LESSEQUAL
5880: IFFALSE 5884
// exit ;
5882: GO 5958
// strength := 100 ;
5884: LD_ADDR_VAR 0 2
5888: PUSH
5889: LD_INT 100
5891: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
5892: LD_EXP 22
5896: PPUSH
5897: CALL_OW 67
// strength := Dec ( strength ) ;
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL 49933 0 1
5915: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
5916: LD_VAR 0 2
5920: PPUSH
5921: CALL 5762 0 1
// until not strength ;
5925: LD_VAR 0 2
5929: NOT
5930: IFFALSE 5892
// for i in mpBattleFlags do
5932: LD_ADDR_VAR 0 1
5936: PUSH
5937: LD_EXP 23
5941: PUSH
5942: FOR_IN
5943: IFFALSE 5956
// KillBattleFlag ( i ) ;
5945: LD_VAR 0 1
5949: PPUSH
5950: CALL_OW 419
5954: GO 5942
5956: POP
5957: POP
// end ;
5958: PPOPN 2
5960: END
// every 0 0$1 marked mpActive do var side , tmp ;
5961: GO 5963
5963: DISABLE
5964: LD_INT 0
5966: PPUSH
5967: PPUSH
// begin if mpSibBomb <= 1 then
5968: LD_EXP 28
5972: PUSH
5973: LD_INT 1
5975: LESSEQUAL
5976: IFFALSE 5980
// exit ;
5978: GO 6053
// tmp := mpSibBomb ;
5980: LD_ADDR_VAR 0 2
5984: PUSH
5985: LD_EXP 28
5989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5990: LD_INT 35
5992: PPUSH
5993: CALL_OW 67
// tmp := tmp - 0 0$1 ;
5997: LD_ADDR_VAR 0 2
6001: PUSH
6002: LD_VAR 0 2
6006: PUSH
6007: LD_INT 35
6009: MINUS
6010: ST_TO_ADDR
// until not tmp ;
6011: LD_VAR 0 2
6015: NOT
6016: IFFALSE 5990
// for side := 1 to 8 do
6018: LD_ADDR_VAR 0 1
6022: PUSH
6023: DOUBLE
6024: LD_INT 1
6026: DEC
6027: ST_TO_ADDR
6028: LD_INT 8
6030: PUSH
6031: FOR_TO
6032: IFFALSE 6051
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6034: LD_INT 25
6036: PPUSH
6037: LD_VAR 0 1
6041: PPUSH
6042: LD_INT 1
6044: PPUSH
6045: CALL_OW 322
6049: GO 6031
6051: POP
6052: POP
// end ;
6053: PPOPN 2
6055: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6056: LD_INT 0
6058: PPUSH
6059: PPUSH
6060: PPUSH
// mpBuildUpTimeDelay := 0 ;
6061: LD_ADDR_EXP 47
6065: PUSH
6066: LD_INT 0
6068: ST_TO_ADDR
// if not mpBuildUpTime then
6069: LD_EXP 20
6073: NOT
6074: IFFALSE 6078
// exit ;
6076: GO 6267
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6078: LD_ADDR_EXP 47
6082: PUSH
6083: LD_INT 8400
6085: PUSH
6086: LD_INT 2100
6088: PUSH
6089: LD_EXP 20
6093: MUL
6094: PLUS
6095: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6096: LD_ADDR_EXP 48
6100: PUSH
6101: LD_INT 1
6103: ST_TO_ADDR
// for i := 1 to 8 do
6104: LD_ADDR_VAR 0 2
6108: PUSH
6109: DOUBLE
6110: LD_INT 1
6112: DEC
6113: ST_TO_ADDR
6114: LD_INT 8
6116: PUSH
6117: FOR_TO
6118: IFFALSE 6265
// if mpSidePositions [ i ] then
6120: LD_EXP 7
6124: PUSH
6125: LD_VAR 0 2
6129: ARRAY
6130: IFFALSE 6263
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6132: LD_EXP 19
6136: PUSH
6137: LD_EXP 7
6141: PUSH
6142: LD_VAR 0 2
6146: ARRAY
6147: ARRAY
6148: PPUSH
6149: LD_INT 5
6151: PPUSH
6152: CALL_OW 424
// for j := 1 to 8 do
6156: LD_ADDR_VAR 0 3
6160: PUSH
6161: DOUBLE
6162: LD_INT 1
6164: DEC
6165: ST_TO_ADDR
6166: LD_INT 8
6168: PUSH
6169: FOR_TO
6170: IFFALSE 6261
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6172: LD_EXP 7
6176: PUSH
6177: LD_VAR 0 3
6181: ARRAY
6182: IFFALSE 6231
6184: PUSH
6185: LD_EXP 8
6189: PUSH
6190: LD_VAR 0 2
6194: ARRAY
6195: PUSH
6196: LD_EXP 8
6200: PUSH
6201: LD_VAR 0 3
6205: ARRAY
6206: NONEQUAL
6207: IFTRUE 6230
6209: PUSH
6210: LD_EXP 11
6214: NOT
6215: IFFALSE 6229
6217: PUSH
6218: LD_VAR 0 2
6222: PUSH
6223: LD_VAR 0 3
6227: NONEQUAL
6228: AND
6229: OR
6230: AND
6231: IFFALSE 6259
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6233: LD_VAR 0 3
6237: PPUSH
6238: LD_EXP 19
6242: PUSH
6243: LD_EXP 7
6247: PUSH
6248: LD_VAR 0 2
6252: ARRAY
6253: ARRAY
6254: PPUSH
6255: CALL_OW 333
6259: GO 6169
6261: POP
6262: POP
// end ;
6263: GO 6117
6265: POP
6266: POP
// end ;
6267: LD_VAR 0 1
6271: RET
// function EndBuildUp ; var i , j ; begin
6272: LD_INT 0
6274: PPUSH
6275: PPUSH
6276: PPUSH
// mpBuildUpTimeActive := false ;
6277: LD_ADDR_EXP 48
6281: PUSH
6282: LD_INT 0
6284: ST_TO_ADDR
// for i := 1 to 8 do
6285: LD_ADDR_VAR 0 2
6289: PUSH
6290: DOUBLE
6291: LD_INT 1
6293: DEC
6294: ST_TO_ADDR
6295: LD_INT 8
6297: PUSH
6298: FOR_TO
6299: IFFALSE 6446
// if mpSidePositions [ i ] then
6301: LD_EXP 7
6305: PUSH
6306: LD_VAR 0 2
6310: ARRAY
6311: IFFALSE 6444
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6313: LD_EXP 19
6317: PUSH
6318: LD_EXP 7
6322: PUSH
6323: LD_VAR 0 2
6327: ARRAY
6328: ARRAY
6329: PPUSH
6330: LD_INT 0
6332: PPUSH
6333: CALL_OW 424
// for j := 1 to 8 do
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: DOUBLE
6343: LD_INT 1
6345: DEC
6346: ST_TO_ADDR
6347: LD_INT 8
6349: PUSH
6350: FOR_TO
6351: IFFALSE 6442
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6353: LD_EXP 7
6357: PUSH
6358: LD_VAR 0 3
6362: ARRAY
6363: IFFALSE 6412
6365: PUSH
6366: LD_EXP 8
6370: PUSH
6371: LD_VAR 0 2
6375: ARRAY
6376: PUSH
6377: LD_EXP 8
6381: PUSH
6382: LD_VAR 0 3
6386: ARRAY
6387: NONEQUAL
6388: IFTRUE 6411
6390: PUSH
6391: LD_EXP 11
6395: NOT
6396: IFFALSE 6410
6398: PUSH
6399: LD_VAR 0 2
6403: PUSH
6404: LD_VAR 0 3
6408: NONEQUAL
6409: AND
6410: OR
6411: AND
6412: IFFALSE 6440
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_EXP 19
6423: PUSH
6424: LD_EXP 7
6428: PUSH
6429: LD_VAR 0 2
6433: ARRAY
6434: ARRAY
6435: PPUSH
6436: CALL_OW 334
6440: GO 6350
6442: POP
6443: POP
// end ;
6444: GO 6298
6446: POP
6447: POP
// end ;
6448: LD_VAR 0 1
6452: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6453: LD_EXP 48
6457: IFFALSE 6636
6459: GO 6461
6461: DISABLE
6462: LD_INT 0
6464: PPUSH
6465: PPUSH
// begin for i := 1 to 8 do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_INT 8
6478: PUSH
6479: FOR_TO
6480: IFFALSE 6633
// if mpSidePositions [ i ] then
6482: LD_EXP 7
6486: PUSH
6487: LD_VAR 0 1
6491: ARRAY
6492: IFFALSE 6631
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: LD_EXP 19
6503: PUSH
6504: LD_EXP 7
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: ARRAY
6515: PPUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 21
6521: PUSH
6522: LD_INT 1
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 2
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_OWVAR 2
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PPUSH
6560: CALL_OW 70
6564: PUSH
6565: FOR_IN
6566: IFFALSE 6629
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6568: LD_EXP 8
6572: PUSH
6573: LD_VAR 0 1
6577: ARRAY
6578: PUSH
6579: LD_EXP 8
6583: PUSH
6584: LD_OWVAR 2
6588: ARRAY
6589: NONEQUAL
6590: IFTRUE 6613
6592: PUSH
6593: LD_EXP 11
6597: NOT
6598: IFFALSE 6612
6600: PUSH
6601: LD_VAR 0 1
6605: PUSH
6606: LD_OWVAR 2
6610: NONEQUAL
6611: AND
6612: OR
6613: IFFALSE 6627
// ComMoveToArea ( un , BuildUpEscape ) ;
6615: LD_VAR 0 2
6619: PPUSH
6620: LD_INT 3
6622: PPUSH
6623: CALL_OW 113
6627: GO 6565
6629: POP
6630: POP
6631: GO 6479
6633: POP
6634: POP
// enable ;
6635: ENABLE
// end ;
6636: PPOPN 2
6638: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6639: LD_EXP 20
6643: IFFALSE 6693
6645: GO 6647
6647: DISABLE
6648: LD_INT 0
6650: PPUSH
// begin tmp := mpBuildUpTime ;
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: LD_EXP 20
6660: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6661: LD_INT 35
6663: PPUSH
6664: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6668: LD_ADDR_VAR 0 1
6672: PUSH
6673: LD_VAR 0 1
6677: PUSH
6678: LD_INT 35
6680: MINUS
6681: ST_TO_ADDR
// until not tmp ;
6682: LD_VAR 0 1
6686: NOT
6687: IFFALSE 6661
// EndBuildUp ;
6689: CALL 6272 0 0
// end ;
6693: PPOPN 1
6695: END
// every 0 0$1 trigger mpActive marked mpWin do
6696: LD_INT 100
6698: IFFALSE 6732
6700: GO 6702
6702: DISABLE
// begin if IAmServer then
6703: CALL_OW 518
6707: IFFALSE 6716
// wait ( 0 0$3 ) ;
6709: LD_INT 105
6711: PPUSH
6712: CALL_OW 67
// if Multiplayer then
6716: LD_OWVAR 4
6720: IFFALSE 6728
// YouWinInMultiplayer else
6722: CALL_OW 106
6726: GO 6732
// YouWin ;
6728: CALL_OW 103
// end ;
6732: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6733: LD_INT 0
6735: PPUSH
// result := false ;
6736: LD_ADDR_VAR 0 3
6740: PUSH
6741: LD_INT 0
6743: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6744: LD_VAR 0 1
6748: PUSH
6749: LD_INT 1
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6775
6755: LD_INT 5
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6775
6761: LD_INT 6
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6775
6767: LD_INT 7
6769: DOUBLE
6770: EQUAL
6771: IFTRUE 6775
6773: GO 6848
6775: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_VAR 0 2
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 2
6795: PUSH
6796: LD_INT 21
6798: PUSH
6799: LD_INT 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 33
6808: PUSH
6809: LD_INT 3
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: LD_INT 33
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: PPUSH
6841: CALL 12572 0 1
6845: ST_TO_ADDR
// end ; GameTypeSurvival :
6846: GO 7087
6848: LD_INT 2
6850: DOUBLE
6851: EQUAL
6852: IFTRUE 6856
6854: GO 6986
6856: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6857: LD_ADDR_VAR 0 3
6861: PUSH
6862: LD_INT 22
6864: PUSH
6865: LD_VAR 0 2
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 2
6876: PUSH
6877: LD_INT 30
6879: PUSH
6880: LD_INT 0
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 30
6889: PUSH
6890: LD_INT 1
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PPUSH
6906: CALL_OW 69
6910: PPUSH
6911: CALL 12572 0 1
6915: IFFALSE 6983
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_VAR 0 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 2
6932: PUSH
6933: LD_INT 21
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 33
6945: PUSH
6946: LD_INT 3
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 33
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: PPUSH
6978: CALL 12572 0 1
6982: AND
6983: ST_TO_ADDR
// end ; GameTypeKing :
6984: GO 7087
6986: LD_INT 3
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7086
6994: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
6995: LD_ADDR_VAR 0 3
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_VAR 0 2
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 2
7014: PUSH
7015: LD_INT 21
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 33
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: PUSH
7035: LD_INT 33
7037: PUSH
7038: LD_INT 5
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: PPUSH
7060: CALL 12572 0 1
7064: IFFALSE 7083
7066: PUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: CALL 61450 0 1
7076: PUSH
7077: LD_EXP 35
7081: LESS
7082: AND
7083: ST_TO_ADDR
// end ; end ;
7084: GO 7087
7086: POP
// end ;
7087: LD_VAR 0 3
7091: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7092: LD_INT 100
7094: IFFALSE 7324
7096: GO 7098
7098: DISABLE
7099: LD_INT 0
7101: PPUSH
7102: PPUSH
// begin if Multiplayer then
7103: LD_OWVAR 4
7107: IFFALSE 7115
// SetPlayerSpectator ( ) else
7109: CALL_OW 572
7113: GO 7124
// FogOff ( your_side ) ;
7115: LD_OWVAR 2
7119: PPUSH
7120: CALL_OW 344
// repeat gameIsOn := false ;
7124: LD_ADDR_VAR 0 1
7128: PUSH
7129: LD_INT 0
7131: ST_TO_ADDR
// for i := 1 to 8 do
7132: LD_ADDR_VAR 0 2
7136: PUSH
7137: DOUBLE
7138: LD_INT 1
7140: DEC
7141: ST_TO_ADDR
7142: LD_INT 8
7144: PUSH
7145: FOR_TO
7146: IFFALSE 7276
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7148: LD_EXP 7
7152: PUSH
7153: LD_VAR 0 2
7157: ARRAY
7158: IFFALSE 7171
7160: PUSH
7161: LD_VAR 0 2
7165: PPUSH
7166: CALL_OW 108
7170: AND
7171: IFFALSE 7185
7173: PUSH
7174: LD_VAR 0 2
7178: PUSH
7179: LD_OWVAR 2
7183: NONEQUAL
7184: AND
7185: IFFALSE 7274
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7187: LD_EXP 8
7191: PUSH
7192: LD_VAR 0 2
7196: ARRAY
7197: NOT
7198: IFTRUE 7246
7200: PUSH
7201: LD_EXP 8
7205: PUSH
7206: LD_VAR 0 2
7210: ARRAY
7211: PUSH
7212: LD_EXP 8
7216: PUSH
7217: LD_OWVAR 2
7221: ARRAY
7222: NONEQUAL
7223: IFFALSE 7245
7225: PUSH
7226: LD_OWVAR 2
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: CALL_OW 81
7240: PUSH
7241: LD_INT 1
7243: NONEQUAL
7244: AND
7245: OR
7246: IFFALSE 7274
// if HasPowerByGameType ( mpGameType , i ) then
7248: LD_EXP 3
7252: PPUSH
7253: LD_VAR 0 2
7257: PPUSH
7258: CALL 6733 0 2
7262: IFFALSE 7274
// begin gameIsOn := true ;
7264: LD_ADDR_VAR 0 1
7268: PUSH
7269: LD_INT 1
7271: ST_TO_ADDR
// break ;
7272: GO 7276
// end ;
7274: GO 7145
7276: POP
7277: POP
// wait ( 100 ) ;
7278: LD_INT 100
7280: PPUSH
7281: CALL_OW 67
// until not gameIsOn ;
7285: LD_VAR 0 1
7289: NOT
7290: IFFALSE 7124
// if IAmServer then
7292: CALL_OW 518
7296: IFFALSE 7305
// wait ( 0 0$3 ) ;
7298: LD_INT 105
7300: PPUSH
7301: CALL_OW 67
// if Multiplayer then
7305: LD_OWVAR 4
7309: IFFALSE 7317
// YouLostInMultiplayer else
7311: CALL_OW 107
7315: GO 7324
// YouLost (  ) ;
7317: LD_STRING 
7319: PPUSH
7320: CALL_OW 104
// end ;
7324: PPOPN 2
7326: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7327: LD_EXP 33
7331: IFFALSE 7715
7333: GO 7335
7335: DISABLE
7336: LD_INT 0
7338: PPUSH
7339: PPUSH
7340: PPUSH
7341: PPUSH
7342: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7343: LD_ADDR_VAR 0 5
7347: PUSH
7348: LD_INT 1
7350: PUSH
7351: LD_INT 2
7353: PUSH
7354: LD_INT 3
7356: PUSH
7357: LD_INT 4
7359: PUSH
7360: LD_INT 5
7362: PUSH
7363: LD_INT 6
7365: PUSH
7366: LD_INT 7
7368: PUSH
7369: LD_INT 8
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7382: LD_INT 350
7384: PPUSH
7385: CALL_OW 67
// for i := 1 to 8 do
7389: LD_ADDR_VAR 0 1
7393: PUSH
7394: DOUBLE
7395: LD_INT 1
7397: DEC
7398: ST_TO_ADDR
7399: LD_INT 8
7401: PUSH
7402: FOR_TO
7403: IFFALSE 7685
// begin j := sides [ i ] ;
7405: LD_ADDR_VAR 0 2
7409: PUSH
7410: LD_VAR 0 5
7414: PUSH
7415: LD_VAR 0 1
7419: ARRAY
7420: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7421: LD_EXP 40
7425: PUSH
7426: LD_VAR 0 2
7430: ARRAY
7431: PPUSH
7432: CALL 12572 0 1
7436: IFFALSE 7449
7438: PUSH
7439: LD_VAR 0 2
7443: PPUSH
7444: CALL_OW 108
7448: AND
7449: IFFALSE 7467
7451: PUSH
7452: LD_EXP 3
7456: PPUSH
7457: LD_VAR 0 2
7461: PPUSH
7462: CALL 6733 0 2
7466: AND
7467: IFFALSE 7683
// begin wait ( mpRespawn div 2 ) ;
7469: LD_EXP 33
7473: PUSH
7474: LD_INT 2
7476: DIV
7477: PPUSH
7478: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_INT 22
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 50
7501: PUSH
7502: EMPTY
7503: LIST
7504: PUSH
7505: LD_INT 2
7507: PUSH
7508: LD_INT 30
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 30
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7543: LD_VAR 0 3
7547: NOT
7548: IFTRUE 7562
7550: PUSH
7551: LD_VAR 0 2
7555: PPUSH
7556: CALL_OW 108
7560: NOT
7561: OR
7562: IFTRUE 7581
7564: PUSH
7565: LD_EXP 3
7569: PPUSH
7570: LD_VAR 0 2
7574: PPUSH
7575: CALL 6733 0 2
7579: NOT
7580: OR
7581: IFFALSE 7585
// continue ;
7583: GO 7402
// spawn := tmp [ 1 ] ;
7585: LD_ADDR_VAR 0 4
7589: PUSH
7590: LD_VAR 0 3
7594: PUSH
7595: LD_INT 1
7597: ARRAY
7598: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7599: LD_EXP 40
7603: PUSH
7604: LD_VAR 0 2
7608: ARRAY
7609: PUSH
7610: LD_INT 1
7612: ARRAY
7613: PPUSH
7614: LD_VAR 0 4
7618: PPUSH
7619: CALL_OW 250
7623: PPUSH
7624: LD_VAR 0 4
7628: PPUSH
7629: CALL_OW 251
7633: PPUSH
7634: LD_INT 32
7636: PPUSH
7637: LD_INT 1
7639: PPUSH
7640: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7644: LD_ADDR_EXP 40
7648: PUSH
7649: LD_EXP 40
7653: PPUSH
7654: LD_VAR 0 2
7658: PPUSH
7659: LD_EXP 40
7663: PUSH
7664: LD_VAR 0 2
7668: ARRAY
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: CALL_OW 3
7677: PPUSH
7678: CALL_OW 1
7682: ST_TO_ADDR
// end ; end ;
7683: GO 7402
7685: POP
7686: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7687: LD_ADDR_VAR 0 5
7691: PUSH
7692: LD_VAR 0 5
7696: PPUSH
7697: LD_INT 1
7699: PPUSH
7700: LD_INT 8
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL 14898 0 4
7710: ST_TO_ADDR
// until false ;
7711: LD_INT 0
7713: IFFALSE 7382
// end ;
7715: PPOPN 5
7717: END
// every 0 0$1 marked mpActive do
7718: GO 7720
7720: DISABLE
// begin enable ;
7721: ENABLE
// if not mpDisplayStrings then
7722: LD_EXP 38
7726: NOT
7727: IFFALSE 7738
// begin display_strings := [ ] ;
7729: LD_ADDR_OWVAR 47
7733: PUSH
7734: EMPTY
7735: ST_TO_ADDR
// exit ;
7736: GO 7748
// end ; display_strings := mpDisplayStrings ;
7738: LD_ADDR_OWVAR 47
7742: PUSH
7743: LD_EXP 38
7747: ST_TO_ADDR
// end ; end_of_file
7748: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
7749: LD_INT 0
7751: PPUSH
7752: PPUSH
7753: PPUSH
7754: PPUSH
7755: PPUSH
7756: PPUSH
7757: PPUSH
7758: PPUSH
7759: PPUSH
// if GetType ( un ) = unit_vehicle then
7760: LD_VAR 0 1
7764: PPUSH
7765: CALL_OW 247
7769: PUSH
7770: LD_INT 2
7772: EQUAL
7773: IFFALSE 7777
// exit ;
7775: GO 8451
// side := GetSide ( un ) ;
7777: LD_ADDR_VAR 0 9
7781: PUSH
7782: LD_VAR 0 1
7786: PPUSH
7787: CALL_OW 255
7791: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
7792: LD_EXP 3
7796: PUSH
7797: LD_INT 2
7799: EQUAL
7800: IFFALSE 7894
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
7802: LD_VAR 0 1
7806: PPUSH
7807: CALL_OW 266
7811: PUSH
7812: LD_INT 0
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: IN
7822: IFFALSE 7894
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
7824: LD_ADDR_VAR 0 3
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 9
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: LD_INT 21
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 33
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 69
7877: PUSH
7878: FOR_IN
7879: IFFALSE 7892
// KillUnit ( i ) ;
7881: LD_VAR 0 3
7885: PPUSH
7886: CALL_OW 66
7890: GO 7878
7892: POP
7893: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 257
7903: PUSH
7904: LD_INT 12
7906: PUSH
7907: LD_INT 17
7909: PUSH
7910: LD_INT 15
7912: PUSH
7913: LD_INT 16
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: IN
7922: IFTRUE 7939
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: CALL_OW 263
7934: PUSH
7935: LD_INT 5
7937: EQUAL
7938: OR
7939: IFFALSE 8176
// begin tag := 0 ;
7941: LD_ADDR_VAR 0 5
7945: PUSH
7946: LD_INT 0
7948: ST_TO_ADDR
// for i := 1 to 8 do
7949: LD_ADDR_VAR 0 3
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_INT 8
7961: PUSH
7962: FOR_TO
7963: IFFALSE 7997
// if un in mpApePosIndex [ i ] then
7965: LD_VAR 0 1
7969: PUSH
7970: LD_EXP 32
7974: PUSH
7975: LD_VAR 0 3
7979: ARRAY
7980: IN
7981: IFFALSE 7995
// begin tag := i ;
7983: LD_ADDR_VAR 0 5
7987: PUSH
7988: LD_VAR 0 3
7992: ST_TO_ADDR
// break ;
7993: GO 7997
// end ;
7995: GO 7962
7997: POP
7998: POP
// if not tag then
7999: LD_VAR 0 5
8003: NOT
8004: IFFALSE 8008
// exit ;
8006: GO 8451
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8008: LD_ADDR_VAR 0 7
8012: PUSH
8013: LD_EXP 31
8017: PUSH
8018: LD_EXP 7
8022: PUSH
8023: LD_VAR 0 5
8027: ARRAY
8028: ARRAY
8029: ST_TO_ADDR
// if not area then
8030: LD_VAR 0 7
8034: NOT
8035: IFFALSE 8039
// exit ;
8037: GO 8451
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8039: LD_INT 14700
8041: PUSH
8042: LD_VAR 0 1
8046: PUSH
8047: LD_INT 5
8049: MOD
8050: PUSH
8051: LD_INT 1
8053: PLUS
8054: PUSH
8055: LD_INT 700
8057: MUL
8058: PLUS
8059: PPUSH
8060: CALL_OW 67
// repeat wait ( 10 ) ;
8064: LD_INT 10
8066: PPUSH
8067: CALL_OW 67
// until not mpBlockRespThread ;
8071: LD_EXP 46
8075: NOT
8076: IFFALSE 8064
// mpBlockRespThread := true ;
8078: LD_ADDR_EXP 46
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8086: LD_INT 0
8088: PPUSH
8089: CALL 44665 0 1
// ape := CreateHuman ;
8093: LD_ADDR_VAR 0 4
8097: PUSH
8098: CALL_OW 44
8102: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8103: LD_ADDR_EXP 32
8107: PUSH
8108: LD_EXP 32
8112: PPUSH
8113: LD_VAR 0 5
8117: PPUSH
8118: LD_EXP 32
8122: PUSH
8123: LD_VAR 0 5
8127: ARRAY
8128: PPUSH
8129: LD_VAR 0 4
8133: PPUSH
8134: CALL 48538 0 2
8138: PPUSH
8139: CALL_OW 1
8143: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8144: LD_VAR 0 4
8148: PPUSH
8149: LD_VAR 0 7
8153: PPUSH
8154: LD_INT 0
8156: PPUSH
8157: CALL_OW 49
// wait ( 10 ) ;
8161: LD_INT 10
8163: PPUSH
8164: CALL_OW 67
// mpBlockRespThread := false ;
8168: LD_ADDR_EXP 46
8172: PUSH
8173: LD_INT 0
8175: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8176: LD_VAR 0 1
8180: PPUSH
8181: CALL_OW 247
8185: PUSH
8186: LD_INT 1
8188: EQUAL
8189: IFFALSE 8206
8191: PUSH
8192: LD_VAR 0 1
8196: PPUSH
8197: CALL_OW 248
8201: PUSH
8202: LD_INT 0
8204: GREATER
8205: AND
8206: IFFALSE 8451
// begin if not mpRespawn then
8208: LD_EXP 33
8212: NOT
8213: IFFALSE 8217
// exit ;
8215: GO 8451
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8217: LD_VAR 0 9
8221: PPUSH
8222: CALL_OW 108
8226: NOT
8227: IFFALSE 8246
8229: PUSH
8230: LD_EXP 3
8234: PPUSH
8235: LD_VAR 0 9
8239: PPUSH
8240: CALL 6733 0 2
8244: NOT
8245: AND
8246: IFFALSE 8250
// exit ;
8248: GO 8451
// side := GetSide ( un ) ;
8250: LD_ADDR_VAR 0 9
8254: PUSH
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 255
8264: ST_TO_ADDR
// nation := GetNation ( un ) ;
8265: LD_ADDR_VAR 0 8
8269: PUSH
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 248
8279: ST_TO_ADDR
// class := GetClass ( un ) ;
8280: LD_ADDR_VAR 0 6
8284: PUSH
8285: LD_VAR 0 1
8289: PPUSH
8290: CALL_OW 257
8294: ST_TO_ADDR
// if class > 4 then
8295: LD_VAR 0 6
8299: PUSH
8300: LD_INT 4
8302: GREATER
8303: IFFALSE 8313
// class := 1 ;
8305: LD_ADDR_VAR 0 6
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// repeat wait ( 10 ) ;
8313: LD_INT 10
8315: PPUSH
8316: CALL_OW 67
// until not mpBlockRespThread ;
8320: LD_EXP 46
8324: NOT
8325: IFFALSE 8313
// mpBlockRespThread := true ;
8327: LD_ADDR_EXP 46
8331: PUSH
8332: LD_INT 1
8334: ST_TO_ADDR
// uc_side := side ;
8335: LD_ADDR_OWVAR 20
8339: PUSH
8340: LD_VAR 0 9
8344: ST_TO_ADDR
// uc_nation := nation ;
8345: LD_ADDR_OWVAR 21
8349: PUSH
8350: LD_VAR 0 8
8354: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8355: LD_INT 0
8357: PPUSH
8358: LD_VAR 0 6
8362: PPUSH
8363: LD_INT 2
8365: PPUSH
8366: CALL_OW 380
// un := CreateHuman ;
8370: LD_ADDR_VAR 0 1
8374: PUSH
8375: CALL_OW 44
8379: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8380: LD_ADDR_EXP 40
8384: PUSH
8385: LD_EXP 40
8389: PPUSH
8390: LD_VAR 0 9
8394: PPUSH
8395: LD_EXP 40
8399: PUSH
8400: LD_VAR 0 9
8404: ARRAY
8405: PPUSH
8406: LD_EXP 40
8410: PUSH
8411: LD_VAR 0 9
8415: ARRAY
8416: PUSH
8417: LD_INT 1
8419: PLUS
8420: PPUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: CALL_OW 1
8430: PPUSH
8431: CALL_OW 1
8435: ST_TO_ADDR
// wait ( 10 ) ;
8436: LD_INT 10
8438: PPUSH
8439: CALL_OW 67
// mpBlockRespThread := false ;
8443: LD_ADDR_EXP 46
8447: PUSH
8448: LD_INT 0
8450: ST_TO_ADDR
// end ; end ;
8451: LD_VAR 0 2
8455: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
8456: LD_INT 0
8458: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 266
8468: PUSH
8469: LD_INT 0
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: IN
8479: IFFALSE 8504
// SetBName ( building , @ & GetSide ( building ) ) ;
8481: LD_VAR 0 1
8485: PPUSH
8486: LD_STRING @
8488: PUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 255
8498: STR
8499: PPUSH
8500: CALL_OW 500
// end ;
8504: LD_VAR 0 2
8508: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
8509: LD_INT 0
8511: PPUSH
8512: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
8513: LD_EXP 3
8517: PUSH
8518: LD_INT 2
8520: EQUAL
8521: IFFALSE 8545
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: CALL_OW 266
8533: PUSH
8534: LD_INT 0
8536: PUSH
8537: LD_INT 1
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: IN
8544: AND
8545: IFFALSE 8624
// begin SetSide ( building , oldSide ) ;
8547: LD_VAR 0 1
8551: PPUSH
8552: LD_VAR 0 2
8556: PPUSH
8557: CALL_OW 235
// KillUnit ( building ) ;
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
8570: LD_ADDR_VAR 0 5
8574: PUSH
8575: LD_INT 22
8577: PUSH
8578: LD_VAR 0 2
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 21
8589: PUSH
8590: LD_INT 1
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 69
8605: PUSH
8606: FOR_IN
8607: IFFALSE 8620
// KillUnit ( i ) ;
8609: LD_VAR 0 5
8613: PPUSH
8614: CALL_OW 66
8618: GO 8606
8620: POP
8621: POP
// exit ;
8622: GO 8669
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
8624: LD_VAR 0 1
8628: PPUSH
8629: CALL_OW 266
8633: PUSH
8634: LD_INT 0
8636: PUSH
8637: LD_INT 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: IN
8644: IFFALSE 8669
// SetBName ( building , @ & GetSide ( building ) ) ;
8646: LD_VAR 0 1
8650: PPUSH
8651: LD_STRING @
8653: PUSH
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 255
8663: STR
8664: PPUSH
8665: CALL_OW 500
// end ;
8669: LD_VAR 0 4
8673: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
8674: LD_INT 0
8676: PPUSH
8677: PPUSH
8678: PPUSH
// if mpGameType <> GameTypeFamine then
8679: LD_EXP 3
8683: PUSH
8684: LD_INT 5
8686: NONEQUAL
8687: IFFALSE 8691
// exit ;
8689: GO 8906
// for i := 1 to mpGlobalOilDeposits do
8691: LD_ADDR_VAR 0 6
8695: PUSH
8696: DOUBLE
8697: LD_INT 1
8699: DEC
8700: ST_TO_ADDR
8701: LD_EXP 41
8705: PUSH
8706: FOR_TO
8707: IFFALSE 8904
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
8709: LD_EXP 41
8713: PUSH
8714: LD_VAR 0 6
8718: ARRAY
8719: PUSH
8720: LD_INT 1
8722: ARRAY
8723: PPUSH
8724: LD_EXP 41
8728: PUSH
8729: LD_VAR 0 6
8733: ARRAY
8734: PUSH
8735: LD_INT 2
8737: ARRAY
8738: PPUSH
8739: CALL_OW 428
8743: PUSH
8744: LD_VAR 0 1
8748: EQUAL
8749: IFFALSE 8902
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
8751: LD_ADDR_VAR 0 7
8755: PUSH
8756: LD_EXP 41
8760: PUSH
8761: LD_VAR 0 6
8765: ARRAY
8766: PUSH
8767: LD_INT 3
8769: ARRAY
8770: ST_TO_ADDR
// value := value - amount ;
8771: LD_ADDR_VAR 0 7
8775: PUSH
8776: LD_VAR 0 7
8780: PUSH
8781: LD_VAR 0 4
8785: MINUS
8786: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
8787: LD_ADDR_EXP 41
8791: PUSH
8792: LD_EXP 41
8796: PPUSH
8797: LD_VAR 0 6
8801: PPUSH
8802: LD_EXP 41
8806: PUSH
8807: LD_VAR 0 6
8811: ARRAY
8812: PPUSH
8813: LD_INT 3
8815: PPUSH
8816: LD_VAR 0 7
8820: PPUSH
8821: CALL_OW 1
8825: PPUSH
8826: CALL_OW 1
8830: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
8831: LD_VAR 0 1
8835: PPUSH
8836: LD_VAR 0 7
8840: PPUSH
8841: CALL_OW 505
// if value <= 0 then
8845: LD_VAR 0 7
8849: PUSH
8850: LD_INT 0
8852: LESSEQUAL
8853: IFFALSE 8902
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
8855: LD_EXP 41
8859: PUSH
8860: LD_VAR 0 6
8864: ARRAY
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PPUSH
8870: LD_EXP 41
8874: PUSH
8875: LD_VAR 0 6
8879: ARRAY
8880: PUSH
8881: LD_INT 2
8883: ARRAY
8884: PPUSH
8885: CALL_OW 63
// KillUnit ( building ) ;
8889: LD_VAR 0 1
8893: PPUSH
8894: CALL_OW 66
// exit ;
8898: POP
8899: POP
8900: GO 8906
// end ; end ; end ;
8902: GO 8706
8904: POP
8905: POP
// end ;
8906: LD_VAR 0 5
8910: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
8911: LD_INT 0
8913: PPUSH
8914: PPUSH
8915: PPUSH
// if mpGameType <> GameTypeFamine then
8916: LD_EXP 3
8920: PUSH
8921: LD_INT 5
8923: NONEQUAL
8924: IFFALSE 8928
// exit ;
8926: GO 9143
// for i := 1 to mpGlobalSibDeposits do
8928: LD_ADDR_VAR 0 6
8932: PUSH
8933: DOUBLE
8934: LD_INT 1
8936: DEC
8937: ST_TO_ADDR
8938: LD_EXP 42
8942: PUSH
8943: FOR_TO
8944: IFFALSE 9141
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
8946: LD_EXP 42
8950: PUSH
8951: LD_VAR 0 6
8955: ARRAY
8956: PUSH
8957: LD_INT 1
8959: ARRAY
8960: PPUSH
8961: LD_EXP 42
8965: PUSH
8966: LD_VAR 0 6
8970: ARRAY
8971: PUSH
8972: LD_INT 2
8974: ARRAY
8975: PPUSH
8976: CALL_OW 428
8980: PUSH
8981: LD_VAR 0 1
8985: EQUAL
8986: IFFALSE 9139
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
8988: LD_ADDR_VAR 0 7
8992: PUSH
8993: LD_EXP 42
8997: PUSH
8998: LD_VAR 0 6
9002: ARRAY
9003: PUSH
9004: LD_INT 3
9006: ARRAY
9007: ST_TO_ADDR
// value := value - amount ;
9008: LD_ADDR_VAR 0 7
9012: PUSH
9013: LD_VAR 0 7
9017: PUSH
9018: LD_VAR 0 4
9022: MINUS
9023: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9024: LD_ADDR_EXP 42
9028: PUSH
9029: LD_EXP 42
9033: PPUSH
9034: LD_VAR 0 6
9038: PPUSH
9039: LD_EXP 42
9043: PUSH
9044: LD_VAR 0 6
9048: ARRAY
9049: PPUSH
9050: LD_INT 3
9052: PPUSH
9053: LD_VAR 0 7
9057: PPUSH
9058: CALL_OW 1
9062: PPUSH
9063: CALL_OW 1
9067: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
9068: LD_VAR 0 1
9072: PPUSH
9073: LD_VAR 0 7
9077: PPUSH
9078: CALL_OW 505
// if value <= 0 then
9082: LD_VAR 0 7
9086: PUSH
9087: LD_INT 0
9089: LESSEQUAL
9090: IFFALSE 9139
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9092: LD_EXP 42
9096: PUSH
9097: LD_VAR 0 6
9101: ARRAY
9102: PUSH
9103: LD_INT 1
9105: ARRAY
9106: PPUSH
9107: LD_EXP 42
9111: PUSH
9112: LD_VAR 0 6
9116: ARRAY
9117: PUSH
9118: LD_INT 2
9120: ARRAY
9121: PPUSH
9122: CALL_OW 63
// KillUnit ( building ) ;
9126: LD_VAR 0 1
9130: PPUSH
9131: CALL_OW 66
// exit ;
9135: POP
9136: POP
9137: GO 9143
// end ; end ; end ;
9139: GO 8943
9141: POP
9142: POP
// end ;
9143: LD_VAR 0 5
9147: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9148: LD_INT 0
9150: PPUSH
9151: PPUSH
// side := GetSide ( factory ) ;
9152: LD_ADDR_VAR 0 7
9156: PUSH
9157: LD_VAR 0 1
9161: PPUSH
9162: CALL_OW 255
9166: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9167: LD_VAR 0 5
9171: PUSH
9172: LD_INT 81
9174: EQUAL
9175: IFFALSE 9213
9177: PUSH
9178: LD_INT 22
9180: PUSH
9181: LD_VAR 0 7
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 34
9192: PUSH
9193: LD_INT 81
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PPUSH
9204: CALL_OW 69
9208: PUSH
9209: LD_INT 0
9211: GREATER
9212: AND
9213: IFFALSE 9246
// begin ComCancel ( factory ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: CALL_OW 127
// if side = your_side then
9224: LD_VAR 0 7
9228: PUSH
9229: LD_OWVAR 2
9233: EQUAL
9234: IFFALSE 9246
// HintSpec ( VehLimit , 2 ) ;
9236: LD_STRING VehLimit
9238: PPUSH
9239: LD_INT 2
9241: PPUSH
9242: CALL_OW 338
// end ; end ;
9246: LD_VAR 0 6
9250: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9251: LD_INT 0
9253: PPUSH
9254: PPUSH
9255: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9256: LD_VAR 0 1
9260: PPUSH
9261: CALL_OW 264
9265: PUSH
9266: LD_INT 81
9268: EQUAL
9269: IFFALSE 9286
9271: PUSH
9272: LD_VAR 0 1
9276: PPUSH
9277: CALL_OW 263
9281: PUSH
9282: LD_INT 1
9284: EQUAL
9285: AND
9286: IFFALSE 9566
// begin for i := 1 to Count ( minersList ) do
9288: LD_ADDR_VAR 0 6
9292: PUSH
9293: DOUBLE
9294: LD_INT 1
9296: DEC
9297: ST_TO_ADDR
9298: LD_EXP 56
9302: PPUSH
9303: CALL 12572 0 1
9307: PUSH
9308: FOR_TO
9309: IFFALSE 9427
// begin if minersList [ i ] = oldId then
9311: LD_EXP 56
9315: PUSH
9316: LD_VAR 0 6
9320: ARRAY
9321: PUSH
9322: LD_VAR 0 2
9326: EQUAL
9327: IFFALSE 9425
// begin for j := 1 to minerMinesList [ i ] do
9329: LD_ADDR_VAR 0 7
9333: PUSH
9334: DOUBLE
9335: LD_INT 1
9337: DEC
9338: ST_TO_ADDR
9339: LD_EXP 57
9343: PUSH
9344: LD_VAR 0 6
9348: ARRAY
9349: PUSH
9350: FOR_TO
9351: IFFALSE 9401
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
9353: LD_EXP 57
9357: PUSH
9358: LD_VAR 0 6
9362: ARRAY
9363: PUSH
9364: LD_VAR 0 7
9368: ARRAY
9369: PUSH
9370: LD_INT 1
9372: ARRAY
9373: PPUSH
9374: LD_EXP 57
9378: PUSH
9379: LD_VAR 0 6
9383: ARRAY
9384: PUSH
9385: LD_VAR 0 7
9389: ARRAY
9390: PUSH
9391: LD_INT 2
9393: ARRAY
9394: PPUSH
9395: CALL_OW 612
9399: GO 9350
9401: POP
9402: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
9403: LD_ADDR_EXP 57
9407: PUSH
9408: LD_EXP 57
9412: PPUSH
9413: LD_VAR 0 6
9417: PPUSH
9418: CALL_OW 3
9422: ST_TO_ADDR
// break ;
9423: GO 9427
// end ; end ;
9425: GO 9308
9427: POP
9428: POP
// minersList := minersList diff oldId ;
9429: LD_ADDR_EXP 56
9433: PUSH
9434: LD_EXP 56
9438: PUSH
9439: LD_VAR 0 2
9443: DIFF
9444: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
9445: LD_INT 22
9447: PUSH
9448: LD_VAR 0 4
9452: PPUSH
9453: CALL_OW 255
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 34
9464: PUSH
9465: LD_INT 81
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PPUSH
9476: CALL_OW 69
9480: PUSH
9481: LD_INT 1
9483: GREATER
9484: IFFALSE 9511
// begin ComExit ( unit ) ;
9486: LD_VAR 0 4
9490: PPUSH
9491: CALL 48936 0 1
// SetSide ( newId , oldSide ) ;
9495: LD_VAR 0 1
9499: PPUSH
9500: LD_VAR 0 3
9504: PPUSH
9505: CALL_OW 235
// exit ;
9509: GO 9566
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
9511: LD_ADDR_EXP 56
9515: PUSH
9516: LD_EXP 56
9520: PPUSH
9521: LD_EXP 56
9525: PUSH
9526: LD_INT 1
9528: PLUS
9529: PPUSH
9530: LD_VAR 0 1
9534: PPUSH
9535: CALL_OW 1
9539: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
9540: LD_ADDR_EXP 57
9544: PUSH
9545: LD_EXP 57
9549: PPUSH
9550: LD_EXP 57
9554: PUSH
9555: LD_INT 1
9557: PLUS
9558: PPUSH
9559: EMPTY
9560: PPUSH
9561: CALL_OW 1
9565: ST_TO_ADDR
// end ; end ; end_of_file
9566: LD_VAR 0 5
9570: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
9571: LD_EXP 39
9575: IFFALSE 9583
9577: PUSH
9578: CALL 9793 0 0
9582: AND
9583: IFFALSE 9591
9585: PUSH
9586: LD_OWVAR 4
9590: AND
9591: IFFALSE 9790
9593: GO 9595
9595: DISABLE
9596: LD_INT 0
9598: PPUSH
9599: PPUSH
// begin canWin := false ;
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// if not HasPower ( your_side ) then
9608: LD_OWVAR 2
9612: PPUSH
9613: CALL 9835 0 1
9617: NOT
9618: IFFALSE 9629
// begin Multiplayer_Loose_Message ;
9620: CALL_OW 521
// enable ( mpLose ) ;
9624: LD_INT 102
9626: ENABLE_MARKED
// end else
9627: GO 9790
// begin canWin := true ;
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: LD_INT 1
9636: ST_TO_ADDR
// for i := 1 to 8 do
9637: LD_ADDR_VAR 0 1
9641: PUSH
9642: DOUBLE
9643: LD_INT 1
9645: DEC
9646: ST_TO_ADDR
9647: LD_INT 8
9649: PUSH
9650: FOR_TO
9651: IFFALSE 9776
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
9653: LD_EXP 7
9657: PUSH
9658: LD_VAR 0 1
9662: ARRAY
9663: IFFALSE 9676
9665: PUSH
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL_OW 108
9675: AND
9676: IFFALSE 9690
9678: PUSH
9679: LD_VAR 0 1
9683: PUSH
9684: LD_OWVAR 2
9688: NONEQUAL
9689: AND
9690: IFFALSE 9774
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
9692: LD_EXP 8
9696: PUSH
9697: LD_VAR 0 1
9701: ARRAY
9702: NOT
9703: IFTRUE 9751
9705: PUSH
9706: LD_EXP 8
9710: PUSH
9711: LD_VAR 0 1
9715: ARRAY
9716: PUSH
9717: LD_EXP 8
9721: PUSH
9722: LD_OWVAR 2
9726: ARRAY
9727: NONEQUAL
9728: IFFALSE 9750
9730: PUSH
9731: LD_OWVAR 2
9735: PPUSH
9736: LD_VAR 0 1
9740: PPUSH
9741: CALL_OW 81
9745: PUSH
9746: LD_INT 1
9748: NONEQUAL
9749: AND
9750: OR
9751: IFFALSE 9774
// if HasPower ( i ) then
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL 9835 0 1
9762: IFFALSE 9774
// begin canWin := false ;
9764: LD_ADDR_VAR 0 2
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// break ;
9772: GO 9776
// end ;
9774: GO 9650
9776: POP
9777: POP
// if canWin then
9778: LD_VAR 0 2
9782: IFFALSE 9789
// enable ( mpWin ) else
9784: LD_INT 101
9786: ENABLE_MARKED
9787: GO 9790
// enable ;
9789: ENABLE
// end ; end ;
9790: PPOPN 2
9792: END
// function CanWinLoose ; begin
9793: LD_INT 0
9795: PPUSH
// result := true ;
9796: LD_ADDR_VAR 0 1
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9804: CALL_OW 531
9808: IFFALSE 9820
9810: PUSH
9811: CALL_OW 519
9815: PUSH
9816: LD_INT 1
9818: GREATER
9819: AND
9820: IFFALSE 9830
// result := false ;
9822: LD_ADDR_VAR 0 1
9826: PUSH
9827: LD_INT 0
9829: ST_TO_ADDR
// end ;
9830: LD_VAR 0 1
9834: RET
// function HasPower ( i ) ; begin
9835: LD_INT 0
9837: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
9838: LD_ADDR_VAR 0 2
9842: PUSH
9843: LD_INT 22
9845: PUSH
9846: LD_VAR 0 1
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: LD_INT 21
9860: PUSH
9861: LD_INT 1
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 33
9870: PUSH
9871: LD_INT 3
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 33
9880: PUSH
9881: LD_INT 5
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 69
9902: ST_TO_ADDR
// end ; end_of_file
9903: LD_VAR 0 2
9907: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
9908: LD_EXP 39
9912: IFFALSE 9955
9914: GO 9916
9916: DISABLE
9917: LD_INT 0
9919: PPUSH
// begin for i := 1 to 8 do
9920: LD_ADDR_VAR 0 1
9924: PUSH
9925: DOUBLE
9926: LD_INT 1
9928: DEC
9929: ST_TO_ADDR
9930: LD_INT 8
9932: PUSH
9933: FOR_TO
9934: IFFALSE 9953
// SetRestrict ( b_depot , i , state_disabled ) ;
9936: LD_INT 0
9938: PPUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: LD_INT 0
9946: PPUSH
9947: CALL_OW 324
9951: GO 9933
9953: POP
9954: POP
// end ;
9955: PPOPN 1
9957: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
9958: LD_EXP 39
9962: IFFALSE 9970
9964: PUSH
9965: CALL 10180 0 0
9969: AND
9970: IFFALSE 9978
9972: PUSH
9973: LD_OWVAR 4
9977: AND
9978: IFFALSE 10177
9980: GO 9982
9982: DISABLE
9983: LD_INT 0
9985: PPUSH
9986: PPUSH
// begin canWin := false ;
9987: LD_ADDR_VAR 0 2
9991: PUSH
9992: LD_INT 0
9994: ST_TO_ADDR
// if not HasPower ( your_side ) then
9995: LD_OWVAR 2
9999: PPUSH
10000: CALL 10222 0 1
10004: NOT
10005: IFFALSE 10016
// begin Multiplayer_Loose_Message ;
10007: CALL_OW 521
// enable ( mpLose ) ;
10011: LD_INT 102
10013: ENABLE_MARKED
// end else
10014: GO 10177
// begin canWin := true ;
10016: LD_ADDR_VAR 0 2
10020: PUSH
10021: LD_INT 1
10023: ST_TO_ADDR
// for i := 1 to 8 do
10024: LD_ADDR_VAR 0 1
10028: PUSH
10029: DOUBLE
10030: LD_INT 1
10032: DEC
10033: ST_TO_ADDR
10034: LD_INT 8
10036: PUSH
10037: FOR_TO
10038: IFFALSE 10163
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10040: LD_EXP 7
10044: PUSH
10045: LD_VAR 0 1
10049: ARRAY
10050: IFFALSE 10063
10052: PUSH
10053: LD_VAR 0 1
10057: PPUSH
10058: CALL_OW 108
10062: AND
10063: IFFALSE 10077
10065: PUSH
10066: LD_VAR 0 1
10070: PUSH
10071: LD_OWVAR 2
10075: NONEQUAL
10076: AND
10077: IFFALSE 10161
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10079: LD_EXP 8
10083: PUSH
10084: LD_VAR 0 1
10088: ARRAY
10089: NOT
10090: IFTRUE 10138
10092: PUSH
10093: LD_EXP 8
10097: PUSH
10098: LD_VAR 0 1
10102: ARRAY
10103: PUSH
10104: LD_EXP 8
10108: PUSH
10109: LD_OWVAR 2
10113: ARRAY
10114: NONEQUAL
10115: IFFALSE 10137
10117: PUSH
10118: LD_OWVAR 2
10122: PPUSH
10123: LD_VAR 0 1
10127: PPUSH
10128: CALL_OW 81
10132: PUSH
10133: LD_INT 1
10135: NONEQUAL
10136: AND
10137: OR
10138: IFFALSE 10161
// if HasPower ( i ) then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL 10222 0 1
10149: IFFALSE 10161
// begin canWin := false ;
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_INT 0
10158: ST_TO_ADDR
// break ;
10159: GO 10163
// end ;
10161: GO 10037
10163: POP
10164: POP
// if canWin then
10165: LD_VAR 0 2
10169: IFFALSE 10176
// enable ( mpWin ) else
10171: LD_INT 101
10173: ENABLE_MARKED
10174: GO 10177
// enable ;
10176: ENABLE
// end ; end ;
10177: PPOPN 2
10179: END
// function CanWinLoose ; begin
10180: LD_INT 0
10182: PPUSH
// result := true ;
10183: LD_ADDR_VAR 0 1
10187: PUSH
10188: LD_INT 1
10190: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10191: CALL_OW 531
10195: IFFALSE 10207
10197: PUSH
10198: CALL_OW 519
10202: PUSH
10203: LD_INT 1
10205: GREATER
10206: AND
10207: IFFALSE 10217
// result := false ;
10209: LD_ADDR_VAR 0 1
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// end ;
10217: LD_VAR 0 1
10221: RET
// function HasPower ( i ) ; begin
10222: LD_INT 0
10224: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10225: LD_INT 22
10227: PUSH
10228: LD_VAR 0 1
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: LD_INT 30
10242: PUSH
10243: LD_INT 0
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 30
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PPUSH
10269: CALL_OW 69
10273: NOT
10274: IFFALSE 10278
// exit ;
10276: GO 10343
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10278: LD_ADDR_VAR 0 2
10282: PUSH
10283: LD_INT 22
10285: PUSH
10286: LD_VAR 0 1
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 33
10310: PUSH
10311: LD_INT 3
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 33
10320: PUSH
10321: LD_INT 5
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PPUSH
10338: CALL_OW 69
10342: ST_TO_ADDR
// end ; end_of_file
10343: LD_VAR 0 2
10347: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10348: LD_INT 0
10350: PPUSH
10351: PPUSH
// if exist_mode then
10352: LD_VAR 0 2
10356: IFFALSE 10402
// begin unit := CreateCharacter ( prefix & ident ) ;
10358: LD_ADDR_VAR 0 5
10362: PUSH
10363: LD_VAR 0 3
10367: PUSH
10368: LD_VAR 0 1
10372: STR
10373: PPUSH
10374: CALL_OW 34
10378: ST_TO_ADDR
// if unit then
10379: LD_VAR 0 5
10383: IFFALSE 10400
// DeleteCharacters ( prefix & ident ) ;
10385: LD_VAR 0 3
10389: PUSH
10390: LD_VAR 0 1
10394: STR
10395: PPUSH
10396: CALL_OW 40
// end else
10400: GO 10417
// unit := NewCharacter ( ident ) ;
10402: LD_ADDR_VAR 0 5
10406: PUSH
10407: LD_VAR 0 1
10411: PPUSH
10412: CALL_OW 25
10416: ST_TO_ADDR
// result := unit ;
10417: LD_ADDR_VAR 0 4
10421: PUSH
10422: LD_VAR 0 5
10426: ST_TO_ADDR
// end ;
10427: LD_VAR 0 4
10431: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10432: LD_INT 0
10434: PPUSH
10435: PPUSH
// if exist_mode then
10436: LD_VAR 0 2
10440: IFFALSE 10465
// unit := CreateCharacter ( prefix & ident ) else
10442: LD_ADDR_VAR 0 5
10446: PUSH
10447: LD_VAR 0 3
10451: PUSH
10452: LD_VAR 0 1
10456: STR
10457: PPUSH
10458: CALL_OW 34
10462: ST_TO_ADDR
10463: GO 10480
// unit := NewCharacter ( ident ) ;
10465: LD_ADDR_VAR 0 5
10469: PUSH
10470: LD_VAR 0 1
10474: PPUSH
10475: CALL_OW 25
10479: ST_TO_ADDR
// result := unit ;
10480: LD_ADDR_VAR 0 4
10484: PUSH
10485: LD_VAR 0 5
10489: ST_TO_ADDR
// end ;
10490: LD_VAR 0 4
10494: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10495: LD_INT 0
10497: PPUSH
10498: PPUSH
// if not side or not nation then
10499: LD_VAR 0 1
10503: NOT
10504: IFTRUE 10513
10506: PUSH
10507: LD_VAR 0 2
10511: NOT
10512: OR
10513: IFFALSE 10517
// exit ;
10515: GO 11311
// case nation of nation_american :
10517: LD_VAR 0 2
10521: PUSH
10522: LD_INT 1
10524: DOUBLE
10525: EQUAL
10526: IFTRUE 10530
10528: GO 10752
10530: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10531: LD_ADDR_VAR 0 4
10535: PUSH
10536: LD_INT 35
10538: PUSH
10539: LD_INT 45
10541: PUSH
10542: LD_INT 46
10544: PUSH
10545: LD_INT 47
10547: PUSH
10548: LD_INT 82
10550: PUSH
10551: LD_INT 83
10553: PUSH
10554: LD_INT 84
10556: PUSH
10557: LD_INT 85
10559: PUSH
10560: LD_INT 86
10562: PUSH
10563: LD_INT 1
10565: PUSH
10566: LD_INT 2
10568: PUSH
10569: LD_INT 6
10571: PUSH
10572: LD_INT 15
10574: PUSH
10575: LD_INT 16
10577: PUSH
10578: LD_INT 7
10580: PUSH
10581: LD_INT 12
10583: PUSH
10584: LD_INT 13
10586: PUSH
10587: LD_INT 10
10589: PUSH
10590: LD_INT 14
10592: PUSH
10593: LD_INT 20
10595: PUSH
10596: LD_INT 21
10598: PUSH
10599: LD_INT 22
10601: PUSH
10602: LD_INT 25
10604: PUSH
10605: LD_INT 32
10607: PUSH
10608: LD_INT 27
10610: PUSH
10611: LD_INT 36
10613: PUSH
10614: LD_INT 69
10616: PUSH
10617: LD_INT 39
10619: PUSH
10620: LD_INT 34
10622: PUSH
10623: LD_INT 40
10625: PUSH
10626: LD_INT 48
10628: PUSH
10629: LD_INT 49
10631: PUSH
10632: LD_INT 50
10634: PUSH
10635: LD_INT 51
10637: PUSH
10638: LD_INT 52
10640: PUSH
10641: LD_INT 53
10643: PUSH
10644: LD_INT 54
10646: PUSH
10647: LD_INT 55
10649: PUSH
10650: LD_INT 56
10652: PUSH
10653: LD_INT 57
10655: PUSH
10656: LD_INT 58
10658: PUSH
10659: LD_INT 59
10661: PUSH
10662: LD_INT 60
10664: PUSH
10665: LD_INT 61
10667: PUSH
10668: LD_INT 62
10670: PUSH
10671: LD_INT 80
10673: PUSH
10674: LD_INT 82
10676: PUSH
10677: LD_INT 83
10679: PUSH
10680: LD_INT 84
10682: PUSH
10683: LD_INT 85
10685: PUSH
10686: LD_INT 86
10688: PUSH
10689: LD_INT 90
10691: PUSH
10692: LD_INT 93
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: ST_TO_ADDR
10750: GO 11233
10752: LD_INT 2
10754: DOUBLE
10755: EQUAL
10756: IFTRUE 10760
10758: GO 10994
10760: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
10761: LD_ADDR_VAR 0 4
10765: PUSH
10766: LD_INT 35
10768: PUSH
10769: LD_INT 45
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: LD_INT 47
10777: PUSH
10778: LD_INT 82
10780: PUSH
10781: LD_INT 83
10783: PUSH
10784: LD_INT 84
10786: PUSH
10787: LD_INT 85
10789: PUSH
10790: LD_INT 87
10792: PUSH
10793: LD_INT 70
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: LD_INT 11
10801: PUSH
10802: LD_INT 3
10804: PUSH
10805: LD_INT 4
10807: PUSH
10808: LD_INT 5
10810: PUSH
10811: LD_INT 6
10813: PUSH
10814: LD_INT 15
10816: PUSH
10817: LD_INT 18
10819: PUSH
10820: LD_INT 7
10822: PUSH
10823: LD_INT 17
10825: PUSH
10826: LD_INT 8
10828: PUSH
10829: LD_INT 20
10831: PUSH
10832: LD_INT 21
10834: PUSH
10835: LD_INT 22
10837: PUSH
10838: LD_INT 72
10840: PUSH
10841: LD_INT 26
10843: PUSH
10844: LD_INT 69
10846: PUSH
10847: LD_INT 39
10849: PUSH
10850: LD_INT 40
10852: PUSH
10853: LD_INT 41
10855: PUSH
10856: LD_INT 42
10858: PUSH
10859: LD_INT 43
10861: PUSH
10862: LD_INT 48
10864: PUSH
10865: LD_INT 49
10867: PUSH
10868: LD_INT 50
10870: PUSH
10871: LD_INT 51
10873: PUSH
10874: LD_INT 52
10876: PUSH
10877: LD_INT 53
10879: PUSH
10880: LD_INT 54
10882: PUSH
10883: LD_INT 55
10885: PUSH
10886: LD_INT 56
10888: PUSH
10889: LD_INT 60
10891: PUSH
10892: LD_INT 61
10894: PUSH
10895: LD_INT 62
10897: PUSH
10898: LD_INT 66
10900: PUSH
10901: LD_INT 67
10903: PUSH
10904: LD_INT 68
10906: PUSH
10907: LD_INT 81
10909: PUSH
10910: LD_INT 82
10912: PUSH
10913: LD_INT 83
10915: PUSH
10916: LD_INT 84
10918: PUSH
10919: LD_INT 85
10921: PUSH
10922: LD_INT 87
10924: PUSH
10925: LD_INT 88
10927: PUSH
10928: LD_INT 92
10930: PUSH
10931: LD_INT 94
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: ST_TO_ADDR
10992: GO 11233
10994: LD_INT 3
10996: DOUBLE
10997: EQUAL
10998: IFTRUE 11002
11000: GO 11232
11002: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11003: LD_ADDR_VAR 0 4
11007: PUSH
11008: LD_INT 46
11010: PUSH
11011: LD_INT 47
11013: PUSH
11014: LD_INT 1
11016: PUSH
11017: LD_INT 2
11019: PUSH
11020: LD_INT 82
11022: PUSH
11023: LD_INT 83
11025: PUSH
11026: LD_INT 84
11028: PUSH
11029: LD_INT 85
11031: PUSH
11032: LD_INT 86
11034: PUSH
11035: LD_INT 11
11037: PUSH
11038: LD_INT 9
11040: PUSH
11041: LD_INT 20
11043: PUSH
11044: LD_INT 19
11046: PUSH
11047: LD_INT 21
11049: PUSH
11050: LD_INT 24
11052: PUSH
11053: LD_INT 22
11055: PUSH
11056: LD_INT 25
11058: PUSH
11059: LD_INT 28
11061: PUSH
11062: LD_INT 29
11064: PUSH
11065: LD_INT 30
11067: PUSH
11068: LD_INT 31
11070: PUSH
11071: LD_INT 37
11073: PUSH
11074: LD_INT 38
11076: PUSH
11077: LD_INT 32
11079: PUSH
11080: LD_INT 27
11082: PUSH
11083: LD_INT 33
11085: PUSH
11086: LD_INT 69
11088: PUSH
11089: LD_INT 39
11091: PUSH
11092: LD_INT 34
11094: PUSH
11095: LD_INT 40
11097: PUSH
11098: LD_INT 71
11100: PUSH
11101: LD_INT 23
11103: PUSH
11104: LD_INT 44
11106: PUSH
11107: LD_INT 48
11109: PUSH
11110: LD_INT 49
11112: PUSH
11113: LD_INT 50
11115: PUSH
11116: LD_INT 51
11118: PUSH
11119: LD_INT 52
11121: PUSH
11122: LD_INT 53
11124: PUSH
11125: LD_INT 54
11127: PUSH
11128: LD_INT 55
11130: PUSH
11131: LD_INT 56
11133: PUSH
11134: LD_INT 57
11136: PUSH
11137: LD_INT 58
11139: PUSH
11140: LD_INT 59
11142: PUSH
11143: LD_INT 63
11145: PUSH
11146: LD_INT 64
11148: PUSH
11149: LD_INT 65
11151: PUSH
11152: LD_INT 82
11154: PUSH
11155: LD_INT 83
11157: PUSH
11158: LD_INT 84
11160: PUSH
11161: LD_INT 85
11163: PUSH
11164: LD_INT 86
11166: PUSH
11167: LD_INT 89
11169: PUSH
11170: LD_INT 91
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: ST_TO_ADDR
11230: GO 11233
11232: POP
// if state > - 1 and state < 3 then
11233: LD_VAR 0 3
11237: PUSH
11238: LD_INT 1
11240: NEG
11241: GREATER
11242: IFFALSE 11254
11244: PUSH
11245: LD_VAR 0 3
11249: PUSH
11250: LD_INT 3
11252: LESS
11253: AND
11254: IFFALSE 11311
// for i in result do
11256: LD_ADDR_VAR 0 5
11260: PUSH
11261: LD_VAR 0 4
11265: PUSH
11266: FOR_IN
11267: IFFALSE 11309
// if GetTech ( i , side ) <> state then
11269: LD_VAR 0 5
11273: PPUSH
11274: LD_VAR 0 1
11278: PPUSH
11279: CALL_OW 321
11283: PUSH
11284: LD_VAR 0 3
11288: NONEQUAL
11289: IFFALSE 11307
// result := result diff i ;
11291: LD_ADDR_VAR 0 4
11295: PUSH
11296: LD_VAR 0 4
11300: PUSH
11301: LD_VAR 0 5
11305: DIFF
11306: ST_TO_ADDR
11307: GO 11266
11309: POP
11310: POP
// end ;
11311: LD_VAR 0 4
11315: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11316: LD_INT 0
11318: PPUSH
11319: PPUSH
11320: PPUSH
// result := true ;
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11329: LD_ADDR_VAR 0 5
11333: PUSH
11334: LD_VAR 0 2
11338: PPUSH
11339: CALL_OW 480
11343: ST_TO_ADDR
// if not tmp then
11344: LD_VAR 0 5
11348: NOT
11349: IFFALSE 11353
// exit ;
11351: GO 11402
// for i in tmp do
11353: LD_ADDR_VAR 0 4
11357: PUSH
11358: LD_VAR 0 5
11362: PUSH
11363: FOR_IN
11364: IFFALSE 11400
// if GetTech ( i , side ) <> state_researched then
11366: LD_VAR 0 4
11370: PPUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: CALL_OW 321
11380: PUSH
11381: LD_INT 2
11383: NONEQUAL
11384: IFFALSE 11398
// begin result := false ;
11386: LD_ADDR_VAR 0 3
11390: PUSH
11391: LD_INT 0
11393: ST_TO_ADDR
// exit ;
11394: POP
11395: POP
11396: GO 11402
// end ;
11398: GO 11363
11400: POP
11401: POP
// end ;
11402: LD_VAR 0 3
11406: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11407: LD_INT 0
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11422: LD_VAR 0 1
11426: NOT
11427: IFTRUE 11444
11429: PUSH
11430: LD_VAR 0 1
11434: PPUSH
11435: CALL_OW 257
11439: PUSH
11440: LD_INT 9
11442: NONEQUAL
11443: OR
11444: IFFALSE 11448
// exit ;
11446: GO 12027
// side := GetSide ( unit ) ;
11448: LD_ADDR_VAR 0 9
11452: PUSH
11453: LD_VAR 0 1
11457: PPUSH
11458: CALL_OW 255
11462: ST_TO_ADDR
// tech_space := tech_spacanom ;
11463: LD_ADDR_VAR 0 12
11467: PUSH
11468: LD_INT 29
11470: ST_TO_ADDR
// tech_time := tech_taurad ;
11471: LD_ADDR_VAR 0 13
11475: PUSH
11476: LD_INT 28
11478: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11479: LD_ADDR_VAR 0 11
11483: PUSH
11484: LD_VAR 0 1
11488: PPUSH
11489: CALL_OW 310
11493: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11494: LD_VAR 0 11
11498: PPUSH
11499: CALL_OW 247
11503: PUSH
11504: LD_INT 2
11506: EQUAL
11507: IFFALSE 11511
// exit ;
11509: GO 12027
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11511: LD_ADDR_VAR 0 8
11515: PUSH
11516: LD_INT 81
11518: PUSH
11519: LD_VAR 0 9
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 3
11530: PUSH
11531: LD_INT 21
11533: PUSH
11534: LD_INT 3
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PPUSH
11549: CALL_OW 69
11553: ST_TO_ADDR
// if not tmp then
11554: LD_VAR 0 8
11558: NOT
11559: IFFALSE 11563
// exit ;
11561: GO 12027
// if in_unit then
11563: LD_VAR 0 11
11567: IFFALSE 11591
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11569: LD_ADDR_VAR 0 10
11573: PUSH
11574: LD_VAR 0 8
11578: PPUSH
11579: LD_VAR 0 11
11583: PPUSH
11584: CALL_OW 74
11588: ST_TO_ADDR
11589: GO 11611
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11591: LD_ADDR_VAR 0 10
11595: PUSH
11596: LD_VAR 0 8
11600: PPUSH
11601: LD_VAR 0 1
11605: PPUSH
11606: CALL_OW 74
11610: ST_TO_ADDR
// if not enemy then
11611: LD_VAR 0 10
11615: NOT
11616: IFFALSE 11620
// exit ;
11618: GO 12027
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11620: LD_VAR 0 11
11624: IFFALSE 11646
11626: PUSH
11627: LD_VAR 0 11
11631: PPUSH
11632: LD_VAR 0 10
11636: PPUSH
11637: CALL_OW 296
11641: PUSH
11642: LD_INT 13
11644: GREATER
11645: AND
11646: IFTRUE 11668
11648: PUSH
11649: LD_VAR 0 1
11653: PPUSH
11654: LD_VAR 0 10
11658: PPUSH
11659: CALL_OW 296
11663: PUSH
11664: LD_INT 12
11666: GREATER
11667: OR
11668: IFFALSE 11672
// exit ;
11670: GO 12027
// missile := [ 1 ] ;
11672: LD_ADDR_VAR 0 14
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11683: LD_VAR 0 9
11687: PPUSH
11688: LD_VAR 0 12
11692: PPUSH
11693: CALL_OW 325
11697: IFFALSE 11726
// missile := Replace ( missile , missile + 1 , 2 ) ;
11699: LD_ADDR_VAR 0 14
11703: PUSH
11704: LD_VAR 0 14
11708: PPUSH
11709: LD_VAR 0 14
11713: PUSH
11714: LD_INT 1
11716: PLUS
11717: PPUSH
11718: LD_INT 2
11720: PPUSH
11721: CALL_OW 1
11725: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11726: LD_VAR 0 9
11730: PPUSH
11731: LD_VAR 0 13
11735: PPUSH
11736: CALL_OW 325
11740: IFFALSE 11764
11742: PUSH
11743: LD_VAR 0 10
11747: PPUSH
11748: CALL_OW 255
11752: PPUSH
11753: LD_VAR 0 13
11757: PPUSH
11758: CALL_OW 325
11762: NOT
11763: AND
11764: IFFALSE 11793
// missile := Replace ( missile , missile + 1 , 3 ) ;
11766: LD_ADDR_VAR 0 14
11770: PUSH
11771: LD_VAR 0 14
11775: PPUSH
11776: LD_VAR 0 14
11780: PUSH
11781: LD_INT 1
11783: PLUS
11784: PPUSH
11785: LD_INT 3
11787: PPUSH
11788: CALL_OW 1
11792: ST_TO_ADDR
// if missile < 2 then
11793: LD_VAR 0 14
11797: PUSH
11798: LD_INT 2
11800: LESS
11801: IFFALSE 11805
// exit ;
11803: GO 12027
// x := GetX ( enemy ) ;
11805: LD_ADDR_VAR 0 4
11809: PUSH
11810: LD_VAR 0 10
11814: PPUSH
11815: CALL_OW 250
11819: ST_TO_ADDR
// y := GetY ( enemy ) ;
11820: LD_ADDR_VAR 0 5
11824: PUSH
11825: LD_VAR 0 10
11829: PPUSH
11830: CALL_OW 251
11834: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11835: LD_ADDR_VAR 0 6
11839: PUSH
11840: LD_VAR 0 4
11844: PUSH
11845: LD_INT 1
11847: NEG
11848: PPUSH
11849: LD_INT 1
11851: PPUSH
11852: CALL_OW 12
11856: PLUS
11857: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11858: LD_ADDR_VAR 0 7
11862: PUSH
11863: LD_VAR 0 5
11867: PUSH
11868: LD_INT 1
11870: NEG
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 12
11879: PLUS
11880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11881: LD_VAR 0 6
11885: PPUSH
11886: LD_VAR 0 7
11890: PPUSH
11891: CALL_OW 488
11895: NOT
11896: IFFALSE 11918
// begin _x := x ;
11898: LD_ADDR_VAR 0 6
11902: PUSH
11903: LD_VAR 0 4
11907: ST_TO_ADDR
// _y := y ;
11908: LD_ADDR_VAR 0 7
11912: PUSH
11913: LD_VAR 0 5
11917: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11918: LD_ADDR_VAR 0 3
11922: PUSH
11923: LD_INT 1
11925: PPUSH
11926: LD_VAR 0 14
11930: PPUSH
11931: CALL_OW 12
11935: ST_TO_ADDR
// case i of 1 :
11936: LD_VAR 0 3
11940: PUSH
11941: LD_INT 1
11943: DOUBLE
11944: EQUAL
11945: IFTRUE 11949
11947: GO 11966
11949: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11950: LD_VAR 0 1
11954: PPUSH
11955: LD_VAR 0 10
11959: PPUSH
11960: CALL_OW 115
11964: GO 12027
11966: LD_INT 2
11968: DOUBLE
11969: EQUAL
11970: IFTRUE 11974
11972: GO 11996
11974: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_VAR 0 6
11984: PPUSH
11985: LD_VAR 0 7
11989: PPUSH
11990: CALL_OW 153
11994: GO 12027
11996: LD_INT 3
11998: DOUBLE
11999: EQUAL
12000: IFTRUE 12004
12002: GO 12026
12004: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_VAR 0 6
12014: PPUSH
12015: LD_VAR 0 7
12019: PPUSH
12020: CALL_OW 154
12024: GO 12027
12026: POP
// end ;
12027: LD_VAR 0 2
12031: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12032: LD_INT 0
12034: PPUSH
12035: PPUSH
12036: PPUSH
12037: PPUSH
12038: PPUSH
12039: PPUSH
// if not unit or not building then
12040: LD_VAR 0 1
12044: NOT
12045: IFTRUE 12054
12047: PUSH
12048: LD_VAR 0 2
12052: NOT
12053: OR
12054: IFFALSE 12058
// exit ;
12056: GO 12216
// x := GetX ( building ) ;
12058: LD_ADDR_VAR 0 5
12062: PUSH
12063: LD_VAR 0 2
12067: PPUSH
12068: CALL_OW 250
12072: ST_TO_ADDR
// y := GetY ( building ) ;
12073: LD_ADDR_VAR 0 6
12077: PUSH
12078: LD_VAR 0 2
12082: PPUSH
12083: CALL_OW 251
12087: ST_TO_ADDR
// for i := 0 to 5 do
12088: LD_ADDR_VAR 0 4
12092: PUSH
12093: DOUBLE
12094: LD_INT 0
12096: DEC
12097: ST_TO_ADDR
12098: LD_INT 5
12100: PUSH
12101: FOR_TO
12102: IFFALSE 12214
// begin _x := ShiftX ( x , i , 3 ) ;
12104: LD_ADDR_VAR 0 7
12108: PUSH
12109: LD_VAR 0 5
12113: PPUSH
12114: LD_VAR 0 4
12118: PPUSH
12119: LD_INT 3
12121: PPUSH
12122: CALL_OW 272
12126: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12127: LD_ADDR_VAR 0 8
12131: PUSH
12132: LD_VAR 0 6
12136: PPUSH
12137: LD_VAR 0 4
12141: PPUSH
12142: LD_INT 3
12144: PPUSH
12145: CALL_OW 273
12149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12150: LD_VAR 0 7
12154: PPUSH
12155: LD_VAR 0 8
12159: PPUSH
12160: CALL_OW 488
12164: NOT
12165: IFFALSE 12169
// continue ;
12167: GO 12101
// if HexInfo ( _x , _y ) = 0 then
12169: LD_VAR 0 7
12173: PPUSH
12174: LD_VAR 0 8
12178: PPUSH
12179: CALL_OW 428
12183: PUSH
12184: LD_INT 0
12186: EQUAL
12187: IFFALSE 12212
// begin ComMoveXY ( unit , _x , _y ) ;
12189: LD_VAR 0 1
12193: PPUSH
12194: LD_VAR 0 7
12198: PPUSH
12199: LD_VAR 0 8
12203: PPUSH
12204: CALL_OW 111
// exit ;
12208: POP
12209: POP
12210: GO 12216
// end ; end ;
12212: GO 12101
12214: POP
12215: POP
// end ;
12216: LD_VAR 0 3
12220: RET
// export function ScanBase ( side , base_area ) ; begin
12221: LD_INT 0
12223: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12224: LD_ADDR_VAR 0 3
12228: PUSH
12229: LD_VAR 0 2
12233: PPUSH
12234: LD_INT 81
12236: PUSH
12237: LD_VAR 0 1
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PPUSH
12246: CALL_OW 70
12250: ST_TO_ADDR
// end ;
12251: LD_VAR 0 3
12255: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12256: LD_INT 0
12258: PPUSH
12259: PPUSH
12260: PPUSH
12261: PPUSH
// result := false ;
12262: LD_ADDR_VAR 0 2
12266: PUSH
12267: LD_INT 0
12269: ST_TO_ADDR
// side := GetSide ( unit ) ;
12270: LD_ADDR_VAR 0 3
12274: PUSH
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 255
12284: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12285: LD_ADDR_VAR 0 4
12289: PUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 248
12299: ST_TO_ADDR
// case nat of 1 :
12300: LD_VAR 0 4
12304: PUSH
12305: LD_INT 1
12307: DOUBLE
12308: EQUAL
12309: IFTRUE 12313
12311: GO 12324
12313: POP
// tech := tech_lassight ; 2 :
12314: LD_ADDR_VAR 0 5
12318: PUSH
12319: LD_INT 12
12321: ST_TO_ADDR
12322: GO 12363
12324: LD_INT 2
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12343
12332: POP
// tech := tech_mortar ; 3 :
12333: LD_ADDR_VAR 0 5
12337: PUSH
12338: LD_INT 41
12340: ST_TO_ADDR
12341: GO 12363
12343: LD_INT 3
12345: DOUBLE
12346: EQUAL
12347: IFTRUE 12351
12349: GO 12362
12351: POP
// tech := tech_bazooka ; end ;
12352: LD_ADDR_VAR 0 5
12356: PUSH
12357: LD_INT 44
12359: ST_TO_ADDR
12360: GO 12363
12362: POP
// if Researched ( side , tech ) then
12363: LD_VAR 0 3
12367: PPUSH
12368: LD_VAR 0 5
12372: PPUSH
12373: CALL_OW 325
12377: IFFALSE 12404
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12379: LD_ADDR_VAR 0 2
12383: PUSH
12384: LD_INT 5
12386: PUSH
12387: LD_INT 8
12389: PUSH
12390: LD_INT 9
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: LD_VAR 0 4
12402: ARRAY
12403: ST_TO_ADDR
// end ;
12404: LD_VAR 0 2
12408: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12409: LD_INT 0
12411: PPUSH
12412: PPUSH
12413: PPUSH
// if not mines then
12414: LD_VAR 0 2
12418: NOT
12419: IFFALSE 12423
// exit ;
12421: GO 12567
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12423: LD_ADDR_VAR 0 5
12427: PUSH
12428: LD_INT 81
12430: PUSH
12431: LD_VAR 0 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 3
12442: PUSH
12443: LD_INT 21
12445: PUSH
12446: LD_INT 3
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PPUSH
12461: CALL_OW 69
12465: ST_TO_ADDR
// for i in mines do
12466: LD_ADDR_VAR 0 4
12470: PUSH
12471: LD_VAR 0 2
12475: PUSH
12476: FOR_IN
12477: IFFALSE 12565
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12479: LD_VAR 0 4
12483: PUSH
12484: LD_INT 1
12486: ARRAY
12487: PPUSH
12488: LD_VAR 0 4
12492: PUSH
12493: LD_INT 2
12495: ARRAY
12496: PPUSH
12497: CALL_OW 458
12501: NOT
12502: IFFALSE 12506
// continue ;
12504: GO 12476
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12506: LD_VAR 0 4
12510: PUSH
12511: LD_INT 1
12513: ARRAY
12514: PPUSH
12515: LD_VAR 0 4
12519: PUSH
12520: LD_INT 2
12522: ARRAY
12523: PPUSH
12524: CALL_OW 428
12528: PUSH
12529: LD_VAR 0 5
12533: IN
12534: IFFALSE 12563
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12536: LD_VAR 0 4
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: LD_VAR 0 4
12549: PUSH
12550: LD_INT 2
12552: ARRAY
12553: PPUSH
12554: LD_VAR 0 1
12558: PPUSH
12559: CALL_OW 456
// end ;
12563: GO 12476
12565: POP
12566: POP
// end ;
12567: LD_VAR 0 3
12571: RET
// export function Count ( array ) ; begin
12572: LD_INT 0
12574: PPUSH
// result := array + 0 ;
12575: LD_ADDR_VAR 0 2
12579: PUSH
12580: LD_VAR 0 1
12584: PUSH
12585: LD_INT 0
12587: PLUS
12588: ST_TO_ADDR
// end ;
12589: LD_VAR 0 2
12593: RET
// export function IsEmpty ( building ) ; begin
12594: LD_INT 0
12596: PPUSH
// if not building then
12597: LD_VAR 0 1
12601: NOT
12602: IFFALSE 12606
// exit ;
12604: GO 12649
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12606: LD_ADDR_VAR 0 2
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 22
12618: PUSH
12619: LD_VAR 0 1
12623: PPUSH
12624: CALL_OW 255
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 58
12635: PUSH
12636: EMPTY
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 69
12647: IN
12648: ST_TO_ADDR
// end ;
12649: LD_VAR 0 2
12653: RET
// export function IsNotFull ( building ) ; var places ; begin
12654: LD_INT 0
12656: PPUSH
12657: PPUSH
// if not building then
12658: LD_VAR 0 1
12662: NOT
12663: IFFALSE 12667
// exit ;
12665: GO 12695
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12667: LD_ADDR_VAR 0 2
12671: PUSH
12672: LD_VAR 0 1
12676: PPUSH
12677: LD_INT 3
12679: PUSH
12680: LD_INT 62
12682: PUSH
12683: EMPTY
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: ST_TO_ADDR
// end ;
12695: LD_VAR 0 2
12699: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12700: LD_INT 0
12702: PPUSH
12703: PPUSH
12704: PPUSH
12705: PPUSH
// tmp := [ ] ;
12706: LD_ADDR_VAR 0 3
12710: PUSH
12711: EMPTY
12712: ST_TO_ADDR
// list := [ ] ;
12713: LD_ADDR_VAR 0 5
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i = 16 to 25 do
12720: LD_ADDR_VAR 0 4
12724: PUSH
12725: DOUBLE
12726: LD_INT 16
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 25
12732: PUSH
12733: FOR_TO
12734: IFFALSE 12807
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12736: LD_ADDR_VAR 0 3
12740: PUSH
12741: LD_VAR 0 3
12745: PUSH
12746: LD_INT 22
12748: PUSH
12749: LD_VAR 0 1
12753: PPUSH
12754: CALL_OW 255
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 91
12765: PUSH
12766: LD_VAR 0 1
12770: PUSH
12771: LD_INT 6
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 30
12781: PUSH
12782: LD_VAR 0 4
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: PUSH
12796: EMPTY
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: ADD
12804: ST_TO_ADDR
12805: GO 12733
12807: POP
12808: POP
// for i = 1 to tmp do
12809: LD_ADDR_VAR 0 4
12813: PUSH
12814: DOUBLE
12815: LD_INT 1
12817: DEC
12818: ST_TO_ADDR
12819: LD_VAR 0 3
12823: PUSH
12824: FOR_TO
12825: IFFALSE 12913
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12827: LD_ADDR_VAR 0 5
12831: PUSH
12832: LD_VAR 0 5
12836: PUSH
12837: LD_VAR 0 3
12841: PUSH
12842: LD_VAR 0 4
12846: ARRAY
12847: PPUSH
12848: CALL_OW 266
12852: PUSH
12853: LD_VAR 0 3
12857: PUSH
12858: LD_VAR 0 4
12862: ARRAY
12863: PPUSH
12864: CALL_OW 250
12868: PUSH
12869: LD_VAR 0 3
12873: PUSH
12874: LD_VAR 0 4
12878: ARRAY
12879: PPUSH
12880: CALL_OW 251
12884: PUSH
12885: LD_VAR 0 3
12889: PUSH
12890: LD_VAR 0 4
12894: ARRAY
12895: PPUSH
12896: CALL_OW 254
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: ADD
12910: ST_TO_ADDR
12911: GO 12824
12913: POP
12914: POP
// result := list ;
12915: LD_ADDR_VAR 0 2
12919: PUSH
12920: LD_VAR 0 5
12924: ST_TO_ADDR
// end ;
12925: LD_VAR 0 2
12929: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12930: LD_INT 0
12932: PPUSH
12933: PPUSH
12934: PPUSH
12935: PPUSH
12936: PPUSH
12937: PPUSH
12938: PPUSH
// if not factory then
12939: LD_VAR 0 1
12943: NOT
12944: IFFALSE 12948
// exit ;
12946: GO 13551
// if control = control_apeman then
12948: LD_VAR 0 4
12952: PUSH
12953: LD_INT 5
12955: EQUAL
12956: IFFALSE 13065
// begin tmp := UnitsInside ( factory ) ;
12958: LD_ADDR_VAR 0 8
12962: PUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 313
12972: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12973: LD_VAR 0 8
12977: PPUSH
12978: LD_INT 25
12980: PUSH
12981: LD_INT 12
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PPUSH
12988: CALL_OW 72
12992: NOT
12993: IFFALSE 13003
// control := control_manual ;
12995: LD_ADDR_VAR 0 4
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13003: LD_ADDR_VAR 0 8
13007: PUSH
13008: LD_VAR 0 1
13012: PPUSH
13013: CALL 12700 0 1
13017: ST_TO_ADDR
// if tmp then
13018: LD_VAR 0 8
13022: IFFALSE 13065
// begin for i in tmp do
13024: LD_ADDR_VAR 0 7
13028: PUSH
13029: LD_VAR 0 8
13033: PUSH
13034: FOR_IN
13035: IFFALSE 13063
// if i [ 1 ] = b_ext_radio then
13037: LD_VAR 0 7
13041: PUSH
13042: LD_INT 1
13044: ARRAY
13045: PUSH
13046: LD_INT 22
13048: EQUAL
13049: IFFALSE 13061
// begin control := control_remote ;
13051: LD_ADDR_VAR 0 4
13055: PUSH
13056: LD_INT 2
13058: ST_TO_ADDR
// break ;
13059: GO 13063
// end ;
13061: GO 13034
13063: POP
13064: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13065: LD_VAR 0 1
13069: PPUSH
13070: LD_VAR 0 2
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_VAR 0 4
13084: PPUSH
13085: LD_VAR 0 5
13089: PPUSH
13090: CALL_OW 448
13094: IFFALSE 13129
// begin result := [ chassis , engine , control , weapon ] ;
13096: LD_ADDR_VAR 0 6
13100: PUSH
13101: LD_VAR 0 2
13105: PUSH
13106: LD_VAR 0 3
13110: PUSH
13111: LD_VAR 0 4
13115: PUSH
13116: LD_VAR 0 5
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: ST_TO_ADDR
// exit ;
13127: GO 13551
// end ; _chassis := AvailableChassisList ( factory ) ;
13129: LD_ADDR_VAR 0 9
13133: PUSH
13134: LD_VAR 0 1
13138: PPUSH
13139: CALL_OW 475
13143: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13144: LD_ADDR_VAR 0 11
13148: PUSH
13149: LD_VAR 0 1
13153: PPUSH
13154: CALL_OW 476
13158: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13159: LD_ADDR_VAR 0 12
13163: PUSH
13164: LD_VAR 0 1
13168: PPUSH
13169: CALL_OW 477
13173: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13174: LD_ADDR_VAR 0 10
13178: PUSH
13179: LD_VAR 0 1
13183: PPUSH
13184: CALL_OW 478
13188: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13189: LD_VAR 0 9
13193: NOT
13194: IFTRUE 13203
13196: PUSH
13197: LD_VAR 0 11
13201: NOT
13202: OR
13203: IFTRUE 13212
13205: PUSH
13206: LD_VAR 0 12
13210: NOT
13211: OR
13212: IFTRUE 13221
13214: PUSH
13215: LD_VAR 0 10
13219: NOT
13220: OR
13221: IFFALSE 13256
// begin result := [ chassis , engine , control , weapon ] ;
13223: LD_ADDR_VAR 0 6
13227: PUSH
13228: LD_VAR 0 2
13232: PUSH
13233: LD_VAR 0 3
13237: PUSH
13238: LD_VAR 0 4
13242: PUSH
13243: LD_VAR 0 5
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: ST_TO_ADDR
// exit ;
13254: GO 13551
// end ; if not chassis in _chassis then
13256: LD_VAR 0 2
13260: PUSH
13261: LD_VAR 0 9
13265: IN
13266: NOT
13267: IFFALSE 13293
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13269: LD_ADDR_VAR 0 2
13273: PUSH
13274: LD_VAR 0 9
13278: PUSH
13279: LD_INT 1
13281: PPUSH
13282: LD_VAR 0 9
13286: PPUSH
13287: CALL_OW 12
13291: ARRAY
13292: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13293: LD_VAR 0 2
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: CALL 13556 0 2
13307: NOT
13308: IFFALSE 13369
// repeat engine := _engine [ 1 ] ;
13310: LD_ADDR_VAR 0 3
13314: PUSH
13315: LD_VAR 0 11
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13324: LD_ADDR_VAR 0 11
13328: PUSH
13329: LD_VAR 0 11
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 3
13341: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13342: LD_VAR 0 2
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: CALL 13556 0 2
13356: IFTRUE 13367
13358: PUSH
13359: LD_VAR 0 11
13363: PUSH
13364: EMPTY
13365: EQUAL
13366: OR
13367: IFFALSE 13310
// if not control in _control then
13369: LD_VAR 0 4
13373: PUSH
13374: LD_VAR 0 12
13378: IN
13379: NOT
13380: IFFALSE 13406
// control := _control [ rand ( 1 , _control ) ] ;
13382: LD_ADDR_VAR 0 4
13386: PUSH
13387: LD_VAR 0 12
13391: PUSH
13392: LD_INT 1
13394: PPUSH
13395: LD_VAR 0 12
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13406: LD_VAR 0 2
13410: PPUSH
13411: LD_VAR 0 5
13415: PPUSH
13416: CALL 13778 0 2
13420: NOT
13421: IFFALSE 13482
// repeat weapon := _weapon [ 1 ] ;
13423: LD_ADDR_VAR 0 5
13427: PUSH
13428: LD_VAR 0 10
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13437: LD_ADDR_VAR 0 10
13441: PUSH
13442: LD_VAR 0 10
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 3
13454: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13455: LD_VAR 0 2
13459: PPUSH
13460: LD_VAR 0 5
13464: PPUSH
13465: CALL 13778 0 2
13469: IFTRUE 13480
13471: PUSH
13472: LD_VAR 0 10
13476: PUSH
13477: EMPTY
13478: EQUAL
13479: OR
13480: IFFALSE 13423
// result := [ ] ;
13482: LD_ADDR_VAR 0 6
13486: PUSH
13487: EMPTY
13488: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13489: LD_VAR 0 1
13493: PPUSH
13494: LD_VAR 0 2
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_VAR 0 4
13508: PPUSH
13509: LD_VAR 0 5
13513: PPUSH
13514: CALL_OW 448
13518: IFFALSE 13551
// result := [ chassis , engine , control , weapon ] ;
13520: LD_ADDR_VAR 0 6
13524: PUSH
13525: LD_VAR 0 2
13529: PUSH
13530: LD_VAR 0 3
13534: PUSH
13535: LD_VAR 0 4
13539: PUSH
13540: LD_VAR 0 5
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: ST_TO_ADDR
// end ;
13551: LD_VAR 0 6
13555: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13556: LD_INT 0
13558: PPUSH
// if not chassis or not engine then
13559: LD_VAR 0 1
13563: NOT
13564: IFTRUE 13573
13566: PUSH
13567: LD_VAR 0 2
13571: NOT
13572: OR
13573: IFFALSE 13577
// exit ;
13575: GO 13773
// case engine of engine_solar :
13577: LD_VAR 0 2
13581: PUSH
13582: LD_INT 2
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13590
13588: GO 13628
13590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13591: LD_ADDR_VAR 0 3
13595: PUSH
13596: LD_INT 11
13598: PUSH
13599: LD_INT 12
13601: PUSH
13602: LD_INT 13
13604: PUSH
13605: LD_INT 14
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: LD_INT 3
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: ST_TO_ADDR
13626: GO 13757
13628: LD_INT 1
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13698
13636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13637: LD_ADDR_VAR 0 3
13641: PUSH
13642: LD_INT 11
13644: PUSH
13645: LD_INT 12
13647: PUSH
13648: LD_INT 13
13650: PUSH
13651: LD_INT 14
13653: PUSH
13654: LD_INT 1
13656: PUSH
13657: LD_INT 2
13659: PUSH
13660: LD_INT 3
13662: PUSH
13663: LD_INT 4
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: LD_INT 21
13671: PUSH
13672: LD_INT 23
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 24
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 13757
13698: LD_INT 3
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13756
13706: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_INT 13
13714: PUSH
13715: LD_INT 14
13717: PUSH
13718: LD_INT 2
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: LD_INT 4
13726: PUSH
13727: LD_INT 5
13729: PUSH
13730: LD_INT 21
13732: PUSH
13733: LD_INT 22
13735: PUSH
13736: LD_INT 23
13738: PUSH
13739: LD_INT 24
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: ST_TO_ADDR
13754: GO 13757
13756: POP
// result := ( chassis in result ) ;
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: LD_VAR 0 1
13766: PUSH
13767: LD_VAR 0 3
13771: IN
13772: ST_TO_ADDR
// end ;
13773: LD_VAR 0 3
13777: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13778: LD_INT 0
13780: PPUSH
// if not chassis or not weapon then
13781: LD_VAR 0 1
13785: NOT
13786: IFTRUE 13795
13788: PUSH
13789: LD_VAR 0 2
13793: NOT
13794: OR
13795: IFFALSE 13799
// exit ;
13797: GO 14893
// case weapon of us_machine_gun :
13799: LD_VAR 0 2
13803: PUSH
13804: LD_INT 2
13806: DOUBLE
13807: EQUAL
13808: IFTRUE 13812
13810: GO 13842
13812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13813: LD_ADDR_VAR 0 3
13817: PUSH
13818: LD_INT 1
13820: PUSH
13821: LD_INT 2
13823: PUSH
13824: LD_INT 3
13826: PUSH
13827: LD_INT 4
13829: PUSH
13830: LD_INT 5
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: ST_TO_ADDR
13840: GO 14877
13842: LD_INT 3
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 13880
13850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: LD_INT 1
13858: PUSH
13859: LD_INT 2
13861: PUSH
13862: LD_INT 3
13864: PUSH
13865: LD_INT 4
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: ST_TO_ADDR
13878: GO 14877
13880: LD_INT 11
13882: DOUBLE
13883: EQUAL
13884: IFTRUE 13888
13886: GO 13918
13888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13889: LD_ADDR_VAR 0 3
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 3
13902: PUSH
13903: LD_INT 4
13905: PUSH
13906: LD_INT 5
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: ST_TO_ADDR
13916: GO 14877
13918: LD_INT 4
13920: DOUBLE
13921: EQUAL
13922: IFTRUE 13926
13924: GO 13952
13926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13927: LD_ADDR_VAR 0 3
13931: PUSH
13932: LD_INT 2
13934: PUSH
13935: LD_INT 3
13937: PUSH
13938: LD_INT 4
13940: PUSH
13941: LD_INT 5
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: ST_TO_ADDR
13950: GO 14877
13952: LD_INT 5
13954: DOUBLE
13955: EQUAL
13956: IFTRUE 13960
13958: GO 13986
13960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: LD_INT 2
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: LD_INT 5
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: ST_TO_ADDR
13984: GO 14877
13986: LD_INT 9
13988: DOUBLE
13989: EQUAL
13990: IFTRUE 13994
13992: GO 14020
13994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_INT 2
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 4
14008: PUSH
14009: LD_INT 5
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: ST_TO_ADDR
14018: GO 14877
14020: LD_INT 7
14022: DOUBLE
14023: EQUAL
14024: IFTRUE 14028
14026: GO 14054
14028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14029: LD_ADDR_VAR 0 3
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 4
14042: PUSH
14043: LD_INT 5
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: ST_TO_ADDR
14052: GO 14877
14054: LD_INT 12
14056: DOUBLE
14057: EQUAL
14058: IFTRUE 14062
14060: GO 14088
14062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14063: LD_ADDR_VAR 0 3
14067: PUSH
14068: LD_INT 2
14070: PUSH
14071: LD_INT 3
14073: PUSH
14074: LD_INT 4
14076: PUSH
14077: LD_INT 5
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: ST_TO_ADDR
14086: GO 14877
14088: LD_INT 13
14090: DOUBLE
14091: EQUAL
14092: IFTRUE 14096
14094: GO 14122
14096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14097: LD_ADDR_VAR 0 3
14101: PUSH
14102: LD_INT 2
14104: PUSH
14105: LD_INT 3
14107: PUSH
14108: LD_INT 4
14110: PUSH
14111: LD_INT 5
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: ST_TO_ADDR
14120: GO 14877
14122: LD_INT 14
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14148
14130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_INT 4
14138: PUSH
14139: LD_INT 5
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: ST_TO_ADDR
14146: GO 14877
14148: LD_INT 6
14150: DOUBLE
14151: EQUAL
14152: IFTRUE 14156
14154: GO 14174
14156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14157: LD_ADDR_VAR 0 3
14161: PUSH
14162: LD_INT 4
14164: PUSH
14165: LD_INT 5
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: ST_TO_ADDR
14172: GO 14877
14174: LD_INT 10
14176: DOUBLE
14177: EQUAL
14178: IFTRUE 14182
14180: GO 14200
14182: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_INT 4
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: ST_TO_ADDR
14198: GO 14877
14200: LD_INT 22
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14234
14208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14209: LD_ADDR_VAR 0 3
14213: PUSH
14214: LD_INT 11
14216: PUSH
14217: LD_INT 12
14219: PUSH
14220: LD_INT 13
14222: PUSH
14223: LD_INT 14
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: ST_TO_ADDR
14232: GO 14877
14234: LD_INT 23
14236: DOUBLE
14237: EQUAL
14238: IFTRUE 14242
14240: GO 14268
14242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14243: LD_ADDR_VAR 0 3
14247: PUSH
14248: LD_INT 11
14250: PUSH
14251: LD_INT 12
14253: PUSH
14254: LD_INT 13
14256: PUSH
14257: LD_INT 14
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: ST_TO_ADDR
14266: GO 14877
14268: LD_INT 24
14270: DOUBLE
14271: EQUAL
14272: IFTRUE 14276
14274: GO 14302
14276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14277: LD_ADDR_VAR 0 3
14281: PUSH
14282: LD_INT 11
14284: PUSH
14285: LD_INT 12
14287: PUSH
14288: LD_INT 13
14290: PUSH
14291: LD_INT 14
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: ST_TO_ADDR
14300: GO 14877
14302: LD_INT 30
14304: DOUBLE
14305: EQUAL
14306: IFTRUE 14310
14308: GO 14336
14310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14311: LD_ADDR_VAR 0 3
14315: PUSH
14316: LD_INT 11
14318: PUSH
14319: LD_INT 12
14321: PUSH
14322: LD_INT 13
14324: PUSH
14325: LD_INT 14
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: ST_TO_ADDR
14334: GO 14877
14336: LD_INT 25
14338: DOUBLE
14339: EQUAL
14340: IFTRUE 14344
14342: GO 14362
14344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14345: LD_ADDR_VAR 0 3
14349: PUSH
14350: LD_INT 13
14352: PUSH
14353: LD_INT 14
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: ST_TO_ADDR
14360: GO 14877
14362: LD_INT 27
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14388
14370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14371: LD_ADDR_VAR 0 3
14375: PUSH
14376: LD_INT 13
14378: PUSH
14379: LD_INT 14
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: ST_TO_ADDR
14386: GO 14877
14388: LD_INT 92
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14422
14396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_INT 11
14404: PUSH
14405: LD_INT 12
14407: PUSH
14408: LD_INT 13
14410: PUSH
14411: LD_INT 14
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: ST_TO_ADDR
14420: GO 14877
14422: LD_INT 28
14424: DOUBLE
14425: EQUAL
14426: IFTRUE 14430
14428: GO 14448
14430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 13
14438: PUSH
14439: LD_INT 14
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: ST_TO_ADDR
14446: GO 14877
14448: LD_INT 29
14450: DOUBLE
14451: EQUAL
14452: IFTRUE 14456
14454: GO 14474
14456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14457: LD_ADDR_VAR 0 3
14461: PUSH
14462: LD_INT 13
14464: PUSH
14465: LD_INT 14
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 14877
14474: LD_INT 31
14476: DOUBLE
14477: EQUAL
14478: IFTRUE 14482
14480: GO 14500
14482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14483: LD_ADDR_VAR 0 3
14487: PUSH
14488: LD_INT 13
14490: PUSH
14491: LD_INT 14
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: ST_TO_ADDR
14498: GO 14877
14500: LD_INT 26
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 14526
14508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_INT 13
14516: PUSH
14517: LD_INT 14
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: ST_TO_ADDR
14524: GO 14877
14526: LD_INT 42
14528: DOUBLE
14529: EQUAL
14530: IFTRUE 14534
14532: GO 14560
14534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14535: LD_ADDR_VAR 0 3
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 22
14545: PUSH
14546: LD_INT 23
14548: PUSH
14549: LD_INT 24
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: ST_TO_ADDR
14558: GO 14877
14560: LD_INT 43
14562: DOUBLE
14563: EQUAL
14564: IFTRUE 14568
14566: GO 14594
14568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14569: LD_ADDR_VAR 0 3
14573: PUSH
14574: LD_INT 21
14576: PUSH
14577: LD_INT 22
14579: PUSH
14580: LD_INT 23
14582: PUSH
14583: LD_INT 24
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: ST_TO_ADDR
14592: GO 14877
14594: LD_INT 44
14596: DOUBLE
14597: EQUAL
14598: IFTRUE 14602
14600: GO 14628
14602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14603: LD_ADDR_VAR 0 3
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_INT 23
14616: PUSH
14617: LD_INT 24
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: ST_TO_ADDR
14626: GO 14877
14628: LD_INT 45
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14662
14636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14637: LD_ADDR_VAR 0 3
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 22
14647: PUSH
14648: LD_INT 23
14650: PUSH
14651: LD_INT 24
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: ST_TO_ADDR
14660: GO 14877
14662: LD_INT 49
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14696
14670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14671: LD_ADDR_VAR 0 3
14675: PUSH
14676: LD_INT 21
14678: PUSH
14679: LD_INT 22
14681: PUSH
14682: LD_INT 23
14684: PUSH
14685: LD_INT 24
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: ST_TO_ADDR
14694: GO 14877
14696: LD_INT 51
14698: DOUBLE
14699: EQUAL
14700: IFTRUE 14704
14702: GO 14730
14704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14705: LD_ADDR_VAR 0 3
14709: PUSH
14710: LD_INT 21
14712: PUSH
14713: LD_INT 22
14715: PUSH
14716: LD_INT 23
14718: PUSH
14719: LD_INT 24
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: ST_TO_ADDR
14728: GO 14877
14730: LD_INT 52
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14764
14738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14739: LD_ADDR_VAR 0 3
14743: PUSH
14744: LD_INT 21
14746: PUSH
14747: LD_INT 22
14749: PUSH
14750: LD_INT 23
14752: PUSH
14753: LD_INT 24
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: ST_TO_ADDR
14762: GO 14877
14764: LD_INT 53
14766: DOUBLE
14767: EQUAL
14768: IFTRUE 14772
14770: GO 14790
14772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14773: LD_ADDR_VAR 0 3
14777: PUSH
14778: LD_INT 23
14780: PUSH
14781: LD_INT 24
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 14877
14790: LD_INT 46
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 14816
14798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_INT 23
14806: PUSH
14807: LD_INT 24
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: ST_TO_ADDR
14814: GO 14877
14816: LD_INT 47
14818: DOUBLE
14819: EQUAL
14820: IFTRUE 14824
14822: GO 14842
14824: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
14825: LD_ADDR_VAR 0 3
14829: PUSH
14830: LD_INT 23
14832: PUSH
14833: LD_INT 24
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: ST_TO_ADDR
14840: GO 14877
14842: LD_INT 98
14844: DOUBLE
14845: EQUAL
14846: IFTRUE 14850
14848: GO 14876
14850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 22
14861: PUSH
14862: LD_INT 23
14864: PUSH
14865: LD_INT 24
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: ST_TO_ADDR
14874: GO 14877
14876: POP
// result := ( chassis in result ) ;
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_VAR 0 1
14886: PUSH
14887: LD_VAR 0 3
14891: IN
14892: ST_TO_ADDR
// end ;
14893: LD_VAR 0 3
14897: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14898: LD_INT 0
14900: PPUSH
14901: PPUSH
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
14906: PPUSH
// result := array ;
14907: LD_ADDR_VAR 0 5
14911: PUSH
14912: LD_VAR 0 1
14916: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14917: LD_VAR 0 1
14921: NOT
14922: IFTRUE 14931
14924: PUSH
14925: LD_VAR 0 2
14929: NOT
14930: OR
14931: IFTRUE 14940
14933: PUSH
14934: LD_VAR 0 3
14938: NOT
14939: OR
14940: IFTRUE 14954
14942: PUSH
14943: LD_VAR 0 2
14947: PUSH
14948: LD_VAR 0 1
14952: GREATER
14953: OR
14954: IFTRUE 14968
14956: PUSH
14957: LD_VAR 0 3
14961: PUSH
14962: LD_VAR 0 1
14966: GREATER
14967: OR
14968: IFFALSE 14972
// exit ;
14970: GO 15268
// if direction then
14972: LD_VAR 0 4
14976: IFFALSE 15040
// begin d := 1 ;
14978: LD_ADDR_VAR 0 9
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// if i_from > i_to then
14986: LD_VAR 0 2
14990: PUSH
14991: LD_VAR 0 3
14995: GREATER
14996: IFFALSE 15022
// length := ( array - i_from ) + i_to else
14998: LD_ADDR_VAR 0 11
15002: PUSH
15003: LD_VAR 0 1
15007: PUSH
15008: LD_VAR 0 2
15012: MINUS
15013: PUSH
15014: LD_VAR 0 3
15018: PLUS
15019: ST_TO_ADDR
15020: GO 15038
// length := i_to - i_from ;
15022: LD_ADDR_VAR 0 11
15026: PUSH
15027: LD_VAR 0 3
15031: PUSH
15032: LD_VAR 0 2
15036: MINUS
15037: ST_TO_ADDR
// end else
15038: GO 15101
// begin d := - 1 ;
15040: LD_ADDR_VAR 0 9
15044: PUSH
15045: LD_INT 1
15047: NEG
15048: ST_TO_ADDR
// if i_from > i_to then
15049: LD_VAR 0 2
15053: PUSH
15054: LD_VAR 0 3
15058: GREATER
15059: IFFALSE 15079
// length := i_from - i_to else
15061: LD_ADDR_VAR 0 11
15065: PUSH
15066: LD_VAR 0 2
15070: PUSH
15071: LD_VAR 0 3
15075: MINUS
15076: ST_TO_ADDR
15077: GO 15101
// length := ( array - i_to ) + i_from ;
15079: LD_ADDR_VAR 0 11
15083: PUSH
15084: LD_VAR 0 1
15088: PUSH
15089: LD_VAR 0 3
15093: MINUS
15094: PUSH
15095: LD_VAR 0 2
15099: PLUS
15100: ST_TO_ADDR
// end ; if not length then
15101: LD_VAR 0 11
15105: NOT
15106: IFFALSE 15110
// exit ;
15108: GO 15268
// tmp := array ;
15110: LD_ADDR_VAR 0 10
15114: PUSH
15115: LD_VAR 0 1
15119: ST_TO_ADDR
// for i = 1 to length do
15120: LD_ADDR_VAR 0 6
15124: PUSH
15125: DOUBLE
15126: LD_INT 1
15128: DEC
15129: ST_TO_ADDR
15130: LD_VAR 0 11
15134: PUSH
15135: FOR_TO
15136: IFFALSE 15256
// begin for j = 1 to array do
15138: LD_ADDR_VAR 0 7
15142: PUSH
15143: DOUBLE
15144: LD_INT 1
15146: DEC
15147: ST_TO_ADDR
15148: LD_VAR 0 1
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15242
// begin k := j + d ;
15156: LD_ADDR_VAR 0 8
15160: PUSH
15161: LD_VAR 0 7
15165: PUSH
15166: LD_VAR 0 9
15170: PLUS
15171: ST_TO_ADDR
// if k > array then
15172: LD_VAR 0 8
15176: PUSH
15177: LD_VAR 0 1
15181: GREATER
15182: IFFALSE 15192
// k := 1 ;
15184: LD_ADDR_VAR 0 8
15188: PUSH
15189: LD_INT 1
15191: ST_TO_ADDR
// if not k then
15192: LD_VAR 0 8
15196: NOT
15197: IFFALSE 15209
// k := array ;
15199: LD_ADDR_VAR 0 8
15203: PUSH
15204: LD_VAR 0 1
15208: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15209: LD_ADDR_VAR 0 10
15213: PUSH
15214: LD_VAR 0 10
15218: PPUSH
15219: LD_VAR 0 8
15223: PPUSH
15224: LD_VAR 0 1
15228: PUSH
15229: LD_VAR 0 7
15233: ARRAY
15234: PPUSH
15235: CALL_OW 1
15239: ST_TO_ADDR
// end ;
15240: GO 15153
15242: POP
15243: POP
// array := tmp ;
15244: LD_ADDR_VAR 0 1
15248: PUSH
15249: LD_VAR 0 10
15253: ST_TO_ADDR
// end ;
15254: GO 15135
15256: POP
15257: POP
// result := array ;
15258: LD_ADDR_VAR 0 5
15262: PUSH
15263: LD_VAR 0 1
15267: ST_TO_ADDR
// end ;
15268: LD_VAR 0 5
15272: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15273: LD_INT 0
15275: PPUSH
15276: PPUSH
// result := 0 ;
15277: LD_ADDR_VAR 0 3
15281: PUSH
15282: LD_INT 0
15284: ST_TO_ADDR
// if not array or not value in array then
15285: LD_VAR 0 1
15289: NOT
15290: IFTRUE 15305
15292: PUSH
15293: LD_VAR 0 2
15297: PUSH
15298: LD_VAR 0 1
15302: IN
15303: NOT
15304: OR
15305: IFFALSE 15309
// exit ;
15307: GO 15363
// for i = 1 to array do
15309: LD_ADDR_VAR 0 4
15313: PUSH
15314: DOUBLE
15315: LD_INT 1
15317: DEC
15318: ST_TO_ADDR
15319: LD_VAR 0 1
15323: PUSH
15324: FOR_TO
15325: IFFALSE 15361
// if value = array [ i ] then
15327: LD_VAR 0 2
15331: PUSH
15332: LD_VAR 0 1
15336: PUSH
15337: LD_VAR 0 4
15341: ARRAY
15342: EQUAL
15343: IFFALSE 15359
// begin result := i ;
15345: LD_ADDR_VAR 0 3
15349: PUSH
15350: LD_VAR 0 4
15354: ST_TO_ADDR
// exit ;
15355: POP
15356: POP
15357: GO 15363
// end ;
15359: GO 15324
15361: POP
15362: POP
// end ;
15363: LD_VAR 0 3
15367: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15368: LD_INT 0
15370: PPUSH
// vc_chassis := chassis ;
15371: LD_ADDR_OWVAR 37
15375: PUSH
15376: LD_VAR 0 1
15380: ST_TO_ADDR
// vc_engine := engine ;
15381: LD_ADDR_OWVAR 39
15385: PUSH
15386: LD_VAR 0 2
15390: ST_TO_ADDR
// vc_control := control ;
15391: LD_ADDR_OWVAR 38
15395: PUSH
15396: LD_VAR 0 3
15400: ST_TO_ADDR
// vc_weapon := weapon ;
15401: LD_ADDR_OWVAR 40
15405: PUSH
15406: LD_VAR 0 4
15410: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15411: LD_ADDR_OWVAR 41
15415: PUSH
15416: LD_VAR 0 5
15420: ST_TO_ADDR
// end ;
15421: LD_VAR 0 6
15425: RET
// export function WantPlant ( unit ) ; var task ; begin
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
// result := false ;
15430: LD_ADDR_VAR 0 2
15434: PUSH
15435: LD_INT 0
15437: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15438: LD_ADDR_VAR 0 3
15442: PUSH
15443: LD_VAR 0 1
15447: PPUSH
15448: CALL_OW 437
15452: ST_TO_ADDR
// if task then
15453: LD_VAR 0 3
15457: IFFALSE 15485
// if task [ 1 ] [ 1 ] = p then
15459: LD_VAR 0 3
15463: PUSH
15464: LD_INT 1
15466: ARRAY
15467: PUSH
15468: LD_INT 1
15470: ARRAY
15471: PUSH
15472: LD_STRING p
15474: EQUAL
15475: IFFALSE 15485
// result := true ;
15477: LD_ADDR_VAR 0 2
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// end ;
15485: LD_VAR 0 2
15489: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15490: LD_INT 0
15492: PPUSH
15493: PPUSH
15494: PPUSH
15495: PPUSH
// if pos < 1 then
15496: LD_VAR 0 2
15500: PUSH
15501: LD_INT 1
15503: LESS
15504: IFFALSE 15508
// exit ;
15506: GO 15811
// if pos = 1 then
15508: LD_VAR 0 2
15512: PUSH
15513: LD_INT 1
15515: EQUAL
15516: IFFALSE 15549
// result := Replace ( arr , pos [ 1 ] , value ) else
15518: LD_ADDR_VAR 0 4
15522: PUSH
15523: LD_VAR 0 1
15527: PPUSH
15528: LD_VAR 0 2
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PPUSH
15537: LD_VAR 0 3
15541: PPUSH
15542: CALL_OW 1
15546: ST_TO_ADDR
15547: GO 15811
// begin tmp := arr ;
15549: LD_ADDR_VAR 0 6
15553: PUSH
15554: LD_VAR 0 1
15558: ST_TO_ADDR
// s_arr := [ tmp ] ;
15559: LD_ADDR_VAR 0 7
15563: PUSH
15564: LD_VAR 0 6
15568: PUSH
15569: EMPTY
15570: LIST
15571: ST_TO_ADDR
// for i = 1 to pos - 1 do
15572: LD_ADDR_VAR 0 5
15576: PUSH
15577: DOUBLE
15578: LD_INT 1
15580: DEC
15581: ST_TO_ADDR
15582: LD_VAR 0 2
15586: PUSH
15587: LD_INT 1
15589: MINUS
15590: PUSH
15591: FOR_TO
15592: IFFALSE 15637
// begin tmp := tmp [ pos [ i ] ] ;
15594: LD_ADDR_VAR 0 6
15598: PUSH
15599: LD_VAR 0 6
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: LD_VAR 0 5
15613: ARRAY
15614: ARRAY
15615: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15616: LD_ADDR_VAR 0 7
15620: PUSH
15621: LD_VAR 0 7
15625: PUSH
15626: LD_VAR 0 6
15630: PUSH
15631: EMPTY
15632: LIST
15633: ADD
15634: ST_TO_ADDR
// end ;
15635: GO 15591
15637: POP
15638: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15639: LD_ADDR_VAR 0 6
15643: PUSH
15644: LD_VAR 0 6
15648: PPUSH
15649: LD_VAR 0 2
15653: PUSH
15654: LD_VAR 0 2
15658: ARRAY
15659: PPUSH
15660: LD_VAR 0 3
15664: PPUSH
15665: CALL_OW 1
15669: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15670: LD_ADDR_VAR 0 7
15674: PUSH
15675: LD_VAR 0 7
15679: PPUSH
15680: LD_VAR 0 7
15684: PPUSH
15685: LD_VAR 0 6
15689: PPUSH
15690: CALL_OW 1
15694: ST_TO_ADDR
// for i = s_arr downto 2 do
15695: LD_ADDR_VAR 0 5
15699: PUSH
15700: DOUBLE
15701: LD_VAR 0 7
15705: INC
15706: ST_TO_ADDR
15707: LD_INT 2
15709: PUSH
15710: FOR_DOWNTO
15711: IFFALSE 15795
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15713: LD_ADDR_VAR 0 6
15717: PUSH
15718: LD_VAR 0 7
15722: PUSH
15723: LD_VAR 0 5
15727: PUSH
15728: LD_INT 1
15730: MINUS
15731: ARRAY
15732: PPUSH
15733: LD_VAR 0 2
15737: PUSH
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 1
15745: MINUS
15746: ARRAY
15747: PPUSH
15748: LD_VAR 0 7
15752: PUSH
15753: LD_VAR 0 5
15757: ARRAY
15758: PPUSH
15759: CALL_OW 1
15763: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15764: LD_ADDR_VAR 0 7
15768: PUSH
15769: LD_VAR 0 7
15773: PPUSH
15774: LD_VAR 0 5
15778: PUSH
15779: LD_INT 1
15781: MINUS
15782: PPUSH
15783: LD_VAR 0 6
15787: PPUSH
15788: CALL_OW 1
15792: ST_TO_ADDR
// end ;
15793: GO 15710
15795: POP
15796: POP
// result := s_arr [ 1 ] ;
15797: LD_ADDR_VAR 0 4
15801: PUSH
15802: LD_VAR 0 7
15806: PUSH
15807: LD_INT 1
15809: ARRAY
15810: ST_TO_ADDR
// end ; end ;
15811: LD_VAR 0 4
15815: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15816: LD_INT 0
15818: PPUSH
15819: PPUSH
// if not list then
15820: LD_VAR 0 1
15824: NOT
15825: IFFALSE 15829
// exit ;
15827: GO 15920
// i := list [ pos1 ] ;
15829: LD_ADDR_VAR 0 5
15833: PUSH
15834: LD_VAR 0 1
15838: PUSH
15839: LD_VAR 0 2
15843: ARRAY
15844: ST_TO_ADDR
// if not i then
15845: LD_VAR 0 5
15849: NOT
15850: IFFALSE 15854
// exit ;
15852: GO 15920
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15854: LD_ADDR_VAR 0 1
15858: PUSH
15859: LD_VAR 0 1
15863: PPUSH
15864: LD_VAR 0 2
15868: PPUSH
15869: LD_VAR 0 1
15873: PUSH
15874: LD_VAR 0 3
15878: ARRAY
15879: PPUSH
15880: CALL_OW 1
15884: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15885: LD_ADDR_VAR 0 1
15889: PUSH
15890: LD_VAR 0 1
15894: PPUSH
15895: LD_VAR 0 3
15899: PPUSH
15900: LD_VAR 0 5
15904: PPUSH
15905: CALL_OW 1
15909: ST_TO_ADDR
// result := list ;
15910: LD_ADDR_VAR 0 4
15914: PUSH
15915: LD_VAR 0 1
15919: ST_TO_ADDR
// end ;
15920: LD_VAR 0 4
15924: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15925: LD_INT 0
15927: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15928: LD_ADDR_VAR 0 5
15932: PUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 250
15942: PPUSH
15943: LD_VAR 0 1
15947: PPUSH
15948: CALL_OW 251
15952: PPUSH
15953: LD_VAR 0 2
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_VAR 0 4
15967: PPUSH
15968: CALL 16350 0 5
15972: ST_TO_ADDR
// end ;
15973: LD_VAR 0 5
15977: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
15982: PPUSH
15983: PPUSH
// if not list or not unit then
15984: LD_VAR 0 2
15988: NOT
15989: IFTRUE 15998
15991: PUSH
15992: LD_VAR 0 1
15996: NOT
15997: OR
15998: IFFALSE 16002
// exit ;
16000: GO 16345
// result := [ ] ;
16002: LD_ADDR_VAR 0 5
16006: PUSH
16007: EMPTY
16008: ST_TO_ADDR
// for i in list do
16009: LD_ADDR_VAR 0 6
16013: PUSH
16014: LD_VAR 0 2
16018: PUSH
16019: FOR_IN
16020: IFFALSE 16238
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16022: LD_ADDR_VAR 0 8
16026: PUSH
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_VAR 0 6
16036: PUSH
16037: LD_INT 1
16039: ARRAY
16040: PPUSH
16041: LD_VAR 0 6
16045: PUSH
16046: LD_INT 2
16048: ARRAY
16049: PPUSH
16050: CALL_OW 297
16054: ST_TO_ADDR
// if not Count ( result ) then
16055: LD_VAR 0 5
16059: PPUSH
16060: CALL 12572 0 1
16064: NOT
16065: IFFALSE 16098
// begin result := Join ( result , [ i , tmp ] ) ;
16067: LD_ADDR_VAR 0 5
16071: PUSH
16072: LD_VAR 0 5
16076: PPUSH
16077: LD_VAR 0 6
16081: PUSH
16082: LD_VAR 0 8
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PPUSH
16091: CALL 48538 0 2
16095: ST_TO_ADDR
// continue ;
16096: GO 16019
// end ; if result [ result ] [ 2 ] <= tmp then
16098: LD_VAR 0 5
16102: PUSH
16103: LD_VAR 0 5
16107: ARRAY
16108: PUSH
16109: LD_INT 2
16111: ARRAY
16112: PUSH
16113: LD_VAR 0 8
16117: LESSEQUAL
16118: IFFALSE 16151
// result := Join ( result , [ i , tmp ] ) else
16120: LD_ADDR_VAR 0 5
16124: PUSH
16125: LD_VAR 0 5
16129: PPUSH
16130: LD_VAR 0 6
16134: PUSH
16135: LD_VAR 0 8
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PPUSH
16144: CALL 48538 0 2
16148: ST_TO_ADDR
16149: GO 16236
// begin for j := 1 to Count ( result ) do
16151: LD_ADDR_VAR 0 7
16155: PUSH
16156: DOUBLE
16157: LD_INT 1
16159: DEC
16160: ST_TO_ADDR
16161: LD_VAR 0 5
16165: PPUSH
16166: CALL 12572 0 1
16170: PUSH
16171: FOR_TO
16172: IFFALSE 16234
// begin if tmp < result [ j ] [ 2 ] then
16174: LD_VAR 0 8
16178: PUSH
16179: LD_VAR 0 5
16183: PUSH
16184: LD_VAR 0 7
16188: ARRAY
16189: PUSH
16190: LD_INT 2
16192: ARRAY
16193: LESS
16194: IFFALSE 16232
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16196: LD_ADDR_VAR 0 5
16200: PUSH
16201: LD_VAR 0 5
16205: PPUSH
16206: LD_VAR 0 7
16210: PPUSH
16211: LD_VAR 0 6
16215: PUSH
16216: LD_VAR 0 8
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PPUSH
16225: CALL_OW 2
16229: ST_TO_ADDR
// break ;
16230: GO 16234
// end ; end ;
16232: GO 16171
16234: POP
16235: POP
// end ; end ;
16236: GO 16019
16238: POP
16239: POP
// if result and not asc then
16240: LD_VAR 0 5
16244: IFFALSE 16253
16246: PUSH
16247: LD_VAR 0 3
16251: NOT
16252: AND
16253: IFFALSE 16270
// result := ReverseArray ( result ) ;
16255: LD_ADDR_VAR 0 5
16259: PUSH
16260: LD_VAR 0 5
16264: PPUSH
16265: CALL 43628 0 1
16269: ST_TO_ADDR
// tmp := [ ] ;
16270: LD_ADDR_VAR 0 8
16274: PUSH
16275: EMPTY
16276: ST_TO_ADDR
// if mode then
16277: LD_VAR 0 4
16281: IFFALSE 16345
// begin for i := 1 to result do
16283: LD_ADDR_VAR 0 6
16287: PUSH
16288: DOUBLE
16289: LD_INT 1
16291: DEC
16292: ST_TO_ADDR
16293: LD_VAR 0 5
16297: PUSH
16298: FOR_TO
16299: IFFALSE 16333
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16301: LD_ADDR_VAR 0 8
16305: PUSH
16306: LD_VAR 0 8
16310: PPUSH
16311: LD_VAR 0 5
16315: PUSH
16316: LD_VAR 0 6
16320: ARRAY
16321: PUSH
16322: LD_INT 1
16324: ARRAY
16325: PPUSH
16326: CALL 48538 0 2
16330: ST_TO_ADDR
16331: GO 16298
16333: POP
16334: POP
// result := tmp ;
16335: LD_ADDR_VAR 0 5
16339: PUSH
16340: LD_VAR 0 8
16344: ST_TO_ADDR
// end ; end ;
16345: LD_VAR 0 5
16349: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16350: LD_INT 0
16352: PPUSH
16353: PPUSH
16354: PPUSH
16355: PPUSH
// if not list then
16356: LD_VAR 0 3
16360: NOT
16361: IFFALSE 16365
// exit ;
16363: GO 16755
// result := [ ] ;
16365: LD_ADDR_VAR 0 6
16369: PUSH
16370: EMPTY
16371: ST_TO_ADDR
// for i in list do
16372: LD_ADDR_VAR 0 7
16376: PUSH
16377: LD_VAR 0 3
16381: PUSH
16382: FOR_IN
16383: IFFALSE 16585
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16385: LD_ADDR_VAR 0 9
16389: PUSH
16390: LD_VAR 0 7
16394: PPUSH
16395: LD_VAR 0 1
16399: PPUSH
16400: LD_VAR 0 2
16404: PPUSH
16405: CALL_OW 297
16409: ST_TO_ADDR
// if not result then
16410: LD_VAR 0 6
16414: NOT
16415: IFFALSE 16441
// result := [ [ i , tmp ] ] else
16417: LD_ADDR_VAR 0 6
16421: PUSH
16422: LD_VAR 0 7
16426: PUSH
16427: LD_VAR 0 9
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: ST_TO_ADDR
16439: GO 16583
// begin if result [ result ] [ 2 ] <= tmp then
16441: LD_VAR 0 6
16445: PUSH
16446: LD_VAR 0 6
16450: ARRAY
16451: PUSH
16452: LD_INT 2
16454: ARRAY
16455: PUSH
16456: LD_VAR 0 9
16460: LESSEQUAL
16461: IFFALSE 16503
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16463: LD_ADDR_VAR 0 6
16467: PUSH
16468: LD_VAR 0 6
16472: PPUSH
16473: LD_VAR 0 6
16477: PUSH
16478: LD_INT 1
16480: PLUS
16481: PPUSH
16482: LD_VAR 0 7
16486: PUSH
16487: LD_VAR 0 9
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PPUSH
16496: CALL_OW 2
16500: ST_TO_ADDR
16501: GO 16583
// for j := 1 to result do
16503: LD_ADDR_VAR 0 8
16507: PUSH
16508: DOUBLE
16509: LD_INT 1
16511: DEC
16512: ST_TO_ADDR
16513: LD_VAR 0 6
16517: PUSH
16518: FOR_TO
16519: IFFALSE 16581
// begin if tmp < result [ j ] [ 2 ] then
16521: LD_VAR 0 9
16525: PUSH
16526: LD_VAR 0 6
16530: PUSH
16531: LD_VAR 0 8
16535: ARRAY
16536: PUSH
16537: LD_INT 2
16539: ARRAY
16540: LESS
16541: IFFALSE 16579
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16543: LD_ADDR_VAR 0 6
16547: PUSH
16548: LD_VAR 0 6
16552: PPUSH
16553: LD_VAR 0 8
16557: PPUSH
16558: LD_VAR 0 7
16562: PUSH
16563: LD_VAR 0 9
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 2
16576: ST_TO_ADDR
// break ;
16577: GO 16581
// end ; end ;
16579: GO 16518
16581: POP
16582: POP
// end ; end ;
16583: GO 16382
16585: POP
16586: POP
// if result and not asc then
16587: LD_VAR 0 6
16591: IFFALSE 16600
16593: PUSH
16594: LD_VAR 0 4
16598: NOT
16599: AND
16600: IFFALSE 16675
// begin tmp := result ;
16602: LD_ADDR_VAR 0 9
16606: PUSH
16607: LD_VAR 0 6
16611: ST_TO_ADDR
// for i = tmp downto 1 do
16612: LD_ADDR_VAR 0 7
16616: PUSH
16617: DOUBLE
16618: LD_VAR 0 9
16622: INC
16623: ST_TO_ADDR
16624: LD_INT 1
16626: PUSH
16627: FOR_DOWNTO
16628: IFFALSE 16673
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16630: LD_ADDR_VAR 0 6
16634: PUSH
16635: LD_VAR 0 6
16639: PPUSH
16640: LD_VAR 0 9
16644: PUSH
16645: LD_VAR 0 7
16649: MINUS
16650: PUSH
16651: LD_INT 1
16653: PLUS
16654: PPUSH
16655: LD_VAR 0 9
16659: PUSH
16660: LD_VAR 0 7
16664: ARRAY
16665: PPUSH
16666: CALL_OW 1
16670: ST_TO_ADDR
16671: GO 16627
16673: POP
16674: POP
// end ; tmp := [ ] ;
16675: LD_ADDR_VAR 0 9
16679: PUSH
16680: EMPTY
16681: ST_TO_ADDR
// if mode then
16682: LD_VAR 0 5
16686: IFFALSE 16755
// begin for i = 1 to result do
16688: LD_ADDR_VAR 0 7
16692: PUSH
16693: DOUBLE
16694: LD_INT 1
16696: DEC
16697: ST_TO_ADDR
16698: LD_VAR 0 6
16702: PUSH
16703: FOR_TO
16704: IFFALSE 16743
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16706: LD_ADDR_VAR 0 9
16710: PUSH
16711: LD_VAR 0 9
16715: PPUSH
16716: LD_VAR 0 7
16720: PPUSH
16721: LD_VAR 0 6
16725: PUSH
16726: LD_VAR 0 7
16730: ARRAY
16731: PUSH
16732: LD_INT 1
16734: ARRAY
16735: PPUSH
16736: CALL_OW 1
16740: ST_TO_ADDR
16741: GO 16703
16743: POP
16744: POP
// result := tmp ;
16745: LD_ADDR_VAR 0 6
16749: PUSH
16750: LD_VAR 0 9
16754: ST_TO_ADDR
// end ; end ;
16755: LD_VAR 0 6
16759: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
16767: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16768: LD_ADDR_VAR 0 5
16772: PUSH
16773: LD_INT 0
16775: PUSH
16776: LD_INT 0
16778: PUSH
16779: LD_INT 0
16781: PUSH
16782: EMPTY
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: ST_TO_ADDR
// if not x or not y then
16790: LD_VAR 0 2
16794: NOT
16795: IFTRUE 16804
16797: PUSH
16798: LD_VAR 0 3
16802: NOT
16803: OR
16804: IFFALSE 16808
// exit ;
16806: GO 18464
// if not range then
16808: LD_VAR 0 4
16812: NOT
16813: IFFALSE 16823
// range := 10 ;
16815: LD_ADDR_VAR 0 4
16819: PUSH
16820: LD_INT 10
16822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16823: LD_ADDR_VAR 0 8
16827: PUSH
16828: LD_INT 81
16830: PUSH
16831: LD_VAR 0 1
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 92
16842: PUSH
16843: LD_VAR 0 2
16847: PUSH
16848: LD_VAR 0 3
16852: PUSH
16853: LD_VAR 0 4
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 3
16866: PUSH
16867: LD_INT 21
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: PPUSH
16886: CALL_OW 69
16890: ST_TO_ADDR
// if not tmp then
16891: LD_VAR 0 8
16895: NOT
16896: IFFALSE 16900
// exit ;
16898: GO 18464
// for i in tmp do
16900: LD_ADDR_VAR 0 6
16904: PUSH
16905: LD_VAR 0 8
16909: PUSH
16910: FOR_IN
16911: IFFALSE 18439
// begin points := [ 0 , 0 , 0 ] ;
16913: LD_ADDR_VAR 0 9
16917: PUSH
16918: LD_INT 0
16920: PUSH
16921: LD_INT 0
16923: PUSH
16924: LD_INT 0
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: ST_TO_ADDR
// bpoints := 1 ;
16932: LD_ADDR_VAR 0 10
16936: PUSH
16937: LD_INT 1
16939: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16940: LD_VAR 0 6
16944: PPUSH
16945: CALL_OW 247
16949: PUSH
16950: LD_INT 1
16952: DOUBLE
16953: EQUAL
16954: IFTRUE 16958
16956: GO 17540
16958: POP
// begin if GetClass ( i ) = 1 then
16959: LD_VAR 0 6
16963: PPUSH
16964: CALL_OW 257
16968: PUSH
16969: LD_INT 1
16971: EQUAL
16972: IFFALSE 16993
// points := [ 10 , 5 , 3 ] ;
16974: LD_ADDR_VAR 0 9
16978: PUSH
16979: LD_INT 10
16981: PUSH
16982: LD_INT 5
16984: PUSH
16985: LD_INT 3
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16993: LD_VAR 0 6
16997: PPUSH
16998: CALL_OW 257
17002: PUSH
17003: LD_INT 2
17005: PUSH
17006: LD_INT 3
17008: PUSH
17009: LD_INT 4
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: IN
17017: IFFALSE 17038
// points := [ 3 , 2 , 1 ] ;
17019: LD_ADDR_VAR 0 9
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: LD_INT 2
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17038: LD_VAR 0 6
17042: PPUSH
17043: CALL_OW 257
17047: PUSH
17048: LD_INT 5
17050: EQUAL
17051: IFFALSE 17072
// points := [ 130 , 5 , 2 ] ;
17053: LD_ADDR_VAR 0 9
17057: PUSH
17058: LD_INT 130
17060: PUSH
17061: LD_INT 5
17063: PUSH
17064: LD_INT 2
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17072: LD_VAR 0 6
17076: PPUSH
17077: CALL_OW 257
17081: PUSH
17082: LD_INT 8
17084: EQUAL
17085: IFFALSE 17106
// points := [ 35 , 35 , 30 ] ;
17087: LD_ADDR_VAR 0 9
17091: PUSH
17092: LD_INT 35
17094: PUSH
17095: LD_INT 35
17097: PUSH
17098: LD_INT 30
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: LIST
17105: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17106: LD_VAR 0 6
17110: PPUSH
17111: CALL_OW 257
17115: PUSH
17116: LD_INT 9
17118: EQUAL
17119: IFFALSE 17140
// points := [ 20 , 55 , 40 ] ;
17121: LD_ADDR_VAR 0 9
17125: PUSH
17126: LD_INT 20
17128: PUSH
17129: LD_INT 55
17131: PUSH
17132: LD_INT 40
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17140: LD_VAR 0 6
17144: PPUSH
17145: CALL_OW 257
17149: PUSH
17150: LD_INT 12
17152: PUSH
17153: LD_INT 16
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: IN
17160: IFFALSE 17181
// points := [ 5 , 3 , 2 ] ;
17162: LD_ADDR_VAR 0 9
17166: PUSH
17167: LD_INT 5
17169: PUSH
17170: LD_INT 3
17172: PUSH
17173: LD_INT 2
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17181: LD_VAR 0 6
17185: PPUSH
17186: CALL_OW 257
17190: PUSH
17191: LD_INT 17
17193: EQUAL
17194: IFFALSE 17215
// points := [ 100 , 50 , 75 ] ;
17196: LD_ADDR_VAR 0 9
17200: PUSH
17201: LD_INT 100
17203: PUSH
17204: LD_INT 50
17206: PUSH
17207: LD_INT 75
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17215: LD_VAR 0 6
17219: PPUSH
17220: CALL_OW 257
17224: PUSH
17225: LD_INT 15
17227: EQUAL
17228: IFFALSE 17249
// points := [ 10 , 5 , 3 ] ;
17230: LD_ADDR_VAR 0 9
17234: PUSH
17235: LD_INT 10
17237: PUSH
17238: LD_INT 5
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: LIST
17248: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17249: LD_VAR 0 6
17253: PPUSH
17254: CALL_OW 257
17258: PUSH
17259: LD_INT 14
17261: EQUAL
17262: IFFALSE 17283
// points := [ 10 , 0 , 0 ] ;
17264: LD_ADDR_VAR 0 9
17268: PUSH
17269: LD_INT 10
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17283: LD_VAR 0 6
17287: PPUSH
17288: CALL_OW 257
17292: PUSH
17293: LD_INT 11
17295: EQUAL
17296: IFFALSE 17317
// points := [ 30 , 10 , 5 ] ;
17298: LD_ADDR_VAR 0 9
17302: PUSH
17303: LD_INT 30
17305: PUSH
17306: LD_INT 10
17308: PUSH
17309: LD_INT 5
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17317: LD_VAR 0 1
17321: PPUSH
17322: LD_INT 5
17324: PPUSH
17325: CALL_OW 321
17329: PUSH
17330: LD_INT 2
17332: EQUAL
17333: IFFALSE 17350
// bpoints := bpoints * 1.8 ;
17335: LD_ADDR_VAR 0 10
17339: PUSH
17340: LD_VAR 0 10
17344: PUSH
17345: LD_REAL  1.80000000000000E+0000
17348: MUL
17349: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17350: LD_VAR 0 6
17354: PPUSH
17355: CALL_OW 257
17359: PUSH
17360: LD_INT 1
17362: PUSH
17363: LD_INT 2
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 4
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: IN
17378: IFFALSE 17398
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: LD_INT 51
17388: PPUSH
17389: CALL_OW 321
17393: PUSH
17394: LD_INT 2
17396: EQUAL
17397: AND
17398: IFFALSE 17415
// bpoints := bpoints * 1.2 ;
17400: LD_ADDR_VAR 0 10
17404: PUSH
17405: LD_VAR 0 10
17409: PUSH
17410: LD_REAL  1.20000000000000E+0000
17413: MUL
17414: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17415: LD_VAR 0 6
17419: PPUSH
17420: CALL_OW 257
17424: PUSH
17425: LD_INT 5
17427: PUSH
17428: LD_INT 7
17430: PUSH
17431: LD_INT 9
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: IN
17439: IFFALSE 17459
17441: PUSH
17442: LD_VAR 0 1
17446: PPUSH
17447: LD_INT 52
17449: PPUSH
17450: CALL_OW 321
17454: PUSH
17455: LD_INT 2
17457: EQUAL
17458: AND
17459: IFFALSE 17476
// bpoints := bpoints * 1.5 ;
17461: LD_ADDR_VAR 0 10
17465: PUSH
17466: LD_VAR 0 10
17470: PUSH
17471: LD_REAL  1.50000000000000E+0000
17474: MUL
17475: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17476: LD_VAR 0 1
17480: PPUSH
17481: LD_INT 66
17483: PPUSH
17484: CALL_OW 321
17488: PUSH
17489: LD_INT 2
17491: EQUAL
17492: IFFALSE 17509
// bpoints := bpoints * 1.1 ;
17494: LD_ADDR_VAR 0 10
17498: PUSH
17499: LD_VAR 0 10
17503: PUSH
17504: LD_REAL  1.10000000000000E+0000
17507: MUL
17508: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17509: LD_ADDR_VAR 0 10
17513: PUSH
17514: LD_VAR 0 10
17518: PUSH
17519: LD_VAR 0 6
17523: PPUSH
17524: LD_INT 1
17526: PPUSH
17527: CALL_OW 259
17531: PUSH
17532: LD_REAL  1.15000000000000E+0000
17535: MUL
17536: MUL
17537: ST_TO_ADDR
// end ; unit_vehicle :
17538: GO 18368
17540: LD_INT 2
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 18356
17548: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17549: LD_VAR 0 6
17553: PPUSH
17554: CALL_OW 264
17558: PUSH
17559: LD_INT 2
17561: PUSH
17562: LD_INT 42
17564: PUSH
17565: LD_INT 24
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: IN
17573: IFFALSE 17594
// points := [ 25 , 5 , 3 ] ;
17575: LD_ADDR_VAR 0 9
17579: PUSH
17580: LD_INT 25
17582: PUSH
17583: LD_INT 5
17585: PUSH
17586: LD_INT 3
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17594: LD_VAR 0 6
17598: PPUSH
17599: CALL_OW 264
17603: PUSH
17604: LD_INT 4
17606: PUSH
17607: LD_INT 43
17609: PUSH
17610: LD_INT 25
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: IN
17618: IFFALSE 17639
// points := [ 40 , 15 , 5 ] ;
17620: LD_ADDR_VAR 0 9
17624: PUSH
17625: LD_INT 40
17627: PUSH
17628: LD_INT 15
17630: PUSH
17631: LD_INT 5
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17639: LD_VAR 0 6
17643: PPUSH
17644: CALL_OW 264
17648: PUSH
17649: LD_INT 3
17651: PUSH
17652: LD_INT 23
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: IN
17659: IFFALSE 17680
// points := [ 7 , 25 , 8 ] ;
17661: LD_ADDR_VAR 0 9
17665: PUSH
17666: LD_INT 7
17668: PUSH
17669: LD_INT 25
17671: PUSH
17672: LD_INT 8
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: LIST
17679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17680: LD_VAR 0 6
17684: PPUSH
17685: CALL_OW 264
17689: PUSH
17690: LD_INT 5
17692: PUSH
17693: LD_INT 27
17695: PUSH
17696: LD_INT 44
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: IN
17704: IFFALSE 17725
// points := [ 14 , 50 , 16 ] ;
17706: LD_ADDR_VAR 0 9
17710: PUSH
17711: LD_INT 14
17713: PUSH
17714: LD_INT 50
17716: PUSH
17717: LD_INT 16
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17725: LD_VAR 0 6
17729: PPUSH
17730: CALL_OW 264
17734: PUSH
17735: LD_INT 6
17737: PUSH
17738: LD_INT 46
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: IN
17745: IFFALSE 17766
// points := [ 32 , 120 , 70 ] ;
17747: LD_ADDR_VAR 0 9
17751: PUSH
17752: LD_INT 32
17754: PUSH
17755: LD_INT 120
17757: PUSH
17758: LD_INT 70
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17766: LD_VAR 0 6
17770: PPUSH
17771: CALL_OW 264
17775: PUSH
17776: LD_INT 7
17778: PUSH
17779: LD_INT 28
17781: PUSH
17782: LD_INT 45
17784: PUSH
17785: LD_INT 92
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: IN
17794: IFFALSE 17815
// points := [ 35 , 20 , 45 ] ;
17796: LD_ADDR_VAR 0 9
17800: PUSH
17801: LD_INT 35
17803: PUSH
17804: LD_INT 20
17806: PUSH
17807: LD_INT 45
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17815: LD_VAR 0 6
17819: PPUSH
17820: CALL_OW 264
17824: PUSH
17825: LD_INT 47
17827: PUSH
17828: EMPTY
17829: LIST
17830: IN
17831: IFFALSE 17852
// points := [ 67 , 45 , 75 ] ;
17833: LD_ADDR_VAR 0 9
17837: PUSH
17838: LD_INT 67
17840: PUSH
17841: LD_INT 45
17843: PUSH
17844: LD_INT 75
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17852: LD_VAR 0 6
17856: PPUSH
17857: CALL_OW 264
17861: PUSH
17862: LD_INT 26
17864: PUSH
17865: EMPTY
17866: LIST
17867: IN
17868: IFFALSE 17889
// points := [ 120 , 30 , 80 ] ;
17870: LD_ADDR_VAR 0 9
17874: PUSH
17875: LD_INT 120
17877: PUSH
17878: LD_INT 30
17880: PUSH
17881: LD_INT 80
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17889: LD_VAR 0 6
17893: PPUSH
17894: CALL_OW 264
17898: PUSH
17899: LD_INT 22
17901: PUSH
17902: EMPTY
17903: LIST
17904: IN
17905: IFFALSE 17926
// points := [ 40 , 1 , 1 ] ;
17907: LD_ADDR_VAR 0 9
17911: PUSH
17912: LD_INT 40
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: LIST
17925: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17926: LD_VAR 0 6
17930: PPUSH
17931: CALL_OW 264
17935: PUSH
17936: LD_INT 29
17938: PUSH
17939: EMPTY
17940: LIST
17941: IN
17942: IFFALSE 17963
// points := [ 70 , 200 , 400 ] ;
17944: LD_ADDR_VAR 0 9
17948: PUSH
17949: LD_INT 70
17951: PUSH
17952: LD_INT 200
17954: PUSH
17955: LD_INT 400
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: LIST
17962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17963: LD_VAR 0 6
17967: PPUSH
17968: CALL_OW 264
17972: PUSH
17973: LD_INT 14
17975: PUSH
17976: LD_INT 53
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: IN
17983: IFFALSE 18004
// points := [ 40 , 10 , 20 ] ;
17985: LD_ADDR_VAR 0 9
17989: PUSH
17990: LD_INT 40
17992: PUSH
17993: LD_INT 10
17995: PUSH
17996: LD_INT 20
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18004: LD_VAR 0 6
18008: PPUSH
18009: CALL_OW 264
18013: PUSH
18014: LD_INT 9
18016: PUSH
18017: EMPTY
18018: LIST
18019: IN
18020: IFFALSE 18041
// points := [ 5 , 70 , 20 ] ;
18022: LD_ADDR_VAR 0 9
18026: PUSH
18027: LD_INT 5
18029: PUSH
18030: LD_INT 70
18032: PUSH
18033: LD_INT 20
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18041: LD_VAR 0 6
18045: PPUSH
18046: CALL_OW 264
18050: PUSH
18051: LD_INT 10
18053: PUSH
18054: EMPTY
18055: LIST
18056: IN
18057: IFFALSE 18078
// points := [ 35 , 110 , 70 ] ;
18059: LD_ADDR_VAR 0 9
18063: PUSH
18064: LD_INT 35
18066: PUSH
18067: LD_INT 110
18069: PUSH
18070: LD_INT 70
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: LIST
18077: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18078: LD_VAR 0 6
18082: PPUSH
18083: CALL_OW 265
18087: PUSH
18088: LD_INT 25
18090: EQUAL
18091: IFFALSE 18112
// points := [ 80 , 65 , 100 ] ;
18093: LD_ADDR_VAR 0 9
18097: PUSH
18098: LD_INT 80
18100: PUSH
18101: LD_INT 65
18103: PUSH
18104: LD_INT 100
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18112: LD_VAR 0 6
18116: PPUSH
18117: CALL_OW 263
18121: PUSH
18122: LD_INT 1
18124: EQUAL
18125: IFFALSE 18160
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18127: LD_ADDR_VAR 0 10
18131: PUSH
18132: LD_VAR 0 10
18136: PUSH
18137: LD_VAR 0 6
18141: PPUSH
18142: CALL_OW 311
18146: PPUSH
18147: LD_INT 3
18149: PPUSH
18150: CALL_OW 259
18154: PUSH
18155: LD_INT 4
18157: MUL
18158: MUL
18159: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18160: LD_VAR 0 6
18164: PPUSH
18165: CALL_OW 263
18169: PUSH
18170: LD_INT 2
18172: EQUAL
18173: IFFALSE 18224
// begin j := IsControledBy ( i ) ;
18175: LD_ADDR_VAR 0 7
18179: PUSH
18180: LD_VAR 0 6
18184: PPUSH
18185: CALL_OW 312
18189: ST_TO_ADDR
// if j then
18190: LD_VAR 0 7
18194: IFFALSE 18224
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18196: LD_ADDR_VAR 0 10
18200: PUSH
18201: LD_VAR 0 10
18205: PUSH
18206: LD_VAR 0 7
18210: PPUSH
18211: LD_INT 3
18213: PPUSH
18214: CALL_OW 259
18218: PUSH
18219: LD_INT 3
18221: MUL
18222: MUL
18223: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18224: LD_VAR 0 6
18228: PPUSH
18229: CALL_OW 264
18233: PUSH
18234: LD_INT 5
18236: PUSH
18237: LD_INT 6
18239: PUSH
18240: LD_INT 46
18242: PUSH
18243: LD_INT 44
18245: PUSH
18246: LD_INT 47
18248: PUSH
18249: LD_INT 45
18251: PUSH
18252: LD_INT 28
18254: PUSH
18255: LD_INT 7
18257: PUSH
18258: LD_INT 27
18260: PUSH
18261: LD_INT 29
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: LIST
18275: IN
18276: IFFALSE 18296
18278: PUSH
18279: LD_VAR 0 1
18283: PPUSH
18284: LD_INT 52
18286: PPUSH
18287: CALL_OW 321
18291: PUSH
18292: LD_INT 2
18294: EQUAL
18295: AND
18296: IFFALSE 18313
// bpoints := bpoints * 1.2 ;
18298: LD_ADDR_VAR 0 10
18302: PUSH
18303: LD_VAR 0 10
18307: PUSH
18308: LD_REAL  1.20000000000000E+0000
18311: MUL
18312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18313: LD_VAR 0 6
18317: PPUSH
18318: CALL_OW 264
18322: PUSH
18323: LD_INT 6
18325: PUSH
18326: LD_INT 46
18328: PUSH
18329: LD_INT 47
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: IN
18337: IFFALSE 18354
// bpoints := bpoints * 1.2 ;
18339: LD_ADDR_VAR 0 10
18343: PUSH
18344: LD_VAR 0 10
18348: PUSH
18349: LD_REAL  1.20000000000000E+0000
18352: MUL
18353: ST_TO_ADDR
// end ; unit_building :
18354: GO 18368
18356: LD_INT 3
18358: DOUBLE
18359: EQUAL
18360: IFTRUE 18364
18362: GO 18367
18364: POP
// ; end ;
18365: GO 18368
18367: POP
// for j = 1 to 3 do
18368: LD_ADDR_VAR 0 7
18372: PUSH
18373: DOUBLE
18374: LD_INT 1
18376: DEC
18377: ST_TO_ADDR
18378: LD_INT 3
18380: PUSH
18381: FOR_TO
18382: IFFALSE 18435
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18384: LD_ADDR_VAR 0 5
18388: PUSH
18389: LD_VAR 0 5
18393: PPUSH
18394: LD_VAR 0 7
18398: PPUSH
18399: LD_VAR 0 5
18403: PUSH
18404: LD_VAR 0 7
18408: ARRAY
18409: PUSH
18410: LD_VAR 0 9
18414: PUSH
18415: LD_VAR 0 7
18419: ARRAY
18420: PUSH
18421: LD_VAR 0 10
18425: MUL
18426: PLUS
18427: PPUSH
18428: CALL_OW 1
18432: ST_TO_ADDR
18433: GO 18381
18435: POP
18436: POP
// end ;
18437: GO 16910
18439: POP
18440: POP
// result := Replace ( result , 4 , tmp ) ;
18441: LD_ADDR_VAR 0 5
18445: PUSH
18446: LD_VAR 0 5
18450: PPUSH
18451: LD_INT 4
18453: PPUSH
18454: LD_VAR 0 8
18458: PPUSH
18459: CALL_OW 1
18463: ST_TO_ADDR
// end ;
18464: LD_VAR 0 5
18468: RET
// export function DangerAtRange ( unit , range ) ; begin
18469: LD_INT 0
18471: PPUSH
// if not unit then
18472: LD_VAR 0 1
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18526
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18481: LD_ADDR_VAR 0 3
18485: PUSH
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 255
18495: PPUSH
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 250
18505: PPUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 251
18515: PPUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL 16760 0 4
18525: ST_TO_ADDR
// end ;
18526: LD_VAR 0 3
18530: RET
// export function DangerInArea ( side , area ) ; begin
18531: LD_INT 0
18533: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 2
18543: PPUSH
18544: LD_INT 81
18546: PUSH
18547: LD_VAR 0 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PPUSH
18556: CALL_OW 70
18560: ST_TO_ADDR
// end ;
18561: LD_VAR 0 3
18565: RET
// export function IsExtension ( b ) ; begin
18566: LD_INT 0
18568: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: LD_VAR 0 1
18578: PUSH
18579: LD_INT 23
18581: PUSH
18582: LD_INT 20
18584: PUSH
18585: LD_INT 22
18587: PUSH
18588: LD_INT 17
18590: PUSH
18591: LD_INT 24
18593: PUSH
18594: LD_INT 21
18596: PUSH
18597: LD_INT 19
18599: PUSH
18600: LD_INT 16
18602: PUSH
18603: LD_INT 25
18605: PUSH
18606: LD_INT 18
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: IN
18621: ST_TO_ADDR
// end ;
18622: LD_VAR 0 2
18626: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18627: LD_INT 0
18629: PPUSH
18630: PPUSH
18631: PPUSH
// result := [ ] ;
18632: LD_ADDR_VAR 0 4
18636: PUSH
18637: EMPTY
18638: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18639: LD_ADDR_VAR 0 5
18643: PUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: LD_INT 21
18651: PUSH
18652: LD_INT 3
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 70
18663: ST_TO_ADDR
// if not tmp then
18664: LD_VAR 0 5
18668: NOT
18669: IFFALSE 18673
// exit ;
18671: GO 18737
// if checkLink then
18673: LD_VAR 0 3
18677: IFFALSE 18727
// begin for i in tmp do
18679: LD_ADDR_VAR 0 6
18683: PUSH
18684: LD_VAR 0 5
18688: PUSH
18689: FOR_IN
18690: IFFALSE 18725
// if GetBase ( i ) <> base then
18692: LD_VAR 0 6
18696: PPUSH
18697: CALL_OW 274
18701: PUSH
18702: LD_VAR 0 1
18706: NONEQUAL
18707: IFFALSE 18723
// ComLinkToBase ( base , i ) ;
18709: LD_VAR 0 1
18713: PPUSH
18714: LD_VAR 0 6
18718: PPUSH
18719: CALL_OW 169
18723: GO 18689
18725: POP
18726: POP
// end ; result := tmp ;
18727: LD_ADDR_VAR 0 4
18731: PUSH
18732: LD_VAR 0 5
18736: ST_TO_ADDR
// end ;
18737: LD_VAR 0 4
18741: RET
// export function ComComplete ( units , b ) ; var i ; begin
18742: LD_INT 0
18744: PPUSH
18745: PPUSH
// if not units then
18746: LD_VAR 0 1
18750: NOT
18751: IFFALSE 18755
// exit ;
18753: GO 18845
// for i in units do
18755: LD_ADDR_VAR 0 4
18759: PUSH
18760: LD_VAR 0 1
18764: PUSH
18765: FOR_IN
18766: IFFALSE 18843
// if BuildingStatus ( b ) = bs_build then
18768: LD_VAR 0 2
18772: PPUSH
18773: CALL_OW 461
18777: PUSH
18778: LD_INT 1
18780: EQUAL
18781: IFFALSE 18841
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18783: LD_VAR 0 4
18787: PPUSH
18788: LD_STRING h
18790: PUSH
18791: LD_VAR 0 2
18795: PPUSH
18796: CALL_OW 250
18800: PUSH
18801: LD_VAR 0 2
18805: PPUSH
18806: CALL_OW 251
18810: PUSH
18811: LD_VAR 0 2
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: PPUSH
18837: CALL_OW 446
18841: GO 18765
18843: POP
18844: POP
// end ;
18845: LD_VAR 0 3
18849: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
18854: PPUSH
18855: PPUSH
18856: PPUSH
18857: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18858: LD_VAR 0 1
18862: NOT
18863: IFTRUE 18880
18865: PUSH
18866: LD_VAR 0 1
18870: PPUSH
18871: CALL_OW 263
18875: PUSH
18876: LD_INT 2
18878: NONEQUAL
18879: OR
18880: IFFALSE 18884
// exit ;
18882: GO 19200
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18884: LD_ADDR_VAR 0 6
18888: PUSH
18889: LD_INT 22
18891: PUSH
18892: LD_VAR 0 1
18896: PPUSH
18897: CALL_OW 255
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: PUSH
18909: LD_INT 30
18911: PUSH
18912: LD_INT 36
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 34
18921: PUSH
18922: LD_INT 31
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: LIST
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PPUSH
18938: CALL_OW 69
18942: ST_TO_ADDR
// if not tmp then
18943: LD_VAR 0 6
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 19200
// result := [ ] ;
18952: LD_ADDR_VAR 0 2
18956: PUSH
18957: EMPTY
18958: ST_TO_ADDR
// for i in tmp do
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_VAR 0 6
18968: PUSH
18969: FOR_IN
18970: IFFALSE 19041
// begin t := UnitsInside ( i ) ;
18972: LD_ADDR_VAR 0 4
18976: PUSH
18977: LD_VAR 0 3
18981: PPUSH
18982: CALL_OW 313
18986: ST_TO_ADDR
// if t then
18987: LD_VAR 0 4
18991: IFFALSE 19039
// for j in t do
18993: LD_ADDR_VAR 0 7
18997: PUSH
18998: LD_VAR 0 4
19002: PUSH
19003: FOR_IN
19004: IFFALSE 19037
// result := Replace ( result , result + 1 , j ) ;
19006: LD_ADDR_VAR 0 2
19010: PUSH
19011: LD_VAR 0 2
19015: PPUSH
19016: LD_VAR 0 2
19020: PUSH
19021: LD_INT 1
19023: PLUS
19024: PPUSH
19025: LD_VAR 0 7
19029: PPUSH
19030: CALL_OW 1
19034: ST_TO_ADDR
19035: GO 19003
19037: POP
19038: POP
// end ;
19039: GO 18969
19041: POP
19042: POP
// if not result then
19043: LD_VAR 0 2
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19200
// mech := result [ 1 ] ;
19052: LD_ADDR_VAR 0 5
19056: PUSH
19057: LD_VAR 0 2
19061: PUSH
19062: LD_INT 1
19064: ARRAY
19065: ST_TO_ADDR
// if result > 1 then
19066: LD_VAR 0 2
19070: PUSH
19071: LD_INT 1
19073: GREATER
19074: IFFALSE 19186
// begin for i = 2 to result do
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: DOUBLE
19082: LD_INT 2
19084: DEC
19085: ST_TO_ADDR
19086: LD_VAR 0 2
19090: PUSH
19091: FOR_TO
19092: IFFALSE 19184
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19094: LD_ADDR_VAR 0 4
19098: PUSH
19099: LD_VAR 0 2
19103: PUSH
19104: LD_VAR 0 3
19108: ARRAY
19109: PPUSH
19110: LD_INT 3
19112: PPUSH
19113: CALL_OW 259
19117: PUSH
19118: LD_VAR 0 2
19122: PUSH
19123: LD_VAR 0 3
19127: ARRAY
19128: PPUSH
19129: CALL_OW 432
19133: MINUS
19134: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19135: LD_VAR 0 4
19139: PUSH
19140: LD_VAR 0 5
19144: PPUSH
19145: LD_INT 3
19147: PPUSH
19148: CALL_OW 259
19152: PUSH
19153: LD_VAR 0 5
19157: PPUSH
19158: CALL_OW 432
19162: MINUS
19163: GREATEREQUAL
19164: IFFALSE 19182
// mech := result [ i ] ;
19166: LD_ADDR_VAR 0 5
19170: PUSH
19171: LD_VAR 0 2
19175: PUSH
19176: LD_VAR 0 3
19180: ARRAY
19181: ST_TO_ADDR
// end ;
19182: GO 19091
19184: POP
19185: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_VAR 0 5
19195: PPUSH
19196: CALL_OW 135
// end ;
19200: LD_VAR 0 2
19204: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19205: LD_INT 0
19207: PPUSH
19208: PPUSH
19209: PPUSH
19210: PPUSH
19211: PPUSH
19212: PPUSH
19213: PPUSH
19214: PPUSH
19215: PPUSH
19216: PPUSH
19217: PPUSH
19218: PPUSH
19219: PPUSH
// result := [ ] ;
19220: LD_ADDR_VAR 0 7
19224: PUSH
19225: EMPTY
19226: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19227: LD_VAR 0 1
19231: PPUSH
19232: CALL_OW 266
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: IN
19247: NOT
19248: IFFALSE 19252
// exit ;
19250: GO 20892
// if name then
19252: LD_VAR 0 3
19256: IFFALSE 19272
// SetBName ( base_dep , name ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 500
// base := GetBase ( base_dep ) ;
19272: LD_ADDR_VAR 0 15
19276: PUSH
19277: LD_VAR 0 1
19281: PPUSH
19282: CALL_OW 274
19286: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19287: LD_ADDR_VAR 0 16
19291: PUSH
19292: LD_VAR 0 1
19296: PPUSH
19297: CALL_OW 255
19301: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19302: LD_ADDR_VAR 0 17
19306: PUSH
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 248
19316: ST_TO_ADDR
// if sources then
19317: LD_VAR 0 5
19321: IFFALSE 19368
// for i = 1 to 3 do
19323: LD_ADDR_VAR 0 8
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: LD_INT 3
19335: PUSH
19336: FOR_TO
19337: IFFALSE 19366
// AddResourceType ( base , i , sources [ i ] ) ;
19339: LD_VAR 0 15
19343: PPUSH
19344: LD_VAR 0 8
19348: PPUSH
19349: LD_VAR 0 5
19353: PUSH
19354: LD_VAR 0 8
19358: ARRAY
19359: PPUSH
19360: CALL_OW 276
19364: GO 19336
19366: POP
19367: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19368: LD_ADDR_VAR 0 18
19372: PUSH
19373: LD_VAR 0 15
19377: PPUSH
19378: LD_VAR 0 2
19382: PPUSH
19383: LD_INT 1
19385: PPUSH
19386: CALL 18627 0 3
19390: ST_TO_ADDR
// InitHc ;
19391: CALL_OW 19
// InitUc ;
19395: CALL_OW 18
// uc_side := side ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_VAR 0 16
19408: ST_TO_ADDR
// uc_nation := nation ;
19409: LD_ADDR_OWVAR 21
19413: PUSH
19414: LD_VAR 0 17
19418: ST_TO_ADDR
// if buildings then
19419: LD_VAR 0 18
19423: IFFALSE 20751
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19425: LD_ADDR_VAR 0 19
19429: PUSH
19430: LD_VAR 0 18
19434: PPUSH
19435: LD_INT 2
19437: PUSH
19438: LD_INT 30
19440: PUSH
19441: LD_INT 29
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 30
19450: PUSH
19451: LD_INT 30
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: LIST
19462: PPUSH
19463: CALL_OW 72
19467: ST_TO_ADDR
// if tmp then
19468: LD_VAR 0 19
19472: IFFALSE 19520
// for i in tmp do
19474: LD_ADDR_VAR 0 8
19478: PUSH
19479: LD_VAR 0 19
19483: PUSH
19484: FOR_IN
19485: IFFALSE 19518
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19487: LD_VAR 0 8
19491: PPUSH
19492: CALL_OW 250
19496: PPUSH
19497: LD_VAR 0 8
19501: PPUSH
19502: CALL_OW 251
19506: PPUSH
19507: LD_VAR 0 16
19511: PPUSH
19512: CALL_OW 441
19516: GO 19484
19518: POP
19519: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19520: LD_VAR 0 18
19524: PPUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 32
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: LD_INT 33
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 72
19557: IFFALSE 19645
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19559: LD_ADDR_VAR 0 8
19563: PUSH
19564: LD_VAR 0 18
19568: PPUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 30
19574: PUSH
19575: LD_INT 32
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 30
19584: PUSH
19585: LD_INT 33
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: PPUSH
19597: CALL_OW 72
19601: PUSH
19602: FOR_IN
19603: IFFALSE 19643
// begin if not GetBWeapon ( i ) then
19605: LD_VAR 0 8
19609: PPUSH
19610: CALL_OW 269
19614: NOT
19615: IFFALSE 19641
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19617: LD_VAR 0 8
19621: PPUSH
19622: LD_VAR 0 8
19626: PPUSH
19627: LD_VAR 0 2
19631: PPUSH
19632: CALL 20897 0 2
19636: PPUSH
19637: CALL_OW 431
// end ;
19641: GO 19602
19643: POP
19644: POP
// end ; for i = 1 to personel do
19645: LD_ADDR_VAR 0 8
19649: PUSH
19650: DOUBLE
19651: LD_INT 1
19653: DEC
19654: ST_TO_ADDR
19655: LD_VAR 0 6
19659: PUSH
19660: FOR_TO
19661: IFFALSE 20731
// begin if i > 4 then
19663: LD_VAR 0 8
19667: PUSH
19668: LD_INT 4
19670: GREATER
19671: IFFALSE 19675
// break ;
19673: GO 20731
// case i of 1 :
19675: LD_VAR 0 8
19679: PUSH
19680: LD_INT 1
19682: DOUBLE
19683: EQUAL
19684: IFTRUE 19688
19686: GO 19768
19688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19689: LD_ADDR_VAR 0 12
19693: PUSH
19694: LD_VAR 0 18
19698: PPUSH
19699: LD_INT 22
19701: PUSH
19702: LD_VAR 0 16
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 58
19713: PUSH
19714: EMPTY
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: LD_INT 30
19722: PUSH
19723: LD_INT 32
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 30
19732: PUSH
19733: LD_INT 4
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 5
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: PPUSH
19761: CALL_OW 72
19765: ST_TO_ADDR
19766: GO 19990
19768: LD_INT 2
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19838
19776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19777: LD_ADDR_VAR 0 12
19781: PUSH
19782: LD_VAR 0 18
19786: PPUSH
19787: LD_INT 22
19789: PUSH
19790: LD_VAR 0 16
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 2
19801: PUSH
19802: LD_INT 30
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 30
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PPUSH
19831: CALL_OW 72
19835: ST_TO_ADDR
19836: GO 19990
19838: LD_INT 3
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19908
19846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19847: LD_ADDR_VAR 0 12
19851: PUSH
19852: LD_VAR 0 18
19856: PPUSH
19857: LD_INT 22
19859: PUSH
19860: LD_VAR 0 16
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: LD_INT 30
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 30
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PPUSH
19901: CALL_OW 72
19905: ST_TO_ADDR
19906: GO 19990
19908: LD_INT 4
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 19989
19916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19917: LD_ADDR_VAR 0 12
19921: PUSH
19922: LD_VAR 0 18
19926: PPUSH
19927: LD_INT 22
19929: PUSH
19930: LD_VAR 0 16
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 2
19941: PUSH
19942: LD_INT 30
19944: PUSH
19945: LD_INT 6
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 30
19954: PUSH
19955: LD_INT 7
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 30
19964: PUSH
19965: LD_INT 8
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PPUSH
19982: CALL_OW 72
19986: ST_TO_ADDR
19987: GO 19990
19989: POP
// if i = 1 then
19990: LD_VAR 0 8
19994: PUSH
19995: LD_INT 1
19997: EQUAL
19998: IFFALSE 20109
// begin tmp := [ ] ;
20000: LD_ADDR_VAR 0 19
20004: PUSH
20005: EMPTY
20006: ST_TO_ADDR
// for j in f do
20007: LD_ADDR_VAR 0 9
20011: PUSH
20012: LD_VAR 0 12
20016: PUSH
20017: FOR_IN
20018: IFFALSE 20091
// if GetBType ( j ) = b_bunker then
20020: LD_VAR 0 9
20024: PPUSH
20025: CALL_OW 266
20029: PUSH
20030: LD_INT 32
20032: EQUAL
20033: IFFALSE 20060
// tmp := Insert ( tmp , 1 , j ) else
20035: LD_ADDR_VAR 0 19
20039: PUSH
20040: LD_VAR 0 19
20044: PPUSH
20045: LD_INT 1
20047: PPUSH
20048: LD_VAR 0 9
20052: PPUSH
20053: CALL_OW 2
20057: ST_TO_ADDR
20058: GO 20089
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20060: LD_ADDR_VAR 0 19
20064: PUSH
20065: LD_VAR 0 19
20069: PPUSH
20070: LD_VAR 0 19
20074: PUSH
20075: LD_INT 1
20077: PLUS
20078: PPUSH
20079: LD_VAR 0 9
20083: PPUSH
20084: CALL_OW 2
20088: ST_TO_ADDR
20089: GO 20017
20091: POP
20092: POP
// if tmp then
20093: LD_VAR 0 19
20097: IFFALSE 20109
// f := tmp ;
20099: LD_ADDR_VAR 0 12
20103: PUSH
20104: LD_VAR 0 19
20108: ST_TO_ADDR
// end ; x := personel [ i ] ;
20109: LD_ADDR_VAR 0 13
20113: PUSH
20114: LD_VAR 0 6
20118: PUSH
20119: LD_VAR 0 8
20123: ARRAY
20124: ST_TO_ADDR
// if x = - 1 then
20125: LD_VAR 0 13
20129: PUSH
20130: LD_INT 1
20132: NEG
20133: EQUAL
20134: IFFALSE 20345
// begin for j in f do
20136: LD_ADDR_VAR 0 9
20140: PUSH
20141: LD_VAR 0 12
20145: PUSH
20146: FOR_IN
20147: IFFALSE 20341
// repeat InitHc ;
20149: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20153: LD_VAR 0 9
20157: PPUSH
20158: CALL_OW 266
20162: PUSH
20163: LD_INT 5
20165: EQUAL
20166: IFFALSE 20236
// begin if UnitsInside ( j ) < 3 then
20168: LD_VAR 0 9
20172: PPUSH
20173: CALL_OW 313
20177: PUSH
20178: LD_INT 3
20180: LESS
20181: IFFALSE 20217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20183: LD_INT 0
20185: PPUSH
20186: LD_INT 5
20188: PUSH
20189: LD_INT 8
20191: PUSH
20192: LD_INT 9
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: LIST
20199: PUSH
20200: LD_VAR 0 17
20204: ARRAY
20205: PPUSH
20206: LD_VAR 0 4
20210: PPUSH
20211: CALL_OW 380
20215: GO 20234
// PrepareHuman ( false , i , skill ) ;
20217: LD_INT 0
20219: PPUSH
20220: LD_VAR 0 8
20224: PPUSH
20225: LD_VAR 0 4
20229: PPUSH
20230: CALL_OW 380
// end else
20234: GO 20253
// PrepareHuman ( false , i , skill ) ;
20236: LD_INT 0
20238: PPUSH
20239: LD_VAR 0 8
20243: PPUSH
20244: LD_VAR 0 4
20248: PPUSH
20249: CALL_OW 380
// un := CreateHuman ;
20253: LD_ADDR_VAR 0 14
20257: PUSH
20258: CALL_OW 44
20262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20263: LD_ADDR_VAR 0 7
20267: PUSH
20268: LD_VAR 0 7
20272: PPUSH
20273: LD_INT 1
20275: PPUSH
20276: LD_VAR 0 14
20280: PPUSH
20281: CALL_OW 2
20285: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20286: LD_VAR 0 14
20290: PPUSH
20291: LD_VAR 0 9
20295: PPUSH
20296: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20300: LD_VAR 0 9
20304: PPUSH
20305: CALL_OW 313
20309: PUSH
20310: LD_INT 6
20312: EQUAL
20313: IFTRUE 20337
20315: PUSH
20316: LD_VAR 0 9
20320: PPUSH
20321: CALL_OW 266
20325: PUSH
20326: LD_INT 32
20328: PUSH
20329: LD_INT 31
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: IN
20336: OR
20337: IFFALSE 20149
20339: GO 20146
20341: POP
20342: POP
// end else
20343: GO 20729
// for j = 1 to x do
20345: LD_ADDR_VAR 0 9
20349: PUSH
20350: DOUBLE
20351: LD_INT 1
20353: DEC
20354: ST_TO_ADDR
20355: LD_VAR 0 13
20359: PUSH
20360: FOR_TO
20361: IFFALSE 20727
// begin InitHc ;
20363: CALL_OW 19
// if not f then
20367: LD_VAR 0 12
20371: NOT
20372: IFFALSE 20461
// begin PrepareHuman ( false , i , skill ) ;
20374: LD_INT 0
20376: PPUSH
20377: LD_VAR 0 8
20381: PPUSH
20382: LD_VAR 0 4
20386: PPUSH
20387: CALL_OW 380
// un := CreateHuman ;
20391: LD_ADDR_VAR 0 14
20395: PUSH
20396: CALL_OW 44
20400: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20401: LD_ADDR_VAR 0 7
20405: PUSH
20406: LD_VAR 0 7
20410: PPUSH
20411: LD_INT 1
20413: PPUSH
20414: LD_VAR 0 14
20418: PPUSH
20419: CALL_OW 2
20423: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20424: LD_VAR 0 14
20428: PPUSH
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 250
20438: PPUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 251
20448: PPUSH
20449: LD_INT 10
20451: PPUSH
20452: LD_INT 0
20454: PPUSH
20455: CALL_OW 50
// continue ;
20459: GO 20360
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20461: LD_VAR 0 12
20465: PUSH
20466: LD_INT 1
20468: ARRAY
20469: PPUSH
20470: CALL_OW 313
20474: IFFALSE 20502
20476: PUSH
20477: LD_VAR 0 12
20481: PUSH
20482: LD_INT 1
20484: ARRAY
20485: PPUSH
20486: CALL_OW 266
20490: PUSH
20491: LD_INT 32
20493: PUSH
20494: LD_INT 31
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: IN
20501: AND
20502: IFTRUE 20523
20504: PUSH
20505: LD_VAR 0 12
20509: PUSH
20510: LD_INT 1
20512: ARRAY
20513: PPUSH
20514: CALL_OW 313
20518: PUSH
20519: LD_INT 6
20521: EQUAL
20522: OR
20523: IFFALSE 20543
// f := Delete ( f , 1 ) ;
20525: LD_ADDR_VAR 0 12
20529: PUSH
20530: LD_VAR 0 12
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: CALL_OW 3
20542: ST_TO_ADDR
// if not f then
20543: LD_VAR 0 12
20547: NOT
20548: IFFALSE 20566
// begin x := x + 2 ;
20550: LD_ADDR_VAR 0 13
20554: PUSH
20555: LD_VAR 0 13
20559: PUSH
20560: LD_INT 2
20562: PLUS
20563: ST_TO_ADDR
// continue ;
20564: GO 20360
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20566: LD_VAR 0 12
20570: PUSH
20571: LD_INT 1
20573: ARRAY
20574: PPUSH
20575: CALL_OW 266
20579: PUSH
20580: LD_INT 5
20582: EQUAL
20583: IFFALSE 20657
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20585: LD_VAR 0 12
20589: PUSH
20590: LD_INT 1
20592: ARRAY
20593: PPUSH
20594: CALL_OW 313
20598: PUSH
20599: LD_INT 3
20601: LESS
20602: IFFALSE 20638
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20604: LD_INT 0
20606: PPUSH
20607: LD_INT 5
20609: PUSH
20610: LD_INT 8
20612: PUSH
20613: LD_INT 9
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: PUSH
20621: LD_VAR 0 17
20625: ARRAY
20626: PPUSH
20627: LD_VAR 0 4
20631: PPUSH
20632: CALL_OW 380
20636: GO 20655
// PrepareHuman ( false , i , skill ) ;
20638: LD_INT 0
20640: PPUSH
20641: LD_VAR 0 8
20645: PPUSH
20646: LD_VAR 0 4
20650: PPUSH
20651: CALL_OW 380
// end else
20655: GO 20674
// PrepareHuman ( false , i , skill ) ;
20657: LD_INT 0
20659: PPUSH
20660: LD_VAR 0 8
20664: PPUSH
20665: LD_VAR 0 4
20669: PPUSH
20670: CALL_OW 380
// un := CreateHuman ;
20674: LD_ADDR_VAR 0 14
20678: PUSH
20679: CALL_OW 44
20683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20684: LD_ADDR_VAR 0 7
20688: PUSH
20689: LD_VAR 0 7
20693: PPUSH
20694: LD_INT 1
20696: PPUSH
20697: LD_VAR 0 14
20701: PPUSH
20702: CALL_OW 2
20706: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20707: LD_VAR 0 14
20711: PPUSH
20712: LD_VAR 0 12
20716: PUSH
20717: LD_INT 1
20719: ARRAY
20720: PPUSH
20721: CALL_OW 52
// end ;
20725: GO 20360
20727: POP
20728: POP
// end ;
20729: GO 19660
20731: POP
20732: POP
// result := result ^ buildings ;
20733: LD_ADDR_VAR 0 7
20737: PUSH
20738: LD_VAR 0 7
20742: PUSH
20743: LD_VAR 0 18
20747: ADD
20748: ST_TO_ADDR
// end else
20749: GO 20892
// begin for i = 1 to personel do
20751: LD_ADDR_VAR 0 8
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_VAR 0 6
20765: PUSH
20766: FOR_TO
20767: IFFALSE 20890
// begin if i > 4 then
20769: LD_VAR 0 8
20773: PUSH
20774: LD_INT 4
20776: GREATER
20777: IFFALSE 20781
// break ;
20779: GO 20890
// x := personel [ i ] ;
20781: LD_ADDR_VAR 0 13
20785: PUSH
20786: LD_VAR 0 6
20790: PUSH
20791: LD_VAR 0 8
20795: ARRAY
20796: ST_TO_ADDR
// if x = - 1 then
20797: LD_VAR 0 13
20801: PUSH
20802: LD_INT 1
20804: NEG
20805: EQUAL
20806: IFFALSE 20810
// continue ;
20808: GO 20766
// PrepareHuman ( false , i , skill ) ;
20810: LD_INT 0
20812: PPUSH
20813: LD_VAR 0 8
20817: PPUSH
20818: LD_VAR 0 4
20822: PPUSH
20823: CALL_OW 380
// un := CreateHuman ;
20827: LD_ADDR_VAR 0 14
20831: PUSH
20832: CALL_OW 44
20836: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20837: LD_VAR 0 14
20841: PPUSH
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 250
20851: PPUSH
20852: LD_VAR 0 1
20856: PPUSH
20857: CALL_OW 251
20861: PPUSH
20862: LD_INT 10
20864: PPUSH
20865: LD_INT 0
20867: PPUSH
20868: CALL_OW 50
// result := result ^ un ;
20872: LD_ADDR_VAR 0 7
20876: PUSH
20877: LD_VAR 0 7
20881: PUSH
20882: LD_VAR 0 14
20886: ADD
20887: ST_TO_ADDR
// end ;
20888: GO 20766
20890: POP
20891: POP
// end ; end ;
20892: LD_VAR 0 7
20896: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20897: LD_INT 0
20899: PPUSH
20900: PPUSH
20901: PPUSH
20902: PPUSH
20903: PPUSH
20904: PPUSH
20905: PPUSH
20906: PPUSH
20907: PPUSH
20908: PPUSH
20909: PPUSH
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
// result := false ;
20915: LD_ADDR_VAR 0 3
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20923: LD_VAR 0 1
20927: NOT
20928: IFTRUE 20953
20930: PUSH
20931: LD_VAR 0 1
20935: PPUSH
20936: CALL_OW 266
20940: PUSH
20941: LD_INT 32
20943: PUSH
20944: LD_INT 33
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: IN
20951: NOT
20952: OR
20953: IFFALSE 20957
// exit ;
20955: GO 22092
// nat := GetNation ( tower ) ;
20957: LD_ADDR_VAR 0 12
20961: PUSH
20962: LD_VAR 0 1
20966: PPUSH
20967: CALL_OW 248
20971: ST_TO_ADDR
// side := GetSide ( tower ) ;
20972: LD_ADDR_VAR 0 16
20976: PUSH
20977: LD_VAR 0 1
20981: PPUSH
20982: CALL_OW 255
20986: ST_TO_ADDR
// x := GetX ( tower ) ;
20987: LD_ADDR_VAR 0 10
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 250
21001: ST_TO_ADDR
// y := GetY ( tower ) ;
21002: LD_ADDR_VAR 0 11
21006: PUSH
21007: LD_VAR 0 1
21011: PPUSH
21012: CALL_OW 251
21016: ST_TO_ADDR
// if not x or not y then
21017: LD_VAR 0 10
21021: NOT
21022: IFTRUE 21031
21024: PUSH
21025: LD_VAR 0 11
21029: NOT
21030: OR
21031: IFFALSE 21035
// exit ;
21033: GO 22092
// weapon := 0 ;
21035: LD_ADDR_VAR 0 18
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// fac_list := [ ] ;
21043: LD_ADDR_VAR 0 17
21047: PUSH
21048: EMPTY
21049: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21050: LD_ADDR_VAR 0 6
21054: PUSH
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 274
21064: PPUSH
21065: LD_VAR 0 2
21069: PPUSH
21070: LD_INT 0
21072: PPUSH
21073: CALL 18627 0 3
21077: PPUSH
21078: LD_INT 30
21080: PUSH
21081: LD_INT 3
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 72
21092: ST_TO_ADDR
// if not factories then
21093: LD_VAR 0 6
21097: NOT
21098: IFFALSE 21102
// exit ;
21100: GO 22092
// for i in factories do
21102: LD_ADDR_VAR 0 8
21106: PUSH
21107: LD_VAR 0 6
21111: PUSH
21112: FOR_IN
21113: IFFALSE 21138
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21115: LD_ADDR_VAR 0 17
21119: PUSH
21120: LD_VAR 0 17
21124: PUSH
21125: LD_VAR 0 8
21129: PPUSH
21130: CALL_OW 478
21134: UNION
21135: ST_TO_ADDR
21136: GO 21112
21138: POP
21139: POP
// if not fac_list then
21140: LD_VAR 0 17
21144: NOT
21145: IFFALSE 21149
// exit ;
21147: GO 22092
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21149: LD_ADDR_VAR 0 5
21153: PUSH
21154: LD_INT 4
21156: PUSH
21157: LD_INT 5
21159: PUSH
21160: LD_INT 9
21162: PUSH
21163: LD_INT 10
21165: PUSH
21166: LD_INT 6
21168: PUSH
21169: LD_INT 7
21171: PUSH
21172: LD_INT 11
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 27
21186: PUSH
21187: LD_INT 28
21189: PUSH
21190: LD_INT 26
21192: PUSH
21193: LD_INT 30
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 43
21204: PUSH
21205: LD_INT 44
21207: PUSH
21208: LD_INT 46
21210: PUSH
21211: LD_INT 45
21213: PUSH
21214: LD_INT 47
21216: PUSH
21217: LD_INT 49
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_VAR 0 12
21237: ARRAY
21238: ST_TO_ADDR
// list := list isect fac_list ;
21239: LD_ADDR_VAR 0 5
21243: PUSH
21244: LD_VAR 0 5
21248: PUSH
21249: LD_VAR 0 17
21253: ISECT
21254: ST_TO_ADDR
// if not list then
21255: LD_VAR 0 5
21259: NOT
21260: IFFALSE 21264
// exit ;
21262: GO 22092
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21264: LD_VAR 0 12
21268: PUSH
21269: LD_INT 3
21271: EQUAL
21272: IFFALSE 21284
21274: PUSH
21275: LD_INT 49
21277: PUSH
21278: LD_VAR 0 5
21282: IN
21283: AND
21284: IFFALSE 21304
21286: PUSH
21287: LD_INT 31
21289: PPUSH
21290: LD_VAR 0 16
21294: PPUSH
21295: CALL_OW 321
21299: PUSH
21300: LD_INT 2
21302: EQUAL
21303: AND
21304: IFFALSE 21364
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21306: LD_INT 22
21308: PUSH
21309: LD_VAR 0 16
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 35
21320: PUSH
21321: LD_INT 49
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 91
21330: PUSH
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 10
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: NOT
21354: IFFALSE 21364
// weapon := ru_time_lapser ;
21356: LD_ADDR_VAR 0 18
21360: PUSH
21361: LD_INT 49
21363: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21364: LD_VAR 0 12
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: IN
21379: IFFALSE 21403
21381: PUSH
21382: LD_INT 11
21384: PUSH
21385: LD_VAR 0 5
21389: IN
21390: IFTRUE 21402
21392: PUSH
21393: LD_INT 30
21395: PUSH
21396: LD_VAR 0 5
21400: IN
21401: OR
21402: AND
21403: IFFALSE 21423
21405: PUSH
21406: LD_INT 6
21408: PPUSH
21409: LD_VAR 0 16
21413: PPUSH
21414: CALL_OW 321
21418: PUSH
21419: LD_INT 2
21421: EQUAL
21422: AND
21423: IFFALSE 21590
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21425: LD_INT 22
21427: PUSH
21428: LD_VAR 0 16
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: LD_INT 35
21442: PUSH
21443: LD_INT 11
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 35
21452: PUSH
21453: LD_INT 30
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 91
21467: PUSH
21468: LD_VAR 0 1
21472: PUSH
21473: LD_INT 18
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 69
21490: NOT
21491: IFFALSE 21567
21493: PUSH
21494: LD_INT 22
21496: PUSH
21497: LD_VAR 0 16
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 30
21511: PUSH
21512: LD_INT 32
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 30
21521: PUSH
21522: LD_INT 33
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 91
21536: PUSH
21537: LD_VAR 0 1
21541: PUSH
21542: LD_INT 12
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: LIST
21554: PUSH
21555: EMPTY
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: PUSH
21563: LD_INT 2
21565: GREATER
21566: AND
21567: IFFALSE 21590
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21569: LD_ADDR_VAR 0 18
21573: PUSH
21574: LD_INT 11
21576: PUSH
21577: LD_INT 30
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_VAR 0 12
21588: ARRAY
21589: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21590: LD_VAR 0 18
21594: NOT
21595: IFFALSE 21615
21597: PUSH
21598: LD_INT 40
21600: PPUSH
21601: LD_VAR 0 16
21605: PPUSH
21606: CALL_OW 321
21610: PUSH
21611: LD_INT 2
21613: EQUAL
21614: AND
21615: IFFALSE 21651
21617: PUSH
21618: LD_INT 7
21620: PUSH
21621: LD_VAR 0 5
21625: IN
21626: IFTRUE 21638
21628: PUSH
21629: LD_INT 28
21631: PUSH
21632: LD_VAR 0 5
21636: IN
21637: OR
21638: IFTRUE 21650
21640: PUSH
21641: LD_INT 45
21643: PUSH
21644: LD_VAR 0 5
21648: IN
21649: OR
21650: AND
21651: IFFALSE 21905
// begin hex := GetHexInfo ( x , y ) ;
21653: LD_ADDR_VAR 0 4
21657: PUSH
21658: LD_VAR 0 10
21662: PPUSH
21663: LD_VAR 0 11
21667: PPUSH
21668: CALL_OW 546
21672: ST_TO_ADDR
// if hex [ 1 ] then
21673: LD_VAR 0 4
21677: PUSH
21678: LD_INT 1
21680: ARRAY
21681: IFFALSE 21685
// exit ;
21683: GO 22092
// height := hex [ 2 ] ;
21685: LD_ADDR_VAR 0 15
21689: PUSH
21690: LD_VAR 0 4
21694: PUSH
21695: LD_INT 2
21697: ARRAY
21698: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21699: LD_ADDR_VAR 0 14
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: LD_INT 2
21709: PUSH
21710: LD_INT 3
21712: PUSH
21713: LD_INT 5
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: ST_TO_ADDR
// for i in tmp do
21722: LD_ADDR_VAR 0 8
21726: PUSH
21727: LD_VAR 0 14
21731: PUSH
21732: FOR_IN
21733: IFFALSE 21903
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21735: LD_ADDR_VAR 0 9
21739: PUSH
21740: LD_VAR 0 10
21744: PPUSH
21745: LD_VAR 0 8
21749: PPUSH
21750: LD_INT 5
21752: PPUSH
21753: CALL_OW 272
21757: PUSH
21758: LD_VAR 0 11
21762: PPUSH
21763: LD_VAR 0 8
21767: PPUSH
21768: LD_INT 5
21770: PPUSH
21771: CALL_OW 273
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21780: LD_VAR 0 9
21784: PUSH
21785: LD_INT 1
21787: ARRAY
21788: PPUSH
21789: LD_VAR 0 9
21793: PUSH
21794: LD_INT 2
21796: ARRAY
21797: PPUSH
21798: CALL_OW 488
21802: IFFALSE 21901
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: LD_VAR 0 9
21813: PUSH
21814: LD_INT 1
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 9
21822: PUSH
21823: LD_INT 2
21825: ARRAY
21826: PPUSH
21827: CALL_OW 546
21831: ST_TO_ADDR
// if hex [ 1 ] then
21832: LD_VAR 0 4
21836: PUSH
21837: LD_INT 1
21839: ARRAY
21840: IFFALSE 21844
// continue ;
21842: GO 21732
// h := hex [ 2 ] ;
21844: LD_ADDR_VAR 0 13
21848: PUSH
21849: LD_VAR 0 4
21853: PUSH
21854: LD_INT 2
21856: ARRAY
21857: ST_TO_ADDR
// if h + 7 < height then
21858: LD_VAR 0 13
21862: PUSH
21863: LD_INT 7
21865: PLUS
21866: PUSH
21867: LD_VAR 0 15
21871: LESS
21872: IFFALSE 21901
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21874: LD_ADDR_VAR 0 18
21878: PUSH
21879: LD_INT 7
21881: PUSH
21882: LD_INT 28
21884: PUSH
21885: LD_INT 45
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: PUSH
21893: LD_VAR 0 12
21897: ARRAY
21898: ST_TO_ADDR
// break ;
21899: GO 21903
// end ; end ; end ;
21901: GO 21732
21903: POP
21904: POP
// end ; if not weapon then
21905: LD_VAR 0 18
21909: NOT
21910: IFFALSE 21970
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21912: LD_ADDR_VAR 0 5
21916: PUSH
21917: LD_VAR 0 5
21921: PUSH
21922: LD_INT 11
21924: PUSH
21925: LD_INT 30
21927: PUSH
21928: LD_INT 49
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: DIFF
21936: ST_TO_ADDR
// if not list then
21937: LD_VAR 0 5
21941: NOT
21942: IFFALSE 21946
// exit ;
21944: GO 22092
// weapon := list [ rand ( 1 , list ) ] ;
21946: LD_ADDR_VAR 0 18
21950: PUSH
21951: LD_VAR 0 5
21955: PUSH
21956: LD_INT 1
21958: PPUSH
21959: LD_VAR 0 5
21963: PPUSH
21964: CALL_OW 12
21968: ARRAY
21969: ST_TO_ADDR
// end ; if weapon then
21970: LD_VAR 0 18
21974: IFFALSE 22092
// begin tmp := CostOfWeapon ( weapon ) ;
21976: LD_ADDR_VAR 0 14
21980: PUSH
21981: LD_VAR 0 18
21985: PPUSH
21986: CALL_OW 451
21990: ST_TO_ADDR
// j := GetBase ( tower ) ;
21991: LD_ADDR_VAR 0 9
21995: PUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL_OW 274
22005: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22006: LD_VAR 0 9
22010: PPUSH
22011: LD_INT 1
22013: PPUSH
22014: CALL_OW 275
22018: PUSH
22019: LD_VAR 0 14
22023: PUSH
22024: LD_INT 1
22026: ARRAY
22027: GREATEREQUAL
22028: IFFALSE 22054
22030: PUSH
22031: LD_VAR 0 9
22035: PPUSH
22036: LD_INT 2
22038: PPUSH
22039: CALL_OW 275
22043: PUSH
22044: LD_VAR 0 14
22048: PUSH
22049: LD_INT 2
22051: ARRAY
22052: GREATEREQUAL
22053: AND
22054: IFFALSE 22080
22056: PUSH
22057: LD_VAR 0 9
22061: PPUSH
22062: LD_INT 3
22064: PPUSH
22065: CALL_OW 275
22069: PUSH
22070: LD_VAR 0 14
22074: PUSH
22075: LD_INT 3
22077: ARRAY
22078: GREATEREQUAL
22079: AND
22080: IFFALSE 22092
// result := weapon ;
22082: LD_ADDR_VAR 0 3
22086: PUSH
22087: LD_VAR 0 18
22091: ST_TO_ADDR
// end ; end ;
22092: LD_VAR 0 3
22096: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22097: LD_INT 0
22099: PPUSH
22100: PPUSH
// result := true ;
22101: LD_ADDR_VAR 0 3
22105: PUSH
22106: LD_INT 1
22108: ST_TO_ADDR
// if array1 = array2 then
22109: LD_VAR 0 1
22113: PUSH
22114: LD_VAR 0 2
22118: EQUAL
22119: IFFALSE 22179
// begin for i = 1 to array1 do
22121: LD_ADDR_VAR 0 4
22125: PUSH
22126: DOUBLE
22127: LD_INT 1
22129: DEC
22130: ST_TO_ADDR
22131: LD_VAR 0 1
22135: PUSH
22136: FOR_TO
22137: IFFALSE 22175
// if array1 [ i ] <> array2 [ i ] then
22139: LD_VAR 0 1
22143: PUSH
22144: LD_VAR 0 4
22148: ARRAY
22149: PUSH
22150: LD_VAR 0 2
22154: PUSH
22155: LD_VAR 0 4
22159: ARRAY
22160: NONEQUAL
22161: IFFALSE 22173
// begin result := false ;
22163: LD_ADDR_VAR 0 3
22167: PUSH
22168: LD_INT 0
22170: ST_TO_ADDR
// break ;
22171: GO 22175
// end ;
22173: GO 22136
22175: POP
22176: POP
// end else
22177: GO 22187
// result := false ;
22179: LD_ADDR_VAR 0 3
22183: PUSH
22184: LD_INT 0
22186: ST_TO_ADDR
// end ;
22187: LD_VAR 0 3
22191: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22192: LD_INT 0
22194: PPUSH
22195: PPUSH
// if not array1 or not array2 then
22196: LD_VAR 0 1
22200: NOT
22201: IFTRUE 22210
22203: PUSH
22204: LD_VAR 0 2
22208: NOT
22209: OR
22210: IFFALSE 22214
// exit ;
22212: GO 22278
// result := true ;
22214: LD_ADDR_VAR 0 3
22218: PUSH
22219: LD_INT 1
22221: ST_TO_ADDR
// for i = 1 to array1 do
22222: LD_ADDR_VAR 0 4
22226: PUSH
22227: DOUBLE
22228: LD_INT 1
22230: DEC
22231: ST_TO_ADDR
22232: LD_VAR 0 1
22236: PUSH
22237: FOR_TO
22238: IFFALSE 22276
// if array1 [ i ] <> array2 [ i ] then
22240: LD_VAR 0 1
22244: PUSH
22245: LD_VAR 0 4
22249: ARRAY
22250: PUSH
22251: LD_VAR 0 2
22255: PUSH
22256: LD_VAR 0 4
22260: ARRAY
22261: NONEQUAL
22262: IFFALSE 22274
// begin result := false ;
22264: LD_ADDR_VAR 0 3
22268: PUSH
22269: LD_INT 0
22271: ST_TO_ADDR
// break ;
22272: GO 22276
// end ;
22274: GO 22237
22276: POP
22277: POP
// end ;
22278: LD_VAR 0 3
22282: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22283: LD_INT 0
22285: PPUSH
22286: PPUSH
22287: PPUSH
// pom := GetBase ( fac ) ;
22288: LD_ADDR_VAR 0 5
22292: PUSH
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 274
22302: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22303: LD_ADDR_VAR 0 4
22307: PUSH
22308: LD_VAR 0 2
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: LD_VAR 0 2
22321: PUSH
22322: LD_INT 2
22324: ARRAY
22325: PPUSH
22326: LD_VAR 0 2
22330: PUSH
22331: LD_INT 3
22333: ARRAY
22334: PPUSH
22335: LD_VAR 0 2
22339: PUSH
22340: LD_INT 4
22342: ARRAY
22343: PPUSH
22344: CALL_OW 449
22348: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22349: LD_ADDR_VAR 0 3
22353: PUSH
22354: LD_VAR 0 5
22358: PPUSH
22359: LD_INT 1
22361: PPUSH
22362: CALL_OW 275
22366: PUSH
22367: LD_VAR 0 4
22371: PUSH
22372: LD_INT 1
22374: ARRAY
22375: GREATEREQUAL
22376: IFFALSE 22402
22378: PUSH
22379: LD_VAR 0 5
22383: PPUSH
22384: LD_INT 2
22386: PPUSH
22387: CALL_OW 275
22391: PUSH
22392: LD_VAR 0 4
22396: PUSH
22397: LD_INT 2
22399: ARRAY
22400: GREATEREQUAL
22401: AND
22402: IFFALSE 22428
22404: PUSH
22405: LD_VAR 0 5
22409: PPUSH
22410: LD_INT 3
22412: PPUSH
22413: CALL_OW 275
22417: PUSH
22418: LD_VAR 0 4
22422: PUSH
22423: LD_INT 3
22425: ARRAY
22426: GREATEREQUAL
22427: AND
22428: ST_TO_ADDR
// end ;
22429: LD_VAR 0 3
22433: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22434: LD_INT 0
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
// pom := GetBase ( building ) ;
22440: LD_ADDR_VAR 0 3
22444: PUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: CALL_OW 274
22454: ST_TO_ADDR
// if not pom then
22455: LD_VAR 0 3
22459: NOT
22460: IFFALSE 22464
// exit ;
22462: GO 22638
// btype := GetBType ( building ) ;
22464: LD_ADDR_VAR 0 5
22468: PUSH
22469: LD_VAR 0 1
22473: PPUSH
22474: CALL_OW 266
22478: ST_TO_ADDR
// if btype = b_armoury then
22479: LD_VAR 0 5
22483: PUSH
22484: LD_INT 4
22486: EQUAL
22487: IFFALSE 22497
// btype := b_barracks ;
22489: LD_ADDR_VAR 0 5
22493: PUSH
22494: LD_INT 5
22496: ST_TO_ADDR
// if btype = b_depot then
22497: LD_VAR 0 5
22501: PUSH
22502: LD_INT 0
22504: EQUAL
22505: IFFALSE 22515
// btype := b_warehouse ;
22507: LD_ADDR_VAR 0 5
22511: PUSH
22512: LD_INT 1
22514: ST_TO_ADDR
// if btype = b_workshop then
22515: LD_VAR 0 5
22519: PUSH
22520: LD_INT 2
22522: EQUAL
22523: IFFALSE 22533
// btype := b_factory ;
22525: LD_ADDR_VAR 0 5
22529: PUSH
22530: LD_INT 3
22532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22533: LD_ADDR_VAR 0 4
22537: PUSH
22538: LD_VAR 0 5
22542: PPUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: CALL_OW 248
22552: PPUSH
22553: CALL_OW 450
22557: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22558: LD_ADDR_VAR 0 2
22562: PUSH
22563: LD_VAR 0 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL_OW 275
22575: PUSH
22576: LD_VAR 0 4
22580: PUSH
22581: LD_INT 1
22583: ARRAY
22584: GREATEREQUAL
22585: IFFALSE 22611
22587: PUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 2
22595: PPUSH
22596: CALL_OW 275
22600: PUSH
22601: LD_VAR 0 4
22605: PUSH
22606: LD_INT 2
22608: ARRAY
22609: GREATEREQUAL
22610: AND
22611: IFFALSE 22637
22613: PUSH
22614: LD_VAR 0 3
22618: PPUSH
22619: LD_INT 3
22621: PPUSH
22622: CALL_OW 275
22626: PUSH
22627: LD_VAR 0 4
22631: PUSH
22632: LD_INT 3
22634: ARRAY
22635: GREATEREQUAL
22636: AND
22637: ST_TO_ADDR
// end ;
22638: LD_VAR 0 2
22642: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22643: LD_INT 0
22645: PPUSH
22646: PPUSH
22647: PPUSH
// pom := GetBase ( building ) ;
22648: LD_ADDR_VAR 0 4
22652: PUSH
22653: LD_VAR 0 1
22657: PPUSH
22658: CALL_OW 274
22662: ST_TO_ADDR
// if not pom then
22663: LD_VAR 0 4
22667: NOT
22668: IFFALSE 22672
// exit ;
22670: GO 22777
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22672: LD_ADDR_VAR 0 5
22676: PUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_VAR 0 1
22686: PPUSH
22687: CALL_OW 248
22691: PPUSH
22692: CALL_OW 450
22696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22697: LD_ADDR_VAR 0 3
22701: PUSH
22702: LD_VAR 0 4
22706: PPUSH
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 275
22714: PUSH
22715: LD_VAR 0 5
22719: PUSH
22720: LD_INT 1
22722: ARRAY
22723: GREATEREQUAL
22724: IFFALSE 22750
22726: PUSH
22727: LD_VAR 0 4
22731: PPUSH
22732: LD_INT 2
22734: PPUSH
22735: CALL_OW 275
22739: PUSH
22740: LD_VAR 0 5
22744: PUSH
22745: LD_INT 2
22747: ARRAY
22748: GREATEREQUAL
22749: AND
22750: IFFALSE 22776
22752: PUSH
22753: LD_VAR 0 4
22757: PPUSH
22758: LD_INT 3
22760: PPUSH
22761: CALL_OW 275
22765: PUSH
22766: LD_VAR 0 5
22770: PUSH
22771: LD_INT 3
22773: ARRAY
22774: GREATEREQUAL
22775: AND
22776: ST_TO_ADDR
// end ;
22777: LD_VAR 0 3
22781: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
22793: PPUSH
22794: PPUSH
// result := false ;
22795: LD_ADDR_VAR 0 8
22799: PUSH
22800: LD_INT 0
22802: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22803: LD_VAR 0 5
22807: NOT
22808: IFTRUE 22817
22810: PUSH
22811: LD_VAR 0 1
22815: NOT
22816: OR
22817: IFTRUE 22826
22819: PUSH
22820: LD_VAR 0 2
22824: NOT
22825: OR
22826: IFTRUE 22835
22828: PUSH
22829: LD_VAR 0 3
22833: NOT
22834: OR
22835: IFFALSE 22839
// exit ;
22837: GO 23665
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22839: LD_ADDR_VAR 0 14
22843: PUSH
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_VAR 0 2
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: LD_VAR 0 4
22863: PPUSH
22864: LD_VAR 0 5
22868: PUSH
22869: LD_INT 1
22871: ARRAY
22872: PPUSH
22873: CALL_OW 248
22877: PPUSH
22878: LD_INT 0
22880: PPUSH
22881: CALL 24946 0 6
22885: ST_TO_ADDR
// if not hexes then
22886: LD_VAR 0 14
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 23665
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22895: LD_ADDR_VAR 0 17
22899: PUSH
22900: LD_VAR 0 5
22904: PPUSH
22905: LD_INT 22
22907: PUSH
22908: LD_VAR 0 13
22912: PPUSH
22913: CALL_OW 255
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: PUSH
22925: LD_INT 30
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_INT 1
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 72
22958: ST_TO_ADDR
// for i = 1 to hexes do
22959: LD_ADDR_VAR 0 9
22963: PUSH
22964: DOUBLE
22965: LD_INT 1
22967: DEC
22968: ST_TO_ADDR
22969: LD_VAR 0 14
22973: PUSH
22974: FOR_TO
22975: IFFALSE 23663
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22977: LD_ADDR_VAR 0 13
22981: PUSH
22982: LD_VAR 0 14
22986: PUSH
22987: LD_VAR 0 9
22991: ARRAY
22992: PUSH
22993: LD_INT 1
22995: ARRAY
22996: PPUSH
22997: LD_VAR 0 14
23001: PUSH
23002: LD_VAR 0 9
23006: ARRAY
23007: PUSH
23008: LD_INT 2
23010: ARRAY
23011: PPUSH
23012: CALL_OW 428
23016: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23017: LD_VAR 0 14
23021: PUSH
23022: LD_VAR 0 9
23026: ARRAY
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: LD_VAR 0 14
23036: PUSH
23037: LD_VAR 0 9
23041: ARRAY
23042: PUSH
23043: LD_INT 2
23045: ARRAY
23046: PPUSH
23047: CALL_OW 351
23051: IFTRUE 23090
23053: PUSH
23054: LD_VAR 0 14
23058: PUSH
23059: LD_VAR 0 9
23063: ARRAY
23064: PUSH
23065: LD_INT 1
23067: ARRAY
23068: PPUSH
23069: LD_VAR 0 14
23073: PUSH
23074: LD_VAR 0 9
23078: ARRAY
23079: PUSH
23080: LD_INT 2
23082: ARRAY
23083: PPUSH
23084: CALL_OW 488
23088: NOT
23089: OR
23090: IFTRUE 23107
23092: PUSH
23093: LD_VAR 0 13
23097: PPUSH
23098: CALL_OW 247
23102: PUSH
23103: LD_INT 3
23105: EQUAL
23106: OR
23107: IFFALSE 23113
// exit ;
23109: POP
23110: POP
23111: GO 23665
// if not tmp then
23113: LD_VAR 0 13
23117: NOT
23118: IFFALSE 23122
// continue ;
23120: GO 22974
// result := true ;
23122: LD_ADDR_VAR 0 8
23126: PUSH
23127: LD_INT 1
23129: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23130: LD_VAR 0 6
23134: IFFALSE 23151
23136: PUSH
23137: LD_VAR 0 13
23141: PPUSH
23142: CALL_OW 247
23146: PUSH
23147: LD_INT 2
23149: EQUAL
23150: AND
23151: IFFALSE 23168
23153: PUSH
23154: LD_VAR 0 13
23158: PPUSH
23159: CALL_OW 263
23163: PUSH
23164: LD_INT 1
23166: EQUAL
23167: AND
23168: IFFALSE 23332
// begin if IsDrivenBy ( tmp ) then
23170: LD_VAR 0 13
23174: PPUSH
23175: CALL_OW 311
23179: IFFALSE 23183
// continue ;
23181: GO 22974
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23183: LD_VAR 0 6
23187: PPUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 60
23193: PUSH
23194: EMPTY
23195: LIST
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 55
23206: PUSH
23207: EMPTY
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 72
23222: IFFALSE 23330
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23224: LD_ADDR_VAR 0 18
23228: PUSH
23229: LD_VAR 0 6
23233: PPUSH
23234: LD_INT 3
23236: PUSH
23237: LD_INT 60
23239: PUSH
23240: EMPTY
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 3
23249: PUSH
23250: LD_INT 55
23252: PUSH
23253: EMPTY
23254: LIST
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PPUSH
23264: CALL_OW 72
23268: PUSH
23269: LD_INT 1
23271: ARRAY
23272: ST_TO_ADDR
// if IsInUnit ( driver ) then
23273: LD_VAR 0 18
23277: PPUSH
23278: CALL_OW 310
23282: IFFALSE 23293
// ComExit ( driver ) ;
23284: LD_VAR 0 18
23288: PPUSH
23289: CALL 48936 0 1
// AddComEnterUnit ( driver , tmp ) ;
23293: LD_VAR 0 18
23297: PPUSH
23298: LD_VAR 0 13
23302: PPUSH
23303: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23307: LD_VAR 0 18
23311: PPUSH
23312: LD_VAR 0 7
23316: PPUSH
23317: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23321: LD_VAR 0 18
23325: PPUSH
23326: CALL_OW 181
// end ; continue ;
23330: GO 22974
// end ; if not cleaners or not tmp in cleaners then
23332: LD_VAR 0 6
23336: NOT
23337: IFTRUE 23352
23339: PUSH
23340: LD_VAR 0 13
23344: PUSH
23345: LD_VAR 0 6
23349: IN
23350: NOT
23351: OR
23352: IFFALSE 23661
// begin if dep then
23354: LD_VAR 0 17
23358: IFFALSE 23494
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23360: LD_ADDR_VAR 0 16
23364: PUSH
23365: LD_VAR 0 17
23369: PUSH
23370: LD_INT 1
23372: ARRAY
23373: PPUSH
23374: CALL_OW 250
23378: PPUSH
23379: LD_VAR 0 17
23383: PUSH
23384: LD_INT 1
23386: ARRAY
23387: PPUSH
23388: CALL_OW 254
23392: PPUSH
23393: LD_INT 5
23395: PPUSH
23396: CALL_OW 272
23400: PUSH
23401: LD_VAR 0 17
23405: PUSH
23406: LD_INT 1
23408: ARRAY
23409: PPUSH
23410: CALL_OW 251
23414: PPUSH
23415: LD_VAR 0 17
23419: PUSH
23420: LD_INT 1
23422: ARRAY
23423: PPUSH
23424: CALL_OW 254
23428: PPUSH
23429: LD_INT 5
23431: PPUSH
23432: CALL_OW 273
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23441: LD_VAR 0 16
23445: PUSH
23446: LD_INT 1
23448: ARRAY
23449: PPUSH
23450: LD_VAR 0 16
23454: PUSH
23455: LD_INT 2
23457: ARRAY
23458: PPUSH
23459: CALL_OW 488
23463: IFFALSE 23494
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23465: LD_VAR 0 13
23469: PPUSH
23470: LD_VAR 0 16
23474: PUSH
23475: LD_INT 1
23477: ARRAY
23478: PPUSH
23479: LD_VAR 0 16
23483: PUSH
23484: LD_INT 2
23486: ARRAY
23487: PPUSH
23488: CALL_OW 111
// continue ;
23492: GO 22974
// end ; end ; r := GetDir ( tmp ) ;
23494: LD_ADDR_VAR 0 15
23498: PUSH
23499: LD_VAR 0 13
23503: PPUSH
23504: CALL_OW 254
23508: ST_TO_ADDR
// if r = 5 then
23509: LD_VAR 0 15
23513: PUSH
23514: LD_INT 5
23516: EQUAL
23517: IFFALSE 23527
// r := 0 ;
23519: LD_ADDR_VAR 0 15
23523: PUSH
23524: LD_INT 0
23526: ST_TO_ADDR
// for j = r to 5 do
23527: LD_ADDR_VAR 0 10
23531: PUSH
23532: DOUBLE
23533: LD_VAR 0 15
23537: DEC
23538: ST_TO_ADDR
23539: LD_INT 5
23541: PUSH
23542: FOR_TO
23543: IFFALSE 23659
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23545: LD_ADDR_VAR 0 11
23549: PUSH
23550: LD_VAR 0 13
23554: PPUSH
23555: CALL_OW 250
23559: PPUSH
23560: LD_VAR 0 10
23564: PPUSH
23565: LD_INT 2
23567: PPUSH
23568: CALL_OW 272
23572: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23573: LD_ADDR_VAR 0 12
23577: PUSH
23578: LD_VAR 0 13
23582: PPUSH
23583: CALL_OW 251
23587: PPUSH
23588: LD_VAR 0 10
23592: PPUSH
23593: LD_INT 2
23595: PPUSH
23596: CALL_OW 273
23600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23601: LD_VAR 0 11
23605: PPUSH
23606: LD_VAR 0 12
23610: PPUSH
23611: CALL_OW 488
23615: IFFALSE 23634
23617: PUSH
23618: LD_VAR 0 11
23622: PPUSH
23623: LD_VAR 0 12
23627: PPUSH
23628: CALL_OW 428
23632: NOT
23633: AND
23634: IFFALSE 23657
// begin ComMoveXY ( tmp , _x , _y ) ;
23636: LD_VAR 0 13
23640: PPUSH
23641: LD_VAR 0 11
23645: PPUSH
23646: LD_VAR 0 12
23650: PPUSH
23651: CALL_OW 111
// break ;
23655: GO 23659
// end ; end ;
23657: GO 23542
23659: POP
23660: POP
// end ; end ;
23661: GO 22974
23663: POP
23664: POP
// end ;
23665: LD_VAR 0 8
23669: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23670: LD_INT 0
23672: PPUSH
// result := true ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_INT 1
23680: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23681: LD_VAR 0 2
23685: PUSH
23686: LD_INT 24
23688: DOUBLE
23689: EQUAL
23690: IFTRUE 23700
23692: LD_INT 33
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23725
23700: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: LD_INT 32
23708: PPUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 321
23718: PUSH
23719: LD_INT 2
23721: EQUAL
23722: ST_TO_ADDR
23723: GO 24041
23725: LD_INT 20
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23758
23733: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23734: LD_ADDR_VAR 0 3
23738: PUSH
23739: LD_INT 6
23741: PPUSH
23742: LD_VAR 0 1
23746: PPUSH
23747: CALL_OW 321
23751: PUSH
23752: LD_INT 2
23754: EQUAL
23755: ST_TO_ADDR
23756: GO 24041
23758: LD_INT 22
23760: DOUBLE
23761: EQUAL
23762: IFTRUE 23772
23764: LD_INT 36
23766: DOUBLE
23767: EQUAL
23768: IFTRUE 23772
23770: GO 23797
23772: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23773: LD_ADDR_VAR 0 3
23777: PUSH
23778: LD_INT 15
23780: PPUSH
23781: LD_VAR 0 1
23785: PPUSH
23786: CALL_OW 321
23790: PUSH
23791: LD_INT 2
23793: EQUAL
23794: ST_TO_ADDR
23795: GO 24041
23797: LD_INT 30
23799: DOUBLE
23800: EQUAL
23801: IFTRUE 23805
23803: GO 23830
23805: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23806: LD_ADDR_VAR 0 3
23810: PUSH
23811: LD_INT 20
23813: PPUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 321
23823: PUSH
23824: LD_INT 2
23826: EQUAL
23827: ST_TO_ADDR
23828: GO 24041
23830: LD_INT 28
23832: DOUBLE
23833: EQUAL
23834: IFTRUE 23844
23836: LD_INT 21
23838: DOUBLE
23839: EQUAL
23840: IFTRUE 23844
23842: GO 23869
23844: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_INT 21
23852: PPUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 321
23862: PUSH
23863: LD_INT 2
23865: EQUAL
23866: ST_TO_ADDR
23867: GO 24041
23869: LD_INT 16
23871: DOUBLE
23872: EQUAL
23873: IFTRUE 23877
23875: GO 23902
23877: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23878: LD_ADDR_VAR 0 3
23882: PUSH
23883: LD_INT 84
23885: PPUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 321
23895: PUSH
23896: LD_INT 2
23898: EQUAL
23899: ST_TO_ADDR
23900: GO 24041
23902: LD_INT 19
23904: DOUBLE
23905: EQUAL
23906: IFTRUE 23916
23908: LD_INT 23
23910: DOUBLE
23911: EQUAL
23912: IFTRUE 23916
23914: GO 23941
23916: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23917: LD_ADDR_VAR 0 3
23921: PUSH
23922: LD_INT 83
23924: PPUSH
23925: LD_VAR 0 1
23929: PPUSH
23930: CALL_OW 321
23934: PUSH
23935: LD_INT 2
23937: EQUAL
23938: ST_TO_ADDR
23939: GO 24041
23941: LD_INT 17
23943: DOUBLE
23944: EQUAL
23945: IFTRUE 23949
23947: GO 23974
23949: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23950: LD_ADDR_VAR 0 3
23954: PUSH
23955: LD_INT 39
23957: PPUSH
23958: LD_VAR 0 1
23962: PPUSH
23963: CALL_OW 321
23967: PUSH
23968: LD_INT 2
23970: EQUAL
23971: ST_TO_ADDR
23972: GO 24041
23974: LD_INT 18
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 24007
23982: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_INT 40
23990: PPUSH
23991: LD_VAR 0 1
23995: PPUSH
23996: CALL_OW 321
24000: PUSH
24001: LD_INT 2
24003: EQUAL
24004: ST_TO_ADDR
24005: GO 24041
24007: LD_INT 27
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24040
24015: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24016: LD_ADDR_VAR 0 3
24020: PUSH
24021: LD_INT 35
24023: PPUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 321
24033: PUSH
24034: LD_INT 2
24036: EQUAL
24037: ST_TO_ADDR
24038: GO 24041
24040: POP
// end ;
24041: LD_VAR 0 3
24045: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24046: LD_INT 0
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
24054: PPUSH
24055: PPUSH
24056: PPUSH
24057: PPUSH
24058: PPUSH
// result := false ;
24059: LD_ADDR_VAR 0 6
24063: PUSH
24064: LD_INT 0
24066: ST_TO_ADDR
// if btype = b_depot then
24067: LD_VAR 0 2
24071: PUSH
24072: LD_INT 0
24074: EQUAL
24075: IFFALSE 24087
// begin result := true ;
24077: LD_ADDR_VAR 0 6
24081: PUSH
24082: LD_INT 1
24084: ST_TO_ADDR
// exit ;
24085: GO 24941
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24087: LD_VAR 0 1
24091: NOT
24092: IFTRUE 24117
24094: PUSH
24095: LD_VAR 0 1
24099: PPUSH
24100: CALL_OW 266
24104: PUSH
24105: LD_INT 0
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: IN
24115: NOT
24116: OR
24117: IFTRUE 24126
24119: PUSH
24120: LD_VAR 0 2
24124: NOT
24125: OR
24126: IFTRUE 24162
24128: PUSH
24129: LD_VAR 0 5
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: LD_INT 4
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: IN
24160: NOT
24161: OR
24162: IFTRUE 24181
24164: PUSH
24165: LD_VAR 0 3
24169: PPUSH
24170: LD_VAR 0 4
24174: PPUSH
24175: CALL_OW 488
24179: NOT
24180: OR
24181: IFFALSE 24185
// exit ;
24183: GO 24941
// side := GetSide ( depot ) ;
24185: LD_ADDR_VAR 0 9
24189: PUSH
24190: LD_VAR 0 1
24194: PPUSH
24195: CALL_OW 255
24199: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24200: LD_VAR 0 9
24204: PPUSH
24205: LD_VAR 0 2
24209: PPUSH
24210: CALL 23670 0 2
24214: NOT
24215: IFFALSE 24219
// exit ;
24217: GO 24941
// pom := GetBase ( depot ) ;
24219: LD_ADDR_VAR 0 10
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 274
24233: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24234: LD_ADDR_VAR 0 11
24238: PUSH
24239: LD_VAR 0 2
24243: PPUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL_OW 248
24253: PPUSH
24254: CALL_OW 450
24258: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24259: LD_VAR 0 10
24263: PPUSH
24264: LD_INT 1
24266: PPUSH
24267: CALL_OW 275
24271: PUSH
24272: LD_VAR 0 11
24276: PUSH
24277: LD_INT 1
24279: ARRAY
24280: GREATEREQUAL
24281: IFFALSE 24307
24283: PUSH
24284: LD_VAR 0 10
24288: PPUSH
24289: LD_INT 2
24291: PPUSH
24292: CALL_OW 275
24296: PUSH
24297: LD_VAR 0 11
24301: PUSH
24302: LD_INT 2
24304: ARRAY
24305: GREATEREQUAL
24306: AND
24307: IFFALSE 24333
24309: PUSH
24310: LD_VAR 0 10
24314: PPUSH
24315: LD_INT 3
24317: PPUSH
24318: CALL_OW 275
24322: PUSH
24323: LD_VAR 0 11
24327: PUSH
24328: LD_INT 3
24330: ARRAY
24331: GREATEREQUAL
24332: AND
24333: NOT
24334: IFFALSE 24338
// exit ;
24336: GO 24941
// if GetBType ( depot ) = b_depot then
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL_OW 266
24347: PUSH
24348: LD_INT 0
24350: EQUAL
24351: IFFALSE 24363
// dist := 28 else
24353: LD_ADDR_VAR 0 14
24357: PUSH
24358: LD_INT 28
24360: ST_TO_ADDR
24361: GO 24371
// dist := 36 ;
24363: LD_ADDR_VAR 0 14
24367: PUSH
24368: LD_INT 36
24370: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24371: LD_VAR 0 1
24375: PPUSH
24376: LD_VAR 0 3
24380: PPUSH
24381: LD_VAR 0 4
24385: PPUSH
24386: CALL_OW 297
24390: PUSH
24391: LD_VAR 0 14
24395: GREATER
24396: IFFALSE 24400
// exit ;
24398: GO 24941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24400: LD_ADDR_VAR 0 12
24404: PUSH
24405: LD_VAR 0 2
24409: PPUSH
24410: LD_VAR 0 3
24414: PPUSH
24415: LD_VAR 0 4
24419: PPUSH
24420: LD_VAR 0 5
24424: PPUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 248
24434: PPUSH
24435: LD_INT 0
24437: PPUSH
24438: CALL 24946 0 6
24442: ST_TO_ADDR
// if not hexes then
24443: LD_VAR 0 12
24447: NOT
24448: IFFALSE 24452
// exit ;
24450: GO 24941
// hex := GetHexInfo ( x , y ) ;
24452: LD_ADDR_VAR 0 15
24456: PUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: LD_VAR 0 4
24466: PPUSH
24467: CALL_OW 546
24471: ST_TO_ADDR
// if hex [ 1 ] then
24472: LD_VAR 0 15
24476: PUSH
24477: LD_INT 1
24479: ARRAY
24480: IFFALSE 24484
// exit ;
24482: GO 24941
// height := hex [ 2 ] ;
24484: LD_ADDR_VAR 0 13
24488: PUSH
24489: LD_VAR 0 15
24493: PUSH
24494: LD_INT 2
24496: ARRAY
24497: ST_TO_ADDR
// for i = 1 to hexes do
24498: LD_ADDR_VAR 0 7
24502: PUSH
24503: DOUBLE
24504: LD_INT 1
24506: DEC
24507: ST_TO_ADDR
24508: LD_VAR 0 12
24512: PUSH
24513: FOR_TO
24514: IFFALSE 24858
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24516: LD_VAR 0 12
24520: PUSH
24521: LD_VAR 0 7
24525: ARRAY
24526: PUSH
24527: LD_INT 1
24529: ARRAY
24530: PPUSH
24531: LD_VAR 0 12
24535: PUSH
24536: LD_VAR 0 7
24540: ARRAY
24541: PUSH
24542: LD_INT 2
24544: ARRAY
24545: PPUSH
24546: CALL_OW 488
24550: NOT
24551: IFTRUE 24593
24553: PUSH
24554: LD_VAR 0 12
24558: PUSH
24559: LD_VAR 0 7
24563: ARRAY
24564: PUSH
24565: LD_INT 1
24567: ARRAY
24568: PPUSH
24569: LD_VAR 0 12
24573: PUSH
24574: LD_VAR 0 7
24578: ARRAY
24579: PUSH
24580: LD_INT 2
24582: ARRAY
24583: PPUSH
24584: CALL_OW 428
24588: PUSH
24589: LD_INT 0
24591: GREATER
24592: OR
24593: IFTRUE 24631
24595: PUSH
24596: LD_VAR 0 12
24600: PUSH
24601: LD_VAR 0 7
24605: ARRAY
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: PPUSH
24611: LD_VAR 0 12
24615: PUSH
24616: LD_VAR 0 7
24620: ARRAY
24621: PUSH
24622: LD_INT 2
24624: ARRAY
24625: PPUSH
24626: CALL_OW 351
24630: OR
24631: IFFALSE 24637
// exit ;
24633: POP
24634: POP
24635: GO 24941
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24637: LD_ADDR_VAR 0 8
24641: PUSH
24642: LD_VAR 0 12
24646: PUSH
24647: LD_VAR 0 7
24651: ARRAY
24652: PUSH
24653: LD_INT 1
24655: ARRAY
24656: PPUSH
24657: LD_VAR 0 12
24661: PUSH
24662: LD_VAR 0 7
24666: ARRAY
24667: PUSH
24668: LD_INT 2
24670: ARRAY
24671: PPUSH
24672: CALL_OW 546
24676: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24677: LD_VAR 0 8
24681: PUSH
24682: LD_INT 1
24684: ARRAY
24685: IFTRUE 24707
24687: PUSH
24688: LD_VAR 0 8
24692: PUSH
24693: LD_INT 2
24695: ARRAY
24696: PUSH
24697: LD_VAR 0 13
24701: PUSH
24702: LD_INT 2
24704: PLUS
24705: GREATER
24706: OR
24707: IFTRUE 24729
24709: PUSH
24710: LD_VAR 0 8
24714: PUSH
24715: LD_INT 2
24717: ARRAY
24718: PUSH
24719: LD_VAR 0 13
24723: PUSH
24724: LD_INT 2
24726: MINUS
24727: LESS
24728: OR
24729: IFTRUE 24797
24731: PUSH
24732: LD_VAR 0 8
24736: PUSH
24737: LD_INT 3
24739: ARRAY
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: LD_INT 8
24746: PUSH
24747: LD_INT 9
24749: PUSH
24750: LD_INT 10
24752: PUSH
24753: LD_INT 11
24755: PUSH
24756: LD_INT 12
24758: PUSH
24759: LD_INT 13
24761: PUSH
24762: LD_INT 16
24764: PUSH
24765: LD_INT 17
24767: PUSH
24768: LD_INT 18
24770: PUSH
24771: LD_INT 19
24773: PUSH
24774: LD_INT 20
24776: PUSH
24777: LD_INT 21
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: IN
24795: NOT
24796: OR
24797: IFTRUE 24810
24799: PUSH
24800: LD_VAR 0 8
24804: PUSH
24805: LD_INT 5
24807: ARRAY
24808: NOT
24809: OR
24810: IFTRUE 24850
24812: PUSH
24813: LD_VAR 0 8
24817: PUSH
24818: LD_INT 6
24820: ARRAY
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 7
24830: PUSH
24831: LD_INT 9
24833: PUSH
24834: LD_INT 10
24836: PUSH
24837: LD_INT 11
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: IN
24848: NOT
24849: OR
24850: IFFALSE 24856
// exit ;
24852: POP
24853: POP
24854: GO 24941
// end ;
24856: GO 24513
24858: POP
24859: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24860: LD_VAR 0 9
24864: PPUSH
24865: LD_VAR 0 3
24869: PPUSH
24870: LD_VAR 0 4
24874: PPUSH
24875: LD_INT 20
24877: PPUSH
24878: CALL 16760 0 4
24882: PUSH
24883: LD_INT 4
24885: ARRAY
24886: IFFALSE 24890
// exit ;
24888: GO 24941
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24890: LD_VAR 0 2
24894: PUSH
24895: LD_INT 29
24897: PUSH
24898: LD_INT 30
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: IN
24905: IFFALSE 24929
24907: PUSH
24908: LD_VAR 0 3
24912: PPUSH
24913: LD_VAR 0 4
24917: PPUSH
24918: LD_VAR 0 9
24922: PPUSH
24923: CALL_OW 440
24927: NOT
24928: AND
24929: IFFALSE 24933
// exit ;
24931: GO 24941
// result := true ;
24933: LD_ADDR_VAR 0 6
24937: PUSH
24938: LD_INT 1
24940: ST_TO_ADDR
// end ;
24941: LD_VAR 0 6
24945: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24946: LD_INT 0
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
24952: PPUSH
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
24962: PPUSH
24963: PPUSH
24964: PPUSH
24965: PPUSH
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
24987: PPUSH
24988: PPUSH
24989: PPUSH
24990: PPUSH
24991: PPUSH
24992: PPUSH
24993: PPUSH
24994: PPUSH
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
25001: PPUSH
25002: PPUSH
25003: PPUSH
25004: PPUSH
25005: PPUSH
// result = [ ] ;
25006: LD_ADDR_VAR 0 7
25010: PUSH
25011: EMPTY
25012: ST_TO_ADDR
// temp_list = [ ] ;
25013: LD_ADDR_VAR 0 9
25017: PUSH
25018: EMPTY
25019: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25020: LD_VAR 0 4
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: LD_INT 2
25033: PUSH
25034: LD_INT 3
25036: PUSH
25037: LD_INT 4
25039: PUSH
25040: LD_INT 5
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: IN
25051: NOT
25052: IFTRUE 25095
25054: PUSH
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: IN
25070: IFFALSE 25094
25072: PUSH
25073: LD_VAR 0 5
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: LD_INT 3
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: IN
25092: NOT
25093: AND
25094: OR
25095: IFFALSE 25099
// exit ;
25097: GO 43498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25099: LD_VAR 0 1
25103: PUSH
25104: LD_INT 6
25106: PUSH
25107: LD_INT 7
25109: PUSH
25110: LD_INT 8
25112: PUSH
25113: LD_INT 13
25115: PUSH
25116: LD_INT 12
25118: PUSH
25119: LD_INT 15
25121: PUSH
25122: LD_INT 11
25124: PUSH
25125: LD_INT 14
25127: PUSH
25128: LD_INT 10
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: IN
25142: IFFALSE 25152
// btype = b_lab ;
25144: LD_ADDR_VAR 0 1
25148: PUSH
25149: LD_INT 6
25151: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25152: LD_VAR 0 6
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: LIST
25170: IN
25171: NOT
25172: IFTRUE 25240
25174: PUSH
25175: LD_VAR 0 1
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 3
25191: PUSH
25192: LD_INT 6
25194: PUSH
25195: LD_INT 36
25197: PUSH
25198: LD_INT 4
25200: PUSH
25201: LD_INT 5
25203: PUSH
25204: LD_INT 31
25206: PUSH
25207: LD_INT 32
25209: PUSH
25210: LD_INT 33
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: IN
25226: NOT
25227: IFFALSE 25239
25229: PUSH
25230: LD_VAR 0 6
25234: PUSH
25235: LD_INT 1
25237: EQUAL
25238: AND
25239: OR
25240: IFTRUE 25272
25242: PUSH
25243: LD_VAR 0 1
25247: PUSH
25248: LD_INT 2
25250: PUSH
25251: LD_INT 3
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: IN
25258: NOT
25259: IFFALSE 25271
25261: PUSH
25262: LD_VAR 0 6
25266: PUSH
25267: LD_INT 2
25269: EQUAL
25270: AND
25271: OR
25272: IFFALSE 25282
// mode = 0 ;
25274: LD_ADDR_VAR 0 6
25278: PUSH
25279: LD_INT 0
25281: ST_TO_ADDR
// case mode of 0 :
25282: LD_VAR 0 6
25286: PUSH
25287: LD_INT 0
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 36748
25295: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25296: LD_ADDR_VAR 0 11
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: NEG
25432: PUSH
25433: LD_INT 1
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 3
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 1
25462: NEG
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25489: LD_ADDR_VAR 0 12
25493: PUSH
25494: LD_INT 0
25496: PUSH
25497: LD_INT 0
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 0
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 0
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 1
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 0
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: NEG
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: LD_INT 1
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: PUSH
25592: LD_INT 1
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: NEG
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: NEG
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 3
25657: NEG
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25685: LD_ADDR_VAR 0 13
25689: PUSH
25690: LD_INT 0
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 1
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: NEG
25767: PUSH
25768: LD_INT 2
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: PUSH
25779: LD_INT 1
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 2
25808: NEG
25809: PUSH
25810: LD_INT 1
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: LD_INT 3
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: NEG
25845: PUSH
25846: LD_INT 2
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: LD_INT 3
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25884: LD_ADDR_VAR 0 14
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 2
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 1
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: LD_INT 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: NEG
26031: PUSH
26032: LD_INT 3
26034: NEG
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 3
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 1
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26080: LD_ADDR_VAR 0 15
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 0
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: LD_INT 0
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 2
26203: NEG
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 2
26214: NEG
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 3
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26273: LD_ADDR_VAR 0 16
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 1
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: LD_INT 0
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: NEG
26397: PUSH
26398: LD_INT 1
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 2
26408: NEG
26409: PUSH
26410: LD_INT 2
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 3
26430: PUSH
26431: LD_INT 3
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 3
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26466: LD_ADDR_VAR 0 17
26470: PUSH
26471: LD_INT 0
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: LD_INT 0
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: LD_INT 2
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 1
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 2
26642: NEG
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: LD_INT 1
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26696: LD_ADDR_VAR 0 18
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 1
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 2
26781: NEG
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 2
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26926: LD_ADDR_VAR 0 19
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: NEG
27008: PUSH
27009: LD_INT 2
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 2
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 2
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 2
27102: NEG
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27156: LD_ADDR_VAR 0 20
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 2
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 2
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27386: LD_ADDR_VAR 0 21
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 0
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 0
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: LD_INT 2
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 0
27541: PUSH
27542: LD_INT 2
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 1
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27616: LD_ADDR_VAR 0 22
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: LD_INT 2
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 2
27712: NEG
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 0
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 2
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 2
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 2
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 2
27792: NEG
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27846: LD_ADDR_VAR 0 23
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 0
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 2
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: NEG
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 2
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 2
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 2
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 0
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: LD_INT 0
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: LD_INT 1
28037: NEG
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: NEG
28058: PUSH
28059: LD_INT 3
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 3
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: LD_INT 2
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 1
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28126: LD_ADDR_VAR 0 24
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: LD_INT 0
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PUSH
28162: LD_INT 1
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 0
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: NEG
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 2
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 1
28291: NEG
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: NEG
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 2
28325: NEG
28326: PUSH
28327: LD_INT 2
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 3
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28402: LD_ADDR_VAR 0 25
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: NEG
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 2
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 2
28601: NEG
28602: PUSH
28603: LD_INT 2
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: LD_INT 3
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28676: LD_ADDR_VAR 0 26
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 0
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 0
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: LD_INT 2
28761: NEG
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 0
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 2
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: LD_INT 3
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: LD_INT 3
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 2
28918: NEG
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28952: LD_ADDR_VAR 0 27
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 1
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 2
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 2
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 2
29151: NEG
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: NEG
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 3
29197: NEG
29198: PUSH
29199: LD_INT 2
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29232: LD_ADDR_VAR 0 28
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 1
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: LD_INT 1
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: LD_INT 0
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: LD_INT 1
29305: NEG
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: LD_INT 2
29328: NEG
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: LD_INT 2
29390: PUSH
29391: EMPTY
29392: LIST
29393: LIST
29394: PUSH
29395: LD_INT 1
29397: NEG
29398: PUSH
29399: LD_INT 1
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 2
29408: NEG
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: NEG
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: NEG
29432: PUSH
29433: LD_INT 2
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 2
29443: NEG
29444: PUSH
29445: LD_INT 3
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 3
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 3
29467: NEG
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 3
29479: NEG
29480: PUSH
29481: LD_INT 2
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29514: LD_ADDR_VAR 0 29
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: LD_INT 0
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 1
29595: NEG
29596: PUSH
29597: LD_INT 2
29599: NEG
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: LD_INT 2
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 2
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: NEG
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: NEG
29681: PUSH
29682: LD_INT 1
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 2
29692: NEG
29693: PUSH
29694: LD_INT 2
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 2
29704: NEG
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 2
29716: PUSH
29717: LD_INT 1
29719: NEG
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 3
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 1
29737: PUSH
29738: LD_INT 3
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 3
29758: NEG
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29793: LD_ADDR_VAR 0 30
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 0
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 1
29851: NEG
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: LD_INT 1
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 1
29874: NEG
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 2
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 2
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 2
29928: PUSH
29929: LD_INT 2
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 2
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 3
30036: NEG
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30071: LD_ADDR_VAR 0 31
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 2
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 2
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: PUSH
30206: LD_INT 2
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: NEG
30249: PUSH
30250: LD_INT 2
30252: NEG
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: NEG
30261: PUSH
30262: LD_INT 3
30264: NEG
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 3
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: NEG
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30349: LD_ADDR_VAR 0 32
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 2
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: LD_INT 3
30542: NEG
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 3
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 2
30581: NEG
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 3
30592: NEG
30593: PUSH
30594: LD_INT 1
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30627: LD_ADDR_VAR 0 33
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 0
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 0
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 1
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 2
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: LD_INT 0
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 2
30805: NEG
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: NEG
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 3
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: LD_INT 2
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30906: LD_ADDR_VAR 0 34
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 2
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 3
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: LD_INT 2
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: LD_INT 3
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31186: LD_ADDR_VAR 0 35
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31298: LD_ADDR_VAR 0 36
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: LD_INT 1
31318: NEG
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: LD_INT 1
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31410: LD_ADDR_VAR 0 37
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31522: LD_ADDR_VAR 0 38
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 2
31613: NEG
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31634: LD_ADDR_VAR 0 39
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 0
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 0
31682: PUSH
31683: LD_INT 1
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31746: LD_ADDR_VAR 0 40
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31858: LD_ADDR_VAR 0 41
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: NEG
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 1
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 3
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: LD_INT 2
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: PUSH
32102: LD_INT 3
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 3
32132: NEG
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 3
32143: NEG
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 3
32155: NEG
32156: PUSH
32157: LD_INT 2
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: LD_INT 3
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32208: LD_ADDR_VAR 0 42
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: LD_INT 1
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 1
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 2
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: LD_INT 3
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: LD_INT 3
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 3
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 3
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 3
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 3
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32558: LD_ADDR_VAR 0 43
32562: PUSH
32563: LD_INT 0
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: LD_INT 0
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 2
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: LD_INT 2
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 3
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 3
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 3
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 2
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 3
32854: NEG
32855: PUSH
32856: LD_INT 0
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32906: LD_ADDR_VAR 0 44
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 0
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 1
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: LD_INT 2
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: NEG
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: LD_INT 3
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 3
33180: NEG
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: LD_INT 2
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33256: LD_ADDR_VAR 0 45
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 1
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 2
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: NEG
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: NEG
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: LD_INT 3
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 3
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: LD_INT 3
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 3
33553: NEG
33554: PUSH
33555: LD_INT 2
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 3
33565: NEG
33566: PUSH
33567: LD_INT 3
33569: NEG
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33606: LD_ADDR_VAR 0 46
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: NEG
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: LD_INT 2
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 2
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 2
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 2
33772: NEG
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 2
33783: NEG
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 3
33810: NEG
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 1
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 3
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 3
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 3
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 3
33902: NEG
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 3
33913: NEG
33914: PUSH
33915: LD_INT 1
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33954: LD_ADDR_VAR 0 47
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 1
34035: NEG
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 2
34081: NEG
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34105: LD_ADDR_VAR 0 48
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 1
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: LD_INT 1
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: LD_INT 2
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 2
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 2
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34252: LD_ADDR_VAR 0 49
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 2
34364: PUSH
34365: LD_INT 2
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34396: LD_ADDR_VAR 0 50
34400: PUSH
34401: LD_INT 0
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 2
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 2
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34540: LD_ADDR_VAR 0 51
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 1
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34687: LD_ADDR_VAR 0 52
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 0
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 1
34768: NEG
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: LD_INT 1
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 2
34814: NEG
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34838: LD_ADDR_VAR 0 53
34842: PUSH
34843: LD_INT 0
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 2
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: LD_INT 2
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 1
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 2
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35068: LD_ADDR_VAR 0 54
35072: PUSH
35073: LD_INT 0
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 0
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 2
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 1
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 2
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 2
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: NEG
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35298: LD_ADDR_VAR 0 55
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 1
35379: NEG
35380: PUSH
35381: LD_INT 2
35383: NEG
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: LD_INT 2
35394: NEG
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: LD_INT 1
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35528: LD_ADDR_VAR 0 56
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35758: LD_ADDR_VAR 0 57
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: LD_INT 2
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: LD_INT 1
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35988: LD_ADDR_VAR 0 58
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 0
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 2
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 2
36164: NEG
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: NEG
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36218: LD_ADDR_VAR 0 59
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36306: LD_ADDR_VAR 0 60
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36394: LD_ADDR_VAR 0 61
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: NEG
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36482: LD_ADDR_VAR 0 62
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: LD_INT 1
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36570: LD_ADDR_VAR 0 63
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36658: LD_ADDR_VAR 0 64
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// end ; 1 :
36746: GO 42643
36748: LD_INT 1
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36756
36754: GO 39379
36756: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36757: LD_ADDR_VAR 0 11
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: LD_INT 3
36768: NEG
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 3
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: LD_INT 2
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36801: LD_ADDR_VAR 0 12
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 3
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 3
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36842: LD_ADDR_VAR 0 13
36846: PUSH
36847: LD_INT 3
36849: PUSH
36850: LD_INT 2
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 3
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36882: LD_ADDR_VAR 0 14
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: LD_INT 3
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36923: LD_ADDR_VAR 0 15
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 3
36952: NEG
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36967: LD_ADDR_VAR 0 16
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: LD_INT 3
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 3
36986: NEG
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 3
36998: NEG
36999: PUSH
37000: LD_INT 3
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37013: LD_ADDR_VAR 0 17
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 3
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 0
37032: PUSH
37033: LD_INT 3
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 2
37046: NEG
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37057: LD_ADDR_VAR 0 18
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 3
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37098: LD_ADDR_VAR 0 19
37102: PUSH
37103: LD_INT 3
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 3
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: LIST
37137: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37138: LD_ADDR_VAR 0 20
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: LD_INT 3
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37179: LD_ADDR_VAR 0 21
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 3
37197: NEG
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 3
37208: NEG
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37223: LD_ADDR_VAR 0 22
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 3
37242: NEG
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37269: LD_ADDR_VAR 0 23
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 3
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 4
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 3
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37313: LD_ADDR_VAR 0 24
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 4
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: LIST
37353: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37354: LD_ADDR_VAR 0 25
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 3
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 4
37371: PUSH
37372: LD_INT 3
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: LD_INT 4
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37394: LD_ADDR_VAR 0 26
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 3
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 4
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 3
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37435: LD_ADDR_VAR 0 27
37439: PUSH
37440: LD_INT 3
37442: NEG
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 3
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 4
37464: NEG
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37479: LD_ADDR_VAR 0 28
37483: PUSH
37484: LD_INT 3
37486: NEG
37487: PUSH
37488: LD_INT 3
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 3
37498: NEG
37499: PUSH
37500: LD_INT 4
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 4
37510: NEG
37511: PUSH
37512: LD_INT 3
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37525: LD_ADDR_VAR 0 29
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 3
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 3
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: LD_INT 4
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: LD_INT 4
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 5
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: LD_INT 5
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 4
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 6
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 6
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: LD_INT 5
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37680: LD_ADDR_VAR 0 30
37684: PUSH
37685: LD_INT 2
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 3
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 3
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 4
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 4
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 4
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 5
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 5
37770: PUSH
37771: LD_INT 1
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 5
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 6
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 6
37801: PUSH
37802: LD_INT 1
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37823: LD_ADDR_VAR 0 31
37827: PUSH
37828: LD_INT 3
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: PUSH
37851: LD_INT 3
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 4
37860: PUSH
37861: LD_INT 3
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 4
37870: PUSH
37871: LD_INT 4
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: LD_INT 4
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 5
37890: PUSH
37891: LD_INT 4
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 5
37900: PUSH
37901: LD_INT 5
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 4
37910: PUSH
37911: LD_INT 5
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 6
37920: PUSH
37921: LD_INT 5
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 6
37930: PUSH
37931: LD_INT 6
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 5
37940: PUSH
37941: LD_INT 6
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37962: LD_ADDR_VAR 0 32
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 3
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 3
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: LD_INT 4
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 4
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 3
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: LD_INT 5
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 5
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: LD_INT 4
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 6
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 6
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 5
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38105: LD_ADDR_VAR 0 33
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 3
38123: NEG
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 3
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 3
38146: NEG
38147: PUSH
38148: LD_INT 1
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 4
38157: NEG
38158: PUSH
38159: LD_INT 0
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 4
38168: NEG
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 4
38180: NEG
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 5
38191: NEG
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 5
38202: NEG
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 5
38214: NEG
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 6
38225: NEG
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 6
38236: NEG
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38260: LD_ADDR_VAR 0 34
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 3
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: LD_INT 4
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 4
38315: NEG
38316: PUSH
38317: LD_INT 3
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 4
38327: NEG
38328: PUSH
38329: LD_INT 4
38331: NEG
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 4
38339: NEG
38340: PUSH
38341: LD_INT 5
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 5
38351: NEG
38352: PUSH
38353: LD_INT 4
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 5
38363: NEG
38364: PUSH
38365: LD_INT 5
38367: NEG
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 5
38375: NEG
38376: PUSH
38377: LD_INT 6
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 6
38387: NEG
38388: PUSH
38389: LD_INT 5
38391: NEG
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 6
38399: NEG
38400: PUSH
38401: LD_INT 6
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38423: LD_ADDR_VAR 0 41
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38467: LD_ADDR_VAR 0 42
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38508: LD_ADDR_VAR 0 43
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 3
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38548: LD_ADDR_VAR 0 44
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 3
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38589: LD_ADDR_VAR 0 45
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 3
38618: NEG
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: LIST
38632: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38633: LD_ADDR_VAR 0 46
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 3
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 3
38664: NEG
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38679: LD_ADDR_VAR 0 47
38683: PUSH
38684: LD_INT 2
38686: NEG
38687: PUSH
38688: LD_INT 3
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 3
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38712: LD_ADDR_VAR 0 48
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38743: LD_ADDR_VAR 0 49
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 3
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38772: LD_ADDR_VAR 0 50
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 3
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38801: LD_ADDR_VAR 0 51
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38832: LD_ADDR_VAR 0 52
38836: PUSH
38837: LD_INT 3
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 3
38851: NEG
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38865: LD_ADDR_VAR 0 53
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 3
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: LD_INT 3
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: PUSH
38896: LD_INT 2
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38909: LD_ADDR_VAR 0 54
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 3
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38950: LD_ADDR_VAR 0 55
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 3
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: LD_INT 3
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: LIST
38989: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38990: LD_ADDR_VAR 0 56
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 3
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 3
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39031: LD_ADDR_VAR 0 57
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 3
39060: NEG
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39075: LD_ADDR_VAR 0 58
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 3
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: LD_INT 2
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 3
39106: NEG
39107: PUSH
39108: LD_INT 3
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39121: LD_ADDR_VAR 0 59
39125: PUSH
39126: LD_INT 1
39128: NEG
39129: PUSH
39130: LD_INT 2
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39165: LD_ADDR_VAR 0 60
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: LD_INT 1
39175: NEG
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39206: LD_ADDR_VAR 0 61
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39246: LD_ADDR_VAR 0 62
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39287: LD_ADDR_VAR 0 63
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 2
39305: NEG
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39331: LD_ADDR_VAR 0 64
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: LIST
39376: ST_TO_ADDR
// end ; 2 :
39377: GO 42643
39379: LD_INT 2
39381: DOUBLE
39382: EQUAL
39383: IFTRUE 39387
39385: GO 42642
39387: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39388: LD_ADDR_VAR 0 29
39392: PUSH
39393: LD_INT 4
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 4
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 5
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 5
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 4
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: LD_INT 0
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 5
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 4
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 4
39518: PUSH
39519: LD_INT 4
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 3
39528: PUSH
39529: LD_INT 4
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 4
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 4
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 5
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: LD_INT 5
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 4
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 3
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 5
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 2
39660: NEG
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: NEG
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 3
39682: NEG
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: NEG
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 3
39716: NEG
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 4
39727: NEG
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 4
39738: NEG
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 4
39750: NEG
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 4
39773: NEG
39774: PUSH
39775: LD_INT 4
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 4
39785: NEG
39786: PUSH
39787: LD_INT 5
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: LD_INT 4
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 3
39809: NEG
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 4
39821: NEG
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 5
39833: NEG
39834: PUSH
39835: LD_INT 4
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 5
39845: NEG
39846: PUSH
39847: LD_INT 5
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 3
39857: NEG
39858: PUSH
39859: LD_INT 5
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 5
39869: NEG
39870: PUSH
39871: LD_INT 3
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39926: LD_ADDR_VAR 0 30
39930: PUSH
39931: LD_INT 4
39933: PUSH
39934: LD_INT 4
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 4
39943: PUSH
39944: LD_INT 3
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 5
39953: PUSH
39954: LD_INT 4
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 5
39963: PUSH
39964: LD_INT 5
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 4
39973: PUSH
39974: LD_INT 5
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 4
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 3
39993: PUSH
39994: LD_INT 3
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 5
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 3
40013: PUSH
40014: LD_INT 5
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 3
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 3
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 4
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: PUSH
40096: LD_INT 4
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 4
40116: NEG
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 4
40127: NEG
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: NEG
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 3
40150: NEG
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 4
40161: NEG
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 5
40172: NEG
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 5
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 5
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 3
40207: NEG
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: NEG
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: LD_INT 4
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: LD_INT 3
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 3
40266: NEG
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 4
40278: NEG
40279: PUSH
40280: LD_INT 3
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 4
40290: NEG
40291: PUSH
40292: LD_INT 4
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: LD_INT 4
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 4
40314: NEG
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 4
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 5
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 4
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 4
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: LD_INT 5
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 3
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: LD_INT 5
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40473: LD_ADDR_VAR 0 31
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: LD_INT 4
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: PUSH
40501: LD_INT 4
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: LD_INT 5
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 5
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 4
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 5
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 3
40573: NEG
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 3
40584: NEG
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: NEG
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 3
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 4
40629: NEG
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 4
40640: NEG
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 4
40652: NEG
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 4
40675: NEG
40676: PUSH
40677: LD_INT 4
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 4
40687: NEG
40688: PUSH
40689: LD_INT 5
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: LD_INT 4
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 3
40711: NEG
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 4
40723: NEG
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 5
40735: NEG
40736: PUSH
40737: LD_INT 4
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 5
40747: NEG
40748: PUSH
40749: LD_INT 5
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: LD_INT 5
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 5
40771: NEG
40772: PUSH
40773: LD_INT 3
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 0
40794: PUSH
40795: LD_INT 4
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 3
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 2
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 4
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 4
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 4
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 4
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 5
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 5
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 4
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 3
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 3
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 3
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 5
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41023: LD_ADDR_VAR 0 32
41027: PUSH
41028: LD_INT 4
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 4
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 4
41075: NEG
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 5
41086: NEG
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 5
41097: NEG
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 5
41109: NEG
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: NEG
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 3
41144: NEG
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: LD_INT 3
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 3
41180: NEG
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 4
41192: NEG
41193: PUSH
41194: LD_INT 3
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 4
41204: NEG
41205: PUSH
41206: LD_INT 4
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 4
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 4
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 4
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 5
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 4
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 3
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: LD_INT 3
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 4
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: LD_INT 5
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 2
41319: PUSH
41320: LD_INT 3
41322: NEG
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 2
41330: NEG
41331: PUSH
41332: LD_INT 5
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 4
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 4
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 4
41425: PUSH
41426: LD_INT 2
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 4
41435: PUSH
41436: LD_INT 4
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 4
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 5
41455: PUSH
41456: LD_INT 4
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 5
41465: PUSH
41466: LD_INT 5
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 4
41475: PUSH
41476: LD_INT 5
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: LD_INT 4
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 3
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 5
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 3
41515: PUSH
41516: LD_INT 5
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41570: LD_ADDR_VAR 0 33
41574: PUSH
41575: LD_INT 4
41577: NEG
41578: PUSH
41579: LD_INT 4
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 4
41589: NEG
41590: PUSH
41591: LD_INT 5
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 3
41601: NEG
41602: PUSH
41603: LD_INT 4
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 3
41613: NEG
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 4
41625: NEG
41626: PUSH
41627: LD_INT 3
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 5
41637: NEG
41638: PUSH
41639: LD_INT 4
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 5
41649: NEG
41650: PUSH
41651: LD_INT 5
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: LD_INT 5
41665: NEG
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 5
41673: NEG
41674: PUSH
41675: LD_INT 3
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 3
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 4
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 3
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 3
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 4
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: LD_INT 4
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 4
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 4
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 5
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 5
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 4
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 3
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 3
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: LD_INT 2
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 5
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 3
41880: PUSH
41881: LD_INT 3
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 4
41900: PUSH
41901: LD_INT 3
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 4
41910: PUSH
41911: LD_INT 4
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: LD_INT 4
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 3
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 4
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 4
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 4
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 4
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 5
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 5
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 4
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: LD_INT 3
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 5
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: NEG
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42108: LD_ADDR_VAR 0 34
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 4
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: LD_INT 5
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 4
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: LD_INT 4
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 5
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 3
42197: NEG
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: LD_INT 5
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 4
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 4
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: LD_INT 2
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 4
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 4
42310: PUSH
42311: LD_INT 4
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 4
42320: PUSH
42321: LD_INT 3
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 5
42330: PUSH
42331: LD_INT 4
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: LD_INT 5
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 4
42350: PUSH
42351: LD_INT 5
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: LD_INT 3
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 5
42380: PUSH
42381: LD_INT 3
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: LD_INT 5
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 3
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 3
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 4
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 4
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 4
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 4
42493: NEG
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 4
42504: NEG
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: NEG
42517: PUSH
42518: LD_INT 0
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: NEG
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 4
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 5
42549: NEG
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 5
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 5
42572: NEG
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 3
42584: NEG
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: ST_TO_ADDR
// end ; end ;
42640: GO 42643
42642: POP
// case btype of b_depot , b_warehouse :
42643: LD_VAR 0 1
42647: PUSH
42648: LD_INT 0
42650: DOUBLE
42651: EQUAL
42652: IFTRUE 42662
42654: LD_INT 1
42656: DOUBLE
42657: EQUAL
42658: IFTRUE 42662
42660: GO 42863
42662: POP
// case nation of nation_american :
42663: LD_VAR 0 5
42667: PUSH
42668: LD_INT 1
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42732
42676: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42677: LD_ADDR_VAR 0 9
42681: PUSH
42682: LD_VAR 0 11
42686: PUSH
42687: LD_VAR 0 12
42691: PUSH
42692: LD_VAR 0 13
42696: PUSH
42697: LD_VAR 0 14
42701: PUSH
42702: LD_VAR 0 15
42706: PUSH
42707: LD_VAR 0 16
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: PUSH
42720: LD_VAR 0 4
42724: PUSH
42725: LD_INT 1
42727: PLUS
42728: ARRAY
42729: ST_TO_ADDR
42730: GO 42861
42732: LD_INT 2
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42740
42738: GO 42796
42740: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42741: LD_ADDR_VAR 0 9
42745: PUSH
42746: LD_VAR 0 17
42750: PUSH
42751: LD_VAR 0 18
42755: PUSH
42756: LD_VAR 0 19
42760: PUSH
42761: LD_VAR 0 20
42765: PUSH
42766: LD_VAR 0 21
42770: PUSH
42771: LD_VAR 0 22
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: PUSH
42784: LD_VAR 0 4
42788: PUSH
42789: LD_INT 1
42791: PLUS
42792: ARRAY
42793: ST_TO_ADDR
42794: GO 42861
42796: LD_INT 3
42798: DOUBLE
42799: EQUAL
42800: IFTRUE 42804
42802: GO 42860
42804: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42805: LD_ADDR_VAR 0 9
42809: PUSH
42810: LD_VAR 0 23
42814: PUSH
42815: LD_VAR 0 24
42819: PUSH
42820: LD_VAR 0 25
42824: PUSH
42825: LD_VAR 0 26
42829: PUSH
42830: LD_VAR 0 27
42834: PUSH
42835: LD_VAR 0 28
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: PUSH
42848: LD_VAR 0 4
42852: PUSH
42853: LD_INT 1
42855: PLUS
42856: ARRAY
42857: ST_TO_ADDR
42858: GO 42861
42860: POP
42861: GO 43416
42863: LD_INT 2
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42877
42869: LD_INT 3
42871: DOUBLE
42872: EQUAL
42873: IFTRUE 42877
42875: GO 42933
42877: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42878: LD_ADDR_VAR 0 9
42882: PUSH
42883: LD_VAR 0 29
42887: PUSH
42888: LD_VAR 0 30
42892: PUSH
42893: LD_VAR 0 31
42897: PUSH
42898: LD_VAR 0 32
42902: PUSH
42903: LD_VAR 0 33
42907: PUSH
42908: LD_VAR 0 34
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: PUSH
42921: LD_VAR 0 4
42925: PUSH
42926: LD_INT 1
42928: PLUS
42929: ARRAY
42930: ST_TO_ADDR
42931: GO 43416
42933: LD_INT 16
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42995
42939: LD_INT 17
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42995
42945: LD_INT 18
42947: DOUBLE
42948: EQUAL
42949: IFTRUE 42995
42951: LD_INT 19
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42995
42957: LD_INT 22
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42995
42963: LD_INT 20
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42995
42969: LD_INT 21
42971: DOUBLE
42972: EQUAL
42973: IFTRUE 42995
42975: LD_INT 23
42977: DOUBLE
42978: EQUAL
42979: IFTRUE 42995
42981: LD_INT 24
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42995
42987: LD_INT 25
42989: DOUBLE
42990: EQUAL
42991: IFTRUE 42995
42993: GO 43051
42995: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42996: LD_ADDR_VAR 0 9
43000: PUSH
43001: LD_VAR 0 35
43005: PUSH
43006: LD_VAR 0 36
43010: PUSH
43011: LD_VAR 0 37
43015: PUSH
43016: LD_VAR 0 38
43020: PUSH
43021: LD_VAR 0 39
43025: PUSH
43026: LD_VAR 0 40
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: PUSH
43039: LD_VAR 0 4
43043: PUSH
43044: LD_INT 1
43046: PLUS
43047: ARRAY
43048: ST_TO_ADDR
43049: GO 43416
43051: LD_INT 6
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43107
43057: LD_INT 7
43059: DOUBLE
43060: EQUAL
43061: IFTRUE 43107
43063: LD_INT 8
43065: DOUBLE
43066: EQUAL
43067: IFTRUE 43107
43069: LD_INT 13
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43107
43075: LD_INT 12
43077: DOUBLE
43078: EQUAL
43079: IFTRUE 43107
43081: LD_INT 15
43083: DOUBLE
43084: EQUAL
43085: IFTRUE 43107
43087: LD_INT 11
43089: DOUBLE
43090: EQUAL
43091: IFTRUE 43107
43093: LD_INT 14
43095: DOUBLE
43096: EQUAL
43097: IFTRUE 43107
43099: LD_INT 10
43101: DOUBLE
43102: EQUAL
43103: IFTRUE 43107
43105: GO 43163
43107: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43108: LD_ADDR_VAR 0 9
43112: PUSH
43113: LD_VAR 0 41
43117: PUSH
43118: LD_VAR 0 42
43122: PUSH
43123: LD_VAR 0 43
43127: PUSH
43128: LD_VAR 0 44
43132: PUSH
43133: LD_VAR 0 45
43137: PUSH
43138: LD_VAR 0 46
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: PUSH
43151: LD_VAR 0 4
43155: PUSH
43156: LD_INT 1
43158: PLUS
43159: ARRAY
43160: ST_TO_ADDR
43161: GO 43416
43163: LD_INT 36
43165: DOUBLE
43166: EQUAL
43167: IFTRUE 43171
43169: GO 43227
43171: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43172: LD_ADDR_VAR 0 9
43176: PUSH
43177: LD_VAR 0 47
43181: PUSH
43182: LD_VAR 0 48
43186: PUSH
43187: LD_VAR 0 49
43191: PUSH
43192: LD_VAR 0 50
43196: PUSH
43197: LD_VAR 0 51
43201: PUSH
43202: LD_VAR 0 52
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: PUSH
43215: LD_VAR 0 4
43219: PUSH
43220: LD_INT 1
43222: PLUS
43223: ARRAY
43224: ST_TO_ADDR
43225: GO 43416
43227: LD_INT 4
43229: DOUBLE
43230: EQUAL
43231: IFTRUE 43253
43233: LD_INT 5
43235: DOUBLE
43236: EQUAL
43237: IFTRUE 43253
43239: LD_INT 34
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43253
43245: LD_INT 37
43247: DOUBLE
43248: EQUAL
43249: IFTRUE 43253
43251: GO 43309
43253: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43254: LD_ADDR_VAR 0 9
43258: PUSH
43259: LD_VAR 0 53
43263: PUSH
43264: LD_VAR 0 54
43268: PUSH
43269: LD_VAR 0 55
43273: PUSH
43274: LD_VAR 0 56
43278: PUSH
43279: LD_VAR 0 57
43283: PUSH
43284: LD_VAR 0 58
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: PUSH
43297: LD_VAR 0 4
43301: PUSH
43302: LD_INT 1
43304: PLUS
43305: ARRAY
43306: ST_TO_ADDR
43307: GO 43416
43309: LD_INT 31
43311: DOUBLE
43312: EQUAL
43313: IFTRUE 43359
43315: LD_INT 32
43317: DOUBLE
43318: EQUAL
43319: IFTRUE 43359
43321: LD_INT 33
43323: DOUBLE
43324: EQUAL
43325: IFTRUE 43359
43327: LD_INT 27
43329: DOUBLE
43330: EQUAL
43331: IFTRUE 43359
43333: LD_INT 26
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43359
43339: LD_INT 28
43341: DOUBLE
43342: EQUAL
43343: IFTRUE 43359
43345: LD_INT 29
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43359
43351: LD_INT 30
43353: DOUBLE
43354: EQUAL
43355: IFTRUE 43359
43357: GO 43415
43359: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43360: LD_ADDR_VAR 0 9
43364: PUSH
43365: LD_VAR 0 59
43369: PUSH
43370: LD_VAR 0 60
43374: PUSH
43375: LD_VAR 0 61
43379: PUSH
43380: LD_VAR 0 62
43384: PUSH
43385: LD_VAR 0 63
43389: PUSH
43390: LD_VAR 0 64
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: PUSH
43403: LD_VAR 0 4
43407: PUSH
43408: LD_INT 1
43410: PLUS
43411: ARRAY
43412: ST_TO_ADDR
43413: GO 43416
43415: POP
// temp_list2 = [ ] ;
43416: LD_ADDR_VAR 0 10
43420: PUSH
43421: EMPTY
43422: ST_TO_ADDR
// for i in temp_list do
43423: LD_ADDR_VAR 0 8
43427: PUSH
43428: LD_VAR 0 9
43432: PUSH
43433: FOR_IN
43434: IFFALSE 43486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43436: LD_ADDR_VAR 0 10
43440: PUSH
43441: LD_VAR 0 10
43445: PUSH
43446: LD_VAR 0 8
43450: PUSH
43451: LD_INT 1
43453: ARRAY
43454: PUSH
43455: LD_VAR 0 2
43459: PLUS
43460: PUSH
43461: LD_VAR 0 8
43465: PUSH
43466: LD_INT 2
43468: ARRAY
43469: PUSH
43470: LD_VAR 0 3
43474: PLUS
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: ADD
43483: ST_TO_ADDR
43484: GO 43433
43486: POP
43487: POP
// result = temp_list2 ;
43488: LD_ADDR_VAR 0 7
43492: PUSH
43493: LD_VAR 0 10
43497: ST_TO_ADDR
// end ;
43498: LD_VAR 0 7
43502: RET
// export function EnemyInRange ( unit , dist ) ; begin
43503: LD_INT 0
43505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_VAR 0 1
43515: PPUSH
43516: CALL_OW 255
43520: PPUSH
43521: LD_VAR 0 1
43525: PPUSH
43526: CALL_OW 250
43530: PPUSH
43531: LD_VAR 0 1
43535: PPUSH
43536: CALL_OW 251
43540: PPUSH
43541: LD_VAR 0 2
43545: PPUSH
43546: CALL 16760 0 4
43550: PUSH
43551: LD_INT 4
43553: ARRAY
43554: ST_TO_ADDR
// end ;
43555: LD_VAR 0 3
43559: RET
// export function PlayerSeeMe ( unit ) ; begin
43560: LD_INT 0
43562: PPUSH
// result := See ( your_side , unit ) ;
43563: LD_ADDR_VAR 0 2
43567: PUSH
43568: LD_OWVAR 2
43572: PPUSH
43573: LD_VAR 0 1
43577: PPUSH
43578: CALL_OW 292
43582: ST_TO_ADDR
// end ;
43583: LD_VAR 0 2
43587: RET
// export function ReverseDir ( unit ) ; begin
43588: LD_INT 0
43590: PPUSH
// if not unit then
43591: LD_VAR 0 1
43595: NOT
43596: IFFALSE 43600
// exit ;
43598: GO 43623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43600: LD_ADDR_VAR 0 2
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 254
43614: PUSH
43615: LD_INT 3
43617: PLUS
43618: PUSH
43619: LD_INT 6
43621: MOD
43622: ST_TO_ADDR
// end ;
43623: LD_VAR 0 2
43627: RET
// export function ReverseArray ( array ) ; var i ; begin
43628: LD_INT 0
43630: PPUSH
43631: PPUSH
// if not array then
43632: LD_VAR 0 1
43636: NOT
43637: IFFALSE 43641
// exit ;
43639: GO 43696
// result := [ ] ;
43641: LD_ADDR_VAR 0 2
43645: PUSH
43646: EMPTY
43647: ST_TO_ADDR
// for i := array downto 1 do
43648: LD_ADDR_VAR 0 3
43652: PUSH
43653: DOUBLE
43654: LD_VAR 0 1
43658: INC
43659: ST_TO_ADDR
43660: LD_INT 1
43662: PUSH
43663: FOR_DOWNTO
43664: IFFALSE 43694
// result := Join ( result , array [ i ] ) ;
43666: LD_ADDR_VAR 0 2
43670: PUSH
43671: LD_VAR 0 2
43675: PPUSH
43676: LD_VAR 0 1
43680: PUSH
43681: LD_VAR 0 3
43685: ARRAY
43686: PPUSH
43687: CALL 48538 0 2
43691: ST_TO_ADDR
43692: GO 43663
43694: POP
43695: POP
// end ;
43696: LD_VAR 0 2
43700: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43701: LD_INT 0
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
// if not unit or not hexes then
43709: LD_VAR 0 1
43713: NOT
43714: IFTRUE 43723
43716: PUSH
43717: LD_VAR 0 2
43721: NOT
43722: OR
43723: IFFALSE 43727
// exit ;
43725: GO 43850
// dist := 9999 ;
43727: LD_ADDR_VAR 0 5
43731: PUSH
43732: LD_INT 9999
43734: ST_TO_ADDR
// for i = 1 to hexes do
43735: LD_ADDR_VAR 0 4
43739: PUSH
43740: DOUBLE
43741: LD_INT 1
43743: DEC
43744: ST_TO_ADDR
43745: LD_VAR 0 2
43749: PUSH
43750: FOR_TO
43751: IFFALSE 43838
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43753: LD_ADDR_VAR 0 6
43757: PUSH
43758: LD_VAR 0 1
43762: PPUSH
43763: LD_VAR 0 2
43767: PUSH
43768: LD_VAR 0 4
43772: ARRAY
43773: PUSH
43774: LD_INT 1
43776: ARRAY
43777: PPUSH
43778: LD_VAR 0 2
43782: PUSH
43783: LD_VAR 0 4
43787: ARRAY
43788: PUSH
43789: LD_INT 2
43791: ARRAY
43792: PPUSH
43793: CALL_OW 297
43797: ST_TO_ADDR
// if tdist < dist then
43798: LD_VAR 0 6
43802: PUSH
43803: LD_VAR 0 5
43807: LESS
43808: IFFALSE 43836
// begin hex := hexes [ i ] ;
43810: LD_ADDR_VAR 0 8
43814: PUSH
43815: LD_VAR 0 2
43819: PUSH
43820: LD_VAR 0 4
43824: ARRAY
43825: ST_TO_ADDR
// dist := tdist ;
43826: LD_ADDR_VAR 0 5
43830: PUSH
43831: LD_VAR 0 6
43835: ST_TO_ADDR
// end ; end ;
43836: GO 43750
43838: POP
43839: POP
// result := hex ;
43840: LD_ADDR_VAR 0 3
43844: PUSH
43845: LD_VAR 0 8
43849: ST_TO_ADDR
// end ;
43850: LD_VAR 0 3
43854: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43855: LD_INT 0
43857: PPUSH
43858: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43859: LD_VAR 0 1
43863: NOT
43864: IFTRUE 43903
43866: PUSH
43867: LD_VAR 0 1
43871: PUSH
43872: LD_INT 21
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 23
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PPUSH
43896: CALL_OW 69
43900: IN
43901: NOT
43902: OR
43903: IFFALSE 43907
// exit ;
43905: GO 43954
// for i = 1 to 3 do
43907: LD_ADDR_VAR 0 3
43911: PUSH
43912: DOUBLE
43913: LD_INT 1
43915: DEC
43916: ST_TO_ADDR
43917: LD_INT 3
43919: PUSH
43920: FOR_TO
43921: IFFALSE 43952
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 250
43932: PPUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: CALL_OW 251
43942: PPUSH
43943: LD_INT 1
43945: PPUSH
43946: CALL_OW 453
43950: GO 43920
43952: POP
43953: POP
// end ;
43954: LD_VAR 0 2
43958: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43959: LD_INT 0
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
// if not unit or not enemy_unit then
43967: LD_VAR 0 1
43971: NOT
43972: IFTRUE 43981
43974: PUSH
43975: LD_VAR 0 2
43979: NOT
43980: OR
43981: IFFALSE 43985
// exit ;
43983: GO 44456
// if GetLives ( i ) < 250 then
43985: LD_VAR 0 4
43989: PPUSH
43990: CALL_OW 256
43994: PUSH
43995: LD_INT 250
43997: LESS
43998: IFFALSE 44011
// begin ComAutodestruct ( i ) ;
44000: LD_VAR 0 4
44004: PPUSH
44005: CALL 43855 0 1
// exit ;
44009: GO 44456
// end ; x := GetX ( enemy_unit ) ;
44011: LD_ADDR_VAR 0 7
44015: PUSH
44016: LD_VAR 0 2
44020: PPUSH
44021: CALL_OW 250
44025: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44026: LD_ADDR_VAR 0 8
44030: PUSH
44031: LD_VAR 0 2
44035: PPUSH
44036: CALL_OW 251
44040: ST_TO_ADDR
// if not x or not y then
44041: LD_VAR 0 7
44045: NOT
44046: IFTRUE 44055
44048: PUSH
44049: LD_VAR 0 8
44053: NOT
44054: OR
44055: IFFALSE 44059
// exit ;
44057: GO 44456
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44059: LD_ADDR_VAR 0 6
44063: PUSH
44064: LD_VAR 0 7
44068: PPUSH
44069: LD_INT 0
44071: PPUSH
44072: LD_INT 4
44074: PPUSH
44075: CALL_OW 272
44079: PUSH
44080: LD_VAR 0 8
44084: PPUSH
44085: LD_INT 0
44087: PPUSH
44088: LD_INT 4
44090: PPUSH
44091: CALL_OW 273
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_VAR 0 7
44104: PPUSH
44105: LD_INT 1
44107: PPUSH
44108: LD_INT 4
44110: PPUSH
44111: CALL_OW 272
44115: PUSH
44116: LD_VAR 0 8
44120: PPUSH
44121: LD_INT 1
44123: PPUSH
44124: LD_INT 4
44126: PPUSH
44127: CALL_OW 273
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_VAR 0 7
44140: PPUSH
44141: LD_INT 2
44143: PPUSH
44144: LD_INT 4
44146: PPUSH
44147: CALL_OW 272
44151: PUSH
44152: LD_VAR 0 8
44156: PPUSH
44157: LD_INT 2
44159: PPUSH
44160: LD_INT 4
44162: PPUSH
44163: CALL_OW 273
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_VAR 0 7
44176: PPUSH
44177: LD_INT 3
44179: PPUSH
44180: LD_INT 4
44182: PPUSH
44183: CALL_OW 272
44187: PUSH
44188: LD_VAR 0 8
44192: PPUSH
44193: LD_INT 3
44195: PPUSH
44196: LD_INT 4
44198: PPUSH
44199: CALL_OW 273
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_VAR 0 7
44212: PPUSH
44213: LD_INT 4
44215: PPUSH
44216: LD_INT 4
44218: PPUSH
44219: CALL_OW 272
44223: PUSH
44224: LD_VAR 0 8
44228: PPUSH
44229: LD_INT 4
44231: PPUSH
44232: LD_INT 4
44234: PPUSH
44235: CALL_OW 273
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_VAR 0 7
44248: PPUSH
44249: LD_INT 5
44251: PPUSH
44252: LD_INT 4
44254: PPUSH
44255: CALL_OW 272
44259: PUSH
44260: LD_VAR 0 8
44264: PPUSH
44265: LD_INT 5
44267: PPUSH
44268: LD_INT 4
44270: PPUSH
44271: CALL_OW 273
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// for i = tmp downto 1 do
44288: LD_ADDR_VAR 0 4
44292: PUSH
44293: DOUBLE
44294: LD_VAR 0 6
44298: INC
44299: ST_TO_ADDR
44300: LD_INT 1
44302: PUSH
44303: FOR_DOWNTO
44304: IFFALSE 44407
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44306: LD_VAR 0 6
44310: PUSH
44311: LD_VAR 0 4
44315: ARRAY
44316: PUSH
44317: LD_INT 1
44319: ARRAY
44320: PPUSH
44321: LD_VAR 0 6
44325: PUSH
44326: LD_VAR 0 4
44330: ARRAY
44331: PUSH
44332: LD_INT 2
44334: ARRAY
44335: PPUSH
44336: CALL_OW 488
44340: NOT
44341: IFTRUE 44383
44343: PUSH
44344: LD_VAR 0 6
44348: PUSH
44349: LD_VAR 0 4
44353: ARRAY
44354: PUSH
44355: LD_INT 1
44357: ARRAY
44358: PPUSH
44359: LD_VAR 0 6
44363: PUSH
44364: LD_VAR 0 4
44368: ARRAY
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PPUSH
44374: CALL_OW 428
44378: PUSH
44379: LD_INT 0
44381: NONEQUAL
44382: OR
44383: IFFALSE 44405
// tmp := Delete ( tmp , i ) ;
44385: LD_ADDR_VAR 0 6
44389: PUSH
44390: LD_VAR 0 6
44394: PPUSH
44395: LD_VAR 0 4
44399: PPUSH
44400: CALL_OW 3
44404: ST_TO_ADDR
44405: GO 44303
44407: POP
44408: POP
// j := GetClosestHex ( unit , tmp ) ;
44409: LD_ADDR_VAR 0 5
44413: PUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: LD_VAR 0 6
44423: PPUSH
44424: CALL 43701 0 2
44428: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44429: LD_VAR 0 1
44433: PPUSH
44434: LD_VAR 0 5
44438: PUSH
44439: LD_INT 1
44441: ARRAY
44442: PPUSH
44443: LD_VAR 0 5
44447: PUSH
44448: LD_INT 2
44450: ARRAY
44451: PPUSH
44452: CALL_OW 111
// end ;
44456: LD_VAR 0 3
44460: RET
// export function PrepareApemanSoldier ( ) ; begin
44461: LD_INT 0
44463: PPUSH
// uc_nation := 0 ;
44464: LD_ADDR_OWVAR 21
44468: PUSH
44469: LD_INT 0
44471: ST_TO_ADDR
// hc_sex := sex_male ;
44472: LD_ADDR_OWVAR 27
44476: PUSH
44477: LD_INT 1
44479: ST_TO_ADDR
// hc_name :=  ;
44480: LD_ADDR_OWVAR 26
44484: PUSH
44485: LD_STRING 
44487: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44488: LD_ADDR_OWVAR 28
44492: PUSH
44493: LD_INT 15
44495: ST_TO_ADDR
// hc_gallery :=  ;
44496: LD_ADDR_OWVAR 33
44500: PUSH
44501: LD_STRING 
44503: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44504: LD_ADDR_OWVAR 31
44508: PUSH
44509: LD_INT 0
44511: PPUSH
44512: LD_INT 3
44514: PPUSH
44515: CALL_OW 12
44519: PUSH
44520: LD_INT 0
44522: PPUSH
44523: LD_INT 3
44525: PPUSH
44526: CALL_OW 12
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44543: LD_ADDR_OWVAR 29
44547: PUSH
44548: LD_INT 12
44550: PUSH
44551: LD_INT 12
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: ST_TO_ADDR
// end ;
44558: LD_VAR 0 1
44562: RET
// export function PrepareApemanEngineer ( ) ; begin
44563: LD_INT 0
44565: PPUSH
// uc_nation := 0 ;
44566: LD_ADDR_OWVAR 21
44570: PUSH
44571: LD_INT 0
44573: ST_TO_ADDR
// hc_sex := sex_male ;
44574: LD_ADDR_OWVAR 27
44578: PUSH
44579: LD_INT 1
44581: ST_TO_ADDR
// hc_name :=  ;
44582: LD_ADDR_OWVAR 26
44586: PUSH
44587: LD_STRING 
44589: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44590: LD_ADDR_OWVAR 28
44594: PUSH
44595: LD_INT 16
44597: ST_TO_ADDR
// hc_gallery :=  ;
44598: LD_ADDR_OWVAR 33
44602: PUSH
44603: LD_STRING 
44605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44606: LD_ADDR_OWVAR 31
44610: PUSH
44611: LD_INT 0
44613: PPUSH
44614: LD_INT 3
44616: PPUSH
44617: CALL_OW 12
44621: PUSH
44622: LD_INT 0
44624: PPUSH
44625: LD_INT 3
44627: PPUSH
44628: CALL_OW 12
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44645: LD_ADDR_OWVAR 29
44649: PUSH
44650: LD_INT 12
44652: PUSH
44653: LD_INT 12
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: ST_TO_ADDR
// end ;
44660: LD_VAR 0 1
44664: RET
// export function PrepareApeman ( agressivity ) ; begin
44665: LD_INT 0
44667: PPUSH
// uc_side := 0 ;
44668: LD_ADDR_OWVAR 20
44672: PUSH
44673: LD_INT 0
44675: ST_TO_ADDR
// uc_nation := 0 ;
44676: LD_ADDR_OWVAR 21
44680: PUSH
44681: LD_INT 0
44683: ST_TO_ADDR
// hc_sex := sex_male ;
44684: LD_ADDR_OWVAR 27
44688: PUSH
44689: LD_INT 1
44691: ST_TO_ADDR
// hc_class := class_apeman ;
44692: LD_ADDR_OWVAR 28
44696: PUSH
44697: LD_INT 12
44699: ST_TO_ADDR
// hc_gallery :=  ;
44700: LD_ADDR_OWVAR 33
44704: PUSH
44705: LD_STRING 
44707: ST_TO_ADDR
// hc_name :=  ;
44708: LD_ADDR_OWVAR 26
44712: PUSH
44713: LD_STRING 
44715: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
44716: LD_ADDR_OWVAR 29
44720: PUSH
44721: LD_INT 12
44723: PUSH
44724: LD_INT 12
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// if agressivity = 0 then
44731: LD_VAR 0 1
44735: PUSH
44736: LD_INT 0
44738: EQUAL
44739: IFFALSE 44751
// hc_agressivity := 0 else
44741: LD_ADDR_OWVAR 35
44745: PUSH
44746: LD_INT 0
44748: ST_TO_ADDR
44749: GO 44772
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44751: LD_ADDR_OWVAR 35
44755: PUSH
44756: LD_VAR 0 1
44760: NEG
44761: PPUSH
44762: LD_VAR 0 1
44766: PPUSH
44767: CALL_OW 12
44771: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44772: LD_ADDR_OWVAR 31
44776: PUSH
44777: LD_INT 0
44779: PPUSH
44780: LD_INT 3
44782: PPUSH
44783: CALL_OW 12
44787: PUSH
44788: LD_INT 0
44790: PPUSH
44791: LD_INT 3
44793: PPUSH
44794: CALL_OW 12
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: ST_TO_ADDR
// end ;
44811: LD_VAR 0 2
44815: RET
// export function PrepareTiger ( agressivity ) ; begin
44816: LD_INT 0
44818: PPUSH
// uc_side := 0 ;
44819: LD_ADDR_OWVAR 20
44823: PUSH
44824: LD_INT 0
44826: ST_TO_ADDR
// uc_nation := 0 ;
44827: LD_ADDR_OWVAR 21
44831: PUSH
44832: LD_INT 0
44834: ST_TO_ADDR
// InitHc ;
44835: CALL_OW 19
// hc_class := class_tiger ;
44839: LD_ADDR_OWVAR 28
44843: PUSH
44844: LD_INT 14
44846: ST_TO_ADDR
// hc_gallery :=  ;
44847: LD_ADDR_OWVAR 33
44851: PUSH
44852: LD_STRING 
44854: ST_TO_ADDR
// hc_name :=  ;
44855: LD_ADDR_OWVAR 26
44859: PUSH
44860: LD_STRING 
44862: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44863: LD_ADDR_OWVAR 35
44867: PUSH
44868: LD_VAR 0 1
44872: NEG
44873: PPUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: CALL_OW 12
44883: ST_TO_ADDR
// end ;
44884: LD_VAR 0 2
44888: RET
// export function PrepareEnchidna ( ) ; begin
44889: LD_INT 0
44891: PPUSH
// uc_side := 0 ;
44892: LD_ADDR_OWVAR 20
44896: PUSH
44897: LD_INT 0
44899: ST_TO_ADDR
// uc_nation := 0 ;
44900: LD_ADDR_OWVAR 21
44904: PUSH
44905: LD_INT 0
44907: ST_TO_ADDR
// InitHc ;
44908: CALL_OW 19
// hc_class := class_baggie ;
44912: LD_ADDR_OWVAR 28
44916: PUSH
44917: LD_INT 13
44919: ST_TO_ADDR
// hc_gallery :=  ;
44920: LD_ADDR_OWVAR 33
44924: PUSH
44925: LD_STRING 
44927: ST_TO_ADDR
// hc_name :=  ;
44928: LD_ADDR_OWVAR 26
44932: PUSH
44933: LD_STRING 
44935: ST_TO_ADDR
// end ;
44936: LD_VAR 0 1
44940: RET
// export function PrepareFrog ( ) ; begin
44941: LD_INT 0
44943: PPUSH
// uc_side := 0 ;
44944: LD_ADDR_OWVAR 20
44948: PUSH
44949: LD_INT 0
44951: ST_TO_ADDR
// uc_nation := 0 ;
44952: LD_ADDR_OWVAR 21
44956: PUSH
44957: LD_INT 0
44959: ST_TO_ADDR
// InitHc ;
44960: CALL_OW 19
// hc_class := class_frog ;
44964: LD_ADDR_OWVAR 28
44968: PUSH
44969: LD_INT 19
44971: ST_TO_ADDR
// hc_gallery :=  ;
44972: LD_ADDR_OWVAR 33
44976: PUSH
44977: LD_STRING 
44979: ST_TO_ADDR
// hc_name :=  ;
44980: LD_ADDR_OWVAR 26
44984: PUSH
44985: LD_STRING 
44987: ST_TO_ADDR
// end ;
44988: LD_VAR 0 1
44992: RET
// export function PrepareFish ( ) ; begin
44993: LD_INT 0
44995: PPUSH
// uc_side := 0 ;
44996: LD_ADDR_OWVAR 20
45000: PUSH
45001: LD_INT 0
45003: ST_TO_ADDR
// uc_nation := 0 ;
45004: LD_ADDR_OWVAR 21
45008: PUSH
45009: LD_INT 0
45011: ST_TO_ADDR
// InitHc ;
45012: CALL_OW 19
// hc_class := class_fish ;
45016: LD_ADDR_OWVAR 28
45020: PUSH
45021: LD_INT 20
45023: ST_TO_ADDR
// hc_gallery :=  ;
45024: LD_ADDR_OWVAR 33
45028: PUSH
45029: LD_STRING 
45031: ST_TO_ADDR
// hc_name :=  ;
45032: LD_ADDR_OWVAR 26
45036: PUSH
45037: LD_STRING 
45039: ST_TO_ADDR
// end ;
45040: LD_VAR 0 1
45044: RET
// export function PrepareBird ( ) ; begin
45045: LD_INT 0
45047: PPUSH
// uc_side := 0 ;
45048: LD_ADDR_OWVAR 20
45052: PUSH
45053: LD_INT 0
45055: ST_TO_ADDR
// uc_nation := 0 ;
45056: LD_ADDR_OWVAR 21
45060: PUSH
45061: LD_INT 0
45063: ST_TO_ADDR
// InitHc ;
45064: CALL_OW 19
// hc_class := class_phororhacos ;
45068: LD_ADDR_OWVAR 28
45072: PUSH
45073: LD_INT 18
45075: ST_TO_ADDR
// hc_gallery :=  ;
45076: LD_ADDR_OWVAR 33
45080: PUSH
45081: LD_STRING 
45083: ST_TO_ADDR
// hc_name :=  ;
45084: LD_ADDR_OWVAR 26
45088: PUSH
45089: LD_STRING 
45091: ST_TO_ADDR
// end ;
45092: LD_VAR 0 1
45096: RET
// export function PrepareHorse ( ) ; begin
45097: LD_INT 0
45099: PPUSH
// uc_side := 0 ;
45100: LD_ADDR_OWVAR 20
45104: PUSH
45105: LD_INT 0
45107: ST_TO_ADDR
// uc_nation := 0 ;
45108: LD_ADDR_OWVAR 21
45112: PUSH
45113: LD_INT 0
45115: ST_TO_ADDR
// InitHc ;
45116: CALL_OW 19
// hc_class := class_horse ;
45120: LD_ADDR_OWVAR 28
45124: PUSH
45125: LD_INT 21
45127: ST_TO_ADDR
// hc_gallery :=  ;
45128: LD_ADDR_OWVAR 33
45132: PUSH
45133: LD_STRING 
45135: ST_TO_ADDR
// hc_name :=  ;
45136: LD_ADDR_OWVAR 26
45140: PUSH
45141: LD_STRING 
45143: ST_TO_ADDR
// end ;
45144: LD_VAR 0 1
45148: RET
// export function PrepareMastodont ( ) ; begin
45149: LD_INT 0
45151: PPUSH
// uc_side := 0 ;
45152: LD_ADDR_OWVAR 20
45156: PUSH
45157: LD_INT 0
45159: ST_TO_ADDR
// uc_nation := 0 ;
45160: LD_ADDR_OWVAR 21
45164: PUSH
45165: LD_INT 0
45167: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45168: LD_ADDR_OWVAR 37
45172: PUSH
45173: LD_INT 31
45175: ST_TO_ADDR
// vc_control := control_rider ;
45176: LD_ADDR_OWVAR 38
45180: PUSH
45181: LD_INT 4
45183: ST_TO_ADDR
// end ;
45184: LD_VAR 0 1
45188: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45189: LD_INT 0
45191: PPUSH
45192: PPUSH
45193: PPUSH
// uc_side = 0 ;
45194: LD_ADDR_OWVAR 20
45198: PUSH
45199: LD_INT 0
45201: ST_TO_ADDR
// uc_nation = 0 ;
45202: LD_ADDR_OWVAR 21
45206: PUSH
45207: LD_INT 0
45209: ST_TO_ADDR
// InitHc_All ( ) ;
45210: CALL_OW 584
// InitVc ;
45214: CALL_OW 20
// if mastodonts then
45218: LD_VAR 0 6
45222: IFFALSE 45289
// for i = 1 to mastodonts do
45224: LD_ADDR_VAR 0 11
45228: PUSH
45229: DOUBLE
45230: LD_INT 1
45232: DEC
45233: ST_TO_ADDR
45234: LD_VAR 0 6
45238: PUSH
45239: FOR_TO
45240: IFFALSE 45287
// begin vc_chassis := 31 ;
45242: LD_ADDR_OWVAR 37
45246: PUSH
45247: LD_INT 31
45249: ST_TO_ADDR
// vc_control := control_rider ;
45250: LD_ADDR_OWVAR 38
45254: PUSH
45255: LD_INT 4
45257: ST_TO_ADDR
// animal := CreateVehicle ;
45258: LD_ADDR_VAR 0 12
45262: PUSH
45263: CALL_OW 45
45267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45268: LD_VAR 0 12
45272: PPUSH
45273: LD_VAR 0 8
45277: PPUSH
45278: LD_INT 0
45280: PPUSH
45281: CALL 47431 0 3
// end ;
45285: GO 45239
45287: POP
45288: POP
// if horses then
45289: LD_VAR 0 5
45293: IFFALSE 45360
// for i = 1 to horses do
45295: LD_ADDR_VAR 0 11
45299: PUSH
45300: DOUBLE
45301: LD_INT 1
45303: DEC
45304: ST_TO_ADDR
45305: LD_VAR 0 5
45309: PUSH
45310: FOR_TO
45311: IFFALSE 45358
// begin hc_class := 21 ;
45313: LD_ADDR_OWVAR 28
45317: PUSH
45318: LD_INT 21
45320: ST_TO_ADDR
// hc_gallery :=  ;
45321: LD_ADDR_OWVAR 33
45325: PUSH
45326: LD_STRING 
45328: ST_TO_ADDR
// animal := CreateHuman ;
45329: LD_ADDR_VAR 0 12
45333: PUSH
45334: CALL_OW 44
45338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45339: LD_VAR 0 12
45343: PPUSH
45344: LD_VAR 0 8
45348: PPUSH
45349: LD_INT 0
45351: PPUSH
45352: CALL 47431 0 3
// end ;
45356: GO 45310
45358: POP
45359: POP
// if birds then
45360: LD_VAR 0 1
45364: IFFALSE 45431
// for i = 1 to birds do
45366: LD_ADDR_VAR 0 11
45370: PUSH
45371: DOUBLE
45372: LD_INT 1
45374: DEC
45375: ST_TO_ADDR
45376: LD_VAR 0 1
45380: PUSH
45381: FOR_TO
45382: IFFALSE 45429
// begin hc_class := 18 ;
45384: LD_ADDR_OWVAR 28
45388: PUSH
45389: LD_INT 18
45391: ST_TO_ADDR
// hc_gallery =  ;
45392: LD_ADDR_OWVAR 33
45396: PUSH
45397: LD_STRING 
45399: ST_TO_ADDR
// animal := CreateHuman ;
45400: LD_ADDR_VAR 0 12
45404: PUSH
45405: CALL_OW 44
45409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45410: LD_VAR 0 12
45414: PPUSH
45415: LD_VAR 0 8
45419: PPUSH
45420: LD_INT 0
45422: PPUSH
45423: CALL 47431 0 3
// end ;
45427: GO 45381
45429: POP
45430: POP
// if tigers then
45431: LD_VAR 0 2
45435: IFFALSE 45519
// for i = 1 to tigers do
45437: LD_ADDR_VAR 0 11
45441: PUSH
45442: DOUBLE
45443: LD_INT 1
45445: DEC
45446: ST_TO_ADDR
45447: LD_VAR 0 2
45451: PUSH
45452: FOR_TO
45453: IFFALSE 45517
// begin hc_class = class_tiger ;
45455: LD_ADDR_OWVAR 28
45459: PUSH
45460: LD_INT 14
45462: ST_TO_ADDR
// hc_gallery =  ;
45463: LD_ADDR_OWVAR 33
45467: PUSH
45468: LD_STRING 
45470: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45471: LD_ADDR_OWVAR 35
45475: PUSH
45476: LD_INT 7
45478: NEG
45479: PPUSH
45480: LD_INT 7
45482: PPUSH
45483: CALL_OW 12
45487: ST_TO_ADDR
// animal := CreateHuman ;
45488: LD_ADDR_VAR 0 12
45492: PUSH
45493: CALL_OW 44
45497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45498: LD_VAR 0 12
45502: PPUSH
45503: LD_VAR 0 8
45507: PPUSH
45508: LD_INT 0
45510: PPUSH
45511: CALL 47431 0 3
// end ;
45515: GO 45452
45517: POP
45518: POP
// if apemans then
45519: LD_VAR 0 3
45523: IFFALSE 45646
// for i = 1 to apemans do
45525: LD_ADDR_VAR 0 11
45529: PUSH
45530: DOUBLE
45531: LD_INT 1
45533: DEC
45534: ST_TO_ADDR
45535: LD_VAR 0 3
45539: PUSH
45540: FOR_TO
45541: IFFALSE 45644
// begin hc_class = class_apeman ;
45543: LD_ADDR_OWVAR 28
45547: PUSH
45548: LD_INT 12
45550: ST_TO_ADDR
// hc_gallery =  ;
45551: LD_ADDR_OWVAR 33
45555: PUSH
45556: LD_STRING 
45558: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45559: LD_ADDR_OWVAR 35
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PPUSH
45568: LD_INT 2
45570: PPUSH
45571: CALL_OW 12
45575: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45576: LD_ADDR_OWVAR 31
45580: PUSH
45581: LD_INT 1
45583: PPUSH
45584: LD_INT 3
45586: PPUSH
45587: CALL_OW 12
45591: PUSH
45592: LD_INT 1
45594: PPUSH
45595: LD_INT 3
45597: PPUSH
45598: CALL_OW 12
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// animal := CreateHuman ;
45615: LD_ADDR_VAR 0 12
45619: PUSH
45620: CALL_OW 44
45624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45625: LD_VAR 0 12
45629: PPUSH
45630: LD_VAR 0 8
45634: PPUSH
45635: LD_INT 0
45637: PPUSH
45638: CALL 47431 0 3
// end ;
45642: GO 45540
45644: POP
45645: POP
// if enchidnas then
45646: LD_VAR 0 4
45650: IFFALSE 45717
// for i = 1 to enchidnas do
45652: LD_ADDR_VAR 0 11
45656: PUSH
45657: DOUBLE
45658: LD_INT 1
45660: DEC
45661: ST_TO_ADDR
45662: LD_VAR 0 4
45666: PUSH
45667: FOR_TO
45668: IFFALSE 45715
// begin hc_class = 13 ;
45670: LD_ADDR_OWVAR 28
45674: PUSH
45675: LD_INT 13
45677: ST_TO_ADDR
// hc_gallery =  ;
45678: LD_ADDR_OWVAR 33
45682: PUSH
45683: LD_STRING 
45685: ST_TO_ADDR
// animal := CreateHuman ;
45686: LD_ADDR_VAR 0 12
45690: PUSH
45691: CALL_OW 44
45695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45696: LD_VAR 0 12
45700: PPUSH
45701: LD_VAR 0 8
45705: PPUSH
45706: LD_INT 0
45708: PPUSH
45709: CALL 47431 0 3
// end ;
45713: GO 45667
45715: POP
45716: POP
// if fishes then
45717: LD_VAR 0 7
45721: IFFALSE 45788
// for i = 1 to fishes do
45723: LD_ADDR_VAR 0 11
45727: PUSH
45728: DOUBLE
45729: LD_INT 1
45731: DEC
45732: ST_TO_ADDR
45733: LD_VAR 0 7
45737: PUSH
45738: FOR_TO
45739: IFFALSE 45786
// begin hc_class = 20 ;
45741: LD_ADDR_OWVAR 28
45745: PUSH
45746: LD_INT 20
45748: ST_TO_ADDR
// hc_gallery =  ;
45749: LD_ADDR_OWVAR 33
45753: PUSH
45754: LD_STRING 
45756: ST_TO_ADDR
// animal := CreateHuman ;
45757: LD_ADDR_VAR 0 12
45761: PUSH
45762: CALL_OW 44
45766: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45767: LD_VAR 0 12
45771: PPUSH
45772: LD_VAR 0 9
45776: PPUSH
45777: LD_INT 0
45779: PPUSH
45780: CALL 47431 0 3
// end ;
45784: GO 45738
45786: POP
45787: POP
// end ;
45788: LD_VAR 0 10
45792: RET
// export function WantHeal ( sci , unit ) ; begin
45793: LD_INT 0
45795: PPUSH
// if GetTaskList ( sci ) > 0 then
45796: LD_VAR 0 1
45800: PPUSH
45801: CALL_OW 437
45805: PUSH
45806: LD_INT 0
45808: GREATER
45809: IFFALSE 45881
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45811: LD_VAR 0 1
45815: PPUSH
45816: CALL_OW 437
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: PUSH
45825: LD_INT 1
45827: ARRAY
45828: PUSH
45829: LD_STRING l
45831: EQUAL
45832: IFFALSE 45859
45834: PUSH
45835: LD_VAR 0 1
45839: PPUSH
45840: CALL_OW 437
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PUSH
45849: LD_INT 4
45851: ARRAY
45852: PUSH
45853: LD_VAR 0 2
45857: EQUAL
45858: AND
45859: IFFALSE 45871
// result := true else
45861: LD_ADDR_VAR 0 3
45865: PUSH
45866: LD_INT 1
45868: ST_TO_ADDR
45869: GO 45879
// result := false ;
45871: LD_ADDR_VAR 0 3
45875: PUSH
45876: LD_INT 0
45878: ST_TO_ADDR
// end else
45879: GO 45889
// result := false ;
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_INT 0
45888: ST_TO_ADDR
// end ;
45889: LD_VAR 0 3
45893: RET
// export function HealTarget ( sci ) ; begin
45894: LD_INT 0
45896: PPUSH
// if not sci then
45897: LD_VAR 0 1
45901: NOT
45902: IFFALSE 45906
// exit ;
45904: GO 45971
// result := 0 ;
45906: LD_ADDR_VAR 0 2
45910: PUSH
45911: LD_INT 0
45913: ST_TO_ADDR
// if GetTaskList ( sci ) then
45914: LD_VAR 0 1
45918: PPUSH
45919: CALL_OW 437
45923: IFFALSE 45971
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45925: LD_VAR 0 1
45929: PPUSH
45930: CALL_OW 437
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PUSH
45943: LD_STRING l
45945: EQUAL
45946: IFFALSE 45971
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45948: LD_ADDR_VAR 0 2
45952: PUSH
45953: LD_VAR 0 1
45957: PPUSH
45958: CALL_OW 437
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: PUSH
45967: LD_INT 4
45969: ARRAY
45970: ST_TO_ADDR
// end ;
45971: LD_VAR 0 2
45975: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45976: LD_INT 0
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
// if not base_units then
45982: LD_VAR 0 1
45986: NOT
45987: IFFALSE 45991
// exit ;
45989: GO 46078
// result := false ;
45991: LD_ADDR_VAR 0 2
45995: PUSH
45996: LD_INT 0
45998: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45999: LD_ADDR_VAR 0 5
46003: PUSH
46004: LD_VAR 0 1
46008: PPUSH
46009: LD_INT 21
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PPUSH
46019: CALL_OW 72
46023: ST_TO_ADDR
// if not tmp then
46024: LD_VAR 0 5
46028: NOT
46029: IFFALSE 46033
// exit ;
46031: GO 46078
// for i in tmp do
46033: LD_ADDR_VAR 0 3
46037: PUSH
46038: LD_VAR 0 5
46042: PUSH
46043: FOR_IN
46044: IFFALSE 46076
// begin result := EnemyInRange ( i , 22 ) ;
46046: LD_ADDR_VAR 0 2
46050: PUSH
46051: LD_VAR 0 3
46055: PPUSH
46056: LD_INT 22
46058: PPUSH
46059: CALL 43503 0 2
46063: ST_TO_ADDR
// if result then
46064: LD_VAR 0 2
46068: IFFALSE 46074
// exit ;
46070: POP
46071: POP
46072: GO 46078
// end ;
46074: GO 46043
46076: POP
46077: POP
// end ;
46078: LD_VAR 0 2
46082: RET
// export function FilterByTag ( units , tag ) ; begin
46083: LD_INT 0
46085: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46086: LD_ADDR_VAR 0 3
46090: PUSH
46091: LD_VAR 0 1
46095: PPUSH
46096: LD_INT 120
46098: PUSH
46099: LD_VAR 0 2
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PPUSH
46108: CALL_OW 72
46112: ST_TO_ADDR
// end ;
46113: LD_VAR 0 3
46117: RET
// export function IsDriver ( un ) ; begin
46118: LD_INT 0
46120: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46121: LD_ADDR_VAR 0 2
46125: PUSH
46126: LD_VAR 0 1
46130: PUSH
46131: LD_INT 55
46133: PUSH
46134: EMPTY
46135: LIST
46136: PPUSH
46137: CALL_OW 69
46141: IN
46142: ST_TO_ADDR
// end ;
46143: LD_VAR 0 2
46147: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46148: LD_INT 0
46150: PPUSH
46151: PPUSH
// list := [ ] ;
46152: LD_ADDR_VAR 0 5
46156: PUSH
46157: EMPTY
46158: ST_TO_ADDR
// case d of 0 :
46159: LD_VAR 0 3
46163: PUSH
46164: LD_INT 0
46166: DOUBLE
46167: EQUAL
46168: IFTRUE 46172
46170: GO 46305
46172: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46173: LD_ADDR_VAR 0 5
46177: PUSH
46178: LD_VAR 0 1
46182: PUSH
46183: LD_INT 4
46185: MINUS
46186: PUSH
46187: LD_VAR 0 2
46191: PUSH
46192: LD_INT 4
46194: MINUS
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: PUSH
46204: LD_VAR 0 1
46208: PUSH
46209: LD_INT 3
46211: MINUS
46212: PUSH
46213: LD_VAR 0 2
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: LIST
46225: PUSH
46226: LD_VAR 0 1
46230: PUSH
46231: LD_INT 4
46233: PLUS
46234: PUSH
46235: LD_VAR 0 2
46239: PUSH
46240: LD_INT 4
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: PUSH
46248: LD_VAR 0 1
46252: PUSH
46253: LD_INT 3
46255: PLUS
46256: PUSH
46257: LD_VAR 0 2
46261: PUSH
46262: LD_INT 3
46264: PLUS
46265: PUSH
46266: LD_INT 5
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: PUSH
46274: LD_VAR 0 1
46278: PUSH
46279: LD_VAR 0 2
46283: PUSH
46284: LD_INT 4
46286: PLUS
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// end ; 1 :
46303: GO 47003
46305: LD_INT 1
46307: DOUBLE
46308: EQUAL
46309: IFTRUE 46313
46311: GO 46446
46313: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46314: LD_ADDR_VAR 0 5
46318: PUSH
46319: LD_VAR 0 1
46323: PUSH
46324: LD_VAR 0 2
46328: PUSH
46329: LD_INT 4
46331: MINUS
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: PUSH
46341: LD_VAR 0 1
46345: PUSH
46346: LD_INT 3
46348: MINUS
46349: PUSH
46350: LD_VAR 0 2
46354: PUSH
46355: LD_INT 3
46357: MINUS
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: PUSH
46367: LD_VAR 0 1
46371: PUSH
46372: LD_INT 4
46374: MINUS
46375: PUSH
46376: LD_VAR 0 2
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: PUSH
46389: LD_VAR 0 1
46393: PUSH
46394: LD_VAR 0 2
46398: PUSH
46399: LD_INT 3
46401: PLUS
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: PUSH
46411: LD_VAR 0 1
46415: PUSH
46416: LD_INT 4
46418: PLUS
46419: PUSH
46420: LD_VAR 0 2
46424: PUSH
46425: LD_INT 4
46427: PLUS
46428: PUSH
46429: LD_INT 5
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// end ; 2 :
46444: GO 47003
46446: LD_INT 2
46448: DOUBLE
46449: EQUAL
46450: IFTRUE 46454
46452: GO 46583
46454: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46455: LD_ADDR_VAR 0 5
46459: PUSH
46460: LD_VAR 0 1
46464: PUSH
46465: LD_VAR 0 2
46469: PUSH
46470: LD_INT 3
46472: MINUS
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: PUSH
46482: LD_VAR 0 1
46486: PUSH
46487: LD_INT 4
46489: PLUS
46490: PUSH
46491: LD_VAR 0 2
46495: PUSH
46496: LD_INT 4
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: PUSH
46504: LD_VAR 0 1
46508: PUSH
46509: LD_VAR 0 2
46513: PUSH
46514: LD_INT 4
46516: PLUS
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: PUSH
46526: LD_VAR 0 1
46530: PUSH
46531: LD_INT 3
46533: MINUS
46534: PUSH
46535: LD_VAR 0 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: PUSH
46548: LD_VAR 0 1
46552: PUSH
46553: LD_INT 4
46555: MINUS
46556: PUSH
46557: LD_VAR 0 2
46561: PUSH
46562: LD_INT 4
46564: MINUS
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: LIST
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: ST_TO_ADDR
// end ; 3 :
46581: GO 47003
46583: LD_INT 3
46585: DOUBLE
46586: EQUAL
46587: IFTRUE 46591
46589: GO 46724
46591: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46592: LD_ADDR_VAR 0 5
46596: PUSH
46597: LD_VAR 0 1
46601: PUSH
46602: LD_INT 3
46604: PLUS
46605: PUSH
46606: LD_VAR 0 2
46610: PUSH
46611: LD_INT 4
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: LIST
46618: PUSH
46619: LD_VAR 0 1
46623: PUSH
46624: LD_INT 4
46626: PLUS
46627: PUSH
46628: LD_VAR 0 2
46632: PUSH
46633: LD_INT 4
46635: PLUS
46636: PUSH
46637: LD_INT 5
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: LIST
46644: PUSH
46645: LD_VAR 0 1
46649: PUSH
46650: LD_INT 4
46652: MINUS
46653: PUSH
46654: LD_VAR 0 2
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: PUSH
46667: LD_VAR 0 1
46671: PUSH
46672: LD_VAR 0 2
46676: PUSH
46677: LD_INT 4
46679: MINUS
46680: PUSH
46681: LD_INT 3
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: PUSH
46689: LD_VAR 0 1
46693: PUSH
46694: LD_INT 3
46696: MINUS
46697: PUSH
46698: LD_VAR 0 2
46702: PUSH
46703: LD_INT 3
46705: MINUS
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: LIST
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: ST_TO_ADDR
// end ; 4 :
46722: GO 47003
46724: LD_INT 4
46726: DOUBLE
46727: EQUAL
46728: IFTRUE 46732
46730: GO 46865
46732: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46733: LD_ADDR_VAR 0 5
46737: PUSH
46738: LD_VAR 0 1
46742: PUSH
46743: LD_VAR 0 2
46747: PUSH
46748: LD_INT 4
46750: PLUS
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: LIST
46759: PUSH
46760: LD_VAR 0 1
46764: PUSH
46765: LD_INT 3
46767: PLUS
46768: PUSH
46769: LD_VAR 0 2
46773: PUSH
46774: LD_INT 3
46776: PLUS
46777: PUSH
46778: LD_INT 5
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: LIST
46785: PUSH
46786: LD_VAR 0 1
46790: PUSH
46791: LD_INT 4
46793: PLUS
46794: PUSH
46795: LD_VAR 0 2
46799: PUSH
46800: LD_INT 4
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: LIST
46807: PUSH
46808: LD_VAR 0 1
46812: PUSH
46813: LD_VAR 0 2
46817: PUSH
46818: LD_INT 3
46820: MINUS
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: PUSH
46830: LD_VAR 0 1
46834: PUSH
46835: LD_INT 4
46837: MINUS
46838: PUSH
46839: LD_VAR 0 2
46843: PUSH
46844: LD_INT 4
46846: MINUS
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: ST_TO_ADDR
// end ; 5 :
46863: GO 47003
46865: LD_INT 5
46867: DOUBLE
46868: EQUAL
46869: IFTRUE 46873
46871: GO 47002
46873: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46874: LD_ADDR_VAR 0 5
46878: PUSH
46879: LD_VAR 0 1
46883: PUSH
46884: LD_INT 4
46886: MINUS
46887: PUSH
46888: LD_VAR 0 2
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: LIST
46900: PUSH
46901: LD_VAR 0 1
46905: PUSH
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 4
46913: MINUS
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: PUSH
46923: LD_VAR 0 1
46927: PUSH
46928: LD_INT 4
46930: PLUS
46931: PUSH
46932: LD_VAR 0 2
46936: PUSH
46937: LD_INT 4
46939: PLUS
46940: PUSH
46941: LD_INT 5
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: PUSH
46949: LD_VAR 0 1
46953: PUSH
46954: LD_INT 3
46956: PLUS
46957: PUSH
46958: LD_VAR 0 2
46962: PUSH
46963: LD_INT 4
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: PUSH
46971: LD_VAR 0 1
46975: PUSH
46976: LD_VAR 0 2
46980: PUSH
46981: LD_INT 3
46983: PLUS
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// end ; end ;
47000: GO 47003
47002: POP
// result := list ;
47003: LD_ADDR_VAR 0 4
47007: PUSH
47008: LD_VAR 0 5
47012: ST_TO_ADDR
// end ;
47013: LD_VAR 0 4
47017: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47018: LD_INT 0
47020: PPUSH
47021: PPUSH
47022: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47023: LD_VAR 0 1
47027: NOT
47028: IFTRUE 47056
47030: PUSH
47031: LD_VAR 0 2
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: LD_INT 3
47044: PUSH
47045: LD_INT 4
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: IN
47054: NOT
47055: OR
47056: IFFALSE 47060
// exit ;
47058: GO 47143
// tmp := [ ] ;
47060: LD_ADDR_VAR 0 5
47064: PUSH
47065: EMPTY
47066: ST_TO_ADDR
// for i in units do
47067: LD_ADDR_VAR 0 4
47071: PUSH
47072: LD_VAR 0 1
47076: PUSH
47077: FOR_IN
47078: IFFALSE 47112
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47080: LD_ADDR_VAR 0 5
47084: PUSH
47085: LD_VAR 0 5
47089: PPUSH
47090: LD_VAR 0 4
47094: PPUSH
47095: LD_VAR 0 2
47099: PPUSH
47100: CALL_OW 259
47104: PPUSH
47105: CALL 48538 0 2
47109: ST_TO_ADDR
47110: GO 47077
47112: POP
47113: POP
// if not tmp then
47114: LD_VAR 0 5
47118: NOT
47119: IFFALSE 47123
// exit ;
47121: GO 47143
// result := SortListByListDesc ( units , tmp ) ;
47123: LD_ADDR_VAR 0 3
47127: PUSH
47128: LD_VAR 0 1
47132: PPUSH
47133: LD_VAR 0 5
47137: PPUSH
47138: CALL_OW 77
47142: ST_TO_ADDR
// end ;
47143: LD_VAR 0 3
47147: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47148: LD_INT 0
47150: PPUSH
47151: PPUSH
47152: PPUSH
// result := false ;
47153: LD_ADDR_VAR 0 3
47157: PUSH
47158: LD_INT 0
47160: ST_TO_ADDR
// if not building then
47161: LD_VAR 0 2
47165: NOT
47166: IFFALSE 47170
// exit ;
47168: GO 47314
// x := GetX ( building ) ;
47170: LD_ADDR_VAR 0 4
47174: PUSH
47175: LD_VAR 0 2
47179: PPUSH
47180: CALL_OW 250
47184: ST_TO_ADDR
// y := GetY ( building ) ;
47185: LD_ADDR_VAR 0 5
47189: PUSH
47190: LD_VAR 0 2
47194: PPUSH
47195: CALL_OW 251
47199: ST_TO_ADDR
// if not x or not y then
47200: LD_VAR 0 4
47204: NOT
47205: IFTRUE 47214
47207: PUSH
47208: LD_VAR 0 5
47212: NOT
47213: OR
47214: IFFALSE 47218
// exit ;
47216: GO 47314
// if GetTaskList ( unit ) then
47218: LD_VAR 0 1
47222: PPUSH
47223: CALL_OW 437
47227: IFFALSE 47314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47229: LD_STRING e
47231: PUSH
47232: LD_VAR 0 1
47236: PPUSH
47237: CALL_OW 437
47241: PUSH
47242: LD_INT 1
47244: ARRAY
47245: PUSH
47246: LD_INT 1
47248: ARRAY
47249: EQUAL
47250: IFFALSE 47277
47252: PUSH
47253: LD_VAR 0 4
47257: PUSH
47258: LD_VAR 0 1
47262: PPUSH
47263: CALL_OW 437
47267: PUSH
47268: LD_INT 1
47270: ARRAY
47271: PUSH
47272: LD_INT 2
47274: ARRAY
47275: EQUAL
47276: AND
47277: IFFALSE 47304
47279: PUSH
47280: LD_VAR 0 5
47284: PUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: CALL_OW 437
47294: PUSH
47295: LD_INT 1
47297: ARRAY
47298: PUSH
47299: LD_INT 3
47301: ARRAY
47302: EQUAL
47303: AND
47304: IFFALSE 47314
// result := true end ;
47306: LD_ADDR_VAR 0 3
47310: PUSH
47311: LD_INT 1
47313: ST_TO_ADDR
// end ;
47314: LD_VAR 0 3
47318: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47319: LD_INT 0
47321: PPUSH
// result := false ;
47322: LD_ADDR_VAR 0 4
47326: PUSH
47327: LD_INT 0
47329: ST_TO_ADDR
// if GetTaskList ( unit ) then
47330: LD_VAR 0 1
47334: PPUSH
47335: CALL_OW 437
47339: IFFALSE 47426
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47341: LD_STRING M
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 437
47353: PUSH
47354: LD_INT 1
47356: ARRAY
47357: PUSH
47358: LD_INT 1
47360: ARRAY
47361: EQUAL
47362: IFFALSE 47389
47364: PUSH
47365: LD_VAR 0 2
47369: PUSH
47370: LD_VAR 0 1
47374: PPUSH
47375: CALL_OW 437
47379: PUSH
47380: LD_INT 1
47382: ARRAY
47383: PUSH
47384: LD_INT 2
47386: ARRAY
47387: EQUAL
47388: AND
47389: IFFALSE 47416
47391: PUSH
47392: LD_VAR 0 3
47396: PUSH
47397: LD_VAR 0 1
47401: PPUSH
47402: CALL_OW 437
47406: PUSH
47407: LD_INT 1
47409: ARRAY
47410: PUSH
47411: LD_INT 3
47413: ARRAY
47414: EQUAL
47415: AND
47416: IFFALSE 47426
// result := true ;
47418: LD_ADDR_VAR 0 4
47422: PUSH
47423: LD_INT 1
47425: ST_TO_ADDR
// end ; end ;
47426: LD_VAR 0 4
47430: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47431: LD_INT 0
47433: PPUSH
47434: PPUSH
47435: PPUSH
47436: PPUSH
// if not unit or not area then
47437: LD_VAR 0 1
47441: NOT
47442: IFTRUE 47451
47444: PUSH
47445: LD_VAR 0 2
47449: NOT
47450: OR
47451: IFFALSE 47455
// exit ;
47453: GO 47631
// tmp := AreaToList ( area , i ) ;
47455: LD_ADDR_VAR 0 6
47459: PUSH
47460: LD_VAR 0 2
47464: PPUSH
47465: LD_VAR 0 5
47469: PPUSH
47470: CALL_OW 517
47474: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47475: LD_ADDR_VAR 0 5
47479: PUSH
47480: DOUBLE
47481: LD_INT 1
47483: DEC
47484: ST_TO_ADDR
47485: LD_VAR 0 6
47489: PUSH
47490: LD_INT 1
47492: ARRAY
47493: PUSH
47494: FOR_TO
47495: IFFALSE 47629
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47497: LD_ADDR_VAR 0 7
47501: PUSH
47502: LD_VAR 0 6
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PUSH
47511: LD_VAR 0 5
47515: ARRAY
47516: PUSH
47517: LD_VAR 0 6
47521: PUSH
47522: LD_INT 2
47524: ARRAY
47525: PUSH
47526: LD_VAR 0 5
47530: ARRAY
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47536: LD_INT 92
47538: PUSH
47539: LD_VAR 0 7
47543: PUSH
47544: LD_INT 1
47546: ARRAY
47547: PUSH
47548: LD_VAR 0 7
47552: PUSH
47553: LD_INT 2
47555: ARRAY
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: PPUSH
47566: CALL_OW 69
47570: PUSH
47571: LD_INT 0
47573: EQUAL
47574: IFFALSE 47627
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47576: LD_VAR 0 1
47580: PPUSH
47581: LD_VAR 0 7
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: PPUSH
47590: LD_VAR 0 7
47594: PUSH
47595: LD_INT 2
47597: ARRAY
47598: PPUSH
47599: LD_VAR 0 3
47603: PPUSH
47604: CALL_OW 48
// result := IsPlaced ( unit ) ;
47608: LD_ADDR_VAR 0 4
47612: PUSH
47613: LD_VAR 0 1
47617: PPUSH
47618: CALL_OW 305
47622: ST_TO_ADDR
// exit ;
47623: POP
47624: POP
47625: GO 47631
// end ; end ;
47627: GO 47494
47629: POP
47630: POP
// end ;
47631: LD_VAR 0 4
47635: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47636: LD_INT 0
47638: PPUSH
47639: PPUSH
47640: PPUSH
// if not side or side > 8 then
47641: LD_VAR 0 1
47645: NOT
47646: IFTRUE 47658
47648: PUSH
47649: LD_VAR 0 1
47653: PUSH
47654: LD_INT 8
47656: GREATER
47657: OR
47658: IFFALSE 47662
// exit ;
47660: GO 47849
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47662: LD_ADDR_VAR 0 4
47666: PUSH
47667: LD_INT 22
47669: PUSH
47670: LD_VAR 0 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 21
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PPUSH
47693: CALL_OW 69
47697: ST_TO_ADDR
// if not tmp then
47698: LD_VAR 0 4
47702: NOT
47703: IFFALSE 47707
// exit ;
47705: GO 47849
// enable_addtolog := true ;
47707: LD_ADDR_OWVAR 81
47711: PUSH
47712: LD_INT 1
47714: ST_TO_ADDR
// AddToLog ( [ ) ;
47715: LD_STRING [
47717: PPUSH
47718: CALL_OW 561
// for i in tmp do
47722: LD_ADDR_VAR 0 3
47726: PUSH
47727: LD_VAR 0 4
47731: PUSH
47732: FOR_IN
47733: IFFALSE 47840
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47735: LD_STRING [
47737: PUSH
47738: LD_VAR 0 3
47742: PPUSH
47743: CALL_OW 266
47747: STR
47748: PUSH
47749: LD_STRING , 
47751: STR
47752: PUSH
47753: LD_VAR 0 3
47757: PPUSH
47758: CALL_OW 250
47762: STR
47763: PUSH
47764: LD_STRING , 
47766: STR
47767: PUSH
47768: LD_VAR 0 3
47772: PPUSH
47773: CALL_OW 251
47777: STR
47778: PUSH
47779: LD_STRING , 
47781: STR
47782: PUSH
47783: LD_VAR 0 3
47787: PPUSH
47788: CALL_OW 254
47792: STR
47793: PUSH
47794: LD_STRING , 
47796: STR
47797: PUSH
47798: LD_VAR 0 3
47802: PPUSH
47803: LD_INT 1
47805: PPUSH
47806: CALL_OW 268
47810: STR
47811: PUSH
47812: LD_STRING , 
47814: STR
47815: PUSH
47816: LD_VAR 0 3
47820: PPUSH
47821: LD_INT 2
47823: PPUSH
47824: CALL_OW 268
47828: STR
47829: PUSH
47830: LD_STRING ],
47832: STR
47833: PPUSH
47834: CALL_OW 561
// end ;
47838: GO 47732
47840: POP
47841: POP
// AddToLog ( ]; ) ;
47842: LD_STRING ];
47844: PPUSH
47845: CALL_OW 561
// end ;
47849: LD_VAR 0 2
47853: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47854: LD_INT 0
47856: PPUSH
47857: PPUSH
47858: PPUSH
47859: PPUSH
47860: PPUSH
// if not area or not rate or not max then
47861: LD_VAR 0 1
47865: NOT
47866: IFTRUE 47875
47868: PUSH
47869: LD_VAR 0 2
47873: NOT
47874: OR
47875: IFTRUE 47884
47877: PUSH
47878: LD_VAR 0 4
47882: NOT
47883: OR
47884: IFFALSE 47888
// exit ;
47886: GO 48077
// while 1 do
47888: LD_INT 1
47890: IFFALSE 48077
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47892: LD_ADDR_VAR 0 9
47896: PUSH
47897: LD_VAR 0 1
47901: PPUSH
47902: LD_INT 1
47904: PPUSH
47905: CALL_OW 287
47909: PUSH
47910: LD_INT 10
47912: MUL
47913: ST_TO_ADDR
// r := rate / 10 ;
47914: LD_ADDR_VAR 0 7
47918: PUSH
47919: LD_VAR 0 2
47923: PUSH
47924: LD_INT 10
47926: DIVREAL
47927: ST_TO_ADDR
// time := 1 1$00 ;
47928: LD_ADDR_VAR 0 8
47932: PUSH
47933: LD_INT 2100
47935: ST_TO_ADDR
// if amount < min then
47936: LD_VAR 0 9
47940: PUSH
47941: LD_VAR 0 3
47945: LESS
47946: IFFALSE 47964
// r := r * 2 else
47948: LD_ADDR_VAR 0 7
47952: PUSH
47953: LD_VAR 0 7
47957: PUSH
47958: LD_INT 2
47960: MUL
47961: ST_TO_ADDR
47962: GO 47990
// if amount > max then
47964: LD_VAR 0 9
47968: PUSH
47969: LD_VAR 0 4
47973: GREATER
47974: IFFALSE 47990
// r := r / 2 ;
47976: LD_ADDR_VAR 0 7
47980: PUSH
47981: LD_VAR 0 7
47985: PUSH
47986: LD_INT 2
47988: DIVREAL
47989: ST_TO_ADDR
// time := time / r ;
47990: LD_ADDR_VAR 0 8
47994: PUSH
47995: LD_VAR 0 8
47999: PUSH
48000: LD_VAR 0 7
48004: DIVREAL
48005: ST_TO_ADDR
// if time < 0 then
48006: LD_VAR 0 8
48010: PUSH
48011: LD_INT 0
48013: LESS
48014: IFFALSE 48031
// time := time * - 1 ;
48016: LD_ADDR_VAR 0 8
48020: PUSH
48021: LD_VAR 0 8
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: MUL
48030: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48031: LD_VAR 0 8
48035: PUSH
48036: LD_INT 35
48038: PPUSH
48039: LD_INT 875
48041: PPUSH
48042: CALL_OW 12
48046: PLUS
48047: PPUSH
48048: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48052: LD_INT 1
48054: PPUSH
48055: LD_INT 5
48057: PPUSH
48058: CALL_OW 12
48062: PPUSH
48063: LD_VAR 0 1
48067: PPUSH
48068: LD_INT 1
48070: PPUSH
48071: CALL_OW 55
// end ;
48075: GO 47888
// end ;
48077: LD_VAR 0 5
48081: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48082: LD_INT 0
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
// if not turrets or not factories then
48092: LD_VAR 0 1
48096: NOT
48097: IFTRUE 48106
48099: PUSH
48100: LD_VAR 0 2
48104: NOT
48105: OR
48106: IFFALSE 48110
// exit ;
48108: GO 48417
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48110: LD_ADDR_VAR 0 10
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: LD_INT 6
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 5
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 24
48152: PUSH
48153: LD_INT 25
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 23
48162: PUSH
48163: LD_INT 27
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 42
48176: PUSH
48177: LD_INT 43
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 44
48186: PUSH
48187: LD_INT 46
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 45
48196: PUSH
48197: LD_INT 47
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// result := [ ] ;
48214: LD_ADDR_VAR 0 3
48218: PUSH
48219: EMPTY
48220: ST_TO_ADDR
// for i in turrets do
48221: LD_ADDR_VAR 0 4
48225: PUSH
48226: LD_VAR 0 1
48230: PUSH
48231: FOR_IN
48232: IFFALSE 48415
// begin nat := GetNation ( i ) ;
48234: LD_ADDR_VAR 0 7
48238: PUSH
48239: LD_VAR 0 4
48243: PPUSH
48244: CALL_OW 248
48248: ST_TO_ADDR
// weapon := 0 ;
48249: LD_ADDR_VAR 0 8
48253: PUSH
48254: LD_INT 0
48256: ST_TO_ADDR
// if not nat then
48257: LD_VAR 0 7
48261: NOT
48262: IFFALSE 48266
// continue ;
48264: GO 48231
// for j in list [ nat ] do
48266: LD_ADDR_VAR 0 5
48270: PUSH
48271: LD_VAR 0 10
48275: PUSH
48276: LD_VAR 0 7
48280: ARRAY
48281: PUSH
48282: FOR_IN
48283: IFFALSE 48324
// if GetBWeapon ( i ) = j [ 1 ] then
48285: LD_VAR 0 4
48289: PPUSH
48290: CALL_OW 269
48294: PUSH
48295: LD_VAR 0 5
48299: PUSH
48300: LD_INT 1
48302: ARRAY
48303: EQUAL
48304: IFFALSE 48322
// begin weapon := j [ 2 ] ;
48306: LD_ADDR_VAR 0 8
48310: PUSH
48311: LD_VAR 0 5
48315: PUSH
48316: LD_INT 2
48318: ARRAY
48319: ST_TO_ADDR
// break ;
48320: GO 48324
// end ;
48322: GO 48282
48324: POP
48325: POP
// if not weapon then
48326: LD_VAR 0 8
48330: NOT
48331: IFFALSE 48335
// continue ;
48333: GO 48231
// for k in factories do
48335: LD_ADDR_VAR 0 6
48339: PUSH
48340: LD_VAR 0 2
48344: PUSH
48345: FOR_IN
48346: IFFALSE 48411
// begin weapons := AvailableWeaponList ( k ) ;
48348: LD_ADDR_VAR 0 9
48352: PUSH
48353: LD_VAR 0 6
48357: PPUSH
48358: CALL_OW 478
48362: ST_TO_ADDR
// if not weapons then
48363: LD_VAR 0 9
48367: NOT
48368: IFFALSE 48372
// continue ;
48370: GO 48345
// if weapon in weapons then
48372: LD_VAR 0 8
48376: PUSH
48377: LD_VAR 0 9
48381: IN
48382: IFFALSE 48409
// begin result := [ i , weapon ] ;
48384: LD_ADDR_VAR 0 3
48388: PUSH
48389: LD_VAR 0 4
48393: PUSH
48394: LD_VAR 0 8
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: ST_TO_ADDR
// exit ;
48403: POP
48404: POP
48405: POP
48406: POP
48407: GO 48417
// end ; end ;
48409: GO 48345
48411: POP
48412: POP
// end ;
48413: GO 48231
48415: POP
48416: POP
// end ;
48417: LD_VAR 0 3
48421: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48422: LD_INT 0
48424: PPUSH
// if not side or side > 8 then
48425: LD_VAR 0 3
48429: NOT
48430: IFTRUE 48442
48432: PUSH
48433: LD_VAR 0 3
48437: PUSH
48438: LD_INT 8
48440: GREATER
48441: OR
48442: IFFALSE 48446
// exit ;
48444: GO 48505
// if not range then
48446: LD_VAR 0 4
48450: NOT
48451: IFFALSE 48462
// range := - 12 ;
48453: LD_ADDR_VAR 0 4
48457: PUSH
48458: LD_INT 12
48460: NEG
48461: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48462: LD_VAR 0 1
48466: PPUSH
48467: LD_VAR 0 2
48471: PPUSH
48472: LD_VAR 0 3
48476: PPUSH
48477: LD_VAR 0 4
48481: PPUSH
48482: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48486: LD_VAR 0 1
48490: PPUSH
48491: LD_VAR 0 2
48495: PPUSH
48496: LD_VAR 0 3
48500: PPUSH
48501: CALL_OW 331
// end ;
48505: LD_VAR 0 5
48509: RET
// export function Video ( mode ) ; begin
48510: LD_INT 0
48512: PPUSH
// ingame_video = mode ;
48513: LD_ADDR_OWVAR 52
48517: PUSH
48518: LD_VAR 0 1
48522: ST_TO_ADDR
// interface_hidden = mode ;
48523: LD_ADDR_OWVAR 54
48527: PUSH
48528: LD_VAR 0 1
48532: ST_TO_ADDR
// end ;
48533: LD_VAR 0 2
48537: RET
// export function Join ( array , element ) ; begin
48538: LD_INT 0
48540: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48541: LD_ADDR_VAR 0 3
48545: PUSH
48546: LD_VAR 0 1
48550: PPUSH
48551: LD_VAR 0 1
48555: PUSH
48556: LD_INT 1
48558: PLUS
48559: PPUSH
48560: LD_VAR 0 2
48564: PPUSH
48565: CALL_OW 1
48569: ST_TO_ADDR
// end ;
48570: LD_VAR 0 3
48574: RET
// export function JoinUnion ( array , element ) ; begin
48575: LD_INT 0
48577: PPUSH
// result := array union element ;
48578: LD_ADDR_VAR 0 3
48582: PUSH
48583: LD_VAR 0 1
48587: PUSH
48588: LD_VAR 0 2
48592: UNION
48593: ST_TO_ADDR
// end ;
48594: LD_VAR 0 3
48598: RET
// export function GetBehemoths ( side ) ; begin
48599: LD_INT 0
48601: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48602: LD_ADDR_VAR 0 2
48606: PUSH
48607: LD_INT 22
48609: PUSH
48610: LD_VAR 0 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 31
48621: PUSH
48622: LD_INT 25
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PPUSH
48633: CALL_OW 69
48637: ST_TO_ADDR
// end ;
48638: LD_VAR 0 2
48642: RET
// export function Shuffle ( array ) ; var i , index ; begin
48643: LD_INT 0
48645: PPUSH
48646: PPUSH
48647: PPUSH
// result := [ ] ;
48648: LD_ADDR_VAR 0 2
48652: PUSH
48653: EMPTY
48654: ST_TO_ADDR
// if not array then
48655: LD_VAR 0 1
48659: NOT
48660: IFFALSE 48664
// exit ;
48662: GO 48763
// Randomize ;
48664: CALL_OW 10
// for i = array downto 1 do
48668: LD_ADDR_VAR 0 3
48672: PUSH
48673: DOUBLE
48674: LD_VAR 0 1
48678: INC
48679: ST_TO_ADDR
48680: LD_INT 1
48682: PUSH
48683: FOR_DOWNTO
48684: IFFALSE 48761
// begin index := rand ( 1 , array ) ;
48686: LD_ADDR_VAR 0 4
48690: PUSH
48691: LD_INT 1
48693: PPUSH
48694: LD_VAR 0 1
48698: PPUSH
48699: CALL_OW 12
48703: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48704: LD_ADDR_VAR 0 2
48708: PUSH
48709: LD_VAR 0 2
48713: PPUSH
48714: LD_VAR 0 2
48718: PUSH
48719: LD_INT 1
48721: PLUS
48722: PPUSH
48723: LD_VAR 0 1
48727: PUSH
48728: LD_VAR 0 4
48732: ARRAY
48733: PPUSH
48734: CALL_OW 2
48738: ST_TO_ADDR
// array := Delete ( array , index ) ;
48739: LD_ADDR_VAR 0 1
48743: PUSH
48744: LD_VAR 0 1
48748: PPUSH
48749: LD_VAR 0 4
48753: PPUSH
48754: CALL_OW 3
48758: ST_TO_ADDR
// end ;
48759: GO 48683
48761: POP
48762: POP
// end ;
48763: LD_VAR 0 2
48767: RET
// export function GetBaseMaterials ( base ) ; begin
48768: LD_INT 0
48770: PPUSH
// result := [ 0 , 0 , 0 ] ;
48771: LD_ADDR_VAR 0 2
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: LIST
48789: ST_TO_ADDR
// if not base then
48790: LD_VAR 0 1
48794: NOT
48795: IFFALSE 48799
// exit ;
48797: GO 48848
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48799: LD_ADDR_VAR 0 2
48803: PUSH
48804: LD_VAR 0 1
48808: PPUSH
48809: LD_INT 1
48811: PPUSH
48812: CALL_OW 275
48816: PUSH
48817: LD_VAR 0 1
48821: PPUSH
48822: LD_INT 2
48824: PPUSH
48825: CALL_OW 275
48829: PUSH
48830: LD_VAR 0 1
48834: PPUSH
48835: LD_INT 3
48837: PPUSH
48838: CALL_OW 275
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 2
48852: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48853: LD_INT 0
48855: PPUSH
48856: PPUSH
// result := array ;
48857: LD_ADDR_VAR 0 3
48861: PUSH
48862: LD_VAR 0 1
48866: ST_TO_ADDR
// if size >= result then
48867: LD_VAR 0 2
48871: PUSH
48872: LD_VAR 0 3
48876: GREATEREQUAL
48877: IFFALSE 48881
// exit ;
48879: GO 48931
// if size then
48881: LD_VAR 0 2
48885: IFFALSE 48931
// for i := array downto size do
48887: LD_ADDR_VAR 0 4
48891: PUSH
48892: DOUBLE
48893: LD_VAR 0 1
48897: INC
48898: ST_TO_ADDR
48899: LD_VAR 0 2
48903: PUSH
48904: FOR_DOWNTO
48905: IFFALSE 48929
// result := Delete ( result , result ) ;
48907: LD_ADDR_VAR 0 3
48911: PUSH
48912: LD_VAR 0 3
48916: PPUSH
48917: LD_VAR 0 3
48921: PPUSH
48922: CALL_OW 3
48926: ST_TO_ADDR
48927: GO 48904
48929: POP
48930: POP
// end ;
48931: LD_VAR 0 3
48935: RET
// export function ComExit ( unit ) ; var tmp ; begin
48936: LD_INT 0
48938: PPUSH
48939: PPUSH
// if not IsInUnit ( unit ) then
48940: LD_VAR 0 1
48944: PPUSH
48945: CALL_OW 310
48949: NOT
48950: IFFALSE 48954
// exit ;
48952: GO 49014
// tmp := IsInUnit ( unit ) ;
48954: LD_ADDR_VAR 0 3
48958: PUSH
48959: LD_VAR 0 1
48963: PPUSH
48964: CALL_OW 310
48968: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48969: LD_VAR 0 3
48973: PPUSH
48974: CALL_OW 247
48978: PUSH
48979: LD_INT 2
48981: EQUAL
48982: IFFALSE 48995
// ComExitVehicle ( unit ) else
48984: LD_VAR 0 1
48988: PPUSH
48989: CALL_OW 121
48993: GO 49004
// ComExitBuilding ( unit ) ;
48995: LD_VAR 0 1
48999: PPUSH
49000: CALL_OW 122
// result := tmp ;
49004: LD_ADDR_VAR 0 2
49008: PUSH
49009: LD_VAR 0 3
49013: ST_TO_ADDR
// end ;
49014: LD_VAR 0 2
49018: RET
// export function ComExitAll ( units ) ; var i ; begin
49019: LD_INT 0
49021: PPUSH
49022: PPUSH
// if not units then
49023: LD_VAR 0 1
49027: NOT
49028: IFFALSE 49032
// exit ;
49030: GO 49058
// for i in units do
49032: LD_ADDR_VAR 0 3
49036: PUSH
49037: LD_VAR 0 1
49041: PUSH
49042: FOR_IN
49043: IFFALSE 49056
// ComExit ( i ) ;
49045: LD_VAR 0 3
49049: PPUSH
49050: CALL 48936 0 1
49054: GO 49042
49056: POP
49057: POP
// end ;
49058: LD_VAR 0 2
49062: RET
// export function ResetHc ; begin
49063: LD_INT 0
49065: PPUSH
// InitHc ;
49066: CALL_OW 19
// hc_importance := 0 ;
49070: LD_ADDR_OWVAR 32
49074: PUSH
49075: LD_INT 0
49077: ST_TO_ADDR
// end ;
49078: LD_VAR 0 1
49082: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49083: LD_INT 0
49085: PPUSH
49086: PPUSH
49087: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49088: LD_ADDR_VAR 0 6
49092: PUSH
49093: LD_VAR 0 1
49097: PUSH
49098: LD_VAR 0 3
49102: PLUS
49103: PUSH
49104: LD_INT 2
49106: DIV
49107: ST_TO_ADDR
// if _x < 0 then
49108: LD_VAR 0 6
49112: PUSH
49113: LD_INT 0
49115: LESS
49116: IFFALSE 49133
// _x := _x * - 1 ;
49118: LD_ADDR_VAR 0 6
49122: PUSH
49123: LD_VAR 0 6
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: MUL
49132: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49133: LD_ADDR_VAR 0 7
49137: PUSH
49138: LD_VAR 0 2
49142: PUSH
49143: LD_VAR 0 4
49147: PLUS
49148: PUSH
49149: LD_INT 2
49151: DIV
49152: ST_TO_ADDR
// if _y < 0 then
49153: LD_VAR 0 7
49157: PUSH
49158: LD_INT 0
49160: LESS
49161: IFFALSE 49178
// _y := _y * - 1 ;
49163: LD_ADDR_VAR 0 7
49167: PUSH
49168: LD_VAR 0 7
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: MUL
49177: ST_TO_ADDR
// result := [ _x , _y ] ;
49178: LD_ADDR_VAR 0 5
49182: PUSH
49183: LD_VAR 0 6
49187: PUSH
49188: LD_VAR 0 7
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: ST_TO_ADDR
// end ;
49197: LD_VAR 0 5
49201: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49202: LD_INT 0
49204: PPUSH
49205: PPUSH
49206: PPUSH
49207: PPUSH
// task := GetTaskList ( unit ) ;
49208: LD_ADDR_VAR 0 7
49212: PUSH
49213: LD_VAR 0 1
49217: PPUSH
49218: CALL_OW 437
49222: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49223: LD_VAR 0 7
49227: NOT
49228: IFFALSE 49247
49230: PUSH
49231: LD_VAR 0 1
49235: PPUSH
49236: LD_VAR 0 2
49240: PPUSH
49241: CALL_OW 308
49245: NOT
49246: AND
49247: IFFALSE 49251
// exit ;
49249: GO 49369
// if IsInArea ( unit , area ) then
49251: LD_VAR 0 1
49255: PPUSH
49256: LD_VAR 0 2
49260: PPUSH
49261: CALL_OW 308
49265: IFFALSE 49283
// begin ComMoveToArea ( unit , goAway ) ;
49267: LD_VAR 0 1
49271: PPUSH
49272: LD_VAR 0 3
49276: PPUSH
49277: CALL_OW 113
// exit ;
49281: GO 49369
// end ; if task [ 1 ] [ 1 ] <> M then
49283: LD_VAR 0 7
49287: PUSH
49288: LD_INT 1
49290: ARRAY
49291: PUSH
49292: LD_INT 1
49294: ARRAY
49295: PUSH
49296: LD_STRING M
49298: NONEQUAL
49299: IFFALSE 49303
// exit ;
49301: GO 49369
// x := task [ 1 ] [ 2 ] ;
49303: LD_ADDR_VAR 0 5
49307: PUSH
49308: LD_VAR 0 7
49312: PUSH
49313: LD_INT 1
49315: ARRAY
49316: PUSH
49317: LD_INT 2
49319: ARRAY
49320: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49321: LD_ADDR_VAR 0 6
49325: PUSH
49326: LD_VAR 0 7
49330: PUSH
49331: LD_INT 1
49333: ARRAY
49334: PUSH
49335: LD_INT 3
49337: ARRAY
49338: ST_TO_ADDR
// if InArea ( x , y , area ) then
49339: LD_VAR 0 5
49343: PPUSH
49344: LD_VAR 0 6
49348: PPUSH
49349: LD_VAR 0 2
49353: PPUSH
49354: CALL_OW 309
49358: IFFALSE 49369
// ComStop ( unit ) ;
49360: LD_VAR 0 1
49364: PPUSH
49365: CALL_OW 141
// end ;
49369: LD_VAR 0 4
49373: RET
// export function Abs ( value ) ; begin
49374: LD_INT 0
49376: PPUSH
// result := value ;
49377: LD_ADDR_VAR 0 2
49381: PUSH
49382: LD_VAR 0 1
49386: ST_TO_ADDR
// if value < 0 then
49387: LD_VAR 0 1
49391: PUSH
49392: LD_INT 0
49394: LESS
49395: IFFALSE 49412
// result := value * - 1 ;
49397: LD_ADDR_VAR 0 2
49401: PUSH
49402: LD_VAR 0 1
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: MUL
49411: ST_TO_ADDR
// end ;
49412: LD_VAR 0 2
49416: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49417: LD_INT 0
49419: PPUSH
49420: PPUSH
49421: PPUSH
49422: PPUSH
49423: PPUSH
49424: PPUSH
49425: PPUSH
49426: PPUSH
// if not unit or not building then
49427: LD_VAR 0 1
49431: NOT
49432: IFTRUE 49441
49434: PUSH
49435: LD_VAR 0 2
49439: NOT
49440: OR
49441: IFFALSE 49445
// exit ;
49443: GO 49673
// x := GetX ( building ) ;
49445: LD_ADDR_VAR 0 4
49449: PUSH
49450: LD_VAR 0 2
49454: PPUSH
49455: CALL_OW 250
49459: ST_TO_ADDR
// y := GetY ( building ) ;
49460: LD_ADDR_VAR 0 6
49464: PUSH
49465: LD_VAR 0 2
49469: PPUSH
49470: CALL_OW 251
49474: ST_TO_ADDR
// d := GetDir ( building ) ;
49475: LD_ADDR_VAR 0 8
49479: PUSH
49480: LD_VAR 0 2
49484: PPUSH
49485: CALL_OW 254
49489: ST_TO_ADDR
// r := 4 ;
49490: LD_ADDR_VAR 0 9
49494: PUSH
49495: LD_INT 4
49497: ST_TO_ADDR
// for i := 1 to 5 do
49498: LD_ADDR_VAR 0 10
49502: PUSH
49503: DOUBLE
49504: LD_INT 1
49506: DEC
49507: ST_TO_ADDR
49508: LD_INT 5
49510: PUSH
49511: FOR_TO
49512: IFFALSE 49671
// begin _x := ShiftX ( x , d , r + i ) ;
49514: LD_ADDR_VAR 0 5
49518: PUSH
49519: LD_VAR 0 4
49523: PPUSH
49524: LD_VAR 0 8
49528: PPUSH
49529: LD_VAR 0 9
49533: PUSH
49534: LD_VAR 0 10
49538: PLUS
49539: PPUSH
49540: CALL_OW 272
49544: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49545: LD_ADDR_VAR 0 7
49549: PUSH
49550: LD_VAR 0 6
49554: PPUSH
49555: LD_VAR 0 8
49559: PPUSH
49560: LD_VAR 0 9
49564: PUSH
49565: LD_VAR 0 10
49569: PLUS
49570: PPUSH
49571: CALL_OW 273
49575: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49576: LD_VAR 0 5
49580: PPUSH
49581: LD_VAR 0 7
49585: PPUSH
49586: CALL_OW 488
49590: IFFALSE 49625
49592: PUSH
49593: LD_VAR 0 5
49597: PPUSH
49598: LD_VAR 0 7
49602: PPUSH
49603: CALL_OW 428
49607: PPUSH
49608: CALL_OW 247
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: IN
49623: NOT
49624: AND
49625: IFFALSE 49669
// begin ComMoveXY ( unit , _x , _y ) ;
49627: LD_VAR 0 1
49631: PPUSH
49632: LD_VAR 0 5
49636: PPUSH
49637: LD_VAR 0 7
49641: PPUSH
49642: CALL_OW 111
// result := [ _x , _y ] ;
49646: LD_ADDR_VAR 0 3
49650: PUSH
49651: LD_VAR 0 5
49655: PUSH
49656: LD_VAR 0 7
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: ST_TO_ADDR
// exit ;
49665: POP
49666: POP
49667: GO 49673
// end ; end ;
49669: GO 49511
49671: POP
49672: POP
// end ;
49673: LD_VAR 0 3
49677: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49678: LD_INT 0
49680: PPUSH
49681: PPUSH
49682: PPUSH
// result := 0 ;
49683: LD_ADDR_VAR 0 3
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49691: LD_VAR 0 1
49695: PUSH
49696: LD_INT 0
49698: LESS
49699: IFTRUE 49711
49701: PUSH
49702: LD_VAR 0 1
49706: PUSH
49707: LD_INT 8
49709: GREATER
49710: OR
49711: IFTRUE 49723
49713: PUSH
49714: LD_VAR 0 2
49718: PUSH
49719: LD_INT 0
49721: LESS
49722: OR
49723: IFTRUE 49735
49725: PUSH
49726: LD_VAR 0 2
49730: PUSH
49731: LD_INT 8
49733: GREATER
49734: OR
49735: IFFALSE 49739
// exit ;
49737: GO 49814
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49739: LD_ADDR_VAR 0 4
49743: PUSH
49744: LD_INT 22
49746: PUSH
49747: LD_VAR 0 2
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PPUSH
49756: CALL_OW 69
49760: PUSH
49761: FOR_IN
49762: IFFALSE 49812
// begin un := UnitShoot ( i ) ;
49764: LD_ADDR_VAR 0 5
49768: PUSH
49769: LD_VAR 0 4
49773: PPUSH
49774: CALL_OW 504
49778: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49779: LD_VAR 0 5
49783: PPUSH
49784: CALL_OW 255
49788: PUSH
49789: LD_VAR 0 1
49793: EQUAL
49794: IFFALSE 49810
// begin result := un ;
49796: LD_ADDR_VAR 0 3
49800: PUSH
49801: LD_VAR 0 5
49805: ST_TO_ADDR
// exit ;
49806: POP
49807: POP
49808: GO 49814
// end ; end ;
49810: GO 49761
49812: POP
49813: POP
// end ;
49814: LD_VAR 0 3
49818: RET
// export function GetCargoBay ( units ) ; begin
49819: LD_INT 0
49821: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49822: LD_ADDR_VAR 0 2
49826: PUSH
49827: LD_VAR 0 1
49831: PPUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 34
49837: PUSH
49838: LD_INT 12
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 34
49847: PUSH
49848: LD_INT 51
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 34
49857: PUSH
49858: LD_INT 32
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 34
49867: PUSH
49868: LD_INT 89
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: PPUSH
49882: CALL_OW 72
49886: ST_TO_ADDR
// end ;
49887: LD_VAR 0 2
49891: RET
// export function Negate ( value ) ; begin
49892: LD_INT 0
49894: PPUSH
// result := not value ;
49895: LD_ADDR_VAR 0 2
49899: PUSH
49900: LD_VAR 0 1
49904: NOT
49905: ST_TO_ADDR
// end ;
49906: LD_VAR 0 2
49910: RET
// export function Inc ( value ) ; begin
49911: LD_INT 0
49913: PPUSH
// result := value + 1 ;
49914: LD_ADDR_VAR 0 2
49918: PUSH
49919: LD_VAR 0 1
49923: PUSH
49924: LD_INT 1
49926: PLUS
49927: ST_TO_ADDR
// end ;
49928: LD_VAR 0 2
49932: RET
// export function Dec ( value ) ; begin
49933: LD_INT 0
49935: PPUSH
// result := value - 1 ;
49936: LD_ADDR_VAR 0 2
49940: PUSH
49941: LD_VAR 0 1
49945: PUSH
49946: LD_INT 1
49948: MINUS
49949: ST_TO_ADDR
// end ;
49950: LD_VAR 0 2
49954: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49955: LD_INT 0
49957: PPUSH
49958: PPUSH
49959: PPUSH
49960: PPUSH
49961: PPUSH
49962: PPUSH
49963: PPUSH
49964: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49965: LD_VAR 0 1
49969: PPUSH
49970: LD_VAR 0 2
49974: PPUSH
49975: CALL_OW 488
49979: NOT
49980: IFTRUE 49999
49982: PUSH
49983: LD_VAR 0 3
49987: PPUSH
49988: LD_VAR 0 4
49992: PPUSH
49993: CALL_OW 488
49997: NOT
49998: OR
49999: IFFALSE 50012
// begin result := - 1 ;
50001: LD_ADDR_VAR 0 5
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: ST_TO_ADDR
// exit ;
50010: GO 50247
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50012: LD_ADDR_VAR 0 12
50016: PUSH
50017: LD_VAR 0 1
50021: PPUSH
50022: LD_VAR 0 2
50026: PPUSH
50027: LD_VAR 0 3
50031: PPUSH
50032: LD_VAR 0 4
50036: PPUSH
50037: CALL 49083 0 4
50041: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50042: LD_ADDR_VAR 0 11
50046: PUSH
50047: LD_VAR 0 1
50051: PPUSH
50052: LD_VAR 0 2
50056: PPUSH
50057: LD_VAR 0 12
50061: PUSH
50062: LD_INT 1
50064: ARRAY
50065: PPUSH
50066: LD_VAR 0 12
50070: PUSH
50071: LD_INT 2
50073: ARRAY
50074: PPUSH
50075: CALL_OW 298
50079: ST_TO_ADDR
// distance := 9999 ;
50080: LD_ADDR_VAR 0 10
50084: PUSH
50085: LD_INT 9999
50087: ST_TO_ADDR
// for i := 0 to 5 do
50088: LD_ADDR_VAR 0 6
50092: PUSH
50093: DOUBLE
50094: LD_INT 0
50096: DEC
50097: ST_TO_ADDR
50098: LD_INT 5
50100: PUSH
50101: FOR_TO
50102: IFFALSE 50245
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50104: LD_ADDR_VAR 0 7
50108: PUSH
50109: LD_VAR 0 1
50113: PPUSH
50114: LD_VAR 0 6
50118: PPUSH
50119: LD_VAR 0 11
50123: PPUSH
50124: CALL_OW 272
50128: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50129: LD_ADDR_VAR 0 8
50133: PUSH
50134: LD_VAR 0 2
50138: PPUSH
50139: LD_VAR 0 6
50143: PPUSH
50144: LD_VAR 0 11
50148: PPUSH
50149: CALL_OW 273
50153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50154: LD_VAR 0 7
50158: PPUSH
50159: LD_VAR 0 8
50163: PPUSH
50164: CALL_OW 488
50168: NOT
50169: IFFALSE 50173
// continue ;
50171: GO 50101
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50173: LD_ADDR_VAR 0 9
50177: PUSH
50178: LD_VAR 0 12
50182: PUSH
50183: LD_INT 1
50185: ARRAY
50186: PPUSH
50187: LD_VAR 0 12
50191: PUSH
50192: LD_INT 2
50194: ARRAY
50195: PPUSH
50196: LD_VAR 0 7
50200: PPUSH
50201: LD_VAR 0 8
50205: PPUSH
50206: CALL_OW 298
50210: ST_TO_ADDR
// if tmp < distance then
50211: LD_VAR 0 9
50215: PUSH
50216: LD_VAR 0 10
50220: LESS
50221: IFFALSE 50243
// begin result := i ;
50223: LD_ADDR_VAR 0 5
50227: PUSH
50228: LD_VAR 0 6
50232: ST_TO_ADDR
// distance := tmp ;
50233: LD_ADDR_VAR 0 10
50237: PUSH
50238: LD_VAR 0 9
50242: ST_TO_ADDR
// end ; end ;
50243: GO 50101
50245: POP
50246: POP
// end ;
50247: LD_VAR 0 5
50251: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50252: LD_INT 0
50254: PPUSH
50255: PPUSH
// if not driver or not IsInUnit ( driver ) then
50256: LD_VAR 0 1
50260: NOT
50261: IFTRUE 50275
50263: PUSH
50264: LD_VAR 0 1
50268: PPUSH
50269: CALL_OW 310
50273: NOT
50274: OR
50275: IFFALSE 50279
// exit ;
50277: GO 50369
// vehicle := IsInUnit ( driver ) ;
50279: LD_ADDR_VAR 0 3
50283: PUSH
50284: LD_VAR 0 1
50288: PPUSH
50289: CALL_OW 310
50293: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50294: LD_VAR 0 1
50298: PPUSH
50299: LD_STRING \
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: PUSH
50329: LD_STRING E
50331: PUSH
50332: LD_INT 0
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_VAR 0 3
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PPUSH
50365: CALL_OW 446
// end ;
50369: LD_VAR 0 2
50373: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50374: LD_INT 0
50376: PPUSH
50377: PPUSH
// if not driver or not IsInUnit ( driver ) then
50378: LD_VAR 0 1
50382: NOT
50383: IFTRUE 50397
50385: PUSH
50386: LD_VAR 0 1
50390: PPUSH
50391: CALL_OW 310
50395: NOT
50396: OR
50397: IFFALSE 50401
// exit ;
50399: GO 50491
// vehicle := IsInUnit ( driver ) ;
50401: LD_ADDR_VAR 0 3
50405: PUSH
50406: LD_VAR 0 1
50410: PPUSH
50411: CALL_OW 310
50415: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50416: LD_VAR 0 1
50420: PPUSH
50421: LD_STRING \
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: PUSH
50451: LD_STRING E
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_VAR 0 3
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PPUSH
50487: CALL_OW 447
// end ;
50491: LD_VAR 0 2
50495: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50496: LD_INT 0
50498: PPUSH
50499: PPUSH
50500: PPUSH
// tmp := [ ] ;
50501: LD_ADDR_VAR 0 5
50505: PUSH
50506: EMPTY
50507: ST_TO_ADDR
// for i in units do
50508: LD_ADDR_VAR 0 4
50512: PUSH
50513: LD_VAR 0 1
50517: PUSH
50518: FOR_IN
50519: IFFALSE 50557
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50521: LD_ADDR_VAR 0 5
50525: PUSH
50526: LD_VAR 0 5
50530: PPUSH
50531: LD_VAR 0 5
50535: PUSH
50536: LD_INT 1
50538: PLUS
50539: PPUSH
50540: LD_VAR 0 4
50544: PPUSH
50545: CALL_OW 256
50549: PPUSH
50550: CALL_OW 2
50554: ST_TO_ADDR
50555: GO 50518
50557: POP
50558: POP
// if not tmp then
50559: LD_VAR 0 5
50563: NOT
50564: IFFALSE 50568
// exit ;
50566: GO 50616
// if asc then
50568: LD_VAR 0 2
50572: IFFALSE 50596
// result := SortListByListAsc ( units , tmp ) else
50574: LD_ADDR_VAR 0 3
50578: PUSH
50579: LD_VAR 0 1
50583: PPUSH
50584: LD_VAR 0 5
50588: PPUSH
50589: CALL_OW 76
50593: ST_TO_ADDR
50594: GO 50616
// result := SortListByListDesc ( units , tmp ) ;
50596: LD_ADDR_VAR 0 3
50600: PUSH
50601: LD_VAR 0 1
50605: PPUSH
50606: LD_VAR 0 5
50610: PPUSH
50611: CALL_OW 77
50615: ST_TO_ADDR
// end ;
50616: LD_VAR 0 3
50620: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50621: LD_INT 0
50623: PPUSH
50624: PPUSH
// task := GetTaskList ( mech ) ;
50625: LD_ADDR_VAR 0 4
50629: PUSH
50630: LD_VAR 0 1
50634: PPUSH
50635: CALL_OW 437
50639: ST_TO_ADDR
// if not task then
50640: LD_VAR 0 4
50644: NOT
50645: IFFALSE 50649
// exit ;
50647: GO 50693
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50649: LD_ADDR_VAR 0 3
50653: PUSH
50654: LD_VAR 0 4
50658: PUSH
50659: LD_INT 1
50661: ARRAY
50662: PUSH
50663: LD_INT 1
50665: ARRAY
50666: PUSH
50667: LD_STRING r
50669: EQUAL
50670: IFFALSE 50692
50672: PUSH
50673: LD_VAR 0 4
50677: PUSH
50678: LD_INT 1
50680: ARRAY
50681: PUSH
50682: LD_INT 4
50684: ARRAY
50685: PUSH
50686: LD_VAR 0 2
50690: EQUAL
50691: AND
50692: ST_TO_ADDR
// end ;
50693: LD_VAR 0 3
50697: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50698: LD_INT 0
50700: PPUSH
// SetDir ( unit , d ) ;
50701: LD_VAR 0 1
50705: PPUSH
50706: LD_VAR 0 4
50710: PPUSH
50711: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50715: LD_ADDR_VAR 0 6
50719: PUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: LD_VAR 0 2
50729: PPUSH
50730: LD_VAR 0 3
50734: PPUSH
50735: LD_VAR 0 5
50739: PPUSH
50740: CALL_OW 48
50744: ST_TO_ADDR
// end ;
50745: LD_VAR 0 6
50749: RET
// export function ToNaturalNumber ( number ) ; begin
50750: LD_INT 0
50752: PPUSH
// result := number div 1 ;
50753: LD_ADDR_VAR 0 2
50757: PUSH
50758: LD_VAR 0 1
50762: PUSH
50763: LD_INT 1
50765: DIV
50766: ST_TO_ADDR
// if number < 0 then
50767: LD_VAR 0 1
50771: PUSH
50772: LD_INT 0
50774: LESS
50775: IFFALSE 50785
// result := 0 ;
50777: LD_ADDR_VAR 0 2
50781: PUSH
50782: LD_INT 0
50784: ST_TO_ADDR
// end ;
50785: LD_VAR 0 2
50789: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50790: LD_INT 0
50792: PPUSH
50793: PPUSH
50794: PPUSH
// if not buildings then
50795: LD_VAR 0 1
50799: NOT
50800: IFFALSE 50804
// exit ;
50802: GO 50919
// tmp := [ ] ;
50804: LD_ADDR_VAR 0 5
50808: PUSH
50809: EMPTY
50810: ST_TO_ADDR
// for b in buildings do
50811: LD_ADDR_VAR 0 4
50815: PUSH
50816: LD_VAR 0 1
50820: PUSH
50821: FOR_IN
50822: IFFALSE 50860
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50824: LD_ADDR_VAR 0 5
50828: PUSH
50829: LD_VAR 0 5
50833: PPUSH
50834: LD_VAR 0 5
50838: PUSH
50839: LD_INT 1
50841: PLUS
50842: PPUSH
50843: LD_VAR 0 4
50847: PPUSH
50848: CALL_OW 266
50852: PPUSH
50853: CALL_OW 1
50857: ST_TO_ADDR
50858: GO 50821
50860: POP
50861: POP
// if not tmp then
50862: LD_VAR 0 5
50866: NOT
50867: IFFALSE 50871
// exit ;
50869: GO 50919
// if asc then
50871: LD_VAR 0 2
50875: IFFALSE 50899
// result := SortListByListAsc ( buildings , tmp ) else
50877: LD_ADDR_VAR 0 3
50881: PUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: LD_VAR 0 5
50891: PPUSH
50892: CALL_OW 76
50896: ST_TO_ADDR
50897: GO 50919
// result := SortListByListDesc ( buildings , tmp ) ;
50899: LD_ADDR_VAR 0 3
50903: PUSH
50904: LD_VAR 0 1
50908: PPUSH
50909: LD_VAR 0 5
50913: PPUSH
50914: CALL_OW 77
50918: ST_TO_ADDR
// end ;
50919: LD_VAR 0 3
50923: RET
// export function SortByClass ( units , class ) ; var un ; begin
50924: LD_INT 0
50926: PPUSH
50927: PPUSH
// if not units or not class then
50928: LD_VAR 0 1
50932: NOT
50933: IFTRUE 50942
50935: PUSH
50936: LD_VAR 0 2
50940: NOT
50941: OR
50942: IFFALSE 50946
// exit ;
50944: GO 51041
// result := [ ] ;
50946: LD_ADDR_VAR 0 3
50950: PUSH
50951: EMPTY
50952: ST_TO_ADDR
// for un in units do
50953: LD_ADDR_VAR 0 4
50957: PUSH
50958: LD_VAR 0 1
50962: PUSH
50963: FOR_IN
50964: IFFALSE 51039
// if GetClass ( un ) = class then
50966: LD_VAR 0 4
50970: PPUSH
50971: CALL_OW 257
50975: PUSH
50976: LD_VAR 0 2
50980: EQUAL
50981: IFFALSE 51008
// result := Insert ( result , 1 , un ) else
50983: LD_ADDR_VAR 0 3
50987: PUSH
50988: LD_VAR 0 3
50992: PPUSH
50993: LD_INT 1
50995: PPUSH
50996: LD_VAR 0 4
51000: PPUSH
51001: CALL_OW 2
51005: ST_TO_ADDR
51006: GO 51037
// result := Replace ( result , result + 1 , un ) ;
51008: LD_ADDR_VAR 0 3
51012: PUSH
51013: LD_VAR 0 3
51017: PPUSH
51018: LD_VAR 0 3
51022: PUSH
51023: LD_INT 1
51025: PLUS
51026: PPUSH
51027: LD_VAR 0 4
51031: PPUSH
51032: CALL_OW 1
51036: ST_TO_ADDR
51037: GO 50963
51039: POP
51040: POP
// end ;
51041: LD_VAR 0 3
51045: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51046: LD_INT 0
51048: PPUSH
51049: PPUSH
51050: PPUSH
51051: PPUSH
51052: PPUSH
51053: PPUSH
51054: PPUSH
// result := [ ] ;
51055: LD_ADDR_VAR 0 4
51059: PUSH
51060: EMPTY
51061: ST_TO_ADDR
// if x - r < 0 then
51062: LD_VAR 0 1
51066: PUSH
51067: LD_VAR 0 3
51071: MINUS
51072: PUSH
51073: LD_INT 0
51075: LESS
51076: IFFALSE 51088
// min_x := 0 else
51078: LD_ADDR_VAR 0 8
51082: PUSH
51083: LD_INT 0
51085: ST_TO_ADDR
51086: GO 51104
// min_x := x - r ;
51088: LD_ADDR_VAR 0 8
51092: PUSH
51093: LD_VAR 0 1
51097: PUSH
51098: LD_VAR 0 3
51102: MINUS
51103: ST_TO_ADDR
// if y - r < 0 then
51104: LD_VAR 0 2
51108: PUSH
51109: LD_VAR 0 3
51113: MINUS
51114: PUSH
51115: LD_INT 0
51117: LESS
51118: IFFALSE 51130
// min_y := 0 else
51120: LD_ADDR_VAR 0 7
51124: PUSH
51125: LD_INT 0
51127: ST_TO_ADDR
51128: GO 51146
// min_y := y - r ;
51130: LD_ADDR_VAR 0 7
51134: PUSH
51135: LD_VAR 0 2
51139: PUSH
51140: LD_VAR 0 3
51144: MINUS
51145: ST_TO_ADDR
// max_x := x + r ;
51146: LD_ADDR_VAR 0 9
51150: PUSH
51151: LD_VAR 0 1
51155: PUSH
51156: LD_VAR 0 3
51160: PLUS
51161: ST_TO_ADDR
// max_y := y + r ;
51162: LD_ADDR_VAR 0 10
51166: PUSH
51167: LD_VAR 0 2
51171: PUSH
51172: LD_VAR 0 3
51176: PLUS
51177: ST_TO_ADDR
// for _x = min_x to max_x do
51178: LD_ADDR_VAR 0 5
51182: PUSH
51183: DOUBLE
51184: LD_VAR 0 8
51188: DEC
51189: ST_TO_ADDR
51190: LD_VAR 0 9
51194: PUSH
51195: FOR_TO
51196: IFFALSE 51297
// for _y = min_y to max_y do
51198: LD_ADDR_VAR 0 6
51202: PUSH
51203: DOUBLE
51204: LD_VAR 0 7
51208: DEC
51209: ST_TO_ADDR
51210: LD_VAR 0 10
51214: PUSH
51215: FOR_TO
51216: IFFALSE 51293
// begin if not ValidHex ( _x , _y ) then
51218: LD_VAR 0 5
51222: PPUSH
51223: LD_VAR 0 6
51227: PPUSH
51228: CALL_OW 488
51232: NOT
51233: IFFALSE 51237
// continue ;
51235: GO 51215
// if GetResourceTypeXY ( _x , _y ) then
51237: LD_VAR 0 5
51241: PPUSH
51242: LD_VAR 0 6
51246: PPUSH
51247: CALL_OW 283
51251: IFFALSE 51291
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51253: LD_ADDR_VAR 0 4
51257: PUSH
51258: LD_VAR 0 4
51262: PPUSH
51263: LD_VAR 0 4
51267: PUSH
51268: LD_INT 1
51270: PLUS
51271: PPUSH
51272: LD_VAR 0 5
51276: PUSH
51277: LD_VAR 0 6
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PPUSH
51286: CALL_OW 1
51290: ST_TO_ADDR
// end ;
51291: GO 51215
51293: POP
51294: POP
51295: GO 51195
51297: POP
51298: POP
// end ;
51299: LD_VAR 0 4
51303: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51304: LD_INT 0
51306: PPUSH
51307: PPUSH
51308: PPUSH
51309: PPUSH
51310: PPUSH
51311: PPUSH
51312: PPUSH
51313: PPUSH
// if not units then
51314: LD_VAR 0 1
51318: NOT
51319: IFFALSE 51323
// exit ;
51321: GO 51855
// result := UnitFilter ( units , [ f_ok ] ) ;
51323: LD_ADDR_VAR 0 3
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: LD_INT 50
51335: PUSH
51336: EMPTY
51337: LIST
51338: PPUSH
51339: CALL_OW 72
51343: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51344: LD_ADDR_VAR 0 8
51348: PUSH
51349: LD_VAR 0 1
51353: PUSH
51354: LD_INT 1
51356: ARRAY
51357: PPUSH
51358: CALL_OW 255
51362: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51363: LD_ADDR_VAR 0 10
51367: PUSH
51368: LD_INT 29
51370: PUSH
51371: LD_INT 91
51373: PUSH
51374: LD_INT 49
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// if not result then
51382: LD_VAR 0 3
51386: NOT
51387: IFFALSE 51391
// exit ;
51389: GO 51855
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51391: LD_ADDR_VAR 0 5
51395: PUSH
51396: LD_INT 81
51398: PUSH
51399: LD_VAR 0 8
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PPUSH
51408: CALL_OW 69
51412: ST_TO_ADDR
// for i in result do
51413: LD_ADDR_VAR 0 4
51417: PUSH
51418: LD_VAR 0 3
51422: PUSH
51423: FOR_IN
51424: IFFALSE 51853
// begin tag := GetTag ( i ) + 1 ;
51426: LD_ADDR_VAR 0 9
51430: PUSH
51431: LD_VAR 0 4
51435: PPUSH
51436: CALL_OW 110
51440: PUSH
51441: LD_INT 1
51443: PLUS
51444: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51445: LD_ADDR_VAR 0 7
51449: PUSH
51450: LD_VAR 0 4
51454: PPUSH
51455: CALL_OW 250
51459: PPUSH
51460: LD_VAR 0 4
51464: PPUSH
51465: CALL_OW 251
51469: PPUSH
51470: LD_INT 4
51472: PPUSH
51473: CALL 51046 0 3
51477: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51478: LD_VAR 0 4
51482: PPUSH
51483: CALL_OW 247
51487: PUSH
51488: LD_INT 2
51490: EQUAL
51491: IFFALSE 51503
51493: PUSH
51494: LD_VAR 0 7
51498: PUSH
51499: LD_INT 2
51501: GREATER
51502: AND
51503: IFFALSE 51523
51505: PUSH
51506: LD_VAR 0 4
51510: PPUSH
51511: CALL_OW 264
51515: PUSH
51516: LD_VAR 0 10
51520: IN
51521: NOT
51522: AND
51523: IFFALSE 51562
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51525: LD_VAR 0 4
51529: PPUSH
51530: LD_VAR 0 7
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PUSH
51539: LD_INT 1
51541: ARRAY
51542: PPUSH
51543: LD_VAR 0 7
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PUSH
51552: LD_INT 2
51554: ARRAY
51555: PPUSH
51556: CALL_OW 116
51560: GO 51851
// if path > tag then
51562: LD_VAR 0 2
51566: PUSH
51567: LD_VAR 0 9
51571: GREATER
51572: IFFALSE 51780
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51574: LD_ADDR_VAR 0 6
51578: PUSH
51579: LD_VAR 0 5
51583: PPUSH
51584: LD_INT 91
51586: PUSH
51587: LD_VAR 0 4
51591: PUSH
51592: LD_INT 8
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: LIST
51599: PPUSH
51600: CALL_OW 72
51604: ST_TO_ADDR
// if nearEnemy then
51605: LD_VAR 0 6
51609: IFFALSE 51678
// begin if GetWeapon ( i ) = ru_time_lapser then
51611: LD_VAR 0 4
51615: PPUSH
51616: CALL_OW 264
51620: PUSH
51621: LD_INT 49
51623: EQUAL
51624: IFFALSE 51652
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51626: LD_VAR 0 4
51630: PPUSH
51631: LD_VAR 0 6
51635: PPUSH
51636: LD_VAR 0 4
51640: PPUSH
51641: CALL_OW 74
51645: PPUSH
51646: CALL_OW 112
51650: GO 51676
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51652: LD_VAR 0 4
51656: PPUSH
51657: LD_VAR 0 6
51661: PPUSH
51662: LD_VAR 0 4
51666: PPUSH
51667: CALL_OW 74
51671: PPUSH
51672: CALL 52936 0 2
// end else
51676: GO 51778
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51678: LD_VAR 0 4
51682: PPUSH
51683: LD_VAR 0 2
51687: PUSH
51688: LD_VAR 0 9
51692: ARRAY
51693: PUSH
51694: LD_INT 1
51696: ARRAY
51697: PPUSH
51698: LD_VAR 0 2
51702: PUSH
51703: LD_VAR 0 9
51707: ARRAY
51708: PUSH
51709: LD_INT 2
51711: ARRAY
51712: PPUSH
51713: CALL_OW 297
51717: PUSH
51718: LD_INT 6
51720: GREATER
51721: IFFALSE 51764
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51723: LD_VAR 0 4
51727: PPUSH
51728: LD_VAR 0 2
51732: PUSH
51733: LD_VAR 0 9
51737: ARRAY
51738: PUSH
51739: LD_INT 1
51741: ARRAY
51742: PPUSH
51743: LD_VAR 0 2
51747: PUSH
51748: LD_VAR 0 9
51752: ARRAY
51753: PUSH
51754: LD_INT 2
51756: ARRAY
51757: PPUSH
51758: CALL_OW 114
51762: GO 51778
// SetTag ( i , tag ) ;
51764: LD_VAR 0 4
51768: PPUSH
51769: LD_VAR 0 9
51773: PPUSH
51774: CALL_OW 109
// end else
51778: GO 51851
// if enemy then
51780: LD_VAR 0 5
51784: IFFALSE 51851
// begin if GetWeapon ( i ) = ru_time_lapser then
51786: LD_VAR 0 4
51790: PPUSH
51791: CALL_OW 264
51795: PUSH
51796: LD_INT 49
51798: EQUAL
51799: IFFALSE 51827
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51801: LD_VAR 0 4
51805: PPUSH
51806: LD_VAR 0 5
51810: PPUSH
51811: LD_VAR 0 4
51815: PPUSH
51816: CALL_OW 74
51820: PPUSH
51821: CALL_OW 112
51825: GO 51851
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51827: LD_VAR 0 4
51831: PPUSH
51832: LD_VAR 0 5
51836: PPUSH
51837: LD_VAR 0 4
51841: PPUSH
51842: CALL_OW 74
51846: PPUSH
51847: CALL 52936 0 2
// end ; end ;
51851: GO 51423
51853: POP
51854: POP
// end ;
51855: LD_VAR 0 3
51859: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51860: LD_INT 0
51862: PPUSH
51863: PPUSH
51864: PPUSH
// if not unit or IsInUnit ( unit ) then
51865: LD_VAR 0 1
51869: NOT
51870: IFTRUE 51883
51872: PUSH
51873: LD_VAR 0 1
51877: PPUSH
51878: CALL_OW 310
51882: OR
51883: IFFALSE 51887
// exit ;
51885: GO 51978
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51887: LD_ADDR_VAR 0 4
51891: PUSH
51892: LD_VAR 0 1
51896: PPUSH
51897: CALL_OW 250
51901: PPUSH
51902: LD_VAR 0 2
51906: PPUSH
51907: LD_INT 1
51909: PPUSH
51910: CALL_OW 272
51914: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51915: LD_ADDR_VAR 0 5
51919: PUSH
51920: LD_VAR 0 1
51924: PPUSH
51925: CALL_OW 251
51929: PPUSH
51930: LD_VAR 0 2
51934: PPUSH
51935: LD_INT 1
51937: PPUSH
51938: CALL_OW 273
51942: ST_TO_ADDR
// if ValidHex ( x , y ) then
51943: LD_VAR 0 4
51947: PPUSH
51948: LD_VAR 0 5
51952: PPUSH
51953: CALL_OW 488
51957: IFFALSE 51978
// ComTurnXY ( unit , x , y ) ;
51959: LD_VAR 0 1
51963: PPUSH
51964: LD_VAR 0 4
51968: PPUSH
51969: LD_VAR 0 5
51973: PPUSH
51974: CALL_OW 118
// end ;
51978: LD_VAR 0 3
51982: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51983: LD_INT 0
51985: PPUSH
51986: PPUSH
// result := false ;
51987: LD_ADDR_VAR 0 3
51991: PUSH
51992: LD_INT 0
51994: ST_TO_ADDR
// if not units then
51995: LD_VAR 0 2
51999: NOT
52000: IFFALSE 52004
// exit ;
52002: GO 52049
// for i in units do
52004: LD_ADDR_VAR 0 4
52008: PUSH
52009: LD_VAR 0 2
52013: PUSH
52014: FOR_IN
52015: IFFALSE 52047
// if See ( side , i ) then
52017: LD_VAR 0 1
52021: PPUSH
52022: LD_VAR 0 4
52026: PPUSH
52027: CALL_OW 292
52031: IFFALSE 52045
// begin result := true ;
52033: LD_ADDR_VAR 0 3
52037: PUSH
52038: LD_INT 1
52040: ST_TO_ADDR
// exit ;
52041: POP
52042: POP
52043: GO 52049
// end ;
52045: GO 52014
52047: POP
52048: POP
// end ;
52049: LD_VAR 0 3
52053: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52054: LD_INT 0
52056: PPUSH
52057: PPUSH
52058: PPUSH
52059: PPUSH
// if not unit or not points then
52060: LD_VAR 0 1
52064: NOT
52065: IFTRUE 52074
52067: PUSH
52068: LD_VAR 0 2
52072: NOT
52073: OR
52074: IFFALSE 52078
// exit ;
52076: GO 52168
// dist := 99999 ;
52078: LD_ADDR_VAR 0 5
52082: PUSH
52083: LD_INT 99999
52085: ST_TO_ADDR
// for i in points do
52086: LD_ADDR_VAR 0 4
52090: PUSH
52091: LD_VAR 0 2
52095: PUSH
52096: FOR_IN
52097: IFFALSE 52166
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52099: LD_ADDR_VAR 0 6
52103: PUSH
52104: LD_VAR 0 1
52108: PPUSH
52109: LD_VAR 0 4
52113: PUSH
52114: LD_INT 1
52116: ARRAY
52117: PPUSH
52118: LD_VAR 0 4
52122: PUSH
52123: LD_INT 2
52125: ARRAY
52126: PPUSH
52127: CALL_OW 297
52131: ST_TO_ADDR
// if tmpDist < dist then
52132: LD_VAR 0 6
52136: PUSH
52137: LD_VAR 0 5
52141: LESS
52142: IFFALSE 52164
// begin result := i ;
52144: LD_ADDR_VAR 0 3
52148: PUSH
52149: LD_VAR 0 4
52153: ST_TO_ADDR
// dist := tmpDist ;
52154: LD_ADDR_VAR 0 5
52158: PUSH
52159: LD_VAR 0 6
52163: ST_TO_ADDR
// end ; end ;
52164: GO 52096
52166: POP
52167: POP
// end ;
52168: LD_VAR 0 3
52172: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52173: LD_INT 0
52175: PPUSH
// uc_side := side ;
52176: LD_ADDR_OWVAR 20
52180: PUSH
52181: LD_VAR 0 1
52185: ST_TO_ADDR
// uc_nation := 3 ;
52186: LD_ADDR_OWVAR 21
52190: PUSH
52191: LD_INT 3
52193: ST_TO_ADDR
// vc_chassis := 25 ;
52194: LD_ADDR_OWVAR 37
52198: PUSH
52199: LD_INT 25
52201: ST_TO_ADDR
// vc_engine := engine_siberite ;
52202: LD_ADDR_OWVAR 39
52206: PUSH
52207: LD_INT 3
52209: ST_TO_ADDR
// vc_control := control_computer ;
52210: LD_ADDR_OWVAR 38
52214: PUSH
52215: LD_INT 3
52217: ST_TO_ADDR
// vc_weapon := 59 ;
52218: LD_ADDR_OWVAR 40
52222: PUSH
52223: LD_INT 59
52225: ST_TO_ADDR
// result := CreateVehicle ;
52226: LD_ADDR_VAR 0 5
52230: PUSH
52231: CALL_OW 45
52235: ST_TO_ADDR
// SetDir ( result , d ) ;
52236: LD_VAR 0 5
52240: PPUSH
52241: LD_VAR 0 4
52245: PPUSH
52246: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52250: LD_VAR 0 5
52254: PPUSH
52255: LD_VAR 0 2
52259: PPUSH
52260: LD_VAR 0 3
52264: PPUSH
52265: LD_INT 0
52267: PPUSH
52268: CALL_OW 48
// end ;
52272: LD_VAR 0 5
52276: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52277: LD_INT 0
52279: PPUSH
52280: PPUSH
52281: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52282: LD_ADDR_VAR 0 2
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52305: LD_VAR 0 1
52309: NOT
52310: IFTRUE 52343
52312: PUSH
52313: LD_VAR 0 1
52317: PPUSH
52318: CALL_OW 264
52322: PUSH
52323: LD_INT 12
52325: PUSH
52326: LD_INT 51
52328: PUSH
52329: LD_INT 32
52331: PUSH
52332: LD_INT 89
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: IN
52341: NOT
52342: OR
52343: IFFALSE 52347
// exit ;
52345: GO 52445
// for i := 1 to 3 do
52347: LD_ADDR_VAR 0 3
52351: PUSH
52352: DOUBLE
52353: LD_INT 1
52355: DEC
52356: ST_TO_ADDR
52357: LD_INT 3
52359: PUSH
52360: FOR_TO
52361: IFFALSE 52443
// begin tmp := GetCargo ( cargo , i ) ;
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: LD_VAR 0 1
52372: PPUSH
52373: LD_VAR 0 3
52377: PPUSH
52378: CALL_OW 289
52382: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52383: LD_ADDR_VAR 0 2
52387: PUSH
52388: LD_VAR 0 2
52392: PPUSH
52393: LD_VAR 0 3
52397: PPUSH
52398: LD_VAR 0 4
52402: PPUSH
52403: CALL_OW 1
52407: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52408: LD_ADDR_VAR 0 2
52412: PUSH
52413: LD_VAR 0 2
52417: PPUSH
52418: LD_INT 4
52420: PPUSH
52421: LD_VAR 0 2
52425: PUSH
52426: LD_INT 4
52428: ARRAY
52429: PUSH
52430: LD_VAR 0 4
52434: PLUS
52435: PPUSH
52436: CALL_OW 1
52440: ST_TO_ADDR
// end ;
52441: GO 52360
52443: POP
52444: POP
// end ;
52445: LD_VAR 0 2
52449: RET
// export function Length ( array ) ; begin
52450: LD_INT 0
52452: PPUSH
// result := array + 0 ;
52453: LD_ADDR_VAR 0 2
52457: PUSH
52458: LD_VAR 0 1
52462: PUSH
52463: LD_INT 0
52465: PLUS
52466: ST_TO_ADDR
// end ;
52467: LD_VAR 0 2
52471: RET
// export function PrepareArray ( array ) ; begin
52472: LD_INT 0
52474: PPUSH
// result := array diff 0 ;
52475: LD_ADDR_VAR 0 2
52479: PUSH
52480: LD_VAR 0 1
52484: PUSH
52485: LD_INT 0
52487: DIFF
52488: ST_TO_ADDR
// if not result [ 1 ] then
52489: LD_VAR 0 2
52493: PUSH
52494: LD_INT 1
52496: ARRAY
52497: NOT
52498: IFFALSE 52518
// result := Delete ( result , 1 ) ;
52500: LD_ADDR_VAR 0 2
52504: PUSH
52505: LD_VAR 0 2
52509: PPUSH
52510: LD_INT 1
52512: PPUSH
52513: CALL_OW 3
52517: ST_TO_ADDR
// end ;
52518: LD_VAR 0 2
52522: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52523: LD_INT 0
52525: PPUSH
52526: PPUSH
52527: PPUSH
52528: PPUSH
// sibRocketRange := 25 ;
52529: LD_ADDR_VAR 0 6
52533: PUSH
52534: LD_INT 25
52536: ST_TO_ADDR
// result := false ;
52537: LD_ADDR_VAR 0 4
52541: PUSH
52542: LD_INT 0
52544: ST_TO_ADDR
// for i := 0 to 5 do
52545: LD_ADDR_VAR 0 5
52549: PUSH
52550: DOUBLE
52551: LD_INT 0
52553: DEC
52554: ST_TO_ADDR
52555: LD_INT 5
52557: PUSH
52558: FOR_TO
52559: IFFALSE 52626
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52561: LD_VAR 0 1
52565: PPUSH
52566: LD_VAR 0 5
52570: PPUSH
52571: LD_VAR 0 6
52575: PPUSH
52576: CALL_OW 272
52580: PPUSH
52581: LD_VAR 0 2
52585: PPUSH
52586: LD_VAR 0 5
52590: PPUSH
52591: LD_VAR 0 6
52595: PPUSH
52596: CALL_OW 273
52600: PPUSH
52601: LD_VAR 0 3
52605: PPUSH
52606: CALL_OW 309
52610: IFFALSE 52624
// begin result := true ;
52612: LD_ADDR_VAR 0 4
52616: PUSH
52617: LD_INT 1
52619: ST_TO_ADDR
// exit ;
52620: POP
52621: POP
52622: GO 52628
// end ;
52624: GO 52558
52626: POP
52627: POP
// end ;
52628: LD_VAR 0 4
52632: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52633: LD_INT 0
52635: PPUSH
52636: PPUSH
52637: PPUSH
// if btype = b_depot then
52638: LD_VAR 0 2
52642: PUSH
52643: LD_INT 0
52645: EQUAL
52646: IFFALSE 52658
// begin result := true ;
52648: LD_ADDR_VAR 0 3
52652: PUSH
52653: LD_INT 1
52655: ST_TO_ADDR
// exit ;
52656: GO 52778
// end ; pom := GetBase ( depot ) ;
52658: LD_ADDR_VAR 0 4
52662: PUSH
52663: LD_VAR 0 1
52667: PPUSH
52668: CALL_OW 274
52672: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52673: LD_ADDR_VAR 0 5
52677: PUSH
52678: LD_VAR 0 2
52682: PPUSH
52683: LD_VAR 0 1
52687: PPUSH
52688: CALL_OW 248
52692: PPUSH
52693: CALL_OW 450
52697: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52698: LD_ADDR_VAR 0 3
52702: PUSH
52703: LD_VAR 0 4
52707: PPUSH
52708: LD_INT 1
52710: PPUSH
52711: CALL_OW 275
52715: PUSH
52716: LD_VAR 0 5
52720: PUSH
52721: LD_INT 1
52723: ARRAY
52724: GREATEREQUAL
52725: IFFALSE 52751
52727: PUSH
52728: LD_VAR 0 4
52732: PPUSH
52733: LD_INT 2
52735: PPUSH
52736: CALL_OW 275
52740: PUSH
52741: LD_VAR 0 5
52745: PUSH
52746: LD_INT 2
52748: ARRAY
52749: GREATEREQUAL
52750: AND
52751: IFFALSE 52777
52753: PUSH
52754: LD_VAR 0 4
52758: PPUSH
52759: LD_INT 3
52761: PPUSH
52762: CALL_OW 275
52766: PUSH
52767: LD_VAR 0 5
52771: PUSH
52772: LD_INT 3
52774: ARRAY
52775: GREATEREQUAL
52776: AND
52777: ST_TO_ADDR
// end ;
52778: LD_VAR 0 3
52782: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52783: LD_INT 0
52785: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52786: LD_VAR 0 1
52790: PPUSH
52791: LD_VAR 0 2
52795: PPUSH
52796: LD_INT 0
52798: PPUSH
52799: LD_INT 0
52801: PPUSH
52802: LD_INT 1
52804: PPUSH
52805: LD_INT 0
52807: PPUSH
52808: CALL_OW 587
// end ;
52812: LD_VAR 0 3
52816: RET
// export function CenterOnNow ( unit ) ; begin
52817: LD_INT 0
52819: PPUSH
// result := IsInUnit ( unit ) ;
52820: LD_ADDR_VAR 0 2
52824: PUSH
52825: LD_VAR 0 1
52829: PPUSH
52830: CALL_OW 310
52834: ST_TO_ADDR
// if not result then
52835: LD_VAR 0 2
52839: NOT
52840: IFFALSE 52852
// result := unit ;
52842: LD_ADDR_VAR 0 2
52846: PUSH
52847: LD_VAR 0 1
52851: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52852: LD_VAR 0 1
52856: PPUSH
52857: CALL_OW 87
// end ;
52861: LD_VAR 0 2
52865: RET
// export function ComMoveHex ( unit , hex ) ; begin
52866: LD_INT 0
52868: PPUSH
// if not hex then
52869: LD_VAR 0 2
52873: NOT
52874: IFFALSE 52878
// exit ;
52876: GO 52931
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52878: LD_VAR 0 2
52882: PUSH
52883: LD_INT 1
52885: ARRAY
52886: PPUSH
52887: LD_VAR 0 2
52891: PUSH
52892: LD_INT 2
52894: ARRAY
52895: PPUSH
52896: CALL_OW 428
52900: IFFALSE 52904
// exit ;
52902: GO 52931
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52904: LD_VAR 0 1
52908: PPUSH
52909: LD_VAR 0 2
52913: PUSH
52914: LD_INT 1
52916: ARRAY
52917: PPUSH
52918: LD_VAR 0 2
52922: PUSH
52923: LD_INT 2
52925: ARRAY
52926: PPUSH
52927: CALL_OW 111
// end ;
52931: LD_VAR 0 3
52935: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52936: LD_INT 0
52938: PPUSH
52939: PPUSH
52940: PPUSH
// if not unit or not enemy then
52941: LD_VAR 0 1
52945: NOT
52946: IFTRUE 52955
52948: PUSH
52949: LD_VAR 0 2
52953: NOT
52954: OR
52955: IFFALSE 52959
// exit ;
52957: GO 53085
// x := GetX ( enemy ) ;
52959: LD_ADDR_VAR 0 4
52963: PUSH
52964: LD_VAR 0 2
52968: PPUSH
52969: CALL_OW 250
52973: ST_TO_ADDR
// y := GetY ( enemy ) ;
52974: LD_ADDR_VAR 0 5
52978: PUSH
52979: LD_VAR 0 2
52983: PPUSH
52984: CALL_OW 251
52988: ST_TO_ADDR
// if ValidHex ( x , y ) then
52989: LD_VAR 0 4
52993: PPUSH
52994: LD_VAR 0 5
52998: PPUSH
52999: CALL_OW 488
53003: IFFALSE 53085
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53005: LD_VAR 0 2
53009: PPUSH
53010: CALL_OW 247
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: IN
53025: IFTRUE 53048
53027: PUSH
53028: LD_VAR 0 1
53032: PPUSH
53033: CALL_OW 255
53037: PPUSH
53038: LD_VAR 0 2
53042: PPUSH
53043: CALL_OW 292
53047: OR
53048: IFFALSE 53066
// ComAttackUnit ( unit , enemy ) else
53050: LD_VAR 0 1
53054: PPUSH
53055: LD_VAR 0 2
53059: PPUSH
53060: CALL_OW 115
53064: GO 53085
// ComAgressiveMove ( unit , x , y ) ;
53066: LD_VAR 0 1
53070: PPUSH
53071: LD_VAR 0 4
53075: PPUSH
53076: LD_VAR 0 5
53080: PPUSH
53081: CALL_OW 114
// end ;
53085: LD_VAR 0 3
53089: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53090: LD_INT 0
53092: PPUSH
53093: PPUSH
53094: PPUSH
// list := AreaToList ( area , 0 ) ;
53095: LD_ADDR_VAR 0 5
53099: PUSH
53100: LD_VAR 0 1
53104: PPUSH
53105: LD_INT 0
53107: PPUSH
53108: CALL_OW 517
53112: ST_TO_ADDR
// if not list then
53113: LD_VAR 0 5
53117: NOT
53118: IFFALSE 53122
// exit ;
53120: GO 53252
// if all then
53122: LD_VAR 0 2
53126: IFFALSE 53214
// begin for i := 1 to list [ 1 ] do
53128: LD_ADDR_VAR 0 4
53132: PUSH
53133: DOUBLE
53134: LD_INT 1
53136: DEC
53137: ST_TO_ADDR
53138: LD_VAR 0 5
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: PUSH
53147: FOR_TO
53148: IFFALSE 53210
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53150: LD_ADDR_VAR 0 3
53154: PUSH
53155: LD_VAR 0 3
53159: PPUSH
53160: LD_VAR 0 3
53164: PUSH
53165: LD_INT 1
53167: PLUS
53168: PPUSH
53169: LD_VAR 0 5
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: PUSH
53178: LD_VAR 0 4
53182: ARRAY
53183: PUSH
53184: LD_VAR 0 5
53188: PUSH
53189: LD_INT 2
53191: ARRAY
53192: PUSH
53193: LD_VAR 0 4
53197: ARRAY
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PPUSH
53203: CALL_OW 1
53207: ST_TO_ADDR
53208: GO 53147
53210: POP
53211: POP
// exit ;
53212: GO 53252
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53214: LD_ADDR_VAR 0 3
53218: PUSH
53219: LD_VAR 0 5
53223: PUSH
53224: LD_INT 1
53226: ARRAY
53227: PUSH
53228: LD_INT 1
53230: ARRAY
53231: PUSH
53232: LD_VAR 0 5
53236: PUSH
53237: LD_INT 2
53239: ARRAY
53240: PUSH
53241: LD_INT 1
53243: ARRAY
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: ST_TO_ADDR
// end ;
53252: LD_VAR 0 3
53256: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53257: LD_INT 0
53259: PPUSH
53260: PPUSH
// list := AreaToList ( area , 0 ) ;
53261: LD_ADDR_VAR 0 4
53265: PUSH
53266: LD_VAR 0 1
53270: PPUSH
53271: LD_INT 0
53273: PPUSH
53274: CALL_OW 517
53278: ST_TO_ADDR
// if not list then
53279: LD_VAR 0 4
53283: NOT
53284: IFFALSE 53288
// exit ;
53286: GO 53329
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53288: LD_ADDR_VAR 0 3
53292: PUSH
53293: LD_VAR 0 4
53297: PUSH
53298: LD_INT 1
53300: ARRAY
53301: PUSH
53302: LD_INT 1
53304: ARRAY
53305: PUSH
53306: LD_VAR 0 4
53310: PUSH
53311: LD_INT 2
53313: ARRAY
53314: PUSH
53315: LD_INT 1
53317: ARRAY
53318: PUSH
53319: LD_VAR 0 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// end ;
53329: LD_VAR 0 3
53333: RET
// export function First ( array ) ; begin
53334: LD_INT 0
53336: PPUSH
// if not array then
53337: LD_VAR 0 1
53341: NOT
53342: IFFALSE 53346
// exit ;
53344: GO 53360
// result := array [ 1 ] ;
53346: LD_ADDR_VAR 0 2
53350: PUSH
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 1
53358: ARRAY
53359: ST_TO_ADDR
// end ;
53360: LD_VAR 0 2
53364: RET
// export function Last ( array ) ; begin
53365: LD_INT 0
53367: PPUSH
// if not array then
53368: LD_VAR 0 1
53372: NOT
53373: IFFALSE 53377
// exit ;
53375: GO 53393
// result := array [ array ] ;
53377: LD_ADDR_VAR 0 2
53381: PUSH
53382: LD_VAR 0 1
53386: PUSH
53387: LD_VAR 0 1
53391: ARRAY
53392: ST_TO_ADDR
// end ;
53393: LD_VAR 0 2
53397: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53398: LD_INT 0
53400: PPUSH
53401: PPUSH
// result := [ ] ;
53402: LD_ADDR_VAR 0 5
53406: PUSH
53407: EMPTY
53408: ST_TO_ADDR
// if not array then
53409: LD_VAR 0 1
53413: NOT
53414: IFFALSE 53418
// exit ;
53416: GO 53530
// for i := 1 to array do
53418: LD_ADDR_VAR 0 6
53422: PUSH
53423: DOUBLE
53424: LD_INT 1
53426: DEC
53427: ST_TO_ADDR
53428: LD_VAR 0 1
53432: PUSH
53433: FOR_TO
53434: IFFALSE 53528
// if array [ i ] [ index ] = value then
53436: LD_VAR 0 1
53440: PUSH
53441: LD_VAR 0 6
53445: ARRAY
53446: PUSH
53447: LD_VAR 0 2
53451: ARRAY
53452: PUSH
53453: LD_VAR 0 3
53457: EQUAL
53458: IFFALSE 53526
// begin if indexColumn then
53460: LD_VAR 0 4
53464: IFFALSE 53500
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53466: LD_ADDR_VAR 0 5
53470: PUSH
53471: LD_VAR 0 5
53475: PPUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_VAR 0 6
53485: ARRAY
53486: PUSH
53487: LD_VAR 0 4
53491: ARRAY
53492: PPUSH
53493: CALL 48538 0 2
53497: ST_TO_ADDR
53498: GO 53526
// result := Join ( result , array [ i ] ) ;
53500: LD_ADDR_VAR 0 5
53504: PUSH
53505: LD_VAR 0 5
53509: PPUSH
53510: LD_VAR 0 1
53514: PUSH
53515: LD_VAR 0 6
53519: ARRAY
53520: PPUSH
53521: CALL 48538 0 2
53525: ST_TO_ADDR
// end ;
53526: GO 53433
53528: POP
53529: POP
// end ;
53530: LD_VAR 0 5
53534: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53535: LD_INT 0
53537: PPUSH
// if not vehicles or not parkingPoint then
53538: LD_VAR 0 1
53542: NOT
53543: IFTRUE 53552
53545: PUSH
53546: LD_VAR 0 2
53550: NOT
53551: OR
53552: IFFALSE 53556
// exit ;
53554: GO 53654
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53556: LD_ADDR_VAR 0 1
53560: PUSH
53561: LD_VAR 0 1
53565: PPUSH
53566: LD_INT 50
53568: PUSH
53569: EMPTY
53570: LIST
53571: PUSH
53572: LD_INT 3
53574: PUSH
53575: LD_INT 92
53577: PUSH
53578: LD_VAR 0 2
53582: PUSH
53583: LD_INT 1
53585: ARRAY
53586: PUSH
53587: LD_VAR 0 2
53591: PUSH
53592: LD_INT 2
53594: ARRAY
53595: PUSH
53596: LD_INT 8
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PPUSH
53613: CALL_OW 72
53617: ST_TO_ADDR
// if not vehicles then
53618: LD_VAR 0 1
53622: NOT
53623: IFFALSE 53627
// exit ;
53625: GO 53654
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53627: LD_VAR 0 1
53631: PPUSH
53632: LD_VAR 0 2
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PPUSH
53641: LD_VAR 0 2
53645: PUSH
53646: LD_INT 2
53648: ARRAY
53649: PPUSH
53650: CALL_OW 111
// end ;
53654: LD_VAR 0 3
53658: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53659: LD_INT 0
53661: PPUSH
53662: PPUSH
53663: PPUSH
// if not side or not area then
53664: LD_VAR 0 1
53668: NOT
53669: IFTRUE 53678
53671: PUSH
53672: LD_VAR 0 2
53676: NOT
53677: OR
53678: IFFALSE 53682
// exit ;
53680: GO 53801
// tmp := AreaToList ( area , 0 ) ;
53682: LD_ADDR_VAR 0 5
53686: PUSH
53687: LD_VAR 0 2
53691: PPUSH
53692: LD_INT 0
53694: PPUSH
53695: CALL_OW 517
53699: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53700: LD_ADDR_VAR 0 4
53704: PUSH
53705: DOUBLE
53706: LD_INT 1
53708: DEC
53709: ST_TO_ADDR
53710: LD_VAR 0 5
53714: PUSH
53715: LD_INT 1
53717: ARRAY
53718: PUSH
53719: FOR_TO
53720: IFFALSE 53799
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53722: LD_VAR 0 5
53726: PUSH
53727: LD_INT 1
53729: ARRAY
53730: PUSH
53731: LD_VAR 0 4
53735: ARRAY
53736: PPUSH
53737: LD_VAR 0 5
53741: PUSH
53742: LD_INT 2
53744: ARRAY
53745: PUSH
53746: LD_VAR 0 4
53750: ARRAY
53751: PPUSH
53752: CALL_OW 351
53756: IFFALSE 53797
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53758: LD_VAR 0 5
53762: PUSH
53763: LD_INT 1
53765: ARRAY
53766: PUSH
53767: LD_VAR 0 4
53771: ARRAY
53772: PPUSH
53773: LD_VAR 0 5
53777: PUSH
53778: LD_INT 2
53780: ARRAY
53781: PUSH
53782: LD_VAR 0 4
53786: ARRAY
53787: PPUSH
53788: LD_VAR 0 1
53792: PPUSH
53793: CALL_OW 244
// end ;
53797: GO 53719
53799: POP
53800: POP
// end ;
53801: LD_VAR 0 3
53805: RET
// export function UniqueArray ( array ) ; var i ; begin
53806: LD_INT 0
53808: PPUSH
53809: PPUSH
// result := [ ] ;
53810: LD_ADDR_VAR 0 2
53814: PUSH
53815: EMPTY
53816: ST_TO_ADDR
// if not array then
53817: LD_VAR 0 1
53821: NOT
53822: IFFALSE 53826
// exit ;
53824: GO 53887
// for i := 1 to array do
53826: LD_ADDR_VAR 0 3
53830: PUSH
53831: DOUBLE
53832: LD_INT 1
53834: DEC
53835: ST_TO_ADDR
53836: LD_VAR 0 1
53840: PUSH
53841: FOR_TO
53842: IFFALSE 53885
// if not array [ i ] in result then
53844: LD_VAR 0 1
53848: PUSH
53849: LD_VAR 0 3
53853: ARRAY
53854: PUSH
53855: LD_VAR 0 2
53859: IN
53860: NOT
53861: IFFALSE 53883
// result := Join ( result , i ) ;
53863: LD_ADDR_VAR 0 2
53867: PUSH
53868: LD_VAR 0 2
53872: PPUSH
53873: LD_VAR 0 3
53877: PPUSH
53878: CALL 48538 0 2
53882: ST_TO_ADDR
53883: GO 53841
53885: POP
53886: POP
// end ; end_of_file
53887: LD_VAR 0 2
53891: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
53892: LD_VAR 0 1
53896: PUSH
53897: LD_INT 200
53899: DOUBLE
53900: GREATEREQUAL
53901: IFFALSE 53909
53903: LD_INT 299
53905: DOUBLE
53906: LESSEQUAL
53907: IFTRUE 53911
53909: GO 53943
53911: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
53912: LD_VAR 0 1
53916: PPUSH
53917: LD_VAR 0 2
53921: PPUSH
53922: LD_VAR 0 3
53926: PPUSH
53927: LD_VAR 0 4
53931: PPUSH
53932: LD_VAR 0 5
53936: PPUSH
53937: CALL 54805 0 5
53941: GO 54020
53943: LD_INT 300
53945: DOUBLE
53946: GREATEREQUAL
53947: IFFALSE 53955
53949: LD_INT 399
53951: DOUBLE
53952: LESSEQUAL
53953: IFTRUE 53957
53955: GO 54019
53957: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
53958: LD_VAR 0 1
53962: PPUSH
53963: LD_VAR 0 2
53967: PPUSH
53968: LD_VAR 0 3
53972: PPUSH
53973: LD_VAR 0 4
53977: PPUSH
53978: LD_VAR 0 5
53982: PPUSH
53983: LD_VAR 0 6
53987: PPUSH
53988: LD_VAR 0 7
53992: PPUSH
53993: LD_VAR 0 8
53997: PPUSH
53998: LD_VAR 0 9
54002: PPUSH
54003: LD_VAR 0 10
54007: PPUSH
54008: LD_VAR 0 11
54012: PPUSH
54013: CALL 62807 0 11
54017: GO 54020
54019: POP
// end ;
54020: PPOPN 11
54022: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54023: LD_VAR 0 1
54027: PPUSH
54028: LD_VAR 0 2
54032: PPUSH
54033: LD_VAR 0 3
54037: PPUSH
54038: LD_VAR 0 4
54042: PPUSH
54043: LD_VAR 0 5
54047: PPUSH
54048: CALL 54105 0 5
// end ; end_of_file
54052: PPOPN 5
54054: END
// export function SOS_UnitDestroyed ( un ) ; begin
54055: LD_INT 0
54057: PPUSH
// ComRadiation ( un ) ;
54058: LD_VAR 0 1
54062: PPUSH
54063: CALL 55225 0 1
// end ;
54067: LD_VAR 0 2
54071: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54072: LD_INT 0
54074: PPUSH
// ComRadiation ( un ) ;
54075: LD_VAR 0 1
54079: PPUSH
54080: CALL 55225 0 1
// end ;
54084: LD_VAR 0 2
54088: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54089: LD_INT 0
54091: PPUSH
// end ;
54092: LD_VAR 0 4
54096: RET
// export function SOS_Command ( cmd ) ; begin
54097: LD_INT 0
54099: PPUSH
// end ;
54100: LD_VAR 0 2
54104: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54105: LD_INT 0
54107: PPUSH
// end ;
54108: LD_VAR 0 6
54112: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54113: LD_INT 0
54115: PPUSH
54116: PPUSH
54117: PPUSH
54118: PPUSH
54119: PPUSH
// if not vehicle or not factory then
54120: LD_VAR 0 1
54124: NOT
54125: IFTRUE 54134
54127: PUSH
54128: LD_VAR 0 2
54132: NOT
54133: OR
54134: IFFALSE 54138
// exit ;
54136: GO 54800
// weapon := GetWeapon ( vehicle ) ;
54138: LD_ADDR_VAR 0 7
54142: PUSH
54143: LD_VAR 0 1
54147: PPUSH
54148: CALL_OW 264
54152: ST_TO_ADDR
// if weapon = ar_miner then
54153: LD_VAR 0 7
54157: PUSH
54158: LD_INT 81
54160: EQUAL
54161: IFFALSE 54218
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54163: LD_ADDR_EXP 56
54167: PUSH
54168: LD_EXP 56
54172: PPUSH
54173: LD_EXP 56
54177: PUSH
54178: LD_INT 1
54180: PLUS
54181: PPUSH
54182: LD_VAR 0 1
54186: PPUSH
54187: CALL_OW 1
54191: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54192: LD_ADDR_EXP 57
54196: PUSH
54197: LD_EXP 57
54201: PPUSH
54202: LD_EXP 57
54206: PUSH
54207: LD_INT 1
54209: PLUS
54210: PPUSH
54211: EMPTY
54212: PPUSH
54213: CALL_OW 1
54217: ST_TO_ADDR
// end ; if not factoryWaypoints then
54218: LD_EXP 60
54222: NOT
54223: IFFALSE 54227
// exit ;
54225: GO 54800
// for i := 1 to Count ( factoryWaypoints ) do
54227: LD_ADDR_VAR 0 4
54231: PUSH
54232: DOUBLE
54233: LD_INT 1
54235: DEC
54236: ST_TO_ADDR
54237: LD_EXP 60
54241: PPUSH
54242: CALL 12572 0 1
54246: PUSH
54247: FOR_TO
54248: IFFALSE 54798
// if factoryWaypoints [ i ] [ 2 ] = factory then
54250: LD_EXP 60
54254: PUSH
54255: LD_VAR 0 4
54259: ARRAY
54260: PUSH
54261: LD_INT 2
54263: ARRAY
54264: PUSH
54265: LD_VAR 0 2
54269: EQUAL
54270: IFFALSE 54796
// begin if GetControl ( vehicle ) = control_manual then
54272: LD_VAR 0 1
54276: PPUSH
54277: CALL_OW 263
54281: PUSH
54282: LD_INT 1
54284: EQUAL
54285: IFFALSE 54649
// begin driver := IsDrivenBy ( vehicle ) ;
54287: LD_ADDR_VAR 0 5
54291: PUSH
54292: LD_VAR 0 1
54296: PPUSH
54297: CALL_OW 311
54301: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54302: LD_VAR 0 5
54306: PUSH
54307: LD_EXP 61
54311: IN
54312: IFTRUE 54326
54314: PUSH
54315: LD_VAR 0 1
54319: PUSH
54320: LD_EXP 61
54324: IN
54325: OR
54326: IFFALSE 54332
// exit ;
54328: POP
54329: POP
54330: GO 54800
// if not HasTask ( driver ) then
54332: LD_VAR 0 5
54336: PPUSH
54337: CALL_OW 314
54341: NOT
54342: IFFALSE 54647
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
54344: LD_ADDR_EXP 61
54348: PUSH
54349: LD_EXP 61
54353: PPUSH
54354: LD_VAR 0 5
54358: PPUSH
54359: CALL 48538 0 2
54363: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
54364: LD_ADDR_EXP 61
54368: PUSH
54369: LD_EXP 61
54373: PPUSH
54374: LD_VAR 0 1
54378: PPUSH
54379: CALL 48538 0 2
54383: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54384: LD_ADDR_VAR 0 6
54388: PUSH
54389: LD_EXP 60
54393: PUSH
54394: LD_VAR 0 4
54398: ARRAY
54399: PUSH
54400: LD_INT 3
54402: ARRAY
54403: PPUSH
54404: LD_EXP 60
54408: PUSH
54409: LD_VAR 0 4
54413: ARRAY
54414: PUSH
54415: LD_INT 4
54417: ARRAY
54418: PPUSH
54419: CALL_OW 428
54423: ST_TO_ADDR
// if hex then
54424: LD_VAR 0 6
54428: IFFALSE 54446
// ComMoveUnit ( driver , hex ) else
54430: LD_VAR 0 5
54434: PPUSH
54435: LD_VAR 0 6
54439: PPUSH
54440: CALL_OW 112
54444: GO 54530
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
54446: LD_VAR 0 1
54450: PPUSH
54451: LD_EXP 60
54455: PUSH
54456: LD_VAR 0 4
54460: ARRAY
54461: PUSH
54462: LD_INT 3
54464: ARRAY
54465: PPUSH
54466: LD_EXP 60
54470: PUSH
54471: LD_VAR 0 4
54475: ARRAY
54476: PUSH
54477: LD_INT 4
54479: ARRAY
54480: PPUSH
54481: CALL_OW 297
54485: PUSH
54486: LD_INT 0
54488: GREATER
54489: IFFALSE 54530
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54491: LD_VAR 0 5
54495: PPUSH
54496: LD_EXP 60
54500: PUSH
54501: LD_VAR 0 4
54505: ARRAY
54506: PUSH
54507: LD_INT 3
54509: ARRAY
54510: PPUSH
54511: LD_EXP 60
54515: PUSH
54516: LD_VAR 0 4
54520: ARRAY
54521: PUSH
54522: LD_INT 4
54524: ARRAY
54525: PPUSH
54526: CALL_OW 111
// AddComExitVehicle ( driver ) ;
54530: LD_VAR 0 5
54534: PPUSH
54535: CALL_OW 181
// if Multiplayer then
54539: LD_OWVAR 4
54543: IFFALSE 54592
// begin repeat wait ( 10 ) ;
54545: LD_INT 10
54547: PPUSH
54548: CALL_OW 67
// until not IsInUnit ( driver ) ;
54552: LD_VAR 0 5
54556: PPUSH
54557: CALL_OW 310
54561: NOT
54562: IFFALSE 54545
// if not HasTask ( driver ) then
54564: LD_VAR 0 5
54568: PPUSH
54569: CALL_OW 314
54573: NOT
54574: IFFALSE 54590
// ComEnterUnit ( driver , factory ) ;
54576: LD_VAR 0 5
54580: PPUSH
54581: LD_VAR 0 2
54585: PPUSH
54586: CALL_OW 120
// end else
54590: GO 54606
// AddComEnterUnit ( driver , factory ) ;
54592: LD_VAR 0 5
54596: PPUSH
54597: LD_VAR 0 2
54601: PPUSH
54602: CALL_OW 180
// wait ( 0 0$1 ) ;
54606: LD_INT 35
54608: PPUSH
54609: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
54613: LD_ADDR_EXP 61
54617: PUSH
54618: LD_EXP 61
54622: PUSH
54623: LD_VAR 0 5
54627: DIFF
54628: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
54629: LD_ADDR_EXP 61
54633: PUSH
54634: LD_EXP 61
54638: PUSH
54639: LD_VAR 0 1
54643: DIFF
54644: ST_TO_ADDR
// break ;
54645: GO 54798
// end ; end else
54647: GO 54796
// if GetControl ( vehicle ) = control_remote then
54649: LD_VAR 0 1
54653: PPUSH
54654: CALL_OW 263
54658: PUSH
54659: LD_INT 2
54661: EQUAL
54662: IFFALSE 54748
// begin wait ( 0 0$2 ) ;
54664: LD_INT 70
54666: PPUSH
54667: CALL_OW 67
// repeat wait ( 10 ) ;
54671: LD_INT 10
54673: PPUSH
54674: CALL_OW 67
// Connect ( vehicle ) ;
54678: LD_VAR 0 1
54682: PPUSH
54683: CALL 18850 0 1
// until IsControledBy ( vehicle ) ;
54687: LD_VAR 0 1
54691: PPUSH
54692: CALL_OW 312
54696: IFFALSE 54671
// wait ( 10 ) ;
54698: LD_INT 10
54700: PPUSH
54701: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54705: LD_VAR 0 1
54709: PPUSH
54710: LD_EXP 60
54714: PUSH
54715: LD_VAR 0 4
54719: ARRAY
54720: PUSH
54721: LD_INT 3
54723: ARRAY
54724: PPUSH
54725: LD_EXP 60
54729: PUSH
54730: LD_VAR 0 4
54734: ARRAY
54735: PUSH
54736: LD_INT 4
54738: ARRAY
54739: PPUSH
54740: CALL_OW 111
// break ;
54744: GO 54798
// end else
54746: GO 54796
// begin wait ( 0 0$3 ) ;
54748: LD_INT 105
54750: PPUSH
54751: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
54755: LD_VAR 0 1
54759: PPUSH
54760: LD_EXP 60
54764: PUSH
54765: LD_VAR 0 4
54769: ARRAY
54770: PUSH
54771: LD_INT 3
54773: ARRAY
54774: PPUSH
54775: LD_EXP 60
54779: PUSH
54780: LD_VAR 0 4
54784: ARRAY
54785: PUSH
54786: LD_INT 4
54788: ARRAY
54789: PPUSH
54790: CALL_OW 111
// break ;
54794: GO 54798
// end ; end ;
54796: GO 54247
54798: POP
54799: POP
// end ;
54800: LD_VAR 0 3
54804: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
54805: LD_INT 0
54807: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
54808: LD_VAR 0 1
54812: PUSH
54813: LD_INT 250
54815: EQUAL
54816: IFFALSE 54833
54818: PUSH
54819: LD_VAR 0 2
54823: PPUSH
54824: CALL_OW 264
54828: PUSH
54829: LD_INT 81
54831: EQUAL
54832: AND
54833: IFFALSE 54854
// MinerPlaceMine ( unit , x , y ) ;
54835: LD_VAR 0 2
54839: PPUSH
54840: LD_VAR 0 4
54844: PPUSH
54845: LD_VAR 0 5
54849: PPUSH
54850: CALL 58135 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
54854: LD_VAR 0 1
54858: PUSH
54859: LD_INT 251
54861: EQUAL
54862: IFFALSE 54879
54864: PUSH
54865: LD_VAR 0 2
54869: PPUSH
54870: CALL_OW 264
54874: PUSH
54875: LD_INT 81
54877: EQUAL
54878: AND
54879: IFFALSE 54900
// MinerDetonateMine ( unit , x , y ) ;
54881: LD_VAR 0 2
54885: PPUSH
54886: LD_VAR 0 4
54890: PPUSH
54891: LD_VAR 0 5
54895: PPUSH
54896: CALL 58542 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
54900: LD_VAR 0 1
54904: PUSH
54905: LD_INT 252
54907: EQUAL
54908: IFFALSE 54925
54910: PUSH
54911: LD_VAR 0 2
54915: PPUSH
54916: CALL_OW 264
54920: PUSH
54921: LD_INT 81
54923: EQUAL
54924: AND
54925: IFFALSE 54946
// MinerCreateMinefield ( unit , x , y ) ;
54927: LD_VAR 0 2
54931: PPUSH
54932: LD_VAR 0 4
54936: PPUSH
54937: LD_VAR 0 5
54941: PPUSH
54942: CALL 58774 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
54946: LD_VAR 0 1
54950: PUSH
54951: LD_INT 253
54953: EQUAL
54954: IFFALSE 54971
54956: PUSH
54957: LD_VAR 0 2
54961: PPUSH
54962: CALL_OW 257
54966: PUSH
54967: LD_INT 5
54969: EQUAL
54970: AND
54971: IFFALSE 54992
// ComBinocular ( unit , x , y ) ;
54973: LD_VAR 0 2
54977: PPUSH
54978: LD_VAR 0 4
54982: PPUSH
54983: LD_VAR 0 5
54987: PPUSH
54988: CALL 59149 0 3
// if selectedUnit then
54992: LD_VAR 0 3
54996: IFFALSE 55056
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
54998: LD_VAR 0 1
55002: PUSH
55003: LD_INT 254
55005: EQUAL
55006: IFFALSE 55023
55008: PUSH
55009: LD_VAR 0 2
55013: PPUSH
55014: CALL_OW 264
55018: PUSH
55019: LD_INT 99
55021: EQUAL
55022: AND
55023: IFFALSE 55040
55025: PUSH
55026: LD_VAR 0 3
55030: PPUSH
55031: CALL_OW 263
55035: PUSH
55036: LD_INT 3
55038: EQUAL
55039: AND
55040: IFFALSE 55056
// HackDestroyVehicle ( unit , selectedUnit ) ;
55042: LD_VAR 0 2
55046: PPUSH
55047: LD_VAR 0 3
55051: PPUSH
55052: CALL 57346 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55056: LD_VAR 0 1
55060: PUSH
55061: LD_INT 255
55063: EQUAL
55064: IFFALSE 55088
55066: PUSH
55067: LD_VAR 0 2
55071: PPUSH
55072: CALL_OW 264
55076: PUSH
55077: LD_INT 14
55079: PUSH
55080: LD_INT 53
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: IN
55087: AND
55088: IFFALSE 55106
55090: PUSH
55091: LD_VAR 0 4
55095: PPUSH
55096: LD_VAR 0 5
55100: PPUSH
55101: CALL_OW 488
55105: AND
55106: IFFALSE 55130
// CutTreeXYR ( unit , x , y , 12 ) ;
55108: LD_VAR 0 2
55112: PPUSH
55113: LD_VAR 0 4
55117: PPUSH
55118: LD_VAR 0 5
55122: PPUSH
55123: LD_INT 12
55125: PPUSH
55126: CALL 55321 0 4
// if cmd = 256 then
55130: LD_VAR 0 1
55134: PUSH
55135: LD_INT 256
55137: EQUAL
55138: IFFALSE 55159
// SetFactoryWaypoint ( unit , x , y ) ;
55140: LD_VAR 0 2
55144: PPUSH
55145: LD_VAR 0 4
55149: PPUSH
55150: LD_VAR 0 5
55154: PPUSH
55155: CALL 62815 0 3
// if cmd = 257 then
55159: LD_VAR 0 1
55163: PUSH
55164: LD_INT 257
55166: EQUAL
55167: IFFALSE 55188
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55169: LD_VAR 0 2
55173: PPUSH
55174: LD_VAR 0 4
55178: PPUSH
55179: LD_VAR 0 5
55183: PPUSH
55184: CALL 63311 0 3
// if cmd = 258 then
55188: LD_VAR 0 1
55192: PUSH
55193: LD_INT 258
55195: EQUAL
55196: IFFALSE 55220
// BurnTreeXYR ( unit , x , y , 8 ) ;
55198: LD_VAR 0 2
55202: PPUSH
55203: LD_VAR 0 4
55207: PPUSH
55208: LD_VAR 0 5
55212: PPUSH
55213: LD_INT 8
55215: PPUSH
55216: CALL 55721 0 4
// end ;
55220: LD_VAR 0 6
55224: RET
// export function ComRadiation ( un ) ; var eff ; begin
55225: LD_INT 0
55227: PPUSH
55228: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55229: LD_VAR 0 1
55233: PPUSH
55234: CALL_OW 264
55238: PUSH
55239: LD_INT 91
55241: NONEQUAL
55242: IFFALSE 55246
// exit ;
55244: GO 55316
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55246: LD_INT 68
55248: PPUSH
55249: LD_VAR 0 1
55253: PPUSH
55254: CALL_OW 255
55258: PPUSH
55259: CALL_OW 321
55263: PUSH
55264: LD_INT 2
55266: EQUAL
55267: IFFALSE 55279
// eff := 50 else
55269: LD_ADDR_VAR 0 3
55273: PUSH
55274: LD_INT 50
55276: ST_TO_ADDR
55277: GO 55287
// eff := 25 ;
55279: LD_ADDR_VAR 0 3
55283: PUSH
55284: LD_INT 25
55286: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55287: LD_VAR 0 1
55291: PPUSH
55292: CALL_OW 250
55296: PPUSH
55297: LD_VAR 0 1
55301: PPUSH
55302: CALL_OW 251
55306: PPUSH
55307: LD_VAR 0 3
55311: PPUSH
55312: CALL_OW 495
// end ;
55316: LD_VAR 0 2
55320: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55321: LD_INT 0
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
55330: PPUSH
55331: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
55332: LD_VAR 0 1
55336: PPUSH
55337: CALL_OW 302
55341: NOT
55342: IFTRUE 55361
55344: PUSH
55345: LD_VAR 0 2
55349: PPUSH
55350: LD_VAR 0 3
55354: PPUSH
55355: CALL_OW 488
55359: NOT
55360: OR
55361: IFTRUE 55370
55363: PUSH
55364: LD_VAR 0 4
55368: NOT
55369: OR
55370: IFFALSE 55374
// exit ;
55372: GO 55716
// list := [ ] ;
55374: LD_ADDR_VAR 0 13
55378: PUSH
55379: EMPTY
55380: ST_TO_ADDR
// if x - r < 0 then
55381: LD_VAR 0 2
55385: PUSH
55386: LD_VAR 0 4
55390: MINUS
55391: PUSH
55392: LD_INT 0
55394: LESS
55395: IFFALSE 55407
// min_x := 0 else
55397: LD_ADDR_VAR 0 7
55401: PUSH
55402: LD_INT 0
55404: ST_TO_ADDR
55405: GO 55423
// min_x := x - r ;
55407: LD_ADDR_VAR 0 7
55411: PUSH
55412: LD_VAR 0 2
55416: PUSH
55417: LD_VAR 0 4
55421: MINUS
55422: ST_TO_ADDR
// if y - r < 0 then
55423: LD_VAR 0 3
55427: PUSH
55428: LD_VAR 0 4
55432: MINUS
55433: PUSH
55434: LD_INT 0
55436: LESS
55437: IFFALSE 55449
// min_y := 0 else
55439: LD_ADDR_VAR 0 8
55443: PUSH
55444: LD_INT 0
55446: ST_TO_ADDR
55447: GO 55465
// min_y := y - r ;
55449: LD_ADDR_VAR 0 8
55453: PUSH
55454: LD_VAR 0 3
55458: PUSH
55459: LD_VAR 0 4
55463: MINUS
55464: ST_TO_ADDR
// max_x := x + r ;
55465: LD_ADDR_VAR 0 9
55469: PUSH
55470: LD_VAR 0 2
55474: PUSH
55475: LD_VAR 0 4
55479: PLUS
55480: ST_TO_ADDR
// max_y := y + r ;
55481: LD_ADDR_VAR 0 10
55485: PUSH
55486: LD_VAR 0 3
55490: PUSH
55491: LD_VAR 0 4
55495: PLUS
55496: ST_TO_ADDR
// for _x = min_x to max_x do
55497: LD_ADDR_VAR 0 11
55501: PUSH
55502: DOUBLE
55503: LD_VAR 0 7
55507: DEC
55508: ST_TO_ADDR
55509: LD_VAR 0 9
55513: PUSH
55514: FOR_TO
55515: IFFALSE 55634
// for _y = min_y to max_y do
55517: LD_ADDR_VAR 0 12
55521: PUSH
55522: DOUBLE
55523: LD_VAR 0 8
55527: DEC
55528: ST_TO_ADDR
55529: LD_VAR 0 10
55533: PUSH
55534: FOR_TO
55535: IFFALSE 55630
// begin if not ValidHex ( _x , _y ) then
55537: LD_VAR 0 11
55541: PPUSH
55542: LD_VAR 0 12
55546: PPUSH
55547: CALL_OW 488
55551: NOT
55552: IFFALSE 55556
// continue ;
55554: GO 55534
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55556: LD_VAR 0 11
55560: PPUSH
55561: LD_VAR 0 12
55565: PPUSH
55566: CALL_OW 351
55570: IFFALSE 55588
55572: PUSH
55573: LD_VAR 0 11
55577: PPUSH
55578: LD_VAR 0 12
55582: PPUSH
55583: CALL_OW 554
55587: AND
55588: IFFALSE 55628
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55590: LD_ADDR_VAR 0 13
55594: PUSH
55595: LD_VAR 0 13
55599: PPUSH
55600: LD_VAR 0 13
55604: PUSH
55605: LD_INT 1
55607: PLUS
55608: PPUSH
55609: LD_VAR 0 11
55613: PUSH
55614: LD_VAR 0 12
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PPUSH
55623: CALL_OW 2
55627: ST_TO_ADDR
// end ;
55628: GO 55534
55630: POP
55631: POP
55632: GO 55514
55634: POP
55635: POP
// if not list then
55636: LD_VAR 0 13
55640: NOT
55641: IFFALSE 55645
// exit ;
55643: GO 55716
// for i in list do
55645: LD_ADDR_VAR 0 6
55649: PUSH
55650: LD_VAR 0 13
55654: PUSH
55655: FOR_IN
55656: IFFALSE 55714
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
55658: LD_VAR 0 1
55662: PPUSH
55663: LD_STRING M
55665: PUSH
55666: LD_VAR 0 6
55670: PUSH
55671: LD_INT 1
55673: ARRAY
55674: PUSH
55675: LD_VAR 0 6
55679: PUSH
55680: LD_INT 2
55682: ARRAY
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: PPUSH
55708: CALL_OW 447
55712: GO 55655
55714: POP
55715: POP
// end ;
55716: LD_VAR 0 5
55720: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
55721: LD_INT 0
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
55733: LD_VAR 0 1
55737: PPUSH
55738: CALL_OW 302
55742: NOT
55743: IFTRUE 55762
55745: PUSH
55746: LD_VAR 0 2
55750: PPUSH
55751: LD_VAR 0 3
55755: PPUSH
55756: CALL_OW 488
55760: NOT
55761: OR
55762: IFTRUE 55771
55764: PUSH
55765: LD_VAR 0 4
55769: NOT
55770: OR
55771: IFFALSE 55775
// exit ;
55773: GO 56292
// list := [ ] ;
55775: LD_ADDR_VAR 0 13
55779: PUSH
55780: EMPTY
55781: ST_TO_ADDR
// if x - r < 0 then
55782: LD_VAR 0 2
55786: PUSH
55787: LD_VAR 0 4
55791: MINUS
55792: PUSH
55793: LD_INT 0
55795: LESS
55796: IFFALSE 55808
// min_x := 0 else
55798: LD_ADDR_VAR 0 7
55802: PUSH
55803: LD_INT 0
55805: ST_TO_ADDR
55806: GO 55824
// min_x := x - r ;
55808: LD_ADDR_VAR 0 7
55812: PUSH
55813: LD_VAR 0 2
55817: PUSH
55818: LD_VAR 0 4
55822: MINUS
55823: ST_TO_ADDR
// if y - r < 0 then
55824: LD_VAR 0 3
55828: PUSH
55829: LD_VAR 0 4
55833: MINUS
55834: PUSH
55835: LD_INT 0
55837: LESS
55838: IFFALSE 55850
// min_y := 0 else
55840: LD_ADDR_VAR 0 8
55844: PUSH
55845: LD_INT 0
55847: ST_TO_ADDR
55848: GO 55866
// min_y := y - r ;
55850: LD_ADDR_VAR 0 8
55854: PUSH
55855: LD_VAR 0 3
55859: PUSH
55860: LD_VAR 0 4
55864: MINUS
55865: ST_TO_ADDR
// max_x := x + r ;
55866: LD_ADDR_VAR 0 9
55870: PUSH
55871: LD_VAR 0 2
55875: PUSH
55876: LD_VAR 0 4
55880: PLUS
55881: ST_TO_ADDR
// max_y := y + r ;
55882: LD_ADDR_VAR 0 10
55886: PUSH
55887: LD_VAR 0 3
55891: PUSH
55892: LD_VAR 0 4
55896: PLUS
55897: ST_TO_ADDR
// for _x = min_x to max_x do
55898: LD_ADDR_VAR 0 11
55902: PUSH
55903: DOUBLE
55904: LD_VAR 0 7
55908: DEC
55909: ST_TO_ADDR
55910: LD_VAR 0 9
55914: PUSH
55915: FOR_TO
55916: IFFALSE 56035
// for _y = min_y to max_y do
55918: LD_ADDR_VAR 0 12
55922: PUSH
55923: DOUBLE
55924: LD_VAR 0 8
55928: DEC
55929: ST_TO_ADDR
55930: LD_VAR 0 10
55934: PUSH
55935: FOR_TO
55936: IFFALSE 56031
// begin if not ValidHex ( _x , _y ) then
55938: LD_VAR 0 11
55942: PPUSH
55943: LD_VAR 0 12
55947: PPUSH
55948: CALL_OW 488
55952: NOT
55953: IFFALSE 55957
// continue ;
55955: GO 55935
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
55957: LD_VAR 0 11
55961: PPUSH
55962: LD_VAR 0 12
55966: PPUSH
55967: CALL_OW 351
55971: IFFALSE 55989
55973: PUSH
55974: LD_VAR 0 11
55978: PPUSH
55979: LD_VAR 0 12
55983: PPUSH
55984: CALL_OW 554
55988: AND
55989: IFFALSE 56029
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
55991: LD_ADDR_VAR 0 13
55995: PUSH
55996: LD_VAR 0 13
56000: PPUSH
56001: LD_VAR 0 13
56005: PUSH
56006: LD_INT 1
56008: PLUS
56009: PPUSH
56010: LD_VAR 0 11
56014: PUSH
56015: LD_VAR 0 12
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PPUSH
56024: CALL_OW 2
56028: ST_TO_ADDR
// end ;
56029: GO 55935
56031: POP
56032: POP
56033: GO 55915
56035: POP
56036: POP
// if not list then
56037: LD_VAR 0 13
56041: NOT
56042: IFFALSE 56046
// exit ;
56044: GO 56292
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56046: LD_ADDR_VAR 0 13
56050: PUSH
56051: LD_VAR 0 1
56055: PPUSH
56056: LD_VAR 0 13
56060: PPUSH
56061: LD_INT 1
56063: PPUSH
56064: LD_INT 1
56066: PPUSH
56067: CALL 15978 0 4
56071: ST_TO_ADDR
// ComStop ( flame ) ;
56072: LD_VAR 0 1
56076: PPUSH
56077: CALL_OW 141
// for i in list do
56081: LD_ADDR_VAR 0 6
56085: PUSH
56086: LD_VAR 0 13
56090: PUSH
56091: FOR_IN
56092: IFFALSE 56123
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56094: LD_VAR 0 1
56098: PPUSH
56099: LD_VAR 0 6
56103: PUSH
56104: LD_INT 1
56106: ARRAY
56107: PPUSH
56108: LD_VAR 0 6
56112: PUSH
56113: LD_INT 2
56115: ARRAY
56116: PPUSH
56117: CALL_OW 176
56121: GO 56091
56123: POP
56124: POP
// repeat wait ( 0 0$1 ) ;
56125: LD_INT 35
56127: PPUSH
56128: CALL_OW 67
// task := GetTaskList ( flame ) ;
56132: LD_ADDR_VAR 0 14
56136: PUSH
56137: LD_VAR 0 1
56141: PPUSH
56142: CALL_OW 437
56146: ST_TO_ADDR
// if not task then
56147: LD_VAR 0 14
56151: NOT
56152: IFFALSE 56156
// exit ;
56154: GO 56292
// if task [ 1 ] [ 1 ] <> | then
56156: LD_VAR 0 14
56160: PUSH
56161: LD_INT 1
56163: ARRAY
56164: PUSH
56165: LD_INT 1
56167: ARRAY
56168: PUSH
56169: LD_STRING |
56171: NONEQUAL
56172: IFFALSE 56176
// exit ;
56174: GO 56292
// _x := task [ 1 ] [ 2 ] ;
56176: LD_ADDR_VAR 0 11
56180: PUSH
56181: LD_VAR 0 14
56185: PUSH
56186: LD_INT 1
56188: ARRAY
56189: PUSH
56190: LD_INT 2
56192: ARRAY
56193: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56194: LD_ADDR_VAR 0 12
56198: PUSH
56199: LD_VAR 0 14
56203: PUSH
56204: LD_INT 1
56206: ARRAY
56207: PUSH
56208: LD_INT 3
56210: ARRAY
56211: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56212: LD_VAR 0 11
56216: PPUSH
56217: LD_VAR 0 12
56221: PPUSH
56222: CALL_OW 351
56226: NOT
56227: IFTRUE 56246
56229: PUSH
56230: LD_VAR 0 11
56234: PPUSH
56235: LD_VAR 0 12
56239: PPUSH
56240: CALL_OW 554
56244: NOT
56245: OR
56246: IFFALSE 56280
// begin task := Delete ( task , 1 ) ;
56248: LD_ADDR_VAR 0 14
56252: PUSH
56253: LD_VAR 0 14
56257: PPUSH
56258: LD_INT 1
56260: PPUSH
56261: CALL_OW 3
56265: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56266: LD_VAR 0 1
56270: PPUSH
56271: LD_VAR 0 14
56275: PPUSH
56276: CALL_OW 446
// end ; until not HasTask ( flame ) ;
56280: LD_VAR 0 1
56284: PPUSH
56285: CALL_OW 314
56289: NOT
56290: IFFALSE 56125
// end ;
56292: LD_VAR 0 5
56296: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
56297: LD_EXP 49
56301: NOT
56302: IFFALSE 56352
56304: GO 56306
56306: DISABLE
// begin initHack := true ;
56307: LD_ADDR_EXP 49
56311: PUSH
56312: LD_INT 1
56314: ST_TO_ADDR
// hackTanks := [ ] ;
56315: LD_ADDR_EXP 50
56319: PUSH
56320: EMPTY
56321: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
56322: LD_ADDR_EXP 51
56326: PUSH
56327: EMPTY
56328: ST_TO_ADDR
// hackLimit := 3 ;
56329: LD_ADDR_EXP 52
56333: PUSH
56334: LD_INT 3
56336: ST_TO_ADDR
// hackDist := 12 ;
56337: LD_ADDR_EXP 53
56341: PUSH
56342: LD_INT 12
56344: ST_TO_ADDR
// hackCounter := [ ] ;
56345: LD_ADDR_EXP 54
56349: PUSH
56350: EMPTY
56351: ST_TO_ADDR
// end ;
56352: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
56353: LD_EXP 49
56357: IFFALSE 56375
56359: PUSH
56360: LD_INT 34
56362: PUSH
56363: LD_INT 99
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PPUSH
56370: CALL_OW 69
56374: AND
56375: IFFALSE 56628
56377: GO 56379
56379: DISABLE
56380: LD_INT 0
56382: PPUSH
56383: PPUSH
// begin enable ;
56384: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
56385: LD_ADDR_VAR 0 1
56389: PUSH
56390: LD_INT 34
56392: PUSH
56393: LD_INT 99
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PPUSH
56400: CALL_OW 69
56404: PUSH
56405: FOR_IN
56406: IFFALSE 56626
// begin if not i in hackTanks then
56408: LD_VAR 0 1
56412: PUSH
56413: LD_EXP 50
56417: IN
56418: NOT
56419: IFFALSE 56502
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
56421: LD_ADDR_EXP 50
56425: PUSH
56426: LD_EXP 50
56430: PPUSH
56431: LD_EXP 50
56435: PUSH
56436: LD_INT 1
56438: PLUS
56439: PPUSH
56440: LD_VAR 0 1
56444: PPUSH
56445: CALL_OW 1
56449: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
56450: LD_ADDR_EXP 51
56454: PUSH
56455: LD_EXP 51
56459: PPUSH
56460: LD_EXP 51
56464: PUSH
56465: LD_INT 1
56467: PLUS
56468: PPUSH
56469: EMPTY
56470: PPUSH
56471: CALL_OW 1
56475: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
56476: LD_ADDR_EXP 54
56480: PUSH
56481: LD_EXP 54
56485: PPUSH
56486: LD_EXP 54
56490: PUSH
56491: LD_INT 1
56493: PLUS
56494: PPUSH
56495: EMPTY
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// end ; if not IsOk ( i ) then
56502: LD_VAR 0 1
56506: PPUSH
56507: CALL_OW 302
56511: NOT
56512: IFFALSE 56525
// begin HackUnlinkAll ( i ) ;
56514: LD_VAR 0 1
56518: PPUSH
56519: CALL 56631 0 1
// continue ;
56523: GO 56405
// end ; HackCheckCapturedStatus ( i ) ;
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL 57076 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
56534: LD_ADDR_VAR 0 2
56538: PUSH
56539: LD_INT 81
56541: PUSH
56542: LD_VAR 0 1
56546: PPUSH
56547: CALL_OW 255
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 33
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 91
56568: PUSH
56569: LD_VAR 0 1
56573: PUSH
56574: LD_EXP 53
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 50
56586: PUSH
56587: EMPTY
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: PPUSH
56596: CALL_OW 69
56600: ST_TO_ADDR
// if not tmp then
56601: LD_VAR 0 2
56605: NOT
56606: IFFALSE 56610
// continue ;
56608: GO 56405
// HackLink ( i , tmp ) ;
56610: LD_VAR 0 1
56614: PPUSH
56615: LD_VAR 0 2
56619: PPUSH
56620: CALL 56767 0 2
// end ;
56624: GO 56405
56626: POP
56627: POP
// end ;
56628: PPOPN 2
56630: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
56631: LD_INT 0
56633: PPUSH
56634: PPUSH
56635: PPUSH
// if not hack in hackTanks then
56636: LD_VAR 0 1
56640: PUSH
56641: LD_EXP 50
56645: IN
56646: NOT
56647: IFFALSE 56651
// exit ;
56649: GO 56762
// index := GetElementIndex ( hackTanks , hack ) ;
56651: LD_ADDR_VAR 0 4
56655: PUSH
56656: LD_EXP 50
56660: PPUSH
56661: LD_VAR 0 1
56665: PPUSH
56666: CALL 15273 0 2
56670: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
56671: LD_EXP 51
56675: PUSH
56676: LD_VAR 0 4
56680: ARRAY
56681: IFFALSE 56762
// begin for i in hackTanksCaptured [ index ] do
56683: LD_ADDR_VAR 0 3
56687: PUSH
56688: LD_EXP 51
56692: PUSH
56693: LD_VAR 0 4
56697: ARRAY
56698: PUSH
56699: FOR_IN
56700: IFFALSE 56726
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
56702: LD_VAR 0 3
56706: PUSH
56707: LD_INT 1
56709: ARRAY
56710: PPUSH
56711: LD_VAR 0 3
56715: PUSH
56716: LD_INT 2
56718: ARRAY
56719: PPUSH
56720: CALL_OW 235
56724: GO 56699
56726: POP
56727: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
56728: LD_ADDR_EXP 51
56732: PUSH
56733: LD_EXP 51
56737: PPUSH
56738: LD_VAR 0 4
56742: PPUSH
56743: EMPTY
56744: PPUSH
56745: CALL_OW 1
56749: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
56750: LD_VAR 0 1
56754: PPUSH
56755: LD_INT 0
56757: PPUSH
56758: CALL_OW 505
// end ; end ;
56762: LD_VAR 0 2
56766: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
56767: LD_INT 0
56769: PPUSH
56770: PPUSH
56771: PPUSH
// if not hack in hackTanks or not vehicles then
56772: LD_VAR 0 1
56776: PUSH
56777: LD_EXP 50
56781: IN
56782: NOT
56783: IFTRUE 56792
56785: PUSH
56786: LD_VAR 0 2
56790: NOT
56791: OR
56792: IFFALSE 56796
// exit ;
56794: GO 57071
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
56796: LD_ADDR_VAR 0 2
56800: PUSH
56801: LD_VAR 0 1
56805: PPUSH
56806: LD_VAR 0 2
56810: PPUSH
56811: LD_INT 1
56813: PPUSH
56814: LD_INT 1
56816: PPUSH
56817: CALL 15925 0 4
56821: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
56822: LD_ADDR_VAR 0 5
56826: PUSH
56827: LD_EXP 50
56831: PPUSH
56832: LD_VAR 0 1
56836: PPUSH
56837: CALL 15273 0 2
56841: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
56842: LD_EXP 51
56846: PUSH
56847: LD_VAR 0 5
56851: ARRAY
56852: PUSH
56853: LD_EXP 52
56857: LESS
56858: IFFALSE 57047
// begin for i := 1 to vehicles do
56860: LD_ADDR_VAR 0 4
56864: PUSH
56865: DOUBLE
56866: LD_INT 1
56868: DEC
56869: ST_TO_ADDR
56870: LD_VAR 0 2
56874: PUSH
56875: FOR_TO
56876: IFFALSE 57045
// begin if hackTanksCaptured [ index ] = hackLimit then
56878: LD_EXP 51
56882: PUSH
56883: LD_VAR 0 5
56887: ARRAY
56888: PUSH
56889: LD_EXP 52
56893: EQUAL
56894: IFFALSE 56898
// break ;
56896: GO 57045
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
56898: LD_ADDR_EXP 54
56902: PUSH
56903: LD_EXP 54
56907: PPUSH
56908: LD_VAR 0 5
56912: PPUSH
56913: LD_EXP 54
56917: PUSH
56918: LD_VAR 0 5
56922: ARRAY
56923: PUSH
56924: LD_INT 1
56926: PLUS
56927: PPUSH
56928: CALL_OW 1
56932: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
56933: LD_ADDR_EXP 51
56937: PUSH
56938: LD_EXP 51
56942: PPUSH
56943: LD_VAR 0 5
56947: PUSH
56948: LD_EXP 51
56952: PUSH
56953: LD_VAR 0 5
56957: ARRAY
56958: PUSH
56959: LD_INT 1
56961: PLUS
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PPUSH
56967: LD_VAR 0 2
56971: PUSH
56972: LD_VAR 0 4
56976: ARRAY
56977: PUSH
56978: LD_VAR 0 2
56982: PUSH
56983: LD_VAR 0 4
56987: ARRAY
56988: PPUSH
56989: CALL_OW 255
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PPUSH
56998: CALL 15490 0 3
57002: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57003: LD_VAR 0 2
57007: PUSH
57008: LD_VAR 0 4
57012: ARRAY
57013: PPUSH
57014: LD_VAR 0 1
57018: PPUSH
57019: CALL_OW 255
57023: PPUSH
57024: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57028: LD_VAR 0 2
57032: PUSH
57033: LD_VAR 0 4
57037: ARRAY
57038: PPUSH
57039: CALL_OW 141
// end ;
57043: GO 56875
57045: POP
57046: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57047: LD_VAR 0 1
57051: PPUSH
57052: LD_EXP 51
57056: PUSH
57057: LD_VAR 0 5
57061: ARRAY
57062: PUSH
57063: LD_INT 0
57065: PLUS
57066: PPUSH
57067: CALL_OW 505
// end ;
57071: LD_VAR 0 3
57075: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57076: LD_INT 0
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
// if not hack in hackTanks then
57082: LD_VAR 0 1
57086: PUSH
57087: LD_EXP 50
57091: IN
57092: NOT
57093: IFFALSE 57097
// exit ;
57095: GO 57341
// index := GetElementIndex ( hackTanks , hack ) ;
57097: LD_ADDR_VAR 0 4
57101: PUSH
57102: LD_EXP 50
57106: PPUSH
57107: LD_VAR 0 1
57111: PPUSH
57112: CALL 15273 0 2
57116: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57117: LD_ADDR_VAR 0 3
57121: PUSH
57122: DOUBLE
57123: LD_EXP 51
57127: PUSH
57128: LD_VAR 0 4
57132: ARRAY
57133: INC
57134: ST_TO_ADDR
57135: LD_INT 1
57137: PUSH
57138: FOR_DOWNTO
57139: IFFALSE 57315
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57141: LD_ADDR_VAR 0 5
57145: PUSH
57146: LD_EXP 51
57150: PUSH
57151: LD_VAR 0 4
57155: ARRAY
57156: PUSH
57157: LD_VAR 0 3
57161: ARRAY
57162: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57163: LD_VAR 0 5
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PPUSH
57172: CALL_OW 302
57176: NOT
57177: IFTRUE 57205
57179: PUSH
57180: LD_VAR 0 5
57184: PUSH
57185: LD_INT 1
57187: ARRAY
57188: PPUSH
57189: CALL_OW 255
57193: PUSH
57194: LD_VAR 0 1
57198: PPUSH
57199: CALL_OW 255
57203: NONEQUAL
57204: OR
57205: IFFALSE 57313
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57207: LD_VAR 0 5
57211: PUSH
57212: LD_INT 1
57214: ARRAY
57215: PPUSH
57216: CALL_OW 305
57220: IFFALSE 57248
57222: PUSH
57223: LD_VAR 0 5
57227: PUSH
57228: LD_INT 1
57230: ARRAY
57231: PPUSH
57232: CALL_OW 255
57236: PUSH
57237: LD_VAR 0 1
57241: PPUSH
57242: CALL_OW 255
57246: EQUAL
57247: AND
57248: IFFALSE 57272
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57250: LD_VAR 0 5
57254: PUSH
57255: LD_INT 1
57257: ARRAY
57258: PPUSH
57259: LD_VAR 0 5
57263: PUSH
57264: LD_INT 2
57266: ARRAY
57267: PPUSH
57268: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57272: LD_ADDR_EXP 51
57276: PUSH
57277: LD_EXP 51
57281: PPUSH
57282: LD_VAR 0 4
57286: PPUSH
57287: LD_EXP 51
57291: PUSH
57292: LD_VAR 0 4
57296: ARRAY
57297: PPUSH
57298: LD_VAR 0 3
57302: PPUSH
57303: CALL_OW 3
57307: PPUSH
57308: CALL_OW 1
57312: ST_TO_ADDR
// end ; end ;
57313: GO 57138
57315: POP
57316: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57317: LD_VAR 0 1
57321: PPUSH
57322: LD_EXP 51
57326: PUSH
57327: LD_VAR 0 4
57331: ARRAY
57332: PUSH
57333: LD_INT 0
57335: PLUS
57336: PPUSH
57337: CALL_OW 505
// end ;
57341: LD_VAR 0 2
57345: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
57346: LD_INT 0
57348: PPUSH
57349: PPUSH
57350: PPUSH
57351: PPUSH
// if not hack in hackTanks then
57352: LD_VAR 0 1
57356: PUSH
57357: LD_EXP 50
57361: IN
57362: NOT
57363: IFFALSE 57367
// exit ;
57365: GO 57452
// index := GetElementIndex ( hackTanks , hack ) ;
57367: LD_ADDR_VAR 0 5
57371: PUSH
57372: LD_EXP 50
57376: PPUSH
57377: LD_VAR 0 1
57381: PPUSH
57382: CALL 15273 0 2
57386: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
57387: LD_ADDR_VAR 0 4
57391: PUSH
57392: DOUBLE
57393: LD_INT 1
57395: DEC
57396: ST_TO_ADDR
57397: LD_EXP 51
57401: PUSH
57402: LD_VAR 0 5
57406: ARRAY
57407: PUSH
57408: FOR_TO
57409: IFFALSE 57450
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
57411: LD_EXP 51
57415: PUSH
57416: LD_VAR 0 5
57420: ARRAY
57421: PUSH
57422: LD_VAR 0 4
57426: ARRAY
57427: PUSH
57428: LD_INT 1
57430: ARRAY
57431: PUSH
57432: LD_VAR 0 2
57436: EQUAL
57437: IFFALSE 57448
// KillUnit ( vehicle ) ;
57439: LD_VAR 0 2
57443: PPUSH
57444: CALL_OW 66
57448: GO 57408
57450: POP
57451: POP
// end ;
57452: LD_VAR 0 3
57456: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
57457: LD_EXP 55
57461: NOT
57462: IFFALSE 57595
57464: GO 57466
57466: DISABLE
57467: LD_INT 0
57469: PPUSH
// begin initMiner := true ;
57470: LD_ADDR_EXP 55
57474: PUSH
57475: LD_INT 1
57477: ST_TO_ADDR
// minersList := [ ] ;
57478: LD_ADDR_EXP 56
57482: PUSH
57483: EMPTY
57484: ST_TO_ADDR
// minerMinesList := [ ] ;
57485: LD_ADDR_EXP 57
57489: PUSH
57490: EMPTY
57491: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
57492: LD_ADDR_EXP 58
57496: PUSH
57497: LD_INT 6
57499: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
57500: LD_ADDR_VAR 0 1
57504: PUSH
57505: LD_INT 34
57507: PUSH
57508: LD_INT 81
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PPUSH
57515: CALL_OW 69
57519: PUSH
57520: FOR_IN
57521: IFFALSE 57593
// begin if not i in minersList then
57523: LD_VAR 0 1
57527: PUSH
57528: LD_EXP 56
57532: IN
57533: NOT
57534: IFFALSE 57591
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
57536: LD_ADDR_EXP 56
57540: PUSH
57541: LD_EXP 56
57545: PPUSH
57546: LD_EXP 56
57550: PUSH
57551: LD_INT 1
57553: PLUS
57554: PPUSH
57555: LD_VAR 0 1
57559: PPUSH
57560: CALL_OW 1
57564: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57565: LD_ADDR_EXP 57
57569: PUSH
57570: LD_EXP 57
57574: PPUSH
57575: LD_EXP 57
57579: PUSH
57580: LD_INT 1
57582: PLUS
57583: PPUSH
57584: EMPTY
57585: PPUSH
57586: CALL_OW 1
57590: ST_TO_ADDR
// end end ;
57591: GO 57520
57593: POP
57594: POP
// end ;
57595: PPOPN 1
57597: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
57598: LD_EXP 55
57602: IFFALSE 57633
57604: PUSH
57605: LD_EXP 57
57609: PPUSH
57610: CALL 12572 0 1
57614: IFTRUE 57632
57616: PUSH
57617: LD_INT 34
57619: PUSH
57620: LD_INT 81
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PPUSH
57627: CALL_OW 69
57631: OR
57632: AND
57633: IFFALSE 58132
57635: GO 57637
57637: DISABLE
57638: LD_INT 0
57640: PPUSH
57641: PPUSH
57642: PPUSH
57643: PPUSH
// begin enable ;
57644: ENABLE
// for i := minerMinesList downto 1 do
57645: LD_ADDR_VAR 0 1
57649: PUSH
57650: DOUBLE
57651: LD_EXP 57
57655: INC
57656: ST_TO_ADDR
57657: LD_INT 1
57659: PUSH
57660: FOR_DOWNTO
57661: IFFALSE 58130
// begin if IsLive ( minersList [ i ] ) then
57663: LD_EXP 56
57667: PUSH
57668: LD_VAR 0 1
57672: ARRAY
57673: PPUSH
57674: CALL_OW 300
57678: IFFALSE 57711
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
57680: LD_EXP 56
57684: PUSH
57685: LD_VAR 0 1
57689: ARRAY
57690: PPUSH
57691: LD_EXP 57
57695: PUSH
57696: LD_VAR 0 1
57700: ARRAY
57701: PPUSH
57702: CALL 12572 0 1
57706: PPUSH
57707: CALL_OW 505
// if not minerMinesList [ i ] then
57711: LD_EXP 57
57715: PUSH
57716: LD_VAR 0 1
57720: ARRAY
57721: NOT
57722: IFFALSE 57726
// continue ;
57724: GO 57660
// for j := minerMinesList [ i ] downto 1 do
57726: LD_ADDR_VAR 0 2
57730: PUSH
57731: DOUBLE
57732: LD_EXP 57
57736: PUSH
57737: LD_VAR 0 1
57741: ARRAY
57742: INC
57743: ST_TO_ADDR
57744: LD_INT 1
57746: PUSH
57747: FOR_DOWNTO
57748: IFFALSE 58126
// begin side := GetSide ( minersList [ i ] ) ;
57750: LD_ADDR_VAR 0 3
57754: PUSH
57755: LD_EXP 56
57759: PUSH
57760: LD_VAR 0 1
57764: ARRAY
57765: PPUSH
57766: CALL_OW 255
57770: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
57771: LD_EXP 56
57775: PUSH
57776: LD_VAR 0 1
57780: ARRAY
57781: PPUSH
57782: CALL_OW 301
57786: IFTRUE 57806
57788: PUSH
57789: LD_EXP 56
57793: PUSH
57794: LD_VAR 0 1
57798: ARRAY
57799: PPUSH
57800: CALL_OW 305
57804: NOT
57805: OR
57806: IFFALSE 57897
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57808: LD_EXP 57
57812: PUSH
57813: LD_VAR 0 1
57817: ARRAY
57818: PUSH
57819: LD_VAR 0 2
57823: ARRAY
57824: PUSH
57825: LD_INT 1
57827: ARRAY
57828: PPUSH
57829: LD_EXP 57
57833: PUSH
57834: LD_VAR 0 1
57838: ARRAY
57839: PUSH
57840: LD_VAR 0 2
57844: ARRAY
57845: PUSH
57846: LD_INT 2
57848: ARRAY
57849: PPUSH
57850: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
57854: LD_ADDR_EXP 57
57858: PUSH
57859: LD_EXP 57
57863: PPUSH
57864: LD_VAR 0 1
57868: PPUSH
57869: LD_EXP 57
57873: PUSH
57874: LD_VAR 0 1
57878: ARRAY
57879: PPUSH
57880: LD_VAR 0 2
57884: PPUSH
57885: CALL_OW 3
57889: PPUSH
57890: CALL_OW 1
57894: ST_TO_ADDR
// continue ;
57895: GO 57747
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
57897: LD_ADDR_VAR 0 4
57901: PUSH
57902: LD_EXP 57
57906: PUSH
57907: LD_VAR 0 1
57911: ARRAY
57912: PUSH
57913: LD_VAR 0 2
57917: ARRAY
57918: PUSH
57919: LD_INT 1
57921: ARRAY
57922: PPUSH
57923: LD_EXP 57
57927: PUSH
57928: LD_VAR 0 1
57932: ARRAY
57933: PUSH
57934: LD_VAR 0 2
57938: ARRAY
57939: PUSH
57940: LD_INT 2
57942: ARRAY
57943: PPUSH
57944: CALL_OW 428
57948: ST_TO_ADDR
// if not tmp then
57949: LD_VAR 0 4
57953: NOT
57954: IFFALSE 57958
// continue ;
57956: GO 57747
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
57958: LD_VAR 0 4
57962: PUSH
57963: LD_INT 81
57965: PUSH
57966: LD_VAR 0 3
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PPUSH
57975: CALL_OW 69
57979: IN
57980: IFFALSE 58030
57982: PUSH
57983: LD_EXP 57
57987: PUSH
57988: LD_VAR 0 1
57992: ARRAY
57993: PUSH
57994: LD_VAR 0 2
57998: ARRAY
57999: PUSH
58000: LD_INT 1
58002: ARRAY
58003: PPUSH
58004: LD_EXP 57
58008: PUSH
58009: LD_VAR 0 1
58013: ARRAY
58014: PUSH
58015: LD_VAR 0 2
58019: ARRAY
58020: PUSH
58021: LD_INT 2
58023: ARRAY
58024: PPUSH
58025: CALL_OW 458
58029: AND
58030: IFFALSE 58124
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58032: LD_EXP 57
58036: PUSH
58037: LD_VAR 0 1
58041: ARRAY
58042: PUSH
58043: LD_VAR 0 2
58047: ARRAY
58048: PUSH
58049: LD_INT 1
58051: ARRAY
58052: PPUSH
58053: LD_EXP 57
58057: PUSH
58058: LD_VAR 0 1
58062: ARRAY
58063: PUSH
58064: LD_VAR 0 2
58068: ARRAY
58069: PUSH
58070: LD_INT 2
58072: ARRAY
58073: PPUSH
58074: LD_VAR 0 3
58078: PPUSH
58079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58083: LD_ADDR_EXP 57
58087: PUSH
58088: LD_EXP 57
58092: PPUSH
58093: LD_VAR 0 1
58097: PPUSH
58098: LD_EXP 57
58102: PUSH
58103: LD_VAR 0 1
58107: ARRAY
58108: PPUSH
58109: LD_VAR 0 2
58113: PPUSH
58114: CALL_OW 3
58118: PPUSH
58119: CALL_OW 1
58123: ST_TO_ADDR
// end ; end ;
58124: GO 57747
58126: POP
58127: POP
// end ;
58128: GO 57660
58130: POP
58131: POP
// end ;
58132: PPOPN 4
58134: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58135: LD_INT 0
58137: PPUSH
58138: PPUSH
58139: PPUSH
58140: PPUSH
// result := false ;
58141: LD_ADDR_VAR 0 4
58145: PUSH
58146: LD_INT 0
58148: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58149: LD_VAR 0 1
58153: PPUSH
58154: CALL_OW 264
58158: PUSH
58159: LD_INT 81
58161: EQUAL
58162: NOT
58163: IFFALSE 58167
// exit ;
58165: GO 58537
// side := GetSide ( unit ) ;
58167: LD_ADDR_VAR 0 6
58171: PUSH
58172: LD_VAR 0 1
58176: PPUSH
58177: CALL_OW 255
58181: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58182: LD_ADDR_VAR 0 5
58186: PUSH
58187: LD_EXP 56
58191: PPUSH
58192: LD_VAR 0 1
58196: PPUSH
58197: CALL 15273 0 2
58201: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58202: LD_EXP 57
58206: PUSH
58207: LD_VAR 0 5
58211: ARRAY
58212: PUSH
58213: LD_EXP 58
58217: GREATEREQUAL
58218: IFFALSE 58222
// exit ;
58220: GO 58537
// ComMoveXY ( unit , x , y ) ;
58222: LD_VAR 0 1
58226: PPUSH
58227: LD_VAR 0 2
58231: PPUSH
58232: LD_VAR 0 3
58236: PPUSH
58237: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58241: LD_INT 35
58243: PPUSH
58244: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58248: LD_VAR 0 1
58252: PPUSH
58253: LD_VAR 0 2
58257: PPUSH
58258: LD_VAR 0 3
58262: PPUSH
58263: CALL 47319 0 3
58267: NOT
58268: IFFALSE 58281
58270: PUSH
58271: LD_VAR 0 1
58275: PPUSH
58276: CALL_OW 314
58280: AND
58281: IFFALSE 58285
// exit ;
58283: GO 58537
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58285: LD_VAR 0 2
58289: PPUSH
58290: LD_VAR 0 3
58294: PPUSH
58295: CALL_OW 428
58299: PUSH
58300: LD_VAR 0 1
58304: EQUAL
58305: IFFALSE 58319
58307: PUSH
58308: LD_VAR 0 1
58312: PPUSH
58313: CALL_OW 314
58317: NOT
58318: AND
58319: IFFALSE 58241
// if MineAtPos ( x , y ) then
58321: LD_VAR 0 2
58325: PPUSH
58326: LD_VAR 0 3
58330: PPUSH
58331: CALL_OW 458
58335: IFFALSE 58339
// exit ;
58337: GO 58537
// if your_side = side then
58339: LD_OWVAR 2
58343: PUSH
58344: LD_VAR 0 6
58348: EQUAL
58349: IFFALSE 58368
// PlaySoundXY ( x , y , PlantMine ) ;
58351: LD_VAR 0 2
58355: PPUSH
58356: LD_VAR 0 3
58360: PPUSH
58361: LD_STRING PlantMine
58363: PPUSH
58364: CALL_OW 366
// repeat wait ( 1 ) ;
58368: LD_INT 1
58370: PPUSH
58371: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
58375: LD_VAR 0 2
58379: PPUSH
58380: LD_VAR 0 3
58384: PPUSH
58385: LD_VAR 0 6
58389: PPUSH
58390: LD_INT 0
58392: PPUSH
58393: CALL_OW 454
58397: IFFALSE 58368
// if MineAtPos ( x , y ) then
58399: LD_VAR 0 2
58403: PPUSH
58404: LD_VAR 0 3
58408: PPUSH
58409: CALL_OW 458
58413: IFFALSE 58529
// begin for i in minerMinesList [ index ] do
58415: LD_ADDR_VAR 0 7
58419: PUSH
58420: LD_EXP 57
58424: PUSH
58425: LD_VAR 0 5
58429: ARRAY
58430: PUSH
58431: FOR_IN
58432: IFFALSE 58474
// if i [ 1 ] = x and i [ 2 ] = y then
58434: LD_VAR 0 7
58438: PUSH
58439: LD_INT 1
58441: ARRAY
58442: PUSH
58443: LD_VAR 0 2
58447: EQUAL
58448: IFFALSE 58466
58450: PUSH
58451: LD_VAR 0 7
58455: PUSH
58456: LD_INT 2
58458: ARRAY
58459: PUSH
58460: LD_VAR 0 3
58464: EQUAL
58465: AND
58466: IFFALSE 58472
// exit ;
58468: POP
58469: POP
58470: GO 58537
58472: GO 58431
58474: POP
58475: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
58476: LD_ADDR_EXP 57
58480: PUSH
58481: LD_EXP 57
58485: PPUSH
58486: LD_VAR 0 5
58490: PUSH
58491: LD_EXP 57
58495: PUSH
58496: LD_VAR 0 5
58500: ARRAY
58501: PUSH
58502: LD_INT 1
58504: PLUS
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PPUSH
58510: LD_VAR 0 2
58514: PUSH
58515: LD_VAR 0 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PPUSH
58524: CALL 15490 0 3
58528: ST_TO_ADDR
// end ; result := true ;
58529: LD_ADDR_VAR 0 4
58533: PUSH
58534: LD_INT 1
58536: ST_TO_ADDR
// end ;
58537: LD_VAR 0 4
58541: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
58542: LD_INT 0
58544: PPUSH
58545: PPUSH
58546: PPUSH
// if not unit in minersList then
58547: LD_VAR 0 1
58551: PUSH
58552: LD_EXP 56
58556: IN
58557: NOT
58558: IFFALSE 58562
// exit ;
58560: GO 58769
// index := GetElementIndex ( minersList , unit ) ;
58562: LD_ADDR_VAR 0 6
58566: PUSH
58567: LD_EXP 56
58571: PPUSH
58572: LD_VAR 0 1
58576: PPUSH
58577: CALL 15273 0 2
58581: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
58582: LD_ADDR_VAR 0 5
58586: PUSH
58587: DOUBLE
58588: LD_EXP 57
58592: PUSH
58593: LD_VAR 0 6
58597: ARRAY
58598: INC
58599: ST_TO_ADDR
58600: LD_INT 1
58602: PUSH
58603: FOR_DOWNTO
58604: IFFALSE 58767
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
58606: LD_EXP 57
58610: PUSH
58611: LD_VAR 0 6
58615: ARRAY
58616: PUSH
58617: LD_VAR 0 5
58621: ARRAY
58622: PUSH
58623: LD_INT 1
58625: ARRAY
58626: PPUSH
58627: LD_EXP 57
58631: PUSH
58632: LD_VAR 0 6
58636: ARRAY
58637: PUSH
58638: LD_VAR 0 5
58642: ARRAY
58643: PUSH
58644: LD_INT 2
58646: ARRAY
58647: PPUSH
58648: LD_VAR 0 2
58652: PPUSH
58653: LD_VAR 0 3
58657: PPUSH
58658: CALL_OW 298
58662: PUSH
58663: LD_INT 6
58665: LESS
58666: IFFALSE 58765
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
58668: LD_EXP 57
58672: PUSH
58673: LD_VAR 0 6
58677: ARRAY
58678: PUSH
58679: LD_VAR 0 5
58683: ARRAY
58684: PUSH
58685: LD_INT 1
58687: ARRAY
58688: PPUSH
58689: LD_EXP 57
58693: PUSH
58694: LD_VAR 0 6
58698: ARRAY
58699: PUSH
58700: LD_VAR 0 5
58704: ARRAY
58705: PUSH
58706: LD_INT 2
58708: ARRAY
58709: PPUSH
58710: LD_VAR 0 1
58714: PPUSH
58715: CALL_OW 255
58719: PPUSH
58720: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
58724: LD_ADDR_EXP 57
58728: PUSH
58729: LD_EXP 57
58733: PPUSH
58734: LD_VAR 0 6
58738: PPUSH
58739: LD_EXP 57
58743: PUSH
58744: LD_VAR 0 6
58748: ARRAY
58749: PPUSH
58750: LD_VAR 0 5
58754: PPUSH
58755: CALL_OW 3
58759: PPUSH
58760: CALL_OW 1
58764: ST_TO_ADDR
// end ; end ;
58765: GO 58603
58767: POP
58768: POP
// end ;
58769: LD_VAR 0 4
58773: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
58774: LD_INT 0
58776: PPUSH
58777: PPUSH
58778: PPUSH
58779: PPUSH
58780: PPUSH
58781: PPUSH
58782: PPUSH
58783: PPUSH
58784: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
58785: LD_VAR 0 1
58789: PPUSH
58790: CALL_OW 264
58794: PUSH
58795: LD_INT 81
58797: EQUAL
58798: NOT
58799: IFTRUE 58814
58801: PUSH
58802: LD_VAR 0 1
58806: PUSH
58807: LD_EXP 56
58811: IN
58812: NOT
58813: OR
58814: IFFALSE 58818
// exit ;
58816: GO 59144
// index := GetElementIndex ( minersList , unit ) ;
58818: LD_ADDR_VAR 0 6
58822: PUSH
58823: LD_EXP 56
58827: PPUSH
58828: LD_VAR 0 1
58832: PPUSH
58833: CALL 15273 0 2
58837: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
58838: LD_ADDR_VAR 0 8
58842: PUSH
58843: LD_EXP 58
58847: PUSH
58848: LD_EXP 57
58852: PUSH
58853: LD_VAR 0 6
58857: ARRAY
58858: MINUS
58859: ST_TO_ADDR
// if not minesFreeAmount then
58860: LD_VAR 0 8
58864: NOT
58865: IFFALSE 58869
// exit ;
58867: GO 59144
// tmp := [ ] ;
58869: LD_ADDR_VAR 0 7
58873: PUSH
58874: EMPTY
58875: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
58876: LD_ADDR_VAR 0 5
58880: PUSH
58881: DOUBLE
58882: LD_INT 1
58884: DEC
58885: ST_TO_ADDR
58886: LD_VAR 0 8
58890: PUSH
58891: FOR_TO
58892: IFFALSE 59091
// begin _d := rand ( 0 , 5 ) ;
58894: LD_ADDR_VAR 0 11
58898: PUSH
58899: LD_INT 0
58901: PPUSH
58902: LD_INT 5
58904: PPUSH
58905: CALL_OW 12
58909: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
58910: LD_ADDR_VAR 0 12
58914: PUSH
58915: LD_INT 2
58917: PPUSH
58918: LD_INT 6
58920: PPUSH
58921: CALL_OW 12
58925: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
58926: LD_ADDR_VAR 0 9
58930: PUSH
58931: LD_VAR 0 2
58935: PPUSH
58936: LD_VAR 0 11
58940: PPUSH
58941: LD_VAR 0 12
58945: PPUSH
58946: CALL_OW 272
58950: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
58951: LD_ADDR_VAR 0 10
58955: PUSH
58956: LD_VAR 0 3
58960: PPUSH
58961: LD_VAR 0 11
58965: PPUSH
58966: LD_VAR 0 12
58970: PPUSH
58971: CALL_OW 273
58975: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
58976: LD_VAR 0 9
58980: PPUSH
58981: LD_VAR 0 10
58985: PPUSH
58986: CALL_OW 488
58990: IFFALSE 59014
58992: PUSH
58993: LD_VAR 0 9
58997: PUSH
58998: LD_VAR 0 10
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_VAR 0 7
59011: IN
59012: NOT
59013: AND
59014: IFFALSE 59033
59016: PUSH
59017: LD_VAR 0 9
59021: PPUSH
59022: LD_VAR 0 10
59026: PPUSH
59027: CALL_OW 458
59031: NOT
59032: AND
59033: IFFALSE 59075
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59035: LD_ADDR_VAR 0 7
59039: PUSH
59040: LD_VAR 0 7
59044: PPUSH
59045: LD_VAR 0 7
59049: PUSH
59050: LD_INT 1
59052: PLUS
59053: PPUSH
59054: LD_VAR 0 9
59058: PUSH
59059: LD_VAR 0 10
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PPUSH
59068: CALL_OW 1
59072: ST_TO_ADDR
59073: GO 59089
// i := i - 1 ;
59075: LD_ADDR_VAR 0 5
59079: PUSH
59080: LD_VAR 0 5
59084: PUSH
59085: LD_INT 1
59087: MINUS
59088: ST_TO_ADDR
// end ;
59089: GO 58891
59091: POP
59092: POP
// for i in tmp do
59093: LD_ADDR_VAR 0 5
59097: PUSH
59098: LD_VAR 0 7
59102: PUSH
59103: FOR_IN
59104: IFFALSE 59142
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59106: LD_VAR 0 1
59110: PPUSH
59111: LD_VAR 0 5
59115: PUSH
59116: LD_INT 1
59118: ARRAY
59119: PPUSH
59120: LD_VAR 0 5
59124: PUSH
59125: LD_INT 2
59127: ARRAY
59128: PPUSH
59129: CALL 58135 0 3
59133: NOT
59134: IFFALSE 59140
// exit ;
59136: POP
59137: POP
59138: GO 59144
59140: GO 59103
59142: POP
59143: POP
// end ;
59144: LD_VAR 0 4
59148: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59149: LD_INT 0
59151: PPUSH
59152: PPUSH
59153: PPUSH
59154: PPUSH
59155: PPUSH
59156: PPUSH
59157: PPUSH
59158: PPUSH
59159: PPUSH
// if GetClass ( unit ) <> class_sniper then
59160: LD_VAR 0 1
59164: PPUSH
59165: CALL_OW 257
59169: PUSH
59170: LD_INT 5
59172: NONEQUAL
59173: IFFALSE 59177
// exit ;
59175: GO 59647
// dist := 8 ;
59177: LD_ADDR_VAR 0 5
59181: PUSH
59182: LD_INT 8
59184: ST_TO_ADDR
// viewRange := 12 ;
59185: LD_ADDR_VAR 0 8
59189: PUSH
59190: LD_INT 12
59192: ST_TO_ADDR
// side := GetSide ( unit ) ;
59193: LD_ADDR_VAR 0 6
59197: PUSH
59198: LD_VAR 0 1
59202: PPUSH
59203: CALL_OW 255
59207: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59208: LD_INT 61
59210: PPUSH
59211: LD_VAR 0 6
59215: PPUSH
59216: CALL_OW 321
59220: PUSH
59221: LD_INT 2
59223: EQUAL
59224: IFFALSE 59234
// viewRange := 16 ;
59226: LD_ADDR_VAR 0 8
59230: PUSH
59231: LD_INT 16
59233: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59234: LD_VAR 0 1
59238: PPUSH
59239: LD_VAR 0 2
59243: PPUSH
59244: LD_VAR 0 3
59248: PPUSH
59249: CALL_OW 297
59253: PUSH
59254: LD_VAR 0 5
59258: GREATER
59259: IFFALSE 59338
// begin ComMoveXY ( unit , x , y ) ;
59261: LD_VAR 0 1
59265: PPUSH
59266: LD_VAR 0 2
59270: PPUSH
59271: LD_VAR 0 3
59275: PPUSH
59276: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59280: LD_INT 35
59282: PPUSH
59283: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59287: LD_VAR 0 1
59291: PPUSH
59292: LD_VAR 0 2
59296: PPUSH
59297: LD_VAR 0 3
59301: PPUSH
59302: CALL 47319 0 3
59306: NOT
59307: IFFALSE 59311
// exit ;
59309: GO 59647
// until GetDistUnitXY ( unit , x , y ) < dist ;
59311: LD_VAR 0 1
59315: PPUSH
59316: LD_VAR 0 2
59320: PPUSH
59321: LD_VAR 0 3
59325: PPUSH
59326: CALL_OW 297
59330: PUSH
59331: LD_VAR 0 5
59335: LESS
59336: IFFALSE 59280
// end ; ComTurnXY ( unit , x , y ) ;
59338: LD_VAR 0 1
59342: PPUSH
59343: LD_VAR 0 2
59347: PPUSH
59348: LD_VAR 0 3
59352: PPUSH
59353: CALL_OW 118
// repeat if Multiplayer then
59357: LD_OWVAR 4
59361: IFFALSE 59372
// wait ( 35 ) else
59363: LD_INT 35
59365: PPUSH
59366: CALL_OW 67
59370: GO 59379
// wait ( 5 ) ;
59372: LD_INT 5
59374: PPUSH
59375: CALL_OW 67
// _d := GetDir ( unit ) ;
59379: LD_ADDR_VAR 0 11
59383: PUSH
59384: LD_VAR 0 1
59388: PPUSH
59389: CALL_OW 254
59393: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
59394: LD_ADDR_VAR 0 7
59398: PUSH
59399: LD_VAR 0 1
59403: PPUSH
59404: CALL_OW 250
59408: PPUSH
59409: LD_VAR 0 1
59413: PPUSH
59414: CALL_OW 251
59418: PPUSH
59419: LD_VAR 0 2
59423: PPUSH
59424: LD_VAR 0 3
59428: PPUSH
59429: CALL 49955 0 4
59433: ST_TO_ADDR
// until dir = _d ;
59434: LD_VAR 0 7
59438: PUSH
59439: LD_VAR 0 11
59443: EQUAL
59444: IFFALSE 59357
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
59446: LD_ADDR_VAR 0 9
59450: PUSH
59451: LD_VAR 0 1
59455: PPUSH
59456: CALL_OW 250
59460: PPUSH
59461: LD_VAR 0 7
59465: PPUSH
59466: LD_VAR 0 5
59470: PPUSH
59471: CALL_OW 272
59475: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
59476: LD_ADDR_VAR 0 10
59480: PUSH
59481: LD_VAR 0 1
59485: PPUSH
59486: CALL_OW 251
59490: PPUSH
59491: LD_VAR 0 7
59495: PPUSH
59496: LD_VAR 0 5
59500: PPUSH
59501: CALL_OW 273
59505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59506: LD_VAR 0 9
59510: PPUSH
59511: LD_VAR 0 10
59515: PPUSH
59516: CALL_OW 488
59520: NOT
59521: IFFALSE 59525
// exit ;
59523: GO 59647
// ComAnimCustom ( unit , 1 ) ;
59525: LD_VAR 0 1
59529: PPUSH
59530: LD_INT 1
59532: PPUSH
59533: CALL_OW 592
// p := 0 ;
59537: LD_ADDR_VAR 0 12
59541: PUSH
59542: LD_INT 0
59544: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
59545: LD_VAR 0 9
59549: PPUSH
59550: LD_VAR 0 10
59554: PPUSH
59555: LD_VAR 0 6
59559: PPUSH
59560: LD_VAR 0 8
59564: PPUSH
59565: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
59569: LD_INT 35
59571: PPUSH
59572: CALL_OW 67
// p := Inc ( p ) ;
59576: LD_ADDR_VAR 0 12
59580: PUSH
59581: LD_VAR 0 12
59585: PPUSH
59586: CALL 49911 0 1
59590: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
59591: LD_VAR 0 12
59595: PUSH
59596: LD_INT 3
59598: EQUAL
59599: IFTRUE 59613
59601: PUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 302
59611: NOT
59612: OR
59613: IFTRUE 59626
59615: PUSH
59616: LD_VAR 0 1
59620: PPUSH
59621: CALL_OW 301
59625: OR
59626: IFFALSE 59569
// RemoveSeeing ( _x , _y , side ) ;
59628: LD_VAR 0 9
59632: PPUSH
59633: LD_VAR 0 10
59637: PPUSH
59638: LD_VAR 0 6
59642: PPUSH
59643: CALL_OW 331
// end ;
59647: LD_VAR 0 4
59651: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
59663: PPUSH
59664: PPUSH
// if not unit then
59665: LD_VAR 0 1
59669: NOT
59670: IFFALSE 59674
// exit ;
59672: GO 59945
// side := GetSide ( unit ) ;
59674: LD_ADDR_VAR 0 3
59678: PUSH
59679: LD_VAR 0 1
59683: PPUSH
59684: CALL_OW 255
59688: ST_TO_ADDR
// x := GetX ( unit ) ;
59689: LD_ADDR_VAR 0 5
59693: PUSH
59694: LD_VAR 0 1
59698: PPUSH
59699: CALL_OW 250
59703: ST_TO_ADDR
// y := GetY ( unit ) ;
59704: LD_ADDR_VAR 0 6
59708: PUSH
59709: LD_VAR 0 1
59713: PPUSH
59714: CALL_OW 251
59718: ST_TO_ADDR
// r := 8 ;
59719: LD_ADDR_VAR 0 4
59723: PUSH
59724: LD_INT 8
59726: ST_TO_ADDR
// if x - r < 0 then
59727: LD_VAR 0 5
59731: PUSH
59732: LD_VAR 0 4
59736: MINUS
59737: PUSH
59738: LD_INT 0
59740: LESS
59741: IFFALSE 59753
// min_x := 0 else
59743: LD_ADDR_VAR 0 7
59747: PUSH
59748: LD_INT 0
59750: ST_TO_ADDR
59751: GO 59769
// min_x := x - r ;
59753: LD_ADDR_VAR 0 7
59757: PUSH
59758: LD_VAR 0 5
59762: PUSH
59763: LD_VAR 0 4
59767: MINUS
59768: ST_TO_ADDR
// if y - r < 0 then
59769: LD_VAR 0 6
59773: PUSH
59774: LD_VAR 0 4
59778: MINUS
59779: PUSH
59780: LD_INT 0
59782: LESS
59783: IFFALSE 59795
// min_y := 0 else
59785: LD_ADDR_VAR 0 8
59789: PUSH
59790: LD_INT 0
59792: ST_TO_ADDR
59793: GO 59811
// min_y := y - r ;
59795: LD_ADDR_VAR 0 8
59799: PUSH
59800: LD_VAR 0 6
59804: PUSH
59805: LD_VAR 0 4
59809: MINUS
59810: ST_TO_ADDR
// max_x := x + r ;
59811: LD_ADDR_VAR 0 9
59815: PUSH
59816: LD_VAR 0 5
59820: PUSH
59821: LD_VAR 0 4
59825: PLUS
59826: ST_TO_ADDR
// max_y := y + r ;
59827: LD_ADDR_VAR 0 10
59831: PUSH
59832: LD_VAR 0 6
59836: PUSH
59837: LD_VAR 0 4
59841: PLUS
59842: ST_TO_ADDR
// for _x = min_x to max_x do
59843: LD_ADDR_VAR 0 11
59847: PUSH
59848: DOUBLE
59849: LD_VAR 0 7
59853: DEC
59854: ST_TO_ADDR
59855: LD_VAR 0 9
59859: PUSH
59860: FOR_TO
59861: IFFALSE 59943
// for _y = min_y to max_y do
59863: LD_ADDR_VAR 0 12
59867: PUSH
59868: DOUBLE
59869: LD_VAR 0 8
59873: DEC
59874: ST_TO_ADDR
59875: LD_VAR 0 10
59879: PUSH
59880: FOR_TO
59881: IFFALSE 59939
// begin if not ValidHex ( _x , _y ) then
59883: LD_VAR 0 11
59887: PPUSH
59888: LD_VAR 0 12
59892: PPUSH
59893: CALL_OW 488
59897: NOT
59898: IFFALSE 59902
// continue ;
59900: GO 59880
// if MineAtPos ( _x , _y ) then
59902: LD_VAR 0 11
59906: PPUSH
59907: LD_VAR 0 12
59911: PPUSH
59912: CALL_OW 458
59916: IFFALSE 59937
// ViewMineAtPos ( _x , _y , side ) ;
59918: LD_VAR 0 11
59922: PPUSH
59923: LD_VAR 0 12
59927: PPUSH
59928: LD_VAR 0 3
59932: PPUSH
59933: CALL_OW 457
// end ;
59937: GO 59880
59939: POP
59940: POP
59941: GO 59860
59943: POP
59944: POP
// end ;
59945: LD_VAR 0 2
59949: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
59950: LD_INT 0
59952: PPUSH
59953: PPUSH
59954: PPUSH
59955: PPUSH
59956: PPUSH
59957: PPUSH
// if not units then
59958: LD_VAR 0 1
59962: NOT
59963: IFFALSE 59967
// exit ;
59965: GO 60397
// scaners := [ ] ;
59967: LD_ADDR_VAR 0 6
59971: PUSH
59972: EMPTY
59973: ST_TO_ADDR
// for i in units do
59974: LD_ADDR_VAR 0 3
59978: PUSH
59979: LD_VAR 0 1
59983: PUSH
59984: FOR_IN
59985: IFFALSE 60142
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
59987: LD_VAR 0 3
59991: PPUSH
59992: CALL_OW 264
59996: PUSH
59997: LD_INT 11
59999: NONEQUAL
60000: IFTRUE 60014
60002: PUSH
60003: LD_VAR 0 3
60007: PPUSH
60008: CALL_OW 302
60012: NOT
60013: OR
60014: IFTRUE 60031
60016: PUSH
60017: LD_VAR 0 3
60021: PPUSH
60022: CALL_OW 110
60026: PUSH
60027: LD_INT 502
60029: EQUAL
60030: OR
60031: IFFALSE 60035
// continue ;
60033: GO 59984
// ComStop ( i ) ;
60035: LD_VAR 0 3
60039: PPUSH
60040: CALL_OW 141
// x := GetX ( i ) ;
60044: LD_ADDR_VAR 0 4
60048: PUSH
60049: LD_VAR 0 3
60053: PPUSH
60054: CALL_OW 250
60058: ST_TO_ADDR
// y := GetY ( i ) ;
60059: LD_ADDR_VAR 0 5
60063: PUSH
60064: LD_VAR 0 3
60068: PPUSH
60069: CALL_OW 251
60073: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60074: LD_VAR 0 3
60078: PPUSH
60079: CALL_OW 255
60083: PUSH
60084: LD_OWVAR 2
60088: EQUAL
60089: IFFALSE 60108
// PlaySoundXY ( x , y , mineDetector ) ;
60091: LD_VAR 0 4
60095: PPUSH
60096: LD_VAR 0 5
60100: PPUSH
60101: LD_STRING mineDetector
60103: PPUSH
60104: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60108: LD_ADDR_VAR 0 6
60112: PUSH
60113: LD_VAR 0 6
60117: PPUSH
60118: LD_VAR 0 3
60122: PPUSH
60123: CALL 48538 0 2
60127: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60128: LD_VAR 0 3
60132: PPUSH
60133: LD_INT 502
60135: PPUSH
60136: CALL_OW 109
// end ;
60140: GO 59984
60142: POP
60143: POP
// if not scaners then
60144: LD_VAR 0 6
60148: NOT
60149: IFFALSE 60153
// exit ;
60151: GO 60397
// wait ( 3 ) ;
60153: LD_INT 3
60155: PPUSH
60156: CALL_OW 67
// timer := 6 ;
60160: LD_ADDR_VAR 0 7
60164: PUSH
60165: LD_INT 6
60167: ST_TO_ADDR
// repeat for i in scaners do
60168: LD_ADDR_VAR 0 3
60172: PUSH
60173: LD_VAR 0 6
60177: PUSH
60178: FOR_IN
60179: IFFALSE 60295
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60181: LD_VAR 0 3
60185: PPUSH
60186: CALL_OW 302
60190: NOT
60191: IFTRUE 60204
60193: PUSH
60194: LD_VAR 0 3
60198: PPUSH
60199: CALL_OW 314
60203: OR
60204: IFTRUE 60235
60206: PUSH
60207: LD_VAR 0 3
60211: PPUSH
60212: CALL_OW 263
60216: PUSH
60217: LD_INT 1
60219: EQUAL
60220: IFFALSE 60234
60222: PUSH
60223: LD_VAR 0 3
60227: PPUSH
60228: CALL_OW 311
60232: NOT
60233: AND
60234: OR
60235: IFFALSE 60279
// begin SetUnitDisplayNumber ( i , 0 ) ;
60237: LD_VAR 0 3
60241: PPUSH
60242: LD_INT 0
60244: PPUSH
60245: CALL_OW 505
// SetTag ( i , 0 ) ;
60249: LD_VAR 0 3
60253: PPUSH
60254: LD_INT 0
60256: PPUSH
60257: CALL_OW 109
// scaners := scaners diff i ;
60261: LD_ADDR_VAR 0 6
60265: PUSH
60266: LD_VAR 0 6
60270: PUSH
60271: LD_VAR 0 3
60275: DIFF
60276: ST_TO_ADDR
// continue ;
60277: GO 60178
// end ; SetUnitDisplayNumber ( i , timer ) ;
60279: LD_VAR 0 3
60283: PPUSH
60284: LD_VAR 0 7
60288: PPUSH
60289: CALL_OW 505
// end ;
60293: GO 60178
60295: POP
60296: POP
// if not scaners then
60297: LD_VAR 0 6
60301: NOT
60302: IFFALSE 60306
// exit ;
60304: GO 60397
// timer := Dec ( timer ) ;
60306: LD_ADDR_VAR 0 7
60310: PUSH
60311: LD_VAR 0 7
60315: PPUSH
60316: CALL 49933 0 1
60320: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60321: LD_INT 35
60323: PPUSH
60324: CALL_OW 67
// until timer = 0 ;
60328: LD_VAR 0 7
60332: PUSH
60333: LD_INT 0
60335: EQUAL
60336: IFFALSE 60168
// if not scaners then
60338: LD_VAR 0 6
60342: NOT
60343: IFFALSE 60347
// exit ;
60345: GO 60397
// for i in scaners do
60347: LD_ADDR_VAR 0 3
60351: PUSH
60352: LD_VAR 0 6
60356: PUSH
60357: FOR_IN
60358: IFFALSE 60395
// begin SetUnitDisplayNumber ( i , 0 ) ;
60360: LD_VAR 0 3
60364: PPUSH
60365: LD_INT 0
60367: PPUSH
60368: CALL_OW 505
// SetTag ( i , 0 ) ;
60372: LD_VAR 0 3
60376: PPUSH
60377: LD_INT 0
60379: PPUSH
60380: CALL_OW 109
// RevealDetectorMine ( i ) ;
60384: LD_VAR 0 3
60388: PPUSH
60389: CALL 59652 0 1
// end ;
60393: GO 60357
60395: POP
60396: POP
// end ;
60397: LD_VAR 0 2
60401: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
60402: LD_INT 0
60404: PPUSH
// if p1 = mine_detector_mode then
60405: LD_VAR 0 2
60409: PUSH
60410: LD_INT 103
60412: EQUAL
60413: IFFALSE 60424
// DetectMine ( units ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: CALL 59950 0 1
// end ; end_of_file
60424: LD_VAR 0 7
60428: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
60429: LD_EXP 39
60433: IFFALSE 60774
60435: GO 60437
60437: DISABLE
60438: LD_INT 0
60440: PPUSH
60441: PPUSH
60442: PPUSH
// begin mpKingPoints := [ ] ;
60443: LD_ADDR_EXP 59
60447: PUSH
60448: EMPTY
60449: ST_TO_ADDR
// if mpTeamGame then
60450: LD_EXP 11
60454: IFFALSE 60508
// begin for i := 1 to Count ( mpTeams ) do
60456: LD_ADDR_VAR 0 1
60460: PUSH
60461: DOUBLE
60462: LD_INT 1
60464: DEC
60465: ST_TO_ADDR
60466: LD_EXP 10
60470: PPUSH
60471: CALL 12572 0 1
60475: PUSH
60476: FOR_TO
60477: IFFALSE 60504
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60479: LD_ADDR_EXP 59
60483: PUSH
60484: LD_EXP 59
60488: PPUSH
60489: LD_VAR 0 1
60493: PPUSH
60494: LD_INT 0
60496: PPUSH
60497: CALL_OW 1
60501: ST_TO_ADDR
60502: GO 60476
60504: POP
60505: POP
// end else
60506: GO 60551
// begin for i := 1 to 8 do
60508: LD_ADDR_VAR 0 1
60512: PUSH
60513: DOUBLE
60514: LD_INT 1
60516: DEC
60517: ST_TO_ADDR
60518: LD_INT 8
60520: PUSH
60521: FOR_TO
60522: IFFALSE 60549
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
60524: LD_ADDR_EXP 59
60528: PUSH
60529: LD_EXP 59
60533: PPUSH
60534: LD_VAR 0 1
60538: PPUSH
60539: LD_INT 0
60541: PPUSH
60542: CALL_OW 1
60546: ST_TO_ADDR
60547: GO 60521
60549: POP
60550: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
60551: LD_ADDR_VAR 0 3
60555: PUSH
60556: LD_EXP 2
60560: PPUSH
60561: LD_INT 0
60563: PPUSH
60564: CALL_OW 517
60568: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60569: LD_ADDR_VAR 0 1
60573: PUSH
60574: DOUBLE
60575: LD_INT 1
60577: DEC
60578: ST_TO_ADDR
60579: LD_VAR 0 3
60583: PUSH
60584: LD_INT 1
60586: ARRAY
60587: PUSH
60588: FOR_TO
60589: IFFALSE 60656
// for j := 1 to 8 do
60591: LD_ADDR_VAR 0 2
60595: PUSH
60596: DOUBLE
60597: LD_INT 1
60599: DEC
60600: ST_TO_ADDR
60601: LD_INT 8
60603: PUSH
60604: FOR_TO
60605: IFFALSE 60652
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
60607: LD_VAR 0 3
60611: PUSH
60612: LD_INT 1
60614: ARRAY
60615: PUSH
60616: LD_VAR 0 1
60620: ARRAY
60621: PPUSH
60622: LD_VAR 0 3
60626: PUSH
60627: LD_INT 2
60629: ARRAY
60630: PUSH
60631: LD_VAR 0 1
60635: ARRAY
60636: PPUSH
60637: LD_VAR 0 2
60641: PPUSH
60642: LD_INT 12
60644: NEG
60645: PPUSH
60646: CALL_OW 330
60650: GO 60604
60652: POP
60653: POP
60654: GO 60588
60656: POP
60657: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
60658: LD_EXP 34
60662: PPUSH
60663: LD_INT 1
60665: PPUSH
60666: CALL_OW 424
// UpdateCounter ;
60670: CALL 61280 0 0
// repeat wait ( 0 0$1 ) ;
60674: LD_INT 35
60676: PPUSH
60677: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60681: LD_ADDR_VAR 0 3
60685: PUSH
60686: LD_EXP 34
60690: PPUSH
60691: LD_INT 3
60693: PUSH
60694: LD_INT 57
60696: PUSH
60697: EMPTY
60698: LIST
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 50
60706: PUSH
60707: EMPTY
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: LD_INT 30
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 30
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: LIST
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: PPUSH
60743: CALL_OW 70
60747: ST_TO_ADDR
// if not tmp then
60748: LD_VAR 0 3
60752: NOT
60753: IFFALSE 60757
// continue ;
60755: GO 60674
// AddPoints ( tmp ) ;
60757: LD_VAR 0 3
60761: PPUSH
60762: CALL 60958 0 1
// UpdateCounter ;
60766: CALL 61280 0 0
// until false ;
60770: LD_INT 0
60772: IFFALSE 60674
// end ;
60774: PPOPN 3
60776: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
60777: LD_EXP 39
60781: IFFALSE 60789
60783: PUSH
60784: LD_EXP 37
60788: AND
60789: IFFALSE 60955
60791: GO 60793
60793: DISABLE
60794: LD_INT 0
60796: PPUSH
60797: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
60798: LD_ADDR_VAR 0 2
60802: PUSH
60803: LD_EXP 2
60807: PPUSH
60808: LD_INT 0
60810: PPUSH
60811: CALL_OW 517
60815: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60816: LD_ADDR_VAR 0 1
60820: PUSH
60821: DOUBLE
60822: LD_INT 1
60824: DEC
60825: ST_TO_ADDR
60826: LD_VAR 0 2
60830: PUSH
60831: LD_INT 1
60833: ARRAY
60834: PUSH
60835: FOR_TO
60836: IFFALSE 60877
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 1
60845: ARRAY
60846: PUSH
60847: LD_VAR 0 1
60851: ARRAY
60852: PPUSH
60853: LD_VAR 0 2
60857: PUSH
60858: LD_INT 2
60860: ARRAY
60861: PUSH
60862: LD_VAR 0 1
60866: ARRAY
60867: PPUSH
60868: LD_INT 125
60870: PPUSH
60871: CALL_OW 495
60875: GO 60835
60877: POP
60878: POP
// repeat wait ( mpEmissions ) ;
60879: LD_EXP 37
60883: PPUSH
60884: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
60888: LD_ADDR_VAR 0 1
60892: PUSH
60893: DOUBLE
60894: LD_INT 1
60896: DEC
60897: ST_TO_ADDR
60898: LD_VAR 0 2
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PUSH
60907: FOR_TO
60908: IFFALSE 60949
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
60910: LD_VAR 0 2
60914: PUSH
60915: LD_INT 1
60917: ARRAY
60918: PUSH
60919: LD_VAR 0 1
60923: ARRAY
60924: PPUSH
60925: LD_VAR 0 2
60929: PUSH
60930: LD_INT 2
60932: ARRAY
60933: PUSH
60934: LD_VAR 0 1
60938: ARRAY
60939: PPUSH
60940: LD_INT 15
60942: PPUSH
60943: CALL_OW 495
60947: GO 60907
60949: POP
60950: POP
// until false ;
60951: LD_INT 0
60953: IFFALSE 60879
// end ;
60955: PPOPN 2
60957: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
60958: LD_INT 0
60960: PPUSH
60961: PPUSH
60962: PPUSH
60963: PPUSH
60964: PPUSH
// if mpTeamGame then
60965: LD_EXP 11
60969: IFFALSE 61166
// begin first := depots [ 1 ] ;
60971: LD_ADDR_VAR 0 4
60975: PUSH
60976: LD_VAR 0 1
60980: PUSH
60981: LD_INT 1
60983: ARRAY
60984: ST_TO_ADDR
// side := GetSide ( first ) ;
60985: LD_ADDR_VAR 0 6
60989: PUSH
60990: LD_VAR 0 4
60994: PPUSH
60995: CALL_OW 255
60999: ST_TO_ADDR
// for i := 1 to mpTeams do
61000: LD_ADDR_VAR 0 3
61004: PUSH
61005: DOUBLE
61006: LD_INT 1
61008: DEC
61009: ST_TO_ADDR
61010: LD_EXP 10
61014: PUSH
61015: FOR_TO
61016: IFFALSE 61050
// if side in mpTeams [ i ] then
61018: LD_VAR 0 6
61022: PUSH
61023: LD_EXP 10
61027: PUSH
61028: LD_VAR 0 3
61032: ARRAY
61033: IN
61034: IFFALSE 61048
// begin team := i ;
61036: LD_ADDR_VAR 0 5
61040: PUSH
61041: LD_VAR 0 3
61045: ST_TO_ADDR
// break ;
61046: GO 61050
// end ;
61048: GO 61015
61050: POP
61051: POP
// if not team then
61052: LD_VAR 0 5
61056: NOT
61057: IFFALSE 61061
// exit ;
61059: GO 61275
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61061: LD_EXP 34
61065: PPUSH
61066: LD_INT 81
61068: PUSH
61069: LD_VAR 0 6
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PPUSH
61078: CALL_OW 70
61082: IFFALSE 61086
// exit ;
61084: GO 61275
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61086: LD_ADDR_EXP 59
61090: PUSH
61091: LD_EXP 59
61095: PPUSH
61096: LD_VAR 0 5
61100: PPUSH
61101: LD_EXP 59
61105: PUSH
61106: LD_VAR 0 5
61110: ARRAY
61111: PUSH
61112: LD_INT 1
61114: PLUS
61115: PPUSH
61116: CALL_OW 1
61120: ST_TO_ADDR
// for i in mpTeams [ team ] do
61121: LD_ADDR_VAR 0 3
61125: PUSH
61126: LD_EXP 10
61130: PUSH
61131: LD_VAR 0 5
61135: ARRAY
61136: PUSH
61137: FOR_IN
61138: IFFALSE 61162
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61140: LD_VAR 0 3
61144: PPUSH
61145: LD_EXP 59
61149: PUSH
61150: LD_VAR 0 5
61154: ARRAY
61155: PPUSH
61156: CALL_OW 506
61160: GO 61137
61162: POP
61163: POP
// end else
61164: GO 61275
// begin first := depots [ 1 ] ;
61166: LD_ADDR_VAR 0 4
61170: PUSH
61171: LD_VAR 0 1
61175: PUSH
61176: LD_INT 1
61178: ARRAY
61179: ST_TO_ADDR
// side := GetSide ( first ) ;
61180: LD_ADDR_VAR 0 6
61184: PUSH
61185: LD_VAR 0 4
61189: PPUSH
61190: CALL_OW 255
61194: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61195: LD_EXP 34
61199: PPUSH
61200: LD_INT 81
61202: PUSH
61203: LD_VAR 0 6
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PPUSH
61212: CALL_OW 70
61216: IFFALSE 61220
// exit ;
61218: GO 61275
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61220: LD_ADDR_EXP 59
61224: PUSH
61225: LD_EXP 59
61229: PPUSH
61230: LD_VAR 0 6
61234: PPUSH
61235: LD_EXP 59
61239: PUSH
61240: LD_VAR 0 6
61244: ARRAY
61245: PUSH
61246: LD_INT 1
61248: PLUS
61249: PPUSH
61250: CALL_OW 1
61254: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
61255: LD_VAR 0 6
61259: PPUSH
61260: LD_EXP 59
61264: PUSH
61265: LD_VAR 0 6
61269: ARRAY
61270: PPUSH
61271: CALL_OW 506
// end ; end ;
61275: LD_VAR 0 2
61279: RET
// function UpdateCounter ; var i ; begin
61280: LD_INT 0
61282: PPUSH
61283: PPUSH
// result := [ ] ;
61284: LD_ADDR_VAR 0 1
61288: PUSH
61289: EMPTY
61290: ST_TO_ADDR
// if mpTeamGame then
61291: LD_EXP 11
61295: IFFALSE 61362
// begin for i := 1 to mpTeams do
61297: LD_ADDR_VAR 0 2
61301: PUSH
61302: DOUBLE
61303: LD_INT 1
61305: DEC
61306: ST_TO_ADDR
61307: LD_EXP 10
61311: PUSH
61312: FOR_TO
61313: IFFALSE 61358
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
61315: LD_ADDR_VAR 0 1
61319: PUSH
61320: LD_VAR 0 1
61324: PUSH
61325: LD_STRING #KingoftheHill-Team
61327: PUSH
61328: LD_VAR 0 2
61332: PUSH
61333: LD_EXP 59
61337: PUSH
61338: LD_VAR 0 2
61342: ARRAY
61343: PUSH
61344: LD_EXP 35
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: ADD
61355: ST_TO_ADDR
61356: GO 61312
61358: POP
61359: POP
// end else
61360: GO 61435
// begin for i := 1 to 8 do
61362: LD_ADDR_VAR 0 2
61366: PUSH
61367: DOUBLE
61368: LD_INT 1
61370: DEC
61371: ST_TO_ADDR
61372: LD_INT 8
61374: PUSH
61375: FOR_TO
61376: IFFALSE 61433
// if mpSidePositions [ i ] then
61378: LD_EXP 7
61382: PUSH
61383: LD_VAR 0 2
61387: ARRAY
61388: IFFALSE 61431
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
61390: LD_ADDR_VAR 0 1
61394: PUSH
61395: LD_VAR 0 1
61399: PUSH
61400: LD_STRING #KingoftheHill-Player
61402: PUSH
61403: LD_VAR 0 2
61407: PUSH
61408: LD_EXP 59
61412: PUSH
61413: LD_VAR 0 2
61417: ARRAY
61418: PUSH
61419: LD_EXP 35
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: ADD
61430: ST_TO_ADDR
61431: GO 61375
61433: POP
61434: POP
// end ; mpDisplayStrings := result ;
61435: LD_ADDR_EXP 38
61439: PUSH
61440: LD_VAR 0 1
61444: ST_TO_ADDR
// end ;
61445: LD_VAR 0 1
61449: RET
// export function HowMuchPointsKing ( side ) ; begin
61450: LD_INT 0
61452: PPUSH
// result := HowMuchPoints ( side ) ;
61453: LD_ADDR_VAR 0 2
61457: PUSH
61458: LD_VAR 0 1
61462: PPUSH
61463: CALL 61473 0 1
61467: ST_TO_ADDR
// end ;
61468: LD_VAR 0 2
61472: RET
// function HowMuchPoints ( side ) ; var i ; begin
61473: LD_INT 0
61475: PPUSH
61476: PPUSH
// if mpTeamGame then
61477: LD_EXP 11
61481: IFFALSE 61550
// begin for i := 1 to Count ( mpTeams ) do
61483: LD_ADDR_VAR 0 3
61487: PUSH
61488: DOUBLE
61489: LD_INT 1
61491: DEC
61492: ST_TO_ADDR
61493: LD_EXP 10
61497: PPUSH
61498: CALL 12572 0 1
61502: PUSH
61503: FOR_TO
61504: IFFALSE 61546
// begin if side in mpTeams [ i ] then
61506: LD_VAR 0 1
61510: PUSH
61511: LD_EXP 10
61515: PUSH
61516: LD_VAR 0 3
61520: ARRAY
61521: IN
61522: IFFALSE 61544
// begin result := mpKingPoints [ i ] ;
61524: LD_ADDR_VAR 0 2
61528: PUSH
61529: LD_EXP 59
61533: PUSH
61534: LD_VAR 0 3
61538: ARRAY
61539: ST_TO_ADDR
// exit ;
61540: POP
61541: POP
61542: GO 61566
// end ; end ;
61544: GO 61503
61546: POP
61547: POP
// end else
61548: GO 61566
// result := mpKingPoints [ side ] ;
61550: LD_ADDR_VAR 0 2
61554: PUSH
61555: LD_EXP 59
61559: PUSH
61560: LD_VAR 0 1
61564: ARRAY
61565: ST_TO_ADDR
// end ;
61566: LD_VAR 0 2
61570: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
61571: LD_EXP 39
61575: IFFALSE 61583
61577: PUSH
61578: CALL 61995 0 0
61582: AND
61583: IFFALSE 61591
61585: PUSH
61586: LD_OWVAR 4
61590: AND
61591: IFFALSE 61844
61593: GO 61595
61595: DISABLE
61596: LD_INT 0
61598: PPUSH
61599: PPUSH
// begin canWin := false ;
61600: LD_ADDR_VAR 0 2
61604: PUSH
61605: LD_INT 0
61607: ST_TO_ADDR
// if not HasPower ( your_side ) then
61608: LD_OWVAR 2
61612: PPUSH
61613: CALL 62037 0 1
61617: NOT
61618: IFFALSE 61629
// begin Multiplayer_Loose_Message ;
61620: CALL_OW 521
// enable ( mpLose ) ;
61624: LD_INT 102
61626: ENABLE_MARKED
// end else
61627: GO 61844
// begin if not EnemiesInGame then
61629: CALL 61847 0 0
61633: NOT
61634: IFFALSE 61641
// begin enable ( mpWin ) ;
61636: LD_INT 101
61638: ENABLE_MARKED
// exit ;
61639: GO 61844
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
61641: LD_ADDR_VAR 0 2
61645: PUSH
61646: LD_OWVAR 2
61650: PPUSH
61651: CALL 61473 0 1
61655: PUSH
61656: LD_EXP 35
61660: GREATEREQUAL
61661: IFFALSE 61674
61663: PUSH
61664: LD_OWVAR 2
61668: PPUSH
61669: CALL 62037 0 1
61673: AND
61674: ST_TO_ADDR
// for i := 1 to 8 do
61675: LD_ADDR_VAR 0 1
61679: PUSH
61680: DOUBLE
61681: LD_INT 1
61683: DEC
61684: ST_TO_ADDR
61685: LD_INT 8
61687: PUSH
61688: FOR_TO
61689: IFFALSE 61830
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
61691: LD_EXP 7
61695: PUSH
61696: LD_VAR 0 1
61700: ARRAY
61701: IFFALSE 61714
61703: PUSH
61704: LD_VAR 0 1
61708: PPUSH
61709: CALL_OW 108
61713: AND
61714: IFFALSE 61728
61716: PUSH
61717: LD_VAR 0 1
61721: PUSH
61722: LD_OWVAR 2
61726: NONEQUAL
61727: AND
61728: IFFALSE 61828
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
61730: LD_EXP 8
61734: PUSH
61735: LD_VAR 0 1
61739: ARRAY
61740: NOT
61741: IFTRUE 61789
61743: PUSH
61744: LD_EXP 8
61748: PUSH
61749: LD_VAR 0 1
61753: ARRAY
61754: PUSH
61755: LD_EXP 8
61759: PUSH
61760: LD_OWVAR 2
61764: ARRAY
61765: NONEQUAL
61766: IFFALSE 61788
61768: PUSH
61769: LD_OWVAR 2
61773: PPUSH
61774: LD_VAR 0 1
61778: PPUSH
61779: CALL_OW 81
61783: PUSH
61784: LD_INT 1
61786: NONEQUAL
61787: AND
61788: OR
61789: IFFALSE 61828
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
61791: LD_VAR 0 1
61795: PPUSH
61796: CALL 61473 0 1
61800: PUSH
61801: LD_EXP 35
61805: GREATEREQUAL
61806: IFFALSE 61819
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: CALL 62037 0 1
61818: AND
61819: IFFALSE 61828
// begin enable ( mpLose ) ;
61821: LD_INT 102
61823: ENABLE_MARKED
// exit ;
61824: POP
61825: POP
61826: GO 61844
// end ;
61828: GO 61688
61830: POP
61831: POP
// if canWin then
61832: LD_VAR 0 2
61836: IFFALSE 61843
// enable ( mpWin ) else
61838: LD_INT 101
61840: ENABLE_MARKED
61841: GO 61844
// enable ;
61843: ENABLE
// end ; end ;
61844: PPOPN 2
61846: END
// function EnemiesInGame ; var i ; begin
61847: LD_INT 0
61849: PPUSH
61850: PPUSH
// result := false ;
61851: LD_ADDR_VAR 0 1
61855: PUSH
61856: LD_INT 0
61858: ST_TO_ADDR
// for i := 1 to 8 do
61859: LD_ADDR_VAR 0 2
61863: PUSH
61864: DOUBLE
61865: LD_INT 1
61867: DEC
61868: ST_TO_ADDR
61869: LD_INT 8
61871: PUSH
61872: FOR_TO
61873: IFFALSE 61988
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
61875: LD_VAR 0 2
61879: PUSH
61880: LD_OWVAR 2
61884: NONEQUAL
61885: IFFALSE 61898
61887: PUSH
61888: LD_VAR 0 2
61892: PPUSH
61893: CALL 62037 0 1
61897: AND
61898: IFFALSE 61911
61900: PUSH
61901: LD_VAR 0 2
61905: PPUSH
61906: CALL_OW 108
61910: AND
61911: IFFALSE 61986
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
61913: LD_EXP 8
61917: PUSH
61918: LD_VAR 0 2
61922: ARRAY
61923: NOT
61924: IFTRUE 61972
61926: PUSH
61927: LD_EXP 8
61931: PUSH
61932: LD_VAR 0 2
61936: ARRAY
61937: PUSH
61938: LD_EXP 8
61942: PUSH
61943: LD_OWVAR 2
61947: ARRAY
61948: NONEQUAL
61949: IFFALSE 61971
61951: PUSH
61952: LD_OWVAR 2
61956: PPUSH
61957: LD_VAR 0 2
61961: PPUSH
61962: CALL_OW 81
61966: PUSH
61967: LD_INT 1
61969: NONEQUAL
61970: AND
61971: OR
61972: IFFALSE 61986
// begin result := true ;
61974: LD_ADDR_VAR 0 1
61978: PUSH
61979: LD_INT 1
61981: ST_TO_ADDR
// exit ;
61982: POP
61983: POP
61984: GO 61990
// end ;
61986: GO 61872
61988: POP
61989: POP
// end ;
61990: LD_VAR 0 1
61994: RET
// function CanWinLoose ; begin
61995: LD_INT 0
61997: PPUSH
// result := true ;
61998: LD_ADDR_VAR 0 1
62002: PUSH
62003: LD_INT 1
62005: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62006: CALL_OW 531
62010: IFFALSE 62022
62012: PUSH
62013: CALL_OW 519
62017: PUSH
62018: LD_INT 1
62020: GREATER
62021: AND
62022: IFFALSE 62032
// result := false ;
62024: LD_ADDR_VAR 0 1
62028: PUSH
62029: LD_INT 0
62031: ST_TO_ADDR
// end ;
62032: LD_VAR 0 1
62036: RET
// function HasPower ( i ) ; begin
62037: LD_INT 0
62039: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62040: LD_ADDR_VAR 0 2
62044: PUSH
62045: LD_INT 22
62047: PUSH
62048: LD_VAR 0 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 2
62059: PUSH
62060: LD_INT 21
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 33
62072: PUSH
62073: LD_INT 3
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 33
62082: PUSH
62083: LD_INT 5
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PPUSH
62100: CALL_OW 69
62104: ST_TO_ADDR
// end ; end_of_file
62105: LD_VAR 0 2
62109: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62110: PPOPN 6
62112: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62113: LD_INT 0
62115: PPUSH
// begin if not units then
62116: LD_VAR 0 1
62120: NOT
62121: IFFALSE 62125
// exit ;
62123: GO 62159
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62125: LD_VAR 0 1
62129: PPUSH
62130: LD_VAR 0 2
62134: PPUSH
62135: LD_VAR 0 3
62139: PPUSH
62140: LD_VAR 0 4
62144: PPUSH
62145: LD_VAR 0 5
62149: PPUSH
62150: LD_VAR 0 6
62154: PPUSH
62155: CALL 60402 0 6
// end ;
62159: PPOPN 7
62161: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62162: LD_EXP 3
62166: PUSH
62167: LD_INT 4
62169: EQUAL
62170: IFFALSE 62206
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62172: LD_STRING setGameDifficulty(
62174: PUSH
62175: LD_OWVAR 67
62179: STR
62180: PUSH
62181: LD_STRING )
62183: STR
62184: PPUSH
62185: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62189: LD_STRING displayDifficulty(
62191: PUSH
62192: LD_OWVAR 67
62196: STR
62197: PUSH
62198: LD_STRING )
62200: STR
62201: PPUSH
62202: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62206: CALL 62235 0 0
// end ; end_of_file
62210: PPOPN 1
62212: END
// every 0 0$1 do
62213: GO 62215
62215: DISABLE
// begin enable ;
62216: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62217: LD_STRING updateTimer(
62219: PUSH
62220: LD_OWVAR 1
62224: STR
62225: PUSH
62226: LD_STRING );
62228: STR
62229: PPUSH
62230: CALL_OW 559
// end ;
62234: END
// export function SOS_MapStart ( ) ; begin
62235: LD_INT 0
62237: PPUSH
// UpdateFactoryWaypoints ( ) ;
62238: CALL 63169 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62242: CALL 63421 0 0
// ParseMultiDataToLua ( ) ;
62246: CALL 63568 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62250: LD_STRING setSpecLogoNumber(
62252: PUSH
62253: LD_INT 2
62255: STR
62256: PUSH
62257: LD_STRING ,
62259: STR
62260: PUSH
62261: LD_INT 1
62263: STR
62264: PUSH
62265: LD_STRING )
62267: STR
62268: PPUSH
62269: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62273: LD_STRING setSpecLogoNumber(
62275: PUSH
62276: LD_INT 3
62278: STR
62279: PUSH
62280: LD_STRING ,
62282: STR
62283: PUSH
62284: LD_INT 2
62286: STR
62287: PUSH
62288: LD_STRING )
62290: STR
62291: PPUSH
62292: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62296: LD_STRING setSpecLogoNumber(
62298: PUSH
62299: LD_INT 4
62301: STR
62302: PUSH
62303: LD_STRING ,
62305: STR
62306: PUSH
62307: LD_INT 3
62309: STR
62310: PUSH
62311: LD_STRING )
62313: STR
62314: PPUSH
62315: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62319: LD_STRING setSpecLogoNumber(
62321: PUSH
62322: LD_INT 5
62324: STR
62325: PUSH
62326: LD_STRING ,
62328: STR
62329: PUSH
62330: LD_INT 4
62332: STR
62333: PUSH
62334: LD_STRING )
62336: STR
62337: PPUSH
62338: CALL_OW 559
// end ;
62342: LD_VAR 0 1
62346: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62347: LD_INT 0
62349: PPUSH
62350: PPUSH
62351: PPUSH
62352: PPUSH
62353: PPUSH
62354: PPUSH
62355: PPUSH
62356: PPUSH
62357: PPUSH
// for i := 1 to 8 do
62358: LD_ADDR_VAR 0 2
62362: PUSH
62363: DOUBLE
62364: LD_INT 1
62366: DEC
62367: ST_TO_ADDR
62368: LD_INT 8
62370: PUSH
62371: FOR_TO
62372: IFFALSE 62757
// begin if mpSidePositions [ i ] then
62374: LD_EXP 7
62378: PUSH
62379: LD_VAR 0 2
62383: ARRAY
62384: IFFALSE 62755
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62386: LD_ADDR_VAR 0 7
62390: PUSH
62391: LD_INT 22
62393: PUSH
62394: LD_VAR 0 2
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 21
62405: PUSH
62406: LD_INT 1
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PPUSH
62417: CALL_OW 69
62421: PPUSH
62422: CALL 12572 0 1
62426: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62427: LD_ADDR_VAR 0 9
62431: PUSH
62432: LD_INT 22
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 30
62449: PUSH
62450: LD_INT 0
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 30
62459: PUSH
62460: LD_INT 1
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PPUSH
62476: CALL_OW 69
62480: ST_TO_ADDR
// crates := 0 ;
62481: LD_ADDR_VAR 0 4
62485: PUSH
62486: LD_INT 0
62488: ST_TO_ADDR
// oil := 0 ;
62489: LD_ADDR_VAR 0 5
62493: PUSH
62494: LD_INT 0
62496: ST_TO_ADDR
// sib := 0 ;
62497: LD_ADDR_VAR 0 6
62501: PUSH
62502: LD_INT 0
62504: ST_TO_ADDR
// if bases then
62505: LD_VAR 0 9
62509: IFFALSE 62615
// begin for j in bases do
62511: LD_ADDR_VAR 0 3
62515: PUSH
62516: LD_VAR 0 9
62520: PUSH
62521: FOR_IN
62522: IFFALSE 62613
// begin base := GetBase ( j ) ;
62524: LD_ADDR_VAR 0 8
62528: PUSH
62529: LD_VAR 0 3
62533: PPUSH
62534: CALL_OW 274
62538: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
62539: LD_ADDR_VAR 0 4
62543: PUSH
62544: LD_VAR 0 4
62548: PUSH
62549: LD_VAR 0 8
62553: PPUSH
62554: LD_INT 1
62556: PPUSH
62557: CALL_OW 275
62561: PLUS
62562: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
62563: LD_ADDR_VAR 0 5
62567: PUSH
62568: LD_VAR 0 5
62572: PUSH
62573: LD_VAR 0 8
62577: PPUSH
62578: LD_INT 2
62580: PPUSH
62581: CALL_OW 275
62585: PLUS
62586: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
62587: LD_ADDR_VAR 0 6
62591: PUSH
62592: LD_VAR 0 6
62596: PUSH
62597: LD_VAR 0 8
62601: PPUSH
62602: LD_INT 3
62604: PPUSH
62605: CALL_OW 275
62609: PLUS
62610: ST_TO_ADDR
// end ;
62611: GO 62521
62613: POP
62614: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
62615: LD_STRING setSpecText(
62617: PUSH
62618: LD_VAR 0 2
62622: STR
62623: PUSH
62624: LD_STRING ,
62626: STR
62627: PUSH
62628: LD_INT 2
62630: STR
62631: PUSH
62632: LD_STRING ,
62634: STR
62635: PUSH
62636: LD_VAR 0 4
62640: STR
62641: PUSH
62642: LD_STRING )
62644: STR
62645: PPUSH
62646: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
62650: LD_STRING setSpecText(
62652: PUSH
62653: LD_VAR 0 2
62657: STR
62658: PUSH
62659: LD_STRING ,
62661: STR
62662: PUSH
62663: LD_INT 3
62665: STR
62666: PUSH
62667: LD_STRING ,
62669: STR
62670: PUSH
62671: LD_VAR 0 5
62675: STR
62676: PUSH
62677: LD_STRING )
62679: STR
62680: PPUSH
62681: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
62685: LD_STRING setSpecText(
62687: PUSH
62688: LD_VAR 0 2
62692: STR
62693: PUSH
62694: LD_STRING ,
62696: STR
62697: PUSH
62698: LD_INT 4
62700: STR
62701: PUSH
62702: LD_STRING ,
62704: STR
62705: PUSH
62706: LD_VAR 0 6
62710: STR
62711: PUSH
62712: LD_STRING )
62714: STR
62715: PPUSH
62716: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
62720: LD_STRING setSpecText(
62722: PUSH
62723: LD_VAR 0 2
62727: STR
62728: PUSH
62729: LD_STRING ,
62731: STR
62732: PUSH
62733: LD_INT 5
62735: STR
62736: PUSH
62737: LD_STRING ,
62739: STR
62740: PUSH
62741: LD_VAR 0 7
62745: STR
62746: PUSH
62747: LD_STRING )
62749: STR
62750: PPUSH
62751: CALL_OW 559
// end ; end ;
62755: GO 62371
62757: POP
62758: POP
// end ;
62759: LD_VAR 0 1
62763: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
62764: LD_INT 2
62766: PUSH
62767: LD_INT 30
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 30
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: PPUSH
62792: CALL_OW 69
62796: IFFALSE 62806
62798: GO 62800
62800: DISABLE
// begin enable ;
62801: ENABLE
// UpdateSpectatorBar ;
62802: CALL 62347 0 0
// end ;
62806: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62807: LD_INT 0
62809: PPUSH
// end ;
62810: LD_VAR 0 12
62814: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62815: LD_INT 0
62817: PPUSH
62818: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62819: LD_VAR 0 1
62823: NOT
62824: IFTRUE 62843
62826: PUSH
62827: LD_VAR 0 2
62831: PPUSH
62832: LD_VAR 0 3
62836: PPUSH
62837: CALL_OW 488
62841: NOT
62842: OR
62843: IFTRUE 62878
62845: PUSH
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 266
62855: PUSH
62856: LD_INT 3
62858: NONEQUAL
62859: IFFALSE 62877
62861: PUSH
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 247
62871: PUSH
62872: LD_INT 1
62874: EQUAL
62875: NOT
62876: AND
62877: OR
62878: IFFALSE 62882
// exit ;
62880: GO 63164
// if GetType ( factory ) = unit_human then
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 247
62891: PUSH
62892: LD_INT 1
62894: EQUAL
62895: IFFALSE 62912
// factory := IsInUnit ( factory ) ;
62897: LD_ADDR_VAR 0 1
62901: PUSH
62902: LD_VAR 0 1
62906: PPUSH
62907: CALL_OW 310
62911: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62912: LD_VAR 0 1
62916: PPUSH
62917: CALL_OW 266
62921: PUSH
62922: LD_INT 3
62924: NONEQUAL
62925: IFFALSE 62929
// exit ;
62927: GO 63164
// for i := 1 to Count ( factoryWaypoints ) do
62929: LD_ADDR_VAR 0 5
62933: PUSH
62934: DOUBLE
62935: LD_INT 1
62937: DEC
62938: ST_TO_ADDR
62939: LD_EXP 60
62943: PPUSH
62944: CALL 12572 0 1
62948: PUSH
62949: FOR_TO
62950: IFFALSE 63112
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
62952: LD_VAR 0 2
62956: PPUSH
62957: LD_VAR 0 3
62961: PPUSH
62962: CALL_OW 428
62966: PUSH
62967: LD_EXP 60
62971: PUSH
62972: LD_VAR 0 5
62976: ARRAY
62977: PUSH
62978: LD_INT 2
62980: ARRAY
62981: EQUAL
62982: IFFALSE 63014
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
62984: LD_ADDR_EXP 60
62988: PUSH
62989: LD_EXP 60
62993: PPUSH
62994: LD_VAR 0 5
62998: PPUSH
62999: CALL_OW 3
63003: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63004: CALL 63169 0 0
// exit ;
63008: POP
63009: POP
63010: GO 63164
// end else
63012: GO 63110
// if factory = factoryWaypoints [ i ] [ 2 ] then
63014: LD_VAR 0 1
63018: PUSH
63019: LD_EXP 60
63023: PUSH
63024: LD_VAR 0 5
63028: ARRAY
63029: PUSH
63030: LD_INT 2
63032: ARRAY
63033: EQUAL
63034: IFFALSE 63110
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63036: LD_ADDR_EXP 60
63040: PUSH
63041: LD_EXP 60
63045: PPUSH
63046: LD_VAR 0 5
63050: PPUSH
63051: CALL_OW 3
63055: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63056: LD_ADDR_EXP 60
63060: PUSH
63061: LD_EXP 60
63065: PPUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: CALL_OW 255
63075: PUSH
63076: LD_VAR 0 1
63080: PUSH
63081: LD_VAR 0 2
63085: PUSH
63086: LD_VAR 0 3
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: PPUSH
63097: CALL 48538 0 2
63101: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63102: CALL 63169 0 0
// exit ;
63106: POP
63107: POP
63108: GO 63164
// end ; end ;
63110: GO 62949
63112: POP
63113: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63114: LD_ADDR_EXP 60
63118: PUSH
63119: LD_EXP 60
63123: PPUSH
63124: LD_VAR 0 1
63128: PPUSH
63129: CALL_OW 255
63133: PUSH
63134: LD_VAR 0 1
63138: PUSH
63139: LD_VAR 0 2
63143: PUSH
63144: LD_VAR 0 3
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: PPUSH
63155: CALL 48538 0 2
63159: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63160: CALL 63169 0 0
// end ;
63164: LD_VAR 0 4
63168: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63169: LD_INT 0
63171: PPUSH
63172: PPUSH
63173: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63174: LD_STRING resetFactoryWaypoint();
63176: PPUSH
63177: CALL_OW 559
// if factoryWaypoints then
63181: LD_EXP 60
63185: IFFALSE 63306
// begin list := factoryWaypoints ;
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_EXP 60
63196: ST_TO_ADDR
// for i := 1 to list do
63197: LD_ADDR_VAR 0 2
63201: PUSH
63202: DOUBLE
63203: LD_INT 1
63205: DEC
63206: ST_TO_ADDR
63207: LD_VAR 0 3
63211: PUSH
63212: FOR_TO
63213: IFFALSE 63304
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63215: LD_STRING setFactoryWaypointXY(
63217: PUSH
63218: LD_VAR 0 3
63222: PUSH
63223: LD_VAR 0 2
63227: ARRAY
63228: PUSH
63229: LD_INT 1
63231: ARRAY
63232: STR
63233: PUSH
63234: LD_STRING ,
63236: STR
63237: PUSH
63238: LD_VAR 0 3
63242: PUSH
63243: LD_VAR 0 2
63247: ARRAY
63248: PUSH
63249: LD_INT 2
63251: ARRAY
63252: STR
63253: PUSH
63254: LD_STRING ,
63256: STR
63257: PUSH
63258: LD_VAR 0 3
63262: PUSH
63263: LD_VAR 0 2
63267: ARRAY
63268: PUSH
63269: LD_INT 3
63271: ARRAY
63272: STR
63273: PUSH
63274: LD_STRING ,
63276: STR
63277: PUSH
63278: LD_VAR 0 3
63282: PUSH
63283: LD_VAR 0 2
63287: ARRAY
63288: PUSH
63289: LD_INT 4
63291: ARRAY
63292: STR
63293: PUSH
63294: LD_STRING )
63296: STR
63297: PPUSH
63298: CALL_OW 559
63302: GO 63212
63304: POP
63305: POP
// end ; end ;
63306: LD_VAR 0 1
63310: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63311: LD_INT 0
63313: PPUSH
// if HexInfo ( x , y ) = warehouse then
63314: LD_VAR 0 2
63318: PPUSH
63319: LD_VAR 0 3
63323: PPUSH
63324: CALL_OW 428
63328: PUSH
63329: LD_VAR 0 1
63333: EQUAL
63334: IFFALSE 63361
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63336: LD_ADDR_EXP 62
63340: PUSH
63341: LD_EXP 62
63345: PPUSH
63346: LD_VAR 0 1
63350: PPUSH
63351: LD_INT 0
63353: PPUSH
63354: CALL_OW 1
63358: ST_TO_ADDR
63359: GO 63412
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63361: LD_ADDR_EXP 62
63365: PUSH
63366: LD_EXP 62
63370: PPUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: LD_VAR 0 1
63380: PPUSH
63381: CALL_OW 255
63385: PUSH
63386: LD_VAR 0 1
63390: PUSH
63391: LD_VAR 0 2
63395: PUSH
63396: LD_VAR 0 3
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: PPUSH
63407: CALL_OW 1
63411: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63412: CALL 63421 0 0
// end ;
63416: LD_VAR 0 4
63420: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63421: LD_INT 0
63423: PPUSH
63424: PPUSH
63425: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63426: LD_STRING resetWarehouseGatheringPoints();
63428: PPUSH
63429: CALL_OW 559
// if warehouseGatheringPoints then
63433: LD_EXP 62
63437: IFFALSE 63563
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63439: LD_ADDR_VAR 0 3
63443: PUSH
63444: LD_EXP 62
63448: PPUSH
63449: CALL 52472 0 1
63453: ST_TO_ADDR
// for i := 1 to list do
63454: LD_ADDR_VAR 0 2
63458: PUSH
63459: DOUBLE
63460: LD_INT 1
63462: DEC
63463: ST_TO_ADDR
63464: LD_VAR 0 3
63468: PUSH
63469: FOR_TO
63470: IFFALSE 63561
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63472: LD_STRING setWarehouseGatheringPointXY(
63474: PUSH
63475: LD_VAR 0 3
63479: PUSH
63480: LD_VAR 0 2
63484: ARRAY
63485: PUSH
63486: LD_INT 1
63488: ARRAY
63489: STR
63490: PUSH
63491: LD_STRING ,
63493: STR
63494: PUSH
63495: LD_VAR 0 3
63499: PUSH
63500: LD_VAR 0 2
63504: ARRAY
63505: PUSH
63506: LD_INT 2
63508: ARRAY
63509: STR
63510: PUSH
63511: LD_STRING ,
63513: STR
63514: PUSH
63515: LD_VAR 0 3
63519: PUSH
63520: LD_VAR 0 2
63524: ARRAY
63525: PUSH
63526: LD_INT 3
63528: ARRAY
63529: STR
63530: PUSH
63531: LD_STRING ,
63533: STR
63534: PUSH
63535: LD_VAR 0 3
63539: PUSH
63540: LD_VAR 0 2
63544: ARRAY
63545: PUSH
63546: LD_INT 4
63548: ARRAY
63549: STR
63550: PUSH
63551: LD_STRING )
63553: STR
63554: PPUSH
63555: CALL_OW 559
63559: GO 63469
63561: POP
63562: POP
// end ; end ;
63563: LD_VAR 0 1
63567: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
63568: LD_INT 0
63570: PPUSH
63571: PPUSH
// if not mpSidePositions then
63572: LD_EXP 7
63576: NOT
63577: IFFALSE 63581
// exit ;
63579: GO 63652
// result :=  ;
63581: LD_ADDR_VAR 0 1
63585: PUSH
63586: LD_STRING 
63588: ST_TO_ADDR
// for i := 1 to 8 do
63589: LD_ADDR_VAR 0 2
63593: PUSH
63594: DOUBLE
63595: LD_INT 1
63597: DEC
63598: ST_TO_ADDR
63599: LD_INT 8
63601: PUSH
63602: FOR_TO
63603: IFFALSE 63633
// begin result := result & mpSidePositions [ i ] & ; ;
63605: LD_ADDR_VAR 0 1
63609: PUSH
63610: LD_VAR 0 1
63614: PUSH
63615: LD_EXP 7
63619: PUSH
63620: LD_VAR 0 2
63624: ARRAY
63625: STR
63626: PUSH
63627: LD_STRING ;
63629: STR
63630: ST_TO_ADDR
// end ;
63631: GO 63602
63633: POP
63634: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
63635: LD_STRING setMultiplayerRealPosition("
63637: PUSH
63638: LD_VAR 0 1
63642: STR
63643: PUSH
63644: LD_STRING ");
63646: STR
63647: PPUSH
63648: CALL_OW 559
// end ;
63652: LD_VAR 0 1
63656: RET
