// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 2480 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 2903 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 1 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 1
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: LD_INT 0
 656: PUSH
 657: LD_INT 0
 659: PUSH
 660: LD_INT 0
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: LD_INT 0
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 0
 692: PUSH
 693: LD_INT 0
 695: PUSH
 696: LD_INT 0
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 0
 704: PUSH
 705: LD_INT 0
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 0
 731: PUSH
 732: LD_INT 0
 734: PUSH
 735: LD_INT 0
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 0
 743: PUSH
 744: LD_INT 0
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 ] , [ 2 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: EMPTY
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: ST_TO_ADDR
// mpTeamGame := true ;
 778: LD_ADDR_EXP 11
 782: PUSH
 783: LD_INT 1
 785: ST_TO_ADDR
// mpMapSize := [ 90 , 120 ] ;
 786: LD_ADDR_EXP 29
 790: PUSH
 791: LD_INT 90
 793: PUSH
 794: LD_INT 120
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: ST_TO_ADDR
// end ;
 801: LD_VAR 0 1
 805: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 806: LD_INT 0
 808: PPUSH
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
 813: PPUSH
 814: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 ] ;
 815: LD_ADDR_EXP 19
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: ST_TO_ADDR
// mpMarkedAreas := [ Between1Area , Between2Area , Between3Area , Between4Area , CenterArea ] union mpBuildUpAreas ;
 830: LD_ADDR_EXP 18
 834: PUSH
 835: LD_INT 4
 837: PUSH
 838: LD_INT 5
 840: PUSH
 841: LD_INT 6
 843: PUSH
 844: LD_INT 7
 846: PUSH
 847: LD_INT 8
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: LD_EXP 19
 861: UNION
 862: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 863: LD_VAR 0 1
 867: PUSH
 868: LD_INT 2
 870: EQUAL
 871: IFFALSE 883
// baseLevel := 1 else
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
 881: GO 897
// baseLevel := mpGameSettings [ 1 ] ;
 883: LD_ADDR_VAR 0 7
 887: PUSH
 888: LD_EXP 6
 892: PUSH
 893: LD_INT 1
 895: ARRAY
 896: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 897: LD_ADDR_EXP 24
 901: PUSH
 902: LD_EXP 6
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 911: LD_ADDR_EXP 25
 915: PUSH
 916: LD_EXP 6
 920: PUSH
 921: LD_INT 3
 923: ARRAY
 924: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 925: LD_ADDR_EXP 15
 929: PUSH
 930: LD_EXP 6
 934: PUSH
 935: LD_INT 4
 937: ARRAY
 938: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 939: LD_ADDR_EXP 27
 943: PUSH
 944: LD_EXP 6
 948: PUSH
 949: LD_INT 5
 951: ARRAY
 952: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 953: LD_ADDR_VAR 0 5
 957: PUSH
 958: LD_EXP 6
 962: PUSH
 963: LD_INT 6
 965: ARRAY
 966: PUSH
 967: LD_INT 0
 969: GREATER
 970: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
 971: LD_ADDR_VAR 0 6
 975: PUSH
 976: LD_EXP 6
 980: PUSH
 981: LD_INT 7
 983: ARRAY
 984: PUSH
 985: LD_INT 0
 987: GREATER
 988: ST_TO_ADDR
// mpKingArea := 0 ;
 989: LD_ADDR_EXP 34
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// mpPoints := 0 ;
 997: LD_ADDR_EXP 35
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// mpEmissions := 0 ;
1005: LD_ADDR_EXP 37
1009: PUSH
1010: LD_INT 0
1012: ST_TO_ADDR
// kingArea := 0 ;
1013: LD_ADDR_EXP 1
1017: PUSH
1018: LD_INT 0
1020: ST_TO_ADDR
// kingCamArea := 0 ;
1021: LD_ADDR_EXP 2
1025: PUSH
1026: LD_INT 0
1028: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
1029: LD_EXP 6
1033: PUSH
1034: LD_INT 9
1036: ARRAY
1037: IFFALSE 1169
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1039: LD_ADDR_EXP 36
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: LD_INT 2
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 1
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PUSH
1084: LD_INT 12
1086: PUSH
1087: LD_INT 1
1089: PUSH
1090: LD_INT 1
1092: PUSH
1093: LD_INT 24
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: LD_INT 1
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 23
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: PUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: LD_INT 1
1132: PUSH
1133: LD_INT 42
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: PUSH
1142: LD_INT 21
1144: PUSH
1145: LD_INT 1
1147: PUSH
1148: LD_INT 1
1150: PUSH
1151: LD_INT 42
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1169: LD_ADDR_EXP 16
1173: PUSH
1174: LD_EXP 6
1178: PUSH
1179: LD_INT 11
1181: ARRAY
1182: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1183: LD_ADDR_EXP 22
1187: PUSH
1188: LD_EXP 6
1192: PUSH
1193: LD_INT 12
1195: ARRAY
1196: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1197: LD_ADDR_EXP 26
1201: PUSH
1202: LD_EXP 6
1206: PUSH
1207: LD_INT 13
1209: ARRAY
1210: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1211: LD_ADDR_EXP 33
1215: PUSH
1216: LD_EXP 6
1220: PUSH
1221: LD_INT 14
1223: ARRAY
1224: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1225: LD_ADDR_EXP 30
1229: PUSH
1230: LD_EXP 6
1234: PUSH
1235: LD_INT 15
1237: ARRAY
1238: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1239: LD_ADDR_EXP 28
1243: PUSH
1244: LD_EXP 6
1248: PUSH
1249: LD_INT 18
1251: ARRAY
1252: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1253: LD_ADDR_EXP 20
1257: PUSH
1258: LD_EXP 6
1262: PUSH
1263: LD_INT 21
1265: ARRAY
1266: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea ] ;
1267: LD_ADDR_EXP 31
1271: PUSH
1272: LD_INT 15
1274: PUSH
1275: LD_INT 16
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 0 ) ] ;
1282: LD_ADDR_VAR 0 8
1286: PUSH
1287: LD_INT 9
1289: PPUSH
1290: LD_INT 2
1292: PPUSH
1293: CALL 53935 0 2
1297: PUSH
1298: LD_INT 17
1300: PPUSH
1301: LD_INT 0
1303: PPUSH
1304: CALL 53935 0 2
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_VAR 0 8
1327: PPUSH
1328: CALL 13240 0 1
1332: PUSH
1333: FOR_TO
1334: IFFALSE 1438
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1336: LD_ADDR_EXP 21
1340: PUSH
1341: LD_EXP 21
1345: PPUSH
1346: LD_VAR 0 3
1350: PPUSH
1351: LD_VAR 0 8
1355: PUSH
1356: LD_VAR 0 3
1360: ARRAY
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: LD_VAR 0 8
1370: PUSH
1371: LD_VAR 0 3
1375: ARRAY
1376: PUSH
1377: LD_INT 3
1379: ARRAY
1380: PPUSH
1381: LD_INT 10
1383: PPUSH
1384: CALL_OW 272
1388: PUSH
1389: LD_VAR 0 8
1393: PUSH
1394: LD_VAR 0 3
1398: ARRAY
1399: PUSH
1400: LD_INT 2
1402: ARRAY
1403: PPUSH
1404: LD_VAR 0 8
1408: PUSH
1409: LD_VAR 0 3
1413: ARRAY
1414: PUSH
1415: LD_INT 3
1417: ARRAY
1418: PPUSH
1419: LD_INT 10
1421: PPUSH
1422: CALL_OW 273
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 1
1435: ST_TO_ADDR
1436: GO 1333
1438: POP
1439: POP
// if hasOil then
1440: LD_VAR 0 5
1444: IFFALSE 1542
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1446: LD_ADDR_VAR 0 4
1450: PUSH
1451: LD_EXP 6
1455: PUSH
1456: LD_INT 6
1458: ARRAY
1459: PUSH
1460: LD_INT 2
1462: EQUAL
1463: ST_TO_ADDR
// if all then
1464: LD_VAR 0 4
1468: IFFALSE 1507
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) ] else
1470: LD_ADDR_EXP 12
1474: PUSH
1475: LD_INT 13
1477: PPUSH
1478: LD_VAR 0 4
1482: PPUSH
1483: CALL 53768 0 2
1487: PUSH
1488: LD_INT 21
1490: PPUSH
1491: LD_VAR 0 4
1495: PPUSH
1496: CALL 53768 0 2
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: ST_TO_ADDR
1505: GO 1542
// mpOilDeposits := [ [ [ 49 , 3 ] ] , [ [ 108 , 117 ] ] ] ;
1507: LD_ADDR_EXP 12
1511: PUSH
1512: LD_INT 49
1514: PUSH
1515: LD_INT 3
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: EMPTY
1523: LIST
1524: PUSH
1525: LD_INT 108
1527: PUSH
1528: LD_INT 117
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: EMPTY
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: ST_TO_ADDR
// end ; if hasSib then
1542: LD_VAR 0 6
1546: IFFALSE 1644
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1548: LD_ADDR_VAR 0 4
1552: PUSH
1553: LD_EXP 6
1557: PUSH
1558: LD_INT 7
1560: ARRAY
1561: PUSH
1562: LD_INT 2
1564: EQUAL
1565: ST_TO_ADDR
// if all then
1566: LD_VAR 0 4
1570: IFFALSE 1609
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) ] else
1572: LD_ADDR_EXP 13
1576: PUSH
1577: LD_INT 14
1579: PPUSH
1580: LD_VAR 0 4
1584: PPUSH
1585: CALL 53768 0 2
1589: PUSH
1590: LD_INT 22
1592: PPUSH
1593: LD_VAR 0 4
1597: PPUSH
1598: CALL 53768 0 2
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: ST_TO_ADDR
1607: GO 1644
// mpSibDeposits := [ [ [ 52 , 2 ] ] , [ [ 110 , 115 ] ] ] ;
1609: LD_ADDR_EXP 13
1613: PUSH
1614: LD_INT 52
1616: PUSH
1617: LD_INT 2
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: EMPTY
1625: LIST
1626: PUSH
1627: LD_INT 110
1629: PUSH
1630: LD_INT 115
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: EMPTY
1638: LIST
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1644: LD_VAR 0 7
1648: PUSH
1649: LD_INT 1
1651: GREATEREQUAL
1652: IFFALSE 1664
// mpDepots := startPos ;
1654: LD_ADDR_EXP 14
1658: PUSH
1659: LD_VAR 0 8
1663: ST_TO_ADDR
// if baseLevel >= 2 then
1664: LD_VAR 0 7
1668: PUSH
1669: LD_INT 2
1671: GREATEREQUAL
1672: IFFALSE 1783
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 2 ) ] ] ;
1674: LD_ADDR_EXP 17
1678: PUSH
1679: LD_INT 31
1681: PUSH
1682: LD_INT 11
1684: PPUSH
1685: LD_INT 5
1687: PPUSH
1688: CALL 53935 0 2
1692: ADD
1693: PUSH
1694: LD_INT 31
1696: PUSH
1697: LD_INT 12
1699: PPUSH
1700: LD_INT 1
1702: PPUSH
1703: CALL 53935 0 2
1707: ADD
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 10
1714: PPUSH
1715: LD_INT 5
1717: PPUSH
1718: CALL 53935 0 2
1722: ADD
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 31
1731: PUSH
1732: LD_INT 19
1734: PPUSH
1735: LD_INT 3
1737: PPUSH
1738: CALL 53935 0 2
1742: ADD
1743: PUSH
1744: LD_INT 31
1746: PUSH
1747: LD_INT 20
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL 53935 0 2
1757: ADD
1758: PUSH
1759: LD_INT 4
1761: PUSH
1762: LD_INT 18
1764: PPUSH
1765: LD_INT 2
1767: PPUSH
1768: CALL 53935 0 2
1772: ADD
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// end ; end ;
1783: LD_VAR 0 2
1787: RET
// every 0 0$2 marked mpActive do var i , x , tmp , time , areas , normalTime , delayTime , maxTime ;
1788: GO 1790
1790: DISABLE
1791: LD_INT 0
1793: PPUSH
1794: PPUSH
1795: PPUSH
1796: PPUSH
1797: PPUSH
1798: PPUSH
1799: PPUSH
1800: PPUSH
// begin if not mpShipments then
1801: LD_EXP 27
1805: NOT
1806: IFFALSE 1810
// exit ;
1808: GO 2317
// case mpShipments of 1 :
1810: LD_EXP 27
1814: PUSH
1815: LD_INT 1
1817: DOUBLE
1818: EQUAL
1819: IFTRUE 1823
1821: GO 1858
1823: POP
// begin time := 0 0$30 ;
1824: LD_ADDR_VAR 0 4
1828: PUSH
1829: LD_INT 1050
1831: ST_TO_ADDR
// normalTime := 0 0$30 ;
1832: LD_ADDR_VAR 0 6
1836: PUSH
1837: LD_INT 1050
1839: ST_TO_ADDR
// maxTime := 1 1$20 ;
1840: LD_ADDR_VAR 0 8
1844: PUSH
1845: LD_INT 2800
1847: ST_TO_ADDR
// delayTime := 0 0$5 ;
1848: LD_ADDR_VAR 0 7
1852: PUSH
1853: LD_INT 175
1855: ST_TO_ADDR
// end ; 2 :
1856: GO 1988
1858: LD_INT 2
1860: DOUBLE
1861: EQUAL
1862: IFTRUE 1866
1864: GO 1901
1866: POP
// begin time := 0 0$25 ;
1867: LD_ADDR_VAR 0 4
1871: PUSH
1872: LD_INT 875
1874: ST_TO_ADDR
// normalTime := 0 0$25 ;
1875: LD_ADDR_VAR 0 6
1879: PUSH
1880: LD_INT 875
1882: ST_TO_ADDR
// maxTime := 1 1$10 ;
1883: LD_ADDR_VAR 0 8
1887: PUSH
1888: LD_INT 2450
1890: ST_TO_ADDR
// delayTime := 0 0$4 ;
1891: LD_ADDR_VAR 0 7
1895: PUSH
1896: LD_INT 140
1898: ST_TO_ADDR
// end ; 3 :
1899: GO 1988
1901: LD_INT 3
1903: DOUBLE
1904: EQUAL
1905: IFTRUE 1909
1907: GO 1944
1909: POP
// begin time := 0 0$20 ;
1910: LD_ADDR_VAR 0 4
1914: PUSH
1915: LD_INT 700
1917: ST_TO_ADDR
// normalTime := 0 0$20 ;
1918: LD_ADDR_VAR 0 6
1922: PUSH
1923: LD_INT 700
1925: ST_TO_ADDR
// maxTime := 1 1$00 ;
1926: LD_ADDR_VAR 0 8
1930: PUSH
1931: LD_INT 2100
1933: ST_TO_ADDR
// delayTime := 0 0$3 ;
1934: LD_ADDR_VAR 0 7
1938: PUSH
1939: LD_INT 105
1941: ST_TO_ADDR
// end ; 4 :
1942: GO 1988
1944: LD_INT 4
1946: DOUBLE
1947: EQUAL
1948: IFTRUE 1952
1950: GO 1987
1952: POP
// begin time := 0 0$15 ;
1953: LD_ADDR_VAR 0 4
1957: PUSH
1958: LD_INT 525
1960: ST_TO_ADDR
// normalTime := 0 0$15 ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 525
1968: ST_TO_ADDR
// maxTime := 0 0$55 ;
1969: LD_ADDR_VAR 0 8
1973: PUSH
1974: LD_INT 1925
1976: ST_TO_ADDR
// delayTime := 0 0$2 ;
1977: LD_ADDR_VAR 0 7
1981: PUSH
1982: LD_INT 70
1984: ST_TO_ADDR
// end ; end ;
1985: GO 1988
1987: POP
// tmp := [ buildUpTime1 , buildUpTime2 ] ;
1988: LD_ADDR_VAR 0 3
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: LD_INT 2
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: ST_TO_ADDR
// areas := [ Between1Area , Between2Area , Between3Area , Between4Area ] ;
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_INT 4
2010: PUSH
2011: LD_INT 5
2013: PUSH
2014: LD_INT 6
2016: PUSH
2017: LD_INT 7
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: ST_TO_ADDR
// for i := 1 to 8 do
2026: LD_ADDR_VAR 0 1
2030: PUSH
2031: DOUBLE
2032: LD_INT 1
2034: DEC
2035: ST_TO_ADDR
2036: LD_INT 8
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2087
// begin if not mpSidePositions [ i ] then
2042: LD_EXP 7
2046: PUSH
2047: LD_VAR 0 1
2051: ARRAY
2052: NOT
2053: IFFALSE 2057
// continue ;
2055: GO 2039
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2057: LD_ADDR_VAR 0 5
2061: PUSH
2062: LD_VAR 0 5
2066: PUSH
2067: LD_VAR 0 3
2071: PUSH
2072: LD_EXP 7
2076: PUSH
2077: LD_VAR 0 1
2081: ARRAY
2082: ARRAY
2083: ADD
2084: ST_TO_ADDR
// end ;
2085: GO 2039
2087: POP
2088: POP
// x := 1 ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_INT 1
2096: ST_TO_ADDR
// repeat wait ( time ) ;
2097: LD_VAR 0 4
2101: PPUSH
2102: CALL_OW 67
// x := Inc ( x ) ;
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 2
2115: PPUSH
2116: CALL 50589 0 1
2120: ST_TO_ADDR
// if x > 5 then
2121: LD_VAR 0 2
2125: PUSH
2126: LD_INT 5
2128: GREATER
2129: IFFALSE 2139
// x := 1 ;
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// for i in areas do
2139: LD_ADDR_VAR 0 1
2143: PUSH
2144: LD_VAR 0 5
2148: PUSH
2149: FOR_IN
2150: IFFALSE 2189
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2152: LD_VAR 0 1
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 287
2164: PUSH
2165: LD_INT 20
2167: LESS
2168: IFFALSE 2187
// begin CreateCratesArea ( x , i , true ) ;
2170: LD_VAR 0 2
2174: PPUSH
2175: LD_VAR 0 1
2179: PPUSH
2180: LD_INT 1
2182: PPUSH
2183: CALL_OW 55
// end ; end ;
2187: GO 2149
2189: POP
2190: POP
// if GetResourceArea ( CenterArea , mat_cans ) = 0 then
2191: LD_INT 8
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: CALL_OW 287
2201: PUSH
2202: LD_INT 0
2204: EQUAL
2205: IFFALSE 2244
// begin for i := 1 to 3 do
2207: LD_ADDR_VAR 0 1
2211: PUSH
2212: DOUBLE
2213: LD_INT 1
2215: DEC
2216: ST_TO_ADDR
2217: LD_INT 3
2219: PUSH
2220: FOR_TO
2221: IFFALSE 2240
// CreateCratesArea ( x , CenterArea , true ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 8
2230: PPUSH
2231: LD_INT 1
2233: PPUSH
2234: CALL_OW 55
2238: GO 2220
2240: POP
2241: POP
// end else
2242: GO 2275
// if GetResourceArea ( CenterArea , mat_cans ) < 30 then
2244: LD_INT 8
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: CALL_OW 287
2254: PUSH
2255: LD_INT 30
2257: LESS
2258: IFFALSE 2275
// CreateCratesArea ( x , CenterArea , true ) ;
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_INT 8
2267: PPUSH
2268: LD_INT 1
2270: PPUSH
2271: CALL_OW 55
// time := time + delayTime ;
2275: LD_ADDR_VAR 0 4
2279: PUSH
2280: LD_VAR 0 4
2284: PUSH
2285: LD_VAR 0 7
2289: PLUS
2290: ST_TO_ADDR
// if time > maxTime then
2291: LD_VAR 0 4
2295: PUSH
2296: LD_VAR 0 8
2300: GREATER
2301: IFFALSE 2313
// time := normalTime ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: LD_VAR 0 6
2312: ST_TO_ADDR
// until false ;
2313: LD_INT 0
2315: IFFALSE 2097
// end ; end_of_file
2317: PPOPN 8
2319: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2320: LD_VAR 0 1
2324: PPUSH
2325: CALL 54733 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2329: LD_VAR 0 1
2333: PPUSH
2334: CALL 8026 0 1
// end ;
2338: PPOPN 1
2340: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2341: LD_VAR 0 1
2345: PPUSH
2346: CALL 54750 0 1
// end ;
2350: PPOPN 1
2352: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2353: LD_VAR 0 1
2357: PPUSH
2358: CALL 9079 0 1
2362: PPOPN 1
2364: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2365: LD_VAR 0 1
2369: PPUSH
2370: LD_VAR 0 2
2374: PPUSH
2375: CALL 54791 0 2
2379: PPOPN 2
2381: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2382: LD_VAR 0 1
2386: PPUSH
2387: LD_VAR 0 2
2391: PPUSH
2392: CALL 8832 0 2
2396: PPOPN 2
2398: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2399: LD_VAR 0 1
2403: PPUSH
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_VAR 0 3
2413: PPUSH
2414: CALL 9132 0 3
2418: PPOPN 3
2420: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2421: LD_VAR 0 1
2425: PPUSH
2426: LD_VAR 0 2
2430: PPUSH
2431: LD_VAR 0 3
2435: PPUSH
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_VAR 0 5
2445: PPUSH
2446: CALL 9816 0 5
2450: PPOPN 5
2452: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2453: LD_VAR 0 1
2457: PPUSH
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_VAR 0 3
2467: PPUSH
2468: LD_VAR 0 4
2472: PPUSH
2473: CALL 9919 0 4
2477: PPOPN 4
2479: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
// disable ( mpActive ) ;
2484: LD_INT 100
2486: DISABLE_MARKED
// disable ( mpWin ) ;
2487: LD_INT 101
2489: DISABLE_MARKED
// disable ( mpLose ) ;
2490: LD_INT 102
2492: DISABLE_MARKED
// mpGameType := 0 ;
2493: LD_ADDR_EXP 3
2497: PUSH
2498: LD_INT 0
2500: ST_TO_ADDR
// mpGameSettings := [ ] ;
2501: LD_ADDR_EXP 6
2505: PUSH
2506: EMPTY
2507: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
2508: LD_ADDR_EXP 4
2512: PUSH
2513: EMPTY
2514: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
2515: LD_ADDR_EXP 5
2519: PUSH
2520: EMPTY
2521: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
2522: LD_ADDR_EXP 29
2526: PUSH
2527: LD_INT 2
2529: PUSH
2530: LD_INT 2
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// mpOilDeposits := [ ] ;
2537: LD_ADDR_EXP 12
2541: PUSH
2542: EMPTY
2543: ST_TO_ADDR
// mpSibDeposits := [ ] ;
2544: LD_ADDR_EXP 13
2548: PUSH
2549: EMPTY
2550: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
2551: LD_ADDR_EXP 42
2555: PUSH
2556: EMPTY
2557: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
2558: LD_ADDR_EXP 43
2562: PUSH
2563: EMPTY
2564: ST_TO_ADDR
// mpDepots := [ ] ;
2565: LD_ADDR_EXP 14
2569: PUSH
2570: EMPTY
2571: ST_TO_ADDR
// mpBuildings := [ ] ;
2572: LD_ADDR_EXP 17
2576: PUSH
2577: EMPTY
2578: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
2579: LD_ADDR_EXP 18
2583: PUSH
2584: EMPTY
2585: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
2586: LD_ADDR_EXP 19
2590: PUSH
2591: EMPTY
2592: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
2593: LD_ADDR_EXP 20
2597: PUSH
2598: EMPTY
2599: ST_TO_ADDR
// mpStartingResources := [ ] ;
2600: LD_ADDR_EXP 15
2604: PUSH
2605: EMPTY
2606: ST_TO_ADDR
// mpStartPos := [ ] ;
2607: LD_ADDR_EXP 21
2611: PUSH
2612: EMPTY
2613: ST_TO_ADDR
// mpBattleFlag := - 1 ;
2614: LD_ADDR_EXP 22
2618: PUSH
2619: LD_INT 1
2621: NEG
2622: ST_TO_ADDR
// mpBattleFlags := [ ] ;
2623: LD_ADDR_EXP 23
2627: PUSH
2628: EMPTY
2629: ST_TO_ADDR
// mpApemans := [ ] ;
2630: LD_ADDR_EXP 30
2634: PUSH
2635: EMPTY
2636: ST_TO_ADDR
// mpApemansArea := [ ] ;
2637: LD_ADDR_EXP 31
2641: PUSH
2642: EMPTY
2643: ST_TO_ADDR
// mpRespawn := [ ] ;
2644: LD_ADDR_EXP 33
2648: PUSH
2649: EMPTY
2650: ST_TO_ADDR
// mpKingArea := 0 ;
2651: LD_ADDR_EXP 34
2655: PUSH
2656: LD_INT 0
2658: ST_TO_ADDR
// mpPoints := [ ] ;
2659: LD_ADDR_EXP 35
2663: PUSH
2664: EMPTY
2665: ST_TO_ADDR
// mpVehicles := 0 ;
2666: LD_ADDR_EXP 36
2670: PUSH
2671: LD_INT 0
2673: ST_TO_ADDR
// mpShipments := 0 ;
2674: LD_ADDR_EXP 27
2678: PUSH
2679: LD_INT 0
2681: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2682: LD_ADDR_EXP 40
2686: PUSH
2687: EMPTY
2688: PUSH
2689: EMPTY
2690: PUSH
2691: EMPTY
2692: PUSH
2693: EMPTY
2694: PUSH
2695: EMPTY
2696: PUSH
2697: EMPTY
2698: PUSH
2699: EMPTY
2700: PUSH
2701: EMPTY
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
2713: LD_ADDR_EXP 32
2717: PUSH
2718: EMPTY
2719: PUSH
2720: EMPTY
2721: PUSH
2722: EMPTY
2723: PUSH
2724: EMPTY
2725: PUSH
2726: EMPTY
2727: PUSH
2728: EMPTY
2729: PUSH
2730: EMPTY
2731: PUSH
2732: EMPTY
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
2744: LD_ADDR_EXP 41
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 0
2754: PUSH
2755: LD_INT 0
2757: PUSH
2758: LD_INT 0
2760: PUSH
2761: LD_INT 0
2763: PUSH
2764: LD_INT 0
2766: PUSH
2767: LD_INT 0
2769: PUSH
2770: LD_INT 0
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: ST_TO_ADDR
// mpEmissions := 0 ;
2783: LD_ADDR_EXP 37
2787: PUSH
2788: LD_INT 0
2790: ST_TO_ADDR
// mpTeleports := 0 ;
2791: LD_ADDR_EXP 44
2795: PUSH
2796: LD_INT 0
2798: ST_TO_ADDR
// mpArtifacts := 0 ;
2799: LD_ADDR_EXP 45
2803: PUSH
2804: LD_INT 0
2806: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
2807: LD_ADDR_EXP 46
2811: PUSH
2812: LD_INT 0
2814: ST_TO_ADDR
// mpPeopleSkill := 3 ;
2815: LD_ADDR_EXP 25
2819: PUSH
2820: LD_INT 3
2822: ST_TO_ADDR
// mpPeopleAmount := 15 ;
2823: LD_ADDR_EXP 24
2827: PUSH
2828: LD_INT 15
2830: ST_TO_ADDR
// mpDisplayStrings := 0 ;
2831: LD_ADDR_EXP 38
2835: PUSH
2836: LD_INT 0
2838: ST_TO_ADDR
// mpGameActive := false ;
2839: LD_ADDR_EXP 39
2843: PUSH
2844: LD_INT 0
2846: ST_TO_ADDR
// mpBlockRespThread := false ;
2847: LD_ADDR_EXP 47
2851: PUSH
2852: LD_INT 0
2854: ST_TO_ADDR
// for i := 1 to 32 do
2855: LD_ADDR_VAR 0 2
2859: PUSH
2860: DOUBLE
2861: LD_INT 1
2863: DEC
2864: ST_TO_ADDR
2865: LD_INT 32
2867: PUSH
2868: FOR_TO
2869: IFFALSE 2896
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
2871: LD_ADDR_EXP 6
2875: PUSH
2876: LD_EXP 6
2880: PPUSH
2881: LD_VAR 0 2
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL_OW 1
2893: ST_TO_ADDR
2894: GO 2868
2896: POP
2897: POP
// end ;
2898: LD_VAR 0 1
2902: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
2919: LD_ADDR_VAR 0 14
2923: PUSH
2924: LD_INT 1
2926: PUSH
2927: LD_INT 2
2929: PUSH
2930: LD_INT 3
2932: PUSH
2933: LD_INT 5
2935: PUSH
2936: LD_INT 6
2938: PUSH
2939: LD_INT 7
2941: PUSH
2942: LD_INT 8
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: ST_TO_ADDR
// for i in gameTypes do
2954: LD_ADDR_VAR 0 2
2958: PUSH
2959: LD_VAR 0 14
2963: PUSH
2964: FOR_IN
2965: IFFALSE 2974
// disable ( i ) ;
2967: LD_VAR 0 2
2971: DISABLE_MARKED
2972: GO 2964
2974: POP
2975: POP
// if Multiplayer then
2976: LD_OWVAR 4
2980: IFFALSE 3164
// begin mpGameType := mp_game_type ;
2982: LD_ADDR_EXP 3
2986: PUSH
2987: LD_OWVAR 6
2991: ST_TO_ADDR
// your_side := mp_player_side ;
2992: LD_ADDR_OWVAR 2
2996: PUSH
2997: LD_OWVAR 7
3001: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3002: LD_ADDR_EXP 7
3006: PUSH
3007: LD_OWVAR 17
3011: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3012: LD_ADDR_EXP 8
3016: PUSH
3017: LD_OWVAR 15
3021: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3022: LD_ADDR_EXP 9
3026: PUSH
3027: LD_OWVAR 16
3031: ST_TO_ADDR
// mpTeams := mp_teams ;
3032: LD_ADDR_EXP 10
3036: PUSH
3037: LD_OWVAR 12
3041: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: DOUBLE
3048: LD_INT 1
3050: DEC
3051: ST_TO_ADDR
3052: LD_EXP 4
3056: PPUSH
3057: CALL 13240 0 1
3061: PUSH
3062: FOR_TO
3063: IFFALSE 3139
// begin setting := mpGameSettingsKeys [ i ] ;
3065: LD_ADDR_VAR 0 12
3069: PUSH
3070: LD_EXP 4
3074: PUSH
3075: LD_VAR 0 2
3079: ARRAY
3080: ST_TO_ADDR
// if setting then
3081: LD_VAR 0 12
3085: IFFALSE 3137
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3087: LD_ADDR_EXP 6
3091: PUSH
3092: LD_EXP 6
3096: PPUSH
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_EXP 5
3106: PUSH
3107: LD_VAR 0 2
3111: ARRAY
3112: PUSH
3113: LD_VAR 0 2
3117: PUSH
3118: LD_INT 1
3120: MINUS
3121: PPUSH
3122: CALL_OW 426
3126: PUSH
3127: LD_INT 1
3129: PLUS
3130: ARRAY
3131: PPUSH
3132: CALL_OW 1
3136: ST_TO_ADDR
// end ;
3137: GO 3062
3139: POP
3140: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3141: LD_ADDR_EXP 11
3145: PUSH
3146: LD_EXP 8
3150: PUSH
3151: LD_INT 0
3153: PUSH
3154: EMPTY
3155: LIST
3156: DIFF
3157: PUSH
3158: LD_INT 1
3160: GREATER
3161: ST_TO_ADDR
// end else
3162: GO 3164
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3164: LD_EXP 3
3168: PPUSH
3169: CALL 806 0 1
// if Count ( mpMarkedAreas ) then
3173: LD_EXP 18
3177: PPUSH
3178: CALL 13240 0 1
3182: IFFALSE 3213
// begin for i in mpMarkedAreas do
3184: LD_ADDR_VAR 0 2
3188: PUSH
3189: LD_EXP 18
3193: PUSH
3194: FOR_IN
3195: IFFALSE 3211
// SetAreaMapShow ( i , 0 ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 424
3209: GO 3194
3211: POP
3212: POP
// end ; for i := 1 to 8 do
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: DOUBLE
3219: LD_INT 1
3221: DEC
3222: ST_TO_ADDR
3223: LD_INT 8
3225: PUSH
3226: FOR_TO
3227: IFFALSE 4686
// begin if not mpSidePositions [ i ] then
3229: LD_EXP 7
3233: PUSH
3234: LD_VAR 0 2
3238: ARRAY
3239: NOT
3240: IFFALSE 3244
// continue ;
3242: GO 3226
// side := i ;
3244: LD_ADDR_VAR 0 7
3248: PUSH
3249: LD_VAR 0 2
3253: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
3254: LD_ADDR_VAR 0 9
3258: PUSH
3259: LD_EXP 9
3263: PUSH
3264: LD_VAR 0 2
3268: ARRAY
3269: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
3270: LD_ADDR_VAR 0 8
3274: PUSH
3275: LD_EXP 7
3279: PUSH
3280: LD_VAR 0 2
3284: ARRAY
3285: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
3286: LD_EXP 12
3290: PPUSH
3291: CALL 13240 0 1
3295: IFFALSE 3372
// begin for j in mpOilDeposits [ pos ] do
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: LD_EXP 12
3306: PUSH
3307: LD_VAR 0 8
3311: ARRAY
3312: PUSH
3313: FOR_IN
3314: IFFALSE 3370
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
3316: LD_VAR 0 3
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: PPUSH
3325: LD_VAR 0 3
3329: PUSH
3330: LD_INT 2
3332: ARRAY
3333: PPUSH
3334: LD_INT 2
3336: PPUSH
3337: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3341: LD_VAR 0 3
3345: PUSH
3346: LD_INT 1
3348: ARRAY
3349: PPUSH
3350: LD_VAR 0 3
3354: PUSH
3355: LD_INT 2
3357: ARRAY
3358: PPUSH
3359: LD_VAR 0 7
3363: PPUSH
3364: CALL_OW 441
// end ;
3368: GO 3313
3370: POP
3371: POP
// end ; if Count ( mpSibDeposits ) then
3372: LD_EXP 13
3376: PPUSH
3377: CALL 13240 0 1
3381: IFFALSE 3458
// begin for j in mpSibDeposits [ pos ] do
3383: LD_ADDR_VAR 0 3
3387: PUSH
3388: LD_EXP 13
3392: PUSH
3393: LD_VAR 0 8
3397: ARRAY
3398: PUSH
3399: FOR_IN
3400: IFFALSE 3456
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
3402: LD_VAR 0 3
3406: PUSH
3407: LD_INT 1
3409: ARRAY
3410: PPUSH
3411: LD_VAR 0 3
3415: PUSH
3416: LD_INT 2
3418: ARRAY
3419: PPUSH
3420: LD_INT 3
3422: PPUSH
3423: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
3427: LD_VAR 0 3
3431: PUSH
3432: LD_INT 1
3434: ARRAY
3435: PPUSH
3436: LD_VAR 0 3
3440: PUSH
3441: LD_INT 2
3443: ARRAY
3444: PPUSH
3445: LD_VAR 0 7
3449: PPUSH
3450: CALL_OW 441
// end ;
3454: GO 3399
3456: POP
3457: POP
// end ; InitBc ;
3458: CALL_OW 21
// InitUc ;
3462: CALL_OW 18
// uc_side := side ;
3466: LD_ADDR_OWVAR 20
3470: PUSH
3471: LD_VAR 0 7
3475: ST_TO_ADDR
// uc_nation := nation ;
3476: LD_ADDR_OWVAR 21
3480: PUSH
3481: LD_VAR 0 9
3485: ST_TO_ADDR
// if mpBattleFlag > - 1 then
3486: LD_EXP 22
3490: PUSH
3491: LD_INT 1
3493: NEG
3494: GREATER
3495: IFFALSE 3654
// begin x := mpStartPos [ pos ] [ 1 ] ;
3497: LD_ADDR_VAR 0 5
3501: PUSH
3502: LD_EXP 21
3506: PUSH
3507: LD_VAR 0 8
3511: ARRAY
3512: PUSH
3513: LD_INT 1
3515: ARRAY
3516: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3517: LD_ADDR_VAR 0 6
3521: PUSH
3522: LD_EXP 21
3526: PUSH
3527: LD_VAR 0 8
3531: ARRAY
3532: PUSH
3533: LD_INT 2
3535: ARRAY
3536: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3537: LD_VAR 0 5
3541: PPUSH
3542: LD_VAR 0 6
3546: PPUSH
3547: LD_INT 12
3549: PPUSH
3550: LD_INT 2
3552: PPUSH
3553: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
3557: LD_ADDR_EXP 23
3561: PUSH
3562: LD_EXP 23
3566: PPUSH
3567: LD_VAR 0 7
3571: PPUSH
3572: LD_VAR 0 7
3576: PPUSH
3577: LD_VAR 0 5
3581: PPUSH
3582: LD_VAR 0 6
3586: PPUSH
3587: LD_INT 1
3589: PUSH
3590: LD_INT 100
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 2
3599: PUSH
3600: LD_INT 70
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: LD_INT 3
3609: PUSH
3610: LD_INT 40
3612: PUSH
3613: EMPTY
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 10
3619: PUSH
3620: LD_INT 25
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: PUSH
3627: LD_INT 20
3629: PUSH
3630: LD_INT 100
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PPUSH
3644: CALL_OW 418
3648: PPUSH
3649: CALL_OW 1
3653: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
3654: LD_EXP 14
3658: PPUSH
3659: CALL 13240 0 1
3663: IFFALSE 3862
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
3665: LD_EXP 3
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: LD_INT 8
3675: PUSH
3676: LD_INT 6
3678: PUSH
3679: LD_INT 7
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: IN
3688: IFFALSE 3708
// begin bc_level := 10 ;
3690: LD_ADDR_OWVAR 43
3694: PUSH
3695: LD_INT 10
3697: ST_TO_ADDR
// bc_type := b_warehouse ;
3698: LD_ADDR_OWVAR 42
3702: PUSH
3703: LD_INT 1
3705: ST_TO_ADDR
// end else
3706: GO 3724
// begin bc_level := 0 ;
3708: LD_ADDR_OWVAR 43
3712: PUSH
3713: LD_INT 0
3715: ST_TO_ADDR
// bc_type := b_depot ;
3716: LD_ADDR_OWVAR 42
3720: PUSH
3721: LD_INT 0
3723: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_EXP 14
3733: PUSH
3734: LD_VAR 0 8
3738: ARRAY
3739: PUSH
3740: LD_INT 1
3742: ARRAY
3743: PPUSH
3744: LD_EXP 14
3748: PUSH
3749: LD_VAR 0 8
3753: ARRAY
3754: PUSH
3755: LD_INT 2
3757: ARRAY
3758: PPUSH
3759: LD_EXP 14
3763: PUSH
3764: LD_VAR 0 8
3768: ARRAY
3769: PUSH
3770: LD_INT 3
3772: ARRAY
3773: PPUSH
3774: CALL_OW 47
3778: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
3779: LD_VAR 0 4
3783: PPUSH
3784: LD_STRING @
3786: PUSH
3787: LD_VAR 0 7
3791: STR
3792: PPUSH
3793: CALL_OW 500
// if Count ( mpStartingResources ) then
3797: LD_EXP 15
3801: PPUSH
3802: CALL 13240 0 1
3806: IFFALSE 3860
// begin for j := 1 to mpStartingResources do
3808: LD_ADDR_VAR 0 3
3812: PUSH
3813: DOUBLE
3814: LD_INT 1
3816: DEC
3817: ST_TO_ADDR
3818: LD_EXP 15
3822: PUSH
3823: FOR_TO
3824: IFFALSE 3858
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
3826: LD_VAR 0 4
3830: PPUSH
3831: CALL_OW 274
3835: PPUSH
3836: LD_VAR 0 3
3840: PPUSH
3841: LD_EXP 15
3845: PUSH
3846: LD_VAR 0 3
3850: ARRAY
3851: PPUSH
3852: CALL_OW 277
3856: GO 3823
3858: POP
3859: POP
// end ; end else
3860: GO 4069
// if Count ( mpStartingResources ) then
3862: LD_EXP 15
3866: PPUSH
3867: CALL 13240 0 1
3871: IFFALSE 4069
// begin x := mpStartPos [ pos ] [ 1 ] ;
3873: LD_ADDR_VAR 0 5
3877: PUSH
3878: LD_EXP 21
3882: PUSH
3883: LD_VAR 0 8
3887: ARRAY
3888: PUSH
3889: LD_INT 1
3891: ARRAY
3892: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
3893: LD_ADDR_VAR 0 6
3897: PUSH
3898: LD_EXP 21
3902: PUSH
3903: LD_VAR 0 8
3907: ARRAY
3908: PUSH
3909: LD_INT 2
3911: ARRAY
3912: ST_TO_ADDR
// for j := 1 to mpStartingResources do
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: DOUBLE
3919: LD_INT 1
3921: DEC
3922: ST_TO_ADDR
3923: LD_EXP 15
3927: PUSH
3928: FOR_TO
3929: IFFALSE 4067
// begin resources := mpStartingResources [ j ] ;
3931: LD_ADDR_VAR 0 13
3935: PUSH
3936: LD_EXP 15
3940: PUSH
3941: LD_VAR 0 3
3945: ARRAY
3946: ST_TO_ADDR
// if resources = 0 then
3947: LD_VAR 0 13
3951: PUSH
3952: LD_INT 0
3954: EQUAL
3955: IFFALSE 3959
// continue ;
3957: GO 3928
// repeat if resources >= 50 then
3959: LD_VAR 0 13
3963: PUSH
3964: LD_INT 50
3966: GREATEREQUAL
3967: IFFALSE 4013
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
3969: LD_VAR 0 3
3973: PPUSH
3974: LD_INT 5
3976: PPUSH
3977: LD_VAR 0 5
3981: PPUSH
3982: LD_VAR 0 6
3986: PPUSH
3987: LD_INT 6
3989: PPUSH
3990: LD_INT 0
3992: PPUSH
3993: CALL_OW 60
// resources := resources - 50 ;
3997: LD_ADDR_VAR 0 13
4001: PUSH
4002: LD_VAR 0 13
4006: PUSH
4007: LD_INT 50
4009: MINUS
4010: ST_TO_ADDR
// end else
4011: GO 4055
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4013: LD_VAR 0 3
4017: PPUSH
4018: LD_VAR 0 13
4022: PUSH
4023: LD_INT 10
4025: DIV
4026: PPUSH
4027: LD_VAR 0 5
4031: PPUSH
4032: LD_VAR 0 6
4036: PPUSH
4037: LD_INT 6
4039: PPUSH
4040: LD_INT 0
4042: PPUSH
4043: CALL_OW 60
// resources := 0 ;
4047: LD_ADDR_VAR 0 13
4051: PUSH
4052: LD_INT 0
4054: ST_TO_ADDR
// end ; until resources <= 0 ;
4055: LD_VAR 0 13
4059: PUSH
4060: LD_INT 0
4062: LESSEQUAL
4063: IFFALSE 3959
// end ;
4065: GO 3928
4067: POP
4068: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
4069: LD_EXP 17
4073: PPUSH
4074: CALL 13240 0 1
4078: IFFALSE 4098
4080: PUSH
4081: LD_EXP 3
4085: PUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 8
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: IN
4096: NOT
4097: AND
4098: IFFALSE 4176
// begin for j in mpBuildings [ pos ] do
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: LD_EXP 17
4109: PUSH
4110: LD_VAR 0 8
4114: ARRAY
4115: PUSH
4116: FOR_IN
4117: IFFALSE 4174
// begin bc_level := 0 ;
4119: LD_ADDR_OWVAR 43
4123: PUSH
4124: LD_INT 0
4126: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4127: LD_ADDR_OWVAR 42
4131: PUSH
4132: LD_VAR 0 3
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4141: LD_VAR 0 3
4145: PUSH
4146: LD_INT 2
4148: ARRAY
4149: PPUSH
4150: LD_VAR 0 3
4154: PUSH
4155: LD_INT 3
4157: ARRAY
4158: PPUSH
4159: LD_VAR 0 3
4163: PUSH
4164: LD_INT 4
4166: ARRAY
4167: PPUSH
4168: CALL_OW 47
// end ;
4172: GO 4116
4174: POP
4175: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4176: LD_EXP 26
4180: IFFALSE 4200
4182: PUSH
4183: LD_INT 20
4185: PPUSH
4186: LD_VAR 0 7
4190: PPUSH
4191: CALL_OW 321
4195: PUSH
4196: LD_INT 1
4198: EQUAL
4199: AND
4200: IFFALSE 4217
// SetTech ( tech_SibDet , side , state_researched ) ;
4202: LD_INT 20
4204: PPUSH
4205: LD_VAR 0 7
4209: PPUSH
4210: LD_INT 2
4212: PPUSH
4213: CALL_OW 322
// if not mpArtifacts then
4217: LD_EXP 45
4221: NOT
4222: IFFALSE 4239
// SetTech ( tech_artifact , side , state_disabled ) ;
4224: LD_INT 24
4226: PPUSH
4227: LD_VAR 0 7
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL_OW 322
// if mpSibBomb = 1 then
4239: LD_EXP 28
4243: PUSH
4244: LD_INT 1
4246: EQUAL
4247: IFFALSE 4266
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4249: LD_INT 25
4251: PPUSH
4252: LD_VAR 0 7
4256: PPUSH
4257: LD_INT 1
4259: PPUSH
4260: CALL_OW 322
// end else
4264: GO 4281
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4266: LD_INT 25
4268: PPUSH
4269: LD_VAR 0 7
4273: PPUSH
4274: LD_INT 0
4276: PPUSH
4277: CALL_OW 322
// end ; if mpVehicles then
4281: LD_EXP 36
4285: IFFALSE 4384
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
4287: LD_ADDR_VAR 0 3
4291: PUSH
4292: LD_VAR 0 7
4296: PPUSH
4297: LD_VAR 0 9
4301: PPUSH
4302: LD_EXP 36
4306: PPUSH
4307: CALL 5643 0 3
4311: PUSH
4312: FOR_IN
4313: IFFALSE 4382
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 0
4322: PPUSH
4323: LD_INT 5
4325: PPUSH
4326: CALL_OW 12
4330: PPUSH
4331: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4335: LD_VAR 0 3
4339: PPUSH
4340: LD_EXP 21
4344: PUSH
4345: LD_VAR 0 8
4349: ARRAY
4350: PUSH
4351: LD_INT 1
4353: ARRAY
4354: PPUSH
4355: LD_EXP 21
4359: PUSH
4360: LD_VAR 0 8
4364: ARRAY
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 12
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 50
// end ;
4380: GO 4312
4382: POP
4383: POP
// end ; uc_nation := nation ;
4384: LD_ADDR_OWVAR 21
4388: PUSH
4389: LD_VAR 0 9
4393: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
4394: LD_EXP 3
4398: PUSH
4399: LD_INT 6
4401: PUSH
4402: LD_INT 7
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: IN
4409: IFFALSE 4434
4411: PUSH
4412: LD_EXP 7
4416: PUSH
4417: LD_VAR 0 2
4421: ARRAY
4422: PUSH
4423: LD_INT 1
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: IN
4433: AND
4434: IFFALSE 4482
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
4436: LD_ADDR_VAR 0 11
4440: PUSH
4441: LD_VAR 0 7
4445: PPUSH
4446: LD_VAR 0 9
4450: PPUSH
4451: LD_EXP 24
4455: PUSH
4456: LD_EXP 24
4460: PUSH
4461: LD_INT 2
4463: DIV
4464: PLUS
4465: PPUSH
4466: LD_EXP 25
4470: PUSH
4471: LD_INT 1
4473: PLUS
4474: PPUSH
4475: CALL 5098 0 4
4479: ST_TO_ADDR
4480: GO 4512
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
4482: LD_ADDR_VAR 0 11
4486: PUSH
4487: LD_VAR 0 7
4491: PPUSH
4492: LD_VAR 0 9
4496: PPUSH
4497: LD_EXP 24
4501: PPUSH
4502: LD_EXP 25
4506: PPUSH
4507: CALL 5098 0 4
4511: ST_TO_ADDR
// for j in team do
4512: LD_ADDR_VAR 0 3
4516: PUSH
4517: LD_VAR 0 11
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4572
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_EXP 21
4534: PUSH
4535: LD_VAR 0 8
4539: ARRAY
4540: PUSH
4541: LD_INT 1
4543: ARRAY
4544: PPUSH
4545: LD_EXP 21
4549: PUSH
4550: LD_VAR 0 8
4554: ARRAY
4555: PUSH
4556: LD_INT 2
4558: ARRAY
4559: PPUSH
4560: LD_INT 12
4562: PPUSH
4563: LD_INT 0
4565: PPUSH
4566: CALL_OW 50
4570: GO 4522
4572: POP
4573: POP
// if mpApemans then
4574: LD_EXP 30
4578: IFFALSE 4684
// begin for j := 1 to mpApemans do
4580: LD_ADDR_VAR 0 3
4584: PUSH
4585: DOUBLE
4586: LD_INT 1
4588: DEC
4589: ST_TO_ADDR
4590: LD_EXP 30
4594: PUSH
4595: FOR_TO
4596: IFFALSE 4682
// begin PrepareApeman ( - 5 ) ;
4598: LD_INT 5
4600: NEG
4601: PPUSH
4602: CALL 45343 0 1
// ape := CreateHuman ;
4606: LD_ADDR_VAR 0 10
4610: PUSH
4611: CALL_OW 44
4615: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
4616: LD_ADDR_EXP 32
4620: PUSH
4621: LD_EXP 32
4625: PPUSH
4626: LD_VAR 0 8
4630: PPUSH
4631: LD_EXP 32
4635: PUSH
4636: LD_VAR 0 8
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 10
4646: PPUSH
4647: CALL 49216 0 2
4651: PPUSH
4652: CALL_OW 1
4656: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
4657: LD_VAR 0 10
4661: PPUSH
4662: LD_EXP 31
4666: PUSH
4667: LD_VAR 0 8
4671: ARRAY
4672: PPUSH
4673: LD_INT 0
4675: PPUSH
4676: CALL_OW 49
// end ;
4680: GO 4595
4682: POP
4683: POP
// end ; end ;
4684: GO 3226
4686: POP
4687: POP
// if not mpTeamGame then
4688: LD_EXP 11
4692: NOT
4693: IFFALSE 4791
// begin for i := 1 to 8 do
4695: LD_ADDR_VAR 0 2
4699: PUSH
4700: DOUBLE
4701: LD_INT 1
4703: DEC
4704: ST_TO_ADDR
4705: LD_INT 8
4707: PUSH
4708: FOR_TO
4709: IFFALSE 4787
// for j := 1 to 8 do
4711: LD_ADDR_VAR 0 3
4715: PUSH
4716: DOUBLE
4717: LD_INT 1
4719: DEC
4720: ST_TO_ADDR
4721: LD_INT 8
4723: PUSH
4724: FOR_TO
4725: IFFALSE 4783
// if i <> j then
4727: LD_VAR 0 2
4731: PUSH
4732: LD_VAR 0 3
4736: NONEQUAL
4737: IFFALSE 4761
// SetAttitude ( i , j , att_neutral , true ) else
4739: LD_VAR 0 2
4743: PPUSH
4744: LD_VAR 0 3
4748: PPUSH
4749: LD_INT 0
4751: PPUSH
4752: LD_INT 1
4754: PPUSH
4755: CALL_OW 80
4759: GO 4781
// SetAttitude ( i , j , att_friend , true ) ;
4761: LD_VAR 0 2
4765: PPUSH
4766: LD_VAR 0 3
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: LD_INT 1
4776: PPUSH
4777: CALL_OW 80
4781: GO 4724
4783: POP
4784: POP
4785: GO 4708
4787: POP
4788: POP
// end else
4789: GO 4966
// begin if mpSharedVision then
4791: LD_EXP 16
4795: IFFALSE 4860
// begin for i in mpTeams do
4797: LD_ADDR_VAR 0 2
4801: PUSH
4802: LD_EXP 10
4806: PUSH
4807: FOR_IN
4808: IFFALSE 4858
// for j := 2 to i do
4810: LD_ADDR_VAR 0 3
4814: PUSH
4815: DOUBLE
4816: LD_INT 2
4818: DEC
4819: ST_TO_ADDR
4820: LD_VAR 0 2
4824: PUSH
4825: FOR_TO
4826: IFFALSE 4854
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4828: LD_VAR 0 2
4832: PUSH
4833: LD_VAR 0 3
4837: ARRAY
4838: PPUSH
4839: LD_VAR 0 2
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: CALL_OW 343
4852: GO 4825
4854: POP
4855: POP
4856: GO 4807
4858: POP
4859: POP
// end ; for i := 1 to 8 do
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: DOUBLE
4866: LD_INT 1
4868: DEC
4869: ST_TO_ADDR
4870: LD_INT 8
4872: PUSH
4873: FOR_TO
4874: IFFALSE 4964
// for j := 1 to 8 do
4876: LD_ADDR_VAR 0 3
4880: PUSH
4881: DOUBLE
4882: LD_INT 1
4884: DEC
4885: ST_TO_ADDR
4886: LD_INT 8
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4960
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
4892: LD_EXP 8
4896: PUSH
4897: LD_VAR 0 2
4901: ARRAY
4902: PUSH
4903: LD_EXP 8
4907: PUSH
4908: LD_VAR 0 3
4912: ARRAY
4913: EQUAL
4914: IFFALSE 4938
// SetAttitude ( i , j , att_friend , true ) else
4916: LD_VAR 0 2
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 1
4928: PPUSH
4929: LD_INT 1
4931: PPUSH
4932: CALL_OW 80
4936: GO 4958
// SetAttitude ( i , j , att_enemy , true ) ;
4938: LD_VAR 0 2
4942: PPUSH
4943: LD_VAR 0 3
4947: PPUSH
4948: LD_INT 2
4950: PPUSH
4951: LD_INT 1
4953: PPUSH
4954: CALL_OW 80
4958: GO 4889
4960: POP
4961: POP
4962: GO 4873
4964: POP
4965: POP
// end ; music_nat := mpSideNations [ your_side ] ;
4966: LD_ADDR_OWVAR 71
4970: PUSH
4971: LD_EXP 9
4975: PUSH
4976: LD_OWVAR 2
4980: ARRAY
4981: ST_TO_ADDR
// if IAmSpec then
4982: CALL_OW 531
4986: IFFALSE 5027
// begin FogOff ( true ) ;
4988: LD_INT 1
4990: PPUSH
4991: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
4995: LD_EXP 29
4999: PUSH
5000: LD_INT 1
5002: ARRAY
5003: PUSH
5004: LD_INT 2
5006: DIV
5007: PPUSH
5008: LD_EXP 29
5012: PUSH
5013: LD_INT 2
5015: ARRAY
5016: PUSH
5017: LD_INT 2
5019: DIV
5020: PPUSH
5021: CALL_OW 86
// end else
5025: GO 5073
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5027: LD_EXP 21
5031: PUSH
5032: LD_EXP 7
5036: PUSH
5037: LD_OWVAR 2
5041: ARRAY
5042: ARRAY
5043: PUSH
5044: LD_INT 1
5046: ARRAY
5047: PPUSH
5048: LD_EXP 21
5052: PUSH
5053: LD_EXP 7
5057: PUSH
5058: LD_OWVAR 2
5062: ARRAY
5063: ARRAY
5064: PUSH
5065: LD_INT 2
5067: ARRAY
5068: PPUSH
5069: CALL_OW 86
// end ; BeginBuildUp ;
5073: CALL 6176 0 0
// enable ( mpActive ) ;
5077: LD_INT 100
5079: ENABLE_MARKED
// enable ( mpGameType ) ;
5080: LD_EXP 3
5084: ENABLE_MARKED
// mpGameActive := true ;
5085: LD_ADDR_EXP 39
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// end ;
5093: LD_VAR 0 1
5097: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5098: LD_INT 0
5100: PPUSH
5101: PPUSH
5102: PPUSH
5103: PPUSH
5104: PPUSH
// result := [ ] ;
5105: LD_ADDR_VAR 0 5
5109: PUSH
5110: EMPTY
5111: ST_TO_ADDR
// class := class_soldier ;
5112: LD_ADDR_VAR 0 8
5116: PUSH
5117: LD_INT 1
5119: ST_TO_ADDR
// uc_side := side ;
5120: LD_ADDR_OWVAR 20
5124: PUSH
5125: LD_VAR 0 1
5129: ST_TO_ADDR
// uc_nation := nation ;
5130: LD_ADDR_OWVAR 21
5134: PUSH
5135: LD_VAR 0 2
5139: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5140: LD_ADDR_OWVAR 26
5144: PUSH
5145: LD_OWVAR 19
5149: PUSH
5150: LD_VAR 0 1
5154: ARRAY
5155: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5156: LD_INT 1
5158: PPUSH
5159: LD_INT 2
5161: PPUSH
5162: CALL_OW 12
5166: PPUSH
5167: LD_VAR 0 8
5171: PPUSH
5172: LD_VAR 0 4
5176: PUSH
5177: LD_INT 2
5179: PLUS
5180: PPUSH
5181: CALL_OW 380
// hc_importance := 105 ;
5185: LD_ADDR_OWVAR 32
5189: PUSH
5190: LD_INT 105
5192: ST_TO_ADDR
// if Multiplayer then
5193: LD_OWVAR 4
5197: IFFALSE 5237
// begin hc_gallery := MULTIAVATARS ;
5199: LD_ADDR_OWVAR 33
5203: PUSH
5204: LD_STRING MULTIAVATARS
5206: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
5207: LD_ADDR_OWVAR 34
5211: PUSH
5212: LD_VAR 0 1
5216: PPUSH
5217: CALL_OW 525
5221: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
5222: LD_ADDR_OWVAR 27
5226: PUSH
5227: LD_VAR 0 1
5231: PPUSH
5232: CALL_OW 526
5236: ST_TO_ADDR
// end ; commander := CreateHuman ;
5237: LD_ADDR_VAR 0 9
5241: PUSH
5242: CALL_OW 44
5246: ST_TO_ADDR
// result := Join ( result , commander ) ;
5247: LD_ADDR_VAR 0 5
5251: PUSH
5252: LD_VAR 0 5
5256: PPUSH
5257: LD_VAR 0 9
5261: PPUSH
5262: CALL 49216 0 2
5266: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
5267: LD_ADDR_EXP 41
5271: PUSH
5272: LD_EXP 41
5276: PPUSH
5277: LD_VAR 0 1
5281: PPUSH
5282: LD_VAR 0 9
5286: PPUSH
5287: CALL_OW 1
5291: ST_TO_ADDR
// if mpTeamPreset then
5292: LD_LOC 1
5296: IFFALSE 5392
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
5298: LD_LOC 1
5302: PUSH
5303: LD_INT 1
5305: ARRAY
5306: PPUSH
5307: LD_VAR 0 5
5311: PUSH
5312: LD_VAR 0 5
5316: ARRAY
5317: PPUSH
5318: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
5322: LD_VAR 0 5
5326: PUSH
5327: LD_VAR 0 5
5331: ARRAY
5332: PPUSH
5333: LD_INT 1
5335: PPUSH
5336: LD_LOC 1
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: CALL_OW 260
5352: PPUSH
5353: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
5357: LD_VAR 0 5
5361: PUSH
5362: LD_VAR 0 5
5366: ARRAY
5367: PPUSH
5368: LD_INT 2
5370: PPUSH
5371: LD_LOC 1
5375: PUSH
5376: LD_INT 1
5378: ARRAY
5379: PPUSH
5380: LD_INT 2
5382: PPUSH
5383: CALL_OW 260
5387: PPUSH
5388: CALL_OW 239
// end ; InitHc_All ( ) ;
5392: CALL_OW 584
// class := 2 ;
5396: LD_ADDR_VAR 0 8
5400: PUSH
5401: LD_INT 2
5403: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
5404: LD_ADDR_VAR 0 6
5408: PUSH
5409: DOUBLE
5410: LD_INT 1
5412: DEC
5413: ST_TO_ADDR
5414: LD_VAR 0 3
5418: PUSH
5419: LD_INT 1
5421: MINUS
5422: PUSH
5423: FOR_TO
5424: IFFALSE 5619
// begin PrepareHuman ( false , class , skill ) ;
5426: LD_INT 0
5428: PPUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 4
5438: PPUSH
5439: CALL_OW 380
// un := CreateHuman ;
5443: LD_ADDR_VAR 0 7
5447: PUSH
5448: CALL_OW 44
5452: ST_TO_ADDR
// result := Join ( result , un ) ;
5453: LD_ADDR_VAR 0 5
5457: PUSH
5458: LD_VAR 0 5
5462: PPUSH
5463: LD_VAR 0 7
5467: PPUSH
5468: CALL 49216 0 2
5472: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
5473: LD_LOC 1
5477: PPUSH
5478: CALL 13240 0 1
5482: PUSH
5483: LD_VAR 0 3
5487: GREATEREQUAL
5488: IFFALSE 5584
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
5490: LD_LOC 1
5494: PUSH
5495: LD_VAR 0 6
5499: PUSH
5500: LD_INT 1
5502: PLUS
5503: ARRAY
5504: PPUSH
5505: LD_VAR 0 7
5509: PPUSH
5510: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
5514: LD_VAR 0 7
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: LD_LOC 1
5526: PUSH
5527: LD_VAR 0 6
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ARRAY
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 260
5544: PPUSH
5545: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
5549: LD_VAR 0 7
5553: PPUSH
5554: LD_INT 2
5556: PPUSH
5557: LD_LOC 1
5561: PUSH
5562: LD_VAR 0 6
5566: PUSH
5567: LD_INT 1
5569: PLUS
5570: ARRAY
5571: PPUSH
5572: LD_INT 2
5574: PPUSH
5575: CALL_OW 260
5579: PPUSH
5580: CALL_OW 239
// end ; class := Inc ( class ) ;
5584: LD_ADDR_VAR 0 8
5588: PUSH
5589: LD_VAR 0 8
5593: PPUSH
5594: CALL 50589 0 1
5598: ST_TO_ADDR
// if class = 5 then
5599: LD_VAR 0 8
5603: PUSH
5604: LD_INT 5
5606: EQUAL
5607: IFFALSE 5617
// class := 1 ;
5609: LD_ADDR_VAR 0 8
5613: PUSH
5614: LD_INT 1
5616: ST_TO_ADDR
// end ;
5617: GO 5423
5619: POP
5620: POP
// if not mpTeamPreset then
5621: LD_LOC 1
5625: NOT
5626: IFFALSE 5638
// mpTeamPreset := result ;
5628: LD_ADDR_LOC 1
5632: PUSH
5633: LD_VAR 0 5
5637: ST_TO_ADDR
// end ;
5638: LD_VAR 0 5
5642: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
5643: LD_INT 0
5645: PPUSH
5646: PPUSH
// result := [ ] ;
5647: LD_ADDR_VAR 0 4
5651: PUSH
5652: EMPTY
5653: ST_TO_ADDR
// if not vehicles then
5654: LD_VAR 0 3
5658: NOT
5659: IFFALSE 5663
// exit ;
5661: GO 5877
// for i := 1 to vehicles [ nation ] do
5663: LD_ADDR_VAR 0 5
5667: PUSH
5668: DOUBLE
5669: LD_INT 1
5671: DEC
5672: ST_TO_ADDR
5673: LD_VAR 0 3
5677: PUSH
5678: LD_VAR 0 2
5682: ARRAY
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5875
// begin uc_side := side ;
5687: LD_ADDR_OWVAR 20
5691: PUSH
5692: LD_VAR 0 1
5696: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
5697: LD_VAR 0 3
5701: PUSH
5702: LD_VAR 0 2
5706: ARRAY
5707: PUSH
5708: LD_VAR 0 5
5712: ARRAY
5713: PPUSH
5714: CALL 13240 0 1
5718: PUSH
5719: LD_INT 4
5721: GREATER
5722: IFFALSE 5752
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
5724: LD_ADDR_OWVAR 21
5728: PUSH
5729: LD_VAR 0 3
5733: PUSH
5734: LD_VAR 0 2
5738: ARRAY
5739: PUSH
5740: LD_VAR 0 5
5744: ARRAY
5745: PUSH
5746: LD_INT 5
5748: ARRAY
5749: ST_TO_ADDR
5750: GO 5762
// uc_nation := nation ;
5752: LD_ADDR_OWVAR 21
5756: PUSH
5757: LD_VAR 0 2
5761: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
5762: LD_VAR 0 3
5766: PUSH
5767: LD_VAR 0 2
5771: ARRAY
5772: PUSH
5773: LD_VAR 0 5
5777: ARRAY
5778: PUSH
5779: LD_INT 1
5781: ARRAY
5782: PPUSH
5783: LD_VAR 0 3
5787: PUSH
5788: LD_VAR 0 2
5792: ARRAY
5793: PUSH
5794: LD_VAR 0 5
5798: ARRAY
5799: PUSH
5800: LD_INT 2
5802: ARRAY
5803: PPUSH
5804: LD_VAR 0 3
5808: PUSH
5809: LD_VAR 0 2
5813: ARRAY
5814: PUSH
5815: LD_VAR 0 5
5819: ARRAY
5820: PUSH
5821: LD_INT 3
5823: ARRAY
5824: PPUSH
5825: LD_VAR 0 3
5829: PUSH
5830: LD_VAR 0 2
5834: ARRAY
5835: PUSH
5836: LD_VAR 0 5
5840: ARRAY
5841: PUSH
5842: LD_INT 4
5844: ARRAY
5845: PPUSH
5846: LD_INT 80
5848: PPUSH
5849: CALL 16036 0 5
// result := Join ( result , CreateVehicle ) ;
5853: LD_ADDR_VAR 0 4
5857: PUSH
5858: LD_VAR 0 4
5862: PPUSH
5863: CALL_OW 45
5867: PPUSH
5868: CALL 49216 0 2
5872: ST_TO_ADDR
// end ;
5873: GO 5684
5875: POP
5876: POP
// end ;
5877: LD_VAR 0 4
5881: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
5882: LD_INT 0
5884: PPUSH
5885: PPUSH
// for i in mpBattleFlags do
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_EXP 23
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5974
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
5899: LD_VAR 0 3
5903: PPUSH
5904: LD_INT 1
5906: PUSH
5907: LD_VAR 0 1
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 2
5918: PUSH
5919: LD_VAR 0 1
5923: PUSH
5924: LD_REAL  7.00000000000000E-0001
5927: MUL
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: LD_VAR 0 1
5940: PUSH
5941: LD_REAL  4.00000000000000E-0001
5944: MUL
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: PUSH
5950: LD_INT 20
5952: PUSH
5953: LD_VAR 0 1
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: PPUSH
5968: CALL_OW 423
5972: GO 5896
5974: POP
5975: POP
// end ;
5976: LD_VAR 0 2
5980: RET
// every 0 0$1 trigger mpActive do var i , strength ;
5981: LD_INT 100
5983: IFFALSE 6078
5985: GO 5987
5987: DISABLE
5988: LD_INT 0
5990: PPUSH
5991: PPUSH
// begin if mpBattleFlag <= 0 then
5992: LD_EXP 22
5996: PUSH
5997: LD_INT 0
5999: LESSEQUAL
6000: IFFALSE 6004
// exit ;
6002: GO 6078
// strength := 100 ;
6004: LD_ADDR_VAR 0 2
6008: PUSH
6009: LD_INT 100
6011: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6012: LD_EXP 22
6016: PPUSH
6017: CALL_OW 67
// strength := Dec ( strength ) ;
6021: LD_ADDR_VAR 0 2
6025: PUSH
6026: LD_VAR 0 2
6030: PPUSH
6031: CALL 50611 0 1
6035: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6036: LD_VAR 0 2
6040: PPUSH
6041: CALL 5882 0 1
// until not strength ;
6045: LD_VAR 0 2
6049: NOT
6050: IFFALSE 6012
// for i in mpBattleFlags do
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: LD_EXP 23
6061: PUSH
6062: FOR_IN
6063: IFFALSE 6076
// KillBattleFlag ( i ) ;
6065: LD_VAR 0 1
6069: PPUSH
6070: CALL_OW 419
6074: GO 6062
6076: POP
6077: POP
// end ;
6078: PPOPN 2
6080: END
// every 0 0$1 marked mpActive do var side , tmp ;
6081: GO 6083
6083: DISABLE
6084: LD_INT 0
6086: PPUSH
6087: PPUSH
// begin if mpSibBomb <= 1 then
6088: LD_EXP 28
6092: PUSH
6093: LD_INT 1
6095: LESSEQUAL
6096: IFFALSE 6100
// exit ;
6098: GO 6173
// tmp := mpSibBomb ;
6100: LD_ADDR_VAR 0 2
6104: PUSH
6105: LD_EXP 28
6109: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6110: LD_INT 35
6112: PPUSH
6113: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6117: LD_ADDR_VAR 0 2
6121: PUSH
6122: LD_VAR 0 2
6126: PUSH
6127: LD_INT 35
6129: MINUS
6130: ST_TO_ADDR
// until not tmp ;
6131: LD_VAR 0 2
6135: NOT
6136: IFFALSE 6110
// for side := 1 to 8 do
6138: LD_ADDR_VAR 0 1
6142: PUSH
6143: DOUBLE
6144: LD_INT 1
6146: DEC
6147: ST_TO_ADDR
6148: LD_INT 8
6150: PUSH
6151: FOR_TO
6152: IFFALSE 6171
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6154: LD_INT 25
6156: PPUSH
6157: LD_VAR 0 1
6161: PPUSH
6162: LD_INT 1
6164: PPUSH
6165: CALL_OW 322
6169: GO 6151
6171: POP
6172: POP
// end ;
6173: PPOPN 2
6175: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6176: LD_INT 0
6178: PPUSH
6179: PPUSH
6180: PPUSH
// mpBuildUpTimeDelay := 0 ;
6181: LD_ADDR_EXP 48
6185: PUSH
6186: LD_INT 0
6188: ST_TO_ADDR
// if not mpBuildUpTime then
6189: LD_EXP 20
6193: NOT
6194: IFFALSE 6198
// exit ;
6196: GO 6387
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6198: LD_ADDR_EXP 48
6202: PUSH
6203: LD_INT 8400
6205: PUSH
6206: LD_INT 2100
6208: PUSH
6209: LD_EXP 20
6213: MUL
6214: PLUS
6215: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
6216: LD_ADDR_EXP 49
6220: PUSH
6221: LD_INT 1
6223: ST_TO_ADDR
// for i := 1 to 8 do
6224: LD_ADDR_VAR 0 2
6228: PUSH
6229: DOUBLE
6230: LD_INT 1
6232: DEC
6233: ST_TO_ADDR
6234: LD_INT 8
6236: PUSH
6237: FOR_TO
6238: IFFALSE 6385
// if mpSidePositions [ i ] then
6240: LD_EXP 7
6244: PUSH
6245: LD_VAR 0 2
6249: ARRAY
6250: IFFALSE 6383
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
6252: LD_EXP 19
6256: PUSH
6257: LD_EXP 7
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: ARRAY
6268: PPUSH
6269: LD_INT 5
6271: PPUSH
6272: CALL_OW 424
// for j := 1 to 8 do
6276: LD_ADDR_VAR 0 3
6280: PUSH
6281: DOUBLE
6282: LD_INT 1
6284: DEC
6285: ST_TO_ADDR
6286: LD_INT 8
6288: PUSH
6289: FOR_TO
6290: IFFALSE 6381
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6292: LD_EXP 7
6296: PUSH
6297: LD_VAR 0 3
6301: ARRAY
6302: IFFALSE 6351
6304: PUSH
6305: LD_EXP 8
6309: PUSH
6310: LD_VAR 0 2
6314: ARRAY
6315: PUSH
6316: LD_EXP 8
6320: PUSH
6321: LD_VAR 0 3
6325: ARRAY
6326: NONEQUAL
6327: IFTRUE 6350
6329: PUSH
6330: LD_EXP 11
6334: NOT
6335: IFFALSE 6349
6337: PUSH
6338: LD_VAR 0 2
6342: PUSH
6343: LD_VAR 0 3
6347: NONEQUAL
6348: AND
6349: OR
6350: AND
6351: IFFALSE 6379
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6353: LD_VAR 0 3
6357: PPUSH
6358: LD_EXP 19
6362: PUSH
6363: LD_EXP 7
6367: PUSH
6368: LD_VAR 0 2
6372: ARRAY
6373: ARRAY
6374: PPUSH
6375: CALL_OW 333
6379: GO 6289
6381: POP
6382: POP
// end ;
6383: GO 6237
6385: POP
6386: POP
// end ;
6387: LD_VAR 0 1
6391: RET
// function EndBuildUp ; var i , j ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
// mpBuildUpTimeActive := false ;
6397: LD_ADDR_EXP 49
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// for i := 1 to 8 do
6405: LD_ADDR_VAR 0 2
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_INT 8
6417: PUSH
6418: FOR_TO
6419: IFFALSE 6566
// if mpSidePositions [ i ] then
6421: LD_EXP 7
6425: PUSH
6426: LD_VAR 0 2
6430: ARRAY
6431: IFFALSE 6564
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
6433: LD_EXP 19
6437: PUSH
6438: LD_EXP 7
6442: PUSH
6443: LD_VAR 0 2
6447: ARRAY
6448: ARRAY
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 424
// for j := 1 to 8 do
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: DOUBLE
6463: LD_INT 1
6465: DEC
6466: ST_TO_ADDR
6467: LD_INT 8
6469: PUSH
6470: FOR_TO
6471: IFFALSE 6562
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
6473: LD_EXP 7
6477: PUSH
6478: LD_VAR 0 3
6482: ARRAY
6483: IFFALSE 6532
6485: PUSH
6486: LD_EXP 8
6490: PUSH
6491: LD_VAR 0 2
6495: ARRAY
6496: PUSH
6497: LD_EXP 8
6501: PUSH
6502: LD_VAR 0 3
6506: ARRAY
6507: NONEQUAL
6508: IFTRUE 6531
6510: PUSH
6511: LD_EXP 11
6515: NOT
6516: IFFALSE 6530
6518: PUSH
6519: LD_VAR 0 2
6523: PUSH
6524: LD_VAR 0 3
6528: NONEQUAL
6529: AND
6530: OR
6531: AND
6532: IFFALSE 6560
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
6534: LD_VAR 0 3
6538: PPUSH
6539: LD_EXP 19
6543: PUSH
6544: LD_EXP 7
6548: PUSH
6549: LD_VAR 0 2
6553: ARRAY
6554: ARRAY
6555: PPUSH
6556: CALL_OW 334
6560: GO 6470
6562: POP
6563: POP
// end ;
6564: GO 6418
6566: POP
6567: POP
// end ;
6568: LD_VAR 0 1
6572: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
6573: LD_EXP 49
6577: IFFALSE 6756
6579: GO 6581
6581: DISABLE
6582: LD_INT 0
6584: PPUSH
6585: PPUSH
// begin for i := 1 to 8 do
6586: LD_ADDR_VAR 0 1
6590: PUSH
6591: DOUBLE
6592: LD_INT 1
6594: DEC
6595: ST_TO_ADDR
6596: LD_INT 8
6598: PUSH
6599: FOR_TO
6600: IFFALSE 6753
// if mpSidePositions [ i ] then
6602: LD_EXP 7
6606: PUSH
6607: LD_VAR 0 1
6611: ARRAY
6612: IFFALSE 6751
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_EXP 19
6623: PUSH
6624: LD_EXP 7
6628: PUSH
6629: LD_VAR 0 1
6633: ARRAY
6634: ARRAY
6635: PPUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 21
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 21
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 22
6666: PUSH
6667: LD_OWVAR 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: PUSH
6685: FOR_IN
6686: IFFALSE 6749
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
6688: LD_EXP 8
6692: PUSH
6693: LD_VAR 0 1
6697: ARRAY
6698: PUSH
6699: LD_EXP 8
6703: PUSH
6704: LD_OWVAR 2
6708: ARRAY
6709: NONEQUAL
6710: IFTRUE 6733
6712: PUSH
6713: LD_EXP 11
6717: NOT
6718: IFFALSE 6732
6720: PUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_OWVAR 2
6730: NONEQUAL
6731: AND
6732: OR
6733: IFFALSE 6747
// ComMoveToArea ( un , BuildUpEscape ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: LD_INT 3
6742: PPUSH
6743: CALL_OW 113
6747: GO 6685
6749: POP
6750: POP
6751: GO 6599
6753: POP
6754: POP
// enable ;
6755: ENABLE
// end ;
6756: PPOPN 2
6758: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
6759: LD_EXP 20
6763: IFFALSE 6813
6765: GO 6767
6767: DISABLE
6768: LD_INT 0
6770: PPUSH
// begin tmp := mpBuildUpTime ;
6771: LD_ADDR_VAR 0 1
6775: PUSH
6776: LD_EXP 20
6780: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6781: LD_INT 35
6783: PPUSH
6784: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6788: LD_ADDR_VAR 0 1
6792: PUSH
6793: LD_VAR 0 1
6797: PUSH
6798: LD_INT 35
6800: MINUS
6801: ST_TO_ADDR
// until not tmp ;
6802: LD_VAR 0 1
6806: NOT
6807: IFFALSE 6781
// EndBuildUp ;
6809: CALL 6392 0 0
// end ;
6813: PPOPN 1
6815: END
// every 0 0$1 trigger mpActive marked mpWin do
6816: LD_INT 100
6818: IFFALSE 6852
6820: GO 6822
6822: DISABLE
// begin if IAmServer then
6823: CALL_OW 518
6827: IFFALSE 6836
// wait ( 0 0$3 ) ;
6829: LD_INT 105
6831: PPUSH
6832: CALL_OW 67
// if Multiplayer then
6836: LD_OWVAR 4
6840: IFFALSE 6848
// YouWinInMultiplayer else
6842: CALL_OW 106
6846: GO 6852
// YouWin ;
6848: CALL_OW 103
// end ;
6852: END
// export function HasPowerByGameType ( gameType , side ) ; begin
6853: LD_INT 0
6855: PPUSH
// result := false ;
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: LD_INT 0
6863: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
6864: LD_VAR 0 1
6868: PUSH
6869: LD_INT 1
6871: DOUBLE
6872: EQUAL
6873: IFTRUE 6895
6875: LD_INT 5
6877: DOUBLE
6878: EQUAL
6879: IFTRUE 6895
6881: LD_INT 6
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6895
6887: LD_INT 7
6889: DOUBLE
6890: EQUAL
6891: IFTRUE 6895
6893: GO 6968
6895: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6896: LD_ADDR_VAR 0 3
6900: PUSH
6901: LD_INT 22
6903: PUSH
6904: LD_VAR 0 2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 2
6915: PUSH
6916: LD_INT 21
6918: PUSH
6919: LD_INT 1
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 33
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: LD_INT 33
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PPUSH
6956: CALL_OW 69
6960: PPUSH
6961: CALL 13240 0 1
6965: ST_TO_ADDR
// end ; GameTypeSurvival :
6966: GO 7364
6968: LD_INT 2
6970: DOUBLE
6971: EQUAL
6972: IFTRUE 6976
6974: GO 7106
6976: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
6977: LD_ADDR_VAR 0 3
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_VAR 0 2
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 0
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 30
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: PPUSH
7031: CALL 13240 0 1
7035: IFFALSE 7103
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_VAR 0 2
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 2
7052: PUSH
7053: LD_INT 21
7055: PUSH
7056: LD_INT 1
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 33
7065: PUSH
7066: LD_INT 3
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 33
7075: PUSH
7076: LD_INT 5
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 69
7097: PPUSH
7098: CALL 13240 0 1
7102: AND
7103: ST_TO_ADDR
// end ; GameTypeSurvivalH :
7104: GO 7364
7106: LD_INT 8
7108: DOUBLE
7109: EQUAL
7110: IFTRUE 7114
7112: GO 7263
7114: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7115: LD_ADDR_VAR 0 3
7119: PUSH
7120: LD_EXP 41
7124: PUSH
7125: LD_VAR 0 2
7129: ARRAY
7130: PPUSH
7131: CALL_OW 300
7135: IFFALSE 7192
7137: PUSH
7138: LD_INT 22
7140: PUSH
7141: LD_VAR 0 2
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 2
7152: PUSH
7153: LD_INT 30
7155: PUSH
7156: LD_INT 0
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 30
7165: PUSH
7166: LD_INT 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PPUSH
7182: CALL_OW 69
7186: PPUSH
7187: CALL 13240 0 1
7191: AND
7192: IFFALSE 7260
7194: PUSH
7195: LD_INT 22
7197: PUSH
7198: LD_VAR 0 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 2
7209: PUSH
7210: LD_INT 21
7212: PUSH
7213: LD_INT 1
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 33
7222: PUSH
7223: LD_INT 3
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 33
7232: PUSH
7233: LD_INT 5
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PPUSH
7250: CALL_OW 69
7254: PPUSH
7255: CALL 13240 0 1
7259: AND
7260: ST_TO_ADDR
// end ; GameTypeKing :
7261: GO 7364
7263: LD_INT 3
7265: DOUBLE
7266: EQUAL
7267: IFTRUE 7271
7269: GO 7363
7271: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
7272: LD_ADDR_VAR 0 3
7276: PUSH
7277: LD_INT 22
7279: PUSH
7280: LD_VAR 0 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 2
7291: PUSH
7292: LD_INT 21
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: PUSH
7302: LD_INT 33
7304: PUSH
7305: LD_INT 3
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 33
7314: PUSH
7315: LD_INT 5
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 69
7336: PPUSH
7337: CALL 13240 0 1
7341: IFFALSE 7360
7343: PUSH
7344: LD_VAR 0 2
7348: PPUSH
7349: CALL 62228 0 1
7353: PUSH
7354: LD_EXP 35
7358: LESS
7359: AND
7360: ST_TO_ADDR
// end ; end ;
7361: GO 7364
7363: POP
// end ;
7364: LD_VAR 0 3
7368: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
7369: LD_INT 100
7371: IFFALSE 7601
7373: GO 7375
7375: DISABLE
7376: LD_INT 0
7378: PPUSH
7379: PPUSH
// begin if Multiplayer then
7380: LD_OWVAR 4
7384: IFFALSE 7392
// SetPlayerSpectator ( ) else
7386: CALL_OW 572
7390: GO 7401
// FogOff ( your_side ) ;
7392: LD_OWVAR 2
7396: PPUSH
7397: CALL_OW 344
// repeat gameIsOn := false ;
7401: LD_ADDR_VAR 0 1
7405: PUSH
7406: LD_INT 0
7408: ST_TO_ADDR
// for i := 1 to 8 do
7409: LD_ADDR_VAR 0 2
7413: PUSH
7414: DOUBLE
7415: LD_INT 1
7417: DEC
7418: ST_TO_ADDR
7419: LD_INT 8
7421: PUSH
7422: FOR_TO
7423: IFFALSE 7553
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7425: LD_EXP 7
7429: PUSH
7430: LD_VAR 0 2
7434: ARRAY
7435: IFFALSE 7448
7437: PUSH
7438: LD_VAR 0 2
7442: PPUSH
7443: CALL_OW 108
7447: AND
7448: IFFALSE 7462
7450: PUSH
7451: LD_VAR 0 2
7455: PUSH
7456: LD_OWVAR 2
7460: NONEQUAL
7461: AND
7462: IFFALSE 7551
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
7464: LD_EXP 8
7468: PUSH
7469: LD_VAR 0 2
7473: ARRAY
7474: NOT
7475: IFTRUE 7523
7477: PUSH
7478: LD_EXP 8
7482: PUSH
7483: LD_VAR 0 2
7487: ARRAY
7488: PUSH
7489: LD_EXP 8
7493: PUSH
7494: LD_OWVAR 2
7498: ARRAY
7499: NONEQUAL
7500: IFFALSE 7522
7502: PUSH
7503: LD_OWVAR 2
7507: PPUSH
7508: LD_VAR 0 2
7512: PPUSH
7513: CALL_OW 81
7517: PUSH
7518: LD_INT 1
7520: NONEQUAL
7521: AND
7522: OR
7523: IFFALSE 7551
// if HasPowerByGameType ( mpGameType , i ) then
7525: LD_EXP 3
7529: PPUSH
7530: LD_VAR 0 2
7534: PPUSH
7535: CALL 6853 0 2
7539: IFFALSE 7551
// begin gameIsOn := true ;
7541: LD_ADDR_VAR 0 1
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// break ;
7549: GO 7553
// end ;
7551: GO 7422
7553: POP
7554: POP
// wait ( 100 ) ;
7555: LD_INT 100
7557: PPUSH
7558: CALL_OW 67
// until not gameIsOn ;
7562: LD_VAR 0 1
7566: NOT
7567: IFFALSE 7401
// if IAmServer then
7569: CALL_OW 518
7573: IFFALSE 7582
// wait ( 0 0$3 ) ;
7575: LD_INT 105
7577: PPUSH
7578: CALL_OW 67
// if Multiplayer then
7582: LD_OWVAR 4
7586: IFFALSE 7594
// YouLostInMultiplayer else
7588: CALL_OW 107
7592: GO 7601
// YouLost (  ) ;
7594: LD_STRING 
7596: PPUSH
7597: CALL_OW 104
// end ;
7601: PPOPN 2
7603: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
7604: LD_EXP 33
7608: IFFALSE 7992
7610: GO 7612
7612: DISABLE
7613: LD_INT 0
7615: PPUSH
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
7620: LD_ADDR_VAR 0 5
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 5
7639: PUSH
7640: LD_INT 6
7642: PUSH
7643: LD_INT 7
7645: PUSH
7646: LD_INT 8
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
7659: LD_INT 350
7661: PPUSH
7662: CALL_OW 67
// for i := 1 to 8 do
7666: LD_ADDR_VAR 0 1
7670: PUSH
7671: DOUBLE
7672: LD_INT 1
7674: DEC
7675: ST_TO_ADDR
7676: LD_INT 8
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7962
// begin j := sides [ i ] ;
7682: LD_ADDR_VAR 0 2
7686: PUSH
7687: LD_VAR 0 5
7691: PUSH
7692: LD_VAR 0 1
7696: ARRAY
7697: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
7698: LD_EXP 40
7702: PUSH
7703: LD_VAR 0 2
7707: ARRAY
7708: PPUSH
7709: CALL 13240 0 1
7713: IFFALSE 7726
7715: PUSH
7716: LD_VAR 0 2
7720: PPUSH
7721: CALL_OW 108
7725: AND
7726: IFFALSE 7744
7728: PUSH
7729: LD_EXP 3
7733: PPUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: CALL 6853 0 2
7743: AND
7744: IFFALSE 7960
// begin wait ( mpRespawn div 2 ) ;
7746: LD_EXP 33
7750: PUSH
7751: LD_INT 2
7753: DIV
7754: PPUSH
7755: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7759: LD_ADDR_VAR 0 3
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_VAR 0 2
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 50
7778: PUSH
7779: EMPTY
7780: LIST
7781: PUSH
7782: LD_INT 2
7784: PUSH
7785: LD_INT 30
7787: PUSH
7788: LD_INT 0
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 30
7797: PUSH
7798: LD_INT 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: PPUSH
7815: CALL_OW 69
7819: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
7820: LD_VAR 0 3
7824: NOT
7825: IFTRUE 7839
7827: PUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL_OW 108
7837: NOT
7838: OR
7839: IFTRUE 7858
7841: PUSH
7842: LD_EXP 3
7846: PPUSH
7847: LD_VAR 0 2
7851: PPUSH
7852: CALL 6853 0 2
7856: NOT
7857: OR
7858: IFFALSE 7862
// continue ;
7860: GO 7679
// spawn := tmp [ 1 ] ;
7862: LD_ADDR_VAR 0 4
7866: PUSH
7867: LD_VAR 0 3
7871: PUSH
7872: LD_INT 1
7874: ARRAY
7875: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
7876: LD_EXP 40
7880: PUSH
7881: LD_VAR 0 2
7885: ARRAY
7886: PUSH
7887: LD_INT 1
7889: ARRAY
7890: PPUSH
7891: LD_VAR 0 4
7895: PPUSH
7896: CALL_OW 250
7900: PPUSH
7901: LD_VAR 0 4
7905: PPUSH
7906: CALL_OW 251
7910: PPUSH
7911: LD_INT 32
7913: PPUSH
7914: LD_INT 1
7916: PPUSH
7917: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
7921: LD_ADDR_EXP 40
7925: PUSH
7926: LD_EXP 40
7930: PPUSH
7931: LD_VAR 0 2
7935: PPUSH
7936: LD_EXP 40
7940: PUSH
7941: LD_VAR 0 2
7945: ARRAY
7946: PPUSH
7947: LD_INT 1
7949: PPUSH
7950: CALL_OW 3
7954: PPUSH
7955: CALL_OW 1
7959: ST_TO_ADDR
// end ; end ;
7960: GO 7679
7962: POP
7963: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
7964: LD_ADDR_VAR 0 5
7968: PUSH
7969: LD_VAR 0 5
7973: PPUSH
7974: LD_INT 1
7976: PPUSH
7977: LD_INT 8
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: CALL 15566 0 4
7987: ST_TO_ADDR
// until false ;
7988: LD_INT 0
7990: IFFALSE 7659
// end ;
7992: PPOPN 5
7994: END
// every 0 0$1 marked mpActive do
7995: GO 7997
7997: DISABLE
// begin enable ;
7998: ENABLE
// if not mpDisplayStrings then
7999: LD_EXP 38
8003: NOT
8004: IFFALSE 8015
// begin display_strings := [ ] ;
8006: LD_ADDR_OWVAR 47
8010: PUSH
8011: EMPTY
8012: ST_TO_ADDR
// exit ;
8013: GO 8025
// end ; display_strings := mpDisplayStrings ;
8015: LD_ADDR_OWVAR 47
8019: PUSH
8020: LD_EXP 38
8024: ST_TO_ADDR
// end ; end_of_file
8025: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
// if GetType ( un ) = unit_vehicle then
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 247
8046: PUSH
8047: LD_INT 2
8049: EQUAL
8050: IFFALSE 8054
// exit ;
8052: GO 8827
// side := GetSide ( un ) ;
8054: LD_ADDR_VAR 0 9
8058: PUSH
8059: LD_VAR 0 1
8063: PPUSH
8064: CALL_OW 255
8068: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
8069: LD_EXP 3
8073: PUSH
8074: LD_INT 2
8076: PUSH
8077: LD_INT 8
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: IN
8084: IFFALSE 8178
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 266
8095: PUSH
8096: LD_INT 0
8098: PUSH
8099: LD_INT 1
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: IN
8106: IFFALSE 8178
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_INT 22
8115: PUSH
8116: LD_VAR 0 9
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: LD_INT 21
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: LD_INT 33
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PPUSH
8157: CALL_OW 69
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8176
// KillUnit ( i ) ;
8165: LD_VAR 0 3
8169: PPUSH
8170: CALL_OW 66
8174: GO 8162
8176: POP
8177: POP
// end ; if mpGameType = GameTypeSurvivalH then
8178: LD_EXP 3
8182: PUSH
8183: LD_INT 8
8185: EQUAL
8186: IFFALSE 8270
// if un in mpCommanders then
8188: LD_VAR 0 1
8192: PUSH
8193: LD_EXP 41
8197: IN
8198: IFFALSE 8270
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8200: LD_ADDR_VAR 0 3
8204: PUSH
8205: LD_INT 22
8207: PUSH
8208: LD_VAR 0 9
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 21
8222: PUSH
8223: LD_INT 1
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 33
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 69
8253: PUSH
8254: FOR_IN
8255: IFFALSE 8268
// KillUnit ( i ) ;
8257: LD_VAR 0 3
8261: PPUSH
8262: CALL_OW 66
8266: GO 8254
8268: POP
8269: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
8270: LD_VAR 0 1
8274: PPUSH
8275: CALL_OW 257
8279: PUSH
8280: LD_INT 12
8282: PUSH
8283: LD_INT 17
8285: PUSH
8286: LD_INT 15
8288: PUSH
8289: LD_INT 16
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: IN
8298: IFTRUE 8315
8300: PUSH
8301: LD_VAR 0 1
8305: PPUSH
8306: CALL_OW 263
8310: PUSH
8311: LD_INT 5
8313: EQUAL
8314: OR
8315: IFFALSE 8552
// begin tag := 0 ;
8317: LD_ADDR_VAR 0 5
8321: PUSH
8322: LD_INT 0
8324: ST_TO_ADDR
// for i := 1 to 8 do
8325: LD_ADDR_VAR 0 3
8329: PUSH
8330: DOUBLE
8331: LD_INT 1
8333: DEC
8334: ST_TO_ADDR
8335: LD_INT 8
8337: PUSH
8338: FOR_TO
8339: IFFALSE 8373
// if un in mpApePosIndex [ i ] then
8341: LD_VAR 0 1
8345: PUSH
8346: LD_EXP 32
8350: PUSH
8351: LD_VAR 0 3
8355: ARRAY
8356: IN
8357: IFFALSE 8371
// begin tag := i ;
8359: LD_ADDR_VAR 0 5
8363: PUSH
8364: LD_VAR 0 3
8368: ST_TO_ADDR
// break ;
8369: GO 8373
// end ;
8371: GO 8338
8373: POP
8374: POP
// if not tag then
8375: LD_VAR 0 5
8379: NOT
8380: IFFALSE 8384
// exit ;
8382: GO 8827
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8384: LD_ADDR_VAR 0 7
8388: PUSH
8389: LD_EXP 31
8393: PUSH
8394: LD_EXP 7
8398: PUSH
8399: LD_VAR 0 5
8403: ARRAY
8404: ARRAY
8405: ST_TO_ADDR
// if not area then
8406: LD_VAR 0 7
8410: NOT
8411: IFFALSE 8415
// exit ;
8413: GO 8827
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8415: LD_INT 14700
8417: PUSH
8418: LD_VAR 0 1
8422: PUSH
8423: LD_INT 5
8425: MOD
8426: PUSH
8427: LD_INT 1
8429: PLUS
8430: PUSH
8431: LD_INT 700
8433: MUL
8434: PLUS
8435: PPUSH
8436: CALL_OW 67
// repeat wait ( 10 ) ;
8440: LD_INT 10
8442: PPUSH
8443: CALL_OW 67
// until not mpBlockRespThread ;
8447: LD_EXP 47
8451: NOT
8452: IFFALSE 8440
// mpBlockRespThread := true ;
8454: LD_ADDR_EXP 47
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8462: LD_INT 0
8464: PPUSH
8465: CALL 45343 0 1
// ape := CreateHuman ;
8469: LD_ADDR_VAR 0 4
8473: PUSH
8474: CALL_OW 44
8478: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
8479: LD_ADDR_EXP 32
8483: PUSH
8484: LD_EXP 32
8488: PPUSH
8489: LD_VAR 0 5
8493: PPUSH
8494: LD_EXP 32
8498: PUSH
8499: LD_VAR 0 5
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 4
8509: PPUSH
8510: CALL 49216 0 2
8514: PPUSH
8515: CALL_OW 1
8519: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
8520: LD_VAR 0 4
8524: PPUSH
8525: LD_VAR 0 7
8529: PPUSH
8530: LD_INT 0
8532: PPUSH
8533: CALL_OW 49
// wait ( 10 ) ;
8537: LD_INT 10
8539: PPUSH
8540: CALL_OW 67
// mpBlockRespThread := false ;
8544: LD_ADDR_EXP 47
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
8552: LD_VAR 0 1
8556: PPUSH
8557: CALL_OW 247
8561: PUSH
8562: LD_INT 1
8564: EQUAL
8565: IFFALSE 8582
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 248
8577: PUSH
8578: LD_INT 0
8580: GREATER
8581: AND
8582: IFFALSE 8827
// begin if not mpRespawn then
8584: LD_EXP 33
8588: NOT
8589: IFFALSE 8593
// exit ;
8591: GO 8827
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
8593: LD_VAR 0 9
8597: PPUSH
8598: CALL_OW 108
8602: NOT
8603: IFFALSE 8622
8605: PUSH
8606: LD_EXP 3
8610: PPUSH
8611: LD_VAR 0 9
8615: PPUSH
8616: CALL 6853 0 2
8620: NOT
8621: AND
8622: IFFALSE 8626
// exit ;
8624: GO 8827
// side := GetSide ( un ) ;
8626: LD_ADDR_VAR 0 9
8630: PUSH
8631: LD_VAR 0 1
8635: PPUSH
8636: CALL_OW 255
8640: ST_TO_ADDR
// nation := GetNation ( un ) ;
8641: LD_ADDR_VAR 0 8
8645: PUSH
8646: LD_VAR 0 1
8650: PPUSH
8651: CALL_OW 248
8655: ST_TO_ADDR
// class := GetClass ( un ) ;
8656: LD_ADDR_VAR 0 6
8660: PUSH
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 257
8670: ST_TO_ADDR
// if class > 4 then
8671: LD_VAR 0 6
8675: PUSH
8676: LD_INT 4
8678: GREATER
8679: IFFALSE 8689
// class := 1 ;
8681: LD_ADDR_VAR 0 6
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// repeat wait ( 10 ) ;
8689: LD_INT 10
8691: PPUSH
8692: CALL_OW 67
// until not mpBlockRespThread ;
8696: LD_EXP 47
8700: NOT
8701: IFFALSE 8689
// mpBlockRespThread := true ;
8703: LD_ADDR_EXP 47
8707: PUSH
8708: LD_INT 1
8710: ST_TO_ADDR
// uc_side := side ;
8711: LD_ADDR_OWVAR 20
8715: PUSH
8716: LD_VAR 0 9
8720: ST_TO_ADDR
// uc_nation := nation ;
8721: LD_ADDR_OWVAR 21
8725: PUSH
8726: LD_VAR 0 8
8730: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
8731: LD_INT 0
8733: PPUSH
8734: LD_VAR 0 6
8738: PPUSH
8739: LD_INT 2
8741: PPUSH
8742: CALL_OW 380
// un := CreateHuman ;
8746: LD_ADDR_VAR 0 1
8750: PUSH
8751: CALL_OW 44
8755: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
8756: LD_ADDR_EXP 40
8760: PUSH
8761: LD_EXP 40
8765: PPUSH
8766: LD_VAR 0 9
8770: PPUSH
8771: LD_EXP 40
8775: PUSH
8776: LD_VAR 0 9
8780: ARRAY
8781: PPUSH
8782: LD_EXP 40
8786: PUSH
8787: LD_VAR 0 9
8791: ARRAY
8792: PUSH
8793: LD_INT 1
8795: PLUS
8796: PPUSH
8797: LD_VAR 0 1
8801: PPUSH
8802: CALL_OW 1
8806: PPUSH
8807: CALL_OW 1
8811: ST_TO_ADDR
// wait ( 10 ) ;
8812: LD_INT 10
8814: PPUSH
8815: CALL_OW 67
// mpBlockRespThread := false ;
8819: LD_ADDR_EXP 47
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// end ; end ;
8827: LD_VAR 0 2
8831: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
8832: LD_INT 0
8834: PPUSH
8835: PPUSH
8836: PPUSH
8837: PPUSH
8838: PPUSH
// tag := 0 ;
8839: LD_ADDR_VAR 0 5
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// for i := 1 to 8 do
8847: LD_ADDR_VAR 0 4
8851: PUSH
8852: DOUBLE
8853: LD_INT 1
8855: DEC
8856: ST_TO_ADDR
8857: LD_INT 8
8859: PUSH
8860: FOR_TO
8861: IFFALSE 8895
// if un in mpApePosIndex [ i ] then
8863: LD_VAR 0 2
8867: PUSH
8868: LD_EXP 32
8872: PUSH
8873: LD_VAR 0 4
8877: ARRAY
8878: IN
8879: IFFALSE 8893
// begin tag := i ;
8881: LD_ADDR_VAR 0 5
8885: PUSH
8886: LD_VAR 0 4
8890: ST_TO_ADDR
// break ;
8891: GO 8895
// end ;
8893: GO 8860
8895: POP
8896: POP
// if not tag then
8897: LD_VAR 0 5
8901: NOT
8902: IFFALSE 8906
// exit ;
8904: GO 9074
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
8906: LD_ADDR_VAR 0 6
8910: PUSH
8911: LD_EXP 31
8915: PUSH
8916: LD_EXP 7
8920: PUSH
8921: LD_VAR 0 5
8925: ARRAY
8926: ARRAY
8927: ST_TO_ADDR
// if not area then
8928: LD_VAR 0 6
8932: NOT
8933: IFFALSE 8937
// exit ;
8935: GO 9074
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
8937: LD_INT 14700
8939: PUSH
8940: LD_VAR 0 2
8944: PUSH
8945: LD_INT 5
8947: MOD
8948: PUSH
8949: LD_INT 1
8951: PLUS
8952: PUSH
8953: LD_INT 700
8955: MUL
8956: PLUS
8957: PPUSH
8958: CALL_OW 67
// repeat wait ( 10 ) ;
8962: LD_INT 10
8964: PPUSH
8965: CALL_OW 67
// until not mpBlockRespThread ;
8969: LD_EXP 47
8973: NOT
8974: IFFALSE 8962
// mpBlockRespThread := true ;
8976: LD_ADDR_EXP 47
8980: PUSH
8981: LD_INT 1
8983: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
8984: LD_INT 0
8986: PPUSH
8987: CALL 45343 0 1
// ape := CreateHuman ;
8991: LD_ADDR_VAR 0 7
8995: PUSH
8996: CALL_OW 44
9000: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9001: LD_ADDR_EXP 32
9005: PUSH
9006: LD_EXP 32
9010: PPUSH
9011: LD_VAR 0 5
9015: PPUSH
9016: LD_EXP 32
9020: PUSH
9021: LD_VAR 0 5
9025: ARRAY
9026: PPUSH
9027: LD_VAR 0 7
9031: PPUSH
9032: CALL 49216 0 2
9036: PPUSH
9037: CALL_OW 1
9041: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9042: LD_VAR 0 7
9046: PPUSH
9047: LD_VAR 0 6
9051: PPUSH
9052: LD_INT 0
9054: PPUSH
9055: CALL_OW 49
// wait ( 10 ) ;
9059: LD_INT 10
9061: PPUSH
9062: CALL_OW 67
// mpBlockRespThread := false ;
9066: LD_ADDR_EXP 47
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// end ;
9074: LD_VAR 0 3
9078: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9079: LD_INT 0
9081: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9082: LD_VAR 0 1
9086: PPUSH
9087: CALL_OW 266
9091: PUSH
9092: LD_INT 0
9094: PUSH
9095: LD_INT 1
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: IN
9102: IFFALSE 9127
// SetBName ( building , @ & GetSide ( building ) ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: LD_STRING @
9111: PUSH
9112: LD_VAR 0 1
9116: PPUSH
9117: CALL_OW 255
9121: STR
9122: PPUSH
9123: CALL_OW 500
// end ;
9127: LD_VAR 0 2
9131: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9132: LD_INT 0
9134: PPUSH
9135: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9136: LD_EXP 3
9140: PUSH
9141: LD_INT 2
9143: PUSH
9144: LD_INT 8
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: IN
9151: IFFALSE 9175
9153: PUSH
9154: LD_VAR 0 1
9158: PPUSH
9159: CALL_OW 266
9163: PUSH
9164: LD_INT 0
9166: PUSH
9167: LD_INT 1
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: IN
9174: AND
9175: IFFALSE 9254
// begin SetSide ( building , oldSide ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 235
// KillUnit ( building ) ;
9191: LD_VAR 0 1
9195: PPUSH
9196: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
9200: LD_ADDR_VAR 0 5
9204: PUSH
9205: LD_INT 22
9207: PUSH
9208: LD_VAR 0 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 21
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: PUSH
9236: FOR_IN
9237: IFFALSE 9250
// KillUnit ( i ) ;
9239: LD_VAR 0 5
9243: PPUSH
9244: CALL_OW 66
9248: GO 9236
9250: POP
9251: POP
// exit ;
9252: GO 9299
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
9254: LD_VAR 0 1
9258: PPUSH
9259: CALL_OW 266
9263: PUSH
9264: LD_INT 0
9266: PUSH
9267: LD_INT 1
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: IN
9274: IFFALSE 9299
// SetBName ( building , @ & GetSide ( building ) ) ;
9276: LD_VAR 0 1
9280: PPUSH
9281: LD_STRING @
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 255
9293: STR
9294: PPUSH
9295: CALL_OW 500
// end ;
9299: LD_VAR 0 4
9303: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
9308: PPUSH
// if mpGameType <> GameTypeFamine then
9309: LD_EXP 3
9313: PUSH
9314: LD_INT 5
9316: NONEQUAL
9317: IFFALSE 9321
// exit ;
9319: GO 9555
// for i := 1 to mpGlobalOilDeposits do
9321: LD_ADDR_VAR 0 6
9325: PUSH
9326: DOUBLE
9327: LD_INT 1
9329: DEC
9330: ST_TO_ADDR
9331: LD_EXP 42
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9553
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
9339: LD_EXP 42
9343: PUSH
9344: LD_VAR 0 6
9348: ARRAY
9349: PUSH
9350: LD_INT 1
9352: ARRAY
9353: PPUSH
9354: LD_EXP 42
9358: PUSH
9359: LD_VAR 0 6
9363: ARRAY
9364: PUSH
9365: LD_INT 2
9367: ARRAY
9368: PPUSH
9369: CALL_OW 428
9373: PUSH
9374: LD_VAR 0 1
9378: EQUAL
9379: IFFALSE 9551
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
9381: LD_ADDR_VAR 0 7
9385: PUSH
9386: LD_EXP 42
9390: PUSH
9391: LD_VAR 0 6
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: ARRAY
9400: ST_TO_ADDR
// value := value - amount ;
9401: LD_ADDR_VAR 0 7
9405: PUSH
9406: LD_VAR 0 7
9410: PUSH
9411: LD_VAR 0 4
9415: MINUS
9416: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
9417: LD_ADDR_EXP 42
9421: PUSH
9422: LD_EXP 42
9426: PPUSH
9427: LD_VAR 0 6
9431: PPUSH
9432: LD_EXP 42
9436: PUSH
9437: LD_VAR 0 6
9441: ARRAY
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_VAR 0 7
9450: PPUSH
9451: CALL_OW 1
9455: PPUSH
9456: CALL_OW 1
9460: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9461: LD_VAR 0 2
9465: PUSH
9466: LD_OWVAR 2
9470: PUSH
9471: LD_INT 9
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: IN
9478: IFFALSE 9494
// SetUnitDisplayNumber ( building , value ) ;
9480: LD_VAR 0 1
9484: PPUSH
9485: LD_VAR 0 7
9489: PPUSH
9490: CALL_OW 505
// if value <= 0 then
9494: LD_VAR 0 7
9498: PUSH
9499: LD_INT 0
9501: LESSEQUAL
9502: IFFALSE 9551
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
9504: LD_EXP 42
9508: PUSH
9509: LD_VAR 0 6
9513: ARRAY
9514: PUSH
9515: LD_INT 1
9517: ARRAY
9518: PPUSH
9519: LD_EXP 42
9523: PUSH
9524: LD_VAR 0 6
9528: ARRAY
9529: PUSH
9530: LD_INT 2
9532: ARRAY
9533: PPUSH
9534: CALL_OW 63
// KillUnit ( building ) ;
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 66
// exit ;
9547: POP
9548: POP
9549: GO 9555
// end ; end ; end ;
9551: GO 9336
9553: POP
9554: POP
// end ;
9555: LD_VAR 0 5
9559: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
9564: PPUSH
// if mpGameType <> GameTypeFamine then
9565: LD_EXP 3
9569: PUSH
9570: LD_INT 5
9572: NONEQUAL
9573: IFFALSE 9577
// exit ;
9575: GO 9811
// for i := 1 to mpGlobalSibDeposits do
9577: LD_ADDR_VAR 0 6
9581: PUSH
9582: DOUBLE
9583: LD_INT 1
9585: DEC
9586: ST_TO_ADDR
9587: LD_EXP 43
9591: PUSH
9592: FOR_TO
9593: IFFALSE 9809
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
9595: LD_EXP 43
9599: PUSH
9600: LD_VAR 0 6
9604: ARRAY
9605: PUSH
9606: LD_INT 1
9608: ARRAY
9609: PPUSH
9610: LD_EXP 43
9614: PUSH
9615: LD_VAR 0 6
9619: ARRAY
9620: PUSH
9621: LD_INT 2
9623: ARRAY
9624: PPUSH
9625: CALL_OW 428
9629: PUSH
9630: LD_VAR 0 1
9634: EQUAL
9635: IFFALSE 9807
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
9637: LD_ADDR_VAR 0 7
9641: PUSH
9642: LD_EXP 43
9646: PUSH
9647: LD_VAR 0 6
9651: ARRAY
9652: PUSH
9653: LD_INT 3
9655: ARRAY
9656: ST_TO_ADDR
// value := value - amount ;
9657: LD_ADDR_VAR 0 7
9661: PUSH
9662: LD_VAR 0 7
9666: PUSH
9667: LD_VAR 0 4
9671: MINUS
9672: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
9673: LD_ADDR_EXP 43
9677: PUSH
9678: LD_EXP 43
9682: PPUSH
9683: LD_VAR 0 6
9687: PPUSH
9688: LD_EXP 43
9692: PUSH
9693: LD_VAR 0 6
9697: ARRAY
9698: PPUSH
9699: LD_INT 3
9701: PPUSH
9702: LD_VAR 0 7
9706: PPUSH
9707: CALL_OW 1
9711: PPUSH
9712: CALL_OW 1
9716: ST_TO_ADDR
// if side in [ your_side , 9 ] then
9717: LD_VAR 0 2
9721: PUSH
9722: LD_OWVAR 2
9726: PUSH
9727: LD_INT 9
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: IN
9734: IFFALSE 9750
// SetUnitDisplayNumber ( building , value ) ;
9736: LD_VAR 0 1
9740: PPUSH
9741: LD_VAR 0 7
9745: PPUSH
9746: CALL_OW 505
// if value <= 0 then
9750: LD_VAR 0 7
9754: PUSH
9755: LD_INT 0
9757: LESSEQUAL
9758: IFFALSE 9807
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
9760: LD_EXP 43
9764: PUSH
9765: LD_VAR 0 6
9769: ARRAY
9770: PUSH
9771: LD_INT 1
9773: ARRAY
9774: PPUSH
9775: LD_EXP 43
9779: PUSH
9780: LD_VAR 0 6
9784: ARRAY
9785: PUSH
9786: LD_INT 2
9788: ARRAY
9789: PPUSH
9790: CALL_OW 63
// KillUnit ( building ) ;
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 66
// exit ;
9803: POP
9804: POP
9805: GO 9811
// end ; end ; end ;
9807: GO 9592
9809: POP
9810: POP
// end ;
9811: LD_VAR 0 5
9815: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
9816: LD_INT 0
9818: PPUSH
9819: PPUSH
// side := GetSide ( factory ) ;
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: LD_VAR 0 1
9829: PPUSH
9830: CALL_OW 255
9834: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9835: LD_VAR 0 5
9839: PUSH
9840: LD_INT 81
9842: EQUAL
9843: IFFALSE 9881
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_VAR 0 7
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 34
9860: PUSH
9861: LD_INT 81
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 69
9876: PUSH
9877: LD_INT 0
9879: GREATER
9880: AND
9881: IFFALSE 9914
// begin ComCancel ( factory ) ;
9883: LD_VAR 0 1
9887: PPUSH
9888: CALL_OW 127
// if side = your_side then
9892: LD_VAR 0 7
9896: PUSH
9897: LD_OWVAR 2
9901: EQUAL
9902: IFFALSE 9914
// HintSpec ( VehLimit , 2 ) ;
9904: LD_STRING VehLimit
9906: PPUSH
9907: LD_INT 2
9909: PPUSH
9910: CALL_OW 338
// end ; end ;
9914: LD_VAR 0 6
9918: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
9919: LD_INT 0
9921: PPUSH
9922: PPUSH
9923: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
9924: LD_VAR 0 1
9928: PPUSH
9929: CALL_OW 264
9933: PUSH
9934: LD_INT 81
9936: EQUAL
9937: IFFALSE 9954
9939: PUSH
9940: LD_VAR 0 1
9944: PPUSH
9945: CALL_OW 263
9949: PUSH
9950: LD_INT 1
9952: EQUAL
9953: AND
9954: IFFALSE 10234
// begin for i := 1 to Count ( minersList ) do
9956: LD_ADDR_VAR 0 6
9960: PUSH
9961: DOUBLE
9962: LD_INT 1
9964: DEC
9965: ST_TO_ADDR
9966: LD_EXP 57
9970: PPUSH
9971: CALL 13240 0 1
9975: PUSH
9976: FOR_TO
9977: IFFALSE 10095
// begin if minersList [ i ] = oldId then
9979: LD_EXP 57
9983: PUSH
9984: LD_VAR 0 6
9988: ARRAY
9989: PUSH
9990: LD_VAR 0 2
9994: EQUAL
9995: IFFALSE 10093
// begin for j := 1 to minerMinesList [ i ] do
9997: LD_ADDR_VAR 0 7
10001: PUSH
10002: DOUBLE
10003: LD_INT 1
10005: DEC
10006: ST_TO_ADDR
10007: LD_EXP 58
10011: PUSH
10012: LD_VAR 0 6
10016: ARRAY
10017: PUSH
10018: FOR_TO
10019: IFFALSE 10069
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10021: LD_EXP 58
10025: PUSH
10026: LD_VAR 0 6
10030: ARRAY
10031: PUSH
10032: LD_VAR 0 7
10036: ARRAY
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_EXP 58
10046: PUSH
10047: LD_VAR 0 6
10051: ARRAY
10052: PUSH
10053: LD_VAR 0 7
10057: ARRAY
10058: PUSH
10059: LD_INT 2
10061: ARRAY
10062: PPUSH
10063: CALL_OW 612
10067: GO 10018
10069: POP
10070: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10071: LD_ADDR_EXP 58
10075: PUSH
10076: LD_EXP 58
10080: PPUSH
10081: LD_VAR 0 6
10085: PPUSH
10086: CALL_OW 3
10090: ST_TO_ADDR
// break ;
10091: GO 10095
// end ; end ;
10093: GO 9976
10095: POP
10096: POP
// minersList := minersList diff oldId ;
10097: LD_ADDR_EXP 57
10101: PUSH
10102: LD_EXP 57
10106: PUSH
10107: LD_VAR 0 2
10111: DIFF
10112: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10113: LD_INT 22
10115: PUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: CALL_OW 255
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 34
10132: PUSH
10133: LD_INT 81
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PPUSH
10144: CALL_OW 69
10148: PUSH
10149: LD_INT 1
10151: GREATER
10152: IFFALSE 10179
// begin ComExit ( unit ) ;
10154: LD_VAR 0 4
10158: PPUSH
10159: CALL 49614 0 1
// SetSide ( newId , oldSide ) ;
10163: LD_VAR 0 1
10167: PPUSH
10168: LD_VAR 0 3
10172: PPUSH
10173: CALL_OW 235
// exit ;
10177: GO 10234
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10179: LD_ADDR_EXP 57
10183: PUSH
10184: LD_EXP 57
10188: PPUSH
10189: LD_EXP 57
10193: PUSH
10194: LD_INT 1
10196: PLUS
10197: PPUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 1
10207: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
10208: LD_ADDR_EXP 58
10212: PUSH
10213: LD_EXP 58
10217: PPUSH
10218: LD_EXP 58
10222: PUSH
10223: LD_INT 1
10225: PLUS
10226: PPUSH
10227: EMPTY
10228: PPUSH
10229: CALL_OW 1
10233: ST_TO_ADDR
// end ; end ; end_of_file
10234: LD_VAR 0 5
10238: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
10239: LD_EXP 39
10243: IFFALSE 10251
10245: PUSH
10246: CALL 10461 0 0
10250: AND
10251: IFFALSE 10259
10253: PUSH
10254: LD_OWVAR 4
10258: AND
10259: IFFALSE 10458
10261: GO 10263
10263: DISABLE
10264: LD_INT 0
10266: PPUSH
10267: PPUSH
// begin canWin := false ;
10268: LD_ADDR_VAR 0 2
10272: PUSH
10273: LD_INT 0
10275: ST_TO_ADDR
// if not HasPower ( your_side ) then
10276: LD_OWVAR 2
10280: PPUSH
10281: CALL 10503 0 1
10285: NOT
10286: IFFALSE 10297
// begin Multiplayer_Loose_Message ;
10288: CALL_OW 521
// enable ( mpLose ) ;
10292: LD_INT 102
10294: ENABLE_MARKED
// end else
10295: GO 10458
// begin canWin := true ;
10297: LD_ADDR_VAR 0 2
10301: PUSH
10302: LD_INT 1
10304: ST_TO_ADDR
// for i := 1 to 8 do
10305: LD_ADDR_VAR 0 1
10309: PUSH
10310: DOUBLE
10311: LD_INT 1
10313: DEC
10314: ST_TO_ADDR
10315: LD_INT 8
10317: PUSH
10318: FOR_TO
10319: IFFALSE 10444
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10321: LD_EXP 7
10325: PUSH
10326: LD_VAR 0 1
10330: ARRAY
10331: IFFALSE 10344
10333: PUSH
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 108
10343: AND
10344: IFFALSE 10358
10346: PUSH
10347: LD_VAR 0 1
10351: PUSH
10352: LD_OWVAR 2
10356: NONEQUAL
10357: AND
10358: IFFALSE 10442
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10360: LD_EXP 8
10364: PUSH
10365: LD_VAR 0 1
10369: ARRAY
10370: NOT
10371: IFTRUE 10419
10373: PUSH
10374: LD_EXP 8
10378: PUSH
10379: LD_VAR 0 1
10383: ARRAY
10384: PUSH
10385: LD_EXP 8
10389: PUSH
10390: LD_OWVAR 2
10394: ARRAY
10395: NONEQUAL
10396: IFFALSE 10418
10398: PUSH
10399: LD_OWVAR 2
10403: PPUSH
10404: LD_VAR 0 1
10408: PPUSH
10409: CALL_OW 81
10413: PUSH
10414: LD_INT 1
10416: NONEQUAL
10417: AND
10418: OR
10419: IFFALSE 10442
// if HasPower ( i ) then
10421: LD_VAR 0 1
10425: PPUSH
10426: CALL 10503 0 1
10430: IFFALSE 10442
// begin canWin := false ;
10432: LD_ADDR_VAR 0 2
10436: PUSH
10437: LD_INT 0
10439: ST_TO_ADDR
// break ;
10440: GO 10444
// end ;
10442: GO 10318
10444: POP
10445: POP
// if canWin then
10446: LD_VAR 0 2
10450: IFFALSE 10457
// enable ( mpWin ) else
10452: LD_INT 101
10454: ENABLE_MARKED
10455: GO 10458
// enable ;
10457: ENABLE
// end ; end ;
10458: PPOPN 2
10460: END
// function CanWinLoose ; begin
10461: LD_INT 0
10463: PPUSH
// result := true ;
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 1
10471: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10472: CALL_OW 531
10476: IFFALSE 10488
10478: PUSH
10479: CALL_OW 519
10483: PUSH
10484: LD_INT 1
10486: GREATER
10487: AND
10488: IFFALSE 10498
// result := false ;
10490: LD_ADDR_VAR 0 1
10494: PUSH
10495: LD_INT 0
10497: ST_TO_ADDR
// end ;
10498: LD_VAR 0 1
10502: RET
// function HasPower ( i ) ; begin
10503: LD_INT 0
10505: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10506: LD_ADDR_VAR 0 2
10510: PUSH
10511: LD_INT 22
10513: PUSH
10514: LD_VAR 0 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: LD_INT 21
10528: PUSH
10529: LD_INT 1
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 33
10538: PUSH
10539: LD_INT 3
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 33
10548: PUSH
10549: LD_INT 5
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PPUSH
10566: CALL_OW 69
10570: ST_TO_ADDR
// end ; end_of_file
10571: LD_VAR 0 2
10575: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
10576: LD_EXP 39
10580: IFFALSE 10623
10582: GO 10584
10584: DISABLE
10585: LD_INT 0
10587: PPUSH
// begin for i := 1 to 8 do
10588: LD_ADDR_VAR 0 1
10592: PUSH
10593: DOUBLE
10594: LD_INT 1
10596: DEC
10597: ST_TO_ADDR
10598: LD_INT 8
10600: PUSH
10601: FOR_TO
10602: IFFALSE 10621
// SetRestrict ( b_depot , i , state_disabled ) ;
10604: LD_INT 0
10606: PPUSH
10607: LD_VAR 0 1
10611: PPUSH
10612: LD_INT 0
10614: PPUSH
10615: CALL_OW 324
10619: GO 10601
10621: POP
10622: POP
// end ;
10623: PPOPN 1
10625: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
10626: LD_EXP 39
10630: IFFALSE 10638
10632: PUSH
10633: CALL 10848 0 0
10637: AND
10638: IFFALSE 10646
10640: PUSH
10641: LD_OWVAR 4
10645: AND
10646: IFFALSE 10845
10648: GO 10650
10650: DISABLE
10651: LD_INT 0
10653: PPUSH
10654: PPUSH
// begin canWin := false ;
10655: LD_ADDR_VAR 0 2
10659: PUSH
10660: LD_INT 0
10662: ST_TO_ADDR
// if not HasPower ( your_side ) then
10663: LD_OWVAR 2
10667: PPUSH
10668: CALL 10890 0 1
10672: NOT
10673: IFFALSE 10684
// begin Multiplayer_Loose_Message ;
10675: CALL_OW 521
// enable ( mpLose ) ;
10679: LD_INT 102
10681: ENABLE_MARKED
// end else
10682: GO 10845
// begin canWin := true ;
10684: LD_ADDR_VAR 0 2
10688: PUSH
10689: LD_INT 1
10691: ST_TO_ADDR
// for i := 1 to 8 do
10692: LD_ADDR_VAR 0 1
10696: PUSH
10697: DOUBLE
10698: LD_INT 1
10700: DEC
10701: ST_TO_ADDR
10702: LD_INT 8
10704: PUSH
10705: FOR_TO
10706: IFFALSE 10831
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
10708: LD_EXP 7
10712: PUSH
10713: LD_VAR 0 1
10717: ARRAY
10718: IFFALSE 10731
10720: PUSH
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 108
10730: AND
10731: IFFALSE 10745
10733: PUSH
10734: LD_VAR 0 1
10738: PUSH
10739: LD_OWVAR 2
10743: NONEQUAL
10744: AND
10745: IFFALSE 10829
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
10747: LD_EXP 8
10751: PUSH
10752: LD_VAR 0 1
10756: ARRAY
10757: NOT
10758: IFTRUE 10806
10760: PUSH
10761: LD_EXP 8
10765: PUSH
10766: LD_VAR 0 1
10770: ARRAY
10771: PUSH
10772: LD_EXP 8
10776: PUSH
10777: LD_OWVAR 2
10781: ARRAY
10782: NONEQUAL
10783: IFFALSE 10805
10785: PUSH
10786: LD_OWVAR 2
10790: PPUSH
10791: LD_VAR 0 1
10795: PPUSH
10796: CALL_OW 81
10800: PUSH
10801: LD_INT 1
10803: NONEQUAL
10804: AND
10805: OR
10806: IFFALSE 10829
// if HasPower ( i ) then
10808: LD_VAR 0 1
10812: PPUSH
10813: CALL 10890 0 1
10817: IFFALSE 10829
// begin canWin := false ;
10819: LD_ADDR_VAR 0 2
10823: PUSH
10824: LD_INT 0
10826: ST_TO_ADDR
// break ;
10827: GO 10831
// end ;
10829: GO 10705
10831: POP
10832: POP
// if canWin then
10833: LD_VAR 0 2
10837: IFFALSE 10844
// enable ( mpWin ) else
10839: LD_INT 101
10841: ENABLE_MARKED
10842: GO 10845
// enable ;
10844: ENABLE
// end ; end ;
10845: PPOPN 2
10847: END
// function CanWinLoose ; begin
10848: LD_INT 0
10850: PPUSH
// result := true ;
10851: LD_ADDR_VAR 0 1
10855: PUSH
10856: LD_INT 1
10858: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
10859: CALL_OW 531
10863: IFFALSE 10875
10865: PUSH
10866: CALL_OW 519
10870: PUSH
10871: LD_INT 1
10873: GREATER
10874: AND
10875: IFFALSE 10885
// result := false ;
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_INT 0
10884: ST_TO_ADDR
// end ;
10885: LD_VAR 0 1
10889: RET
// function HasPower ( i ) ; begin
10890: LD_INT 0
10892: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
10893: LD_INT 22
10895: PUSH
10896: LD_VAR 0 1
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: LD_INT 30
10910: PUSH
10911: LD_INT 0
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 30
10920: PUSH
10921: LD_INT 1
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PPUSH
10937: CALL_OW 69
10941: NOT
10942: IFFALSE 10946
// exit ;
10944: GO 11011
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
10946: LD_ADDR_VAR 0 2
10950: PUSH
10951: LD_INT 22
10953: PUSH
10954: LD_VAR 0 1
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 21
10968: PUSH
10969: LD_INT 1
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 33
10978: PUSH
10979: LD_INT 3
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 33
10988: PUSH
10989: LD_INT 5
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: PPUSH
11006: CALL_OW 69
11010: ST_TO_ADDR
// end ; end_of_file
11011: LD_VAR 0 2
11015: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11016: LD_INT 0
11018: PPUSH
11019: PPUSH
// if exist_mode then
11020: LD_VAR 0 2
11024: IFFALSE 11070
// begin unit := CreateCharacter ( prefix & ident ) ;
11026: LD_ADDR_VAR 0 5
11030: PUSH
11031: LD_VAR 0 3
11035: PUSH
11036: LD_VAR 0 1
11040: STR
11041: PPUSH
11042: CALL_OW 34
11046: ST_TO_ADDR
// if unit then
11047: LD_VAR 0 5
11051: IFFALSE 11068
// DeleteCharacters ( prefix & ident ) ;
11053: LD_VAR 0 3
11057: PUSH
11058: LD_VAR 0 1
11062: STR
11063: PPUSH
11064: CALL_OW 40
// end else
11068: GO 11085
// unit := NewCharacter ( ident ) ;
11070: LD_ADDR_VAR 0 5
11074: PUSH
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 25
11084: ST_TO_ADDR
// result := unit ;
11085: LD_ADDR_VAR 0 4
11089: PUSH
11090: LD_VAR 0 5
11094: ST_TO_ADDR
// end ;
11095: LD_VAR 0 4
11099: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
11100: LD_INT 0
11102: PPUSH
11103: PPUSH
// if exist_mode then
11104: LD_VAR 0 2
11108: IFFALSE 11133
// unit := CreateCharacter ( prefix & ident ) else
11110: LD_ADDR_VAR 0 5
11114: PUSH
11115: LD_VAR 0 3
11119: PUSH
11120: LD_VAR 0 1
11124: STR
11125: PPUSH
11126: CALL_OW 34
11130: ST_TO_ADDR
11131: GO 11148
// unit := NewCharacter ( ident ) ;
11133: LD_ADDR_VAR 0 5
11137: PUSH
11138: LD_VAR 0 1
11142: PPUSH
11143: CALL_OW 25
11147: ST_TO_ADDR
// result := unit ;
11148: LD_ADDR_VAR 0 4
11152: PUSH
11153: LD_VAR 0 5
11157: ST_TO_ADDR
// end ;
11158: LD_VAR 0 4
11162: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11163: LD_INT 0
11165: PPUSH
11166: PPUSH
// if not side or not nation then
11167: LD_VAR 0 1
11171: NOT
11172: IFTRUE 11181
11174: PUSH
11175: LD_VAR 0 2
11179: NOT
11180: OR
11181: IFFALSE 11185
// exit ;
11183: GO 11979
// case nation of nation_american :
11185: LD_VAR 0 2
11189: PUSH
11190: LD_INT 1
11192: DOUBLE
11193: EQUAL
11194: IFTRUE 11198
11196: GO 11420
11198: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_INT 35
11206: PUSH
11207: LD_INT 45
11209: PUSH
11210: LD_INT 46
11212: PUSH
11213: LD_INT 47
11215: PUSH
11216: LD_INT 82
11218: PUSH
11219: LD_INT 83
11221: PUSH
11222: LD_INT 84
11224: PUSH
11225: LD_INT 85
11227: PUSH
11228: LD_INT 86
11230: PUSH
11231: LD_INT 1
11233: PUSH
11234: LD_INT 2
11236: PUSH
11237: LD_INT 6
11239: PUSH
11240: LD_INT 15
11242: PUSH
11243: LD_INT 16
11245: PUSH
11246: LD_INT 7
11248: PUSH
11249: LD_INT 12
11251: PUSH
11252: LD_INT 13
11254: PUSH
11255: LD_INT 10
11257: PUSH
11258: LD_INT 14
11260: PUSH
11261: LD_INT 20
11263: PUSH
11264: LD_INT 21
11266: PUSH
11267: LD_INT 22
11269: PUSH
11270: LD_INT 25
11272: PUSH
11273: LD_INT 32
11275: PUSH
11276: LD_INT 27
11278: PUSH
11279: LD_INT 36
11281: PUSH
11282: LD_INT 69
11284: PUSH
11285: LD_INT 39
11287: PUSH
11288: LD_INT 34
11290: PUSH
11291: LD_INT 40
11293: PUSH
11294: LD_INT 48
11296: PUSH
11297: LD_INT 49
11299: PUSH
11300: LD_INT 50
11302: PUSH
11303: LD_INT 51
11305: PUSH
11306: LD_INT 52
11308: PUSH
11309: LD_INT 53
11311: PUSH
11312: LD_INT 54
11314: PUSH
11315: LD_INT 55
11317: PUSH
11318: LD_INT 56
11320: PUSH
11321: LD_INT 57
11323: PUSH
11324: LD_INT 58
11326: PUSH
11327: LD_INT 59
11329: PUSH
11330: LD_INT 60
11332: PUSH
11333: LD_INT 61
11335: PUSH
11336: LD_INT 62
11338: PUSH
11339: LD_INT 80
11341: PUSH
11342: LD_INT 82
11344: PUSH
11345: LD_INT 83
11347: PUSH
11348: LD_INT 84
11350: PUSH
11351: LD_INT 85
11353: PUSH
11354: LD_INT 86
11356: PUSH
11357: LD_INT 90
11359: PUSH
11360: LD_INT 93
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: ST_TO_ADDR
11418: GO 11901
11420: LD_INT 2
11422: DOUBLE
11423: EQUAL
11424: IFTRUE 11428
11426: GO 11662
11428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
11429: LD_ADDR_VAR 0 4
11433: PUSH
11434: LD_INT 35
11436: PUSH
11437: LD_INT 45
11439: PUSH
11440: LD_INT 46
11442: PUSH
11443: LD_INT 47
11445: PUSH
11446: LD_INT 82
11448: PUSH
11449: LD_INT 83
11451: PUSH
11452: LD_INT 84
11454: PUSH
11455: LD_INT 85
11457: PUSH
11458: LD_INT 87
11460: PUSH
11461: LD_INT 70
11463: PUSH
11464: LD_INT 1
11466: PUSH
11467: LD_INT 11
11469: PUSH
11470: LD_INT 3
11472: PUSH
11473: LD_INT 4
11475: PUSH
11476: LD_INT 5
11478: PUSH
11479: LD_INT 6
11481: PUSH
11482: LD_INT 15
11484: PUSH
11485: LD_INT 18
11487: PUSH
11488: LD_INT 7
11490: PUSH
11491: LD_INT 17
11493: PUSH
11494: LD_INT 8
11496: PUSH
11497: LD_INT 20
11499: PUSH
11500: LD_INT 21
11502: PUSH
11503: LD_INT 22
11505: PUSH
11506: LD_INT 72
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: LD_INT 69
11514: PUSH
11515: LD_INT 39
11517: PUSH
11518: LD_INT 40
11520: PUSH
11521: LD_INT 41
11523: PUSH
11524: LD_INT 42
11526: PUSH
11527: LD_INT 43
11529: PUSH
11530: LD_INT 48
11532: PUSH
11533: LD_INT 49
11535: PUSH
11536: LD_INT 50
11538: PUSH
11539: LD_INT 51
11541: PUSH
11542: LD_INT 52
11544: PUSH
11545: LD_INT 53
11547: PUSH
11548: LD_INT 54
11550: PUSH
11551: LD_INT 55
11553: PUSH
11554: LD_INT 56
11556: PUSH
11557: LD_INT 60
11559: PUSH
11560: LD_INT 61
11562: PUSH
11563: LD_INT 62
11565: PUSH
11566: LD_INT 66
11568: PUSH
11569: LD_INT 67
11571: PUSH
11572: LD_INT 68
11574: PUSH
11575: LD_INT 81
11577: PUSH
11578: LD_INT 82
11580: PUSH
11581: LD_INT 83
11583: PUSH
11584: LD_INT 84
11586: PUSH
11587: LD_INT 85
11589: PUSH
11590: LD_INT 87
11592: PUSH
11593: LD_INT 88
11595: PUSH
11596: LD_INT 92
11598: PUSH
11599: LD_INT 94
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: ST_TO_ADDR
11660: GO 11901
11662: LD_INT 3
11664: DOUBLE
11665: EQUAL
11666: IFTRUE 11670
11668: GO 11900
11670: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11671: LD_ADDR_VAR 0 4
11675: PUSH
11676: LD_INT 46
11678: PUSH
11679: LD_INT 47
11681: PUSH
11682: LD_INT 1
11684: PUSH
11685: LD_INT 2
11687: PUSH
11688: LD_INT 82
11690: PUSH
11691: LD_INT 83
11693: PUSH
11694: LD_INT 84
11696: PUSH
11697: LD_INT 85
11699: PUSH
11700: LD_INT 86
11702: PUSH
11703: LD_INT 11
11705: PUSH
11706: LD_INT 9
11708: PUSH
11709: LD_INT 20
11711: PUSH
11712: LD_INT 19
11714: PUSH
11715: LD_INT 21
11717: PUSH
11718: LD_INT 24
11720: PUSH
11721: LD_INT 22
11723: PUSH
11724: LD_INT 25
11726: PUSH
11727: LD_INT 28
11729: PUSH
11730: LD_INT 29
11732: PUSH
11733: LD_INT 30
11735: PUSH
11736: LD_INT 31
11738: PUSH
11739: LD_INT 37
11741: PUSH
11742: LD_INT 38
11744: PUSH
11745: LD_INT 32
11747: PUSH
11748: LD_INT 27
11750: PUSH
11751: LD_INT 33
11753: PUSH
11754: LD_INT 69
11756: PUSH
11757: LD_INT 39
11759: PUSH
11760: LD_INT 34
11762: PUSH
11763: LD_INT 40
11765: PUSH
11766: LD_INT 71
11768: PUSH
11769: LD_INT 23
11771: PUSH
11772: LD_INT 44
11774: PUSH
11775: LD_INT 48
11777: PUSH
11778: LD_INT 49
11780: PUSH
11781: LD_INT 50
11783: PUSH
11784: LD_INT 51
11786: PUSH
11787: LD_INT 52
11789: PUSH
11790: LD_INT 53
11792: PUSH
11793: LD_INT 54
11795: PUSH
11796: LD_INT 55
11798: PUSH
11799: LD_INT 56
11801: PUSH
11802: LD_INT 57
11804: PUSH
11805: LD_INT 58
11807: PUSH
11808: LD_INT 59
11810: PUSH
11811: LD_INT 63
11813: PUSH
11814: LD_INT 64
11816: PUSH
11817: LD_INT 65
11819: PUSH
11820: LD_INT 82
11822: PUSH
11823: LD_INT 83
11825: PUSH
11826: LD_INT 84
11828: PUSH
11829: LD_INT 85
11831: PUSH
11832: LD_INT 86
11834: PUSH
11835: LD_INT 89
11837: PUSH
11838: LD_INT 91
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: ST_TO_ADDR
11898: GO 11901
11900: POP
// if state > - 1 and state < 3 then
11901: LD_VAR 0 3
11905: PUSH
11906: LD_INT 1
11908: NEG
11909: GREATER
11910: IFFALSE 11922
11912: PUSH
11913: LD_VAR 0 3
11917: PUSH
11918: LD_INT 3
11920: LESS
11921: AND
11922: IFFALSE 11979
// for i in result do
11924: LD_ADDR_VAR 0 5
11928: PUSH
11929: LD_VAR 0 4
11933: PUSH
11934: FOR_IN
11935: IFFALSE 11977
// if GetTech ( i , side ) <> state then
11937: LD_VAR 0 5
11941: PPUSH
11942: LD_VAR 0 1
11946: PPUSH
11947: CALL_OW 321
11951: PUSH
11952: LD_VAR 0 3
11956: NONEQUAL
11957: IFFALSE 11975
// result := result diff i ;
11959: LD_ADDR_VAR 0 4
11963: PUSH
11964: LD_VAR 0 4
11968: PUSH
11969: LD_VAR 0 5
11973: DIFF
11974: ST_TO_ADDR
11975: GO 11934
11977: POP
11978: POP
// end ;
11979: LD_VAR 0 4
11983: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11984: LD_INT 0
11986: PPUSH
11987: PPUSH
11988: PPUSH
// result := true ;
11989: LD_ADDR_VAR 0 3
11993: PUSH
11994: LD_INT 1
11996: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11997: LD_ADDR_VAR 0 5
12001: PUSH
12002: LD_VAR 0 2
12006: PPUSH
12007: CALL_OW 480
12011: ST_TO_ADDR
// if not tmp then
12012: LD_VAR 0 5
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12070
// for i in tmp do
12021: LD_ADDR_VAR 0 4
12025: PUSH
12026: LD_VAR 0 5
12030: PUSH
12031: FOR_IN
12032: IFFALSE 12068
// if GetTech ( i , side ) <> state_researched then
12034: LD_VAR 0 4
12038: PPUSH
12039: LD_VAR 0 1
12043: PPUSH
12044: CALL_OW 321
12048: PUSH
12049: LD_INT 2
12051: NONEQUAL
12052: IFFALSE 12066
// begin result := false ;
12054: LD_ADDR_VAR 0 3
12058: PUSH
12059: LD_INT 0
12061: ST_TO_ADDR
// exit ;
12062: POP
12063: POP
12064: GO 12070
// end ;
12066: GO 12031
12068: POP
12069: POP
// end ;
12070: LD_VAR 0 3
12074: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12075: LD_INT 0
12077: PPUSH
12078: PPUSH
12079: PPUSH
12080: PPUSH
12081: PPUSH
12082: PPUSH
12083: PPUSH
12084: PPUSH
12085: PPUSH
12086: PPUSH
12087: PPUSH
12088: PPUSH
12089: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12090: LD_VAR 0 1
12094: NOT
12095: IFTRUE 12112
12097: PUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 257
12107: PUSH
12108: LD_INT 9
12110: NONEQUAL
12111: OR
12112: IFFALSE 12116
// exit ;
12114: GO 12695
// side := GetSide ( unit ) ;
12116: LD_ADDR_VAR 0 9
12120: PUSH
12121: LD_VAR 0 1
12125: PPUSH
12126: CALL_OW 255
12130: ST_TO_ADDR
// tech_space := tech_spacanom ;
12131: LD_ADDR_VAR 0 12
12135: PUSH
12136: LD_INT 29
12138: ST_TO_ADDR
// tech_time := tech_taurad ;
12139: LD_ADDR_VAR 0 13
12143: PUSH
12144: LD_INT 28
12146: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12147: LD_ADDR_VAR 0 11
12151: PUSH
12152: LD_VAR 0 1
12156: PPUSH
12157: CALL_OW 310
12161: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12162: LD_VAR 0 11
12166: PPUSH
12167: CALL_OW 247
12171: PUSH
12172: LD_INT 2
12174: EQUAL
12175: IFFALSE 12179
// exit ;
12177: GO 12695
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12179: LD_ADDR_VAR 0 8
12183: PUSH
12184: LD_INT 81
12186: PUSH
12187: LD_VAR 0 9
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 3
12198: PUSH
12199: LD_INT 21
12201: PUSH
12202: LD_INT 3
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 69
12221: ST_TO_ADDR
// if not tmp then
12222: LD_VAR 0 8
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12695
// if in_unit then
12231: LD_VAR 0 11
12235: IFFALSE 12259
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12237: LD_ADDR_VAR 0 10
12241: PUSH
12242: LD_VAR 0 8
12246: PPUSH
12247: LD_VAR 0 11
12251: PPUSH
12252: CALL_OW 74
12256: ST_TO_ADDR
12257: GO 12279
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12259: LD_ADDR_VAR 0 10
12263: PUSH
12264: LD_VAR 0 8
12268: PPUSH
12269: LD_VAR 0 1
12273: PPUSH
12274: CALL_OW 74
12278: ST_TO_ADDR
// if not enemy then
12279: LD_VAR 0 10
12283: NOT
12284: IFFALSE 12288
// exit ;
12286: GO 12695
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12288: LD_VAR 0 11
12292: IFFALSE 12314
12294: PUSH
12295: LD_VAR 0 11
12299: PPUSH
12300: LD_VAR 0 10
12304: PPUSH
12305: CALL_OW 296
12309: PUSH
12310: LD_INT 13
12312: GREATER
12313: AND
12314: IFTRUE 12336
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_VAR 0 10
12326: PPUSH
12327: CALL_OW 296
12331: PUSH
12332: LD_INT 12
12334: GREATER
12335: OR
12336: IFFALSE 12340
// exit ;
12338: GO 12695
// missile := [ 1 ] ;
12340: LD_ADDR_VAR 0 14
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12351: LD_VAR 0 9
12355: PPUSH
12356: LD_VAR 0 12
12360: PPUSH
12361: CALL_OW 325
12365: IFFALSE 12394
// missile := Replace ( missile , missile + 1 , 2 ) ;
12367: LD_ADDR_VAR 0 14
12371: PUSH
12372: LD_VAR 0 14
12376: PPUSH
12377: LD_VAR 0 14
12381: PUSH
12382: LD_INT 1
12384: PLUS
12385: PPUSH
12386: LD_INT 2
12388: PPUSH
12389: CALL_OW 1
12393: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12394: LD_VAR 0 9
12398: PPUSH
12399: LD_VAR 0 13
12403: PPUSH
12404: CALL_OW 325
12408: IFFALSE 12432
12410: PUSH
12411: LD_VAR 0 10
12415: PPUSH
12416: CALL_OW 255
12420: PPUSH
12421: LD_VAR 0 13
12425: PPUSH
12426: CALL_OW 325
12430: NOT
12431: AND
12432: IFFALSE 12461
// missile := Replace ( missile , missile + 1 , 3 ) ;
12434: LD_ADDR_VAR 0 14
12438: PUSH
12439: LD_VAR 0 14
12443: PPUSH
12444: LD_VAR 0 14
12448: PUSH
12449: LD_INT 1
12451: PLUS
12452: PPUSH
12453: LD_INT 3
12455: PPUSH
12456: CALL_OW 1
12460: ST_TO_ADDR
// if missile < 2 then
12461: LD_VAR 0 14
12465: PUSH
12466: LD_INT 2
12468: LESS
12469: IFFALSE 12473
// exit ;
12471: GO 12695
// x := GetX ( enemy ) ;
12473: LD_ADDR_VAR 0 4
12477: PUSH
12478: LD_VAR 0 10
12482: PPUSH
12483: CALL_OW 250
12487: ST_TO_ADDR
// y := GetY ( enemy ) ;
12488: LD_ADDR_VAR 0 5
12492: PUSH
12493: LD_VAR 0 10
12497: PPUSH
12498: CALL_OW 251
12502: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12503: LD_ADDR_VAR 0 6
12507: PUSH
12508: LD_VAR 0 4
12512: PUSH
12513: LD_INT 1
12515: NEG
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 12
12524: PLUS
12525: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12526: LD_ADDR_VAR 0 7
12530: PUSH
12531: LD_VAR 0 5
12535: PUSH
12536: LD_INT 1
12538: NEG
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 12
12547: PLUS
12548: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12549: LD_VAR 0 6
12553: PPUSH
12554: LD_VAR 0 7
12558: PPUSH
12559: CALL_OW 488
12563: NOT
12564: IFFALSE 12586
// begin _x := x ;
12566: LD_ADDR_VAR 0 6
12570: PUSH
12571: LD_VAR 0 4
12575: ST_TO_ADDR
// _y := y ;
12576: LD_ADDR_VAR 0 7
12580: PUSH
12581: LD_VAR 0 5
12585: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12586: LD_ADDR_VAR 0 3
12590: PUSH
12591: LD_INT 1
12593: PPUSH
12594: LD_VAR 0 14
12598: PPUSH
12599: CALL_OW 12
12603: ST_TO_ADDR
// case i of 1 :
12604: LD_VAR 0 3
12608: PUSH
12609: LD_INT 1
12611: DOUBLE
12612: EQUAL
12613: IFTRUE 12617
12615: GO 12634
12617: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12618: LD_VAR 0 1
12622: PPUSH
12623: LD_VAR 0 10
12627: PPUSH
12628: CALL_OW 115
12632: GO 12695
12634: LD_INT 2
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12664
12642: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_VAR 0 6
12652: PPUSH
12653: LD_VAR 0 7
12657: PPUSH
12658: CALL_OW 153
12662: GO 12695
12664: LD_INT 3
12666: DOUBLE
12667: EQUAL
12668: IFTRUE 12672
12670: GO 12694
12672: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12673: LD_VAR 0 1
12677: PPUSH
12678: LD_VAR 0 6
12682: PPUSH
12683: LD_VAR 0 7
12687: PPUSH
12688: CALL_OW 154
12692: GO 12695
12694: POP
// end ;
12695: LD_VAR 0 2
12699: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12700: LD_INT 0
12702: PPUSH
12703: PPUSH
12704: PPUSH
12705: PPUSH
12706: PPUSH
12707: PPUSH
// if not unit or not building then
12708: LD_VAR 0 1
12712: NOT
12713: IFTRUE 12722
12715: PUSH
12716: LD_VAR 0 2
12720: NOT
12721: OR
12722: IFFALSE 12726
// exit ;
12724: GO 12884
// x := GetX ( building ) ;
12726: LD_ADDR_VAR 0 5
12730: PUSH
12731: LD_VAR 0 2
12735: PPUSH
12736: CALL_OW 250
12740: ST_TO_ADDR
// y := GetY ( building ) ;
12741: LD_ADDR_VAR 0 6
12745: PUSH
12746: LD_VAR 0 2
12750: PPUSH
12751: CALL_OW 251
12755: ST_TO_ADDR
// for i := 0 to 5 do
12756: LD_ADDR_VAR 0 4
12760: PUSH
12761: DOUBLE
12762: LD_INT 0
12764: DEC
12765: ST_TO_ADDR
12766: LD_INT 5
12768: PUSH
12769: FOR_TO
12770: IFFALSE 12882
// begin _x := ShiftX ( x , i , 3 ) ;
12772: LD_ADDR_VAR 0 7
12776: PUSH
12777: LD_VAR 0 5
12781: PPUSH
12782: LD_VAR 0 4
12786: PPUSH
12787: LD_INT 3
12789: PPUSH
12790: CALL_OW 272
12794: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12795: LD_ADDR_VAR 0 8
12799: PUSH
12800: LD_VAR 0 6
12804: PPUSH
12805: LD_VAR 0 4
12809: PPUSH
12810: LD_INT 3
12812: PPUSH
12813: CALL_OW 273
12817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12818: LD_VAR 0 7
12822: PPUSH
12823: LD_VAR 0 8
12827: PPUSH
12828: CALL_OW 488
12832: NOT
12833: IFFALSE 12837
// continue ;
12835: GO 12769
// if HexInfo ( _x , _y ) = 0 then
12837: LD_VAR 0 7
12841: PPUSH
12842: LD_VAR 0 8
12846: PPUSH
12847: CALL_OW 428
12851: PUSH
12852: LD_INT 0
12854: EQUAL
12855: IFFALSE 12880
// begin ComMoveXY ( unit , _x , _y ) ;
12857: LD_VAR 0 1
12861: PPUSH
12862: LD_VAR 0 7
12866: PPUSH
12867: LD_VAR 0 8
12871: PPUSH
12872: CALL_OW 111
// exit ;
12876: POP
12877: POP
12878: GO 12884
// end ; end ;
12880: GO 12769
12882: POP
12883: POP
// end ;
12884: LD_VAR 0 3
12888: RET
// export function ScanBase ( side , base_area ) ; begin
12889: LD_INT 0
12891: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_VAR 0 2
12901: PPUSH
12902: LD_INT 81
12904: PUSH
12905: LD_VAR 0 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 70
12918: ST_TO_ADDR
// end ;
12919: LD_VAR 0 3
12923: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12924: LD_INT 0
12926: PPUSH
12927: PPUSH
12928: PPUSH
12929: PPUSH
// result := false ;
12930: LD_ADDR_VAR 0 2
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// side := GetSide ( unit ) ;
12938: LD_ADDR_VAR 0 3
12942: PUSH
12943: LD_VAR 0 1
12947: PPUSH
12948: CALL_OW 255
12952: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12953: LD_ADDR_VAR 0 4
12957: PUSH
12958: LD_VAR 0 1
12962: PPUSH
12963: CALL_OW 248
12967: ST_TO_ADDR
// case nat of 1 :
12968: LD_VAR 0 4
12972: PUSH
12973: LD_INT 1
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 12992
12981: POP
// tech := tech_lassight ; 2 :
12982: LD_ADDR_VAR 0 5
12986: PUSH
12987: LD_INT 12
12989: ST_TO_ADDR
12990: GO 13031
12992: LD_INT 2
12994: DOUBLE
12995: EQUAL
12996: IFTRUE 13000
12998: GO 13011
13000: POP
// tech := tech_mortar ; 3 :
13001: LD_ADDR_VAR 0 5
13005: PUSH
13006: LD_INT 41
13008: ST_TO_ADDR
13009: GO 13031
13011: LD_INT 3
13013: DOUBLE
13014: EQUAL
13015: IFTRUE 13019
13017: GO 13030
13019: POP
// tech := tech_bazooka ; end ;
13020: LD_ADDR_VAR 0 5
13024: PUSH
13025: LD_INT 44
13027: ST_TO_ADDR
13028: GO 13031
13030: POP
// if Researched ( side , tech ) then
13031: LD_VAR 0 3
13035: PPUSH
13036: LD_VAR 0 5
13040: PPUSH
13041: CALL_OW 325
13045: IFFALSE 13072
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13047: LD_ADDR_VAR 0 2
13051: PUSH
13052: LD_INT 5
13054: PUSH
13055: LD_INT 8
13057: PUSH
13058: LD_INT 9
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: PUSH
13066: LD_VAR 0 4
13070: ARRAY
13071: ST_TO_ADDR
// end ;
13072: LD_VAR 0 2
13076: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
// if not mines then
13082: LD_VAR 0 2
13086: NOT
13087: IFFALSE 13091
// exit ;
13089: GO 13235
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13091: LD_ADDR_VAR 0 5
13095: PUSH
13096: LD_INT 81
13098: PUSH
13099: LD_VAR 0 1
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PUSH
13108: LD_INT 3
13110: PUSH
13111: LD_INT 21
13113: PUSH
13114: LD_INT 3
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PPUSH
13129: CALL_OW 69
13133: ST_TO_ADDR
// for i in mines do
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 2
13143: PUSH
13144: FOR_IN
13145: IFFALSE 13233
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13147: LD_VAR 0 4
13151: PUSH
13152: LD_INT 1
13154: ARRAY
13155: PPUSH
13156: LD_VAR 0 4
13160: PUSH
13161: LD_INT 2
13163: ARRAY
13164: PPUSH
13165: CALL_OW 458
13169: NOT
13170: IFFALSE 13174
// continue ;
13172: GO 13144
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13174: LD_VAR 0 4
13178: PUSH
13179: LD_INT 1
13181: ARRAY
13182: PPUSH
13183: LD_VAR 0 4
13187: PUSH
13188: LD_INT 2
13190: ARRAY
13191: PPUSH
13192: CALL_OW 428
13196: PUSH
13197: LD_VAR 0 5
13201: IN
13202: IFFALSE 13231
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13204: LD_VAR 0 4
13208: PUSH
13209: LD_INT 1
13211: ARRAY
13212: PPUSH
13213: LD_VAR 0 4
13217: PUSH
13218: LD_INT 2
13220: ARRAY
13221: PPUSH
13222: LD_VAR 0 1
13226: PPUSH
13227: CALL_OW 456
// end ;
13231: GO 13144
13233: POP
13234: POP
// end ;
13235: LD_VAR 0 3
13239: RET
// export function Count ( array ) ; begin
13240: LD_INT 0
13242: PPUSH
// result := array + 0 ;
13243: LD_ADDR_VAR 0 2
13247: PUSH
13248: LD_VAR 0 1
13252: PUSH
13253: LD_INT 0
13255: PLUS
13256: ST_TO_ADDR
// end ;
13257: LD_VAR 0 2
13261: RET
// export function IsEmpty ( building ) ; begin
13262: LD_INT 0
13264: PPUSH
// if not building then
13265: LD_VAR 0 1
13269: NOT
13270: IFFALSE 13274
// exit ;
13272: GO 13317
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 22
13286: PUSH
13287: LD_VAR 0 1
13291: PPUSH
13292: CALL_OW 255
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: LD_INT 58
13303: PUSH
13304: EMPTY
13305: LIST
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PPUSH
13311: CALL_OW 69
13315: IN
13316: ST_TO_ADDR
// end ;
13317: LD_VAR 0 2
13321: RET
// export function IsNotFull ( building ) ; var places ; begin
13322: LD_INT 0
13324: PPUSH
13325: PPUSH
// if not building then
13326: LD_VAR 0 1
13330: NOT
13331: IFFALSE 13335
// exit ;
13333: GO 13363
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_VAR 0 1
13344: PPUSH
13345: LD_INT 3
13347: PUSH
13348: LD_INT 62
13350: PUSH
13351: EMPTY
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PPUSH
13358: CALL_OW 72
13362: ST_TO_ADDR
// end ;
13363: LD_VAR 0 2
13367: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13368: LD_INT 0
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
// tmp := [ ] ;
13374: LD_ADDR_VAR 0 3
13378: PUSH
13379: EMPTY
13380: ST_TO_ADDR
// list := [ ] ;
13381: LD_ADDR_VAR 0 5
13385: PUSH
13386: EMPTY
13387: ST_TO_ADDR
// for i = 16 to 25 do
13388: LD_ADDR_VAR 0 4
13392: PUSH
13393: DOUBLE
13394: LD_INT 16
13396: DEC
13397: ST_TO_ADDR
13398: LD_INT 25
13400: PUSH
13401: FOR_TO
13402: IFFALSE 13475
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: LD_VAR 0 3
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_VAR 0 1
13421: PPUSH
13422: CALL_OW 255
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 91
13433: PUSH
13434: LD_VAR 0 1
13438: PUSH
13439: LD_INT 6
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 30
13449: PUSH
13450: LD_VAR 0 4
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: PPUSH
13467: CALL_OW 69
13471: ADD
13472: ST_TO_ADDR
13473: GO 13401
13475: POP
13476: POP
// for i = 1 to tmp do
13477: LD_ADDR_VAR 0 4
13481: PUSH
13482: DOUBLE
13483: LD_INT 1
13485: DEC
13486: ST_TO_ADDR
13487: LD_VAR 0 3
13491: PUSH
13492: FOR_TO
13493: IFFALSE 13581
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13495: LD_ADDR_VAR 0 5
13499: PUSH
13500: LD_VAR 0 5
13504: PUSH
13505: LD_VAR 0 3
13509: PUSH
13510: LD_VAR 0 4
13514: ARRAY
13515: PPUSH
13516: CALL_OW 266
13520: PUSH
13521: LD_VAR 0 3
13525: PUSH
13526: LD_VAR 0 4
13530: ARRAY
13531: PPUSH
13532: CALL_OW 250
13536: PUSH
13537: LD_VAR 0 3
13541: PUSH
13542: LD_VAR 0 4
13546: ARRAY
13547: PPUSH
13548: CALL_OW 251
13552: PUSH
13553: LD_VAR 0 3
13557: PUSH
13558: LD_VAR 0 4
13562: ARRAY
13563: PPUSH
13564: CALL_OW 254
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: ADD
13578: ST_TO_ADDR
13579: GO 13492
13581: POP
13582: POP
// result := list ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 5
13592: ST_TO_ADDR
// end ;
13593: LD_VAR 0 2
13597: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13598: LD_INT 0
13600: PPUSH
13601: PPUSH
13602: PPUSH
13603: PPUSH
13604: PPUSH
13605: PPUSH
13606: PPUSH
// if not factory then
13607: LD_VAR 0 1
13611: NOT
13612: IFFALSE 13616
// exit ;
13614: GO 14219
// if control = control_apeman then
13616: LD_VAR 0 4
13620: PUSH
13621: LD_INT 5
13623: EQUAL
13624: IFFALSE 13733
// begin tmp := UnitsInside ( factory ) ;
13626: LD_ADDR_VAR 0 8
13630: PUSH
13631: LD_VAR 0 1
13635: PPUSH
13636: CALL_OW 313
13640: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13641: LD_VAR 0 8
13645: PPUSH
13646: LD_INT 25
13648: PUSH
13649: LD_INT 12
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PPUSH
13656: CALL_OW 72
13660: NOT
13661: IFFALSE 13671
// control := control_manual ;
13663: LD_ADDR_VAR 0 4
13667: PUSH
13668: LD_INT 1
13670: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13671: LD_ADDR_VAR 0 8
13675: PUSH
13676: LD_VAR 0 1
13680: PPUSH
13681: CALL 13368 0 1
13685: ST_TO_ADDR
// if tmp then
13686: LD_VAR 0 8
13690: IFFALSE 13733
// begin for i in tmp do
13692: LD_ADDR_VAR 0 7
13696: PUSH
13697: LD_VAR 0 8
13701: PUSH
13702: FOR_IN
13703: IFFALSE 13731
// if i [ 1 ] = b_ext_radio then
13705: LD_VAR 0 7
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PUSH
13714: LD_INT 22
13716: EQUAL
13717: IFFALSE 13729
// begin control := control_remote ;
13719: LD_ADDR_VAR 0 4
13723: PUSH
13724: LD_INT 2
13726: ST_TO_ADDR
// break ;
13727: GO 13731
// end ;
13729: GO 13702
13731: POP
13732: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13733: LD_VAR 0 1
13737: PPUSH
13738: LD_VAR 0 2
13742: PPUSH
13743: LD_VAR 0 3
13747: PPUSH
13748: LD_VAR 0 4
13752: PPUSH
13753: LD_VAR 0 5
13757: PPUSH
13758: CALL_OW 448
13762: IFFALSE 13797
// begin result := [ chassis , engine , control , weapon ] ;
13764: LD_ADDR_VAR 0 6
13768: PUSH
13769: LD_VAR 0 2
13773: PUSH
13774: LD_VAR 0 3
13778: PUSH
13779: LD_VAR 0 4
13783: PUSH
13784: LD_VAR 0 5
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: ST_TO_ADDR
// exit ;
13795: GO 14219
// end ; _chassis := AvailableChassisList ( factory ) ;
13797: LD_ADDR_VAR 0 9
13801: PUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 475
13811: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13812: LD_ADDR_VAR 0 11
13816: PUSH
13817: LD_VAR 0 1
13821: PPUSH
13822: CALL_OW 476
13826: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13827: LD_ADDR_VAR 0 12
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 477
13841: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13842: LD_ADDR_VAR 0 10
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 478
13856: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13857: LD_VAR 0 9
13861: NOT
13862: IFTRUE 13871
13864: PUSH
13865: LD_VAR 0 11
13869: NOT
13870: OR
13871: IFTRUE 13880
13873: PUSH
13874: LD_VAR 0 12
13878: NOT
13879: OR
13880: IFTRUE 13889
13882: PUSH
13883: LD_VAR 0 10
13887: NOT
13888: OR
13889: IFFALSE 13924
// begin result := [ chassis , engine , control , weapon ] ;
13891: LD_ADDR_VAR 0 6
13895: PUSH
13896: LD_VAR 0 2
13900: PUSH
13901: LD_VAR 0 3
13905: PUSH
13906: LD_VAR 0 4
13910: PUSH
13911: LD_VAR 0 5
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: ST_TO_ADDR
// exit ;
13922: GO 14219
// end ; if not chassis in _chassis then
13924: LD_VAR 0 2
13928: PUSH
13929: LD_VAR 0 9
13933: IN
13934: NOT
13935: IFFALSE 13961
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13937: LD_ADDR_VAR 0 2
13941: PUSH
13942: LD_VAR 0 9
13946: PUSH
13947: LD_INT 1
13949: PPUSH
13950: LD_VAR 0 9
13954: PPUSH
13955: CALL_OW 12
13959: ARRAY
13960: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13961: LD_VAR 0 2
13965: PPUSH
13966: LD_VAR 0 3
13970: PPUSH
13971: CALL 14224 0 2
13975: NOT
13976: IFFALSE 14037
// repeat engine := _engine [ 1 ] ;
13978: LD_ADDR_VAR 0 3
13982: PUSH
13983: LD_VAR 0 11
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13992: LD_ADDR_VAR 0 11
13996: PUSH
13997: LD_VAR 0 11
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 3
14009: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14010: LD_VAR 0 2
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: CALL 14224 0 2
14024: IFTRUE 14035
14026: PUSH
14027: LD_VAR 0 11
14031: PUSH
14032: EMPTY
14033: EQUAL
14034: OR
14035: IFFALSE 13978
// if not control in _control then
14037: LD_VAR 0 4
14041: PUSH
14042: LD_VAR 0 12
14046: IN
14047: NOT
14048: IFFALSE 14074
// control := _control [ rand ( 1 , _control ) ] ;
14050: LD_ADDR_VAR 0 4
14054: PUSH
14055: LD_VAR 0 12
14059: PUSH
14060: LD_INT 1
14062: PPUSH
14063: LD_VAR 0 12
14067: PPUSH
14068: CALL_OW 12
14072: ARRAY
14073: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14074: LD_VAR 0 2
14078: PPUSH
14079: LD_VAR 0 5
14083: PPUSH
14084: CALL 14446 0 2
14088: NOT
14089: IFFALSE 14150
// repeat weapon := _weapon [ 1 ] ;
14091: LD_ADDR_VAR 0 5
14095: PUSH
14096: LD_VAR 0 10
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14105: LD_ADDR_VAR 0 10
14109: PUSH
14110: LD_VAR 0 10
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 3
14122: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14123: LD_VAR 0 2
14127: PPUSH
14128: LD_VAR 0 5
14132: PPUSH
14133: CALL 14446 0 2
14137: IFTRUE 14148
14139: PUSH
14140: LD_VAR 0 10
14144: PUSH
14145: EMPTY
14146: EQUAL
14147: OR
14148: IFFALSE 14091
// result := [ ] ;
14150: LD_ADDR_VAR 0 6
14154: PUSH
14155: EMPTY
14156: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14157: LD_VAR 0 1
14161: PPUSH
14162: LD_VAR 0 2
14166: PPUSH
14167: LD_VAR 0 3
14171: PPUSH
14172: LD_VAR 0 4
14176: PPUSH
14177: LD_VAR 0 5
14181: PPUSH
14182: CALL_OW 448
14186: IFFALSE 14219
// result := [ chassis , engine , control , weapon ] ;
14188: LD_ADDR_VAR 0 6
14192: PUSH
14193: LD_VAR 0 2
14197: PUSH
14198: LD_VAR 0 3
14202: PUSH
14203: LD_VAR 0 4
14207: PUSH
14208: LD_VAR 0 5
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: ST_TO_ADDR
// end ;
14219: LD_VAR 0 6
14223: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14224: LD_INT 0
14226: PPUSH
// if not chassis or not engine then
14227: LD_VAR 0 1
14231: NOT
14232: IFTRUE 14241
14234: PUSH
14235: LD_VAR 0 2
14239: NOT
14240: OR
14241: IFFALSE 14245
// exit ;
14243: GO 14441
// case engine of engine_solar :
14245: LD_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14296
14258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14259: LD_ADDR_VAR 0 3
14263: PUSH
14264: LD_INT 11
14266: PUSH
14267: LD_INT 12
14269: PUSH
14270: LD_INT 13
14272: PUSH
14273: LD_INT 14
14275: PUSH
14276: LD_INT 1
14278: PUSH
14279: LD_INT 2
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: ST_TO_ADDR
14294: GO 14425
14296: LD_INT 1
14298: DOUBLE
14299: EQUAL
14300: IFTRUE 14304
14302: GO 14366
14304: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14305: LD_ADDR_VAR 0 3
14309: PUSH
14310: LD_INT 11
14312: PUSH
14313: LD_INT 12
14315: PUSH
14316: LD_INT 13
14318: PUSH
14319: LD_INT 14
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: LD_INT 2
14327: PUSH
14328: LD_INT 3
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 5
14336: PUSH
14337: LD_INT 21
14339: PUSH
14340: LD_INT 23
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_INT 24
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: ST_TO_ADDR
14364: GO 14425
14366: LD_INT 3
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14424
14374: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14375: LD_ADDR_VAR 0 3
14379: PUSH
14380: LD_INT 13
14382: PUSH
14383: LD_INT 14
14385: PUSH
14386: LD_INT 2
14388: PUSH
14389: LD_INT 3
14391: PUSH
14392: LD_INT 4
14394: PUSH
14395: LD_INT 5
14397: PUSH
14398: LD_INT 21
14400: PUSH
14401: LD_INT 22
14403: PUSH
14404: LD_INT 23
14406: PUSH
14407: LD_INT 24
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: ST_TO_ADDR
14422: GO 14425
14424: POP
// result := ( chassis in result ) ;
14425: LD_ADDR_VAR 0 3
14429: PUSH
14430: LD_VAR 0 1
14434: PUSH
14435: LD_VAR 0 3
14439: IN
14440: ST_TO_ADDR
// end ;
14441: LD_VAR 0 3
14445: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14446: LD_INT 0
14448: PPUSH
// if not chassis or not weapon then
14449: LD_VAR 0 1
14453: NOT
14454: IFTRUE 14463
14456: PUSH
14457: LD_VAR 0 2
14461: NOT
14462: OR
14463: IFFALSE 14467
// exit ;
14465: GO 15561
// case weapon of us_machine_gun :
14467: LD_VAR 0 2
14471: PUSH
14472: LD_INT 2
14474: DOUBLE
14475: EQUAL
14476: IFTRUE 14480
14478: GO 14510
14480: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14481: LD_ADDR_VAR 0 3
14485: PUSH
14486: LD_INT 1
14488: PUSH
14489: LD_INT 2
14491: PUSH
14492: LD_INT 3
14494: PUSH
14495: LD_INT 4
14497: PUSH
14498: LD_INT 5
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: ST_TO_ADDR
14508: GO 15545
14510: LD_INT 3
14512: DOUBLE
14513: EQUAL
14514: IFTRUE 14518
14516: GO 14548
14518: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: LD_INT 3
14532: PUSH
14533: LD_INT 4
14535: PUSH
14536: LD_INT 5
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: ST_TO_ADDR
14546: GO 15545
14548: LD_INT 11
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14586
14556: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14557: LD_ADDR_VAR 0 3
14561: PUSH
14562: LD_INT 1
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: ST_TO_ADDR
14584: GO 15545
14586: LD_INT 4
14588: DOUBLE
14589: EQUAL
14590: IFTRUE 14594
14592: GO 14620
14594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14595: LD_ADDR_VAR 0 3
14599: PUSH
14600: LD_INT 2
14602: PUSH
14603: LD_INT 3
14605: PUSH
14606: LD_INT 4
14608: PUSH
14609: LD_INT 5
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: ST_TO_ADDR
14618: GO 15545
14620: LD_INT 5
14622: DOUBLE
14623: EQUAL
14624: IFTRUE 14628
14626: GO 14654
14628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14629: LD_ADDR_VAR 0 3
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: LD_INT 3
14639: PUSH
14640: LD_INT 4
14642: PUSH
14643: LD_INT 5
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: ST_TO_ADDR
14652: GO 15545
14654: LD_INT 9
14656: DOUBLE
14657: EQUAL
14658: IFTRUE 14662
14660: GO 14688
14662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_INT 2
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 4
14676: PUSH
14677: LD_INT 5
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: ST_TO_ADDR
14686: GO 15545
14688: LD_INT 7
14690: DOUBLE
14691: EQUAL
14692: IFTRUE 14696
14694: GO 14722
14696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14697: LD_ADDR_VAR 0 3
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: LD_INT 4
14710: PUSH
14711: LD_INT 5
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: ST_TO_ADDR
14720: GO 15545
14722: LD_INT 12
14724: DOUBLE
14725: EQUAL
14726: IFTRUE 14730
14728: GO 14756
14730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14731: LD_ADDR_VAR 0 3
14735: PUSH
14736: LD_INT 2
14738: PUSH
14739: LD_INT 3
14741: PUSH
14742: LD_INT 4
14744: PUSH
14745: LD_INT 5
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: ST_TO_ADDR
14754: GO 15545
14756: LD_INT 13
14758: DOUBLE
14759: EQUAL
14760: IFTRUE 14764
14762: GO 14790
14764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: LD_INT 4
14778: PUSH
14779: LD_INT 5
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: ST_TO_ADDR
14788: GO 15545
14790: LD_INT 14
14792: DOUBLE
14793: EQUAL
14794: IFTRUE 14798
14796: GO 14816
14798: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14799: LD_ADDR_VAR 0 3
14803: PUSH
14804: LD_INT 4
14806: PUSH
14807: LD_INT 5
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: ST_TO_ADDR
14814: GO 15545
14816: LD_INT 6
14818: DOUBLE
14819: EQUAL
14820: IFTRUE 14824
14822: GO 14842
14824: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14825: LD_ADDR_VAR 0 3
14829: PUSH
14830: LD_INT 4
14832: PUSH
14833: LD_INT 5
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: ST_TO_ADDR
14840: GO 15545
14842: LD_INT 10
14844: DOUBLE
14845: EQUAL
14846: IFTRUE 14850
14848: GO 14868
14850: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14851: LD_ADDR_VAR 0 3
14855: PUSH
14856: LD_INT 4
14858: PUSH
14859: LD_INT 5
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: ST_TO_ADDR
14866: GO 15545
14868: LD_INT 22
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 14902
14876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14877: LD_ADDR_VAR 0 3
14881: PUSH
14882: LD_INT 11
14884: PUSH
14885: LD_INT 12
14887: PUSH
14888: LD_INT 13
14890: PUSH
14891: LD_INT 14
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: ST_TO_ADDR
14900: GO 15545
14902: LD_INT 23
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 14936
14910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14911: LD_ADDR_VAR 0 3
14915: PUSH
14916: LD_INT 11
14918: PUSH
14919: LD_INT 12
14921: PUSH
14922: LD_INT 13
14924: PUSH
14925: LD_INT 14
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: ST_TO_ADDR
14934: GO 15545
14936: LD_INT 24
14938: DOUBLE
14939: EQUAL
14940: IFTRUE 14944
14942: GO 14970
14944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14945: LD_ADDR_VAR 0 3
14949: PUSH
14950: LD_INT 11
14952: PUSH
14953: LD_INT 12
14955: PUSH
14956: LD_INT 13
14958: PUSH
14959: LD_INT 14
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: ST_TO_ADDR
14968: GO 15545
14970: LD_INT 30
14972: DOUBLE
14973: EQUAL
14974: IFTRUE 14978
14976: GO 15004
14978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14979: LD_ADDR_VAR 0 3
14983: PUSH
14984: LD_INT 11
14986: PUSH
14987: LD_INT 12
14989: PUSH
14990: LD_INT 13
14992: PUSH
14993: LD_INT 14
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: ST_TO_ADDR
15002: GO 15545
15004: LD_INT 25
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15030
15012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: LD_INT 13
15020: PUSH
15021: LD_INT 14
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: ST_TO_ADDR
15028: GO 15545
15030: LD_INT 27
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15056
15038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15039: LD_ADDR_VAR 0 3
15043: PUSH
15044: LD_INT 13
15046: PUSH
15047: LD_INT 14
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: ST_TO_ADDR
15054: GO 15545
15056: LD_INT 92
15058: DOUBLE
15059: EQUAL
15060: IFTRUE 15064
15062: GO 15090
15064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15065: LD_ADDR_VAR 0 3
15069: PUSH
15070: LD_INT 11
15072: PUSH
15073: LD_INT 12
15075: PUSH
15076: LD_INT 13
15078: PUSH
15079: LD_INT 14
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: ST_TO_ADDR
15088: GO 15545
15090: LD_INT 28
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15116
15098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15099: LD_ADDR_VAR 0 3
15103: PUSH
15104: LD_INT 13
15106: PUSH
15107: LD_INT 14
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: ST_TO_ADDR
15114: GO 15545
15116: LD_INT 29
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15124
15122: GO 15142
15124: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_INT 13
15132: PUSH
15133: LD_INT 14
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: ST_TO_ADDR
15140: GO 15545
15142: LD_INT 31
15144: DOUBLE
15145: EQUAL
15146: IFTRUE 15150
15148: GO 15168
15150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15151: LD_ADDR_VAR 0 3
15155: PUSH
15156: LD_INT 13
15158: PUSH
15159: LD_INT 14
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: ST_TO_ADDR
15166: GO 15545
15168: LD_INT 26
15170: DOUBLE
15171: EQUAL
15172: IFTRUE 15176
15174: GO 15194
15176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15177: LD_ADDR_VAR 0 3
15181: PUSH
15182: LD_INT 13
15184: PUSH
15185: LD_INT 14
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: ST_TO_ADDR
15192: GO 15545
15194: LD_INT 42
15196: DOUBLE
15197: EQUAL
15198: IFTRUE 15202
15200: GO 15228
15202: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15203: LD_ADDR_VAR 0 3
15207: PUSH
15208: LD_INT 21
15210: PUSH
15211: LD_INT 22
15213: PUSH
15214: LD_INT 23
15216: PUSH
15217: LD_INT 24
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: ST_TO_ADDR
15226: GO 15545
15228: LD_INT 43
15230: DOUBLE
15231: EQUAL
15232: IFTRUE 15236
15234: GO 15262
15236: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15237: LD_ADDR_VAR 0 3
15241: PUSH
15242: LD_INT 21
15244: PUSH
15245: LD_INT 22
15247: PUSH
15248: LD_INT 23
15250: PUSH
15251: LD_INT 24
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: ST_TO_ADDR
15260: GO 15545
15262: LD_INT 44
15264: DOUBLE
15265: EQUAL
15266: IFTRUE 15270
15268: GO 15296
15270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15271: LD_ADDR_VAR 0 3
15275: PUSH
15276: LD_INT 21
15278: PUSH
15279: LD_INT 22
15281: PUSH
15282: LD_INT 23
15284: PUSH
15285: LD_INT 24
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: ST_TO_ADDR
15294: GO 15545
15296: LD_INT 45
15298: DOUBLE
15299: EQUAL
15300: IFTRUE 15304
15302: GO 15330
15304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15305: LD_ADDR_VAR 0 3
15309: PUSH
15310: LD_INT 21
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_INT 23
15318: PUSH
15319: LD_INT 24
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: ST_TO_ADDR
15328: GO 15545
15330: LD_INT 49
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15364
15338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15339: LD_ADDR_VAR 0 3
15343: PUSH
15344: LD_INT 21
15346: PUSH
15347: LD_INT 22
15349: PUSH
15350: LD_INT 23
15352: PUSH
15353: LD_INT 24
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: ST_TO_ADDR
15362: GO 15545
15364: LD_INT 51
15366: DOUBLE
15367: EQUAL
15368: IFTRUE 15372
15370: GO 15398
15372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15373: LD_ADDR_VAR 0 3
15377: PUSH
15378: LD_INT 21
15380: PUSH
15381: LD_INT 22
15383: PUSH
15384: LD_INT 23
15386: PUSH
15387: LD_INT 24
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: ST_TO_ADDR
15396: GO 15545
15398: LD_INT 52
15400: DOUBLE
15401: EQUAL
15402: IFTRUE 15406
15404: GO 15432
15406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15407: LD_ADDR_VAR 0 3
15411: PUSH
15412: LD_INT 21
15414: PUSH
15415: LD_INT 22
15417: PUSH
15418: LD_INT 23
15420: PUSH
15421: LD_INT 24
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: ST_TO_ADDR
15430: GO 15545
15432: LD_INT 53
15434: DOUBLE
15435: EQUAL
15436: IFTRUE 15440
15438: GO 15458
15440: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15441: LD_ADDR_VAR 0 3
15445: PUSH
15446: LD_INT 23
15448: PUSH
15449: LD_INT 24
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: ST_TO_ADDR
15456: GO 15545
15458: LD_INT 46
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15484
15466: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15467: LD_ADDR_VAR 0 3
15471: PUSH
15472: LD_INT 23
15474: PUSH
15475: LD_INT 24
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: ST_TO_ADDR
15482: GO 15545
15484: LD_INT 47
15486: DOUBLE
15487: EQUAL
15488: IFTRUE 15492
15490: GO 15510
15492: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: LD_INT 23
15500: PUSH
15501: LD_INT 24
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: ST_TO_ADDR
15508: GO 15545
15510: LD_INT 98
15512: DOUBLE
15513: EQUAL
15514: IFTRUE 15518
15516: GO 15544
15518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_INT 21
15526: PUSH
15527: LD_INT 22
15529: PUSH
15530: LD_INT 23
15532: PUSH
15533: LD_INT 24
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: ST_TO_ADDR
15542: GO 15545
15544: POP
// result := ( chassis in result ) ;
15545: LD_ADDR_VAR 0 3
15549: PUSH
15550: LD_VAR 0 1
15554: PUSH
15555: LD_VAR 0 3
15559: IN
15560: ST_TO_ADDR
// end ;
15561: LD_VAR 0 3
15565: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15566: LD_INT 0
15568: PPUSH
15569: PPUSH
15570: PPUSH
15571: PPUSH
15572: PPUSH
15573: PPUSH
15574: PPUSH
// result := array ;
15575: LD_ADDR_VAR 0 5
15579: PUSH
15580: LD_VAR 0 1
15584: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15585: LD_VAR 0 1
15589: NOT
15590: IFTRUE 15599
15592: PUSH
15593: LD_VAR 0 2
15597: NOT
15598: OR
15599: IFTRUE 15608
15601: PUSH
15602: LD_VAR 0 3
15606: NOT
15607: OR
15608: IFTRUE 15622
15610: PUSH
15611: LD_VAR 0 2
15615: PUSH
15616: LD_VAR 0 1
15620: GREATER
15621: OR
15622: IFTRUE 15636
15624: PUSH
15625: LD_VAR 0 3
15629: PUSH
15630: LD_VAR 0 1
15634: GREATER
15635: OR
15636: IFFALSE 15640
// exit ;
15638: GO 15936
// if direction then
15640: LD_VAR 0 4
15644: IFFALSE 15708
// begin d := 1 ;
15646: LD_ADDR_VAR 0 9
15650: PUSH
15651: LD_INT 1
15653: ST_TO_ADDR
// if i_from > i_to then
15654: LD_VAR 0 2
15658: PUSH
15659: LD_VAR 0 3
15663: GREATER
15664: IFFALSE 15690
// length := ( array - i_from ) + i_to else
15666: LD_ADDR_VAR 0 11
15670: PUSH
15671: LD_VAR 0 1
15675: PUSH
15676: LD_VAR 0 2
15680: MINUS
15681: PUSH
15682: LD_VAR 0 3
15686: PLUS
15687: ST_TO_ADDR
15688: GO 15706
// length := i_to - i_from ;
15690: LD_ADDR_VAR 0 11
15694: PUSH
15695: LD_VAR 0 3
15699: PUSH
15700: LD_VAR 0 2
15704: MINUS
15705: ST_TO_ADDR
// end else
15706: GO 15769
// begin d := - 1 ;
15708: LD_ADDR_VAR 0 9
15712: PUSH
15713: LD_INT 1
15715: NEG
15716: ST_TO_ADDR
// if i_from > i_to then
15717: LD_VAR 0 2
15721: PUSH
15722: LD_VAR 0 3
15726: GREATER
15727: IFFALSE 15747
// length := i_from - i_to else
15729: LD_ADDR_VAR 0 11
15733: PUSH
15734: LD_VAR 0 2
15738: PUSH
15739: LD_VAR 0 3
15743: MINUS
15744: ST_TO_ADDR
15745: GO 15769
// length := ( array - i_to ) + i_from ;
15747: LD_ADDR_VAR 0 11
15751: PUSH
15752: LD_VAR 0 1
15756: PUSH
15757: LD_VAR 0 3
15761: MINUS
15762: PUSH
15763: LD_VAR 0 2
15767: PLUS
15768: ST_TO_ADDR
// end ; if not length then
15769: LD_VAR 0 11
15773: NOT
15774: IFFALSE 15778
// exit ;
15776: GO 15936
// tmp := array ;
15778: LD_ADDR_VAR 0 10
15782: PUSH
15783: LD_VAR 0 1
15787: ST_TO_ADDR
// for i = 1 to length do
15788: LD_ADDR_VAR 0 6
15792: PUSH
15793: DOUBLE
15794: LD_INT 1
15796: DEC
15797: ST_TO_ADDR
15798: LD_VAR 0 11
15802: PUSH
15803: FOR_TO
15804: IFFALSE 15924
// begin for j = 1 to array do
15806: LD_ADDR_VAR 0 7
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_VAR 0 1
15820: PUSH
15821: FOR_TO
15822: IFFALSE 15910
// begin k := j + d ;
15824: LD_ADDR_VAR 0 8
15828: PUSH
15829: LD_VAR 0 7
15833: PUSH
15834: LD_VAR 0 9
15838: PLUS
15839: ST_TO_ADDR
// if k > array then
15840: LD_VAR 0 8
15844: PUSH
15845: LD_VAR 0 1
15849: GREATER
15850: IFFALSE 15860
// k := 1 ;
15852: LD_ADDR_VAR 0 8
15856: PUSH
15857: LD_INT 1
15859: ST_TO_ADDR
// if not k then
15860: LD_VAR 0 8
15864: NOT
15865: IFFALSE 15877
// k := array ;
15867: LD_ADDR_VAR 0 8
15871: PUSH
15872: LD_VAR 0 1
15876: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15877: LD_ADDR_VAR 0 10
15881: PUSH
15882: LD_VAR 0 10
15886: PPUSH
15887: LD_VAR 0 8
15891: PPUSH
15892: LD_VAR 0 1
15896: PUSH
15897: LD_VAR 0 7
15901: ARRAY
15902: PPUSH
15903: CALL_OW 1
15907: ST_TO_ADDR
// end ;
15908: GO 15821
15910: POP
15911: POP
// array := tmp ;
15912: LD_ADDR_VAR 0 1
15916: PUSH
15917: LD_VAR 0 10
15921: ST_TO_ADDR
// end ;
15922: GO 15803
15924: POP
15925: POP
// result := array ;
15926: LD_ADDR_VAR 0 5
15930: PUSH
15931: LD_VAR 0 1
15935: ST_TO_ADDR
// end ;
15936: LD_VAR 0 5
15940: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15941: LD_INT 0
15943: PPUSH
15944: PPUSH
// result := 0 ;
15945: LD_ADDR_VAR 0 3
15949: PUSH
15950: LD_INT 0
15952: ST_TO_ADDR
// if not array or not value in array then
15953: LD_VAR 0 1
15957: NOT
15958: IFTRUE 15973
15960: PUSH
15961: LD_VAR 0 2
15965: PUSH
15966: LD_VAR 0 1
15970: IN
15971: NOT
15972: OR
15973: IFFALSE 15977
// exit ;
15975: GO 16031
// for i = 1 to array do
15977: LD_ADDR_VAR 0 4
15981: PUSH
15982: DOUBLE
15983: LD_INT 1
15985: DEC
15986: ST_TO_ADDR
15987: LD_VAR 0 1
15991: PUSH
15992: FOR_TO
15993: IFFALSE 16029
// if value = array [ i ] then
15995: LD_VAR 0 2
15999: PUSH
16000: LD_VAR 0 1
16004: PUSH
16005: LD_VAR 0 4
16009: ARRAY
16010: EQUAL
16011: IFFALSE 16027
// begin result := i ;
16013: LD_ADDR_VAR 0 3
16017: PUSH
16018: LD_VAR 0 4
16022: ST_TO_ADDR
// exit ;
16023: POP
16024: POP
16025: GO 16031
// end ;
16027: GO 15992
16029: POP
16030: POP
// end ;
16031: LD_VAR 0 3
16035: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16036: LD_INT 0
16038: PPUSH
// vc_chassis := chassis ;
16039: LD_ADDR_OWVAR 37
16043: PUSH
16044: LD_VAR 0 1
16048: ST_TO_ADDR
// vc_engine := engine ;
16049: LD_ADDR_OWVAR 39
16053: PUSH
16054: LD_VAR 0 2
16058: ST_TO_ADDR
// vc_control := control ;
16059: LD_ADDR_OWVAR 38
16063: PUSH
16064: LD_VAR 0 3
16068: ST_TO_ADDR
// vc_weapon := weapon ;
16069: LD_ADDR_OWVAR 40
16073: PUSH
16074: LD_VAR 0 4
16078: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16079: LD_ADDR_OWVAR 41
16083: PUSH
16084: LD_VAR 0 5
16088: ST_TO_ADDR
// end ;
16089: LD_VAR 0 6
16093: RET
// export function WantPlant ( unit ) ; var task ; begin
16094: LD_INT 0
16096: PPUSH
16097: PPUSH
// result := false ;
16098: LD_ADDR_VAR 0 2
16102: PUSH
16103: LD_INT 0
16105: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16106: LD_ADDR_VAR 0 3
16110: PUSH
16111: LD_VAR 0 1
16115: PPUSH
16116: CALL_OW 437
16120: ST_TO_ADDR
// if task then
16121: LD_VAR 0 3
16125: IFFALSE 16153
// if task [ 1 ] [ 1 ] = p then
16127: LD_VAR 0 3
16131: PUSH
16132: LD_INT 1
16134: ARRAY
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PUSH
16140: LD_STRING p
16142: EQUAL
16143: IFFALSE 16153
// result := true ;
16145: LD_ADDR_VAR 0 2
16149: PUSH
16150: LD_INT 1
16152: ST_TO_ADDR
// end ;
16153: LD_VAR 0 2
16157: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16158: LD_INT 0
16160: PPUSH
16161: PPUSH
16162: PPUSH
16163: PPUSH
// if pos < 1 then
16164: LD_VAR 0 2
16168: PUSH
16169: LD_INT 1
16171: LESS
16172: IFFALSE 16176
// exit ;
16174: GO 16479
// if pos = 1 then
16176: LD_VAR 0 2
16180: PUSH
16181: LD_INT 1
16183: EQUAL
16184: IFFALSE 16217
// result := Replace ( arr , pos [ 1 ] , value ) else
16186: LD_ADDR_VAR 0 4
16190: PUSH
16191: LD_VAR 0 1
16195: PPUSH
16196: LD_VAR 0 2
16200: PUSH
16201: LD_INT 1
16203: ARRAY
16204: PPUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: CALL_OW 1
16214: ST_TO_ADDR
16215: GO 16479
// begin tmp := arr ;
16217: LD_ADDR_VAR 0 6
16221: PUSH
16222: LD_VAR 0 1
16226: ST_TO_ADDR
// s_arr := [ tmp ] ;
16227: LD_ADDR_VAR 0 7
16231: PUSH
16232: LD_VAR 0 6
16236: PUSH
16237: EMPTY
16238: LIST
16239: ST_TO_ADDR
// for i = 1 to pos - 1 do
16240: LD_ADDR_VAR 0 5
16244: PUSH
16245: DOUBLE
16246: LD_INT 1
16248: DEC
16249: ST_TO_ADDR
16250: LD_VAR 0 2
16254: PUSH
16255: LD_INT 1
16257: MINUS
16258: PUSH
16259: FOR_TO
16260: IFFALSE 16305
// begin tmp := tmp [ pos [ i ] ] ;
16262: LD_ADDR_VAR 0 6
16266: PUSH
16267: LD_VAR 0 6
16271: PUSH
16272: LD_VAR 0 2
16276: PUSH
16277: LD_VAR 0 5
16281: ARRAY
16282: ARRAY
16283: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16284: LD_ADDR_VAR 0 7
16288: PUSH
16289: LD_VAR 0 7
16293: PUSH
16294: LD_VAR 0 6
16298: PUSH
16299: EMPTY
16300: LIST
16301: ADD
16302: ST_TO_ADDR
// end ;
16303: GO 16259
16305: POP
16306: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16307: LD_ADDR_VAR 0 6
16311: PUSH
16312: LD_VAR 0 6
16316: PPUSH
16317: LD_VAR 0 2
16321: PUSH
16322: LD_VAR 0 2
16326: ARRAY
16327: PPUSH
16328: LD_VAR 0 3
16332: PPUSH
16333: CALL_OW 1
16337: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16338: LD_ADDR_VAR 0 7
16342: PUSH
16343: LD_VAR 0 7
16347: PPUSH
16348: LD_VAR 0 7
16352: PPUSH
16353: LD_VAR 0 6
16357: PPUSH
16358: CALL_OW 1
16362: ST_TO_ADDR
// for i = s_arr downto 2 do
16363: LD_ADDR_VAR 0 5
16367: PUSH
16368: DOUBLE
16369: LD_VAR 0 7
16373: INC
16374: ST_TO_ADDR
16375: LD_INT 2
16377: PUSH
16378: FOR_DOWNTO
16379: IFFALSE 16463
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16381: LD_ADDR_VAR 0 6
16385: PUSH
16386: LD_VAR 0 7
16390: PUSH
16391: LD_VAR 0 5
16395: PUSH
16396: LD_INT 1
16398: MINUS
16399: ARRAY
16400: PPUSH
16401: LD_VAR 0 2
16405: PUSH
16406: LD_VAR 0 5
16410: PUSH
16411: LD_INT 1
16413: MINUS
16414: ARRAY
16415: PPUSH
16416: LD_VAR 0 7
16420: PUSH
16421: LD_VAR 0 5
16425: ARRAY
16426: PPUSH
16427: CALL_OW 1
16431: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16432: LD_ADDR_VAR 0 7
16436: PUSH
16437: LD_VAR 0 7
16441: PPUSH
16442: LD_VAR 0 5
16446: PUSH
16447: LD_INT 1
16449: MINUS
16450: PPUSH
16451: LD_VAR 0 6
16455: PPUSH
16456: CALL_OW 1
16460: ST_TO_ADDR
// end ;
16461: GO 16378
16463: POP
16464: POP
// result := s_arr [ 1 ] ;
16465: LD_ADDR_VAR 0 4
16469: PUSH
16470: LD_VAR 0 7
16474: PUSH
16475: LD_INT 1
16477: ARRAY
16478: ST_TO_ADDR
// end ; end ;
16479: LD_VAR 0 4
16483: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16484: LD_INT 0
16486: PPUSH
16487: PPUSH
// if not list then
16488: LD_VAR 0 1
16492: NOT
16493: IFFALSE 16497
// exit ;
16495: GO 16588
// i := list [ pos1 ] ;
16497: LD_ADDR_VAR 0 5
16501: PUSH
16502: LD_VAR 0 1
16506: PUSH
16507: LD_VAR 0 2
16511: ARRAY
16512: ST_TO_ADDR
// if not i then
16513: LD_VAR 0 5
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16588
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_VAR 0 2
16536: PPUSH
16537: LD_VAR 0 1
16541: PUSH
16542: LD_VAR 0 3
16546: ARRAY
16547: PPUSH
16548: CALL_OW 1
16552: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16553: LD_ADDR_VAR 0 1
16557: PUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: LD_VAR 0 3
16567: PPUSH
16568: LD_VAR 0 5
16572: PPUSH
16573: CALL_OW 1
16577: ST_TO_ADDR
// result := list ;
16578: LD_ADDR_VAR 0 4
16582: PUSH
16583: LD_VAR 0 1
16587: ST_TO_ADDR
// end ;
16588: LD_VAR 0 4
16592: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16593: LD_INT 0
16595: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16596: LD_ADDR_VAR 0 5
16600: PUSH
16601: LD_VAR 0 1
16605: PPUSH
16606: CALL_OW 250
16610: PPUSH
16611: LD_VAR 0 1
16615: PPUSH
16616: CALL_OW 251
16620: PPUSH
16621: LD_VAR 0 2
16625: PPUSH
16626: LD_VAR 0 3
16630: PPUSH
16631: LD_VAR 0 4
16635: PPUSH
16636: CALL 17018 0 5
16640: ST_TO_ADDR
// end ;
16641: LD_VAR 0 5
16645: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16646: LD_INT 0
16648: PPUSH
16649: PPUSH
16650: PPUSH
16651: PPUSH
// if not list or not unit then
16652: LD_VAR 0 2
16656: NOT
16657: IFTRUE 16666
16659: PUSH
16660: LD_VAR 0 1
16664: NOT
16665: OR
16666: IFFALSE 16670
// exit ;
16668: GO 17013
// result := [ ] ;
16670: LD_ADDR_VAR 0 5
16674: PUSH
16675: EMPTY
16676: ST_TO_ADDR
// for i in list do
16677: LD_ADDR_VAR 0 6
16681: PUSH
16682: LD_VAR 0 2
16686: PUSH
16687: FOR_IN
16688: IFFALSE 16906
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16690: LD_ADDR_VAR 0 8
16694: PUSH
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_VAR 0 6
16704: PUSH
16705: LD_INT 1
16707: ARRAY
16708: PPUSH
16709: LD_VAR 0 6
16713: PUSH
16714: LD_INT 2
16716: ARRAY
16717: PPUSH
16718: CALL_OW 297
16722: ST_TO_ADDR
// if not Count ( result ) then
16723: LD_VAR 0 5
16727: PPUSH
16728: CALL 13240 0 1
16732: NOT
16733: IFFALSE 16766
// begin result := Join ( result , [ i , tmp ] ) ;
16735: LD_ADDR_VAR 0 5
16739: PUSH
16740: LD_VAR 0 5
16744: PPUSH
16745: LD_VAR 0 6
16749: PUSH
16750: LD_VAR 0 8
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PPUSH
16759: CALL 49216 0 2
16763: ST_TO_ADDR
// continue ;
16764: GO 16687
// end ; if result [ result ] [ 2 ] <= tmp then
16766: LD_VAR 0 5
16770: PUSH
16771: LD_VAR 0 5
16775: ARRAY
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: PUSH
16781: LD_VAR 0 8
16785: LESSEQUAL
16786: IFFALSE 16819
// result := Join ( result , [ i , tmp ] ) else
16788: LD_ADDR_VAR 0 5
16792: PUSH
16793: LD_VAR 0 5
16797: PPUSH
16798: LD_VAR 0 6
16802: PUSH
16803: LD_VAR 0 8
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL 49216 0 2
16816: ST_TO_ADDR
16817: GO 16904
// begin for j := 1 to Count ( result ) do
16819: LD_ADDR_VAR 0 7
16823: PUSH
16824: DOUBLE
16825: LD_INT 1
16827: DEC
16828: ST_TO_ADDR
16829: LD_VAR 0 5
16833: PPUSH
16834: CALL 13240 0 1
16838: PUSH
16839: FOR_TO
16840: IFFALSE 16902
// begin if tmp < result [ j ] [ 2 ] then
16842: LD_VAR 0 8
16846: PUSH
16847: LD_VAR 0 5
16851: PUSH
16852: LD_VAR 0 7
16856: ARRAY
16857: PUSH
16858: LD_INT 2
16860: ARRAY
16861: LESS
16862: IFFALSE 16900
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16864: LD_ADDR_VAR 0 5
16868: PUSH
16869: LD_VAR 0 5
16873: PPUSH
16874: LD_VAR 0 7
16878: PPUSH
16879: LD_VAR 0 6
16883: PUSH
16884: LD_VAR 0 8
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 2
16897: ST_TO_ADDR
// break ;
16898: GO 16902
// end ; end ;
16900: GO 16839
16902: POP
16903: POP
// end ; end ;
16904: GO 16687
16906: POP
16907: POP
// if result and not asc then
16908: LD_VAR 0 5
16912: IFFALSE 16921
16914: PUSH
16915: LD_VAR 0 3
16919: NOT
16920: AND
16921: IFFALSE 16938
// result := ReverseArray ( result ) ;
16923: LD_ADDR_VAR 0 5
16927: PUSH
16928: LD_VAR 0 5
16932: PPUSH
16933: CALL 44296 0 1
16937: ST_TO_ADDR
// tmp := [ ] ;
16938: LD_ADDR_VAR 0 8
16942: PUSH
16943: EMPTY
16944: ST_TO_ADDR
// if mode then
16945: LD_VAR 0 4
16949: IFFALSE 17013
// begin for i := 1 to result do
16951: LD_ADDR_VAR 0 6
16955: PUSH
16956: DOUBLE
16957: LD_INT 1
16959: DEC
16960: ST_TO_ADDR
16961: LD_VAR 0 5
16965: PUSH
16966: FOR_TO
16967: IFFALSE 17001
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16969: LD_ADDR_VAR 0 8
16973: PUSH
16974: LD_VAR 0 8
16978: PPUSH
16979: LD_VAR 0 5
16983: PUSH
16984: LD_VAR 0 6
16988: ARRAY
16989: PUSH
16990: LD_INT 1
16992: ARRAY
16993: PPUSH
16994: CALL 49216 0 2
16998: ST_TO_ADDR
16999: GO 16966
17001: POP
17002: POP
// result := tmp ;
17003: LD_ADDR_VAR 0 5
17007: PUSH
17008: LD_VAR 0 8
17012: ST_TO_ADDR
// end ; end ;
17013: LD_VAR 0 5
17017: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
17022: PPUSH
17023: PPUSH
// if not list then
17024: LD_VAR 0 3
17028: NOT
17029: IFFALSE 17033
// exit ;
17031: GO 17423
// result := [ ] ;
17033: LD_ADDR_VAR 0 6
17037: PUSH
17038: EMPTY
17039: ST_TO_ADDR
// for i in list do
17040: LD_ADDR_VAR 0 7
17044: PUSH
17045: LD_VAR 0 3
17049: PUSH
17050: FOR_IN
17051: IFFALSE 17253
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17053: LD_ADDR_VAR 0 9
17057: PUSH
17058: LD_VAR 0 7
17062: PPUSH
17063: LD_VAR 0 1
17067: PPUSH
17068: LD_VAR 0 2
17072: PPUSH
17073: CALL_OW 297
17077: ST_TO_ADDR
// if not result then
17078: LD_VAR 0 6
17082: NOT
17083: IFFALSE 17109
// result := [ [ i , tmp ] ] else
17085: LD_ADDR_VAR 0 6
17089: PUSH
17090: LD_VAR 0 7
17094: PUSH
17095: LD_VAR 0 9
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: ST_TO_ADDR
17107: GO 17251
// begin if result [ result ] [ 2 ] <= tmp then
17109: LD_VAR 0 6
17113: PUSH
17114: LD_VAR 0 6
17118: ARRAY
17119: PUSH
17120: LD_INT 2
17122: ARRAY
17123: PUSH
17124: LD_VAR 0 9
17128: LESSEQUAL
17129: IFFALSE 17171
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17131: LD_ADDR_VAR 0 6
17135: PUSH
17136: LD_VAR 0 6
17140: PPUSH
17141: LD_VAR 0 6
17145: PUSH
17146: LD_INT 1
17148: PLUS
17149: PPUSH
17150: LD_VAR 0 7
17154: PUSH
17155: LD_VAR 0 9
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PPUSH
17164: CALL_OW 2
17168: ST_TO_ADDR
17169: GO 17251
// for j := 1 to result do
17171: LD_ADDR_VAR 0 8
17175: PUSH
17176: DOUBLE
17177: LD_INT 1
17179: DEC
17180: ST_TO_ADDR
17181: LD_VAR 0 6
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17249
// begin if tmp < result [ j ] [ 2 ] then
17189: LD_VAR 0 9
17193: PUSH
17194: LD_VAR 0 6
17198: PUSH
17199: LD_VAR 0 8
17203: ARRAY
17204: PUSH
17205: LD_INT 2
17207: ARRAY
17208: LESS
17209: IFFALSE 17247
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17211: LD_ADDR_VAR 0 6
17215: PUSH
17216: LD_VAR 0 6
17220: PPUSH
17221: LD_VAR 0 8
17225: PPUSH
17226: LD_VAR 0 7
17230: PUSH
17231: LD_VAR 0 9
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 2
17244: ST_TO_ADDR
// break ;
17245: GO 17249
// end ; end ;
17247: GO 17186
17249: POP
17250: POP
// end ; end ;
17251: GO 17050
17253: POP
17254: POP
// if result and not asc then
17255: LD_VAR 0 6
17259: IFFALSE 17268
17261: PUSH
17262: LD_VAR 0 4
17266: NOT
17267: AND
17268: IFFALSE 17343
// begin tmp := result ;
17270: LD_ADDR_VAR 0 9
17274: PUSH
17275: LD_VAR 0 6
17279: ST_TO_ADDR
// for i = tmp downto 1 do
17280: LD_ADDR_VAR 0 7
17284: PUSH
17285: DOUBLE
17286: LD_VAR 0 9
17290: INC
17291: ST_TO_ADDR
17292: LD_INT 1
17294: PUSH
17295: FOR_DOWNTO
17296: IFFALSE 17341
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17298: LD_ADDR_VAR 0 6
17302: PUSH
17303: LD_VAR 0 6
17307: PPUSH
17308: LD_VAR 0 9
17312: PUSH
17313: LD_VAR 0 7
17317: MINUS
17318: PUSH
17319: LD_INT 1
17321: PLUS
17322: PPUSH
17323: LD_VAR 0 9
17327: PUSH
17328: LD_VAR 0 7
17332: ARRAY
17333: PPUSH
17334: CALL_OW 1
17338: ST_TO_ADDR
17339: GO 17295
17341: POP
17342: POP
// end ; tmp := [ ] ;
17343: LD_ADDR_VAR 0 9
17347: PUSH
17348: EMPTY
17349: ST_TO_ADDR
// if mode then
17350: LD_VAR 0 5
17354: IFFALSE 17423
// begin for i = 1 to result do
17356: LD_ADDR_VAR 0 7
17360: PUSH
17361: DOUBLE
17362: LD_INT 1
17364: DEC
17365: ST_TO_ADDR
17366: LD_VAR 0 6
17370: PUSH
17371: FOR_TO
17372: IFFALSE 17411
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17374: LD_ADDR_VAR 0 9
17378: PUSH
17379: LD_VAR 0 9
17383: PPUSH
17384: LD_VAR 0 7
17388: PPUSH
17389: LD_VAR 0 6
17393: PUSH
17394: LD_VAR 0 7
17398: ARRAY
17399: PUSH
17400: LD_INT 1
17402: ARRAY
17403: PPUSH
17404: CALL_OW 1
17408: ST_TO_ADDR
17409: GO 17371
17411: POP
17412: POP
// result := tmp ;
17413: LD_ADDR_VAR 0 6
17417: PUSH
17418: LD_VAR 0 9
17422: ST_TO_ADDR
// end ; end ;
17423: LD_VAR 0 6
17427: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
17434: PPUSH
17435: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17436: LD_ADDR_VAR 0 5
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: LD_INT 0
17449: PUSH
17450: EMPTY
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: ST_TO_ADDR
// if not x or not y then
17458: LD_VAR 0 2
17462: NOT
17463: IFTRUE 17472
17465: PUSH
17466: LD_VAR 0 3
17470: NOT
17471: OR
17472: IFFALSE 17476
// exit ;
17474: GO 19132
// if not range then
17476: LD_VAR 0 4
17480: NOT
17481: IFFALSE 17491
// range := 10 ;
17483: LD_ADDR_VAR 0 4
17487: PUSH
17488: LD_INT 10
17490: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17491: LD_ADDR_VAR 0 8
17495: PUSH
17496: LD_INT 81
17498: PUSH
17499: LD_VAR 0 1
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 92
17510: PUSH
17511: LD_VAR 0 2
17515: PUSH
17516: LD_VAR 0 3
17520: PUSH
17521: LD_VAR 0 4
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 3
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: PPUSH
17554: CALL_OW 69
17558: ST_TO_ADDR
// if not tmp then
17559: LD_VAR 0 8
17563: NOT
17564: IFFALSE 17568
// exit ;
17566: GO 19132
// for i in tmp do
17568: LD_ADDR_VAR 0 6
17572: PUSH
17573: LD_VAR 0 8
17577: PUSH
17578: FOR_IN
17579: IFFALSE 19107
// begin points := [ 0 , 0 , 0 ] ;
17581: LD_ADDR_VAR 0 9
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: LD_INT 0
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: ST_TO_ADDR
// bpoints := 1 ;
17600: LD_ADDR_VAR 0 10
17604: PUSH
17605: LD_INT 1
17607: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17608: LD_VAR 0 6
17612: PPUSH
17613: CALL_OW 247
17617: PUSH
17618: LD_INT 1
17620: DOUBLE
17621: EQUAL
17622: IFTRUE 17626
17624: GO 18208
17626: POP
// begin if GetClass ( i ) = 1 then
17627: LD_VAR 0 6
17631: PPUSH
17632: CALL_OW 257
17636: PUSH
17637: LD_INT 1
17639: EQUAL
17640: IFFALSE 17661
// points := [ 10 , 5 , 3 ] ;
17642: LD_ADDR_VAR 0 9
17646: PUSH
17647: LD_INT 10
17649: PUSH
17650: LD_INT 5
17652: PUSH
17653: LD_INT 3
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17661: LD_VAR 0 6
17665: PPUSH
17666: CALL_OW 257
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: LD_INT 3
17676: PUSH
17677: LD_INT 4
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: LIST
17684: IN
17685: IFFALSE 17706
// points := [ 3 , 2 , 1 ] ;
17687: LD_ADDR_VAR 0 9
17691: PUSH
17692: LD_INT 3
17694: PUSH
17695: LD_INT 2
17697: PUSH
17698: LD_INT 1
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17706: LD_VAR 0 6
17710: PPUSH
17711: CALL_OW 257
17715: PUSH
17716: LD_INT 5
17718: EQUAL
17719: IFFALSE 17740
// points := [ 130 , 5 , 2 ] ;
17721: LD_ADDR_VAR 0 9
17725: PUSH
17726: LD_INT 130
17728: PUSH
17729: LD_INT 5
17731: PUSH
17732: LD_INT 2
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17740: LD_VAR 0 6
17744: PPUSH
17745: CALL_OW 257
17749: PUSH
17750: LD_INT 8
17752: EQUAL
17753: IFFALSE 17774
// points := [ 35 , 35 , 30 ] ;
17755: LD_ADDR_VAR 0 9
17759: PUSH
17760: LD_INT 35
17762: PUSH
17763: LD_INT 35
17765: PUSH
17766: LD_INT 30
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17774: LD_VAR 0 6
17778: PPUSH
17779: CALL_OW 257
17783: PUSH
17784: LD_INT 9
17786: EQUAL
17787: IFFALSE 17808
// points := [ 20 , 55 , 40 ] ;
17789: LD_ADDR_VAR 0 9
17793: PUSH
17794: LD_INT 20
17796: PUSH
17797: LD_INT 55
17799: PUSH
17800: LD_INT 40
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17808: LD_VAR 0 6
17812: PPUSH
17813: CALL_OW 257
17817: PUSH
17818: LD_INT 12
17820: PUSH
17821: LD_INT 16
17823: PUSH
17824: EMPTY
17825: LIST
17826: LIST
17827: IN
17828: IFFALSE 17849
// points := [ 5 , 3 , 2 ] ;
17830: LD_ADDR_VAR 0 9
17834: PUSH
17835: LD_INT 5
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: LD_INT 2
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: LIST
17848: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17849: LD_VAR 0 6
17853: PPUSH
17854: CALL_OW 257
17858: PUSH
17859: LD_INT 17
17861: EQUAL
17862: IFFALSE 17883
// points := [ 100 , 50 , 75 ] ;
17864: LD_ADDR_VAR 0 9
17868: PUSH
17869: LD_INT 100
17871: PUSH
17872: LD_INT 50
17874: PUSH
17875: LD_INT 75
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17883: LD_VAR 0 6
17887: PPUSH
17888: CALL_OW 257
17892: PUSH
17893: LD_INT 15
17895: EQUAL
17896: IFFALSE 17917
// points := [ 10 , 5 , 3 ] ;
17898: LD_ADDR_VAR 0 9
17902: PUSH
17903: LD_INT 10
17905: PUSH
17906: LD_INT 5
17908: PUSH
17909: LD_INT 3
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17917: LD_VAR 0 6
17921: PPUSH
17922: CALL_OW 257
17926: PUSH
17927: LD_INT 14
17929: EQUAL
17930: IFFALSE 17951
// points := [ 10 , 0 , 0 ] ;
17932: LD_ADDR_VAR 0 9
17936: PUSH
17937: LD_INT 10
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: LD_INT 0
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17951: LD_VAR 0 6
17955: PPUSH
17956: CALL_OW 257
17960: PUSH
17961: LD_INT 11
17963: EQUAL
17964: IFFALSE 17985
// points := [ 30 , 10 , 5 ] ;
17966: LD_ADDR_VAR 0 9
17970: PUSH
17971: LD_INT 30
17973: PUSH
17974: LD_INT 10
17976: PUSH
17977: LD_INT 5
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17985: LD_VAR 0 1
17989: PPUSH
17990: LD_INT 5
17992: PPUSH
17993: CALL_OW 321
17997: PUSH
17998: LD_INT 2
18000: EQUAL
18001: IFFALSE 18018
// bpoints := bpoints * 1.8 ;
18003: LD_ADDR_VAR 0 10
18007: PUSH
18008: LD_VAR 0 10
18012: PUSH
18013: LD_REAL  1.80000000000000E+0000
18016: MUL
18017: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18018: LD_VAR 0 6
18022: PPUSH
18023: CALL_OW 257
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: LD_INT 3
18036: PUSH
18037: LD_INT 4
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: IN
18046: IFFALSE 18066
18048: PUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: LD_INT 51
18056: PPUSH
18057: CALL_OW 321
18061: PUSH
18062: LD_INT 2
18064: EQUAL
18065: AND
18066: IFFALSE 18083
// bpoints := bpoints * 1.2 ;
18068: LD_ADDR_VAR 0 10
18072: PUSH
18073: LD_VAR 0 10
18077: PUSH
18078: LD_REAL  1.20000000000000E+0000
18081: MUL
18082: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18083: LD_VAR 0 6
18087: PPUSH
18088: CALL_OW 257
18092: PUSH
18093: LD_INT 5
18095: PUSH
18096: LD_INT 7
18098: PUSH
18099: LD_INT 9
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: LIST
18106: IN
18107: IFFALSE 18127
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_INT 52
18117: PPUSH
18118: CALL_OW 321
18122: PUSH
18123: LD_INT 2
18125: EQUAL
18126: AND
18127: IFFALSE 18144
// bpoints := bpoints * 1.5 ;
18129: LD_ADDR_VAR 0 10
18133: PUSH
18134: LD_VAR 0 10
18138: PUSH
18139: LD_REAL  1.50000000000000E+0000
18142: MUL
18143: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 66
18151: PPUSH
18152: CALL_OW 321
18156: PUSH
18157: LD_INT 2
18159: EQUAL
18160: IFFALSE 18177
// bpoints := bpoints * 1.1 ;
18162: LD_ADDR_VAR 0 10
18166: PUSH
18167: LD_VAR 0 10
18171: PUSH
18172: LD_REAL  1.10000000000000E+0000
18175: MUL
18176: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18177: LD_ADDR_VAR 0 10
18181: PUSH
18182: LD_VAR 0 10
18186: PUSH
18187: LD_VAR 0 6
18191: PPUSH
18192: LD_INT 1
18194: PPUSH
18195: CALL_OW 259
18199: PUSH
18200: LD_REAL  1.15000000000000E+0000
18203: MUL
18204: MUL
18205: ST_TO_ADDR
// end ; unit_vehicle :
18206: GO 19036
18208: LD_INT 2
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 19024
18216: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 264
18226: PUSH
18227: LD_INT 2
18229: PUSH
18230: LD_INT 42
18232: PUSH
18233: LD_INT 24
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: IN
18241: IFFALSE 18262
// points := [ 25 , 5 , 3 ] ;
18243: LD_ADDR_VAR 0 9
18247: PUSH
18248: LD_INT 25
18250: PUSH
18251: LD_INT 5
18253: PUSH
18254: LD_INT 3
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18262: LD_VAR 0 6
18266: PPUSH
18267: CALL_OW 264
18271: PUSH
18272: LD_INT 4
18274: PUSH
18275: LD_INT 43
18277: PUSH
18278: LD_INT 25
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: IN
18286: IFFALSE 18307
// points := [ 40 , 15 , 5 ] ;
18288: LD_ADDR_VAR 0 9
18292: PUSH
18293: LD_INT 40
18295: PUSH
18296: LD_INT 15
18298: PUSH
18299: LD_INT 5
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18307: LD_VAR 0 6
18311: PPUSH
18312: CALL_OW 264
18316: PUSH
18317: LD_INT 3
18319: PUSH
18320: LD_INT 23
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: IN
18327: IFFALSE 18348
// points := [ 7 , 25 , 8 ] ;
18329: LD_ADDR_VAR 0 9
18333: PUSH
18334: LD_INT 7
18336: PUSH
18337: LD_INT 25
18339: PUSH
18340: LD_INT 8
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18348: LD_VAR 0 6
18352: PPUSH
18353: CALL_OW 264
18357: PUSH
18358: LD_INT 5
18360: PUSH
18361: LD_INT 27
18363: PUSH
18364: LD_INT 44
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: IN
18372: IFFALSE 18393
// points := [ 14 , 50 , 16 ] ;
18374: LD_ADDR_VAR 0 9
18378: PUSH
18379: LD_INT 14
18381: PUSH
18382: LD_INT 50
18384: PUSH
18385: LD_INT 16
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18393: LD_VAR 0 6
18397: PPUSH
18398: CALL_OW 264
18402: PUSH
18403: LD_INT 6
18405: PUSH
18406: LD_INT 46
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: IN
18413: IFFALSE 18434
// points := [ 32 , 120 , 70 ] ;
18415: LD_ADDR_VAR 0 9
18419: PUSH
18420: LD_INT 32
18422: PUSH
18423: LD_INT 120
18425: PUSH
18426: LD_INT 70
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: LIST
18433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18434: LD_VAR 0 6
18438: PPUSH
18439: CALL_OW 264
18443: PUSH
18444: LD_INT 7
18446: PUSH
18447: LD_INT 28
18449: PUSH
18450: LD_INT 45
18452: PUSH
18453: LD_INT 92
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: IN
18462: IFFALSE 18483
// points := [ 35 , 20 , 45 ] ;
18464: LD_ADDR_VAR 0 9
18468: PUSH
18469: LD_INT 35
18471: PUSH
18472: LD_INT 20
18474: PUSH
18475: LD_INT 45
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18483: LD_VAR 0 6
18487: PPUSH
18488: CALL_OW 264
18492: PUSH
18493: LD_INT 47
18495: PUSH
18496: EMPTY
18497: LIST
18498: IN
18499: IFFALSE 18520
// points := [ 67 , 45 , 75 ] ;
18501: LD_ADDR_VAR 0 9
18505: PUSH
18506: LD_INT 67
18508: PUSH
18509: LD_INT 45
18511: PUSH
18512: LD_INT 75
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18520: LD_VAR 0 6
18524: PPUSH
18525: CALL_OW 264
18529: PUSH
18530: LD_INT 26
18532: PUSH
18533: EMPTY
18534: LIST
18535: IN
18536: IFFALSE 18557
// points := [ 120 , 30 , 80 ] ;
18538: LD_ADDR_VAR 0 9
18542: PUSH
18543: LD_INT 120
18545: PUSH
18546: LD_INT 30
18548: PUSH
18549: LD_INT 80
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18557: LD_VAR 0 6
18561: PPUSH
18562: CALL_OW 264
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: EMPTY
18571: LIST
18572: IN
18573: IFFALSE 18594
// points := [ 40 , 1 , 1 ] ;
18575: LD_ADDR_VAR 0 9
18579: PUSH
18580: LD_INT 40
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18594: LD_VAR 0 6
18598: PPUSH
18599: CALL_OW 264
18603: PUSH
18604: LD_INT 29
18606: PUSH
18607: EMPTY
18608: LIST
18609: IN
18610: IFFALSE 18631
// points := [ 70 , 200 , 400 ] ;
18612: LD_ADDR_VAR 0 9
18616: PUSH
18617: LD_INT 70
18619: PUSH
18620: LD_INT 200
18622: PUSH
18623: LD_INT 400
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18631: LD_VAR 0 6
18635: PPUSH
18636: CALL_OW 264
18640: PUSH
18641: LD_INT 14
18643: PUSH
18644: LD_INT 53
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: IN
18651: IFFALSE 18672
// points := [ 40 , 10 , 20 ] ;
18653: LD_ADDR_VAR 0 9
18657: PUSH
18658: LD_INT 40
18660: PUSH
18661: LD_INT 10
18663: PUSH
18664: LD_INT 20
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: LIST
18671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18672: LD_VAR 0 6
18676: PPUSH
18677: CALL_OW 264
18681: PUSH
18682: LD_INT 9
18684: PUSH
18685: EMPTY
18686: LIST
18687: IN
18688: IFFALSE 18709
// points := [ 5 , 70 , 20 ] ;
18690: LD_ADDR_VAR 0 9
18694: PUSH
18695: LD_INT 5
18697: PUSH
18698: LD_INT 70
18700: PUSH
18701: LD_INT 20
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: LIST
18708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18709: LD_VAR 0 6
18713: PPUSH
18714: CALL_OW 264
18718: PUSH
18719: LD_INT 10
18721: PUSH
18722: EMPTY
18723: LIST
18724: IN
18725: IFFALSE 18746
// points := [ 35 , 110 , 70 ] ;
18727: LD_ADDR_VAR 0 9
18731: PUSH
18732: LD_INT 35
18734: PUSH
18735: LD_INT 110
18737: PUSH
18738: LD_INT 70
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18746: LD_VAR 0 6
18750: PPUSH
18751: CALL_OW 265
18755: PUSH
18756: LD_INT 25
18758: EQUAL
18759: IFFALSE 18780
// points := [ 80 , 65 , 100 ] ;
18761: LD_ADDR_VAR 0 9
18765: PUSH
18766: LD_INT 80
18768: PUSH
18769: LD_INT 65
18771: PUSH
18772: LD_INT 100
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: LIST
18779: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18780: LD_VAR 0 6
18784: PPUSH
18785: CALL_OW 263
18789: PUSH
18790: LD_INT 1
18792: EQUAL
18793: IFFALSE 18828
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18795: LD_ADDR_VAR 0 10
18799: PUSH
18800: LD_VAR 0 10
18804: PUSH
18805: LD_VAR 0 6
18809: PPUSH
18810: CALL_OW 311
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: CALL_OW 259
18822: PUSH
18823: LD_INT 4
18825: MUL
18826: MUL
18827: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18828: LD_VAR 0 6
18832: PPUSH
18833: CALL_OW 263
18837: PUSH
18838: LD_INT 2
18840: EQUAL
18841: IFFALSE 18892
// begin j := IsControledBy ( i ) ;
18843: LD_ADDR_VAR 0 7
18847: PUSH
18848: LD_VAR 0 6
18852: PPUSH
18853: CALL_OW 312
18857: ST_TO_ADDR
// if j then
18858: LD_VAR 0 7
18862: IFFALSE 18892
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18864: LD_ADDR_VAR 0 10
18868: PUSH
18869: LD_VAR 0 10
18873: PUSH
18874: LD_VAR 0 7
18878: PPUSH
18879: LD_INT 3
18881: PPUSH
18882: CALL_OW 259
18886: PUSH
18887: LD_INT 3
18889: MUL
18890: MUL
18891: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18892: LD_VAR 0 6
18896: PPUSH
18897: CALL_OW 264
18901: PUSH
18902: LD_INT 5
18904: PUSH
18905: LD_INT 6
18907: PUSH
18908: LD_INT 46
18910: PUSH
18911: LD_INT 44
18913: PUSH
18914: LD_INT 47
18916: PUSH
18917: LD_INT 45
18919: PUSH
18920: LD_INT 28
18922: PUSH
18923: LD_INT 7
18925: PUSH
18926: LD_INT 27
18928: PUSH
18929: LD_INT 29
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: IN
18944: IFFALSE 18964
18946: PUSH
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_INT 52
18954: PPUSH
18955: CALL_OW 321
18959: PUSH
18960: LD_INT 2
18962: EQUAL
18963: AND
18964: IFFALSE 18981
// bpoints := bpoints * 1.2 ;
18966: LD_ADDR_VAR 0 10
18970: PUSH
18971: LD_VAR 0 10
18975: PUSH
18976: LD_REAL  1.20000000000000E+0000
18979: MUL
18980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18981: LD_VAR 0 6
18985: PPUSH
18986: CALL_OW 264
18990: PUSH
18991: LD_INT 6
18993: PUSH
18994: LD_INT 46
18996: PUSH
18997: LD_INT 47
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: IN
19005: IFFALSE 19022
// bpoints := bpoints * 1.2 ;
19007: LD_ADDR_VAR 0 10
19011: PUSH
19012: LD_VAR 0 10
19016: PUSH
19017: LD_REAL  1.20000000000000E+0000
19020: MUL
19021: ST_TO_ADDR
// end ; unit_building :
19022: GO 19036
19024: LD_INT 3
19026: DOUBLE
19027: EQUAL
19028: IFTRUE 19032
19030: GO 19035
19032: POP
// ; end ;
19033: GO 19036
19035: POP
// for j = 1 to 3 do
19036: LD_ADDR_VAR 0 7
19040: PUSH
19041: DOUBLE
19042: LD_INT 1
19044: DEC
19045: ST_TO_ADDR
19046: LD_INT 3
19048: PUSH
19049: FOR_TO
19050: IFFALSE 19103
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19052: LD_ADDR_VAR 0 5
19056: PUSH
19057: LD_VAR 0 5
19061: PPUSH
19062: LD_VAR 0 7
19066: PPUSH
19067: LD_VAR 0 5
19071: PUSH
19072: LD_VAR 0 7
19076: ARRAY
19077: PUSH
19078: LD_VAR 0 9
19082: PUSH
19083: LD_VAR 0 7
19087: ARRAY
19088: PUSH
19089: LD_VAR 0 10
19093: MUL
19094: PLUS
19095: PPUSH
19096: CALL_OW 1
19100: ST_TO_ADDR
19101: GO 19049
19103: POP
19104: POP
// end ;
19105: GO 17578
19107: POP
19108: POP
// result := Replace ( result , 4 , tmp ) ;
19109: LD_ADDR_VAR 0 5
19113: PUSH
19114: LD_VAR 0 5
19118: PPUSH
19119: LD_INT 4
19121: PPUSH
19122: LD_VAR 0 8
19126: PPUSH
19127: CALL_OW 1
19131: ST_TO_ADDR
// end ;
19132: LD_VAR 0 5
19136: RET
// export function DangerAtRange ( unit , range ) ; begin
19137: LD_INT 0
19139: PPUSH
// if not unit then
19140: LD_VAR 0 1
19144: NOT
19145: IFFALSE 19149
// exit ;
19147: GO 19194
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19149: LD_ADDR_VAR 0 3
19153: PUSH
19154: LD_VAR 0 1
19158: PPUSH
19159: CALL_OW 255
19163: PPUSH
19164: LD_VAR 0 1
19168: PPUSH
19169: CALL_OW 250
19173: PPUSH
19174: LD_VAR 0 1
19178: PPUSH
19179: CALL_OW 251
19183: PPUSH
19184: LD_VAR 0 2
19188: PPUSH
19189: CALL 17428 0 4
19193: ST_TO_ADDR
// end ;
19194: LD_VAR 0 3
19198: RET
// export function DangerInArea ( side , area ) ; begin
19199: LD_INT 0
19201: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19202: LD_ADDR_VAR 0 3
19206: PUSH
19207: LD_VAR 0 2
19211: PPUSH
19212: LD_INT 81
19214: PUSH
19215: LD_VAR 0 1
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PPUSH
19224: CALL_OW 70
19228: ST_TO_ADDR
// end ;
19229: LD_VAR 0 3
19233: RET
// export function IsExtension ( b ) ; begin
19234: LD_INT 0
19236: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19237: LD_ADDR_VAR 0 2
19241: PUSH
19242: LD_VAR 0 1
19246: PUSH
19247: LD_INT 23
19249: PUSH
19250: LD_INT 20
19252: PUSH
19253: LD_INT 22
19255: PUSH
19256: LD_INT 17
19258: PUSH
19259: LD_INT 24
19261: PUSH
19262: LD_INT 21
19264: PUSH
19265: LD_INT 19
19267: PUSH
19268: LD_INT 16
19270: PUSH
19271: LD_INT 25
19273: PUSH
19274: LD_INT 18
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: IN
19289: ST_TO_ADDR
// end ;
19290: LD_VAR 0 2
19294: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19295: LD_INT 0
19297: PPUSH
19298: PPUSH
19299: PPUSH
// result := [ ] ;
19300: LD_ADDR_VAR 0 4
19304: PUSH
19305: EMPTY
19306: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19307: LD_ADDR_VAR 0 5
19311: PUSH
19312: LD_VAR 0 2
19316: PPUSH
19317: LD_INT 21
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PPUSH
19327: CALL_OW 70
19331: ST_TO_ADDR
// if not tmp then
19332: LD_VAR 0 5
19336: NOT
19337: IFFALSE 19341
// exit ;
19339: GO 19405
// if checkLink then
19341: LD_VAR 0 3
19345: IFFALSE 19395
// begin for i in tmp do
19347: LD_ADDR_VAR 0 6
19351: PUSH
19352: LD_VAR 0 5
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19393
// if GetBase ( i ) <> base then
19360: LD_VAR 0 6
19364: PPUSH
19365: CALL_OW 274
19369: PUSH
19370: LD_VAR 0 1
19374: NONEQUAL
19375: IFFALSE 19391
// ComLinkToBase ( base , i ) ;
19377: LD_VAR 0 1
19381: PPUSH
19382: LD_VAR 0 6
19386: PPUSH
19387: CALL_OW 169
19391: GO 19357
19393: POP
19394: POP
// end ; result := tmp ;
19395: LD_ADDR_VAR 0 4
19399: PUSH
19400: LD_VAR 0 5
19404: ST_TO_ADDR
// end ;
19405: LD_VAR 0 4
19409: RET
// export function ComComplete ( units , b ) ; var i ; begin
19410: LD_INT 0
19412: PPUSH
19413: PPUSH
// if not units then
19414: LD_VAR 0 1
19418: NOT
19419: IFFALSE 19423
// exit ;
19421: GO 19513
// for i in units do
19423: LD_ADDR_VAR 0 4
19427: PUSH
19428: LD_VAR 0 1
19432: PUSH
19433: FOR_IN
19434: IFFALSE 19511
// if BuildingStatus ( b ) = bs_build then
19436: LD_VAR 0 2
19440: PPUSH
19441: CALL_OW 461
19445: PUSH
19446: LD_INT 1
19448: EQUAL
19449: IFFALSE 19509
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19451: LD_VAR 0 4
19455: PPUSH
19456: LD_STRING h
19458: PUSH
19459: LD_VAR 0 2
19463: PPUSH
19464: CALL_OW 250
19468: PUSH
19469: LD_VAR 0 2
19473: PPUSH
19474: CALL_OW 251
19478: PUSH
19479: LD_VAR 0 2
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: PUSH
19502: EMPTY
19503: LIST
19504: PPUSH
19505: CALL_OW 446
19509: GO 19433
19511: POP
19512: POP
// end ;
19513: LD_VAR 0 3
19517: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
19522: PPUSH
19523: PPUSH
19524: PPUSH
19525: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19526: LD_VAR 0 1
19530: NOT
19531: IFTRUE 19548
19533: PUSH
19534: LD_VAR 0 1
19538: PPUSH
19539: CALL_OW 263
19543: PUSH
19544: LD_INT 2
19546: NONEQUAL
19547: OR
19548: IFFALSE 19552
// exit ;
19550: GO 19868
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19552: LD_ADDR_VAR 0 6
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 255
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 30
19579: PUSH
19580: LD_INT 36
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 34
19589: PUSH
19590: LD_INT 31
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL_OW 69
19610: ST_TO_ADDR
// if not tmp then
19611: LD_VAR 0 6
19615: NOT
19616: IFFALSE 19620
// exit ;
19618: GO 19868
// result := [ ] ;
19620: LD_ADDR_VAR 0 2
19624: PUSH
19625: EMPTY
19626: ST_TO_ADDR
// for i in tmp do
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: LD_VAR 0 6
19636: PUSH
19637: FOR_IN
19638: IFFALSE 19709
// begin t := UnitsInside ( i ) ;
19640: LD_ADDR_VAR 0 4
19644: PUSH
19645: LD_VAR 0 3
19649: PPUSH
19650: CALL_OW 313
19654: ST_TO_ADDR
// if t then
19655: LD_VAR 0 4
19659: IFFALSE 19707
// for j in t do
19661: LD_ADDR_VAR 0 7
19665: PUSH
19666: LD_VAR 0 4
19670: PUSH
19671: FOR_IN
19672: IFFALSE 19705
// result := Replace ( result , result + 1 , j ) ;
19674: LD_ADDR_VAR 0 2
19678: PUSH
19679: LD_VAR 0 2
19683: PPUSH
19684: LD_VAR 0 2
19688: PUSH
19689: LD_INT 1
19691: PLUS
19692: PPUSH
19693: LD_VAR 0 7
19697: PPUSH
19698: CALL_OW 1
19702: ST_TO_ADDR
19703: GO 19671
19705: POP
19706: POP
// end ;
19707: GO 19637
19709: POP
19710: POP
// if not result then
19711: LD_VAR 0 2
19715: NOT
19716: IFFALSE 19720
// exit ;
19718: GO 19868
// mech := result [ 1 ] ;
19720: LD_ADDR_VAR 0 5
19724: PUSH
19725: LD_VAR 0 2
19729: PUSH
19730: LD_INT 1
19732: ARRAY
19733: ST_TO_ADDR
// if result > 1 then
19734: LD_VAR 0 2
19738: PUSH
19739: LD_INT 1
19741: GREATER
19742: IFFALSE 19854
// begin for i = 2 to result do
19744: LD_ADDR_VAR 0 3
19748: PUSH
19749: DOUBLE
19750: LD_INT 2
19752: DEC
19753: ST_TO_ADDR
19754: LD_VAR 0 2
19758: PUSH
19759: FOR_TO
19760: IFFALSE 19852
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19762: LD_ADDR_VAR 0 4
19766: PUSH
19767: LD_VAR 0 2
19771: PUSH
19772: LD_VAR 0 3
19776: ARRAY
19777: PPUSH
19778: LD_INT 3
19780: PPUSH
19781: CALL_OW 259
19785: PUSH
19786: LD_VAR 0 2
19790: PUSH
19791: LD_VAR 0 3
19795: ARRAY
19796: PPUSH
19797: CALL_OW 432
19801: MINUS
19802: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19803: LD_VAR 0 4
19807: PUSH
19808: LD_VAR 0 5
19812: PPUSH
19813: LD_INT 3
19815: PPUSH
19816: CALL_OW 259
19820: PUSH
19821: LD_VAR 0 5
19825: PPUSH
19826: CALL_OW 432
19830: MINUS
19831: GREATEREQUAL
19832: IFFALSE 19850
// mech := result [ i ] ;
19834: LD_ADDR_VAR 0 5
19838: PUSH
19839: LD_VAR 0 2
19843: PUSH
19844: LD_VAR 0 3
19848: ARRAY
19849: ST_TO_ADDR
// end ;
19850: GO 19759
19852: POP
19853: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19854: LD_VAR 0 1
19858: PPUSH
19859: LD_VAR 0 5
19863: PPUSH
19864: CALL_OW 135
// end ;
19868: LD_VAR 0 2
19872: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19873: LD_INT 0
19875: PPUSH
19876: PPUSH
19877: PPUSH
19878: PPUSH
19879: PPUSH
19880: PPUSH
19881: PPUSH
19882: PPUSH
19883: PPUSH
19884: PPUSH
19885: PPUSH
19886: PPUSH
19887: PPUSH
// result := [ ] ;
19888: LD_ADDR_VAR 0 7
19892: PUSH
19893: EMPTY
19894: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19895: LD_VAR 0 1
19899: PPUSH
19900: CALL_OW 266
19904: PUSH
19905: LD_INT 0
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: IN
19915: NOT
19916: IFFALSE 19920
// exit ;
19918: GO 21560
// if name then
19920: LD_VAR 0 3
19924: IFFALSE 19940
// SetBName ( base_dep , name ) ;
19926: LD_VAR 0 1
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: CALL_OW 500
// base := GetBase ( base_dep ) ;
19940: LD_ADDR_VAR 0 15
19944: PUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: CALL_OW 274
19954: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19955: LD_ADDR_VAR 0 16
19959: PUSH
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL_OW 255
19969: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19970: LD_ADDR_VAR 0 17
19974: PUSH
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 248
19984: ST_TO_ADDR
// if sources then
19985: LD_VAR 0 5
19989: IFFALSE 20036
// for i = 1 to 3 do
19991: LD_ADDR_VAR 0 8
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_INT 3
20003: PUSH
20004: FOR_TO
20005: IFFALSE 20034
// AddResourceType ( base , i , sources [ i ] ) ;
20007: LD_VAR 0 15
20011: PPUSH
20012: LD_VAR 0 8
20016: PPUSH
20017: LD_VAR 0 5
20021: PUSH
20022: LD_VAR 0 8
20026: ARRAY
20027: PPUSH
20028: CALL_OW 276
20032: GO 20004
20034: POP
20035: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20036: LD_ADDR_VAR 0 18
20040: PUSH
20041: LD_VAR 0 15
20045: PPUSH
20046: LD_VAR 0 2
20050: PPUSH
20051: LD_INT 1
20053: PPUSH
20054: CALL 19295 0 3
20058: ST_TO_ADDR
// InitHc ;
20059: CALL_OW 19
// InitUc ;
20063: CALL_OW 18
// uc_side := side ;
20067: LD_ADDR_OWVAR 20
20071: PUSH
20072: LD_VAR 0 16
20076: ST_TO_ADDR
// uc_nation := nation ;
20077: LD_ADDR_OWVAR 21
20081: PUSH
20082: LD_VAR 0 17
20086: ST_TO_ADDR
// if buildings then
20087: LD_VAR 0 18
20091: IFFALSE 21419
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20093: LD_ADDR_VAR 0 19
20097: PUSH
20098: LD_VAR 0 18
20102: PPUSH
20103: LD_INT 2
20105: PUSH
20106: LD_INT 30
20108: PUSH
20109: LD_INT 29
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 30
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 72
20135: ST_TO_ADDR
// if tmp then
20136: LD_VAR 0 19
20140: IFFALSE 20188
// for i in tmp do
20142: LD_ADDR_VAR 0 8
20146: PUSH
20147: LD_VAR 0 19
20151: PUSH
20152: FOR_IN
20153: IFFALSE 20186
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20155: LD_VAR 0 8
20159: PPUSH
20160: CALL_OW 250
20164: PPUSH
20165: LD_VAR 0 8
20169: PPUSH
20170: CALL_OW 251
20174: PPUSH
20175: LD_VAR 0 16
20179: PPUSH
20180: CALL_OW 441
20184: GO 20152
20186: POP
20187: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20188: LD_VAR 0 18
20192: PPUSH
20193: LD_INT 2
20195: PUSH
20196: LD_INT 30
20198: PUSH
20199: LD_INT 32
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 30
20208: PUSH
20209: LD_INT 33
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: PPUSH
20221: CALL_OW 72
20225: IFFALSE 20313
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20227: LD_ADDR_VAR 0 8
20231: PUSH
20232: LD_VAR 0 18
20236: PPUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 30
20242: PUSH
20243: LD_INT 32
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 30
20252: PUSH
20253: LD_INT 33
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PPUSH
20265: CALL_OW 72
20269: PUSH
20270: FOR_IN
20271: IFFALSE 20311
// begin if not GetBWeapon ( i ) then
20273: LD_VAR 0 8
20277: PPUSH
20278: CALL_OW 269
20282: NOT
20283: IFFALSE 20309
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20285: LD_VAR 0 8
20289: PPUSH
20290: LD_VAR 0 8
20294: PPUSH
20295: LD_VAR 0 2
20299: PPUSH
20300: CALL 21565 0 2
20304: PPUSH
20305: CALL_OW 431
// end ;
20309: GO 20270
20311: POP
20312: POP
// end ; for i = 1 to personel do
20313: LD_ADDR_VAR 0 8
20317: PUSH
20318: DOUBLE
20319: LD_INT 1
20321: DEC
20322: ST_TO_ADDR
20323: LD_VAR 0 6
20327: PUSH
20328: FOR_TO
20329: IFFALSE 21399
// begin if i > 4 then
20331: LD_VAR 0 8
20335: PUSH
20336: LD_INT 4
20338: GREATER
20339: IFFALSE 20343
// break ;
20341: GO 21399
// case i of 1 :
20343: LD_VAR 0 8
20347: PUSH
20348: LD_INT 1
20350: DOUBLE
20351: EQUAL
20352: IFTRUE 20356
20354: GO 20436
20356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20357: LD_ADDR_VAR 0 12
20361: PUSH
20362: LD_VAR 0 18
20366: PPUSH
20367: LD_INT 22
20369: PUSH
20370: LD_VAR 0 16
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 58
20381: PUSH
20382: EMPTY
20383: LIST
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: LD_INT 30
20390: PUSH
20391: LD_INT 32
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 30
20400: PUSH
20401: LD_INT 4
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 30
20410: PUSH
20411: LD_INT 5
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: PPUSH
20429: CALL_OW 72
20433: ST_TO_ADDR
20434: GO 20658
20436: LD_INT 2
20438: DOUBLE
20439: EQUAL
20440: IFTRUE 20444
20442: GO 20506
20444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20445: LD_ADDR_VAR 0 12
20449: PUSH
20450: LD_VAR 0 18
20454: PPUSH
20455: LD_INT 22
20457: PUSH
20458: LD_VAR 0 16
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 2
20469: PUSH
20470: LD_INT 30
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 30
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: LIST
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PPUSH
20499: CALL_OW 72
20503: ST_TO_ADDR
20504: GO 20658
20506: LD_INT 3
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20576
20514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20515: LD_ADDR_VAR 0 12
20519: PUSH
20520: LD_VAR 0 18
20524: PPUSH
20525: LD_INT 22
20527: PUSH
20528: LD_VAR 0 16
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 30
20542: PUSH
20543: LD_INT 2
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 30
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PPUSH
20569: CALL_OW 72
20573: ST_TO_ADDR
20574: GO 20658
20576: LD_INT 4
20578: DOUBLE
20579: EQUAL
20580: IFTRUE 20584
20582: GO 20657
20584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20585: LD_ADDR_VAR 0 12
20589: PUSH
20590: LD_VAR 0 18
20594: PPUSH
20595: LD_INT 22
20597: PUSH
20598: LD_VAR 0 16
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PUSH
20607: LD_INT 2
20609: PUSH
20610: LD_INT 30
20612: PUSH
20613: LD_INT 6
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 30
20622: PUSH
20623: LD_INT 7
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PPUSH
20650: CALL_OW 72
20654: ST_TO_ADDR
20655: GO 20658
20657: POP
// if i = 1 then
20658: LD_VAR 0 8
20662: PUSH
20663: LD_INT 1
20665: EQUAL
20666: IFFALSE 20777
// begin tmp := [ ] ;
20668: LD_ADDR_VAR 0 19
20672: PUSH
20673: EMPTY
20674: ST_TO_ADDR
// for j in f do
20675: LD_ADDR_VAR 0 9
20679: PUSH
20680: LD_VAR 0 12
20684: PUSH
20685: FOR_IN
20686: IFFALSE 20759
// if GetBType ( j ) = b_bunker then
20688: LD_VAR 0 9
20692: PPUSH
20693: CALL_OW 266
20697: PUSH
20698: LD_INT 32
20700: EQUAL
20701: IFFALSE 20728
// tmp := Insert ( tmp , 1 , j ) else
20703: LD_ADDR_VAR 0 19
20707: PUSH
20708: LD_VAR 0 19
20712: PPUSH
20713: LD_INT 1
20715: PPUSH
20716: LD_VAR 0 9
20720: PPUSH
20721: CALL_OW 2
20725: ST_TO_ADDR
20726: GO 20757
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20728: LD_ADDR_VAR 0 19
20732: PUSH
20733: LD_VAR 0 19
20737: PPUSH
20738: LD_VAR 0 19
20742: PUSH
20743: LD_INT 1
20745: PLUS
20746: PPUSH
20747: LD_VAR 0 9
20751: PPUSH
20752: CALL_OW 2
20756: ST_TO_ADDR
20757: GO 20685
20759: POP
20760: POP
// if tmp then
20761: LD_VAR 0 19
20765: IFFALSE 20777
// f := tmp ;
20767: LD_ADDR_VAR 0 12
20771: PUSH
20772: LD_VAR 0 19
20776: ST_TO_ADDR
// end ; x := personel [ i ] ;
20777: LD_ADDR_VAR 0 13
20781: PUSH
20782: LD_VAR 0 6
20786: PUSH
20787: LD_VAR 0 8
20791: ARRAY
20792: ST_TO_ADDR
// if x = - 1 then
20793: LD_VAR 0 13
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: EQUAL
20802: IFFALSE 21013
// begin for j in f do
20804: LD_ADDR_VAR 0 9
20808: PUSH
20809: LD_VAR 0 12
20813: PUSH
20814: FOR_IN
20815: IFFALSE 21009
// repeat InitHc ;
20817: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20821: LD_VAR 0 9
20825: PPUSH
20826: CALL_OW 266
20830: PUSH
20831: LD_INT 5
20833: EQUAL
20834: IFFALSE 20904
// begin if UnitsInside ( j ) < 3 then
20836: LD_VAR 0 9
20840: PPUSH
20841: CALL_OW 313
20845: PUSH
20846: LD_INT 3
20848: LESS
20849: IFFALSE 20885
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20851: LD_INT 0
20853: PPUSH
20854: LD_INT 5
20856: PUSH
20857: LD_INT 8
20859: PUSH
20860: LD_INT 9
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: LIST
20867: PUSH
20868: LD_VAR 0 17
20872: ARRAY
20873: PPUSH
20874: LD_VAR 0 4
20878: PPUSH
20879: CALL_OW 380
20883: GO 20902
// PrepareHuman ( false , i , skill ) ;
20885: LD_INT 0
20887: PPUSH
20888: LD_VAR 0 8
20892: PPUSH
20893: LD_VAR 0 4
20897: PPUSH
20898: CALL_OW 380
// end else
20902: GO 20921
// PrepareHuman ( false , i , skill ) ;
20904: LD_INT 0
20906: PPUSH
20907: LD_VAR 0 8
20911: PPUSH
20912: LD_VAR 0 4
20916: PPUSH
20917: CALL_OW 380
// un := CreateHuman ;
20921: LD_ADDR_VAR 0 14
20925: PUSH
20926: CALL_OW 44
20930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20931: LD_ADDR_VAR 0 7
20935: PUSH
20936: LD_VAR 0 7
20940: PPUSH
20941: LD_INT 1
20943: PPUSH
20944: LD_VAR 0 14
20948: PPUSH
20949: CALL_OW 2
20953: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20954: LD_VAR 0 14
20958: PPUSH
20959: LD_VAR 0 9
20963: PPUSH
20964: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20968: LD_VAR 0 9
20972: PPUSH
20973: CALL_OW 313
20977: PUSH
20978: LD_INT 6
20980: EQUAL
20981: IFTRUE 21005
20983: PUSH
20984: LD_VAR 0 9
20988: PPUSH
20989: CALL_OW 266
20993: PUSH
20994: LD_INT 32
20996: PUSH
20997: LD_INT 31
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: IN
21004: OR
21005: IFFALSE 20817
21007: GO 20814
21009: POP
21010: POP
// end else
21011: GO 21397
// for j = 1 to x do
21013: LD_ADDR_VAR 0 9
21017: PUSH
21018: DOUBLE
21019: LD_INT 1
21021: DEC
21022: ST_TO_ADDR
21023: LD_VAR 0 13
21027: PUSH
21028: FOR_TO
21029: IFFALSE 21395
// begin InitHc ;
21031: CALL_OW 19
// if not f then
21035: LD_VAR 0 12
21039: NOT
21040: IFFALSE 21129
// begin PrepareHuman ( false , i , skill ) ;
21042: LD_INT 0
21044: PPUSH
21045: LD_VAR 0 8
21049: PPUSH
21050: LD_VAR 0 4
21054: PPUSH
21055: CALL_OW 380
// un := CreateHuman ;
21059: LD_ADDR_VAR 0 14
21063: PUSH
21064: CALL_OW 44
21068: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21069: LD_ADDR_VAR 0 7
21073: PUSH
21074: LD_VAR 0 7
21078: PPUSH
21079: LD_INT 1
21081: PPUSH
21082: LD_VAR 0 14
21086: PPUSH
21087: CALL_OW 2
21091: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21092: LD_VAR 0 14
21096: PPUSH
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 250
21106: PPUSH
21107: LD_VAR 0 1
21111: PPUSH
21112: CALL_OW 251
21116: PPUSH
21117: LD_INT 10
21119: PPUSH
21120: LD_INT 0
21122: PPUSH
21123: CALL_OW 50
// continue ;
21127: GO 21028
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21129: LD_VAR 0 12
21133: PUSH
21134: LD_INT 1
21136: ARRAY
21137: PPUSH
21138: CALL_OW 313
21142: IFFALSE 21170
21144: PUSH
21145: LD_VAR 0 12
21149: PUSH
21150: LD_INT 1
21152: ARRAY
21153: PPUSH
21154: CALL_OW 266
21158: PUSH
21159: LD_INT 32
21161: PUSH
21162: LD_INT 31
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: IN
21169: AND
21170: IFTRUE 21191
21172: PUSH
21173: LD_VAR 0 12
21177: PUSH
21178: LD_INT 1
21180: ARRAY
21181: PPUSH
21182: CALL_OW 313
21186: PUSH
21187: LD_INT 6
21189: EQUAL
21190: OR
21191: IFFALSE 21211
// f := Delete ( f , 1 ) ;
21193: LD_ADDR_VAR 0 12
21197: PUSH
21198: LD_VAR 0 12
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: CALL_OW 3
21210: ST_TO_ADDR
// if not f then
21211: LD_VAR 0 12
21215: NOT
21216: IFFALSE 21234
// begin x := x + 2 ;
21218: LD_ADDR_VAR 0 13
21222: PUSH
21223: LD_VAR 0 13
21227: PUSH
21228: LD_INT 2
21230: PLUS
21231: ST_TO_ADDR
// continue ;
21232: GO 21028
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21234: LD_VAR 0 12
21238: PUSH
21239: LD_INT 1
21241: ARRAY
21242: PPUSH
21243: CALL_OW 266
21247: PUSH
21248: LD_INT 5
21250: EQUAL
21251: IFFALSE 21325
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21253: LD_VAR 0 12
21257: PUSH
21258: LD_INT 1
21260: ARRAY
21261: PPUSH
21262: CALL_OW 313
21266: PUSH
21267: LD_INT 3
21269: LESS
21270: IFFALSE 21306
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21272: LD_INT 0
21274: PPUSH
21275: LD_INT 5
21277: PUSH
21278: LD_INT 8
21280: PUSH
21281: LD_INT 9
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: LIST
21288: PUSH
21289: LD_VAR 0 17
21293: ARRAY
21294: PPUSH
21295: LD_VAR 0 4
21299: PPUSH
21300: CALL_OW 380
21304: GO 21323
// PrepareHuman ( false , i , skill ) ;
21306: LD_INT 0
21308: PPUSH
21309: LD_VAR 0 8
21313: PPUSH
21314: LD_VAR 0 4
21318: PPUSH
21319: CALL_OW 380
// end else
21323: GO 21342
// PrepareHuman ( false , i , skill ) ;
21325: LD_INT 0
21327: PPUSH
21328: LD_VAR 0 8
21332: PPUSH
21333: LD_VAR 0 4
21337: PPUSH
21338: CALL_OW 380
// un := CreateHuman ;
21342: LD_ADDR_VAR 0 14
21346: PUSH
21347: CALL_OW 44
21351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21352: LD_ADDR_VAR 0 7
21356: PUSH
21357: LD_VAR 0 7
21361: PPUSH
21362: LD_INT 1
21364: PPUSH
21365: LD_VAR 0 14
21369: PPUSH
21370: CALL_OW 2
21374: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21375: LD_VAR 0 14
21379: PPUSH
21380: LD_VAR 0 12
21384: PUSH
21385: LD_INT 1
21387: ARRAY
21388: PPUSH
21389: CALL_OW 52
// end ;
21393: GO 21028
21395: POP
21396: POP
// end ;
21397: GO 20328
21399: POP
21400: POP
// result := result ^ buildings ;
21401: LD_ADDR_VAR 0 7
21405: PUSH
21406: LD_VAR 0 7
21410: PUSH
21411: LD_VAR 0 18
21415: ADD
21416: ST_TO_ADDR
// end else
21417: GO 21560
// begin for i = 1 to personel do
21419: LD_ADDR_VAR 0 8
21423: PUSH
21424: DOUBLE
21425: LD_INT 1
21427: DEC
21428: ST_TO_ADDR
21429: LD_VAR 0 6
21433: PUSH
21434: FOR_TO
21435: IFFALSE 21558
// begin if i > 4 then
21437: LD_VAR 0 8
21441: PUSH
21442: LD_INT 4
21444: GREATER
21445: IFFALSE 21449
// break ;
21447: GO 21558
// x := personel [ i ] ;
21449: LD_ADDR_VAR 0 13
21453: PUSH
21454: LD_VAR 0 6
21458: PUSH
21459: LD_VAR 0 8
21463: ARRAY
21464: ST_TO_ADDR
// if x = - 1 then
21465: LD_VAR 0 13
21469: PUSH
21470: LD_INT 1
21472: NEG
21473: EQUAL
21474: IFFALSE 21478
// continue ;
21476: GO 21434
// PrepareHuman ( false , i , skill ) ;
21478: LD_INT 0
21480: PPUSH
21481: LD_VAR 0 8
21485: PPUSH
21486: LD_VAR 0 4
21490: PPUSH
21491: CALL_OW 380
// un := CreateHuman ;
21495: LD_ADDR_VAR 0 14
21499: PUSH
21500: CALL_OW 44
21504: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21505: LD_VAR 0 14
21509: PPUSH
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 250
21519: PPUSH
21520: LD_VAR 0 1
21524: PPUSH
21525: CALL_OW 251
21529: PPUSH
21530: LD_INT 10
21532: PPUSH
21533: LD_INT 0
21535: PPUSH
21536: CALL_OW 50
// result := result ^ un ;
21540: LD_ADDR_VAR 0 7
21544: PUSH
21545: LD_VAR 0 7
21549: PUSH
21550: LD_VAR 0 14
21554: ADD
21555: ST_TO_ADDR
// end ;
21556: GO 21434
21558: POP
21559: POP
// end ; end ;
21560: LD_VAR 0 7
21564: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21565: LD_INT 0
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
// result := false ;
21583: LD_ADDR_VAR 0 3
21587: PUSH
21588: LD_INT 0
21590: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21591: LD_VAR 0 1
21595: NOT
21596: IFTRUE 21621
21598: PUSH
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 266
21608: PUSH
21609: LD_INT 32
21611: PUSH
21612: LD_INT 33
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: IN
21619: NOT
21620: OR
21621: IFFALSE 21625
// exit ;
21623: GO 22760
// nat := GetNation ( tower ) ;
21625: LD_ADDR_VAR 0 12
21629: PUSH
21630: LD_VAR 0 1
21634: PPUSH
21635: CALL_OW 248
21639: ST_TO_ADDR
// side := GetSide ( tower ) ;
21640: LD_ADDR_VAR 0 16
21644: PUSH
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 255
21654: ST_TO_ADDR
// x := GetX ( tower ) ;
21655: LD_ADDR_VAR 0 10
21659: PUSH
21660: LD_VAR 0 1
21664: PPUSH
21665: CALL_OW 250
21669: ST_TO_ADDR
// y := GetY ( tower ) ;
21670: LD_ADDR_VAR 0 11
21674: PUSH
21675: LD_VAR 0 1
21679: PPUSH
21680: CALL_OW 251
21684: ST_TO_ADDR
// if not x or not y then
21685: LD_VAR 0 10
21689: NOT
21690: IFTRUE 21699
21692: PUSH
21693: LD_VAR 0 11
21697: NOT
21698: OR
21699: IFFALSE 21703
// exit ;
21701: GO 22760
// weapon := 0 ;
21703: LD_ADDR_VAR 0 18
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// fac_list := [ ] ;
21711: LD_ADDR_VAR 0 17
21715: PUSH
21716: EMPTY
21717: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21718: LD_ADDR_VAR 0 6
21722: PUSH
21723: LD_VAR 0 1
21727: PPUSH
21728: CALL_OW 274
21732: PPUSH
21733: LD_VAR 0 2
21737: PPUSH
21738: LD_INT 0
21740: PPUSH
21741: CALL 19295 0 3
21745: PPUSH
21746: LD_INT 30
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PPUSH
21756: CALL_OW 72
21760: ST_TO_ADDR
// if not factories then
21761: LD_VAR 0 6
21765: NOT
21766: IFFALSE 21770
// exit ;
21768: GO 22760
// for i in factories do
21770: LD_ADDR_VAR 0 8
21774: PUSH
21775: LD_VAR 0 6
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21806
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21783: LD_ADDR_VAR 0 17
21787: PUSH
21788: LD_VAR 0 17
21792: PUSH
21793: LD_VAR 0 8
21797: PPUSH
21798: CALL_OW 478
21802: UNION
21803: ST_TO_ADDR
21804: GO 21780
21806: POP
21807: POP
// if not fac_list then
21808: LD_VAR 0 17
21812: NOT
21813: IFFALSE 21817
// exit ;
21815: GO 22760
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21817: LD_ADDR_VAR 0 5
21821: PUSH
21822: LD_INT 4
21824: PUSH
21825: LD_INT 5
21827: PUSH
21828: LD_INT 9
21830: PUSH
21831: LD_INT 10
21833: PUSH
21834: LD_INT 6
21836: PUSH
21837: LD_INT 7
21839: PUSH
21840: LD_INT 11
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 27
21854: PUSH
21855: LD_INT 28
21857: PUSH
21858: LD_INT 26
21860: PUSH
21861: LD_INT 30
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 43
21872: PUSH
21873: LD_INT 44
21875: PUSH
21876: LD_INT 46
21878: PUSH
21879: LD_INT 45
21881: PUSH
21882: LD_INT 47
21884: PUSH
21885: LD_INT 49
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_VAR 0 12
21905: ARRAY
21906: ST_TO_ADDR
// list := list isect fac_list ;
21907: LD_ADDR_VAR 0 5
21911: PUSH
21912: LD_VAR 0 5
21916: PUSH
21917: LD_VAR 0 17
21921: ISECT
21922: ST_TO_ADDR
// if not list then
21923: LD_VAR 0 5
21927: NOT
21928: IFFALSE 21932
// exit ;
21930: GO 22760
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21932: LD_VAR 0 12
21936: PUSH
21937: LD_INT 3
21939: EQUAL
21940: IFFALSE 21952
21942: PUSH
21943: LD_INT 49
21945: PUSH
21946: LD_VAR 0 5
21950: IN
21951: AND
21952: IFFALSE 21972
21954: PUSH
21955: LD_INT 31
21957: PPUSH
21958: LD_VAR 0 16
21962: PPUSH
21963: CALL_OW 321
21967: PUSH
21968: LD_INT 2
21970: EQUAL
21971: AND
21972: IFFALSE 22032
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21974: LD_INT 22
21976: PUSH
21977: LD_VAR 0 16
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 35
21988: PUSH
21989: LD_INT 49
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: LD_INT 91
21998: PUSH
21999: LD_VAR 0 1
22003: PUSH
22004: LD_INT 10
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: PPUSH
22017: CALL_OW 69
22021: NOT
22022: IFFALSE 22032
// weapon := ru_time_lapser ;
22024: LD_ADDR_VAR 0 18
22028: PUSH
22029: LD_INT 49
22031: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22032: LD_VAR 0 12
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: IN
22047: IFFALSE 22071
22049: PUSH
22050: LD_INT 11
22052: PUSH
22053: LD_VAR 0 5
22057: IN
22058: IFTRUE 22070
22060: PUSH
22061: LD_INT 30
22063: PUSH
22064: LD_VAR 0 5
22068: IN
22069: OR
22070: AND
22071: IFFALSE 22091
22073: PUSH
22074: LD_INT 6
22076: PPUSH
22077: LD_VAR 0 16
22081: PPUSH
22082: CALL_OW 321
22086: PUSH
22087: LD_INT 2
22089: EQUAL
22090: AND
22091: IFFALSE 22258
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22093: LD_INT 22
22095: PUSH
22096: LD_VAR 0 16
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 2
22107: PUSH
22108: LD_INT 35
22110: PUSH
22111: LD_INT 11
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 35
22120: PUSH
22121: LD_INT 30
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 91
22135: PUSH
22136: LD_VAR 0 1
22140: PUSH
22141: LD_INT 18
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: NOT
22159: IFFALSE 22235
22161: PUSH
22162: LD_INT 22
22164: PUSH
22165: LD_VAR 0 16
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: LD_INT 30
22179: PUSH
22180: LD_INT 32
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 30
22189: PUSH
22190: LD_INT 33
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 91
22204: PUSH
22205: LD_VAR 0 1
22209: PUSH
22210: LD_INT 12
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: PPUSH
22226: CALL_OW 69
22230: PUSH
22231: LD_INT 2
22233: GREATER
22234: AND
22235: IFFALSE 22258
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22237: LD_ADDR_VAR 0 18
22241: PUSH
22242: LD_INT 11
22244: PUSH
22245: LD_INT 30
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_VAR 0 12
22256: ARRAY
22257: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22258: LD_VAR 0 18
22262: NOT
22263: IFFALSE 22283
22265: PUSH
22266: LD_INT 40
22268: PPUSH
22269: LD_VAR 0 16
22273: PPUSH
22274: CALL_OW 321
22278: PUSH
22279: LD_INT 2
22281: EQUAL
22282: AND
22283: IFFALSE 22319
22285: PUSH
22286: LD_INT 7
22288: PUSH
22289: LD_VAR 0 5
22293: IN
22294: IFTRUE 22306
22296: PUSH
22297: LD_INT 28
22299: PUSH
22300: LD_VAR 0 5
22304: IN
22305: OR
22306: IFTRUE 22318
22308: PUSH
22309: LD_INT 45
22311: PUSH
22312: LD_VAR 0 5
22316: IN
22317: OR
22318: AND
22319: IFFALSE 22573
// begin hex := GetHexInfo ( x , y ) ;
22321: LD_ADDR_VAR 0 4
22325: PUSH
22326: LD_VAR 0 10
22330: PPUSH
22331: LD_VAR 0 11
22335: PPUSH
22336: CALL_OW 546
22340: ST_TO_ADDR
// if hex [ 1 ] then
22341: LD_VAR 0 4
22345: PUSH
22346: LD_INT 1
22348: ARRAY
22349: IFFALSE 22353
// exit ;
22351: GO 22760
// height := hex [ 2 ] ;
22353: LD_ADDR_VAR 0 15
22357: PUSH
22358: LD_VAR 0 4
22362: PUSH
22363: LD_INT 2
22365: ARRAY
22366: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22367: LD_ADDR_VAR 0 14
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 5
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: ST_TO_ADDR
// for i in tmp do
22390: LD_ADDR_VAR 0 8
22394: PUSH
22395: LD_VAR 0 14
22399: PUSH
22400: FOR_IN
22401: IFFALSE 22571
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22403: LD_ADDR_VAR 0 9
22407: PUSH
22408: LD_VAR 0 10
22412: PPUSH
22413: LD_VAR 0 8
22417: PPUSH
22418: LD_INT 5
22420: PPUSH
22421: CALL_OW 272
22425: PUSH
22426: LD_VAR 0 11
22430: PPUSH
22431: LD_VAR 0 8
22435: PPUSH
22436: LD_INT 5
22438: PPUSH
22439: CALL_OW 273
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22448: LD_VAR 0 9
22452: PUSH
22453: LD_INT 1
22455: ARRAY
22456: PPUSH
22457: LD_VAR 0 9
22461: PUSH
22462: LD_INT 2
22464: ARRAY
22465: PPUSH
22466: CALL_OW 488
22470: IFFALSE 22569
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22472: LD_ADDR_VAR 0 4
22476: PUSH
22477: LD_VAR 0 9
22481: PUSH
22482: LD_INT 1
22484: ARRAY
22485: PPUSH
22486: LD_VAR 0 9
22490: PUSH
22491: LD_INT 2
22493: ARRAY
22494: PPUSH
22495: CALL_OW 546
22499: ST_TO_ADDR
// if hex [ 1 ] then
22500: LD_VAR 0 4
22504: PUSH
22505: LD_INT 1
22507: ARRAY
22508: IFFALSE 22512
// continue ;
22510: GO 22400
// h := hex [ 2 ] ;
22512: LD_ADDR_VAR 0 13
22516: PUSH
22517: LD_VAR 0 4
22521: PUSH
22522: LD_INT 2
22524: ARRAY
22525: ST_TO_ADDR
// if h + 7 < height then
22526: LD_VAR 0 13
22530: PUSH
22531: LD_INT 7
22533: PLUS
22534: PUSH
22535: LD_VAR 0 15
22539: LESS
22540: IFFALSE 22569
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22542: LD_ADDR_VAR 0 18
22546: PUSH
22547: LD_INT 7
22549: PUSH
22550: LD_INT 28
22552: PUSH
22553: LD_INT 45
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: PUSH
22561: LD_VAR 0 12
22565: ARRAY
22566: ST_TO_ADDR
// break ;
22567: GO 22571
// end ; end ; end ;
22569: GO 22400
22571: POP
22572: POP
// end ; if not weapon then
22573: LD_VAR 0 18
22577: NOT
22578: IFFALSE 22638
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22580: LD_ADDR_VAR 0 5
22584: PUSH
22585: LD_VAR 0 5
22589: PUSH
22590: LD_INT 11
22592: PUSH
22593: LD_INT 30
22595: PUSH
22596: LD_INT 49
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: DIFF
22604: ST_TO_ADDR
// if not list then
22605: LD_VAR 0 5
22609: NOT
22610: IFFALSE 22614
// exit ;
22612: GO 22760
// weapon := list [ rand ( 1 , list ) ] ;
22614: LD_ADDR_VAR 0 18
22618: PUSH
22619: LD_VAR 0 5
22623: PUSH
22624: LD_INT 1
22626: PPUSH
22627: LD_VAR 0 5
22631: PPUSH
22632: CALL_OW 12
22636: ARRAY
22637: ST_TO_ADDR
// end ; if weapon then
22638: LD_VAR 0 18
22642: IFFALSE 22760
// begin tmp := CostOfWeapon ( weapon ) ;
22644: LD_ADDR_VAR 0 14
22648: PUSH
22649: LD_VAR 0 18
22653: PPUSH
22654: CALL_OW 451
22658: ST_TO_ADDR
// j := GetBase ( tower ) ;
22659: LD_ADDR_VAR 0 9
22663: PUSH
22664: LD_VAR 0 1
22668: PPUSH
22669: CALL_OW 274
22673: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22674: LD_VAR 0 9
22678: PPUSH
22679: LD_INT 1
22681: PPUSH
22682: CALL_OW 275
22686: PUSH
22687: LD_VAR 0 14
22691: PUSH
22692: LD_INT 1
22694: ARRAY
22695: GREATEREQUAL
22696: IFFALSE 22722
22698: PUSH
22699: LD_VAR 0 9
22703: PPUSH
22704: LD_INT 2
22706: PPUSH
22707: CALL_OW 275
22711: PUSH
22712: LD_VAR 0 14
22716: PUSH
22717: LD_INT 2
22719: ARRAY
22720: GREATEREQUAL
22721: AND
22722: IFFALSE 22748
22724: PUSH
22725: LD_VAR 0 9
22729: PPUSH
22730: LD_INT 3
22732: PPUSH
22733: CALL_OW 275
22737: PUSH
22738: LD_VAR 0 14
22742: PUSH
22743: LD_INT 3
22745: ARRAY
22746: GREATEREQUAL
22747: AND
22748: IFFALSE 22760
// result := weapon ;
22750: LD_ADDR_VAR 0 3
22754: PUSH
22755: LD_VAR 0 18
22759: ST_TO_ADDR
// end ; end ;
22760: LD_VAR 0 3
22764: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22765: LD_INT 0
22767: PPUSH
22768: PPUSH
// result := true ;
22769: LD_ADDR_VAR 0 3
22773: PUSH
22774: LD_INT 1
22776: ST_TO_ADDR
// if array1 = array2 then
22777: LD_VAR 0 1
22781: PUSH
22782: LD_VAR 0 2
22786: EQUAL
22787: IFFALSE 22847
// begin for i = 1 to array1 do
22789: LD_ADDR_VAR 0 4
22793: PUSH
22794: DOUBLE
22795: LD_INT 1
22797: DEC
22798: ST_TO_ADDR
22799: LD_VAR 0 1
22803: PUSH
22804: FOR_TO
22805: IFFALSE 22843
// if array1 [ i ] <> array2 [ i ] then
22807: LD_VAR 0 1
22811: PUSH
22812: LD_VAR 0 4
22816: ARRAY
22817: PUSH
22818: LD_VAR 0 2
22822: PUSH
22823: LD_VAR 0 4
22827: ARRAY
22828: NONEQUAL
22829: IFFALSE 22841
// begin result := false ;
22831: LD_ADDR_VAR 0 3
22835: PUSH
22836: LD_INT 0
22838: ST_TO_ADDR
// break ;
22839: GO 22843
// end ;
22841: GO 22804
22843: POP
22844: POP
// end else
22845: GO 22855
// result := false ;
22847: LD_ADDR_VAR 0 3
22851: PUSH
22852: LD_INT 0
22854: ST_TO_ADDR
// end ;
22855: LD_VAR 0 3
22859: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22860: LD_INT 0
22862: PPUSH
22863: PPUSH
// if not array1 or not array2 then
22864: LD_VAR 0 1
22868: NOT
22869: IFTRUE 22878
22871: PUSH
22872: LD_VAR 0 2
22876: NOT
22877: OR
22878: IFFALSE 22882
// exit ;
22880: GO 22946
// result := true ;
22882: LD_ADDR_VAR 0 3
22886: PUSH
22887: LD_INT 1
22889: ST_TO_ADDR
// for i = 1 to array1 do
22890: LD_ADDR_VAR 0 4
22894: PUSH
22895: DOUBLE
22896: LD_INT 1
22898: DEC
22899: ST_TO_ADDR
22900: LD_VAR 0 1
22904: PUSH
22905: FOR_TO
22906: IFFALSE 22944
// if array1 [ i ] <> array2 [ i ] then
22908: LD_VAR 0 1
22912: PUSH
22913: LD_VAR 0 4
22917: ARRAY
22918: PUSH
22919: LD_VAR 0 2
22923: PUSH
22924: LD_VAR 0 4
22928: ARRAY
22929: NONEQUAL
22930: IFFALSE 22942
// begin result := false ;
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: LD_INT 0
22939: ST_TO_ADDR
// break ;
22940: GO 22944
// end ;
22942: GO 22905
22944: POP
22945: POP
// end ;
22946: LD_VAR 0 3
22950: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22951: LD_INT 0
22953: PPUSH
22954: PPUSH
22955: PPUSH
// pom := GetBase ( fac ) ;
22956: LD_ADDR_VAR 0 5
22960: PUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 274
22970: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22971: LD_ADDR_VAR 0 4
22975: PUSH
22976: LD_VAR 0 2
22980: PUSH
22981: LD_INT 1
22983: ARRAY
22984: PPUSH
22985: LD_VAR 0 2
22989: PUSH
22990: LD_INT 2
22992: ARRAY
22993: PPUSH
22994: LD_VAR 0 2
22998: PUSH
22999: LD_INT 3
23001: ARRAY
23002: PPUSH
23003: LD_VAR 0 2
23007: PUSH
23008: LD_INT 4
23010: ARRAY
23011: PPUSH
23012: CALL_OW 449
23016: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23017: LD_ADDR_VAR 0 3
23021: PUSH
23022: LD_VAR 0 5
23026: PPUSH
23027: LD_INT 1
23029: PPUSH
23030: CALL_OW 275
23034: PUSH
23035: LD_VAR 0 4
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: GREATEREQUAL
23044: IFFALSE 23070
23046: PUSH
23047: LD_VAR 0 5
23051: PPUSH
23052: LD_INT 2
23054: PPUSH
23055: CALL_OW 275
23059: PUSH
23060: LD_VAR 0 4
23064: PUSH
23065: LD_INT 2
23067: ARRAY
23068: GREATEREQUAL
23069: AND
23070: IFFALSE 23096
23072: PUSH
23073: LD_VAR 0 5
23077: PPUSH
23078: LD_INT 3
23080: PPUSH
23081: CALL_OW 275
23085: PUSH
23086: LD_VAR 0 4
23090: PUSH
23091: LD_INT 3
23093: ARRAY
23094: GREATEREQUAL
23095: AND
23096: ST_TO_ADDR
// end ;
23097: LD_VAR 0 3
23101: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23102: LD_INT 0
23104: PPUSH
23105: PPUSH
23106: PPUSH
23107: PPUSH
// pom := GetBase ( building ) ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 274
23122: ST_TO_ADDR
// if not pom then
23123: LD_VAR 0 3
23127: NOT
23128: IFFALSE 23132
// exit ;
23130: GO 23306
// btype := GetBType ( building ) ;
23132: LD_ADDR_VAR 0 5
23136: PUSH
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 266
23146: ST_TO_ADDR
// if btype = b_armoury then
23147: LD_VAR 0 5
23151: PUSH
23152: LD_INT 4
23154: EQUAL
23155: IFFALSE 23165
// btype := b_barracks ;
23157: LD_ADDR_VAR 0 5
23161: PUSH
23162: LD_INT 5
23164: ST_TO_ADDR
// if btype = b_depot then
23165: LD_VAR 0 5
23169: PUSH
23170: LD_INT 0
23172: EQUAL
23173: IFFALSE 23183
// btype := b_warehouse ;
23175: LD_ADDR_VAR 0 5
23179: PUSH
23180: LD_INT 1
23182: ST_TO_ADDR
// if btype = b_workshop then
23183: LD_VAR 0 5
23187: PUSH
23188: LD_INT 2
23190: EQUAL
23191: IFFALSE 23201
// btype := b_factory ;
23193: LD_ADDR_VAR 0 5
23197: PUSH
23198: LD_INT 3
23200: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23201: LD_ADDR_VAR 0 4
23205: PUSH
23206: LD_VAR 0 5
23210: PPUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 248
23220: PPUSH
23221: CALL_OW 450
23225: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23226: LD_ADDR_VAR 0 2
23230: PUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 275
23243: PUSH
23244: LD_VAR 0 4
23248: PUSH
23249: LD_INT 1
23251: ARRAY
23252: GREATEREQUAL
23253: IFFALSE 23279
23255: PUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: LD_INT 2
23263: PPUSH
23264: CALL_OW 275
23268: PUSH
23269: LD_VAR 0 4
23273: PUSH
23274: LD_INT 2
23276: ARRAY
23277: GREATEREQUAL
23278: AND
23279: IFFALSE 23305
23281: PUSH
23282: LD_VAR 0 3
23286: PPUSH
23287: LD_INT 3
23289: PPUSH
23290: CALL_OW 275
23294: PUSH
23295: LD_VAR 0 4
23299: PUSH
23300: LD_INT 3
23302: ARRAY
23303: GREATEREQUAL
23304: AND
23305: ST_TO_ADDR
// end ;
23306: LD_VAR 0 2
23310: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23311: LD_INT 0
23313: PPUSH
23314: PPUSH
23315: PPUSH
// pom := GetBase ( building ) ;
23316: LD_ADDR_VAR 0 4
23320: PUSH
23321: LD_VAR 0 1
23325: PPUSH
23326: CALL_OW 274
23330: ST_TO_ADDR
// if not pom then
23331: LD_VAR 0 4
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23445
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_VAR 0 2
23349: PPUSH
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL_OW 248
23359: PPUSH
23360: CALL_OW 450
23364: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_VAR 0 4
23374: PPUSH
23375: LD_INT 1
23377: PPUSH
23378: CALL_OW 275
23382: PUSH
23383: LD_VAR 0 5
23387: PUSH
23388: LD_INT 1
23390: ARRAY
23391: GREATEREQUAL
23392: IFFALSE 23418
23394: PUSH
23395: LD_VAR 0 4
23399: PPUSH
23400: LD_INT 2
23402: PPUSH
23403: CALL_OW 275
23407: PUSH
23408: LD_VAR 0 5
23412: PUSH
23413: LD_INT 2
23415: ARRAY
23416: GREATEREQUAL
23417: AND
23418: IFFALSE 23444
23420: PUSH
23421: LD_VAR 0 4
23425: PPUSH
23426: LD_INT 3
23428: PPUSH
23429: CALL_OW 275
23433: PUSH
23434: LD_VAR 0 5
23438: PUSH
23439: LD_INT 3
23441: ARRAY
23442: GREATEREQUAL
23443: AND
23444: ST_TO_ADDR
// end ;
23445: LD_VAR 0 3
23449: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23450: LD_INT 0
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
// result := false ;
23463: LD_ADDR_VAR 0 8
23467: PUSH
23468: LD_INT 0
23470: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23471: LD_VAR 0 5
23475: NOT
23476: IFTRUE 23485
23478: PUSH
23479: LD_VAR 0 1
23483: NOT
23484: OR
23485: IFTRUE 23494
23487: PUSH
23488: LD_VAR 0 2
23492: NOT
23493: OR
23494: IFTRUE 23503
23496: PUSH
23497: LD_VAR 0 3
23501: NOT
23502: OR
23503: IFFALSE 23507
// exit ;
23505: GO 24333
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23507: LD_ADDR_VAR 0 14
23511: PUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: LD_VAR 0 2
23521: PPUSH
23522: LD_VAR 0 3
23526: PPUSH
23527: LD_VAR 0 4
23531: PPUSH
23532: LD_VAR 0 5
23536: PUSH
23537: LD_INT 1
23539: ARRAY
23540: PPUSH
23541: CALL_OW 248
23545: PPUSH
23546: LD_INT 0
23548: PPUSH
23549: CALL 25614 0 6
23553: ST_TO_ADDR
// if not hexes then
23554: LD_VAR 0 14
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 24333
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23563: LD_ADDR_VAR 0 17
23567: PUSH
23568: LD_VAR 0 5
23572: PPUSH
23573: LD_INT 22
23575: PUSH
23576: LD_VAR 0 13
23580: PPUSH
23581: CALL_OW 255
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: LD_INT 30
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 30
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PPUSH
23622: CALL_OW 72
23626: ST_TO_ADDR
// for i = 1 to hexes do
23627: LD_ADDR_VAR 0 9
23631: PUSH
23632: DOUBLE
23633: LD_INT 1
23635: DEC
23636: ST_TO_ADDR
23637: LD_VAR 0 14
23641: PUSH
23642: FOR_TO
23643: IFFALSE 24331
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23645: LD_ADDR_VAR 0 13
23649: PUSH
23650: LD_VAR 0 14
23654: PUSH
23655: LD_VAR 0 9
23659: ARRAY
23660: PUSH
23661: LD_INT 1
23663: ARRAY
23664: PPUSH
23665: LD_VAR 0 14
23669: PUSH
23670: LD_VAR 0 9
23674: ARRAY
23675: PUSH
23676: LD_INT 2
23678: ARRAY
23679: PPUSH
23680: CALL_OW 428
23684: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23685: LD_VAR 0 14
23689: PUSH
23690: LD_VAR 0 9
23694: ARRAY
23695: PUSH
23696: LD_INT 1
23698: ARRAY
23699: PPUSH
23700: LD_VAR 0 14
23704: PUSH
23705: LD_VAR 0 9
23709: ARRAY
23710: PUSH
23711: LD_INT 2
23713: ARRAY
23714: PPUSH
23715: CALL_OW 351
23719: IFTRUE 23758
23721: PUSH
23722: LD_VAR 0 14
23726: PUSH
23727: LD_VAR 0 9
23731: ARRAY
23732: PUSH
23733: LD_INT 1
23735: ARRAY
23736: PPUSH
23737: LD_VAR 0 14
23741: PUSH
23742: LD_VAR 0 9
23746: ARRAY
23747: PUSH
23748: LD_INT 2
23750: ARRAY
23751: PPUSH
23752: CALL_OW 488
23756: NOT
23757: OR
23758: IFTRUE 23775
23760: PUSH
23761: LD_VAR 0 13
23765: PPUSH
23766: CALL_OW 247
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: OR
23775: IFFALSE 23781
// exit ;
23777: POP
23778: POP
23779: GO 24333
// if not tmp then
23781: LD_VAR 0 13
23785: NOT
23786: IFFALSE 23790
// continue ;
23788: GO 23642
// result := true ;
23790: LD_ADDR_VAR 0 8
23794: PUSH
23795: LD_INT 1
23797: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23798: LD_VAR 0 6
23802: IFFALSE 23819
23804: PUSH
23805: LD_VAR 0 13
23809: PPUSH
23810: CALL_OW 247
23814: PUSH
23815: LD_INT 2
23817: EQUAL
23818: AND
23819: IFFALSE 23836
23821: PUSH
23822: LD_VAR 0 13
23826: PPUSH
23827: CALL_OW 263
23831: PUSH
23832: LD_INT 1
23834: EQUAL
23835: AND
23836: IFFALSE 24000
// begin if IsDrivenBy ( tmp ) then
23838: LD_VAR 0 13
23842: PPUSH
23843: CALL_OW 311
23847: IFFALSE 23851
// continue ;
23849: GO 23642
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23851: LD_VAR 0 6
23855: PPUSH
23856: LD_INT 3
23858: PUSH
23859: LD_INT 60
23861: PUSH
23862: EMPTY
23863: LIST
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 3
23871: PUSH
23872: LD_INT 55
23874: PUSH
23875: EMPTY
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 72
23890: IFFALSE 23998
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23892: LD_ADDR_VAR 0 18
23896: PUSH
23897: LD_VAR 0 6
23901: PPUSH
23902: LD_INT 3
23904: PUSH
23905: LD_INT 60
23907: PUSH
23908: EMPTY
23909: LIST
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 3
23917: PUSH
23918: LD_INT 55
23920: PUSH
23921: EMPTY
23922: LIST
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 72
23936: PUSH
23937: LD_INT 1
23939: ARRAY
23940: ST_TO_ADDR
// if IsInUnit ( driver ) then
23941: LD_VAR 0 18
23945: PPUSH
23946: CALL_OW 310
23950: IFFALSE 23961
// ComExit ( driver ) ;
23952: LD_VAR 0 18
23956: PPUSH
23957: CALL 49614 0 1
// AddComEnterUnit ( driver , tmp ) ;
23961: LD_VAR 0 18
23965: PPUSH
23966: LD_VAR 0 13
23970: PPUSH
23971: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23975: LD_VAR 0 18
23979: PPUSH
23980: LD_VAR 0 7
23984: PPUSH
23985: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23989: LD_VAR 0 18
23993: PPUSH
23994: CALL_OW 181
// end ; continue ;
23998: GO 23642
// end ; if not cleaners or not tmp in cleaners then
24000: LD_VAR 0 6
24004: NOT
24005: IFTRUE 24020
24007: PUSH
24008: LD_VAR 0 13
24012: PUSH
24013: LD_VAR 0 6
24017: IN
24018: NOT
24019: OR
24020: IFFALSE 24329
// begin if dep then
24022: LD_VAR 0 17
24026: IFFALSE 24162
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24028: LD_ADDR_VAR 0 16
24032: PUSH
24033: LD_VAR 0 17
24037: PUSH
24038: LD_INT 1
24040: ARRAY
24041: PPUSH
24042: CALL_OW 250
24046: PPUSH
24047: LD_VAR 0 17
24051: PUSH
24052: LD_INT 1
24054: ARRAY
24055: PPUSH
24056: CALL_OW 254
24060: PPUSH
24061: LD_INT 5
24063: PPUSH
24064: CALL_OW 272
24068: PUSH
24069: LD_VAR 0 17
24073: PUSH
24074: LD_INT 1
24076: ARRAY
24077: PPUSH
24078: CALL_OW 251
24082: PPUSH
24083: LD_VAR 0 17
24087: PUSH
24088: LD_INT 1
24090: ARRAY
24091: PPUSH
24092: CALL_OW 254
24096: PPUSH
24097: LD_INT 5
24099: PPUSH
24100: CALL_OW 273
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24109: LD_VAR 0 16
24113: PUSH
24114: LD_INT 1
24116: ARRAY
24117: PPUSH
24118: LD_VAR 0 16
24122: PUSH
24123: LD_INT 2
24125: ARRAY
24126: PPUSH
24127: CALL_OW 488
24131: IFFALSE 24162
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24133: LD_VAR 0 13
24137: PPUSH
24138: LD_VAR 0 16
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 16
24151: PUSH
24152: LD_INT 2
24154: ARRAY
24155: PPUSH
24156: CALL_OW 111
// continue ;
24160: GO 23642
// end ; end ; r := GetDir ( tmp ) ;
24162: LD_ADDR_VAR 0 15
24166: PUSH
24167: LD_VAR 0 13
24171: PPUSH
24172: CALL_OW 254
24176: ST_TO_ADDR
// if r = 5 then
24177: LD_VAR 0 15
24181: PUSH
24182: LD_INT 5
24184: EQUAL
24185: IFFALSE 24195
// r := 0 ;
24187: LD_ADDR_VAR 0 15
24191: PUSH
24192: LD_INT 0
24194: ST_TO_ADDR
// for j = r to 5 do
24195: LD_ADDR_VAR 0 10
24199: PUSH
24200: DOUBLE
24201: LD_VAR 0 15
24205: DEC
24206: ST_TO_ADDR
24207: LD_INT 5
24209: PUSH
24210: FOR_TO
24211: IFFALSE 24327
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24213: LD_ADDR_VAR 0 11
24217: PUSH
24218: LD_VAR 0 13
24222: PPUSH
24223: CALL_OW 250
24227: PPUSH
24228: LD_VAR 0 10
24232: PPUSH
24233: LD_INT 2
24235: PPUSH
24236: CALL_OW 272
24240: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24241: LD_ADDR_VAR 0 12
24245: PUSH
24246: LD_VAR 0 13
24250: PPUSH
24251: CALL_OW 251
24255: PPUSH
24256: LD_VAR 0 10
24260: PPUSH
24261: LD_INT 2
24263: PPUSH
24264: CALL_OW 273
24268: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24269: LD_VAR 0 11
24273: PPUSH
24274: LD_VAR 0 12
24278: PPUSH
24279: CALL_OW 488
24283: IFFALSE 24302
24285: PUSH
24286: LD_VAR 0 11
24290: PPUSH
24291: LD_VAR 0 12
24295: PPUSH
24296: CALL_OW 428
24300: NOT
24301: AND
24302: IFFALSE 24325
// begin ComMoveXY ( tmp , _x , _y ) ;
24304: LD_VAR 0 13
24308: PPUSH
24309: LD_VAR 0 11
24313: PPUSH
24314: LD_VAR 0 12
24318: PPUSH
24319: CALL_OW 111
// break ;
24323: GO 24327
// end ; end ;
24325: GO 24210
24327: POP
24328: POP
// end ; end ;
24329: GO 23642
24331: POP
24332: POP
// end ;
24333: LD_VAR 0 8
24337: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24338: LD_INT 0
24340: PPUSH
// result := true ;
24341: LD_ADDR_VAR 0 3
24345: PUSH
24346: LD_INT 1
24348: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24349: LD_VAR 0 2
24353: PUSH
24354: LD_INT 24
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24368
24360: LD_INT 33
24362: DOUBLE
24363: EQUAL
24364: IFTRUE 24368
24366: GO 24393
24368: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24369: LD_ADDR_VAR 0 3
24373: PUSH
24374: LD_INT 32
24376: PPUSH
24377: LD_VAR 0 1
24381: PPUSH
24382: CALL_OW 321
24386: PUSH
24387: LD_INT 2
24389: EQUAL
24390: ST_TO_ADDR
24391: GO 24709
24393: LD_INT 20
24395: DOUBLE
24396: EQUAL
24397: IFTRUE 24401
24399: GO 24426
24401: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24402: LD_ADDR_VAR 0 3
24406: PUSH
24407: LD_INT 6
24409: PPUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: CALL_OW 321
24419: PUSH
24420: LD_INT 2
24422: EQUAL
24423: ST_TO_ADDR
24424: GO 24709
24426: LD_INT 22
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24440
24432: LD_INT 36
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24465
24440: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: LD_INT 15
24448: PPUSH
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 321
24458: PUSH
24459: LD_INT 2
24461: EQUAL
24462: ST_TO_ADDR
24463: GO 24709
24465: LD_INT 30
24467: DOUBLE
24468: EQUAL
24469: IFTRUE 24473
24471: GO 24498
24473: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_INT 20
24481: PPUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 321
24491: PUSH
24492: LD_INT 2
24494: EQUAL
24495: ST_TO_ADDR
24496: GO 24709
24498: LD_INT 28
24500: DOUBLE
24501: EQUAL
24502: IFTRUE 24512
24504: LD_INT 21
24506: DOUBLE
24507: EQUAL
24508: IFTRUE 24512
24510: GO 24537
24512: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24513: LD_ADDR_VAR 0 3
24517: PUSH
24518: LD_INT 21
24520: PPUSH
24521: LD_VAR 0 1
24525: PPUSH
24526: CALL_OW 321
24530: PUSH
24531: LD_INT 2
24533: EQUAL
24534: ST_TO_ADDR
24535: GO 24709
24537: LD_INT 16
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24570
24545: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24546: LD_ADDR_VAR 0 3
24550: PUSH
24551: LD_INT 84
24553: PPUSH
24554: LD_VAR 0 1
24558: PPUSH
24559: CALL_OW 321
24563: PUSH
24564: LD_INT 2
24566: EQUAL
24567: ST_TO_ADDR
24568: GO 24709
24570: LD_INT 19
24572: DOUBLE
24573: EQUAL
24574: IFTRUE 24584
24576: LD_INT 23
24578: DOUBLE
24579: EQUAL
24580: IFTRUE 24584
24582: GO 24609
24584: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_INT 83
24592: PPUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 321
24602: PUSH
24603: LD_INT 2
24605: EQUAL
24606: ST_TO_ADDR
24607: GO 24709
24609: LD_INT 17
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24642
24617: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24618: LD_ADDR_VAR 0 3
24622: PUSH
24623: LD_INT 39
24625: PPUSH
24626: LD_VAR 0 1
24630: PPUSH
24631: CALL_OW 321
24635: PUSH
24636: LD_INT 2
24638: EQUAL
24639: ST_TO_ADDR
24640: GO 24709
24642: LD_INT 18
24644: DOUBLE
24645: EQUAL
24646: IFTRUE 24650
24648: GO 24675
24650: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_INT 40
24658: PPUSH
24659: LD_VAR 0 1
24663: PPUSH
24664: CALL_OW 321
24668: PUSH
24669: LD_INT 2
24671: EQUAL
24672: ST_TO_ADDR
24673: GO 24709
24675: LD_INT 27
24677: DOUBLE
24678: EQUAL
24679: IFTRUE 24683
24681: GO 24708
24683: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: LD_INT 35
24691: PPUSH
24692: LD_VAR 0 1
24696: PPUSH
24697: CALL_OW 321
24701: PUSH
24702: LD_INT 2
24704: EQUAL
24705: ST_TO_ADDR
24706: GO 24709
24708: POP
// end ;
24709: LD_VAR 0 3
24713: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24714: LD_INT 0
24716: PPUSH
24717: PPUSH
24718: PPUSH
24719: PPUSH
24720: PPUSH
24721: PPUSH
24722: PPUSH
24723: PPUSH
24724: PPUSH
24725: PPUSH
24726: PPUSH
// result := false ;
24727: LD_ADDR_VAR 0 6
24731: PUSH
24732: LD_INT 0
24734: ST_TO_ADDR
// if btype = b_depot then
24735: LD_VAR 0 2
24739: PUSH
24740: LD_INT 0
24742: EQUAL
24743: IFFALSE 24755
// begin result := true ;
24745: LD_ADDR_VAR 0 6
24749: PUSH
24750: LD_INT 1
24752: ST_TO_ADDR
// exit ;
24753: GO 25609
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24755: LD_VAR 0 1
24759: NOT
24760: IFTRUE 24785
24762: PUSH
24763: LD_VAR 0 1
24767: PPUSH
24768: CALL_OW 266
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: IN
24783: NOT
24784: OR
24785: IFTRUE 24794
24787: PUSH
24788: LD_VAR 0 2
24792: NOT
24793: OR
24794: IFTRUE 24830
24796: PUSH
24797: LD_VAR 0 5
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 3
24813: PUSH
24814: LD_INT 4
24816: PUSH
24817: LD_INT 5
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: IN
24828: NOT
24829: OR
24830: IFTRUE 24849
24832: PUSH
24833: LD_VAR 0 3
24837: PPUSH
24838: LD_VAR 0 4
24842: PPUSH
24843: CALL_OW 488
24847: NOT
24848: OR
24849: IFFALSE 24853
// exit ;
24851: GO 25609
// side := GetSide ( depot ) ;
24853: LD_ADDR_VAR 0 9
24857: PUSH
24858: LD_VAR 0 1
24862: PPUSH
24863: CALL_OW 255
24867: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24868: LD_VAR 0 9
24872: PPUSH
24873: LD_VAR 0 2
24877: PPUSH
24878: CALL 24338 0 2
24882: NOT
24883: IFFALSE 24887
// exit ;
24885: GO 25609
// pom := GetBase ( depot ) ;
24887: LD_ADDR_VAR 0 10
24891: PUSH
24892: LD_VAR 0 1
24896: PPUSH
24897: CALL_OW 274
24901: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24902: LD_ADDR_VAR 0 11
24906: PUSH
24907: LD_VAR 0 2
24911: PPUSH
24912: LD_VAR 0 1
24916: PPUSH
24917: CALL_OW 248
24921: PPUSH
24922: CALL_OW 450
24926: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24927: LD_VAR 0 10
24931: PPUSH
24932: LD_INT 1
24934: PPUSH
24935: CALL_OW 275
24939: PUSH
24940: LD_VAR 0 11
24944: PUSH
24945: LD_INT 1
24947: ARRAY
24948: GREATEREQUAL
24949: IFFALSE 24975
24951: PUSH
24952: LD_VAR 0 10
24956: PPUSH
24957: LD_INT 2
24959: PPUSH
24960: CALL_OW 275
24964: PUSH
24965: LD_VAR 0 11
24969: PUSH
24970: LD_INT 2
24972: ARRAY
24973: GREATEREQUAL
24974: AND
24975: IFFALSE 25001
24977: PUSH
24978: LD_VAR 0 10
24982: PPUSH
24983: LD_INT 3
24985: PPUSH
24986: CALL_OW 275
24990: PUSH
24991: LD_VAR 0 11
24995: PUSH
24996: LD_INT 3
24998: ARRAY
24999: GREATEREQUAL
25000: AND
25001: NOT
25002: IFFALSE 25006
// exit ;
25004: GO 25609
// if GetBType ( depot ) = b_depot then
25006: LD_VAR 0 1
25010: PPUSH
25011: CALL_OW 266
25015: PUSH
25016: LD_INT 0
25018: EQUAL
25019: IFFALSE 25031
// dist := 28 else
25021: LD_ADDR_VAR 0 14
25025: PUSH
25026: LD_INT 28
25028: ST_TO_ADDR
25029: GO 25039
// dist := 36 ;
25031: LD_ADDR_VAR 0 14
25035: PUSH
25036: LD_INT 36
25038: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25039: LD_VAR 0 1
25043: PPUSH
25044: LD_VAR 0 3
25048: PPUSH
25049: LD_VAR 0 4
25053: PPUSH
25054: CALL_OW 297
25058: PUSH
25059: LD_VAR 0 14
25063: GREATER
25064: IFFALSE 25068
// exit ;
25066: GO 25609
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25068: LD_ADDR_VAR 0 12
25072: PUSH
25073: LD_VAR 0 2
25077: PPUSH
25078: LD_VAR 0 3
25082: PPUSH
25083: LD_VAR 0 4
25087: PPUSH
25088: LD_VAR 0 5
25092: PPUSH
25093: LD_VAR 0 1
25097: PPUSH
25098: CALL_OW 248
25102: PPUSH
25103: LD_INT 0
25105: PPUSH
25106: CALL 25614 0 6
25110: ST_TO_ADDR
// if not hexes then
25111: LD_VAR 0 12
25115: NOT
25116: IFFALSE 25120
// exit ;
25118: GO 25609
// hex := GetHexInfo ( x , y ) ;
25120: LD_ADDR_VAR 0 15
25124: PUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: LD_VAR 0 4
25134: PPUSH
25135: CALL_OW 546
25139: ST_TO_ADDR
// if hex [ 1 ] then
25140: LD_VAR 0 15
25144: PUSH
25145: LD_INT 1
25147: ARRAY
25148: IFFALSE 25152
// exit ;
25150: GO 25609
// height := hex [ 2 ] ;
25152: LD_ADDR_VAR 0 13
25156: PUSH
25157: LD_VAR 0 15
25161: PUSH
25162: LD_INT 2
25164: ARRAY
25165: ST_TO_ADDR
// for i = 1 to hexes do
25166: LD_ADDR_VAR 0 7
25170: PUSH
25171: DOUBLE
25172: LD_INT 1
25174: DEC
25175: ST_TO_ADDR
25176: LD_VAR 0 12
25180: PUSH
25181: FOR_TO
25182: IFFALSE 25526
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25184: LD_VAR 0 12
25188: PUSH
25189: LD_VAR 0 7
25193: ARRAY
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PPUSH
25199: LD_VAR 0 12
25203: PUSH
25204: LD_VAR 0 7
25208: ARRAY
25209: PUSH
25210: LD_INT 2
25212: ARRAY
25213: PPUSH
25214: CALL_OW 488
25218: NOT
25219: IFTRUE 25261
25221: PUSH
25222: LD_VAR 0 12
25226: PUSH
25227: LD_VAR 0 7
25231: ARRAY
25232: PUSH
25233: LD_INT 1
25235: ARRAY
25236: PPUSH
25237: LD_VAR 0 12
25241: PUSH
25242: LD_VAR 0 7
25246: ARRAY
25247: PUSH
25248: LD_INT 2
25250: ARRAY
25251: PPUSH
25252: CALL_OW 428
25256: PUSH
25257: LD_INT 0
25259: GREATER
25260: OR
25261: IFTRUE 25299
25263: PUSH
25264: LD_VAR 0 12
25268: PUSH
25269: LD_VAR 0 7
25273: ARRAY
25274: PUSH
25275: LD_INT 1
25277: ARRAY
25278: PPUSH
25279: LD_VAR 0 12
25283: PUSH
25284: LD_VAR 0 7
25288: ARRAY
25289: PUSH
25290: LD_INT 2
25292: ARRAY
25293: PPUSH
25294: CALL_OW 351
25298: OR
25299: IFFALSE 25305
// exit ;
25301: POP
25302: POP
25303: GO 25609
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25305: LD_ADDR_VAR 0 8
25309: PUSH
25310: LD_VAR 0 12
25314: PUSH
25315: LD_VAR 0 7
25319: ARRAY
25320: PUSH
25321: LD_INT 1
25323: ARRAY
25324: PPUSH
25325: LD_VAR 0 12
25329: PUSH
25330: LD_VAR 0 7
25334: ARRAY
25335: PUSH
25336: LD_INT 2
25338: ARRAY
25339: PPUSH
25340: CALL_OW 546
25344: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25345: LD_VAR 0 8
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: IFTRUE 25375
25355: PUSH
25356: LD_VAR 0 8
25360: PUSH
25361: LD_INT 2
25363: ARRAY
25364: PUSH
25365: LD_VAR 0 13
25369: PUSH
25370: LD_INT 2
25372: PLUS
25373: GREATER
25374: OR
25375: IFTRUE 25397
25377: PUSH
25378: LD_VAR 0 8
25382: PUSH
25383: LD_INT 2
25385: ARRAY
25386: PUSH
25387: LD_VAR 0 13
25391: PUSH
25392: LD_INT 2
25394: MINUS
25395: LESS
25396: OR
25397: IFTRUE 25465
25399: PUSH
25400: LD_VAR 0 8
25404: PUSH
25405: LD_INT 3
25407: ARRAY
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: LD_INT 8
25414: PUSH
25415: LD_INT 9
25417: PUSH
25418: LD_INT 10
25420: PUSH
25421: LD_INT 11
25423: PUSH
25424: LD_INT 12
25426: PUSH
25427: LD_INT 13
25429: PUSH
25430: LD_INT 16
25432: PUSH
25433: LD_INT 17
25435: PUSH
25436: LD_INT 18
25438: PUSH
25439: LD_INT 19
25441: PUSH
25442: LD_INT 20
25444: PUSH
25445: LD_INT 21
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: IN
25463: NOT
25464: OR
25465: IFTRUE 25478
25467: PUSH
25468: LD_VAR 0 8
25472: PUSH
25473: LD_INT 5
25475: ARRAY
25476: NOT
25477: OR
25478: IFTRUE 25518
25480: PUSH
25481: LD_VAR 0 8
25485: PUSH
25486: LD_INT 6
25488: ARRAY
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 7
25498: PUSH
25499: LD_INT 9
25501: PUSH
25502: LD_INT 10
25504: PUSH
25505: LD_INT 11
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: IN
25516: NOT
25517: OR
25518: IFFALSE 25524
// exit ;
25520: POP
25521: POP
25522: GO 25609
// end ;
25524: GO 25181
25526: POP
25527: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25528: LD_VAR 0 9
25532: PPUSH
25533: LD_VAR 0 3
25537: PPUSH
25538: LD_VAR 0 4
25542: PPUSH
25543: LD_INT 20
25545: PPUSH
25546: CALL 17428 0 4
25550: PUSH
25551: LD_INT 4
25553: ARRAY
25554: IFFALSE 25558
// exit ;
25556: GO 25609
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25558: LD_VAR 0 2
25562: PUSH
25563: LD_INT 29
25565: PUSH
25566: LD_INT 30
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: IN
25573: IFFALSE 25597
25575: PUSH
25576: LD_VAR 0 3
25580: PPUSH
25581: LD_VAR 0 4
25585: PPUSH
25586: LD_VAR 0 9
25590: PPUSH
25591: CALL_OW 440
25595: NOT
25596: AND
25597: IFFALSE 25601
// exit ;
25599: GO 25609
// result := true ;
25601: LD_ADDR_VAR 0 6
25605: PUSH
25606: LD_INT 1
25608: ST_TO_ADDR
// end ;
25609: LD_VAR 0 6
25613: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25614: LD_INT 0
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
25638: PPUSH
25639: PPUSH
25640: PPUSH
25641: PPUSH
25642: PPUSH
25643: PPUSH
25644: PPUSH
25645: PPUSH
25646: PPUSH
25647: PPUSH
25648: PPUSH
25649: PPUSH
25650: PPUSH
25651: PPUSH
25652: PPUSH
25653: PPUSH
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
25658: PPUSH
25659: PPUSH
25660: PPUSH
25661: PPUSH
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
// result = [ ] ;
25674: LD_ADDR_VAR 0 7
25678: PUSH
25679: EMPTY
25680: ST_TO_ADDR
// temp_list = [ ] ;
25681: LD_ADDR_VAR 0 9
25685: PUSH
25686: EMPTY
25687: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25688: LD_VAR 0 4
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 2
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: LD_INT 4
25707: PUSH
25708: LD_INT 5
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: IN
25719: NOT
25720: IFTRUE 25763
25722: PUSH
25723: LD_VAR 0 1
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: IN
25738: IFFALSE 25762
25740: PUSH
25741: LD_VAR 0 5
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: LIST
25759: IN
25760: NOT
25761: AND
25762: OR
25763: IFFALSE 25767
// exit ;
25765: GO 44166
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25767: LD_VAR 0 1
25771: PUSH
25772: LD_INT 6
25774: PUSH
25775: LD_INT 7
25777: PUSH
25778: LD_INT 8
25780: PUSH
25781: LD_INT 13
25783: PUSH
25784: LD_INT 12
25786: PUSH
25787: LD_INT 15
25789: PUSH
25790: LD_INT 11
25792: PUSH
25793: LD_INT 14
25795: PUSH
25796: LD_INT 10
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: IN
25810: IFFALSE 25820
// btype = b_lab ;
25812: LD_ADDR_VAR 0 1
25816: PUSH
25817: LD_INT 6
25819: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25820: LD_VAR 0 6
25824: PUSH
25825: LD_INT 0
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: IN
25839: NOT
25840: IFTRUE 25908
25842: PUSH
25843: LD_VAR 0 1
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: LD_INT 3
25859: PUSH
25860: LD_INT 6
25862: PUSH
25863: LD_INT 36
25865: PUSH
25866: LD_INT 4
25868: PUSH
25869: LD_INT 5
25871: PUSH
25872: LD_INT 31
25874: PUSH
25875: LD_INT 32
25877: PUSH
25878: LD_INT 33
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: IN
25894: NOT
25895: IFFALSE 25907
25897: PUSH
25898: LD_VAR 0 6
25902: PUSH
25903: LD_INT 1
25905: EQUAL
25906: AND
25907: OR
25908: IFTRUE 25940
25910: PUSH
25911: LD_VAR 0 1
25915: PUSH
25916: LD_INT 2
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: IN
25926: NOT
25927: IFFALSE 25939
25929: PUSH
25930: LD_VAR 0 6
25934: PUSH
25935: LD_INT 2
25937: EQUAL
25938: AND
25939: OR
25940: IFFALSE 25950
// mode = 0 ;
25942: LD_ADDR_VAR 0 6
25946: PUSH
25947: LD_INT 0
25949: ST_TO_ADDR
// case mode of 0 :
25950: LD_VAR 0 6
25954: PUSH
25955: LD_INT 0
25957: DOUBLE
25958: EQUAL
25959: IFTRUE 25963
25961: GO 37416
25963: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25964: LD_ADDR_VAR 0 11
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 1
26110: PUSH
26111: LD_INT 3
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 3
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: NEG
26131: PUSH
26132: LD_INT 2
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26157: LD_ADDR_VAR 0 12
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 1
26177: NEG
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: NEG
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: LD_INT 1
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: PUSH
26260: LD_INT 1
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 2
26291: NEG
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 3
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 3
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26353: LD_ADDR_VAR 0 13
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 0
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 0
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 2
26446: PUSH
26447: LD_INT 1
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 2
26456: PUSH
26457: LD_INT 2
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 2
26476: NEG
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: NEG
26489: PUSH
26490: LD_INT 2
26492: NEG
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 2
26500: NEG
26501: PUSH
26502: LD_INT 3
26504: NEG
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 3
26512: NEG
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 3
26524: NEG
26525: PUSH
26526: LD_INT 3
26528: NEG
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26552: LD_ADDR_VAR 0 14
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 1
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: LD_INT 1
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: LD_INT 2
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: NEG
26699: PUSH
26700: LD_INT 3
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 3
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: LD_INT 2
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26748: LD_ADDR_VAR 0 15
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 0
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 1
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: NEG
26872: PUSH
26873: LD_INT 0
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: LD_INT 1
26886: NEG
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: LD_INT 1
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 3
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26941: LD_ADDR_VAR 0 16
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 2
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 2
27034: PUSH
27035: LD_INT 1
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: LD_INT 1
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: NEG
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: LD_INT 3
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 2
27108: PUSH
27109: LD_INT 3
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27134: LD_ADDR_VAR 0 17
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: PUSH
27163: LD_INT 0
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: LD_INT 0
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 1
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 1
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: LD_INT 2
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27364: LD_ADDR_VAR 0 18
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: LD_INT 1
27384: NEG
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: PUSH
27393: LD_INT 0
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: NEG
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 1
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 2
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 0
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: LD_INT 2
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27594: LD_ADDR_VAR 0 19
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: NEG
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 2
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 2
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27824: LD_ADDR_VAR 0 20
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 2
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 0
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 2
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 2
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28054: LD_ADDR_VAR 0 21
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 0
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 0
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 1
28219: NEG
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: NEG
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: LD_INT 2
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28284: LD_ADDR_VAR 0 22
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: LD_INT 1
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 1
28342: NEG
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 2
28369: NEG
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28514: LD_ADDR_VAR 0 23
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 0
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: NEG
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 1
28587: NEG
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: LD_INT 2
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: LD_INT 3
28729: NEG
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: LD_INT 3
28741: NEG
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: LD_INT 2
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: LD_INT 1
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28794: LD_ADDR_VAR 0 24
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 0
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 2
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: LD_INT 2
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 0
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 1
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: LD_INT 2
28970: NEG
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: LD_INT 2
28997: NEG
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 2
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 3
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 3
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29070: LD_ADDR_VAR 0 25
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: LD_INT 0
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: LD_INT 1
29143: NEG
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 0
29163: PUSH
29164: LD_INT 2
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 2
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 0
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 1
29235: NEG
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 2
29246: NEG
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 2
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 3
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 3
29291: PUSH
29292: LD_INT 2
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29344: LD_ADDR_VAR 0 26
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 1
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 2
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: LD_INT 1
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: LD_INT 0
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 2
29586: NEG
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29620: LD_ADDR_VAR 0 27
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 0
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 0
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 1
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: LD_INT 2
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 2
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 0
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: LD_INT 1
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: LD_INT 2
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 3
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 3
29865: NEG
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29900: LD_ADDR_VAR 0 28
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 2
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: LD_INT 1
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 2
30087: NEG
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: LD_INT 2
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 2
30111: NEG
30112: PUSH
30113: LD_INT 3
30115: NEG
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: LD_INT 3
30127: NEG
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 3
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 3
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30182: LD_ADDR_VAR 0 29
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 0
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: LD_INT 1
30255: NEG
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: LD_INT 2
30267: NEG
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 0
30275: PUSH
30276: LD_INT 2
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 2
30297: PUSH
30298: LD_INT 0
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 2
30307: PUSH
30308: LD_INT 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 2
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: NEG
30373: PUSH
30374: LD_INT 3
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 2
30384: PUSH
30385: LD_INT 1
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 3
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: NEG
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 3
30426: NEG
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30461: LD_ADDR_VAR 0 30
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 2
30638: NEG
30639: PUSH
30640: LD_INT 1
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 3
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 2
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: LD_INT 2
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: LD_INT 1
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30739: LD_ADDR_VAR 0 31
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 1
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: LD_INT 1
30812: NEG
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 2
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 2
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 2
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: LD_INT 1
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: LD_INT 2
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 3
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: LD_INT 2
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31017: LD_ADDR_VAR 0 32
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: NEG
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 2
31194: NEG
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 3
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 3
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31295: LD_ADDR_VAR 0 33
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 2
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 2
31461: NEG
31462: PUSH
31463: LD_INT 1
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: LD_INT 3
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 3
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31574: LD_ADDR_VAR 0 34
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: NEG
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 1
31765: NEG
31766: PUSH
31767: LD_INT 3
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 2
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31854: LD_ADDR_VAR 0 35
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: LD_INT 0
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: LD_INT 1
31874: NEG
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 1
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 1
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 1
31912: NEG
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31966: LD_ADDR_VAR 0 36
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 0
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 1
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32078: LD_ADDR_VAR 0 37
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: NEG
32137: PUSH
32138: LD_INT 0
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32190: LD_ADDR_VAR 0 38
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32302: LD_ADDR_VAR 0 39
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 2
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: LD_INT 2
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32414: LD_ADDR_VAR 0 40
32418: PUSH
32419: LD_INT 0
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 1
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: LD_INT 0
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32526: LD_ADDR_VAR 0 41
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 1
32546: NEG
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 0
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 1
32584: NEG
32585: PUSH
32586: LD_INT 0
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 0
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: NEG
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 3
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 3
32749: PUSH
32750: LD_INT 1
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 3
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: NEG
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 3
32835: NEG
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32876: LD_ADDR_VAR 0 42
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 1
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 1
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 2
33054: NEG
33055: PUSH
33056: LD_INT 2
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 3
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: LD_INT 3
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 2
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 1
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 0
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 3
33173: NEG
33174: PUSH
33175: LD_INT 2
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: LD_INT 3
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33226: LD_ADDR_VAR 0 43
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 2
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 1
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: NEG
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 1
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 3
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 3
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 3
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 1
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33574: LD_ADDR_VAR 0 44
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: LD_INT 1
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: LD_INT 3
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 3
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 3
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 3
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 2
33837: NEG
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 3
33848: NEG
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: LD_INT 3
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33924: LD_ADDR_VAR 0 45
33928: PUSH
33929: LD_INT 0
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: LD_INT 2
34009: NEG
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 2
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: NEG
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 2
34102: NEG
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: LD_INT 3
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 3
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 3
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 3
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 3
34170: PUSH
34171: LD_INT 3
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 3
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 3
34221: NEG
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 3
34233: NEG
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34274: LD_ADDR_VAR 0 46
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 2
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 0
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: LD_INT 3
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 3
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 3
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: LD_INT 2
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 3
34570: NEG
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: NEG
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34622: LD_ADDR_VAR 0 47
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 0
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 2
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34773: LD_ADDR_VAR 0 48
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 1
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: PUSH
34812: LD_INT 1
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 0
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 0
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34920: LD_ADDR_VAR 0 49
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 0
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 1
34978: NEG
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35064: LD_ADDR_VAR 0 50
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 0
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35208: LD_ADDR_VAR 0 51
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 1
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: LD_INT 0
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: LD_INT 1
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 2
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35355: LD_ADDR_VAR 0 52
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 1
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 2
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35506: LD_ADDR_VAR 0 53
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 0
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 0
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: NEG
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 2
35693: NEG
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: LD_INT 2
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35736: LD_ADDR_VAR 0 54
35740: PUSH
35741: LD_INT 0
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35966: LD_ADDR_VAR 0 55
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: NEG
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 2
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 2
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 2
36142: NEG
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36196: LD_ADDR_VAR 0 56
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 0
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36426: LD_ADDR_VAR 0 57
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: LD_INT 0
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: NEG
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36656: LD_ADDR_VAR 0 58
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: NEG
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: NEG
36833: PUSH
36834: LD_INT 0
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36886: LD_ADDR_VAR 0 59
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: NEG
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36974: LD_ADDR_VAR 0 60
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 1
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37062: LD_ADDR_VAR 0 61
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: LD_INT 0
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37150: LD_ADDR_VAR 0 62
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37238: LD_ADDR_VAR 0 63
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: LD_INT 1
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: NEG
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37326: LD_ADDR_VAR 0 64
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: ST_TO_ADDR
// end ; 1 :
37414: GO 43311
37416: LD_INT 1
37418: DOUBLE
37419: EQUAL
37420: IFTRUE 37424
37422: GO 40047
37424: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37425: LD_ADDR_VAR 0 11
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: LD_INT 3
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: LD_INT 2
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37469: LD_ADDR_VAR 0 12
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 3
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37510: LD_ADDR_VAR 0 13
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: LD_INT 3
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37550: LD_ADDR_VAR 0 14
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37591: LD_ADDR_VAR 0 15
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: NEG
37610: PUSH
37611: LD_INT 0
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 3
37620: NEG
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: LIST
37634: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37635: LD_ADDR_VAR 0 16
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 3
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: NEG
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37681: LD_ADDR_VAR 0 17
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 3
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: LIST
37724: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37725: LD_ADDR_VAR 0 18
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 3
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 3
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37766: LD_ADDR_VAR 0 19
37770: PUSH
37771: LD_INT 3
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37806: LD_ADDR_VAR 0 20
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: LD_INT 3
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37847: LD_ADDR_VAR 0 21
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 3
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37891: LD_ADDR_VAR 0 22
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: LD_INT 3
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37937: LD_ADDR_VAR 0 23
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 3
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 4
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 3
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37981: LD_ADDR_VAR 0 24
37985: PUSH
37986: LD_INT 3
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 3
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 4
38009: PUSH
38010: LD_INT 1
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38022: LD_ADDR_VAR 0 25
38026: PUSH
38027: LD_INT 3
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 4
38039: PUSH
38040: LD_INT 3
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 3
38049: PUSH
38050: LD_INT 4
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: LIST
38061: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38062: LD_ADDR_VAR 0 26
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 4
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: LD_INT 3
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38103: LD_ADDR_VAR 0 27
38107: PUSH
38108: LD_INT 3
38110: NEG
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 3
38121: NEG
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 4
38132: NEG
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38147: LD_ADDR_VAR 0 28
38151: PUSH
38152: LD_INT 3
38154: NEG
38155: PUSH
38156: LD_INT 3
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 3
38166: NEG
38167: PUSH
38168: LD_INT 4
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 4
38178: NEG
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38193: LD_ADDR_VAR 0 29
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 3
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 0
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 4
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 4
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 3
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 5
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 5
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 4
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 6
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 6
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 5
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38348: LD_ADDR_VAR 0 30
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 1
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 3
38376: PUSH
38377: LD_INT 1
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 3
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 4
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 4
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 4
38417: PUSH
38418: LD_INT 1
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 5
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 5
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 5
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 6
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 6
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38491: LD_ADDR_VAR 0 31
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 4
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 4
38538: PUSH
38539: LD_INT 4
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 3
38548: PUSH
38549: LD_INT 4
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 5
38558: PUSH
38559: LD_INT 4
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 5
38568: PUSH
38569: LD_INT 5
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 4
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 6
38588: PUSH
38589: LD_INT 5
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 6
38598: PUSH
38599: LD_INT 6
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 5
38608: PUSH
38609: LD_INT 6
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38630: LD_ADDR_VAR 0 32
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 3
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: LD_INT 2
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: LD_INT 4
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 4
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 5
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 5
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 4
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 6
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 6
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 5
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38773: LD_ADDR_VAR 0 33
38777: PUSH
38778: LD_INT 2
38780: NEG
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 3
38791: NEG
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 3
38802: NEG
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 4
38825: NEG
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 4
38836: NEG
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 4
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 5
38859: NEG
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 5
38870: NEG
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 5
38882: NEG
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 6
38893: NEG
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 6
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38928: LD_ADDR_VAR 0 34
38932: PUSH
38933: LD_INT 2
38935: NEG
38936: PUSH
38937: LD_INT 3
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 3
38947: NEG
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 3
38959: NEG
38960: PUSH
38961: LD_INT 3
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 3
38971: NEG
38972: PUSH
38973: LD_INT 4
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 4
38983: NEG
38984: PUSH
38985: LD_INT 3
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 4
38995: NEG
38996: PUSH
38997: LD_INT 4
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 4
39007: NEG
39008: PUSH
39009: LD_INT 5
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 5
39019: NEG
39020: PUSH
39021: LD_INT 4
39023: NEG
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 5
39031: NEG
39032: PUSH
39033: LD_INT 5
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 5
39043: NEG
39044: PUSH
39045: LD_INT 6
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 6
39055: NEG
39056: PUSH
39057: LD_INT 5
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 6
39067: NEG
39068: PUSH
39069: LD_INT 6
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39091: LD_ADDR_VAR 0 41
39095: PUSH
39096: LD_INT 0
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39135: LD_ADDR_VAR 0 42
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39176: LD_ADDR_VAR 0 43
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39216: LD_ADDR_VAR 0 44
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: LIST
39256: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39257: LD_ADDR_VAR 0 45
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39301: LD_ADDR_VAR 0 46
39305: PUSH
39306: LD_INT 2
39308: NEG
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: LD_INT 3
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39347: LD_ADDR_VAR 0 47
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 3
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: LD_INT 3
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39380: LD_ADDR_VAR 0 48
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39411: LD_ADDR_VAR 0 49
39415: PUSH
39416: LD_INT 3
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: PUSH
39429: LD_INT 2
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39440: LD_ADDR_VAR 0 50
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 3
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 3
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39469: LD_ADDR_VAR 0 51
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39500: LD_ADDR_VAR 0 52
39504: PUSH
39505: LD_INT 3
39507: NEG
39508: PUSH
39509: LD_INT 1
39511: NEG
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 3
39519: NEG
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39533: LD_ADDR_VAR 0 53
39537: PUSH
39538: LD_INT 1
39540: NEG
39541: PUSH
39542: LD_INT 3
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 3
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: LIST
39576: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39577: LD_ADDR_VAR 0 54
39581: PUSH
39582: LD_INT 2
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 3
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39618: LD_ADDR_VAR 0 55
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39658: LD_ADDR_VAR 0 56
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 3
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: LIST
39698: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39699: LD_ADDR_VAR 0 57
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 3
39717: NEG
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 3
39728: NEG
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39743: LD_ADDR_VAR 0 58
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: LD_INT 3
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 3
39774: NEG
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39789: LD_ADDR_VAR 0 59
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39833: LD_ADDR_VAR 0 60
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39874: LD_ADDR_VAR 0 61
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: LIST
39913: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39914: LD_ADDR_VAR 0 62
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39955: LD_ADDR_VAR 0 63
39959: PUSH
39960: LD_INT 1
39962: NEG
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: LIST
39998: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39999: LD_ADDR_VAR 0 64
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
// end ; 2 :
40045: GO 43311
40047: LD_INT 2
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 43310
40055: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40056: LD_ADDR_VAR 0 29
40060: PUSH
40061: LD_INT 4
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 4
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 5
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 5
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 4
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 3
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: LD_INT 1
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 3
40135: PUSH
40136: LD_INT 2
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 5
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 3
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 4
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 4
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 4
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: LD_INT 3
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 4
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 4
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: LD_INT 4
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 3
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 4
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 5
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 5
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 4
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 3
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 5
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: NEG
40329: PUSH
40330: LD_INT 3
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 3
40350: NEG
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 4
40395: NEG
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 4
40406: NEG
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 4
40418: NEG
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 4
40441: NEG
40442: PUSH
40443: LD_INT 4
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 4
40453: NEG
40454: PUSH
40455: LD_INT 5
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 3
40465: NEG
40466: PUSH
40467: LD_INT 4
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: LD_INT 3
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 4
40489: NEG
40490: PUSH
40491: LD_INT 3
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 5
40501: NEG
40502: PUSH
40503: LD_INT 4
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 5
40513: NEG
40514: PUSH
40515: LD_INT 5
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 3
40525: NEG
40526: PUSH
40527: LD_INT 5
40529: NEG
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 5
40537: NEG
40538: PUSH
40539: LD_INT 3
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40594: LD_ADDR_VAR 0 30
40598: PUSH
40599: LD_INT 4
40601: PUSH
40602: LD_INT 4
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 4
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 5
40621: PUSH
40622: LD_INT 4
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 5
40631: PUSH
40632: LD_INT 5
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 4
40641: PUSH
40642: LD_INT 5
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: LD_INT 4
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 3
40661: PUSH
40662: LD_INT 3
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 5
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: LD_INT 5
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 3
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 3
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 4
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 4
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: LD_INT 4
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 2
40773: NEG
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 4
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 4
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: NEG
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 4
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 5
40840: NEG
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 5
40851: NEG
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 5
40863: NEG
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 3
40875: NEG
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 3
40886: NEG
40887: PUSH
40888: LD_INT 3
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: NEG
40899: PUSH
40900: LD_INT 4
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 3
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 3
40934: NEG
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 4
40946: NEG
40947: PUSH
40948: LD_INT 3
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 4
40958: NEG
40959: PUSH
40960: LD_INT 4
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 4
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 4
40982: NEG
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 5
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 4
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 4
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 5
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 3
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: LD_INT 5
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41141: LD_ADDR_VAR 0 31
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 4
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: LD_INT 3
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 4
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: LD_INT 5
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 5
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 4
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: LD_INT 3
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 5
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: NEG
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 3
41241: NEG
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 3
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 4
41297: NEG
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 4
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 4
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 4
41343: NEG
41344: PUSH
41345: LD_INT 4
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 4
41355: NEG
41356: PUSH
41357: LD_INT 5
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 3
41367: NEG
41368: PUSH
41369: LD_INT 4
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 3
41379: NEG
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 4
41391: NEG
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 5
41403: NEG
41404: PUSH
41405: LD_INT 4
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 5
41415: NEG
41416: PUSH
41417: LD_INT 5
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 3
41427: NEG
41428: PUSH
41429: LD_INT 5
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 5
41439: NEG
41440: PUSH
41441: LD_INT 3
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 3
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: LD_INT 4
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 2
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 2
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: LD_INT 4
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 2
41541: NEG
41542: PUSH
41543: LD_INT 4
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 4
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 4
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 5
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 5
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 4
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 3
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 3
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 5
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41691: LD_ADDR_VAR 0 32
41695: PUSH
41696: LD_INT 4
41698: NEG
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 4
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: NEG
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 4
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 5
41754: NEG
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 5
41765: NEG
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 5
41777: NEG
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 3
41789: NEG
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 3
41800: NEG
41801: PUSH
41802: LD_INT 3
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: LD_INT 4
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 3
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 3
41848: NEG
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 4
41860: NEG
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 4
41872: NEG
41873: PUSH
41874: LD_INT 4
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: LD_INT 4
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 4
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 4
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 5
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 4
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: LD_INT 4
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 5
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 5
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 3
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 4
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 4
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 2
42071: PUSH
42072: LD_INT 1
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 4
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 4
42103: PUSH
42104: LD_INT 4
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 4
42113: PUSH
42114: LD_INT 3
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 5
42123: PUSH
42124: LD_INT 4
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 5
42133: PUSH
42134: LD_INT 5
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 4
42143: PUSH
42144: LD_INT 5
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: LD_INT 4
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 3
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 5
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 5
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42238: LD_ADDR_VAR 0 33
42242: PUSH
42243: LD_INT 4
42245: NEG
42246: PUSH
42247: LD_INT 4
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 4
42257: NEG
42258: PUSH
42259: LD_INT 5
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 3
42269: NEG
42270: PUSH
42271: LD_INT 4
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: NEG
42282: PUSH
42283: LD_INT 3
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 4
42293: NEG
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 5
42305: NEG
42306: PUSH
42307: LD_INT 4
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 5
42317: NEG
42318: PUSH
42319: LD_INT 5
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 3
42329: NEG
42330: PUSH
42331: LD_INT 5
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 5
42341: NEG
42342: PUSH
42343: LD_INT 3
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: LD_INT 4
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 3
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 4
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: NEG
42444: PUSH
42445: LD_INT 4
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 4
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 4
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 5
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 5
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 4
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 5
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: PUSH
42549: LD_INT 3
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 4
42568: PUSH
42569: LD_INT 3
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 4
42578: PUSH
42579: LD_INT 4
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 3
42588: PUSH
42589: LD_INT 4
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: LD_INT 3
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 4
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: PUSH
42629: LD_INT 4
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 4
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 3
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 4
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 5
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 5
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 4
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 2
42710: PUSH
42711: LD_INT 5
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 2
42720: NEG
42721: PUSH
42722: LD_INT 3
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42776: LD_ADDR_VAR 0 34
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: LD_INT 4
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 5
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 4
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 4
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 5
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 3
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: LD_INT 5
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 3
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 4
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 4
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 4
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 4
42978: PUSH
42979: LD_INT 4
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 4
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 5
42998: PUSH
42999: LD_INT 4
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 5
43008: PUSH
43009: LD_INT 5
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 4
43018: PUSH
43019: LD_INT 5
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: LD_INT 4
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: LD_INT 3
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 5
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: LD_INT 5
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: LD_INT 2
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 3
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: LD_INT 4
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: NEG
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 4
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 4
43161: NEG
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 4
43172: NEG
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 4
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 5
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 5
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 5
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// end ; end ;
43308: GO 43311
43310: POP
// case btype of b_depot , b_warehouse :
43311: LD_VAR 0 1
43315: PUSH
43316: LD_INT 0
43318: DOUBLE
43319: EQUAL
43320: IFTRUE 43330
43322: LD_INT 1
43324: DOUBLE
43325: EQUAL
43326: IFTRUE 43330
43328: GO 43531
43330: POP
// case nation of nation_american :
43331: LD_VAR 0 5
43335: PUSH
43336: LD_INT 1
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43400
43344: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43345: LD_ADDR_VAR 0 9
43349: PUSH
43350: LD_VAR 0 11
43354: PUSH
43355: LD_VAR 0 12
43359: PUSH
43360: LD_VAR 0 13
43364: PUSH
43365: LD_VAR 0 14
43369: PUSH
43370: LD_VAR 0 15
43374: PUSH
43375: LD_VAR 0 16
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: PUSH
43388: LD_VAR 0 4
43392: PUSH
43393: LD_INT 1
43395: PLUS
43396: ARRAY
43397: ST_TO_ADDR
43398: GO 43529
43400: LD_INT 2
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43464
43408: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43409: LD_ADDR_VAR 0 9
43413: PUSH
43414: LD_VAR 0 17
43418: PUSH
43419: LD_VAR 0 18
43423: PUSH
43424: LD_VAR 0 19
43428: PUSH
43429: LD_VAR 0 20
43433: PUSH
43434: LD_VAR 0 21
43438: PUSH
43439: LD_VAR 0 22
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: PUSH
43452: LD_VAR 0 4
43456: PUSH
43457: LD_INT 1
43459: PLUS
43460: ARRAY
43461: ST_TO_ADDR
43462: GO 43529
43464: LD_INT 3
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 43528
43472: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43473: LD_ADDR_VAR 0 9
43477: PUSH
43478: LD_VAR 0 23
43482: PUSH
43483: LD_VAR 0 24
43487: PUSH
43488: LD_VAR 0 25
43492: PUSH
43493: LD_VAR 0 26
43497: PUSH
43498: LD_VAR 0 27
43502: PUSH
43503: LD_VAR 0 28
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: PUSH
43516: LD_VAR 0 4
43520: PUSH
43521: LD_INT 1
43523: PLUS
43524: ARRAY
43525: ST_TO_ADDR
43526: GO 43529
43528: POP
43529: GO 44084
43531: LD_INT 2
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43545
43537: LD_INT 3
43539: DOUBLE
43540: EQUAL
43541: IFTRUE 43545
43543: GO 43601
43545: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43546: LD_ADDR_VAR 0 9
43550: PUSH
43551: LD_VAR 0 29
43555: PUSH
43556: LD_VAR 0 30
43560: PUSH
43561: LD_VAR 0 31
43565: PUSH
43566: LD_VAR 0 32
43570: PUSH
43571: LD_VAR 0 33
43575: PUSH
43576: LD_VAR 0 34
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: PUSH
43589: LD_VAR 0 4
43593: PUSH
43594: LD_INT 1
43596: PLUS
43597: ARRAY
43598: ST_TO_ADDR
43599: GO 44084
43601: LD_INT 16
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43663
43607: LD_INT 17
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43663
43613: LD_INT 18
43615: DOUBLE
43616: EQUAL
43617: IFTRUE 43663
43619: LD_INT 19
43621: DOUBLE
43622: EQUAL
43623: IFTRUE 43663
43625: LD_INT 22
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43663
43631: LD_INT 20
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43663
43637: LD_INT 21
43639: DOUBLE
43640: EQUAL
43641: IFTRUE 43663
43643: LD_INT 23
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43663
43649: LD_INT 24
43651: DOUBLE
43652: EQUAL
43653: IFTRUE 43663
43655: LD_INT 25
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43663
43661: GO 43719
43663: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43664: LD_ADDR_VAR 0 9
43668: PUSH
43669: LD_VAR 0 35
43673: PUSH
43674: LD_VAR 0 36
43678: PUSH
43679: LD_VAR 0 37
43683: PUSH
43684: LD_VAR 0 38
43688: PUSH
43689: LD_VAR 0 39
43693: PUSH
43694: LD_VAR 0 40
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: PUSH
43707: LD_VAR 0 4
43711: PUSH
43712: LD_INT 1
43714: PLUS
43715: ARRAY
43716: ST_TO_ADDR
43717: GO 44084
43719: LD_INT 6
43721: DOUBLE
43722: EQUAL
43723: IFTRUE 43775
43725: LD_INT 7
43727: DOUBLE
43728: EQUAL
43729: IFTRUE 43775
43731: LD_INT 8
43733: DOUBLE
43734: EQUAL
43735: IFTRUE 43775
43737: LD_INT 13
43739: DOUBLE
43740: EQUAL
43741: IFTRUE 43775
43743: LD_INT 12
43745: DOUBLE
43746: EQUAL
43747: IFTRUE 43775
43749: LD_INT 15
43751: DOUBLE
43752: EQUAL
43753: IFTRUE 43775
43755: LD_INT 11
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43775
43761: LD_INT 14
43763: DOUBLE
43764: EQUAL
43765: IFTRUE 43775
43767: LD_INT 10
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43775
43773: GO 43831
43775: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43776: LD_ADDR_VAR 0 9
43780: PUSH
43781: LD_VAR 0 41
43785: PUSH
43786: LD_VAR 0 42
43790: PUSH
43791: LD_VAR 0 43
43795: PUSH
43796: LD_VAR 0 44
43800: PUSH
43801: LD_VAR 0 45
43805: PUSH
43806: LD_VAR 0 46
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: PUSH
43819: LD_VAR 0 4
43823: PUSH
43824: LD_INT 1
43826: PLUS
43827: ARRAY
43828: ST_TO_ADDR
43829: GO 44084
43831: LD_INT 36
43833: DOUBLE
43834: EQUAL
43835: IFTRUE 43839
43837: GO 43895
43839: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43840: LD_ADDR_VAR 0 9
43844: PUSH
43845: LD_VAR 0 47
43849: PUSH
43850: LD_VAR 0 48
43854: PUSH
43855: LD_VAR 0 49
43859: PUSH
43860: LD_VAR 0 50
43864: PUSH
43865: LD_VAR 0 51
43869: PUSH
43870: LD_VAR 0 52
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: PUSH
43883: LD_VAR 0 4
43887: PUSH
43888: LD_INT 1
43890: PLUS
43891: ARRAY
43892: ST_TO_ADDR
43893: GO 44084
43895: LD_INT 4
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43921
43901: LD_INT 5
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43921
43907: LD_INT 34
43909: DOUBLE
43910: EQUAL
43911: IFTRUE 43921
43913: LD_INT 37
43915: DOUBLE
43916: EQUAL
43917: IFTRUE 43921
43919: GO 43977
43921: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43922: LD_ADDR_VAR 0 9
43926: PUSH
43927: LD_VAR 0 53
43931: PUSH
43932: LD_VAR 0 54
43936: PUSH
43937: LD_VAR 0 55
43941: PUSH
43942: LD_VAR 0 56
43946: PUSH
43947: LD_VAR 0 57
43951: PUSH
43952: LD_VAR 0 58
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: LD_VAR 0 4
43969: PUSH
43970: LD_INT 1
43972: PLUS
43973: ARRAY
43974: ST_TO_ADDR
43975: GO 44084
43977: LD_INT 31
43979: DOUBLE
43980: EQUAL
43981: IFTRUE 44027
43983: LD_INT 32
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 44027
43989: LD_INT 33
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 44027
43995: LD_INT 27
43997: DOUBLE
43998: EQUAL
43999: IFTRUE 44027
44001: LD_INT 26
44003: DOUBLE
44004: EQUAL
44005: IFTRUE 44027
44007: LD_INT 28
44009: DOUBLE
44010: EQUAL
44011: IFTRUE 44027
44013: LD_INT 29
44015: DOUBLE
44016: EQUAL
44017: IFTRUE 44027
44019: LD_INT 30
44021: DOUBLE
44022: EQUAL
44023: IFTRUE 44027
44025: GO 44083
44027: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44028: LD_ADDR_VAR 0 9
44032: PUSH
44033: LD_VAR 0 59
44037: PUSH
44038: LD_VAR 0 60
44042: PUSH
44043: LD_VAR 0 61
44047: PUSH
44048: LD_VAR 0 62
44052: PUSH
44053: LD_VAR 0 63
44057: PUSH
44058: LD_VAR 0 64
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: PUSH
44071: LD_VAR 0 4
44075: PUSH
44076: LD_INT 1
44078: PLUS
44079: ARRAY
44080: ST_TO_ADDR
44081: GO 44084
44083: POP
// temp_list2 = [ ] ;
44084: LD_ADDR_VAR 0 10
44088: PUSH
44089: EMPTY
44090: ST_TO_ADDR
// for i in temp_list do
44091: LD_ADDR_VAR 0 8
44095: PUSH
44096: LD_VAR 0 9
44100: PUSH
44101: FOR_IN
44102: IFFALSE 44154
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44104: LD_ADDR_VAR 0 10
44108: PUSH
44109: LD_VAR 0 10
44113: PUSH
44114: LD_VAR 0 8
44118: PUSH
44119: LD_INT 1
44121: ARRAY
44122: PUSH
44123: LD_VAR 0 2
44127: PLUS
44128: PUSH
44129: LD_VAR 0 8
44133: PUSH
44134: LD_INT 2
44136: ARRAY
44137: PUSH
44138: LD_VAR 0 3
44142: PLUS
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: EMPTY
44149: LIST
44150: ADD
44151: ST_TO_ADDR
44152: GO 44101
44154: POP
44155: POP
// result = temp_list2 ;
44156: LD_ADDR_VAR 0 7
44160: PUSH
44161: LD_VAR 0 10
44165: ST_TO_ADDR
// end ;
44166: LD_VAR 0 7
44170: RET
// export function EnemyInRange ( unit , dist ) ; begin
44171: LD_INT 0
44173: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44174: LD_ADDR_VAR 0 3
44178: PUSH
44179: LD_VAR 0 1
44183: PPUSH
44184: CALL_OW 255
44188: PPUSH
44189: LD_VAR 0 1
44193: PPUSH
44194: CALL_OW 250
44198: PPUSH
44199: LD_VAR 0 1
44203: PPUSH
44204: CALL_OW 251
44208: PPUSH
44209: LD_VAR 0 2
44213: PPUSH
44214: CALL 17428 0 4
44218: PUSH
44219: LD_INT 4
44221: ARRAY
44222: ST_TO_ADDR
// end ;
44223: LD_VAR 0 3
44227: RET
// export function PlayerSeeMe ( unit ) ; begin
44228: LD_INT 0
44230: PPUSH
// result := See ( your_side , unit ) ;
44231: LD_ADDR_VAR 0 2
44235: PUSH
44236: LD_OWVAR 2
44240: PPUSH
44241: LD_VAR 0 1
44245: PPUSH
44246: CALL_OW 292
44250: ST_TO_ADDR
// end ;
44251: LD_VAR 0 2
44255: RET
// export function ReverseDir ( unit ) ; begin
44256: LD_INT 0
44258: PPUSH
// if not unit then
44259: LD_VAR 0 1
44263: NOT
44264: IFFALSE 44268
// exit ;
44266: GO 44291
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44268: LD_ADDR_VAR 0 2
44272: PUSH
44273: LD_VAR 0 1
44277: PPUSH
44278: CALL_OW 254
44282: PUSH
44283: LD_INT 3
44285: PLUS
44286: PUSH
44287: LD_INT 6
44289: MOD
44290: ST_TO_ADDR
// end ;
44291: LD_VAR 0 2
44295: RET
// export function ReverseArray ( array ) ; var i ; begin
44296: LD_INT 0
44298: PPUSH
44299: PPUSH
// if not array then
44300: LD_VAR 0 1
44304: NOT
44305: IFFALSE 44309
// exit ;
44307: GO 44364
// result := [ ] ;
44309: LD_ADDR_VAR 0 2
44313: PUSH
44314: EMPTY
44315: ST_TO_ADDR
// for i := array downto 1 do
44316: LD_ADDR_VAR 0 3
44320: PUSH
44321: DOUBLE
44322: LD_VAR 0 1
44326: INC
44327: ST_TO_ADDR
44328: LD_INT 1
44330: PUSH
44331: FOR_DOWNTO
44332: IFFALSE 44362
// result := Join ( result , array [ i ] ) ;
44334: LD_ADDR_VAR 0 2
44338: PUSH
44339: LD_VAR 0 2
44343: PPUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_VAR 0 3
44353: ARRAY
44354: PPUSH
44355: CALL 49216 0 2
44359: ST_TO_ADDR
44360: GO 44331
44362: POP
44363: POP
// end ;
44364: LD_VAR 0 2
44368: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
44369: LD_INT 0
44371: PPUSH
44372: PPUSH
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
// if not unit or not hexes then
44377: LD_VAR 0 1
44381: NOT
44382: IFTRUE 44391
44384: PUSH
44385: LD_VAR 0 2
44389: NOT
44390: OR
44391: IFFALSE 44395
// exit ;
44393: GO 44518
// dist := 9999 ;
44395: LD_ADDR_VAR 0 5
44399: PUSH
44400: LD_INT 9999
44402: ST_TO_ADDR
// for i = 1 to hexes do
44403: LD_ADDR_VAR 0 4
44407: PUSH
44408: DOUBLE
44409: LD_INT 1
44411: DEC
44412: ST_TO_ADDR
44413: LD_VAR 0 2
44417: PUSH
44418: FOR_TO
44419: IFFALSE 44506
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44421: LD_ADDR_VAR 0 6
44425: PUSH
44426: LD_VAR 0 1
44430: PPUSH
44431: LD_VAR 0 2
44435: PUSH
44436: LD_VAR 0 4
44440: ARRAY
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: PPUSH
44446: LD_VAR 0 2
44450: PUSH
44451: LD_VAR 0 4
44455: ARRAY
44456: PUSH
44457: LD_INT 2
44459: ARRAY
44460: PPUSH
44461: CALL_OW 297
44465: ST_TO_ADDR
// if tdist < dist then
44466: LD_VAR 0 6
44470: PUSH
44471: LD_VAR 0 5
44475: LESS
44476: IFFALSE 44504
// begin hex := hexes [ i ] ;
44478: LD_ADDR_VAR 0 8
44482: PUSH
44483: LD_VAR 0 2
44487: PUSH
44488: LD_VAR 0 4
44492: ARRAY
44493: ST_TO_ADDR
// dist := tdist ;
44494: LD_ADDR_VAR 0 5
44498: PUSH
44499: LD_VAR 0 6
44503: ST_TO_ADDR
// end ; end ;
44504: GO 44418
44506: POP
44507: POP
// result := hex ;
44508: LD_ADDR_VAR 0 3
44512: PUSH
44513: LD_VAR 0 8
44517: ST_TO_ADDR
// end ;
44518: LD_VAR 0 3
44522: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44523: LD_INT 0
44525: PPUSH
44526: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44527: LD_VAR 0 1
44531: NOT
44532: IFTRUE 44571
44534: PUSH
44535: LD_VAR 0 1
44539: PUSH
44540: LD_INT 21
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 23
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PPUSH
44564: CALL_OW 69
44568: IN
44569: NOT
44570: OR
44571: IFFALSE 44575
// exit ;
44573: GO 44622
// for i = 1 to 3 do
44575: LD_ADDR_VAR 0 3
44579: PUSH
44580: DOUBLE
44581: LD_INT 1
44583: DEC
44584: ST_TO_ADDR
44585: LD_INT 3
44587: PUSH
44588: FOR_TO
44589: IFFALSE 44620
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 250
44600: PPUSH
44601: LD_VAR 0 1
44605: PPUSH
44606: CALL_OW 251
44610: PPUSH
44611: LD_INT 1
44613: PPUSH
44614: CALL_OW 453
44618: GO 44588
44620: POP
44621: POP
// end ;
44622: LD_VAR 0 2
44626: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44627: LD_INT 0
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
// if not unit or not enemy_unit then
44635: LD_VAR 0 1
44639: NOT
44640: IFTRUE 44649
44642: PUSH
44643: LD_VAR 0 2
44647: NOT
44648: OR
44649: IFFALSE 44653
// exit ;
44651: GO 45134
// if GetLives ( i ) < 250 then
44653: LD_VAR 0 4
44657: PPUSH
44658: CALL_OW 256
44662: PUSH
44663: LD_INT 250
44665: LESS
44666: IFFALSE 44679
// begin ComAutodestruct ( i ) ;
44668: LD_VAR 0 4
44672: PPUSH
44673: CALL 44523 0 1
// exit ;
44677: GO 45134
// end ; x := GetX ( enemy_unit ) ;
44679: LD_ADDR_VAR 0 7
44683: PUSH
44684: LD_VAR 0 2
44688: PPUSH
44689: CALL_OW 250
44693: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44694: LD_ADDR_VAR 0 8
44698: PUSH
44699: LD_VAR 0 2
44703: PPUSH
44704: CALL_OW 251
44708: ST_TO_ADDR
// if not x or not y then
44709: LD_VAR 0 7
44713: NOT
44714: IFTRUE 44723
44716: PUSH
44717: LD_VAR 0 8
44721: NOT
44722: OR
44723: IFFALSE 44727
// exit ;
44725: GO 45134
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44727: LD_ADDR_VAR 0 6
44731: PUSH
44732: LD_VAR 0 7
44736: PPUSH
44737: LD_INT 0
44739: PPUSH
44740: LD_INT 4
44742: PPUSH
44743: CALL_OW 272
44747: PUSH
44748: LD_VAR 0 8
44752: PPUSH
44753: LD_INT 0
44755: PPUSH
44756: LD_INT 4
44758: PPUSH
44759: CALL_OW 273
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_VAR 0 7
44772: PPUSH
44773: LD_INT 1
44775: PPUSH
44776: LD_INT 4
44778: PPUSH
44779: CALL_OW 272
44783: PUSH
44784: LD_VAR 0 8
44788: PPUSH
44789: LD_INT 1
44791: PPUSH
44792: LD_INT 4
44794: PPUSH
44795: CALL_OW 273
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_VAR 0 7
44808: PPUSH
44809: LD_INT 2
44811: PPUSH
44812: LD_INT 4
44814: PPUSH
44815: CALL_OW 272
44819: PUSH
44820: LD_VAR 0 8
44824: PPUSH
44825: LD_INT 2
44827: PPUSH
44828: LD_INT 4
44830: PPUSH
44831: CALL_OW 273
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_VAR 0 7
44844: PPUSH
44845: LD_INT 3
44847: PPUSH
44848: LD_INT 4
44850: PPUSH
44851: CALL_OW 272
44855: PUSH
44856: LD_VAR 0 8
44860: PPUSH
44861: LD_INT 3
44863: PPUSH
44864: LD_INT 4
44866: PPUSH
44867: CALL_OW 273
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_VAR 0 7
44880: PPUSH
44881: LD_INT 4
44883: PPUSH
44884: LD_INT 4
44886: PPUSH
44887: CALL_OW 272
44891: PUSH
44892: LD_VAR 0 8
44896: PPUSH
44897: LD_INT 4
44899: PPUSH
44900: LD_INT 4
44902: PPUSH
44903: CALL_OW 273
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_VAR 0 7
44916: PPUSH
44917: LD_INT 5
44919: PPUSH
44920: LD_INT 4
44922: PPUSH
44923: CALL_OW 272
44927: PUSH
44928: LD_VAR 0 8
44932: PPUSH
44933: LD_INT 5
44935: PPUSH
44936: LD_INT 4
44938: PPUSH
44939: CALL_OW 273
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// for i = tmp downto 1 do
44956: LD_ADDR_VAR 0 4
44960: PUSH
44961: DOUBLE
44962: LD_VAR 0 6
44966: INC
44967: ST_TO_ADDR
44968: LD_INT 1
44970: PUSH
44971: FOR_DOWNTO
44972: IFFALSE 45075
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44974: LD_VAR 0 6
44978: PUSH
44979: LD_VAR 0 4
44983: ARRAY
44984: PUSH
44985: LD_INT 1
44987: ARRAY
44988: PPUSH
44989: LD_VAR 0 6
44993: PUSH
44994: LD_VAR 0 4
44998: ARRAY
44999: PUSH
45000: LD_INT 2
45002: ARRAY
45003: PPUSH
45004: CALL_OW 488
45008: NOT
45009: IFTRUE 45051
45011: PUSH
45012: LD_VAR 0 6
45016: PUSH
45017: LD_VAR 0 4
45021: ARRAY
45022: PUSH
45023: LD_INT 1
45025: ARRAY
45026: PPUSH
45027: LD_VAR 0 6
45031: PUSH
45032: LD_VAR 0 4
45036: ARRAY
45037: PUSH
45038: LD_INT 2
45040: ARRAY
45041: PPUSH
45042: CALL_OW 428
45046: PUSH
45047: LD_INT 0
45049: NONEQUAL
45050: OR
45051: IFFALSE 45073
// tmp := Delete ( tmp , i ) ;
45053: LD_ADDR_VAR 0 6
45057: PUSH
45058: LD_VAR 0 6
45062: PPUSH
45063: LD_VAR 0 4
45067: PPUSH
45068: CALL_OW 3
45072: ST_TO_ADDR
45073: GO 44971
45075: POP
45076: POP
// j := GetClosestHex ( unit , tmp ) ;
45077: LD_ADDR_VAR 0 5
45081: PUSH
45082: LD_VAR 0 1
45086: PPUSH
45087: LD_VAR 0 6
45091: PPUSH
45092: CALL 44369 0 2
45096: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45097: LD_VAR 0 1
45101: PPUSH
45102: LD_VAR 0 5
45106: PUSH
45107: LD_INT 1
45109: ARRAY
45110: PPUSH
45111: LD_VAR 0 5
45115: PUSH
45116: LD_INT 2
45118: ARRAY
45119: PPUSH
45120: CALL_OW 111
// result := j ;
45124: LD_ADDR_VAR 0 3
45128: PUSH
45129: LD_VAR 0 5
45133: ST_TO_ADDR
// end ;
45134: LD_VAR 0 3
45138: RET
// export function PrepareApemanSoldier ( ) ; begin
45139: LD_INT 0
45141: PPUSH
// uc_nation := 0 ;
45142: LD_ADDR_OWVAR 21
45146: PUSH
45147: LD_INT 0
45149: ST_TO_ADDR
// hc_sex := sex_male ;
45150: LD_ADDR_OWVAR 27
45154: PUSH
45155: LD_INT 1
45157: ST_TO_ADDR
// hc_name :=  ;
45158: LD_ADDR_OWVAR 26
45162: PUSH
45163: LD_STRING 
45165: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
45166: LD_ADDR_OWVAR 28
45170: PUSH
45171: LD_INT 15
45173: ST_TO_ADDR
// hc_gallery :=  ;
45174: LD_ADDR_OWVAR 33
45178: PUSH
45179: LD_STRING 
45181: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45182: LD_ADDR_OWVAR 31
45186: PUSH
45187: LD_INT 0
45189: PPUSH
45190: LD_INT 3
45192: PPUSH
45193: CALL_OW 12
45197: PUSH
45198: LD_INT 0
45200: PPUSH
45201: LD_INT 3
45203: PPUSH
45204: CALL_OW 12
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45221: LD_ADDR_OWVAR 29
45225: PUSH
45226: LD_INT 10
45228: PUSH
45229: LD_INT 12
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// end ;
45236: LD_VAR 0 1
45240: RET
// export function PrepareApemanEngineer ( ) ; begin
45241: LD_INT 0
45243: PPUSH
// uc_nation := 0 ;
45244: LD_ADDR_OWVAR 21
45248: PUSH
45249: LD_INT 0
45251: ST_TO_ADDR
// hc_sex := sex_male ;
45252: LD_ADDR_OWVAR 27
45256: PUSH
45257: LD_INT 1
45259: ST_TO_ADDR
// hc_name :=  ;
45260: LD_ADDR_OWVAR 26
45264: PUSH
45265: LD_STRING 
45267: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
45268: LD_ADDR_OWVAR 28
45272: PUSH
45273: LD_INT 16
45275: ST_TO_ADDR
// hc_gallery :=  ;
45276: LD_ADDR_OWVAR 33
45280: PUSH
45281: LD_STRING 
45283: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45284: LD_ADDR_OWVAR 31
45288: PUSH
45289: LD_INT 0
45291: PPUSH
45292: LD_INT 3
45294: PPUSH
45295: CALL_OW 12
45299: PUSH
45300: LD_INT 0
45302: PPUSH
45303: LD_INT 3
45305: PPUSH
45306: CALL_OW 12
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45323: LD_ADDR_OWVAR 29
45327: PUSH
45328: LD_INT 10
45330: PUSH
45331: LD_INT 12
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: ST_TO_ADDR
// end ;
45338: LD_VAR 0 1
45342: RET
// export function PrepareApeman ( agressivity ) ; begin
45343: LD_INT 0
45345: PPUSH
// uc_side := 0 ;
45346: LD_ADDR_OWVAR 20
45350: PUSH
45351: LD_INT 0
45353: ST_TO_ADDR
// uc_nation := 0 ;
45354: LD_ADDR_OWVAR 21
45358: PUSH
45359: LD_INT 0
45361: ST_TO_ADDR
// hc_sex := sex_male ;
45362: LD_ADDR_OWVAR 27
45366: PUSH
45367: LD_INT 1
45369: ST_TO_ADDR
// hc_class := class_apeman ;
45370: LD_ADDR_OWVAR 28
45374: PUSH
45375: LD_INT 12
45377: ST_TO_ADDR
// hc_gallery :=  ;
45378: LD_ADDR_OWVAR 33
45382: PUSH
45383: LD_STRING 
45385: ST_TO_ADDR
// hc_name :=  ;
45386: LD_ADDR_OWVAR 26
45390: PUSH
45391: LD_STRING 
45393: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
45394: LD_ADDR_OWVAR 29
45398: PUSH
45399: LD_INT 10
45401: PUSH
45402: LD_INT 12
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: ST_TO_ADDR
// if agressivity = 0 then
45409: LD_VAR 0 1
45413: PUSH
45414: LD_INT 0
45416: EQUAL
45417: IFFALSE 45429
// hc_agressivity := 0 else
45419: LD_ADDR_OWVAR 35
45423: PUSH
45424: LD_INT 0
45426: ST_TO_ADDR
45427: GO 45450
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45429: LD_ADDR_OWVAR 35
45433: PUSH
45434: LD_VAR 0 1
45438: NEG
45439: PPUSH
45440: LD_VAR 0 1
45444: PPUSH
45445: CALL_OW 12
45449: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
45450: LD_ADDR_OWVAR 31
45454: PUSH
45455: LD_INT 0
45457: PPUSH
45458: LD_INT 3
45460: PPUSH
45461: CALL_OW 12
45465: PUSH
45466: LD_INT 0
45468: PPUSH
45469: LD_INT 3
45471: PPUSH
45472: CALL_OW 12
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: ST_TO_ADDR
// end ;
45489: LD_VAR 0 2
45493: RET
// export function PrepareTiger ( agressivity ) ; begin
45494: LD_INT 0
45496: PPUSH
// uc_side := 0 ;
45497: LD_ADDR_OWVAR 20
45501: PUSH
45502: LD_INT 0
45504: ST_TO_ADDR
// uc_nation := 0 ;
45505: LD_ADDR_OWVAR 21
45509: PUSH
45510: LD_INT 0
45512: ST_TO_ADDR
// InitHc ;
45513: CALL_OW 19
// hc_class := class_tiger ;
45517: LD_ADDR_OWVAR 28
45521: PUSH
45522: LD_INT 14
45524: ST_TO_ADDR
// hc_gallery :=  ;
45525: LD_ADDR_OWVAR 33
45529: PUSH
45530: LD_STRING 
45532: ST_TO_ADDR
// hc_name :=  ;
45533: LD_ADDR_OWVAR 26
45537: PUSH
45538: LD_STRING 
45540: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
45541: LD_ADDR_OWVAR 35
45545: PUSH
45546: LD_VAR 0 1
45550: NEG
45551: PPUSH
45552: LD_VAR 0 1
45556: PPUSH
45557: CALL_OW 12
45561: ST_TO_ADDR
// end ;
45562: LD_VAR 0 2
45566: RET
// export function PrepareEnchidna ( ) ; begin
45567: LD_INT 0
45569: PPUSH
// uc_side := 0 ;
45570: LD_ADDR_OWVAR 20
45574: PUSH
45575: LD_INT 0
45577: ST_TO_ADDR
// uc_nation := 0 ;
45578: LD_ADDR_OWVAR 21
45582: PUSH
45583: LD_INT 0
45585: ST_TO_ADDR
// InitHc ;
45586: CALL_OW 19
// hc_class := class_baggie ;
45590: LD_ADDR_OWVAR 28
45594: PUSH
45595: LD_INT 13
45597: ST_TO_ADDR
// hc_gallery :=  ;
45598: LD_ADDR_OWVAR 33
45602: PUSH
45603: LD_STRING 
45605: ST_TO_ADDR
// hc_name :=  ;
45606: LD_ADDR_OWVAR 26
45610: PUSH
45611: LD_STRING 
45613: ST_TO_ADDR
// end ;
45614: LD_VAR 0 1
45618: RET
// export function PrepareFrog ( ) ; begin
45619: LD_INT 0
45621: PPUSH
// uc_side := 0 ;
45622: LD_ADDR_OWVAR 20
45626: PUSH
45627: LD_INT 0
45629: ST_TO_ADDR
// uc_nation := 0 ;
45630: LD_ADDR_OWVAR 21
45634: PUSH
45635: LD_INT 0
45637: ST_TO_ADDR
// InitHc ;
45638: CALL_OW 19
// hc_class := class_frog ;
45642: LD_ADDR_OWVAR 28
45646: PUSH
45647: LD_INT 19
45649: ST_TO_ADDR
// hc_gallery :=  ;
45650: LD_ADDR_OWVAR 33
45654: PUSH
45655: LD_STRING 
45657: ST_TO_ADDR
// hc_name :=  ;
45658: LD_ADDR_OWVAR 26
45662: PUSH
45663: LD_STRING 
45665: ST_TO_ADDR
// end ;
45666: LD_VAR 0 1
45670: RET
// export function PrepareFish ( ) ; begin
45671: LD_INT 0
45673: PPUSH
// uc_side := 0 ;
45674: LD_ADDR_OWVAR 20
45678: PUSH
45679: LD_INT 0
45681: ST_TO_ADDR
// uc_nation := 0 ;
45682: LD_ADDR_OWVAR 21
45686: PUSH
45687: LD_INT 0
45689: ST_TO_ADDR
// InitHc ;
45690: CALL_OW 19
// hc_class := class_fish ;
45694: LD_ADDR_OWVAR 28
45698: PUSH
45699: LD_INT 20
45701: ST_TO_ADDR
// hc_gallery :=  ;
45702: LD_ADDR_OWVAR 33
45706: PUSH
45707: LD_STRING 
45709: ST_TO_ADDR
// hc_name :=  ;
45710: LD_ADDR_OWVAR 26
45714: PUSH
45715: LD_STRING 
45717: ST_TO_ADDR
// end ;
45718: LD_VAR 0 1
45722: RET
// export function PrepareBird ( ) ; begin
45723: LD_INT 0
45725: PPUSH
// uc_side := 0 ;
45726: LD_ADDR_OWVAR 20
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// uc_nation := 0 ;
45734: LD_ADDR_OWVAR 21
45738: PUSH
45739: LD_INT 0
45741: ST_TO_ADDR
// InitHc ;
45742: CALL_OW 19
// hc_class := class_phororhacos ;
45746: LD_ADDR_OWVAR 28
45750: PUSH
45751: LD_INT 18
45753: ST_TO_ADDR
// hc_gallery :=  ;
45754: LD_ADDR_OWVAR 33
45758: PUSH
45759: LD_STRING 
45761: ST_TO_ADDR
// hc_name :=  ;
45762: LD_ADDR_OWVAR 26
45766: PUSH
45767: LD_STRING 
45769: ST_TO_ADDR
// end ;
45770: LD_VAR 0 1
45774: RET
// export function PrepareHorse ( ) ; begin
45775: LD_INT 0
45777: PPUSH
// uc_side := 0 ;
45778: LD_ADDR_OWVAR 20
45782: PUSH
45783: LD_INT 0
45785: ST_TO_ADDR
// uc_nation := 0 ;
45786: LD_ADDR_OWVAR 21
45790: PUSH
45791: LD_INT 0
45793: ST_TO_ADDR
// InitHc ;
45794: CALL_OW 19
// hc_class := class_horse ;
45798: LD_ADDR_OWVAR 28
45802: PUSH
45803: LD_INT 21
45805: ST_TO_ADDR
// hc_gallery :=  ;
45806: LD_ADDR_OWVAR 33
45810: PUSH
45811: LD_STRING 
45813: ST_TO_ADDR
// hc_name :=  ;
45814: LD_ADDR_OWVAR 26
45818: PUSH
45819: LD_STRING 
45821: ST_TO_ADDR
// end ;
45822: LD_VAR 0 1
45826: RET
// export function PrepareMastodont ( ) ; begin
45827: LD_INT 0
45829: PPUSH
// uc_side := 0 ;
45830: LD_ADDR_OWVAR 20
45834: PUSH
45835: LD_INT 0
45837: ST_TO_ADDR
// uc_nation := 0 ;
45838: LD_ADDR_OWVAR 21
45842: PUSH
45843: LD_INT 0
45845: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45846: LD_ADDR_OWVAR 37
45850: PUSH
45851: LD_INT 31
45853: ST_TO_ADDR
// vc_control := control_rider ;
45854: LD_ADDR_OWVAR 38
45858: PUSH
45859: LD_INT 4
45861: ST_TO_ADDR
// end ;
45862: LD_VAR 0 1
45866: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45867: LD_INT 0
45869: PPUSH
45870: PPUSH
45871: PPUSH
// uc_side = 0 ;
45872: LD_ADDR_OWVAR 20
45876: PUSH
45877: LD_INT 0
45879: ST_TO_ADDR
// uc_nation = 0 ;
45880: LD_ADDR_OWVAR 21
45884: PUSH
45885: LD_INT 0
45887: ST_TO_ADDR
// InitHc_All ( ) ;
45888: CALL_OW 584
// InitVc ;
45892: CALL_OW 20
// if mastodonts then
45896: LD_VAR 0 6
45900: IFFALSE 45967
// for i = 1 to mastodonts do
45902: LD_ADDR_VAR 0 11
45906: PUSH
45907: DOUBLE
45908: LD_INT 1
45910: DEC
45911: ST_TO_ADDR
45912: LD_VAR 0 6
45916: PUSH
45917: FOR_TO
45918: IFFALSE 45965
// begin vc_chassis := 31 ;
45920: LD_ADDR_OWVAR 37
45924: PUSH
45925: LD_INT 31
45927: ST_TO_ADDR
// vc_control := control_rider ;
45928: LD_ADDR_OWVAR 38
45932: PUSH
45933: LD_INT 4
45935: ST_TO_ADDR
// animal := CreateVehicle ;
45936: LD_ADDR_VAR 0 12
45940: PUSH
45941: CALL_OW 45
45945: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45946: LD_VAR 0 12
45950: PPUSH
45951: LD_VAR 0 8
45955: PPUSH
45956: LD_INT 0
45958: PPUSH
45959: CALL 48109 0 3
// end ;
45963: GO 45917
45965: POP
45966: POP
// if horses then
45967: LD_VAR 0 5
45971: IFFALSE 46038
// for i = 1 to horses do
45973: LD_ADDR_VAR 0 11
45977: PUSH
45978: DOUBLE
45979: LD_INT 1
45981: DEC
45982: ST_TO_ADDR
45983: LD_VAR 0 5
45987: PUSH
45988: FOR_TO
45989: IFFALSE 46036
// begin hc_class := 21 ;
45991: LD_ADDR_OWVAR 28
45995: PUSH
45996: LD_INT 21
45998: ST_TO_ADDR
// hc_gallery :=  ;
45999: LD_ADDR_OWVAR 33
46003: PUSH
46004: LD_STRING 
46006: ST_TO_ADDR
// animal := CreateHuman ;
46007: LD_ADDR_VAR 0 12
46011: PUSH
46012: CALL_OW 44
46016: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46017: LD_VAR 0 12
46021: PPUSH
46022: LD_VAR 0 8
46026: PPUSH
46027: LD_INT 0
46029: PPUSH
46030: CALL 48109 0 3
// end ;
46034: GO 45988
46036: POP
46037: POP
// if birds then
46038: LD_VAR 0 1
46042: IFFALSE 46109
// for i = 1 to birds do
46044: LD_ADDR_VAR 0 11
46048: PUSH
46049: DOUBLE
46050: LD_INT 1
46052: DEC
46053: ST_TO_ADDR
46054: LD_VAR 0 1
46058: PUSH
46059: FOR_TO
46060: IFFALSE 46107
// begin hc_class := 18 ;
46062: LD_ADDR_OWVAR 28
46066: PUSH
46067: LD_INT 18
46069: ST_TO_ADDR
// hc_gallery =  ;
46070: LD_ADDR_OWVAR 33
46074: PUSH
46075: LD_STRING 
46077: ST_TO_ADDR
// animal := CreateHuman ;
46078: LD_ADDR_VAR 0 12
46082: PUSH
46083: CALL_OW 44
46087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46088: LD_VAR 0 12
46092: PPUSH
46093: LD_VAR 0 8
46097: PPUSH
46098: LD_INT 0
46100: PPUSH
46101: CALL 48109 0 3
// end ;
46105: GO 46059
46107: POP
46108: POP
// if tigers then
46109: LD_VAR 0 2
46113: IFFALSE 46197
// for i = 1 to tigers do
46115: LD_ADDR_VAR 0 11
46119: PUSH
46120: DOUBLE
46121: LD_INT 1
46123: DEC
46124: ST_TO_ADDR
46125: LD_VAR 0 2
46129: PUSH
46130: FOR_TO
46131: IFFALSE 46195
// begin hc_class = class_tiger ;
46133: LD_ADDR_OWVAR 28
46137: PUSH
46138: LD_INT 14
46140: ST_TO_ADDR
// hc_gallery =  ;
46141: LD_ADDR_OWVAR 33
46145: PUSH
46146: LD_STRING 
46148: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46149: LD_ADDR_OWVAR 35
46153: PUSH
46154: LD_INT 7
46156: NEG
46157: PPUSH
46158: LD_INT 7
46160: PPUSH
46161: CALL_OW 12
46165: ST_TO_ADDR
// animal := CreateHuman ;
46166: LD_ADDR_VAR 0 12
46170: PUSH
46171: CALL_OW 44
46175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46176: LD_VAR 0 12
46180: PPUSH
46181: LD_VAR 0 8
46185: PPUSH
46186: LD_INT 0
46188: PPUSH
46189: CALL 48109 0 3
// end ;
46193: GO 46130
46195: POP
46196: POP
// if apemans then
46197: LD_VAR 0 3
46201: IFFALSE 46324
// for i = 1 to apemans do
46203: LD_ADDR_VAR 0 11
46207: PUSH
46208: DOUBLE
46209: LD_INT 1
46211: DEC
46212: ST_TO_ADDR
46213: LD_VAR 0 3
46217: PUSH
46218: FOR_TO
46219: IFFALSE 46322
// begin hc_class = class_apeman ;
46221: LD_ADDR_OWVAR 28
46225: PUSH
46226: LD_INT 12
46228: ST_TO_ADDR
// hc_gallery =  ;
46229: LD_ADDR_OWVAR 33
46233: PUSH
46234: LD_STRING 
46236: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46237: LD_ADDR_OWVAR 35
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PPUSH
46246: LD_INT 2
46248: PPUSH
46249: CALL_OW 12
46253: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46254: LD_ADDR_OWVAR 31
46258: PUSH
46259: LD_INT 1
46261: PPUSH
46262: LD_INT 3
46264: PPUSH
46265: CALL_OW 12
46269: PUSH
46270: LD_INT 1
46272: PPUSH
46273: LD_INT 3
46275: PPUSH
46276: CALL_OW 12
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// animal := CreateHuman ;
46293: LD_ADDR_VAR 0 12
46297: PUSH
46298: CALL_OW 44
46302: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46303: LD_VAR 0 12
46307: PPUSH
46308: LD_VAR 0 8
46312: PPUSH
46313: LD_INT 0
46315: PPUSH
46316: CALL 48109 0 3
// end ;
46320: GO 46218
46322: POP
46323: POP
// if enchidnas then
46324: LD_VAR 0 4
46328: IFFALSE 46395
// for i = 1 to enchidnas do
46330: LD_ADDR_VAR 0 11
46334: PUSH
46335: DOUBLE
46336: LD_INT 1
46338: DEC
46339: ST_TO_ADDR
46340: LD_VAR 0 4
46344: PUSH
46345: FOR_TO
46346: IFFALSE 46393
// begin hc_class = 13 ;
46348: LD_ADDR_OWVAR 28
46352: PUSH
46353: LD_INT 13
46355: ST_TO_ADDR
// hc_gallery =  ;
46356: LD_ADDR_OWVAR 33
46360: PUSH
46361: LD_STRING 
46363: ST_TO_ADDR
// animal := CreateHuman ;
46364: LD_ADDR_VAR 0 12
46368: PUSH
46369: CALL_OW 44
46373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46374: LD_VAR 0 12
46378: PPUSH
46379: LD_VAR 0 8
46383: PPUSH
46384: LD_INT 0
46386: PPUSH
46387: CALL 48109 0 3
// end ;
46391: GO 46345
46393: POP
46394: POP
// if fishes then
46395: LD_VAR 0 7
46399: IFFALSE 46466
// for i = 1 to fishes do
46401: LD_ADDR_VAR 0 11
46405: PUSH
46406: DOUBLE
46407: LD_INT 1
46409: DEC
46410: ST_TO_ADDR
46411: LD_VAR 0 7
46415: PUSH
46416: FOR_TO
46417: IFFALSE 46464
// begin hc_class = 20 ;
46419: LD_ADDR_OWVAR 28
46423: PUSH
46424: LD_INT 20
46426: ST_TO_ADDR
// hc_gallery =  ;
46427: LD_ADDR_OWVAR 33
46431: PUSH
46432: LD_STRING 
46434: ST_TO_ADDR
// animal := CreateHuman ;
46435: LD_ADDR_VAR 0 12
46439: PUSH
46440: CALL_OW 44
46444: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46445: LD_VAR 0 12
46449: PPUSH
46450: LD_VAR 0 9
46454: PPUSH
46455: LD_INT 0
46457: PPUSH
46458: CALL 48109 0 3
// end ;
46462: GO 46416
46464: POP
46465: POP
// end ;
46466: LD_VAR 0 10
46470: RET
// export function WantHeal ( sci , unit ) ; begin
46471: LD_INT 0
46473: PPUSH
// if GetTaskList ( sci ) > 0 then
46474: LD_VAR 0 1
46478: PPUSH
46479: CALL_OW 437
46483: PUSH
46484: LD_INT 0
46486: GREATER
46487: IFFALSE 46559
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46489: LD_VAR 0 1
46493: PPUSH
46494: CALL_OW 437
46498: PUSH
46499: LD_INT 1
46501: ARRAY
46502: PUSH
46503: LD_INT 1
46505: ARRAY
46506: PUSH
46507: LD_STRING l
46509: EQUAL
46510: IFFALSE 46537
46512: PUSH
46513: LD_VAR 0 1
46517: PPUSH
46518: CALL_OW 437
46522: PUSH
46523: LD_INT 1
46525: ARRAY
46526: PUSH
46527: LD_INT 4
46529: ARRAY
46530: PUSH
46531: LD_VAR 0 2
46535: EQUAL
46536: AND
46537: IFFALSE 46549
// result := true else
46539: LD_ADDR_VAR 0 3
46543: PUSH
46544: LD_INT 1
46546: ST_TO_ADDR
46547: GO 46557
// result := false ;
46549: LD_ADDR_VAR 0 3
46553: PUSH
46554: LD_INT 0
46556: ST_TO_ADDR
// end else
46557: GO 46567
// result := false ;
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_INT 0
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 3
46571: RET
// export function HealTarget ( sci ) ; begin
46572: LD_INT 0
46574: PPUSH
// if not sci then
46575: LD_VAR 0 1
46579: NOT
46580: IFFALSE 46584
// exit ;
46582: GO 46649
// result := 0 ;
46584: LD_ADDR_VAR 0 2
46588: PUSH
46589: LD_INT 0
46591: ST_TO_ADDR
// if GetTaskList ( sci ) then
46592: LD_VAR 0 1
46596: PPUSH
46597: CALL_OW 437
46601: IFFALSE 46649
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46603: LD_VAR 0 1
46607: PPUSH
46608: CALL_OW 437
46612: PUSH
46613: LD_INT 1
46615: ARRAY
46616: PUSH
46617: LD_INT 1
46619: ARRAY
46620: PUSH
46621: LD_STRING l
46623: EQUAL
46624: IFFALSE 46649
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46626: LD_ADDR_VAR 0 2
46630: PUSH
46631: LD_VAR 0 1
46635: PPUSH
46636: CALL_OW 437
46640: PUSH
46641: LD_INT 1
46643: ARRAY
46644: PUSH
46645: LD_INT 4
46647: ARRAY
46648: ST_TO_ADDR
// end ;
46649: LD_VAR 0 2
46653: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46654: LD_INT 0
46656: PPUSH
46657: PPUSH
46658: PPUSH
46659: PPUSH
// if not base_units then
46660: LD_VAR 0 1
46664: NOT
46665: IFFALSE 46669
// exit ;
46667: GO 46756
// result := false ;
46669: LD_ADDR_VAR 0 2
46673: PUSH
46674: LD_INT 0
46676: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46677: LD_ADDR_VAR 0 5
46681: PUSH
46682: LD_VAR 0 1
46686: PPUSH
46687: LD_INT 21
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PPUSH
46697: CALL_OW 72
46701: ST_TO_ADDR
// if not tmp then
46702: LD_VAR 0 5
46706: NOT
46707: IFFALSE 46711
// exit ;
46709: GO 46756
// for i in tmp do
46711: LD_ADDR_VAR 0 3
46715: PUSH
46716: LD_VAR 0 5
46720: PUSH
46721: FOR_IN
46722: IFFALSE 46754
// begin result := EnemyInRange ( i , 22 ) ;
46724: LD_ADDR_VAR 0 2
46728: PUSH
46729: LD_VAR 0 3
46733: PPUSH
46734: LD_INT 22
46736: PPUSH
46737: CALL 44171 0 2
46741: ST_TO_ADDR
// if result then
46742: LD_VAR 0 2
46746: IFFALSE 46752
// exit ;
46748: POP
46749: POP
46750: GO 46756
// end ;
46752: GO 46721
46754: POP
46755: POP
// end ;
46756: LD_VAR 0 2
46760: RET
// export function FilterByTag ( units , tag ) ; begin
46761: LD_INT 0
46763: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46764: LD_ADDR_VAR 0 3
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: LD_INT 120
46776: PUSH
46777: LD_VAR 0 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 72
46790: ST_TO_ADDR
// end ;
46791: LD_VAR 0 3
46795: RET
// export function IsDriver ( un ) ; begin
46796: LD_INT 0
46798: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46799: LD_ADDR_VAR 0 2
46803: PUSH
46804: LD_VAR 0 1
46808: PUSH
46809: LD_INT 55
46811: PUSH
46812: EMPTY
46813: LIST
46814: PPUSH
46815: CALL_OW 69
46819: IN
46820: ST_TO_ADDR
// end ;
46821: LD_VAR 0 2
46825: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46826: LD_INT 0
46828: PPUSH
46829: PPUSH
// list := [ ] ;
46830: LD_ADDR_VAR 0 5
46834: PUSH
46835: EMPTY
46836: ST_TO_ADDR
// case d of 0 :
46837: LD_VAR 0 3
46841: PUSH
46842: LD_INT 0
46844: DOUBLE
46845: EQUAL
46846: IFTRUE 46850
46848: GO 46983
46850: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46851: LD_ADDR_VAR 0 5
46855: PUSH
46856: LD_VAR 0 1
46860: PUSH
46861: LD_INT 4
46863: MINUS
46864: PUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_INT 4
46872: MINUS
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: PUSH
46882: LD_VAR 0 1
46886: PUSH
46887: LD_INT 3
46889: MINUS
46890: PUSH
46891: LD_VAR 0 2
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: PUSH
46904: LD_VAR 0 1
46908: PUSH
46909: LD_INT 4
46911: PLUS
46912: PUSH
46913: LD_VAR 0 2
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: PUSH
46926: LD_VAR 0 1
46930: PUSH
46931: LD_INT 3
46933: PLUS
46934: PUSH
46935: LD_VAR 0 2
46939: PUSH
46940: LD_INT 3
46942: PLUS
46943: PUSH
46944: LD_INT 5
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: PUSH
46952: LD_VAR 0 1
46956: PUSH
46957: LD_VAR 0 2
46961: PUSH
46962: LD_INT 4
46964: PLUS
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// end ; 1 :
46981: GO 47681
46983: LD_INT 1
46985: DOUBLE
46986: EQUAL
46987: IFTRUE 46991
46989: GO 47124
46991: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46992: LD_ADDR_VAR 0 5
46996: PUSH
46997: LD_VAR 0 1
47001: PUSH
47002: LD_VAR 0 2
47006: PUSH
47007: LD_INT 4
47009: MINUS
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: PUSH
47019: LD_VAR 0 1
47023: PUSH
47024: LD_INT 3
47026: MINUS
47027: PUSH
47028: LD_VAR 0 2
47032: PUSH
47033: LD_INT 3
47035: MINUS
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: LIST
47044: PUSH
47045: LD_VAR 0 1
47049: PUSH
47050: LD_INT 4
47052: MINUS
47053: PUSH
47054: LD_VAR 0 2
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: LIST
47066: PUSH
47067: LD_VAR 0 1
47071: PUSH
47072: LD_VAR 0 2
47076: PUSH
47077: LD_INT 3
47079: PLUS
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: PUSH
47089: LD_VAR 0 1
47093: PUSH
47094: LD_INT 4
47096: PLUS
47097: PUSH
47098: LD_VAR 0 2
47102: PUSH
47103: LD_INT 4
47105: PLUS
47106: PUSH
47107: LD_INT 5
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: ST_TO_ADDR
// end ; 2 :
47122: GO 47681
47124: LD_INT 2
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47132
47130: GO 47261
47132: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47133: LD_ADDR_VAR 0 5
47137: PUSH
47138: LD_VAR 0 1
47142: PUSH
47143: LD_VAR 0 2
47147: PUSH
47148: LD_INT 3
47150: MINUS
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: PUSH
47160: LD_VAR 0 1
47164: PUSH
47165: LD_INT 4
47167: PLUS
47168: PUSH
47169: LD_VAR 0 2
47173: PUSH
47174: LD_INT 4
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: PUSH
47182: LD_VAR 0 1
47186: PUSH
47187: LD_VAR 0 2
47191: PUSH
47192: LD_INT 4
47194: PLUS
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: PUSH
47204: LD_VAR 0 1
47208: PUSH
47209: LD_INT 3
47211: MINUS
47212: PUSH
47213: LD_VAR 0 2
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: PUSH
47226: LD_VAR 0 1
47230: PUSH
47231: LD_INT 4
47233: MINUS
47234: PUSH
47235: LD_VAR 0 2
47239: PUSH
47240: LD_INT 4
47242: MINUS
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: ST_TO_ADDR
// end ; 3 :
47259: GO 47681
47261: LD_INT 3
47263: DOUBLE
47264: EQUAL
47265: IFTRUE 47269
47267: GO 47402
47269: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47270: LD_ADDR_VAR 0 5
47274: PUSH
47275: LD_VAR 0 1
47279: PUSH
47280: LD_INT 3
47282: PLUS
47283: PUSH
47284: LD_VAR 0 2
47288: PUSH
47289: LD_INT 4
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: PUSH
47297: LD_VAR 0 1
47301: PUSH
47302: LD_INT 4
47304: PLUS
47305: PUSH
47306: LD_VAR 0 2
47310: PUSH
47311: LD_INT 4
47313: PLUS
47314: PUSH
47315: LD_INT 5
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: PUSH
47323: LD_VAR 0 1
47327: PUSH
47328: LD_INT 4
47330: MINUS
47331: PUSH
47332: LD_VAR 0 2
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: LIST
47344: PUSH
47345: LD_VAR 0 1
47349: PUSH
47350: LD_VAR 0 2
47354: PUSH
47355: LD_INT 4
47357: MINUS
47358: PUSH
47359: LD_INT 3
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: LIST
47366: PUSH
47367: LD_VAR 0 1
47371: PUSH
47372: LD_INT 3
47374: MINUS
47375: PUSH
47376: LD_VAR 0 2
47380: PUSH
47381: LD_INT 3
47383: MINUS
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: ST_TO_ADDR
// end ; 4 :
47400: GO 47681
47402: LD_INT 4
47404: DOUBLE
47405: EQUAL
47406: IFTRUE 47410
47408: GO 47543
47410: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47411: LD_ADDR_VAR 0 5
47415: PUSH
47416: LD_VAR 0 1
47420: PUSH
47421: LD_VAR 0 2
47425: PUSH
47426: LD_INT 4
47428: PLUS
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: PUSH
47438: LD_VAR 0 1
47442: PUSH
47443: LD_INT 3
47445: PLUS
47446: PUSH
47447: LD_VAR 0 2
47451: PUSH
47452: LD_INT 3
47454: PLUS
47455: PUSH
47456: LD_INT 5
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: PUSH
47464: LD_VAR 0 1
47468: PUSH
47469: LD_INT 4
47471: PLUS
47472: PUSH
47473: LD_VAR 0 2
47477: PUSH
47478: LD_INT 4
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: PUSH
47486: LD_VAR 0 1
47490: PUSH
47491: LD_VAR 0 2
47495: PUSH
47496: LD_INT 3
47498: MINUS
47499: PUSH
47500: LD_INT 3
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: PUSH
47508: LD_VAR 0 1
47512: PUSH
47513: LD_INT 4
47515: MINUS
47516: PUSH
47517: LD_VAR 0 2
47521: PUSH
47522: LD_INT 4
47524: MINUS
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// end ; 5 :
47541: GO 47681
47543: LD_INT 5
47545: DOUBLE
47546: EQUAL
47547: IFTRUE 47551
47549: GO 47680
47551: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47552: LD_ADDR_VAR 0 5
47556: PUSH
47557: LD_VAR 0 1
47561: PUSH
47562: LD_INT 4
47564: MINUS
47565: PUSH
47566: LD_VAR 0 2
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: PUSH
47579: LD_VAR 0 1
47583: PUSH
47584: LD_VAR 0 2
47588: PUSH
47589: LD_INT 4
47591: MINUS
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: LIST
47600: PUSH
47601: LD_VAR 0 1
47605: PUSH
47606: LD_INT 4
47608: PLUS
47609: PUSH
47610: LD_VAR 0 2
47614: PUSH
47615: LD_INT 4
47617: PLUS
47618: PUSH
47619: LD_INT 5
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: PUSH
47627: LD_VAR 0 1
47631: PUSH
47632: LD_INT 3
47634: PLUS
47635: PUSH
47636: LD_VAR 0 2
47640: PUSH
47641: LD_INT 4
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: PUSH
47649: LD_VAR 0 1
47653: PUSH
47654: LD_VAR 0 2
47658: PUSH
47659: LD_INT 3
47661: PLUS
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: ST_TO_ADDR
// end ; end ;
47678: GO 47681
47680: POP
// result := list ;
47681: LD_ADDR_VAR 0 4
47685: PUSH
47686: LD_VAR 0 5
47690: ST_TO_ADDR
// end ;
47691: LD_VAR 0 4
47695: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47696: LD_INT 0
47698: PPUSH
47699: PPUSH
47700: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47701: LD_VAR 0 1
47705: NOT
47706: IFTRUE 47734
47708: PUSH
47709: LD_VAR 0 2
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 3
47722: PUSH
47723: LD_INT 4
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: IN
47732: NOT
47733: OR
47734: IFFALSE 47738
// exit ;
47736: GO 47821
// tmp := [ ] ;
47738: LD_ADDR_VAR 0 5
47742: PUSH
47743: EMPTY
47744: ST_TO_ADDR
// for i in units do
47745: LD_ADDR_VAR 0 4
47749: PUSH
47750: LD_VAR 0 1
47754: PUSH
47755: FOR_IN
47756: IFFALSE 47790
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47758: LD_ADDR_VAR 0 5
47762: PUSH
47763: LD_VAR 0 5
47767: PPUSH
47768: LD_VAR 0 4
47772: PPUSH
47773: LD_VAR 0 2
47777: PPUSH
47778: CALL_OW 259
47782: PPUSH
47783: CALL 49216 0 2
47787: ST_TO_ADDR
47788: GO 47755
47790: POP
47791: POP
// if not tmp then
47792: LD_VAR 0 5
47796: NOT
47797: IFFALSE 47801
// exit ;
47799: GO 47821
// result := SortListByListDesc ( units , tmp ) ;
47801: LD_ADDR_VAR 0 3
47805: PUSH
47806: LD_VAR 0 1
47810: PPUSH
47811: LD_VAR 0 5
47815: PPUSH
47816: CALL_OW 77
47820: ST_TO_ADDR
// end ;
47821: LD_VAR 0 3
47825: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47826: LD_INT 0
47828: PPUSH
47829: PPUSH
47830: PPUSH
// result := false ;
47831: LD_ADDR_VAR 0 3
47835: PUSH
47836: LD_INT 0
47838: ST_TO_ADDR
// if not building then
47839: LD_VAR 0 2
47843: NOT
47844: IFFALSE 47848
// exit ;
47846: GO 47992
// x := GetX ( building ) ;
47848: LD_ADDR_VAR 0 4
47852: PUSH
47853: LD_VAR 0 2
47857: PPUSH
47858: CALL_OW 250
47862: ST_TO_ADDR
// y := GetY ( building ) ;
47863: LD_ADDR_VAR 0 5
47867: PUSH
47868: LD_VAR 0 2
47872: PPUSH
47873: CALL_OW 251
47877: ST_TO_ADDR
// if not x or not y then
47878: LD_VAR 0 4
47882: NOT
47883: IFTRUE 47892
47885: PUSH
47886: LD_VAR 0 5
47890: NOT
47891: OR
47892: IFFALSE 47896
// exit ;
47894: GO 47992
// if GetTaskList ( unit ) then
47896: LD_VAR 0 1
47900: PPUSH
47901: CALL_OW 437
47905: IFFALSE 47992
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47907: LD_STRING e
47909: PUSH
47910: LD_VAR 0 1
47914: PPUSH
47915: CALL_OW 437
47919: PUSH
47920: LD_INT 1
47922: ARRAY
47923: PUSH
47924: LD_INT 1
47926: ARRAY
47927: EQUAL
47928: IFFALSE 47955
47930: PUSH
47931: LD_VAR 0 4
47935: PUSH
47936: LD_VAR 0 1
47940: PPUSH
47941: CALL_OW 437
47945: PUSH
47946: LD_INT 1
47948: ARRAY
47949: PUSH
47950: LD_INT 2
47952: ARRAY
47953: EQUAL
47954: AND
47955: IFFALSE 47982
47957: PUSH
47958: LD_VAR 0 5
47962: PUSH
47963: LD_VAR 0 1
47967: PPUSH
47968: CALL_OW 437
47972: PUSH
47973: LD_INT 1
47975: ARRAY
47976: PUSH
47977: LD_INT 3
47979: ARRAY
47980: EQUAL
47981: AND
47982: IFFALSE 47992
// result := true end ;
47984: LD_ADDR_VAR 0 3
47988: PUSH
47989: LD_INT 1
47991: ST_TO_ADDR
// end ;
47992: LD_VAR 0 3
47996: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47997: LD_INT 0
47999: PPUSH
// result := false ;
48000: LD_ADDR_VAR 0 4
48004: PUSH
48005: LD_INT 0
48007: ST_TO_ADDR
// if GetTaskList ( unit ) then
48008: LD_VAR 0 1
48012: PPUSH
48013: CALL_OW 437
48017: IFFALSE 48104
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48019: LD_STRING M
48021: PUSH
48022: LD_VAR 0 1
48026: PPUSH
48027: CALL_OW 437
48031: PUSH
48032: LD_INT 1
48034: ARRAY
48035: PUSH
48036: LD_INT 1
48038: ARRAY
48039: EQUAL
48040: IFFALSE 48067
48042: PUSH
48043: LD_VAR 0 2
48047: PUSH
48048: LD_VAR 0 1
48052: PPUSH
48053: CALL_OW 437
48057: PUSH
48058: LD_INT 1
48060: ARRAY
48061: PUSH
48062: LD_INT 2
48064: ARRAY
48065: EQUAL
48066: AND
48067: IFFALSE 48094
48069: PUSH
48070: LD_VAR 0 3
48074: PUSH
48075: LD_VAR 0 1
48079: PPUSH
48080: CALL_OW 437
48084: PUSH
48085: LD_INT 1
48087: ARRAY
48088: PUSH
48089: LD_INT 3
48091: ARRAY
48092: EQUAL
48093: AND
48094: IFFALSE 48104
// result := true ;
48096: LD_ADDR_VAR 0 4
48100: PUSH
48101: LD_INT 1
48103: ST_TO_ADDR
// end ; end ;
48104: LD_VAR 0 4
48108: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48109: LD_INT 0
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
// if not unit or not area then
48115: LD_VAR 0 1
48119: NOT
48120: IFTRUE 48129
48122: PUSH
48123: LD_VAR 0 2
48127: NOT
48128: OR
48129: IFFALSE 48133
// exit ;
48131: GO 48309
// tmp := AreaToList ( area , i ) ;
48133: LD_ADDR_VAR 0 6
48137: PUSH
48138: LD_VAR 0 2
48142: PPUSH
48143: LD_VAR 0 5
48147: PPUSH
48148: CALL_OW 517
48152: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48153: LD_ADDR_VAR 0 5
48157: PUSH
48158: DOUBLE
48159: LD_INT 1
48161: DEC
48162: ST_TO_ADDR
48163: LD_VAR 0 6
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: PUSH
48172: FOR_TO
48173: IFFALSE 48307
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48175: LD_ADDR_VAR 0 7
48179: PUSH
48180: LD_VAR 0 6
48184: PUSH
48185: LD_INT 1
48187: ARRAY
48188: PUSH
48189: LD_VAR 0 5
48193: ARRAY
48194: PUSH
48195: LD_VAR 0 6
48199: PUSH
48200: LD_INT 2
48202: ARRAY
48203: PUSH
48204: LD_VAR 0 5
48208: ARRAY
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
48214: LD_INT 92
48216: PUSH
48217: LD_VAR 0 7
48221: PUSH
48222: LD_INT 1
48224: ARRAY
48225: PUSH
48226: LD_VAR 0 7
48230: PUSH
48231: LD_INT 2
48233: ARRAY
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: PPUSH
48244: CALL_OW 69
48248: PUSH
48249: LD_INT 0
48251: EQUAL
48252: IFFALSE 48305
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48254: LD_VAR 0 1
48258: PPUSH
48259: LD_VAR 0 7
48263: PUSH
48264: LD_INT 1
48266: ARRAY
48267: PPUSH
48268: LD_VAR 0 7
48272: PUSH
48273: LD_INT 2
48275: ARRAY
48276: PPUSH
48277: LD_VAR 0 3
48281: PPUSH
48282: CALL_OW 48
// result := IsPlaced ( unit ) ;
48286: LD_ADDR_VAR 0 4
48290: PUSH
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 305
48300: ST_TO_ADDR
// exit ;
48301: POP
48302: POP
48303: GO 48309
// end ; end ;
48305: GO 48172
48307: POP
48308: POP
// end ;
48309: LD_VAR 0 4
48313: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48314: LD_INT 0
48316: PPUSH
48317: PPUSH
48318: PPUSH
// if not side or side > 8 then
48319: LD_VAR 0 1
48323: NOT
48324: IFTRUE 48336
48326: PUSH
48327: LD_VAR 0 1
48331: PUSH
48332: LD_INT 8
48334: GREATER
48335: OR
48336: IFFALSE 48340
// exit ;
48338: GO 48527
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48340: LD_ADDR_VAR 0 4
48344: PUSH
48345: LD_INT 22
48347: PUSH
48348: LD_VAR 0 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 21
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PPUSH
48371: CALL_OW 69
48375: ST_TO_ADDR
// if not tmp then
48376: LD_VAR 0 4
48380: NOT
48381: IFFALSE 48385
// exit ;
48383: GO 48527
// enable_addtolog := true ;
48385: LD_ADDR_OWVAR 81
48389: PUSH
48390: LD_INT 1
48392: ST_TO_ADDR
// AddToLog ( [ ) ;
48393: LD_STRING [
48395: PPUSH
48396: CALL_OW 561
// for i in tmp do
48400: LD_ADDR_VAR 0 3
48404: PUSH
48405: LD_VAR 0 4
48409: PUSH
48410: FOR_IN
48411: IFFALSE 48518
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48413: LD_STRING [
48415: PUSH
48416: LD_VAR 0 3
48420: PPUSH
48421: CALL_OW 266
48425: STR
48426: PUSH
48427: LD_STRING , 
48429: STR
48430: PUSH
48431: LD_VAR 0 3
48435: PPUSH
48436: CALL_OW 250
48440: STR
48441: PUSH
48442: LD_STRING , 
48444: STR
48445: PUSH
48446: LD_VAR 0 3
48450: PPUSH
48451: CALL_OW 251
48455: STR
48456: PUSH
48457: LD_STRING , 
48459: STR
48460: PUSH
48461: LD_VAR 0 3
48465: PPUSH
48466: CALL_OW 254
48470: STR
48471: PUSH
48472: LD_STRING , 
48474: STR
48475: PUSH
48476: LD_VAR 0 3
48480: PPUSH
48481: LD_INT 1
48483: PPUSH
48484: CALL_OW 268
48488: STR
48489: PUSH
48490: LD_STRING , 
48492: STR
48493: PUSH
48494: LD_VAR 0 3
48498: PPUSH
48499: LD_INT 2
48501: PPUSH
48502: CALL_OW 268
48506: STR
48507: PUSH
48508: LD_STRING ],
48510: STR
48511: PPUSH
48512: CALL_OW 561
// end ;
48516: GO 48410
48518: POP
48519: POP
// AddToLog ( ]; ) ;
48520: LD_STRING ];
48522: PPUSH
48523: CALL_OW 561
// end ;
48527: LD_VAR 0 2
48531: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48532: LD_INT 0
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
48538: PPUSH
// if not area or not rate or not max then
48539: LD_VAR 0 1
48543: NOT
48544: IFTRUE 48553
48546: PUSH
48547: LD_VAR 0 2
48551: NOT
48552: OR
48553: IFTRUE 48562
48555: PUSH
48556: LD_VAR 0 4
48560: NOT
48561: OR
48562: IFFALSE 48566
// exit ;
48564: GO 48755
// while 1 do
48566: LD_INT 1
48568: IFFALSE 48755
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48570: LD_ADDR_VAR 0 9
48574: PUSH
48575: LD_VAR 0 1
48579: PPUSH
48580: LD_INT 1
48582: PPUSH
48583: CALL_OW 287
48587: PUSH
48588: LD_INT 10
48590: MUL
48591: ST_TO_ADDR
// r := rate / 10 ;
48592: LD_ADDR_VAR 0 7
48596: PUSH
48597: LD_VAR 0 2
48601: PUSH
48602: LD_INT 10
48604: DIVREAL
48605: ST_TO_ADDR
// time := 1 1$00 ;
48606: LD_ADDR_VAR 0 8
48610: PUSH
48611: LD_INT 2100
48613: ST_TO_ADDR
// if amount < min then
48614: LD_VAR 0 9
48618: PUSH
48619: LD_VAR 0 3
48623: LESS
48624: IFFALSE 48642
// r := r * 2 else
48626: LD_ADDR_VAR 0 7
48630: PUSH
48631: LD_VAR 0 7
48635: PUSH
48636: LD_INT 2
48638: MUL
48639: ST_TO_ADDR
48640: GO 48668
// if amount > max then
48642: LD_VAR 0 9
48646: PUSH
48647: LD_VAR 0 4
48651: GREATER
48652: IFFALSE 48668
// r := r / 2 ;
48654: LD_ADDR_VAR 0 7
48658: PUSH
48659: LD_VAR 0 7
48663: PUSH
48664: LD_INT 2
48666: DIVREAL
48667: ST_TO_ADDR
// time := time / r ;
48668: LD_ADDR_VAR 0 8
48672: PUSH
48673: LD_VAR 0 8
48677: PUSH
48678: LD_VAR 0 7
48682: DIVREAL
48683: ST_TO_ADDR
// if time < 0 then
48684: LD_VAR 0 8
48688: PUSH
48689: LD_INT 0
48691: LESS
48692: IFFALSE 48709
// time := time * - 1 ;
48694: LD_ADDR_VAR 0 8
48698: PUSH
48699: LD_VAR 0 8
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: MUL
48708: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48709: LD_VAR 0 8
48713: PUSH
48714: LD_INT 35
48716: PPUSH
48717: LD_INT 875
48719: PPUSH
48720: CALL_OW 12
48724: PLUS
48725: PPUSH
48726: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48730: LD_INT 1
48732: PPUSH
48733: LD_INT 5
48735: PPUSH
48736: CALL_OW 12
48740: PPUSH
48741: LD_VAR 0 1
48745: PPUSH
48746: LD_INT 1
48748: PPUSH
48749: CALL_OW 55
// end ;
48753: GO 48566
// end ;
48755: LD_VAR 0 5
48759: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48760: LD_INT 0
48762: PPUSH
48763: PPUSH
48764: PPUSH
48765: PPUSH
48766: PPUSH
48767: PPUSH
48768: PPUSH
48769: PPUSH
// if not turrets or not factories then
48770: LD_VAR 0 1
48774: NOT
48775: IFTRUE 48784
48777: PUSH
48778: LD_VAR 0 2
48782: NOT
48783: OR
48784: IFFALSE 48788
// exit ;
48786: GO 49095
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48788: LD_ADDR_VAR 0 10
48792: PUSH
48793: LD_INT 5
48795: PUSH
48796: LD_INT 6
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 4
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 24
48830: PUSH
48831: LD_INT 25
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 23
48840: PUSH
48841: LD_INT 27
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 42
48854: PUSH
48855: LD_INT 43
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 44
48864: PUSH
48865: LD_INT 46
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 45
48874: PUSH
48875: LD_INT 47
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// result := [ ] ;
48892: LD_ADDR_VAR 0 3
48896: PUSH
48897: EMPTY
48898: ST_TO_ADDR
// for i in turrets do
48899: LD_ADDR_VAR 0 4
48903: PUSH
48904: LD_VAR 0 1
48908: PUSH
48909: FOR_IN
48910: IFFALSE 49093
// begin nat := GetNation ( i ) ;
48912: LD_ADDR_VAR 0 7
48916: PUSH
48917: LD_VAR 0 4
48921: PPUSH
48922: CALL_OW 248
48926: ST_TO_ADDR
// weapon := 0 ;
48927: LD_ADDR_VAR 0 8
48931: PUSH
48932: LD_INT 0
48934: ST_TO_ADDR
// if not nat then
48935: LD_VAR 0 7
48939: NOT
48940: IFFALSE 48944
// continue ;
48942: GO 48909
// for j in list [ nat ] do
48944: LD_ADDR_VAR 0 5
48948: PUSH
48949: LD_VAR 0 10
48953: PUSH
48954: LD_VAR 0 7
48958: ARRAY
48959: PUSH
48960: FOR_IN
48961: IFFALSE 49002
// if GetBWeapon ( i ) = j [ 1 ] then
48963: LD_VAR 0 4
48967: PPUSH
48968: CALL_OW 269
48972: PUSH
48973: LD_VAR 0 5
48977: PUSH
48978: LD_INT 1
48980: ARRAY
48981: EQUAL
48982: IFFALSE 49000
// begin weapon := j [ 2 ] ;
48984: LD_ADDR_VAR 0 8
48988: PUSH
48989: LD_VAR 0 5
48993: PUSH
48994: LD_INT 2
48996: ARRAY
48997: ST_TO_ADDR
// break ;
48998: GO 49002
// end ;
49000: GO 48960
49002: POP
49003: POP
// if not weapon then
49004: LD_VAR 0 8
49008: NOT
49009: IFFALSE 49013
// continue ;
49011: GO 48909
// for k in factories do
49013: LD_ADDR_VAR 0 6
49017: PUSH
49018: LD_VAR 0 2
49022: PUSH
49023: FOR_IN
49024: IFFALSE 49089
// begin weapons := AvailableWeaponList ( k ) ;
49026: LD_ADDR_VAR 0 9
49030: PUSH
49031: LD_VAR 0 6
49035: PPUSH
49036: CALL_OW 478
49040: ST_TO_ADDR
// if not weapons then
49041: LD_VAR 0 9
49045: NOT
49046: IFFALSE 49050
// continue ;
49048: GO 49023
// if weapon in weapons then
49050: LD_VAR 0 8
49054: PUSH
49055: LD_VAR 0 9
49059: IN
49060: IFFALSE 49087
// begin result := [ i , weapon ] ;
49062: LD_ADDR_VAR 0 3
49066: PUSH
49067: LD_VAR 0 4
49071: PUSH
49072: LD_VAR 0 8
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// exit ;
49081: POP
49082: POP
49083: POP
49084: POP
49085: GO 49095
// end ; end ;
49087: GO 49023
49089: POP
49090: POP
// end ;
49091: GO 48909
49093: POP
49094: POP
// end ;
49095: LD_VAR 0 3
49099: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49100: LD_INT 0
49102: PPUSH
// if not side or side > 8 then
49103: LD_VAR 0 3
49107: NOT
49108: IFTRUE 49120
49110: PUSH
49111: LD_VAR 0 3
49115: PUSH
49116: LD_INT 8
49118: GREATER
49119: OR
49120: IFFALSE 49124
// exit ;
49122: GO 49183
// if not range then
49124: LD_VAR 0 4
49128: NOT
49129: IFFALSE 49140
// range := - 12 ;
49131: LD_ADDR_VAR 0 4
49135: PUSH
49136: LD_INT 12
49138: NEG
49139: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49140: LD_VAR 0 1
49144: PPUSH
49145: LD_VAR 0 2
49149: PPUSH
49150: LD_VAR 0 3
49154: PPUSH
49155: LD_VAR 0 4
49159: PPUSH
49160: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49164: LD_VAR 0 1
49168: PPUSH
49169: LD_VAR 0 2
49173: PPUSH
49174: LD_VAR 0 3
49178: PPUSH
49179: CALL_OW 331
// end ;
49183: LD_VAR 0 5
49187: RET
// export function Video ( mode ) ; begin
49188: LD_INT 0
49190: PPUSH
// ingame_video = mode ;
49191: LD_ADDR_OWVAR 52
49195: PUSH
49196: LD_VAR 0 1
49200: ST_TO_ADDR
// interface_hidden = mode ;
49201: LD_ADDR_OWVAR 54
49205: PUSH
49206: LD_VAR 0 1
49210: ST_TO_ADDR
// end ;
49211: LD_VAR 0 2
49215: RET
// export function Join ( array , element ) ; begin
49216: LD_INT 0
49218: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49219: LD_ADDR_VAR 0 3
49223: PUSH
49224: LD_VAR 0 1
49228: PPUSH
49229: LD_VAR 0 1
49233: PUSH
49234: LD_INT 1
49236: PLUS
49237: PPUSH
49238: LD_VAR 0 2
49242: PPUSH
49243: CALL_OW 1
49247: ST_TO_ADDR
// end ;
49248: LD_VAR 0 3
49252: RET
// export function JoinUnion ( array , element ) ; begin
49253: LD_INT 0
49255: PPUSH
// result := array union element ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: LD_VAR 0 1
49265: PUSH
49266: LD_VAR 0 2
49270: UNION
49271: ST_TO_ADDR
// end ;
49272: LD_VAR 0 3
49276: RET
// export function GetBehemoths ( side ) ; begin
49277: LD_INT 0
49279: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
49280: LD_ADDR_VAR 0 2
49284: PUSH
49285: LD_INT 22
49287: PUSH
49288: LD_VAR 0 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 31
49299: PUSH
49300: LD_INT 25
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PPUSH
49311: CALL_OW 69
49315: ST_TO_ADDR
// end ;
49316: LD_VAR 0 2
49320: RET
// export function Shuffle ( array ) ; var i , index ; begin
49321: LD_INT 0
49323: PPUSH
49324: PPUSH
49325: PPUSH
// result := [ ] ;
49326: LD_ADDR_VAR 0 2
49330: PUSH
49331: EMPTY
49332: ST_TO_ADDR
// if not array then
49333: LD_VAR 0 1
49337: NOT
49338: IFFALSE 49342
// exit ;
49340: GO 49441
// Randomize ;
49342: CALL_OW 10
// for i = array downto 1 do
49346: LD_ADDR_VAR 0 3
49350: PUSH
49351: DOUBLE
49352: LD_VAR 0 1
49356: INC
49357: ST_TO_ADDR
49358: LD_INT 1
49360: PUSH
49361: FOR_DOWNTO
49362: IFFALSE 49439
// begin index := rand ( 1 , array ) ;
49364: LD_ADDR_VAR 0 4
49368: PUSH
49369: LD_INT 1
49371: PPUSH
49372: LD_VAR 0 1
49376: PPUSH
49377: CALL_OW 12
49381: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49382: LD_ADDR_VAR 0 2
49386: PUSH
49387: LD_VAR 0 2
49391: PPUSH
49392: LD_VAR 0 2
49396: PUSH
49397: LD_INT 1
49399: PLUS
49400: PPUSH
49401: LD_VAR 0 1
49405: PUSH
49406: LD_VAR 0 4
49410: ARRAY
49411: PPUSH
49412: CALL_OW 2
49416: ST_TO_ADDR
// array := Delete ( array , index ) ;
49417: LD_ADDR_VAR 0 1
49421: PUSH
49422: LD_VAR 0 1
49426: PPUSH
49427: LD_VAR 0 4
49431: PPUSH
49432: CALL_OW 3
49436: ST_TO_ADDR
// end ;
49437: GO 49361
49439: POP
49440: POP
// end ;
49441: LD_VAR 0 2
49445: RET
// export function GetBaseMaterials ( base ) ; begin
49446: LD_INT 0
49448: PPUSH
// result := [ 0 , 0 , 0 ] ;
49449: LD_ADDR_VAR 0 2
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// if not base then
49468: LD_VAR 0 1
49472: NOT
49473: IFFALSE 49477
// exit ;
49475: GO 49526
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49477: LD_ADDR_VAR 0 2
49481: PUSH
49482: LD_VAR 0 1
49486: PPUSH
49487: LD_INT 1
49489: PPUSH
49490: CALL_OW 275
49494: PUSH
49495: LD_VAR 0 1
49499: PPUSH
49500: LD_INT 2
49502: PPUSH
49503: CALL_OW 275
49507: PUSH
49508: LD_VAR 0 1
49512: PPUSH
49513: LD_INT 3
49515: PPUSH
49516: CALL_OW 275
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
// end ;
49526: LD_VAR 0 2
49530: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49531: LD_INT 0
49533: PPUSH
49534: PPUSH
// result := array ;
49535: LD_ADDR_VAR 0 3
49539: PUSH
49540: LD_VAR 0 1
49544: ST_TO_ADDR
// if size >= result then
49545: LD_VAR 0 2
49549: PUSH
49550: LD_VAR 0 3
49554: GREATEREQUAL
49555: IFFALSE 49559
// exit ;
49557: GO 49609
// if size then
49559: LD_VAR 0 2
49563: IFFALSE 49609
// for i := array downto size do
49565: LD_ADDR_VAR 0 4
49569: PUSH
49570: DOUBLE
49571: LD_VAR 0 1
49575: INC
49576: ST_TO_ADDR
49577: LD_VAR 0 2
49581: PUSH
49582: FOR_DOWNTO
49583: IFFALSE 49607
// result := Delete ( result , result ) ;
49585: LD_ADDR_VAR 0 3
49589: PUSH
49590: LD_VAR 0 3
49594: PPUSH
49595: LD_VAR 0 3
49599: PPUSH
49600: CALL_OW 3
49604: ST_TO_ADDR
49605: GO 49582
49607: POP
49608: POP
// end ;
49609: LD_VAR 0 3
49613: RET
// export function ComExit ( unit ) ; var tmp ; begin
49614: LD_INT 0
49616: PPUSH
49617: PPUSH
// if not IsInUnit ( unit ) then
49618: LD_VAR 0 1
49622: PPUSH
49623: CALL_OW 310
49627: NOT
49628: IFFALSE 49632
// exit ;
49630: GO 49692
// tmp := IsInUnit ( unit ) ;
49632: LD_ADDR_VAR 0 3
49636: PUSH
49637: LD_VAR 0 1
49641: PPUSH
49642: CALL_OW 310
49646: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49647: LD_VAR 0 3
49651: PPUSH
49652: CALL_OW 247
49656: PUSH
49657: LD_INT 2
49659: EQUAL
49660: IFFALSE 49673
// ComExitVehicle ( unit ) else
49662: LD_VAR 0 1
49666: PPUSH
49667: CALL_OW 121
49671: GO 49682
// ComExitBuilding ( unit ) ;
49673: LD_VAR 0 1
49677: PPUSH
49678: CALL_OW 122
// result := tmp ;
49682: LD_ADDR_VAR 0 2
49686: PUSH
49687: LD_VAR 0 3
49691: ST_TO_ADDR
// end ;
49692: LD_VAR 0 2
49696: RET
// export function ComExitAll ( units ) ; var i ; begin
49697: LD_INT 0
49699: PPUSH
49700: PPUSH
// if not units then
49701: LD_VAR 0 1
49705: NOT
49706: IFFALSE 49710
// exit ;
49708: GO 49736
// for i in units do
49710: LD_ADDR_VAR 0 3
49714: PUSH
49715: LD_VAR 0 1
49719: PUSH
49720: FOR_IN
49721: IFFALSE 49734
// ComExit ( i ) ;
49723: LD_VAR 0 3
49727: PPUSH
49728: CALL 49614 0 1
49732: GO 49720
49734: POP
49735: POP
// end ;
49736: LD_VAR 0 2
49740: RET
// export function ResetHc ; begin
49741: LD_INT 0
49743: PPUSH
// InitHc ;
49744: CALL_OW 19
// hc_importance := 0 ;
49748: LD_ADDR_OWVAR 32
49752: PUSH
49753: LD_INT 0
49755: ST_TO_ADDR
// end ;
49756: LD_VAR 0 1
49760: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49761: LD_INT 0
49763: PPUSH
49764: PPUSH
49765: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49766: LD_ADDR_VAR 0 6
49770: PUSH
49771: LD_VAR 0 1
49775: PUSH
49776: LD_VAR 0 3
49780: PLUS
49781: PUSH
49782: LD_INT 2
49784: DIV
49785: ST_TO_ADDR
// if _x < 0 then
49786: LD_VAR 0 6
49790: PUSH
49791: LD_INT 0
49793: LESS
49794: IFFALSE 49811
// _x := _x * - 1 ;
49796: LD_ADDR_VAR 0 6
49800: PUSH
49801: LD_VAR 0 6
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: MUL
49810: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49811: LD_ADDR_VAR 0 7
49815: PUSH
49816: LD_VAR 0 2
49820: PUSH
49821: LD_VAR 0 4
49825: PLUS
49826: PUSH
49827: LD_INT 2
49829: DIV
49830: ST_TO_ADDR
// if _y < 0 then
49831: LD_VAR 0 7
49835: PUSH
49836: LD_INT 0
49838: LESS
49839: IFFALSE 49856
// _y := _y * - 1 ;
49841: LD_ADDR_VAR 0 7
49845: PUSH
49846: LD_VAR 0 7
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: MUL
49855: ST_TO_ADDR
// result := [ _x , _y ] ;
49856: LD_ADDR_VAR 0 5
49860: PUSH
49861: LD_VAR 0 6
49865: PUSH
49866: LD_VAR 0 7
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// end ;
49875: LD_VAR 0 5
49879: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49880: LD_INT 0
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
// task := GetTaskList ( unit ) ;
49886: LD_ADDR_VAR 0 7
49890: PUSH
49891: LD_VAR 0 1
49895: PPUSH
49896: CALL_OW 437
49900: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49901: LD_VAR 0 7
49905: NOT
49906: IFFALSE 49925
49908: PUSH
49909: LD_VAR 0 1
49913: PPUSH
49914: LD_VAR 0 2
49918: PPUSH
49919: CALL_OW 308
49923: NOT
49924: AND
49925: IFFALSE 49929
// exit ;
49927: GO 50047
// if IsInArea ( unit , area ) then
49929: LD_VAR 0 1
49933: PPUSH
49934: LD_VAR 0 2
49938: PPUSH
49939: CALL_OW 308
49943: IFFALSE 49961
// begin ComMoveToArea ( unit , goAway ) ;
49945: LD_VAR 0 1
49949: PPUSH
49950: LD_VAR 0 3
49954: PPUSH
49955: CALL_OW 113
// exit ;
49959: GO 50047
// end ; if task [ 1 ] [ 1 ] <> M then
49961: LD_VAR 0 7
49965: PUSH
49966: LD_INT 1
49968: ARRAY
49969: PUSH
49970: LD_INT 1
49972: ARRAY
49973: PUSH
49974: LD_STRING M
49976: NONEQUAL
49977: IFFALSE 49981
// exit ;
49979: GO 50047
// x := task [ 1 ] [ 2 ] ;
49981: LD_ADDR_VAR 0 5
49985: PUSH
49986: LD_VAR 0 7
49990: PUSH
49991: LD_INT 1
49993: ARRAY
49994: PUSH
49995: LD_INT 2
49997: ARRAY
49998: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49999: LD_ADDR_VAR 0 6
50003: PUSH
50004: LD_VAR 0 7
50008: PUSH
50009: LD_INT 1
50011: ARRAY
50012: PUSH
50013: LD_INT 3
50015: ARRAY
50016: ST_TO_ADDR
// if InArea ( x , y , area ) then
50017: LD_VAR 0 5
50021: PPUSH
50022: LD_VAR 0 6
50026: PPUSH
50027: LD_VAR 0 2
50031: PPUSH
50032: CALL_OW 309
50036: IFFALSE 50047
// ComStop ( unit ) ;
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 141
// end ;
50047: LD_VAR 0 4
50051: RET
// export function Abs ( value ) ; begin
50052: LD_INT 0
50054: PPUSH
// result := value ;
50055: LD_ADDR_VAR 0 2
50059: PUSH
50060: LD_VAR 0 1
50064: ST_TO_ADDR
// if value < 0 then
50065: LD_VAR 0 1
50069: PUSH
50070: LD_INT 0
50072: LESS
50073: IFFALSE 50090
// result := value * - 1 ;
50075: LD_ADDR_VAR 0 2
50079: PUSH
50080: LD_VAR 0 1
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: MUL
50089: ST_TO_ADDR
// end ;
50090: LD_VAR 0 2
50094: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50095: LD_INT 0
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
// if not unit or not building then
50105: LD_VAR 0 1
50109: NOT
50110: IFTRUE 50119
50112: PUSH
50113: LD_VAR 0 2
50117: NOT
50118: OR
50119: IFFALSE 50123
// exit ;
50121: GO 50351
// x := GetX ( building ) ;
50123: LD_ADDR_VAR 0 4
50127: PUSH
50128: LD_VAR 0 2
50132: PPUSH
50133: CALL_OW 250
50137: ST_TO_ADDR
// y := GetY ( building ) ;
50138: LD_ADDR_VAR 0 6
50142: PUSH
50143: LD_VAR 0 2
50147: PPUSH
50148: CALL_OW 251
50152: ST_TO_ADDR
// d := GetDir ( building ) ;
50153: LD_ADDR_VAR 0 8
50157: PUSH
50158: LD_VAR 0 2
50162: PPUSH
50163: CALL_OW 254
50167: ST_TO_ADDR
// r := 4 ;
50168: LD_ADDR_VAR 0 9
50172: PUSH
50173: LD_INT 4
50175: ST_TO_ADDR
// for i := 1 to 5 do
50176: LD_ADDR_VAR 0 10
50180: PUSH
50181: DOUBLE
50182: LD_INT 1
50184: DEC
50185: ST_TO_ADDR
50186: LD_INT 5
50188: PUSH
50189: FOR_TO
50190: IFFALSE 50349
// begin _x := ShiftX ( x , d , r + i ) ;
50192: LD_ADDR_VAR 0 5
50196: PUSH
50197: LD_VAR 0 4
50201: PPUSH
50202: LD_VAR 0 8
50206: PPUSH
50207: LD_VAR 0 9
50211: PUSH
50212: LD_VAR 0 10
50216: PLUS
50217: PPUSH
50218: CALL_OW 272
50222: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50223: LD_ADDR_VAR 0 7
50227: PUSH
50228: LD_VAR 0 6
50232: PPUSH
50233: LD_VAR 0 8
50237: PPUSH
50238: LD_VAR 0 9
50242: PUSH
50243: LD_VAR 0 10
50247: PLUS
50248: PPUSH
50249: CALL_OW 273
50253: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50254: LD_VAR 0 5
50258: PPUSH
50259: LD_VAR 0 7
50263: PPUSH
50264: CALL_OW 488
50268: IFFALSE 50303
50270: PUSH
50271: LD_VAR 0 5
50275: PPUSH
50276: LD_VAR 0 7
50280: PPUSH
50281: CALL_OW 428
50285: PPUSH
50286: CALL_OW 247
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: IN
50301: NOT
50302: AND
50303: IFFALSE 50347
// begin ComMoveXY ( unit , _x , _y ) ;
50305: LD_VAR 0 1
50309: PPUSH
50310: LD_VAR 0 5
50314: PPUSH
50315: LD_VAR 0 7
50319: PPUSH
50320: CALL_OW 111
// result := [ _x , _y ] ;
50324: LD_ADDR_VAR 0 3
50328: PUSH
50329: LD_VAR 0 5
50333: PUSH
50334: LD_VAR 0 7
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: ST_TO_ADDR
// exit ;
50343: POP
50344: POP
50345: GO 50351
// end ; end ;
50347: GO 50189
50349: POP
50350: POP
// end ;
50351: LD_VAR 0 3
50355: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50356: LD_INT 0
50358: PPUSH
50359: PPUSH
50360: PPUSH
// result := 0 ;
50361: LD_ADDR_VAR 0 3
50365: PUSH
50366: LD_INT 0
50368: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50369: LD_VAR 0 1
50373: PUSH
50374: LD_INT 0
50376: LESS
50377: IFTRUE 50389
50379: PUSH
50380: LD_VAR 0 1
50384: PUSH
50385: LD_INT 8
50387: GREATER
50388: OR
50389: IFTRUE 50401
50391: PUSH
50392: LD_VAR 0 2
50396: PUSH
50397: LD_INT 0
50399: LESS
50400: OR
50401: IFTRUE 50413
50403: PUSH
50404: LD_VAR 0 2
50408: PUSH
50409: LD_INT 8
50411: GREATER
50412: OR
50413: IFFALSE 50417
// exit ;
50415: GO 50492
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50417: LD_ADDR_VAR 0 4
50421: PUSH
50422: LD_INT 22
50424: PUSH
50425: LD_VAR 0 2
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PPUSH
50434: CALL_OW 69
50438: PUSH
50439: FOR_IN
50440: IFFALSE 50490
// begin un := UnitShoot ( i ) ;
50442: LD_ADDR_VAR 0 5
50446: PUSH
50447: LD_VAR 0 4
50451: PPUSH
50452: CALL_OW 504
50456: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50457: LD_VAR 0 5
50461: PPUSH
50462: CALL_OW 255
50466: PUSH
50467: LD_VAR 0 1
50471: EQUAL
50472: IFFALSE 50488
// begin result := un ;
50474: LD_ADDR_VAR 0 3
50478: PUSH
50479: LD_VAR 0 5
50483: ST_TO_ADDR
// exit ;
50484: POP
50485: POP
50486: GO 50492
// end ; end ;
50488: GO 50439
50490: POP
50491: POP
// end ;
50492: LD_VAR 0 3
50496: RET
// export function GetCargoBay ( units ) ; begin
50497: LD_INT 0
50499: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50500: LD_ADDR_VAR 0 2
50504: PUSH
50505: LD_VAR 0 1
50509: PPUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 34
50515: PUSH
50516: LD_INT 12
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 34
50525: PUSH
50526: LD_INT 51
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 34
50535: PUSH
50536: LD_INT 32
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 34
50545: PUSH
50546: LD_INT 89
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: PPUSH
50560: CALL_OW 72
50564: ST_TO_ADDR
// end ;
50565: LD_VAR 0 2
50569: RET
// export function Negate ( value ) ; begin
50570: LD_INT 0
50572: PPUSH
// result := not value ;
50573: LD_ADDR_VAR 0 2
50577: PUSH
50578: LD_VAR 0 1
50582: NOT
50583: ST_TO_ADDR
// end ;
50584: LD_VAR 0 2
50588: RET
// export function Inc ( value ) ; begin
50589: LD_INT 0
50591: PPUSH
// result := value + 1 ;
50592: LD_ADDR_VAR 0 2
50596: PUSH
50597: LD_VAR 0 1
50601: PUSH
50602: LD_INT 1
50604: PLUS
50605: ST_TO_ADDR
// end ;
50606: LD_VAR 0 2
50610: RET
// export function Dec ( value ) ; begin
50611: LD_INT 0
50613: PPUSH
// result := value - 1 ;
50614: LD_ADDR_VAR 0 2
50618: PUSH
50619: LD_VAR 0 1
50623: PUSH
50624: LD_INT 1
50626: MINUS
50627: ST_TO_ADDR
// end ;
50628: LD_VAR 0 2
50632: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50633: LD_INT 0
50635: PPUSH
50636: PPUSH
50637: PPUSH
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50643: LD_VAR 0 1
50647: PPUSH
50648: LD_VAR 0 2
50652: PPUSH
50653: CALL_OW 488
50657: NOT
50658: IFTRUE 50677
50660: PUSH
50661: LD_VAR 0 3
50665: PPUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: CALL_OW 488
50675: NOT
50676: OR
50677: IFFALSE 50690
// begin result := - 1 ;
50679: LD_ADDR_VAR 0 5
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: ST_TO_ADDR
// exit ;
50688: GO 50925
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50690: LD_ADDR_VAR 0 12
50694: PUSH
50695: LD_VAR 0 1
50699: PPUSH
50700: LD_VAR 0 2
50704: PPUSH
50705: LD_VAR 0 3
50709: PPUSH
50710: LD_VAR 0 4
50714: PPUSH
50715: CALL 49761 0 4
50719: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50720: LD_ADDR_VAR 0 11
50724: PUSH
50725: LD_VAR 0 1
50729: PPUSH
50730: LD_VAR 0 2
50734: PPUSH
50735: LD_VAR 0 12
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PPUSH
50744: LD_VAR 0 12
50748: PUSH
50749: LD_INT 2
50751: ARRAY
50752: PPUSH
50753: CALL_OW 298
50757: ST_TO_ADDR
// distance := 9999 ;
50758: LD_ADDR_VAR 0 10
50762: PUSH
50763: LD_INT 9999
50765: ST_TO_ADDR
// for i := 0 to 5 do
50766: LD_ADDR_VAR 0 6
50770: PUSH
50771: DOUBLE
50772: LD_INT 0
50774: DEC
50775: ST_TO_ADDR
50776: LD_INT 5
50778: PUSH
50779: FOR_TO
50780: IFFALSE 50923
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50782: LD_ADDR_VAR 0 7
50786: PUSH
50787: LD_VAR 0 1
50791: PPUSH
50792: LD_VAR 0 6
50796: PPUSH
50797: LD_VAR 0 11
50801: PPUSH
50802: CALL_OW 272
50806: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50807: LD_ADDR_VAR 0 8
50811: PUSH
50812: LD_VAR 0 2
50816: PPUSH
50817: LD_VAR 0 6
50821: PPUSH
50822: LD_VAR 0 11
50826: PPUSH
50827: CALL_OW 273
50831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50832: LD_VAR 0 7
50836: PPUSH
50837: LD_VAR 0 8
50841: PPUSH
50842: CALL_OW 488
50846: NOT
50847: IFFALSE 50851
// continue ;
50849: GO 50779
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50851: LD_ADDR_VAR 0 9
50855: PUSH
50856: LD_VAR 0 12
50860: PUSH
50861: LD_INT 1
50863: ARRAY
50864: PPUSH
50865: LD_VAR 0 12
50869: PUSH
50870: LD_INT 2
50872: ARRAY
50873: PPUSH
50874: LD_VAR 0 7
50878: PPUSH
50879: LD_VAR 0 8
50883: PPUSH
50884: CALL_OW 298
50888: ST_TO_ADDR
// if tmp < distance then
50889: LD_VAR 0 9
50893: PUSH
50894: LD_VAR 0 10
50898: LESS
50899: IFFALSE 50921
// begin result := i ;
50901: LD_ADDR_VAR 0 5
50905: PUSH
50906: LD_VAR 0 6
50910: ST_TO_ADDR
// distance := tmp ;
50911: LD_ADDR_VAR 0 10
50915: PUSH
50916: LD_VAR 0 9
50920: ST_TO_ADDR
// end ; end ;
50921: GO 50779
50923: POP
50924: POP
// end ;
50925: LD_VAR 0 5
50929: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50930: LD_INT 0
50932: PPUSH
50933: PPUSH
// if not driver or not IsInUnit ( driver ) then
50934: LD_VAR 0 1
50938: NOT
50939: IFTRUE 50953
50941: PUSH
50942: LD_VAR 0 1
50946: PPUSH
50947: CALL_OW 310
50951: NOT
50952: OR
50953: IFFALSE 50957
// exit ;
50955: GO 51047
// vehicle := IsInUnit ( driver ) ;
50957: LD_ADDR_VAR 0 3
50961: PUSH
50962: LD_VAR 0 1
50966: PPUSH
50967: CALL_OW 310
50971: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50972: LD_VAR 0 1
50976: PPUSH
50977: LD_STRING \
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: PUSH
51007: LD_STRING E
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_VAR 0 3
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PPUSH
51043: CALL_OW 446
// end ;
51047: LD_VAR 0 2
51051: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51052: LD_INT 0
51054: PPUSH
51055: PPUSH
// if not driver or not IsInUnit ( driver ) then
51056: LD_VAR 0 1
51060: NOT
51061: IFTRUE 51075
51063: PUSH
51064: LD_VAR 0 1
51068: PPUSH
51069: CALL_OW 310
51073: NOT
51074: OR
51075: IFFALSE 51079
// exit ;
51077: GO 51169
// vehicle := IsInUnit ( driver ) ;
51079: LD_ADDR_VAR 0 3
51083: PUSH
51084: LD_VAR 0 1
51088: PPUSH
51089: CALL_OW 310
51093: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51094: LD_VAR 0 1
51098: PPUSH
51099: LD_STRING \
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: PUSH
51129: LD_STRING E
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_VAR 0 3
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PPUSH
51165: CALL_OW 447
// end ;
51169: LD_VAR 0 2
51173: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51174: LD_INT 0
51176: PPUSH
51177: PPUSH
51178: PPUSH
// tmp := [ ] ;
51179: LD_ADDR_VAR 0 5
51183: PUSH
51184: EMPTY
51185: ST_TO_ADDR
// for i in units do
51186: LD_ADDR_VAR 0 4
51190: PUSH
51191: LD_VAR 0 1
51195: PUSH
51196: FOR_IN
51197: IFFALSE 51235
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51199: LD_ADDR_VAR 0 5
51203: PUSH
51204: LD_VAR 0 5
51208: PPUSH
51209: LD_VAR 0 5
51213: PUSH
51214: LD_INT 1
51216: PLUS
51217: PPUSH
51218: LD_VAR 0 4
51222: PPUSH
51223: CALL_OW 256
51227: PPUSH
51228: CALL_OW 2
51232: ST_TO_ADDR
51233: GO 51196
51235: POP
51236: POP
// if not tmp then
51237: LD_VAR 0 5
51241: NOT
51242: IFFALSE 51246
// exit ;
51244: GO 51294
// if asc then
51246: LD_VAR 0 2
51250: IFFALSE 51274
// result := SortListByListAsc ( units , tmp ) else
51252: LD_ADDR_VAR 0 3
51256: PUSH
51257: LD_VAR 0 1
51261: PPUSH
51262: LD_VAR 0 5
51266: PPUSH
51267: CALL_OW 76
51271: ST_TO_ADDR
51272: GO 51294
// result := SortListByListDesc ( units , tmp ) ;
51274: LD_ADDR_VAR 0 3
51278: PUSH
51279: LD_VAR 0 1
51283: PPUSH
51284: LD_VAR 0 5
51288: PPUSH
51289: CALL_OW 77
51293: ST_TO_ADDR
// end ;
51294: LD_VAR 0 3
51298: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51299: LD_INT 0
51301: PPUSH
51302: PPUSH
// task := GetTaskList ( mech ) ;
51303: LD_ADDR_VAR 0 4
51307: PUSH
51308: LD_VAR 0 1
51312: PPUSH
51313: CALL_OW 437
51317: ST_TO_ADDR
// if not task then
51318: LD_VAR 0 4
51322: NOT
51323: IFFALSE 51327
// exit ;
51325: GO 51371
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51327: LD_ADDR_VAR 0 3
51331: PUSH
51332: LD_VAR 0 4
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PUSH
51341: LD_INT 1
51343: ARRAY
51344: PUSH
51345: LD_STRING r
51347: EQUAL
51348: IFFALSE 51370
51350: PUSH
51351: LD_VAR 0 4
51355: PUSH
51356: LD_INT 1
51358: ARRAY
51359: PUSH
51360: LD_INT 4
51362: ARRAY
51363: PUSH
51364: LD_VAR 0 2
51368: EQUAL
51369: AND
51370: ST_TO_ADDR
// end ;
51371: LD_VAR 0 3
51375: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51376: LD_INT 0
51378: PPUSH
// SetDir ( unit , d ) ;
51379: LD_VAR 0 1
51383: PPUSH
51384: LD_VAR 0 4
51388: PPUSH
51389: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
51393: LD_ADDR_VAR 0 6
51397: PUSH
51398: LD_VAR 0 1
51402: PPUSH
51403: LD_VAR 0 2
51407: PPUSH
51408: LD_VAR 0 3
51412: PPUSH
51413: LD_VAR 0 5
51417: PPUSH
51418: CALL_OW 48
51422: ST_TO_ADDR
// end ;
51423: LD_VAR 0 6
51427: RET
// export function ToNaturalNumber ( number ) ; begin
51428: LD_INT 0
51430: PPUSH
// result := number div 1 ;
51431: LD_ADDR_VAR 0 2
51435: PUSH
51436: LD_VAR 0 1
51440: PUSH
51441: LD_INT 1
51443: DIV
51444: ST_TO_ADDR
// if number < 0 then
51445: LD_VAR 0 1
51449: PUSH
51450: LD_INT 0
51452: LESS
51453: IFFALSE 51463
// result := 0 ;
51455: LD_ADDR_VAR 0 2
51459: PUSH
51460: LD_INT 0
51462: ST_TO_ADDR
// end ;
51463: LD_VAR 0 2
51467: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
51468: LD_INT 0
51470: PPUSH
51471: PPUSH
51472: PPUSH
// if not buildings then
51473: LD_VAR 0 1
51477: NOT
51478: IFFALSE 51482
// exit ;
51480: GO 51597
// tmp := [ ] ;
51482: LD_ADDR_VAR 0 5
51486: PUSH
51487: EMPTY
51488: ST_TO_ADDR
// for b in buildings do
51489: LD_ADDR_VAR 0 4
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: FOR_IN
51500: IFFALSE 51538
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
51502: LD_ADDR_VAR 0 5
51506: PUSH
51507: LD_VAR 0 5
51511: PPUSH
51512: LD_VAR 0 5
51516: PUSH
51517: LD_INT 1
51519: PLUS
51520: PPUSH
51521: LD_VAR 0 4
51525: PPUSH
51526: CALL_OW 266
51530: PPUSH
51531: CALL_OW 1
51535: ST_TO_ADDR
51536: GO 51499
51538: POP
51539: POP
// if not tmp then
51540: LD_VAR 0 5
51544: NOT
51545: IFFALSE 51549
// exit ;
51547: GO 51597
// if asc then
51549: LD_VAR 0 2
51553: IFFALSE 51577
// result := SortListByListAsc ( buildings , tmp ) else
51555: LD_ADDR_VAR 0 3
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: LD_VAR 0 5
51569: PPUSH
51570: CALL_OW 76
51574: ST_TO_ADDR
51575: GO 51597
// result := SortListByListDesc ( buildings , tmp ) ;
51577: LD_ADDR_VAR 0 3
51581: PUSH
51582: LD_VAR 0 1
51586: PPUSH
51587: LD_VAR 0 5
51591: PPUSH
51592: CALL_OW 77
51596: ST_TO_ADDR
// end ;
51597: LD_VAR 0 3
51601: RET
// export function SortByClass ( units , class ) ; var un ; begin
51602: LD_INT 0
51604: PPUSH
51605: PPUSH
// if not units or not class then
51606: LD_VAR 0 1
51610: NOT
51611: IFTRUE 51620
51613: PUSH
51614: LD_VAR 0 2
51618: NOT
51619: OR
51620: IFFALSE 51624
// exit ;
51622: GO 51719
// result := [ ] ;
51624: LD_ADDR_VAR 0 3
51628: PUSH
51629: EMPTY
51630: ST_TO_ADDR
// for un in units do
51631: LD_ADDR_VAR 0 4
51635: PUSH
51636: LD_VAR 0 1
51640: PUSH
51641: FOR_IN
51642: IFFALSE 51717
// if GetClass ( un ) = class then
51644: LD_VAR 0 4
51648: PPUSH
51649: CALL_OW 257
51653: PUSH
51654: LD_VAR 0 2
51658: EQUAL
51659: IFFALSE 51686
// result := Insert ( result , 1 , un ) else
51661: LD_ADDR_VAR 0 3
51665: PUSH
51666: LD_VAR 0 3
51670: PPUSH
51671: LD_INT 1
51673: PPUSH
51674: LD_VAR 0 4
51678: PPUSH
51679: CALL_OW 2
51683: ST_TO_ADDR
51684: GO 51715
// result := Replace ( result , result + 1 , un ) ;
51686: LD_ADDR_VAR 0 3
51690: PUSH
51691: LD_VAR 0 3
51695: PPUSH
51696: LD_VAR 0 3
51700: PUSH
51701: LD_INT 1
51703: PLUS
51704: PPUSH
51705: LD_VAR 0 4
51709: PPUSH
51710: CALL_OW 1
51714: ST_TO_ADDR
51715: GO 51641
51717: POP
51718: POP
// end ;
51719: LD_VAR 0 3
51723: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51724: LD_INT 0
51726: PPUSH
51727: PPUSH
51728: PPUSH
51729: PPUSH
51730: PPUSH
51731: PPUSH
51732: PPUSH
// result := [ ] ;
51733: LD_ADDR_VAR 0 4
51737: PUSH
51738: EMPTY
51739: ST_TO_ADDR
// if x - r < 0 then
51740: LD_VAR 0 1
51744: PUSH
51745: LD_VAR 0 3
51749: MINUS
51750: PUSH
51751: LD_INT 0
51753: LESS
51754: IFFALSE 51766
// min_x := 0 else
51756: LD_ADDR_VAR 0 8
51760: PUSH
51761: LD_INT 0
51763: ST_TO_ADDR
51764: GO 51782
// min_x := x - r ;
51766: LD_ADDR_VAR 0 8
51770: PUSH
51771: LD_VAR 0 1
51775: PUSH
51776: LD_VAR 0 3
51780: MINUS
51781: ST_TO_ADDR
// if y - r < 0 then
51782: LD_VAR 0 2
51786: PUSH
51787: LD_VAR 0 3
51791: MINUS
51792: PUSH
51793: LD_INT 0
51795: LESS
51796: IFFALSE 51808
// min_y := 0 else
51798: LD_ADDR_VAR 0 7
51802: PUSH
51803: LD_INT 0
51805: ST_TO_ADDR
51806: GO 51824
// min_y := y - r ;
51808: LD_ADDR_VAR 0 7
51812: PUSH
51813: LD_VAR 0 2
51817: PUSH
51818: LD_VAR 0 3
51822: MINUS
51823: ST_TO_ADDR
// max_x := x + r ;
51824: LD_ADDR_VAR 0 9
51828: PUSH
51829: LD_VAR 0 1
51833: PUSH
51834: LD_VAR 0 3
51838: PLUS
51839: ST_TO_ADDR
// max_y := y + r ;
51840: LD_ADDR_VAR 0 10
51844: PUSH
51845: LD_VAR 0 2
51849: PUSH
51850: LD_VAR 0 3
51854: PLUS
51855: ST_TO_ADDR
// for _x = min_x to max_x do
51856: LD_ADDR_VAR 0 5
51860: PUSH
51861: DOUBLE
51862: LD_VAR 0 8
51866: DEC
51867: ST_TO_ADDR
51868: LD_VAR 0 9
51872: PUSH
51873: FOR_TO
51874: IFFALSE 51975
// for _y = min_y to max_y do
51876: LD_ADDR_VAR 0 6
51880: PUSH
51881: DOUBLE
51882: LD_VAR 0 7
51886: DEC
51887: ST_TO_ADDR
51888: LD_VAR 0 10
51892: PUSH
51893: FOR_TO
51894: IFFALSE 51971
// begin if not ValidHex ( _x , _y ) then
51896: LD_VAR 0 5
51900: PPUSH
51901: LD_VAR 0 6
51905: PPUSH
51906: CALL_OW 488
51910: NOT
51911: IFFALSE 51915
// continue ;
51913: GO 51893
// if GetResourceTypeXY ( _x , _y ) then
51915: LD_VAR 0 5
51919: PPUSH
51920: LD_VAR 0 6
51924: PPUSH
51925: CALL_OW 283
51929: IFFALSE 51969
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51931: LD_ADDR_VAR 0 4
51935: PUSH
51936: LD_VAR 0 4
51940: PPUSH
51941: LD_VAR 0 4
51945: PUSH
51946: LD_INT 1
51948: PLUS
51949: PPUSH
51950: LD_VAR 0 5
51954: PUSH
51955: LD_VAR 0 6
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PPUSH
51964: CALL_OW 1
51968: ST_TO_ADDR
// end ;
51969: GO 51893
51971: POP
51972: POP
51973: GO 51873
51975: POP
51976: POP
// end ;
51977: LD_VAR 0 4
51981: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51982: LD_INT 0
51984: PPUSH
51985: PPUSH
51986: PPUSH
51987: PPUSH
51988: PPUSH
51989: PPUSH
51990: PPUSH
51991: PPUSH
// if not units then
51992: LD_VAR 0 1
51996: NOT
51997: IFFALSE 52001
// exit ;
51999: GO 52533
// result := UnitFilter ( units , [ f_ok ] ) ;
52001: LD_ADDR_VAR 0 3
52005: PUSH
52006: LD_VAR 0 1
52010: PPUSH
52011: LD_INT 50
52013: PUSH
52014: EMPTY
52015: LIST
52016: PPUSH
52017: CALL_OW 72
52021: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52022: LD_ADDR_VAR 0 8
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PPUSH
52036: CALL_OW 255
52040: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52041: LD_ADDR_VAR 0 10
52045: PUSH
52046: LD_INT 29
52048: PUSH
52049: LD_INT 91
52051: PUSH
52052: LD_INT 49
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: ST_TO_ADDR
// if not result then
52060: LD_VAR 0 3
52064: NOT
52065: IFFALSE 52069
// exit ;
52067: GO 52533
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52069: LD_ADDR_VAR 0 5
52073: PUSH
52074: LD_INT 81
52076: PUSH
52077: LD_VAR 0 8
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PPUSH
52086: CALL_OW 69
52090: ST_TO_ADDR
// for i in result do
52091: LD_ADDR_VAR 0 4
52095: PUSH
52096: LD_VAR 0 3
52100: PUSH
52101: FOR_IN
52102: IFFALSE 52531
// begin tag := GetTag ( i ) + 1 ;
52104: LD_ADDR_VAR 0 9
52108: PUSH
52109: LD_VAR 0 4
52113: PPUSH
52114: CALL_OW 110
52118: PUSH
52119: LD_INT 1
52121: PLUS
52122: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
52123: LD_ADDR_VAR 0 7
52127: PUSH
52128: LD_VAR 0 4
52132: PPUSH
52133: CALL_OW 250
52137: PPUSH
52138: LD_VAR 0 4
52142: PPUSH
52143: CALL_OW 251
52147: PPUSH
52148: LD_INT 4
52150: PPUSH
52151: CALL 51724 0 3
52155: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
52156: LD_VAR 0 4
52160: PPUSH
52161: CALL_OW 247
52165: PUSH
52166: LD_INT 2
52168: EQUAL
52169: IFFALSE 52181
52171: PUSH
52172: LD_VAR 0 7
52176: PUSH
52177: LD_INT 2
52179: GREATER
52180: AND
52181: IFFALSE 52201
52183: PUSH
52184: LD_VAR 0 4
52188: PPUSH
52189: CALL_OW 264
52193: PUSH
52194: LD_VAR 0 10
52198: IN
52199: NOT
52200: AND
52201: IFFALSE 52240
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52203: LD_VAR 0 4
52207: PPUSH
52208: LD_VAR 0 7
52212: PUSH
52213: LD_INT 1
52215: ARRAY
52216: PUSH
52217: LD_INT 1
52219: ARRAY
52220: PPUSH
52221: LD_VAR 0 7
52225: PUSH
52226: LD_INT 1
52228: ARRAY
52229: PUSH
52230: LD_INT 2
52232: ARRAY
52233: PPUSH
52234: CALL_OW 116
52238: GO 52529
// if path > tag then
52240: LD_VAR 0 2
52244: PUSH
52245: LD_VAR 0 9
52249: GREATER
52250: IFFALSE 52458
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52252: LD_ADDR_VAR 0 6
52256: PUSH
52257: LD_VAR 0 5
52261: PPUSH
52262: LD_INT 91
52264: PUSH
52265: LD_VAR 0 4
52269: PUSH
52270: LD_INT 8
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: LIST
52277: PPUSH
52278: CALL_OW 72
52282: ST_TO_ADDR
// if nearEnemy then
52283: LD_VAR 0 6
52287: IFFALSE 52356
// begin if GetWeapon ( i ) = ru_time_lapser then
52289: LD_VAR 0 4
52293: PPUSH
52294: CALL_OW 264
52298: PUSH
52299: LD_INT 49
52301: EQUAL
52302: IFFALSE 52330
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52304: LD_VAR 0 4
52308: PPUSH
52309: LD_VAR 0 6
52313: PPUSH
52314: LD_VAR 0 4
52318: PPUSH
52319: CALL_OW 74
52323: PPUSH
52324: CALL_OW 112
52328: GO 52354
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52330: LD_VAR 0 4
52334: PPUSH
52335: LD_VAR 0 6
52339: PPUSH
52340: LD_VAR 0 4
52344: PPUSH
52345: CALL_OW 74
52349: PPUSH
52350: CALL 53614 0 2
// end else
52354: GO 52456
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52356: LD_VAR 0 4
52360: PPUSH
52361: LD_VAR 0 2
52365: PUSH
52366: LD_VAR 0 9
52370: ARRAY
52371: PUSH
52372: LD_INT 1
52374: ARRAY
52375: PPUSH
52376: LD_VAR 0 2
52380: PUSH
52381: LD_VAR 0 9
52385: ARRAY
52386: PUSH
52387: LD_INT 2
52389: ARRAY
52390: PPUSH
52391: CALL_OW 297
52395: PUSH
52396: LD_INT 6
52398: GREATER
52399: IFFALSE 52442
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52401: LD_VAR 0 4
52405: PPUSH
52406: LD_VAR 0 2
52410: PUSH
52411: LD_VAR 0 9
52415: ARRAY
52416: PUSH
52417: LD_INT 1
52419: ARRAY
52420: PPUSH
52421: LD_VAR 0 2
52425: PUSH
52426: LD_VAR 0 9
52430: ARRAY
52431: PUSH
52432: LD_INT 2
52434: ARRAY
52435: PPUSH
52436: CALL_OW 114
52440: GO 52456
// SetTag ( i , tag ) ;
52442: LD_VAR 0 4
52446: PPUSH
52447: LD_VAR 0 9
52451: PPUSH
52452: CALL_OW 109
// end else
52456: GO 52529
// if enemy then
52458: LD_VAR 0 5
52462: IFFALSE 52529
// begin if GetWeapon ( i ) = ru_time_lapser then
52464: LD_VAR 0 4
52468: PPUSH
52469: CALL_OW 264
52473: PUSH
52474: LD_INT 49
52476: EQUAL
52477: IFFALSE 52505
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
52479: LD_VAR 0 4
52483: PPUSH
52484: LD_VAR 0 5
52488: PPUSH
52489: LD_VAR 0 4
52493: PPUSH
52494: CALL_OW 74
52498: PPUSH
52499: CALL_OW 112
52503: GO 52529
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52505: LD_VAR 0 4
52509: PPUSH
52510: LD_VAR 0 5
52514: PPUSH
52515: LD_VAR 0 4
52519: PPUSH
52520: CALL_OW 74
52524: PPUSH
52525: CALL 53614 0 2
// end ; end ;
52529: GO 52101
52531: POP
52532: POP
// end ;
52533: LD_VAR 0 3
52537: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52538: LD_INT 0
52540: PPUSH
52541: PPUSH
52542: PPUSH
// if not unit or IsInUnit ( unit ) then
52543: LD_VAR 0 1
52547: NOT
52548: IFTRUE 52561
52550: PUSH
52551: LD_VAR 0 1
52555: PPUSH
52556: CALL_OW 310
52560: OR
52561: IFFALSE 52565
// exit ;
52563: GO 52656
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52565: LD_ADDR_VAR 0 4
52569: PUSH
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 250
52579: PPUSH
52580: LD_VAR 0 2
52584: PPUSH
52585: LD_INT 1
52587: PPUSH
52588: CALL_OW 272
52592: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52593: LD_ADDR_VAR 0 5
52597: PUSH
52598: LD_VAR 0 1
52602: PPUSH
52603: CALL_OW 251
52607: PPUSH
52608: LD_VAR 0 2
52612: PPUSH
52613: LD_INT 1
52615: PPUSH
52616: CALL_OW 273
52620: ST_TO_ADDR
// if ValidHex ( x , y ) then
52621: LD_VAR 0 4
52625: PPUSH
52626: LD_VAR 0 5
52630: PPUSH
52631: CALL_OW 488
52635: IFFALSE 52656
// ComTurnXY ( unit , x , y ) ;
52637: LD_VAR 0 1
52641: PPUSH
52642: LD_VAR 0 4
52646: PPUSH
52647: LD_VAR 0 5
52651: PPUSH
52652: CALL_OW 118
// end ;
52656: LD_VAR 0 3
52660: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52661: LD_INT 0
52663: PPUSH
52664: PPUSH
// result := false ;
52665: LD_ADDR_VAR 0 3
52669: PUSH
52670: LD_INT 0
52672: ST_TO_ADDR
// if not units then
52673: LD_VAR 0 2
52677: NOT
52678: IFFALSE 52682
// exit ;
52680: GO 52727
// for i in units do
52682: LD_ADDR_VAR 0 4
52686: PUSH
52687: LD_VAR 0 2
52691: PUSH
52692: FOR_IN
52693: IFFALSE 52725
// if See ( side , i ) then
52695: LD_VAR 0 1
52699: PPUSH
52700: LD_VAR 0 4
52704: PPUSH
52705: CALL_OW 292
52709: IFFALSE 52723
// begin result := true ;
52711: LD_ADDR_VAR 0 3
52715: PUSH
52716: LD_INT 1
52718: ST_TO_ADDR
// exit ;
52719: POP
52720: POP
52721: GO 52727
// end ;
52723: GO 52692
52725: POP
52726: POP
// end ;
52727: LD_VAR 0 3
52731: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52732: LD_INT 0
52734: PPUSH
52735: PPUSH
52736: PPUSH
52737: PPUSH
// if not unit or not points then
52738: LD_VAR 0 1
52742: NOT
52743: IFTRUE 52752
52745: PUSH
52746: LD_VAR 0 2
52750: NOT
52751: OR
52752: IFFALSE 52756
// exit ;
52754: GO 52846
// dist := 99999 ;
52756: LD_ADDR_VAR 0 5
52760: PUSH
52761: LD_INT 99999
52763: ST_TO_ADDR
// for i in points do
52764: LD_ADDR_VAR 0 4
52768: PUSH
52769: LD_VAR 0 2
52773: PUSH
52774: FOR_IN
52775: IFFALSE 52844
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52777: LD_ADDR_VAR 0 6
52781: PUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: LD_VAR 0 4
52791: PUSH
52792: LD_INT 1
52794: ARRAY
52795: PPUSH
52796: LD_VAR 0 4
52800: PUSH
52801: LD_INT 2
52803: ARRAY
52804: PPUSH
52805: CALL_OW 297
52809: ST_TO_ADDR
// if tmpDist < dist then
52810: LD_VAR 0 6
52814: PUSH
52815: LD_VAR 0 5
52819: LESS
52820: IFFALSE 52842
// begin result := i ;
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_VAR 0 4
52831: ST_TO_ADDR
// dist := tmpDist ;
52832: LD_ADDR_VAR 0 5
52836: PUSH
52837: LD_VAR 0 6
52841: ST_TO_ADDR
// end ; end ;
52842: GO 52774
52844: POP
52845: POP
// end ;
52846: LD_VAR 0 3
52850: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52851: LD_INT 0
52853: PPUSH
// uc_side := side ;
52854: LD_ADDR_OWVAR 20
52858: PUSH
52859: LD_VAR 0 1
52863: ST_TO_ADDR
// uc_nation := 3 ;
52864: LD_ADDR_OWVAR 21
52868: PUSH
52869: LD_INT 3
52871: ST_TO_ADDR
// vc_chassis := 25 ;
52872: LD_ADDR_OWVAR 37
52876: PUSH
52877: LD_INT 25
52879: ST_TO_ADDR
// vc_engine := engine_siberite ;
52880: LD_ADDR_OWVAR 39
52884: PUSH
52885: LD_INT 3
52887: ST_TO_ADDR
// vc_control := control_computer ;
52888: LD_ADDR_OWVAR 38
52892: PUSH
52893: LD_INT 3
52895: ST_TO_ADDR
// vc_weapon := 59 ;
52896: LD_ADDR_OWVAR 40
52900: PUSH
52901: LD_INT 59
52903: ST_TO_ADDR
// result := CreateVehicle ;
52904: LD_ADDR_VAR 0 5
52908: PUSH
52909: CALL_OW 45
52913: ST_TO_ADDR
// SetDir ( result , d ) ;
52914: LD_VAR 0 5
52918: PPUSH
52919: LD_VAR 0 4
52923: PPUSH
52924: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52928: LD_VAR 0 5
52932: PPUSH
52933: LD_VAR 0 2
52937: PPUSH
52938: LD_VAR 0 3
52942: PPUSH
52943: LD_INT 0
52945: PPUSH
52946: CALL_OW 48
// end ;
52950: LD_VAR 0 5
52954: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52955: LD_INT 0
52957: PPUSH
52958: PPUSH
52959: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52960: LD_ADDR_VAR 0 2
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52983: LD_VAR 0 1
52987: NOT
52988: IFTRUE 53021
52990: PUSH
52991: LD_VAR 0 1
52995: PPUSH
52996: CALL_OW 264
53000: PUSH
53001: LD_INT 12
53003: PUSH
53004: LD_INT 51
53006: PUSH
53007: LD_INT 32
53009: PUSH
53010: LD_INT 89
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: IN
53019: NOT
53020: OR
53021: IFFALSE 53025
// exit ;
53023: GO 53123
// for i := 1 to 3 do
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: DOUBLE
53031: LD_INT 1
53033: DEC
53034: ST_TO_ADDR
53035: LD_INT 3
53037: PUSH
53038: FOR_TO
53039: IFFALSE 53121
// begin tmp := GetCargo ( cargo , i ) ;
53041: LD_ADDR_VAR 0 4
53045: PUSH
53046: LD_VAR 0 1
53050: PPUSH
53051: LD_VAR 0 3
53055: PPUSH
53056: CALL_OW 289
53060: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53061: LD_ADDR_VAR 0 2
53065: PUSH
53066: LD_VAR 0 2
53070: PPUSH
53071: LD_VAR 0 3
53075: PPUSH
53076: LD_VAR 0 4
53080: PPUSH
53081: CALL_OW 1
53085: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53086: LD_ADDR_VAR 0 2
53090: PUSH
53091: LD_VAR 0 2
53095: PPUSH
53096: LD_INT 4
53098: PPUSH
53099: LD_VAR 0 2
53103: PUSH
53104: LD_INT 4
53106: ARRAY
53107: PUSH
53108: LD_VAR 0 4
53112: PLUS
53113: PPUSH
53114: CALL_OW 1
53118: ST_TO_ADDR
// end ;
53119: GO 53038
53121: POP
53122: POP
// end ;
53123: LD_VAR 0 2
53127: RET
// export function Length ( array ) ; begin
53128: LD_INT 0
53130: PPUSH
// result := array + 0 ;
53131: LD_ADDR_VAR 0 2
53135: PUSH
53136: LD_VAR 0 1
53140: PUSH
53141: LD_INT 0
53143: PLUS
53144: ST_TO_ADDR
// end ;
53145: LD_VAR 0 2
53149: RET
// export function PrepareArray ( array ) ; begin
53150: LD_INT 0
53152: PPUSH
// result := array diff 0 ;
53153: LD_ADDR_VAR 0 2
53157: PUSH
53158: LD_VAR 0 1
53162: PUSH
53163: LD_INT 0
53165: DIFF
53166: ST_TO_ADDR
// if not result [ 1 ] then
53167: LD_VAR 0 2
53171: PUSH
53172: LD_INT 1
53174: ARRAY
53175: NOT
53176: IFFALSE 53196
// result := Delete ( result , 1 ) ;
53178: LD_ADDR_VAR 0 2
53182: PUSH
53183: LD_VAR 0 2
53187: PPUSH
53188: LD_INT 1
53190: PPUSH
53191: CALL_OW 3
53195: ST_TO_ADDR
// end ;
53196: LD_VAR 0 2
53200: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
53201: LD_INT 0
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
// sibRocketRange := 25 ;
53207: LD_ADDR_VAR 0 6
53211: PUSH
53212: LD_INT 25
53214: ST_TO_ADDR
// result := false ;
53215: LD_ADDR_VAR 0 4
53219: PUSH
53220: LD_INT 0
53222: ST_TO_ADDR
// for i := 0 to 5 do
53223: LD_ADDR_VAR 0 5
53227: PUSH
53228: DOUBLE
53229: LD_INT 0
53231: DEC
53232: ST_TO_ADDR
53233: LD_INT 5
53235: PUSH
53236: FOR_TO
53237: IFFALSE 53304
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
53239: LD_VAR 0 1
53243: PPUSH
53244: LD_VAR 0 5
53248: PPUSH
53249: LD_VAR 0 6
53253: PPUSH
53254: CALL_OW 272
53258: PPUSH
53259: LD_VAR 0 2
53263: PPUSH
53264: LD_VAR 0 5
53268: PPUSH
53269: LD_VAR 0 6
53273: PPUSH
53274: CALL_OW 273
53278: PPUSH
53279: LD_VAR 0 3
53283: PPUSH
53284: CALL_OW 309
53288: IFFALSE 53302
// begin result := true ;
53290: LD_ADDR_VAR 0 4
53294: PUSH
53295: LD_INT 1
53297: ST_TO_ADDR
// exit ;
53298: POP
53299: POP
53300: GO 53306
// end ;
53302: GO 53236
53304: POP
53305: POP
// end ;
53306: LD_VAR 0 4
53310: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
53311: LD_INT 0
53313: PPUSH
53314: PPUSH
53315: PPUSH
// if btype = b_depot then
53316: LD_VAR 0 2
53320: PUSH
53321: LD_INT 0
53323: EQUAL
53324: IFFALSE 53336
// begin result := true ;
53326: LD_ADDR_VAR 0 3
53330: PUSH
53331: LD_INT 1
53333: ST_TO_ADDR
// exit ;
53334: GO 53456
// end ; pom := GetBase ( depot ) ;
53336: LD_ADDR_VAR 0 4
53340: PUSH
53341: LD_VAR 0 1
53345: PPUSH
53346: CALL_OW 274
53350: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53351: LD_ADDR_VAR 0 5
53355: PUSH
53356: LD_VAR 0 2
53360: PPUSH
53361: LD_VAR 0 1
53365: PPUSH
53366: CALL_OW 248
53370: PPUSH
53371: CALL_OW 450
53375: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
53376: LD_ADDR_VAR 0 3
53380: PUSH
53381: LD_VAR 0 4
53385: PPUSH
53386: LD_INT 1
53388: PPUSH
53389: CALL_OW 275
53393: PUSH
53394: LD_VAR 0 5
53398: PUSH
53399: LD_INT 1
53401: ARRAY
53402: GREATEREQUAL
53403: IFFALSE 53429
53405: PUSH
53406: LD_VAR 0 4
53410: PPUSH
53411: LD_INT 2
53413: PPUSH
53414: CALL_OW 275
53418: PUSH
53419: LD_VAR 0 5
53423: PUSH
53424: LD_INT 2
53426: ARRAY
53427: GREATEREQUAL
53428: AND
53429: IFFALSE 53455
53431: PUSH
53432: LD_VAR 0 4
53436: PPUSH
53437: LD_INT 3
53439: PPUSH
53440: CALL_OW 275
53444: PUSH
53445: LD_VAR 0 5
53449: PUSH
53450: LD_INT 3
53452: ARRAY
53453: GREATEREQUAL
53454: AND
53455: ST_TO_ADDR
// end ;
53456: LD_VAR 0 3
53460: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
53461: LD_INT 0
53463: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
53464: LD_VAR 0 1
53468: PPUSH
53469: LD_VAR 0 2
53473: PPUSH
53474: LD_INT 0
53476: PPUSH
53477: LD_INT 0
53479: PPUSH
53480: LD_INT 1
53482: PPUSH
53483: LD_INT 0
53485: PPUSH
53486: CALL_OW 587
// end ;
53490: LD_VAR 0 3
53494: RET
// export function CenterOnNow ( unit ) ; begin
53495: LD_INT 0
53497: PPUSH
// result := IsInUnit ( unit ) ;
53498: LD_ADDR_VAR 0 2
53502: PUSH
53503: LD_VAR 0 1
53507: PPUSH
53508: CALL_OW 310
53512: ST_TO_ADDR
// if not result then
53513: LD_VAR 0 2
53517: NOT
53518: IFFALSE 53530
// result := unit ;
53520: LD_ADDR_VAR 0 2
53524: PUSH
53525: LD_VAR 0 1
53529: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
53530: LD_VAR 0 1
53534: PPUSH
53535: CALL_OW 87
// end ;
53539: LD_VAR 0 2
53543: RET
// export function ComMoveHex ( unit , hex ) ; begin
53544: LD_INT 0
53546: PPUSH
// if not hex then
53547: LD_VAR 0 2
53551: NOT
53552: IFFALSE 53556
// exit ;
53554: GO 53609
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
53556: LD_VAR 0 2
53560: PUSH
53561: LD_INT 1
53563: ARRAY
53564: PPUSH
53565: LD_VAR 0 2
53569: PUSH
53570: LD_INT 2
53572: ARRAY
53573: PPUSH
53574: CALL_OW 428
53578: IFFALSE 53582
// exit ;
53580: GO 53609
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
53582: LD_VAR 0 1
53586: PPUSH
53587: LD_VAR 0 2
53591: PUSH
53592: LD_INT 1
53594: ARRAY
53595: PPUSH
53596: LD_VAR 0 2
53600: PUSH
53601: LD_INT 2
53603: ARRAY
53604: PPUSH
53605: CALL_OW 111
// end ;
53609: LD_VAR 0 3
53613: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
53614: LD_INT 0
53616: PPUSH
53617: PPUSH
53618: PPUSH
// if not unit or not enemy then
53619: LD_VAR 0 1
53623: NOT
53624: IFTRUE 53633
53626: PUSH
53627: LD_VAR 0 2
53631: NOT
53632: OR
53633: IFFALSE 53637
// exit ;
53635: GO 53763
// x := GetX ( enemy ) ;
53637: LD_ADDR_VAR 0 4
53641: PUSH
53642: LD_VAR 0 2
53646: PPUSH
53647: CALL_OW 250
53651: ST_TO_ADDR
// y := GetY ( enemy ) ;
53652: LD_ADDR_VAR 0 5
53656: PUSH
53657: LD_VAR 0 2
53661: PPUSH
53662: CALL_OW 251
53666: ST_TO_ADDR
// if ValidHex ( x , y ) then
53667: LD_VAR 0 4
53671: PPUSH
53672: LD_VAR 0 5
53676: PPUSH
53677: CALL_OW 488
53681: IFFALSE 53763
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53683: LD_VAR 0 2
53687: PPUSH
53688: CALL_OW 247
53692: PUSH
53693: LD_INT 3
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: IN
53703: IFTRUE 53726
53705: PUSH
53706: LD_VAR 0 1
53710: PPUSH
53711: CALL_OW 255
53715: PPUSH
53716: LD_VAR 0 2
53720: PPUSH
53721: CALL_OW 292
53725: OR
53726: IFFALSE 53744
// ComAttackUnit ( unit , enemy ) else
53728: LD_VAR 0 1
53732: PPUSH
53733: LD_VAR 0 2
53737: PPUSH
53738: CALL_OW 115
53742: GO 53763
// ComAgressiveMove ( unit , x , y ) ;
53744: LD_VAR 0 1
53748: PPUSH
53749: LD_VAR 0 4
53753: PPUSH
53754: LD_VAR 0 5
53758: PPUSH
53759: CALL_OW 114
// end ;
53763: LD_VAR 0 3
53767: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53768: LD_INT 0
53770: PPUSH
53771: PPUSH
53772: PPUSH
// list := AreaToList ( area , 0 ) ;
53773: LD_ADDR_VAR 0 5
53777: PUSH
53778: LD_VAR 0 1
53782: PPUSH
53783: LD_INT 0
53785: PPUSH
53786: CALL_OW 517
53790: ST_TO_ADDR
// if not list then
53791: LD_VAR 0 5
53795: NOT
53796: IFFALSE 53800
// exit ;
53798: GO 53930
// if all then
53800: LD_VAR 0 2
53804: IFFALSE 53892
// begin for i := 1 to list [ 1 ] do
53806: LD_ADDR_VAR 0 4
53810: PUSH
53811: DOUBLE
53812: LD_INT 1
53814: DEC
53815: ST_TO_ADDR
53816: LD_VAR 0 5
53820: PUSH
53821: LD_INT 1
53823: ARRAY
53824: PUSH
53825: FOR_TO
53826: IFFALSE 53888
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53828: LD_ADDR_VAR 0 3
53832: PUSH
53833: LD_VAR 0 3
53837: PPUSH
53838: LD_VAR 0 3
53842: PUSH
53843: LD_INT 1
53845: PLUS
53846: PPUSH
53847: LD_VAR 0 5
53851: PUSH
53852: LD_INT 1
53854: ARRAY
53855: PUSH
53856: LD_VAR 0 4
53860: ARRAY
53861: PUSH
53862: LD_VAR 0 5
53866: PUSH
53867: LD_INT 2
53869: ARRAY
53870: PUSH
53871: LD_VAR 0 4
53875: ARRAY
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PPUSH
53881: CALL_OW 1
53885: ST_TO_ADDR
53886: GO 53825
53888: POP
53889: POP
// exit ;
53890: GO 53930
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53892: LD_ADDR_VAR 0 3
53896: PUSH
53897: LD_VAR 0 5
53901: PUSH
53902: LD_INT 1
53904: ARRAY
53905: PUSH
53906: LD_INT 1
53908: ARRAY
53909: PUSH
53910: LD_VAR 0 5
53914: PUSH
53915: LD_INT 2
53917: ARRAY
53918: PUSH
53919: LD_INT 1
53921: ARRAY
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: EMPTY
53928: LIST
53929: ST_TO_ADDR
// end ;
53930: LD_VAR 0 3
53934: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53935: LD_INT 0
53937: PPUSH
53938: PPUSH
// list := AreaToList ( area , 0 ) ;
53939: LD_ADDR_VAR 0 4
53943: PUSH
53944: LD_VAR 0 1
53948: PPUSH
53949: LD_INT 0
53951: PPUSH
53952: CALL_OW 517
53956: ST_TO_ADDR
// if not list then
53957: LD_VAR 0 4
53961: NOT
53962: IFFALSE 53966
// exit ;
53964: GO 54007
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53966: LD_ADDR_VAR 0 3
53970: PUSH
53971: LD_VAR 0 4
53975: PUSH
53976: LD_INT 1
53978: ARRAY
53979: PUSH
53980: LD_INT 1
53982: ARRAY
53983: PUSH
53984: LD_VAR 0 4
53988: PUSH
53989: LD_INT 2
53991: ARRAY
53992: PUSH
53993: LD_INT 1
53995: ARRAY
53996: PUSH
53997: LD_VAR 0 2
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
// end ;
54007: LD_VAR 0 3
54011: RET
// export function First ( array ) ; begin
54012: LD_INT 0
54014: PPUSH
// if not array then
54015: LD_VAR 0 1
54019: NOT
54020: IFFALSE 54024
// exit ;
54022: GO 54038
// result := array [ 1 ] ;
54024: LD_ADDR_VAR 0 2
54028: PUSH
54029: LD_VAR 0 1
54033: PUSH
54034: LD_INT 1
54036: ARRAY
54037: ST_TO_ADDR
// end ;
54038: LD_VAR 0 2
54042: RET
// export function Last ( array ) ; begin
54043: LD_INT 0
54045: PPUSH
// if not array then
54046: LD_VAR 0 1
54050: NOT
54051: IFFALSE 54055
// exit ;
54053: GO 54071
// result := array [ array ] ;
54055: LD_ADDR_VAR 0 2
54059: PUSH
54060: LD_VAR 0 1
54064: PUSH
54065: LD_VAR 0 1
54069: ARRAY
54070: ST_TO_ADDR
// end ;
54071: LD_VAR 0 2
54075: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
54076: LD_INT 0
54078: PPUSH
54079: PPUSH
// result := [ ] ;
54080: LD_ADDR_VAR 0 5
54084: PUSH
54085: EMPTY
54086: ST_TO_ADDR
// if not array then
54087: LD_VAR 0 1
54091: NOT
54092: IFFALSE 54096
// exit ;
54094: GO 54208
// for i := 1 to array do
54096: LD_ADDR_VAR 0 6
54100: PUSH
54101: DOUBLE
54102: LD_INT 1
54104: DEC
54105: ST_TO_ADDR
54106: LD_VAR 0 1
54110: PUSH
54111: FOR_TO
54112: IFFALSE 54206
// if array [ i ] [ index ] = value then
54114: LD_VAR 0 1
54118: PUSH
54119: LD_VAR 0 6
54123: ARRAY
54124: PUSH
54125: LD_VAR 0 2
54129: ARRAY
54130: PUSH
54131: LD_VAR 0 3
54135: EQUAL
54136: IFFALSE 54204
// begin if indexColumn then
54138: LD_VAR 0 4
54142: IFFALSE 54178
// result := Join ( result , array [ i ] [ indexColumn ] ) else
54144: LD_ADDR_VAR 0 5
54148: PUSH
54149: LD_VAR 0 5
54153: PPUSH
54154: LD_VAR 0 1
54158: PUSH
54159: LD_VAR 0 6
54163: ARRAY
54164: PUSH
54165: LD_VAR 0 4
54169: ARRAY
54170: PPUSH
54171: CALL 49216 0 2
54175: ST_TO_ADDR
54176: GO 54204
// result := Join ( result , array [ i ] ) ;
54178: LD_ADDR_VAR 0 5
54182: PUSH
54183: LD_VAR 0 5
54187: PPUSH
54188: LD_VAR 0 1
54192: PUSH
54193: LD_VAR 0 6
54197: ARRAY
54198: PPUSH
54199: CALL 49216 0 2
54203: ST_TO_ADDR
// end ;
54204: GO 54111
54206: POP
54207: POP
// end ;
54208: LD_VAR 0 5
54212: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
54213: LD_INT 0
54215: PPUSH
// if not vehicles or not parkingPoint then
54216: LD_VAR 0 1
54220: NOT
54221: IFTRUE 54230
54223: PUSH
54224: LD_VAR 0 2
54228: NOT
54229: OR
54230: IFFALSE 54234
// exit ;
54232: GO 54332
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
54234: LD_ADDR_VAR 0 1
54238: PUSH
54239: LD_VAR 0 1
54243: PPUSH
54244: LD_INT 50
54246: PUSH
54247: EMPTY
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: LD_INT 92
54255: PUSH
54256: LD_VAR 0 2
54260: PUSH
54261: LD_INT 1
54263: ARRAY
54264: PUSH
54265: LD_VAR 0 2
54269: PUSH
54270: LD_INT 2
54272: ARRAY
54273: PUSH
54274: LD_INT 8
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PPUSH
54291: CALL_OW 72
54295: ST_TO_ADDR
// if not vehicles then
54296: LD_VAR 0 1
54300: NOT
54301: IFFALSE 54305
// exit ;
54303: GO 54332
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
54305: LD_VAR 0 1
54309: PPUSH
54310: LD_VAR 0 2
54314: PUSH
54315: LD_INT 1
54317: ARRAY
54318: PPUSH
54319: LD_VAR 0 2
54323: PUSH
54324: LD_INT 2
54326: ARRAY
54327: PPUSH
54328: CALL_OW 111
// end ;
54332: LD_VAR 0 3
54336: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
54337: LD_INT 0
54339: PPUSH
54340: PPUSH
54341: PPUSH
// if not side or not area then
54342: LD_VAR 0 1
54346: NOT
54347: IFTRUE 54356
54349: PUSH
54350: LD_VAR 0 2
54354: NOT
54355: OR
54356: IFFALSE 54360
// exit ;
54358: GO 54479
// tmp := AreaToList ( area , 0 ) ;
54360: LD_ADDR_VAR 0 5
54364: PUSH
54365: LD_VAR 0 2
54369: PPUSH
54370: LD_INT 0
54372: PPUSH
54373: CALL_OW 517
54377: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54378: LD_ADDR_VAR 0 4
54382: PUSH
54383: DOUBLE
54384: LD_INT 1
54386: DEC
54387: ST_TO_ADDR
54388: LD_VAR 0 5
54392: PUSH
54393: LD_INT 1
54395: ARRAY
54396: PUSH
54397: FOR_TO
54398: IFFALSE 54477
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
54400: LD_VAR 0 5
54404: PUSH
54405: LD_INT 1
54407: ARRAY
54408: PUSH
54409: LD_VAR 0 4
54413: ARRAY
54414: PPUSH
54415: LD_VAR 0 5
54419: PUSH
54420: LD_INT 2
54422: ARRAY
54423: PUSH
54424: LD_VAR 0 4
54428: ARRAY
54429: PPUSH
54430: CALL_OW 351
54434: IFFALSE 54475
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
54436: LD_VAR 0 5
54440: PUSH
54441: LD_INT 1
54443: ARRAY
54444: PUSH
54445: LD_VAR 0 4
54449: ARRAY
54450: PPUSH
54451: LD_VAR 0 5
54455: PUSH
54456: LD_INT 2
54458: ARRAY
54459: PUSH
54460: LD_VAR 0 4
54464: ARRAY
54465: PPUSH
54466: LD_VAR 0 1
54470: PPUSH
54471: CALL_OW 244
// end ;
54475: GO 54397
54477: POP
54478: POP
// end ;
54479: LD_VAR 0 3
54483: RET
// export function UniqueArray ( array ) ; var i ; begin
54484: LD_INT 0
54486: PPUSH
54487: PPUSH
// result := [ ] ;
54488: LD_ADDR_VAR 0 2
54492: PUSH
54493: EMPTY
54494: ST_TO_ADDR
// if not array then
54495: LD_VAR 0 1
54499: NOT
54500: IFFALSE 54504
// exit ;
54502: GO 54565
// for i := 1 to array do
54504: LD_ADDR_VAR 0 3
54508: PUSH
54509: DOUBLE
54510: LD_INT 1
54512: DEC
54513: ST_TO_ADDR
54514: LD_VAR 0 1
54518: PUSH
54519: FOR_TO
54520: IFFALSE 54563
// if not array [ i ] in result then
54522: LD_VAR 0 1
54526: PUSH
54527: LD_VAR 0 3
54531: ARRAY
54532: PUSH
54533: LD_VAR 0 2
54537: IN
54538: NOT
54539: IFFALSE 54561
// result := Join ( result , i ) ;
54541: LD_ADDR_VAR 0 2
54545: PUSH
54546: LD_VAR 0 2
54550: PPUSH
54551: LD_VAR 0 3
54555: PPUSH
54556: CALL 49216 0 2
54560: ST_TO_ADDR
54561: GO 54519
54563: POP
54564: POP
// end ; end_of_file
54565: LD_VAR 0 2
54569: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
54570: LD_VAR 0 1
54574: PUSH
54575: LD_INT 200
54577: DOUBLE
54578: GREATEREQUAL
54579: IFFALSE 54587
54581: LD_INT 299
54583: DOUBLE
54584: LESSEQUAL
54585: IFTRUE 54589
54587: GO 54621
54589: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
54590: LD_VAR 0 1
54594: PPUSH
54595: LD_VAR 0 2
54599: PPUSH
54600: LD_VAR 0 3
54604: PPUSH
54605: LD_VAR 0 4
54609: PPUSH
54610: LD_VAR 0 5
54614: PPUSH
54615: CALL 55483 0 5
54619: GO 54698
54621: LD_INT 300
54623: DOUBLE
54624: GREATEREQUAL
54625: IFFALSE 54633
54627: LD_INT 399
54629: DOUBLE
54630: LESSEQUAL
54631: IFTRUE 54635
54633: GO 54697
54635: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
54636: LD_VAR 0 1
54640: PPUSH
54641: LD_VAR 0 2
54645: PPUSH
54646: LD_VAR 0 3
54650: PPUSH
54651: LD_VAR 0 4
54655: PPUSH
54656: LD_VAR 0 5
54660: PPUSH
54661: LD_VAR 0 6
54665: PPUSH
54666: LD_VAR 0 7
54670: PPUSH
54671: LD_VAR 0 8
54675: PPUSH
54676: LD_VAR 0 9
54680: PPUSH
54681: LD_VAR 0 10
54685: PPUSH
54686: LD_VAR 0 11
54690: PPUSH
54691: CALL 63585 0 11
54695: GO 54698
54697: POP
// end ;
54698: PPOPN 11
54700: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
54701: LD_VAR 0 1
54705: PPUSH
54706: LD_VAR 0 2
54710: PPUSH
54711: LD_VAR 0 3
54715: PPUSH
54716: LD_VAR 0 4
54720: PPUSH
54721: LD_VAR 0 5
54725: PPUSH
54726: CALL 54783 0 5
// end ; end_of_file
54730: PPOPN 5
54732: END
// export function SOS_UnitDestroyed ( un ) ; begin
54733: LD_INT 0
54735: PPUSH
// ComRadiation ( un ) ;
54736: LD_VAR 0 1
54740: PPUSH
54741: CALL 55903 0 1
// end ;
54745: LD_VAR 0 2
54749: RET
// export function SOS_UnitKamikazed ( un ) ; begin
54750: LD_INT 0
54752: PPUSH
// ComRadiation ( un ) ;
54753: LD_VAR 0 1
54757: PPUSH
54758: CALL 55903 0 1
// end ;
54762: LD_VAR 0 2
54766: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
54767: LD_INT 0
54769: PPUSH
// end ;
54770: LD_VAR 0 4
54774: RET
// export function SOS_Command ( cmd ) ; begin
54775: LD_INT 0
54777: PPUSH
// end ;
54778: LD_VAR 0 2
54782: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
54783: LD_INT 0
54785: PPUSH
// end ;
54786: LD_VAR 0 6
54790: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
54791: LD_INT 0
54793: PPUSH
54794: PPUSH
54795: PPUSH
54796: PPUSH
54797: PPUSH
// if not vehicle or not factory then
54798: LD_VAR 0 1
54802: NOT
54803: IFTRUE 54812
54805: PUSH
54806: LD_VAR 0 2
54810: NOT
54811: OR
54812: IFFALSE 54816
// exit ;
54814: GO 55478
// weapon := GetWeapon ( vehicle ) ;
54816: LD_ADDR_VAR 0 7
54820: PUSH
54821: LD_VAR 0 1
54825: PPUSH
54826: CALL_OW 264
54830: ST_TO_ADDR
// if weapon = ar_miner then
54831: LD_VAR 0 7
54835: PUSH
54836: LD_INT 81
54838: EQUAL
54839: IFFALSE 54896
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
54841: LD_ADDR_EXP 57
54845: PUSH
54846: LD_EXP 57
54850: PPUSH
54851: LD_EXP 57
54855: PUSH
54856: LD_INT 1
54858: PLUS
54859: PPUSH
54860: LD_VAR 0 1
54864: PPUSH
54865: CALL_OW 1
54869: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54870: LD_ADDR_EXP 58
54874: PUSH
54875: LD_EXP 58
54879: PPUSH
54880: LD_EXP 58
54884: PUSH
54885: LD_INT 1
54887: PLUS
54888: PPUSH
54889: EMPTY
54890: PPUSH
54891: CALL_OW 1
54895: ST_TO_ADDR
// end ; if not factoryWaypoints then
54896: LD_EXP 61
54900: NOT
54901: IFFALSE 54905
// exit ;
54903: GO 55478
// for i := 1 to Count ( factoryWaypoints ) do
54905: LD_ADDR_VAR 0 4
54909: PUSH
54910: DOUBLE
54911: LD_INT 1
54913: DEC
54914: ST_TO_ADDR
54915: LD_EXP 61
54919: PPUSH
54920: CALL 13240 0 1
54924: PUSH
54925: FOR_TO
54926: IFFALSE 55476
// if factoryWaypoints [ i ] [ 2 ] = factory then
54928: LD_EXP 61
54932: PUSH
54933: LD_VAR 0 4
54937: ARRAY
54938: PUSH
54939: LD_INT 2
54941: ARRAY
54942: PUSH
54943: LD_VAR 0 2
54947: EQUAL
54948: IFFALSE 55474
// begin if GetControl ( vehicle ) = control_manual then
54950: LD_VAR 0 1
54954: PPUSH
54955: CALL_OW 263
54959: PUSH
54960: LD_INT 1
54962: EQUAL
54963: IFFALSE 55327
// begin driver := IsDrivenBy ( vehicle ) ;
54965: LD_ADDR_VAR 0 5
54969: PUSH
54970: LD_VAR 0 1
54974: PPUSH
54975: CALL_OW 311
54979: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
54980: LD_VAR 0 5
54984: PUSH
54985: LD_EXP 62
54989: IN
54990: IFTRUE 55004
54992: PUSH
54993: LD_VAR 0 1
54997: PUSH
54998: LD_EXP 62
55002: IN
55003: OR
55004: IFFALSE 55010
// exit ;
55006: POP
55007: POP
55008: GO 55478
// if not HasTask ( driver ) then
55010: LD_VAR 0 5
55014: PPUSH
55015: CALL_OW 314
55019: NOT
55020: IFFALSE 55325
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55022: LD_ADDR_EXP 62
55026: PUSH
55027: LD_EXP 62
55031: PPUSH
55032: LD_VAR 0 5
55036: PPUSH
55037: CALL 49216 0 2
55041: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55042: LD_ADDR_EXP 62
55046: PUSH
55047: LD_EXP 62
55051: PPUSH
55052: LD_VAR 0 1
55056: PPUSH
55057: CALL 49216 0 2
55061: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55062: LD_ADDR_VAR 0 6
55066: PUSH
55067: LD_EXP 61
55071: PUSH
55072: LD_VAR 0 4
55076: ARRAY
55077: PUSH
55078: LD_INT 3
55080: ARRAY
55081: PPUSH
55082: LD_EXP 61
55086: PUSH
55087: LD_VAR 0 4
55091: ARRAY
55092: PUSH
55093: LD_INT 4
55095: ARRAY
55096: PPUSH
55097: CALL_OW 428
55101: ST_TO_ADDR
// if hex then
55102: LD_VAR 0 6
55106: IFFALSE 55124
// ComMoveUnit ( driver , hex ) else
55108: LD_VAR 0 5
55112: PPUSH
55113: LD_VAR 0 6
55117: PPUSH
55118: CALL_OW 112
55122: GO 55208
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55124: LD_VAR 0 1
55128: PPUSH
55129: LD_EXP 61
55133: PUSH
55134: LD_VAR 0 4
55138: ARRAY
55139: PUSH
55140: LD_INT 3
55142: ARRAY
55143: PPUSH
55144: LD_EXP 61
55148: PUSH
55149: LD_VAR 0 4
55153: ARRAY
55154: PUSH
55155: LD_INT 4
55157: ARRAY
55158: PPUSH
55159: CALL_OW 297
55163: PUSH
55164: LD_INT 0
55166: GREATER
55167: IFFALSE 55208
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55169: LD_VAR 0 5
55173: PPUSH
55174: LD_EXP 61
55178: PUSH
55179: LD_VAR 0 4
55183: ARRAY
55184: PUSH
55185: LD_INT 3
55187: ARRAY
55188: PPUSH
55189: LD_EXP 61
55193: PUSH
55194: LD_VAR 0 4
55198: ARRAY
55199: PUSH
55200: LD_INT 4
55202: ARRAY
55203: PPUSH
55204: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55208: LD_VAR 0 5
55212: PPUSH
55213: CALL_OW 181
// if Multiplayer then
55217: LD_OWVAR 4
55221: IFFALSE 55270
// begin repeat wait ( 10 ) ;
55223: LD_INT 10
55225: PPUSH
55226: CALL_OW 67
// until not IsInUnit ( driver ) ;
55230: LD_VAR 0 5
55234: PPUSH
55235: CALL_OW 310
55239: NOT
55240: IFFALSE 55223
// if not HasTask ( driver ) then
55242: LD_VAR 0 5
55246: PPUSH
55247: CALL_OW 314
55251: NOT
55252: IFFALSE 55268
// ComEnterUnit ( driver , factory ) ;
55254: LD_VAR 0 5
55258: PPUSH
55259: LD_VAR 0 2
55263: PPUSH
55264: CALL_OW 120
// end else
55268: GO 55284
// AddComEnterUnit ( driver , factory ) ;
55270: LD_VAR 0 5
55274: PPUSH
55275: LD_VAR 0 2
55279: PPUSH
55280: CALL_OW 180
// wait ( 0 0$1 ) ;
55284: LD_INT 35
55286: PPUSH
55287: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
55291: LD_ADDR_EXP 62
55295: PUSH
55296: LD_EXP 62
55300: PUSH
55301: LD_VAR 0 5
55305: DIFF
55306: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
55307: LD_ADDR_EXP 62
55311: PUSH
55312: LD_EXP 62
55316: PUSH
55317: LD_VAR 0 1
55321: DIFF
55322: ST_TO_ADDR
// break ;
55323: GO 55476
// end ; end else
55325: GO 55474
// if GetControl ( vehicle ) = control_remote then
55327: LD_VAR 0 1
55331: PPUSH
55332: CALL_OW 263
55336: PUSH
55337: LD_INT 2
55339: EQUAL
55340: IFFALSE 55426
// begin wait ( 0 0$2 ) ;
55342: LD_INT 70
55344: PPUSH
55345: CALL_OW 67
// repeat wait ( 10 ) ;
55349: LD_INT 10
55351: PPUSH
55352: CALL_OW 67
// Connect ( vehicle ) ;
55356: LD_VAR 0 1
55360: PPUSH
55361: CALL 19518 0 1
// until IsControledBy ( vehicle ) ;
55365: LD_VAR 0 1
55369: PPUSH
55370: CALL_OW 312
55374: IFFALSE 55349
// wait ( 10 ) ;
55376: LD_INT 10
55378: PPUSH
55379: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55383: LD_VAR 0 1
55387: PPUSH
55388: LD_EXP 61
55392: PUSH
55393: LD_VAR 0 4
55397: ARRAY
55398: PUSH
55399: LD_INT 3
55401: ARRAY
55402: PPUSH
55403: LD_EXP 61
55407: PUSH
55408: LD_VAR 0 4
55412: ARRAY
55413: PUSH
55414: LD_INT 4
55416: ARRAY
55417: PPUSH
55418: CALL_OW 111
// break ;
55422: GO 55476
// end else
55424: GO 55474
// begin wait ( 0 0$3 ) ;
55426: LD_INT 105
55428: PPUSH
55429: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55433: LD_VAR 0 1
55437: PPUSH
55438: LD_EXP 61
55442: PUSH
55443: LD_VAR 0 4
55447: ARRAY
55448: PUSH
55449: LD_INT 3
55451: ARRAY
55452: PPUSH
55453: LD_EXP 61
55457: PUSH
55458: LD_VAR 0 4
55462: ARRAY
55463: PUSH
55464: LD_INT 4
55466: ARRAY
55467: PPUSH
55468: CALL_OW 111
// break ;
55472: GO 55476
// end ; end ;
55474: GO 54925
55476: POP
55477: POP
// end ;
55478: LD_VAR 0 3
55482: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
55483: LD_INT 0
55485: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
55486: LD_VAR 0 1
55490: PUSH
55491: LD_INT 250
55493: EQUAL
55494: IFFALSE 55511
55496: PUSH
55497: LD_VAR 0 2
55501: PPUSH
55502: CALL_OW 264
55506: PUSH
55507: LD_INT 81
55509: EQUAL
55510: AND
55511: IFFALSE 55532
// MinerPlaceMine ( unit , x , y ) ;
55513: LD_VAR 0 2
55517: PPUSH
55518: LD_VAR 0 4
55522: PPUSH
55523: LD_VAR 0 5
55527: PPUSH
55528: CALL 58878 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
55532: LD_VAR 0 1
55536: PUSH
55537: LD_INT 251
55539: EQUAL
55540: IFFALSE 55557
55542: PUSH
55543: LD_VAR 0 2
55547: PPUSH
55548: CALL_OW 264
55552: PUSH
55553: LD_INT 81
55555: EQUAL
55556: AND
55557: IFFALSE 55578
// MinerDetonateMine ( unit , x , y ) ;
55559: LD_VAR 0 2
55563: PPUSH
55564: LD_VAR 0 4
55568: PPUSH
55569: LD_VAR 0 5
55573: PPUSH
55574: CALL 59285 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
55578: LD_VAR 0 1
55582: PUSH
55583: LD_INT 252
55585: EQUAL
55586: IFFALSE 55603
55588: PUSH
55589: LD_VAR 0 2
55593: PPUSH
55594: CALL_OW 264
55598: PUSH
55599: LD_INT 81
55601: EQUAL
55602: AND
55603: IFFALSE 55624
// MinerCreateMinefield ( unit , x , y ) ;
55605: LD_VAR 0 2
55609: PPUSH
55610: LD_VAR 0 4
55614: PPUSH
55615: LD_VAR 0 5
55619: PPUSH
55620: CALL 59517 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
55624: LD_VAR 0 1
55628: PUSH
55629: LD_INT 253
55631: EQUAL
55632: IFFALSE 55649
55634: PUSH
55635: LD_VAR 0 2
55639: PPUSH
55640: CALL_OW 257
55644: PUSH
55645: LD_INT 5
55647: EQUAL
55648: AND
55649: IFFALSE 55670
// ComBinocular ( unit , x , y ) ;
55651: LD_VAR 0 2
55655: PPUSH
55656: LD_VAR 0 4
55660: PPUSH
55661: LD_VAR 0 5
55665: PPUSH
55666: CALL 59892 0 3
// if selectedUnit then
55670: LD_VAR 0 3
55674: IFFALSE 55734
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
55676: LD_VAR 0 1
55680: PUSH
55681: LD_INT 254
55683: EQUAL
55684: IFFALSE 55701
55686: PUSH
55687: LD_VAR 0 2
55691: PPUSH
55692: CALL_OW 264
55696: PUSH
55697: LD_INT 99
55699: EQUAL
55700: AND
55701: IFFALSE 55718
55703: PUSH
55704: LD_VAR 0 3
55708: PPUSH
55709: CALL_OW 263
55713: PUSH
55714: LD_INT 3
55716: EQUAL
55717: AND
55718: IFFALSE 55734
// HackDestroyVehicle ( unit , selectedUnit ) ;
55720: LD_VAR 0 2
55724: PPUSH
55725: LD_VAR 0 3
55729: PPUSH
55730: CALL 58068 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
55734: LD_VAR 0 1
55738: PUSH
55739: LD_INT 255
55741: EQUAL
55742: IFFALSE 55766
55744: PUSH
55745: LD_VAR 0 2
55749: PPUSH
55750: CALL_OW 264
55754: PUSH
55755: LD_INT 14
55757: PUSH
55758: LD_INT 53
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: IN
55765: AND
55766: IFFALSE 55784
55768: PUSH
55769: LD_VAR 0 4
55773: PPUSH
55774: LD_VAR 0 5
55778: PPUSH
55779: CALL_OW 488
55783: AND
55784: IFFALSE 55808
// CutTreeXYR ( unit , x , y , 12 ) ;
55786: LD_VAR 0 2
55790: PPUSH
55791: LD_VAR 0 4
55795: PPUSH
55796: LD_VAR 0 5
55800: PPUSH
55801: LD_INT 12
55803: PPUSH
55804: CALL 55999 0 4
// if cmd = 256 then
55808: LD_VAR 0 1
55812: PUSH
55813: LD_INT 256
55815: EQUAL
55816: IFFALSE 55837
// SetFactoryWaypoint ( unit , x , y ) ;
55818: LD_VAR 0 2
55822: PPUSH
55823: LD_VAR 0 4
55827: PPUSH
55828: LD_VAR 0 5
55832: PPUSH
55833: CALL 63593 0 3
// if cmd = 257 then
55837: LD_VAR 0 1
55841: PUSH
55842: LD_INT 257
55844: EQUAL
55845: IFFALSE 55866
// SetWarehouseGatheringPoint ( unit , x , y ) ;
55847: LD_VAR 0 2
55851: PPUSH
55852: LD_VAR 0 4
55856: PPUSH
55857: LD_VAR 0 5
55861: PPUSH
55862: CALL 64089 0 3
// if cmd = 258 then
55866: LD_VAR 0 1
55870: PUSH
55871: LD_INT 258
55873: EQUAL
55874: IFFALSE 55898
// BurnTreeXYR ( unit , x , y , 8 ) ;
55876: LD_VAR 0 2
55880: PPUSH
55881: LD_VAR 0 4
55885: PPUSH
55886: LD_VAR 0 5
55890: PPUSH
55891: LD_INT 8
55893: PPUSH
55894: CALL 56421 0 4
// end ;
55898: LD_VAR 0 6
55902: RET
// export function ComRadiation ( un ) ; var eff ; begin
55903: LD_INT 0
55905: PPUSH
55906: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
55907: LD_VAR 0 1
55911: PPUSH
55912: CALL_OW 264
55916: PUSH
55917: LD_INT 91
55919: NONEQUAL
55920: IFFALSE 55924
// exit ;
55922: GO 55994
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55924: LD_INT 68
55926: PPUSH
55927: LD_VAR 0 1
55931: PPUSH
55932: CALL_OW 255
55936: PPUSH
55937: CALL_OW 321
55941: PUSH
55942: LD_INT 2
55944: EQUAL
55945: IFFALSE 55957
// eff := 50 else
55947: LD_ADDR_VAR 0 3
55951: PUSH
55952: LD_INT 50
55954: ST_TO_ADDR
55955: GO 55965
// eff := 25 ;
55957: LD_ADDR_VAR 0 3
55961: PUSH
55962: LD_INT 25
55964: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55965: LD_VAR 0 1
55969: PPUSH
55970: CALL_OW 250
55974: PPUSH
55975: LD_VAR 0 1
55979: PPUSH
55980: CALL_OW 251
55984: PPUSH
55985: LD_VAR 0 3
55989: PPUSH
55990: CALL_OW 495
// end ;
55994: LD_VAR 0 2
55998: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
55999: LD_INT 0
56001: PPUSH
56002: PPUSH
56003: PPUSH
56004: PPUSH
56005: PPUSH
56006: PPUSH
56007: PPUSH
56008: PPUSH
56009: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56010: LD_VAR 0 1
56014: PPUSH
56015: CALL_OW 302
56019: NOT
56020: IFTRUE 56039
56022: PUSH
56023: LD_VAR 0 2
56027: PPUSH
56028: LD_VAR 0 3
56032: PPUSH
56033: CALL_OW 488
56037: NOT
56038: OR
56039: IFTRUE 56048
56041: PUSH
56042: LD_VAR 0 4
56046: NOT
56047: OR
56048: IFFALSE 56052
// exit ;
56050: GO 56416
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
56052: LD_VAR 0 1
56056: PPUSH
56057: CALL_OW 437
56061: PPUSH
56062: CALL 13240 0 1
56066: PUSH
56067: LD_INT 10
56069: GREATER
56070: IFFALSE 56074
// exit ;
56072: GO 56416
// list := [ ] ;
56074: LD_ADDR_VAR 0 13
56078: PUSH
56079: EMPTY
56080: ST_TO_ADDR
// if x - r < 0 then
56081: LD_VAR 0 2
56085: PUSH
56086: LD_VAR 0 4
56090: MINUS
56091: PUSH
56092: LD_INT 0
56094: LESS
56095: IFFALSE 56107
// min_x := 0 else
56097: LD_ADDR_VAR 0 7
56101: PUSH
56102: LD_INT 0
56104: ST_TO_ADDR
56105: GO 56123
// min_x := x - r ;
56107: LD_ADDR_VAR 0 7
56111: PUSH
56112: LD_VAR 0 2
56116: PUSH
56117: LD_VAR 0 4
56121: MINUS
56122: ST_TO_ADDR
// if y - r < 0 then
56123: LD_VAR 0 3
56127: PUSH
56128: LD_VAR 0 4
56132: MINUS
56133: PUSH
56134: LD_INT 0
56136: LESS
56137: IFFALSE 56149
// min_y := 0 else
56139: LD_ADDR_VAR 0 8
56143: PUSH
56144: LD_INT 0
56146: ST_TO_ADDR
56147: GO 56165
// min_y := y - r ;
56149: LD_ADDR_VAR 0 8
56153: PUSH
56154: LD_VAR 0 3
56158: PUSH
56159: LD_VAR 0 4
56163: MINUS
56164: ST_TO_ADDR
// max_x := x + r ;
56165: LD_ADDR_VAR 0 9
56169: PUSH
56170: LD_VAR 0 2
56174: PUSH
56175: LD_VAR 0 4
56179: PLUS
56180: ST_TO_ADDR
// max_y := y + r ;
56181: LD_ADDR_VAR 0 10
56185: PUSH
56186: LD_VAR 0 3
56190: PUSH
56191: LD_VAR 0 4
56195: PLUS
56196: ST_TO_ADDR
// for _x = min_x to max_x do
56197: LD_ADDR_VAR 0 11
56201: PUSH
56202: DOUBLE
56203: LD_VAR 0 7
56207: DEC
56208: ST_TO_ADDR
56209: LD_VAR 0 9
56213: PUSH
56214: FOR_TO
56215: IFFALSE 56334
// for _y = min_y to max_y do
56217: LD_ADDR_VAR 0 12
56221: PUSH
56222: DOUBLE
56223: LD_VAR 0 8
56227: DEC
56228: ST_TO_ADDR
56229: LD_VAR 0 10
56233: PUSH
56234: FOR_TO
56235: IFFALSE 56330
// begin if not ValidHex ( _x , _y ) then
56237: LD_VAR 0 11
56241: PPUSH
56242: LD_VAR 0 12
56246: PPUSH
56247: CALL_OW 488
56251: NOT
56252: IFFALSE 56256
// continue ;
56254: GO 56234
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56256: LD_VAR 0 11
56260: PPUSH
56261: LD_VAR 0 12
56265: PPUSH
56266: CALL_OW 351
56270: IFFALSE 56288
56272: PUSH
56273: LD_VAR 0 11
56277: PPUSH
56278: LD_VAR 0 12
56282: PPUSH
56283: CALL_OW 554
56287: AND
56288: IFFALSE 56328
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56290: LD_ADDR_VAR 0 13
56294: PUSH
56295: LD_VAR 0 13
56299: PPUSH
56300: LD_VAR 0 13
56304: PUSH
56305: LD_INT 1
56307: PLUS
56308: PPUSH
56309: LD_VAR 0 11
56313: PUSH
56314: LD_VAR 0 12
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PPUSH
56323: CALL_OW 2
56327: ST_TO_ADDR
// end ;
56328: GO 56234
56330: POP
56331: POP
56332: GO 56214
56334: POP
56335: POP
// if not list then
56336: LD_VAR 0 13
56340: NOT
56341: IFFALSE 56345
// exit ;
56343: GO 56416
// for i in list do
56345: LD_ADDR_VAR 0 6
56349: PUSH
56350: LD_VAR 0 13
56354: PUSH
56355: FOR_IN
56356: IFFALSE 56414
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
56358: LD_VAR 0 1
56362: PPUSH
56363: LD_STRING M
56365: PUSH
56366: LD_VAR 0 6
56370: PUSH
56371: LD_INT 1
56373: ARRAY
56374: PUSH
56375: LD_VAR 0 6
56379: PUSH
56380: LD_INT 2
56382: ARRAY
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: PUSH
56405: EMPTY
56406: LIST
56407: PPUSH
56408: CALL_OW 447
56412: GO 56355
56414: POP
56415: POP
// end ;
56416: LD_VAR 0 5
56420: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
56421: LD_INT 0
56423: PPUSH
56424: PPUSH
56425: PPUSH
56426: PPUSH
56427: PPUSH
56428: PPUSH
56429: PPUSH
56430: PPUSH
56431: PPUSH
56432: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
56433: LD_VAR 0 1
56437: PPUSH
56438: CALL_OW 302
56442: NOT
56443: IFTRUE 56462
56445: PUSH
56446: LD_VAR 0 2
56450: PPUSH
56451: LD_VAR 0 3
56455: PPUSH
56456: CALL_OW 488
56460: NOT
56461: OR
56462: IFTRUE 56471
56464: PUSH
56465: LD_VAR 0 4
56469: NOT
56470: OR
56471: IFFALSE 56475
// exit ;
56473: GO 57014
// if Count ( GetTaskList ( flame ) ) > 10 then
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL_OW 437
56484: PPUSH
56485: CALL 13240 0 1
56489: PUSH
56490: LD_INT 10
56492: GREATER
56493: IFFALSE 56497
// exit ;
56495: GO 57014
// list := [ ] ;
56497: LD_ADDR_VAR 0 13
56501: PUSH
56502: EMPTY
56503: ST_TO_ADDR
// if x - r < 0 then
56504: LD_VAR 0 2
56508: PUSH
56509: LD_VAR 0 4
56513: MINUS
56514: PUSH
56515: LD_INT 0
56517: LESS
56518: IFFALSE 56530
// min_x := 0 else
56520: LD_ADDR_VAR 0 7
56524: PUSH
56525: LD_INT 0
56527: ST_TO_ADDR
56528: GO 56546
// min_x := x - r ;
56530: LD_ADDR_VAR 0 7
56534: PUSH
56535: LD_VAR 0 2
56539: PUSH
56540: LD_VAR 0 4
56544: MINUS
56545: ST_TO_ADDR
// if y - r < 0 then
56546: LD_VAR 0 3
56550: PUSH
56551: LD_VAR 0 4
56555: MINUS
56556: PUSH
56557: LD_INT 0
56559: LESS
56560: IFFALSE 56572
// min_y := 0 else
56562: LD_ADDR_VAR 0 8
56566: PUSH
56567: LD_INT 0
56569: ST_TO_ADDR
56570: GO 56588
// min_y := y - r ;
56572: LD_ADDR_VAR 0 8
56576: PUSH
56577: LD_VAR 0 3
56581: PUSH
56582: LD_VAR 0 4
56586: MINUS
56587: ST_TO_ADDR
// max_x := x + r ;
56588: LD_ADDR_VAR 0 9
56592: PUSH
56593: LD_VAR 0 2
56597: PUSH
56598: LD_VAR 0 4
56602: PLUS
56603: ST_TO_ADDR
// max_y := y + r ;
56604: LD_ADDR_VAR 0 10
56608: PUSH
56609: LD_VAR 0 3
56613: PUSH
56614: LD_VAR 0 4
56618: PLUS
56619: ST_TO_ADDR
// for _x = min_x to max_x do
56620: LD_ADDR_VAR 0 11
56624: PUSH
56625: DOUBLE
56626: LD_VAR 0 7
56630: DEC
56631: ST_TO_ADDR
56632: LD_VAR 0 9
56636: PUSH
56637: FOR_TO
56638: IFFALSE 56757
// for _y = min_y to max_y do
56640: LD_ADDR_VAR 0 12
56644: PUSH
56645: DOUBLE
56646: LD_VAR 0 8
56650: DEC
56651: ST_TO_ADDR
56652: LD_VAR 0 10
56656: PUSH
56657: FOR_TO
56658: IFFALSE 56753
// begin if not ValidHex ( _x , _y ) then
56660: LD_VAR 0 11
56664: PPUSH
56665: LD_VAR 0 12
56669: PPUSH
56670: CALL_OW 488
56674: NOT
56675: IFFALSE 56679
// continue ;
56677: GO 56657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56679: LD_VAR 0 11
56683: PPUSH
56684: LD_VAR 0 12
56688: PPUSH
56689: CALL_OW 351
56693: IFFALSE 56711
56695: PUSH
56696: LD_VAR 0 11
56700: PPUSH
56701: LD_VAR 0 12
56705: PPUSH
56706: CALL_OW 554
56710: AND
56711: IFFALSE 56751
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56713: LD_ADDR_VAR 0 13
56717: PUSH
56718: LD_VAR 0 13
56722: PPUSH
56723: LD_VAR 0 13
56727: PUSH
56728: LD_INT 1
56730: PLUS
56731: PPUSH
56732: LD_VAR 0 11
56736: PUSH
56737: LD_VAR 0 12
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PPUSH
56746: CALL_OW 2
56750: ST_TO_ADDR
// end ;
56751: GO 56657
56753: POP
56754: POP
56755: GO 56637
56757: POP
56758: POP
// if not list then
56759: LD_VAR 0 13
56763: NOT
56764: IFFALSE 56768
// exit ;
56766: GO 57014
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
56768: LD_ADDR_VAR 0 13
56772: PUSH
56773: LD_VAR 0 1
56777: PPUSH
56778: LD_VAR 0 13
56782: PPUSH
56783: LD_INT 1
56785: PPUSH
56786: LD_INT 1
56788: PPUSH
56789: CALL 16646 0 4
56793: ST_TO_ADDR
// ComStop ( flame ) ;
56794: LD_VAR 0 1
56798: PPUSH
56799: CALL_OW 141
// for i in list do
56803: LD_ADDR_VAR 0 6
56807: PUSH
56808: LD_VAR 0 13
56812: PUSH
56813: FOR_IN
56814: IFFALSE 56845
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
56816: LD_VAR 0 1
56820: PPUSH
56821: LD_VAR 0 6
56825: PUSH
56826: LD_INT 1
56828: ARRAY
56829: PPUSH
56830: LD_VAR 0 6
56834: PUSH
56835: LD_INT 2
56837: ARRAY
56838: PPUSH
56839: CALL_OW 176
56843: GO 56813
56845: POP
56846: POP
// repeat wait ( 0 0$1 ) ;
56847: LD_INT 35
56849: PPUSH
56850: CALL_OW 67
// task := GetTaskList ( flame ) ;
56854: LD_ADDR_VAR 0 14
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: CALL_OW 437
56868: ST_TO_ADDR
// if not task then
56869: LD_VAR 0 14
56873: NOT
56874: IFFALSE 56878
// exit ;
56876: GO 57014
// if task [ 1 ] [ 1 ] <> | then
56878: LD_VAR 0 14
56882: PUSH
56883: LD_INT 1
56885: ARRAY
56886: PUSH
56887: LD_INT 1
56889: ARRAY
56890: PUSH
56891: LD_STRING |
56893: NONEQUAL
56894: IFFALSE 56898
// exit ;
56896: GO 57014
// _x := task [ 1 ] [ 2 ] ;
56898: LD_ADDR_VAR 0 11
56902: PUSH
56903: LD_VAR 0 14
56907: PUSH
56908: LD_INT 1
56910: ARRAY
56911: PUSH
56912: LD_INT 2
56914: ARRAY
56915: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
56916: LD_ADDR_VAR 0 12
56920: PUSH
56921: LD_VAR 0 14
56925: PUSH
56926: LD_INT 1
56928: ARRAY
56929: PUSH
56930: LD_INT 3
56932: ARRAY
56933: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
56934: LD_VAR 0 11
56938: PPUSH
56939: LD_VAR 0 12
56943: PPUSH
56944: CALL_OW 351
56948: NOT
56949: IFTRUE 56968
56951: PUSH
56952: LD_VAR 0 11
56956: PPUSH
56957: LD_VAR 0 12
56961: PPUSH
56962: CALL_OW 554
56966: NOT
56967: OR
56968: IFFALSE 57002
// begin task := Delete ( task , 1 ) ;
56970: LD_ADDR_VAR 0 14
56974: PUSH
56975: LD_VAR 0 14
56979: PPUSH
56980: LD_INT 1
56982: PPUSH
56983: CALL_OW 3
56987: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
56988: LD_VAR 0 1
56992: PPUSH
56993: LD_VAR 0 14
56997: PPUSH
56998: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57002: LD_VAR 0 1
57006: PPUSH
57007: CALL_OW 314
57011: NOT
57012: IFFALSE 56847
// end ;
57014: LD_VAR 0 5
57018: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57019: LD_EXP 50
57023: NOT
57024: IFFALSE 57074
57026: GO 57028
57028: DISABLE
// begin initHack := true ;
57029: LD_ADDR_EXP 50
57033: PUSH
57034: LD_INT 1
57036: ST_TO_ADDR
// hackTanks := [ ] ;
57037: LD_ADDR_EXP 51
57041: PUSH
57042: EMPTY
57043: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57044: LD_ADDR_EXP 52
57048: PUSH
57049: EMPTY
57050: ST_TO_ADDR
// hackLimit := 3 ;
57051: LD_ADDR_EXP 53
57055: PUSH
57056: LD_INT 3
57058: ST_TO_ADDR
// hackDist := 12 ;
57059: LD_ADDR_EXP 54
57063: PUSH
57064: LD_INT 12
57066: ST_TO_ADDR
// hackCounter := [ ] ;
57067: LD_ADDR_EXP 55
57071: PUSH
57072: EMPTY
57073: ST_TO_ADDR
// end ;
57074: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57075: LD_EXP 50
57079: IFFALSE 57097
57081: PUSH
57082: LD_INT 34
57084: PUSH
57085: LD_INT 99
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PPUSH
57092: CALL_OW 69
57096: AND
57097: IFFALSE 57350
57099: GO 57101
57101: DISABLE
57102: LD_INT 0
57104: PPUSH
57105: PPUSH
// begin enable ;
57106: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57107: LD_ADDR_VAR 0 1
57111: PUSH
57112: LD_INT 34
57114: PUSH
57115: LD_INT 99
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PPUSH
57122: CALL_OW 69
57126: PUSH
57127: FOR_IN
57128: IFFALSE 57348
// begin if not i in hackTanks then
57130: LD_VAR 0 1
57134: PUSH
57135: LD_EXP 51
57139: IN
57140: NOT
57141: IFFALSE 57224
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57143: LD_ADDR_EXP 51
57147: PUSH
57148: LD_EXP 51
57152: PPUSH
57153: LD_EXP 51
57157: PUSH
57158: LD_INT 1
57160: PLUS
57161: PPUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL_OW 1
57171: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57172: LD_ADDR_EXP 52
57176: PUSH
57177: LD_EXP 52
57181: PPUSH
57182: LD_EXP 52
57186: PUSH
57187: LD_INT 1
57189: PLUS
57190: PPUSH
57191: EMPTY
57192: PPUSH
57193: CALL_OW 1
57197: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57198: LD_ADDR_EXP 55
57202: PUSH
57203: LD_EXP 55
57207: PPUSH
57208: LD_EXP 55
57212: PUSH
57213: LD_INT 1
57215: PLUS
57216: PPUSH
57217: EMPTY
57218: PPUSH
57219: CALL_OW 1
57223: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57224: LD_VAR 0 1
57228: PPUSH
57229: CALL_OW 302
57233: NOT
57234: IFFALSE 57247
// begin HackUnlinkAll ( i ) ;
57236: LD_VAR 0 1
57240: PPUSH
57241: CALL 57353 0 1
// continue ;
57245: GO 57127
// end ; HackCheckCapturedStatus ( i ) ;
57247: LD_VAR 0 1
57251: PPUSH
57252: CALL 57798 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57256: LD_ADDR_VAR 0 2
57260: PUSH
57261: LD_INT 81
57263: PUSH
57264: LD_VAR 0 1
57268: PPUSH
57269: CALL_OW 255
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 33
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 91
57290: PUSH
57291: LD_VAR 0 1
57295: PUSH
57296: LD_EXP 54
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 50
57308: PUSH
57309: EMPTY
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: PPUSH
57318: CALL_OW 69
57322: ST_TO_ADDR
// if not tmp then
57323: LD_VAR 0 2
57327: NOT
57328: IFFALSE 57332
// continue ;
57330: GO 57127
// HackLink ( i , tmp ) ;
57332: LD_VAR 0 1
57336: PPUSH
57337: LD_VAR 0 2
57341: PPUSH
57342: CALL 57489 0 2
// end ;
57346: GO 57127
57348: POP
57349: POP
// end ;
57350: PPOPN 2
57352: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57353: LD_INT 0
57355: PPUSH
57356: PPUSH
57357: PPUSH
// if not hack in hackTanks then
57358: LD_VAR 0 1
57362: PUSH
57363: LD_EXP 51
57367: IN
57368: NOT
57369: IFFALSE 57373
// exit ;
57371: GO 57484
// index := GetElementIndex ( hackTanks , hack ) ;
57373: LD_ADDR_VAR 0 4
57377: PUSH
57378: LD_EXP 51
57382: PPUSH
57383: LD_VAR 0 1
57387: PPUSH
57388: CALL 15941 0 2
57392: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57393: LD_EXP 52
57397: PUSH
57398: LD_VAR 0 4
57402: ARRAY
57403: IFFALSE 57484
// begin for i in hackTanksCaptured [ index ] do
57405: LD_ADDR_VAR 0 3
57409: PUSH
57410: LD_EXP 52
57414: PUSH
57415: LD_VAR 0 4
57419: ARRAY
57420: PUSH
57421: FOR_IN
57422: IFFALSE 57448
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57424: LD_VAR 0 3
57428: PUSH
57429: LD_INT 1
57431: ARRAY
57432: PPUSH
57433: LD_VAR 0 3
57437: PUSH
57438: LD_INT 2
57440: ARRAY
57441: PPUSH
57442: CALL_OW 235
57446: GO 57421
57448: POP
57449: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57450: LD_ADDR_EXP 52
57454: PUSH
57455: LD_EXP 52
57459: PPUSH
57460: LD_VAR 0 4
57464: PPUSH
57465: EMPTY
57466: PPUSH
57467: CALL_OW 1
57471: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57472: LD_VAR 0 1
57476: PPUSH
57477: LD_INT 0
57479: PPUSH
57480: CALL_OW 505
// end ; end ;
57484: LD_VAR 0 2
57488: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57489: LD_INT 0
57491: PPUSH
57492: PPUSH
57493: PPUSH
// if not hack in hackTanks or not vehicles then
57494: LD_VAR 0 1
57498: PUSH
57499: LD_EXP 51
57503: IN
57504: NOT
57505: IFTRUE 57514
57507: PUSH
57508: LD_VAR 0 2
57512: NOT
57513: OR
57514: IFFALSE 57518
// exit ;
57516: GO 57793
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57518: LD_ADDR_VAR 0 2
57522: PUSH
57523: LD_VAR 0 1
57527: PPUSH
57528: LD_VAR 0 2
57532: PPUSH
57533: LD_INT 1
57535: PPUSH
57536: LD_INT 1
57538: PPUSH
57539: CALL 16593 0 4
57543: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57544: LD_ADDR_VAR 0 5
57548: PUSH
57549: LD_EXP 51
57553: PPUSH
57554: LD_VAR 0 1
57558: PPUSH
57559: CALL 15941 0 2
57563: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57564: LD_EXP 52
57568: PUSH
57569: LD_VAR 0 5
57573: ARRAY
57574: PUSH
57575: LD_EXP 53
57579: LESS
57580: IFFALSE 57769
// begin for i := 1 to vehicles do
57582: LD_ADDR_VAR 0 4
57586: PUSH
57587: DOUBLE
57588: LD_INT 1
57590: DEC
57591: ST_TO_ADDR
57592: LD_VAR 0 2
57596: PUSH
57597: FOR_TO
57598: IFFALSE 57767
// begin if hackTanksCaptured [ index ] = hackLimit then
57600: LD_EXP 52
57604: PUSH
57605: LD_VAR 0 5
57609: ARRAY
57610: PUSH
57611: LD_EXP 53
57615: EQUAL
57616: IFFALSE 57620
// break ;
57618: GO 57767
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57620: LD_ADDR_EXP 55
57624: PUSH
57625: LD_EXP 55
57629: PPUSH
57630: LD_VAR 0 5
57634: PPUSH
57635: LD_EXP 55
57639: PUSH
57640: LD_VAR 0 5
57644: ARRAY
57645: PUSH
57646: LD_INT 1
57648: PLUS
57649: PPUSH
57650: CALL_OW 1
57654: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57655: LD_ADDR_EXP 52
57659: PUSH
57660: LD_EXP 52
57664: PPUSH
57665: LD_VAR 0 5
57669: PUSH
57670: LD_EXP 52
57674: PUSH
57675: LD_VAR 0 5
57679: ARRAY
57680: PUSH
57681: LD_INT 1
57683: PLUS
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PPUSH
57689: LD_VAR 0 2
57693: PUSH
57694: LD_VAR 0 4
57698: ARRAY
57699: PUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_VAR 0 4
57709: ARRAY
57710: PPUSH
57711: CALL_OW 255
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PPUSH
57720: CALL 16158 0 3
57724: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57725: LD_VAR 0 2
57729: PUSH
57730: LD_VAR 0 4
57734: ARRAY
57735: PPUSH
57736: LD_VAR 0 1
57740: PPUSH
57741: CALL_OW 255
57745: PPUSH
57746: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57750: LD_VAR 0 2
57754: PUSH
57755: LD_VAR 0 4
57759: ARRAY
57760: PPUSH
57761: CALL_OW 141
// end ;
57765: GO 57597
57767: POP
57768: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57769: LD_VAR 0 1
57773: PPUSH
57774: LD_EXP 52
57778: PUSH
57779: LD_VAR 0 5
57783: ARRAY
57784: PUSH
57785: LD_INT 0
57787: PLUS
57788: PPUSH
57789: CALL_OW 505
// end ;
57793: LD_VAR 0 3
57797: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57798: LD_INT 0
57800: PPUSH
57801: PPUSH
57802: PPUSH
57803: PPUSH
// if not hack in hackTanks then
57804: LD_VAR 0 1
57808: PUSH
57809: LD_EXP 51
57813: IN
57814: NOT
57815: IFFALSE 57819
// exit ;
57817: GO 58063
// index := GetElementIndex ( hackTanks , hack ) ;
57819: LD_ADDR_VAR 0 4
57823: PUSH
57824: LD_EXP 51
57828: PPUSH
57829: LD_VAR 0 1
57833: PPUSH
57834: CALL 15941 0 2
57838: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57839: LD_ADDR_VAR 0 3
57843: PUSH
57844: DOUBLE
57845: LD_EXP 52
57849: PUSH
57850: LD_VAR 0 4
57854: ARRAY
57855: INC
57856: ST_TO_ADDR
57857: LD_INT 1
57859: PUSH
57860: FOR_DOWNTO
57861: IFFALSE 58037
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57863: LD_ADDR_VAR 0 5
57867: PUSH
57868: LD_EXP 52
57872: PUSH
57873: LD_VAR 0 4
57877: ARRAY
57878: PUSH
57879: LD_VAR 0 3
57883: ARRAY
57884: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57885: LD_VAR 0 5
57889: PUSH
57890: LD_INT 1
57892: ARRAY
57893: PPUSH
57894: CALL_OW 302
57898: NOT
57899: IFTRUE 57927
57901: PUSH
57902: LD_VAR 0 5
57906: PUSH
57907: LD_INT 1
57909: ARRAY
57910: PPUSH
57911: CALL_OW 255
57915: PUSH
57916: LD_VAR 0 1
57920: PPUSH
57921: CALL_OW 255
57925: NONEQUAL
57926: OR
57927: IFFALSE 58035
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
57929: LD_VAR 0 5
57933: PUSH
57934: LD_INT 1
57936: ARRAY
57937: PPUSH
57938: CALL_OW 305
57942: IFFALSE 57970
57944: PUSH
57945: LD_VAR 0 5
57949: PUSH
57950: LD_INT 1
57952: ARRAY
57953: PPUSH
57954: CALL_OW 255
57958: PUSH
57959: LD_VAR 0 1
57963: PPUSH
57964: CALL_OW 255
57968: EQUAL
57969: AND
57970: IFFALSE 57994
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
57972: LD_VAR 0 5
57976: PUSH
57977: LD_INT 1
57979: ARRAY
57980: PPUSH
57981: LD_VAR 0 5
57985: PUSH
57986: LD_INT 2
57988: ARRAY
57989: PPUSH
57990: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
57994: LD_ADDR_EXP 52
57998: PUSH
57999: LD_EXP 52
58003: PPUSH
58004: LD_VAR 0 4
58008: PPUSH
58009: LD_EXP 52
58013: PUSH
58014: LD_VAR 0 4
58018: ARRAY
58019: PPUSH
58020: LD_VAR 0 3
58024: PPUSH
58025: CALL_OW 3
58029: PPUSH
58030: CALL_OW 1
58034: ST_TO_ADDR
// end ; end ;
58035: GO 57860
58037: POP
58038: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58039: LD_VAR 0 1
58043: PPUSH
58044: LD_EXP 52
58048: PUSH
58049: LD_VAR 0 4
58053: ARRAY
58054: PUSH
58055: LD_INT 0
58057: PLUS
58058: PPUSH
58059: CALL_OW 505
// end ;
58063: LD_VAR 0 2
58067: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58068: LD_INT 0
58070: PPUSH
58071: PPUSH
58072: PPUSH
58073: PPUSH
// if not hack in hackTanks then
58074: LD_VAR 0 1
58078: PUSH
58079: LD_EXP 51
58083: IN
58084: NOT
58085: IFFALSE 58089
// exit ;
58087: GO 58174
// index := GetElementIndex ( hackTanks , hack ) ;
58089: LD_ADDR_VAR 0 5
58093: PUSH
58094: LD_EXP 51
58098: PPUSH
58099: LD_VAR 0 1
58103: PPUSH
58104: CALL 15941 0 2
58108: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58109: LD_ADDR_VAR 0 4
58113: PUSH
58114: DOUBLE
58115: LD_INT 1
58117: DEC
58118: ST_TO_ADDR
58119: LD_EXP 52
58123: PUSH
58124: LD_VAR 0 5
58128: ARRAY
58129: PUSH
58130: FOR_TO
58131: IFFALSE 58172
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58133: LD_EXP 52
58137: PUSH
58138: LD_VAR 0 5
58142: ARRAY
58143: PUSH
58144: LD_VAR 0 4
58148: ARRAY
58149: PUSH
58150: LD_INT 1
58152: ARRAY
58153: PUSH
58154: LD_VAR 0 2
58158: EQUAL
58159: IFFALSE 58170
// KillUnit ( vehicle ) ;
58161: LD_VAR 0 2
58165: PPUSH
58166: CALL_OW 66
58170: GO 58130
58172: POP
58173: POP
// end ;
58174: LD_VAR 0 3
58178: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
58179: LD_EXP 56
58183: NOT
58184: IFFALSE 58317
58186: GO 58188
58188: DISABLE
58189: LD_INT 0
58191: PPUSH
// begin initMiner := true ;
58192: LD_ADDR_EXP 56
58196: PUSH
58197: LD_INT 1
58199: ST_TO_ADDR
// minersList := [ ] ;
58200: LD_ADDR_EXP 57
58204: PUSH
58205: EMPTY
58206: ST_TO_ADDR
// minerMinesList := [ ] ;
58207: LD_ADDR_EXP 58
58211: PUSH
58212: EMPTY
58213: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
58214: LD_ADDR_EXP 59
58218: PUSH
58219: LD_INT 10
58221: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58222: LD_ADDR_VAR 0 1
58226: PUSH
58227: LD_INT 34
58229: PUSH
58230: LD_INT 81
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PPUSH
58237: CALL_OW 69
58241: PUSH
58242: FOR_IN
58243: IFFALSE 58315
// begin if not i in minersList then
58245: LD_VAR 0 1
58249: PUSH
58250: LD_EXP 57
58254: IN
58255: NOT
58256: IFFALSE 58313
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58258: LD_ADDR_EXP 57
58262: PUSH
58263: LD_EXP 57
58267: PPUSH
58268: LD_EXP 57
58272: PUSH
58273: LD_INT 1
58275: PLUS
58276: PPUSH
58277: LD_VAR 0 1
58281: PPUSH
58282: CALL_OW 1
58286: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58287: LD_ADDR_EXP 58
58291: PUSH
58292: LD_EXP 58
58296: PPUSH
58297: LD_EXP 58
58301: PUSH
58302: LD_INT 1
58304: PLUS
58305: PPUSH
58306: EMPTY
58307: PPUSH
58308: CALL_OW 1
58312: ST_TO_ADDR
// end end ;
58313: GO 58242
58315: POP
58316: POP
// end ;
58317: PPOPN 1
58319: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
58320: LD_EXP 56
58324: IFFALSE 58355
58326: PUSH
58327: LD_EXP 58
58331: PPUSH
58332: CALL 13240 0 1
58336: IFTRUE 58354
58338: PUSH
58339: LD_INT 34
58341: PUSH
58342: LD_INT 81
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PPUSH
58349: CALL_OW 69
58353: OR
58354: AND
58355: IFFALSE 58875
58357: GO 58359
58359: DISABLE
58360: LD_INT 0
58362: PPUSH
58363: PPUSH
58364: PPUSH
58365: PPUSH
// begin enable ;
58366: ENABLE
// for i := minerMinesList downto 1 do
58367: LD_ADDR_VAR 0 1
58371: PUSH
58372: DOUBLE
58373: LD_EXP 58
58377: INC
58378: ST_TO_ADDR
58379: LD_INT 1
58381: PUSH
58382: FOR_DOWNTO
58383: IFFALSE 58873
// begin side := GetSide ( minersList [ i ] ) ;
58385: LD_ADDR_VAR 0 3
58389: PUSH
58390: LD_EXP 57
58394: PUSH
58395: LD_VAR 0 1
58399: ARRAY
58400: PPUSH
58401: CALL_OW 255
58405: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
58406: LD_EXP 57
58410: PUSH
58411: LD_VAR 0 1
58415: ARRAY
58416: PPUSH
58417: CALL_OW 300
58421: IFFALSE 58442
58423: PUSH
58424: LD_VAR 0 3
58428: PUSH
58429: LD_OWVAR 2
58433: PUSH
58434: LD_INT 9
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: IN
58441: AND
58442: IFFALSE 58475
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
58444: LD_EXP 57
58448: PUSH
58449: LD_VAR 0 1
58453: ARRAY
58454: PPUSH
58455: LD_EXP 58
58459: PUSH
58460: LD_VAR 0 1
58464: ARRAY
58465: PPUSH
58466: CALL 13240 0 1
58470: PPUSH
58471: CALL_OW 505
// if not minerMinesList [ i ] then
58475: LD_EXP 58
58479: PUSH
58480: LD_VAR 0 1
58484: ARRAY
58485: NOT
58486: IFFALSE 58490
// continue ;
58488: GO 58382
// for j := minerMinesList [ i ] downto 1 do
58490: LD_ADDR_VAR 0 2
58494: PUSH
58495: DOUBLE
58496: LD_EXP 58
58500: PUSH
58501: LD_VAR 0 1
58505: ARRAY
58506: INC
58507: ST_TO_ADDR
58508: LD_INT 1
58510: PUSH
58511: FOR_DOWNTO
58512: IFFALSE 58869
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
58514: LD_EXP 57
58518: PUSH
58519: LD_VAR 0 1
58523: ARRAY
58524: PPUSH
58525: CALL_OW 301
58529: IFTRUE 58549
58531: PUSH
58532: LD_EXP 57
58536: PUSH
58537: LD_VAR 0 1
58541: ARRAY
58542: PPUSH
58543: CALL_OW 305
58547: NOT
58548: OR
58549: IFFALSE 58640
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58551: LD_EXP 58
58555: PUSH
58556: LD_VAR 0 1
58560: ARRAY
58561: PUSH
58562: LD_VAR 0 2
58566: ARRAY
58567: PUSH
58568: LD_INT 1
58570: ARRAY
58571: PPUSH
58572: LD_EXP 58
58576: PUSH
58577: LD_VAR 0 1
58581: ARRAY
58582: PUSH
58583: LD_VAR 0 2
58587: ARRAY
58588: PUSH
58589: LD_INT 2
58591: ARRAY
58592: PPUSH
58593: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58597: LD_ADDR_EXP 58
58601: PUSH
58602: LD_EXP 58
58606: PPUSH
58607: LD_VAR 0 1
58611: PPUSH
58612: LD_EXP 58
58616: PUSH
58617: LD_VAR 0 1
58621: ARRAY
58622: PPUSH
58623: LD_VAR 0 2
58627: PPUSH
58628: CALL_OW 3
58632: PPUSH
58633: CALL_OW 1
58637: ST_TO_ADDR
// continue ;
58638: GO 58511
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58640: LD_ADDR_VAR 0 4
58644: PUSH
58645: LD_EXP 58
58649: PUSH
58650: LD_VAR 0 1
58654: ARRAY
58655: PUSH
58656: LD_VAR 0 2
58660: ARRAY
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PPUSH
58666: LD_EXP 58
58670: PUSH
58671: LD_VAR 0 1
58675: ARRAY
58676: PUSH
58677: LD_VAR 0 2
58681: ARRAY
58682: PUSH
58683: LD_INT 2
58685: ARRAY
58686: PPUSH
58687: CALL_OW 428
58691: ST_TO_ADDR
// if not tmp then
58692: LD_VAR 0 4
58696: NOT
58697: IFFALSE 58701
// continue ;
58699: GO 58511
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58701: LD_VAR 0 4
58705: PUSH
58706: LD_INT 81
58708: PUSH
58709: LD_VAR 0 3
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PPUSH
58718: CALL_OW 69
58722: IN
58723: IFFALSE 58773
58725: PUSH
58726: LD_EXP 58
58730: PUSH
58731: LD_VAR 0 1
58735: ARRAY
58736: PUSH
58737: LD_VAR 0 2
58741: ARRAY
58742: PUSH
58743: LD_INT 1
58745: ARRAY
58746: PPUSH
58747: LD_EXP 58
58751: PUSH
58752: LD_VAR 0 1
58756: ARRAY
58757: PUSH
58758: LD_VAR 0 2
58762: ARRAY
58763: PUSH
58764: LD_INT 2
58766: ARRAY
58767: PPUSH
58768: CALL_OW 458
58772: AND
58773: IFFALSE 58867
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58775: LD_EXP 58
58779: PUSH
58780: LD_VAR 0 1
58784: ARRAY
58785: PUSH
58786: LD_VAR 0 2
58790: ARRAY
58791: PUSH
58792: LD_INT 1
58794: ARRAY
58795: PPUSH
58796: LD_EXP 58
58800: PUSH
58801: LD_VAR 0 1
58805: ARRAY
58806: PUSH
58807: LD_VAR 0 2
58811: ARRAY
58812: PUSH
58813: LD_INT 2
58815: ARRAY
58816: PPUSH
58817: LD_VAR 0 3
58821: PPUSH
58822: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58826: LD_ADDR_EXP 58
58830: PUSH
58831: LD_EXP 58
58835: PPUSH
58836: LD_VAR 0 1
58840: PPUSH
58841: LD_EXP 58
58845: PUSH
58846: LD_VAR 0 1
58850: ARRAY
58851: PPUSH
58852: LD_VAR 0 2
58856: PPUSH
58857: CALL_OW 3
58861: PPUSH
58862: CALL_OW 1
58866: ST_TO_ADDR
// end ; end ;
58867: GO 58511
58869: POP
58870: POP
// end ;
58871: GO 58382
58873: POP
58874: POP
// end ;
58875: PPOPN 4
58877: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
58878: LD_INT 0
58880: PPUSH
58881: PPUSH
58882: PPUSH
58883: PPUSH
// result := false ;
58884: LD_ADDR_VAR 0 4
58888: PUSH
58889: LD_INT 0
58891: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 264
58901: PUSH
58902: LD_INT 81
58904: EQUAL
58905: NOT
58906: IFFALSE 58910
// exit ;
58908: GO 59280
// side := GetSide ( unit ) ;
58910: LD_ADDR_VAR 0 6
58914: PUSH
58915: LD_VAR 0 1
58919: PPUSH
58920: CALL_OW 255
58924: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
58925: LD_ADDR_VAR 0 5
58929: PUSH
58930: LD_EXP 57
58934: PPUSH
58935: LD_VAR 0 1
58939: PPUSH
58940: CALL 15941 0 2
58944: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58945: LD_EXP 58
58949: PUSH
58950: LD_VAR 0 5
58954: ARRAY
58955: PUSH
58956: LD_EXP 59
58960: GREATEREQUAL
58961: IFFALSE 58965
// exit ;
58963: GO 59280
// ComMoveXY ( unit , x , y ) ;
58965: LD_VAR 0 1
58969: PPUSH
58970: LD_VAR 0 2
58974: PPUSH
58975: LD_VAR 0 3
58979: PPUSH
58980: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58984: LD_INT 35
58986: PPUSH
58987: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58991: LD_VAR 0 1
58995: PPUSH
58996: LD_VAR 0 2
59000: PPUSH
59001: LD_VAR 0 3
59005: PPUSH
59006: CALL 47997 0 3
59010: NOT
59011: IFFALSE 59024
59013: PUSH
59014: LD_VAR 0 1
59018: PPUSH
59019: CALL_OW 314
59023: AND
59024: IFFALSE 59028
// exit ;
59026: GO 59280
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59028: LD_VAR 0 2
59032: PPUSH
59033: LD_VAR 0 3
59037: PPUSH
59038: CALL_OW 428
59042: PUSH
59043: LD_VAR 0 1
59047: EQUAL
59048: IFFALSE 59062
59050: PUSH
59051: LD_VAR 0 1
59055: PPUSH
59056: CALL_OW 314
59060: NOT
59061: AND
59062: IFFALSE 58984
// if MineAtPos ( x , y ) then
59064: LD_VAR 0 2
59068: PPUSH
59069: LD_VAR 0 3
59073: PPUSH
59074: CALL_OW 458
59078: IFFALSE 59082
// exit ;
59080: GO 59280
// if your_side = side then
59082: LD_OWVAR 2
59086: PUSH
59087: LD_VAR 0 6
59091: EQUAL
59092: IFFALSE 59111
// PlaySoundXY ( x , y , PlantMine ) ;
59094: LD_VAR 0 2
59098: PPUSH
59099: LD_VAR 0 3
59103: PPUSH
59104: LD_STRING PlantMine
59106: PPUSH
59107: CALL_OW 366
// repeat wait ( 1 ) ;
59111: LD_INT 1
59113: PPUSH
59114: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
59118: LD_VAR 0 2
59122: PPUSH
59123: LD_VAR 0 3
59127: PPUSH
59128: LD_VAR 0 6
59132: PPUSH
59133: LD_INT 0
59135: PPUSH
59136: CALL_OW 454
59140: IFFALSE 59111
// if MineAtPos ( x , y ) then
59142: LD_VAR 0 2
59146: PPUSH
59147: LD_VAR 0 3
59151: PPUSH
59152: CALL_OW 458
59156: IFFALSE 59272
// begin for i in minerMinesList [ index ] do
59158: LD_ADDR_VAR 0 7
59162: PUSH
59163: LD_EXP 58
59167: PUSH
59168: LD_VAR 0 5
59172: ARRAY
59173: PUSH
59174: FOR_IN
59175: IFFALSE 59217
// if i [ 1 ] = x and i [ 2 ] = y then
59177: LD_VAR 0 7
59181: PUSH
59182: LD_INT 1
59184: ARRAY
59185: PUSH
59186: LD_VAR 0 2
59190: EQUAL
59191: IFFALSE 59209
59193: PUSH
59194: LD_VAR 0 7
59198: PUSH
59199: LD_INT 2
59201: ARRAY
59202: PUSH
59203: LD_VAR 0 3
59207: EQUAL
59208: AND
59209: IFFALSE 59215
// exit ;
59211: POP
59212: POP
59213: GO 59280
59215: GO 59174
59217: POP
59218: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59219: LD_ADDR_EXP 58
59223: PUSH
59224: LD_EXP 58
59228: PPUSH
59229: LD_VAR 0 5
59233: PUSH
59234: LD_EXP 58
59238: PUSH
59239: LD_VAR 0 5
59243: ARRAY
59244: PUSH
59245: LD_INT 1
59247: PLUS
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PPUSH
59253: LD_VAR 0 2
59257: PUSH
59258: LD_VAR 0 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PPUSH
59267: CALL 16158 0 3
59271: ST_TO_ADDR
// end ; result := true ;
59272: LD_ADDR_VAR 0 4
59276: PUSH
59277: LD_INT 1
59279: ST_TO_ADDR
// end ;
59280: LD_VAR 0 4
59284: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59285: LD_INT 0
59287: PPUSH
59288: PPUSH
59289: PPUSH
// if not unit in minersList then
59290: LD_VAR 0 1
59294: PUSH
59295: LD_EXP 57
59299: IN
59300: NOT
59301: IFFALSE 59305
// exit ;
59303: GO 59512
// index := GetElementIndex ( minersList , unit ) ;
59305: LD_ADDR_VAR 0 6
59309: PUSH
59310: LD_EXP 57
59314: PPUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL 15941 0 2
59324: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59325: LD_ADDR_VAR 0 5
59329: PUSH
59330: DOUBLE
59331: LD_EXP 58
59335: PUSH
59336: LD_VAR 0 6
59340: ARRAY
59341: INC
59342: ST_TO_ADDR
59343: LD_INT 1
59345: PUSH
59346: FOR_DOWNTO
59347: IFFALSE 59510
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59349: LD_EXP 58
59353: PUSH
59354: LD_VAR 0 6
59358: ARRAY
59359: PUSH
59360: LD_VAR 0 5
59364: ARRAY
59365: PUSH
59366: LD_INT 1
59368: ARRAY
59369: PPUSH
59370: LD_EXP 58
59374: PUSH
59375: LD_VAR 0 6
59379: ARRAY
59380: PUSH
59381: LD_VAR 0 5
59385: ARRAY
59386: PUSH
59387: LD_INT 2
59389: ARRAY
59390: PPUSH
59391: LD_VAR 0 2
59395: PPUSH
59396: LD_VAR 0 3
59400: PPUSH
59401: CALL_OW 298
59405: PUSH
59406: LD_INT 6
59408: LESS
59409: IFFALSE 59508
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59411: LD_EXP 58
59415: PUSH
59416: LD_VAR 0 6
59420: ARRAY
59421: PUSH
59422: LD_VAR 0 5
59426: ARRAY
59427: PUSH
59428: LD_INT 1
59430: ARRAY
59431: PPUSH
59432: LD_EXP 58
59436: PUSH
59437: LD_VAR 0 6
59441: ARRAY
59442: PUSH
59443: LD_VAR 0 5
59447: ARRAY
59448: PUSH
59449: LD_INT 2
59451: ARRAY
59452: PPUSH
59453: LD_VAR 0 1
59457: PPUSH
59458: CALL_OW 255
59462: PPUSH
59463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59467: LD_ADDR_EXP 58
59471: PUSH
59472: LD_EXP 58
59476: PPUSH
59477: LD_VAR 0 6
59481: PPUSH
59482: LD_EXP 58
59486: PUSH
59487: LD_VAR 0 6
59491: ARRAY
59492: PPUSH
59493: LD_VAR 0 5
59497: PPUSH
59498: CALL_OW 3
59502: PPUSH
59503: CALL_OW 1
59507: ST_TO_ADDR
// end ; end ;
59508: GO 59346
59510: POP
59511: POP
// end ;
59512: LD_VAR 0 4
59516: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59517: LD_INT 0
59519: PPUSH
59520: PPUSH
59521: PPUSH
59522: PPUSH
59523: PPUSH
59524: PPUSH
59525: PPUSH
59526: PPUSH
59527: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59528: LD_VAR 0 1
59532: PPUSH
59533: CALL_OW 264
59537: PUSH
59538: LD_INT 81
59540: EQUAL
59541: NOT
59542: IFTRUE 59557
59544: PUSH
59545: LD_VAR 0 1
59549: PUSH
59550: LD_EXP 57
59554: IN
59555: NOT
59556: OR
59557: IFFALSE 59561
// exit ;
59559: GO 59887
// index := GetElementIndex ( minersList , unit ) ;
59561: LD_ADDR_VAR 0 6
59565: PUSH
59566: LD_EXP 57
59570: PPUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: CALL 15941 0 2
59580: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59581: LD_ADDR_VAR 0 8
59585: PUSH
59586: LD_EXP 59
59590: PUSH
59591: LD_EXP 58
59595: PUSH
59596: LD_VAR 0 6
59600: ARRAY
59601: MINUS
59602: ST_TO_ADDR
// if not minesFreeAmount then
59603: LD_VAR 0 8
59607: NOT
59608: IFFALSE 59612
// exit ;
59610: GO 59887
// tmp := [ ] ;
59612: LD_ADDR_VAR 0 7
59616: PUSH
59617: EMPTY
59618: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59619: LD_ADDR_VAR 0 5
59623: PUSH
59624: DOUBLE
59625: LD_INT 1
59627: DEC
59628: ST_TO_ADDR
59629: LD_VAR 0 8
59633: PUSH
59634: FOR_TO
59635: IFFALSE 59834
// begin _d := rand ( 0 , 5 ) ;
59637: LD_ADDR_VAR 0 11
59641: PUSH
59642: LD_INT 0
59644: PPUSH
59645: LD_INT 5
59647: PPUSH
59648: CALL_OW 12
59652: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59653: LD_ADDR_VAR 0 12
59657: PUSH
59658: LD_INT 2
59660: PPUSH
59661: LD_INT 6
59663: PPUSH
59664: CALL_OW 12
59668: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59669: LD_ADDR_VAR 0 9
59673: PUSH
59674: LD_VAR 0 2
59678: PPUSH
59679: LD_VAR 0 11
59683: PPUSH
59684: LD_VAR 0 12
59688: PPUSH
59689: CALL_OW 272
59693: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59694: LD_ADDR_VAR 0 10
59698: PUSH
59699: LD_VAR 0 3
59703: PPUSH
59704: LD_VAR 0 11
59708: PPUSH
59709: LD_VAR 0 12
59713: PPUSH
59714: CALL_OW 273
59718: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59719: LD_VAR 0 9
59723: PPUSH
59724: LD_VAR 0 10
59728: PPUSH
59729: CALL_OW 488
59733: IFFALSE 59757
59735: PUSH
59736: LD_VAR 0 9
59740: PUSH
59741: LD_VAR 0 10
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_VAR 0 7
59754: IN
59755: NOT
59756: AND
59757: IFFALSE 59776
59759: PUSH
59760: LD_VAR 0 9
59764: PPUSH
59765: LD_VAR 0 10
59769: PPUSH
59770: CALL_OW 458
59774: NOT
59775: AND
59776: IFFALSE 59818
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59778: LD_ADDR_VAR 0 7
59782: PUSH
59783: LD_VAR 0 7
59787: PPUSH
59788: LD_VAR 0 7
59792: PUSH
59793: LD_INT 1
59795: PLUS
59796: PPUSH
59797: LD_VAR 0 9
59801: PUSH
59802: LD_VAR 0 10
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PPUSH
59811: CALL_OW 1
59815: ST_TO_ADDR
59816: GO 59832
// i := i - 1 ;
59818: LD_ADDR_VAR 0 5
59822: PUSH
59823: LD_VAR 0 5
59827: PUSH
59828: LD_INT 1
59830: MINUS
59831: ST_TO_ADDR
// end ;
59832: GO 59634
59834: POP
59835: POP
// for i in tmp do
59836: LD_ADDR_VAR 0 5
59840: PUSH
59841: LD_VAR 0 7
59845: PUSH
59846: FOR_IN
59847: IFFALSE 59885
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59849: LD_VAR 0 1
59853: PPUSH
59854: LD_VAR 0 5
59858: PUSH
59859: LD_INT 1
59861: ARRAY
59862: PPUSH
59863: LD_VAR 0 5
59867: PUSH
59868: LD_INT 2
59870: ARRAY
59871: PPUSH
59872: CALL 58878 0 3
59876: NOT
59877: IFFALSE 59883
// exit ;
59879: POP
59880: POP
59881: GO 59887
59883: GO 59846
59885: POP
59886: POP
// end ;
59887: LD_VAR 0 4
59891: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
59892: LD_INT 0
59894: PPUSH
59895: PPUSH
59896: PPUSH
59897: PPUSH
59898: PPUSH
59899: PPUSH
59900: PPUSH
59901: PPUSH
59902: PPUSH
// if GetClass ( unit ) <> class_sniper then
59903: LD_VAR 0 1
59907: PPUSH
59908: CALL_OW 257
59912: PUSH
59913: LD_INT 5
59915: NONEQUAL
59916: IFFALSE 59920
// exit ;
59918: GO 60390
// dist := 8 ;
59920: LD_ADDR_VAR 0 5
59924: PUSH
59925: LD_INT 8
59927: ST_TO_ADDR
// viewRange := 12 ;
59928: LD_ADDR_VAR 0 8
59932: PUSH
59933: LD_INT 12
59935: ST_TO_ADDR
// side := GetSide ( unit ) ;
59936: LD_ADDR_VAR 0 6
59940: PUSH
59941: LD_VAR 0 1
59945: PPUSH
59946: CALL_OW 255
59950: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59951: LD_INT 61
59953: PPUSH
59954: LD_VAR 0 6
59958: PPUSH
59959: CALL_OW 321
59963: PUSH
59964: LD_INT 2
59966: EQUAL
59967: IFFALSE 59977
// viewRange := 16 ;
59969: LD_ADDR_VAR 0 8
59973: PUSH
59974: LD_INT 16
59976: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59977: LD_VAR 0 1
59981: PPUSH
59982: LD_VAR 0 2
59986: PPUSH
59987: LD_VAR 0 3
59991: PPUSH
59992: CALL_OW 297
59996: PUSH
59997: LD_VAR 0 5
60001: GREATER
60002: IFFALSE 60081
// begin ComMoveXY ( unit , x , y ) ;
60004: LD_VAR 0 1
60008: PPUSH
60009: LD_VAR 0 2
60013: PPUSH
60014: LD_VAR 0 3
60018: PPUSH
60019: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60023: LD_INT 35
60025: PPUSH
60026: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60030: LD_VAR 0 1
60034: PPUSH
60035: LD_VAR 0 2
60039: PPUSH
60040: LD_VAR 0 3
60044: PPUSH
60045: CALL 47997 0 3
60049: NOT
60050: IFFALSE 60054
// exit ;
60052: GO 60390
// until GetDistUnitXY ( unit , x , y ) < dist ;
60054: LD_VAR 0 1
60058: PPUSH
60059: LD_VAR 0 2
60063: PPUSH
60064: LD_VAR 0 3
60068: PPUSH
60069: CALL_OW 297
60073: PUSH
60074: LD_VAR 0 5
60078: LESS
60079: IFFALSE 60023
// end ; ComTurnXY ( unit , x , y ) ;
60081: LD_VAR 0 1
60085: PPUSH
60086: LD_VAR 0 2
60090: PPUSH
60091: LD_VAR 0 3
60095: PPUSH
60096: CALL_OW 118
// repeat if Multiplayer then
60100: LD_OWVAR 4
60104: IFFALSE 60115
// wait ( 35 ) else
60106: LD_INT 35
60108: PPUSH
60109: CALL_OW 67
60113: GO 60122
// wait ( 5 ) ;
60115: LD_INT 5
60117: PPUSH
60118: CALL_OW 67
// _d := GetDir ( unit ) ;
60122: LD_ADDR_VAR 0 11
60126: PUSH
60127: LD_VAR 0 1
60131: PPUSH
60132: CALL_OW 254
60136: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60137: LD_ADDR_VAR 0 7
60141: PUSH
60142: LD_VAR 0 1
60146: PPUSH
60147: CALL_OW 250
60151: PPUSH
60152: LD_VAR 0 1
60156: PPUSH
60157: CALL_OW 251
60161: PPUSH
60162: LD_VAR 0 2
60166: PPUSH
60167: LD_VAR 0 3
60171: PPUSH
60172: CALL 50633 0 4
60176: ST_TO_ADDR
// until dir = _d ;
60177: LD_VAR 0 7
60181: PUSH
60182: LD_VAR 0 11
60186: EQUAL
60187: IFFALSE 60100
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60189: LD_ADDR_VAR 0 9
60193: PUSH
60194: LD_VAR 0 1
60198: PPUSH
60199: CALL_OW 250
60203: PPUSH
60204: LD_VAR 0 7
60208: PPUSH
60209: LD_VAR 0 5
60213: PPUSH
60214: CALL_OW 272
60218: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60219: LD_ADDR_VAR 0 10
60223: PUSH
60224: LD_VAR 0 1
60228: PPUSH
60229: CALL_OW 251
60233: PPUSH
60234: LD_VAR 0 7
60238: PPUSH
60239: LD_VAR 0 5
60243: PPUSH
60244: CALL_OW 273
60248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60249: LD_VAR 0 9
60253: PPUSH
60254: LD_VAR 0 10
60258: PPUSH
60259: CALL_OW 488
60263: NOT
60264: IFFALSE 60268
// exit ;
60266: GO 60390
// ComAnimCustom ( unit , 1 ) ;
60268: LD_VAR 0 1
60272: PPUSH
60273: LD_INT 1
60275: PPUSH
60276: CALL_OW 592
// p := 0 ;
60280: LD_ADDR_VAR 0 12
60284: PUSH
60285: LD_INT 0
60287: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60288: LD_VAR 0 9
60292: PPUSH
60293: LD_VAR 0 10
60297: PPUSH
60298: LD_VAR 0 6
60302: PPUSH
60303: LD_VAR 0 8
60307: PPUSH
60308: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60312: LD_INT 35
60314: PPUSH
60315: CALL_OW 67
// p := Inc ( p ) ;
60319: LD_ADDR_VAR 0 12
60323: PUSH
60324: LD_VAR 0 12
60328: PPUSH
60329: CALL 50589 0 1
60333: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60334: LD_VAR 0 12
60338: PUSH
60339: LD_INT 3
60341: EQUAL
60342: IFTRUE 60356
60344: PUSH
60345: LD_VAR 0 1
60349: PPUSH
60350: CALL_OW 302
60354: NOT
60355: OR
60356: IFTRUE 60369
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: CALL_OW 301
60368: OR
60369: IFFALSE 60312
// RemoveSeeing ( _x , _y , side ) ;
60371: LD_VAR 0 9
60375: PPUSH
60376: LD_VAR 0 10
60380: PPUSH
60381: LD_VAR 0 6
60385: PPUSH
60386: CALL_OW 331
// end ;
60390: LD_VAR 0 4
60394: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
60395: LD_INT 0
60397: PPUSH
60398: PPUSH
60399: PPUSH
60400: PPUSH
60401: PPUSH
60402: PPUSH
60403: PPUSH
60404: PPUSH
60405: PPUSH
60406: PPUSH
60407: PPUSH
// if not unit then
60408: LD_VAR 0 1
60412: NOT
60413: IFFALSE 60417
// exit ;
60415: GO 60688
// side := GetSide ( unit ) ;
60417: LD_ADDR_VAR 0 3
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: CALL_OW 255
60431: ST_TO_ADDR
// x := GetX ( unit ) ;
60432: LD_ADDR_VAR 0 5
60436: PUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: CALL_OW 250
60446: ST_TO_ADDR
// y := GetY ( unit ) ;
60447: LD_ADDR_VAR 0 6
60451: PUSH
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 251
60461: ST_TO_ADDR
// r := 8 ;
60462: LD_ADDR_VAR 0 4
60466: PUSH
60467: LD_INT 8
60469: ST_TO_ADDR
// if x - r < 0 then
60470: LD_VAR 0 5
60474: PUSH
60475: LD_VAR 0 4
60479: MINUS
60480: PUSH
60481: LD_INT 0
60483: LESS
60484: IFFALSE 60496
// min_x := 0 else
60486: LD_ADDR_VAR 0 7
60490: PUSH
60491: LD_INT 0
60493: ST_TO_ADDR
60494: GO 60512
// min_x := x - r ;
60496: LD_ADDR_VAR 0 7
60500: PUSH
60501: LD_VAR 0 5
60505: PUSH
60506: LD_VAR 0 4
60510: MINUS
60511: ST_TO_ADDR
// if y - r < 0 then
60512: LD_VAR 0 6
60516: PUSH
60517: LD_VAR 0 4
60521: MINUS
60522: PUSH
60523: LD_INT 0
60525: LESS
60526: IFFALSE 60538
// min_y := 0 else
60528: LD_ADDR_VAR 0 8
60532: PUSH
60533: LD_INT 0
60535: ST_TO_ADDR
60536: GO 60554
// min_y := y - r ;
60538: LD_ADDR_VAR 0 8
60542: PUSH
60543: LD_VAR 0 6
60547: PUSH
60548: LD_VAR 0 4
60552: MINUS
60553: ST_TO_ADDR
// max_x := x + r ;
60554: LD_ADDR_VAR 0 9
60558: PUSH
60559: LD_VAR 0 5
60563: PUSH
60564: LD_VAR 0 4
60568: PLUS
60569: ST_TO_ADDR
// max_y := y + r ;
60570: LD_ADDR_VAR 0 10
60574: PUSH
60575: LD_VAR 0 6
60579: PUSH
60580: LD_VAR 0 4
60584: PLUS
60585: ST_TO_ADDR
// for _x = min_x to max_x do
60586: LD_ADDR_VAR 0 11
60590: PUSH
60591: DOUBLE
60592: LD_VAR 0 7
60596: DEC
60597: ST_TO_ADDR
60598: LD_VAR 0 9
60602: PUSH
60603: FOR_TO
60604: IFFALSE 60686
// for _y = min_y to max_y do
60606: LD_ADDR_VAR 0 12
60610: PUSH
60611: DOUBLE
60612: LD_VAR 0 8
60616: DEC
60617: ST_TO_ADDR
60618: LD_VAR 0 10
60622: PUSH
60623: FOR_TO
60624: IFFALSE 60682
// begin if not ValidHex ( _x , _y ) then
60626: LD_VAR 0 11
60630: PPUSH
60631: LD_VAR 0 12
60635: PPUSH
60636: CALL_OW 488
60640: NOT
60641: IFFALSE 60645
// continue ;
60643: GO 60623
// if MineAtPos ( _x , _y ) then
60645: LD_VAR 0 11
60649: PPUSH
60650: LD_VAR 0 12
60654: PPUSH
60655: CALL_OW 458
60659: IFFALSE 60680
// ViewMineAtPos ( _x , _y , side ) ;
60661: LD_VAR 0 11
60665: PPUSH
60666: LD_VAR 0 12
60670: PPUSH
60671: LD_VAR 0 3
60675: PPUSH
60676: CALL_OW 457
// end ;
60680: GO 60623
60682: POP
60683: POP
60684: GO 60603
60686: POP
60687: POP
// end ;
60688: LD_VAR 0 2
60692: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
60693: LD_INT 0
60695: PPUSH
60696: PPUSH
60697: PPUSH
60698: PPUSH
60699: PPUSH
60700: PPUSH
60701: PPUSH
// if not units then
60702: LD_VAR 0 1
60706: NOT
60707: IFFALSE 60711
// exit ;
60709: GO 61175
// scaners := [ ] ;
60711: LD_ADDR_VAR 0 6
60715: PUSH
60716: EMPTY
60717: ST_TO_ADDR
// for i in units do
60718: LD_ADDR_VAR 0 3
60722: PUSH
60723: LD_VAR 0 1
60727: PUSH
60728: FOR_IN
60729: IFFALSE 60886
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
60731: LD_VAR 0 3
60735: PPUSH
60736: CALL_OW 264
60740: PUSH
60741: LD_INT 11
60743: NONEQUAL
60744: IFTRUE 60758
60746: PUSH
60747: LD_VAR 0 3
60751: PPUSH
60752: CALL_OW 302
60756: NOT
60757: OR
60758: IFTRUE 60775
60760: PUSH
60761: LD_VAR 0 3
60765: PPUSH
60766: CALL_OW 110
60770: PUSH
60771: LD_INT 502
60773: EQUAL
60774: OR
60775: IFFALSE 60779
// continue ;
60777: GO 60728
// ComStop ( i ) ;
60779: LD_VAR 0 3
60783: PPUSH
60784: CALL_OW 141
// x := GetX ( i ) ;
60788: LD_ADDR_VAR 0 4
60792: PUSH
60793: LD_VAR 0 3
60797: PPUSH
60798: CALL_OW 250
60802: ST_TO_ADDR
// y := GetY ( i ) ;
60803: LD_ADDR_VAR 0 5
60807: PUSH
60808: LD_VAR 0 3
60812: PPUSH
60813: CALL_OW 251
60817: ST_TO_ADDR
// if GetSide ( i ) = your_side then
60818: LD_VAR 0 3
60822: PPUSH
60823: CALL_OW 255
60827: PUSH
60828: LD_OWVAR 2
60832: EQUAL
60833: IFFALSE 60852
// PlaySoundXY ( x , y , mineDetector ) ;
60835: LD_VAR 0 4
60839: PPUSH
60840: LD_VAR 0 5
60844: PPUSH
60845: LD_STRING mineDetector
60847: PPUSH
60848: CALL_OW 366
// scaners := Join ( scaners , i ) ;
60852: LD_ADDR_VAR 0 6
60856: PUSH
60857: LD_VAR 0 6
60861: PPUSH
60862: LD_VAR 0 3
60866: PPUSH
60867: CALL 49216 0 2
60871: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
60872: LD_VAR 0 3
60876: PPUSH
60877: LD_INT 502
60879: PPUSH
60880: CALL_OW 109
// end ;
60884: GO 60728
60886: POP
60887: POP
// if not scaners then
60888: LD_VAR 0 6
60892: NOT
60893: IFFALSE 60897
// exit ;
60895: GO 61175
// wait ( 3 ) ;
60897: LD_INT 3
60899: PPUSH
60900: CALL_OW 67
// timer := 6 ;
60904: LD_ADDR_VAR 0 7
60908: PUSH
60909: LD_INT 6
60911: ST_TO_ADDR
// repeat for i in scaners do
60912: LD_ADDR_VAR 0 3
60916: PUSH
60917: LD_VAR 0 6
60921: PUSH
60922: FOR_IN
60923: IFFALSE 61073
// begin side := GetSide ( i ) ;
60925: LD_ADDR_VAR 0 8
60929: PUSH
60930: LD_VAR 0 3
60934: PPUSH
60935: CALL_OW 255
60939: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
60940: LD_VAR 0 3
60944: PPUSH
60945: CALL_OW 302
60949: NOT
60950: IFTRUE 60963
60952: PUSH
60953: LD_VAR 0 3
60957: PPUSH
60958: CALL_OW 314
60962: OR
60963: IFTRUE 60994
60965: PUSH
60966: LD_VAR 0 3
60970: PPUSH
60971: CALL_OW 263
60975: PUSH
60976: LD_INT 1
60978: EQUAL
60979: IFFALSE 60993
60981: PUSH
60982: LD_VAR 0 3
60986: PPUSH
60987: CALL_OW 311
60991: NOT
60992: AND
60993: OR
60994: IFFALSE 61038
// begin SetUnitDisplayNumber ( i , 0 ) ;
60996: LD_VAR 0 3
61000: PPUSH
61001: LD_INT 0
61003: PPUSH
61004: CALL_OW 505
// SetTag ( i , 0 ) ;
61008: LD_VAR 0 3
61012: PPUSH
61013: LD_INT 0
61015: PPUSH
61016: CALL_OW 109
// scaners := scaners diff i ;
61020: LD_ADDR_VAR 0 6
61024: PUSH
61025: LD_VAR 0 6
61029: PUSH
61030: LD_VAR 0 3
61034: DIFF
61035: ST_TO_ADDR
// continue ;
61036: GO 60922
// end ; if side in [ your_side , 9 ] then
61038: LD_VAR 0 8
61042: PUSH
61043: LD_OWVAR 2
61047: PUSH
61048: LD_INT 9
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: IN
61055: IFFALSE 61071
// SetUnitDisplayNumber ( i , timer ) ;
61057: LD_VAR 0 3
61061: PPUSH
61062: LD_VAR 0 7
61066: PPUSH
61067: CALL_OW 505
// end ;
61071: GO 60922
61073: POP
61074: POP
// if not scaners then
61075: LD_VAR 0 6
61079: NOT
61080: IFFALSE 61084
// exit ;
61082: GO 61175
// timer := Dec ( timer ) ;
61084: LD_ADDR_VAR 0 7
61088: PUSH
61089: LD_VAR 0 7
61093: PPUSH
61094: CALL 50611 0 1
61098: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61099: LD_INT 35
61101: PPUSH
61102: CALL_OW 67
// until timer = 0 ;
61106: LD_VAR 0 7
61110: PUSH
61111: LD_INT 0
61113: EQUAL
61114: IFFALSE 60912
// if not scaners then
61116: LD_VAR 0 6
61120: NOT
61121: IFFALSE 61125
// exit ;
61123: GO 61175
// for i in scaners do
61125: LD_ADDR_VAR 0 3
61129: PUSH
61130: LD_VAR 0 6
61134: PUSH
61135: FOR_IN
61136: IFFALSE 61173
// begin SetUnitDisplayNumber ( i , 0 ) ;
61138: LD_VAR 0 3
61142: PPUSH
61143: LD_INT 0
61145: PPUSH
61146: CALL_OW 505
// SetTag ( i , 0 ) ;
61150: LD_VAR 0 3
61154: PPUSH
61155: LD_INT 0
61157: PPUSH
61158: CALL_OW 109
// RevealDetectorMine ( i ) ;
61162: LD_VAR 0 3
61166: PPUSH
61167: CALL 60395 0 1
// end ;
61171: GO 61135
61173: POP
61174: POP
// end ;
61175: LD_VAR 0 2
61179: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
61180: LD_INT 0
61182: PPUSH
// if p1 = mine_detector_mode then
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 103
61190: EQUAL
61191: IFFALSE 61202
// DetectMine ( units ) ;
61193: LD_VAR 0 1
61197: PPUSH
61198: CALL 60693 0 1
// end ; end_of_file
61202: LD_VAR 0 7
61206: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
61207: LD_EXP 39
61211: IFFALSE 61552
61213: GO 61215
61215: DISABLE
61216: LD_INT 0
61218: PPUSH
61219: PPUSH
61220: PPUSH
// begin mpKingPoints := [ ] ;
61221: LD_ADDR_EXP 60
61225: PUSH
61226: EMPTY
61227: ST_TO_ADDR
// if mpTeamGame then
61228: LD_EXP 11
61232: IFFALSE 61286
// begin for i := 1 to Count ( mpTeams ) do
61234: LD_ADDR_VAR 0 1
61238: PUSH
61239: DOUBLE
61240: LD_INT 1
61242: DEC
61243: ST_TO_ADDR
61244: LD_EXP 10
61248: PPUSH
61249: CALL 13240 0 1
61253: PUSH
61254: FOR_TO
61255: IFFALSE 61282
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61257: LD_ADDR_EXP 60
61261: PUSH
61262: LD_EXP 60
61266: PPUSH
61267: LD_VAR 0 1
61271: PPUSH
61272: LD_INT 0
61274: PPUSH
61275: CALL_OW 1
61279: ST_TO_ADDR
61280: GO 61254
61282: POP
61283: POP
// end else
61284: GO 61329
// begin for i := 1 to 8 do
61286: LD_ADDR_VAR 0 1
61290: PUSH
61291: DOUBLE
61292: LD_INT 1
61294: DEC
61295: ST_TO_ADDR
61296: LD_INT 8
61298: PUSH
61299: FOR_TO
61300: IFFALSE 61327
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
61302: LD_ADDR_EXP 60
61306: PUSH
61307: LD_EXP 60
61311: PPUSH
61312: LD_VAR 0 1
61316: PPUSH
61317: LD_INT 0
61319: PPUSH
61320: CALL_OW 1
61324: ST_TO_ADDR
61325: GO 61299
61327: POP
61328: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
61329: LD_ADDR_VAR 0 3
61333: PUSH
61334: LD_EXP 2
61338: PPUSH
61339: LD_INT 0
61341: PPUSH
61342: CALL_OW 517
61346: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61347: LD_ADDR_VAR 0 1
61351: PUSH
61352: DOUBLE
61353: LD_INT 1
61355: DEC
61356: ST_TO_ADDR
61357: LD_VAR 0 3
61361: PUSH
61362: LD_INT 1
61364: ARRAY
61365: PUSH
61366: FOR_TO
61367: IFFALSE 61434
// for j := 1 to 8 do
61369: LD_ADDR_VAR 0 2
61373: PUSH
61374: DOUBLE
61375: LD_INT 1
61377: DEC
61378: ST_TO_ADDR
61379: LD_INT 8
61381: PUSH
61382: FOR_TO
61383: IFFALSE 61430
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
61385: LD_VAR 0 3
61389: PUSH
61390: LD_INT 1
61392: ARRAY
61393: PUSH
61394: LD_VAR 0 1
61398: ARRAY
61399: PPUSH
61400: LD_VAR 0 3
61404: PUSH
61405: LD_INT 2
61407: ARRAY
61408: PUSH
61409: LD_VAR 0 1
61413: ARRAY
61414: PPUSH
61415: LD_VAR 0 2
61419: PPUSH
61420: LD_INT 12
61422: NEG
61423: PPUSH
61424: CALL_OW 330
61428: GO 61382
61430: POP
61431: POP
61432: GO 61366
61434: POP
61435: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
61436: LD_EXP 34
61440: PPUSH
61441: LD_INT 1
61443: PPUSH
61444: CALL_OW 424
// UpdateCounter ;
61448: CALL 62058 0 0
// repeat wait ( 0 0$1 ) ;
61452: LD_INT 35
61454: PPUSH
61455: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61459: LD_ADDR_VAR 0 3
61463: PUSH
61464: LD_EXP 34
61468: PPUSH
61469: LD_INT 3
61471: PUSH
61472: LD_INT 57
61474: PUSH
61475: EMPTY
61476: LIST
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 50
61484: PUSH
61485: EMPTY
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 30
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 30
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: LIST
61520: PPUSH
61521: CALL_OW 70
61525: ST_TO_ADDR
// if not tmp then
61526: LD_VAR 0 3
61530: NOT
61531: IFFALSE 61535
// continue ;
61533: GO 61452
// AddPoints ( tmp ) ;
61535: LD_VAR 0 3
61539: PPUSH
61540: CALL 61736 0 1
// UpdateCounter ;
61544: CALL 62058 0 0
// until false ;
61548: LD_INT 0
61550: IFFALSE 61452
// end ;
61552: PPOPN 3
61554: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
61555: LD_EXP 39
61559: IFFALSE 61567
61561: PUSH
61562: LD_EXP 37
61566: AND
61567: IFFALSE 61733
61569: GO 61571
61571: DISABLE
61572: LD_INT 0
61574: PPUSH
61575: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_EXP 2
61585: PPUSH
61586: LD_INT 0
61588: PPUSH
61589: CALL_OW 517
61593: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
61594: LD_ADDR_VAR 0 1
61598: PUSH
61599: DOUBLE
61600: LD_INT 1
61602: DEC
61603: ST_TO_ADDR
61604: LD_VAR 0 2
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PUSH
61613: FOR_TO
61614: IFFALSE 61655
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
61616: LD_VAR 0 2
61620: PUSH
61621: LD_INT 1
61623: ARRAY
61624: PUSH
61625: LD_VAR 0 1
61629: ARRAY
61630: PPUSH
61631: LD_VAR 0 2
61635: PUSH
61636: LD_INT 2
61638: ARRAY
61639: PUSH
61640: LD_VAR 0 1
61644: ARRAY
61645: PPUSH
61646: LD_INT 125
61648: PPUSH
61649: CALL_OW 495
61653: GO 61613
61655: POP
61656: POP
// repeat wait ( mpEmissions ) ;
61657: LD_EXP 37
61661: PPUSH
61662: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
61666: LD_ADDR_VAR 0 1
61670: PUSH
61671: DOUBLE
61672: LD_INT 1
61674: DEC
61675: ST_TO_ADDR
61676: LD_VAR 0 2
61680: PUSH
61681: LD_INT 1
61683: ARRAY
61684: PUSH
61685: FOR_TO
61686: IFFALSE 61727
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
61688: LD_VAR 0 2
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PUSH
61697: LD_VAR 0 1
61701: ARRAY
61702: PPUSH
61703: LD_VAR 0 2
61707: PUSH
61708: LD_INT 2
61710: ARRAY
61711: PUSH
61712: LD_VAR 0 1
61716: ARRAY
61717: PPUSH
61718: LD_INT 15
61720: PPUSH
61721: CALL_OW 495
61725: GO 61685
61727: POP
61728: POP
// until false ;
61729: LD_INT 0
61731: IFFALSE 61657
// end ;
61733: PPOPN 2
61735: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
61736: LD_INT 0
61738: PPUSH
61739: PPUSH
61740: PPUSH
61741: PPUSH
61742: PPUSH
// if mpTeamGame then
61743: LD_EXP 11
61747: IFFALSE 61944
// begin first := depots [ 1 ] ;
61749: LD_ADDR_VAR 0 4
61753: PUSH
61754: LD_VAR 0 1
61758: PUSH
61759: LD_INT 1
61761: ARRAY
61762: ST_TO_ADDR
// side := GetSide ( first ) ;
61763: LD_ADDR_VAR 0 6
61767: PUSH
61768: LD_VAR 0 4
61772: PPUSH
61773: CALL_OW 255
61777: ST_TO_ADDR
// for i := 1 to mpTeams do
61778: LD_ADDR_VAR 0 3
61782: PUSH
61783: DOUBLE
61784: LD_INT 1
61786: DEC
61787: ST_TO_ADDR
61788: LD_EXP 10
61792: PUSH
61793: FOR_TO
61794: IFFALSE 61828
// if side in mpTeams [ i ] then
61796: LD_VAR 0 6
61800: PUSH
61801: LD_EXP 10
61805: PUSH
61806: LD_VAR 0 3
61810: ARRAY
61811: IN
61812: IFFALSE 61826
// begin team := i ;
61814: LD_ADDR_VAR 0 5
61818: PUSH
61819: LD_VAR 0 3
61823: ST_TO_ADDR
// break ;
61824: GO 61828
// end ;
61826: GO 61793
61828: POP
61829: POP
// if not team then
61830: LD_VAR 0 5
61834: NOT
61835: IFFALSE 61839
// exit ;
61837: GO 62053
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61839: LD_EXP 34
61843: PPUSH
61844: LD_INT 81
61846: PUSH
61847: LD_VAR 0 6
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PPUSH
61856: CALL_OW 70
61860: IFFALSE 61864
// exit ;
61862: GO 62053
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
61864: LD_ADDR_EXP 60
61868: PUSH
61869: LD_EXP 60
61873: PPUSH
61874: LD_VAR 0 5
61878: PPUSH
61879: LD_EXP 60
61883: PUSH
61884: LD_VAR 0 5
61888: ARRAY
61889: PUSH
61890: LD_INT 1
61892: PLUS
61893: PPUSH
61894: CALL_OW 1
61898: ST_TO_ADDR
// for i in mpTeams [ team ] do
61899: LD_ADDR_VAR 0 3
61903: PUSH
61904: LD_EXP 10
61908: PUSH
61909: LD_VAR 0 5
61913: ARRAY
61914: PUSH
61915: FOR_IN
61916: IFFALSE 61940
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
61918: LD_VAR 0 3
61922: PPUSH
61923: LD_EXP 60
61927: PUSH
61928: LD_VAR 0 5
61932: ARRAY
61933: PPUSH
61934: CALL_OW 506
61938: GO 61915
61940: POP
61941: POP
// end else
61942: GO 62053
// begin first := depots [ 1 ] ;
61944: LD_ADDR_VAR 0 4
61948: PUSH
61949: LD_VAR 0 1
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: ST_TO_ADDR
// side := GetSide ( first ) ;
61958: LD_ADDR_VAR 0 6
61962: PUSH
61963: LD_VAR 0 4
61967: PPUSH
61968: CALL_OW 255
61972: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
61973: LD_EXP 34
61977: PPUSH
61978: LD_INT 81
61980: PUSH
61981: LD_VAR 0 6
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PPUSH
61990: CALL_OW 70
61994: IFFALSE 61998
// exit ;
61996: GO 62053
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
61998: LD_ADDR_EXP 60
62002: PUSH
62003: LD_EXP 60
62007: PPUSH
62008: LD_VAR 0 6
62012: PPUSH
62013: LD_EXP 60
62017: PUSH
62018: LD_VAR 0 6
62022: ARRAY
62023: PUSH
62024: LD_INT 1
62026: PLUS
62027: PPUSH
62028: CALL_OW 1
62032: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
62033: LD_VAR 0 6
62037: PPUSH
62038: LD_EXP 60
62042: PUSH
62043: LD_VAR 0 6
62047: ARRAY
62048: PPUSH
62049: CALL_OW 506
// end ; end ;
62053: LD_VAR 0 2
62057: RET
// function UpdateCounter ; var i ; begin
62058: LD_INT 0
62060: PPUSH
62061: PPUSH
// result := [ ] ;
62062: LD_ADDR_VAR 0 1
62066: PUSH
62067: EMPTY
62068: ST_TO_ADDR
// if mpTeamGame then
62069: LD_EXP 11
62073: IFFALSE 62140
// begin for i := 1 to mpTeams do
62075: LD_ADDR_VAR 0 2
62079: PUSH
62080: DOUBLE
62081: LD_INT 1
62083: DEC
62084: ST_TO_ADDR
62085: LD_EXP 10
62089: PUSH
62090: FOR_TO
62091: IFFALSE 62136
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
62093: LD_ADDR_VAR 0 1
62097: PUSH
62098: LD_VAR 0 1
62102: PUSH
62103: LD_STRING #KingoftheHill-Team
62105: PUSH
62106: LD_VAR 0 2
62110: PUSH
62111: LD_EXP 60
62115: PUSH
62116: LD_VAR 0 2
62120: ARRAY
62121: PUSH
62122: LD_EXP 35
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: ADD
62133: ST_TO_ADDR
62134: GO 62090
62136: POP
62137: POP
// end else
62138: GO 62213
// begin for i := 1 to 8 do
62140: LD_ADDR_VAR 0 2
62144: PUSH
62145: DOUBLE
62146: LD_INT 1
62148: DEC
62149: ST_TO_ADDR
62150: LD_INT 8
62152: PUSH
62153: FOR_TO
62154: IFFALSE 62211
// if mpSidePositions [ i ] then
62156: LD_EXP 7
62160: PUSH
62161: LD_VAR 0 2
62165: ARRAY
62166: IFFALSE 62209
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
62168: LD_ADDR_VAR 0 1
62172: PUSH
62173: LD_VAR 0 1
62177: PUSH
62178: LD_STRING #KingoftheHill-Player
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: LD_EXP 60
62190: PUSH
62191: LD_VAR 0 2
62195: ARRAY
62196: PUSH
62197: LD_EXP 35
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: ADD
62208: ST_TO_ADDR
62209: GO 62153
62211: POP
62212: POP
// end ; mpDisplayStrings := result ;
62213: LD_ADDR_EXP 38
62217: PUSH
62218: LD_VAR 0 1
62222: ST_TO_ADDR
// end ;
62223: LD_VAR 0 1
62227: RET
// export function HowMuchPointsKing ( side ) ; begin
62228: LD_INT 0
62230: PPUSH
// result := HowMuchPoints ( side ) ;
62231: LD_ADDR_VAR 0 2
62235: PUSH
62236: LD_VAR 0 1
62240: PPUSH
62241: CALL 62251 0 1
62245: ST_TO_ADDR
// end ;
62246: LD_VAR 0 2
62250: RET
// function HowMuchPoints ( side ) ; var i ; begin
62251: LD_INT 0
62253: PPUSH
62254: PPUSH
// if mpTeamGame then
62255: LD_EXP 11
62259: IFFALSE 62328
// begin for i := 1 to Count ( mpTeams ) do
62261: LD_ADDR_VAR 0 3
62265: PUSH
62266: DOUBLE
62267: LD_INT 1
62269: DEC
62270: ST_TO_ADDR
62271: LD_EXP 10
62275: PPUSH
62276: CALL 13240 0 1
62280: PUSH
62281: FOR_TO
62282: IFFALSE 62324
// begin if side in mpTeams [ i ] then
62284: LD_VAR 0 1
62288: PUSH
62289: LD_EXP 10
62293: PUSH
62294: LD_VAR 0 3
62298: ARRAY
62299: IN
62300: IFFALSE 62322
// begin result := mpKingPoints [ i ] ;
62302: LD_ADDR_VAR 0 2
62306: PUSH
62307: LD_EXP 60
62311: PUSH
62312: LD_VAR 0 3
62316: ARRAY
62317: ST_TO_ADDR
// exit ;
62318: POP
62319: POP
62320: GO 62344
// end ; end ;
62322: GO 62281
62324: POP
62325: POP
// end else
62326: GO 62344
// result := mpKingPoints [ side ] ;
62328: LD_ADDR_VAR 0 2
62332: PUSH
62333: LD_EXP 60
62337: PUSH
62338: LD_VAR 0 1
62342: ARRAY
62343: ST_TO_ADDR
// end ;
62344: LD_VAR 0 2
62348: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
62349: LD_EXP 39
62353: IFFALSE 62361
62355: PUSH
62356: CALL 62773 0 0
62360: AND
62361: IFFALSE 62369
62363: PUSH
62364: LD_OWVAR 4
62368: AND
62369: IFFALSE 62622
62371: GO 62373
62373: DISABLE
62374: LD_INT 0
62376: PPUSH
62377: PPUSH
// begin canWin := false ;
62378: LD_ADDR_VAR 0 2
62382: PUSH
62383: LD_INT 0
62385: ST_TO_ADDR
// if not HasPower ( your_side ) then
62386: LD_OWVAR 2
62390: PPUSH
62391: CALL 62815 0 1
62395: NOT
62396: IFFALSE 62407
// begin Multiplayer_Loose_Message ;
62398: CALL_OW 521
// enable ( mpLose ) ;
62402: LD_INT 102
62404: ENABLE_MARKED
// end else
62405: GO 62622
// begin if not EnemiesInGame then
62407: CALL 62625 0 0
62411: NOT
62412: IFFALSE 62419
// begin enable ( mpWin ) ;
62414: LD_INT 101
62416: ENABLE_MARKED
// exit ;
62417: GO 62622
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
62419: LD_ADDR_VAR 0 2
62423: PUSH
62424: LD_OWVAR 2
62428: PPUSH
62429: CALL 62251 0 1
62433: PUSH
62434: LD_EXP 35
62438: GREATEREQUAL
62439: IFFALSE 62452
62441: PUSH
62442: LD_OWVAR 2
62446: PPUSH
62447: CALL 62815 0 1
62451: AND
62452: ST_TO_ADDR
// for i := 1 to 8 do
62453: LD_ADDR_VAR 0 1
62457: PUSH
62458: DOUBLE
62459: LD_INT 1
62461: DEC
62462: ST_TO_ADDR
62463: LD_INT 8
62465: PUSH
62466: FOR_TO
62467: IFFALSE 62608
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
62469: LD_EXP 7
62473: PUSH
62474: LD_VAR 0 1
62478: ARRAY
62479: IFFALSE 62492
62481: PUSH
62482: LD_VAR 0 1
62486: PPUSH
62487: CALL_OW 108
62491: AND
62492: IFFALSE 62506
62494: PUSH
62495: LD_VAR 0 1
62499: PUSH
62500: LD_OWVAR 2
62504: NONEQUAL
62505: AND
62506: IFFALSE 62606
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62508: LD_EXP 8
62512: PUSH
62513: LD_VAR 0 1
62517: ARRAY
62518: NOT
62519: IFTRUE 62567
62521: PUSH
62522: LD_EXP 8
62526: PUSH
62527: LD_VAR 0 1
62531: ARRAY
62532: PUSH
62533: LD_EXP 8
62537: PUSH
62538: LD_OWVAR 2
62542: ARRAY
62543: NONEQUAL
62544: IFFALSE 62566
62546: PUSH
62547: LD_OWVAR 2
62551: PPUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: CALL_OW 81
62561: PUSH
62562: LD_INT 1
62564: NONEQUAL
62565: AND
62566: OR
62567: IFFALSE 62606
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
62569: LD_VAR 0 1
62573: PPUSH
62574: CALL 62251 0 1
62578: PUSH
62579: LD_EXP 35
62583: GREATEREQUAL
62584: IFFALSE 62597
62586: PUSH
62587: LD_VAR 0 1
62591: PPUSH
62592: CALL 62815 0 1
62596: AND
62597: IFFALSE 62606
// begin enable ( mpLose ) ;
62599: LD_INT 102
62601: ENABLE_MARKED
// exit ;
62602: POP
62603: POP
62604: GO 62622
// end ;
62606: GO 62466
62608: POP
62609: POP
// if canWin then
62610: LD_VAR 0 2
62614: IFFALSE 62621
// enable ( mpWin ) else
62616: LD_INT 101
62618: ENABLE_MARKED
62619: GO 62622
// enable ;
62621: ENABLE
// end ; end ;
62622: PPOPN 2
62624: END
// function EnemiesInGame ; var i ; begin
62625: LD_INT 0
62627: PPUSH
62628: PPUSH
// result := false ;
62629: LD_ADDR_VAR 0 1
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// for i := 1 to 8 do
62637: LD_ADDR_VAR 0 2
62641: PUSH
62642: DOUBLE
62643: LD_INT 1
62645: DEC
62646: ST_TO_ADDR
62647: LD_INT 8
62649: PUSH
62650: FOR_TO
62651: IFFALSE 62766
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
62653: LD_VAR 0 2
62657: PUSH
62658: LD_OWVAR 2
62662: NONEQUAL
62663: IFFALSE 62676
62665: PUSH
62666: LD_VAR 0 2
62670: PPUSH
62671: CALL 62815 0 1
62675: AND
62676: IFFALSE 62689
62678: PUSH
62679: LD_VAR 0 2
62683: PPUSH
62684: CALL_OW 108
62688: AND
62689: IFFALSE 62764
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
62691: LD_EXP 8
62695: PUSH
62696: LD_VAR 0 2
62700: ARRAY
62701: NOT
62702: IFTRUE 62750
62704: PUSH
62705: LD_EXP 8
62709: PUSH
62710: LD_VAR 0 2
62714: ARRAY
62715: PUSH
62716: LD_EXP 8
62720: PUSH
62721: LD_OWVAR 2
62725: ARRAY
62726: NONEQUAL
62727: IFFALSE 62749
62729: PUSH
62730: LD_OWVAR 2
62734: PPUSH
62735: LD_VAR 0 2
62739: PPUSH
62740: CALL_OW 81
62744: PUSH
62745: LD_INT 1
62747: NONEQUAL
62748: AND
62749: OR
62750: IFFALSE 62764
// begin result := true ;
62752: LD_ADDR_VAR 0 1
62756: PUSH
62757: LD_INT 1
62759: ST_TO_ADDR
// exit ;
62760: POP
62761: POP
62762: GO 62768
// end ;
62764: GO 62650
62766: POP
62767: POP
// end ;
62768: LD_VAR 0 1
62772: RET
// function CanWinLoose ; begin
62773: LD_INT 0
62775: PPUSH
// result := true ;
62776: LD_ADDR_VAR 0 1
62780: PUSH
62781: LD_INT 1
62783: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
62784: CALL_OW 531
62788: IFFALSE 62800
62790: PUSH
62791: CALL_OW 519
62795: PUSH
62796: LD_INT 1
62798: GREATER
62799: AND
62800: IFFALSE 62810
// result := false ;
62802: LD_ADDR_VAR 0 1
62806: PUSH
62807: LD_INT 0
62809: ST_TO_ADDR
// end ;
62810: LD_VAR 0 1
62814: RET
// function HasPower ( i ) ; begin
62815: LD_INT 0
62817: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
62818: LD_ADDR_VAR 0 2
62822: PUSH
62823: LD_INT 22
62825: PUSH
62826: LD_VAR 0 1
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: PUSH
62838: LD_INT 21
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 33
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 33
62860: PUSH
62861: LD_INT 5
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PPUSH
62878: CALL_OW 69
62882: ST_TO_ADDR
// end ; end_of_file
62883: LD_VAR 0 2
62887: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62888: PPOPN 6
62890: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62891: LD_INT 0
62893: PPUSH
// begin if not units then
62894: LD_VAR 0 1
62898: NOT
62899: IFFALSE 62903
// exit ;
62901: GO 62937
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62903: LD_VAR 0 1
62907: PPUSH
62908: LD_VAR 0 2
62912: PPUSH
62913: LD_VAR 0 3
62917: PPUSH
62918: LD_VAR 0 4
62922: PPUSH
62923: LD_VAR 0 5
62927: PPUSH
62928: LD_VAR 0 6
62932: PPUSH
62933: CALL 61180 0 6
// end ;
62937: PPOPN 7
62939: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62940: LD_EXP 3
62944: PUSH
62945: LD_INT 4
62947: EQUAL
62948: IFFALSE 62984
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62950: LD_STRING setGameDifficulty(
62952: PUSH
62953: LD_OWVAR 67
62957: STR
62958: PUSH
62959: LD_STRING )
62961: STR
62962: PPUSH
62963: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62967: LD_STRING displayDifficulty(
62969: PUSH
62970: LD_OWVAR 67
62974: STR
62975: PUSH
62976: LD_STRING )
62978: STR
62979: PPUSH
62980: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62984: CALL 63013 0 0
// end ; end_of_file
62988: PPOPN 1
62990: END
// every 0 0$1 do
62991: GO 62993
62993: DISABLE
// begin enable ;
62994: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62995: LD_STRING updateTimer(
62997: PUSH
62998: LD_OWVAR 1
63002: STR
63003: PUSH
63004: LD_STRING );
63006: STR
63007: PPUSH
63008: CALL_OW 559
// end ;
63012: END
// export function SOS_MapStart ( ) ; begin
63013: LD_INT 0
63015: PPUSH
// UpdateFactoryWaypoints ( ) ;
63016: CALL 63947 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63020: CALL 64199 0 0
// ParseMultiDataToLua ( ) ;
63024: CALL 64346 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63028: LD_STRING setSpecLogoNumber(
63030: PUSH
63031: LD_INT 2
63033: STR
63034: PUSH
63035: LD_STRING ,
63037: STR
63038: PUSH
63039: LD_INT 1
63041: STR
63042: PUSH
63043: LD_STRING )
63045: STR
63046: PPUSH
63047: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63051: LD_STRING setSpecLogoNumber(
63053: PUSH
63054: LD_INT 3
63056: STR
63057: PUSH
63058: LD_STRING ,
63060: STR
63061: PUSH
63062: LD_INT 2
63064: STR
63065: PUSH
63066: LD_STRING )
63068: STR
63069: PPUSH
63070: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63074: LD_STRING setSpecLogoNumber(
63076: PUSH
63077: LD_INT 4
63079: STR
63080: PUSH
63081: LD_STRING ,
63083: STR
63084: PUSH
63085: LD_INT 3
63087: STR
63088: PUSH
63089: LD_STRING )
63091: STR
63092: PPUSH
63093: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63097: LD_STRING setSpecLogoNumber(
63099: PUSH
63100: LD_INT 5
63102: STR
63103: PUSH
63104: LD_STRING ,
63106: STR
63107: PUSH
63108: LD_INT 4
63110: STR
63111: PUSH
63112: LD_STRING )
63114: STR
63115: PPUSH
63116: CALL_OW 559
// end ;
63120: LD_VAR 0 1
63124: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63125: LD_INT 0
63127: PPUSH
63128: PPUSH
63129: PPUSH
63130: PPUSH
63131: PPUSH
63132: PPUSH
63133: PPUSH
63134: PPUSH
63135: PPUSH
// for i := 1 to 8 do
63136: LD_ADDR_VAR 0 2
63140: PUSH
63141: DOUBLE
63142: LD_INT 1
63144: DEC
63145: ST_TO_ADDR
63146: LD_INT 8
63148: PUSH
63149: FOR_TO
63150: IFFALSE 63535
// begin if mpSidePositions [ i ] then
63152: LD_EXP 7
63156: PUSH
63157: LD_VAR 0 2
63161: ARRAY
63162: IFFALSE 63533
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63164: LD_ADDR_VAR 0 7
63168: PUSH
63169: LD_INT 22
63171: PUSH
63172: LD_VAR 0 2
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 21
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PPUSH
63195: CALL_OW 69
63199: PPUSH
63200: CALL 13240 0 1
63204: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63205: LD_ADDR_VAR 0 9
63209: PUSH
63210: LD_INT 22
63212: PUSH
63213: LD_VAR 0 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 30
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 30
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PPUSH
63254: CALL_OW 69
63258: ST_TO_ADDR
// crates := 0 ;
63259: LD_ADDR_VAR 0 4
63263: PUSH
63264: LD_INT 0
63266: ST_TO_ADDR
// oil := 0 ;
63267: LD_ADDR_VAR 0 5
63271: PUSH
63272: LD_INT 0
63274: ST_TO_ADDR
// sib := 0 ;
63275: LD_ADDR_VAR 0 6
63279: PUSH
63280: LD_INT 0
63282: ST_TO_ADDR
// if bases then
63283: LD_VAR 0 9
63287: IFFALSE 63393
// begin for j in bases do
63289: LD_ADDR_VAR 0 3
63293: PUSH
63294: LD_VAR 0 9
63298: PUSH
63299: FOR_IN
63300: IFFALSE 63391
// begin base := GetBase ( j ) ;
63302: LD_ADDR_VAR 0 8
63306: PUSH
63307: LD_VAR 0 3
63311: PPUSH
63312: CALL_OW 274
63316: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63317: LD_ADDR_VAR 0 4
63321: PUSH
63322: LD_VAR 0 4
63326: PUSH
63327: LD_VAR 0 8
63331: PPUSH
63332: LD_INT 1
63334: PPUSH
63335: CALL_OW 275
63339: PLUS
63340: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63341: LD_ADDR_VAR 0 5
63345: PUSH
63346: LD_VAR 0 5
63350: PUSH
63351: LD_VAR 0 8
63355: PPUSH
63356: LD_INT 2
63358: PPUSH
63359: CALL_OW 275
63363: PLUS
63364: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63365: LD_ADDR_VAR 0 6
63369: PUSH
63370: LD_VAR 0 6
63374: PUSH
63375: LD_VAR 0 8
63379: PPUSH
63380: LD_INT 3
63382: PPUSH
63383: CALL_OW 275
63387: PLUS
63388: ST_TO_ADDR
// end ;
63389: GO 63299
63391: POP
63392: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63393: LD_STRING setSpecText(
63395: PUSH
63396: LD_VAR 0 2
63400: STR
63401: PUSH
63402: LD_STRING ,
63404: STR
63405: PUSH
63406: LD_INT 2
63408: STR
63409: PUSH
63410: LD_STRING ,
63412: STR
63413: PUSH
63414: LD_VAR 0 4
63418: STR
63419: PUSH
63420: LD_STRING )
63422: STR
63423: PPUSH
63424: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63428: LD_STRING setSpecText(
63430: PUSH
63431: LD_VAR 0 2
63435: STR
63436: PUSH
63437: LD_STRING ,
63439: STR
63440: PUSH
63441: LD_INT 3
63443: STR
63444: PUSH
63445: LD_STRING ,
63447: STR
63448: PUSH
63449: LD_VAR 0 5
63453: STR
63454: PUSH
63455: LD_STRING )
63457: STR
63458: PPUSH
63459: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63463: LD_STRING setSpecText(
63465: PUSH
63466: LD_VAR 0 2
63470: STR
63471: PUSH
63472: LD_STRING ,
63474: STR
63475: PUSH
63476: LD_INT 4
63478: STR
63479: PUSH
63480: LD_STRING ,
63482: STR
63483: PUSH
63484: LD_VAR 0 6
63488: STR
63489: PUSH
63490: LD_STRING )
63492: STR
63493: PPUSH
63494: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63498: LD_STRING setSpecText(
63500: PUSH
63501: LD_VAR 0 2
63505: STR
63506: PUSH
63507: LD_STRING ,
63509: STR
63510: PUSH
63511: LD_INT 5
63513: STR
63514: PUSH
63515: LD_STRING ,
63517: STR
63518: PUSH
63519: LD_VAR 0 7
63523: STR
63524: PUSH
63525: LD_STRING )
63527: STR
63528: PPUSH
63529: CALL_OW 559
// end ; end ;
63533: GO 63149
63535: POP
63536: POP
// end ;
63537: LD_VAR 0 1
63541: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63542: LD_INT 2
63544: PUSH
63545: LD_INT 30
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 30
63557: PUSH
63558: LD_INT 1
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: PPUSH
63570: CALL_OW 69
63574: IFFALSE 63584
63576: GO 63578
63578: DISABLE
// begin enable ;
63579: ENABLE
// UpdateSpectatorBar ;
63580: CALL 63125 0 0
// end ;
63584: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63585: LD_INT 0
63587: PPUSH
// end ;
63588: LD_VAR 0 12
63592: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63593: LD_INT 0
63595: PPUSH
63596: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63597: LD_VAR 0 1
63601: NOT
63602: IFTRUE 63621
63604: PUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL_OW 488
63619: NOT
63620: OR
63621: IFTRUE 63656
63623: PUSH
63624: LD_VAR 0 1
63628: PPUSH
63629: CALL_OW 266
63633: PUSH
63634: LD_INT 3
63636: NONEQUAL
63637: IFFALSE 63655
63639: PUSH
63640: LD_VAR 0 1
63644: PPUSH
63645: CALL_OW 247
63649: PUSH
63650: LD_INT 1
63652: EQUAL
63653: NOT
63654: AND
63655: OR
63656: IFFALSE 63660
// exit ;
63658: GO 63942
// if GetType ( factory ) = unit_human then
63660: LD_VAR 0 1
63664: PPUSH
63665: CALL_OW 247
63669: PUSH
63670: LD_INT 1
63672: EQUAL
63673: IFFALSE 63690
// factory := IsInUnit ( factory ) ;
63675: LD_ADDR_VAR 0 1
63679: PUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: CALL_OW 310
63689: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63690: LD_VAR 0 1
63694: PPUSH
63695: CALL_OW 266
63699: PUSH
63700: LD_INT 3
63702: NONEQUAL
63703: IFFALSE 63707
// exit ;
63705: GO 63942
// for i := 1 to Count ( factoryWaypoints ) do
63707: LD_ADDR_VAR 0 5
63711: PUSH
63712: DOUBLE
63713: LD_INT 1
63715: DEC
63716: ST_TO_ADDR
63717: LD_EXP 61
63721: PPUSH
63722: CALL 13240 0 1
63726: PUSH
63727: FOR_TO
63728: IFFALSE 63890
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63730: LD_VAR 0 2
63734: PPUSH
63735: LD_VAR 0 3
63739: PPUSH
63740: CALL_OW 428
63744: PUSH
63745: LD_EXP 61
63749: PUSH
63750: LD_VAR 0 5
63754: ARRAY
63755: PUSH
63756: LD_INT 2
63758: ARRAY
63759: EQUAL
63760: IFFALSE 63792
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63762: LD_ADDR_EXP 61
63766: PUSH
63767: LD_EXP 61
63771: PPUSH
63772: LD_VAR 0 5
63776: PPUSH
63777: CALL_OW 3
63781: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63782: CALL 63947 0 0
// exit ;
63786: POP
63787: POP
63788: GO 63942
// end else
63790: GO 63888
// if factory = factoryWaypoints [ i ] [ 2 ] then
63792: LD_VAR 0 1
63796: PUSH
63797: LD_EXP 61
63801: PUSH
63802: LD_VAR 0 5
63806: ARRAY
63807: PUSH
63808: LD_INT 2
63810: ARRAY
63811: EQUAL
63812: IFFALSE 63888
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63814: LD_ADDR_EXP 61
63818: PUSH
63819: LD_EXP 61
63823: PPUSH
63824: LD_VAR 0 5
63828: PPUSH
63829: CALL_OW 3
63833: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63834: LD_ADDR_EXP 61
63838: PUSH
63839: LD_EXP 61
63843: PPUSH
63844: LD_VAR 0 1
63848: PPUSH
63849: CALL_OW 255
63853: PUSH
63854: LD_VAR 0 1
63858: PUSH
63859: LD_VAR 0 2
63863: PUSH
63864: LD_VAR 0 3
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: PPUSH
63875: CALL 49216 0 2
63879: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63880: CALL 63947 0 0
// exit ;
63884: POP
63885: POP
63886: GO 63942
// end ; end ;
63888: GO 63727
63890: POP
63891: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63892: LD_ADDR_EXP 61
63896: PUSH
63897: LD_EXP 61
63901: PPUSH
63902: LD_VAR 0 1
63906: PPUSH
63907: CALL_OW 255
63911: PUSH
63912: LD_VAR 0 1
63916: PUSH
63917: LD_VAR 0 2
63921: PUSH
63922: LD_VAR 0 3
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: PPUSH
63933: CALL 49216 0 2
63937: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63938: CALL 63947 0 0
// end ;
63942: LD_VAR 0 4
63946: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63947: LD_INT 0
63949: PPUSH
63950: PPUSH
63951: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63952: LD_STRING resetFactoryWaypoint();
63954: PPUSH
63955: CALL_OW 559
// if factoryWaypoints then
63959: LD_EXP 61
63963: IFFALSE 64084
// begin list := factoryWaypoints ;
63965: LD_ADDR_VAR 0 3
63969: PUSH
63970: LD_EXP 61
63974: ST_TO_ADDR
// for i := 1 to list do
63975: LD_ADDR_VAR 0 2
63979: PUSH
63980: DOUBLE
63981: LD_INT 1
63983: DEC
63984: ST_TO_ADDR
63985: LD_VAR 0 3
63989: PUSH
63990: FOR_TO
63991: IFFALSE 64082
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63993: LD_STRING setFactoryWaypointXY(
63995: PUSH
63996: LD_VAR 0 3
64000: PUSH
64001: LD_VAR 0 2
64005: ARRAY
64006: PUSH
64007: LD_INT 1
64009: ARRAY
64010: STR
64011: PUSH
64012: LD_STRING ,
64014: STR
64015: PUSH
64016: LD_VAR 0 3
64020: PUSH
64021: LD_VAR 0 2
64025: ARRAY
64026: PUSH
64027: LD_INT 2
64029: ARRAY
64030: STR
64031: PUSH
64032: LD_STRING ,
64034: STR
64035: PUSH
64036: LD_VAR 0 3
64040: PUSH
64041: LD_VAR 0 2
64045: ARRAY
64046: PUSH
64047: LD_INT 3
64049: ARRAY
64050: STR
64051: PUSH
64052: LD_STRING ,
64054: STR
64055: PUSH
64056: LD_VAR 0 3
64060: PUSH
64061: LD_VAR 0 2
64065: ARRAY
64066: PUSH
64067: LD_INT 4
64069: ARRAY
64070: STR
64071: PUSH
64072: LD_STRING )
64074: STR
64075: PPUSH
64076: CALL_OW 559
64080: GO 63990
64082: POP
64083: POP
// end ; end ;
64084: LD_VAR 0 1
64088: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64089: LD_INT 0
64091: PPUSH
// if HexInfo ( x , y ) = warehouse then
64092: LD_VAR 0 2
64096: PPUSH
64097: LD_VAR 0 3
64101: PPUSH
64102: CALL_OW 428
64106: PUSH
64107: LD_VAR 0 1
64111: EQUAL
64112: IFFALSE 64139
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64114: LD_ADDR_EXP 63
64118: PUSH
64119: LD_EXP 63
64123: PPUSH
64124: LD_VAR 0 1
64128: PPUSH
64129: LD_INT 0
64131: PPUSH
64132: CALL_OW 1
64136: ST_TO_ADDR
64137: GO 64190
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64139: LD_ADDR_EXP 63
64143: PUSH
64144: LD_EXP 63
64148: PPUSH
64149: LD_VAR 0 1
64153: PPUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: CALL_OW 255
64163: PUSH
64164: LD_VAR 0 1
64168: PUSH
64169: LD_VAR 0 2
64173: PUSH
64174: LD_VAR 0 3
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: LIST
64183: LIST
64184: PPUSH
64185: CALL_OW 1
64189: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64190: CALL 64199 0 0
// end ;
64194: LD_VAR 0 4
64198: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64199: LD_INT 0
64201: PPUSH
64202: PPUSH
64203: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64204: LD_STRING resetWarehouseGatheringPoints();
64206: PPUSH
64207: CALL_OW 559
// if warehouseGatheringPoints then
64211: LD_EXP 63
64215: IFFALSE 64341
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64217: LD_ADDR_VAR 0 3
64221: PUSH
64222: LD_EXP 63
64226: PPUSH
64227: CALL 53150 0 1
64231: ST_TO_ADDR
// for i := 1 to list do
64232: LD_ADDR_VAR 0 2
64236: PUSH
64237: DOUBLE
64238: LD_INT 1
64240: DEC
64241: ST_TO_ADDR
64242: LD_VAR 0 3
64246: PUSH
64247: FOR_TO
64248: IFFALSE 64339
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64250: LD_STRING setWarehouseGatheringPointXY(
64252: PUSH
64253: LD_VAR 0 3
64257: PUSH
64258: LD_VAR 0 2
64262: ARRAY
64263: PUSH
64264: LD_INT 1
64266: ARRAY
64267: STR
64268: PUSH
64269: LD_STRING ,
64271: STR
64272: PUSH
64273: LD_VAR 0 3
64277: PUSH
64278: LD_VAR 0 2
64282: ARRAY
64283: PUSH
64284: LD_INT 2
64286: ARRAY
64287: STR
64288: PUSH
64289: LD_STRING ,
64291: STR
64292: PUSH
64293: LD_VAR 0 3
64297: PUSH
64298: LD_VAR 0 2
64302: ARRAY
64303: PUSH
64304: LD_INT 3
64306: ARRAY
64307: STR
64308: PUSH
64309: LD_STRING ,
64311: STR
64312: PUSH
64313: LD_VAR 0 3
64317: PUSH
64318: LD_VAR 0 2
64322: ARRAY
64323: PUSH
64324: LD_INT 4
64326: ARRAY
64327: STR
64328: PUSH
64329: LD_STRING )
64331: STR
64332: PPUSH
64333: CALL_OW 559
64337: GO 64247
64339: POP
64340: POP
// end ; end ;
64341: LD_VAR 0 1
64345: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64346: LD_INT 0
64348: PPUSH
64349: PPUSH
// if not mpSidePositions then
64350: LD_EXP 7
64354: NOT
64355: IFFALSE 64359
// exit ;
64357: GO 64430
// result :=  ;
64359: LD_ADDR_VAR 0 1
64363: PUSH
64364: LD_STRING 
64366: ST_TO_ADDR
// for i := 1 to 8 do
64367: LD_ADDR_VAR 0 2
64371: PUSH
64372: DOUBLE
64373: LD_INT 1
64375: DEC
64376: ST_TO_ADDR
64377: LD_INT 8
64379: PUSH
64380: FOR_TO
64381: IFFALSE 64411
// begin result := result & mpSidePositions [ i ] & ; ;
64383: LD_ADDR_VAR 0 1
64387: PUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_EXP 7
64397: PUSH
64398: LD_VAR 0 2
64402: ARRAY
64403: STR
64404: PUSH
64405: LD_STRING ;
64407: STR
64408: ST_TO_ADDR
// end ;
64409: GO 64380
64411: POP
64412: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64413: LD_STRING setMultiplayerRealPosition("
64415: PUSH
64416: LD_VAR 0 1
64420: STR
64421: PUSH
64422: LD_STRING ");
64424: STR
64425: PPUSH
64426: CALL_OW 559
// end ;
64430: LD_VAR 0 1
64434: RET
