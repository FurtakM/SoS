Export Sikorski;
Export amTech, amConstructList, amBuildings, amVehicles, amVehiclesAtttackers, amDrivers,
       amVehiclesCounter, amForce, amForceTmp, amMechSpawnCounter;
Export Function PrepareAmerican(side);
var i, d, xy, un, un2, skill, tmp, fac;
begin
amTech := GetTechNation(side, nation_american, state_enabled);
amConstructList := [
   [us_heavy_tracked, engine_combustion, control_manual, us_heavy_gun],
   [us_medium_tracked, engine_combustion, control_manual, us_double_gun],
   [us_medium_tracked, engine_combustion, control_manual, us_gatling_gun],
   [us_medium_wheeled, engine_combustion, control_manual, us_gatling_gun],
   [us_medium_wheeled, engine_combustion, control_manual, us_light_gun]
];

amBuildings := [];
amVehicles := [];
amVehiclesAtttackers := [];
amDrivers := [];
amVehiclesCounter := 1;
amMechSpawnCounter := [6, 8, 10][Difficulty];

skill := [3, 4, 5][Difficulty];

uc_side := side;
uc_nation := nation_american;

hc_gallery := 'us';
hc_face_number := 19;
hc_importance := 100;
hc_name := 'Sikorski';
hc_sex := sex_male;
hc_skills := [5, 3, 2, 1];
hc_attr := [10, 11];

Sikorski := CreateHuman;
PlaceHumanInUnit(Sikorski, HexInfo(35, 45));

InitHC_All();

amForce := PrepareBase(amDep, amBaseArea, '', skill, [800, 120, 0], [[10, 11, 12][Difficulty], 6, 6, 3]);
amForceTmp := [];


if Difficulty = 3 then
   begin
   bc_type := b_breastwork;
   bc_level := 7;

   CreateAndPlaceBuildingXYD(79, 72, 5);
   end;

for i in FilterAllUnits([[f_side, side], [f_btype, b_breastwork], [f_not, [f_inarea, amBaseArea]], [f_empty]]) do
    begin
    d := GetDir(i);

    if d < 3 then
       d := d + 3
    else
       d := d - 3;

    PrepareSoldier(false, skill);
    un := CreateHuman;
    amForceTmp := Join(amForceTmp, un);

    SetDir(un, d);
    PlaceHumanInUnit(un, i);
    end;

for i := 1 to 3 do
    begin
    PrepareEngineer(false, skill);
    un := CreateHuman;
    PlaceUnitArea(un, amEngTmpArea, false);
    amForceTmp := Join(amForceTmp, un);
    end;

for i in FilterAllUnits([[f_side, side], [f_type, unit_building]]) do
    SetBLevel(i, [3, 5, 7][Difficulty]);

for i in FilterAllUnits([[f_side, side], [f_btype, b_bunker]]) do
    PlaceWeaponTurret(i, [us_double_gun, us_gatling_gun, us_double_gun][i mod 3 + 1]);
End;

// AI
Function BaseScript(side, base, area, innerArea, outerArea, forces, healPoint, parkingPoint);
var i, tmp, undone, lab, eng, mech, tag, tw, cr, sci, sol, hurtUnits, enemy, enemyInBase, enemyOuterBase, drivers, cranes, vehicles, vehicles2, empty, fac, emptyTowers, weapon, depot, buildingsToBuild, enemySide;
begin
enable;

tmp := FilterAllUnits([f_enemy, side]);

if tmp then
   enemySide := GetSide(tmp[1]);

enemyInBase := FilterUnitsInArea(innerArea, [f_enemy, side]);
enemyOuterBase := FilterUnitsInArea(outerArea, [f_enemy, side]);

vehicles := amVehicles;

depot := FilterUnitsInArea(area, [[f_side, side], [f_or, [f_btype, b_depot], [f_btype, b_warehouse]]]);

if depot then
   depot := depot[1];

// research
if amTech then
   begin
   lab := FilterUnitsInArea(area, [[f_side, side], [f_ok], [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);

   if lab then
      begin
      if BuildingStatus(lab[1]) = bs_idle then
         begin
         for i in amTech do
             if CanBeResearched(lab[1], i) then
                begin
                AddComResearch(lab[1], i);
                end;
         end;
      end;
   end;

fac := FilterUnitsInArea(area, [[f_side, side], [f_btype, b_factory], [f_ok]]);

if fac then
   begin
   if BuildingStatus(fac[1]) = bs_idle then
      begin
      emptyTowers := FilterUnitsInArea(area, [[f_or, [f_btype, b_bunker], [f_btype, b_turret]], [f_bweapon, 0]]);

      if emptyTowers then
         begin
         weapon := GetTurretWeapon(emptyTowers[1], area);

         if weapon then
            ComPlaceWeapon(emptyTowers[1], weapon);
         end;

      if amConstructList then
         for i := 1 to Count(amConstructList) do
             begin
             if CanBeConstructed(fac[1], amConstructList[i][1], amConstructList[i][2], amConstructList[i][3], amConstructList[i][4]) then
                begin
                ComConstruct(fac[1], amConstructList[i][1], amConstructList[i][2], amConstructList[i][3], amConstructList[i][4]);
                amConstructList := Delete(amConstructList, i);
                break;
                end;
             end;
      end;
   end;

// damaged buildings
tmp := FilterUnitsInArea(area, [[f_side, side], [f_type, unit_building], [f_not, [f_constructed]], [f_not, [f_lives, 1000]]]);

// crates neamby base
cr := GetListOfCratesInArea(area);

// mechanic
mech := UnitFilter(forces, [[f_class, class_mechanic], [f_ok]]);

if UnitFilter(mech, [[f_not, [f_tag, tMech]], [f_not, [f_inside]]]) and IsOk(fac[1]) then
   ComEnterUnit(UnitFilter(mech, [[f_not, [f_tag, tMech]], [f_not, [f_inside]]]), fac[1]);

// sci logic
sci := UnitFilter(forces, [[f_class, class_scientistic], [f_ok]]);
lab := FilterUnitsInarea(area, [f_or, [f_btype, b_lab], [f_btype, b_lab_half], [f_btype, b_lab_full]]);

if sci then
   begin
   hurtUnits := UnitFilter(forces, [[f_inarea, area], [f_tag, tHeal]]);

   if hurtUnits then
      begin
      for i in sci do
          if IsInUnit(i) then
             ComExitBuilding(i)
          else
             ComHeal(i, hurtUnits[1]);
      end
   else if lab then
      begin
      for i in sci do
          if not IsInUnit(i) then
             ComEnterUnit(i, lab[1]);
      end;
   end;

// eng logic
eng := UnitFilter(forces, [f_class, 2]);
buildingsToBuild := amBuildings;

if eng then
   begin
   for i in eng do
       begin
       tag := GetTag(i);

       if IsInarea(i, outerarea) then
          begin
          ComMoveXY(i, parkingPoint[1], parkingPoint[2]);
          continue;
          end;

       if GetLives(i) < 800 and tag <> tHeal then
          begin
          SetTag(i, tHeal);
          ComMoveXY(i, healPoint[1], healPoint[2]);
          AddComHold(i);
          end;

       if tag = tHeal and GetLives(i) = 1000 then
          SetTag(i, 0);

       if not tag then
          begin
          undone := FilterUnitsInarea(area, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          if cr or tmp or buildingsToBuild then
             begin
             if IsInUnit(i) then
                ComExitBuilding(i);

             if tmp then
                SetTag(i, tRepair)
             else if cr then
                SetTag(i, tCrates)
             else
                SetTag(i, tBuild);
             end
          else
             if not IsInUnit(i) then
                ComEnterUnit(i, depot);
          end;

       if tag = tRepair then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not tmp then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) then
             ComRepairBuilding(i, tmp[1]);

          if not IsInarea(i, area) then
             ComMoveToarea(i, area);
          end;

       if tag = tBuild then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not buildingsToBuild or enemyInBase or enemyOuterBase then
             begin
             SetTag(i, 0);
             continue;
             end
          else if not CanBeBuiltOnlyResources(depot, buildingsToBuild[1][1]) then
             begin
             SetTag(i, 0);
             continue;
             end;

          undone := FilterUnitsInarea(area, [f_constructed]);

          if undone then
             begin
             ComComplete(i, undone[1]);
             continue;
             end;

          ComBuild(i, buildingsToBuild[1][1], buildingsToBuild[1][2], buildingsToBuild[1][3], buildingsToBuild[1][4]);
          end;

       if tag = tCrates then
          begin
          if IsInUnit(i) then
             begin
             ComExitBuilding(i);
             continue;
             end;

          if not cr then
             begin
             SetTag(i, 0);
             continue;
             end;

          if not HasTask(i) and not FilterAllUnits([[f_enemy, side], [f_distxy, cr[1], cr[2], 12]]) then
             ComCollect(i, cr[1], cr[2]);
          end;
       end;
   end;

// defense logic
if vehicles then
   begin
   vehicles := UnitFilter(vehicles, [[f_not, [f_or, [f_weapon, us_crane], [f_weapon, us_cargo_bay]]], [f_ok]]);

   if vehicles then
      begin
      for i in vehicles do
          begin
          tag := GetTag(i);

          if not tag then
             begin
             if GetControl(i) = control_manual then
                begin
                drivers := amDrivers;

                if not drivers then
                   begin
                   drivers := UnitFilter(mech, [f_not, [f_tag, tMech]]);

                   if drivers then
                      begin
                      SetTag(drivers[1], tMech);
                      amDrivers := Join(amDrivers, drivers[1]);
                      end;
                   end;

                if drivers then
                   SetTag(i, tBusy);

                continue;
                end;

             SetTag(i, tBusy);
             end
          else if tag = tBusy then
             begin
             if GetLives(i) = 1000 then
                begin
                if GetControl(i) = control_manual and not IsDrivenBy(i) then
                   begin
                   drivers := amDrivers;

                   if not drivers then
                      begin
                      SetTag(i, 0);
                      continue;
                      end;

                   if IsInUnit(drivers[1]) and not IsDriver(drivers[1]) then
                      ComExitBuilding(drivers[1]);

                   if (UnitFilter(vehicles, [f_tag, tRepair]) and not HasTask(drivers[1])) or not UnitFilter(vehicles, [f_tag, tRepair]) then
                      ComEnterUnit(drivers[1], i);

                   continue;
                   end;

                SetTag(i, tAttack);
                end;
             end
          else if tag = tAttack then
             begin
             enemy := enemyInBase;

             if not enemy then
                enemy := enemyOuterBase;

             if not enemy and GetDistUnitXY(i, parkingPoint[1], parkingPoint[2]) > 10 then
                begin
                ComMoveXY(i, parkingPoint[1], parkingPoint[2]);
                continue;
                end;

             if GetLives(i) < 650 then
                begin
                SetTag(i, tVehRepair);
                ComMoveXY(i, parkingPoint[1], parkingPoint[2]);
                continue;
                end;

             ComAttackUnit(i, NearestUnitToUnit(enemy, i));
             end
          else if tag = tVehRepair then
             begin
             if GetDistUnitXY(i, parkingPoint[1], parkingPoint[2]) > 10 then
                begin
                ComMoveXY(i, parkingPoint[1], parkingPoint[2]);
                continue;
                end;

             if GetLives(i) = 1000 then
                begin
                SetTag(i, tBusy);
                continue;
                end;

             if GetControl(i) = control_manual and IsDrivenBy(i) then
                ComRepairVehicleAndReturn(IsDrivenBy(i));
             end;
          end;
      end;
   end;

sol := UnitFilter(forces, [[f_or, [f_class, class_soldier], [f_class, class_mortar], [f_class, class_sniper], [f_class, class_bazooker]], [f_ok]]);

if sol then
   begin
   if enemyInBase then
      begin
      for i in sol do
          begin
          tw := IsInUnit(i);

          if tw then
             begin
             if not tw in FilterAllUnits([[f_side, side], [f_see, enemySide], [f_or, [f_btype, b_bunker], [f_btype, b_breastwork]]]) then
                ComExitBuilding(i);
             end
          else
             if IsInArea(i, area) then
                ComAttackUnit(i, NearestUnitToUnit(enemyInBase, i))
             else
                ComMoveToarea(i, area);
          end;
      end
   else
      begin
      empty := FilterUnitsInArea(area, [[f_not, [f_full]], [f_or, [f_btype, b_bunker], [f_btype, b_armoury], [f_btype, b_barracks], [f_btype, b_breastwork]]]);

      if empty then
         empty := ReverseArray(empty);

      for i in sol do
          begin
          tag := GetTag(i);

          if GetLives(i) < 1000 and tag <> tHeal then
             begin
             SetTag(i, tHeal);
             ComMoveXY(i, healPoint[1], healPoint[2]);
             AddComHold(i);
             continue;
             end;

          if GetLives(i) = 1000 and tag = tHeal then
             begin
             SetTag(i, 0);
             continue;
             end;

          if HasTask(i) then
             continue;

          if not IsInUnit(i) and not tag and empty then
             begin
             ComEnterUnit(i, empty[1]);

             empty := Delete(empty, 1);
             end;
          end;
      end;
   end;
End;


Every 0$2 trigger UnitFilter(amForce, [f_ok]) do
begin
BaseScript(botSides[1], 1, amBaseArea, amBaseInnerArea, amBaseOuterArea, amForce, [27,33], [22,17]);
enable;
End;        

Every 3$00 trigger IsOk(amDep) and FilterAllUnits([[f_side, 1], [f_btype, b_factory]]) do
var i;
begin
enable;

for i in FilterAllUnits([[f_side, 1], [f_btype, b_factory]]) do
    if BuildingStatus(i) = bs_idle and UnitsInside(i) > 0 then
       begin
       amConstructList := [
         [us_medium_tracked, engine_combustion, control_manual, us_double_gun],
         [us_medium_tracked, engine_combustion, control_manual, us_gatling_gun],
         [us_heavy_tracked, engine_combustion, control_manual, us_heavy_gun]
       ];
       end;
End;

